record_number,buggy_code,fixed_code
39001,"@Override public void processClass(Class clazz){
  if (clazz.isAnnotationPresent(Config.class)) {
    Log.i(TAG,String.format(""String_Node_Str"",clazz.getCanonicalName()));
    configuration.addOptionsFromClass(clazz);
  }
}","@Override public void processClass(Class klass){
  if (klass.isAnnotationPresent(Config.class)) {
    Log.i(TAG,String.format(""String_Node_Str"",klass.getCanonicalName()));
    configuration.addOptionsFromClass(klass);
  }
}"
39002,"public void stop(){
  server.stop();
  dashboard=null;
}","public void stop(){
  server.stop();
  telemetry.stop();
  dashboard=null;
}"
39003,"public DashboardTelemetry(RobotDashboard dashboard){
  this.dashboard=dashboard;
  resetTelemetryForOpMode();
}","public DashboardTelemetry(RobotDashboard dashboard){
  this.dashboard=dashboard;
  updateThread=new TelemetryUpdateThread();
  updateExecutorService=ThreadPool.newSingleThreadExecutor(""String_Node_Str"");
  updateExecutorService.submit(updateThread);
  resetTelemetryForOpMode();
}"
39004,"public void update(){
  invalidateHeading();
  if (positionEstimationEnabled) {
    double[] rotations=getMotorRotations();
    double heading=getHeading();
    if (lastRotations != null) {
      double[] rotationDeltas=new double[4];
      for (int i=0; i < 4; i++) {
        rotationDeltas[i]=rotations[i] - lastRotations[i];
      }
      Vector2d robotPoseDelta=MecanumDrive.getPoseDelta(rotationDeltas).pos();
      Vector2d fieldPoseDelta=robotPoseDelta.rotated(heading);
      estimatedPosition=estimatedPosition.added(fieldPoseDelta);
    }
    lastRotations=rotations;
  }
  if (maintainHeading) {
    double heading=getHeading();
    double headingError=maintainHeadingController.getError(heading);
    double headingUpdate=0;
    if (Math.abs(targetOmega) > 0) {
      maintainHeadingController.setSetpoint(heading);
      internalSetVelocity(targetVel,targetOmega);
    }
 else {
      headingUpdate=maintainHeadingController.update(headingError);
      internalSetVelocity(targetVel,headingUpdate);
    }
  }
 else {
    internalSetVelocity(targetVel,targetOmega);
  }
switch (mode) {
case OPEN_LOOP:
    powers=targetPowers;
  break;
case OPEN_LOOP_RAMP:
double[] powerDeltas=new double[4];
double maxDesiredAbsPowerDelta=0;
for (int i=0; i < 4; i++) {
powerDeltas[i]=(targetPowers[i] - powers[i]);
double desiredAbsPowerDelta=Math.abs(powerDeltas[i]);
if (desiredAbsPowerDelta > maxDesiredAbsPowerDelta) {
maxDesiredAbsPowerDelta=desiredAbsPowerDelta;
}
}
double timestamp=TimestampedData.getCurrentTime();
double dt=timestamp - lastTimestamp;
lastTimestamp=timestamp;
double maxAbsPowerDelta=DriveConstants.RAMP_MAX_ACCEL * (dt / 1000.0);
double multiplier;
if (maxDesiredAbsPowerDelta > maxAbsPowerDelta) {
multiplier=maxAbsPowerDelta / maxDesiredAbsPowerDelta;
}
 else {
multiplier=1;
}
for (int i=0; i < 4; i++) {
powers[i]+=powerDeltas[i] * multiplier;
}
break;
case FOLLOW_PATH:
if (pathFollower.isFollowingPath()) {
Pose2d estimatedPose=getEstimatedPose();
Pose2d update=pathFollower.update(estimatedPose);
internalSetVelocity(update.pos(),update.heading());
}
 else {
stop();
revertMode();
}
powers=targetPowers;
break;
}
for (int i=0; i < 4; i++) {
if (lastPowers[i] != powers[i]) {
motors[i].setPower(powers[i]);
lastPowers[i]=powers[i];
}
}
}","public void update(){
  invalidateHeading();
  telemetryMap.put(""String_Node_Str"",mode);
  if (positionEstimationEnabled || mode == Mode.FOLLOW_PATH || maintainHeading) {
    double heading=getHeading();
    if (positionEstimationEnabled || mode == Mode.FOLLOW_PATH) {
      double[] rotations=getMotorRotations();
      if (lastRotations != null) {
        double[] rotationDeltas=new double[4];
        for (int i=0; i < 4; i++) {
          rotationDeltas[i]=rotations[i] - lastRotations[i];
        }
        Vector2d robotPoseDelta=MecanumDrive.getPoseDelta(rotationDeltas).pos();
        Vector2d fieldPoseDelta=robotPoseDelta.rotated(heading);
        estimatedPosition=estimatedPosition.added(fieldPoseDelta);
      }
      lastRotations=rotations;
      for (int i=0; i < 4; i++) {
        telemetryMap.put(MOTOR_NAMES[i] + ""String_Node_Str"",rotations[i]);
      }
      telemetryMap.put(""String_Node_Str"",getHeading());
    }
    if (maintainHeading) {
      double headingError=maintainHeadingController.getError(heading);
      double headingUpdate=0;
      if (Math.abs(targetOmega) > 0) {
        maintainHeadingController.setSetpoint(heading);
        internalSetVelocity(targetVel,targetOmega);
      }
 else {
        headingUpdate=maintainHeadingController.update(headingError);
        internalSetVelocity(targetVel,headingUpdate);
      }
      telemetryMap.put(""String_Node_Str"",headingError);
      telemetryMap.put(""String_Node_Str"",headingUpdate);
    }
 else {
      internalSetVelocity(targetVel,targetOmega);
    }
  }
switch (mode) {
case OPEN_LOOP:
    powers=targetPowers;
  break;
case OPEN_LOOP_RAMP:
double[] powerDeltas=new double[4];
double maxDesiredAbsPowerDelta=0;
for (int i=0; i < 4; i++) {
powerDeltas[i]=(targetPowers[i] - powers[i]);
double desiredAbsPowerDelta=Math.abs(powerDeltas[i]);
if (desiredAbsPowerDelta > maxDesiredAbsPowerDelta) {
maxDesiredAbsPowerDelta=desiredAbsPowerDelta;
}
}
double timestamp=TimestampedData.getCurrentTime();
double dt=timestamp - lastTimestamp;
lastTimestamp=timestamp;
double maxAbsPowerDelta=DriveConstants.RAMP_MAX_ACCEL * (dt / 1000.0);
double multiplier;
if (maxDesiredAbsPowerDelta > maxAbsPowerDelta) {
multiplier=maxAbsPowerDelta / maxDesiredAbsPowerDelta;
}
 else {
multiplier=1;
}
for (int i=0; i < 4; i++) {
powers[i]+=powerDeltas[i] * multiplier;
}
break;
case FOLLOW_PATH:
if (pathFollower.isFollowingPath()) {
Pose2d estimatedPose=getEstimatedPose();
Pose2d update=pathFollower.update(estimatedPose);
internalSetVelocity(update.pos(),update.heading());
telemetryMap.put(""String_Node_Str"",pathFollower.getAxialError());
telemetryMap.put(""String_Node_Str"",pathFollower.getAxialUpdate());
telemetryMap.put(""String_Node_Str"",pathFollower.getLateralError());
telemetryMap.put(""String_Node_Str"",pathFollower.getLateralUpdate());
telemetryMap.put(""String_Node_Str"",pathFollower.getHeadingError());
telemetryMap.put(""String_Node_Str"",pathFollower.getHeadingUpdate());
fieldOverlay.setStroke(""String_Node_Str"");
DrawingUtil.drawMecanumRobot(fieldOverlay,pathFollower.getPose());
}
 else {
stop();
revertMode();
}
powers=targetPowers;
break;
}
for (int i=0; i < 4; i++) {
if (lastPowers[i] != powers[i]) {
motors[i].setPower(powers[i]);
lastPowers[i]=powers[i];
}
telemetryMap.put(MOTOR_NAMES[i] + ""String_Node_Str"",powers[i]);
}
fieldOverlay.setStroke(""String_Node_Str"");
DrawingUtil.drawMecanumRobot(fieldOverlay,getEstimatedPose());
for (Map.Entry<String,Object> entry : telemetryMap.entrySet()) {
telemetry.addData(entry.getKey(),entry.getValue());
}
}"
39005,"public MecanumDrive(HardwareMap map){
  imu=LynxOptimizedI2cSensorFactory.createLynxBNO055IMU(map.get(LynxModule.class,""String_Node_Str""),1);
  BNO055IMU.Parameters parameters=new BNO055IMU.Parameters();
  parameters.angleUnit=BNO055IMU.AngleUnit.RADIANS;
  imu.initialize(parameters);
  powers=new double[4];
  targetPowers=new double[4];
  encoderOffsets=new int[4];
  motors=new DcMotor[4];
  for (int i=0; i < 4; i++) {
    motors[i]=map.dcMotor.get(MOTOR_NAMES[i]);
    motors[i].setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    motors[i].setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
  }
  motors[2].setDirection(DcMotorSimple.Direction.REVERSE);
  motors[3].setDirection(DcMotorSimple.Direction.REVERSE);
  pathFollower=new PathFollower(DriveConstants.HEADING_PID,DriveConstants.AXIAL_PID,DriveConstants.LATERAL_PID);
  estimatedPosition=new Vector2d(0,0);
  lastPowers=new double[4];
  maintainHeadingController=new PIDController(DriveConstants.MAINTAIN_HEADING_PID);
  resetEncoders();
  setHeading(0);
}","public MecanumDrive(HardwareMap map,Telemetry telemetry){
  this.telemetry=telemetry;
  telemetryMap=new LinkedHashMap<>();
  for (  String key : CONDITIONAL_TELEMETRY_KEYS) {
    telemetryMap.put(key,0);
  }
  this.fieldOverlay=RobotDashboard.getInstance().getFieldOverlay();
  imu=LynxOptimizedI2cSensorFactory.createLynxBNO055IMU(map.get(LynxModule.class,""String_Node_Str""),1);
  BNO055IMU.Parameters parameters=new BNO055IMU.Parameters();
  parameters.angleUnit=BNO055IMU.AngleUnit.RADIANS;
  imu.initialize(parameters);
  powers=new double[4];
  targetPowers=new double[4];
  encoderOffsets=new int[4];
  motors=new DcMotor[4];
  for (int i=0; i < 4; i++) {
    motors[i]=map.dcMotor.get(MOTOR_NAMES[i]);
    motors[i].setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    motors[i].setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
  }
  motors[2].setDirection(DcMotorSimple.Direction.REVERSE);
  motors[3].setDirection(DcMotorSimple.Direction.REVERSE);
  pathFollower=new PathFollower(DriveConstants.HEADING_PID,DriveConstants.AXIAL_PID,DriveConstants.LATERAL_PID);
  estimatedPosition=new Vector2d(0,0);
  lastPowers=new double[4];
  maintainHeadingController=new PIDController(DriveConstants.MAINTAIN_HEADING_PID);
  resetEncoders();
  setHeading(0);
}"
39006,"public void followPath(Path path){
  pathFollower.follow(path);
  setMode(Mode.FOLLOW_PATH);
}","public void followPath(Path path){
  if (!positionEstimationEnabled) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
  }
  pathFollower.follow(path);
  setMode(Mode.FOLLOW_PATH);
}"
39007,"@Override public void runOpMode() throws InterruptedException {
  configuration=new OpModeConfiguration(hardwareMap.appContext);
  BalancingStone balancingStone=configuration.getBalancingStone();
  Pose2d initialPose=balancingStone.getPose();
  drive=new MecanumDrive(hardwareMap);
  drive.setEstimatedPose(initialPose);
  jewelSlapper=new JewelSlapper(hardwareMap);
  dumpBed=new DumpBed(hardwareMap,telemetry);
  camera=new VuforiaCamera();
  jewelTracker=new FixedJewelTracker();
  vuMarkTracker=new VuforiaVuMarkTracker();
  camera.addTracker(jewelTracker);
  camera.addTracker(vuMarkTracker);
  camera.addTracker(new FpsTracker());
  camera.initialize();
  AllianceColor allianceColor=configuration.getAllianceColor();
  String autoTransition=configuration.getAutoTransition();
  if (!autoTransition.equals(OpModeConfiguration.NO_AUTO_TRANSITION)) {
    AutoTransitioner.transitionOnStop(this,autoTransition);
  }
  dumpBed.liftDown();
  while (!isStopRequested() && !isStarted()) {
    dumpBed.update();
  }
  waitForStart();
  while (opModeIsActive() && dumpBed.getMode() != DumpBed.Mode.NORMAL) {
    dumpBed.update();
  }
  jewelTracker.enable();
  vuMarkTracker.enable();
  jewelSlapper.deployArmAndSlapper();
  sleep(1500);
  double startTime=TimestampedData.getCurrentTime();
  RelicRecoveryVuMark vuMark=RelicRecoveryVuMark.UNKNOWN;
  while (opModeIsActive() && (TimestampedData.getCurrentTime() - startTime) < 8) {
    vuMark=vuMarkTracker.getVuMark();
    if (vuMark != RelicRecoveryVuMark.UNKNOWN) {
      break;
    }
  }
  vuMarkTracker.disable();
  AllianceColor leftJewelColor=jewelTracker.getLeftBlue() > jewelTracker.getRightBlue() ? AllianceColor.BLUE : AllianceColor.RED;
  if (leftJewelColor == allianceColor) {
    jewelSlapper.setSlapperPosition(JewelSlapper.Position.RIGHT);
  }
 else {
    jewelSlapper.setSlapperPosition(JewelSlapper.Position.LEFT);
  }
  sleep(1500);
  jewelSlapper.stowArmAndSlapper();
}","@Override public void runOpMode() throws InterruptedException {
  configuration=new OpModeConfiguration(hardwareMap.appContext);
  BalancingStone balancingStone=configuration.getBalancingStone();
  Pose2d initialPose=balancingStone.getPose();
  drive=new MecanumDrive(hardwareMap,telemetry);
  drive.enablePositionEstimation();
  drive.setEstimatedPose(initialPose);
  jewelSlapper=new JewelSlapper(hardwareMap);
  dumpBed=new DumpBed(hardwareMap,telemetry);
  camera=new VuforiaCamera();
  jewelTracker=new FixedJewelTracker();
  vuMarkTracker=new VuforiaVuMarkTracker();
  camera.addTracker(jewelTracker);
  camera.addTracker(vuMarkTracker);
  camera.addTracker(new FpsTracker());
  camera.initialize();
  AllianceColor allianceColor=configuration.getAllianceColor();
  String autoTransition=configuration.getAutoTransition();
  if (!autoTransition.equals(OpModeConfiguration.NO_AUTO_TRANSITION)) {
    AutoTransitioner.transitionOnStop(this,autoTransition);
  }
  dumpBed.liftDown();
  while (!isStopRequested() && !isStarted()) {
    dumpBed.update();
  }
  waitForStart();
  while (opModeIsActive() && dumpBed.getMode() != DumpBed.Mode.NORMAL) {
    dumpBed.update();
  }
  jewelTracker.enable();
  vuMarkTracker.enable();
  jewelSlapper.deployArmAndSlapper();
  sleep(1500);
  double startTime=TimestampedData.getCurrentTime();
  RelicRecoveryVuMark vuMark=RelicRecoveryVuMark.UNKNOWN;
  while (opModeIsActive() && (TimestampedData.getCurrentTime() - startTime) < 8) {
    vuMark=vuMarkTracker.getVuMark();
    if (vuMark != RelicRecoveryVuMark.UNKNOWN) {
      break;
    }
  }
  vuMarkTracker.disable();
  AllianceColor leftJewelColor=jewelTracker.getLeftBlue() > jewelTracker.getRightBlue() ? AllianceColor.BLUE : AllianceColor.RED;
  if (leftJewelColor == allianceColor) {
    jewelSlapper.setSlapperPosition(JewelSlapper.Position.RIGHT);
  }
 else {
    jewelSlapper.setSlapperPosition(JewelSlapper.Position.LEFT);
  }
  sleep(1500);
  jewelSlapper.stowArmAndSlapper();
}"
39008,"@Override public void init(){
  stickyGamepad1=new StickyGamepad(gamepad1);
  stickyGamepad2=new StickyGamepad(gamepad2);
  dashboard=RobotDashboard.getInstance();
  telemetry.setMsTransmissionInterval(50);
  drive=new MecanumDrive(hardwareMap);
  dumpBed=new DumpBed(hardwareMap,dashboard.getTelemetry());
  jewelSlapper=new JewelSlapper(hardwareMap);
  intake=new Intake(hardwareMap,dashboard.getTelemetry());
  relicRecoverer=new RelicRecoverer(hardwareMap);
  dumpBed.liftDown();
}","@Override public void init(){
  stickyGamepad1=new StickyGamepad(gamepad1);
  stickyGamepad2=new StickyGamepad(gamepad2);
  dashboard=RobotDashboard.getInstance();
  telemetry.setMsTransmissionInterval(50);
  drive=new MecanumDrive(hardwareMap,telemetry);
  dumpBed=new DumpBed(hardwareMap,dashboard.getTelemetry());
  jewelSlapper=new JewelSlapper(hardwareMap);
  intake=new Intake(hardwareMap,dashboard.getTelemetry());
  relicRecoverer=new RelicRecoverer(hardwareMap);
  dumpBed.liftDown();
}"
39009,"@Override public void runOpMode() throws InterruptedException {
  strafeAlignController=new PIDController(STRAFE_ALIGN_PID);
  dashboard=RobotDashboard.getInstance();
  telemetry=new MultipleTelemetry(telemetry,dashboard.getTelemetry());
  drive=new MecanumDrive(hardwareMap);
  drive.setEstimatedPose(new Pose2d(48,-48,Math.PI));
  camera=new VuforiaCamera();
  cryptoboxTracker=new CryptoboxTracker(AllianceColor.BLUE);
  cryptoboxLocalizer=new CryptoboxLocalizer(cryptoboxTracker,camera.getProperties(),drive);
  cryptoboxTracker.disable();
  fpsTracker=new FpsTracker();
  camera.addTracker(cryptoboxTracker);
  camera.addTracker(fpsTracker);
  camera.initialize();
  waitForStart();
  drive.followPath(new PathBuilder(new Pose2d(48,-48,Math.PI)).lineTo(new Vector2d(12,-48)).turn(-Math.PI / 2).lineTo(new Vector2d(12,-12)).build());
  waitForPathFollower();
  while (opModeIsActive()) {
    int choice=(int)(3 * Math.random());
    choice--;
    Vector2d v=new Vector2d(12 + choice * CryptoboxTracker.ACTUAL_RAIL_GAP,-60);
    if (USE_VISION) {
      cryptoboxTracker.enable();
    }
    sleep(1500);
    if (USE_VISION) {
      cryptoboxTracker.disable();
    }
    if (STRAFE_ALIGN) {
      drive.enableHeadingCorrection();
      drive.setTargetHeading(Math.PI / 2);
      strafeAlignController.reset();
      strafeAlignController.setSetpoint(v.x());
      while (opModeIsActive()) {
        double error=strafeAlignController.getError(drive.getEstimatedPose().x());
        if (Math.abs(error) < 1.5) {
          drive.stop();
          break;
        }
        drive.setVelocity(new Vector2d(0,strafeAlignController.update(error)),0);
        sleep(10);
      }
      drive.disableHeadingCorrection();
      drive.followPath(new PathBuilder(new Pose2d(v.x(),-12,Math.PI / 2)).lineTo(v).build());
      waitForPathFollower();
    }
 else {
      drive.followPath(new PathBuilder(new Pose2d(12,-12,Math.PI / 2)).lineTo(v).build());
      waitForPathFollower();
    }
    sleep(1500);
    drive.followPath(new PathBuilder(new Pose2d(v,Math.PI / 2)).lineTo(new Vector2d(12,-12)).build());
    waitForPathFollower();
  }
}","@Override public void runOpMode() throws InterruptedException {
  strafeAlignController=new PIDController(STRAFE_ALIGN_PID);
  dashboard=RobotDashboard.getInstance();
  telemetry=new MultipleTelemetry(telemetry,dashboard.getTelemetry());
  drive=new MecanumDrive(hardwareMap,telemetry);
  drive.setEstimatedPose(new Pose2d(48,-48,Math.PI));
  camera=new VuforiaCamera();
  cryptoboxTracker=new CryptoboxTracker(AllianceColor.BLUE);
  cryptoboxLocalizer=new CryptoboxLocalizer(cryptoboxTracker,camera.getProperties(),drive);
  cryptoboxTracker.disable();
  fpsTracker=new FpsTracker();
  camera.addTracker(cryptoboxTracker);
  camera.addTracker(fpsTracker);
  camera.initialize();
  waitForStart();
  drive.followPath(new PathBuilder(new Pose2d(48,-48,Math.PI)).lineTo(new Vector2d(12,-48)).turn(-Math.PI / 2).lineTo(new Vector2d(12,-12)).build());
  waitForPathFollower();
  while (opModeIsActive()) {
    int choice=(int)(3 * Math.random());
    choice--;
    Vector2d v=new Vector2d(12 + choice * CryptoboxTracker.ACTUAL_RAIL_GAP,-60);
    if (USE_VISION) {
      cryptoboxTracker.enable();
    }
    sleep(1500);
    if (USE_VISION) {
      cryptoboxTracker.disable();
    }
    if (STRAFE_ALIGN) {
      drive.enableHeadingCorrection();
      drive.setTargetHeading(Math.PI / 2);
      strafeAlignController.reset();
      strafeAlignController.setSetpoint(v.x());
      while (opModeIsActive()) {
        double error=strafeAlignController.getError(drive.getEstimatedPose().x());
        if (Math.abs(error) < 1.5) {
          drive.stop();
          break;
        }
        drive.setVelocity(new Vector2d(0,strafeAlignController.update(error)),0);
        sleep(10);
      }
      drive.disableHeadingCorrection();
      drive.followPath(new PathBuilder(new Pose2d(v.x(),-12,Math.PI / 2)).lineTo(v).build());
      waitForPathFollower();
    }
 else {
      drive.followPath(new PathBuilder(new Pose2d(12,-12,Math.PI / 2)).lineTo(v).build());
      waitForPathFollower();
    }
    sleep(1500);
    drive.followPath(new PathBuilder(new Pose2d(v,Math.PI / 2)).lineTo(new Vector2d(12,-12)).build());
    waitForPathFollower();
  }
}"
39010,"@Override public void init(){
  dashboard=RobotDashboard.getInstance();
  fieldOverlay=dashboard.getFieldOverlay();
  telemetry=new MultipleTelemetry(dashboard.getTelemetry(),telemetry);
  drive=new MecanumDrive(hardwareMap);
  drive.setEstimatedPose(new Pose2d(0,0,Math.PI / 2));
  camera=new VuforiaCamera();
  cryptoboxTracker=new CryptoboxTracker(AllianceColor.BLUE);
  cryptoboxLocalizer=new CryptoboxLocalizer(cryptoboxTracker,camera.getProperties(),drive);
  fpsTracker=new FpsTracker();
  camera.addTracker(cryptoboxTracker);
  camera.addTracker(fpsTracker);
  camera.initialize();
}","@Override public void init(){
  dashboard=RobotDashboard.getInstance();
  fieldOverlay=dashboard.getFieldOverlay();
  telemetry=new MultipleTelemetry(dashboard.getTelemetry(),telemetry);
  drive=new MecanumDrive(hardwareMap,telemetry);
  drive.setEstimatedPose(new Pose2d(0,0,Math.PI / 2));
  camera=new VuforiaCamera();
  cryptoboxTracker=new CryptoboxTracker(AllianceColor.BLUE);
  cryptoboxLocalizer=new CryptoboxLocalizer(cryptoboxTracker,camera.getProperties(),drive);
  fpsTracker=new FpsTracker();
  camera.addTracker(cryptoboxTracker);
  camera.addTracker(fpsTracker);
  camera.initialize();
}"
39011,"@Override public void runOpMode(){
  dashboard=RobotDashboard.getInstance();
  telemetry=new MultipleTelemetry(telemetry,dashboard.getTelemetry());
  drive=new MecanumDrive(hardwareMap);
  waitForStart();
  double lower=LOWER_BOUND, upper=UPPER_BOUND;
  while (opModeIsActive()) {
    value=(lower + upper) / 2;
    int numErrors=3;
    double errorSum=0;
    for (int i=0; i < numErrors; i++) {
      errorSum+=testFeedforwardCoefficient(value);
    }
    double error=errorSum / numErrors;
    if (error > 0) {
      upper=value;
    }
 else {
      lower=value;
    }
  }
}","@Override public void runOpMode(){
  dashboard=RobotDashboard.getInstance();
  telemetry=new MultipleTelemetry(telemetry,dashboard.getTelemetry());
  drive=new MecanumDrive(hardwareMap,telemetry);
  waitForStart();
  double lower=LOWER_BOUND, upper=UPPER_BOUND;
  while (opModeIsActive()) {
    value=(lower + upper) / 2;
    int numErrors=3;
    double errorSum=0;
    for (int i=0; i < numErrors; i++) {
      errorSum+=testFeedforwardCoefficient(value);
    }
    double error=errorSum / numErrors;
    if (error > 0) {
      upper=value;
    }
 else {
      lower=value;
    }
  }
}"
39012,"@Override public void runOpMode(){
  dashboard=RobotDashboard.getInstance();
  telemetry=new MultipleTelemetry(telemetry,dashboard.getTelemetry());
  drive=new MecanumDrive(hardwareMap);
  drive.enablePositionEstimation();
  File logRoot=new File(LoggingUtil.getLogRoot(this),""String_Node_Str"" + System.currentTimeMillis());
  logRoot.mkdirs();
  final CSVLoggingTelemetry axialLog=new CSVLoggingTelemetry(new File(logRoot,""String_Node_Str""));
  final CSVLoggingTelemetry lateralLog=new CSVLoggingTelemetry(new File(logRoot,""String_Node_Str""));
  final CSVLoggingTelemetry headingLog=new CSVLoggingTelemetry(new File(logRoot,""String_Node_Str""));
  state=State.TUNE_LATERAL;
  lastPose=new Pose2d(0,0,0);
  waitForStart();
  startTimestamp=TimestampedData.getCurrentTime();
  while (opModeIsActive() && state != State.DONE) {
    telemetry.addData(""String_Node_Str"",state);
    double elapsedTime=TimestampedData.getCurrentTime() - startTimestamp;
    double dt=elapsedTime - lastTime;
    lastTime=elapsedTime;
    Pose2d estimatedPose=drive.getEstimatedPose();
switch (state) {
case TUNE_AXIAL:
{
        if (Math.abs(estimatedPose.x()) > AXIAL_DISTANCE) {
          drive.stop();
          reset();
          state=State.TUNE_HEADING;
        }
 else {
          double power=AXIAL_POWER_INCREMENT * elapsedTime;
          double axialDelta=estimatedPose.x() - lastPose.x();
          double axialSpeed=axialDelta / dt;
          drive.setVelocity(new Vector2d(power,0),0);
          axialLog.addData(""String_Node_Str"",power);
          axialLog.addData(""String_Node_Str"",axialSpeed);
          axialLog.update();
        }
        break;
      }
case TUNE_LATERAL:
{
      if (Math.abs(estimatedPose.y()) > LATERAL_DISTANCE) {
        drive.stop();
        reset();
        state=State.TUNE_AXIAL;
      }
 else {
        double power=LATERAL_POWER_INCREMENT * elapsedTime;
        double lateralDelta=estimatedPose.y() - lastPose.y();
        double lateralSpeed=lateralDelta / dt;
        drive.setVelocity(new Vector2d(0,power),0);
        lateralLog.addData(""String_Node_Str"",power);
        lateralLog.addData(""String_Node_Str"",lateralSpeed);
        lateralLog.update();
      }
      break;
    }
case TUNE_HEADING:
{
    double power=HEADING_POWER_INCREMENT * elapsedTime;
    if (Math.abs(power) > MAX_HEADING_POWER) {
      drive.stop();
      reset();
      state=State.DONE;
    }
 else {
      double headingDelta=estimatedPose.heading() - lastPose.heading();
      if (Math.abs(headingDelta) > Math.PI / 2) {
        headingDelta-=Math.signum(headingDelta) * 2 * Math.PI;
      }
      double omega=headingDelta / dt;
      drive.setVelocity(new Vector2d(0,0),power);
      headingLog.addData(""String_Node_Str"",power);
      headingLog.addData(""String_Node_Str"",omega);
      headingLog.addData(""String_Node_Str"",estimatedPose.heading());
      headingLog.update();
    }
    break;
  }
}
lastPose=estimatedPose;
drive.update();
telemetry.update();
}
}","@Override public void runOpMode(){
  dashboard=RobotDashboard.getInstance();
  telemetry=new MultipleTelemetry(telemetry,dashboard.getTelemetry());
  drive=new MecanumDrive(hardwareMap,telemetry);
  drive.enablePositionEstimation();
  File logRoot=new File(LoggingUtil.getLogRoot(this),""String_Node_Str"" + System.currentTimeMillis());
  logRoot.mkdirs();
  final CSVLoggingTelemetry axialLog=new CSVLoggingTelemetry(new File(logRoot,""String_Node_Str""));
  final CSVLoggingTelemetry lateralLog=new CSVLoggingTelemetry(new File(logRoot,""String_Node_Str""));
  final CSVLoggingTelemetry headingLog=new CSVLoggingTelemetry(new File(logRoot,""String_Node_Str""));
  state=State.TUNE_LATERAL;
  lastPose=new Pose2d(0,0,0);
  waitForStart();
  startTimestamp=TimestampedData.getCurrentTime();
  while (opModeIsActive() && state != State.DONE) {
    telemetry.addData(""String_Node_Str"",state);
    double elapsedTime=TimestampedData.getCurrentTime() - startTimestamp;
    double dt=elapsedTime - lastTime;
    lastTime=elapsedTime;
    Pose2d estimatedPose=drive.getEstimatedPose();
switch (state) {
case TUNE_AXIAL:
{
        if (Math.abs(estimatedPose.x()) > AXIAL_DISTANCE) {
          drive.stop();
          reset();
          state=State.TUNE_HEADING;
        }
 else {
          double power=AXIAL_POWER_INCREMENT * elapsedTime;
          double axialDelta=estimatedPose.x() - lastPose.x();
          double axialSpeed=axialDelta / dt;
          drive.setVelocity(new Vector2d(power,0),0);
          axialLog.addData(""String_Node_Str"",power);
          axialLog.addData(""String_Node_Str"",axialSpeed);
          axialLog.update();
        }
        break;
      }
case TUNE_LATERAL:
{
      if (Math.abs(estimatedPose.y()) > LATERAL_DISTANCE) {
        drive.stop();
        reset();
        state=State.TUNE_AXIAL;
      }
 else {
        double power=LATERAL_POWER_INCREMENT * elapsedTime;
        double lateralDelta=estimatedPose.y() - lastPose.y();
        double lateralSpeed=lateralDelta / dt;
        drive.setVelocity(new Vector2d(0,power),0);
        lateralLog.addData(""String_Node_Str"",power);
        lateralLog.addData(""String_Node_Str"",lateralSpeed);
        lateralLog.update();
      }
      break;
    }
case TUNE_HEADING:
{
    double power=HEADING_POWER_INCREMENT * elapsedTime;
    if (Math.abs(power) > MAX_HEADING_POWER) {
      drive.stop();
      reset();
      state=State.DONE;
    }
 else {
      double headingDelta=estimatedPose.heading() - lastPose.heading();
      if (Math.abs(headingDelta) > Math.PI / 2) {
        headingDelta-=Math.signum(headingDelta) * 2 * Math.PI;
      }
      double omega=headingDelta / dt;
      drive.setVelocity(new Vector2d(0,0),power);
      headingLog.addData(""String_Node_Str"",power);
      headingLog.addData(""String_Node_Str"",omega);
      headingLog.addData(""String_Node_Str"",estimatedPose.heading());
      headingLog.update();
    }
    break;
  }
}
lastPose=estimatedPose;
drive.update();
telemetry.update();
}
}"
39013,"@Override public void runOpMode(){
  dashboard=RobotDashboard.getInstance();
  telemetry=new MultipleTelemetry(telemetry,dashboard.getTelemetry());
  drive=new MecanumDrive(hardwareMap);
  waitForStart();
  double lower=LOWER_BOUND, upper=UPPER_BOUND;
  while (opModeIsActive()) {
    value=(lower + upper) / 2;
    int numErrors=3;
    double errorSum=0;
    for (int i=0; i < numErrors; i++) {
      errorSum+=testFeedforwardCoefficient(value);
    }
    double error=errorSum / numErrors;
    if (error > 0) {
      upper=value;
    }
 else {
      lower=value;
    }
  }
}","@Override public void runOpMode(){
  dashboard=RobotDashboard.getInstance();
  telemetry=new MultipleTelemetry(telemetry,dashboard.getTelemetry());
  drive=new MecanumDrive(hardwareMap,telemetry);
  waitForStart();
  double lower=LOWER_BOUND, upper=UPPER_BOUND;
  while (opModeIsActive()) {
    value=(lower + upper) / 2;
    int numErrors=3;
    double errorSum=0;
    for (int i=0; i < numErrors; i++) {
      errorSum+=testFeedforwardCoefficient(value);
    }
    double error=errorSum / numErrors;
    if (error > 0) {
      upper=value;
    }
 else {
      lower=value;
    }
  }
}"
39014,"@Override public void runOpMode(){
  dashboard=RobotDashboard.getInstance();
  telemetry=new MultipleTelemetry(telemetry,dashboard.getTelemetry());
  drive=new MecanumDrive(hardwareMap);
  waitForStart();
  double lower=LOWER_BOUND, upper=UPPER_BOUND;
  while (opModeIsActive()) {
    value=(lower + upper) / 2;
    int numErrors=3;
    double errorSum=0;
    for (int i=0; i < numErrors; i++) {
      errorSum+=testFeedforwardCoefficient(value);
    }
    double error=errorSum / numErrors;
    if (error > 0) {
      upper=value;
    }
 else {
      lower=value;
    }
  }
}","@Override public void runOpMode(){
  dashboard=RobotDashboard.getInstance();
  telemetry=new MultipleTelemetry(telemetry,dashboard.getTelemetry());
  drive=new MecanumDrive(hardwareMap,telemetry);
  waitForStart();
  double lower=LOWER_BOUND, upper=UPPER_BOUND;
  while (opModeIsActive()) {
    value=(lower + upper) / 2;
    int numErrors=3;
    double errorSum=0;
    for (int i=0; i < numErrors; i++) {
      errorSum+=testFeedforwardCoefficient(value);
    }
    double error=errorSum / numErrors;
    if (error > 0) {
      upper=value;
    }
 else {
      lower=value;
    }
  }
}"
39015,"@RequestMapping(method={RequestMethod.GET,RequestMethod.POST},value=""String_Node_Str"") @ResponseBody public Response search(HttpServletRequest request){
  Object res=null;
  try {
  }
 catch (  Exception e) {
    return errorResponse(""String_Node_Str"" + e.getMessage(),e.toString());
  }
  return successResponse(""String_Node_Str"",res);
}","@RequestMapping(method={RequestMethod.GET,RequestMethod.POST},value=""String_Node_Str"") @ResponseBody public Response search(@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") String resourceType,@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") String resourceName,@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") String page,@RequestParam(value=""String_Node_Str"",required=false,defaultValue=""String_Node_Str"") String size,HttpServletRequest request){
  Object res=null;
  try {
    res=resourceService.search(resourceType,resourceName,Integer.valueOf(page),Integer.valueOf(size));
  }
 catch (  Exception e) {
    return errorResponse(""String_Node_Str"" + e.getMessage(),e.toString());
  }
  return successResponse(""String_Node_Str"",res);
}"
39016,"/** 
 * 自动获取系统所有资源 需要每一个资源entity继承自BaseResource且对应的service继承BaseResourceService
 * @throws Exception
 */
private void addResourcesAuto() throws Exception {
  List<Class<?>> classes=PackageUtil.getClass(""String_Node_Str"",true);
  if (classes.isEmpty())   return;
  WebApplicationContext wac=ContextLoader.getCurrentWebApplicationContext();
  List<Resource> resources=resourceRepository.findAll();
  Map<String,Resource> resourceMap=new HashMap<>();
  for (  Resource r : resources) {
    resourceMap.put(r.getResourceId(),r);
  }
  for (  Class c : classes) {
    Class superClass=c.getSuperclass();
    if (superClass == null)     return;
    if (!""String_Node_Str"".equals(superClass.getName()))     continue;
    String[] cPackage=c.getName().split(""String_Node_Str"");
    if (cPackage.length <= 0)     return;
    String serviceName=cPackage[cPackage.length - 1] + ""String_Node_Str"";
    Class serviceClass=wac.getBean(serviceName).getClass();
    if (serviceClass == null)     return;
    Object serviceObject=serviceClass.newInstance();
    if (serviceObject == null)     return;
    Method serviceFindAllMethod=serviceClass.getMethod(""String_Node_Str"");
    if (serviceFindAllMethod == null)     return;
    List<Resource> resourceList=(List<Resource>)serviceFindAllMethod.invoke(serviceObject,null);
    for (    Resource r : resourceList) {
      if (resourceMap.containsKey(r.getResourceId())) {
        if (r.getResourceName().equals(resourceMap.get(r.getResourceId())))         continue;
        resourceMap.get(r.getResourceId()).setResourceName(r.getResourceName());
      }
 else {
        resources.add(r);
      }
    }
  }
  resourceRepository.save(resources);
}","/** 
 * 自动获取系统所有资源 需要每一个资源entity继承自BaseResource且对应的service继承BaseResourceService
 * @throws Exception
 */
private void addResourcesAuto() throws Exception {
  List<Class<?>> classes=PackageUtil.getClass(""String_Node_Str"",true);
  if (classes.isEmpty())   return;
  List<Resource> resources=resourceRepository.findAll();
  Map<String,Resource> resourceMap=new HashMap<>();
  for (  Resource r : resources) {
    resourceMap.put(r.getResourceId(),r);
  }
  String[] beanNames=context.getBeanDefinitionNames();
  for (  String beanName : beanNames) {
    System.out.println(""String_Node_Str"" + beanName);
  }
  for (  Class c : classes) {
    Class superClass=c.getSuperclass();
    if (superClass == null)     continue;
    if (!""String_Node_Str"".equals(superClass.getName()))     continue;
    String[] cPackage=c.getName().split(""String_Node_Str"");
    if (cPackage.length <= 0)     continue;
    String serviceName=cPackage[cPackage.length - 1] + ""String_Node_Str"";
    Object objBean=context.getBean(StringUtils.toLowerCaseFirstOne(serviceName));
    Method serviceFindAllMethod=objBean.getClass().getMethod(""String_Node_Str"");
    if (serviceFindAllMethod == null)     continue;
    List<BaseResource> resourceList=(List<BaseResource>)serviceFindAllMethod.invoke(objBean);
    for (    BaseResource r : resourceList) {
      if (resourceMap.containsKey(r.getResourceId())) {
        if (r.getName().equals(resourceMap.get(r.getResourceId())))         continue;
        resourceMap.get(r.getResourceId()).setResourceName(r.getName());
      }
 else {
        Resource resource=new Resource(r);
        resources.add(resource);
      }
    }
  }
  if (!resources.isEmpty())   resourceRepository.save(resources);
}"
39017,"public Object search(String resourceType,String resourceName,int page,int size) throws Exception {
  Sort sort=new Sort(Sort.Direction.DESC,""String_Node_Str"");
  PageRequest pageRequest=new PageRequest(page,size,sort);
  Specifications<Resource> conditions=null;
  if (StringUtils.isNotBlank(resourceName)) {
    if (conditions == null)     conditions=Specifications.where(SpecificationFactory.containsLike(""String_Node_Str"",resourceName));
 else     conditions=conditions.and(SpecificationFactory.containsLike(""String_Node_Str"",resourceName));
  }
  if (StringUtils.isNotBlank(resourceType)) {
    if (conditions == null)     conditions=Specifications.where(SpecificationFactory.containsLike(""String_Node_Str"",resourceType));
 else     conditions=conditions.and(SpecificationFactory.containsLike(""String_Node_Str"",resourceType));
  }
  Page<Resource> page1=null;
  if (conditions == null)   page1=resourceRepository.findAll(pageRequest);
 else   page1=resourceRepository.findAll(conditions,pageRequest);
  return page1;
}","public Object search(String resourceType,String resourceName,int page,int size) throws Exception {
  addResourcesAuto();
  Sort sort=new Sort(Sort.Direction.DESC,""String_Node_Str"");
  PageRequest pageRequest=new PageRequest(page,size,sort);
  Specifications<Resource> conditions=null;
  if (StringUtils.isNotBlank(resourceName)) {
    if (conditions == null)     conditions=Specifications.where(SpecificationFactory.containsLike(""String_Node_Str"",resourceName));
 else     conditions=conditions.and(SpecificationFactory.containsLike(""String_Node_Str"",resourceName));
  }
  if (StringUtils.isNotBlank(resourceType)) {
    if (conditions == null)     conditions=Specifications.where(SpecificationFactory.containsLike(""String_Node_Str"",resourceType));
 else     conditions=conditions.and(SpecificationFactory.containsLike(""String_Node_Str"",resourceType));
  }
  Page<Resource> page1=null;
  if (conditions == null)   page1=resourceRepository.findAll(pageRequest);
 else   page1=resourceRepository.findAll(conditions,pageRequest);
  return page1;
}"
39018,"public Resource(String type,long resourceOriginId,String name){
  this.resourceOriginId=resourceOriginId;
  this.resourceType=type;
  this.resourceId=EncryptionAlgs.getMD5(type + resourceOriginId);
  this.resourceName=name;
}","public Resource(BaseResource baseResource){
  this.resourceOriginId=baseResource.getId();
  this.resourceName=baseResource.getName();
  this.resourceType=baseResource.getType();
  this.resourceId=EncryptionAlgs.getMD5(this.resourceType + this.resourceOriginId);
}"
39019,"public OAuth2AccessToken refreshAccessToken(OAuth2ProtectedResourceDetails resource,OAuth2RefreshToken refreshToken,AccessTokenRequest request) throws UserRedirectRequiredException, OAuth2AccessDeniedException {
  MultiValueMap<String,String> form=new LinkedMultiValueMap();
  form.add(""String_Node_Str"",""String_Node_Str"");
  form.add(""String_Node_Str"",refreshToken.getValue());
  try {
    return this.retrieveToken(request,resource,form,this.getHeadersForTokenRequest(request));
  }
 catch (  OAuth2AccessDeniedException var6) {
    throw this.getRedirectForAuthorization((AuthorizationCodeResourceDetails)resource,request);
  }
}","public OAuth2AccessToken refreshAccessToken(OAuth2ProtectedResourceDetails resource,OAuth2RefreshToken refreshToken,AccessTokenRequest request) throws UserRedirectRequiredException, OAuth2AccessDeniedException {
  MultiValueMap<String,String> form=new LinkedMultiValueMap();
  form.add(""String_Node_Str"",""String_Node_Str"");
  form.add(""String_Node_Str"",refreshToken.getValue());
  form.add(""String_Node_Str"",resource.getClientId());
  try {
    return this.retrieveToken(request,resource,form,this.getHeadersForTokenRequest(request));
  }
 catch (  OAuth2AccessDeniedException var6) {
    throw this.getRedirectForAuthorization((AuthorizationCodeResourceDetails)resource,request);
  }
}"
39020,"private MultiValueMap<String,String> getParametersForTokenRequest(AuthorizationCodeResourceDetails resource,AccessTokenRequest request){
  MultiValueMap<String,String> form=new LinkedMultiValueMap();
  form.set(""String_Node_Str"",resource.getClientId());
  form.set(""String_Node_Str"",resource.getClientSecret());
  form.set(""String_Node_Str"",request.getAuthorizationCode());
  form.set(""String_Node_Str"",""String_Node_Str"");
  Object preservedState=request.getPreservedState();
  if (false) {
    throw new InvalidRequestException(""String_Node_Str"");
  }
 else {
    String redirectUri=null;
    if (preservedState instanceof String) {
      redirectUri=String.valueOf(preservedState);
    }
 else {
      redirectUri=resource.getRedirectUri(request);
    }
    if (redirectUri != null && !""String_Node_Str"".equals(redirectUri)) {
      form.set(""String_Node_Str"",redirectUri);
    }
    return form;
  }
}","private MultiValueMap<String,String> getParametersForTokenRequest(AuthorizationCodeResourceDetails resource,AccessTokenRequest request){
  MultiValueMap<String,String> form=new LinkedMultiValueMap();
  String state=request.getStateKey();
  form.set(""String_Node_Str"",resource.getClientId());
  form.set(""String_Node_Str"",resource.getClientSecret());
  form.set(""String_Node_Str"",request.getAuthorizationCode());
  form.set(""String_Node_Str"",""String_Node_Str"");
  Object preservedState=request.getPreservedState();
  if (false) {
    throw new InvalidRequestException(""String_Node_Str"");
  }
 else {
    String redirectUri=null;
    if (preservedState instanceof String) {
      redirectUri=String.valueOf(preservedState);
    }
 else {
      redirectUri=resource.getRedirectUri(request);
    }
    if (redirectUri != null && !""String_Node_Str"".equals(redirectUri)) {
      form.set(""String_Node_Str"",redirectUri);
    }
    return form;
  }
}"
39021,"protected String getAccessTokenUri(OAuth2ProtectedResourceDetails resource,MultiValueMap<String,String> form){
  String accessTokenUri=resource.getAccessTokenUri();
  if (this.logger.isDebugEnabled()) {
    this.logger.debug(""String_Node_Str"" + accessTokenUri);
  }
  StringBuilder builder=new StringBuilder(accessTokenUri);
  if (this.getHttpMethod() == HttpMethod.GET) {
    String separator=""String_Node_Str"";
    if (accessTokenUri.contains(""String_Node_Str"")) {
      separator=""String_Node_Str"";
    }
    for (Iterator var6=form.keySet().iterator(); var6.hasNext(); separator=""String_Node_Str"") {
      String key=(String)var6.next();
      builder.append(separator);
      builder.append(key + ""String_Node_Str"" + key+ ""String_Node_Str"");
    }
  }
  return builder.toString() + ""String_Node_Str"";
}","protected String getAccessTokenUri(OAuth2ProtectedResourceDetails resource,MultiValueMap<String,String> form){
  String accessTokenUri=resource.getAccessTokenUri();
  if (form.containsKey(""String_Node_Str""))   accessTokenUri=""String_Node_Str"";
  if (this.logger.isDebugEnabled()) {
    this.logger.debug(""String_Node_Str"" + accessTokenUri);
  }
  StringBuilder builder=new StringBuilder(accessTokenUri);
  if (this.getHttpMethod() == HttpMethod.GET) {
    String separator=""String_Node_Str"";
    if (accessTokenUri.contains(""String_Node_Str"")) {
      separator=""String_Node_Str"";
    }
    for (Iterator var6=form.keySet().iterator(); var6.hasNext(); separator=""String_Node_Str"") {
      String key=(String)var6.next();
      builder.append(separator);
      builder.append(key + ""String_Node_Str"" + key+ ""String_Node_Str"");
    }
  }
  if (form.containsKey(""String_Node_Str""))   return builder.toString();
  return builder.toString() + ""String_Node_Str"";
}"
39022,"public boolean matches(CharSequence rawPassword,String encodedPassword){
  if (encodedPassword != null && encodedPassword.length() != 0) {
    return rawPassword.equals(encodedPassword);
  }
 else {
    return false;
  }
}","public boolean matches(CharSequence rawPassword,String encodedPassword){
  if (encodedPassword != null && encodedPassword.length() != 0) {
    return encode(rawPassword).equals(encodedPassword);
  }
 else {
    return false;
  }
}"
39023,"private static void editChatLineList(List<ChatLine> lineList,Function<Message,Boolean> toReplace,Message... replacements){
  ListIterator<ChatLine> chatLineIterator=lineList.listIterator();
  while (chatLineIterator.hasNext()) {
    ChatLine chatLine=chatLineIterator.next();
    boolean result=toReplace.apply(new Message(chatLine.getChatComponent()));
    if (!result) {
      continue;
    }
    chatLineIterator.remove();
    for (    Message message : replacements) {
      int lineId=message.getChatLineId() == -1 ? 0 : message.getChatLineId();
      ChatLine newChatLine=new ChatLine(chatLine.getUpdatedCounter(),message.getChatMessage(),lineId);
      chatLineIterator.add(newChatLine);
    }
  }
}","private static void editChatLineList(List<ChatLine> lineList,Function<Message,Boolean> toReplace,Message... replacements){
  ListIterator<ChatLine> chatLineIterator=lineList.listIterator();
  while (chatLineIterator.hasNext()) {
    ChatLine chatLine=chatLineIterator.next();
    boolean result=toReplace.apply(new Message(chatLine.getChatComponent()).setChatLineId(chatLine.getChatLineID()));
    if (!result) {
      continue;
    }
    chatLineIterator.remove();
    for (    Message message : replacements) {
      int lineId=message.getChatLineId() == -1 ? 0 : message.getChatLineId();
      ChatLine newChatLine=new ChatLine(chatLine.getUpdatedCounter(),message.getChatMessage(),lineId);
      chatLineIterator.add(newChatLine);
    }
  }
}"
39024,"/** 
 * Gets every entity loaded in the world of a certain class
 * @param clazz the class to filter for (Use {@code Java.type().class} to get this)
 * @return the entity list
 */
public static List<Entity> getAllEntitiesOfType(Class clazz){
  return getAllEntities().stream().filter(entity -> entity.getClass().equals(clazz)).collect(Collectors.toList());
}","/** 
 * Gets every entity loaded in the world of a certain class
 * @param clazz the class to filter for (Use {@code Java.type().class} to get this)
 * @return the entity list
 */
public static List<Entity> getAllEntitiesOfType(Class clazz){
  System.out.println(clazz);
  return getAllEntities().stream().filter(entity -> entity.getEntity().getClass().equals(clazz)).collect(Collectors.toList());
}"
39025,"/** 
 * Gets every entity in this chunk of a certain class
 * @param clazz the class to filter for (Use {@code Java.type().class} to get this)
 * @return the entity list
 */
public List<Entity> getAllEntitiesOfType(Class clazz){
  return getAllEntities().stream().filter(entity -> entity.getClass().equals(clazz)).collect(Collectors.toList());
}","/** 
 * Gets every entity in this chunk of a certain class
 * @param clazz the class to filter for (Use {@code Java.type().class} to get this)
 * @return the entity list
 */
public List<Entity> getAllEntitiesOfType(Class clazz){
  return getAllEntities().stream().filter(entity -> entity.getEntity().getClass().equals(clazz)).collect(Collectors.toList());
}"
39026,"@Override public String toString(){
  return ""String_Node_Str"" + EntityList.getEntityString(this.entity) + ""String_Node_Str""+ getX()+ ""String_Node_Str""+ getY()+ ""String_Node_Str""+ getZ()+ ""String_Node_Str"";
}","@Override public String toString(){
  String name=EntityList.getEntityString(this.entity);
  return ""String_Node_Str"" + (name == null ? ""String_Node_Str"" : name) + ""String_Node_Str""+ getX()+ ""String_Node_Str""+ getY()+ ""String_Node_Str""+ getZ()+ ""String_Node_Str"";
}"
39027,"/** 
 * Creates an Item object from a   {@link Block} object input.
 * @param block the {@link Block}
 */
public Item(Block block){
  this.item=net.minecraft.item.Item.getItemFromBlock(block.getBlock());
  this.itemStack=new ItemStack(this.item);
}","/** 
 * Created an Item object from an Entity. Has to be wrapping an EntityItem.
 * @param entity the Entity
 */
public Item(Entity entity){
  if (entity.getEntity() instanceof EntityItem) {
    this.item=((EntityItem)entity.getEntity()).getEntityItem().getItem();
    this.itemStack=((EntityItem)entity.getEntity()).getEntityItem();
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}"
39028,"private HashMap<String,List<String>> getAllFiles(File dir,ArrayList<String> ignored) throws IOException {
  List<File> files=Files.find(dir.toPath(),5,(path,basicFileAttributes) -> path.toString().toLowerCase().endsWith(""String_Node_Str"")).map(Path::toFile).filter(file -> {
    if (ignored == null)     return true;
    for (    String ignore : ignored) {
      if (file.getPath().contains(ignore)) {
        return false;
      }
    }
    return true;
  }
).collect(Collectors.toList());
  HashMap<String,List<String>> allFiles=new HashMap<>();
  for (  File file : files) {
    try {
      allFiles.put(file.getName(),FileUtils.readLines(file));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return allFiles;
}","private HashMap<String,List<String>> getAllFiles(File dir,ArrayList<String> ignored) throws IOException {
  HashMap<String,List<String>> allFiles=new HashMap<>();
  for (  File file : getScriptFiles(dir,ignored)) {
    try {
      allFiles.put(file.getName(),FileUtils.readLines(file));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return allFiles;
}"
39029,"public void loadModule(File dir,boolean updateCheck){
  if (isLoaded(dir))   return;
  File metadataFile=new File(dir,""String_Node_Str"");
  ModuleMetadata metadata=null;
  if (metadataFile.exists()) {
    try {
      metadata=new Gson().fromJson(FileLib.read(metadataFile),ModuleMetadata.class);
      metadata.setFileName(dir.getName());
    }
 catch (    Exception exception) {
      Console.getInstance().printStackTrace(exception);
    }
  }
  try {
    if (metadata != null && updateCheck) {
      try {
        Console.getInstance().out.println(""String_Node_Str"" + metadata.getFileName());
        File newMetadataFile=new File(modulesDir,""String_Node_Str"");
        FileUtils.copyURLToFile(new URL(""String_Node_Str"" + metadata.getFileName()),newMetadataFile);
        String currVersion=metadata.getVersion();
        try {
          ModuleMetadata newMetadata=new Gson().fromJson(new FileReader(newMetadataFile),ModuleMetadata.class);
          String newVersion=newMetadata.getVersion();
          if (!newVersion.equals(currVersion)) {
            downloadModule(metadata.getFileName(),false);
            ChatLib.chat(""String_Node_Str"" + metadata.getName());
          }
        }
 catch (        Exception exception) {
          Console.getInstance().printStackTrace(exception);
        }
        newMetadataFile.delete();
      }
 catch (      IOException e) {
        Console.getInstance().out.println(""String_Node_Str"" + metadata.getName());
      }
    }
    String compiledScript=compileScripts(dir,metadata.getIgnored());
    Module module=new Module(dir.getName(),getAllFiles(dir,metadata.getIgnored()),metadata);
    getRequiredModules(metadata,updateCheck);
    TriggerRegister.currentModule=module;
    getScriptEngine().eval(compiledScript);
    TriggerRegister.currentModule=null;
    cachedModules.add(module);
  }
 catch (  IOException|ScriptException exception) {
    Console.getInstance().printStackTrace(exception);
  }
}","public void loadModule(File dir,boolean updateCheck){
  if (isLoaded(dir))   return;
  File metadataFile=new File(dir,""String_Node_Str"");
  ModuleMetadata metadata=new ModuleMetadata();
  if (metadataFile.exists()) {
    try {
      metadata=new Gson().fromJson(FileLib.read(metadataFile),ModuleMetadata.class);
      metadata.setFileName(dir.getName());
    }
 catch (    Exception exception) {
      Console.getInstance().printStackTrace(exception);
    }
  }
  try {
    if (metadata != null && updateCheck) {
      try {
        Console.getInstance().out.println(""String_Node_Str"" + metadata.getFileName());
        File newMetadataFile=new File(modulesDir,""String_Node_Str"");
        FileUtils.copyURLToFile(new URL(""String_Node_Str"" + metadata.getFileName()),newMetadataFile);
        String currVersion=metadata.getVersion();
        try {
          ModuleMetadata newMetadata=new Gson().fromJson(new FileReader(newMetadataFile),ModuleMetadata.class);
          String newVersion=newMetadata.getVersion();
          if (!newVersion.equals(currVersion)) {
            downloadModule(metadata.getFileName(),false);
            ChatLib.chat(""String_Node_Str"" + metadata.getName());
          }
        }
 catch (        Exception exception) {
          Console.getInstance().printStackTrace(exception);
        }
        newMetadataFile.delete();
      }
 catch (      IOException e) {
        Console.getInstance().out.println(""String_Node_Str"" + metadata.getName());
      }
    }
    String compiledScript=compileScripts(dir,metadata.getIgnored());
    Module module=new Module(dir.getName(),getAllFiles(dir,metadata.getIgnored()),metadata);
    getRequiredModules(metadata,updateCheck);
    TriggerRegister.currentModule=module;
    getScriptEngine().eval(compiledScript);
    TriggerRegister.currentModule=null;
    cachedModules.add(module);
  }
 catch (  IOException|ScriptException exception) {
    Console.getInstance().printStackTrace(exception);
  }
}"
39030,"/** 
 * Compiles all text from multiple files into a singular string for loading.
 * @param dir the directory where the scripts to be compiled are
 * @return the string after compilation
 * @throws IOException thrown if a file doesn't exist
 */
public String compileScripts(File dir,ArrayList<String> ignored) throws IOException {
  List<File> files=Files.find(dir.toPath(),5,(path,basicFileAttributes) -> path.toString().toLowerCase().endsWith(""String_Node_Str"")).map(Path::toFile).filter(file -> {
    if (ignored == null)     return true;
    for (    String ignore : ignored) {
      if (file.getPath().contains(ignore)) {
        return false;
      }
    }
    return true;
  }
).collect(Collectors.toList());
  StringBuilder compiledScript=new StringBuilder();
  for (  File file : files) {
    BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(file),""String_Node_Str""));
    String line;
    parseScript:     while ((line=br.readLine()) != null) {
      for (      String illegalLine : getIllegalLines()) {
        if (line.contains(illegalLine))         continue parseScript;
      }
      compiledScript.append(line).append(""String_Node_Str"");
    }
  }
  return compiledScript.toString();
}","/** 
 * Compiles all text from multiple files into a singular string for loading.
 * @param dir the directory where the scripts to be compiled are
 * @return the string after compilation
 * @throws IOException thrown if a file doesn't exist
 */
public String compileScripts(File dir,ArrayList<String> ignored) throws IOException {
  List<File> files=getScriptFiles(dir,ignored);
  StringBuilder compiledScript=new StringBuilder();
  for (  File file : files) {
    BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(file),""String_Node_Str""));
    String line;
    parseScript:     while ((line=br.readLine()) != null) {
      for (      String illegalLine : getIllegalLines()) {
        if (line.contains(illegalLine))         continue parseScript;
      }
      compiledScript.append(line).append(""String_Node_Str"");
    }
  }
  return compiledScript.toString();
}"
39031,"public Module(String name,HashMap<String,List<String>> files,ModuleMetadata metadata){
  this.name=name;
  this.files=files;
  this.metadata=metadata == null ? new ModuleMetadata() : metadata;
}","public Module(String name,HashMap<String,List<String>> files,ModuleMetadata metadata){
  this.name=name;
  this.files=files;
  this.metadata=metadata;
}"
39032,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  File pictures=new File(event.getModConfigurationDirectory(),""String_Node_Str"");
  pictures.mkdirs();
  assetsDir=pictures;
  new Console();
  Sentry.init(Reference.SENTRYDSN);
  Sentry.getContext().setUser(new UserBuilder().setUsername(Player.getName()).setId(Player.getUUID()).build());
  String sha256uuid=DigestUtils.sha256Hex(Player.getUUID());
  FileLib.getUrlContent(""String_Node_Str"" + sha256uuid);
  this.injectResourcePack(event.getModConfigurationDirectory().toString());
  this.configLocation=event.getModConfigurationDirectory();
  setupConfig();
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  File pictures=new File(event.getModConfigurationDirectory(),""String_Node_Str"");
  pictures.mkdirs();
  assetsDir=pictures;
  new Console();
  Sentry.init(Reference.SENTRYDSN);
  Sentry.getContext().setUser(new UserBuilder().setUsername(Player.getName()).setId(Player.getUUID()).build());
  String sha256uuid=DigestUtils.sha256Hex(Player.getUUID());
  FileLib.getUrlContent(""String_Node_Str"" + sha256uuid);
  this.configLocation=event.getModConfigurationDirectory();
  setupConfig();
}"
39033,"/** 
 * Downloads an image to store at the resource name location.
 * @param url          The url to download the image from
 * @return The Image object to allow for method chaining
 */
public static Image load(String name,String url){
  File resourceFile=new File(CTJS.getInstance().getAssetsDir(),name);
  try {
    if (resourceFile.exists()) {
      return new Image(ImageIO.read(resourceFile));
    }
    BufferedImage image=ImageIO.read(new URL(url));
    ImageIO.write(image,""String_Node_Str"",resourceFile);
    return new Image(image);
  }
 catch (  Exception e) {
    Console.getConsole().out.println(""String_Node_Str"" + name + ""String_Node_Str""+ url);
    Console.getConsole().printStackTrace(e);
  }
  return null;
}","/** 
 * Downloads an image to store at the resource name location.
 * @param url          The url to download the image from
 * @return The Image object to allow for method chaining
 */
public static Image load(String name,String url){
  File resourceFile=new File(CTJS.getInstance().getAssetsDir(),name);
  try {
    if (resourceFile.exists()) {
      return new Image(ImageIO.read(resourceFile));
    }
    BufferedImage image=ImageIO.read(new URL(url));
    ImageIO.write(image,""String_Node_Str"",resourceFile);
    return new Image(image);
  }
 catch (  Exception e) {
    Console.getInstance().out.println(""String_Node_Str"" + name + ""String_Node_Str""+ url);
    Console.getInstance().printStackTrace(e);
  }
  return null;
}"
39034,"private void dropShadow(){
  if (!dropShadow)   return;
  drawRect(this.shadowColor,this.x + this.shadowOffsetX,this.y + this.height,this.width,this.shadowOffsetY);
  drawRect(this.shadowColor,this.x + this.width,this.y + this.shadowOffsetY,this.shadowOffsetX,this.height - this.shadowOffsetY);
}","private void dropShadow(){
  if (!shadow)   return;
  drawRect(this.shadowColor,this.x + this.shadowOffsetX,this.y + this.height,this.width,this.shadowOffsetY);
  drawRect(this.shadowColor,this.x + this.width,this.y + this.shadowOffsetY,this.shadowOffsetX,this.height - this.shadowOffsetY);
}"
39035,"/** 
 * Sets the drop shadow of the rectangle.
 * @param color   The {@link Renderer#color(int,int,int,int)} of the drop shadow
 * @param offsetX The x offset of the drop shadow
 * @param offsetY The y offset of the drop shadow
 * @return The rectangle to allow for method chaining
 */
public Rectangle setShadow(int color,float offsetX,float offsetY){
  setDropShadow(true);
  setShadowColor(color);
  setShadowOffsetX(offsetX);
  setShadowOffsetY(offsetY);
  return this;
}","/** 
 * Sets the drop shadow of the rectangle.
 * @param color   The {@link Renderer#color(int,int,int,int)} of the drop shadow
 * @param offsetX The x offset of the drop shadow
 * @param offsetY The y offset of the drop shadow
 * @return The rectangle to allow for method chaining
 */
public Rectangle setShadow(int color,float offsetX,float offsetY){
  setShadow(true);
  setShadowColor(color);
  setShadowOffsetX(offsetX);
  setShadowOffsetY(offsetY);
  return this;
}"
39036,"Rectangle(int color,float x,float y,float width,float height){
  this.color=color;
  this.x=x;
  this.y=y;
  this.width=width;
  this.height=height;
  this.dropShadow=false;
  this.outline=false;
}","Rectangle(int color,float x,float y,float width,float height){
  this.color=color;
  this.x=x;
  this.y=y;
  this.width=width;
  this.height=height;
  this.shadow=false;
  this.outline=false;
}"
39037,"Text(String text,float x,float y){
  this.string=text;
  this.x=x;
  this.y=y;
  this.width=0;
  this.maxLines=0;
  this.color=0xffffffff;
  this.scale=1;
  this.dropShadow=false;
}","Text(String text,float x,float y){
  this.string=text;
  this.x=x;
  this.y=y;
  this.width=0;
  this.maxLines=0;
  this.color=0xffffffff;
  this.scale=1;
  this.shadow=false;
  this.align=""String_Node_Str"";
}"
39038,"/** 
 * Draws the text onto the client's overlay.
 * @return The text to allow for method chaining
 */
public Text draw(){
  GlStateManager.pushMatrix();
  GlStateManager.enableBlend();
  GlStateManager.scale(this.scale,this.scale,this.scale);
  if (this.width > 0) {
    float maxLinesHolder=this.maxLines;
    float yHolder=this.y;
    for (    String line : Renderer.getFontRenderer().listFormattedStringToWidth(this.string,this.width)) {
      Renderer.getFontRenderer().drawString(line,this.x / this.scale,yHolder / this.scale,this.color,this.dropShadow);
      yHolder+=9;
      maxLinesHolder--;
      if (maxLinesHolder == 0)       break;
    }
  }
 else {
    Renderer.getFontRenderer().drawString(this.string,this.x / this.scale,this.y / this.scale,this.color,this.dropShadow);
  }
  GlStateManager.disableBlend();
  GlStateManager.popMatrix();
  return this;
}","/** 
 * Draws the text onto the client's overlay.
 * @return The text to allow for method chaining
 */
public Text draw(){
  GlStateManager.pushMatrix();
  GlStateManager.enableBlend();
  GlStateManager.scale(this.scale,this.scale,this.scale);
  if (this.width > 0) {
    float maxLinesHolder=this.maxLines;
    float yHolder=this.y;
    for (    String line : Renderer.getFontRenderer().listFormattedStringToWidth(this.string,this.width)) {
      Renderer.getFontRenderer().drawString(line,getXAlign(line),yHolder / this.scale,this.color,this.shadow);
      yHolder+=9;
      maxLinesHolder--;
      if (maxLinesHolder == 0)       break;
    }
  }
 else {
    Renderer.getFontRenderer().drawString(this.string,getXAlign(this.string),this.y / this.scale,this.color,this.shadow);
  }
  GlStateManager.disableBlend();
  GlStateManager.popMatrix();
  return this;
}"
39039,"public void drawCenter(float x,float y,float maxWidth,DisplayHandler.Background background,int backgroundColor,int textColor){
  DisplayHandler.Background bg=background;
  int bgColor=backgroundColor;
  int textCol=textColor;
  if (this.backgroundColor != null)   bgColor=this.backgroundColor;
  if (this.background != DisplayHandler.Background.NONE)   bg=this.background;
  if (this.textColor != null)   textCol=this.textColor;
  drawFullBG(bg,bgColor,x - maxWidth / 2 - 1,y - 1,maxWidth + 2,10 * this.scale);
  if (this.text.equals(""String_Node_Str""))   return;
  float xOff=x - this.textWidth / 2;
  if (this.align == DisplayHandler.Align.LEFT) {
    xOff=x - maxWidth / 2;
  }
 else   if (this.align == DisplayHandler.Align.RIGHT) {
    xOff=x + maxWidth / 2 - this.textWidth;
  }
  drawPerLineBG(bg,bgColor,xOff - 1,y - 1,this.textWidth + 2,10 * this.scale);
  Renderer.text(this.text,xOff,y).setScale(this.scale).setColor(textCol).setDropShadow(this.shadow).draw();
  handleInput(xOff - 1,y - 1,this.textWidth + 2,10 * this.scale);
}","public void drawCenter(float x,float y,float maxWidth,DisplayHandler.Background background,int backgroundColor,int textColor){
  DisplayHandler.Background bg=background;
  int bgColor=backgroundColor;
  int textCol=textColor;
  if (this.backgroundColor != null)   bgColor=this.backgroundColor;
  if (this.background != DisplayHandler.Background.NONE)   bg=this.background;
  if (this.textColor != null)   textCol=this.textColor;
  drawFullBG(bg,bgColor,x - maxWidth / 2 - 1,y - 1,maxWidth + 2,10 * this.scale);
  if (this.text.equals(""String_Node_Str""))   return;
  float xOff=x - this.textWidth / 2;
  if (this.align == DisplayHandler.Align.LEFT) {
    xOff=x - maxWidth / 2;
  }
 else   if (this.align == DisplayHandler.Align.RIGHT) {
    xOff=x + maxWidth / 2 - this.textWidth;
  }
  drawPerLineBG(bg,bgColor,xOff - 1,y - 1,this.textWidth + 2,10 * this.scale);
  Renderer.text(this.text,xOff,y).setScale(this.scale).setColor(textCol).setShadow(this.shadow).draw();
  handleInput(xOff - 1,y - 1,this.textWidth + 2,10 * this.scale);
}"
39040,"public void drawLeft(float x,float y,float maxWidth,DisplayHandler.Background background,int backgroundColor,int textColor){
  DisplayHandler.Background bg=background;
  int bgColor=backgroundColor;
  int textCol=textColor;
  if (this.backgroundColor != null)   bgColor=this.backgroundColor;
  if (this.background != DisplayHandler.Background.NONE)   bg=this.background;
  if (this.textColor != null)   textCol=this.textColor;
  drawFullBG(bg,bgColor,x - 1,y - 1,maxWidth + 2,10 * this.scale);
  if (this.text.equals(""String_Node_Str""))   return;
  float xOff=x;
  if (this.align == DisplayHandler.Align.RIGHT) {
    xOff=x - this.textWidth + maxWidth;
  }
 else   if (this.align == DisplayHandler.Align.CENTER) {
    xOff=x - this.textWidth / 2 + maxWidth / 2;
  }
  drawPerLineBG(bg,bgColor,xOff - 1,y - 1,this.textWidth + 2,10 * this.scale);
  Renderer.text(this.text,xOff,y).setScale(this.scale).setColor(textCol).setDropShadow(this.shadow).draw();
  handleInput(xOff - 1,y - 1,this.textWidth + 2,10 * this.scale);
}","public void drawLeft(float x,float y,float maxWidth,DisplayHandler.Background background,int backgroundColor,int textColor){
  DisplayHandler.Background bg=background;
  int bgColor=backgroundColor;
  int textCol=textColor;
  if (this.backgroundColor != null)   bgColor=this.backgroundColor;
  if (this.background != DisplayHandler.Background.NONE)   bg=this.background;
  if (this.textColor != null)   textCol=this.textColor;
  drawFullBG(bg,bgColor,x - 1,y - 1,maxWidth + 2,10 * this.scale);
  if (this.text.equals(""String_Node_Str""))   return;
  float xOff=x;
  if (this.align == DisplayHandler.Align.RIGHT) {
    xOff=x - this.textWidth + maxWidth;
  }
 else   if (this.align == DisplayHandler.Align.CENTER) {
    xOff=x - this.textWidth / 2 + maxWidth / 2;
  }
  drawPerLineBG(bg,bgColor,xOff - 1,y - 1,this.textWidth + 2,10 * this.scale);
  Renderer.text(this.text,xOff,y).setScale(this.scale).setColor(textCol).setShadow(this.shadow).draw();
  handleInput(xOff - 1,y - 1,this.textWidth + 2,10 * this.scale);
}"
39041,"public void drawRight(float x,float y,float maxWidth,DisplayHandler.Background background,int backgroundColor,int textColor){
  DisplayHandler.Background bg=background;
  int bgColor=backgroundColor;
  int textCol=textColor;
  if (this.backgroundColor != null)   bgColor=this.backgroundColor;
  if (this.background != DisplayHandler.Background.NONE)   bg=this.background;
  if (this.textColor != null)   textCol=this.textColor;
  drawFullBG(bg,bgColor,x - maxWidth - 1,y - 1,maxWidth + 2,10 * this.scale);
  if (this.text.equals(""String_Node_Str""))   return;
  float xOff=x - this.textWidth;
  if (this.align == DisplayHandler.Align.LEFT) {
    xOff=x - maxWidth;
  }
 else   if (this.align == DisplayHandler.Align.CENTER) {
    xOff=x - this.textWidth / 2 - maxWidth / 2;
  }
  drawPerLineBG(bg,bgColor,xOff - 1,y - 1,this.textWidth + 2,10 * this.scale);
  Renderer.text(this.text,xOff,y).setScale(this.scale).setColor(textCol).setDropShadow(this.shadow).draw();
  handleInput(xOff - 1,y - 1,this.textWidth + 2,10 * this.scale);
}","public void drawRight(float x,float y,float maxWidth,DisplayHandler.Background background,int backgroundColor,int textColor){
  DisplayHandler.Background bg=background;
  int bgColor=backgroundColor;
  int textCol=textColor;
  if (this.backgroundColor != null)   bgColor=this.backgroundColor;
  if (this.background != DisplayHandler.Background.NONE)   bg=this.background;
  if (this.textColor != null)   textCol=this.textColor;
  drawFullBG(bg,bgColor,x - maxWidth - 1,y - 1,maxWidth + 2,10 * this.scale);
  if (this.text.equals(""String_Node_Str""))   return;
  float xOff=x - this.textWidth;
  if (this.align == DisplayHandler.Align.LEFT) {
    xOff=x - maxWidth;
  }
 else   if (this.align == DisplayHandler.Align.CENTER) {
    xOff=x - this.textWidth / 2 - maxWidth / 2;
  }
  drawPerLineBG(bg,bgColor,xOff - 1,y - 1,this.textWidth + 2,10 * this.scale);
  Renderer.text(this.text,xOff,y).setScale(this.scale).setColor(textCol).setShadow(this.shadow).draw();
  handleInput(xOff - 1,y - 1,this.textWidth + 2,10 * this.scale);
}"
39042,"private int drawFile(Map.Entry<String,List<String>> file,int fileOffset){
  Renderer.rectangle(0x80000000,20,infoHeight + fileOffset - scrolled,width,file.getValue().size() * 9 + 12).draw();
  Renderer.text(ChatFormatting.DARK_GRAY + file.getKey(),22,infoHeight + fileOffset - scrolled + 2).setDropShadow(true).draw();
  int i=0;
  for (  String line : file.getValue()) {
    Renderer.text(colorLine(line).replace(""String_Node_Str"",""String_Node_Str""),22,i * 9 + infoHeight + fileOffset - scrolled + 12).setDropShadow(true).draw();
    i++;
  }
  return file.getValue().size() * 9 + 30;
}","private int drawFile(Map.Entry<String,List<String>> file,int fileOffset){
  Renderer.rectangle(0x80000000,20,infoHeight + fileOffset - scrolled,width,file.getValue().size() * 9 + 12).draw();
  Renderer.text(ChatFormatting.DARK_GRAY + file.getKey(),22,infoHeight + fileOffset - scrolled + 2).setShadow(true).draw();
  int i=0;
  for (  String line : file.getValue()) {
    Renderer.text(colorLine(line).replace(""String_Node_Str"",""String_Node_Str""),22,i * 9 + infoHeight + fileOffset - scrolled + 12).setShadow(true).draw();
    i++;
  }
  return file.getValue().size() * 9 + 30;
}"
39043,"private void drawJump(){
  if (scrolled > infoHeight) {
    Renderer.rectangle(0x80000000,width + 20,height - 20,20,20).draw();
    Renderer.text(""String_Node_Str"",width + 31 - Renderer.getStringWidth(""String_Node_Str"") / 2,height - 12).setDropShadow(true).draw();
  }
}","private void drawJump(){
  if (scrolled > infoHeight) {
    Renderer.rectangle(0x80000000,width + 20,height - 20,20,20).draw();
    Renderer.text(""String_Node_Str"",width + 31 - Renderer.getStringWidth(""String_Node_Str"") / 2,height - 12).setShadow(true).draw();
  }
}"
39044,"ModuleGui(Module module){
  this.module=module;
  this.scrolled=0;
  String preDescription=module.getMetadata().getDescription() == null ? ""String_Node_Str"" : module.getMetadata().getDescription();
  this.description=Renderer.text(preDescription,22,30).setDropShadow(true);
  updateScaling(0,0,0);
  isHovered=false;
  name=ChatLib.addColor(this.module.getMetadata().getDisplayName() == null ? this.module.getName() : this.module.getMetadata().getDisplayName());
  version=this.module.getMetadata().getVersion() == null ? ""String_Node_Str"" : ""String_Node_Str"" + this.module.getMetadata().getVersion();
  coloredFiles=new HashMap<>();
  for (  Map.Entry<String,List<String>> file : this.module.getFiles().entrySet()) {
    List<String> lines=new ArrayList<>();
    for (    String line : file.getValue()) {
      lines.add(colorLine(line));
    }
    coloredFiles.put(file.getKey(),lines);
  }
}","ModuleGui(Module module){
  this.module=module;
  this.scrolled=0;
  String preDescription=module.getMetadata().getDescription() == null ? ""String_Node_Str"" : module.getMetadata().getDescription();
  this.description=Renderer.text(preDescription,22,30).setShadow(true);
  updateScaling(0,0,0);
  isHovered=false;
  name=ChatLib.addColor(this.module.getMetadata().getDisplayName() == null ? this.module.getName() : this.module.getMetadata().getDisplayName());
  version=this.module.getMetadata().getVersion() == null ? ""String_Node_Str"" : ""String_Node_Str"" + this.module.getMetadata().getVersion();
  coloredFiles=new HashMap<>();
  for (  Map.Entry<String,List<String>> file : this.module.getFiles().entrySet()) {
    List<String> lines=new ArrayList<>();
    for (    String line : file.getValue()) {
      lines.add(colorLine(line));
    }
    coloredFiles.put(file.getKey(),lines);
  }
}"
39045,"private void drawBack(){
  String back=isHovered ? ""String_Node_Str"" : ""String_Node_Str"";
  Renderer.text(ChatLib.addColor(back),20 + width - Renderer.getStringWidth(""String_Node_Str"") - 2,infoHeight - scrolled).setDropShadow(true).draw();
}","private void drawBack(){
  String back=isHovered ? ""String_Node_Str"" : ""String_Node_Str"";
  Renderer.text(ChatLib.addColor(back),20 + width - Renderer.getStringWidth(""String_Node_Str"") - 2,infoHeight - scrolled).setShadow(true).draw();
}"
39046,"private int drawRequires(){
  if (this.module.getMetadata().getRequires() == null)   return 0;
  Renderer.text(""String_Node_Str"" + this.module.getMetadata().getRequires(),22,infoHeight - scrolled + 20).setDropShadow(true).draw();
  return 20;
}","private int drawRequires(){
  if (this.module.getMetadata().getRequires() == null)   return 0;
  Renderer.text(""String_Node_Str"" + this.module.getMetadata().getRequires(),22,infoHeight - scrolled + 20).setShadow(true).draw();
  return 20;
}"
39047,"@Override public void drawScreen(int mouseX,int mouseY,float partialTicks){
  super.drawScreen(mouseX,mouseY,partialTicks);
  drawBackground(0);
  drawScroll();
  Renderer.rectangle(0x80000000,20,10 - scrolled,width,infoHeight).draw();
  Renderer.text(name,22,12 - scrolled).setDropShadow(true).draw();
  Renderer.text(ChatFormatting.GRAY + version,width - Renderer.getStringWidth(version) + 18,12 - scrolled).setDropShadow(true).draw();
  Renderer.rectangle(0xa0000000,22,22 - scrolled,width - 4,2).draw();
  description.setY(30 - this.scrolled).draw();
  Renderer.text(ChatFormatting.DARK_GRAY + CTJS.getInstance().getConfig().getModulesFolder().value + this.module.getName()+ ""String_Node_Str"",22,infoHeight - scrolled).setDropShadow(true).draw();
  drawBack();
  int fileOffset=20 + drawRequires();
  for (  Map.Entry<String,List<String>> file : coloredFiles.entrySet()) {
    fileOffset+=drawFile(file,fileOffset);
  }
  drawJump();
  updateScaling(mouseX,mouseY,fileOffset);
}","@Override public void drawScreen(int mouseX,int mouseY,float partialTicks){
  super.drawScreen(mouseX,mouseY,partialTicks);
  drawBackground(0);
  drawScroll();
  Renderer.rectangle(0x80000000,20,10 - scrolled,width,infoHeight).draw();
  Renderer.text(name,22,12 - scrolled).setShadow(true).draw();
  Renderer.text(ChatFormatting.GRAY + version,width - Renderer.getStringWidth(version) + 18,12 - scrolled).setShadow(true).draw();
  Renderer.rectangle(0xa0000000,22,22 - scrolled,width - 4,2).draw();
  description.setY(30 - this.scrolled).draw();
  Renderer.text(ChatFormatting.DARK_GRAY + CTJS.getInstance().getConfig().getModulesFolder().value + this.module.getName()+ ""String_Node_Str"",22,infoHeight - scrolled).setShadow(true).draw();
  drawBack();
  int fileOffset=20 + drawRequires();
  for (  Map.Entry<String,List<String>> file : coloredFiles.entrySet()) {
    fileOffset+=drawFile(file,fileOffset);
  }
  drawJump();
  updateScaling(mouseX,mouseY,fileOffset);
}"
39048,"private void draw(){
  x=20;
  y=getY(i);
  int width=Renderer.screen.getWidth() - 40;
  int height=105;
  Renderer.rectangle(0x80000000,x,y,width,height).draw();
  Renderer.text(name,x + 2,y + 2).setDropShadow(true).draw();
  if (this.module.getMetadata().getVersion() != null) {
    String version=ChatFormatting.GRAY + ""String_Node_Str"" + this.module.getMetadata().getVersion();
    Renderer.text(version,x + width - Renderer.getStringWidth(version) - 2,y + 2).setDropShadow(true).draw();
  }
  Renderer.rectangle(0xa0000000,x + 2,y + 12,width - 4,2).draw();
  String description=(this.module.getMetadata().getDescription() == null) ? ""String_Node_Str"" : this.module.getMetadata().getDescription();
  Text desc=Renderer.text(description,x + 2,y + 20).setWidth(width - 5).setMaxLines(6).draw();
  if (desc.exceedsMaxLines())   Renderer.text(""String_Node_Str"",x + 2,y + 73).draw();
  Renderer.text(ChatFormatting.DARK_GRAY + CTJS.getInstance().getConfig().getModulesFolder().value + this.module.getName()+ ""String_Node_Str"",x + 2,y + height - 12).setDropShadow(true).draw();
  String finalShowCode=isHovered ? ""String_Node_Str"" : ""String_Node_Str"";
  Renderer.text(ChatLib.addColor(finalShowCode),x + width - Renderer.getStringWidth(""String_Node_Str"") - 2,y + height - 12).setDropShadow(true).draw();
}","private void draw(){
  x=20;
  y=getY(i);
  int width=Renderer.screen.getWidth() - 40;
  int height=105;
  Renderer.rectangle(0x80000000,x,y,width,height).draw();
  Renderer.text(name,x + 2,y + 2).setShadow(true).draw();
  if (this.module.getMetadata().getVersion() != null) {
    String version=ChatFormatting.GRAY + ""String_Node_Str"" + this.module.getMetadata().getVersion();
    Renderer.text(version,x + width - Renderer.getStringWidth(version) - 2,y + 2).setShadow(true).draw();
  }
  Renderer.rectangle(0xa0000000,x + 2,y + 12,width - 4,2).draw();
  String description=(this.module.getMetadata().getDescription() == null) ? ""String_Node_Str"" : this.module.getMetadata().getDescription();
  Text desc=Renderer.text(description,x + 2,y + 20).setWidth(width - 5).setMaxLines(6).draw();
  if (desc.exceedsMaxLines())   Renderer.text(""String_Node_Str"",x + 2,y + 73).draw();
  Renderer.text(ChatFormatting.DARK_GRAY + CTJS.getInstance().getConfig().getModulesFolder().value + this.module.getName()+ ""String_Node_Str"",x + 2,y + height - 12).setShadow(true).draw();
  String finalShowCode=isHovered ? ""String_Node_Str"" : ""String_Node_Str"";
  Renderer.text(ChatLib.addColor(finalShowCode),x + width - Renderer.getStringWidth(""String_Node_Str"") - 2,y + height - 12).setShadow(true).draw();
}"
39049,"public void draw(int mouseX,int mouseY){
  this.resetButton.xPosition=Renderer.screen.getWidth() / 2 - 100 + this.x + 185;
  this.resetButton.drawButton(Client.getMinecraft(),mouseX,mouseY);
  Renderer.text(""String_Node_Str"",Renderer.screen.getWidth() / 2 - 100 + this.x + 189,this.y - 4).setScale(2).setColor(0xffffffff).setDropShadow(true).draw();
}","public void draw(int mouseX,int mouseY){
  this.resetButton.xPosition=Renderer.screen.getWidth() / 2 - 100 + this.x + 185;
  this.resetButton.drawButton(Client.getMinecraft(),mouseX,mouseY);
  Renderer.text(""String_Node_Str"",Renderer.screen.getWidth() / 2 - 100 + this.x + 189,this.y - 4).setScale(2).setColor(0xffffffff).setShadow(true).draw();
}"
39050,"/** 
 * Gets a color int based on 0-255 rgba values. This can be used in settings background and text color.
 * @param red   value between 0 and 255
 * @param green value between 0 and 255
 * @param blue  value between 0 and 255
 * @param alpha value between 0 and 255
 * @return integer color
 */
public static int color(int red,int green,int blue,int alpha){
  return (limit255(alpha) * 0x1000000) + (limit255(red) * 0x10000) + (limit255(green) * 0x100)+ blue;
}","/** 
 * Gets a color int based on 0-255 rgb values.
 * @param red   red value
 * @param green green value
 * @param blue  blue value
 * @return integer color
 */
public static int color(int red,int green,int blue){
  return color(red,green,blue,255);
}"
39051,"public static int limit255(int a){
  return (a > 255) ? 255 : (a < 0 ? 0 : a);
}","/** 
 * Limits a number between 0 and 255 for use with   {@link Renderer#color(int,int,int,int)}.
 * @param number the number to limit
 * @return the limited number
 */
public static int limit255(int number){
  return (number > 255) ? 255 : (number < 0 ? 0 : number);
}"
39052,"@EventHandler public void init(FMLInitializationEvent event){
  instance=this;
  this.displayHandler=new DisplayHandler();
  this.guiHandler=new GuiHandler();
  this.commandHandler=new CommandHandler();
  this.chatListener=new ChatListener();
  this.moduleManager=new ModuleManager();
  this.cps=new CPS();
  registerListeners();
  registerHooks();
  moduleManager.load(true);
}","@EventHandler public void init(FMLInitializationEvent event){
  this.displayHandler=new DisplayHandler();
  this.guiHandler=new GuiHandler();
  this.commandHandler=new CommandHandler();
  this.chatListener=new ChatListener();
  this.moduleManager=new ModuleManager();
  this.cps=new CPS();
  registerListeners();
  registerHooks();
  moduleManager.load(true);
}"
39053,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  this.console=new Console();
  Sentry.init(Reference.SENTRYDSN);
  Sentry.getContext().setUser(new UserBuilder().setUsername(Player.getName()).setId(Player.getUUID()).build());
  this.injectResourcePack(event.getModConfigurationDirectory().toString());
  this.config=new Config();
  this.config.setConfigFile(new File(event.getModConfigurationDirectory().toString(),""String_Node_Str""));
  this.config.save();
  this.config.load();
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  instance=this;
  this.console=new Console();
  Sentry.init(Reference.SENTRYDSN);
  Sentry.getContext().setUser(new UserBuilder().setUsername(Player.getName()).setId(Player.getUUID()).build());
  this.injectResourcePack(event.getModConfigurationDirectory().toString());
  this.config=new Config();
  this.config.setConfigFile(new File(event.getModConfigurationDirectory().toString(),""String_Node_Str""));
  this.config.save();
  this.config.load();
}"
39054,"private void dumpChat(int ammount){
  clearOldDump();
  ArrayList<String> messages=CTJS.getInstance().getChatListener().getChatHistory();
  if (ammount > messages.size())   ammount=messages.size();
  ChatLib.chat(""String_Node_Str"" + ChatLib.getChatBreak(""String_Node_Str""),idFixed);
  String msg;
  for (int i=0; i < ammount; i++) {
    msg=ChatLib.replaceFormatting(messages.get(messages.size() - ammount + i));
    ChatComponentText cct=new ChatComponentText(msg);
    cct.setChatStyle(new ChatStyle().setChatClickEvent(new ClickEvent(ClickEvent.Action.getValueByCanonicalName(""String_Node_Str""),""String_Node_Str"" + msg)).setChatHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT,new ChatComponentText(""String_Node_Str""))));
    ChatLib.chat(new Message(cct).setChatLineId(idFixed + i + 1));
  }
  ChatLib.chat(""String_Node_Str"" + ChatLib.getChatBreak(""String_Node_Str""),idFixed + ammount + 1);
  idFixedOffset=idFixed + ammount + 1;
}","private void dumpChat(int amount){
  clearOldDump();
  ArrayList<String> messages=CTJS.getInstance().getChatListener().getChatHistory();
  if (amount > messages.size())   amount=messages.size();
  ChatLib.chat(""String_Node_Str"" + ChatLib.getChatBreak(""String_Node_Str""),idFixed);
  String msg;
  for (int i=0; i < amount; i++) {
    msg=ChatLib.replaceFormatting(messages.get(messages.size() - amount + i));
    ChatComponentText cct=new ChatComponentText(msg);
    cct.setChatStyle(new ChatStyle().setChatClickEvent(new ClickEvent(ClickEvent.Action.getValueByCanonicalName(""String_Node_Str""),""String_Node_Str"" + msg)).setChatHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT,new ChatComponentText(""String_Node_Str""))));
    ChatLib.chat(new Message(cct).setChatLineId(idFixed + i + 1));
  }
  ChatLib.chat(""String_Node_Str"" + ChatLib.getChatBreak(""String_Node_Str""),idFixed + amount + 1);
  idFixedOffset=idFixed + amount + 1;
}"
39055,"/** 
 * Registers a method to be ran while gui is open. Registered method runs on draw.
 * @param methodName the method to run
 * @return the trigger
 */
public OnTrigger registerDraw(String methodName){
  return onDraw=new OnTrigger(methodName,TriggerType.OTHER){
    @Override public void trigger(    Object... args){
      if (!(args[0] instanceof Integer && args[1] instanceof Integer && args[2] instanceof Float)) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      int mouseX=(int)args[0];
      int mouseY=(int)args[1];
      float partialTicks=(float)args[2];
      try {
        CTJS.getInstance().getModuleManager().invokeFunction(methodName,mouseX,mouseY,partialTicks);
      }
 catch (      ScriptException|NoSuchMethodException e) {
        onDraw=null;
        e.printStackTrace();
      }
    }
  }
;
}","/** 
 * Registers a method to be ran while gui is open. Registered method runs on draw.
 * @param methodName the method to run
 * @return the trigger
 */
public OnTrigger registerDraw(String methodName){
  return onDraw=new OnTrigger(methodName,TriggerType.OTHER){
    @Override public void trigger(    Object... args){
      if (!(args[0] instanceof Integer && args[1] instanceof Integer && args[2] instanceof Float)) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      int mouseX=(int)args[0];
      int mouseY=(int)args[1];
      float partialTicks=(float)args[2];
      try {
        CTJS.getInstance().getModuleManager().invokeFunction(methodName,mouseX,mouseY,partialTicks);
      }
 catch (      ScriptException|NoSuchMethodException exception) {
        onDraw=null;
        Console.getConsole().printStackTrace(exception);
      }
    }
  }
;
}"
39056,"@Override public void trigger(Object... args){
  if (!(args[0] instanceof Character && args[1] instanceof Integer)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  char typedChar=(char)args[0];
  int keyCode=(int)args[1];
  try {
    CTJS.getInstance().getModuleManager().invokeFunction(methodName,typedChar,keyCode);
  }
 catch (  ScriptException|NoSuchMethodException e) {
    Console.getConsole().printStackTrace(e);
    onKeyTyped=null;
  }
}","@Override public void trigger(Object... args){
  if (!(args[0] instanceof Character && args[1] instanceof Integer)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  char typedChar=(char)args[0];
  int keyCode=(int)args[1];
  try {
    CTJS.getInstance().getModuleManager().invokeFunction(methodName,typedChar,keyCode);
  }
 catch (  ScriptException|NoSuchMethodException exception) {
    onKeyTyped=null;
    Console.getConsole().printStackTrace(exception);
  }
}"
39057,"/** 
 * Registers a method to be ran while gui is open. Registered method runs on key input.
 * @param methodName the method to run
 * @return the trigger
 */
public OnTrigger registerKeyTyped(String methodName){
  return onKeyTyped=new OnTrigger(methodName,TriggerType.OTHER){
    @Override public void trigger(    Object... args){
      if (!(args[0] instanceof Character && args[1] instanceof Integer)) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      char typedChar=(char)args[0];
      int keyCode=(int)args[1];
      try {
        CTJS.getInstance().getModuleManager().invokeFunction(methodName,typedChar,keyCode);
      }
 catch (      ScriptException|NoSuchMethodException e) {
        Console.getConsole().printStackTrace(e);
        onKeyTyped=null;
      }
    }
  }
;
}","/** 
 * Registers a method to be ran while gui is open. Registered method runs on key input.
 * @param methodName the method to run
 * @return the trigger
 */
public OnTrigger registerKeyTyped(String methodName){
  return onKeyTyped=new OnTrigger(methodName,TriggerType.OTHER){
    @Override public void trigger(    Object... args){
      if (!(args[0] instanceof Character && args[1] instanceof Integer)) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      char typedChar=(char)args[0];
      int keyCode=(int)args[1];
      try {
        CTJS.getInstance().getModuleManager().invokeFunction(methodName,typedChar,keyCode);
      }
 catch (      ScriptException|NoSuchMethodException exception) {
        onKeyTyped=null;
        Console.getConsole().printStackTrace(exception);
      }
    }
  }
;
}"
39058,"/** 
 * Registers a method to be ran while gui is open. Registered method runs on mouse click.
 * @param methodName the method to run
 * @return the trigger
 */
public OnTrigger registerClicked(String methodName){
  return onClick=new OnTrigger(methodName,TriggerType.OTHER){
    @Override public void trigger(    Object... args){
      if (!(args[0] instanceof Integer && args[1] instanceof Integer && args[2] instanceof Integer)) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      int mouseX=(int)args[0];
      int mouseY=(int)args[1];
      int button=(int)args[2];
      try {
        CTJS.getInstance().getModuleManager().invokeFunction(methodName,mouseX,mouseY,button);
      }
 catch (      ScriptException|NoSuchMethodException e) {
        onClick=null;
        e.printStackTrace();
      }
    }
  }
;
}","/** 
 * Registers a method to be ran while gui is open. Registered method runs on mouse click.
 * @param methodName the method to run
 * @return the trigger
 */
public OnTrigger registerClicked(String methodName){
  return onClick=new OnTrigger(methodName,TriggerType.OTHER){
    @Override public void trigger(    Object... args){
      if (!(args[0] instanceof Integer && args[1] instanceof Integer && args[2] instanceof Integer)) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      int mouseX=(int)args[0];
      int mouseY=(int)args[1];
      int button=(int)args[2];
      try {
        CTJS.getInstance().getModuleManager().invokeFunction(methodName,mouseX,mouseY,button);
      }
 catch (      ScriptException|NoSuchMethodException exception) {
        onClick=null;
        Console.getConsole().printStackTrace(exception);
      }
    }
  }
;
}"
39059,"@Override public void trigger(Object... args){
  int mouseX=(int)args[0];
  int mouseY=(int)args[1];
  int state=(int)args[2];
  try {
    CTJS.getInstance().getModuleManager().invokeFunction(methodName,mouseX,mouseY,state);
  }
 catch (  ScriptException|NoSuchMethodException exception) {
    onKeyTyped=null;
    Console.getConsole().printStackTrace(exception);
  }
}","@Override public void trigger(Object... args){
  int mouseX=(int)args[0];
  int mouseY=(int)args[1];
  int state=(int)args[2];
  try {
    CTJS.getInstance().getModuleManager().invokeFunction(methodName,mouseX,mouseY,state);
  }
 catch (  ScriptException|NoSuchMethodException exception) {
    onMouseReleased=null;
    Console.getConsole().printStackTrace(exception);
  }
}"
39060,"/** 
 * Registers a method to be ran while gui is open. Registered method runs on key input.
 * @param methodName the method to run
 * @return the trigger
 */
public OnTrigger registerMouseReleased(String methodName){
  return onMouseReleased=new OnTrigger(methodName,TriggerType.OTHER){
    @Override public void trigger(    Object... args){
      int mouseX=(int)args[0];
      int mouseY=(int)args[1];
      int state=(int)args[2];
      try {
        CTJS.getInstance().getModuleManager().invokeFunction(methodName,mouseX,mouseY,state);
      }
 catch (      ScriptException|NoSuchMethodException exception) {
        onKeyTyped=null;
        Console.getConsole().printStackTrace(exception);
      }
    }
  }
;
}","/** 
 * Registers a method to be ran while gui is open. Registered method runs on key input.
 * @param methodName the method to run
 * @return the trigger
 */
public OnTrigger registerMouseReleased(String methodName){
  return onMouseReleased=new OnTrigger(methodName,TriggerType.OTHER){
    @Override public void trigger(    Object... args){
      int mouseX=(int)args[0];
      int mouseY=(int)args[1];
      int state=(int)args[2];
      try {
        CTJS.getInstance().getModuleManager().invokeFunction(methodName,mouseX,mouseY,state);
      }
 catch (      ScriptException|NoSuchMethodException exception) {
        onMouseReleased=null;
        Console.getConsole().printStackTrace(exception);
      }
    }
  }
;
}"
39061,"/** 
 * Registers a method to be ran while gui is open. Registered method runs on key input.
 * @param methodName the method to run
 * @return the trigger
 */
public OnTrigger registerMouseDragged(String methodName){
  return onMouseDragged=new OnTrigger(methodName,TriggerType.OTHER){
    @Override public void trigger(    Object... args){
      int mouseX=(int)args[0];
      int mouseY=(int)args[1];
      int clickedMouseButton=(int)args[2];
      long timeSinceLastClick=(long)args[3];
      try {
        CTJS.getInstance().getModuleManager().invokeFunction(methodName,mouseX,mouseY,clickedMouseButton,timeSinceLastClick);
      }
 catch (      ScriptException|NoSuchMethodException exception) {
        onKeyTyped=null;
        Console.getConsole().printStackTrace(exception);
      }
    }
  }
;
}","/** 
 * Registers a method to be ran while gui is open. Registered method runs on key input.
 * @param methodName the method to run
 * @return the trigger
 */
public OnTrigger registerMouseDragged(String methodName){
  return onMouseDragged=new OnTrigger(methodName,TriggerType.OTHER){
    @Override public void trigger(    Object... args){
      int mouseX=(int)args[0];
      int mouseY=(int)args[1];
      int clickedMouseButton=(int)args[2];
      long timeSinceLastClick=(long)args[3];
      try {
        CTJS.getInstance().getModuleManager().invokeFunction(methodName,mouseX,mouseY,clickedMouseButton,timeSinceLastClick);
      }
 catch (      ScriptException|NoSuchMethodException exception) {
        onMouseDragged=null;
        Console.getConsole().printStackTrace(exception);
      }
    }
  }
;
}"
39062,"private void simulateChat(String[] args){
  StringBuilder toSend=new StringBuilder();
  for (int i=1; i < args.length; i++) {
    toSend.append(args[i]).append(""String_Node_Str"");
  }
  ClientChatReceivedEvent event=new ClientChatReceivedEvent((byte)0,new ChatComponentText(toSend.toString()));
  CTJS.getInstance().getChatListener().onReceiveChat(event);
  if (!event.isCanceled()) {
    ChatLib.chat(event.message.getFormattedText());
  }
}","private void simulateChat(String[] args){
  StringBuilder toSend=new StringBuilder();
  for (int i=1; i < args.length; i++) {
    toSend.append(args[i]);
    if (i != args.length - 1)     toSend.append(""String_Node_Str"");
  }
  ClientChatReceivedEvent event=new ClientChatReceivedEvent((byte)0,new ChatComponentText(toSend.toString()));
  CTJS.getInstance().getChatListener().onReceiveChat(event);
  if (!event.isCanceled()) {
    ChatLib.chat(event.message.getFormattedText());
  }
}"
39063,"private void injectResourcePack(String path){
  try {
    File pictures=new File(path,""String_Node_Str"");
    Field field=FMLClientHandler.class.getDeclaredField(""String_Node_Str"");
    field.setAccessible(true);
    List<IResourcePack> packs=(List<IResourcePack>)field.get(FMLClientHandler.instance());
    packs.add(imagesPack=new ImagesPack(pictures));
    pictures.mkdirs();
    assetsDir=pictures;
  }
 catch (  Exception e) {
    Console.getConsole().printStackTrace(e);
  }
}","private void injectResourcePack(String path){
  try {
    File pictures=new File(path,""String_Node_Str"");
    Field field=FMLClientHandler.class.getDeclaredField(""String_Node_Str"");
    field.setAccessible(true);
    List<IResourcePack> packs=(List<IResourcePack>)field.get(FMLClientHandler.instance());
    packs.add(imagesPack=new ImagesPack(pictures));
    pictures.mkdirs();
    assetsDir=pictures;
  }
 catch (  Exception exception) {
    exception.printStackTrace();
  }
}"
39064,"private Object extractGenotypeValues(Object genotypeAttribute,VariantPropertyType type){
  Object defaultValue=null;
switch (type) {
case NUMERIC_COLLECTION:
case STRING_COLLECTION:
    defaultValue=new ArrayList<>();
  break;
case STRING:
defaultValue=""String_Node_Str"";
}
if (genotypeAttribute == null) {
return defaultValue;
}
if (type == VariantPropertyType.STRING) {
return genotypeAttribute.toString();
}
if (type == VariantPropertyType.NUMERIC) {
String value=genotypeAttribute.toString();
if (""String_Node_Str"".equals(value)) {
return null;
}
return Double.parseDouble(value);
}
String[] splitValues=((String)genotypeAttribute).split(""String_Node_Str"");
if (type == VariantPropertyType.STRING_COLLECTION) {
return new ArrayList<>(Arrays.asList(splitValues));
}
if (type == VariantPropertyType.NUMERIC_COLLECTION) {
List<Double> parsed=Arrays.stream(splitValues).map((str) -> ""String_Node_Str"".equals(str) ? null : Double.parseDouble(str)).collect(Collectors.toList());
return parsed;
}
throw new IllegalStateException(""String_Node_Str"" + type + ""String_Node_Str"");
}","private Object extractGenotypeValues(Object genotypeAttribute,VariantPropertyType type){
  Object defaultValue=null;
switch (type) {
case NUMERIC_COLLECTION:
case STRING_COLLECTION:
    defaultValue=new ArrayList<>();
  break;
case STRING:
defaultValue=""String_Node_Str"";
}
if (genotypeAttribute == null) {
return defaultValue;
}
if (type == VariantPropertyType.STRING) {
return genotypeAttribute.toString();
}
if (type == VariantPropertyType.NUMERIC) {
String value=genotypeAttribute.toString();
if (""String_Node_Str"".equals(value)) {
return null;
}
return Double.parseDouble(value);
}
List splitValues=genotypeAttribute instanceof List ? (List)genotypeAttribute : Arrays.asList(genotypeAttribute.toString().split(""String_Node_Str""));
if (type == VariantPropertyType.STRING_COLLECTION) {
return new ArrayList<>(splitValues);
}
if (type == VariantPropertyType.NUMERIC_COLLECTION) {
List<Double> parsed=(List<Double>)splitValues.stream().map((str) -> ""String_Node_Str"".equals(str.toString()) ? null : Double.parseDouble(str.toString())).collect(Collectors.toList());
return parsed;
}
throw new IllegalStateException(""String_Node_Str"" + type + ""String_Node_Str"");
}"
39065,"private boolean isCollectionType(VCFCompoundHeaderLine info){
  VCFHeaderLineCount count=info.getCountType();
  return count == VCFHeaderLineCount.A || count == VCFHeaderLineCount.R || count == VCFHeaderLineCount.UNBOUNDED || (count == VCFHeaderLineCount.INTEGER && info.getCount() > 1);
}","private boolean isCollectionType(VCFCompoundHeaderLine info){
  VCFHeaderLineCount count=info.getCountType();
  return count == VCFHeaderLineCount.A || count == VCFHeaderLineCount.G || count == VCFHeaderLineCount.R || count == VCFHeaderLineCount.UNBOUNDED || (count == VCFHeaderLineCount.INTEGER && info.getCount() > 1);
}"
39066,"private String getSingleColumnValue(List call,String column){
  VariantPropertyType type=getColumnType(column);
  Object value=call.get(indexMap.get(column));
switch (type) {
case STRING:
    return (String)value;
case STRING_COLLECTION:
  List<String> values=(List<String>)value;
if (values.size() != 1) {
  throw new IllegalStateException(""String_Node_Str"");
}
return values.get(0);
default :
throw new IllegalStateException(""String_Node_Str"");
}
}","private String getSingleColumnValue(List call,String column){
  VariantPropertyType type=getColumnType(column);
  Object value=call.get(indexMap.get(column));
switch (type) {
case NUMERIC:
case STRING:
    return value.toString();
case NUMERIC_COLLECTION:
case STRING_COLLECTION:
  List values=(List)value;
if (values.size() != 1) {
  throw new IllegalStateException(""String_Node_Str"");
}
return values.get(0).toString();
default :
throw new IllegalStateException(""String_Node_Str"");
}
}"
39067,"@Override public Object instantiateItem(ViewGroup container,int position){
  layoutInflater=(LayoutInflater)activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View v=layoutInflater.inflate(R.layout.fullwallpaper_view_layout,container,false);
  draweeView=v.findViewById(R.id.full_image_view);
  if (arrayList != null) {
    draweeView.setImageURI(arrayList.get(position).getWallpaperFullURL());
  }
 else {
    Uri imageUri=Uri.fromFile(new File(path.get(position)));
    draweeView.setImageURI(imageUri);
  }
  container.addView(v);
  return v;
}","@Override public Object instantiateItem(ViewGroup container,int position){
  layoutInflater=(LayoutInflater)activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View v=layoutInflater.inflate(R.layout.fullwallpaper_view_layout,container,false);
  draweeView=v.findViewById(R.id.full_image_view);
  if (arrayList != null) {
    DraweeController controller=Fresco.newDraweeControllerBuilder().setLowResImageRequest(ImageRequest.fromUri(arrayList.get(position).getWallpaperURL())).setImageRequest(ImageRequest.fromUri(arrayList.get(position).getWallpaperFullURL())).setOldController(draweeView.getController()).build();
    draweeView.setController(controller);
    draweeView.setController(controller);
  }
 else {
    Uri imageUri=Uri.fromFile(new File(path.get(position)));
    ImageRequest request=ImageRequestBuilder.newBuilderWithSource(imageUri).setLocalThumbnailPreviewsEnabled(true).build();
    DraweeController controller=Fresco.newDraweeControllerBuilder().setImageRequest(request).setOldController(draweeView.getController()).build();
    ProgressBarDrawable progressBarDrawable=new ProgressBarDrawable();
    progressBarDrawable.setPadding(50);
    progressBarDrawable.setColor(R.color.colorBackground);
    draweeView.getHierarchy().setProgressBarImage(progressBarDrawable);
    draweeView.setController(controller);
  }
  container.addView(v);
  return v;
}"
39068,"@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  wallpaperManager=WallpaperManager.getInstance(FullWallpaperViewActivity.this);
  setContentView(R.layout.fullscreen_activity_view);
  ActivityCaller=getIntent().getStringExtra(""String_Node_Str"");
  pos=getIntent().getIntExtra(""String_Node_Str"",0);
  Log.i(""String_Node_Str"",String.valueOf(pos));
  downloadWallBtn=findViewById(R.id.downloadWallBtn);
  setWallBtn=findViewById(R.id.setWallBtn);
  disableAdBlock=findViewById(R.id.disableAdBlock);
  toolbar=findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  viewPager=findViewById(R.id.view_pager);
  if (ActivityCaller.equals(""String_Node_Str"")) {
    path=getIntent().getStringArrayListExtra(""String_Node_Str"");
    fullScreenSwipeAdapter=new FullScreenSwipeAdapter(FullWallpaperViewActivity.this,path,pos);
    Log.i(""String_Node_Str"",String.valueOf(pos));
    viewPager.setAdapter(fullScreenSwipeAdapter);
    viewPager.setCurrentItem(pos);
    viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener(){
      @Override public void onPageScrolled(      int position,      float positionOffset,      int positionOffsetPixels){
        String id[]=path.get(pos).split(""String_Node_Str"");
        String title=""String_Node_Str"" + id[1];
        getSupportActionBar().setTitle(title);
        toolbar.setTitleTextColor(ContextCompat.getColor(FullWallpaperViewActivity.this,R.color.white));
        toolbar.setPadding(0,getStatusBarHeight(),0,0);
        toolbar.setBackgroundColor(ContextCompat.getColor(FullWallpaperViewActivity.this,R.color.translucentBlackColor));
        toolbar.setNavigationIcon(R.drawable.back_arrow);
        toolbar.setNavigationOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View view){
            onBackPressed();
          }
        }
);
      }
      @Override public void onPageSelected(      int position){
        if (pos > position) {
          pos--;
          Log.i(""String_Node_Str"",String.valueOf(pos));
        }
 else         if (pos < position) {
          pos++;
          Log.i(""String_Node_Str"",String.valueOf(pos));
        }
      }
      @Override public void onPageScrollStateChanged(      int state){
      }
    }
);
    downloadWallBtn.setVisibility(View.GONE);
    setWallBtn.setVisibility(View.VISIBLE);
  }
 else {
    arrayList=getIntent().getParcelableArrayListExtra(""String_Node_Str"");
    fullScreenSwipeAdapter=new FullScreenSwipeAdapter(FullWallpaperViewActivity.this,arrayList);
    viewPager.setAdapter(fullScreenSwipeAdapter);
    viewPager.setCurrentItem(pos);
    viewPager.setOnTouchListener(new View.OnTouchListener(){
      private float pointX;
      private float pointY;
      private int tolerance=50;
      @Override public boolean onTouch(      View v,      MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_MOVE:
          return false;
case MotionEvent.ACTION_DOWN:
        pointX=event.getX();
      pointY=event.getY();
    Log.i(""String_Node_Str"",String.valueOf(pointX));
  Log.i(""String_Node_Str"",String.valueOf(pointY));
break;
case MotionEvent.ACTION_UP:
boolean sameX=pointX + tolerance > event.getX() && pointX - tolerance < event.getX();
boolean sameY=pointY + tolerance > event.getY() && pointY - tolerance < event.getY();
Log.i(""String_Node_Str"",String.valueOf(sameX));
Log.i(""String_Node_Str"",String.valueOf(sameY));
if (sameX && sameY) {
if (fullscreen == false) {
toolbar.setVisibility(View.INVISIBLE);
disableAdBlock.setVisibility(View.INVISIBLE);
bannerAd.setVisibility(View.INVISIBLE);
downloadWallBtn.setVisibility(View.INVISIBLE);
setWallBtn.setVisibility(View.INVISIBLE);
getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
fullscreen=true;
}
 else if (fullscreen == true) {
toolbar.setVisibility(View.VISIBLE);
if (isAdblock) {
disableAdBlock.setVisibility(View.VISIBLE);
}
bannerAd.setVisibility(View.VISIBLE);
downloadWallBtn.setVisibility(View.VISIBLE);
setWallBtn.setVisibility(View.VISIBLE);
getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
fullscreen=false;
}
}
}
return false;
}
}
);
viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener(){
@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
String title=""String_Node_Str"" + String.valueOf(arrayList.get(position).getWallId());
getSupportActionBar().setTitle(title);
toolbar.setTitleTextColor(ContextCompat.getColor(FullWallpaperViewActivity.this,R.color.white));
toolbar.setPadding(0,getStatusBarHeight(),0,0);
toolbar.setBackgroundColor(ContextCompat.getColor(FullWallpaperViewActivity.this,R.color.translucentBlackColor));
toolbar.setNavigationIcon(R.drawable.back_arrow);
toolbar.setNavigationOnClickListener(new View.OnClickListener(){
@Override public void onClick(View view){
onBackPressed();
}
}
);
encodedUrlFull=arrayList.get(position).getWallpaperFullURL();
}
@Override public void onPageSelected(int position){
if ((arrayList.size() - position <= 2)) {
Log.i(""String_Node_Str"",""String_Node_Str"");
Log.i(""String_Node_Str"",String.valueOf(pageCount));
Intent intent=new Intent(""String_Node_Str"");
LocalBroadcastManager.getInstance(FullWallpaperViewActivity.this).sendBroadcast(intent);
Log.i(""String_Node_Str"",""String_Node_Str"");
viewPager.invalidate();
}
}
@Override public void onPageScrollStateChanged(int state){
}
}
);
}
MobileAds.initialize(FullWallpaperViewActivity.this,getResources().getString(R.string.FULLSCREEN_BANNER_ID));
bannerAd=new AdView(FullWallpaperViewActivity.this);
bannerAd=findViewById(R.id.bannerAdView);
final AdRequest adRequest=new AdRequest.Builder().addTestDevice(""String_Node_Str"").addTestDevice(""String_Node_Str"").addTestDevice(AdRequest.DEVICE_ID_EMULATOR).build();
bannerAd.loadAd(adRequest);
bannerAd.setAdListener(new AdListener(){
@Override public void onAdFailedToLoad(int i){
disableAdBlock.setVisibility(View.VISIBLE);
isAdblock=true;
}
@Override public void onAdLoaded(){
super.onAdLoaded();
isAdblock=false;
disableAdBlock.setVisibility(View.GONE);
}
}
);
encodedUrlFull=getIntent().getStringExtra(""String_Node_Str"");
encodedUrlThumb=getIntent().getStringExtra(""String_Node_Str"");
wallId=getIntent().getIntExtra(""String_Node_Str"",0);
fileType=""String_Node_Str"" + getIntent().getStringExtra(""String_Node_Str"");
setWallBtn.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View view){
new setWall(getApplicationContext()).execute();
}
}
);
downloadWallBtn.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View view){
switch (ActivityCaller) {
case ""String_Node_Str"":
new DownloadHandler.ImageDownloadAndSave(getApplicationContext()).execute(encodedUrlFull,""String_Node_Str"" + String.valueOf(wallId) + fileType);
toast=makeText(getApplicationContext(),""String_Node_Str"" + ""String_Node_Str"" + String.valueOf(wallId) + fileType,Toast.LENGTH_SHORT);
toast.show();
break;
case ""String_Node_Str"":
new DownloadHandler.ImageDownloadAndSave(getApplicationContext()).execute(encodedUrlFull,""String_Node_Str"" + String.valueOf(wallId) + fileType);
toast=Toast.makeText(getApplicationContext(),""String_Node_Str"" + ""String_Node_Str"" + String.valueOf(wallId) + fileType,Toast.LENGTH_SHORT);
toast.show();
break;
case ""String_Node_Str"":
try {
AlertDialog.Builder builder=new AlertDialog.Builder(FullWallpaperViewActivity.this,R.style.MyDialogTheme);
builder.setCancelable(false);
builder.setTitle(""String_Node_Str"");
builder.setItems(options,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
switch (which) {
case 0:
toast=Toast.makeText(getApplicationContext(),""String_Node_Str"" + ""String_Node_Str"" + String.valueOf(wallId) + ""String_Node_Str""+ fileType,Toast.LENGTH_SHORT);
toast.show();
new DownloadHandler.ImageDownloadAndSave(getApplicationContext()).execute(encodedUrlFull,""String_Node_Str"" + String.valueOf(wallId) + fileType);
Log.i(""String_Node_Str"",encodedUrlFull);
break;
case 1:
toast=Toast.makeText(getApplicationContext(),""String_Node_Str"" + ""String_Node_Str"" + String.valueOf(wallId) + ""String_Node_Str""+ fileType,Toast.LENGTH_SHORT);
toast.show();
encodedUrlFull=encodedUrlFull.replace(""String_Node_Str"",""String_Node_Str"");
new DownloadHandler.ImageDownloadAndSave(getApplicationContext()).execute(encodedUrlFull,""String_Node_Str"" + String.valueOf(wallId) + fileType);
Log.i(""String_Node_Str"",encodedUrlFull);
break;
case 2:
toast=Toast.makeText(getApplicationContext(),""String_Node_Str"" + ""String_Node_Str"" + String.valueOf(wallId) + ""String_Node_Str""+ fileType,Toast.LENGTH_SHORT);
toast.show();
encodedUrlFull=encodedUrlFull.replace(""String_Node_Str"",""String_Node_Str"");
new DownloadHandler.ImageDownloadAndSave(getApplicationContext()).execute(encodedUrlFull,""String_Node_Str"" + String.valueOf(wallId) + fileType);
Log.i(""String_Node_Str"",encodedUrlFull);
break;
}
}
}
);
builder.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
}
}
);
builder.show();
}
 catch (Exception e) {
Log.i(""String_Node_Str"",e.toString());
}
break;
}
}
}
);
Fresco.initialize(this);
}","@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  wallpaperManager=WallpaperManager.getInstance(FullWallpaperViewActivity.this);
  setContentView(R.layout.fullscreen_activity_view);
  ActivityCaller=getIntent().getStringExtra(""String_Node_Str"");
  pos=getIntent().getIntExtra(""String_Node_Str"",0);
  Log.i(""String_Node_Str"",String.valueOf(pos));
  downloadWallBtn=findViewById(R.id.downloadWallBtn);
  setWallBtn=findViewById(R.id.setWallBtn);
  disableAdBlock=findViewById(R.id.disableAdBlock);
  toolbar=findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  viewPager=findViewById(R.id.view_pager);
  encodedUrlFull=getIntent().getStringExtra(""String_Node_Str"");
  encodedUrlThumb=getIntent().getStringExtra(""String_Node_Str"");
  wallId=getIntent().getIntExtra(""String_Node_Str"",0);
  fileType=""String_Node_Str"" + getIntent().getStringExtra(""String_Node_Str"");
  if (ActivityCaller.equals(""String_Node_Str"")) {
    path=getIntent().getStringArrayListExtra(""String_Node_Str"");
    fullScreenSwipeAdapter=new FullScreenSwipeAdapter(FullWallpaperViewActivity.this,path,pos);
    Log.i(""String_Node_Str"",String.valueOf(pos));
    viewPager.setAdapter(fullScreenSwipeAdapter);
    viewPager.setCurrentItem(pos);
    viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener(){
      @Override public void onPageScrolled(      int position,      float positionOffset,      int positionOffsetPixels){
        String id[]=path.get(pos).split(""String_Node_Str"");
        String title=""String_Node_Str"" + id[1];
        getSupportActionBar().setTitle(title);
        toolbar.setTitleTextColor(ContextCompat.getColor(FullWallpaperViewActivity.this,R.color.white));
        toolbar.setPadding(0,getStatusBarHeight(),0,0);
        toolbar.setBackgroundColor(ContextCompat.getColor(FullWallpaperViewActivity.this,R.color.translucentBlackColor));
        toolbar.setNavigationIcon(R.drawable.back_arrow);
        toolbar.setNavigationOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View view){
            onBackPressed();
          }
        }
);
      }
      @Override public void onPageSelected(      int position){
        if (pos > position) {
          pos--;
          Log.i(""String_Node_Str"",String.valueOf(pos));
        }
 else         if (pos < position) {
          pos++;
          Log.i(""String_Node_Str"",String.valueOf(pos));
        }
      }
      @Override public void onPageScrollStateChanged(      int state){
      }
    }
);
    downloadWallBtn.setVisibility(View.GONE);
    setWallBtn.setVisibility(View.VISIBLE);
  }
 else {
    arrayList=getIntent().getParcelableArrayListExtra(""String_Node_Str"");
    fullScreenSwipeAdapter=new FullScreenSwipeAdapter(FullWallpaperViewActivity.this,arrayList);
    Log.i(""String_Node_Str"",String.valueOf(arrayList.size()));
    viewPager.setAdapter(fullScreenSwipeAdapter);
    viewPager.setCurrentItem(pos);
    viewPager.setOnTouchListener(new View.OnTouchListener(){
      private float pointX;
      private float pointY;
      private int tolerance=50;
      @Override public boolean onTouch(      View v,      MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_MOVE:
          return false;
case MotionEvent.ACTION_DOWN:
        pointX=event.getX();
      pointY=event.getY();
    Log.i(""String_Node_Str"",String.valueOf(pointX));
  Log.i(""String_Node_Str"",String.valueOf(pointY));
break;
case MotionEvent.ACTION_UP:
boolean sameX=pointX + tolerance > event.getX() && pointX - tolerance < event.getX();
boolean sameY=pointY + tolerance > event.getY() && pointY - tolerance < event.getY();
Log.i(""String_Node_Str"",String.valueOf(sameX));
Log.i(""String_Node_Str"",String.valueOf(sameY));
if (sameX && sameY) {
if (fullscreen == false) {
toolbar.setVisibility(View.INVISIBLE);
disableAdBlock.setVisibility(View.INVISIBLE);
bannerAd.setVisibility(View.INVISIBLE);
downloadWallBtn.setVisibility(View.INVISIBLE);
setWallBtn.setVisibility(View.INVISIBLE);
getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
fullscreen=true;
}
 else if (fullscreen == true) {
toolbar.setVisibility(View.VISIBLE);
if (isAdblock) {
disableAdBlock.setVisibility(View.VISIBLE);
}
bannerAd.setVisibility(View.VISIBLE);
downloadWallBtn.setVisibility(View.VISIBLE);
setWallBtn.setVisibility(View.VISIBLE);
getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
fullscreen=false;
}
}
}
return false;
}
}
);
viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener(){
@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
String title=""String_Node_Str"" + String.valueOf(arrayList.get(position).getWallId());
getSupportActionBar().setTitle(title);
toolbar.setTitleTextColor(ContextCompat.getColor(FullWallpaperViewActivity.this,R.color.white));
toolbar.setPadding(0,getStatusBarHeight(),0,0);
toolbar.setBackgroundColor(ContextCompat.getColor(FullWallpaperViewActivity.this,R.color.translucentBlackColor));
toolbar.setNavigationIcon(R.drawable.back_arrow);
toolbar.setNavigationOnClickListener(new View.OnClickListener(){
@Override public void onClick(View view){
onBackPressed();
}
}
);
}
@Override public void onPageSelected(int position){
if ((arrayList.size() - position <= 2)) {
Log.i(""String_Node_Str"",""String_Node_Str"");
Log.i(""String_Node_Str"",String.valueOf(pageCount));
Intent intent=new Intent(""String_Node_Str"");
LocalBroadcastManager.getInstance(FullWallpaperViewActivity.this).sendBroadcast(intent);
Log.i(""String_Node_Str"",""String_Node_Str"");
viewPager.invalidate();
}
encodedUrlFull=arrayList.get(position).getWallpaperFullURL();
wallId=arrayList.get(position).getWallId();
Log.i(""String_Node_Str"",String.valueOf(pos));
Log.i(""String_Node_Str"",encodedUrlFull);
}
@Override public void onPageScrollStateChanged(int state){
}
}
);
}
MobileAds.initialize(FullWallpaperViewActivity.this,getResources().getString(R.string.FULLSCREEN_BANNER_ID));
bannerAd=new AdView(FullWallpaperViewActivity.this);
bannerAd=findViewById(R.id.bannerAdView);
final AdRequest adRequest=new AdRequest.Builder().addTestDevice(""String_Node_Str"").addTestDevice(""String_Node_Str"").addTestDevice(AdRequest.DEVICE_ID_EMULATOR).build();
bannerAd.loadAd(adRequest);
bannerAd.setAdListener(new AdListener(){
@Override public void onAdFailedToLoad(int i){
disableAdBlock.setVisibility(View.VISIBLE);
isAdblock=true;
}
@Override public void onAdLoaded(){
super.onAdLoaded();
isAdblock=false;
disableAdBlock.setVisibility(View.GONE);
}
}
);
setWallBtn.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View view){
new setWall(getApplicationContext()).execute();
}
}
);
downloadWallBtn.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View view){
switch (ActivityCaller) {
case ""String_Node_Str"":
new DownloadHandler.ImageDownloadAndSave(getApplicationContext()).execute(encodedUrlFull,""String_Node_Str"" + String.valueOf(wallId) + fileType);
toast=makeText(getApplicationContext(),""String_Node_Str"" + ""String_Node_Str"" + String.valueOf(wallId) + fileType,Toast.LENGTH_SHORT);
toast.show();
break;
case ""String_Node_Str"":
new DownloadHandler.ImageDownloadAndSave(getApplicationContext()).execute(encodedUrlFull,""String_Node_Str"" + String.valueOf(wallId) + fileType);
toast=Toast.makeText(getApplicationContext(),""String_Node_Str"" + ""String_Node_Str"" + String.valueOf(wallId) + fileType,Toast.LENGTH_SHORT);
toast.show();
break;
case ""String_Node_Str"":
try {
AlertDialog.Builder builder=new AlertDialog.Builder(FullWallpaperViewActivity.this,R.style.MyDialogTheme);
builder.setCancelable(false);
builder.setTitle(""String_Node_Str"");
builder.setItems(options,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
switch (which) {
case 0:
toast=Toast.makeText(getApplicationContext(),""String_Node_Str"" + ""String_Node_Str"" + String.valueOf(wallId) + ""String_Node_Str""+ fileType,Toast.LENGTH_SHORT);
toast.show();
new DownloadHandler.ImageDownloadAndSave(getApplicationContext()).execute(encodedUrlFull,""String_Node_Str"" + String.valueOf(wallId) + fileType);
Log.i(""String_Node_Str"",encodedUrlFull);
break;
case 1:
toast=Toast.makeText(getApplicationContext(),""String_Node_Str"" + ""String_Node_Str"" + String.valueOf(wallId) + ""String_Node_Str""+ fileType,Toast.LENGTH_SHORT);
toast.show();
encodedUrlFull=encodedUrlFull.replace(""String_Node_Str"",""String_Node_Str"");
new DownloadHandler.ImageDownloadAndSave(getApplicationContext()).execute(encodedUrlFull,""String_Node_Str"" + String.valueOf(wallId) + fileType);
Log.i(""String_Node_Str"",encodedUrlFull);
break;
case 2:
toast=Toast.makeText(getApplicationContext(),""String_Node_Str"" + ""String_Node_Str"" + String.valueOf(wallId) + ""String_Node_Str""+ fileType,Toast.LENGTH_SHORT);
toast.show();
encodedUrlFull=encodedUrlFull.replace(""String_Node_Str"",""String_Node_Str"");
new DownloadHandler.ImageDownloadAndSave(getApplicationContext()).execute(encodedUrlFull,""String_Node_Str"" + String.valueOf(wallId) + fileType);
Log.i(""String_Node_Str"",encodedUrlFull);
break;
}
}
}
);
builder.setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int which){
}
}
);
builder.show();
}
 catch (Exception e) {
Log.i(""String_Node_Str"",e.toString());
}
break;
}
}
}
);
}"
39069,"@Override public void onPageSelected(int position){
  if ((arrayList.size() - position <= 2)) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    Log.i(""String_Node_Str"",String.valueOf(pageCount));
    Intent intent=new Intent(""String_Node_Str"");
    LocalBroadcastManager.getInstance(FullWallpaperViewActivity.this).sendBroadcast(intent);
    Log.i(""String_Node_Str"",""String_Node_Str"");
    viewPager.invalidate();
  }
}","@Override public void onPageSelected(int position){
  if ((arrayList.size() - position <= 2)) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    Log.i(""String_Node_Str"",String.valueOf(pageCount));
    Intent intent=new Intent(""String_Node_Str"");
    LocalBroadcastManager.getInstance(FullWallpaperViewActivity.this).sendBroadcast(intent);
    Log.i(""String_Node_Str"",""String_Node_Str"");
    viewPager.invalidate();
  }
  encodedUrlFull=arrayList.get(position).getWallpaperFullURL();
  wallId=arrayList.get(position).getWallId();
  Log.i(""String_Node_Str"",String.valueOf(pos));
  Log.i(""String_Node_Str"",encodedUrlFull);
}"
39070,"@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
  String title=""String_Node_Str"" + String.valueOf(arrayList.get(position).getWallId());
  getSupportActionBar().setTitle(title);
  toolbar.setTitleTextColor(ContextCompat.getColor(FullWallpaperViewActivity.this,R.color.white));
  toolbar.setPadding(0,getStatusBarHeight(),0,0);
  toolbar.setBackgroundColor(ContextCompat.getColor(FullWallpaperViewActivity.this,R.color.translucentBlackColor));
  toolbar.setNavigationIcon(R.drawable.back_arrow);
  toolbar.setNavigationOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      onBackPressed();
    }
  }
);
  encodedUrlFull=arrayList.get(position).getWallpaperFullURL();
}","@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
  String title=""String_Node_Str"" + String.valueOf(arrayList.get(position).getWallId());
  getSupportActionBar().setTitle(title);
  toolbar.setTitleTextColor(ContextCompat.getColor(FullWallpaperViewActivity.this,R.color.white));
  toolbar.setPadding(0,getStatusBarHeight(),0,0);
  toolbar.setBackgroundColor(ContextCompat.getColor(FullWallpaperViewActivity.this,R.color.translucentBlackColor));
  toolbar.setNavigationIcon(R.drawable.back_arrow);
  toolbar.setNavigationOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      onBackPressed();
    }
  }
);
}"
39071,"@Override public void onReceive(Context context,Intent intent){
  new loadMore().execute(""String_Node_Str"" + pageCount + ""String_Node_Str"");
  Log.i(""String_Node_Str"",""String_Node_Str"");
}","@Override public void onReceive(Context context,Intent intent){
  new loadMore().execute(""String_Node_Str"" + pageCount + ""String_Node_Str"");
  Log.i(""String_Node_Str"",""String_Node_Str"");
  homeFragmentCustomAdapter.notifyDataSetChanged();
}"
39072,"@Override public void onLoadMore(){
  wallpapersModelArrayList.add(null);
  Log.i(""String_Node_Str"",""String_Node_Str"");
  homeFragmentCustomAdapter.notifyItemInserted(wallpapersModelArrayList.size() - 1);
  handler.postDelayed(new Runnable(){
    @Override public void run(){
      wallpapersModelArrayList.remove(wallpapersModelArrayList.size() - 1);
      homeFragmentCustomAdapter.notifyItemRemoved(wallpapersModelArrayList.size());
      Log.i(""String_Node_Str"",""String_Node_Str"");
      Log.i(""String_Node_Str"",""String_Node_Str"");
      new loadMore().execute(""String_Node_Str"" + pageCount);
      homeFragmentCustomAdapter.setLoaded();
      Log.i(""String_Node_Str"",""String_Node_Str"");
    }
  }
,700);
}","@Override public void onLoadMore(){
  wallpapersModelArrayList.add(null);
  Log.i(""String_Node_Str"",""String_Node_Str"");
  homeFragmentCustomAdapter.notifyItemInserted(wallpapersModelArrayList.size() - 1);
  handler.postDelayed(new Runnable(){
    @Override public void run(){
      wallpapersModelArrayList.remove(wallpapersModelArrayList.size() - 1);
      homeFragmentCustomAdapter.notifyItemRemoved(wallpapersModelArrayList.size());
      Log.i(""String_Node_Str"",""String_Node_Str"");
      Log.i(""String_Node_Str"",""String_Node_Str"");
      new loadMore().execute(""String_Node_Str"" + pageCount);
      homeFragmentCustomAdapter.setLoaded();
      Log.i(""String_Node_Str"",""String_Node_Str"");
    }
  }
,900);
}"
39073,"private void initData(){
  isNetworkConnected=isNetworkAvailable();
  if (isNetworkConnected) {
    noNetImage.setVisibility(View.INVISIBLE);
    loadFromInternet(""String_Node_Str"");
  }
 else {
    noNetImage.setImageDrawable(ContextCompat.getDrawable(getActivity(),R.drawable.nonetwork));
    noNetImage.setVisibility(View.VISIBLE);
    Toast.makeText(getContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
}","private void initData(){
  isNetworkConnected=isNetworkAvailable();
  if (isNetworkConnected) {
    noNetImage.setVisibility(View.INVISIBLE);
    noNetText.setVisibility(View.INVISIBLE);
    connectBtn.setVisibility(View.GONE);
    loadFromInternet(""String_Node_Str"");
  }
 else {
    noNetImage.setImageDrawable(ContextCompat.getDrawable(getActivity(),R.drawable.nonetwork));
    noNetImage.setVisibility(View.VISIBLE);
    noNetText.setVisibility(View.VISIBLE);
    connectBtn.setVisibility(View.VISIBLE);
    Toast.makeText(getContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
}"
39074,"@Nullable @Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.home_fragment,null);
  noNetImage=view.findViewById(R.id.noNet);
  wallpapersModelArrayList=new ArrayList<>();
  handler=new Handler();
  initData();
  gridLayoutManager=new GridLayoutManager(getContext(),2);
  recyclerView=view.findViewById(R.id.homeFragment_rv);
  recyclerView.setHasFixedSize(true);
  recyclerView.setLayoutManager(gridLayoutManager);
  homeFragmentCustomAdapter=new HomeFragmentCustomAdapter(wallpapersModelArrayList,getContext(),recyclerView);
  homeFragmentCustomAdapter.setOnLoadMoreListener(new onLoadMoreListener(){
    @Override public void onLoadMore(){
      wallpapersModelArrayList.add(null);
      Log.i(""String_Node_Str"",""String_Node_Str"");
      homeFragmentCustomAdapter.notifyItemInserted(wallpapersModelArrayList.size() - 1);
      handler.postDelayed(new Runnable(){
        @Override public void run(){
          wallpapersModelArrayList.remove(wallpapersModelArrayList.size() - 1);
          homeFragmentCustomAdapter.notifyItemRemoved(wallpapersModelArrayList.size());
          Log.i(""String_Node_Str"",""String_Node_Str"");
          Log.i(""String_Node_Str"",""String_Node_Str"");
          new loadMore().execute(""String_Node_Str"" + pageCount);
          homeFragmentCustomAdapter.setLoaded();
          Log.i(""String_Node_Str"",""String_Node_Str"");
        }
      }
,700);
    }
  }
);
  recyclerView.setAdapter(homeFragmentCustomAdapter);
  recyclerView.addItemDecoration(new RecyclerItemDecoration(2));
  setHasOptionsMenu(true);
  return view;
}","@Nullable @Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.home_fragment,null);
  noNetImage=view.findViewById(R.id.noNet);
  noNetText=view.findViewById(R.id.noNetText);
  connectBtn=view.findViewById(R.id.connectBtn);
  connectBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      startActivityForResult(new Intent(Settings.ACTION_WIFI_SETTINGS),0);
    }
  }
);
  wallpapersModelArrayList=new ArrayList<>();
  handler=new Handler();
  initData();
  gridLayoutManager=new GridLayoutManager(getContext(),2);
  recyclerView=view.findViewById(R.id.homeFragment_rv);
  recyclerView.setHasFixedSize(true);
  recyclerView.setLayoutManager(gridLayoutManager);
  homeFragmentCustomAdapter=new HomeFragmentCustomAdapter(wallpapersModelArrayList,getContext(),recyclerView);
  homeFragmentCustomAdapter.setOnLoadMoreListener(new onLoadMoreListener(){
    @Override public void onLoadMore(){
      wallpapersModelArrayList.add(null);
      Log.i(""String_Node_Str"",""String_Node_Str"");
      homeFragmentCustomAdapter.notifyItemInserted(wallpapersModelArrayList.size() - 1);
      handler.postDelayed(new Runnable(){
        @Override public void run(){
          wallpapersModelArrayList.remove(wallpapersModelArrayList.size() - 1);
          homeFragmentCustomAdapter.notifyItemRemoved(wallpapersModelArrayList.size());
          Log.i(""String_Node_Str"",""String_Node_Str"");
          Log.i(""String_Node_Str"",""String_Node_Str"");
          new loadMore().execute(""String_Node_Str"" + pageCount);
          homeFragmentCustomAdapter.setLoaded();
          Log.i(""String_Node_Str"",""String_Node_Str"");
        }
      }
,900);
    }
  }
);
  recyclerView.setAdapter(homeFragmentCustomAdapter);
  recyclerView.addItemDecoration(new RecyclerItemDecoration(2));
  setHasOptionsMenu(true);
  return view;
}"
39075,"@Override public void handleDelivery(String consumerTag,Envelope envelope,AMQP.BasicProperties properties,byte[] body) throws IOException {
  client.send(new String(body,StandardCharsets.UTF_8));
  channel.basicAck(envelope.getDeliveryTag(),false);
}","@Override public void handleDelivery(String consumerTag,Envelope envelope,AMQP.BasicProperties properties,byte[] body) throws IOException {
  client.send(new String(body,StandardCharsets.UTF_8));
}"
39076,"/** 
 * @param shardId ID of the shard this GatewayServer represents
 * @param channel Channel to communicate on
 * @throws IOException if there's an error declaring the rabbitmq queues or setting up the shard listeners
 */
public GatewayServer(int shardId,Channel channel) throws IOException {
  this.shardId=shardId;
  this.channel=channel;
  this.logger=LoggerFactory.getLogger(""String_Node_Str"" + shardId);
  channel.queueDeclare(""String_Node_Str"" + shardId + ""String_Node_Str"",true,false,false,null);
  channel.queueDeclare(""String_Node_Str"" + shardId + ""String_Node_Str"",true,false,false,null);
  channel.queueDeclare(""String_Node_Str"" + shardId + ""String_Node_Str"",true,false,false,null);
  channel.queueDeclare(""String_Node_Str"" + shardId + ""String_Node_Str"",true,false,false,null);
  channel.basicConsume(""String_Node_Str"" + shardId + ""String_Node_Str"",false,new DefaultConsumer(channel){
    @Override public void handleDelivery(    String consumerTag,    Envelope envelope,    AMQP.BasicProperties properties,    byte[] body) throws IOException {
      sendEvents.set(true);
      if (readyPayload != null) {
        channel.basicPublish(""String_Node_Str"",""String_Node_Str"" + shardId + ""String_Node_Str"",null,readyPayload.toString().getBytes(StandardCharsets.UTF_8));
        for (        JSONObject obj : guildCreateEvents.values()) {
          channel.basicPublish(""String_Node_Str"",""String_Node_Str"" + shardId + ""String_Node_Str"",null,obj.toString().getBytes(StandardCharsets.UTF_8));
        }
      }
      channel.basicAck(envelope.getDeliveryTag(),false);
    }
  }
);
  channel.basicConsume(""String_Node_Str"" + shardId + ""String_Node_Str"",false,new DefaultConsumer(channel){
    @Override public void handleDelivery(    String consumerTag,    Envelope envelope,    AMQP.BasicProperties properties,    byte[] body) throws IOException {
      sendEvents.set(false);
      channel.basicAck(envelope.getDeliveryTag(),false);
    }
  }
);
}","/** 
 * @param shardId ID of the shard this GatewayServer represents
 * @param channel Channel to communicate on
 * @throws IOException if there's an error declaring the rabbitmq queues or setting up the shard listeners
 */
public GatewayServer(int shardId,Channel channel) throws IOException {
  this.shardId=shardId;
  this.channel=channel;
  this.logger=LoggerFactory.getLogger(""String_Node_Str"" + shardId);
  channel.queueDeclare(""String_Node_Str"" + shardId + ""String_Node_Str"",true,false,false,null);
  channel.queueDeclare(""String_Node_Str"" + shardId + ""String_Node_Str"",true,false,false,null);
  channel.queueDeclare(""String_Node_Str"" + shardId + ""String_Node_Str"",true,false,false,null);
  channel.queueDeclare(""String_Node_Str"" + shardId + ""String_Node_Str"",true,false,false,null);
  channel.basicConsume(""String_Node_Str"" + shardId + ""String_Node_Str"",true,new DefaultConsumer(channel){
    @Override public void handleDelivery(    String consumerTag,    Envelope envelope,    AMQP.BasicProperties properties,    byte[] body) throws IOException {
      sendEvents.set(true);
      if (readyPayload != null) {
        channel.basicPublish(""String_Node_Str"",""String_Node_Str"" + shardId + ""String_Node_Str"",null,readyPayload.toString().getBytes(StandardCharsets.UTF_8));
        for (        JSONObject obj : guildCreateEvents.values()) {
          channel.basicPublish(""String_Node_Str"",""String_Node_Str"" + shardId + ""String_Node_Str"",null,obj.toString().getBytes(StandardCharsets.UTF_8));
        }
      }
    }
  }
);
  channel.basicConsume(""String_Node_Str"" + shardId + ""String_Node_Str"",true,new DefaultConsumer(channel){
    @Override public void handleDelivery(    String consumerTag,    Envelope envelope,    AMQP.BasicProperties properties,    byte[] body) throws IOException {
      sendEvents.set(false);
    }
  }
);
}"
39077,"/** 
 * Forwards an event to the client and updates the internal GUILD_CREATE cache if needed
 * @param event Event to be forwarded to the client
 * @throws IOException if there's an error sending
 */
protected synchronized void send(JSONObject event) throws IOException {
  JSONObject payload=event.getJSONObject(""String_Node_Str"");
switch (event.getString(""String_Node_Str"").toLowerCase()) {
case ""String_Node_Str"":
    readyPayload=event;
  break;
case ""String_Node_Str"":
guildCreateEvents.put(payload.getLong(""String_Node_Str""),event);
break;
case ""String_Node_Str"":
{
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
guild.put(""String_Node_Str"",payload.getJSONArray(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.optString(""String_Node_Str"",null));
guild.put(""String_Node_Str"",payload.getInt(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.optString(""String_Node_Str"",null));
guild.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.getJSONArray(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.optString(""String_Node_Str"",null));
guild.put(""String_Node_Str"",payload.optString(""String_Node_Str"",null));
guild.put(""String_Node_Str"",payload.getInt(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.getBoolean(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.getJSONArray(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.getInt(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.getInt(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.optString(""String_Node_Str"",null));
guild.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.getInt(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.getBoolean(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.optString(""String_Node_Str"",null));
logger.trace(""String_Node_Str"",payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
guild.put(""String_Node_Str"",payload.getJSONArray(""String_Node_Str""));
logger.trace(""String_Node_Str"",payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
long id=payload.getJSONObject(""String_Node_Str"").getLong(""String_Node_Str"");
JSONArray presences=guild.getJSONArray(""String_Node_Str"");
for (int i=0, j=presences.length(); i < j; i++) {
JSONObject presence=presences.getJSONObject(i);
if (presence.getJSONObject(""String_Node_Str"").getLong(""String_Node_Str"") == id) {
presence.put(""String_Node_Str"",payload.optJSONObject(""String_Node_Str""));
presence.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
presence.put(""String_Node_Str"",payload.optString(""String_Node_Str"",null));
presence.put(""String_Node_Str"",payload.getJSONObject(""String_Node_Str""));
break;
}
}
if (payload.has(""String_Node_Str"") || payload.has(""String_Node_Str"") || payload.has(""String_Node_Str"")) {
JSONArray members=guild.getJSONArray(""String_Node_Str"");
for (int i=0, j=members.length(); i < j; i++) {
JSONObject member=members.getJSONObject(i);
JSONObject oldUser=member.getJSONObject(""String_Node_Str"");
if (oldUser.getLong(""String_Node_Str"") == id) {
if (payload.has(""String_Node_Str"")) oldUser.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
if (payload.has(""String_Node_Str"")) oldUser.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
if (payload.has(""String_Node_Str"")) oldUser.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
break;
}
}
}
logger.trace(""String_Node_Str"",id,payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
guild.getJSONArray(""String_Node_Str"").put(payload.getJSONObject(""String_Node_Str""));
logger.trace(""String_Node_Str"",payload.getJSONObject(""String_Node_Str"").getString(""String_Node_Str""),payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
JSONArray roles=guild.getJSONArray(""String_Node_Str"");
JSONObject role=payload.getJSONObject(""String_Node_Str"");
long id=role.getLong(""String_Node_Str"");
for (int i=0, j=roles.length(); i < j; i++) {
JSONObject o=roles.getJSONObject(i);
if (o.getLong(""String_Node_Str"") == id) {
o.put(""String_Node_Str"",role.getInt(""String_Node_Str""));
o.put(""String_Node_Str"",role.getLong(""String_Node_Str""));
o.put(""String_Node_Str"",role.getBoolean(""String_Node_Str""));
o.put(""String_Node_Str"",role.getString(""String_Node_Str""));
o.put(""String_Node_Str"",role.getBoolean(""String_Node_Str""));
o.put(""String_Node_Str"",role.getInt(""String_Node_Str""));
o.put(""String_Node_Str"",role.getBoolean(""String_Node_Str""));
break;
}
}
logger.trace(""String_Node_Str"",id,payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
long id=payload.getLong(""String_Node_Str"");
JSONArray roles=guild.getJSONArray(""String_Node_Str"");
JSONArray n=new JSONArray();
for (int i=0, j=roles.length(); i < j; i++) {
JSONObject role=roles.getJSONObject(i);
if (role.getLong(""String_Node_Str"") != id) {
n.put(role);
}
}
guild.put(""String_Node_Str"",n);
logger.trace(""String_Node_Str"",id,payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
if (!payload.has(""String_Node_Str"")) break;
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
guild.getJSONArray(""String_Node_Str"").put(payload);
logger.trace(""String_Node_Str"",payload.getLong(""String_Node_Str""),payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
if (!payload.has(""String_Node_Str"")) break;
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
long id=payload.getLong(""String_Node_Str"");
JSONArray channels=guild.getJSONArray(""String_Node_Str"");
for (int i=0, j=channels.length(); i < j; i++) {
JSONObject channel=channels.getJSONObject(i);
if (channel.getLong(""String_Node_Str"") == id) {
channel.put(""String_Node_Str"",payload.getJSONArray(""String_Node_Str""));
channel.put(""String_Node_Str"",payload.getBoolean(""String_Node_Str""));
channel.put(""String_Node_Str"",payload.optString(""String_Node_Str"",null));
channel.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
channel.put(""String_Node_Str"",payload.getInt(""String_Node_Str""));
if (payload.has(""String_Node_Str"")) channel.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
if (payload.has(""String_Node_Str"")) channel.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
if (payload.has(""String_Node_Str"")) channel.put(""String_Node_Str"",payload.getInt(""String_Node_Str""));
if (payload.has(""String_Node_Str"")) channel.put(""String_Node_Str"",payload.getInt(""String_Node_Str""));
break;
}
}
logger.trace(""String_Node_Str"",payload.getLong(""String_Node_Str""),payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
if (!payload.has(""String_Node_Str"")) break;
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
long id=payload.getLong(""String_Node_Str"");
JSONArray channels=guild.getJSONArray(""String_Node_Str"");
JSONArray n=new JSONArray();
for (int i=0, j=channels.length(); i < j; i++) {
JSONObject channel=channels.getJSONObject(i);
if (channel.getLong(""String_Node_Str"") != id) {
n.put(channel);
}
}
guild.put(""String_Node_Str"",n);
logger.trace(""String_Node_Str"",id,payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
if (!payload.has(""String_Node_Str"")) break;
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
long userId=payload.getLong(""String_Node_Str"");
if (payload.isNull(""String_Node_Str"")) {
JSONArray voiceStates=guild.getJSONArray(""String_Node_Str"");
JSONArray n=new JSONArray();
for (int i=0, j=voiceStates.length(); i < j; i++) {
JSONObject state=voiceStates.getJSONObject(i);
if (state.getLong(""String_Node_Str"") != userId) {
n.put(state);
}
}
guild.put(""String_Node_Str"",n);
logger.trace(""String_Node_Str"",userId,payload.getLong(""String_Node_Str""));
break;
}
JSONArray voiceStates=guild.getJSONArray(""String_Node_Str"");
for (int i=0, j=voiceStates.length(); i < j; i++) {
JSONObject state=voiceStates.getJSONObject(i);
if (state.getLong(""String_Node_Str"") == userId) {
state.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
state.put(""String_Node_Str"",payload.getBoolean(""String_Node_Str""));
state.put(""String_Node_Str"",payload.getBoolean(""String_Node_Str""));
state.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
state.put(""String_Node_Str"",payload.getBoolean(""String_Node_Str""));
state.put(""String_Node_Str"",payload.getBoolean(""String_Node_Str""));
state.put(""String_Node_Str"",payload.getBoolean(""String_Node_Str""));
state.put(""String_Node_Str"",payload.getBoolean(""String_Node_Str""));
logger.trace(""String_Node_Str"",userId,payload.getLong(""String_Node_Str""));
break;
}
}
voiceStates.put(payload);
logger.trace(""String_Node_Str"",userId,payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
JSONArray members=guild.getJSONArray(""String_Node_Str"");
members.put(payload);
guild.put(""String_Node_Str"",guild.getInt(""String_Node_Str"") + 1);
logger.trace(""String_Node_Str"",payload.getJSONObject(""String_Node_Str"").getString(""String_Node_Str""),payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
long id=payload.getJSONObject(""String_Node_Str"").getLong(""String_Node_Str"");
JSONArray members=guild.getJSONArray(""String_Node_Str"");
JSONArray n=new JSONArray();
for (int i=0, j=members.length(); i < j; i++) {
JSONObject member=members.getJSONObject(i);
if (member.getJSONObject(""String_Node_Str"").getLong(""String_Node_Str"") != id) {
n.put(member);
}
}
guild.put(""String_Node_Str"",n);
guild.put(""String_Node_Str"",guild.getInt(""String_Node_Str"") - 1);
logger.trace(""String_Node_Str"",id,payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
long id=payload.getJSONObject(""String_Node_Str"").getLong(""String_Node_Str"");
JSONArray members=guild.getJSONArray(""String_Node_Str"");
for (int i=0, j=members.length(); i < j; i++) {
JSONObject member=members.getJSONObject(i);
if (member.getJSONObject(""String_Node_Str"").getLong(""String_Node_Str"") == id) {
member.put(""String_Node_Str"",payload.optString(""String_Node_Str"",null));
member.put(""String_Node_Str"",payload.getJSONArray(""String_Node_Str""));
break;
}
}
logger.trace(""String_Node_Str"",id,payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
if (readyPayload != null) {
readyPayload.put(""String_Node_Str"",payload);
}
long id=payload.getLong(""String_Node_Str"");
for (JSONObject cachedGuildCreate : guildCreateEvents.values()) {
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
JSONArray members=guild.getJSONArray(""String_Node_Str"");
for (int i=0, j=members.length(); i < j; i++) {
JSONObject member=members.getJSONObject(i);
if (member.getJSONObject(""String_Node_Str"").getLong(""String_Node_Str"") == id) {
member.put(""String_Node_Str"",payload);
break;
}
}
JSONArray presences=guild.getJSONArray(""String_Node_Str"");
for (int i=0, j=presences.length(); i < j; i++) {
JSONObject presence=presences.getJSONObject(i);
if (presence.getJSONObject(""String_Node_Str"").getLong(""String_Node_Str"") == id) {
presence.put(""String_Node_Str"",payload);
break;
}
}
}
logger.trace(""String_Node_Str"");
}
break;
}
if (sendEvents.get()) channel.basicPublish(""String_Node_Str"",""String_Node_Str"" + shardId + ""String_Node_Str"",null,event.toString().getBytes(StandardCharsets.UTF_8));
}","/** 
 * Forwards an event to the client and updates the internal GUILD_CREATE cache if needed
 * @param event Event to be forwarded to the client
 * @throws IOException if there's an error sending
 */
protected synchronized void send(JSONObject event) throws IOException {
  JSONObject payload=event.getJSONObject(""String_Node_Str"");
switch (event.getString(""String_Node_Str"").toLowerCase()) {
case ""String_Node_Str"":
    readyPayload=event;
  break;
case ""String_Node_Str"":
guildCreateEvents.put(payload.getLong(""String_Node_Str""),event);
break;
case ""String_Node_Str"":
{
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
guild.put(""String_Node_Str"",payload.getJSONArray(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.optString(""String_Node_Str"",null));
guild.put(""String_Node_Str"",payload.getInt(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.optString(""String_Node_Str"",null));
guild.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.getJSONArray(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.optString(""String_Node_Str"",null));
guild.put(""String_Node_Str"",payload.optString(""String_Node_Str"",null));
guild.put(""String_Node_Str"",payload.getInt(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.optString(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.getBoolean(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.getJSONArray(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.getInt(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.getInt(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.optString(""String_Node_Str"",null));
guild.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.getInt(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.getBoolean(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
guild.put(""String_Node_Str"",payload.optString(""String_Node_Str"",null));
logger.trace(""String_Node_Str"",payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
guild.put(""String_Node_Str"",payload.getJSONArray(""String_Node_Str""));
logger.trace(""String_Node_Str"",payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
long id=payload.getJSONObject(""String_Node_Str"").getLong(""String_Node_Str"");
JSONArray presences=guild.getJSONArray(""String_Node_Str"");
for (int i=0, j=presences.length(); i < j; i++) {
JSONObject presence=presences.getJSONObject(i);
if (presence.getJSONObject(""String_Node_Str"").getLong(""String_Node_Str"") == id) {
presence.put(""String_Node_Str"",payload.optJSONObject(""String_Node_Str""));
presence.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
presence.put(""String_Node_Str"",payload.optString(""String_Node_Str"",null));
presence.put(""String_Node_Str"",payload.getJSONObject(""String_Node_Str""));
break;
}
}
if (payload.has(""String_Node_Str"") || payload.has(""String_Node_Str"") || payload.has(""String_Node_Str"")) {
JSONArray members=guild.getJSONArray(""String_Node_Str"");
for (int i=0, j=members.length(); i < j; i++) {
JSONObject member=members.getJSONObject(i);
JSONObject oldUser=member.getJSONObject(""String_Node_Str"");
if (oldUser.getLong(""String_Node_Str"") == id) {
if (payload.has(""String_Node_Str"")) oldUser.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
if (payload.has(""String_Node_Str"")) oldUser.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
if (payload.has(""String_Node_Str"")) oldUser.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
break;
}
}
}
logger.trace(""String_Node_Str"",id,payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
guild.getJSONArray(""String_Node_Str"").put(payload.getJSONObject(""String_Node_Str""));
logger.trace(""String_Node_Str"",payload.getJSONObject(""String_Node_Str"").getString(""String_Node_Str""),payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
JSONArray roles=guild.getJSONArray(""String_Node_Str"");
JSONObject role=payload.getJSONObject(""String_Node_Str"");
long id=role.getLong(""String_Node_Str"");
for (int i=0, j=roles.length(); i < j; i++) {
JSONObject o=roles.getJSONObject(i);
if (o.getLong(""String_Node_Str"") == id) {
o.put(""String_Node_Str"",role.getInt(""String_Node_Str""));
o.put(""String_Node_Str"",role.getLong(""String_Node_Str""));
o.put(""String_Node_Str"",role.getBoolean(""String_Node_Str""));
o.put(""String_Node_Str"",role.getString(""String_Node_Str""));
o.put(""String_Node_Str"",role.getBoolean(""String_Node_Str""));
o.put(""String_Node_Str"",role.getInt(""String_Node_Str""));
o.put(""String_Node_Str"",role.getBoolean(""String_Node_Str""));
break;
}
}
logger.trace(""String_Node_Str"",id,payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
long id=payload.getLong(""String_Node_Str"");
JSONArray roles=guild.getJSONArray(""String_Node_Str"");
JSONArray n=new JSONArray();
for (int i=0, j=roles.length(); i < j; i++) {
JSONObject role=roles.getJSONObject(i);
if (role.getLong(""String_Node_Str"") != id) {
n.put(role);
}
}
guild.put(""String_Node_Str"",n);
logger.trace(""String_Node_Str"",id,payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
if (!payload.has(""String_Node_Str"")) break;
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
guild.getJSONArray(""String_Node_Str"").put(payload);
logger.trace(""String_Node_Str"",payload.getLong(""String_Node_Str""),payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
if (!payload.has(""String_Node_Str"")) break;
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
long id=payload.getLong(""String_Node_Str"");
JSONArray channels=guild.getJSONArray(""String_Node_Str"");
for (int i=0, j=channels.length(); i < j; i++) {
JSONObject channel=channels.getJSONObject(i);
if (channel.getLong(""String_Node_Str"") == id) {
channel.put(""String_Node_Str"",payload.getJSONArray(""String_Node_Str""));
channel.put(""String_Node_Str"",payload.getBoolean(""String_Node_Str""));
channel.put(""String_Node_Str"",payload.optString(""String_Node_Str"",null));
channel.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
channel.put(""String_Node_Str"",payload.getInt(""String_Node_Str""));
if (payload.has(""String_Node_Str"")) channel.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
if (payload.has(""String_Node_Str"")) channel.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
if (payload.has(""String_Node_Str"")) channel.put(""String_Node_Str"",payload.getInt(""String_Node_Str""));
if (payload.has(""String_Node_Str"")) channel.put(""String_Node_Str"",payload.getInt(""String_Node_Str""));
break;
}
}
logger.trace(""String_Node_Str"",payload.getLong(""String_Node_Str""),payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
if (!payload.has(""String_Node_Str"")) break;
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
long id=payload.getLong(""String_Node_Str"");
JSONArray channels=guild.getJSONArray(""String_Node_Str"");
JSONArray n=new JSONArray();
for (int i=0, j=channels.length(); i < j; i++) {
JSONObject channel=channels.getJSONObject(i);
if (channel.getLong(""String_Node_Str"") != id) {
n.put(channel);
}
}
guild.put(""String_Node_Str"",n);
logger.trace(""String_Node_Str"",id,payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
if (!payload.has(""String_Node_Str"")) break;
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
long userId=payload.getLong(""String_Node_Str"");
if (payload.isNull(""String_Node_Str"")) {
JSONArray voiceStates=guild.getJSONArray(""String_Node_Str"");
JSONArray n=new JSONArray();
for (int i=0, j=voiceStates.length(); i < j; i++) {
JSONObject state=voiceStates.getJSONObject(i);
if (state.getLong(""String_Node_Str"") != userId) {
n.put(state);
}
}
guild.put(""String_Node_Str"",n);
logger.trace(""String_Node_Str"",userId,payload.getLong(""String_Node_Str""));
break;
}
JSONArray voiceStates=guild.getJSONArray(""String_Node_Str"");
for (int i=0, j=voiceStates.length(); i < j; i++) {
JSONObject state=voiceStates.getJSONObject(i);
if (state.getLong(""String_Node_Str"") == userId) {
state.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
state.put(""String_Node_Str"",payload.getBoolean(""String_Node_Str""));
state.put(""String_Node_Str"",payload.getBoolean(""String_Node_Str""));
state.put(""String_Node_Str"",payload.getString(""String_Node_Str""));
state.put(""String_Node_Str"",payload.getBoolean(""String_Node_Str""));
state.put(""String_Node_Str"",payload.getBoolean(""String_Node_Str""));
state.put(""String_Node_Str"",payload.getBoolean(""String_Node_Str""));
state.put(""String_Node_Str"",payload.getBoolean(""String_Node_Str""));
logger.trace(""String_Node_Str"",userId,payload.getLong(""String_Node_Str""));
break;
}
}
voiceStates.put(payload);
logger.trace(""String_Node_Str"",userId,payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
JSONArray members=guild.getJSONArray(""String_Node_Str"");
members.put(payload);
guild.put(""String_Node_Str"",guild.getInt(""String_Node_Str"") + 1);
logger.trace(""String_Node_Str"",payload.getJSONObject(""String_Node_Str"").getString(""String_Node_Str""),payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
long id=payload.getJSONObject(""String_Node_Str"").getLong(""String_Node_Str"");
JSONArray members=guild.getJSONArray(""String_Node_Str"");
JSONArray n=new JSONArray();
for (int i=0, j=members.length(); i < j; i++) {
JSONObject member=members.getJSONObject(i);
if (member.getJSONObject(""String_Node_Str"").getLong(""String_Node_Str"") != id) {
n.put(member);
}
}
guild.put(""String_Node_Str"",n);
guild.put(""String_Node_Str"",guild.getInt(""String_Node_Str"") - 1);
logger.trace(""String_Node_Str"",id,payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
JSONObject cachedGuildCreate=guildCreateEvents.get(payload.getLong(""String_Node_Str""));
if (cachedGuildCreate == null) {
logger.warn(""String_Node_Str"",payload.getLong(""String_Node_Str""));
break;
}
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
long id=payload.getJSONObject(""String_Node_Str"").getLong(""String_Node_Str"");
JSONArray members=guild.getJSONArray(""String_Node_Str"");
for (int i=0, j=members.length(); i < j; i++) {
JSONObject member=members.getJSONObject(i);
if (member.getJSONObject(""String_Node_Str"").getLong(""String_Node_Str"") == id) {
member.put(""String_Node_Str"",payload.optString(""String_Node_Str"",null));
member.put(""String_Node_Str"",payload.getJSONArray(""String_Node_Str""));
break;
}
}
logger.trace(""String_Node_Str"",id,payload.getLong(""String_Node_Str""));
}
break;
case ""String_Node_Str"":
{
if (readyPayload != null) {
readyPayload.put(""String_Node_Str"",payload);
}
long id=payload.getLong(""String_Node_Str"");
for (JSONObject cachedGuildCreate : guildCreateEvents.values()) {
JSONObject guild=cachedGuildCreate.getJSONObject(""String_Node_Str"");
JSONArray members=guild.getJSONArray(""String_Node_Str"");
for (int i=0, j=members.length(); i < j; i++) {
JSONObject member=members.getJSONObject(i);
if (member.getJSONObject(""String_Node_Str"").getLong(""String_Node_Str"") == id) {
member.put(""String_Node_Str"",payload);
break;
}
}
JSONArray presences=guild.getJSONArray(""String_Node_Str"");
for (int i=0, j=presences.length(); i < j; i++) {
JSONObject presence=presences.getJSONObject(i);
if (presence.getJSONObject(""String_Node_Str"").getLong(""String_Node_Str"") == id) {
presence.put(""String_Node_Str"",payload);
break;
}
}
}
logger.trace(""String_Node_Str"");
}
break;
}
if (sendEvents.get()) channel.basicPublish(""String_Node_Str"",""String_Node_Str"" + shardId + ""String_Node_Str"",null,event.toString().getBytes(StandardCharsets.UTF_8));
}"
39078,"protected void register(ServerWebSocketClient client) throws IOException {
  channel.basicConsume(""String_Node_Str"" + shardId + ""String_Node_Str"",false,new DefaultConsumer(channel){
    @Override public void handleDelivery(    String consumerTag,    Envelope envelope,    AMQP.BasicProperties properties,    byte[] body) throws IOException {
      client.send(new String(body,StandardCharsets.UTF_8));
      channel.basicAck(envelope.getDeliveryTag(),false);
    }
  }
);
}","protected void register(ServerWebSocketClient client) throws IOException {
  channel.basicConsume(""String_Node_Str"" + shardId + ""String_Node_Str"",true,new DefaultConsumer(channel){
    @Override public void handleDelivery(    String consumerTag,    Envelope envelope,    AMQP.BasicProperties properties,    byte[] body) throws IOException {
      client.send(new String(body,StandardCharsets.UTF_8));
    }
  }
);
}"
39079,"@Override public void handleDelivery(String consumerTag,Envelope envelope,AMQP.BasicProperties properties,byte[] body) throws IOException {
  JSONObject obj=new JSONObject(new String(body,StandardCharsets.UTF_8));
  if (obj.has(""String_Node_Str"") && obj.getString(""String_Node_Str"").equals(""String_Node_Str"")) {
    client.getJDA().setPing(obj.getJSONObject(""String_Node_Str"").getLong(""String_Node_Str""));
    return;
  }
  if (enableRawGatewayEvent)   client.getJDA().getEventManager().handle(new RawGatewayEvent(client.getJDA(),new JSONObject(obj.toString())));
  client.handleEvent(obj);
  channel.basicAck(envelope.getDeliveryTag(),false);
}","@Override public void handleDelivery(String consumerTag,Envelope envelope,AMQP.BasicProperties properties,byte[] body) throws IOException {
  JSONObject obj=new JSONObject(new String(body,StandardCharsets.UTF_8));
  if (obj.has(""String_Node_Str"") && obj.getString(""String_Node_Str"").equals(""String_Node_Str"")) {
    client.getJDA().setPing(obj.getJSONObject(""String_Node_Str"").getLong(""String_Node_Str""));
    return;
  }
  if (enableRawGatewayEvent)   client.getJDA().getEventManager().handle(new RawGatewayEvent(client.getJDA(),new JSONObject(obj.toString())));
  client.handleEvent(obj);
}"
39080,"protected void register(ClientWebSocketClient client) throws IOException {
  channel.basicConsume(""String_Node_Str"" + shardId + ""String_Node_Str"",false,new DefaultConsumer(channel){
    @Override public void handleDelivery(    String consumerTag,    Envelope envelope,    AMQP.BasicProperties properties,    byte[] body) throws IOException {
      JSONObject obj=new JSONObject(new String(body,StandardCharsets.UTF_8));
      if (obj.has(""String_Node_Str"") && obj.getString(""String_Node_Str"").equals(""String_Node_Str"")) {
        client.getJDA().setPing(obj.getJSONObject(""String_Node_Str"").getLong(""String_Node_Str""));
        return;
      }
      if (enableRawGatewayEvent)       client.getJDA().getEventManager().handle(new RawGatewayEvent(client.getJDA(),new JSONObject(obj.toString())));
      client.handleEvent(obj);
      channel.basicAck(envelope.getDeliveryTag(),false);
    }
  }
);
  channel.basicPublish(""String_Node_Str"",""String_Node_Str"" + shardId + ""String_Node_Str"",null,new byte[0]);
}","protected void register(ClientWebSocketClient client) throws IOException {
  channel.basicConsume(""String_Node_Str"" + shardId + ""String_Node_Str"",true,new DefaultConsumer(channel){
    @Override public void handleDelivery(    String consumerTag,    Envelope envelope,    AMQP.BasicProperties properties,    byte[] body) throws IOException {
      JSONObject obj=new JSONObject(new String(body,StandardCharsets.UTF_8));
      if (obj.has(""String_Node_Str"") && obj.getString(""String_Node_Str"").equals(""String_Node_Str"")) {
        client.getJDA().setPing(obj.getJSONObject(""String_Node_Str"").getLong(""String_Node_Str""));
        return;
      }
      if (enableRawGatewayEvent)       client.getJDA().getEventManager().handle(new RawGatewayEvent(client.getJDA(),new JSONObject(obj.toString())));
      client.handleEvent(obj);
    }
  }
);
  channel.basicPublish(""String_Node_Str"",""String_Node_Str"" + shardId + ""String_Node_Str"",null,new byte[0]);
}"
39081,"public static BigDecimal calculateTheta(List<WeightedSensitivity> weightedSensitivies){
  BigDecimal sumOfRiskExposures=WeightedSensitivityUtils.sumWeightSensitivities(weightedSensitivies);
  BigDecimal sumOfAbsRiskExposures=WeightedSensitivityUtils.sumAbsoluteValues(weightedSensitivies);
  BigDecimal quotient=BigDecimalUtils.divideWithPrecision(sumOfRiskExposures,sumOfAbsRiskExposures);
  return quotient.min(BigDecimal.ZERO);
}","public static BigDecimal calculateTheta(List<WeightedSensitivity> weightedSensitivies){
  BigDecimal sumOfRiskExposures=WeightedSensitivityUtils.sumWeightSensitivities(weightedSensitivies);
  BigDecimal sumOfAbsRiskExposures=WeightedSensitivityUtils.sumAbsoluteValues(weightedSensitivies);
  if (sumOfAbsRiskExposures.stripTrailingZeros().equals(BigDecimal.ZERO)) {
    return BigDecimal.ZERO;
  }
 else {
    BigDecimal quotient=BigDecimalUtils.divideWithPrecision(sumOfRiskExposures,sumOfAbsRiskExposures);
    return quotient.min(BigDecimal.ZERO);
  }
}"
39082,"@Override protected Collection<ECRFStatusEntryVO> handleSignVerifiedEcrfs(AuthenticationVO auth,Long trialId,Long probandListEntryId,boolean signAll) throws Exception {
  if (trialId != null) {
    CheckIDUtil.checkTrialId(trialId,this.getTrialDao(),LockMode.PESSIMISTIC_WRITE);
  }
  if (probandListEntryId != null) {
    CheckIDUtil.checkProbandListEntryId(probandListEntryId,this.getProbandListEntryDao(),LockMode.PESSIMISTIC_WRITE);
  }
  Timestamp now=new Timestamp(System.currentTimeMillis());
  User user=CoreUtil.getUser();
  ArrayList<ECRFStatusEntryVO> results=new ArrayList<ECRFStatusEntryVO>();
  Iterator<ECRFStatusEntry> statusEntryIt=this.getECRFStatusEntryDao().findByTrialListEntryDoneValidatedReviewVerified(trialId,probandListEntryId,null,null,null,null,null).iterator();
  while (statusEntryIt.hasNext()) {
    ECRFStatusEntry statusEntry=statusEntryIt.next();
    Iterator<ECRFStatusType> it=statusEntry.getStatus().getTransitions().iterator();
    ECRFStatusType newStatus=null;
    while (it.hasNext()) {
      ECRFStatusType status=it.next();
      if ((signAll || !statusEntry.getStatus().equals(status)) && hasEcrfStatusAction(status,org.phoenixctms.ctsms.enumeration.ECRFStatusAction.SIGN_ECRF)) {
        newStatus=status;
        break;
      }
    }
    if (newStatus != null) {
      checkTeamMemberSign(statusEntry.getListEntry().getTrial(),user);
      ECRFStatusEntryVO result=updateEcrfStatusEntry(statusEntry,statusEntry.getEcrf(),statusEntry.getListEntry(),newStatus,statusEntry.getVersion(),null,now,user);
      results.add(result);
    }
  }
  return results;
}","@Override protected Collection<ECRFStatusEntryVO> handleSignVerifiedEcrfs(AuthenticationVO auth,Long trialId,Long probandListEntryId,boolean signAll) throws Exception {
  if (trialId != null) {
    CheckIDUtil.checkTrialId(trialId,this.getTrialDao(),LockMode.PESSIMISTIC_WRITE);
  }
  if (probandListEntryId != null) {
    CheckIDUtil.checkProbandListEntryId(probandListEntryId,this.getProbandListEntryDao(),LockMode.PESSIMISTIC_WRITE);
  }
  Timestamp now=new Timestamp(System.currentTimeMillis());
  User user=CoreUtil.getUser();
  ArrayList<ECRFStatusEntryVO> results=new ArrayList<ECRFStatusEntryVO>();
  Iterator<ECRFStatusEntry> statusEntryIt=this.getECRFStatusEntryDao().findByTrialListEntryDoneValidatedReviewVerified(trialId,probandListEntryId,null,null,null,signAll ? null : true,null).iterator();
  while (statusEntryIt.hasNext()) {
    ECRFStatusEntry statusEntry=statusEntryIt.next();
    Iterator<ECRFStatusType> it=statusEntry.getStatus().getTransitions().iterator();
    ECRFStatusType newStatus=null;
    while (it.hasNext()) {
      ECRFStatusType status=it.next();
      if ((signAll || !statusEntry.getStatus().equals(status)) && hasEcrfStatusAction(status,org.phoenixctms.ctsms.enumeration.ECRFStatusAction.SIGN_ECRF)) {
        newStatus=status;
        break;
      }
    }
    if (newStatus != null) {
      checkTeamMemberSign(statusEntry.getListEntry().getTrial(),user);
      ECRFStatusEntryVO result=updateEcrfStatusEntry(statusEntry,statusEntry.getEcrf(),statusEntry.getListEntry(),newStatus,statusEntry.getVersion(),null,now,user);
      results.add(result);
    }
  }
  return results;
}"
39083,"private int addValidationEcrfFieldStatusEntries(ECRFStatusEntry statusEntry,boolean addSeries,Timestamp now,User user) throws Exception {
  ProbandListEntry listEntry=statusEntry.getListEntry();
  ECRF ecrf=statusEntry.getEcrf();
  ProbandListEntryOutVO listEntryVO=this.getProbandListEntryDao().toProbandListEntryOutVO(listEntry);
  if (listEntryVO.getProband().getDecrypted()) {
    throw L10nUtil.initServiceException(ServiceExceptionCodes.CANNOT_DECRYPT_PROBAND);
  }
  UserOutVO userVO=this.getUserDao().toUserOutVO(user);
  Collection visitScheduleItems=null;
  if (listEntry.getGroup() != null) {
    VisitScheduleItemDao visitScheduleItemDao=this.getVisitScheduleItemDao();
    visitScheduleItems=visitScheduleItemDao.findByTrialGroupVisitProbandTravel(listEntry.getTrial().getId(),listEntry.getGroup().getId(),null,listEntry.getProband().getId(),null,null);
    visitScheduleItemDao.toVisitScheduleItemOutVOCollection(visitScheduleItems);
  }
  InputFieldSelectionSetValueDao inputFieldSelectionSetValueDao=this.getInputFieldSelectionSetValueDao();
  ProbandListEntryTagValueDao probandListEntryTagValueDao=this.getProbandListEntryTagValueDao();
  Collection<ProbandListEntryTagValueJsonVO> probandListEntryTagValues=ServiceUtil.getProbandListEntryTagJsonValues(probandListEntryTagValueDao.findByListEntryJs(listEntryVO.getId(),true,null,null),false,probandListEntryTagValueDao,inputFieldSelectionSetValueDao);
  HashMap<String,Long> maxSeriesIndexMap=null;
  HashMap<String,Long> fieldMaxPositionMap=null;
  HashMap<String,Long> fieldMinPositionMap=null;
  HashMap<String,Set<ECRFField>> seriesEcrfFieldMap=null;
  ECRFFieldValueDao ecrfFieldValueDao=this.getECRFFieldValueDao();
  if (addSeries) {
    maxSeriesIndexMap=new HashMap<String,Long>();
    fieldMaxPositionMap=new HashMap<String,Long>();
    fieldMinPositionMap=new HashMap<String,Long>();
    seriesEcrfFieldMap=new HashMap<String,Set<ECRFField>>();
    ServiceUtil.initSeriesEcrfFieldMaps(this.getECRFFieldDao().findByTrialEcrfSeriesJs(null,ecrf.getId(),true,true,true,null),listEntryVO.getId(),ecrf.getId(),maxSeriesIndexMap,fieldMaxPositionMap,fieldMinPositionMap,seriesEcrfFieldMap,ecrfFieldValueDao);
  }
  Collection<ECRFFieldValueJsonVO> jsValues=ServiceUtil.getEcrfFieldJsonValues(ecrfFieldValueDao.findByListEntryEcrfJs(listEntry.getId(),ecrf.getId(),true,true,null),maxSeriesIndexMap,fieldMaxPositionMap,fieldMinPositionMap,seriesEcrfFieldMap,false,ecrfFieldValueDao,inputFieldSelectionSetValueDao);
  FieldCalculation fieldCalculation=new FieldCalculation();
  fieldCalculation.setProbandListEntry(listEntryVO);
  fieldCalculation.setActiveUser(userVO);
  fieldCalculation.setLocale(Locales.AUDIT_TRAIL);
  fieldCalculation.setProbandListEntryTagValues(probandListEntryTagValues);
  fieldCalculation.setVisitScheduleItems(visitScheduleItems);
  fieldCalculation.setECRFFieldInputFieldVariableValues(jsValues);
  Exception scriptException=null;
  int errorCount=0;
  HashMap<Long,HashMap<Long,ValidationError>> validationErrorMap=new HashMap<Long,HashMap<Long,ValidationError>>();
  try {
    Iterator<ValidationError> it=fieldCalculation.initInputFieldVariables().iterator();
    while (it.hasNext()) {
      ValidationError msg=it.next();
      if (validationErrorMap.containsKey(msg.getEcrfFieldId())) {
        validationErrorMap.get(msg.getEcrfFieldId()).put(msg.getIndex(),msg);
      }
 else {
        HashMap<Long,ValidationError> indexErrorMap=new HashMap<Long,ValidationError>();
        indexErrorMap.put(msg.getIndex(),msg);
        validationErrorMap.put(msg.getEcrfFieldId(),indexErrorMap);
      }
      errorCount++;
    }
  }
 catch (  Exception e) {
    scriptException=e;
  }
  Iterator<Map> ecrfFieldValuesIt=ecrfFieldValueDao.findByListEntryEcrfJs(listEntry.getId(),ecrf.getId(),true,null,null).iterator();
  while (ecrfFieldValuesIt.hasNext()) {
    Map<String,Object> entities=(Map<String,Object>)ecrfFieldValuesIt.next();
    ECRFFieldValue ecrfFieldValue=(ECRFFieldValue)entities.get(ServiceUtil.ECRF_FIELD_VALUE_DAO_ECRF_FIELD_VALUE_ALIAS);
    ECRFField ecrfField;
    Long index;
    if (ecrfFieldValue == null) {
      ecrfField=(ECRFField)entities.get(ServiceUtil.ECRF_FIELD_VALUE_DAO_ECRF_FIELD_ALIAS);
      index=(ecrfField.isSeries() ? 0l : null);
    }
 else {
      ecrfField=ecrfFieldValue.getEcrfField();
      index=ecrfFieldValue.getIndex();
    }
    ECRFFieldStatusEntryInVO newEcrfFieldStatusEntry=new ECRFFieldStatusEntryInVO();
    newEcrfFieldStatusEntry.setEcrfFieldId(ecrfField.getId());
    newEcrfFieldStatusEntry.setListEntryId(listEntry.getId());
    newEcrfFieldStatusEntry.setIndex(index);
    ValidationError msg;
    HashMap<Long,ValidationError> indexErrorMap;
    if (scriptException != null) {
      ECRFFieldStatusEntry lastStatus=this.getECRFFieldStatusEntryDao().findLastStatus(ECRFFieldStatusQueue.VALIDATION,listEntry.getId(),ecrfField.getId(),index);
      if (lastStatus == null || lastStatus.getStatus().getTransitions().contains(this.getECRFFieldStatusTypeDao().getValidationFailed())) {
        newEcrfFieldStatusEntry.setStatusId(this.getECRFFieldStatusTypeDao().getValidationFailed().getId());
        newEcrfFieldStatusEntry.setComment(scriptException.getMessage());
      }
 else {
        continue;
      }
    }
 else     if ((indexErrorMap=validationErrorMap.get(ecrfField.getId())) != null && (msg=indexErrorMap.get(index)) != null) {
      ECRFFieldStatusEntry lastStatus=this.getECRFFieldStatusEntryDao().findLastStatus(ECRFFieldStatusQueue.VALIDATION,listEntry.getId(),ecrfField.getId(),index);
      if (lastStatus == null || lastStatus.getStatus().getTransitions().contains(this.getECRFFieldStatusTypeDao().getValidationError())) {
        newEcrfFieldStatusEntry.setStatusId(this.getECRFFieldStatusTypeDao().getValidationError().getId());
        newEcrfFieldStatusEntry.setComment(msg.getOutput());
      }
 else {
        continue;
      }
    }
 else {
      ECRFFieldStatusEntry lastStatus=this.getECRFFieldStatusEntryDao().findLastStatus(ECRFFieldStatusQueue.VALIDATION,listEntry.getId(),ecrfField.getId(),index);
      if (lastStatus != null && lastStatus.getStatus().getTransitions().contains(this.getECRFFieldStatusTypeDao().getValidationSuccess())) {
        newEcrfFieldStatusEntry.setStatusId(this.getECRFFieldStatusTypeDao().getValidationSuccess().getId());
      }
 else {
        continue;
      }
    }
    addEcrfFieldStatusEntry(newEcrfFieldStatusEntry,ECRFFieldStatusQueue.VALIDATION,now,user,false,false,true);
  }
  statusEntry.setValidationTimestamp(now);
  if (scriptException != null) {
    statusEntry.setValidationStatus(ECRFValidationStatus.FAILED);
    statusEntry.setValidationResponseMsg(L10nUtil.getMessage(Locales.NOTIFICATION,MessageCodes.ECRF_VALIDATION_FAILED_RESPONSE,DefaultMessages.ECRF_VALIDATION_FAILED_RESPONSE,scriptException.getMessage()));
  }
 else   if (errorCount > 0) {
    statusEntry.setValidationStatus(ECRFValidationStatus.OK);
    statusEntry.setValidationResponseMsg(L10nUtil.getMessage(Locales.NOTIFICATION,MessageCodes.ECRF_VALIDATION_OK_ERRORS_RESPONSE,DefaultMessages.ECRF_VALIDATION_OK_ERRORS_RESPONSE,errorCount));
  }
 else {
    statusEntry.setValidationStatus(ECRFValidationStatus.OK);
    statusEntry.setValidationResponseMsg(L10nUtil.getMessage(Locales.NOTIFICATION,MessageCodes.ECRF_VALIDATION_OK_NO_ERROR_RESPONSE,DefaultMessages.ECRF_VALIDATION_OK_NO_ERROR_RESPONSE));
  }
  this.getECRFStatusEntryDao().update(statusEntry);
  return errorCount;
}","private int addValidationEcrfFieldStatusEntries(ECRFStatusEntry statusEntry,boolean addSeries,Timestamp now,User user) throws Exception {
  ProbandListEntry listEntry=statusEntry.getListEntry();
  ECRF ecrf=statusEntry.getEcrf();
  ProbandListEntryOutVO listEntryVO=this.getProbandListEntryDao().toProbandListEntryOutVO(listEntry);
  if (!listEntryVO.getProband().getDecrypted()) {
    throw L10nUtil.initServiceException(ServiceExceptionCodes.CANNOT_DECRYPT_PROBAND);
  }
  UserOutVO userVO=this.getUserDao().toUserOutVO(user);
  Collection visitScheduleItems=null;
  if (listEntry.getGroup() != null) {
    VisitScheduleItemDao visitScheduleItemDao=this.getVisitScheduleItemDao();
    visitScheduleItems=visitScheduleItemDao.findByTrialGroupVisitProbandTravel(listEntry.getTrial().getId(),listEntry.getGroup().getId(),null,listEntry.getProband().getId(),null,null);
    visitScheduleItemDao.toVisitScheduleItemOutVOCollection(visitScheduleItems);
  }
  InputFieldSelectionSetValueDao inputFieldSelectionSetValueDao=this.getInputFieldSelectionSetValueDao();
  ProbandListEntryTagValueDao probandListEntryTagValueDao=this.getProbandListEntryTagValueDao();
  Collection<ProbandListEntryTagValueJsonVO> probandListEntryTagValues=ServiceUtil.getProbandListEntryTagJsonValues(probandListEntryTagValueDao.findByListEntryJs(listEntryVO.getId(),true,null,null),false,probandListEntryTagValueDao,inputFieldSelectionSetValueDao);
  HashMap<String,Long> maxSeriesIndexMap=null;
  HashMap<String,Long> fieldMaxPositionMap=null;
  HashMap<String,Long> fieldMinPositionMap=null;
  HashMap<String,Set<ECRFField>> seriesEcrfFieldMap=null;
  ECRFFieldValueDao ecrfFieldValueDao=this.getECRFFieldValueDao();
  if (addSeries) {
    maxSeriesIndexMap=new HashMap<String,Long>();
    fieldMaxPositionMap=new HashMap<String,Long>();
    fieldMinPositionMap=new HashMap<String,Long>();
    seriesEcrfFieldMap=new HashMap<String,Set<ECRFField>>();
    ServiceUtil.initSeriesEcrfFieldMaps(this.getECRFFieldDao().findByTrialEcrfSeriesJs(null,ecrf.getId(),true,true,true,null),listEntryVO.getId(),ecrf.getId(),maxSeriesIndexMap,fieldMaxPositionMap,fieldMinPositionMap,seriesEcrfFieldMap,ecrfFieldValueDao);
  }
  Collection<ECRFFieldValueJsonVO> jsValues=ServiceUtil.getEcrfFieldJsonValues(ecrfFieldValueDao.findByListEntryEcrfJs(listEntry.getId(),ecrf.getId(),true,true,null),maxSeriesIndexMap,fieldMaxPositionMap,fieldMinPositionMap,seriesEcrfFieldMap,false,ecrfFieldValueDao,inputFieldSelectionSetValueDao);
  FieldCalculation fieldCalculation=new FieldCalculation();
  fieldCalculation.setProbandListEntry(listEntryVO);
  fieldCalculation.setActiveUser(userVO);
  fieldCalculation.setLocale(Locales.AUDIT_TRAIL);
  fieldCalculation.setProbandListEntryTagValues(probandListEntryTagValues);
  fieldCalculation.setVisitScheduleItems(visitScheduleItems);
  fieldCalculation.setECRFFieldInputFieldVariableValues(jsValues);
  Exception scriptException=null;
  int errorCount=0;
  HashMap<Long,HashMap<Long,ValidationError>> validationErrorMap=new HashMap<Long,HashMap<Long,ValidationError>>();
  try {
    Iterator<ValidationError> it=fieldCalculation.initInputFieldVariables().iterator();
    while (it.hasNext()) {
      ValidationError msg=it.next();
      if (validationErrorMap.containsKey(msg.getEcrfFieldId())) {
        validationErrorMap.get(msg.getEcrfFieldId()).put(msg.getIndex(),msg);
      }
 else {
        HashMap<Long,ValidationError> indexErrorMap=new HashMap<Long,ValidationError>();
        indexErrorMap.put(msg.getIndex(),msg);
        validationErrorMap.put(msg.getEcrfFieldId(),indexErrorMap);
      }
      errorCount++;
    }
  }
 catch (  Exception e) {
    scriptException=e;
  }
  Iterator<Map> ecrfFieldValuesIt=ecrfFieldValueDao.findByListEntryEcrfJs(listEntry.getId(),ecrf.getId(),true,null,null).iterator();
  while (ecrfFieldValuesIt.hasNext()) {
    Map<String,Object> entities=(Map<String,Object>)ecrfFieldValuesIt.next();
    ECRFFieldValue ecrfFieldValue=(ECRFFieldValue)entities.get(ServiceUtil.ECRF_FIELD_VALUE_DAO_ECRF_FIELD_VALUE_ALIAS);
    ECRFField ecrfField;
    Long index;
    if (ecrfFieldValue == null) {
      ecrfField=(ECRFField)entities.get(ServiceUtil.ECRF_FIELD_VALUE_DAO_ECRF_FIELD_ALIAS);
      index=(ecrfField.isSeries() ? 0l : null);
    }
 else {
      ecrfField=ecrfFieldValue.getEcrfField();
      index=ecrfFieldValue.getIndex();
    }
    ECRFFieldStatusEntryInVO newEcrfFieldStatusEntry=new ECRFFieldStatusEntryInVO();
    newEcrfFieldStatusEntry.setEcrfFieldId(ecrfField.getId());
    newEcrfFieldStatusEntry.setListEntryId(listEntry.getId());
    newEcrfFieldStatusEntry.setIndex(index);
    ValidationError msg;
    HashMap<Long,ValidationError> indexErrorMap;
    if (scriptException != null) {
      ECRFFieldStatusEntry lastStatus=this.getECRFFieldStatusEntryDao().findLastStatus(ECRFFieldStatusQueue.VALIDATION,listEntry.getId(),ecrfField.getId(),index);
      if (lastStatus == null || lastStatus.getStatus().getTransitions().contains(this.getECRFFieldStatusTypeDao().getValidationFailed())) {
        newEcrfFieldStatusEntry.setStatusId(this.getECRFFieldStatusTypeDao().getValidationFailed().getId());
        newEcrfFieldStatusEntry.setComment(scriptException.getMessage());
      }
 else {
        continue;
      }
    }
 else     if ((indexErrorMap=validationErrorMap.get(ecrfField.getId())) != null && (msg=indexErrorMap.get(index)) != null) {
      ECRFFieldStatusEntry lastStatus=this.getECRFFieldStatusEntryDao().findLastStatus(ECRFFieldStatusQueue.VALIDATION,listEntry.getId(),ecrfField.getId(),index);
      if (lastStatus == null || lastStatus.getStatus().getTransitions().contains(this.getECRFFieldStatusTypeDao().getValidationError())) {
        newEcrfFieldStatusEntry.setStatusId(this.getECRFFieldStatusTypeDao().getValidationError().getId());
        newEcrfFieldStatusEntry.setComment(msg.getOutput());
      }
 else {
        continue;
      }
    }
 else {
      ECRFFieldStatusEntry lastStatus=this.getECRFFieldStatusEntryDao().findLastStatus(ECRFFieldStatusQueue.VALIDATION,listEntry.getId(),ecrfField.getId(),index);
      if (lastStatus != null && lastStatus.getStatus().getTransitions().contains(this.getECRFFieldStatusTypeDao().getValidationSuccess())) {
        newEcrfFieldStatusEntry.setStatusId(this.getECRFFieldStatusTypeDao().getValidationSuccess().getId());
      }
 else {
        continue;
      }
    }
    addEcrfFieldStatusEntry(newEcrfFieldStatusEntry,ECRFFieldStatusQueue.VALIDATION,now,user,false,false,true);
  }
  statusEntry.setValidationTimestamp(now);
  if (scriptException != null) {
    statusEntry.setValidationStatus(ECRFValidationStatus.FAILED);
    statusEntry.setValidationResponseMsg(L10nUtil.getMessage(Locales.NOTIFICATION,MessageCodes.ECRF_VALIDATION_FAILED_RESPONSE,DefaultMessages.ECRF_VALIDATION_FAILED_RESPONSE,scriptException.getMessage()));
  }
 else   if (errorCount > 0) {
    statusEntry.setValidationStatus(ECRFValidationStatus.OK);
    statusEntry.setValidationResponseMsg(L10nUtil.getMessage(Locales.NOTIFICATION,MessageCodes.ECRF_VALIDATION_OK_ERRORS_RESPONSE,DefaultMessages.ECRF_VALIDATION_OK_ERRORS_RESPONSE,errorCount));
  }
 else {
    statusEntry.setValidationStatus(ECRFValidationStatus.OK);
    statusEntry.setValidationResponseMsg(L10nUtil.getMessage(Locales.NOTIFICATION,MessageCodes.ECRF_VALIDATION_OK_NO_ERROR_RESPONSE,DefaultMessages.ECRF_VALIDATION_OK_NO_ERROR_RESPONSE));
  }
  this.getECRFStatusEntryDao().update(statusEntry);
  return errorCount;
}"
39084,"@Override public String registerAgent(String toolName,String agentVersion,String osversion,String configDetails,String trackingDetails) throws InsightsCustomException {
  try {
    String agentId=getAgentkey(toolName);
    Gson gson=new Gson();
    JsonElement jelement=gson.fromJson(configDetails.trim(),JsonElement.class);
    JsonObject json=jelement.getAsJsonObject();
    json.addProperty(""String_Node_Str"",agentId);
    json.addProperty(""String_Node_Str"",osversion);
    json.addProperty(""String_Node_Str"",agentVersion);
    boolean isDataUpdateSupported=false;
    if (json.get(ISDATESUPPORTED) != null && !json.get(ISDATESUPPORTED).isJsonNull()) {
      isDataUpdateSupported=json.get(ISDATESUPPORTED).getAsBoolean();
    }
    String uniqueKey=agentId;
    Date updateDate=Timestamp.valueOf(LocalDateTime.now());
    if (!trackingDetails.isEmpty()) {
      JsonElement trackingJsonElement=gson.fromJson(trackingDetails.trim(),JsonElement.class);
      JsonObject trackingDetailsJson=trackingJsonElement.getAsJsonObject();
      updateTrackingJson(toolName,trackingDetailsJson);
    }
    Path agentZipPath=updateAgentConfig(toolName,json);
    byte[] data=Files.readAllBytes(agentZipPath);
    String fileName=toolName + FILETYPE;
    sendAgentPackage(data,AGENTACTION.REGISTER.name(),fileName,agentId,toolName,osversion);
    performAgentAction(agentId,AGENTACTION.START.name());
    if (!trackingDetails.isEmpty()) {
      deleteTrackingJson(toolName);
    }
    AgentConfigDAL agentConfigDAL=new AgentConfigDAL();
    agentConfigDAL.saveAgentConfigFromUI(agentId,json.get(""String_Node_Str"").getAsString(),toolName,json,isDataUpdateSupported,uniqueKey,agentVersion,osversion,updateDate);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + toolName,e);
    throw new InsightsCustomException(e.toString());
  }
  return SUCCESS;
}","@Override public String registerAgent(String toolName,String agentVersion,String osversion,String configDetails,String trackingDetails) throws InsightsCustomException {
  try {
    String agentId=getAgentkey(toolName);
    Gson gson=new Gson();
    JsonElement jelement=gson.fromJson(configDetails.trim(),JsonElement.class);
    JsonObject json=jelement.getAsJsonObject();
    json.addProperty(""String_Node_Str"",agentId);
    json.addProperty(""String_Node_Str"",osversion);
    json.addProperty(""String_Node_Str"",agentVersion);
    json.get(""String_Node_Str"").getAsJsonObject().addProperty(""String_Node_Str"",agentId);
    boolean isDataUpdateSupported=false;
    if (json.get(ISDATESUPPORTED) != null && !json.get(ISDATESUPPORTED).isJsonNull()) {
      isDataUpdateSupported=json.get(ISDATESUPPORTED).getAsBoolean();
    }
    String uniqueKey=agentId;
    Date updateDate=Timestamp.valueOf(LocalDateTime.now());
    if (!trackingDetails.isEmpty()) {
      JsonElement trackingJsonElement=gson.fromJson(trackingDetails.trim(),JsonElement.class);
      JsonObject trackingDetailsJson=trackingJsonElement.getAsJsonObject();
      updateTrackingJson(toolName,trackingDetailsJson);
    }
    Path agentZipPath=updateAgentConfig(toolName,json);
    byte[] data=Files.readAllBytes(agentZipPath);
    String fileName=toolName + FILETYPE;
    sendAgentPackage(data,AGENTACTION.REGISTER.name(),fileName,agentId,toolName,osversion);
    performAgentAction(agentId,AGENTACTION.START.name());
    if (!trackingDetails.isEmpty()) {
      deleteTrackingJson(toolName);
    }
    AgentConfigDAL agentConfigDAL=new AgentConfigDAL();
    agentConfigDAL.saveAgentConfigFromUI(agentId,json.get(""String_Node_Str"").getAsString(),toolName,json,isDataUpdateSupported,uniqueKey,agentVersion,osversion,updateDate);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + toolName,e);
    throw new InsightsCustomException(e.toString());
  }
  return SUCCESS;
}"
39085,"private static void updateDashboards(){
  List<String> availableDashboards=getFilesFromDir(""String_Node_Str"");
  if (availableDashboards.isEmpty()) {
    log.info(""String_Node_Str"");
    return;
  }
  String grafanaBaseUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint();
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",buildAuthenticationHeader());
  switchOrg(grafanaBaseUrl,headers);
  JsonArray dashboardArray=loadDashboards(grafanaBaseUrl,headers);
  if (dashboardArray.size() > 0) {
    log.info(""String_Node_Str"");
    return;
  }
  String apiUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint() + ""String_Node_Str"";
  JsonObject requestJson=null;
  JsonArray inputs=null;
  JsonObject jsonResponse=null;
  for (  String dashboard : availableDashboards) {
    JsonObject dashboardJson=loadJsonFile(""String_Node_Str"" + dashboard);
    requestJson=getNewJsonObject();
    requestJson.add(""String_Node_Str"",dashboardJson);
    requestJson.addProperty(""String_Node_Str"",true);
    inputs=getNewJsonArray();
    inputs.add(buildDSInput(NEO4J_DS,""String_Node_Str""));
    inputs.add(buildDSInput(ElaticSearch_DS,""String_Node_Str""));
    requestJson.add(""String_Node_Str"",inputs);
    ClientResponse response=RestHandler.doPost(apiUrl,requestJson,headers);
    jsonResponse=getNewJsonParser().parse(response.getEntity(String.class)).getAsJsonObject();
    if (jsonResponse.get(""String_Node_Str"").getAsBoolean()) {
      log.info(""String_Node_Str"" + dashboard);
    }
 else {
      log.warn(""String_Node_Str"" + jsonResponse.toString());
    }
  }
}","private static void updateDashboards(){
  List<String> availableDashboards=getFilesFromDir(""String_Node_Str"");
  if (availableDashboards.isEmpty()) {
    log.info(""String_Node_Str"");
    return;
  }
  String grafanaBaseUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint();
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",buildAuthenticationHeader());
  switchOrg(grafanaBaseUrl,headers);
  JsonArray dashboardArray=loadDashboards(grafanaBaseUrl,headers);
  if (dashboardArray.size() > 0) {
    log.info(""String_Node_Str"");
    return;
  }
  String apiUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint() + ""String_Node_Str"";
  JsonObject requestJson=null;
  JsonArray inputs=null;
  JsonObject jsonResponse=null;
  for (  String dashboard : availableDashboards) {
    JsonObject dashboardJson=loadJsonFile(""String_Node_Str"" + dashboard);
    requestJson=getNewJsonObject();
    requestJson.add(""String_Node_Str"",dashboardJson);
    requestJson.addProperty(""String_Node_Str"",true);
    inputs=getNewJsonArray();
    inputs.add(buildDSInput(NEO4J_DS,""String_Node_Str""));
    inputs.add(buildDSInput(ElaticSearch_DS,""String_Node_Str""));
    requestJson.add(""String_Node_Str"",inputs);
    ClientResponse response=RestHandler.doPost(apiUrl,requestJson,headers);
    jsonResponse=getNewJsonParser().parse(response.getEntity(String.class)).getAsJsonObject();
  }
}"
39086,"public static UserDetails getUserDetails(HttpServletRequest httpRequest){
  log.debug(""String_Node_Str"");
  ApplicationConfigProvider.performSystemCheck();
  String authHeader=httpRequest.getHeader(""String_Node_Str"");
  Cookie[] requestCookies=httpRequest.getCookies();
  log.debug(""String_Node_Str"" + requestCookies);
  Map<String,String> grafanaResponseCookies=new HashMap<String,String>();
  Map<String,String> cookieMap=new HashMap<String,String>();
  if (requestCookies != null) {
    for (    Cookie cookie : requestCookies) {
      cookieMap.put(cookie.getName(),cookie.getValue());
    }
  }
  log.debug(""String_Node_Str"" + cookieMap);
  String userName=null;
  String credential=null;
  try {
    String decodedAuthHeader=new String(Base64.getDecoder().decode(authHeader.split(""String_Node_Str"")[1]),""String_Node_Str"");
    String[] authTokens=decodedAuthHeader.split(""String_Node_Str"");
    userName=authTokens[0];
    credential=authTokens[1];
    String grafanaUser=cookieMap.get(""String_Node_Str"");
    log.debug(""String_Node_Str"" + userName);
    log.debug(""String_Node_Str"" + grafanaUser);
    if (userName.equals(grafanaUser)) {
      log.debug(""String_Node_Str"");
      grafanaResponseCookies.putAll(cookieMap);
      log.debug(""String_Node_Str"" + grafanaResponseCookies);
      if ((grafanaResponseCookies.get(""String_Node_Str"") == null || grafanaResponseCookies.get(""String_Node_Str"").isEmpty()) && (grafanaResponseCookies.get(""String_Node_Str"") == null || grafanaResponseCookies.get(""String_Node_Str"").isEmpty())) {
        log.debug(""String_Node_Str"");
        Map<String,String> headers=new HashMap<String,String>();
        StringBuffer grafanaCookie=new StringBuffer();
        for (        Map.Entry<String,String> cookie : grafanaResponseCookies.entrySet()) {
          grafanaCookie.append(cookie.getKey()).append(""String_Node_Str"").append(cookie.getValue()).append(""String_Node_Str"");
        }
        headers.put(""String_Node_Str"",grafanaCookie.toString());
        String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
        grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
        String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
        grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
        log.debug(""String_Node_Str"" + grafanaResponseCookies);
      }
    }
 else {
      log.debug(""String_Node_Str"");
      List<NewCookie> cookies=getValidGrafanaSession(authTokens[0],authTokens[1]);
      log.debug(""String_Node_Str"" + cookies);
      StringBuffer grafanaCookie=new StringBuffer();
      for (      NewCookie cookie : cookies) {
        grafanaResponseCookies.put(cookie.getName(),cookie.getValue());
        grafanaCookie.append(cookie.getName()).append(""String_Node_Str"").append(cookie.getValue()).append(""String_Node_Str"");
      }
      Map<String,String> headers=new HashMap<String,String>();
      headers.put(""String_Node_Str"",grafanaCookie.toString());
      String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
      grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
      String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
      grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
      log.debug(""String_Node_Str"" + grafanaResponseCookies);
    }
    List<GrantedAuthority> mappedAuthorities=new ArrayList<GrantedAuthority>();
    String grafanaRole=grafanaResponseCookies.get(""String_Node_Str"");
    if (grafanaRole == null || grafanaRole.trim().length() == 0) {
      log.debug(""String_Node_Str"");
      mappedAuthorities.add(SpringAuthority.valueOf(""String_Node_Str""));
    }
 else {
      mappedAuthorities.add(SpringAuthorityUtil.getSpringAuthorityRole(grafanaRole));
    }
    httpRequest.setAttribute(""String_Node_Str"",grafanaResponseCookies);
    if (ApplicationConfigProvider.getInstance().isEnableNativeUsers()) {
      return new User(userName,credential,true,true,true,true,mappedAuthorities);
    }
 else {
      return new User(userName,""String_Node_Str"",true,true,true,true,mappedAuthorities);
    }
  }
 catch (  Exception e) {
    log.error(e);
  }
  log.debug(""String_Node_Str"");
  return null;
}","public static UserDetails getUserDetails(HttpServletRequest httpRequest){
  log.debug(""String_Node_Str"");
  ApplicationConfigProvider.performSystemCheck();
  String authHeader=httpRequest.getHeader(""String_Node_Str"");
  Cookie[] requestCookies=httpRequest.getCookies();
  log.debug(""String_Node_Str"" + requestCookies);
  Map<String,String> grafanaResponseCookies=new HashMap<String,String>();
  Map<String,String> cookieMap=new HashMap<String,String>();
  if (requestCookies != null) {
    for (    Cookie cookie : requestCookies) {
      cookieMap.put(cookie.getName(),cookie.getValue());
    }
  }
  log.debug(""String_Node_Str"" + cookieMap);
  String userName=null;
  String credential=null;
  try {
    String decodedAuthHeader=new String(Base64.getDecoder().decode(authHeader.split(""String_Node_Str"")[1]),""String_Node_Str"");
    String[] authTokens=decodedAuthHeader.split(""String_Node_Str"");
    userName=authTokens[0];
    credential=authTokens[1];
    String grafanaUser=cookieMap.get(""String_Node_Str"");
    String grafanaSession=cookieMap.get(""String_Node_Str"");
    log.debug(""String_Node_Str"" + userName);
    log.debug(""String_Node_Str"" + grafanaUser);
    if (userName.equals(grafanaUser) && grafanaSession != null) {
      log.debug(""String_Node_Str"");
      grafanaResponseCookies.putAll(cookieMap);
      log.debug(""String_Node_Str"" + grafanaResponseCookies);
      if ((grafanaResponseCookies.get(""String_Node_Str"") == null || grafanaResponseCookies.get(""String_Node_Str"").isEmpty()) && (grafanaResponseCookies.get(""String_Node_Str"") == null || grafanaResponseCookies.get(""String_Node_Str"").isEmpty())) {
        log.debug(""String_Node_Str"");
        Map<String,String> headers=new HashMap<String,String>();
        StringBuffer grafanaCookie=new StringBuffer();
        for (        Map.Entry<String,String> cookie : grafanaResponseCookies.entrySet()) {
          grafanaCookie.append(cookie.getKey()).append(""String_Node_Str"").append(cookie.getValue()).append(""String_Node_Str"");
        }
        headers.put(""String_Node_Str"",grafanaCookie.toString());
        String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
        grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
        String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
        grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
        log.debug(""String_Node_Str"" + grafanaResponseCookies);
      }
    }
 else {
      log.debug(""String_Node_Str"");
      List<NewCookie> cookies=getValidGrafanaSession(authTokens[0],authTokens[1]);
      log.debug(""String_Node_Str"" + cookies);
      StringBuffer grafanaCookie=new StringBuffer();
      for (      NewCookie cookie : cookies) {
        grafanaResponseCookies.put(cookie.getName(),cookie.getValue());
        grafanaCookie.append(cookie.getName()).append(""String_Node_Str"").append(cookie.getValue()).append(""String_Node_Str"");
      }
      Map<String,String> headers=new HashMap<String,String>();
      headers.put(""String_Node_Str"",grafanaCookie.toString());
      String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
      grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
      String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
      grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
      log.debug(""String_Node_Str"" + grafanaResponseCookies);
    }
    List<GrantedAuthority> mappedAuthorities=new ArrayList<GrantedAuthority>();
    String grafanaRole=grafanaResponseCookies.get(""String_Node_Str"");
    if (grafanaRole == null || grafanaRole.trim().length() == 0) {
      log.debug(""String_Node_Str"");
      mappedAuthorities.add(SpringAuthority.valueOf(""String_Node_Str""));
    }
 else {
      mappedAuthorities.add(SpringAuthorityUtil.getSpringAuthorityRole(grafanaRole));
    }
    httpRequest.setAttribute(""String_Node_Str"",grafanaResponseCookies);
    if (ApplicationConfigProvider.getInstance().isEnableNativeUsers()) {
      return new User(userName,credential,true,true,true,true,mappedAuthorities);
    }
 else {
      return new User(userName,""String_Node_Str"",true,true,true,true,mappedAuthorities);
    }
  }
 catch (  Exception e) {
    log.error(e);
  }
  log.debug(""String_Node_Str"");
  return null;
}"
39087,"public int executeOfflineProcessing(){
  File queryFolderPath=new File(ConfigOptions.OFFLINE_DATA_PROCESSING_RESOLVED_PATH);
  File[] files=queryFolderPath.listFiles();
  int jsonFileCount=0;
  for (  File eachFile : files) {
    if (eachFile.isFile()) {
      String fileName=eachFile.getName();
      if (hasJsonFileExtension(fileName)) {
        jsonFileCount++;
        processOfflineConfiguration(eachFile);
      }
    }
  }
  return jsonFileCount;
}","public int executeOfflineProcessing(){
  File queryFolderPath=new File(ConfigOptions.OFFLINE_DATA_PROCESSING_RESOLVED_PATH);
  File[] files=queryFolderPath.listFiles();
  int jsonFileCount=0;
  if (files != null) {
    for (    File eachFile : files) {
      if (eachFile.isFile()) {
        String fileName=eachFile.getName();
        if (hasJsonFileExtension(fileName)) {
          jsonFileCount++;
          processOfflineConfiguration(eachFile);
        }
      }
    }
  }
  return jsonFileCount;
}"
39088,"private static void updateDashboards(){
  List<String> availableDashboards=getFilesFromDir(""String_Node_Str"");
  if (availableDashboards.isEmpty()) {
    log.info(""String_Node_Str"");
    return;
  }
  String grafanaBaseUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint();
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",buildAuthenticationHeader());
  switchOrg(grafanaBaseUrl,headers);
  JsonArray dashboardArray=loadDashboards(grafanaBaseUrl,headers);
  if (dashboardArray.size() > 0) {
    log.info(""String_Node_Str"");
    return;
  }
  String apiUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint() + ""String_Node_Str"";
  JsonObject requestJson=null;
  JsonArray inputs=null;
  JsonObject jsonResponse=null;
  for (  String dashboard : availableDashboards) {
    JsonObject dashboardJson=loadJsonFile(""String_Node_Str"" + dashboard);
    requestJson=getNewJsonObject();
    requestJson.add(""String_Node_Str"",dashboardJson);
    requestJson.addProperty(""String_Node_Str"",true);
    inputs=getNewJsonArray();
    inputs.add(buildDSInput(NEO4J_DS,""String_Node_Str""));
    inputs.add(buildDSInput(ElaticSearch_DS,""String_Node_Str""));
    requestJson.add(""String_Node_Str"",inputs);
    ClientResponse response=RestHandler.doPost(apiUrl,requestJson,headers);
    jsonResponse=getNewJsonParser().parse(response.getEntity(String.class)).getAsJsonObject();
    if (jsonResponse.get(""String_Node_Str"").getAsBoolean()) {
      log.info(""String_Node_Str"" + dashboard);
    }
 else {
      log.warn(""String_Node_Str"" + jsonResponse.toString());
    }
  }
}","private static void updateDashboards(){
  List<String> availableDashboards=getFilesFromDir(""String_Node_Str"");
  if (availableDashboards.isEmpty()) {
    log.info(""String_Node_Str"");
    return;
  }
  String grafanaBaseUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint();
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",buildAuthenticationHeader());
  switchOrg(grafanaBaseUrl,headers);
  JsonArray dashboardArray=loadDashboards(grafanaBaseUrl,headers);
  if (dashboardArray.size() > 0) {
    log.info(""String_Node_Str"");
    return;
  }
  String apiUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint() + ""String_Node_Str"";
  JsonObject requestJson=null;
  JsonArray inputs=null;
  JsonObject jsonResponse=null;
  for (  String dashboard : availableDashboards) {
    JsonObject dashboardJson=loadJsonFile(""String_Node_Str"" + dashboard);
    requestJson=getNewJsonObject();
    requestJson.add(""String_Node_Str"",dashboardJson);
    requestJson.addProperty(""String_Node_Str"",true);
    inputs=getNewJsonArray();
    inputs.add(buildDSInput(NEO4J_DS,""String_Node_Str""));
    inputs.add(buildDSInput(ElaticSearch_DS,""String_Node_Str""));
    requestJson.add(""String_Node_Str"",inputs);
    ClientResponse response=RestHandler.doPost(apiUrl,requestJson,headers);
    jsonResponse=getNewJsonParser().parse(response.getEntity(String.class)).getAsJsonObject();
  }
}"
39089,"public static UserDetails getUserDetails(HttpServletRequest httpRequest){
  log.debug(""String_Node_Str"");
  ApplicationConfigProvider.performSystemCheck();
  String authHeader=httpRequest.getHeader(""String_Node_Str"");
  Cookie[] requestCookies=httpRequest.getCookies();
  log.debug(""String_Node_Str"" + requestCookies);
  Map<String,String> grafanaResponseCookies=new HashMap<String,String>();
  Map<String,String> cookieMap=new HashMap<String,String>();
  if (requestCookies != null) {
    for (    Cookie cookie : requestCookies) {
      cookieMap.put(cookie.getName(),cookie.getValue());
    }
  }
  log.debug(""String_Node_Str"" + cookieMap);
  String userName=null;
  String credential=null;
  try {
    String decodedAuthHeader=new String(Base64.getDecoder().decode(authHeader.split(""String_Node_Str"")[1]),""String_Node_Str"");
    String[] authTokens=decodedAuthHeader.split(""String_Node_Str"");
    userName=authTokens[0];
    credential=authTokens[1];
    String grafanaUser=cookieMap.get(""String_Node_Str"");
    log.debug(""String_Node_Str"" + userName);
    log.debug(""String_Node_Str"" + grafanaUser);
    if (userName.equals(grafanaUser)) {
      log.debug(""String_Node_Str"");
      grafanaResponseCookies.putAll(cookieMap);
      log.debug(""String_Node_Str"" + grafanaResponseCookies);
      if ((grafanaResponseCookies.get(""String_Node_Str"") == null || grafanaResponseCookies.get(""String_Node_Str"").isEmpty()) && (grafanaResponseCookies.get(""String_Node_Str"") == null || grafanaResponseCookies.get(""String_Node_Str"").isEmpty())) {
        log.debug(""String_Node_Str"");
        Map<String,String> headers=new HashMap<String,String>();
        StringBuffer grafanaCookie=new StringBuffer();
        for (        Map.Entry<String,String> cookie : grafanaResponseCookies.entrySet()) {
          grafanaCookie.append(cookie.getKey()).append(""String_Node_Str"").append(cookie.getValue()).append(""String_Node_Str"");
        }
        headers.put(""String_Node_Str"",grafanaCookie.toString());
        String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
        grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
        String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
        grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
        log.debug(""String_Node_Str"" + grafanaResponseCookies);
      }
    }
 else {
      log.debug(""String_Node_Str"");
      List<NewCookie> cookies=getValidGrafanaSession(authTokens[0],authTokens[1]);
      log.debug(""String_Node_Str"" + cookies);
      StringBuffer grafanaCookie=new StringBuffer();
      for (      NewCookie cookie : cookies) {
        grafanaResponseCookies.put(cookie.getName(),cookie.getValue());
        grafanaCookie.append(cookie.getName()).append(""String_Node_Str"").append(cookie.getValue()).append(""String_Node_Str"");
      }
      Map<String,String> headers=new HashMap<String,String>();
      headers.put(""String_Node_Str"",grafanaCookie.toString());
      String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
      grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
      String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
      grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
      log.debug(""String_Node_Str"" + grafanaResponseCookies);
    }
    List<GrantedAuthority> mappedAuthorities=new ArrayList<GrantedAuthority>();
    String grafanaRole=grafanaResponseCookies.get(""String_Node_Str"");
    if (grafanaRole == null || grafanaRole.trim().length() == 0) {
      log.debug(""String_Node_Str"");
      mappedAuthorities.add(SpringAuthority.valueOf(""String_Node_Str""));
    }
 else {
      mappedAuthorities.add(SpringAuthorityUtil.getSpringAuthorityRole(grafanaRole));
    }
    httpRequest.setAttribute(""String_Node_Str"",grafanaResponseCookies);
    if (ApplicationConfigProvider.getInstance().isEnableNativeUsers()) {
      return new User(userName,credential,true,true,true,true,mappedAuthorities);
    }
 else {
      return new User(userName,""String_Node_Str"",true,true,true,true,mappedAuthorities);
    }
  }
 catch (  Exception e) {
    log.error(e);
  }
  log.debug(""String_Node_Str"");
  return null;
}","public static UserDetails getUserDetails(HttpServletRequest httpRequest){
  log.debug(""String_Node_Str"");
  ApplicationConfigProvider.performSystemCheck();
  String authHeader=httpRequest.getHeader(""String_Node_Str"");
  Cookie[] requestCookies=httpRequest.getCookies();
  log.debug(""String_Node_Str"" + requestCookies);
  Map<String,String> grafanaResponseCookies=new HashMap<String,String>();
  Map<String,String> cookieMap=new HashMap<String,String>();
  if (requestCookies != null) {
    for (    Cookie cookie : requestCookies) {
      cookieMap.put(cookie.getName(),cookie.getValue());
    }
  }
  log.debug(""String_Node_Str"" + cookieMap);
  String userName=null;
  String credential=null;
  try {
    String decodedAuthHeader=new String(Base64.getDecoder().decode(authHeader.split(""String_Node_Str"")[1]),""String_Node_Str"");
    String[] authTokens=decodedAuthHeader.split(""String_Node_Str"");
    userName=authTokens[0];
    credential=authTokens[1];
    String grafanaUser=cookieMap.get(""String_Node_Str"");
    String grafanaSession=cookieMap.get(""String_Node_Str"");
    log.debug(""String_Node_Str"" + userName);
    log.debug(""String_Node_Str"" + grafanaUser);
    if (userName.equals(grafanaUser) && grafanaSession != null) {
      log.debug(""String_Node_Str"");
      grafanaResponseCookies.putAll(cookieMap);
      log.debug(""String_Node_Str"" + grafanaResponseCookies);
      if ((grafanaResponseCookies.get(""String_Node_Str"") == null || grafanaResponseCookies.get(""String_Node_Str"").isEmpty()) && (grafanaResponseCookies.get(""String_Node_Str"") == null || grafanaResponseCookies.get(""String_Node_Str"").isEmpty())) {
        log.debug(""String_Node_Str"");
        Map<String,String> headers=new HashMap<String,String>();
        StringBuffer grafanaCookie=new StringBuffer();
        for (        Map.Entry<String,String> cookie : grafanaResponseCookies.entrySet()) {
          grafanaCookie.append(cookie.getKey()).append(""String_Node_Str"").append(cookie.getValue()).append(""String_Node_Str"");
        }
        headers.put(""String_Node_Str"",grafanaCookie.toString());
        String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
        grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
        String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
        grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
        log.debug(""String_Node_Str"" + grafanaResponseCookies);
      }
    }
 else {
      log.debug(""String_Node_Str"");
      List<NewCookie> cookies=getValidGrafanaSession(authTokens[0],authTokens[1]);
      log.debug(""String_Node_Str"" + cookies);
      StringBuffer grafanaCookie=new StringBuffer();
      for (      NewCookie cookie : cookies) {
        grafanaResponseCookies.put(cookie.getName(),cookie.getValue());
        grafanaCookie.append(cookie.getName()).append(""String_Node_Str"").append(cookie.getValue()).append(""String_Node_Str"");
      }
      Map<String,String> headers=new HashMap<String,String>();
      headers.put(""String_Node_Str"",grafanaCookie.toString());
      String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
      grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
      String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
      grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
      log.debug(""String_Node_Str"" + grafanaResponseCookies);
    }
    List<GrantedAuthority> mappedAuthorities=new ArrayList<GrantedAuthority>();
    String grafanaRole=grafanaResponseCookies.get(""String_Node_Str"");
    if (grafanaRole == null || grafanaRole.trim().length() == 0) {
      log.debug(""String_Node_Str"");
      mappedAuthorities.add(SpringAuthority.valueOf(""String_Node_Str""));
    }
 else {
      mappedAuthorities.add(SpringAuthorityUtil.getSpringAuthorityRole(grafanaRole));
    }
    httpRequest.setAttribute(""String_Node_Str"",grafanaResponseCookies);
    if (ApplicationConfigProvider.getInstance().isEnableNativeUsers()) {
      return new User(userName,credential,true,true,true,true,mappedAuthorities);
    }
 else {
      return new User(userName,""String_Node_Str"",true,true,true,true,mappedAuthorities);
    }
  }
 catch (  Exception e) {
    log.error(e);
  }
  log.debug(""String_Node_Str"");
  return null;
}"
39090,"@RequestMapping(value=""String_Node_Str"",headers=(""String_Node_Str""),method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_UTF8_VALUE,consumes=MediaType.MULTIPART_FORM_DATA_VALUE) public @ResponseBody JsonObject uploadHierarchyDetails(@RequestParam(""String_Node_Str"") MultipartFile file,@RequestParam String action){
  boolean status=false;
  if (null != action && action.equals(""String_Node_Str"")) {
    status=DataProcessorUtil.getInstance().createBusinessHierarchyMetaData(file);
  }
 else   if (null != action && action.equals(""String_Node_Str"")) {
    status=DataProcessorUtil.getInstance().updateHiearchyProperty(file);
  }
  if (!status) {
    return PlatformServiceUtil.buildFailureResponse(ErrorMessage.DB_INSERTION_FAILED);
  }
  return PlatformServiceUtil.buildSuccessResponse();
}","@RequestMapping(value=""String_Node_Str"",headers=(""String_Node_Str""),method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_UTF8_VALUE,consumes=MediaType.MULTIPART_FORM_DATA_VALUE) public @ResponseBody JsonObject uploadHierarchyDetails(@RequestParam(""String_Node_Str"") MultipartFile file,@RequestParam String action){
  boolean status=false;
  try {
    if (null != action && action.equals(""String_Node_Str"")) {
      status=DataProcessorUtil.getInstance().createBusinessHierarchyMetaData(file);
    }
 else     if (null != action && action.equals(""String_Node_Str"")) {
      status=DataProcessorUtil.getInstance().updateHiearchyProperty(file);
    }
    if (!status) {
      return PlatformServiceUtil.buildFailureResponse(ErrorMessage.DB_INSERTION_FAILED);
    }
  }
 catch (  InsightsCustomException e) {
    return PlatformServiceUtil.buildFailureResponse(e.getMessage());
  }
  return PlatformServiceUtil.buildSuccessResponse();
}"
39091,"private JsonObject getHierachyDetails(CSVRecord record,Map<String,Integer> headerMap){
  JsonObject json=new JsonObject();
  for (  Map.Entry<String,Integer> header : headerMap.entrySet()) {
    if (header.getKey() != null && !DatataggingConstants.ACTION.equalsIgnoreCase(header.getKey())) {
      json.addProperty(header.getKey(),record.get(header.getValue()));
    }
  }
  return json;
}","private JsonObject getHierachyDetails(CSVRecord record,Map<String,Integer> headerMap){
  JsonObject json=new JsonObject();
  for (  Map.Entry<String,Integer> header : headerMap.entrySet()) {
    if (header.getKey() != null && !DatataggingConstants.ACTION.equalsIgnoreCase(header.getKey())) {
      if (DatataggingConstants.METADATA_ID.equalsIgnoreCase(header.getKey()) && (record.get(header.getValue()) != null && !record.get(header.getValue()).isEmpty())) {
        json.addProperty(header.getKey(),Integer.valueOf(record.get(header.getValue())));
      }
 else {
        json.addProperty(header.getKey(),record.get(header.getValue()));
      }
    }
  }
  return json;
}"
39092,"private Path updateAgentConfig(String toolName,JsonObject json) throws IOException {
  String filePath=ApplicationConfigProvider.getInstance().getAgentDetails().getUnzipPath();
  filePath=filePath + File.separator + toolName;
  File configFile=null;
  Path dir=Paths.get(filePath);
  try (Stream<Path> paths=Files.find(dir,Integer.MAX_VALUE,(path,attrs) -> attrs.isRegularFile() && path.toString().endsWith(""String_Node_Str""))){
    configFile=paths.limit(1).findFirst().get().toFile();
  }
   try (FileWriter file=new FileWriter(configFile)){
    file.write(json.toString());
    file.flush();
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    throw e;
  }
  Path sourceFolderPath=Paths.get(ApplicationConfigProvider.getInstance().getAgentDetails().getUnzipPath(),toolName);
  Path zipPath=Paths.get(ApplicationConfigProvider.getInstance().getAgentDetails().getUnzipPath(),toolName + ""String_Node_Str"");
  Path agentZipPath=null;
  try {
    agentZipPath=AgentManagementUtil.getInstance().getAgentZipFolder(sourceFolderPath,zipPath);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw e;
  }
  return agentZipPath;
}","private Path updateAgentConfig(String toolName,JsonObject json) throws IOException {
  String filePath=ApplicationConfigProvider.getInstance().getAgentDetails().getUnzipPath() + File.separator + toolName;
  File configFile=null;
  Path dir=Paths.get(filePath);
  try (Stream<Path> paths=Files.find(dir,Integer.MAX_VALUE,(path,attrs) -> attrs.isRegularFile() && path.toString().endsWith(""String_Node_Str""))){
    configFile=paths.limit(1).findFirst().get().toFile();
  }
   try (FileWriter file=new FileWriter(configFile)){
    file.write(json.toString());
    file.flush();
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    throw e;
  }
  Path sourceFolderPath=Paths.get(ApplicationConfigProvider.getInstance().getAgentDetails().getUnzipPath(),toolName);
  Path zipPath=Paths.get(ApplicationConfigProvider.getInstance().getAgentDetails().getUnzipPath(),toolName + ""String_Node_Str"");
  Path agentZipPath=null;
  try {
    agentZipPath=AgentManagementUtil.getInstance().getAgentZipFolder(sourceFolderPath,zipPath);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw e;
  }
  return agentZipPath;
}"
39093,"private String getOfflineToolRawConfigFile(String version,String tool) throws InsightsCustomException {
  String offlinePath=ApplicationConfigProvider.getInstance().getAgentDetails().getOfflineAgentPath();
  offlinePath=offlinePath + File.separator + version+ File.separator+ tool;
  Path dir=Paths.get(offlinePath);
  String config=null;
  try (Stream<Path> paths=Files.find(dir,Integer.MAX_VALUE,(path,attrs) -> attrs.isRegularFile() && path.toString().endsWith(""String_Node_Str""))){
    JsonParser parser=new JsonParser();
    Object obj=parser.parse(new FileReader(paths.limit(1).findFirst().get().toFile()));
    config=((JsonObject)obj).toString();
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
  return config;
}","private String getOfflineToolRawConfigFile(String version,String tool) throws InsightsCustomException {
  String offlinePath=ApplicationConfigProvider.getInstance().getAgentDetails().getOfflineAgentPath() + File.separator + version+ File.separator+ tool;
  String filePath=ApplicationConfigProvider.getInstance().getAgentDetails().getUnzipPath() + File.separator + tool;
  try {
    FileUtils.copyDirectory(new File(offlinePath),new File(filePath));
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    throw new InsightsCustomException(""String_Node_Str"" + e.getMessage());
  }
  Path dir=Paths.get(filePath);
  String config=null;
  try (Stream<Path> paths=Files.find(dir,Integer.MAX_VALUE,(path,attrs) -> attrs.isRegularFile() && path.toString().endsWith(""String_Node_Str""))){
    JsonParser parser=new JsonParser();
    Object obj=parser.parse(new FileReader(paths.limit(1).findFirst().get().toFile()));
    config=((JsonObject)obj).toString();
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    throw new InsightsCustomException(""String_Node_Str"" + e.getMessage());
  }
  return config;
}"
39094,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_UTF8_VALUE) public JsonObject getCurrentUserOrgs(){
  Map<String,String> headers=new HashMap<String,String>();
  String cookies=getUserCookies();
  headers.put(""String_Node_Str"",cookies);
  log.debug(""String_Node_Str"" + cookies);
  String apiUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint() + ""String_Node_Str"";
  ClientResponse response=RestHandler.doGet(apiUrl,null,headers);
  return PlatformServiceUtil.buildSuccessResponseWithData(new JsonParser().parse(response.getEntity(String.class)));
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_UTF8_VALUE) public JsonObject getCurrentUserOrgs(){
  log.debug(""String_Node_Str"");
  Map<String,String> headers=new HashMap<String,String>();
  String cookies=getUserCookies();
  headers.put(""String_Node_Str"",cookies);
  log.debug(""String_Node_Str"" + cookies);
  String apiUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint() + ""String_Node_Str"";
  ClientResponse response=RestHandler.doGet(apiUrl,null,headers);
  return PlatformServiceUtil.buildSuccessResponseWithData(new JsonParser().parse(response.getEntity(String.class)));
}"
39095,"private String getCurrentOrgRole(Map<String,String> headers,String grafanaCurrentOrg){
  String userOrgsApiUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint() + ""String_Node_Str"";
  ClientResponse grafanaCurrentOrgResponse=RestHandler.doGet(userOrgsApiUrl,null,headers);
  JsonArray grafanaOrgs=new JsonParser().parse(grafanaCurrentOrgResponse.getEntity(String.class)).getAsJsonArray();
  String grafanaCurrentOrgRole=null;
  for (  JsonElement org : grafanaOrgs) {
    if (grafanaCurrentOrg.equals(org.getAsJsonObject().get(""String_Node_Str"").toString())) {
      grafanaCurrentOrgRole=org.getAsJsonObject().get(""String_Node_Str"").getAsString();
      break;
    }
  }
  return grafanaCurrentOrgRole;
}","private String getCurrentOrgRole(Map<String,String> headers,String grafanaCurrentOrg){
  log.debug(""String_Node_Str"");
  String userOrgsApiUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint() + ""String_Node_Str"";
  log.debug(""String_Node_Str"" + userOrgsApiUrl);
  log.debug(""String_Node_Str"" + headers);
  ClientResponse grafanaCurrentOrgResponse=RestHandler.doGet(userOrgsApiUrl,null,headers);
  JsonArray grafanaOrgs=new JsonParser().parse(grafanaCurrentOrgResponse.getEntity(String.class)).getAsJsonArray();
  String grafanaCurrentOrgRole=null;
  for (  JsonElement org : grafanaOrgs) {
    if (grafanaCurrentOrg.equals(org.getAsJsonObject().get(""String_Node_Str"").toString())) {
      grafanaCurrentOrgRole=org.getAsJsonObject().get(""String_Node_Str"").getAsString();
      break;
    }
  }
  log.debug(""String_Node_Str"" + grafanaCurrentOrgRole + ""String_Node_Str"");
  return grafanaCurrentOrgRole;
}"
39096,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_UTF8_VALUE) public JsonObject getOrgs(){
  String apiUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint() + ""String_Node_Str"";
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",buildAuthenticationHeader());
  ClientResponse response=RestHandler.doGet(apiUrl,null,headers);
  return PlatformServiceUtil.buildSuccessResponseWithData(new JsonParser().parse(response.getEntity(String.class)));
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_UTF8_VALUE) public JsonObject getOrgs(){
  log.debug(""String_Node_Str"");
  String apiUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint() + ""String_Node_Str"";
  log.debug(""String_Node_Str"" + apiUrl);
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",buildAuthenticationHeader());
  ClientResponse response=RestHandler.doGet(apiUrl,null,headers);
  return PlatformServiceUtil.buildSuccessResponseWithData(new JsonParser().parse(response.getEntity(String.class)));
}"
39097,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_UTF8_VALUE) public JsonObject getUser(){
  String apiUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint() + ""String_Node_Str"";
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",getUserCookies());
  ClientResponse response=RestHandler.doGet(apiUrl,null,headers);
  return PlatformServiceUtil.buildSuccessResponseWithData(new JsonParser().parse(response.getEntity(String.class)));
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_UTF8_VALUE) public JsonObject getUser(){
  log.debug(""String_Node_Str"");
  String apiUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint() + ""String_Node_Str"";
  log.debug(""String_Node_Str"" + apiUrl);
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(""String_Node_Str"",getUserCookies());
  ClientResponse response=RestHandler.doGet(apiUrl,null,headers);
  log.debug(""String_Node_Str"" + headers + ""String_Node_Str"");
  return PlatformServiceUtil.buildSuccessResponseWithData(new JsonParser().parse(response.getEntity(String.class)));
}"
39098,"private String getUserCookies(){
  Map<String,String> cookieMap=(Map)httpRequest.getAttribute(""String_Node_Str"");
  if (cookieMap == null || cookieMap.get(""String_Node_Str"") == null) {
    Cookie[] cookies=httpRequest.getCookies();
    cookieMap=new HashMap<String,String>();
    if (cookies != null) {
      for (      Cookie cookie : cookies) {
        cookieMap.put(cookie.getName(),cookie.getValue());
      }
    }
    if (!cookieMap.containsKey(""String_Node_Str"")) {
      try {
        String authHeader=httpRequest.getHeader(""String_Node_Str"");
        String decodedAuthHeader=new String(Base64.getDecoder().decode(authHeader.split(""String_Node_Str"")[1]),""String_Node_Str"");
        String[] authTokens=decodedAuthHeader.split(""String_Node_Str"");
        JsonObject loginRequestParams=new JsonObject();
        loginRequestParams.addProperty(""String_Node_Str"",authTokens[0]);
        loginRequestParams.addProperty(""String_Node_Str"",authTokens[1]);
        String loginApiUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint() + ""String_Node_Str"";
        ClientResponse grafanaLoginResponse=RestHandler.doPost(loginApiUrl,loginRequestParams,null);
        List<NewCookie> cookies2=grafanaLoginResponse.getCookies();
        for (        NewCookie cookie : cookies2) {
          cookieMap.put(cookie.getName(),cookie.getValue());
        }
      }
 catch (      UnsupportedEncodingException e) {
        log.error(""String_Node_Str"",e);
      }
    }
  }
  StringBuffer grafanaCookies=new StringBuffer();
  for (  Map.Entry<String,String> entry : cookieMap.entrySet()) {
    grafanaCookies.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"");
  }
  return grafanaCookies.toString();
}","private String getUserCookies(){
  log.debug(""String_Node_Str"");
  Map<String,String> cookieMap=(Map)httpRequest.getAttribute(""String_Node_Str"");
  if (cookieMap == null || cookieMap.get(""String_Node_Str"") == null) {
    Cookie[] cookies=httpRequest.getCookies();
    cookieMap=new HashMap<String,String>();
    if (cookies != null) {
      for (      Cookie cookie : cookies) {
        cookieMap.put(cookie.getName(),cookie.getValue());
      }
    }
    if (!cookieMap.containsKey(""String_Node_Str"")) {
      try {
        String authHeader=httpRequest.getHeader(""String_Node_Str"");
        String decodedAuthHeader=new String(Base64.getDecoder().decode(authHeader.split(""String_Node_Str"")[1]),""String_Node_Str"");
        String[] authTokens=decodedAuthHeader.split(""String_Node_Str"");
        JsonObject loginRequestParams=new JsonObject();
        loginRequestParams.addProperty(""String_Node_Str"",authTokens[0]);
        loginRequestParams.addProperty(""String_Node_Str"",authTokens[1]);
        String loginApiUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint() + ""String_Node_Str"";
        log.debug(""String_Node_Str"" + loginApiUrl);
        ClientResponse grafanaLoginResponse=RestHandler.doPost(loginApiUrl,loginRequestParams,null);
        List<NewCookie> cookies2=grafanaLoginResponse.getCookies();
        for (        NewCookie cookie : cookies2) {
          cookieMap.put(cookie.getName(),cookie.getValue());
        }
      }
 catch (      UnsupportedEncodingException e) {
        log.error(""String_Node_Str"",e);
      }
    }
  }
  StringBuffer grafanaCookies=new StringBuffer();
  for (  Map.Entry<String,String> entry : cookieMap.entrySet()) {
    grafanaCookies.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(""String_Node_Str"");
  }
  log.debug(""String_Node_Str"" + grafanaCookies.toString() + ""String_Node_Str"");
  return grafanaCookies.toString();
}"
39099,"private String getGrafanaCurrentOrg(Map<String,String> headers){
  String loginApiUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint() + ""String_Node_Str"";
  ClientResponse grafanaCurrentOrgResponse=RestHandler.doGet(loginApiUrl,null,headers);
  JsonObject responseJson=new JsonParser().parse(grafanaCurrentOrgResponse.getEntity(String.class)).getAsJsonObject();
  String grafanaCurrentOrg=responseJson.get(""String_Node_Str"").toString();
  return grafanaCurrentOrg;
}","private String getGrafanaCurrentOrg(Map<String,String> headers){
  log.debug(""String_Node_Str"");
  String loginApiUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint() + ""String_Node_Str"";
  ClientResponse grafanaCurrentOrgResponse=RestHandler.doGet(loginApiUrl,null,headers);
  JsonObject responseJson=new JsonParser().parse(grafanaCurrentOrgResponse.getEntity(String.class)).getAsJsonObject();
  String grafanaCurrentOrg=responseJson.get(""String_Node_Str"").toString();
  log.debug(""String_Node_Str"" + grafanaCurrentOrg + ""String_Node_Str"");
  return grafanaCurrentOrg;
}"
39100,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_UTF8_VALUE) public JsonObject switchUserOrg(@RequestParam int orgId){
  Map<String,String> headers=new HashMap<String,String>();
  String grafanaCookie=getUserCookies();
  headers.put(""String_Node_Str"",grafanaCookie);
  Map<String,String> grafanaResponseCookies=new HashMap<String,String>();
  String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
  grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
  String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
  grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
  httpRequest.setAttribute(""String_Node_Str"",grafanaResponseCookies);
  Authentication auth=SecurityContextHolder.getContext().getAuthentication();
  List<GrantedAuthority> updatedAuthorities=new ArrayList<>(auth.getAuthorities());
  updatedAuthorities.add(SpringAuthorityUtil.getSpringAuthorityRole(grafanaCurrentOrgRole));
  Authentication newAuth=new UsernamePasswordAuthenticationToken(auth.getPrincipal(),auth.getCredentials(),updatedAuthorities);
  SecurityContextHolder.getContext().setAuthentication(newAuth);
  String apiUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint() + ""String_Node_Str"" + orgId;
  ClientResponse response=RestHandler.doPost(apiUrl,null,headers);
  return PlatformServiceUtil.buildSuccessResponseWithData(new JsonParser().parse(response.getEntity(String.class)));
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_UTF8_VALUE) public JsonObject switchUserOrg(@RequestParam int orgId){
  log.debug(""String_Node_Str"" + orgId);
  Map<String,String> headers=new HashMap<String,String>();
  String grafanaCookie=getUserCookies();
  headers.put(""String_Node_Str"",grafanaCookie);
  String apiUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint() + ""String_Node_Str"" + orgId;
  ClientResponse response=RestHandler.doPost(apiUrl,null,headers);
  log.debug(""String_Node_Str"" + apiUrl);
  log.debug(""String_Node_Str"" + headers);
  Map<String,String> grafanaResponseCookies=new HashMap<String,String>();
  String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
  grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
  String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
  grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
  httpRequest.setAttribute(""String_Node_Str"",grafanaResponseCookies);
  Authentication auth=SecurityContextHolder.getContext().getAuthentication();
  List<GrantedAuthority> updatedAuthorities=new ArrayList<>(auth.getAuthorities());
  updatedAuthorities.add(SpringAuthorityUtil.getSpringAuthorityRole(grafanaCurrentOrgRole));
  Authentication newAuth=new UsernamePasswordAuthenticationToken(auth.getPrincipal(),auth.getCredentials(),updatedAuthorities);
  SecurityContextHolder.getContext().setAuthentication(newAuth);
  return PlatformServiceUtil.buildSuccessResponseWithData(new JsonParser().parse(response.getEntity(String.class)));
}"
39101,"public void performDataPurging(){
  List<String> labelList=new ArrayList<>();
  String rowLimit=null;
  String backupFileLocation=null;
  long backupDurationInDays=0;
  String backupFileName=null;
  JsonObject configJsonObj=getSettingsJsonObject();
  if (configJsonObj != null) {
    JsonArray array=configJsonObj.get(""String_Node_Str"").getAsJsonArray();
    if (array != null) {
      for (int i=0; i < array.size(); i++) {
        labelList.add(array.get(i).getAsString());
      }
    }
    rowLimit=configJsonObj.get(ConfigOptions.ROW_LIMIT).getAsString();
    backupFileLocation=configJsonObj.get(ConfigOptions.BACKUP_FILE_LOCATION).getAsString();
    backupFileName=configJsonObj.get(ConfigOptions.BACKUP_FILE_NAME).getAsString();
    backupDurationInDays=configJsonObj.get(ConfigOptions.BACKUP_DURATION_IN_DAYS).getAsLong();
  }
  long epochTime=InsightsUtils.getTimeBeforeDays(backupDurationInDays);
  Neo4jDBHandler dbHandler=new Neo4jDBHandler();
  for (  String label : labelList) {
    int splitlength=0;
    boolean deleteFlag=true;
    try {
      int count=getNodeCount(dbHandler,label,epochTime);
      while (splitlength < count) {
        GraphResponse response=executeCypherQuery(label,rowLimit,splitlength,epochTime);
        String localDateTime=InsightsUtils.getLocalDateTime(""String_Node_Str"");
        String location=backupFileLocation + File.separator + backupFileName+ ""String_Node_Str""+ splitlength+ ""String_Node_Str""+ localDateTime+ ""String_Node_Str"";
        writeToCSVFile(response,location);
        splitlength=splitlength + Integer.parseInt(rowLimit);
      }
    }
 catch (    GraphDBException|IOException e) {
      log.error(""String_Node_Str"" + e);
      deleteFlag=false;
    }
    if (deleteFlag) {
      String deleteQry=""String_Node_Str"" + label + ""String_Node_Str""+ epochTime+ ""String_Node_Str"";
      try {
        dbHandler.executeCypherQuery(deleteQry);
      }
 catch (      GraphDBException e) {
        log.error(""String_Node_Str"" + label + ""String_Node_Str""+ e);
      }
    }
  }
}","public void performDataPurging(){
  List<String> labelList=new ArrayList<>();
  String rowLimit=null;
  String backupFileLocation=null;
  long backupDurationInDays=0;
  String backupFileName=null;
  JsonObject configJsonObj=getSettingsJsonObject();
  if (configJsonObj != null) {
    JsonArray array=configJsonObj.get(""String_Node_Str"").getAsJsonArray();
    if (array != null) {
      for (int i=0; i < array.size(); i++) {
        labelList.add(array.get(i).getAsString());
      }
    }
    rowLimit=configJsonObj.get(ConfigOptions.ROW_LIMIT).getAsString();
    backupFileLocation=configJsonObj.get(ConfigOptions.BACKUP_FILE_LOCATION).getAsString();
    backupFileName=configJsonObj.get(ConfigOptions.BACKUP_FILE_NAME).getAsString();
    backupDurationInDays=configJsonObj.get(ConfigOptions.BACKUP_DURATION_IN_DAYS).getAsLong();
  }
  long epochTime=InsightsUtils.getTimeBeforeDaysInSeconds(backupDurationInDays);
  Neo4jDBHandler dbHandler=new Neo4jDBHandler();
  for (  String label : labelList) {
    int splitlength=0;
    boolean deleteFlag=true;
    try {
      int count=getNodeCount(dbHandler,label,epochTime);
      while (splitlength < count) {
        GraphResponse response=executeCypherQuery(label,rowLimit,splitlength,epochTime);
        String localDateTime=InsightsUtils.getLocalDateTime(""String_Node_Str"");
        String location=backupFileLocation + File.separator + backupFileName+ ""String_Node_Str""+ splitlength+ ""String_Node_Str""+ localDateTime+ ""String_Node_Str"";
        writeToCSVFile(response,location);
        splitlength=splitlength + Integer.parseInt(rowLimit);
      }
    }
 catch (    GraphDBException|IOException e) {
      log.error(""String_Node_Str"" + e);
      deleteFlag=false;
    }
    if (deleteFlag) {
      String deleteQry=""String_Node_Str"" + label + ""String_Node_Str""+ epochTime+ ""String_Node_Str"";
      try {
        dbHandler.executeCypherQuery(deleteQry);
      }
 catch (      GraphDBException e) {
        log.error(""String_Node_Str"" + label + ""String_Node_Str""+ e);
      }
    }
  }
}"
39102,"@Override public String registerAgent(String toolName,String agentVersion,String osversion,String configDetails) throws InsightsCustomException {
  try {
    String agentId=getAgentkey(toolName);
    Gson gson=new Gson();
    JsonElement jelement=gson.fromJson(configDetails.trim(),JsonElement.class);
    JsonObject json=jelement.getAsJsonObject();
    json.addProperty(""String_Node_Str"",agentId);
    json.addProperty(""String_Node_Str"",osversion);
    json.addProperty(""String_Node_Str"",agentVersion);
    json.get(""String_Node_Str"").getAsJsonObject().addProperty(""String_Node_Str"",agentId);
    boolean isDataUpdateSupported=false;
    if (json.get(""String_Node_Str"") != null && !json.get(""String_Node_Str"").isJsonNull()) {
      isDataUpdateSupported=json.get(""String_Node_Str"").getAsBoolean();
    }
    String uniqueKey=agentId;
    Date updateDate=Timestamp.valueOf(LocalDateTime.now());
    AgentConfigDAL agentConfigDAL=new AgentConfigDAL();
    agentConfigDAL.saveAgentConfigFromUI(agentId,json.get(""String_Node_Str"").getAsString(),toolName,json,isDataUpdateSupported,uniqueKey,agentVersion,osversion,updateDate);
    Path agentZipPath=updateAgentConfig(toolName,agentId,json);
    byte[] data=Files.readAllBytes(agentZipPath);
    sendAgentPackage(data,toolName,agentId,toolName,osversion);
    performAgentAction(agentId,AGENTSTATUS.START.name());
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + toolName,e);
    throw new InsightsCustomException(e.toString());
  }
  return ""String_Node_Str"";
}","@Override public String registerAgent(String toolName,String agentVersion,String osversion,String configDetails) throws InsightsCustomException {
  try {
    String agentId=getAgentkey(toolName);
    Gson gson=new Gson();
    JsonElement jelement=gson.fromJson(configDetails.trim(),JsonElement.class);
    JsonObject json=jelement.getAsJsonObject();
    json.addProperty(""String_Node_Str"",agentId);
    json.addProperty(""String_Node_Str"",osversion);
    json.addProperty(""String_Node_Str"",agentVersion);
    json.get(""String_Node_Str"").getAsJsonObject().addProperty(""String_Node_Str"",agentId);
    boolean isDataUpdateSupported=false;
    if (json.get(""String_Node_Str"") != null && !json.get(""String_Node_Str"").isJsonNull()) {
      isDataUpdateSupported=json.get(""String_Node_Str"").getAsBoolean();
    }
    String uniqueKey=agentId;
    Date updateDate=Timestamp.valueOf(LocalDateTime.now());
    AgentConfigDAL agentConfigDAL=new AgentConfigDAL();
    agentConfigDAL.saveAgentConfigFromUI(agentId,json.get(""String_Node_Str"").getAsString(),toolName,json,isDataUpdateSupported,uniqueKey,agentVersion,osversion,updateDate);
    Path agentZipPath=updateAgentConfig(toolName,agentId,json);
    byte[] data=Files.readAllBytes(agentZipPath);
    String fileName=toolName + FILETYPE;
    sendAgentPackage(data,fileName,agentId,toolName,osversion);
    performAgentAction(agentId,AGENTSTATUS.START.name());
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + toolName,e);
    throw new InsightsCustomException(e.toString());
  }
  return ""String_Node_Str"";
}"
39103,"@Override public String updateAgent(String agentId,String configDetails,String toolName,String agentVersion,String osversion) throws InsightsCustomException {
  try {
    getToolRawConfigFile(agentVersion,toolName);
    Gson gson=new Gson();
    JsonElement jelement=gson.fromJson(configDetails.trim(),JsonElement.class);
    JsonObject json=jelement.getAsJsonObject();
    json.addProperty(""String_Node_Str"",osversion);
    json.addProperty(""String_Node_Str"",agentVersion);
    boolean isDataUpdateSupported=false;
    if (json.get(""String_Node_Str"") != null && !json.get(""String_Node_Str"").isJsonNull()) {
      isDataUpdateSupported=json.get(""String_Node_Str"").getAsBoolean();
    }
    String uniqueKey=agentId;
    Date updateDate=Timestamp.valueOf(LocalDateTime.now());
    AgentConfigDAL agentConfigDAL=new AgentConfigDAL();
    agentConfigDAL.saveAgentConfigFromUI(agentId,json.get(""String_Node_Str"").getAsString(),toolName,json,isDataUpdateSupported,uniqueKey,agentVersion,osversion,updateDate);
    Path agentZipPath=updateAgentConfig(toolName,agentId,json);
    byte[] data=Files.readAllBytes(agentZipPath);
    sendAgentPackage(data,toolName,agentId,toolName,osversion);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw new InsightsCustomException(e.toString());
  }
  return ""String_Node_Str"";
}","@Override public String updateAgent(String agentId,String configDetails,String toolName,String agentVersion,String osversion) throws InsightsCustomException {
  try {
    getToolRawConfigFile(agentVersion,toolName);
    Gson gson=new Gson();
    JsonElement jelement=gson.fromJson(configDetails.trim(),JsonElement.class);
    JsonObject json=jelement.getAsJsonObject();
    json.addProperty(""String_Node_Str"",osversion);
    json.addProperty(""String_Node_Str"",agentVersion);
    boolean isDataUpdateSupported=false;
    if (json.get(""String_Node_Str"") != null && !json.get(""String_Node_Str"").isJsonNull()) {
      isDataUpdateSupported=json.get(""String_Node_Str"").getAsBoolean();
    }
    String uniqueKey=agentId;
    Date updateDate=Timestamp.valueOf(LocalDateTime.now());
    AgentConfigDAL agentConfigDAL=new AgentConfigDAL();
    agentConfigDAL.saveAgentConfigFromUI(agentId,json.get(""String_Node_Str"").getAsString(),toolName,json,isDataUpdateSupported,uniqueKey,agentVersion,osversion,updateDate);
    Path agentZipPath=updateAgentConfig(toolName,agentId,json);
    byte[] data=Files.readAllBytes(agentZipPath);
    String fileName=toolName + FILETYPE;
    sendAgentPackage(data,fileName,agentId,toolName,osversion);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw new InsightsCustomException(e.toString());
  }
  return ""String_Node_Str"";
}"
39104,"@Override protected Map<String,Object> execute() throws InsightsSparkJobFailedException {
  Map<String,Object> resultMap=new HashMap<>();
  ElasticSearchDBHandler esDBHandler=new ElasticSearchDBHandler();
  try {
    log.debug(""String_Node_Str"");
    String esQuery=getEsQueryWithDates(kpiDefinition.getSchedule(),kpiDefinition.getEsquery());
    log.debug(""String_Node_Str"" + esQuery);
    JsonObject jsonObj=esDBHandler.queryES(ConfigConstants.SPARK_ES_HOST + ""String_Node_Str"" + ConfigConstants.SPARK_ES_PORT+ ""String_Node_Str""+ kpiDefinition.getEsResource()+ ""String_Node_Str"",esQuery);
    JsonObject aggObj=jsonObj.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsJsonObject();
    JsonElement jsonElement=aggObj.get(""String_Node_Str"");
    resultMap=getResultMap(jsonElement.getAsLong(),null);
    saveResult(resultMap);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + kpiDefinition.getKpiID() + ""String_Node_Str""+ kpiDefinition.getName(),e);
    throw new InsightsSparkJobFailedException(""String_Node_Str"" + kpiDefinition.getKpiID() + ""String_Node_Str""+ kpiDefinition.getName(),e);
  }
  return resultMap;
}","@Override protected Map<String,Object> execute() throws InsightsSparkJobFailedException {
  Map<String,Object> resultMap=new HashMap<>();
  ElasticSearchDBHandler esDBHandler=new ElasticSearchDBHandler();
  try {
    log.debug(""String_Node_Str"");
    String esQuery=getEsQueryWithDates(kpiDefinition.getSchedule(),kpiDefinition.getEsquery());
    log.debug(""String_Node_Str"" + esQuery);
    JsonObject jsonObj=esDBHandler.queryES(ConfigConstants.SPARK_ES_HOST + ""String_Node_Str"" + ConfigConstants.SPARK_ES_PORT+ ""String_Node_Str""+ kpiDefinition.getEsResource()+ ""String_Node_Str"",esQuery);
    JsonObject aggObj=jsonObj.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsJsonObject();
    JsonElement jsonElement=aggObj.get(""String_Node_Str"");
    if (jsonElement.isJsonNull()) {
      resultMap=getResultMap(0L,null);
    }
 else {
      resultMap=getResultMap(jsonElement.getAsLong(),null);
    }
    saveResult(resultMap);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + kpiDefinition.getKpiID() + ""String_Node_Str""+ kpiDefinition.getName(),e);
    throw new InsightsSparkJobFailedException(""String_Node_Str"" + kpiDefinition.getKpiID() + ""String_Node_Str""+ kpiDefinition.getName(),e);
  }
  return resultMap;
}"
39105,"private String getInferenceText(String inferenceName,String vector,Long kpiId,KPISentiment sentiment,String schedule,Object[] values,boolean isComparison,String resultOutputType){
  boolean zeroVal=false;
  String messageId=""String_Node_Str"";
  String zeroValCode=""String_Node_Str"";
  if (isComparison) {
    for (int i=0; i < values.length; i++) {
      if (resultOutputType.toLowerCase().contains(ResultOutputType.TIMERESULTOUTPUT.toString())) {
        if (values[i] instanceof Long && (Long)values[i] > 0) {
          Long result=(Long)values[i];
          Long secVal=TimeUnit.MILLISECONDS.toSeconds(result.longValue());
          values[i]=secVal;
          zeroValCode=zeroValCode + ""String_Node_Str"";
        }
 else {
          zeroVal=true;
          zeroValCode=zeroValCode + ""String_Node_Str"";
        }
      }
 else       if (values[i] instanceof Long) {
        if ((Long)values[i] == 0) {
          zeroVal=true;
          zeroValCode=zeroValCode + ""String_Node_Str"";
        }
 else {
          zeroValCode=zeroValCode + ""String_Node_Str"";
        }
      }
    }
  }
 else {
    messageId=vector.toLowerCase() + ""String_Node_Str"" + kpiId+ ""String_Node_Str""+ KPISentiment.NEUTRAL.toString()+ ""String_Node_Str""+ schedule.toLowerCase();
  }
  if (zeroVal) {
    messageId=vector.toLowerCase() + ""String_Node_Str"" + kpiId+ ""String_Node_Str""+ sentiment.toString()+ ""String_Node_Str""+ schedule.toLowerCase()+ ""String_Node_Str""+ zeroValCode;
  }
 else {
    messageId=vector.toLowerCase() + ""String_Node_Str"" + kpiId+ ""String_Node_Str""+ sentiment.toString()+ ""String_Node_Str""+ schedule.toLowerCase();
  }
  String inferenceText=messageSource.getMessage(messageId,values,Locale.getDefault());
  return inferenceText;
}","private String getInferenceText(String inferenceName,String vector,Long kpiId,KPISentiment sentiment,String schedule,Object[] values,boolean isComparison,String resultOutputType){
  boolean zeroVal=false;
  String messageId=""String_Node_Str"";
  String zeroValCode=""String_Node_Str"";
  String msgZeroCode=""String_Node_Str"";
  if (isComparison) {
    for (int i=0; i < values.length; i++) {
      if (resultOutputType.toLowerCase().contains(ResultOutputType.TIMERESULTOUTPUT.toString())) {
        if (values[i] instanceof Long && (Long)values[i] > 0) {
          Long result=(Long)values[i];
          Long secVal=TimeUnit.MILLISECONDS.toSeconds(result.longValue());
          values[i]=secVal;
          zeroValCode=zeroValCode + ""String_Node_Str"";
        }
 else {
          zeroVal=true;
          zeroValCode=zeroValCode + ""String_Node_Str"";
        }
      }
 else       if (values[i] instanceof Long) {
        if ((Long)values[i] == 0) {
          zeroVal=true;
          zeroValCode=zeroValCode + ""String_Node_Str"";
        }
 else {
          zeroValCode=zeroValCode + ""String_Node_Str"";
        }
      }
    }
  }
 else {
    messageId=vector.toLowerCase() + ""String_Node_Str"" + kpiId+ ""String_Node_Str""+ KPISentiment.NEUTRAL.toString()+ ""String_Node_Str""+ schedule.toLowerCase();
  }
  if (zeroVal && !zeroValCode.equals(InsightsMessageEnum.NEUTRALVALZERO.toString()) && !zeroValCode.equals(InsightsMessageEnum.PREVIOUSVALZERO.toString())) {
    if (zeroValCode.equals(InsightsMessageEnum.CURRENTVALZERO.toString())) {
      msgZeroCode=InsightsMessageEnum.ZEROVALMSG.toString();
    }
    messageId=vector.toLowerCase() + ""String_Node_Str"" + kpiId+ ""String_Node_Str""+ sentiment.toString()+ ""String_Node_Str""+ schedule.toLowerCase()+ ""String_Node_Str""+ msgZeroCode;
  }
 else {
    messageId=vector.toLowerCase() + ""String_Node_Str"" + kpiId+ ""String_Node_Str""+ sentiment.toString()+ ""String_Node_Str""+ schedule.toLowerCase();
  }
  String inferenceText=messageSource.getMessage(messageId,values,Locale.getDefault());
  return inferenceText;
}"
39106,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_UTF8_VALUE) public JsonObject switchUserOrg(@RequestParam int orgId){
  Map<String,String> headers=new HashMap<String,String>();
  String grafanaCookie=getUserCookies();
  headers.put(""String_Node_Str"",grafanaCookie);
  Map<String,String> grafanaResponseCookies=new HashMap<String,String>();
  String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
  grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
  String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
  grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
  httpRequest.setAttribute(""String_Node_Str"",grafanaResponseCookies);
  Authentication auth=SecurityContextHolder.getContext().getAuthentication();
  List<GrantedAuthority> updatedAuthorities=new ArrayList<>(auth.getAuthorities());
  updatedAuthorities.add(SpringAuthority.valueOf(grafanaCurrentOrgRole));
  Authentication newAuth=new UsernamePasswordAuthenticationToken(auth.getPrincipal(),auth.getCredentials(),updatedAuthorities);
  SecurityContextHolder.getContext().setAuthentication(newAuth);
  String apiUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint() + ""String_Node_Str"" + orgId;
  ClientResponse response=RestHandler.doPost(apiUrl,null,headers);
  return PlatformServiceUtil.buildSuccessResponseWithData(new JsonParser().parse(response.getEntity(String.class)));
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_UTF8_VALUE) public JsonObject switchUserOrg(@RequestParam int orgId){
  Map<String,String> headers=new HashMap<String,String>();
  String grafanaCookie=getUserCookies();
  headers.put(""String_Node_Str"",grafanaCookie);
  Map<String,String> grafanaResponseCookies=new HashMap<String,String>();
  String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
  grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
  String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
  grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
  httpRequest.setAttribute(""String_Node_Str"",grafanaResponseCookies);
  Authentication auth=SecurityContextHolder.getContext().getAuthentication();
  List<GrantedAuthority> updatedAuthorities=new ArrayList<>(auth.getAuthorities());
  updatedAuthorities.add(SpringAuthorityUtil.getSpringAuthorityRole(grafanaCurrentOrgRole));
  Authentication newAuth=new UsernamePasswordAuthenticationToken(auth.getPrincipal(),auth.getCredentials(),updatedAuthorities);
  SecurityContextHolder.getContext().setAuthentication(newAuth);
  String apiUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint() + ""String_Node_Str"" + orgId;
  ClientResponse response=RestHandler.doPost(apiUrl,null,headers);
  return PlatformServiceUtil.buildSuccessResponseWithData(new JsonParser().parse(response.getEntity(String.class)));
}"
39107,"public static UserDetails getUserDetails(HttpServletRequest httpRequest){
  ApplicationConfigProvider.performSystemCheck();
  String authHeader=httpRequest.getHeader(""String_Node_Str"");
  Cookie[] requestCookies=httpRequest.getCookies();
  Map<String,String> grafanaResponseCookies=new HashMap<String,String>();
  Map<String,String> cookieMap=new HashMap<String,String>();
  if (requestCookies != null) {
    for (    Cookie cookie : requestCookies) {
      cookieMap.put(cookie.getName(),cookie.getValue());
    }
  }
  String userName=null;
  String credential=null;
  try {
    String decodedAuthHeader=new String(Base64.getDecoder().decode(authHeader.split(""String_Node_Str"")[1]),""String_Node_Str"");
    String[] authTokens=decodedAuthHeader.split(""String_Node_Str"");
    userName=authTokens[0];
    credential=authTokens[1];
    String grafanaUser=cookieMap.get(""String_Node_Str"");
    if (userName.equals(grafanaUser)) {
      grafanaResponseCookies.putAll(cookieMap);
      if ((grafanaResponseCookies.get(""String_Node_Str"") == null || grafanaResponseCookies.get(""String_Node_Str"").isEmpty()) && (grafanaResponseCookies.get(""String_Node_Str"") == null || grafanaResponseCookies.get(""String_Node_Str"").isEmpty())) {
        Map<String,String> headers=new HashMap<String,String>();
        StringBuffer grafanaCookie=new StringBuffer();
        for (        Map.Entry<String,String> cookie : grafanaResponseCookies.entrySet()) {
          grafanaCookie.append(cookie.getKey()).append(""String_Node_Str"").append(cookie.getValue()).append(""String_Node_Str"");
        }
        headers.put(""String_Node_Str"",grafanaCookie.toString());
        String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
        grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
        String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
        grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
      }
    }
 else {
      List<NewCookie> cookies=getValidGrafanaSession(authTokens[0],authTokens[1]);
      StringBuffer grafanaCookie=new StringBuffer();
      for (      NewCookie cookie : cookies) {
        grafanaResponseCookies.put(cookie.getName(),cookie.getValue());
        grafanaCookie.append(cookie.getName()).append(""String_Node_Str"").append(cookie.getValue()).append(""String_Node_Str"");
      }
      Map<String,String> headers=new HashMap<String,String>();
      headers.put(""String_Node_Str"",grafanaCookie.toString());
      String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
      grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
      String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
      grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
    }
  }
 catch (  Exception e) {
    log.error(e);
  }
  List<GrantedAuthority> mappedAuthorities=new ArrayList<GrantedAuthority>();
  String grafanaRole=grafanaResponseCookies.get(""String_Node_Str"");
  if (grafanaRole == null || grafanaRole.trim().length() == 0) {
    mappedAuthorities.add(SpringAuthority.valueOf(""String_Node_Str""));
  }
 else {
    mappedAuthorities.add(SpringAuthority.valueOf(grafanaRole));
  }
  httpRequest.setAttribute(""String_Node_Str"",grafanaResponseCookies);
  if (ApplicationConfigProvider.getInstance().isEnableNativeUsers()) {
    return new User(userName,credential,true,true,true,true,mappedAuthorities);
  }
 else {
    return new User(userName,""String_Node_Str"",true,true,true,true,mappedAuthorities);
  }
}","public static UserDetails getUserDetails(HttpServletRequest httpRequest){
  ApplicationConfigProvider.performSystemCheck();
  String authHeader=httpRequest.getHeader(""String_Node_Str"");
  Cookie[] requestCookies=httpRequest.getCookies();
  Map<String,String> grafanaResponseCookies=new HashMap<String,String>();
  Map<String,String> cookieMap=new HashMap<String,String>();
  if (requestCookies != null) {
    for (    Cookie cookie : requestCookies) {
      cookieMap.put(cookie.getName(),cookie.getValue());
    }
  }
  String userName=null;
  String credential=null;
  try {
    String decodedAuthHeader=new String(Base64.getDecoder().decode(authHeader.split(""String_Node_Str"")[1]),""String_Node_Str"");
    String[] authTokens=decodedAuthHeader.split(""String_Node_Str"");
    userName=authTokens[0];
    credential=authTokens[1];
    String grafanaUser=cookieMap.get(""String_Node_Str"");
    if (userName.equals(grafanaUser)) {
      grafanaResponseCookies.putAll(cookieMap);
      if ((grafanaResponseCookies.get(""String_Node_Str"") == null || grafanaResponseCookies.get(""String_Node_Str"").isEmpty()) && (grafanaResponseCookies.get(""String_Node_Str"") == null || grafanaResponseCookies.get(""String_Node_Str"").isEmpty())) {
        Map<String,String> headers=new HashMap<String,String>();
        StringBuffer grafanaCookie=new StringBuffer();
        for (        Map.Entry<String,String> cookie : grafanaResponseCookies.entrySet()) {
          grafanaCookie.append(cookie.getKey()).append(""String_Node_Str"").append(cookie.getValue()).append(""String_Node_Str"");
        }
        headers.put(""String_Node_Str"",grafanaCookie.toString());
        String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
        grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
        String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
        grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
      }
    }
 else {
      List<NewCookie> cookies=getValidGrafanaSession(authTokens[0],authTokens[1]);
      StringBuffer grafanaCookie=new StringBuffer();
      for (      NewCookie cookie : cookies) {
        grafanaResponseCookies.put(cookie.getName(),cookie.getValue());
        grafanaCookie.append(cookie.getName()).append(""String_Node_Str"").append(cookie.getValue()).append(""String_Node_Str"");
      }
      Map<String,String> headers=new HashMap<String,String>();
      headers.put(""String_Node_Str"",grafanaCookie.toString());
      String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
      grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
      String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
      grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
    }
    List<GrantedAuthority> mappedAuthorities=new ArrayList<GrantedAuthority>();
    String grafanaRole=grafanaResponseCookies.get(""String_Node_Str"");
    if (grafanaRole == null || grafanaRole.trim().length() == 0) {
      mappedAuthorities.add(SpringAuthority.valueOf(""String_Node_Str""));
    }
 else {
      mappedAuthorities.add(SpringAuthorityUtil.getSpringAuthorityRole(grafanaRole));
    }
    httpRequest.setAttribute(""String_Node_Str"",grafanaResponseCookies);
    if (ApplicationConfigProvider.getInstance().isEnableNativeUsers()) {
      return new User(userName,credential,true,true,true,true,mappedAuthorities);
    }
 else {
      return new User(userName,""String_Node_Str"",true,true,true,true,mappedAuthorities);
    }
  }
 catch (  Exception e) {
    log.error(e);
  }
  return null;
}"
39108,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_UTF8_VALUE) public JsonObject switchUserOrg(@RequestParam int orgId){
  Map<String,String> headers=new HashMap<String,String>();
  String grafanaCookie=getUserCookies();
  headers.put(""String_Node_Str"",grafanaCookie);
  Map<String,String> grafanaResponseCookies=new HashMap<String,String>();
  String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
  grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
  String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
  grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
  httpRequest.setAttribute(""String_Node_Str"",grafanaResponseCookies);
  Authentication auth=SecurityContextHolder.getContext().getAuthentication();
  List<GrantedAuthority> updatedAuthorities=new ArrayList<>(auth.getAuthorities());
  updatedAuthorities.add(SpringAuthority.valueOf(grafanaCurrentOrgRole.replaceAll(""String_Node_Str"",""String_Node_Str"")));
  Authentication newAuth=new UsernamePasswordAuthenticationToken(auth.getPrincipal(),auth.getCredentials(),updatedAuthorities);
  SecurityContextHolder.getContext().setAuthentication(newAuth);
  String apiUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint() + ""String_Node_Str"" + orgId;
  ClientResponse response=RestHandler.doPost(apiUrl,null,headers);
  return PlatformServiceUtil.buildSuccessResponseWithData(new JsonParser().parse(response.getEntity(String.class)));
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_UTF8_VALUE) public JsonObject switchUserOrg(@RequestParam int orgId){
  Map<String,String> headers=new HashMap<String,String>();
  String grafanaCookie=getUserCookies();
  headers.put(""String_Node_Str"",grafanaCookie);
  Map<String,String> grafanaResponseCookies=new HashMap<String,String>();
  String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
  grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
  String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
  grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
  httpRequest.setAttribute(""String_Node_Str"",grafanaResponseCookies);
  Authentication auth=SecurityContextHolder.getContext().getAuthentication();
  List<GrantedAuthority> updatedAuthorities=new ArrayList<>(auth.getAuthorities());
  updatedAuthorities.add(SpringAuthorityUtil.getSpringAuthorityRole(grafanaCurrentOrgRole));
  Authentication newAuth=new UsernamePasswordAuthenticationToken(auth.getPrincipal(),auth.getCredentials(),updatedAuthorities);
  SecurityContextHolder.getContext().setAuthentication(newAuth);
  String apiUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint() + ""String_Node_Str"" + orgId;
  ClientResponse response=RestHandler.doPost(apiUrl,null,headers);
  return PlatformServiceUtil.buildSuccessResponseWithData(new JsonParser().parse(response.getEntity(String.class)));
}"
39109,"public static UserDetails getUserDetails(HttpServletRequest httpRequest){
  ApplicationConfigProvider.performSystemCheck();
  String authHeader=httpRequest.getHeader(""String_Node_Str"");
  Cookie[] requestCookies=httpRequest.getCookies();
  Map<String,String> grafanaResponseCookies=new HashMap<String,String>();
  Map<String,String> cookieMap=new HashMap<String,String>();
  if (requestCookies != null) {
    for (    Cookie cookie : requestCookies) {
      cookieMap.put(cookie.getName(),cookie.getValue());
    }
  }
  String userName=null;
  String credential=null;
  try {
    String decodedAuthHeader=new String(Base64.getDecoder().decode(authHeader.split(""String_Node_Str"")[1]),""String_Node_Str"");
    String[] authTokens=decodedAuthHeader.split(""String_Node_Str"");
    userName=authTokens[0];
    credential=authTokens[1];
    String grafanaUser=cookieMap.get(""String_Node_Str"");
    if (userName.equals(grafanaUser)) {
      grafanaResponseCookies.putAll(cookieMap);
      if ((grafanaResponseCookies.get(""String_Node_Str"") == null || grafanaResponseCookies.get(""String_Node_Str"").isEmpty()) && (grafanaResponseCookies.get(""String_Node_Str"") == null || grafanaResponseCookies.get(""String_Node_Str"").isEmpty())) {
        Map<String,String> headers=new HashMap<String,String>();
        StringBuffer grafanaCookie=new StringBuffer();
        for (        Map.Entry<String,String> cookie : grafanaResponseCookies.entrySet()) {
          grafanaCookie.append(cookie.getKey()).append(""String_Node_Str"").append(cookie.getValue()).append(""String_Node_Str"");
        }
        headers.put(""String_Node_Str"",grafanaCookie.toString());
        String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
        grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
        String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
        grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
      }
    }
 else {
      List<NewCookie> cookies=getValidGrafanaSession(authTokens[0],authTokens[1]);
      StringBuffer grafanaCookie=new StringBuffer();
      for (      NewCookie cookie : cookies) {
        grafanaResponseCookies.put(cookie.getName(),cookie.getValue());
        grafanaCookie.append(cookie.getName()).append(""String_Node_Str"").append(cookie.getValue()).append(""String_Node_Str"");
      }
      Map<String,String> headers=new HashMap<String,String>();
      headers.put(""String_Node_Str"",grafanaCookie.toString());
      String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
      grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
      String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
      grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
    }
    List<GrantedAuthority> mappedAuthorities=new ArrayList<GrantedAuthority>();
    String grafanaRole=grafanaResponseCookies.get(""String_Node_Str"");
    if (grafanaRole == null || grafanaRole.trim().length() == 0) {
      mappedAuthorities.add(SpringAuthority.valueOf(""String_Node_Str""));
    }
 else {
      mappedAuthorities.add(SpringAuthority.valueOf(grafanaRole.replaceAll(""String_Node_Str"",""String_Node_Str"")));
    }
    httpRequest.setAttribute(""String_Node_Str"",grafanaResponseCookies);
    if (ApplicationConfigProvider.getInstance().isEnableNativeUsers()) {
      return new User(userName,credential,true,true,true,true,mappedAuthorities);
    }
 else {
      return new User(userName,""String_Node_Str"",true,true,true,true,mappedAuthorities);
    }
  }
 catch (  Exception e) {
    log.error(e);
  }
  return null;
}","public static UserDetails getUserDetails(HttpServletRequest httpRequest){
  ApplicationConfigProvider.performSystemCheck();
  String authHeader=httpRequest.getHeader(""String_Node_Str"");
  Cookie[] requestCookies=httpRequest.getCookies();
  Map<String,String> grafanaResponseCookies=new HashMap<String,String>();
  Map<String,String> cookieMap=new HashMap<String,String>();
  if (requestCookies != null) {
    for (    Cookie cookie : requestCookies) {
      cookieMap.put(cookie.getName(),cookie.getValue());
    }
  }
  String userName=null;
  String credential=null;
  try {
    String decodedAuthHeader=new String(Base64.getDecoder().decode(authHeader.split(""String_Node_Str"")[1]),""String_Node_Str"");
    String[] authTokens=decodedAuthHeader.split(""String_Node_Str"");
    userName=authTokens[0];
    credential=authTokens[1];
    String grafanaUser=cookieMap.get(""String_Node_Str"");
    if (userName.equals(grafanaUser)) {
      grafanaResponseCookies.putAll(cookieMap);
      if ((grafanaResponseCookies.get(""String_Node_Str"") == null || grafanaResponseCookies.get(""String_Node_Str"").isEmpty()) && (grafanaResponseCookies.get(""String_Node_Str"") == null || grafanaResponseCookies.get(""String_Node_Str"").isEmpty())) {
        Map<String,String> headers=new HashMap<String,String>();
        StringBuffer grafanaCookie=new StringBuffer();
        for (        Map.Entry<String,String> cookie : grafanaResponseCookies.entrySet()) {
          grafanaCookie.append(cookie.getKey()).append(""String_Node_Str"").append(cookie.getValue()).append(""String_Node_Str"");
        }
        headers.put(""String_Node_Str"",grafanaCookie.toString());
        String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
        grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
        String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
        grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
      }
    }
 else {
      List<NewCookie> cookies=getValidGrafanaSession(authTokens[0],authTokens[1]);
      StringBuffer grafanaCookie=new StringBuffer();
      for (      NewCookie cookie : cookies) {
        grafanaResponseCookies.put(cookie.getName(),cookie.getValue());
        grafanaCookie.append(cookie.getName()).append(""String_Node_Str"").append(cookie.getValue()).append(""String_Node_Str"");
      }
      Map<String,String> headers=new HashMap<String,String>();
      headers.put(""String_Node_Str"",grafanaCookie.toString());
      String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
      grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
      String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
      grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
    }
    List<GrantedAuthority> mappedAuthorities=new ArrayList<GrantedAuthority>();
    String grafanaRole=grafanaResponseCookies.get(""String_Node_Str"");
    if (grafanaRole == null || grafanaRole.trim().length() == 0) {
      mappedAuthorities.add(SpringAuthority.valueOf(""String_Node_Str""));
    }
 else {
      mappedAuthorities.add(SpringAuthorityUtil.getSpringAuthorityRole(grafanaRole));
    }
    httpRequest.setAttribute(""String_Node_Str"",grafanaResponseCookies);
    if (ApplicationConfigProvider.getInstance().isEnableNativeUsers()) {
      return new User(userName,credential,true,true,true,true,mappedAuthorities);
    }
 else {
      return new User(userName,""String_Node_Str"",true,true,true,true,mappedAuthorities);
    }
  }
 catch (  Exception e) {
    log.error(e);
  }
  return null;
}"
39110,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_UTF8_VALUE) public JsonObject switchUserOrg(@RequestParam int orgId){
  Map<String,String> headers=new HashMap<String,String>();
  String grafanaCookie=getUserCookies();
  headers.put(""String_Node_Str"",grafanaCookie);
  Map<String,String> grafanaResponseCookies=new HashMap<String,String>();
  String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
  grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
  String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
  grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
  httpRequest.setAttribute(""String_Node_Str"",grafanaResponseCookies);
  Authentication auth=SecurityContextHolder.getContext().getAuthentication();
  List<GrantedAuthority> updatedAuthorities=new ArrayList<>(auth.getAuthorities());
  updatedAuthorities.add(SpringAuthority.valueOf(grafanaCurrentOrgRole));
  Authentication newAuth=new UsernamePasswordAuthenticationToken(auth.getPrincipal(),auth.getCredentials(),updatedAuthorities);
  SecurityContextHolder.getContext().setAuthentication(newAuth);
  String apiUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint() + ""String_Node_Str"" + orgId;
  ClientResponse response=RestHandler.doPost(apiUrl,null,headers);
  return PlatformServiceUtil.buildSuccessResponseWithData(new JsonParser().parse(response.getEntity(String.class)));
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_UTF8_VALUE) public JsonObject switchUserOrg(@RequestParam int orgId){
  Map<String,String> headers=new HashMap<String,String>();
  String grafanaCookie=getUserCookies();
  headers.put(""String_Node_Str"",grafanaCookie);
  Map<String,String> grafanaResponseCookies=new HashMap<String,String>();
  String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
  grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
  String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
  grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
  httpRequest.setAttribute(""String_Node_Str"",grafanaResponseCookies);
  Authentication auth=SecurityContextHolder.getContext().getAuthentication();
  List<GrantedAuthority> updatedAuthorities=new ArrayList<>(auth.getAuthorities());
  updatedAuthorities.add(SpringAuthority.valueOf(grafanaCurrentOrgRole.replaceAll(""String_Node_Str"",""String_Node_Str"")));
  Authentication newAuth=new UsernamePasswordAuthenticationToken(auth.getPrincipal(),auth.getCredentials(),updatedAuthorities);
  SecurityContextHolder.getContext().setAuthentication(newAuth);
  String apiUrl=ApplicationConfigProvider.getInstance().getGrafana().getGrafanaEndpoint() + ""String_Node_Str"" + orgId;
  ClientResponse response=RestHandler.doPost(apiUrl,null,headers);
  return PlatformServiceUtil.buildSuccessResponseWithData(new JsonParser().parse(response.getEntity(String.class)));
}"
39111,"public static UserDetails getUserDetails(HttpServletRequest httpRequest){
  ApplicationConfigProvider.performSystemCheck();
  String authHeader=httpRequest.getHeader(""String_Node_Str"");
  Cookie[] requestCookies=httpRequest.getCookies();
  Map<String,String> grafanaResponseCookies=new HashMap<String,String>();
  Map<String,String> cookieMap=new HashMap<String,String>();
  if (requestCookies != null) {
    for (    Cookie cookie : requestCookies) {
      cookieMap.put(cookie.getName(),cookie.getValue());
    }
  }
  String userName=null;
  String credential=null;
  try {
    String decodedAuthHeader=new String(Base64.getDecoder().decode(authHeader.split(""String_Node_Str"")[1]),""String_Node_Str"");
    String[] authTokens=decodedAuthHeader.split(""String_Node_Str"");
    userName=authTokens[0];
    credential=authTokens[1];
    String grafanaUser=cookieMap.get(""String_Node_Str"");
    if (userName.equals(grafanaUser)) {
      grafanaResponseCookies.putAll(cookieMap);
      if ((grafanaResponseCookies.get(""String_Node_Str"") == null || grafanaResponseCookies.get(""String_Node_Str"").isEmpty()) && (grafanaResponseCookies.get(""String_Node_Str"") == null || grafanaResponseCookies.get(""String_Node_Str"").isEmpty())) {
        Map<String,String> headers=new HashMap<String,String>();
        StringBuffer grafanaCookie=new StringBuffer();
        for (        Map.Entry<String,String> cookie : grafanaResponseCookies.entrySet()) {
          grafanaCookie.append(cookie.getKey()).append(""String_Node_Str"").append(cookie.getValue()).append(""String_Node_Str"");
        }
        headers.put(""String_Node_Str"",grafanaCookie.toString());
        String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
        grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
        String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
        grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
      }
    }
 else {
      List<NewCookie> cookies=getValidGrafanaSession(authTokens[0],authTokens[1]);
      StringBuffer grafanaCookie=new StringBuffer();
      for (      NewCookie cookie : cookies) {
        grafanaResponseCookies.put(cookie.getName(),cookie.getValue());
        grafanaCookie.append(cookie.getName()).append(""String_Node_Str"").append(cookie.getValue()).append(""String_Node_Str"");
      }
      Map<String,String> headers=new HashMap<String,String>();
      headers.put(""String_Node_Str"",grafanaCookie.toString());
      String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
      grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
      String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
      grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
    }
  }
 catch (  Exception e) {
    log.error(e);
  }
  List<GrantedAuthority> mappedAuthorities=new ArrayList<GrantedAuthority>();
  String grafanaRole=grafanaResponseCookies.get(""String_Node_Str"");
  if (grafanaRole == null || grafanaRole.trim().length() == 0) {
    mappedAuthorities.add(SpringAuthority.valueOf(""String_Node_Str""));
  }
 else {
    mappedAuthorities.add(SpringAuthority.valueOf(grafanaRole));
  }
  httpRequest.setAttribute(""String_Node_Str"",grafanaResponseCookies);
  if (ApplicationConfigProvider.getInstance().isEnableNativeUsers()) {
    return new User(userName,credential,true,true,true,true,mappedAuthorities);
  }
 else {
    return new User(userName,""String_Node_Str"",true,true,true,true,mappedAuthorities);
  }
}","public static UserDetails getUserDetails(HttpServletRequest httpRequest){
  ApplicationConfigProvider.performSystemCheck();
  String authHeader=httpRequest.getHeader(""String_Node_Str"");
  Cookie[] requestCookies=httpRequest.getCookies();
  Map<String,String> grafanaResponseCookies=new HashMap<String,String>();
  Map<String,String> cookieMap=new HashMap<String,String>();
  if (requestCookies != null) {
    for (    Cookie cookie : requestCookies) {
      cookieMap.put(cookie.getName(),cookie.getValue());
    }
  }
  String userName=null;
  String credential=null;
  try {
    String decodedAuthHeader=new String(Base64.getDecoder().decode(authHeader.split(""String_Node_Str"")[1]),""String_Node_Str"");
    String[] authTokens=decodedAuthHeader.split(""String_Node_Str"");
    userName=authTokens[0];
    credential=authTokens[1];
    String grafanaUser=cookieMap.get(""String_Node_Str"");
    if (userName.equals(grafanaUser)) {
      grafanaResponseCookies.putAll(cookieMap);
      if ((grafanaResponseCookies.get(""String_Node_Str"") == null || grafanaResponseCookies.get(""String_Node_Str"").isEmpty()) && (grafanaResponseCookies.get(""String_Node_Str"") == null || grafanaResponseCookies.get(""String_Node_Str"").isEmpty())) {
        Map<String,String> headers=new HashMap<String,String>();
        StringBuffer grafanaCookie=new StringBuffer();
        for (        Map.Entry<String,String> cookie : grafanaResponseCookies.entrySet()) {
          grafanaCookie.append(cookie.getKey()).append(""String_Node_Str"").append(cookie.getValue()).append(""String_Node_Str"");
        }
        headers.put(""String_Node_Str"",grafanaCookie.toString());
        String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
        grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
        String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
        grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
      }
    }
 else {
      List<NewCookie> cookies=getValidGrafanaSession(authTokens[0],authTokens[1]);
      StringBuffer grafanaCookie=new StringBuffer();
      for (      NewCookie cookie : cookies) {
        grafanaResponseCookies.put(cookie.getName(),cookie.getValue());
        grafanaCookie.append(cookie.getName()).append(""String_Node_Str"").append(cookie.getValue()).append(""String_Node_Str"");
      }
      Map<String,String> headers=new HashMap<String,String>();
      headers.put(""String_Node_Str"",grafanaCookie.toString());
      String grafanaCurrentOrg=getGrafanaCurrentOrg(headers);
      grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrg);
      String grafanaCurrentOrgRole=getCurrentOrgRole(headers,grafanaCurrentOrg);
      grafanaResponseCookies.put(""String_Node_Str"",grafanaCurrentOrgRole);
    }
    List<GrantedAuthority> mappedAuthorities=new ArrayList<GrantedAuthority>();
    String grafanaRole=grafanaResponseCookies.get(""String_Node_Str"");
    if (grafanaRole == null || grafanaRole.trim().length() == 0) {
      mappedAuthorities.add(SpringAuthority.valueOf(""String_Node_Str""));
    }
 else {
      mappedAuthorities.add(SpringAuthority.valueOf(grafanaRole.replaceAll(""String_Node_Str"",""String_Node_Str"")));
    }
    httpRequest.setAttribute(""String_Node_Str"",grafanaResponseCookies);
    if (ApplicationConfigProvider.getInstance().isEnableNativeUsers()) {
      return new User(userName,credential,true,true,true,true,mappedAuthorities);
    }
 else {
      return new User(userName,""String_Node_Str"",true,true,true,true,mappedAuthorities);
    }
  }
 catch (  Exception e) {
    log.error(e);
  }
  return null;
}"
39112,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_UTF8_VALUE) public @ResponseBody String grafanaEndPoint(){
  ApplicationConfigProvider applicationConfig=ApplicationConfigProvider.getInstance();
  return applicationConfig.getGrafana().getGrafanaEndpoint();
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_UTF8_VALUE) public @ResponseBody JsonObject grafanaEndPoint(){
  ApplicationConfigProvider applicationConfig=ApplicationConfigProvider.getInstance();
  JsonObject jsonResponse=new JsonObject();
  jsonResponse.addProperty(PlatformServiceConstants.STATUS,PlatformServiceConstants.SUCCESS);
  jsonResponse.addProperty(""String_Node_Str"",applicationConfig.getGrafana().getGrafanaEndpoint());
  return jsonResponse;
}"
39113,"public static String[] generateLevelFromCPPN(TWEANN net,int width){
  String[] level=new String[LEVEL_HEIGHT];
  double halfWidth=width / 2.0;
  for (int i=LEVEL_HEIGHT - 1; i >= 0; i--) {
    level[i]=""String_Node_Str"";
    for (int j=0; j < width; j++) {
      double x=(j - halfWidth) / halfWidth;
      double y=(MAX_HEIGHT_INDEX - i) / MAX_HEIGHT_INDEX;
      double[] inputs=new double[]{x,y,1.0};
      double[] outputs=net.process(inputs);
      System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ j+ ""String_Node_Str""+ Arrays.toString(inputs)+ Arrays.toString(outputs));
      if (outputs[PRESENT_INDEX] > PRESENT_THRESHOLD) {
        outputs[PRESENT_INDEX]=Double.NEGATIVE_INFINITY;
        int highest=StatisticsUtilities.argmax(outputs);
        if (highest == SOLID_INDEX) {
          level[i]+=SOLID_CHAR;
        }
 else         if (highest == BLOCK_OR_QUESTION_INDEX) {
          level[i]+=BLOCK_CHAR;
        }
 else         if (highest == COIN_INDEX) {
          level[i]+=COIN_CHAR;
        }
 else         if (highest == ENEMY_INDEX && i + 1 < level.length && level[i + 1].charAt(j) != EMPTY_CHAR && level[i + 1].charAt(j) != ENEMY_CHAR && level[i + 1].charAt(j) != COIN_CHAR) {
          level[i]+=ENEMY_CHAR;
        }
 else {
          level[i]+=EMPTY_CHAR;
        }
      }
 else {
        level[i]+=EMPTY_CHAR;
      }
    }
  }
  return level;
}","public static String[] generateLevelFromCPPN(TWEANN net,int width){
  String[] level=new String[LEVEL_HEIGHT];
  double halfWidth=width / 2.0;
  char[] top=new char[width];
  Arrays.fill(top,EMPTY_CHAR);
  level[0]=new String(top);
  for (int i=LEVEL_HEIGHT - 1; i > 0; i--) {
    level[i]=""String_Node_Str"";
    for (int j=0; j < width; j++) {
      double x=(j - halfWidth) / halfWidth;
      double y=(MAX_HEIGHT_INDEX - i) / MAX_HEIGHT_INDEX;
      double[] inputs=new double[]{x,y,1.0};
      double[] outputs=net.process(inputs);
      System.out.println(""String_Node_Str"" + i + ""String_Node_Str""+ j+ ""String_Node_Str""+ Arrays.toString(inputs)+ Arrays.toString(outputs));
      if (outputs[PRESENT_INDEX] > PRESENT_THRESHOLD) {
        outputs[PRESENT_INDEX]=Double.NEGATIVE_INFINITY;
        int highest=StatisticsUtilities.argmax(outputs);
        if (highest == SOLID_INDEX) {
          level[i]+=SOLID_CHAR;
        }
 else         if (highest == BLOCK_OR_QUESTION_INDEX) {
          level[i]+=BLOCK_CHAR;
        }
 else         if (highest == COIN_INDEX) {
          level[i]+=COIN_CHAR;
        }
 else         if (highest == ENEMY_INDEX && i + 1 < level.length) {
          level[i]+=ENEMY_CHAR;
        }
 else {
          level[i]+=EMPTY_CHAR;
        }
      }
 else {
        level[i]+=EMPTY_CHAR;
      }
    }
  }
  return level;
}"
39114,"public static void init(GraphicsConfiguration gc){
  try {
    mario=cutImage(gc,""String_Node_Str"",32,32);
    smallMario=cutImage(gc,""String_Node_Str"",16,16);
    fireMario=cutImage(gc,""String_Node_Str"",32,32);
    enemies=cutImage(gc,""String_Node_Str"",16,32);
    items=cutImage(gc,""String_Node_Str"",16,16);
    level=cutImage(gc,""String_Node_Str"",16,16);
    map=cutImage(gc,""String_Node_Str"",16,16);
    particles=cutImage(gc,""String_Node_Str"",8,8);
    bg=cutImage(gc,""String_Node_Str"",32,32);
    logo=getImage(gc,""String_Node_Str"");
    titleScreen=getImage(gc,""String_Node_Str"");
    font=cutImage(gc,""String_Node_Str"",8,8);
    endScene=cutImage(gc,""String_Node_Str"",96,96);
    gameOver=cutImage(gc,""String_Node_Str"",96,64);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void init(GraphicsConfiguration gc){
  if (loaded)   return;
  try {
    mario=cutImage(gc,""String_Node_Str"",32,32);
    smallMario=cutImage(gc,""String_Node_Str"",16,16);
    fireMario=cutImage(gc,""String_Node_Str"",32,32);
    enemies=cutImage(gc,""String_Node_Str"",16,32);
    items=cutImage(gc,""String_Node_Str"",16,16);
    level=cutImage(gc,""String_Node_Str"",16,16);
    map=cutImage(gc,""String_Node_Str"",16,16);
    particles=cutImage(gc,""String_Node_Str"",8,8);
    bg=cutImage(gc,""String_Node_Str"",32,32);
    logo=getImage(gc,""String_Node_Str"");
    titleScreen=getImage(gc,""String_Node_Str"");
    font=cutImage(gc,""String_Node_Str"",8,8);
    endScene=cutImage(gc,""String_Node_Str"",96,96);
    gameOver=cutImage(gc,""String_Node_Str"",96,64);
    loaded=true;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
39115,"/** 
 * A Graphics2D object and a Level are sent in, along with some information about the area to view. The level is then drawn to the Graphics2D, which is modified by side effects.
 * @param g
 * @param level
 * @param x0
 * @param y0
 * @param w
 * @param h
 */
public static void renderArea(Graphics2D g,Level level,int x0,int y0,int xCam,int yCam,int w,int h){
  Art.init(GraphicsUtil.getConfiguration());
  g.setBackground(transparent);
  g.clearRect(x0,y0,w,h);
  int xTileStart=(x0 + xCam) / 16;
  int yTileStart=(y0 + yCam) / 16;
  int xTileEnd=(x0 + xCam + w) / 16;
  int yTileEnd=(y0 + yCam + h) / 16;
  for (int x=xTileStart; x <= xTileEnd; x++) {
    for (int y=yTileStart; y <= yTileEnd; y++) {
      int b=level.getBlock(x,y) & 0xff;
      if (((Level.TILE_BEHAVIORS[b]) & Level.BIT_ANIMATED) == 0) {
        g.drawImage(Art.level[b % 16][b / 16],(x << 4) - xCam,(y << 4) - yCam,null);
      }
    }
  }
}","/** 
 * A Graphics2D object and a Level are sent in, along with some information about the area to view. The level is then drawn to the Graphics2D, which is modified by side effects.
 * @param g
 * @param level
 * @param x0
 * @param y0
 * @param w
 * @param h
 */
public static void renderArea(Graphics2D g,Level level,int x0,int y0,int xCam,int yCam,int w,int h){
  Art.init(GraphicsUtil.getConfiguration());
  g.setBackground(transparent);
  g.clearRect(x0,y0,w,h);
  int xTileStart=(x0 + xCam) / 16;
  int yTileStart=(y0 + yCam) / 16;
  int xTileEnd=(x0 + xCam + w) / 16;
  int yTileEnd=(y0 + yCam + h) / 16;
  for (int x=xTileStart; x <= xTileEnd; x++) {
    for (int y=yTileStart; y <= yTileEnd; y++) {
      int b=level.getBlock(x,y) & 0xff;
      g.drawImage(Art.level[b % 16][b / 16],(x << 4) - xCam,(y << 4) - yCam,null);
    }
  }
}"
39116,"/** 
 * Close the Mario window
 */
public static void DestroyMarioComponentFrame(){
  marioComponentFrame.dispose();
}","/** 
 * Close the Mario window
 */
public static void DestroyMarioComponentFrame(){
  marioComponentFrame.dispose();
  marioComponentFrame=null;
}"
39117,"/** 
 * Specified agent plays the specified level with visual display
 * @param level
 * @param agent
 * @return
 */
public static double[] agentPlaysLevel(Level level,Agent agent){
  EvaluationOptions options=new CmdLineOptions(new String[]{});
  options.setAgent(agent);
  ProgressTask task=new ProgressTask(options);
  options.setLevel(level);
  task.setOptions(options);
  return task.evaluate(options.getAgent());
}","/** 
 * Specified agent plays the specified level with visual display
 * @param level
 * @param agent
 * @return
 */
public static double[] agentPlaysLevel(Level level,Agent agent){
  EvaluationOptions options=new CmdLineOptions(new String[]{});
  options.setAgent(agent);
  ProgressTask task=new ProgressTask(options);
  options.setLevel(level);
  task.setOptions(options);
  double[] result=task.evaluate(options.getAgent());
  ToolsConfigurator.DestroyMarioComponentFrame();
  return result;
}"
39118,"public LevelBreederTask() throws IllegalAccessException {
  super();
  VGDLFactory.GetInstance().init();
  VGDLRegistry.GetInstance().init();
  gameFile=Parameters.parameters.stringParameter(""String_Node_Str"");
  fullGameFile=GAMES_PATH + gameFile + ""String_Node_Str"";
  gameCharData=SPECIFIC_GAME_LEVEL_CHARS.get(gameFile);
}","public LevelBreederTask() throws IllegalAccessException {
  super();
  VGDLFactory.GetInstance().init();
  VGDLRegistry.GetInstance().init();
  gameFile=Parameters.parameters.stringParameter(""String_Node_Str"");
  fullGameFile=GAMES_PATH + gameFile + ""String_Node_Str"";
  gameCharData=SPECIFIC_GAME_LEVEL_CHARS.get(gameFile);
  JButton play=new JButton(""String_Node_Str"");
  play.setName(""String_Node_Str"" + PLAY_BUTTON_INDEX);
  play.addActionListener(this);
  top.add(play);
}"
39119,"@Override protected BufferedImage getButtonImage(T phenotype,int width,int height,double[] inputMultipliers){
  String[] level=GVGAIUtil.generateLevelFromCPPN(phenotype,GAME_GRID_WIDTH,GAME_GRID_HEIGHT,DEFAULT_FLOOR,DEFAULT_WALL,gameCharData[FIXED_ITEMS_INDEX],gameCharData[UNIQUE_ITEMS_INDEX],gameCharData[RANDOM_ITEMS_INDEX],NUMBER_RANDOM_ITEMS);
  int seed=0;
  Agent agent=new Agent();
  agent.setup(null,seed,true);
  Game game=new VGDLParser().parseGame(fullGameFile);
  BufferedImage levelImage=GVGAIUtil.getLevelImage(((BasicGame)game),level,agent,width,height,seed);
  return levelImage;
}","@Override protected BufferedImage getButtonImage(T phenotype,int width,int height,double[] inputMultipliers){
  GameBundle bundle=setUpGameWithLevelFromCPPN(phenotype);
  BufferedImage levelImage=GVGAIUtil.getLevelImage(((BasicGame)bundle.game),bundle.level,(Agent)bundle.agent,width,height,bundle.randomSeed);
  return levelImage;
}"
39120,"/** 
 * Resets to a new random population
 */
@SuppressWarnings(""String_Node_Str"") protected void reset(){
  ArrayList<Genotype<T>> newPop=((SinglePopulationGenerationalEA<T>)MMNEAT.ea).initialPopulation(scores.get(0).individual);
  scores=new ArrayList<Score<T>>();
  ActivationFunctionRandomReplacement frr=new ActivationFunctionRandomReplacement();
  for (int i=0; i < newPop.size(); i++) {
    frr.mutate((Genotype<TWEANN>)newPop.get(i));
    resetButton(newPop.get(i),i);
  }
}","/** 
 * Resets to a new random population
 */
@SuppressWarnings(""String_Node_Str"") protected void reset(){
  CommonConstants.ftype=RandomNumbers.randomElement(ActivationFunctions.availableActivationFunctions);
  Parameters.parameters.setInteger(""String_Node_Str"",CommonConstants.ftype);
  ArrayList<Genotype<T>> newPop=((SinglePopulationGenerationalEA<T>)MMNEAT.ea).initialPopulation(scores.get(0).individual);
  scores=new ArrayList<Score<T>>();
  ActivationFunctionRandomReplacement frr=new ActivationFunctionRandomReplacement();
  for (int i=0; i < newPop.size(); i++) {
    frr.mutate((Genotype<TWEANN>)newPop.get(i));
    resetButton(newPop.get(i),i);
  }
}"
39121,"private static void setupTWEANNGenotypeDataTracking(boolean coevolution){
  if (genotype instanceof TWEANNGenotype) {
    if (Parameters.parameters.booleanParameter(""String_Node_Str"") && Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      System.out.println(""String_Node_Str"");
      EvolutionaryHistory.initTWEANNLog();
    }
    if (!coevolution) {
      EvolutionaryHistory.initArchetype(0);
    }
    long biggestInnovation=((TWEANNGenotype)genotype).biggestInnovation();
    if (biggestInnovation > EvolutionaryHistory.largestUnusedInnovationNumber) {
      EvolutionaryHistory.setInnovation(biggestInnovation + 1);
    }
  }
}","private static void setupTWEANNGenotypeDataTracking(boolean coevolution){
  if (genotype instanceof TWEANNGenotype || genotype instanceof CombinedGenotype) {
    if (Parameters.parameters.booleanParameter(""String_Node_Str"") && Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      System.out.println(""String_Node_Str"");
      EvolutionaryHistory.initTWEANNLog();
    }
    if (!coevolution) {
      EvolutionaryHistory.initArchetype(0);
    }
    @SuppressWarnings(""String_Node_Str"") long biggestInnovation=genotype instanceof CombinedGenotype ? ((TWEANNGenotype)((CombinedGenotype)genotype).t1).biggestInnovation() : ((TWEANNGenotype)genotype).biggestInnovation();
    if (biggestInnovation > EvolutionaryHistory.largestUnusedInnovationNumber) {
      EvolutionaryHistory.setInnovation(biggestInnovation + 1);
    }
  }
}"
39122,"public static void main(String[] args) throws ParserConfigurationException, SAXException, IOException {
  Parameters.initializeParameterCollections(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  TWEANNGenotype tg=new TWEANNGenotype(PicbreederTask.CPPN_NUM_INPUTS,PicbreederTask.CPPN_NUM_OUTPUTS,0);
  DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();
  DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();
  Document doc=dBuilder.parse(inputFile);
  doc.getDocumentElement().normalize();
  int inputs=0;
  NodeList nList=doc.getElementsByTagName(""String_Node_Str"");
  for (int temp=0; temp < nList.getLength(); temp++) {
    Node nNode=nList.item(temp);
    String type=nNode.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
    NodeList subList=nNode.getChildNodes();
    long innovation=Long.parseLong(subList.item(1).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
    String activation=subList.item(3).getFirstChild().getNodeValue();
    if (type.equals(""String_Node_Str"")) {
      NodeGene n=tg.nodes.get(inputs++);
      n.innovation=innovation;
      n.ftype=getFType(activation);
    }
 else     if (type.equals(""String_Node_Str"")) {
      NodeGene newGene=TWEANNGenotype.newNodeGene(getFType(activation),TWEANN.Node.NTYPE_HIDDEN,innovation);
      tg.nodes.add(tg.outputStartIndex(),newGene);
    }
 else     if (type.equals(""String_Node_Str"")) {
      String label=nNode.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
      NodeGene n;
      if (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")) {
        n=tg.nodes.get(tg.nodes.size() - 1);
      }
 else       if (label.equals(""String_Node_Str"")) {
        n=tg.nodes.get(tg.nodes.size() - 2);
      }
 else {
        n=tg.nodes.get(tg.nodes.size() - 3);
      }
      n.innovation=innovation;
      n.ftype=getFType(activation);
    }
  }
  tg.links.clear();
  NodeList linkList=doc.getElementsByTagName(""String_Node_Str"");
  for (int temp=0; temp < linkList.getLength(); temp++) {
    Node linkNode=linkList.item(temp);
    NodeList subList=linkNode.getChildNodes();
    long innovation=Long.parseLong(subList.item(1).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
    long sourceInnovation=Long.parseLong(subList.item(3).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
    long targetInnovation=Long.parseLong(subList.item(5).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
    double weight=Double.parseDouble(subList.item(7).getFirstChild().getNodeValue());
    LinkGene lg=TWEANNGenotype.newLinkGene(sourceInnovation,targetInnovation,weight,innovation,false);
    tg.links.add(lg);
  }
  System.out.println(""String_Node_Str"");
  System.out.println(tg.toString());
  TWEANNGenotype.sortNodeGenesByLinkConnectivity(tg);
  System.out.println(""String_Node_Str"");
  System.out.println(tg.toString());
  DrawingPanel panel=new DrawingPanel(800,800,""String_Node_Str"");
  TWEANN network=tg.getPhenotype();
  network.draw(panel,true,false);
  BufferedImage image=GraphicsUtil.imageFromCPPN(network,SIZE,SIZE);
  DrawingPanel picture=GraphicsUtil.drawImage(image,""String_Node_Str"",SIZE,SIZE);
  MiscUtil.waitForReadStringAndEnterKeyPress();
  picture.dispose();
}","public static void main(String[] args) throws ParserConfigurationException, SAXException, IOException {
  Parameters.initializeParameterCollections(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  TWEANNGenotype tg=new TWEANNGenotype(PicbreederTask.CPPN_NUM_INPUTS,PicbreederTask.CPPN_NUM_OUTPUTS,0);
  File inputFile=new File(""String_Node_Str"");
  DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();
  DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();
  Document doc=dBuilder.parse(inputFile);
  doc.getDocumentElement().normalize();
  int inputs=0;
  NodeList nList=doc.getElementsByTagName(""String_Node_Str"");
  for (int temp=0; temp < nList.getLength(); temp++) {
    Node nNode=nList.item(temp);
    String type=nNode.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
    NodeList subList=nNode.getChildNodes();
    long innovation=Long.parseLong(subList.item(1).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
    String activation=subList.item(3).getFirstChild().getNodeValue();
    if (type.equals(""String_Node_Str"")) {
      NodeGene n=tg.nodes.get(inputs++);
      n.innovation=innovation;
      n.ftype=getFType(activation);
    }
 else     if (type.equals(""String_Node_Str"")) {
      NodeGene newGene=TWEANNGenotype.newNodeGene(getFType(activation),TWEANN.Node.NTYPE_HIDDEN,innovation);
      tg.nodes.add(tg.outputStartIndex(),newGene);
    }
 else     if (type.equals(""String_Node_Str"")) {
      String label=nNode.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
      NodeGene n;
      if (label.equals(""String_Node_Str"") || label.equals(""String_Node_Str"")) {
        n=tg.nodes.get(tg.nodes.size() - 1);
      }
 else       if (label.equals(""String_Node_Str"")) {
        n=tg.nodes.get(tg.nodes.size() - 2);
      }
 else {
        n=tg.nodes.get(tg.nodes.size() - 3);
      }
      n.innovation=innovation;
      n.ftype=getFType(activation);
    }
  }
  tg.links.clear();
  NodeList linkList=doc.getElementsByTagName(""String_Node_Str"");
  for (int temp=0; temp < linkList.getLength(); temp++) {
    Node linkNode=linkList.item(temp);
    NodeList subList=linkNode.getChildNodes();
    long innovation=Long.parseLong(subList.item(1).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
    long sourceInnovation=Long.parseLong(subList.item(3).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
    long targetInnovation=Long.parseLong(subList.item(5).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
    double weight=Double.parseDouble(subList.item(7).getFirstChild().getNodeValue());
    LinkGene lg=TWEANNGenotype.newLinkGene(sourceInnovation,targetInnovation,weight,innovation,false);
    tg.links.add(lg);
  }
  System.out.println(""String_Node_Str"");
  System.out.println(tg.toString());
  TWEANNGenotype.sortNodeGenesByLinkConnectivity(tg);
  System.out.println(""String_Node_Str"");
  System.out.println(tg.toString());
  DrawingPanel panel=new DrawingPanel(800,800,""String_Node_Str"");
  TWEANN network=tg.getPhenotype();
  network.draw(panel,true,false);
  BufferedImage image=GraphicsUtil.imageFromCPPN(network,SIZE,SIZE);
  DrawingPanel picture=GraphicsUtil.drawImage(image,""String_Node_Str"",SIZE,SIZE);
  MiscUtil.waitForReadStringAndEnterKeyPress();
  picture.dispose();
}"
39123,"/** 
 * Given an ArchivedOrganism (which contains some evaluation information about the genotype), figure out which bin it belongs in and add it at the front if it is a new elite. Otherwise, add it at the end.
 * @param candidate Organism containing genotype and eval information
 * @return Whether organism was a new elite
 */
public boolean add(Score<T> candidate){
  String binLabel=mapping.binForScore(candidate);
  boolean newElite=true;
  ArrayList<Score<T>> bin;
  if (!archive.containsKey(binLabel)) {
    bin=new ArrayList<Score<T>>();
    bin.add(candidate);
  }
 else {
    bin=archive.get(binLabel);
    Score<T> elite=bin.get(0);
    if (candidate.isAtLeastAsGood(elite)) {
      bin.add(0,candidate);
    }
 else {
      bin.add(candidate);
      newElite=false;
    }
  }
  archive.put(binLabel,bin);
  if (saveElites) {
    String fileName=""String_Node_Str"" + candidate.individual.getId() + ""String_Node_Str"";
    if (newElite) {
      fileName=""String_Node_Str"" + fileName;
    }
    String binPath=archiveDir + File.separator + binLabel;
    new File(binPath).mkdirs();
    Easy.save(candidate.individual,binPath + File.separator + fileName);
  }
  return newElite;
}","/** 
 * Given an ArchivedOrganism (which contains some evaluation information about the genotype), figure out which bin it belongs in and add it at the front if it is a new elite. Otherwise, add it at the end.
 * @param candidate Organism containing genotype and eval information
 * @return Whether organism was a new elite
 */
public boolean add(Score<T> candidate){
  String binLabel=mapping.binForScore(candidate);
  boolean newElite=true;
  ArrayList<Score<T>> bin;
  if (!archive.containsKey(binLabel)) {
    bin=new ArrayList<Score<T>>();
    bin.add(candidate);
  }
 else {
    bin=archive.get(binLabel);
    Score<T> elite=bin.get(0);
    if (candidate.isAtLeastAsGood(elite)) {
      bin.add(0,candidate);
    }
 else {
      bin.add(candidate);
      newElite=false;
    }
  }
  archive.put(binLabel,bin);
  if (newElite)   System.out.println(""String_Node_Str"" + binLabel + ""String_Node_Str""+ candidate.scores[0]);
  if (saveElites) {
    String fileName=""String_Node_Str"" + candidate.individual.getId() + ""String_Node_Str"";
    if (newElite) {
      fileName=""String_Node_Str"" + fileName;
    }
    String binPath=archiveDir + File.separator + binLabel;
    new File(binPath).mkdirs();
    Easy.save(candidate.individual,binPath + File.separator + fileName);
  }
  return newElite;
}"
39124,"/** 
 * Create one (maybe two) new individuals by randomly sampling from the elites in random bins. The reason that two individuals may be added is if crossover occurs. In this case, both children can potentially be added  to the archive.
 */
@Override public void newIndividual(){
  boolean newEliteProduced=false;
  String label=archive.randomBinLabel();
  Genotype<T> parent1=archive.getElite(label).individual;
  long parentId1=parent1.getId();
  long parentId2=-1;
  Genotype<T> child1=parent1.copy();
  if (mating && RandomNumbers.randomGenerator.nextDouble() < crossoverRate) {
    String otherLabel=archive.randomBinLabel();
    Genotype<T> parent2=archive.getElite(otherLabel).individual;
    parentId2=parent2.getId();
    Genotype<T> child2=parent2.copy();
    child2=child1.crossover(child2);
    child2.mutate();
    EvolutionaryHistory.logLineageData(parentId1,parentId2,child2);
    Score<T> s2=task.evaluate(child2);
    boolean child2WasElite=archive.add(s2);
    newEliteProduced=newEliteProduced || child2WasElite;
    if (child2WasElite && io) {
    }
  }
  child1.mutate();
  if (parentId2 == -1) {
    EvolutionaryHistory.logLineageData(parentId1,child1);
  }
 else {
    EvolutionaryHistory.logLineageData(parentId1,parentId2,child1);
  }
  Score<T> s1=task.evaluate(child1);
  boolean child1WasElite=archive.add(s1);
  newEliteProduced=newEliteProduced || child1WasElite;
  if (child1WasElite && io) {
  }
  iterations++;
  if (newEliteProduced) {
    iterationsWithoutElite=0;
  }
 else {
    iterationsWithoutElite++;
  }
}","/** 
 * Create one (maybe two) new individuals by randomly sampling from the elites in random bins. The reason that two individuals may be added is if crossover occurs. In this case, both children can potentially be added  to the archive.
 */
@Override public void newIndividual(){
  boolean newEliteProduced=false;
  String label=archive.randomBinLabel();
  Genotype<T> parent1=archive.getElite(label).individual;
  long parentId1=parent1.getId();
  long parentId2=-1;
  Genotype<T> child1=parent1.copy();
  if (mating && RandomNumbers.randomGenerator.nextDouble() < crossoverRate) {
    String otherLabel=archive.randomBinLabel();
    Genotype<T> parent2=archive.getElite(otherLabel).individual;
    parentId2=parent2.getId();
    Genotype<T> child2=parent2.copy();
    child2=child1.crossover(child2);
    child2.mutate();
    EvolutionaryHistory.logLineageData(parentId1,parentId2,child2);
    Score<T> s2=task.evaluate(child2);
    boolean child2WasElite=archive.add(s2);
    newEliteProduced=newEliteProduced || child2WasElite;
    if (child2WasElite && io) {
    }
  }
  child1.mutate();
  if (parentId2 == -1) {
    EvolutionaryHistory.logLineageData(parentId1,child1);
  }
 else {
    EvolutionaryHistory.logLineageData(parentId1,parentId2,child1);
  }
  Score<T> s1=task.evaluate(child1);
  boolean child1WasElite=archive.add(s1);
  newEliteProduced=newEliteProduced || child1WasElite;
  if (child1WasElite && io) {
  }
  iterations++;
  if (newEliteProduced) {
    iterationsWithoutElite=0;
  }
 else {
    iterationsWithoutElite++;
  }
  System.out.println(iterations + ""String_Node_Str"" + iterationsWithoutElite);
}"
39125,"@Override public Score<T> evaluate(Genotype<T> individual){
  Network cppn=individual.getPhenotype();
  BufferedImage image=GraphicsUtil.imageFromCPPN(cppn,ImageNetClassification.IMAGE_NET_INPUT_WIDTH,ImageNetClassification.IMAGE_NET_INPUT_HEIGHT);
  INDArray imageArray=ImageNetClassification.bufferedImageToINDArray(image);
  INDArray scores=ImageNetClassification.getImageNetPredictions(imageArray,PREPROCESS);
  double bestScore=ImageNetClassification.bestScore(scores);
  ArrayList<Double> behaviorVector=ArrayUtil.doubleVectorFromINDArray(scores);
  Score<T> result=new Score<>(individual,new double[]{bestScore},behaviorVector);
  if (CommonConstants.watch) {
    DrawingPanel p=GraphicsUtil.drawImage(image,""String_Node_Str"",ImageNetClassification.IMAGE_NET_INPUT_WIDTH,ImageNetClassification.IMAGE_NET_INPUT_HEIGHT);
    String decodedLabels=new ImageNetLabels().decodePredictions(scores);
    System.out.println(decodedLabels);
    MiscUtil.waitForReadStringAndEnterKeyPress();
    p.dispose();
  }
  return result;
}","@Override public Score<T> evaluate(Genotype<T> individual){
  Network cppn=individual.getPhenotype();
  BufferedImage image=GraphicsUtil.imageFromCPPN(cppn,ImageNetClassification.IMAGE_NET_INPUT_WIDTH,ImageNetClassification.IMAGE_NET_INPUT_HEIGHT);
  INDArray imageArray=ImageNetClassification.bufferedImageToINDArray(image);
  INDArray scores=ImageNetClassification.getImageNetPredictions(imageArray,PREPROCESS);
  double bestScore=ImageNetClassification.bestScore(scores);
  ArrayList<Double> behaviorVector=ArrayUtil.doubleVectorFromINDArray(scores);
  Score<T> result=new Score<>(individual,new double[]{bestScore},behaviorVector);
  DrawingPanel picture=null;
  if (CommonConstants.watch || CommonConstants.netio) {
    picture=GraphicsUtil.drawImage(image,""String_Node_Str"",ImageNetClassification.IMAGE_NET_INPUT_WIDTH,ImageNetClassification.IMAGE_NET_INPUT_HEIGHT);
  }
  if (CommonConstants.watch) {
    String decodedLabels=new ImageNetLabels().decodePredictions(scores);
    System.out.println(decodedLabels);
    MiscUtil.waitForReadStringAndEnterKeyPress();
  }
  if (CommonConstants.netio) {
    @SuppressWarnings(""String_Node_Str"") Archive<T> archive=((MAPElites<T>)MMNEAT.ea).getArchive();
    String fileName=""String_Node_Str"" + individual.getId() + ""String_Node_Str"";
    String binLabel=archive.getBinMapping().binForScore(result);
    String binPath=archive.getArchiveDirectory() + File.separator + binLabel;
    new File(binPath).mkdirs();
    picture.save(binPath + File.separator + fileName);
  }
  if (picture != null)   picture.dispose();
  return result;
}"
39126,"/** 
 * Converts a 1D INDArray from DL4J into an ArrayList of Doubles
 * @param values An INDArray that must be 1D
 * @return ArrayList with same values in same order
 */
public static ArrayList<Double> doubleVectorFromINDArray(INDArray values){
  ArrayList<Double> result=new ArrayList<Double>(values.size(0));
  for (int i=0; i < values.size(0); i++) {
    result.add(values.getDouble(0,i));
  }
  return result;
}","/** 
 * Converts a 1D INDArray from DL4J into an ArrayList of Doubles
 * @param values An INDArray that must be 1D
 * @return ArrayList with same values in same order
 */
public static ArrayList<Double> doubleVectorFromINDArray(INDArray values){
  ArrayList<Double> result=new ArrayList<Double>(values.size(0));
  for (int i=0; i < values.length(); i++) {
    result.add(values.getDouble(0,i));
  }
  return result;
}"
39127,"/** 
 * Given the current parent population, return the next parent population
 * @param parents = current parent population
 * @return = next parent population
 */
@Override public ArrayList<Genotype<T>> getNextGeneration(ArrayList<Genotype<T>> parents){
  evaluatingParents=true;
  long start=System.currentTimeMillis();
  System.out.println(""String_Node_Str"");
  ArrayList<Score<T>> parentScores=task.evaluateAll(parents);
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + TimeUnit.MILLISECONDS.toMinutes(end - start) + ""String_Node_Str"");
  if (TWEANN.preferenceNeuron()) {
    EvolutionaryHistory.maxModes=0;
    EvolutionaryHistory.minModes=Integer.MAX_VALUE;
    if (parentScores.get(0).individual instanceof TWEANNGenotype) {
      for (      Score<T> g : parentScores) {
        TWEANNGenotype tg=(TWEANNGenotype)g.individual;
        EvolutionaryHistory.maxModes=Math.max(tg.numModules,EvolutionaryHistory.maxModes);
        EvolutionaryHistory.minModes=Math.min(tg.numModules,EvolutionaryHistory.minModes);
      }
    }
  }
  evaluatingParents=false;
  start=System.currentTimeMillis();
  System.out.println(""String_Node_Str"");
  ArrayList<Score<T>> childrenScores=processChildren(parentScores);
  end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + TimeUnit.MILLISECONDS.toMinutes(end - start) + ""String_Node_Str"");
  logParentInfo(parentScores);
  if (writeOutput) {
    ArrayList<Score<T>> combined=new ArrayList<Score<T>>(mu + lambda);
    combined.addAll(parentScores);
    combined.addAll(childrenScores);
    MMNEAT.logPerformanceInformation(combined,generation);
  }
  ArrayList<Genotype<T>> result=selectAndAdvance(parentScores,childrenScores);
  if (Parameters.parameters.booleanParameter(""String_Node_Str"") && currentGeneration() == Parameters.parameters.integerParameter(""String_Node_Str"")) {
    if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      result=OffsetHybrIDGenotype.getSubstrateGenotypesFromCPPNs(HyperNEATUtil.getHyperNEATTask(),result);
    }
 else {
      CommonConstants.hyperNEAT=false;
      Parameters.parameters.setBoolean(""String_Node_Str"",false);
      CommonConstants.monitorInputs=Parameters.parameters.booleanParameter(""String_Node_Str"");
      HyperNEATUtil.clearHyperNEATVisualizations();
      TWEANNGenotype.smallerGenotypes=true;
      Parameters.parameters.setClass(""String_Node_Str"",TWEANNGenotype.class);
      CommonConstants.netChangeActivationRate=0;
      Parameters.parameters.setDouble(""String_Node_Str"",0);
      result=PopulationUtil.getSubstrateGenotypesFromCPPNs(HyperNEATUtil.getHyperNEATTask(),result,0);
      TWEANNGenotype exemplar=(TWEANNGenotype)result.get(0).copy();
      long maxInnovation=0;
      for (      LinkGene lg : exemplar.links) {
        maxInnovation=Math.max(maxInnovation,lg.innovation);
      }
      EvolutionaryHistory.setInnovation(maxInnovation + 1);
      EvolutionaryHistory.initArchetype(0,null,exemplar);
    }
  }
  return result;
}","/** 
 * Given the current parent population, return the next parent population
 * @param parents = current parent population
 * @return = next parent population
 */
@Override public ArrayList<Genotype<T>> getNextGeneration(ArrayList<Genotype<T>> parents){
  evaluatingParents=true;
  long start=System.currentTimeMillis();
  System.out.println(""String_Node_Str"");
  ArrayList<Score<T>> parentScores=task.evaluateAll(parents);
  long end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + TimeUnit.MILLISECONDS.toMinutes(end - start) + ""String_Node_Str"");
  if (TWEANN.preferenceNeuron()) {
    EvolutionaryHistory.maxModes=0;
    EvolutionaryHistory.minModes=Integer.MAX_VALUE;
    if (parentScores.get(0).individual instanceof TWEANNGenotype) {
      for (      Score<T> g : parentScores) {
        TWEANNGenotype tg=(TWEANNGenotype)g.individual;
        EvolutionaryHistory.maxModes=Math.max(tg.numModules,EvolutionaryHistory.maxModes);
        EvolutionaryHistory.minModes=Math.min(tg.numModules,EvolutionaryHistory.minModes);
      }
    }
  }
  evaluatingParents=false;
  start=System.currentTimeMillis();
  System.out.println(""String_Node_Str"");
  ArrayList<Score<T>> childrenScores=processChildren(parentScores);
  end=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + TimeUnit.MILLISECONDS.toMinutes(end - start) + ""String_Node_Str"");
  logParentInfo(parentScores);
  if (writeOutput) {
    ArrayList<Score<T>> combined=new ArrayList<Score<T>>(mu + lambda);
    combined.addAll(parentScores);
    combined.addAll(childrenScores);
    MMNEAT.logPerformanceInformation(combined,generation);
  }
  ArrayList<Genotype<T>> result=selectAndAdvance(parentScores,childrenScores);
  if (CommonConstants.hybrID && currentGeneration() == Parameters.parameters.integerParameter(""String_Node_Str"")) {
    if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      result=OffsetHybrIDGenotype.getSubstrateGenotypesFromCPPNs(HyperNEATUtil.getHyperNEATTask(),result);
    }
 else {
      CommonConstants.hyperNEAT=false;
      Parameters.parameters.setBoolean(""String_Node_Str"",false);
      CommonConstants.monitorInputs=Parameters.parameters.booleanParameter(""String_Node_Str"");
      HyperNEATUtil.clearHyperNEATVisualizations();
      TWEANNGenotype.smallerGenotypes=true;
      Parameters.parameters.setClass(""String_Node_Str"",TWEANNGenotype.class);
      CommonConstants.netChangeActivationRate=0;
      Parameters.parameters.setDouble(""String_Node_Str"",0);
      result=PopulationUtil.getSubstrateGenotypesFromCPPNs(HyperNEATUtil.getHyperNEATTask(),result,0);
      TWEANNGenotype exemplar=(TWEANNGenotype)result.get(0).copy();
      long maxInnovation=0;
      for (      LinkGene lg : exemplar.links) {
        maxInnovation=Math.max(maxInnovation,lg.innovation);
      }
      EvolutionaryHistory.setInnovation(maxInnovation + 1);
      EvolutionaryHistory.initArchetype(0,null,exemplar);
    }
  }
  return result;
}"
39128,"/** 
 * To be called once and only once after Parameters are initialized. None of the variables here should ever be changed. TODO: In Parameters, way to specify if parameter is read-only
 */
public static void load(){
  averageScoreHistory=Parameters.parameters.booleanParameter(""String_Node_Str"");
  convolution=Parameters.parameters.booleanParameter(""String_Node_Str"");
  substrateBiasLocationInputs=Parameters.parameters.booleanParameter(""String_Node_Str"");
  substrateLocationInputs=Parameters.parameters.booleanParameter(""String_Node_Str"");
  monitorSubstrates=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeSigmoidFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeTanhFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeIdFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeFullApproxFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeApproxFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeGaussFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeSineFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeSawtoothFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeAbsValFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeHalfLinearPiecewiseFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeStretchedTanhFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeReLUFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeSoftplusFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeLeakyReLUFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeFullSawtoothFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeTriangleWaveFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeSquareWaveFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  inheritFitness=Parameters.parameters.booleanParameter(""String_Node_Str"");
  splitRawTetrisInputs=Parameters.parameters.booleanParameter(""String_Node_Str"");
  allowMultipleFunctions=Parameters.parameters.booleanParameter(""String_Node_Str"");
  allowRandomGhostReversals=Parameters.parameters.booleanParameter(""String_Node_Str"");
  checkEachAbsoluteDistanceGhostSort=Parameters.parameters.booleanParameter(""String_Node_Str"");
  checkEachFlushWalls=Parameters.parameters.booleanParameter(""String_Node_Str"");
  connectToInputs=Parameters.parameters.booleanParameter(""String_Node_Str"");
  constantTUGGoalIncrements=Parameters.parameters.booleanParameter(""String_Node_Str"");
  cullCrossovers=Parameters.parameters.booleanParameter(""String_Node_Str"");
  cullModeMutations=Parameters.parameters.booleanParameter(""String_Node_Str"");
  deleteLeastUsed=Parameters.parameters.booleanParameter(""String_Node_Str"");
  eliminateImpossibleDirections=Parameters.parameters.booleanParameter(""String_Node_Str"");
  ensembleModeMutation=Parameters.parameters.booleanParameter(""String_Node_Str"");
  evalReport=Parameters.parameters.booleanParameter(""String_Node_Str"");
  exploreWeightsOfNewStructure=Parameters.parameters.booleanParameter(""String_Node_Str"");
  freezeBeforeModeMutation=Parameters.parameters.booleanParameter(""String_Node_Str"");
  fs=Parameters.parameters.booleanParameter(""String_Node_Str"");
  hierarchicalMultitask=Parameters.parameters.booleanParameter(""String_Node_Str"");
  hyperNEAT=Parameters.parameters.booleanParameter(""String_Node_Str"");
  imprisonedWhileEdible=Parameters.parameters.booleanParameter(""String_Node_Str"");
  infiniteEdibleTime=Parameters.parameters.booleanParameter(""String_Node_Str"");
  leo=Parameters.parameters.booleanParameter(""String_Node_Str"");
  evolveHyperNEATBias=Parameters.parameters.booleanParameter(""String_Node_Str"");
  logChildScores=Parameters.parameters.booleanParameter(""String_Node_Str"");
  meltAfterCrossover=Parameters.parameters.booleanParameter(""String_Node_Str"");
  minimalSubnetExecution=Parameters.parameters.booleanParameter(""String_Node_Str"");
  minimizeSpliceImpact=Parameters.parameters.booleanParameter(""String_Node_Str"");
  mmpActivationId=Parameters.parameters.booleanParameter(""String_Node_Str"");
  monitorInputs=Parameters.parameters.booleanParameter(""String_Node_Str"");
  mutationChancePerMode=Parameters.parameters.booleanParameter(""String_Node_Str"");
  netio=Parameters.parameters.booleanParameter(""String_Node_Str"");
  nicheRestrictionOnModeMutation=Parameters.parameters.booleanParameter(""String_Node_Str"");
  onlyModeMutationWhenModesSame=Parameters.parameters.booleanParameter(""String_Node_Str"");
  pacmanFatalTimeLimit=Parameters.parameters.booleanParameter(""String_Node_Str"");
  pacManSensorCaching=Parameters.parameters.booleanParameter(""String_Node_Str"");
  polynomialWeightMutation=Parameters.parameters.booleanParameter(""String_Node_Str"");
  probabilisticSelection=Parameters.parameters.booleanParameter(""String_Node_Str"");
  randomArgMaxTieBreak=Parameters.parameters.booleanParameter(""String_Node_Str"");
  reachabilityReportsBuffers=Parameters.parameters.booleanParameter(""String_Node_Str"");
  recordPacman=Parameters.parameters.booleanParameter(""String_Node_Str"");
  recurrency=Parameters.parameters.booleanParameter(""String_Node_Str"");
  relativePacmanDirections=Parameters.parameters.booleanParameter(""String_Node_Str"");
  replayPacman=Parameters.parameters.booleanParameter(""String_Node_Str"");
  requireFitnessDifferenceForChange=Parameters.parameters.booleanParameter(""String_Node_Str"");
  showNetworks=Parameters.parameters.booleanParameter(""String_Node_Str"");
  showSubnetAnalysis=Parameters.parameters.booleanParameter(""String_Node_Str"");
  softmaxModeSelection=Parameters.parameters.booleanParameter(""String_Node_Str"");
  softmaxSelection=Parameters.parameters.booleanParameter(""String_Node_Str"");
  timedPacman=Parameters.parameters.booleanParameter(""String_Node_Str"");
  trackCombiningCrossover=Parameters.parameters.booleanParameter(""String_Node_Str"");
  trialsMatchGenerations=Parameters.parameters.booleanParameter(""String_Node_Str"");
  tugKeepsParetoFront=Parameters.parameters.booleanParameter(""String_Node_Str"");
  tugObjectiveModeLinkage=Parameters.parameters.booleanParameter(""String_Node_Str"");
  tugObjectiveUsageLinkage=Parameters.parameters.booleanParameter(""String_Node_Str"");
  tugResetsToPreviousGoals=Parameters.parameters.booleanParameter(""String_Node_Str"");
  ucb1Evaluation=Parameters.parameters.booleanParameter(""String_Node_Str"");
  viewModePreference=Parameters.parameters.booleanParameter(""String_Node_Str"");
  watch=Parameters.parameters.booleanParameter(""String_Node_Str"");
  weakenBeforeModeMutation=Parameters.parameters.booleanParameter(""String_Node_Str"");
  weightedAverageModeAggregation=Parameters.parameters.booleanParameter(""String_Node_Str"");
  disabledMode=Parameters.parameters.integerParameter(""String_Node_Str"");
  fsLinksPerOut=Parameters.parameters.integerParameter(""String_Node_Str"");
  ftype=Parameters.parameters.integerParameter(""String_Node_Str"");
  ghostsForBonus=Parameters.parameters.integerParameter(""String_Node_Str"");
  initialMaze=Parameters.parameters.integerParameter(""String_Node_Str"");
  justMaze=Parameters.parameters.integerParameter(""String_Node_Str"");
  litterSize=Parameters.parameters.integerParameter(""String_Node_Str"");
  maxCampTrials=Parameters.parameters.integerParameter(""String_Node_Str"");
  maxModes=Parameters.parameters.integerParameter(""String_Node_Str"");
  maxTrials=Parameters.parameters.integerParameter(""String_Node_Str"");
  multitaskModules=Parameters.parameters.integerParameter(""String_Node_Str"");
  numActiveGhosts=Parameters.parameters.integerParameter(""String_Node_Str"");
  pacManLevelTimeLimit=Parameters.parameters.integerParameter(""String_Node_Str"");
  stopMode=Parameters.parameters.integerParameter(""String_Node_Str"");
  syllabusSize=Parameters.parameters.integerParameter(""String_Node_Str"");
  trialIncreaseFrequency=Parameters.parameters.integerParameter(""String_Node_Str"");
  trials=Parameters.parameters.integerParameter(""String_Node_Str"");
  campPercentOfTrials=Parameters.parameters.doubleParameter(""String_Node_Str"");
  distanceForNewMode=Parameters.parameters.doubleParameter(""String_Node_Str"");
  inheritProportion=Parameters.parameters.doubleParameter(""String_Node_Str"");
  linkExpressionThreshold=Parameters.parameters.doubleParameter(""String_Node_Str"");
  netChangeActivationRate=Parameters.parameters.doubleParameter(""String_Node_Str"");
  preferenceNeuronDecay=Parameters.parameters.doubleParameter(""String_Node_Str"");
  preferenceNeuronFatigueUnit=Parameters.parameters.doubleParameter(""String_Node_Str"");
  percentDeathCampsToSave=Parameters.parameters.doubleParameter(""String_Node_Str"");
  percentPowerPillCampsToSave=Parameters.parameters.doubleParameter(""String_Node_Str"");
  perLinkMutateRate=Parameters.parameters.doubleParameter(""String_Node_Str"");
  remainingTUGGoalRatio=Parameters.parameters.doubleParameter(""String_Node_Str"");
  softmaxTemperature=Parameters.parameters.doubleParameter(""String_Node_Str"");
  usageForNewMode=Parameters.parameters.doubleParameter(""String_Node_Str"");
}","/** 
 * To be called once and only once after Parameters are initialized. None of the variables here should ever be changed. TODO: In Parameters, way to specify if parameter is read-only
 */
public static void load(){
  averageScoreHistory=Parameters.parameters.booleanParameter(""String_Node_Str"");
  convolution=Parameters.parameters.booleanParameter(""String_Node_Str"");
  substrateBiasLocationInputs=Parameters.parameters.booleanParameter(""String_Node_Str"");
  substrateLocationInputs=Parameters.parameters.booleanParameter(""String_Node_Str"");
  monitorSubstrates=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeSigmoidFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeTanhFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeIdFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeFullApproxFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeApproxFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeGaussFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeSineFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeSawtoothFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeAbsValFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeHalfLinearPiecewiseFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeStretchedTanhFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeReLUFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeSoftplusFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeLeakyReLUFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeFullSawtoothFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeTriangleWaveFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  includeSquareWaveFunction=Parameters.parameters.booleanParameter(""String_Node_Str"");
  inheritFitness=Parameters.parameters.booleanParameter(""String_Node_Str"");
  splitRawTetrisInputs=Parameters.parameters.booleanParameter(""String_Node_Str"");
  allowMultipleFunctions=Parameters.parameters.booleanParameter(""String_Node_Str"");
  allowRandomGhostReversals=Parameters.parameters.booleanParameter(""String_Node_Str"");
  checkEachAbsoluteDistanceGhostSort=Parameters.parameters.booleanParameter(""String_Node_Str"");
  checkEachFlushWalls=Parameters.parameters.booleanParameter(""String_Node_Str"");
  connectToInputs=Parameters.parameters.booleanParameter(""String_Node_Str"");
  constantTUGGoalIncrements=Parameters.parameters.booleanParameter(""String_Node_Str"");
  cullCrossovers=Parameters.parameters.booleanParameter(""String_Node_Str"");
  cullModeMutations=Parameters.parameters.booleanParameter(""String_Node_Str"");
  deleteLeastUsed=Parameters.parameters.booleanParameter(""String_Node_Str"");
  eliminateImpossibleDirections=Parameters.parameters.booleanParameter(""String_Node_Str"");
  ensembleModeMutation=Parameters.parameters.booleanParameter(""String_Node_Str"");
  evalReport=Parameters.parameters.booleanParameter(""String_Node_Str"");
  exploreWeightsOfNewStructure=Parameters.parameters.booleanParameter(""String_Node_Str"");
  freezeBeforeModeMutation=Parameters.parameters.booleanParameter(""String_Node_Str"");
  fs=Parameters.parameters.booleanParameter(""String_Node_Str"");
  hierarchicalMultitask=Parameters.parameters.booleanParameter(""String_Node_Str"");
  hyperNEAT=Parameters.parameters.booleanParameter(""String_Node_Str"");
  hybrID=Parameters.parameters.booleanParameter(""String_Node_Str"");
  imprisonedWhileEdible=Parameters.parameters.booleanParameter(""String_Node_Str"");
  infiniteEdibleTime=Parameters.parameters.booleanParameter(""String_Node_Str"");
  leo=Parameters.parameters.booleanParameter(""String_Node_Str"");
  evolveHyperNEATBias=Parameters.parameters.booleanParameter(""String_Node_Str"");
  logChildScores=Parameters.parameters.booleanParameter(""String_Node_Str"");
  meltAfterCrossover=Parameters.parameters.booleanParameter(""String_Node_Str"");
  minimalSubnetExecution=Parameters.parameters.booleanParameter(""String_Node_Str"");
  minimizeSpliceImpact=Parameters.parameters.booleanParameter(""String_Node_Str"");
  mmpActivationId=Parameters.parameters.booleanParameter(""String_Node_Str"");
  monitorInputs=Parameters.parameters.booleanParameter(""String_Node_Str"");
  mutationChancePerMode=Parameters.parameters.booleanParameter(""String_Node_Str"");
  netio=Parameters.parameters.booleanParameter(""String_Node_Str"");
  nicheRestrictionOnModeMutation=Parameters.parameters.booleanParameter(""String_Node_Str"");
  onlyModeMutationWhenModesSame=Parameters.parameters.booleanParameter(""String_Node_Str"");
  pacmanFatalTimeLimit=Parameters.parameters.booleanParameter(""String_Node_Str"");
  pacManSensorCaching=Parameters.parameters.booleanParameter(""String_Node_Str"");
  polynomialWeightMutation=Parameters.parameters.booleanParameter(""String_Node_Str"");
  probabilisticSelection=Parameters.parameters.booleanParameter(""String_Node_Str"");
  randomArgMaxTieBreak=Parameters.parameters.booleanParameter(""String_Node_Str"");
  reachabilityReportsBuffers=Parameters.parameters.booleanParameter(""String_Node_Str"");
  recordPacman=Parameters.parameters.booleanParameter(""String_Node_Str"");
  recurrency=Parameters.parameters.booleanParameter(""String_Node_Str"");
  relativePacmanDirections=Parameters.parameters.booleanParameter(""String_Node_Str"");
  replayPacman=Parameters.parameters.booleanParameter(""String_Node_Str"");
  requireFitnessDifferenceForChange=Parameters.parameters.booleanParameter(""String_Node_Str"");
  showNetworks=Parameters.parameters.booleanParameter(""String_Node_Str"");
  showSubnetAnalysis=Parameters.parameters.booleanParameter(""String_Node_Str"");
  softmaxModeSelection=Parameters.parameters.booleanParameter(""String_Node_Str"");
  softmaxSelection=Parameters.parameters.booleanParameter(""String_Node_Str"");
  timedPacman=Parameters.parameters.booleanParameter(""String_Node_Str"");
  trackCombiningCrossover=Parameters.parameters.booleanParameter(""String_Node_Str"");
  trialsMatchGenerations=Parameters.parameters.booleanParameter(""String_Node_Str"");
  tugKeepsParetoFront=Parameters.parameters.booleanParameter(""String_Node_Str"");
  tugObjectiveModeLinkage=Parameters.parameters.booleanParameter(""String_Node_Str"");
  tugObjectiveUsageLinkage=Parameters.parameters.booleanParameter(""String_Node_Str"");
  tugResetsToPreviousGoals=Parameters.parameters.booleanParameter(""String_Node_Str"");
  ucb1Evaluation=Parameters.parameters.booleanParameter(""String_Node_Str"");
  viewModePreference=Parameters.parameters.booleanParameter(""String_Node_Str"");
  watch=Parameters.parameters.booleanParameter(""String_Node_Str"");
  weakenBeforeModeMutation=Parameters.parameters.booleanParameter(""String_Node_Str"");
  weightedAverageModeAggregation=Parameters.parameters.booleanParameter(""String_Node_Str"");
  disabledMode=Parameters.parameters.integerParameter(""String_Node_Str"");
  fsLinksPerOut=Parameters.parameters.integerParameter(""String_Node_Str"");
  ftype=Parameters.parameters.integerParameter(""String_Node_Str"");
  ghostsForBonus=Parameters.parameters.integerParameter(""String_Node_Str"");
  initialMaze=Parameters.parameters.integerParameter(""String_Node_Str"");
  justMaze=Parameters.parameters.integerParameter(""String_Node_Str"");
  litterSize=Parameters.parameters.integerParameter(""String_Node_Str"");
  maxCampTrials=Parameters.parameters.integerParameter(""String_Node_Str"");
  maxModes=Parameters.parameters.integerParameter(""String_Node_Str"");
  maxTrials=Parameters.parameters.integerParameter(""String_Node_Str"");
  multitaskModules=Parameters.parameters.integerParameter(""String_Node_Str"");
  numActiveGhosts=Parameters.parameters.integerParameter(""String_Node_Str"");
  pacManLevelTimeLimit=Parameters.parameters.integerParameter(""String_Node_Str"");
  stopMode=Parameters.parameters.integerParameter(""String_Node_Str"");
  syllabusSize=Parameters.parameters.integerParameter(""String_Node_Str"");
  trialIncreaseFrequency=Parameters.parameters.integerParameter(""String_Node_Str"");
  trials=Parameters.parameters.integerParameter(""String_Node_Str"");
  campPercentOfTrials=Parameters.parameters.doubleParameter(""String_Node_Str"");
  distanceForNewMode=Parameters.parameters.doubleParameter(""String_Node_Str"");
  inheritProportion=Parameters.parameters.doubleParameter(""String_Node_Str"");
  linkExpressionThreshold=Parameters.parameters.doubleParameter(""String_Node_Str"");
  netChangeActivationRate=Parameters.parameters.doubleParameter(""String_Node_Str"");
  preferenceNeuronDecay=Parameters.parameters.doubleParameter(""String_Node_Str"");
  preferenceNeuronFatigueUnit=Parameters.parameters.doubleParameter(""String_Node_Str"");
  percentDeathCampsToSave=Parameters.parameters.doubleParameter(""String_Node_Str"");
  percentPowerPillCampsToSave=Parameters.parameters.doubleParameter(""String_Node_Str"");
  perLinkMutateRate=Parameters.parameters.doubleParameter(""String_Node_Str"");
  remainingTUGGoalRatio=Parameters.parameters.doubleParameter(""String_Node_Str"");
  softmaxTemperature=Parameters.parameters.doubleParameter(""String_Node_Str"");
  usageForNewMode=Parameters.parameters.doubleParameter(""String_Node_Str"");
}"
39129,"/** 
 * Calculates the total number of features. Equation is set up in such a way to allow for an array of inputs to take in certain inputs.
 */
@Override public int numFeatures(){
  return worldWidth + (worldWidth - 1) + (CommonConstants.hyperNEAT ? 2 : 3);
}","/** 
 * Calculates the total number of features. Equation is set up in such a way to allow for an array of inputs to take in certain inputs.
 */
@Override public int numFeatures(){
  return worldWidth + (worldWidth - 1) + (CommonConstants.hyperNEAT || CommonConstants.hybrID ? 2 : 3);
}"
39130,"/** 
 * Extract focuses on finding the holes in the current world state. A hole being a non occupied space beneath an occupied space.
 * @param o Observation 
 * @return array of inputs
 */
@Override public double[] extract(Observation o){
  double[] inputs=new double[numFeatures()];
  int[] worldState=new int[worldWidth * worldHeight];
  System.arraycopy(o.intArray,0,worldState,0,worldWidth * worldHeight);
  int in=0;
  double holes=0;
  int firstHeightIndex=in;
  double maxHeight=0;
  for (int i=0; i < worldWidth; i++) {
    double h=columnHeight(i,worldState);
    holes+=columnHoles(i,worldState,(int)h);
    maxHeight=Math.max(h,maxHeight);
    inputs[in++]=h;
  }
  for (int i=0; i < worldWidth - 1; i++) {
    inputs[in++]=Math.abs(inputs[firstHeightIndex + i] - inputs[firstHeightIndex + i + 1]);
  }
  inputs[in++]=maxHeight;
  inputs[in++]=holes;
  if (!CommonConstants.hyperNEAT) {
    inputs[in++]=1;
  }
  return inputs;
}","/** 
 * Extract focuses on finding the holes in the current world state. A hole being a non occupied space beneath an occupied space.
 * @param o Observation 
 * @return array of inputs
 */
@Override public double[] extract(Observation o){
  double[] inputs=new double[numFeatures()];
  int[] worldState=new int[worldWidth * worldHeight];
  System.arraycopy(o.intArray,0,worldState,0,worldWidth * worldHeight);
  int in=0;
  double holes=0;
  int firstHeightIndex=in;
  double maxHeight=0;
  for (int i=0; i < worldWidth; i++) {
    double h=columnHeight(i,worldState);
    holes+=columnHoles(i,worldState,(int)h);
    maxHeight=Math.max(h,maxHeight);
    inputs[in++]=h;
  }
  for (int i=0; i < worldWidth - 1; i++) {
    inputs[in++]=Math.abs(inputs[firstHeightIndex + i] - inputs[firstHeightIndex + i + 1]);
  }
  inputs[in++]=maxHeight;
  inputs[in++]=holes;
  if (!CommonConstants.hyperNEAT && !CommonConstants.hybrID) {
    inputs[in++]=1;
  }
  return inputs;
}"
39131,"/** 
 * Returns an array of feature labels given the current extractor
 */
@Override public String[] featureLabels(){
  String[] labels=new String[numFeatures()];
  int in=0;
  for (int i=0; i < worldWidth; i++) {
    labels[in++]=""String_Node_Str"" + i + ""String_Node_Str"";
  }
  for (int i=0; i < worldWidth - 1; i++) {
    labels[in++]=""String_Node_Str"" + i + ""String_Node_Str""+ (i + 1)+ ""String_Node_Str"";
  }
  labels[in++]=""String_Node_Str"";
  labels[in++]=""String_Node_Str"";
  if (!CommonConstants.hyperNEAT) {
    labels[in++]=""String_Node_Str"";
  }
  return labels;
}","/** 
 * Returns an array of feature labels given the current extractor
 */
@Override public String[] featureLabels(){
  String[] labels=new String[numFeatures()];
  int in=0;
  for (int i=0; i < worldWidth; i++) {
    labels[in++]=""String_Node_Str"" + i + ""String_Node_Str"";
  }
  for (int i=0; i < worldWidth - 1; i++) {
    labels[in++]=""String_Node_Str"" + i + ""String_Node_Str""+ (i + 1)+ ""String_Node_Str"";
  }
  labels[in++]=""String_Node_Str"";
  labels[in++]=""String_Node_Str"";
  if (!CommonConstants.hyperNEAT && !CommonConstants.hybrID) {
    labels[in++]=""String_Node_Str"";
  }
  return labels;
}"
39132,"/** 
 * Takes raw features and scales them to range [0,1] for neural network input.
 * @param inputs
 * @return scaled inputs
 */
@Override public double[] scaleInputs(double[] inputs){
  double[] next=new double[inputs.length];
  int height_features=TetrisState.worldWidth + (TetrisState.worldWidth - 1) + 1;
  for (int i=0; i < height_features; i++) {
    next[i]=inputs[i] / TetrisState.worldHeight;
  }
  next[height_features]=inputs[height_features] / TetrisState.TETRIS_STATE_NUMBER_WORLD_GRID_BLOCKS;
  if (!CommonConstants.hyperNEAT) {
    next[height_features + 1]=1.0;
  }
  return next;
}","/** 
 * Takes raw features and scales them to range [0,1] for neural network input.
 * @param inputs
 * @return scaled inputs
 */
@Override public double[] scaleInputs(double[] inputs){
  double[] next=new double[inputs.length];
  int height_features=TetrisState.worldWidth + (TetrisState.worldWidth - 1) + 1;
  for (int i=0; i < height_features; i++) {
    next[i]=inputs[i] / TetrisState.worldHeight;
  }
  next[height_features]=inputs[height_features] / TetrisState.TETRIS_STATE_NUMBER_WORLD_GRID_BLOCKS;
  if (!CommonConstants.hyperNEAT && !CommonConstants.hybrID) {
    next[height_features + 1]=1.0;
  }
  return next;
}"
39133,"/** 
 * Define all parameter labels, default values, and help text
 */
public final void fillDefaults(){
  integerOptions.add(""String_Node_Str"",600,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",20,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",150,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",250,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",30,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",35,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3 * Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",ActivationFunctions.FTYPE_TANH,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",500,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",17,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",30,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",7,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",25,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3 * Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",20,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.DELAY,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Keyboard.NOTE_LENGTH_DEFAULT,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",250,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",500,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",36,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",36,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  longOptions.add(""String_Node_Str"",0l,""String_Node_Str"");
  longOptions.add(""String_Node_Str"",0l,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.4,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.2,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.99,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.25,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.025,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",-1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",10.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",50.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.25,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.8,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.05,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.4,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.2,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",Math.PI / 8.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",5.0 * Breve2DGame.AGENT_MAGNITUDE,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",SoundUtilExamples.PORTAL2_WAV,""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",SoundUtilExamples.FUR_ELISE_MID,""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",BoardGamePlayerRandom.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",PieceDifferentialBoardGameHeuristic.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",BoardGamePlayerOneStepEval.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TwoDimensionalRawBoardGameFeatureExtractor.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",CenteredSubstrateMapping.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",PreyFleeClosestPredatorController.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",AggressivePredatorController.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GaussianGenerator.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Max.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",JunctionNodes.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GhostsPillsMap.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TWEANNCrossover.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",SimpleWeaponManager.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",OpponentRelativeMovementOutputModel.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",OpponentRelativeSensorModel.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",FullTaskMediator.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",RushingPlayer.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",PlayerPredatorMonsterPrey.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GhostsThenPillsModeSelector.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",DomainSpecificCharacterization.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",StarterPacMan.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Legacy.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",LimitedSinglePopulationGenerationalEAExperiment.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",NSGA2.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",StateVariableExtractor.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",RLGlueAgent.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TWEANNGenotype.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",NNComplexEvaluationFunction.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",WinLossFitnessFunction.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",UCT.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",RandomBiasedAI.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
}","/** 
 * Define all parameter labels, default values, and help text
 */
public final void fillDefaults(){
  integerOptions.add(""String_Node_Str"",600,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",20,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",150,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",250,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",30,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",35,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3 * Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",ActivationFunctions.FTYPE_TANH,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",500,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",17,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",30,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",7,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",25,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3 * Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",20,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.DELAY,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Keyboard.NOTE_LENGTH_DEFAULT,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",250,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",500,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",36,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",36,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  longOptions.add(""String_Node_Str"",0l,""String_Node_Str"");
  longOptions.add(""String_Node_Str"",0l,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.4,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.2,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.99,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.25,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.025,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",-1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",10.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",50.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.25,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.8,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.05,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.4,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.2,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",Math.PI / 8.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",5.0 * Breve2DGame.AGENT_MAGNITUDE,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",SoundUtilExamples.PORTAL2_WAV,""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",SoundUtilExamples.FUR_ELISE_MID,""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",BoardGamePlayerRandom.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",PieceDifferentialBoardGameHeuristic.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",BoardGamePlayerOneStepEval.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TwoDimensionalRawBoardGameFeatureExtractor.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",CenteredSubstrateMapping.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",PreyFleeClosestPredatorController.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",AggressivePredatorController.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GaussianGenerator.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Max.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",JunctionNodes.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GhostsPillsMap.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TWEANNCrossover.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",SimpleWeaponManager.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",OpponentRelativeMovementOutputModel.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",OpponentRelativeSensorModel.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",FullTaskMediator.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",RushingPlayer.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",PlayerPredatorMonsterPrey.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GhostsThenPillsModeSelector.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",DomainSpecificCharacterization.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",StarterPacMan.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Legacy.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",LimitedSinglePopulationGenerationalEAExperiment.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",NSGA2.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",StateVariableExtractor.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",RLGlueAgent.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TWEANNGenotype.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",NNComplexEvaluationFunction.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",WinLossFitnessFunction.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",UCT.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",RandomBiasedAI.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
}"
39134,"/** 
 * Default Constructor
 * @throws IllegalAccessException 
 */
public InteractiveEvolutionTask() throws IllegalAccessException {
  inputMultipliers=new double[numCPPNInputs()];
  selectedCPPNs=new LinkedList<Integer>();
  MMNEAT.registerFitnessFunction(""String_Node_Str"");
  if (Parameters.parameters.integerParameter(""String_Node_Str"") % InteractiveEvolutionTask.NUM_COLUMNS != 0) {
    Parameters.parameters.setInteger(""String_Node_Str"",InteractiveEvolutionTask.NUM_COLUMNS * ((Parameters.parameters.integerParameter(""String_Node_Str"") / InteractiveEvolutionTask.NUM_COLUMNS) + 1));
    System.out.println(""String_Node_Str"" + Parameters.parameters.integerParameter(""String_Node_Str""));
  }
  numButtonOptions=Parameters.parameters.integerParameter(""String_Node_Str"");
  numRows=numButtonOptions / NUM_COLUMNS;
  picSize=Parameters.parameters.integerParameter(""String_Node_Str"");
  chosen=new boolean[numButtonOptions];
  showNetwork=false;
  waitingForUser=false;
  activation=new boolean[Math.abs(SQUARE_WAVE_CHECKBOX_INDEX) + 1];
  Arrays.fill(activation,true);
  if (MMNEAT.browseLineage) {
    return;
  }
  frame=new JFrame(getWindowTitle());
  panels=new ArrayList<JPanel>();
  buttons=new ArrayList<JButton>();
  frame.setSize(Toolkit.getDefaultToolkit().getScreenSize());
  picSize=Math.min(picSize,frame.getWidth() / NUM_COLUMNS);
  frame.setLocation(300,100);
  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  frame.setLayout(new GridLayout(numRows + 1,0));
  frame.setVisible(true);
  topper=new JPanel();
  top=new JPanel();
  JPanel bottom=new JPanel();
  ImageIcon reset=new ImageIcon(""String_Node_Str"");
  Image reset2=reset.getImage().getScaledInstance(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT,1);
  ImageIcon save=new ImageIcon(""String_Node_Str"");
  Image save2=save.getImage().getScaledInstance(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT,1);
  ImageIcon evolve=new ImageIcon(""String_Node_Str"");
  Image evolve2=evolve.getImage().getScaledInstance(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT,1);
  ImageIcon network=new ImageIcon(""String_Node_Str"");
  Image network2=network.getImage().getScaledInstance(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT,1);
  ImageIcon undo=new ImageIcon(""String_Node_Str"");
  Image undo2=undo.getImage().getScaledInstance(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT,1);
  JButton resetButton=new JButton(new ImageIcon(reset2));
  JButton saveButton=new JButton(new ImageIcon(save2));
  JButton evolveButton=new JButton(new ImageIcon(evolve2));
  JButton networkButton=new JButton(new ImageIcon(network2));
  JButton undoButton=new JButton(new ImageIcon(undo2));
  resetButton.setPreferredSize(new Dimension(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT));
  saveButton.setPreferredSize(new Dimension(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT));
  evolveButton.setPreferredSize(new Dimension(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT));
  networkButton.setPreferredSize(new Dimension(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT));
  undoButton.setPreferredSize(new Dimension(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT));
  resetButton.setText(""String_Node_Str"");
  saveButton.setText(""String_Node_Str"");
  evolveButton.setText(""String_Node_Str"");
  networkButton.setText(""String_Node_Str"");
  undoButton.setText(""String_Node_Str"");
  JCheckBox sigmoid=new JCheckBox(""String_Node_Str"",CommonConstants.includeSigmoidFunction);
  activation[Math.abs(SIGMOID_CHECKBOX_INDEX)]=CommonConstants.includeSigmoidFunction;
  JCheckBox tanh=new JCheckBox(""String_Node_Str"",CommonConstants.includeTanhFunction);
  activation[Math.abs(TANH_CHECKBOX_INDEX)]=CommonConstants.includeTanhFunction;
  JCheckBox id=new JCheckBox(""String_Node_Str"",CommonConstants.includeIdFunction);
  activation[Math.abs(ID_CHECKBOX_INDEX)]=CommonConstants.includeIdFunction;
  JCheckBox fullApprox=new JCheckBox(""String_Node_Str"",CommonConstants.includeFullApproxFunction);
  activation[Math.abs(FULLAPPROX_CHECKBOX_INDEX)]=CommonConstants.includeFullApproxFunction;
  JCheckBox approx=new JCheckBox(""String_Node_Str"",CommonConstants.includeApproxFunction);
  activation[Math.abs(APPROX_CHECKBOX_INDEX)]=CommonConstants.includeApproxFunction;
  JCheckBox gaussian=new JCheckBox(""String_Node_Str"",CommonConstants.includeGaussFunction);
  activation[Math.abs(GAUSSIAN_CHECKBOX_INDEX)]=CommonConstants.includeGaussFunction;
  JCheckBox sine=new JCheckBox(""String_Node_Str"",CommonConstants.includeSineFunction);
  activation[Math.abs(SINE_CHECKBOX_INDEX)]=CommonConstants.includeSineFunction;
  JCheckBox sawtooth=new JCheckBox(""String_Node_Str"",CommonConstants.includeSawtoothFunction);
  activation[Math.abs(SAWTOOTH_CHECKBOX_INDEX)]=CommonConstants.includeSawtoothFunction;
  JCheckBox absVal=new JCheckBox(""String_Node_Str"",CommonConstants.includeAbsValFunction);
  activation[Math.abs(ABSVAL_CHECKBOX_INDEX)]=CommonConstants.includeAbsValFunction;
  JCheckBox halfLinear=new JCheckBox(""String_Node_Str"",CommonConstants.includeHalfLinearPiecewiseFunction);
  activation[Math.abs(HALF_LINEAR_CHECKBOX_INDEX)]=CommonConstants.includeHalfLinearPiecewiseFunction;
  JCheckBox stretchTanh=new JCheckBox(""String_Node_Str"",CommonConstants.includeStretchedTanhFunction);
  activation[Math.abs(STRETCHTANH_CHECKBOX_INDEX)]=CommonConstants.includeStretchedTanhFunction;
  JCheckBox ReLU=new JCheckBox(""String_Node_Str"",CommonConstants.includeReLUFunction);
  activation[Math.abs(RELU_CHECKBOX_INDEX)]=CommonConstants.includeReLUFunction;
  JCheckBox Softplus=new JCheckBox(""String_Node_Str"",CommonConstants.includeSoftplusFunction);
  activation[Math.abs(SOFTPLUS_CHECKBOX_INDEX)]=CommonConstants.includeSoftplusFunction;
  JCheckBox LeakyReLU=new JCheckBox(""String_Node_Str"",CommonConstants.includeLeakyReLUFunction);
  activation[Math.abs(LEAKY_RELU_CHECKBOX_INDEX)]=CommonConstants.includeLeakyReLUFunction;
  JCheckBox fullSawtooth=new JCheckBox(""String_Node_Str"",CommonConstants.includeFullSawtoothFunction);
  activation[Math.abs(FULL_SAWTOOTH_CHECKBOX_INDEX)]=CommonConstants.includeFullSawtoothFunction;
  JCheckBox triangleWave=new JCheckBox(""String_Node_Str"",CommonConstants.includeTriangleWaveFunction);
  activation[Math.abs(TRIANGLE_WAVE_CHECKBOX_INDEX)]=CommonConstants.includeTriangleWaveFunction;
  JCheckBox squareWave=new JCheckBox(""String_Node_Str"",CommonConstants.includeSquareWaveFunction);
  activation[Math.abs(SQUARE_WAVE_CHECKBOX_INDEX)]=CommonConstants.includeSquareWaveFunction;
  JSlider mutationsPerGeneration=new JSlider(JSlider.HORIZONTAL,MPG_MIN,MPG_MAX,MPG_DEFAULT);
  Hashtable<Integer,JLabel> labels=new Hashtable<>();
  evolveButton.setName(""String_Node_Str"" + EVOLVE_BUTTON_INDEX);
  evolveButton.setToolTipText(""String_Node_Str"");
  saveButton.setName(""String_Node_Str"" + SAVE_BUTTON_INDEX);
  saveButton.setToolTipText(""String_Node_Str"");
  resetButton.setName(""String_Node_Str"" + RESET_BUTTON_INDEX);
  resetButton.setToolTipText(""String_Node_Str"");
  networkButton.setName(""String_Node_Str"" + NETWORK_BUTTON_INDEX);
  networkButton.setToolTipText(""String_Node_Str"");
  undoButton.setName(""String_Node_Str"" + UNDO_BUTTON_INDEX);
  undoButton.setToolTipText(""String_Node_Str"");
  sigmoid.setName(""String_Node_Str"" + SIGMOID_CHECKBOX_INDEX);
  tanh.setName(""String_Node_Str"" + TANH_CHECKBOX_INDEX);
  absVal.setName(""String_Node_Str"" + ABSVAL_CHECKBOX_INDEX);
  id.setName(""String_Node_Str"" + ID_CHECKBOX_INDEX);
  gaussian.setName(""String_Node_Str"" + GAUSSIAN_CHECKBOX_INDEX);
  fullApprox.setName(""String_Node_Str"" + FULLAPPROX_CHECKBOX_INDEX);
  sine.setName(""String_Node_Str"" + SINE_CHECKBOX_INDEX);
  approx.setName(""String_Node_Str"" + APPROX_CHECKBOX_INDEX);
  sawtooth.setName(""String_Node_Str"" + SAWTOOTH_CHECKBOX_INDEX);
  halfLinear.setName(""String_Node_Str"" + HALF_LINEAR_CHECKBOX_INDEX);
  stretchTanh.setName(""String_Node_Str"" + STRETCHTANH_CHECKBOX_INDEX);
  ReLU.setName(""String_Node_Str"" + RELU_CHECKBOX_INDEX);
  Softplus.setName(""String_Node_Str"" + SOFTPLUS_CHECKBOX_INDEX);
  LeakyReLU.setName(""String_Node_Str"" + LEAKY_RELU_CHECKBOX_INDEX);
  fullSawtooth.setName(""String_Node_Str"" + FULL_SAWTOOTH_CHECKBOX_INDEX);
  triangleWave.setName(""String_Node_Str"" + TRIANGLE_WAVE_CHECKBOX_INDEX);
  squareWave.setName(""String_Node_Str"" + SQUARE_WAVE_CHECKBOX_INDEX);
  mutationsPerGeneration.setMinorTickSpacing(1);
  mutationsPerGeneration.setPaintTicks(true);
  labels.put(0,new JLabel(""String_Node_Str""));
  labels.put(10,new JLabel(""String_Node_Str""));
  mutationsPerGeneration.setLabelTable(labels);
  mutationsPerGeneration.setPaintLabels(true);
  mutationsPerGeneration.setPreferredSize(new Dimension(200,40));
  resetButton.addActionListener(this);
  saveButton.addActionListener(this);
  evolveButton.addActionListener(this);
  networkButton.addActionListener(this);
  undoButton.addActionListener(this);
  sigmoid.addActionListener(this);
  gaussian.addActionListener(this);
  sine.addActionListener(this);
  sawtooth.addActionListener(this);
  absVal.addActionListener(this);
  halfLinear.addActionListener(this);
  tanh.addActionListener(this);
  id.addActionListener(this);
  fullApprox.addActionListener(this);
  approx.addActionListener(this);
  stretchTanh.addActionListener(this);
  ReLU.addActionListener(this);
  Softplus.addActionListener(this);
  LeakyReLU.addActionListener(this);
  fullSawtooth.addActionListener(this);
  triangleWave.addActionListener(this);
  squareWave.addActionListener(this);
  mutationsPerGeneration.addChangeListener(this);
  sigmoid.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_SIGMOID));
  absVal.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_ABSVAL));
  approx.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_APPROX));
  fullApprox.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_FULLAPPROX));
  gaussian.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_GAUSS));
  halfLinear.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_HLPIECEWISE));
  id.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_ID));
  sawtooth.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_SAWTOOTH));
  sine.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_SINE));
  tanh.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_TANH));
  stretchTanh.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_STRETCHED_TANH));
  ReLU.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_RE_LU));
  Softplus.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_SOFTPLUS));
  LeakyReLU.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_LEAKY_RE_LU));
  fullSawtooth.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_FULLSAWTOOTH));
  triangleWave.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_TRIANGLEWAVE));
  squareWave.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_SQUAREWAVE));
  if (!simplifiedInteractiveInterface) {
    top.add(resetButton);
  }
  top.add(evolveButton);
  top.add(saveButton);
  if (!simplifiedInteractiveInterface) {
    top.add(networkButton);
    top.add(undoButton);
  }
  top.add(mutationsPerGeneration);
  if (!simplifiedInteractiveInterface) {
    bottom.add(halfLinear);
    bottom.add(absVal);
    bottom.add(sawtooth);
    bottom.add(sine);
    bottom.add(gaussian);
    bottom.add(sigmoid);
    bottom.add(tanh);
    bottom.add(id);
    bottom.add(fullApprox);
    bottom.add(approx);
    bottom.add(stretchTanh);
    bottom.add(ReLU);
    bottom.add(Softplus);
    bottom.add(LeakyReLU);
    bottom.add(fullSawtooth);
    bottom.add(triangleWave);
    bottom.add(squareWave);
  }
  topper.add(top);
  topper.add(bottom);
  panels.add(topper);
  addButtonPanels();
  for (  JPanel panel : panels)   frame.add(panel);
  int x=0;
  addButtonsToPanel(x++);
  inputCheckBoxes();
}","/** 
 * Default Constructor
 * @throws IllegalAccessException 
 */
public InteractiveEvolutionTask() throws IllegalAccessException {
  inputMultipliers=new double[numCPPNInputs()];
  selectedCPPNs=new LinkedList<Integer>();
  MMNEAT.registerFitnessFunction(""String_Node_Str"");
  if (Parameters.parameters.integerParameter(""String_Node_Str"") % InteractiveEvolutionTask.NUM_COLUMNS != 0) {
    Parameters.parameters.setInteger(""String_Node_Str"",InteractiveEvolutionTask.NUM_COLUMNS * ((Parameters.parameters.integerParameter(""String_Node_Str"") / InteractiveEvolutionTask.NUM_COLUMNS) + 1));
    System.out.println(""String_Node_Str"" + Parameters.parameters.integerParameter(""String_Node_Str""));
  }
  numButtonOptions=Parameters.parameters.integerParameter(""String_Node_Str"");
  numRows=numButtonOptions / NUM_COLUMNS;
  picSize=Parameters.parameters.integerParameter(""String_Node_Str"");
  chosen=new boolean[numButtonOptions];
  showNetwork=false;
  waitingForUser=false;
  activation=new boolean[Math.abs(SQUARE_WAVE_CHECKBOX_INDEX) + 1];
  Arrays.fill(activation,true);
  if (MMNEAT.browseLineage) {
    return;
  }
  frame=new JFrame(getWindowTitle());
  panels=new ArrayList<JPanel>();
  buttons=new ArrayList<JButton>();
  frame.setSize(Toolkit.getDefaultToolkit().getScreenSize());
  picSize=Math.min(picSize,frame.getWidth() / NUM_COLUMNS);
  frame.setLocation(300,100);
  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  frame.setLayout(new GridLayout(numRows + 1,0));
  frame.setVisible(true);
  topper=new JPanel();
  top=new JPanel();
  JPanel bottom=new JPanel();
  ImageIcon reset=new ImageIcon(""String_Node_Str"");
  Image reset2=reset.getImage().getScaledInstance(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT,1);
  ImageIcon save=new ImageIcon(""String_Node_Str"");
  Image save2=save.getImage().getScaledInstance(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT,1);
  ImageIcon evolve=new ImageIcon(""String_Node_Str"");
  Image evolve2=evolve.getImage().getScaledInstance(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT,1);
  ImageIcon network=new ImageIcon(""String_Node_Str"");
  Image network2=network.getImage().getScaledInstance(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT,1);
  ImageIcon undo=new ImageIcon(""String_Node_Str"");
  Image undo2=undo.getImage().getScaledInstance(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT,1);
  JButton resetButton=new JButton(new ImageIcon(reset2));
  JButton saveButton=new JButton(new ImageIcon(save2));
  JButton evolveButton=new JButton(new ImageIcon(evolve2));
  JButton networkButton=new JButton(new ImageIcon(network2));
  JButton undoButton=new JButton(new ImageIcon(undo2));
  resetButton.setPreferredSize(new Dimension(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT));
  saveButton.setPreferredSize(new Dimension(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT));
  evolveButton.setPreferredSize(new Dimension(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT));
  networkButton.setPreferredSize(new Dimension(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT));
  undoButton.setPreferredSize(new Dimension(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT));
  resetButton.setText(""String_Node_Str"");
  saveButton.setText(""String_Node_Str"");
  evolveButton.setText(""String_Node_Str"");
  networkButton.setText(""String_Node_Str"");
  undoButton.setText(""String_Node_Str"");
  JCheckBox sigmoid=new JCheckBox(""String_Node_Str"",CommonConstants.includeSigmoidFunction);
  activation[Math.abs(SIGMOID_CHECKBOX_INDEX)]=CommonConstants.includeSigmoidFunction;
  JCheckBox tanh=new JCheckBox(""String_Node_Str"",CommonConstants.includeTanhFunction);
  activation[Math.abs(TANH_CHECKBOX_INDEX)]=CommonConstants.includeTanhFunction;
  JCheckBox id=new JCheckBox(""String_Node_Str"",CommonConstants.includeIdFunction);
  activation[Math.abs(ID_CHECKBOX_INDEX)]=CommonConstants.includeIdFunction;
  JCheckBox fullApprox=new JCheckBox(""String_Node_Str"",CommonConstants.includeFullApproxFunction);
  activation[Math.abs(FULLAPPROX_CHECKBOX_INDEX)]=CommonConstants.includeFullApproxFunction;
  JCheckBox approx=new JCheckBox(""String_Node_Str"",CommonConstants.includeApproxFunction);
  activation[Math.abs(APPROX_CHECKBOX_INDEX)]=CommonConstants.includeApproxFunction;
  JCheckBox gaussian=new JCheckBox(""String_Node_Str"",CommonConstants.includeGaussFunction);
  activation[Math.abs(GAUSSIAN_CHECKBOX_INDEX)]=CommonConstants.includeGaussFunction;
  JCheckBox sine=new JCheckBox(""String_Node_Str"",CommonConstants.includeSineFunction);
  activation[Math.abs(SINE_CHECKBOX_INDEX)]=CommonConstants.includeSineFunction;
  JCheckBox sawtooth=new JCheckBox(""String_Node_Str"",CommonConstants.includeSawtoothFunction);
  activation[Math.abs(SAWTOOTH_CHECKBOX_INDEX)]=CommonConstants.includeSawtoothFunction;
  JCheckBox absVal=new JCheckBox(""String_Node_Str"",CommonConstants.includeAbsValFunction);
  activation[Math.abs(ABSVAL_CHECKBOX_INDEX)]=CommonConstants.includeAbsValFunction;
  JCheckBox halfLinear=new JCheckBox(""String_Node_Str"",CommonConstants.includeHalfLinearPiecewiseFunction);
  activation[Math.abs(HALF_LINEAR_CHECKBOX_INDEX)]=CommonConstants.includeHalfLinearPiecewiseFunction;
  JCheckBox stretchTanh=new JCheckBox(""String_Node_Str"",CommonConstants.includeStretchedTanhFunction);
  activation[Math.abs(STRETCHTANH_CHECKBOX_INDEX)]=CommonConstants.includeStretchedTanhFunction;
  JCheckBox ReLU=new JCheckBox(""String_Node_Str"",CommonConstants.includeReLUFunction);
  activation[Math.abs(RELU_CHECKBOX_INDEX)]=CommonConstants.includeReLUFunction;
  JCheckBox Softplus=new JCheckBox(""String_Node_Str"",CommonConstants.includeSoftplusFunction);
  activation[Math.abs(SOFTPLUS_CHECKBOX_INDEX)]=CommonConstants.includeSoftplusFunction;
  JCheckBox LeakyReLU=new JCheckBox(""String_Node_Str"",CommonConstants.includeLeakyReLUFunction);
  activation[Math.abs(LEAKY_RELU_CHECKBOX_INDEX)]=CommonConstants.includeLeakyReLUFunction;
  JCheckBox fullSawtooth=new JCheckBox(""String_Node_Str"",CommonConstants.includeFullSawtoothFunction);
  activation[Math.abs(FULL_SAWTOOTH_CHECKBOX_INDEX)]=CommonConstants.includeFullSawtoothFunction;
  JCheckBox triangleWave=new JCheckBox(""String_Node_Str"",CommonConstants.includeTriangleWaveFunction);
  activation[Math.abs(TRIANGLE_WAVE_CHECKBOX_INDEX)]=CommonConstants.includeTriangleWaveFunction;
  JCheckBox squareWave=new JCheckBox(""String_Node_Str"",CommonConstants.includeSquareWaveFunction);
  activation[Math.abs(SQUARE_WAVE_CHECKBOX_INDEX)]=CommonConstants.includeSquareWaveFunction;
  JSlider mutationsPerGeneration=new JSlider(JSlider.HORIZONTAL,MPG_MIN,MPG_MAX,MPG_DEFAULT);
  Hashtable<Integer,JLabel> labels=new Hashtable<>();
  evolveButton.setName(""String_Node_Str"" + EVOLVE_BUTTON_INDEX);
  evolveButton.setToolTipText(""String_Node_Str"");
  saveButton.setName(""String_Node_Str"" + SAVE_BUTTON_INDEX);
  saveButton.setToolTipText(""String_Node_Str"");
  resetButton.setName(""String_Node_Str"" + RESET_BUTTON_INDEX);
  resetButton.setToolTipText(""String_Node_Str"");
  networkButton.setName(""String_Node_Str"" + NETWORK_BUTTON_INDEX);
  networkButton.setToolTipText(""String_Node_Str"");
  undoButton.setName(""String_Node_Str"" + UNDO_BUTTON_INDEX);
  undoButton.setToolTipText(""String_Node_Str"");
  sigmoid.setName(""String_Node_Str"" + SIGMOID_CHECKBOX_INDEX);
  tanh.setName(""String_Node_Str"" + TANH_CHECKBOX_INDEX);
  absVal.setName(""String_Node_Str"" + ABSVAL_CHECKBOX_INDEX);
  id.setName(""String_Node_Str"" + ID_CHECKBOX_INDEX);
  gaussian.setName(""String_Node_Str"" + GAUSSIAN_CHECKBOX_INDEX);
  fullApprox.setName(""String_Node_Str"" + FULLAPPROX_CHECKBOX_INDEX);
  sine.setName(""String_Node_Str"" + SINE_CHECKBOX_INDEX);
  approx.setName(""String_Node_Str"" + APPROX_CHECKBOX_INDEX);
  sawtooth.setName(""String_Node_Str"" + SAWTOOTH_CHECKBOX_INDEX);
  halfLinear.setName(""String_Node_Str"" + HALF_LINEAR_CHECKBOX_INDEX);
  stretchTanh.setName(""String_Node_Str"" + STRETCHTANH_CHECKBOX_INDEX);
  ReLU.setName(""String_Node_Str"" + RELU_CHECKBOX_INDEX);
  Softplus.setName(""String_Node_Str"" + SOFTPLUS_CHECKBOX_INDEX);
  LeakyReLU.setName(""String_Node_Str"" + LEAKY_RELU_CHECKBOX_INDEX);
  fullSawtooth.setName(""String_Node_Str"" + FULL_SAWTOOTH_CHECKBOX_INDEX);
  triangleWave.setName(""String_Node_Str"" + TRIANGLE_WAVE_CHECKBOX_INDEX);
  squareWave.setName(""String_Node_Str"" + SQUARE_WAVE_CHECKBOX_INDEX);
  mutationsPerGeneration.setMinorTickSpacing(1);
  mutationsPerGeneration.setPaintTicks(true);
  labels.put(0,new JLabel(""String_Node_Str""));
  labels.put(10,new JLabel(""String_Node_Str""));
  mutationsPerGeneration.setLabelTable(labels);
  mutationsPerGeneration.setPaintLabels(true);
  mutationsPerGeneration.setPreferredSize(new Dimension(200,40));
  resetButton.addActionListener(this);
  saveButton.addActionListener(this);
  evolveButton.addActionListener(this);
  networkButton.addActionListener(this);
  undoButton.addActionListener(this);
  sigmoid.addActionListener(this);
  gaussian.addActionListener(this);
  sine.addActionListener(this);
  sawtooth.addActionListener(this);
  absVal.addActionListener(this);
  halfLinear.addActionListener(this);
  tanh.addActionListener(this);
  id.addActionListener(this);
  fullApprox.addActionListener(this);
  approx.addActionListener(this);
  stretchTanh.addActionListener(this);
  ReLU.addActionListener(this);
  Softplus.addActionListener(this);
  LeakyReLU.addActionListener(this);
  fullSawtooth.addActionListener(this);
  triangleWave.addActionListener(this);
  squareWave.addActionListener(this);
  mutationsPerGeneration.addChangeListener(this);
  sigmoid.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_SIGMOID));
  absVal.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_ABSVAL));
  approx.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_APPROX));
  fullApprox.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_FULLAPPROX));
  gaussian.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_GAUSS));
  halfLinear.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_HLPIECEWISE));
  id.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_ID));
  sawtooth.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_SAWTOOTH));
  sine.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_SINE));
  tanh.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_TANH));
  stretchTanh.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_STRETCHED_TANH));
  ReLU.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_RE_LU));
  Softplus.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_SOFTPLUS));
  LeakyReLU.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_LEAKY_RE_LU));
  fullSawtooth.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_FULLSAWTOOTH));
  triangleWave.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_TRIANGLEWAVE));
  squareWave.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_SQUAREWAVE));
  if (!Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    top.add(resetButton);
  }
  top.add(evolveButton);
  top.add(saveButton);
  if (!Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    top.add(networkButton);
    top.add(undoButton);
  }
  top.add(mutationsPerGeneration);
  if (!Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    bottom.add(halfLinear);
    bottom.add(absVal);
    bottom.add(sawtooth);
    bottom.add(sine);
    bottom.add(gaussian);
    bottom.add(sigmoid);
    bottom.add(tanh);
    bottom.add(id);
    bottom.add(fullApprox);
    bottom.add(approx);
    bottom.add(stretchTanh);
    bottom.add(ReLU);
    bottom.add(Softplus);
    bottom.add(LeakyReLU);
    bottom.add(fullSawtooth);
    bottom.add(triangleWave);
    bottom.add(squareWave);
  }
  topper.add(top);
  topper.add(bottom);
  panels.add(topper);
  addButtonPanels();
  for (  JPanel panel : panels)   frame.add(panel);
  int x=0;
  addButtonsToPanel(x++);
  inputCheckBoxes();
}"
39135,"/** 
 * Adds checkboxes for disabling certain input values
 */
public void inputCheckBoxes(){
  String[] inputLabels=this.sensorLabels();
  inputMultipliers=new double[inputLabels.length];
  for (int i=0; i < inputLabels.length; i++) {
    String label=inputLabels[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
    JCheckBox inputEffect=new JCheckBox(label,true);
    inputMultipliers[i]=1.0;
    inputEffect.setName(""String_Node_Str"" + (CHECKBOX_IDENTIFIER_START - i));
    inputEffect.addActionListener(this);
    inputEffect.setForeground(new Color(0,0,0));
    if (!simplifiedInteractiveInterface) {
      top.add(inputEffect);
    }
  }
}","/** 
 * Adds checkboxes for disabling certain input values
 */
public void inputCheckBoxes(){
  String[] inputLabels=this.sensorLabels();
  inputMultipliers=new double[inputLabels.length];
  for (int i=0; i < inputLabels.length; i++) {
    String label=inputLabels[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
    JCheckBox inputEffect=new JCheckBox(label,true);
    inputMultipliers[i]=1.0;
    inputEffect.setName(""String_Node_Str"" + (CHECKBOX_IDENTIFIER_START - i));
    inputEffect.addActionListener(this);
    inputEffect.setForeground(new Color(0,0,0));
    if (!Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      top.add(inputEffect);
    }
  }
}"
39136,"/** 
 * Constructor - all sliders are added here and mouse listening is enabled for hovering over the buttons
 * @throws IllegalAccessException
 */
@SuppressWarnings(""String_Node_Str"") public AnimationBreederTask(boolean justAnimationBreeder) throws IllegalAccessException {
  super();
  animationThreads=new AnimationBreederTask.AnimationThread[Parameters.parameters.integerParameter(""String_Node_Str"")];
  if (justAnimationBreeder) {
    animationLength=new JSlider(JSlider.HORIZONTAL,Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""));
    Hashtable<Integer,JLabel> animationLabels=new Hashtable<>();
    animationLength.setMinorTickSpacing(20);
    animationLength.setPaintTicks(true);
    animationLabels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
    animationLabels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
    animationLength.setLabelTable(animationLabels);
    animationLength.setPaintLabels(true);
    animationLength.setPreferredSize(new Dimension(75,40));
    animationLength.addChangeListener(new ChangeListener(){
      @Override public void stateChanged(      ChangeEvent e){
        JSlider source=(JSlider)e.getSource();
        if (!source.getValueIsAdjusting()) {
          int newLength=(int)source.getValue();
          Parameters.parameters.setInteger(""String_Node_Str"",newLength);
          resetButtons(false);
        }
      }
    }
);
    pauseLength=new JSlider(JSlider.HORIZONTAL,Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""));
    Hashtable<Integer,JLabel> pauseLabels=new Hashtable<>();
    pauseLength.setMinorTickSpacing(75);
    pauseLength.setPaintTicks(true);
    pauseLabels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
    pauseLabels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
    pauseLength.setLabelTable(pauseLabels);
    pauseLength.setPaintLabels(true);
    pauseLength.setPreferredSize(new Dimension(75,40));
    pauseLength.addChangeListener(new ChangeListener(){
      @Override public void stateChanged(      ChangeEvent e){
        JSlider source=(JSlider)e.getSource();
        if (!source.getValueIsAdjusting()) {
          int newLength=(int)source.getValue();
          Parameters.parameters.setInteger(""String_Node_Str"",newLength);
        }
      }
    }
);
    JPanel animation=new JPanel();
    animation.setLayout(new BoxLayout(animation,BoxLayout.Y_AXIS));
    JLabel animationLabel=new JLabel();
    animationLabel.setText(""String_Node_Str"");
    animation.add(animationLabel);
    animation.add(animationLength);
    JPanel pause=new JPanel();
    pause.setLayout(new BoxLayout(pause,BoxLayout.Y_AXIS));
    JLabel pauseLabel=new JLabel();
    pauseLabel.setText(""String_Node_Str"");
    pause.add(pauseLabel);
    pause.add(pauseLength);
    top.add(animation);
    top.add(pause);
  }
  pauseLengthBetweenFrames=new JSlider(JSlider.HORIZONTAL,Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""));
  Hashtable<Integer,JLabel> framePauseLabels=new Hashtable<>();
  pauseLengthBetweenFrames.setMinorTickSpacing(75);
  pauseLengthBetweenFrames.setPaintTicks(true);
  framePauseLabels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
  framePauseLabels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
  pauseLengthBetweenFrames.setLabelTable(framePauseLabels);
  pauseLengthBetweenFrames.setPaintLabels(true);
  pauseLengthBetweenFrames.setPreferredSize(new Dimension(100,40));
  pauseLengthBetweenFrames.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      JSlider source=(JSlider)e.getSource();
      if (!source.getValueIsAdjusting()) {
        int newLength=(int)source.getValue();
        Parameters.parameters.setInteger(""String_Node_Str"",newLength);
      }
    }
  }
);
  JPanel framePause=new JPanel();
  framePause.setLayout(new BoxLayout(framePause,BoxLayout.Y_AXIS));
  JLabel framePauseLabel=new JLabel();
  framePauseLabel.setText(""String_Node_Str"");
  framePause.add(framePauseLabel);
  framePause.add(pauseLengthBetweenFrames);
  if (!simplifiedInteractiveInterface) {
    top.add(framePause);
  }
  if (!alwaysAnimate) {
    for (    JButton button : buttons) {
      button.addMouseListener(new MouseListener(){
        AnimationThread animation;
        @Override public void mouseClicked(        MouseEvent e){
        }
        @Override public void mousePressed(        MouseEvent e){
        }
        @Override public void mouseReleased(        MouseEvent e){
        }
        @Override public void mouseEntered(        MouseEvent e){
          Scanner id=new Scanner(e.toString());
          id.next();
          id.next();
          animation=new AnimationThread(id.nextInt());
          id.close();
          animation.start();
        }
        @Override public void mouseExited(        MouseEvent e){
          animation.stopAnimation();
        }
      }
);
    }
  }
}","/** 
 * Constructor - all sliders are added here and mouse listening is enabled for hovering over the buttons
 * @throws IllegalAccessException
 */
@SuppressWarnings(""String_Node_Str"") public AnimationBreederTask(boolean justAnimationBreeder) throws IllegalAccessException {
  super();
  animationThreads=new AnimationBreederTask.AnimationThread[Parameters.parameters.integerParameter(""String_Node_Str"")];
  if (justAnimationBreeder) {
    animationLength=new JSlider(JSlider.HORIZONTAL,Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""));
    Hashtable<Integer,JLabel> animationLabels=new Hashtable<>();
    animationLength.setMinorTickSpacing(20);
    animationLength.setPaintTicks(true);
    animationLabels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
    animationLabels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
    animationLength.setLabelTable(animationLabels);
    animationLength.setPaintLabels(true);
    animationLength.setPreferredSize(new Dimension(75,40));
    animationLength.addChangeListener(new ChangeListener(){
      @Override public void stateChanged(      ChangeEvent e){
        JSlider source=(JSlider)e.getSource();
        if (!source.getValueIsAdjusting()) {
          int newLength=(int)source.getValue();
          Parameters.parameters.setInteger(""String_Node_Str"",newLength);
          resetButtons(false);
        }
      }
    }
);
    pauseLength=new JSlider(JSlider.HORIZONTAL,Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""));
    Hashtable<Integer,JLabel> pauseLabels=new Hashtable<>();
    pauseLength.setMinorTickSpacing(75);
    pauseLength.setPaintTicks(true);
    pauseLabels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
    pauseLabels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
    pauseLength.setLabelTable(pauseLabels);
    pauseLength.setPaintLabels(true);
    pauseLength.setPreferredSize(new Dimension(75,40));
    pauseLength.addChangeListener(new ChangeListener(){
      @Override public void stateChanged(      ChangeEvent e){
        JSlider source=(JSlider)e.getSource();
        if (!source.getValueIsAdjusting()) {
          int newLength=(int)source.getValue();
          Parameters.parameters.setInteger(""String_Node_Str"",newLength);
        }
      }
    }
);
    JPanel animation=new JPanel();
    animation.setLayout(new BoxLayout(animation,BoxLayout.Y_AXIS));
    JLabel animationLabel=new JLabel();
    animationLabel.setText(""String_Node_Str"");
    animation.add(animationLabel);
    animation.add(animationLength);
    JPanel pause=new JPanel();
    pause.setLayout(new BoxLayout(pause,BoxLayout.Y_AXIS));
    JLabel pauseLabel=new JLabel();
    pauseLabel.setText(""String_Node_Str"");
    pause.add(pauseLabel);
    pause.add(pauseLength);
    top.add(animation);
    top.add(pause);
  }
  pauseLengthBetweenFrames=new JSlider(JSlider.HORIZONTAL,Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""));
  Hashtable<Integer,JLabel> framePauseLabels=new Hashtable<>();
  pauseLengthBetweenFrames.setMinorTickSpacing(75);
  pauseLengthBetweenFrames.setPaintTicks(true);
  framePauseLabels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
  framePauseLabels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
  pauseLengthBetweenFrames.setLabelTable(framePauseLabels);
  pauseLengthBetweenFrames.setPaintLabels(true);
  pauseLengthBetweenFrames.setPreferredSize(new Dimension(100,40));
  pauseLengthBetweenFrames.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      JSlider source=(JSlider)e.getSource();
      if (!source.getValueIsAdjusting()) {
        int newLength=(int)source.getValue();
        Parameters.parameters.setInteger(""String_Node_Str"",newLength);
      }
    }
  }
);
  JPanel framePause=new JPanel();
  framePause.setLayout(new BoxLayout(framePause,BoxLayout.Y_AXIS));
  JLabel framePauseLabel=new JLabel();
  framePauseLabel.setText(""String_Node_Str"");
  framePause.add(framePauseLabel);
  framePause.add(pauseLengthBetweenFrames);
  if (!Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    top.add(framePause);
  }
  if (!alwaysAnimate) {
    for (    JButton button : buttons) {
      button.addMouseListener(new MouseListener(){
        AnimationThread animation;
        @Override public void mouseClicked(        MouseEvent e){
        }
        @Override public void mousePressed(        MouseEvent e){
        }
        @Override public void mouseReleased(        MouseEvent e){
        }
        @Override public void mouseEntered(        MouseEvent e){
          Scanner id=new Scanner(e.toString());
          id.next();
          id.next();
          animation=new AnimationThread(id.nextInt());
          id.close();
          animation.start();
        }
        @Override public void mouseExited(        MouseEvent e){
          animation.stopAnimation();
        }
      }
);
    }
  }
}"
39137,"public BreedesizerTask(boolean justBreedesizer) throws IllegalAccessException {
  super();
  midiPlay=new AmplitudeArrayPlayer();
  clipLength=new JSlider(JSlider.HORIZONTAL,Keyboard.NOTE_LENGTH_DEFAULT,Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""));
  Hashtable<Integer,JLabel> labels=new Hashtable<>();
  clipLength.setMinorTickSpacing(10000);
  clipLength.setPaintTicks(true);
  labels.put(Keyboard.NOTE_LENGTH_DEFAULT,new JLabel(""String_Node_Str""));
  labels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
  clipLength.setLabelTable(labels);
  clipLength.setPaintLabels(true);
  clipLength.setPreferredSize(new Dimension(200,40));
  clipLength.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      if (!initializationComplete)       return;
      JSlider source=(JSlider)e.getSource();
      if (!source.getValueIsAdjusting()) {
        int newLength=(int)source.getValue();
        Parameters.parameters.setInteger(""String_Node_Str"",newLength);
        resetButtons(true);
      }
    }
  }
);
  top.add(clipLength);
  if (justBreedesizer) {
    keyboard=new Keyboard();
    int minMultiplier=10;
    int maxMultiplier=400;
    int defaultMultiplier=100;
    double scale=100.0;
    noteLengthScale=defaultMultiplier / scale;
    speedOfMIDI=new JSlider(JSlider.HORIZONTAL,minMultiplier,maxMultiplier,defaultMultiplier);
    Hashtable<Integer,JLabel> speedLabels=new Hashtable<>();
    speedOfMIDI.setMinorTickSpacing(40);
    speedOfMIDI.setPaintTicks(true);
    speedLabels.put(minMultiplier,new JLabel(""String_Node_Str""));
    speedLabels.put(maxMultiplier,new JLabel(""String_Node_Str""));
    speedOfMIDI.setLabelTable(speedLabels);
    speedOfMIDI.setPaintLabels(true);
    speedOfMIDI.setPreferredSize(new Dimension(150,40));
    speedOfMIDI.addChangeListener(new ChangeListener(){
      @Override public void stateChanged(      ChangeEvent e){
        if (!initializationComplete)         return;
        JSlider source=(JSlider)e.getSource();
        if (!source.getValueIsAdjusting()) {
          double newSpeed=source.getValue() / scale;
          noteLengthScale=newSpeed;
          resetButtons(true);
        }
      }
    }
);
    top.add(speedOfMIDI);
    JButton playWithMIDI=new JButton(""String_Node_Str"");
    playWithMIDI.setName(""String_Node_Str"" + (MIDI_PLAY_BUTTON_INDEX));
    playWithMIDI.addActionListener(this);
    top.add(playWithMIDI);
    JButton fileLoadButton=new JButton();
    fileLoadButton.setText(""String_Node_Str"");
    fileLoadButton.setName(""String_Node_Str"" + FILE_LOADER_BUTTON_INDEX);
    fileLoadButton.addActionListener(this);
    MIDIPlaybackType=new JCheckBox(""String_Node_Str"",false);
    MIDIPlaybackType.setName(""String_Node_Str"" + MIDI_PLAYBACK_TYPE_CHECKBOX_INDEX);
    MIDIPlaybackType.addActionListener(this);
    MIDIPlaybackType.setForeground(new Color(0,0,0));
    if (!simplifiedInteractiveInterface) {
      top.add(fileLoadButton);
      top.add(MIDIPlaybackType);
    }
  }
  initializationComplete=true;
}","public BreedesizerTask(boolean justBreedesizer) throws IllegalAccessException {
  super();
  midiPlay=new AmplitudeArrayPlayer();
  clipLength=new JSlider(JSlider.HORIZONTAL,Keyboard.NOTE_LENGTH_DEFAULT,Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""));
  Hashtable<Integer,JLabel> labels=new Hashtable<>();
  clipLength.setMinorTickSpacing(10000);
  clipLength.setPaintTicks(true);
  labels.put(Keyboard.NOTE_LENGTH_DEFAULT,new JLabel(""String_Node_Str""));
  labels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
  clipLength.setLabelTable(labels);
  clipLength.setPaintLabels(true);
  clipLength.setPreferredSize(new Dimension(200,40));
  clipLength.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      if (!initializationComplete)       return;
      JSlider source=(JSlider)e.getSource();
      if (!source.getValueIsAdjusting()) {
        int newLength=(int)source.getValue();
        Parameters.parameters.setInteger(""String_Node_Str"",newLength);
        resetButtons(true);
      }
    }
  }
);
  top.add(clipLength);
  if (justBreedesizer) {
    keyboard=new Keyboard();
    int minMultiplier=10;
    int maxMultiplier=400;
    int defaultMultiplier=100;
    double scale=100.0;
    noteLengthScale=defaultMultiplier / scale;
    speedOfMIDI=new JSlider(JSlider.HORIZONTAL,minMultiplier,maxMultiplier,defaultMultiplier);
    Hashtable<Integer,JLabel> speedLabels=new Hashtable<>();
    speedOfMIDI.setMinorTickSpacing(40);
    speedOfMIDI.setPaintTicks(true);
    speedLabels.put(minMultiplier,new JLabel(""String_Node_Str""));
    speedLabels.put(maxMultiplier,new JLabel(""String_Node_Str""));
    speedOfMIDI.setLabelTable(speedLabels);
    speedOfMIDI.setPaintLabels(true);
    speedOfMIDI.setPreferredSize(new Dimension(150,40));
    speedOfMIDI.addChangeListener(new ChangeListener(){
      @Override public void stateChanged(      ChangeEvent e){
        if (!initializationComplete)         return;
        JSlider source=(JSlider)e.getSource();
        if (!source.getValueIsAdjusting()) {
          double newSpeed=source.getValue() / scale;
          noteLengthScale=newSpeed;
          resetButtons(true);
        }
      }
    }
);
    top.add(speedOfMIDI);
    JButton playWithMIDI=new JButton(""String_Node_Str"");
    playWithMIDI.setName(""String_Node_Str"" + (MIDI_PLAY_BUTTON_INDEX));
    playWithMIDI.addActionListener(this);
    top.add(playWithMIDI);
    JButton fileLoadButton=new JButton();
    fileLoadButton.setText(""String_Node_Str"");
    fileLoadButton.setName(""String_Node_Str"" + FILE_LOADER_BUTTON_INDEX);
    fileLoadButton.addActionListener(this);
    MIDIPlaybackType=new JCheckBox(""String_Node_Str"",false);
    MIDIPlaybackType.setName(""String_Node_Str"" + MIDI_PLAYBACK_TYPE_CHECKBOX_INDEX);
    MIDIPlaybackType.addActionListener(this);
    MIDIPlaybackType.setForeground(new Color(0,0,0));
    if (!Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      top.add(fileLoadButton);
      top.add(MIDIPlaybackType);
    }
  }
  initializationComplete=true;
}"
39138,"public ThreeDimensionalAnimationBreederTask() throws IllegalAccessException {
  super();
  Parameters.parameters.setInteger(""String_Node_Str"",0);
  Parameters.parameters.setInteger(""String_Node_Str"",(int)(AnimationUtil.FRAMES_PER_SEC * 3));
  pitchValue=new JSlider(JSlider.HORIZONTAL,0,MAX_ROTATION,Parameters.parameters.integerParameter(""String_Node_Str""));
  Hashtable<Integer,JLabel> pitchLabels=new Hashtable<>();
  pitchValue.setMinorTickSpacing(72);
  pitchValue.setPaintTicks(true);
  pitchLabels.put(0,new JLabel(""String_Node_Str""));
  pitchLabels.put(MAX_ROTATION,new JLabel(""String_Node_Str""));
  pitchValue.setLabelTable(pitchLabels);
  pitchValue.setPaintLabels(true);
  pitchValue.setPreferredSize(new Dimension(75,40));
  pitchValue.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      JSlider source=(JSlider)e.getSource();
      if (!source.getValueIsAdjusting()) {
        int newLength=(int)source.getValue();
        pitch=(newLength / (double)MAX_ROTATION) * 2 * Math.PI;
        resetButtons(true);
      }
    }
  }
);
  JPanel pitch=new JPanel();
  pitch.setLayout(new BoxLayout(pitch,BoxLayout.Y_AXIS));
  JLabel pitchLabel=new JLabel();
  pitchLabel.setText(""String_Node_Str"");
  pitch.add(pitchLabel);
  pitch.add(pitchValue);
  headingValue=new JSlider(JSlider.HORIZONTAL,0,MAX_ROTATION,Parameters.parameters.integerParameter(""String_Node_Str""));
  Hashtable<Integer,JLabel> headingLabels=new Hashtable<>();
  headingValue.setMinorTickSpacing(72);
  headingValue.setPaintTicks(true);
  headingLabels.put(0,new JLabel(""String_Node_Str""));
  headingLabels.put(MAX_ROTATION,new JLabel(""String_Node_Str""));
  headingValue.setLabelTable(headingLabels);
  headingValue.setPaintLabels(true);
  headingValue.setPreferredSize(new Dimension(75,40));
  headingValue.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      JSlider source=(JSlider)e.getSource();
      if (!source.getValueIsAdjusting()) {
        int newLength=(int)source.getValue();
        heading=(newLength / (double)MAX_ROTATION) * 2 * Math.PI;
        resetButtons(true);
      }
    }
  }
);
  JPanel heading=new JPanel();
  heading.setLayout(new BoxLayout(heading,BoxLayout.Y_AXIS));
  JLabel headingLabel=new JLabel();
  headingLabel.setText(""String_Node_Str"");
  heading.add(headingLabel);
  heading.add(headingValue);
  JPanel pitchAndHeading=new JPanel();
  pitchAndHeading.setLayout(new BoxLayout(pitchAndHeading,BoxLayout.Y_AXIS));
  pitchAndHeading.add(pitch);
  pitchAndHeading.add(heading);
  if (!simplifiedInteractiveInterface) {
    top.add(pitchAndHeading);
  }
}","public ThreeDimensionalAnimationBreederTask() throws IllegalAccessException {
  super();
  Parameters.parameters.setInteger(""String_Node_Str"",0);
  Parameters.parameters.setInteger(""String_Node_Str"",(int)(AnimationUtil.FRAMES_PER_SEC * 3));
  pitchValue=new JSlider(JSlider.HORIZONTAL,0,MAX_ROTATION,Parameters.parameters.integerParameter(""String_Node_Str""));
  Hashtable<Integer,JLabel> pitchLabels=new Hashtable<>();
  pitchValue.setMinorTickSpacing(72);
  pitchValue.setPaintTicks(true);
  pitchLabels.put(0,new JLabel(""String_Node_Str""));
  pitchLabels.put(MAX_ROTATION,new JLabel(""String_Node_Str""));
  pitchValue.setLabelTable(pitchLabels);
  pitchValue.setPaintLabels(true);
  pitchValue.setPreferredSize(new Dimension(75,40));
  pitchValue.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      JSlider source=(JSlider)e.getSource();
      if (!source.getValueIsAdjusting()) {
        int newLength=(int)source.getValue();
        pitch=(newLength / (double)MAX_ROTATION) * 2 * Math.PI;
        resetButtons(true);
      }
    }
  }
);
  JPanel pitch=new JPanel();
  pitch.setLayout(new BoxLayout(pitch,BoxLayout.Y_AXIS));
  JLabel pitchLabel=new JLabel();
  pitchLabel.setText(""String_Node_Str"");
  pitch.add(pitchLabel);
  pitch.add(pitchValue);
  headingValue=new JSlider(JSlider.HORIZONTAL,0,MAX_ROTATION,Parameters.parameters.integerParameter(""String_Node_Str""));
  Hashtable<Integer,JLabel> headingLabels=new Hashtable<>();
  headingValue.setMinorTickSpacing(72);
  headingValue.setPaintTicks(true);
  headingLabels.put(0,new JLabel(""String_Node_Str""));
  headingLabels.put(MAX_ROTATION,new JLabel(""String_Node_Str""));
  headingValue.setLabelTable(headingLabels);
  headingValue.setPaintLabels(true);
  headingValue.setPreferredSize(new Dimension(75,40));
  headingValue.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      JSlider source=(JSlider)e.getSource();
      if (!source.getValueIsAdjusting()) {
        int newLength=(int)source.getValue();
        heading=(newLength / (double)MAX_ROTATION) * 2 * Math.PI;
        resetButtons(true);
      }
    }
  }
);
  JPanel heading=new JPanel();
  heading.setLayout(new BoxLayout(heading,BoxLayout.Y_AXIS));
  JLabel headingLabel=new JLabel();
  headingLabel.setText(""String_Node_Str"");
  heading.add(headingLabel);
  heading.add(headingValue);
  JPanel pitchAndHeading=new JPanel();
  pitchAndHeading.setLayout(new BoxLayout(pitchAndHeading,BoxLayout.Y_AXIS));
  pitchAndHeading.add(pitch);
  pitchAndHeading.add(heading);
  if (!Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    top.add(pitchAndHeading);
  }
}"
39139,"public ThreeDimensionalObjectBreederTask() throws IllegalAccessException {
  super(false);
  Parameters.parameters.setInteger(""String_Node_Str"",0);
  Parameters.parameters.setInteger(""String_Node_Str"",(int)(AnimationUtil.FRAMES_PER_SEC * 3));
  vertical=false;
  pitchValue=new JSlider(JSlider.HORIZONTAL,0,MAX_ROTATION,Parameters.parameters.integerParameter(""String_Node_Str""));
  Hashtable<Integer,JLabel> pitchLabels=new Hashtable<>();
  pitchValue.setMinorTickSpacing(72);
  pitchValue.setPaintTicks(true);
  pitchLabels.put(0,new JLabel(""String_Node_Str""));
  pitchLabels.put(MAX_ROTATION,new JLabel(""String_Node_Str""));
  pitchValue.setLabelTable(pitchLabels);
  pitchValue.setPaintLabels(true);
  pitchValue.setPreferredSize(new Dimension(75,40));
  pitchValue.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      JSlider source=(JSlider)e.getSource();
      if (!source.getValueIsAdjusting()) {
        int newLength=(int)source.getValue();
        pitch=(newLength / (double)MAX_ROTATION) * 2 * Math.PI;
        resetButtons(true);
      }
    }
  }
);
  JPanel pitch=new JPanel();
  pitch.setLayout(new BoxLayout(pitch,BoxLayout.Y_AXIS));
  JLabel pitchLabel=new JLabel();
  pitchLabel.setText(""String_Node_Str"");
  pitch.add(pitchLabel);
  pitch.add(pitchValue);
  headingValue=new JSlider(JSlider.HORIZONTAL,0,MAX_ROTATION,Parameters.parameters.integerParameter(""String_Node_Str""));
  Hashtable<Integer,JLabel> headingLabels=new Hashtable<>();
  headingValue.setMinorTickSpacing(72);
  headingValue.setPaintTicks(true);
  headingLabels.put(0,new JLabel(""String_Node_Str""));
  headingLabels.put(MAX_ROTATION,new JLabel(""String_Node_Str""));
  headingValue.setLabelTable(headingLabels);
  headingValue.setPaintLabels(true);
  headingValue.setPreferredSize(new Dimension(75,40));
  headingValue.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      JSlider source=(JSlider)e.getSource();
      if (!source.getValueIsAdjusting()) {
        int newLength=(int)source.getValue();
        heading=(newLength / (double)MAX_ROTATION) * 2 * Math.PI;
        resetButtons(true);
      }
    }
  }
);
  JPanel heading=new JPanel();
  heading.setLayout(new BoxLayout(heading,BoxLayout.Y_AXIS));
  JLabel headingLabel=new JLabel();
  headingLabel.setText(""String_Node_Str"");
  heading.add(headingLabel);
  heading.add(headingValue);
  if (!simplifiedInteractiveInterface && !alwaysAnimate) {
    top.add(pitch);
    top.add(heading);
  }
  String[] choices={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  colorChoice=new JComboBox<String>(choices);
  colorChoice.setSelectedIndex(choices.length - 1);
  colorChoice.setSize(40,40);
  colorChoice.addItemListener(new ItemListener(){
    @SuppressWarnings(""String_Node_Str"") @Override public void itemStateChanged(    ItemEvent e){
      JComboBox<String> source=(JComboBox<String>)e.getSource();
      int index=source.getSelectedIndex();
      if (index == EVOLVED_COLOR_INDEX) {
        color=null;
      }
 else {
        color=COLORS[index];
        for (        List<Triangle> tris : shapes.values()) {
          for (          Triangle t : tris) {
            t.color=color;
          }
        }
      }
      resetButtons(true);
    }
  }
);
  JPanel colorAndMovement=new JPanel();
  colorAndMovement.setLayout(new BoxLayout(colorAndMovement,BoxLayout.Y_AXIS));
  JPanel colorPanel=new JPanel();
  colorPanel.setLayout(new BoxLayout(colorPanel,BoxLayout.X_AXIS));
  JLabel colorLabel=new JLabel();
  colorLabel.setText(""String_Node_Str"");
  String[] directionChoices={""String_Node_Str"",""String_Node_Str""};
  directionChoice=new JComboBox<String>(directionChoices);
  directionChoice.setSize(40,40);
  directionChoice.addItemListener(new ItemListener(){
    @SuppressWarnings(""String_Node_Str"") @Override public void itemStateChanged(    ItemEvent e){
      JComboBox<String> source=(JComboBox<String>)e.getSource();
      if (source.getSelectedItem().toString() == ""String_Node_Str"") {
        vertical=false;
      }
 else       if (source.getSelectedItem().toString() == ""String_Node_Str"") {
        vertical=true;
      }
      resetButtons(true);
    }
  }
);
  JPanel directionPanel=new JPanel();
  directionPanel.setLayout(new BoxLayout(directionPanel,BoxLayout.X_AXIS));
  JLabel directionLabel=new JLabel();
  directionLabel.setText(""String_Node_Str"");
  colorPanel.add(colorLabel);
  colorPanel.add(colorChoice);
  directionPanel.add(directionLabel);
  directionPanel.add(directionChoice);
  colorAndMovement.add(colorPanel);
  colorAndMovement.add(directionPanel);
  top.add(colorAndMovement);
}","public ThreeDimensionalObjectBreederTask() throws IllegalAccessException {
  super(false);
  Parameters.parameters.setInteger(""String_Node_Str"",0);
  Parameters.parameters.setInteger(""String_Node_Str"",(int)(AnimationUtil.FRAMES_PER_SEC * 3));
  vertical=false;
  pitchValue=new JSlider(JSlider.HORIZONTAL,0,MAX_ROTATION,Parameters.parameters.integerParameter(""String_Node_Str""));
  Hashtable<Integer,JLabel> pitchLabels=new Hashtable<>();
  pitchValue.setMinorTickSpacing(72);
  pitchValue.setPaintTicks(true);
  pitchLabels.put(0,new JLabel(""String_Node_Str""));
  pitchLabels.put(MAX_ROTATION,new JLabel(""String_Node_Str""));
  pitchValue.setLabelTable(pitchLabels);
  pitchValue.setPaintLabels(true);
  pitchValue.setPreferredSize(new Dimension(75,40));
  pitchValue.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      JSlider source=(JSlider)e.getSource();
      if (!source.getValueIsAdjusting()) {
        int newLength=(int)source.getValue();
        pitch=(newLength / (double)MAX_ROTATION) * 2 * Math.PI;
        resetButtons(true);
      }
    }
  }
);
  JPanel pitch=new JPanel();
  pitch.setLayout(new BoxLayout(pitch,BoxLayout.Y_AXIS));
  JLabel pitchLabel=new JLabel();
  pitchLabel.setText(""String_Node_Str"");
  pitch.add(pitchLabel);
  pitch.add(pitchValue);
  headingValue=new JSlider(JSlider.HORIZONTAL,0,MAX_ROTATION,Parameters.parameters.integerParameter(""String_Node_Str""));
  Hashtable<Integer,JLabel> headingLabels=new Hashtable<>();
  headingValue.setMinorTickSpacing(72);
  headingValue.setPaintTicks(true);
  headingLabels.put(0,new JLabel(""String_Node_Str""));
  headingLabels.put(MAX_ROTATION,new JLabel(""String_Node_Str""));
  headingValue.setLabelTable(headingLabels);
  headingValue.setPaintLabels(true);
  headingValue.setPreferredSize(new Dimension(75,40));
  headingValue.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      JSlider source=(JSlider)e.getSource();
      if (!source.getValueIsAdjusting()) {
        int newLength=(int)source.getValue();
        heading=(newLength / (double)MAX_ROTATION) * 2 * Math.PI;
        resetButtons(true);
      }
    }
  }
);
  JPanel heading=new JPanel();
  heading.setLayout(new BoxLayout(heading,BoxLayout.Y_AXIS));
  JLabel headingLabel=new JLabel();
  headingLabel.setText(""String_Node_Str"");
  heading.add(headingLabel);
  heading.add(headingValue);
  if (!Parameters.parameters.booleanParameter(""String_Node_Str"") && !alwaysAnimate) {
    top.add(pitch);
    top.add(heading);
  }
  String[] choices={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  colorChoice=new JComboBox<String>(choices);
  colorChoice.setSelectedIndex(choices.length - 1);
  colorChoice.setSize(40,40);
  colorChoice.addItemListener(new ItemListener(){
    @SuppressWarnings(""String_Node_Str"") @Override public void itemStateChanged(    ItemEvent e){
      JComboBox<String> source=(JComboBox<String>)e.getSource();
      int index=source.getSelectedIndex();
      if (index == EVOLVED_COLOR_INDEX) {
        color=null;
      }
 else {
        color=COLORS[index];
        for (        List<Triangle> tris : shapes.values()) {
          for (          Triangle t : tris) {
            t.color=color;
          }
        }
      }
      resetButtons(true);
    }
  }
);
  JPanel colorAndMovement=new JPanel();
  colorAndMovement.setLayout(new BoxLayout(colorAndMovement,BoxLayout.Y_AXIS));
  JPanel colorPanel=new JPanel();
  colorPanel.setLayout(new BoxLayout(colorPanel,BoxLayout.X_AXIS));
  JLabel colorLabel=new JLabel();
  colorLabel.setText(""String_Node_Str"");
  String[] directionChoices={""String_Node_Str"",""String_Node_Str""};
  directionChoice=new JComboBox<String>(directionChoices);
  directionChoice.setSize(40,40);
  directionChoice.addItemListener(new ItemListener(){
    @SuppressWarnings(""String_Node_Str"") @Override public void itemStateChanged(    ItemEvent e){
      JComboBox<String> source=(JComboBox<String>)e.getSource();
      if (source.getSelectedItem().toString() == ""String_Node_Str"") {
        vertical=false;
      }
 else       if (source.getSelectedItem().toString() == ""String_Node_Str"") {
        vertical=true;
      }
      resetButtons(true);
    }
  }
);
  JPanel directionPanel=new JPanel();
  directionPanel.setLayout(new BoxLayout(directionPanel,BoxLayout.X_AXIS));
  JLabel directionLabel=new JLabel();
  directionLabel.setText(""String_Node_Str"");
  colorPanel.add(colorLabel);
  colorPanel.add(colorChoice);
  directionPanel.add(directionLabel);
  directionPanel.add(directionChoice);
  colorAndMovement.add(colorPanel);
  colorAndMovement.add(directionPanel);
  top.add(colorAndMovement);
}"
39140,"@Override public BufferedImage[] getAnimationImages(T cppn,int startFrame,int endFrame,boolean beingSaved){
  return AnimationUtil.shapesFromCPPN(cppn,picSize,picSize,startFrame,endFrame,color,heading,pitch,inputMultipliers);
}","@Override public BufferedImage[] getAnimationImages(T cppn,int startFrame,int endFrame,boolean beingSaved){
  return AnimationUtil.shapesFromCPPN(cppn,picSize,picSize,startFrame,endFrame,beingSaved ? Color.BLACK : null,heading,pitch,inputMultipliers);
}"
39141,"/** 
 * Constructs BufferedImage from list of triangles based on the input Matrix3 specifications (positions of JSliders determining rotation of 3D image)
 * @param tris list of triangles
 * @param width width of image
 * @param height height of image
 * @param transform Matrix3 instance determining where JSlider rotation occurs for image construction
 * @return BufferedImage representing current view of 3D image
 */
private static BufferedImage imageFromTriangles(List<Triangle> tris,int width,int height,Matrix3 transform,Color color){
  BufferedImage img=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);
  if (color != null) {
    for (int i=0; i < width; i++) {
      for (int j=0; j < height; j++) {
        img.setRGB(i,j,color.getRGB());
      }
    }
  }
  double[] zBuffer=new double[img.getWidth() * img.getHeight()];
  for (int q=0; q < zBuffer.length; q++) {
    zBuffer[q]=Double.NEGATIVE_INFINITY;
  }
  for (  Triangle t : tris) {
    Vertex v1=transform.transform(t.v1);
    v1.x+=width / 2;
    v1.y+=height / 2;
    Vertex v2=transform.transform(t.v2);
    v2.x+=width / 2;
    v2.y+=height / 2;
    Vertex v3=transform.transform(t.v3);
    v3.x+=width / 2;
    v3.y+=height / 2;
    Vertex norm=getNorm(v1,v2,v3);
    double angleCos=Math.abs(norm.z);
    int minX=(int)Math.max(0,Math.ceil(Math.min(v1.x,Math.min(v2.x,v3.x))));
    int maxX=(int)Math.min(img.getWidth() - 1,Math.floor(Math.max(v1.x,Math.max(v2.x,v3.x))));
    int minY=(int)Math.max(0,Math.ceil(Math.min(v1.y,Math.min(v2.y,v3.y))));
    int maxY=(int)Math.min(img.getHeight() - 1,Math.floor(Math.max(v1.y,Math.max(v2.y,v3.y))));
    double triangleArea=(v1.y - v3.y) * (v2.x - v3.x) + (v2.y - v3.y) * (v3.x - v1.x);
    for (int y=minY; y <= maxY; y++) {
      for (int x=minX; x <= maxX; x++) {
        double b1=((y - v3.y) * (v2.x - v3.x) + (v2.y - v3.y) * (v3.x - x)) / triangleArea;
        double b2=((y - v1.y) * (v3.x - v1.x) + (v3.y - v1.y) * (v1.x - x)) / triangleArea;
        double b3=((y - v2.y) * (v1.x - v2.x) + (v1.y - v2.y) * (v2.x - x)) / triangleArea;
        if (b1 >= 0 && b1 <= 1 && b2 >= 0 && b2 <= 1 && b3 >= 0 && b3 <= 1) {
          double depth=b1 * v1.z + b2 * v2.z + b3 * v3.z;
          int zIndex=y * img.getWidth() + x;
          if (zBuffer[zIndex] < depth) {
            img.setRGB(x,y,getShade(t.color,angleCos).getRGB());
            zBuffer[zIndex]=depth;
          }
        }
      }
    }
  }
  return img;
}","/** 
 * Constructs BufferedImage from list of triangles based on the input Matrix3 specifications (positions of JSliders determining rotation of 3D image)
 * @param tris list of triangles
 * @param width width of image
 * @param height height of image
 * @param transform Matrix3 instance determining where JSlider rotation occurs for image construction
 * @param bgColor Color of the background in the image
 * @return BufferedImage representing current view of 3D image
 */
private static BufferedImage imageFromTriangles(List<Triangle> tris,int width,int height,Matrix3 transform,Color bgColor){
  BufferedImage img=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);
  if (bgColor != null) {
    for (int i=0; i < width; i++) {
      for (int j=0; j < height; j++) {
        img.setRGB(i,j,bgColor.getRGB());
      }
    }
  }
  double[] zBuffer=new double[img.getWidth() * img.getHeight()];
  for (int q=0; q < zBuffer.length; q++) {
    zBuffer[q]=Double.NEGATIVE_INFINITY;
  }
  for (  Triangle t : tris) {
    Vertex v1=transform.transform(t.v1);
    v1.x+=width / 2;
    v1.y+=height / 2;
    Vertex v2=transform.transform(t.v2);
    v2.x+=width / 2;
    v2.y+=height / 2;
    Vertex v3=transform.transform(t.v3);
    v3.x+=width / 2;
    v3.y+=height / 2;
    Vertex norm=getNorm(v1,v2,v3);
    double angleCos=Math.abs(norm.z);
    int minX=(int)Math.max(0,Math.ceil(Math.min(v1.x,Math.min(v2.x,v3.x))));
    int maxX=(int)Math.min(img.getWidth() - 1,Math.floor(Math.max(v1.x,Math.max(v2.x,v3.x))));
    int minY=(int)Math.max(0,Math.ceil(Math.min(v1.y,Math.min(v2.y,v3.y))));
    int maxY=(int)Math.min(img.getHeight() - 1,Math.floor(Math.max(v1.y,Math.max(v2.y,v3.y))));
    double triangleArea=(v1.y - v3.y) * (v2.x - v3.x) + (v2.y - v3.y) * (v3.x - v1.x);
    for (int y=minY; y <= maxY; y++) {
      for (int x=minX; x <= maxX; x++) {
        double b1=((y - v3.y) * (v2.x - v3.x) + (v2.y - v3.y) * (v3.x - x)) / triangleArea;
        double b2=((y - v1.y) * (v3.x - v1.x) + (v3.y - v1.y) * (v1.x - x)) / triangleArea;
        double b3=((y - v2.y) * (v1.x - v2.x) + (v1.y - v2.y) * (v2.x - x)) / triangleArea;
        if (b1 >= 0 && b1 <= 1 && b2 >= 0 && b2 <= 1 && b3 >= 0 && b3 <= 1) {
          double depth=b1 * v1.z + b2 * v2.z + b3 * v3.z;
          int zIndex=y * img.getWidth() + x;
          if (zBuffer[zIndex] < depth) {
            img.setRGB(x,y,getShade(t.color,angleCos).getRGB());
            zBuffer[zIndex]=depth;
          }
        }
      }
    }
  }
  return img;
}"
39142,"/** 
 * Returns the current image to be displayed on the button based on the rotation  and the CPPN.
 * @param cppn Network manipulating image
 * @param imageWidth width of image
 * @param imageHeight height of image
 * @param sideLength size of cube
 * @param shapeWidth width of shape (measured in cubes)
 * @param shapeHeight height of shape (measured in cubes)
 * @param shapeDepth depth of shape (measured in cubes)
 * @param color desired color of image
 * @param heading horizontal rotation of object
 * @param pitch vertical rotation of object
 * @param inputMultipliers indicates whether input checkboxes are turned on or off
 * @return
 */
public static BufferedImage currentImageFromCPPN(Network cppn,int imageWidth,int imageHeight,int sideLength,int shapeWidth,int shapeHeight,int shapeDepth,Color color,double heading,double pitch,double[] inputMultipliers,double time){
  List<Triangle> tris=trianglesFromCPPN(cppn,imageWidth,imageHeight,sideLength,shapeWidth,shapeHeight,shapeDepth,color,inputMultipliers,time);
  BufferedImage currentImage=imageFromTriangles(tris,imageWidth,imageHeight,heading,pitch,color);
  return currentImage;
}","/** 
 * Returns the current image to be displayed on the button based on the rotation  and the CPPN.
 * @param cppn Network manipulating image
 * @param imageWidth width of image
 * @param imageHeight height of image
 * @param sideLength size of cube
 * @param shapeWidth width of shape (measured in cubes)
 * @param shapeHeight height of shape (measured in cubes)
 * @param shapeDepth depth of shape (measured in cubes)
 * @param bgColor desired color of image
 * @param heading horizontal rotation of object
 * @param pitch vertical rotation of object
 * @param inputMultipliers indicates whether input checkboxes are turned on or off
 * @return
 */
public static BufferedImage currentImageFromCPPN(Network cppn,int imageWidth,int imageHeight,int sideLength,int shapeWidth,int shapeHeight,int shapeDepth,Color bgColor,double heading,double pitch,double[] inputMultipliers,double time){
  List<Triangle> tris=trianglesFromCPPN(cppn,imageWidth,imageHeight,sideLength,shapeWidth,shapeHeight,shapeDepth,null,inputMultipliers,time);
  BufferedImage currentImage=imageFromTriangles(tris,imageWidth,imageHeight,heading,pitch,bgColor);
  return currentImage;
}"
39143,"/** 
 * Creates a list of vertexes where cube pixels will be constructed in a shape based on  the CPPN
 * @param cppn network used to modify shape being constructed
 * @param imageWidth width of screen
 * @param imageHeight height of screen
 * @param cubeSize size of cube
 * @param shapeWidth width of shape being constructed (measured in # of cubes in dimension)
 * @param shapeHeight height of shape being constructed (measured in # of cubes in dimension)
 * @param shapeDepth depth of shape being constructed (measured in # of cubes in dimension)
 * @param inputMultipliers determines whether inputs are turned on or off
 * @return List of vertexes denoting center points of all cubes being constructed
 */
public static Pair<List<Vertex>,List<Color>> getVertexesFromCPPN(Network cppn,int imageWidth,int imageHeight,int cubeSize,int shapeWidth,int shapeHeight,int shapeDepth,double[] inputMultipliers,Color color,double time){
  List<Vertex> centers=new ArrayList<>();
  List<Color> colors=new ArrayList<>();
  for (int x=0; x < shapeWidth; x++) {
    for (int y=0; y < shapeHeight; y++) {
      for (int z=0; z < shapeDepth; z++) {
        double[] inputs=get3DObjectCPPNInputs(x,y,z,shapeWidth,shapeHeight,shapeDepth,time);
        for (int i=0; i < inputMultipliers.length; i++) {
          inputs[i]=inputs[i] * inputMultipliers[i];
        }
        double[] output=cppn.process(inputs);
        if (output[0] > 0.1) {
          double actualX=-(cubeSize * shapeWidth / 2.0) + (cubeSize / 2.0) + x * cubeSize + output[THREE_DIMENSIONAL_X_DISPLACEMENT_INDEX];
          double actualY=-(cubeSize * shapeHeight / 2.0) + (cubeSize / 2.0) + y * cubeSize + output[THREE_DIMENSIONAL_Y_DISPLACEMENT_INDEX];
          double actualZ=-(cubeSize * shapeDepth / 2.0) + (cubeSize / 2.0) + z * cubeSize + output[THREE_DIMENSIONAL_Z_DISPLACEMENT_INDEX];
          centers.add(new Vertex(actualX,actualY,actualZ));
          if (color == null) {
            float[] hsb=GraphicsUtil.rangeRestrictHSB(new double[]{output[THREE_DIMENSIONAL_HUE_INDEX],output[THREE_DIMENSIONAL_SATURATION_INDEX],output[THREE_DIMENSIONAL_BRIGHTNESS_INDEX]});
            int rgb=Color.HSBtoRGB(hsb[GraphicsUtil.HUE_INDEX],hsb[GraphicsUtil.SATURATION_INDEX],hsb[GraphicsUtil.BRIGHTNESS_INDEX]);
            Color evolvedColor=new Color(rgb,true);
            colors.add(evolvedColor);
          }
 else {
            colors.add(color);
          }
        }
      }
    }
  }
  return new Pair<>(centers,colors);
}","/** 
 * Creates a list of vertexes where cube pixels will be constructed in a shape based on  the CPPN
 * @param cppn network used to modify shape being constructed
 * @param imageWidth width of screen
 * @param imageHeight height of screen
 * @param cubeSize size of cube
 * @param shapeWidth width of shape being constructed (measured in # of cubes in dimension)
 * @param shapeHeight height of shape being constructed (measured in # of cubes in dimension)
 * @param shapeDepth depth of shape being constructed (measured in # of cubes in dimension)
 * @param inputMultipliers determines whether inputs are turned on or off
 * @return List of vertexes denoting center points of all cubes being constructed
 */
public static Pair<List<Vertex>,List<Color>> getVertexesFromCPPN(Network cppn,int imageWidth,int imageHeight,int cubeSize,int shapeWidth,int shapeHeight,int shapeDepth,double[] inputMultipliers,Color color,double time){
  List<Vertex> centers=new ArrayList<>();
  List<Color> colors=new ArrayList<>();
  for (int x=0; x < shapeWidth; x++) {
    for (int y=0; y < shapeHeight; y++) {
      for (int z=0; z < shapeDepth; z++) {
        double[] inputs=get3DObjectCPPNInputs(x,y,z,shapeWidth,shapeHeight,shapeDepth,time);
        for (int i=0; i < inputMultipliers.length; i++) {
          inputs[i]=inputs[i] * inputMultipliers[i];
        }
        double[] output=cppn.process(inputs);
        if (output[0] > 0.1) {
          double actualX=-(cubeSize * shapeWidth / 2.0) + (cubeSize / 2.0) + x * cubeSize;
          double actualY=-(cubeSize * shapeHeight / 2.0) + (cubeSize / 2.0) + y * cubeSize;
          double actualZ=-(cubeSize * shapeDepth / 2.0) + (cubeSize / 2.0) + z * cubeSize;
          if (output.length > ThreeDimensionalObjectBreederTask.CPPN_NUM_OUTPUTS) {
            actualX+=output[THREE_DIMENSIONAL_X_DISPLACEMENT_INDEX];
            actualY+=output[THREE_DIMENSIONAL_Y_DISPLACEMENT_INDEX];
            actualZ+=output[THREE_DIMENSIONAL_Z_DISPLACEMENT_INDEX];
          }
          centers.add(new Vertex(actualX,actualY,actualZ));
          if (color == null) {
            float[] hsb=GraphicsUtil.rangeRestrictHSB(new double[]{output[THREE_DIMENSIONAL_HUE_INDEX],output[THREE_DIMENSIONAL_SATURATION_INDEX],output[THREE_DIMENSIONAL_BRIGHTNESS_INDEX]});
            int rgb=Color.HSBtoRGB(hsb[GraphicsUtil.HUE_INDEX],hsb[GraphicsUtil.SATURATION_INDEX],hsb[GraphicsUtil.BRIGHTNESS_INDEX]);
            Color evolvedColor=new Color(rgb,true);
            colors.add(evolvedColor);
          }
 else {
            colors.add(color);
          }
        }
      }
    }
  }
  return new Pair<>(centers,colors);
}"
39144,"/** 
 * Adds a given List of Champions into the Hall Of Fame
 * @param generation Generation of the Champions being put in the Hall Of Fame
 * @param newChamps List of Genotypes from the Champions being saved
 */
public void addChampions(int generation,List<Pair<Genotype<T>,Score<T>>> newChamps){
  if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    for (    Triple<Integer,Genotype<T>,Score<T>> tr : hall) {
      for (      Pair<Genotype<T>,Score<T>> champ : newChamps) {
        if (champ.t2.isAtLeastAsGood(tr.t3))         hall.remove(tr);
        if (tr.t3.isBetter(champ.t2))         newChamps.remove(champ);
      }
    }
    for (    Pair<Genotype<T>,Score<T>> champion : newChamps) {
      hall.add(new Triple<Integer,Genotype<T>,Score<T>>(generation,champion.t1,champion.t2));
    }
  }
 else {
    for (    Pair<Genotype<T>,Score<T>> champion : newChamps) {
      hall.add(new Triple<Integer,Genotype<T>,Score<T>>(generation,champion.t1,champion.t2));
    }
  }
}","/** 
 * Adds a given List of Champions into the Hall Of Fame
 * @param generation Generation of the Champions being put in the Hall Of Fame
 * @param newChampsList List of Genotypes from the Champions being saved
 */
public void addChampions(int generation,List<Pair<Genotype<T>,Score<T>>> newChampsList){
  if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    Iterator<Triple<Integer,Genotype<T>,Score<T>>> itr=hall.iterator();
    while (itr.hasNext()) {
      Triple<Integer,Genotype<T>,Score<T>> oldChamp=itr.next();
      Iterator<Pair<Genotype<T>,Score<T>>> itr2=newChampsList.iterator();
      while (itr2.hasNext()) {
        Pair<Genotype<T>,Score<T>> newChamp=itr2.next();
        if (newChamp.t2.isAtLeastAsGood(oldChamp.t3))         itr.remove();
        if (oldChamp.t3.isBetter(newChamp.t2))         itr2.remove();
      }
    }
    for (    Pair<Genotype<T>,Score<T>> champion : newChampsList) {
      hall.add(new Triple<Integer,Genotype<T>,Score<T>>(generation,champion.t1,champion.t2));
    }
  }
 else {
    for (    Pair<Genotype<T>,Score<T>> champion : newChampsList) {
      hall.add(new Triple<Integer,Genotype<T>,Score<T>>(generation,champion.t1,champion.t2));
    }
  }
}"
39145,"/** 
 * puts the current unit into all substrates where it should go according to parameters.
 * @param u unit to be put into substrates
 * @param substrates array containing all substrates. this array is modified and then returned
 * @param substrateSize how big each substrate is
 * @param location index within an individual substrate
 * @return double[] input as substrates, but with the unit added at location for every appropriate substrate
 */
private double[] populateSubstratesWith(Unit u,boolean isTerrain,double[] substrates,int location){
  ArrayList<Integer> appropriateSubstrates=new ArrayList<>();
  ArrayList<Integer> subIDs=new ArrayList<>();
  int numCurrentSubs=0;
  if (u != null) {
    if (areSubsActive[mobile]) {
      if (u.getType().canMove) {
        appropriateSubstrates.add(numCurrentSubs);
        subIDs.add(mobile);
      }
      numCurrentSubs++;
    }
    if (areSubsActive[buildings]) {
      if (!u.getType().canMove && u.getPlayer() != -1) {
        appropriateSubstrates.add(numCurrentSubs);
        subIDs.add(buildings);
      }
      numCurrentSubs++;
    }
    if (areSubsActive[myMobile]) {
      if (u.getType().canMove && u.getPlayer() == 0) {
        appropriateSubstrates.add(numCurrentSubs);
        subIDs.add(myMobile);
      }
      numCurrentSubs++;
    }
    if (areSubsActive[myBuildings]) {
      if (!u.getType().canMove && u.getPlayer() != 1) {
        appropriateSubstrates.add(numCurrentSubs);
        subIDs.add(myBuildings);
      }
      numCurrentSubs++;
    }
    if (areSubsActive[oppsMobile]) {
      if (u.getType().canMove && u.getPlayer() == 1) {
        appropriateSubstrates.add(numCurrentSubs);
        subIDs.add(oppsMobile);
      }
      numCurrentSubs++;
    }
    if (areSubsActive[oppsBuildings]) {
      if (!u.getType().canMove && u.getPlayer() != 0) {
        appropriateSubstrates.add(numCurrentSubs);
        subIDs.add(oppsBuildings);
      }
      numCurrentSubs++;
    }
    if (areSubsActive[myAll]) {
      if (u.getPlayer() == 0) {
        appropriateSubstrates.add(numCurrentSubs);
        subIDs.add(myAll);
      }
      numCurrentSubs++;
    }
    if (areSubsActive[oppsAll]) {
      if (u.getPlayer() == 1) {
        appropriateSubstrates.add(numCurrentSubs);
        subIDs.add(oppsAll);
      }
      numCurrentSubs++;
    }
  }
  if (areSubsActive[all]) {
    appropriateSubstrates.add(numCurrentSubs);
    subIDs.add(all);
    numCurrentSubs++;
  }
  if (areSubsActive[neutral]) {
    if (isTerrain || (u != null && u.getPlayer() == -1)) {
      appropriateSubstrates.add(numCurrentSubs);
      subIDs.add(neutral);
    }
    numCurrentSubs++;
  }
  if (areSubsActive[terrain]) {
    if (isTerrain) {
      appropriateSubstrates.add(numCurrentSubs);
      subIDs.add(terrain);
    }
    numCurrentSubs++;
  }
  double[] pathSub=new double[pgs.getWidth() * pgs.getHeight()];
  if (areSubsActive[path]) {
    appropriateSubstrates.add(numCurrentSubs);
    subIDs.add(path);
    if (u != null && u.getType().name.equals(""String_Node_Str"")) {
      activate(location,1,pathSub,pgs.getWidth());
    }
 else     if (isTerrain) {
      activate(location,-1,pathSub,pgs.getWidth());
    }
  }
  for (int i=0; i < appropriateSubstrates.size(); i++) {
    int indexWithinAll=(substrateSize * appropriateSubstrates.get(i)) + location;
    int subID=subIDs.get(i);
    if (subID == path) {
      int subStart=indexWithinAll - location;
      for (int j=subStart; j < subStart + substrateSize; j++) {
        substrates[j]=pathSub[j - subStart];
      }
    }
 else {
      substrates[indexWithinAll]=getWeightedValue(subID,u,isTerrain);
    }
  }
  return substrates;
}","/** 
 * puts the current unit into all substrates where it should go according to parameters.
 * @param u unit to be put into substrates
 * @param substrates array containing all substrates. this array is modified and then returned
 * @param substrateSize how big each substrate is
 * @param location index within an individual substrate
 * @return double[] input as substrates, but with the unit added at location for every appropriate substrate
 */
private double[] populateSubstratesWith(Unit u,boolean isTerrain,double[] substrates,int location){
  ArrayList<Integer> appropriateSubstrates=new ArrayList<>();
  ArrayList<Integer> subIDs=new ArrayList<>();
  int numCurrentSubs=0;
  if (u != null) {
    if (areSubsActive[mobile]) {
      if (u.getType().canMove) {
        appropriateSubstrates.add(numCurrentSubs);
        subIDs.add(mobile);
      }
      numCurrentSubs++;
    }
    if (areSubsActive[buildings]) {
      if (!u.getType().canMove && u.getPlayer() != -1) {
        appropriateSubstrates.add(numCurrentSubs);
        subIDs.add(buildings);
      }
      numCurrentSubs++;
    }
    if (areSubsActive[myMobile]) {
      if (u.getType().canMove && u.getPlayer() == 0) {
        appropriateSubstrates.add(numCurrentSubs);
        subIDs.add(myMobile);
      }
      numCurrentSubs++;
    }
    if (areSubsActive[myBuildings]) {
      if (!u.getType().canMove && u.getPlayer() != 1) {
        appropriateSubstrates.add(numCurrentSubs);
        subIDs.add(myBuildings);
      }
      numCurrentSubs++;
    }
    if (areSubsActive[oppsMobile]) {
      if (u.getType().canMove && u.getPlayer() == 1) {
        appropriateSubstrates.add(numCurrentSubs);
        subIDs.add(oppsMobile);
      }
      numCurrentSubs++;
    }
    if (areSubsActive[oppsBuildings]) {
      if (!u.getType().canMove && u.getPlayer() != 0) {
        appropriateSubstrates.add(numCurrentSubs);
        subIDs.add(oppsBuildings);
      }
      numCurrentSubs++;
    }
    if (areSubsActive[myAll]) {
      if (u.getPlayer() == 0) {
        appropriateSubstrates.add(numCurrentSubs);
        subIDs.add(myAll);
      }
      numCurrentSubs++;
    }
    if (areSubsActive[oppsAll]) {
      if (u.getPlayer() == 1) {
        appropriateSubstrates.add(numCurrentSubs);
        subIDs.add(oppsAll);
      }
      numCurrentSubs++;
    }
  }
  if (areSubsActive[all]) {
    appropriateSubstrates.add(numCurrentSubs);
    subIDs.add(all);
    numCurrentSubs++;
  }
  if (areSubsActive[neutral]) {
    if (isTerrain || (u != null && u.getPlayer() == -1)) {
      appropriateSubstrates.add(numCurrentSubs);
      subIDs.add(neutral);
    }
    numCurrentSubs++;
  }
  if (areSubsActive[terrain]) {
    if (isTerrain) {
      appropriateSubstrates.add(numCurrentSubs);
      subIDs.add(terrain);
    }
    numCurrentSubs++;
  }
  double[] pathSub=new double[pgs.getWidth() * pgs.getHeight()];
  if (areSubsActive[path]) {
    appropriateSubstrates.add(numCurrentSubs);
    subIDs.add(path);
    if (u != null && u.getType().name.equals(""String_Node_Str"")) {
      pathSub=activate(location,1,pathSub,pgs.getWidth());
    }
 else     if (isTerrain) {
      pathSub=activate(location,-1,pathSub,pgs.getWidth());
    }
    numCurrentSubs++;
  }
  for (int i=0; i < appropriateSubstrates.size(); i++) {
    int indexWithinAll=(substrateSize * appropriateSubstrates.get(i)) + location;
    int subID=subIDs.get(i);
    if (subID == path) {
      int subStart=indexWithinAll - location;
      for (int j=subStart; j < subStart + substrateSize; j++) {
        substrates[j]=pathSub[j - subStart];
      }
    }
 else {
      System.out.println(substrates.length);
      substrates[indexWithinAll]=getWeightedValue(subID,u,isTerrain);
    }
  }
  return substrates;
}"
39146,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static <T extends BoardGameState>ArrayList<Pair<double[],double[]>> playGame(BoardGame<T> bg,BoardGamePlayer<T>[] players,List<BoardGameFitnessFunction<T>> fitScores,List<BoardGameFitnessFunction<T>> otherFit){
  if (CommonConstants.watch && bg instanceof TwoDimensionalBoardGame) {
    view=MMNEAT.boardGameViewer;
  }
  double[][][] fitnesses=new double[bg.getNumPlayers()][bg.getNumPlayers()][fitScores.size()];
  double[][][] otherScores=new double[bg.getNumPlayers()][bg.getNumPlayers()][otherFit.size()];
  for (int i=0; i < bg.getNumPlayers(); i++) {
    if (CommonConstants.watch) {
      for (int j=0; j < bg.getNumPlayers(); j++) {
        System.out.println(""String_Node_Str"" + (j + 1) + ""String_Node_Str""+ players[j]);
      }
    }
    bg.reset();
    for (    BoardGameFitnessFunction fitFunct : fitScores) {
      fitFunct.reset();
    }
    for (    BoardGameFitnessFunction fitFunct : otherFit) {
      fitFunct.reset();
    }
    while (!bg.isGameOver()) {
      if (CommonConstants.watch && bg instanceof TwoDimensionalBoardGame) {
        view.reset((TwoDimensionalBoardGameState)bg.getCurrentState());
      }
      if (stepByStep) {
      }
      int playIndex=bg.getCurrentPlayer();
      bg.move(players[playIndex]);
      for (      BoardGameFitnessFunction fitFunct : fitScores) {
        fitFunct.reset();
      }
      for (      BoardGameFitnessFunction fitFunct : otherFit) {
        fitFunct.updateFitness(bg.getCurrentState(),playIndex);
      }
    }
    if (CommonConstants.watch) {
      System.out.println(""String_Node_Str"" + bg.getWinners());
      if (bg instanceof TwoDimensionalBoardGame) {
        for (int j=0; j < bg.getNumPlayers(); j++) {
          System.out.println(""String_Node_Str"" + (j + 1) + ""String_Node_Str""+ ((TwoDimensionalBoardGame)bg).pieceCount(j));
        }
      }
    }
    if (CommonConstants.watch && bg instanceof TwoDimensionalBoardGame) {
      view.reset((TwoDimensionalBoardGameState)bg.getCurrentState());
      if (stepByStep) {
        System.out.println(""String_Node_Str"");
        System.out.print(""String_Node_Str"");
        MiscUtil.waitForReadStringAndEnterKeyPress();
      }
    }
    boolean originalWatch=CommonConstants.watch;
    CommonConstants.watch=false;
    boolean originalStepByStep=stepByStep;
    stepByStep=false;
    for (int k=0; k < players.length; k++) {
      int playerIndex=(k + i) % bg.getNumPlayers();
      for (int j=0; j < fitScores.size(); j++) {
        fitnesses[k][i][j]=(1.0 * fitScores.get(j).getFitness(players[k],playerIndex));
      }
      if (otherFit.size() > 1) {
        for (int j=0; j < otherFit.size(); j++) {
          otherScores[k][i][j]=(1.0 * otherFit.get(j).getFitness(players[k],playerIndex));
        }
      }
    }
    if (MMNEAT.evalReport != null) {
      MMNEAT.evalReport.log(""String_Node_Str"" + (i + 1) + ""String_Node_Str"");
      for (int j=0; j < bg.getNumPlayers(); j++) {
        MMNEAT.evalReport.log(""String_Node_Str"" + (j + 1) + ""String_Node_Str""+ players[j]);
        for (int k=0; k < fitScores.size(); k++) {
          MMNEAT.evalReport.log(""String_Node_Str"" + fitScores.get(k).getFitnessName() + ""String_Node_Str""+ fitnesses[j][i][k]);
        }
        for (int k=0; k < otherFit.size(); k++) {
          MMNEAT.evalReport.log(""String_Node_Str"" + otherFit.get(k).getFitnessName() + ""String_Node_Str""+ otherScores[j][i][k]);
        }
        MMNEAT.evalReport.log(""String_Node_Str"");
      }
      MMNEAT.evalReport.log(""String_Node_Str"" + bg.getWinners());
      if (bg instanceof TwoDimensionalBoardGame) {
        for (int j=0; j < bg.getNumPlayers(); j++) {
          MMNEAT.evalReport.log(""String_Node_Str"" + (j + 1) + ""String_Node_Str""+ ((TwoDimensionalBoardGame)bg).pieceCount(j));
        }
      }
      MMNEAT.evalReport.log(""String_Node_Str"");
    }
    CommonConstants.watch=originalWatch;
    stepByStep=originalStepByStep;
    ArrayUtil.rotateRight(players,1);
  }
  if (MMNEAT.evalReport != null) {
    MMNEAT.evalReport.log(""String_Node_Str"");
  }
  ArrayList<Pair<double[],double[]>> scoring=new ArrayList<Pair<double[],double[]>>(bg.getNumPlayers());
  for (int k=0; k < players.length; k++) {
    Pair<double[],double[]> evalResults=NoisyLonerTask.averageResults(fitnesses[k],otherScores[k]);
    scoring.add(evalResults);
  }
  return scoring;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static <T extends BoardGameState>ArrayList<Pair<double[],double[]>> playGame(BoardGame<T> bg,BoardGamePlayer<T>[] players,List<BoardGameFitnessFunction<T>> fitScores,List<BoardGameFitnessFunction<T>> otherFit){
  if (CommonConstants.watch && bg instanceof TwoDimensionalBoardGame) {
    view=MMNEAT.boardGameViewer;
  }
  double[][][] fitnesses=new double[bg.getNumPlayers()][bg.getNumPlayers()][fitScores.size()];
  double[][][] otherScores=new double[bg.getNumPlayers()][bg.getNumPlayers()][otherFit.size()];
  for (int i=0; i < bg.getNumPlayers(); i++) {
    if (CommonConstants.watch) {
      for (int j=0; j < bg.getNumPlayers(); j++) {
        System.out.println(""String_Node_Str"" + (j + 1) + ""String_Node_Str""+ players[j]);
      }
    }
    bg.reset();
    for (    BoardGameFitnessFunction fitFunct : fitScores) {
      fitFunct.reset();
    }
    for (    BoardGameFitnessFunction fitFunct : otherFit) {
      fitFunct.reset();
    }
    while (!bg.isGameOver()) {
      if (CommonConstants.watch && bg instanceof TwoDimensionalBoardGame) {
        view.reset((TwoDimensionalBoardGameState)bg.getCurrentState());
      }
      if (stepByStep) {
      }
      int playIndex=bg.getCurrentPlayer();
      bg.move(players[playIndex]);
      for (      BoardGameFitnessFunction fitFunct : fitScores) {
        fitFunct.updateFitness(bg.getCurrentState(),playIndex);
      }
      for (      BoardGameFitnessFunction fitFunct : otherFit) {
        fitFunct.updateFitness(bg.getCurrentState(),playIndex);
      }
    }
    if (CommonConstants.watch) {
      System.out.println(""String_Node_Str"" + bg.getWinners());
      if (bg instanceof TwoDimensionalBoardGame) {
        for (int j=0; j < bg.getNumPlayers(); j++) {
          System.out.println(""String_Node_Str"" + (j + 1) + ""String_Node_Str""+ ((TwoDimensionalBoardGame)bg).pieceCount(j));
        }
      }
    }
    if (CommonConstants.watch && bg instanceof TwoDimensionalBoardGame) {
      view.reset((TwoDimensionalBoardGameState)bg.getCurrentState());
      if (stepByStep) {
        System.out.println(""String_Node_Str"");
        System.out.print(""String_Node_Str"");
        MiscUtil.waitForReadStringAndEnterKeyPress();
      }
    }
    boolean originalWatch=CommonConstants.watch;
    CommonConstants.watch=false;
    boolean originalStepByStep=stepByStep;
    stepByStep=false;
    for (int k=0; k < players.length; k++) {
      int playerIndex=(k + i) % bg.getNumPlayers();
      for (int j=0; j < fitScores.size(); j++) {
        fitnesses[k][i][j]=(1.0 * fitScores.get(j).getFitness(players[k],playerIndex));
      }
      for (int j=0; j < otherFit.size(); j++) {
        otherScores[k][i][j]=(1.0 * otherFit.get(j).getFitness(players[k],playerIndex));
      }
    }
    if (MMNEAT.evalReport != null) {
      MMNEAT.evalReport.log(""String_Node_Str"" + (i + 1) + ""String_Node_Str"");
      for (int j=0; j < bg.getNumPlayers(); j++) {
        MMNEAT.evalReport.log(""String_Node_Str"" + (j + 1) + ""String_Node_Str""+ players[j]);
        for (int k=0; k < fitScores.size(); k++) {
          MMNEAT.evalReport.log(""String_Node_Str"" + fitScores.get(k).getFitnessName() + ""String_Node_Str""+ fitnesses[j][i][k]);
        }
        for (int k=0; k < otherFit.size(); k++) {
          MMNEAT.evalReport.log(""String_Node_Str"" + otherFit.get(k).getFitnessName() + ""String_Node_Str""+ otherScores[j][i][k]);
        }
        MMNEAT.evalReport.log(""String_Node_Str"");
      }
      MMNEAT.evalReport.log(""String_Node_Str"" + bg.getWinners());
      if (bg instanceof TwoDimensionalBoardGame) {
        for (int j=0; j < bg.getNumPlayers(); j++) {
          MMNEAT.evalReport.log(""String_Node_Str"" + (j + 1) + ""String_Node_Str""+ ((TwoDimensionalBoardGame)bg).pieceCount(j));
        }
      }
      MMNEAT.evalReport.log(""String_Node_Str"");
    }
    CommonConstants.watch=originalWatch;
    stepByStep=originalStepByStep;
    ArrayUtil.rotateRight(players,1);
  }
  if (MMNEAT.evalReport != null) {
    MMNEAT.evalReport.log(""String_Node_Str"");
  }
  ArrayList<Pair<double[],double[]>> scoring=new ArrayList<Pair<double[],double[]>>(bg.getNumPlayers());
  for (int k=0; k < players.length; k++) {
    Pair<double[],double[]> evalResults=NoisyLonerTask.averageResults(fitnesses[k],otherScores[k]);
    scoring.add(evalResults);
  }
  return scoring;
}"
39147,"@Override protected void reset(){
  for (int i=0; i < animations.length; i++) {
synchronized (animations[i]) {
      animations[i].clear();
    }
  }
  super.reset();
}","@Override protected void reset(){
  super.reset();
  for (int i=0; i < animations.length; i++) {
synchronized (animations[i]) {
      animations[i].clear();
    }
  }
}"
39148,"/** 
 * Define all parameter labels, default values, and help text
 */
public final void fillDefaults(){
  integerOptions.add(""String_Node_Str"",600,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",20,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",150,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",250,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",30,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",35,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3 * Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",ActivationFunctions.FTYPE_TANH,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",500,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",17,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",30,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",7,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",25,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3 * Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",20,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.DELAY,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Keyboard.NOTE_LENGTH_DEFAULT,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",250,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",500,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",36,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",36,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  longOptions.add(""String_Node_Str"",0l,""String_Node_Str"");
  longOptions.add(""String_Node_Str"",0l,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.4,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.2,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.99,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.25,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.025,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",-1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",10.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",50.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.25,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.8,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.05,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.4,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.2,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",Math.PI / 8.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",5.0 * Breve2DGame.AGENT_MAGNITUDE,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",SoundUtilExamples.PORTAL2_WAV,""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",SoundUtilExamples.CHRISTMAS_MID,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",BoardGamePlayerRandom.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",PieceDifferentialBoardGameHeuristic.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",BoardGamePlayerOneStepEval.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TwoDimensionalRawBoardGameFeatureExtractor.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",SimpleWinLoseDrawBoardGameFitness.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",CenteredSubstrateMapping.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",PreyFleeClosestPredatorController.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",AggressivePredatorController.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GaussianGenerator.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Max.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",JunctionNodes.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GhostsPillsMap.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TWEANNCrossover.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",SimpleWeaponManager.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",OpponentRelativeMovementOutputModel.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",OpponentRelativeSensorModel.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",FullTaskMediator.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",RushingPlayer.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",PlayerPredatorMonsterPrey.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GhostsThenPillsModeSelector.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",DomainSpecificCharacterization.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",StarterPacMan.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Legacy.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",LimitedSinglePopulationGenerationalEAExperiment.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",NSGA2.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",StateVariableExtractor.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",RLGlueAgent.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TWEANNGenotype.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",NNComplexEvaluationFunction.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",WinLossFitnessFunction.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",UCT.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",RandomBiasedAI.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
}","/** 
 * Define all parameter labels, default values, and help text
 */
public final void fillDefaults(){
  integerOptions.add(""String_Node_Str"",600,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",20,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",150,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",250,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",30,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",35,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3 * Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",ActivationFunctions.FTYPE_TANH,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",500,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",17,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",30,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",7,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",25,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3 * Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",20,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.DELAY,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Keyboard.NOTE_LENGTH_DEFAULT,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",250,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",500,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",36,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",36,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  longOptions.add(""String_Node_Str"",0l,""String_Node_Str"");
  longOptions.add(""String_Node_Str"",0l,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.4,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.2,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.99,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.25,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.025,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",-1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",10.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",50.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.25,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.8,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.05,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.4,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.2,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",Math.PI / 8.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",5.0 * Breve2DGame.AGENT_MAGNITUDE,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",SoundUtilExamples.PORTAL2_WAV,""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",SoundUtilExamples.CHRISTMAS_MID,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",BoardGamePlayerRandom.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",PieceDifferentialBoardGameHeuristic.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",BoardGamePlayerOneStepEval.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TwoDimensionalRawBoardGameFeatureExtractor.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",SimpleWinLoseDrawBoardGameFitness.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",CenteredSubstrateMapping.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",PreyFleeClosestPredatorController.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",AggressivePredatorController.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GaussianGenerator.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Max.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",JunctionNodes.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GhostsPillsMap.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TWEANNCrossover.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",SimpleWeaponManager.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",OpponentRelativeMovementOutputModel.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",OpponentRelativeSensorModel.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",FullTaskMediator.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",RushingPlayer.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",PlayerPredatorMonsterPrey.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GhostsThenPillsModeSelector.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",DomainSpecificCharacterization.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",StarterPacMan.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Legacy.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",LimitedSinglePopulationGenerationalEAExperiment.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",NSGA2.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",StateVariableExtractor.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",RLGlueAgent.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TWEANNGenotype.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",NNComplexEvaluationFunction.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",WinLossFitnessFunction.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",UCT.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",RandomBiasedAI.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
}"
39149,"@Override protected void save(int i){
  BufferedImage[] toSave=getAnimationImages(scores.get(i).individual.getPhenotype(),0,Parameters.parameters.integerParameter(""String_Node_Str""),true);
  JFileChooser chooser=new JFileChooser();
  chooser.setApproveButtonText(""String_Node_Str"");
  FileNameExtensionFilter filter=new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"");
  chooser.setFileFilter(filter);
  int returnVal=chooser.showOpenDialog(frame);
  if (returnVal == JFileChooser.APPROVE_OPTION) {
    System.out.println(""String_Node_Str"" + chooser.getSelectedFile().getName());
    try {
      AnimationUtil.createGif(toSave,Parameters.parameters.integerParameter(""String_Node_Str""),chooser.getSelectedFile().getName() + ""String_Node_Str"");
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    System.out.println(""String_Node_Str"" + chooser.getSelectedFile().getName() + ""String_Node_Str"");
  }
 else {
    System.out.println(""String_Node_Str"");
  }
}","@Override protected void save(int i){
  BufferedImage[] toSave=getAnimationImages(scores.get(i).individual.getPhenotype(),0,Parameters.parameters.integerParameter(""String_Node_Str""),true);
  JFileChooser chooser=new JFileChooser();
  chooser.setApproveButtonText(""String_Node_Str"");
  FileNameExtensionFilter filter=new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"");
  chooser.setFileFilter(filter);
  int returnVal=chooser.showOpenDialog(frame);
  if (returnVal == JFileChooser.APPROVE_OPTION) {
    System.out.println(""String_Node_Str"" + chooser.getSelectedFile().getName());
    try {
      AnimationUtil.createGif(toSave,Parameters.parameters.integerParameter(""String_Node_Str""),chooser.getCurrentDirectory() + ""String_Node_Str"" + chooser.getSelectedFile().getName()+ ""String_Node_Str"");
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    System.out.println(""String_Node_Str"" + chooser.getSelectedFile().getName() + ""String_Node_Str"");
  }
 else {
    System.out.println(""String_Node_Str"");
  }
}"
39150,"/** 
 * Constructor - all sliders are added here and mouse listening is enabled for hovering over the buttons
 * @throws IllegalAccessException
 */
public AnimationBreederTask(boolean justAnimationBreeder) throws IllegalAccessException {
  super();
  if (justAnimationBreeder) {
    animationLength=new JSlider(JSlider.HORIZONTAL,Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""));
    Hashtable<Integer,JLabel> animationLabels=new Hashtable<>();
    animationLength.setMinorTickSpacing(20);
    animationLength.setPaintTicks(true);
    animationLabels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
    animationLabels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
    animationLength.setLabelTable(animationLabels);
    animationLength.setPaintLabels(true);
    animationLength.setPreferredSize(new Dimension(150,40));
    animationLength.addChangeListener(new ChangeListener(){
      @Override public void stateChanged(      ChangeEvent e){
        JSlider source=(JSlider)e.getSource();
        if (!source.getValueIsAdjusting()) {
          int newLength=(int)source.getValue();
          Parameters.parameters.setInteger(""String_Node_Str"",newLength);
          resetButtons();
        }
      }
    }
);
    pauseLength=new JSlider(JSlider.HORIZONTAL,Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""));
    Hashtable<Integer,JLabel> pauseLabels=new Hashtable<>();
    pauseLength.setMinorTickSpacing(75);
    pauseLength.setPaintTicks(true);
    pauseLabels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
    pauseLabels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
    pauseLength.setLabelTable(pauseLabels);
    pauseLength.setPaintLabels(true);
    pauseLength.setPreferredSize(new Dimension(100,40));
    pauseLength.addChangeListener(new ChangeListener(){
      @Override public void stateChanged(      ChangeEvent e){
        JSlider source=(JSlider)e.getSource();
        if (!source.getValueIsAdjusting()) {
          int newLength=(int)source.getValue();
          Parameters.parameters.setInteger(""String_Node_Str"",newLength);
          resetButtons();
        }
      }
    }
);
    JPanel animation=new JPanel();
    animation.setLayout(new BoxLayout(animation,BoxLayout.Y_AXIS));
    JLabel animationLabel=new JLabel();
    animationLabel.setText(""String_Node_Str"");
    animation.add(animationLabel);
    animation.add(animationLength);
    JPanel pause=new JPanel();
    pause.setLayout(new BoxLayout(pause,BoxLayout.Y_AXIS));
    JLabel pauseLabel=new JLabel();
    pauseLabel.setText(""String_Node_Str"");
    pause.add(pauseLabel);
    pause.add(pauseLength);
    top.add(animation);
    top.add(pause);
  }
  pauseLengthBetweenFrames=new JSlider(JSlider.HORIZONTAL,Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""));
  Hashtable<Integer,JLabel> framePauseLabels=new Hashtable<>();
  pauseLengthBetweenFrames.setMinorTickSpacing(75);
  pauseLengthBetweenFrames.setPaintTicks(true);
  framePauseLabels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
  framePauseLabels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
  pauseLengthBetweenFrames.setLabelTable(framePauseLabels);
  pauseLengthBetweenFrames.setPaintLabels(true);
  pauseLengthBetweenFrames.setPreferredSize(new Dimension(100,40));
  pauseLengthBetweenFrames.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      JSlider source=(JSlider)e.getSource();
      if (!source.getValueIsAdjusting()) {
        int newLength=(int)source.getValue();
        Parameters.parameters.setInteger(""String_Node_Str"",newLength);
        resetButtons();
      }
    }
  }
);
  JPanel framePause=new JPanel();
  framePause.setLayout(new BoxLayout(framePause,BoxLayout.Y_AXIS));
  JLabel framePauseLabel=new JLabel();
  framePauseLabel.setText(""String_Node_Str"");
  framePause.add(framePauseLabel);
  framePause.add(pauseLengthBetweenFrames);
  if (!simplifiedInteractiveInterface) {
    top.add(framePause);
  }
  for (  JButton button : buttons) {
    button.addMouseListener(new MouseListener(){
      AnimationThread animation;
      @Override public void mouseClicked(      MouseEvent e){
      }
      @Override public void mousePressed(      MouseEvent e){
      }
      @Override public void mouseReleased(      MouseEvent e){
      }
      @Override public void mouseEntered(      MouseEvent e){
        Scanner id=new Scanner(e.toString());
        id.next();
        id.next();
        animation=new AnimationThread(id.nextInt());
        id.close();
        animation.start();
      }
      @Override public void mouseExited(      MouseEvent e){
        animation.stopAnimation();
      }
    }
);
  }
}","/** 
 * Constructor - all sliders are added here and mouse listening is enabled for hovering over the buttons
 * @throws IllegalAccessException
 */
public AnimationBreederTask(boolean justAnimationBreeder) throws IllegalAccessException {
  super();
  if (justAnimationBreeder) {
    animationLength=new JSlider(JSlider.HORIZONTAL,Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""));
    Hashtable<Integer,JLabel> animationLabels=new Hashtable<>();
    animationLength.setMinorTickSpacing(20);
    animationLength.setPaintTicks(true);
    animationLabels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
    animationLabels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
    animationLength.setLabelTable(animationLabels);
    animationLength.setPaintLabels(true);
    animationLength.setPreferredSize(new Dimension(150,40));
    animationLength.addChangeListener(new ChangeListener(){
      @Override public void stateChanged(      ChangeEvent e){
        JSlider source=(JSlider)e.getSource();
        if (!source.getValueIsAdjusting()) {
          int newLength=(int)source.getValue();
          Parameters.parameters.setInteger(""String_Node_Str"",newLength);
          resetButtons();
        }
      }
    }
);
    pauseLength=new JSlider(JSlider.HORIZONTAL,Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""));
    Hashtable<Integer,JLabel> pauseLabels=new Hashtable<>();
    pauseLength.setMinorTickSpacing(75);
    pauseLength.setPaintTicks(true);
    pauseLabels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
    pauseLabels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
    pauseLength.setLabelTable(pauseLabels);
    pauseLength.setPaintLabels(true);
    pauseLength.setPreferredSize(new Dimension(100,40));
    pauseLength.addChangeListener(new ChangeListener(){
      @Override public void stateChanged(      ChangeEvent e){
        JSlider source=(JSlider)e.getSource();
        if (!source.getValueIsAdjusting()) {
          int newLength=(int)source.getValue();
          Parameters.parameters.setInteger(""String_Node_Str"",newLength);
          resetButtons();
        }
      }
    }
);
    JPanel animation=new JPanel();
    animation.setLayout(new BoxLayout(animation,BoxLayout.Y_AXIS));
    JLabel animationLabel=new JLabel();
    animationLabel.setText(""String_Node_Str"");
    animation.add(animationLabel);
    animation.add(animationLength);
    JPanel pause=new JPanel();
    pause.setLayout(new BoxLayout(pause,BoxLayout.Y_AXIS));
    JLabel pauseLabel=new JLabel();
    pauseLabel.setText(""String_Node_Str"");
    pause.add(pauseLabel);
    pause.add(pauseLength);
    top.add(animation);
    top.add(pause);
  }
  pauseLengthBetweenFrames=new JSlider(JSlider.HORIZONTAL,Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""),Parameters.parameters.integerParameter(""String_Node_Str""));
  Hashtable<Integer,JLabel> framePauseLabels=new Hashtable<>();
  pauseLengthBetweenFrames.setMinorTickSpacing(75);
  pauseLengthBetweenFrames.setPaintTicks(true);
  framePauseLabels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
  framePauseLabels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
  pauseLengthBetweenFrames.setLabelTable(framePauseLabels);
  pauseLengthBetweenFrames.setPaintLabels(true);
  pauseLengthBetweenFrames.setPreferredSize(new Dimension(100,40));
  pauseLengthBetweenFrames.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      JSlider source=(JSlider)e.getSource();
      if (!source.getValueIsAdjusting()) {
        int newLength=(int)source.getValue();
        Parameters.parameters.setInteger(""String_Node_Str"",newLength);
        resetButtons();
      }
    }
  }
);
  JPanel framePause=new JPanel();
  framePause.setLayout(new BoxLayout(framePause,BoxLayout.Y_AXIS));
  JLabel framePauseLabel=new JLabel();
  framePauseLabel.setText(""String_Node_Str"");
  framePause.add(framePauseLabel);
  framePause.add(pauseLengthBetweenFrames);
  if (!simplifiedInteractiveInterface) {
    top.add(framePause);
  }
  if (!alwaysAnimate) {
    for (    JButton button : buttons) {
      button.addMouseListener(new MouseListener(){
        AnimationThread animation;
        @Override public void mouseClicked(        MouseEvent e){
        }
        @Override public void mousePressed(        MouseEvent e){
        }
        @Override public void mouseReleased(        MouseEvent e){
        }
        @Override public void mouseEntered(        MouseEvent e){
          Scanner id=new Scanner(e.toString());
          id.next();
          id.next();
          animation=new AnimationThread(id.nextInt());
          id.close();
          animation.start();
        }
        @Override public void mouseExited(        MouseEvent e){
          animation.stopAnimation();
        }
      }
);
    }
  }
}"
39151,"@Override protected void reset(){
  super.reset();
  for (int i=0; i < animations.length; i++) {
synchronized (animations[i]) {
      animations[i].clear();
    }
  }
}","@Override protected void reset(){
  for (int i=0; i < animations.length; i++) {
synchronized (animations[i]) {
      animations[i].clear();
    }
  }
  super.reset();
}"
39152,"private double distance(Unit currentUnit,int enemyBaseLocation){
  int baseY=enemyBaseLocation % pgs.getWidth();
  int baseX=enemyBaseLocation / pgs.getWidth();
  double distance=Math.sqrt(Math.abs((currentUnit.getX() - baseX) + (currentUnit.getY() - baseY)));
  System.out.println(""String_Node_Str"" + currentUnit.getX() + ""String_Node_Str""+ currentUnit.getY()+ ""String_Node_Str""+ baseX+ ""String_Node_Str""+ baseY+ ""String_Node_Str""+ distance);
  return distance;
}","private double distance(Unit currentUnit,int enemyBaseLocation){
  int baseY=enemyBaseLocation % pgs.getWidth();
  int baseX=enemyBaseLocation / pgs.getWidth();
  return Math.sqrt(Math.abs((currentUnit.getX() - baseX) * (currentUnit.getX() - baseX) + (currentUnit.getY() - baseY) * (currentUnit.getY() - baseY)));
}"
39153,"/** 
 * counts the number of each unit belonging to each player
 * @param gs current game state
 * @return	array containing input information
 * @author alicequint
 */
public double[] gameStateToArray(GameState gs){
  PhysicalGameState pgs=gs.getPhysicalGameState();
  double[] unitsOnBoard=new double[18];
  unitsOnBoard[workerDelta]=0;
  unitsOnBoard[mobileDelta]=0;
  int workerDeltaUpdates=0;
  int mobileDeltaUpdates=0;
  int enemyBaseLocation=-1;
  int friendlyBaseLocation=-1;
  Unit currentUnit;
  int playerAdjustment;
  for (int i=0; i < pgs.getWidth(); i++) {
    for (int j=0; j < pgs.getHeight(); j++) {
      currentUnit=pgs.getUnitAt(i,j);
      if (currentUnit != null) {
        playerAdjustment=(currentUnit.getPlayer() == 0) ? 0 : enemyAdjustment;
        unitsOnBoard[bases + playerAdjustment]++;
        unitsOnBoard[resources + playerAdjustment]+=currentUnit.getResources();
        unitsOnBoard[hp + playerAdjustment]=currentUnit.getHitPoints();
        if (currentUnit.getPlayer() == 1) {
          enemyBaseLocation=Math.max(enemyBaseLocation,(currentUnit.getY() * pgs.getWidth()) + currentUnit.getX());
        }
        if (currentUnit.getPlayer() == 0) {
          friendlyBaseLocation=Math.min(friendlyBaseLocation,(currentUnit.getY() * pgs.getWidth()) + currentUnit.getX());
        }
      }
    }
  }
  for (int i=0; i < pgs.getWidth(); i++) {
    for (int j=0; j < pgs.getHeight(); j++) {
      currentUnit=pgs.getUnitAt(i,j);
      if (currentUnit != null) {
        playerAdjustment=(currentUnit.getPlayer() == 0) ? 0 : enemyAdjustment;
        double currentDistance;
switch (currentUnit.getType().name) {
case ""String_Node_Str"":
{
            unitsOnBoard[worker + playerAdjustment]++;
            unitsOnBoard[resources + playerAdjustment]+=currentUnit.getResources();
            if (currentUnit.getPlayer() == 0) {
              if (enemyBaseLocation != -1) {
                currentDistance=distance(currentUnit,enemyBaseLocation);
                System.out.println(unitsOnBoard[mobileDelta] + ""String_Node_Str"" + currentDistance+ ""String_Node_Str""+ unitsOnBoard[mobileDelta]+ ""String_Node_Str""+ mobileDeltaUpdates);
                unitsOnBoard[mobileDelta]+=(currentDistance - unitsOnBoard[mobileDelta]) / (++mobileDeltaUpdates);
                MiscUtil.waitForReadStringAndEnterKeyPress();
              }
              if (friendlyBaseLocation != -1) {
                currentDistance=distance(currentUnit,enemyBaseLocation);
                unitsOnBoard[workerDelta]+=(currentDistance - unitsOnBoard[workerDelta]) / (++workerDeltaUpdates);
              }
            }
            break;
          }
case ""String_Node_Str"":
{
          unitsOnBoard[light + playerAdjustment]++;
          if (currentUnit.getPlayer() == 0 && enemyBaseLocation != -1) {
            currentDistance=distance(currentUnit,enemyBaseLocation);
            unitsOnBoard[mobileDelta]+=(currentDistance - unitsOnBoard[mobileDelta]) / (++mobileDeltaUpdates);
          }
          break;
        }
case ""String_Node_Str"":
{
        unitsOnBoard[heavy + playerAdjustment]++;
        if (currentUnit.getPlayer() == 0 && enemyBaseLocation != -1) {
          currentDistance=distance(currentUnit,enemyBaseLocation);
          unitsOnBoard[mobileDelta]+=(currentDistance - unitsOnBoard[mobileDelta]) / (++mobileDeltaUpdates);
        }
        break;
      }
case ""String_Node_Str"":
{
      unitsOnBoard[ranged + playerAdjustment]++;
      if (currentUnit.getPlayer() == 0 && enemyBaseLocation != -1) {
        currentDistance=distance(currentUnit,enemyBaseLocation);
        unitsOnBoard[mobileDelta]+=(currentDistance - unitsOnBoard[mobileDelta]) / (++mobileDeltaUpdates);
      }
      break;
    }
case ""String_Node_Str"":
{
    unitsOnBoard[barracks + playerAdjustment]++;
    unitsOnBoard[hp + playerAdjustment]=currentUnit.getHitPoints();
    break;
  }
default :
break;
}
}
}
}
System.out.println(""String_Node_Str"" + unitsOnBoard[mobileDelta] + ""String_Node_Str""+ unitsOnBoard[workerDelta]);
return unitsOnBoard;
}","/** 
 * counts the number of each unit belonging to each player
 * @param gs current game state
 * @return	array containing input information
 * @author alicequint
 */
public double[] gameStateToArray(GameState gs){
  PhysicalGameState pgs=gs.getPhysicalGameState();
  double[] unitsOnBoard=new double[18];
  unitsOnBoard[workerDelta]=0;
  unitsOnBoard[mobileDelta]=0;
  int workerDeltaUpdates=0;
  int mobileDeltaUpdates=0;
  int enemyBaseLocation=-1;
  int friendlyBaseLocation=-1;
  Unit currentUnit;
  int playerAdjustment;
  for (int i=0; i < pgs.getWidth(); i++) {
    for (int j=0; j < pgs.getHeight(); j++) {
      currentUnit=pgs.getUnitAt(i,j);
      if (currentUnit != null) {
        playerAdjustment=(currentUnit.getPlayer() == 0) ? 0 : enemyAdjustment;
        unitsOnBoard[bases + playerAdjustment]++;
        unitsOnBoard[resources + playerAdjustment]+=currentUnit.getResources();
        unitsOnBoard[hp + playerAdjustment]=currentUnit.getHitPoints();
        if (currentUnit.getPlayer() == 1) {
          enemyBaseLocation=Math.max(enemyBaseLocation,(currentUnit.getY() * pgs.getWidth()) + currentUnit.getX());
        }
        if (currentUnit.getPlayer() == 0) {
          friendlyBaseLocation=Math.min(friendlyBaseLocation,(currentUnit.getY() * pgs.getWidth()) + currentUnit.getX());
        }
      }
    }
  }
  for (int i=0; i < pgs.getWidth(); i++) {
    for (int j=0; j < pgs.getHeight(); j++) {
      currentUnit=pgs.getUnitAt(i,j);
      if (currentUnit != null) {
        playerAdjustment=(currentUnit.getPlayer() == 0) ? 0 : enemyAdjustment;
        double currentDistance;
switch (currentUnit.getType().name) {
case ""String_Node_Str"":
{
            unitsOnBoard[worker + playerAdjustment]++;
            unitsOnBoard[resources + playerAdjustment]+=currentUnit.getResources();
            if (currentUnit.getPlayer() == 0) {
              if (enemyBaseLocation != -1) {
                currentDistance=distance(currentUnit,enemyBaseLocation);
                unitsOnBoard[mobileDelta]+=(currentDistance - unitsOnBoard[mobileDelta]) / (++mobileDeltaUpdates);
                MiscUtil.waitForReadStringAndEnterKeyPress();
              }
              if (friendlyBaseLocation != -1) {
                currentDistance=distance(currentUnit,enemyBaseLocation);
                unitsOnBoard[workerDelta]+=(currentDistance - unitsOnBoard[workerDelta]) / (++workerDeltaUpdates);
              }
            }
            break;
          }
case ""String_Node_Str"":
{
          unitsOnBoard[light + playerAdjustment]++;
          if (currentUnit.getPlayer() == 0 && enemyBaseLocation != -1) {
            currentDistance=distance(currentUnit,enemyBaseLocation);
            unitsOnBoard[mobileDelta]+=(currentDistance - unitsOnBoard[mobileDelta]) / (++mobileDeltaUpdates);
          }
          break;
        }
case ""String_Node_Str"":
{
        unitsOnBoard[heavy + playerAdjustment]++;
        if (currentUnit.getPlayer() == 0 && enemyBaseLocation != -1) {
          currentDistance=distance(currentUnit,enemyBaseLocation);
          unitsOnBoard[mobileDelta]+=(currentDistance - unitsOnBoard[mobileDelta]) / (++mobileDeltaUpdates);
        }
        break;
      }
case ""String_Node_Str"":
{
      unitsOnBoard[ranged + playerAdjustment]++;
      if (currentUnit.getPlayer() == 0 && enemyBaseLocation != -1) {
        currentDistance=distance(currentUnit,enemyBaseLocation);
        unitsOnBoard[mobileDelta]+=(currentDistance - unitsOnBoard[mobileDelta]) / (++mobileDeltaUpdates);
      }
      break;
    }
case ""String_Node_Str"":
{
    unitsOnBoard[barracks + playerAdjustment]++;
    unitsOnBoard[hp + playerAdjustment]=currentUnit.getHitPoints();
    break;
  }
default :
break;
}
}
}
}
return unitsOnBoard;
}"
39154,"@Override protected void additionalButtonClickAction(int scoreIndex,Genotype<T> individual){
  if (arrayPlayer != null) {
    arrayPlayer.stopPlayback();
  }
  if (chosen[scoreIndex]) {
    Network phenotype=individual.getPhenotype();
    double[] amplitude=SoundFromCPPNUtil.amplitudeRemixer(phenotype,WAVDoubleArray,Parameters.parameters.integerParameter(""String_Node_Str""),playBackRate,inputMultipliers);
    arrayPlayer=PlayDoubleArray.playDoubleArray(format,amplitude);
  }
}","@Override protected void additionalButtonClickAction(int scoreIndex,Genotype<T> individual){
  if (arrayPlayer != null) {
    arrayPlayer.stopPlayback();
  }
  if (chosen[scoreIndex]) {
    Network phenotype=individual.getPhenotype();
    double[] amplitude=SoundFromCPPNUtil.amplitudeRemixer(phenotype,WAVDoubleArray,Parameters.parameters.integerParameter(""String_Node_Str""),FREQUENCY_DEFAULT,inputMultipliers);
    arrayPlayer=PlayDoubleArray.playDoubleArray(amplitude);
  }
}"
39155,"@Override protected void saveSound(int i,JFileChooser chooser){
  SoundFromCPPNUtil.saveRemixedFileFromCPPN(scores.get(i).individual.getPhenotype(),WAVDoubleArray,Parameters.parameters.integerParameter(""String_Node_Str""),playBackRate,inputMultipliers,chooser.getSelectedFile().getName() + ""String_Node_Str"",format);
}","@Override protected void saveSound(int i,JFileChooser chooser){
  SoundFromCPPNUtil.saveRemixedFileFromCPPN(scores.get(i).individual.getPhenotype(),WAVDoubleArray,Parameters.parameters.integerParameter(""String_Node_Str""),FREQUENCY_DEFAULT,inputMultipliers,chooser.getSelectedFile().getName() + ""String_Node_Str"",format);
}"
39156,"@Override protected BufferedImage getButtonImage(Network phenotype,int width,int height,double[] inputMultipliers){
  double[] amplitude=SoundFromCPPNUtil.amplitudeRemixer(phenotype,WAVDoubleArray,Parameters.parameters.integerParameter(""String_Node_Str""),playBackRate,inputMultipliers);
  BufferedImage wavePlotImage=GraphicsUtil.wavePlotFromDoubleArray(amplitude,height,width);
  return wavePlotImage;
}","@Override protected BufferedImage getButtonImage(Network phenotype,int width,int height,double[] inputMultipliers){
  double[] amplitude=SoundFromCPPNUtil.amplitudeRemixer(phenotype,WAVDoubleArray,Parameters.parameters.integerParameter(""String_Node_Str""),FREQUENCY_DEFAULT,inputMultipliers);
  BufferedImage wavePlotImage=GraphicsUtil.wavePlotFromDoubleArray(amplitude,height,width);
  return wavePlotImage;
}"
39157,"/** 
 * Uses a double array of amplitudes and a CPPN to generate a remixed sound and saves that  output into a file.
 * @param CPPN network used to generate amplitude
 * @param inputWAV double array representing WAV file being remixed
 * @param length length of sample
 * @param frequency Frequency of note being manipulated
 * @param sampleRate specified rate of input wav file 
 * @param inputMultipliers double array determining whether checkboxes have been turned on or off in Breedesizer
 * @param fileName String representation of location where generated file will be saved
 * @param format 
 */
public static void saveRemixedFileFromCPPN(Network cppn,double[] inputWAV,int length,double sampleRate,double[] inputMultipliers,String fileName,AudioFormat format){
  double[] generatedSound=amplitudeRemixer(cppn,inputWAV,length,sampleRate,inputMultipliers);
  SaveFromArray.saveFileFromDoubleArray(fileName,generatedSound,format);
}","/** 
 * Uses a double array of amplitudes and a CPPN to generate a remixed sound and saves that  output into a file.
 * @param CPPN network used to generate amplitude
 * @param inputWAV double array representing WAV file being remixed
 * @param length length of sample
 * @param frequency Frequency of note being manipulated
 * @param inputMultipliers double array determining whether checkboxes have been turned on or off in Breedesizer
 * @param fileName String representation of location where generated file will be saved
 * @param format 
 */
public static void saveRemixedFileFromCPPN(Network cppn,double[] inputWAV,int length,double frequency,double[] inputMultipliers,String fileName,AudioFormat format){
  double[] generatedSound=amplitudeRemixer(cppn,inputWAV,length,frequency,inputMultipliers);
  SaveFromArray.saveFileFromDoubleArray(fileName,generatedSound,format);
}"
39158,"/** 
 * Takes in a WAV file represented as a double array and uses an input generated CPPN to ""remix"" the sound or manipulate it according to the specifications of the network. Loops through the inputs and manipulates  them according to the length, frequency, and whether the input multipliers have been turned on or not. Outputs a double array that represents the audio of the newly remixed audio. 
 * @param CPPN network used to generate amplitude
 * @param inputWAV double array representing WAV file being remixed
 * @param length length of sample
 * @param frequency Frequency of note being manipulated
 * @param sampleRate specified rate of input wav file 
 * @param inputMultipliers double array determining whether checkboxes have been turned on or off in Breedesizer
 * @return
 */
public static double[] amplitudeRemixer(Network CPPN,double[] inputWAV,int length,double sampleRate,double[] inputMultipliers){
  double[] result=new double[length];
  for (double time=0; time < length; time++) {
    double[] inputs=new double[]{time / sampleRate,Math.sin(2 * Math.PI * time / sampleRate),inputWAV[(int)time],HyperNEATCPPNGenotype.BIAS};
    for (int i=0; i < inputs.length; i++) {
      inputs[i]=inputs[i] * inputMultipliers[i];
    }
    double[] outputs=CPPN.process(inputs);
    result[(int)time]=outputs[0];
  }
  return result;
}","/** 
 * Takes in a WAV file represented as a double array and uses an input generated CPPN to ""remix"" the sound or manipulate it according to the specifications of the network. Loops through the inputs and manipulates  them according to the length, frequency, and whether the input multipliers have been turned on or not. Outputs a double array that represents the audio of the newly remixed audio. 
 * @param CPPN network used to generate amplitude
 * @param inputWAV double array representing WAV file being remixed
 * @param length length of sample
 * @param frequency Frequency of note being manipulated
 * @param sampleRate specified rate of input wav file 
 * @param inputMultipliers double array determining whether checkboxes have been turned on or off in Breedesizer
 * @return
 */
public static double[] amplitudeRemixer(Network CPPN,double[] inputWAV,int length,double frequency,double[] inputMultipliers){
  double[] result=new double[length];
  for (double time=0; time < length; time++) {
    double[] inputs=new double[]{time / PlayDoubleArray.SAMPLE_RATE,Math.sin(2 * Math.PI * frequency* time / PlayDoubleArray.SAMPLE_RATE),inputWAV[(int)time],HyperNEATCPPNGenotype.BIAS};
    for (int i=0; i < inputs.length; i++) {
      inputs[i]=inputs[i] * inputMultipliers[i];
    }
    double[] outputs=CPPN.process(inputs);
    result[(int)time]=outputs[0];
  }
  return result;
}"
39159,"/** 
 * HyperNEAT Method that returns a list of information about the substrate layers contained in the network.
 * @return List of Substrates in order from inputs to hidden to outputlayers
 */
public static List<Substrate> getSubstrateInformation(PhysicalGameState pgs){
}","/** 
 * HyperNEAT Method that returns a list of information about the substrate layers contained in the network.
 * @return List of Substrates in order from inputs to hidden to outputlayers
 */
public static List<Substrate> getSubstrateInformation(PhysicalGameState pgs){
  List<Triple<String,Integer,Integer>> output=null;
  return HyperNEATUtil.getSubstrateInformation(pgs.getWidth(),pgs.getHeight(),getNumInputSubstrates(),processingWidth,processingDepth,output);
}"
39160,"/** 
 * HyperNEAT method that connects substrates to eachother
 * @param pgs physical game state in use
 * @return
 */
public static List<Triple<String,String,Boolean>> getSubstrateConnectivity(PhysicalGameState pgs){
  return HyperNEATUtil.getSubstrateConnectivity(numInputSubstrates,processingWidth,processingDepth,outputNames);
}","/** 
 * HyperNEAT method that connects substrates to eachother
 * @param pgs physical game state in use
 * @return
 */
public static List<Triple<String,String,Boolean>> getSubstrateConnectivity(PhysicalGameState pgs){
  List<String> outputNames=null;
  return HyperNEATUtil.getSubstrateConnectivity(getNumInputSubstrates(),outputNames);
}"
39161,"/** 
 * Loops through array of frequencies generated from a MIDI file and plays it using an array of CPPNS, essentially making the CPPN the ""instrument"" for each track. Uses similar code as the original  playMIDIWithCPPNFromString() method, but calculates double arrays for individual tracks so that they can be manipulated by unique CPPNs, and then adds all arrays together using zipAdd().
 * @param audio string representation of MIDI file being analyzed
 * @param cppn Input network being used as the ""instrument"" to generate MIDI file playback
 * @param noteLengthScale Specified playback speed from JSlider on Breedesizer interface
 */
public static AmplitudeArrayPlayer playMIDIWithCPPNsFromString(String audio,Network[] cppns,double noteLengthScale){
  File audioFile=new File(audio);
  Sequence sequence;
  try {
    sequence=MidiSystem.getSequence(audioFile);
    Track[] tracks=sequence.getTracks();
    int arrayLength=0;
    for (int i=0; i < tracks.length; i++) {
      arrayLength=Math.max(tracks[i].size(),arrayLength);
    }
    double[] data=new double[0];
    System.out.println(""String_Node_Str"" + arrayLength);
    for (int i=0; i < tracks.length; i++) {
      ArrayList<Triple<ArrayList<Double>,ArrayList<Long>,ArrayList<Long>>> sound=soundLines(tracks[i]);
      if (i > cppns.length - 1) {
        double[] lineData=lineToAmplitudeArray(audio,sound,cppns[i - cppns.length],noteLengthScale);
        data=ArrayUtil.zipAdd(data,lineData,Math.max(data.length,lineData.length));
      }
 else {
        double[] lineData=lineToAmplitudeArray(audio,sound,cppns[i],noteLengthScale);
        System.out.println(""String_Node_Str"" + data.length);
        System.out.println(""String_Node_Str"" + lineData.length);
        data=ArrayUtil.zipAdd(data,lineData,Math.max(data.length,lineData.length));
      }
    }
    return PlayDoubleArray.playDoubleArray(data);
  }
 catch (  InvalidMidiDataException|IOException e) {
    e.printStackTrace();
  }
  return null;
}","/** 
 * Loops through array of frequencies generated from a MIDI file and plays it using an array of CPPNS, essentially making the CPPN the ""instrument"" for each track. Uses similar code as the original  playMIDIWithCPPNFromString() method, but calculates double arrays for individual tracks so that they can be manipulated by unique CPPNs, and then adds all arrays together using zipAdd().
 * @param audio string representation of MIDI file being analyzed
 * @param cppn Input network being used as the ""instrument"" to generate MIDI file playback
 * @param noteLengthScale Specified playback speed from JSlider on Breedesizer interface
 */
public static AmplitudeArrayPlayer playMIDIWithCPPNsFromString(String audio,Network[] cppns,double noteLengthScale){
  File audioFile=new File(audio);
  Sequence sequence;
  try {
    sequence=MidiSystem.getSequence(audioFile);
    Track[] tracks=sequence.getTracks();
    double[] data=new double[0];
    for (int i=0; i < tracks.length; i++) {
      ArrayList<Triple<ArrayList<Double>,ArrayList<Long>,ArrayList<Long>>> sound=soundLines(tracks[i]);
      if (i > cppns.length - 1) {
        double[] lineData=lineToAmplitudeArray(audio,sound,cppns[i - cppns.length],noteLengthScale);
        data=ArrayUtil.zipAdd(data,lineData,Math.max(data.length,lineData.length));
      }
 else {
        double[] lineData=lineToAmplitudeArray(audio,sound,cppns[i],noteLengthScale);
        data=ArrayUtil.zipAdd(data,lineData,Math.max(data.length,lineData.length));
      }
    }
    for (int i=0; i < data.length; i++) {
      data[i]/=tracks.length;
    }
    return PlayDoubleArray.playDoubleArray(data);
  }
 catch (  InvalidMidiDataException|IOException e) {
    e.printStackTrace();
  }
  return null;
}"
39162,"public static void multipleCPPNMIDIPlayback(){
  HyperNEATCPPNGenotype test=new HyperNEATCPPNGenotype(3,1,0);
  Network[] cppns=new Network[30];
  for (int i=0; i < 30; i++) {
    test.mutate();
    cppns[i]=test.getCPPN();
  }
  MIDIUtil.playMIDIWithCPPNsFromString(SOLO_PIANO_MID,cppns,1);
}","public static void multipleCPPNMIDIPlayback(){
  HyperNEATCPPNGenotype test=new HyperNEATCPPNGenotype(3,1,0);
  Network[] cppns=new Network[30];
  for (int i=0; i < 30; i++) {
    test.mutate();
    cppns[i]=test.getCPPN();
  }
  MIDIUtil.playMIDIWithCPPNsFromString(CHRISTMAS_MID,cppns,1);
}"
39163,"/** 
 * Takes in data of frequencies, lengths, and starting times of an audio file and  reconstructs the file as a single playable amplitude array that uses a generated CPPN as the instrument.
 * @param audio Original MIDI file
 * @param midiLists ArrayList containing ArrayLists with the file's frequencies, lengths, and start times of all notes
 * @param cppn input CPPN used to play back reconstructed audio
 * @return playable double array of amplitudes
 */
public static double[] lineToAmplitudeArray(String audio,ArrayList<Triple<ArrayList<Double>,ArrayList<Long>,ArrayList<Long>>> midiLists,Network cppn,double noteLengthScale){
  File audioFile=new File(audio);
  try {
    Sequence sequence=MidiSystem.getSequence(audioFile);
    double amplitudeLengthMultiplier=PlayDoubleArray.DEFAULT_AUDIO_FORMAT.getFrameRate() / (sequence.getMicrosecondLength() / sequence.getTickLength());
    amplitudeLengthMultiplier*=noteLengthScale;
    amplitudeLengthMultiplier=Math.ceil(amplitudeLengthMultiplier);
    System.out.println(""String_Node_Str"" + amplitudeLengthMultiplier);
    long totalTicks=0;
    for (int i=0; i < midiLists.size(); i++) {
      long lineTicks=midiLists.get(i).t3.get(midiLists.get(i).t3.size() - 1) + midiLists.get(i).t2.get(midiLists.get(i).t2.size() - 1);
      System.out.println(""String_Node_Str"" + lineTicks);
      System.out.println(""String_Node_Str"" + totalTicks);
      totalTicks=Math.max(totalTicks,lineTicks);
    }
    double[] amplitudeArray=new double[(int)(amplitudeLengthMultiplier * totalTicks)];
    for (int k=0; k < midiLists.size(); k++) {
      for (int i=0; i < midiLists.get(k).t1.size(); i++) {
        int amplitudeLength=(int)(amplitudeLengthMultiplier * midiLists.get(k).t2.get(i));
        double[] amplitude=SoundFromCPPNUtil.amplitudeGenerator(cppn,amplitudeLength,midiLists.get(k).t1.get(i));
        int start=(int)(amplitudeLengthMultiplier * midiLists.get(k).t3.get(i));
        for (int j=0; j < amplitude.length; j++) {
          amplitudeArray[start + j]+=amplitude[j];
        }
      }
    }
    for (int i=0; i < amplitudeArray.length; i++) {
      amplitudeArray[i]/=2;
    }
    return amplitudeArray;
  }
 catch (  InvalidMidiDataException|IOException e) {
    e.printStackTrace();
    System.exit(1);
  }
  return null;
}","/** 
 * Takes in data of frequencies, lengths, and starting times of an audio file and  reconstructs the file as a single playable amplitude array that uses a generated CPPN as the instrument.
 * @param audio Original MIDI file
 * @param midiLists ArrayList containing ArrayLists with the file's frequencies, lengths, and start times of all notes
 * @param cppn input CPPN used to play back reconstructed audio
 * @return playable double array of amplitudes
 */
public static double[] lineToAmplitudeArray(String audio,ArrayList<Triple<ArrayList<Double>,ArrayList<Long>,ArrayList<Long>>> midiLists,Network cppn,double noteLengthScale){
  File audioFile=new File(audio);
  try {
    Sequence sequence=MidiSystem.getSequence(audioFile);
    Track[] tracks=sequence.getTracks();
    int longestTrack=0;
    for (int i=0; i < tracks.length; i++) {
      longestTrack=Math.max(longestTrack,tracks[i].size());
    }
    System.out.println(""String_Node_Str"" + longestTrack);
    double amplitudeLengthMultiplier=getAmplitudeLengthMultiplier(audio);
    System.out.println(""String_Node_Str"" + midiLists.size());
    amplitudeLengthMultiplier*=noteLengthScale;
    amplitudeLengthMultiplier=Math.ceil(amplitudeLengthMultiplier);
    System.out.println(""String_Node_Str"" + amplitudeLengthMultiplier);
    long totalTicks=0;
    for (int i=0; i < midiLists.size(); i++) {
      long lineTicks=midiLists.get(i).t3.get(midiLists.get(i).t3.size() - 1) + midiLists.get(i).t2.get(midiLists.get(i).t2.size() - 1);
      System.out.println(""String_Node_Str"" + lineTicks);
      System.out.println(""String_Node_Str"" + totalTicks);
      totalTicks=Math.max(totalTicks,lineTicks);
    }
    double[] amplitudeArray=new double[(int)(amplitudeLengthMultiplier * totalTicks)];
    for (int k=0; k < midiLists.size(); k++) {
      for (int i=0; i < midiLists.get(k).t1.size(); i++) {
        int amplitudeLength=(int)(amplitudeLengthMultiplier * midiLists.get(k).t2.get(i));
        double[] amplitude=SoundFromCPPNUtil.amplitudeGenerator(cppn,amplitudeLength,midiLists.get(k).t1.get(i));
        int start=(int)(amplitudeLengthMultiplier * midiLists.get(k).t3.get(i));
        for (int j=0; j < amplitude.length; j++) {
          amplitudeArray[start + j]+=amplitude[j];
        }
      }
    }
    for (int i=0; i < amplitudeArray.length; i++) {
      amplitudeArray[i]/=midiLists.size();
    }
    return amplitudeArray;
  }
 catch (  InvalidMidiDataException|IOException e) {
    e.printStackTrace();
    System.exit(1);
  }
  return null;
}"
39164,"/** 
 * Method that takes in a MIDI file and prints out useful information about the note, whether the  note is on or off, the key, and the velocity. This is printed for each individual track in the  MIDI file. Not necessary for functioning of other methods, but contains useful information about  functioning of MIDI files (channels, tracks, notes, velocity, etc.)
 * @param audioFile input MIDI file
 */
public static void MIDIData(File audioFile){
  Sequence sequence;
  try {
    sequence=MidiSystem.getSequence(audioFile);
    int trackNumber=0;
    for (    Track track : sequence.getTracks()) {
      trackNumber++;
      System.out.println(""String_Node_Str"" + trackNumber + ""String_Node_Str""+ track.size());
      System.out.println();
      for (int i=0; i < track.size(); i++) {
        MidiEvent event=track.get(i);
        System.out.print(""String_Node_Str"" + event.getTick() + ""String_Node_Str"");
        MidiMessage message=event.getMessage();
        if (message instanceof ShortMessage) {
          ShortMessage sm=(ShortMessage)message;
          System.out.print(""String_Node_Str"" + sm.getChannel() + ""String_Node_Str"");
          if (sm.getCommand() == NOTE_ON) {
            int key=sm.getData1();
            int octave=(key / 12) - 1;
            int note=key % 12;
            String noteName=NOTE_NAMES[note];
            int velocity=sm.getData2();
            System.out.println(""String_Node_Str"" + noteName + octave+ ""String_Node_Str""+ key+ ""String_Node_Str""+ velocity);
          }
 else           if (sm.getCommand() == NOTE_OFF) {
            int key=sm.getData1();
            int octave=(key / 12) - 1;
            int note=key % 12;
            String noteName=NOTE_NAMES[note];
            int velocity=sm.getData2();
            System.out.println(""String_Node_Str"" + noteName + octave+ ""String_Node_Str""+ key+ ""String_Node_Str""+ velocity);
          }
 else {
            System.out.println(""String_Node_Str"" + sm.getCommand());
          }
        }
 else {
          System.out.println(""String_Node_Str"" + message.getClass());
        }
      }
      System.out.println();
    }
  }
 catch (  InvalidMidiDataException|IOException e) {
    e.printStackTrace();
  }
}","/** 
 * Method that takes in a MIDI file and prints out useful information about the note, whether the  note is on or off, the key, and the velocity. This is printed for each individual track in the  MIDI file. Not necessary for functioning of other methods, but contains useful information about  functioning of MIDI files (channels, tracks, notes, velocity, etc.)
 * @param audioFile input MIDI file
 */
public static void MIDIData(File audioFile){
  Sequence sequence;
  try {
    sequence=MidiSystem.getSequence(audioFile);
    System.out.println(""String_Node_Str"" + sequence.getTickLength());
    System.out.println(""String_Node_Str"" + sequence.getMicrosecondLength());
    System.out.println(""String_Node_Str"" + sequence.getResolution());
    System.out.println(""String_Node_Str"" + sequence.getDivisionType());
    int trackNumber=0;
    for (    Track track : sequence.getTracks()) {
      trackNumber++;
      System.out.println(""String_Node_Str"" + trackNumber + ""String_Node_Str""+ track.size());
      System.out.println();
      for (int i=0; i < track.size(); i++) {
        MidiEvent event=track.get(i);
        MidiMessage message=event.getMessage();
        if (message instanceof ShortMessage) {
          ShortMessage sm=(ShortMessage)message;
          if (sm.getCommand() == NOTE_ON) {
            int key=sm.getData1();
            int octave=(key / 12) - 1;
            int note=key % 12;
            String noteName=NOTE_NAMES[note];
            int velocity=sm.getData2();
          }
 else           if (sm.getCommand() == NOTE_OFF) {
            int key=sm.getData1();
            int octave=(key / 12) - 1;
            int note=key % 12;
            String noteName=NOTE_NAMES[note];
            int velocity=sm.getData2();
          }
 else {
          }
        }
 else {
        }
      }
      System.out.println();
    }
  }
 catch (  InvalidMidiDataException|IOException e) {
    e.printStackTrace();
  }
}"
39165,"public static void newMIDIUtilPlay(Network cppn) throws InvalidMidiDataException, IOException {
  File midiFile=new File(CLASSICAL_MID);
  Sequence sequence=MidiSystem.getSequence(midiFile);
  Track[] tracks=sequence.getTracks();
  ArrayList<Triple<ArrayList<Double>,ArrayList<Long>,ArrayList<Long>>> midiLists=MIDIUtil.soundLines(tracks);
  double[] amplitudes=MIDIUtil.lineToAmplitudeArray(CLASSICAL_MID,midiLists,cppn,1);
  PlayDoubleArray.playDoubleArray(amplitudes);
}","public static void newMIDIUtilPlay(Network cppn) throws InvalidMidiDataException, IOException {
  File midiFile=new File(SOLO_PIANO_MID);
  Sequence sequence=MidiSystem.getSequence(midiFile);
  Track[] tracks=sequence.getTracks();
  ArrayList<Triple<ArrayList<Double>,ArrayList<Long>,ArrayList<Long>>> midiLists=MIDIUtil.soundLines(tracks);
  double[] amplitudes=MIDIUtil.lineToAmplitudeArray(SOLO_PIANO_MID,midiLists,cppn,1);
  PlayDoubleArray.playDoubleArray(amplitudes);
}"
39166,"public static void main(String[] args) throws UnsupportedAudioFileException, IOException, LineUnavailableException, InterruptedException, JavaLayerException, InvalidMidiDataException {
  Parameters.initializeParameterCollections(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  MMNEAT.loadClasses();
  EvolutionaryHistory.initArchetype(0);
  HyperNEATCPPNGenotype test=new HyperNEATCPPNGenotype(3,1,0);
  for (int i=0; i < 30; i++) {
    test.mutate();
  }
  Network cppn=test.getCPPN();
  newMIDIUtilPrint();
}","public static void main(String[] args) throws UnsupportedAudioFileException, IOException, LineUnavailableException, InterruptedException, JavaLayerException, InvalidMidiDataException {
  Parameters.initializeParameterCollections(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  MMNEAT.loadClasses();
  EvolutionaryHistory.initArchetype(0);
  HyperNEATCPPNGenotype test=new HyperNEATCPPNGenotype(3,1,0);
  for (int i=0; i < 30; i++) {
    test.mutate();
  }
  Network cppn=test.getCPPN();
  newMIDIUtilPlay(cppn);
}"
39167,"public static void viewMIDIChannel(){
  File furElise=new File(FUR_ELISE_MID);
  MIDIUtil.MIDIData(furElise);
}","public static void viewMIDIChannel(){
  File file=new File(PIRATES_MID);
  MIDIUtil.MIDIData(file);
}"
39168,"public static void newMIDIUtilPrint() throws InvalidMidiDataException, IOException {
  File midiFile=new File(SOLO_PIANO_MID);
  Sequence sequence=MidiSystem.getSequence(midiFile);
  Track[] tracks=sequence.getTracks();
  ArrayList<Triple<ArrayList<Double>,ArrayList<Long>,ArrayList<Long>>> midiLists=MIDIUtil.soundLines(tracks);
  for (int i=0; i < midiLists.size(); i++) {
    System.out.println(""String_Node_Str"" + midiLists.get(i).t1);
    System.out.println(""String_Node_Str"" + midiLists.get(i).t2);
    System.out.println(""String_Node_Str"" + midiLists.get(i).t3);
    System.out.println();
  }
}","public static void newMIDIUtilPrint() throws InvalidMidiDataException, IOException {
  File midiFile=new File(PIRATES_MID);
  Sequence sequence=MidiSystem.getSequence(midiFile);
  Track[] tracks=sequence.getTracks();
  ArrayList<Triple<ArrayList<Double>,ArrayList<Long>,ArrayList<Long>>> midiLists=MIDIUtil.soundLines(tracks);
  for (int i=0; i < midiLists.size(); i++) {
    System.out.println(""String_Node_Str"" + midiLists.get(i).t1);
    System.out.println(""String_Node_Str"" + midiLists.get(i).t2);
    System.out.println(""String_Node_Str"" + midiLists.get(i).t3);
    System.out.println();
  }
}"
39169,"/** 
 * all actions performed in a single evaluation of a genotype loop taken from GameVisualSimulationTest, the rest based on MsPacManTask.oneEval()
 * @param individual genotype to be evaluated
 * @param num which evaluation is currently being performed
 * @return Combination of fitness scores (multiobjective possible), andother scores (for tracking non-fitness data)
 */
@Override public Pair<double[],double[]> oneEval(Genotype<T> individual,int num){
  reset();
  gs=new GameState(pgs,utt);
  if (!AiInitialized)   initializeAI();
 else {
    ef.givePhysicalGameState(initialPgs);
    if (ef2 != null)     ef2.givePhysicalGameState(initialPgs);
  }
  if (Parameters.parameters.classParameter(""String_Node_Str"") != null) {
    enemySet=enemies.getAppropriateEnemy(MMNEAT.ea.currentGeneration());
  }
 else {
    enemySet=new ArrayList<>(1);
    enemySet.add(ai2);
  }
  ef.setNetwork(individual);
  if (CommonConstants.watch) {
    w=PhysicalGameStatePanel.newVisualizer(gs,MicroRTSUtility.WINDOW_LENGTH,MicroRTSUtility.WINDOW_LENGTH,false,PhysicalGameStatePanel.COLORSCHEME_BLACK);
  }
  double[][] fitnesses=new double[enemySet.size()][numObjectives()];
  double[][] others=new double[enemySet.size()][numOtherScores()];
  for (int i=0; i < enemySet.size(); i++) {
    reset();
    ai2=enemySet.get(i);
    if (CommonConstants.watch) {
      System.out.println(""String_Node_Str"" + ai2.getClass().getName());
    }
    ArrayList<Pair<double[],double[]>> currentEval=MicroRTSUtility.oneEval((AI)ai1,ai2,this,ff,w);
    ff.setNumEvals(ef.getNumEvals());
    fitnesses[i]=currentEval.get(0).t1;
    others[i]=currentEval.get(0).t2;
  }
  Pair<double[],double[]> averageResults;
  averageResults=NoisyLonerTask.averageResults(fitnesses,others);
  return averageResults;
}","/** 
 * all actions performed in a single evaluation of a genotype loop taken from GameVisualSimulationTest, the rest based on MsPacManTask.oneEval()
 * @param individual genotype to be evaluated
 * @param num which evaluation is currently being performed
 * @return Combination of fitness scores (multiobjective possible), andother scores (for tracking non-fitness data)
 */
@Override public Pair<double[],double[]> oneEval(Genotype<T> individual,int num){
}"
39170,"/** 
 * called before each evaluation. If a MapSequence is used, then the new map is loaded here. This order of events is required in order to make sure networks are displayed properly, because an agent's network is displayed before the oneEval method below is called. Therefore, the map gets set here, then the neural network is drawn in LonerTask, then the oneEval method below executes.
 */
public void preEval(){
  if (enemies == null) {
    try {
      enemies=(EnemySequence)ClassCreation.createObject(Parameters.parameters.classParameter(""String_Node_Str""));
    }
 catch (    NoSuchMethodException e1) {
      e1.printStackTrace();
      System.exit(1);
    }
  }
  if (maps != null) {
    String newMapName=maps.getAppropriateMap(MMNEAT.ea.currentGeneration());
    if (!newMapName.equals(mapName)) {
      System.out.println(""String_Node_Str"" + newMapName);
      try {
        initialPgs=PhysicalGameState.load(""String_Node_Str"" + newMapName,utt);
        mapName=newMapName;
      }
 catch (      JDOMException|IOException e) {
        e.printStackTrace();
        System.exit(1);
      }
      ff.informOfMapSwitch();
    }
  }
}","/** 
 * called before each evaluation. If a MapSequence is used, then the new map is loaded here. This order of events is required in order to make sure networks are displayed properly, because an agent's network is displayed before the oneEval method below is called. Therefore, the map gets set here, then the neural network is drawn in LonerTask, then the oneEval method below executes.
 */
public void preEval(){
}"
39171,"public static <T>ArrayList<Pair<double[],double[]>> oneEval(AI ai1,AI ai2,MicroRTSInformation task,RTSFitnessFunction ff,PhysicalGameStateJFrame w){
  HashSet<Long> createdUnitIDs1=new HashSet<>();
  HashSet<Long> createdUnitIDs2=new HashSet<>();
  boolean base1Alive=false;
  boolean base2Alive=false;
  int unitDifferenceNow=0;
  coevolution=ff.getCoevolution();
  gs=task.getGameState();
  PhysicalGameState pgs=gs.getPhysicalGameState();
  boolean gameover=false;
  double averageUnitDifference=0;
  int maxCycles=1000 * (int)Math.ceil(Math.sqrt(pgs.getHeight()));
  ff.setMaxCycles(maxCycles);
  PlayerAction pa1;
  PlayerAction pa2;
  Unit currentUnit;
  boolean baseDeath1Recorded=false;
  boolean baseDeath2Recorded=false;
  int currentCycle=0;
  do {
    try {
      pa1=ai1.getAction(0,gs);
      gs.issueSafe(pa1);
    }
 catch (    Exception e1) {
      e1.printStackTrace();
      System.exit(1);
    }
    try {
      pa2=ai2.getAction(1,gs);
      gs.issueSafe(pa2);
    }
 catch (    Exception e) {
      e.printStackTrace();
      System.exit(1);
    }
    if (prog) {
      currentUnit=null;
      unitDifferenceNow=0;
      base1Alive=false;
      base2Alive=false;
      for (int i=0; i < pgs.getWidth(); i++) {
        for (int j=0; j < pgs.getHeight(); j++) {
          currentUnit=pgs.getUnitAt(i,j);
          if (currentUnit != null) {
            if (currentUnit.getPlayer() == 0)             createdUnitIDs1.add(currentUnit.getID());
 else             if (currentUnit.getPlayer() == 1)             createdUnitIDs2.add(currentUnit.getID());
            unitDifferenceNow=updateUnitDifference(currentUnit,unitDifferenceNow);
            if (currentUnit.getType().name.equals(""String_Node_Str"")) {
              updateHarvestingEfficiency(currentUnit,coevolution,task);
            }
            if (currentUnit.getType().name.equals(""String_Node_Str"")) {
              base1Alive=base1Alive || updateBaseIsAlive(currentUnit,1);
              base2Alive=base2Alive || updateBaseIsAlive(currentUnit,2);
            }
          }
        }
      }
      MiscUtil.waitForReadStringAndEnterKeyPress();
      if ((!base1Alive) && (!baseDeath1Recorded)) {
        task.setBaseUpTime(gs.getTime(),1);
        baseDeath1Recorded=true;
      }
      if (!base2Alive && !baseDeath2Recorded && coevolution) {
        task.setBaseUpTime(gs.getTime(),2);
        baseDeath2Recorded=true;
      }
      currentCycle++;
      averageUnitDifference+=(unitDifferenceNow - averageUnitDifference) / (1.0 * currentCycle);
    }
    gameover=gs.cycle();
    if (CommonConstants.watch)     w.repaint();
  }
 while (!gameover && gs.getTime() < maxCycles);
  ff.setGameEndTime(gs.getTime());
  int terminalUnits1=0;
  int terminalUnits2=0;
  for (int i=0; i < pgs.getWidth(); i++) {
    for (int j=0; j < pgs.getHeight(); j++) {
      currentUnit=pgs.getUnitAt(i,j);
      if (currentUnit != null) {
        if (currentUnit.getPlayer() == 0)         terminalUnits1++;
 else         if (currentUnit.getPlayer() == 1)         terminalUnits2++;
      }
    }
  }
  task.setPercentEnemiesDestroyed(((createdUnitIDs2.size() - terminalUnits2) * 100) / createdUnitIDs2.size(),1);
  if (coevolution)   task.setPercentEnemiesDestroyed(((createdUnitIDs1.size() - terminalUnits1) * 100) / createdUnitIDs1.size(),2);
  task.setAvgUnitDiff(averageUnitDifference);
  if (CommonConstants.watch)   w.dispose();
  return ff.getFitness(gs);
}","public static <T>ArrayList<Pair<double[],double[]>> oneEval(AI ai1,AI ai2,MicroRTSInformation task,RTSFitnessFunction ff,PhysicalGameStateJFrame w){
  HashSet<Long> createdUnitIDs1=new HashSet<>();
  HashSet<Long> createdUnitIDs2=new HashSet<>();
  boolean base1Alive=false;
  boolean base2Alive=false;
  int unitDifferenceNow=0;
  coevolution=ff.getCoevolution();
  gs=task.getGameState();
  PhysicalGameState pgs=gs.getPhysicalGameState();
  boolean gameover=false;
  double averageUnitDifference=0;
  int maxCycles=1000 * (int)Math.ceil(Math.sqrt(pgs.getHeight()));
  ff.setMaxCycles(maxCycles);
  PlayerAction pa1;
  PlayerAction pa2;
  Unit currentUnit;
  boolean baseDeath1Recorded=false;
  boolean baseDeath2Recorded=false;
  int currentCycle=0;
  do {
    try {
      pa1=ai1.getAction(0,gs);
      gs.issueSafe(pa1);
    }
 catch (    Exception e1) {
      e1.printStackTrace();
      System.exit(1);
    }
    try {
      pa2=ai2.getAction(1,gs);
      gs.issueSafe(pa2);
    }
 catch (    Exception e) {
      e.printStackTrace();
      System.exit(1);
    }
    pgs=gs.getPhysicalGameState();
    if (prog) {
      currentUnit=null;
      unitDifferenceNow=0;
      base1Alive=false;
      base2Alive=false;
      for (int i=0; i < pgs.getWidth(); i++) {
        for (int j=0; j < pgs.getHeight(); j++) {
          currentUnit=pgs.getUnitAt(i,j);
          if (currentUnit != null) {
            if (currentUnit.getPlayer() == 0)             createdUnitIDs1.add(currentUnit.getID());
 else             if (currentUnit.getPlayer() == 1)             createdUnitIDs2.add(currentUnit.getID());
            unitDifferenceNow=updateUnitDifference(currentUnit,unitDifferenceNow);
            if (currentUnit.getType().name.equals(""String_Node_Str"")) {
              updateHarvestingEfficiency(currentUnit,coevolution,task);
            }
            if (currentUnit.getType().name.equals(""String_Node_Str"")) {
              base1Alive=base1Alive || updateBaseIsAlive(currentUnit,1);
              base2Alive=base2Alive || updateBaseIsAlive(currentUnit,2);
            }
          }
        }
      }
      if ((!base1Alive) && (!baseDeath1Recorded)) {
        task.setBaseUpTime(gs.getTime(),1);
        baseDeath1Recorded=true;
      }
      if (!base2Alive && !baseDeath2Recorded && coevolution) {
        task.setBaseUpTime(gs.getTime(),2);
        baseDeath2Recorded=true;
      }
      currentCycle++;
      averageUnitDifference+=(unitDifferenceNow - averageUnitDifference) / (1.0 * currentCycle);
    }
    gameover=gs.cycle();
    if (CommonConstants.watch)     w.repaint();
  }
 while (!gameover && gs.getTime() < maxCycles);
  ff.setGameEndTime(gs.getTime());
  int terminalUnits1=0;
  int terminalUnits2=0;
  if (prog) {
    for (int i=0; i < pgs.getWidth(); i++) {
      for (int j=0; j < pgs.getHeight(); j++) {
        currentUnit=pgs.getUnitAt(i,j);
        if (currentUnit != null) {
          if (currentUnit.getPlayer() == 0)           terminalUnits1++;
 else           if (currentUnit.getPlayer() == 1)           terminalUnits2++;
        }
      }
    }
    task.setPercentEnemiesDestroyed(((createdUnitIDs2.size() - terminalUnits2) * 100) / createdUnitIDs2.size(),1);
    if (coevolution)     task.setPercentEnemiesDestroyed(((createdUnitIDs1.size() - terminalUnits1) * 100) / createdUnitIDs1.size(),2);
    task.setAvgUnitDiff(averageUnitDifference);
  }
  if (CommonConstants.watch)   w.dispose();
  return ff.getFitness(gs);
}"
39172,"@Override public ArrayList<AI> getAppropriateEnemy(int generation){
  if (growingSet) {
    if (generationOfLastUpdate != generation && generation % gensPerEnemy == 0 && appropriateEnemies.size() < enemies.length) {
      generationOfLastUpdate=generation;
      if (CommonConstants.watch)       System.out.println(""String_Node_Str"" + generation + ""String_Node_Str""+ enemies[generation * gensPerEnemy]);
      appropriateEnemies.add(enemies[generation * gensPerEnemy]);
    }
    return appropriateEnemies;
  }
 else {
    appropriateEnemies=new ArrayList<>(1);
    appropriateEnemies.add(enemies[Math.min(generation / gensPerEnemy,enemies.length - 1)]);
  }
  return appropriateEnemies;
}","@Override public ArrayList<AI> getAppropriateEnemy(int generation){
  if (growingSet) {
    if (generationOfLastUpdate != generation && generation % gensPerEnemy == 0 && appropriateEnemies.size() < enemies.length) {
      generationOfLastUpdate=generation;
      if (CommonConstants.watch)       System.out.println(""String_Node_Str"" + generation + ""String_Node_Str""+ enemies[generation / gensPerEnemy]);
      appropriateEnemies.add(enemies[generation / gensPerEnemy]);
    }
    return appropriateEnemies;
  }
 else {
    appropriateEnemies=new ArrayList<>(1);
    appropriateEnemies.add(enemies[Math.min(generation / gensPerEnemy,enemies.length - 1)]);
  }
  return appropriateEnemies;
}"
39173,"@Before public void setUp() throws Exception {
  hncg=new HyperNEATCPPNGenotype();
  ohg=new OffsetHybrIDGenotype(hncg.links,hncg.nodes,hncg.neuronsPerModule);
}","@Before public void setUp() throws Exception {
  Parameters.initializeParameterCollections(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  MMNEAT.loadClasses();
  hncg=new HyperNEATCPPNGenotype();
  ohg=new OffsetHybrIDGenotype(hncg.links,hncg.nodes,hncg.neuronsPerModule);
}"
39174,"@Test public void testAllOffsetsZero(){
  RealValuedGenotype rvg=new RealValuedGenotype(HyperNEATUtil.totalPossibleLinks(HyperNEATUtil.getHyperNEATTask()));
  for (int i=0; i < HyperNEATUtil.totalPossibleLinks(HyperNEATUtil.getHyperNEATTask()); i++) {
    rvg.setValue(i,0.0);
  }
  assertEquals(hncg.getPhenotype(),ohg.getPhenotype());
}","@Test public void testAllOffsetsZero(){
  for (int i=0; i < HyperNEATUtil.totalPossibleLinks(HyperNEATUtil.getHyperNEATTask()); i++) {
    ohg.rvg.setValue(i,0.0);
  }
  assertEquals(hncg.getPhenotype(),ohg.getPhenotype());
}"
39175,"/** 
 * Private Constructor solely used for Testing
 * @param newBoard
 * @param player
 * @param win3
 */
CheckersState(int[][] newBoard,int player,List<Integer> win){
  super(newBoard,2,player,win);
}","/** 
 * Private Constructor solely used for Testing
 * @param newBoard
 * @param player
 * @param win
 */
CheckersState(int[][] newBoard,int player,List<Integer> win){
  super(newBoard,2,player,win);
}"
39176,"/** 
 * Checks if a Player Check that just Jumped is able to Jump again
 * @param check Point on the Board of the Player Check
 * @return True if the Check is able to Jump again, else returns false
 */
private boolean checkDoubleJump(Point check){
  int checkX=(int)check.getX();
  int checkY=(int)check.getY();
  int thisCheck=boardState[checkX][checkY];
  for (int dX=-1; dX <= 1; dX++) {
    for (int dY=-1; dY <= 1; dY++) {
      if (dX != 0 && dY != 0) {
        Point moveTo=new Point(checkX + dX,checkY + dY);
        if (isPointInBounds(moveTo)) {
          if (thisCheck == BLACK_CHECK && dX > 0 && ableToJump(check,moveTo)) {
            doubleJumpCheck=check;
            return true;
          }
 else           if (thisCheck == RED_CHECK && dX < 0 && ableToJump(check,moveTo)) {
            doubleJumpCheck=check;
            return true;
          }
        }
 else {
          if (ableToJump(check,moveTo)) {
            doubleJumpCheck=check;
            return true;
          }
        }
      }
    }
  }
  doubleJumpCheck=null;
  return false;
}","/** 
 * Checks if a Player Check that just Jumped is able to Jump again
 * @param check Point on the Board of the Player Check
 * @return True if the Check is able to Jump again, else returns false
 */
private boolean checkDoubleJump(Point check){
  int checkX=(int)check.getX();
  int checkY=(int)check.getY();
  int thisCheck=boardState[checkX][checkY];
  for (int dX=-1; dX <= 1; dX++) {
    for (int dY=-1; dY <= 1; dY++) {
      if (dX != 0 && dY != 0) {
        Point moveTo=new Point(checkX + dX,checkY + dY);
        if (isPointInBounds(moveTo)) {
          if ((thisCheck == BLACK_CHECK_KING || thisCheck == RED_CHECK_KING) && ableToJump(check,moveTo)) {
            doubleJumpCheck=check;
            return true;
          }
 else           if (thisCheck == BLACK_CHECK && dX > 0 && ableToJump(check,moveTo)) {
            doubleJumpCheck=check;
            return true;
          }
 else           if (thisCheck == RED_CHECK && dX < 0 && ableToJump(check,moveTo)) {
            doubleJumpCheck=check;
            return true;
          }
        }
      }
    }
  }
  doubleJumpCheck=null;
  return false;
}"
39177,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static <T extends BoardGameState>ArrayList<Pair<double[],double[]>> playGame(BoardGame<T> bg,BoardGamePlayer<T>[] players,List<BoardGameFitnessFunction<T>> fit){
  bg.reset();
  if (CommonConstants.watch && bg instanceof TwoDimensionalBoardGame) {
    if (view != null) {
      view.panel.dispose();
      view=null;
    }
    view=MMNEAT.boardGameViewer;
  }
  while (!bg.isGameOver()) {
    if (CommonConstants.watch && bg instanceof TwoDimensionalBoardGame) {
      view.reset((TwoDimensionalBoardGameState)bg.getCurrentState());
    }
    if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      System.out.print(""String_Node_Str"");
      MiscUtil.waitForReadStringAndEnterKeyPress();
    }
    int playIndex=bg.getCurrentPlayer();
    bg.move(players[bg.getCurrentPlayer()]);
    for (    BoardGameFitnessFunction fitFunct : fit) {
      fitFunct.updateFitness(bg.getCurrentState(),playIndex);
    }
  }
  if (CommonConstants.watch && bg instanceof TwoDimensionalBoardGame) {
    view.reset((TwoDimensionalBoardGameState)bg.getCurrentState());
    if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      System.out.print(""String_Node_Str"");
      MiscUtil.waitForReadStringAndEnterKeyPress();
    }
  }
  ArrayList<Pair<double[],double[]>> scoring=new ArrayList<Pair<double[],double[]>>(bg.getNumPlayers());
  for (int i=0; i < players.length; i++) {
    double[] otherScores=new double[fit.size() - 1];
    for (int j=1; j < fit.size(); j++) {
      otherScores[j - 1]=fit.get(j).getFitness();
    }
    Pair<double[],double[]> evalResults=new Pair<double[],double[]>(new double[]{fit.get(0).getFitness()},otherScores);
    scoring.add(evalResults);
  }
  return scoring;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static <T extends BoardGameState>ArrayList<Pair<double[],double[]>> playGame(BoardGame<T> bg,BoardGamePlayer<T>[] players,List<BoardGameFitnessFunction<T>> fit){
  bg.reset();
  if (CommonConstants.watch && bg instanceof TwoDimensionalBoardGame) {
    view=MMNEAT.boardGameViewer;
  }
  while (!bg.isGameOver()) {
    if (CommonConstants.watch && bg instanceof TwoDimensionalBoardGame) {
      view.reset((TwoDimensionalBoardGameState)bg.getCurrentState());
    }
    if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      System.out.print(""String_Node_Str"");
      MiscUtil.waitForReadStringAndEnterKeyPress();
    }
    int playIndex=bg.getCurrentPlayer();
    bg.move(players[bg.getCurrentPlayer()]);
    for (    BoardGameFitnessFunction fitFunct : fit) {
      fitFunct.updateFitness(bg.getCurrentState(),playIndex);
    }
  }
  if (CommonConstants.watch && bg instanceof TwoDimensionalBoardGame) {
    view.reset((TwoDimensionalBoardGameState)bg.getCurrentState());
    if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      System.out.print(""String_Node_Str"");
      MiscUtil.waitForReadStringAndEnterKeyPress();
    }
  }
  ArrayList<Pair<double[],double[]>> scoring=new ArrayList<Pair<double[],double[]>>(bg.getNumPlayers());
  for (int i=0; i < players.length; i++) {
    double[] otherScores=new double[fit.size() - 1];
    for (int j=1; j < fit.size(); j++) {
      otherScores[j - 1]=fit.get(j).getFitness();
    }
    Pair<double[],double[]> evalResults=new Pair<double[],double[]>(new double[]{fit.get(0).getFitness()},otherScores);
    scoring.add(evalResults);
  }
  return scoring;
}"
39178,"/** 
 * Returns true if the Game is over, else returns false
 * @return True if one Player has no more Checks, else returns false
 */
@Override public boolean endState(){
  int blackChecksLeft=0;
  int redChecksLeft=0;
  for (int i=0; i < BOARD_WIDTH; i++) {
    for (int j=0; j < BOARD_WIDTH; j++) {
      int space=boardState[i][j];
      if (space == BLACK_CHECK || space == BLACK_CHECK_KING) {
        blackChecksLeft++;
      }
 else       if (space == RED_CHECK || space == RED_CHECK_KING) {
        redChecksLeft++;
      }
    }
  }
  if (blackChecksLeft == 0 || redChecksLeft == 0) {
    return true;
  }
 else   if (possibleBoardGameStates(this).size() == 0) {
    return true;
  }
  return false;
}","/** 
 * Returns true if the Game is over, else returns false
 * @return True if one Player has no more Checks, else returns false
 */
@Override public boolean endState(){
  int blackChecksLeft=0;
  int redChecksLeft=0;
  for (int i=0; i < BOARD_WIDTH; i++) {
    for (int j=0; j < BOARD_WIDTH; j++) {
      int space=boardState[i][j];
      if (space == BLACK_CHECK || space == BLACK_CHECK_KING) {
        blackChecksLeft++;
      }
 else       if (space == RED_CHECK || space == RED_CHECK_KING) {
        redChecksLeft++;
      }
    }
  }
  if (blackChecksLeft == 0 || redChecksLeft == 0) {
    return true;
  }
 else   if (possibleBoardGameStates(this).size() == 0) {
    winners.add((nextPlayer + 1) % 2);
    return true;
  }
 else   if (movesSinceLastJump > 50 && movesSinceNon_King > 50) {
    return true;
  }
  return false;
}"
39179,"@Override public void setupStartingBoard(){
  boardState=newCheckBoard();
  doubleJumpCheck=null;
}","@Override public void setupStartingBoard(){
  boardState=newCheckBoard();
  movesSinceLastJump=0;
  movesSinceNon_King=0;
  doubleJumpCheck=null;
}"
39180,"/** 
 * Makes and returns a BoardGameState that is a duplicate of this BoardGameState
 * @return BoardGameState that is a duplicate of this BoardGameState
 */
@SuppressWarnings(""String_Node_Str"") @Override public CheckersState copy(){
  return new CheckersState(this);
}","/** 
 * Makes and returns a BoardGameState that is a duplicate of this BoardGameState
 * @return BoardGameState that is a duplicate of this BoardGameState
 */
@SuppressWarnings(""String_Node_Str"") @Override public CheckersState copy(){
  CheckersState temp=new CheckersState(this);
  temp.movesSinceLastJump=this.movesSinceLastJump;
  temp.movesSinceNon_King=this.movesSinceNon_King;
  return temp;
}"
39181,"/** 
 * Returns the Index of the winner of the Game
 * @return -1 if not at an endState, 0 if there's a Tie, 1 if Player 1 wins, or 2 if Player 2 wins
 */
public List<Integer> getWinners(){
  if (endState()) {
    int blackChecksLeft=0;
    int redChecksLeft=0;
    for (int i=0; i < BOARD_WIDTH; i++) {
      for (int j=0; j < BOARD_WIDTH; j++) {
        int space=boardState[i][j];
        if (space == BLACK_CHECK || space == BLACK_CHECK_KING) {
          blackChecksLeft++;
        }
 else         if (space == RED_CHECK || space == RED_CHECK_KING) {
          redChecksLeft++;
        }
      }
    }
    if (blackChecksLeft > redChecksLeft) {
      winners.add(BLACK_CHECK);
    }
 else     if (redChecksLeft > blackChecksLeft) {
      winners.add(RED_CHECK);
    }
 else {
      winners.add(BLACK_CHECK);
      winners.add(RED_CHECK);
    }
  }
  return winners;
}","/** 
 * Returns the Index of the winner of the Game
 * @return -1 if not at an endState, 0 if there's a Tie, 1 if Player 1 wins, or 2 if Player 2 wins
 */
public List<Integer> getWinners(){
  if (endState() && winners.size() == 0) {
    int blackChecksLeft=0;
    int redChecksLeft=0;
    for (int i=0; i < BOARD_WIDTH; i++) {
      for (int j=0; j < BOARD_WIDTH; j++) {
        int space=boardState[i][j];
        if (space == BLACK_CHECK || space == BLACK_CHECK_KING) {
          blackChecksLeft++;
        }
 else         if (space == RED_CHECK || space == RED_CHECK_KING) {
          redChecksLeft++;
        }
      }
    }
    if (blackChecksLeft > redChecksLeft) {
      winners.add(BLACK_CHECK);
    }
 else     if (redChecksLeft > blackChecksLeft) {
      winners.add(RED_CHECK);
    }
 else {
      winners.add(BLACK_CHECK);
      winners.add(RED_CHECK);
    }
  }
  return winners;
}"
39182,"@Override public T takeAction(T current){
  Set<T> poss=current.possibleBoardGameStates(current);
  T move=null;
  do {
    move=getInput(current);
    if (!poss.contains(move))     System.out.println(""String_Node_Str"");
  }
 while (!poss.contains(move));
  boardView.reset(move);
  try {
    Thread.sleep(350);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return move;
}","@Override public T takeAction(T current){
  Set<T> poss=current.possibleBoardGameStates(current);
  T move=null;
  do {
    move=getInput(current);
    if (!poss.contains(move))     System.out.println(""String_Node_Str"");
  }
 while (!poss.contains(move));
  boardView.reset(move);
  try {
    Thread.sleep(75);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return move;
}"
39183,"private void waitForClick(){
  ready=false;
  while (!ready) {
    try {
      Thread.sleep(300);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}","private void waitForClick(){
  ready=false;
  while (!ready) {
    try {
      Thread.sleep(75);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}"
39184,"/** 
 * Checks if a Player Check that just Jumped is able to Jump again
 * @param check Point on the Board of the Player Check
 * @return True if the Check is able to Jump again, else returns false
 */
private boolean checkDoubleJump(Point check){
  int checkX=(int)check.getX();
  int checkY=(int)check.getY();
  int thisCheck=boardState[checkX][checkY];
  for (int dX=-1; dX <= 1; dX++) {
    for (int dY=-1; dY <= 1; dY++) {
      if (dX != 0 && dY != 0) {
        Point moveTo=new Point((int)check.getX() + dX,(int)check.getY() + dY);
        if (isPointInBounds(moveTo)) {
          if (thisCheck == BLACK_CHECK && dX > 0) {
            if (ableToJump(check,moveTo))             return true;
          }
 else           if (thisCheck == RED_CHECK && dX < 0) {
            if (ableToJump(check,moveTo))             return true;
          }
 else {
            if (ableToJump(check,moveTo))             return true;
          }
        }
      }
    }
  }
  return false;
}","/** 
 * Checks if a Player Check that just Jumped is able to Jump again
 * @param check Point on the Board of the Player Check
 * @return True if the Check is able to Jump again, else returns false
 */
private boolean checkDoubleJump(Point check){
  int checkX=(int)check.getX();
  int checkY=(int)check.getY();
  int thisCheck=boardState[checkX][checkY];
  for (int dX=-1; dX <= 1; dX++) {
    for (int dY=-1; dY <= 1; dY++) {
      if (dX != 0 && dY != 0) {
        Point moveTo=new Point(checkX + dX,checkY + dY);
        if (isPointInBounds(moveTo)) {
          if (thisCheck == BLACK_CHECK && dX > 0 && ableToJump(check,moveTo)) {
            doubleJumpCheck=check;
            return true;
          }
 else           if (thisCheck == RED_CHECK && dX < 0 && ableToJump(check,moveTo)) {
            doubleJumpCheck=check;
            return true;
          }
        }
 else {
          if (ableToJump(check,moveTo)) {
            doubleJumpCheck=check;
            return true;
          }
        }
      }
    }
  }
  doubleJumpCheck=null;
  return false;
}"
39185,"/** 
 * Checks if a Move is valid
 * @param moveThis Point on the Board of the Check being Moved
 * @param moveTo Point on the Board being Moved to
 * @return True if the Move is valid, else returns false
 */
private boolean checkMovement(Point moveThis,Point moveTo){
  int dX=(int)(moveTo.getX() - moveThis.getX());
  int dY=(int)(moveTo.getY() - moveThis.getY());
  int thisCheck=boardState[(int)moveThis.getX()][(int)moveThis.getY()];
  if (thisCheck == EMPTY) {
    return false;
  }
 else   if (nextPlayer == BLACK_CHECK && (thisCheck == RED_CHECK || thisCheck == RED_CHECK_KING)) {
    return false;
  }
 else   if (nextPlayer == RED_CHECK && (thisCheck == BLACK_CHECK || thisCheck == BLACK_CHECK_KING)) {
    return false;
  }
  if (thisCheck == BLACK_CHECK && dX < 0) {
    return false;
  }
 else   if (thisCheck == RED_CHECK && dX > 0) {
    return false;
  }
  if (!((int)Math.abs(dX) == 1 && (int)Math.abs(dY) == 1)) {
    return false;
  }
  if (doubleJumpCheck != null) {
    if ((int)moveThis.getX() != (int)doubleJumpCheck.getX() || (int)moveThis.getY() != (int)doubleJumpCheck.getY())     return false;
  }
  if (checkDoubleJump(moveThis) && !ableToJump(moveThis,moveTo))   return false;
  if (boardState[(int)moveTo.getX()][(int)moveTo.getY()] == EMPTY) {
    return true;
  }
 else {
    return ableToJump(moveThis,moveTo);
  }
}","/** 
 * Checks if a Move is valid
 * @param moveThis Point on the Board of the Check being Moved
 * @param moveTo Point on the Board being Moved to
 * @return True if the Move is valid, else returns false
 */
private boolean checkMovement(Point moveThis,Point moveTo){
  int dX=(int)(moveTo.getX() - moveThis.getX());
  int dY=(int)(moveTo.getY() - moveThis.getY());
  int thisCheck=boardState[(int)moveThis.getX()][(int)moveThis.getY()];
  if (thisCheck == EMPTY) {
    return false;
  }
 else   if (nextPlayer == BLACK_CHECK && (thisCheck == RED_CHECK || thisCheck == RED_CHECK_KING)) {
    return false;
  }
 else   if (nextPlayer == RED_CHECK && (thisCheck == BLACK_CHECK || thisCheck == BLACK_CHECK_KING)) {
    return false;
  }
  if (thisCheck == BLACK_CHECK && dX < 0) {
    return false;
  }
 else   if (thisCheck == RED_CHECK && dX > 0) {
    return false;
  }
  if (!((int)Math.abs(dX) == 1 && (int)Math.abs(dY) == 1)) {
    return false;
  }
  if (checkForcedJump().size() > 0 && !checkForcedJump().contains(moveThis))   return false;
  if (doubleJumpCheck != null) {
    if ((int)moveThis.getX() != (int)doubleJumpCheck.getX() || (int)moveThis.getY() != (int)doubleJumpCheck.getY())     return false;
  }
  if (boardState[(int)moveTo.getX()][(int)moveTo.getY()] == EMPTY) {
    return true;
  }
 else {
    return ableToJump(moveThis,moveTo);
  }
}"
39186,"@Test public void testMove(){
  assertTrue(start.moveDoublePoint(new Point(2,1),new Point(3,2)));
  assertTrue(start.moveDoublePoint(new Point(5,0),new Point(4,1)));
  assertFalse(start.moveDoublePoint(new Point(2,3),new Point(3,3)));
  assertFalse(start.moveDoublePoint(new Point(1,4),new Point(2,5)));
  assertFalse(start.moveDoublePoint(new Point(3,2),new Point(2,1)));
  assertTrue(start.moveDoublePoint(new Point(2,3),new Point(3,4)));
  assertFalse(start.moveDoublePoint(new Point(4,1),new Point(5,0)));
  assertTrue(test1.moveDoublePoint(new Point(2,3),new Point(3,2)));
  assertTrue(test1.moveDoublePoint(new Point(5,4),new Point(6,3)));
  assertTrue(test1.moveDoublePoint(new Point(3,2),new Point(2,3)));
  assertTrue(test1.moveDoublePoint(new Point(6,3),new Point(5,4)));
  assertTrue(test1.moveDoublePoint(new Point(2,3),new Point(1,2)));
  assertTrue(test1.moveDoublePoint(new Point(5,4),new Point(4,3)));
  assertTrue(test1.moveDoublePoint(new Point(1,2),new Point(2,3)));
  assertTrue(test1.moveDoublePoint(new Point(4,3),new Point(5,4)));
  assertFalse(test4.moveDoublePoint(new Point(2,3),new Point(3,4)));
  assertTrue(test4.moveDoublePoint(new Point(2,3),new Point(3,2)));
  assertFalse(test4.moveDoublePoint(new Point(5,2),new Point(4,1)));
  assertFalse(test4.moveDoublePoint(new Point(0,7),new Point(1,6)));
  assertTrue(test4.moveDoublePoint(new Point(4,1),new Point(5,2)));
  assertTrue(test5.moveDoublePoint(new Point(6,5),new Point(7,6)));
  assertTrue(test5.moveDoublePoint(new Point(3,2),new Point(2,3)));
  assertTrue(test5.moveDoublePoint(new Point(7,6),new Point(6,5)));
}","@Test public void testMove(){
  assertTrue(start.moveDoublePoint(new Point(2,1),new Point(3,2)));
  assertTrue(start.moveDoublePoint(new Point(5,0),new Point(4,1)));
  assertFalse(start.moveDoublePoint(new Point(2,3),new Point(3,3)));
  assertFalse(start.moveDoublePoint(new Point(1,4),new Point(2,5)));
  assertFalse(start.moveDoublePoint(new Point(3,2),new Point(2,1)));
  assertFalse(start.moveDoublePoint(new Point(2,3),new Point(3,4)));
  assertTrue(start.moveDoublePoint(new Point(3,2),new Point(4,1)));
  assertFalse(start.moveDoublePoint(new Point(4,1),new Point(5,0)));
  assertTrue(test1.moveDoublePoint(new Point(2,3),new Point(3,2)));
  assertTrue(test1.moveDoublePoint(new Point(5,4),new Point(6,3)));
  assertTrue(test1.moveDoublePoint(new Point(3,2),new Point(2,3)));
  assertTrue(test1.moveDoublePoint(new Point(6,3),new Point(5,4)));
  assertTrue(test1.moveDoublePoint(new Point(2,3),new Point(1,2)));
  assertTrue(test1.moveDoublePoint(new Point(5,4),new Point(4,3)));
  assertTrue(test1.moveDoublePoint(new Point(1,2),new Point(2,3)));
  assertTrue(test1.moveDoublePoint(new Point(4,3),new Point(5,4)));
  assertTrue(test4.moveDoublePoint(new Point(2,3),new Point(3,2)));
  assertFalse(test4.moveDoublePoint(new Point(5,2),new Point(4,1)));
  assertFalse(test4.moveDoublePoint(new Point(0,7),new Point(1,6)));
  assertTrue(test4.moveDoublePoint(new Point(4,1),new Point(5,2)));
  assertTrue(test5.moveDoublePoint(new Point(6,5),new Point(7,6)));
  assertTrue(test5.moveDoublePoint(new Point(3,2),new Point(2,3)));
  assertTrue(test5.moveDoublePoint(new Point(7,6),new Point(6,5)));
}"
39187,"@Test public void testPossibleBoardGameStates(){
  Set<CheckersState> startSet=start.possibleBoardGameStates(start);
  Set<CheckersState> startTest=new HashSet<CheckersState>();
  startTest.add(new CheckersState(new int[][]{{E,B,E,B,E,B,E,B},{B,E,B,E,B,E,B,E},{E,E,E,B,E,B,E,B},{B,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{R,E,R,E,R,E,R,E},{E,R,E,R,E,R,E,R},{R,E,R,E,R,E,R,E}},1,new ArrayList<Integer>()));
  startTest.add(new CheckersState(new int[][]{{E,B,E,B,E,B,E,B},{B,E,B,E,B,E,B,E},{E,E,E,B,E,B,E,B},{E,E,B,E,E,E,E,E},{E,E,E,E,E,E,E,E},{R,E,R,E,R,E,R,E},{E,R,E,R,E,R,E,R},{R,E,R,E,R,E,R,E}},1,new ArrayList<Integer>()));
  startTest.add(new CheckersState(new int[][]{{E,B,E,B,E,B,E,B},{B,E,B,E,B,E,B,E},{E,B,E,E,E,B,E,B},{E,E,B,E,E,E,E,E},{E,E,E,E,E,E,E,E},{R,E,R,E,R,E,R,E},{E,R,E,R,E,R,E,R},{R,E,R,E,R,E,R,E}},1,new ArrayList<Integer>()));
  startTest.add(new CheckersState(new int[][]{{E,B,E,B,E,B,E,B},{B,E,B,E,B,E,B,E},{E,B,E,E,E,B,E,B},{E,E,E,E,B,E,E,E},{E,E,E,E,E,E,E,E},{R,E,R,E,R,E,R,E},{E,R,E,R,E,R,E,R},{R,E,R,E,R,E,R,E}},1,new ArrayList<Integer>()));
  startTest.add(new CheckersState(new int[][]{{E,B,E,B,E,B,E,B},{B,E,B,E,B,E,B,E},{E,B,E,B,E,E,E,B},{E,E,E,E,B,E,E,E},{E,E,E,E,E,E,E,E},{R,E,R,E,R,E,R,E},{E,R,E,R,E,R,E,R},{R,E,R,E,R,E,R,E}},1,new ArrayList<Integer>()));
  startTest.add(new CheckersState(new int[][]{{E,B,E,B,E,B,E,B},{B,E,B,E,B,E,B,E},{E,B,E,B,E,E,E,B},{E,E,E,E,E,E,B,E},{E,E,E,E,E,E,E,E},{R,E,R,E,R,E,R,E},{E,R,E,R,E,R,E,R},{R,E,R,E,R,E,R,E}},1,new ArrayList<Integer>()));
  startTest.add(new CheckersState(new int[][]{{E,B,E,B,E,B,E,B},{B,E,B,E,B,E,B,E},{E,B,E,B,E,B,E,E},{E,E,E,E,E,E,B,E},{E,E,E,E,E,E,E,E},{R,E,R,E,R,E,R,E},{E,R,E,R,E,R,E,R},{R,E,R,E,R,E,R,E}},1,new ArrayList<Integer>()));
  for (  CheckersState state : startSet) {
    assertTrue(startTest.contains(state));
  }
  Set<CheckersState> test1Set=test1.possibleBoardGameStates(test1);
  Set<CheckersState> test1Test=new HashSet<CheckersState>();
  test1Test.add(new CheckersState(new int[][]{{E,E,E,E,E,E,E,E},{E,E,BK,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,RK,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E}},1,new ArrayList<Integer>()));
  test1Test.add(new CheckersState(new int[][]{{E,E,E,E,E,E,E,E},{E,E,E,E,BK,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,RK,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E}},1,new ArrayList<Integer>()));
  test1Test.add(new CheckersState(new int[][]{{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,BK,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,RK,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E}},1,new ArrayList<Integer>()));
  test1Test.add(new CheckersState(new int[][]{{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,BK,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,RK,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E}},1,new ArrayList<Integer>()));
  for (  CheckersState state : test1Set) {
    assertTrue(test1Test.contains(state));
  }
  Set<CheckersState> test2Set=test2.possibleBoardGameStates(test2);
  Set<CheckersState> test2Test=new HashSet<CheckersState>();
  test2Test.add(new CheckersState(new int[][]{{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,B,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E}},1,new ArrayList<Integer>()));
  for (  CheckersState state : test2Set) {
    assertTrue(test2Test.contains(state));
  }
  Set<CheckersState> test4Set=test4.possibleBoardGameStates(test4);
  Set<CheckersState> test4ATest=new HashSet<CheckersState>();
  test4ATest.add(new CheckersState(new int[][]{{E,E,E,E,E,E,E,B},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,B,E,E,E,E,E,E},{E,E,R,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E}},0,new ArrayList<Integer>()));
  for (  CheckersState state : test4Set) {
    assertTrue(test4ATest.contains(state));
  }
  test4.moveDoublePoint(new Point(2,3),new Point(3,2));
  test4Set=test4.possibleBoardGameStates(test4);
  Set<CheckersState> test4BTest=new HashSet<CheckersState>();
  test4BTest.add(new CheckersState(new int[][]{{E,E,E,E,E,E,E,B},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,B,E,E,E,E},{E,E,E,E,E,E,E,E}},1,new ArrayList<Integer>()));
  for (  CheckersState state : test4BTest) {
    assertTrue(test4Set.contains(state));
  }
  Set<CheckersState> test5Set=test5.possibleBoardGameStates(test5);
  Set<CheckersState> test5Test=new HashSet<CheckersState>();
  test5Test.add(new CheckersState(new int[][]{{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,R,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,R,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,BK,E}},1,new ArrayList<Integer>()));
  test5Test.add(new CheckersState(new int[][]{{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,R,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,R,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,BK,E,E,E}},1,new ArrayList<Integer>()));
  for (  CheckersState state : test5Set) {
    assertTrue(test5Test.contains(state));
  }
  Set<CheckersState> test6Set=test6.possibleBoardGameStates(test6);
  System.out.println(""String_Node_Str"" + test6Set.size() + ""String_Node_Str""+ test6.endState());
  System.out.println(""String_Node_Str"" + test6.getWinners());
}","@Test public void testPossibleBoardGameStates(){
  Set<CheckersState> startSet=start.possibleBoardGameStates(start);
  Set<CheckersState> startTest=new HashSet<CheckersState>();
  startTest.add(new CheckersState(new int[][]{{E,B,E,B,E,B,E,B},{B,E,B,E,B,E,B,E},{E,E,E,B,E,B,E,B},{B,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{R,E,R,E,R,E,R,E},{E,R,E,R,E,R,E,R},{R,E,R,E,R,E,R,E}},1,new ArrayList<Integer>()));
  startTest.add(new CheckersState(new int[][]{{E,B,E,B,E,B,E,B},{B,E,B,E,B,E,B,E},{E,E,E,B,E,B,E,B},{E,E,B,E,E,E,E,E},{E,E,E,E,E,E,E,E},{R,E,R,E,R,E,R,E},{E,R,E,R,E,R,E,R},{R,E,R,E,R,E,R,E}},1,new ArrayList<Integer>()));
  startTest.add(new CheckersState(new int[][]{{E,B,E,B,E,B,E,B},{B,E,B,E,B,E,B,E},{E,B,E,E,E,B,E,B},{E,E,B,E,E,E,E,E},{E,E,E,E,E,E,E,E},{R,E,R,E,R,E,R,E},{E,R,E,R,E,R,E,R},{R,E,R,E,R,E,R,E}},1,new ArrayList<Integer>()));
  startTest.add(new CheckersState(new int[][]{{E,B,E,B,E,B,E,B},{B,E,B,E,B,E,B,E},{E,B,E,E,E,B,E,B},{E,E,E,E,B,E,E,E},{E,E,E,E,E,E,E,E},{R,E,R,E,R,E,R,E},{E,R,E,R,E,R,E,R},{R,E,R,E,R,E,R,E}},1,new ArrayList<Integer>()));
  startTest.add(new CheckersState(new int[][]{{E,B,E,B,E,B,E,B},{B,E,B,E,B,E,B,E},{E,B,E,B,E,E,E,B},{E,E,E,E,B,E,E,E},{E,E,E,E,E,E,E,E},{R,E,R,E,R,E,R,E},{E,R,E,R,E,R,E,R},{R,E,R,E,R,E,R,E}},1,new ArrayList<Integer>()));
  startTest.add(new CheckersState(new int[][]{{E,B,E,B,E,B,E,B},{B,E,B,E,B,E,B,E},{E,B,E,B,E,E,E,B},{E,E,E,E,E,E,B,E},{E,E,E,E,E,E,E,E},{R,E,R,E,R,E,R,E},{E,R,E,R,E,R,E,R},{R,E,R,E,R,E,R,E}},1,new ArrayList<Integer>()));
  startTest.add(new CheckersState(new int[][]{{E,B,E,B,E,B,E,B},{B,E,B,E,B,E,B,E},{E,B,E,B,E,B,E,E},{E,E,E,E,E,E,B,E},{E,E,E,E,E,E,E,E},{R,E,R,E,R,E,R,E},{E,R,E,R,E,R,E,R},{R,E,R,E,R,E,R,E}},1,new ArrayList<Integer>()));
  for (  CheckersState state : startSet) {
    assertTrue(startTest.contains(state));
  }
  Set<CheckersState> test1Set=test1.possibleBoardGameStates(test1);
  Set<CheckersState> test1Test=new HashSet<CheckersState>();
  test1Test.add(new CheckersState(new int[][]{{E,E,E,E,E,E,E,E},{E,E,BK,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,RK,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E}},1,new ArrayList<Integer>()));
  test1Test.add(new CheckersState(new int[][]{{E,E,E,E,E,E,E,E},{E,E,E,E,BK,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,RK,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E}},1,new ArrayList<Integer>()));
  test1Test.add(new CheckersState(new int[][]{{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,BK,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,RK,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E}},1,new ArrayList<Integer>()));
  test1Test.add(new CheckersState(new int[][]{{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,BK,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,RK,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E}},1,new ArrayList<Integer>()));
  for (  CheckersState state : test1Set) {
    assertTrue(test1Test.contains(state));
  }
  Set<CheckersState> test2Set=test2.possibleBoardGameStates(test2);
  Set<CheckersState> test2Test=new HashSet<CheckersState>();
  test2Test.add(new CheckersState(new int[][]{{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,B,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E}},1,new ArrayList<Integer>()));
  for (  CheckersState state : test2Set) {
    assertTrue(test2Test.contains(state));
  }
  Set<CheckersState> test4Set=test4.possibleBoardGameStates(test4);
  Set<CheckersState> test4ATest=new HashSet<CheckersState>();
  test4ATest.add(new CheckersState(new int[][]{{E,E,E,E,E,E,E,B},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,B,E,E,E,E,E,E},{E,E,R,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E}},0,new ArrayList<Integer>()));
  for (  CheckersState state : test4Set) {
    assertTrue(test4ATest.contains(state));
  }
  test4.moveDoublePoint(new Point(2,3),new Point(3,2));
  test4Set=test4.possibleBoardGameStates(test4);
  Set<CheckersState> test4BTest=new HashSet<CheckersState>();
  test4BTest.add(new CheckersState(new int[][]{{E,E,E,E,E,E,E,B},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,B,E,E,E,E},{E,E,E,E,E,E,E,E}},1,new ArrayList<Integer>()));
  for (  CheckersState state : test4BTest) {
    assertTrue(test4Set.contains(state));
  }
  Set<CheckersState> test5Set=test5.possibleBoardGameStates(test5);
  Set<CheckersState> test5Test=new HashSet<CheckersState>();
  test5Test.add(new CheckersState(new int[][]{{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,R,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,R,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,BK,E}},1,new ArrayList<Integer>()));
  test5Test.add(new CheckersState(new int[][]{{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,R,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,R,E,E,E,E,E},{E,E,E,E,E,E,E,E},{E,E,E,E,BK,E,E,E}},1,new ArrayList<Integer>()));
  for (  CheckersState state : test5Set) {
    assertTrue(test5Test.contains(state));
  }
}"
39188,"/** 
 * Calls action associated with clicking a certain button - in this case, the button plays a MIDI file with the most recently clicked CPPN as the ""instrument""
 */
protected void respondToClick(int itemID){
  boolean justStopped=false;
  if (midiPlay.isPlaying()) {
    midiPlay.stopPlayback();
    justStopped=true;
  }
  super.respondToClick(itemID);
  if (itemID == (CHECKBOX_IDENTIFIER_START - inputMultipliers.length)) {
    System.out.println(""String_Node_Str"" + (CHECKBOX_IDENTIFIER_START - inputMultipliers.length));
    System.out.println(""String_Node_Str"" + FILE_LOADER_CHECKBOX_INDEX);
    if (!justStopped) {
      midiPlay=MIDIUtil.playMIDIWithCPPNFromString(Parameters.parameters.stringParameter(""String_Node_Str""),currentCPPN);
    }
  }
  super.respondToClick(itemID);
  if (itemID == FILE_LOADER_CHECKBOX_INDEX) {
    JFileChooser chooser=new JFileChooser();
    chooser.setApproveButtonText(""String_Node_Str"");
    FileNameExtensionFilter filter=new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"");
    chooser.setFileFilter(filter);
    int returnVal=chooser.showOpenDialog(frame);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      Parameters.parameters.setString(""String_Node_Str"",chooser.getCurrentDirectory() + ""String_Node_Str"" + chooser.getSelectedFile().getName());
    }
    resetButtons();
  }
}","/** 
 * Calls action associated with clicking a certain button - in this case, the button plays a MIDI file with the most recently clicked CPPN as the ""instrument""
 */
protected void respondToClick(int itemID){
  boolean justStopped=false;
  if (midiPlay.isPlaying()) {
    midiPlay.stopPlayback();
    justStopped=true;
  }
  super.respondToClick(itemID);
  if (itemID == (CHECKBOX_IDENTIFIER_START - inputMultipliers.length)) {
    if (!justStopped) {
      midiPlay=MIDIUtil.playMIDIWithCPPNFromString(Parameters.parameters.stringParameter(""String_Node_Str""),currentCPPN);
    }
  }
  if (itemID == FILE_LOADER_CHECKBOX_INDEX) {
    JFileChooser chooser=new JFileChooser();
    chooser.setApproveButtonText(""String_Node_Str"");
    FileNameExtensionFilter filter=new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"");
    chooser.setFileFilter(filter);
    int returnVal=chooser.showOpenDialog(frame);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      Parameters.parameters.setString(""String_Node_Str"",chooser.getCurrentDirectory() + ""String_Node_Str"" + chooser.getSelectedFile().getName());
    }
    resetButtons();
  }
}"
39189,"protected void respondToClick(int itemID){
  super.respondToClick(itemID);
  if (arrayPlayer != null && arrayPlayer.isPlaying()) {
    arrayPlayer.stopPlayback();
  }
 else   if (itemID == (CHECKBOX_IDENTIFIER_START - inputMultipliers.length - 1)) {
    arrayPlayer=PlayDoubleArray.playDoubleArray(format,WAVDoubleArray);
  }
}","protected void respondToClick(int itemID){
  super.respondToClick(itemID);
  if (arrayPlayer != null && arrayPlayer.isPlaying()) {
    arrayPlayer.stopPlayback();
  }
 else   if (itemID == (CHECKBOX_IDENTIFIER_START - inputMultipliers.length - 1)) {
    arrayPlayer=PlayDoubleArray.playDoubleArray(format,WAVDoubleArray);
  }
  if (itemID == FILE_LOADER_CHECKBOX_INDEX) {
    JFileChooser chooser=new JFileChooser();
    chooser.setApproveButtonText(""String_Node_Str"");
    FileNameExtensionFilter filter=new FileNameExtensionFilter(""String_Node_Str"",""String_Node_Str"");
    chooser.setFileFilter(filter);
    int returnVal=chooser.showOpenDialog(frame);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      Parameters.parameters.setString(""String_Node_Str"",chooser.getCurrentDirectory() + ""String_Node_Str"" + chooser.getSelectedFile().getName());
    }
    resetButtons();
  }
}"
39190,"/** 
 * represents all squares of the gameState in an array
 */
protected double[] gameStateToArray(GameState gs){
  pgs=gs.getPhysicalGameState();
  double[] board=new double[pgs.getHeight() * pgs.getWidth()];
  int boardIndex;
  Unit currentUnit;
  for (int i=0; i < pgs.getWidth(); i++) {
    for (int j=0; j < pgs.getHeight(); j++) {
      boardIndex=i * pgs.getWidth() + j;
      currentUnit=pgs.getUnitAt(i,j);
      if (currentUnit != null) {
switch (currentUnit.getType().name) {
case ""String_Node_Str"":
          board[boardIndex]=WORKER_WEIGHT + (WORKER_RESOURCE_WEIGHT * currentUnit.getResources());
        break;
case ""String_Node_Str"":
      board[boardIndex]=LIGHT_WEIGHT;
    break;
case ""String_Node_Str"":
  board[boardIndex]=HEAVY_WEIGHT;
break;
case ""String_Node_Str"":
board[boardIndex]=RANGED_WEIGHT;
break;
case ""String_Node_Str"":
board[boardIndex]=BASE_WEIGHT + (BASE_RESOURCE_WEIGHT * currentUnit.getResources());
break;
case ""String_Node_Str"":
board[boardIndex]=BARRACKS_WEIGHT;
break;
case ""String_Node_Str"":
board[boardIndex]=RAW_RESOURCE_WEIGHT;
break;
default :
break;
}
if (currentUnit.getPlayer() == 1) board[boardIndex]*=-1;
}
}
}
return board;
}","/** 
 * represents all squares of the gameState in an array
 */
protected double[] gameStateToArray(GameState gs){
  pgs=gs.getPhysicalGameState();
  double[] board=new double[pgs.getHeight() * pgs.getWidth()];
  int boardIndex;
  Unit currentUnit;
  for (int j=0; j < pgs.getHeight(); j++) {
    for (int i=0; i < pgs.getWidth(); i++) {
      boardIndex=i + j * pgs.getHeight();
      currentUnit=pgs.getUnitAt(i,j);
      if (currentUnit != null) {
switch (currentUnit.getType().name) {
case ""String_Node_Str"":
          board[boardIndex]=WORKER_WEIGHT + (WORKER_RESOURCE_WEIGHT * currentUnit.getResources());
        break;
case ""String_Node_Str"":
      board[boardIndex]=LIGHT_WEIGHT;
    break;
case ""String_Node_Str"":
  board[boardIndex]=HEAVY_WEIGHT;
break;
case ""String_Node_Str"":
board[boardIndex]=RANGED_WEIGHT;
break;
case ""String_Node_Str"":
board[boardIndex]=BASE_WEIGHT + (BASE_RESOURCE_WEIGHT * currentUnit.getResources());
break;
case ""String_Node_Str"":
board[boardIndex]=BARRACKS_WEIGHT;
break;
case ""String_Node_Str"":
board[boardIndex]=RAW_RESOURCE_WEIGHT;
break;
default :
break;
}
if (currentUnit.getPlayer() == 1) board[boardIndex]*=-1;
}
}
}
return board;
}"
39191,"@Override public String[] getOtherScores(){
  return null;
}","@Override public String[] getOtherScores(){
  return new String[0];
}"
39192,"/** 
 * all actions performed in a single evaluation of a genotype loop taken from GameVisualSimulationTest, the rest based on MsPacManTask.oneEval()
 * @param individual genotype to be evaluated
 * @param num which evaluation is currently being performed
 * @return Combination of fitness scores (multiobjective possible), andother scores (for tracking non-fitness data)
 */
@Override public Pair<double[],double[]> oneEval(Genotype<T> individual,int num){
  utt=new UnitTypeTable();
  averageUnitDifference=0;
  baseUpTime=0;
  harvestingEfficiencyIndex=0;
  pgs=initialPgs.clone();
  ef.givePhysicalGameState(pgs);
  gs=new GameState(pgs,utt);
  if (!AiInitialized)   initializeAI();
 else {
    ef.givePhysicalGameState(initialPgs);
    if (ef2 != null)     ef2.givePhysicalGameState(initialPgs);
  }
  if (Parameters.parameters.classParameter(""String_Node_Str"") != null) {
    enemySet=enemies.getAppropriateEnemy(MMNEAT.ea.currentGeneration());
  }
 else {
    enemySet.add(ai2);
  }
  ef.setNetwork(individual);
  if (CommonConstants.watch)   w=PhysicalGameStatePanel.newVisualizer(gs,MicroRTSUtility.WINDOW_LENGTH,MicroRTSUtility.WINDOW_LENGTH,false,PhysicalGameStatePanel.COLORSCHEME_BLACK);
  System.out.println(enemySet.toString());
  double[][] fitnesses=new double[enemySet.size()][numObjectives()];
  double[][] others=new double[enemySet.size()][numOtherScores()];
  for (int i=0; i < enemySet.size(); i++) {
    ai2=enemySet.get(i);
    if (CommonConstants.watch) {
      System.out.println(""String_Node_Str"" + ai2.getClass().getName());
    }
    ArrayList<Pair<double[],double[]>> currentEval=MicroRTSUtility.oneEval((AI)ai1,ai2,this,ff,w);
    fitnesses[i]=currentEval.get(0).t1;
    others[i]=currentEval.get(0).t1;
  }
  Pair<double[],double[]> averageResults=NoisyLonerTask.averageResults(fitnesses,others);
  return averageResults;
}","/** 
 * all actions performed in a single evaluation of a genotype loop taken from GameVisualSimulationTest, the rest based on MsPacManTask.oneEval()
 * @param individual genotype to be evaluated
 * @param num which evaluation is currently being performed
 * @return Combination of fitness scores (multiobjective possible), andother scores (for tracking non-fitness data)
 */
@Override public Pair<double[],double[]> oneEval(Genotype<T> individual,int num){
  utt=new UnitTypeTable();
  averageUnitDifference=0;
  baseUpTime=0;
  harvestingEfficiencyIndex=0;
  pgs=initialPgs.clone();
  ef.givePhysicalGameState(pgs);
  gs=new GameState(pgs,utt);
  if (!AiInitialized)   initializeAI();
 else {
    ef.givePhysicalGameState(initialPgs);
    if (ef2 != null)     ef2.givePhysicalGameState(initialPgs);
  }
  if (Parameters.parameters.classParameter(""String_Node_Str"") != null) {
    enemySet=enemies.getAppropriateEnemy(MMNEAT.ea.currentGeneration());
  }
 else {
    enemySet.add(ai2);
  }
  ef.setNetwork(individual);
  if (CommonConstants.watch)   w=PhysicalGameStatePanel.newVisualizer(gs,MicroRTSUtility.WINDOW_LENGTH,MicroRTSUtility.WINDOW_LENGTH,false,PhysicalGameStatePanel.COLORSCHEME_BLACK);
  System.out.println(enemySet.toString());
  double[][] fitnesses=new double[enemySet.size()][numObjectives()];
  double[][] others=new double[enemySet.size()][numOtherScores()];
  for (int i=0; i < enemySet.size(); i++) {
    ai2=enemySet.get(i);
    if (CommonConstants.watch) {
      System.out.println(""String_Node_Str"" + ai2.getClass().getName());
    }
    ArrayList<Pair<double[],double[]>> currentEval=MicroRTSUtility.oneEval((AI)ai1,ai2,this,ff,w);
    fitnesses[i]=currentEval.get(0).t1;
    others[i]=currentEval.get(0).t2;
  }
  Pair<double[],double[]> averageResults;
  if (growingEnemySet && enemySet.size() > 1) {
  }
  averageResults=new Pair<double[],double[]>(fitnesses[0],others[0]);
  return averageResults;
}"
39193,"public static <T>ArrayList<Pair<double[],double[]>> oneEval(AI ai1,AI ai2,MicroRTSInformation task,RTSFitnessFunction ff,PhysicalGameStateJFrame w){
  coevolution=ff.getCoevolution();
  gs=task.getGameState();
  PhysicalGameState pgs=task.getPhysicalGameState();
  boolean gameover=false;
  double averageUnitDifference=0;
  int maxCycles=1000 * (int)Math.ceil(Math.sqrt(pgs.getHeight()));
  ff.setMaxCycles(maxCycles);
  PlayerAction pa1;
  PlayerAction pa2;
  Unit currentUnit;
  boolean baseDeath1Recorded=false;
  boolean baseDeath2Recorded=false;
  int currentCycle=0;
  do {
    try {
      pa1=ai1.getAction(0,gs);
      gs.issueSafe(pa1);
    }
 catch (    Exception e1) {
      e1.printStackTrace();
      System.exit(1);
    }
    try {
      pa2=ai2.getAction(1,gs);
      gs.issueSafe(pa2);
    }
 catch (    Exception e) {
      e.printStackTrace();
      System.exit(1);
    }
    if (prog) {
      currentUnit=null;
      unitDifferenceNow=0;
      base1Alive=false;
      base2Alive=false;
      for (int i=0; i < pgs.getWidth(); i++) {
        for (int j=0; j < pgs.getHeight(); j++) {
          currentUnit=pgs.getUnitAt(i,j);
          if (currentUnit != null) {
            updateUnitsAlive(currentUnit);
            updateUnitDifference(currentUnit);
            if (currentUnit.getType().name.equals(""String_Node_Str""))             updateHarvestingEfficiency(currentUnit,coevolution,task);
            if (currentUnit.getType().name.equals(""String_Node_Str""))             updateBaseIsAlive(currentUnit,coevolution);
          }
        }
      }
      updateUnitDeaths();
      if (!base1Alive && !baseDeath1Recorded) {
        task.setBaseUpTime(gs.getTime(),1);
        baseDeath1Recorded=true;
      }
      if (!base2Alive && !baseDeath2Recorded && coevolution) {
        task.setBaseUpTime(gs.getTime(),2);
        baseDeath2Recorded=true;
      }
      currentCycle++;
      averageUnitDifference+=(unitDifferenceNow - averageUnitDifference) / (1.0 * currentCycle);
    }
    gameover=gs.cycle();
    if (CommonConstants.watch)     w.repaint();
  }
 while (!gameover && gs.getTime() < maxCycles);
  task.setPercentEnemiesDestroyed((unitDeaths2 * 100) / uniqueAllTime2,1);
  task.setPercentEnemiesDestroyed((unitDeaths1 * 100) / uniqueAllTime1,2);
  task.setAvgUnitDiff(averageUnitDifference);
  if (CommonConstants.watch)   w.dispose();
  return ff.getFitness(gs);
}","public static <T>ArrayList<Pair<double[],double[]>> oneEval(AI ai1,AI ai2,MicroRTSInformation task,RTSFitnessFunction ff,PhysicalGameStateJFrame w){
  coevolution=ff.getCoevolution();
  gs=task.getGameState();
  PhysicalGameState pgs=task.getPhysicalGameState();
  boolean gameover=false;
  double averageUnitDifference=0;
  int maxCycles=1000 * (int)Math.ceil(Math.sqrt(pgs.getHeight()));
  ff.setMaxCycles(maxCycles);
  PlayerAction pa1;
  PlayerAction pa2;
  Unit currentUnit;
  boolean baseDeath1Recorded=false;
  boolean baseDeath2Recorded=false;
  int currentCycle=0;
  do {
    try {
      pa1=ai1.getAction(0,gs);
      gs.issueSafe(pa1);
    }
 catch (    Exception e1) {
      e1.printStackTrace();
      System.exit(1);
    }
    try {
      pa2=ai2.getAction(1,gs);
      gs.issueSafe(pa2);
    }
 catch (    Exception e) {
      e.printStackTrace();
      System.exit(1);
    }
    if (prog) {
      currentUnit=null;
      unitDifferenceNow=0;
      base1Alive=false;
      base2Alive=false;
      for (int i=0; i < pgs.getWidth(); i++) {
        for (int j=0; j < pgs.getHeight(); j++) {
          currentUnit=pgs.getUnitAt(i,j);
          if (currentUnit != null) {
            updateUnitsAlive(currentUnit);
            updateUnitDifference(currentUnit);
            if (currentUnit.getType().name.equals(""String_Node_Str""))             updateHarvestingEfficiency(currentUnit,coevolution,task);
            if (currentUnit.getType().name.equals(""String_Node_Str""))             updateBaseIsAlive(currentUnit,coevolution);
          }
        }
      }
      updateUnitDeaths();
      if (!base1Alive && !baseDeath1Recorded) {
        task.setBaseUpTime(gs.getTime(),1);
        baseDeath1Recorded=true;
      }
      if (!base2Alive && !baseDeath2Recorded && coevolution) {
        task.setBaseUpTime(gs.getTime(),2);
        baseDeath2Recorded=true;
      }
      currentCycle++;
      averageUnitDifference+=(unitDifferenceNow - averageUnitDifference) / (1.0 * currentCycle);
    }
    gameover=gs.cycle();
    if (CommonConstants.watch)     w.repaint();
  }
 while (!gameover && gs.getTime() < maxCycles);
  task.setPercentEnemiesDestroyed((unitDeaths2 * 100) / uniqueAllTime2,1);
  if (coevolution)   task.setPercentEnemiesDestroyed((unitDeaths1 * 100) / uniqueAllTime1,2);
  task.setAvgUnitDiff(averageUnitDifference);
  if (CommonConstants.watch)   w.dispose();
  return ff.getFitness(gs);
}"
39194,"/** 
 * uses information collected over time in MicroRTSUtility.oneEval
 */
@Override public ArrayList<Pair<double[],double[]>> getFitness(GameState gs){
  ArrayList<Pair<double[],double[]>> result=new ArrayList<>();
  double[] fitness=new double[]{normalize(task.getHarvestingEfficiency(1),maxCycles * task.getResourceGainValue()),normalize(task.getBaseUpTime(1),maxCycles),normalize(task.getAverageUnitDifference(),pgs.getHeight() * pgs.getWidth()) + 1};
  double[] opponentFitness=new double[fitness.length];
  if (coevolution) {
    opponentFitness[0]=normalize(task.getHarvestingEfficiency(2),maxCycles * task.getResourceGainValue());
    opponentFitness[1]=normalize(task.getBaseUpTime(2),maxCycles);
    opponentFitness[2]=fitness[2] * -1;
  }
  int winner=gs.winner();
  double[] other=new double[]{winner + 1 % 2,gs.getTime(),mapSwitches};
  Pair<double[],double[]> data1=new Pair<double[],double[]>(fitness,other);
  Pair<double[],double[]> data2=new Pair<double[],double[]>(fitness,other);
  result.add(data1);
  result.add(data2);
  return result;
}","/** 
 * uses information collected over time in MicroRTSUtility.oneEval
 */
@Override public ArrayList<Pair<double[],double[]>> getFitness(GameState gs){
  ArrayList<Pair<double[],double[]>> result=new ArrayList<>();
  double[] fitness=new double[]{normalize(task.getHarvestingEfficiency(1),maxCycles * task.getResourceGainValue()),normalize(task.getBaseUpTime(1),maxCycles),normalize(task.getAverageUnitDifference(),pgs.getHeight() * pgs.getWidth()) + 1};
  double[] opponentFitness=new double[fitness.length];
  if (coevolution) {
    opponentFitness[0]=normalize(task.getHarvestingEfficiency(2),maxCycles * task.getResourceGainValue());
    opponentFitness[1]=normalize(task.getBaseUpTime(2),maxCycles);
    opponentFitness[2]=fitness[2] * -1;
  }
  int winner=gs.winner();
  double[] other=new double[]{(winner == 1 ? -1 : winner + 1),gs.getTime(),mapSwitches};
  Pair<double[],double[]> data1=new Pair<double[],double[]>(fitness,other);
  Pair<double[],double[]> data2=new Pair<double[],double[]>(fitness,other);
  result.add(data1);
  result.add(data2);
  return result;
}"
39195,"public static void newMIDIUtilPlay(Network cppn) throws InvalidMidiDataException, IOException {
  File midiFile=new File(FUR_ELISE_MID);
  Sequence sequence=MidiSystem.getSequence(midiFile);
  Track[] tracks=sequence.getTracks();
  Track track=tracks[1];
  ArrayList<Triple<ArrayList<Double>,ArrayList<Long>,ArrayList<Long>>> midiLists=MIDIUtil.soundLines2(track);
  for (int i=0; i < midiLists.size(); i++) {
    double[] test=MIDIUtil.lineToAmplitudeArray(FUR_ELISE_MID,midiLists.get(i).t1,midiLists.get(i).t2,midiLists.get(i).t3,cppn);
    System.out.println(test.length);
    ArrayUtil.printArrayRange(test,800,1200);
    PlayDoubleArray.playDoubleArray(test);
    MiscUtil.waitForReadStringAndEnterKeyPress();
  }
}","public static void newMIDIUtilPlay(Network cppn) throws InvalidMidiDataException, IOException {
  File midiFile=new File(FUR_ELISE_MID);
  Sequence sequence=MidiSystem.getSequence(midiFile);
  Track[] tracks=sequence.getTracks();
  Track track=tracks[1];
  ArrayList<Triple<ArrayList<Double>,ArrayList<Long>,ArrayList<Long>>> midiLists=MIDIUtil.soundLines2(track);
  for (int i=0; i < midiLists.size(); i++) {
    double[] test=MIDIUtil.lineToAmplitudeArray(FUR_ELISE_MID,midiLists.get(i).t1,midiLists.get(i).t2,midiLists.get(i).t3,cppn);
    System.out.println(test.length);
    ArrayUtil.printArrayRange(test,800,1200);
    PlayDoubleArray.playDoubleArray(test);
  }
}"
39196,"/** 
 * Returns true if the Game is over, else returns false
 * @return True if one Player has no more Checks, else returns false
 */
@Override public boolean endState(){
  int blackChecksLeft=0;
  int redChecksLeft=0;
  for (int i=0; i < BOARD_WIDTH; i++) {
    for (int j=0; j < BOARD_WIDTH; j++) {
      int space=boardState[i][j];
      if (space == BLACK_CHECK || space == BLACK_CHECK_KING) {
        blackChecksLeft++;
      }
 else       if (space == RED_CHECK || space == RED_CHECK_KING) {
        redChecksLeft++;
      }
    }
  }
  return blackChecksLeft == 0 || redChecksLeft == 0;
}","/** 
 * Returns true if the Game is over, else returns false
 * @return True if one Player has no more Checks, else returns false
 */
@Override public boolean endState(){
  int blackChecksLeft=0;
  int redChecksLeft=0;
  for (int i=0; i < BOARD_WIDTH; i++) {
    for (int j=0; j < BOARD_WIDTH; j++) {
      int space=boardState[i][j];
      if (space == BLACK_CHECK || space == BLACK_CHECK_KING) {
        blackChecksLeft++;
      }
 else       if (space == RED_CHECK || space == RED_CHECK_KING) {
        redChecksLeft++;
      }
    }
  }
  if (blackChecksLeft == 0 || redChecksLeft == 0)   return true;
  return (possibleBoardGameStates(this).size() == 0);
}"
39197,"private static void updateHarvestingEfficiency(Unit u,boolean coevolution,MicroRTSInformation task){
  int id=(int)u.getID();
  int player=u.getPlayer() + 1;
  if ((u.getPlayer() == 0 || coevolution) && u.getResources() >= 1 && !workerWithResourceID.contains(id))   workerWithResourceID.add(id);
 else   if (u.getResources() <= 0 && workerWithResourceID.contains(id)) {
    workerWithResourceID.remove(id);
    task.setHarvestingEfficiency(task.getHarvestingEfficiency(player) + 1,player);
  }
}","private static void updateHarvestingEfficiency(Unit u,boolean coevolution,MicroRTSInformation task){
  int id=(int)u.getID();
  int player=u.getPlayer() + 1;
  if ((u.getPlayer() == 0 || coevolution) && u.getResources() >= 1 && !workerWithResourceID.contains(id))   workerWithResourceID.add(id);
 else   if (u.getResources() <= 0 && workerWithResourceID.contains(id)) {
    workerWithResourceID.remove(workerWithResourceID.indexOf(id));
    task.setHarvestingEfficiency(task.getHarvestingEfficiency(player) + 1,player);
  }
}"
39198,"public static <T>ArrayList<Pair<double[],double[]>> oneEval(AI ai1,AI ai2,MicroRTSInformation task,RTSFitnessFunction ff,PhysicalGameStateJFrame w){
  coevolution=ff.getCoevolution();
  gs=task.getGameState();
  PhysicalGameState pgs=task.getPhysicalGameState();
  boolean gameover=false;
  double averageUnitDifference=0;
  int maxCycles=1000 * (int)Math.ceil(Math.sqrt(pgs.getHeight()));
  ff.setMaxCycles(maxCycles);
  PlayerAction pa1;
  PlayerAction pa2;
  int maxBaseX=-1, maxBaseY=-1;
  Unit currentUnit;
  boolean baseDeath1Recorded=false;
  boolean baseDeath2Recorded=false;
  int currentCycle=0;
  do {
    try {
      pa1=ai1.getAction(0,gs);
      gs.issueSafe(pa1);
    }
 catch (    Exception e1) {
      e1.printStackTrace();
      System.exit(1);
    }
    try {
      pa2=ai2.getAction(1,gs);
      gs.issueSafe(pa2);
    }
 catch (    Exception e) {
      e.printStackTrace();
      System.exit(1);
    }
    if (prog) {
      maxBaseX=-1;
      maxBaseY=-1;
      currentUnit=null;
      unitDifferenceNow=0;
      base1Alive=false;
      base2Alive=false;
      for (int i=0; i < pgs.getWidth(); i++) {
        for (int j=0; j < pgs.getHeight(); j++) {
          currentUnit=pgs.getUnitAt(i,j);
          if (currentUnit != null) {
            updateUnitDifference(currentUnit);
            if (currentUnit.getType().name.equals(""String_Node_Str""))             updateHarvestingEfficiency(currentUnit,coevolution,task);
            if (currentUnit.getType().name.equals(""String_Node_Str""))             updateBaseIsAlive(currentUnit,coevolution);
          }
        }
      }
      if (!base1Alive && !baseDeath1Recorded) {
        task.setBaseUpTime(gs.getTime(),1);
        baseDeath1Recorded=true;
      }
      if (!base2Alive && !baseDeath2Recorded) {
        task.setBaseUpTime(gs.getTime(),2);
        baseDeath2Recorded=true;
      }
      currentCycle++;
      averageUnitDifference+=(unitDifferenceNow - averageUnitDifference) / (1.0 * currentCycle);
    }
    gameover=gs.cycle();
    if (CommonConstants.watch)     w.repaint();
  }
 while (!gameover && gs.getTime() < maxCycles);
  task.setAvgUnitDiff(averageUnitDifference);
  if (CommonConstants.watch)   w.dispose();
  return ff.getFitness(gs);
}","public static <T>ArrayList<Pair<double[],double[]>> oneEval(AI ai1,AI ai2,MicroRTSInformation task,RTSFitnessFunction ff,PhysicalGameStateJFrame w){
  coevolution=ff.getCoevolution();
  gs=task.getGameState();
  PhysicalGameState pgs=task.getPhysicalGameState();
  boolean gameover=false;
  double averageUnitDifference=0;
  int maxCycles=1000 * (int)Math.ceil(Math.sqrt(pgs.getHeight()));
  ff.setMaxCycles(maxCycles);
  PlayerAction pa1;
  PlayerAction pa2;
  Unit currentUnit;
  boolean baseDeath1Recorded=false;
  boolean baseDeath2Recorded=false;
  int currentCycle=0;
  do {
    try {
      pa1=ai1.getAction(0,gs);
      gs.issueSafe(pa1);
    }
 catch (    Exception e1) {
      e1.printStackTrace();
      System.exit(1);
    }
    try {
      pa2=ai2.getAction(1,gs);
      gs.issueSafe(pa2);
    }
 catch (    Exception e) {
      e.printStackTrace();
      System.exit(1);
    }
    if (prog) {
      currentUnit=null;
      unitDifferenceNow=0;
      base1Alive=false;
      base2Alive=false;
      for (int i=0; i < pgs.getWidth(); i++) {
        for (int j=0; j < pgs.getHeight(); j++) {
          currentUnit=pgs.getUnitAt(i,j);
          if (currentUnit != null) {
            updateUnitDifference(currentUnit);
            if (currentUnit.getType().name.equals(""String_Node_Str""))             updateHarvestingEfficiency(currentUnit,coevolution,task);
            if (currentUnit.getType().name.equals(""String_Node_Str""))             updateBaseIsAlive(currentUnit,coevolution);
          }
        }
      }
      if (!base1Alive && !baseDeath1Recorded) {
        task.setBaseUpTime(gs.getTime(),1);
        baseDeath1Recorded=true;
      }
      if (!base2Alive && !baseDeath2Recorded) {
        task.setBaseUpTime(gs.getTime(),2);
        baseDeath2Recorded=true;
      }
      currentCycle++;
      averageUnitDifference+=(unitDifferenceNow - averageUnitDifference) / (1.0 * currentCycle);
    }
    gameover=gs.cycle();
    if (CommonConstants.watch)     w.repaint();
  }
 while (!gameover && gs.getTime() < maxCycles);
  task.setAvgUnitDiff(averageUnitDifference);
  if (CommonConstants.watch)   w.dispose();
  return ff.getFitness(gs);
}"
39199,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public ArrayList<Pair<double[],double[]>> evaluateGroup(ArrayList<Genotype<T>> group){
  HeuristicBoardGamePlayer[] players=new HeuristicBoardGamePlayer[group.size()];
  int index=0;
  for (  Genotype<T> gene : group) {
    HeuristicBoardGamePlayer evolved=players[index];
    evolved.setHeuristic((new NNBoardGameHeuristic(gene.getPhenotype())));
    players[index++]=evolved;
  }
  return BoardGameUtil.playGame(MMNEAT.boardGame,players);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public ArrayList<Pair<double[],double[]>> evaluateGroup(ArrayList<Genotype<T>> group){
  HeuristicBoardGamePlayer[] players=new HeuristicBoardGamePlayer[group.size()];
  int index=0;
  for (  Genotype<T> gene : group) {
    HeuristicBoardGamePlayer evolved=players[index];
    evolved.setHeuristic((new NNBoardGameHeuristic(gene.getPhenotype(),featExtract)));
    players[index++]=evolved;
  }
  return BoardGameUtil.playGame(MMNEAT.boardGame,players);
}"
39200,"/** 
 * Evaluates a given individual network's Fitness; If the CommonConstants Watch variable is set to ""True,"" runs a visual evaluation, Else runs a non-visual evaluation
 * @param individual Genotype<T> specifying a Network to be evaluated
 * @param num Integer value
 * @return Pair of Double Arrays that show the Fitness of an individual network
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public Pair<double[],double[]> oneEval(Genotype<T> individual,int num){
  player.setHeuristic((new NNBoardGameHeuristic(individual.getPhenotype())));
  BoardGamePlayer[] players=new BoardGamePlayer[]{player,opponent};
  return BoardGameUtil.playGame(MMNEAT.boardGame,players).get(0);
}","/** 
 * Evaluates a given individual network's Fitness; If the CommonConstants Watch variable is set to ""True,"" runs a visual evaluation, Else runs a non-visual evaluation
 * @param individual Genotype<T> specifying a Network to be evaluated
 * @param num Integer value
 * @return Pair of Double Arrays that show the Fitness of an individual network
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public Pair<double[],double[]> oneEval(Genotype<T> individual,int num){
  player.setHeuristic((new NNBoardGameHeuristic(individual.getPhenotype(),featExtract)));
  BoardGamePlayer[] players=new BoardGamePlayer[]{player,opponent};
  return BoardGameUtil.playGame(MMNEAT.boardGame,players).get(0);
}"
39201,"public static List<Pair<String,String>> getSubstrateConnectivity(PhysicalGameState pgs){
  ArrayList<Pair<String,String>> conn=new ArrayList<Pair<String,String>>();
  if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    conn.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
  }
 else {
  }
  conn.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
  if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    }
 else {
      conn.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
    }
  }
  return conn;
}","public static List<Pair<String,String>> getSubstrateConnectivity(PhysicalGameState pgs){
  ArrayList<Pair<String,String>> conn=new ArrayList<Pair<String,String>>();
  if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
  }
 else {
    conn.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
  }
  conn.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
  if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    }
 else {
      conn.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
    }
  }
  return conn;
}"
39202,"/** 
 * Takes in block information to erase the mobile piece from the observation tetris state, so that no collisions occur
 * @param ts TetrisState
 */
public static void blotMobilePiece(TetrisState ts){
  Vector<TetrisPiece> possibleBlocks=ts.possibleBlocks;
  int[][] mobilePiece=possibleBlocks.get(ts.currentBlockId).getShape(ts.currentRotation);
  for (int x=0; x < mobilePiece.length; x++) {
    for (int y=0; y < mobilePiece[x].length; y++) {
      if (mobilePiece[x][y] != 0) {
        int linearIndex=(ts.currentY + y) * TetrisState.worldWidth + (ts.currentX + x);
        if (linearIndex < 0) {
          System.err.printf(""String_Node_Str"",linearIndex,ts.currentX,x,ts.currentY,y);
          Thread.dumpStack();
          System.exit(1);
        }
        ts.worldState[linearIndex]=0;
      }
    }
  }
}","/** 
 * Takes in block information to erase the mobile piece from the observation tetris state, so that no collisions occur
 * @param ts TetrisState
 */
public static void blotMobilePiece(TetrisState ts){
  Vector<TetrisPiece> possibleBlocks=TetrisState.POSSIBLE_BLOCKS;
  int[][] mobilePiece=possibleBlocks.get(ts.currentBlockId).getShape(ts.currentRotation);
  for (int x=0; x < mobilePiece.length; x++) {
    for (int y=0; y < mobilePiece[x].length; y++) {
      if (mobilePiece[x][y] != 0) {
        int linearIndex=(ts.currentY + y) * TetrisState.worldWidth + (ts.currentX + x);
        if (linearIndex < 0) {
          System.err.printf(""String_Node_Str"",linearIndex,ts.currentX,x,ts.currentY,y);
          Thread.dumpStack();
          System.exit(1);
        }
        ts.worldState[linearIndex]=0;
      }
    }
  }
}"
39203,"/** 
 * Calculates fitness for episode result based on blocks on screen and number of steps, and  saves this value and number of rows on screen into a pair of arrays
 * @param num index of return value in RL array
 * @return pair of arrays containing fitness and number of rows on screen
 */
@Override public Pair<double[],double[]> episodeResult(int num){
  double[] fitness=new double[numObjectives()];
  int index=0;
  if (tetrisTimeSteps)   fitness[index++]=rlNumSteps[num];
  if (tetrisBlocksOnScreen) {
    @SuppressWarnings(""String_Node_Str"") TetrisAfterStateAgent<T> tasa=(TetrisAfterStateAgent<T>)agent;
    int numberOfBlocksInState;
    if (rlNumSteps[num] == maxStepsPerEpisode) {
      numberOfBlocksInState=TetrisState.worldHeight * TetrisState.worldWidth;
    }
 else {
      numberOfBlocksInState=tasa.getNumberOfBlocksInLastState();
    }
    fitness[index++]=numberOfBlocksInState;
  }
  Tetris game=(Tetris)environment;
  if (tetrisAvgEmptySpaces)   fitness[index++]=game.getAverageNumEmptySpaces();
  if (tetrisLinesNotScore) {
    fitness[index++]=game.getLinesCleared();
  }
 else {
    fitness[index++]=rlReturn[num];
  }
  double[] rowCounts=game.getNumberOfRowsCleared();
  double[] otherScores=new double[numOtherScores()];
  otherScores[0]=rowCounts[0];
  otherScores[1]=rowCounts[1];
  otherScores[2]=rowCounts[2];
  otherScores[3]=rowCounts[3];
  otherScores[4]=game.getLinesCleared();
  otherScores[3]=rlReturn[num];
  Pair<double[],double[]> p=new Pair<double[],double[]>(fitness,otherScores);
  return p;
}","/** 
 * Calculates fitness for episode result based on blocks on screen and number of steps, and  saves this value and number of rows on screen into a pair of arrays
 * @param num index of return value in RL array
 * @return pair of arrays containing fitness and number of rows on screen
 */
@Override public Pair<double[],double[]> episodeResult(int num){
  double[] fitness=new double[numObjectives()];
  int index=0;
  if (tetrisTimeSteps)   fitness[index++]=rlNumSteps[num];
  if (tetrisBlocksOnScreen) {
    @SuppressWarnings(""String_Node_Str"") TetrisAfterStateAgent<T> tasa=(TetrisAfterStateAgent<T>)agent;
    int numberOfBlocksInState;
    if (rlNumSteps[num] == maxStepsPerEpisode) {
      numberOfBlocksInState=TetrisState.worldHeight * TetrisState.worldWidth;
    }
 else {
      numberOfBlocksInState=tasa.getNumberOfBlocksInLastState();
    }
    fitness[index++]=numberOfBlocksInState;
  }
  Tetris game=(Tetris)environment;
  if (tetrisAvgEmptySpaces)   fitness[index++]=game.getAverageNumEmptySpaces();
  if (tetrisLinesNotScore) {
    fitness[index++]=game.getLinesCleared();
  }
 else {
    fitness[index++]=rlReturn[num];
  }
  double[] rowCounts=game.getNumberOfRowsCleared();
  double[] otherScores=new double[numOtherScores()];
  otherScores[0]=rowCounts[0];
  otherScores[1]=rowCounts[1];
  otherScores[2]=rowCounts[2];
  otherScores[3]=rowCounts[3];
  otherScores[4]=game.getLinesCleared();
  otherScores[5]=rlReturn[num];
  Pair<double[],double[]> p=new Pair<double[],double[]>(fitness,otherScores);
  return p;
}"
39204,"/** 
 * Method returns a taskspec that reflects the current game state
 * @return provides task details
 */
@Override public TaskSpec makeTaskSpec(){
  int boardSize=gameState.getHeight() * gameState.getWidth();
  int numPieces=gameState.possibleBlocks.size();
  TaskSpecVRLGLUE3 theTaskSpecObject=new TaskSpecVRLGLUE3();
  theTaskSpecObject.setEpisodic();
  theTaskSpecObject.setDiscountFactor(1.0d);
  theTaskSpecObject.addDiscreteObservation(new IntRange(0,1,boardSize));
  theTaskSpecObject.addDiscreteObservation(new IntRange(0,1,numPieces));
  theTaskSpecObject.addDiscreteObservation(new IntRange(gameState.getHeight(),gameState.getHeight()));
  theTaskSpecObject.addDiscreteObservation(new IntRange(gameState.getWidth(),gameState.getWidth()));
  theTaskSpecObject.addDiscreteAction(new IntRange(0,5));
  theTaskSpecObject.setRewardRange(new DoubleRange(0,8.0d));
  theTaskSpecObject.setExtra(""String_Node_Str"" + gameState.getHeight() + ""String_Node_Str""+ gameState.getWidth()+ ""String_Node_Str""+ this.getClass().getPackage().getImplementationVersion());
  String taskSpecString=theTaskSpecObject.toTaskSpec();
  TaskSpec.checkTaskSpec(taskSpecString);
  TaskSpec.checkTaskSpec(taskSpecString);
  return new TaskSpec(theTaskSpecObject);
}","/** 
 * Method returns a taskspec that reflects the current game state
 * @return provides task details
 */
@Override public TaskSpec makeTaskSpec(){
  int boardSize=gameState.getHeight() * gameState.getWidth();
  int numPieces=TetrisState.POSSIBLE_BLOCKS.size();
  TaskSpecVRLGLUE3 theTaskSpecObject=new TaskSpecVRLGLUE3();
  theTaskSpecObject.setEpisodic();
  theTaskSpecObject.setDiscountFactor(1.0d);
  theTaskSpecObject.addDiscreteObservation(new IntRange(0,1,boardSize));
  theTaskSpecObject.addDiscreteObservation(new IntRange(0,1,numPieces));
  theTaskSpecObject.addDiscreteObservation(new IntRange(gameState.getHeight(),gameState.getHeight()));
  theTaskSpecObject.addDiscreteObservation(new IntRange(gameState.getWidth(),gameState.getWidth()));
  theTaskSpecObject.addDiscreteAction(new IntRange(0,5));
  theTaskSpecObject.setRewardRange(new DoubleRange(0,8.0d));
  theTaskSpecObject.setExtra(""String_Node_Str"" + gameState.getHeight() + ""String_Node_Str""+ gameState.getWidth()+ ""String_Node_Str""+ this.getClass().getPackage().getImplementationVersion());
  String taskSpecString=theTaskSpecObject.toTaskSpec();
  TaskSpec.checkTaskSpec(taskSpecString);
  TaskSpec.checkTaskSpec(taskSpecString);
  return new TaskSpec(theTaskSpecObject);
}"
39205,"/** 
 * Environment step that checks for moves that won't work and gives the appropriate errors. Then, checks for a moving block, continues to the next movement or adds the next block. It also connects reward with the game state, checking for game overs and the current score
 * @param actionObject action to perform
 * @return reward and observation details
 */
@Override public Reward_observation_terminal env_step(Action actionObject){
  int theAction=0;
  try {
    theAction=actionObject.intArray[0];
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    System.err.println(""String_Node_Str"" + e);
    System.err.println(""String_Node_Str"");
    theAction=0;
  }
  if (theAction > 5 || theAction < 0) {
    System.err.println(""String_Node_Str"" + theAction);
    theAction=gameState.getRandom().nextInt(5);
  }
  if (gameState.blockMobile) {
    gameState.take_action(theAction);
    gameState.update();
  }
 else {
    double numEmpty=gameState.numEmptySpaces();
    averageNumEmptyBlocks+=(numEmpty - averageNumEmptyBlocks) / (++numBlockPlacements);
    gameState.spawn_block();
  }
  Reward_observation_terminal ro=new Reward_observation_terminal();
  ro.terminal=1;
  ro.o=gameState.get_observation();
  if (!gameState.gameOver()) {
    ro.terminal=0;
    ro.r=gameState.get_score() - currentScore;
    if (ro.r == 1) {
      rowsOf1++;
      linesCleared+=1;
    }
 else     if (ro.r == 2) {
      rowsOf2++;
      linesCleared+=2;
    }
 else     if (ro.r == 4) {
      rowsOf3++;
      linesCleared+=3;
    }
 else     if (ro.r == 8) {
      rowsOf4++;
      linesCleared+=4;
    }
    currentScore=gameState.get_score();
  }
 else {
    ro.r=Tetris.terminalScore;
    currentScore=0;
    linesCleared=0;
  }
  return ro;
}","/** 
 * Environment step that checks for moves that won't work and gives the appropriate errors. Then, checks for a moving block, continues to the next movement or adds the next block. It also connects reward with the game state, checking for game overs and the current score
 * @param actionObject action to perform
 * @return reward and observation details
 */
@Override public Reward_observation_terminal env_step(Action actionObject){
  int theAction=0;
  try {
    theAction=actionObject.intArray[0];
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    System.err.println(""String_Node_Str"" + e);
    System.err.println(""String_Node_Str"");
    theAction=0;
  }
  if (theAction > 5 || theAction < 0) {
    System.err.println(""String_Node_Str"" + theAction);
    theAction=gameState.getRandom().nextInt(5);
  }
  if (gameState.blockMobile) {
    gameState.take_action(theAction);
    gameState.update();
  }
 else {
    double numEmpty=gameState.numEmptySpaces();
    averageNumEmptyBlocks+=(numEmpty - averageNumEmptyBlocks) / (++numBlockPlacements);
    gameState.spawn_block();
  }
  Reward_observation_terminal ro=new Reward_observation_terminal();
  ro.terminal=1;
  ro.o=gameState.get_observation();
  if (!gameState.gameOver()) {
    ro.terminal=0;
    ro.r=gameState.get_score() - currentScore;
    if (ro.r == 1) {
      rowsOf1++;
      linesCleared+=1;
    }
 else     if (ro.r == 2) {
      rowsOf2++;
      linesCleared+=2;
    }
 else     if (ro.r == 4) {
      rowsOf3++;
      linesCleared+=3;
    }
 else     if (ro.r == 8) {
      rowsOf4++;
      linesCleared+=4;
    }
    currentScore=gameState.get_score();
  }
 else {
    ro.r=Tetris.terminalScore;
    currentScore=0;
  }
  return ro;
}"
39206,"/** 
 * This function checks every filled part of the 5x5 block array and sees if that piece is in bounds if the entire block is sitting at (checkX,checkY) on the board.
 * @param checkX X location of the left side of the 5x5 block array
 * @param checkY Y location of the top of the 5x5 block array
 * @param checkOrientation Orientation of the block to check
 * @return
 */
private boolean inBounds(int checkX,int checkY,int checkOrientation){
  try {
    int[][] thePiece=possibleBlocks.get(currentBlockId).getShape(checkOrientation);
    for (int y=0; y < thePiece[0].length; ++y) {
      for (int x=0; x < thePiece.length; ++x) {
        if (thePiece[x][y] != 0) {
          if (!(checkX + x >= 0 && checkX + x < worldWidth && checkY + y >= 0 && checkY + y < worldHeight)) {
            return false;
          }
        }
      }
    }
    return true;
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    System.err.println(""String_Node_Str"" + checkX + ""String_Node_Str""+ checkY+ ""String_Node_Str""+ checkOrientation);
    System.err.println(""String_Node_Str"" + e);
    Thread.dumpStack();
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    is_game_over=true;
    return false;
  }
}","/** 
 * This function checks every filled part of the 5x5 block array and sees if that piece is in bounds if the entire block is sitting at (checkX,checkY) on the board.
 * @param checkX X location of the left side of the 5x5 block array
 * @param checkY Y location of the top of the 5x5 block array
 * @param checkOrientation Orientation of the block to check
 * @return
 */
private boolean inBounds(int checkX,int checkY,int checkOrientation){
  try {
    int[][] thePiece=POSSIBLE_BLOCKS.get(currentBlockId).getShape(checkOrientation);
    for (int y=0; y < thePiece[0].length; ++y) {
      for (int x=0; x < thePiece.length; ++x) {
        if (thePiece[x][y] != 0) {
          if (!(checkX + x >= 0 && checkX + x < worldWidth && checkY + y >= 0 && checkY + y < worldHeight)) {
            return false;
          }
        }
      }
    }
    return true;
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    System.err.println(""String_Node_Str"" + checkX + ""String_Node_Str""+ checkY+ ""String_Node_Str""+ checkOrientation);
    System.err.println(""String_Node_Str"" + e);
    Thread.dumpStack();
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    is_game_over=true;
    return false;
  }
}"
39207,"public void writeCurrentBlock(int[] game_world){
  int[][] thisPiece=possibleBlocks.get(currentBlockId).getShape(currentRotation);
  for (int y=0; y < thisPiece[0].length; ++y) {
    for (int x=0; x < thisPiece.length; ++x) {
      if (thisPiece[x][y] != 0) {
        int linearIndex=calculateLinearArrayPosition(currentX + x,currentY + y);
        if (linearIndex < 0) {
          System.err.printf(""String_Node_Str"",linearIndex,currentX,x,currentY,y);
          Thread.dumpStack();
          System.exit(1);
        }
        game_world[linearIndex]=currentBlockId + 1;
      }
    }
  }
}","public void writeCurrentBlock(int[] game_world){
  int[][] thisPiece=POSSIBLE_BLOCKS.get(currentBlockId).getShape(currentRotation);
  for (int y=0; y < thisPiece[0].length; ++y) {
    for (int x=0; x < thisPiece.length; ++x) {
      if (thisPiece[x][y] != 0) {
        int linearIndex=calculateLinearArrayPosition(currentX + x,currentY + y);
        if (linearIndex < 0) {
          System.err.printf(""String_Node_Str"",linearIndex,currentX,x,currentY,y);
          Thread.dumpStack();
          System.exit(1);
        }
        game_world[linearIndex]=currentBlockId + 1;
      }
    }
  }
}"
39208,"/** 
 * Check if any filled part of the 5x5 block array is either out of bounds or overlapping with something in wordState
 * @param checkX X location of the left side of the 5x5 block array
 * @param checkY Y location of the top of the 5x5 block array
 * @param checkOrientation Orientation of the block to check
 * @return
 */
private boolean colliding(int checkX,int checkY,int checkOrientation){
  int[][] thePiece=possibleBlocks.get(currentBlockId).getShape(checkOrientation);
  try {
    for (int y=0; y < thePiece[0].length; ++y) {
      for (int x=0; x < thePiece.length; ++x) {
        if (thePiece[x][y] != 0) {
          if (checkY + y < 0 || checkX + x < 0) {
            return true;
          }
          if (checkY + y >= worldHeight || checkX + x >= worldWidth) {
            return true;
          }
          int linearArrayIndex=calculateLinearArrayPosition(checkX + x,checkY + y);
          if (worldState[linearArrayIndex] != 0) {
            return true;
          }
        }
      }
    }
    return false;
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    System.err.println(""String_Node_Str"" + checkX + ""String_Node_Str""+ checkY+ ""String_Node_Str""+ checkOrientation);
    System.err.println(""String_Node_Str"" + e);
    Thread.dumpStack();
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    is_game_over=true;
    return true;
  }
}","/** 
 * Check if any filled part of the 5x5 block array is either out of bounds or overlapping with something in wordState
 * @param checkX X location of the left side of the 5x5 block array
 * @param checkY Y location of the top of the 5x5 block array
 * @param checkOrientation Orientation of the block to check
 * @return
 */
private boolean colliding(int checkX,int checkY,int checkOrientation){
  int[][] thePiece=POSSIBLE_BLOCKS.get(currentBlockId).getShape(checkOrientation);
  try {
    for (int y=0; y < thePiece[0].length; ++y) {
      for (int x=0; x < thePiece.length; ++x) {
        if (thePiece[x][y] != 0) {
          if (checkY + y < 0 || checkX + x < 0) {
            return true;
          }
          if (checkY + y >= worldHeight || checkX + x >= worldWidth) {
            return true;
          }
          int linearArrayIndex=calculateLinearArrayPosition(checkX + x,checkY + y);
          if (worldState[linearArrayIndex] != 0) {
            return true;
          }
        }
      }
    }
    return false;
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    System.err.println(""String_Node_Str"" + checkX + ""String_Node_Str""+ checkY+ ""String_Node_Str""+ checkOrientation);
    System.err.println(""String_Node_Str"" + e);
    Thread.dumpStack();
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    is_game_over=true;
    return true;
  }
}"
39209,"public void spawn_block(){
  blockMobile=true;
  currentBlockId=randomGenerator.nextInt(possibleBlocks.size());
  currentRotation=0;
  currentX=(worldWidth / 2) - 2;
  currentY=-4;
  boolean hitOnWayIn=false;
  while (!inBounds(currentX,currentY,currentRotation)) {
    hitOnWayIn=collidingCheckOnlySpotsInBounds(currentX,currentY,currentRotation);
    currentY++;
  }
  is_game_over=colliding(currentX,currentY,currentRotation) || hitOnWayIn;
  if (is_game_over) {
    blockMobile=false;
  }
}","public void spawn_block(){
  blockMobile=true;
  currentBlockId=randomGenerator.nextInt(POSSIBLE_BLOCKS.size());
  currentRotation=0;
  currentX=(worldWidth / 2) - 2;
  currentY=-4;
  boolean hitOnWayIn=false;
  while (!inBounds(currentX,currentY,currentRotation)) {
    hitOnWayIn=collidingCheckOnlySpotsInBounds(currentX,currentY,currentRotation);
    currentY++;
  }
  is_game_over=colliding(currentX,currentY,currentRotation) || hitOnWayIn;
  if (is_game_over) {
    blockMobile=false;
  }
}"
39210,"/** 
 * Copy constructor
 * @param stateToCopy
 */
public TetrisState(TetrisState stateToCopy){
  this.blockMobile=stateToCopy.blockMobile;
  this.currentBlockId=stateToCopy.currentBlockId;
  this.currentRotation=stateToCopy.currentRotation;
  this.currentX=stateToCopy.currentX;
  this.currentY=stateToCopy.currentY;
  this.score=stateToCopy.score;
  this.is_game_over=stateToCopy.is_game_over;
  this.worldState=new int[stateToCopy.worldState.length];
  for (int i=0; i < this.worldState.length; i++) {
    this.worldState[i]=stateToCopy.worldState[i];
  }
  this.possibleBlocks=new Vector<TetrisPiece>();
  for (  TetrisPiece thisPiece : stateToCopy.possibleBlocks) {
    this.possibleBlocks.add(thisPiece);
  }
}","/** 
 * Copy constructor
 * @param stateToCopy
 */
public TetrisState(TetrisState stateToCopy){
  this.blockMobile=stateToCopy.blockMobile;
  this.currentBlockId=stateToCopy.currentBlockId;
  this.currentRotation=stateToCopy.currentRotation;
  this.currentX=stateToCopy.currentX;
  this.currentY=stateToCopy.currentY;
  this.score=stateToCopy.score;
  this.is_game_over=stateToCopy.is_game_over;
  this.worldState=new int[stateToCopy.worldState.length];
  for (int i=0; i < this.worldState.length; i++) {
    this.worldState[i]=stateToCopy.worldState[i];
  }
}"
39211,"public Observation get_observation(boolean includeMobile){
  try {
    int[] worldObservation=new int[worldState.length];
    for (int i=0; i < worldObservation.length; i++) {
      worldObservation[i]=worldState[i];
    }
    if (includeMobile)     writeCurrentBlock(worldObservation);
    Observation o=new Observation(TETRIS_STATE_NUMBER_OF_DISCRETE_FEATURES,0);
    for (int i=0; i < worldObservation.length; i++) {
      if (worldObservation[i] == 0) {
        o.intArray[i]=0;
      }
 else {
        o.intArray[i]=1;
      }
    }
    for (int j=0; j < possibleBlocks.size(); ++j) {
      o.intArray[worldObservation.length + j]=0;
    }
    o.intArray[worldObservation.length + currentBlockId]=1;
    o.intArray[TETRIS_STATE_CURRENT_X_INDEX]=this.currentX;
    o.intArray[TETRIS_STATE_CURRENT_Y_INDEX]=this.currentY;
    o.intArray[TETRIS_STATE_CURRENT_ROTATION_INDEX]=this.currentRotation;
    o.intArray[TETRIS_STATE_CURRENT_HEIGHT_INDEX]=getHeight();
    o.intArray[TETRIS_STATE_CURRENT_WIDTH_INDEX]=getWidth();
    return o;
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"" + e);
    Thread.dumpStack();
    System.err.println(""String_Node_Str"" + currentX + ""String_Node_Str""+ currentY+ ""String_Node_Str""+ currentRotation+ ""String_Node_Str""+ currentBlockId);
    System.err.println(""String_Node_Str"");
    System.exit(1);
    return null;
  }
}","public Observation get_observation(boolean includeMobile){
  try {
    int[] worldObservation=new int[worldState.length];
    for (int i=0; i < worldObservation.length; i++) {
      worldObservation[i]=worldState[i];
    }
    if (includeMobile)     writeCurrentBlock(worldObservation);
    Observation o=new Observation(TETRIS_STATE_NUMBER_OF_DISCRETE_FEATURES,0);
    for (int i=0; i < worldObservation.length; i++) {
      if (worldObservation[i] == 0) {
        o.intArray[i]=0;
      }
 else {
        o.intArray[i]=1;
      }
    }
    for (int j=0; j < POSSIBLE_BLOCKS.size(); ++j) {
      o.intArray[worldObservation.length + j]=0;
    }
    o.intArray[worldObservation.length + currentBlockId]=1;
    o.intArray[TETRIS_STATE_CURRENT_X_INDEX]=this.currentX;
    o.intArray[TETRIS_STATE_CURRENT_Y_INDEX]=this.currentY;
    o.intArray[TETRIS_STATE_CURRENT_ROTATION_INDEX]=this.currentRotation;
    o.intArray[TETRIS_STATE_CURRENT_HEIGHT_INDEX]=getHeight();
    o.intArray[TETRIS_STATE_CURRENT_WIDTH_INDEX]=getWidth();
    return o;
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"" + e);
    Thread.dumpStack();
    System.err.println(""String_Node_Str"" + currentX + ""String_Node_Str""+ currentY+ ""String_Node_Str""+ currentRotation+ ""String_Node_Str""+ currentBlockId);
    System.err.println(""String_Node_Str"");
    System.exit(1);
    return null;
  }
}"
39212,"private boolean collidingCheckOnlySpotsInBounds(int checkX,int checkY,int checkOrientation){
  int[][] thePiece=possibleBlocks.get(currentBlockId).getShape(checkOrientation);
  try {
    for (int y=0; y < thePiece[0].length; ++y) {
      for (int x=0; x < thePiece.length; ++x) {
        if (thePiece[x][y] != 0) {
          if ((checkX + x >= 0 && checkX + x < worldWidth && checkY + y >= 0 && checkY + y < worldHeight)) {
            int linearArrayIndex=calculateLinearArrayPosition(checkX + x,checkY + y);
            if (worldState[linearArrayIndex] != 0) {
              return true;
            }
          }
        }
      }
    }
    return false;
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    System.err.println(""String_Node_Str"" + checkX + ""String_Node_Str""+ checkY+ ""String_Node_Str""+ checkOrientation);
    System.err.println(""String_Node_Str"" + e);
    Thread.dumpStack();
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    is_game_over=true;
    return true;
  }
}","private boolean collidingCheckOnlySpotsInBounds(int checkX,int checkY,int checkOrientation){
  int[][] thePiece=POSSIBLE_BLOCKS.get(currentBlockId).getShape(checkOrientation);
  try {
    for (int y=0; y < thePiece[0].length; ++y) {
      for (int x=0; x < thePiece.length; ++x) {
        if (thePiece[x][y] != 0) {
          if ((checkX + x >= 0 && checkX + x < worldWidth && checkY + y >= 0 && checkY + y < worldHeight)) {
            int linearArrayIndex=calculateLinearArrayPosition(checkX + x,checkY + y);
            if (worldState[linearArrayIndex] != 0) {
              return true;
            }
          }
        }
      }
    }
    return false;
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    System.err.println(""String_Node_Str"" + checkX + ""String_Node_Str""+ checkY+ ""String_Node_Str""+ checkOrientation);
    System.err.println(""String_Node_Str"" + e);
    Thread.dumpStack();
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    is_game_over=true;
    return true;
  }
}"
39213,"/** 
 * String representation that may or may not include the currently falling piece
 * @param showFallingPiece Whether falling piece is part of representation
 * @return String representation of board
 */
public String toString(boolean showFallingPiece){
  int[][] thePiece=possibleBlocks.get(currentBlockId).getShape(this.currentRotation);
  String result=""String_Node_Str"";
  for (int y=0; y < worldHeight; y++) {
    for (int x=0; x < worldWidth; x++) {
      if (showFallingPiece && (currentY <= y && y < currentY + thePiece[0].length) && (currentX <= x && x < currentX + thePiece.length)) {
        result+=(int)Math.max(2 * thePiece[x - currentX][y - currentY],(worldState[y * worldWidth + x]));
      }
 else {
        result+=(worldState[y * worldWidth + x]) > 0 ? 1 : 0;
      }
    }
    result+=(""String_Node_Str"");
  }
  result+=(""String_Node_Str"");
  return result;
}","/** 
 * String representation that may or may not include the currently falling piece
 * @param showFallingPiece Whether falling piece is part of representation
 * @return String representation of board
 */
public String toString(boolean showFallingPiece){
  int[][] thePiece=POSSIBLE_BLOCKS.get(currentBlockId).getShape(this.currentRotation);
  String result=""String_Node_Str"";
  for (int y=0; y < worldHeight; y++) {
    for (int x=0; x < worldWidth; x++) {
      if (showFallingPiece && (currentY <= y && y < currentY + thePiece[0].length) && (currentX <= x && x < currentX + thePiece.length)) {
        result+=(int)Math.max(2 * thePiece[x - currentX][y - currentY],(worldState[y * worldWidth + x]));
      }
 else {
        result+=(worldState[y * worldWidth + x]) > 0 ? 1 : 0;
      }
    }
    result+=(""String_Node_Str"");
  }
  result+=(""String_Node_Str"");
  return result;
}"
39214,"public RemixbreederTask() throws IllegalAccessException {
  super(false);
  initializationComplete=false;
  try {
    AudioInputStream AIS=WAVUtil.audioStream(Parameters.parameters.stringOptions.get(""String_Node_Str""));
    AudioFormat format=AIS.getFormat();
    playBackRate=format.getSampleSizeInBits();
    PlayDoubleArray.changeAudioFormat(format);
  }
 catch (  UnsupportedAudioFileException|IOException e) {
    e.printStackTrace();
    System.exit(1);
  }
  WAVDoubleArray=SoundToArray.readDoubleArrayFromStringAudio(Parameters.parameters.stringOptions.get(""String_Node_Str""));
  Parameters.parameters.setInteger(""String_Node_Str"",Math.min(Parameters.parameters.integerParameter(""String_Node_Str""),WAVDoubleArray.length));
  Parameters.parameters.setInteger(""String_Node_Str"",WAVDoubleArray.length);
  Hashtable<Integer,JLabel> labels=new Hashtable<>();
  clipLength.setMinorTickSpacing(10000);
  clipLength.setPaintTicks(true);
  labels.put(Keyboard.NOTE_LENGTH_DEFAULT,new JLabel(""String_Node_Str""));
  labels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
  clipLength.setLabelTable(labels);
  clipLength.setPaintLabels(true);
  clipLength.setPreferredSize(new Dimension(200,40));
  clipLength.setMaximum(Parameters.parameters.integerParameter(""String_Node_Str""));
  JButton playOriginal=new JButton(""String_Node_Str"");
  playOriginal.setName(""String_Node_Str"" + (CHECKBOX_IDENTIFIER_START - inputMultipliers.length - 1));
  playOriginal.addActionListener(this);
  top.add(playOriginal);
  initializationComplete=true;
}","public RemixbreederTask() throws IllegalAccessException {
  super(false);
  initializationComplete=false;
  try {
    AudioInputStream AIS=WAVUtil.audioStream(Parameters.parameters.stringOptions.get(""String_Node_Str""));
    format=AIS.getFormat();
    playBackRate=format.getSampleSizeInBits();
    PlayDoubleArray.changeAudioFormat(format);
  }
 catch (  UnsupportedAudioFileException|IOException e) {
    e.printStackTrace();
    System.exit(1);
  }
  WAVDoubleArray=SoundToArray.readDoubleArrayFromStringAudio(Parameters.parameters.stringOptions.get(""String_Node_Str""));
  Parameters.parameters.setInteger(""String_Node_Str"",Math.min(Parameters.parameters.integerParameter(""String_Node_Str""),WAVDoubleArray.length));
  Parameters.parameters.setInteger(""String_Node_Str"",WAVDoubleArray.length);
  Hashtable<Integer,JLabel> labels=new Hashtable<>();
  clipLength.setMinorTickSpacing(10000);
  clipLength.setPaintTicks(true);
  labels.put(Keyboard.NOTE_LENGTH_DEFAULT,new JLabel(""String_Node_Str""));
  labels.put(Parameters.parameters.integerParameter(""String_Node_Str""),new JLabel(""String_Node_Str""));
  clipLength.setLabelTable(labels);
  clipLength.setPaintLabels(true);
  clipLength.setPreferredSize(new Dimension(200,40));
  clipLength.setMaximum(Parameters.parameters.integerParameter(""String_Node_Str""));
  JButton playOriginal=new JButton(""String_Node_Str"");
  playOriginal.setName(""String_Node_Str"" + (CHECKBOX_IDENTIFIER_START - inputMultipliers.length - 1));
  playOriginal.addActionListener(this);
  top.add(playOriginal);
  initializationComplete=true;
}"
39215,"@Override protected void saveSound(int i,JFileChooser chooser){
  SoundFromCPPNUtil.saveRemixedFileFromCPPN(scores.get(i).individual.getPhenotype(),WAVDoubleArray,Parameters.parameters.integerParameter(""String_Node_Str""),playBackRate,playBackRate,inputMultipliers,chooser.getSelectedFile().getName() + ""String_Node_Str"");
}","@Override protected void saveSound(int i,JFileChooser chooser){
  SoundFromCPPNUtil.saveRemixedFileFromCPPN(scores.get(i).individual.getPhenotype(),WAVDoubleArray,Parameters.parameters.integerParameter(""String_Node_Str""),playBackRate,playBackRate,inputMultipliers,chooser.getSelectedFile().getName() + ""String_Node_Str"",format);
}"
39216,"private static void init(AudioFormat format){
  try {
    DataLine.Info info=new DataLine.Info(SourceDataLine.class,format);
    line=(SourceDataLine)AudioSystem.getLine(info);
    line.open(format,SAMPLE_BUFFER_SIZE * format.getFrameSize());
    lineSave=(SourceDataLine)AudioSystem.getLine(info);
    lineSave.open(format,SAMPLE_BUFFER_SIZE * format.getFrameSize());
    buffer=new byte[SAMPLE_BUFFER_SIZE * format.getFrameSize() / 3];
  }
 catch (  LineUnavailableException e) {
    System.out.println(e.getMessage());
  }
  line.start();
}","private static void init(AudioFormat format){
  try {
    DataLine.Info info=new DataLine.Info(SourceDataLine.class,format);
    line=(SourceDataLine)AudioSystem.getLine(info);
    line.open(format,SAMPLE_BUFFER_SIZE * format.getFrameSize());
    buffer=new byte[SAMPLE_BUFFER_SIZE * format.getFrameSize() / 3];
  }
 catch (  LineUnavailableException e) {
    System.out.println(e.getMessage());
  }
  line.start();
}"
39217,"public static void changeAudioFormat(AudioFormat format){
  line.close();
  lineSave.close();
  init(format);
}","public static void changeAudioFormat(AudioFormat format){
  line.close();
  init(format);
}"
39218,"/** 
 * Saves the double array as an audio file (using .wav or .au format). Fully functional for saving file generated from CPPNs
 * @param filename the name of the audio file
 * @param samples the array of samples
 * @throws IllegalArgumentException if unable to save {@code filename}
 * @throws IllegalArgumentException if {@code samples} is {@code null}
 */
public static void saveFileFromDoubleArray(String filename,double[] samples){
  if (samples == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  AudioFormat format=new AudioFormat(PlayDoubleArray.SAMPLE_RATE,16,1,true,false);
  byte[] data=new byte[2 * samples.length];
  for (int i=0; i < samples.length; i++) {
    int temp=(short)(samples[i] * PlayDoubleArray.MAX_16_BIT);
    data[2 * i + 0]=(byte)temp;
    data[2 * i + 1]=(byte)(temp >> 8);
  }
  try {
    ByteArrayInputStream bais=new ByteArrayInputStream(data);
    AudioInputStream ais=new AudioInputStream(bais,format,samples.length);
    if (filename.endsWith(""String_Node_Str"") || filename.endsWith(""String_Node_Str"")) {
      AudioSystem.write(ais,AudioFileFormat.Type.WAVE,new File(filename));
    }
 else     if (filename.endsWith(""String_Node_Str"") || filename.endsWith(""String_Node_Str"")) {
      AudioSystem.write(ais,AudioFileFormat.Type.AU,new File(filename));
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + filename + ""String_Node_Str"");
    }
  }
 catch (  IOException ioe) {
    throw new IllegalArgumentException(""String_Node_Str"" + filename + ""String_Node_Str"",ioe);
  }
}","public static void saveFileFromDoubleArray(String filename,double[] samples,AudioFormat format){
  if (samples == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  byte[] data=new byte[2 * samples.length];
  for (int i=0; i < samples.length; i++) {
    int temp=(short)(samples[i] * PlayDoubleArray.MAX_16_BIT);
    data[2 * i + 0]=(byte)temp;
    data[2 * i + 1]=(byte)(temp >> 8);
  }
  try {
    ByteArrayInputStream bais=new ByteArrayInputStream(data);
    AudioInputStream ais=new AudioInputStream(bais,format,samples.length);
    if (filename.endsWith(""String_Node_Str"") || filename.endsWith(""String_Node_Str"")) {
      AudioSystem.write(ais,AudioFileFormat.Type.WAVE,new File(filename));
    }
 else     if (filename.endsWith(""String_Node_Str"") || filename.endsWith(""String_Node_Str"")) {
      AudioSystem.write(ais,AudioFileFormat.Type.AU,new File(filename));
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + filename + ""String_Node_Str"");
    }
  }
 catch (  IOException ioe) {
    throw new IllegalArgumentException(""String_Node_Str"" + filename + ""String_Node_Str"",ioe);
  }
}"
39219,"/** 
 * Uses a double array of amplitudes and a CPPN to generate a remixed sound and saves that  output into a file.
 * @param CPPN network used to generate amplitude
 * @param inputWAV double array representing WAV file being remixed
 * @param length length of sample
 * @param frequency Frequency of note being manipulated
 * @param sampleRate specified rate of input wav file 
 * @param inputMultipliers double array determining whether checkboxes have been turned on or off in Breedesizer
 * @param fileName String representation of location where generated file will be saved
 */
public static void saveRemixedFileFromCPPN(Network cppn,double[] inputWAV,int length,double frequency,int sampleRate,double[] inputMultipliers,String fileName){
  double[] generatedSound=amplitudeRemixer(cppn,inputWAV,length,frequency,sampleRate,inputMultipliers);
  SaveFromArray.saveFileFromDoubleArray(fileName,generatedSound);
}","/** 
 * Uses a double array of amplitudes and a CPPN to generate a remixed sound and saves that  output into a file.
 * @param CPPN network used to generate amplitude
 * @param inputWAV double array representing WAV file being remixed
 * @param length length of sample
 * @param frequency Frequency of note being manipulated
 * @param sampleRate specified rate of input wav file 
 * @param inputMultipliers double array determining whether checkboxes have been turned on or off in Breedesizer
 * @param fileName String representation of location where generated file will be saved
 * @param format 
 */
public static void saveRemixedFileFromCPPN(Network cppn,double[] inputWAV,int length,double frequency,int sampleRate,double[] inputMultipliers,String fileName,AudioFormat format){
  double[] generatedSound=amplitudeRemixer(cppn,inputWAV,length,frequency,sampleRate,inputMultipliers);
  SaveFromArray.saveFileFromDoubleArray(fileName,generatedSound,format);
}"
39220,"/** 
 * Doesn't work - makes 8 bit files playable, but they don't sound like original file. Converting AudioFormat of files directly isn't the best way to go
 * @param format AudioFormat of source wave
 * @return adjusted format specified to 16 bits, 2 bytes/frame, and a signed PCM encoding
 */
public static AudioFormat getAudioFormatRestrictedTo16Bits(AudioFormat format){
  float sampleRate=format.getSampleRate();
  int channels=format.getChannels();
  boolean endian=format.isBigEndian();
  float frameRate=format.getFrameRate();
  AudioFormat adjustedFormat=new AudioFormat(Encoding.PCM_SIGNED,sampleRate,PlayDoubleArray.BITS_PER_SAMPLE,channels,PlayDoubleArray.BYTES_PER_SAMPLE,frameRate,endian);
  return adjustedFormat;
}","/** 
 * Doesn't work - makes 8 bit files playable, but they don't sound like original file. Converting AudioFormat of files directly isn't the best way to go
 * @param format AudioFormat of source wave
 * @return adjusted format specified to 16 bits, 2 bytes/frame, and a signed PCM encoding
 */
private static AudioFormat getAudioFormatRestrictedTo16Bits(AudioFormat format){
  float sampleRate=format.getSampleRate();
  int channels=format.getChannels();
  boolean endian=format.isBigEndian();
  float frameRate=format.getFrameRate();
  AudioFormat adjustedFormat=new AudioFormat(Encoding.PCM_SIGNED,sampleRate,PlayDoubleArray.BITS_PER_SAMPLE,channels,PlayDoubleArray.BYTES_PER_SAMPLE,frameRate,endian);
  return adjustedFormat;
}"
39221,"/** 
 * Method that inputs the format of an AudioInputStream as well as the byte array formed from its contents and then creates an array of ints containing the amplitude data of the stream. 
 * @param format AudioFormat of AudioinputStream
 * @param audioBytes byte array formed based on the size of the stream
 * @return int array containing amplitude data from stream
 */
private static int[] extractAmplitudeDataFromAmplitudeByteArray(AudioFormat format,byte[] audioBytes){
  int[] audioData=null;
  if (format.getSampleSizeInBits() == 16) {
    System.out.println(""String_Node_Str"");
    int nlengthInSamples=audioBytes.length / 2;
    audioData=new int[nlengthInSamples];
    if (format.isBigEndian()) {
      System.out.println(""String_Node_Str"");
      for (int i=0; i < nlengthInSamples; i++) {
        int MSB=audioBytes[2 * i];
        int LSB=audioBytes[2 * i + 1];
        audioData[i]=(MSB << 8 | (255 & LSB));
      }
    }
 else {
      System.out.println(""String_Node_Str"");
      for (int i=0; i < nlengthInSamples; i++) {
        int LSB=audioBytes[2 * i];
        int MSB=audioBytes[2 * i + 1];
        audioData[i]=(MSB << 8 | (255 & LSB));
      }
    }
  }
 else   if (format.getSampleSizeInBits() == 8) {
    int nlengthInSamples=audioBytes.length;
    audioData=new int[nlengthInSamples];
    if (format.getEncoding().toString().startsWith(""String_Node_Str"")) {
      for (int i=0; i < audioBytes.length; i++) {
        audioData[i]=audioBytes[i];
      }
    }
 else {
      for (int i=0; i < audioBytes.length; i++) {
        audioData[i]=audioBytes[i] - 128;
      }
    }
  }
  return audioData;
}","/** 
 * Method that inputs the format of an AudioInputStream as well as the byte array formed from its contents and then creates an array of ints containing the amplitude data of the stream. 
 * @param format AudioFormat of AudioinputStream
 * @param audioBytes byte array formed based on the size of the stream
 * @return int array containing amplitude data from stream
 */
public static int[] extractAmplitudeDataFromAmplitudeByteArray(AudioFormat format,byte[] audioBytes){
  int[] audioData=null;
  if (format.getSampleSizeInBits() == 16) {
    System.out.println(""String_Node_Str"");
    int nlengthInSamples=audioBytes.length / 2;
    audioData=new int[nlengthInSamples];
    if (format.isBigEndian()) {
      System.out.println(""String_Node_Str"");
      for (int i=0; i < nlengthInSamples; i++) {
        int MSB=audioBytes[2 * i];
        int LSB=audioBytes[2 * i + 1];
        audioData[i]=(MSB << 8 | (255 & LSB));
      }
    }
 else {
      System.out.println(""String_Node_Str"");
      for (int i=0; i < nlengthInSamples; i++) {
        int LSB=audioBytes[2 * i];
        int MSB=audioBytes[2 * i + 1];
        audioData[i]=(MSB << 8 | (255 & LSB));
      }
    }
  }
 else   if (format.getSampleSizeInBits() == 8) {
    int nlengthInSamples=audioBytes.length;
    audioData=new int[nlengthInSamples];
    if (format.getEncoding().toString().startsWith(""String_Node_Str"")) {
      for (int i=0; i < audioBytes.length; i++) {
        audioData[i]=audioBytes[i];
      }
    }
 else {
      for (int i=0; i < audioBytes.length; i++) {
        audioData[i]=audioBytes[i] - 128;
      }
    }
  }
  return audioData;
}"
39222,"/** 
 * Method that inputs an AudioInputStream, calls method that extracts amplitude byte array from the audio input stream, and returns a method call using the resulting byte array to  extractAmplitudeDataFromAmplitudeByteArray(). 
 * @param audioInputStream stream of audio being converted into amplitude data
 * @return  method call that extracts amplitude data from byte array formed
 */
public static int[] extractAmplitudeDataFromAudioInputStream(AudioInputStream audioInputStream){
  AudioFormat format=audioInputStream.getFormat();
  byte[] audioBytes=extractAmplitudeByteArrayFromAudioInputStream(audioInputStream);
  return extractAmplitudeDataFromAmplitudeByteArray(format,audioBytes);
}","/** 
 * Method that inputs an AudioInputStream, calls method that extracts amplitude byte array from the audio input stream, and returns a method call using the resulting byte array to  extractAmplitudeDataFromAmplitudeByteArray(). 
 * @param audioInputStream stream of audio being converted into amplitude data
 * @return  method call that extracts amplitude data from byte array formed
 */
public static int[] extractAmplitudeDataFromAudioInputStream(AudioInputStream audioInputStream){
  AudioFormat format=audioInputStream.getFormat();
  PlayDoubleArray.changeAudioFormat(format);
  byte[] audioBytes=extractAmplitudeByteArrayFromAudioInputStream(audioInputStream);
  return extractAmplitudeDataFromAmplitudeByteArray(format,audioBytes);
}"
39223,"public static void main(String[] rags){
  Parameters.initializeParameterCollections(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  System.out.println(Parameters.parameters.booleanParameter(""String_Node_Str""));
}","public static void main(String[] rags){
  Parameters.initializeParameterCollections(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  System.out.println();
}"
39224,"/** 
 * @param value :value to be converted
 * @param max largest possible number in this category
 * @return value on a scale from -1 to 1 with 1 being max
 */
private double normalize(double value,double max){
  return (value / max) - 2;
}","/** 
 * precondition: max > 0, min = 0.
 * @param value :value to be converted
 * @param max largest possible number in this category
 * @return value on a scale from -1 to 1 with 1 being max
 */
private double normalize(double value,double max){
  return (2 * value - max) / max;
}"
39225,"/** 
 * uses information collected over time in MicroRTSTask.oneEval
 */
@Override public Pair<double[],double[]> getFitness(GameState gs){
  double[] fitness=new double[]{task.getHarvestingEfficiency(),normalize(task.getBaseUpTime(),maxCycles),task.getAverageUnitDifference()};
  Pair<double[],double[]> result=new Pair<double[],double[]>(fitness,null);
  return result;
}","/** 
 * uses information collected over time in MicroRTSTask.oneEval
 */
@Override public Pair<double[],double[]> getFitness(GameState gs){
  double[] fitness=new double[]{normalize(task.getHarvestingEfficiency(),maxCycles * task.getResourceGainValue()),normalize(task.getBaseUpTime(),maxCycles),normalize(task.getAverageUnitDifference(),pgs.getHeight() * pgs.getWidth())};
  Pair<double[],double[]> result=new Pair<double[],double[]>(fitness,null);
  return result;
}"
39226,"/** 
 * scores performance in a game
 * @param terminalGameState
 * @return pair of double[], the first of which has {victory, time, unitDifference}
 */
private Pair<double[],double[]> fitnessFunction(GameState terminalGameState){
  Pair<double[],double[]> score=new Pair<>(new double[3],new double[0]);
  int gameEndTime=terminalGameState.getTime();
  List<Unit> unitsLeft=terminalGameState.getUnits();
  if (terminalGameState.winner() == 0) {
    score.t1[0]=1;
    score.t1[1]=(double)(MAXCYCLES - gameEndTime) / MAXCYCLES * RESULTRANGE - 1;
    for (    Unit u : unitsLeft) {
      if (u.getType().name != ""String_Node_Str"")       score.t1[2]+=u.getType().cost;
    }
  }
 else   if (terminalGameState.winner() == 1) {
    score.t1[0]=-1;
    score.t1[1]=(double)(MAXCYCLES - gameEndTime) / MAXCYCLES * -1 * RESULTRANGE + 1;
    for (    Unit u : unitsLeft) {
      if (u.getType().name != ""String_Node_Str"")       score.t1[2]-=u.getType().cost;
    }
  }
 else   if (terminalGameState.winner() == -1) {
    score.t1[0]=0;
    for (    Unit u : unitsLeft) {
      if (u.getPlayer() == 0)       score.t1[2]+=u.getType().cost;
 else       if (u.getPlayer() == 1)       score.t1[2]-=u.getType().cost;
    }
    score.t1[1]=-1 * score.t1[2];
  }
  System.out.println(""String_Node_Str"" + score.t1[0] + ""String_Node_Str""+ score.t1[2]+ ""String_Node_Str""+ score.t1[1]);
  return score;
}","/** 
 * scores performance in a game
 * @param terminalGameState
 * @return pair of double[], the first of which has {victory, time, unitDifference}
 */
private Pair<double[],double[]> fitnessFunction(GameState terminalGameState){
  Pair<double[],double[]> score=new Pair<>(new double[3],new double[0]);
  int gameEndTime=terminalGameState.getTime();
  List<Unit> unitsLeft=terminalGameState.getUnits();
  if (terminalGameState.winner() == 0) {
    score.t1[0]=1;
    score.t1[1]=(double)(MAXCYCLES - gameEndTime) / MAXCYCLES * RESULTRANGE - 1;
    for (    Unit u : unitsLeft) {
      if (u.getType().name != ""String_Node_Str"")       score.t1[2]+=u.getType().cost;
    }
  }
 else   if (terminalGameState.winner() == 1) {
    score.t1[0]=-1;
    score.t1[1]=(double)(MAXCYCLES - gameEndTime) / MAXCYCLES * -1 * RESULTRANGE + 1;
    for (    Unit u : unitsLeft) {
      if (u.getType().name != ""String_Node_Str"")       score.t1[2]-=u.getType().cost;
    }
  }
 else   if (terminalGameState.winner() == -1) {
    score.t1[0]=0;
    for (    Unit u : unitsLeft) {
      if (u.getPlayer() == 0)       score.t1[2]+=u.getType().cost;
 else       if (u.getPlayer() == 1)       score.t1[2]-=u.getType().cost;
    }
    score.t1[1]=-1 * score.t1[2] / (pgs.getHeight() * pgs.getWidth());
  }
  System.out.println(""String_Node_Str"" + score.t1[0] + ""String_Node_Str""+ score.t1[2]+ ""String_Node_Str""+ score.t1[1]);
  return score;
}"
39227,"private Pair<double[],double[]> fitnessFunction(GameState terminalGameState){
  Pair<double[],double[]> score=new Pair<>(new double[3],new double[0]);
  int gameEndTime=terminalGameState.getTime();
  List<Unit> unitsLeft=terminalGameState.getUnits();
  System.out.println(unitsLeft.get(6).getType().name);
  if (terminalGameState.winner() == 0) {
    score.t1[0]=1;
    score.t1[1]=(double)(MAXCYCLES - gameEndTime) / MAXCYCLES * RESULTRANGE - 1;
    for (    Unit u : unitsLeft) {
      if (u.getType().name != ""String_Node_Str"")       score.t1[2]+=u.getType().cost;
    }
  }
 else {
    score.t1[0]=-1;
    score.t1[1]=(double)(MAXCYCLES - gameEndTime) / MAXCYCLES * -1 * RESULTRANGE + 1;
    for (    Unit u : unitsLeft) {
      if (u.getType().name != ""String_Node_Str"")       score.t1[2]-=u.getType().cost;
    }
  }
  System.out.println(score);
  return score;
}","/** 
 * scores performance in a game
 * @param terminalGameState
 * @return pair of double[], the first of which has {victory, time, unitDifference}
 */
private Pair<double[],double[]> fitnessFunction(GameState terminalGameState){
  Pair<double[],double[]> score=new Pair<>(new double[3],new double[0]);
  int gameEndTime=terminalGameState.getTime();
  List<Unit> unitsLeft=terminalGameState.getUnits();
  if (terminalGameState.winner() == 0) {
    score.t1[0]=1;
    score.t1[1]=(double)(MAXCYCLES - gameEndTime) / MAXCYCLES * RESULTRANGE - 1;
    for (    Unit u : unitsLeft) {
      if (u.getType().name != ""String_Node_Str"")       score.t1[2]+=u.getType().cost;
    }
  }
 else {
    score.t1[0]=-1;
    score.t1[1]=(double)(MAXCYCLES - gameEndTime) / MAXCYCLES * -1 * RESULTRANGE + 1;
    for (    Unit u : unitsLeft) {
      if (u.getType().name != ""String_Node_Str"")       score.t1[2]-=u.getType().cost;
    }
  }
  return score;
}"
39228,"/** 
 * all actions performed in a single evaluation of a genotype loop taken from GameVisualSimulationTest, the rest based on MsPacManTask.oneEval()
 * @param individual genotype to be evaluated
 * @param num which evaluation is currently being performed
 * @return Combination of fitness scores (multiobjective possible), andother scores (for tracking non-fitness data)
 */
@Override public Pair<double[],double[]> oneEval(Genotype<T> individual,int num){
  GameState gs=new GameState(pgs,utt);
  boolean gameover=false;
  ef.setNetwork(individual);
  AI ai1=new UCT(100,-1,100,10,new RandomBiasedAI(),ef);
  AI ai2=new RandomBiasedAI();
  JFrame w=null;
  if (CommonConstants.watch)   w=PhysicalGameStatePanel.newVisualizer(gs,640,640,false,PhysicalGameStatePanel.COLORSCHEME_BLACK);
  do {
    PlayerAction pa1;
    try {
      pa1=ai1.getAction(0,gs);
      gs.issueSafe(pa1);
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
    PlayerAction pa2;
    try {
      pa2=ai2.getAction(1,gs);
      gs.issueSafe(pa2);
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
    gameover=gs.cycle();
    if (CommonConstants.watch) {
      w.repaint();
    }
  }
 while (!gameover && gs.getTime() < MAXCYCLES);
  return fitnessFunction(gs);
}","/** 
 * all actions performed in a single evaluation of a genotype loop taken from GameVisualSimulationTest, the rest based on MsPacManTask.oneEval()
 * @param individual genotype to be evaluated
 * @param num which evaluation is currently being performed
 * @return Combination of fitness scores (multiobjective possible), andother scores (for tracking non-fitness data)
 */
@Override public Pair<double[],double[]> oneEval(Genotype<T> individual,int num){
  boolean gameover=false;
  utt=new UnitTypeTable();
  try {
    pgs=PhysicalGameState.load(""String_Node_Str"",utt);
  }
 catch (  JDOMException|IOException e) {
    e.printStackTrace();
    System.exit(1);
  }
  GameState gs=new GameState(pgs,utt);
  ef.setNetwork(individual);
  AI ai1=new UCT(100,-1,100,10,new RandomBiasedAI(),ef);
  AI ai2=new RandomBiasedAI();
  JFrame w=null;
  if (CommonConstants.watch)   w=PhysicalGameStatePanel.newVisualizer(gs,640,640,false,PhysicalGameStatePanel.COLORSCHEME_BLACK);
  do {
    PlayerAction pa1;
    try {
      pa1=ai1.getAction(0,gs);
      gs.issueSafe(pa1);
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
    PlayerAction pa2;
    try {
      pa2=ai2.getAction(1,gs);
      gs.issueSafe(pa2);
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
    gameover=gs.cycle();
    if (CommonConstants.watch) {
      w.repaint();
      try {
        Thread.sleep(1);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
 while (!gameover && gs.getTime() < MAXCYCLES);
  return fitnessFunction(gs);
}"
39229,"/** 
 * Default Constructor
 * @throws IllegalAccessException 
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public InteractiveEvolutionTask() throws IllegalAccessException {
  MMNEAT.registerFitnessFunction(""String_Node_Str"");
  if (Parameters.parameters.integerParameter(""String_Node_Str"") % InteractiveEvolutionTask.NUM_COLUMNS != 0) {
    Parameters.parameters.setInteger(""String_Node_Str"",InteractiveEvolutionTask.NUM_COLUMNS * ((Parameters.parameters.integerParameter(""String_Node_Str"") / InteractiveEvolutionTask.NUM_COLUMNS) + 1));
    System.out.println(""String_Node_Str"" + Parameters.parameters.integerParameter(""String_Node_Str""));
  }
  numButtonOptions=Parameters.parameters.integerParameter(""String_Node_Str"");
  numRows=numButtonOptions / NUM_COLUMNS;
  picSize=Parameters.parameters.integerParameter(""String_Node_Str"");
  chosen=new boolean[numButtonOptions];
  showLineage=false;
  showNetwork=false;
  waitingForUser=false;
  activation=new boolean[Math.abs(SQUARE_WAVE_CHECKBOX_INDEX) + 1];
  Arrays.fill(activation,true);
  if (MMNEAT.browseLineage) {
    return;
  }
  frame=new JFrame(getWindowTitle());
  panels=new ArrayList<JPanel>();
  buttons=new ArrayList<JButton>();
  frame.setSize(Toolkit.getDefaultToolkit().getScreenSize());
  picSize=Math.min(picSize,frame.getWidth() / NUM_COLUMNS);
  frame.setLocation(300,100);
  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  frame.setLayout(new GridLayout(numRows + 1,0));
  frame.setVisible(true);
  topper=new JPanel();
  JPanel top=new JPanel();
  JPanel bottom=new JPanel();
  ImageIcon reset=new ImageIcon(""String_Node_Str"");
  Image reset2=reset.getImage().getScaledInstance(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT,1);
  ImageIcon save=new ImageIcon(""String_Node_Str"");
  Image save2=save.getImage().getScaledInstance(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT,1);
  ImageIcon evolve=new ImageIcon(""String_Node_Str"");
  Image evolve2=evolve.getImage().getScaledInstance(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT,1);
  ImageIcon close=new ImageIcon(""String_Node_Str"");
  Image close2=close.getImage().getScaledInstance(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT,1);
  ImageIcon lineage=new ImageIcon(""String_Node_Str"");
  Image lineage2=lineage.getImage().getScaledInstance(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT,1);
  ImageIcon network=new ImageIcon(""String_Node_Str"");
  Image network2=network.getImage().getScaledInstance(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT,1);
  ImageIcon undo=new ImageIcon(""String_Node_Str"");
  Image undo2=undo.getImage().getScaledInstance(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT,1);
  JButton resetButton=new JButton(new ImageIcon(reset2));
  JButton saveButton=new JButton(new ImageIcon(save2));
  JButton evolveButton=new JButton(new ImageIcon(evolve2));
  JButton closeButton=new JButton(new ImageIcon(close2));
  JButton lineageButton=new JButton(new ImageIcon(lineage2));
  JButton networkButton=new JButton(new ImageIcon(network2));
  JButton undoButton=new JButton(new ImageIcon(undo2));
  resetButton.setPreferredSize(new Dimension(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT));
  saveButton.setPreferredSize(new Dimension(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT));
  evolveButton.setPreferredSize(new Dimension(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT));
  lineageButton.setPreferredSize(new Dimension(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT));
  networkButton.setPreferredSize(new Dimension(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT));
  undoButton.setPreferredSize(new Dimension(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT));
  closeButton.setPreferredSize(new Dimension(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT));
  resetButton.setText(""String_Node_Str"");
  saveButton.setText(""String_Node_Str"");
  evolveButton.setText(""String_Node_Str"");
  lineageButton.setText(""String_Node_Str"");
  networkButton.setText(""String_Node_Str"");
  undoButton.setText(""String_Node_Str"");
  closeButton.setText(""String_Node_Str"");
  JCheckBox sigmoid=new JCheckBox(""String_Node_Str"",CommonConstants.includeSigmoidFunction);
  activation[Math.abs(SIGMOID_CHECKBOX_INDEX)]=CommonConstants.includeSigmoidFunction;
  JCheckBox tanh=new JCheckBox(""String_Node_Str"",CommonConstants.includeTanhFunction);
  activation[Math.abs(TANH_CHECKBOX_INDEX)]=CommonConstants.includeTanhFunction;
  JCheckBox id=new JCheckBox(""String_Node_Str"",CommonConstants.includeIdFunction);
  activation[Math.abs(ID_CHECKBOX_INDEX)]=CommonConstants.includeIdFunction;
  JCheckBox fullApprox=new JCheckBox(""String_Node_Str"",CommonConstants.includeFullApproxFunction);
  activation[Math.abs(FULLAPPROX_CHECKBOX_INDEX)]=CommonConstants.includeFullApproxFunction;
  JCheckBox approx=new JCheckBox(""String_Node_Str"",CommonConstants.includeApproxFunction);
  activation[Math.abs(APPROX_CHECKBOX_INDEX)]=CommonConstants.includeApproxFunction;
  JCheckBox gaussian=new JCheckBox(""String_Node_Str"",CommonConstants.includeGaussFunction);
  activation[Math.abs(GAUSSIAN_CHECKBOX_INDEX)]=CommonConstants.includeGaussFunction;
  JCheckBox sine=new JCheckBox(""String_Node_Str"",CommonConstants.includeSineFunction);
  activation[Math.abs(SINE_CHECKBOX_INDEX)]=CommonConstants.includeSineFunction;
  JCheckBox sawtooth=new JCheckBox(""String_Node_Str"",CommonConstants.includeSawtoothFunction);
  activation[Math.abs(SAWTOOTH_CHECKBOX_INDEX)]=CommonConstants.includeSawtoothFunction;
  JCheckBox absVal=new JCheckBox(""String_Node_Str"",CommonConstants.includeAbsValFunction);
  activation[Math.abs(ABSVAL_CHECKBOX_INDEX)]=CommonConstants.includeAbsValFunction;
  JCheckBox halfLinear=new JCheckBox(""String_Node_Str"",CommonConstants.includeHalfLinearPiecewiseFunction);
  activation[Math.abs(HALF_LINEAR_CHECKBOX_INDEX)]=CommonConstants.includeHalfLinearPiecewiseFunction;
  JCheckBox stretchTanh=new JCheckBox(""String_Node_Str"",CommonConstants.includeStretchedTanhFunction);
  activation[Math.abs(STRETCHTANH_CHECKBOX_INDEX)]=CommonConstants.includeStretchedTanhFunction;
  JCheckBox ReLU=new JCheckBox(""String_Node_Str"",CommonConstants.includeReLUFunction);
  activation[Math.abs(RELU_CHECKBOX_INDEX)]=CommonConstants.includeReLUFunction;
  JCheckBox Softplus=new JCheckBox(""String_Node_Str"",CommonConstants.includeSoftplusFunction);
  activation[Math.abs(SOFTPLUS_CHECKBOX_INDEX)]=CommonConstants.includeSoftplusFunction;
  JCheckBox LeakyReLU=new JCheckBox(""String_Node_Str"",CommonConstants.includeLeakyReLUFunction);
  activation[Math.abs(LEAKY_RELU_CHECKBOX_INDEX)]=CommonConstants.includeLeakyReLUFunction;
  JCheckBox fullSawtooth=new JCheckBox(""String_Node_Str"",CommonConstants.includeFullSawtoothFunction);
  activation[Math.abs(FULL_SAWTOOTH_CHECKBOX_INDEX)]=CommonConstants.includeFullSawtoothFunction;
  JCheckBox triangleWave=new JCheckBox(""String_Node_Str"",CommonConstants.includeTriangleWaveFunction);
  activation[Math.abs(TRIANGLE_WAVE_CHECKBOX_INDEX)]=CommonConstants.includeTriangleWaveFunction;
  JCheckBox squareWave=new JCheckBox(""String_Node_Str"",CommonConstants.includeSquareWaveFunction);
  activation[Math.abs(SQUARE_WAVE_CHECKBOX_INDEX)]=CommonConstants.includeSquareWaveFunction;
  JSlider mutationsPerGeneration=new JSlider(JSlider.HORIZONTAL,MPG_MIN,MPG_MAX,MPG_DEFAULT);
  Hashtable labels=new Hashtable();
  evolveButton.setName(""String_Node_Str"" + EVOLVE_BUTTON_INDEX);
  evolveButton.setToolTipText(""String_Node_Str"");
  saveButton.setName(""String_Node_Str"" + SAVE_BUTTON_INDEX);
  saveButton.setToolTipText(""String_Node_Str"");
  resetButton.setName(""String_Node_Str"" + RESET_BUTTON_INDEX);
  resetButton.setToolTipText(""String_Node_Str"");
  closeButton.setName(""String_Node_Str"" + CLOSE_BUTTON_INDEX);
  closeButton.setToolTipText(""String_Node_Str"");
  lineageButton.setName(""String_Node_Str"" + LINEAGE_BUTTON_INDEX);
  lineageButton.setToolTipText(""String_Node_Str"");
  networkButton.setName(""String_Node_Str"" + NETWORK_BUTTON_INDEX);
  networkButton.setToolTipText(""String_Node_Str"");
  undoButton.setName(""String_Node_Str"" + UNDO_BUTTON_INDEX);
  undoButton.setToolTipText(""String_Node_Str"");
  sigmoid.setName(""String_Node_Str"" + SIGMOID_CHECKBOX_INDEX);
  tanh.setName(""String_Node_Str"" + TANH_CHECKBOX_INDEX);
  absVal.setName(""String_Node_Str"" + ABSVAL_CHECKBOX_INDEX);
  id.setName(""String_Node_Str"" + ID_CHECKBOX_INDEX);
  gaussian.setName(""String_Node_Str"" + GAUSSIAN_CHECKBOX_INDEX);
  fullApprox.setName(""String_Node_Str"" + FULLAPPROX_CHECKBOX_INDEX);
  sine.setName(""String_Node_Str"" + SINE_CHECKBOX_INDEX);
  approx.setName(""String_Node_Str"" + APPROX_CHECKBOX_INDEX);
  sawtooth.setName(""String_Node_Str"" + SAWTOOTH_CHECKBOX_INDEX);
  halfLinear.setName(""String_Node_Str"" + HALF_LINEAR_CHECKBOX_INDEX);
  stretchTanh.setName(""String_Node_Str"" + STRETCHTANH_CHECKBOX_INDEX);
  ReLU.setName(""String_Node_Str"" + RELU_CHECKBOX_INDEX);
  Softplus.setName(""String_Node_Str"" + SOFTPLUS_CHECKBOX_INDEX);
  LeakyReLU.setName(""String_Node_Str"" + LEAKY_RELU_CHECKBOX_INDEX);
  fullSawtooth.setName(""String_Node_Str"" + FULL_SAWTOOTH_CHECKBOX_INDEX);
  triangleWave.setName(""String_Node_Str"" + TRIANGLE_WAVE_CHECKBOX_INDEX);
  squareWave.setName(""String_Node_Str"" + SQUARE_WAVE_CHECKBOX_INDEX);
  mutationsPerGeneration.setMinorTickSpacing(1);
  mutationsPerGeneration.setPaintTicks(true);
  labels.put(0,new JLabel(""String_Node_Str""));
  labels.put(10,new JLabel(""String_Node_Str""));
  mutationsPerGeneration.setLabelTable(labels);
  mutationsPerGeneration.setPaintLabels(true);
  mutationsPerGeneration.setPreferredSize(new Dimension(350,40));
  resetButton.addActionListener(this);
  saveButton.addActionListener(this);
  evolveButton.addActionListener(this);
  closeButton.addActionListener(this);
  lineageButton.addActionListener(this);
  networkButton.addActionListener(this);
  undoButton.addActionListener(this);
  sigmoid.addActionListener(this);
  gaussian.addActionListener(this);
  sine.addActionListener(this);
  sawtooth.addActionListener(this);
  absVal.addActionListener(this);
  halfLinear.addActionListener(this);
  tanh.addActionListener(this);
  id.addActionListener(this);
  fullApprox.addActionListener(this);
  approx.addActionListener(this);
  stretchTanh.addActionListener(this);
  ReLU.addActionListener(this);
  Softplus.addActionListener(this);
  LeakyReLU.addActionListener(this);
  fullSawtooth.addActionListener(this);
  triangleWave.addActionListener(this);
  squareWave.addActionListener(this);
  mutationsPerGeneration.addChangeListener(this);
  sigmoid.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_SIGMOID));
  absVal.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_ABSVAL));
  approx.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_APPROX));
  fullApprox.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_FULLAPPROX));
  gaussian.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_GAUSS));
  halfLinear.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_HLPIECEWISE));
  id.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_ID));
  sawtooth.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_SAWTOOTH));
  sine.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_SINE));
  tanh.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_TANH));
  stretchTanh.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_STRETCHED_TANH));
  ReLU.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_RE_LU));
  Softplus.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_SOFTPLUS));
  LeakyReLU.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_LEAKY_RE_LU));
  fullSawtooth.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_FULLSAWTOOTH));
  triangleWave.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_TRIANGLEWAVE));
  squareWave.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_SQUAREWAVE));
  top.add(lineageButton);
  top.add(resetButton);
  top.add(networkButton);
  top.add(evolveButton);
  top.add(saveButton);
  top.add(undoButton);
  top.add(closeButton);
  top.add(mutationsPerGeneration);
  topper.add(top);
  bottom.add(halfLinear);
  bottom.add(absVal);
  bottom.add(sawtooth);
  bottom.add(sine);
  bottom.add(gaussian);
  bottom.add(sigmoid);
  bottom.add(tanh);
  bottom.add(id);
  bottom.add(fullApprox);
  bottom.add(approx);
  bottom.add(stretchTanh);
  bottom.add(ReLU);
  bottom.add(Softplus);
  bottom.add(LeakyReLU);
  bottom.add(fullSawtooth);
  bottom.add(triangleWave);
  bottom.add(squareWave);
  topper.add(bottom);
  panels.add(topper);
  addButtonPanels();
  for (  JPanel panel : panels)   frame.add(panel);
  int x=0;
  addButtonsToPanel(x++);
}","/** 
 * Default Constructor
 * @throws IllegalAccessException 
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public InteractiveEvolutionTask() throws IllegalAccessException {
  MMNEAT.registerFitnessFunction(""String_Node_Str"");
  if (Parameters.parameters.integerParameter(""String_Node_Str"") % InteractiveEvolutionTask.NUM_COLUMNS != 0) {
    Parameters.parameters.setInteger(""String_Node_Str"",InteractiveEvolutionTask.NUM_COLUMNS * ((Parameters.parameters.integerParameter(""String_Node_Str"") / InteractiveEvolutionTask.NUM_COLUMNS) + 1));
    System.out.println(""String_Node_Str"" + Parameters.parameters.integerParameter(""String_Node_Str""));
  }
  numButtonOptions=Parameters.parameters.integerParameter(""String_Node_Str"");
  numRows=numButtonOptions / NUM_COLUMNS;
  picSize=Parameters.parameters.integerParameter(""String_Node_Str"");
  chosen=new boolean[numButtonOptions];
  showLineage=false;
  showNetwork=false;
  waitingForUser=false;
  activation=new boolean[Math.abs(SQUARE_WAVE_CHECKBOX_INDEX) + 1];
  Arrays.fill(activation,true);
  if (MMNEAT.browseLineage) {
    return;
  }
  frame=new JFrame(getWindowTitle());
  panels=new ArrayList<JPanel>();
  buttons=new ArrayList<JButton>();
  frame.setSize(Toolkit.getDefaultToolkit().getScreenSize());
  picSize=Math.min(picSize,frame.getWidth() / NUM_COLUMNS);
  frame.setLocation(300,100);
  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  frame.setLayout(new GridLayout(numRows + 1,0));
  frame.setVisible(true);
  topper=new JPanel();
  top=new JPanel();
  JPanel bottom=new JPanel();
  ImageIcon reset=new ImageIcon(""String_Node_Str"");
  Image reset2=reset.getImage().getScaledInstance(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT,1);
  ImageIcon save=new ImageIcon(""String_Node_Str"");
  Image save2=save.getImage().getScaledInstance(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT,1);
  ImageIcon evolve=new ImageIcon(""String_Node_Str"");
  Image evolve2=evolve.getImage().getScaledInstance(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT,1);
  ImageIcon close=new ImageIcon(""String_Node_Str"");
  Image close2=close.getImage().getScaledInstance(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT,1);
  ImageIcon lineage=new ImageIcon(""String_Node_Str"");
  Image lineage2=lineage.getImage().getScaledInstance(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT,1);
  ImageIcon network=new ImageIcon(""String_Node_Str"");
  Image network2=network.getImage().getScaledInstance(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT,1);
  ImageIcon undo=new ImageIcon(""String_Node_Str"");
  Image undo2=undo.getImage().getScaledInstance(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT,1);
  JButton resetButton=new JButton(new ImageIcon(reset2));
  JButton saveButton=new JButton(new ImageIcon(save2));
  JButton evolveButton=new JButton(new ImageIcon(evolve2));
  JButton closeButton=new JButton(new ImageIcon(close2));
  JButton lineageButton=new JButton(new ImageIcon(lineage2));
  JButton networkButton=new JButton(new ImageIcon(network2));
  JButton undoButton=new JButton(new ImageIcon(undo2));
  resetButton.setPreferredSize(new Dimension(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT));
  saveButton.setPreferredSize(new Dimension(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT));
  evolveButton.setPreferredSize(new Dimension(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT));
  lineageButton.setPreferredSize(new Dimension(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT));
  networkButton.setPreferredSize(new Dimension(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT));
  undoButton.setPreferredSize(new Dimension(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT));
  closeButton.setPreferredSize(new Dimension(ACTION_BUTTON_WIDTH,ACTION_BUTTON_HEIGHT));
  resetButton.setText(""String_Node_Str"");
  saveButton.setText(""String_Node_Str"");
  evolveButton.setText(""String_Node_Str"");
  lineageButton.setText(""String_Node_Str"");
  networkButton.setText(""String_Node_Str"");
  undoButton.setText(""String_Node_Str"");
  closeButton.setText(""String_Node_Str"");
  JCheckBox sigmoid=new JCheckBox(""String_Node_Str"",CommonConstants.includeSigmoidFunction);
  activation[Math.abs(SIGMOID_CHECKBOX_INDEX)]=CommonConstants.includeSigmoidFunction;
  JCheckBox tanh=new JCheckBox(""String_Node_Str"",CommonConstants.includeTanhFunction);
  activation[Math.abs(TANH_CHECKBOX_INDEX)]=CommonConstants.includeTanhFunction;
  JCheckBox id=new JCheckBox(""String_Node_Str"",CommonConstants.includeIdFunction);
  activation[Math.abs(ID_CHECKBOX_INDEX)]=CommonConstants.includeIdFunction;
  JCheckBox fullApprox=new JCheckBox(""String_Node_Str"",CommonConstants.includeFullApproxFunction);
  activation[Math.abs(FULLAPPROX_CHECKBOX_INDEX)]=CommonConstants.includeFullApproxFunction;
  JCheckBox approx=new JCheckBox(""String_Node_Str"",CommonConstants.includeApproxFunction);
  activation[Math.abs(APPROX_CHECKBOX_INDEX)]=CommonConstants.includeApproxFunction;
  JCheckBox gaussian=new JCheckBox(""String_Node_Str"",CommonConstants.includeGaussFunction);
  activation[Math.abs(GAUSSIAN_CHECKBOX_INDEX)]=CommonConstants.includeGaussFunction;
  JCheckBox sine=new JCheckBox(""String_Node_Str"",CommonConstants.includeSineFunction);
  activation[Math.abs(SINE_CHECKBOX_INDEX)]=CommonConstants.includeSineFunction;
  JCheckBox sawtooth=new JCheckBox(""String_Node_Str"",CommonConstants.includeSawtoothFunction);
  activation[Math.abs(SAWTOOTH_CHECKBOX_INDEX)]=CommonConstants.includeSawtoothFunction;
  JCheckBox absVal=new JCheckBox(""String_Node_Str"",CommonConstants.includeAbsValFunction);
  activation[Math.abs(ABSVAL_CHECKBOX_INDEX)]=CommonConstants.includeAbsValFunction;
  JCheckBox halfLinear=new JCheckBox(""String_Node_Str"",CommonConstants.includeHalfLinearPiecewiseFunction);
  activation[Math.abs(HALF_LINEAR_CHECKBOX_INDEX)]=CommonConstants.includeHalfLinearPiecewiseFunction;
  JCheckBox stretchTanh=new JCheckBox(""String_Node_Str"",CommonConstants.includeStretchedTanhFunction);
  activation[Math.abs(STRETCHTANH_CHECKBOX_INDEX)]=CommonConstants.includeStretchedTanhFunction;
  JCheckBox ReLU=new JCheckBox(""String_Node_Str"",CommonConstants.includeReLUFunction);
  activation[Math.abs(RELU_CHECKBOX_INDEX)]=CommonConstants.includeReLUFunction;
  JCheckBox Softplus=new JCheckBox(""String_Node_Str"",CommonConstants.includeSoftplusFunction);
  activation[Math.abs(SOFTPLUS_CHECKBOX_INDEX)]=CommonConstants.includeSoftplusFunction;
  JCheckBox LeakyReLU=new JCheckBox(""String_Node_Str"",CommonConstants.includeLeakyReLUFunction);
  activation[Math.abs(LEAKY_RELU_CHECKBOX_INDEX)]=CommonConstants.includeLeakyReLUFunction;
  JCheckBox fullSawtooth=new JCheckBox(""String_Node_Str"",CommonConstants.includeFullSawtoothFunction);
  activation[Math.abs(FULL_SAWTOOTH_CHECKBOX_INDEX)]=CommonConstants.includeFullSawtoothFunction;
  JCheckBox triangleWave=new JCheckBox(""String_Node_Str"",CommonConstants.includeTriangleWaveFunction);
  activation[Math.abs(TRIANGLE_WAVE_CHECKBOX_INDEX)]=CommonConstants.includeTriangleWaveFunction;
  JCheckBox squareWave=new JCheckBox(""String_Node_Str"",CommonConstants.includeSquareWaveFunction);
  activation[Math.abs(SQUARE_WAVE_CHECKBOX_INDEX)]=CommonConstants.includeSquareWaveFunction;
  JSlider mutationsPerGeneration=new JSlider(JSlider.HORIZONTAL,MPG_MIN,MPG_MAX,MPG_DEFAULT);
  Hashtable labels=new Hashtable();
  evolveButton.setName(""String_Node_Str"" + EVOLVE_BUTTON_INDEX);
  evolveButton.setToolTipText(""String_Node_Str"");
  saveButton.setName(""String_Node_Str"" + SAVE_BUTTON_INDEX);
  saveButton.setToolTipText(""String_Node_Str"");
  resetButton.setName(""String_Node_Str"" + RESET_BUTTON_INDEX);
  resetButton.setToolTipText(""String_Node_Str"");
  closeButton.setName(""String_Node_Str"" + CLOSE_BUTTON_INDEX);
  closeButton.setToolTipText(""String_Node_Str"");
  lineageButton.setName(""String_Node_Str"" + LINEAGE_BUTTON_INDEX);
  lineageButton.setToolTipText(""String_Node_Str"");
  networkButton.setName(""String_Node_Str"" + NETWORK_BUTTON_INDEX);
  networkButton.setToolTipText(""String_Node_Str"");
  undoButton.setName(""String_Node_Str"" + UNDO_BUTTON_INDEX);
  undoButton.setToolTipText(""String_Node_Str"");
  sigmoid.setName(""String_Node_Str"" + SIGMOID_CHECKBOX_INDEX);
  tanh.setName(""String_Node_Str"" + TANH_CHECKBOX_INDEX);
  absVal.setName(""String_Node_Str"" + ABSVAL_CHECKBOX_INDEX);
  id.setName(""String_Node_Str"" + ID_CHECKBOX_INDEX);
  gaussian.setName(""String_Node_Str"" + GAUSSIAN_CHECKBOX_INDEX);
  fullApprox.setName(""String_Node_Str"" + FULLAPPROX_CHECKBOX_INDEX);
  sine.setName(""String_Node_Str"" + SINE_CHECKBOX_INDEX);
  approx.setName(""String_Node_Str"" + APPROX_CHECKBOX_INDEX);
  sawtooth.setName(""String_Node_Str"" + SAWTOOTH_CHECKBOX_INDEX);
  halfLinear.setName(""String_Node_Str"" + HALF_LINEAR_CHECKBOX_INDEX);
  stretchTanh.setName(""String_Node_Str"" + STRETCHTANH_CHECKBOX_INDEX);
  ReLU.setName(""String_Node_Str"" + RELU_CHECKBOX_INDEX);
  Softplus.setName(""String_Node_Str"" + SOFTPLUS_CHECKBOX_INDEX);
  LeakyReLU.setName(""String_Node_Str"" + LEAKY_RELU_CHECKBOX_INDEX);
  fullSawtooth.setName(""String_Node_Str"" + FULL_SAWTOOTH_CHECKBOX_INDEX);
  triangleWave.setName(""String_Node_Str"" + TRIANGLE_WAVE_CHECKBOX_INDEX);
  squareWave.setName(""String_Node_Str"" + SQUARE_WAVE_CHECKBOX_INDEX);
  mutationsPerGeneration.setMinorTickSpacing(1);
  mutationsPerGeneration.setPaintTicks(true);
  labels.put(0,new JLabel(""String_Node_Str""));
  labels.put(10,new JLabel(""String_Node_Str""));
  mutationsPerGeneration.setLabelTable(labels);
  mutationsPerGeneration.setPaintLabels(true);
  mutationsPerGeneration.setPreferredSize(new Dimension(350,40));
  resetButton.addActionListener(this);
  saveButton.addActionListener(this);
  evolveButton.addActionListener(this);
  closeButton.addActionListener(this);
  lineageButton.addActionListener(this);
  networkButton.addActionListener(this);
  undoButton.addActionListener(this);
  sigmoid.addActionListener(this);
  gaussian.addActionListener(this);
  sine.addActionListener(this);
  sawtooth.addActionListener(this);
  absVal.addActionListener(this);
  halfLinear.addActionListener(this);
  tanh.addActionListener(this);
  id.addActionListener(this);
  fullApprox.addActionListener(this);
  approx.addActionListener(this);
  stretchTanh.addActionListener(this);
  ReLU.addActionListener(this);
  Softplus.addActionListener(this);
  LeakyReLU.addActionListener(this);
  fullSawtooth.addActionListener(this);
  triangleWave.addActionListener(this);
  squareWave.addActionListener(this);
  mutationsPerGeneration.addChangeListener(this);
  sigmoid.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_SIGMOID));
  absVal.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_ABSVAL));
  approx.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_APPROX));
  fullApprox.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_FULLAPPROX));
  gaussian.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_GAUSS));
  halfLinear.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_HLPIECEWISE));
  id.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_ID));
  sawtooth.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_SAWTOOTH));
  sine.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_SINE));
  tanh.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_TANH));
  stretchTanh.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_STRETCHED_TANH));
  ReLU.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_RE_LU));
  Softplus.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_SOFTPLUS));
  LeakyReLU.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_LEAKY_RE_LU));
  fullSawtooth.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_FULLSAWTOOTH));
  triangleWave.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_TRIANGLEWAVE));
  squareWave.setForeground(CombinatoricUtilities.colorFromInt(ActivationFunctions.FTYPE_SQUAREWAVE));
  top.add(lineageButton);
  top.add(resetButton);
  top.add(networkButton);
  top.add(evolveButton);
  top.add(saveButton);
  top.add(undoButton);
  top.add(closeButton);
  top.add(mutationsPerGeneration);
  topper.add(top);
  bottom.add(halfLinear);
  bottom.add(absVal);
  bottom.add(sawtooth);
  bottom.add(sine);
  bottom.add(gaussian);
  bottom.add(sigmoid);
  bottom.add(tanh);
  bottom.add(id);
  bottom.add(fullApprox);
  bottom.add(approx);
  bottom.add(stretchTanh);
  bottom.add(ReLU);
  bottom.add(Softplus);
  bottom.add(LeakyReLU);
  bottom.add(fullSawtooth);
  bottom.add(triangleWave);
  bottom.add(squareWave);
  topper.add(bottom);
  panels.add(topper);
  addButtonPanels();
  for (  JPanel panel : panels)   frame.add(panel);
  int x=0;
  addButtonsToPanel(x++);
}"
39230,"/** 
 * Evaluates a given individual network's Fitness; If the CommonConstants Watch variable is set to ""True,"" runs a visual evaluation, Else runs a non-visual evaluation
 * @param individual Genotype<T> specifying a Network to be evaluated
 * @param num Integer value
 * @return Pair of Double Arrays that show the Fitness of an individual network
 */
@Override public Pair<double[],double[]> oneEval(Genotype<T> individual,int num){
  PinBall p=new PinBall(""String_Node_Str"" + Parameters.parameters.stringParameter(""String_Node_Str""));
  if (CommonConstants.watch) {
    if (view != null) {
      view.dispose();
      view=null;
    }
    view=new PinballViewer(p);
    view.setVisible(true);
    view.setAlwaysOnTop(true);
  }
  Network n=individual.getPhenotype();
  double fitness=0;
  int timeLimit=1000;
  do {
    State s=p.getState();
    double[] sensors=s.getDescriptor();
    double[] outputs=n.process(sensors);
    int action=StatisticsUtilities.argmax(outputs);
    double rew=p.step(action);
    if (view != null) {
      view.repaint();
      try {
        Thread.sleep(1);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        System.out.print(""String_Node_Str"");
        MiscUtil.waitForReadStringAndEnterKeyPress();
      }
    }
    fitness+=rew;
    timeLimit--;
  }
 while (!p.episodeEnd() && timeLimit > 0);
  Double distance=p.getBall().getCenter().distanceTo(p.getTarget().getCenter());
  Pair<double[],double[]> evalResults=new Pair<double[],double[]>(new double[]{fitness},new double[0]);
  if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    evalResults=new Pair<double[],double[]>(new double[]{fitness,distance},new double[0]);
  }
 else {
    evalResults=new Pair<double[],double[]>(new double[]{fitness},new double[0]);
  }
  return evalResults;
}","/** 
 * Evaluates a given individual network's Fitness; If the CommonConstants Watch variable is set to ""True,"" runs a visual evaluation, Else runs a non-visual evaluation
 * @param individual Genotype<T> specifying a Network to be evaluated
 * @param num Integer value
 * @return Pair of Double Arrays that show the Fitness of an individual network
 */
@Override public Pair<double[],double[]> oneEval(Genotype<T> individual,int num){
  PinBall p=new PinBall(""String_Node_Str"" + Parameters.parameters.stringParameter(""String_Node_Str""));
  if (CommonConstants.watch) {
    if (view != null) {
      view.dispose();
      view=null;
    }
    view=new PinballViewer(p);
    view.setVisible(true);
    view.setAlwaysOnTop(true);
  }
  Network n=individual.getPhenotype();
  double fitness=0;
  int timeLimit=1000;
  do {
    State s=p.getState();
    double[] sensors=s.getDescriptor();
    double[] outputs=n.process(sensors);
    int action=StatisticsUtilities.argmax(outputs);
    double rew=p.step(action);
    if (view != null) {
      view.repaint();
      try {
        Thread.sleep(1);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        System.out.print(""String_Node_Str"");
        MiscUtil.waitForReadStringAndEnterKeyPress();
      }
    }
    fitness+=rew;
    timeLimit--;
  }
 while (!p.episodeEnd() && timeLimit > 0);
  Double distance=p.getBall().getCenter().distanceTo(p.getTarget().getCenter());
  Pair<double[],double[]> evalResults=new Pair<double[],double[]>(new double[]{fitness},new double[0]);
  if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    evalResults=new Pair<double[],double[]>(new double[]{fitness,-distance},new double[0]);
  }
 else {
    evalResults=new Pair<double[],double[]>(new double[]{fitness},new double[0]);
  }
  return evalResults;
}"
39231,"/** 
 * Returns the number of Objectives for the PinballTask
 * @return 1, The number of Objectives for the PinballTask
 */
@Override public int numObjectives(){
  return 1;
}","/** 
 * Returns the number of Objectives for the PinballTask
 * @return 1, The number of Objectives for the PinballTask
 */
@Override public int numObjectives(){
  if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    return 2;
  }
 else {
    return 1;
  }
}"
39232,"/** 
 * @param offspringScore
 * @param g1
 * @param bestScore
 * @param g2
 * @param drawingPanel
 * @param objective
 */
private static void drawScoreSegment(double offspringScore,int g1,double bestScore,int g2,DrawingPanel drawingPanel,int objective){
  int offset=Plot.OFFSET;
  Graphics2D g=drawingPanel.getGraphics();
  g.setColor(Color.red);
  double max=maxes.get(objective);
  double min=mins.get(objective);
  double maxRange=Math.max(max,max - min);
  double lowerMin=Math.min(0,min);
  int x1=offset + Plot.scale(g1,bestScores[objective].length * 1.0,0);
  int y1=offset + Plot.invert(offspringScore,maxRange,lowerMin);
  int x2=offset + Plot.scale(g2,bestScores[objective].length * 1.0,0);
  int y2=offset + Plot.invert(bestScore,maxRange,lowerMin);
  g.drawLine(x1,y1,x2,y2);
}","/** 
 * @param offspringScore
 * @param g1
 * @param bestScore
 * @param g2
 * @param drawingPanel
 * @param objective
 */
private static void drawScoreSegment(double offspringScore,int g1,double bestScore,int g2,DrawingPanel drawingPanel,int objective){
  int offset=Plot.OFFSET;
  Graphics2D g=drawingPanel.getGraphics();
  g.setColor(Color.red);
  double max=maxes.get(objective);
  double min=mins.get(objective);
  double maxRange=Math.max(max,max - min);
  double lowerMin=Math.min(0,min);
  int x1=offset + GraphicsUtil.scale(g1,bestScores[objective].length * 1.0,0);
  int y1=offset + GraphicsUtil.invert(offspringScore,maxRange,lowerMin);
  int x2=offset + GraphicsUtil.scale(g2,bestScores[objective].length * 1.0,0);
  int y2=offset + GraphicsUtil.invert(bestScore,maxRange,lowerMin);
  g.drawLine(x1,y1,x2,y2);
}"
39233,"/** 
 * @param x
 * @param index
 * @return
 */
private static int scale(double x,int index){
  return Plot.scale(x,maxes.get(index) - mins.get(index),mins.get(index));
}","/** 
 * @param x
 * @param index
 * @return
 */
private static int scale(double x,int index){
  return GraphicsUtil.scale(x,maxes.get(index) - mins.get(index),mins.get(index));
}"
39234,"/** 
 * @param panel
 * @param gen
 * @param objective
 * @param scores
 * @param focus
 */
public static void plotBestsWorsts(DrawingPanel panel,int gen,int objective,ArrayList<ArrayList<Double>> scores,int focus){
  int offset=Plot.OFFSET;
  int browseDim=Plot.BROWSE_DIM;
  int ovalDim=Plot.OVAL_DIM;
  Graphics g=panel.getGraphics();
  g.setColor(Color.black);
  g.drawLine(offset,offset,offset,browseDim - offset);
  g.drawLine(offset,browseDim - offset,browseDim - offset,browseDim - offset);
  double max=maxes.get(objective);
  double min=mins.get(objective);
  double maxRange=Math.max(max,max - min);
  double lowerMin=Math.min(0,min);
  for (int i=0; i < bestScores[objective].length; i++) {
    g.setColor(Color.blue);
    g.fillRect(offset + Plot.scale(i,bestScores[objective].length * 1.0,0),offset + Plot.invert(bestScores[objective][i],maxRange,lowerMin),1,1);
    g.setColor(Color.magenta);
    g.fillRect(offset + Plot.scale(i,worstScores[objective].length * 1.0,0),offset + Plot.invert(worstScores[objective][i],maxRange,lowerMin),1,1);
  }
  g.setColor(Color.black);
  g.drawString(""String_Node_Str"" + max,offset / 2,offset / 2);
  g.drawString(""String_Node_Str"" + lowerMin,offset / 2,browseDim - (offset / 2));
  g.setColor(Color.green);
  g.fillRect(offset + Plot.scale(gen,bestScores[objective].length * 1.0,0),offset + Plot.invert(scores.get(focus).get(objective),maxRange,lowerMin),ovalDim,ovalDim);
  g.setColor(Color.cyan);
  for (int i=0; i < scores.size(); i++) {
    if (i != focus) {
      g.drawOval(offset + Plot.scale(gen,bestScores[objective].length * 1.0,0),offset + Plot.invert(scores.get(i).get(objective),maxRange,lowerMin),ovalDim,ovalDim);
    }
  }
  if (tugGoals != null) {
    for (int i=0; i < tugGoals[objective].length; i++) {
      g.setColor(Color.green);
      g.fillRect(offset + Plot.scale(i,bestScores[objective].length * 1.0,0),offset + Plot.invert(tugGoals[objective][i],maxRange,lowerMin),1,1);
    }
  }
}","/** 
 * @param panel
 * @param gen
 * @param objective
 * @param scores
 * @param focus
 */
public static void plotBestsWorsts(DrawingPanel panel,int gen,int objective,ArrayList<ArrayList<Double>> scores,int focus){
  int offset=Plot.OFFSET;
  int browseDim=Plot.BROWSE_DIM;
  int ovalDim=Plot.OVAL_DIM;
  Graphics g=panel.getGraphics();
  g.setColor(Color.black);
  g.drawLine(offset,offset,offset,browseDim - offset);
  g.drawLine(offset,browseDim - offset,browseDim - offset,browseDim - offset);
  double max=maxes.get(objective);
  double min=mins.get(objective);
  double maxRange=Math.max(max,max - min);
  double lowerMin=Math.min(0,min);
  for (int i=0; i < bestScores[objective].length; i++) {
    g.setColor(Color.blue);
    g.fillRect(offset + GraphicsUtil.scale(i,bestScores[objective].length * 1.0,0),offset + GraphicsUtil.invert(bestScores[objective][i],maxRange,lowerMin),1,1);
    g.setColor(Color.magenta);
    g.fillRect(offset + GraphicsUtil.scale(i,worstScores[objective].length * 1.0,0),offset + GraphicsUtil.invert(worstScores[objective][i],maxRange,lowerMin),1,1);
  }
  g.setColor(Color.black);
  g.drawString(""String_Node_Str"" + max,offset / 2,offset / 2);
  g.drawString(""String_Node_Str"" + lowerMin,offset / 2,browseDim - (offset / 2));
  g.setColor(Color.green);
  g.fillRect(offset + GraphicsUtil.scale(gen,bestScores[objective].length * 1.0,0),offset + GraphicsUtil.invert(scores.get(focus).get(objective),maxRange,lowerMin),ovalDim,ovalDim);
  g.setColor(Color.cyan);
  for (int i=0; i < scores.size(); i++) {
    if (i != focus) {
      g.drawOval(offset + GraphicsUtil.scale(gen,bestScores[objective].length * 1.0,0),offset + GraphicsUtil.invert(scores.get(i).get(objective),maxRange,lowerMin),ovalDim,ovalDim);
    }
  }
  if (tugGoals != null) {
    for (int i=0; i < tugGoals[objective].length; i++) {
      g.setColor(Color.green);
      g.fillRect(offset + GraphicsUtil.scale(i,bestScores[objective].length * 1.0,0),offset + GraphicsUtil.invert(tugGoals[objective][i],maxRange,lowerMin),1,1);
    }
  }
}"
39235,"/** 
 * Given the whole population, log several summary statistics.
 * @param scores Population of scores from this generation
 * @param generation Particular generation being logged
 */
private void logStats(ArrayList<Score<T>> scores,int generation){
  double[][] nextStage=new double[scores.size()][];
  for (int i=0; i < scores.size(); i++) {
    Score<T> s=scores.get(i);
    double[] combined=new double[s.scores.length + s.otherStats.length];
    System.arraycopy(s.scores,0,combined,0,s.scores.length);
    System.arraycopy(s.otherStats,0,combined,s.scores.length,s.otherStats.length);
    nextStage[i]=combined;
  }
  logAverages(nextStage,generation);
  if (draw) {
    int objectives=nextStage[0].length;
    if (panels == null) {
      initPanels(objectives);
    }
    for (int i=0; i < objectives; i++) {
      panels[i].clear();
      Plot.linePlot(panels[i],overallMins[i],overallMaxes[i],allMaxes.get(i),Color.magenta);
      Plot.linePlot(panels[i],overallMins[i],overallMaxes[i],allAverages.get(i),Color.blue);
      Plot.linePlot(panels[i],overallMins[i],overallMaxes[i],allMins.get(i),Color.green);
    }
  }
}","/** 
 * Given the whole population, log several summary statistics.
 * @param scores Population of scores from this generation
 * @param generation Particular generation being logged
 */
private void logStats(ArrayList<Score<T>> scores,int generation){
  double[][] nextStage=new double[scores.size()][];
  for (int i=0; i < scores.size(); i++) {
    Score<T> s=scores.get(i);
    double[] combined=new double[s.scores.length + s.otherStats.length];
    System.arraycopy(s.scores,0,combined,0,s.scores.length);
    System.arraycopy(s.otherStats,0,combined,s.scores.length,s.otherStats.length);
    nextStage[i]=combined;
  }
  logAverages(nextStage,generation);
  if (draw) {
    int objectives=nextStage[0].length;
    if (panels == null) {
      initPanels(objectives);
    }
    for (int i=0; i < objectives; i++) {
      panels[i].clear();
      GraphicsUtil.linePlot(panels[i],overallMins[i],overallMaxes[i],allMaxes.get(i),Color.magenta);
      GraphicsUtil.linePlot(panels[i],overallMins[i],overallMaxes[i],allAverages.get(i),Color.blue);
      GraphicsUtil.linePlot(panels[i],overallMins[i],overallMaxes[i],allMins.get(i),Color.green);
    }
  }
}"
39236,"private void refreshPreferencePlot(DrawingPanel preferenceNeuronPanel,double[] preferences){
  preferenceNeuronPanel.clear();
  for (int i=0; i < preferenceActivationHistory.length; i++) {
    preferenceActivationHistory[i].add(preferences[i]);
    Plot.linePlot(preferenceNeuronPanel,-1,1,preferenceActivationHistory[i],CombinatoricUtilities.colorFromInt(i));
  }
}","private void refreshPreferencePlot(DrawingPanel preferenceNeuronPanel,double[] preferences){
  preferenceNeuronPanel.clear();
  for (int i=0; i < preferenceActivationHistory.length; i++) {
    preferenceActivationHistory[i].add(preferences[i]);
    GraphicsUtil.linePlot(preferenceNeuronPanel,-1,1,preferenceActivationHistory[i],CombinatoricUtilities.colorFromInt(i));
  }
}"
39237,"/** 
 * This should be turned into JUnit tests, but the current tests don't work, and this was written so long ago that I have no idea why.
 * @param args
 */
public static void main(String[] args){
  Parameters.initializeParameterCollections(args);
  lambda=Parameters.parameters.doubleParameter(""String_Node_Str"");
  LinkedList<Integer> eatTimes=new LinkedList<Integer>();
  eatTimes.add(1);
  eatTimes.add(2);
  eatTimes.add(3);
  eatTimes.add(5);
  eatTimes.add(8);
  eatTimes.add(10);
  eatTimes.add(12);
  eatTimes.add(20);
  eatTimes.add(21);
  LinkedList<Interval<Integer>> usageTimeFrames=new LinkedList<Interval<Integer>>();
  usageTimeFrames.add(new Interval<Integer>(true,0,4,false));
  usageTimeFrames.add(new Interval<Integer>(true,9,12,false));
  usageTimeFrames.add(new Interval<Integer>(true,19,22,false));
  System.out.println(""String_Node_Str"" + fitness(usageTimeFrames,eatTimes));
  eatTimes.add(200);
  usageTimeFrames.add(new Interval<Integer>(true,30,40,false));
  usageTimeFrames.add(new Interval<Integer>(true,100,130,false));
  usageTimeFrames.add(new Interval<Integer>(true,190,220,false));
  System.out.println(""String_Node_Str"" + fitness(usageTimeFrames,eatTimes));
  eatTimes.add(220);
  eatTimes.add(221);
  eatTimes.add(222);
  eatTimes.add(223);
  eatTimes.add(224);
  eatTimes.add(225);
  System.out.println(""String_Node_Str"" + fitness(usageTimeFrames,eatTimes));
  System.out.println(""String_Node_Str"");
  LinkedList<Interval<Integer>> timeFrames=new LinkedList<Interval<Integer>>();
  timeFrames.add(new Interval<Integer>(true,10,11,false));
  timeFrames.add(new Interval<Integer>(true,13,15,false));
  timeFrames.add(new Interval<Integer>(true,17,20,false));
  timeFrames.add(new Interval<Integer>(true,50,71,false));
  timeFrames.add(new Interval<Integer>(true,90,100,false));
  timeFrames.add(new Interval<Integer>(true,200,220,false));
  ArrayList<Double> plotLine=new ArrayList<Double>();
  for (int i=0; i < 300; i++) {
    LinkedList<Integer> point=new LinkedList<Integer>();
    point.add(i);
    double value=fitness(timeFrames,point);
    plotLine.add(value);
    System.out.println(i + ""String_Node_Str"" + value);
  }
  Plot.linePlot(new DrawingPanel(600,600,""String_Node_Str""),-0.5,1.5,plotLine,Color.RED);
}","/** 
 * This should be turned into JUnit tests, but the current tests don't work, and this was written so long ago that I have no idea why.
 * @param args
 */
public static void main(String[] args){
  Parameters.initializeParameterCollections(args);
  lambda=Parameters.parameters.doubleParameter(""String_Node_Str"");
  LinkedList<Integer> eatTimes=new LinkedList<Integer>();
  eatTimes.add(1);
  eatTimes.add(2);
  eatTimes.add(3);
  eatTimes.add(5);
  eatTimes.add(8);
  eatTimes.add(10);
  eatTimes.add(12);
  eatTimes.add(20);
  eatTimes.add(21);
  LinkedList<Interval<Integer>> usageTimeFrames=new LinkedList<Interval<Integer>>();
  usageTimeFrames.add(new Interval<Integer>(true,0,4,false));
  usageTimeFrames.add(new Interval<Integer>(true,9,12,false));
  usageTimeFrames.add(new Interval<Integer>(true,19,22,false));
  System.out.println(""String_Node_Str"" + fitness(usageTimeFrames,eatTimes));
  eatTimes.add(200);
  usageTimeFrames.add(new Interval<Integer>(true,30,40,false));
  usageTimeFrames.add(new Interval<Integer>(true,100,130,false));
  usageTimeFrames.add(new Interval<Integer>(true,190,220,false));
  System.out.println(""String_Node_Str"" + fitness(usageTimeFrames,eatTimes));
  eatTimes.add(220);
  eatTimes.add(221);
  eatTimes.add(222);
  eatTimes.add(223);
  eatTimes.add(224);
  eatTimes.add(225);
  System.out.println(""String_Node_Str"" + fitness(usageTimeFrames,eatTimes));
  System.out.println(""String_Node_Str"");
  LinkedList<Interval<Integer>> timeFrames=new LinkedList<Interval<Integer>>();
  timeFrames.add(new Interval<Integer>(true,10,11,false));
  timeFrames.add(new Interval<Integer>(true,13,15,false));
  timeFrames.add(new Interval<Integer>(true,17,20,false));
  timeFrames.add(new Interval<Integer>(true,50,71,false));
  timeFrames.add(new Interval<Integer>(true,90,100,false));
  timeFrames.add(new Interval<Integer>(true,200,220,false));
  ArrayList<Double> plotLine=new ArrayList<Double>();
  for (int i=0; i < 300; i++) {
    LinkedList<Integer> point=new LinkedList<Integer>();
    point.add(i);
    double value=fitness(timeFrames,point);
    plotLine.add(value);
    System.out.println(i + ""String_Node_Str"" + value);
  }
  GraphicsUtil.linePlot(new DrawingPanel(600,600,""String_Node_Str""),-0.5,1.5,plotLine,Color.RED);
}"
39238,"/** 
 * Creates a graphed visualization of an audio file by taking in the file represented as a list of doubles and  plotting it using a DrawingPanel.
 * @param fileName String reference to file being plotted
 */
public static void wavePlot(String fileName){
  double[] fileArray=read(fileName);
  ArrayList<Double> fileArrayList=ArrayUtil.doubleVectorFromArray(fileArray);
  DrawingPanel panel=new DrawingPanel(500,500,""String_Node_Str"" + fileName);
  Plot.linePlot(panel,-1.0,1.0,fileArrayList,Color.black);
}","/** 
 * Creates a graphed visualization of an audio file by taking in the file represented as a list of doubles and  plotting it using a DrawingPanel.
 * @param fileName String reference to file being plotted
 */
public static void wavePlot(String fileName){
  double[] fileArray=read(fileName);
  ArrayList<Double> fileArrayList=ArrayUtil.doubleVectorFromArray(fileArray);
  DrawingPanel panel=new DrawingPanel(500,500,""String_Node_Str"" + fileName);
  GraphicsUtil.linePlot(panel,-1.0,1.0,fileArrayList,Color.black);
}"
39239,"/** 
 * Test client - play an A major scale to standard audio.
 * @param args the command-line arguments
 */
public static void main(String[] args){
  double freq1=440.0;
  for (int i=0; i <= StdAudio.SAMPLE_RATE; i++) {
    StdAudio.play(0.5 * Math.sin(2 * Math.PI * freq1* i / StdAudio.SAMPLE_RATE));
  }
  for (int i=0; i <= StdAudio.SAMPLE_RATE; i++) {
    StdAudio.play(0.5 * ActivationFunctions.squareWave(2 * Math.PI * freq1* i / StdAudio.SAMPLE_RATE));
  }
  for (int i=0; i <= StdAudio.SAMPLE_RATE; i++) {
    StdAudio.play(0.5 * ActivationFunctions.triangleWave(2 * Math.PI * freq1* i / StdAudio.SAMPLE_RATE));
  }
  double[] exampleSound=new double[StdAudio.SAMPLE_RATE + 1];
  double freq2=440.0;
  for (int i=0; i <= StdAudio.SAMPLE_RATE; i++) {
    exampleSound[i]=(0.5 * Math.sin(2 * Math.PI * freq2* i / StdAudio.SAMPLE_RATE));
  }
  StdAudio.play(exampleSound);
  for (int i=0; i <= StdAudio.SAMPLE_RATE; i++) {
    exampleSound[i]=(0.5 * ActivationFunctions.fullSawtooth(2 * Math.PI * freq2* i / StdAudio.SAMPLE_RATE));
  }
  StdAudio.play(exampleSound);
  double[] test=new double[500];
  for (int i=0; i < test.length; i++) {
    test[i]=i;
  }
  StdAudio.play(test);
  for (double i=0; i <= StdAudio.SAMPLE_RATE; i++) {
    exampleSound[(int)i]=(ActivationFunctions.tanh(2 * (i / StdAudio.SAMPLE_RATE) - 1));
  }
  StdAudio.play(exampleSound);
  ArrayList<Double> fileArrayList=ArrayUtil.doubleVectorFromArray(exampleSound);
  DrawingPanel panel=new DrawingPanel(500,500,""String_Node_Str"");
  Plot.linePlot(panel,-1.0,1.0,fileArrayList,Color.black);
  String pirates=""String_Node_Str"";
  playApplet(pirates);
  StdAudio.close();
}","/** 
 * Test client - play an A major scale to standard audio.
 * @param args the command-line arguments
 */
public static void main(String[] args){
  double freq1=440.0;
  for (int i=0; i <= StdAudio.SAMPLE_RATE; i++) {
    StdAudio.play(0.5 * Math.sin(2 * Math.PI * freq1* i / StdAudio.SAMPLE_RATE));
  }
  for (int i=0; i <= StdAudio.SAMPLE_RATE; i++) {
    StdAudio.play(0.5 * ActivationFunctions.squareWave(2 * Math.PI * freq1* i / StdAudio.SAMPLE_RATE));
  }
  for (int i=0; i <= StdAudio.SAMPLE_RATE; i++) {
    StdAudio.play(0.5 * ActivationFunctions.triangleWave(2 * Math.PI * freq1* i / StdAudio.SAMPLE_RATE));
  }
  double[] exampleSound=new double[StdAudio.SAMPLE_RATE + 1];
  double freq2=440.0;
  for (int i=0; i <= StdAudio.SAMPLE_RATE; i++) {
    exampleSound[i]=(0.5 * Math.sin(2 * Math.PI * freq2* i / StdAudio.SAMPLE_RATE));
  }
  StdAudio.play(exampleSound);
  for (int i=0; i <= StdAudio.SAMPLE_RATE; i++) {
    exampleSound[i]=(0.5 * ActivationFunctions.fullSawtooth(2 * Math.PI * freq2* i / StdAudio.SAMPLE_RATE));
  }
  StdAudio.play(exampleSound);
  double[] test=new double[500];
  for (int i=0; i < test.length; i++) {
    test[i]=i;
  }
  StdAudio.play(test);
  for (double i=0; i <= StdAudio.SAMPLE_RATE; i++) {
    exampleSound[(int)i]=(ActivationFunctions.tanh(2 * (i / StdAudio.SAMPLE_RATE) - 1));
  }
  StdAudio.play(exampleSound);
  ArrayList<Double> fileArrayList=ArrayUtil.doubleVectorFromArray(exampleSound);
  DrawingPanel panel=new DrawingPanel(500,500,""String_Node_Str"");
  GraphicsUtil.linePlot(panel,-1.0,1.0,fileArrayList,Color.black);
  String pirates=""String_Node_Str"";
  playApplet(pirates);
  StdAudio.close();
}"
39240,"public static void linePlot(DrawingPanel panel,double min,double max,ArrayList<Double> scores,Color color){
  Graphics g=panel.getGraphics();
  g.setColor(Color.black);
  g.drawLine(OFFSET,OFFSET,OFFSET,BROWSE_DIM - OFFSET);
  g.drawLine(OFFSET,BROWSE_DIM - OFFSET,BROWSE_DIM - OFFSET,BROWSE_DIM - OFFSET);
  double last=scores.get(0);
  double maxRange=Math.max(max,max - min);
  double lowerMin=Math.min(0,min);
  for (int i=1; i < scores.size(); i++) {
    g.setColor(color);
    int x1=OFFSET + scale((double)(i - 1),(double)scores.size(),0);
    int y1=OFFSET + invert(last,maxRange,lowerMin);
    int x2=OFFSET + scale((double)i,(double)scores.size(),0);
    int y2=OFFSET + invert(scores.get(i),maxRange,lowerMin);
    g.drawLine(x1,y1,x2,y2);
    g.setColor(Color.black);
    g.drawString(""String_Node_Str"" + max,OFFSET / 2,OFFSET / 2);
    g.drawString(""String_Node_Str"" + lowerMin,OFFSET / 2,BROWSE_DIM - (OFFSET / 2));
    last=scores.get(i);
  }
}","public static void linePlot(DrawingPanel panel,double min,double max,ArrayList<Double> scores,Color color){
  Graphics g=panel.getGraphics();
  int height=panel.getFrame().getHeight() - 50;
  int width=panel.getFrame().getWidth();
  g.setColor(Color.black);
  g.drawLine(OFFSET,OFFSET,OFFSET,height - OFFSET);
  g.drawLine(OFFSET,height - OFFSET,width - OFFSET,height - OFFSET);
  double last=scores.get(0);
  double maxRange=Math.max(max,max - min);
  double lowerMin=Math.min(0,min);
  for (int i=1; i < scores.size(); i++) {
    g.setColor(color);
    int x1=OFFSET + scale((double)(i - 1),(double)scores.size(),0,width);
    int y1=OFFSET + invert(last,maxRange,lowerMin,height);
    int x2=OFFSET + scale((double)i,(double)scores.size(),0,width);
    int y2=OFFSET + invert(scores.get(i),maxRange,lowerMin,height);
    g.drawLine(x1,y1,x2,y2);
    g.setColor(Color.black);
    last=scores.get(i);
  }
  g.drawString(""String_Node_Str"" + max,OFFSET / 2,OFFSET / 2);
  g.drawString(""String_Node_Str"" + lowerMin,OFFSET / 2,height - (OFFSET / 2));
}"
39241,"public static int invert(double y,double max,double min){
  return (BROWSE_DIM - (2 * OFFSET)) - scale(y,max,min);
}","public static int invert(double y,double max,double min,int totalHeight){
  return (totalHeight - (2 * OFFSET)) - scale(y,max,min,totalHeight);
}"
39242,"public static int scale(double x,double max,double min){
  return (int)(((x - min) / max) * (BROWSE_DIM - (2 * OFFSET)));
}","public static int scale(double x,double max,double min,int totalWidth){
  return (int)(((x - min) / max) * (totalWidth - (2 * OFFSET)));
}"
39243,"/** 
 * Tests creation of list of nodes in substrates. Order of substrates is not imortant as long as mapping is accurate
 */
@Test public void testCreateSubstrateNodesSlow(){
  ArrayList<NodeGene> nodes=hcppn.createSubstrateNodes(hcppn.getCPPN(),subs);
  assertEquals(nodes.size(),subs.get(sub1Index).getSize().t1 * subs.get(sub1Index).getSize().t2 + subs.get(sub2Index).getSize().t1 * subs.get(sub2Index).getSize().t2);
  assertEquals(hcppn.innovationID,nodes.size());
  tearDown();
}","/** 
 * Tests creation of list of nodes in substrates. Order of substrates is not imortant as long as mapping is accurate
 */
@Test public void testCreateSubstrateNodesSlow(){
  ArrayList<NodeGene> nodes=hcppn.createSubstrateNodes((HyperNEATTask)MMNEAT.task,hcppn.getCPPN(),subs);
  assertEquals(nodes.size(),subs.get(sub1Index).getSize().t1 * subs.get(sub1Index).getSize().t2 + subs.get(sub2Index).getSize().t1 * subs.get(sub2Index).getSize().t2);
  assertEquals(hcppn.innovationID,nodes.size());
  tearDown();
}"
39244,"private void colorScents(){
  for (int agent=0; agent < predScents.length; agent++) {
    for (int m=0; m < predScents[agent].length; m++) {
      for (int x=0; x < predScents[agent][m].length; x++) {
        for (int y=0; y < predScents[agent][m][x].length; y++) {
          if (predScents[agent][m][x][y] > 0.0001) {
            int r=(int)(predColors[agent][m][0] * (1 - predScents[agent][m][x][y]));
            int g=(int)(predColors[agent][m][1] * (1 - predScents[agent][m][x][y]));
            int b=(int)(predColors[agent][m][2] * (1 - predScents[agent][m][x][y]));
            Color c=new Color(r,g,b);
            bufferGraphics.setColor(c);
            bufferGraphics.fillRect(x(x) + 1,(y(y) - CELL_SIZE) + 1,CELL_SIZE - 1,CELL_SIZE - 1);
          }
        }
      }
    }
  }
}","/** 
 * Fill cells with color based on the scent strengths
 */
private void colorScents(){
  for (int agent=0; agent < predScents.length; agent++) {
    for (int m=0; m < predScents[agent].length; m++) {
      for (int x=0; x < predScents[agent][m].length; x++) {
        for (int y=0; y < predScents[agent][m][x].length; y++) {
          if (predScents[agent][m][x][y] > 0.0001) {
            int r=(int)(predColors[agent][m][0] * (1 - predScents[agent][m][x][y]));
            int g=(int)(predColors[agent][m][1] * (1 - predScents[agent][m][x][y]));
            int b=(int)(predColors[agent][m][2] * (1 - predScents[agent][m][x][y]));
            Color c=new Color(r,g,b);
            bufferGraphics.setColor(c);
            bufferGraphics.fillRect(x(x) + 1,(y(y) - CELL_SIZE) + 1,CELL_SIZE - 1,CELL_SIZE - 1);
          }
        }
      }
    }
  }
}"
39245,"/** 
 * provides the information for the visualization of the agents and places them on the grid
 */
private void drawAgents(){
  if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    evaporate();
    colorScents();
  }
  TorusAgent[][] agents=game.getAgents();
  for (int i=0; i < agents.length; i++) {
    if (i == TorusPredPreyGame.AGENT_TYPE_PREY)     continue;
    for (int j=0; j < agents[i].length; j++) {
      if (agents[i][j] != null) {
        int row=(int)agents[i][j].getX();
        int x=x(row);
        int col=(int)agents[i][j].getY();
        int y=y(col);
        if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
          int m=((NNTorusPredPreyController)predControllers[j]).nn.lastModule();
          (i == TorusPredPreyGame.AGENT_TYPE_PRED ? predScents : preyScents)[j][m][row][col]=1.0f;
        }
        bufferGraphics.setColor(agents[i][j].getColor());
        bufferGraphics.fillRect(x + 1,(y - CELL_SIZE) + 1,CELL_SIZE - 1,CELL_SIZE - 1);
      }
    }
  }
}","/** 
 * provides the information for the visualization of the agents and places them on the grid
 */
private void drawAgents(){
  if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    evaporate();
    colorScents();
  }
  TorusAgent[][] agents=game.getAgents();
  for (int i=0; i < agents.length; i++) {
    for (int j=0; j < agents[i].length; j++) {
      if (agents[i][j] != null) {
        int row=(int)agents[i][j].getX();
        int x=x(row);
        int col=(int)agents[i][j].getY();
        int y=y(col);
        if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
          TorusPredPreyController controller=(i == TorusPredPreyGame.AGENT_TYPE_PRED ? predControllers : preyControllers)[j];
          if (controller instanceof NNTorusPredPreyController) {
            int m=((NNTorusPredPreyController)controller).nn.lastModule();
            (i == TorusPredPreyGame.AGENT_TYPE_PRED ? predScents : preyScents)[j][m][row][col]=1.0f;
          }
 else {
            (i == TorusPredPreyGame.AGENT_TYPE_PRED ? predScents : preyScents)[j][0][row][col]=1.0f;
          }
        }
        bufferGraphics.setColor(agents[i][j].getColor());
        bufferGraphics.fillRect(x + 1,(y - CELL_SIZE) + 1,CELL_SIZE - 1,CELL_SIZE - 1);
      }
    }
  }
}"
39246,"/** 
 * a constructor that creates an instance of this game for this object (TorusWorldView)
 * @param game a given instance of the PredPrey game
 */
public TorusWorldView(TorusPredPreyGame game,TorusPredPreyController[] predControllers,TorusPredPreyController[] preyControllers){
  this.game=game;
  if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    this.predControllers=predControllers;
    this.preyControllers=preyControllers;
    int numModules=((NNTorusPredPreyController)predControllers[0]).nn.numModules();
    predScents=new float[game.getPredators().length][numModules][game.getWorld().width()][game.getWorld().height()];
    preyScents=new float[game.getPrey().length][numModules][game.getWorld().width()][game.getWorld().height()];
    predColors=new float[game.getPredators().length][numModules][3];
    preyColors=new float[game.getPrey().length][numModules][3];
    for (int i=0; i < predColors.length; i++) {
      for (int j=0; j < predColors[i].length; j++) {
        Color c=CombinatoricUtilities.colorFromInt(j);
        predColors[i][j]=new float[]{c.getRed(),c.getGreen(),c.getBlue()};
      }
    }
  }
}","/** 
 * a constructor that creates an instance of this game for this object (TorusWorldView)
 * @param game a given instance of the PredPrey game
 */
public TorusWorldView(TorusPredPreyGame game,TorusPredPreyController[] predControllers,TorusPredPreyController[] preyControllers){
  this.game=game;
  if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    this.predControllers=predControllers;
    this.preyControllers=preyControllers;
    predScents=new float[game.getPredators().length][][][];
    preyScents=new float[game.getPrey().length][][][];
    predColors=new float[game.getPredators().length][][];
    preyColors=new float[game.getPrey().length][][];
    for (int i=0; i < game.getPredators().length; i++) {
      int numModules=predControllers[i] instanceof NNTorusPredPreyController ? ((NNTorusPredPreyController)predControllers[i]).nn.numModules() : 1;
      predScents[i]=new float[numModules][game.getWorld().width()][game.getWorld().height()];
      predColors[i]=new float[numModules][3];
    }
    for (int i=0; i < game.getPrey().length; i++) {
      int numModules=preyControllers[i] instanceof NNTorusPredPreyController ? ((NNTorusPredPreyController)preyControllers[i]).nn.numModules() : 1;
      preyScents[i]=new float[numModules][game.getWorld().width()][game.getWorld().height()];
      preyColors[i]=new float[numModules][3];
    }
    for (int i=0; i < predColors.length; i++) {
      for (int j=0; j < predColors[i].length; j++) {
        Color c=CombinatoricUtilities.colorFromInt(predControllers[i] instanceof NNTorusPredPreyController ? 2 + j : TorusPredPreyGame.AGENT_TYPE_PRED);
        predColors[i][j]=new float[]{c.getRed(),c.getGreen(),c.getBlue()};
      }
    }
    for (int i=0; i < preyColors.length; i++) {
      for (int j=0; j < preyColors[i].length; j++) {
        Color c=CombinatoricUtilities.colorFromInt(preyControllers[i] instanceof NNTorusPredPreyController ? 2 + j : TorusPredPreyGame.AGENT_TYPE_PREY);
        preyColors[i][j]=new float[]{c.getRed(),c.getGreen(),c.getBlue()};
      }
    }
  }
}"
39247,"private void evaporate(){
  for (int agent=0; agent < predScents.length; agent++) {
    for (int m=0; m < predScents[agent].length; m++) {
      for (int x=0; x < predScents[agent][m].length; x++) {
        for (int y=0; y < predScents[agent][m][x].length; y++) {
          predScents[agent][m][x][y]*=0.9;
        }
      }
    }
  }
}","/** 
 * Weaken the scent presence of every cell, so that evidence of an agent occupying a given cell eventually disappears.
 */
private void evaporate(){
  for (int agent=0; agent < predScents.length; agent++) {
    for (int m=0; m < predScents[agent].length; m++) {
      for (int x=0; x < predScents[agent][m].length; x++) {
        for (int y=0; y < predScents[agent][m][x].length; y++) {
          predScents[agent][m][x][y]*=0.9;
        }
      }
    }
  }
}"
39248,"/** 
 * Calculates inputs for the neural network in order to figure what action to take in getAction.
 * @param me this agent
 * @param world torus grid world
 * @param preds predator agents
 * @param prey prey agents
 * @return inputs for the network
 */
public double[] inputs(TorusAgent me,TorusWorld world,TorusAgent[] preds,TorusAgent[] prey){
  double[] inputs=new double[numInputs];
  int startPosition=0;
  for (  TorusPredPreySensorBlock block : sensorBlocks) {
    System.arraycopy(block.sensorValues(me,world,preds,prey),0,inputs,startPosition,block.numSensors(isPredator));
    startPosition+=block.numSensors(isPredator);
  }
  return inputs;
}","/** 
 * Calculates inputs for the neural network in order to figure what action to take in getAction.
 * @param me this agent
 * @param world torus grid world
 * @param preds predator agents
 * @param prey prey agents
 * @return inputs for the network
 */
public double[] inputs(TorusAgent me,TorusWorld world,TorusAgent[] preds,TorusAgent[] prey){
  double[] inputs=new double[numInputs];
  int startPosition=0;
  for (  TorusPredPreySensorBlock block : sensorBlocks) {
    double[] sensors=block.sensorValues(me,world,preds,prey);
    int numSensors=block.numSensors(isPredator);
    System.arraycopy(sensors,0,inputs,startPosition,numSensors);
    startPosition+=numSensors;
  }
  return inputs;
}"
39249,"@Override public void addOutputSubstrates(List<Substrate> subs){
  Substrate dpad=new Substrate(new Pair<Integer,Integer>(3,2),Substrate.OUTPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(0,Substrate.OUTPUT_SUBSTRATE,0),""String_Node_Str"");
  dpad.addDeadNeuron(0,0);
  dpad.addDeadNeuron(0,2);
  dpad.addDeadNeuron(1,1);
  subs.add(dpad);
}","@Override public void addOutputSubstrates(List<Substrate> subs){
  Substrate dpad=new Substrate(new Pair<Integer,Integer>(3,2),Substrate.OUTPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(0,Substrate.OUTPUT_SUBSTRATE,0),""String_Node_Str"");
  dpad.addDeadNeuron(0,0);
  dpad.addDeadNeuron(2,0);
  dpad.addDeadNeuron(1,1);
  subs.add(dpad);
}"
39250,"@Override public void addOutputSubstrates(List<Substrate> subs){
  Substrate dpad=new Substrate(new Pair<Integer,Integer>(3,2),Substrate.OUTPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(0,Substrate.OUTPUT_SUBSTRATE,0),""String_Node_Str"");
  dpad.addDeadNeuron(0,0);
  dpad.addDeadNeuron(0,2);
  dpad.addDeadNeuron(1,1);
  subs.add(dpad);
  Substrate cstick=new Substrate(new Pair<Integer,Integer>(2,1),Substrate.OUTPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(0,Substrate.OUTPUT_SUBSTRATE,0),""String_Node_Str"");
  subs.add(cstick);
}","@Override public void addOutputSubstrates(List<Substrate> subs){
  Substrate dpad=new Substrate(new Pair<Integer,Integer>(3,2),Substrate.OUTPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(0,Substrate.OUTPUT_SUBSTRATE,0),""String_Node_Str"");
  dpad.addDeadNeuron(0,0);
  dpad.addDeadNeuron(2,0);
  dpad.addDeadNeuron(1,1);
  subs.add(dpad);
  Substrate cstick=new Substrate(new Pair<Integer,Integer>(2,1),Substrate.OUTPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(0,Substrate.OUTPUT_SUBSTRATE,0),""String_Node_Str"");
  subs.add(cstick);
}"
39251,"/** 
 * Define all parameter labels, default values, and help text
 */
public final void fillDefaults(){
  integerOptions.add(""String_Node_Str"",20,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",150,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",250,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",30,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",35,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3 * Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",ActivationFunctions.FTYPE_TANH,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",500,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",17,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",30,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",7,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",25,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3 * Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",20,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.DELAY,""String_Node_Str"");
  longOptions.add(""String_Node_Str"",0l,""String_Node_Str"");
  longOptions.add(""String_Node_Str"",0l,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.2,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.99,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.25,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.025,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",-1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",10.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",50.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.25,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.8,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.05,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.4,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.2,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",Math.PI / 8.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",5.0 * Breve2DGame.AGENT_MAGNITUDE,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  classOptions.add(""String_Node_Str"",CenteredSubstrateMapping.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",PreyFleeClosestPredatorController.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",AggressivePredatorController.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GaussianGenerator.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Max.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",JunctionNodes.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GhostsPillsMap.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TWEANNCrossover.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",SimpleWeaponManager.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",OpponentRelativeMovementOutputModel.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",OpponentRelativeSensorModel.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",FullTaskMediator.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",RushingPlayer.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",PlayerPredatorMonsterPrey.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GhostsThenPillsModeSelector.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",DomainSpecificCharacterization.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",StarterPacMan.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Legacy.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",LimitedSinglePopulationGenerationalEAExperiment.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",NSGA2.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",StateVariableExtractor.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",RLGlueAgent.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TWEANNGenotype.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
}","/** 
 * Define all parameter labels, default values, and help text
 */
public final void fillDefaults(){
  integerOptions.add(""String_Node_Str"",20,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",150,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",250,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",30,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",35,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3 * Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",ActivationFunctions.FTYPE_TANH,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",500,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",17,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",30,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",7,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",25,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3 * Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",20,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.DELAY,""String_Node_Str"");
  longOptions.add(""String_Node_Str"",0l,""String_Node_Str"");
  longOptions.add(""String_Node_Str"",0l,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.2,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.99,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.25,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.025,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",-1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",10.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",50.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.25,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.8,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.05,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.4,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.2,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",Math.PI / 8.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",5.0 * Breve2DGame.AGENT_MAGNITUDE,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  classOptions.add(""String_Node_Str"",CenteredSubstrateMapping.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",PreyFleeClosestPredatorController.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",AggressivePredatorController.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GaussianGenerator.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Max.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",JunctionNodes.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GhostsPillsMap.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TWEANNCrossover.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",SimpleWeaponManager.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",OpponentRelativeMovementOutputModel.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",OpponentRelativeSensorModel.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",FullTaskMediator.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",RushingPlayer.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",PlayerPredatorMonsterPrey.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GhostsThenPillsModeSelector.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",DomainSpecificCharacterization.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",StarterPacMan.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Legacy.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",LimitedSinglePopulationGenerationalEAExperiment.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",NSGA2.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",StateVariableExtractor.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",RLGlueAgent.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TWEANNGenotype.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
}"
39252,"/** 
 * Define all parameter labels, default values, and help text
 */
public final void fillDefaults(){
  integerOptions.add(""String_Node_Str"",20,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",150,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",250,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",30,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",35,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3 * Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",ActivationFunctions.FTYPE_TANH,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",500,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",17,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",30,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",7,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",25,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3 * Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",20,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.DELAY,""String_Node_Str"");
  longOptions.add(""String_Node_Str"",0l,""String_Node_Str"");
  longOptions.add(""String_Node_Str"",0l,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.2,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.99,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.25,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.025,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",-1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",10.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",50.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.25,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.8,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.05,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.4,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.2,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",Math.PI / 8.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",5.0 * Breve2DGame.AGENT_MAGNITUDE,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  classOptions.add(""String_Node_Str"",CenteredSubstrateMapping.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",PreyFleeClosestPredatorController.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",AggressivePredatorController.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GaussianGenerator.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Max.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",JunctionNodes.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GhostsPillsMap.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TWEANNCrossover.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",SimpleWeaponManager.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",OpponentRelativeMovementOutputModel.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",OpponentRelativeSensorModel.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",FullTaskMediator.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",RushingPlayer.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",PlayerPredatorMonsterPrey.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GhostsThenPillsModeSelector.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",DomainSpecificCharacterization.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",StarterPacMan.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Legacy.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",LimitedSinglePopulationGenerationalEAExperiment.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",NSGA2.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",StateVariableExtractor.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",RLGlueAgent.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TWEANNGenotype.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
}","/** 
 * Define all parameter labels, default values, and help text
 */
public final void fillDefaults(){
  integerOptions.add(""String_Node_Str"",20,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",150,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",250,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",200,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",30,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",35,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3 * Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",ActivationFunctions.FTYPE_TANH,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",500,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",17,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",30,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",7,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",100,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",25,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3 * Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",20,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.DELAY,""String_Node_Str"");
  longOptions.add(""String_Node_Str"",0l,""String_Node_Str"");
  longOptions.add(""String_Node_Str"",0l,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"" + ""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.2,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.99,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.25,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.025,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",-1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",10.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",50.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.25,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.8,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.05,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.4,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.2,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",Math.PI / 8.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",5.0 * Breve2DGame.AGENT_MAGNITUDE,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  classOptions.add(""String_Node_Str"",CenteredSubstrateMapping.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",PreyFleeClosestPredatorController.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",AggressivePredatorController.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GaussianGenerator.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Max.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",JunctionNodes.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GhostsPillsMap.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TWEANNCrossover.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",SimpleWeaponManager.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",OpponentRelativeMovementOutputModel.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",OpponentRelativeSensorModel.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",FullTaskMediator.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",RushingPlayer.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",PlayerPredatorMonsterPrey.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GhostsThenPillsModeSelector.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",DomainSpecificCharacterization.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",StarterPacMan.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Legacy.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",LimitedSinglePopulationGenerationalEAExperiment.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",NSGA2.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",StateVariableExtractor.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",RLGlueAgent.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TWEANNGenotype.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
}"
39253,"@Override public List<Pair<String,String>> getSubstrateConnectivity(){
  if (connections == null) {
    connections=new ArrayList<Pair<String,String>>();
    connections.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
    connections.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
    if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      connections.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
      connections.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      connections.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
    }
    connections.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
    connections.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
    if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      connections.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
      connections.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
      connections.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
      connections.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
    }
  }
  return connections;
}","@Override public List<Pair<String,String>> getSubstrateConnectivity(){
  if (connections == null) {
    connections=new ArrayList<Pair<String,String>>();
    connections.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
    connections.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
    if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      connections.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
      connections.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      connections.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
    }
    connections.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
    connections.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
    if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      connections.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
      connections.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
      if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        connections.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
        connections.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        connections.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
      }
      connections.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
    }
  }
  return connections;
}"
39254,"/** 
 * Full substrate without dead neurons for specific mazes
 * @return
 */
public List<Substrate> getSubstrateInformationFromScratch(){
  List<Substrate> localSubs=new ArrayList<Substrate>();
  Pair<Integer,Integer> subSize=new Pair<>(MS_PAC_MAN_SUBSTRATE_WIDTH,MS_PAC_MAN_SUBSTRATE_HEIGHT);
  Pair<Integer,Integer> processSize=new Pair<>(10,10);
  Substrate pillSubstrate=new Substrate(subSize,Substrate.INPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(0,0,0),""String_Node_Str"");
  localSubs.add(pillSubstrate);
  Substrate powerPillSubstrate;
  if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    powerPillSubstrate=new Substrate(subSize,Substrate.INPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(1,0,0),""String_Node_Str"");
  }
 else {
    powerPillSubstrate=new Substrate(new Pair<Integer,Integer>(2,2),Substrate.INPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(1,0,0),""String_Node_Str"");
  }
  localSubs.add(powerPillSubstrate);
  if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    Substrate threatSubstrate=new Substrate(subSize,Substrate.INPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(2,0,0),""String_Node_Str"");
    Substrate edibleSubstrate=new Substrate(subSize,Substrate.INPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(4,0,0),""String_Node_Str"");
    localSubs.add(threatSubstrate);
    localSubs.add(edibleSubstrate);
  }
 else {
    Substrate ghostSubstrate=new Substrate(subSize,Substrate.INPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(2,0,0),""String_Node_Str"");
    localSubs.add(ghostSubstrate);
    localSubs.add(ghostSubstrate);
  }
  Substrate pacManSubstrate=new Substrate(subSize,Substrate.INPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(3,0,0),""String_Node_Str"");
  localSubs.add(pacManSubstrate);
  Substrate processSubstrate;
  if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    processSubstrate=new Substrate(subSize,Substrate.PROCCESS_SUBSTRATE,new Triple<Integer,Integer,Integer>(0,1,0),""String_Node_Str"");
  }
 else {
    processSubstrate=new Substrate(processSize,Substrate.PROCCESS_SUBSTRATE,new Triple<Integer,Integer,Integer>(0,1,0),""String_Node_Str"");
  }
  Substrate outputSubstrate;
  if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    outputSubstrate=new Substrate(subSize,Substrate.OUTPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(0,2,0),""String_Node_Str"");
  }
 else {
    outputSubstrate=new Substrate(new Pair<Integer,Integer>(3,3),Substrate.OUTPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(0,2,0),""String_Node_Str"");
    outputSubstrate.addDeadNeuron(0,0);
    outputSubstrate.addDeadNeuron(2,0);
    outputSubstrate.addDeadNeuron(1,1);
    outputSubstrate.addDeadNeuron(0,2);
    outputSubstrate.addDeadNeuron(2,2);
  }
  localSubs.add(processSubstrate);
  localSubs.add(outputSubstrate);
  return localSubs;
}","/** 
 * Full substrate without dead neurons for specific mazes
 * @return
 */
public List<Substrate> getSubstrateInformationFromScratch(){
  List<Substrate> localSubs=new ArrayList<Substrate>();
  Pair<Integer,Integer> subSize=new Pair<>(MS_PAC_MAN_SUBSTRATE_WIDTH,MS_PAC_MAN_SUBSTRATE_HEIGHT);
  Pair<Integer,Integer> processSize=new Pair<>(10,10);
  Substrate pillSubstrate=new Substrate(subSize,Substrate.INPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(0,0,0),""String_Node_Str"");
  localSubs.add(pillSubstrate);
  Substrate powerPillSubstrate;
  if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    powerPillSubstrate=new Substrate(subSize,Substrate.INPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(1,0,0),""String_Node_Str"");
  }
 else {
    powerPillSubstrate=new Substrate(new Pair<Integer,Integer>(2,2),Substrate.INPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(1,0,0),""String_Node_Str"");
  }
  localSubs.add(powerPillSubstrate);
  if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    Substrate threatSubstrate=new Substrate(subSize,Substrate.INPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(2,0,0),""String_Node_Str"");
    Substrate edibleSubstrate=new Substrate(subSize,Substrate.INPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(4,0,0),""String_Node_Str"");
    localSubs.add(threatSubstrate);
    localSubs.add(edibleSubstrate);
  }
 else {
    Substrate ghostSubstrate=new Substrate(subSize,Substrate.INPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(2,0,0),""String_Node_Str"");
    localSubs.add(ghostSubstrate);
  }
  Substrate pacManSubstrate=new Substrate(subSize,Substrate.INPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(3,0,0),""String_Node_Str"");
  localSubs.add(pacManSubstrate);
  Substrate processSubstrate;
  if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    processSubstrate=new Substrate(subSize,Substrate.PROCCESS_SUBSTRATE,new Triple<Integer,Integer,Integer>(0,1,0),""String_Node_Str"");
  }
 else {
    processSubstrate=new Substrate(processSize,Substrate.PROCCESS_SUBSTRATE,new Triple<Integer,Integer,Integer>(0,1,0),""String_Node_Str"");
  }
  Substrate outputSubstrate;
  if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
    outputSubstrate=new Substrate(subSize,Substrate.OUTPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(0,2,0),""String_Node_Str"");
  }
 else {
    outputSubstrate=new Substrate(new Pair<Integer,Integer>(3,3),Substrate.OUTPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(0,2,0),""String_Node_Str"");
    outputSubstrate.addDeadNeuron(0,0);
    outputSubstrate.addDeadNeuron(2,0);
    outputSubstrate.addDeadNeuron(1,1);
    outputSubstrate.addDeadNeuron(0,2);
    outputSubstrate.addDeadNeuron(2,2);
  }
  localSubs.add(processSubstrate);
  localSubs.add(outputSubstrate);
  return localSubs;
}"
39255,"@Override public List<Substrate> getSubstrateInformation(){
  if (subs == null) {
    subs=new ArrayList<Substrate>();
    Pair<Integer,Integer> subSize=new Pair<>(MS_PAC_MAN_SUBSTRATE_WIDTH,MS_PAC_MAN_SUBSTRATE_HEIGHT);
    Pair<Integer,Integer> processSize=new Pair<>(10,10);
    Substrate pillSubstrate=new Substrate(subSize,Substrate.INPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(0,0,0),""String_Node_Str"");
    Substrate powerPillSubstrate=new Substrate(new Pair<Integer,Integer>(2,2),Substrate.INPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(1,0,0),""String_Node_Str"");
    Substrate ghostSubstrate=new Substrate(subSize,Substrate.INPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(2,0,0),""String_Node_Str"");
    Substrate pacManSubstrate=new Substrate(subSize,Substrate.INPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(3,0,0),""String_Node_Str"");
    Substrate processSubstrate=new Substrate(processSize,Substrate.PROCCESS_SUBSTRATE,new Triple<Integer,Integer,Integer>(0,1,0),""String_Node_Str"");
    Substrate outputSubstrate;
    if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      outputSubstrate=new Substrate(subSize,Substrate.OUTPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(0,2,0),""String_Node_Str"");
    }
 else {
      outputSubstrate=new Substrate(new Pair<Integer,Integer>(3,3),Substrate.OUTPUT_SUBSTRATE,new Triple<Integer,Integer,Integer>(0,2,0),""String_Node_Str"");
      outputSubstrate.addDeadNeuron(0,0);
      outputSubstrate.addDeadNeuron(0,2);
      outputSubstrate.addDeadNeuron(1,1);
      outputSubstrate.addDeadNeuron(0,2);
      outputSubstrate.addDeadNeuron(2,2);
    }
    subs.add(pillSubstrate);
    subs.add(powerPillSubstrate);
    subs.add(ghostSubstrate);
    subs.add(pacManSubstrate);
    subs.add(processSubstrate);
    subs.add(outputSubstrate);
  }
  return subs;
}","@Override public List<Substrate> getSubstrateInformation(){
  if (subs == null) {
    subs=getSubstrateInformationFromScratch();
  }
  return subs;
}"
39256,"/** 
 * Figures out which neurons can be killed in the current maze.
 * @param gf game facade, which accesses current maze
 */
public void customizeSubstratesForMaze(GameFacade gf){
  getSubstrateInformation();
  for (  Substrate s : subs) {
    if (s.size.t1 == MS_PAC_MAN_SUBSTRATE_WIDTH && s.size.t2 == MS_PAC_MAN_SUBSTRATE_HEIGHT) {
      s.killAllNeurons();
      for (int i=0; i < gf.lengthMaze(); i++) {
        int x=gf.getNodeXCoord(i);
        int y=gf.getNodeYCoord(i);
        int scaledX=x / MsPacManTask.MS_PAC_MAN_NODE_DIM;
        int scaledY=y / MsPacManTask.MS_PAC_MAN_NODE_DIM;
        s.resurrectNeuron(scaledX,scaledY);
      }
    }
  }
}","/** 
 * Figures out which neurons can be killed in the current maze.
 * @param gf game facade, which accesses current maze
 */
public void customizeSubstratesForMaze(GameFacade gf){
  substratesForMaze=new HashMap<Integer,List<Substrate>>();
  for (int j=0; j < Constants.NUM_MAZES; j++) {
    List<Substrate> localSubs=getSubstrateInformationFromScratch();
    for (    Substrate s : localSubs) {
      if (s.size.t1 == MS_PAC_MAN_SUBSTRATE_WIDTH && s.size.t2 == MS_PAC_MAN_SUBSTRATE_HEIGHT) {
        s.killAllNeurons();
        for (int i=0; i < gf.lengthMaze(); i++) {
          int x=gf.getNodeXCoord(i);
          int y=gf.getNodeYCoord(i);
          int scaledX=x / MsPacManTask.MS_PAC_MAN_NODE_DIM;
          int scaledY=y / MsPacManTask.MS_PAC_MAN_NODE_DIM;
          s.resurrectNeuron(scaledX,scaledY);
        }
      }
      substratesForMaze.put(j,localSubs);
    }
  }
}"
39257,"@SuppressWarnings(""String_Node_Str"") @Override public int getDirection(GameFacade gf){
  if (gf.getMazeIndex() != currentMaze) {
    currentMaze=gf.getMazeIndex();
    nn=networkForMaze.get(currentMaze);
    if (CommonConstants.monitorSubstrates) {
      ((MsPacManTask)MMNEAT.task).customizeSubstratesForMaze(gf);
    }
  }
  double[] inputs=inputMediator.getInputs(gf,gf.getPacmanLastMoveMade());
  double[] outputs=nn.process(inputs);
  if (pacManFullScreenOutput) {
    int chosenNode=-1;
    double nodePreference=Double.NEGATIVE_INFINITY;
    for (int i=0; i < gf.lengthMaze(); i++) {
      int x=gf.getNodeXCoord(i);
      int y=gf.getNodeYCoord(i);
      int j=getOutputIndexFromNodeCoord(x,y);
      if (outputs[j] > nodePreference) {
        nodePreference=outputs[j];
        chosenNode=i;
      }
    }
    return gf.getNextPacManDirTowardsTarget(chosenNode);
  }
 else {
    double[] realOutputs=new double[4];
    realOutputs[GameFacade.moveToIndex(MOVE.UP)]=outputs[UP];
    realOutputs[GameFacade.moveToIndex(MOVE.LEFT)]=outputs[LEFT];
    realOutputs[GameFacade.moveToIndex(MOVE.RIGHT)]=outputs[RIGHT];
    realOutputs[GameFacade.moveToIndex(MOVE.DOWN)]=outputs[DOWN];
    return StatisticsUtilities.argmax(realOutputs);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public int getDirection(GameFacade gf){
  if (gf.getMazeIndex() != currentMaze) {
    currentMaze=gf.getMazeIndex();
    nn=networkForMaze.get(currentMaze);
    if (CommonConstants.monitorSubstrates) {
      ((MsPacManTask)MMNEAT.task).substratesForMaze.get(currentMaze);
    }
  }
  double[] inputs=inputMediator.getInputs(gf,gf.getPacmanLastMoveMade());
  double[] outputs=nn.process(inputs);
  if (pacManFullScreenOutput) {
    int chosenNode=-1;
    double nodePreference=Double.NEGATIVE_INFINITY;
    for (int i=0; i < gf.lengthMaze(); i++) {
      int x=gf.getNodeXCoord(i);
      int y=gf.getNodeYCoord(i);
      int j=getOutputIndexFromNodeCoord(x,y);
      if (outputs[j] > nodePreference) {
        nodePreference=outputs[j];
        chosenNode=i;
      }
    }
    return gf.getNextPacManDirTowardsTarget(chosenNode);
  }
 else {
    double[] realOutputs=new double[4];
    realOutputs[GameFacade.moveToIndex(MOVE.UP)]=outputs[UP];
    realOutputs[GameFacade.moveToIndex(MOVE.LEFT)]=outputs[LEFT];
    realOutputs[GameFacade.moveToIndex(MOVE.RIGHT)]=outputs[RIGHT];
    realOutputs[GameFacade.moveToIndex(MOVE.DOWN)]=outputs[DOWN];
    return StatisticsUtilities.argmax(realOutputs);
  }
}"
39258,"/** 
 * As above, but it is now possible to indicate how the score is statistically summarized when noisy evaluations occur. The default is to average scores across evaluations, but if an overriding statistic is used, then this will also be mentioned in the log.
 * @param name Name of score column
 * @param override Statistic applied across evaluations (null is default/average)
 * @param affectsSelection whether it affects selection
 * @param pop population index (for coevolution)
 */
public static void registerFitnessFunction(String name,Statistic override,boolean affectsSelection,int pop){
  if (affectsSelection) {
    actualFitnessFunctions++;
  }
  while (fitnessFunctions.size() <= pop) {
    fitnessFunctions.add(new ArrayList<String>());
  }
  fitnessFunctions.get(pop).add(name);
  aggregationOverrides.add(override);
}","/** 
 * As above, but it is now possible to indicate how the score is statistically summarized when noisy evaluations occur. The default is to average scores across evaluations, but if an overriding statistic is used, then this will also be mentioned in the log.
 * @param name Name of score column
 * @param override Statistic applied across evaluations (null is default/average)
 * @param affectsSelection whether it affects selection
 * @param pop population index (for coevolution)
 */
public static void registerFitnessFunction(String name,Statistic override,boolean affectsSelection,int pop){
  if (actualFitnessFunctions == null) {
    actualFitnessFunctions=new ArrayList<Integer>();
  }
  while (actualFitnessFunctions.size() <= pop) {
    actualFitnessFunctions.add(0);
  }
  if (affectsSelection) {
    int num=actualFitnessFunctions.get(pop) + 1;
    actualFitnessFunctions.set(pop,num);
  }
  while (fitnessFunctions.size() <= pop) {
    fitnessFunctions.add(new ArrayList<String>());
  }
  fitnessFunctions.get(pop).add(name);
  aggregationOverrides.add(override);
}"
39259,"@SuppressWarnings(""String_Node_Str"") public static ArrayList<String> fitnessPlusMetaheuristics(int pop){
  @SuppressWarnings(""String_Node_Str"") ArrayList<String> result=(ArrayList<String>)fitnessFunctions.get(pop).clone();
  if (pop == 0) {
    ArrayList<String> meta=new ArrayList<String>();
    for (    Metaheuristic m : metaheuristics) {
      meta.add(m.getClass().getSimpleName());
    }
    result.addAll(actualFitnessFunctions,meta);
  }
  return result;
}","@SuppressWarnings(""String_Node_Str"") public static ArrayList<String> fitnessPlusMetaheuristics(int pop){
  @SuppressWarnings(""String_Node_Str"") ArrayList<String> result=(ArrayList<String>)fitnessFunctions.get(pop).clone();
  if (pop == 0) {
    ArrayList<String> meta=new ArrayList<String>();
    for (    Metaheuristic m : metaheuristics) {
      meta.add(m.getClass().getSimpleName());
    }
    result.addAll(actualFitnessFunctions.get(pop),meta);
  }
  return result;
}"
39260,"/** 
 * Adds every possible predator objective as an other score
 * @param pop, current population
 */
private void addPredatorOther(int pop){
  addObjective(new PredatorCatchObjective<T>(),otherScores,false,pop);
  for (int i=0; i < Parameters.parameters.integerParameter(""String_Node_Str""); i++) {
    addObjective(new IndividualPredatorCatchObjective<T>(i),objectives,pop);
  }
  addObjective(new PredatorCatchCloseObjective<T>(),otherScores,false,pop);
  addObjective(new PredatorMinimizeGameTimeObjective<T>(),otherScores,false,pop);
  addObjective(new PredatorHerdPreyObjective<T>(),otherScores,false,pop);
  addObjective(new PredatorEatEachPreyQuicklyObjective<T>(),otherScores,false,pop);
  addObjective(new PredatorMinimizeDistanceFromPreyObjective<T>(),otherScores,false,pop);
  if (Parameters.parameters.integerParameter(""String_Node_Str"") == 2)   addObjective(new PredatorRawalRajagopalanMiikkulainenObjective<T>(),otherScores,false,pop);
  addObjective(new PredatorCatchCloseQuickObjective<T>(),otherScores,false,pop);
  for (int i=0; i < Parameters.parameters.integerParameter(""String_Node_Str""); i++) {
    addObjective(new PredatorMinimizeDistanceFromIndividualPreyObjective<T>(i),otherScores,false,pop);
  }
  for (int i=0; i < Parameters.parameters.integerParameter(""String_Node_Str""); i++) {
    addObjective(new IndividualPredatorMinimizeDistanceFromPreyObjective<T>(i),otherScores,false,pop);
  }
  for (int i=0; i < Parameters.parameters.integerParameter(""String_Node_Str""); i++) {
    for (int j=0; j < Parameters.parameters.integerParameter(""String_Node_Str""); j++) {
      addObjective(new IndividualPredatorMinimizeDistanceFromIndividualPreyObjective<T>(i,j),otherScores,false,pop);
    }
  }
}","/** 
 * Adds every possible predator objective as an other score
 * @param pop, current population
 */
private void addPredatorOther(int pop){
  addObjective(new PredatorCatchObjective<T>(),otherScores,false,pop);
  for (int i=0; i < Parameters.parameters.integerParameter(""String_Node_Str""); i++) {
    addObjective(new IndividualPredatorCatchObjective<T>(i),otherScores,false,pop);
  }
  addObjective(new PredatorCatchCloseObjective<T>(),otherScores,false,pop);
  addObjective(new PredatorMinimizeGameTimeObjective<T>(),otherScores,false,pop);
  addObjective(new PredatorHerdPreyObjective<T>(),otherScores,false,pop);
  addObjective(new PredatorEatEachPreyQuicklyObjective<T>(),otherScores,false,pop);
  addObjective(new PredatorMinimizeDistanceFromPreyObjective<T>(),otherScores,false,pop);
  if (Parameters.parameters.integerParameter(""String_Node_Str"") == 2)   addObjective(new PredatorRawalRajagopalanMiikkulainenObjective<T>(),otherScores,false,pop);
  addObjective(new PredatorCatchCloseQuickObjective<T>(),otherScores,false,pop);
  for (int i=0; i < Parameters.parameters.integerParameter(""String_Node_Str""); i++) {
    addObjective(new PredatorMinimizeDistanceFromIndividualPreyObjective<T>(i),otherScores,false,pop);
  }
  for (int i=0; i < Parameters.parameters.integerParameter(""String_Node_Str""); i++) {
    addObjective(new IndividualPredatorMinimizeDistanceFromPreyObjective<T>(i),otherScores,false,pop);
  }
  for (int i=0; i < Parameters.parameters.integerParameter(""String_Node_Str""); i++) {
    for (int j=0; j < Parameters.parameters.integerParameter(""String_Node_Str""); j++) {
      addObjective(new IndividualPredatorMinimizeDistanceFromIndividualPreyObjective<T>(i,j),otherScores,false,pop);
    }
  }
}"
39261,"/** 
 * An array containing a 1 if a block is present, and a 0 otherwise.
 * @param o
 * @return inputs
 */
@Override public double[] extract(Observation o){
  boolean negative=Parameters.parameters.booleanParameter(""String_Node_Str"");
  boolean senseHoles=Parameters.parameters.booleanParameter(""String_Node_Str"");
  if (negative && senseHoles) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
  int[] worldState=new int[TetrisState.worldWidth * TetrisState.worldHeight];
  System.arraycopy(o.intArray,0,worldState,0,TetrisState.worldWidth * TetrisState.worldHeight);
  double[] result=new double[worldState.length];
  System.out.println(""String_Node_Str"" + Arrays.toString(worldState));
  for (int i=0; i < result.length; i++) {
    if (Math.signum(worldState[i]) == 0) {
      int temp=negative ? -1 : 0;
      result[i]=temp;
    }
 else     if (worldState[i] > 0) {
      result[i]=Math.signum(worldState[i]);
    }
 else     if (senseHoles && TetrisExtractorUtil.isHole(i,worldState)) {
      result[i]=-1;
    }
  }
  return result;
}","/** 
 * An array containing a 1 if a block is present, and a 0 otherwise.
 * @param o
 * @return inputs
 */
@Override public double[] extract(Observation o){
  boolean negative=Parameters.parameters.booleanParameter(""String_Node_Str"");
  boolean senseHoles=Parameters.parameters.booleanParameter(""String_Node_Str"");
  if (negative && senseHoles) {
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
  int[] worldState=new int[TetrisState.worldWidth * TetrisState.worldHeight];
  System.arraycopy(o.intArray,0,worldState,0,TetrisState.worldWidth * TetrisState.worldHeight);
  double[] result=new double[worldState.length];
  for (int i=0; i < result.length; i++) {
    if (Math.signum(worldState[i]) == 0) {
      int temp=negative ? -1 : 0;
      result[i]=temp;
    }
 else     if (worldState[i] > 0) {
      result[i]=Math.signum(worldState[i]);
    }
 else     if (senseHoles && TetrisExtractorUtil.isHole(i,worldState)) {
      result[i]=-1;
    }
  }
  return result;
}"
39262,"public static boolean isHole(int index,int[] worldState){
  int x=getColumn(index);
  return false;
}","public static boolean isHole(int index,int[] worldState){
  int x=getColumn(index);
  boolean isBlockAbove=false;
  while (x < index) {
    if (worldState[x] == 1) {
      isBlockAbove=true;
    }
    x+=TetrisState.worldWidth;
  }
  if (worldState[index] == 1 && isBlockAbove) {
    return true;
  }
  return false;
}"
39263,"/** 
 * Calculate the linear array position from (x,y) components based on worldWidth. 
 * @param x x-coord
 * @param y y-coord
 * @return location in array
 */
public static int calculateLinearArrayPosition(int x,int y,int worldWidth){
  int returnValue=y * worldWidth + x;
  System.out.println(""String_Node_Str"" + returnValue);
  return returnValue;
}","/** 
 * Calculate the linear array position from (x,y) components based on worldWidth. 
 * @param x x-coord
 * @param y y-coord
 * @return location in array
 */
public static int calculateLinearArrayPosition(int x,int y,int worldWidth){
  int returnValue=y * worldWidth + x;
  return returnValue;
}"
39264,"/** 
 * Uses another CPPN to create a TWEANN controller for the domain. This created TWEANN is unique only to the instance in which it is used. In a sense, it's a one-and-done network, which explains the lax use of innovation numbers
 * @return TWEANN generated by CPPN
 */
@Override public TWEANN getPhenotype(){
  constructingNetwork=true;
  TWEANN cppn=getCPPN();
  System.out.println(""String_Node_Str"" + cppn.numOutputs());
  HyperNEATTask hnt=(HyperNEATTask)MMNEAT.task;
  List<Substrate> subs=hnt.getSubstrateInformation();
  List<Pair<String,String>> connections=hnt.getSubstrateConnectivity();
  ArrayList<NodeGene> newNodes=null;
  ArrayList<LinkGene> newLinks=null;
  innovationID=0;
  int phenotypeOutputs=0;
  newNodes=createSubstrateNodes(subs);
  HashMap<String,Integer> substrateIndexMapping=new HashMap<String,Integer>();
  for (int i=0; i < subs.size(); i++) {
    substrateIndexMapping.put(subs.get(i).getName(),i);
  }
  newLinks=createNodeLinks(cppn,connections,subs,substrateIndexMapping);
  for (  Substrate s : subs) {
    if (s.getStype() == Substrate.OUTPUT_SUBSTRATE) {
      phenotypeOutputs+=s.size.t1 * s.size.t2;
    }
  }
  TWEANNGenotype tg=new TWEANNGenotype(newNodes,newLinks,phenotypeOutputs,false,false,-1);
  constructingNetwork=false;
  return tg.getPhenotype();
}","/** 
 * Uses another CPPN to create a TWEANN controller for the domain. This created TWEANN is unique only to the instance in which it is used. In a sense, it's a one-and-done network, which explains the lax use of innovation numbers
 * @return TWEANN generated by CPPN
 */
@Override public TWEANN getPhenotype(){
  constructingNetwork=true;
  TWEANN cppn=getCPPN();
  HyperNEATTask hnt=(HyperNEATTask)MMNEAT.task;
  List<Substrate> subs=hnt.getSubstrateInformation();
  List<Pair<String,String>> connections=hnt.getSubstrateConnectivity();
  ArrayList<NodeGene> newNodes=null;
  ArrayList<LinkGene> newLinks=null;
  innovationID=0;
  int phenotypeOutputs=0;
  newNodes=createSubstrateNodes(subs);
  HashMap<String,Integer> substrateIndexMapping=new HashMap<String,Integer>();
  for (int i=0; i < subs.size(); i++) {
    substrateIndexMapping.put(subs.get(i).getName(),i);
  }
  newLinks=createNodeLinks(cppn,connections,subs,substrateIndexMapping);
  for (  Substrate s : subs) {
    if (s.getStype() == Substrate.OUTPUT_SUBSTRATE) {
      phenotypeOutputs+=s.size.t1 * s.size.t2;
    }
  }
  TWEANNGenotype tg=new TWEANNGenotype(newNodes,newLinks,phenotypeOutputs,false,false,-1);
  constructingNetwork=false;
  return tg.getPhenotype();
}"
39265,"/** 
 * a method for looping through all nodes of two substrates to be linked Link is only created if CPPN output reaches a certain threshold that is dictated via command line parameter.
 * @param linksSoFar All aded links are accumulated in this list
 * @param cppn used to evolve link weight
 * @param outputIndex index from cppn outputs to be used as weight in creating link
 * @param s1 first substrate to be linked
 * @param s2 second substrate to be linked
 * @param s1Index index of first substrate in substrate list
 * @param s2Index index of second substrate in substrate list
 * @param subs list of substrates
 */
public void loopThroughLinks(ArrayList<LinkGene> linksSoFar,TWEANN cppn,int outputIndex,Substrate s1,Substrate s2,int s1Index,int s2Index,List<Substrate> subs){
  for (int X1=0; X1 < s1.size.t1; X1++) {
    for (int Y1=0; Y1 < s1.size.t2; Y1++) {
      for (int X2=0; X2 < s2.size.t1; X2++) {
        for (int Y2=0; Y2 < s2.size.t2; Y2++) {
          ILocated2D scaledSourceCoordinates=MMNEAT.substrateMapping.transformCoordinates(new Tuple2D(X1,Y1),s1.size.t1,s1.size.t2);
          ILocated2D scaledTargetCoordinates=MMNEAT.substrateMapping.transformCoordinates(new Tuple2D(X2,Y2),s2.size.t1,s2.size.t2);
          double[] inputs={scaledSourceCoordinates.getX(),scaledSourceCoordinates.getY(),scaledTargetCoordinates.getX(),scaledTargetCoordinates.getY(),BIAS};
          double[] outputs=cppn.process(inputs);
          boolean expressLink=Math.abs(outputs[outputIndex]) > CommonConstants.linkExpressionThreshold;
          if (expressLink) {
            linksSoFar.add(new LinkGene(getInnovationID(X1,Y1,s1Index,subs),getInnovationID(X2,Y2,s2Index,subs),NetworkUtil.calculateWeight(outputs[outputIndex]),innovationID++,false));
          }
        }
      }
    }
  }
}","/** 
 * a method for looping through all nodes of two substrates to be linked Link is only created if CPPN output reaches a certain threshold that is dictated via command line parameter.
 * @param linksSoFar All aded links are accumulated in this list
 * @param cppn used to evolve link weight
 * @param outputIndex index from cppn outputs to be used as weight in creating link
 * @param s1 first substrate to be linked
 * @param s2 second substrate to be linked
 * @param s1Index index of first substrate in substrate list
 * @param s2Index index of second substrate in substrate list
 * @param subs list of substrates
 */
public void loopThroughLinks(ArrayList<LinkGene> linksSoFar,TWEANN cppn,int outputIndex,Substrate s1,Substrate s2,int s1Index,int s2Index,List<Substrate> subs){
  for (int X1=0; X1 < s1.size.t1; X1++) {
    for (int Y1=0; Y1 < s1.size.t2; Y1++) {
      for (int X2=0; X2 < s2.size.t1; X2++) {
        for (int Y2=0; Y2 < s2.size.t2; Y2++) {
          ILocated2D scaledSourceCoordinates=MMNEAT.substrateMapping.transformCoordinates(new Tuple2D(X1,Y1),s1.size.t1,s1.size.t2);
          ILocated2D scaledTargetCoordinates=MMNEAT.substrateMapping.transformCoordinates(new Tuple2D(X2,Y2),s2.size.t1,s2.size.t2);
          double[] inputs={scaledSourceCoordinates.getX(),scaledSourceCoordinates.getY(),scaledTargetCoordinates.getX(),scaledTargetCoordinates.getY(),BIAS};
          double[] outputs=cppn.process(inputs);
          boolean expressLink=Math.abs(outputs[outputIndex]) > CommonConstants.linkExpressionThreshold;
          if (expressLink) {
            long sourceID=getInnovationID(X1,Y1,s1Index,subs);
            long targetID=getInnovationID(X2,Y2,s2Index,subs);
            double weight=NetworkUtil.calculateWeight(outputs[outputIndex]);
            linksSoFar.add(new LinkGene(sourceID,targetID,weight,innovationID++,false));
          }
        }
      }
    }
  }
}"
39266,"/** 
 * creates an array list containing all the nodes from all the substrates
 * @param subs list of substrates extracted from domain
 * @return array list of NodeGenes from substrates
 */
public ArrayList<NodeGene> createSubstrateNodes(List<Substrate> subs){
  ArrayList<NodeGene> newNodes=new ArrayList<NodeGene>();
  for (int i=0; i < subs.size(); i++) {
    for (int x=0; x < subs.get(i).size.t1; x++) {
      for (int y=0; y < subs.get(i).size.t2; y++) {
        newNodes.add(new NodeGene(CommonConstants.ftype,subs.get(i).getStype(),innovationID++));
      }
    }
  }
  return newNodes;
}","/** 
 * creates an array list containing all the nodes from all the substrates
 * @param subs list of substrates extracted from domain
 * @return array list of NodeGenes from substrates
 */
public ArrayList<NodeGene> createSubstrateNodes(List<Substrate> subs){
  ArrayList<NodeGene> newNodes=new ArrayList<NodeGene>();
  for (int i=0; i < subs.size(); i++) {
    for (int y=0; y < subs.get(i).size.t2; y++) {
      for (int x=0; x < subs.get(i).size.t1; x++) {
        newNodes.add(new NodeGene(CommonConstants.ftype,subs.get(i).getStype(),innovationID++));
      }
    }
  }
  return newNodes;
}"
39267,"/** 
 * Activate all neurons in layer with specified activation function
 * @param nodes 2D array of pre-activated neuron sums
 * @param ftype Valid activation function type in ActivationFunctions
 */
public static void activateLayer(double[][] nodes,int ftype){
  for (int i=0; i < nodes.length; i++) {
    for (int j=0; j < nodes[0].length; j++) {
      if (i == 0 && j == 0)       System.out.println(""String_Node_Str"" + nodes[i][j]);
      nodes[i][j]=ActivationFunctions.activation(ftype,nodes[i][j]);
      if (i == 0 && j == 0)       System.out.println(""String_Node_Str"" + nodes[i][j]);
    }
  }
}","/** 
 * Activate all neurons in layer with specified activation function
 * @param nodes 2D array of pre-activated neuron sums
 * @param ftype Valid activation function type in ActivationFunctions
 */
public static void activateLayer(double[][] nodes,int ftype){
  for (int i=0; i < nodes.length; i++) {
    for (int j=0; j < nodes[0].length; j++) {
      nodes[i][j]=ActivationFunctions.activation(ftype,nodes[i][j]);
    }
  }
}"
39268,"@Override public String toString(){
  System.out.println(""String_Node_Str"" + connections.size());
  String result=""String_Node_Str"";
  result+=numInputs + ""String_Node_Str"";
  result+=numOutputs + ""String_Node_Str"";
  result+=ActivationFunctions.activationName(ftype) + ""String_Node_Str"";
  for (  MLPConnection connection : connections) {
    for (int X1=0; X1 < connection.connection.length; X1++) {
      for (int Y1=0; Y1 < connection.connection[0].length; Y1++) {
        for (int X2=0; X2 < connection.connection[0][0].length; X2++) {
          for (int Y2=0; Y2 < connection.connection[0][0][0].length; Y2++) {
            result+=connection.connects.t1 + ""String_Node_Str"" + X1+ ""String_Node_Str""+ Y1+ ""String_Node_Str""+ ""String_Node_Str""+ connection.connection[X1][Y1][X2][Y2]+ ""String_Node_Str""+ connection.connects.t2+ ""String_Node_Str""+ X2+ ""String_Node_Str""+ Y2+ ""String_Node_Str""+ ""String_Node_Str"";
          }
        }
      }
    }
  }
  return result;
}","@Override public String toString(){
  String result=""String_Node_Str"";
  result+=numInputs + ""String_Node_Str"";
  result+=numOutputs + ""String_Node_Str"";
  result+=ActivationFunctions.activationName(ftype) + ""String_Node_Str"";
  for (  MLPConnection connection : connections) {
    for (int X1=0; X1 < connection.connection.length; X1++) {
      for (int Y1=0; Y1 < connection.connection[0].length; Y1++) {
        for (int X2=0; X2 < connection.connection[0][0].length; X2++) {
          for (int Y2=0; Y2 < connection.connection[0][0][0].length; Y2++) {
            result+=connection.connects.t1 + ""String_Node_Str"" + X1+ ""String_Node_Str""+ Y1+ ""String_Node_Str""+ ""String_Node_Str""+ connection.connection[X1][Y1][X2][Y2]+ ""String_Node_Str""+ connection.connects.t2+ ""String_Node_Str""+ X2+ ""String_Node_Str""+ Y2+ ""String_Node_Str""+ ""String_Node_Str"";
          }
        }
      }
    }
  }
  return result;
}"
39269,"@Test public void testProcess(){
  double[] inputs=new double[25];
  for (double i=0; i < inputs.length; i++) {
    inputs[(int)i]=(1 + i) / inputs.length;
  }
  System.out.println(""String_Node_Str"" + Arrays.toString(inputs));
  mlp.flush();
  double[] outputs=mlp.process(inputs);
  System.out.println(mlp);
  System.out.println(""String_Node_Str"" + Arrays.toString(outputs));
  assertEquals(outputs.length,4);
  TWEANN tweann=hcppn.getPhenotype();
  System.out.println(tweann);
  double[] tweannOut=tweann.process(inputs);
  System.out.println(""String_Node_Str"" + Arrays.toString(tweannOut));
  MiscUtil.waitForReadStringAndEnterKeyPress();
  assertEquals(outputs.length,tweannOut.length);
  for (int i=0; i < outputs.length; i++) {
    assertEquals(outputs[i],tweannOut[i],.0001);
  }
}","@Test public void testProcess(){
  double[] inputs=new double[9];
  for (double i=0; i < inputs.length; i++) {
    inputs[(int)i]=(1 + i) / inputs.length;
  }
  System.out.println(""String_Node_Str"" + Arrays.toString(inputs));
  mlp.flush();
  double[] outputs=mlp.process(inputs);
  System.out.println(mlp);
  System.out.println(""String_Node_Str"" + Arrays.toString(outputs));
  assertEquals(outputs.length,4);
  TWEANN tweann=hcppn.getPhenotype();
  System.out.println(tweann);
  double[] tweannOut=tweann.process(inputs);
  System.out.println(""String_Node_Str"" + Arrays.toString(tweannOut));
  assertEquals(outputs.length,tweannOut.length);
  for (int i=0; i < outputs.length; i++) {
    assertEquals(outputs[i],tweannOut[i],.0001);
  }
}"
39270,"@Test public void doubleArrayFrom2DdoubleArray_test(){
  double[][] inputs={{1,2,3},{4,5,6},{7,8,9}};
  double[] outputs={1,2,3,4,5,6,7,8,9};
  assertTrue(Arrays.equals(outputs,ArrayUtil.doubleArrayFrom2DdoubleArray(inputs)));
}","@Test public void doubleArrayFrom2DdoubleArray_test(){
  double[][] inputs={{1,2,3},{4,5,6},{7,8,9}};
  double[] outputs={1,2,3,4,5,6,7,8,9};
  assertTrue(Arrays.equals(outputs,ArrayUtil.doubleArrayFrom2DdoubleArrayColMajor(inputs)));
}"
39271,"@Override public double fitness(Organism<T> individual){
  TorusAgent[] prey=game.getPrey();
  double score=0;
  for (int i=0; i < prey.length; i++) {
    if (prey[i] != null) {
      score-=StatisticsUtilities.sum(prey[i].distances(prey));
    }
  }
  return score;
}","@Override public double fitness(Organism<T> individual){
  TorusAgent[] prey=game.getPrey();
  TorusAgent[] filteredPrey=ArrayUtil.filterNull(prey);
  double score=0;
  for (int i=0; i < filteredPrey.length; i++) {
    score-=StatisticsUtilities.sum(filteredPrey[i].distances(filteredPrey));
  }
  return score;
}"
39272,"/** 
 * Load important classes from class parameters. Other important experiment setup also occurs. Perhaps the most important classes that always need to be loaded at the task, the experiment,  and the ea. These get stored in public static  variables of this class so they are easily accessible from all parts of the code.
 */
@SuppressWarnings(""String_Node_Str"") public static void loadClasses(){
  try {
    ActivationFunctions.resetFunctionSet();
    setupSaveDirectory();
    fitnessFunctions=new ArrayList<ArrayList<String>>();
    fitnessFunctions.add(new ArrayList<String>());
    aggregationOverrides=new ArrayList<Statistic>();
    boolean loadFrom=!Parameters.parameters.stringParameter(""String_Node_Str"").equals(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    EvolutionaryHistory.initGenotypeIds();
    weightPerturber=(RandomGenerator)ClassCreation.createObject(""String_Node_Str"");
    setupCrossover();
    RLGlueInitialization.setupRLGlue();
    setupFunctionOptimization();
    System.out.println(""String_Node_Str"");
    if (taskHasSubnetworks()) {
      modesToTrack=Parameters.parameters.integerParameter(""String_Node_Str"");
    }
 else {
      int multitaskModes=CommonConstants.multitaskModules;
      if (!CommonConstants.hierarchicalMultitask && multitaskModes > 1) {
        modesToTrack=multitaskModes;
      }
    }
    task=(Task)ClassCreation.createObject(""String_Node_Str"");
    boolean coevolution=false;
    if (Parameters.parameters.booleanParameter(""String_Node_Str"") && Parameters.parameters.stringParameter(""String_Node_Str"").equals(""String_Node_Str"") && Parameters.parameters.integerParameter(""String_Node_Str"") == 0) {
      System.out.println(""String_Node_Str"");
      Parameters.parameters.setDouble(""String_Node_Str"",0.999);
    }
    if (task instanceof MsPacManTask) {
      MsPacManInitialization.setupGenotypePoolsForMsPacman();
      System.out.println(""String_Node_Str"");
      pacmanInputOutputMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      if (MMNEAT.pacmanInputOutputMediator instanceof VariableDirectionBlockLoadedInputOutputMediator) {
        directionalSafetyFunction=(VariableDirectionBlock)ClassCreation.createObject(""String_Node_Str"");
        ensembleArbitrator=(MsPacManEnsembleArbitrator)ClassCreation.createObject(""String_Node_Str"");
      }
      String preferenceNet=Parameters.parameters.stringParameter(""String_Node_Str"");
      String multitaskNet=Parameters.parameters.stringParameter(""String_Node_Str"");
      if (multitaskNet != null && !multitaskNet.isEmpty()) {
        MMNEAT.sharedMultitaskNetwork=(TWEANNGenotype)Easy.load(multitaskNet);
        if (CommonConstants.showNetworks) {
          DrawingPanel panel=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
          MMNEAT.sharedMultitaskNetwork.getPhenotype().draw(panel);
        }
        setNNInputParameters(pacmanInputOutputMediator.numIn(),MMNEAT.sharedMultitaskNetwork.numModules);
      }
 else       if (preferenceNet != null && !preferenceNet.isEmpty()) {
        MMNEAT.sharedPreferenceNetwork=(TWEANNGenotype)Easy.load(preferenceNet);
        if (CommonConstants.showNetworks) {
          DrawingPanel panel=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
          MMNEAT.sharedPreferenceNetwork.getPhenotype().draw(panel);
        }
        setNNInputParameters(pacmanInputOutputMediator.numIn(),MMNEAT.sharedPreferenceNetwork.numOut);
      }
 else       if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"");
        ghostsInputOutputMediator=new GhostsCheckEachDirectionMediator();
        setNNInputParameters(ghostsInputOutputMediator.numIn(),ghostsInputOutputMediator.numOut());
      }
 else {
        setNNInputParameters(pacmanInputOutputMediator.numIn(),pacmanInputOutputMediator.numOut());
      }
      MsPacManInitialization.setupMsPacmanParameters();
      if (CommonConstants.multitaskModules > 1) {
        pacmanMultitaskScheme=(MsPacManModeSelector)ClassCreation.createObject(""String_Node_Str"");
      }
    }
 else     if (task instanceof CooperativeMsPacManTask) {
      System.out.println(""String_Node_Str"");
      coevolution=true;
      EvolutionaryHistory.initInnovationHistory();
      MsPacManInitialization.setupMsPacmanParameters();
      if (task instanceof CooperativeGhostMonitorNetworksMsPacManTask) {
        MsPacManInitialization.setupCooperativeCoevolutionGhostMonitorsForMsPacman();
      }
 else       if (task instanceof CooperativeSubtaskSelectorMsPacManTask) {
        MsPacManInitialization.setupCooperativeCoevolutionSelectorForMsPacman();
      }
 else       if (task instanceof CooperativeSubtaskCombinerMsPacManTask) {
        MsPacManInitialization.setupCooperativeCoevolutionCombinerForMsPacman();
      }
 else       if (task instanceof CooperativeNonHierarchicalMultiNetMsPacManTask) {
        MsPacManInitialization.setupCooperativeCoevolutionNonHierarchicalForMsPacman();
      }
 else       if (task instanceof CooperativeCheckEachMultitaskSelectorMsPacManTask) {
        MsPacManInitialization.setupCooperativeCoevolutionCheckEachMultitaskPreferenceNetForMsPacman();
      }
    }
 else     if (task instanceof RLGlueTask) {
      setNNInputParameters(rlGlueExtractor.numFeatures(),RLGlueTask.agent.getNumberOutputs());
    }
 else     if (task instanceof Breve2DTask) {
      System.out.println(""String_Node_Str"");
      Breve2DDynamics dynamics=(Breve2DDynamics)ClassCreation.createObject(""String_Node_Str"");
      setNNInputParameters(dynamics.numInputSensors(),NNBreve2DMonster.NUM_OUTPUTS);
    }
 else     if (task instanceof TorusPredPreyTask) {
      System.out.println(""String_Node_Str"");
      int numInputs=determineNumPredPreyInputs();
      NetworkTask t=(NetworkTask)task;
      setNNInputParameters(numInputs,t.outputLabels().length);
    }
 else     if (task instanceof CompetitiveHomogenousPredatorsVsPreyTask) {
      System.out.println(""String_Node_Str"");
      coevolution=true;
      int numPredInputs=determineNumPredPreyInputs(true);
      int numPreyInputs=determineNumPredPreyInputs(false);
      int numPredOutputs=TorusPredPreyTask.outputLabels(true).length;
      int numPreyOutputs=TorusPredPreyTask.outputLabels(false).length;
      genotypeExamples=new ArrayList<Genotype>(2);
      setNNInputParameters(numPredInputs,numPredOutputs);
      genotype=(Genotype)ClassCreation.createObject(""String_Node_Str"");
      if (genotype instanceof TWEANNGenotype) {
        ((TWEANNGenotype)genotype).archetypeIndex=0;
      }
      genotypeExamples.add(genotype.newInstance());
      setNNInputParameters(numPreyInputs,numPreyOutputs);
      genotype=(Genotype)ClassCreation.createObject(""String_Node_Str"");
      if (genotype instanceof TWEANNGenotype) {
        ((TWEANNGenotype)genotype).archetypeIndex=1;
      }
      genotypeExamples.add(genotype.newInstance());
      prepareCoevolutionArchetypes();
    }
 else     if (task instanceof GroupTorusPredPreyTask) {
      System.out.println(""String_Node_Str"");
      coevolution=true;
      int numInputs=determineNumPredPreyInputs();
      NetworkTask t=(NetworkTask)task;
      setNNInputParameters(numInputs,t.outputLabels().length);
      genotype=(Genotype)ClassCreation.createObject(""String_Node_Str"");
      int numAgents=(task instanceof CooperativePredatorsVsStaticPreyTask) ? Parameters.parameters.integerParameter(""String_Node_Str"") : Parameters.parameters.integerParameter(""String_Node_Str"");
      genotypeExamples=new ArrayList<Genotype>(numAgents);
      for (int i=0; i < numAgents; i++) {
        if (genotype instanceof TWEANNGenotype) {
          ((TWEANNGenotype)genotype).archetypeIndex=i;
        }
        genotypeExamples.add(genotype.newInstance());
      }
      prepareCoevolutionArchetypes();
    }
 else     if (task instanceof UT2004Task) {
      System.out.println(""String_Node_Str"");
      UT2004Task utTask=(UT2004Task)task;
      setNNInputParameters(utTask.sensorModel.numberOfSensors(),utTask.outputModel.numberOfOutputs());
    }
 else     if (task instanceof MatchDataTask) {
      System.out.println(""String_Node_Str"");
      MatchDataTask t=(MatchDataTask)task;
      setNNInputParameters(t.numInputs(),t.numOutputs());
    }
 else     if (task instanceof VizDoomTask) {
      System.out.println(""String_Node_Str"");
      VizDoomTask t=(VizDoomTask)task;
      setNNInputParameters(t.numInputs(),t.numActions());
    }
 else     if (task instanceof PicbreederTask) {
      System.out.println(""String_Node_Str"");
      setNNInputParameters(PicbreederTask.CPPN_NUM_INPUTS,PicbreederTask.CPPN_NUM_OUTPUTS);
    }
 else     if (task instanceof HyperNEATDummyTask) {
      System.out.println(""String_Node_Str"");
    }
 else     if (task instanceof MarioTask) {
      setNNInputParameters(10,Scene.keys.length);
      System.out.println(""String_Node_Str"");
    }
 else     if (task == null) {
      System.out.println(""String_Node_Str"");
      setNNInputParameters(5,3);
    }
 else {
      System.out.println(""String_Node_Str"");
      System.out.println(task);
      System.exit(1);
    }
    if (CommonConstants.hyperNEAT) {
      System.out.println(""String_Node_Str"");
      hyperNEATOverrides();
    }
    setupMetaHeuristics();
    if (!loadFrom) {
      System.out.println(""String_Node_Str"");
      ea=(GenerationalEA)ClassCreation.createObject(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    String seedGenotype=Parameters.parameters.stringParameter(""String_Node_Str"");
    if (task instanceof MsPacManTask && Parameters.parameters.booleanParameter(""String_Node_Str"") && CommonConstants.multitaskModules == 2) {
      System.out.println(""String_Node_Str"");
      String ghostDir=Parameters.parameters.stringParameter(""String_Node_Str"");
      String pillDir=Parameters.parameters.stringParameter(""String_Node_Str"");
      String lastSavedDirectory=Parameters.parameters.stringParameter(""String_Node_Str"");
      if (lastSavedDirectory.isEmpty()) {
        if (!ghostDir.isEmpty() && !pillDir.isEmpty()) {
          MsPacManInitialization.setupMultitaskSeedPopulationForMsPacman(ghostDir,pillDir);
        }
 else {
          MsPacManInitialization.setupSingleMultitaskSeedForMsPacman();
        }
      }
      System.out.println(""String_Node_Str"");
      MsPacManControllerInputOutputMediator ghostMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      MsPacManControllerInputOutputMediator pillMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      pacmanInputOutputMediator=new MultipleInputOutputMediator(new MsPacManControllerInputOutputMediator[]{ghostMediator,pillMediator});
      setNNInputParameters(pacmanInputOutputMediator.numIn(),pacmanInputOutputMediator.numOut());
    }
 else     if (seedGenotype.isEmpty()) {
      genotype=(Genotype)ClassCreation.createObject(""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"" + seedGenotype);
      genotype=((Genotype)Easy.load(seedGenotype)).copy();
      seedExample=true;
    }
    setupTWEANNGenotypeDataTracking(coevolution);
    System.out.println(""String_Node_Str"");
    experiment=(Experiment)ClassCreation.createObject(""String_Node_Str"");
    experiment.init();
    if (!loadFrom && Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      if (Parameters.parameters.booleanParameter(""String_Node_Str"") && !coevolution) {
        performanceLog=new PerformanceLog(""String_Node_Str"");
      }
      if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        EvolutionaryHistory.initLineageAndMutationLogs();
      }
    }
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"" + ex);
    ex.printStackTrace();
  }
}","/** 
 * Load important classes from class parameters. Other important experiment setup also occurs. Perhaps the most important classes that always need to be loaded at the task, the experiment,  and the ea. These get stored in public static  variables of this class so they are easily accessible from all parts of the code.
 */
@SuppressWarnings(""String_Node_Str"") public static void loadClasses(){
  try {
    ActivationFunctions.resetFunctionSet();
    setupSaveDirectory();
    fitnessFunctions=new ArrayList<ArrayList<String>>();
    fitnessFunctions.add(new ArrayList<String>());
    aggregationOverrides=new ArrayList<Statistic>();
    boolean loadFrom=!Parameters.parameters.stringParameter(""String_Node_Str"").equals(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    EvolutionaryHistory.initGenotypeIds();
    weightPerturber=(RandomGenerator)ClassCreation.createObject(""String_Node_Str"");
    setupCrossover();
    RLGlueInitialization.setupRLGlue();
    setupFunctionOptimization();
    System.out.println(""String_Node_Str"");
    if (taskHasSubnetworks()) {
      modesToTrack=Parameters.parameters.integerParameter(""String_Node_Str"");
    }
 else {
      int multitaskModes=CommonConstants.multitaskModules;
      if (!CommonConstants.hierarchicalMultitask && multitaskModes > 1) {
        modesToTrack=multitaskModes;
      }
    }
    task=(Task)ClassCreation.createObject(""String_Node_Str"");
    boolean coevolution=false;
    if (Parameters.parameters.booleanParameter(""String_Node_Str"") && Parameters.parameters.stringParameter(""String_Node_Str"").equals(""String_Node_Str"") && Parameters.parameters.integerParameter(""String_Node_Str"") == 0) {
      System.out.println(""String_Node_Str"");
      Parameters.parameters.setDouble(""String_Node_Str"",0.999);
    }
    if (task instanceof MsPacManTask) {
      MsPacManInitialization.setupGenotypePoolsForMsPacman();
      System.out.println(""String_Node_Str"");
      pacmanInputOutputMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      if (MMNEAT.pacmanInputOutputMediator instanceof VariableDirectionBlockLoadedInputOutputMediator) {
        directionalSafetyFunction=(VariableDirectionBlock)ClassCreation.createObject(""String_Node_Str"");
        ensembleArbitrator=(MsPacManEnsembleArbitrator)ClassCreation.createObject(""String_Node_Str"");
      }
      String preferenceNet=Parameters.parameters.stringParameter(""String_Node_Str"");
      String multitaskNet=Parameters.parameters.stringParameter(""String_Node_Str"");
      if (multitaskNet != null && !multitaskNet.isEmpty()) {
        MMNEAT.sharedMultitaskNetwork=(TWEANNGenotype)Easy.load(multitaskNet);
        if (CommonConstants.showNetworks) {
          DrawingPanel panel=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
          MMNEAT.sharedMultitaskNetwork.getPhenotype().draw(panel);
        }
        setNNInputParameters(pacmanInputOutputMediator.numIn(),MMNEAT.sharedMultitaskNetwork.numModules);
      }
 else       if (preferenceNet != null && !preferenceNet.isEmpty()) {
        MMNEAT.sharedPreferenceNetwork=(TWEANNGenotype)Easy.load(preferenceNet);
        if (CommonConstants.showNetworks) {
          DrawingPanel panel=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
          MMNEAT.sharedPreferenceNetwork.getPhenotype().draw(panel);
        }
        setNNInputParameters(pacmanInputOutputMediator.numIn(),MMNEAT.sharedPreferenceNetwork.numOut);
      }
 else       if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"");
        ghostsInputOutputMediator=new GhostsCheckEachDirectionMediator();
        setNNInputParameters(ghostsInputOutputMediator.numIn(),ghostsInputOutputMediator.numOut());
      }
 else {
        setNNInputParameters(pacmanInputOutputMediator.numIn(),pacmanInputOutputMediator.numOut());
      }
      MsPacManInitialization.setupMsPacmanParameters();
      if (CommonConstants.multitaskModules > 1) {
        pacmanMultitaskScheme=(MsPacManModeSelector)ClassCreation.createObject(""String_Node_Str"");
      }
    }
 else     if (task instanceof CooperativeMsPacManTask) {
      System.out.println(""String_Node_Str"");
      coevolution=true;
      EvolutionaryHistory.initInnovationHistory();
      MsPacManInitialization.setupMsPacmanParameters();
      if (task instanceof CooperativeGhostMonitorNetworksMsPacManTask) {
        MsPacManInitialization.setupCooperativeCoevolutionGhostMonitorsForMsPacman();
      }
 else       if (task instanceof CooperativeSubtaskSelectorMsPacManTask) {
        MsPacManInitialization.setupCooperativeCoevolutionSelectorForMsPacman();
      }
 else       if (task instanceof CooperativeSubtaskCombinerMsPacManTask) {
        MsPacManInitialization.setupCooperativeCoevolutionCombinerForMsPacman();
      }
 else       if (task instanceof CooperativeNonHierarchicalMultiNetMsPacManTask) {
        MsPacManInitialization.setupCooperativeCoevolutionNonHierarchicalForMsPacman();
      }
 else       if (task instanceof CooperativeCheckEachMultitaskSelectorMsPacManTask) {
        MsPacManInitialization.setupCooperativeCoevolutionCheckEachMultitaskPreferenceNetForMsPacman();
      }
    }
 else     if (task instanceof RLGlueTask) {
      setNNInputParameters(rlGlueExtractor.numFeatures(),RLGlueTask.agent.getNumberOutputs());
    }
 else     if (task instanceof Breve2DTask) {
      System.out.println(""String_Node_Str"");
      Breve2DDynamics dynamics=(Breve2DDynamics)ClassCreation.createObject(""String_Node_Str"");
      setNNInputParameters(dynamics.numInputSensors(),NNBreve2DMonster.NUM_OUTPUTS);
    }
 else     if (task instanceof TorusPredPreyTask) {
      System.out.println(""String_Node_Str"");
      int numInputs=determineNumPredPreyInputs();
      NetworkTask t=(NetworkTask)task;
      setNNInputParameters(numInputs,t.outputLabels().length);
    }
 else     if (task instanceof CompetitiveHomogenousPredatorsVsPreyTask) {
      System.out.println(""String_Node_Str"");
      coevolution=true;
      int numPredInputs=determineNumPredPreyInputs(true);
      int numPreyInputs=determineNumPredPreyInputs(false);
      int numPredOutputs=TorusPredPreyTask.outputLabels(true).length;
      int numPreyOutputs=TorusPredPreyTask.outputLabels(false).length;
      genotypeExamples=new ArrayList<Genotype>(2);
      setNNInputParameters(numPredInputs,numPredOutputs);
      genotype=(Genotype)ClassCreation.createObject(""String_Node_Str"");
      if (genotype instanceof TWEANNGenotype) {
        ((TWEANNGenotype)genotype).archetypeIndex=0;
      }
      genotypeExamples.add(genotype.newInstance());
      setNNInputParameters(numPreyInputs,numPreyOutputs);
      genotype=(Genotype)ClassCreation.createObject(""String_Node_Str"");
      if (genotype instanceof TWEANNGenotype) {
        ((TWEANNGenotype)genotype).archetypeIndex=1;
      }
      genotypeExamples.add(genotype.newInstance());
      prepareCoevolutionArchetypes();
    }
 else     if (task instanceof GroupTorusPredPreyTask) {
      System.out.println(""String_Node_Str"");
      coevolution=true;
      int numInputs=determineNumPredPreyInputs();
      NetworkTask t=(NetworkTask)task;
      setNNInputParameters(numInputs,t.outputLabels().length);
      genotype=(Genotype)ClassCreation.createObject(""String_Node_Str"");
      int numAgents=(task instanceof CooperativePredatorsVsStaticPreyTask) ? Parameters.parameters.integerParameter(""String_Node_Str"") : Parameters.parameters.integerParameter(""String_Node_Str"");
      System.out.println(""String_Node_Str"" + numAgents + ""String_Node_Str"");
      genotypeExamples=new ArrayList<Genotype>(numAgents);
      for (int i=0; i < numAgents; i++) {
        if (genotype instanceof TWEANNGenotype) {
          ((TWEANNGenotype)genotype).archetypeIndex=i;
        }
        genotypeExamples.add(genotype.newInstance());
      }
      prepareCoevolutionArchetypes();
    }
 else     if (task instanceof UT2004Task) {
      System.out.println(""String_Node_Str"");
      UT2004Task utTask=(UT2004Task)task;
      setNNInputParameters(utTask.sensorModel.numberOfSensors(),utTask.outputModel.numberOfOutputs());
    }
 else     if (task instanceof MatchDataTask) {
      System.out.println(""String_Node_Str"");
      MatchDataTask t=(MatchDataTask)task;
      setNNInputParameters(t.numInputs(),t.numOutputs());
    }
 else     if (task instanceof VizDoomTask) {
      System.out.println(""String_Node_Str"");
      VizDoomTask t=(VizDoomTask)task;
      setNNInputParameters(t.numInputs(),t.numActions());
    }
 else     if (task instanceof PicbreederTask) {
      System.out.println(""String_Node_Str"");
      setNNInputParameters(PicbreederTask.CPPN_NUM_INPUTS,PicbreederTask.CPPN_NUM_OUTPUTS);
    }
 else     if (task instanceof HyperNEATDummyTask) {
      System.out.println(""String_Node_Str"");
    }
 else     if (task instanceof MarioTask) {
      setNNInputParameters(10,Scene.keys.length);
      System.out.println(""String_Node_Str"");
    }
 else     if (task == null) {
      System.out.println(""String_Node_Str"");
      setNNInputParameters(5,3);
    }
 else {
      System.out.println(""String_Node_Str"");
      System.out.println(task);
      System.exit(1);
    }
    if (CommonConstants.hyperNEAT) {
      System.out.println(""String_Node_Str"");
      hyperNEATOverrides();
    }
    setupMetaHeuristics();
    if (!loadFrom) {
      System.out.println(""String_Node_Str"");
      ea=(GenerationalEA)ClassCreation.createObject(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    String seedGenotype=Parameters.parameters.stringParameter(""String_Node_Str"");
    if (task instanceof MsPacManTask && Parameters.parameters.booleanParameter(""String_Node_Str"") && CommonConstants.multitaskModules == 2) {
      System.out.println(""String_Node_Str"");
      String ghostDir=Parameters.parameters.stringParameter(""String_Node_Str"");
      String pillDir=Parameters.parameters.stringParameter(""String_Node_Str"");
      String lastSavedDirectory=Parameters.parameters.stringParameter(""String_Node_Str"");
      if (lastSavedDirectory.isEmpty()) {
        if (!ghostDir.isEmpty() && !pillDir.isEmpty()) {
          MsPacManInitialization.setupMultitaskSeedPopulationForMsPacman(ghostDir,pillDir);
        }
 else {
          MsPacManInitialization.setupSingleMultitaskSeedForMsPacman();
        }
      }
      System.out.println(""String_Node_Str"");
      MsPacManControllerInputOutputMediator ghostMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      MsPacManControllerInputOutputMediator pillMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      pacmanInputOutputMediator=new MultipleInputOutputMediator(new MsPacManControllerInputOutputMediator[]{ghostMediator,pillMediator});
      setNNInputParameters(pacmanInputOutputMediator.numIn(),pacmanInputOutputMediator.numOut());
    }
 else     if (seedGenotype.isEmpty()) {
      genotype=(Genotype)ClassCreation.createObject(""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"" + seedGenotype);
      genotype=((Genotype)Easy.load(seedGenotype)).copy();
      seedExample=true;
    }
    setupTWEANNGenotypeDataTracking(coevolution);
    System.out.println(""String_Node_Str"");
    experiment=(Experiment)ClassCreation.createObject(""String_Node_Str"");
    experiment.init();
    if (!loadFrom && Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      if (Parameters.parameters.booleanParameter(""String_Node_Str"") && !coevolution) {
        performanceLog=new PerformanceLog(""String_Node_Str"");
      }
      if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        EvolutionaryHistory.initLineageAndMutationLogs();
      }
    }
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"" + ex);
    ex.printStackTrace();
  }
}"
39273,"@Override public TorusPredPreyTask<T> getLonerTaskInstance(){
  if (task == null) {
    task=new TorusEvolvedPredatorsVsStaticPreyTask<T>();
    while (task.objectives.size() < numberOfPopulations()) {
      task.addAllObjectives(task.objectives.size());
    }
  }
  return task;
}","@Override public TorusPredPreyTask<T> getLonerTaskInstance(){
  if (task == null) {
    task=new TorusEvolvedPredatorsVsStaticPreyTask<T>();
    while (task.objectives.size() < Parameters.parameters.integerParameter(""String_Node_Str"")) {
      task.addAllObjectives(task.objectives.size());
    }
  }
  return task;
}"
39274,"@Override public TorusPredPreyTask<T> getLonerTaskInstance(){
  if (task == null) {
    task=new TorusEvolvedPreyVsStaticPredatorsTask<T>();
    while (task.objectives.size() < numberOfPopulations()) {
      task.addAllObjectives(task.objectives.size());
    }
  }
  return task;
}","@Override public TorusPredPreyTask<T> getLonerTaskInstance(){
  if (task == null) {
    task=new TorusEvolvedPreyVsStaticPredatorsTask<T>();
    while (task.objectives.size() < Parameters.parameters.integerParameter(""String_Node_Str"")) {
      task.addAllObjectives(task.objectives.size());
    }
  }
  return task;
}"
39275,"/** 
 * Actually returns both the hypervolume (as a Double) and the size of the Pareto front (the Integer)
 * @param dirPrefix Dir of the specific method
 * @param run The number of the run
 * @param filePrefix Prefix for all data files
 * @param fileMiddle Unique file name part
 * @param generation Which generation to read
 * @param fileExtension How to end file
 * @return pair with hypervolume and the size of the Pareto front
 */
public static Pair<Double,Integer> hypervolumeForGeneration(String dirPrefix,int run,String filePrefix,String fileMiddle,int generation,String fileExtension){
  Hypervolume qualityIndicator=new Hypervolume();
  String file=dirPrefix + run + ""String_Node_Str""+ filePrefix+ run+ fileMiddle+ generation+ ""String_Node_Str""+ fileExtension;
  double[][] fileData=qualityIndicator.utils_.readFront(file);
  double[][] solutions;
  double[][] step1=dropColumn(fileData,0);
  solutions=dropColumn(step1,0);
  Task task=MMNEAT.task;
  int numObjectives=task.numObjectives();
  while (solutions[0].length > numObjectives) {
    solutions=dropColumn(solutions,solutions[0].length - 1);
  }
  double[] mins=MMNEAT.task.minScores();
  for (int i=0; i < solutions.length; i++) {
    for (int j=0; j < solutions[0].length; j++) {
      solutions[i][j]-=mins[j];
    }
  }
  int noNondominatedPoints=qualityIndicator.filterNondominatedSet(solutions,solutions.length,solutions[0].length);
  double value=qualityIndicator.calculateHypervolume(solutions,solutions.length,solutions[0].length);
  return new Pair<Double,Integer>(value,noNondominatedPoints);
}","/** 
 * Actually returns both the hypervolume (as a Double) and the size of the Pareto front (the Integer)
 * @param dirPrefix Dir of the specific method
 * @param run The number of the run
 * @param filePrefix Prefix for all data files
 * @param fileMiddle Unique file name part
 * @param generation Which generation to read
 * @param fileExtension How to end file
 * @return pair with hypervolume and the size of the Pareto front
 */
public static Pair<Double,Integer> hypervolumeForGeneration(String dirPrefix,int run,String filePrefix,String fileMiddle,int generation,String fileExtension){
  Hypervolume qualityIndicator=new Hypervolume();
  String file=dirPrefix + run + ""String_Node_Str""+ filePrefix+ run+ fileMiddle+ generation+ ""String_Node_Str""+ fileExtension;
  double[][] fileData=qualityIndicator.utils_.readFront(file);
  double[][] solutions;
  double[][] step1=dropColumn(fileData,0);
  solutions=dropColumn(step1,0);
  Task task=MMNEAT.task;
  int numObjectives=-1;
  if (task instanceof LonerTask || task instanceof CooperativeMsPacManTask) {
    numObjectives=task.numObjectives();
  }
 else   if (task instanceof CooperativeTask) {
    numObjectives=((CooperativeTask)task).objectivesPerPopulation()[0];
  }
  while (solutions[0].length > numObjectives) {
    solutions=dropColumn(solutions,solutions[0].length - 1);
  }
  double[] mins=null;
  if (task instanceof LonerTask || task instanceof CooperativeMsPacManTask) {
    mins=MMNEAT.task.minScores();
  }
 else   if (task instanceof CooperativeTask) {
    mins=((CooperativeTask)task).minScores();
  }
  for (int i=0; i < solutions.length; i++) {
    for (int j=0; j < solutions[0].length; j++) {
      solutions[i][j]-=mins[j];
    }
  }
  int noNondominatedPoints=qualityIndicator.filterNondominatedSet(solutions,solutions.length,solutions[0].length);
  double value=qualityIndicator.calculateHypervolume(solutions,solutions.length,solutions[0].length);
  return new Pair<Double,Integer>(value,noNondominatedPoints);
}"
39276,"/** 
 * Does not make sense for the same reason. Each population has several min scores. This is why it cannot be overridden again.
 */
@Override public final double[] minScores(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","/** 
 * Does not make sense for the same reason. Each population has several min scores. This is why it cannot be overridden again.
 */
@Override public double[] minScores(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
39277,"@Override public ArrayList<Score> evaluate(Genotype[] team){
  ArrayList<Score> scores=new ArrayList<Score>();
  TorusPredPreyController[] predAgents=getPredAgents(team);
  TorusPredPreyController[] preyAgents=getPreyAgents(team);
  TorusPredPreyGame game=getLonerTaskInstance().runEval(predAgents,preyAgents);
  for (int i=0; i < numberOfPopulations(); i++) {
    double[] fitnesses=new double[objectivesPerPopulation()[i]];
    double[] otherStats=new double[otherStatsPerPopulation()[i]];
    Organism<T> organism=new NNTorusPredPreyAgent<T>(team[i],!task.preyEvolve);
    for (int j=0; j < fitnesses.length; j++) {
      fitnesses[j]=task.objectives.get(i).get(j).score(game,organism);
    }
    for (int j=0; j < otherStats.length; j++) {
      otherStats[j]=task.otherScores.get(i).get(j).score(game,organism);
    }
    scores.add(new Score(team[i],fitnesses,null,otherStats));
  }
  return scores;
}","@Override public ArrayList<Score> evaluate(Genotype[] team){
  ArrayList<Score> scores=new ArrayList<Score>();
  TorusPredPreyController[] predAgents=getPredAgents(team);
  TorusPredPreyController[] preyAgents=getPreyAgents(team);
  TorusPredPreyGame game=getLonerTaskInstance().runEval(predAgents,preyAgents);
  for (int i=0; i < numberOfPopulations(); i++) {
    double[] fitnesses=new double[objectivesPerPopulation()[i]];
    double[] otherStats=new double[otherStatsPerPopulation()[i]];
    Organism<T> organism=new NNTorusPredPreyAgent<T>(team[i],!task.preyEvolve);
    for (int j=0; j < fitnesses.length; j++) {
      fitnesses[j]=task.objectives.get(0).get(j).score(game,organism);
    }
    for (int j=0; j < otherStats.length; j++) {
      otherStats[j]=task.otherScores.get(0).get(j).score(game,organism);
    }
    scores.add(new Score(team[i],fitnesses,null,otherStats));
  }
  return scores;
}"
39278,"@Override public TorusPredPreyTask<T> getLonerTaskInstance(){
  if (task == null) {
    task=new TorusEvolvedPredatorsVsStaticPreyTask<T>();
  }
  return task;
}","@Override public TorusPredPreyTask<T> getLonerTaskInstance(){
  if (task == null) {
    task=new TorusEvolvedPredatorsVsStaticPreyTask<T>();
    while (task.objectives.size() < numberOfPopulations()) {
      task.addAllObjectives(task.objectives.size());
    }
  }
  return task;
}"
39279,"@Override public int[] otherStatsPerPopulation(){
  int scores=task.numOtherScores();
  int[] result=new int[Parameters.parameters.integerParameter(""String_Node_Str"")];
  for (int i=0; i < result.length; i++) {
    result[i]=scores;
  }
  return result;
}","@Override public int[] otherStatsPerPopulation(){
  int scores=task.numOtherScores();
  int[] result=new int[Parameters.parameters.integerParameter(""String_Node_Str"")];
  result[0]=scores;
  return result;
}"
39280,"@Override public TorusPredPreyTask<T> getLonerTaskInstance(){
  if (task == null) {
    task=new TorusEvolvedPreyVsStaticPredatorsTask<T>();
  }
  return task;
}","@Override public TorusPredPreyTask<T> getLonerTaskInstance(){
  if (task == null) {
    task=new TorusEvolvedPreyVsStaticPredatorsTask<T>();
    while (task.objectives.size() < numberOfPopulations()) {
      task.addAllObjectives(task.objectives.size());
    }
  }
  return task;
}"
39281,"@Override public int[] otherStatsPerPopulation(){
  int scores=task.numOtherScores();
  int[] result=new int[Parameters.parameters.integerParameter(""String_Node_Str"")];
  for (int i=0; i < result.length; i++) {
    result[i]=scores;
  }
  return result;
}","@Override public int[] otherStatsPerPopulation(){
  int scores=task.numOtherScores();
  int[] result=new int[Parameters.parameters.integerParameter(""String_Node_Str"")];
  result[0]=scores;
  return result;
}"
39282,"@Override public ArrayList<Score> evaluate(Genotype[] team){
  ArrayList<Score> scores=new ArrayList<Score>();
  TorusPredPreyController[] predAgents=getPredAgents(team);
  TorusPredPreyController[] preyAgents=getPreyAgents(team);
  TorusPredPreyGame game=getLonerTaskInstance().runEval(predAgents,preyAgents);
  for (int i=0; i < numberOfPopulations(); i++) {
    double[] fitnesses=new double[objectivesPerPopulation()[i]];
    double[] otherStats=new double[otherStatsPerPopulation()[i]];
    Organism<T> organism=new NNTorusPredPreyAgent<T>(team[i],!task.preyEvolve);
    for (int j=0; j < fitnesses.length; j++) {
      fitnesses[j]=task.objectives.get(0).get(j).score(game,organism);
    }
    for (int j=0; j < otherStats.length; j++) {
      otherStats[j]=task.otherScores.get(0).get(j).score(game,organism);
    }
    scores.add(new Score(team[i],fitnesses,null,otherStats));
  }
  return scores;
}","@Override public ArrayList<Score> evaluate(Genotype[] team){
  ArrayList<Score> scores=new ArrayList<Score>();
  TorusPredPreyController[] predAgents=getPredAgents(team);
  TorusPredPreyController[] preyAgents=getPreyAgents(team);
  TorusPredPreyGame game=getLonerTaskInstance().runEval(predAgents,preyAgents);
  for (int i=0; i < numberOfPopulations(); i++) {
    double[] fitnesses=new double[objectivesPerPopulation()[i]];
    double[] otherStats=new double[otherStatsPerPopulation()[i]];
    Organism<T> organism=new NNTorusPredPreyAgent<T>(team[i],!task.preyEvolve);
    for (int j=0; j < fitnesses.length; j++) {
      fitnesses[j]=task.objectives.get(i).get(j).score(game,organism);
    }
    for (int j=0; j < otherStats.length; j++) {
      otherStats[j]=task.otherScores.get(i).get(j).score(game,organism);
    }
    scores.add(new Score(team[i],fitnesses,null,otherStats));
  }
  return scores;
}"
39283,"/** 
 * Perform crossover between two TWEANN genotypes.
 * @param toModify = Copy of parent genotype. Is actually modified by the crossover, to be one of the offspring. It is modified via side-effects because it is not returned.
 * @param toReturn = The other parent. Not actually returned, but but the offspring that is returned by this method takes its basic structure from this genotype (unless excess crossover occurs)
 * @return One of the offspring of crossover is returned (the other modifiedvia side-effects)
 */
public Genotype<TWEANN> crossover(Genotype<TWEANN> toModify,Genotype<TWEANN> toReturn){
  includeExcess=RandomNumbers.randomGenerator.nextFloat() < includeExcessRate;
  TWEANNGenotype tg=(TWEANNGenotype)toReturn;
  TWEANNGenotype tm=(TWEANNGenotype)toModify;
  ArrayList<ArrayList<NodeGene>> alignedNodes=new ArrayList<ArrayList<NodeGene>>(2);
  try {
    alignedNodes.add(alignNodesToArchetype(tm.nodes,tg.archetypeIndex));
  }
 catch (  IllegalArgumentException e) {
    System.out.println(""String_Node_Str"" + tm.numOut);
    System.out.println(""String_Node_Str"" + tm.numModules);
    System.out.println(""String_Node_Str"" + tm.neuronsPerModule);
    e.printStackTrace();
    System.exit(1);
  }
  try {
    alignedNodes.add(alignNodesToArchetype(tg.nodes,tg.archetypeIndex));
  }
 catch (  IllegalArgumentException e) {
    System.out.println(""String_Node_Str"" + tg.numOut);
    System.out.println(""String_Node_Str"" + tg.numModules);
    System.out.println(""String_Node_Str"" + tg.neuronsPerModule);
    e.printStackTrace();
    System.exit(1);
  }
  ArrayList<ArrayList<NodeGene>> crossedNodes=cross(alignedNodes.get(0),alignedNodes.get(1));
  ArrayList<ArrayList<LinkGene>> alignedLinks=alignLinkGenes(((TWEANNGenotype)toModify).links,tg.links);
  ArrayList<ArrayList<LinkGene>> crossedLinks=cross(alignedLinks.get(0),alignedLinks.get(1));
  int[] originalAssociations=Arrays.copyOf(tm.moduleAssociations,tm.moduleAssociations.length);
  tm.nodes=crossedNodes.get(0);
  tm.links=crossedLinks.get(0);
  tm.calculateNumModules();
  if (CommonConstants.hierarchicalMultitask) {
    tm.crossModuleAssociations(originalAssociations,tg.moduleAssociations);
  }
  TWEANNGenotype result=new TWEANNGenotype(crossedNodes.get(1),crossedLinks.get(1),tg.neuronsPerModule,tg.standardMultitask,tg.hierarchicalMultitask,tg.archetypeIndex);
  result.setModuleUsage(Arrays.copyOf(tg.getModuleUsage(),tg.getModuleUsage().length));
  result.calculateNumModules();
  if (CommonConstants.hierarchicalMultitask) {
    result.crossModuleAssociations(tg.moduleAssociations,originalAssociations);
  }
  if (CommonConstants.meltAfterCrossover) {
    tm.meltNetwork();
    result.meltNetwork();
  }
 else {
    if (!tm.existsAlterableLink()) {
      if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        new MeltThenFreezePreferenceMutation().mutate(tm);
      }
 else       if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        new MeltThenFreezePolicyMutation().mutate(tm);
      }
 else {
        System.out.println(""String_Node_Str"");
        System.exit(1);
      }
    }
    if (!result.existsAlterableLink()) {
      if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        new MeltThenFreezePreferenceMutation().mutate(result);
      }
 else       if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        new MeltThenFreezePolicyMutation().mutate(result);
      }
 else {
        System.out.println(""String_Node_Str"");
        System.exit(1);
      }
    }
  }
  return result;
}","/** 
 * Perform crossover between two TWEANN genotypes.
 * @param toModify = Copy of parent genotype. Is actually modified by the crossover, to be one of the offspring. It is modified via side-effects because it is not returned.
 * @param toReturn = The other parent. Not actually returned, but but the offspring that is returned by this method takes its basic structure from this genotype (unless excess crossover occurs)
 * @return One of the offspring of crossover is returned (the other modifiedvia side-effects)
 */
public Genotype<TWEANN> crossover(Genotype<TWEANN> toModify,Genotype<TWEANN> toReturn){
}"
39284,"/** 
 * gets and returns the sensor labels for this task
 * @return sensor labels in an array of strings
 */
@Override public String[] sensorLabels(){
  return task.sensorLabels();
}","/** 
 * gets and returns the sensor labels for this task
 * @return sensor labels in an array of strings
 */
@Override public String[] sensorLabels(){
  return task.preyEvolve ? (new NNTorusPredPreyController(null,false)).sensorLabels() : (new NNTorusPredPreyController(null,true)).sensorLabels();
}"
39285,"/** 
 * An array containing a 1 if a block is present, and a 0 otherwise.
 * @param o
 * @return 
 */
@Override public double[] extract(Observation o){
  TetrisState state=TetrisAfterStateAgent.observationToTetrisState(o);
  double[] result=new double[state.worldState.length];
  for (int i=0; i < result.length; i++) {
    result[i]=Math.signum(state.worldState[i]);
  }
  return result;
}","/** 
 * An array containing a 1 if a block is present, and a 0 otherwise.
 * @param o
 * @return 
 */
@Override public double[] extract(Observation o){
  System.out.print(""String_Node_Str"");
  System.out.println(Parameters.parameters.booleanParameter(""String_Node_Str""));
  TetrisState state=TetrisAfterStateAgent.observationToTetrisState(o);
  double[] result=new double[state.worldState.length];
  for (int i=0; i < result.length; i++) {
    result[i]=Math.signum(state.worldState[i]);
  }
  return result;
}"
39286,"public static void loadClasses(){
  try {
    ActivationFunctions.initFunctionSet();
    setupSaveDirectory();
    fitnessFunctions=new ArrayList<String>();
    aggregationOverrides=new ArrayList<Statistic>();
    boolean loadFrom=!Parameters.parameters.stringParameter(""String_Node_Str"").equals(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    EvolutionaryHistory.initGenotypeIds();
    weightPerturber=(RandomGenerator)ClassCreation.createObject(""String_Node_Str"");
    setupCrossover();
    setupRLGlue();
    setupFunctionOptimization();
    System.out.println(""String_Node_Str"");
    if (taskHasSubnetworks()) {
      modesToTrack=Parameters.parameters.integerParameter(""String_Node_Str"");
    }
 else {
      int multitaskModes=CommonConstants.multitaskModules;
      if (!CommonConstants.hierarchicalMultitask && multitaskModes > 1) {
        modesToTrack=multitaskModes;
      }
    }
    task=(Task)ClassCreation.createObject(""String_Node_Str"");
    boolean coevolution=false;
    if (Parameters.parameters.booleanParameter(""String_Node_Str"") && Parameters.parameters.stringParameter(""String_Node_Str"").equals(""String_Node_Str"") && Parameters.parameters.integerParameter(""String_Node_Str"") == 0) {
      System.out.println(""String_Node_Str"");
      Parameters.parameters.setDouble(""String_Node_Str"",0.999);
    }
    if (task instanceof MsPacManTask) {
      setupGenotypePoolsForMsPacman();
      System.out.println(""String_Node_Str"");
      pacmanInputOutputMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      if (MMNEAT.pacmanInputOutputMediator instanceof VariableDirectionBlockLoadedInputOutputMediator) {
        directionalSafetyFunction=(VariableDirectionBlock)ClassCreation.createObject(""String_Node_Str"");
        ensembleArbitrator=(MsPacManEnsembleArbitrator)ClassCreation.createObject(""String_Node_Str"");
      }
      String preferenceNet=Parameters.parameters.stringParameter(""String_Node_Str"");
      String multitaskNet=Parameters.parameters.stringParameter(""String_Node_Str"");
      if (multitaskNet != null && !multitaskNet.isEmpty()) {
        MMNEAT.sharedMultitaskNetwork=(TWEANNGenotype)Easy.load(multitaskNet);
        if (CommonConstants.showNetworks) {
          DrawingPanel panel=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
          MMNEAT.sharedMultitaskNetwork.getPhenotype().draw(panel);
        }
        setNNInputParameters(pacmanInputOutputMediator.numIn(),MMNEAT.sharedMultitaskNetwork.numModules);
      }
 else       if (preferenceNet != null && !preferenceNet.isEmpty()) {
        MMNEAT.sharedPreferenceNetwork=(TWEANNGenotype)Easy.load(preferenceNet);
        if (CommonConstants.showNetworks) {
          DrawingPanel panel=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
          MMNEAT.sharedPreferenceNetwork.getPhenotype().draw(panel);
        }
        setNNInputParameters(pacmanInputOutputMediator.numIn(),MMNEAT.sharedPreferenceNetwork.numOut);
      }
 else       if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"");
        ghostsInputOutputMediator=new GhostsCheckEachDirectionMediator();
        setNNInputParameters(ghostsInputOutputMediator.numIn(),ghostsInputOutputMediator.numOut());
      }
 else {
        setNNInputParameters(pacmanInputOutputMediator.numIn(),pacmanInputOutputMediator.numOut());
      }
      setupMsPacmanParameters();
      if (CommonConstants.multitaskModules > 1) {
        pacmanMultitaskScheme=(MsPacManModeSelector)ClassCreation.createObject(""String_Node_Str"");
      }
    }
 else     if (task instanceof CooperativeMsPacManTask) {
      System.out.println(""String_Node_Str"");
      coevolution=true;
      EvolutionaryHistory.initInnovationHistory();
      setupMsPacmanParameters();
      if (task instanceof CooperativeGhostMonitorNetworksMsPacManTask) {
        setupCooperativeCoevolutionGhostMonitorsForMsPacman();
      }
 else       if (task instanceof CooperativeSubtaskSelectorMsPacManTask) {
        setupCooperativeCoevolutionSelectorForMsPacman();
      }
 else       if (task instanceof CooperativeSubtaskCombinerMsPacManTask) {
        setupCooperativeCoevolutionCombinerForMsPacman();
      }
 else       if (task instanceof CooperativeNonHierarchicalMultiNetMsPacManTask) {
        setupCooperativeCoevolutionNonHierarchicalForMsPacman();
      }
 else       if (task instanceof CooperativeCheckEachMultitaskSelectorMsPacManTask) {
        setupCooperativeCoevolutionCheckEachMultitaskPreferenceNetForMsPacman();
      }
    }
 else     if (task instanceof RLGlueTask) {
      RLGlueTask rlTask=(RLGlueTask)task;
      setNNInputParameters(rlGlueExtractor.numFeatures(),rlTask.agent.getNumberOutputs());
    }
 else     if (task instanceof Breve2DTask) {
      System.out.println(""String_Node_Str"");
      Breve2DDynamics dynamics=(Breve2DDynamics)ClassCreation.createObject(""String_Node_Str"");
      setNNInputParameters(dynamics.numInputSensors(),NNBreve2DMonster.NUM_OUTPUTS);
    }
 else     if (task instanceof TorusPredPreyTask) {
      System.out.println(""String_Node_Str"");
      int numInputs=determineNumPredPreyInputs();
      NetworkTask t=(NetworkTask)task;
      setNNInputParameters(numInputs,t.outputLabels().length);
    }
 else     if (task instanceof CooperativeTorusPredPreyTask) {
      System.out.println(""String_Node_Str"");
      int numInputs=determineNumPredPreyInputs();
      NetworkTask t=(NetworkTask)task;
      setNNInputParameters(numInputs,t.outputLabels().length);
      genotype=(Genotype)ClassCreation.createObject(""String_Node_Str"");
      int numAgents=(task instanceof CooperativePredatorsVsStaticPrey) ? Parameters.parameters.integerParameter(""String_Node_Str"") : Parameters.parameters.integerParameter(""String_Node_Str"");
      genotypeExamples=new ArrayList<Genotype>(numAgents);
      for (int i=0; i < numAgents; i++) {
        if (genotype instanceof TWEANNGenotype) {
          ((TWEANNGenotype)genotype).archetypeIndex=i;
        }
        genotypeExamples.add(genotype.newInstance());
      }
      prepareCoevolutionArchetypes();
    }
 else     if (task instanceof UT2004Task) {
      System.out.println(""String_Node_Str"");
      UT2004Task utTask=(UT2004Task)task;
      setNNInputParameters(utTask.sensorModel.numberOfSensors(),utTask.outputModel.numberOfOutputs());
    }
 else     if (task instanceof MatchDataTask) {
      System.out.println(""String_Node_Str"");
      MatchDataTask t=(MatchDataTask)task;
      setNNInputParameters(t.numInputs(),t.numOutputs());
    }
 else     if (task instanceof VizDoomTask) {
      System.out.println(""String_Node_Str"");
      VizDoomTask t=(VizDoomTask)task;
      setNNInputParameters(t.numInputs(),t.numActions());
    }
 else     if (task == null) {
      setNNInputParameters(5,3);
    }
 else {
      System.out.println(""String_Node_Str"");
      System.out.println(task);
      System.exit(1);
    }
    if (CommonConstants.hyperNEAT) {
      System.out.println(""String_Node_Str"");
      hyperNEATOverrides();
    }
    setupMetaHeuristics();
    if (!loadFrom) {
      System.out.println(""String_Node_Str"");
      ea=(GenerationalEA)ClassCreation.createObject(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    String seedGenotype=Parameters.parameters.stringParameter(""String_Node_Str"");
    if (task instanceof MsPacManTask && Parameters.parameters.booleanParameter(""String_Node_Str"") && CommonConstants.multitaskModules == 2) {
      System.out.println(""String_Node_Str"");
      String ghostDir=Parameters.parameters.stringParameter(""String_Node_Str"");
      String pillDir=Parameters.parameters.stringParameter(""String_Node_Str"");
      String lastSavedDirectory=Parameters.parameters.stringParameter(""String_Node_Str"");
      if (lastSavedDirectory.isEmpty()) {
        if (!ghostDir.isEmpty() && !pillDir.isEmpty()) {
          setupMultitaskSeedPopulationForMsPacman(ghostDir,pillDir);
        }
 else {
          setupSingleMultitaskSeedForMsPacman();
        }
      }
      System.out.println(""String_Node_Str"");
      MsPacManControllerInputOutputMediator ghostMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      MsPacManControllerInputOutputMediator pillMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      pacmanInputOutputMediator=new MultipleInputOutputMediator(new MsPacManControllerInputOutputMediator[]{ghostMediator,pillMediator});
      setNNInputParameters(pacmanInputOutputMediator.numIn(),pacmanInputOutputMediator.numOut());
    }
 else     if (seedGenotype.isEmpty()) {
      genotype=(Genotype)ClassCreation.createObject(""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"" + seedGenotype);
      genotype=((Genotype)Easy.load(seedGenotype)).copy();
      seedExample=true;
    }
    setupTWEANNGenotypeDataTracking(coevolution);
    System.out.println(""String_Node_Str"");
    experiment=(Experiment)ClassCreation.createObject(""String_Node_Str"");
    experiment.init();
    if (!loadFrom && Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      if (Parameters.parameters.booleanParameter(""String_Node_Str"") && !coevolution) {
        performanceLog=new PerformanceLog(""String_Node_Str"");
      }
      if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        EvolutionaryHistory.initLineageAndMutationLogs();
      }
    }
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"" + ex);
    ex.printStackTrace();
  }
}","public static void loadClasses(){
  try {
    ActivationFunctions.initFunctionSet();
    setupSaveDirectory();
    fitnessFunctions=new ArrayList<String>();
    aggregationOverrides=new ArrayList<Statistic>();
    boolean loadFrom=!Parameters.parameters.stringParameter(""String_Node_Str"").equals(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    EvolutionaryHistory.initGenotypeIds();
    weightPerturber=(RandomGenerator)ClassCreation.createObject(""String_Node_Str"");
    setupCrossover();
    setupRLGlue();
    setupFunctionOptimization();
    System.out.println(""String_Node_Str"");
    if (taskHasSubnetworks()) {
      modesToTrack=Parameters.parameters.integerParameter(""String_Node_Str"");
    }
 else {
      int multitaskModes=CommonConstants.multitaskModules;
      if (!CommonConstants.hierarchicalMultitask && multitaskModes > 1) {
        modesToTrack=multitaskModes;
      }
    }
    task=(Task)ClassCreation.createObject(""String_Node_Str"");
    boolean coevolution=false;
    if (Parameters.parameters.booleanParameter(""String_Node_Str"") && Parameters.parameters.stringParameter(""String_Node_Str"").equals(""String_Node_Str"") && Parameters.parameters.integerParameter(""String_Node_Str"") == 0) {
      System.out.println(""String_Node_Str"");
      Parameters.parameters.setDouble(""String_Node_Str"",0.999);
    }
    if (task instanceof MsPacManTask) {
      setupGenotypePoolsForMsPacman();
      System.out.println(""String_Node_Str"");
      pacmanInputOutputMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      if (MMNEAT.pacmanInputOutputMediator instanceof VariableDirectionBlockLoadedInputOutputMediator) {
        directionalSafetyFunction=(VariableDirectionBlock)ClassCreation.createObject(""String_Node_Str"");
        ensembleArbitrator=(MsPacManEnsembleArbitrator)ClassCreation.createObject(""String_Node_Str"");
      }
      String preferenceNet=Parameters.parameters.stringParameter(""String_Node_Str"");
      String multitaskNet=Parameters.parameters.stringParameter(""String_Node_Str"");
      if (multitaskNet != null && !multitaskNet.isEmpty()) {
        MMNEAT.sharedMultitaskNetwork=(TWEANNGenotype)Easy.load(multitaskNet);
        if (CommonConstants.showNetworks) {
          DrawingPanel panel=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
          MMNEAT.sharedMultitaskNetwork.getPhenotype().draw(panel);
        }
        setNNInputParameters(pacmanInputOutputMediator.numIn(),MMNEAT.sharedMultitaskNetwork.numModules);
      }
 else       if (preferenceNet != null && !preferenceNet.isEmpty()) {
        MMNEAT.sharedPreferenceNetwork=(TWEANNGenotype)Easy.load(preferenceNet);
        if (CommonConstants.showNetworks) {
          DrawingPanel panel=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
          MMNEAT.sharedPreferenceNetwork.getPhenotype().draw(panel);
        }
        setNNInputParameters(pacmanInputOutputMediator.numIn(),MMNEAT.sharedPreferenceNetwork.numOut);
      }
 else       if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"");
        ghostsInputOutputMediator=new GhostsCheckEachDirectionMediator();
        setNNInputParameters(ghostsInputOutputMediator.numIn(),ghostsInputOutputMediator.numOut());
      }
 else {
        setNNInputParameters(pacmanInputOutputMediator.numIn(),pacmanInputOutputMediator.numOut());
      }
      setupMsPacmanParameters();
      if (CommonConstants.multitaskModules > 1) {
        pacmanMultitaskScheme=(MsPacManModeSelector)ClassCreation.createObject(""String_Node_Str"");
      }
    }
 else     if (task instanceof CooperativeMsPacManTask) {
      System.out.println(""String_Node_Str"");
      coevolution=true;
      EvolutionaryHistory.initInnovationHistory();
      setupMsPacmanParameters();
      if (task instanceof CooperativeGhostMonitorNetworksMsPacManTask) {
        setupCooperativeCoevolutionGhostMonitorsForMsPacman();
      }
 else       if (task instanceof CooperativeSubtaskSelectorMsPacManTask) {
        setupCooperativeCoevolutionSelectorForMsPacman();
      }
 else       if (task instanceof CooperativeSubtaskCombinerMsPacManTask) {
        setupCooperativeCoevolutionCombinerForMsPacman();
      }
 else       if (task instanceof CooperativeNonHierarchicalMultiNetMsPacManTask) {
        setupCooperativeCoevolutionNonHierarchicalForMsPacman();
      }
 else       if (task instanceof CooperativeCheckEachMultitaskSelectorMsPacManTask) {
        setupCooperativeCoevolutionCheckEachMultitaskPreferenceNetForMsPacman();
      }
    }
 else     if (task instanceof RLGlueTask) {
      RLGlueTask rlTask=(RLGlueTask)task;
      setNNInputParameters(rlGlueExtractor.numFeatures(),rlTask.agent.getNumberOutputs());
    }
 else     if (task instanceof Breve2DTask) {
      System.out.println(""String_Node_Str"");
      Breve2DDynamics dynamics=(Breve2DDynamics)ClassCreation.createObject(""String_Node_Str"");
      setNNInputParameters(dynamics.numInputSensors(),NNBreve2DMonster.NUM_OUTPUTS);
    }
 else     if (task instanceof TorusPredPreyTask) {
      System.out.println(""String_Node_Str"");
      int numInputs=determineNumPredPreyInputs();
      NetworkTask t=(NetworkTask)task;
      setNNInputParameters(numInputs,t.outputLabels().length);
    }
 else     if (task instanceof CooperativeTorusPredPreyTask) {
      System.out.println(""String_Node_Str"");
      coevolution=true;
      int numInputs=determineNumPredPreyInputs();
      NetworkTask t=(NetworkTask)task;
      setNNInputParameters(numInputs,t.outputLabels().length);
      genotype=(Genotype)ClassCreation.createObject(""String_Node_Str"");
      int numAgents=(task instanceof CooperativePredatorsVsStaticPrey) ? Parameters.parameters.integerParameter(""String_Node_Str"") : Parameters.parameters.integerParameter(""String_Node_Str"");
      genotypeExamples=new ArrayList<Genotype>(numAgents);
      for (int i=0; i < numAgents; i++) {
        if (genotype instanceof TWEANNGenotype) {
          ((TWEANNGenotype)genotype).archetypeIndex=i;
        }
        genotypeExamples.add(genotype.newInstance());
      }
      prepareCoevolutionArchetypes();
    }
 else     if (task instanceof UT2004Task) {
      System.out.println(""String_Node_Str"");
      UT2004Task utTask=(UT2004Task)task;
      setNNInputParameters(utTask.sensorModel.numberOfSensors(),utTask.outputModel.numberOfOutputs());
    }
 else     if (task instanceof MatchDataTask) {
      System.out.println(""String_Node_Str"");
      MatchDataTask t=(MatchDataTask)task;
      setNNInputParameters(t.numInputs(),t.numOutputs());
    }
 else     if (task instanceof VizDoomTask) {
      System.out.println(""String_Node_Str"");
      VizDoomTask t=(VizDoomTask)task;
      setNNInputParameters(t.numInputs(),t.numActions());
    }
 else     if (task == null) {
      setNNInputParameters(5,3);
    }
 else {
      System.out.println(""String_Node_Str"");
      System.out.println(task);
      System.exit(1);
    }
    if (CommonConstants.hyperNEAT) {
      System.out.println(""String_Node_Str"");
      hyperNEATOverrides();
    }
    setupMetaHeuristics();
    if (!loadFrom) {
      System.out.println(""String_Node_Str"");
      ea=(GenerationalEA)ClassCreation.createObject(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    String seedGenotype=Parameters.parameters.stringParameter(""String_Node_Str"");
    if (task instanceof MsPacManTask && Parameters.parameters.booleanParameter(""String_Node_Str"") && CommonConstants.multitaskModules == 2) {
      System.out.println(""String_Node_Str"");
      String ghostDir=Parameters.parameters.stringParameter(""String_Node_Str"");
      String pillDir=Parameters.parameters.stringParameter(""String_Node_Str"");
      String lastSavedDirectory=Parameters.parameters.stringParameter(""String_Node_Str"");
      if (lastSavedDirectory.isEmpty()) {
        if (!ghostDir.isEmpty() && !pillDir.isEmpty()) {
          setupMultitaskSeedPopulationForMsPacman(ghostDir,pillDir);
        }
 else {
          setupSingleMultitaskSeedForMsPacman();
        }
      }
      System.out.println(""String_Node_Str"");
      MsPacManControllerInputOutputMediator ghostMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      MsPacManControllerInputOutputMediator pillMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      pacmanInputOutputMediator=new MultipleInputOutputMediator(new MsPacManControllerInputOutputMediator[]{ghostMediator,pillMediator});
      setNNInputParameters(pacmanInputOutputMediator.numIn(),pacmanInputOutputMediator.numOut());
    }
 else     if (seedGenotype.isEmpty()) {
      genotype=(Genotype)ClassCreation.createObject(""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"" + seedGenotype);
      genotype=((Genotype)Easy.load(seedGenotype)).copy();
      seedExample=true;
    }
    setupTWEANNGenotypeDataTracking(coevolution);
    System.out.println(""String_Node_Str"");
    experiment=(Experiment)ClassCreation.createObject(""String_Node_Str"");
    experiment.init();
    if (!loadFrom && Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      if (Parameters.parameters.booleanParameter(""String_Node_Str"") && !coevolution) {
        performanceLog=new PerformanceLog(""String_Node_Str"");
      }
      if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        EvolutionaryHistory.initLineageAndMutationLogs();
      }
    }
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"" + ex);
    ex.printStackTrace();
  }
}"
39287,"public static void loadClasses(){
  try {
    ActivationFunctions.initFunctionSet();
    setupSaveDirectory();
    fitnessFunctions=new ArrayList<String>();
    aggregationOverrides=new ArrayList<Statistic>();
    boolean loadFrom=!Parameters.parameters.stringParameter(""String_Node_Str"").equals(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    EvolutionaryHistory.initGenotypeIds();
    weightPerturber=(RandomGenerator)ClassCreation.createObject(""String_Node_Str"");
    setupCrossover();
    setupRLGlue();
    setupFunctionOptimization();
    System.out.println(""String_Node_Str"");
    if (taskHasSubnetworks()) {
      modesToTrack=Parameters.parameters.integerParameter(""String_Node_Str"");
    }
 else {
      int multitaskModes=CommonConstants.multitaskModules;
      if (!CommonConstants.hierarchicalMultitask && multitaskModes > 1) {
        modesToTrack=multitaskModes;
      }
    }
    task=(Task)ClassCreation.createObject(""String_Node_Str"");
    boolean coevolution=false;
    if (Parameters.parameters.booleanParameter(""String_Node_Str"") && Parameters.parameters.stringParameter(""String_Node_Str"").equals(""String_Node_Str"") && Parameters.parameters.integerParameter(""String_Node_Str"") == 0) {
      System.out.println(""String_Node_Str"");
      Parameters.parameters.setDouble(""String_Node_Str"",0.999);
    }
    if (task instanceof MsPacManTask) {
      setupGenotypePoolsForMsPacman();
      System.out.println(""String_Node_Str"");
      pacmanInputOutputMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      if (MMNEAT.pacmanInputOutputMediator instanceof VariableDirectionBlockLoadedInputOutputMediator) {
        directionalSafetyFunction=(VariableDirectionBlock)ClassCreation.createObject(""String_Node_Str"");
        ensembleArbitrator=(MsPacManEnsembleArbitrator)ClassCreation.createObject(""String_Node_Str"");
      }
      String preferenceNet=Parameters.parameters.stringParameter(""String_Node_Str"");
      String multitaskNet=Parameters.parameters.stringParameter(""String_Node_Str"");
      if (multitaskNet != null && !multitaskNet.isEmpty()) {
        MMNEAT.sharedMultitaskNetwork=(TWEANNGenotype)Easy.load(multitaskNet);
        if (CommonConstants.showNetworks) {
          DrawingPanel panel=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
          MMNEAT.sharedMultitaskNetwork.getPhenotype().draw(panel);
        }
        setNNInputParameters(pacmanInputOutputMediator.numIn(),MMNEAT.sharedMultitaskNetwork.numModules);
      }
 else       if (preferenceNet != null && !preferenceNet.isEmpty()) {
        MMNEAT.sharedPreferenceNetwork=(TWEANNGenotype)Easy.load(preferenceNet);
        if (CommonConstants.showNetworks) {
          DrawingPanel panel=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
          MMNEAT.sharedPreferenceNetwork.getPhenotype().draw(panel);
        }
        setNNInputParameters(pacmanInputOutputMediator.numIn(),MMNEAT.sharedPreferenceNetwork.numOut);
      }
 else       if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"");
        ghostsInputOutputMediator=new GhostsCheckEachDirectionMediator();
        setNNInputParameters(ghostsInputOutputMediator.numIn(),ghostsInputOutputMediator.numOut());
      }
 else {
        setNNInputParameters(pacmanInputOutputMediator.numIn(),pacmanInputOutputMediator.numOut());
      }
      setupMsPacmanParameters();
      if (CommonConstants.multitaskModules > 1) {
        pacmanMultitaskScheme=(MsPacManModeSelector)ClassCreation.createObject(""String_Node_Str"");
      }
    }
 else     if (task instanceof CooperativeMsPacManTask) {
      System.out.println(""String_Node_Str"");
      coevolution=true;
      EvolutionaryHistory.initInnovationHistory();
      setupMsPacmanParameters();
      if (task instanceof CooperativeGhostMonitorNetworksMsPacManTask) {
        setupCooperativeCoevolutionGhostMonitorsForMsPacman();
      }
 else       if (task instanceof CooperativeSubtaskSelectorMsPacManTask) {
        setupCooperativeCoevolutionSelectorForMsPacman();
      }
 else       if (task instanceof CooperativeSubtaskCombinerMsPacManTask) {
        setupCooperativeCoevolutionCombinerForMsPacman();
      }
 else       if (task instanceof CooperativeNonHierarchicalMultiNetMsPacManTask) {
        setupCooperativeCoevolutionNonHierarchicalForMsPacman();
      }
 else       if (task instanceof CooperativeCheckEachMultitaskSelectorMsPacManTask) {
        setupCooperativeCoevolutionCheckEachMultitaskPreferenceNetForMsPacman();
      }
    }
 else     if (task instanceof RLGlueTask) {
      RLGlueTask rlTask=(RLGlueTask)task;
      setNNInputParameters(rlGlueExtractor.numFeatures(),rlTask.agent.getNumberOutputs());
    }
 else     if (task instanceof Breve2DTask) {
      System.out.println(""String_Node_Str"");
      Breve2DDynamics dynamics=(Breve2DDynamics)ClassCreation.createObject(""String_Node_Str"");
      setNNInputParameters(dynamics.numInputSensors(),NNBreve2DMonster.NUM_OUTPUTS);
    }
 else     if (task instanceof TorusPredPreyTask) {
      System.out.println(""String_Node_Str"");
      int numInputs=determineNumPredPreyInputs();
      NetworkTask t=(NetworkTask)task;
      setNNInputParameters(numInputs,t.outputLabels().length);
    }
 else     if (task instanceof CooperativeTorusPredPreyTask) {
      System.out.println(""String_Node_Str"");
      if (task instanceof CooperativePredatorsVsStaticPrey) {
      }
 else       if (task instanceof CooperativePreyVsStaticPredators) {
      }
      int numInputs=determineNumPredPreyInputs();
      NetworkTask t=(NetworkTask)task;
      setNNInputParameters(numInputs,t.outputLabels().length);
    }
 else     if (task instanceof UT2004Task) {
      System.out.println(""String_Node_Str"");
      UT2004Task utTask=(UT2004Task)task;
      setNNInputParameters(utTask.sensorModel.numberOfSensors(),utTask.outputModel.numberOfOutputs());
    }
 else     if (task instanceof MatchDataTask) {
      System.out.println(""String_Node_Str"");
      MatchDataTask t=(MatchDataTask)task;
      setNNInputParameters(t.numInputs(),t.numOutputs());
    }
 else     if (task instanceof VizDoomTask) {
      System.out.println(""String_Node_Str"");
      VizDoomTask t=(VizDoomTask)task;
      setNNInputParameters(t.numInputs(),t.numActions());
    }
 else     if (task == null) {
      setNNInputParameters(5,3);
    }
 else {
      System.out.println(""String_Node_Str"");
      System.out.println(task);
      System.exit(1);
    }
    if (CommonConstants.hyperNEAT) {
      System.out.println(""String_Node_Str"");
      hyperNEATOverrides();
    }
    setupMetaHeuristics();
    if (!loadFrom) {
      System.out.println(""String_Node_Str"");
      ea=(GenerationalEA)ClassCreation.createObject(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    String seedGenotype=Parameters.parameters.stringParameter(""String_Node_Str"");
    if (task instanceof MsPacManTask && Parameters.parameters.booleanParameter(""String_Node_Str"") && CommonConstants.multitaskModules == 2) {
      System.out.println(""String_Node_Str"");
      String ghostDir=Parameters.parameters.stringParameter(""String_Node_Str"");
      String pillDir=Parameters.parameters.stringParameter(""String_Node_Str"");
      String lastSavedDirectory=Parameters.parameters.stringParameter(""String_Node_Str"");
      if (lastSavedDirectory.isEmpty()) {
        if (!ghostDir.isEmpty() && !pillDir.isEmpty()) {
          setupMultitaskSeedPopulationForMsPacman(ghostDir,pillDir);
        }
 else {
          setupSingleMultitaskSeedForMsPacman();
        }
      }
      System.out.println(""String_Node_Str"");
      MsPacManControllerInputOutputMediator ghostMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      MsPacManControllerInputOutputMediator pillMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      pacmanInputOutputMediator=new MultipleInputOutputMediator(new MsPacManControllerInputOutputMediator[]{ghostMediator,pillMediator});
      setNNInputParameters(pacmanInputOutputMediator.numIn(),pacmanInputOutputMediator.numOut());
    }
 else     if (seedGenotype.isEmpty()) {
      genotype=(Genotype)ClassCreation.createObject(""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"" + seedGenotype);
      genotype=((Genotype)Easy.load(seedGenotype)).copy();
      seedExample=true;
    }
    setupTWEANNGenotypeDataTracking(coevolution);
    System.out.println(""String_Node_Str"");
    experiment=(Experiment)ClassCreation.createObject(""String_Node_Str"");
    experiment.init();
    if (!loadFrom && Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      if (Parameters.parameters.booleanParameter(""String_Node_Str"") && !coevolution) {
        performanceLog=new PerformanceLog(""String_Node_Str"");
      }
      if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        EvolutionaryHistory.initLineageAndMutationLogs();
      }
    }
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"" + ex);
    ex.printStackTrace();
  }
}","public static void loadClasses(){
  try {
    ActivationFunctions.initFunctionSet();
    setupSaveDirectory();
    fitnessFunctions=new ArrayList<String>();
    aggregationOverrides=new ArrayList<Statistic>();
    boolean loadFrom=!Parameters.parameters.stringParameter(""String_Node_Str"").equals(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    EvolutionaryHistory.initGenotypeIds();
    weightPerturber=(RandomGenerator)ClassCreation.createObject(""String_Node_Str"");
    setupCrossover();
    setupRLGlue();
    setupFunctionOptimization();
    System.out.println(""String_Node_Str"");
    if (taskHasSubnetworks()) {
      modesToTrack=Parameters.parameters.integerParameter(""String_Node_Str"");
    }
 else {
      int multitaskModes=CommonConstants.multitaskModules;
      if (!CommonConstants.hierarchicalMultitask && multitaskModes > 1) {
        modesToTrack=multitaskModes;
      }
    }
    task=(Task)ClassCreation.createObject(""String_Node_Str"");
    boolean coevolution=false;
    if (Parameters.parameters.booleanParameter(""String_Node_Str"") && Parameters.parameters.stringParameter(""String_Node_Str"").equals(""String_Node_Str"") && Parameters.parameters.integerParameter(""String_Node_Str"") == 0) {
      System.out.println(""String_Node_Str"");
      Parameters.parameters.setDouble(""String_Node_Str"",0.999);
    }
    if (task instanceof MsPacManTask) {
      setupGenotypePoolsForMsPacman();
      System.out.println(""String_Node_Str"");
      pacmanInputOutputMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      if (MMNEAT.pacmanInputOutputMediator instanceof VariableDirectionBlockLoadedInputOutputMediator) {
        directionalSafetyFunction=(VariableDirectionBlock)ClassCreation.createObject(""String_Node_Str"");
        ensembleArbitrator=(MsPacManEnsembleArbitrator)ClassCreation.createObject(""String_Node_Str"");
      }
      String preferenceNet=Parameters.parameters.stringParameter(""String_Node_Str"");
      String multitaskNet=Parameters.parameters.stringParameter(""String_Node_Str"");
      if (multitaskNet != null && !multitaskNet.isEmpty()) {
        MMNEAT.sharedMultitaskNetwork=(TWEANNGenotype)Easy.load(multitaskNet);
        if (CommonConstants.showNetworks) {
          DrawingPanel panel=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
          MMNEAT.sharedMultitaskNetwork.getPhenotype().draw(panel);
        }
        setNNInputParameters(pacmanInputOutputMediator.numIn(),MMNEAT.sharedMultitaskNetwork.numModules);
      }
 else       if (preferenceNet != null && !preferenceNet.isEmpty()) {
        MMNEAT.sharedPreferenceNetwork=(TWEANNGenotype)Easy.load(preferenceNet);
        if (CommonConstants.showNetworks) {
          DrawingPanel panel=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
          MMNEAT.sharedPreferenceNetwork.getPhenotype().draw(panel);
        }
        setNNInputParameters(pacmanInputOutputMediator.numIn(),MMNEAT.sharedPreferenceNetwork.numOut);
      }
 else       if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"");
        ghostsInputOutputMediator=new GhostsCheckEachDirectionMediator();
        setNNInputParameters(ghostsInputOutputMediator.numIn(),ghostsInputOutputMediator.numOut());
      }
 else {
        setNNInputParameters(pacmanInputOutputMediator.numIn(),pacmanInputOutputMediator.numOut());
      }
      setupMsPacmanParameters();
      if (CommonConstants.multitaskModules > 1) {
        pacmanMultitaskScheme=(MsPacManModeSelector)ClassCreation.createObject(""String_Node_Str"");
      }
    }
 else     if (task instanceof CooperativeMsPacManTask) {
      System.out.println(""String_Node_Str"");
      coevolution=true;
      EvolutionaryHistory.initInnovationHistory();
      setupMsPacmanParameters();
      if (task instanceof CooperativeGhostMonitorNetworksMsPacManTask) {
        setupCooperativeCoevolutionGhostMonitorsForMsPacman();
      }
 else       if (task instanceof CooperativeSubtaskSelectorMsPacManTask) {
        setupCooperativeCoevolutionSelectorForMsPacman();
      }
 else       if (task instanceof CooperativeSubtaskCombinerMsPacManTask) {
        setupCooperativeCoevolutionCombinerForMsPacman();
      }
 else       if (task instanceof CooperativeNonHierarchicalMultiNetMsPacManTask) {
        setupCooperativeCoevolutionNonHierarchicalForMsPacman();
      }
 else       if (task instanceof CooperativeCheckEachMultitaskSelectorMsPacManTask) {
        setupCooperativeCoevolutionCheckEachMultitaskPreferenceNetForMsPacman();
      }
    }
 else     if (task instanceof RLGlueTask) {
      RLGlueTask rlTask=(RLGlueTask)task;
      setNNInputParameters(rlGlueExtractor.numFeatures(),rlTask.agent.getNumberOutputs());
    }
 else     if (task instanceof Breve2DTask) {
      System.out.println(""String_Node_Str"");
      Breve2DDynamics dynamics=(Breve2DDynamics)ClassCreation.createObject(""String_Node_Str"");
      setNNInputParameters(dynamics.numInputSensors(),NNBreve2DMonster.NUM_OUTPUTS);
    }
 else     if (task instanceof TorusPredPreyTask) {
      System.out.println(""String_Node_Str"");
      int numInputs=determineNumPredPreyInputs();
      NetworkTask t=(NetworkTask)task;
      setNNInputParameters(numInputs,t.outputLabels().length);
    }
 else     if (task instanceof CooperativeTorusPredPreyTask) {
      System.out.println(""String_Node_Str"");
      int numInputs=determineNumPredPreyInputs();
      NetworkTask t=(NetworkTask)task;
      setNNInputParameters(numInputs,t.outputLabels().length);
      genotype=(Genotype)ClassCreation.createObject(""String_Node_Str"");
      int numAgents=(task instanceof CooperativePredatorsVsStaticPrey) ? Parameters.parameters.integerParameter(""String_Node_Str"") : Parameters.parameters.integerParameter(""String_Node_Str"");
      genotypeExamples=new ArrayList<Genotype>(numAgents);
      for (int i=0; i < numAgents; i++) {
        if (genotype instanceof TWEANNGenotype) {
          ((TWEANNGenotype)genotype).archetypeIndex=i;
        }
        genotypeExamples.add(genotype.newInstance());
      }
      prepareCoevolutionArchetypes();
    }
 else     if (task instanceof UT2004Task) {
      System.out.println(""String_Node_Str"");
      UT2004Task utTask=(UT2004Task)task;
      setNNInputParameters(utTask.sensorModel.numberOfSensors(),utTask.outputModel.numberOfOutputs());
    }
 else     if (task instanceof MatchDataTask) {
      System.out.println(""String_Node_Str"");
      MatchDataTask t=(MatchDataTask)task;
      setNNInputParameters(t.numInputs(),t.numOutputs());
    }
 else     if (task instanceof VizDoomTask) {
      System.out.println(""String_Node_Str"");
      VizDoomTask t=(VizDoomTask)task;
      setNNInputParameters(t.numInputs(),t.numActions());
    }
 else     if (task == null) {
      setNNInputParameters(5,3);
    }
 else {
      System.out.println(""String_Node_Str"");
      System.out.println(task);
      System.exit(1);
    }
    if (CommonConstants.hyperNEAT) {
      System.out.println(""String_Node_Str"");
      hyperNEATOverrides();
    }
    setupMetaHeuristics();
    if (!loadFrom) {
      System.out.println(""String_Node_Str"");
      ea=(GenerationalEA)ClassCreation.createObject(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    String seedGenotype=Parameters.parameters.stringParameter(""String_Node_Str"");
    if (task instanceof MsPacManTask && Parameters.parameters.booleanParameter(""String_Node_Str"") && CommonConstants.multitaskModules == 2) {
      System.out.println(""String_Node_Str"");
      String ghostDir=Parameters.parameters.stringParameter(""String_Node_Str"");
      String pillDir=Parameters.parameters.stringParameter(""String_Node_Str"");
      String lastSavedDirectory=Parameters.parameters.stringParameter(""String_Node_Str"");
      if (lastSavedDirectory.isEmpty()) {
        if (!ghostDir.isEmpty() && !pillDir.isEmpty()) {
          setupMultitaskSeedPopulationForMsPacman(ghostDir,pillDir);
        }
 else {
          setupSingleMultitaskSeedForMsPacman();
        }
      }
      System.out.println(""String_Node_Str"");
      MsPacManControllerInputOutputMediator ghostMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      MsPacManControllerInputOutputMediator pillMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      pacmanInputOutputMediator=new MultipleInputOutputMediator(new MsPacManControllerInputOutputMediator[]{ghostMediator,pillMediator});
      setNNInputParameters(pacmanInputOutputMediator.numIn(),pacmanInputOutputMediator.numOut());
    }
 else     if (seedGenotype.isEmpty()) {
      genotype=(Genotype)ClassCreation.createObject(""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"" + seedGenotype);
      genotype=((Genotype)Easy.load(seedGenotype)).copy();
      seedExample=true;
    }
    setupTWEANNGenotypeDataTracking(coevolution);
    System.out.println(""String_Node_Str"");
    experiment=(Experiment)ClassCreation.createObject(""String_Node_Str"");
    experiment.init();
    if (!loadFrom && Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      if (Parameters.parameters.booleanParameter(""String_Node_Str"") && !coevolution) {
        performanceLog=new PerformanceLog(""String_Node_Str"");
      }
      if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        EvolutionaryHistory.initLineageAndMutationLogs();
      }
    }
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"" + ex);
    ex.printStackTrace();
  }
}"
39288,"@Override public TorusPredPreyController[] getPredAgents(Genotype<T>[] team){
  TorusPredPreyController[] evolved=getLonerTaskInstance().evolved;
  TorusPredPreyTask.getEvolvedControllers(evolved,team,true);
  return evolved;
}","@Override public TorusPredPreyController[] getPredAgents(Genotype<T>[] team){
  TorusPredPreyController[] evolved=new TorusPredPreyController[Parameters.parameters.integerParameter(""String_Node_Str"")];
  TorusPredPreyTask.getEvolvedControllers(evolved,team,true);
  return evolved;
}"
39289,"@Override public TorusPredPreyController[] getPreyAgents(Genotype<T>[] team){
  TorusPredPreyController[] evolved=getLonerTaskInstance().evolved;
  TorusPredPreyTask.getEvolvedControllers(evolved,team,false);
  return evolved;
}","@Override public TorusPredPreyController[] getPreyAgents(Genotype<T>[] team){
  TorusPredPreyController[] evolved=new TorusPredPreyController[Parameters.parameters.integerParameter(""String_Node_Str"")];
  TorusPredPreyTask.getEvolvedControllers(evolved,team,false);
  return evolved;
}"
39290,"/** 
 * constructor for a task where the predators are evolved while the prey are kept static sends false to the parent constructor, indicating that the predator is the agent evolving Includes all of the fitness scores that the user wants from the command line parameters
 */
public TorusEvolvedPredatorsVsStaticPreyTask(){
  super(false);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   addObjective(new PredatorMinimizeGameTimeObjective<T>(),objectives);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   addObjective(new PredatorEatEachPreyQuicklyObjective<T>(),objectives);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   addObjective(new PredatorMinimizeDistanceFromPreyObjective<T>(),objectives);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   addObjective(new PredatorRawalRajagopalanMiikkulainenObjective<T>(),objectives);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   addObjective(new PredatorCatchCloseObjective<T>(),objectives);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   addObjective(new PredatorCatchObjective<T>(),objectives);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   addObjective(new PredatorCatchCloseQuickObjective<T>(),objectives);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   for (int i=0; i < Parameters.parameters.integerParameter(""String_Node_Str""); i++)   addObjective(new PredatorMinimizeDistanceFromIndividualPreyObjective<T>(i),objectives);
}","/** 
 * constructor for a task where the predators are evolved while the prey are kept static sends false to the parent constructor, indicating that the predator is the agent evolving Includes all of the fitness scores that the user wants from the command line parameters
 */
public TorusEvolvedPredatorsVsStaticPreyTask(){
  super(false);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   addObjective(new PredatorMinimizeGameTimeObjective<T>(),objectives);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   addObjective(new PredatorEatEachPreyQuicklyObjective<T>(),objectives);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   addObjective(new PredatorMinimizeDistanceFromPreyObjective<T>(),objectives);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   addObjective(new PredatorRawalRajagopalanMiikkulainenObjective<T>(),objectives);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   addObjective(new PredatorCatchCloseObjective<T>(),objectives);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   addObjective(new PredatorCatchObjective<T>(),objectives);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   addObjective(new PredatorCatchCloseQuickObjective<T>(),objectives);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   for (int i=0; i < Parameters.parameters.integerParameter(""String_Node_Str""); i++)   addObjective(new PredatorMinimizeDistanceFromIndividualPreyObjective<T>(i),objectives);
  addObjective(new PredatorMinimizeGameTimeObjective<T>(),otherScores,false);
  addObjective(new PredatorEatEachPreyQuicklyObjective<T>(),otherScores,false);
  addObjective(new PredatorMinimizeDistanceFromPreyObjective<T>(),otherScores,false);
  if (Parameters.parameters.integerParameter(""String_Node_Str"") == 2)   addObjective(new PredatorRawalRajagopalanMiikkulainenObjective<T>(),otherScores,false);
  addObjective(new PredatorCatchCloseObjective<T>(),otherScores,false);
  addObjective(new PredatorCatchObjective<T>(),otherScores,false);
  addObjective(new PredatorCatchCloseQuickObjective<T>(),otherScores,false);
  for (int i=0; i < Parameters.parameters.integerParameter(""String_Node_Str""); i++)   addObjective(new PredatorMinimizeDistanceFromIndividualPreyObjective<T>(i),otherScores,false);
}"
39291,"/** 
 * constructor for a task where the prey are evolved while the predators are kept static sends true to the parent constructor, indicating that the prey is the agent evolving Includes all of the fitness scores that the user wants from the command line parameters
 */
public TorusEvolvedPreyVsStaticPredatorsTask(){
  super(true);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   addObjective(new PreyMaximizeGameTimeObjective<T>(),objectives);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   addObjective(new PreyRawalRajagopalanMiikkulainenObjective<T>(),objectives);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   addObjective(new PreyLongSurvivalTimeObjective<T>(),objectives);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   addObjective(new PreyMaximizeDistanceFromPredatorsObjective<T>(),objectives);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   addObjective(new PreyMinimizeCaughtObjective<T>(),objectives);
}","/** 
 * constructor for a task where the prey are evolved while the predators are kept static sends true to the parent constructor, indicating that the prey is the agent evolving Includes all of the fitness scores that the user wants from the command line parameters
 */
public TorusEvolvedPreyVsStaticPredatorsTask(){
  super(true);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   addObjective(new PreyMaximizeGameTimeObjective<T>(),objectives);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   addObjective(new PreyRawalRajagopalanMiikkulainenObjective<T>(),objectives);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   addObjective(new PreyLongSurvivalTimeObjective<T>(),objectives);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   addObjective(new PreyMaximizeDistanceFromPredatorsObjective<T>(),objectives);
  if (Parameters.parameters.booleanParameter(""String_Node_Str""))   addObjective(new PreyMinimizeCaughtObjective<T>(),objectives);
  addObjective(new PreyMaximizeGameTimeObjective<T>(),otherScores,false);
  addObjective(new PreyRawalRajagopalanMiikkulainenObjective<T>(),otherScores,false);
  addObjective(new PreyLongSurvivalTimeObjective<T>(),otherScores,false);
  addObjective(new PreyMaximizeDistanceFromPredatorsObjective<T>(),otherScores,false);
  addObjective(new PreyMinimizeCaughtObjective<T>(),otherScores,false);
}"
39292,"/** 
 * for adding fitness scores (turned on by command line parameters)
 * @param o objective/fitness score
 * @param list of fitness scores
 */
public final void addObjective(GridTorusObjective<T> o,ArrayList<GridTorusObjective<T>> list,boolean affectsSelection){
  list.add(o);
  MMNEAT.registerFitnessFunction(o.getClass().getSimpleName(),affectsSelection);
}","/** 
 * for adding fitness scores (turned on by command line parameters)
 * @param o objective/fitness score
 * @param list of fitness scores
 * @param affectsSelection  true if objective score false if other score
 */
public final void addObjective(GridTorusObjective<T> o,ArrayList<GridTorusObjective<T>> list,boolean affectsSelection){
  list.add(o);
  MMNEAT.registerFitnessFunction(o.getClass().getSimpleName(),affectsSelection);
}"
39293,"/** 
 * @return the minimum possible scores (worst scores) for this genotype ifit is a prey then the min score is 0 and if it's a predator min score is the total time limit
 */
@Override public double[] minScores(){
  double[] result=new double[numObjectives()];
  for (int i=0; i < result.length; i++) {
    result[i]=objectives.get(i).minScore();
  }
  return result;
}","/** 
 * @return the minimum possible scores (worst scores) for this genotype
 */
@Override public double[] minScores(){
  double[] result=new double[numObjectives()];
  for (int i=0; i < result.length; i++) {
    result[i]=objectives.get(i).minScore();
  }
  return result;
}"
39294,"/** 
 * @return the number of minimum scores for this genotype of this task
 */
@Override public int numObjectives(){
  return objectives.size();
}","/** 
 * @return the number of fitness scores for this genotype
 */
@Override public int numObjectives(){
  return objectives.size();
}"
39295,"@Override public Pair<double[],double[]> oneEval(Genotype<T> individual,int num){
  TorusPredPreyController[] predAgents=getPredAgents(individual);
  TorusPredPreyController[] preyAgents=getPreyAgents(individual);
  exec=new TorusWorldExec();
  TorusPredPreyGame game;
  if (CommonConstants.watch) {
    game=exec.runGameTimed(predAgents,preyAgents,true);
  }
 else {
    game=exec.runExperiment(predAgents,preyAgents);
  }
  double[] fitnesses=new double[objectives.size()];
  if (CommonConstants.monitorInputs) {
    for (int i=0; i < evolved.length; i++) {
      ((NNTorusPredPreyController)(evolved)[i]).networkInputs.dispose();
    }
  }
  int numModes=((NNTorusPredPreyController)evolved[0]).nn.numModules();
  int[] overallAgentModeUsage=new int[numModes];
  for (  TorusPredPreyController agent : evolved) {
    int[] thisAgentModeUsage=((NNTorusPredPreyController)agent).nn.getModuleUsage();
    overallAgentModeUsage=ArrayUtil.zipAdd(overallAgentModeUsage,thisAgentModeUsage);
  }
  Organism<T> organism=new NNTorusPredPreyAgent<T>(individual,!preyEvolve);
  for (int j=0; j < objectives.size(); j++) {
    fitnesses[j]=objectives.get(j).score(game,organism);
  }
  ((NetworkGenotype<T>)individual).setModuleUsage(overallAgentModeUsage);
  double[] otherStats=new double[0];
  return new Pair<double[],double[]>(fitnesses,otherStats);
}","@Override public Pair<double[],double[]> oneEval(Genotype<T> individual,int num){
  TorusPredPreyController[] predAgents=getPredAgents(individual);
  TorusPredPreyController[] preyAgents=getPreyAgents(individual);
  exec=new TorusWorldExec();
  TorusPredPreyGame game;
  if (CommonConstants.watch) {
    game=exec.runGameTimed(predAgents,preyAgents,true);
  }
 else {
    game=exec.runExperiment(predAgents,preyAgents);
  }
  double[] fitnesses=new double[objectives.size()];
  double[] otherStats=new double[otherScores.size()];
  if (CommonConstants.monitorInputs) {
    for (int i=0; i < evolved.length; i++) {
      ((NNTorusPredPreyController)(evolved)[i]).networkInputs.dispose();
    }
  }
  int numModes=((NNTorusPredPreyController)evolved[0]).nn.numModules();
  int[] overallAgentModeUsage=new int[numModes];
  for (  TorusPredPreyController agent : evolved) {
    int[] thisAgentModeUsage=((NNTorusPredPreyController)agent).nn.getModuleUsage();
    overallAgentModeUsage=ArrayUtil.zipAdd(overallAgentModeUsage,thisAgentModeUsage);
  }
  Organism<T> organism=new NNTorusPredPreyAgent<T>(individual,!preyEvolve);
  for (int i=0; i < objectives.size(); i++) {
    fitnesses[i]=objectives.get(i).score(game,organism);
  }
  for (int i=0; i < otherScores.size(); i++) {
    otherStats[i]=otherScores.get(i).score(game,organism);
  }
  ((NetworkGenotype<T>)individual).setModuleUsage(overallAgentModeUsage);
  return new Pair<double[],double[]>(fitnesses,otherStats);
}"
39296,"@Override public double fitness(Organism<T> individual){
  TorusAgent[] preds=game.getPredators();
  TorusAgent[] prey=game.getPrey();
  return sumOfPreyToPredDistances(preds,prey);
}","@Override public double fitness(Organism<T> individual){
  return PredatorMinimizeDistanceFromPreyObjective.sumOfPredToPreyDistances(game.getPredators(),game.getPrey());
}"
39297,"public HyperNEATCPPNGenotype(ArrayList<LinkGene> links,ArrayList<NodeGene> genes){
  super(genes,links,1,false,false,0);
}","/** 
 * Constructor for random hyperNEATCPPNGenotype. 
 * @param networkInputs number of network inputs
 * @param networkOutputs number of newtork outputs
 * @param archetypeIndex index of genotype in archetype
 */
public HyperNEATCPPNGenotype(int networkInputs,int networkOutputs,int archetypeIndex){
  super(networkInputs,networkOutputs,archetypeIndex);
}"
39298,"/** 
 * Uses another CPPN to create a TWEANN controller for the domain. This created TWEANN is unique only to the instance in which it is used. In a sense, it's a one-and-done network, which explains the lax use of innovation numbers
 * @return TWEANN generated by CPPN
 */
@Override public TWEANN getPhenotype(){
  TWEANN cppn=super.getPhenotype();
  HyperNEATTask hnt=(HyperNEATTask)MMNEAT.task;
  List<Substrate> subs=hnt.getSubstrateInformation();
  List<Pair<String,String>> connections=hnt.getSubstrateConnectivity();
  innovationID=0;
  ArrayList<NodeGene> newNodes=createSubstrateNodes(subs);
  HashMap<String,Integer> substrateIndexMapping=new HashMap<String,Integer>();
  for (int i=0; i < subs.size(); i++) {
    substrateIndexMapping.put(subs.get(i).getName(),i);
  }
  ArrayList<LinkGene> newLinks=createNodeLinks(cppn,connections,subs,substrateIndexMapping);
  TWEANNGenotype tg=new TWEANNGenotype(newNodes,newLinks,1,false,false,-1);
  return tg.getPhenotype();
}","/** 
 * Uses another CPPN to create a TWEANN controller for the domain. This created TWEANN is unique only to the instance in which it is used. In a sense, it's a one-and-done network, which explains the lax use of innovation numbers
 * @return TWEANN generated by CPPN
 */
@Override public TWEANN getPhenotype(){
  TWEANN cppn=super.getPhenotype();
  HyperNEATTask hnt=(HyperNEATTask)MMNEAT.task;
  List<Substrate> subs=hnt.getSubstrateInformation();
  List<Pair<String,String>> connections=hnt.getSubstrateConnectivity();
  innovationID=0;
  ArrayList<NodeGene> newNodes=createSubstrateNodes(subs);
  HashMap<String,Integer> substrateIndexMapping=new HashMap<String,Integer>();
  for (int i=0; i < subs.size(); i++) {
    substrateIndexMapping.put(subs.get(i).getName(),i);
  }
  ArrayList<LinkGene> newLinks=createNodeLinks(cppn,connections,subs,substrateIndexMapping);
  int phenotypeOutputs=0;
  for (  Substrate s : subs) {
    if (s.getStype() == Substrate.OUTPUT_SUBSTRATE) {
      phenotypeOutputs+=s.size.t1 * s.size.t2;
    }
  }
  TWEANNGenotype tg=new TWEANNGenotype(newNodes,newLinks,phenotypeOutputs,false,false,-1);
  return tg.getPhenotype();
}"
39299,"@Override public Genotype<TWEANN> copy(){
  int[] temp=moduleUsage;
  ArrayList<LinkGene> links=new ArrayList<LinkGene>(this.links.size());
  for (  LinkGene lg : this.links) {
    links.add(new LinkGene(lg.sourceInnovation,lg.targetInnovation,lg.weight,lg.innovation,false));
  }
  ArrayList<NodeGene> genes=new ArrayList<NodeGene>(this.nodes.size());
  for (  NodeGene ng : this.nodes) {
    genes.add(new NodeGene(ng.ftype,ng.ntype,ng.innovation,false));
  }
  HyperNEATCPPNGenotype result=new HyperNEATCPPNGenotype(links,genes);
  moduleUsage=temp;
  result.moduleUsage=new int[temp.length];
  System.arraycopy(this.moduleUsage,0,result.moduleUsage,0,moduleUsage.length);
  return result;
}","/** 
 * Copies given genotype
 */
@Override public Genotype<TWEANN> copy(){
  int[] temp=moduleUsage;
  ArrayList<LinkGene> links=new ArrayList<LinkGene>(this.links.size());
  for (  LinkGene lg : this.links) {
    links.add(new LinkGene(lg.sourceInnovation,lg.targetInnovation,lg.weight,lg.innovation,false));
  }
  ArrayList<NodeGene> genes=new ArrayList<NodeGene>(this.nodes.size());
  for (  NodeGene ng : this.nodes) {
    genes.add(new NodeGene(ng.ftype,ng.ntype,ng.innovation,false));
  }
  HyperNEATCPPNGenotype result=new HyperNEATCPPNGenotype(links,genes,MMNEAT.networkOutputs);
  moduleUsage=temp;
  result.moduleUsage=new int[temp.length];
  System.arraycopy(this.moduleUsage,0,result.moduleUsage,0,moduleUsage.length);
  return result;
}"
39300,"@Override public int[] getAction(TorusAgent me,TorusWorld world,TorusAgent[] preds,TorusAgent[] prey){
  double[] inputs=inputs();
  double[] outputs=nn.process(inputs);
  System.out.println(""String_Node_Str"" + inputs.length);
  System.out.println(""String_Node_Str"" + outputs.length);
  System.out.println(""String_Node_Str"" + nn.numInputs() + ""String_Node_Str""+ nn.numOutputs());
  double[] modifiedOutputs=mapSubstrateOutputsToStandardOutputs(outputs);
  return isPredator ? predatorActions()[StatisticsUtilities.argmax(modifiedOutputs)] : preyActions()[StatisticsUtilities.argmax(modifiedOutputs)];
}","@Override public int[] getAction(TorusAgent me,TorusWorld world,TorusAgent[] preds,TorusAgent[] prey){
  double[] inputs=inputs();
  double[] outputs=nn.process(inputs);
  double[] modifiedOutputs=mapSubstrateOutputsToStandardOutputs(outputs);
  return isPredator ? predatorActions()[StatisticsUtilities.argmax(modifiedOutputs)] : preyActions()[StatisticsUtilities.argmax(modifiedOutputs)];
}"
39301,"public double[] mapSubstrateOutputsToStandardOutputs(double[] outputs){
  double[] modifiedOutputs=new double[numOutputs];
  if (numOutputs == NUM_OUTPUTS_WITH_NO_ACTION) {
    modifiedOutputs[NOTHING_INDEX]=outputs[SUBSTRATE_NOTHING_INDEX];
  }
  System.out.println(Arrays.toString(outputs));
  modifiedOutputs[TorusPredPreyController.UP_INDEX]=outputs[SUBSTRATE_UP_INDEX];
  modifiedOutputs[TorusPredPreyController.RIGHT_INDEX]=outputs[SUBSTRATE_RIGHT_INDEX];
  modifiedOutputs[TorusPredPreyController.DOWN_INDEX]=outputs[SUBSTRATE_DOWN_INDEX];
  modifiedOutputs[TorusPredPreyController.LEFT_INDEX]=outputs[SUBSTRATE_LEFT_INDEX];
  return modifiedOutputs;
}","public double[] mapSubstrateOutputsToStandardOutputs(double[] outputs){
  double[] modifiedOutputs=new double[numOutputs];
  if (numOutputs == NUM_OUTPUTS_WITH_NO_ACTION) {
    modifiedOutputs[NOTHING_INDEX]=outputs[SUBSTRATE_NOTHING_INDEX];
  }
  modifiedOutputs[TorusPredPreyController.UP_INDEX]=outputs[SUBSTRATE_UP_INDEX];
  modifiedOutputs[TorusPredPreyController.RIGHT_INDEX]=outputs[SUBSTRATE_RIGHT_INDEX];
  modifiedOutputs[TorusPredPreyController.DOWN_INDEX]=outputs[SUBSTRATE_DOWN_INDEX];
  modifiedOutputs[TorusPredPreyController.LEFT_INDEX]=outputs[SUBSTRATE_LEFT_INDEX];
  return modifiedOutputs;
}"
39302,"@Override public int numFeatures(){
  return super.numFeatures();
}","@Override public int numFeatures(){
  return super.numFeatures() + TetrisState.worldWidth;
}"
39303,"@Override public double[] extract(Observation o){
  double[] base=super.extract(o);
  int[] worldState=new int[worldWidth * worldHeight];
  System.arraycopy(o.intArray,0,worldState,0,worldWidth * worldHeight);
  double[] blockIndicator=new double[possibleBlocks.size()];
  for (int i=0; i < possibleBlocks.size(); i++) {
    blockIndicator[i]=o.intArray[worldState.length + i];
  }
  int blockId=StatisticsUtilities.argmax(blockIndicator);
  int blockX=o.intArray[TetrisState.TETRIS_STATE_CURRENT_X_INDEX];
  int blockY=o.intArray[TetrisState.TETRIS_STATE_CURRENT_Y_INDEX];
  int blockRotation=o.intArray[TetrisState.TETRIS_STATE_CURRENT_ROTATION_INDEX];
  double[] added=new double[worldWidth];
  for (int i=0; i < added.length; i++) {
    double h=columnHeight(i,worldState);
    added[i]=columnHoles(i,worldState,(int)h);
  }
  double[] combined=new double[base.length + added.length];
  System.arraycopy(base,0,combined,0,base.length);
  System.arraycopy(added,0,combined,base.length,added.length);
  return combined;
}","@Override public double[] extract(Observation o){
  double[] base=super.extract(o);
  int[] worldState=new int[worldWidth * worldHeight];
  System.arraycopy(o.intArray,0,worldState,0,worldWidth * worldHeight);
  double[] blockIndicator=new double[possibleBlocks.size()];
  for (int i=0; i < possibleBlocks.size(); i++) {
    blockIndicator[i]=o.intArray[worldState.length + i];
  }
  double[] added=new double[worldWidth];
  for (int i=0; i < added.length; i++) {
    double h=columnHeight(i,worldState);
    added[i]=columnHoles(i,worldState,(int)h);
  }
  double[] combined=new double[super.numFeatures() + added.length];
  System.arraycopy(base,0,combined,0,super.numFeatures());
  System.arraycopy(added,0,combined,super.numFeatures(),added.length);
  return combined;
}"
39304,"@Test public void number_of_holes(){
  TetrisState testState=new TetrisState();
  BertsekasTsitsiklisTetrisExtractor EBTTE=new ExtendedBertsekasTsitsiklisTetrisExtractor();
  testState.worldState[166]=1;
  testState.worldState[167]=1;
  testState.worldState[168]=1;
  testState.worldState[169]=1;
  testState.currentX+=2;
  testState.currentY+=14;
  testState.worldState[171]=1;
  testState.worldState[172]=1;
  testState.worldState[180]=1;
  testState.worldState[181]=1;
  testState.worldState[192]=1;
  testState.worldState[193]=1;
  testState.worldState[194]=1;
  testState.worldState[182]=1;
  testState.worldState[197]=1;
  testState.worldState[187]=1;
  testState.worldState[177]=1;
  testState.worldState[178]=1;
  testState.worldState[195]=1;
  testState.worldState[185]=1;
  testState.worldState[175]=1;
  testState.worldState[186]=1;
  Observation o=testState.get_observation();
  double[] inputs=EBTTE.scaleInputs(EBTTE.extract(o));
  double[] expected=EBTTE.scaleInputs(new double[]{2,3,3,1,1,3,4,4,4,4,1,0,2,0,2,1,0,0,0,4,9,1,1,1,0,0,0,0,2,0,2,3});
  for (int i=0; i < inputs.length; i++) {
    assertEquals(inputs[i],expected[i],0.0);
  }
}","@Test public void number_of_holes(){
  TetrisState testState=new TetrisState();
  BertsekasTsitsiklisTetrisExtractor EBTTE=new ExtendedBertsekasTsitsiklisTetrisExtractor();
  testState.worldState[166]=1;
  testState.worldState[167]=1;
  testState.worldState[168]=1;
  testState.worldState[169]=1;
  testState.currentX+=2;
  testState.currentY+=14;
  testState.worldState[171]=1;
  testState.worldState[172]=1;
  testState.worldState[180]=1;
  testState.worldState[181]=1;
  testState.worldState[192]=1;
  testState.worldState[193]=1;
  testState.worldState[194]=1;
  testState.worldState[182]=1;
  testState.worldState[197]=1;
  testState.worldState[187]=1;
  testState.worldState[177]=1;
  testState.worldState[178]=1;
  testState.worldState[195]=1;
  testState.worldState[185]=1;
  testState.worldState[175]=1;
  testState.worldState[186]=1;
  Observation o=testState.get_observation();
  double[] inputs=EBTTE.scaleInputs(EBTTE.extract(o));
  System.out.println(inputs.length);
  System.out.println(Arrays.toString(inputs));
  double[] expected=EBTTE.scaleInputs(new double[]{2,3,3,1,1,3,4,4,4,4,1,0,2,0,2,1,0,0,0,4,9,1,1,1,0,0,0,0,2,0,2,3});
  System.out.println(expected.length);
  System.out.println(Arrays.toString(expected));
  for (int i=0; i < inputs.length; i++) {
    assertEquals(inputs[i],expected[i],0.0);
  }
}"
39305,"@Override public double[] extract(Observation o){
  double[] base=super.extract(o);
  int[] worldState=new int[worldWidth * worldHeight];
  System.arraycopy(o.intArray,0,worldState,0,worldWidth * worldHeight);
  double[] blockIndicator=new double[possibleBlocks.size()];
  for (int i=0; i < possibleBlocks.size(); i++) {
    blockIndicator[i]=o.intArray[worldState.length + i];
  }
  int blockId=StatisticsUtilities.argmax(blockIndicator);
  int blockX=o.intArray[TetrisState.TETRIS_STATE_CURRENT_X_INDEX];
  int blockY=o.intArray[TetrisState.TETRIS_STATE_CURRENT_Y_INDEX];
  int blockRotation=o.intArray[TetrisState.TETRIS_STATE_CURRENT_ROTATION_INDEX];
  double[] added=new double[5];
  for (int i=0; i < added.length; i++) {
    added[i]=pieceDistanceFromBlocks(worldState,blockId,blockX,blockY,blockRotation,i);
  }
  double[] combined=new double[base.length + added.length];
  System.arraycopy(base,0,combined,0,base.length);
  System.arraycopy(added,0,combined,base.length,added.length);
  return combined;
}","@Override public double[] extract(Observation o){
  double[] base=super.extract(o);
  int[] worldState=new int[worldWidth * worldHeight];
  System.arraycopy(o.intArray,0,worldState,0,worldWidth * worldHeight);
  double[] blockIndicator=new double[possibleBlocks.size()];
  for (int i=0; i < possibleBlocks.size(); i++) {
    blockIndicator[i]=o.intArray[worldState.length + i];
  }
  int blockId=StatisticsUtilities.argmax(blockIndicator);
  int blockX=o.intArray[TetrisState.TETRIS_STATE_CURRENT_X_INDEX];
  int blockY=o.intArray[TetrisState.TETRIS_STATE_CURRENT_Y_INDEX];
  int blockRotation=o.intArray[TetrisState.TETRIS_STATE_CURRENT_ROTATION_INDEX];
  double[] added=new double[5];
  for (int i=0; i < added.length; i++) {
    added[i]=pieceDistanceFromBlocks(worldState,blockId,blockX,blockY,blockRotation,i);
  }
  double[] combined=new double[super.numFeatures() + added.length];
  System.arraycopy(base,0,combined,0,super.numFeatures());
  System.arraycopy(added,0,combined,super.numFeatures(),added.length);
  return combined;
}"
39306,"public static void loadClasses(){
  Properties props=System.getProperties();
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    ActivationFunctions.initFunctionSet();
    setupSaveDirectory();
    fitnessFunctions=new ArrayList<String>();
    aggregationOverrides=new ArrayList<Statistic>();
    boolean loadFrom=!Parameters.parameters.stringParameter(""String_Node_Str"").equals(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    EvolutionaryHistory.initGenotypeIds();
    weightPerturber=(RandomGenerator)ClassCreation.createObject(""String_Node_Str"");
    setupCrossover();
    setupRLGlue();
    setupFunctionOptimization();
    System.out.println(""String_Node_Str"");
    if (taskHasSubnetworks()) {
      modesToTrack=Parameters.parameters.integerParameter(""String_Node_Str"");
    }
 else {
      int multitaskModes=CommonConstants.multitaskModules;
      if (!CommonConstants.hierarchicalMultitask && multitaskModes > 1) {
        modesToTrack=multitaskModes;
      }
    }
    task=(Task)ClassCreation.createObject(""String_Node_Str"");
    boolean coevolution=false;
    if (Parameters.parameters.booleanParameter(""String_Node_Str"") && Parameters.parameters.stringParameter(""String_Node_Str"").equals(""String_Node_Str"") && Parameters.parameters.integerParameter(""String_Node_Str"") == 0) {
      System.out.println(""String_Node_Str"");
      Parameters.parameters.setDouble(""String_Node_Str"",0.999);
    }
    if (task instanceof MsPacManTask) {
      setupGenotypePoolsForMsPacman();
      System.out.println(""String_Node_Str"");
      pacmanInputOutputMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      if (MMNEAT.pacmanInputOutputMediator instanceof VariableDirectionBlockLoadedInputOutputMediator) {
        directionalSafetyFunction=(VariableDirectionBlock)ClassCreation.createObject(""String_Node_Str"");
        ensembleArbitrator=(MsPacManEnsembleArbitrator)ClassCreation.createObject(""String_Node_Str"");
      }
      String preferenceNet=Parameters.parameters.stringParameter(""String_Node_Str"");
      String multitaskNet=Parameters.parameters.stringParameter(""String_Node_Str"");
      if (multitaskNet != null && !multitaskNet.isEmpty()) {
        MMNEAT.sharedMultitaskNetwork=(TWEANNGenotype)Easy.load(multitaskNet);
        if (CommonConstants.showNetworks) {
          DrawingPanel panel=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
          MMNEAT.sharedMultitaskNetwork.getPhenotype().draw(panel);
        }
        setNNInputParameters(pacmanInputOutputMediator.numIn(),MMNEAT.sharedMultitaskNetwork.numModules);
      }
 else       if (preferenceNet != null && !preferenceNet.isEmpty()) {
        MMNEAT.sharedPreferenceNetwork=(TWEANNGenotype)Easy.load(preferenceNet);
        if (CommonConstants.showNetworks) {
          DrawingPanel panel=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
          MMNEAT.sharedPreferenceNetwork.getPhenotype().draw(panel);
        }
        setNNInputParameters(pacmanInputOutputMediator.numIn(),MMNEAT.sharedPreferenceNetwork.numOut);
      }
 else       if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"");
        ghostsInputOutputMediator=new GhostsCheckEachDirectionMediator();
        setNNInputParameters(ghostsInputOutputMediator.numIn(),ghostsInputOutputMediator.numOut());
      }
 else {
        setNNInputParameters(pacmanInputOutputMediator.numIn(),pacmanInputOutputMediator.numOut());
      }
      setupMsPacmanParameters();
      if (CommonConstants.multitaskModules > 1) {
        pacmanMultitaskScheme=(MsPacManModeSelector)ClassCreation.createObject(""String_Node_Str"");
      }
    }
 else     if (task instanceof CooperativeMsPacManTask) {
      System.out.println(""String_Node_Str"");
      coevolution=true;
      EvolutionaryHistory.initInnovationHistory();
      setupMsPacmanParameters();
      if (task instanceof CooperativeGhostMonitorNetworksMsPacManTask) {
        setupCooperativeCoevolutionGhostMonitorsForMsPacman();
      }
 else       if (task instanceof CooperativeSubtaskSelectorMsPacManTask) {
        setupCooperativeCoevolutionSelectorForMsPacman();
      }
 else       if (task instanceof CooperativeSubtaskCombinerMsPacManTask) {
        setupCooperativeCoevolutionCombinerForMsPacman();
      }
 else       if (task instanceof CooperativeNonHierarchicalMultiNetMsPacManTask) {
        setupCooperativeCoevolutionNonHierarchicalForMsPacman();
      }
 else       if (task instanceof CooperativeCheckEachMultitaskSelectorMsPacManTask) {
        setupCooperativeCoevolutionCheckEachMultitaskPreferenceNetForMsPacman();
      }
    }
 else     if (task instanceof RLGlueTask) {
      RLGlueTask rlTask=(RLGlueTask)task;
      setNNInputParameters(rlGlueExtractor.numFeatures(),rlTask.agent.getNumberOutputs());
    }
 else     if (task instanceof Breve2DTask) {
      System.out.println(""String_Node_Str"");
      Breve2DDynamics dynamics=(Breve2DDynamics)ClassCreation.createObject(""String_Node_Str"");
      setNNInputParameters(dynamics.numInputSensors(),NNBreve2DMonster.NUM_OUTPUTS);
    }
 else     if (task instanceof TorusPredPreyTask) {
      System.out.println(""String_Node_Str"");
      NetworkTask t=(NetworkTask)task;
      setNNInputParameters(t.sensorLabels().length,t.outputLabels().length);
    }
 else     if (task instanceof UT2004Task) {
      System.out.println(""String_Node_Str"");
      UT2004Task utTask=(UT2004Task)task;
      setNNInputParameters(utTask.sensorModel.numberOfSensors(),utTask.outputModel.numberOfOutputs());
    }
 else     if (task instanceof MatchDataTask) {
      System.out.println(""String_Node_Str"");
      MatchDataTask t=(MatchDataTask)task;
      setNNInputParameters(t.numInputs(),t.numOutputs());
    }
 else     if (task == null) {
      setNNInputParameters(5,3);
    }
 else {
      System.out.println(""String_Node_Str"");
      System.out.println(task);
      System.exit(1);
    }
    setupMetaHeuristics();
    if (!loadFrom) {
      System.out.println(""String_Node_Str"");
      ea=(GenerationalEA)ClassCreation.createObject(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    String seedGenotype=Parameters.parameters.stringParameter(""String_Node_Str"");
    if (task instanceof MsPacManTask && Parameters.parameters.booleanParameter(""String_Node_Str"") && CommonConstants.multitaskModules == 2) {
      System.out.println(""String_Node_Str"");
      String ghostDir=Parameters.parameters.stringParameter(""String_Node_Str"");
      String pillDir=Parameters.parameters.stringParameter(""String_Node_Str"");
      String lastSavedDirectory=Parameters.parameters.stringParameter(""String_Node_Str"");
      if (lastSavedDirectory.isEmpty()) {
        if (!ghostDir.isEmpty() && !pillDir.isEmpty()) {
          setupMultitaskSeedPopulationForMsPacman(ghostDir,pillDir);
        }
 else {
          setupSingleMultitaskSeedForMsPacman();
        }
      }
      System.out.println(""String_Node_Str"");
      MsPacManControllerInputOutputMediator ghostMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      MsPacManControllerInputOutputMediator pillMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      pacmanInputOutputMediator=new MultipleInputOutputMediator(new MsPacManControllerInputOutputMediator[]{ghostMediator,pillMediator});
      setNNInputParameters(pacmanInputOutputMediator.numIn(),pacmanInputOutputMediator.numOut());
    }
 else     if (seedGenotype.isEmpty()) {
      genotype=(Genotype)ClassCreation.createObject(""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"" + seedGenotype);
      genotype=((Genotype)Easy.load(seedGenotype)).copy();
      seedExample=true;
    }
    setupTWEANNGenotypeDataTracking(coevolution);
    System.out.println(""String_Node_Str"");
    experiment=(Experiment)ClassCreation.createObject(""String_Node_Str"");
    experiment.init();
    if (!loadFrom && Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      if (Parameters.parameters.booleanParameter(""String_Node_Str"") && !coevolution) {
        performanceLog=new PerformanceLog(""String_Node_Str"");
      }
      if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        EvolutionaryHistory.initLineageAndMutationLogs();
      }
    }
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"" + ex);
    ex.printStackTrace();
  }
}","public static void loadClasses(){
  try {
    ActivationFunctions.initFunctionSet();
    setupSaveDirectory();
    fitnessFunctions=new ArrayList<String>();
    aggregationOverrides=new ArrayList<Statistic>();
    boolean loadFrom=!Parameters.parameters.stringParameter(""String_Node_Str"").equals(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    EvolutionaryHistory.initGenotypeIds();
    weightPerturber=(RandomGenerator)ClassCreation.createObject(""String_Node_Str"");
    setupCrossover();
    setupRLGlue();
    setupFunctionOptimization();
    System.out.println(""String_Node_Str"");
    if (taskHasSubnetworks()) {
      modesToTrack=Parameters.parameters.integerParameter(""String_Node_Str"");
    }
 else {
      int multitaskModes=CommonConstants.multitaskModules;
      if (!CommonConstants.hierarchicalMultitask && multitaskModes > 1) {
        modesToTrack=multitaskModes;
      }
    }
    task=(Task)ClassCreation.createObject(""String_Node_Str"");
    boolean coevolution=false;
    if (Parameters.parameters.booleanParameter(""String_Node_Str"") && Parameters.parameters.stringParameter(""String_Node_Str"").equals(""String_Node_Str"") && Parameters.parameters.integerParameter(""String_Node_Str"") == 0) {
      System.out.println(""String_Node_Str"");
      Parameters.parameters.setDouble(""String_Node_Str"",0.999);
    }
    if (task instanceof MsPacManTask) {
      setupGenotypePoolsForMsPacman();
      System.out.println(""String_Node_Str"");
      pacmanInputOutputMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      if (MMNEAT.pacmanInputOutputMediator instanceof VariableDirectionBlockLoadedInputOutputMediator) {
        directionalSafetyFunction=(VariableDirectionBlock)ClassCreation.createObject(""String_Node_Str"");
        ensembleArbitrator=(MsPacManEnsembleArbitrator)ClassCreation.createObject(""String_Node_Str"");
      }
      String preferenceNet=Parameters.parameters.stringParameter(""String_Node_Str"");
      String multitaskNet=Parameters.parameters.stringParameter(""String_Node_Str"");
      if (multitaskNet != null && !multitaskNet.isEmpty()) {
        MMNEAT.sharedMultitaskNetwork=(TWEANNGenotype)Easy.load(multitaskNet);
        if (CommonConstants.showNetworks) {
          DrawingPanel panel=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
          MMNEAT.sharedMultitaskNetwork.getPhenotype().draw(panel);
        }
        setNNInputParameters(pacmanInputOutputMediator.numIn(),MMNEAT.sharedMultitaskNetwork.numModules);
      }
 else       if (preferenceNet != null && !preferenceNet.isEmpty()) {
        MMNEAT.sharedPreferenceNetwork=(TWEANNGenotype)Easy.load(preferenceNet);
        if (CommonConstants.showNetworks) {
          DrawingPanel panel=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
          MMNEAT.sharedPreferenceNetwork.getPhenotype().draw(panel);
        }
        setNNInputParameters(pacmanInputOutputMediator.numIn(),MMNEAT.sharedPreferenceNetwork.numOut);
      }
 else       if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"");
        ghostsInputOutputMediator=new GhostsCheckEachDirectionMediator();
        setNNInputParameters(ghostsInputOutputMediator.numIn(),ghostsInputOutputMediator.numOut());
      }
 else {
        setNNInputParameters(pacmanInputOutputMediator.numIn(),pacmanInputOutputMediator.numOut());
      }
      setupMsPacmanParameters();
      if (CommonConstants.multitaskModules > 1) {
        pacmanMultitaskScheme=(MsPacManModeSelector)ClassCreation.createObject(""String_Node_Str"");
      }
    }
 else     if (task instanceof CooperativeMsPacManTask) {
      System.out.println(""String_Node_Str"");
      coevolution=true;
      EvolutionaryHistory.initInnovationHistory();
      setupMsPacmanParameters();
      if (task instanceof CooperativeGhostMonitorNetworksMsPacManTask) {
        setupCooperativeCoevolutionGhostMonitorsForMsPacman();
      }
 else       if (task instanceof CooperativeSubtaskSelectorMsPacManTask) {
        setupCooperativeCoevolutionSelectorForMsPacman();
      }
 else       if (task instanceof CooperativeSubtaskCombinerMsPacManTask) {
        setupCooperativeCoevolutionCombinerForMsPacman();
      }
 else       if (task instanceof CooperativeNonHierarchicalMultiNetMsPacManTask) {
        setupCooperativeCoevolutionNonHierarchicalForMsPacman();
      }
 else       if (task instanceof CooperativeCheckEachMultitaskSelectorMsPacManTask) {
        setupCooperativeCoevolutionCheckEachMultitaskPreferenceNetForMsPacman();
      }
    }
 else     if (task instanceof RLGlueTask) {
      RLGlueTask rlTask=(RLGlueTask)task;
      setNNInputParameters(rlGlueExtractor.numFeatures(),rlTask.agent.getNumberOutputs());
    }
 else     if (task instanceof Breve2DTask) {
      System.out.println(""String_Node_Str"");
      Breve2DDynamics dynamics=(Breve2DDynamics)ClassCreation.createObject(""String_Node_Str"");
      setNNInputParameters(dynamics.numInputSensors(),NNBreve2DMonster.NUM_OUTPUTS);
    }
 else     if (task instanceof TorusPredPreyTask) {
      System.out.println(""String_Node_Str"");
      NetworkTask t=(NetworkTask)task;
      setNNInputParameters(t.sensorLabels().length,t.outputLabels().length);
    }
 else     if (task instanceof UT2004Task) {
      System.out.println(""String_Node_Str"");
      UT2004Task utTask=(UT2004Task)task;
      setNNInputParameters(utTask.sensorModel.numberOfSensors(),utTask.outputModel.numberOfOutputs());
    }
 else     if (task instanceof MatchDataTask) {
      System.out.println(""String_Node_Str"");
      MatchDataTask t=(MatchDataTask)task;
      setNNInputParameters(t.numInputs(),t.numOutputs());
    }
 else     if (task == null) {
      setNNInputParameters(5,3);
    }
 else {
      System.out.println(""String_Node_Str"");
      System.out.println(task);
      System.exit(1);
    }
    setupMetaHeuristics();
    if (!loadFrom) {
      System.out.println(""String_Node_Str"");
      ea=(GenerationalEA)ClassCreation.createObject(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    String seedGenotype=Parameters.parameters.stringParameter(""String_Node_Str"");
    if (task instanceof MsPacManTask && Parameters.parameters.booleanParameter(""String_Node_Str"") && CommonConstants.multitaskModules == 2) {
      System.out.println(""String_Node_Str"");
      String ghostDir=Parameters.parameters.stringParameter(""String_Node_Str"");
      String pillDir=Parameters.parameters.stringParameter(""String_Node_Str"");
      String lastSavedDirectory=Parameters.parameters.stringParameter(""String_Node_Str"");
      if (lastSavedDirectory.isEmpty()) {
        if (!ghostDir.isEmpty() && !pillDir.isEmpty()) {
          setupMultitaskSeedPopulationForMsPacman(ghostDir,pillDir);
        }
 else {
          setupSingleMultitaskSeedForMsPacman();
        }
      }
      System.out.println(""String_Node_Str"");
      MsPacManControllerInputOutputMediator ghostMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      MsPacManControllerInputOutputMediator pillMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      pacmanInputOutputMediator=new MultipleInputOutputMediator(new MsPacManControllerInputOutputMediator[]{ghostMediator,pillMediator});
      setNNInputParameters(pacmanInputOutputMediator.numIn(),pacmanInputOutputMediator.numOut());
    }
 else     if (seedGenotype.isEmpty()) {
      genotype=(Genotype)ClassCreation.createObject(""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"" + seedGenotype);
      genotype=((Genotype)Easy.load(seedGenotype)).copy();
      seedExample=true;
    }
    setupTWEANNGenotypeDataTracking(coevolution);
    System.out.println(""String_Node_Str"");
    experiment=(Experiment)ClassCreation.createObject(""String_Node_Str"");
    experiment.init();
    if (!loadFrom && Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      if (Parameters.parameters.booleanParameter(""String_Node_Str"") && !coevolution) {
        performanceLog=new PerformanceLog(""String_Node_Str"");
      }
      if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        EvolutionaryHistory.initLineageAndMutationLogs();
      }
    }
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"" + ex);
    ex.printStackTrace();
  }
}"
39307,"/** 
 * Absolute value function for x. Uses Math.abs();
 * @param x Function parameter
 * @return value of abs(x)
 */
public static double absVal(double x){
  return Math.abs(x);
}","/** 
 * Absolute value function for x. Uses Math.abs(); Also clamps result to range [0,1] after use of absolute value because of problems with values rising to infinity.
 * @param x Function parameter
 * @return value of abs(x) clamped to [0,1]
 */
public static double absVal(double x){
  return halfLinear(Math.abs(x));
}"
39308,"/** 
 * An input is added to the sum in case it holds recurrent activation
 * @param input = sensor input
 */
protected void load(double input){
  sum+=input;
}","/** 
 * An input is added to the sum in case it holds recurrent activation
 * @param input = sensor input
 */
protected void load(double input){
}"
39309,"/** 
 * Creates connection from this Node to target Node via a new Link.
 * @param target Node to link to 
 * @param weight synaptic weight of link between nodes 
 * @param innovation Innovation number of new Link 
 * @param recurrent whether or not link is recurrent 
 * @param frozen whether or not link can be changed
 */
protected void connect(Node target,double weight,long innovation,boolean recurrent,boolean frozen){
  Link l=new Link(target,weight,innovation,recurrent,frozen);
  outputs.add(l);
}","/** 
 * Creates connection from this Node to target Node via a new Link.
 * @param target Node to link to
 * @param weight synaptic weight of link between nodes
 * @param innovation Innovation number of new Link
 * @param recurrent whether or not link is recurrent
 * @param frozen whether or not link can be changed
 */
protected void connect(Node target,double weight,long innovation,boolean recurrent,boolean frozen){
  Link l=new Link(target,weight,innovation,recurrent,frozen);
  outputs.add(l);
}"
39310,"protected void transmit(double signal){
  target.sum+=(signal * weight);
}","protected void transmit(double signal){
}"
39311,"private void activate(){
switch (ftype) {
case ActivationFunctions.FTYPE_SAWTOOTH:
    activation=ActivationFunctions.sawtooth(sum);
  break;
case ActivationFunctions.FTYPE_HLPIECEWISE:
activation=ActivationFunctions.halfLinear(sum);
break;
case ActivationFunctions.FTYPE_SIGMOID:
activation=ActivationFunctions.sigmoid(sum);
break;
case ActivationFunctions.FTYPE_TANH:
activation=ActivationFunctions.tanh(sum);
break;
case ActivationFunctions.FTYPE_ID:
activation=sum;
break;
case ActivationFunctions.FTYPE_APPROX:
activation=ActivationFunctions.quickSigmoid(sum);
break;
case ActivationFunctions.FTYPE_FULLAPPROX:
activation=ActivationFunctions.fullQuickSigmoid(sum);
break;
case ActivationFunctions.FTYPE_GAUSS:
activation=ActivationFunctions.gaussian(sum);
break;
case ActivationFunctions.FTYPE_SINE:
activation=ActivationFunctions.sine(sum);
break;
case ActivationFunctions.FTYPE_ABSVAL:
activation=ActivationFunctions.absVal(sum);
break;
}
}","private void activate(){
}"
39312,"@Override public Pair<double[],double[]> oneEval(Genotype<T> individual,int num){
  TorusPredPreyController[] predAgents=getPredAgents(individual);
  TorusPredPreyController[] preyAgents=getPreyAgents(individual);
  exec=new TorusWorldExec();
  TorusPredPreyGame game;
  if (CommonConstants.watch) {
    game=exec.runGameTimed(predAgents,preyAgents,true);
  }
 else {
    game=exec.runExperiment(predAgents,preyAgents);
  }
  double[] fitnesses=new double[objectives.size()];
  TorusPredPreyController[] evolvedAgents=preyEvolve ? preyAgents : predAgents;
  if (CommonConstants.monitorInputs) {
    for (int i=0; i < evolvedAgents.length; i++) {
      ((NNTorusPredPreyController)(evolvedAgents)[i]).networkInputs.dispose();
    }
  }
  int numModes=((NNTorusPredPreyController)evolvedAgents[0]).nn.numModules();
  int[] overallAgentModeUsage=new int[numModes];
  for (  TorusPredPreyController agent : evolvedAgents) {
    int[] thisAgentModeUsage=((NNTorusPredPreyController)agent).nn.getModeUsage();
    overallAgentModeUsage=ArrayUtil.zipAdd(overallAgentModeUsage,thisAgentModeUsage);
  }
  Organism<T> organism=new NNTorusPredPreyAgent<T>(individual,!preyEvolve);
  for (int j=0; j < objectives.size(); j++) {
    fitnesses[j]=objectives.get(j).score(game,organism);
  }
  ((NetworkGenotype<T>)individual).setModuleUsage(overallAgentModeUsage);
  double[] otherStats=new double[0];
  return new Pair<double[],double[]>(fitnesses,otherStats);
}","@Override public Pair<double[],double[]> oneEval(Genotype<T> individual,int num){
  TorusPredPreyController[] predAgents=getPredAgents(individual);
  TorusPredPreyController[] preyAgents=getPreyAgents(individual);
  exec=new TorusWorldExec();
  TorusPredPreyGame game;
  if (CommonConstants.watch) {
    game=exec.runGameTimed(predAgents,preyAgents,true);
  }
 else {
    game=exec.runExperiment(predAgents,preyAgents);
  }
  double[] fitnesses=new double[objectives.size()];
  TorusPredPreyController[] evolvedAgents=preyEvolve ? preyAgents : predAgents;
  if (CommonConstants.monitorInputs) {
    for (int i=0; i < evolvedAgents.length; i++) {
      ((NNTorusPredPreyController)(evolvedAgents)[i]).networkInputs.dispose();
    }
  }
  int numModes=((NNTorusPredPreyController)evolvedAgents[0]).nn.numModules();
  int[] overallAgentModeUsage=new int[numModes];
  for (  TorusPredPreyController agent : evolvedAgents) {
    int[] thisAgentModeUsage=((NNTorusPredPreyController)agent).nn.getModuleUsage();
    overallAgentModeUsage=ArrayUtil.zipAdd(overallAgentModeUsage,thisAgentModeUsage);
  }
  Organism<T> organism=new NNTorusPredPreyAgent<T>(individual,!preyEvolve);
  for (int j=0; j < objectives.size(); j++) {
    fitnesses[j]=objectives.get(j).score(game,organism);
  }
  ((NetworkGenotype<T>)individual).setModuleUsage(overallAgentModeUsage);
  double[] otherStats=new double[0];
  return new Pair<double[],double[]>(fitnesses,otherStats);
}"
39313,"@Override public Score<T> evaluate(Genotype<T> individual){
  ArrayList<Pair<double[],double[]>> trainingSet=getTrainingPairs();
  ArrayList<ArrayList<Pair<Double,Double>>> samples=new ArrayList<ArrayList<Pair<Double,Double>>>(trainingSet.size());
  Network n=individual.getPhenotype();
  for (  Pair<double[],double[]> pattern : trainingSet) {
    double[] inputs=pattern.t1;
    double[] desiredOutputs=pattern.t2;
    double[] actualOutputs=n.process(inputs);
    if (CommonConstants.watch) {
      System.out.println(""String_Node_Str"" + Arrays.toString(desiredOutputs) + ""String_Node_Str""+ Arrays.toString(actualOutputs));
    }
    ArrayList<Pair<Double,Double>> neuronResults=new ArrayList<Pair<Double,Double>>(n.numOutputs());
    for (int i=0; i < desiredOutputs.length; i++) {
      neuronResults.add(new Pair<Double,Double>(desiredOutputs[i],actualOutputs[i]));
    }
    samples.add(neuronResults);
    if (CommonConstants.watch && pauseForEachCase) {
      MiscUtil.waitForReadStringAndEnterKeyPress();
    }
  }
  double averageError=StatisticsUtilities.averageSquaredErrorEnergy(samples);
  return new Score<T>(individual,new double[]{-averageError},null);
}","@Override public Score<T> evaluate(Genotype<T> individual){
}"
39314,"public static double average(double[] xs){
  double avg=0;
  for (int i=0; i < xs.length; i++) {
    avg+=(xs[i] - avg) / (i + 1);
  }
  return avg;
}","public static double average(double[] xs){
}"
39315,"/** 
 * Compute ""TOTAL instantaneous error energy"" as described on page 161 of Neural Networks by Haykin. COULD BE SLIGHTLY OPTIMIZED
 * @param pairs each pair is desired/actual values for one output neuron
 * @return total error across whole output layer
 */
public static double instantaneousTotalErrorEnergy(ArrayList<Pair<Double,Double>> pairs){
  double sum=0;
  for (  Pair<Double,Double> p : pairs) {
    sum+=instantaneousErrorEnergy(p.t1,p.t2);
  }
  return sum;
}","/** 
 * Compute ""TOTAL instantaneous error energy"" as described on page 161 of Neural Networks by Haykin. COULD BE SLIGHTLY OPTIMIZED
 * @param pairs each pair is desired/actual values for one output neuron
 * @return total error across whole output layer
 */
public static double instantaneousTotalErrorEnergy(ArrayList<Pair<Double,Double>> pairs){
}"
39316,"/** 
 * Compute ""average squared error energy"" as described on page 161 of Neural Networks by Haykin.
 * @param samples each member corresponds to a collection of desired/actual outputs for a network
 * @return 
 */
public static double averageSquaredErrorEnergy(ArrayList<ArrayList<Pair<Double,Double>>> samples){
  double[] totalErrors=new double[samples.size()];
  for (int i=0; i < totalErrors.length; i++) {
    ArrayList<Pair<Double,Double>> pairs=samples.get(i);
    totalErrors[i]=instantaneousTotalErrorEnergy(pairs);
  }
  return average(totalErrors);
}","/** 
 * Compute ""average squared error energy"" as described on page 161 of Neural Networks by Haykin.
 * @param samples each member corresponds to a collection of desired/actual outputs for a network
 * @return 
 */
public static double averageSquaredErrorEnergy(ArrayList<ArrayList<Pair<Double,Double>>> samples){
}"
39317,"/** 
 * Compute ""instantaneous error energy"" as described on page 161 of Neural Networks by Haykin.
 * @param desired what output should be
 * @param output actual output of one neuron
 * @return instantaneous error
 */
public static double instantaneousErrorEnergy(double desired,double output){
  double e=desired - output;
  if (CommonConstants.watch) {
    System.out.println(""String_Node_Str"" + e);
  }
  return (e * e) / 2.0;
}","/** 
 * Compute ""instantaneous error energy"" as described on page 161 of Neural Networks by Haykin.
 * @param desired what output should be
 * @param output actual output of one neuron
 * @return instantaneous error
 */
public static double instantaneousErrorEnergy(double desired,double output){
}"
39318,"@Override public double fitness(Organism<T> individual){
  TorusAgent[] prey=game.getPrey();
  double numCaught=0;
  for (  TorusAgent p : prey) {
    if (p == null) {
      numCaught++;
    }
  }
  if (numCaught == 0)   return ALL_PREY_SCORE;
  double fewPreyCaughtScore=(ALL_PREY_SCORE - (ALL_PREY_SCORE * (numCaught / prey.length)));
  if (numCaught == prey.length)   return (fewPreyCaughtScore * game.getTime()) / game.getTimeLimit();
  return fewPreyCaughtScore;
}","@Override public double fitness(Organism<T> individual){
  TorusAgent[] prey=game.getPrey();
  double numCaught=0;
  for (  TorusAgent p : prey) {
    if (p == null) {
      numCaught++;
    }
  }
  if (numCaught == 0)   return ALL_PREY_SCORE;
  double fewPreyCaughtScore=(ALL_PREY_SCORE - (ALL_PREY_SCORE * (numCaught / prey.length)));
  if (numCaught == prey.length)   return (fewPreyCaughtScore * (((double)game.getTime())) / ((double)game.getTimeLimit()));
  return fewPreyCaughtScore;
}"
39319,"/** 
 * creates an array list of links between substrates as dictated by connections parameter
 * @param cppn used to evolve link weight
 * @param connections list of different connections between substrates
 * @param subs list of substrates in question
 * @param sIMap hashmap that maps the substrate in question to its index in the substrate list
 * @return array list containing all the links between substrates
 */
public ArrayList<LinkGene> createNodeLinks(TWEANN cppn,List<Pair<String,String>> connections,List<Substrate> subs,HashMap<String,Integer> sIMap){
  ArrayList<LinkGene> result=new ArrayList<LinkGene>();
  for (int i=0; i < connections.size(); i++) {
    int s1Index=sIMap.get(connections.get(i).t1);
    int s2Index=sIMap.get(connections.get(i).t2);
    Substrate s1=subs.get(s1Index);
    Substrate s2=subs.get(s2Index);
    result.addAll(loopThroughLinks(cppn,i,s1,s2,s1Index,s2Index,subs));
  }
  return result;
}","/** 
 * creates an array list of links between substrates as dictated by connections parameter
 * @param cppn used to evolve link weight
 * @param connections list of different connections between substrates
 * @param subs list of substrates in question
 * @param sIMap hashmap that maps the substrate in question to its index inthe substrate list
 * @return array list containing all the links between substrates
 */
public ArrayList<LinkGene> createNodeLinks(TWEANN cppn,List<Pair<String,String>> connections,List<Substrate> subs,HashMap<String,Integer> sIMap){
  ArrayList<LinkGene> result=new ArrayList<LinkGene>();
  for (int i=0; i < connections.size(); i++) {
    int sourceSubstrateIndex=sIMap.get(connections.get(i).t1);
    int targetSubstrateIndex=sIMap.get(connections.get(i).t2);
    Substrate sourceSubstrate=subs.get(sourceSubstrateIndex);
    Substrate targetSubstrate=subs.get(targetSubstrateIndex);
    result.addAll(loopThroughLinks(cppn,i,sourceSubstrate,targetSubstrate,sourceSubstrateIndex,targetSubstrateIndex,subs));
  }
  return result;
}"
39320,"/** 
 * returns the innovation id of the node in question
 * @param x x-coordinate of node
 * @param y y-coordinate of node
 * @param sIndex index of substrate in question
 * @param subs list of substrates available
 * @return innovationID of link in question
 */
public long getInnovationID(int x,int y,int sIndex,List<Substrate> subs){
  long innovationID=0;
  int i=0;
  while (i < sIndex) {
    innovationID+=subs.get(i).size.t1 * subs.get(i).size.t2;
  }
  innovationID+=subs.get(sIndex).size.t1 * (y - 1) + x;
  return innovationID;
}","/** 
 * returns the innovation id of the node in question
 * @param x x-coordinate of node
 * @param y y-coordinate of node
 * @param sIndex index of substrate in question
 * @param subs list of substrates available
 * @return innovationID of link in question
 */
public long getInnovationID(int x,int y,int sIndex,List<Substrate> subs){
  long innovationIDAccumulator=0;
  for (int i=0; i < sIndex; i++) {
    Substrate s=subs.get(i);
    innovationIDAccumulator+=s.size.t1 * s.size.t2;
  }
  innovationIDAccumulator+=(subs.get(sIndex).size.t1 * y) + x;
  return innovationIDAccumulator;
}"
39321,"/** 
 * Uses another CPPN to create a TWEANN controller for the domain. This created TWEANN is unique only to the instance in which it is used. In a sense, it's a one-and-done network, which explains the lax use of innovation numbers
 */
public TWEANN getPhenotype(){
  TWEANN cppn=super.getPhenotype();
  HyperNEATTask hnt=(HyperNEATTask)MMNEAT.task;
  List<Substrate> subs=hnt.getSubstrateInformation();
  List<Pair<String,String>> connections=hnt.getSubstrateConnectivity();
  innovationID=0;
  ArrayList<NodeGene> nodes=createSubstrateNodes(subs);
  HashMap<String,Integer> substrateIndexMapping=new HashMap<String,Integer>();
  for (int i=0; i < subs.size(); i++) {
    substrateIndexMapping.put(subs.get(i).getName(),i);
  }
  ArrayList<LinkGene> links=createNodeLinks(cppn,connections,subs,substrateIndexMapping);
  TWEANNGenotype tg=new TWEANNGenotype(nodes,links,neuronsPerModule,false,false,-1);
  return tg.getPhenotype();
}","/** 
 * Uses another CPPN to create a TWEANN controller for the domain. This created TWEANN is unique only to the instance in which it is used. In a sense, it's a one-and-done network, which explains the lax use of innovation numbers
 * @return TWEANN generated by CPPN
 */
@Override public TWEANN getPhenotype(){
  TWEANN cppn=super.getPhenotype();
  HyperNEATTask hnt=(HyperNEATTask)MMNEAT.task;
  List<Substrate> subs=hnt.getSubstrateInformation();
  List<Pair<String,String>> connections=hnt.getSubstrateConnectivity();
  innovationID=0;
  ArrayList<NodeGene> newNodes=createSubstrateNodes(subs);
  HashMap<String,Integer> substrateIndexMapping=new HashMap<String,Integer>();
  for (int i=0; i < subs.size(); i++) {
    substrateIndexMapping.put(subs.get(i).getName(),i);
  }
  ArrayList<LinkGene> newLinks=createNodeLinks(cppn,connections,subs,substrateIndexMapping);
  TWEANNGenotype tg=new TWEANNGenotype(newNodes,newLinks,1,false,false,-1);
  return tg.getPhenotype();
}"
39322,"/** 
 * a method for looping through all nodes of two substrates to be linked
 * @param cppn used to evolve link weight
 * @param outputIndex index from cppn outputs to be used as weight in creating link
 * @param s1 first substrate to be linked
 * @param s2 second substrate to be linked
 * @param s1Index index of first substrate in substrate list
 * @param s2Index index of second substrate in substrate list
 * @param subs list of substrates
 * @return array list containing the genes linked between the two substrates
 */
public ArrayList<LinkGene> loopThroughLinks(TWEANN cppn,int outputIndex,Substrate s1,Substrate s2,int s1Index,int s2Index,List<Substrate> subs){
  ArrayList<LinkGene> lg=new ArrayList<LinkGene>();
  for (int X1=0; X1 < s1.size.t1; X1++) {
    for (int Y1=0; Y1 < s1.size.t2; Y1++) {
      for (int X2=0; X2 < s2.size.t1; Y1++) {
        for (int Y2=0; Y2 < s2.size.t2; Y2++) {
          double[] inputs={(double)X1,(double)X2,(double)Y1,(double)Y2,BIAS};
          lg.add(new LinkGene(getInnovationID(X1,Y1,s1Index,subs),getInnovationID(X2,Y2,s2Index,subs),cppn.process(inputs)[outputIndex],innovationID++,false));
        }
      }
    }
  }
  return lg;
}","/** 
 * a method for looping through all nodes of two substrates to be linked
 * @param cppn used to evolve link weight
 * @param outputIndex index from cppn outputs to be used as weight increating link
 * @param s1 first substrate to be linked
 * @param s2 second substrate to be linked
 * @param s1Index index of first substrate in substrate list
 * @param s2Index index of second substrate in substrate list
 * @param subs list of substrates
 * @return array list containing the genes linked between the two substrates
 */
public ArrayList<LinkGene> loopThroughLinks(TWEANN cppn,int outputIndex,Substrate s1,Substrate s2,int s1Index,int s2Index,List<Substrate> subs){
  ArrayList<LinkGene> newLinks=new ArrayList<LinkGene>();
  for (int X1=0; X1 < s1.size.t1; X1++) {
    for (int Y1=0; Y1 < s1.size.t2; Y1++) {
      for (int X2=0; X2 < s2.size.t1; X2++) {
        for (int Y2=0; Y2 < s2.size.t2; Y2++) {
          ILocated2D scaledSourceCoordinates=CartesianGeometricUtilities.centerAndScale(new Tuple2D(X1,Y1),s1.size.t1,s1.size.t2);
          ILocated2D scaledTargetCoordinates=CartesianGeometricUtilities.centerAndScale(new Tuple2D(X2,Y2),s2.size.t1,s2.size.t2);
          double[] inputs={scaledSourceCoordinates.getX(),scaledSourceCoordinates.getY(),scaledTargetCoordinates.getX(),scaledTargetCoordinates.getY(),BIAS};
          double[] outputs=cppn.process(inputs);
          newLinks.add(new LinkGene(getInnovationID(X1,Y1,s1Index,subs),getInnovationID(X2,Y2,s2Index,subs),outputs[outputIndex],innovationID++,false));
        }
      }
    }
  }
  return newLinks;
}"
39323,"/** 
 * creates an array list containing all the nodes from all the substrates
 * @param subs list of substrates extracted from domain
 * @return array llist of NodeGenes from substrates
 */
public ArrayList<NodeGene> createSubstrateNodes(List<Substrate> subs){
  ArrayList<NodeGene> nodes=new ArrayList<NodeGene>();
  for (int i=0; i < subs.size(); i++) {
    for (int j=0; j < subs.get(i).size.t1; j++) {
      for (int k=0; k < subs.get(i).size.t2; k++) {
        nodes.add(new NodeGene(CommonConstants.ftype,subs.get(i).getStype(),innovationID++));
      }
    }
  }
  return nodes;
}","/** 
 * creates an array list containing all the nodes from all the substrates
 * @param subs list of substrates extracted from domain
 * @return array list of NodeGenes from substrates
 */
public ArrayList<NodeGene> createSubstrateNodes(List<Substrate> subs){
  ArrayList<NodeGene> newNodes=new ArrayList<NodeGene>();
  for (int i=0; i < subs.size(); i++) {
    for (int x=0; x < subs.get(i).size.t1; x++) {
      for (int y=0; y < subs.get(i).size.t2; y++) {
        newNodes.add(new NodeGene(CommonConstants.ftype,subs.get(i).getStype(),innovationID++));
      }
    }
  }
  return newNodes;
}"
39324,public List<Substrate> getSubstrateInformation();,"/** 
 * Method that returns a list of information about the substrate layers contained in the network.
 * @return List of Substrates in order from inputs to hidden to output layers
 */
public List<Substrate> getSubstrateInformation();"
39325,"public List<Pair<String,String>> getSubstrateConnectivity();","/** 
 * Each Substrate has a unique String name, and this method returns a list of String pairs indicating which Substrates are connected: The Substrate from the first in the pair has links leading into the neurons in the Substrate second in the pair.
 * @return Last of String pairs where all Strings are names of Substratesfor the domain.
 */
public List<Pair<String,String>> getSubstrateConnectivity();"
39326,"public Action getAction(Observation o){
  TetrisState tempState=new TetrisState();
  tempState.currentX=o.intArray[TetrisState.TETRIS_STATE_CURRENT_X_INDEX];
  tempState.currentY=o.intArray[TetrisState.TETRIS_STATE_CURRENT_Y_INDEX];
  tempState.currentRotation=o.intArray[TetrisState.TETRIS_STATE_CURRENT_ROTATION_INDEX];
  for (int p=0; p < TetrisState.TETRIS_STATE_NUMBER_POSSIBLE_BLOCKS; p++) {
    if (o.intArray[tempState.worldState.length + p] == 1) {
      tempState.currentBlockId=p;
    }
  }
  for (int i=0; i < tempState.worldState.length; i++) {
    tempState.worldState[i]=o.intArray[i];
  }
  boolean currentWatch=CommonConstants.watch;
  CommonConstants.watch=false;
  HashSet<Pair<TetrisState,ArrayList<Integer>>> tetrisStateHolder=TertisAfterStateGenerator.evaluateAfterStates(tempState);
  CommonConstants.watch=currentWatch;
  ArrayList<Pair<Double,Integer>> outputPairs=new ArrayList<Pair<Double,Integer>>();
  double[] outputs;
  for (  Pair<TetrisState,ArrayList<Integer>> i : tetrisStateHolder) {
    double[] inputs=MMNEAT.rlGlueExtractor.extract(i.t1.get_observation());
    double[] inputsScaled=scaleInputs(inputs);
    outputs=this.consultPolicy(inputsScaled);
    Pair<Double,Integer> tempPair=new Pair<Double,Integer>(outputs[0],i.t2.get(0));
    outputPairs.add(tempPair);
  }
  double[] outputForArgmax=new double[outputPairs.size()];
  for (int i=0; i < outputForArgmax.length; i++) {
    outputForArgmax[i]=outputPairs.get(1).t1;
  }
  int index=StatisticsUtilities.argmax(outputForArgmax);
  Action action=new Action(TSO.getNumDiscreteActionDims(),TSO.getNumContinuousActionDims());
  action.intArray[0]=outputPairs.get(index).t2;
  return action;
}","public Action getAction(Observation o){
  TetrisState tempState=new TetrisState();
  tempState.currentX=o.intArray[TetrisState.TETRIS_STATE_CURRENT_X_INDEX];
  tempState.currentY=o.intArray[TetrisState.TETRIS_STATE_CURRENT_Y_INDEX];
  tempState.currentRotation=o.intArray[TetrisState.TETRIS_STATE_CURRENT_ROTATION_INDEX];
  for (int p=0; p < TetrisState.TETRIS_STATE_NUMBER_POSSIBLE_BLOCKS; p++) {
    if (o.intArray[tempState.worldState.length + p] == 1) {
      tempState.currentBlockId=p;
    }
  }
  for (int i=0; i < tempState.worldState.length; i++) {
    tempState.worldState[i]=o.intArray[i];
  }
  boolean currentWatch=CommonConstants.watch;
  CommonConstants.watch=false;
  HashSet<Pair<TetrisState,ArrayList<Integer>>> tetrisStateHolder=TertisAfterStateGenerator.evaluateAfterStates(tempState);
  CommonConstants.watch=currentWatch;
  ArrayList<Pair<Double,Integer>> outputPairs=new ArrayList<Pair<Double,Integer>>();
  double[] outputs;
  for (  Pair<TetrisState,ArrayList<Integer>> i : tetrisStateHolder) {
    double[] inputs=MMNEAT.rlGlueExtractor.extract(i.t1.get_observation());
    double[] inputsScaled=scaleInputs(inputs);
    outputs=this.consultPolicy(inputsScaled);
    Pair<Double,Integer> tempPair=new Pair<Double,Integer>(outputs[0],i.t2.get(0));
    outputPairs.add(tempPair);
  }
  double[] outputForArgmax=new double[outputPairs.size()];
  for (int i=0; i < outputForArgmax.length; i++) {
    outputForArgmax[i]=outputPairs.get(i).t1;
  }
  int index=StatisticsUtilities.argmax(outputForArgmax);
  Action action=new Action(TSO.getNumDiscreteActionDims(),TSO.getNumContinuousActionDims());
  action.intArray[0]=outputPairs.get(index).t2;
  return action;
}"
39327,"public static void randomCPPNimage(){
  MMNEAT.clearClasses();
  EvolutionaryHistory.setInnovation(0);
  EvolutionaryHistory.setHighestGenotypeId(0);
  Parameters.initializeParameterCollections(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  MMNEAT.loadClasses();
  final int NUM_MUTATIONS=200;
  final int SIZE=1000;
  int hIndex=0;
  int sIndex=1;
  int bIndex=2;
  int color=BufferedImage.TYPE_INT_RGB;
  TWEANNGenotype toDraw=new TWEANNGenotype(4,3,false,0,1,0);
  for (int i=0; i < NUM_MUTATIONS; i++) {
    toDraw.mutate();
  }
  TWEANN n=toDraw.getPhenotype();
  BufferedImage child=new BufferedImage(SIZE,SIZE,color);
  double[] hsb=null;
  for (int x=0; x < SIZE; x++) {
    for (int y=0; y < SIZE; y++) {
      double[] input={x,y,0,1};
      scale(input,SIZE,SIZE);
      ILocated2D distance=new Tuple2D(input[0],input[1]);
      input[2]=distance.distance(new Tuple2D(0,0)) * Math.sqrt(2);
      hsb=n.process(input);
      if (hsb[hIndex] < 0 || hsb[hIndex] > 1 || hsb[sIndex] < 0 || hsb[sIndex] > 1 || hsb[bIndex] < 0 || hsb[bIndex] > 1) {
        System.out.println(""String_Node_Str"");
        break;
      }
 else {
        Color childColor=Color.getHSBColor((float)hsb[hIndex],(float)Math.max(0,Math.min(hsb[sIndex],1)),(float)Math.abs(hsb[bIndex]));
        child.setRGB(x,y,childColor.getRGB());
      }
    }
  }
  System.out.println(Arrays.toString(hsb));
  System.out.println(n.toString());
  DrawingPanel network=new DrawingPanel(SIZE,SIZE,""String_Node_Str"");
  n.draw(network);
  DrawingPanel childPanel=new DrawingPanel(SIZE,SIZE,""String_Node_Str"");
  Graphics2D childGraphics=childPanel.getGraphics();
  childGraphics.drawRenderedImage(child,null);
  Scanner scan=new Scanner(System.in);
  System.out.println(""String_Node_Str"");
  if (scan.next().equals(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"");
    String filename=scan.next();
    childPanel.save(filename + ""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    if (scan.next().equals(""String_Node_Str"")) {
      network.save(filename + ""String_Node_Str"");
    }
  }
  scan.close();
}","public static void randomCPPNimage(){
  MMNEAT.clearClasses();
  EvolutionaryHistory.setInnovation(0);
  EvolutionaryHistory.setHighestGenotypeId(0);
  Parameters.initializeParameterCollections(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  MMNEAT.loadClasses();
  final int NUM_MUTATIONS=200;
  final int SIZE=1000;
  int hIndex=0;
  int sIndex=1;
  int bIndex=2;
  int color=BufferedImage.TYPE_INT_RGB;
  TWEANNGenotype toDraw=new TWEANNGenotype(4,3,false,0,1,0);
  for (int i=0; i < NUM_MUTATIONS; i++) {
    toDraw.mutate();
  }
  TWEANN n=toDraw.getPhenotype();
  BufferedImage child=new BufferedImage(SIZE,SIZE,color);
  double[] hsb=null;
  for (int x=0; x < SIZE; x++) {
    for (int y=0; y < SIZE; y++) {
      double[] input={x,y,0,1};
      scale(input,SIZE,SIZE);
      ILocated2D distance=new Tuple2D(input[0],input[1]);
      input[2]=distance.distance(new Tuple2D(0,0)) * Math.sqrt(2);
      hsb=n.process(input);
      if (hsb[hIndex] < 0 && hsb[hIndex] > 1 || hsb[sIndex] < 0 && hsb[sIndex] > 1 || hsb[bIndex] < 0 && hsb[bIndex] > 1) {
        System.out.println(""String_Node_Str"");
        break;
      }
 else {
        Color childColor=Color.getHSBColor((float)hsb[hIndex],(float)Math.max(0,Math.min(hsb[sIndex],1)),(float)Math.abs(hsb[bIndex]));
        child.setRGB(x,y,childColor.getRGB());
      }
    }
  }
  System.out.println(Arrays.toString(hsb));
  System.out.println(n.toString());
  DrawingPanel network=new DrawingPanel(SIZE,SIZE,""String_Node_Str"");
  n.draw(network);
  DrawingPanel childPanel=new DrawingPanel(SIZE,SIZE,""String_Node_Str"");
  Graphics2D childGraphics=childPanel.getGraphics();
  childGraphics.drawRenderedImage(child,null);
  Scanner scan=new Scanner(System.in);
  System.out.println(""String_Node_Str"");
  if (scan.next().equals(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"");
    String filename=scan.next();
    childPanel.save(filename + ""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    if (scan.next().equals(""String_Node_Str"")) {
      network.save(filename + ""String_Node_Str"");
    }
  }
  scan.close();
}"
39328,"public static void main(String[] args){
  TetrisViewer testView=new TetrisViewer();
  TetrisState testState=new TetrisState();
  testState.worldState[160]=1;
  testState.worldState[170]=1;
  testState.worldState[180]=1;
  testState.worldState[181]=1;
  testState.worldState[182]=1;
  testState.worldState[183]=1;
  testState.worldState[189]=1;
  testState.worldState[190]=1;
  testState.worldState[191]=1;
  testState.worldState[192]=1;
  testState.worldState[193]=1;
  testState.worldState[194]=1;
  testState.worldState[195]=1;
  testState.worldState[197]=1;
  testState.worldState[198]=1;
  testState.worldState[199]=1;
  testView.update(testState);
  MiscUtil.waitForReadStringAndEnterKeyPress();
  ArrayList<Pair<TetrisState,ArrayList<Integer>>> holder=evaluateAfterStates(testState);
  for (  Pair<TetrisState,ArrayList<Integer>> p : holder) {
    testView.update(p.t1);
    MiscUtil.waitForReadStringAndEnterKeyPress();
  }
}","/** 
 * This is a testing environment for this after state evaluator, using two different worldStates to check the long piece
 * @param args
 */
public static void main(String[] args){
  TetrisViewer testView=new TetrisViewer();
  TetrisState testState=new TetrisState();
  testState.worldState[160]=1;
  testState.worldState[170]=1;
  testState.worldState[180]=1;
  testState.worldState[181]=1;
  testState.worldState[182]=1;
  testState.worldState[183]=1;
  testState.worldState[189]=1;
  testState.worldState[190]=1;
  testState.worldState[191]=1;
  testState.worldState[192]=1;
  testState.worldState[193]=1;
  testState.worldState[194]=1;
  testState.worldState[195]=1;
  testState.worldState[197]=1;
  testState.worldState[198]=1;
  testState.worldState[199]=1;
  testView.update(testState);
  MiscUtil.waitForReadStringAndEnterKeyPress();
  ArrayList<Pair<TetrisState,ArrayList<Integer>>> holder=evaluateAfterStates(testState);
  for (  Pair<TetrisState,ArrayList<Integer>> p : holder) {
    testView.update(p.t1);
    MiscUtil.waitForReadStringAndEnterKeyPress();
  }
}"
39329,"/** 
 * Takes in the current Tetris state and finds each of the possible after states, as well as the actions to get to that state. The after states will be states for each possible orientation of the falling piece as they hit the bottom from each placement across the width.
 * @param ts
 * @return arraylist of pairs (evaluated after-states and arraylist of actions)
 */
public static ArrayList<Pair<TetrisState,ArrayList<Integer>>> evaluateAfterStates(TetrisState ts){
  int possibleOrientations=4;
  ArrayList<Pair<TetrisState,ArrayList<Integer>>> evaluated=new ArrayList<Pair<TetrisState,ArrayList<Integer>>>(possibleOrientations * TetrisState.worldWidth);
  for (int i=0; i < possibleOrientations; i++) {
    for (int j=-5; j < TetrisState.worldWidth; j++) {
      TetrisState copy=new TetrisState(ts);
      ArrayList<Integer> actionList=new ArrayList<Integer>();
      while (copy.currentRotation != i) {
        copy.take_action(TetrisState.CW);
        copy.update();
        actionList.add(TetrisState.CW);
      }
      int lastX=-100;
      while (copy.currentX != j && copy.currentX != lastX) {
        lastX=copy.currentX;
        if (copy.currentX > j) {
          copy.take_action(TetrisState.LEFT);
          copy.update();
          actionList.add(TetrisState.LEFT);
        }
 else {
          copy.take_action(TetrisState.RIGHT);
          copy.update();
          actionList.add(TetrisState.RIGHT);
        }
      }
      while (copy.blockMobile) {
        copy.take_action(TetrisState.FALL);
        copy.update();
        actionList.add(TetrisState.FALL);
      }
      copy.update();
      evaluated.add(new Pair<TetrisState,ArrayList<Integer>>(copy,actionList));
    }
  }
  return evaluated;
}","/** 
 * Takes in the current Tetris state and finds each of the possible after states, as well as the actions to get to that state. The after states will be states for each possible orientation of the falling piece as they hit the bottom from each placement across the width.
 * @param ts
 * @return arraylist of pairs (evaluated after-states and arraylist of actions)
 */
public static ArrayList<Pair<TetrisState,ArrayList<Integer>>> evaluateAfterStates(TetrisState ts){
  int possibleOrientations=4;
  ArrayList<Pair<TetrisState,ArrayList<Integer>>> evaluated=new ArrayList<Pair<TetrisState,ArrayList<Integer>>>(possibleOrientations * TetrisState.worldWidth);
  for (int i=0; i < possibleOrientations; i++) {
    for (int j=-5; j < TetrisState.worldWidth; j++) {
      TetrisState copy=new TetrisState(ts);
      ArrayList<Integer> actionList=new ArrayList<Integer>();
      while (copy.currentRotation != i) {
        copy.take_action(TetrisState.CW);
        copy.update();
        actionList.add(TetrisState.CW);
      }
      int lastX=-100;
      while (copy.currentX != j && copy.currentX != lastX) {
        lastX=copy.currentX;
        if (copy.currentX > j) {
          copy.take_action(TetrisState.LEFT);
          copy.update();
          actionList.add(TetrisState.LEFT);
        }
 else {
          copy.take_action(TetrisState.RIGHT);
          copy.update();
          actionList.add(TetrisState.RIGHT);
        }
      }
      while (copy.blockMobile) {
        copy.update();
        actionList.add(TetrisState.FALL);
      }
      copy.spawn_block();
      copy.update();
      evaluated.add(new Pair<TetrisState,ArrayList<Integer>>(copy,actionList));
    }
  }
  return evaluated;
}"
39330,"public void writeCurrentBlock(int[] game_world){
  int[][] thisPiece=possibleBlocks.get(currentBlockId).getShape(currentRotation);
  for (int y=0; y < thisPiece[0].length; ++y) {
    for (int x=0; x < thisPiece.length; ++x) {
      if (thisPiece[x][y] != 0) {
        int linearIndex=calculateLinearArrayPosition(currentX + x,currentY + y);
        if (linearIndex < 0) {
          System.err.printf(""String_Node_Str"",linearIndex,currentX,x,currentY,y);
          Thread.dumpStack();
          System.exit(1);
        }
        game_world[linearIndex]=currentBlockId + 1;
      }
    }
  }
}","public void writeCurrentBlock(int[] game_world){
  int[][] thisPiece=possibleBlocks.get(currentBlockId).getShape(currentRotation);
  for (int y=0; y < thisPiece[0].length; ++y) {
    for (int x=0; x < thisPiece.length; ++x) {
      if (thisPiece[x][y] != 0) {
        int linearIndex=calculateLinearArrayPosition(currentX + x,currentY + y);
        if (linearIndex < 0) {
          System.err.printf(""String_Node_Str"",linearIndex,currentX,x,currentY,y);
          Thread.dumpStack();
          System.exit(1);
        }
        game_world[linearIndex]=currentBlockId + 1;
        System.out.println((currentX + x) + ""String_Node_Str"" + (currentY + y)+ ""String_Node_Str"");
      }
    }
  }
}"
39331,"public static void loadClasses(){
  try {
    ActivationFunctions.initFunctionSet();
    setupSaveDirectory();
    fitnessFunctions=new ArrayList<String>();
    aggregationOverrides=new ArrayList<Statistic>();
    boolean loadFrom=!Parameters.parameters.stringParameter(""String_Node_Str"").equals(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    EvolutionaryHistory.initGenotypeIds();
    weightPerturber=(RandomGenerator)ClassCreation.createObject(""String_Node_Str"");
    setupCrossover();
    setupRLGlue();
    setupFunctionOptimization();
    System.out.println(""String_Node_Str"");
    if (taskHasSubnetworks()) {
      modesToTrack=Parameters.parameters.integerParameter(""String_Node_Str"");
    }
 else {
      int multitaskModes=CommonConstants.multitaskModes;
      if (!CommonConstants.hierarchicalMultitask && multitaskModes > 1) {
        modesToTrack=multitaskModes;
      }
    }
    task=(Task)ClassCreation.createObject(""String_Node_Str"");
    boolean coevolution=false;
    if (Parameters.parameters.booleanParameter(""String_Node_Str"") && Parameters.parameters.stringParameter(""String_Node_Str"").equals(""String_Node_Str"") && Parameters.parameters.integerParameter(""String_Node_Str"") == 0) {
      System.out.println(""String_Node_Str"");
      Parameters.parameters.setDouble(""String_Node_Str"",0.999);
    }
    if (task instanceof MsPacManTask) {
      setupGenotypePoolsForMsPacman();
      System.out.println(""String_Node_Str"");
      pacmanInputOutputMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      if (MMNEAT.pacmanInputOutputMediator instanceof VariableDirectionBlockLoadedInputOutputMediator) {
        directionalSafetyFunction=(VariableDirectionBlock)ClassCreation.createObject(""String_Node_Str"");
        ensembleArbitrator=(MsPacManEnsembleArbitrator)ClassCreation.createObject(""String_Node_Str"");
      }
      String preferenceNet=Parameters.parameters.stringParameter(""String_Node_Str"");
      String multitaskNet=Parameters.parameters.stringParameter(""String_Node_Str"");
      if (multitaskNet != null && !multitaskNet.isEmpty()) {
        MMNEAT.sharedMultitaskNetwork=(TWEANNGenotype)Easy.load(multitaskNet);
        if (CommonConstants.showNetworks) {
          DrawingPanel panel=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
          MMNEAT.sharedMultitaskNetwork.getPhenotype().draw(panel);
        }
        setNNInputParameters(pacmanInputOutputMediator.numIn(),MMNEAT.sharedMultitaskNetwork.numModes);
      }
 else       if (preferenceNet != null && !preferenceNet.isEmpty()) {
        MMNEAT.sharedPreferenceNetwork=(TWEANNGenotype)Easy.load(preferenceNet);
        if (CommonConstants.showNetworks) {
          DrawingPanel panel=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
          MMNEAT.sharedPreferenceNetwork.getPhenotype().draw(panel);
        }
        setNNInputParameters(pacmanInputOutputMediator.numIn(),MMNEAT.sharedPreferenceNetwork.numOut);
      }
 else       if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"");
        ghostsInputOutputMediator=new GhostsCheckEachDirectionMediator();
        setNNInputParameters(ghostsInputOutputMediator.numIn(),ghostsInputOutputMediator.numOut());
      }
 else {
        setNNInputParameters(pacmanInputOutputMediator.numIn(),pacmanInputOutputMediator.numOut());
      }
      setupMsPacmanParameters();
      if (CommonConstants.multitaskModes > 1) {
        pacmanMultitaskScheme=(MsPacManModeSelector)ClassCreation.createObject(""String_Node_Str"");
      }
    }
 else     if (task instanceof CooperativeMsPacManTask) {
      System.out.println(""String_Node_Str"");
      coevolution=true;
      EvolutionaryHistory.initInnovationHistory();
      setupMsPacmanParameters();
      if (task instanceof CooperativeGhostMonitorNetworksMsPacManTask) {
        setupCooperativeCoevolutionGhostMonitorsForMsPacman();
      }
 else       if (task instanceof CooperativeSubtaskSelectorMsPacManTask) {
        setupCooperativeCoevolutionSelectorForMsPacman();
      }
 else       if (task instanceof CooperativeSubtaskCombinerMsPacManTask) {
        setupCooperativeCoevolutionCombinerForMsPacman();
      }
 else       if (task instanceof CooperativeNonHierarchicalMultiNetMsPacManTask) {
        setupCooperativeCoevolutionNonHierarchicalForMsPacman();
      }
 else       if (task instanceof CooperativeCheckEachMultitaskSelectorMsPacManTask) {
        setupCooperativeCoevolutionCheckEachMultitaskPreferenceNetForMsPacman();
      }
    }
 else     if (task instanceof Breve2DTask) {
      System.out.println(""String_Node_Str"");
      Breve2DDynamics dynamics=(Breve2DDynamics)ClassCreation.createObject(""String_Node_Str"");
      setNNInputParameters(dynamics.numInputSensors(),NNBreve2DMonster.NUM_OUTPUTS);
    }
 else     if (task instanceof TorusEvolvedPreyVsStaticPredatorsTask || task instanceof TorusEvolvedPredatorsVsStaticPreyTask) {
      System.out.println(""String_Node_Str"");
      NetworkTask t=(NetworkTask)task;
      setNNInputParameters(t.sensorLabels().length,t.outputLabels().length);
    }
 else     if (task instanceof UT2004Task) {
      System.out.println(""String_Node_Str"");
      UT2004Task utTask=(UT2004Task)task;
      setNNInputParameters(utTask.sensorModel.numberOfSensors(),utTask.outputModel.numberOfOutputs());
    }
 else     if (task instanceof MatchDataTask) {
      System.out.println(""String_Node_Str"");
      MatchDataTask t=(MatchDataTask)task;
      setNNInputParameters(t.numInputs(),t.numOutputs());
    }
 else {
      setNNInputParameters(5,3);
    }
    setupMetaHeuristics();
    if (!loadFrom) {
      System.out.println(""String_Node_Str"");
      ea=(GenerationalEA)ClassCreation.createObject(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    String seedGenotype=Parameters.parameters.stringParameter(""String_Node_Str"");
    if (task instanceof MsPacManTask && Parameters.parameters.booleanParameter(""String_Node_Str"") && CommonConstants.multitaskModes == 2) {
      System.out.println(""String_Node_Str"");
      String ghostDir=Parameters.parameters.stringParameter(""String_Node_Str"");
      String pillDir=Parameters.parameters.stringParameter(""String_Node_Str"");
      String lastSavedDirectory=Parameters.parameters.stringParameter(""String_Node_Str"");
      if (lastSavedDirectory.isEmpty()) {
        if (!ghostDir.isEmpty() && !pillDir.isEmpty()) {
          setupMultitaskSeedPopulationForMsPacman(ghostDir,pillDir);
        }
 else {
          setupSingleMultitaskSeedForMsPacman();
        }
      }
      System.out.println(""String_Node_Str"");
      MsPacManControllerInputOutputMediator ghostMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      MsPacManControllerInputOutputMediator pillMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      pacmanInputOutputMediator=new MultipleInputOutputMediator(new MsPacManControllerInputOutputMediator[]{ghostMediator,pillMediator});
      setNNInputParameters(pacmanInputOutputMediator.numIn(),pacmanInputOutputMediator.numOut());
    }
 else     if (seedGenotype.isEmpty()) {
      genotype=(Genotype)ClassCreation.createObject(""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"" + seedGenotype);
      genotype=((Genotype)Easy.load(seedGenotype)).copy();
      seedExample=true;
    }
    setupTWEANNGenotypeDataTracking(coevolution);
    System.out.println(""String_Node_Str"");
    experiment=(Experiment)ClassCreation.createObject(""String_Node_Str"");
    experiment.init();
    if (!loadFrom && Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      if (!coevolution) {
        performanceLog=new PerformanceLog(""String_Node_Str"");
      }
      EvolutionaryHistory.initLineageAndMutationLogs();
    }
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"" + ex);
    ex.printStackTrace();
  }
}","public static void loadClasses(){
  try {
    ActivationFunctions.initFunctionSet();
    setupSaveDirectory();
    fitnessFunctions=new ArrayList<String>();
    aggregationOverrides=new ArrayList<Statistic>();
    boolean loadFrom=!Parameters.parameters.stringParameter(""String_Node_Str"").equals(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    EvolutionaryHistory.initGenotypeIds();
    weightPerturber=(RandomGenerator)ClassCreation.createObject(""String_Node_Str"");
    setupCrossover();
    setupRLGlue();
    setupFunctionOptimization();
    System.out.println(""String_Node_Str"");
    if (taskHasSubnetworks()) {
      modesToTrack=Parameters.parameters.integerParameter(""String_Node_Str"");
    }
 else {
      int multitaskModes=CommonConstants.multitaskModes;
      if (!CommonConstants.hierarchicalMultitask && multitaskModes > 1) {
        modesToTrack=multitaskModes;
      }
    }
    task=(Task)ClassCreation.createObject(""String_Node_Str"");
    boolean coevolution=false;
    if (Parameters.parameters.booleanParameter(""String_Node_Str"") && Parameters.parameters.stringParameter(""String_Node_Str"").equals(""String_Node_Str"") && Parameters.parameters.integerParameter(""String_Node_Str"") == 0) {
      System.out.println(""String_Node_Str"");
      Parameters.parameters.setDouble(""String_Node_Str"",0.999);
    }
    if (task instanceof MsPacManTask) {
      setupGenotypePoolsForMsPacman();
      System.out.println(""String_Node_Str"");
      pacmanInputOutputMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      if (MMNEAT.pacmanInputOutputMediator instanceof VariableDirectionBlockLoadedInputOutputMediator) {
        directionalSafetyFunction=(VariableDirectionBlock)ClassCreation.createObject(""String_Node_Str"");
        ensembleArbitrator=(MsPacManEnsembleArbitrator)ClassCreation.createObject(""String_Node_Str"");
      }
      String preferenceNet=Parameters.parameters.stringParameter(""String_Node_Str"");
      String multitaskNet=Parameters.parameters.stringParameter(""String_Node_Str"");
      if (multitaskNet != null && !multitaskNet.isEmpty()) {
        MMNEAT.sharedMultitaskNetwork=(TWEANNGenotype)Easy.load(multitaskNet);
        if (CommonConstants.showNetworks) {
          DrawingPanel panel=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
          MMNEAT.sharedMultitaskNetwork.getPhenotype().draw(panel);
        }
        setNNInputParameters(pacmanInputOutputMediator.numIn(),MMNEAT.sharedMultitaskNetwork.numModes);
      }
 else       if (preferenceNet != null && !preferenceNet.isEmpty()) {
        MMNEAT.sharedPreferenceNetwork=(TWEANNGenotype)Easy.load(preferenceNet);
        if (CommonConstants.showNetworks) {
          DrawingPanel panel=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
          MMNEAT.sharedPreferenceNetwork.getPhenotype().draw(panel);
        }
        setNNInputParameters(pacmanInputOutputMediator.numIn(),MMNEAT.sharedPreferenceNetwork.numOut);
      }
 else       if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"");
        ghostsInputOutputMediator=new GhostsCheckEachDirectionMediator();
        setNNInputParameters(ghostsInputOutputMediator.numIn(),ghostsInputOutputMediator.numOut());
      }
 else {
        setNNInputParameters(pacmanInputOutputMediator.numIn(),pacmanInputOutputMediator.numOut());
      }
      setupMsPacmanParameters();
      if (CommonConstants.multitaskModes > 1) {
        pacmanMultitaskScheme=(MsPacManModeSelector)ClassCreation.createObject(""String_Node_Str"");
      }
    }
 else     if (task instanceof CooperativeMsPacManTask) {
      System.out.println(""String_Node_Str"");
      coevolution=true;
      EvolutionaryHistory.initInnovationHistory();
      setupMsPacmanParameters();
      if (task instanceof CooperativeGhostMonitorNetworksMsPacManTask) {
        setupCooperativeCoevolutionGhostMonitorsForMsPacman();
      }
 else       if (task instanceof CooperativeSubtaskSelectorMsPacManTask) {
        setupCooperativeCoevolutionSelectorForMsPacman();
      }
 else       if (task instanceof CooperativeSubtaskCombinerMsPacManTask) {
        setupCooperativeCoevolutionCombinerForMsPacman();
      }
 else       if (task instanceof CooperativeNonHierarchicalMultiNetMsPacManTask) {
        setupCooperativeCoevolutionNonHierarchicalForMsPacman();
      }
 else       if (task instanceof CooperativeCheckEachMultitaskSelectorMsPacManTask) {
        setupCooperativeCoevolutionCheckEachMultitaskPreferenceNetForMsPacman();
      }
    }
 else     if (task instanceof Breve2DTask) {
      System.out.println(""String_Node_Str"");
      Breve2DDynamics dynamics=(Breve2DDynamics)ClassCreation.createObject(""String_Node_Str"");
      setNNInputParameters(dynamics.numInputSensors(),NNBreve2DMonster.NUM_OUTPUTS);
    }
 else     if (task instanceof TorusPredPreyTask) {
      System.out.println(""String_Node_Str"");
      NetworkTask t=(NetworkTask)task;
      setNNInputParameters(t.sensorLabels().length,t.outputLabels().length);
    }
 else     if (task instanceof UT2004Task) {
      System.out.println(""String_Node_Str"");
      UT2004Task utTask=(UT2004Task)task;
      setNNInputParameters(utTask.sensorModel.numberOfSensors(),utTask.outputModel.numberOfOutputs());
    }
 else     if (task instanceof MatchDataTask) {
      System.out.println(""String_Node_Str"");
      MatchDataTask t=(MatchDataTask)task;
      setNNInputParameters(t.numInputs(),t.numOutputs());
    }
 else {
      setNNInputParameters(5,3);
    }
    setupMetaHeuristics();
    if (!loadFrom) {
      System.out.println(""String_Node_Str"");
      ea=(GenerationalEA)ClassCreation.createObject(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    String seedGenotype=Parameters.parameters.stringParameter(""String_Node_Str"");
    if (task instanceof MsPacManTask && Parameters.parameters.booleanParameter(""String_Node_Str"") && CommonConstants.multitaskModes == 2) {
      System.out.println(""String_Node_Str"");
      String ghostDir=Parameters.parameters.stringParameter(""String_Node_Str"");
      String pillDir=Parameters.parameters.stringParameter(""String_Node_Str"");
      String lastSavedDirectory=Parameters.parameters.stringParameter(""String_Node_Str"");
      if (lastSavedDirectory.isEmpty()) {
        if (!ghostDir.isEmpty() && !pillDir.isEmpty()) {
          setupMultitaskSeedPopulationForMsPacman(ghostDir,pillDir);
        }
 else {
          setupSingleMultitaskSeedForMsPacman();
        }
      }
      System.out.println(""String_Node_Str"");
      MsPacManControllerInputOutputMediator ghostMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      MsPacManControllerInputOutputMediator pillMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      pacmanInputOutputMediator=new MultipleInputOutputMediator(new MsPacManControllerInputOutputMediator[]{ghostMediator,pillMediator});
      setNNInputParameters(pacmanInputOutputMediator.numIn(),pacmanInputOutputMediator.numOut());
    }
 else     if (seedGenotype.isEmpty()) {
      genotype=(Genotype)ClassCreation.createObject(""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"" + seedGenotype);
      genotype=((Genotype)Easy.load(seedGenotype)).copy();
      seedExample=true;
    }
    setupTWEANNGenotypeDataTracking(coevolution);
    System.out.println(""String_Node_Str"");
    experiment=(Experiment)ClassCreation.createObject(""String_Node_Str"");
    experiment.init();
    if (!loadFrom && Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      if (!coevolution) {
        performanceLog=new PerformanceLog(""String_Node_Str"");
      }
      EvolutionaryHistory.initLineageAndMutationLogs();
    }
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"" + ex);
    ex.printStackTrace();
  }
}"
39332,"/** 
 * Calculates inputs for the neural network in order to figure what action to take in getAction.
 * @param all agents (me, world, preds, prey)
 * @return
 */
public double[] inputs(TorusAgent me,TorusWorld world,TorusAgent[] preds,TorusAgent[] prey){
  double[] inputs=new double[preds.length * 2];
  for (int i=0; i < preds.length; i++) {
    inputs[(2 * i)]=me.shortestXOffset(preds[i]) / (1.0 * world.width());
    inputs[(2 * i) + 1]=me.shortestYOffset(preds[i]) / (1.0 * world.height());
  }
  return inputs;
}","/** 
 * Calculates inputs for the neural network in order to figure what action to take in getAction.
 * @param all agents (me, world, preds, prey)
 * @return
 */
public double[] inputs(TorusAgent me,TorusWorld world,TorusAgent[] preds,TorusAgent[] prey){
  int numAgentsSensed=isPredator ? prey.length : preds.length;
  double[] inputs=new double[numAgentsSensed * 2];
  for (int i=0; i < numAgentsSensed; i++) {
    inputs[(2 * i)]=me.shortestXOffset(isPredator ? prey[i] : preds[i]) / (1.0 * world.width());
    inputs[(2 * i) + 1]=me.shortestYOffset(isPredator ? prey[i] : preds[i]) / (1.0 * world.height());
  }
  return inputs;
}"
39333,"/** 
 * Sets up the sensor labels for sensors to be used in network visualization.
 * @param numPreds
 * @return
 */
public static String[] sensorLabels(int numPreds){
  String[] result=new String[numPreds * 2];
  for (int i=0; i < numPreds; i++) {
    result[(2 * i)]=""String_Node_Str"" + i;
    result[(2 * i) + 1]=""String_Node_Str"" + i;
  }
  return result;
}","/** 
 * Sets up the sensor labels for sensors to be used in network visualization.
 * @param numAgents
 * @return
 */
public static String[] sensorLabels(int numAgents,String type){
  String[] result=new String[numAgents * 2];
  for (int i=0; i < numAgents; i++) {
    result[(2 * i)]=""String_Node_Str"" + type + ""String_Node_Str""+ i;
    result[(2 * i) + 1]=""String_Node_Str"" + type + ""String_Node_Str""+ i;
  }
  return result;
}"
39334,"public String[] outputLabels(){
  if (!preyEvolve)   return Parameters.parameters.booleanParameter(""String_Node_Str"") ? new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""} : new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  return Parameters.parameters.booleanParameter(""String_Node_Str"") ? new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""} : new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
}","public String[] outputLabels(){
  if (!preyEvolve) {
    return Parameters.parameters.booleanParameter(""String_Node_Str"") ? new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""} : new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  }
  return Parameters.parameters.booleanParameter(""String_Node_Str"") ? new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""} : new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
}"
39335,"/** 
 * @param preyEvolve if true prey are being evolved; if false predators are being evolved
 */
public TorusPredPreyTask(boolean preyEvolve){
  super();
  this.preyEvolve=preyEvolve;
}","/** 
 * @param preyEvolve if true prey are being evolved; if false predators arebeing evolved
 */
public TorusPredPreyTask(boolean preyEvolve){
  super();
  this.preyEvolve=preyEvolve;
}"
39336,"@Override public Pair<double[],double[]> oneEval(Genotype<T> individual,int num){
  TorusPredPreyController[] predAgents=getPredAgents(individual);
  TorusPredPreyController[] preyAgents=getPreyAgents(individual);
  exec=new TorusWorldExec();
  TorusPredPreyGame game;
  if (CommonConstants.watch) {
    game=exec.runGameTimed(predAgents,preyAgents,true);
  }
 else {
    game=exec.runExperiment(predAgents,preyAgents);
  }
  double[] oneTrialFitness;
  if (preyEvolve)   oneTrialFitness=new double[]{game.getTime()};
 else   oneTrialFitness=new double[]{-game.getTime()};
  double[] otherStats=new double[0];
  return new Pair<double[],double[]>(oneTrialFitness,otherStats);
}","@Override public Pair<double[],double[]> oneEval(Genotype<T> individual,int num){
  TorusPredPreyController[] predAgents=getPredAgents(individual);
  TorusPredPreyController[] preyAgents=getPreyAgents(individual);
  exec=new TorusWorldExec();
  TorusPredPreyGame game;
  if (CommonConstants.watch) {
    game=exec.runGameTimed(predAgents,preyAgents,true);
  }
 else {
    game=exec.runExperiment(predAgents,preyAgents);
  }
  double[] oneTrialFitness;
  if (preyEvolve) {
    oneTrialFitness=new double[]{game.getTime()};
  }
 else {
    oneTrialFitness=new double[]{-game.getTime()};
  }
  double[] otherStats=new double[0];
  return new Pair<double[],double[]>(oneTrialFitness,otherStats);
}"
39337,"public String[] sensorLabels(){
  if (!preyEvolve)   return NNTorusPredPreyController.sensorLabels(Parameters.parameters.integerParameter(""String_Node_Str""));
  return NNTorusPredPreyController.sensorLabels(Parameters.parameters.integerParameter(""String_Node_Str""));
}","public String[] sensorLabels(){
  if (!preyEvolve) {
    return NNTorusPredPreyController.sensorLabels(Parameters.parameters.integerParameter(""String_Node_Str""),""String_Node_Str"");
  }
 else {
    return NNTorusPredPreyController.sensorLabels(Parameters.parameters.integerParameter(""String_Node_Str""),""String_Node_Str"");
  }
}"
39338,"public static void loadClasses(){
  try {
    setupSaveDirectory();
    fitnessFunctions=new ArrayList<String>();
    aggregationOverrides=new ArrayList<Statistic>();
    boolean loadFrom=!Parameters.parameters.stringParameter(""String_Node_Str"").equals(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    EvolutionaryHistory.initGenotypeIds();
    weightPerturber=(RandomGenerator)ClassCreation.createObject(""String_Node_Str"");
    setupCrossover();
    setupRLGlue();
    setupFunctionOptimization();
    System.out.println(""String_Node_Str"");
    if (taskHasSubnetworks()) {
      modesToTrack=Parameters.parameters.integerParameter(""String_Node_Str"");
    }
 else {
      int multitaskModes=CommonConstants.multitaskModes;
      if (!CommonConstants.hierarchicalMultitask && multitaskModes > 1) {
        modesToTrack=multitaskModes;
      }
    }
    task=(Task)ClassCreation.createObject(""String_Node_Str"");
    boolean coevolution=false;
    if (Parameters.parameters.booleanParameter(""String_Node_Str"") && Parameters.parameters.stringParameter(""String_Node_Str"").equals(""String_Node_Str"") && Parameters.parameters.integerParameter(""String_Node_Str"") == 0) {
      System.out.println(""String_Node_Str"");
      Parameters.parameters.setDouble(""String_Node_Str"",0.999);
    }
    if (task instanceof MsPacManTask) {
      setupGenotypePoolsForMsPacman();
      System.out.println(""String_Node_Str"");
      pacmanInputOutputMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      if (MMNEAT.pacmanInputOutputMediator instanceof VariableDirectionBlockLoadedInputOutputMediator) {
        directionalSafetyFunction=(VariableDirectionBlock)ClassCreation.createObject(""String_Node_Str"");
        ensembleArbitrator=(MsPacManEnsembleArbitrator)ClassCreation.createObject(""String_Node_Str"");
      }
      String preferenceNet=Parameters.parameters.stringParameter(""String_Node_Str"");
      String multitaskNet=Parameters.parameters.stringParameter(""String_Node_Str"");
      if (multitaskNet != null && !multitaskNet.isEmpty()) {
        MMNEAT.sharedMultitaskNetwork=(TWEANNGenotype)Easy.load(multitaskNet);
        if (CommonConstants.showNetworks) {
          DrawingPanel panel=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
          MMNEAT.sharedMultitaskNetwork.getPhenotype().draw(panel);
        }
        setNNInputParameters(pacmanInputOutputMediator.numIn(),MMNEAT.sharedMultitaskNetwork.numModes);
      }
 else       if (preferenceNet != null && !preferenceNet.isEmpty()) {
        MMNEAT.sharedPreferenceNetwork=(TWEANNGenotype)Easy.load(preferenceNet);
        if (CommonConstants.showNetworks) {
          DrawingPanel panel=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
          MMNEAT.sharedPreferenceNetwork.getPhenotype().draw(panel);
        }
        setNNInputParameters(pacmanInputOutputMediator.numIn(),MMNEAT.sharedPreferenceNetwork.numOut);
      }
 else       if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"");
        ghostsInputOutputMediator=new GhostsCheckEachDirectionMediator();
        setNNInputParameters(ghostsInputOutputMediator.numIn(),ghostsInputOutputMediator.numOut());
      }
 else {
        setNNInputParameters(pacmanInputOutputMediator.numIn(),pacmanInputOutputMediator.numOut());
      }
      setupMsPacmanParameters();
      if (CommonConstants.multitaskModes > 1) {
        pacmanMultitaskScheme=(MsPacManModeSelector)ClassCreation.createObject(""String_Node_Str"");
      }
    }
 else     if (task instanceof CooperativeMsPacManTask) {
      System.out.println(""String_Node_Str"");
      coevolution=true;
      EvolutionaryHistory.initInnovationHistory();
      setupMsPacmanParameters();
      if (task instanceof CooperativeGhostMonitorNetworksMsPacManTask) {
        setupCooperativeCoevolutionGhostMonitorsForMsPacman();
      }
 else       if (task instanceof CooperativeSubtaskSelectorMsPacManTask) {
        setupCooperativeCoevolutionSelectorForMsPacman();
      }
 else       if (task instanceof CooperativeSubtaskCombinerMsPacManTask) {
        setupCooperativeCoevolutionCombinerForMsPacman();
      }
 else       if (task instanceof CooperativeNonHierarchicalMultiNetMsPacManTask) {
        setupCooperativeCoevolutionNonHierarchicalForMsPacman();
      }
 else       if (task instanceof CooperativeCheckEachMultitaskSelectorMsPacManTask) {
        setupCooperativeCoevolutionCheckEachMultitaskPreferenceNetForMsPacman();
      }
    }
 else     if (task instanceof Breve2DTask) {
      System.out.println(""String_Node_Str"");
      Breve2DDynamics dynamics=(Breve2DDynamics)ClassCreation.createObject(""String_Node_Str"");
      setNNInputParameters(dynamics.numInputSensors(),NNBreve2DMonster.NUM_OUTPUTS);
    }
 else     if (task instanceof TorusPredPreyTask) {
      System.out.println(""String_Node_Str"");
      NetworkTask t=(NetworkTask)task;
      setNNInputParameters(t.sensorLabels().length,t.outputLabels().length);
    }
 else     if (task instanceof UT2004Task) {
      System.out.println(""String_Node_Str"");
      UT2004Task utTask=(UT2004Task)task;
      setNNInputParameters(utTask.sensorModel.numberOfSensors(),utTask.outputModel.numberOfOutputs());
    }
 else     if (task instanceof MatchDataTask) {
      System.out.println(""String_Node_Str"");
      MatchDataTask t=(MatchDataTask)task;
      setNNInputParameters(t.numInputs(),t.numOutputs());
    }
 else {
      setNNInputParameters(5,3);
    }
    setupMetaHeuristics();
    if (!loadFrom) {
      System.out.println(""String_Node_Str"");
      ea=(GenerationalEA)ClassCreation.createObject(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    String seedGenotype=Parameters.parameters.stringParameter(""String_Node_Str"");
    if (task instanceof MsPacManTask && Parameters.parameters.booleanParameter(""String_Node_Str"") && CommonConstants.multitaskModes == 2) {
      System.out.println(""String_Node_Str"");
      String ghostDir=Parameters.parameters.stringParameter(""String_Node_Str"");
      String pillDir=Parameters.parameters.stringParameter(""String_Node_Str"");
      String lastSavedDirectory=Parameters.parameters.stringParameter(""String_Node_Str"");
      if (lastSavedDirectory.isEmpty()) {
        if (!ghostDir.isEmpty() && !pillDir.isEmpty()) {
          setupMultitaskSeedPopulationForMsPacman(ghostDir,pillDir);
        }
 else {
          setupSingleMultitaskSeedForMsPacman();
        }
      }
      System.out.println(""String_Node_Str"");
      MsPacManControllerInputOutputMediator ghostMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      MsPacManControllerInputOutputMediator pillMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      pacmanInputOutputMediator=new MultipleInputOutputMediator(new MsPacManControllerInputOutputMediator[]{ghostMediator,pillMediator});
      setNNInputParameters(pacmanInputOutputMediator.numIn(),pacmanInputOutputMediator.numOut());
    }
 else     if (seedGenotype.isEmpty()) {
      genotype=(Genotype)ClassCreation.createObject(""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"" + seedGenotype);
      genotype=((Genotype)Easy.load(seedGenotype)).copy();
      seedExample=true;
    }
    setupTWEANNGenotypeDataTracking(coevolution);
    System.out.println(""String_Node_Str"");
    experiment=(Experiment)ClassCreation.createObject(""String_Node_Str"");
    experiment.init();
    if (!loadFrom && Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      if (!coevolution) {
        performanceLog=new PerformanceLog(""String_Node_Str"");
      }
      EvolutionaryHistory.initLineageAndMutationLogs();
    }
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"" + ex);
    ex.printStackTrace();
  }
}","public static void loadClasses(){
  try {
    ActivationFunctions.initFunctionSet();
    setupSaveDirectory();
    fitnessFunctions=new ArrayList<String>();
    aggregationOverrides=new ArrayList<Statistic>();
    boolean loadFrom=!Parameters.parameters.stringParameter(""String_Node_Str"").equals(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    EvolutionaryHistory.initGenotypeIds();
    weightPerturber=(RandomGenerator)ClassCreation.createObject(""String_Node_Str"");
    setupCrossover();
    setupRLGlue();
    setupFunctionOptimization();
    System.out.println(""String_Node_Str"");
    if (taskHasSubnetworks()) {
      modesToTrack=Parameters.parameters.integerParameter(""String_Node_Str"");
    }
 else {
      int multitaskModes=CommonConstants.multitaskModes;
      if (!CommonConstants.hierarchicalMultitask && multitaskModes > 1) {
        modesToTrack=multitaskModes;
      }
    }
    task=(Task)ClassCreation.createObject(""String_Node_Str"");
    boolean coevolution=false;
    if (Parameters.parameters.booleanParameter(""String_Node_Str"") && Parameters.parameters.stringParameter(""String_Node_Str"").equals(""String_Node_Str"") && Parameters.parameters.integerParameter(""String_Node_Str"") == 0) {
      System.out.println(""String_Node_Str"");
      Parameters.parameters.setDouble(""String_Node_Str"",0.999);
    }
    if (task instanceof MsPacManTask) {
      setupGenotypePoolsForMsPacman();
      System.out.println(""String_Node_Str"");
      pacmanInputOutputMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      if (MMNEAT.pacmanInputOutputMediator instanceof VariableDirectionBlockLoadedInputOutputMediator) {
        directionalSafetyFunction=(VariableDirectionBlock)ClassCreation.createObject(""String_Node_Str"");
        ensembleArbitrator=(MsPacManEnsembleArbitrator)ClassCreation.createObject(""String_Node_Str"");
      }
      String preferenceNet=Parameters.parameters.stringParameter(""String_Node_Str"");
      String multitaskNet=Parameters.parameters.stringParameter(""String_Node_Str"");
      if (multitaskNet != null && !multitaskNet.isEmpty()) {
        MMNEAT.sharedMultitaskNetwork=(TWEANNGenotype)Easy.load(multitaskNet);
        if (CommonConstants.showNetworks) {
          DrawingPanel panel=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
          MMNEAT.sharedMultitaskNetwork.getPhenotype().draw(panel);
        }
        setNNInputParameters(pacmanInputOutputMediator.numIn(),MMNEAT.sharedMultitaskNetwork.numModes);
      }
 else       if (preferenceNet != null && !preferenceNet.isEmpty()) {
        MMNEAT.sharedPreferenceNetwork=(TWEANNGenotype)Easy.load(preferenceNet);
        if (CommonConstants.showNetworks) {
          DrawingPanel panel=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
          MMNEAT.sharedPreferenceNetwork.getPhenotype().draw(panel);
        }
        setNNInputParameters(pacmanInputOutputMediator.numIn(),MMNEAT.sharedPreferenceNetwork.numOut);
      }
 else       if (Parameters.parameters.booleanParameter(""String_Node_Str"")) {
        System.out.println(""String_Node_Str"");
        ghostsInputOutputMediator=new GhostsCheckEachDirectionMediator();
        setNNInputParameters(ghostsInputOutputMediator.numIn(),ghostsInputOutputMediator.numOut());
      }
 else {
        setNNInputParameters(pacmanInputOutputMediator.numIn(),pacmanInputOutputMediator.numOut());
      }
      setupMsPacmanParameters();
      if (CommonConstants.multitaskModes > 1) {
        pacmanMultitaskScheme=(MsPacManModeSelector)ClassCreation.createObject(""String_Node_Str"");
      }
    }
 else     if (task instanceof CooperativeMsPacManTask) {
      System.out.println(""String_Node_Str"");
      coevolution=true;
      EvolutionaryHistory.initInnovationHistory();
      setupMsPacmanParameters();
      if (task instanceof CooperativeGhostMonitorNetworksMsPacManTask) {
        setupCooperativeCoevolutionGhostMonitorsForMsPacman();
      }
 else       if (task instanceof CooperativeSubtaskSelectorMsPacManTask) {
        setupCooperativeCoevolutionSelectorForMsPacman();
      }
 else       if (task instanceof CooperativeSubtaskCombinerMsPacManTask) {
        setupCooperativeCoevolutionCombinerForMsPacman();
      }
 else       if (task instanceof CooperativeNonHierarchicalMultiNetMsPacManTask) {
        setupCooperativeCoevolutionNonHierarchicalForMsPacman();
      }
 else       if (task instanceof CooperativeCheckEachMultitaskSelectorMsPacManTask) {
        setupCooperativeCoevolutionCheckEachMultitaskPreferenceNetForMsPacman();
      }
    }
 else     if (task instanceof Breve2DTask) {
      System.out.println(""String_Node_Str"");
      Breve2DDynamics dynamics=(Breve2DDynamics)ClassCreation.createObject(""String_Node_Str"");
      setNNInputParameters(dynamics.numInputSensors(),NNBreve2DMonster.NUM_OUTPUTS);
    }
 else     if (task instanceof TorusPredPreyTask) {
      System.out.println(""String_Node_Str"");
      NetworkTask t=(NetworkTask)task;
      setNNInputParameters(t.sensorLabels().length,t.outputLabels().length);
    }
 else     if (task instanceof UT2004Task) {
      System.out.println(""String_Node_Str"");
      UT2004Task utTask=(UT2004Task)task;
      setNNInputParameters(utTask.sensorModel.numberOfSensors(),utTask.outputModel.numberOfOutputs());
    }
 else     if (task instanceof MatchDataTask) {
      System.out.println(""String_Node_Str"");
      MatchDataTask t=(MatchDataTask)task;
      setNNInputParameters(t.numInputs(),t.numOutputs());
    }
 else {
      setNNInputParameters(5,3);
    }
    setupMetaHeuristics();
    if (!loadFrom) {
      System.out.println(""String_Node_Str"");
      ea=(GenerationalEA)ClassCreation.createObject(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    String seedGenotype=Parameters.parameters.stringParameter(""String_Node_Str"");
    if (task instanceof MsPacManTask && Parameters.parameters.booleanParameter(""String_Node_Str"") && CommonConstants.multitaskModes == 2) {
      System.out.println(""String_Node_Str"");
      String ghostDir=Parameters.parameters.stringParameter(""String_Node_Str"");
      String pillDir=Parameters.parameters.stringParameter(""String_Node_Str"");
      String lastSavedDirectory=Parameters.parameters.stringParameter(""String_Node_Str"");
      if (lastSavedDirectory.isEmpty()) {
        if (!ghostDir.isEmpty() && !pillDir.isEmpty()) {
          setupMultitaskSeedPopulationForMsPacman(ghostDir,pillDir);
        }
 else {
          setupSingleMultitaskSeedForMsPacman();
        }
      }
      System.out.println(""String_Node_Str"");
      MsPacManControllerInputOutputMediator ghostMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      MsPacManControllerInputOutputMediator pillMediator=(MsPacManControllerInputOutputMediator)ClassCreation.createObject(""String_Node_Str"");
      pacmanInputOutputMediator=new MultipleInputOutputMediator(new MsPacManControllerInputOutputMediator[]{ghostMediator,pillMediator});
      setNNInputParameters(pacmanInputOutputMediator.numIn(),pacmanInputOutputMediator.numOut());
    }
 else     if (seedGenotype.isEmpty()) {
      genotype=(Genotype)ClassCreation.createObject(""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"" + seedGenotype);
      genotype=((Genotype)Easy.load(seedGenotype)).copy();
      seedExample=true;
    }
    setupTWEANNGenotypeDataTracking(coevolution);
    System.out.println(""String_Node_Str"");
    experiment=(Experiment)ClassCreation.createObject(""String_Node_Str"");
    experiment.init();
    if (!loadFrom && Parameters.parameters.booleanParameter(""String_Node_Str"")) {
      if (!coevolution) {
        performanceLog=new PerformanceLog(""String_Node_Str"");
      }
      EvolutionaryHistory.initLineageAndMutationLogs();
    }
  }
 catch (  Exception ex) {
    System.out.println(""String_Node_Str"" + ex);
    ex.printStackTrace();
  }
}"
39339,"/** 
 * A main method with some informal tests
 */
public static void main(String[] args){
  Parameters.initializeParameterCollections(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  MMNEAT.loadClasses();
  TWEANNGenotype tg1=new TWEANNGenotype(5,2,0);
  MMNEAT.genotype=tg1.copy();
  EvolutionaryHistory.initArchetype(0);
  TWEANNGenotype tg2=new TWEANNGenotype(5,2,0);
  final int MUTATIONS1=10;
  for (int i=0; i < MUTATIONS1; i++) {
    tg1.mutate();
    tg2.mutate();
  }
  double[] inputs=RandomNumbers.randomArray(tg1.numIn);
  DrawingPanel p1=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
  DrawingPanel p2=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
  p2.setLocation(TWEANN.NETWORK_VIEW_DIM + 10,0);
  tg1.getPhenotype().draw(p1,true);
  tg2.getPhenotype().draw(p2,true);
  new MMR().mutate(tg1);
  tg1.freezePreferenceNeurons();
  System.out.println(""String_Node_Str"" + Arrays.toString(tg1.getPhenotype().process(inputs)));
  DrawingPanel p3=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
  p3.setLocation(0,TWEANN.NETWORK_VIEW_DIM + 10);
  tg1.getPhenotype().draw(p3,true);
  new MMR().mutate(tg2);
  tg2.freezePolicyNeurons();
  System.out.println(""String_Node_Str"" + Arrays.toString(tg2.getPhenotype().process(inputs)));
  DrawingPanel p4=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
  p4.setLocation(TWEANN.NETWORK_VIEW_DIM + 10,TWEANN.NETWORK_VIEW_DIM + 10);
  tg2.getPhenotype().draw(p4,true);
  for (int i=0; i < MUTATIONS1; i++) {
    tg1.mutate();
    tg2.mutate();
  }
  System.out.println(""String_Node_Str"" + Arrays.toString(tg1.getPhenotype().process(inputs)));
  System.out.println(""String_Node_Str"" + Arrays.toString(tg2.getPhenotype().process(inputs)));
  DrawingPanel p5=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
  p5.setLocation(2 * (TWEANN.NETWORK_VIEW_DIM + 10),0);
  tg1.getPhenotype().draw(p5,true);
  DrawingPanel p6=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
  p6.setLocation(2 * (TWEANN.NETWORK_VIEW_DIM + 10),TWEANN.NETWORK_VIEW_DIM + 10);
  tg2.getPhenotype().draw(p6,true);
}","/** 
 * A main method with some informal tests
 */
public static void main(String[] args){
  Parameters.initializeParameterCollections(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  MMNEAT.loadClasses();
  TWEANNGenotype tg1=new TWEANNGenotype(5,2,0);
  MMNEAT.genotype=tg1.copy();
  EvolutionaryHistory.initArchetype(0);
  TWEANNGenotype tg2=new TWEANNGenotype(5,2,0);
  final int MUTATIONS1=10;
  for (int i=0; i < MUTATIONS1; i++) {
    tg1.mutate();
    tg2.mutate();
  }
  System.out.println(tg1);
  System.out.println(new TWEANN(tg1));
  double[] inputs=RandomNumbers.randomArray(tg1.numIn);
  DrawingPanel p1=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
  DrawingPanel p2=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
  p2.setLocation(TWEANN.NETWORK_VIEW_DIM + 10,0);
  tg1.getPhenotype().draw(p1,true);
  tg2.getPhenotype().draw(p2,true);
  new MMR().mutate(tg1);
  tg1.freezePreferenceNeurons();
  System.out.println(""String_Node_Str"" + Arrays.toString(tg1.getPhenotype().process(inputs)));
  DrawingPanel p3=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
  p3.setLocation(0,TWEANN.NETWORK_VIEW_DIM + 10);
  tg1.getPhenotype().draw(p3,true);
  new MMR().mutate(tg2);
  tg2.freezePolicyNeurons();
  System.out.println(""String_Node_Str"" + Arrays.toString(tg2.getPhenotype().process(inputs)));
  DrawingPanel p4=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
  p4.setLocation(TWEANN.NETWORK_VIEW_DIM + 10,TWEANN.NETWORK_VIEW_DIM + 10);
  tg2.getPhenotype().draw(p4,true);
  for (int i=0; i < MUTATIONS1; i++) {
    tg1.mutate();
    tg2.mutate();
  }
  System.out.println(""String_Node_Str"" + Arrays.toString(tg1.getPhenotype().process(inputs)));
  System.out.println(""String_Node_Str"" + Arrays.toString(tg2.getPhenotype().process(inputs)));
  DrawingPanel p5=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
  p5.setLocation(2 * (TWEANN.NETWORK_VIEW_DIM + 10),0);
  tg1.getPhenotype().draw(p5,true);
  DrawingPanel p6=new DrawingPanel(TWEANN.NETWORK_VIEW_DIM,TWEANN.NETWORK_VIEW_DIM,""String_Node_Str"");
  p6.setLocation(2 * (TWEANN.NETWORK_VIEW_DIM + 10),TWEANN.NETWORK_VIEW_DIM + 10);
  tg2.getPhenotype().draw(p6,true);
}"
39340,"public final void fillDefaults(){
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",30,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",35,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3 * Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",ActivationFunctions.FTYPE_TANH,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",500,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",17,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",30,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",7,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",25,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3 * Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",20,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.DELAY,""String_Node_Str"");
  longOptions.add(""String_Node_Str"",0l,""String_Node_Str"");
  longOptions.add(""String_Node_Str"",0l,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.99,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.25,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.025,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",-1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",10.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",50.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.25,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.8,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.05,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.4,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.2,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",Math.PI / 8.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",5.0 * Breve2DGame.AGENT_MAGNITUDE,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GaussianGenerator.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Max.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",JunctionNodes.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GhostsPillsMap.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TWEANNCrossover.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",SimpleWeaponManager.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",OpponentRelativeMovementOutputModel.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",OpponentRelativeSensorModel.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",FullTaskMediator.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",RushingPlayer.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",PlayerPredatorMonsterPrey.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GhostsThenPillsModeSelector.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",DomainSpecificCharacterization.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",StarterPacMan.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Legacy.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",LimitedSinglePopulationGenerationalEAExperiment.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",NSGA2.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",StateVariableExtractor.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TWEANNGenotype.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
}","public final void fillDefaults(){
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",30,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",35,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3 * Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",ActivationFunctions.FTYPE_TANH,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",500,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",17,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",30,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",7,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",25,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3 * Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",20,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.DELAY,""String_Node_Str"");
  longOptions.add(""String_Node_Str"",0l,""String_Node_Str"");
  longOptions.add(""String_Node_Str"",0l,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.99,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.25,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.025,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",-1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",10.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",50.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.25,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.8,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.05,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.4,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.2,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",Math.PI / 8.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",5.0 * Breve2DGame.AGENT_MAGNITUDE,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GaussianGenerator.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Max.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",JunctionNodes.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GhostsPillsMap.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TWEANNCrossover.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",SimpleWeaponManager.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",OpponentRelativeMovementOutputModel.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",OpponentRelativeSensorModel.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",FullTaskMediator.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",RushingPlayer.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",PlayerPredatorMonsterPrey.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GhostsThenPillsModeSelector.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",DomainSpecificCharacterization.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",StarterPacMan.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Legacy.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",LimitedSinglePopulationGenerationalEAExperiment.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",NSGA2.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",StateVariableExtractor.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TWEANNGenotype.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
}"
39341,"@Override public int[] getAction(TorusAgent me,TorusWorld world,TorusAgent[] preds,TorusAgent[] prey){
  TorusAgent target=me.closestAgent(prey);
  double[] moveDistances=new double[actions.length];
  for (int i=0; i < actions.length; i++) {
    moveDistances[i]=target.distance(me.getPosition().add(new Tuple2D(actions[i][0],actions[i][1])));
  }
  return actions[StatisticsUtilities.argmin(moveDistances)];
}","@Override public int[] getAction(TorusAgent me,TorusWorld world,TorusAgent[] preds,TorusAgent[] prey){
  TorusAgent target=me.closestAgent(prey);
  double[] moveDistances=new double[PREDATOR_ACTIONS.length];
  for (int i=0; i < PREDATOR_ACTIONS.length; i++) {
    moveDistances[i]=target.distance(me.getPosition().add(new Tuple2D(PREDATOR_ACTIONS[i][0],PREDATOR_ACTIONS[i][1])));
  }
  return PREDATOR_ACTIONS[StatisticsUtilities.argmin(moveDistances)];
}"
39342,"/** 
 * The getAction method takes in the controlled agent, the world and predators and prey as arrays. The prey moves away from all the predators in a sequence depending on how close each predator is.
 */
@Override public int[] getAction(TorusAgent me,TorusWorld world,TorusAgent[] preds,TorusAgent[] prey){
  double[] moveDistances=new double[actions.length];
  for (int j=0; j < preds.length; j++) {
    for (int i=0; i < actions.length; i++) {
      double distance=preds[j].distance(me.getPosition().add(new Tuple2D(actions[i][0],actions[i][1])));
      moveDistances[i]+=distance;
    }
  }
  return actions[StatisticsUtilities.argmax(moveDistances)];
}","/** 
 * The getAction method takes in the controlled agent, the world and predators and prey as arrays. The prey moves away from all the predators in a sequence depending on how close each predator is.
 */
@Override public int[] getAction(TorusAgent me,TorusWorld world,TorusAgent[] preds,TorusAgent[] prey){
  double[] moveDistances=new double[PREY_ACTIONS.length];
  for (int j=0; j < preds.length; j++) {
    for (int i=0; i < PREY_ACTIONS.length; i++) {
      double distance=preds[j].distance(me.getPosition().add(new Tuple2D(PREY_ACTIONS[i][0],PREY_ACTIONS[i][1])));
      moveDistances[i]+=distance;
    }
  }
  return PREY_ACTIONS[StatisticsUtilities.argmax(moveDistances)];
}"
39343,"public final void fillDefaults(){
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",30,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",35,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3 * Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",ActivationFunctions.FTYPE_TANH,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",500,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",17,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",30,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",7,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",25,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3 * Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",20,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.DELAY,""String_Node_Str"");
  longOptions.add(""String_Node_Str"",0l,""String_Node_Str"");
  longOptions.add(""String_Node_Str"",0l,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.99,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.25,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.025,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",-1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",10.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",50.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.25,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.8,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.05,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.4,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.2,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",Math.PI / 8.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",5.0 * Breve2DGame.AGENT_MAGNITUDE,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GaussianGenerator.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Max.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",JunctionNodes.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GhostsPillsMap.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TWEANNCrossover.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",SimpleWeaponManager.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",OpponentRelativeMovementOutputModel.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",OpponentRelativeSensorModel.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",FullTaskMediator.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",RushingPlayer.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",PlayerPredatorMonsterPrey.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GhostsThenPillsModeSelector.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",DomainSpecificCharacterization.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",StarterPacMan.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Legacy.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",LimitedSinglePopulationGenerationalEAExperiment.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",NSGA2.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",StateVariableExtractor.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TWEANNGenotype.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
}","public final void fillDefaults(){
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",30,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",35,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3 * Constants.EDIBLE_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",2000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",ActivationFunctions.FTYPE_TANH,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",500,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",10,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",17,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",30,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",5,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",7,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",1000,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",4,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",25,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",0,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Integer.MAX_VALUE,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",3 * Constants.COMMON_LAIR_TIME,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",50,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",20,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",-1,""String_Node_Str"");
  integerOptions.add(""String_Node_Str"",Constants.DELAY,""String_Node_Str"");
  longOptions.add(""String_Node_Str"",0l,""String_Node_Str"");
  longOptions.add(""String_Node_Str"",0l,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",true,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  booleanOptions.add(""String_Node_Str"",false,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.99,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.25,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.025,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",-1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",10.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",1.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",50.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.25,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.9,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.8,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.05,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.4,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.2,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.3,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.1,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",Math.PI / 8.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",5.0 * Breve2DGame.AGENT_MAGNITUDE,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.0,""String_Node_Str"");
  doubleOptions.add(""String_Node_Str"",0.5,""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  stringOptions.add(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GaussianGenerator.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Max.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",JunctionNodes.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GhostsPillsMap.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TWEANNCrossover.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",SimpleWeaponManager.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",OpponentRelativeMovementOutputModel.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",OpponentRelativeSensorModel.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",FullTaskMediator.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Average.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",RushingPlayer.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",PlayerPredatorMonsterPrey.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",GhostsThenPillsModeSelector.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",DomainSpecificCharacterization.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",StarterPacMan.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",Legacy.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",LimitedSinglePopulationGenerationalEAExperiment.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",NSGA2.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",StateVariableExtractor.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",TWEANNGenotype.class,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
  classOptions.add(""String_Node_Str"",null,""String_Node_Str"");
}"
39344,"/** 
 * Uses the genotype to finish the set up of the brain/controller. It accesses the network to do this.
 * @param genotype
 */
public NNTorusPredPreyAgent(Genotype<T> genotype){
  super(genotype);
  Network net=(Network)this.getGenotype().getPhenotype();
  controller=new NNTorusPredPreyController(net);
}","/** 
 * Uses the genotype to finish the set up of the brain/controller. It accesses the network to do this.
 * @param genotype
 */
public NNTorusPredPreyAgent(Genotype<T> genotype,boolean isPredator){
  super(genotype);
  Network net=(Network)this.getGenotype().getPhenotype();
  controller=new NNTorusPredPreyController(net,isPredator);
}"
39345,"/** 
 * Takes in all agents (me, world, preds, prey) to allow agent me to return best possible actions
 * @param all agents (me, world, preds, prey)
 * @return actions array
 */
@Override public int[] getAction(TorusAgent me,TorusWorld world,TorusAgent[] preds,TorusAgent[] prey){
  double[] inputs=inputs(me,world,preds,prey);
  double[] outputs=nn.process(inputs);
  return actions[StatisticsUtilities.argmax(outputs)];
}","/** 
 * Takes in all agents (me, world, preds, prey) to allow agent me to return best possible actions
 * @param all agents (me, world, preds, prey)
 * @return actions array
 */
@Override public int[] getAction(TorusAgent me,TorusWorld world,TorusAgent[] preds,TorusAgent[] prey){
  double[] inputs=inputs(me,world,preds,prey);
  double[] outputs=nn.process(inputs);
  return isPredator ? PREDATOR_ACTIONS[StatisticsUtilities.argmax(outputs)] : PREY_ACTIONS[StatisticsUtilities.argmax(outputs)];
}"
39346,"/** 
 * Takes in network and connects it to the controller
 * @param nn
 */
public NNTorusPredPreyController(Network nn){
  this.nn=nn;
}","/** 
 * Takes in network and connects it to the controller
 * @param nn
 * @param isPredator
 */
public NNTorusPredPreyController(Network nn,boolean isPredator){
  this.nn=nn;
  this.isPredator=isPredator;
}"
39347,"/** 
 * Accesses the outputs that will be used by an agent, i.e. the movement directions.
 */
public String[] outputLabels(){
  return new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
}","/** 
 * Accesses the outputs that will be used by an agent, i.e. the movement directions.
 */
public String[] outputLabels(){
  return Parameters.parameters.booleanParameter(""String_Node_Str"") ? new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""} : new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
}"
39348,"/** 
 * Used to evaluated the fitness score of the brain agent genotype. Additionally, initializes the game to do this.
 * @param genotype and num (evaluation being performed)
 * @return pair of fitness and states from evaluation
 */
@Override public Pair<double[],double[]> oneEval(Genotype<T> individual,int num){
  NNTorusPredPreyAgent<T> agent=new NNTorusPredPreyAgent<T>(individual);
  brain=agent.getController();
  exec=new TorusWorldExec();
  TorusPredPreyGame game;
  if (CommonConstants.watch) {
    game=exec.runGameTimed(staticAgents,new TorusPredPreyController[]{brain},true);
  }
 else {
    game=exec.runExperiment(staticAgents,new TorusPredPreyController[]{brain});
  }
  double[] oneTrialFitness=new double[]{game.getTime()};
  double[] otherStats=new double[0];
  return new Pair<double[],double[]>(oneTrialFitness,otherStats);
}","/** 
 * Used to evaluated the fitness score of the brain agent genotype. Additionally, initializes the game to do this. one prey is evolved while predators are static
 * @param genotype and num (evaluation being performed)
 * @return pair of fitness and states from evaluation
 */
@Override public Pair<double[],double[]> oneEval(Genotype<T> individual,int num){
  NNTorusPredPreyAgent<T> agent=new NNTorusPredPreyAgent<T>(individual,false);
  brain=agent.getController();
  exec=new TorusWorldExec();
  TorusPredPreyGame game;
  if (CommonConstants.watch) {
    game=exec.runGameTimed(staticAgents,new TorusPredPreyController[]{brain},true);
  }
 else {
    game=exec.runExperiment(staticAgents,new TorusPredPreyController[]{brain});
  }
  double[] oneTrialFitness=new double[]{game.getTime()};
  double[] otherStats=new double[0];
  return new Pair<double[],double[]>(oneTrialFitness,otherStats);
}"
39349,"public static void main(String args[]){
}","public static void main(String args[]){
  System.out.println(""String_Node_Str"");
}"
39350,"public static BigInteger factorial(int n){
  BigInteger p=new BigInteger(""String_Node_Str"");
  if (n == 1 || n == 0)   return BigInteger.valueOf(1);
  p=BigInteger.valueOf(n).multiply(fact(n - 1));
  return p;
}","public static BigInteger factorial(int n){
  BigInteger p=new BigInteger(""String_Node_Str"");
  if (n == 1 || n == 0)   return BigInteger.valueOf(1);
  p=BigInteger.valueOf(n).multiply(factorial(n - 1));
  return p;
}"
39351,"public static void main(String[] args){
  Scanner s=new Scanner(System.out);
  System.out.println(""String_Node_Str"");
  String input=s.next();
  String[] answer=permutationOfString(input);
  for (int i=0; i < answer.length; i++) {
    System.out.println(answer[i]);
  }
}","public static void main(String[] args){
  Scanner s=new Scanner(System.in);
  System.out.println(""String_Node_Str"");
  String input=s.next();
  String[] answer=permutationOfString(input);
  for (int i=0; i < answer.length; i++) {
    System.out.println(answer[i]);
  }
}"
39352,"public static void main(String[] args){
  Scanner s=new Scanner(System.out);
  System.out.println(""String_Node_Str"");
  String input=s.next();
  String[] answer=subsequence(input);
  for (int i=0; i < answer.length; i++) {
    System.out.println(answer[i]);
  }
}","public static void main(String[] args){
  Scanner s=new Scanner(System.in);
  System.out.println(""String_Node_Str"");
  String input=s.next();
  String[] answer=subsequence(input);
  for (int i=0; i < answer.length; i++) {
    System.out.println(answer[i]);
  }
}"
39353,"private void addNewRecord(final View view){
  view.setClickable(false);
  String recordName=mEtRecordName.getText().toString();
  if (TextUtils.isEmpty(recordName)) {
    SnackBarUtil.showSnackInfo(view,this,getString(R.string.please_enter_record_type_name));
    return;
  }
  if (recordName.length() > 4) {
    SnackBarUtil.showSnackInfo(view,this,getString(R.string.record_type_name_too_long));
    return;
  }
  recordName=recordName.trim();
  RecordType recordType=new RecordType();
  recordType.setRecordType(mRecordType);
  recordType.setRecordTypeID(System.currentTimeMillis());
  recordType.setRecordIcon(mCurrentIcon);
  recordType.setRecordDesc(recordName);
  recordType.setIsDel(false);
  recordManager.createNewRecordType(recordType,new Handler(){
    @Override public void handleMessage(    Message msg){
      super.handleMessage(msg);
      if (msg.what == Constant.MSG_ERROR) {
        view.setClickable(true);
        SnackBarUtil.showSnackInfo(view,CreateNewRecordTypeActivity.this,getString(R.string.please_not_enter_same_record_type_name));
      }
 else {
        setResult(RESULT_OK);
        finish();
      }
    }
  }
);
}","private void addNewRecord(final View view){
  view.setClickable(false);
  String recordName=mEtRecordName.getText().toString();
  if (TextUtils.isEmpty(recordName)) {
    SnackBarUtil.showSnackInfo(view,this,getString(R.string.please_enter_record_type_name));
    view.setClickable(true);
    return;
  }
  if (recordName.length() > 4) {
    SnackBarUtil.showSnackInfo(view,this,getString(R.string.record_type_name_too_long));
    view.setClickable(true);
    return;
  }
  recordName=recordName.trim();
  RecordType recordType=new RecordType();
  recordType.setRecordType(mRecordType);
  recordType.setRecordTypeID(System.currentTimeMillis());
  recordType.setRecordIcon(mCurrentIcon);
  recordType.setRecordDesc(recordName);
  recordType.setIsDel(false);
  recordManager.createNewRecordType(recordType,new Handler(){
    @Override public void handleMessage(    Message msg){
      super.handleMessage(msg);
      if (msg.what == Constant.MSG_ERROR) {
        view.setClickable(true);
        SnackBarUtil.showSnackInfo(view,CreateNewRecordTypeActivity.this,getString(R.string.please_not_enter_same_record_type_name));
      }
 else {
        setResult(RESULT_OK);
        finish();
      }
    }
  }
);
}"
39354,"@Override protected void initWidget(){
  mImgOutAccountIcon=(ImageView)findViewById(R.id.out_account_icon);
  mImgInAccountIcon=(ImageView)findViewById(R.id.in_account_icon);
  mTvoOutAccountName=(TextView)findViewById(R.id.out_account_name);
  mTvInAccountName=(TextView)findViewById(R.id.in_account_name);
  mTvOutAccountLeftMoney=(TextView)findViewById(R.id.out_account_money);
  mTvInAccountLeftMoney=(TextView)findViewById(R.id.in_account_money);
  eEtOutMoney=(EditText)findViewById(R.id.out_money);
  eEtInMoney=(EditText)findViewById(R.id.in_money);
  plusView=findViewById(R.id.plus);
  plusView.setVisibility(View.GONE);
  eEtInMoney.setVisibility(View.GONE);
  inView=findViewById(R.id.in_layout);
  outView=findViewById(R.id.out_layout);
  circleProgressBar=(CircleProgressBar)findViewById(R.id.progressBar);
  circleProgressBar.setVisibility(View.INVISIBLE);
  floatingActionButton=(FloatingActionButton)findViewById(R.id.submit);
  floatingActionButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      floatingActionButton.setClickable(false);
      submit();
    }
  }
);
  eEtOutMoney.setText(""String_Node_Str"");
  eEtInMoney.setText(""String_Node_Str"");
  eEtOutMoney.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
  eEtInMoney.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
  AccountDetailDO accountDetailDO=accountManager.getAccountByID(outAccountID);
  mImgOutAccountIcon.setImageResource(IconTypeUtil.getAccountIcon(accountDetailDO.getAccountIcon()));
  if (!TextUtils.isEmpty(accountDetailDO.getAccountColor())) {
    mImgOutAccountIcon.setColorFilter(Integer.parseInt(accountDetailDO.getAccountColor()));
  }
  mTvoOutAccountName.setText(accountDetailDO.getAccountName());
  mTvOutAccountLeftMoney.setText(MoneyUtil.getFormatMoneyStr(this,accountDetailDO.getAccountMoney()));
  mImgInAccountIcon.setImageResource(0);
  mTvInAccountName.setText(""String_Node_Str"");
  mTvInAccountLeftMoney.setText(""String_Node_Str"");
  outView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
      KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
      selectItem=0;
      Intent intent=new Intent(AccountsTransferActivity.this,SelectAccountActivity.class);
      if (outAccountID > 0)       intent.putExtra(IntentConstant.ACCOUNT_ID,outAccountID);
      startActivityForResult(intent,0);
      overridePendingTransition(R.anim.up_in,0);
    }
  }
);
  inView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
      KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
      selectItem=1;
      Intent intent=new Intent(AccountsTransferActivity.this,SelectAccountActivity.class);
      if (inAccountID > 0)       intent.putExtra(IntentConstant.ACCOUNT_ID,inAccountID);
      startActivityForResult(intent,0);
      overridePendingTransition(R.anim.up_in,0);
    }
  }
);
  eEtOutMoney.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      String tmp=s.toString();
      if (tmp.contains(""String_Node_Str"")) {
        String[] strs=tmp.split(""String_Node_Str"");
        if (strs.length > 1 && strs[1].length() > 2) {
          eEtOutMoney.setText(tmp.substring(0,tmp.length() - 1));
          eEtOutMoney.setSelection(tmp.length() - 1);
        }
      }
      if (!TextUtils.isEmpty(tmp)) {
        double money=Double.parseDouble(tmp);
        if (money > Double.parseDouble(mTvOutAccountLeftMoney.getText().toString())) {
          KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
          SnackBarUtil.showSnackInfo(floatingActionButton,AccountsTransferActivity.this,getResources().getString(R.string.not_have_enough_money));
          eEtOutMoney.setText(mTvOutAccountLeftMoney.getText());
        }
      }
    }
    @Override public void afterTextChanged(    Editable s){
      if (!eEtOutMoney.isFocused())       return;
      eEtInMoney.setText(eEtOutMoney.getText());
    }
  }
);
  eEtInMoney.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      String tmp=s.toString();
      if (tmp.contains(""String_Node_Str"")) {
        String[] strs=tmp.split(""String_Node_Str"");
        if (strs.length > 1 && strs[1].length() > 2) {
          eEtInMoney.setText(tmp.substring(0,tmp.length() - 1));
          eEtInMoney.setSelection(tmp.length() - 1);
        }
      }
      if (!TextUtils.isEmpty(tmp)) {
        double money=Double.parseDouble(tmp);
        if (money > Double.parseDouble(mTvOutAccountLeftMoney.getText().toString())) {
          KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
          SnackBarUtil.showSnackInfo(floatingActionButton,AccountsTransferActivity.this,getResources().getString(R.string.not_have_enough_money));
          eEtInMoney.setText(mTvOutAccountLeftMoney.getText());
        }
      }
    }
    @Override public void afterTextChanged(    Editable s){
      if (eEtOutMoney.isFocused())       return;
      eEtOutMoney.setText(eEtInMoney.getText());
    }
  }
);
}","@Override protected void initWidget(){
  mImgOutAccountIcon=(ImageView)findViewById(R.id.out_account_icon);
  mImgInAccountIcon=(ImageView)findViewById(R.id.in_account_icon);
  mTvoOutAccountName=(TextView)findViewById(R.id.out_account_name);
  mTvInAccountName=(TextView)findViewById(R.id.in_account_name);
  mTvOutAccountLeftMoney=(TextView)findViewById(R.id.out_account_money);
  mTvInAccountLeftMoney=(TextView)findViewById(R.id.in_account_money);
  eEtOutMoney=(EditText)findViewById(R.id.out_money);
  eEtInMoney=(EditText)findViewById(R.id.in_money);
  plusView=findViewById(R.id.plus);
  plusView.setVisibility(View.GONE);
  eEtInMoney.setVisibility(View.GONE);
  inView=findViewById(R.id.in_layout);
  outView=findViewById(R.id.out_layout);
  circleProgressBar=(CircleProgressBar)findViewById(R.id.progressBar);
  circleProgressBar.setVisibility(View.INVISIBLE);
  floatingActionButton=(FloatingActionButton)findViewById(R.id.submit);
  floatingActionButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      floatingActionButton.setClickable(false);
      submit();
    }
  }
);
  eEtOutMoney.setText(""String_Node_Str"");
  eEtInMoney.setText(""String_Node_Str"");
  eEtOutMoney.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
  eEtInMoney.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
  AccountDetailDO accountDetailDO=accountManager.getAccountByID(outAccountID);
  mImgOutAccountIcon.setImageResource(IconTypeUtil.getAccountIcon(accountDetailDO.getAccountIcon()));
  if (!TextUtils.isEmpty(accountDetailDO.getAccountColor())) {
    mImgOutAccountIcon.setColorFilter(Integer.parseInt(accountDetailDO.getAccountColor()));
  }
  mTvoOutAccountName.setText(accountDetailDO.getAccountName());
  String outMoney=MoneyUtil.getFormatMoneyStr(this,accountDetailDO.getAccountMoney());
  mTvOutAccountLeftMoney.setText(TextUtils.isEmpty(ounMoney) ? ""String_Node_Str"" : outMoney);
  mImgInAccountIcon.setImageResource(0);
  mTvInAccountName.setText(""String_Node_Str"");
  mTvInAccountLeftMoney.setText(""String_Node_Str"");
  outView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
      KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
      selectItem=0;
      Intent intent=new Intent(AccountsTransferActivity.this,SelectAccountActivity.class);
      if (outAccountID > 0)       intent.putExtra(IntentConstant.ACCOUNT_ID,outAccountID);
      startActivityForResult(intent,0);
      overridePendingTransition(R.anim.up_in,0);
    }
  }
);
  inView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
      KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
      selectItem=1;
      Intent intent=new Intent(AccountsTransferActivity.this,SelectAccountActivity.class);
      if (inAccountID > 0)       intent.putExtra(IntentConstant.ACCOUNT_ID,inAccountID);
      startActivityForResult(intent,0);
      overridePendingTransition(R.anim.up_in,0);
    }
  }
);
  eEtOutMoney.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      String tmp=s.toString();
      if (tmp.contains(""String_Node_Str"")) {
        String[] strs=tmp.split(""String_Node_Str"");
        if (strs.length > 1 && strs[1].length() > 2) {
          eEtOutMoney.setText(tmp.substring(0,tmp.length() - 1));
          eEtOutMoney.setSelection(tmp.length() - 1);
        }
      }
      if (!TextUtils.isEmpty(tmp)) {
        double money=Double.parseDouble(tmp);
        if (money > Double.parseDouble(mTvOutAccountLeftMoney.getText().toString())) {
          KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
          SnackBarUtil.showSnackInfo(floatingActionButton,AccountsTransferActivity.this,getResources().getString(R.string.not_have_enough_money));
          eEtOutMoney.setText(mTvOutAccountLeftMoney.getText());
        }
      }
    }
    @Override public void afterTextChanged(    Editable s){
      if (!eEtOutMoney.isFocused())       return;
      eEtInMoney.setText(eEtOutMoney.getText());
    }
  }
);
  eEtInMoney.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      String tmp=s.toString();
      if (tmp.contains(""String_Node_Str"")) {
        String[] strs=tmp.split(""String_Node_Str"");
        if (strs.length > 1 && strs[1].length() > 2) {
          eEtInMoney.setText(tmp.substring(0,tmp.length() - 1));
          eEtInMoney.setSelection(tmp.length() - 1);
        }
      }
      if (!TextUtils.isEmpty(tmp)) {
        double money=Double.parseDouble(tmp);
        if (money > Double.parseDouble(mTvOutAccountLeftMoney.getText().toString())) {
          KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
          SnackBarUtil.showSnackInfo(floatingActionButton,AccountsTransferActivity.this,getResources().getString(R.string.not_have_enough_money));
          eEtInMoney.setText(mTvOutAccountLeftMoney.getText());
        }
      }
    }
    @Override public void afterTextChanged(    Editable s){
      if (eEtOutMoney.isFocused())       return;
      eEtOutMoney.setText(eEtInMoney.getText());
    }
  }
);
}"
39355,"@Override public void onTextChanged(CharSequence s,int start,int before,int count){
  String tmp=s.toString();
  if (tmp.contains(""String_Node_Str"")) {
    String[] strs=tmp.split(""String_Node_Str"");
    if (strs.length > 1 && strs[1].length() > 2) {
      eEtInMoney.setText(tmp.substring(0,tmp.length() - 1));
      eEtInMoney.setSelection(tmp.length() - 1);
    }
  }
  if (!TextUtils.isEmpty(tmp)) {
    double money=Double.parseDouble(tmp);
    if (money > Double.parseDouble(mTvOutAccountLeftMoney.getText().toString())) {
      KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
      SnackBarUtil.showSnackInfo(floatingActionButton,AccountsTransferActivity.this,getResources().getString(R.string.not_have_enough_money));
      eEtInMoney.setText(mTvOutAccountLeftMoney.getText());
    }
  }
}","@Override public void onTextChanged(CharSequence s,int start,int before,int count){
  String tmp=s.toString();
  if (tmp.contains(""String_Node_Str"")) {
    String[] strs=tmp.split(""String_Node_Str"");
    if (strs.length > 1 && strs[1].length() > 2) {
      eEtOutMoney.setText(tmp.substring(0,tmp.length() - 1));
      eEtOutMoney.setSelection(tmp.length() - 1);
    }
  }
  if (!TextUtils.isEmpty(tmp)) {
    double money=0.00;
    try {
      money=Double.parseDouble(tmp);
    }
 catch (    Exception e) {
    }
    if (money > Double.parseDouble(mTvOutAccountLeftMoney.getText().toString())) {
      KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
      SnackBarUtil.showSnackInfo(floatingActionButton,AccountsTransferActivity.this,getResources().getString(R.string.not_have_enough_money));
      eEtOutMoney.setText(mTvOutAccountLeftMoney.getText());
    }
  }
}"
39356,"@Override protected void initWidget(){
  mImgOutAccountIcon=(ImageView)findViewById(R.id.out_account_icon);
  mImgInAccountIcon=(ImageView)findViewById(R.id.in_account_icon);
  mTvoOutAccountName=(TextView)findViewById(R.id.out_account_name);
  mTvInAccountName=(TextView)findViewById(R.id.in_account_name);
  mTvOutAccountLeftMoney=(TextView)findViewById(R.id.out_account_money);
  mTvInAccountLeftMoney=(TextView)findViewById(R.id.in_account_money);
  eEtOutMoney=(EditText)findViewById(R.id.out_money);
  eEtInMoney=(EditText)findViewById(R.id.in_money);
  plusView=findViewById(R.id.plus);
  plusView.setVisibility(View.GONE);
  eEtInMoney.setVisibility(View.GONE);
  inView=findViewById(R.id.in_layout);
  outView=findViewById(R.id.out_layout);
  circleProgressBar=(CircleProgressBar)findViewById(R.id.progressBar);
  circleProgressBar.setVisibility(View.INVISIBLE);
  floatingActionButton=(FloatingActionButton)findViewById(R.id.submit);
  floatingActionButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      floatingActionButton.setClickable(false);
      submit();
    }
  }
);
  eEtOutMoney.setText(""String_Node_Str"");
  eEtInMoney.setText(""String_Node_Str"");
  eEtOutMoney.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
  eEtInMoney.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
  AccountDetailDO accountDetailDO=accountManager.getAccountByID(outAccountID);
  mImgOutAccountIcon.setImageResource(IconTypeUtil.getAccountIcon(accountDetailDO.getAccountIcon()));
  if (!TextUtils.isEmpty(accountDetailDO.getAccountColor())) {
    mImgOutAccountIcon.setColorFilter(Integer.parseInt(accountDetailDO.getAccountColor()));
  }
  mTvoOutAccountName.setText(accountDetailDO.getAccountName());
  String outMoney=MoneyUtil.getFormatMoneyStr(this,accountDetailDO.getAccountMoney());
  mTvOutAccountLeftMoney.setText(TextUtils.isEmpty(outMoney) ? ""String_Node_Str"" : outMoney);
  mImgInAccountIcon.setImageResource(0);
  mTvInAccountName.setText(""String_Node_Str"");
  mTvInAccountLeftMoney.setText(""String_Node_Str"");
  outView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
      KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
      selectItem=0;
      Intent intent=new Intent(AccountsTransferActivity.this,SelectAccountActivity.class);
      if (outAccountID > 0)       intent.putExtra(IntentConstant.ACCOUNT_ID,outAccountID);
      startActivityForResult(intent,0);
      overridePendingTransition(R.anim.up_in,0);
    }
  }
);
  inView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
      KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
      selectItem=1;
      Intent intent=new Intent(AccountsTransferActivity.this,SelectAccountActivity.class);
      if (inAccountID > 0)       intent.putExtra(IntentConstant.ACCOUNT_ID,inAccountID);
      startActivityForResult(intent,0);
      overridePendingTransition(R.anim.up_in,0);
    }
  }
);
  eEtOutMoney.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      String tmp=s.toString();
      if (tmp.contains(""String_Node_Str"")) {
        String[] strs=tmp.split(""String_Node_Str"");
        if (strs.length > 1 && strs[1].length() > 2) {
          eEtOutMoney.setText(tmp.substring(0,tmp.length() - 1));
          eEtOutMoney.setSelection(tmp.length() - 1);
        }
      }
      if (!TextUtils.isEmpty(tmp)) {
        double money=0.00;
        try {
          Double.parseDouble(tmp);
        }
 catch (        Exception e) {
        }
        if (money > Double.parseDouble(mTvOutAccountLeftMoney.getText().toString())) {
          KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
          SnackBarUtil.showSnackInfo(floatingActionButton,AccountsTransferActivity.this,getResources().getString(R.string.not_have_enough_money));
          eEtOutMoney.setText(mTvOutAccountLeftMoney.getText());
        }
      }
    }
    @Override public void afterTextChanged(    Editable s){
      if (!eEtOutMoney.isFocused())       return;
      eEtInMoney.setText(eEtOutMoney.getText());
    }
  }
);
  eEtInMoney.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      String tmp=s.toString();
      if (tmp.contains(""String_Node_Str"")) {
        String[] strs=tmp.split(""String_Node_Str"");
        if (strs.length > 1 && strs[1].length() > 2) {
          eEtInMoney.setText(tmp.substring(0,tmp.length() - 1));
          eEtInMoney.setSelection(tmp.length() - 1);
        }
      }
      if (!TextUtils.isEmpty(tmp)) {
        double money=Double.parseDouble(tmp);
        if (money > Double.parseDouble(mTvOutAccountLeftMoney.getText().toString())) {
          KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
          SnackBarUtil.showSnackInfo(floatingActionButton,AccountsTransferActivity.this,getResources().getString(R.string.not_have_enough_money));
          eEtInMoney.setText(mTvOutAccountLeftMoney.getText());
        }
      }
    }
    @Override public void afterTextChanged(    Editable s){
      if (eEtOutMoney.isFocused())       return;
      eEtOutMoney.setText(eEtInMoney.getText());
    }
  }
);
}","@Override protected void initWidget(){
  mImgOutAccountIcon=(ImageView)findViewById(R.id.out_account_icon);
  mImgInAccountIcon=(ImageView)findViewById(R.id.in_account_icon);
  mTvoOutAccountName=(TextView)findViewById(R.id.out_account_name);
  mTvInAccountName=(TextView)findViewById(R.id.in_account_name);
  mTvOutAccountLeftMoney=(TextView)findViewById(R.id.out_account_money);
  mTvInAccountLeftMoney=(TextView)findViewById(R.id.in_account_money);
  eEtOutMoney=(EditText)findViewById(R.id.out_money);
  eEtInMoney=(EditText)findViewById(R.id.in_money);
  plusView=findViewById(R.id.plus);
  plusView.setVisibility(View.GONE);
  eEtInMoney.setVisibility(View.GONE);
  inView=findViewById(R.id.in_layout);
  outView=findViewById(R.id.out_layout);
  circleProgressBar=(CircleProgressBar)findViewById(R.id.progressBar);
  circleProgressBar.setVisibility(View.INVISIBLE);
  floatingActionButton=(FloatingActionButton)findViewById(R.id.submit);
  floatingActionButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      floatingActionButton.setClickable(false);
      submit();
    }
  }
);
  eEtOutMoney.setText(""String_Node_Str"");
  eEtInMoney.setText(""String_Node_Str"");
  eEtOutMoney.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
  eEtInMoney.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
  AccountDetailDO accountDetailDO=accountManager.getAccountByID(outAccountID);
  mImgOutAccountIcon.setImageResource(IconTypeUtil.getAccountIcon(accountDetailDO.getAccountIcon()));
  if (!TextUtils.isEmpty(accountDetailDO.getAccountColor())) {
    mImgOutAccountIcon.setColorFilter(Integer.parseInt(accountDetailDO.getAccountColor()));
  }
  mTvoOutAccountName.setText(accountDetailDO.getAccountName());
  String outMoney=MoneyUtil.getFormatMoneyStr(this,accountDetailDO.getAccountMoney());
  mTvOutAccountLeftMoney.setText(TextUtils.isEmpty(outMoney) ? ""String_Node_Str"" : outMoney);
  mImgInAccountIcon.setImageResource(0);
  mTvInAccountName.setText(""String_Node_Str"");
  mTvInAccountLeftMoney.setText(""String_Node_Str"");
  outView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
      KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
      selectItem=0;
      Intent intent=new Intent(AccountsTransferActivity.this,SelectAccountActivity.class);
      if (outAccountID > 0)       intent.putExtra(IntentConstant.ACCOUNT_ID,outAccountID);
      startActivityForResult(intent,0);
      overridePendingTransition(R.anim.up_in,0);
    }
  }
);
  inView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
      KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
      selectItem=1;
      Intent intent=new Intent(AccountsTransferActivity.this,SelectAccountActivity.class);
      if (inAccountID > 0)       intent.putExtra(IntentConstant.ACCOUNT_ID,inAccountID);
      startActivityForResult(intent,0);
      overridePendingTransition(R.anim.up_in,0);
    }
  }
);
  eEtOutMoney.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      String tmp=s.toString();
      if (tmp.contains(""String_Node_Str"")) {
        String[] strs=tmp.split(""String_Node_Str"");
        if (strs.length > 1 && strs[1].length() > 2) {
          eEtOutMoney.setText(tmp.substring(0,tmp.length() - 1));
          eEtOutMoney.setSelection(tmp.length() - 1);
        }
      }
      if (!TextUtils.isEmpty(tmp)) {
        double money=0.00;
        try {
          money=Double.parseDouble(tmp);
        }
 catch (        Exception e) {
        }
        if (money > Double.parseDouble(mTvOutAccountLeftMoney.getText().toString())) {
          KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
          SnackBarUtil.showSnackInfo(floatingActionButton,AccountsTransferActivity.this,getResources().getString(R.string.not_have_enough_money));
          eEtOutMoney.setText(mTvOutAccountLeftMoney.getText());
        }
      }
    }
    @Override public void afterTextChanged(    Editable s){
      if (!eEtOutMoney.isFocused())       return;
      eEtInMoney.setText(eEtOutMoney.getText());
    }
  }
);
}"
39357,"@Override public void afterTextChanged(Editable s){
  if (eEtOutMoney.isFocused())   return;
  eEtOutMoney.setText(eEtInMoney.getText());
}","@Override public void afterTextChanged(Editable s){
  if (!eEtOutMoney.isFocused())   return;
  eEtInMoney.setText(eEtOutMoney.getText());
}"
39358,"@Override protected void initWidget(){
  mImgOutAccountIcon=(ImageView)findViewById(R.id.out_account_icon);
  mImgInAccountIcon=(ImageView)findViewById(R.id.in_account_icon);
  mTvoOutAccountName=(TextView)findViewById(R.id.out_account_name);
  mTvInAccountName=(TextView)findViewById(R.id.in_account_name);
  mTvOutAccountLeftMoney=(TextView)findViewById(R.id.out_account_money);
  mTvInAccountLeftMoney=(TextView)findViewById(R.id.in_account_money);
  eEtOutMoney=(EditText)findViewById(R.id.out_money);
  eEtInMoney=(EditText)findViewById(R.id.in_money);
  plusView=findViewById(R.id.plus);
  plusView.setVisibility(View.GONE);
  eEtInMoney.setVisibility(View.GONE);
  inView=findViewById(R.id.in_layout);
  outView=findViewById(R.id.out_layout);
  circleProgressBar=(CircleProgressBar)findViewById(R.id.progressBar);
  circleProgressBar.setVisibility(View.INVISIBLE);
  floatingActionButton=(FloatingActionButton)findViewById(R.id.submit);
  floatingActionButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      floatingActionButton.setClickable(false);
      submit();
    }
  }
);
  eEtOutMoney.setText(""String_Node_Str"");
  eEtInMoney.setText(""String_Node_Str"");
  eEtOutMoney.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
  eEtInMoney.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
  AccountDetailDO accountDetailDO=accountManager.getAccountByID(outAccountID);
  mImgOutAccountIcon.setImageResource(IconTypeUtil.getAccountIcon(accountDetailDO.getAccountIcon()));
  if (!TextUtils.isEmpty(accountDetailDO.getAccountColor())) {
    mImgOutAccountIcon.setColorFilter(Integer.parseInt(accountDetailDO.getAccountColor()));
  }
  mTvoOutAccountName.setText(accountDetailDO.getAccountName());
  String outMoney=MoneyUtil.getFormatMoneyStr(this,accountDetailDO.getAccountMoney());
  mTvOutAccountLeftMoney.setText(TextUtils.isEmpty(ounMoney) ? ""String_Node_Str"" : outMoney);
  mImgInAccountIcon.setImageResource(0);
  mTvInAccountName.setText(""String_Node_Str"");
  mTvInAccountLeftMoney.setText(""String_Node_Str"");
  outView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
      KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
      selectItem=0;
      Intent intent=new Intent(AccountsTransferActivity.this,SelectAccountActivity.class);
      if (outAccountID > 0)       intent.putExtra(IntentConstant.ACCOUNT_ID,outAccountID);
      startActivityForResult(intent,0);
      overridePendingTransition(R.anim.up_in,0);
    }
  }
);
  inView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
      KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
      selectItem=1;
      Intent intent=new Intent(AccountsTransferActivity.this,SelectAccountActivity.class);
      if (inAccountID > 0)       intent.putExtra(IntentConstant.ACCOUNT_ID,inAccountID);
      startActivityForResult(intent,0);
      overridePendingTransition(R.anim.up_in,0);
    }
  }
);
  eEtOutMoney.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      String tmp=s.toString();
      if (tmp.contains(""String_Node_Str"")) {
        String[] strs=tmp.split(""String_Node_Str"");
        if (strs.length > 1 && strs[1].length() > 2) {
          eEtOutMoney.setText(tmp.substring(0,tmp.length() - 1));
          eEtOutMoney.setSelection(tmp.length() - 1);
        }
      }
      if (!TextUtils.isEmpty(tmp)) {
        double money=Double.parseDouble(tmp);
        if (money > Double.parseDouble(mTvOutAccountLeftMoney.getText().toString())) {
          KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
          SnackBarUtil.showSnackInfo(floatingActionButton,AccountsTransferActivity.this,getResources().getString(R.string.not_have_enough_money));
          eEtOutMoney.setText(mTvOutAccountLeftMoney.getText());
        }
      }
    }
    @Override public void afterTextChanged(    Editable s){
      if (!eEtOutMoney.isFocused())       return;
      eEtInMoney.setText(eEtOutMoney.getText());
    }
  }
);
  eEtInMoney.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      String tmp=s.toString();
      if (tmp.contains(""String_Node_Str"")) {
        String[] strs=tmp.split(""String_Node_Str"");
        if (strs.length > 1 && strs[1].length() > 2) {
          eEtInMoney.setText(tmp.substring(0,tmp.length() - 1));
          eEtInMoney.setSelection(tmp.length() - 1);
        }
      }
      if (!TextUtils.isEmpty(tmp)) {
        double money=Double.parseDouble(tmp);
        if (money > Double.parseDouble(mTvOutAccountLeftMoney.getText().toString())) {
          KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
          SnackBarUtil.showSnackInfo(floatingActionButton,AccountsTransferActivity.this,getResources().getString(R.string.not_have_enough_money));
          eEtInMoney.setText(mTvOutAccountLeftMoney.getText());
        }
      }
    }
    @Override public void afterTextChanged(    Editable s){
      if (eEtOutMoney.isFocused())       return;
      eEtOutMoney.setText(eEtInMoney.getText());
    }
  }
);
}","@Override protected void initWidget(){
  mImgOutAccountIcon=(ImageView)findViewById(R.id.out_account_icon);
  mImgInAccountIcon=(ImageView)findViewById(R.id.in_account_icon);
  mTvoOutAccountName=(TextView)findViewById(R.id.out_account_name);
  mTvInAccountName=(TextView)findViewById(R.id.in_account_name);
  mTvOutAccountLeftMoney=(TextView)findViewById(R.id.out_account_money);
  mTvInAccountLeftMoney=(TextView)findViewById(R.id.in_account_money);
  eEtOutMoney=(EditText)findViewById(R.id.out_money);
  eEtInMoney=(EditText)findViewById(R.id.in_money);
  plusView=findViewById(R.id.plus);
  plusView.setVisibility(View.GONE);
  eEtInMoney.setVisibility(View.GONE);
  inView=findViewById(R.id.in_layout);
  outView=findViewById(R.id.out_layout);
  circleProgressBar=(CircleProgressBar)findViewById(R.id.progressBar);
  circleProgressBar.setVisibility(View.INVISIBLE);
  floatingActionButton=(FloatingActionButton)findViewById(R.id.submit);
  floatingActionButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      floatingActionButton.setClickable(false);
      submit();
    }
  }
);
  eEtOutMoney.setText(""String_Node_Str"");
  eEtInMoney.setText(""String_Node_Str"");
  eEtOutMoney.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
  eEtInMoney.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
  AccountDetailDO accountDetailDO=accountManager.getAccountByID(outAccountID);
  mImgOutAccountIcon.setImageResource(IconTypeUtil.getAccountIcon(accountDetailDO.getAccountIcon()));
  if (!TextUtils.isEmpty(accountDetailDO.getAccountColor())) {
    mImgOutAccountIcon.setColorFilter(Integer.parseInt(accountDetailDO.getAccountColor()));
  }
  mTvoOutAccountName.setText(accountDetailDO.getAccountName());
  String outMoney=MoneyUtil.getFormatMoneyStr(this,accountDetailDO.getAccountMoney());
  mTvOutAccountLeftMoney.setText(TextUtils.isEmpty(outMoney) ? ""String_Node_Str"" : outMoney);
  mImgInAccountIcon.setImageResource(0);
  mTvInAccountName.setText(""String_Node_Str"");
  mTvInAccountLeftMoney.setText(""String_Node_Str"");
  outView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
      KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
      selectItem=0;
      Intent intent=new Intent(AccountsTransferActivity.this,SelectAccountActivity.class);
      if (outAccountID > 0)       intent.putExtra(IntentConstant.ACCOUNT_ID,outAccountID);
      startActivityForResult(intent,0);
      overridePendingTransition(R.anim.up_in,0);
    }
  }
);
  inView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
      KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
      selectItem=1;
      Intent intent=new Intent(AccountsTransferActivity.this,SelectAccountActivity.class);
      if (inAccountID > 0)       intent.putExtra(IntentConstant.ACCOUNT_ID,inAccountID);
      startActivityForResult(intent,0);
      overridePendingTransition(R.anim.up_in,0);
    }
  }
);
  eEtOutMoney.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      String tmp=s.toString();
      if (tmp.contains(""String_Node_Str"")) {
        String[] strs=tmp.split(""String_Node_Str"");
        if (strs.length > 1 && strs[1].length() > 2) {
          eEtOutMoney.setText(tmp.substring(0,tmp.length() - 1));
          eEtOutMoney.setSelection(tmp.length() - 1);
        }
      }
      if (!TextUtils.isEmpty(tmp)) {
        double money=Double.parseDouble(tmp);
        if (money > Double.parseDouble(mTvOutAccountLeftMoney.getText().toString())) {
          KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
          SnackBarUtil.showSnackInfo(floatingActionButton,AccountsTransferActivity.this,getResources().getString(R.string.not_have_enough_money));
          eEtOutMoney.setText(mTvOutAccountLeftMoney.getText());
        }
      }
    }
    @Override public void afterTextChanged(    Editable s){
      if (!eEtOutMoney.isFocused())       return;
      eEtInMoney.setText(eEtOutMoney.getText());
    }
  }
);
  eEtInMoney.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      String tmp=s.toString();
      if (tmp.contains(""String_Node_Str"")) {
        String[] strs=tmp.split(""String_Node_Str"");
        if (strs.length > 1 && strs[1].length() > 2) {
          eEtInMoney.setText(tmp.substring(0,tmp.length() - 1));
          eEtInMoney.setSelection(tmp.length() - 1);
        }
      }
      if (!TextUtils.isEmpty(tmp)) {
        double money=Double.parseDouble(tmp);
        if (money > Double.parseDouble(mTvOutAccountLeftMoney.getText().toString())) {
          KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
          SnackBarUtil.showSnackInfo(floatingActionButton,AccountsTransferActivity.this,getResources().getString(R.string.not_have_enough_money));
          eEtInMoney.setText(mTvOutAccountLeftMoney.getText());
        }
      }
    }
    @Override public void afterTextChanged(    Editable s){
      if (eEtOutMoney.isFocused())       return;
      eEtOutMoney.setText(eEtInMoney.getText());
    }
  }
);
}"
39359,"private void saveProp(String param){
  final Intent intent=new Intent();
switch (mEditType) {
case PROP_TYPE_ACCOUNT_NAME:
    intent.putExtra(IntentConstant.EDIT_ACCOUNT_NAME,param);
  if (mAccountID > 0) {
    accountManager.updateAccountName(mAccountID,param,new Handler(){
      @Override public void handleMessage(      Message msg){
        super.handleMessage(msg);
        setResult(RESULT_OK,intent);
        finish();
      }
    }
);
  }
 else {
    setResult(RESULT_OK,intent);
    finish();
  }
break;
case PROP_TYPE_ACCOUNT_MONEY:
if (TextUtils.isEmpty(param)) param=""String_Node_Str"";
final double money=Double.parseDouble(param);
intent.putExtra(IntentConstant.EDIT_ACCOUNT_MONEY,money);
if (mAccountID > 0 && money - mMoney != 0) {
accountManager.updateAccountMoney(mAccountID,money - mMoney,new Handler(){
@Override public void handleMessage(Message msg){
super.handleMessage(msg);
Record record=new Record();
record.setIsDel(false);
record.setRemark(money - mMoney > 0 ? ""String_Node_Str"" : ""String_Node_Str"");
record.setRecordId(System.currentTimeMillis());
record.setAccountID(mAccountID);
record.setRecordType(Constant.RecordType.CHANGE.getId());
record.setRecordTypeID(Constant.CHANGE_TYPE);
record.setRecordMoney(MoneyUtil.getFormatNum(money - mMoney));
record.setRecordDate(new Date(System.currentTimeMillis()));
recordManager.createNewRecord(record,null);
setResult(RESULT_OK,intent);
finish();
}
}
);
}
 else {
setResult(RESULT_OK,intent);
finish();
}
break;
case PROP_TYPE_ACCOUNT_REMARK:
intent.putExtra(IntentConstant.EDIT_ACCOUNT_REMARK,param);
if (mAccountID > 0) {
accountManager.updateAccountRemark(mAccountID,param,new Handler(){
@Override public void handleMessage(Message msg){
super.handleMessage(msg);
setResult(RESULT_OK,intent);
finish();
}
}
);
}
 else {
setResult(RESULT_OK,intent);
finish();
}
break;
default :
break;
}
}","private void saveProp(String param){
  final Intent intent=new Intent();
switch (mEditType) {
case PROP_TYPE_ACCOUNT_NAME:
    intent.putExtra(IntentConstant.EDIT_ACCOUNT_NAME,param);
  if (mAccountID > 0) {
    accountManager.updateAccountName(mAccountID,param,new Handler(){
      @Override public void handleMessage(      Message msg){
        super.handleMessage(msg);
        setResult(RESULT_OK,intent);
        finish();
      }
    }
);
  }
 else {
    setResult(RESULT_OK,intent);
    finish();
  }
break;
case PROP_TYPE_ACCOUNT_MONEY:
if (TextUtils.isEmpty(param)) param=""String_Node_Str"";
double tempmoney=0.00;
try {
tempmoney=Double.parseDouble(param);
}
 catch (Exception e) {
}
final double money=tempmoney;
intent.putExtra(IntentConstant.EDIT_ACCOUNT_MONEY,money);
if (mAccountID > 0 && money - mMoney != 0) {
accountManager.updateAccountMoney(mAccountID,money - mMoney,new Handler(){
@Override public void handleMessage(Message msg){
super.handleMessage(msg);
Record record=new Record();
record.setIsDel(false);
record.setRemark(money - mMoney > 0 ? ""String_Node_Str"" : ""String_Node_Str"");
record.setRecordId(System.currentTimeMillis());
record.setAccountID(mAccountID);
record.setRecordType(Constant.RecordType.CHANGE.getId());
record.setRecordTypeID(Constant.CHANGE_TYPE);
record.setRecordMoney(MoneyUtil.getFormatNum(money - mMoney));
record.setRecordDate(new Date(System.currentTimeMillis()));
recordManager.createNewRecord(record,null);
setResult(RESULT_OK,intent);
finish();
}
}
);
}
 else {
setResult(RESULT_OK,intent);
finish();
}
break;
case PROP_TYPE_ACCOUNT_REMARK:
intent.putExtra(IntentConstant.EDIT_ACCOUNT_REMARK,param);
if (mAccountID > 0) {
accountManager.updateAccountRemark(mAccountID,param,new Handler(){
@Override public void handleMessage(Message msg){
super.handleMessage(msg);
setResult(RESULT_OK,intent);
finish();
}
}
);
}
 else {
setResult(RESULT_OK,intent);
finish();
}
break;
default :
break;
}
}"
39360,"public RecordType getRecordTypeById(Context context,long id){
  RecordTypeDao recordTypeDao=getDaoSession(context).getRecordTypeDao();
  RecordType recordType=getSingleData(recordTypeDao.queryBuilder().where(RecordTypeDao.Properties.RecordTypeID.eq(id)).build().list());
  if (recordType == null)   recordType=new RecordType(null,0L,""String_Node_Str"",Constant.RecordType.ZUICHU.getId(),true,Constant.RecordTypeConstant.ICON_TYPE_YI_BAN,0,Constant.Sex.ALL.getId(),Constant.Occupation.ALL.getId(),true,false,""String_Node_Str"");
  return recordType;
}","public RecordType getRecordTypeById(Context context,long id){
  RecordTypeDao recordTypeDao=getDaoSession(context).getRecordTypeDao();
  RecordType recordType=getSingleData(recordTypeDao.queryBuilder().where(RecordTypeDao.Properties.RecordTypeID.eq(id)).build().list());
  if (recordType == null)   recordType=new RecordType(0L,0L,""String_Node_Str"",Constant.RecordType.ZUICHU.getId(),true,Constant.RecordTypeConstant.ICON_TYPE_YI_BAN,0,Constant.Sex.ALL.getId(),Constant.Occupation.ALL.getId(),true,false,""String_Node_Str"");
  return recordType;
}"
39361,"/** 
 * 修改账户通用方法
 * @param editType
 * @param accountID
 * @param remark
 * @param typeID
 * @param money
 * @param accountName
 * @param callback
 * @param handler
 */
private void editAccount(final int editType,final long accountID,final String remark,final int typeID,final double money,final String accountName,final Callback callback,final Handler handler){
  if (canSync()) {
    Account account=accountLocalDao.getAccountByID(accountID,_context);
    if (!TextUtils.isEmpty(account.getObjectID())) {
      AVAccount avAccount=DataConvertUtil.convertAccount2AVAccount(account);
      avAccount.setAccountIsDel(false);
      if (editType == EDIT_TYPE_DEL) {
        avAccount.setAccountIsDel(true);
      }
 else       if (editType == EDIT_TYPE_ACCOUNT_TYPE) {
        avAccount.setAccountTypeId(typeID);
      }
 else       if (editType == EDIT_TYPE_ACCOUNT_MONEY) {
        avAccount.setAccountMoney(money);
      }
 else       if (editType == EDIT_TYPE_ACCOUNT_REMARK) {
        avAccount.setAccountRemark(remark);
      }
 else       if (editType == EDIT_TYPE_ACCOUNT_NAME) {
        avAccount.setAccountName(accountName);
      }
 else       if (editType == EDIT_TYPE_ACCOUNT_COLOR) {
        avAccount.setAccountColor(remark);
      }
      avAccount.saveInBackground(new SaveCallback(){
        @Override public void done(        AVException e){
          getAvEx(e);
          if (e == null) {
            callback.doSth(true,null);
          }
 else {
            callback.doSth(false,null);
          }
          sendEmptyMessage(handler,Constant.MSG_SUCCESS);
        }
      }
);
      return;
    }
    AVQuery<AVAccount> query=AVObject.getQuery(AVAccount.class);
    query.whereEqualTo(AVAccount.ACCOUNT_ID,accountID);
    query.whereEqualTo(AVAccount.USER,MyAVUser.getCurrentUser());
    query.findInBackground(new FindCallback<AVAccount>(){
      @Override public void done(      List<AVAccount> list,      AVException e){
        if (e == null) {
          AVAccount avAccount=null;
          if (list.size() > 0) {
            avAccount=list.get(0);
          }
 else {
            Account account=accountLocalDao.getAccountByID(accountID,_context);
            avAccount=DataConvertUtil.convertAccount2AVAccount(account);
          }
          if (editType == EDIT_TYPE_DEL) {
            avAccount.setAccountIsDel(true);
          }
 else           if (editType == EDIT_TYPE_ACCOUNT_TYPE) {
            avAccount.setAccountTypeId(typeID);
          }
 else           if (editType == EDIT_TYPE_ACCOUNT_MONEY) {
            avAccount.setAccountMoney(money);
          }
 else           if (editType == EDIT_TYPE_ACCOUNT_REMARK) {
            avAccount.setAccountRemark(remark);
          }
 else           if (editType == EDIT_TYPE_ACCOUNT_NAME) {
            avAccount.setAccountName(accountName);
          }
 else           if (editType == EDIT_TYPE_ACCOUNT_COLOR) {
            avAccount.setAccountColor(remark);
          }
          final String objId=avAccount.getObjectId();
          avAccount.saveInBackground(new SaveCallback(){
            @Override public void done(            AVException e){
              if (e == null) {
                callback.doSth(true,objId);
              }
 else {
                getAvEx(e);
                callback.doSth(false,objId);
              }
              sendEmptyMessage(handler,Constant.MSG_SUCCESS);
            }
          }
);
        }
 else {
          getAvEx(e);
          callback.doSth(false,null);
          sendEmptyMessage(handler,Constant.MSG_SUCCESS);
        }
      }
    }
);
  }
 else {
    callback.doSth(false,null);
    sendEmptyMessage(handler,Constant.MSG_SUCCESS);
  }
}","/** 
 * 修改账户通用方法
 * @param editType
 * @param accountID
 * @param remark
 * @param typeID
 * @param money
 * @param accountName
 * @param callback
 * @param handler
 */
private void editAccount(final int editType,final long accountID,final String remark,final int typeID,final double money,final String accountName,final Callback callback,final Handler handler){
  if (canSync()) {
    Account account=accountLocalDao.getAccountByID(accountID,_context);
    if (account.getIsDel()) {
      sendEmptyMessage(handler,Constant.MSG_SUCCESS);
      return;
    }
    if (!TextUtils.isEmpty(account.getObjectID())) {
      AVAccount avAccount=DataConvertUtil.convertAccount2AVAccount(account);
      avAccount.setAccountIsDel(account.getIsDel());
      if (editType == EDIT_TYPE_DEL) {
        avAccount.setAccountIsDel(true);
      }
 else       if (editType == EDIT_TYPE_ACCOUNT_TYPE) {
        avAccount.setAccountTypeId(typeID);
      }
 else       if (editType == EDIT_TYPE_ACCOUNT_MONEY) {
        avAccount.setAccountMoney(money);
      }
 else       if (editType == EDIT_TYPE_ACCOUNT_REMARK) {
        avAccount.setAccountRemark(remark);
      }
 else       if (editType == EDIT_TYPE_ACCOUNT_NAME) {
        avAccount.setAccountName(accountName);
      }
 else       if (editType == EDIT_TYPE_ACCOUNT_COLOR) {
        avAccount.setAccountColor(remark);
      }
      avAccount.saveInBackground(new SaveCallback(){
        @Override public void done(        AVException e){
          getAvEx(e);
          if (e == null) {
            callback.doSth(true,null);
          }
 else {
            callback.doSth(false,null);
          }
          sendEmptyMessage(handler,Constant.MSG_SUCCESS);
        }
      }
);
      return;
    }
    AVQuery<AVAccount> query=AVObject.getQuery(AVAccount.class);
    query.whereEqualTo(AVAccount.ACCOUNT_ID,accountID);
    query.whereEqualTo(AVAccount.USER,MyAVUser.getCurrentUser());
    query.findInBackground(new FindCallback<AVAccount>(){
      @Override public void done(      List<AVAccount> list,      AVException e){
        if (e == null) {
          AVAccount avAccount=null;
          if (list.size() > 0) {
            avAccount=list.get(0);
          }
 else {
            Account account=accountLocalDao.getAccountByID(accountID,_context);
            avAccount=DataConvertUtil.convertAccount2AVAccount(account);
          }
          if (editType == EDIT_TYPE_DEL) {
            avAccount.setAccountIsDel(true);
          }
 else           if (editType == EDIT_TYPE_ACCOUNT_TYPE) {
            avAccount.setAccountTypeId(typeID);
          }
 else           if (editType == EDIT_TYPE_ACCOUNT_MONEY) {
            avAccount.setAccountMoney(money);
          }
 else           if (editType == EDIT_TYPE_ACCOUNT_REMARK) {
            avAccount.setAccountRemark(remark);
          }
 else           if (editType == EDIT_TYPE_ACCOUNT_NAME) {
            avAccount.setAccountName(accountName);
          }
 else           if (editType == EDIT_TYPE_ACCOUNT_COLOR) {
            avAccount.setAccountColor(remark);
          }
          final String objId=avAccount.getObjectId();
          avAccount.saveInBackground(new SaveCallback(){
            @Override public void done(            AVException e){
              if (e == null) {
                callback.doSth(true,objId);
              }
 else {
                getAvEx(e);
                callback.doSth(false,objId);
              }
              sendEmptyMessage(handler,Constant.MSG_SUCCESS);
            }
          }
);
        }
 else {
          getAvEx(e);
          callback.doSth(false,null);
          sendEmptyMessage(handler,Constant.MSG_SUCCESS);
        }
      }
    }
);
  }
 else {
    callback.doSth(false,null);
    sendEmptyMessage(handler,Constant.MSG_SUCCESS);
  }
}"
39362,"private void setCurRecordType(int index,RecordType recordType){
  if (recordType == null) {
    mCurRecordType=recordTypes.get(index);
  }
 else {
    mCurRecordType=recordType;
  }
  Account account=accountManager.getSuitAccount(mCurRecordType.getRecordTypeID());
  newRecord.setAccountID(account.getAccountID());
  mAccountTv.setText(account.getAccountName());
  if (recordTypes != null) {
    tvTypeTitle.setText(mCurRecordType.getRecordDesc());
    typeIcon.setImageResource(IconTypeUtil.getTypeIcon(mCurRecordType.getRecordIcon()));
  }
}","private void setCurRecordType(int index,RecordType recordType){
  if (recordType == null) {
    mCurRecordType=recordTypes.get(index);
  }
 else {
    mCurRecordType=recordType;
  }
  if (recordType == null) {
    Account account=accountManager.getSuitAccount(mCurRecordType.getRecordTypeID());
    newRecord.setAccountID(account.getAccountID());
    mAccountTv.setText(account.getAccountName());
  }
  if (recordTypes != null) {
    tvTypeTitle.setText(mCurRecordType.getRecordDesc());
    typeIcon.setImageResource(IconTypeUtil.getTypeIcon(mCurRecordType.getRecordIcon()));
  }
}"
39363,"@Override protected void initWidget(){
  mTvAccountName=(TextView)findViewById(R.id.account_name);
  mTvAccountTypeDesc=(TextView)findViewById(R.id.account_type_desc);
  mTvAccountRemark=(TextView)findViewById(R.id.account_remark);
  mIgAccountType=(ImageView)findViewById(R.id.account_type_icon);
  mTvAccountMoney=(TextView)findViewById(R.id.account_money);
  getSupportActionBar().setTitle(mAccountID == 0 ? getResources().getString(R.string.create_account) : getResources().getString(R.string.edit_account));
  if (mAccountID > 0) {
    AccountDetailDO account=accountManager.getAccountByID(mAccountID);
    accountName=account.getAccountName();
    accountRemark=account.getAccountRemark();
    mTvAccountName.setText(accountName);
    accountTypeId=account.getAccountTypeID();
    mTvAccountTypeDesc.setText(account.getAccountDesc());
    mIgAccountType.setImageResource(IconTypeUtil.getAccountIcon(account.getAccountIcon()));
    if (!TextUtils.isEmpty(account.getAccountColor())) {
      mIgAccountType.setColorFilter(Integer.parseInt(account.getAccountColor()));
    }
    mTvAccountRemark.setText(accountRemark);
    accountMoney=account.getAccountMoney();
    mTvAccountMoney.setText(String.format(getResources().getString(R.string.money_format),accountMoney));
  }
  mSubmitButton=(FloatingActionButton)findViewById(R.id.submit);
  mSubmitButton.setImageResource(mAccountID > 0 ? R.drawable.ic_delete_white : R.drawable.ic_done_white);
  mSubmitButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mSubmitButton.setClickable(false);
      if (mAccountID > 0) {
        final MaterialDialog materialDialog=new MaterialDialog(CreateOrEditAccountActivity.this);
        materialDialog.setTitle(getResources().getString(R.string.delete_account)).setMessage(""String_Node_Str"").setPositiveButton(getResources().getString(R.string.ok),new View.OnClickListener(){
          @Override public void onClick(          View v){
            if (accountCount == 1) {
              materialDialog.dismiss();
              SnackBarUtil.showSnackInfo(mSubmitButton,CreateOrEditAccountActivity.this,getResources().getString(R.string.retain_at_least_one_account));
              return;
            }
            accountManager.deleteAccountByID(mAccountID,new Handler(){
              @Override public void handleMessage(              Message msg){
                super.handleMessage(msg);
                if (msg.what == Constant.MSG_SUCCESS) {
                  setResult(RESULT_OK);
                  finish();
                }
              }
            }
);
          }
        }
).setNegativeButton(getResources().getString(R.string.cancel),new View.OnClickListener(){
          @Override public void onClick(          View v){
            materialDialog.dismiss();
          }
        }
).show();
      }
 else {
        if (TextUtils.isEmpty(accountName)) {
          SnackBarUtil.showSnackInfo(v,CreateOrEditAccountActivity.this,getResources().getString(R.string.enter_account_name));
          return;
        }
        accountManager.createNewAccount(accountName,accountMoney,accountTypeId,accountRemark,accountColor,new Handler(){
          @Override public void handleMessage(          Message msg){
            super.handleMessage(msg);
            if (msg.what == Constant.MSG_ERROR) {
            }
 else {
              setResult(RESULT_OK);
              finish();
            }
          }
        }
);
      }
    }
  }
);
}","@Override protected void initWidget(){
  mTvAccountName=(TextView)findViewById(R.id.account_name);
  mTvAccountTypeDesc=(TextView)findViewById(R.id.account_type_desc);
  mTvAccountRemark=(TextView)findViewById(R.id.account_remark);
  mIgAccountType=(ImageView)findViewById(R.id.account_type_icon);
  mTvAccountMoney=(TextView)findViewById(R.id.account_money);
  getSupportActionBar().setTitle(mAccountID == 0 ? getResources().getString(R.string.create_account) : getResources().getString(R.string.edit_account));
  if (mAccountID > 0) {
    AccountDetailDO account=accountManager.getAccountByID(mAccountID);
    accountName=account.getAccountName();
    accountRemark=account.getAccountRemark();
    mTvAccountName.setText(accountName);
    accountTypeId=account.getAccountTypeID();
    mTvAccountTypeDesc.setText(account.getAccountDesc());
    mIgAccountType.setImageResource(IconTypeUtil.getAccountIcon(account.getAccountIcon()));
    if (!TextUtils.isEmpty(account.getAccountColor())) {
      mIgAccountType.setColorFilter(Integer.parseInt(account.getAccountColor()));
    }
    mTvAccountRemark.setText(accountRemark);
    accountMoney=account.getAccountMoney();
    mTvAccountMoney.setText(String.format(getResources().getString(R.string.money_format),accountMoney));
  }
 else {
    accountManager.getAccountTypeByID(accountTypeId,new Handler(){
      @Override public void handleMessage(      Message msg){
        super.handleMessage(msg);
        if (msg.what == Constant.MSG_ERROR)         return;
        AccountType accountType=(AccountType)msg.obj;
        mTvAccountTypeDesc.setText(accountType.getAccountDesc());
        mIgAccountType.setImageResource(IconTypeUtil.getAccountIcon(accountType.getAccountIcon()));
      }
    }
);
  }
  mSubmitButton=(FloatingActionButton)findViewById(R.id.submit);
  mSubmitButton.setImageResource(mAccountID > 0 ? R.drawable.ic_delete_white : R.drawable.ic_done_white);
  mSubmitButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mSubmitButton.setClickable(false);
      if (mAccountID > 0) {
        final MaterialDialog materialDialog=new MaterialDialog(CreateOrEditAccountActivity.this);
        materialDialog.setTitle(getResources().getString(R.string.delete_account)).setMessage(""String_Node_Str"").setPositiveButton(getResources().getString(R.string.ok),new View.OnClickListener(){
          @Override public void onClick(          View v){
            if (accountCount == 1) {
              materialDialog.dismiss();
              SnackBarUtil.showSnackInfo(mSubmitButton,CreateOrEditAccountActivity.this,getResources().getString(R.string.retain_at_least_one_account));
              return;
            }
            accountManager.deleteAccountByID(mAccountID,new Handler(){
              @Override public void handleMessage(              Message msg){
                super.handleMessage(msg);
                if (msg.what == Constant.MSG_SUCCESS) {
                  setResult(RESULT_OK);
                  finish();
                }
              }
            }
);
          }
        }
).setNegativeButton(getResources().getString(R.string.cancel),new View.OnClickListener(){
          @Override public void onClick(          View v){
            materialDialog.dismiss();
          }
        }
).show();
      }
 else {
        if (TextUtils.isEmpty(accountName)) {
          SnackBarUtil.showSnackInfo(v,CreateOrEditAccountActivity.this,getResources().getString(R.string.enter_account_name));
          return;
        }
        accountManager.createNewAccount(accountName,accountMoney,accountTypeId,accountRemark,accountColor,new Handler(){
          @Override public void handleMessage(          Message msg){
            super.handleMessage(msg);
            if (msg.what == Constant.MSG_ERROR) {
            }
 else {
              setResult(RESULT_OK);
              finish();
            }
          }
        }
);
      }
    }
  }
);
}"
39364,"@Override public View getView(final int position,View convertView,final ViewGroup parent){
  ViewHolder holder=null;
  if (convertView == null) {
    holder=new ViewHolder();
    convertView=mInflater.inflate(R.layout.record_item,null);
    holder.icon=(ImageView)convertView.findViewById(R.id.record_icon);
    holder.inLy=convertView.findViewById(R.id.shouru_ly);
    holder.outLY=convertView.findViewById(R.id.zhichu_ly);
    holder.outTv=(TextView)convertView.findViewById(R.id.out_tv);
    holder.inTv=(TextView)convertView.findViewById(R.id.in_tv);
    holder.outRemarkTv=(TextView)convertView.findViewById(R.id.out_remark_tv);
    holder.inRemarkTv=(TextView)convertView.findViewById(R.id.in_remark_tv);
    holder.recordDateTv=(TextView)convertView.findViewById(R.id.record_date);
    holder.delV=convertView.findViewById(R.id.icon_del);
    holder.editV=convertView.findViewById(R.id.icon_edit);
    holder.lineV=convertView.findViewById(R.id.record_line);
    holder.myRoundColorView=(MyRoundColorView)convertView.findViewById(R.id.myRound);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  final RecordDetailDO recordDetailDO=recordDetailDOs.get(position);
  if (recordDetailDO.isDayFirstDay()) {
    recordDetailDOMap.put(recordDetailDO.getRecordDate(),recordDetailDO);
  }
  int color=mContext.getResources().getColor(ThemeUtil.getTheme(mContext).getMainColorID());
  holder.lineV.setBackgroundColor(color);
  holder.myRoundColorView.setMyRoundColor(color);
  holder.inTv.setTextColor(color);
  holder.outTv.setTextColor(color);
  holder.inRemarkTv.setTextColor(color);
  holder.outRemarkTv.setTextColor(color);
  holder.inLy.setVisibility(recordDetailDO.getRecordMoney() > 0 || (recordDetailDO.isDayFirstDay() && recordDetailDO.getTodayAllInMoney() > 0) || (recordDetailDO.isMonthFirstDay()) ? View.VISIBLE : View.INVISIBLE);
  holder.outLY.setVisibility(recordDetailDO.getRecordMoney() < 0 || (recordDetailDO.isDayFirstDay() && recordDetailDO.getTodayAllOutMoney() < 0) ? View.VISIBLE : View.INVISIBLE);
  holder.icon.setVisibility(recordDetailDO.isDayFirstDay() || recordDetailDO.isMonthFirstDay() ? View.INVISIBLE : View.VISIBLE);
  holder.recordDateTv.setVisibility(recordDetailDO.isDayFirstDay() || recordDetailDO.isMonthFirstDay() ? View.VISIBLE : View.INVISIBLE);
  holder.delV.setVisibility(lastSelOpt == position ? View.VISIBLE : View.INVISIBLE);
  holder.editV.setVisibility(lastSelOpt == position ? View.VISIBLE : View.INVISIBLE);
  if (recordDetailDO.getRecordMoney() < 0) {
    holder.outTv.setText(recordDetailDO.getRecordDesc() + ""String_Node_Str"" + String.format(mContext.getResources().getString(R.string.record_money_format),Math.abs(recordDetailDO.getRecordMoney())));
    holder.outRemarkTv.setText(recordDetailDO.getRemark());
  }
  if (recordDetailDO.getRecordMoney() > 0) {
    holder.inTv.setText(recordDetailDO.getRecordDesc() + ""String_Node_Str"" + String.format(mContext.getResources().getString(R.string.record_money_format),Math.abs(recordDetailDO.getRecordMoney())));
    holder.inRemarkTv.setText(""String_Node_Str"");
  }
  if (recordDetailDO.isMonthFirstDay()) {
    DateFormat format=new SimpleDateFormat(""String_Node_Str"");
    holder.inTv.setText(DateTimeUtil.isThisYear(recordDetailDO.getRecordDate()) ? ""String_Node_Str"" : format.format(recordDetailDO.getRecordDate()));
  }
 else {
    if (recordDetailDO.getTodayAllInMoney() >= 0 && recordDetailDO.isDayFirstDay()) {
      holder.inTv.setText(String.format(mContext.getResources().getString(R.string.record_money_format),Math.abs(recordDetailDO.getTodayAllInMoney())) + ""String_Node_Str"");
      holder.outRemarkTv.setText(""String_Node_Str"");
    }
  }
  if (recordDetailDO.getTodayAllOutMoney() <= 0 && recordDetailDO.isDayFirstDay()) {
    holder.outTv.setText(""String_Node_Str"" + String.format(mContext.getResources().getString(R.string.record_money_format),Math.abs(recordDetailDO.getTodayAllOutMoney())));
    holder.inRemarkTv.setText(""String_Node_Str"");
  }
  if (recordDetailDO.isMonthFirstDay()) {
    DateFormat format=new SimpleDateFormat(""String_Node_Str"");
    holder.recordDateTv.setText(format.format(recordDetailDO.getRecordDate()));
  }
 else {
    if (DateTimeUtil.isToday(recordDetailDO.getRecordDate())) {
      holder.recordDateTv.setText(""String_Node_Str"");
    }
 else {
      DateFormat format=new SimpleDateFormat(""String_Node_Str"");
      holder.recordDateTv.setText(format.format(recordDetailDO.getRecordDate()));
    }
  }
  holder.icon.setImageResource(IconTypeUtil.getTypeIcon(recordDetailDO.getIconId()));
  final ViewHolder finalHolder=holder;
  if (!recordDetailDO.isDayFirstDay() && !recordDetailDO.isMonthFirstDay()) {
    holder.icon.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (lastSelOpt != position) {
          lastSelOpt=position;
          notifyDataSetChanged();
          YoYo.with(Techniques.BounceInRight).duration(200).playOn(finalHolder.delV);
          YoYo.with(Techniques.BounceInLeft).duration(200).playOn(finalHolder.editV);
        }
 else {
          resetOptStatus();
        }
      }
    }
);
  }
  holder.delV.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      final MaterialDialog materialDialog=new MaterialDialog(mContext);
      materialDialog.setTitle(mContext.getResources().getString(R.string.delete_record)).setMessage(""String_Node_Str"").setPositiveButton(mContext.getResources().getString(R.string.ok),new View.OnClickListener(){
        @Override public void onClick(        View v){
          final Record record=recordLocalDAO.getRecordById(mContext,recordDetailDO.getRecordID());
          record.setIsDel(true);
          recordManager.updateOldRecord(record,new Handler(){
            @Override public void handleMessage(            Message msg){
              super.handleMessage(msg);
              accountManager.updateAccountMoney(record.getAccountID(),-record.getRecordMoney(),new Handler(){
                @Override public void handleMessage(                Message msg){
                  super.handleMessage(msg);
                  ((MainActivity)mContext).getReloadAccountCallBack().reload(true);
                  ((MainActivity)mContext).getReloadAnalysisCallBack().reload(true);
                }
              }
);
            }
          }
);
          RecordDetailDO todayRecordDetailDO=recordDetailDOMap.get(recordDetailDO.getRecordDate());
          if (recordDetailDO.getRecordMoney() < 0) {
            todayRecordDetailDO.setTodayAllOutMoney(todayRecordDetailDO.getTodayAllOutMoney() - recordDetailDO.getRecordMoney());
          }
 else {
            todayRecordDetailDO.setTodayAllInMoney(todayRecordDetailDO.getTodayAllInMoney() - recordDetailDO.getRecordMoney());
          }
          if (recordDetailDOs.get(position - 1).isDayFirstDay() && (position == recordDetailDOs.size() - 1 || recordDetailDOs.get(position + 1).isDayFirstDay() || recordDetailDOs.get(position + 1).isMonthFirstDay())) {
            if (recordDetailDOs.get(position - 2).isMonthFirstDay() && (position == recordDetailDOs.size() - 1 || recordDetailDOs.get(position + 1).isMonthFirstDay())) {
              recordDetailDOs.remove(position - 2);
              recordDetailDOs.remove(position - 2);
              recordDetailDOs.remove(position - 2);
            }
 else {
              recordDetailDOs.remove(position - 1);
              recordDetailDOs.remove(position - 1);
            }
          }
 else {
            recordDetailDOs.remove(position);
          }
          if (recordDetailDOs.size() == 0) {
            recordFrg.resetFoot();
          }
          resetOptStatus();
          materialDialog.dismiss();
        }
      }
).setNegativeButton(mContext.getResources().getString(R.string.cancel),new View.OnClickListener(){
        @Override public void onClick(        View v){
          materialDialog.dismiss();
        }
      }
).show();
    }
  }
);
  holder.editV.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(mContext,CreateOrEditRecordActivity.class);
      intent.putExtra(IntentConstant.OLD_RECORD,recordLocalDAO.getRecordById(mContext,recordDetailDO.getRecordID()));
      resetOptStatus();
      ((MainActivity)mContext).startActivityForResult(intent,MainActivity.REQUEST_RECORD);
    }
  }
);
  convertView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      resetOptStatus();
    }
  }
);
  return convertView;
}","@Override public View getView(final int position,View convertView,final ViewGroup parent){
  ViewHolder holder=null;
  if (convertView == null) {
    holder=new ViewHolder();
    convertView=mInflater.inflate(R.layout.record_item,null);
    holder.icon=(ImageView)convertView.findViewById(R.id.record_icon);
    holder.inLy=convertView.findViewById(R.id.shouru_ly);
    holder.outLY=convertView.findViewById(R.id.zhichu_ly);
    holder.outTv=(TextView)convertView.findViewById(R.id.out_tv);
    holder.inTv=(TextView)convertView.findViewById(R.id.in_tv);
    holder.outRemarkTv=(TextView)convertView.findViewById(R.id.out_remark_tv);
    holder.inRemarkTv=(TextView)convertView.findViewById(R.id.in_remark_tv);
    holder.recordDateTv=(TextView)convertView.findViewById(R.id.record_date);
    holder.delV=convertView.findViewById(R.id.icon_del);
    holder.editV=convertView.findViewById(R.id.icon_edit);
    holder.lineV=convertView.findViewById(R.id.record_line);
    holder.myRoundColorView=(MyRoundColorView)convertView.findViewById(R.id.myRound);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  final RecordDetailDO recordDetailDO=recordDetailDOs.get(position);
  if (recordDetailDO.isDayFirstDay()) {
    recordDetailDOMap.put(recordDetailDO.getRecordDate(),recordDetailDO);
  }
  int color=mContext.getResources().getColor(ThemeUtil.getTheme(mContext).getMainColorID());
  holder.lineV.setBackgroundColor(color);
  holder.myRoundColorView.setMyRoundColor(color);
  holder.inTv.setTextColor(color);
  holder.outTv.setTextColor(color);
  holder.inRemarkTv.setTextColor(color);
  holder.outRemarkTv.setTextColor(color);
  holder.inLy.setVisibility(recordDetailDO.getRecordMoney() > 0 || (recordDetailDO.isDayFirstDay() && recordDetailDO.getTodayAllInMoney() > 0) || (recordDetailDO.isMonthFirstDay()) ? View.VISIBLE : View.INVISIBLE);
  holder.outLY.setVisibility(recordDetailDO.getRecordMoney() < 0 || (recordDetailDO.isDayFirstDay() && recordDetailDO.getTodayAllOutMoney() < 0) ? View.VISIBLE : View.INVISIBLE);
  holder.icon.setVisibility(recordDetailDO.isDayFirstDay() || recordDetailDO.isMonthFirstDay() ? View.INVISIBLE : View.VISIBLE);
  holder.recordDateTv.setVisibility(recordDetailDO.isDayFirstDay() || recordDetailDO.isMonthFirstDay() ? View.VISIBLE : View.INVISIBLE);
  holder.delV.setVisibility(lastSelOpt == position ? View.VISIBLE : View.INVISIBLE);
  holder.editV.setVisibility(lastSelOpt == position ? View.VISIBLE : View.INVISIBLE);
  if (recordDetailDO.getRecordMoney() < 0) {
    holder.outTv.setText(recordDetailDO.getRecordDesc() + ""String_Node_Str"" + String.format(mContext.getResources().getString(R.string.record_money_format),Math.abs(recordDetailDO.getRecordMoney())));
    holder.outRemarkTv.setText(recordDetailDO.getRemark());
  }
  if (recordDetailDO.getRecordMoney() > 0) {
    holder.inTv.setText(recordDetailDO.getRecordDesc() + ""String_Node_Str"" + String.format(mContext.getResources().getString(R.string.record_money_format),Math.abs(recordDetailDO.getRecordMoney())));
    holder.inRemarkTv.setText(recordDetailDO.getRemark());
  }
  if (recordDetailDO.isMonthFirstDay()) {
    DateFormat format=new SimpleDateFormat(""String_Node_Str"");
    holder.inTv.setText(DateTimeUtil.isThisYear(recordDetailDO.getRecordDate()) ? ""String_Node_Str"" : format.format(recordDetailDO.getRecordDate()));
  }
 else {
    if (recordDetailDO.getTodayAllInMoney() >= 0 && recordDetailDO.isDayFirstDay()) {
      holder.inTv.setText(String.format(mContext.getResources().getString(R.string.record_money_format),Math.abs(recordDetailDO.getTodayAllInMoney())) + ""String_Node_Str"");
      holder.outRemarkTv.setText(""String_Node_Str"");
    }
  }
  if (recordDetailDO.getTodayAllOutMoney() <= 0 && recordDetailDO.isDayFirstDay()) {
    holder.outTv.setText(""String_Node_Str"" + String.format(mContext.getResources().getString(R.string.record_money_format),Math.abs(recordDetailDO.getTodayAllOutMoney())));
    holder.inRemarkTv.setText(""String_Node_Str"");
  }
  if (recordDetailDO.isMonthFirstDay()) {
    DateFormat format=new SimpleDateFormat(""String_Node_Str"");
    holder.recordDateTv.setText(format.format(recordDetailDO.getRecordDate()));
  }
 else {
    if (DateTimeUtil.isToday(recordDetailDO.getRecordDate())) {
      holder.recordDateTv.setText(""String_Node_Str"");
    }
 else {
      DateFormat format=new SimpleDateFormat(""String_Node_Str"");
      holder.recordDateTv.setText(format.format(recordDetailDO.getRecordDate()));
    }
  }
  holder.icon.setImageResource(IconTypeUtil.getTypeIcon(recordDetailDO.getIconId()));
  final ViewHolder finalHolder=holder;
  if (!recordDetailDO.isDayFirstDay() && !recordDetailDO.isMonthFirstDay()) {
    holder.icon.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (lastSelOpt != position) {
          lastSelOpt=position;
          notifyDataSetChanged();
          YoYo.with(Techniques.BounceInRight).duration(200).playOn(finalHolder.delV);
          YoYo.with(Techniques.BounceInLeft).duration(200).playOn(finalHolder.editV);
        }
 else {
          resetOptStatus();
        }
      }
    }
);
  }
  holder.delV.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      final MaterialDialog materialDialog=new MaterialDialog(mContext);
      materialDialog.setTitle(mContext.getResources().getString(R.string.delete_record)).setMessage(""String_Node_Str"").setPositiveButton(mContext.getResources().getString(R.string.ok),new View.OnClickListener(){
        @Override public void onClick(        View v){
          final Record record=recordLocalDAO.getRecordById(mContext,recordDetailDO.getRecordID());
          record.setIsDel(true);
          recordManager.updateOldRecord(record,new Handler(){
            @Override public void handleMessage(            Message msg){
              super.handleMessage(msg);
              accountManager.updateAccountMoney(record.getAccountID(),-record.getRecordMoney(),new Handler(){
                @Override public void handleMessage(                Message msg){
                  super.handleMessage(msg);
                  ((MainActivity)mContext).getReloadAccountCallBack().reload(true);
                  ((MainActivity)mContext).getReloadAnalysisCallBack().reload(true);
                }
              }
);
            }
          }
);
          RecordDetailDO todayRecordDetailDO=recordDetailDOMap.get(recordDetailDO.getRecordDate());
          if (recordDetailDO.getRecordMoney() < 0) {
            todayRecordDetailDO.setTodayAllOutMoney(todayRecordDetailDO.getTodayAllOutMoney() - recordDetailDO.getRecordMoney());
          }
 else {
            todayRecordDetailDO.setTodayAllInMoney(todayRecordDetailDO.getTodayAllInMoney() - recordDetailDO.getRecordMoney());
          }
          if (recordDetailDOs.get(position - 1).isDayFirstDay() && (position == recordDetailDOs.size() - 1 || recordDetailDOs.get(position + 1).isDayFirstDay() || recordDetailDOs.get(position + 1).isMonthFirstDay())) {
            if (recordDetailDOs.get(position - 2).isMonthFirstDay() && (position == recordDetailDOs.size() - 1 || recordDetailDOs.get(position + 1).isMonthFirstDay())) {
              recordDetailDOs.remove(position - 2);
              recordDetailDOs.remove(position - 2);
              recordDetailDOs.remove(position - 2);
            }
 else {
              recordDetailDOs.remove(position - 1);
              recordDetailDOs.remove(position - 1);
            }
          }
 else {
            recordDetailDOs.remove(position);
          }
          if (recordDetailDOs.size() == 0) {
            recordFrg.resetFoot();
          }
          resetOptStatus();
          materialDialog.dismiss();
        }
      }
).setNegativeButton(mContext.getResources().getString(R.string.cancel),new View.OnClickListener(){
        @Override public void onClick(        View v){
          materialDialog.dismiss();
        }
      }
).show();
    }
  }
);
  holder.editV.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(mContext,CreateOrEditRecordActivity.class);
      intent.putExtra(IntentConstant.OLD_RECORD,recordLocalDAO.getRecordById(mContext,recordDetailDO.getRecordID()));
      resetOptStatus();
      ((MainActivity)mContext).startActivityForResult(intent,MainActivity.REQUEST_RECORD);
    }
  }
);
  convertView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      resetOptStatus();
    }
  }
);
  return convertView;
}"
39365,"@Override protected void initWidget(){
  mPagerSlidingTabStrip=(PagerSlidingTabStrip)findViewById(R.id.tabs);
  mViewPager=(ViewPager)findViewById(R.id.pager);
  mToolbar=(Toolbar)findViewById(R.id.toolbar);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer);
  mLvOptItems=(ListView)findViewById(R.id.opt_items);
  mLayoutBackGround=(RelativeLayout)findViewById(R.id.account_background);
  headImg=(CircleImageView)findViewById(R.id.profile_image);
  mLoadingBack=findViewById(R.id.loading_back);
  mLoadingBack.setBackgroundResource(getMainTheme().getMainColorID());
  mLoadingBack.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (loading)       return true;
 else       return false;
    }
  }
);
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
        Animator animator=ViewAnimationUtils.createCircularReveal(mLoadingBack,mLoadingBack.getWidth() / 2,mLoadingBack.getHeight() / 2,mLoadingBack.getWidth(),0);
        animator.setDuration(500);
        animator.setInterpolator(new AccelerateDecelerateInterpolator());
        animator.start();
        animator.addListener(new Animator.AnimatorListener(){
          @Override public void onAnimationStart(          Animator animation){
          }
          @Override public void onAnimationEnd(          Animator animation){
            mLoadingBack.setVisibility(View.GONE);
          }
          @Override public void onAnimationCancel(          Animator animation){
          }
          @Override public void onAnimationRepeat(          Animator animation){
          }
        }
);
      }
 else       YoYo.with(Techniques.SlideOutUp).playOn(mLoadingBack);
      loading=false;
    }
  }
,1500);
  String userName=userManager.getCurUserName();
  userNameTv=(TextView)findViewById(R.id.user_tv);
  userNameTv.setText(TextUtils.isEmpty(userName) ? ""String_Node_Str"" : userName);
  if (!TextUtils.isEmpty(userName)) {
    userManager.getMe(new Handler(){
      @Override public void handleMessage(      Message msg){
        super.handleMessage(msg);
        if (msg.what == Constant.MSG_SUCCESS) {
          User user=(User)msg.obj;
          Glide.with(MainActivity.this.getApplicationContext()).load(user.getHeadImage()).error(R.mipmap.suda).into(headImg);
        }
      }
    }
);
  }
  mLayoutBackGround.setBackgroundResource(ThemeUtil.getTheme(this).getMainColorID());
  mToolbar.setTitle(getResources().getString(R.string.app_name));
  mToolbar.setTitleTextColor(Color.WHITE);
  setSupportActionBar(mToolbar);
  setDrawerLayout();
  initViewPager();
}","@Override protected void initWidget(){
  mPagerSlidingTabStrip=(PagerSlidingTabStrip)findViewById(R.id.tabs);
  mViewPager=(ViewPager)findViewById(R.id.pager);
  mToolbar=(Toolbar)findViewById(R.id.toolbar);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer);
  mLvOptItems=(ListView)findViewById(R.id.opt_items);
  mLayoutBackGround=(RelativeLayout)findViewById(R.id.account_background);
  headImg=(CircleImageView)findViewById(R.id.profile_image);
  mLoadingBack=findViewById(R.id.loading_back);
  mLoadingBack.setBackgroundResource(getMainTheme().getMainColorID());
  mLoadingBack.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (loading)       return true;
 else       return false;
    }
  }
);
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
        try {
          Animator animator=ViewAnimationUtils.createCircularReveal(mLoadingBack,mLoadingBack.getWidth() / 2,mLoadingBack.getHeight() / 2,mLoadingBack.getWidth(),0);
          animator.setDuration(500);
          animator.setInterpolator(new AccelerateDecelerateInterpolator());
          animator.addListener(new Animator.AnimatorListener(){
            @Override public void onAnimationStart(            Animator animation){
            }
            @Override public void onAnimationEnd(            Animator animation){
              mLoadingBack.setVisibility(View.GONE);
            }
            @Override public void onAnimationCancel(            Animator animation){
            }
            @Override public void onAnimationRepeat(            Animator animation){
            }
          }
);
          animator.start();
        }
 catch (        Exception e) {
        }
      }
 else       YoYo.with(Techniques.SlideOutUp).playOn(mLoadingBack);
      loading=false;
    }
  }
,1500);
  String userName=userManager.getCurUserName();
  userNameTv=(TextView)findViewById(R.id.user_tv);
  userNameTv.setText(TextUtils.isEmpty(userName) ? ""String_Node_Str"" : userName);
  if (!TextUtils.isEmpty(userName)) {
    userManager.getMe(new Handler(){
      @Override public void handleMessage(      Message msg){
        super.handleMessage(msg);
        if (msg.what == Constant.MSG_SUCCESS) {
          User user=(User)msg.obj;
          Glide.with(MainActivity.this.getApplicationContext()).load(user.getHeadImage()).error(R.mipmap.suda).into(headImg);
        }
      }
    }
);
  }
  mLayoutBackGround.setBackgroundResource(ThemeUtil.getTheme(this).getMainColorID());
  mToolbar.setTitle(getResources().getString(R.string.app_name));
  mToolbar.setTitleTextColor(Color.WHITE);
  setSupportActionBar(mToolbar);
  setDrawerLayout();
  initViewPager();
}"
39366,"/** 
 * 创建新新记录类型
 */
public void createNewRecordType(final RecordType recordType,final Handler handler){
  recordType.setIndex(recordTypeDao.getMaxIndexByRecordType(_context,recordType.getRecordType()));
  recordType.setSexProp(Constant.Sex.ALL.getId());
  recordType.setOccupation(Constant.Occupation.ALL.getId());
  recordType.setSysType(false);
  if (canSync()) {
    final AVRecordType avRecordType=DataConvertUtil.convertRecordType2AVRecordType(recordType);
    avRecordType.setRecordTypeIsDel(false);
    avRecordType.saveInBackground(new SaveCallback(){
      @Override public void done(      AVException e){
        getAvEx(e);
        if (e == null) {
          recordType.setSyncStatus(true);
        }
 else {
          recordType.setSyncStatus(false);
        }
        recordTypeDao.createNewRecordType(_context,recordType);
        updateRecordTypeIndex(handler);
      }
    }
);
  }
 else {
    recordType.setSyncStatus(false);
    recordTypeDao.createNewRecordType(_context,recordType);
    handler.sendEmptyMessage(Constant.MSG_SUCCESS);
  }
}","/** 
 * 创建新新记录类型
 */
public void createNewRecordType(final RecordType recordType,final Handler handler){
  if (recordTypeDao.haveCreate(_context,recordType.getRecordDesc(),recordType.getRecordType())) {
    handler.sendEmptyMessage(Constant.MSG_ERROR);
    return;
  }
  recordType.setIndex(recordTypeDao.getMaxIndexByRecordType(_context,recordType.getRecordType()));
  recordType.setSexProp(Constant.Sex.ALL.getId());
  recordType.setOccupation(Constant.Occupation.ALL.getId());
  recordType.setSysType(false);
  if (canSync()) {
    final AVRecordType avRecordType=DataConvertUtil.convertRecordType2AVRecordType(recordType);
    avRecordType.setRecordTypeIsDel(false);
    avRecordType.saveInBackground(new SaveCallback(){
      @Override public void done(      AVException e){
        getAvEx(e);
        if (e == null) {
          recordType.setSyncStatus(true);
        }
 else {
          recordType.setSyncStatus(false);
        }
        recordTypeDao.createNewRecordType(_context,recordType);
        updateRecordTypeIndex(handler);
      }
    }
);
  }
 else {
    recordType.setSyncStatus(false);
    recordTypeDao.createNewRecordType(_context,recordType);
    handler.sendEmptyMessage(Constant.MSG_SUCCESS);
  }
}"
39367,"private void addNewRecord(View view){
  String recordName=mEtRecordName.getText().toString();
  if (TextUtils.isEmpty(recordName)) {
    SnackBarUtil.showSnackInfo(view,this,getString(R.string.please_enter_record_type_name));
    return;
  }
  RecordType recordType=new RecordType();
  recordType.setRecordType(mRecordType);
  recordType.setRecordTypeID(System.currentTimeMillis());
  recordType.setRecordIcon(mCurrentIcon);
  recordType.setRecordDesc(recordName);
  recordType.setIsDel(false);
  recordManager.createNewRecordType(recordType,new Handler(){
    @Override public void handleMessage(    Message msg){
      super.handleMessage(msg);
      setResult(RESULT_OK);
      finish();
    }
  }
);
}","private void addNewRecord(final View view){
  String recordName=mEtRecordName.getText().toString();
  if (TextUtils.isEmpty(recordName)) {
    SnackBarUtil.showSnackInfo(view,this,getString(R.string.please_enter_record_type_name));
    return;
  }
  recordName=recordName.trim();
  RecordType recordType=new RecordType();
  recordType.setRecordType(mRecordType);
  recordType.setRecordTypeID(System.currentTimeMillis());
  recordType.setRecordIcon(mCurrentIcon);
  recordType.setRecordDesc(recordName);
  recordType.setIsDel(false);
  recordManager.createNewRecordType(recordType,new Handler(){
    @Override public void handleMessage(    Message msg){
      super.handleMessage(msg);
      if (msg.what == Constant.MSG_ERROR) {
        SnackBarUtil.showSnackInfo(view,CreateNewRecordTypeActivity.this,getString(R.string.please_not_enter_same_record_type_name));
      }
 else {
        setResult(RESULT_OK);
        finish();
      }
    }
  }
);
}"
39368,"@Override public void handleMessage(Message msg){
  super.handleMessage(msg);
  setResult(RESULT_OK);
  finish();
}","@Override public void handleMessage(Message msg){
  super.handleMessage(msg);
  if (msg.what == Constant.MSG_ERROR) {
    SnackBarUtil.showSnackInfo(view,CreateNewRecordTypeActivity.this,getString(R.string.please_not_enter_same_record_type_name));
  }
 else {
    setResult(RESULT_OK);
    finish();
  }
}"
39369,"@Override protected void initWidget(){
  findViewById(R.id.background).setBackgroundColor(getColor(this,getMainTheme().getMainColorID()));
}","@Override protected void initWidget(){
  ((TextView)findViewById(R.id.tv_version)).setText(""String_Node_Str"" + AppUtil.getAppInfo(this).versionName);
  findViewById(R.id.background).setBackgroundColor(getColor(this,getMainTheme().getMainColorID()));
}"
39370,"private void refreshLineChart(){
  final LineData data=new LineData(xLineVals1);
  mRecordManager.getYearRecordDetail(2016,new Handler(){
    @Override public void handleMessage(    Message msg){
      super.handleMessage(msg);
      List<LineChartDo> list=(List<LineChartDo>)msg.obj;
      data.addDataSet(getLineDateSet(list,""String_Node_Str"",getResources().getColor(R.color.accent_red),0));
      data.addDataSet(getLineDateSet(list,""String_Node_Str"",getResources().getColor(R.color.accent_green),1));
      data.addDataSet(getLineDateSet(list,""String_Node_Str"",getResources().getColor(R.color.accent_blue),2));
      mLineChart.setData(data);
      mLineChart.animateXY(500,500);
    }
  }
);
}","private void refreshLineChart(){
  final LineData data=new LineData(xLineVals1);
  Calendar calendar=Calendar.getInstance();
  mRecordManager.getYearRecordDetail(calendar.get(Calendar.YEAR),new Handler(){
    @Override public void handleMessage(    Message msg){
      super.handleMessage(msg);
      List<LineChartDo> list=(List<LineChartDo>)msg.obj;
      data.addDataSet(getLineDateSet(list,""String_Node_Str"",getResources().getColor(R.color.accent_red),0));
      data.addDataSet(getLineDateSet(list,""String_Node_Str"",getResources().getColor(R.color.accent_green),1));
      data.addDataSet(getLineDateSet(list,""String_Node_Str"",getResources().getColor(R.color.accent_blue),2));
      mLineChart.setData(data);
      mLineChart.animateXY(500,500);
    }
  }
);
}"
39371,"@Override public void onClick(View v){
  if (optDO.getId() == 4) {
    checkForUpdate();
  }
 else   if (optDO.getId() == 6) {
    context.finish();
  }
 else {
    if (MyAVUser.getCurrentUser() == null && (optDO.getAct() == MonthReportActivity.class || optDO.getAct() == UserLinkActivity.class)) {
      SnackBarUtil.showSnackInfo(v,context,""String_Node_Str"");
      return;
    }
    if (!NetworkUtil.checkNetwork(context)) {
      SnackBarUtil.showSnackInfo(v,context,""String_Node_Str"");
      return;
    }
    Intent intent=new Intent(context,optDO.getAct());
    if (optDO.getAct() == EditThemeActivity.class) {
      ((MainActivity)context).startActivityForResult(intent,MainActivity.REQUEST_EDIT_THEME);
    }
 else     context.startActivity(intent);
  }
}","@Override public void onClick(View v){
  if (optDO.getId() == 4) {
    checkForUpdate();
  }
 else   if (optDO.getId() == 6) {
    context.finish();
  }
 else {
    if (MyAVUser.getCurrentUser() == null && (optDO.getAct() == MonthReportActivity.class || optDO.getAct() == UserLinkActivity.class)) {
      SnackBarUtil.showSnackInfo(v,context,""String_Node_Str"");
      return;
    }
    if (!NetworkUtil.checkNetwork(context) && optDO.getAct() == UserLinkActivity.class) {
      SnackBarUtil.showSnackInfo(v,context,""String_Node_Str"");
      return;
    }
    Intent intent=new Intent(context,optDO.getAct());
    if (optDO.getAct() == EditThemeActivity.class) {
      ((MainActivity)context).startActivityForResult(intent,MainActivity.REQUEST_EDIT_THEME);
    }
 else     context.startActivity(intent);
  }
}"
39372,"@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder holder=null;
  if (convertView == null) {
    holder=new ViewHolder();
    convertView=View.inflate(context,R.layout.opt_item,null);
    holder.icon=(ImageView)convertView.findViewById(R.id.item_icon);
    holder.title=(TextView)convertView.findViewById(R.id.item_title);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    convertView.setBackgroundResource(R.drawable.ripple);
  }
  final OptDO optDO=optDOs.get(position);
  holder.icon.setImageResource(optDO.getIcon());
  holder.icon.setColorFilter(context.getResources().getColor(ThemeUtil.getTheme(context).getMainColorID()));
  holder.title.setText(optDO.getTltle());
  convertView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (optDO.getId() == 4) {
        checkForUpdate();
      }
 else       if (optDO.getId() == 6) {
        context.finish();
      }
 else {
        if (MyAVUser.getCurrentUser() == null && (optDO.getAct() == MonthReportActivity.class || optDO.getAct() == UserLinkActivity.class)) {
          SnackBarUtil.showSnackInfo(v,context,""String_Node_Str"");
          return;
        }
        if (!NetworkUtil.checkNetwork(context)) {
          SnackBarUtil.showSnackInfo(v,context,""String_Node_Str"");
          return;
        }
        Intent intent=new Intent(context,optDO.getAct());
        if (optDO.getAct() == EditThemeActivity.class) {
          ((MainActivity)context).startActivityForResult(intent,MainActivity.REQUEST_EDIT_THEME);
        }
 else         context.startActivity(intent);
      }
    }
  }
);
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder holder=null;
  if (convertView == null) {
    holder=new ViewHolder();
    convertView=View.inflate(context,R.layout.opt_item,null);
    holder.icon=(ImageView)convertView.findViewById(R.id.item_icon);
    holder.title=(TextView)convertView.findViewById(R.id.item_title);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    convertView.setBackgroundResource(R.drawable.ripple);
  }
  final OptDO optDO=optDOs.get(position);
  holder.icon.setImageResource(optDO.getIcon());
  holder.icon.setColorFilter(context.getResources().getColor(ThemeUtil.getTheme(context).getMainColorID()));
  holder.title.setText(optDO.getTltle());
  convertView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (optDO.getId() == 4) {
        checkForUpdate();
      }
 else       if (optDO.getId() == 6) {
        context.finish();
      }
 else {
        if (MyAVUser.getCurrentUser() == null && (optDO.getAct() == MonthReportActivity.class || optDO.getAct() == UserLinkActivity.class)) {
          SnackBarUtil.showSnackInfo(v,context,""String_Node_Str"");
          return;
        }
        if (!NetworkUtil.checkNetwork(context) && optDO.getAct() == UserLinkActivity.class) {
          SnackBarUtil.showSnackInfo(v,context,""String_Node_Str"");
          return;
        }
        Intent intent=new Intent(context,optDO.getAct());
        if (optDO.getAct() == EditThemeActivity.class) {
          ((MainActivity)context).startActivityForResult(intent,MainActivity.REQUEST_EDIT_THEME);
        }
 else         context.startActivity(intent);
      }
    }
  }
);
  return convertView;
}"
39373,"@Override public void onTextChanged(CharSequence s,int start,int before,int count){
  String tmp=s.toString();
  if (tmp.contains(""String_Node_Str"")) {
    String[] strs=tmp.split(""String_Node_Str"");
    if (strs.length > 1 && strs[1].length() > 2) {
      eEtInMoney.setText(tmp.substring(0,tmp.length() - 1));
      eEtInMoney.setSelection(tmp.length() - 1);
    }
  }
  if (!TextUtils.isEmpty(tmp)) {
    double money=Double.parseDouble(tmp);
    if (money > Double.parseDouble(mTvOutAccountLeftMoney.getText().toString())) {
      KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
      SnackBarUtil.showSnackInfo(floatingActionButton,AccountsTransferActivity.this,""String_Node_Str"");
      eEtInMoney.setText(mTvOutAccountLeftMoney.getText());
    }
  }
}","@Override public void onTextChanged(CharSequence s,int start,int before,int count){
  String tmp=s.toString();
  if (tmp.contains(""String_Node_Str"")) {
    String[] strs=tmp.split(""String_Node_Str"");
    if (strs.length > 1 && strs[1].length() > 2) {
      eEtInMoney.setText(tmp.substring(0,tmp.length() - 1));
      eEtInMoney.setSelection(tmp.length() - 1);
    }
  }
  if (!TextUtils.isEmpty(tmp)) {
    double money=Double.parseDouble(tmp);
    if (money > Double.parseDouble(mTvOutAccountLeftMoney.getText().toString())) {
      KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
      SnackBarUtil.showSnackInfo(floatingActionButton,AccountsTransferActivity.this,getResources().getString(R.string.not_have_enough_money));
      eEtInMoney.setText(mTvOutAccountLeftMoney.getText());
    }
  }
}"
39374,"@Override public void onClick(View v){
  editOut=false;
}","@Override public void onClick(View v){
  KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
  KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
  selectItem=1;
  Intent intent=new Intent(AccountsTransferActivity.this,SelectAccountActivity.class);
  if (inAccountID > 0)   intent.putExtra(IntentConstant.ACCOUNT_ID,inAccountID);
  startActivityForResult(intent,0);
}"
39375,"private void submit(){
  if (inAccountID == 0) {
    SnackBarUtil.showSnackInfo(floatingActionButton,this,""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(eEtInMoney.getText())) {
    SnackBarUtil.showSnackInfo(floatingActionButton,this,""String_Node_Str"");
    return;
  }
  if (Double.parseDouble(eEtInMoney.getText().toString()) == 0) {
    SnackBarUtil.showSnackInfo(floatingActionButton,this,""String_Node_Str"");
    return;
  }
  circleProgressBar.setVisibility(View.VISIBLE);
  circleProgressBar.setColorSchemeResources(android.R.color.holo_blue_light,android.R.color.holo_red_light,android.R.color.holo_orange_light);
  recordManager.moneyTransFer(outAccountID,inAccountID,TextUtil.gwtFormatNum(Double.parseDouble(eEtInMoney.getText().toString())),new Handler(){
    @Override public void handleMessage(    Message msg){
      super.handleMessage(msg);
      setResult(RESULT_OK);
      finish();
    }
  }
);
}","private void submit(){
  if (inAccountID == 0) {
    SnackBarUtil.showSnackInfo(floatingActionButton,this,getResources().getString(R.string.select_in_account));
    return;
  }
  if (TextUtils.isEmpty(eEtInMoney.getText())) {
    SnackBarUtil.showSnackInfo(floatingActionButton,this,getResources().getString(R.string.enter_account_trans_money));
    return;
  }
  if (Double.parseDouble(eEtInMoney.getText().toString()) == 0) {
    SnackBarUtil.showSnackInfo(floatingActionButton,this,getResources().getString(R.string.enter_account_trans_money));
    return;
  }
  circleProgressBar.setVisibility(View.VISIBLE);
  circleProgressBar.setColorSchemeResources(android.R.color.holo_blue_light,android.R.color.holo_red_light,android.R.color.holo_orange_light);
  recordManager.moneyTransFer(outAccountID,inAccountID,TextUtil.gwtFormatNum(Double.parseDouble(eEtInMoney.getText().toString())),new Handler(){
    @Override public void handleMessage(    Message msg){
      super.handleMessage(msg);
      setResult(RESULT_OK);
      finish();
    }
  }
);
}"
39376,"@Override protected void initWidget(){
  mImgOutAccountIcon=(ImageView)findViewById(R.id.out_account_icon);
  mImgInAccountIcon=(ImageView)findViewById(R.id.in_account_icon);
  mTvoOutAccountName=(TextView)findViewById(R.id.out_account_name);
  mTvInAccountName=(TextView)findViewById(R.id.in_account_name);
  mTvOutAccountLeftMoney=(TextView)findViewById(R.id.out_account_money);
  mTvInAccountLeftMoney=(TextView)findViewById(R.id.in_account_money);
  eEtOutMoney=(EditText)findViewById(R.id.out_money);
  eEtInMoney=(EditText)findViewById(R.id.in_money);
  plusView=findViewById(R.id.plus);
  plusView.setVisibility(View.GONE);
  eEtInMoney.setVisibility(View.GONE);
  inView=findViewById(R.id.in_layout);
  outView=findViewById(R.id.out_layout);
  circleProgressBar=(CircleProgressBar)findViewById(R.id.progressBar);
  circleProgressBar.setVisibility(View.INVISIBLE);
  floatingActionButton=(FloatingActionButton)findViewById(R.id.submit);
  floatingActionButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      submit();
    }
  }
);
  eEtOutMoney.setText(""String_Node_Str"");
  eEtInMoney.setText(""String_Node_Str"");
  eEtOutMoney.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
  eEtInMoney.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
  AccountDetailDO accountDetailDO=accountManager.getAccountByID(outAccountID);
  mImgOutAccountIcon.setImageResource(IconTypeUtil.getAccountIcon(accountDetailDO.getAccountIcon()));
  if (!TextUtils.isEmpty(accountDetailDO.getAccountColor())) {
    mImgOutAccountIcon.setColorFilter(Integer.parseInt(accountDetailDO.getAccountColor()));
  }
  mTvoOutAccountName.setText(accountDetailDO.getAccountName());
  mTvOutAccountLeftMoney.setText(TextUtil.getFormatMoney(accountDetailDO.getAccountMoney()) + ""String_Node_Str"");
  mImgInAccountIcon.setImageResource(0);
  mTvInAccountName.setText(""String_Node_Str"");
  mTvInAccountLeftMoney.setText(""String_Node_Str"");
  outView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
      KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
      selectItem=0;
      Intent intent=new Intent(AccountsTransferActivity.this,SelectAccountActivity.class);
      if (outAccountID > 0)       intent.putExtra(IntentConstant.ACCOUNT_ID,outAccountID);
      startActivityForResult(intent,0);
    }
  }
);
  inView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
      KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
      selectItem=1;
      Intent intent=new Intent(AccountsTransferActivity.this,SelectAccountActivity.class);
      if (inAccountID > 0)       intent.putExtra(IntentConstant.ACCOUNT_ID,inAccountID);
      startActivityForResult(intent,0);
    }
  }
);
  eEtOutMoney.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      editOut=true;
    }
  }
);
  eEtInMoney.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      editOut=false;
    }
  }
);
  eEtOutMoney.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      String tmp=s.toString();
      if (tmp.contains(""String_Node_Str"")) {
        String[] strs=tmp.split(""String_Node_Str"");
        if (strs.length > 1 && strs[1].length() > 2) {
          eEtOutMoney.setText(tmp.substring(0,tmp.length() - 1));
          eEtOutMoney.setSelection(tmp.length() - 1);
        }
      }
      if (!TextUtils.isEmpty(tmp)) {
        double money=Double.parseDouble(tmp);
        if (money > Double.parseDouble(mTvOutAccountLeftMoney.getText().toString())) {
          KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
          SnackBarUtil.showSnackInfo(floatingActionButton,AccountsTransferActivity.this,""String_Node_Str"");
          eEtOutMoney.setText(mTvOutAccountLeftMoney.getText());
        }
      }
    }
    @Override public void afterTextChanged(    Editable s){
      if (!editOut)       return;
      eEtInMoney.setText(eEtOutMoney.getText());
    }
  }
);
  eEtInMoney.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      String tmp=s.toString();
      if (tmp.contains(""String_Node_Str"")) {
        String[] strs=tmp.split(""String_Node_Str"");
        if (strs.length > 1 && strs[1].length() > 2) {
          eEtInMoney.setText(tmp.substring(0,tmp.length() - 1));
          eEtInMoney.setSelection(tmp.length() - 1);
        }
      }
      if (!TextUtils.isEmpty(tmp)) {
        double money=Double.parseDouble(tmp);
        if (money > Double.parseDouble(mTvOutAccountLeftMoney.getText().toString())) {
          KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
          SnackBarUtil.showSnackInfo(floatingActionButton,AccountsTransferActivity.this,""String_Node_Str"");
          eEtInMoney.setText(mTvOutAccountLeftMoney.getText());
        }
      }
    }
    @Override public void afterTextChanged(    Editable s){
      if (editOut)       return;
      eEtOutMoney.setText(eEtInMoney.getText());
    }
  }
);
}","@Override protected void initWidget(){
  mImgOutAccountIcon=(ImageView)findViewById(R.id.out_account_icon);
  mImgInAccountIcon=(ImageView)findViewById(R.id.in_account_icon);
  mTvoOutAccountName=(TextView)findViewById(R.id.out_account_name);
  mTvInAccountName=(TextView)findViewById(R.id.in_account_name);
  mTvOutAccountLeftMoney=(TextView)findViewById(R.id.out_account_money);
  mTvInAccountLeftMoney=(TextView)findViewById(R.id.in_account_money);
  eEtOutMoney=(EditText)findViewById(R.id.out_money);
  eEtInMoney=(EditText)findViewById(R.id.in_money);
  plusView=findViewById(R.id.plus);
  plusView.setVisibility(View.GONE);
  eEtInMoney.setVisibility(View.GONE);
  inView=findViewById(R.id.in_layout);
  outView=findViewById(R.id.out_layout);
  circleProgressBar=(CircleProgressBar)findViewById(R.id.progressBar);
  circleProgressBar.setVisibility(View.INVISIBLE);
  floatingActionButton=(FloatingActionButton)findViewById(R.id.submit);
  floatingActionButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      submit();
    }
  }
);
  eEtOutMoney.setText(""String_Node_Str"");
  eEtInMoney.setText(""String_Node_Str"");
  eEtOutMoney.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
  eEtInMoney.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
  AccountDetailDO accountDetailDO=accountManager.getAccountByID(outAccountID);
  mImgOutAccountIcon.setImageResource(IconTypeUtil.getAccountIcon(accountDetailDO.getAccountIcon()));
  if (!TextUtils.isEmpty(accountDetailDO.getAccountColor())) {
    mImgOutAccountIcon.setColorFilter(Integer.parseInt(accountDetailDO.getAccountColor()));
  }
  mTvoOutAccountName.setText(accountDetailDO.getAccountName());
  mTvOutAccountLeftMoney.setText(TextUtil.getFormatMoney(accountDetailDO.getAccountMoney()) + ""String_Node_Str"");
  mImgInAccountIcon.setImageResource(0);
  mTvInAccountName.setText(""String_Node_Str"");
  mTvInAccountLeftMoney.setText(""String_Node_Str"");
  outView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
      KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
      selectItem=0;
      Intent intent=new Intent(AccountsTransferActivity.this,SelectAccountActivity.class);
      if (outAccountID > 0)       intent.putExtra(IntentConstant.ACCOUNT_ID,outAccountID);
      startActivityForResult(intent,0);
    }
  }
);
  inView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
      KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
      selectItem=1;
      Intent intent=new Intent(AccountsTransferActivity.this,SelectAccountActivity.class);
      if (inAccountID > 0)       intent.putExtra(IntentConstant.ACCOUNT_ID,inAccountID);
      startActivityForResult(intent,0);
    }
  }
);
  eEtOutMoney.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      String tmp=s.toString();
      if (tmp.contains(""String_Node_Str"")) {
        String[] strs=tmp.split(""String_Node_Str"");
        if (strs.length > 1 && strs[1].length() > 2) {
          eEtOutMoney.setText(tmp.substring(0,tmp.length() - 1));
          eEtOutMoney.setSelection(tmp.length() - 1);
        }
      }
      if (!TextUtils.isEmpty(tmp)) {
        double money=Double.parseDouble(tmp);
        if (money > Double.parseDouble(mTvOutAccountLeftMoney.getText().toString())) {
          KeyBoardUtils.closeKeybord(eEtOutMoney,AccountsTransferActivity.this);
          SnackBarUtil.showSnackInfo(floatingActionButton,AccountsTransferActivity.this,getResources().getString(R.string.not_have_enough_money));
          eEtOutMoney.setText(mTvOutAccountLeftMoney.getText());
        }
      }
    }
    @Override public void afterTextChanged(    Editable s){
      if (!eEtOutMoney.isFocused())       return;
      eEtInMoney.setText(eEtOutMoney.getText());
    }
  }
);
  eEtInMoney.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      String tmp=s.toString();
      if (tmp.contains(""String_Node_Str"")) {
        String[] strs=tmp.split(""String_Node_Str"");
        if (strs.length > 1 && strs[1].length() > 2) {
          eEtInMoney.setText(tmp.substring(0,tmp.length() - 1));
          eEtInMoney.setSelection(tmp.length() - 1);
        }
      }
      if (!TextUtils.isEmpty(tmp)) {
        double money=Double.parseDouble(tmp);
        if (money > Double.parseDouble(mTvOutAccountLeftMoney.getText().toString())) {
          KeyBoardUtils.closeKeybord(eEtInMoney,AccountsTransferActivity.this);
          SnackBarUtil.showSnackInfo(floatingActionButton,AccountsTransferActivity.this,getResources().getString(R.string.not_have_enough_money));
          eEtInMoney.setText(mTvOutAccountLeftMoney.getText());
        }
      }
    }
    @Override public void afterTextChanged(    Editable s){
      if (eEtOutMoney.isFocused())       return;
      eEtOutMoney.setText(eEtInMoney.getText());
    }
  }
);
}"
39377,"@Override public void afterTextChanged(Editable s){
  if (editOut)   return;
  eEtOutMoney.setText(eEtInMoney.getText());
}","@Override public void afterTextChanged(Editable s){
  if (eEtOutMoney.isFocused())   return;
  eEtOutMoney.setText(eEtInMoney.getText());
}"
39378,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (resultCode == RESULT_OK) {
    long accountId=data.getLongExtra(IntentConstant.ACCOUNT_ID,0);
    AccountDetailDO accountDetailDO=accountManager.getAccountByID(accountId);
    if (selectItem == 0) {
      if (inAccountID == accountId) {
        SnackBarUtil.showSnackInfo(floatingActionButton,this,""String_Node_Str"");
        return;
      }
      outAccountID=accountId;
      mImgOutAccountIcon.setImageResource(IconTypeUtil.getAccountIcon(accountDetailDO.getAccountIcon()));
      if (!TextUtils.isEmpty(accountDetailDO.getAccountColor())) {
        mImgOutAccountIcon.setColorFilter(Integer.parseInt(accountDetailDO.getAccountColor()));
      }
 else {
        mImgOutAccountIcon.setColorFilter(0);
      }
      mTvoOutAccountName.setText(accountDetailDO.getAccountName());
      mTvOutAccountLeftMoney.setText(TextUtil.getFormatMoney(accountDetailDO.getAccountMoney()) + ""String_Node_Str"");
    }
 else {
      if (outAccountID == accountId) {
        SnackBarUtil.showSnackInfo(floatingActionButton,this,""String_Node_Str"");
        return;
      }
      inAccountID=accountId;
      plusView.setVisibility(View.VISIBLE);
      eEtInMoney.setVisibility(View.VISIBLE);
      mImgInAccountIcon.setImageResource(IconTypeUtil.getAccountIcon(accountDetailDO.getAccountIcon()));
      if (!TextUtils.isEmpty(accountDetailDO.getAccountColor())) {
        mImgInAccountIcon.setColorFilter(Integer.parseInt(accountDetailDO.getAccountColor()));
      }
 else {
        mImgInAccountIcon.setColorFilter(0);
      }
      mTvInAccountName.setText(accountDetailDO.getAccountName());
      mTvInAccountLeftMoney.setText(TextUtil.getFormatMoney(accountDetailDO.getAccountMoney()) + ""String_Node_Str"");
    }
  }
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (resultCode == RESULT_OK) {
    long accountId=data.getLongExtra(IntentConstant.ACCOUNT_ID,0);
    AccountDetailDO accountDetailDO=accountManager.getAccountByID(accountId);
    if (selectItem == 0) {
      if (inAccountID == accountId) {
        SnackBarUtil.showSnackInfo(floatingActionButton,this,getResources().getString(R.string.not_select_same_account));
        return;
      }
      outAccountID=accountId;
      mImgOutAccountIcon.setImageResource(IconTypeUtil.getAccountIcon(accountDetailDO.getAccountIcon()));
      if (!TextUtils.isEmpty(accountDetailDO.getAccountColor())) {
        mImgOutAccountIcon.setColorFilter(Integer.parseInt(accountDetailDO.getAccountColor()));
      }
 else {
        mImgOutAccountIcon.setColorFilter(0);
      }
      mTvoOutAccountName.setText(accountDetailDO.getAccountName());
      mTvOutAccountLeftMoney.setText(TextUtil.getFormatMoney(accountDetailDO.getAccountMoney()) + ""String_Node_Str"");
    }
 else {
      if (outAccountID == accountId) {
        SnackBarUtil.showSnackInfo(floatingActionButton,this,getResources().getString(R.string.not_select_same_account));
        return;
      }
      inAccountID=accountId;
      plusView.setVisibility(View.VISIBLE);
      eEtInMoney.setVisibility(View.VISIBLE);
      mImgInAccountIcon.setImageResource(IconTypeUtil.getAccountIcon(accountDetailDO.getAccountIcon()));
      if (!TextUtils.isEmpty(accountDetailDO.getAccountColor())) {
        mImgInAccountIcon.setColorFilter(Integer.parseInt(accountDetailDO.getAccountColor()));
      }
 else {
        mImgInAccountIcon.setColorFilter(0);
      }
      mTvInAccountName.setText(accountDetailDO.getAccountName());
      mTvInAccountLeftMoney.setText(TextUtil.getFormatMoney(accountDetailDO.getAccountMoney()) + ""String_Node_Str"");
    }
  }
}"
39379,"@Override protected void initWidget(){
  mTvAccountName=(TextView)findViewById(R.id.account_name);
  mTvAccountTypeDesc=(TextView)findViewById(R.id.account_type_desc);
  mTvAccountRemark=(TextView)findViewById(R.id.account_remark);
  mIgAccountType=(ImageView)findViewById(R.id.account_type_icon);
  mTvAccountMoney=(TextView)findViewById(R.id.account_money);
  getSupportActionBar().setTitle(mAccountID == 0 ? ""String_Node_Str"" : ""String_Node_Str"");
  if (mAccountID > 0) {
    AccountDetailDO account=accountManager.getAccountByID(mAccountID);
    accountName=account.getAccountName();
    accountRemark=account.getAccountRemark();
    mTvAccountName.setText(accountName);
    accountTypeId=account.getAccountTypeID();
    mTvAccountTypeDesc.setText(account.getAccountDesc());
    mIgAccountType.setImageResource(IconTypeUtil.getAccountIcon(account.getAccountIcon()));
    if (!TextUtils.isEmpty(account.getAccountColor())) {
      mIgAccountType.setColorFilter(Integer.parseInt(account.getAccountColor()));
    }
    mTvAccountRemark.setText(accountRemark);
    accountMoney=account.getAccountMoney();
    mTvAccountMoney.setText(String.format(getResources().getString(R.string.money_format),accountMoney));
  }
  mSubmitButton=(FloatingActionButton)findViewById(R.id.submit);
  mSubmitButton.setImageResource(mAccountID > 0 ? R.drawable.ic_delete_white : R.drawable.ic_done_white);
  mSubmitButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mAccountID > 0) {
        final MaterialDialog materialDialog=new MaterialDialog(CreateOrEditAccountActivity.this);
        materialDialog.setTitle(""String_Node_Str"").setMessage(""String_Node_Str"").setPositiveButton(""String_Node_Str"",new View.OnClickListener(){
          @Override public void onClick(          View v){
            if (accountCount == 1) {
              materialDialog.dismiss();
              SnackBarUtil.showSnackInfo(mSubmitButton,CreateOrEditAccountActivity.this,""String_Node_Str"");
              return;
            }
            accountManager.deleteAccountByID(mAccountID,new Handler(){
              @Override public void handleMessage(              Message msg){
                super.handleMessage(msg);
                if (msg.what == Constant.MSG_SUCCESS) {
                  setResult(RESULT_OK);
                  finish();
                }
              }
            }
);
          }
        }
).setNegativeButton(""String_Node_Str"",new View.OnClickListener(){
          @Override public void onClick(          View v){
            materialDialog.dismiss();
          }
        }
).show();
      }
 else {
        if (TextUtils.isEmpty(accountName)) {
          SnackBarUtil.showSnackInfo(v,CreateOrEditAccountActivity.this,""String_Node_Str"");
          return;
        }
        accountManager.createNewAccount(accountName,accountMoney,accountTypeId,accountRemark,new Handler(){
          @Override public void handleMessage(          Message msg){
            super.handleMessage(msg);
            if (msg.what == Constant.MSG_ERROR) {
            }
 else {
              setResult(RESULT_OK);
              finish();
            }
          }
        }
);
      }
    }
  }
);
}","@Override protected void initWidget(){
  mTvAccountName=(TextView)findViewById(R.id.account_name);
  mTvAccountTypeDesc=(TextView)findViewById(R.id.account_type_desc);
  mTvAccountRemark=(TextView)findViewById(R.id.account_remark);
  mIgAccountType=(ImageView)findViewById(R.id.account_type_icon);
  mTvAccountMoney=(TextView)findViewById(R.id.account_money);
  getSupportActionBar().setTitle(mAccountID == 0 ? getResources().getString(R.string.create_account) : getResources().getString(R.string.edit_account));
  if (mAccountID > 0) {
    AccountDetailDO account=accountManager.getAccountByID(mAccountID);
    accountName=account.getAccountName();
    accountRemark=account.getAccountRemark();
    mTvAccountName.setText(accountName);
    accountTypeId=account.getAccountTypeID();
    mTvAccountTypeDesc.setText(account.getAccountDesc());
    mIgAccountType.setImageResource(IconTypeUtil.getAccountIcon(account.getAccountIcon()));
    if (!TextUtils.isEmpty(account.getAccountColor())) {
      mIgAccountType.setColorFilter(Integer.parseInt(account.getAccountColor()));
    }
    mTvAccountRemark.setText(accountRemark);
    accountMoney=account.getAccountMoney();
    mTvAccountMoney.setText(String.format(getResources().getString(R.string.money_format),accountMoney));
  }
  mSubmitButton=(FloatingActionButton)findViewById(R.id.submit);
  mSubmitButton.setImageResource(mAccountID > 0 ? R.drawable.ic_delete_white : R.drawable.ic_done_white);
  mSubmitButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mAccountID > 0) {
        final MaterialDialog materialDialog=new MaterialDialog(CreateOrEditAccountActivity.this);
        materialDialog.setTitle(getResources().getString(R.string.delete_account)).setMessage(""String_Node_Str"").setPositiveButton(getResources().getString(R.string.ok),new View.OnClickListener(){
          @Override public void onClick(          View v){
            if (accountCount == 1) {
              materialDialog.dismiss();
              SnackBarUtil.showSnackInfo(mSubmitButton,CreateOrEditAccountActivity.this,getResources().getString(R.string.retain_at_least_one_account));
              return;
            }
            accountManager.deleteAccountByID(mAccountID,new Handler(){
              @Override public void handleMessage(              Message msg){
                super.handleMessage(msg);
                if (msg.what == Constant.MSG_SUCCESS) {
                  setResult(RESULT_OK);
                  finish();
                }
              }
            }
);
          }
        }
).setNegativeButton(getResources().getString(R.string.cancel),new View.OnClickListener(){
          @Override public void onClick(          View v){
            materialDialog.dismiss();
          }
        }
).show();
      }
 else {
        if (TextUtils.isEmpty(accountName)) {
          SnackBarUtil.showSnackInfo(v,CreateOrEditAccountActivity.this,getResources().getString(R.string.enter_account_name));
          return;
        }
        accountManager.createNewAccount(accountName,accountMoney,accountTypeId,accountRemark,new Handler(){
          @Override public void handleMessage(          Message msg){
            super.handleMessage(msg);
            if (msg.what == Constant.MSG_ERROR) {
            }
 else {
              setResult(RESULT_OK);
              finish();
            }
          }
        }
);
      }
    }
  }
);
}"
39380,"@Override protected void initWidget(){
  mEtProp=(EditText)findViewById(R.id.prop_et);
  mBtProp=(Button)findViewById(R.id.prop_bt);
  mBtProp.setTextColor(getColor(this,getMainTheme().getMainColorID()));
  mLvAccountType=(ListView)findViewById(R.id.account_type);
  findViewById(mEditType == PROP_TYPE_ACCOUNT_TYPE ? R.id.account_other_param : R.id.account_type_param).setVisibility(View.GONE);
switch (mEditType) {
case PROP_TYPE_ACCOUNT_NAME:
    getSupportActionBar().setTitle(""String_Node_Str"");
  mEtProp.setText(mParam);
break;
case PROP_TYPE_ACCOUNT_MONEY:
getSupportActionBar().setTitle(""String_Node_Str"");
mEtProp.setText(String.format(getResources().getString(R.string.record_money_format),mMoney));
mEtProp.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
break;
case PROP_TYPE_ACCOUNT_REMARK:
getSupportActionBar().setTitle(""String_Node_Str"");
mEtProp.setText(mParam);
break;
case PROP_TYPE_ACCOUNT_TYPE:
getSupportActionBar().setTitle(""String_Node_Str"");
initListView();
break;
default :
break;
}
mEtProp.setSelection(mEtProp.getText().toString().length());
mBtProp.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
saveProp(mEtProp.getText().toString());
}
}
);
mEtProp.addTextChangedListener(new TextWatcher(){
@Override public void beforeTextChanged(CharSequence s,int start,int count,int after){
}
@Override public void onTextChanged(CharSequence s,int start,int before,int count){
if (mEditType != PROP_TYPE_ACCOUNT_MONEY) return;
String tmp=s.toString();
if (tmp.contains(""String_Node_Str"")) {
String[] strs=tmp.split(""String_Node_Str"");
if (strs.length > 1 && strs[1].length() > 2) {
mEtProp.setText(tmp.substring(0,tmp.length() - 1));
mEtProp.setSelection(tmp.length() - 1);
}
}
}
@Override public void afterTextChanged(Editable s){
}
}
);
}","@Override protected void initWidget(){
  mEtProp=(EditText)findViewById(R.id.prop_et);
  mBtProp=(Button)findViewById(R.id.prop_bt);
  mBtProp.setTextColor(getColor(this,getMainTheme().getMainColorID()));
  mLvAccountType=(ListView)findViewById(R.id.account_type);
  findViewById(mEditType == PROP_TYPE_ACCOUNT_TYPE ? R.id.account_other_param : R.id.account_type_param).setVisibility(View.GONE);
switch (mEditType) {
case PROP_TYPE_ACCOUNT_NAME:
    getSupportActionBar().setTitle(getResources().getString(R.string.edit_account_name));
  mEtProp.setText(mParam);
break;
case PROP_TYPE_ACCOUNT_MONEY:
getSupportActionBar().setTitle(getResources().getString(R.string.edit_account_money));
mEtProp.setText(String.format(getResources().getString(R.string.record_money_format),mMoney));
mEtProp.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
break;
case PROP_TYPE_ACCOUNT_REMARK:
getSupportActionBar().setTitle(getResources().getString(R.string.edit_account_remark));
mEtProp.setText(mParam);
break;
case PROP_TYPE_ACCOUNT_TYPE:
getSupportActionBar().setTitle(getResources().getString(R.string.edit_account_type));
initListView();
break;
default :
break;
}
mEtProp.setSelection(mEtProp.getText().toString().length());
mBtProp.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
saveProp(mEtProp.getText().toString());
}
}
);
mEtProp.addTextChangedListener(new TextWatcher(){
@Override public void beforeTextChanged(CharSequence s,int start,int count,int after){
}
@Override public void onTextChanged(CharSequence s,int start,int before,int count){
if (mEditType != PROP_TYPE_ACCOUNT_MONEY) return;
String tmp=s.toString();
if (tmp.contains(""String_Node_Str"")) {
String[] strs=tmp.split(""String_Node_Str"");
if (strs.length > 1 && strs[1].length() > 2) {
mEtProp.setText(tmp.substring(0,tmp.length() - 1));
mEtProp.setSelection(tmp.length() - 1);
}
}
}
@Override public void afterTextChanged(Editable s){
}
}
);
}"
39381,"@Override public void onClick(View v){
  lastSelOpt=-1;
  resetOptBt();
}","@Override public void onClick(View v){
  resetOptStatus();
}"
39382,"@Override public View getView(final int position,View convertView,final ViewGroup parent){
  ViewHolder holder=null;
  if (convertView == null) {
    holder=new ViewHolder();
    convertView=mInflater.inflate(R.layout.record_item,null);
    holder.icon=(ImageView)convertView.findViewById(R.id.record_icon);
    holder.inLy=convertView.findViewById(R.id.shouru_ly);
    holder.outLY=convertView.findViewById(R.id.zhichu_ly);
    holder.outTv=(TextView)convertView.findViewById(R.id.out_tv);
    holder.inTv=(TextView)convertView.findViewById(R.id.in_tv);
    holder.outRemarkTv=(TextView)convertView.findViewById(R.id.out_remark_tv);
    holder.inRemarkTv=(TextView)convertView.findViewById(R.id.in_remark_tv);
    holder.recordDateTv=(TextView)convertView.findViewById(R.id.record_date);
    holder.delV=convertView.findViewById(R.id.icon_del);
    holder.editV=convertView.findViewById(R.id.icon_edit);
    holder.lineV=convertView.findViewById(R.id.record_line);
    holder.myRoundColorView=(MyRoundColorView)convertView.findViewById(R.id.myRound);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  final RecordDetailDO recordDetailDO=recordDetailDOs.get(position);
  if (recordDetailDO.isDayFirstDay()) {
    recordDetailDOMap.put(recordDetailDO.getRecordDate(),recordDetailDO);
  }
  int color=mContext.getResources().getColor(ThemeUtil.getTheme(mContext).getMainColorID());
  holder.lineV.setBackgroundColor(color);
  holder.myRoundColorView.setMyRoundColor(color);
  holder.inTv.setTextColor(color);
  holder.outTv.setTextColor(color);
  holder.inRemarkTv.setTextColor(color);
  holder.outRemarkTv.setTextColor(color);
  holder.inLy.setVisibility(recordDetailDO.getRecordMoney() > 0 || (recordDetailDO.isDayFirstDay() && recordDetailDO.getTodayAllInMoney() > 0) || (recordDetailDO.isMonthFirstDay()) ? View.VISIBLE : View.INVISIBLE);
  holder.outLY.setVisibility(recordDetailDO.getRecordMoney() < 0 || (recordDetailDO.isDayFirstDay() && recordDetailDO.getTodayAllOutMoney() < 0) ? View.VISIBLE : View.INVISIBLE);
  holder.icon.setVisibility(recordDetailDO.isDayFirstDay() || recordDetailDO.isMonthFirstDay() ? View.INVISIBLE : View.VISIBLE);
  holder.recordDateTv.setVisibility(recordDetailDO.isDayFirstDay() || recordDetailDO.isMonthFirstDay() ? View.VISIBLE : View.INVISIBLE);
  resetOptBt();
  if (recordDetailDO.getRecordMoney() < 0) {
    holder.outTv.setText(recordDetailDO.getRecordDesc() + ""String_Node_Str"" + String.format(mContext.getResources().getString(R.string.record_money_format),Math.abs(recordDetailDO.getRecordMoney())));
    holder.outRemarkTv.setText(recordDetailDO.getRemark());
  }
  if (recordDetailDO.getRecordMoney() > 0) {
    holder.inTv.setText(recordDetailDO.getRecordDesc() + ""String_Node_Str"" + String.format(mContext.getResources().getString(R.string.record_money_format),Math.abs(recordDetailDO.getRecordMoney())));
    holder.inRemarkTv.setText(""String_Node_Str"");
  }
  if (recordDetailDO.isMonthFirstDay()) {
    DateFormat format=new SimpleDateFormat(""String_Node_Str"");
    holder.inTv.setText(DateTimeUtil.isThisYear(recordDetailDO.getRecordDate()) ? ""String_Node_Str"" : format.format(recordDetailDO.getRecordDate()));
  }
 else {
    if (recordDetailDO.getTodayAllInMoney() >= 0 && recordDetailDO.isDayFirstDay()) {
      holder.inTv.setText(String.format(mContext.getResources().getString(R.string.record_money_format),Math.abs(recordDetailDO.getTodayAllInMoney())) + ""String_Node_Str"");
      holder.outRemarkTv.setText(""String_Node_Str"");
    }
  }
  if (recordDetailDO.getTodayAllOutMoney() <= 0 && recordDetailDO.isDayFirstDay()) {
    holder.outTv.setText(""String_Node_Str"" + String.format(mContext.getResources().getString(R.string.record_money_format),Math.abs(recordDetailDO.getTodayAllOutMoney())));
    holder.inRemarkTv.setText(""String_Node_Str"");
  }
  if (recordDetailDO.isMonthFirstDay()) {
    DateFormat format=new SimpleDateFormat(""String_Node_Str"");
    holder.recordDateTv.setText(format.format(recordDetailDO.getRecordDate()));
  }
 else {
    if (DateTimeUtil.isToday(recordDetailDO.getRecordDate())) {
      holder.recordDateTv.setText(""String_Node_Str"");
    }
 else {
      DateFormat format=new SimpleDateFormat(""String_Node_Str"");
      holder.recordDateTv.setText(format.format(recordDetailDO.getRecordDate()));
    }
  }
  holder.icon.setImageResource(IconTypeUtil.getTypeIcon(recordDetailDO.getIconId()));
  final ViewHolder finalHolder=holder;
  if (!recordDetailDO.isDayFirstDay() && !recordDetailDO.isMonthFirstDay()) {
    holder.icon.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        resetOptBt();
        if (lastSelOpt != position) {
          optViews.add(finalHolder.delV);
          optViews.add(finalHolder.editV);
          finalHolder.delV.setVisibility(View.VISIBLE);
          finalHolder.editV.setVisibility(View.VISIBLE);
          YoYo.with(Techniques.SlideInUp).duration(200).playOn(finalHolder.delV);
          YoYo.with(Techniques.SlideInDown).duration(200).playOn(finalHolder.editV);
          lastSelOpt=position;
        }
 else {
          lastSelOpt=-1;
        }
      }
    }
);
  }
  holder.delV.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      final MaterialDialog materialDialog=new MaterialDialog(mContext);
      materialDialog.setTitle(""String_Node_Str"").setMessage(""String_Node_Str"").setPositiveButton(""String_Node_Str"",new View.OnClickListener(){
        @Override public void onClick(        View v){
          final Record record=recordLocalDAO.getRecordById(mContext,recordDetailDO.getRecordID());
          record.setIsDel(true);
          recordManager.updateOldRecord(record,new Handler(){
            @Override public void handleMessage(            Message msg){
              super.handleMessage(msg);
              accountManager.updateAccountMoney(record.getAccountID(),-record.getRecordMoney(),new Handler(){
                @Override public void handleMessage(                Message msg){
                  super.handleMessage(msg);
                  ((MainActivity)mContext).getReloadAccountCallBack().reload(true);
                  ((MainActivity)mContext).getReloadAnalysisCallBack().reload(true);
                }
              }
);
            }
          }
);
          RecordDetailDO todayRecordDetailDO=recordDetailDOMap.get(recordDetailDO.getRecordDate());
          if (recordDetailDO.getRecordMoney() < 0) {
            todayRecordDetailDO.setTodayAllOutMoney(todayRecordDetailDO.getTodayAllOutMoney() - recordDetailDO.getRecordMoney());
          }
 else {
            todayRecordDetailDO.setTodayAllInMoney(todayRecordDetailDO.getTodayAllInMoney() - recordDetailDO.getRecordMoney());
          }
          if (recordDetailDOs.get(position - 1).isDayFirstDay() && (position == recordDetailDOs.size() - 1 || recordDetailDOs.get(position + 1).isDayFirstDay() || recordDetailDOs.get(position + 1).isMonthFirstDay())) {
            if (recordDetailDOs.get(position - 2).isMonthFirstDay() && (position == recordDetailDOs.size() - 1 || recordDetailDOs.get(position + 1).isMonthFirstDay())) {
              recordDetailDOs.remove(position - 2);
              recordDetailDOs.remove(position - 2);
              recordDetailDOs.remove(position - 2);
            }
 else {
              recordDetailDOs.remove(position - 1);
              recordDetailDOs.remove(position - 1);
            }
          }
 else {
            recordDetailDOs.remove(position);
          }
          if (recordDetailDOs.size() == 0) {
            recordFrg.resetFoot();
          }
          notifyDataSetChanged();
          materialDialog.dismiss();
        }
      }
).setNegativeButton(""String_Node_Str"",new View.OnClickListener(){
        @Override public void onClick(        View v){
          materialDialog.dismiss();
        }
      }
).show();
    }
  }
);
  holder.editV.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(mContext,CreateOrEditRecordActivity.class);
      intent.putExtra(IntentConstant.OLD_RECORD,recordLocalDAO.getRecordById(mContext,recordDetailDO.getRecordID()));
      resetOptBt();
      lastSelOpt=-1;
      ((MainActivity)mContext).startActivityForResult(intent,MainActivity.REQUEST_RECORD);
    }
  }
);
  convertView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      lastSelOpt=-1;
      resetOptBt();
    }
  }
);
  return convertView;
}","@Override public View getView(final int position,View convertView,final ViewGroup parent){
  ViewHolder holder=null;
  if (convertView == null) {
    holder=new ViewHolder();
    convertView=mInflater.inflate(R.layout.record_item,null);
    holder.icon=(ImageView)convertView.findViewById(R.id.record_icon);
    holder.inLy=convertView.findViewById(R.id.shouru_ly);
    holder.outLY=convertView.findViewById(R.id.zhichu_ly);
    holder.outTv=(TextView)convertView.findViewById(R.id.out_tv);
    holder.inTv=(TextView)convertView.findViewById(R.id.in_tv);
    holder.outRemarkTv=(TextView)convertView.findViewById(R.id.out_remark_tv);
    holder.inRemarkTv=(TextView)convertView.findViewById(R.id.in_remark_tv);
    holder.recordDateTv=(TextView)convertView.findViewById(R.id.record_date);
    holder.delV=convertView.findViewById(R.id.icon_del);
    holder.editV=convertView.findViewById(R.id.icon_edit);
    holder.lineV=convertView.findViewById(R.id.record_line);
    holder.myRoundColorView=(MyRoundColorView)convertView.findViewById(R.id.myRound);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  final RecordDetailDO recordDetailDO=recordDetailDOs.get(position);
  if (recordDetailDO.isDayFirstDay()) {
    recordDetailDOMap.put(recordDetailDO.getRecordDate(),recordDetailDO);
  }
  int color=mContext.getResources().getColor(ThemeUtil.getTheme(mContext).getMainColorID());
  holder.lineV.setBackgroundColor(color);
  holder.myRoundColorView.setMyRoundColor(color);
  holder.inTv.setTextColor(color);
  holder.outTv.setTextColor(color);
  holder.inRemarkTv.setTextColor(color);
  holder.outRemarkTv.setTextColor(color);
  holder.inLy.setVisibility(recordDetailDO.getRecordMoney() > 0 || (recordDetailDO.isDayFirstDay() && recordDetailDO.getTodayAllInMoney() > 0) || (recordDetailDO.isMonthFirstDay()) ? View.VISIBLE : View.INVISIBLE);
  holder.outLY.setVisibility(recordDetailDO.getRecordMoney() < 0 || (recordDetailDO.isDayFirstDay() && recordDetailDO.getTodayAllOutMoney() < 0) ? View.VISIBLE : View.INVISIBLE);
  holder.icon.setVisibility(recordDetailDO.isDayFirstDay() || recordDetailDO.isMonthFirstDay() ? View.INVISIBLE : View.VISIBLE);
  holder.recordDateTv.setVisibility(recordDetailDO.isDayFirstDay() || recordDetailDO.isMonthFirstDay() ? View.VISIBLE : View.INVISIBLE);
  holder.delV.setVisibility(lastSelOpt == position ? View.VISIBLE : View.INVISIBLE);
  holder.editV.setVisibility(lastSelOpt == position ? View.VISIBLE : View.INVISIBLE);
  if (recordDetailDO.getRecordMoney() < 0) {
    holder.outTv.setText(recordDetailDO.getRecordDesc() + ""String_Node_Str"" + String.format(mContext.getResources().getString(R.string.record_money_format),Math.abs(recordDetailDO.getRecordMoney())));
    holder.outRemarkTv.setText(recordDetailDO.getRemark());
  }
  if (recordDetailDO.getRecordMoney() > 0) {
    holder.inTv.setText(recordDetailDO.getRecordDesc() + ""String_Node_Str"" + String.format(mContext.getResources().getString(R.string.record_money_format),Math.abs(recordDetailDO.getRecordMoney())));
    holder.inRemarkTv.setText(""String_Node_Str"");
  }
  if (recordDetailDO.isMonthFirstDay()) {
    DateFormat format=new SimpleDateFormat(""String_Node_Str"");
    holder.inTv.setText(DateTimeUtil.isThisYear(recordDetailDO.getRecordDate()) ? ""String_Node_Str"" : format.format(recordDetailDO.getRecordDate()));
  }
 else {
    if (recordDetailDO.getTodayAllInMoney() >= 0 && recordDetailDO.isDayFirstDay()) {
      holder.inTv.setText(String.format(mContext.getResources().getString(R.string.record_money_format),Math.abs(recordDetailDO.getTodayAllInMoney())) + ""String_Node_Str"");
      holder.outRemarkTv.setText(""String_Node_Str"");
    }
  }
  if (recordDetailDO.getTodayAllOutMoney() <= 0 && recordDetailDO.isDayFirstDay()) {
    holder.outTv.setText(""String_Node_Str"" + String.format(mContext.getResources().getString(R.string.record_money_format),Math.abs(recordDetailDO.getTodayAllOutMoney())));
    holder.inRemarkTv.setText(""String_Node_Str"");
  }
  if (recordDetailDO.isMonthFirstDay()) {
    DateFormat format=new SimpleDateFormat(""String_Node_Str"");
    holder.recordDateTv.setText(format.format(recordDetailDO.getRecordDate()));
  }
 else {
    if (DateTimeUtil.isToday(recordDetailDO.getRecordDate())) {
      holder.recordDateTv.setText(""String_Node_Str"");
    }
 else {
      DateFormat format=new SimpleDateFormat(""String_Node_Str"");
      holder.recordDateTv.setText(format.format(recordDetailDO.getRecordDate()));
    }
  }
  holder.icon.setImageResource(IconTypeUtil.getTypeIcon(recordDetailDO.getIconId()));
  final ViewHolder finalHolder=holder;
  if (!recordDetailDO.isDayFirstDay() && !recordDetailDO.isMonthFirstDay()) {
    holder.icon.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (lastSelOpt != position) {
          lastSelOpt=position;
          notifyDataSetChanged();
          YoYo.with(Techniques.SlideInUp).duration(200).playOn(finalHolder.delV);
          YoYo.with(Techniques.SlideInDown).duration(200).playOn(finalHolder.editV);
        }
 else {
          resetOptStatus();
        }
      }
    }
);
  }
  holder.delV.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      final MaterialDialog materialDialog=new MaterialDialog(mContext);
      materialDialog.setTitle(mContext.getResources().getString(R.string.delete_record)).setMessage(""String_Node_Str"").setPositiveButton(mContext.getResources().getString(R.string.ok),new View.OnClickListener(){
        @Override public void onClick(        View v){
          final Record record=recordLocalDAO.getRecordById(mContext,recordDetailDO.getRecordID());
          record.setIsDel(true);
          recordManager.updateOldRecord(record,new Handler(){
            @Override public void handleMessage(            Message msg){
              super.handleMessage(msg);
              accountManager.updateAccountMoney(record.getAccountID(),-record.getRecordMoney(),new Handler(){
                @Override public void handleMessage(                Message msg){
                  super.handleMessage(msg);
                  ((MainActivity)mContext).getReloadAccountCallBack().reload(true);
                  ((MainActivity)mContext).getReloadAnalysisCallBack().reload(true);
                }
              }
);
            }
          }
);
          RecordDetailDO todayRecordDetailDO=recordDetailDOMap.get(recordDetailDO.getRecordDate());
          if (recordDetailDO.getRecordMoney() < 0) {
            todayRecordDetailDO.setTodayAllOutMoney(todayRecordDetailDO.getTodayAllOutMoney() - recordDetailDO.getRecordMoney());
          }
 else {
            todayRecordDetailDO.setTodayAllInMoney(todayRecordDetailDO.getTodayAllInMoney() - recordDetailDO.getRecordMoney());
          }
          if (recordDetailDOs.get(position - 1).isDayFirstDay() && (position == recordDetailDOs.size() - 1 || recordDetailDOs.get(position + 1).isDayFirstDay() || recordDetailDOs.get(position + 1).isMonthFirstDay())) {
            if (recordDetailDOs.get(position - 2).isMonthFirstDay() && (position == recordDetailDOs.size() - 1 || recordDetailDOs.get(position + 1).isMonthFirstDay())) {
              recordDetailDOs.remove(position - 2);
              recordDetailDOs.remove(position - 2);
              recordDetailDOs.remove(position - 2);
            }
 else {
              recordDetailDOs.remove(position - 1);
              recordDetailDOs.remove(position - 1);
            }
          }
 else {
            recordDetailDOs.remove(position);
          }
          if (recordDetailDOs.size() == 0) {
            recordFrg.resetFoot();
          }
          notifyDataSetChanged();
          materialDialog.dismiss();
        }
      }
).setNegativeButton(mContext.getResources().getString(R.string.cancel),new View.OnClickListener(){
        @Override public void onClick(        View v){
          materialDialog.dismiss();
        }
      }
).show();
    }
  }
);
  holder.editV.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(mContext,CreateOrEditRecordActivity.class);
      intent.putExtra(IntentConstant.OLD_RECORD,recordLocalDAO.getRecordById(mContext,recordDetailDO.getRecordID()));
      resetOptStatus();
      ((MainActivity)mContext).startActivityForResult(intent,MainActivity.REQUEST_RECORD);
    }
  }
);
  convertView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      resetOptStatus();
    }
  }
);
  return convertView;
}"
39383,"@Override public void onClick(View v){
  Intent intent=new Intent(getActivity(),CreateOrEditRecordActivity.class);
  getActivity().startActivityForResult(intent,MainActivity.REQUEST_RECORD);
}","@Override public void onClick(View v){
  mRecordAdapter.resetOptStatus();
  Intent intent=new Intent(getActivity(),CreateOrEditRecordActivity.class);
  getActivity().startActivityForResult(intent,MainActivity.REQUEST_RECORD);
}"
39384,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  recordManager=new RecordManager(getActivity());
  View view=inflater.inflate(R.layout.record_frg_layout,container,false);
  backGround=view.findViewById(R.id.background);
  mAddRecordBt=(FloatingActionButton)view.findViewById(R.id.add_new_record);
  mAddRecordBt.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(getActivity(),CreateOrEditRecordActivity.class);
      getActivity().startActivityForResult(intent,MainActivity.REQUEST_RECORD);
    }
  }
);
  foot=View.inflate(getActivity(),R.layout.record_foot,null);
  footTv=((TextView)foot.findViewById(R.id.foot_tip));
  nullTipTv=((TextView)view.findViewById(R.id.null_tip));
  recordLv=(ListView)view.findViewById(R.id.record_lv);
  recordLv.addFooterView(foot);
  recordDetailDOs=new ArrayList<>();
  mRecordAdapter=new RecordAdapter(getActivity(),recordDetailDOs,this);
  recordLv.setAdapter(mRecordAdapter);
  recordLv.setOverScrollMode(View.OVER_SCROLL_NEVER);
  reload(true);
  recordLv.setOnScrollListener(new AbsListView.OnScrollListener(){
    @Override public void onScrollStateChanged(    AbsListView view,    int scrollState){
    }
    @Override public void onScroll(    AbsListView view,    int firstVisibleItem,    int visibleItemCount,    int totalItemCount){
      if (totalItemCount == 0)       return;
      if (firstVisibleItem + visibleItemCount == totalItemCount && !isRefresh) {
        loadData();
      }
    }
  }
);
  ((MainActivity)getActivity()).setReloadRecordCallBack(this);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  recordManager=new RecordManager(getActivity());
  View view=inflater.inflate(R.layout.record_frg_layout,container,false);
  backGround=view.findViewById(R.id.background);
  mAddRecordBt=(FloatingActionButton)view.findViewById(R.id.add_new_record);
  mAddRecordBt.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mRecordAdapter.resetOptStatus();
      Intent intent=new Intent(getActivity(),CreateOrEditRecordActivity.class);
      getActivity().startActivityForResult(intent,MainActivity.REQUEST_RECORD);
    }
  }
);
  foot=View.inflate(getActivity(),R.layout.record_foot,null);
  footTv=((TextView)foot.findViewById(R.id.foot_tip));
  nullTipTv=((TextView)view.findViewById(R.id.null_tip));
  recordLv=(ListView)view.findViewById(R.id.record_lv);
  recordLv.addFooterView(foot);
  recordDetailDOs=new ArrayList<>();
  mRecordAdapter=new RecordAdapter(getActivity(),recordDetailDOs,this);
  recordLv.setAdapter(mRecordAdapter);
  recordLv.setOverScrollMode(View.OVER_SCROLL_NEVER);
  reload(true);
  recordLv.setOnScrollListener(new AbsListView.OnScrollListener(){
    @Override public void onScrollStateChanged(    AbsListView view,    int scrollState){
    }
    @Override public void onScroll(    AbsListView view,    int firstVisibleItem,    int visibleItemCount,    int totalItemCount){
      if (totalItemCount == 0)       return;
      if (firstVisibleItem + visibleItemCount == totalItemCount && !isRefresh) {
        loadData();
      }
    }
  }
);
  ((MainActivity)getActivity()).setReloadRecordCallBack(this);
  return view;
}"
39385,"@Override protected void onResume(){
  if (getRequestedOrientation() != ActivityInfo.SCREEN_ORIENTATION_USER_PORTRAIT) {
    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_USER_PORTRAIT);
  }
  super.onResume();
  MobclickAgent.onResume(this);
  mainColor=this.getResources().getColor(ThemeUtil.getTheme(this).getMainColorID());
  mainDarkColor=this.getResources().getColor(ThemeUtil.getTheme(this).getMainDarkColorID());
  textColor=this.getResources().getColor(ThemeUtil.getTheme(this).getTextColorID());
  if (getSupportActionBar() != null) {
    getSupportActionBar().setBackgroundDrawable(new ColorDrawable(mainColor));
    StatusBarCompat.compat(this,mainDarkColor);
  }
  if (headView != null)   headView.setBackgroundColor(mainColor);
}","@Override protected void onResume(){
  if (getRequestedOrientation() != ActivityInfo.SCREEN_ORIENTATION_USER_PORTRAIT) {
    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_USER_PORTRAIT);
  }
  super.onResume();
  MobclickAgent.onResume(this);
  mainColor=this.getResources().getColor(ThemeUtil.getTheme(this).getMainColorID());
  mainDarkColor=this.getResources().getColor(ThemeUtil.getTheme(this).getMainDarkColorID());
  textColor=this.getResources().getColor(ThemeUtil.getTheme(this).getTextColorID());
  if (getSupportActionBar() != null) {
    getSupportActionBar().setBackgroundDrawable(new ColorDrawable(mainColor));
    if ((boolean)SPUtils.get(this,true,getResources().getString(R.string.immersive_status_bar),false))     StatusBarCompat.compat(this,mainColor);
 else     StatusBarCompat.compat(this,mainDarkColor);
  }
  if (headView != null)   headView.setBackgroundColor(mainColor);
}"
39386,"@Override public void onCreate(){
  super.onCreate();
  AlarmUtil.createAlarm(this);
}","@Override public void onCreate(){
  super.onCreate();
  if ((boolean)SPUtils.get(this,true,Constant.SP_ALARM_EVERY_DAY,false))   AlarmUtil.createAlarm(this);
}"
39387,"@Override protected void onResume(){
  super.onResume();
}","@Override protected void onResume(){
  super.onResume();
  mSubmitButton.setBackgroundTintList(getResources().getColorStateList(getMainTheme().getMainColorID()));
}"
39388,"@Override protected void initWidget(){
  mEtRecordName=(EditText)findViewById(R.id.record_name);
  mIvRecordIcon=(ImageView)findViewById(R.id.record_icon);
  mAddFab=(FloatingActionButton)findViewById(R.id.fab);
  mAddFab.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      addNewRecord(view);
    }
  }
);
  mIonsGV=(GridView)findViewById(R.id.record_icon_gv);
  mIconsList=new ArrayList<>();
  for (int i=0; i < Constant.RecordTypeConstant.ICON_TYPE_COUNT; i++) {
    mIconsList.add(i);
  }
  mCurrentIcon=0;
  mIvRecordIcon.setImageResource(getTypeIconId(mCurrentIcon));
  mIonsGV.setAdapter(new RecordTypeIconAdapter(this,mIconsList));
  mIonsGV.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      mCurrentIcon=mIconsList.get(position);
      mIvRecordIcon.setImageResource(getTypeIconId(mCurrentIcon));
    }
  }
);
}","@Override protected void initWidget(){
  mEtRecordName=(EditText)findViewById(R.id.record_name);
  mIvRecordIcon=(ImageView)findViewById(R.id.record_icon);
  mAddFab=(FloatingActionButton)findViewById(R.id.fab);
  mAddFab.setBackgroundTintList(getResources().getColorStateList(getMainTheme().getMainColorID()));
  mAddFab.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      addNewRecord(view);
    }
  }
);
  mIonsGV=(GridView)findViewById(R.id.record_icon_gv);
  mIconsList=new ArrayList<>();
  for (int i=0; i < Constant.RecordTypeConstant.ICON_TYPE_COUNT; i++) {
    mIconsList.add(i);
  }
  mCurrentIcon=0;
  mIvRecordIcon.setImageResource(getTypeIconId(mCurrentIcon));
  mIonsGV.setAdapter(new RecordTypeIconAdapter(this,mIconsList));
  mIonsGV.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      mCurrentIcon=mIconsList.get(position);
      mIvRecordIcon.setImageResource(getTypeIconId(mCurrentIcon));
    }
  }
);
}"
39389,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.preferences);
  mGestureLockCheck=(CheckBoxPreference)findPreference(GESTURE_LOCK);
  mRemindCheck=(CheckBoxPreference)findPreference(REMIND_SETTING);
  mRemindCheck.setOnPreferenceChangeListener(this);
  mGestureLockCheck.setOnPreferenceChangeListener(this);
  long alarmTime=SPUtils.gets(context,Constant.SP_ALARM_TIME,0l);
  if (alarmTime > 0) {
    Date date=new Date(alarmTime);
    mRemindCheck.setSummaryOn(""String_Node_Str"" + format.format(date) + ""String_Node_Str"");
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.preferences);
  mGestureLockCheck=(CheckBoxPreference)findPreference(GESTURE_LOCK);
  mRemindCheck=(CheckBoxPreference)findPreference(REMIND_SETTING);
  mImmersiveCheck=(CheckBoxPreference)findPreference(IMMERSIVE_STATUS_BAR);
  mCommonCateGory=(MyPreferenceCategory)findPreference(""String_Node_Str"");
  mRemindCheck.setOnPreferenceChangeListener(this);
  mGestureLockCheck.setOnPreferenceChangeListener(this);
  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.KITKAT) {
    mCommonCateGory.removePreference(mImmersiveCheck);
  }
 else {
    mImmersiveCheck.setOnPreferenceChangeListener(this);
  }
  long alarmTime=SPUtils.gets(context,Constant.SP_ALARM_TIME,0l);
  if (alarmTime > 0) {
    Date date=new Date(alarmTime);
    mRemindCheck.setSummaryOn(""String_Node_Str"" + format.format(date) + ""String_Node_Str"");
  }
}"
39390,"@Override public boolean onPreferenceChange(Preference preference,Object newValue){
  if (preference == mGestureLockCheck) {
    if (mGestureLockCheck.isChecked()) {
      SPUtils.put(context,Constant.SP_GESTURE,""String_Node_Str"");
      mGestureLockCheck.setChecked(false);
    }
 else {
      if (MyAVUser.getCurrentUser() != null) {
        Intent intent=new Intent(context,GestureLockActivity.class);
        intent.putExtra(IntentConstant.SETTING_MODE,true);
        startActivity(intent);
      }
 else {
        SnackBarUtil.showSnackInfo(getView(),context,""String_Node_Str"");
      }
    }
  }
 else   if (preference == mRemindCheck) {
    if (mRemindCheck.isChecked()) {
      SPUtils.put(context,Constant.SP_ALARM_TIME,0l);
      mRemindCheck.setChecked(false);
    }
 else {
      final Calendar calendar=Calendar.getInstance();
      TimePickerDialog timePickerDialog=TimePickerDialog.newInstance(new TimePickerDialog.OnTimeSetListener(){
        @Override public void onTimeSet(        RadialPickerLayout view,        int hourOfDay,        int minute,        int second){
          calendar.set(Calendar.HOUR_OF_DAY,hourOfDay);
          calendar.set(Calendar.MINUTE,minute);
          calendar.set(Calendar.SECOND,0);
          calendar.set(Calendar.MILLISECOND,0);
          SPUtils.put(context,Constant.SP_ALARM_TIME,calendar.getTimeInMillis());
          mRemindCheck.setChecked(true);
          mRemindCheck.setSummaryOn(""String_Node_Str"" + format.format(calendar.getTime()) + ""String_Node_Str"");
          AlarmUtil.createAlarm(context);
        }
      }
,calendar.get(Calendar.HOUR_OF_DAY),calendar.get(Calendar.MINUTE),true);
      timePickerDialog.setAccentColor(getResources().getColor(ThemeUtil.getTheme(context).getMainColorID()));
      timePickerDialog.show(getFragmentManager(),""String_Node_Str"");
    }
  }
  return false;
}","@Override public boolean onPreferenceChange(Preference preference,Object newValue){
  if (preference == mGestureLockCheck) {
    if (mGestureLockCheck.isChecked()) {
      SPUtils.put(context,Constant.SP_GESTURE,""String_Node_Str"");
      mGestureLockCheck.setChecked(false);
    }
 else {
      if (MyAVUser.getCurrentUser() != null) {
        Intent intent=new Intent(context,GestureLockActivity.class);
        intent.putExtra(IntentConstant.SETTING_MODE,true);
        startActivity(intent);
      }
 else {
        SnackBarUtil.showSnackInfo(getView(),context,""String_Node_Str"");
      }
    }
  }
 else   if (preference == mRemindCheck) {
    if (mRemindCheck.isChecked()) {
      SPUtils.put(context,Constant.SP_ALARM_TIME,0l);
      mRemindCheck.setChecked(false);
      AlarmUtil.createAlarmOrCancel(context,false);
    }
 else {
      final Calendar calendar=Calendar.getInstance();
      TimePickerDialog timePickerDialog=TimePickerDialog.newInstance(new TimePickerDialog.OnTimeSetListener(){
        @Override public void onTimeSet(        RadialPickerLayout view,        int hourOfDay,        int minute,        int second){
          calendar.set(Calendar.HOUR_OF_DAY,hourOfDay);
          calendar.set(Calendar.MINUTE,minute);
          calendar.set(Calendar.SECOND,0);
          calendar.set(Calendar.MILLISECOND,0);
          SPUtils.put(context,Constant.SP_ALARM_TIME,calendar.getTimeInMillis());
          mRemindCheck.setChecked(true);
          mRemindCheck.setSummaryOn(""String_Node_Str"" + format.format(calendar.getTime()) + ""String_Node_Str"");
          AlarmUtil.createAlarm(context);
        }
      }
,calendar.get(Calendar.HOUR_OF_DAY),calendar.get(Calendar.MINUTE),true);
      timePickerDialog.setAccentColor(getResources().getColor(ThemeUtil.getTheme(context).getMainColorID()));
      timePickerDialog.show(getFragmentManager(),""String_Node_Str"");
    }
  }
 else   if (preference == mImmersiveCheck) {
    if (mImmersiveCheck.isChecked()) {
      mImmersiveCheck.setChecked(false);
      StatusBarCompat.compat((Activity)context,context.getResources().getColor(ThemeUtil.getTheme(context).getMainDarkColorID()));
    }
 else {
      mImmersiveCheck.setChecked(true);
      StatusBarCompat.compat((Activity)context,context.getResources().getColor(ThemeUtil.getTheme(context).getMainColorID()));
    }
  }
  return false;
}"
39391,"@Override protected void initWidget(){
  linkBt=(FloatingActionButton)findViewById(R.id.fab);
  linkRecordsLv=(ListView)findViewById(R.id.link_records);
  linkRecordsLv.setVisibility(View.GONE);
  View head=View.inflate(this,R.layout.item_link_head,null);
  myHead=(CircleImageView)head.findViewById(R.id.my_head);
  otherHead=(CircleImageView)head.findViewById(R.id.other_head);
  myName=(TextView)head.findViewById(R.id.my_name);
  otherName=(TextView)head.findViewById(R.id.other_name);
  ((ImageView)head.findViewById(R.id.link_image)).setColorFilter(getColor(this,getMainTheme().getMainColorID()));
  head.findViewById(R.id.link_image).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      final MaterialDialog materialDialog=new MaterialDialog(UserLinkActivity.this);
      materialDialog.setTitle(""String_Node_Str"").setMessage(""String_Node_Str"");
      materialDialog.setPositiveButton(""String_Node_Str"",new View.OnClickListener(){
        @Override public void onClick(        View v){
          userLink.deleteInBackground(new DeleteCallback(){
            @Override public void done(            AVException e){
              materialDialog.dismiss();
              linkRecordsLv.setVisibility(View.GONE);
              linkBt.setVisibility(View.VISIBLE);
              otherUserName=""String_Node_Str"";
              UserManager.userLink=null;
            }
          }
);
        }
      }
);
      materialDialog.setNegativeButton(""String_Node_Str"",new View.OnClickListener(){
        @Override public void onClick(        View v){
          materialDialog.dismiss();
        }
      }
);
      materialDialog.show();
    }
  }
);
  recordDetailDOs=new ArrayList<>();
  accountRecordAdapter=new AccountRecordAdapter(this,recordDetailDOs);
  linkRecordsLv.addHeaderView(head);
  linkRecordsLv.setAdapter(accountRecordAdapter);
  initUserLink();
}","@Override protected void initWidget(){
  linkBt=(FloatingActionButton)findViewById(R.id.fab);
  linkRecordsLv=(ListView)findViewById(R.id.link_records);
  linkRecordsLv.setVisibility(View.GONE);
  linkBt.setBackgroundTintList(getResources().getColorStateList(getMainTheme().getMainColorID()));
  View head=View.inflate(this,R.layout.item_link_head,null);
  myHead=(CircleImageView)head.findViewById(R.id.my_head);
  otherHead=(CircleImageView)head.findViewById(R.id.other_head);
  myName=(TextView)head.findViewById(R.id.my_name);
  otherName=(TextView)head.findViewById(R.id.other_name);
  ((ImageView)head.findViewById(R.id.link_image)).setColorFilter(getColor(this,getMainTheme().getMainColorID()));
  head.findViewById(R.id.link_image).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      final MaterialDialog materialDialog=new MaterialDialog(UserLinkActivity.this);
      materialDialog.setTitle(""String_Node_Str"").setMessage(""String_Node_Str"");
      materialDialog.setPositiveButton(""String_Node_Str"",new View.OnClickListener(){
        @Override public void onClick(        View v){
          userLink.deleteInBackground(new DeleteCallback(){
            @Override public void done(            AVException e){
              materialDialog.dismiss();
              linkRecordsLv.setVisibility(View.GONE);
              linkBt.setVisibility(View.VISIBLE);
              otherUserName=""String_Node_Str"";
              UserManager.userLink=null;
            }
          }
);
        }
      }
);
      materialDialog.setNegativeButton(""String_Node_Str"",new View.OnClickListener(){
        @Override public void onClick(        View v){
          materialDialog.dismiss();
        }
      }
);
      materialDialog.show();
    }
  }
);
  recordDetailDOs=new ArrayList<>();
  accountRecordAdapter=new AccountRecordAdapter(this,recordDetailDOs);
  linkRecordsLv.addHeaderView(head);
  linkRecordsLv.setAdapter(accountRecordAdapter);
  initUserLink();
}"
39392,"public static void createAlarm(Context context){
  long alarmTime=SPUtils.gets(context,Constant.SP_ALARM_TIME,0l);
  Calendar calendarOld=Calendar.getInstance();
  calendarOld.setTimeInMillis(alarmTime);
  long curTime=System.currentTimeMillis();
  Intent intent=new Intent(context,AlarmReceiver.class);
  PendingIntent sender=PendingIntent.getBroadcast(context,0,intent,0);
  Calendar calendar=Calendar.getInstance();
  calendar.setTimeInMillis(curTime);
  calendar.set(Calendar.SECOND,0);
  calendar.set(Calendar.MILLISECOND,0);
  calendar.set(Calendar.HOUR_OF_DAY,calendarOld.get(Calendar.HOUR_OF_DAY));
  calendar.set(Calendar.MINUTE,calendarOld.get(Calendar.MINUTE));
  if (calendar.getTimeInMillis() < curTime) {
    calendar.add(Calendar.DATE,1);
  }
  DateFormat format=new SimpleDateFormat(""String_Node_Str"");
  LogUtils.d(""String_Node_Str"",""String_Node_Str"" + format.format(calendar.getTime()));
  AlarmManager manager=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);
  manager.cancel(sender);
  manager.set(AlarmManager.RTC_WAKEUP,calendar.getTimeInMillis(),sender);
}","public static void createAlarm(Context context){
  createAlarmOrCancel(context,true);
}"
39393,"private void refreshPie(int delMon){
  Calendar calendar=Calendar.getInstance();
  calendar.add(Calendar.MONTH,delMon);
  calendar.set(Calendar.DAY_OF_MONTH,1);
  calendar.set(Calendar.HOUR_OF_DAY,0);
  calendar.set(Calendar.MINUTE,0);
  calendar.set(Calendar.SECOND,0);
  calendar.set(Calendar.MILLISECOND,0);
  int year=calendar.get(Calendar.YEAR);
  int month=calendar.get(Calendar.MONTH);
  long start=calendar.getTimeInMillis();
  calendar.add(Calendar.MONTH,1);
  calendar.add(Calendar.DATE,-1);
  if (DateTimeUtil.isThisYear(calendar.getTime())) {
    dateTv.setText(format1.format(new Date(start)) + ""String_Node_Str"" + format2.format(calendar.getTime()));
  }
 else {
    dateTv.setText(format3.format(new Date(start)) + ""String_Node_Str"" + format2.format(calendar.getTime()));
  }
  mRecordManager.getOutOrInRecordByMonth(new Handler(){
    @Override public void handleMessage(    Message msg){
      super.handleMessage(msg);
      chartRecordDoList.clear();
      chartRecordDoList.addAll((List<ChartRecordDo>)msg.obj);
      recordPieAnalysisAdapter.notifyDataSetChanged();
      mTypePieChart.clear();
      xVals1.clear();
      yVals1.clear();
      List<ChartRecordDo> list=(List<ChartRecordDo>)msg.obj;
      ArrayList<Integer> colors=new ArrayList<Integer>();
      allOutOrInMoney=0;
      int i=0;
      for (      ChartRecordDo chartRecordDo : list) {
        allOutOrInMoney+=Math.abs(TextUtil.gwtFormatNum(chartRecordDo.getRecordMoney()));
        yVals1.add(new Entry(Math.abs(new Double(TextUtil.gwtFormatNum(chartRecordDo.getRecordMoney())).floatValue()),i));
        xVals1.add(chartRecordDo.getRecordDesc());
        colors.add(IconTypeUtil.getTypeIconOrColor(chartRecordDo.getIconId(),false));
        i++;
      }
      PieDataSet dataSet=new PieDataSet(yVals1,""String_Node_Str"");
      dataSet.setSliceSpace(1f);
      dataSet.setSelectionShift(2f);
      dataSet.setColors(colors);
      PieData data=new PieData(xVals1,dataSet);
      data.setDrawValues(false);
      mTypePieChart.setData(data);
      if (list.size() == 0) {
        mTypePieChart.setCenterText(""String_Node_Str"" + (pieOut ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
        mTypePieChart.setCenterTextColor(Color.RED);
      }
 else {
        mTypePieChart.setCenterTextColor(mainColor);
        mTypePieChart.setCenterText((pieOut ? ""String_Node_Str"" : ""String_Node_Str"") + TextUtil.getFormatMoney(allOutOrInMoney));
      }
      mTypePieChart.animateXY(500,500);
    }
  }
,pieOut,year,month);
}","private void refreshPie(int delMon){
  Calendar calendar=Calendar.getInstance();
  calendar.add(Calendar.MONTH,delMon);
  calendar.set(Calendar.DAY_OF_MONTH,1);
  calendar.set(Calendar.HOUR_OF_DAY,0);
  calendar.set(Calendar.MINUTE,0);
  calendar.set(Calendar.SECOND,0);
  calendar.set(Calendar.MILLISECOND,0);
  int year=calendar.get(Calendar.YEAR);
  int month=calendar.get(Calendar.MONTH);
  long start=calendar.getTimeInMillis();
  calendar.add(Calendar.MONTH,1);
  calendar.add(Calendar.DATE,-1);
  if (DateTimeUtil.isThisYear(calendar.getTime())) {
    dateTv.setText(format1.format(new Date(start)) + ""String_Node_Str"" + format2.format(calendar.getTime()));
  }
 else {
    dateTv.setText(format3.format(new Date(start)) + ""String_Node_Str"" + format2.format(calendar.getTime()));
  }
  mRecordManager.getOutOrInRecordByMonth(new Handler(){
    @Override public void handleMessage(    Message msg){
      super.handleMessage(msg);
      chartRecordDoList.clear();
      chartRecordDoList.addAll((List<ChartRecordDo>)msg.obj);
      recordPieAnalysisAdapter.notifyDataSetChanged();
      mTypePieChart.clear();
      xVals1.clear();
      yVals1.clear();
      List<ChartRecordDo> list=(List<ChartRecordDo>)msg.obj;
      ArrayList<Integer> colors=new ArrayList<Integer>();
      allOutOrInMoney=0;
      int i=0;
      double min=Double.MAX_VALUE;
      for (      ChartRecordDo chartRecordDo : list) {
        if (Math.abs(TextUtil.gwtFormatNum(chartRecordDo.getRecordMoney())) < min)         min=Math.abs(TextUtil.gwtFormatNum(chartRecordDo.getRecordMoney()));
        allOutOrInMoney+=Math.abs(TextUtil.gwtFormatNum(chartRecordDo.getRecordMoney()));
        yVals1.add(new Entry(Math.abs(new Double(TextUtil.gwtFormatNum(chartRecordDo.getRecordMoney())).floatValue()),i));
        xVals1.add(chartRecordDo.getRecordDesc());
        colors.add(IconTypeUtil.getTypeIconOrColor(chartRecordDo.getIconId(),false));
        i++;
      }
      PieDataSet dataSet=new PieDataSet(yVals1,""String_Node_Str"");
      if (min / allOutOrInMoney > 0.001) {
        dataSet.setSliceSpace(1f);
      }
      dataSet.setSelectionShift(2f);
      dataSet.setColors(colors);
      PieData data=new PieData(xVals1,dataSet);
      data.setDrawValues(false);
      mTypePieChart.setData(data);
      if (list.size() == 0) {
        mTypePieChart.setCenterText(""String_Node_Str"" + (pieOut ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
        mTypePieChart.setCenterTextColor(Color.RED);
      }
 else {
        mTypePieChart.setCenterTextColor(mainColor);
        mTypePieChart.setCenterText((pieOut ? ""String_Node_Str"" : ""String_Node_Str"") + TextUtil.getFormatMoney(allOutOrInMoney));
      }
      mTypePieChart.animateXY(500,500);
    }
  }
,pieOut,year,month);
}"
39394,"@Override public void handleMessage(Message msg){
  super.handleMessage(msg);
  chartRecordDoList.clear();
  chartRecordDoList.addAll((List<ChartRecordDo>)msg.obj);
  recordPieAnalysisAdapter.notifyDataSetChanged();
  mTypePieChart.clear();
  xVals1.clear();
  yVals1.clear();
  List<ChartRecordDo> list=(List<ChartRecordDo>)msg.obj;
  ArrayList<Integer> colors=new ArrayList<Integer>();
  allOutOrInMoney=0;
  int i=0;
  for (  ChartRecordDo chartRecordDo : list) {
    allOutOrInMoney+=Math.abs(TextUtil.gwtFormatNum(chartRecordDo.getRecordMoney()));
    yVals1.add(new Entry(Math.abs(new Double(TextUtil.gwtFormatNum(chartRecordDo.getRecordMoney())).floatValue()),i));
    xVals1.add(chartRecordDo.getRecordDesc());
    colors.add(IconTypeUtil.getTypeIconOrColor(chartRecordDo.getIconId(),false));
    i++;
  }
  PieDataSet dataSet=new PieDataSet(yVals1,""String_Node_Str"");
  dataSet.setSliceSpace(1f);
  dataSet.setSelectionShift(2f);
  dataSet.setColors(colors);
  PieData data=new PieData(xVals1,dataSet);
  data.setDrawValues(false);
  mTypePieChart.setData(data);
  if (list.size() == 0) {
    mTypePieChart.setCenterText(""String_Node_Str"" + (pieOut ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
    mTypePieChart.setCenterTextColor(Color.RED);
  }
 else {
    mTypePieChart.setCenterTextColor(mainColor);
    mTypePieChart.setCenterText((pieOut ? ""String_Node_Str"" : ""String_Node_Str"") + TextUtil.getFormatMoney(allOutOrInMoney));
  }
  mTypePieChart.animateXY(500,500);
}","@Override public void handleMessage(Message msg){
  super.handleMessage(msg);
  chartRecordDoList.clear();
  chartRecordDoList.addAll((List<ChartRecordDo>)msg.obj);
  recordPieAnalysisAdapter.notifyDataSetChanged();
  mTypePieChart.clear();
  xVals1.clear();
  yVals1.clear();
  List<ChartRecordDo> list=(List<ChartRecordDo>)msg.obj;
  ArrayList<Integer> colors=new ArrayList<Integer>();
  allOutOrInMoney=0;
  int i=0;
  double min=Double.MAX_VALUE;
  for (  ChartRecordDo chartRecordDo : list) {
    if (Math.abs(TextUtil.gwtFormatNum(chartRecordDo.getRecordMoney())) < min)     min=Math.abs(TextUtil.gwtFormatNum(chartRecordDo.getRecordMoney()));
    allOutOrInMoney+=Math.abs(TextUtil.gwtFormatNum(chartRecordDo.getRecordMoney()));
    yVals1.add(new Entry(Math.abs(new Double(TextUtil.gwtFormatNum(chartRecordDo.getRecordMoney())).floatValue()),i));
    xVals1.add(chartRecordDo.getRecordDesc());
    colors.add(IconTypeUtil.getTypeIconOrColor(chartRecordDo.getIconId(),false));
    i++;
  }
  PieDataSet dataSet=new PieDataSet(yVals1,""String_Node_Str"");
  if (min / allOutOrInMoney > 0.001) {
    dataSet.setSliceSpace(1f);
  }
  dataSet.setSelectionShift(2f);
  dataSet.setColors(colors);
  PieData data=new PieData(xVals1,dataSet);
  data.setDrawValues(false);
  mTypePieChart.setData(data);
  if (list.size() == 0) {
    mTypePieChart.setCenterText(""String_Node_Str"" + (pieOut ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
    mTypePieChart.setCenterTextColor(Color.RED);
  }
 else {
    mTypePieChart.setCenterTextColor(mainColor);
    mTypePieChart.setCenterText((pieOut ? ""String_Node_Str"" : ""String_Node_Str"") + TextUtil.getFormatMoney(allOutOrInMoney));
  }
  mTypePieChart.animateXY(500,500);
}"
39395,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_gesture_lock);
  mGestureLockViewGroup=(GestureLockViewGroup)findViewById(R.id.id_gestureLockViewGroup);
  mForget=(TextView)findViewById(R.id.forget_secret);
  isSetting=getIntent().getBooleanExtra(IntentConstant.SETTING_MODE,false);
  mHeadImg=(CircleImageView)findViewById(R.id.profile_image);
  new UserManager(this).getMe(new Handler(){
    @Override public void handleMessage(    Message msg){
      super.handleMessage(msg);
      if (msg.what == Constant.MSG_SUCCESS) {
        User user=(User)msg.obj;
        Glide.with(GestureLockActivity.this.getApplicationContext()).load(user.getHeadImage()).placeholder(R.mipmap.suda).into(mHeadImg);
      }
    }
  }
);
  mForget.setText(Html.fromHtml(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""));
  mForget.setVisibility(isSetting ? View.INVISIBLE : View.VISIBLE);
  mForget.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(GestureLockActivity.this,LoginActivity.class);
      intent.putExtra(IntentConstant.FORGET_GESTURE,true);
      startActivityForResult(intent,REQUEST_CODE_FORGET_GESTURE);
    }
  }
);
  if (!isSetting) {
    secret=(String)SPUtils.get(this,Constant.SP_GESTURE,""String_Node_Str"");
    mGestureLockViewGroup.setAnswer(secret);
  }
  if (TextUtils.isEmpty(secret) && !isSetting) {
    enterMain();
  }
  mTvTip=(TextView)findViewById(R.id.setting_tips);
  mTvTip.setText(""String_Node_Str"");
  mGestureLockViewGroup.setIsSetting(isSetting);
  mGestureLockViewGroup.setUnMatchExceedBoundary(mTryTime);
  mGestureLockViewGroup.setOnGestureLockViewListener(new GestureLockViewGroup.OnGestureLockViewListener(){
    @Override public void onUnmatchedExceedBoundary(    int errorCode){
      if (errorCode == GestureLockViewGroup.CODE_IN_VALID) {
        mTvTip.setText(""String_Node_Str"");
      }
      if (errorCode == GestureLockViewGroup.CODE_NOT_SAME) {
        mTvTip.setText(""String_Node_Str"");
        new Handler().postDelayed(new Runnable(){
          @Override public void run(){
            new UserManager(GestureLockActivity.this).logOut();
            enterMain();
          }
        }
,300);
      }
    }
    @Override public void onGestureEvent(    boolean matched){
      if (!matched) {
        mTryTime--;
        mTvTip.setText(""String_Node_Str"" + mTryTime + ""String_Node_Str"");
      }
 else       enterMain();
    }
    @Override public void onBlockSelected(    int cId){
    }
    @Override public void showSelect(    String value){
      if (isSetting) {
        if (TextUtils.isEmpty(secret)) {
          secret=value;
          mTvTip.setText(""String_Node_Str"");
        }
 else {
          if (!value.equals(secret)) {
            mTvTip.setText(""String_Node_Str"");
          }
 else           if (value.equals(secret)) {
            mTvTip.setText(""String_Node_Str"");
            SPUtils.put(GestureLockActivity.this,Constant.SP_GESTURE,secret);
            finish();
          }
        }
      }
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_gesture_lock);
  mGestureLockViewGroup=(GestureLockViewGroup)findViewById(R.id.id_gestureLockViewGroup);
  mForget=(TextView)findViewById(R.id.forget_secret);
  isSetting=getIntent().getBooleanExtra(IntentConstant.SETTING_MODE,false);
  mHeadImg=(CircleImageView)findViewById(R.id.profile_image);
  new UserManager(this).getMe(new Handler(){
    @Override public void handleMessage(    Message msg){
      super.handleMessage(msg);
      if (msg.what == Constant.MSG_SUCCESS) {
        User user=(User)msg.obj;
        Glide.with(GestureLockActivity.this.getApplicationContext()).load(user.getHeadImage()).error(R.mipmap.suda).into(mHeadImg);
      }
    }
  }
);
  mForget.setText(Html.fromHtml(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""));
  mForget.setVisibility(isSetting ? View.INVISIBLE : View.VISIBLE);
  mForget.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(GestureLockActivity.this,LoginActivity.class);
      intent.putExtra(IntentConstant.FORGET_GESTURE,true);
      startActivityForResult(intent,REQUEST_CODE_FORGET_GESTURE);
    }
  }
);
  if (!isSetting) {
    secret=(String)SPUtils.get(this,Constant.SP_GESTURE,""String_Node_Str"");
    mGestureLockViewGroup.setAnswer(secret);
  }
  if (TextUtils.isEmpty(secret) && !isSetting) {
    enterMain();
  }
  mTvTip=(TextView)findViewById(R.id.setting_tips);
  mTvTip.setText(""String_Node_Str"");
  mGestureLockViewGroup.setIsSetting(isSetting);
  mGestureLockViewGroup.setUnMatchExceedBoundary(mTryTime);
  mGestureLockViewGroup.setOnGestureLockViewListener(new GestureLockViewGroup.OnGestureLockViewListener(){
    @Override public void onUnmatchedExceedBoundary(    int errorCode){
      if (errorCode == GestureLockViewGroup.CODE_IN_VALID) {
        mTvTip.setText(""String_Node_Str"");
      }
      if (errorCode == GestureLockViewGroup.CODE_NOT_SAME) {
        mTvTip.setText(""String_Node_Str"");
        new Handler().postDelayed(new Runnable(){
          @Override public void run(){
            new UserManager(GestureLockActivity.this).logOut();
            enterMain();
          }
        }
,300);
      }
    }
    @Override public void onGestureEvent(    boolean matched){
      if (!matched) {
        mTryTime--;
        mTvTip.setText(""String_Node_Str"" + mTryTime + ""String_Node_Str"");
      }
 else       enterMain();
    }
    @Override public void onBlockSelected(    int cId){
    }
    @Override public void showSelect(    String value){
      if (isSetting) {
        if (TextUtils.isEmpty(secret)) {
          secret=value;
          mTvTip.setText(""String_Node_Str"");
        }
 else {
          if (!value.equals(secret)) {
            mTvTip.setText(""String_Node_Str"");
          }
 else           if (value.equals(secret)) {
            mTvTip.setText(""String_Node_Str"");
            SPUtils.put(GestureLockActivity.this,Constant.SP_GESTURE,secret);
            finish();
          }
        }
      }
    }
  }
);
}"
39396,"@Override public void handleMessage(Message msg){
  super.handleMessage(msg);
  if (msg.what == Constant.MSG_SUCCESS) {
    User user=(User)msg.obj;
    Glide.with(GestureLockActivity.this.getApplicationContext()).load(user.getHeadImage()).placeholder(R.mipmap.suda).into(mHeadImg);
  }
}","@Override public void handleMessage(Message msg){
  super.handleMessage(msg);
  if (msg.what == Constant.MSG_SUCCESS) {
    User user=(User)msg.obj;
    Glide.with(GestureLockActivity.this.getApplicationContext()).load(user.getHeadImage()).error(R.mipmap.suda).into(mHeadImg);
  }
}"
39397,"private void initRecordData(){
  recordDetailDOs.clear();
  MyAVUser myAVUser=new MyAVUser();
  myAVUser.setObjectId(otherUser.getUserId());
  AVQuery<AVRecord> query=AVObject.getQuery(AVRecord.class);
  query.whereEqualTo(AVRecord.USER,myAVUser);
  query.whereEqualTo(AVRecord.RECORD_TYPE,-1);
  query.whereEqualTo(AVRecord.RECORD_IS_DEL,false);
  query.orderByDescending(AVRecord.RECORD_ID);
  query.findInBackground(new FindCallback<AVRecord>(){
    @Override public void done(    List<AVRecord> list,    AVException e){
      if (e == null) {
        for (        AVRecord avRecord : list) {
          RecordDetailDO recordDetailDO=new RecordDetailDO();
          recordDetailDO.setRecordID(-100);
          recordDetailDO.setIconId(avRecord.getIconID());
          recordDetailDO.setRecordDate(avRecord.getRecordDate());
          recordDetailDO.setRecordMoney(avRecord.getRecordMoney());
          recordDetailDO.setRemark(avRecord.getRemark());
          recordDetailDO.setIconId(avRecord.getIconID());
          recordDetailDO.setRecordDesc(avRecord.getRecordName());
          if (avRecord.getRecordTypeId() < 1000) {
            RecordType recordType=recordTypeLocalDao.getRecordTypeById(UserLinkActivity.this,avRecord.getRecordTypeId());
            recordDetailDO.setIconId(recordType.getRecordIcon());
            recordDetailDO.setRecordDesc(recordType.getRecordDesc());
          }
          recordDetailDOs.add(recordDetailDO);
        }
        accountRecordAdapter.notifyDataSetChanged();
      }
    }
  }
);
}","private void initRecordData(){
  recordDetailDOs.clear();
  MyAVUser myAVUser=new MyAVUser();
  myAVUser.setObjectId(otherUser.getUserId());
  AVQuery<AVRecord> query=AVObject.getQuery(AVRecord.class);
  query.whereEqualTo(AVRecord.USER,myAVUser);
  query.whereEqualTo(AVRecord.RECORD_TYPE,-1);
  query.whereEqualTo(AVRecord.RECORD_IS_DEL,false);
  query.orderByDescending(AVRecord.RECORD_DATE);
  query.addDescendingOrder(AVRecord.RECORD_ID);
  query.findInBackground(new FindCallback<AVRecord>(){
    @Override public void done(    List<AVRecord> list,    AVException e){
      if (e == null) {
        for (        AVRecord avRecord : list) {
          RecordDetailDO recordDetailDO=new RecordDetailDO();
          recordDetailDO.setRecordID(-100);
          recordDetailDO.setIconId(avRecord.getIconID());
          recordDetailDO.setRecordDate(avRecord.getRecordDate());
          recordDetailDO.setRecordMoney(avRecord.getRecordMoney());
          recordDetailDO.setRemark(avRecord.getRemark());
          recordDetailDO.setIconId(avRecord.getIconID());
          recordDetailDO.setRecordDesc(avRecord.getRecordName());
          if (avRecord.getRecordTypeId() < 1000) {
            RecordType recordType=recordTypeLocalDao.getRecordTypeById(UserLinkActivity.this,avRecord.getRecordTypeId());
            recordDetailDO.setIconId(recordType.getRecordIcon());
            recordDetailDO.setRecordDesc(recordType.getRecordDesc());
          }
          recordDetailDOs.add(recordDetailDO);
        }
        accountRecordAdapter.notifyDataSetChanged();
      }
    }
  }
);
}"
39398,"private void refreshPie(){
  mRecordManager.getOutOrInRecordThisMonth(new Handler(){
    @Override public void handleMessage(    Message msg){
      super.handleMessage(msg);
      mTypePieChart.clear();
      xPieVals1.clear();
      yPieVals1.clear();
      ArrayList<Integer> colors=new ArrayList<Integer>();
      List<ChartRecordDo> list=(List<ChartRecordDo>)msg.obj;
      allOutOrInMoney=0;
      int i=0;
      for (      ChartRecordDo chartRecordDo : list) {
        allOutOrInMoney+=Math.abs(TextUtil.gwtFormatNum(chartRecordDo.getRecordMoney()));
        yPieVals1.add(new Entry(Math.abs(new Double(TextUtil.gwtFormatNum(chartRecordDo.getRecordMoney())).floatValue()),i));
        xPieVals1.add(chartRecordDo.getRecordDesc());
        colors.add(IconTypeUtil.getTypeIconOrColor(chartRecordDo.getIconId(),false));
        i++;
      }
      PieDataSet dataSet=new PieDataSet(yPieVals1,""String_Node_Str"");
      dataSet.setSliceSpace(2f);
      dataSet.setSelectionShift(4f);
      dataSet.setColors(colors);
      PieData data=new PieData(xPieVals1,dataSet);
      data.setDrawValues(false);
      mTypePieChart.setData(data);
      if (list.size() == 0) {
        mTypePieChart.setCenterText(""String_Node_Str"" + (pieOut ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
        mTypePieChart.setCenterTextColor(Color.RED);
      }
 else {
        mTypePieChart.setCenterTextColor(mainColor);
        mTypePieChart.setCenterText((pieOut ? ""String_Node_Str"" : ""String_Node_Str"") + TextUtil.getFormatMoney(allOutOrInMoney));
      }
      mTypePieChart.animateXY(500,500);
    }
  }
,pieOut);
}","private void refreshPie(){
  mRecordManager.getOutOrInRecordThisMonth(new Handler(){
    @Override public void handleMessage(    Message msg){
      super.handleMessage(msg);
      mTypePieChart.clear();
      xPieVals1.clear();
      yPieVals1.clear();
      ArrayList<Integer> colors=new ArrayList<Integer>();
      List<ChartRecordDo> list=(List<ChartRecordDo>)msg.obj;
      allOutOrInMoney=0;
      int i=0;
      double min=Double.MAX_VALUE;
      for (      ChartRecordDo chartRecordDo : list) {
        if (Math.abs(TextUtil.gwtFormatNum(chartRecordDo.getRecordMoney())) < min)         min=Math.abs(TextUtil.gwtFormatNum(chartRecordDo.getRecordMoney()));
        allOutOrInMoney+=Math.abs(TextUtil.gwtFormatNum(chartRecordDo.getRecordMoney()));
        yPieVals1.add(new Entry(Math.abs(new Double(TextUtil.gwtFormatNum(chartRecordDo.getRecordMoney())).floatValue()),i));
        xPieVals1.add(chartRecordDo.getRecordDesc());
        colors.add(IconTypeUtil.getTypeIconOrColor(chartRecordDo.getIconId(),false));
        i++;
      }
      PieDataSet dataSet=new PieDataSet(yPieVals1,""String_Node_Str"");
      if (min / allOutOrInMoney > 0.001) {
        dataSet.setSliceSpace(1f);
      }
      dataSet.setSelectionShift(2f);
      dataSet.setColors(colors);
      PieData data=new PieData(xPieVals1,dataSet);
      data.setDrawValues(false);
      mTypePieChart.setData(data);
      if (list.size() == 0) {
        mTypePieChart.setCenterText(""String_Node_Str"" + (pieOut ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
        mTypePieChart.setCenterTextColor(Color.RED);
      }
 else {
        mTypePieChart.setCenterTextColor(mainColor);
        mTypePieChart.setCenterText((pieOut ? ""String_Node_Str"" : ""String_Node_Str"") + TextUtil.getFormatMoney(allOutOrInMoney));
      }
      mTypePieChart.animateXY(500,500);
    }
  }
,pieOut);
}"
39399,"@Override public void handleMessage(Message msg){
  super.handleMessage(msg);
  mTypePieChart.clear();
  xPieVals1.clear();
  yPieVals1.clear();
  ArrayList<Integer> colors=new ArrayList<Integer>();
  List<ChartRecordDo> list=(List<ChartRecordDo>)msg.obj;
  allOutOrInMoney=0;
  int i=0;
  for (  ChartRecordDo chartRecordDo : list) {
    allOutOrInMoney+=Math.abs(TextUtil.gwtFormatNum(chartRecordDo.getRecordMoney()));
    yPieVals1.add(new Entry(Math.abs(new Double(TextUtil.gwtFormatNum(chartRecordDo.getRecordMoney())).floatValue()),i));
    xPieVals1.add(chartRecordDo.getRecordDesc());
    colors.add(IconTypeUtil.getTypeIconOrColor(chartRecordDo.getIconId(),false));
    i++;
  }
  PieDataSet dataSet=new PieDataSet(yPieVals1,""String_Node_Str"");
  dataSet.setSliceSpace(2f);
  dataSet.setSelectionShift(4f);
  dataSet.setColors(colors);
  PieData data=new PieData(xPieVals1,dataSet);
  data.setDrawValues(false);
  mTypePieChart.setData(data);
  if (list.size() == 0) {
    mTypePieChart.setCenterText(""String_Node_Str"" + (pieOut ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
    mTypePieChart.setCenterTextColor(Color.RED);
  }
 else {
    mTypePieChart.setCenterTextColor(mainColor);
    mTypePieChart.setCenterText((pieOut ? ""String_Node_Str"" : ""String_Node_Str"") + TextUtil.getFormatMoney(allOutOrInMoney));
  }
  mTypePieChart.animateXY(500,500);
}","@Override public void handleMessage(Message msg){
  super.handleMessage(msg);
  mTypePieChart.clear();
  xPieVals1.clear();
  yPieVals1.clear();
  ArrayList<Integer> colors=new ArrayList<Integer>();
  List<ChartRecordDo> list=(List<ChartRecordDo>)msg.obj;
  allOutOrInMoney=0;
  int i=0;
  double min=Double.MAX_VALUE;
  for (  ChartRecordDo chartRecordDo : list) {
    if (Math.abs(TextUtil.gwtFormatNum(chartRecordDo.getRecordMoney())) < min)     min=Math.abs(TextUtil.gwtFormatNum(chartRecordDo.getRecordMoney()));
    allOutOrInMoney+=Math.abs(TextUtil.gwtFormatNum(chartRecordDo.getRecordMoney()));
    yPieVals1.add(new Entry(Math.abs(new Double(TextUtil.gwtFormatNum(chartRecordDo.getRecordMoney())).floatValue()),i));
    xPieVals1.add(chartRecordDo.getRecordDesc());
    colors.add(IconTypeUtil.getTypeIconOrColor(chartRecordDo.getIconId(),false));
    i++;
  }
  PieDataSet dataSet=new PieDataSet(yPieVals1,""String_Node_Str"");
  if (min / allOutOrInMoney > 0.001) {
    dataSet.setSliceSpace(1f);
  }
  dataSet.setSelectionShift(2f);
  dataSet.setColors(colors);
  PieData data=new PieData(xPieVals1,dataSet);
  data.setDrawValues(false);
  mTypePieChart.setData(data);
  if (list.size() == 0) {
    mTypePieChart.setCenterText(""String_Node_Str"" + (pieOut ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
    mTypePieChart.setCenterTextColor(Color.RED);
  }
 else {
    mTypePieChart.setCenterTextColor(mainColor);
    mTypePieChart.setCenterText((pieOut ? ""String_Node_Str"" : ""String_Node_Str"") + TextUtil.getFormatMoney(allOutOrInMoney));
  }
  mTypePieChart.animateXY(500,500);
}"
39400,"@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder holder=null;
  if (convertView == null) {
    holder=new ViewHolder();
    convertView=mInflater.inflate(R.layout.account_item_2,null);
    holder.icon=(ImageView)convertView.findViewById(R.id.account_type_icon);
    holder.name=(TextView)convertView.findViewById(R.id.name);
    holder.money=(TextView)convertView.findViewById(R.id.yu_e);
    holder.selectMark=(TextView)convertView.findViewById(R.id.select_mark);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  AccountDetailDO accountDetailDO=accounts.get(position);
  holder.selectMark.setVisibility(accountID == accountDetailDO.getAccountID() ? View.VISIBLE : View.GONE);
  holder.icon.setImageResource(IconTypeUtil.getAccountIcon(accountDetailDO.getAccountTypeID()));
  if (!TextUtils.isEmpty(accountDetailDO.getAccountColor())) {
    holder.icon.setColorFilter(Integer.parseInt(accountDetailDO.getAccountColor()));
  }
 else {
    holder.icon.setColorFilter(0);
  }
  holder.name.setText(accountDetailDO.getAccountName());
  holder.money.setText(String.format(context.getResources().getString(R.string.money_format_2),accountDetailDO.getAccountMoney()));
  holder.name.setTextColor(context.getResources().getColor(colorID));
  holder.name.setTextColor(context.getResources().getColor(colorID));
  holder.selectMark.setTextColor(context.getResources().getColor(colorID));
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder holder=null;
  if (convertView == null) {
    holder=new ViewHolder();
    convertView=mInflater.inflate(R.layout.account_item_2,null);
    holder.icon=(ImageView)convertView.findViewById(R.id.account_type_icon);
    holder.name=(TextView)convertView.findViewById(R.id.name);
    holder.money=(TextView)convertView.findViewById(R.id.yu_e);
    holder.selectMark=(TextView)convertView.findViewById(R.id.select_mark);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    convertView.setBackgroundResource(R.drawable.ripple);
  }
  AccountDetailDO accountDetailDO=accounts.get(position);
  holder.selectMark.setVisibility(accountID == accountDetailDO.getAccountID() ? View.VISIBLE : View.GONE);
  holder.icon.setImageResource(IconTypeUtil.getAccountIcon(accountDetailDO.getAccountTypeID()));
  if (!TextUtils.isEmpty(accountDetailDO.getAccountColor())) {
    holder.icon.setColorFilter(Integer.parseInt(accountDetailDO.getAccountColor()));
  }
 else {
    holder.icon.setColorFilter(0);
  }
  holder.name.setText(accountDetailDO.getAccountName());
  holder.money.setText(String.format(context.getResources().getString(R.string.money_format_2),accountDetailDO.getAccountMoney()));
  holder.name.setTextColor(context.getResources().getColor(colorID));
  holder.name.setTextColor(context.getResources().getColor(colorID));
  holder.selectMark.setTextColor(context.getResources().getColor(colorID));
  return convertView;
}"
39401,"@Override protected void onResume(){
  super.onResume();
  MobclickAgent.onResume(this);
  mainColor=this.getResources().getColor(ThemeUtil.getTheme(this).getMainColorID());
  mainDarkColor=this.getResources().getColor(ThemeUtil.getTheme(this).getMainDarkColorID());
  textColor=this.getResources().getColor(ThemeUtil.getTheme(this).getTextColorID());
  if (getSupportActionBar() != null) {
    getSupportActionBar().setBackgroundDrawable(new ColorDrawable(mainColor));
    StatusBarCompat.compat(this,mainDarkColor);
  }
}","@Override protected void onResume(){
  if (getRequestedOrientation() != ActivityInfo.SCREEN_ORIENTATION_USER_PORTRAIT) {
    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_USER_PORTRAIT);
  }
  super.onResume();
  MobclickAgent.onResume(this);
  mainColor=this.getResources().getColor(ThemeUtil.getTheme(this).getMainColorID());
  mainDarkColor=this.getResources().getColor(ThemeUtil.getTheme(this).getMainDarkColorID());
  textColor=this.getResources().getColor(ThemeUtil.getTheme(this).getTextColorID());
  if (getSupportActionBar() != null) {
    getSupportActionBar().setBackgroundDrawable(new ColorDrawable(mainColor));
    StatusBarCompat.compat(this,mainDarkColor);
  }
}"
39402,"public List<Record> getRecordsByRecordTypeIDAndMonth(Context context,long recordTypeID,int recordYear,int recordMonth){
  RecordDao recordDao=getDaoSession(context).getRecordDao();
  return recordDao.queryBuilder().where(RecordDao.Properties.IsDel.eq(false)).where(RecordDao.Properties.RecordTypeID.eq(recordTypeID)).where(RecordDao.Properties.Year.eq(recordYear)).where(RecordDao.Properties.Month.eq(recordMonth)).list();
}","public List<Record> getRecordsByRecordTypeIDAndMonth(Context context,long recordTypeID,int recordYear,int recordMonth){
  RecordDao recordDao=getDaoSession(context).getRecordDao();
  return recordDao.queryBuilder().where(RecordDao.Properties.IsDel.eq(false)).where(RecordDao.Properties.RecordTypeID.eq(recordTypeID)).where(RecordDao.Properties.Year.eq(recordYear)).where(RecordDao.Properties.Month.eq(recordMonth)).orderDesc(RecordDao.Properties.RecordDate).list();
}"
39403,"public void closeIMClient(){
  if (mClient != null) {
    mClient.close(null);
    mClient=null;
  }
}","public void closeIMClient(){
  if (mClient != null) {
    conversationMap.clear();
    mClient.close(null);
    mClient=null;
  }
}"
39404,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_record_detail);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  recordMonth=getIntent().getIntExtra(IntentConstant.RECORD_MONTH,0);
  recordYear=getIntent().getIntExtra(IntentConstant.RECORD_YEAR,2016);
  recordTypeID=getIntent().getLongExtra(IntentConstant.RECORD_TYPE_ID,0);
  recordDesc=getIntent().getStringExtra(IntentConstant.RECORD_DESC);
  getSupportActionBar().setTitle(recordDesc + ""String_Node_Str"");
  recordManager=new RecordManager(this);
  initWidget();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_record_detail);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  recordMonth=getIntent().getIntExtra(IntentConstant.RECORD_MONTH,0);
  recordYear=getIntent().getIntExtra(IntentConstant.RECORD_YEAR,2016);
  recordTypeID=getIntent().getLongExtra(IntentConstant.RECORD_TYPE_ID,0);
  recordDesc=getIntent().getStringExtra(IntentConstant.RECORD_DESC);
  getSupportActionBar().setTitle(""String_Node_Str"" + recordDesc + ""String_Node_Str""+ ""String_Node_Str"");
  recordManager=new RecordManager(this);
  initWidget();
}"
39405,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_abount);
  mToolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(mToolbar);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  mToolbar.setNavigationOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      AboutActivity.this.onBackPressed();
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_abount);
  mToolbar=(Toolbar)findViewById(R.id.toolbar);
  mToolbar.setNavigationOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      AboutActivity.this.onBackPressed();
    }
  }
);
  setSupportActionBar(mToolbar);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  initWidget();
}"
39406,"@Override protected void initWidget(){
}","@Override protected void initWidget(){
  findViewById(R.id.background).setBackgroundColor(getColor(this,getMainTheme().getMainColorID()));
}"
39407,"public static AVRecord convertRecord2AVRecord(Record record){
  AVRecord avRecord=new AVRecord();
  avRecord.setRecordId(record.getRecordId());
  avRecord.setUser(MyAVUser.getCurrentUser());
  avRecord.setRecordId(record.getRecordId());
  avRecord.setAccountId(record.getAccountID());
  avRecord.setRecordDate(record.getRecordDate());
  avRecord.setRecordMoney(record.getRecordMoney());
  avRecord.setRecordTypeId(record.getRecordTypeID());
  avRecord.setRecordType(record.getRecordType());
  avRecord.setRemark(record.getRemark());
  avRecord.setRecordIsDel(record.getIsDel());
  return avRecord;
}","public static AVRecord convertRecord2AVRecord(Record record){
  AVRecord avRecord=new AVRecord();
  avRecord.setRecordId(record.getRecordId());
  avRecord.setUser(MyAVUser.getCurrentUser());
  avRecord.setRecordId(record.getRecordId());
  avRecord.setAccountId(record.getAccountID());
  avRecord.setRecordDate(record.getRecordDate());
  avRecord.setRecordMoney(record.getRecordMoney());
  avRecord.setRecordTypeId(record.getRecordTypeID());
  avRecord.setRecordType(record.getRecordType());
  avRecord.setRemark(record.getRemark());
  avRecord.setRecordIsDel(record.getIsDel());
  if (!TextUtils.isEmpty(record.getObjectID())) {
    avRecord.setObjectId(record.getObjectID());
  }
  return avRecord;
}"
39408,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_gesture_lock);
  mGestureLockViewGroup=(GestureLockViewGroup)findViewById(R.id.id_gestureLockViewGroup);
  mForget=(TextView)findViewById(R.id.forget_secret);
  isSetting=getIntent().getBooleanExtra(IntentConstant.SETTING_MODE,false);
  mHeadImg=(CircleImageView)findViewById(R.id.profile_image);
  new UserManager(this).getMe(new Handler(){
    @Override public void handleMessage(    Message msg){
      super.handleMessage(msg);
      if (msg.what == Constant.MSG_SUCCESS) {
        User user=(User)msg.obj;
        Glide.with(GestureLockActivity.this).load(user.getHeadImage()).placeholder(R.mipmap.suda).into(mHeadImg);
      }
    }
  }
);
  mForget.setText(Html.fromHtml(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""));
  mForget.setVisibility(isSetting ? View.INVISIBLE : View.VISIBLE);
  mForget.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(GestureLockActivity.this,LoginActivity.class);
      intent.putExtra(IntentConstant.FORGET_GESTURE,true);
      startActivityForResult(intent,REQUEST_CODE_FORGET_GESTURE);
    }
  }
);
  if (!isSetting) {
    secret=(String)SPUtils.get(this,Constant.SP_GESTURE,""String_Node_Str"");
    mGestureLockViewGroup.setAnswer(secret);
  }
  if (TextUtils.isEmpty(secret) && !isSetting) {
    enterMain();
  }
  mTvTip=(TextView)findViewById(R.id.setting_tips);
  mTvTip.setText(""String_Node_Str"");
  mGestureLockViewGroup.setIsSetting(isSetting);
  mGestureLockViewGroup.setUnMatchExceedBoundary(mTryTime);
  mGestureLockViewGroup.setOnGestureLockViewListener(new GestureLockViewGroup.OnGestureLockViewListener(){
    @Override public void onUnmatchedExceedBoundary(    int errorCode){
      if (errorCode == GestureLockViewGroup.CODE_IN_VALID) {
        mTvTip.setText(""String_Node_Str"");
      }
      if (errorCode == GestureLockViewGroup.CODE_NOT_SAME) {
        mTvTip.setText(""String_Node_Str"");
        new Handler().postDelayed(new Runnable(){
          @Override public void run(){
            new UserManager(GestureLockActivity.this).logOut();
            enterMain();
          }
        }
,300);
      }
    }
    @Override public void onGestureEvent(    boolean matched){
      if (!matched) {
        mTryTime--;
        mTvTip.setText(""String_Node_Str"" + mTryTime + ""String_Node_Str"");
      }
 else       enterMain();
    }
    @Override public void onBlockSelected(    int cId){
    }
    @Override public void showSelect(    String value){
      if (isSetting) {
        if (TextUtils.isEmpty(secret)) {
          secret=value;
          mTvTip.setText(""String_Node_Str"");
        }
 else {
          if (!value.equals(secret)) {
            secret=value;
            mTvTip.setText(""String_Node_Str"");
          }
 else           if (value.equals(secret)) {
            mTvTip.setText(""String_Node_Str"");
            SPUtils.put(GestureLockActivity.this,Constant.SP_GESTURE,secret);
            finish();
          }
        }
      }
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_gesture_lock);
  mGestureLockViewGroup=(GestureLockViewGroup)findViewById(R.id.id_gestureLockViewGroup);
  mForget=(TextView)findViewById(R.id.forget_secret);
  isSetting=getIntent().getBooleanExtra(IntentConstant.SETTING_MODE,false);
  mHeadImg=(CircleImageView)findViewById(R.id.profile_image);
  new UserManager(this).getMe(new Handler(){
    @Override public void handleMessage(    Message msg){
      super.handleMessage(msg);
      if (msg.what == Constant.MSG_SUCCESS) {
        User user=(User)msg.obj;
        Glide.with(GestureLockActivity.this).load(user.getHeadImage()).placeholder(R.mipmap.suda).into(mHeadImg);
      }
    }
  }
);
  mForget.setText(Html.fromHtml(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""));
  mForget.setVisibility(isSetting ? View.INVISIBLE : View.VISIBLE);
  mForget.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(GestureLockActivity.this,LoginActivity.class);
      intent.putExtra(IntentConstant.FORGET_GESTURE,true);
      startActivityForResult(intent,REQUEST_CODE_FORGET_GESTURE);
    }
  }
);
  if (!isSetting) {
    secret=(String)SPUtils.get(this,Constant.SP_GESTURE,""String_Node_Str"");
    mGestureLockViewGroup.setAnswer(secret);
  }
  if (TextUtils.isEmpty(secret) && !isSetting) {
    enterMain();
  }
  mTvTip=(TextView)findViewById(R.id.setting_tips);
  mTvTip.setText(""String_Node_Str"");
  mGestureLockViewGroup.setIsSetting(isSetting);
  mGestureLockViewGroup.setUnMatchExceedBoundary(mTryTime);
  mGestureLockViewGroup.setOnGestureLockViewListener(new GestureLockViewGroup.OnGestureLockViewListener(){
    @Override public void onUnmatchedExceedBoundary(    int errorCode){
      if (errorCode == GestureLockViewGroup.CODE_IN_VALID) {
        mTvTip.setText(""String_Node_Str"");
      }
      if (errorCode == GestureLockViewGroup.CODE_NOT_SAME) {
        mTvTip.setText(""String_Node_Str"");
        new Handler().postDelayed(new Runnable(){
          @Override public void run(){
            new UserManager(GestureLockActivity.this).logOut();
            enterMain();
          }
        }
,300);
      }
    }
    @Override public void onGestureEvent(    boolean matched){
      if (!matched) {
        mTryTime--;
        mTvTip.setText(""String_Node_Str"" + mTryTime + ""String_Node_Str"");
      }
 else       enterMain();
    }
    @Override public void onBlockSelected(    int cId){
    }
    @Override public void showSelect(    String value){
      if (isSetting) {
        if (TextUtils.isEmpty(secret)) {
          secret=value;
          mTvTip.setText(""String_Node_Str"");
        }
 else {
          if (!value.equals(secret)) {
            mTvTip.setText(""String_Node_Str"");
          }
 else           if (value.equals(secret)) {
            mTvTip.setText(""String_Node_Str"");
            SPUtils.put(GestureLockActivity.this,Constant.SP_GESTURE,secret);
            finish();
          }
        }
      }
    }
  }
);
}"
39409,"@Override public void showSelect(String value){
  if (isSetting) {
    if (TextUtils.isEmpty(secret)) {
      secret=value;
      mTvTip.setText(""String_Node_Str"");
    }
 else {
      if (!value.equals(secret)) {
        secret=value;
        mTvTip.setText(""String_Node_Str"");
      }
 else       if (value.equals(secret)) {
        mTvTip.setText(""String_Node_Str"");
        SPUtils.put(GestureLockActivity.this,Constant.SP_GESTURE,secret);
        finish();
      }
    }
  }
}","@Override public void showSelect(String value){
  if (isSetting) {
    if (TextUtils.isEmpty(secret)) {
      secret=value;
      mTvTip.setText(""String_Node_Str"");
    }
 else {
      if (!value.equals(secret)) {
        mTvTip.setText(""String_Node_Str"");
      }
 else       if (value.equals(secret)) {
        mTvTip.setText(""String_Node_Str"");
        SPUtils.put(GestureLockActivity.this,Constant.SP_GESTURE,secret);
        finish();
      }
    }
  }
}"
39410,"private void saveProp(String param){
  final Intent intent=new Intent();
switch (mEditType) {
case PROP_TYPE_ACCOUNT_NAME:
    intent.putExtra(IntentConstant.EDIT_ACCOUNT_NAME,param);
  if (mAccountID > 0) {
    accountManager.updateAccountName(mAccountID,param,new Handler(){
      @Override public void handleMessage(      Message msg){
        super.handleMessage(msg);
        setResult(RESULT_OK,intent);
        finish();
      }
    }
);
  }
break;
case PROP_TYPE_ACCOUNT_MONEY:
final double money=Double.parseDouble(param);
if (mAccountID > 0) {
accountManager.updateAccountMoney(mAccountID,money - mMoney,new Handler(){
@Override public void handleMessage(Message msg){
  super.handleMessage(msg);
  Record record=new Record();
  record.setIsDel(false);
  record.setRemark(money - mMoney > 0 ? ""String_Node_Str"" : ""String_Node_Str"");
  record.setRecordId(System.currentTimeMillis());
  record.setAccountID(mAccountID);
  record.setRecordType(Constant.RecordType.CHANGE.getId());
  record.setRecordTypeID(27L);
  BigDecimal b=new BigDecimal(money - mMoney);
  record.setRecordMoney(b.setScale(2,BigDecimal.ROUND_HALF_UP).doubleValue());
  record.setRecordDate(new Date(System.currentTimeMillis()));
  recordManager.createNewRecord(record,null);
  setResult(RESULT_OK,intent);
  finish();
}
}
);
}
intent.putExtra(IntentConstant.EDIT_ACCOUNT_MONEY,money);
break;
case PROP_TYPE_ACCOUNT_REMARK:
intent.putExtra(IntentConstant.EDIT_ACCOUNT_REMARK,param);
if (mAccountID > 0) {
accountManager.updateAccountRemark(mAccountID,param,new Handler(){
@Override public void handleMessage(Message msg){
super.handleMessage(msg);
setResult(RESULT_OK,intent);
finish();
}
}
);
}
break;
default :
break;
}
}","private void saveProp(String param){
  final Intent intent=new Intent();
switch (mEditType) {
case PROP_TYPE_ACCOUNT_NAME:
    intent.putExtra(IntentConstant.EDIT_ACCOUNT_NAME,param);
  if (mAccountID > 0) {
    accountManager.updateAccountName(mAccountID,param,new Handler(){
      @Override public void handleMessage(      Message msg){
        super.handleMessage(msg);
        setResult(RESULT_OK,intent);
        finish();
      }
    }
);
  }
 else {
    setResult(RESULT_OK,intent);
    finish();
  }
break;
case PROP_TYPE_ACCOUNT_MONEY:
final double money=Double.parseDouble(param);
intent.putExtra(IntentConstant.EDIT_ACCOUNT_MONEY,money);
if (mAccountID > 0) {
accountManager.updateAccountMoney(mAccountID,money - mMoney,new Handler(){
@Override public void handleMessage(Message msg){
super.handleMessage(msg);
Record record=new Record();
record.setIsDel(false);
record.setRemark(money - mMoney > 0 ? ""String_Node_Str"" : ""String_Node_Str"");
record.setRecordId(System.currentTimeMillis());
record.setAccountID(mAccountID);
record.setRecordType(Constant.RecordType.CHANGE.getId());
record.setRecordTypeID(27L);
BigDecimal b=new BigDecimal(money - mMoney);
record.setRecordMoney(b.setScale(2,BigDecimal.ROUND_HALF_UP).doubleValue());
record.setRecordDate(new Date(System.currentTimeMillis()));
recordManager.createNewRecord(record,null);
setResult(RESULT_OK,intent);
finish();
}
}
);
}
 else {
setResult(RESULT_OK,intent);
finish();
}
break;
case PROP_TYPE_ACCOUNT_REMARK:
intent.putExtra(IntentConstant.EDIT_ACCOUNT_REMARK,param);
if (mAccountID > 0) {
accountManager.updateAccountRemark(mAccountID,param,new Handler(){
@Override public void handleMessage(Message msg){
super.handleMessage(msg);
setResult(RESULT_OK,intent);
finish();
}
}
);
}
 else {
setResult(RESULT_OK,intent);
finish();
}
break;
default :
break;
}
}"
39411,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (resultCode == RESULT_OK) {
    long accountId=data.getLongExtra(IntentConstant.ACCOUNT_ID,0);
    AccountDetailDO accountDetailDO=accountManager.getAccountByID(accountId);
    if (selectItem == 0) {
      if (inAccountID == accountId) {
        SnackBarUtil.showSnackInfo(floatingActionButton,this,""String_Node_Str"");
        return;
      }
      outAccountID=accountId;
      mImgOutAccountIcon.setImageResource(IconTypeUtil.getAccountIcon(accountDetailDO.getAccountIcon()));
      if (!TextUtils.isEmpty(accountDetailDO.getAccountColor())) {
        mImgOutAccountIcon.setColorFilter(Integer.parseInt(accountDetailDO.getAccountColor()));
      }
 else {
        mImgInAccountIcon.setColorFilter(0);
      }
      mTvoOutAccountName.setText(accountDetailDO.getAccountName());
      mTvOutAccountLeftMoney.setText(TextUtil.getFormatMoney(accountDetailDO.getAccountMoney()) + ""String_Node_Str"");
    }
 else {
      if (outAccountID == accountId) {
        SnackBarUtil.showSnackInfo(floatingActionButton,this,""String_Node_Str"");
        return;
      }
      inAccountID=accountId;
      plusView.setVisibility(View.VISIBLE);
      eEtInMoney.setVisibility(View.VISIBLE);
      mImgInAccountIcon.setImageResource(IconTypeUtil.getAccountIcon(accountDetailDO.getAccountIcon()));
      if (!TextUtils.isEmpty(accountDetailDO.getAccountColor())) {
        mImgInAccountIcon.setColorFilter(Integer.parseInt(accountDetailDO.getAccountColor()));
      }
 else {
        mImgInAccountIcon.setColorFilter(0);
      }
      mTvInAccountName.setText(accountDetailDO.getAccountName());
      mTvInAccountLeftMoney.setText(TextUtil.getFormatMoney(accountDetailDO.getAccountMoney()) + ""String_Node_Str"");
    }
  }
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (resultCode == RESULT_OK) {
    long accountId=data.getLongExtra(IntentConstant.ACCOUNT_ID,0);
    AccountDetailDO accountDetailDO=accountManager.getAccountByID(accountId);
    if (selectItem == 0) {
      if (inAccountID == accountId) {
        SnackBarUtil.showSnackInfo(floatingActionButton,this,""String_Node_Str"");
        return;
      }
      outAccountID=accountId;
      mImgOutAccountIcon.setImageResource(IconTypeUtil.getAccountIcon(accountDetailDO.getAccountIcon()));
      if (!TextUtils.isEmpty(accountDetailDO.getAccountColor())) {
        mImgOutAccountIcon.setColorFilter(Integer.parseInt(accountDetailDO.getAccountColor()));
      }
 else {
        mImgOutAccountIcon.setColorFilter(0);
      }
      mTvoOutAccountName.setText(accountDetailDO.getAccountName());
      mTvOutAccountLeftMoney.setText(TextUtil.getFormatMoney(accountDetailDO.getAccountMoney()) + ""String_Node_Str"");
    }
 else {
      if (outAccountID == accountId) {
        SnackBarUtil.showSnackInfo(floatingActionButton,this,""String_Node_Str"");
        return;
      }
      inAccountID=accountId;
      plusView.setVisibility(View.VISIBLE);
      eEtInMoney.setVisibility(View.VISIBLE);
      mImgInAccountIcon.setImageResource(IconTypeUtil.getAccountIcon(accountDetailDO.getAccountIcon()));
      if (!TextUtils.isEmpty(accountDetailDO.getAccountColor())) {
        mImgInAccountIcon.setColorFilter(Integer.parseInt(accountDetailDO.getAccountColor()));
      }
 else {
        mImgInAccountIcon.setColorFilter(0);
      }
      mTvInAccountName.setText(accountDetailDO.getAccountName());
      mTvInAccountLeftMoney.setText(TextUtil.getFormatMoney(accountDetailDO.getAccountMoney()) + ""String_Node_Str"");
    }
  }
}"
39412,"/** 
 * 登陆
 * @param userName
 * @param password
 * @param email
 * @param handler
 */
public void login(String userName,final String password,String email,final Handler handler){
  if (!TextUtils.isEmpty(email)) {
    AVQuery<MyAVUser> query=AVObject.getQuery(MyAVUser.class);
    query.whereEqualTo(""String_Node_Str"",email);
    query.findInBackground(new FindCallback<MyAVUser>(){
      @Override public void done(      List<MyAVUser> list,      AVException e){
        final Message message=new Message();
        if (e == null) {
          if (list.size() > 0) {
            final MyAVUser myAVUser=list.get(0);
            myAVUser.logInInBackground(myAVUser.getUsername(),password,new LogInCallback<AVUser>(){
              @Override public void done(              AVUser avUser,              AVException e){
                if (e == null) {
                  User user=new User();
                  user.setUserId(myAVUser.getObjectId());
                  user.setHeadImage(getImgUrl(myAVUser.getHeadImage()));
                  user.setUserName(myAVUser.getUsername());
                  user.setUserCode(myAVUser.getUserCode());
                  userLocalDao.insertUser(user,_context);
                  message.what=Constant.MSG_SUCCESS;
                }
 else {
                  message.what=Constant.MSG_ERROR;
                  message.obj=ExceptionInfoUtil.getError(e.getCode());
                  getAvEx(e);
                }
                handler.sendMessage(message);
              }
            }
);
          }
 else {
            message.what=Constant.MSG_ERROR;
            message.obj=""String_Node_Str"";
            handler.sendMessage(message);
          }
        }
 else {
          message.what=Constant.MSG_ERROR;
          message.obj=ExceptionInfoUtil.getError(e.getCode());
          handler.sendMessage(message);
          getAvEx(e);
        }
      }
    }
);
    return;
  }
  AVUser.logInInBackground(userName,password,new LogInCallback<MyAVUser>(){
    @Override public void done(    MyAVUser avUser,    AVException e){
      Message message=new Message();
      if (e == null) {
        User user=new User();
        user.setUserId(avUser.getObjectId());
        user.setHeadImage(getImgUrl(avUser.getHeadImage()));
        user.setUserName(avUser.getUsername());
        userLocalDao.insertUser(user,_context);
        message.what=Constant.MSG_SUCCESS;
      }
 else {
        message.what=Constant.MSG_ERROR;
        message.obj=ExceptionInfoUtil.getError(e.getCode());
        getAvEx(e);
      }
      handler.sendMessage(message);
    }
  }
,MyAVUser.class);
}","/** 
 * 登陆
 * @param userName
 * @param password
 * @param email
 * @param handler
 */
public void login(String userName,final String password,String email,final Handler handler){
  if (!TextUtils.isEmpty(email)) {
    AVQuery<MyAVUser> query=AVObject.getQuery(MyAVUser.class);
    query.whereEqualTo(""String_Node_Str"",email);
    query.findInBackground(new FindCallback<MyAVUser>(){
      @Override public void done(      List<MyAVUser> list,      AVException e){
        final Message message=new Message();
        if (e == null) {
          if (list.size() > 0) {
            final MyAVUser myAVUser=list.get(0);
            myAVUser.logInInBackground(myAVUser.getUsername(),password,new LogInCallback<AVUser>(){
              @Override public void done(              AVUser avUser,              AVException e){
                if (e == null) {
                  User user=new User();
                  user.setUserId(myAVUser.getObjectId());
                  user.setHeadImage(getImgUrl(myAVUser.getHeadImage()));
                  user.setUserName(myAVUser.getUsername());
                  user.setUserCode(myAVUser.getUserCode());
                  userLocalDao.insertUser(user,_context);
                  message.what=Constant.MSG_SUCCESS;
                }
 else {
                  message.what=Constant.MSG_ERROR;
                  message.obj=ExceptionInfoUtil.getError(e.getCode());
                  getAvEx(e);
                }
                handler.sendMessage(message);
              }
            }
);
          }
 else {
            message.what=Constant.MSG_ERROR;
            message.obj=""String_Node_Str"";
            handler.sendMessage(message);
          }
        }
 else {
          message.what=Constant.MSG_ERROR;
          message.obj=ExceptionInfoUtil.getError(e.getCode());
          handler.sendMessage(message);
          getAvEx(e);
        }
      }
    }
);
    return;
  }
  AVUser.logInInBackground(userName,password,new LogInCallback<MyAVUser>(){
    @Override public void done(    MyAVUser avUser,    AVException e){
      Message message=new Message();
      if (e == null) {
        User user=new User();
        user.setUserId(avUser.getObjectId());
        user.setHeadImage(getImgUrl(avUser.getHeadImage()));
        user.setUserName(avUser.getUsername());
        user.setUserCode(avUser.getUserCode());
        userLocalDao.insertUser(user,_context);
        message.what=Constant.MSG_SUCCESS;
      }
 else {
        message.what=Constant.MSG_ERROR;
        message.obj=ExceptionInfoUtil.getError(e.getCode());
        getAvEx(e);
      }
      handler.sendMessage(message);
    }
  }
,MyAVUser.class);
}"
39413,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_edit_account_prop);
  accountManager=new AccountManager(this);
  recordManager=new RecordManager(this);
  initParam();
  initWidget();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_edit_account_prop);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  accountManager=new AccountManager(this);
  recordManager=new RecordManager(this);
  initParam();
  initWidget();
}"
39414,"@Override protected void initWidget(){
  mEtProp=(EditText)findViewById(R.id.prop_et);
  mBtProp=(Button)findViewById(R.id.prop_bt);
  mLvAccountType=(ListView)findViewById(R.id.account_type);
  findViewById(mEditType == PROP_TYPE_ACCOUNT_TYPE ? R.id.account_other_param : R.id.account_type_param).setVisibility(View.GONE);
switch (mEditType) {
case PROP_TYPE_ACCOUNT_NAME:
    getSupportActionBar().setTitle(""String_Node_Str"");
  mEtProp.setText(mParam);
break;
case PROP_TYPE_ACCOUNT_MONEY:
getSupportActionBar().setTitle(""String_Node_Str"");
mEtProp.setText(String.format(getResources().getString(R.string.record_money_format),mMoney));
mEtProp.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
break;
case PROP_TYPE_ACCOUNT_REMARK:
getSupportActionBar().setTitle(""String_Node_Str"");
mEtProp.setText(mParam);
break;
case PROP_TYPE_ACCOUNT_TYPE:
getSupportActionBar().setTitle(""String_Node_Str"");
initListView();
break;
default :
break;
}
mEtProp.setSelection(mEtProp.getText().toString().length());
mBtProp.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
saveProp(mEtProp.getText().toString());
}
}
);
mEtProp.addTextChangedListener(new TextWatcher(){
@Override public void beforeTextChanged(CharSequence s,int start,int count,int after){
}
@Override public void onTextChanged(CharSequence s,int start,int before,int count){
if (mEditType != PROP_TYPE_ACCOUNT_MONEY) return;
String tmp=s.toString();
if (tmp.contains(""String_Node_Str"")) {
String[] strs=tmp.split(""String_Node_Str"");
if (strs.length > 1 && strs[1].length() > 2) {
mEtProp.setText(tmp.substring(0,tmp.length() - 1));
mEtProp.setSelection(tmp.length() - 1);
}
}
}
@Override public void afterTextChanged(Editable s){
}
}
);
}","@Override protected void initWidget(){
  mEtProp=(EditText)findViewById(R.id.prop_et);
  mBtProp=(Button)findViewById(R.id.prop_bt);
  mBtProp.setTextColor(getColor(this,getMainTheme().getMainColorID()));
  mLvAccountType=(ListView)findViewById(R.id.account_type);
  findViewById(mEditType == PROP_TYPE_ACCOUNT_TYPE ? R.id.account_other_param : R.id.account_type_param).setVisibility(View.GONE);
switch (mEditType) {
case PROP_TYPE_ACCOUNT_NAME:
    getSupportActionBar().setTitle(""String_Node_Str"");
  mEtProp.setText(mParam);
break;
case PROP_TYPE_ACCOUNT_MONEY:
getSupportActionBar().setTitle(""String_Node_Str"");
mEtProp.setText(String.format(getResources().getString(R.string.record_money_format),mMoney));
mEtProp.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
break;
case PROP_TYPE_ACCOUNT_REMARK:
getSupportActionBar().setTitle(""String_Node_Str"");
mEtProp.setText(mParam);
break;
case PROP_TYPE_ACCOUNT_TYPE:
getSupportActionBar().setTitle(""String_Node_Str"");
initListView();
break;
default :
break;
}
mEtProp.setSelection(mEtProp.getText().toString().length());
mBtProp.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
saveProp(mEtProp.getText().toString());
}
}
);
mEtProp.addTextChangedListener(new TextWatcher(){
@Override public void beforeTextChanged(CharSequence s,int start,int count,int after){
}
@Override public void onTextChanged(CharSequence s,int start,int before,int count){
if (mEditType != PROP_TYPE_ACCOUNT_MONEY) return;
String tmp=s.toString();
if (tmp.contains(""String_Node_Str"")) {
String[] strs=tmp.split(""String_Node_Str"");
if (strs.length > 1 && strs[1].length() > 2) {
mEtProp.setText(tmp.substring(0,tmp.length() - 1));
mEtProp.setSelection(tmp.length() - 1);
}
}
}
@Override public void afterTextChanged(Editable s){
}
}
);
}"
39415,"@Override protected void onResume(){
  super.onResume();
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
}","@Override protected void onResume(){
  super.onResume();
}"
39416,"public void switchColor(View view){
  MyRoundColorView myRoundColorView=(MyRoundColorView)view;
  final Intent intent=new Intent();
  intent.putExtra(""String_Node_Str"",myRoundColorView.getRoundColor());
  accountManager.updateAccountColor(mAccountID,myRoundColorView.getRoundColor() + ""String_Node_Str"",new Handler(){
    @Override public void handleMessage(    Message msg){
      super.handleMessage(msg);
      setResult(RESULT_OK,intent);
      finish();
    }
  }
);
}","public void switchColor(View view){
  MyRoundColorView myRoundColorView=(MyRoundColorView)view;
  final Intent intent=new Intent();
  intent.putExtra(""String_Node_Str"",myRoundColorView.getRoundColor());
  if (mAccountID > 0) {
    accountManager.updateAccountColor(mAccountID,myRoundColorView.getRoundColor() + ""String_Node_Str"",new Handler(){
      @Override public void handleMessage(      Message msg){
        super.handleMessage(msg);
        setResult(RESULT_OK,intent);
        finish();
      }
    }
);
  }
 else {
    setResult(RESULT_OK,intent);
    finish();
  }
}"
39417,"@Override protected void initWidget(){
  mRecordDr=(DragGridView)findViewById(R.id.record_item);
  panelBackView=findViewById(R.id.panel_color);
  panel=findViewById(R.id.panel);
  tvMoneyCount=(TextView)findViewById(R.id.money_count);
  tvTypeTitle=(TextView)findViewById(R.id.record_title);
  typeIcon=(ImageView)findViewById(R.id.record_icon);
  btZhiChu=(Button)findViewById(R.id.zhi_chu);
  btShouRu=(Button)findViewById(R.id.shou_ru);
  mAccountTv=(TextView)findViewById(R.id.account);
  mDateTv=(TextView)findViewById(R.id.date);
  circleProgressBar=(CircleProgressBar)findViewById(R.id.progressBar);
  circleProgressBar.setVisibility(View.INVISIBLE);
  remarkPanel=findViewById(R.id.remark_panel);
  remarkBt=(Button)findViewById(R.id.remark_bt);
  remarkSaveBt=(Button)findViewById(R.id.remark_save);
  etRemark=(TextInputEditText)findViewById(R.id.edit_remark);
  mAccountTv.setTextColor(getResources().getColor(getMainTheme().getMainColorID()));
  mDateTv.setTextColor(getResources().getColor(getMainTheme().getMainColorID()));
  remarkBt.setTextColor(getResources().getColor(getMainTheme().getMainColorID()));
  findViewById(R.id.line3).setBackgroundColor(getResources().getColor(getMainTheme().getMainColorID()));
  initRemarkPanel();
}","@Override protected void initWidget(){
  mRecordDr=(DragGridView)findViewById(R.id.record_item);
  panelBackView=findViewById(R.id.panel_color);
  panel=findViewById(R.id.panel);
  tvMoneyCount=(TextView)findViewById(R.id.money_count);
  tvTypeTitle=(TextView)findViewById(R.id.record_title);
  typeIcon=(ImageView)findViewById(R.id.record_icon);
  btZhiChu=(Button)findViewById(R.id.zhi_chu);
  btShouRu=(Button)findViewById(R.id.shou_ru);
  mAccountTv=(TextView)findViewById(R.id.account);
  mDateTv=(TextView)findViewById(R.id.date);
  circleProgressBar=(CircleProgressBar)findViewById(R.id.progressBar);
  circleProgressBar.setVisibility(View.INVISIBLE);
  remarkPanel=findViewById(R.id.remark_panel);
  remarkBt=(Button)findViewById(R.id.remark_bt);
  remarkSaveBt=(Button)findViewById(R.id.remark_save);
  etRemark=(TextInputEditText)findViewById(R.id.edit_remark);
  mAccountTv.setTextColor(getResources().getColor(getMainTheme().getMainColorID()));
  mDateTv.setTextColor(getResources().getColor(getMainTheme().getMainColorID()));
  remarkBt.setTextColor(getResources().getColor(getMainTheme().getMainColorID()));
  remarkSaveBt.setTextColor(getResources().getColor(getMainTheme().getMainColorID()));
  findViewById(R.id.line3).setBackgroundColor(getResources().getColor(getMainTheme().getMainColorID()));
  initRemarkPanel();
}"
39418,"@Override public void done(List<AVAccount> list,AVException e){
  Message message=new Message();
  if (list.size() > 0)   accountLocalDao.clearAllAccount(_context);
  if (e == null) {
    for (    AVAccount avAccount : list) {
      Account account=new Account();
      account.setObjectID(avAccount.getObjectId());
      account.setAccountID(avAccount.getAccountId());
      account.setAccountTypeID(avAccount.getAccountTypeId());
      account.setAccountMoney(avAccount.getAccountMoney());
      account.setAccountRemark(avAccount.getAccountRemark());
      account.setIsDel(avAccount.isAccountDel());
      account.setAccountName(avAccount.getAccountName());
      account.setSyncStatus(true);
      accountLocalDao.createNewAccount(account,_context);
    }
    message.what=Constant.MSG_SUCCESS;
  }
 else {
    message.what=Constant.MSG_ERROR;
    getAvEx(e);
  }
  handler.sendMessage(message);
}","@Override public void done(List<AVAccount> list,AVException e){
  Message message=new Message();
  if (list.size() > 0)   accountLocalDao.clearAllAccount(_context);
  if (e == null) {
    for (    AVAccount avAccount : list) {
      Account account=new Account();
      account.setObjectID(avAccount.getObjectId());
      account.setAccountID(avAccount.getAccountId());
      account.setAccountTypeID(avAccount.getAccountTypeId());
      account.setAccountMoney(avAccount.getAccountMoney());
      account.setAccountRemark(avAccount.getAccountRemark());
      account.setIsDel(avAccount.isAccountDel());
      account.setAccountColor(avAccount.getAccountColor());
      account.setAccountName(avAccount.getAccountName());
      account.setSyncStatus(true);
      accountLocalDao.createNewAccount(account,_context);
    }
    message.what=Constant.MSG_SUCCESS;
  }
 else {
    message.what=Constant.MSG_ERROR;
    getAvEx(e);
  }
  handler.sendMessage(message);
}"
39419,"/** 
 * 从云端获取全部账户信息初始化数据
 * @param handler
 */
public void initAccountData(final Handler handler){
  AVQuery<AVAccount> query=AVObject.getQuery(AVAccount.class);
  query.limit(1000);
  query.whereEqualTo(AVAccount.USER,MyAVUser.getCurrentUser());
  query.findInBackground(new FindCallback<AVAccount>(){
    @Override public void done(    List<AVAccount> list,    AVException e){
      Message message=new Message();
      if (list.size() > 0)       accountLocalDao.clearAllAccount(_context);
      if (e == null) {
        for (        AVAccount avAccount : list) {
          Account account=new Account();
          account.setObjectID(avAccount.getObjectId());
          account.setAccountID(avAccount.getAccountId());
          account.setAccountTypeID(avAccount.getAccountTypeId());
          account.setAccountMoney(avAccount.getAccountMoney());
          account.setAccountRemark(avAccount.getAccountRemark());
          account.setIsDel(avAccount.isAccountDel());
          account.setAccountName(avAccount.getAccountName());
          account.setSyncStatus(true);
          accountLocalDao.createNewAccount(account,_context);
        }
        message.what=Constant.MSG_SUCCESS;
      }
 else {
        message.what=Constant.MSG_ERROR;
        getAvEx(e);
      }
      handler.sendMessage(message);
    }
  }
);
}","/** 
 * 从云端获取全部账户信息初始化数据
 * @param handler
 */
public void initAccountData(final Handler handler){
  AVQuery<AVAccount> query=AVObject.getQuery(AVAccount.class);
  query.limit(1000);
  query.whereEqualTo(AVAccount.USER,MyAVUser.getCurrentUser());
  query.findInBackground(new FindCallback<AVAccount>(){
    @Override public void done(    List<AVAccount> list,    AVException e){
      Message message=new Message();
      if (list.size() > 0)       accountLocalDao.clearAllAccount(_context);
      if (e == null) {
        for (        AVAccount avAccount : list) {
          Account account=new Account();
          account.setObjectID(avAccount.getObjectId());
          account.setAccountID(avAccount.getAccountId());
          account.setAccountTypeID(avAccount.getAccountTypeId());
          account.setAccountMoney(avAccount.getAccountMoney());
          account.setAccountRemark(avAccount.getAccountRemark());
          account.setIsDel(avAccount.isAccountDel());
          account.setAccountColor(avAccount.getAccountColor());
          account.setAccountName(avAccount.getAccountName());
          account.setSyncStatus(true);
          accountLocalDao.createNewAccount(account,_context);
        }
        message.what=Constant.MSG_SUCCESS;
      }
 else {
        message.what=Constant.MSG_ERROR;
        getAvEx(e);
      }
      handler.sendMessage(message);
    }
  }
);
}"
39420,"/** 
 * 用户登出
 */
public void logOut(boolean clearAvUser){
  if (clearAvUser)   MyAVUser.getCurrentUser().logOut();
  recordLocalDAO.clearAllRecord(_context);
  accountLocalDao.clearAllAccount(_context);
  recordTypeLocalDao.clearAllRecordType(_context);
  userLocalDao.delUserByUserId(MyAVUser.getCurrentUserId(),_context);
  SPUtils.put(_context,Constant.SP_GESTURE,""String_Node_Str"");
  SPUtils.put(_context,true,SettingsActivity.GESTURE_LOCK,false);
  user=null;
  configLocalDao.initRecordType(_context);
  configLocalDao.createDefaultAccount(_context);
}","/** 
 * 用户登出
 */
public void logOut(boolean clearAvUser){
  if (clearAvUser)   MyAVUser.getCurrentUser().logOut();
  recordLocalDAO.clearAllRecord(_context);
  accountLocalDao.clearAllAccount(_context);
  recordTypeLocalDao.clearAllRecordType(_context);
  userLocalDao.clear(_context);
  SPUtils.put(_context,Constant.SP_GESTURE,""String_Node_Str"");
  SPUtils.put(_context,true,SettingsActivity.GESTURE_LOCK,false);
  user=null;
  configLocalDao.initRecordType(_context);
  configLocalDao.createDefaultAccount(_context);
}"
39421,"private void initLineChart(){
  mLineChart.setDescription(""String_Node_Str"");
  mLineChart.setDragEnabled(true);
  mLineChart.setScaleEnabled(false);
  mLineChart.setTouchEnabled(true);
  mLineChart.setDrawGridBackground(false);
  mLineChart.setDrawBorders(false);
  mLineChart.getXAxis().setPosition(XAxis.XAxisPosition.BOTTOM);
  mLineChart.getXAxis().setDrawGridLines(false);
  mLineChart.getAxisRight().setEnabled(false);
  for (int j=0; j < 12; j++) {
    xLineVals1.add(j + 1 + ""String_Node_Str"");
  }
  refreshLineChart(0);
}","private void initLineChart(){
  mLineChart.setDescription(""String_Node_Str"");
  mLineChart.setDragEnabled(false);
  mLineChart.setScaleEnabled(false);
  mLineChart.setTouchEnabled(false);
  mLineChart.setDrawGridBackground(false);
  mLineChart.setDrawBorders(false);
  mLineChart.getXAxis().setPosition(XAxis.XAxisPosition.BOTTOM);
  mLineChart.getXAxis().setDrawGridLines(false);
  mLineChart.getAxisRight().setEnabled(false);
  for (int j=0; j < 12; j++) {
    xLineVals1.add(j + 1 + ""String_Node_Str"");
  }
  refreshLineChart(0);
}"
39422,"private void initLineChart(){
  mLineChart.setDescription(""String_Node_Str"");
  mLineChart.setDragEnabled(true);
  mLineChart.setScaleEnabled(false);
  mLineChart.setTouchEnabled(true);
  mLineChart.setDrawGridBackground(false);
  mLineChart.setDrawBorders(false);
  mLineChart.getXAxis().setPosition(XAxis.XAxisPosition.BOTTOM);
  mLineChart.getXAxis().setDrawGridLines(false);
  mLineChart.getAxisRight().setEnabled(false);
  for (int j=0; j < 12; j++) {
    xLineVals1.add(j + 1 + ""String_Node_Str"");
  }
  refreshLineChart();
}","private void initLineChart(){
  mLineChart.setDescription(""String_Node_Str"");
  mLineChart.setDragEnabled(true);
  mLineChart.setScaleEnabled(false);
  mLineChart.setTouchEnabled(false);
  mLineChart.setDrawGridBackground(false);
  mLineChart.setDrawBorders(false);
  mLineChart.getXAxis().setPosition(XAxis.XAxisPosition.BOTTOM);
  mLineChart.getXAxis().setDrawGridLines(false);
  mLineChart.getAxisRight().setEnabled(false);
  for (int j=0; j < 12; j++) {
    xLineVals1.add(j + 1 + ""String_Node_Str"");
  }
  refreshLineChart();
}"
39423,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  recordManager=new RecordManager(getActivity());
  View view=inflater.inflate(R.layout.record_frg_layout,container,false);
  backGround=view.findViewById(R.id.background);
  mAddRecordBt=(FloatingActionButton)view.findViewById(R.id.add_new_record);
  mAddRecordBt.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(getActivity(),CreateOrEditRecordActivity.class);
      getActivity().startActivityForResult(intent,MainActivity.REQUEST_RECORD);
    }
  }
);
  View foot=View.inflate(getActivity(),R.layout.record_foot,null);
  if (MyAVUser.getCurrentUser() != null) {
    DateFormat format1=new SimpleDateFormat(""String_Node_Str"");
    foot.setVisibility(View.VISIBLE);
    Date date=MyAVUser.getCurrentUser().getCreatedAt();
    footTv=((TextView)foot.findViewById(R.id.foot_tip));
    footTv.setText(format1.format(date) + ""String_Node_Str"");
  }
 else {
    foot.setVisibility(View.GONE);
  }
  recordLv=(ListView)view.findViewById(R.id.record_lv);
  recordLv.addFooterView(foot);
  recordDetailDOs=new ArrayList<>();
  mRecordAdapter=new RecordAdapter(getActivity(),recordDetailDOs);
  recordLv.setAdapter(mRecordAdapter);
  recordLv.setOverScrollMode(View.OVER_SCROLL_NEVER);
  loadData();
  recordLv.setOnScrollListener(new AbsListView.OnScrollListener(){
    @Override public void onScrollStateChanged(    AbsListView view,    int scrollState){
    }
    @Override public void onScroll(    AbsListView view,    int firstVisibleItem,    int visibleItemCount,    int totalItemCount){
      if (totalItemCount == 0)       return;
      if (firstVisibleItem + visibleItemCount == totalItemCount && !isRefresh) {
        loadData();
      }
    }
  }
);
  ((MainActivity)getActivity()).setReloadRecordCallBack(this);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  recordManager=new RecordManager(getActivity());
  View view=inflater.inflate(R.layout.record_frg_layout,container,false);
  backGround=view.findViewById(R.id.background);
  mAddRecordBt=(FloatingActionButton)view.findViewById(R.id.add_new_record);
  mAddRecordBt.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(getActivity(),CreateOrEditRecordActivity.class);
      getActivity().startActivityForResult(intent,MainActivity.REQUEST_RECORD);
    }
  }
);
  foot=View.inflate(getActivity(),R.layout.record_foot,null);
  footTv=((TextView)foot.findViewById(R.id.foot_tip));
  recordLv=(ListView)view.findViewById(R.id.record_lv);
  recordLv.addFooterView(foot);
  recordDetailDOs=new ArrayList<>();
  mRecordAdapter=new RecordAdapter(getActivity(),recordDetailDOs);
  recordLv.setAdapter(mRecordAdapter);
  recordLv.setOverScrollMode(View.OVER_SCROLL_NEVER);
  loadData();
  recordLv.setOnScrollListener(new AbsListView.OnScrollListener(){
    @Override public void onScrollStateChanged(    AbsListView view,    int scrollState){
    }
    @Override public void onScroll(    AbsListView view,    int firstVisibleItem,    int visibleItemCount,    int totalItemCount){
      if (totalItemCount == 0)       return;
      if (firstVisibleItem + visibleItemCount == totalItemCount && !isRefresh) {
        loadData();
      }
    }
  }
);
  ((MainActivity)getActivity()).setReloadRecordCallBack(this);
  return view;
}"
39424,"@Override public void onResume(){
  super.onResume();
  mainColor=getResources().getColor(ThemeUtil.getTheme(getActivity()).getMainColorID());
  mainDarkColor=getResources().getColor(ThemeUtil.getTheme(getActivity()).getMainDarkColorID());
  mAddRecordBt.setColorNormal(mainColor);
  mAddRecordBt.setColorPressed(mainDarkColor);
  backGround.setBackground(new ColorDrawable(mainColor));
  footTv.setTextColor(mainColor);
}","@Override public void onResume(){
  super.onResume();
  mainColor=getResources().getColor(ThemeUtil.getTheme(getActivity()).getMainColorID());
  mainDarkColor=getResources().getColor(ThemeUtil.getTheme(getActivity()).getMainDarkColorID());
  mAddRecordBt.setColorNormal(mainColor);
  mAddRecordBt.setColorPressed(mainDarkColor);
  backGround.setBackground(new ColorDrawable(mainColor));
  resetFoot();
}"
39425,"@Override public View getView(final int position,View convertView,ViewGroup parent){
  ViewHolder holder=null;
  if (convertView == null) {
    holder=new ViewHolder();
    convertView=mInflater.inflate(R.layout.item_record_type,null);
    holder.title=(TextView)convertView.findViewById(R.id.record_title);
    holder.icon=(ImageView)convertView.findViewById(R.id.record_icon);
    holder.deleteIcon=(ImageView)convertView.findViewById(R.id.delete);
    holder.addNewRecordView=convertView.findViewById(R.id.add_new_record);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  if (position == 0)   cleatAnim();
  if (position == mHidePosition) {
    convertView.setVisibility(View.INVISIBLE);
  }
 else {
    convertView.setVisibility(View.VISIBLE);
  }
  if (position == recordTypes.size() - 1) {
    if (convertView.getTag(R.string.app_name) == null)     convertView.setTag(R.string.app_name,""String_Node_Str"");
    holder.addNewRecordView.setVisibility(View.VISIBLE);
    holder.icon.setVisibility(View.GONE);
    holder.title.setText(""String_Node_Str"");
    holder.icon.setImageResource(R.drawable.ic_add_white);
    AnimatorSet mAnimatorSet=new AnimatorSet();
    ObjectAnimator objectAnimator=ObjectAnimator.ofFloat(convertView,""String_Node_Str"",0);
    objectAnimator.setDuration(0);
    mAnimatorSet.playTogether(objectAnimator);
    mAnimatorSet.start();
    holder.deleteIcon.setVisibility(View.GONE);
  }
 else {
    holder.addNewRecordView.setVisibility(View.GONE);
    holder.icon.setVisibility(View.VISIBLE);
    convertView.setTag(R.string.app_name,null);
    final RecordType recordType=recordTypes.get(position);
    holder.title.setText(recordType.getRecordDesc());
    holder.icon.setImageResource(IconTypeUtil.getTypeIcon(recordType.getRecordIcon()));
    if (mShake) {
      AnimatorSet mAnimatorSet=new AnimatorSet();
      ObjectAnimator objectAnimator=ObjectAnimator.ofFloat(convertView,""String_Node_Str"",3,0,-3);
      objectAnimator.setRepeatMode(Animation.REVERSE);
      objectAnimator.setRepeatCount(Integer.MAX_VALUE);
      objectAnimator.setDuration(150);
      mAnimatorSet.playTogether(objectAnimator);
      mAnimatorSet.start();
      animatorSets.add(mAnimatorSet);
      holder.deleteIcon.setVisibility(View.VISIBLE);
    }
 else {
      AnimatorSet mAnimatorSet=new AnimatorSet();
      ObjectAnimator objectAnimator=ObjectAnimator.ofFloat(convertView,""String_Node_Str"",0);
      objectAnimator.setDuration(0);
      mAnimatorSet.playTogether(objectAnimator);
      mAnimatorSet.start();
      holder.deleteIcon.setVisibility(View.GONE);
    }
    holder.deleteIcon.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (recordTypes.size() == 2) {
          SnackBarUtil.showSnackInfo(v,mContext,""String_Node_Str"");
          return;
        }
        final MaterialDialog materialDialog=new MaterialDialog(mContext);
        materialDialog.setTitle(""String_Node_Str"").setMessage(""String_Node_Str"").setPositiveButton(""String_Node_Str"",new View.OnClickListener(){
          @Override public void onClick(          View v){
            recordTypes.remove(position);
            recordType.setIsDel(true);
            mDragGridView.animateReorder(position,recordTypes.size());
            notifyDataSetChanged();
            recordManager.updateRecordType(recordType,new Handler(){
              @Override public void handleMessage(              Message msg){
                super.handleMessage(msg);
              }
            }
);
          }
        }
).setNegativeButton(""String_Node_Str"",new View.OnClickListener(){
          @Override public void onClick(          View v){
            materialDialog.dismiss();
          }
        }
).show();
      }
    }
);
  }
  return convertView;
}","@Override public View getView(final int position,View convertView,ViewGroup parent){
  ViewHolder holder=null;
  if (convertView == null) {
    holder=new ViewHolder();
    convertView=mInflater.inflate(R.layout.item_record_type,null);
    holder.title=(TextView)convertView.findViewById(R.id.record_title);
    holder.icon=(ImageView)convertView.findViewById(R.id.record_icon);
    holder.deleteIcon=(ImageView)convertView.findViewById(R.id.delete);
    holder.addNewRecordView=convertView.findViewById(R.id.add_new_record);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  if (position == 0)   cleatAnim();
  if (position == mHidePosition) {
    convertView.setVisibility(View.INVISIBLE);
  }
 else {
    convertView.setVisibility(View.VISIBLE);
  }
  if (position == recordTypes.size() - 1) {
    if (convertView.getTag(R.string.app_name) == null)     convertView.setTag(R.string.app_name,""String_Node_Str"");
    holder.addNewRecordView.setVisibility(View.VISIBLE);
    holder.icon.setVisibility(View.GONE);
    holder.title.setText(""String_Node_Str"");
    holder.icon.setImageResource(R.drawable.ic_add_white);
    AnimatorSet mAnimatorSet=new AnimatorSet();
    ObjectAnimator objectAnimator=ObjectAnimator.ofFloat(convertView,""String_Node_Str"",0);
    objectAnimator.setDuration(0);
    mAnimatorSet.playTogether(objectAnimator);
    mAnimatorSet.start();
    holder.deleteIcon.setVisibility(View.GONE);
  }
 else {
    holder.addNewRecordView.setVisibility(View.GONE);
    holder.icon.setVisibility(View.VISIBLE);
    convertView.setTag(R.string.app_name,null);
    final RecordType recordType=recordTypes.get(position);
    holder.title.setText(recordType.getRecordDesc());
    holder.icon.setImageResource(IconTypeUtil.getTypeIcon(recordType.getRecordIcon()));
    if (mShake) {
      AnimatorSet mAnimatorSet=new AnimatorSet();
      ObjectAnimator objectAnimator=ObjectAnimator.ofFloat(convertView,""String_Node_Str"",3,0,-3);
      objectAnimator.setRepeatMode(Animation.REVERSE);
      objectAnimator.setRepeatCount(Integer.MAX_VALUE);
      objectAnimator.setDuration(150);
      mAnimatorSet.playTogether(objectAnimator);
      mAnimatorSet.start();
      animatorSets.add(mAnimatorSet);
      holder.deleteIcon.setVisibility(View.VISIBLE);
    }
 else {
      AnimatorSet mAnimatorSet=new AnimatorSet();
      ObjectAnimator objectAnimator=ObjectAnimator.ofFloat(convertView,""String_Node_Str"",0);
      objectAnimator.setDuration(0);
      mAnimatorSet.playTogether(objectAnimator);
      mAnimatorSet.start();
      holder.deleteIcon.setVisibility(View.GONE);
    }
    holder.deleteIcon.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (recordTypes.size() == 2) {
          SnackBarUtil.showSnackInfo(v,mContext,""String_Node_Str"");
          return;
        }
        final MaterialDialog materialDialog=new MaterialDialog(mContext);
        materialDialog.setTitle(""String_Node_Str"").setMessage(""String_Node_Str"").setPositiveButton(""String_Node_Str"",new View.OnClickListener(){
          @Override public void onClick(          View v){
            recordTypes.remove(position);
            recordType.setIsDel(true);
            mDragGridView.animateReorder(position,recordTypes.size());
            notifyDataSetChanged();
            materialDialog.dismiss();
            recordManager.updateRecordType(recordType,null);
          }
        }
).setNegativeButton(""String_Node_Str"",new View.OnClickListener(){
          @Override public void onClick(          View v){
            materialDialog.dismiss();
          }
        }
).show();
      }
    }
);
  }
  return convertView;
}"
39426,"protected boolean canSync(){
  return MyAVUser.getCurrentUser() != null && ((boolean)SPUtils.get(_context,true,Constant.SP_SYNC_ONLY_WIFI,false) ? NetworkUtil.checkNetwork(_context) : NetworkUtil.checkNetwork(_context));
}","protected boolean canSync(){
  return MyAVUser.getCurrentUser() != null && ((boolean)SPUtils.get(_context,true,Constant.SP_SYNC_ONLY_WIFI,false) ? NetworkUtil.checkWifi(_context) : NetworkUtil.checkNetwork(_context));
}"
39427,"/** 
 * 创建新记录
 * @param record
 */
public void createNewRecord(final Record record,final Handler handler){
  record.setIsDel(false);
  if (canSync()) {
    final AVRecord avRecord=DataConvertUtil.convertRecord2AVRecord(record);
    avRecord.setRecordIsDel(false);
    avRecord.saveInBackground(new SaveCallback(){
      @Override public void done(      AVException e){
        record.setSyncStatus(e == null ? true : false);
        recordLocalDAO.createNewRecord(_context,record);
        getAvEx(e);
        sendEmptyMessage(handler,Constant.MSG_SUCCESS);
      }
    }
);
  }
 else {
    record.setSyncStatus(false);
    recordLocalDAO.createNewRecord(_context,record);
  }
}","/** 
 * 创建新记录
 * @param record
 */
public void createNewRecord(final Record record,final Handler handler){
  record.setIsDel(false);
  if (canSync()) {
    final AVRecord avRecord=DataConvertUtil.convertRecord2AVRecord(record);
    avRecord.setRecordIsDel(false);
    avRecord.saveInBackground(new SaveCallback(){
      @Override public void done(      AVException e){
        record.setSyncStatus(e == null ? true : false);
        recordLocalDAO.createNewRecord(_context,record);
        getAvEx(e);
        sendEmptyMessage(handler,Constant.MSG_SUCCESS);
      }
    }
);
  }
 else {
    record.setSyncStatus(false);
    recordLocalDAO.createNewRecord(_context,record);
    sendEmptyMessage(handler,Constant.MSG_SUCCESS);
  }
}"
39428,"/** 
 * 修改记录
 * @param record
 * @param handler
 */
public void updateOldRecord(final Record record,final Handler handler){
  if (canSync()) {
    if (!TextUtils.isEmpty(record.getObjectID())) {
      AVRecord avRecord=DataConvertUtil.convertRecord2AVRecord(record);
      avRecord.saveInBackground(new SaveCallback(){
        @Override public void done(        AVException e){
          if (e == null) {
            record.setSyncStatus(true);
            recordLocalDAO.updateOldRecord(_context,record);
          }
 else {
            record.setSyncStatus(false);
            recordLocalDAO.updateOldRecord(_context,record);
          }
          sendEmptyMessage(handler,Constant.MSG_SUCCESS);
          getAvEx(e);
        }
      }
);
      return;
    }
    AVQuery<AVRecord> query=AVObject.getQuery(AVRecord.class);
    query.whereEqualTo(AVRecord.RECORD_ID,record.getRecordId());
    query.whereEqualTo(AVRecord.USER,MyAVUser.getCurrentUser());
    query.findInBackground(new FindCallback<AVRecord>(){
      @Override public void done(      List<AVRecord> list,      AVException e){
        if (e == null) {
          AVRecord avRecord=DataConvertUtil.convertRecord2AVRecord(record);
          if (list.size() > 0) {
            avRecord.setObjectId(list.get(0).getObjectId());
          }
          avRecord.saveInBackground(new SaveCallback(){
            @Override public void done(            AVException e){
              if (e == null) {
                record.setSyncStatus(true);
                recordLocalDAO.updateOldRecord(_context,record);
              }
 else {
                record.setSyncStatus(false);
                recordLocalDAO.updateOldRecord(_context,record);
              }
              if (handler != null)               handler.sendEmptyMessage(Constant.MSG_SUCCESS);
              getAvEx(e);
            }
          }
);
        }
 else {
          record.setSyncStatus(false);
          recordLocalDAO.updateOldRecord(_context,record);
          if (handler != null)           handler.sendEmptyMessage(Constant.MSG_SUCCESS);
          getAvEx(e);
        }
      }
    }
);
  }
 else {
    record.setSyncStatus(false);
    recordLocalDAO.updateOldRecord(_context,record);
    if (handler != null)     handler.sendEmptyMessage(Constant.MSG_SUCCESS);
  }
}","/** 
 * 修改记录
 * @param record
 * @param handler
 */
public void updateOldRecord(final Record record,final Handler handler){
  if (canSync()) {
    if (!TextUtils.isEmpty(record.getObjectID())) {
      AVRecord avRecord=DataConvertUtil.convertRecord2AVRecord(record);
      avRecord.saveInBackground(new SaveCallback(){
        @Override public void done(        AVException e){
          if (e == null) {
            record.setSyncStatus(true);
            recordLocalDAO.updateOldRecord(_context,record);
          }
 else {
            record.setSyncStatus(false);
            recordLocalDAO.updateOldRecord(_context,record);
          }
          sendEmptyMessage(handler,Constant.MSG_SUCCESS);
          getAvEx(e);
        }
      }
);
      return;
    }
    AVQuery<AVRecord> query=AVObject.getQuery(AVRecord.class);
    query.whereEqualTo(AVRecord.RECORD_ID,record.getRecordId());
    query.whereEqualTo(AVRecord.USER,MyAVUser.getCurrentUser());
    query.findInBackground(new FindCallback<AVRecord>(){
      @Override public void done(      List<AVRecord> list,      AVException e){
        if (e == null) {
          AVRecord avRecord=DataConvertUtil.convertRecord2AVRecord(record);
          if (list.size() > 0) {
            avRecord.setObjectId(list.get(0).getObjectId());
          }
          avRecord.saveInBackground(new SaveCallback(){
            @Override public void done(            AVException e){
              if (e == null) {
                record.setSyncStatus(true);
                recordLocalDAO.updateOldRecord(_context,record);
              }
 else {
                record.setSyncStatus(false);
                recordLocalDAO.updateOldRecord(_context,record);
              }
              if (handler != null)               handler.sendEmptyMessage(Constant.MSG_SUCCESS);
              getAvEx(e);
            }
          }
);
        }
 else {
          record.setSyncStatus(false);
          recordLocalDAO.updateOldRecord(_context,record);
          if (handler != null)           handler.sendEmptyMessage(Constant.MSG_SUCCESS);
          getAvEx(e);
        }
      }
    }
);
  }
 else {
    record.setSyncStatus(false);
    recordLocalDAO.updateOldRecord(_context,record);
    sendEmptyMessage(handler,Constant.MSG_SUCCESS);
  }
}"
39429,"private boolean canSync(){
  return MyAVUser.getCurrentUser() != null && ((boolean)SPUtils.get(this,true,Constant.SP_SYNC_ONLY_WIFI,false) ? NetworkUtil.checkNetwork(this) : NetworkUtil.checkNetwork(this));
}","private boolean canSync(){
  return MyAVUser.getCurrentUser() != null && ((boolean)SPUtils.get(this,true,Constant.SP_SYNC_ONLY_WIFI,false) ? NetworkUtil.checkWifi(this) : NetworkUtil.checkNetwork(this));
}"
39430,"private void saveProp(String param){
  final Intent intent=new Intent();
switch (mEditType) {
case PROP_TYPE_ACCOUNT_NAME:
    intent.putExtra(IntentConstant.EDIT_ACCOUNT_NAME,param);
  if (mAccountID > 0) {
    accountManager.updateAccountName(mAccountID,param,new Handler(){
      @Override public void handleMessage(      Message msg){
        super.handleMessage(msg);
        setResult(RESULT_OK,intent);
        finish();
      }
    }
);
  }
break;
case PROP_TYPE_ACCOUNT_MONEY:
final double money=Double.parseDouble(param);
if (mAccountID > 0) {
accountManager.updateAccountMoney(mAccountID,money - mMoney,new Handler(){
@Override public void handleMessage(Message msg){
  super.handleMessage(msg);
  Record record=new Record();
  record.setIsDel(false);
  record.setRemark(""String_Node_Str"");
  record.setRecordId(System.currentTimeMillis());
  record.setAccountID(mAccountID);
  record.setRecordType(Constant.RecordType.CHANGE.getId());
  record.setRecordTypeID(27L);
  record.setRecordMoney(money - mMoney);
  record.setRecordDate(new Date(System.currentTimeMillis()));
  recordManager.createNewRecord(record,null);
  setResult(RESULT_OK,intent);
  finish();
}
}
);
}
intent.putExtra(IntentConstant.EDIT_ACCOUNT_MONEY,money);
break;
case PROP_TYPE_ACCOUNT_REMARK:
intent.putExtra(IntentConstant.EDIT_ACCOUNT_REMARK,param);
if (mAccountID > 0) {
accountManager.updateAccountRemark(mAccountID,param,new Handler(){
@Override public void handleMessage(Message msg){
super.handleMessage(msg);
setResult(RESULT_OK,intent);
finish();
}
}
);
}
break;
default :
break;
}
}","private void saveProp(String param){
  final Intent intent=new Intent();
switch (mEditType) {
case PROP_TYPE_ACCOUNT_NAME:
    intent.putExtra(IntentConstant.EDIT_ACCOUNT_NAME,param);
  if (mAccountID > 0) {
    accountManager.updateAccountName(mAccountID,param,new Handler(){
      @Override public void handleMessage(      Message msg){
        super.handleMessage(msg);
        setResult(RESULT_OK,intent);
        finish();
      }
    }
);
  }
break;
case PROP_TYPE_ACCOUNT_MONEY:
final double money=Double.parseDouble(param);
if (mAccountID > 0) {
accountManager.updateAccountMoney(mAccountID,money - mMoney,new Handler(){
@Override public void handleMessage(Message msg){
  super.handleMessage(msg);
  Record record=new Record();
  record.setIsDel(false);
  record.setRemark(""String_Node_Str"");
  record.setRecordId(System.currentTimeMillis());
  record.setAccountID(mAccountID);
  record.setRecordType(Constant.RecordType.CHANGE.getId());
  record.setRecordTypeID(27L);
  BigDecimal b=new BigDecimal(money - mMoney);
  record.setRecordMoney(b.setScale(2,BigDecimal.ROUND_HALF_UP).doubleValue());
  record.setRecordDate(new Date(System.currentTimeMillis()));
  recordManager.createNewRecord(record,null);
  setResult(RESULT_OK,intent);
  finish();
}
}
);
}
intent.putExtra(IntentConstant.EDIT_ACCOUNT_MONEY,money);
break;
case PROP_TYPE_ACCOUNT_REMARK:
intent.putExtra(IntentConstant.EDIT_ACCOUNT_REMARK,param);
if (mAccountID > 0) {
accountManager.updateAccountRemark(mAccountID,param,new Handler(){
@Override public void handleMessage(Message msg){
super.handleMessage(msg);
setResult(RESULT_OK,intent);
finish();
}
}
);
}
break;
default :
break;
}
}"
39431,"private void doLogin(){
  boolean isEmail=false;
  String user=mTitUserId.getText().toString();
  String password=mTitPassWord.getText().toString();
  if (TextUtils.isEmpty(user)) {
    mTilUserId.setError(""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(password)) {
    mTilPassWord.setError(""String_Node_Str"");
    return;
  }
  hideKeyboard();
  isEmail=isNameAddressFormat(user);
  userManager.login(isEmail ? null : user,password,isEmail ? user : null,new Handler(){
    @Override public void handleMessage(    Message msg){
      super.handleMessage(msg);
      if (msg.what == Constant.MSG_ERROR) {
        SnackBarUtil.showSnackInfo(mTilUserId,LoginActivity.this,msg.obj.toString());
      }
 else {
        SnackBarUtil.showSnackInfo(mTilUserId,LoginActivity.this,""String_Node_Str"");
        new Handler().postDelayed(new Runnable(){
          @Override public void run(){
            SnackBarUtil.showSnackInfo(mTilUserId,LoginActivity.this,""String_Node_Str"");
            accountManager.initAccountData(new Handler(){
              @Override public void handleMessage(              Message msg){
                super.handleMessage(msg);
                recordManager.initRecordTypeData(new Handler(){
                  @Override public void handleMessage(                  Message msg){
                    super.handleMessage(msg);
                    recordManager.initRecordData(new Handler(){
                      @Override public void handleMessage(                      Message msg){
                        super.handleMessage(msg);
                        new Handler().postDelayed(new Runnable(){
                          @Override public void run(){
                            setResult(RESULT_OK);
                            finish();
                          }
                        }
,500);
                      }
                    }
);
                  }
                }
);
              }
            }
);
          }
        }
,500);
      }
    }
  }
);
}","private void doLogin(){
  boolean isEmail=false;
  String user=mTitUserId.getText().toString();
  String password=mTitPassWord.getText().toString();
  if (TextUtils.isEmpty(user)) {
    mTilUserId.setError(""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(password)) {
    mTilPassWord.setError(""String_Node_Str"");
    return;
  }
  hideKeyboard();
  isEmail=isNameAddressFormat(user);
  userManager.login(isEmail ? null : user,password,isEmail ? user : null,new Handler(){
    @Override public void handleMessage(    Message msg){
      super.handleMessage(msg);
      if (msg.what == Constant.MSG_ERROR) {
        SnackBarUtil.showSnackInfo(mTilUserId,LoginActivity.this,msg.obj.toString());
      }
 else {
        SnackBarUtil.showSnackInfo(mTilUserId,LoginActivity.this,""String_Node_Str"");
        new Handler().postDelayed(new Runnable(){
          @Override public void run(){
            SnackBarUtil.showSnackInfo(mTilUserId,LoginActivity.this,""String_Node_Str"");
            accountManager.initAccountData(new Handler(){
              @Override public void handleMessage(              Message msg){
                super.handleMessage(msg);
                recordManager.initRecordTypeData(new Handler(){
                  @Override public void handleMessage(                  Message msg){
                    super.handleMessage(msg);
                    recordManager.initRecordData(new Handler(){
                      @Override public void handleMessage(                      Message msg){
                        super.handleMessage(msg);
                        new Handler().postDelayed(new Runnable(){
                          @Override public void run(){
                            setResult(RESULT_OK);
                            finish();
                          }
                        }
,600);
                      }
                    }
);
                  }
                }
);
              }
            }
);
          }
        }
,600);
      }
    }
  }
);
}"
39432,"@Override public void handleMessage(Message msg){
  super.handleMessage(msg);
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      setResult(RESULT_OK);
      finish();
    }
  }
,500);
}","@Override public void handleMessage(Message msg){
  super.handleMessage(msg);
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      setResult(RESULT_OK);
      finish();
    }
  }
,600);
}"
39433,"@Override public void handleMessage(Message msg){
  super.handleMessage(msg);
  if (msg.what == Constant.MSG_ERROR) {
    SnackBarUtil.showSnackInfo(mTilUserID,RegisterActivity.this,msg.obj.toString());
  }
 else {
    AVUser.requestEmailVerfiyInBackground(mTieEmail.getText().toString(),new RequestEmailVerifyCallback(){
      @Override public void done(      AVException e){
      }
    }
);
    SnackBarUtil.showSnackInfo(mTilUserID,RegisterActivity.this,""String_Node_Str"");
    MyAVUser.getCurrentUser().logOut();
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        finish();
      }
    }
,500);
  }
}","@Override public void handleMessage(Message msg){
  super.handleMessage(msg);
  if (msg.what == Constant.MSG_ERROR) {
    SnackBarUtil.showSnackInfo(mTilUserID,RegisterActivity.this,msg.obj.toString());
  }
 else {
    SnackBarUtil.showSnackInfo(mTilUserID,RegisterActivity.this,""String_Node_Str"");
    MyAVUser.getCurrentUser().logOut();
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        finish();
      }
    }
,500);
  }
}"
39434,"private void register(){
  String user=mTieUserID.getText().toString();
  String password=mTiePass.getText().toString();
  String password2=mTiePass2.getText().toString();
  String email=mTieEmail.getText().toString();
  if (TextUtils.isEmpty(user)) {
    mTilUserID.setError(""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(email)) {
    mTilEmail.setError(""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(password)) {
    mTilPass.setError(""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(password2)) {
    mTilPass2.setError(""String_Node_Str"");
    return;
  }
  if (!password.equals(password2)) {
    mTilPass.setError(""String_Node_Str"");
    mTilPass2.setError(""String_Node_Str"");
    return;
  }
  userManager.register(user,password,email,new Handler(){
    @Override public void handleMessage(    Message msg){
      super.handleMessage(msg);
      if (msg.what == Constant.MSG_ERROR) {
        SnackBarUtil.showSnackInfo(mTilUserID,RegisterActivity.this,msg.obj.toString());
      }
 else {
        AVUser.requestEmailVerfiyInBackground(mTieEmail.getText().toString(),new RequestEmailVerifyCallback(){
          @Override public void done(          AVException e){
          }
        }
);
        SnackBarUtil.showSnackInfo(mTilUserID,RegisterActivity.this,""String_Node_Str"");
        MyAVUser.getCurrentUser().logOut();
        new Handler().postDelayed(new Runnable(){
          @Override public void run(){
            finish();
          }
        }
,500);
      }
    }
  }
);
}","private void register(){
  String user=mTieUserID.getText().toString();
  String password=mTiePass.getText().toString();
  String password2=mTiePass2.getText().toString();
  String email=mTieEmail.getText().toString();
  if (TextUtils.isEmpty(user)) {
    mTilUserID.setError(""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(email)) {
    mTilEmail.setError(""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(password)) {
    mTilPass.setError(""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(password2)) {
    mTilPass2.setError(""String_Node_Str"");
    return;
  }
  if (!password.equals(password2)) {
    mTilPass.setError(""String_Node_Str"");
    mTilPass2.setError(""String_Node_Str"");
    return;
  }
  userManager.register(user,password,email,new Handler(){
    @Override public void handleMessage(    Message msg){
      super.handleMessage(msg);
      if (msg.what == Constant.MSG_ERROR) {
        SnackBarUtil.showSnackInfo(mTilUserID,RegisterActivity.this,msg.obj.toString());
      }
 else {
        SnackBarUtil.showSnackInfo(mTilUserID,RegisterActivity.this,""String_Node_Str"");
        MyAVUser.getCurrentUser().logOut();
        new Handler().postDelayed(new Runnable(){
          @Override public void run(){
            finish();
          }
        }
,500);
      }
    }
  }
);
}"
39435,"public static String getError(int errorCode){
  String info=""String_Node_Str"";
switch (errorCode) {
case AVException.USERNAME_TAKEN:
    info=""String_Node_Str"";
  break;
case AVException.USER_DOESNOT_EXIST:
info=""String_Node_Str"";
break;
case AVException.USERNAME_PASSWORD_MISMATCH:
info=""String_Node_Str"";
break;
case AVException.INVALID_EMAIL_ADDRESS:
info=""String_Node_Str"";
break;
case AVException.INVALID_PHONE_NUMBER:
info=""String_Node_Str"";
break;
case AVException.EMAIL_TAKEN:
info=""String_Node_Str"";
break;
case AVException.USER_MOBILE_PHONENUMBER_TAKEN:
info=""String_Node_Str"";
break;
default :
break;
}
return info;
}","public static String getError(int errorCode){
  String info=""String_Node_Str"";
switch (errorCode) {
case AVException.USERNAME_TAKEN:
    info=""String_Node_Str"";
  break;
case AVException.USER_DOESNOT_EXIST:
info=""String_Node_Str"";
break;
case AVException.USERNAME_PASSWORD_MISMATCH:
info=""String_Node_Str"";
break;
case AVException.INVALID_EMAIL_ADDRESS:
info=""String_Node_Str"";
break;
case AVException.INVALID_PHONE_NUMBER:
info=""String_Node_Str"";
break;
case AVException.EMAIL_TAKEN:
info=""String_Node_Str"";
break;
case AVException.USER_MOBILE_PHONENUMBER_TAKEN:
info=""String_Node_Str"";
break;
case 216:
info=""String_Node_Str"";
break;
default :
break;
}
return info;
}"
39436,"public List<Record> getRecordByDate(Context context,Date date){
  RecordDao recordDao=getDaoSession(context).getRecordDao();
  return recordDao.queryBuilder().where(RecordDao.Properties.IsDel.eq(false)).where(RecordDao.Properties.RecordDate.eq(date)).orderDesc(RecordDao.Properties.Id).list();
}","public List<Record> getRecordByDate(Context context,Date date){
  RecordDao recordDao=getDaoSession(context).getRecordDao();
  return recordDao.queryBuilder().where(RecordDao.Properties.IsDel.eq(false)).where(RecordDao.Properties.RecordDate.eq(date)).whereOr(RecordDao.Properties.RecordType.eq(Constant.RecordType.SHOURU.getId()),RecordDao.Properties.RecordType.eq(Constant.RecordType.AA_SHOURU.getId()),RecordDao.Properties.RecordType.eq(Constant.RecordType.ZUICHU.getId()),RecordDao.Properties.RecordType.eq(Constant.RecordType.AA_ZHICHU.getId())).orderDesc(RecordDao.Properties.Id).list();
}"
39437,"/** 
 * 创建新记录
 * @param record
 */
public void createNewRecord(final Record record,final Handler handler){
  record.setIsDel(false);
  if (!TextUtils.isEmpty(MyAVUser.getCurrentUserId())) {
    final AVRecord avRecord=new AVRecord();
    avRecord.setUser(MyAVUser.getCurrentUser());
    avRecord.setRecordId(record.getRecordId());
    avRecord.setAccountId(record.getAccountID());
    avRecord.setRecordDate(record.getRecordDate());
    avRecord.setRecordMoney(record.getRecordMoney());
    avRecord.setRecordTypeId(record.getRecordTypeID());
    avRecord.setRecordType(record.getRecordType());
    avRecord.setRemark(record.getRemark());
    avRecord.setRecordIsDel(false);
    avRecord.saveInBackground(new SaveCallback(){
      @Override public void done(      AVException e){
        record.setSyncStatus(e == null ? true : false);
        recordLocalDAO.createNewRecord(_context,record);
        getAvEx(e);
        handler.sendEmptyMessage(Constant.MSG_SUCCESS);
      }
    }
);
  }
 else {
    record.setSyncStatus(false);
    recordLocalDAO.createNewRecord(_context,record);
  }
}","/** 
 * 创建新记录
 * @param record
 */
public void createNewRecord(final Record record,final Handler handler){
  record.setIsDel(false);
  if (!TextUtils.isEmpty(MyAVUser.getCurrentUserId())) {
    final AVRecord avRecord=new AVRecord();
    avRecord.setUser(MyAVUser.getCurrentUser());
    avRecord.setRecordId(record.getRecordId());
    avRecord.setAccountId(record.getAccountID());
    avRecord.setRecordDate(record.getRecordDate());
    avRecord.setRecordMoney(record.getRecordMoney());
    avRecord.setRecordTypeId(record.getRecordTypeID());
    avRecord.setRecordType(record.getRecordType());
    avRecord.setRemark(record.getRemark());
    avRecord.setRecordIsDel(false);
    avRecord.saveInBackground(new SaveCallback(){
      @Override public void done(      AVException e){
        record.setSyncStatus(e == null ? true : false);
        recordLocalDAO.createNewRecord(_context,record);
        getAvEx(e);
        sendEmptyMessage(handler,Constant.MSG_SUCCESS);
      }
    }
);
  }
 else {
    record.setSyncStatus(false);
    recordLocalDAO.createNewRecord(_context,record);
  }
}"
39438,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_edit_account_prop);
  accountManager=new AccountManager(this);
  initParam();
  initWidget();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_edit_account_prop);
  accountManager=new AccountManager(this);
  recordManager=new RecordManager(this);
  initParam();
  initWidget();
}"
39439,"private void saveProp(String param){
  final Intent intent=new Intent();
switch (mEditType) {
case PROP_TYPE_ACCOUNT_NAME:
    intent.putExtra(IntentConstant.EDIT_ACCOUNT_NAME,param);
  if (mAccountID > 0) {
    accountManager.updateAccountName(mAccountID,param,new Handler(){
      @Override public void handleMessage(      Message msg){
        super.handleMessage(msg);
        setResult(RESULT_OK,intent);
        finish();
      }
    }
);
  }
break;
case PROP_TYPE_ACCOUNT_MONEY:
double money=Double.parseDouble(param);
if (mAccountID > 0) {
accountManager.updateAccountMoney(mAccountID,money - mMoney,new Handler(){
@Override public void handleMessage(Message msg){
  super.handleMessage(msg);
  setResult(RESULT_OK,intent);
  finish();
}
}
);
}
intent.putExtra(IntentConstant.EDIT_ACCOUNT_MONEY,money);
break;
case PROP_TYPE_ACCOUNT_REMARK:
intent.putExtra(IntentConstant.EDIT_ACCOUNT_REMARK,param);
if (mAccountID > 0) {
accountManager.updateAccountRemark(mAccountID,param,new Handler(){
@Override public void handleMessage(Message msg){
super.handleMessage(msg);
setResult(RESULT_OK,intent);
finish();
}
}
);
}
break;
default :
break;
}
}","private void saveProp(String param){
  final Intent intent=new Intent();
switch (mEditType) {
case PROP_TYPE_ACCOUNT_NAME:
    intent.putExtra(IntentConstant.EDIT_ACCOUNT_NAME,param);
  if (mAccountID > 0) {
    accountManager.updateAccountName(mAccountID,param,new Handler(){
      @Override public void handleMessage(      Message msg){
        super.handleMessage(msg);
        setResult(RESULT_OK,intent);
        finish();
      }
    }
);
  }
break;
case PROP_TYPE_ACCOUNT_MONEY:
final double money=Double.parseDouble(param);
if (mAccountID > 0) {
accountManager.updateAccountMoney(mAccountID,money - mMoney,new Handler(){
@Override public void handleMessage(Message msg){
  super.handleMessage(msg);
  Record record=new Record();
  record.setIsDel(false);
  record.setRemark(""String_Node_Str"");
  record.setRecordId(System.currentTimeMillis());
  record.setAccountID(mAccountID);
  record.setRecordType(Constant.RecordType.CHANGE.getId());
  record.setRecordTypeID(27L);
  record.setRecordMoney(money - mMoney);
  record.setRecordDate(new Date(System.currentTimeMillis()));
  recordManager.createNewRecord(record,null);
  setResult(RESULT_OK,intent);
  finish();
}
}
);
}
intent.putExtra(IntentConstant.EDIT_ACCOUNT_MONEY,money);
break;
case PROP_TYPE_ACCOUNT_REMARK:
intent.putExtra(IntentConstant.EDIT_ACCOUNT_REMARK,param);
if (mAccountID > 0) {
accountManager.updateAccountRemark(mAccountID,param,new Handler(){
@Override public void handleMessage(Message msg){
super.handleMessage(msg);
setResult(RESULT_OK,intent);
finish();
}
}
);
}
break;
default :
break;
}
}"
39440,"@Override public void handleMessage(Message msg){
  super.handleMessage(msg);
  if (msg.what == Constant.MSG_ERROR) {
    SnackBarUtil.showSnackInfo(mTilUserID,RegisterActivity.this,msg.obj.toString());
  }
 else {
    SnackBarUtil.showSnackInfo(mTilUserID,RegisterActivity.this,""String_Node_Str"");
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        finish();
      }
    }
,500);
  }
}","@Override public void handleMessage(Message msg){
  super.handleMessage(msg);
  if (msg.what == Constant.MSG_ERROR) {
    SnackBarUtil.showSnackInfo(mTilUserID,RegisterActivity.this,msg.obj.toString());
  }
 else {
    SnackBarUtil.showSnackInfo(mTilUserID,RegisterActivity.this,""String_Node_Str"");
    MyAVUser.getCurrentUser().logOut();
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        finish();
      }
    }
,500);
  }
}"
39441,"private void register(){
  String user=mTieUserID.getText().toString();
  String password=mTiePass.getText().toString();
  String password2=mTiePass2.getText().toString();
  String email=mTieEmail.getText().toString();
  if (TextUtils.isEmpty(user)) {
    mTilUserID.setError(""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(email)) {
    mTilEmail.setError(""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(password)) {
    mTilPass.setError(""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(password2)) {
    mTilPass2.setError(""String_Node_Str"");
    return;
  }
  if (!password.equals(password2)) {
    mTilPass.setError(""String_Node_Str"");
    mTilPass2.setError(""String_Node_Str"");
    return;
  }
  userManager.register(user,password,email,new Handler(){
    @Override public void handleMessage(    Message msg){
      super.handleMessage(msg);
      if (msg.what == Constant.MSG_ERROR) {
        SnackBarUtil.showSnackInfo(mTilUserID,RegisterActivity.this,msg.obj.toString());
      }
 else {
        SnackBarUtil.showSnackInfo(mTilUserID,RegisterActivity.this,""String_Node_Str"");
        new Handler().postDelayed(new Runnable(){
          @Override public void run(){
            finish();
          }
        }
,500);
      }
    }
  }
);
}","private void register(){
  String user=mTieUserID.getText().toString();
  String password=mTiePass.getText().toString();
  String password2=mTiePass2.getText().toString();
  String email=mTieEmail.getText().toString();
  if (TextUtils.isEmpty(user)) {
    mTilUserID.setError(""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(email)) {
    mTilEmail.setError(""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(password)) {
    mTilPass.setError(""String_Node_Str"");
    return;
  }
  if (TextUtils.isEmpty(password2)) {
    mTilPass2.setError(""String_Node_Str"");
    return;
  }
  if (!password.equals(password2)) {
    mTilPass.setError(""String_Node_Str"");
    mTilPass2.setError(""String_Node_Str"");
    return;
  }
  userManager.register(user,password,email,new Handler(){
    @Override public void handleMessage(    Message msg){
      super.handleMessage(msg);
      if (msg.what == Constant.MSG_ERROR) {
        SnackBarUtil.showSnackInfo(mTilUserID,RegisterActivity.this,msg.obj.toString());
      }
 else {
        SnackBarUtil.showSnackInfo(mTilUserID,RegisterActivity.this,""String_Node_Str"");
        MyAVUser.getCurrentUser().logOut();
        new Handler().postDelayed(new Runnable(){
          @Override public void run(){
            finish();
          }
        }
,500);
      }
    }
  }
);
}"
39442,"private static void reloadConfig(){
  PrimitiveMobsConfigMobs.load(config);
  TreasureSlimeLoot.load();
  HauntedToolLoot.load();
  FilchLizardLoot.load();
  if (config.hasChanged()) {
    config.save();
  }
}","private static void reloadConfig(){
  PrimitiveMobsConfigMobs.load(config);
  PrimitiveMobsConfigSpawns.load(config);
  TreasureSlimeLoot.load();
  HauntedToolLoot.load();
  FilchLizardLoot.load();
  if (config.hasChanged()) {
    config.save();
  }
}"
39443,"public static void load(Configuration config){
  String category=""String_Node_Str"";
  config.addCustomCategoryComment(category,""String_Node_Str"");
  treasureSlimeLoot=config.get(category,""String_Node_Str"",TreasureSlimeLoot.getDefaultValues()).getStringList();
  hauntedToolLoot=config.get(category,""String_Node_Str"",HauntedToolLoot.getDefaultValues()).getStringList();
  filchStealLoot=config.get(category,""String_Node_Str"",FilchLizardLoot.getDefaultValues()).getStringList();
  debug=config.get(category,""String_Node_Str"",false).getBoolean();
  enableChameleon=config.get(category,""String_Node_Str"",true).getBoolean();
  enableTreasureSlime=config.get(category,""String_Node_Str"",true).getBoolean();
  enableHauntedTool=config.get(category,""String_Node_Str"",true).getBoolean();
  enableGroveSprite=config.get(category,""String_Node_Str"",true).getBoolean();
  enableEnchantedBook=config.get(category,""String_Node_Str"",true).getBoolean();
  enableFilchLizard=config.get(category,""String_Node_Str"",true).getBoolean();
  enableBrainSlime=config.get(category,""String_Node_Str"",true).getBoolean();
  enableRocketCreeper=config.get(category,""String_Node_Str"",true).getBoolean();
  enableFestiveCreeper=config.get(category,""String_Node_Str"",true).getBoolean();
  enableSupportCreeper=config.get(category,""String_Node_Str"",true).getBoolean();
  enableSkeletonWarrior=config.get(category,""String_Node_Str"",true).getBoolean();
  enableBlazingJuggernaut=config.get(category,""String_Node_Str"",true).getBoolean();
  enableLilyLurker=config.get(category,""String_Node_Str"",true).getBoolean();
}","public static void load(Configuration config){
  String category=""String_Node_Str"";
  config.addCustomCategoryComment(category,""String_Node_Str"");
  treasureSlimeLoot=config.get(category,""String_Node_Str"",TreasureSlimeLoot.getDefaultValues()).getStringList();
  hauntedToolLoot=config.get(category,""String_Node_Str"",HauntedToolLoot.getDefaultValues()).getStringList();
  filchStealLoot=config.get(category,""String_Node_Str"",FilchLizardLoot.getDefaultValues()).getStringList();
  enableChameleon=config.get(category,""String_Node_Str"",true).getBoolean();
  enableTreasureSlime=config.get(category,""String_Node_Str"",true).getBoolean();
  enableHauntedTool=config.get(category,""String_Node_Str"",true).getBoolean();
  enableGroveSprite=config.get(category,""String_Node_Str"",true).getBoolean();
  enableEnchantedBook=config.get(category,""String_Node_Str"",true).getBoolean();
  enableFilchLizard=config.get(category,""String_Node_Str"",true).getBoolean();
  enableBrainSlime=config.get(category,""String_Node_Str"",true).getBoolean();
  enableRocketCreeper=config.get(category,""String_Node_Str"",true).getBoolean();
  enableFestiveCreeper=config.get(category,""String_Node_Str"",true).getBoolean();
  enableSupportCreeper=config.get(category,""String_Node_Str"",true).getBoolean();
  enableSkeletonWarrior=config.get(category,""String_Node_Str"",true).getBoolean();
  enableBlazingJuggernaut=config.get(category,""String_Node_Str"",true).getBoolean();
  enableLilyLurker=config.get(category,""String_Node_Str"",true).getBoolean();
  enableSpiderFamily=config.get(category,""String_Node_Str"",true).getBoolean();
}"
39444,"public static void load(Configuration config){
  config.addCustomCategoryComment(""String_Node_Str"",""String_Node_Str"");
  treasureSlimeSpawn=config.get(""String_Node_Str"",""String_Node_Str"",0.25).getDouble();
}","public static void load(Configuration config){
  String category=""String_Node_Str"";
  config.addCustomCategoryComment(category,""String_Node_Str"");
  chameleonSpawnRate=config.get(category,""String_Node_Str"",25).getInt() / 100f;
  treasureslimeSpawnRate=config.get(category,""String_Node_Str"",20).getInt() / 100f;
  hauntedToolSpawnRate=config.get(category,""String_Node_Str"",15).getInt() / 100f;
  groveSpriteSpawnRate=config.get(category,""String_Node_Str"",25).getInt() / 100f;
  bewitchedTomeSpawnRate=config.get(category,""String_Node_Str"",30).getInt() / 100f;
  filchLizardSpawnRate=config.get(category,""String_Node_Str"",25).getInt() / 100f;
  brainSlimeSpawnRate=config.get(category,""String_Node_Str"",50).getInt() / 100f;
  rocketCreeperSpawnRate=config.get(category,""String_Node_Str"",25).getInt() / 100f;
  festiveCreeperSpawnRate=config.get(category,""String_Node_Str"",15).getInt() / 100f;
  supportCreeperSpawnRate=config.get(category,""String_Node_Str"",15).getInt() / 100f;
  skeletonWarriorSpawnRate=config.get(category,""String_Node_Str"",25).getInt() / 100f;
  blazingJuggernautSpawnRate=config.get(category,""String_Node_Str"",25).getInt() / 100f;
  lilyLurkerSpawnRate=config.get(category,""String_Node_Str"",30).getInt() / 100f;
  spiderFamilySpawnRate=config.get(category,""String_Node_Str"",25).getInt() / 100f;
}"
39445,"public static void preInit(){
  id=0;
  addEntities(EntityChameleon.class,""String_Node_Str"",++id,0x048C00,0x025600,PrimitiveMobsConfigMobs.enableChameleon);
  addEntities(EntityTreasureSlime.class,""String_Node_Str"",++id,0xFFF399,0xFFE332,PrimitiveMobsConfigMobs.enableTreasureSlime);
  addEntities(EntityHauntedTool.class,""String_Node_Str"",++id,0x493615,0x684E1E,PrimitiveMobsConfigMobs.enableHauntedTool);
  addEntities(EntityGroveSprite.class,""String_Node_Str"",++id,0x5B4E3D,0x62A72F,PrimitiveMobsConfigMobs.enableGroveSprite);
  addEntities(EntityEnchantedBook.class,""String_Node_Str"",++id,0xB77A35,0xD0D0D0,PrimitiveMobsConfigMobs.enableEnchantedBook);
  addEntities(EntityFilchLizard.class,""String_Node_Str"",++id,0xC2B694,0xD1CDC0,PrimitiveMobsConfigMobs.enableFilchLizard);
  addEntities(EntityBrainSlime.class,""String_Node_Str"",++id,0xC696B0,0xD1A5BD,PrimitiveMobsConfigMobs.enableBrainSlime);
  addEntities(EntityRocketCreeper.class,""String_Node_Str"",++id,0x4CA9D0,0x000000,PrimitiveMobsConfigMobs.enableRocketCreeper);
  addEntities(EntityFestiveCreeper.class,""String_Node_Str"",++id,0xBC3608,0x000000,PrimitiveMobsConfigMobs.enableFestiveCreeper);
  addEntities(EntitySupportCreeper.class,""String_Node_Str"",++id,0xDBBD2F,0x000000,PrimitiveMobsConfigMobs.enableSupportCreeper);
  addEntities(EntitySkeletonWarrior.class,""String_Node_Str"",++id,0xABA188,0x6C5239,PrimitiveMobsConfigMobs.enableSkeletonWarrior);
  addEntities(EntityBlazingJuggernaut.class,""String_Node_Str"",++id,0x30181C,0xB0A938,PrimitiveMobsConfigMobs.enableBlazingJuggernaut);
  addEntities(EntityLilyLurker.class,""String_Node_Str"",++id,0x593D29,0x3D3C1C,PrimitiveMobsConfigMobs.enableLilyLurker);
  addCustomEntities(EntityPrimitiveTNTPrimed.class,""String_Node_Str"",++id,64,20,true);
  PrimitiveMobsSpawnList.preInit();
}","public static void preInit(){
  id=0;
  addEntities(EntityChameleon.class,""String_Node_Str"",++id,0x048C00,0x025600,PrimitiveMobsConfigMobs.enableChameleon);
  addEntities(EntityTreasureSlime.class,""String_Node_Str"",++id,0xFFF399,0xFFE332,PrimitiveMobsConfigMobs.enableTreasureSlime);
  addEntities(EntityHauntedTool.class,""String_Node_Str"",++id,0x493615,0x684E1E,PrimitiveMobsConfigMobs.enableHauntedTool);
  addEntities(EntityGroveSprite.class,""String_Node_Str"",++id,0x5B4E3D,0x62A72F,PrimitiveMobsConfigMobs.enableGroveSprite);
  addEntities(EntityEnchantedBook.class,""String_Node_Str"",++id,0xB77A35,0xD0D0D0,PrimitiveMobsConfigMobs.enableEnchantedBook);
  addEntities(EntityFilchLizard.class,""String_Node_Str"",++id,0xC2B694,0xD1CDC0,PrimitiveMobsConfigMobs.enableFilchLizard);
  addEntities(EntityBrainSlime.class,""String_Node_Str"",++id,0xC696B0,0xD1A5BD,PrimitiveMobsConfigMobs.enableBrainSlime);
  addEntities(EntityRocketCreeper.class,""String_Node_Str"",++id,0x4CA9D0,0x000000,PrimitiveMobsConfigMobs.enableRocketCreeper);
  addEntities(EntityFestiveCreeper.class,""String_Node_Str"",++id,0xBC3608,0x000000,PrimitiveMobsConfigMobs.enableFestiveCreeper);
  addEntities(EntitySupportCreeper.class,""String_Node_Str"",++id,0xDBBD2F,0x000000,PrimitiveMobsConfigMobs.enableSupportCreeper);
  addEntities(EntitySkeletonWarrior.class,""String_Node_Str"",++id,0xABA188,0x6C5239,PrimitiveMobsConfigMobs.enableSkeletonWarrior);
  addEntities(EntityBlazingJuggernaut.class,""String_Node_Str"",++id,0x30181C,0xB0A938,PrimitiveMobsConfigMobs.enableBlazingJuggernaut);
  addEntities(EntityLilyLurker.class,""String_Node_Str"",++id,0x593D29,0x3D3C1C,PrimitiveMobsConfigMobs.enableLilyLurker);
  addEntities(EntityMotherSpider.class,""String_Node_Str"",++id,0x250522,11013646,PrimitiveMobsConfigMobs.enableSpiderFamily);
  addEntities(EntityBabySpider.class,""String_Node_Str"",++id,0xB59468,11013646,PrimitiveMobsConfigMobs.enableSpiderFamily);
  addCustomEntities(EntityPrimitiveTNTPrimed.class,""String_Node_Str"",++id,64,20,true);
  PrimitiveMobsSpawnList.preInit();
}"
39446,"public static void registerRenderers(){
  RenderingRegistry.registerEntityRenderingHandler(EntityChameleon.class,RenderChameleon::new);
  RenderingRegistry.registerEntityRenderingHandler(EntityTreasureSlime.class,RenderTreasureSlime::new);
  RenderingRegistry.registerEntityRenderingHandler(EntityHauntedTool.class,RenderHauntedTool::new);
  RenderingRegistry.registerEntityRenderingHandler(EntityGroveSprite.class,RenderGroveSprite::new);
  RenderingRegistry.registerEntityRenderingHandler(EntityEnchantedBook.class,RenderEchantedBook::new);
  RenderingRegistry.registerEntityRenderingHandler(EntityFilchLizard.class,RenderFilchLizard::new);
  RenderingRegistry.registerEntityRenderingHandler(EntityBrainSlime.class,RenderBrainSlime::new);
  RenderingRegistry.registerEntityRenderingHandler(EntityRocketCreeper.class,RenderPrimitiveCreeper::new);
  RenderingRegistry.registerEntityRenderingHandler(EntityFestiveCreeper.class,RenderPrimitiveCreeper::new);
  RenderingRegistry.registerEntityRenderingHandler(EntitySupportCreeper.class,RenderPrimitiveCreeper::new);
  RenderingRegistry.registerEntityRenderingHandler(EntityPrimitiveTNTPrimed.class,RenderPrimitiveTNTPrimed::new);
  RenderingRegistry.registerEntityRenderingHandler(EntitySkeletonWarrior.class,RenderSkeletonWarrior::new);
  RenderingRegistry.registerEntityRenderingHandler(EntityBlazingJuggernaut.class,RenderBlazingJuggernaut::new);
  RenderingRegistry.registerEntityRenderingHandler(EntityLilyLurker.class,RenderLilyLurker::new);
}","public static void registerRenderers(){
  RenderingRegistry.registerEntityRenderingHandler(EntityChameleon.class,RenderChameleon::new);
  RenderingRegistry.registerEntityRenderingHandler(EntityTreasureSlime.class,RenderTreasureSlime::new);
  RenderingRegistry.registerEntityRenderingHandler(EntityHauntedTool.class,RenderHauntedTool::new);
  RenderingRegistry.registerEntityRenderingHandler(EntityGroveSprite.class,RenderGroveSprite::new);
  RenderingRegistry.registerEntityRenderingHandler(EntityEnchantedBook.class,RenderEchantedBook::new);
  RenderingRegistry.registerEntityRenderingHandler(EntityFilchLizard.class,RenderFilchLizard::new);
  RenderingRegistry.registerEntityRenderingHandler(EntityBrainSlime.class,RenderBrainSlime::new);
  RenderingRegistry.registerEntityRenderingHandler(EntityRocketCreeper.class,RenderPrimitiveCreeper::new);
  RenderingRegistry.registerEntityRenderingHandler(EntityFestiveCreeper.class,RenderPrimitiveCreeper::new);
  RenderingRegistry.registerEntityRenderingHandler(EntitySupportCreeper.class,RenderPrimitiveCreeper::new);
  RenderingRegistry.registerEntityRenderingHandler(EntityPrimitiveTNTPrimed.class,RenderPrimitiveTNTPrimed::new);
  RenderingRegistry.registerEntityRenderingHandler(EntitySkeletonWarrior.class,RenderSkeletonWarrior::new);
  RenderingRegistry.registerEntityRenderingHandler(EntityBlazingJuggernaut.class,RenderBlazingJuggernaut::new);
  RenderingRegistry.registerEntityRenderingHandler(EntityLilyLurker.class,RenderLilyLurker::new);
  RenderingRegistry.registerEntityRenderingHandler(EntityMotherSpider.class,RenderMotherSpider::new);
  RenderingRegistry.registerEntityRenderingHandler(EntityBabySpider.class,RenderBabySpider::new);
}"
39447,"private static PrimitiveMobsSpawnEntry registerSpawnWater(PrimitiveMobsSpawnEntry entry){
  if (!PrimitiveMobsEntities.enabledEntities.get(entry.entityClass))   return entry;
  SPAWNS.add(entry);
  EntitySpawnPlacementRegistry.setPlacementType(entry.getEntityClass(),EntityLiving.SpawnPlacementType.IN_WATER);
  return entry;
}","private static PrimitiveMobsSpawnEntry registerSpawnWater(PrimitiveMobsSpawnEntry entry){
  if (PrimitiveMobsEntities.enabledEntities.containsKey(entry.entityClass) && !PrimitiveMobsEntities.enabledEntities.get(entry.entityClass))   return entry;
  SPAWNS.add(entry);
  EntitySpawnPlacementRegistry.setPlacementType(entry.getEntityClass(),EntityLiving.SpawnPlacementType.IN_WATER);
  return entry;
}"
39448,"private static PrimitiveMobsSpawnEntry registerSpawnFlying(PrimitiveMobsSpawnEntry entry){
  if (!PrimitiveMobsEntities.enabledEntities.get(entry.entityClass))   return entry;
  SPAWNS.add(entry);
  EntitySpawnPlacementRegistry.setPlacementType(entry.getEntityClass(),EntityLiving.SpawnPlacementType.IN_AIR);
  return entry;
}","private static PrimitiveMobsSpawnEntry registerSpawnFlying(PrimitiveMobsSpawnEntry entry){
  if (PrimitiveMobsEntities.enabledEntities.containsKey(entry.entityClass) && !PrimitiveMobsEntities.enabledEntities.get(entry.entityClass))   return entry;
  SPAWNS.add(entry);
  EntitySpawnPlacementRegistry.setPlacementType(entry.getEntityClass(),EntityLiving.SpawnPlacementType.IN_AIR);
  return entry;
}"
39449,"public static void preInit(){
  CHAMELEON_SPAWNS=registerSpawnNormal(new PrimitiveMobsSpawnEntry(EntityChameleon.class,0.25F){
    @Override public boolean isBiomeSuitable(    Biome biome){
      return BiomeDictionary.hasType(biome,BiomeDictionary.Type.PLAINS) && super.isBiomeSuitable(biome);
    }
  }
);
  FILCHLIZARD_SPAWNS=registerSpawnNormal(new PrimitiveMobsSpawnEntry(EntityFilchLizard.class,0.25F){
    @Override public boolean isBiomeSuitable(    Biome biome){
      return BiomeDictionary.hasType(biome,BiomeDictionary.Type.SANDY) && super.isBiomeSuitable(biome);
    }
  }
);
  GROVESPRITE_SPAWNS=registerSpawnNormal(new PrimitiveMobsSpawnEntry(EntityGroveSprite.class,0.25F){
    @Override public boolean isBiomeSuitable(    Biome biome){
      return BiomeDictionary.hasType(biome,BiomeDictionary.Type.FOREST) && super.isBiomeSuitable(biome);
    }
  }
);
  BRAINSLIME_SPAWNS=registerSpawnNormal(new PrimitiveMobsSpawnEntry(EntityBrainSlime.class,0.5F){
    @Override public boolean isBiomeSuitable(    Biome biome){
      return (BiomeDictionary.hasType(biome,BiomeDictionary.Type.BEACH) || BiomeDictionary.hasType(biome,BiomeDictionary.Type.RIVER)) && super.isBiomeSuitable(biome);
    }
  }
);
  HAUNTEDTOOL_SPAWNS=registerSpawnNormal(new PrimitiveMobsSpawnEntry(EntityHauntedTool.class,0.15F),new Type[]{Type.BEACH});
  ROCKETCREEPER_SPAWNS=registerSpawnNormal(new PrimitiveMobsSpawnEntry(EntityRocketCreeper.class,0.25F));
  FESTIVECREEPER_SPAWNS=registerSpawnNormal(new PrimitiveMobsSpawnEntry(EntityFestiveCreeper.class,0.15F));
  SUPPORTCREEPER_SPAWNS=registerSpawnNormal(new PrimitiveMobsSpawnEntry(EntitySupportCreeper.class,0.15F));
  TREASURESLIME_SPAWNS=registerSpawnNormal(new PrimitiveMobsSpawnEntry(EntityTreasureSlime.class,0.2F));
  BEWITCHEDTOME_SPAWNS=registerSpawnNormal(new PrimitiveMobsSpawnEntry(EntityEnchantedBook.class,0.3F));
  SKELETONWARRIOR_SPAWNS=registerSpawnNormal(new PrimitiveMobsSpawnEntry(EntitySkeletonWarrior.class,0.25F));
  LILYLURKER_SPAWNS=registerSpawnWater(new PrimitiveMobsSpawnEntry(EntityLilyLurker.class,0.3F){
    @Override public boolean isBiomeSuitable(    Biome biome){
      return (BiomeDictionary.hasType(biome,BiomeDictionary.Type.SWAMP)) && super.isBiomeSuitable(biome);
    }
  }
);
  BLAZINGJUGGERNAUT_SPAWNS=registerSpawnNormal(new PrimitiveMobsSpawnEntry(EntityBlazingJuggernaut.class,0.25F){
    @Override public boolean isBiomeSuitable(    Biome biome){
      return (BiomeDictionary.hasType(biome,BiomeDictionary.Type.NETHER)) && !BiomeDictionary.hasType(biome,BiomeDictionary.Type.END);
    }
  }
);
}","public static void preInit(){
  CHAMELEON_SPAWNS=registerSpawnNormal(new PrimitiveMobsSpawnEntry(EntityChameleon.class,PrimitiveMobsConfigSpawns.chameleonSpawnRate){
    @Override public boolean isBiomeSuitable(    Biome biome){
      return BiomeDictionary.hasType(biome,BiomeDictionary.Type.PLAINS) && super.isBiomeSuitable(biome);
    }
  }
);
  FILCHLIZARD_SPAWNS=registerSpawnNormal(new PrimitiveMobsSpawnEntry(EntityFilchLizard.class,PrimitiveMobsConfigSpawns.filchLizardSpawnRate){
    @Override public boolean isBiomeSuitable(    Biome biome){
      return BiomeDictionary.hasType(biome,BiomeDictionary.Type.SANDY) && super.isBiomeSuitable(biome);
    }
  }
);
  GROVESPRITE_SPAWNS=registerSpawnNormal(new PrimitiveMobsSpawnEntry(EntityGroveSprite.class,PrimitiveMobsConfigSpawns.groveSpriteSpawnRate){
    @Override public boolean isBiomeSuitable(    Biome biome){
      return BiomeDictionary.hasType(biome,BiomeDictionary.Type.FOREST) && super.isBiomeSuitable(biome);
    }
  }
);
  BRAINSLIME_SPAWNS=registerSpawnNormal(new PrimitiveMobsSpawnEntry(EntityBrainSlime.class,PrimitiveMobsConfigSpawns.brainSlimeSpawnRate){
    @Override public boolean isBiomeSuitable(    Biome biome){
      return (BiomeDictionary.hasType(biome,BiomeDictionary.Type.BEACH) || BiomeDictionary.hasType(biome,BiomeDictionary.Type.RIVER)) && super.isBiomeSuitable(biome);
    }
  }
);
  HAUNTEDTOOL_SPAWNS=registerSpawnNormal(new PrimitiveMobsSpawnEntry(EntityHauntedTool.class,PrimitiveMobsConfigSpawns.hauntedToolSpawnRate),new Type[]{Type.BEACH});
  ROCKETCREEPER_SPAWNS=registerSpawnNormal(new PrimitiveMobsSpawnEntry(EntityRocketCreeper.class,PrimitiveMobsConfigSpawns.rocketCreeperSpawnRate));
  FESTIVECREEPER_SPAWNS=registerSpawnNormal(new PrimitiveMobsSpawnEntry(EntityFestiveCreeper.class,PrimitiveMobsConfigSpawns.festiveCreeperSpawnRate));
  SUPPORTCREEPER_SPAWNS=registerSpawnNormal(new PrimitiveMobsSpawnEntry(EntitySupportCreeper.class,PrimitiveMobsConfigSpawns.supportCreeperSpawnRate));
  TREASURESLIME_SPAWNS=registerSpawnNormal(new PrimitiveMobsSpawnEntry(EntityTreasureSlime.class,PrimitiveMobsConfigSpawns.treasureslimeSpawnRate));
  BEWITCHEDTOME_SPAWNS=registerSpawnNormal(new PrimitiveMobsSpawnEntry(EntityEnchantedBook.class,PrimitiveMobsConfigSpawns.bewitchedTomeSpawnRate));
  SKELETONWARRIOR_SPAWNS=registerSpawnNormal(new PrimitiveMobsSpawnEntry(EntitySkeletonWarrior.class,PrimitiveMobsConfigSpawns.skeletonWarriorSpawnRate));
  LILYLURKER_SPAWNS=registerSpawnWater(new PrimitiveMobsSpawnEntry(EntityLilyLurker.class,PrimitiveMobsConfigSpawns.lilyLurkerSpawnRate){
    @Override public boolean isBiomeSuitable(    Biome biome){
      return (BiomeDictionary.hasType(biome,BiomeDictionary.Type.SWAMP)) && super.isBiomeSuitable(biome);
    }
  }
);
  BLAZINGJUGGERNAUT_SPAWNS=registerSpawnNormal(new PrimitiveMobsSpawnEntry(EntityBlazingJuggernaut.class,PrimitiveMobsConfigSpawns.blazingJuggernautSpawnRate){
    @Override public boolean isBiomeSuitable(    Biome biome){
      return (BiomeDictionary.hasType(biome,BiomeDictionary.Type.NETHER)) && !BiomeDictionary.hasType(biome,BiomeDictionary.Type.END);
    }
  }
);
  SPIDERFAMILY_SPAWNS=registerSpawnNormal(new PrimitiveMobsSpawnEntry(EntityMotherSpider.class,PrimitiveMobsConfigSpawns.spiderFamilySpawnRate));
}"
39450,"private static PrimitiveMobsSpawnEntry registerSpawnNormal(PrimitiveMobsSpawnEntry entry,BiomeDictionary.Type[]... array){
  if (!PrimitiveMobsEntities.enabledEntities.get(entry.entityClass))   return entry;
  SPAWNS.add(entry);
  EntitySpawnPlacementRegistry.setPlacementType(entry.getEntityClass(),EntityLiving.SpawnPlacementType.ON_GROUND);
  return entry;
}","private static PrimitiveMobsSpawnEntry registerSpawnNormal(PrimitiveMobsSpawnEntry entry,BiomeDictionary.Type[]... array){
  if (PrimitiveMobsEntities.enabledEntities.containsKey(entry.entityClass) && !PrimitiveMobsEntities.enabledEntities.get(entry.entityClass))   return entry;
  SPAWNS.add(entry);
  EntitySpawnPlacementRegistry.setPlacementType(entry.getEntityClass(),EntityLiving.SpawnPlacementType.ON_GROUND);
  return entry;
}"
39451,"public boolean processInteract(EntityPlayer player,EnumHand hand,ItemStack stack){
  if (this.isTamed()) {
    if (!stack.isEmpty()) {
      if (this.isHealingItem(stack)) {
        if (!player.capabilities.isCreativeMode) {
          stack.shrink(1);
        }
        this.playHealEffect();
        this.heal(20f);
        return true;
      }
      if (this.isOwner(player)) {
        if (!player.capabilities.isCreativeMode) {
          stack.shrink(1);
        }
        if (!this.getHeldItemMainhand().isEmpty() && !getEntityWorld().isRemote) {
          this.dropItemStack(this.getHeldItemMainhand(),0.0f);
        }
        ItemStack newStack=new ItemStack(stack.getItem(),1,stack.getMetadata());
        if (getEntityWorld().isRemote && PrimitiveMobsConfigMobs.getDebug()) {
          String[] divided=stack.getItem().getRegistryName().toString().split(""String_Node_Str"");
          Minecraft.getMinecraft().player.sendChatMessage(""String_Node_Str"" + divided[0] + ""String_Node_Str""+ divided[1]+ ""String_Node_Str""+ stack.getMetadata());
        }
        this.setItemStackToSlot(EntityEquipmentSlot.MAINHAND,newStack);
      }
    }
 else     if (stack.isEmpty() && this.isOwner(player)) {
      if (!getEntityWorld().isRemote) {
        this.aiSit.setSitting(!this.isSitting());
        this.isJumping=false;
        this.navigator.clearPathEntity();
      }
 else {
        this.playSitEffect();
      }
    }
  }
 else   if (!stack.isEmpty() && this.isTamingItem(stack) && this.getHeldItemMainhand().isEmpty()) {
    if (!player.capabilities.isCreativeMode) {
      stack.shrink(1);
    }
    if (!this.getEntityWorld().isRemote) {
      this.setTamed(true);
      this.navigator.clearPathEntity();
      this.setHealth(20.0F);
      this.setOwnerId(player.getUniqueID());
      this.playTameEffect(true);
      this.getEntityWorld().setEntityState(this,(byte)7);
    }
    return true;
  }
  return super.processInteract(player,hand);
}","public boolean processInteract(EntityPlayer player,EnumHand hand,ItemStack stack){
  if (this.isTamed()) {
    if (!stack.isEmpty()) {
      if (this.isHealingItem(stack)) {
        if (!player.capabilities.isCreativeMode) {
          stack.shrink(1);
        }
        this.playHealEffect();
        this.heal(20f);
        return true;
      }
      if (this.isOwner(player)) {
        if (!player.capabilities.isCreativeMode) {
          stack.shrink(1);
        }
        if (!this.getHeldItemMainhand().isEmpty() && !getEntityWorld().isRemote) {
          this.dropItemStack(this.getHeldItemMainhand(),0.0f);
        }
        ItemStack newStack=new ItemStack(stack.getItem(),1,stack.getMetadata());
        this.setItemStackToSlot(EntityEquipmentSlot.MAINHAND,newStack);
      }
    }
 else     if (stack.isEmpty() && this.isOwner(player)) {
      if (!getEntityWorld().isRemote) {
        this.aiSit.setSitting(!this.isSitting());
        this.isJumping=false;
        this.navigator.clearPathEntity();
      }
 else {
        this.playSitEffect();
      }
    }
  }
 else   if (!stack.isEmpty() && this.isTamingItem(stack) && this.getHeldItemMainhand().isEmpty()) {
    if (!player.capabilities.isCreativeMode) {
      stack.shrink(1);
    }
    if (!this.getEntityWorld().isRemote) {
      this.setTamed(true);
      this.navigator.clearPathEntity();
      this.setHealth(20.0F);
      this.setOwnerId(player.getUniqueID());
      this.playTameEffect(true);
      this.getEntityWorld().setEntityState(this,(byte)7);
    }
    return true;
  }
  return super.processInteract(player,hand);
}"
39452,"public int doCustomSpawning(WorldServer worldServerIn){
  this.chunksForSpawning.clear();
  int chunkCount=0;
  int successCount=0;
  for (  EntityPlayer entityplayer : worldServerIn.playerEntities) {
    if (!entityplayer.isSpectator()) {
      int playerX=MathHelper.floor(entityplayer.posX / 16.0D);
      int playerY=MathHelper.floor(entityplayer.posZ / 16.0D);
      final int center=8;
      for (int x=-center; x <= center; ++x) {
        for (int z=-center; z <= center; ++z) {
          boolean border=x == -center || x == center || z == -center || z == center;
          ChunkPos chunkpos=new ChunkPos(x + playerX,z + playerY);
          if (!this.chunksForSpawning.contains(chunkpos)) {
            ++chunkCount;
            if (!border && worldServerIn.getWorldBorder().contains(chunkpos)) {
              PlayerChunkMapEntry entry=worldServerIn.getPlayerChunkMap().getEntry(chunkpos.x,chunkpos.z);
              if (entry != null && entry.isSentToPlayers()) {
                this.chunksForSpawning.add(chunkpos);
              }
            }
          }
        }
      }
    }
  }
  for (  PrimitiveMobsSpawnEntry entry : PrimitiveMobsSpawnList.getSpawnEntries()) {
    int entityCount=worldServerIn.countEntities(entry.entityClass);
    int max=Math.round((float)chunkCount * entry.rarity * 0.1F);
    if (entityCount <= max) {
      List<ChunkPos> shuffled=Lists.newArrayList(this.chunksForSpawning);
      Collections.shuffle(shuffled);
      for (      ChunkPos chunk : shuffled) {
        BlockPos pos=getRandomChunkPosition(worldServerIn,chunk.x,chunk.z);
        int x=pos.getX();
        int y=pos.getY();
        int z=pos.getZ();
        IBlockState state=worldServerIn.getBlockState(pos);
        float x1=(float)x + 0.5F;
        float z1=(float)z + 0.5F;
        if (!state.isNormalCube() && !worldServerIn.isAnyPlayerWithinRangeAt((double)x1,(double)y,(double)z1,24.0D)) {
          Biome biome=worldServerIn.getBiome(pos);
          if (!entry.isBiomeSuitable(biome)) {
            continue;
          }
          if (WorldEntitySpawner.canCreatureTypeSpawnAtLocation(EntitySpawnPlacementRegistry.getPlacementForEntity(entry.entityClass),worldServerIn,pos)) {
            EntityLiving entity;
            try {
              entity=(EntityLiving)entry.entityClass.getConstructor(new Class[]{World.class}).newInstance(new Object[]{worldServerIn});
            }
 catch (            Exception exception) {
              exception.printStackTrace();
              return successCount;
            }
            entity.setLocationAndAngles((double)x1,(double)y,(double)z1,worldServerIn.rand.nextFloat() * 360.0F,0.0F);
            Event.Result canSpawn=ForgeEventFactory.canEntitySpawn(entity,worldServerIn,x1,(float)y,z1);
            if (canSpawn == Event.Result.ALLOW || (canSpawn == Event.Result.DEFAULT && (entity.getCanSpawnHere() && entity.isNotColliding()))) {
              if (!ForgeEventFactory.doSpecialSpawn(entity,worldServerIn,x1,(float)y,z1)) {
                entity.onInitialSpawn(worldServerIn.getDifficultyForLocation(new BlockPos(entity)),null);
              }
              if (entity.isNotColliding()) {
                ++successCount;
                worldServerIn.spawnEntity(entity);
              }
 else {
                entity.setDead();
              }
            }
          }
        }
      }
    }
  }
  return successCount;
}","public int doCustomSpawning(WorldServer worldServerIn){
  this.chunksForSpawning.clear();
  int chunkCount=0;
  int successCount=0;
  for (  EntityPlayer entityplayer : worldServerIn.playerEntities) {
    if (!entityplayer.isSpectator()) {
      int playerX=MathHelper.floor(entityplayer.posX / 16.0D);
      int playerY=MathHelper.floor(entityplayer.posZ / 16.0D);
      final int center=8;
      for (int x=-center; x <= center; ++x) {
        for (int z=-center; z <= center; ++z) {
          boolean border=x == -center || x == center || z == -center || z == center;
          ChunkPos chunkpos=new ChunkPos(x + playerX,z + playerY);
          if (!this.chunksForSpawning.contains(chunkpos)) {
            ++chunkCount;
            if (!border && worldServerIn.getWorldBorder().contains(chunkpos)) {
              PlayerChunkMapEntry entry=worldServerIn.getPlayerChunkMap().getEntry(chunkpos.x,chunkpos.z);
              if (entry != null && entry.isSentToPlayers()) {
                this.chunksForSpawning.add(chunkpos);
              }
            }
          }
        }
      }
    }
  }
  for (  PrimitiveMobsSpawnEntry entry : PrimitiveMobsSpawnList.getSpawnEntries()) {
    int entityCount=worldServerIn.countEntities(entry.entityClass);
    int max=Math.round((float)chunkCount * entry.rarity * 0.1F);
    if (entityCount <= max) {
      List<ChunkPos> shuffled=Lists.newArrayList(this.chunksForSpawning);
      Collections.shuffle(shuffled);
      for (      ChunkPos chunk : shuffled) {
        BlockPos pos=getRandomChunkPosition(worldServerIn,chunk.x,chunk.z);
        int x=pos.getX();
        int y=pos.getY();
        int z=pos.getZ();
        IBlockState state=worldServerIn.getBlockState(pos);
        float x1=(float)x + 0.5F;
        float z1=(float)z + 0.5F;
        if (!state.isNormalCube() && !worldServerIn.isAnyPlayerWithinRangeAt((double)x1,(double)y,(double)z1,24.0D)) {
          Biome biome=worldServerIn.getBiome(pos);
          if (!entry.isBiomeSuitable(biome)) {
            continue;
          }
          if (WorldEntitySpawner.canCreatureTypeSpawnAtLocation(EntitySpawnPlacementRegistry.getPlacementForEntity(entry.entityClass),worldServerIn,pos)) {
            EntityLiving entity;
            try {
              entity=(EntityLiving)entry.entityClass.getConstructor(new Class[]{World.class}).newInstance(new Object[]{worldServerIn});
            }
 catch (            Exception exception) {
              exception.printStackTrace();
              return successCount;
            }
            entity.setLocationAndAngles((double)x1,(double)y,(double)z1,worldServerIn.rand.nextFloat() * 360.0F,0.0F);
            Event.Result canSpawn=ForgeEventFactory.canEntitySpawn(entity,worldServerIn,x1,(float)y,z1);
            if (canSpawn == Event.Result.ALLOW || (canSpawn == Event.Result.DEFAULT && (entity.getCanSpawnHere() && entity.isNotColliding()))) {
              if (!ForgeEventFactory.doSpecialSpawn(entity,worldServerIn,x1,(float)y,z1)) {
                entity.onInitialSpawn(worldServerIn.getDifficultyForLocation(new BlockPos(entity)),null);
              }
              if (entity.isNotColliding()) {
                ++successCount;
                worldServerIn.spawnEntity(entity);
              }
 else {
                if (entity instanceof EntityMotherSpider) {
                  PrimitiveMobsLogger.PMlogger.info(""String_Node_Str"" + ""String_Node_Str"" + entity.posX + ""String_Node_Str""+ entity.posY+ ""String_Node_Str""+ entity.posZ);
                }
                entity.setDead();
              }
            }
          }
        }
      }
    }
  }
  return successCount;
}"
39453,"private HttpClientMockBuilder newRule(String method,String urlText){
  UrlParser urlParser=new UrlParser();
  Rule r=new Rule();
  r.addCondition(new HttpMethodCondition(method));
  List<Condition> urlConditions=urlParser.parse(host + urlText);
  r.addConditions(urlConditions);
  return new HttpClientMockBuilder(r);
}","private HttpClientMockBuilder newRule(String method,String urlText){
  UrlParser urlParser=new UrlParser();
  Rule r=new Rule();
  r.addCondition(new HttpMethodCondition(method));
  List<Condition> urlConditions=urlParser.parse(host + urlText);
  r.addConditions(urlConditions);
  rules.add(r);
  return new HttpClientMockBuilder(r);
}"
39454,"/** 
 * Creates a new   {@link AbstractSelectFieldRenderer} instance.
 * @param modelElement the model element
 */
public AbstractSelectFieldRenderer(AbstractSelectField modelElement){
  super(modelElement);
  addChild(createFlatRenderer());
}","/** 
 * Creates a new   {@link AbstractSelectFieldRenderer} instance.
 * @param modelElement the model element
 */
public AbstractSelectFieldRenderer(AbstractSelectField modelElement){
  super(modelElement);
  addChild(createFlatRenderer());
  setProperty(Property.SPLIT_CHARACTERS,new NoSplitCharacters());
}"
39455,"private IRenderer createFlatRenderer(boolean addAllOptionsToChildren){
  AbstractSelectField selectField=(AbstractSelectField)modelElement;
  List<IBlockElement> options=selectField.getOptions();
  Div pseudoContainer=new Div();
  for (  IBlockElement option : options) {
    pseudoContainer.add(option);
  }
  List<Paragraph> allOptions;
  IRenderer pseudoRendererSubTree=pseudoContainer.createRendererSubTree();
  if (addAllOptionsToChildren) {
    allOptions=getAllOptionsFlatElements(pseudoRendererSubTree);
  }
 else {
    allOptions=getSingleSelectedOptionFlatRenderer(pseudoRendererSubTree);
  }
  if (allOptions.isEmpty()) {
    allOptions.add(createComboBoxOptionFlatElement());
  }
  pseudoContainer.getChildren().clear();
  for (  Paragraph option : allOptions) {
    pseudoContainer.add(option);
  }
  IRenderer rendererSubTree=pseudoContainer.createRendererSubTree();
  replaceParagraphRenderers(rendererSubTree);
  return rendererSubTree;
}","private IRenderer createFlatRenderer(boolean addAllOptionsToChildren){
  AbstractSelectField selectField=(AbstractSelectField)modelElement;
  List<IBlockElement> options=selectField.getOptions();
  Div pseudoContainer=new Div();
  for (  IBlockElement option : options) {
    pseudoContainer.add(option);
  }
  List<Paragraph> allOptions;
  IRenderer pseudoRendererSubTree=pseudoContainer.createRendererSubTree();
  if (addAllOptionsToChildren) {
    allOptions=getAllOptionsFlatElements(pseudoRendererSubTree);
  }
 else {
    allOptions=getSingleSelectedOptionFlatRenderer(pseudoRendererSubTree);
  }
  if (allOptions.isEmpty()) {
    allOptions.add(createComboBoxOptionFlatElement());
  }
  pseudoContainer.getChildren().clear();
  for (  Paragraph option : allOptions) {
    pseudoContainer.add(option);
  }
  IRenderer rendererSubTree=pseudoContainer.createRendererSubTree();
  return rendererSubTree;
}"
39456,"@Override protected IRenderer createFlatRenderer(){
  AbstractSelectField selectField=(AbstractSelectField)modelElement;
  List<IBlockElement> options=selectField.getOptions();
  Div optionsContainer=new Div();
  for (  IBlockElement option : options) {
    optionsContainer.add(option);
  }
  IRenderer rendererSubTree;
  if (optionsContainer.getChildren().isEmpty()) {
    Paragraph pStub=new Paragraph(""String_Node_Str"").setMargin(0);
    pStub.setProperty(Property.OVERFLOW_X,OverflowPropertyValue.VISIBLE);
    pStub.setProperty(Property.OVERFLOW_Y,OverflowPropertyValue.VISIBLE);
    pStub.setProperty(Html2PdfProperty.FORM_FIELD_SELECTED,false);
    optionsContainer.add(pStub);
    rendererSubTree=optionsContainer.createRendererSubTree();
  }
 else {
    rendererSubTree=optionsContainer.createRendererSubTree();
    replaceParagraphRenderers(rendererSubTree);
    List<IRenderer> selectedOptions=getSelectedOptions(rendererSubTree);
    for (    IRenderer selectedOption : selectedOptions) {
      applySelectedStyle(selectedOption);
    }
  }
  return rendererSubTree;
}","@Override protected IRenderer createFlatRenderer(){
  AbstractSelectField selectField=(AbstractSelectField)modelElement;
  List<IBlockElement> options=selectField.getOptions();
  Div optionsContainer=new Div();
  for (  IBlockElement option : options) {
    optionsContainer.add(option);
  }
  IRenderer rendererSubTree;
  if (optionsContainer.getChildren().isEmpty()) {
    Paragraph pStub=new Paragraph(""String_Node_Str"").setMargin(0);
    pStub.setProperty(Property.OVERFLOW_X,OverflowPropertyValue.VISIBLE);
    pStub.setProperty(Property.OVERFLOW_Y,OverflowPropertyValue.VISIBLE);
    pStub.setProperty(Html2PdfProperty.FORM_FIELD_SELECTED,false);
    optionsContainer.add(pStub);
    rendererSubTree=optionsContainer.createRendererSubTree();
  }
 else {
    rendererSubTree=optionsContainer.createRendererSubTree();
    List<IRenderer> selectedOptions=getSelectedOptions(rendererSubTree);
    for (    IRenderer selectedOption : selectedOptions) {
      applySelectedStyle(selectedOption);
    }
  }
  return rendererSubTree;
}"
39457,"@Test public void selectMinMaxWidthCalculationTest01() throws IOException, InterruptedException {
  runTest(""String_Node_Str"");
}","@Test @LogMessages(messages=@LogMessage(messageTemplate=LogMessageConstant.TABLE_WIDTH_IS_MORE_THAN_EXPECTED_DUE_TO_MIN_WIDTH)) public void selectMinMaxWidthCalculationTest01() throws IOException, InterruptedException {
  runTest(""String_Node_Str"");
}"
39458,"@Test public void selectWidthTest04() throws IOException, InterruptedException {
  runTest(""String_Node_Str"");
}","@Test @LogMessages(messages=@LogMessage(messageTemplate=LogMessageConstant.INLINE_BLOCK_ELEMENT_WILL_BE_CLIPPED,count=1)) public void selectWidthTest04() throws IOException, InterruptedException {
  runTest(""String_Node_Str"");
}"
39459,"@Test public void selectBasicTest10() throws IOException, InterruptedException {
  runTest(""String_Node_Str"");
}","@Test @LogMessages(messages=@LogMessage(messageTemplate=LogMessageConstant.INLINE_BLOCK_ELEMENT_WILL_BE_CLIPPED,count=1)) public void selectBasicTest10() throws IOException, InterruptedException {
  runTest(""String_Node_Str"");
}"
39460,"static Document parseByteData(ByteBuffer byteData,String charsetName,String baseUri,Parser parser){
  String docData;
  Document doc=null;
  charsetName=detectCharsetFromBom(byteData,charsetName);
  if (charsetName == null) {
    docData=Charset.forName(defaultCharset).decode(byteData).toString();
    doc=parser.parseInput(docData,baseUri);
    Element meta=doc.select(""String_Node_Str"").first();
    String foundCharset=null;
    if (meta != null) {
      if (meta.hasAttr(""String_Node_Str"")) {
        foundCharset=getCharsetFromContentType(meta.attr(""String_Node_Str""));
      }
      if (foundCharset == null && meta.hasAttr(""String_Node_Str"")) {
        foundCharset=meta.attr(""String_Node_Str"");
      }
    }
    if (foundCharset == null && doc.childNode(0) instanceof XmlDeclaration) {
      XmlDeclaration prolog=(XmlDeclaration)doc.childNode(0);
      if (prolog.name().equals(""String_Node_Str"")) {
        foundCharset=prolog.attr(""String_Node_Str"");
      }
    }
    foundCharset=validateCharset(foundCharset);
    if (foundCharset != null && !foundCharset.equals(defaultCharset)) {
      foundCharset=foundCharset.trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
      charsetName=foundCharset;
      byteData.rewind();
      docData=Charset.forName(foundCharset).decode(byteData).toString();
      doc=null;
    }
  }
 else {
    Validate.notEmpty(charsetName,""String_Node_Str"");
    docData=Charset.forName(charsetName).decode(byteData).toString();
  }
  if (doc == null) {
    doc=parser.parseInput(docData,baseUri);
    doc.outputSettings().charset(charsetName);
  }
  return doc;
}","static Document parseByteData(ByteBuffer byteData,String charsetName,String baseUri,Parser parser){
  String docData;
  Document doc=null;
  charsetName=detectCharsetFromBom(byteData,charsetName);
  if (charsetName == null) {
    docData=Charset.forName(defaultCharset).decode(byteData).toString();
    doc=parser.parseInput(docData,baseUri);
    Element meta=doc.select(""String_Node_Str"").first();
    String foundCharset=null;
    if (meta != null) {
      if (meta.hasAttr(""String_Node_Str"")) {
        foundCharset=getCharsetFromContentType(meta.attr(""String_Node_Str""));
      }
      if (foundCharset == null && meta.hasAttr(""String_Node_Str"")) {
        foundCharset=meta.attr(""String_Node_Str"");
      }
    }
    if (foundCharset == null && doc.childNode(0) instanceof XmlDeclaration) {
      XmlDeclaration prolog=(XmlDeclaration)doc.childNode(0);
      if (prolog.name().equals(""String_Node_Str"")) {
        foundCharset=prolog.attr(""String_Node_Str"");
      }
    }
    foundCharset=validateCharset(foundCharset);
    if (foundCharset != null && !foundCharset.equals(defaultCharset)) {
      foundCharset=foundCharset.trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
      charsetName=foundCharset;
      ((Buffer)byteData).rewind();
      docData=Charset.forName(foundCharset).decode(byteData).toString();
      doc=null;
    }
  }
 else {
    Validate.notEmpty(charsetName,""String_Node_Str"");
    docData=Charset.forName(charsetName).decode(byteData).toString();
  }
  if (doc == null) {
    doc=parser.parseInput(docData,baseUri);
    doc.outputSettings().charset(charsetName);
  }
  return doc;
}"
39461,"private static String detectCharsetFromBom(ByteBuffer byteData,String charsetName){
  byteData.mark();
  byte[] bom=new byte[4];
  if (byteData.remaining() >= bom.length) {
    byteData.get(bom);
    byteData.rewind();
  }
  if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte)0xFE && bom[3] == (byte)0xFF || bom[0] == (byte)0xFF && bom[1] == (byte)0xFE && bom[2] == 0x00 && bom[3] == 0x00) {
    charsetName=""String_Node_Str"";
  }
 else   if (bom[0] == (byte)0xFE && bom[1] == (byte)0xFF || bom[0] == (byte)0xFF && bom[1] == (byte)0xFE) {
    charsetName=""String_Node_Str"";
  }
 else   if (bom[0] == (byte)0xEF && bom[1] == (byte)0xBB && bom[2] == (byte)0xBF) {
    charsetName=""String_Node_Str"";
    byteData.position(3);
  }
  return charsetName;
}","private static String detectCharsetFromBom(ByteBuffer byteData,String charsetName){
  ((Buffer)byteData).mark();
  byte[] bom=new byte[4];
  if (byteData.remaining() >= bom.length) {
    byteData.get(bom);
    ((Buffer)byteData).rewind();
  }
  if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte)0xFE && bom[3] == (byte)0xFF || bom[0] == (byte)0xFF && bom[1] == (byte)0xFE && bom[2] == 0x00 && bom[3] == 0x00) {
    charsetName=""String_Node_Str"";
  }
 else   if (bom[0] == (byte)0xFE && bom[1] == (byte)0xFF || bom[0] == (byte)0xFF && bom[1] == (byte)0xFE) {
    charsetName=""String_Node_Str"";
  }
 else   if (bom[0] == (byte)0xEF && bom[1] == (byte)0xBB && bom[2] == (byte)0xBF) {
    charsetName=""String_Node_Str"";
    ((Buffer)byteData).position(3);
  }
  return charsetName;
}"
39462,"@Override public Map<String,String> resolveStyles(INode element,CssContext context){
  List<CssDeclaration> nodeCssDeclarations=UserAgentCss.getStyles(element);
  if (element instanceof IElementNode) {
    nodeCssDeclarations.addAll(HtmlStylesToCssConverter.convert((IElementNode)element));
  }
  nodeCssDeclarations.addAll(cssStyleSheet.getCssDeclarations(element,deviceDescription));
  if (element instanceof IElementNode) {
    String styleAttribute=((IElementNode)element).getAttribute(AttributeConstants.STYLE);
    if (styleAttribute != null) {
      nodeCssDeclarations.addAll(CssRuleSetParser.parsePropertyDeclarations(styleAttribute));
    }
  }
  Map<String,String> elementStyles=cssDeclarationsToMap(nodeCssDeclarations);
  String parentFontSizeStr=null;
  if (element.parentNode() instanceof IStylesContainer) {
    IStylesContainer parentNode=(IStylesContainer)element.parentNode();
    Map<String,String> parentStyles=parentNode.getStyles();
    if (parentStyles == null && !(element.parentNode() instanceof IDocumentNode)) {
      Logger logger=LoggerFactory.getLogger(DefaultCssResolver.class);
      logger.error(LogMessageConstant.ERROR_RESOLVING_PARENT_STYLES);
    }
    if (parentStyles != null) {
      for (      Map.Entry<String,String> entry : parentStyles.entrySet()) {
        mergeParentCssDeclaration(elementStyles,entry.getKey(),entry.getValue(),parentStyles.get(CssConstants.FONT_SIZE));
      }
      parentFontSizeStr=parentStyles.get(CssConstants.FONT_SIZE);
    }
  }
  String elementFontSize=elementStyles.get(CssConstants.FONT_SIZE);
  if (CssUtils.isRelativeValue(elementFontSize) || CssConstants.LARGER.equals(elementFontSize) || CssConstants.SMALLER.equals(elementFontSize)) {
    float baseFontSize;
    if (CssUtils.isRemValue(elementFontSize)) {
      baseFontSize=context.getRootFontSize();
    }
 else {
      if (parentFontSizeStr == null) {
        baseFontSize=FontStyleApplierUtil.parseAbsoluteFontSize(CssDefaults.getDefaultValue(CssConstants.FONT_SIZE));
      }
 else {
        baseFontSize=CssUtils.parseAbsoluteLength(parentFontSizeStr);
      }
    }
    float absoluteFontSize=FontStyleApplierUtil.parseRelativeFontSize(elementFontSize,baseFontSize);
    elementStyles.put(CssConstants.FONT_SIZE,DecimalFormatUtil.formatNumber(absoluteFontSize,""String_Node_Str"") + CssConstants.PT);
  }
 else {
    elementStyles.put(CssConstants.FONT_SIZE,Float.toString(FontStyleApplierUtil.parseAbsoluteFontSize(elementFontSize)) + CssConstants.PT);
  }
  if (element instanceof IElementNode && TagConstants.HTML.equals(((IElementNode)element).name())) {
    context.setRootFontSize(elementStyles.get(CssConstants.FONT_SIZE));
  }
  Set<String> keys=new HashSet<>();
  for (  Map.Entry<String,String> entry : elementStyles.entrySet()) {
    if (CssConstants.INITIAL.equals(entry.getValue()) || CssConstants.INHERIT.equals(entry.getValue())) {
      keys.add(entry.getKey());
    }
  }
  for (  String key : keys) {
    elementStyles.put(key,CssDefaults.getDefaultValue(key));
  }
  CounterProcessorUtil.processCounters(elementStyles,context,element);
  resolveContentProperty(elementStyles,element,context);
  return elementStyles;
}","@Override public Map<String,String> resolveStyles(INode element,CssContext context){
  List<CssDeclaration> nodeCssDeclarations=UserAgentCss.getStyles(element);
  if (element instanceof IElementNode) {
    nodeCssDeclarations.addAll(HtmlStylesToCssConverter.convert((IElementNode)element));
  }
  nodeCssDeclarations.addAll(cssStyleSheet.getCssDeclarations(element,deviceDescription));
  if (element instanceof IElementNode) {
    String styleAttribute=((IElementNode)element).getAttribute(AttributeConstants.STYLE);
    if (styleAttribute != null) {
      nodeCssDeclarations.addAll(CssRuleSetParser.parsePropertyDeclarations(styleAttribute));
    }
  }
  Map<String,String> elementStyles=cssDeclarationsToMap(nodeCssDeclarations);
  String parentFontSizeStr=null;
  if (element.parentNode() instanceof IStylesContainer) {
    IStylesContainer parentNode=(IStylesContainer)element.parentNode();
    Map<String,String> parentStyles=parentNode.getStyles();
    if (parentStyles == null && !(element.parentNode() instanceof IDocumentNode)) {
      Logger logger=LoggerFactory.getLogger(DefaultCssResolver.class);
      logger.error(LogMessageConstant.ERROR_RESOLVING_PARENT_STYLES);
    }
    if (parentStyles != null) {
      for (      Map.Entry<String,String> entry : parentStyles.entrySet()) {
        mergeParentCssDeclaration(elementStyles,entry.getKey(),entry.getValue(),parentStyles);
      }
      parentFontSizeStr=parentStyles.get(CssConstants.FONT_SIZE);
    }
  }
  String elementFontSize=elementStyles.get(CssConstants.FONT_SIZE);
  if (CssUtils.isRelativeValue(elementFontSize) || CssConstants.LARGER.equals(elementFontSize) || CssConstants.SMALLER.equals(elementFontSize)) {
    float baseFontSize;
    if (CssUtils.isRemValue(elementFontSize)) {
      baseFontSize=context.getRootFontSize();
    }
 else {
      if (parentFontSizeStr == null) {
        baseFontSize=FontStyleApplierUtil.parseAbsoluteFontSize(CssDefaults.getDefaultValue(CssConstants.FONT_SIZE));
      }
 else {
        baseFontSize=CssUtils.parseAbsoluteLength(parentFontSizeStr);
      }
    }
    float absoluteFontSize=FontStyleApplierUtil.parseRelativeFontSize(elementFontSize,baseFontSize);
    elementStyles.put(CssConstants.FONT_SIZE,DecimalFormatUtil.formatNumber(absoluteFontSize,""String_Node_Str"") + CssConstants.PT);
  }
 else {
    elementStyles.put(CssConstants.FONT_SIZE,Float.toString(FontStyleApplierUtil.parseAbsoluteFontSize(elementFontSize)) + CssConstants.PT);
  }
  if (element instanceof IElementNode && TagConstants.HTML.equals(((IElementNode)element).name())) {
    context.setRootFontSize(elementStyles.get(CssConstants.FONT_SIZE));
  }
  Set<String> keys=new HashSet<>();
  for (  Map.Entry<String,String> entry : elementStyles.entrySet()) {
    if (CssConstants.INITIAL.equals(entry.getValue()) || CssConstants.INHERIT.equals(entry.getValue())) {
      keys.add(entry.getKey());
    }
  }
  for (  String key : keys) {
    elementStyles.put(key,CssDefaults.getDefaultValue(key));
  }
  CounterProcessorUtil.processCounters(elementStyles,context,element);
  resolveContentProperty(elementStyles,element,context);
  return elementStyles;
}"
39463,"/** 
 * Merge parent CSS declarations.
 * @param styles the styles map
 * @param cssProperty the CSS property
 * @param parentPropValue the parent properties value
 */
private void mergeParentCssDeclaration(Map<String,String> styles,String cssProperty,String parentPropValue,String parentFontSize){
  String childPropValue=styles.get(cssProperty);
  if ((childPropValue == null && CssInheritance.isInheritable(cssProperty)) || CssConstants.INHERIT.equals(childPropValue)) {
    if (CssUtils.isRelativeValue(parentPropValue) && !CssUtils.isRemValue(parentPropValue)) {
      int pos=CssUtils.determinePositionBetweenValueAndUnit(parentFontSize);
      float fontSize=Float.parseFloat(parentFontSize.substring(0,pos));
      float resolvedRelativeValue=CssUtils.parseRelativeValue(parentPropValue,fontSize);
      styles.put(cssProperty,String.valueOf(resolvedRelativeValue) + parentFontSize.substring(pos,parentFontSize.length()));
    }
 else     styles.put(cssProperty,parentPropValue);
  }
 else   if (CssConstants.TEXT_DECORATION.equals(cssProperty) && !CssConstants.INLINE_BLOCK.equals(styles.get(CssConstants.DISPLAY))) {
    styles.put(cssProperty,CssPropertyMerger.mergeTextDecoration(childPropValue,parentPropValue));
  }
}","/** 
 * Merge parent CSS declarations.
 * @param styles the styles map
 * @param cssProperty the CSS property
 * @param parentPropValue the parent properties value
 */
private void mergeParentCssDeclaration(Map<String,String> styles,String cssProperty,String parentPropValue,Map<String,String> parentStyles){
  String childPropValue=styles.get(cssProperty);
  if ((childPropValue == null && CssInheritance.isInheritable(cssProperty)) || CssConstants.INHERIT.equals(childPropValue)) {
    if (CssUtils.isRelativeValue(parentPropValue) && !CssUtils.isRemValue(parentPropValue)) {
      if (parentPropValue != null && (!parentPropValue.endsWith(CssConstants.PERCENTAGE) || parentPropValue.endsWith(CssConstants.PERCENTAGE) && (CssConstants.FONT_SIZE.equals(cssProperty) || CssConstants.VERTICAL_ALIGN.equals(cssProperty) || CssConstants.LINE_HEIGHT.equals(cssProperty)))) {
        String parentFontSize=parentStyles.get(CssConstants.FONT_SIZE);
        int pos=CssUtils.determinePositionBetweenValueAndUnit(parentFontSize);
        float fontSize=Float.parseFloat(parentFontSize.substring(0,pos));
        float resolvedRelativeValue=CssUtils.parseRelativeValue(parentPropValue,fontSize);
        styles.put(cssProperty,String.valueOf(resolvedRelativeValue) + parentFontSize.substring(pos,parentFontSize.length()));
      }
 else       styles.put(cssProperty,parentPropValue);
    }
 else     styles.put(cssProperty,parentPropValue);
  }
 else   if (CssConstants.TEXT_DECORATION.equals(cssProperty) && !CssConstants.INLINE_BLOCK.equals(styles.get(CssConstants.DISPLAY))) {
    styles.put(cssProperty,CssPropertyMerger.mergeTextDecoration(childPropValue,parentPropValue));
  }
}"
39464,"@Test @Ignore(""String_Node_Str"") public void fontFaceWoffTest02() throws IOException, InterruptedException {
  runTest(""String_Node_Str"");
}","@Test public void fontFaceWoffTest02() throws IOException, InterruptedException {
  runTest(""String_Node_Str"");
}"
39465,"@Test public void w3cProblemTest04() throws IOException, InterruptedException {
  runTest(""String_Node_Str"");
}","@Test @LogMessages(messages={@LogMessage(messageTemplate=com.itextpdf.io.LogMessageConstant.FONT_SUBSET_ISSUE)}) public void w3cProblemTest04() throws IOException, InterruptedException {
  runTest(""String_Node_Str"");
}"
39466,"@Override public void processEnd(IElementNode element,ProcessorContext context){
  flushInlineElementsToWaitingCell();
  if (null != waitingCell) {
    processCell(waitingCell,true);
  }
}","@Override public void processEnd(IElementNode element,ProcessorContext context){
  flushWaitingCell();
}"
39467,"@Override public void processEnd(IElementNode element,ProcessorContext context){
  if (null != waitingCell) {
    processCell(waitingCell,true);
  }
  table=tableWrapper.toTable(null);
}","@Override public void processEnd(IElementNode element,ProcessorContext context){
  flushWaitingCell();
  table=tableWrapper.toTable(null);
}"
39468,"@Override public void close(){
  if (waitingElement != null) {
    super.addChild(waitingElement);
  }
  super.close();
  if (TRIM_LAST_BLANK_PAGE) {
    PdfDocument pdfDocument=document.getPdfDocument();
    if (pdfDocument.getNumberOfPages() > 1) {
      PdfPage lastPage=pdfDocument.getLastPage();
      if (lastPage.getContentStreamCount() == 1 && lastPage.getContentStream(0).getOutputStream().getCurrentPos() <= 0) {
        pdfDocument.removePage(pdfDocument.getNumberOfPages());
      }
    }
  }
}","@Override public void close(){
  if (waitingElement != null) {
    IRenderer r=this.waitingElement;
    waitingElement=null;
    super.addChild(r);
  }
  super.close();
  if (TRIM_LAST_BLANK_PAGE) {
    PdfDocument pdfDocument=document.getPdfDocument();
    if (pdfDocument.getNumberOfPages() > 1) {
      PdfPage lastPage=pdfDocument.getLastPage();
      if (lastPage.getContentStreamCount() == 1 && lastPage.getContentStream(0).getOutputStream().getCurrentPos() <= 0) {
        pdfDocument.removePage(pdfDocument.getNumberOfPages());
      }
    }
  }
}"
39469,"@Test @Ignore(""String_Node_Str"") public void responsiveIText() throws IOException, InterruptedException {
  PageSize[] pageSizes={null,new PageSize(PageSize.A3.getHeight(),PageSize.A4.getHeight()),new PageSize(760,PageSize.A4.getHeight()),new PageSize(PageSize.A5.getWidth(),PageSize.A4.getHeight())};
  String htmlSource=sourceFolder + ""String_Node_Str"";
  for (  PageSize pageSize : pageSizes) {
    Float pxWidth=null;
    if (pageSize != null) {
      pxWidth=CssUtils.parseAbsoluteLength(String.valueOf(pageSize.getWidth()));
    }
    String outName=""String_Node_Str"" + (pxWidth != null ? ""String_Node_Str"" + (int)(float)pxWidth : ""String_Node_Str"") + ""String_Node_Str"";
    PdfWriter writer=new PdfWriter(destinationFolder + outName);
    PdfDocument pdfDoc=new PdfDocument(writer);
    ConverterProperties converterProperties=new ConverterProperties();
    if (pageSize != null) {
      pdfDoc.setDefaultPageSize(pageSize);
      MediaDeviceDescription mediaDescription=new MediaDeviceDescription(MediaType.SCREEN);
      mediaDescription.setWidth((float)pxWidth);
      converterProperties.setMediaDeviceDescription(mediaDescription);
    }
    HtmlConverter.convertToPdf(new FileInputStream(htmlSource),pdfDoc,converterProperties);
    pdfDoc.close();
  }
  for (  PageSize pageSize : pageSizes) {
    Float pxWidth=null;
    if (pageSize != null) {
      pxWidth=CssUtils.parseAbsoluteLength(String.valueOf(pageSize.getWidth()));
    }
    String outName=""String_Node_Str"" + (pxWidth != null ? ""String_Node_Str"" + (int)(float)pxWidth : ""String_Node_Str"") + ""String_Node_Str"";
    String cmpName=""String_Node_Str"" + outName;
    Assert.assertNull(new CompareTool().compareByContent(destinationFolder + outName,sourceFolder + cmpName,destinationFolder,""String_Node_Str""));
  }
}","@Test public void responsiveIText() throws IOException, InterruptedException {
  PageSize[] pageSizes={null,new PageSize(PageSize.A3.getHeight(),PageSize.A4.getHeight()),new PageSize(760,PageSize.A4.getHeight()),new PageSize(PageSize.A5.getWidth(),PageSize.A4.getHeight())};
  String htmlSource=sourceFolder + ""String_Node_Str"";
  for (  PageSize pageSize : pageSizes) {
    Float pxWidth=null;
    if (pageSize != null) {
      pxWidth=CssUtils.parseAbsoluteLength(String.valueOf(pageSize.getWidth()));
    }
    String outName=""String_Node_Str"" + (pxWidth != null ? ""String_Node_Str"" + (int)(float)pxWidth : ""String_Node_Str"") + ""String_Node_Str"";
    PdfWriter writer=new PdfWriter(destinationFolder + outName);
    PdfDocument pdfDoc=new PdfDocument(writer);
    ConverterProperties converterProperties=new ConverterProperties();
    if (pageSize != null) {
      pdfDoc.setDefaultPageSize(pageSize);
      MediaDeviceDescription mediaDescription=new MediaDeviceDescription(MediaType.SCREEN);
      mediaDescription.setWidth((float)pxWidth);
      converterProperties.setMediaDeviceDescription(mediaDescription);
    }
    HtmlConverter.convertToPdf(new FileInputStream(htmlSource),pdfDoc,converterProperties);
    pdfDoc.close();
  }
  for (  PageSize pageSize : pageSizes) {
    Float pxWidth=null;
    if (pageSize != null) {
      pxWidth=CssUtils.parseAbsoluteLength(String.valueOf(pageSize.getWidth()));
    }
    String outName=""String_Node_Str"" + (pxWidth != null ? ""String_Node_Str"" + (int)(float)pxWidth : ""String_Node_Str"") + ""String_Node_Str"";
    String cmpName=""String_Node_Str"" + outName;
    Assert.assertNull(new CompareTool().compareByContent(destinationFolder + outName,sourceFolder + cmpName,destinationFolder,""String_Node_Str""));
  }
}"
39470,"@Test @Ignore(""String_Node_Str"") public void float55Test() throws IOException, InterruptedException {
  runTest(""String_Node_Str"",""String_Node_Str"");
}","@Test public void float55Test() throws IOException, InterruptedException {
  runTest(""String_Node_Str"",""String_Node_Str"");
}"
39471,"@Test public void responsiveIText() throws IOException, InterruptedException {
  PageSize[] pageSizes={null,new PageSize(PageSize.A3.getHeight(),PageSize.A4.getHeight()),new PageSize(760,PageSize.A4.getHeight()),new PageSize(PageSize.A5.getWidth(),PageSize.A4.getHeight())};
  String htmlSource=sourceFolder + ""String_Node_Str"";
  for (  PageSize pageSize : pageSizes) {
    Float pxWidth=null;
    if (pageSize != null) {
      pxWidth=CssUtils.parseAbsoluteLength(String.valueOf(pageSize.getWidth()));
    }
    String outName=""String_Node_Str"" + (pxWidth != null ? ""String_Node_Str"" + (int)(float)pxWidth : ""String_Node_Str"") + ""String_Node_Str"";
    PdfWriter writer=new PdfWriter(destinationFolder + outName);
    PdfDocument pdfDoc=new PdfDocument(writer);
    ConverterProperties converterProperties=new ConverterProperties();
    if (pageSize != null) {
      pdfDoc.setDefaultPageSize(pageSize);
      MediaDeviceDescription mediaDescription=new MediaDeviceDescription(MediaType.SCREEN);
      mediaDescription.setWidth((float)pxWidth);
      converterProperties.setMediaDeviceDescription(mediaDescription);
    }
    HtmlConverter.convertToPdf(new FileInputStream(htmlSource),pdfDoc,converterProperties);
    pdfDoc.close();
  }
  for (  PageSize pageSize : pageSizes) {
    Float pxWidth=null;
    if (pageSize != null) {
      pxWidth=CssUtils.parseAbsoluteLength(String.valueOf(pageSize.getWidth()));
    }
    String outName=""String_Node_Str"" + (pxWidth != null ? ""String_Node_Str"" + (int)(float)pxWidth : ""String_Node_Str"") + ""String_Node_Str"";
    String cmpName=""String_Node_Str"" + outName;
    Assert.assertNull(new CompareTool().compareByContent(destinationFolder + outName,sourceFolder + cmpName,destinationFolder,""String_Node_Str""));
  }
}","@Test @Ignore(""String_Node_Str"") public void responsiveIText() throws IOException, InterruptedException {
  PageSize[] pageSizes={null,new PageSize(PageSize.A3.getHeight(),PageSize.A4.getHeight()),new PageSize(760,PageSize.A4.getHeight()),new PageSize(PageSize.A5.getWidth(),PageSize.A4.getHeight())};
  String htmlSource=sourceFolder + ""String_Node_Str"";
  for (  PageSize pageSize : pageSizes) {
    Float pxWidth=null;
    if (pageSize != null) {
      pxWidth=CssUtils.parseAbsoluteLength(String.valueOf(pageSize.getWidth()));
    }
    String outName=""String_Node_Str"" + (pxWidth != null ? ""String_Node_Str"" + (int)(float)pxWidth : ""String_Node_Str"") + ""String_Node_Str"";
    PdfWriter writer=new PdfWriter(destinationFolder + outName);
    PdfDocument pdfDoc=new PdfDocument(writer);
    ConverterProperties converterProperties=new ConverterProperties();
    if (pageSize != null) {
      pdfDoc.setDefaultPageSize(pageSize);
      MediaDeviceDescription mediaDescription=new MediaDeviceDescription(MediaType.SCREEN);
      mediaDescription.setWidth((float)pxWidth);
      converterProperties.setMediaDeviceDescription(mediaDescription);
    }
    HtmlConverter.convertToPdf(new FileInputStream(htmlSource),pdfDoc,converterProperties);
    pdfDoc.close();
  }
  for (  PageSize pageSize : pageSizes) {
    Float pxWidth=null;
    if (pageSize != null) {
      pxWidth=CssUtils.parseAbsoluteLength(String.valueOf(pageSize.getWidth()));
    }
    String outName=""String_Node_Str"" + (pxWidth != null ? ""String_Node_Str"" + (int)(float)pxWidth : ""String_Node_Str"") + ""String_Node_Str"";
    String cmpName=""String_Node_Str"" + outName;
    Assert.assertNull(new CompareTool().compareByContent(destinationFolder + outName,sourceFolder + cmpName,destinationFolder,""String_Node_Str""));
  }
}"
39472,"@Test public void float55Test() throws IOException, InterruptedException {
  runTest(""String_Node_Str"",""String_Node_Str"");
}","@Test @Ignore(""String_Node_Str"") public void float55Test() throws IOException, InterruptedException {
  runTest(""String_Node_Str"",""String_Node_Str"");
}"
39473,"@Test public void test() throws IOException, InterruptedException {
  String input=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  List<IElement> elements=HtmlConverter.convertToElements(input);
  Assert.assertEquals(3,elements.size());
  Assert.assertTrue(elements.get(1) instanceof Paragraph);
  Assert.assertEquals(1,((Paragraph)elements.get(1)).getChildren().size());
  IElement iElement=((Paragraph)elements.get(1)).getChildren().get(0);
  Assert.assertEquals(""String_Node_Str"",iElement.getProperty(Property.FONT));
}","@Test public void test() throws IOException, InterruptedException {
  String input=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  List<IElement> elements=HtmlConverter.convertToElements(input);
  Assert.assertEquals(3,elements.size());
  Assert.assertTrue(elements.get(1) instanceof Paragraph);
  Assert.assertEquals(1,((Paragraph)elements.get(1)).getChildren().size());
  IElement iElement=((Paragraph)elements.get(1)).getChildren().get(0);
  Assert.assertEquals(""String_Node_Str"",iElement.<String>getProperty(Property.FONT));
}"
39474,"/** 
 * Instantiates a new ConverterProperties instance based on another ConverterProperties instance (copy constructor).
 * @param other the other ConverterProperties instance
 */
public ConverterProperties(ConverterProperties other){
  this.mediaDeviceDescription=other.mediaDeviceDescription;
  this.fontProvider=other.fontProvider;
  this.tagWorkerFactory=other.tagWorkerFactory;
  this.cssApplierFactory=other.cssApplierFactory;
  this.baseUri=other.baseUri;
  this.createAcroForm=other.createAcroForm;
  this.outlineHandler=other.outlineHandler;
}","/** 
 * Instantiates a new   {@link ConverterProperties} instance based on another {@link ConverterProperties} instance(copy constructor).
 * @param other the other {@link ConverterProperties} instance
 */
public ConverterProperties(ConverterProperties other){
  this.mediaDeviceDescription=other.mediaDeviceDescription;
  this.fontProvider=other.fontProvider;
  this.tagWorkerFactory=other.tagWorkerFactory;
  this.cssApplierFactory=other.cssApplierFactory;
  this.baseUri=other.baseUri;
  this.createAcroForm=other.createAcroForm;
  this.outlineHandler=other.outlineHandler;
}"
39475,"/** 
 * Converts HTML obtained from an <code>InputStream</code> to objects that will be added to a <code>PdfDocument</code>, using specific <code>ConverterProperties</code>, returning a <code>Document</code> instance.
 * @param htmlStream the <code>InputStream</code> with the source HTML
 * @param pdfDocument the <code>PdfDocument</code> instance
 * @param converterProperties a <code>ConverterProperties</code> instance
 * @return a <code>Document</code> instance
 * @throws IOException Signals that an I/O exception has occurred.
 */
public static Document convertToDocument(InputStream htmlStream,PdfDocument pdfDocument,ConverterProperties converterProperties) throws IOException {
  String licenseKeyClassName=""String_Node_Str"";
  String licenseKeyProductClassName=""String_Node_Str"";
  String licenseKeyFeatureClassName=""String_Node_Str"";
  String checkLicenseKeyMethodName=""String_Node_Str"";
  try {
    Class licenseKeyClass=Class.forName(licenseKeyClassName);
    Class licenseKeyProductClass=Class.forName(licenseKeyProductClassName);
    Class licenseKeyProductFeatureClass=Class.forName(licenseKeyFeatureClassName);
    Object licenseKeyProductFeatureArray=Array.newInstance(licenseKeyProductFeatureClass,0);
    Class[] params=new Class[]{String.class,Integer.TYPE,Integer.TYPE,licenseKeyProductFeatureArray.getClass()};
    Constructor licenseKeyProductConstructor=licenseKeyProductClass.getConstructor(params);
    Object licenseKeyProductObject=licenseKeyProductConstructor.newInstance(Html2PdfProductInfo.PRODUCT_NAME,Html2PdfProductInfo.MAJOR_VERSION,Html2PdfProductInfo.MINOR_VERSION,licenseKeyProductFeatureArray);
    Method method=licenseKeyClass.getMethod(checkLicenseKeyMethodName,licenseKeyProductClass);
    method.invoke(null,licenseKeyProductObject);
  }
 catch (  Exception e) {
    if (!Version.isAGPLVersion()) {
      throw new RuntimeException(e.getCause());
    }
  }
  if (pdfDocument.getReader() != null) {
    throw new Html2PdfException(Html2PdfException.PdfDocumentShouldBeInWritingMode);
  }
  IHtmlParser parser=new JsoupHtmlParser();
  String detectedCharset=detectEncoding(htmlStream);
  IDocumentNode doc=parser.parse(htmlStream,detectedCharset);
  return Attacher.attach(doc,pdfDocument,converterProperties);
}","/** 
 * Converts HTML obtained from an   {@link InputStream} to objects thatwill be added to a  {@link PdfDocument}, using specific   {@link ConverterProperties}, returning a   {@link Document} instance.
 * @param htmlStream the {@link InputStream} with the source HTML
 * @param pdfDocument the {@link PdfDocument} instance
 * @param converterProperties a {@link ConverterProperties} instance
 * @return a {@link Document} instance
 * @throws IOException Signals that an I/O exception has occurred.
 */
public static Document convertToDocument(InputStream htmlStream,PdfDocument pdfDocument,ConverterProperties converterProperties) throws IOException {
  String licenseKeyClassName=""String_Node_Str"";
  String licenseKeyProductClassName=""String_Node_Str"";
  String licenseKeyFeatureClassName=""String_Node_Str"";
  String checkLicenseKeyMethodName=""String_Node_Str"";
  try {
    Class licenseKeyClass=Class.forName(licenseKeyClassName);
    Class licenseKeyProductClass=Class.forName(licenseKeyProductClassName);
    Class licenseKeyProductFeatureClass=Class.forName(licenseKeyFeatureClassName);
    Object licenseKeyProductFeatureArray=Array.newInstance(licenseKeyProductFeatureClass,0);
    Class[] params=new Class[]{String.class,Integer.TYPE,Integer.TYPE,licenseKeyProductFeatureArray.getClass()};
    Constructor licenseKeyProductConstructor=licenseKeyProductClass.getConstructor(params);
    Object licenseKeyProductObject=licenseKeyProductConstructor.newInstance(Html2PdfProductInfo.PRODUCT_NAME,Html2PdfProductInfo.MAJOR_VERSION,Html2PdfProductInfo.MINOR_VERSION,licenseKeyProductFeatureArray);
    Method method=licenseKeyClass.getMethod(checkLicenseKeyMethodName,licenseKeyProductClass);
    method.invoke(null,licenseKeyProductObject);
  }
 catch (  Exception e) {
    if (!Version.isAGPLVersion()) {
      throw new RuntimeException(e.getCause());
    }
  }
  if (pdfDocument.getReader() != null) {
    throw new Html2PdfException(Html2PdfException.PdfDocumentShouldBeInWritingMode);
  }
  IHtmlParser parser=new JsoupHtmlParser();
  String detectedCharset=detectEncoding(htmlStream);
  IDocumentNode doc=parser.parse(htmlStream,detectedCharset);
  return Attacher.attach(doc,pdfDocument,converterProperties);
}"
39476,"/** 
 * Converts HTML obtained from an <code>InputStream</code> to a <code>List</code> of iText objects (<code>IElement</code> instances), using specific <code>ConverterProperties</code>.
 * @param htmlStream the <code>InputStream</code> with the source HTML
 * @param converterProperties a <code>ConverterProperties</code> instance
 * @return a list of iText building blocks
 * @throws IOException Signals that an I/O exception has occurred.
 */
public static List<IElement> convertToElements(InputStream htmlStream,ConverterProperties converterProperties) throws IOException {
  String licenseKeyClassName=""String_Node_Str"";
  String licenseKeyProductClassName=""String_Node_Str"";
  String licenseKeyFeatureClassName=""String_Node_Str"";
  String checkLicenseKeyMethodName=""String_Node_Str"";
  try {
    Class licenseKeyClass=Class.forName(licenseKeyClassName);
    Class licenseKeyProductClass=Class.forName(licenseKeyProductClassName);
    Class licenseKeyProductFeatureClass=Class.forName(licenseKeyFeatureClassName);
    Object licenseKeyProductFeatureArray=Array.newInstance(licenseKeyProductFeatureClass,0);
    Class[] params=new Class[]{String.class,Integer.TYPE,Integer.TYPE,licenseKeyProductFeatureArray.getClass()};
    Constructor licenseKeyProductConstructor=licenseKeyProductClass.getConstructor(params);
    Object licenseKeyProductObject=licenseKeyProductConstructor.newInstance(Html2PdfProductInfo.PRODUCT_NAME,Html2PdfProductInfo.MAJOR_VERSION,Html2PdfProductInfo.MINOR_VERSION,licenseKeyProductFeatureArray);
    Method method=licenseKeyClass.getMethod(checkLicenseKeyMethodName,licenseKeyProductClass);
    method.invoke(null,licenseKeyProductObject);
  }
 catch (  Exception e) {
    if (!Version.isAGPLVersion()) {
      throw new RuntimeException(e.getCause());
    }
  }
  IHtmlParser parser=new JsoupHtmlParser();
  IDocumentNode doc=parser.parse(htmlStream,detectEncoding(htmlStream));
  return Attacher.attach(doc,converterProperties);
}","/** 
 * Converts HTML obtained from an   {@link InputStream} to a {@link List} ofiText objects ( {@link IElement} instances), using specific{@link ConverterProperties}.
 * @param htmlStream the {@link InputStream} with the source HTML
 * @param converterProperties a {@link ConverterProperties} instance
 * @return a list of iText building blocks
 * @throws IOException Signals that an I/O exception has occurred.
 */
public static List<IElement> convertToElements(InputStream htmlStream,ConverterProperties converterProperties) throws IOException {
  String licenseKeyClassName=""String_Node_Str"";
  String licenseKeyProductClassName=""String_Node_Str"";
  String licenseKeyFeatureClassName=""String_Node_Str"";
  String checkLicenseKeyMethodName=""String_Node_Str"";
  try {
    Class licenseKeyClass=Class.forName(licenseKeyClassName);
    Class licenseKeyProductClass=Class.forName(licenseKeyProductClassName);
    Class licenseKeyProductFeatureClass=Class.forName(licenseKeyFeatureClassName);
    Object licenseKeyProductFeatureArray=Array.newInstance(licenseKeyProductFeatureClass,0);
    Class[] params=new Class[]{String.class,Integer.TYPE,Integer.TYPE,licenseKeyProductFeatureArray.getClass()};
    Constructor licenseKeyProductConstructor=licenseKeyProductClass.getConstructor(params);
    Object licenseKeyProductObject=licenseKeyProductConstructor.newInstance(Html2PdfProductInfo.PRODUCT_NAME,Html2PdfProductInfo.MAJOR_VERSION,Html2PdfProductInfo.MINOR_VERSION,licenseKeyProductFeatureArray);
    Method method=licenseKeyClass.getMethod(checkLicenseKeyMethodName,licenseKeyProductClass);
    method.invoke(null,licenseKeyProductObject);
  }
 catch (  Exception e) {
    if (!Version.isAGPLVersion()) {
      throw new RuntimeException(e.getCause());
    }
  }
  IHtmlParser parser=new JsoupHtmlParser();
  IDocumentNode doc=parser.parse(htmlStream,detectEncoding(htmlStream));
  return Attacher.attach(doc,converterProperties);
}"
39477,"/** 
 * Detects encoding of a specific <code>InputStream</code>.
 * @param in the <code>InputStream</code>
 * @return the encoding; currently always returns ""UTF-8"".
 */
private static String detectEncoding(final InputStream in){
  return ""String_Node_Str"";
}","/** 
 * Detects encoding of a specific   {@link InputStream}.
 * @param in the {@link InputStream}
 * @return the encoding; currently always returns ""UTF-8"".
 */
private static String detectEncoding(final InputStream in){
  return ""String_Node_Str"";
}"
39478,"/** 
 * Converts HTML obtained from an <code>InputStream</code> to objects that will be added to a <code>PdfDocument</code>, using specific <code>ConverterProperties</code>.
 * @param htmlStream the <code>InputStream</code> with the source HTML
 * @param pdfDocument the <code>PdfDocument</code> instance
 * @param converterProperties a <code>ConverterProperties</code> instance
 * @throws IOException Signals that an I/O exception has occurred.
 */
public static void convertToPdf(InputStream htmlStream,PdfDocument pdfDocument,ConverterProperties converterProperties) throws IOException {
  Document document=convertToDocument(htmlStream,pdfDocument,converterProperties);
  document.close();
}","/** 
 * Converts HTML obtained from an   {@link InputStream} to objects thatwill be added to a  {@link PdfDocument}, using specific   {@link ConverterProperties}.
 * @param htmlStream the {@link InputStream} with the source HTML
 * @param pdfDocument the {@link PdfDocument} instance
 * @param converterProperties a {@link ConverterProperties} instance
 * @throws IOException Signals that an I/O exception has occurred.
 */
public static void convertToPdf(InputStream htmlStream,PdfDocument pdfDocument,ConverterProperties converterProperties) throws IOException {
  Document document=convertToDocument(htmlStream,pdfDocument,converterProperties);
  document.close();
}"
39479,"/** 
 * Instantiates a <code>PortUtil</code> instance.
 */
private PortUtil(){
}","/** 
 * Instantiates a   {@link PortUtil} instance.
 */
private PortUtil(){
}"
39480,"/** 
 * Wraps a <code>Reader</code> instance in a <code>BufferedReader</code>.
 * @param inputStreamReader the original reader
 * @return the buffered reader
 */
public static Reader wrapInBufferedReader(Reader inputStreamReader){
  return new BufferedReader(inputStreamReader);
}","/** 
 * Wraps a   {@link Reader} instance in a {@link BufferedReader}.
 * @param inputStreamReader the original reader
 * @return the buffered reader
 */
public static Reader wrapInBufferedReader(Reader inputStreamReader){
  return new BufferedReader(inputStreamReader);
}"
39481,"/** 
 * Instantiates a new <code>Attacher</code> instance.
 */
private Attacher(){
}","/** 
 * Instantiates a new   {@link Attacher} instance.
 */
private Attacher(){
}"
39482,"/** 
 * Attaches the HTML content stored in a document node to a list of <code>IElement</code> objects.
 * @param documentNode the document node with the HTML
 * @param converterProperties the <code>ConverterProperties</code> instance
 * @return the list of <code>IElement</code> objects
 */
public static List<com.itextpdf.layout.element.IElement> attach(IDocumentNode documentNode,ConverterProperties converterProperties){
  IHtmlProcessor processor=new DefaultHtmlProcessor(converterProperties);
  return processor.processElements(documentNode);
}","/** 
 * Attaches the HTML content stored in a document node to a list of   {@link IElement} objects.
 * @param documentNode the document node with the HTML
 * @param converterProperties the {@link ConverterProperties} instance
 * @return the list of {@link IElement} objects
 */
public static List<com.itextpdf.layout.element.IElement> attach(IDocumentNode documentNode,ConverterProperties converterProperties){
  IHtmlProcessor processor=new DefaultHtmlProcessor(converterProperties);
  return processor.processElements(documentNode);
}"
39483,"/** 
 * Parses HTML to add the content to a list of <code>IElement</code> objects.
 * @param root the root node of the HTML that needs to be parsed
 * @return the resulting list
 */
List<IElement> processElements(INode root);","/** 
 * Parses HTML to add the content to a list of   {@link IElement} objects.
 * @param root the root node of the HTML that needs to be parsed
 * @return the resulting list
 */
List<IElement> processElements(INode root);"
39484,"/** 
 * Parses HTML to add the content to a <code>PdfDocument</code>.
 * @param root the root node of the HTML that needs to be parsed
 * @param pdfDocument the <code>PdfDocument</code> instance
 * @return a <code>Document</code> instance
 */
Document processDocument(INode root,PdfDocument pdfDocument);","/** 
 * Parses HTML to add the content to a   {@link PdfDocument}.
 * @param root the root node of the HTML that needs to be parsed
 * @param pdfDocument the {@link PdfDocument} instance
 * @return a {@link Document} instance
 */
Document processDocument(INode root,PdfDocument pdfDocument);"
39485,"/** 
 * Gets a processed object if it can be expressed as an <code>IPropertyContainer</code> instance.
 * @return the same object on every call.Might return null either if result is not yet produced or if this particular tag worker doesn't produce result in a form of  {@link IPropertyContainer}.
 */
IPropertyContainer getElementResult();","/** 
 * Gets a processed object if it can be expressed as an   {@link IPropertyContainer} instance.
 * @return the same object on every call.Might return null either if result is not yet produced or if this particular tag worker doesn't produce result in a form of  {@link IPropertyContainer}.
 */
IPropertyContainer getElementResult();"
39486,"/** 
 * Returns a   {@link ITagWorker} instance constructed based on the passed parameters.
 */
ITagWorker getTagWorker(IElementNode tag,ProcessorContext context);","/** 
 * @param tag IElementNode
 * @param context ProcessorContext
 * @return a {@link ITagWorker} instance constructed based on the passed parameters.
 */
ITagWorker getTagWorker(IElementNode tag,ProcessorContext context);"
39487,"/** 
 * Instantiates a new <code>ProcessorContext</code> instance.
 * @param converterProperties a <code>ConverterProperties</code> instance
 */
public ProcessorContext(ConverterProperties converterProperties){
  if (converterProperties == null) {
    converterProperties=new ConverterProperties();
  }
  state=new State();
  deviceDescription=converterProperties.getMediaDeviceDescription();
  if (deviceDescription == null) {
    deviceDescription=MediaDeviceDescription.createDefault();
  }
  fontProvider=converterProperties.getFontProvider();
  if (fontProvider == null) {
    fontProvider=new DefaultFontProvider();
  }
  tagWorkerFactory=converterProperties.getTagWorkerFactory();
  if (tagWorkerFactory == null) {
    tagWorkerFactory=new DefaultTagWorkerFactory();
  }
  cssApplierFactory=converterProperties.getCssApplierFactory();
  if (cssApplierFactory == null) {
    cssApplierFactory=new DefaultCssApplierFactory();
  }
  baseUri=converterProperties.getBaseUri();
  if (baseUri == null) {
    baseUri=""String_Node_Str"";
  }
  outlineHandler=converterProperties.getOutlineHandler();
  if (outlineHandler == null) {
    outlineHandler=new OutlineHandler();
  }
  resourceResolver=new ResourceResolver(baseUri);
  cssContext=new CssContext();
  createAcroForm=converterProperties.isCreateAcroForm();
  formFieldNameResolver=new FormFieldNameResolver();
}","/** 
 * Instantiates a new   {@link ProcessorContext} instance.
 * @param converterProperties a {@link ConverterProperties} instance
 */
public ProcessorContext(ConverterProperties converterProperties){
  if (converterProperties == null) {
    converterProperties=new ConverterProperties();
  }
  state=new State();
  deviceDescription=converterProperties.getMediaDeviceDescription();
  if (deviceDescription == null) {
    deviceDescription=MediaDeviceDescription.createDefault();
  }
  fontProvider=converterProperties.getFontProvider();
  if (fontProvider == null) {
    fontProvider=new DefaultFontProvider();
  }
  tagWorkerFactory=converterProperties.getTagWorkerFactory();
  if (tagWorkerFactory == null) {
    tagWorkerFactory=new DefaultTagWorkerFactory();
  }
  cssApplierFactory=converterProperties.getCssApplierFactory();
  if (cssApplierFactory == null) {
    cssApplierFactory=new DefaultCssApplierFactory();
  }
  baseUri=converterProperties.getBaseUri();
  if (baseUri == null) {
    baseUri=""String_Node_Str"";
  }
  outlineHandler=converterProperties.getOutlineHandler();
  if (outlineHandler == null) {
    outlineHandler=new OutlineHandler();
  }
  resourceResolver=new ResourceResolver(baseUri);
  cssContext=new CssContext();
  createAcroForm=converterProperties.isCreateAcroForm();
  formFieldNameResolver=new FormFieldNameResolver();
}"
39488,"/** 
 * Instantiates a new <code>State</code> instance.
 */
public State(){
  stack=new Stack<>();
}","/** 
 * Instantiates a new   {@link State} instance.
 */
public State(){
  stack=new Stack<>();
}"
39489,"/** 
 * Instantiates a new <code>DefaultTagWorkerMapping</code> instance.
 */
private DefaultTagWorkerMapping(){
}","/** 
 * Instantiates a new   {@link DefaultTagWorkerMapping} instance.
 */
private DefaultTagWorkerMapping(){
}"
39490,"/** 
 * Instantiates a new <code>FontFaceSrc</code> insance.
 * @param src a source path
 * @param isLocal indicates if the font is local
 * @param format the font format (true type, open type, woff,...)
 */
private FontFaceSrc(String src,boolean isLocal,FontFormat format){
  this.format=format;
  this.src=src;
  this.isLocal=isLocal;
}","/** 
 * Instantiates a new   {@link FontFaceSrc} insance.
 * @param src a source path
 * @param isLocal indicates if the font is local
 * @param format the font format (true type, open type, woff,...)
 */
private FontFaceSrc(String src,boolean isLocal,FontFormat format){
  this.format=format;
  this.src=src;
  this.isLocal=isLocal;
}"
39491,"/** 
 * Parses a <code>String</code> to a font format.
 * @param formatStr a string
 * @return a font format
 */
static FontFormat parseFormat(String formatStr){
  if (formatStr != null && formatStr.length() > 0) {
switch (unquote(formatStr).toLowerCase()) {
case ""String_Node_Str"":
      return FontFormat.TrueType;
case ""String_Node_Str"":
    return FontFormat.OpenType;
case ""String_Node_Str"":
  return FontFormat.WOFF;
case ""String_Node_Str"":
return FontFormat.WOFF2;
case ""String_Node_Str"":
return FontFormat.EOT;
case ""String_Node_Str"":
return FontFormat.SVG;
}
}
return FontFormat.None;
}","/** 
 * Parses a   {@link String} to a font format.
 * @param formatStr a string
 * @return a font format
 */
static FontFormat parseFormat(String formatStr){
  if (formatStr != null && formatStr.length() > 0) {
switch (unquote(formatStr).toLowerCase()) {
case ""String_Node_Str"":
      return FontFormat.TrueType;
case ""String_Node_Str"":
    return FontFormat.OpenType;
case ""String_Node_Str"":
  return FontFormat.WOFF;
case ""String_Node_Str"":
return FontFormat.WOFF2;
case ""String_Node_Str"":
return FontFormat.EOT;
case ""String_Node_Str"":
return FontFormat.SVG;
}
}
return FontFormat.None;
}"
39492,"/** 
 * Creates a <code>FontFace</code> object by parsing a <code>String</code> trying to match patterns that reveal the font name, whether that font is local, and which format the font is in.
 * @param src a string containing information about a font
 * @return the font in the form of a <code>FontFace</code> object
 */
static FontFaceSrc create(String src){
  Matcher m=UrlPattern.matcher(src);
  if (!m.matches()) {
    return null;
  }
  return new FontFaceSrc(unquote(m.group(UrlGroup)),""String_Node_Str"".equals(m.group(TypeGroup)),parseFormat(m.group(FormatGroup)));
}","/** 
 * Creates a   {@link FontFace} object by parsing a {@link String}trying to match patterns that reveal the font name, whether that font is local, and which format the font is in.
 * @param src a string containing information about a font
 * @return the font in the form of a {@link FontFace} object
 */
static FontFaceSrc create(String src){
  Matcher m=UrlPattern.matcher(src);
  if (!m.matches()) {
    return null;
  }
  return new FontFaceSrc(unquote(m.group(UrlGroup)),""String_Node_Str"".equals(m.group(TypeGroup)),parseFormat(m.group(FormatGroup)));
}"
39493,"/** 
 * Removes single and double quotes at the start and the end of a <code>String</code>.
 * @param quotedString a <code>String</quote> that might be between quotes
 * @return the <code>String</code> without the quotes
 */
static String unquote(String quotedString){
  if (quotedString.charAt(0) == '\'' || quotedString.charAt(0) == '\""') {
    return quotedString.substring(1,quotedString.length() - 1);
  }
  return quotedString;
}","/** 
 * Removes single and double quotes at the start and the end of a   {@link String}.
 * @param quotedString a {@link String} that might be between quotes
 * @return the {@link String} without the quotes
 */
static String unquote(String quotedString){
  if (quotedString.charAt(0) == '\'' || quotedString.charAt(0) == '\""') {
    return quotedString.substring(1,quotedString.length() - 1);
  }
  return quotedString;
}"
39494,"/** 
 * Instantiates a new <code>HtmlDocumentRenderer</code> instance.
 * @param document an iText <code>Document</code> instance
 * @param immediateFlush the immediate flush indicator
 */
public HtmlDocumentRenderer(Document document,boolean immediateFlush){
  super(document,immediateFlush);
}","/** 
 * Instantiates a new   {@link HtmlDocumentRenderer} instance.
 * @param document an iText {@link Document} instance
 * @param immediateFlush the immediate flush indicator
 */
public HtmlDocumentRenderer(Document document,boolean immediateFlush){
  super(document,immediateFlush);
}"
39495,"/** 
 * Parses the selector items.
 * @param selector the selectors in the form of a <code>String</code>
 * @return the resulting list of {@link ICssSelectorItem}
 */
public static List<ICssSelectorItem> parseSelectorItems(String selector){
  List<ICssSelectorItem> selectorItems=new ArrayList<>();
  Matcher itemMatcher=selectorPattern.matcher(selector);
  boolean tagSelectorDescription=false;
  while (itemMatcher.find()) {
    String selectorItem=itemMatcher.group(0);
    char firstChar=selectorItem.charAt(0);
switch (firstChar) {
case '#':
      selectorItems.add(new CssIdSelectorItem(selectorItem.substring(1)));
    break;
case '.':
  selectorItems.add(new CssClassSelectorItem(selectorItem.substring(1)));
break;
case '[':
selectorItems.add(new CssAttributeSelectorItem(selectorItem));
break;
case ':':
selectorItems.add(resolvePseudoSelector(selectorItem));
break;
case ' ':
case '+':
case '>':
case '~':
if (selectorItems.size() == 0) {
throw new IllegalArgumentException(MessageFormatUtil.format(""String_Node_Str"",firstChar));
}
ICssSelectorItem lastItem=selectorItems.get(selectorItems.size() - 1);
CssSeparatorSelectorItem curItem=new CssSeparatorSelectorItem(firstChar);
if (lastItem instanceof CssSeparatorSelectorItem) {
if (curItem.getSeparator() == ' ') {
break;
}
 else if (((CssSeparatorSelectorItem)lastItem).getSeparator() == ' ') {
selectorItems.set(selectorItems.size() - 1,curItem);
}
 else {
throw new IllegalArgumentException(MessageFormatUtil.format(""String_Node_Str"",((CssSeparatorSelectorItem)lastItem).getSeparator(),curItem.getSeparator()));
}
}
 else {
selectorItems.add(curItem);
tagSelectorDescription=false;
}
break;
default :
if (tagSelectorDescription) {
throw new IllegalStateException(""String_Node_Str"");
}
tagSelectorDescription=true;
selectorItems.add(new CssTagSelectorItem(selectorItem));
break;
}
}
if (selectorItems.size() == 0) {
throw new IllegalArgumentException(""String_Node_Str"");
}
return selectorItems;
}","/** 
 * Parses the selector items.
 * @param selector the selectors in the form of a <code>String</code>
 * @return the resulting list of {@link ICssSelectorItem}
 */
public static List<ICssSelectorItem> parseSelectorItems(String selector){
  List<ICssSelectorItem> selectorItems=new ArrayList<>();
  CssSelectorParserMatch match=new CssSelectorParserMatch(selector,selectorPattern);
  boolean tagSelectorDescription=false;
  while (match.success()) {
    String selectorItem=match.getValue();
    char firstChar=selectorItem.charAt(0);
switch (firstChar) {
case '#':
      match.next();
    selectorItems.add(new CssIdSelectorItem(selectorItem.substring(1)));
  break;
case '.':
match.next();
selectorItems.add(new CssClassSelectorItem(selectorItem.substring(1)));
break;
case '[':
match.next();
selectorItems.add(new CssAttributeSelectorItem(selectorItem));
break;
case ':':
appendPseudoSelector(selectorItems,selectorItem,match);
break;
case ' ':
case '+':
case '>':
case '~':
match.next();
if (selectorItems.size() == 0) {
throw new IllegalArgumentException(MessageFormatUtil.format(""String_Node_Str"",firstChar));
}
ICssSelectorItem lastItem=selectorItems.get(selectorItems.size() - 1);
CssSeparatorSelectorItem curItem=new CssSeparatorSelectorItem(firstChar);
if (lastItem instanceof CssSeparatorSelectorItem) {
if (curItem.getSeparator() == ' ') {
break;
}
 else if (((CssSeparatorSelectorItem)lastItem).getSeparator() == ' ') {
selectorItems.set(selectorItems.size() - 1,curItem);
}
 else {
throw new IllegalArgumentException(MessageFormatUtil.format(""String_Node_Str"",((CssSeparatorSelectorItem)lastItem).getSeparator(),curItem.getSeparator()));
}
}
 else {
selectorItems.add(curItem);
tagSelectorDescription=false;
}
break;
default :
match.next();
if (tagSelectorDescription) {
throw new IllegalStateException(""String_Node_Str"");
}
tagSelectorDescription=true;
selectorItems.add(new CssTagSelectorItem(selectorItem));
break;
}
}
if (selectorItems.size() == 0) {
throw new IllegalArgumentException(""String_Node_Str"");
}
return selectorItems;
}"
39496,"/** 
 * Appends quoted content.
 * @param buffer the current buffer
 * @param source a source
 * @param start where to start in the source
 * @param endQuoteSymbol the end quote symbol
 * @return the new position in the source
 */
private static int appendQuoteContent(StringBuilder buffer,String source,int start,char endQuoteSymbol){
  int end=findNextUnescapedChar(source,endQuoteSymbol,start);
  if (end == -1) {
    end=source.length();
    LoggerFactory.getLogger(CssPropertyNormalizer.class).warn(MessageFormatUtil.format(LogMessageConstant.QUOTE_IS_NOT_CLOSED_IN_CSS_EXPRESSION,source));
  }
  buffer.append(source,start,end);
  return end;
}","/** 
 * Appends quoted content.
 * @param buffer the current buffer
 * @param source a source
 * @param start where to start in the source
 * @param endQuoteSymbol the end quote symbol
 * @return the new position in the source
 */
private static int appendQuoteContent(StringBuilder buffer,String source,int start,char endQuoteSymbol){
  int end=CssUtils.findNextUnescapedChar(source,endQuoteSymbol,start);
  if (end == -1) {
    end=source.length();
    LoggerFactory.getLogger(CssPropertyNormalizer.class).warn(MessageFormatUtil.format(LogMessageConstant.QUOTE_IS_NOT_CLOSED_IN_CSS_EXPRESSION,source));
  }
  buffer.append(source,start,end);
  return end;
}"
39497,"/** 
 * Applies font styles to an element.
 * @param cssProps the CSS props
 * @param context the processor context
 * @param stylesContainer the styles container
 * @param element the element
 */
public static void applyFontStyles(Map<String,String> cssProps,ProcessorContext context,IStylesContainer stylesContainer,IPropertyContainer element){
  float em=CssUtils.parseAbsoluteLength(cssProps.get(CssConstants.FONT_SIZE));
  float rem=context.getCssContext().getRootFontSize();
  if (em != 0) {
    element.setProperty(Property.FONT_SIZE,em);
  }
  if (cssProps.get(CssConstants.FONT_FAMILY) != null) {
    element.setProperty(Property.FONT,cssProps.get(CssConstants.FONT_FAMILY));
  }
  if (cssProps.get(CssConstants.FONT_WEIGHT) != null) {
    element.setProperty(Property.FONT_WEIGHT,cssProps.get(CssConstants.FONT_WEIGHT));
  }
  if (cssProps.get(CssConstants.FONT_STYLE) != null) {
    element.setProperty(Property.FONT_STYLE,cssProps.get(CssConstants.FONT_STYLE));
  }
  String cssColorPropValue=cssProps.get(CssConstants.COLOR);
  if (cssColorPropValue != null) {
    TransparentColor transparentColor;
    if (!CssConstants.TRANSPARENT.equals(cssColorPropValue)) {
      float[] rgbaColor=CssUtils.parseRgbaColor(cssColorPropValue);
      Color color=new DeviceRgb(rgbaColor[0],rgbaColor[1],rgbaColor[2]);
      float opacity=rgbaColor[3];
      transparentColor=new TransparentColor(color,opacity);
    }
 else {
      transparentColor=new TransparentColor(Color.BLACK,0f);
    }
    element.setProperty(Property.FONT_COLOR,transparentColor);
  }
  String direction=cssProps.get(CssConstants.DIRECTION);
  if (CssConstants.RTL.equals(direction)) {
    element.setProperty(Property.BASE_DIRECTION,BaseDirection.RIGHT_TO_LEFT);
    element.setProperty(Property.TEXT_ALIGNMENT,TextAlignment.RIGHT);
  }
 else   if (CssConstants.LTR.equals(direction)) {
    element.setProperty(Property.BASE_DIRECTION,BaseDirection.LEFT_TO_RIGHT);
    element.setProperty(Property.TEXT_ALIGNMENT,TextAlignment.LEFT);
  }
  if (stylesContainer instanceof IElementNode && ((IElementNode)stylesContainer).parentNode() instanceof IElementNode && CssConstants.RTL.equals(((IElementNode)((IElementNode)stylesContainer).parentNode()).getStyles().get(CssConstants.DIRECTION))) {
    element.setProperty(Property.HORIZONTAL_ALIGNMENT,HorizontalAlignment.RIGHT);
  }
  String align=cssProps.get(CssConstants.TEXT_ALIGN);
  if (CssConstants.LEFT.equals(align)) {
    element.setProperty(Property.TEXT_ALIGNMENT,TextAlignment.LEFT);
  }
 else   if (CssConstants.RIGHT.equals(align)) {
    element.setProperty(Property.TEXT_ALIGNMENT,TextAlignment.RIGHT);
  }
 else   if (CssConstants.CENTER.equals(align)) {
    element.setProperty(Property.TEXT_ALIGNMENT,TextAlignment.CENTER);
  }
 else   if (CssConstants.JUSTIFY.equals(align)) {
    element.setProperty(Property.TEXT_ALIGNMENT,TextAlignment.JUSTIFIED);
    element.setProperty(Property.SPACING_RATIO,1f);
  }
  String textDecorationProp=cssProps.get(CssConstants.TEXT_DECORATION);
  if (textDecorationProp != null) {
    String[] textDecorations=textDecorationProp.split(""String_Node_Str"");
    List<Underline> underlineList=new ArrayList<>();
    for (    String textDecoration : textDecorations) {
      if (CssConstants.BLINK.equals(textDecoration)) {
        logger.error(LogMessageConstant.TEXT_DECORATION_BLINK_NOT_SUPPORTED);
      }
 else       if (CssConstants.LINE_THROUGH.equals(textDecoration)) {
        underlineList.add(new Underline(null,.75f,0,0,1 / 4f,PdfCanvasConstants.LineCapStyle.BUTT));
      }
 else       if (CssConstants.OVERLINE.equals(textDecoration)) {
        underlineList.add(new Underline(null,.75f,0,0,9 / 10f,PdfCanvasConstants.LineCapStyle.BUTT));
      }
 else       if (CssConstants.UNDERLINE.equals(textDecoration)) {
        underlineList.add(new Underline(null,.75f,0,0,-1 / 10f,PdfCanvasConstants.LineCapStyle.BUTT));
      }
 else       if (CssConstants.NONE.equals(textDecoration)) {
        underlineList=null;
        break;
      }
    }
    element.setProperty(Property.UNDERLINE,underlineList);
  }
  String textIndent=cssProps.get(CssConstants.TEXT_INDENT);
  if (textIndent != null) {
    UnitValue textIndentValue=CssUtils.parseLengthValueToPt(textIndent,em,rem);
    if (textIndentValue != null) {
      if (textIndentValue.isPointValue()) {
        element.setProperty(Property.FIRST_LINE_INDENT,textIndentValue.getValue());
      }
 else {
        logger.error(MessageFormat.format(LogMessageConstant.CSS_PROPERTY_IN_PERCENTS_NOT_SUPPORTED,CssConstants.TEXT_INDENT));
      }
    }
  }
  String letterSpacing=cssProps.get(CssConstants.LETTER_SPACING);
  if (letterSpacing != null && !letterSpacing.equals(CssConstants.NORMAL)) {
    UnitValue letterSpacingValue=CssUtils.parseLengthValueToPt(letterSpacing,em,rem);
    if (letterSpacingValue.isPointValue()) {
      element.setProperty(Property.CHARACTER_SPACING,letterSpacingValue.getValue());
    }
 else {
    }
  }
  String wordSpacing=cssProps.get(CssConstants.WORD_SPACING);
  if (wordSpacing != null) {
    UnitValue wordSpacingValue=CssUtils.parseLengthValueToPt(wordSpacing,em,rem);
    if (wordSpacingValue != null) {
      if (wordSpacingValue.isPointValue()) {
        element.setProperty(Property.WORD_SPACING,wordSpacingValue.getValue());
      }
 else {
      }
    }
  }
  String lineHeight=cssProps.get(CssConstants.LINE_HEIGHT);
  if (lineHeight != null && !CssConstants.NORMAL.equals(lineHeight)) {
    UnitValue lineHeightValue=CssUtils.parseLengthValueToPt(lineHeight,em,rem);
    if (CssUtils.isNumericValue(lineHeight)) {
      element.setProperty(Property.LEADING,new Leading(Leading.MULTIPLIED,lineHeightValue.getValue()));
    }
 else     if (lineHeightValue != null && lineHeightValue.isPointValue()) {
      element.setProperty(Property.LEADING,new Leading(Leading.FIXED,lineHeightValue.getValue()));
    }
 else     if (lineHeightValue != null) {
      element.setProperty(Property.LEADING,new Leading(Leading.MULTIPLIED,lineHeightValue.getValue() / 100));
    }
  }
 else {
    element.setProperty(Property.LEADING,new Leading(Leading.MULTIPLIED,1.2f));
  }
}","/** 
 * Applies font styles to an element.
 * @param cssProps the CSS props
 * @param context the processor context
 * @param stylesContainer the styles container
 * @param element the element
 */
public static void applyFontStyles(Map<String,String> cssProps,ProcessorContext context,IStylesContainer stylesContainer,IPropertyContainer element){
  float em=CssUtils.parseAbsoluteLength(cssProps.get(CssConstants.FONT_SIZE));
  float rem=context.getCssContext().getRootFontSize();
  if (em != 0) {
    element.setProperty(Property.FONT_SIZE,em);
  }
  if (cssProps.get(CssConstants.FONT_FAMILY) != null) {
    element.setProperty(Property.FONT,cssProps.get(CssConstants.FONT_FAMILY));
  }
  if (cssProps.get(CssConstants.FONT_WEIGHT) != null) {
    element.setProperty(Property.FONT_WEIGHT,cssProps.get(CssConstants.FONT_WEIGHT));
  }
  if (cssProps.get(CssConstants.FONT_STYLE) != null) {
    element.setProperty(Property.FONT_STYLE,cssProps.get(CssConstants.FONT_STYLE));
  }
  String cssColorPropValue=cssProps.get(CssConstants.COLOR);
  if (cssColorPropValue != null) {
    TransparentColor transparentColor;
    if (!CssConstants.TRANSPARENT.equals(cssColorPropValue)) {
      float[] rgbaColor=CssUtils.parseRgbaColor(cssColorPropValue);
      Color color=new DeviceRgb(rgbaColor[0],rgbaColor[1],rgbaColor[2]);
      float opacity=rgbaColor[3];
      transparentColor=new TransparentColor(color,opacity);
    }
 else {
      transparentColor=new TransparentColor(Color.BLACK,0f);
    }
    element.setProperty(Property.FONT_COLOR,transparentColor);
  }
  String direction=cssProps.get(CssConstants.DIRECTION);
  if (CssConstants.RTL.equals(direction)) {
    element.setProperty(Property.BASE_DIRECTION,BaseDirection.RIGHT_TO_LEFT);
    element.setProperty(Property.TEXT_ALIGNMENT,TextAlignment.RIGHT);
  }
 else   if (CssConstants.LTR.equals(direction)) {
    element.setProperty(Property.BASE_DIRECTION,BaseDirection.LEFT_TO_RIGHT);
    element.setProperty(Property.TEXT_ALIGNMENT,TextAlignment.LEFT);
  }
  if (stylesContainer instanceof IElementNode && ((IElementNode)stylesContainer).parentNode() instanceof IElementNode && CssConstants.RTL.equals(((IElementNode)((IElementNode)stylesContainer).parentNode()).getStyles().get(CssConstants.DIRECTION))) {
    element.setProperty(Property.HORIZONTAL_ALIGNMENT,HorizontalAlignment.RIGHT);
  }
  String align=cssProps.get(CssConstants.TEXT_ALIGN);
  if (CssConstants.LEFT.equals(align)) {
    element.setProperty(Property.TEXT_ALIGNMENT,TextAlignment.LEFT);
  }
 else   if (CssConstants.RIGHT.equals(align)) {
    element.setProperty(Property.TEXT_ALIGNMENT,TextAlignment.RIGHT);
  }
 else   if (CssConstants.CENTER.equals(align)) {
    element.setProperty(Property.TEXT_ALIGNMENT,TextAlignment.CENTER);
  }
 else   if (CssConstants.JUSTIFY.equals(align)) {
    element.setProperty(Property.TEXT_ALIGNMENT,TextAlignment.JUSTIFIED);
    element.setProperty(Property.SPACING_RATIO,1f);
  }
  String textDecorationProp=cssProps.get(CssConstants.TEXT_DECORATION);
  if (textDecorationProp != null) {
    String[] textDecorations=textDecorationProp.split(""String_Node_Str"");
    List<Underline> underlineList=new ArrayList<>();
    for (    String textDecoration : textDecorations) {
      if (CssConstants.BLINK.equals(textDecoration)) {
        logger.error(LogMessageConstant.TEXT_DECORATION_BLINK_NOT_SUPPORTED);
      }
 else       if (CssConstants.LINE_THROUGH.equals(textDecoration)) {
        underlineList.add(new Underline(null,.75f,0,0,1 / 4f,PdfCanvasConstants.LineCapStyle.BUTT));
      }
 else       if (CssConstants.OVERLINE.equals(textDecoration)) {
        underlineList.add(new Underline(null,.75f,0,0,9 / 10f,PdfCanvasConstants.LineCapStyle.BUTT));
      }
 else       if (CssConstants.UNDERLINE.equals(textDecoration)) {
        underlineList.add(new Underline(null,.75f,0,0,-1 / 10f,PdfCanvasConstants.LineCapStyle.BUTT));
      }
 else       if (CssConstants.NONE.equals(textDecoration)) {
        underlineList=null;
        break;
      }
    }
    element.setProperty(Property.UNDERLINE,underlineList);
  }
  String textIndent=cssProps.get(CssConstants.TEXT_INDENT);
  if (textIndent != null) {
    UnitValue textIndentValue=CssUtils.parseLengthValueToPt(textIndent,em,rem);
    if (textIndentValue != null) {
      if (textIndentValue.isPointValue()) {
        element.setProperty(Property.FIRST_LINE_INDENT,textIndentValue.getValue());
      }
 else {
        logger.error(MessageFormat.format(LogMessageConstant.CSS_PROPERTY_IN_PERCENTS_NOT_SUPPORTED,CssConstants.TEXT_INDENT));
      }
    }
  }
  String letterSpacing=cssProps.get(CssConstants.LETTER_SPACING);
  if (letterSpacing != null && !letterSpacing.equals(CssConstants.NORMAL)) {
    UnitValue letterSpacingValue=CssUtils.parseLengthValueToPt(letterSpacing,em,rem);
    if (letterSpacingValue.isPointValue()) {
      element.setProperty(Property.CHARACTER_SPACING,letterSpacingValue.getValue());
    }
 else {
    }
  }
  String wordSpacing=cssProps.get(CssConstants.WORD_SPACING);
  if (wordSpacing != null) {
    UnitValue wordSpacingValue=CssUtils.parseLengthValueToPt(wordSpacing,em,rem);
    if (wordSpacingValue != null) {
      if (wordSpacingValue.isPointValue()) {
        element.setProperty(Property.WORD_SPACING,wordSpacingValue.getValue());
      }
 else {
      }
    }
  }
  String lineHeight=cssProps.get(CssConstants.LINE_HEIGHT);
  if (lineHeight != null && !CssConstants.NORMAL.equals(lineHeight)) {
    if (CssUtils.isNumericValue(lineHeight)) {
      Float mult=CssUtils.parseFloat(lineHeight);
      if (mult != null) {
        element.setProperty(Property.LEADING,new Leading(Leading.MULTIPLIED,(float)mult));
      }
    }
 else {
      UnitValue lineHeightValue=CssUtils.parseLengthValueToPt(lineHeight,em,rem);
      if (lineHeightValue != null && lineHeightValue.isPointValue()) {
        element.setProperty(Property.LEADING,new Leading(Leading.FIXED,lineHeightValue.getValue()));
      }
 else       if (lineHeightValue != null) {
        element.setProperty(Property.LEADING,new Leading(Leading.MULTIPLIED,lineHeightValue.getValue() / 100));
      }
    }
  }
 else {
    element.setProperty(Property.LEADING,new Leading(Leading.MULTIPLIED,1.2f));
  }
}"
39498,"private boolean matches(INode element,int lastSelectorItemInd){
  if (!(element instanceof IElementNode)) {
    return false;
  }
  if (lastSelectorItemInd < 0) {
    return true;
  }
  boolean isPseudoElement=element instanceof CssPseudoElementNode;
  for (int i=lastSelectorItemInd; i >= 0; i--) {
    if (isPseudoElement && i < lastSelectorItemInd) {
      element=element.parentNode();
      isPseudoElement=false;
    }
    ICssSelectorItem currentItem=selectorItems.get(i);
    if (currentItem instanceof CssSeparatorSelectorItem) {
      char separator=((CssSeparatorSelectorItem)currentItem).getSeparator();
switch (separator) {
case '>':
        return matches(element.parentNode(),i - 1);
case ' ':
{
        INode parent=element.parentNode();
        while (parent != null) {
          boolean parentMatches=matches(parent,i - 1);
          if (parentMatches) {
            return true;
          }
 else {
            parent=parent.parentNode();
          }
        }
        return false;
      }
case '~':
{
      INode parent=element.parentNode();
      if (parent != null) {
        int indexOfElement=parent.childNodes().indexOf(element);
        for (int j=indexOfElement - 1; j >= 0; j--) {
          if (matches(parent.childNodes().get(j),i - 1)) {
            return true;
          }
        }
      }
      return false;
    }
case '+':
{
    INode parent=element.parentNode();
    if (parent != null) {
      int indexOfElement=parent.childNodes().indexOf(element);
      return indexOfElement > 0 && matches(parent.childNodes().get(indexOfElement - 1),i - 1);
    }
    return false;
  }
default :
return false;
}
}
 else {
if (!currentItem.matches(element)) {
return false;
}
}
}
return true;
}","private boolean matches(INode element,int lastSelectorItemInd){
  if (!(element instanceof IElementNode)) {
    return false;
  }
  if (lastSelectorItemInd < 0) {
    return true;
  }
  boolean isPseudoElement=element instanceof CssPseudoElementNode;
  for (int i=lastSelectorItemInd; i >= 0; i--) {
    if (isPseudoElement && i < lastSelectorItemInd) {
      element=element.parentNode();
      isPseudoElement=false;
    }
    ICssSelectorItem currentItem=selectorItems.get(i);
    if (currentItem instanceof CssSeparatorSelectorItem) {
      char separator=((CssSeparatorSelectorItem)currentItem).getSeparator();
switch (separator) {
case '>':
        return matches(element.parentNode(),i - 1);
case ' ':
{
        INode parent=element.parentNode();
        while (parent != null) {
          boolean parentMatches=matches(parent,i - 1);
          if (parentMatches) {
            return true;
          }
 else {
            parent=parent.parentNode();
          }
        }
        return false;
      }
case '~':
{
      INode parent=element.parentNode();
      if (parent != null) {
        int indexOfElement=parent.childNodes().indexOf(element);
        for (int j=indexOfElement - 1; j >= 0; j--) {
          if (matches(parent.childNodes().get(j),i - 1)) {
            return true;
          }
        }
      }
      return false;
    }
case '+':
{
    INode parent=element.parentNode();
    if (parent != null) {
      int indexOfElement=parent.childNodes().indexOf(element);
      INode previousElement=null;
      for (int j=indexOfElement - 1; j >= 0; j--)       if (parent.childNodes().get(j) instanceof IElementNode) {
        previousElement=parent.childNodes().get(j);
        break;
      }
      if (previousElement != null)       return indexOfElement > 0 && matches(previousElement,i - 1);
    }
    return false;
  }
default :
return false;
}
}
 else {
if (!currentItem.matches(element)) {
return false;
}
}
}
return true;
}"
39499,"private boolean resolveNthChild(INode node,List<INode> children){
  if (arguments.matches(""String_Node_Str"")) {
    int a, b;
    boolean bIsPositive=true;
    if (arguments.matches(""String_Node_Str"")) {
      a=2;
      b=arguments.matches(""String_Node_Str"") ? 1 : 0;
    }
 else {
      int indexOfN=arguments.indexOf('n');
      if (indexOfN == -1) {
        a=children.size();
        b=Integer.valueOf(arguments);
      }
 else {
        a=Integer.valueOf(arguments.substring(0,indexOfN).trim());
        String[] bParticle=arguments.substring(indexOfN + 1).trim().split(""String_Node_Str"");
        bIsPositive=bParticle[0].equals(""String_Node_Str"") ? true : false;
        b=Integer.valueOf(bParticle[1]);
      }
    }
    if (bIsPositive)     return (children.indexOf(node) + 1) % a == b;
 else     return (children.indexOf(node) + 1) % a == a - b;
  }
 else   return false;
}","private boolean resolveNthChild(INode node,List<INode> children){
  if (!children.contains(node))   return false;
  if (this.nthChildA > 0) {
    int temp=children.indexOf(node) + 1 - this.nthChildB;
    return temp >= 0 ? temp % this.nthChildA == 0 : false;
  }
 else   if (this.nthChildA < 0) {
    int temp=children.indexOf(node) + 1 - this.nthChildA;
    return temp <= 0 ? temp % this.nthChildA == 0 : false;
  }
 else   return (children.indexOf(node) + 1) - this.nthChildB == 0;
}"
39500,"private List<INode> getAllChildren(INode child){
  INode parentElement=child.parentNode();
  List<INode> childrenUnmodifiable=parentElement.childNodes();
  List<INode> children=new ArrayList<INode>(childrenUnmodifiable.size());
  for (  INode iNode : childrenUnmodifiable) {
    if (iNode instanceof IElementNode)     children.add(iNode);
  }
  return children;
}","private List<INode> getAllChildren(INode child){
  INode parentElement=child.parentNode();
  if (parentElement != null) {
    List<INode> childrenUnmodifiable=parentElement.childNodes();
    List<INode> children=new ArrayList<INode>(childrenUnmodifiable.size());
    for (    INode iNode : childrenUnmodifiable) {
      if (iNode instanceof IElementNode)       children.add(iNode);
    }
    return children;
  }
  return new ArrayList<INode>();
}"
39501,"public CssPseudoClassSelectorItem(String pseudoClass){
  int indexOfParentheses=pseudoClass.indexOf('(');
  if (indexOfParentheses == -1) {
    this.pseudoClass=pseudoClass;
    this.arguments=null;
  }
 else {
    this.pseudoClass=pseudoClass.substring(0,indexOfParentheses);
    this.arguments=pseudoClass.substring(indexOfParentheses + 1,pseudoClass.length() - 1).toLowerCase();
  }
}","public CssPseudoClassSelectorItem(String pseudoClass){
  int indexOfParentheses=pseudoClass.indexOf('(');
  if (indexOfParentheses == -1) {
    this.pseudoClass=pseudoClass;
    this.arguments=""String_Node_Str"";
  }
 else {
    this.pseudoClass=pseudoClass.substring(0,indexOfParentheses);
    this.arguments=pseudoClass.substring(indexOfParentheses + 1,pseudoClass.length() - 1).trim();
    int[] nthChildArguments=getNthChildArguments();
    nthChildA=nthChildArguments[0];
    nthChildB=nthChildArguments[1];
  }
}"
39502,"@Override public String toString(){
  return ""String_Node_Str"" + pseudoClass + (arguments != null ? new String(""String_Node_Str"" + arguments + ""String_Node_Str"") : ""String_Node_Str"");
}","@Override public String toString(){
  return ""String_Node_Str"" + pseudoClass + (!arguments.isEmpty() ? new String(""String_Node_Str"" + arguments + ""String_Node_Str"") : ""String_Node_Str"");
}"
39503,"private void setAltText(String altText){
  getAccessibilityProperties().setAlternateDescription(altText);
}","void setAltText(String altText){
  getAccessibilityProperties().setAlternateDescription(altText);
}"
39504,"public static List<CssDeclaration> parsePropertyDeclarations(String propertiesStr){
  List<CssDeclaration> declarations=new ArrayList<>();
  int pos=getSemicolonPosition(propertiesStr);
  while (pos != -1) {
    String[] propertySplit=splitCssProperty(propertiesStr.substring(0,pos));
    if (propertySplit != null) {
      declarations.add(new CssDeclaration(propertySplit[0],propertySplit[1]));
    }
    propertiesStr=propertiesStr.substring(pos + 1);
    pos=getSemicolonPosition(propertiesStr);
  }
  if (!propertiesStr.replaceAll(""String_Node_Str"",""String_Node_Str"").isEmpty()) {
    String[] propertySplit=splitCssProperty(propertiesStr);
    if (propertySplit != null) {
      declarations.add(new CssDeclaration(propertySplit[0],propertySplit[1]));
    }
    return declarations;
  }
  return declarations;
}","public static List<CssDeclaration> parsePropertyDeclarations(String propertiesStr){
  List<CssDeclaration> declarations=new ArrayList<>();
  int pos=getSemicolonPosition(propertiesStr,0);
  while (pos != -1) {
    String[] propertySplit=splitCssProperty(propertiesStr.substring(0,pos));
    if (propertySplit != null) {
      declarations.add(new CssDeclaration(propertySplit[0],propertySplit[1]));
    }
    propertiesStr=propertiesStr.substring(pos + 1);
    pos=getSemicolonPosition(propertiesStr,0);
  }
  if (!propertiesStr.replaceAll(""String_Node_Str"",""String_Node_Str"").isEmpty()) {
    String[] propertySplit=splitCssProperty(propertiesStr);
    if (propertySplit != null) {
      declarations.add(new CssDeclaration(propertySplit[0],propertySplit[1]));
    }
    return declarations;
  }
  return declarations;
}"
39505,"private static int getSemicolonPosition(String propertiesStr){
  int semiColonPos=propertiesStr.indexOf(""String_Node_Str"");
  int openedBracketPos=propertiesStr.indexOf(""String_Node_Str"");
  int closedBracketPos=propertiesStr.indexOf(""String_Node_Str"");
  if (semiColonPos != -1 && semiColonPos > openedBracketPos && semiColonPos < closedBracketPos) {
    int pos=getSemicolonPosition(propertiesStr.substring(semiColonPos + 1)) + 1;
    if (pos > 0) {
      semiColonPos+=getSemicolonPosition(propertiesStr.substring(semiColonPos + 1)) + 1;
    }
 else {
      semiColonPos=-1;
    }
  }
  return semiColonPos;
}","private static int getSemicolonPosition(String propertiesStr,int fromIndex){
  int semiColonPos=propertiesStr.indexOf(""String_Node_Str"",fromIndex);
  int closedBracketPos=propertiesStr.indexOf(""String_Node_Str"",semiColonPos + 1);
  int openedBracketPos=propertiesStr.indexOf(""String_Node_Str"",fromIndex);
  if (semiColonPos != -1 && openedBracketPos < semiColonPos && closedBracketPos > 0) {
    int nextOpenedBracketPos=openedBracketPos;
    do {
      openedBracketPos=nextOpenedBracketPos;
      nextOpenedBracketPos=propertiesStr.indexOf(""String_Node_Str"",openedBracketPos + 1);
    }
 while (nextOpenedBracketPos < closedBracketPos && nextOpenedBracketPos > 0);
  }
  if (semiColonPos != -1 && semiColonPos > openedBracketPos && semiColonPos < closedBracketPos) {
    return getSemicolonPosition(propertiesStr,closedBracketPos + 1);
  }
  return semiColonPos;
}"
39506,"private void addCellToTable(Cell cell,List<List<CellWrapper>> table,RowColHelper tableRowShift){
  int col=tableRowShift.moveToNextEmptyCol();
  tableRowShift.updateCurrentPosition(cell.getColspan(),cell.getRowspan());
  List<CellWrapper> currentRow=table.get(table.size() - 1);
  currentRow.add(new CellWrapper(col,cell));
  numberOfColumns=Math.max(numberOfColumns,currentRow.size());
}","private void addCellToTable(Cell cell,List<List<CellWrapper>> table,RowColHelper tableRowShift){
  int col=tableRowShift.moveToNextEmptyCol();
  tableRowShift.updateCurrentPosition(cell.getColspan(),cell.getRowspan());
  List<CellWrapper> currentRow=table.get(table.size() - 1);
  currentRow.add(new CellWrapper(col,cell));
  numberOfColumns=Math.max(numberOfColumns,col + cell.getColspan());
}"
39507,"private UnitValue[] getColWidths(WaitingColgroupsHelper colgroups){
  UnitValue[] colWidths=new UnitValue[numberOfColumns];
  if (colgroups == null) {
    for (int i=0; i < numberOfColumns; i++) {
      colWidths[i]=UnitValue.createPointValue(-1);
    }
  }
 else {
    for (int i=0; i < numberOfColumns; i++) {
      colWidths[i]=colgroups.getColWraper(i) != null ? colgroups.getColWraper(i).getWidth() : UnitValue.createPointValue(-1);
    }
  }
  return colWidths;
}","private UnitValue[] getColWidths(WaitingColgroupsHelper colgroups){
  UnitValue[] colWidths=new UnitValue[numberOfColumns];
  if (colgroups == null) {
    for (int i=0; i < numberOfColumns; i++) {
      colWidths[i]=null;
    }
  }
 else {
    for (int i=0; i < numberOfColumns; i++) {
      colWidths[i]=colgroups.getColWraper(i) != null ? colgroups.getColWraper(i).getWidth() : null;
    }
  }
  return colWidths;
}"
39508,"public CellWrapper(int col,Cell cell){
  this.col=col;
  this.cell=cell;
}","CellWrapper(int col,Cell cell){
  this.col=col;
  this.cell=cell;
}"
39509,"@Override public List<CssDeclaration> resolveShorthand(String shorthandExpression){
  String widthPropName=MessageFormat.format(_0_WIDTH,getPrefix());
  String stylePropName=MessageFormat.format(_0_STYLE,getPrefix());
  String colorPropName=MessageFormat.format(_0_COLOR,getPrefix());
  if (CssConstants.INITIAL.equals(shorthandExpression) || CssConstants.INHERIT.equals(shorthandExpression)) {
    return Arrays.asList(new CssDeclaration(widthPropName,shorthandExpression),new CssDeclaration(stylePropName,shorthandExpression),new CssDeclaration(colorPropName,shorthandExpression));
  }
  String[] props=shorthandExpression.split(""String_Node_Str"");
  String borderColorValue=null;
  String borderStyleValue=null;
  String borderWidthValue=null;
  for (  String value : props) {
    if (CssConstants.BORDER_WIDTH_VALUES.contains(value) || CssUtils.isNumericValue(value) || CssUtils.isMetricValue(value)) {
      borderWidthValue=value;
    }
 else     if (CssConstants.BORDER_STYLE_VALUES.contains(value)) {
      borderStyleValue=value;
    }
 else     if (CssUtils.isColorProperty(value)) {
      borderColorValue=value;
    }
  }
  List<CssDeclaration> resolvedDecl=new ArrayList<>();
  resolvedDecl.add(new CssDeclaration(widthPropName,borderWidthValue == null ? CssConstants.INITIAL : borderWidthValue));
  resolvedDecl.add(new CssDeclaration(stylePropName,borderStyleValue == null ? CssConstants.INITIAL : borderStyleValue));
  resolvedDecl.add(new CssDeclaration(colorPropName,borderColorValue == null ? CssConstants.INITIAL : borderColorValue));
  return resolvedDecl;
}","@Override public List<CssDeclaration> resolveShorthand(String shorthandExpression){
  String widthPropName=MessageFormat.format(_0_WIDTH,getPrefix());
  String stylePropName=MessageFormat.format(_0_STYLE,getPrefix());
  String colorPropName=MessageFormat.format(_0_COLOR,getPrefix());
  if (CssConstants.INITIAL.equals(shorthandExpression) || CssConstants.INHERIT.equals(shorthandExpression)) {
    return Arrays.asList(new CssDeclaration(widthPropName,shorthandExpression),new CssDeclaration(stylePropName,shorthandExpression),new CssDeclaration(colorPropName,shorthandExpression));
  }
  String[] props=shorthandExpression.split(""String_Node_Str"");
  String borderColorValue=null;
  String borderStyleValue=null;
  String borderWidthValue=null;
  for (  String value : props) {
    if (CssConstants.BORDER_WIDTH_VALUES.contains(value) || CssUtils.isNumericValue(value) || CssUtils.isMetricValue(value)|| CssUtils.isRelativeValue(value)) {
      borderWidthValue=value;
    }
 else     if (CssConstants.BORDER_STYLE_VALUES.contains(value)) {
      borderStyleValue=value;
    }
 else     if (CssUtils.isColorProperty(value)) {
      borderColorValue=value;
    }
  }
  List<CssDeclaration> resolvedDecl=new ArrayList<>();
  resolvedDecl.add(new CssDeclaration(widthPropName,borderWidthValue == null ? CssConstants.INITIAL : borderWidthValue));
  resolvedDecl.add(new CssDeclaration(stylePropName,borderStyleValue == null ? CssConstants.INITIAL : borderStyleValue));
  resolvedDecl.add(new CssDeclaration(colorPropName,borderColorValue == null ? CssConstants.INITIAL : borderColorValue));
  return resolvedDecl;
}"
39510,"@Override public List<CssDeclaration> resolveShorthand(String shorthandExpression){
  if (UNSUPPORTED_VALUES_OF_FONT_SHORTHAND.contains(shorthandExpression)) {
    Logger logger=LoggerFactory.getLogger(FontShorthandResolver.class);
    logger.error(MessageFormat.format(""String_Node_Str"",shorthandExpression));
  }
  if (CssConstants.INITIAL.equals(shorthandExpression) || CssConstants.INHERIT.equals(shorthandExpression)) {
    return Arrays.asList(new CssDeclaration(CssConstants.FONT_STYLE,shorthandExpression),new CssDeclaration(CssConstants.FONT_VARIANT,shorthandExpression),new CssDeclaration(CssConstants.FONT_WEIGHT,shorthandExpression),new CssDeclaration(CssConstants.FONT_SIZE,shorthandExpression),new CssDeclaration(CssConstants.LINE_HEIGHT,shorthandExpression),new CssDeclaration(CssConstants.FONT_FAMILY,shorthandExpression));
  }
  String fontStyleValue=null;
  String fontVariantValue=null;
  String fontWeightValue=null;
  String fontSizeValue=null;
  String lineHeightValue=null;
  String fontFamilyValue=null;
  List<String> properties=getFontProperties(shorthandExpression.replaceAll(""String_Node_Str"",""String_Node_Str""));
  for (  String value : properties) {
    int slashSymbolIndex=value.indexOf('/');
    if (CssConstants.ITALIC.equals(value) || CssConstants.OBLIQUE.equals(value)) {
      fontStyleValue=value;
    }
 else     if (CssConstants.SMALL_CAPS.equals(value)) {
      fontVariantValue=value;
    }
 else     if (FONT_WEIGHT_NOT_DEFAULT_VALUES.contains(value)) {
      fontWeightValue=value;
    }
 else     if (slashSymbolIndex > 0) {
      fontSizeValue=value.substring(0,slashSymbolIndex);
      lineHeightValue=value.substring(slashSymbolIndex + 1,value.length());
    }
 else     if (FONT_SIZE_VALUES.contains(value) || CssUtils.isMetricValue(value) || CssUtils.isNumericValue(value)) {
      fontSizeValue=value;
    }
 else {
      fontFamilyValue=value;
    }
  }
  List<CssDeclaration> cssDeclarations=Arrays.asList(new CssDeclaration(CssConstants.FONT_STYLE,fontStyleValue == null ? CssConstants.INITIAL : fontStyleValue),new CssDeclaration(CssConstants.FONT_VARIANT,fontVariantValue == null ? CssConstants.INITIAL : fontVariantValue),new CssDeclaration(CssConstants.FONT_WEIGHT,fontWeightValue == null ? CssConstants.INITIAL : fontWeightValue),new CssDeclaration(CssConstants.FONT_SIZE,fontSizeValue == null ? CssConstants.INITIAL : fontSizeValue),new CssDeclaration(CssConstants.LINE_HEIGHT,lineHeightValue == null ? CssConstants.INITIAL : lineHeightValue),new CssDeclaration(CssConstants.FONT_FAMILY,fontFamilyValue == null ? CssConstants.INITIAL : fontFamilyValue));
  return cssDeclarations;
}","@Override public List<CssDeclaration> resolveShorthand(String shorthandExpression){
  if (UNSUPPORTED_VALUES_OF_FONT_SHORTHAND.contains(shorthandExpression)) {
    Logger logger=LoggerFactory.getLogger(FontShorthandResolver.class);
    logger.error(MessageFormat.format(""String_Node_Str"",shorthandExpression));
  }
  if (CssConstants.INITIAL.equals(shorthandExpression) || CssConstants.INHERIT.equals(shorthandExpression)) {
    return Arrays.asList(new CssDeclaration(CssConstants.FONT_STYLE,shorthandExpression),new CssDeclaration(CssConstants.FONT_VARIANT,shorthandExpression),new CssDeclaration(CssConstants.FONT_WEIGHT,shorthandExpression),new CssDeclaration(CssConstants.FONT_SIZE,shorthandExpression),new CssDeclaration(CssConstants.LINE_HEIGHT,shorthandExpression),new CssDeclaration(CssConstants.FONT_FAMILY,shorthandExpression));
  }
  String fontStyleValue=null;
  String fontVariantValue=null;
  String fontWeightValue=null;
  String fontSizeValue=null;
  String lineHeightValue=null;
  String fontFamilyValue=null;
  List<String> properties=getFontProperties(shorthandExpression.replaceAll(""String_Node_Str"",""String_Node_Str""));
  for (  String value : properties) {
    int slashSymbolIndex=value.indexOf('/');
    if (CssConstants.ITALIC.equals(value) || CssConstants.OBLIQUE.equals(value)) {
      fontStyleValue=value;
    }
 else     if (CssConstants.SMALL_CAPS.equals(value)) {
      fontVariantValue=value;
    }
 else     if (FONT_WEIGHT_NOT_DEFAULT_VALUES.contains(value)) {
      fontWeightValue=value;
    }
 else     if (slashSymbolIndex > 0) {
      fontSizeValue=value.substring(0,slashSymbolIndex);
      lineHeightValue=value.substring(slashSymbolIndex + 1,value.length());
    }
 else     if (FONT_SIZE_VALUES.contains(value) || CssUtils.isMetricValue(value) || CssUtils.isNumericValue(value)|| CssUtils.isRelativeValue(value)) {
      fontSizeValue=value;
    }
 else {
      fontFamilyValue=value;
    }
  }
  List<CssDeclaration> cssDeclarations=Arrays.asList(new CssDeclaration(CssConstants.FONT_STYLE,fontStyleValue == null ? CssConstants.INITIAL : fontStyleValue),new CssDeclaration(CssConstants.FONT_VARIANT,fontVariantValue == null ? CssConstants.INITIAL : fontVariantValue),new CssDeclaration(CssConstants.FONT_WEIGHT,fontWeightValue == null ? CssConstants.INITIAL : fontWeightValue),new CssDeclaration(CssConstants.FONT_SIZE,fontSizeValue == null ? CssConstants.INITIAL : fontSizeValue),new CssDeclaration(CssConstants.LINE_HEIGHT,lineHeightValue == null ? CssConstants.INITIAL : lineHeightValue),new CssDeclaration(CssConstants.FONT_FAMILY,fontFamilyValue == null ? CssConstants.INITIAL : fontFamilyValue));
  return cssDeclarations;
}"
39511,"@Test public void validateMetricValue(){
  assertEquals(true,CssUtils.isMetricValue(""String_Node_Str""));
  assertEquals(true,CssUtils.isMetricValue(""String_Node_Str""));
  assertEquals(true,CssUtils.isMetricValue(""String_Node_Str""));
  assertEquals(true,CssUtils.isMetricValue(""String_Node_Str""));
  assertEquals(true,CssUtils.isMetricValue(""String_Node_Str""));
  assertEquals(false,CssUtils.isMetricValue(""String_Node_Str""));
  assertEquals(false,CssUtils.isMetricValue(""String_Node_Str""));
  assertEquals(true,CssUtils.isMetricValue(""String_Node_Str""));
  assertEquals(false,CssUtils.isMetricValue(""String_Node_Str""));
  assertEquals(false,CssUtils.isMetricValue(""String_Node_Str""));
}","@Test public void validateMetricValue(){
  assertEquals(true,CssUtils.isMetricValue(""String_Node_Str""));
  assertEquals(true,CssUtils.isMetricValue(""String_Node_Str""));
  assertEquals(true,CssUtils.isMetricValue(""String_Node_Str""));
  assertEquals(true,CssUtils.isMetricValue(""String_Node_Str""));
  assertEquals(true,CssUtils.isMetricValue(""String_Node_Str""));
  assertEquals(false,CssUtils.isMetricValue(""String_Node_Str""));
  assertEquals(false,CssUtils.isMetricValue(""String_Node_Str""));
  assertEquals(false,CssUtils.isMetricValue(""String_Node_Str""));
  assertEquals(true,CssUtils.isMetricValue(""String_Node_Str""));
  assertEquals(false,CssUtils.isMetricValue(""String_Node_Str""));
  assertEquals(false,CssUtils.isMetricValue(""String_Node_Str""));
}"
39512,"public void updateCurrentPosition(int colspan,int rowspan){
  ensureRowIsStarted();
  while (lastEmptyRow.size() < currCol) {
    lastEmptyRow.add((Integer)currRow);
  }
  Integer value=(Integer)currRow + rowspan;
  if (lastEmptyRow.size() == currCol) {
    lastEmptyRow.add(value);
  }
 else {
    lastEmptyRow.set(currCol,Math.max(value,lastEmptyRow.get(currCol)));
  }
  int size=lastEmptyRow.size();
  int end=currCol + colspan;
  while (lastEmptyRow.size() < end) {
    lastEmptyRow.add(value);
  }
  for (int i=currCol; i < size; ++i) {
    lastEmptyRow.set(i,Math.max(value,lastEmptyRow.get(i)));
  }
  currCol=end;
}","public void updateCurrentPosition(int colspan,int rowspan){
  ensureRowIsStarted();
  while (lastEmptyRow.size() < currCol) {
    lastEmptyRow.add(currRow);
  }
  int value=currRow + rowspan;
  int end=currCol + colspan;
  int middle=Math.min(lastEmptyRow.size(),end);
  for (int i=currCol; i < middle; ++i) {
    lastEmptyRow.set(i,Math.max(value,lastEmptyRow.get(i)));
  }
  while (lastEmptyRow.size() < end) {
    lastEmptyRow.add(value);
  }
  currCol=end;
}"
39513,"private void applyColStyles(INode node,RowColHelper rowColHelper){
  int col;
  IElementNode element;
  for (  INode child : node.childNodes()) {
    if (child instanceof IElementNode) {
      element=(IElementNode)child;
      if (element.name().equals(TagConstants.TR)) {
        applyColStyles(element,rowColHelper);
        rowColHelper.newRow();
      }
 else       if (element.name().equals(TagConstants.TH) || element.name().equals(TagConstants.TD)) {
        Integer colspan=CssUtils.parseInteger(element.getAttribute(AttributeConstants.COLSPAN));
        Integer rowspan=CssUtils.parseInteger(element.getAttribute(AttributeConstants.ROWSPAN));
        colspan=colspan != null ? colspan : 1;
        rowspan=rowspan != null ? rowspan : 1;
        col=rowColHelper.moveToNextEmptyCol();
        if (getColWraper(col) != null && getColWraper(col).getCellCssProps() != null) {
          element.addAdditionalStyles(getColWraper(col).getCellCssProps());
        }
        rowColHelper.updateCurrentPosition(colspan,rowspan);
      }
 else {
        applyColStyles(child,rowColHelper);
      }
    }
  }
}","private void applyColStyles(INode node,RowColHelper rowColHelper){
  int col;
  IElementNode element;
  for (  INode child : node.childNodes()) {
    if (child instanceof IElementNode) {
      element=(IElementNode)child;
      if (element.name().equals(TagConstants.TR)) {
        applyColStyles(element,rowColHelper);
        rowColHelper.newRow();
      }
 else       if (element.name().equals(TagConstants.TH) || element.name().equals(TagConstants.TD)) {
        Integer colspan=CssUtils.parseInteger(element.getAttribute(AttributeConstants.COLSPAN));
        Integer rowspan=CssUtils.parseInteger(element.getAttribute(AttributeConstants.ROWSPAN));
        colspan=colspan != null ? colspan : 1;
        rowspan=rowspan != null ? rowspan : 1;
        col=rowColHelper.moveToNextEmptyCol();
        if (getColWraper(col) != null && getColWraper(col).getCellCssProps() != null) {
          element.addAdditionalStyles(getColWraper(col).getCellCssProps());
        }
        rowColHelper.updateCurrentPosition((int)colspan,(int)rowspan);
      }
 else {
        applyColStyles(child,rowColHelper);
      }
    }
  }
}"
39514,"private void finalizeColgroups(){
  int shift=0;
  shiftCol=new int[colgroups.size()];
  for (int i=0; i < colgroups.size(); ++i) {
    shiftCol[i]=shift;
    shift+=colgroups.get(i).getSpan();
  }
  maxIndex=shift - 1;
  indexToColgroupMapping=new int[shift];
  for (int i=0; i < colgroups.size(); ++i) {
    for (int j=0; j < colgroups.get(i).getSpan(); ++j) {
      indexToColgroupMapping[j + shiftCol[i]]=i;
    }
  }
}","private void finalizeColgroups(){
  int shift=0;
  shiftCol=new int[colgroups.size()];
  for (int i=0; i < colgroups.size(); ++i) {
    shiftCol[i]=shift;
    shift+=colgroups.get(i).getSpan();
  }
  maxIndex=shift - 1;
  indexToColgroupMapping=new int[shift];
  for (int i=0; i < colgroups.size(); ++i) {
    for (int j=0; j < colgroups.get(i).getSpan(); ++j) {
      indexToColgroupMapping[j + shiftCol[i]]=i;
    }
  }
  colgroups.trimToSize();
}"
39515,"public static void applyFontStyles(Map<String,String> cssProps,ProcessorContext context,IPropertyContainer element){
  if (cssProps.get(CssConstants.FONT_FAMILY) != null) {
    try {
      element.setProperty(Property.FONT,context.getFontResolver().getFont(cssProps.get(CssConstants.FONT_FAMILY)));
    }
 catch (    IOException exc) {
      logger.error(LogMessageConstant.ERROR_LOADING_FONT,exc);
    }
  }
  float em=CssUtils.parseAbsoluteLength(cssProps.get(CssConstants.FONT_SIZE));
  if (em != 0) {
    element.setProperty(Property.FONT_SIZE,em);
  }
  if (cssProps.get(CssConstants.FONT_WEIGHT) != null) {
    String fontWeight=cssProps.get(CssConstants.FONT_WEIGHT);
    if (CssConstants.BOLD.equalsIgnoreCase(fontWeight)) {
      element.setProperty(Property.BOLD_SIMULATION,true);
    }
 else     if (CssConstants.NORMAL.equalsIgnoreCase(fontWeight)) {
      element.setProperty(Property.BOLD_SIMULATION,false);
    }
  }
  if (cssProps.get(CssConstants.FONT_STYLE) != null) {
    String fontStyle=cssProps.get(CssConstants.FONT_STYLE);
    if (CssConstants.ITALIC.equalsIgnoreCase(fontStyle)) {
      element.setProperty(Property.ITALIC_SIMULATION,true);
    }
 else     if (CssConstants.ITALIC.equalsIgnoreCase(fontStyle)) {
      element.setProperty(Property.ITALIC_SIMULATION,false);
    }
  }
  if (cssProps.get(CssConstants.COLOR) != null) {
    element.setProperty(Property.FONT_COLOR,WebColors.getRGBColor(cssProps.get(CssConstants.COLOR)));
  }
  String direction=cssProps.get(CssConstants.DIRECTION);
  if (CssConstants.RTL.equals(direction)) {
    element.setProperty(Property.BASE_DIRECTION,BaseDirection.RIGHT_TO_LEFT);
    element.setProperty(Property.TEXT_ALIGNMENT,TextAlignment.RIGHT);
  }
 else   if (CssConstants.LTR.equals(direction)) {
    element.setProperty(Property.BASE_DIRECTION,BaseDirection.LEFT_TO_RIGHT);
    element.setProperty(Property.TEXT_ALIGNMENT,TextAlignment.LEFT);
  }
  String align=cssProps.get(CssConstants.TEXT_ALIGN);
  if (CssConstants.LEFT.equals(align)) {
    element.setProperty(Property.TEXT_ALIGNMENT,TextAlignment.LEFT);
  }
 else   if (CssConstants.RIGHT.equals(align)) {
    element.setProperty(Property.TEXT_ALIGNMENT,TextAlignment.RIGHT);
  }
 else   if (CssConstants.CENTER.equals(align)) {
    element.setProperty(Property.TEXT_ALIGNMENT,TextAlignment.CENTER);
  }
  String textDecorationProp=cssProps.get(CssConstants.TEXT_DECORATION);
  if (textDecorationProp != null) {
    String[] textDecorations=textDecorationProp.split(""String_Node_Str"");
    List<Underline> underlineList=new ArrayList<>();
    for (    String textDecoration : textDecorations) {
      if (CssConstants.BLINK.equals(textDecoration)) {
        logger.error(LogMessageConstant.TEXT_DECORATION_BLINK_NOT_SUPPORTED);
      }
 else       if (CssConstants.LINE_THROUGH.equals(textDecoration)) {
        underlineList.add(new Underline(null,.75f,0,0,1 / 4f,PdfCanvasConstants.LineCapStyle.BUTT));
      }
 else       if (CssConstants.OVERLINE.equals(textDecoration)) {
        underlineList.add(new Underline(null,.75f,0,0,9 / 10f,PdfCanvasConstants.LineCapStyle.BUTT));
      }
 else       if (CssConstants.UNDERLINE.equals(textDecoration)) {
        underlineList.add(new Underline(null,.75f,0,0,-1 / 10f,PdfCanvasConstants.LineCapStyle.BUTT));
      }
 else       if (CssConstants.NONE.equals(textDecoration)) {
        underlineList=null;
        break;
      }
    }
    element.setProperty(Property.UNDERLINE,underlineList);
  }
  String textIndent=cssProps.get(CssConstants.TEXT_INDENT);
  if (textIndent != null) {
    UnitValue textIndentValue=CssUtils.parseLengthValueToPt(textIndent,em);
    if (textIndentValue.isPointValue()) {
      element.setProperty(Property.FIRST_LINE_INDENT,textIndentValue.getValue());
    }
 else {
      logger.error(LogMessageConstant.TEXT_INDENT_IN_PERCENTS_IS_NOT_SUPPORTED);
    }
  }
  String letterSpacing=cssProps.get(CssConstants.LETTER_SPACING);
  if (letterSpacing != null) {
    UnitValue letterSpacingValue=CssUtils.parseLengthValueToPt(letterSpacing,em);
    if (letterSpacingValue.isPointValue()) {
      element.setProperty(Property.CHARACTER_SPACING,letterSpacingValue.getValue());
    }
 else {
    }
  }
  String wordSpacing=cssProps.get(CssConstants.WORD_SPACING);
  if (wordSpacing != null) {
    UnitValue wordSpacingValue=CssUtils.parseLengthValueToPt(wordSpacing,em);
    if (wordSpacingValue.isPointValue()) {
      element.setProperty(Property.WORD_SPACING,wordSpacingValue.getValue());
    }
 else {
    }
  }
  String lineHeight=cssProps.get(CssConstants.LINE_HEIGHT);
  if (lineHeight != null) {
    UnitValue lineHeightValue=CssUtils.parseLengthValueToPt(lineHeight,em);
    if (CssUtils.isNumericValue(lineHeight)) {
      element.setProperty(Property.LEADING,new Leading(Leading.MULTIPLIED,lineHeightValue.getValue()));
    }
 else     if (lineHeightValue.isPointValue()) {
      element.setProperty(Property.LEADING,new Leading(Leading.FIXED,lineHeightValue.getValue()));
    }
 else {
      element.setProperty(Property.LEADING,new Leading(Leading.MULTIPLIED,lineHeightValue.getValue() / 100));
    }
  }
 else {
    element.setProperty(Property.LEADING,new Leading(Leading.MULTIPLIED,1.2f));
  }
}","public static void applyFontStyles(Map<String,String> cssProps,ProcessorContext context,IPropertyContainer element){
  if (cssProps.get(CssConstants.FONT_FAMILY) != null) {
    try {
      element.setProperty(Property.FONT,context.getFontResolver().getFont(cssProps.get(CssConstants.FONT_FAMILY)));
    }
 catch (    IOException exc) {
      logger.error(LogMessageConstant.ERROR_LOADING_FONT,exc);
    }
  }
  float em=CssUtils.parseAbsoluteLength(cssProps.get(CssConstants.FONT_SIZE));
  if (em != 0) {
    element.setProperty(Property.FONT_SIZE,em);
  }
  if (cssProps.get(CssConstants.FONT_WEIGHT) != null) {
    String fontWeight=cssProps.get(CssConstants.FONT_WEIGHT);
    if (CssConstants.BOLD.equalsIgnoreCase(fontWeight)) {
      element.setProperty(Property.BOLD_SIMULATION,true);
    }
 else     if (CssConstants.NORMAL.equalsIgnoreCase(fontWeight)) {
      element.setProperty(Property.BOLD_SIMULATION,false);
    }
  }
  if (cssProps.get(CssConstants.FONT_STYLE) != null) {
    String fontStyle=cssProps.get(CssConstants.FONT_STYLE);
    if (CssConstants.ITALIC.equalsIgnoreCase(fontStyle)) {
      element.setProperty(Property.ITALIC_SIMULATION,true);
    }
 else     if (CssConstants.NORMAL.equalsIgnoreCase(fontStyle)) {
      element.setProperty(Property.ITALIC_SIMULATION,false);
    }
  }
  if (cssProps.get(CssConstants.COLOR) != null) {
    element.setProperty(Property.FONT_COLOR,WebColors.getRGBColor(cssProps.get(CssConstants.COLOR)));
  }
  String direction=cssProps.get(CssConstants.DIRECTION);
  if (CssConstants.RTL.equals(direction)) {
    element.setProperty(Property.BASE_DIRECTION,BaseDirection.RIGHT_TO_LEFT);
    element.setProperty(Property.TEXT_ALIGNMENT,TextAlignment.RIGHT);
  }
 else   if (CssConstants.LTR.equals(direction)) {
    element.setProperty(Property.BASE_DIRECTION,BaseDirection.LEFT_TO_RIGHT);
    element.setProperty(Property.TEXT_ALIGNMENT,TextAlignment.LEFT);
  }
  String align=cssProps.get(CssConstants.TEXT_ALIGN);
  if (CssConstants.LEFT.equals(align)) {
    element.setProperty(Property.TEXT_ALIGNMENT,TextAlignment.LEFT);
  }
 else   if (CssConstants.RIGHT.equals(align)) {
    element.setProperty(Property.TEXT_ALIGNMENT,TextAlignment.RIGHT);
  }
 else   if (CssConstants.CENTER.equals(align)) {
    element.setProperty(Property.TEXT_ALIGNMENT,TextAlignment.CENTER);
  }
  String textDecorationProp=cssProps.get(CssConstants.TEXT_DECORATION);
  if (textDecorationProp != null) {
    String[] textDecorations=textDecorationProp.split(""String_Node_Str"");
    List<Underline> underlineList=new ArrayList<>();
    for (    String textDecoration : textDecorations) {
      if (CssConstants.BLINK.equals(textDecoration)) {
        logger.error(LogMessageConstant.TEXT_DECORATION_BLINK_NOT_SUPPORTED);
      }
 else       if (CssConstants.LINE_THROUGH.equals(textDecoration)) {
        underlineList.add(new Underline(null,.75f,0,0,1 / 4f,PdfCanvasConstants.LineCapStyle.BUTT));
      }
 else       if (CssConstants.OVERLINE.equals(textDecoration)) {
        underlineList.add(new Underline(null,.75f,0,0,9 / 10f,PdfCanvasConstants.LineCapStyle.BUTT));
      }
 else       if (CssConstants.UNDERLINE.equals(textDecoration)) {
        underlineList.add(new Underline(null,.75f,0,0,-1 / 10f,PdfCanvasConstants.LineCapStyle.BUTT));
      }
 else       if (CssConstants.NONE.equals(textDecoration)) {
        underlineList=null;
        break;
      }
    }
    element.setProperty(Property.UNDERLINE,underlineList);
  }
  String textIndent=cssProps.get(CssConstants.TEXT_INDENT);
  if (textIndent != null) {
    UnitValue textIndentValue=CssUtils.parseLengthValueToPt(textIndent,em);
    if (textIndentValue.isPointValue()) {
      element.setProperty(Property.FIRST_LINE_INDENT,textIndentValue.getValue());
    }
 else {
      logger.error(LogMessageConstant.TEXT_INDENT_IN_PERCENTS_IS_NOT_SUPPORTED);
    }
  }
  String letterSpacing=cssProps.get(CssConstants.LETTER_SPACING);
  if (letterSpacing != null) {
    UnitValue letterSpacingValue=CssUtils.parseLengthValueToPt(letterSpacing,em);
    if (letterSpacingValue.isPointValue()) {
      element.setProperty(Property.CHARACTER_SPACING,letterSpacingValue.getValue());
    }
 else {
    }
  }
  String wordSpacing=cssProps.get(CssConstants.WORD_SPACING);
  if (wordSpacing != null) {
    UnitValue wordSpacingValue=CssUtils.parseLengthValueToPt(wordSpacing,em);
    if (wordSpacingValue.isPointValue()) {
      element.setProperty(Property.WORD_SPACING,wordSpacingValue.getValue());
    }
 else {
    }
  }
  String lineHeight=cssProps.get(CssConstants.LINE_HEIGHT);
  if (lineHeight != null) {
    UnitValue lineHeightValue=CssUtils.parseLengthValueToPt(lineHeight,em);
    if (CssUtils.isNumericValue(lineHeight)) {
      element.setProperty(Property.LEADING,new Leading(Leading.MULTIPLIED,lineHeightValue.getValue()));
    }
 else     if (lineHeightValue.isPointValue()) {
      element.setProperty(Property.LEADING,new Leading(Leading.FIXED,lineHeightValue.getValue()));
    }
 else {
      element.setProperty(Property.LEADING,new Leading(Leading.MULTIPLIED,lineHeightValue.getValue() / 100));
    }
  }
 else {
    element.setProperty(Property.LEADING,new Leading(Leading.MULTIPLIED,1.2f));
  }
}"
39516,"public Paragraph createLeavesContainer(){
  if (collapseSpaces) {
    waitingLeaves=TrimUtil.trimLeafElementsAndSanitize(waitingLeaves);
  }
  if (CssConstants.CAPITALIZE.equals(textTransform)) {
    capitalize(waitingLeaves);
  }
  if (waitingLeaves.size() > 0) {
    Paragraph p=createParagraphContainer();
    for (    ILeafElement leaf : waitingLeaves) {
      p.add(leaf);
    }
    return p;
  }
 else {
    return null;
  }
}","public Paragraph createLeavesContainer(){
  if (collapseSpaces) {
    waitingLeaves=TrimUtil.trimLeafElementsAndSanitize(waitingLeaves);
  }
  if (CssConstants.CAPITALIZE.equals(textTransform)) {
    capitalize(waitingLeaves);
  }
  if (waitingLeaves.size() > 0) {
    Paragraph p=createParagraphContainer();
    for (    ILeafElement leaf : waitingLeaves) {
      p.add(leaf);
    }
    if (p.getChildren().size() == 1 && p.getChildren().get(0) instanceof Image) {
      p.setMultipliedLeading(1);
    }
    return p;
  }
 else {
    return null;
  }
}"
39517,"public static List<ILeafElement> trimLeafElementsFirstAndSanitize(List<ILeafElement> leafElements){
  List<ILeafElement> waitingLeafs=new ArrayList<>(leafElements);
  while (waitingLeafs.size() > 0 && waitingLeafs.get(0) instanceof Text) {
    Text text=(Text)waitingLeafs.get(0);
    trimLeafElementFirst(text);
    if (text.getText().length() == 0) {
      waitingLeafs.remove(0);
    }
 else {
      break;
    }
  }
  int pos=0;
  while (pos < waitingLeafs.size() - 1) {
    if (waitingLeafs.get(pos) instanceof Text) {
      Text first=(Text)waitingLeafs.get(pos);
      if (first.getText().length() > 0 && isNonLineBreakSpace(first.getText().charAt(first.getText().length() - 1))) {
        while (pos + 1 < waitingLeafs.size() && waitingLeafs.get(pos + 1) instanceof Text) {
          Text second=(Text)waitingLeafs.get(pos + 1);
          if (second.getText().length() > 0 && isNonLineBreakSpace(second.getText().charAt(0))) {
            int secondPos=0;
            while (secondPos < second.getText().length() && isNonLineBreakSpace(second.getText().charAt(secondPos))) {
              secondPos++;
            }
            second.setText(second.getText().substring(secondPos));
          }
          if (second.getText().length() == 0) {
            waitingLeafs.remove(pos + 1);
          }
 else {
            break;
          }
        }
      }
    }
    pos++;
  }
  return waitingLeafs;
}","public static List<ILeafElement> trimLeafElementsFirstAndSanitize(List<ILeafElement> leafElements){
  ArrayList<ILeafElement> waitingLeafs=new ArrayList<ILeafElement>(leafElements);
  trimSubList(waitingLeafs,0,waitingLeafs.size(),false);
  int pos=0;
  while (pos < waitingLeafs.size() - 1) {
    if (waitingLeafs.get(pos) instanceof Text) {
      Text first=(Text)waitingLeafs.get(pos);
      if (first.getText().length() > 0 && isNonLineBreakSpace(first.getText().charAt(first.getText().length() - 1))) {
        trimSubList(waitingLeafs,pos + 1,waitingLeafs.size(),false);
      }
    }
    pos++;
  }
  return waitingLeafs;
}"
39518,"@Override public List<CssDeclaration> resolveShorthand(String shorthandExpression){
  if (UNSUPPORTED_VALUES_OF_FONT_SHORTHAND.contains(shorthandExpression)) {
    Logger logger=LoggerFactory.getLogger(FontShorthandResolver.class);
    logger.error(MessageFormat.format(""String_Node_Str"",shorthandExpression));
  }
  if (CssConstants.INITIAL.equals(shorthandExpression) || CssConstants.INHERIT.equals(shorthandExpression)) {
    return Arrays.asList(new CssDeclaration(CssConstants.FONT_STYLE,shorthandExpression),new CssDeclaration(CssConstants.FONT_VARIANT,shorthandExpression),new CssDeclaration(CssConstants.FONT_WEIGHT,shorthandExpression),new CssDeclaration(CssConstants.FONT_SIZE,shorthandExpression),new CssDeclaration(CssConstants.LINE_HEIGHT,shorthandExpression),new CssDeclaration(CssConstants.FONT_FAMILY,shorthandExpression));
  }
  String fontStyleValue=null;
  String fontVariantValue=null;
  String fontWeightValue=null;
  String fontSizeValue=null;
  String lineHeightValue=null;
  String fontFamilyValue=null;
  String[] props=shorthandExpression.replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  for (  String value : props) {
    int slashSymbolIndex=value.indexOf('/');
    if (CssConstants.ITALIC.equals(value) || CssConstants.OBLIQUE.equals(value)) {
      fontStyleValue=value;
    }
 else     if (CssConstants.SMALL_CAPS.equals(value)) {
      fontVariantValue=value;
    }
 else     if (FONT_WEIGHT_NOT_DEFAULT_VALUES.contains(value)) {
      fontWeightValue=value;
    }
 else     if (slashSymbolIndex > 0) {
      fontSizeValue=value.substring(0,slashSymbolIndex);
      lineHeightValue=value.substring(slashSymbolIndex + 1,value.length());
    }
 else     if (FONT_SIZE_VALUES.contains(value)) {
      fontSizeValue=value;
    }
 else {
      fontFamilyValue=value;
    }
  }
  List<CssDeclaration> cssDeclarations=Arrays.asList(new CssDeclaration(CssConstants.FONT_STYLE,fontStyleValue == null ? CssConstants.INITIAL : fontStyleValue),new CssDeclaration(CssConstants.FONT_VARIANT,fontVariantValue == null ? CssConstants.INITIAL : fontVariantValue),new CssDeclaration(CssConstants.FONT_WEIGHT,fontWeightValue == null ? CssConstants.INITIAL : fontWeightValue),new CssDeclaration(CssConstants.FONT_SIZE,fontSizeValue == null ? CssConstants.INITIAL : fontSizeValue),new CssDeclaration(CssConstants.LINE_HEIGHT,lineHeightValue == null ? CssConstants.INITIAL : lineHeightValue),new CssDeclaration(CssConstants.FONT_FAMILY,fontFamilyValue == null ? CssConstants.INITIAL : fontFamilyValue));
  return cssDeclarations;
}","@Override public List<CssDeclaration> resolveShorthand(String shorthandExpression){
  if (UNSUPPORTED_VALUES_OF_FONT_SHORTHAND.contains(shorthandExpression)) {
    Logger logger=LoggerFactory.getLogger(FontShorthandResolver.class);
    logger.error(MessageFormat.format(""String_Node_Str"",shorthandExpression));
  }
  if (CssConstants.INITIAL.equals(shorthandExpression) || CssConstants.INHERIT.equals(shorthandExpression)) {
    return Arrays.asList(new CssDeclaration(CssConstants.FONT_STYLE,shorthandExpression),new CssDeclaration(CssConstants.FONT_VARIANT,shorthandExpression),new CssDeclaration(CssConstants.FONT_WEIGHT,shorthandExpression),new CssDeclaration(CssConstants.FONT_SIZE,shorthandExpression),new CssDeclaration(CssConstants.LINE_HEIGHT,shorthandExpression),new CssDeclaration(CssConstants.FONT_FAMILY,shorthandExpression));
  }
  String fontStyleValue=null;
  String fontVariantValue=null;
  String fontWeightValue=null;
  String fontSizeValue=null;
  String lineHeightValue=null;
  String fontFamilyValue=null;
  String[] props=shorthandExpression.replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  for (  String value : props) {
    int slashSymbolIndex=value.indexOf('/');
    if (CssConstants.ITALIC.equals(value) || CssConstants.OBLIQUE.equals(value)) {
      fontStyleValue=value;
    }
 else     if (CssConstants.SMALL_CAPS.equals(value)) {
      fontVariantValue=value;
    }
 else     if (FONT_WEIGHT_NOT_DEFAULT_VALUES.contains(value)) {
      fontWeightValue=value;
    }
 else     if (slashSymbolIndex > 0) {
      fontSizeValue=value.substring(0,slashSymbolIndex);
      lineHeightValue=value.substring(slashSymbolIndex + 1,value.length());
    }
 else     if (FONT_SIZE_VALUES.contains(value) || CssUtils.isMetricValue(value) || CssUtils.isNumericValue(value)) {
      fontSizeValue=value;
    }
 else {
      fontFamilyValue=value;
    }
  }
  List<CssDeclaration> cssDeclarations=Arrays.asList(new CssDeclaration(CssConstants.FONT_STYLE,fontStyleValue == null ? CssConstants.INITIAL : fontStyleValue),new CssDeclaration(CssConstants.FONT_VARIANT,fontVariantValue == null ? CssConstants.INITIAL : fontVariantValue),new CssDeclaration(CssConstants.FONT_WEIGHT,fontWeightValue == null ? CssConstants.INITIAL : fontWeightValue),new CssDeclaration(CssConstants.FONT_SIZE,fontSizeValue == null ? CssConstants.INITIAL : fontSizeValue),new CssDeclaration(CssConstants.LINE_HEIGHT,lineHeightValue == null ? CssConstants.INITIAL : lineHeightValue),new CssDeclaration(CssConstants.FONT_FAMILY,fontFamilyValue == null ? CssConstants.INITIAL : fontFamilyValue));
  return cssDeclarations;
}"
39519,"public List<CssDeclaration> getCssDeclarations(IElement element,MediaDeviceDescription deviceDescription){
  List<CssRuleSet> ruleSets=getCssRuleSets(element,deviceDescription);
  Map<String,CssDeclaration> declarations=new HashMap<>();
  Collections.sort(ruleSets,new CssRuleSetComparator());
  for (  CssRuleSet ruleSet : ruleSets) {
    populateDeclarationsMap(ruleSet.getNormalDeclarations(),declarations);
  }
  for (  CssRuleSet ruleSet : ruleSets) {
    populateDeclarationsMap(ruleSet.getImportantDeclarations(),declarations);
  }
  return new ArrayList<>(declarations.values());
}","public List<CssDeclaration> getCssDeclarations(IElement element,MediaDeviceDescription deviceDescription){
  List<CssRuleSet> ruleSets=getCssRuleSets(element,deviceDescription);
  Map<String,CssDeclaration> declarations=new LinkedHashMap<>();
  Collections.sort(ruleSets,new CssRuleSetComparator());
  for (  CssRuleSet ruleSet : ruleSets) {
    populateDeclarationsMap(ruleSet.getNormalDeclarations(),declarations);
  }
  for (  CssRuleSet ruleSet : ruleSets) {
    populateDeclarationsMap(ruleSet.getImportantDeclarations(),declarations);
  }
  return new ArrayList<>(declarations.values());
}"
39520,"public void setOrientation(String orientation){
  this.orientation=orientation;
}","public MediaDeviceDescription setOrientation(String orientation){
  this.orientation=orientation;
  return this;
}"
39521,"public void setGrid(boolean grid){
  isGrid=grid;
}","public MediaDeviceDescription setGrid(boolean grid){
  isGrid=grid;
  return this;
}"
39522,"public int getWidth(){
  return width;
}","public float getWidth(){
  return width;
}"
39523,"public void setWidth(int width){
  this.width=width;
}","public MediaDeviceDescription setWidth(int width){
  this.width=width;
  return this;
}"
39524,"public void setHeight(int height){
  this.height=height;
}","public MediaDeviceDescription setHeight(int height){
  this.height=height;
  return this;
}"
39525,"public void setScan(String scan){
  this.scan=scan;
}","public MediaDeviceDescription setScan(String scan){
  this.scan=scan;
  return this;
}"
39526,"public void setBitsPerComponent(int bitsPerComponent){
  this.bitsPerComponent=bitsPerComponent;
}","public MediaDeviceDescription setBitsPerComponent(int bitsPerComponent){
  this.bitsPerComponent=bitsPerComponent;
  return this;
}"
39527,"public int getHeight(){
  return height;
}","public float getHeight(){
  return height;
}"
39528,"public void setMonochrome(int monochrome){
  this.monochrome=monochrome;
}","public MediaDeviceDescription setMonochrome(int monochrome){
  this.monochrome=monochrome;
  return this;
}"
39529,"public void setColorIndex(int colorIndex){
  this.colorIndex=colorIndex;
}","public MediaDeviceDescription setColorIndex(int colorIndex){
  this.colorIndex=colorIndex;
  return this;
}"
39530,"public MediaDeviceDescription(String type){
  this.type=type;
}","public MediaDeviceDescription(String type,float width,float height){
  this(type);
  this.width=width;
  this.height=height;
}"
39531,"public MediaExpression(String feature,String value){
  this.feature=feature.trim().toLowerCase();
  if (value != null) {
    this.value=value.trim().toLowerCase();
  }
  String minPref=MediaRuleConstants.MIN + ""String_Node_Str"";
  String maxPref=MediaRuleConstants.MAX + ""String_Node_Str"";
  minPrefix=feature.startsWith(minPref);
  if (minPrefix) {
    feature=feature.substring(minPref.length());
  }
  maxPrefix=feature.startsWith(maxPref);
  if (maxPrefix) {
    feature=feature.substring(maxPref.length());
  }
}","public MediaExpression(String feature,String value){
  this.feature=feature.trim().toLowerCase();
  if (value != null) {
    this.value=value.trim().toLowerCase();
  }
  String minPref=MediaRuleConstants.MIN + ""String_Node_Str"";
  String maxPref=MediaRuleConstants.MAX + ""String_Node_Str"";
  minPrefix=feature.startsWith(minPref);
  if (minPrefix) {
    this.feature=feature.substring(minPref.length());
  }
  maxPrefix=feature.startsWith(maxPref);
  if (maxPrefix) {
    this.feature=feature.substring(maxPref.length());
  }
}"
39532,"public boolean matches(MediaDeviceDescription deviceDescription){
switch (feature) {
case MediaFeature.COLOR:
{
      Integer val=CssUtils.parseInteger(value);
      if (minPrefix) {
        return val != null && deviceDescription.getBitsPerComponent() >= val;
      }
 else       if (maxPrefix) {
        return val != null && deviceDescription.getBitsPerComponent() <= val;
      }
 else {
        return val == null ? deviceDescription.getBitsPerComponent() != 0 : val == deviceDescription.getBitsPerComponent();
      }
    }
case MediaFeature.COLOR_INDEX:
{
    Integer val=CssUtils.parseInteger(value);
    if (minPrefix) {
      return val != null && deviceDescription.getColorIndex() >= val;
    }
 else     if (maxPrefix) {
      return val != null && deviceDescription.getColorIndex() <= val;
    }
 else {
      return val == null ? deviceDescription.getColorIndex() != 0 : val == deviceDescription.getColorIndex();
    }
  }
case MediaFeature.ASPECT_RATIO:
{
  int[] aspectRatio=CssUtils.parseAspectRatio(value);
  if (minPrefix) {
    return aspectRatio != null && aspectRatio[0] * deviceDescription.getHeight() >= aspectRatio[1] * deviceDescription.getWidth();
  }
 else   if (maxPrefix) {
    return aspectRatio != null && aspectRatio[0] * deviceDescription.getHeight() <= aspectRatio[1] * deviceDescription.getWidth();
  }
 else {
    return aspectRatio != null && aspectRatio[0] * deviceDescription.getHeight() == aspectRatio[1] * deviceDescription.getWidth();
  }
}
case MediaFeature.GRID:
{
Integer val=CssUtils.parseInteger(value);
return val != null && val == 0 && !deviceDescription.isGrid() || deviceDescription.isGrid();
}
case MediaFeature.SCAN:
{
return Objects.equals(value,deviceDescription.getScan());
}
case MediaFeature.ORIENTATION:
{
return Objects.equals(value,deviceDescription.getOrientation());
}
case MediaFeature.MONOCHROME:
{
Integer val=CssUtils.parseInteger(value);
if (minPrefix) {
return val != null && deviceDescription.getMonochrome() >= val;
}
 else if (maxPrefix) {
return val != null && deviceDescription.getMonochrome() <= val;
}
 else {
return val == null && deviceDescription.getMonochrome() > 0 || val == deviceDescription.getMonochrome();
}
}
default :
return false;
}
}","public boolean matches(MediaDeviceDescription deviceDescription){
switch (feature) {
case MediaFeature.COLOR:
{
      Integer val=CssUtils.parseInteger(value);
      if (minPrefix) {
        return val != null && deviceDescription.getBitsPerComponent() >= val;
      }
 else       if (maxPrefix) {
        return val != null && deviceDescription.getBitsPerComponent() <= val;
      }
 else {
        return val == null ? deviceDescription.getBitsPerComponent() != 0 : val == deviceDescription.getBitsPerComponent();
      }
    }
case MediaFeature.COLOR_INDEX:
{
    Integer val=CssUtils.parseInteger(value);
    if (minPrefix) {
      return val != null && deviceDescription.getColorIndex() >= val;
    }
 else     if (maxPrefix) {
      return val != null && deviceDescription.getColorIndex() <= val;
    }
 else {
      return val == null ? deviceDescription.getColorIndex() != 0 : val == deviceDescription.getColorIndex();
    }
  }
case MediaFeature.ASPECT_RATIO:
{
  int[] aspectRatio=CssUtils.parseAspectRatio(value);
  if (minPrefix) {
    return aspectRatio != null && aspectRatio[0] * deviceDescription.getHeight() >= aspectRatio[1] * deviceDescription.getWidth();
  }
 else   if (maxPrefix) {
    return aspectRatio != null && aspectRatio[0] * deviceDescription.getHeight() <= aspectRatio[1] * deviceDescription.getWidth();
  }
 else {
    return aspectRatio != null && aspectRatio[0] * deviceDescription.getHeight() == aspectRatio[1] * deviceDescription.getWidth();
  }
}
case MediaFeature.GRID:
{
Integer val=CssUtils.parseInteger(value);
return val != null && val == 0 && !deviceDescription.isGrid() || deviceDescription.isGrid();
}
case MediaFeature.SCAN:
{
return Objects.equals(value,deviceDescription.getScan());
}
case MediaFeature.ORIENTATION:
{
return Objects.equals(value,deviceDescription.getOrientation());
}
case MediaFeature.MONOCHROME:
{
Integer val=CssUtils.parseInteger(value);
if (minPrefix) {
return val != null && deviceDescription.getMonochrome() >= val;
}
 else if (maxPrefix) {
return val != null && deviceDescription.getMonochrome() <= val;
}
 else {
return val == null ? deviceDescription.getMonochrome() > 0 : val == deviceDescription.getMonochrome();
}
}
case MediaFeature.HEIGHT:
{
float val=CssUtils.parseAbsoluteLength(value);
if (minPrefix) {
return deviceDescription.getHeight() >= val;
}
 else if (maxPrefix) {
return deviceDescription.getHeight() <= val;
}
 else {
return deviceDescription.getHeight() > 0;
}
}
case MediaFeature.WIDTH:
{
float val=CssUtils.parseAbsoluteLength(value);
if (minPrefix) {
return deviceDescription.getWidth() >= val;
}
 else if (maxPrefix) {
return deviceDescription.getWidth() <= val;
}
 else {
return deviceDescription.getWidth() > 0;
}
}
case MediaFeature.RESOLUTION:
{
float val=CssUtils.parseResolution(value);
if (minPrefix) {
return deviceDescription.getResolution() >= val;
}
 else if (maxPrefix) {
return deviceDescription.getResolution() <= val;
}
 else {
return deviceDescription.getResolution() > 0;
}
}
default :
return false;
}
}"
39533,"private static MediaExpression parseMediaExpression(String mediaExpressionStr){
  mediaExpressionStr=mediaExpressionStr.trim();
  if (mediaExpressionStr.length() == 0) {
    return null;
  }
  int colonPos=mediaExpressionStr.indexOf(':');
  String mediaFeature;
  String value=null;
  if (colonPos == -1) {
    mediaFeature=mediaExpressionStr;
  }
 else {
    mediaFeature=mediaExpressionStr.substring(0,colonPos).trim();
    value=mediaExpressionStr.substring(colonPos).trim();
  }
  return new MediaExpression(mediaFeature,value);
}","private static MediaExpression parseMediaExpression(String mediaExpressionStr){
  mediaExpressionStr=mediaExpressionStr.trim();
  if (!mediaExpressionStr.startsWith(""String_Node_Str"") || !mediaExpressionStr.endsWith(""String_Node_Str"")) {
    return null;
  }
  mediaExpressionStr=mediaExpressionStr.substring(1,mediaExpressionStr.length() - 1);
  if (mediaExpressionStr.length() == 0) {
    return null;
  }
  int colonPos=mediaExpressionStr.indexOf(':');
  String mediaFeature;
  String value=null;
  if (colonPos == -1) {
    mediaFeature=mediaExpressionStr;
  }
 else {
    mediaFeature=mediaExpressionStr.substring(0,colonPos).trim();
    value=mediaExpressionStr.substring(colonPos + 1).trim();
  }
  return new MediaExpression(mediaFeature,value);
}"
39534,"public CssTagSelectorItem(String tagName){
  this.tagName=tagName;
  this.isUniversal=""String_Node_Str"".equals(tagName);
}","public CssTagSelectorItem(String tagName){
  this.tagName=tagName.toLowerCase();
  this.isUniversal=""String_Node_Str"".equals(tagName);
}"
39535,"private Element appendContext(Element root){
  context=root.addElement(""String_Node_Str"");
  context.addAttribute(""String_Node_Str"",MybatisXmlParser.CONTEXT_ID);
  context.addAttribute(""String_Node_Str"",MybatisXmlParser.TARGET_RUNTIME);
  return context;
}","private Element appendContext(Element root){
  context=root.addElement(""String_Node_Str"");
  context.addAttribute(""String_Node_Str"",MybatisConfigReader.DEFAULT_CONTEXT_ID);
  context.addAttribute(""String_Node_Str"",MybatisConfigReader.TARGET_RUNTIME);
  return context;
}"
39536,"private void readPomFile(){
  InputStream inputStream=null;
  try {
    inputStream=folder.openFile(""String_Node_Str"");
    pomXmlParser=new PomXmlParser(inputStream);
  }
 catch (  Exception e) {
    throw new InvalidConfigurationException(e);
  }
 finally {
    FolderUtil.closeStream(inputStream);
  }
}","private void readPomFile(){
  try (InputStream inputStream=folder.openFile(""String_Node_Str"")){
    pomXmlParser=new PomXmlParser(inputStream);
  }
 catch (  Exception e) {
    throw new InvalidConfigurationException(e);
  }
}"
39537,"private boolean mergeContext(MybatisConfigFileGenerator configFileGenerator){
  if (context == null) {
    root.add(configFileGenerator.getContext().createCopy());
    return false;
  }
  context=root.addElement(""String_Node_Str"");
  return true;
}","private boolean mergeContext(MybatisConfigFileGenerator configFileGenerator){
  if (context == null) {
    root.add(configFileGenerator.getContext().createCopy());
    return false;
  }
  context=root.addElement(""String_Node_Str"");
  context.addAttribute(""String_Node_Str"",MybatisConfigReader.DEFAULT_CONTEXT_ID);
  context.addAttribute(""String_Node_Str"",MybatisConfigReader.TARGET_RUNTIME);
  return true;
}"
39538,"public void writeJavaFiles(){
  String modelPackage=project.getModelLayerPath();
  String patternStr=""String_Node_Str"" + (modelPackage == null ? ""String_Node_Str"" : modelPackage) + ""String_Node_Str"";
  Pattern pattern=modelPackage == null ? null : Pattern.compile(patternStr);
  List<GeneratedJavaFile> list=mybatisRunner.getGeneratedJavaFiles();
  for (  GeneratedJavaFile javaFile : list) {
    String dir=javaFile.getTargetProject().replace(project.getFullPath() + ""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + javaFile.getTargetPackage();
    String filePath=dir + ""String_Node_Str"" + javaFile.getFileName();
    String content=javaFile.getFormattedContent();
    if (javaFile.getFileName().endsWith(""String_Node_Str"")) {
      project.createDir(dir + ""String_Node_Str"");
      filePath=dir + ""String_Node_Str"" + javaFile.getFileName();
      content=content.replace(""String_Node_Str"" + javaFile.getTargetPackage(),""String_Node_Str"" + javaFile.getTargetPackage() + ""String_Node_Str"");
    }
 else     if (javaFile.getFileName().endsWith(""String_Node_Str"") && pattern != null) {
      Matcher matcher=pattern.matcher(content);
      if (matcher.find()) {
        String name=matcher.group(1);
        content=content.replaceAll(patternStr,""String_Node_Str"" + modelPackage + ""String_Node_Str""+ name+ ""String_Node_Str"");
      }
    }
    project.writeFile(filePath,content);
  }
}","public void writeJavaFiles(){
  String modelPath=project.getModelLayerPath();
  String patternStr=""String_Node_Str"" + (modelPath == null ? ""String_Node_Str"" : pathToPackage(modelPath)) + ""String_Node_Str"";
  Pattern pattern=modelPath == null ? null : Pattern.compile(patternStr);
  List<GeneratedJavaFile> list=mybatisRunner.getGeneratedJavaFiles();
  for (  GeneratedJavaFile javaFile : list) {
    String dir=javaFile.getTargetProject().replace(project.getFullPath(),""String_Node_Str"") + packageToPath(javaFile.getTargetPackage());
    String filePath=dir + ""String_Node_Str"" + javaFile.getFileName();
    String content=javaFile.getFormattedContent();
    if (javaFile.getFileName().endsWith(""String_Node_Str"")) {
      project.createDir(dir + ""String_Node_Str"");
      filePath=dir + ""String_Node_Str"" + javaFile.getFileName();
      content=content.replace(""String_Node_Str"" + javaFile.getTargetPackage(),""String_Node_Str"" + javaFile.getTargetPackage() + ""String_Node_Str"");
    }
 else     if (javaFile.getFileName().endsWith(""String_Node_Str"") && pattern != null) {
      Matcher matcher=pattern.matcher(content);
      if (matcher.find()) {
        String name=matcher.group(1);
        content=content.replaceAll(patternStr,""String_Node_Str"" + pathToPackage(modelPath) + ""String_Node_Str""+ name+ ""String_Node_Str"");
      }
    }
    project.writeFile(filePath,content);
  }
}"
39539,"private void appendJavaClientGenerator(Element context){
  Element generator=context.addElement(""String_Node_Str"");
  generator.addAttribute(""String_Node_Str"",""String_Node_Str"");
  String path=project.getDaoLayerPath();
  generator.addAttribute(""String_Node_Str"",path == null ? ""String_Node_Str"" : path);
  path=project.getSourceCodeDirPath();
  generator.addAttribute(""String_Node_Str"",path == null ? ""String_Node_Str"" : path);
}","private void appendJavaClientGenerator(Element context){
  Element generator=context.addElement(""String_Node_Str"");
  generator.addAttribute(""String_Node_Str"",""String_Node_Str"");
  String path=project.getDaoLayerPath();
  generator.addAttribute(""String_Node_Str"",path == null ? ""String_Node_Str"" : pathToPackage(path));
  path=project.getSourceCodeDirPath();
  generator.addAttribute(""String_Node_Str"",path == null ? ""String_Node_Str"" : path);
}"
39540,"private void appendJavaModelGenerator(Element context){
  Element javaModelGenerator=factory.createElement(""String_Node_Str"");
  String path=project.getModelLayerPath();
  javaModelGenerator.addAttribute(""String_Node_Str"",path == null ? ""String_Node_Str"" : path);
  path=project.getSourceCodeDirPath();
  javaModelGenerator.addAttribute(""String_Node_Str"",path == null ? ""String_Node_Str"" : path);
  context.add(javaModelGenerator);
}","private void appendJavaModelGenerator(Element context){
  Element javaModelGenerator=factory.createElement(""String_Node_Str"");
  String path=project.getModelLayerPath();
  javaModelGenerator.addAttribute(""String_Node_Str"",path == null ? ""String_Node_Str"" : pathToPackage(path));
  path=project.getSourceCodeDirPath();
  javaModelGenerator.addAttribute(""String_Node_Str"",path == null ? ""String_Node_Str"" : path);
  context.add(javaModelGenerator);
}"
39541,"public BasicXmlParser(InputStream inputStream,String rootElmentTag) throws DocumentException, IOException {
  Expect.asTrue(inputStream != null && inputStream.available() <= MAX_STREAM_SIZE && inputStream.available() > 0,""String_Node_Str"");
  Expect.notNull(rootElmentTag,""String_Node_Str"");
  SAXReader saxReader=new SAXReader();
  document=saxReader.read(inputStream);
  if (document == null || document.getRootElement() == null || !rootElmentTag.equals(document.getRootElement().getName())) {
    throw new DocumentException(""String_Node_Str"");
  }
}","public BasicXmlParser(InputStream inputStream,String rootElmentTag) throws DocumentException, IOException {
  Expect.asTrue(inputStream != null && inputStream.available() <= MAX_STREAM_SIZE && inputStream.available() > 0,""String_Node_Str"");
  Expect.notNull(rootElmentTag,""String_Node_Str"");
  SAXReader saxReader=new SAXReader();
  saxReader.setValidation(false);
  document=saxReader.read(new BufferedInputStream(inputStream));
  if (document == null || document.getRootElement() == null || !rootElmentTag.equals(document.getRootElement().getName())) {
    throw new DocumentException(""String_Node_Str"");
  }
}"
39542,"private String convertImportPathToFilesystemPath(String path){
  String[] tokens=path.split(""String_Node_Str"");
  if (tokens.length != 2) {
    throw new UnsupportedProjectException(""String_Node_Str"");
  }
  List<Folder> folders=findFoldersContainingFile(tokens[1]);
  if (folders.size() != 1) {
    throw new UnsupportedProjectException(""String_Node_Str"");
  }
  Folder folder=folders.get(0);
  return project.convertToFullPath(folder.path() + ""String_Node_Str"" + tokens[1]);
}","private String convertImportPathToFilesystemPath(String path){
  String[] tokens=path.split(""String_Node_Str"");
  if (tokens.length != 2) {
    throw new UnsupportedProjectException(""String_Node_Str"" + path);
  }
  List<Folder> folders=findFoldersContainingFile(tokens[1]);
  if (folders.size() != 1) {
    throw new UnsupportedProjectException(""String_Node_Str"" + path);
  }
  Folder folder=folders.get(0);
  String filename=tokens[1];
  if (filename.indexOf(""String_Node_Str"") != -1) {
    String folderPath=tokens[1].replaceFirst(""String_Node_Str"",""String_Node_Str"");
    filename=tokens[1].replace(folderPath + ""String_Node_Str"",""String_Node_Str"");
  }
  return project.convertToFullPath(folder.path() + ""String_Node_Str"" + filename);
}"
39543,"private List<Folder> findFoldersContainingFile(final String filename){
  return project.findFolders(new FolderSelector(){
    @Override public boolean isSelected(    Folder folder){
      return folder.containsFile(filename);
    }
  }
);
}","private List<Folder> findFoldersContainingFile(final String path){
  return project.findFolders(new FolderSelector(){
    @Override public boolean isSelected(    Folder folder){
      if (path.indexOf(""String_Node_Str"") == -1) {
        return folder.containsFile(path);
      }
      String folderPath=path.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      String filename=path.replace(folderPath + ""String_Node_Str"",""String_Node_Str"");
      return folder.path().indexOf(folderPath) != -1 && folder.containsFile(filename);
    }
  }
);
}"
39544,"@Override public boolean isSelected(Folder folder){
  return folder.containsFile(filename);
}","@Override public boolean isSelected(Folder folder){
  if (path.indexOf(""String_Node_Str"") == -1) {
    return folder.containsFile(path);
  }
  String folderPath=path.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  String filename=path.replace(folderPath + ""String_Node_Str"",""String_Node_Str"");
  return folder.path().indexOf(folderPath) != -1 && folder.containsFile(filename);
}"
39545,"@Override public Object execute(ExecutionEvent event) throws ExecutionException {
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IProject project=workspace.getRoot().getProject(""String_Node_Str"");
  if (!project.exists()) {
    throw new ProjectNotFoundException();
  }
  try {
    EclipseProject eclipseProject=new EclipseProject(project);
    WebXmlParser webXmlParser=WebXmlParser.build(eclipseProject);
    PomParser pomParser=new PomParser(eclipseProject);
    SpringParser springParser=new SpringParser(eclipseProject,webXmlParser.getSpringConfigLocations());
    PropertiesParser propertiesParser=new PropertiesParser(eclipseProject,pomParser,springParser.getPropertiesFilePath());
    Builder builder=Mysql.builder();
    builder.setConnectorJarPath(eclipseProject.concatMavenResitoryPath(pomParser.dbConnectorJarRelativePath(""String_Node_Str""))).setDriverClassName(propertiesParser.getProperty(springParser.getDatabaseDriverClassName())).setUsername(propertiesParser.getProperty(springParser.getDatabaseUsername())).setPassword(propertiesParser.getProperty(springParser.getDatabasePassword())).setUrl(propertiesParser.getProperty(springParser.getDatabaseUrl()));
    Sql mysql=builder.build();
    MybatisConfigFileGenerator configFile=new MybatisConfigFileGenerator(eclipseProject,mysql);
    System.out.println(configFile.getXmlConfig());
    MybatisXmlParser mybatisXmlParser=new MybatisXmlParser(eclipseProject.getInputStream(MybatisConfigFileGenerator.CONFIG_FILENAME));
    System.out.println(mybatisXmlParser.mergeGeneratedConfigAndGetXmlString(configFile));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","@Override public Object execute(ExecutionEvent event) throws ExecutionException {
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IProject project=workspace.getRoot().getProject(""String_Node_Str"");
  if (!project.exists()) {
    throw new ProjectNotFoundException();
  }
  try {
    EclipseProject eclipseProject=new EclipseProject(project);
    WebXmlParser webXmlParser=WebXmlParser.build(eclipseProject);
    PomParser pomParser=new PomParser(eclipseProject);
    SpringParser springParser=new SpringParser(eclipseProject,webXmlParser.getSpringConfigLocations());
    PropertiesParser propertiesParser=new PropertiesParser(eclipseProject,pomParser,springParser.getPropertiesFilePath());
    Builder builder=Mysql.builder();
    builder.setConnectorJarPath(eclipseProject.concatMavenResitoryPath(pomParser.dbConnectorJarRelativePath(""String_Node_Str""))).setDriverClassName(propertiesParser.getProperty(springParser.getDatabaseDriverClassName())).setUsername(propertiesParser.getProperty(springParser.getDatabaseUsername())).setPassword(propertiesParser.getProperty(springParser.getDatabasePassword())).setUrl(propertiesParser.getProperty(springParser.getDatabaseUrl()));
    Sql mysql=builder.build();
    MybatisConfigFileGenerator configFile=new MybatisConfigFileGenerator(eclipseProject,mysql);
    System.out.println(configFile.getXmlConfig());
    MybatisXmlParser mybatisXmlParser=null;
    try {
      mybatisXmlParser=new MybatisXmlParser(eclipseProject.getInputStream(MybatisConfigFileGenerator.CONFIG_FILENAME));
    }
 catch (    Exception e) {
    }
    String xmlFileContent=null;
    if (mybatisXmlParser != null) {
      xmlFileContent=mybatisXmlParser.mergeGeneratedConfigAndGetXmlString(configFile);
    }
 else {
      xmlFileContent=configFile.getXmlConfig();
    }
    eclipseProject.writeFile(MybatisConfigFileGenerator.CONFIG_FILENAME,xmlFileContent);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}"
39546,"private void appendJavaClientGenerator(Element context){
  List<String> paths=project.getSyspathsOfDao();
  if (paths.isEmpty()) {
    errorCode=ErrorCode.NO_DAO_PATH;
    paths.add(project.getFullPath());
  }
 else   if (paths.size() > 1) {
    errorCode=ErrorCode.MULTIPLE_MODEL_PATHS;
  }
  for (  String path : paths) {
    String packageName=project.getPackageName(path);
    Element generator=context.addElement(""String_Node_Str"");
    generator.addAttribute(""String_Node_Str"",""String_Node_Str"");
    generator.addAttribute(""String_Node_Str"",packageName == null ? ""String_Node_Str"" : packageName);
    generator.addAttribute(""String_Node_Str"",path);
    javaClientGenerators.add(generator);
  }
}","private void appendJavaClientGenerator(Element context){
  List<String> paths=project.getSyspathsOfDao();
  if (paths.isEmpty()) {
    errorCode=ErrorCode.NO_DAO_PATH;
    paths.add(project.getFullPath());
  }
 else   if (paths.size() > 1) {
    errorCode=ErrorCode.MULTIPLE_MODEL_PATHS;
  }
  for (  String path : paths) {
    String packageName=getPackageName(path);
    Element generator=context.addElement(""String_Node_Str"");
    generator.addAttribute(""String_Node_Str"",""String_Node_Str"");
    generator.addAttribute(""String_Node_Str"",packageName == null ? ""String_Node_Str"" : packageName);
    generator.addAttribute(""String_Node_Str"",eliminatePackagePath(path));
    javaClientGenerators.add(generator);
  }
}"
39547,"private void appendJavaModelGenerator(Element context){
  List<String> paths=project.getSyspathsOfModel();
  if (paths.isEmpty()) {
    errorCode=ErrorCode.NO_MODEL_PATH;
    paths.add(project.getFullPath());
  }
 else   if (paths.size() > 1) {
    errorCode=ErrorCode.MULTIPLE_MODEL_PATHS;
  }
  for (  String path : paths) {
    String packageName=project.getPackageName(path);
    Element javaModelGenerator=context.addElement(""String_Node_Str"");
    javaModelGenerator.addAttribute(""String_Node_Str"",packageName == null ? ""String_Node_Str"" : packageName);
    javaModelGenerator.addAttribute(""String_Node_Str"",path);
    javaModelGenerators.add(javaModelGenerator);
  }
}","private void appendJavaModelGenerator(Element context){
  List<String> paths=project.getSyspathsOfModel();
  if (paths.isEmpty()) {
    errorCode=ErrorCode.NO_MODEL_PATH;
    paths.add(project.getFullPath());
  }
 else   if (paths.size() > 1) {
    errorCode=ErrorCode.MULTIPLE_MODEL_PATHS;
  }
  for (  String path : paths) {
    String packageName=getPackageName(path);
    Element javaModelGenerator=context.addElement(""String_Node_Str"");
    javaModelGenerator.addAttribute(""String_Node_Str"",packageName == null ? ""String_Node_Str"" : packageName);
    javaModelGenerator.addAttribute(""String_Node_Str"",eliminatePackagePath(path));
    javaModelGenerators.add(javaModelGenerator);
  }
}"
39548,"/** 
 * List full paths of possible resources which are close to the dao layer. By 'close to', it means the ones that are contained by the same submodule containing 'dao'.
 * @return full paths
 */
public List<String> getSyspathsOfResources(){
  List<String> paths=getSyspathsOfDao();
  List<String> result=new LinkedList<String>();
  for (  String path : paths) {
    String tmp=path.replaceFirst(MAVEN_RESOURCES_PATH + ""String_Node_Str"",MAVEN_RESOURCES_PATH);
    result.add(tmp);
  }
  return result;
}","/** 
 * List full paths of possible resources which are close to the dao layer. By 'close to', it means the ones that are contained by the same submodule containing 'dao'.
 * @return full paths
 */
public List<String> getSyspathsOfResources(){
  List<String> paths=getSyspathsOfDao();
  List<String> result=new LinkedList<String>();
  for (  String path : paths) {
    String tmp=path.replaceFirst(MAVEN_SOURCE_CODE_PATH + ""String_Node_Str"",MAVEN_RESOURCES_PATH);
    result.add(tmp);
  }
  return result;
}"
39549,"/** 
 * Under some circumstances, we might find multiple dao/domain layers, so it's necessary to merge generated elements. If this existed config file does not have the element in the new one, a copy is issued.
 * @param configFileGenerator
 * @return the merged config file in string.
 */
public String mergeGeneratedConfigAndGetXmlString(MybatisConfigFileGenerator configFileGenerator){
  try {
    appendClasspathEntry(configFileGenerator);
    if (appendContextAndTestIfContinueAppending(configFileGenerator)) {
      appendJavaTypeResolver(configFileGenerator);
      appendJavaModelGenerators(configFileGenerator);
      appendSqlMapGenerators(configFileGenerator);
      appendJavaClientGenerators(configFileGenerator);
      appendTables(configFileGenerator);
    }
    return toXmlString();
  }
 catch (  IOException e) {
    throw new ProjectException(""String_Node_Str"");
  }
}","/** 
 * Under some circumstances, we might find multiple dao/domain layers, so it's necessary to merge generated elements. If this existed config file does not have the element in the new one, a copy is issued.
 * @param configFileGenerator
 * @return the merged config file in string.
 */
public String mergeGeneratedConfigAndGetXmlString(MybatisConfigFileGenerator configFileGenerator){
  try {
    appendClasspathEntry(configFileGenerator);
    if (appendContextAndTestIfContinueAppending(configFileGenerator)) {
      appendJdbcConnection(configFileGenerator);
      appendJavaTypeResolver(configFileGenerator);
      appendJavaModelGenerators(configFileGenerator);
      appendSqlMapGenerators(configFileGenerator);
      appendJavaClientGenerators(configFileGenerator);
      appendTables(configFileGenerator);
    }
    return toXmlString();
  }
 catch (  IOException e) {
    throw new ProjectException(""String_Node_Str"");
  }
}"
39550,"private void appendTables(MybatisConfigFileGenerator configFileGenerator){
  Set<Element> newTables=configFileGenerator.getTableElements();
  for (  Element table : newTables) {
    if (isTableCommented(table)) {
      continue;
    }
    if (!hasTable(table)) {
      tables.add(table.createCopy());
    }
  }
  for (  Node e : tables) {
    context.add(e);
  }
}","private void appendTables(MybatisConfigFileGenerator configFileGenerator){
  Set<Element> newTables=configFileGenerator.getTableElements();
  if (newTables != null && !newTables.isEmpty()) {
    for (    Element table : newTables) {
      if (isTableCommented(table)) {
        continue;
      }
      if (!hasTable(table)) {
        tables.add(table.createCopy());
      }
    }
  }
  for (  Node e : tables) {
    context.add(e);
  }
}"
39551,"private TOExecutionResult insertAfterRegex(BufferedReader readerText,BufferedReader readerOriginalFile,BufferedWriter writer,boolean firstOnly,String eol) throws IOException {
  String currentLine;
  int n=0;
  boolean foundFirstMatch=false;
  final Pattern pattern=Pattern.compile(regex);
  EolBufferedReader eolReaderOriginalFile=new EolBufferedReader(readerOriginalFile);
  StringBuilder readerTextStringBuilder=null;
  String readerTextString=null;
  if (!firstOnly) {
    readerTextStringBuilder=new StringBuilder();
  }
  while ((currentLine=eolReaderOriginalFile.readLineKeepEol()) != null) {
    writer.write(currentLine);
    if ((!firstOnly || !foundFirstMatch) && pattern.matcher(removeEol(currentLine)).matches()) {
      foundFirstMatch=true;
      n++;
      if (n == 1) {
        while ((currentLine=readerText.readLine()) != null) {
          writer.write(currentLine);
          writer.write(eol);
          if (!firstOnly) {
            readerTextStringBuilder.append(currentLine);
            readerTextStringBuilder.append(eol);
          }
        }
        if (!firstOnly) {
          readerTextString=readerTextStringBuilder.toString();
        }
      }
 else {
        writer.write(readerTextString);
      }
    }
  }
  if (foundFirstMatch) {
    String details=String.format(""String_Node_Str"",textFileUrl,getRelativePath(),n,regex);
    return TOExecutionResult.success(this,details);
  }
 else {
    String details=String.format(""String_Node_Str"",textFileUrl,getRelativePath(),regex);
    return TOExecutionResult.noOp(this,details);
  }
}","private TOExecutionResult insertAfterRegex(BufferedReader readerText,BufferedReader readerOriginalFile,BufferedWriter writer,boolean firstOnly,String eol) throws IOException {
  String currentLine;
  int n=0;
  boolean foundFirstMatch=false;
  final Pattern pattern=Pattern.compile(regex);
  EolBufferedReader eolReaderOriginalFile=new EolBufferedReader(readerOriginalFile);
  StringBuilder readerTextStringBuilder=null;
  String readerTextString=null;
  if (!firstOnly) {
    readerTextStringBuilder=new StringBuilder();
  }
  while ((currentLine=eolReaderOriginalFile.readLineKeepEol()) != null) {
    writer.write(currentLine);
    if ((!firstOnly || !foundFirstMatch) && pattern.matcher(removeEol(currentLine)).matches()) {
      foundFirstMatch=true;
      n++;
      if (getEndEol(currentLine) == null) {
        writer.write(eol);
      }
      if (n == 1) {
        while ((currentLine=readerText.readLine()) != null) {
          writer.write(currentLine);
          writer.write(eol);
          if (!firstOnly) {
            readerTextStringBuilder.append(currentLine);
            readerTextStringBuilder.append(eol);
          }
        }
        if (!firstOnly) {
          readerTextString=readerTextStringBuilder.toString();
        }
      }
 else {
        writer.write(readerTextString);
      }
    }
  }
  if (foundFirstMatch) {
    String details=String.format(""String_Node_Str"",textFileUrl,getRelativePath(),n,regex);
    return TOExecutionResult.success(this,details);
  }
 else {
    String details=String.format(""String_Node_Str"",textFileUrl,getRelativePath(),regex);
    return TOExecutionResult.noOp(this,details);
  }
}"
39552,"@Override public void setVerboseMode(boolean verboseMode){
  this.verboseMode=verboseMode;
  if (verboseMode) {
    PatternLayoutEncoder patternLayoutEncoder=new PatternLayoutEncoder();
    patternLayoutEncoder.setPattern(""String_Node_Str"");
    patternLayoutEncoder.setContext(loggerContext);
    patternLayoutEncoder.start();
    Appender<ILoggingEvent> consoleAppender=new ConsoleAppender();
    ((OutputStreamAppender)consoleAppender).setEncoder(patternLayoutEncoder);
    consoleAppender.setContext(loggerContext);
    consoleAppender.start();
    loggerContext.getLogger(""String_Node_Str"").detachAppender(""String_Node_Str"");
    loggerContext.getLogger(""String_Node_Str"").addAppender(consoleAppender);
  }
 else {
  }
}","@Override public void setVerboseMode(boolean verboseMode){
  this.verboseMode=verboseMode;
  if (verboseMode) {
    PatternLayoutEncoder patternLayoutEncoder=new PatternLayoutEncoder();
    patternLayoutEncoder.setPattern(""String_Node_Str"");
    patternLayoutEncoder.setContext(loggerContext);
    patternLayoutEncoder.start();
    Appender<ILoggingEvent> consoleAppender=new ConsoleAppender();
    ((OutputStreamAppender)consoleAppender).setEncoder(patternLayoutEncoder);
    consoleAppender.setContext(loggerContext);
    consoleAppender.start();
    loggerContext.getLogger(""String_Node_Str"").detachAppender(""String_Node_Str"");
    loggerContext.getLogger(""String_Node_Str"").addAppender(consoleAppender);
  }
}"
39553,"@Override protected TOExecutionResult pomExecution(File transformedAppFolder,TransformationContext transformationContext) throws XmlPullParserException, XMLStreamException, IOException {
  File pomFile=getAbsoluteFile(transformedAppFolder,transformationContext);
  Parent existingParent=getModel(pomFile).getParent();
  String details;
  String relativePomFile=getRelativePath(transformedAppFolder,pomFile);
  if (existingParent != null) {
    String message=String.format(""String_Node_Str"",relativePomFile);
switch (ifPresent) {
case WarnNotAdd:
      return TOExecutionResult.warning(this,message);
case NoOp:
    return TOExecutionResult.noOp(this,message);
case Fail:
  return TOExecutionResult.error(this,new TransformationOperationException(message));
}
}
if (groupId == null && artifactId == null && version == null) {
throw new IllegalStateException(""String_Node_Str"");
}
Parent newParent=new Parent();
newParent.setGroupId(groupId);
newParent.setArtifactId(artifactId);
newParent.setVersion(version);
XMLEventReader reader=getReader(transformedAppFolder,transformationContext);
XMLEventWriter writer=getWriter(transformedAppFolder,transformationContext);
XMLEvent indentation=getIndentation(transformedAppFolder,transformationContext);
TOExecutionResult result=null;
if (existingParent != null) {
copyUntil(reader,writer,new StartElementEventCondition(""String_Node_Str""),true);
skipUntil(reader,new EndElementEventCondition(""String_Node_Str""));
writer.add(LINE_FEED);
writeNewParent(writer,indentation);
writer.add(indentation);
writer.add(eventFactory.createEndElement(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
details=String.format(""String_Node_Str"",relativePomFile,newParent);
if (ifPresent.equals(IfPresent.Overwrite)) {
result=TOExecutionResult.success(this,details);
}
 else if (ifPresent.equals(IfPresent.WarnButAdd)) {
result=TOExecutionResult.warning(this,details);
}
}
 else {
copyUntil(reader,writer,new StartElementEventCondition(""String_Node_Str""),true);
writer.add(LINE_FEED);
writer.add(LINE_FEED);
writer.add(indentation);
writer.add(eventFactory.createStartElement(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
writer.add(LINE_FEED);
writeNewParent(writer,indentation);
writer.add(indentation);
writer.add(eventFactory.createEndElement(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
writer.add(LINE_FEED);
details=String.format(""String_Node_Str"",relativePomFile,newParent);
result=TOExecutionResult.success(this,details);
}
writer.add(reader);
return result;
}","@Override protected TOExecutionResult pomExecution(File transformedAppFolder,TransformationContext transformationContext) throws XmlPullParserException, XMLStreamException, IOException {
  File pomFile=getAbsoluteFile(transformedAppFolder,transformationContext);
  Parent existingParent=getModel(pomFile).getParent();
  String details;
  String relativePomFile=getRelativePath(transformedAppFolder,pomFile);
  if (existingParent != null) {
    String message=String.format(""String_Node_Str"",relativePomFile);
switch (ifPresent) {
case WarnNotAdd:
      return TOExecutionResult.warning(this,message);
case NoOp:
    return TOExecutionResult.noOp(this,message);
case Fail:
  return TOExecutionResult.error(this,new TransformationOperationException(message));
default :
break;
}
}
if (groupId == null && artifactId == null && version == null) {
throw new IllegalStateException(""String_Node_Str"");
}
Parent newParent=new Parent();
newParent.setGroupId(groupId);
newParent.setArtifactId(artifactId);
newParent.setVersion(version);
XMLEventReader reader=getReader(transformedAppFolder,transformationContext);
XMLEventWriter writer=getWriter(transformedAppFolder,transformationContext);
XMLEvent indentation=getIndentation(transformedAppFolder,transformationContext);
TOExecutionResult result=null;
if (existingParent != null) {
copyUntil(reader,writer,new StartElementEventCondition(""String_Node_Str""),true);
skipUntil(reader,new EndElementEventCondition(""String_Node_Str""));
writer.add(LINE_FEED);
writeNewParent(writer,indentation);
writer.add(indentation);
writer.add(eventFactory.createEndElement(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
details=String.format(""String_Node_Str"",relativePomFile,newParent);
if (ifPresent.equals(IfPresent.Overwrite)) {
result=TOExecutionResult.success(this,details);
}
 else if (ifPresent.equals(IfPresent.WarnButAdd)) {
result=TOExecutionResult.warning(this,details);
}
}
 else {
copyUntil(reader,writer,new StartElementEventCondition(""String_Node_Str""),true);
writer.add(LINE_FEED);
writer.add(LINE_FEED);
writer.add(indentation);
writer.add(eventFactory.createStartElement(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
writer.add(LINE_FEED);
writeNewParent(writer,indentation);
writer.add(indentation);
writer.add(eventFactory.createEndElement(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
writer.add(LINE_FEED);
details=String.format(""String_Node_Str"",relativePomFile,newParent);
result=TOExecutionResult.success(this,details);
}
writer.add(reader);
return result;
}"
39554,"@Test public void readErrorFailTest() throws IOException, XmlPullParserException, CloneNotSupportedException {
  PomChangeParentVersion pomChangeParentVersion=new PomChangeParentVersion(""String_Node_Str"").relative(""String_Node_Str"");
  assertEquals(pomChangeParentVersion.getVersion(),""String_Node_Str"");
  TOExecutionResult executionResult=pomChangeParentVersion.execution(transformedAppFolder,transformationContext);
  assertEquals(executionResult.getType(),TOExecutionResult.Type.ERROR);
  Assert.assertEquals(pomChangeParentVersion.getDescription(),""String_Node_Str"");
  Assert.assertEquals(executionResult.getException().getClass(),TransformationOperationException.class);
  Assert.assertEquals(executionResult.getException().getMessage(),""String_Node_Str"");
  assertNotChangedFile(""String_Node_Str"");
  executionResult=pomChangeParentVersion.clone().failIfNotPresent().execution(transformedAppFolder,transformationContext);
  assertEquals(executionResult.getType(),TOExecutionResult.Type.ERROR);
  assertNotChangedFile(""String_Node_Str"");
}","@Test public void readErrorFailTest() throws IOException, XmlPullParserException, CloneNotSupportedException {
  PomChangeParentVersion pomChangeParentVersion=new PomChangeParentVersion(""String_Node_Str"").relative(""String_Node_Str"");
  assertEquals(pomChangeParentVersion.getVersion(),""String_Node_Str"");
  TOExecutionResult executionResult=pomChangeParentVersion.execution(transformedAppFolder,transformationContext);
  assertEquals(executionResult.getType(),TOExecutionResult.Type.ERROR);
  assertEquals(pomChangeParentVersion.getDescription(),""String_Node_Str"");
  assertEquals(executionResult.getException().getClass(),TransformationOperationException.class);
  assertEquals(executionResult.getException().getMessage(),""String_Node_Str"");
  assertNotChangedFile(""String_Node_Str"");
  executionResult=pomChangeParentVersion.clone().failIfNotPresent().execution(transformedAppFolder,transformationContext);
  assertEquals(executionResult.getType(),TOExecutionResult.Type.ERROR);
  assertNotChangedFile(""String_Node_Str"");
}"
39555,"@Test public void noOpTest() throws IOException, XmlPullParserException {
  Model pomModelBeforeChange=getOriginalPomModel(""String_Node_Str"");
  assertNull(pomModelBeforeChange.getParent());
  PomChangeParentVersion pomChangeParentVersion=new PomChangeParentVersion(""String_Node_Str"").relative(""String_Node_Str"").noOpIfNotPresent();
  assertEquals(pomChangeParentVersion.getVersion(),""String_Node_Str"");
  TOExecutionResult executionResult=pomChangeParentVersion.execution(transformedAppFolder,transformationContext);
  assertEquals(executionResult.getType(),TOExecutionResult.Type.NO_OP);
  Assert.assertEquals(pomChangeParentVersion.getDescription(),""String_Node_Str"");
  Assert.assertNull(executionResult.getException());
  Model pomModelAfterChange=getTransformedPomModel(""String_Node_Str"");
  assertNull(pomModelAfterChange.getParent());
  assertNotChangedFile(""String_Node_Str"");
}","@Test public void noOpTest() throws IOException, XmlPullParserException {
  Model pomModelBeforeChange=getOriginalPomModel(""String_Node_Str"");
  assertNull(pomModelBeforeChange.getParent());
  PomChangeParentVersion pomChangeParentVersion=new PomChangeParentVersion(""String_Node_Str"").relative(""String_Node_Str"").noOpIfNotPresent();
  assertEquals(pomChangeParentVersion.getVersion(),""String_Node_Str"");
  TOExecutionResult executionResult=pomChangeParentVersion.execution(transformedAppFolder,transformationContext);
  assertEquals(executionResult.getType(),TOExecutionResult.Type.NO_OP);
  assertEquals(pomChangeParentVersion.getDescription(),""String_Node_Str"");
  assertNull(executionResult.getException());
  Model pomModelAfterChange=getTransformedPomModel(""String_Node_Str"");
  assertNull(pomModelAfterChange.getParent());
  assertNotChangedFile(""String_Node_Str"");
}"
39556,"@Test public void changeVersionTest() throws IOException, XmlPullParserException {
  Model pomModelBeforeChange=getOriginalPomModel(""String_Node_Str"");
  assertEquals(pomModelBeforeChange.getParent().getVersion(),""String_Node_Str"");
  PomChangeParentVersion pomChangeParentVersion=new PomChangeParentVersion(""String_Node_Str"").relative(""String_Node_Str"");
  assertEquals(pomChangeParentVersion.getVersion(),""String_Node_Str"");
  TOExecutionResult executionResult=pomChangeParentVersion.execution(transformedAppFolder,transformationContext);
  assertEquals(executionResult.getType(),TOExecutionResult.Type.SUCCESS);
  Assert.assertEquals(pomChangeParentVersion.getDescription(),""String_Node_Str"");
  Assert.assertNull(executionResult.getException());
  Model pomModelAfterChange=getTransformedPomModel(""String_Node_Str"");
  assertEquals(pomModelAfterChange.getParent().getVersion(),""String_Node_Str"");
}","@Test public void changeVersionTest() throws IOException, XmlPullParserException {
  Model pomModelBeforeChange=getOriginalPomModel(""String_Node_Str"");
  assertEquals(pomModelBeforeChange.getParent().getVersion(),""String_Node_Str"");
  PomChangeParentVersion pomChangeParentVersion=new PomChangeParentVersion(""String_Node_Str"").relative(""String_Node_Str"");
  assertEquals(pomChangeParentVersion.getVersion(),""String_Node_Str"");
  TOExecutionResult executionResult=pomChangeParentVersion.execution(transformedAppFolder,transformationContext);
  assertEquals(executionResult.getType(),TOExecutionResult.Type.SUCCESS);
  assertEquals(pomChangeParentVersion.getDescription(),""String_Node_Str"");
  assertNull(executionResult.getException());
  Model pomModelAfterChange=getTransformedPomModel(""String_Node_Str"");
  assertEquals(pomModelAfterChange.getParent().getVersion(),""String_Node_Str"");
}"
39557,"@Test public void noParentFailTest() throws IOException, XmlPullParserException, CloneNotSupportedException {
  Model pomModelBeforeChange=getOriginalPomModel(""String_Node_Str"");
  assertNull(pomModelBeforeChange.getParent());
  PomChangeParentVersion pomChangeParentVersion=new PomChangeParentVersion(""String_Node_Str"").relative(""String_Node_Str"");
  assertEquals(pomChangeParentVersion.getVersion(),""String_Node_Str"");
  TOExecutionResult executionResult=pomChangeParentVersion.execution(transformedAppFolder,transformationContext);
  assertEquals(executionResult.getType(),TOExecutionResult.Type.ERROR);
  Assert.assertEquals(pomChangeParentVersion.getDescription(),""String_Node_Str"");
  Assert.assertEquals(executionResult.getException().getClass(),TransformationOperationException.class);
  Assert.assertEquals(executionResult.getException().getMessage(),""String_Node_Str"");
  Model pomModelAfterChange=getTransformedPomModel(""String_Node_Str"");
  assertNull(pomModelAfterChange.getParent());
  executionResult=pomChangeParentVersion.clone().failIfNotPresent().execution(transformedAppFolder,transformationContext);
  assertEquals(executionResult.getType(),TOExecutionResult.Type.ERROR);
  assertNotChangedFile(""String_Node_Str"");
}","@Test public void noParentFailTest() throws IOException, XmlPullParserException, CloneNotSupportedException {
  Model pomModelBeforeChange=getOriginalPomModel(""String_Node_Str"");
  assertNull(pomModelBeforeChange.getParent());
  PomChangeParentVersion pomChangeParentVersion=new PomChangeParentVersion(""String_Node_Str"").relative(""String_Node_Str"");
  assertEquals(pomChangeParentVersion.getVersion(),""String_Node_Str"");
  TOExecutionResult executionResult=pomChangeParentVersion.execution(transformedAppFolder,transformationContext);
  assertEquals(executionResult.getType(),TOExecutionResult.Type.ERROR);
  assertEquals(pomChangeParentVersion.getDescription(),""String_Node_Str"");
  assertEquals(executionResult.getException().getClass(),TransformationOperationException.class);
  assertEquals(executionResult.getException().getMessage(),""String_Node_Str"");
  Model pomModelAfterChange=getTransformedPomModel(""String_Node_Str"");
  assertNull(pomModelAfterChange.getParent());
  executionResult=pomChangeParentVersion.clone().failIfNotPresent().execution(transformedAppFolder,transformationContext);
  assertEquals(executionResult.getType(),TOExecutionResult.Type.ERROR);
  assertNotChangedFile(""String_Node_Str"");
}"
39558,"@Test public void warnTest() throws IOException, XmlPullParserException {
  Model pomModelBeforeChange=getOriginalPomModel(""String_Node_Str"");
  assertNull(pomModelBeforeChange.getParent());
  PomChangeParentVersion pomChangeParentVersion=new PomChangeParentVersion().relative(""String_Node_Str"").warnIfNotPresent();
  pomChangeParentVersion.setVersion(""String_Node_Str"");
  assertEquals(pomChangeParentVersion.getVersion(),""String_Node_Str"");
  TOExecutionResult executionResult=pomChangeParentVersion.execution(transformedAppFolder,transformationContext);
  assertEquals(executionResult.getType(),TOExecutionResult.Type.WARNING);
  Assert.assertEquals(pomChangeParentVersion.getDescription(),""String_Node_Str"");
  Assert.assertNull(executionResult.getException());
  Assert.assertEquals(executionResult.getWarnings().size(),1);
  Assert.assertEquals(executionResult.getWarnings().get(0).getClass(),TransformationOperationException.class);
  Assert.assertEquals(executionResult.getWarnings().get(0).getMessage(),""String_Node_Str"");
  Model pomModelAfterChange=getTransformedPomModel(""String_Node_Str"");
  assertNull(pomModelAfterChange.getParent());
  assertNotChangedFile(""String_Node_Str"");
}","@Test public void warnTest() throws IOException, XmlPullParserException {
  Model pomModelBeforeChange=getOriginalPomModel(""String_Node_Str"");
  assertNull(pomModelBeforeChange.getParent());
  PomChangeParentVersion pomChangeParentVersion=new PomChangeParentVersion().relative(""String_Node_Str"").warnIfNotPresent();
  pomChangeParentVersion.setVersion(""String_Node_Str"");
  assertEquals(pomChangeParentVersion.getVersion(),""String_Node_Str"");
  TOExecutionResult executionResult=pomChangeParentVersion.execution(transformedAppFolder,transformationContext);
  assertEquals(executionResult.getType(),TOExecutionResult.Type.WARNING);
  assertEquals(pomChangeParentVersion.getDescription(),""String_Node_Str"");
  assertNull(executionResult.getException());
  assertEquals(executionResult.getWarnings().size(),1);
  assertEquals(executionResult.getWarnings().get(0).getClass(),TransformationOperationException.class);
  assertEquals(executionResult.getWarnings().get(0).getMessage(),""String_Node_Str"");
  Model pomModelAfterChange=getTransformedPomModel(""String_Node_Str"");
  assertNull(pomModelAfterChange.getParent());
  assertNotChangedFile(""String_Node_Str"");
}"
39559,"static String getBanner(){
  return banner;
}","@SuppressWarnings(""String_Node_Str"") static String getBanner(){
  return banner;
}"
39560,"public ButterflyCliRun run() throws IOException {
  ButterflyCliRun run=new ButterflyCliRun();
  run.setButterflyVersion(ButterflyProperties.getString(""String_Node_Str""));
  logger.info(ButterflyCliApp.getBanner());
  if (optionSet == null || optionSet.has(CLI_OPTION_HELP) || (!optionSet.hasOptions() && optionSet.nonOptionArguments() == null)) {
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    optionParser.printHelpOn(System.out);
    run.setExitStatus(0);
    return run;
  }
  if (optionSet.has(CLI_OPTION_VERBOSE)) {
    logConfigurator.verboseMode(true);
    logger.info(""String_Node_Str"");
  }
  if (optionSet.has(CLI_OPTION_DEBUG)) {
    logConfigurator.debugMode(true);
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"",ButterflyCliApp.getButterflyHome());
    logger.info(""String_Node_Str"",System.getenv(""String_Node_Str""));
    logger.info(""String_Node_Str"",System.getProperty(""String_Node_Str""));
    logger.info(""String_Node_Str"",System.getProperty(""String_Node_Str""));
    logger.info(""String_Node_Str"",System.getenv(""String_Node_Str""));
  }
  if (optionSet.has(CLI_OPTION_LIST_EXTENSIONS)) {
    try {
      printExtensionsList(butterflyFacade);
      run.setExitStatus(0);
      return run;
    }
 catch (    Exception e) {
      registerError(run,""String_Node_Str"",e);
      return run;
    }
  }
  logger.info(""String_Node_Str"");
  List<?> nonOptionArguments=optionSet.nonOptionArguments();
  if (nonOptionArguments == null || nonOptionArguments.size() == 0 || StringUtils.isEmpty(nonOptionArguments.get(0))) {
    registerError(run,""String_Node_Str"");
    return run;
  }
  File applicationFolder=new File((String)nonOptionArguments.get(0));
  if (!applicationFolder.exists()) {
    String errorMessage=String.format(""String_Node_Str"",applicationFolder.getAbsolutePath());
    registerError(run,errorMessage);
    return run;
  }
  run.setApplication(applicationFolder);
  File transformedApplicationFolder=(File)optionSet.valueOf(CLI_OPTION_TRANSFORMED_APP_FOLDER);
  boolean createZip=optionSet.has(CLI_OPTION_CREATE_ZIP);
  String templateClassName=null;
  Class<? extends TransformationTemplate> templateClass=null;
  if (optionSet.has(CLI_OPTION_TEMPLATE)) {
    templateClassName=(String)optionSet.valueOf(CLI_OPTION_TEMPLATE);
  }
 else   if (optionSet.has(CLI_OPTION_TEMPLATE_SHORTCUT)) {
    int shortcut=(Integer)optionSet.valueOf(CLI_OPTION_TEMPLATE_SHORTCUT);
    templateClass=getTemplateClass(shortcut);
    if (templateClass == null) {
      registerError(run,""String_Node_Str"");
      return run;
    }
    logger.info(""String_Node_Str"",shortcut,templateClass.getName());
  }
 else {
    try {
      templateClass=butterflyFacade.automaticResolution(applicationFolder);
      if (templateClass == null) {
        registerError(run,""String_Node_Str"");
        return run;
      }
      logger.info(""String_Node_Str"");
    }
 catch (    TemplateResolutionException e) {
      registerError(run,e.getMessage());
      return run;
    }
  }
  if (createZip) {
    logger.info(""String_Node_Str"");
  }
  Configuration configuration=new Configuration(transformedApplicationFolder,createZip);
  if (optionSet.has(CLI_OPTION_DEBUG)) {
    Extension extension=butterflyFacade.getRegisteredExtension();
    if (extension != null) {
      logger.info(""String_Node_Str"",extension.getClass().getName());
      logConfigurator.setLoggerLevel(extension.getClass().getPackage().getName(),Level.DEBUG);
    }
  }
  try {
    if (templateClass == null) {
      templateClass=(Class<? extends TransformationTemplate>)Class.forName(templateClassName);
    }
    run.setTransformationTemplate(templateClass.getName());
    TransformationResult transformationResult=null;
    if (UpgradeStep.class.isAssignableFrom(templateClass)) {
      Class<? extends UpgradeStep> firstStepClass=(Class<? extends UpgradeStep>)templateClass;
      String upgradeVersion=(String)optionSet.valueOf(CLI_OPTION_UPGRADE_VERSION);
      UpgradePath upgradePath=new UpgradePath(firstStepClass,upgradeVersion);
      logger.info(""String_Node_Str"",upgradePath.getOriginalVersion(),upgradePath.getUpgradeVersion());
      transformationResult=butterflyFacade.transform(applicationFolder,upgradePath,configuration);
    }
 else {
      logger.info(""String_Node_Str"");
      transformationResult=butterflyFacade.transform(applicationFolder,templateClass,configuration);
    }
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"",transformationResult.getTransformedApplicationLocation());
    logger.info(""String_Node_Str"",LogFileDefiner.getLogFile());
    run.setTransformedApplication(transformationResult.getTransformedApplicationLocation());
    run.setLogFile(LogFileDefiner.getLogFile());
    if (transformationResult.hasManualInstructions()) {
      logger.info(""String_Node_Str"");
      logger.info(""String_Node_Str"");
      logger.info(""String_Node_Str"");
      logger.info(""String_Node_Str"");
      logger.info(""String_Node_Str"",transformationResult.getManualInstructionsFile());
      logger.info(""String_Node_Str"");
      run.setManualInstructionsFile(transformationResult.getManualInstructionsFile());
    }
    logger.info(""String_Node_Str"");
  }
 catch (  ButterflyException|ButterflyRuntimeException e) {
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.error(""String_Node_Str"");
    logger.error(""String_Node_Str"",e.getMessage());
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"",LogFileDefiner.getLogFile().getAbsolutePath());
    run.setErrorMessage(""String_Node_Str"" + e.getMessage());
    run.setExceptionMessage(e.getMessage());
    run.setExitStatus(1);
    return run;
  }
catch (  ClassNotFoundException e) {
    registerError(run,""String_Node_Str"",e);
    return run;
  }
  return run;
}","public ButterflyCliRun run() throws IOException {
  ButterflyCliRun run=new ButterflyCliRun();
  run.setButterflyVersion(ButterflyProperties.getString(""String_Node_Str""));
  logger.info(ButterflyCliApp.getBanner());
  if (optionSet == null || optionSet.has(CLI_OPTION_HELP) || (!optionSet.hasOptions() && optionSet.nonOptionArguments() == null)) {
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    optionParser.printHelpOn(System.out);
    run.setExitStatus(0);
    return run;
  }
  if (optionSet.has(CLI_OPTION_VERBOSE)) {
    logConfigurator.setVerboseMode(true);
    logger.info(""String_Node_Str"");
  }
  if (optionSet.has(CLI_OPTION_DEBUG)) {
    logConfigurator.setDebugMode(true);
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"",ButterflyCliApp.getButterflyHome());
    logger.info(""String_Node_Str"",System.getenv(""String_Node_Str""));
    logger.info(""String_Node_Str"",System.getProperty(""String_Node_Str""));
    logger.info(""String_Node_Str"",System.getProperty(""String_Node_Str""));
    logger.info(""String_Node_Str"",System.getenv(""String_Node_Str""));
  }
  if (optionSet.has(CLI_OPTION_LIST_EXTENSIONS)) {
    try {
      printExtensionsList(butterflyFacade);
      run.setExitStatus(0);
      return run;
    }
 catch (    Exception e) {
      registerError(run,""String_Node_Str"",e);
      return run;
    }
  }
  logger.info(""String_Node_Str"");
  List<?> nonOptionArguments=optionSet.nonOptionArguments();
  if (nonOptionArguments == null || nonOptionArguments.size() == 0 || StringUtils.isEmpty(nonOptionArguments.get(0))) {
    registerError(run,""String_Node_Str"");
    return run;
  }
  File applicationFolder=new File((String)nonOptionArguments.get(0));
  if (!applicationFolder.exists()) {
    String errorMessage=String.format(""String_Node_Str"",applicationFolder.getAbsolutePath());
    registerError(run,errorMessage);
    return run;
  }
  run.setApplication(applicationFolder);
  File transformedApplicationFolder=(File)optionSet.valueOf(CLI_OPTION_TRANSFORMED_APP_FOLDER);
  boolean createZip=optionSet.has(CLI_OPTION_CREATE_ZIP);
  String templateClassName=null;
  Class<? extends TransformationTemplate> templateClass=null;
  if (optionSet.has(CLI_OPTION_TEMPLATE)) {
    templateClassName=(String)optionSet.valueOf(CLI_OPTION_TEMPLATE);
  }
 else   if (optionSet.has(CLI_OPTION_TEMPLATE_SHORTCUT)) {
    int shortcut=(Integer)optionSet.valueOf(CLI_OPTION_TEMPLATE_SHORTCUT);
    templateClass=getTemplateClass(shortcut);
    if (templateClass == null) {
      registerError(run,""String_Node_Str"");
      return run;
    }
    logger.info(""String_Node_Str"",shortcut,templateClass.getName());
  }
 else {
    try {
      templateClass=butterflyFacade.automaticResolution(applicationFolder);
      if (templateClass == null) {
        registerError(run,""String_Node_Str"");
        return run;
      }
      logger.info(""String_Node_Str"");
    }
 catch (    TemplateResolutionException e) {
      registerError(run,e.getMessage());
      return run;
    }
  }
  if (createZip) {
    logger.info(""String_Node_Str"");
  }
  Configuration configuration=new Configuration(transformedApplicationFolder,createZip);
  if (optionSet.has(CLI_OPTION_DEBUG)) {
    Extension extension=butterflyFacade.getRegisteredExtension();
    if (extension != null) {
      logger.info(""String_Node_Str"",extension.getClass().getName());
      logConfigurator.setLoggerLevel(extension.getClass().getPackage().getName(),Level.DEBUG);
    }
  }
  try {
    if (templateClass == null) {
      templateClass=(Class<? extends TransformationTemplate>)Class.forName(templateClassName);
    }
    run.setTransformationTemplate(templateClass.getName());
    TransformationResult transformationResult=null;
    if (UpgradeStep.class.isAssignableFrom(templateClass)) {
      Class<? extends UpgradeStep> firstStepClass=(Class<? extends UpgradeStep>)templateClass;
      String upgradeVersion=(String)optionSet.valueOf(CLI_OPTION_UPGRADE_VERSION);
      UpgradePath upgradePath=new UpgradePath(firstStepClass,upgradeVersion);
      logger.info(""String_Node_Str"",upgradePath.getOriginalVersion(),upgradePath.getUpgradeVersion());
      transformationResult=butterflyFacade.transform(applicationFolder,upgradePath,configuration);
    }
 else {
      logger.info(""String_Node_Str"");
      transformationResult=butterflyFacade.transform(applicationFolder,templateClass,configuration);
    }
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"",transformationResult.getTransformedApplicationLocation());
    logger.info(""String_Node_Str"",LogFileDefiner.getLogFile());
    run.setTransformedApplication(transformationResult.getTransformedApplicationLocation());
    run.setLogFile(LogFileDefiner.getLogFile());
    if (transformationResult.hasManualInstructions()) {
      logger.info(""String_Node_Str"");
      logger.info(""String_Node_Str"");
      logger.info(""String_Node_Str"");
      logger.info(""String_Node_Str"");
      logger.info(""String_Node_Str"",transformationResult.getManualInstructionsFile());
      logger.info(""String_Node_Str"");
      run.setManualInstructionsFile(transformationResult.getManualInstructionsFile());
    }
    logger.info(""String_Node_Str"");
  }
 catch (  ButterflyException|ButterflyRuntimeException e) {
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.error(""String_Node_Str"");
    logger.error(""String_Node_Str"",e.getMessage());
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"",LogFileDefiner.getLogFile().getAbsolutePath());
    run.setErrorMessage(""String_Node_Str"" + e.getMessage());
    run.setExceptionMessage(e.getMessage());
    run.setExitStatus(1);
    return run;
  }
catch (  ClassNotFoundException e) {
    registerError(run,""String_Node_Str"",e);
    return run;
  }
  return run;
}"
39561,"LogConfigurator(){
  setLoggerLevel(""String_Node_Str"",Level.INFO);
}","public LogConfigurator(){
  setLoggerLevel(""String_Node_Str"",Level.INFO);
}"
39562,"abstract void setLoggerLevel(Class logger,Level level);","public abstract void setLoggerLevel(Class logger,Level level);"
39563,"@Override void setLoggerLevel(Class logger,org.slf4j.event.Level level){
  if (level == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  loggerContext.getLogger(logger).setLevel(getLogbackLogLevel(level));
}","@Override public void setLoggerLevel(Class logger,org.slf4j.event.Level level){
  if (level == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  loggerContext.getLogger(logger).setLevel(getLogbackLogLevel(level));
}"
39564,"@Test public void testVerboseOn(){
  Assert.assertNotNull(logbackVerboseConfigurator);
  Assert.assertNotNull(loggerContext);
  logbackVerboseConfigurator.debugMode(true);
  Assert.assertTrue(loggerContext.getLogger(""String_Node_Str"").getLevel() == ch.qos.logback.classic.Level.DEBUG);
}","@Test public void testVerboseOn(){
  Assert.assertNotNull(logbackVerboseConfigurator);
  Assert.assertNotNull(loggerContext);
  logbackVerboseConfigurator.setDebugMode(true);
  Assert.assertTrue(loggerContext.getLogger(""String_Node_Str"").getLevel() == ch.qos.logback.classic.Level.DEBUG);
}"
39565,"@Test public void testVerboseOff(){
  Assert.assertNotNull(logbackVerboseConfigurator);
  Assert.assertNotNull(loggerContext);
  logbackVerboseConfigurator.debugMode(false);
  Assert.assertTrue(loggerContext.getLogger(""String_Node_Str"").getLevel() == ch.qos.logback.classic.Level.INFO);
}","@Test public void testVerboseOff(){
  Assert.assertNotNull(logbackVerboseConfigurator);
  Assert.assertNotNull(loggerContext);
  logbackVerboseConfigurator.setDebugMode(false);
  Assert.assertTrue(loggerContext.getLogger(""String_Node_Str"").getLevel() == ch.qos.logback.classic.Level.INFO);
}"
39566,"TransformationContextImpl getTransformationContext(){
  return transformationContext;
}","@SuppressWarnings(""String_Node_Str"") TransformationContextImpl getTransformationContext(){
  return transformationContext;
}"
39567,"final String getAbsoluteFileFromContextAttribute(){
  return absoluteFileFromContextAttribute;
}","private final String getAbsoluteFileFromContextAttribute(){
  return absoluteFileFromContextAttribute;
}"
39568,"/** 
 * The public default constructor should always be available by any transformation utility because in many cases all of its properties will be set during transformation time, using the transformation context
 */
public TransformationUtility(){
}","@SuppressWarnings(""String_Node_Str"") public TransformationUtility(){
}"
39569,"public TransformationUtilityGroup(){
}","@SuppressWarnings(""String_Node_Str"") public TransformationUtilityGroup(){
}"
39570,"public FileExists(){
}","@SuppressWarnings(""String_Node_Str"") public FileExists(){
}"
39571,"/** 
 * Evaluates this condition against the specified compilation unit and returns the evaluation result, including negating it if   {@link #isNegate()} is true.
 * @param compilationUnit the {@link CompilationUnit} that representsthe Java class to be evaluated
 * @return the evaluation result including negation (if applicable)
 */
final boolean evaluate(CompilationUnit compilationUnit){
  boolean evalResult=eval(compilationUnit);
  return negate ? !evalResult : evalResult;
}","/** 
 * Evaluates this condition against the specified compilation unit and returns the evaluation result, including negating it if   {@link #isNegate()} is true.
 * @param compilationUnit the {@link CompilationUnit} that representsthe Java class to be evaluated
 * @return the evaluation result including negation (if applicable)
 */
@SuppressWarnings(""String_Node_Str"") final boolean evaluate(CompilationUnit compilationUnit){
  boolean evalResult=eval(compilationUnit);
  return negate ? !evalResult : evalResult;
}"
39572,"public JavaPackage(){
}","@SuppressWarnings(""String_Node_Str"") public JavaPackage(){
}"
39573,"public WebXmlContextParams(){
}","@SuppressWarnings(""String_Node_Str"") public WebXmlContextParams(){
}"
39574,"/** 
 * Deletes a single file or folder (empty or not).
 */
public DeleteFile(){
}","@SuppressWarnings(""String_Node_Str"") public DeleteFile(){
}"
39575,"/** 
 * Transform an application based on an upgrade path, and also accept an additional parameter with configuration
 * @param applicationFolder application folder
 * @param upgradePath upgrade path object used to upgrade this application
 * @param configuration Butterfly configuration object
 * @return the transformation result object
 */
TransformationResult transform(File applicationFolder,UpgradePath upgradePath,Configuration configuration) throws ButterflyException ;","/** 
 * Transform an application based on an upgrade path, and also accept an additional parameter with configuration
 * @param applicationFolder application folder
 * @param upgradePath upgrade path object used to upgrade this application
 * @param configuration Butterfly configuration object
 * @return the transformation result object
 * @throws ButterflyException in case the transformation did not succeed
 */
TransformationResult transform(File applicationFolder,UpgradePath upgradePath,Configuration configuration) throws ButterflyException ;"
39576,"/** 
 * @see {@link #setOutputFolder(File)}
 * @return
 */
public File getOutputFolder(){
  return outputFolder;
}","/** 
 * Return the folder where the transformed application is supposed to be placed
 * @return the folder where the transformed application is supposed to be placed
 */
public File getOutputFolder(){
  return outputFolder;
}"
39577,"/** 
 * @see {@link Configuration}
 * @see {@link #setOutputFolder(File)}
 * @see {@link #setZipOutput(boolean)}
 * @param outputFolder
 * @param zipOutput
 */
public Configuration(File outputFolder,boolean zipOutput){
  setOutputFolder(outputFolder);
  setZipOutput(zipOutput);
}","/** 
 * Butterfly default configuration
 * @param outputFolder the output folder where the transformed application issupposed to be placed
 * @param zipOutput if true, the transformed application folder will be compressed into a zip file
 */
public Configuration(File outputFolder,boolean zipOutput){
  setOutputFolder(outputFolder);
  setZipOutput(zipOutput);
}"
39578,"/** 
 * If set to true, the transformed application folder will be compressed to a zip file, and the transformed folder will be removed. The zip file will be named as the transformed application folder, plus the zip extension
 * @param zipOutput
 */
public void setZipOutput(boolean zipOutput){
  this.zipOutput=zipOutput;
}","/** 
 * If set to true, the transformed application folder will be compressed into a zip file, and the transformed folder will be removed. The zip file will be named as the transformed application folder, plus the zip extension
 * @param zipOutput if true, the transformed application folder will be compressed into a zip file
 */
public void setZipOutput(boolean zipOutput){
  this.zipOutput=zipOutput;
}"
39579,"/** 
 * @see {@link #setZipOutput(boolean)}
 * @return
 */
public boolean isZipOutput(){
  return zipOutput;
}","/** 
 * Returns whether the transformed application folder will be compressed into a zip file or not
 * @return whether the transformed application folder will be compressed into a zip file or not
 */
public boolean isZipOutput(){
  return zipOutput;
}"
39580,"/** 
 * The folder location in the file system where the transformed application should be placed. </br> If null, it defaults to same location where original application is. n this case the transformed application is placed under a new folder whose named is same as original folder, plus a ""-transformed-yyyyMMddHHmmssSSS"" suffix
 * @param outputFolder the output folder where the transformed application issupposed to be placed
 */
public void setOutputFolder(File outputFolder){
  if (outputFolder != null && (!outputFolder.exists() || !outputFolder.isDirectory())) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",outputFolder));
  }
  this.outputFolder=outputFolder;
}","/** 
 * The folder location in the file system where the transformed application should be placed. <br> If null, it defaults to same location where original application is. n this case the transformed application is placed under a new folder whose named is same as original folder, plus a ""-transformed-yyyyMMddHHmmssSSS"" suffix
 * @param outputFolder the output folder where the transformed application issupposed to be placed
 */
public void setOutputFolder(File outputFolder){
  if (outputFolder != null && (!outputFolder.exists() || !outputFolder.isDirectory())) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",outputFolder));
  }
  this.outputFolder=outputFolder;
}"
39581,"/** 
 * Operation to copy a directory and its content from one location to another. The files to be copied include sub-folders and their files, coming rom relative or absolute location. The path to the files to be copied are preserved, and those folders are also copied to the destination location. If the destination directory does not exist, it is created. But, if it does, then the content to be copied is merged with the destination content, with the source taking precedence.
 * @author facarvalho
 */
public CopyDirectory(){
  super(DESCRIPTION);
}","/** 
 * Operation to copy a directory and its content from one location to another. The files to be copied include sub-folders and their files, coming rom relative or absolute location. The path to the files to be copied are preserved, and those folders are also copied to the destination location. If the destination directory does not exist, it is created. But, if it does, then the content to be copied is merged with the destination content, with the source taking precedence.
 */
public CopyDirectory(){
  super(DESCRIPTION);
}"
39582,"/** 
 * Moves a directory and its content from one location to another. The directory to be moved is specified from relative or absolute location. If the destination directory does not exist, it is created.
 * @author facarvalho
 */
public MoveDirectory(){
  super(DESCRIPTION);
}","/** 
 * Moves a directory and its content from one location to another. The directory to be moved is specified from relative or absolute location. If the destination directory does not exist, it is created.
 */
public MoveDirectory(){
  super(DESCRIPTION);
}"
39583,"/** 
 * Operation to replace text in a text file based on a regular expression.
 * @param regex the regular expression to find replacement points
 * @param replacement the replacement text
 * @author facarvalho
 */
public ReplaceText(String regex,String replacement){
  setRegex(regex);
  setReplacement(replacement);
}","/** 
 * Operation to replace text in a text file based on a regular expression.
 * @param regex the regular expression to find replacement points
 * @param replacement the replacement text
 */
public ReplaceText(String regex,String replacement){
  setRegex(regex);
  setReplacement(replacement);
}"
39584,"public ButterflyCliRun run() throws IOException {
  ButterflyCliRun run=new ButterflyCliRun();
  run.setButterflyVersion(ButterflyProperties.getString(""String_Node_Str""));
  logger.info(ButterflyCliApp.getBanner());
  if (optionSet == null || optionSet.has(CLI_OPTION_HELP) || (!optionSet.hasOptions() && optionSet.nonOptionArguments() == null)) {
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    optionParser.printHelpOn(System.out);
    run.setExitStatus(0);
    return run;
  }
  if (optionSet.has(CLI_OPTION_VERBOSE)) {
    logConfigurator.setVerboseMode(true);
    logger.info(""String_Node_Str"");
  }
  if (optionSet.has(CLI_OPTION_DEBUG)) {
    logConfigurator.setDebugMode(true);
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"",ButterflyCliApp.getButterflyHome());
    logger.info(""String_Node_Str"",System.getenv(""String_Node_Str""));
    logger.info(""String_Node_Str"",System.getProperty(""String_Node_Str""));
    logger.info(""String_Node_Str"",System.getProperty(""String_Node_Str""));
    logger.info(""String_Node_Str"",System.getenv(""String_Node_Str""));
  }
  if (optionSet.has(CLI_OPTION_LIST_EXTENSIONS)) {
    try {
      printExtensionsList(butterflyFacade);
      run.setExitStatus(0);
      return run;
    }
 catch (    Exception e) {
      registerError(run,""String_Node_Str"",e);
      return run;
    }
  }
  logger.info(""String_Node_Str"");
  List<?> nonOptionArguments=optionSet.nonOptionArguments();
  if (nonOptionArguments == null || nonOptionArguments.size() == 0 || StringUtils.isEmpty(nonOptionArguments.get(0))) {
    registerError(run,""String_Node_Str"");
    return run;
  }
  File applicationFolder=new File((String)nonOptionArguments.get(0));
  if (!applicationFolder.exists()) {
    String errorMessage=String.format(""String_Node_Str"",applicationFolder.getAbsolutePath());
    registerError(run,errorMessage);
    return run;
  }
  run.setApplication(applicationFolder);
  File transformedApplicationFolder=(File)optionSet.valueOf(CLI_OPTION_TRANSFORMED_APP_FOLDER);
  boolean createZip=optionSet.has(CLI_OPTION_CREATE_ZIP);
  String templateClassName=null;
  Class<? extends TransformationTemplate> templateClass=null;
  if (optionSet.has(CLI_OPTION_TEMPLATE)) {
    templateClassName=(String)optionSet.valueOf(CLI_OPTION_TEMPLATE);
  }
 else   if (optionSet.has(CLI_OPTION_TEMPLATE_SHORTCUT)) {
    int shortcut=(Integer)optionSet.valueOf(CLI_OPTION_TEMPLATE_SHORTCUT);
    templateClass=getTemplateClass(shortcut);
    if (templateClass == null) {
      registerError(run,""String_Node_Str"");
      return run;
    }
    logger.info(""String_Node_Str"",shortcut,templateClass.getName());
  }
 else {
    try {
      templateClass=butterflyFacade.automaticResolution(applicationFolder);
      if (templateClass == null) {
        registerError(run,""String_Node_Str"");
        return run;
      }
      logger.info(""String_Node_Str"");
    }
 catch (    TemplateResolutionException e) {
      registerError(run,e.getMessage());
      return run;
    }
  }
  if (createZip) {
    logger.info(""String_Node_Str"");
  }
  Configuration configuration=new Configuration(transformedApplicationFolder,createZip);
  if (optionSet.has(CLI_OPTION_DEBUG)) {
    Extension extension=butterflyFacade.getRegisteredExtension();
    if (extension != null) {
      logger.info(""String_Node_Str"",extension.getClass().getName());
      logConfigurator.setLoggerLevel(extension.getClass().getPackage().getName(),Level.DEBUG);
    }
  }
  try {
    if (templateClass == null) {
      templateClass=(Class<? extends TransformationTemplate>)Class.forName(templateClassName);
    }
    run.setTransformationTemplate(templateClass.getName());
    TransformationResult transformationResult=null;
    if (UpgradeStep.class.isAssignableFrom(templateClass)) {
      Class<? extends UpgradeStep> firstStepClass=(Class<? extends UpgradeStep>)templateClass;
      String upgradeVersion=(String)optionSet.valueOf(CLI_OPTION_UPGRADE_VERSION);
      UpgradePath upgradePath=new UpgradePath(firstStepClass,upgradeVersion);
      logger.info(""String_Node_Str"",upgradePath.getOriginalVersion(),upgradePath.getUpgradeVersion());
      transformationResult=butterflyFacade.transform(applicationFolder,upgradePath,configuration);
    }
 else {
      logger.info(""String_Node_Str"");
      transformationResult=butterflyFacade.transform(applicationFolder,templateClass,configuration);
    }
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"",transformationResult.getTransformedApplicationLocation());
    logger.info(""String_Node_Str"",LogFileDefiner.getLogFile());
    run.setTransformedApplication(transformationResult.getTransformedApplicationLocation());
    run.setLogFile(LogFileDefiner.getLogFile());
    if (transformationResult.hasManualInstructions()) {
      logger.info(""String_Node_Str"");
      logger.info(""String_Node_Str"");
      logger.info(""String_Node_Str"");
      logger.info(""String_Node_Str"");
      logger.info(""String_Node_Str"",transformationResult.getManualInstructionsFile());
      logger.info(""String_Node_Str"");
      run.setManualInstructionsFile(transformationResult.getManualInstructionsFile());
    }
    logger.info(""String_Node_Str"");
  }
 catch (  ButterflyException|ButterflyRuntimeException e) {
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.error(""String_Node_Str"");
    logger.error(""String_Node_Str"",e.getMessage());
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"",LogFileDefiner.getLogFile().getAbsolutePath());
    run.setErrorMessage(""String_Node_Str"" + e.getMessage());
    run.setExceptionMessage(e.getMessage());
    run.setExitStatus(1);
    return run;
  }
catch (  ClassNotFoundException e) {
    registerError(run,""String_Node_Str"",e);
    return run;
  }
  return run;
}","public ButterflyCliRun run() throws IOException {
  ButterflyCliRun run=new ButterflyCliRun();
  run.setButterflyVersion(ButterflyProperties.getString(""String_Node_Str""));
  logger.info(ButterflyCliApp.getBanner());
  if (optionSet == null || optionSet.has(CLI_OPTION_HELP) || (!optionSet.hasOptions() && optionSet.nonOptionArguments() == null)) {
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    optionParser.printHelpOn(System.out);
    run.setExitStatus(0);
    return run;
  }
  if (optionSet.has(CLI_OPTION_VERBOSE)) {
    logConfigurator.setVerboseMode(true);
    logger.info(""String_Node_Str"");
  }
  if (optionSet.has(CLI_OPTION_DEBUG)) {
    logConfigurator.setDebugMode(true);
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"",ButterflyCliApp.getButterflyHome());
    logger.info(""String_Node_Str"",System.getenv(""String_Node_Str""));
    logger.info(""String_Node_Str"",System.getProperty(""String_Node_Str""));
    logger.info(""String_Node_Str"",System.getProperty(""String_Node_Str""));
    logger.info(""String_Node_Str"",System.getenv(""String_Node_Str""));
  }
  if (optionSet.has(CLI_OPTION_LIST_EXTENSIONS)) {
    try {
      printExtensionsList(butterflyFacade);
      run.setExitStatus(0);
      return run;
    }
 catch (    Exception e) {
      registerError(run,""String_Node_Str"",e);
      return run;
    }
  }
  logger.info(""String_Node_Str"");
  List<?> nonOptionArguments=optionSet.nonOptionArguments();
  if (nonOptionArguments == null || nonOptionArguments.size() == 0 || StringUtils.isEmpty(nonOptionArguments.get(0))) {
    registerError(run,""String_Node_Str"");
    return run;
  }
  File applicationFolder=new File((String)nonOptionArguments.get(0));
  if (!applicationFolder.exists()) {
    String errorMessage=String.format(""String_Node_Str"",applicationFolder.getAbsolutePath());
    registerError(run,errorMessage);
    return run;
  }
  run.setApplication(applicationFolder);
  File transformedApplicationFolder=(File)optionSet.valueOf(CLI_OPTION_TRANSFORMED_APP_FOLDER);
  boolean createZip=optionSet.has(CLI_OPTION_CREATE_ZIP);
  String templateClassName=null;
  Class<? extends TransformationTemplate> templateClass=null;
  if (optionSet.has(CLI_OPTION_TEMPLATE)) {
    templateClassName=(String)optionSet.valueOf(CLI_OPTION_TEMPLATE);
  }
 else   if (optionSet.has(CLI_OPTION_TEMPLATE_SHORTCUT)) {
    int shortcut=(Integer)optionSet.valueOf(CLI_OPTION_TEMPLATE_SHORTCUT);
    templateClass=getTemplateClass(shortcut);
    if (templateClass == null) {
      registerError(run,""String_Node_Str"");
      return run;
    }
    logger.info(""String_Node_Str"",shortcut,templateClass.getName());
  }
 else {
    try {
      templateClass=butterflyFacade.automaticResolution(applicationFolder);
      if (templateClass == null) {
        registerError(run,""String_Node_Str"");
        return run;
      }
      logger.info(""String_Node_Str"");
    }
 catch (    TemplateResolutionException e) {
      registerError(run,e.getMessage());
      return run;
    }
  }
  if (createZip) {
    logger.info(""String_Node_Str"");
  }
  Configuration configuration=new Configuration(transformedApplicationFolder,createZip);
  if (optionSet.has(CLI_OPTION_DEBUG)) {
    Extension extension=butterflyFacade.getRegisteredExtension();
    if (extension != null) {
      logger.info(""String_Node_Str"",extension.getClass().getName());
      logConfigurator.setLoggerLevel(extension.getClass().getPackage().getName(),Level.DEBUG);
    }
  }
  try {
    if (templateClass == null) {
      templateClass=(Class<? extends TransformationTemplate>)Class.forName(templateClassName);
    }
    run.setTransformationTemplate(templateClass.getName());
    TransformationResult transformationResult=null;
    if (UpgradeStep.class.isAssignableFrom(templateClass)) {
      Class<? extends UpgradeStep> firstStepClass=(Class<? extends UpgradeStep>)templateClass;
      String upgradeVersion=(String)optionSet.valueOf(CLI_OPTION_UPGRADE_VERSION);
      UpgradePath upgradePath=new UpgradePath(firstStepClass,upgradeVersion);
      logger.info(""String_Node_Str"",upgradePath.getOriginalVersion(),upgradePath.getUpgradeVersion());
      transformationResult=butterflyFacade.transform(applicationFolder,upgradePath,configuration);
    }
 else {
      logger.info(""String_Node_Str"");
      transformationResult=butterflyFacade.transform(applicationFolder,templateClass,configuration);
    }
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"",transformationResult.getTransformedApplicationLocation());
    logger.info(""String_Node_Str"",LogFileDefiner.getLogFile());
    run.setTransformedApplication(transformationResult.getTransformedApplicationLocation());
    run.setLogFile(LogFileDefiner.getLogFile());
    if (transformationResult.hasManualInstructions()) {
      logger.info(""String_Node_Str"");
      logger.info(""String_Node_Str"");
      logger.info(""String_Node_Str"");
      logger.info(""String_Node_Str"");
      logger.info(""String_Node_Str"",transformationResult.getManualInstructionsFile());
      logger.info(""String_Node_Str"");
      run.setManualInstructionsFile(transformationResult.getManualInstructionsFile());
    }
    logger.info(""String_Node_Str"");
  }
 catch (  ButterflyException|ButterflyRuntimeException e) {
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.error(""String_Node_Str"");
    logger.error(""String_Node_Str"",e.getMessage());
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"",LogFileDefiner.getLogFile().getAbsolutePath());
    run.setErrorMessage(""String_Node_Str"" + e.getMessage());
    run.setExceptionMessage(e.getMessage());
    run.setExitStatus(1);
    return run;
  }
catch (  ClassNotFoundException e) {
    registerError(run,""String_Node_Str"",e);
    return run;
  }
catch (  IllegalArgumentException e) {
    registerError(run,""String_Node_Str"",e);
    return run;
  }
catch (  Exception e) {
    registerError(run,""String_Node_Str"",e);
    return run;
  }
  return run;
}"
39585,"private void registerError(ButterflyCliRun run,String errorMessage,Exception exception){
  if (exception == null) {
    logger.error(errorMessage);
  }
 else {
    logger.error(errorMessage,exception);
    run.setExceptionMessage(exception.getMessage());
  }
  run.setErrorMessage(errorMessage);
  run.setExitStatus(1);
}","private void registerError(ButterflyCliRun run,String errorMessage,Exception exception){
  if (exception == null || !logConfigurator.isVerboseMode()) {
    logger.error(errorMessage);
  }
 else {
    logger.error(errorMessage,exception);
  }
  if (exception != null) {
    run.setExceptionMessage(exception.getMessage());
  }
  run.setErrorMessage(errorMessage);
  run.setExitStatus(1);
}"
39586,"@Override public void setVerboseMode(boolean on){
  PatternLayoutEncoder patternLayoutEncoder=new PatternLayoutEncoder();
  patternLayoutEncoder.setPattern(""String_Node_Str"");
  patternLayoutEncoder.setContext(loggerContext);
  patternLayoutEncoder.start();
  Appender<ILoggingEvent> consoleAppender=new ConsoleAppender();
  ((OutputStreamAppender)consoleAppender).setEncoder(patternLayoutEncoder);
  consoleAppender.setContext(loggerContext);
  consoleAppender.start();
  loggerContext.getLogger(""String_Node_Str"").detachAppender(""String_Node_Str"");
  loggerContext.getLogger(""String_Node_Str"").addAppender(consoleAppender);
}","@Override public void setVerboseMode(boolean verboseMode){
  this.verboseMode=verboseMode;
  if (verboseMode) {
    PatternLayoutEncoder patternLayoutEncoder=new PatternLayoutEncoder();
    patternLayoutEncoder.setPattern(""String_Node_Str"");
    patternLayoutEncoder.setContext(loggerContext);
    patternLayoutEncoder.start();
    Appender<ILoggingEvent> consoleAppender=new ConsoleAppender();
    ((OutputStreamAppender)consoleAppender).setEncoder(patternLayoutEncoder);
    consoleAppender.setContext(loggerContext);
    consoleAppender.start();
    loggerContext.getLogger(""String_Node_Str"").detachAppender(""String_Node_Str"");
    loggerContext.getLogger(""String_Node_Str"").addAppender(consoleAppender);
  }
 else {
  }
}"
39587,"private void setAbsoluteFile(File transformedAppFolder,TransformationContext transformationContext) throws TransformationUtilityException {
  if (absoluteFileFromContextAttribute != null) {
    absoluteFile=(File)transformationContext.get(absoluteFileFromContextAttribute);
    if (absoluteFile == null) {
      String exceptionMessage=String.format(""String_Node_Str"",absoluteFileFromContextAttribute,name);
      TransformationUtilityException exception=new TransformationUtilityException(exceptionMessage);
      throw exception;
    }
    if (additionalRelativePath != null) {
      absoluteFile=new File(absoluteFile,additionalRelativePath);
      logger.debug(""String_Node_Str"",name,absoluteFileFromContextAttribute,absoluteFile.getAbsolutePath());
    }
 else {
      logger.debug(""String_Node_Str"",name,absoluteFileFromContextAttribute);
    }
    setRelativePath(transformedAppFolder,absoluteFile);
    logger.debug(""String_Node_Str"",name,relativePath);
  }
 else {
    if (relativePath == null) {
      String exceptionMessage=String.format(""String_Node_Str"",name);
      TransformationUtilityException exception=new TransformationUtilityException(exceptionMessage);
      throw exception;
    }
    absoluteFile=new File(transformedAppFolder,relativePath);
  }
}","private void setAbsoluteFile(File transformedAppFolder,TransformationContext transformationContext) throws TransformationUtilityException {
  if (absoluteFileFromContextAttribute != null) {
    absoluteFile=(File)transformationContext.get(absoluteFileFromContextAttribute);
    if (absoluteFile == null) {
      String exceptionMessage=String.format(""String_Node_Str"",absoluteFileFromContextAttribute,name);
      throw new TransformationUtilityException(exceptionMessage);
    }
    if (additionalRelativePath != null) {
      absoluteFile=new File(absoluteFile,additionalRelativePath);
      logger.debug(""String_Node_Str"",name,absoluteFileFromContextAttribute,absoluteFile.getAbsolutePath());
    }
 else {
      logger.debug(""String_Node_Str"",name,absoluteFileFromContextAttribute);
    }
    setRelativePath(transformedAppFolder,absoluteFile);
    logger.debug(""String_Node_Str"",name,relativePath);
  }
 else {
    if (relativePath == null) {
      String exceptionMessage=String.format(""String_Node_Str"",name);
      throw new TransformationUtilityException(exceptionMessage);
    }
    absoluteFile=new File(transformedAppFolder,relativePath);
  }
}"
39588,"public static void main(String... arguments) throws IOException {
  setButterflyHome();
  setEnvironment(arguments);
  logger=LoggerFactory.getLogger(ButterflyCliApp.class);
  setBanner();
  ConfigurableApplicationContext applicationContext=SpringApplication.run(ButterflyCliApp.class,arguments);
  ButterflyCliRunner butterflyCliRunner=applicationContext.getBean(ButterflyCliRunner.class);
  ButterflyCliRun run=butterflyCliRunner.run();
  if (optionSet != null && optionSet.has(CLI_OPTION_RESULT_FILE)) {
    run.setInputArguments(arguments);
    writeResultFile(run);
  }
  System.exit(run.getExitStatus());
}","@SuppressWarnings(""String_Node_Str"") public static void main(String... arguments) throws IOException {
  setButterflyHome();
  setEnvironment(arguments);
  logger=LoggerFactory.getLogger(ButterflyCliApp.class);
  setBanner();
  ConfigurableApplicationContext applicationContext=SpringApplication.run(ButterflyCliApp.class,arguments);
  ButterflyCliRunner butterflyCliRunner=applicationContext.getBean(ButterflyCliRunner.class);
  ButterflyCliRun run=butterflyCliRunner.run();
  if (optionSet != null && optionSet.has(CLI_OPTION_RESULT_FILE)) {
    run.setInputArguments(arguments);
    writeResultFile(run);
  }
  System.exit(run.getExitStatus());
}"
39589,"private static void setEnvironment(String[] arguments){
  if (arguments.length != 0) {
    try {
      setOptionSet(arguments);
      File applicationFolder=getApplicationFolder();
      boolean debug=optionSet.has(CLI_OPTION_DEBUG);
      LogFileDefiner.setLogFileName(applicationFolder,debug);
    }
 catch (    OptionException e) {
      Logger logger=LoggerFactory.getLogger(ButterflyCliApp.class);
      setBanner();
      logger.info(getBanner());
      logger.error(e.getMessage());
      System.exit(1);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private static void setEnvironment(String[] arguments){
  if (arguments.length != 0) {
    try {
      setOptionSet(arguments);
      File applicationFolder=getApplicationFolder();
      boolean debug=optionSet.has(CLI_OPTION_DEBUG);
      LogFileDefiner.setLogFileName(applicationFolder,debug);
    }
 catch (    OptionException e) {
      Logger logger=LoggerFactory.getLogger(ButterflyCliApp.class);
      setBanner();
      logger.info(getBanner());
      logger.error(e.getMessage());
      System.exit(1);
    }
  }
}"
39590,"void registerResult(PerformResult result){
  ExecutionResult executionResult=null;
switch (result.getType()) {
case ERROR:
    performResults.errorCount++;
  break;
case EXECUTION_RESULT:
performResults.executionResultCount++;
executionResult=result.getExecutionResult();
break;
case SKIPPED_CONDITION:
performResults.skippedConditionCount++;
break;
case SKIPPED_DEPENDENCY:
performResults.skippedDependencyCount++;
break;
default :
logger.error(""String_Node_Str"",result.getType());
}
TransformationUtility source=result.getSource();
if (source instanceof TransformationOperation) {
operationsCount++;
if (executionResult != null) {
TOExecutionResult toExecutionResult=(TOExecutionResult)executionResult;
switch (toExecutionResult.getType()) {
case NO_OP:
executionResults.operations.noOpCount++;
break;
case SUCCESS:
executionResults.operations.successCount++;
break;
case WARNING:
executionResults.operations.warningCount++;
break;
case ERROR:
executionResults.operations.errorCount++;
break;
default :
logger.error(""String_Node_Str"",result.getType());
}
}
}
 else {
utilitiesCount++;
if (executionResult != null) {
TUExecutionResult tuExecutionResult=(TUExecutionResult)executionResult;
switch (tuExecutionResult.getType()) {
case NULL:
executionResults.utilities.nullCount++;
break;
case VALUE:
executionResults.utilities.valueCount++;
break;
case WARNING:
executionResults.utilities.warningCount++;
break;
case ERROR:
executionResults.utilities.errorCount++;
break;
default :
logger.error(""String_Node_Str"",result.getType());
}
}
}
}","void registerResult(PerformResult result){
  ExecutionResult executionResult=null;
switch (result.getType()) {
case ERROR:
    performResults.errorCount++;
  break;
case EXECUTION_RESULT:
performResults.executionResultCount++;
executionResult=result.getExecutionResult();
break;
case SKIPPED_CONDITION:
performResults.skippedConditionCount++;
break;
case SKIPPED_DEPENDENCY:
performResults.skippedDependencyCount++;
break;
default :
logger.error(""String_Node_Str"",result.getType());
break;
}
TransformationUtility source=result.getSource();
if (source instanceof TransformationOperation) {
operationsCount++;
if (executionResult != null) {
TOExecutionResult toExecutionResult=(TOExecutionResult)executionResult;
switch (toExecutionResult.getType()) {
case NO_OP:
executionResults.operations.noOpCount++;
break;
case SUCCESS:
executionResults.operations.successCount++;
break;
case WARNING:
executionResults.operations.warningCount++;
break;
case ERROR:
executionResults.operations.errorCount++;
break;
default :
logger.error(""String_Node_Str"",result.getType());
break;
}
}
}
 else {
utilitiesCount++;
if (executionResult != null) {
TUExecutionResult tuExecutionResult=(TUExecutionResult)executionResult;
switch (tuExecutionResult.getType()) {
case NULL:
executionResults.utilities.nullCount++;
break;
case VALUE:
executionResults.utilities.valueCount++;
break;
case WARNING:
executionResults.utilities.warningCount++;
break;
case ERROR:
executionResults.utilities.errorCount++;
break;
default :
logger.error(""String_Node_Str"",result.getType());
break;
}
}
}
}"
39591,"@Override protected ExecutionResult execution(File transformedAppFolder,TransformationContext transformationContext){
  executed=true;
  try {
    attributeValue=(VT)transformationContext.get(attributeName);
    return TUExecutionResult.nullResult(this);
  }
 catch (  IllegalArgumentException|ClassCastException ex) {
    return TUExecutionResult.error(this,ex);
  }
}","@Override protected ExecutionResult execution(File transformedAppFolder,TransformationContext transformationContext){
  executed=true;
  try {
    attributeValue=(T)transformationContext.get(attributeName);
    return TUExecutionResult.nullResult(this);
  }
 catch (  IllegalArgumentException|ClassCastException ex) {
    return TUExecutionResult.error(this,ex);
  }
}"
39592,"/** 
 * Returns the value of the transformation context attribute specified earlier. If the attribute value is null, null is returned. If this method is called prior to the execution of this transformation utility, an   {@link IllegalStateException} is thrown.
 * @return the value of the transformation context attribute specified earlier
 */
public VT getAttributeValue(){
  if (!executed) {
    throw new IllegalStateException(getName() + ""String_Node_Str"");
  }
  return attributeValue;
}","/** 
 * Returns the value of the transformation context attribute specified earlier. If the attribute value is null, null is returned. If this method is called prior to the execution of this transformation utility, an   {@link IllegalStateException} is thrown.
 * @return the value of the transformation context attribute specified earlier
 */
public T getAttributeValue(){
  if (!executed) {
    throw new IllegalStateException(getName() + ""String_Node_Str"");
  }
  return attributeValue;
}"
39593,"/** 
 * Set the name of the transformation context attribute that refers to the file to be compared against the baseline file, which is set by regular   {@link com.paypal.butterfly.extensions.api.TransformationUtility}methods, like   {@link #relative(String)} or {@link #absolute(String)}
 * @param attribute the name of the transformation context attributethat refers to the file to be compared against the baseline file
 * @return this utility condition instance
 */
public DUC setAttribute(String attribute){
  checkForBlankString(""String_Node_Str"",attribute);
  this.attribute=attribute;
  return (DUC)this;
}","/** 
 * Set the name of the transformation context attribute that refers to the file to be compared against the baseline file, which is set by regular   {@link com.paypal.butterfly.extensions.api.TransformationUtility}methods, like   {@link #relative(String)} or {@link #absolute(String)}
 * @param attribute the name of the transformation context attributethat refers to the file to be compared against the baseline file
 * @return this utility condition instance
 */
public T setAttribute(String attribute){
  checkForBlankString(""String_Node_Str"",attribute);
  this.attribute=attribute;
  return (T)this;
}"
39594,"private RT setSource(S source){
  if (source == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.source=source;
  return (RT)this;
}","private R setSource(S source){
  if (source == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.source=source;
  return (R)this;
}"
39595,"protected RT setType(T type){
  if (type == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.type=type;
  return (RT)this;
}","protected R setType(T type){
  if (type == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.type=type;
  return (R)this;
}"
39596,"public RT setDetails(String details){
  this.details=details;
  return (RT)this;
}","public R setDetails(String details){
  this.details=details;
  return (R)this;
}"
39597,"/** 
 * Add a new warning associated with this result. Warnings never imply the result is non-successful, only errors do
 * @param warning the warning to be added
 * @return this object
 */
public RT addWarning(Exception warning){
  warnings.add(warning);
  changeTypeOnWarning();
  return (RT)this;
}","/** 
 * Add a new warning associated with this result. Warnings never imply the result is non-successful, only errors do
 * @param warning the warning to be added
 * @return this object
 */
public R addWarning(Exception warning){
  warnings.add(warning);
  changeTypeOnWarning();
  return (R)this;
}"
39598,"/** 
 * Set the exception associated with this result. This exception can only be set if the result type allows it. If that is not the case, an   {@link IllegalArgumentException}will be thrown
 * @param exception associated with the execution result
 * @return this object
 */
protected RT setException(Exception exception){
  if (exception == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!isExceptionType()) {
    throw new IllegalArgumentException(""String_Node_Str"" + type);
  }
  this.exception=exception;
  return (RT)this;
}","/** 
 * Set the exception associated with this result. This exception can only be set if the result type allows it. If that is not the case, an   {@link IllegalArgumentException}will be thrown
 * @param exception associated with the execution result
 * @return this object
 */
protected R setException(Exception exception){
  if (exception == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!isExceptionType()) {
    throw new IllegalArgumentException(""String_Node_Str"" + type);
  }
  this.exception=exception;
  return (R)this;
}"
39599,"/** 
 * To Test Transformation with -s options
 * @throws IOException
 * @throws ButterflyException
 */
@Test public void testTransformationWithShortcut() throws IOException, ButterflyException {
  Mockito.when(facade.getRegisteredExtension()).thenReturn(new SampleExtension());
  String arguments[]={sampleAppFolder.getAbsolutePath(),""String_Node_Str"",""String_Node_Str""};
  butterflyCli.setOptionSet(arguments);
  int status=butterflyCli.run().getExitStatus();
  Assert.assertEquals(status,0);
  verify(facade,times(1)).transform(eq(sampleAppFolder),eq(SampleTransformationTemplate.class),eq(new Configuration(null,false)));
}","/** 
 * To Test Transformation with -s options
 * @throws IOException
 * @throws ButterflyException
 */
@Test public void testTransformationWithShortcut() throws IOException, ButterflyException {
  when(facade.getRegisteredExtension()).thenReturn(new SampleExtension());
  String arguments[]={sampleAppFolder.getAbsolutePath(),""String_Node_Str"",""String_Node_Str""};
  butterflyCli.setOptionSet(arguments);
  int status=butterflyCli.run().getExitStatus();
  Assert.assertEquals(status,0);
  verify(facade,times(1)).transform(eq(sampleAppFolder),eq(SampleTransformationTemplate.class),eq(new Configuration(null,false)));
}"
39600,"@Test public void testAutomaticResolution() throws IOException, ButterflyException {
  Mockito.doReturn(SampleTransformationTemplate.class).when(facade).automaticResolution(Mockito.any(File.class));
  String arguments[]={sampleAppFolder.getAbsolutePath()};
  butterflyCli.setOptionSet(arguments);
  int status=butterflyCli.run().getExitStatus();
  verify(facade,times(1)).automaticResolution(eq(sampleAppFolder));
  verify(facade,times(1)).transform(eq(sampleAppFolder),eq(SampleTransformationTemplate.class),eq(new Configuration(null,false)));
  Assert.assertEquals(status,0);
}","@Test public void testAutomaticResolution() throws IOException, ButterflyException {
  doReturn(SampleTransformationTemplate.class).when(facade).automaticResolution(any(File.class));
  String arguments[]={sampleAppFolder.getAbsolutePath()};
  butterflyCli.setOptionSet(arguments);
  int status=butterflyCli.run().getExitStatus();
  verify(facade,times(1)).automaticResolution(eq(sampleAppFolder));
  verify(facade,times(1)).transform(eq(sampleAppFolder),eq(SampleTransformationTemplate.class),eq(new Configuration(null,false)));
  Assert.assertEquals(status,0);
}"
39601,"/** 
 * To Test Transformation with -t and -s options. Option -s should be ignored, since -t was also provided
 * @throws IOException
 * @throws ButterflyException
 */
@Test public void testTransformationWithShortcutButIgnoringIt() throws IOException, ButterflyException {
  Mockito.when(facade.getRegisteredExtension()).thenReturn(new SampleExtension());
  String arguments[]={sampleAppFolder.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  butterflyCli.setOptionSet(arguments);
  int status=butterflyCli.run().getExitStatus();
  Assert.assertEquals(status,0);
  verify(facade,times(1)).transform(eq(sampleAppFolder),eq(SampleTransformationTemplate.class),eq(new Configuration(null,true)));
  verify(facade,times(0)).getRegisteredExtension();
}","/** 
 * To Test Transformation with -t and -s options. Option -s should be ignored, since -t was also provided
 * @throws IOException
 * @throws ButterflyException
 */
@Test public void testTransformationWithShortcutButIgnoringIt() throws IOException, ButterflyException {
  when(facade.getRegisteredExtension()).thenReturn(new SampleExtension());
  String arguments[]={sampleAppFolder.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  butterflyCli.setOptionSet(arguments);
  int status=butterflyCli.run().getExitStatus();
  Assert.assertEquals(status,0);
  verify(facade,times(1)).transform(eq(sampleAppFolder),eq(SampleTransformationTemplate.class),eq(new Configuration(null,true)));
  verify(facade,times(0)).getRegisteredExtension();
}"
39602,"@BeforeMethod public void beforeTest() throws ButterflyException {
  TransformationResult mockResult=Mockito.mock(TransformationResult.class);
  Mockito.when(facade.transform(Mockito.any(File.class),Mockito.any(String.class))).thenReturn(mockResult);
  Mockito.when(facade.transform(Mockito.any(File.class),Mockito.any(String.class),Mockito.any(Configuration.class))).thenReturn(mockResult);
  Mockito.when(facade.transform(Mockito.any(File.class),Mockito.any(Class.class))).thenReturn(mockResult);
  Mockito.when(facade.transform(Mockito.any(File.class),Mockito.any(Class.class),Mockito.any(Configuration.class))).thenReturn(mockResult);
  Mockito.when(facade.transform(Mockito.any(File.class),Mockito.any(UpgradePath.class))).thenReturn(mockResult);
  Mockito.when(facade.transform(Mockito.any(File.class),Mockito.any(UpgradePath.class),Mockito.any(Configuration.class))).thenReturn(mockResult);
  File file=new File(""String_Node_Str"");
  Mockito.when(mockResult.getTransformedApplicationLocation()).thenReturn(file);
  Mockito.when(mockResult.getManualInstructionsFile()).thenReturn(file);
  sampleAppFolder=new File(this.getClass().getResource(""String_Node_Str"").getFile());
}","@BeforeMethod public void beforeTest() throws ButterflyException {
  TransformationResult mockResult=mock(TransformationResult.class);
  when(facade.transform(any(File.class),any(String.class))).thenReturn(mockResult);
  when(facade.transform(any(File.class),any(String.class),any(Configuration.class))).thenReturn(mockResult);
  when(facade.transform(any(File.class),any(Class.class))).thenReturn(mockResult);
  when(facade.transform(any(File.class),any(Class.class),any(Configuration.class))).thenReturn(mockResult);
  when(facade.transform(any(File.class),any(UpgradePath.class))).thenReturn(mockResult);
  when(facade.transform(any(File.class),any(UpgradePath.class),any(Configuration.class))).thenReturn(mockResult);
  File file=new File(""String_Node_Str"");
  when(mockResult.getTransformedApplicationLocation()).thenReturn(file);
  when(mockResult.getManualInstructionsFile()).thenReturn(file);
  sampleAppFolder=new File(this.getClass().getResource(""String_Node_Str"").getFile());
}"
39603,"void registerResult(PerformResult result){
  ExecutionResult executionResult=null;
switch (result.getType()) {
case ERROR:
    performResults.errorCount++;
  break;
case EXECUTION_RESULT:
performResults.executionResultCount++;
executionResult=result.getExecutionResult();
break;
case SKIPPED_CONDITION:
performResults.skippedConditionCount++;
break;
case SKIPPED_DEPENDENCY:
performResults.skippedDependencyCount++;
break;
}
TransformationUtility source=result.getSource();
if (source instanceof TransformationOperation) {
operationsCount++;
if (executionResult != null) {
TOExecutionResult toExecutionResult=(TOExecutionResult)executionResult;
switch (toExecutionResult.getType()) {
case NO_OP:
executionResults.operations.noOpCount++;
break;
case SUCCESS:
executionResults.operations.successCount++;
break;
case WARNING:
executionResults.operations.warningCount++;
break;
case ERROR:
executionResults.operations.errorCount++;
break;
}
}
}
 else {
utilitiesCount++;
if (executionResult != null) {
TUExecutionResult tuExecutionResult=(TUExecutionResult)executionResult;
switch (tuExecutionResult.getType()) {
case NULL:
executionResults.utilities.nullCount++;
break;
case VALUE:
executionResults.utilities.valueCount++;
break;
case WARNING:
executionResults.utilities.warningCount++;
break;
case ERROR:
executionResults.utilities.errorCount++;
break;
}
}
}
}","void registerResult(PerformResult result){
  ExecutionResult executionResult=null;
switch (result.getType()) {
case ERROR:
    performResults.errorCount++;
  break;
case EXECUTION_RESULT:
performResults.executionResultCount++;
executionResult=result.getExecutionResult();
break;
case SKIPPED_CONDITION:
performResults.skippedConditionCount++;
break;
case SKIPPED_DEPENDENCY:
performResults.skippedDependencyCount++;
break;
default :
logger.error(""String_Node_Str"",result.getType());
}
TransformationUtility source=result.getSource();
if (source instanceof TransformationOperation) {
operationsCount++;
if (executionResult != null) {
TOExecutionResult toExecutionResult=(TOExecutionResult)executionResult;
switch (toExecutionResult.getType()) {
case NO_OP:
executionResults.operations.noOpCount++;
break;
case SUCCESS:
executionResults.operations.successCount++;
break;
case WARNING:
executionResults.operations.warningCount++;
break;
case ERROR:
executionResults.operations.errorCount++;
break;
default :
logger.error(""String_Node_Str"",result.getType());
}
}
}
 else {
utilitiesCount++;
if (executionResult != null) {
TUExecutionResult tuExecutionResult=(TUExecutionResult)executionResult;
switch (tuExecutionResult.getType()) {
case NULL:
executionResults.utilities.nullCount++;
break;
case VALUE:
executionResults.utilities.valueCount++;
break;
case WARNING:
executionResults.utilities.warningCount++;
break;
case ERROR:
executionResults.utilities.errorCount++;
break;
default :
logger.error(""String_Node_Str"",result.getType());
}
}
}
}"
39604,"@Test(expectedExceptions=InternalException.class,expectedExceptionsMessageRegExp=""String_Node_Str"" + ""String_Node_Str"") public void testTransformWithAbstractTemplate() throws ButterflyException {
  butterflyFacadeImpl.transform(applicationFolder,""String_Node_Str"");
}","@Test(expectedExceptions=InternalException.class,expectedExceptionsMessageRegExp=""String_Node_Str"") public void testTransformWithAbstractTemplate() throws ButterflyException {
  butterflyFacadeImpl.transform(applicationFolder,""String_Node_Str"");
}"
39605,"@Test public void testTransformWithValidTemplate() throws ButterflyException {
  TemplateTransformation templateTransformation=new TemplateTransformation(new Application(applicationFolder),new SampleTransformationTemplate(),new Configuration());
  butterflyFacadeImpl.transform(applicationFolder,""String_Node_Str"");
  verify(transformationEngine,times(1)).perform((TemplateTransformation)anyObject());
}","@Test public void testTransformWithValidTemplate() throws ButterflyException {
  butterflyFacadeImpl.transform(applicationFolder,""String_Node_Str"");
  verify(transformationEngine,times(1)).perform((TemplateTransformation)anyObject());
}"
39606,"@Override protected final TO setSaveResult(boolean saveResult){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override protected final T setSaveResult(boolean saveResult){
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
39607,"public int getOrder(){
  return order;
}","/** 
 * Returns the execution order for this utility on its parent. Value -1 means it has not been registered to any parent yet, while 1 means first.
 * @return the execution order for this utility on its parent
 */
public int getOrder(){
  return order;
}"
39608,"/** 
 * Performs the transformation utility against the application to be transformed <br> This is the one called by the transformation engine, and regardless of any customization it could have, it must always: <ol> <li>1- Call   {@link #applyPropertiesFromContext(TransformationContext)}</li> <li>2- Call   {@link #execution(File,TransformationContext)}</li> </ol> <br> This method is NOT supposed to be overwritten, unless you really know what you are doing.
 * @param transformedAppFolder the folder where the transformed application code is
 * @param transformationContext the transformation context object
 * @return the result
 */
@SuppressFBWarnings(""String_Node_Str"") public PerformResult perform(File transformedAppFolder,TransformationContext transformationContext) throws TransformationUtilityException {
  if (hasBeenPerformed.get()) {
    String exceptionMessage=String.format(""String_Node_Str"",getName());
    TransformationUtilityException e=new TransformationUtilityException(exceptionMessage);
    return PerformResult.error(this,e);
  }
  if (ifConditionAttributeName != null) {
    Object conditionResult=transformationContext.get(ifConditionAttributeName);
    if (conditionResult == null || conditionResult instanceof Boolean && !((Boolean)conditionResult).booleanValue()) {
      String details=String.format(""String_Node_Str"",getName(),ifConditionAttributeName);
      return PerformResult.skippedCondition(this,details);
    }
  }
  if (unlessConditionAttributeName != null) {
    Object conditionResult=transformationContext.get(unlessConditionAttributeName);
    if (conditionResult != null && conditionResult instanceof Boolean && ((Boolean)conditionResult).booleanValue()) {
      String details=String.format(""String_Node_Str"",getName(),unlessConditionAttributeName);
      return PerformResult.skippedCondition(this,details);
    }
  }
  if (utilityCondition != null) {
    try {
      TransformationUtility utilityCondition=this.utilityCondition.clone();
      utilityCondition.relative(this.getRelativePath());
      TUExecutionResult conditionExecutionResult=(TUExecutionResult)utilityCondition.execution(transformedAppFolder,transformationContext);
      Object conditionResult=conditionExecutionResult.getValue();
      if (conditionResult == null || conditionResult instanceof Boolean && !((Boolean)conditionResult).booleanValue()) {
        String utilityConditionName=(utilityCondition.getName() == null ? utilityCondition.toString() : utilityCondition.getName());
        String details=String.format(""String_Node_Str"",getName(),utilityConditionName);
        return PerformResult.skippedCondition(this,details);
      }
    }
 catch (    CloneNotSupportedException e) {
      String exceptionMessage=String.format(""String_Node_Str"",getName());
      TransformationUtilityException ex=new TransformationUtilityException(exceptionMessage,e);
      return PerformResult.error(this,ex);
    }
  }
  PerformResult result=(PerformResult)checkDependencies(transformationContext);
  if (result != null) {
    return result;
  }
  applyPropertiesFromContext(transformationContext);
  try {
    ExecutionResult executionResult=execution(transformedAppFolder,transformationContext);
    result=PerformResult.executionResult(this,executionResult);
  }
 catch (  Exception e) {
    String exceptionMessage=String.format(""String_Node_Str"",getName());
    TransformationUtilityException ex=new TransformationUtilityException(exceptionMessage,e);
    return PerformResult.error(this,ex);
  }
 finally {
    if (result == null) {
      String exceptionMessage=String.format(""String_Node_Str"",getName());
      TransformationUtilityException ex=new TransformationUtilityException(exceptionMessage);
      logger.error(""String_Node_Str"",ex);
    }
    hasBeenPerformed.set(true);
  }
  if (result == null) {
    String exceptionMessage=String.format(""String_Node_Str"",getName());
    TransformationUtilityException ex=new TransformationUtilityException(exceptionMessage);
    result=PerformResult.error(this,ex);
  }
  return result;
}","/** 
 * Performs the transformation utility against the application to be transformed <br> This is the one called by the transformation engine, and regardless of any customization it could have, it must always: <ol> <li>1- Call   {@link #applyPropertiesFromContext(TransformationContext)}</li> <li>2- Call   {@link #execution(File,TransformationContext)}</li> </ol> <br> This method is NOT supposed to be overwritten, unless you really know what you are doing.
 * @param transformedAppFolder the folder where the transformed application code is
 * @param transformationContext the transformation context object
 * @return the result
 */
@SuppressFBWarnings(""String_Node_Str"") public PerformResult perform(File transformedAppFolder,TransformationContext transformationContext) throws TransformationUtilityException {
  if (hasBeenPerformed.get()) {
    String exceptionMessage=String.format(""String_Node_Str"",getName());
    TransformationUtilityException e=new TransformationUtilityException(exceptionMessage);
    return PerformResult.error(this,e);
  }
  if (ifConditionAttributeName != null) {
    Object conditionResult=transformationContext.get(ifConditionAttributeName);
    if (conditionResult == null || conditionResult instanceof Boolean && !((Boolean)conditionResult).booleanValue()) {
      String details=String.format(""String_Node_Str"",getName(),ifConditionAttributeName);
      return PerformResult.skippedCondition(this,details);
    }
  }
  if (unlessConditionAttributeName != null) {
    Object conditionResult=transformationContext.get(unlessConditionAttributeName);
    if (conditionResult != null && conditionResult instanceof Boolean && ((Boolean)conditionResult).booleanValue()) {
      String details=String.format(""String_Node_Str"",getName(),unlessConditionAttributeName);
      return PerformResult.skippedCondition(this,details);
    }
  }
  if (utilityCondition != null) {
    try {
      TransformationUtility utilityCondition=this.utilityCondition.clone();
      utilityCondition.relative(this.getRelativePath());
      TUExecutionResult conditionExecutionResult=(TUExecutionResult)utilityCondition.execution(transformedAppFolder,transformationContext);
      Object conditionResult=conditionExecutionResult.getValue();
      if (conditionResult == null || conditionResult instanceof Boolean && !((Boolean)conditionResult).booleanValue()) {
        String utilityConditionName=(utilityCondition.getName() == null ? utilityCondition.toString() : utilityCondition.getName());
        String details=String.format(""String_Node_Str"",getName(),utilityConditionName);
        return PerformResult.skippedCondition(this,details);
      }
    }
 catch (    CloneNotSupportedException e) {
      String exceptionMessage=String.format(""String_Node_Str"",getName());
      TransformationUtilityException ex=new TransformationUtilityException(exceptionMessage,e);
      return PerformResult.error(this,ex);
    }
  }
  PerformResult result=(PerformResult)checkDependencies(transformationContext);
  if (result != null) {
    return result;
  }
  applyPropertiesFromContext(transformationContext);
  TransformationUtilityException ex=null;
  try {
    ExecutionResult executionResult=execution(transformedAppFolder,transformationContext);
    result=PerformResult.executionResult(this,executionResult);
  }
 catch (  Exception e) {
    String exceptionMessage=String.format(""String_Node_Str"",getName());
    ex=new TransformationUtilityException(exceptionMessage,e);
    return PerformResult.error(this,ex);
  }
 finally {
    if (result == null && ex == null) {
      String exceptionMessage=String.format(""String_Node_Str"",getName());
      ex=new TransformationUtilityException(exceptionMessage);
      logger.error(""String_Node_Str"",ex);
    }
    hasBeenPerformed.set(true);
  }
  if (result == null) {
    String exceptionMessage=String.format(""String_Node_Str"",getName());
    ex=new TransformationUtilityException(exceptionMessage);
    result=PerformResult.error(this,ex);
  }
  return result;
}"
39609,"private Model createModel(File pomFile){
  FileInputStream fileInputStream=null;
  Exception ex=null;
  Model model=null;
  try {
    MavenXpp3Reader reader=new MavenXpp3Reader();
    fileInputStream=new FileInputStream(pomFile);
    model=reader.read(fileInputStream);
    if (model.getGroupId() == null)     model.setGroupId(model.getParent().getGroupId());
    if (model.getVersion() == null)     model.setVersion(model.getParent().getVersion());
    model.setPomFile(pomFile);
  }
 catch (  IOException|XmlPullParserException e) {
    ex=e;
    String exceptionMessage=String.format(""String_Node_Str"",pomFile.getAbsolutePath());
    throw new TransformationUtilityException(exceptionMessage,ex);
  }
 finally {
    if (fileInputStream != null)     try {
      fileInputStream.close();
    }
 catch (    IOException e) {
      if (ex != null)       ex.addSuppressed(e);
    }
  }
  return model;
}","private Model createModel(File pomFile){
  FileInputStream fileInputStream=null;
  Exception ex=null;
  Model model=null;
  try {
    MavenXpp3Reader reader=new MavenXpp3Reader();
    fileInputStream=new FileInputStream(pomFile);
    model=reader.read(fileInputStream);
    if (model.getGroupId() == null)     model.setGroupId(model.getParent().getGroupId());
    if (model.getVersion() == null)     model.setVersion(model.getParent().getVersion());
    model.setPomFile(pomFile);
  }
 catch (  Exception e) {
    ex=e;
    String exceptionMessage=String.format(""String_Node_Str"",pomFile.getAbsolutePath());
    throw new TransformationUtilityException(exceptionMessage,ex);
  }
 finally {
    if (fileInputStream != null)     try {
      fileInputStream.close();
    }
 catch (    IOException e) {
      if (ex != null)       ex.addSuppressed(e);
    }
  }
  return model;
}"
39610,"private File prepareOutputFolder(Transformation transformation){
  logger.debug(""String_Node_Str"");
  Application application=transformation.getApplication();
  Configuration configuration=transformation.getConfiguration();
  logger.info(""String_Node_Str"" + application.getFolder());
  File originalAppParent=application.getFolder().getParentFile();
  String transformedAppFolderName=application.getFolder().getName() + ""String_Node_Str"" + simpleDateFormat.format(new Date());
  File transformedAppFolder;
  if (configuration.getOutputFolder() != null) {
    if (!configuration.getOutputFolder().exists()) {
      throw new IllegalArgumentException(""String_Node_Str"" + configuration.getOutputFolder() + ""String_Node_Str"");
    }
    transformedAppFolder=new File(configuration.getOutputFolder().getAbsolutePath() + File.separator + transformedAppFolderName);
  }
 else {
    transformedAppFolder=new File(originalAppParent.getAbsolutePath() + File.separator + transformedAppFolderName);
  }
  logger.info(""String_Node_Str"" + transformedAppFolder);
  transformation.setTransformedApplicationLocation(transformedAppFolder);
  boolean bDirCreated=transformedAppFolder.mkdir();
  if (bDirCreated) {
    try {
      FileUtils.copyDirectory(application.getFolder(),transformedAppFolder);
    }
 catch (    IOException e) {
      String exceptionMessage=String.format(""String_Node_Str"",transformedAppFolder,application.getFolder());
      logger.error(exceptionMessage,e);
      throw new InternalException(exceptionMessage,e);
    }
    logger.debug(""String_Node_Str"");
  }
 else {
    String exceptionMessage=String.format(""String_Node_Str"",transformedAppFolder);
    InternalException ie=new InternalException(exceptionMessage);
    logger.error(exceptionMessage,ie);
    throw ie;
  }
  return transformedAppFolder;
}","private File prepareOutputFolder(Transformation transformation){
  logger.debug(""String_Node_Str"");
  Application application=transformation.getApplication();
  Configuration configuration=transformation.getConfiguration();
  logger.info(""String_Node_Str"" + application.getFolder());
  File originalAppParent=application.getFolder().getParentFile();
  if (originalAppParent == null) {
    originalAppParent=new File(System.getProperty(""String_Node_Str""));
  }
  String transformedAppFolderName=application.getFolder().getName() + ""String_Node_Str"" + simpleDateFormat.format(new Date());
  File transformedAppFolder;
  if (configuration.getOutputFolder() != null) {
    if (!configuration.getOutputFolder().exists()) {
      throw new IllegalArgumentException(""String_Node_Str"" + configuration.getOutputFolder() + ""String_Node_Str"");
    }
    transformedAppFolder=new File(configuration.getOutputFolder().getAbsolutePath() + File.separator + transformedAppFolderName);
  }
 else {
    transformedAppFolder=new File(originalAppParent.getAbsolutePath() + File.separator + transformedAppFolderName);
  }
  logger.info(""String_Node_Str"" + transformedAppFolder);
  transformation.setTransformedApplicationLocation(transformedAppFolder);
  boolean bDirCreated=transformedAppFolder.mkdir();
  if (bDirCreated) {
    try {
      FileUtils.copyDirectory(application.getFolder(),transformedAppFolder);
    }
 catch (    IOException e) {
      String exceptionMessage=String.format(""String_Node_Str"",transformedAppFolder,application.getFolder());
      logger.error(exceptionMessage,e);
      throw new InternalException(exceptionMessage,e);
    }
    logger.debug(""String_Node_Str"");
  }
 else {
    String exceptionMessage=String.format(""String_Node_Str"",transformedAppFolder);
    InternalException ie=new InternalException(exceptionMessage);
    logger.error(exceptionMessage,ie);
    throw ie;
  }
  return transformedAppFolder;
}"
39611,"private static void printExtensionsList(ButterflyFacade butterflyFacade) throws IllegalAccessException, InstantiationException {
  Extension extension=butterflyFacade.getRegisteredExtension();
  if (extension == null) {
    logger.info(""String_Node_Str"");
    return;
  }
  logger.info(""String_Node_Str"");
  Class<? extends TransformationTemplate> template;
  int shortcut=1;
  String version=(StringUtils.isEmpty(extension.getVersion()) ? ""String_Node_Str"" : String.format(""String_Node_Str"",extension.getVersion()));
  System.out.printf(""String_Node_Str"",extension,extension.getDescription(),version);
  for (  Object templateObj : extension.getTemplateClasses().toArray()) {
    template=(Class<? extends TransformationTemplate>)templateObj;
    System.out.printf(""String_Node_Str"",shortcut++,ExtensionTypeInitial.getFromClass(template),template.getName(),template.newInstance().getDescription());
  }
}","private static void printExtensionsList(ButterflyFacade butterflyFacade) throws IllegalAccessException, InstantiationException {
  Extension extension=butterflyFacade.getRegisteredExtension();
  if (extension == null) {
    logger.info(""String_Node_Str"");
    return;
  }
  logger.info(""String_Node_Str"");
  Class<? extends TransformationTemplate> template;
  int shortcut=1;
  String version=(StringUtils.isEmpty(extension.getVersion()) ? ""String_Node_Str"" : String.format(""String_Node_Str"",extension.getVersion()));
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"",extension,extension.getDescription(),version);
  for (  Object templateObj : extension.getTemplateClasses().toArray()) {
    template=(Class<? extends TransformationTemplate>)templateObj;
    logger.info(""String_Node_Str"",shortcut++,ExtensionTypeInitial.getFromClass(template),template.getName(),template.newInstance().getDescription());
  }
}"
39612,"public ButterflyCliRun run() throws IOException {
  ButterflyCliRun run=new ButterflyCliRun();
  run.setButterflyVersion(ButterflyProperties.getString(""String_Node_Str""));
  logger.info(ButterflyCliApp.getBanner());
  if (optionSet == null || optionSet.has(CLI_OPTION_HELP) || !optionSet.hasOptions()) {
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    optionParser.printHelpOn(System.out);
    run.setExitStatus(0);
    return run;
  }
  if (optionSet.has(CLI_OPTION_VERBOSE)) {
    logConfigurator.verboseMode(true);
    logger.info(""String_Node_Str"");
  }
  if (optionSet.has(CLI_OPTION_DEBUG)) {
    logConfigurator.debugMode(true);
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"",ButterflyCliApp.getButterflyHome());
    logger.info(""String_Node_Str"",System.getenv(""String_Node_Str""));
    logger.info(""String_Node_Str"",System.getProperty(""String_Node_Str""));
    logger.info(""String_Node_Str"",System.getProperty(""String_Node_Str""));
    logger.info(""String_Node_Str"",System.getenv(""String_Node_Str""));
  }
  if (optionSet.has(CLI_OPTION_LIST_EXTENSIONS)) {
    try {
      printExtensionsList(butterflyFacade);
      run.setExitStatus(0);
      return run;
    }
 catch (    Exception e) {
      registerError(run,""String_Node_Str"",e);
      return run;
    }
  }
  logger.info(""String_Node_Str"");
  List<?> nonOptionArguments=optionSet.nonOptionArguments();
  if (nonOptionArguments == null || nonOptionArguments.size() == 0 || StringUtils.isEmpty(nonOptionArguments.get(0))) {
    registerError(run,""String_Node_Str"");
    return run;
  }
  File applicationFolder=new File((String)nonOptionArguments.get(0));
  if (!applicationFolder.exists()) {
    String errorMessage=String.format(""String_Node_Str"",applicationFolder.getAbsolutePath());
    registerError(run,errorMessage);
    return run;
  }
  run.setApplication(applicationFolder);
  File transformedApplicationFolder=(File)optionSet.valueOf(CLI_OPTION_TRANSFORMED_APP_FOLDER);
  boolean createZip=optionSet.has(CLI_OPTION_CREATE_ZIP);
  String templateClassName=null;
  Class<? extends TransformationTemplate> templateClass=null;
  if (optionSet.has(CLI_OPTION_TEMPLATE)) {
    templateClassName=(String)optionSet.valueOf(CLI_OPTION_TEMPLATE);
  }
 else   if (optionSet.has(CLI_OPTION_TEMPLATE_SHORTCUT)) {
    int shortcut=(Integer)optionSet.valueOf(CLI_OPTION_TEMPLATE_SHORTCUT);
    templateClass=getTemplateClass(shortcut);
    if (templateClass == null) {
      registerError(run,""String_Node_Str"");
      return run;
    }
    logger.info(""String_Node_Str"",shortcut,templateClass.getName());
  }
 else   if (optionSet.has(CLI_OPTION_AUTOMATIC_TEMPLATE_RESOLUTION)) {
    try {
      templateClass=butterflyFacade.automaticResolution(applicationFolder);
      if (templateClass == null) {
        registerError(run,""String_Node_Str"");
        return run;
      }
      if (logger.isDebugEnabled()) {
        logger.info(""String_Node_Str"");
      }
    }
 catch (    TemplateResolutionException e) {
      registerError(run,e.getMessage());
      return run;
    }
  }
 else {
    registerError(run,""String_Node_Str"");
    return run;
  }
  if (createZip) {
    logger.info(""String_Node_Str"");
  }
  Configuration configuration=new Configuration(transformedApplicationFolder,createZip);
  if (optionSet.has(CLI_OPTION_DEBUG)) {
    Extension extension=butterflyFacade.getRegisteredExtension();
    if (extension != null) {
      logger.info(""String_Node_Str"",extension.getClass().getName());
      logConfigurator.setLoggerLevel(extension.getClass().getPackage().getName(),Level.DEBUG);
    }
  }
  try {
    if (templateClass == null) {
      templateClass=(Class<? extends TransformationTemplate>)Class.forName(templateClassName);
    }
    run.setTransformationTemplate(templateClass.getName());
    logger.info(""String_Node_Str"",applicationFolder);
    logger.info(""String_Node_Str"",templateClass.getName());
    TransformationResult transformationResult=null;
    if (UpgradeStep.class.isAssignableFrom(templateClass)) {
      Class<? extends UpgradeStep> firstStepClass=(Class<? extends UpgradeStep>)templateClass;
      String upgradeVersion=(String)optionSet.valueOf(CLI_OPTION_UPGRADE_VERSION);
      UpgradePath upgradePath=new UpgradePath(firstStepClass,upgradeVersion);
      logger.info(""String_Node_Str"",upgradePath.getOriginalVersion(),upgradePath.getUpgradeVersion());
      transformationResult=butterflyFacade.transform(applicationFolder,upgradePath,configuration);
    }
 else {
      logger.info(""String_Node_Str"");
      transformationResult=butterflyFacade.transform(applicationFolder,templateClass,configuration);
    }
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"",transformationResult.getTransformedApplicationLocation());
    logger.info(""String_Node_Str"",LogFileDefiner.getLogFile());
    run.setTransformedApplication(transformationResult.getTransformedApplicationLocation());
    run.setLogFile(LogFileDefiner.getLogFile());
    if (transformationResult.hasManualInstructions()) {
      logger.info(""String_Node_Str"");
      logger.info(""String_Node_Str"");
      logger.info(""String_Node_Str"");
      logger.info(""String_Node_Str"");
      logger.info(""String_Node_Str"",transformationResult.getManualInstructionsFile());
      logger.info(""String_Node_Str"");
      run.setManualInstructionsFile(transformationResult.getManualInstructionsFile());
    }
    logger.info(""String_Node_Str"");
  }
 catch (  ButterflyException|ButterflyRuntimeException e) {
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.error(""String_Node_Str"");
    logger.error(""String_Node_Str"",e.getMessage());
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"",LogFileDefiner.getLogFile().getAbsolutePath());
    run.setErrorMessage(""String_Node_Str"" + e.getMessage());
    run.setExceptionMessage(e.getMessage());
    run.setExitStatus(1);
    return run;
  }
catch (  ClassNotFoundException e) {
    registerError(run,""String_Node_Str"",e);
    return run;
  }
  return run;
}","public ButterflyCliRun run() throws IOException {
  ButterflyCliRun run=new ButterflyCliRun();
  run.setButterflyVersion(ButterflyProperties.getString(""String_Node_Str""));
  logger.info(ButterflyCliApp.getBanner());
  if (optionSet == null || optionSet.has(CLI_OPTION_HELP) || !optionSet.hasOptions()) {
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    optionParser.printHelpOn(System.out);
    run.setExitStatus(0);
    return run;
  }
  if (optionSet.has(CLI_OPTION_VERBOSE)) {
    logConfigurator.verboseMode(true);
    logger.info(""String_Node_Str"");
  }
  if (optionSet.has(CLI_OPTION_DEBUG)) {
    logConfigurator.debugMode(true);
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"",ButterflyCliApp.getButterflyHome());
    logger.info(""String_Node_Str"",System.getenv(""String_Node_Str""));
    logger.info(""String_Node_Str"",System.getProperty(""String_Node_Str""));
    logger.info(""String_Node_Str"",System.getProperty(""String_Node_Str""));
    logger.info(""String_Node_Str"",System.getenv(""String_Node_Str""));
  }
  if (optionSet.has(CLI_OPTION_LIST_EXTENSIONS)) {
    try {
      printExtensionsList(butterflyFacade);
      run.setExitStatus(0);
      return run;
    }
 catch (    Exception e) {
      registerError(run,""String_Node_Str"",e);
      return run;
    }
  }
  logger.info(""String_Node_Str"");
  List<?> nonOptionArguments=optionSet.nonOptionArguments();
  if (nonOptionArguments == null || nonOptionArguments.size() == 0 || StringUtils.isEmpty(nonOptionArguments.get(0))) {
    registerError(run,""String_Node_Str"");
    return run;
  }
  File applicationFolder=new File((String)nonOptionArguments.get(0));
  if (!applicationFolder.exists()) {
    String errorMessage=String.format(""String_Node_Str"",applicationFolder.getAbsolutePath());
    registerError(run,errorMessage);
    return run;
  }
  run.setApplication(applicationFolder);
  File transformedApplicationFolder=(File)optionSet.valueOf(CLI_OPTION_TRANSFORMED_APP_FOLDER);
  boolean createZip=optionSet.has(CLI_OPTION_CREATE_ZIP);
  String templateClassName=null;
  Class<? extends TransformationTemplate> templateClass=null;
  if (optionSet.has(CLI_OPTION_TEMPLATE)) {
    templateClassName=(String)optionSet.valueOf(CLI_OPTION_TEMPLATE);
  }
 else   if (optionSet.has(CLI_OPTION_TEMPLATE_SHORTCUT)) {
    int shortcut=(Integer)optionSet.valueOf(CLI_OPTION_TEMPLATE_SHORTCUT);
    templateClass=getTemplateClass(shortcut);
    if (templateClass == null) {
      registerError(run,""String_Node_Str"");
      return run;
    }
    logger.info(""String_Node_Str"",shortcut,templateClass.getName());
  }
 else   if (optionSet.has(CLI_OPTION_AUTOMATIC_TEMPLATE_RESOLUTION)) {
    try {
      templateClass=butterflyFacade.automaticResolution(applicationFolder);
      if (templateClass == null) {
        registerError(run,""String_Node_Str"");
        return run;
      }
      if (logger.isDebugEnabled()) {
        logger.info(""String_Node_Str"");
      }
    }
 catch (    TemplateResolutionException e) {
      registerError(run,e.getMessage());
      return run;
    }
  }
 else {
    registerError(run,""String_Node_Str"");
    return run;
  }
  if (createZip) {
    logger.info(""String_Node_Str"");
  }
  Configuration configuration=new Configuration(transformedApplicationFolder,createZip);
  if (optionSet.has(CLI_OPTION_DEBUG)) {
    Extension extension=butterflyFacade.getRegisteredExtension();
    if (extension != null) {
      logger.info(""String_Node_Str"",extension.getClass().getName());
      logConfigurator.setLoggerLevel(extension.getClass().getPackage().getName(),Level.DEBUG);
    }
  }
  try {
    if (templateClass == null) {
      templateClass=(Class<? extends TransformationTemplate>)Class.forName(templateClassName);
    }
    run.setTransformationTemplate(templateClass.getName());
    logger.info(""String_Node_Str"",applicationFolder);
    logger.info(""String_Node_Str"",templateClass.getName());
    TransformationResult transformationResult=null;
    if (UpgradeStep.class.isAssignableFrom(templateClass)) {
      Class<? extends UpgradeStep> firstStepClass=(Class<? extends UpgradeStep>)templateClass;
      String upgradeVersion=(String)optionSet.valueOf(CLI_OPTION_UPGRADE_VERSION);
      UpgradePath upgradePath=new UpgradePath(firstStepClass,upgradeVersion);
      logger.info(""String_Node_Str"",upgradePath.getOriginalVersion(),upgradePath.getUpgradeVersion());
      transformationResult=butterflyFacade.transform(applicationFolder,upgradePath,configuration);
    }
 else {
      logger.info(""String_Node_Str"");
      transformationResult=butterflyFacade.transform(applicationFolder,templateClass,configuration);
    }
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"",transformationResult.getTransformedApplicationLocation());
    logger.info(""String_Node_Str"",LogFileDefiner.getLogFile());
    run.setTransformedApplication(transformationResult.getTransformedApplicationLocation());
    run.setLogFile(LogFileDefiner.getLogFile());
    if (transformationResult.hasManualInstructions()) {
      logger.info(""String_Node_Str"");
      logger.info(""String_Node_Str"");
      logger.info(""String_Node_Str"");
      logger.info(""String_Node_Str"");
      logger.info(""String_Node_Str"",transformationResult.getManualInstructionsFile());
      logger.info(""String_Node_Str"");
      run.setManualInstructionsFile(transformationResult.getManualInstructionsFile());
    }
    logger.info(""String_Node_Str"");
  }
 catch (  ButterflyException|ButterflyRuntimeException e) {
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"");
    logger.error(""String_Node_Str"");
    logger.error(""String_Node_Str"",e.getMessage());
    logger.info(""String_Node_Str"");
    logger.info(""String_Node_Str"",LogFileDefiner.getLogFile().getAbsolutePath());
    run.setErrorMessage(""String_Node_Str"" + e.getMessage());
    run.setExceptionMessage(e.getMessage());
    run.setExitStatus(1);
    return run;
  }
catch (  ClassNotFoundException e) {
    registerError(run,""String_Node_Str"",e);
    return run;
  }
  return run;
}"
39613,"private void perform(TransformationUtility utility,File transformedAppFolder,TransformationContextImpl transformationContext,String order) throws TransformationException {
  boolean isTO=utility instanceof TransformationOperation;
  PerformResult result=null;
  try {
    result=utility.perform(transformedAppFolder,transformationContext);
switch (result.getType()) {
case SKIPPED_CONDITION:
case SKIPPED_DEPENDENCY:
      if (isTO || logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"",order,result.getDetails());
      }
    break;
case EXECUTION_RESULT:
  if (isTO) {
    processOperationExecutionResult(utility,result,order,transformationContext);
  }
 else {
    TUExecutionResult executionResult=(TUExecutionResult)result.getExecutionResult();
    Object executionValue=executionResult.getValue();
    if (utility instanceof MultipleConditions) {
      Set<File> files=(Set<File>)executionValue;
      result=perform((MultipleConditions)utility,files,transformedAppFolder,transformationContext);
    }
 else     if (utility instanceof FilterFiles) {
      Set<File> files=(Set<File>)executionValue;
      result=perform((FilterFiles)utility,files,transformedAppFolder,transformationContext);
    }
    processUtilityExecutionResult(utility,result,transformationContext);
    if (utility instanceof TransformationUtilityLoop) {
      boolean iterate=executionValue instanceof Boolean && ((Boolean)executionValue).booleanValue();
      if (iterate) {
        TransformationUtilityLoop utilityLoop=(TransformationUtilityLoop)utility;
        String newOrder=String.format(""String_Node_Str"",order,utilityLoop.getNextIteration());
        logger.info(""String_Node_Str"");
        logger.info(""String_Node_Str"",newOrder,utilityLoop.getNextIteration(),utilityLoop.getName());
        perform(utilityLoop.run(),transformedAppFolder,transformationContext,newOrder + ""String_Node_Str"");
        perform(utilityLoop.iterate(),transformedAppFolder,transformationContext,order);
      }
    }
 else     if (utility instanceof TransformationUtilityParent) {
      perform((TransformationUtilityParent)utility,result,transformedAppFolder,transformationContext,order);
    }
 else     if (utility instanceof ManualInstruction) {
      transformationContext.registerManualInstruction((ManualInstructionRecord)executionValue);
    }
  }
break;
case ERROR:
processError(utility,result.getException(),order,transformationContext);
break;
default :
logger.error(""String_Node_Str"",order,utility.getName(),result.getType().name());
break;
}
}
 catch (TransformationUtilityException e) {
result=PerformResult.error(utility,e);
processError(utility,e,order,transformationContext);
}
 finally {
if (utility.isSaveResult()) {
transformationContext.putResult(utility.getName(),result);
}
}
}","private void perform(TransformationUtility utility,File transformedAppFolder,TransformationContextImpl transformationContext,String order) throws TransformationException {
  boolean isTO=utility instanceof TransformationOperation;
  PerformResult result=null;
  try {
    result=utility.perform(transformedAppFolder,transformationContext);
switch (result.getType()) {
case SKIPPED_CONDITION:
case SKIPPED_DEPENDENCY:
      if (isTO || logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"",order,result.getDetails());
      }
    break;
case EXECUTION_RESULT:
  if (isTO) {
    processOperationExecutionResult(utility,result,order,transformationContext);
  }
 else {
    TUExecutionResult executionResult=(TUExecutionResult)result.getExecutionResult();
    Object executionValue=executionResult.getValue();
    if (executionResult.getType().equals(TUExecutionResult.Type.ERROR)) {
      processUtilityExecutionResult(utility,result,transformationContext);
      break;
    }
    if (utility instanceof MultipleConditions) {
      Set<File> files=(Set<File>)executionValue;
      result=perform((MultipleConditions)utility,files,transformedAppFolder,transformationContext);
    }
 else     if (utility instanceof FilterFiles) {
      Set<File> files=(Set<File>)executionValue;
      result=perform((FilterFiles)utility,files,transformedAppFolder,transformationContext);
    }
    processUtilityExecutionResult(utility,result,transformationContext);
    if (utility instanceof TransformationUtilityLoop) {
      boolean iterate=executionValue instanceof Boolean && ((Boolean)executionValue).booleanValue();
      if (iterate) {
        TransformationUtilityLoop utilityLoop=(TransformationUtilityLoop)utility;
        String newOrder=String.format(""String_Node_Str"",order,utilityLoop.getNextIteration());
        logger.info(""String_Node_Str"");
        logger.info(""String_Node_Str"",newOrder,utilityLoop.getNextIteration(),utilityLoop.getName());
        perform(utilityLoop.run(),transformedAppFolder,transformationContext,newOrder + ""String_Node_Str"");
        perform(utilityLoop.iterate(),transformedAppFolder,transformationContext,order);
      }
    }
 else     if (utility instanceof TransformationUtilityParent) {
      perform((TransformationUtilityParent)utility,result,transformedAppFolder,transformationContext,order);
    }
 else     if (utility instanceof ManualInstruction) {
      transformationContext.registerManualInstruction((ManualInstructionRecord)executionValue);
    }
  }
break;
case ERROR:
processError(utility,result.getException(),order,transformationContext);
break;
default :
logger.error(""String_Node_Str"",order,utility.getName(),result.getType().name());
break;
}
}
 catch (TransformationUtilityException e) {
result=PerformResult.error(utility,e);
processError(utility,e,order,transformationContext);
}
 finally {
if (utility.isSaveResult()) {
transformationContext.putResult(utility.getName(),result);
}
}
}"
39614,"@Override protected int getNumberOfTypes(CompilationUnit compilationUnit){
  ClassOrInterfaceDeclaration type=(ClassOrInterfaceDeclaration)compilationUnit.getType(0);
  NodeList<ClassOrInterfaceType> extendedTypes=type.getExtendedTypes();
  return extendedTypes.size();
}","@Override protected int getNumberOfTypes(CompilationUnit compilationUnit){
  TypeDeclaration<?> typeDeclaration=compilationUnit.getType(0);
  if (typeDeclaration instanceof ClassOrInterfaceDeclaration) {
    ClassOrInterfaceDeclaration type=(ClassOrInterfaceDeclaration)compilationUnit.getType(0);
    NodeList<ClassOrInterfaceType> extendedTypes=type.getExtendedTypes();
    return extendedTypes.size();
  }
  return 0;
}"
39615,"public static void main(String... arguments) throws IOException {
  setButterflyHome();
  setLogFileName(arguments);
  setBanner();
  ConfigurableApplicationContext applicationContext=SpringApplication.run(ButterflyCliApp.class,arguments);
  ButterflyCliRunner butterflyCliRunner=applicationContext.getBean(ButterflyCliRunner.class);
  ButterflyCliRun run=butterflyCliRunner.run();
  if (optionSet != null && optionSet.has(CLI_OPTION_RESULT_FILE)) {
    run.setInputArguments(arguments);
    writeResultFile(run);
  }
  System.exit(run.getExitStatus());
}","public static void main(String... arguments) throws IOException {
  setButterflyHome();
  setLogFileName(arguments);
  logger=LoggerFactory.getLogger(ButterflyCliApp.class);
  setBanner();
  ConfigurableApplicationContext applicationContext=SpringApplication.run(ButterflyCliApp.class,arguments);
  ButterflyCliRunner butterflyCliRunner=applicationContext.getBean(ButterflyCliRunner.class);
  ButterflyCliRun run=butterflyCliRunner.run();
  if (optionSet != null && optionSet.has(CLI_OPTION_RESULT_FILE)) {
    run.setInputArguments(arguments);
    writeResultFile(run);
  }
  System.exit(run.getExitStatus());
}"
39616,"/** 
 * Sets one or more transformation context attributes that hold list of Files which the condition should perform against. If more than one attribute is specified, all list of files will be combined into a single one.</br>
 * @param filesAttributes one or more transformation context attributes that hold listof Files which the condition should perform against
 * @return this transformation utility object
 */
public MultipleConditions setFiles(String... filesAttributes){
  this.filesAttributes=filesAttributes;
  return this;
}","/** 
 * Sets one or more transformation context attributes that hold list of Files which the condition should perform against. If more than one attribute is specified, all list of files will be combined into a single one.<br>
 * @param filesAttributes one or more transformation context attributes that hold listof Files which the condition should perform against
 * @return this transformation utility object
 */
public MultipleConditions setFiles(String... filesAttributes){
  this.filesAttributes=filesAttributes;
  return this;
}"
39617,"/** 
 * This means the utility has not been executed because one or more of its dependencies ""failed"". See   {@link TransformationUtility#dependsOn(String)}for the dependency failure criteria definition
 * @see {@link TransformationUtility#dependsOn(String)}
 */
public static PerformResult skippedDependency(TransformationUtility transformationUtility,String details){
  PerformResult result=new PerformResult(transformationUtility,Type.SKIPPED_DEPENDENCY,details);
  return result;
}","/** 
 * This means the utility has not been executed because one or more of its dependencies ""failed"". See   {@link TransformationUtility#dependsOn(String)}for the dependency failure criteria definition
 */
public static PerformResult skippedDependency(TransformationUtility transformationUtility,String details){
  PerformResult result=new PerformResult(transformationUtility,Type.SKIPPED_DEPENDENCY,details);
  return result;
}"
39618,"/** 
 * This method is used to notify subclasses that the result type might have to change due to the addition of a warning. </br> Usually it should change from a successful type to a warning type. In case the result is an error kind of type, then it should remain as is.
 */
protected abstract void changeTypeOnWarning();","/** 
 * This method is used to notify subclasses that the result type might have to change due to the addition of a warning. <br> Usually it should change from a successful type to a warning type. In case the result is an error kind of type, then it should remain as is.
 */
protected abstract void changeTypeOnWarning();"
39619,"/** 
 * Set this transformation utility instance name. If not set, a default name will be assigned at the time it is added to a parent.
 * @param name
 * @return this transformation utility
 */
protected TU setName(String name){
  if (StringUtils.isBlank(name)) {
    throw new TransformationDefinitionException(name + ""String_Node_Str"");
  }
  this.name=name;
  return (TU)this;
}","/** 
 * Set this transformation utility instance name. If not set, a default name will be assigned at the time it is added to a parent.
 * @param name transformation utility instance name
 * @return this transformation utility
 */
protected TU setName(String name){
  if (StringUtils.isBlank(name)) {
    throw new TransformationDefinitionException(name + ""String_Node_Str"");
  }
  this.name=name;
  return (TU)this;
}"
39620,"/** 
 * When set, this TU will only execute if this   {@code utilityCondition} object,executed right before this TU, result in true. <br> Differences between this approach and  {@link #executeIf(String)}: <ol> <li>Instead of relying on a TCA (  {@link TransformationContext attribute}) with the condition result, this method is based on the direct execution of the   {@link UtilityCondition} object</li><li>The  {@link UtilityCondition} object is always executed necessarily against the same file. Because of that, any value set on it via {@link #relative(String)} or {@link #absolute(String)} is ignored.</li><li>The  {@link UtilityCondition} object does not produce any TCA, neither its result value or result object. Instead, it hands its result directly to the TU, so that the condition can be evaluated just before the TU executes (or not, if it fails).</li><li>The  {@link UtilityCondition} object does not exist from a transformation template point of view. That means this method is totally different than adding a new {@link UtilityCondition} object by calling {@link TransformationTemplate#add(TransformationUtility)}.</li> <li>No TU can   {@link #dependsOn(String)} this {@link UtilityCondition} object.</li></ol> <strong>The actual  {@link UtilityCondition} object is not the one used, but a clone of it<strong/>
 * @param utilityCondition the condition to be executed and evaluated right before this TU
 * @return this utility instance
 */
public final TU executeIf(UtilityCondition utilityCondition){
  this.utilityCondition=utilityCondition;
  return (TU)this;
}","/** 
 * When set, this TU will only execute if this   {@code utilityCondition} object,executed right before this TU, result in true. <br> Differences between this approach and  {@link #executeIf(String)}: <ol> <li>Instead of relying on a TCA (  {@link TransformationContext attribute}) with the condition result, this method is based on the direct execution of the   {@link UtilityCondition} object</li><li>The  {@link UtilityCondition} object is always executed necessarily against the same file. Because of that, any value set on it via {@link #relative(String)} or {@link #absolute(String)} is ignored.</li><li>The  {@link UtilityCondition} object does not produce any TCA, neither its result value or result object. Instead, it hands its result directly to the TU, so that the condition can be evaluated just before the TU executes (or not, if it fails).</li><li>The  {@link UtilityCondition} object does not exist from a transformation template point of view. That means this method is totally different than adding a new {@link UtilityCondition} object by calling {@link TransformationTemplate#add(TransformationUtility)}.</li> <li>No TU can   {@link #dependsOn(String)} this {@link UtilityCondition} object.</li></ol> <strong>The actual  {@link UtilityCondition} object is not the one used, but a clone of it</strong>
 * @param utilityCondition the condition to be executed and evaluated right before this TU
 * @return this utility instance
 */
public final TU executeIf(UtilityCondition utilityCondition){
  this.utilityCondition=utilityCondition;
  return (TU)this;
}"
39621,"/** 
 * Check if value is a blank String, if it is, then a  {@link TransformationDefinitionException) is thown.<br> This check is used for mandatory properties where value cannot be null neither an empty string.}
 * @param name the name of the property
 * @param value the value to be verified
 * @throws TransformationDefinitionException if check fails
 */
protected static void checkForBlankString(String name,String value) throws TransformationDefinitionException {
  if (StringUtils.isBlank(value)) {
    throw new TransformationDefinitionException(name + ""String_Node_Str"");
  }
}","/** 
 * Check if value is a blank String, if it is, then a  {@link TransformationDefinitionException} is thrown.<br> This check is used for mandatory properties where value cannot be null neither an empty string.
 * @param name the name of the property
 * @param value the value to be verified
 * @throws TransformationDefinitionException if check fails
 */
protected static void checkForBlankString(String name,String value) throws TransformationDefinitionException {
  if (StringUtils.isBlank(value)) {
    throw new TransformationDefinitionException(name + ""String_Node_Str"");
  }
}"
39622,"/** 
 * Returns an absolute path to the file or folder the transformation utility is suppose to perform against
 * @param transformedAppFolder
 * @return an absolute path to the file or folder the transformationutility is suppose to perform against
 */
protected final File getAbsoluteFile(File transformedAppFolder,TransformationContext transformationContext) throws TransformationUtilityException {
  if (absoluteFile == null) {
    setAbsoluteFile(transformedAppFolder,transformationContext);
  }
  return absoluteFile;
}","/** 
 * Returns an absolute path to the file or folder the transformation utility is supposed to perform against
 * @param transformedAppFolder
 * @param transformationContext
 * @return an absolute path to the file or folder the transformationutility is suppose to perform against
 */
protected final File getAbsoluteFile(File transformedAppFolder,TransformationContext transformationContext) throws TransformationUtilityException {
  if (absoluteFile == null) {
    setAbsoluteFile(transformedAppFolder,transformationContext);
  }
  return absoluteFile;
}"
39623,"/** 
 * @see {@link #isSaveResult()}
 * @param saveResult
 */
protected TU setSaveResult(boolean saveResult){
  this.saveResult=saveResult;
  return (TU)this;
}","/** 
 * Sets whether or not the value produced by the transformation utility execution, and also its result object as a whole, should both be saved in the transformation context object. See also   {@link #isSaveResult()}.
 * @param saveResult if the value produced by the transformation utility execution,and also its result object as a whole, should both be saved in the transformation context object
 */
protected TU setSaveResult(boolean saveResult){
  this.saveResult=saveResult;
  return (TU)this;
}"
39624,"/** 
 * Add all transformation utilities this utility depends on. Notice that this is not cumulative, meaning if this method has been called previously, that dependencies set will be entirely replaced by this new one. <br> This notion of ""dependency"" among TUs help resilience in two ways: <ol> <li>If TU B depends on TU A, and if TU A ""fails"" but doesn't abort transformation, then TU B would be skipped</li> <li>If TU B depends on TU A, then that means TU A is necessary supposed to be executed first, if not, TU B will be skipped</li> </ol> The term ""fails"" in this context means the perform result is of one of these types: <ol> <li>  {@link PerformResult.Type#ERROR}</li> <li>  {@link PerformResult.Type#SKIPPED_CONDITION}</li> <li>  {@link PerformResult.Type#SKIPPED_DEPENDENCY}</li> </ol> A dependency failure is also possible if perform result type is   {@link PerformResult.Type#EXECUTION_RESULT}, and the execution result type is one of the following: <ol> <li>  {@link com.paypal.butterfly.extensions.api.TUExecutionResult.Type#NULL} (for TUs only)</li><li> {@link com.paypal.butterfly.extensions.api.TUExecutionResult.Type#ERROR} (for TUs only)</li><li> {@link com.paypal.butterfly.extensions.api.TOExecutionResult.Type#ERROR} (for TOs only)</li></ol> <br>
 * @see {@link #checkDependencies(TransformationContext)}
 * @see {@link Result#dependencyFailureCheck()}
 * @see {@link TUExecutionResult#dependencyFailureCheck()}
 * @see {@link TOExecutionResult#dependencyFailureCheck()}
 * @see {@link PerformResult#dependencyFailureCheck()}
 * @param dependencies
 */
public final TU dependsOn(String... dependencies){
  if (dependencies != null) {
    for (    String dependency : dependencies) {
      if (StringUtils.isBlank(dependency))       throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  this.dependencies=dependencies;
  return (TU)this;
}","/** 
 * Add all transformation utilities this utility depends on. Notice that this is not cumulative, meaning if this method has been called previously, that dependencies set will be entirely replaced by this new one. <br> This notion of ""dependency"" among TUs help resilience in two ways: <ol> <li>If TU B depends on TU A, and if TU A ""fails"" but doesn't abort transformation, then TU B would be skipped</li> <li>If TU B depends on TU A, then that means TU A is necessary supposed to be executed first, if not, TU B will be skipped</li> </ol> The term ""fails"" in this context means the perform result is of one of these types: <ol> <li>  {@link PerformResult.Type#ERROR}</li> <li>  {@link PerformResult.Type#SKIPPED_CONDITION}</li> <li>  {@link PerformResult.Type#SKIPPED_DEPENDENCY}</li> </ol> A dependency failure is also possible if perform result type is   {@link PerformResult.Type#EXECUTION_RESULT}, and the execution result type is one of the following: <ol> <li>  {@link com.paypal.butterfly.extensions.api.TUExecutionResult.Type#NULL} (for TUs only)</li><li> {@link com.paypal.butterfly.extensions.api.TUExecutionResult.Type#ERROR} (for TUs only)</li><li> {@link com.paypal.butterfly.extensions.api.TOExecutionResult.Type#ERROR} (for TOs only)</li></ol> <br> See also: <ul> <li> {@link #checkDependencies(TransformationContext)}</li> <li>  {@link Result#dependencyFailureCheck()}</li> <li>  {@link TUExecutionResult#dependencyFailureCheck()}</li> <li>  {@link TOExecutionResult#dependencyFailureCheck()}</li> <li>  {@link PerformResult#dependencyFailureCheck()}</li> </ul>
 * @param dependencies
 */
public final TU dependsOn(String... dependencies){
  if (dependencies != null) {
    for (    String dependency : dependencies) {
      if (StringUtils.isBlank(dependency))       throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  this.dependencies=dependencies;
  return (TU)this;
}"
39625,"/** 
 * Returns dependencies
 * @see {@link #dependsOn(String)}
 * @return
 */
protected final List<String> getDependencies(){
  if (dependencies != null) {
    return Collections.unmodifiableList(Arrays.asList(dependencies));
  }
  return Collections.emptyList();
}","/** 
 * Returns an unmodifiable list of names of utilities this utility instance depends on. See also   {@link #dependsOn(String)}.
 * @return an unmodifiable list of names of utilities this utility instance depends on
 */
protected final List<String> getDependencies(){
  if (dependencies != null) {
    return Collections.unmodifiableList(Arrays.asList(dependencies));
  }
  return Collections.emptyList();
}"
39626,"/** 
 * Return true only if a file has been set explicitly either via   {@link #relative(String)} or {@link #absolute(String).}If set via   {@link #relative(String)} it will only return true if set to anything other than """", which would mean the root of the application.
 * @return
 */
public final boolean wasFileExplicitlySet(){
  return !(StringUtils.isBlank(getRelativePath()) && getAbsoluteFileFromContextAttribute() == null);
}","/** 
 * Return true only if a file has been set explicitly either via   {@link #relative(String)} or {@link #absolute(String)}. If set via   {@link #relative(String)} it will only return true if set to anything other than """", which would mean the root of the application.
 * @return
 */
public final boolean wasFileExplicitlySet(){
  return !(StringUtils.isBlank(getRelativePath()) && getAbsoluteFileFromContextAttribute() == null);
}"
39627,"/** 
 * Same as   {@link #absolute(String,String)}, however, the absolute file is set with an additional relative path, which is defined via parameter  {@code additionalRelativePath}. This method is powerful because it allows setting the absolute file using a portion of the location (absolute) that is only known during transformation time, plus also a second portion of the location (relative) that is already known during definition time
 * @see {@link #absolute(String,String)}
 * @param contextAttributeName the name of the transformation context attribute whosevalue will be set as the absolute file right before execution
 * @param additionalRelativePath an additional relative path to be added to the absolutefile coming from the transformation context. The path separator will be normalized, similar to what happens in  {@link #relative(String)}
 * @return this transformation utility
 * @see {@link #getAbsoluteFile(File,TransformationContext)}
 * @see {@link #relative(String)}
 * @see {@link #getRelativePath()}
 */
public TU absolute(String contextAttributeName,String additionalRelativePath){
  absoluteFileFromContextAttribute=contextAttributeName;
  this.additionalRelativePath=normalizeRelativePathSeparator(additionalRelativePath);
  return (TU)this;
}","/** 
 * Same as   {@link #absolute(String,String)}, however, the absolute file is set with an additional relative path, which is defined via parameter  {@code additionalRelativePath}. This method is powerful because it allows setting the absolute file using a portion of the location (absolute) that is only known during transformation time, plus also a second portion of the location (relative) that is already known during definition time <br> See also   {@link #getAbsoluteFile(File,TransformationContext)},   {@link #relative(String)}and   {@link #getRelativePath()}
 * @param contextAttributeName the name of the transformation context attribute whosevalue will be set as the absolute file right before execution
 * @param additionalRelativePath an additional relative path to be added to the absolutefile coming from the transformation context. The path separator will be normalized, similar to what happens in  {@link #relative(String)}
 * @return this transformation utility
 */
public TU absolute(String contextAttributeName,String additionalRelativePath){
  absoluteFileFromContextAttribute=contextAttributeName;
  this.additionalRelativePath=normalizeRelativePathSeparator(additionalRelativePath);
  return (TU)this;
}"
39628,"/** 
 * Sets the relative path from the application root folder to the file or folder the transformation utility should perform against. The path separator is automatically normalized, so there are three valid options when separating folders in the path: <ol> <li>File.separatorChar (e.g. relative(""myFolder"" + File.separator + ""file.txt"")</li> <li>Forward slash (e.g. relative(""myFolder/file.txt"")</li> <li>Two backward slashes (e.g. relative(""myFolder\\file.txt"")</li> </ol> The slashes are replaced by OS specific separator char in runtime. <br> <strong>The default value is ""."". which means the root of the transformed application </strong>
 * @param relativePath from the application root folderto the file or folder the transformation utility should be performed against
 * @return this transformation utility
 */
public final TU relative(String relativePath){
  this.relativePath=normalizeRelativePathSeparator(relativePath);
  return (TU)this;
}","/** 
 * Sets the relative path from the application root folder to the file or folder the transformation utility should perform against. The path separator is automatically normalized, so there are three valid options when separating folders in the path: <ol> <li>File.separatorChar (e.g. relative(""myFolder"" + File.separator + ""file.txt"")</li> <li>Forward slash (e.g. relative(""myFolder/file.txt"")</li> <li>Two backward slashes (e.g. relative(""myFolder\\file.txt"")</li> </ol> The slashes are replaced by OS specific separator char in runtime. <br> <strong>The default value is ""."". which means the root of the transformed application</strong>
 * @param relativePath from the application root folderto the file or folder the transformation utility should be performed against
 * @return this transformation utility
 */
public final TU relative(String relativePath){
  this.relativePath=normalizeRelativePathSeparator(relativePath);
  return (TU)this;
}"
39629,"/** 
 * Utility to find files based on a regular expression against the file name and/or the file path. The search might be recursive (including sub-folders) or not. If a file path regular expression is set, then the search will be automatically and necessarily recursive. If no file path regular expression is set, then the search is not recursive by default, but it may be set to as well. </br> The root directory from where the search should take place can be defined by   {@link #relative(String)},  {@link #absolute(String)} or {@link #absolute(String,String)}. If not set explicitly, then the search will happen from the root of the transformed application, which is equivalent to setting  {@link #relative(String)} to {@code "".""}
 * @param nameRegex regular expression to be applied against file name during search
 * @param pathRegex regular expression to be applied against file path during search
 */
public FindFiles(String nameRegex,String pathRegex){
  setNameRegex(nameRegex);
  setPathRegex(pathRegex);
}","/** 
 * Utility to find files based on a regular expression against the file name and/or the file path. The search might be recursive (including sub-folders) or not. If a file path regular expression is set, then the search will be automatically and necessarily recursive. If no file path regular expression is set, then the search is not recursive by default, but it may be set to as well. <br> The root directory from where the search should take place can be defined by   {@link #relative(String)},  {@link #absolute(String)} or {@link #absolute(String,String)}. If not set explicitly, then the search will happen from the root of the transformed application, which is equivalent to setting  {@link #relative(String)} to {@code "".""}
 * @param nameRegex regular expression to be applied against file name during search
 * @param pathRegex regular expression to be applied against file path during search
 */
public FindFiles(String nameRegex,String pathRegex){
  setNameRegex(nameRegex);
  setPathRegex(pathRegex);
}"
39630,"/** 
 * Set regular expression to be used to match the file path during the search</br> <strong>Important notes:</strong> <ul> <li>Use forward slash as file separator. If the OS used during transformation execution uses another character as file separator, that will be automatically converted by this utility</li> <li>Setting this to a non null value automatically sets recursive property to true</li> <li>This regular expression will be evaluated against the file path <strong>starting from the search root directory</strong></li> </ul>
 * @param pathRegex regular expression to be used to match the file pathduring the search
 * @return this transformation utility instance
 */
public FindFiles setPathRegex(String pathRegex){
  checkForEmptyString(""String_Node_Str"",pathRegex);
  this.pathRegex=pathRegex;
  if (pathRegex != null) {
    recursive=true;
  }
  return this;
}","/** 
 * Set regular expression to be used to match the file path during the search<br> <strong>Important notes:</strong> <ul> <li>Use forward slash as file separator. If the OS used during transformation execution uses another character as file separator, that will be automatically converted by this utility</li> <li>Setting this to a non null value automatically sets recursive property to true</li> <li>This regular expression will be evaluated against the file path <strong>starting from the search root directory</strong></li> </ul>
 * @param pathRegex regular expression to be used to match the file pathduring the search
 * @return this transformation utility instance
 */
public FindFiles setPathRegex(String pathRegex){
  checkForEmptyString(""String_Node_Str"",pathRegex);
  this.pathRegex=pathRegex;
  if (pathRegex != null) {
    recursive=true;
  }
  return this;
}"
39631,"/** 
 * Set whether the search should be recursive or not. If a file path regular expression has been set, then this property will be automatically set to true.</br> <strong>Important: setting this to false automatically sets the file path regular expression to null</strong>
 * @param recursive whether the search should be recursive
 * @return this transformation utility instance
 */
public FindFiles setRecursive(boolean recursive){
  this.recursive=recursive;
  if (!recursive) {
    pathRegex=null;
  }
  return this;
}","/** 
 * Set whether the search should be recursive or not. If a file path regular expression has been set, then this property will be automatically set to true.<br> <strong>Important: setting this to false automatically sets the file path regular expression to null</strong>
 * @param recursive whether the search should be recursive
 * @return this transformation utility instance
 */
public FindFiles setRecursive(boolean recursive){
  this.recursive=recursive;
  if (!recursive) {
    pathRegex=null;
  }
  return this;
}"
39632,"/** 
 * This is a tree of Maven artifacts, which are represented by   {@link Model} objects.The idea here is, given a list of Maven pom.xml  {@link File} objects, create a treebased on dependency among them, but specifying explicitly which Maven artifact should be at the root of the tree. That means, if any artifact in the list is not a child, directly or indirectly, of the root artifact, then it will end up no being in the tree. </br> As a result of building this tree, it is possible to know, out of the initial pom.xml files list, which ones actually inherit, directly or not, from the root artifact. The result is retrieved by calling  {@link #getPomFilesInTree()}
 * @param rootGroupId the group id of the artifact that should be at the root of the tree
 * @param rootArtifactId the artifact id of the artifact that should be at the root of the tree
 * @param rootVersion the version of the artifact that should be at the root of the tree
 * @param pomFiles a list of pom.xml files used to make the tree
 */
public ModelTree(String rootGroupId,String rootArtifactId,String rootVersion,List<File> pomFiles){
  Model rootModel=new Model();
  rootModel.setGroupId(rootGroupId);
  rootModel.setArtifactId(rootArtifactId);
  rootModel.setVersion(rootVersion);
  List<Model> models=new ArrayList<>();
  models.add(rootModel);
  for (  File pomFile : pomFiles) {
    models.add(createModel(pomFile));
  }
  add(models);
}","/** 
 * This is a tree of Maven artifacts, which are represented by   {@link Model} objects.The idea here is, given a list of Maven pom.xml  {@link File} objects, create a treebased on dependency among them, but specifying explicitly which Maven artifact should be at the root of the tree. That means, if any artifact in the list is not a child, directly or indirectly, of the root artifact, then it will end up no being in the tree. <br> As a result of building this tree, it is possible to know, out of the initial pom.xml files list, which ones actually inherit, directly or not, from the root artifact. The result is retrieved by calling  {@link #getPomFilesInTree()}
 * @param rootGroupId the group id of the artifact that should be at the root of the tree
 * @param rootArtifactId the artifact id of the artifact that should be at the root of the tree
 * @param rootVersion the version of the artifact that should be at the root of the tree
 * @param pomFiles a list of pom.xml files used to make the tree
 */
public ModelTree(String rootGroupId,String rootArtifactId,String rootVersion,List<File> pomFiles){
  Model rootModel=new Model();
  rootModel.setGroupId(rootGroupId);
  rootModel.setArtifactId(rootArtifactId);
  rootModel.setVersion(rootVersion);
  List<Model> models=new ArrayList<>();
  models.add(rootModel);
  for (  File pomFile : pomFiles) {
    models.add(createModel(pomFile));
  }
  add(models);
}"
39633,"/** 
 * @see {@link Reader#close()}
 * @throws IOException
 */
public void close() throws IOException {
  reader.close();
}","/** 
 * See   {@link Reader#close()}.
 * @throws IOException
 */
public void close() throws IOException {
  reader.close();
}"
39634,"public void setInputArguments(String[] inputArguments){
  this.inputArguments=inputArguments;
}","public void setInputArguments(String[] inputArguments){
  this.inputArguments=Arrays.copyOf(inputArguments,inputArguments.length);
}"
39635,"public AbstractTypeCheck(String specifiedTypeName){
  if (specifiedTypeName == null && specifiedTypeName.trim().length() == 0) {
    throw new TransformationDefinitionException(""String_Node_Str"");
  }
  this.specifiedTypeName=specifiedTypeName;
  int i=specifiedTypeName.lastIndexOf(""String_Node_Str"");
  if (i == -1) {
    this.specifiedTypeSimpleName=specifiedTypeName;
    this.specifiedTypePackageName=""String_Node_Str"";
  }
 else {
    this.specifiedTypeSimpleName=specifiedTypeName.substring(i + 1);
    this.specifiedTypePackageName=specifiedTypeName.substring(0,i);
  }
}","public AbstractTypeCheck(String specifiedTypeName){
  if (specifiedTypeName == null || specifiedTypeName.trim().length() == 0) {
    throw new TransformationDefinitionException(""String_Node_Str"");
  }
  this.specifiedTypeName=specifiedTypeName;
  int i=specifiedTypeName.lastIndexOf(""String_Node_Str"");
  if (i == -1) {
    this.specifiedTypeSimpleName=specifiedTypeName;
    this.specifiedTypePackageName=""String_Node_Str"";
  }
 else {
    this.specifiedTypeSimpleName=specifiedTypeName.substring(i + 1);
    this.specifiedTypePackageName=specifiedTypeName.substring(0,i);
  }
}"
39636,"@Override protected ExecutionResult execution(File transformedAppFolder,TransformationContext transformationContext){
  File javaClassFile=getAbsoluteFile(transformedAppFolder,transformationContext);
  FileInputStream fileInputStream=null;
  TUExecutionResult result=null;
  try {
    fileInputStream=new FileInputStream(javaClassFile);
    CompilationUnit compilationUnit=JavaParser.parse(fileInputStream);
    if (compilationUnit.getTypes().size() == 0) {
      return TUExecutionResult.error(this,new TransformationUtilityException(""String_Node_Str""));
    }
    boolean match=evaluate(compilationUnit);
    result=TUExecutionResult.value(this,match);
  }
 catch (  FileNotFoundException e) {
    result=TUExecutionResult.error(this,e);
  }
 finally {
    try {
      if (fileInputStream != null) {
        fileInputStream.close();
      }
    }
 catch (    IOException e) {
      result.addWarning(e);
    }
  }
  return result;
}","@Override protected ExecutionResult execution(File transformedAppFolder,TransformationContext transformationContext){
  File javaClassFile=getAbsoluteFile(transformedAppFolder,transformationContext);
  FileInputStream fileInputStream=null;
  TUExecutionResult result=null;
  try {
    fileInputStream=new FileInputStream(javaClassFile);
    CompilationUnit compilationUnit=JavaParser.parse(fileInputStream);
    if (compilationUnit.getTypes().size() == 0) {
      return TUExecutionResult.error(this,new TransformationUtilityException(""String_Node_Str""));
    }
    boolean match=evaluate(compilationUnit);
    result=TUExecutionResult.value(this,match);
  }
 catch (  FileNotFoundException e) {
    result=TUExecutionResult.error(this,e);
  }
 finally {
    try {
      if (fileInputStream != null) {
        fileInputStream.close();
      }
    }
 catch (    IOException e) {
      if (result == null) {
        result=TUExecutionResult.error(this,e);
      }
 else {
        result.addWarning(e);
      }
    }
  }
  return result;
}"
39637,"/** 
 * Performs the transformation utility against the application to be transformed <br> This is the one called by the transformation engine, and regardless of any customization it could have, it must always: <ol> <li>1- Call   {@link #applyPropertiesFromContext(TransformationContext)}</li> <li>2- Call   {@link #execution(File,TransformationContext)}</li> </ol> <br> This method is NOT supposed to be overwritten, unless you really know what you are doing.
 * @param transformedAppFolder
 * @param transformationContext
 * @return the result
 */
public PerformResult perform(File transformedAppFolder,TransformationContext transformationContext) throws TransformationUtilityException {
  if (hasBeenPerformed.get()) {
    String exceptionMessage=String.format(""String_Node_Str"",getName());
    TransformationUtilityException e=new TransformationUtilityException(exceptionMessage);
    return PerformResult.error(this,e);
  }
  if (ifConditionAttributeName != null) {
    Object conditionResult=transformationContext.get(ifConditionAttributeName);
    if (conditionResult == null || conditionResult instanceof Boolean && !((Boolean)conditionResult).booleanValue()) {
      String details=String.format(""String_Node_Str"",getName(),ifConditionAttributeName);
      return PerformResult.skippedCondition(this,details);
    }
  }
  if (unlessConditionAttributeName != null) {
    Object conditionResult=transformationContext.get(unlessConditionAttributeName);
    if (conditionResult == null || conditionResult instanceof Boolean && ((Boolean)conditionResult).booleanValue()) {
      String details=String.format(""String_Node_Str"",getName(),unlessConditionAttributeName);
      return PerformResult.skippedCondition(this,details);
    }
  }
  if (utilityCondition != null) {
    try {
      TransformationUtility utilityCondition=this.utilityCondition.clone();
      utilityCondition.relative(this.getRelativePath());
      TUExecutionResult conditionExecutionResult=(TUExecutionResult)utilityCondition.execution(transformedAppFolder,transformationContext);
      Object conditionResult=conditionExecutionResult.getValue();
      if (conditionResult == null || conditionResult instanceof Boolean && !((Boolean)conditionResult).booleanValue()) {
        String utilityConditionName=(utilityCondition.getName() == null ? utilityCondition.toString() : utilityCondition.getName());
        String details=String.format(""String_Node_Str"",getName(),utilityConditionName);
        return PerformResult.skippedCondition(this,details);
      }
    }
 catch (    CloneNotSupportedException e) {
      String exceptionMessage=String.format(""String_Node_Str"",getName());
      TransformationUtilityException ex=new TransformationUtilityException(exceptionMessage,e);
      return PerformResult.error(this,ex);
    }
  }
  PerformResult result=(PerformResult)checkDependencies(transformationContext);
  if (result != null) {
    return result;
  }
  applyPropertiesFromContext(transformationContext);
  try {
    ExecutionResult executionResult=execution(transformedAppFolder,transformationContext);
    result=PerformResult.executionResult(this,executionResult);
  }
 catch (  Exception e) {
    String exceptionMessage=String.format(""String_Node_Str"",getName());
    TransformationUtilityException ex=new TransformationUtilityException(exceptionMessage,e);
    return PerformResult.error(this,ex);
  }
 finally {
    hasBeenPerformed.set(true);
  }
  return result;
}","/** 
 * Performs the transformation utility against the application to be transformed <br> This is the one called by the transformation engine, and regardless of any customization it could have, it must always: <ol> <li>1- Call   {@link #applyPropertiesFromContext(TransformationContext)}</li> <li>2- Call   {@link #execution(File,TransformationContext)}</li> </ol> <br> This method is NOT supposed to be overwritten, unless you really know what you are doing.
 * @param transformedAppFolder
 * @param transformationContext
 * @return the result
 */
public PerformResult perform(File transformedAppFolder,TransformationContext transformationContext) throws TransformationUtilityException {
  if (hasBeenPerformed.get()) {
    String exceptionMessage=String.format(""String_Node_Str"",getName());
    TransformationUtilityException e=new TransformationUtilityException(exceptionMessage);
    return PerformResult.error(this,e);
  }
  if (ifConditionAttributeName != null) {
    Object conditionResult=transformationContext.get(ifConditionAttributeName);
    if (conditionResult == null || conditionResult instanceof Boolean && !((Boolean)conditionResult).booleanValue()) {
      String details=String.format(""String_Node_Str"",getName(),ifConditionAttributeName);
      return PerformResult.skippedCondition(this,details);
    }
  }
  if (unlessConditionAttributeName != null) {
    Object conditionResult=transformationContext.get(unlessConditionAttributeName);
    if (conditionResult != null && conditionResult instanceof Boolean && ((Boolean)conditionResult).booleanValue()) {
      String details=String.format(""String_Node_Str"",getName(),unlessConditionAttributeName);
      return PerformResult.skippedCondition(this,details);
    }
  }
  if (utilityCondition != null) {
    try {
      TransformationUtility utilityCondition=this.utilityCondition.clone();
      utilityCondition.relative(this.getRelativePath());
      TUExecutionResult conditionExecutionResult=(TUExecutionResult)utilityCondition.execution(transformedAppFolder,transformationContext);
      Object conditionResult=conditionExecutionResult.getValue();
      if (conditionResult == null || conditionResult instanceof Boolean && !((Boolean)conditionResult).booleanValue()) {
        String utilityConditionName=(utilityCondition.getName() == null ? utilityCondition.toString() : utilityCondition.getName());
        String details=String.format(""String_Node_Str"",getName(),utilityConditionName);
        return PerformResult.skippedCondition(this,details);
      }
    }
 catch (    CloneNotSupportedException e) {
      String exceptionMessage=String.format(""String_Node_Str"",getName());
      TransformationUtilityException ex=new TransformationUtilityException(exceptionMessage,e);
      return PerformResult.error(this,ex);
    }
  }
  PerformResult result=(PerformResult)checkDependencies(transformationContext);
  if (result != null) {
    return result;
  }
  applyPropertiesFromContext(transformationContext);
  try {
    ExecutionResult executionResult=execution(transformedAppFolder,transformationContext);
    result=PerformResult.executionResult(this,executionResult);
  }
 catch (  Exception e) {
    String exceptionMessage=String.format(""String_Node_Str"",getName());
    TransformationUtilityException ex=new TransformationUtilityException(exceptionMessage,e);
    return PerformResult.error(this,ex);
  }
 finally {
    hasBeenPerformed.set(true);
  }
  return result;
}"
39638,"/** 
 * Replace the text based on regex.
 * @param reader
 * @param writer
 * @param regex
 * @param replacement
 * @return String
 * @throws IOException
 */
private String replace(BufferedReader reader,BufferedWriter writer,String regex,String replacement) throws IOException {
  String currentLine;
  boolean foundFirstMatch=false;
  final Pattern pattern=Pattern.compile(regex + ""String_Node_Str"");
  boolean firstLine=true;
  while ((currentLine=reader.readLine()) != null) {
    if (!foundFirstMatch && pattern.matcher(currentLine).matches()) {
      foundFirstMatch=true;
      currentLine=currentLine.replaceAll(""String_Node_Str"",replacement);
    }
    if (!firstLine) {
      writer.write(System.lineSeparator());
    }
    writer.write(currentLine);
    firstLine=false;
  }
  return String.format(""String_Node_Str"",propertyName,propertyValue,getRelativePath());
}","/** 
 * Replace the text based on regex.
 * @param reader
 * @param writer
 * @param regex
 * @param replacement
 * @return String
 * @throws IOException
 */
private String replace(BufferedReader reader,BufferedWriter writer,String regex,String replacement) throws IOException {
  String currentLine;
  boolean foundFirstMatch=false;
  final Pattern pattern=Pattern.compile(regex + ""String_Node_Str"");
  EolBufferedReader eolReader=new EolBufferedReader(reader);
  while ((currentLine=eolReader.readLineKeepStartEOL()) != null) {
    if (!foundFirstMatch && pattern.matcher(removeEOL(currentLine)).matches()) {
      foundFirstMatch=true;
      currentLine=currentLine.replaceAll(""String_Node_Str"",replacement);
    }
    writer.write(currentLine);
  }
  return String.format(""String_Node_Str"",propertyName,propertyValue,getRelativePath());
}"
39639,"@Override @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value=""String_Node_Str"") protected TOExecutionResult execution(File transformedAppFolder,TransformationContext transformationContext){
  String details;
  BufferedReader reader=null;
  BufferedWriter writer=null;
  TOExecutionResult result=null;
  File fileToBeChanged=getAbsoluteFile(transformedAppFolder,transformationContext);
  File tempFile=new File(fileToBeChanged.getAbsolutePath() + ""String_Node_Str"" + System.currentTimeMillis());
  try {
    if (!fileToBeChanged.exists()) {
      details=String.format(""String_Node_Str"",getName(),getRelativePath(transformedAppFolder,fileToBeChanged));
      return TOExecutionResult.noOp(this,details);
    }
    reader=new BufferedReader(new InputStreamReader(new FileInputStream(fileToBeChanged),StandardCharsets.UTF_8));
    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile),StandardCharsets.UTF_8));
    String currentLine;
    boolean foundFirstMatch=false;
    String regex=""String_Node_Str"" + propertyName + ""String_Node_Str"";
    final Pattern pattern=Pattern.compile(regex);
    boolean firstLine=true;
    while ((currentLine=reader.readLine()) != null) {
      if (!foundFirstMatch && pattern.matcher(currentLine).matches()) {
        foundFirstMatch=true;
        continue;
      }
      if (!firstLine) {
        writer.write(System.lineSeparator());
      }
      writer.write(currentLine);
      firstLine=false;
    }
    if (foundFirstMatch) {
      details=String.format(""String_Node_Str"",propertyName,getRelativePath());
      result=TOExecutionResult.success(this,details);
    }
 else {
      details=String.format(""String_Node_Str"",propertyName,getRelativePath());
      result=TOExecutionResult.warning(this,details);
    }
  }
 catch (  IOException e) {
    result=TOExecutionResult.error(this,e);
  }
 finally {
    try {
      if (writer != null)       try {
        writer.close();
      }
 catch (      IOException e) {
        result.addWarning(e);
      }
    }
  finally {
      if (reader != null)       try {
        reader.close();
      }
 catch (      IOException e) {
        result.addWarning(e);
      }
    }
  }
  boolean deleted=fileToBeChanged.delete();
  if (deleted) {
    if (!tempFile.renameTo(fileToBeChanged)) {
      details=String.format(""String_Node_Str"",getRelativePath(transformedAppFolder,tempFile),getRelativePath(transformedAppFolder,fileToBeChanged));
      TransformationOperationException e=new TransformationOperationException(details);
      result=TOExecutionResult.error(this,e);
    }
  }
 else {
    details=String.format(""String_Node_Str"",getRelativePath(transformedAppFolder,fileToBeChanged));
    TransformationOperationException e=new TransformationOperationException(details);
    result=TOExecutionResult.error(this,e);
  }
  return result;
}","@Override @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value=""String_Node_Str"") protected TOExecutionResult execution(File transformedAppFolder,TransformationContext transformationContext){
  String details;
  BufferedReader reader=null;
  BufferedWriter writer=null;
  TOExecutionResult result=null;
  File fileToBeChanged=getAbsoluteFile(transformedAppFolder,transformationContext);
  File tempFile=new File(fileToBeChanged.getAbsolutePath() + ""String_Node_Str"" + System.currentTimeMillis());
  try {
    if (!fileToBeChanged.exists()) {
      details=String.format(""String_Node_Str"",getName(),getRelativePath(transformedAppFolder,fileToBeChanged));
      return TOExecutionResult.noOp(this,details);
    }
    reader=new BufferedReader(new InputStreamReader(new FileInputStream(fileToBeChanged),StandardCharsets.UTF_8));
    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile),StandardCharsets.UTF_8));
    String currentLine;
    boolean foundFirstMatch=false;
    String regex=""String_Node_Str"" + propertyName + ""String_Node_Str"";
    final Pattern pattern=Pattern.compile(regex);
    EolBufferedReader eolReader=new EolBufferedReader(reader);
    while ((currentLine=eolReader.readLineKeepStartEOL()) != null) {
      if (!foundFirstMatch && pattern.matcher(removeEOL(currentLine)).matches()) {
        foundFirstMatch=true;
        continue;
      }
      writer.write(currentLine);
    }
    if (foundFirstMatch) {
      details=String.format(""String_Node_Str"",propertyName,getRelativePath());
      result=TOExecutionResult.success(this,details);
    }
 else {
      details=String.format(""String_Node_Str"",propertyName,getRelativePath());
      result=TOExecutionResult.warning(this,details);
    }
  }
 catch (  IOException e) {
    result=TOExecutionResult.error(this,e);
  }
 finally {
    try {
      if (writer != null)       try {
        writer.close();
      }
 catch (      IOException e) {
        result.addWarning(e);
      }
    }
  finally {
      if (reader != null)       try {
        reader.close();
      }
 catch (      IOException e) {
        result.addWarning(e);
      }
    }
  }
  boolean deleted=fileToBeChanged.delete();
  if (deleted) {
    if (!tempFile.renameTo(fileToBeChanged)) {
      details=String.format(""String_Node_Str"",getRelativePath(transformedAppFolder,tempFile),getRelativePath(transformedAppFolder,fileToBeChanged));
      TransformationOperationException e=new TransformationOperationException(details);
      result=TOExecutionResult.error(this,e);
    }
  }
 else {
    details=String.format(""String_Node_Str"",getRelativePath(transformedAppFolder,fileToBeChanged));
    TransformationOperationException e=new TransformationOperationException(details);
    result=TOExecutionResult.error(this,e);
  }
  return result;
}"
39640,"@Override protected TUExecutionResult execution(File transformedAppFolder,TransformationContext transformationContext){
  Collection<File> files;
  Set<File> allFiles=new HashSet<>();
  for (  String attribute : filesAttributes) {
    files=(Collection<File>)transformationContext.get(attribute);
    if (files != null) {
      allFiles.addAll(files);
    }
  }
  boolean multipleFiles=true;
  if (allFiles.size() == 0) {
    allFiles.add(getAbsoluteFile(transformedAppFolder,transformationContext));
    multipleFiles=false;
  }
  boolean multipleConfigurations=false;
  Set propertyValues=null;
  if (propertyName != null) {
    Object propertyValuesObj=transformationContext.get(propertyAttribute);
    if (!(propertyValuesObj instanceof Set)) {
      String exceptionMessage=String.format(""String_Node_Str"",propertyAttribute);
      TransformationUtilityException tue=new TransformationUtilityException(exceptionMessage);
      return TUExecutionResult.error(this,tue);
    }
    propertyValues=(Set)propertyValuesObj;
    if (propertyValues.size() == 0) {
      logger.warn(""String_Node_Str"",propertyAttribute);
    }
 else {
      multipleConfigurations=true;
      setPropertySetter();
    }
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName(),multipleFiles);
    logger.debug(""String_Node_Str"",getName(),multipleConfigurations);
  }
  TransformationOperation operation;
  operations=new ArrayList<TransformationUtility>();
  int order=1;
  try {
    for (    File file : allFiles) {
      if (!multipleConfigurations) {
        operation=createClone(order,transformedAppFolder,file);
        operations.add(operation);
        order++;
      }
 else {
        Object[] propertyValuesArray=propertyValues.toArray();
        for (        Object propertyValue : propertyValuesArray) {
          operation=createClone(order,transformedAppFolder,file);
          propertySetter.invoke(operation,propertyValue);
          operations.add(operation);
          order++;
        }
      }
    }
  }
 catch (  CloneNotSupportedException e) {
    TransformationUtilityException tue=new TransformationUtilityException(""String_Node_Str"",e);
    return TUExecutionResult.error(this,tue);
  }
catch (  InvocationTargetException|IllegalAccessException e) {
    String exceptionMessage=String.format(""String_Node_Str"",propertyName,templateOperation.getClass().getName());
    TransformationUtilityException tue=new TransformationUtilityException(exceptionMessage,e);
    return TUExecutionResult.error(this,tue);
  }
  String message=null;
  if (logger.isDebugEnabled()) {
    message=String.format(""String_Node_Str"",getName(),operations.size(),templateOperation.getClass().getSimpleName());
  }
  return TUExecutionResult.value(this,getChildren()).setDetails(message);
}","@Override protected TUExecutionResult execution(File transformedAppFolder,TransformationContext transformationContext){
  Collection<File> files;
  Set<File> allFiles=new HashSet<>();
  for (  String attribute : filesAttributes) {
    files=(Collection<File>)transformationContext.get(attribute);
    if (files != null) {
      allFiles.addAll(files);
    }
  }
  boolean multipleFiles=true;
  if (allFiles.size() == 0) {
    if (wasFileExplicitlySet()) {
      allFiles.add(getAbsoluteFile(transformedAppFolder,transformationContext));
      multipleFiles=false;
    }
 else {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"",getName());
      }
      operations=new ArrayList<TransformationUtility>();
      String message=String.format(""String_Node_Str"",getName(),templateOperation.getClass().getSimpleName());
      return TUExecutionResult.value(this,getChildren()).setDetails(message);
    }
  }
  boolean multipleConfigurations=false;
  Set propertyValues=null;
  if (propertyName != null) {
    Object propertyValuesObj=transformationContext.get(propertyAttribute);
    if (!(propertyValuesObj instanceof Set)) {
      String exceptionMessage=String.format(""String_Node_Str"",propertyAttribute);
      TransformationUtilityException tue=new TransformationUtilityException(exceptionMessage);
      return TUExecutionResult.error(this,tue);
    }
    propertyValues=(Set)propertyValuesObj;
    if (propertyValues.size() == 0) {
      logger.warn(""String_Node_Str"",propertyAttribute);
    }
 else {
      multipleConfigurations=true;
      setPropertySetter();
    }
  }
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",getName(),multipleFiles);
    logger.debug(""String_Node_Str"",getName(),multipleConfigurations);
  }
  TransformationOperation operation;
  operations=new ArrayList<TransformationUtility>();
  int order=1;
  try {
    for (    File file : allFiles) {
      if (!multipleConfigurations) {
        operation=createClone(order,transformedAppFolder,file);
        operations.add(operation);
        order++;
      }
 else {
        Object[] propertyValuesArray=propertyValues.toArray();
        for (        Object propertyValue : propertyValuesArray) {
          operation=createClone(order,transformedAppFolder,file);
          propertySetter.invoke(operation,propertyValue);
          operations.add(operation);
          order++;
        }
      }
    }
  }
 catch (  CloneNotSupportedException e) {
    TransformationUtilityException tue=new TransformationUtilityException(""String_Node_Str"",e);
    return TUExecutionResult.error(this,tue);
  }
catch (  InvocationTargetException|IllegalAccessException e) {
    String exceptionMessage=String.format(""String_Node_Str"",propertyName,templateOperation.getClass().getName());
    TransformationUtilityException tue=new TransformationUtilityException(exceptionMessage,e);
    return TUExecutionResult.error(this,tue);
  }
  String message=null;
  if (logger.isDebugEnabled()) {
    message=String.format(""String_Node_Str"",getName(),operations.size(),templateOperation.getClass().getSimpleName());
  }
  return TUExecutionResult.value(this,getChildren()).setDetails(message);
}"
39641,"/** 
 * Return true only if a file has been set, either via   {@link #relative(String)} or {@link #absolute(String)}
 * @return
 */
public final boolean isFileSet(){
  return !(getRelativePath() == null && getAbsoluteFileFromContextAttribute() == null);
}","/** 
 * Return true only if a file has been set. Every   {@link TransformationUtility} has its file set automatically bydefault to """" which means the root of the application. That is NOT the case though for  {@link TransformationOperation}object, which must set them explicitly via   {@link #relative(String)} or {@link #absolute(String)}.
 * @return
 */
public final boolean isFileSet(){
  return !(getRelativePath() == null && getAbsoluteFileFromContextAttribute() == null);
}"
39642,"@Override protected TUExecutionResult execution(File transformedAppFolder,TransformationContext transformationContext){
  File searchRootFolder=getAbsoluteFile(transformedAppFolder,transformationContext);
  FindFiles findFiles=new FindFiles(fileName,true);
  TUExecutionResult result=null;
  List<File> files=(List<File>)findFiles.execution(searchRootFolder,transformationContext).getValue();
  if (files == null || files.size() == 0) {
    String details=String.format(""String_Node_Str"",fileName,getName());
    if (failIfNotFound) {
      TransformationUtilityException e=new TransformationUtilityException(details);
      result=TUExecutionResult.error(this,e);
    }
 else {
      result=TUExecutionResult.nullResult(this,details);
    }
  }
 else   if (files.size() > 1) {
    String exceptionMessage=String.format(""String_Node_Str"",fileName);
    TransformationUtilityException e=new TransformationUtilityException(exceptionMessage);
    result=TUExecutionResult.error(this,e);
  }
 else   if (files.size() == 1) {
    result=TUExecutionResult.value(this,files.get(0));
  }
  return result;
}","@Override protected TUExecutionResult execution(File transformedAppFolder,TransformationContext transformationContext){
  File searchRootFolder=getAbsoluteFile(transformedAppFolder,transformationContext);
  if (!searchRootFolder.exists()) {
    String details=String.format(""String_Node_Str"",fileName,getName());
    if (failIfNotFound) {
      TransformationUtilityException e=new TransformationUtilityException(details);
      return TUExecutionResult.error(this,e);
    }
 else {
      return TUExecutionResult.nullResult(this,details);
    }
  }
  FindFiles findFiles=new FindFiles(fileName,true);
  TUExecutionResult result=null;
  List<File> files=(List<File>)findFiles.execution(searchRootFolder,transformationContext).getValue();
  if (files == null || files.size() == 0) {
    String details=String.format(""String_Node_Str"",fileName,getName());
    if (failIfNotFound) {
      TransformationUtilityException e=new TransformationUtilityException(details);
      result=TUExecutionResult.error(this,e);
    }
 else {
      result=TUExecutionResult.nullResult(this,details);
    }
  }
 else   if (files.size() > 1) {
    String exceptionMessage=String.format(""String_Node_Str"",fileName);
    TransformationUtilityException e=new TransformationUtilityException(exceptionMessage);
    result=TUExecutionResult.error(this,e);
  }
 else   if (files.size() == 1) {
    result=TUExecutionResult.value(this,files.get(0));
  }
  return result;
}"
39643,"@Override protected TUExecutionResult execution(File transformedAppFolder,TransformationContext transformationContext){
  File pomFile=getAbsoluteFile(transformedAppFolder,transformationContext);
  TUExecutionResult result=null;
  try {
    for (    MavenInvocationOutputHandler outputHandler : outputHandlers) {
      multipleOutputHandler.register(outputHandler);
    }
    request.setPomFile(pomFile);
    request.setGoals(Arrays.asList(goals));
    request.setOutputHandler(multipleOutputHandler);
    if (mavenFailureBehavior != null) {
      request.setFailureBehavior(mavenFailureBehavior);
    }
    if (null != properties && false == properties.isEmpty()) {
      request.setProperties(properties);
    }
    invocationResult=invoker.execute(request);
    int exitCode=invocationResult.getExitCode();
    Map<Class<? extends MavenInvocationOutputHandler>,Object> outputHandlersResult=multipleOutputHandler.getResult();
    if (exitCode == 0) {
      result=TUExecutionResult.value(this,outputHandlersResult);
    }
 else {
      Exception e=invocationResult.getExecutionException();
      if (e == null) {
        e=new TransformationUtilityException(String.format(""String_Node_Str"",Arrays.toString(goals),exitCode));
      }
      if (warnOnError) {
        result=TUExecutionResult.warning(this,e,outputHandlersResult);
      }
 else {
        result=TUExecutionResult.error(this,e,outputHandlersResult);
      }
    }
  }
 catch (  Exception e) {
    if (invocationResult != null) {
      Exception invocationException=invocationResult.getExecutionException();
      if (invocationException != null) {
        if (warnOnError) {
          result=TUExecutionResult.warning(this,e,null);
        }
 else {
          result=TUExecutionResult.error(this,invocationException);
        }
      }
    }
    if (result == null) {
      if (warnOnError) {
        result=TUExecutionResult.warning(this,e,null);
      }
 else {
        result=TUExecutionResult.error(this,e);
      }
    }
  }
  return result;
}","@Override protected TUExecutionResult execution(File transformedAppFolder,TransformationContext transformationContext){
  File pomFile=getAbsoluteFile(transformedAppFolder,transformationContext);
  TUExecutionResult result=null;
  try {
    for (    MavenInvocationOutputHandler outputHandler : outputHandlers) {
      multipleOutputHandler.register(outputHandler);
    }
    request.setPomFile(pomFile);
    request.setGoals(Arrays.asList(goals));
    request.setOutputHandler(multipleOutputHandler);
    if (mavenFailureBehavior != null) {
      request.setFailureBehavior(mavenFailureBehavior);
    }
    if (null != properties && false == properties.isEmpty()) {
      request.setProperties(properties);
    }
    invocationResult=invoker.execute(request);
    int exitCode=invocationResult.getExitCode();
    Map<Class<? extends MavenInvocationOutputHandler>,Object> outputHandlersResult=multipleOutputHandler.getResult();
    if (exitCode == 0) {
      result=TUExecutionResult.value(this,outputHandlersResult);
    }
 else {
      Exception e=invocationResult.getExecutionException();
      if (e == null) {
        e=new TransformationUtilityException(String.format(""String_Node_Str"",Arrays.toString(goals),exitCode));
      }
      if (warnOnError) {
        result=TUExecutionResult.warning(this,e,outputHandlersResult);
      }
 else {
        result=TUExecutionResult.error(this,e,outputHandlersResult);
      }
    }
  }
 catch (  Exception e) {
    if (invocationResult != null) {
      Exception invocationException=invocationResult.getExecutionException();
      if (invocationException != null) {
        result=TUExecutionResult.error(this,invocationException);
      }
    }
    if (result == null) {
      result=TUExecutionResult.error(this,e);
    }
  }
  return result;
}"
39644,"private TUExecutionResult setValue(Object value){
  if (value == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.value=value;
  return this;
}","private TUExecutionResult setValue(Object value){
  if (value == null && getType().equals(Type.VALUE)) {
    setType(Type.NULL);
    logger.warn(""String_Node_Str"",getSource().getName());
  }
  this.value=value;
  return this;
}"
39645,"@Override @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value=""String_Node_Str"") protected TOExecutionResult execution(File transformedAppFolder,TransformationContext transformationContext){
  File fileToBeChanged=getAbsoluteFile(transformedAppFolder,transformationContext);
  String details;
  if (!fileToBeChanged.exists()) {
    details=String.format(""String_Node_Str"",getName(),getRelativePath(transformedAppFolder,fileToBeChanged));
    return TOExecutionResult.noOp(this,details);
  }
  File tempFile=new File(fileToBeChanged.getAbsolutePath() + ""String_Node_Str"" + System.currentTimeMillis());
  BufferedReader reader=null;
  BufferedWriter writer=null;
  TOExecutionResult result=null;
  try {
    reader=new BufferedReader(new InputStreamReader(new FileInputStream(fileToBeChanged),StandardCharsets.UTF_8));
    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile),StandardCharsets.UTF_8));
    if (lineNumber != null) {
      result=removeBasedOnLineNumber(reader,writer);
    }
 else {
      result=removeBasedOnRegex(reader,writer);
    }
    return result;
  }
 catch (  IOException e) {
    result=TOExecutionResult.error(this,e);
  }
 finally {
    try {
      if (writer != null)       try {
        writer.close();
      }
 catch (      IOException e) {
        result.addWarning(e);
      }
    }
  finally {
      if (reader != null)       try {
        reader.close();
      }
 catch (      IOException e) {
        result.addWarning(e);
      }
    }
  }
  boolean deleted=fileToBeChanged.delete();
  if (deleted) {
    if (!tempFile.renameTo(fileToBeChanged)) {
      details=String.format(""String_Node_Str"",getRelativePath(transformedAppFolder,tempFile),getRelativePath(transformedAppFolder,fileToBeChanged));
      TransformationOperationException e=new TransformationOperationException(details);
      result=TOExecutionResult.error(this,e);
    }
  }
 else {
    details=String.format(""String_Node_Str"",getRelativePath(transformedAppFolder,fileToBeChanged));
    TransformationOperationException e=new TransformationOperationException(details);
    result=TOExecutionResult.error(this,e);
  }
  return result;
}","@Override @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value=""String_Node_Str"") protected TOExecutionResult execution(File transformedAppFolder,TransformationContext transformationContext){
  File fileToBeChanged=getAbsoluteFile(transformedAppFolder,transformationContext);
  String details;
  if (!fileToBeChanged.exists()) {
    details=String.format(""String_Node_Str"",getName(),getRelativePath(transformedAppFolder,fileToBeChanged));
    return TOExecutionResult.noOp(this,details);
  }
  File tempFile=new File(fileToBeChanged.getAbsolutePath() + ""String_Node_Str"" + System.currentTimeMillis());
  BufferedReader reader=null;
  BufferedWriter writer=null;
  TOExecutionResult result=null;
  try {
    reader=new BufferedReader(new InputStreamReader(new FileInputStream(fileToBeChanged),StandardCharsets.UTF_8));
    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile),StandardCharsets.UTF_8));
    if (lineNumber != null) {
      result=removeBasedOnLineNumber(reader,writer);
    }
 else {
      result=removeBasedOnRegex(reader,writer);
    }
  }
 catch (  IOException e) {
    result=TOExecutionResult.error(this,e);
  }
 finally {
    try {
      if (writer != null)       try {
        writer.close();
      }
 catch (      IOException e) {
        result.addWarning(e);
      }
    }
  finally {
      if (reader != null)       try {
        reader.close();
      }
 catch (      IOException e) {
        result.addWarning(e);
      }
    }
  }
  boolean deleted=fileToBeChanged.delete();
  if (deleted) {
    if (!tempFile.renameTo(fileToBeChanged)) {
      details=String.format(""String_Node_Str"",getRelativePath(transformedAppFolder,tempFile),getRelativePath(transformedAppFolder,fileToBeChanged));
      TransformationOperationException e=new TransformationOperationException(details);
      result=TOExecutionResult.error(this,e);
    }
  }
 else {
    details=String.format(""String_Node_Str"",getRelativePath(transformedAppFolder,fileToBeChanged));
    TransformationOperationException e=new TransformationOperationException(details);
    result=TOExecutionResult.error(this,e);
  }
  return result;
}"
39646,"/** 
 * Returns, as its value, the condition to keep iterating over this loop
 * @return
 */
@Override protected ExecutionResult execution(File transformedAppFolder,TransformationContext transformationContext){
  String warningMessage;
  boolean iterateAgain=false;
  if (iterations >= 2) {
    iterateAgain=nextIteration <= iterations;
  }
 else   if (attribute != null) {
    Object attributeValue=transformationContext.get(attribute);
    iterateAgain=attributeValue instanceof Boolean && ((Boolean)attributeValue).booleanValue();
  }
 else   if (condition != null) {
    TUExecutionResult executionResult=null;
    try {
      executionResult=(TUExecutionResult)condition.clone().execution(transformedAppFolder,transformationContext);
    }
 catch (    CloneNotSupportedException e) {
      TransformationUtilityException tue=new TransformationUtilityException(""String_Node_Str"",e);
      return TUExecutionResult.error(this,tue);
    }
    if (executionResult.getType().equals(TUExecutionResult.Type.VALUE)) {
      Object executionValue=executionResult.getValue();
      iterateAgain=executionValue instanceof Boolean && ((Boolean)executionValue).booleanValue();
    }
 else {
      Exception exception=executionResult.getException();
      if (exception == null) {
        return TUExecutionResult.warning(this,false,""String_Node_Str"");
      }
 else {
        return TUExecutionResult.warning(this,false,exception);
      }
    }
  }
 else {
    return TUExecutionResult.warning(this,false,""String_Node_Str"");
  }
  return TUExecutionResult.value(this,iterateAgain);
}","/** 
 * Returns, as its value, the condition to keep iterating over this loop
 * @return
 */
@Override protected ExecutionResult execution(File transformedAppFolder,TransformationContext transformationContext){
  boolean iterateAgain=false;
  if (iterations >= 2) {
    iterateAgain=nextIteration <= iterations;
  }
 else   if (attribute != null) {
    Object attributeValue=transformationContext.get(attribute);
    iterateAgain=attributeValue instanceof Boolean && ((Boolean)attributeValue).booleanValue();
  }
 else   if (condition != null) {
    TUExecutionResult executionResult=null;
    try {
      executionResult=(TUExecutionResult)condition.clone().execution(transformedAppFolder,transformationContext);
    }
 catch (    CloneNotSupportedException e) {
      TransformationUtilityException tue=new TransformationUtilityException(""String_Node_Str"",e);
      return TUExecutionResult.error(this,tue);
    }
    if (executionResult.getType().equals(TUExecutionResult.Type.VALUE)) {
      Object executionValue=executionResult.getValue();
      iterateAgain=executionValue instanceof Boolean && ((Boolean)executionValue).booleanValue();
    }
 else {
      Exception exception=executionResult.getException();
      if (exception == null) {
        return TUExecutionResult.warning(this,false,""String_Node_Str"");
      }
 else {
        return TUExecutionResult.warning(this,false,exception);
      }
    }
  }
 else {
    return TUExecutionResult.warning(this,false,""String_Node_Str"");
  }
  return TUExecutionResult.value(this,iterateAgain);
}"
39647,"@Override public String getDescription(){
  String executionCondition=iterations != -1 ? iterations + ""String_Node_Str"" : (attribute != null ? ""String_Node_Str"" + attribute + ""String_Node_Str"" : (condition != null ? ""String_Node_Str"" + condition.getName() + ""String_Node_Str"" : null));
  return String.format(DESCRIPTION,executionCondition);
}","@Override public String getDescription(){
  String executionCondition=""String_Node_Str"";
  if (iterations != -1) {
    executionCondition=iterations + ""String_Node_Str"";
  }
 else   if (attribute != null) {
    executionCondition=""String_Node_Str"" + attribute + ""String_Node_Str"";
  }
 else   if (condition != null) {
    executionCondition=""String_Node_Str"" + condition.getName() + ""String_Node_Str"";
  }
  return String.format(DESCRIPTION,executionCondition);
}"
39648,"@Override public TransformationUtility<MavenGoal> clone() throws CloneNotSupportedException {
  MavenGoal clone=(MavenGoal)super.clone();
  clone.outputHandlers=new MavenInvocationOutputHandler[outputHandlers.length];
  int i=0;
  for (  MavenInvocationOutputHandler outputHandler : outputHandlers) {
    clone.outputHandlers[i]=(MavenInvocationOutputHandler)outputHandler.copy();
    i++;
  }
  clone.request=new DefaultInvocationRequest();
  return clone;
}","@Override public TransformationUtility<MavenGoal> clone() throws CloneNotSupportedException {
  MavenGoal clone=(MavenGoal)super.clone();
  clone.multipleOutputHandler=new MultipleOutputHandler();
  clone.request=new DefaultInvocationRequest();
  clone.outputHandlers=new MavenInvocationOutputHandler[outputHandlers.length];
  int i=0;
  for (  MavenInvocationOutputHandler outputHandler : outputHandlers) {
    clone.outputHandlers[i]=(MavenInvocationOutputHandler)outputHandler.copy();
    i++;
  }
  return clone;
}"
39649,"@Override protected TUExecutionResult execution(File transformedAppFolder,TransformationContext transformationContext){
  File pomFile=getAbsoluteFile(transformedAppFolder,transformationContext);
  TUExecutionResult result=null;
  try {
    MultipleOutputHandler multipleOutputHandler=new MultipleOutputHandler();
    for (    MavenInvocationOutputHandler outputHandler : outputHandlers) {
      multipleOutputHandler.register(outputHandler);
    }
    request.setPomFile(pomFile);
    request.setGoals(Arrays.asList(goals));
    request.setOutputHandler(multipleOutputHandler);
    if (mavenFailureBehavior != null) {
      request.setFailureBehavior(mavenFailureBehavior);
    }
    if (null != properties && false == properties.isEmpty()) {
      request.setProperties(properties);
    }
    Invoker invoker=new DefaultInvoker();
    InvocationResult invocationResult=invoker.execute(request);
    int exitCode=invocationResult.getExitCode();
    Map<Class<? extends MavenInvocationOutputHandler>,Object> outputHandlersResult=multipleOutputHandler.getResult();
    if (exitCode == 0) {
      result=TUExecutionResult.value(this,outputHandlersResult);
    }
 else {
      Exception e=invocationResult.getExecutionException();
      if (e == null) {
        e=new TransformationUtilityException(String.format(""String_Node_Str"",Arrays.toString(goals),exitCode));
      }
      result=TUExecutionResult.error(this,outputHandlersResult,e);
    }
  }
 catch (  Exception e) {
    result=TUExecutionResult.error(this,e);
  }
  return result;
}","@Override protected TUExecutionResult execution(File transformedAppFolder,TransformationContext transformationContext){
  File pomFile=getAbsoluteFile(transformedAppFolder,transformationContext);
  TUExecutionResult result=null;
  try {
    for (    MavenInvocationOutputHandler outputHandler : outputHandlers) {
      multipleOutputHandler.register(outputHandler);
    }
    request.setPomFile(pomFile);
    request.setGoals(Arrays.asList(goals));
    request.setOutputHandler(multipleOutputHandler);
    if (mavenFailureBehavior != null) {
      request.setFailureBehavior(mavenFailureBehavior);
    }
    if (null != properties && false == properties.isEmpty()) {
      request.setProperties(properties);
    }
    invocationResult=invoker.execute(request);
    int exitCode=invocationResult.getExitCode();
    Map<Class<? extends MavenInvocationOutputHandler>,Object> outputHandlersResult=multipleOutputHandler.getResult();
    if (exitCode == 0) {
      result=TUExecutionResult.value(this,outputHandlersResult);
    }
 else {
      Exception e=invocationResult.getExecutionException();
      if (e == null) {
        e=new TransformationUtilityException(String.format(""String_Node_Str"",Arrays.toString(goals),exitCode));
      }
      result=TUExecutionResult.error(this,outputHandlersResult,e);
    }
  }
 catch (  Exception e) {
    if (invocationResult != null) {
      Exception invocationException=invocationResult.getExecutionException();
      if (invocationException != null) {
        result=TUExecutionResult.error(this,invocationException);
      }
    }
    if (result == null) {
      result=TUExecutionResult.error(this,e);
    }
  }
  return result;
}"
39650,"@Override @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value=""String_Node_Str"") protected TOExecutionResult execution(File transformedAppFolder,TransformationContext transformationContext){
  File fileToBeChanged=getAbsoluteFile(transformedAppFolder,transformationContext);
  File tempFile=new File(fileToBeChanged.getAbsolutePath() + ""String_Node_Str"" + System.currentTimeMillis());
  BufferedReader readerOriginalFile=null;
  BufferedWriter writer=null;
  String details=null;
  TOExecutionResult result=null;
  try {
    readerOriginalFile=new BufferedReader(new InputStreamReader(new FileInputStream(fileToBeChanged),StandardCharsets.UTF_8));
    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile),StandardCharsets.UTF_8));
switch (insertionMode) {
case LINE_NUMBER:
      details=insertAtSpecificLine(readerOriginalFile,writer);
    break;
case REGEX_FIRST:
  details=insertAfterRegex(readerOriginalFile,writer,true);
break;
case REGEX_ALL:
details=insertAfterRegex(readerOriginalFile,writer,false);
break;
default :
case CONCAT:
details=concat(readerOriginalFile,writer);
break;
}
result=TOExecutionResult.success(this,details);
}
 catch (IOException e) {
result=TOExecutionResult.error(this,e);
}
 finally {
try {
if (writer != null) try {
writer.close();
}
 catch (IOException e) {
result.addWarning(e);
}
}
  finally {
if (readerOriginalFile != null) try {
readerOriginalFile.close();
}
 catch (IOException e) {
result.addWarning(e);
}
}
}
if (!tempFile.renameTo(fileToBeChanged)) {
details=String.format(""String_Node_Str"",getRelativePath(transformedAppFolder,tempFile),getRelativePath(transformedAppFolder,fileToBeChanged));
TransformationOperationException e=new TransformationOperationException(details);
result=TOExecutionResult.error(this,e);
}
return result;
}","@Override @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value=""String_Node_Str"") protected TOExecutionResult execution(File transformedAppFolder,TransformationContext transformationContext){
  File fileToBeChanged=getAbsoluteFile(transformedAppFolder,transformationContext);
  File tempFile=new File(fileToBeChanged.getAbsolutePath() + ""String_Node_Str"" + System.currentTimeMillis());
  BufferedReader readerOriginalFile=null;
  BufferedWriter writer=null;
  String details=null;
  TOExecutionResult result=null;
  try {
    readerOriginalFile=new BufferedReader(new InputStreamReader(new FileInputStream(fileToBeChanged),StandardCharsets.UTF_8));
    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile),StandardCharsets.UTF_8));
switch (insertionMode) {
case LINE_NUMBER:
      details=insertAtSpecificLine(readerOriginalFile,writer);
    break;
case REGEX_FIRST:
  details=insertAfterRegex(readerOriginalFile,writer,true);
break;
case REGEX_ALL:
details=insertAfterRegex(readerOriginalFile,writer,false);
break;
default :
case CONCAT:
details=concat(readerOriginalFile,writer);
break;
}
result=TOExecutionResult.success(this,details);
}
 catch (IOException e) {
result=TOExecutionResult.error(this,e);
}
 finally {
try {
if (writer != null) try {
writer.close();
}
 catch (IOException e) {
result.addWarning(e);
}
}
  finally {
if (readerOriginalFile != null) try {
readerOriginalFile.close();
}
 catch (IOException e) {
result.addWarning(e);
}
}
}
boolean bDeleted=fileToBeChanged.delete();
if (bDeleted) {
if (!tempFile.renameTo(fileToBeChanged)) {
details=String.format(""String_Node_Str"",getRelativePath(transformedAppFolder,tempFile),getRelativePath(transformedAppFolder,fileToBeChanged));
TransformationOperationException e=new TransformationOperationException(details);
result=TOExecutionResult.error(this,e);
}
}
 else {
details=String.format(""String_Node_Str"",getRelativePath(transformedAppFolder,fileToBeChanged));
TransformationOperationException e=new TransformationOperationException(details);
result=TOExecutionResult.error(this,e);
}
return result;
}"
39651,"@Override @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value=""String_Node_Str"") protected TOExecutionResult execution(File transformedAppFolder,TransformationContext transformationContext){
  File fileToBeChanged=getAbsoluteFile(transformedAppFolder,transformationContext);
  File tempFile=new File(fileToBeChanged.getAbsolutePath() + ""String_Node_Str"" + System.currentTimeMillis());
  BufferedReader reader=null;
  BufferedWriter writer=null;
  String details;
  TOExecutionResult result=null;
  try {
    reader=new BufferedReader(new InputStreamReader(new FileInputStream(fileToBeChanged),StandardCharsets.UTF_8));
    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile),StandardCharsets.UTF_8));
    details=replace(reader,writer);
    result=TOExecutionResult.success(this,details);
  }
 catch (  IOException e) {
    result=TOExecutionResult.error(this,e);
  }
 finally {
    try {
      if (writer != null)       try {
        writer.close();
      }
 catch (      IOException e) {
        result.addWarning(e);
      }
    }
  finally {
      if (reader != null)       try {
        reader.close();
      }
 catch (      IOException e) {
        result.addWarning(e);
      }
    }
  }
  if (!tempFile.renameTo(fileToBeChanged)) {
    details=String.format(""String_Node_Str"",getRelativePath(transformedAppFolder,tempFile),getRelativePath(transformedAppFolder,fileToBeChanged));
    TransformationOperationException e=new TransformationOperationException(details);
    result=TOExecutionResult.error(this,e);
  }
  return result;
}","@Override @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value=""String_Node_Str"") protected TOExecutionResult execution(File transformedAppFolder,TransformationContext transformationContext){
  File fileToBeChanged=getAbsoluteFile(transformedAppFolder,transformationContext);
  File tempFile=new File(fileToBeChanged.getAbsolutePath() + ""String_Node_Str"" + System.currentTimeMillis());
  BufferedReader reader=null;
  BufferedWriter writer=null;
  String details;
  TOExecutionResult result=null;
  try {
    reader=new BufferedReader(new InputStreamReader(new FileInputStream(fileToBeChanged),StandardCharsets.UTF_8));
    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile),StandardCharsets.UTF_8));
    details=replace(reader,writer);
    result=TOExecutionResult.success(this,details);
  }
 catch (  IOException e) {
    result=TOExecutionResult.error(this,e);
  }
 finally {
    try {
      if (writer != null)       try {
        writer.close();
      }
 catch (      IOException e) {
        result.addWarning(e);
      }
    }
  finally {
      if (reader != null)       try {
        reader.close();
      }
 catch (      IOException e) {
        result.addWarning(e);
      }
    }
  }
  boolean bDeleted=fileToBeChanged.delete();
  if (bDeleted) {
    if (!tempFile.renameTo(fileToBeChanged)) {
      details=String.format(""String_Node_Str"",getRelativePath(transformedAppFolder,tempFile),getRelativePath(transformedAppFolder,fileToBeChanged));
      TransformationOperationException e=new TransformationOperationException(details);
      result=TOExecutionResult.error(this,e);
    }
  }
 else {
    details=String.format(""String_Node_Str"",getRelativePath(transformedAppFolder,fileToBeChanged));
    TransformationOperationException e=new TransformationOperationException(details);
    result=TOExecutionResult.error(this,e);
  }
  return result;
}"
39652,"/** 
 * Performs the transformation operation against the application to be transformed
 * @param transformedAppFolder
 * @param transformationContext
 * @return a message stating with details the operation that has been performed
 */
public final synchronized String perform(File transformedAppFolder,TransformationContext transformationContext) throws TransformationOperationException {
  if (hasBeenPerformed.get()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  try {
    applyPropertiesFromContext(transformationContext);
  }
 catch (  TransformationUtilityException e) {
    throw new TransformationOperationException(e.getMessage(),e);
  }
  if (conditionAttributeName != null && (Boolean)transformationContext.get(conditionAttributeName)) {
    return String.format(""String_Node_Str"",getName(),conditionAttributeName);
  }
  if (!preExecutionValidation(transformedAppFolder)) {
    throw new TransformationOperationException(getName() + ""String_Node_Str"");
  }
  String resultMessage;
  try {
    resultMessage=execution(transformedAppFolder,transformationContext);
  }
 catch (  Exception e) {
    throw new TransformationOperationException(getName() + ""String_Node_Str"",e);
  }
  hasBeenPerformed.set(true);
  return resultMessage;
}","/** 
 * Performs the transformation operation against the application to be transformed
 * @param transformedAppFolder
 * @param transformationContext
 * @return a message stating with details the operation that has been performed
 */
public final synchronized String perform(File transformedAppFolder,TransformationContext transformationContext) throws TransformationOperationException {
  if (hasBeenPerformed.get()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  try {
    applyPropertiesFromContext(transformationContext);
  }
 catch (  TransformationUtilityException e) {
    throw new TransformationOperationException(e.getMessage(),e);
  }
  if (conditionAttributeName != null && !(Boolean)transformationContext.get(conditionAttributeName)) {
    return String.format(""String_Node_Str"",getName(),conditionAttributeName);
  }
  if (!preExecutionValidation(transformedAppFolder)) {
    throw new TransformationOperationException(getName() + ""String_Node_Str"");
  }
  String resultMessage;
  try {
    resultMessage=execution(transformedAppFolder,transformationContext);
  }
 catch (  Exception e) {
    throw new TransformationOperationException(getName() + ""String_Node_Str"",e);
  }
  hasBeenPerformed.set(true);
  return resultMessage;
}"
39653,"public static String getCurrentTimeStamp(){
  return simpleDateFormat.format(new Date());
}","public String getCurrentTimeStamp(){
  return simpleDateFormat.format(new Date());
}"
39654,"private File prepareOutputFolder(Transformation transformation){
  logger.debug(""String_Node_Str"");
  Application application=transformation.getApplication();
  Configuration configuration=transformation.getConfiguration();
  logger.info(""String_Node_Str"" + application.getFolder());
  File originalAppParent=application.getFolder().getParentFile();
  String transformedAppFolderName=application.getFolder().getName() + ""String_Node_Str"" + getCurrentTimeStamp();
  File transformedAppFolder;
  if (configuration.getOutputFolder() != null) {
    if (!configuration.getOutputFolder().exists()) {
      throw new IllegalArgumentException(""String_Node_Str"" + configuration.getOutputFolder() + ""String_Node_Str"");
    }
    transformedAppFolder=new File(configuration.getOutputFolder().getAbsolutePath() + File.separator + transformedAppFolderName);
  }
 else {
    transformedAppFolder=new File(originalAppParent.getAbsolutePath() + File.separator + transformedAppFolderName);
  }
  logger.info(""String_Node_Str"" + transformedAppFolder);
  transformation.setTransformedApplicationLocation(transformedAppFolder);
  transformedAppFolder.mkdir();
  try {
    FileUtils.copyDirectory(application.getFolder(),transformedAppFolder);
  }
 catch (  IOException e) {
    String exceptionMessage=String.format(""String_Node_Str"",transformedAppFolder,application.getFolder());
    logger.error(exceptionMessage,e);
    throw new InternalException(exceptionMessage,e);
  }
  logger.debug(""String_Node_Str"");
  return transformedAppFolder;
}","private File prepareOutputFolder(Transformation transformation){
  logger.debug(""String_Node_Str"");
  Application application=transformation.getApplication();
  Configuration configuration=transformation.getConfiguration();
  logger.info(""String_Node_Str"" + application.getFolder());
  File originalAppParent=application.getFolder().getParentFile();
  String transformedAppFolderName=application.getFolder().getName() + ""String_Node_Str"" + getCurrentTimeStamp();
  File transformedAppFolder;
  if (configuration.getOutputFolder() != null) {
    if (!configuration.getOutputFolder().exists()) {
      throw new IllegalArgumentException(""String_Node_Str"" + configuration.getOutputFolder() + ""String_Node_Str"");
    }
    transformedAppFolder=new File(configuration.getOutputFolder().getAbsolutePath() + File.separator + transformedAppFolderName);
  }
 else {
    transformedAppFolder=new File(originalAppParent.getAbsolutePath() + File.separator + transformedAppFolderName);
  }
  logger.info(""String_Node_Str"" + transformedAppFolder);
  transformation.setTransformedApplicationLocation(transformedAppFolder);
  boolean bDirCreated=transformedAppFolder.mkdir();
  if (bDirCreated) {
    try {
      FileUtils.copyDirectory(application.getFolder(),transformedAppFolder);
    }
 catch (    IOException e) {
      String exceptionMessage=String.format(""String_Node_Str"",transformedAppFolder,application.getFolder());
      logger.error(exceptionMessage,e);
      throw new InternalException(exceptionMessage,e);
    }
    logger.debug(""String_Node_Str"");
  }
 else {
    logger.error(""String_Node_Str"");
  }
  return transformedAppFolder;
}"
39655,"@Override public String getDescription(){
  return String.format(DESCRIPTION,fileName,(getRelativePath() == ""String_Node_Str"" ? ""String_Node_Str"" : getRelativePath()));
}","@Override public String getDescription(){
  return String.format(DESCRIPTION,fileName,(""String_Node_Str"".equals(getRelativePath()) ? ""String_Node_Str"" : getRelativePath()));
}"
39656,"private File prepareOutputFolder(Transformation transformation){
  logger.debug(""String_Node_Str"");
  Application application=transformation.getApplication();
  Configuration configuration=transformation.getConfiguration();
  logger.info(""String_Node_Str"" + application.getFolder());
  File originalAppParent=application.getFolder().getParentFile();
  String transformedAppFolderName=application.getFolder().getName() + ""String_Node_Str"" + getCurrentTimeStamp();
  File transformedAppFolder;
  if (configuration.getOutputFolder() != null) {
    if (!configuration.getOutputFolder().exists()) {
      throw new IllegalArgumentException(""String_Node_Str"" + configuration.getOutputFolder() + ""String_Node_Str"");
    }
    transformedAppFolder=new File(configuration.getOutputFolder().getAbsolutePath() + File.separator + transformedAppFolderName);
  }
 else {
    transformedAppFolder=new File(originalAppParent.getAbsolutePath() + File.separator + transformedAppFolderName);
  }
  logger.info(""String_Node_Str"" + transformedAppFolder);
  transformation.setTransformedApplicationLocation(transformedAppFolder);
  transformedAppFolder.mkdir();
  try {
    FileUtils.copyDirectory(application.getFolder(),transformedAppFolder);
  }
 catch (  IOException e) {
    String exceptionMessage=String.format(""String_Node_Str"",transformedAppFolder,application.getFolder());
    logger.error(exceptionMessage,e);
    throw new InternalException(exceptionMessage,e);
  }
  logger.debug(""String_Node_Str"");
  return transformedAppFolder;
}","private File prepareOutputFolder(Transformation transformation){
  logger.debug(""String_Node_Str"");
  Application application=transformation.getApplication();
  Configuration configuration=transformation.getConfiguration();
  logger.info(""String_Node_Str"" + application.getFolder());
  File originalAppParent=application.getFolder().getParentFile();
  String transformedAppFolderName=application.getFolder().getName() + ""String_Node_Str"" + getCurrentTimeStamp();
  File transformedAppFolder;
  if (configuration.getOutputFolder() != null) {
    if (!configuration.getOutputFolder().exists()) {
      throw new IllegalArgumentException(""String_Node_Str"" + configuration.getOutputFolder() + ""String_Node_Str"");
    }
    transformedAppFolder=new File(configuration.getOutputFolder().getAbsolutePath() + File.separator + transformedAppFolderName);
  }
 else {
    transformedAppFolder=new File(originalAppParent.getAbsolutePath() + File.separator + transformedAppFolderName);
  }
  logger.info(""String_Node_Str"" + transformedAppFolder);
  transformation.setTransformedApplicationLocation(transformedAppFolder);
  boolean bDirCreated=transformedAppFolder.mkdir();
  if (bDirCreated) {
    try {
      FileUtils.copyDirectory(application.getFolder(),transformedAppFolder);
    }
 catch (    IOException e) {
      String exceptionMessage=String.format(""String_Node_Str"",transformedAppFolder,application.getFolder());
      logger.error(exceptionMessage,e);
      throw new InternalException(exceptionMessage,e);
    }
    logger.debug(""String_Node_Str"");
  }
 else {
    logger.error(""String_Node_Str"");
  }
  return transformedAppFolder;
}"
39657,"public void perform(Transformation transformation) throws TransformationException {
  logger.debug(""String_Node_Str"" + transformation);
  File transformedAppFolder=prepareOutputFolder(transformation);
  TransformationTemplate template=transformation.getTemplate();
  int total=template.getTransformationUtilitiesList().size();
  logger.info(""String_Node_Str"" + total);
  logger.info(""String_Node_Str"" + template.getOperationsCount() + ""String_Node_Str"");
  int operationsExecutionOrder=1;
  TransformationContext transformationContext=new TransformationContextImpl();
  TransformationUtility utility;
  TransformationOperation operation;
  for (  Object transformationUtilityObj : template.getTransformationUtilitiesList()) {
    if (transformationUtilityObj instanceof TransformationOperation) {
      operation=(TransformationOperation)transformationUtilityObj;
      String result=null;
      try {
        result=operation.perform(transformedAppFolder,transformationContext);
        String key=(operation.getContextAttributeName() != null ? operation.getContextAttributeName() : operation.getName());
        transformationContext.put(key,result);
      }
 catch (      TransformationOperationException e) {
        if (operation.abortTransformationOnFailure()) {
          logger.error(""String_Node_Str"");
          logger.error(""String_Node_Str"" + operation.getDescription());
          logger.error(""String_Node_Str"" + e.getCause());
          throw new TransformationException(""String_Node_Str"" + operation.getName() + ""String_Node_Str"",e);
        }
 else {
        }
      }
      logger.info(""String_Node_Str"" + operationsExecutionOrder + ""String_Node_Str""+ result);
      operationsExecutionOrder++;
    }
 else {
      utility=(TransformationUtility)transformationUtilityObj;
      try {
        Object result=utility.perform(transformedAppFolder,transformationContext);
        String key=(utility.getContextAttributeName() != null ? utility.getContextAttributeName() : utility.getName());
        transformationContext.put(key,result);
        logger.debug(""String_Node_Str"",utility,utility.getName());
      }
 catch (      TransformationUtilityException e) {
        logger.error(""String_Node_Str"");
        logger.error(""String_Node_Str"" + utility.getDescription());
        logger.error(""String_Node_Str"" + e.getCause());
        throw new TransformationException(""String_Node_Str"" + utility.getName() + ""String_Node_Str"",e);
      }
    }
  }
  logger.info(""String_Node_Str"");
}","public void perform(Transformation transformation) throws TransformationException {
  logger.debug(""String_Node_Str"" + transformation);
  File transformedAppFolder=prepareOutputFolder(transformation);
  TransformationTemplate template=transformation.getTemplate();
  logger.info(""String_Node_Str"" + template.getOperationsCount() + ""String_Node_Str"");
  int operationsExecutionOrder=1;
  TransformationContext transformationContext=new TransformationContextImpl();
  TransformationUtility utility;
  TransformationOperation operation;
  for (  Object transformationUtilityObj : template.getTransformationUtilitiesList()) {
    if (transformationUtilityObj instanceof TransformationOperation) {
      operation=(TransformationOperation)transformationUtilityObj;
      String result=null;
      try {
        result=operation.perform(transformedAppFolder,transformationContext);
        String key=(operation.getContextAttributeName() != null ? operation.getContextAttributeName() : operation.getName());
        transformationContext.put(key,result);
      }
 catch (      TransformationOperationException e) {
        if (operation.abortTransformationOnFailure()) {
          logger.error(""String_Node_Str"");
          logger.error(""String_Node_Str"" + operation.getDescription());
          logger.error(""String_Node_Str"" + e.getCause());
          throw new TransformationException(""String_Node_Str"" + operation.getName() + ""String_Node_Str"",e);
        }
 else {
        }
      }
      logger.info(""String_Node_Str"" + operationsExecutionOrder + ""String_Node_Str""+ result);
      operationsExecutionOrder++;
    }
 else {
      utility=(TransformationUtility)transformationUtilityObj;
      try {
        Object result=utility.perform(transformedAppFolder,transformationContext);
        String key=(utility.getContextAttributeName() != null ? utility.getContextAttributeName() : utility.getName());
        transformationContext.put(key,result);
        logger.debug(""String_Node_Str"",utility,utility.getName());
      }
 catch (      TransformationUtilityException e) {
        logger.error(""String_Node_Str"");
        logger.error(""String_Node_Str"" + utility.getDescription());
        logger.error(""String_Node_Str"" + e.getCause());
        throw new TransformationException(""String_Node_Str"" + utility.getName() + ""String_Node_Str"",e);
      }
    }
  }
  logger.info(""String_Node_Str"");
}"
39658,"public void perform(Transformation transformation) throws TransformationException {
  logger.debug(""String_Node_Str"" + transformation);
  File transformedAppFolder=prepareOutputFolder(transformation);
  TransformationTemplate template=transformation.getTemplate();
  int total=template.getTransformationUtilitiesList().size();
  logger.info(""String_Node_Str"" + template.getOperationsCount() + ""String_Node_Str"");
  int operationsExecutionOrder=1;
  TransformationContext transformationContext=new TransformationContextImpl();
  TransformationUtility utility;
  TransformationOperation operation;
  for (  Object transformationUtilityObj : template.getTransformationUtilitiesList()) {
    if (transformationUtilityObj instanceof TransformationOperation) {
      operation=(TransformationOperation)transformationUtilityObj;
      String result=null;
      try {
        result=operation.perform(transformedAppFolder,transformationContext);
        String key=(operation.getContextAttributeName() != null ? operation.getContextAttributeName() : operation.getName());
        transformationContext.put(key,result);
      }
 catch (      TransformationOperationException e) {
        if (operation.abortTransformationOnFailure()) {
          logger.error(""String_Node_Str"");
          logger.error(""String_Node_Str"" + operation.getDescription());
          logger.error(""String_Node_Str"" + e.getCause());
          throw new TransformationException(""String_Node_Str"" + operation.getName() + ""String_Node_Str"",e);
        }
 else {
        }
      }
      logger.info(""String_Node_Str"" + operationsExecutionOrder + ""String_Node_Str""+ result);
      operationsExecutionOrder++;
    }
 else {
      utility=(TransformationUtility)transformationUtilityObj;
      try {
        Object result=utility.perform(transformedAppFolder,transformationContext);
        String key=(utility.getContextAttributeName() != null ? utility.getContextAttributeName() : utility.getName());
        transformationContext.put(key,result);
        logger.debug(""String_Node_Str"",utility,utility.getName());
      }
 catch (      TransformationUtilityException e) {
        logger.error(""String_Node_Str"");
        logger.error(""String_Node_Str"" + utility.getDescription());
        logger.error(""String_Node_Str"" + e.getCause());
        throw new TransformationException(""String_Node_Str"" + utility.getName() + ""String_Node_Str"",e);
      }
    }
  }
  logger.info(""String_Node_Str"");
}","public void perform(Transformation transformation) throws TransformationException {
  logger.debug(""String_Node_Str"" + transformation);
  File transformedAppFolder=prepareOutputFolder(transformation);
  TransformationTemplate template=transformation.getTemplate();
  int total=template.getTransformationUtilitiesList().size();
  logger.info(""String_Node_Str"" + total);
  logger.info(""String_Node_Str"" + template.getOperationsCount() + ""String_Node_Str"");
  int operationsExecutionOrder=1;
  TransformationContext transformationContext=new TransformationContextImpl();
  TransformationUtility utility;
  TransformationOperation operation;
  for (  Object transformationUtilityObj : template.getTransformationUtilitiesList()) {
    if (transformationUtilityObj instanceof TransformationOperation) {
      operation=(TransformationOperation)transformationUtilityObj;
      String result=null;
      try {
        result=operation.perform(transformedAppFolder,transformationContext);
        String key=(operation.getContextAttributeName() != null ? operation.getContextAttributeName() : operation.getName());
        transformationContext.put(key,result);
      }
 catch (      TransformationOperationException e) {
        if (operation.abortTransformationOnFailure()) {
          logger.error(""String_Node_Str"");
          logger.error(""String_Node_Str"" + operation.getDescription());
          logger.error(""String_Node_Str"" + e.getCause());
          throw new TransformationException(""String_Node_Str"" + operation.getName() + ""String_Node_Str"",e);
        }
 else {
        }
      }
      logger.info(""String_Node_Str"" + operationsExecutionOrder + ""String_Node_Str""+ result);
      operationsExecutionOrder++;
    }
 else {
      utility=(TransformationUtility)transformationUtilityObj;
      try {
        Object result=utility.perform(transformedAppFolder,transformationContext);
        String key=(utility.getContextAttributeName() != null ? utility.getContextAttributeName() : utility.getName());
        transformationContext.put(key,result);
        logger.debug(""String_Node_Str"",utility,utility.getName());
      }
 catch (      TransformationUtilityException e) {
        logger.error(""String_Node_Str"");
        logger.error(""String_Node_Str"" + utility.getDescription());
        logger.error(""String_Node_Str"" + e.getCause());
        throw new TransformationException(""String_Node_Str"" + utility.getName() + ""String_Node_Str"",e);
      }
    }
  }
  logger.info(""String_Node_Str"");
}"
39659,"private String removeBasedOnRegex(File fileToBeChanged) throws Exception {
  File tempFile=new File(fileToBeChanged.getAbsolutePath() + ""String_Node_Str"" + System.currentTimeMillis());
  BufferedReader reader=null;
  BufferedWriter writer=null;
  int n=0;
  try {
    reader=new BufferedReader(new FileReader(fileToBeChanged));
    writer=new BufferedWriter(new FileWriter(tempFile));
    String currentLine;
    boolean foundFirstMatch=false;
    final Pattern pattern=Pattern.compile(regex);
    while ((currentLine=reader.readLine()) != null) {
      if ((!firstOnly || !foundFirstMatch) && pattern.matcher(currentLine).matches()) {
        foundFirstMatch=true;
        n++;
        continue;
      }
      writer.write(currentLine);
      writer.write(System.lineSeparator());
    }
  }
  finally {
    if (writer != null)     writer.close();
    if (reader != null)     reader.close();
  }
  boolean successful=tempFile.renameTo(fileToBeChanged);
  return String.format(""String_Node_Str"",getRelativePath(),n,regex);
}","private String removeBasedOnRegex(File fileToBeChanged) throws Exception {
  File tempFile=new File(fileToBeChanged.getAbsolutePath() + ""String_Node_Str"" + System.currentTimeMillis());
  BufferedReader reader=null;
  BufferedWriter writer=null;
  int n=0;
  try {
    reader=new BufferedReader(new InputStreamReader(new FileInputStream(fileToBeChanged),StandardCharsets.UTF_8));
    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile),StandardCharsets.UTF_8));
    String currentLine;
    boolean foundFirstMatch=false;
    final Pattern pattern=Pattern.compile(regex);
    while ((currentLine=reader.readLine()) != null) {
      if ((!firstOnly || !foundFirstMatch) && pattern.matcher(currentLine).matches()) {
        foundFirstMatch=true;
        n++;
        continue;
      }
      writer.write(currentLine);
      writer.write(System.lineSeparator());
    }
  }
  finally {
    if (writer != null)     writer.close();
    if (reader != null)     reader.close();
  }
  boolean successful=tempFile.renameTo(fileToBeChanged);
  return String.format(""String_Node_Str"",getRelativePath(),n,regex);
}"
39660,"private String removeBasedOnLineNumber(File fileToBeChanged) throws Exception {
  File tempFile=new File(fileToBeChanged.getAbsolutePath() + ""String_Node_Str"" + System.currentTimeMillis());
  BufferedReader reader=null;
  BufferedWriter writer=null;
  int n=0;
  try {
    reader=new BufferedReader(new FileReader(fileToBeChanged));
    writer=new BufferedWriter(new FileWriter(tempFile));
    String currentLine;
    while ((currentLine=reader.readLine()) != null) {
      n++;
      if (n == lineNumber) {
        continue;
      }
      writer.write(currentLine);
      writer.write(System.lineSeparator());
    }
  }
  finally {
    if (writer != null)     writer.close();
    if (reader != null)     reader.close();
  }
  boolean successful=tempFile.renameTo(fileToBeChanged);
  return String.format(""String_Node_Str"",getRelativePath(),lineNumber);
}","private String removeBasedOnLineNumber(File fileToBeChanged) throws Exception {
  File tempFile=new File(fileToBeChanged.getAbsolutePath() + ""String_Node_Str"" + System.currentTimeMillis());
  BufferedReader reader=null;
  BufferedWriter writer=null;
  int n=0;
  try {
    reader=new BufferedReader(new InputStreamReader(new FileInputStream(fileToBeChanged),StandardCharsets.UTF_8));
    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile),StandardCharsets.UTF_8));
    String currentLine;
    while ((currentLine=reader.readLine()) != null) {
      n++;
      if (n == lineNumber) {
        continue;
      }
      writer.write(currentLine);
      writer.write(System.lineSeparator());
    }
  }
  finally {
    if (writer != null)     writer.close();
    if (reader != null)     reader.close();
  }
  boolean successful=tempFile.renameTo(fileToBeChanged);
  return String.format(""String_Node_Str"",getRelativePath(),lineNumber);
}"
39661,"public static String getCurrentTimeStamp(){
  return simpleDateFormat.format(new Date());
}","public String getCurrentTimeStamp(){
  return simpleDateFormat.format(new Date());
}"
39662,"/** 
 * This method allows setting properties in this transformation utility during transformation time, right before its execution. This is very useful when the property value is not known during transformation definition. Any attribute stored in the transformation context can be used as the value to be set to the property. In most of the cases the result of a prior transformation utility is used as property value. Notice that, because this feature relies on reflection, it is not cheap, especially because it happens during transformation time. So, use it only when really necessary.
 * @param propertyName the transformation utility Java bean property name
 * @param contextAttributeName the name of the transformation context attribute whosevalue will be set as the property value right before execution
 * @return this transformation utility
 */
public final TU set(String propertyName,String contextAttributeName){
  validateProperty(propertyName);
  lateProperties.put(propertyName,contextAttributeName);
  return (TU)this;
}","/** 
 * This method allows setting properties in this transformation utility during transformation time, right before its execution. This is very useful when the property value is not known during transformation definition. Any attribute stored in the transformation context can be used as the value to be set to the property. In most of the cases the result of a prior transformation utility is used as property value. Notice that, because this feature relies on reflection, it is not cheap, especially because it happens during transformation time. So, use it only when really necessary.
 * @param propertyName the transformation utility Java bean property name
 * @param contextAttributeName the name of the transformation context attribute whosevalue will be set as the property value right before execution
 * @return this transformation utility
 */
public final TU set(String propertyName,String contextAttributeName){
  Method method=getMethod(propertyName);
  latePropertiesAttributes.put(propertyName,contextAttributeName);
  latePropertiesSetters.put(propertyName,method);
  return (TU)this;
}"
39663,"/** 
 * Applies transformation utility properties during transformation time, but prior to execution (right before it). The properties values are gotten from the transformation context object.
 * @param transformationContext
 */
protected final void applyPropertiesFromContext(TransformationContext transformationContext) throws TransformationUtilityException {
  String attributeName;
  Method method;
  String methodName;
  for (  String propertyName : lateProperties.keySet()) {
    attributeName=lateProperties.get(propertyName);
    try {
      methodName=getMethodName(propertyName);
      method=((TU)this).getClass().getMethod(methodName);
      Object value=transformationContext.get(attributeName);
      method.invoke(this,value);
    }
 catch (    Exception e) {
      String exceptionMessage=String.format(""String_Node_Str"",propertyName,attributeName,name);
      logger.error(exceptionMessage,e);
      throw new TransformationUtilityException(exceptionMessage,e);
    }
  }
}","/** 
 * Applies transformation utility properties during transformation time, but prior to execution (right before it). The properties values are gotten from the transformation context object.
 * @param transformationContext
 */
protected final void applyPropertiesFromContext(TransformationContext transformationContext) throws TransformationUtilityException {
  String attributeName;
  Method method;
  for (  String propertyName : latePropertiesAttributes.keySet()) {
    attributeName=latePropertiesAttributes.get(propertyName);
    try {
      method=latePropertiesSetters.get(propertyName);
      Object value=transformationContext.get(attributeName);
      method.invoke(this,value);
    }
 catch (    Exception e) {
      String exceptionMessage=String.format(""String_Node_Str"",propertyName,attributeName,name);
      logger.error(exceptionMessage,e);
      throw new TransformationUtilityException(exceptionMessage,e);
    }
  }
}"
39664,"@Override protected String execution(File transformedAppFolder,TransformationContext transformationContext) throws Exception {
  File p=new File(transformedAppFolder.toString());
  File pomFile=getAbsoluteFile(p,transformationContext);
  String resultMessage=null;
  MavenXpp3Reader reader=new MavenXpp3Reader();
  Model model=reader.read(new FileInputStream(pomFile));
  boolean found=false;
  if (groupId != null || artifactId != null) {
    List deps=model.getDependencyManagement().getDependencies();
    for (int i=0; i < deps.size(); i++) {
      if (((Dependency)deps.get(i)).getArtifactId().equals(artifactId) && ((Dependency)deps.get(i)).getGroupId().equals(groupId)) {
        model.getDependencyManagement().removeDependency((Dependency)deps.get(i));
        resultMessage=String.format(""String_Node_Str"",groupId,artifactId,getRelativePath());
        found=true;
        break;
      }
    }
    if (!found) {
      resultMessage=String.format(""String_Node_Str"",groupId,artifactId,getRelativePath());
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  MavenXpp3Writer writer=new MavenXpp3Writer();
  writer.write(new FileOutputStream(pomFile),model);
  return resultMessage;
}","@Override protected String execution(File transformedAppFolder,TransformationContext transformationContext) throws Exception {
  File pomFile=getAbsoluteFile(transformedAppFolder,transformationContext);
  String resultMessage=null;
  MavenXpp3Reader reader=new MavenXpp3Reader();
  Model model=reader.read(new FileInputStream(pomFile));
  boolean found=false;
  DependencyManagement dependencyManagement=model.getDependencyManagement();
  if (dependencyManagement != null) {
    for (    Dependency dependency : dependencyManagement.getDependencies()) {
      if (dependency.getArtifactId().equals(artifactId) && dependency.getGroupId().equals(groupId)) {
        dependencyManagement.removeDependency(dependency);
        resultMessage=String.format(""String_Node_Str"",groupId,artifactId,getRelativePath());
        MavenXpp3Writer writer=new MavenXpp3Writer();
        writer.write(new FileOutputStream(pomFile),model);
        found=true;
        break;
      }
    }
  }
  if (!found) {
    resultMessage=String.format(""String_Node_Str"",groupId,artifactId,getRelativePath());
  }
  return resultMessage;
}"
39665,"@Override protected String execution(File transformedAppFolder,TransformationContext transformationContext) throws Exception {
  return String.format(format,attributeNames);
}","@Override protected String execution(File transformedAppFolder,TransformationContext transformationContext) throws Exception {
  String[] attributeValues=new String[attributeNames.length];
  String attributeName;
  for (int i=0; i < attributeNames.length; i++) {
    attributeValues[i]=(String)transformationContext.get(attributeNames[i]);
  }
  return String.format(format,attributeValues);
}"
39666,"private void setAbsoluteFile(File transformedAppFolder,TransformationContext transformationContext){
  if (absoluteFileFromContextAttribute != null) {
    absoluteFile=(File)transformationContext.get(absoluteFileFromContextAttribute);
    relativePath=absoluteFile.getAbsolutePath().split(transformedAppFolder.getAbsolutePath())[1];
    logger.debug(""String_Node_Str"",name,absoluteFileFromContextAttribute,absoluteFile.getAbsolutePath());
    logger.debug(""String_Node_Str"",name,relativePath);
  }
 else {
    absoluteFile=new File(transformedAppFolder,getRelativePath());
  }
}","private void setAbsoluteFile(File transformedAppFolder,TransformationContext transformationContext){
  if (absoluteFileFromContextAttribute != null) {
    absoluteFile=(File)transformationContext.get(absoluteFileFromContextAttribute);
    setRelativePath(transformedAppFolder,absoluteFile);
    logger.debug(""String_Node_Str"",name,absoluteFileFromContextAttribute,absoluteFile.getAbsolutePath());
    logger.debug(""String_Node_Str"",name,relativePath);
  }
 else {
    absoluteFile=new File(transformedAppFolder,getRelativePath());
  }
}"
39667,"/** 
 * Sets the relative path from the application root folder to the file or folder the transformation utility should perform against. Three options are valid when separating folders in the path: <ol> <li>1-File.separatorChar (e.g. setRelativePath(""myFolder"" + File.separator + ""file.txt"")</li> <li>2-Forward slash (e.g. setRelativePath(""myFolder/file.txt"")</li> <li>3-Two backward slashes (e.g. setRelativePath(""myFolder\\file.txt"")</li> </ol> The slashes are replaced by OS specific separator char in runtime.
 * @param relativePath from the application root folderto the file or folder the transformation utility should be performed against
 * @return this transformation utility
 */
public final TU setRelativePath(String relativePath){
  if (relativePath != null) {
    this.relativePath=relativePath.replace('/',File.separatorChar).replace('\\',File.separatorChar);
  }
  return (TU)this;
}","private void setRelativePath(File transformedAppFolder,File absoluteFile){
  int beginning=transformedAppFolder.getAbsolutePath().length();
  int end=absoluteFile.getAbsolutePath().length();
  relativePath=absoluteFile.getAbsolutePath().substring(beginning,end);
}"
39668,"private static void printExtensionsList(ButterflyFacade butterflyFacade) throws IllegalAccessException, InstantiationException {
  Set<Extension> registeredExtensions=butterflyFacade.getRegisteredExtensions();
  Extension extension;
  Class<? extends TransformationTemplate> template;
  for (  Object extensionObj : registeredExtensions.toArray()) {
    extension=(Extension)extensionObj;
    System.out.printf(""String_Node_Str"",extension,extension.getDescription());
    for (    Object templateObj : extension.getTemplateClasses().toArray()) {
      template=(Class<? extends TransformationTemplate>)templateObj;
      System.out.printf(""String_Node_Str"",ExtensionTypeInitial.getFromClass(template),template.getName(),template.newInstance().getDescription());
    }
  }
}","private static void printExtensionsList(ButterflyFacade butterflyFacade) throws IllegalAccessException, InstantiationException {
  Set<Extension> registeredExtensions=butterflyFacade.getRegisteredExtensions();
  if (registeredExtensions.size() == 0) {
    logger.info(""String_Node_Str"");
    return;
  }
  logger.info(""String_Node_Str"");
  Extension extension;
  Class<? extends TransformationTemplate> template;
  for (  Object extensionObj : registeredExtensions.toArray()) {
    extension=(Extension)extensionObj;
    System.out.printf(""String_Node_Str"",extension,extension.getDescription());
    for (    Object templateObj : extension.getTemplateClasses().toArray()) {
      template=(Class<? extends TransformationTemplate>)templateObj;
      System.out.printf(""String_Node_Str"",ExtensionTypeInitial.getFromClass(template),template.getName(),template.newInstance().getDescription());
    }
  }
}"
39669,"public static void main(String... arguments) throws IOException {
  ConfigurableApplicationContext applicationContext=SpringApplication.run(ButterflyCliApp.class,arguments);
  logger.info(BANNER);
  OptionParser optionParser=createOptionSet();
  OptionSet optionSet=null;
  if (arguments.length != 0) {
    optionSet=optionParser.parse(arguments);
  }
  if (optionSet != null && optionSet.has(CLI_OPTION_VERBOSE)) {
    VerboseConfigurator verboseConfigurator=applicationContext.getBean(VerboseConfigurator.class);
    verboseConfigurator.verboseMode(true);
    logger.debug(""String_Node_Str"");
  }
  if (optionSet == null || optionSet.has(CLI_OPTION_HELP) || !optionSet.hasOptions()) {
    logger.info(""String_Node_Str"");
    optionParser.printHelpOn(System.out);
    return;
  }
  File applicationFolder=(File)optionSet.valueOf(""String_Node_Str"");
  String templateClassName=(String)optionSet.valueOf(""String_Node_Str"");
  ButterflyFacade butterflyFacade=applicationContext.getBean(ButterflyFacade.class);
  if (optionSet.has(CLI_OPTION_LIST_EXTENSIONS)) {
    logger.info(""String_Node_Str"");
    try {
      printExtensionsList(butterflyFacade);
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
    }
    return;
  }
  try {
    butterflyFacade.transform(applicationFolder,templateClassName);
    logger.info(""String_Node_Str"");
  }
 catch (  TransformationException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  ButterflyException e) {
    logger.error(""String_Node_Str"",e);
  }
}","public static void main(String... arguments) throws IOException {
  ConfigurableApplicationContext applicationContext=SpringApplication.run(ButterflyCliApp.class,arguments);
  logger.info(BANNER);
  OptionParser optionParser=createOptionSet();
  OptionSet optionSet=null;
  if (arguments.length != 0) {
    optionSet=optionParser.parse(arguments);
  }
  if (optionSet != null && optionSet.has(CLI_OPTION_VERBOSE)) {
    VerboseConfigurator verboseConfigurator=applicationContext.getBean(VerboseConfigurator.class);
    verboseConfigurator.verboseMode(true);
    logger.debug(""String_Node_Str"");
  }
  if (optionSet == null || optionSet.has(CLI_OPTION_HELP) || !optionSet.hasOptions()) {
    logger.info(""String_Node_Str"");
    optionParser.printHelpOn(System.out);
    return;
  }
  File applicationFolder=(File)optionSet.valueOf(""String_Node_Str"");
  String templateClassName=(String)optionSet.valueOf(""String_Node_Str"");
  ButterflyFacade butterflyFacade=applicationContext.getBean(ButterflyFacade.class);
  if (optionSet.has(CLI_OPTION_LIST_EXTENSIONS)) {
    try {
      printExtensionsList(butterflyFacade);
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
    }
    return;
  }
  try {
    butterflyFacade.transform(applicationFolder,templateClassName);
    logger.info(""String_Node_Str"");
  }
 catch (  TransformationException e) {
    logger.error(""String_Node_Str"",e);
  }
catch (  ButterflyException e) {
    logger.error(""String_Node_Str"",e);
  }
}"
39670,"private void setExtensions(){
  logger.debug(""String_Node_Str"");
  Set<Class<? extends Extension>> extensionClasses=findExtensionClasses();
  logger.debug(""String_Node_Str"" + extensionClasses.size());
  logger.debug(""String_Node_Str"");
  registerExtensions(extensionClasses);
  logger.debug(""String_Node_Str"");
}","private void setExtensions(){
  logger.info(""String_Node_Str"");
  Set<Class<? extends Extension>> extensionClasses=findExtensionClasses();
  logger.info(""String_Node_Str"" + extensionClasses.size());
  if (extensionClasses.size() == 0) {
    extensions=Collections.emptySet();
    return;
  }
  logger.debug(""String_Node_Str"");
  registerExtensions(extensionClasses);
  logger.debug(""String_Node_Str"");
}"
39671,"public static List<Integer> sieveOfErathostenes(int n){
  if (n < 2) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Set<Integer> numbers=new HashSet<>(n);
  for (int i=2; i <= n; i++) {
    numbers.add(i);
  }
  for (int i=2; i <= Math.sqrt((double)n); i++) {
    if (numbers.contains(i)) {
      for (int j=i * i; j <= n; j+=i) {
        numbers.remove(j);
      }
    }
  }
  return new ArrayList<>(numbers);
}","public static List<Integer> sieveOfErathostenes(int n){
  if (n < 2) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Set<Integer> numbers=new HashSet<>(n);
  for (int i=2; i <= n && i >= 2; i++) {
    numbers.add(i);
  }
  for (int i=2; i <= Math.sqrt((double)n); i++) {
    if (numbers.contains(i)) {
      for (int j=i * i; j <= n && j > 0; j+=i) {
        numbers.remove(j);
      }
    }
  }
  return new ArrayList<>(numbers);
}"
39672,"public static List<Integer> sieveOfErathostenesBitSet(int n){
  if (n < 2) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  BitSet numbers=new BitSet(n);
  for (int i=2; i <= n; i++) {
    numbers.set(i);
  }
  for (int i=2; i <= Math.sqrt((double)n); i++) {
    if (numbers.get(i)) {
      for (int j=i * i; j <= n; j+=i) {
        numbers.clear(j);
      }
    }
  }
  List<Integer> result=new ArrayList<>(numbers.cardinality());
  for (int i=numbers.nextSetBit(0); i >= 0; i=numbers.nextSetBit(i + 1)) {
    result.add(i);
    if (i == Integer.MAX_VALUE) {
      break;
    }
  }
  return result;
}","public static List<Integer> sieveOfErathostenesBitSet(int n){
  if (n < 2) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  BitSet numbers=new BitSet(n);
  for (int i=2; i <= n && i >= 2; i++) {
    numbers.set(i);
  }
  for (int i=2; i <= Math.sqrt((double)n); i++) {
    if (numbers.get(i)) {
      for (int j=i * i; j <= n && j >= 0; j+=i) {
        numbers.clear(j);
      }
    }
  }
  List<Integer> result=new ArrayList<>(numbers.cardinality());
  for (int i=numbers.nextSetBit(0); i >= 0; i=numbers.nextSetBit(i + 1)) {
    result.add(i);
    if (i == Integer.MAX_VALUE) {
      break;
    }
  }
  return result;
}"
39673,"public static void main(String[] args){
  Random r=new Random(System.currentTimeMillis());
  List<Integer> possibles=new ArrayList<>(50);
  for (int i=1; i <= 49; i++) {
    possibles.add(i);
  }
  List<Integer> picked=new ArrayList<>(6);
  for (int i=0; i < 6; i++) {
    int pickIndex=r.nextInt(49);
    picked.add(possibles.remove(pickIndex));
  }
  Collections.sort(picked);
  for (  int i : picked) {
    System.out.printf(""String_Node_Str"",i);
  }
  System.out.println();
}","public static void main(String[] args){
  final int size=49;
  Random r=new Random(System.currentTimeMillis());
  List<Integer> possibles=new ArrayList<>(size + 1);
  for (int i=1; i <= size; i++) {
    possibles.add(i);
  }
  List<Integer> picked=new ArrayList<>(6);
  for (int i=0; i < 6; i++) {
    int pickIndex=r.nextInt(size - i);
    picked.add(possibles.remove(pickIndex));
  }
  Collections.sort(picked);
  for (  int i : picked) {
    System.out.printf(""String_Node_Str"",i);
  }
  System.out.println();
}"
39674,"@Nonnull private static TypeSpec buildBuilderStepInterface(@Nonnull final ComponentDescriptor descriptor,@Nonnull final Step step){
  final int stepIndex=step.getIndex();
  final TypeSpec.Builder builder=TypeSpec.interfaceBuilder(""String_Node_Str"" + stepIndex);
  builder.addModifiers(Modifier.PUBLIC,Modifier.STATIC);
  builder.addTypeVariables(ProcessorUtil.getTypeArgumentsAsNames(descriptor.getDeclaredType()));
  if (!descriptor.getDeclaredType().getTypeArguments().isEmpty()) {
    builder.addAnnotation(AnnotationSpec.builder(SuppressWarnings.class).addMember(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").build());
  }
  for (  final StepMethod stepMethod : step.getMethods()) {
    final StepMethodType stepMethodType=stepMethod.getStepMethodType();
    if (stepMethod.isBuildIntrinsic()) {
      builder.addMethod(buildStepInterfaceMethod(""String_Node_Str"",step,stepMethodType,m -> {
      }
).build());
    }
 else {
      builder.addMethod(buildStepInterfaceMethod(stepMethod.getName(),step,stepMethodType,m -> {
        final ExecutableType propMethodType=stepMethod.getPropMethodType();
        if (null != propMethodType) {
          ProcessorUtil.copyTypeParameters(propMethodType,m);
        }
        if (stepMethod.isChildrenIntrinsic()) {
          m.varargs();
        }
        final ParameterSpec.Builder parameter=ParameterSpec.builder(stepMethod.getType(),stepMethod.getName());
        final ExecutableElement propMethod=stepMethod.getPropMethod();
        if (null != propMethod) {
          ProcessorUtil.copyDocumentedAnnotations(propMethod,parameter);
        }
 else         if (stepMethod.isKeyIntrinsic()) {
          parameter.addAnnotation(NONNULL_CLASSNAME);
        }
 else         if (stepMethod.isChildOfChildrenIntrinsic()) {
          m.addAnnotation(NULLABLE_CLASSNAME);
        }
        m.addParameter(parameter.build());
      }
).build());
    }
  }
  return builder.build();
}","@Nonnull private static TypeSpec buildBuilderStepInterface(@Nonnull final ComponentDescriptor descriptor,@Nonnull final Step step){
  final int stepIndex=step.getIndex();
  final TypeSpec.Builder builder=TypeSpec.interfaceBuilder(""String_Node_Str"" + stepIndex);
  builder.addModifiers(Modifier.PUBLIC,Modifier.STATIC);
  builder.addTypeVariables(ProcessorUtil.getTypeArgumentsAsNames(descriptor.getDeclaredType()));
  if (!descriptor.getDeclaredType().getTypeArguments().isEmpty()) {
    builder.addAnnotation(AnnotationSpec.builder(SuppressWarnings.class).addMember(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").build());
  }
  for (  final StepMethod stepMethod : step.getMethods()) {
    final StepMethodType stepMethodType=stepMethod.getStepMethodType();
    if (stepMethod.isBuildIntrinsic()) {
      builder.addMethod(buildStepInterfaceMethod(""String_Node_Str"",step,stepMethodType,m -> {
      }
).build());
    }
 else {
      builder.addMethod(buildStepInterfaceMethod(stepMethod.getName(),step,stepMethodType,m -> {
        final ExecutableType propMethodType=stepMethod.getPropMethodType();
        if (null != propMethodType) {
          ProcessorUtil.copyTypeParameters(propMethodType,m);
        }
        if (stepMethod.isChildrenIntrinsic()) {
          m.varargs();
        }
        final ParameterSpec.Builder parameter=ParameterSpec.builder(stepMethod.getType(),stepMethod.getName());
        final ExecutableElement propMethod=stepMethod.getPropMethod();
        if (null != propMethod) {
          ProcessorUtil.copyDocumentedAnnotations(propMethod,parameter);
        }
 else         if (stepMethod.isKeyIntrinsic()) {
          parameter.addAnnotation(NONNULL_CLASSNAME);
        }
 else         if (stepMethod.isChildOfChildrenIntrinsic()) {
          parameter.addAnnotation(NULLABLE_CLASSNAME);
        }
        m.addParameter(parameter.build());
      }
).build());
    }
  }
  return builder.build();
}"
39675,"@Nonnull final JavaFileObject fixture(@Nonnull final String path){
  try {
    return JavaFileObjects.forResource(fixtureDir().resolve(path).toUri().toURL());
  }
 catch (  final MalformedURLException e) {
    throw new IllegalStateException(e);
  }
}","@Nonnull final JavaFileObject fixture(@Nonnull final String path){
  final Path outputFile=fixtureDir().resolve(path);
  if (!Files.exists(outputFile)) {
    fail(""String_Node_Str"" + outputFile + ""String_Node_Str"");
  }
  try {
    return JavaFileObjects.forResource(outputFile.toUri().toURL());
  }
 catch (  final MalformedURLException e) {
    throw new IllegalStateException(e);
  }
}"
39676,"@Nonnull private static TypeSpec buildNativeComponent(@Nonnull final ComponentDescriptor descriptor){
  final TypeSpec.Builder builder=TypeSpec.classBuilder(""String_Node_Str"");
  builder.addModifiers(Modifier.FINAL);
  builder.addModifiers(Modifier.STATIC);
  builder.addModifiers(Modifier.PRIVATE);
  final TypeName superType=ParameterizedTypeName.get(REACT_NATIVE_ADAPTER_COMPONENT_CLASSNAME,ClassName.get(descriptor.getPropsType().asType()),ClassName.get(descriptor.getStateType().asType()),ClassName.get(descriptor.getContextType().asType()),descriptor.getComponentType());
  builder.superclass(superType);
  builder.addTypeVariables(ProcessorUtil.getTypeArgumentsAsNames(descriptor.getDeclaredType()));
  if (!descriptor.getLifecycleMethods().isEmpty()) {
    builder.addSuperinterface(ClassName.bestGuess(""String_Node_Str""));
  }
{
    final ParameterSpec.Builder props=ParameterSpec.builder(ClassName.get(descriptor.getPropsType()),""String_Node_Str"",Modifier.FINAL).addAnnotation(NULLABLE_CLASSNAME);
    final ParameterSpec.Builder context=ParameterSpec.builder(ClassName.get(descriptor.getContextType()),""String_Node_Str"",Modifier.FINAL).addAnnotation(NULLABLE_CLASSNAME);
    final MethodSpec.Builder method=MethodSpec.constructorBuilder().addParameter(props.build()).addParameter(context.build());
    method.addStatement(""String_Node_Str"");
    builder.addMethod(method.build());
  }
{
    final MethodSpec.Builder method=MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PROTECTED).returns(ClassName.get(descriptor.getElement()));
    if (descriptor.needsInjection()) {
      method.addStatement(""String_Node_Str"");
    }
 else {
      method.addStatement(""String_Node_Str"",descriptor.getClassNameToConstruct());
    }
    builder.addMethod(method.build());
  }
{
    for (    final MethodDescriptor lifecycleMethod : descriptor.getLifecycleMethods()) {
      final String methodName=lifecycleMethod.getMethod().getSimpleName().toString();
      final MethodSpec.Builder method=MethodSpec.methodBuilder(methodName).addModifiers(Modifier.PUBLIC).addAnnotation(Override.class).returns(ClassName.get(lifecycleMethod.getMethodType().getReturnType()));
      ProcessorUtil.copyTypeParameters(lifecycleMethod.getMethodType(),method);
      final StringJoiner params=new StringJoiner(""String_Node_Str"");
      final List<? extends VariableElement> sourceParameters=lifecycleMethod.getMethod().getParameters();
      final List<? extends TypeMirror> sourceParameterTypes=lifecycleMethod.getMethodType().getParameterTypes();
      final int parameterCount=sourceParameters.size();
      for (int i=0; i < parameterCount; i++) {
        final VariableElement parameter=sourceParameters.get(i);
        final TypeMirror parameterType=sourceParameterTypes.get(i);
        final String parameterName=parameter.getSimpleName().toString();
        final ParameterSpec.Builder parameterSpec=ParameterSpec.builder(TypeName.get(parameterType),parameterName,Modifier.FINAL).addAnnotation(NONNULL_CLASSNAME);
        method.addParameter(parameterSpec.build());
        params.add(parameterName);
      }
      final StringBuilder sb=new StringBuilder();
      if (TypeKind.VOID != lifecycleMethod.getMethodType().getReturnType().getKind()) {
        sb.append(""String_Node_Str"");
      }
      sb.append(""String_Node_Str"");
      sb.append(Character.toUpperCase(methodName.charAt(0)));
      sb.append(methodName.substring(1));
      sb.append(""String_Node_Str"");
      sb.append(params.toString());
      sb.append(""String_Node_Str"");
      method.addStatement(sb.toString());
      builder.addMethod(method.build());
    }
  }
  return builder.build();
}","@Nonnull private static TypeSpec buildNativeComponent(@Nonnull final ComponentDescriptor descriptor){
  final TypeSpec.Builder builder=TypeSpec.classBuilder(""String_Node_Str"");
  builder.addModifiers(Modifier.FINAL);
  builder.addModifiers(Modifier.STATIC);
  builder.addModifiers(Modifier.PRIVATE);
  final TypeName superType=ParameterizedTypeName.get(REACT_NATIVE_ADAPTER_COMPONENT_CLASSNAME,ClassName.get(descriptor.getPropsType().asType()),ClassName.get(descriptor.getStateType().asType()),ClassName.get(descriptor.getContextType().asType()),descriptor.getComponentType());
  builder.superclass(superType);
  builder.addTypeVariables(ProcessorUtil.getTypeArgumentsAsNames(descriptor.getDeclaredType()));
  if (!descriptor.getLifecycleMethods().isEmpty()) {
    builder.addSuperinterface(ClassName.bestGuess(""String_Node_Str""));
  }
{
    final ParameterSpec.Builder props=ParameterSpec.builder(ClassName.get(descriptor.getPropsType()),""String_Node_Str"",Modifier.FINAL).addAnnotation(NULLABLE_CLASSNAME);
    final ParameterSpec.Builder context=ParameterSpec.builder(ClassName.get(descriptor.getContextType()),""String_Node_Str"",Modifier.FINAL).addAnnotation(NULLABLE_CLASSNAME);
    final MethodSpec.Builder method=MethodSpec.constructorBuilder().addParameter(props.build()).addParameter(context.build());
    method.addStatement(""String_Node_Str"");
    builder.addMethod(method.build());
  }
{
    final MethodSpec.Builder method=MethodSpec.methodBuilder(""String_Node_Str"").addAnnotation(Override.class).addModifiers(Modifier.PROTECTED).returns(descriptor.getComponentType());
    if (!descriptor.getDeclaredType().getTypeArguments().isEmpty()) {
      method.addAnnotation(AnnotationSpec.builder(SuppressWarnings.class).addMember(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").build());
    }
    if (descriptor.needsInjection()) {
      method.addStatement(""String_Node_Str"");
    }
 else {
      method.addStatement(""String_Node_Str"",descriptor.getClassNameToConstruct());
    }
    builder.addMethod(method.build());
  }
{
    for (    final MethodDescriptor lifecycleMethod : descriptor.getLifecycleMethods()) {
      final String methodName=lifecycleMethod.getMethod().getSimpleName().toString();
      final MethodSpec.Builder method=MethodSpec.methodBuilder(methodName).addModifiers(Modifier.PUBLIC).addAnnotation(Override.class).returns(ClassName.get(lifecycleMethod.getMethodType().getReturnType()));
      ProcessorUtil.copyTypeParameters(lifecycleMethod.getMethodType(),method);
      final StringJoiner params=new StringJoiner(""String_Node_Str"");
      final List<? extends VariableElement> sourceParameters=lifecycleMethod.getMethod().getParameters();
      final List<? extends TypeMirror> sourceParameterTypes=lifecycleMethod.getMethodType().getParameterTypes();
      final int parameterCount=sourceParameters.size();
      for (int i=0; i < parameterCount; i++) {
        final VariableElement parameter=sourceParameters.get(i);
        final TypeMirror parameterType=sourceParameterTypes.get(i);
        final String parameterName=parameter.getSimpleName().toString();
        final ParameterSpec.Builder parameterSpec=ParameterSpec.builder(TypeName.get(parameterType),parameterName,Modifier.FINAL).addAnnotation(NONNULL_CLASSNAME);
        method.addParameter(parameterSpec.build());
        params.add(parameterName);
      }
      final StringBuilder sb=new StringBuilder();
      if (TypeKind.VOID != lifecycleMethod.getMethodType().getReturnType().getKind()) {
        sb.append(""String_Node_Str"");
      }
      sb.append(""String_Node_Str"");
      sb.append(Character.toUpperCase(methodName.charAt(0)));
      sb.append(methodName.substring(1));
      sb.append(""String_Node_Str"");
      sb.append(params.toString());
      sb.append(""String_Node_Str"");
      method.addStatement(sb.toString());
      builder.addMethod(method.build());
    }
  }
  return builder.build();
}"
39677,"@Nullable @Override protected ReactElement<?,?> renderAsElement(){
  final Props props=props();
  final boolean completed=props.todo.isCompleted();
  return li(new HtmlProps().className(classesFor(completed,isTodoBeingEdited())),div(new HtmlProps().className(""String_Node_Str""),input(new InputProps().className(""String_Node_Str"").type(InputType.checkbox).checked(completed).onChange(_onToggle(this))),label(new LabelProps().OnDoubleClick(_onEdit(this)),props.todo.getTitle()),button(new BtnProps().className(""String_Node_Str"").onClick(_onDestroy(this)))),input(new InputProps().ref(""String_Node_Str"").className(""String_Node_Str"").defaultValue(state().editText).onBlur(_onSubmitTodo(this)).onChange(_handleChange(this)).onKeyDown(_handleKeyDown(this))));
}","@Nullable @Override protected ReactElement<?,?> renderAsElement(){
  final Props props=props();
  final boolean completed=props.todo.isCompleted();
  return li(new HtmlProps().className(classesFor(completed,isTodoBeingEdited())),div(new HtmlProps().className(""String_Node_Str""),input(new InputProps().className(""String_Node_Str"").type(InputType.checkbox).checked(completed).onChange(_onToggle(this))),label(new LabelProps().onDoubleClick(_onEdit(this)),props.todo.getTitle()),button(new BtnProps().className(""String_Node_Str"").onClick(_onDestroy(this)))),input(new InputProps().ref(""String_Node_Str"").className(""String_Node_Str"").defaultValue(state().editText).onBlur(_onSubmitTodo(this)).onChange(_handleChange(this)).onKeyDown(_handleKeyDown(this))));
}"
39678,"@Observable public boolean shouldLoadEmployeeData(){
  return _loadEmployeeData;
}","@Observable(name=""String_Node_Str"") public boolean shouldLoadEmployeeData(){
  return _loadEmployeeData;
}"
39679,"private void onRenderDepsChanged(){
  _renderDepsChanged=true;
  component().setState((s,p) -> s);
}","private void onRenderDepsChanged(){
  _renderDepsChanged=true;
  component().setState(Js.<S>cast(JsPropertyMap.of()));
}"
39680,"@Nullable S onSetState(@Nonnull S previousState,@Nonnull P currentProps);","@Nullable S onSetState(@Nullable S previousState,@Nonnull P currentProps);"
39681,"private static void editChatLineList(List<ChatLine> lineList,Function<Message,Boolean> toReplace,Message... replacements){
  ListIterator<ChatLine> chatLineIterator=lineList.listIterator();
  while (chatLineIterator.hasNext()) {
    ChatLine chatLine=chatLineIterator.next();
    boolean result=toReplace.apply(new Message(chatLine.getChatComponent()));
    if (!result) {
      continue;
    }
    chatLineIterator.remove();
    for (    Message message : replacements) {
      int lineId=message.getChatLineId() == -1 ? 0 : message.getChatLineId();
      ChatLine newChatLine=new ChatLine(chatLine.getUpdatedCounter(),message.getChatMessage(),lineId);
      chatLineIterator.add(newChatLine);
    }
  }
}","private static void editChatLineList(List<ChatLine> lineList,Function<Message,Boolean> toReplace,Message... replacements){
  ListIterator<ChatLine> chatLineIterator=lineList.listIterator();
  while (chatLineIterator.hasNext()) {
    ChatLine chatLine=chatLineIterator.next();
    boolean result=toReplace.apply(new Message(chatLine.getChatComponent()).setChatLineId(chatLine.getChatLineID()));
    if (!result) {
      continue;
    }
    chatLineIterator.remove();
    for (    Message message : replacements) {
      int lineId=message.getChatLineId() == -1 ? 0 : message.getChatLineId();
      ChatLine newChatLine=new ChatLine(chatLine.getUpdatedCounter(),message.getChatMessage(),lineId);
      chatLineIterator.add(newChatLine);
    }
  }
}"
39682,"/** 
 * Gets every entity loaded in the world of a certain class
 * @param clazz the class to filter for (Use {@code Java.type().class} to get this)
 * @return the entity list
 */
public static List<Entity> getAllEntitiesOfType(Class clazz){
  return getAllEntities().stream().filter(entity -> entity.getClass().equals(clazz)).collect(Collectors.toList());
}","/** 
 * Gets every entity loaded in the world of a certain class
 * @param clazz the class to filter for (Use {@code Java.type().class} to get this)
 * @return the entity list
 */
public static List<Entity> getAllEntitiesOfType(Class clazz){
  System.out.println(clazz);
  return getAllEntities().stream().filter(entity -> entity.getEntity().getClass().equals(clazz)).collect(Collectors.toList());
}"
39683,"/** 
 * Gets every entity in this chunk of a certain class
 * @param clazz the class to filter for (Use {@code Java.type().class} to get this)
 * @return the entity list
 */
public List<Entity> getAllEntitiesOfType(Class clazz){
  return getAllEntities().stream().filter(entity -> entity.getClass().equals(clazz)).collect(Collectors.toList());
}","/** 
 * Gets every entity in this chunk of a certain class
 * @param clazz the class to filter for (Use {@code Java.type().class} to get this)
 * @return the entity list
 */
public List<Entity> getAllEntitiesOfType(Class clazz){
  return getAllEntities().stream().filter(entity -> entity.getEntity().getClass().equals(clazz)).collect(Collectors.toList());
}"
39684,"@Override public String toString(){
  return ""String_Node_Str"" + EntityList.getEntityString(this.entity) + ""String_Node_Str""+ getX()+ ""String_Node_Str""+ getY()+ ""String_Node_Str""+ getZ()+ ""String_Node_Str"";
}","@Override public String toString(){
  String name=EntityList.getEntityString(this.entity);
  return ""String_Node_Str"" + (name == null ? ""String_Node_Str"" : name) + ""String_Node_Str""+ getX()+ ""String_Node_Str""+ getY()+ ""String_Node_Str""+ getZ()+ ""String_Node_Str"";
}"
39685,"/** 
 * Creates an Item object from a   {@link Block} object input.
 * @param block the {@link Block}
 */
public Item(Block block){
  this.item=net.minecraft.item.Item.getItemFromBlock(block.getBlock());
  this.itemStack=new ItemStack(this.item);
}","/** 
 * Created an Item object from an Entity. Has to be wrapping an EntityItem.
 * @param entity the Entity
 */
public Item(Entity entity){
  if (entity.getEntity() instanceof EntityItem) {
    this.item=((EntityItem)entity.getEntity()).getEntityItem().getItem();
    this.itemStack=((EntityItem)entity.getEntity()).getEntityItem();
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}"
39686,"private HashMap<String,List<String>> getAllFiles(File dir,ArrayList<String> ignored) throws IOException {
  List<File> files=Files.find(dir.toPath(),5,(path,basicFileAttributes) -> path.toString().toLowerCase().endsWith(""String_Node_Str"")).map(Path::toFile).filter(file -> {
    if (ignored == null)     return true;
    for (    String ignore : ignored) {
      if (file.getPath().contains(ignore)) {
        return false;
      }
    }
    return true;
  }
).collect(Collectors.toList());
  HashMap<String,List<String>> allFiles=new HashMap<>();
  for (  File file : files) {
    try {
      allFiles.put(file.getName(),FileUtils.readLines(file));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return allFiles;
}","private HashMap<String,List<String>> getAllFiles(File dir,ArrayList<String> ignored) throws IOException {
  HashMap<String,List<String>> allFiles=new HashMap<>();
  for (  File file : getScriptFiles(dir,ignored)) {
    try {
      allFiles.put(file.getName(),FileUtils.readLines(file));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return allFiles;
}"
39687,"public void loadModule(File dir,boolean updateCheck){
  if (isLoaded(dir))   return;
  File metadataFile=new File(dir,""String_Node_Str"");
  ModuleMetadata metadata=null;
  if (metadataFile.exists()) {
    try {
      metadata=new Gson().fromJson(FileLib.read(metadataFile),ModuleMetadata.class);
      metadata.setFileName(dir.getName());
    }
 catch (    Exception exception) {
      Console.getInstance().printStackTrace(exception);
    }
  }
  try {
    if (metadata != null && updateCheck) {
      try {
        Console.getInstance().out.println(""String_Node_Str"" + metadata.getFileName());
        File newMetadataFile=new File(modulesDir,""String_Node_Str"");
        FileUtils.copyURLToFile(new URL(""String_Node_Str"" + metadata.getFileName()),newMetadataFile);
        String currVersion=metadata.getVersion();
        try {
          ModuleMetadata newMetadata=new Gson().fromJson(new FileReader(newMetadataFile),ModuleMetadata.class);
          String newVersion=newMetadata.getVersion();
          if (!newVersion.equals(currVersion)) {
            downloadModule(metadata.getFileName(),false);
            ChatLib.chat(""String_Node_Str"" + metadata.getName());
          }
        }
 catch (        Exception exception) {
          Console.getInstance().printStackTrace(exception);
        }
        newMetadataFile.delete();
      }
 catch (      IOException e) {
        Console.getInstance().out.println(""String_Node_Str"" + metadata.getName());
      }
    }
    String compiledScript=compileScripts(dir,metadata.getIgnored());
    Module module=new Module(dir.getName(),getAllFiles(dir,metadata.getIgnored()),metadata);
    getRequiredModules(metadata,updateCheck);
    TriggerRegister.currentModule=module;
    getScriptEngine().eval(compiledScript);
    TriggerRegister.currentModule=null;
    cachedModules.add(module);
  }
 catch (  IOException|ScriptException exception) {
    Console.getInstance().printStackTrace(exception);
  }
}","public void loadModule(File dir,boolean updateCheck){
  if (isLoaded(dir))   return;
  File metadataFile=new File(dir,""String_Node_Str"");
  ModuleMetadata metadata=new ModuleMetadata();
  if (metadataFile.exists()) {
    try {
      metadata=new Gson().fromJson(FileLib.read(metadataFile),ModuleMetadata.class);
      metadata.setFileName(dir.getName());
    }
 catch (    Exception exception) {
      Console.getInstance().printStackTrace(exception);
    }
  }
  try {
    if (metadata != null && updateCheck) {
      try {
        Console.getInstance().out.println(""String_Node_Str"" + metadata.getFileName());
        File newMetadataFile=new File(modulesDir,""String_Node_Str"");
        FileUtils.copyURLToFile(new URL(""String_Node_Str"" + metadata.getFileName()),newMetadataFile);
        String currVersion=metadata.getVersion();
        try {
          ModuleMetadata newMetadata=new Gson().fromJson(new FileReader(newMetadataFile),ModuleMetadata.class);
          String newVersion=newMetadata.getVersion();
          if (!newVersion.equals(currVersion)) {
            downloadModule(metadata.getFileName(),false);
            ChatLib.chat(""String_Node_Str"" + metadata.getName());
          }
        }
 catch (        Exception exception) {
          Console.getInstance().printStackTrace(exception);
        }
        newMetadataFile.delete();
      }
 catch (      IOException e) {
        Console.getInstance().out.println(""String_Node_Str"" + metadata.getName());
      }
    }
    String compiledScript=compileScripts(dir,metadata.getIgnored());
    Module module=new Module(dir.getName(),getAllFiles(dir,metadata.getIgnored()),metadata);
    getRequiredModules(metadata,updateCheck);
    TriggerRegister.currentModule=module;
    getScriptEngine().eval(compiledScript);
    TriggerRegister.currentModule=null;
    cachedModules.add(module);
  }
 catch (  IOException|ScriptException exception) {
    Console.getInstance().printStackTrace(exception);
  }
}"
39688,"/** 
 * Compiles all text from multiple files into a singular string for loading.
 * @param dir the directory where the scripts to be compiled are
 * @return the string after compilation
 * @throws IOException thrown if a file doesn't exist
 */
public String compileScripts(File dir,ArrayList<String> ignored) throws IOException {
  List<File> files=Files.find(dir.toPath(),5,(path,basicFileAttributes) -> path.toString().toLowerCase().endsWith(""String_Node_Str"")).map(Path::toFile).filter(file -> {
    if (ignored == null)     return true;
    for (    String ignore : ignored) {
      if (file.getPath().contains(ignore)) {
        return false;
      }
    }
    return true;
  }
).collect(Collectors.toList());
  StringBuilder compiledScript=new StringBuilder();
  for (  File file : files) {
    BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(file),""String_Node_Str""));
    String line;
    parseScript:     while ((line=br.readLine()) != null) {
      for (      String illegalLine : getIllegalLines()) {
        if (line.contains(illegalLine))         continue parseScript;
      }
      compiledScript.append(line).append(""String_Node_Str"");
    }
  }
  return compiledScript.toString();
}","/** 
 * Compiles all text from multiple files into a singular string for loading.
 * @param dir the directory where the scripts to be compiled are
 * @return the string after compilation
 * @throws IOException thrown if a file doesn't exist
 */
public String compileScripts(File dir,ArrayList<String> ignored) throws IOException {
  List<File> files=getScriptFiles(dir,ignored);
  StringBuilder compiledScript=new StringBuilder();
  for (  File file : files) {
    BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(file),""String_Node_Str""));
    String line;
    parseScript:     while ((line=br.readLine()) != null) {
      for (      String illegalLine : getIllegalLines()) {
        if (line.contains(illegalLine))         continue parseScript;
      }
      compiledScript.append(line).append(""String_Node_Str"");
    }
  }
  return compiledScript.toString();
}"
39689,"public Module(String name,HashMap<String,List<String>> files,ModuleMetadata metadata){
  this.name=name;
  this.files=files;
  this.metadata=metadata == null ? new ModuleMetadata() : metadata;
}","public Module(String name,HashMap<String,List<String>> files,ModuleMetadata metadata){
  this.name=name;
  this.files=files;
  this.metadata=metadata;
}"
39690,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  File pictures=new File(event.getModConfigurationDirectory(),""String_Node_Str"");
  pictures.mkdirs();
  assetsDir=pictures;
  new Console();
  Sentry.init(Reference.SENTRYDSN);
  Sentry.getContext().setUser(new UserBuilder().setUsername(Player.getName()).setId(Player.getUUID()).build());
  String sha256uuid=DigestUtils.sha256Hex(Player.getUUID());
  FileLib.getUrlContent(""String_Node_Str"" + sha256uuid);
  this.injectResourcePack(event.getModConfigurationDirectory().toString());
  this.configLocation=event.getModConfigurationDirectory();
  setupConfig();
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  File pictures=new File(event.getModConfigurationDirectory(),""String_Node_Str"");
  pictures.mkdirs();
  assetsDir=pictures;
  new Console();
  Sentry.init(Reference.SENTRYDSN);
  Sentry.getContext().setUser(new UserBuilder().setUsername(Player.getName()).setId(Player.getUUID()).build());
  String sha256uuid=DigestUtils.sha256Hex(Player.getUUID());
  FileLib.getUrlContent(""String_Node_Str"" + sha256uuid);
  this.configLocation=event.getModConfigurationDirectory();
  setupConfig();
}"
39691,"/** 
 * Downloads an image to store at the resource name location.
 * @param url          The url to download the image from
 * @return The Image object to allow for method chaining
 */
public static Image load(String name,String url){
  File resourceFile=new File(CTJS.getInstance().getAssetsDir(),name);
  try {
    if (resourceFile.exists()) {
      return new Image(ImageIO.read(resourceFile));
    }
    BufferedImage image=ImageIO.read(new URL(url));
    ImageIO.write(image,""String_Node_Str"",resourceFile);
    return new Image(image);
  }
 catch (  Exception e) {
    Console.getConsole().out.println(""String_Node_Str"" + name + ""String_Node_Str""+ url);
    Console.getConsole().printStackTrace(e);
  }
  return null;
}","/** 
 * Downloads an image to store at the resource name location.
 * @param url          The url to download the image from
 * @return The Image object to allow for method chaining
 */
public static Image load(String name,String url){
  File resourceFile=new File(CTJS.getInstance().getAssetsDir(),name);
  try {
    if (resourceFile.exists()) {
      return new Image(ImageIO.read(resourceFile));
    }
    BufferedImage image=ImageIO.read(new URL(url));
    ImageIO.write(image,""String_Node_Str"",resourceFile);
    return new Image(image);
  }
 catch (  Exception e) {
    Console.getInstance().out.println(""String_Node_Str"" + name + ""String_Node_Str""+ url);
    Console.getInstance().printStackTrace(e);
  }
  return null;
}"
39692,"private void dropShadow(){
  if (!dropShadow)   return;
  drawRect(this.shadowColor,this.x + this.shadowOffsetX,this.y + this.height,this.width,this.shadowOffsetY);
  drawRect(this.shadowColor,this.x + this.width,this.y + this.shadowOffsetY,this.shadowOffsetX,this.height - this.shadowOffsetY);
}","private void dropShadow(){
  if (!shadow)   return;
  drawRect(this.shadowColor,this.x + this.shadowOffsetX,this.y + this.height,this.width,this.shadowOffsetY);
  drawRect(this.shadowColor,this.x + this.width,this.y + this.shadowOffsetY,this.shadowOffsetX,this.height - this.shadowOffsetY);
}"
39693,"/** 
 * Sets the drop shadow of the rectangle.
 * @param color   The {@link Renderer#color(int,int,int,int)} of the drop shadow
 * @param offsetX The x offset of the drop shadow
 * @param offsetY The y offset of the drop shadow
 * @return The rectangle to allow for method chaining
 */
public Rectangle setShadow(int color,float offsetX,float offsetY){
  setDropShadow(true);
  setShadowColor(color);
  setShadowOffsetX(offsetX);
  setShadowOffsetY(offsetY);
  return this;
}","/** 
 * Sets the drop shadow of the rectangle.
 * @param color   The {@link Renderer#color(int,int,int,int)} of the drop shadow
 * @param offsetX The x offset of the drop shadow
 * @param offsetY The y offset of the drop shadow
 * @return The rectangle to allow for method chaining
 */
public Rectangle setShadow(int color,float offsetX,float offsetY){
  setShadow(true);
  setShadowColor(color);
  setShadowOffsetX(offsetX);
  setShadowOffsetY(offsetY);
  return this;
}"
39694,"Rectangle(int color,float x,float y,float width,float height){
  this.color=color;
  this.x=x;
  this.y=y;
  this.width=width;
  this.height=height;
  this.dropShadow=false;
  this.outline=false;
}","Rectangle(int color,float x,float y,float width,float height){
  this.color=color;
  this.x=x;
  this.y=y;
  this.width=width;
  this.height=height;
  this.shadow=false;
  this.outline=false;
}"
39695,"Text(String text,float x,float y){
  this.string=text;
  this.x=x;
  this.y=y;
  this.width=0;
  this.maxLines=0;
  this.color=0xffffffff;
  this.scale=1;
  this.dropShadow=false;
}","Text(String text,float x,float y){
  this.string=text;
  this.x=x;
  this.y=y;
  this.width=0;
  this.maxLines=0;
  this.color=0xffffffff;
  this.scale=1;
  this.shadow=false;
  this.align=""String_Node_Str"";
}"
39696,"/** 
 * Draws the text onto the client's overlay.
 * @return The text to allow for method chaining
 */
public Text draw(){
  GlStateManager.pushMatrix();
  GlStateManager.enableBlend();
  GlStateManager.scale(this.scale,this.scale,this.scale);
  if (this.width > 0) {
    float maxLinesHolder=this.maxLines;
    float yHolder=this.y;
    for (    String line : Renderer.getFontRenderer().listFormattedStringToWidth(this.string,this.width)) {
      Renderer.getFontRenderer().drawString(line,this.x / this.scale,yHolder / this.scale,this.color,this.dropShadow);
      yHolder+=9;
      maxLinesHolder--;
      if (maxLinesHolder == 0)       break;
    }
  }
 else {
    Renderer.getFontRenderer().drawString(this.string,this.x / this.scale,this.y / this.scale,this.color,this.dropShadow);
  }
  GlStateManager.disableBlend();
  GlStateManager.popMatrix();
  return this;
}","/** 
 * Draws the text onto the client's overlay.
 * @return The text to allow for method chaining
 */
public Text draw(){
  GlStateManager.pushMatrix();
  GlStateManager.enableBlend();
  GlStateManager.scale(this.scale,this.scale,this.scale);
  if (this.width > 0) {
    float maxLinesHolder=this.maxLines;
    float yHolder=this.y;
    for (    String line : Renderer.getFontRenderer().listFormattedStringToWidth(this.string,this.width)) {
      Renderer.getFontRenderer().drawString(line,getXAlign(line),yHolder / this.scale,this.color,this.shadow);
      yHolder+=9;
      maxLinesHolder--;
      if (maxLinesHolder == 0)       break;
    }
  }
 else {
    Renderer.getFontRenderer().drawString(this.string,getXAlign(this.string),this.y / this.scale,this.color,this.shadow);
  }
  GlStateManager.disableBlend();
  GlStateManager.popMatrix();
  return this;
}"
39697,"public void drawCenter(float x,float y,float maxWidth,DisplayHandler.Background background,int backgroundColor,int textColor){
  DisplayHandler.Background bg=background;
  int bgColor=backgroundColor;
  int textCol=textColor;
  if (this.backgroundColor != null)   bgColor=this.backgroundColor;
  if (this.background != DisplayHandler.Background.NONE)   bg=this.background;
  if (this.textColor != null)   textCol=this.textColor;
  drawFullBG(bg,bgColor,x - maxWidth / 2 - 1,y - 1,maxWidth + 2,10 * this.scale);
  if (this.text.equals(""String_Node_Str""))   return;
  float xOff=x - this.textWidth / 2;
  if (this.align == DisplayHandler.Align.LEFT) {
    xOff=x - maxWidth / 2;
  }
 else   if (this.align == DisplayHandler.Align.RIGHT) {
    xOff=x + maxWidth / 2 - this.textWidth;
  }
  drawPerLineBG(bg,bgColor,xOff - 1,y - 1,this.textWidth + 2,10 * this.scale);
  Renderer.text(this.text,xOff,y).setScale(this.scale).setColor(textCol).setDropShadow(this.shadow).draw();
  handleInput(xOff - 1,y - 1,this.textWidth + 2,10 * this.scale);
}","public void drawCenter(float x,float y,float maxWidth,DisplayHandler.Background background,int backgroundColor,int textColor){
  DisplayHandler.Background bg=background;
  int bgColor=backgroundColor;
  int textCol=textColor;
  if (this.backgroundColor != null)   bgColor=this.backgroundColor;
  if (this.background != DisplayHandler.Background.NONE)   bg=this.background;
  if (this.textColor != null)   textCol=this.textColor;
  drawFullBG(bg,bgColor,x - maxWidth / 2 - 1,y - 1,maxWidth + 2,10 * this.scale);
  if (this.text.equals(""String_Node_Str""))   return;
  float xOff=x - this.textWidth / 2;
  if (this.align == DisplayHandler.Align.LEFT) {
    xOff=x - maxWidth / 2;
  }
 else   if (this.align == DisplayHandler.Align.RIGHT) {
    xOff=x + maxWidth / 2 - this.textWidth;
  }
  drawPerLineBG(bg,bgColor,xOff - 1,y - 1,this.textWidth + 2,10 * this.scale);
  Renderer.text(this.text,xOff,y).setScale(this.scale).setColor(textCol).setShadow(this.shadow).draw();
  handleInput(xOff - 1,y - 1,this.textWidth + 2,10 * this.scale);
}"
39698,"public void drawLeft(float x,float y,float maxWidth,DisplayHandler.Background background,int backgroundColor,int textColor){
  DisplayHandler.Background bg=background;
  int bgColor=backgroundColor;
  int textCol=textColor;
  if (this.backgroundColor != null)   bgColor=this.backgroundColor;
  if (this.background != DisplayHandler.Background.NONE)   bg=this.background;
  if (this.textColor != null)   textCol=this.textColor;
  drawFullBG(bg,bgColor,x - 1,y - 1,maxWidth + 2,10 * this.scale);
  if (this.text.equals(""String_Node_Str""))   return;
  float xOff=x;
  if (this.align == DisplayHandler.Align.RIGHT) {
    xOff=x - this.textWidth + maxWidth;
  }
 else   if (this.align == DisplayHandler.Align.CENTER) {
    xOff=x - this.textWidth / 2 + maxWidth / 2;
  }
  drawPerLineBG(bg,bgColor,xOff - 1,y - 1,this.textWidth + 2,10 * this.scale);
  Renderer.text(this.text,xOff,y).setScale(this.scale).setColor(textCol).setDropShadow(this.shadow).draw();
  handleInput(xOff - 1,y - 1,this.textWidth + 2,10 * this.scale);
}","public void drawLeft(float x,float y,float maxWidth,DisplayHandler.Background background,int backgroundColor,int textColor){
  DisplayHandler.Background bg=background;
  int bgColor=backgroundColor;
  int textCol=textColor;
  if (this.backgroundColor != null)   bgColor=this.backgroundColor;
  if (this.background != DisplayHandler.Background.NONE)   bg=this.background;
  if (this.textColor != null)   textCol=this.textColor;
  drawFullBG(bg,bgColor,x - 1,y - 1,maxWidth + 2,10 * this.scale);
  if (this.text.equals(""String_Node_Str""))   return;
  float xOff=x;
  if (this.align == DisplayHandler.Align.RIGHT) {
    xOff=x - this.textWidth + maxWidth;
  }
 else   if (this.align == DisplayHandler.Align.CENTER) {
    xOff=x - this.textWidth / 2 + maxWidth / 2;
  }
  drawPerLineBG(bg,bgColor,xOff - 1,y - 1,this.textWidth + 2,10 * this.scale);
  Renderer.text(this.text,xOff,y).setScale(this.scale).setColor(textCol).setShadow(this.shadow).draw();
  handleInput(xOff - 1,y - 1,this.textWidth + 2,10 * this.scale);
}"
39699,"public void drawRight(float x,float y,float maxWidth,DisplayHandler.Background background,int backgroundColor,int textColor){
  DisplayHandler.Background bg=background;
  int bgColor=backgroundColor;
  int textCol=textColor;
  if (this.backgroundColor != null)   bgColor=this.backgroundColor;
  if (this.background != DisplayHandler.Background.NONE)   bg=this.background;
  if (this.textColor != null)   textCol=this.textColor;
  drawFullBG(bg,bgColor,x - maxWidth - 1,y - 1,maxWidth + 2,10 * this.scale);
  if (this.text.equals(""String_Node_Str""))   return;
  float xOff=x - this.textWidth;
  if (this.align == DisplayHandler.Align.LEFT) {
    xOff=x - maxWidth;
  }
 else   if (this.align == DisplayHandler.Align.CENTER) {
    xOff=x - this.textWidth / 2 - maxWidth / 2;
  }
  drawPerLineBG(bg,bgColor,xOff - 1,y - 1,this.textWidth + 2,10 * this.scale);
  Renderer.text(this.text,xOff,y).setScale(this.scale).setColor(textCol).setDropShadow(this.shadow).draw();
  handleInput(xOff - 1,y - 1,this.textWidth + 2,10 * this.scale);
}","public void drawRight(float x,float y,float maxWidth,DisplayHandler.Background background,int backgroundColor,int textColor){
  DisplayHandler.Background bg=background;
  int bgColor=backgroundColor;
  int textCol=textColor;
  if (this.backgroundColor != null)   bgColor=this.backgroundColor;
  if (this.background != DisplayHandler.Background.NONE)   bg=this.background;
  if (this.textColor != null)   textCol=this.textColor;
  drawFullBG(bg,bgColor,x - maxWidth - 1,y - 1,maxWidth + 2,10 * this.scale);
  if (this.text.equals(""String_Node_Str""))   return;
  float xOff=x - this.textWidth;
  if (this.align == DisplayHandler.Align.LEFT) {
    xOff=x - maxWidth;
  }
 else   if (this.align == DisplayHandler.Align.CENTER) {
    xOff=x - this.textWidth / 2 - maxWidth / 2;
  }
  drawPerLineBG(bg,bgColor,xOff - 1,y - 1,this.textWidth + 2,10 * this.scale);
  Renderer.text(this.text,xOff,y).setScale(this.scale).setColor(textCol).setShadow(this.shadow).draw();
  handleInput(xOff - 1,y - 1,this.textWidth + 2,10 * this.scale);
}"
39700,"private int drawFile(Map.Entry<String,List<String>> file,int fileOffset){
  Renderer.rectangle(0x80000000,20,infoHeight + fileOffset - scrolled,width,file.getValue().size() * 9 + 12).draw();
  Renderer.text(ChatFormatting.DARK_GRAY + file.getKey(),22,infoHeight + fileOffset - scrolled + 2).setDropShadow(true).draw();
  int i=0;
  for (  String line : file.getValue()) {
    Renderer.text(colorLine(line).replace(""String_Node_Str"",""String_Node_Str""),22,i * 9 + infoHeight + fileOffset - scrolled + 12).setDropShadow(true).draw();
    i++;
  }
  return file.getValue().size() * 9 + 30;
}","private int drawFile(Map.Entry<String,List<String>> file,int fileOffset){
  Renderer.rectangle(0x80000000,20,infoHeight + fileOffset - scrolled,width,file.getValue().size() * 9 + 12).draw();
  Renderer.text(ChatFormatting.DARK_GRAY + file.getKey(),22,infoHeight + fileOffset - scrolled + 2).setShadow(true).draw();
  int i=0;
  for (  String line : file.getValue()) {
    Renderer.text(colorLine(line).replace(""String_Node_Str"",""String_Node_Str""),22,i * 9 + infoHeight + fileOffset - scrolled + 12).setShadow(true).draw();
    i++;
  }
  return file.getValue().size() * 9 + 30;
}"
39701,"private void drawJump(){
  if (scrolled > infoHeight) {
    Renderer.rectangle(0x80000000,width + 20,height - 20,20,20).draw();
    Renderer.text(""String_Node_Str"",width + 31 - Renderer.getStringWidth(""String_Node_Str"") / 2,height - 12).setDropShadow(true).draw();
  }
}","private void drawJump(){
  if (scrolled > infoHeight) {
    Renderer.rectangle(0x80000000,width + 20,height - 20,20,20).draw();
    Renderer.text(""String_Node_Str"",width + 31 - Renderer.getStringWidth(""String_Node_Str"") / 2,height - 12).setShadow(true).draw();
  }
}"
39702,"ModuleGui(Module module){
  this.module=module;
  this.scrolled=0;
  String preDescription=module.getMetadata().getDescription() == null ? ""String_Node_Str"" : module.getMetadata().getDescription();
  this.description=Renderer.text(preDescription,22,30).setDropShadow(true);
  updateScaling(0,0,0);
  isHovered=false;
  name=ChatLib.addColor(this.module.getMetadata().getDisplayName() == null ? this.module.getName() : this.module.getMetadata().getDisplayName());
  version=this.module.getMetadata().getVersion() == null ? ""String_Node_Str"" : ""String_Node_Str"" + this.module.getMetadata().getVersion();
  coloredFiles=new HashMap<>();
  for (  Map.Entry<String,List<String>> file : this.module.getFiles().entrySet()) {
    List<String> lines=new ArrayList<>();
    for (    String line : file.getValue()) {
      lines.add(colorLine(line));
    }
    coloredFiles.put(file.getKey(),lines);
  }
}","ModuleGui(Module module){
  this.module=module;
  this.scrolled=0;
  String preDescription=module.getMetadata().getDescription() == null ? ""String_Node_Str"" : module.getMetadata().getDescription();
  this.description=Renderer.text(preDescription,22,30).setShadow(true);
  updateScaling(0,0,0);
  isHovered=false;
  name=ChatLib.addColor(this.module.getMetadata().getDisplayName() == null ? this.module.getName() : this.module.getMetadata().getDisplayName());
  version=this.module.getMetadata().getVersion() == null ? ""String_Node_Str"" : ""String_Node_Str"" + this.module.getMetadata().getVersion();
  coloredFiles=new HashMap<>();
  for (  Map.Entry<String,List<String>> file : this.module.getFiles().entrySet()) {
    List<String> lines=new ArrayList<>();
    for (    String line : file.getValue()) {
      lines.add(colorLine(line));
    }
    coloredFiles.put(file.getKey(),lines);
  }
}"
39703,"private void drawBack(){
  String back=isHovered ? ""String_Node_Str"" : ""String_Node_Str"";
  Renderer.text(ChatLib.addColor(back),20 + width - Renderer.getStringWidth(""String_Node_Str"") - 2,infoHeight - scrolled).setDropShadow(true).draw();
}","private void drawBack(){
  String back=isHovered ? ""String_Node_Str"" : ""String_Node_Str"";
  Renderer.text(ChatLib.addColor(back),20 + width - Renderer.getStringWidth(""String_Node_Str"") - 2,infoHeight - scrolled).setShadow(true).draw();
}"
39704,"private int drawRequires(){
  if (this.module.getMetadata().getRequires() == null)   return 0;
  Renderer.text(""String_Node_Str"" + this.module.getMetadata().getRequires(),22,infoHeight - scrolled + 20).setDropShadow(true).draw();
  return 20;
}","private int drawRequires(){
  if (this.module.getMetadata().getRequires() == null)   return 0;
  Renderer.text(""String_Node_Str"" + this.module.getMetadata().getRequires(),22,infoHeight - scrolled + 20).setShadow(true).draw();
  return 20;
}"
39705,"@Override public void drawScreen(int mouseX,int mouseY,float partialTicks){
  super.drawScreen(mouseX,mouseY,partialTicks);
  drawBackground(0);
  drawScroll();
  Renderer.rectangle(0x80000000,20,10 - scrolled,width,infoHeight).draw();
  Renderer.text(name,22,12 - scrolled).setDropShadow(true).draw();
  Renderer.text(ChatFormatting.GRAY + version,width - Renderer.getStringWidth(version) + 18,12 - scrolled).setDropShadow(true).draw();
  Renderer.rectangle(0xa0000000,22,22 - scrolled,width - 4,2).draw();
  description.setY(30 - this.scrolled).draw();
  Renderer.text(ChatFormatting.DARK_GRAY + CTJS.getInstance().getConfig().getModulesFolder().value + this.module.getName()+ ""String_Node_Str"",22,infoHeight - scrolled).setDropShadow(true).draw();
  drawBack();
  int fileOffset=20 + drawRequires();
  for (  Map.Entry<String,List<String>> file : coloredFiles.entrySet()) {
    fileOffset+=drawFile(file,fileOffset);
  }
  drawJump();
  updateScaling(mouseX,mouseY,fileOffset);
}","@Override public void drawScreen(int mouseX,int mouseY,float partialTicks){
  super.drawScreen(mouseX,mouseY,partialTicks);
  drawBackground(0);
  drawScroll();
  Renderer.rectangle(0x80000000,20,10 - scrolled,width,infoHeight).draw();
  Renderer.text(name,22,12 - scrolled).setShadow(true).draw();
  Renderer.text(ChatFormatting.GRAY + version,width - Renderer.getStringWidth(version) + 18,12 - scrolled).setShadow(true).draw();
  Renderer.rectangle(0xa0000000,22,22 - scrolled,width - 4,2).draw();
  description.setY(30 - this.scrolled).draw();
  Renderer.text(ChatFormatting.DARK_GRAY + CTJS.getInstance().getConfig().getModulesFolder().value + this.module.getName()+ ""String_Node_Str"",22,infoHeight - scrolled).setShadow(true).draw();
  drawBack();
  int fileOffset=20 + drawRequires();
  for (  Map.Entry<String,List<String>> file : coloredFiles.entrySet()) {
    fileOffset+=drawFile(file,fileOffset);
  }
  drawJump();
  updateScaling(mouseX,mouseY,fileOffset);
}"
39706,"private void draw(){
  x=20;
  y=getY(i);
  int width=Renderer.screen.getWidth() - 40;
  int height=105;
  Renderer.rectangle(0x80000000,x,y,width,height).draw();
  Renderer.text(name,x + 2,y + 2).setDropShadow(true).draw();
  if (this.module.getMetadata().getVersion() != null) {
    String version=ChatFormatting.GRAY + ""String_Node_Str"" + this.module.getMetadata().getVersion();
    Renderer.text(version,x + width - Renderer.getStringWidth(version) - 2,y + 2).setDropShadow(true).draw();
  }
  Renderer.rectangle(0xa0000000,x + 2,y + 12,width - 4,2).draw();
  String description=(this.module.getMetadata().getDescription() == null) ? ""String_Node_Str"" : this.module.getMetadata().getDescription();
  Text desc=Renderer.text(description,x + 2,y + 20).setWidth(width - 5).setMaxLines(6).draw();
  if (desc.exceedsMaxLines())   Renderer.text(""String_Node_Str"",x + 2,y + 73).draw();
  Renderer.text(ChatFormatting.DARK_GRAY + CTJS.getInstance().getConfig().getModulesFolder().value + this.module.getName()+ ""String_Node_Str"",x + 2,y + height - 12).setDropShadow(true).draw();
  String finalShowCode=isHovered ? ""String_Node_Str"" : ""String_Node_Str"";
  Renderer.text(ChatLib.addColor(finalShowCode),x + width - Renderer.getStringWidth(""String_Node_Str"") - 2,y + height - 12).setDropShadow(true).draw();
}","private void draw(){
  x=20;
  y=getY(i);
  int width=Renderer.screen.getWidth() - 40;
  int height=105;
  Renderer.rectangle(0x80000000,x,y,width,height).draw();
  Renderer.text(name,x + 2,y + 2).setShadow(true).draw();
  if (this.module.getMetadata().getVersion() != null) {
    String version=ChatFormatting.GRAY + ""String_Node_Str"" + this.module.getMetadata().getVersion();
    Renderer.text(version,x + width - Renderer.getStringWidth(version) - 2,y + 2).setShadow(true).draw();
  }
  Renderer.rectangle(0xa0000000,x + 2,y + 12,width - 4,2).draw();
  String description=(this.module.getMetadata().getDescription() == null) ? ""String_Node_Str"" : this.module.getMetadata().getDescription();
  Text desc=Renderer.text(description,x + 2,y + 20).setWidth(width - 5).setMaxLines(6).draw();
  if (desc.exceedsMaxLines())   Renderer.text(""String_Node_Str"",x + 2,y + 73).draw();
  Renderer.text(ChatFormatting.DARK_GRAY + CTJS.getInstance().getConfig().getModulesFolder().value + this.module.getName()+ ""String_Node_Str"",x + 2,y + height - 12).setShadow(true).draw();
  String finalShowCode=isHovered ? ""String_Node_Str"" : ""String_Node_Str"";
  Renderer.text(ChatLib.addColor(finalShowCode),x + width - Renderer.getStringWidth(""String_Node_Str"") - 2,y + height - 12).setShadow(true).draw();
}"
39707,"public void draw(int mouseX,int mouseY){
  this.resetButton.xPosition=Renderer.screen.getWidth() / 2 - 100 + this.x + 185;
  this.resetButton.drawButton(Client.getMinecraft(),mouseX,mouseY);
  Renderer.text(""String_Node_Str"",Renderer.screen.getWidth() / 2 - 100 + this.x + 189,this.y - 4).setScale(2).setColor(0xffffffff).setDropShadow(true).draw();
}","public void draw(int mouseX,int mouseY){
  this.resetButton.xPosition=Renderer.screen.getWidth() / 2 - 100 + this.x + 185;
  this.resetButton.drawButton(Client.getMinecraft(),mouseX,mouseY);
  Renderer.text(""String_Node_Str"",Renderer.screen.getWidth() / 2 - 100 + this.x + 189,this.y - 4).setScale(2).setColor(0xffffffff).setShadow(true).draw();
}"
39708,"/** 
 * Gets a color int based on 0-255 rgba values. This can be used in settings background and text color.
 * @param red   value between 0 and 255
 * @param green value between 0 and 255
 * @param blue  value between 0 and 255
 * @param alpha value between 0 and 255
 * @return integer color
 */
public static int color(int red,int green,int blue,int alpha){
  return (limit255(alpha) * 0x1000000) + (limit255(red) * 0x10000) + (limit255(green) * 0x100)+ blue;
}","/** 
 * Gets a color int based on 0-255 rgb values.
 * @param red   red value
 * @param green green value
 * @param blue  blue value
 * @return integer color
 */
public static int color(int red,int green,int blue){
  return color(red,green,blue,255);
}"
39709,"public static int limit255(int a){
  return (a > 255) ? 255 : (a < 0 ? 0 : a);
}","/** 
 * Limits a number between 0 and 255 for use with   {@link Renderer#color(int,int,int,int)}.
 * @param number the number to limit
 * @return the limited number
 */
public static int limit255(int number){
  return (number > 255) ? 255 : (number < 0 ? 0 : number);
}"
39710,"@EventHandler public void init(FMLInitializationEvent event){
  instance=this;
  this.displayHandler=new DisplayHandler();
  this.guiHandler=new GuiHandler();
  this.commandHandler=new CommandHandler();
  this.chatListener=new ChatListener();
  this.moduleManager=new ModuleManager();
  this.cps=new CPS();
  registerListeners();
  registerHooks();
  moduleManager.load(true);
}","@EventHandler public void init(FMLInitializationEvent event){
  this.displayHandler=new DisplayHandler();
  this.guiHandler=new GuiHandler();
  this.commandHandler=new CommandHandler();
  this.chatListener=new ChatListener();
  this.moduleManager=new ModuleManager();
  this.cps=new CPS();
  registerListeners();
  registerHooks();
  moduleManager.load(true);
}"
39711,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  this.console=new Console();
  Sentry.init(Reference.SENTRYDSN);
  Sentry.getContext().setUser(new UserBuilder().setUsername(Player.getName()).setId(Player.getUUID()).build());
  this.injectResourcePack(event.getModConfigurationDirectory().toString());
  this.config=new Config();
  this.config.setConfigFile(new File(event.getModConfigurationDirectory().toString(),""String_Node_Str""));
  this.config.save();
  this.config.load();
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  instance=this;
  this.console=new Console();
  Sentry.init(Reference.SENTRYDSN);
  Sentry.getContext().setUser(new UserBuilder().setUsername(Player.getName()).setId(Player.getUUID()).build());
  this.injectResourcePack(event.getModConfigurationDirectory().toString());
  this.config=new Config();
  this.config.setConfigFile(new File(event.getModConfigurationDirectory().toString(),""String_Node_Str""));
  this.config.save();
  this.config.load();
}"
39712,"private void dumpChat(int ammount){
  clearOldDump();
  ArrayList<String> messages=CTJS.getInstance().getChatListener().getChatHistory();
  if (ammount > messages.size())   ammount=messages.size();
  ChatLib.chat(""String_Node_Str"" + ChatLib.getChatBreak(""String_Node_Str""),idFixed);
  String msg;
  for (int i=0; i < ammount; i++) {
    msg=ChatLib.replaceFormatting(messages.get(messages.size() - ammount + i));
    ChatComponentText cct=new ChatComponentText(msg);
    cct.setChatStyle(new ChatStyle().setChatClickEvent(new ClickEvent(ClickEvent.Action.getValueByCanonicalName(""String_Node_Str""),""String_Node_Str"" + msg)).setChatHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT,new ChatComponentText(""String_Node_Str""))));
    ChatLib.chat(new Message(cct).setChatLineId(idFixed + i + 1));
  }
  ChatLib.chat(""String_Node_Str"" + ChatLib.getChatBreak(""String_Node_Str""),idFixed + ammount + 1);
  idFixedOffset=idFixed + ammount + 1;
}","private void dumpChat(int amount){
  clearOldDump();
  ArrayList<String> messages=CTJS.getInstance().getChatListener().getChatHistory();
  if (amount > messages.size())   amount=messages.size();
  ChatLib.chat(""String_Node_Str"" + ChatLib.getChatBreak(""String_Node_Str""),idFixed);
  String msg;
  for (int i=0; i < amount; i++) {
    msg=ChatLib.replaceFormatting(messages.get(messages.size() - amount + i));
    ChatComponentText cct=new ChatComponentText(msg);
    cct.setChatStyle(new ChatStyle().setChatClickEvent(new ClickEvent(ClickEvent.Action.getValueByCanonicalName(""String_Node_Str""),""String_Node_Str"" + msg)).setChatHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT,new ChatComponentText(""String_Node_Str""))));
    ChatLib.chat(new Message(cct).setChatLineId(idFixed + i + 1));
  }
  ChatLib.chat(""String_Node_Str"" + ChatLib.getChatBreak(""String_Node_Str""),idFixed + amount + 1);
  idFixedOffset=idFixed + amount + 1;
}"
39713,"@Override public void trigger(Object... args){
  int mouseX=(int)args[0];
  int mouseY=(int)args[1];
  int state=(int)args[2];
  try {
    CTJS.getInstance().getModuleManager().invokeFunction(methodName,mouseX,mouseY,state);
  }
 catch (  ScriptException|NoSuchMethodException exception) {
    onKeyTyped=null;
    Console.getConsole().printStackTrace(exception);
  }
}","@Override public void trigger(Object... args){
  int mouseX=(int)args[0];
  int mouseY=(int)args[1];
  int state=(int)args[2];
  try {
    CTJS.getInstance().getModuleManager().invokeFunction(methodName,mouseX,mouseY,state);
  }
 catch (  ScriptException|NoSuchMethodException exception) {
    onMouseReleased=null;
    Console.getConsole().printStackTrace(exception);
  }
}"
39714,"/** 
 * Registers a method to be ran while gui is open. Registered method runs on key input.
 * @param methodName the method to run
 * @return the trigger
 */
public OnTrigger registerMouseReleased(String methodName){
  return onMouseReleased=new OnTrigger(methodName,TriggerType.OTHER){
    @Override public void trigger(    Object... args){
      int mouseX=(int)args[0];
      int mouseY=(int)args[1];
      int state=(int)args[2];
      try {
        CTJS.getInstance().getModuleManager().invokeFunction(methodName,mouseX,mouseY,state);
      }
 catch (      ScriptException|NoSuchMethodException exception) {
        onKeyTyped=null;
        Console.getConsole().printStackTrace(exception);
      }
    }
  }
;
}","/** 
 * Registers a method to be ran while gui is open. Registered method runs on key input.
 * @param methodName the method to run
 * @return the trigger
 */
public OnTrigger registerMouseReleased(String methodName){
  return onMouseReleased=new OnTrigger(methodName,TriggerType.OTHER){
    @Override public void trigger(    Object... args){
      int mouseX=(int)args[0];
      int mouseY=(int)args[1];
      int state=(int)args[2];
      try {
        CTJS.getInstance().getModuleManager().invokeFunction(methodName,mouseX,mouseY,state);
      }
 catch (      ScriptException|NoSuchMethodException exception) {
        onMouseReleased=null;
        Console.getConsole().printStackTrace(exception);
      }
    }
  }
;
}"
39715,"/** 
 * Registers a method to be ran while gui is open. Registered method runs on key input.
 * @param methodName the method to run
 * @return the trigger
 */
public OnTrigger registerMouseDragged(String methodName){
  return onMouseDragged=new OnTrigger(methodName,TriggerType.OTHER){
    @Override public void trigger(    Object... args){
      int mouseX=(int)args[0];
      int mouseY=(int)args[1];
      int clickedMouseButton=(int)args[2];
      long timeSinceLastClick=(long)args[3];
      try {
        CTJS.getInstance().getModuleManager().invokeFunction(methodName,mouseX,mouseY,clickedMouseButton,timeSinceLastClick);
      }
 catch (      ScriptException|NoSuchMethodException exception) {
        onKeyTyped=null;
        Console.getConsole().printStackTrace(exception);
      }
    }
  }
;
}","/** 
 * Registers a method to be ran while gui is open. Registered method runs on key input.
 * @param methodName the method to run
 * @return the trigger
 */
public OnTrigger registerMouseDragged(String methodName){
  return onMouseDragged=new OnTrigger(methodName,TriggerType.OTHER){
    @Override public void trigger(    Object... args){
      int mouseX=(int)args[0];
      int mouseY=(int)args[1];
      int clickedMouseButton=(int)args[2];
      long timeSinceLastClick=(long)args[3];
      try {
        CTJS.getInstance().getModuleManager().invokeFunction(methodName,mouseX,mouseY,clickedMouseButton,timeSinceLastClick);
      }
 catch (      ScriptException|NoSuchMethodException exception) {
        onMouseDragged=null;
        Console.getConsole().printStackTrace(exception);
      }
    }
  }
;
}"
39716,"/** 
 * Registers a method to be ran while gui is open. Registered method runs on draw.
 * @param methodName the method to run
 * @return the trigger
 */
public OnTrigger registerDraw(String methodName){
  return onDraw=new OnTrigger(methodName,TriggerType.OTHER){
    @Override public void trigger(    Object... args){
      if (!(args[0] instanceof Integer && args[1] instanceof Integer && args[2] instanceof Float)) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      int mouseX=(int)args[0];
      int mouseY=(int)args[1];
      float partialTicks=(float)args[2];
      try {
        CTJS.getInstance().getModuleManager().invokeFunction(methodName,mouseX,mouseY,partialTicks);
      }
 catch (      ScriptException|NoSuchMethodException e) {
        onDraw=null;
        e.printStackTrace();
      }
    }
  }
;
}","/** 
 * Registers a method to be ran while gui is open. Registered method runs on draw.
 * @param methodName the method to run
 * @return the trigger
 */
public OnTrigger registerDraw(String methodName){
  return onDraw=new OnTrigger(methodName,TriggerType.OTHER){
    @Override public void trigger(    Object... args){
      if (!(args[0] instanceof Integer && args[1] instanceof Integer && args[2] instanceof Float)) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      int mouseX=(int)args[0];
      int mouseY=(int)args[1];
      float partialTicks=(float)args[2];
      try {
        CTJS.getInstance().getModuleManager().invokeFunction(methodName,mouseX,mouseY,partialTicks);
      }
 catch (      ScriptException|NoSuchMethodException exception) {
        onDraw=null;
        Console.getConsole().printStackTrace(exception);
      }
    }
  }
;
}"
39717,"@Override public void trigger(Object... args){
  if (!(args[0] instanceof Character && args[1] instanceof Integer)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  char typedChar=(char)args[0];
  int keyCode=(int)args[1];
  try {
    CTJS.getInstance().getModuleManager().invokeFunction(methodName,typedChar,keyCode);
  }
 catch (  ScriptException|NoSuchMethodException e) {
    Console.getConsole().printStackTrace(e);
    onKeyTyped=null;
  }
}","@Override public void trigger(Object... args){
  if (!(args[0] instanceof Character && args[1] instanceof Integer)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  char typedChar=(char)args[0];
  int keyCode=(int)args[1];
  try {
    CTJS.getInstance().getModuleManager().invokeFunction(methodName,typedChar,keyCode);
  }
 catch (  ScriptException|NoSuchMethodException exception) {
    onKeyTyped=null;
    Console.getConsole().printStackTrace(exception);
  }
}"
39718,"/** 
 * Registers a method to be ran while gui is open. Registered method runs on key input.
 * @param methodName the method to run
 * @return the trigger
 */
public OnTrigger registerKeyTyped(String methodName){
  return onKeyTyped=new OnTrigger(methodName,TriggerType.OTHER){
    @Override public void trigger(    Object... args){
      if (!(args[0] instanceof Character && args[1] instanceof Integer)) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      char typedChar=(char)args[0];
      int keyCode=(int)args[1];
      try {
        CTJS.getInstance().getModuleManager().invokeFunction(methodName,typedChar,keyCode);
      }
 catch (      ScriptException|NoSuchMethodException e) {
        Console.getConsole().printStackTrace(e);
        onKeyTyped=null;
      }
    }
  }
;
}","/** 
 * Registers a method to be ran while gui is open. Registered method runs on key input.
 * @param methodName the method to run
 * @return the trigger
 */
public OnTrigger registerKeyTyped(String methodName){
  return onKeyTyped=new OnTrigger(methodName,TriggerType.OTHER){
    @Override public void trigger(    Object... args){
      if (!(args[0] instanceof Character && args[1] instanceof Integer)) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      char typedChar=(char)args[0];
      int keyCode=(int)args[1];
      try {
        CTJS.getInstance().getModuleManager().invokeFunction(methodName,typedChar,keyCode);
      }
 catch (      ScriptException|NoSuchMethodException exception) {
        onKeyTyped=null;
        Console.getConsole().printStackTrace(exception);
      }
    }
  }
;
}"
39719,"/** 
 * Registers a method to be ran while gui is open. Registered method runs on mouse click.
 * @param methodName the method to run
 * @return the trigger
 */
public OnTrigger registerClicked(String methodName){
  return onClick=new OnTrigger(methodName,TriggerType.OTHER){
    @Override public void trigger(    Object... args){
      if (!(args[0] instanceof Integer && args[1] instanceof Integer && args[2] instanceof Integer)) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      int mouseX=(int)args[0];
      int mouseY=(int)args[1];
      int button=(int)args[2];
      try {
        CTJS.getInstance().getModuleManager().invokeFunction(methodName,mouseX,mouseY,button);
      }
 catch (      ScriptException|NoSuchMethodException e) {
        onClick=null;
        e.printStackTrace();
      }
    }
  }
;
}","/** 
 * Registers a method to be ran while gui is open. Registered method runs on mouse click.
 * @param methodName the method to run
 * @return the trigger
 */
public OnTrigger registerClicked(String methodName){
  return onClick=new OnTrigger(methodName,TriggerType.OTHER){
    @Override public void trigger(    Object... args){
      if (!(args[0] instanceof Integer && args[1] instanceof Integer && args[2] instanceof Integer)) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      int mouseX=(int)args[0];
      int mouseY=(int)args[1];
      int button=(int)args[2];
      try {
        CTJS.getInstance().getModuleManager().invokeFunction(methodName,mouseX,mouseY,button);
      }
 catch (      ScriptException|NoSuchMethodException exception) {
        onClick=null;
        Console.getConsole().printStackTrace(exception);
      }
    }
  }
;
}"
39720,"private void simulateChat(String[] args){
  StringBuilder toSend=new StringBuilder();
  for (int i=1; i < args.length; i++) {
    toSend.append(args[i]).append(""String_Node_Str"");
  }
  ClientChatReceivedEvent event=new ClientChatReceivedEvent((byte)0,new ChatComponentText(toSend.toString()));
  CTJS.getInstance().getChatListener().onReceiveChat(event);
  if (!event.isCanceled()) {
    ChatLib.chat(event.message.getFormattedText());
  }
}","private void simulateChat(String[] args){
  StringBuilder toSend=new StringBuilder();
  for (int i=1; i < args.length; i++) {
    toSend.append(args[i]);
    if (i != args.length - 1)     toSend.append(""String_Node_Str"");
  }
  ClientChatReceivedEvent event=new ClientChatReceivedEvent((byte)0,new ChatComponentText(toSend.toString()));
  CTJS.getInstance().getChatListener().onReceiveChat(event);
  if (!event.isCanceled()) {
    ChatLib.chat(event.message.getFormattedText());
  }
}"
39721,"private void injectResourcePack(String path){
  try {
    File pictures=new File(path,""String_Node_Str"");
    Field field=FMLClientHandler.class.getDeclaredField(""String_Node_Str"");
    field.setAccessible(true);
    List<IResourcePack> packs=(List<IResourcePack>)field.get(FMLClientHandler.instance());
    packs.add(imagesPack=new ImagesPack(pictures));
    pictures.mkdirs();
    assetsDir=pictures;
  }
 catch (  Exception e) {
    Console.getConsole().printStackTrace(e);
  }
}","private void injectResourcePack(String path){
  try {
    File pictures=new File(path,""String_Node_Str"");
    Field field=FMLClientHandler.class.getDeclaredField(""String_Node_Str"");
    field.setAccessible(true);
    List<IResourcePack> packs=(List<IResourcePack>)field.get(FMLClientHandler.instance());
    packs.add(imagesPack=new ImagesPack(pictures));
    pictures.mkdirs();
    assetsDir=pictures;
  }
 catch (  Exception exception) {
    exception.printStackTrace();
  }
}"
39722,"private Object extractGenotypeValues(Object genotypeAttribute,VariantPropertyType type){
  Object defaultValue=null;
switch (type) {
case NUMERIC_COLLECTION:
case STRING_COLLECTION:
    defaultValue=new ArrayList<>();
  break;
case STRING:
defaultValue=""String_Node_Str"";
}
if (genotypeAttribute == null) {
return defaultValue;
}
if (type == VariantPropertyType.STRING) {
return genotypeAttribute.toString();
}
if (type == VariantPropertyType.NUMERIC) {
String value=genotypeAttribute.toString();
if (""String_Node_Str"".equals(value)) {
return null;
}
return Double.parseDouble(value);
}
String[] splitValues=((String)genotypeAttribute).split(""String_Node_Str"");
if (type == VariantPropertyType.STRING_COLLECTION) {
return new ArrayList<>(Arrays.asList(splitValues));
}
if (type == VariantPropertyType.NUMERIC_COLLECTION) {
List<Double> parsed=Arrays.stream(splitValues).map((str) -> ""String_Node_Str"".equals(str) ? null : Double.parseDouble(str)).collect(Collectors.toList());
return parsed;
}
throw new IllegalStateException(""String_Node_Str"" + type + ""String_Node_Str"");
}","private Object extractGenotypeValues(Object genotypeAttribute,VariantPropertyType type){
  Object defaultValue=null;
switch (type) {
case NUMERIC_COLLECTION:
case STRING_COLLECTION:
    defaultValue=new ArrayList<>();
  break;
case STRING:
defaultValue=""String_Node_Str"";
}
if (genotypeAttribute == null) {
return defaultValue;
}
if (type == VariantPropertyType.STRING) {
return genotypeAttribute.toString();
}
if (type == VariantPropertyType.NUMERIC) {
String value=genotypeAttribute.toString();
if (""String_Node_Str"".equals(value)) {
return null;
}
return Double.parseDouble(value);
}
List splitValues=genotypeAttribute instanceof List ? (List)genotypeAttribute : Arrays.asList(genotypeAttribute.toString().split(""String_Node_Str""));
if (type == VariantPropertyType.STRING_COLLECTION) {
return new ArrayList<>(splitValues);
}
if (type == VariantPropertyType.NUMERIC_COLLECTION) {
List<Double> parsed=(List<Double>)splitValues.stream().map((str) -> ""String_Node_Str"".equals(str.toString()) ? null : Double.parseDouble(str.toString())).collect(Collectors.toList());
return parsed;
}
throw new IllegalStateException(""String_Node_Str"" + type + ""String_Node_Str"");
}"
39723,"private boolean isCollectionType(VCFCompoundHeaderLine info){
  VCFHeaderLineCount count=info.getCountType();
  return count == VCFHeaderLineCount.A || count == VCFHeaderLineCount.R || count == VCFHeaderLineCount.UNBOUNDED || (count == VCFHeaderLineCount.INTEGER && info.getCount() > 1);
}","private boolean isCollectionType(VCFCompoundHeaderLine info){
  VCFHeaderLineCount count=info.getCountType();
  return count == VCFHeaderLineCount.A || count == VCFHeaderLineCount.G || count == VCFHeaderLineCount.R || count == VCFHeaderLineCount.UNBOUNDED || (count == VCFHeaderLineCount.INTEGER && info.getCount() > 1);
}"
39724,"private String getSingleColumnValue(List call,String column){
  VariantPropertyType type=getColumnType(column);
  Object value=call.get(indexMap.get(column));
switch (type) {
case STRING:
    return (String)value;
case STRING_COLLECTION:
  List<String> values=(List<String>)value;
if (values.size() != 1) {
  throw new IllegalStateException(""String_Node_Str"");
}
return values.get(0);
default :
throw new IllegalStateException(""String_Node_Str"");
}
}","private String getSingleColumnValue(List call,String column){
  VariantPropertyType type=getColumnType(column);
  Object value=call.get(indexMap.get(column));
switch (type) {
case NUMERIC:
case STRING:
    return value.toString();
case NUMERIC_COLLECTION:
case STRING_COLLECTION:
  List values=(List)value;
if (values.size() != 1) {
  throw new IllegalStateException(""String_Node_Str"");
}
return values.get(0).toString();
default :
throw new IllegalStateException(""String_Node_Str"");
}
}"
39725,"private void processCustomMessage(BmobIMMessage message,MessageEvent event){
  String type=message.getMsgType();
  String client=BmobUser.getCurrentUser(User.class).getClient();
  if (type.equals(SMSMessage.SMS) && client.equals(User.CHILDREN)) {
    Toast.makeText(mContext,message.getContent(),Toast.LENGTH_LONG).show();
    L.i(event.getConversation().getConversationTitle() + ""String_Node_Str"");
    SMS sms=SMSMessage.convert(message);
    mSmsDao.insert(sms);
    String s=""String_Node_Str"" + sms.getTime() + ""String_Node_Str""+ ""String_Node_Str""+ sms.getAddress()+ ""String_Node_Str""+ ""String_Node_Str""+ sms.getContent()+ ""String_Node_Str""+ ""String_Node_Str""+ sms.getProbability()+ ""String_Node_Str"";
    L.i(s);
    L.i(""String_Node_Str"" + mSmsDao.queryBuilder().build().list().size());
    showSMSNotification(event,sms);
  }
 else   if (type.equals(BpmMessage.BPM) && client.equals(User.CHILDREN)) {
    Toast.makeText(mContext,message.getContent(),Toast.LENGTH_LONG).show();
    L.i(event.getConversation().getConversationTitle() + ""String_Node_Str"");
    Bpm bpm=BpmMessage.convert(message);
    mBpmDao.insert(bpm);
    String s=""String_Node_Str"" + bpm.getTime() + ""String_Node_Str""+ ""String_Node_Str""+ bpm.getBpm()+ ""String_Node_Str""+ ""String_Node_Str""+ bpm.getDescription()+ ""String_Node_Str"";
    L.i(s);
    L.i(""String_Node_Str"" + mBpmDao.queryBuilder().build().list().size());
    showBpmNotification(event,bpm);
  }
 else   if ((type.equals(ShareMapMessage.MAP)) && client.equals(User.PARENTS)) {
    EventBus.getDefault().post(message.getContent());
  }
  L.i(getCurrentUser(User.class).getUsername() + ""String_Node_Str"" + type+ ""String_Node_Str""+ client+ ""String_Node_Str""+ message.getContent());
}","private void processCustomMessage(BmobIMMessage message,MessageEvent event){
  String type=message.getMsgType();
  String client=BmobUser.getCurrentUser(User.class).getClient();
  if (type.equals(SMSMessage.SMS) && client.equals(User.CHILDREN)) {
    Toast.makeText(mContext,message.getContent(),Toast.LENGTH_LONG).show();
    L.i(event.getConversation().getConversationTitle() + ""String_Node_Str"");
    SMS sms=SMSMessage.convert(message);
    mSmsDao.insert(sms);
    String s=""String_Node_Str"" + sms.getTime() + ""String_Node_Str""+ ""String_Node_Str""+ sms.getAddress()+ ""String_Node_Str""+ ""String_Node_Str""+ sms.getContent()+ ""String_Node_Str""+ ""String_Node_Str""+ sms.getProbability()+ ""String_Node_Str"";
    L.i(s);
    L.i(""String_Node_Str"" + mSmsDao.queryBuilder().build().list().size());
    showSMSNotification(event,sms);
  }
 else   if (type.equals(BpmMessage.BPM) && client.equals(User.CHILDREN)) {
    Toast.makeText(mContext,message.getContent(),Toast.LENGTH_LONG).show();
    L.i(event.getConversation().getConversationTitle() + ""String_Node_Str"");
    Bpm bpm=BpmMessage.convert(message);
    mBpmDao.insert(bpm);
    String s=""String_Node_Str"" + bpm.getTime() + ""String_Node_Str""+ ""String_Node_Str""+ bpm.getBpm()+ ""String_Node_Str""+ ""String_Node_Str""+ bpm.getDescription()+ ""String_Node_Str"";
    L.i(s);
    L.i(""String_Node_Str"" + mBpmDao.queryBuilder().build().list().size());
    showBpmNotification(event,bpm);
  }
 else   if ((type.equals(ShareMapMessage.MAP) && client.equals(User.PARENTS)) && client.equals(User.PARENTS)) {
    EventBus.getDefault().post(message.getContent());
  }
  L.i(getCurrentUser(User.class).getUsername() + ""String_Node_Str"" + type+ ""String_Node_Str""+ client+ ""String_Node_Str""+ message.getContent());
}"
39726,"public void checkConnect(final Context context){
  BmobUtil.connect(BmobUser.getCurrentUser(User.class),new BmobEvent.onConnectListener(){
    @Override public void connectSuccessful(    User user){
      EventBus.getDefault().post(new BmobIMMessage());
      BmobIM.getInstance().updateUserInfo(new BmobIMUserInfo(user.getObjectId(),user.getUsername(),null));
    }
    @Override public void connectFailed(    String error){
      Toast.makeText(context,error,Toast.LENGTH_SHORT).show();
    }
  }
);
  BmobIM.getInstance().setOnConnectStatusChangeListener(new ConnectStatusChangeListener(){
    @Override public void onChange(    ConnectionStatus status){
      Toast.makeText(context,status.getMsg(),Toast.LENGTH_SHORT).show();
      L.i(BmobIM.getInstance().getCurrentStatus().getMsg());
    }
  }
);
}","public void checkConnect(){
  mSendToUsername=BmobUser.getCurrentUser(User.class).getContact().get(0).getUsername();
  BmobUtil.connect(BmobUser.getCurrentUser(User.class),new BmobEvent.onConnectListener(){
    @Override public void connectSuccessful(    User user){
      BmobIM.getInstance().updateUserInfo(new BmobIMUserInfo(user.getObjectId(),user.getUsername(),null));
      checkConversations(mSendToUsername,true);
    }
    @Override public void connectFailed(    String error){
      toast(error);
    }
  }
);
}"
39727,"@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_map);
  ButterKnife.bind(this);
  checkConnect(this);
  List<BmobIMConversation> list=BmobIM.getInstance().loadAllConversation();
  if (null != list) {
    mIMConversations.addAll(list);
  }
  User user=BmobUser.getCurrentUser(User.class);
  mSendToUsername=user.getContact().get(0).getUsername();
  checkConversations(mSendToUsername,true);
  initLocation();
  mMapView.onCreate(savedInstanceState);
  init();
  checkLocationPermission();
  EventBus.getDefault().register(this);
}","@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_map);
  ButterKnife.bind(this);
  BmobIM.getInstance().setOnConnectStatusChangeListener(new ConnectStatusChangeListener(){
    @Override public void onChange(    ConnectionStatus status){
      Toast.makeText(MapActivity.this,status.getMsg(),Toast.LENGTH_SHORT).show();
      L.i(BmobIM.getInstance().getCurrentStatus().getMsg());
      if (status.equals(ConnectionStatus.DISCONNECT)) {
        checkConnect();
      }
 else       if (status.equals(ConnectionStatus.NETWORK_UNAVAILABLE)) {
        toast(""String_Node_Str"");
      }
    }
  }
);
  List<BmobIMConversation> list=BmobIM.getInstance().loadAllConversation();
  if (null != list) {
    mIMConversations.addAll(list);
  }
  initLocation();
  mMapView.onCreate(savedInstanceState);
  init();
  checkLocationPermission();
  EventBus.getDefault().register(this);
}"
39728,"@Override public void onChange(ConnectionStatus status){
  Toast.makeText(context,status.getMsg(),Toast.LENGTH_SHORT).show();
  L.i(BmobIM.getInstance().getCurrentStatus().getMsg());
}","@Override public void onChange(ConnectionStatus status){
  Toast.makeText(MapActivity.this,status.getMsg(),Toast.LENGTH_SHORT).show();
  L.i(BmobIM.getInstance().getCurrentStatus().getMsg());
  if (status.equals(ConnectionStatus.DISCONNECT)) {
    checkConnect();
  }
 else   if (status.equals(ConnectionStatus.NETWORK_UNAVAILABLE)) {
    toast(""String_Node_Str"");
  }
}"
39729,"private void sendToChildrenLocation(final String address,final LatLng latLng){
  BmobIMLocationMessage message=new BmobIMLocationMessage();
  message.setAddress(address);
  message.setLatitude(latLng.latitude);
  message.setLongitude(latLng.longitude);
  mConversationManager.sendMessage(message,new MessageSendListener(){
    @Override public void done(    BmobIMMessage bmobIMMessage,    BmobException e){
      if (e != null) {
        L.i(e.getMessage());
      }
 else {
        L.i(""String_Node_Str"" + address);
        L.i(""String_Node_Str"" + latLng.latitude);
        L.i(""String_Node_Str"" + latLng.longitude);
      }
    }
  }
);
}","private void sendToChildrenLocation(final String address,final LatLng latLng){
  BmobIMLocationMessage message=new BmobIMLocationMessage();
  message.setAddress(address);
  message.setLatitude(latLng.latitude);
  message.setLongitude(latLng.longitude);
  mConversationManager.sendMessage(message,new MessageSendListener(){
    @Override public void done(    BmobIMMessage bmobIMMessage,    BmobException e){
      if (e != null) {
        L.i(e.getMessage());
      }
 else {
        L.i(""String_Node_Str"");
        L.i(""String_Node_Str"" + address);
        L.i(""String_Node_Str"" + latLng.latitude);
        L.i(""String_Node_Str"" + latLng.longitude);
      }
    }
  }
);
}"
39730,"public void checkConnect(){
  mSendToUsername=BmobUser.getCurrentUser(User.class).getContact().get(0).getUsername();
  BmobUtil.connect(BmobUser.getCurrentUser(User.class),new BmobEvent.onConnectListener(){
    @Override public void connectSuccessful(    User user){
      BmobIM.getInstance().updateUserInfo(new BmobIMUserInfo(user.getObjectId(),user.getUsername(),null));
      checkConversations(mSendToUsername,true);
    }
    @Override public void connectFailed(    String error){
      toast(error);
    }
  }
);
}","public void checkConnect(){
  mSendToUsername=BmobUser.getCurrentUser(User.class).getContact().get(0).getUsername();
  BmobUtil.connect(BmobUser.getCurrentUser(User.class),new BmobEvent.onConnectListener(){
    @Override public void connectSuccessful(    User user){
      BmobIM.getInstance().updateUserInfo(new BmobIMUserInfo(user.getObjectId(),user.getUsername(),null));
      checkConversations(mSendToUsername,true);
    }
    @Override public void connectFailed(    String error){
      toast(error);
    }
  }
);
  BmobIM.getInstance().setOnConnectStatusChangeListener(new ConnectStatusChangeListener(){
    @Override public void onChange(    ConnectionStatus status){
      toast(status.getMsg());
      L.i(BmobIM.getInstance().getCurrentStatus().getMsg());
    }
  }
);
}"
39731,"@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_map);
  ButterKnife.bind(this);
  BmobIM.getInstance().setOnConnectStatusChangeListener(new ConnectStatusChangeListener(){
    @Override public void onChange(    ConnectionStatus status){
      Toast.makeText(MapActivity.this,status.getMsg(),Toast.LENGTH_SHORT).show();
      L.i(BmobIM.getInstance().getCurrentStatus().getMsg());
      if (status.equals(ConnectionStatus.DISCONNECT)) {
        checkConnect();
      }
 else       if (status.equals(ConnectionStatus.NETWORK_UNAVAILABLE)) {
        toast(""String_Node_Str"");
      }
    }
  }
);
  List<BmobIMConversation> list=BmobIM.getInstance().loadAllConversation();
  if (null != list) {
    mIMConversations.addAll(list);
  }
  initLocation();
  mMapView.onCreate(savedInstanceState);
  init();
  checkLocationPermission();
  EventBus.getDefault().register(this);
}","@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_map);
  ButterKnife.bind(this);
  checkConnect();
  List<BmobIMConversation> list=BmobIM.getInstance().loadAllConversation();
  if (null != list) {
    mIMConversations.addAll(list);
  }
  initLocation();
  mMapView.onCreate(savedInstanceState);
  init();
  checkLocationPermission();
  EventBus.getDefault().register(this);
}"
39732,"@Override public void onChange(ConnectionStatus status){
  Toast.makeText(MapActivity.this,status.getMsg(),Toast.LENGTH_SHORT).show();
  L.i(BmobIM.getInstance().getCurrentStatus().getMsg());
  if (status.equals(ConnectionStatus.DISCONNECT)) {
    checkConnect();
  }
 else   if (status.equals(ConnectionStatus.NETWORK_UNAVAILABLE)) {
    toast(""String_Node_Str"");
  }
}","@Override public void onChange(ConnectionStatus status){
  toast(status.getMsg());
  L.i(BmobIM.getInstance().getCurrentStatus().getMsg());
}"
39733,"private void processCustomMessage(BmobIMMessage message,MessageEvent event){
  String type=message.getMsgType();
  String client=BmobUser.getCurrentUser(User.class).getClient();
  if (type.equals(SMSMessage.SMS) && client.equals(User.CHILDREN)) {
    Toast.makeText(mContext,message.getContent(),Toast.LENGTH_LONG).show();
    L.i(event.getConversation().getConversationTitle() + ""String_Node_Str"");
    SMS sms=SMSMessage.convert(message);
    mSmsDao.insert(sms);
    String s=""String_Node_Str"" + sms.getTime() + ""String_Node_Str""+ ""String_Node_Str""+ sms.getAddress()+ ""String_Node_Str""+ ""String_Node_Str""+ sms.getContent()+ ""String_Node_Str""+ ""String_Node_Str""+ sms.getProbability()+ ""String_Node_Str"";
    L.i(s);
    L.i(""String_Node_Str"" + mSmsDao.queryBuilder().build().list().size());
    showSMSNotification(event,sms);
  }
 else   if (type.equals(BpmMessage.BPM) && client.equals(User.CHILDREN)) {
    Toast.makeText(mContext,message.getContent(),Toast.LENGTH_LONG).show();
    L.i(event.getConversation().getConversationTitle() + ""String_Node_Str"");
    Bpm bpm=BpmMessage.convert(message);
    mBpmDao.insert(bpm);
    String s=""String_Node_Str"" + bpm.getTime() + ""String_Node_Str""+ ""String_Node_Str""+ bpm.getBpm()+ ""String_Node_Str""+ ""String_Node_Str""+ bpm.getDescription()+ ""String_Node_Str"";
    L.i(s);
    L.i(""String_Node_Str"" + mBpmDao.queryBuilder().build().list().size());
    showBpmNotification(event,bpm);
  }
 else   if ((type.equals(ShareMapMessage.MAP) && client.equals(User.PARENTS)) && client.equals(User.PARENTS)) {
    EventBus.getDefault().post(message.getContent());
  }
  L.i(getCurrentUser(User.class).getUsername() + ""String_Node_Str"" + type+ ""String_Node_Str""+ client+ ""String_Node_Str""+ message.getContent());
}","private void processCustomMessage(BmobIMMessage message,MessageEvent event){
  String type=message.getMsgType();
  String client=BmobUser.getCurrentUser(User.class).getClient();
  if (type.equals(SMSMessage.SMS) && client.equals(User.CHILDREN)) {
    Toast.makeText(mContext,message.getContent(),Toast.LENGTH_LONG).show();
    L.i(event.getConversation().getConversationTitle() + ""String_Node_Str"");
    SMS sms=SMSMessage.convert(message);
    mSmsDao.insert(sms);
    String s=""String_Node_Str"" + sms.getTime() + ""String_Node_Str""+ ""String_Node_Str""+ sms.getAddress()+ ""String_Node_Str""+ ""String_Node_Str""+ sms.getContent()+ ""String_Node_Str""+ ""String_Node_Str""+ sms.getProbability()+ ""String_Node_Str"";
    L.i(s);
    L.i(""String_Node_Str"" + mSmsDao.queryBuilder().build().list().size());
    showSMSNotification(event,sms);
  }
 else   if (type.equals(BpmMessage.BPM) && client.equals(User.CHILDREN)) {
    Toast.makeText(mContext,message.getContent(),Toast.LENGTH_LONG).show();
    L.i(event.getConversation().getConversationTitle() + ""String_Node_Str"");
    Bpm bpm=BpmMessage.convert(message);
    mBpmDao.insert(bpm);
    String s=""String_Node_Str"" + bpm.getTime() + ""String_Node_Str""+ ""String_Node_Str""+ bpm.getBpm()+ ""String_Node_Str""+ ""String_Node_Str""+ bpm.getDescription()+ ""String_Node_Str"";
    L.i(s);
    L.i(""String_Node_Str"" + mBpmDao.queryBuilder().build().list().size());
    showBpmNotification(event,bpm);
  }
 else   if (type.equals(ShareMapMessage.MAP) && client.equals(User.PARENTS)) {
    EventBus.getDefault().post(message.getContent());
  }
 else   if (type.equals(LocationMessage.LOC) && client.equals(User.CHILDREN)) {
    Location location=LocationMessage.convert(message);
    L.i(""String_Node_Str"" + location.toString());
    EventBus.getDefault().post(location);
  }
  L.i(getCurrentUser(User.class).getUsername() + ""String_Node_Str"" + type+ ""String_Node_Str""+ client+ ""String_Node_Str""+ message.getContent());
}"
39734,"private void processSDKMessage(BmobIMMessage msg,MessageEvent event){
  L.i(""String_Node_Str"");
  if (msg.getMsgType().equals(BmobIMMessageType.LOCATION.getType())) {
    L.i(""String_Node_Str"");
    BmobIMLocationMessage locationMessage=BmobIMLocationMessage.buildFromDB(msg);
    EventBus.getDefault().post(locationMessage);
  }
 else {
    EventBus.getDefault().post(event);
  }
}","private void processSDKMessage(BmobIMMessage msg,MessageEvent event){
  L.i(""String_Node_Str"");
  EventBus.getDefault().post(event);
}"
39735,"private void sendToCloseShareMap(){
  ShareMapMessage message=new ShareMapMessage();
  message.setContent(ShareMapMessage.CLOSE);
  mConversationManager.sendMessage(message,new MessageSendListener(){
    @Override public void done(    BmobIMMessage bmobIMMessage,    BmobException e){
      if (null == e) {
        toast(""String_Node_Str"");
      }
 else {
        toast(e.getMessage());
        L.i(""String_Node_Str"",e.getMessage());
      }
    }
  }
);
}","private void sendToCloseShareMap(){
  ShareMapMessage message=new ShareMapMessage();
  message.setContent(ShareMapMessage.CLOSE);
  mConversationManager.sendMessage(message,new MessageSendListener(){
    @Override public void done(    BmobIMMessage bmobIMMessage,    BmobException e){
      if (null == e) {
        toast(""String_Node_Str"");
      }
 else {
        toast(e.getMessage());
        L.i(""String_Node_Str"" + e.getMessage());
      }
    }
  }
);
}"
39736,"public void checkConnect(){
  mSendToUsername=BmobUser.getCurrentUser(User.class).getContact().get(0).getUsername();
  BmobUtil.connect(BmobUser.getCurrentUser(User.class),new BmobEvent.onConnectListener(){
    @Override public void connectSuccessful(    User user){
      BmobIM.getInstance().updateUserInfo(new BmobIMUserInfo(user.getObjectId(),user.getUsername(),null));
      checkConversations(mSendToUsername,true);
    }
    @Override public void connectFailed(    String error){
      toast(error);
    }
  }
);
  BmobIM.getInstance().setOnConnectStatusChangeListener(new ConnectStatusChangeListener(){
    @Override public void onChange(    ConnectionStatus status){
      toast(status.getMsg());
      L.i(BmobIM.getInstance().getCurrentStatus().getMsg());
    }
  }
);
}","public void checkConnect(){
  mSendToUsername=BmobUser.getCurrentUser(User.class).getContact().get(0).getUsername();
  L.i(""String_Node_Str"" + mSendToUsername);
  BmobUtil.connect(BmobUser.getCurrentUser(User.class),new BmobEvent.onConnectListener(){
    @Override public void connectSuccessful(    User user){
      BmobIM.getInstance().updateUserInfo(new BmobIMUserInfo(user.getObjectId(),user.getUsername(),null));
      checkConversations(mSendToUsername,true);
    }
    @Override public void connectFailed(    String error){
      toast(error);
    }
  }
);
  BmobIM.getInstance().setOnConnectStatusChangeListener(new ConnectStatusChangeListener(){
    @Override public void onChange(    ConnectionStatus status){
      toast(status.getMsg());
      L.i(BmobIM.getInstance().getCurrentStatus().getMsg());
    }
  }
);
}"
39737,"@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_map);
  ButterKnife.bind(this);
  checkConnect();
  List<BmobIMConversation> list=BmobIM.getInstance().loadAllConversation();
  if (null != list) {
    mIMConversations.addAll(list);
  }
  initLocation();
  mMapView.onCreate(savedInstanceState);
  init();
  checkLocationPermission();
  EventBus.getDefault().register(this);
}","@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_map);
  ButterKnife.bind(this);
  List<BmobIMConversation> list=BmobIM.getInstance().loadAllConversation();
  if (null != list) {
    mIMConversations.addAll(list);
  }
  checkConnect();
  initLocation();
  mMapView.onCreate(savedInstanceState);
  init();
  checkLocationPermission();
  EventBus.getDefault().register(this);
}"
39738,"@OnClick({R2.id.action_locate,R2.id.action_settings,R2.id.action_reminder}) public void onViewClicked(View view){
  int id=view.getId();
  if (id == R.id.action_locate) {
    toast(""String_Node_Str"");
  }
 else   if (id == R.id.action_settings) {
    startActivity(new Intent(this,SettingsActivity.class));
  }
 else   if (id == R.id.action_reminder) {
    startActivity(new Intent(this,ReminderActivity.class));
  }
  mFloatingActionsMenu.toggle();
}","@OnClick({R2.id.action_locate,R2.id.action_settings,R2.id.action_reminder}) public void onViewClicked(View view){
  int id=view.getId();
  if (id == R.id.action_locate) {
    checkConversations(mSendToUsername,true);
  }
 else   if (id == R.id.action_settings) {
    startActivity(new Intent(this,SettingsActivity.class));
  }
 else   if (id == R.id.action_reminder) {
    startActivity(new Intent(this,ReminderActivity.class));
  }
  mFloatingActionsMenu.toggle();
}"
39739,"private void checkConversations(String username,final boolean isStart){
  if (null != mIMConversations && !mIMConversations.isEmpty()) {
    for (    BmobIMConversation conversationEntrance : mIMConversations) {
      if (conversationEntrance.getConversationTitle().equals(username)) {
        mConversationManager=BmobIMConversation.obtain(BmobIMClient.getInstance(),conversationEntrance);
        if (isStart)         sendToOpenSharedMap();
 else         sendToCloseShareMap();
      }
    }
  }
 else {
    BmobUtil.query(username,new BmobEvent.onQueryListener(){
      @Override public boolean beforeQuery(){
        return true;
      }
      @Override public void querySuccessful(      final List<User> list){
        BmobUtil.connect(list.get(0),new BmobEvent.onConnectListener(){
          @Override public void connectSuccessful(          User user){
            BmobIMUserInfo info=new BmobIMUserInfo(user.getObjectId(),user.getUsername(),null);
            BmobIMConversation conversationEntrance=BmobIM.getInstance().startPrivateConversation(info,null);
            mIMConversations.add(conversationEntrance);
            mConversationManager=BmobIMConversation.obtain(BmobIMClient.getInstance(),conversationEntrance);
            if (isStart)             sendToOpenSharedMap();
 else             sendToCloseShareMap();
          }
          @Override public void connectFailed(          String error){
            toast(error);
          }
        }
);
      }
      @Override public void queryFailed(      BmobException e){
        toast(e.getMessage());
      }
    }
);
  }
}","private void checkConversations(String username,final boolean isStart){
  if (null != mIMConversations && !mIMConversations.isEmpty()) {
    L.i(""String_Node_Str"");
    for (    BmobIMConversation conversationEntrance : mIMConversations) {
      if (conversationEntrance.getConversationTitle().equals(username)) {
        mConversationManager=BmobIMConversation.obtain(BmobIMClient.getInstance(),conversationEntrance);
        if (isStart)         sendToOpenSharedMap();
 else         sendToCloseShareMap();
      }
    }
  }
 else {
    BmobUtil.query(username,new BmobEvent.onQueryListener(){
      @Override public boolean beforeQuery(){
        return true;
      }
      @Override public void querySuccessful(      final List<User> list){
        BmobUtil.connect(list.get(0),new BmobEvent.onConnectListener(){
          @Override public void connectSuccessful(          User user){
            BmobIMUserInfo info=new BmobIMUserInfo(user.getObjectId(),user.getUsername(),null);
            BmobIMConversation conversationEntrance=BmobIM.getInstance().startPrivateConversation(info,null);
            mIMConversations.add(conversationEntrance);
            mConversationManager=BmobIMConversation.obtain(BmobIMClient.getInstance(),conversationEntrance);
            if (isStart)             sendToOpenSharedMap();
 else             sendToCloseShareMap();
          }
          @Override public void connectFailed(          String error){
            toast(error);
          }
        }
);
      }
      @Override public void queryFailed(      BmobException e){
        toast(e.getMessage());
      }
    }
);
  }
}"
39740,"@Override public void done(BmobIMMessage bmobIMMessage,BmobException e){
  if (null == e) {
    toast(""String_Node_Str"");
  }
 else {
    toast(e.getMessage());
    L.i(""String_Node_Str"",e.getMessage());
  }
}","@Override public void done(BmobIMMessage bmobIMMessage,BmobException e){
  if (null == e) {
    toast(""String_Node_Str"");
  }
 else {
    toast(e.getMessage());
    L.i(""String_Node_Str"" + e.getMessage());
  }
}"
39741,"private void sendToOpenSharedMap(){
  ShareMapMessage message=new ShareMapMessage();
  message.setContent(ShareMapMessage.OPEN);
  mConversationManager.sendMessage(message,new MessageSendListener(){
    @Override public void done(    BmobIMMessage bmobIMMessage,    BmobException e){
      if (null == e) {
        toast(""String_Node_Str"");
      }
 else {
        toast(e.getMessage());
        L.i(""String_Node_Str"",e.getMessage());
      }
    }
  }
);
}","private void sendToOpenSharedMap(){
  ShareMapMessage message=new ShareMapMessage();
  message.setContent(ShareMapMessage.OPEN);
  mConversationManager.sendMessage(message,new MessageSendListener(){
    @Override public void done(    BmobIMMessage bmobIMMessage,    BmobException e){
      if (null == e) {
        toast(""String_Node_Str"");
      }
 else {
        toast(e.getMessage());
        L.i(""String_Node_Str"" + e.getMessage());
      }
    }
  }
);
}"
39742,"@Override public void onCreate(){
  super.onCreate();
  BmobAPI.init(this,new IMMessageHandler(this));
  if (BuildConfig.DEBUG) {
    ARouter.openLog();
    ARouter.openDebug();
  }
  ARouter.init(this);
  L.Debug=true;
  XFYun.init(this);
  GreenDaoConfig.getInstance().init(this);
}","@Override public void onCreate(){
  super.onCreate();
  if (BuildConfig.DEBUG) {
    ARouter.openLog();
    ARouter.openDebug();
  }
  ARouter.init(this);
  L.Debug=true;
  XFYun.init(this);
  GreenDaoConfig.getInstance().init(this);
  BmobAPI.init(this,new IMMessageHandler(this));
}"
39743,"/** 
 * 注册消息接收时间
 * @param event
 */
@Subscribe(sticky=true) public void onHandleMessageEvent(MessageEvent event){
  L.i(""String_Node_Str"");
  handleMessage(event);
}","/** 
 * 注册消息接收时间
 * @param event
 */
@Subscribe public void onHandleMessageEvent(MessageEvent event){
  L.i(""String_Node_Str"");
  handleMessage(event);
}"
39744,"public static SmsFragment newInstance(){
  return Holder.sInstance;
}","public static SmsFragment newInstance(){
  return new SmsFragment();
}"
39745,"@Override public void onViewCreated(View view,@Nullable Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  mSmsTextView=(TextView)view.findViewById(R.id.sms_text_view);
  RequestPermissions.requestRuntimePermission(getActivity(),new String[]{Manifest.permission.RECEIVE_SMS},new RequestPermissions.OnRequestPermissionsListener(){
    @Override public void onGranted(){
    }
    @Override public void onDenied(    List<String> deniedPermission){
    }
  }
);
  EventBus.getDefault().register(this);
}","@Override public void onViewCreated(View view,@Nullable Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  mSmsTextView=(TextView)view.findViewById(R.id.sms_text_view);
  RequestPermissions.requestRuntimePermission(getActivity(),new String[]{Manifest.permission.RECEIVE_SMS},new RequestPermissions.OnRequestPermissionsListener(){
    @Override public void onGranted(){
    }
    @Override public void onDenied(    List<String> deniedPermission){
    }
  }
);
  if (!EventBus.getDefault().isRegistered(this)) {
    EventBus.getDefault().register(this);
  }
}"
39746,"public SnsInfo parseTimelineXML(String xmlResult) throws Throwable {
  SnsInfo currentSns=new SnsInfo();
  Pattern userIdPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
  Pattern contentPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
  Pattern mediaPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
  Pattern mediaTokenPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
  Pattern mediaIdxPattern=Pattern.compile(""String_Node_Str"");
  Pattern timestampPattern=Pattern.compile(""String_Node_Str"");
  Matcher userIdMatcher=userIdPattern.matcher(xmlResult);
  Matcher contentMatcher=contentPattern.matcher(xmlResult);
  Matcher mediaMatcher=mediaPattern.matcher(xmlResult);
  Matcher mediaTokenMatcher=mediaTokenPattern.matcher(xmlResult);
  Matcher mediaIdxMatcher=mediaIdxPattern.matcher(xmlResult);
  Matcher timestampMatcher=timestampPattern.matcher(xmlResult);
  currentSns.id=getTimelineId(xmlResult);
  currentSns.rawXML=xmlResult;
  Log.d(""String_Node_Str"",xmlResult);
  if (timestampMatcher.find()) {
    currentSns.timestamp=Integer.parseInt(timestampMatcher.group(1));
  }
  if (userIdMatcher.find()) {
    currentSns.authorId=userIdMatcher.group(1);
  }
  if (contentMatcher.find()) {
    currentSns.content=contentMatcher.group(1);
  }
  while (mediaMatcher.find()) {
    boolean flag=true;
    for (int i=0; i < currentSns.mediaList.size(); i++) {
      if (currentSns.mediaList.get(i).equals(mediaMatcher.group(1))) {
        flag=false;
        break;
      }
    }
    if (flag) {
      String url=mediaMatcher.group(1);
    }
  }
  while (mediaTokenMatcher.find()) {
    boolean flag=true;
    if (flag) {
      String url=mediaTokenMatcher.group(1);
      String urltoken=mediaTokenMatcher.group(2);
      String urlidx=mediaTokenMatcher.group(3);
      String urlenc=mediaTokenMatcher.group(4);
      String urlenckey=mediaTokenMatcher.group(3);
      Log.d(""String_Node_Str"",""String_Node_Str"" + url + ""String_Node_Str""+ urltoken+ ""String_Node_Str"");
      Log.d(""String_Node_Str"",""String_Node_Str"" + urlidx + ""String_Node_Str""+ urlenc+ ""String_Node_Str""+ urlenckey);
      url=url + ""String_Node_Str"" + urltoken+ ""String_Node_Str""+ ""String_Node_Str""+ urlenc+ ""String_Node_Str""+ urlenckey;
      if (ModelClass2 == null)       ModelClass2=ModelClass.newInstance();
      Object JpegObject2=JpegObject.newInstance();
      String path=Config.EXT_DIR + ""String_Node_Str"";
      Method loadMethod=ModelClass.getMethod(""String_Node_Str"",String.class);
      Method decodeAsBitmapMethod=JpegObject.getMethod(""String_Node_Str"",String.class);
      if (!inited) {
        try {
          loadMethod.invoke(ModelClass,""String_Node_Str"");
          loadMethod.invoke(ModelClass,""String_Node_Str"");
          loadMethod.invoke(ModelClass,""String_Node_Str"");
          loadMethod.invoke(ModelClass,""String_Node_Str"");
          loadMethod.invoke(ModelClass,""String_Node_Str"");
          loadMethod.invoke(ModelClass,""String_Node_Str"");
        }
 catch (        Exception e) {
          Log.d(""String_Node_Str"",""String_Node_Str"");
        }
      }
      Method isProgressive=JpegObject.getMethod(""String_Node_Str"",String.class);
      Method IsJpegFile=JpegObject.getMethod(""String_Node_Str"",String.class);
      if ((boolean)IsJpegFile.invoke(ModelClass,Config.EXT_DIR + ""String_Node_Str"")) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        if ((boolean)isProgressive.invoke(ModelClass,path))         Log.d(""String_Node_Str"",""String_Node_Str"");
 else         Log.d(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        Log.d(""String_Node_Str"",""String_Node_Str"");
      }
      if ((boolean)IsJpegFile.invoke(ModelClass,Config.EXT_DIR + ""String_Node_Str"")) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        if ((boolean)isProgressive.invoke(ModelClass,path))         Log.d(""String_Node_Str"",""String_Node_Str"");
 else         Log.d(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        Log.d(""String_Node_Str"",""String_Node_Str"");
      }
      Method decodeFileMethod=null;
      Method decodeFileMethod2=null;
      Method nativeCheckIsImageLegalMethod=null;
      BitmapFactory.Options options=new BitmapFactory.Options();
      Method[] methods=ModelClass.getDeclaredMethods();
      String[] initlib=new String[]{Config.EXT_DIR + ""String_Node_Str""};
      for (      Method method : methods) {
        method.setAccessible(true);
        if (method.getName() == ""String_Node_Str"")         decodeFileMethod=method;
        if (method.getName() == ""String_Node_Str"")         decodeFileMethod2=method;
        if (""String_Node_Str"" == method.getName() && (!inited))         if ((boolean)method.invoke(ModelClass,new Object[]{initlib})) {
          Log.d(""String_Node_Str"",""String_Node_Str"");
          inited=true;
        }
        if (""String_Node_Str"" == method.getName())         nativeCheckIsImageLegalMethod=method;
      }
      inited=true;
      methods=sfsObject.getDeclaredMethods();
      Method sfsread=null;
      for (      Method method : methods) {
        method.setAccessible(true);
        if (method.getName() == ""String_Node_Str"")         sfsread=method;
      }
      File file1=new File(path);
      int filesize=(int)file1.length();
      byte[] fileData=new byte[filesize];
      try {
        InputStream fileIutputStream=new FileInputStream(file1);
        int read=fileIutputStream.read(fileData,0,filesize);
        if (read == -1) {
        }
        fileIutputStream.close();
      }
 catch (      Throwable e) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
      }
      String msg=""String_Node_Str"";
      for (int i=0; i < 30; i++) {
        msg+=fileData[i] + ""String_Node_Str"";
      }
      Log.d(""String_Node_Str"",""String_Node_Str"" + msg);
      msg=""String_Node_Str"";
      for (int i=0; i < 30; i++) {
        msg+=fileData[i] + ""String_Node_Str"";
      }
      Log.d(""String_Node_Str"",""String_Node_Str"" + msg);
      File file4=new File(path);
      InputStream fileIutputStream4=new FileInputStream(file4);
      File file2=new File(path);
      InputStream fileIutputStream2=new FileInputStream(file2);
      int re=(int)nativeCheckIsImageLegalMethod.invoke(ModelClass,fileIutputStream2,new byte[8192],null);
      Log.d(""String_Node_Str"",""String_Node_Str"" + re);
      InputStream inputStream5=null;
      Method FileOp_openread=sfsObject.getMethod(""String_Node_Str"",String.class);
      inputStream5=(InputStream)FileOp_openread.invoke(ModelClass,Config.EXT_DIR + ""String_Node_Str"");
      Bitmap bitmap=(Bitmap)decodeFileMethod.invoke(ModelClass,fileData,0,(int)file1.length(),null,null,new int[0]);
      if (bitmap != null)       Log.d(""String_Node_Str"",""String_Node_Str"" + bitmap.getByteCount());
      if (bitmap != null) {
        Log.d(""String_Node_Str"",""String_Node_Str"" + bitmap.getByteCount());
        File file=new File(path + ""String_Node_Str"");
        if (file.exists()) {
        }
        try {
          OutputStream fileOutputStream=new FileOutputStream(file);
          bitmap.compress(Bitmap.CompressFormat.PNG,100,fileOutputStream);
          fileOutputStream.close();
        }
 catch (        Throwable e) {
          Log.d(""String_Node_Str"",""String_Node_Str"");
        }
      }
      currentSns.mediaList.add(url);
    }
  }
  while (mediaIdxMatcher.find()) {
    boolean flag=true;
    if (flag) {
      String url=mediaIdxMatcher.group(1);
      Log.d(""String_Node_Str"",""String_Node_Str"" + url);
    }
  }
  return currentSns;
}","public SnsInfo parseTimelineXML(String xmlResult) throws Throwable {
  SnsInfo currentSns=new SnsInfo();
  Pattern userIdPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
  Pattern contentPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
  Pattern mediaPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
  Pattern mediaTokenPattern=Pattern.compile(""String_Node_Str"",Pattern.DOTALL);
  Pattern mediaIdxPattern=Pattern.compile(""String_Node_Str"");
  Pattern timestampPattern=Pattern.compile(""String_Node_Str"");
  Matcher userIdMatcher=userIdPattern.matcher(xmlResult);
  Matcher contentMatcher=contentPattern.matcher(xmlResult);
  Matcher mediaMatcher=mediaPattern.matcher(xmlResult);
  Matcher mediaTokenMatcher=mediaTokenPattern.matcher(xmlResult);
  Matcher mediaIdxMatcher=mediaIdxPattern.matcher(xmlResult);
  Matcher timestampMatcher=timestampPattern.matcher(xmlResult);
  currentSns.id=getTimelineId(xmlResult);
  currentSns.rawXML=xmlResult;
  Log.d(""String_Node_Str"",xmlResult);
  if (timestampMatcher.find()) {
    currentSns.timestamp=Integer.parseInt(timestampMatcher.group(1));
  }
  if (userIdMatcher.find()) {
    currentSns.authorId=userIdMatcher.group(1);
  }
  if (contentMatcher.find()) {
    currentSns.content=contentMatcher.group(1);
  }
  while (mediaMatcher.find()) {
    boolean flag=true;
    for (int i=0; i < currentSns.mediaList.size(); i++) {
      if (currentSns.mediaList.get(i).equals(mediaMatcher.group(1))) {
        flag=false;
        break;
      }
    }
    if (flag) {
      String url=mediaMatcher.group(1);
    }
  }
  while (mediaTokenMatcher.find()) {
    boolean flag=true;
    if (flag) {
      String url=mediaTokenMatcher.group(1);
      String urltoken=mediaTokenMatcher.group(2);
      String urlidx=mediaTokenMatcher.group(3);
      String urlenc=mediaTokenMatcher.group(4);
      String urlenckey=mediaTokenMatcher.group(3);
      Log.d(""String_Node_Str"",""String_Node_Str"" + url + ""String_Node_Str""+ urltoken+ ""String_Node_Str"");
      Log.d(""String_Node_Str"",""String_Node_Str"" + urlidx + ""String_Node_Str""+ urlenc+ ""String_Node_Str""+ urlenckey);
      url=url + ""String_Node_Str"" + urltoken+ ""String_Node_Str""+ ""String_Node_Str""+ urlenc+ ""String_Node_Str""+ urlenckey;
      if (ModelClass2 == null)       ModelClass2=ModelClass.newInstance();
      Object JpegObject2=JpegObject.newInstance();
      String path=Config.EXT_DIR + ""String_Node_Str"";
      Method loadMethod=ModelClass.getMethod(""String_Node_Str"",String.class);
      Method decodeAsBitmapMethod=JpegObject.getMethod(""String_Node_Str"",String.class);
      if (!inited) {
        try {
          loadMethod.invoke(ModelClass,""String_Node_Str"");
          loadMethod.invoke(ModelClass,""String_Node_Str"");
          loadMethod.invoke(ModelClass,""String_Node_Str"");
          loadMethod.invoke(ModelClass,""String_Node_Str"");
          loadMethod.invoke(ModelClass,""String_Node_Str"");
          loadMethod.invoke(ModelClass,""String_Node_Str"");
        }
 catch (        Exception e) {
          Log.d(""String_Node_Str"",""String_Node_Str"");
        }
      }
      Method isProgressive=JpegObject.getMethod(""String_Node_Str"",String.class);
      Method IsJpegFile=JpegObject.getMethod(""String_Node_Str"",String.class);
      if ((boolean)IsJpegFile.invoke(ModelClass,Config.EXT_DIR + ""String_Node_Str"")) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        if ((boolean)isProgressive.invoke(ModelClass,path))         Log.d(""String_Node_Str"",""String_Node_Str"");
 else         Log.d(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        Log.d(""String_Node_Str"",""String_Node_Str"");
      }
      if ((boolean)IsJpegFile.invoke(ModelClass,Config.EXT_DIR + ""String_Node_Str"")) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        if ((boolean)isProgressive.invoke(ModelClass,path))         Log.d(""String_Node_Str"",""String_Node_Str"");
 else         Log.d(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        Log.d(""String_Node_Str"",""String_Node_Str"");
      }
      Method decodeFileMethod=null;
      Method decodeFileMethod2=null;
      Method nativeCheckIsImageLegalMethod=null;
      BitmapFactory.Options options=new BitmapFactory.Options();
      Method[] methods=ModelClass.getDeclaredMethods();
      String[] initlib=new String[]{Config.EXT_DIR + ""String_Node_Str""};
      for (      Method method : methods) {
        method.setAccessible(true);
        if (method.getName() == ""String_Node_Str"")         decodeFileMethod=method;
        if (method.getName() == ""String_Node_Str"")         decodeFileMethod2=method;
        if (""String_Node_Str"" == method.getName() && (!inited))         if ((boolean)method.invoke(ModelClass,new Object[]{initlib})) {
          Log.d(""String_Node_Str"",""String_Node_Str"");
          inited=true;
        }
        if (""String_Node_Str"" == method.getName())         nativeCheckIsImageLegalMethod=method;
      }
      inited=true;
      methods=sfsObject.getDeclaredMethods();
      Method sfsread=null;
      for (      Method method : methods) {
        method.setAccessible(true);
        if (method.getName() == ""String_Node_Str"")         sfsread=method;
      }
      File file1=new File(path);
      int filesize=(int)file1.length();
      byte[] fileData=new byte[filesize];
      try {
        InputStream fileIutputStream=new FileInputStream(file1);
        int read=fileIutputStream.read(fileData,0,filesize);
        if (read == -1) {
        }
        fileIutputStream.close();
      }
 catch (      Throwable e) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
      }
      String msg=""String_Node_Str"";
      for (int i=0; i < 30; i++) {
        msg+=fileData[i] + ""String_Node_Str"";
      }
      Log.d(""String_Node_Str"",""String_Node_Str"" + msg);
      msg=""String_Node_Str"";
      for (int i=0; i < 30; i++) {
        msg+=fileData[i] + ""String_Node_Str"";
      }
      Log.d(""String_Node_Str"",""String_Node_Str"" + msg);
      File file4=new File(path);
      InputStream fileIutputStream4=new FileInputStream(file4);
      File file2=new File(path);
      InputStream fileIutputStream2=new FileInputStream(file2);
      int re=(int)nativeCheckIsImageLegalMethod.invoke(ModelClass,fileIutputStream2,new byte[8192],null);
      Log.d(""String_Node_Str"",""String_Node_Str"" + re);
      InputStream inputStream5=null;
      Method FileOp_openread=sfsObject.getMethod(""String_Node_Str"",String.class);
      inputStream5=(InputStream)FileOp_openread.invoke(ModelClass,Config.EXT_DIR + ""String_Node_Str"");
      Bitmap bitmap=(Bitmap)decodeFileMethod.invoke(ModelClass,fileData,0,(int)file1.length(),null,null,new int[0]);
      if (bitmap != null)       Log.d(""String_Node_Str"",""String_Node_Str"" + bitmap.getByteCount());
      if (bitmap != null) {
        Log.d(""String_Node_Str"",""String_Node_Str"" + bitmap.getByteCount());
        File file=new File(path + ""String_Node_Str"");
        if (file.exists()) {
        }
 else {
          try {
            OutputStream fileOutputStream=new FileOutputStream(file);
            bitmap.compress(Bitmap.CompressFormat.PNG,100,fileOutputStream);
            fileOutputStream.close();
          }
 catch (          Throwable e) {
            Log.d(""String_Node_Str"",""String_Node_Str"");
          }
        }
      }
      currentSns.mediaList.add(url);
    }
  }
  while (mediaIdxMatcher.find()) {
    boolean flag=true;
    if (flag) {
      String url=mediaIdxMatcher.group(1);
      Log.d(""String_Node_Str"",""String_Node_Str"" + url);
    }
  }
  return currentSns;
}"
39747,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  task=new Task(this.getApplicationContext());
  usernameFileEditText=(EditText)findViewById(R.id.username);
  if (Config.username.length() < 3)   Config.username=this.getApplicationContext().getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE).getString(""String_Node_Str"",""String_Node_Str"");
  if (Config.username.length() > 3) {
    usernameFileEditText.setText(Config.username);
  }
  setContentView(R.layout.activity_main);
  task.testRoot();
  Config.Context=this.getApplicationContext();
  ((Button)findViewById(R.id.launch_button)).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      usernameFileEditText=(EditText)findViewById(R.id.username);
      Config.username=usernameFileEditText.getText().toString();
      SharedPreferences.Editor editor=Config.Context.getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE).edit();
      editor.putString(""String_Node_Str"",Config.username);
      editor.commit();
      ((Button)findViewById(R.id.launch_button)).setText(R.string.exporting_sns);
      ((Button)findViewById(R.id.launch_button)).setEnabled(false);
      new RunningTask().execute();
    }
  }
);
  TextView descriptionHtmlTextView=(TextView)findViewById(R.id.description_html_textview);
  descriptionHtmlTextView.setMovementMethod(LinkMovementMethod.getInstance());
  descriptionHtmlTextView.setText(Html.fromHtml(getResources().getString(R.string.description_html)));
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  task=new Task(this.getApplicationContext());
  usernameFileEditText=(EditText)findViewById(R.id.username);
  if (Config.username.length() < 3)   Config.username=this.getApplicationContext().getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE).getString(""String_Node_Str"",""String_Node_Str"");
  if (Config.username.length() > 3 && Config.username != null) {
    CharSequence u=Config.username;
    Log.d(""String_Node_Str"",""String_Node_Str"" + u);
  }
  setContentView(R.layout.activity_main);
  task.testRoot();
  Config.Context=this.getApplicationContext();
  ((Button)findViewById(R.id.launch_button)).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      usernameFileEditText=(EditText)findViewById(R.id.username);
      Config.username=usernameFileEditText.getText().toString();
      SharedPreferences.Editor editor=Config.Context.getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE).edit();
      editor.putString(""String_Node_Str"",Config.username);
      editor.commit();
      ((Button)findViewById(R.id.launch_button)).setText(R.string.exporting_sns);
      ((Button)findViewById(R.id.launch_button)).setEnabled(false);
      new RunningTask().execute();
    }
  }
);
  TextView descriptionHtmlTextView=(TextView)findViewById(R.id.description_html_textview);
  descriptionHtmlTextView.setMovementMethod(LinkMovementMethod.getInstance());
  descriptionHtmlTextView.setText(Html.fromHtml(getResources().getString(R.string.description_html)));
}"
39748,"@GetMapping(""String_Node_Str"") List<Booking> bookingsByUser(@PathVariable UUID user){
  return view.currentBookings().filter(b -> b.getUserId() == user).collect(toList());
}","@GetMapping(""String_Node_Str"") List<Booking> bookingsByUser(@PathVariable UUID user){
  return view.currentBookings().filter(b -> b.getUserId().equals(user)).collect(toList());
}"
39749,"@Override public void onRobotFocusGained(QiContext qiContext){
  this.qiContext=qiContext;
  String textToSay=""String_Node_Str"";
  displayLine(textToSay,ConversationItemType.ROBOT_OUTPUT);
  Say say=SayBuilder.with(qiContext).withText(textToSay).build();
  say.run();
  startCounting();
}","@Override public void onRobotFocusGained(QiContext qiContext){
  this.qiContext=qiContext;
  String textToSay=""String_Node_Str"";
  displayLine(textToSay,ConversationItemType.ROBOT_OUTPUT);
  Say say=SayBuilder.with(qiContext).withText(textToSay).build();
  say.run();
}"
39750,"@Override public void consume(Future<Void> voidFuture) throws Throwable {
  setButtonText(""String_Node_Str"");
  if (voidFuture.hasError()) {
    Log.e(TAG,voidFuture.getErrorMessage());
  }
}","@Override public void consume(Future<Void> future) throws Throwable {
  if (future.hasError()) {
    String message=""String_Node_Str"";
    Log.e(TAG,message,future.getError());
    displayLine(message,ConversationItemType.ERROR_LOG);
  }
 else {
    String message=""String_Node_Str"";
    Log.i(TAG,message);
    displayLine(message,ConversationItemType.INFO_LOG);
  }
  setButtonText(getResources().getString(R.string.enforce_tablet_reachability));
  String textToSay=""String_Node_Str"";
  displayLine(textToSay,ConversationItemType.ROBOT_OUTPUT);
  Say say=SayBuilder.with(qiContext).withText(textToSay).build();
  say.run();
}"
39751,"@Override public void onStarted(){
  setButtonText(""String_Node_Str"");
}","@Override public void onStarted(){
  String infoLog=""String_Node_Str"";
  displayLine(infoLog,ConversationItemType.INFO_LOG);
}"
39752,"/** 
 * querybuilder is an inner private class that builds the query for the request based on the Map parameter args
 * @param args     Map containing the operator and the string ex: /games/
 * @param endpoint The endpoint for which the arguments should apply forex: /games/
 */
private String queryBuilder(Endpoint endpoint,Map<Operator,String> args){
  String ids, fields, expand, limit, offset, order, search, scroll, filter, query;
  ids=fields=expand=limit=offset=order=search=scroll=filter=query=""String_Node_Str"";
  Set<Operator> keySet=args.keySet();
  for (  Operator operator : keySet) {
switch (operator) {
case IDS:
      ids=args.get(Operator.IDS).replaceAll(""String_Node_Str"",""String_Node_Str"");
    break;
case FIELDS:
  fields=""String_Node_Str"" + args.get(Operator.FIELDS).replaceAll(""String_Node_Str"",""String_Node_Str"");
break;
case EXPAND:
expand=""String_Node_Str"" + args.get(Operator.EXPAND).replaceAll(""String_Node_Str"",""String_Node_Str"");
break;
case LIMIT:
limit=""String_Node_Str"" + args.get(Operator.LIMIT).replaceAll(""String_Node_Str"",""String_Node_Str"");
break;
case OFFSET:
offset=""String_Node_Str"" + args.get(Operator.OFFSET).replaceAll(""String_Node_Str"",""String_Node_Str"");
break;
case ORDER:
order=""String_Node_Str"" + args.get(Operator.ORDER).replaceAll(""String_Node_Str"",""String_Node_Str"");
break;
case SEARCH:
search=""String_Node_Str"" + args.get(Operator.SEARCH).replaceAll(""String_Node_Str"",""String_Node_Str"");
break;
case SCROLL:
scroll=""String_Node_Str"" + args.get(Operator.SCROLL).replaceAll(""String_Node_Str"",""String_Node_Str"");
break;
case FILTER:
filter=""String_Node_Str"" + args.get(Operator.FILTER).replaceAll(""String_Node_Str"",""String_Node_Str"");
break;
}
}
query=endpoint.toString().toLowerCase();
query+=""String_Node_Str"" + ids + search;
if (!fields.isEmpty() && !search.isEmpty()) {
query+=""String_Node_Str"" + fields;
}
 else if (!fields.isEmpty()) {
query+=""String_Node_Str"" + fields;
}
 else {
query+=""String_Node_Str"";
}
query+=filter + expand + order+ limit+ offset+ scroll;
Log.d(""String_Node_Str"",query);
return query;
}","/** 
 * querybuilder is an inner private class that builds the query for the request based on the Map parameter args
 * @param args     Map containing the operator and the string ex: /games/
 * @param endpoint The endpoint for which the arguments should apply forex: /games/
 */
private String queryBuilder(Endpoint endpoint,Map<Operator,String> args){
  String ids, fields, expand, limit, offset, order, search, scroll, filter, query;
  ids=fields=expand=limit=offset=order=search=scroll=filter=query=""String_Node_Str"";
  Set<Operator> keySet=args.keySet();
  for (  Operator operator : keySet) {
switch (operator) {
case IDS:
      ids=args.get(Operator.IDS).replaceAll(""String_Node_Str"",""String_Node_Str"");
    break;
case FIELDS:
  fields=""String_Node_Str"" + args.get(Operator.FIELDS).replaceAll(""String_Node_Str"",""String_Node_Str"");
break;
case EXPAND:
expand=""String_Node_Str"" + args.get(Operator.EXPAND).replaceAll(""String_Node_Str"",""String_Node_Str"");
break;
case LIMIT:
limit=""String_Node_Str"" + args.get(Operator.LIMIT).replaceAll(""String_Node_Str"",""String_Node_Str"");
break;
case OFFSET:
offset=""String_Node_Str"" + args.get(Operator.OFFSET).replaceAll(""String_Node_Str"",""String_Node_Str"");
break;
case ORDER:
order=""String_Node_Str"" + args.get(Operator.ORDER).replaceAll(""String_Node_Str"",""String_Node_Str"");
break;
case SEARCH:
search=""String_Node_Str"" + args.get(Operator.SEARCH).replaceAll(""String_Node_Str"",""String_Node_Str"");
break;
case SCROLL:
scroll=""String_Node_Str"" + args.get(Operator.SCROLL).replaceAll(""String_Node_Str"",""String_Node_Str"");
break;
case FILTER:
filter+=""String_Node_Str"" + args.get(Operator.FILTER).replaceAll(""String_Node_Str"",""String_Node_Str"");
break;
}
}
query=endpoint.toString().toLowerCase();
query+=""String_Node_Str"" + ids + search;
if (!fields.isEmpty() && !search.isEmpty()) {
query+=""String_Node_Str"" + fields;
}
 else if (!fields.isEmpty()) {
query+=""String_Node_Str"" + fields;
}
 else {
query+=""String_Node_Str"";
}
query+=filter + expand + order+ limit+ offset+ scroll;
Log.d(""String_Node_Str"",query);
return query;
}"
39753,"private void createCompressedImageWithExceptions(String image,String directoryPath,final Callback successCb,final Callback failureCb) throws IOException {
  File imageFile=new ImageCompress(this).setDestinationDirectoryPath(Environment.getExternalStorageDirectory().getPath()).compressToFile(new File(uriPath.getRealPathFromURI(Uri.parse(image))),directoryPath);
  if (imageFile != null) {
    WritableMap response=Arguments.createMap();
    response.putString(""String_Node_Str"",imageFile.getAbsolutePath());
    response.putString(""String_Node_Str"",Uri.fromFile(imageFile).toString());
    response.putString(""String_Node_Str"",imageFile.getName());
    response.putDouble(""String_Node_Str"",imageFile.length());
    successCb.invoke(response);
  }
 else {
    failureCb.invoke(""String_Node_Str"");
  }
}","private void createCompressedImageWithExceptions(String image,String directoryPath,final Callback successCb,final Callback failureCb) throws IOException {
  File imageFile=new ImageCompress(mContext).setDestinationDirectoryPath(Environment.getExternalStorageDirectory().getPath()).compressToFile(new File(uriPath.getRealPathFromURI(Uri.parse(image))),directoryPath);
  if (imageFile != null) {
    WritableMap response=Arguments.createMap();
    response.putString(""String_Node_Str"",imageFile.getAbsolutePath());
    response.putString(""String_Node_Str"",Uri.fromFile(imageFile).toString());
    response.putString(""String_Node_Str"",imageFile.getName());
    response.putDouble(""String_Node_Str"",imageFile.length());
    successCb.invoke(response);
  }
 else {
    failureCb.invoke(""String_Node_Str"");
  }
}"
39754,"private void createCustomCompressedImageWithExceptions(String image,String directoryPath,int maxWidth,int maxHeight,int quality,final Callback successCb,final Callback failureCb) throws IOException {
  File imageFile=new ImageCompress(this).setMaxWidth(maxWidth).setMaxHeight(maxHeight).setQuality(quality).setCompressFormat(Bitmap.CompressFormat.JPEG).setDestinationDirectoryPath(Environment.getExternalStorageDirectory().getPath()).compressToFile(new File(uriPath.getRealPathFromURI(Uri.parse(image))),directoryPath);
  if (imageFile != null) {
    WritableMap response=Arguments.createMap();
    response.putString(""String_Node_Str"",imageFile.getAbsolutePath());
    response.putString(""String_Node_Str"",Uri.fromFile(imageFile).toString());
    response.putString(""String_Node_Str"",imageFile.getName());
    response.putDouble(""String_Node_Str"",imageFile.length());
    successCb.invoke(response);
  }
 else {
    failureCb.invoke(""String_Node_Str"");
  }
}","private void createCustomCompressedImageWithExceptions(String image,String directoryPath,int maxWidth,int maxHeight,int quality,final Callback successCb,final Callback failureCb) throws IOException {
  File imageFile=new ImageCompress(mContext).setMaxWidth(maxWidth).setMaxHeight(maxHeight).setQuality(quality).setCompressFormat(Bitmap.CompressFormat.JPEG).setDestinationDirectoryPath(Environment.getExternalStorageDirectory().getPath()).compressToFile(new File(uriPath.getRealPathFromURI(Uri.parse(image))),directoryPath);
  if (imageFile != null) {
    WritableMap response=Arguments.createMap();
    response.putString(""String_Node_Str"",imageFile.getAbsolutePath());
    response.putString(""String_Node_Str"",Uri.fromFile(imageFile).toString());
    response.putString(""String_Node_Str"",imageFile.getName());
    response.putDouble(""String_Node_Str"",imageFile.length());
    successCb.invoke(response);
  }
 else {
    failureCb.invoke(""String_Node_Str"");
  }
}"
39755,"/** 
 * 构造方法
 * @param paramMap 参数Map
 */
public Params(Map<String,Object> paramMap){
  this.paramMap=paramMap;
  PropertiesUtil.Parser parser=PropertiesUtil.loadProps(ConfigHelper.getAppViewReplaceStrFileName());
  this.paramMap.putAll(parser.getMap());
}","/** 
 * 构造方法
 * @param paramMap 参数Map
 */
public Params(Map<String,Object> paramMap){
  this.paramMap=paramMap;
}"
39756,"/** 
 * 构造方法
 * @param path 视图路径
 */
public View(String path){
  this.path=path;
  dataModel=new HashMap<String,Object>();
}","/** 
 * 构造方法
 * @param path 视图路径
 */
public View(String path){
  this.path=path;
  dataModel=new HashMap<String,Object>();
  PropertiesUtil.Parser parser=PropertiesUtil.loadProps(ConfigHelper.getAppViewReplaceStrFileName());
  if (parser != null) {
    dataModel.putAll(parser.getMap());
  }
}"
39757,"/** 
 * 加载属性文件
 */
public static Parser loadProps(String fileName){
  Properties properties=null;
  InputStream inputStream=null;
  try {
    inputStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(fileName);
    if (inputStream == null) {
      throw new FileNotFoundException(fileName + ""String_Node_Str"");
    }
    properties=new Properties();
    properties.load(inputStream);
  }
 catch (  FileNotFoundException e) {
    LOGGER.error(fileName + ""String_Node_Str"",e);
  }
catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    if (inputStream != null) {
      try {
        inputStream.close();
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
  return new Parser(properties);
}","/** 
 * 加载属性文件
 */
public static Parser loadProps(String fileName){
  Properties properties=null;
  InputStream inputStream=null;
  try {
    inputStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(fileName);
    if (inputStream == null) {
      throw new FileNotFoundException(fileName + ""String_Node_Str"");
    }
    properties=new Properties();
    properties.load(inputStream);
  }
 catch (  FileNotFoundException e) {
    LOGGER.error(fileName + ""String_Node_Str"",e);
  }
catch (  IOException e) {
    LOGGER.error(""String_Node_Str"",e);
  }
 finally {
    if (inputStream != null) {
      try {
        inputStream.close();
      }
 catch (      IOException e) {
        LOGGER.error(""String_Node_Str"",e);
      }
    }
  }
  return properties == null ? null : new Parser(properties);
}"
39758,"/** 
 * 执行代理
 * @param proxyChain 代理链
 * @return 方法执行结果
 * @throws Throwable 抛出异常
 */
@Override public final Object doProxy(ProxyChain proxyChain) throws Throwable {
  Object result=null;
  Class<?> cls=proxyChain.getTargetClass();
  Method method=proxyChain.getTargetMethod();
  Object[] params=proxyChain.getTargetMethodParams();
  begin();
  try {
    if (intercept(cls,method,params)) {
      before(cls,method,params);
      result=proxyChain.doProxyChain();
      after(cls,method,params,result);
    }
 else {
      result=proxyChain.doProxyChain();
    }
  }
 catch (  Throwable throwable) {
    LOGGER.error(""String_Node_Str"",throwable);
    error(cls,method,params,throwable);
  }
 finally {
    end();
  }
  return result;
}","/** 
 * 执行代理
 * @param proxyChain 代理链
 * @return 方法执行结果
 * @throws Throwable 抛出异常
 */
@Override public final Object doProxy(ProxyChain proxyChain) throws Throwable {
  Object result=null;
  HttpServletResponse response=ServletApi.getResponse();
  Class<?> cls=proxyChain.getTargetClass();
  Method method=proxyChain.getTargetMethod();
  Object[] params=proxyChain.getTargetMethodParams();
  begin();
  try {
    if (intercept(cls,method,params)) {
      if (!response.isCommitted()) {
        before(cls,method,params);
      }
      if (!response.isCommitted()) {
        result=proxyChain.doProxyChain();
      }
      if (!response.isCommitted()) {
        after(cls,method,params,result);
      }
    }
 else {
      result=proxyChain.doProxyChain();
    }
  }
 catch (  Throwable throwable) {
    LOGGER.error(""String_Node_Str"",throwable);
    error(cls,method,params,throwable);
  }
 finally {
    end();
  }
  return result;
}"
39759,"/** 
 * 执行代理链（链式执行，返回则相反）
 * @return 方法执行结果
 * @throws Throwable 抛出异常（交由上级处理）
 */
public Object doProxyChain() throws Throwable {
  Object result;
  if (proxyIndex < proxyList.size()) {
    result=proxyList.get(proxyIndex++).doProxy(this);
  }
 else {
    result=methodProxy.invokeSuper(targetObject,targetMethodParams);
  }
  return result;
}","/** 
 * 执行代理链（链式执行，返回则相反）
 * @return 方法执行结果
 * @throws Throwable 抛出异常（交由上级处理）
 */
public Object doProxyChain() throws Throwable {
  Object result;
  if (proxyIndex < proxyList.size()) {
    result=proxyList.get(proxyIndex++).doProxy(this);
  }
 else   if (!ServletApi.getResponse().isCommitted()) {
    result=methodProxy.invokeSuper(targetObject,targetMethodParams);
  }
 else {
    result=null;
  }
  return result;
}"
39760,"@Override protected void service(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  String requestMethod=req.getMethod().toLowerCase();
  String requestPath=req.getPathInfo();
  Handler handler=ControllerHelper.getHandler(requestMethod,requestPath);
  if (handler != null) {
    Class<?> controllerClass=handler.getControllerClass();
    Object controllerInstance=BeanHelper.getBean(controllerClass);
    Map<String,Object> paramsMap=new HashMap<String,Object>();
    Enumeration<String> paramNames=req.getParameterNames();
    while (paramNames.hasMoreElements()) {
      String paramName=paramNames.nextElement();
      String paramValue=req.getParameter(paramName);
      paramsMap.put(paramName,paramValue);
    }
    Params params=new Params(paramsMap);
    Method method=handler.getMethod();
    Object result=ReflectionUtil.invokeMethod(controllerInstance,method,params);
    if (result instanceof View) {
      View view=(View)result;
      String path=view.getPath();
      if (StringUtil.isNotEmpty(path)) {
        if (path.startsWith(""String_Node_Str"")) {
          resp.sendRedirect(req.getContextPath() + path);
        }
 else {
          Map<String,Object> dataModel=view.getDataModel();
          for (          Map.Entry<String,Object> entry : dataModel.entrySet()) {
            req.setAttribute(entry.getKey(),entry.getValue());
          }
          req.getRequestDispatcher(ConfigHelper.getAppJspPath() + path).forward(req,resp);
        }
      }
    }
 else     if (result instanceof JsonData) {
      JsonData jsonData=(JsonData)result;
      Object dataModel=jsonData.getDataModel();
      if (dataModel != null) {
        resp.setContentType(""String_Node_Str"");
        resp.setCharacterEncoding(""String_Node_Str"");
        PrintWriter printWriter=resp.getWriter();
        String json=JsonUtil.toJson(dataModel);
        printWriter.write(json);
        printWriter.flush();
        printWriter.close();
      }
    }
  }
}","@Override protected void service(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  String requestMethod=req.getMethod().toLowerCase();
  String requestPath=req.getPathInfo();
  Handler handler=ControllerHelper.getHandler(requestMethod,requestPath);
  if (handler != null) {
    Class<?> controllerClass=handler.getControllerClass();
    Object controllerInstance=BeanHelper.getBean(controllerClass);
    Map<String,Object> paramsMap=new HashMap<String,Object>();
    Enumeration<String> paramNames=req.getParameterNames();
    while (paramNames.hasMoreElements()) {
      String paramName=paramNames.nextElement();
      String paramValue=req.getParameter(paramName);
      paramsMap.put(paramName,paramValue);
    }
    String urlStr=CodecUtil.decodeUrl(StreamUtil.getString(req.getInputStream()));
    if (StringUtil.isNotEmpty(urlStr)) {
      String[] params=urlStr.split(""String_Node_Str"");
      if (ArrayUtil.isNotEmpty(params)) {
        for (        String param : params) {
          String[] arr=param.split(""String_Node_Str"");
          if (ArrayUtil.isNotEmpty(arr) && arr.length == 2) {
            paramsMap.put(arr[0],arr[1]);
          }
        }
      }
    }
    Params params=new Params(paramsMap);
    Method method=handler.getMethod();
    Object result=ReflectionUtil.invokeMethod(controllerInstance,method,params);
    if (result instanceof View) {
      View view=(View)result;
      String path=view.getPath();
      if (StringUtil.isNotEmpty(path)) {
        if (path.startsWith(""String_Node_Str"")) {
          resp.sendRedirect(req.getContextPath() + path);
        }
 else {
          Map<String,Object> dataModel=view.getDataModel();
          for (          Map.Entry<String,Object> entry : dataModel.entrySet()) {
            req.setAttribute(entry.getKey(),entry.getValue());
          }
          req.getRequestDispatcher(ConfigHelper.getAppJspPath() + path).forward(req,resp);
        }
      }
    }
 else     if (result instanceof JsonData) {
      JsonData jsonData=(JsonData)result;
      Object dataModel=jsonData.getDataModel();
      if (dataModel != null) {
        resp.setContentType(""String_Node_Str"");
        resp.setCharacterEncoding(""String_Node_Str"");
        PrintWriter printWriter=resp.getWriter();
        String json=JsonUtil.toJson(dataModel);
        printWriter.write(json);
        printWriter.flush();
        printWriter.close();
      }
    }
  }
}"
39761,"final Object invokeImpl(Object thiz,boolean arrayChecks,Object... args) throws Exception {
  try {
    final AbstractFXPresenter presenter=(AbstractFXPresenter)presenter();
    if (LOG.isLoggable(Level.FINE)) {
      LOG.log(Level.FINE,""String_Node_Str"",new Object[]{++call,id});
      LOG.log(Level.FINER,""String_Node_Str"",thiz);
      LOG.log(Level.FINER,""String_Node_Str"",Arrays.asList(args));
    }
    List<Object> all=new ArrayList<Object>(args.length + 1);
    all.add(thiz == null ? presenter.undefined() : thiz);
    for (int i=0; i < args.length; i++) {
      Object conv=args[i];
      if (arrayChecks) {
        boolean alive=keepAlive == null || keepAlive[i];
        conv=presenter.toJavaScript(conv,alive);
      }
      all.add(conv);
    }
    Object ret=fn.call(""String_Node_Str"",all.toArray());
    if (ret == presenter.undefined()) {
      return null;
    }
    if (!arrayChecks) {
      return ret;
    }
    return presenter.toJava(ret);
  }
 catch (  Error t) {
    t.printStackTrace();
    throw t;
  }
catch (  Exception t) {
    t.printStackTrace();
    throw t;
  }
}","final Object invokeImpl(Object thiz,boolean arrayChecks,Object... args) throws Exception {
  try {
    final AbstractFXPresenter presenter=(AbstractFXPresenter)presenter();
    if (LOG.isLoggable(Level.FINE)) {
      LOG.log(Level.FINE,""String_Node_Str"",new Object[]{++call,id});
      LOG.log(Level.FINER,""String_Node_Str"",thiz);
      LOG.log(Level.FINER,""String_Node_Str"",Arrays.asList(args));
    }
    List<Object> all=new ArrayList<Object>(args.length + 1);
    all.add(thiz == null ? presenter.undefined() : presenter.toJavaScript(thiz,true));
    for (int i=0; i < args.length; i++) {
      Object conv=args[i];
      if (arrayChecks) {
        boolean alive=keepAlive == null || keepAlive[i];
        conv=presenter.toJavaScript(conv,alive);
      }
      all.add(conv);
    }
    Object ret=fn.call(""String_Node_Str"",all.toArray());
    if (ret == presenter.undefined()) {
      return null;
    }
    if (!arrayChecks) {
      return ret;
    }
    return presenter.toJava(ret);
  }
 catch (  Error t) {
    t.printStackTrace();
    throw t;
  }
catch (  Exception t) {
    t.printStackTrace();
    throw t;
  }
}"
39762,"@KOTest public void noLongerNeededArrayElementsCanDisappear() throws Exception {
  BrwsrCtx ctx=Utils.newContext(GCKnockoutTest.class);
  Object exp=Utils.exposeHTML(GCKnockoutTest.class,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  try {
    GC m=Models.bind(new GC(),ctx);
    m.getAll().add(new Fullname(""String_Node_Str"",""String_Node_Str""));
    Models.applyBindings(m);
    int cnt=Utils.countChildren(GCKnockoutTest.class,""String_Node_Str"");
    assertEquals(cnt,1,""String_Node_Str"" + cnt);
    m.getAll().add(new Fullname(""String_Node_Str"",""String_Node_Str""));
    cnt=Utils.countChildren(GCKnockoutTest.class,""String_Node_Str"");
    assertEquals(cnt,2,""String_Node_Str"" + cnt);
    Fullname removed=m.getAll().get(0);
    m.getAll().remove(0);
    cnt=Utils.countChildren(GCKnockoutTest.class,""String_Node_Str"");
    assertEquals(cnt,1,""String_Node_Str"" + cnt);
    Reference<?> ref=new WeakReference<Object>(removed);
    removed=null;
    assertGC(ref,""String_Node_Str"");
    ref=new WeakReference<Object>(m);
    m=null;
    assertNotGC(ref,""String_Node_Str"");
  }
  finally {
    Utils.exposeHTML(GCKnockoutTest.class,""String_Node_Str"");
  }
}","@KOTest public void noLongerNeededArrayElementsCanDisappear() throws Exception {
  BrwsrCtx ctx=Utils.newContext(GCKnockoutTest.class);
  Object exp=Utils.exposeHTML(GCKnockoutTest.class,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  try {
    GC m=Models.bind(new GC(),ctx);
    m.getAll().add(new Fullname(""String_Node_Str"",""String_Node_Str""));
    Models.applyBindings(m);
    int cnt=Utils.countChildren(GCKnockoutTest.class,""String_Node_Str"");
    assertEquals(cnt,1,""String_Node_Str"" + cnt);
    m.getAll().add(new Fullname(""String_Node_Str"",""String_Node_Str""));
    cnt=Utils.countChildren(GCKnockoutTest.class,""String_Node_Str"");
    assertEquals(cnt,2,""String_Node_Str"" + cnt);
    Fullname removed=m.getAll().remove(0);
    cnt=Utils.countChildren(GCKnockoutTest.class,""String_Node_Str"");
    assertEquals(cnt,1,""String_Node_Str"" + cnt);
    Reference<?> ref=new WeakReference<Object>(removed);
    removed=null;
    assertGC(ref,""String_Node_Str"");
    ref=new WeakReference<Object>(m);
    m=null;
    assertNotGC(ref,""String_Node_Str"");
  }
  finally {
    Utils.exposeHTML(GCKnockoutTest.class,""String_Node_Str"");
  }
}"
39763,"private void notifyChange(){
  proto.getContext().execute(new Runnable(){
    @Override public void run(){
      Bindings m=PropertyBindingAccessor.getBindings(proto,false,null);
      if (m != null) {
        m.valueHasMutated(name,null,JSONList.this);
        for (        String dependant : deps) {
          m.valueHasMutated(dependant,null,null);
        }
        if (index >= 0) {
          PropertyBindingAccessor.notifyProtoChange(proto,index);
        }
      }
    }
  }
);
}","private void notifyChange(){
  proto.getContext().execute(new Runnable(){
    @Override public void run(){
      proto.valueHasMutated(name);
      Bindings m=PropertyBindingAccessor.getBindings(proto,false,null);
      if (m != null) {
        for (        String dependant : deps) {
          m.valueHasMutated(dependant,null,null);
        }
        if (index >= 0) {
          PropertyBindingAccessor.notifyProtoChange(proto,index);
        }
      }
    }
  }
);
}"
39764,"@Override public void run(){
  Bindings m=PropertyBindingAccessor.getBindings(proto,false,null);
  if (m != null) {
    m.valueHasMutated(name,null,JSONList.this);
    for (    String dependant : deps) {
      m.valueHasMutated(dependant,null,null);
    }
    if (index >= 0) {
      PropertyBindingAccessor.notifyProtoChange(proto,index);
    }
  }
}","@Override public void run(){
  proto.valueHasMutated(name);
  Bindings m=PropertyBindingAccessor.getBindings(proto,false,null);
  if (m != null) {
    for (    String dependant : deps) {
      m.valueHasMutated(dependant,null,null);
    }
    if (index >= 0) {
      PropertyBindingAccessor.notifyProtoChange(proto,index);
    }
  }
}"
39765,"void add(Watcher w,Ref r){
  Thread.holdsLock(GLOBAL);
  if (w == null) {
    return;
  }
  Iterator<Ref> it=observers.iterator();
  while (it.hasNext()) {
    Ref ref=it.next();
    if (r == ref) {
      return;
    }
    final Watcher rw=ref.get();
    if (rw == null) {
      it.remove();
      continue;
    }
    if (rw == w && r.prop.equals(r.prop)) {
      return;
    }
  }
  observers.add(r);
}","void add(Watcher w,Ref r){
  Thread.holdsLock(GLOBAL);
  if (w == null) {
    return;
  }
  Iterator<Ref> it=observers.iterator();
  while (it.hasNext()) {
    Ref ref=it.next();
    if (r == ref) {
      return;
    }
    final Watcher rw=ref.get();
    if (rw == null) {
      it.remove();
      continue;
    }
    if (rw == w && ref.prop.equals(r.prop)) {
      return;
    }
  }
  observers.add(r);
}"
39766,"public Ref(Watcher ref,String prop){
  super(ref);
  this.prop=prop;
}","public Ref(Watcher ref,String prop){
  this.ref=ref;
  this.prop=prop;
}"
39767,"static void beginComputing(Proto p,String name){
synchronized (GLOBAL) {
    verifyUnlocked(p);
    final Watcher nw=new Watcher(p,name);
    GLOBAL.push(nw);
  }
}","static Usages beginComputing(Proto p,String name,Usages usages){
synchronized (GLOBAL) {
    verifyUnlocked(p);
    final Watcher nw=new Watcher(p,name);
    GLOBAL.push(nw);
    return Usages.register(name,nw,usages);
  }
}"
39768,"/** 
 * Acquires global lock to compute a   {@link ComputedProperty derived property}on this proto object. This proto object must not be locked yet. The name of the property is used to track dependencies on own properties of other proto objects - when they are changed, this  {@link #valueHasMutated(java.lang.String) property is changed too}.
 * @param propName name of property we are about to compute
 * @throws IllegalStateException thrown when there is a cycliccall is detected
 * @since 0.9
 */
public void acquireLock(String propName) throws IllegalStateException {
  Observers.beginComputing(this,propName);
}","/** 
 * Acquires global lock to compute a   {@link ComputedProperty derived property}on this proto object. This proto object must not be locked yet. The name of the property is used to track dependencies on own properties of other proto objects - when they are changed, this  {@link #valueHasMutated(java.lang.String) property is changed too}.
 * @param propName name of property we are about to compute
 * @throws IllegalStateException thrown when there is a cycliccall is detected
 * @since 0.9
 */
public void acquireLock(String propName) throws IllegalStateException {
  usages=Observers.beginComputing(this,propName,usages);
}"
39769,"@Test public void firstChangeInArrayNotifiedTransitively() throws Exception {
  MyOverall p=Models.bind(new MyOverall(new MyX(new MyY(""String_Node_Str"",0),new MyY(""String_Node_Str"",333),new MyY(""String_Node_Str"",999))),c);
  Models.applyBindings(p);
  Map m=(Map)Models.toRaw(p);
  Object v=m.get(""String_Node_Str"");
  assertNotNull(v,""String_Node_Str"");
  assertEquals(v.getClass(),One.class,""String_Node_Str"");
  One o=(One)v;
  assertEquals(o.changes,0,""String_Node_Str"");
  assertTrue(o.pb.isReadOnly(),""String_Node_Str"");
  assertEquals(o.get(),""String_Node_Str"");
  p.getX().getAll().get(0).setValue(""String_Node_Str"");
  assertEquals(o.get(),""String_Node_Str"");
  assertEquals(o.changes,1,""String_Node_Str"");
}","@Test public void firstChangeInArrayNotifiedTransitively() throws Exception {
  MyOverall p=Models.bind(new MyOverall(new MyX(new MyY(""String_Node_Str"",0),new MyY(""String_Node_Str"",333),new MyY(""String_Node_Str"",999))),c);
  Models.applyBindings(p);
  Map m=(Map)Models.toRaw(p);
  Object v=m.get(""String_Node_Str"");
  assertNotNull(v,""String_Node_Str"");
  assertEquals(v.getClass(),One.class,""String_Node_Str"");
  One o=(One)v;
  assertEquals(o.changes,0,""String_Node_Str"");
  assertTrue(o.pb.isReadOnly(),""String_Node_Str"");
  assertEquals(o.get(),""String_Node_Str"");
  final List<MyY> all=p.getX().getAll();
  MyY refStrong=all.get(0);
  Reference<MyY> ref=new WeakReference<MyY>(refStrong);
  refStrong.setValue(""String_Node_Str"");
  assertEquals(o.get(),""String_Node_Str"");
  assertEquals(o.changes,1,""String_Node_Str"");
  final MyY hi=Models.bind(new MyY(""String_Node_Str"",33),c);
  all.set(0,hi);
  assertEquals(o.changes,2,""String_Node_Str"");
  assertEquals(o.get(),""String_Node_Str"");
  refStrong.setValue(""String_Node_Str"");
  assertEquals(o.changes,2,""String_Node_Str"");
  refStrong=null;
  assertGC(ref,""String_Node_Str"");
}"
39770,"@Override public Object toJava(Object toJS){
  if (toJS == undefined()) {
    return null;
  }
  if (!(toJS instanceof JSObject)) {
    return toJS;
  }
  JSObject js=(JSObject)toJS;
  int length=getArrayLength(toJS);
  if (length != -1) {
    Object[] arr=toArray(length,toJS);
    System.err.println(""String_Node_Str"");
    dumpArray(arr,""String_Node_Str"");
    return arr;
  }
  return values().realValue(js);
}","@Override public Object toJava(Object toJS){
  if (toJS == undefined()) {
    return null;
  }
  if (!(toJS instanceof JSObject)) {
    return toJS;
  }
  JSObject js=(JSObject)toJS;
  int length=getArrayLength(toJS);
  if (length != -1) {
    Object[] arr=toArray(length,toJS);
    return arr;
  }
  return values().realValue(js);
}"
39771,"@EventHandler public void onInteract(PlayerInteractEntityEvent event){
  Entity entity=event.getRightClicked();
  if (!entity.hasMetadata(GlobalValues.METATAG)) {
    return;
  }
  if (entity.hasMetadata(GlobalValues.CURRENTLY_BREEDING) && entity.getMetadata(GlobalValues.CURRENTLY_BREEDING).get(0).asBoolean()) {
    return;
  }
  if (sm.getVersionId() > 1) {
    if (!(event.getHand() == EquipmentSlot.HAND)) {
      return;
    }
  }
  if (event.isCancelled()) {
    return;
  }
  if (entity instanceof Animals) {
    if (correctFood(event.getPlayer().getItemInHand(),entity) && ((Animals)entity).canBreed()) {
      int stackSize=entity.getMetadata(GlobalValues.METATAG).get(0).asInt();
      if (stackSize <= 1) {
        return;
      }
      if (sm.config.getCustomConfig().getBoolean(""String_Node_Str"")) {
        int breedSize=stackSize;
        sm.getLogger().info(""String_Node_Str"");
        if (event.getPlayer().getItemInHand().getAmount() < breedSize) {
          breedSize=event.getPlayer().getItemInHand().getAmount();
        }
        int childAmount=(int)Math.floor(breedSize / 2);
        Animals child=(Animals)sm.tools.duplicate(entity);
        child.setMetadata(GlobalValues.METATAG,new FixedMetadataValue(sm,childAmount));
        child.setMetadata(GlobalValues.NO_SPAWN_STACK,new FixedMetadataValue(sm,true));
        child.setBaby();
      }
 else       if (sm.config.getCustomConfig().getBoolean(""String_Node_Str"")) {
        Entity newEntity=sm.tools.duplicate(entity,true);
        newEntity.setMetadata(GlobalValues.METATAG,new FixedMetadataValue(sm,stackSize - 1));
        newEntity.setMetadata(GlobalValues.NO_SPAWN_STACK,new FixedMetadataValue(sm,true));
        entity.setMetadata(GlobalValues.METATAG,new FixedMetadataValue(sm,1));
        entity.setMetadata(GlobalValues.NO_STACK_ALL,new FixedMetadataValue(sm,true));
        entity.setMetadata(GlobalValues.CURRENTLY_BREEDING,new FixedMetadataValue(sm,true));
        entity.setCustomName(null);
        new BukkitRunnable(){
          @Override public void run(){
            if (!entity.isDead()) {
              entity.setMetadata(GlobalValues.CURRENTLY_BREEDING,new FixedMetadataValue(sm,false));
              entity.setMetadata(GlobalValues.NO_STACK_ALL,new FixedMetadataValue(sm,false));
            }
          }
        }
.runTaskLater(sm,20 * 20);
      }
      return;
    }
  }
  if (sm.config.getCustomConfig().getBoolean(""String_Node_Str"")) {
    if (event.getPlayer().getItemInHand().getType() == Material.NAME_TAG && event.getPlayer().getItemInHand().getItemMeta().hasDisplayName()) {
      if (entity.getMetadata(GlobalValues.METATAG).get(0).asInt() > 1) {
        Entity dupe=sm.tools.duplicate(entity);
        dupe.setMetadata(GlobalValues.METATAG,new FixedMetadataValue(sm,entity.getMetadata(GlobalValues.METATAG).get(0).asInt() - 1));
        dupe.setMetadata(GlobalValues.NO_SPAWN_STACK,new FixedMetadataValue(sm,true));
      }
      entity.removeMetadata(GlobalValues.METATAG,sm);
      entity.setMetadata(GlobalValues.NO_STACK_ALL,new FixedMetadataValue(sm,true));
    }
  }
}","@EventHandler public void onInteract(PlayerInteractEntityEvent event){
  Entity entity=event.getRightClicked();
  if (!entity.hasMetadata(GlobalValues.METATAG)) {
    return;
  }
  if (entity.hasMetadata(GlobalValues.CURRENTLY_BREEDING) && entity.getMetadata(GlobalValues.CURRENTLY_BREEDING).get(0).asBoolean()) {
    return;
  }
  if (sm.getVersionId() > 1) {
    if (event.getHand() == EquipmentSlot.OFF_HAND) {
      return;
    }
  }
  if (event.isCancelled()) {
    return;
  }
  if (entity instanceof Animals) {
    if (correctFood(event.getPlayer().getItemInHand(),entity) && ((Animals)entity).canBreed()) {
      int stackSize=entity.getMetadata(GlobalValues.METATAG).get(0).asInt();
      if (stackSize <= 1) {
        return;
      }
      if (sm.config.getCustomConfig().getBoolean(""String_Node_Str"")) {
        int breedSize=stackSize;
        if (event.getPlayer().getItemInHand().getAmount() < breedSize) {
          breedSize=event.getPlayer().getItemInHand().getAmount();
        }
        int childAmount=(int)Math.floor(breedSize / 2);
        Animals child=(Animals)sm.tools.duplicate(entity);
        child.setMetadata(GlobalValues.METATAG,new FixedMetadataValue(sm,childAmount));
        child.setMetadata(GlobalValues.NO_SPAWN_STACK,new FixedMetadataValue(sm,true));
        child.setBaby();
        ((Animals)entity).setBreed(false);
      }
 else       if (sm.config.getCustomConfig().getBoolean(""String_Node_Str"")) {
        Entity newEntity=sm.tools.duplicate(entity,true);
        newEntity.setMetadata(GlobalValues.METATAG,new FixedMetadataValue(sm,stackSize - 1));
        newEntity.setMetadata(GlobalValues.NO_SPAWN_STACK,new FixedMetadataValue(sm,true));
        entity.setMetadata(GlobalValues.METATAG,new FixedMetadataValue(sm,1));
        entity.setMetadata(GlobalValues.NO_STACK_ALL,new FixedMetadataValue(sm,true));
        entity.setMetadata(GlobalValues.CURRENTLY_BREEDING,new FixedMetadataValue(sm,true));
        entity.setCustomName(null);
        new BukkitRunnable(){
          @Override public void run(){
            if (!entity.isDead()) {
              entity.setMetadata(GlobalValues.CURRENTLY_BREEDING,new FixedMetadataValue(sm,false));
              entity.setMetadata(GlobalValues.NO_STACK_ALL,new FixedMetadataValue(sm,false));
            }
          }
        }
.runTaskLater(sm,20 * 20);
      }
      return;
    }
  }
  if (sm.config.getCustomConfig().getBoolean(""String_Node_Str"")) {
    if (event.getPlayer().getItemInHand().getType() == Material.NAME_TAG && event.getPlayer().getItemInHand().getItemMeta().hasDisplayName()) {
      if (entity.getMetadata(GlobalValues.METATAG).get(0).asInt() > 1) {
        Entity dupe=sm.tools.duplicate(entity);
        dupe.setMetadata(GlobalValues.METATAG,new FixedMetadataValue(sm,entity.getMetadata(GlobalValues.METATAG).get(0).asInt() - 1));
        dupe.setMetadata(GlobalValues.NO_SPAWN_STACK,new FixedMetadataValue(sm,true));
      }
      entity.removeMetadata(GlobalValues.METATAG,sm);
      entity.setMetadata(GlobalValues.NO_STACK_ALL,new FixedMetadataValue(sm,true));
    }
  }
}"
39772,"@Override public void run(){
  double xLoc=sm.config.getCustomConfig().getDouble(""String_Node_Str"");
  double yLoc=sm.config.getCustomConfig().getDouble(""String_Node_Str"");
  double zLoc=sm.config.getCustomConfig().getDouble(""String_Node_Str"");
  int maxSize;
  for (  World world : Bukkit.getWorlds()) {
    if (sm.config.getCustomConfig().getStringList(""String_Node_Str"").contains(world.getName())) {
      continue;
    }
    for (    Entity first : world.getLivingEntities()) {
      if (first instanceof ArmorStand) {
        continue;
      }
      if (sm.tools.notTaskSuitable(first)) {
        continue;
      }
      if (first.hasMetadata(GlobalValues.NOT_ENOUGH_NEAR) && first.getMetadata(GlobalValues.NOT_ENOUGH_NEAR).get(0).asBoolean()) {
        sm.tools.notEnoughNearby(first);
      }
      maxSize=sm.config.getCustomConfig().getInt(""String_Node_Str"");
      if (sm.config.getCustomConfig().isInt(""String_Node_Str"" + first.getType() + ""String_Node_Str"")) {
        maxSize=sm.config.getCustomConfig().getInt(""String_Node_Str"" + first.getType() + ""String_Node_Str"");
      }
      if (first.hasMetadata(GlobalValues.METATAG) && first.getMetadata(GlobalValues.METATAG).size() == 0) {
        if (first.getMetadata(GlobalValues.METATAG).get(0).asInt() == maxSize) {
          continue;
        }
      }
      for (      Entity nearby : first.getNearbyEntities(xLoc,yLoc,zLoc)) {
        if (first.getType() != nearby.getType()) {
          continue;
        }
        if (!nearby.hasMetadata(GlobalValues.METATAG) || nearby.getMetadata(GlobalValues.METATAG).size() == 0 || nearby.getMetadata(GlobalValues.METATAG).get(0).asInt() == maxSize) {
          continue;
        }
        if (sm.tools.notTaskSuitable(nearby)) {
          continue;
        }
        if (sm.tools.notMatching(first,nearby)) {
          continue;
        }
        int nearbySize=nearby.getMetadata(GlobalValues.METATAG).get(0).asInt();
        int firstSize;
        if (first.hasMetadata(GlobalValues.METATAG)) {
          firstSize=first.getMetadata(GlobalValues.METATAG).get(0).asInt();
        }
 else {
          firstSize=1;
        }
        if (nearbySize > firstSize && sm.config.getCustomConfig().getBoolean(""String_Node_Str"")) {
          Entity holder=nearby;
          nearby=first;
          first=holder;
        }
        sm.tools.onceStacked(first,nearby);
        int amountTotal=nearbySize + firstSize;
        if (amountTotal > maxSize) {
          first.setMetadata(GlobalValues.METATAG,new FixedMetadataValue(sm,maxSize));
          nearby.setMetadata(GlobalValues.METATAG,new FixedMetadataValue(sm,amountTotal - maxSize));
        }
 else {
          first.setMetadata(GlobalValues.METATAG,new FixedMetadataValue(sm,amountTotal));
          nearby.remove();
        }
        break;
      }
    }
  }
}","@Override public void run(){
  double xLoc=sm.config.getCustomConfig().getDouble(""String_Node_Str"");
  double yLoc=sm.config.getCustomConfig().getDouble(""String_Node_Str"");
  double zLoc=sm.config.getCustomConfig().getDouble(""String_Node_Str"");
  int maxSize;
  for (  World world : Bukkit.getWorlds()) {
    if (sm.config.getCustomConfig().getStringList(""String_Node_Str"").contains(world.getName())) {
      continue;
    }
    for (    Entity first : world.getLivingEntities()) {
      if (first instanceof ArmorStand) {
        continue;
      }
      if (sm.tools.notTaskSuitable(first)) {
        continue;
      }
      if (first.hasMetadata(GlobalValues.NOT_ENOUGH_NEAR) && first.getMetadata(GlobalValues.NOT_ENOUGH_NEAR).get(0).asBoolean()) {
        sm.tools.notEnoughNearby(first);
      }
      maxSize=sm.config.getCustomConfig().getInt(""String_Node_Str"");
      if (sm.config.getCustomConfig().isInt(""String_Node_Str"" + first.getType() + ""String_Node_Str"")) {
        maxSize=sm.config.getCustomConfig().getInt(""String_Node_Str"" + first.getType() + ""String_Node_Str"");
      }
      if (first.hasMetadata(GlobalValues.METATAG) && first.getMetadata(GlobalValues.METATAG).size() == 0) {
        continue;
      }
      if (first.getMetadata(GlobalValues.METATAG).get(0).asInt() == maxSize) {
        continue;
      }
      for (      Entity nearby : first.getNearbyEntities(xLoc,yLoc,zLoc)) {
        if (first.getType() != nearby.getType()) {
          continue;
        }
        if (!nearby.hasMetadata(GlobalValues.METATAG) || nearby.getMetadata(GlobalValues.METATAG).size() == 0 || nearby.getMetadata(GlobalValues.METATAG).get(0).asInt() == maxSize) {
          continue;
        }
        if (sm.tools.notTaskSuitable(nearby)) {
          continue;
        }
        if (sm.tools.notMatching(first,nearby)) {
          continue;
        }
        int nearbySize=nearby.getMetadata(GlobalValues.METATAG).get(0).asInt();
        int firstSize;
        if (first.hasMetadata(GlobalValues.METATAG)) {
          firstSize=first.getMetadata(GlobalValues.METATAG).get(0).asInt();
        }
 else {
          firstSize=1;
        }
        if (nearbySize > firstSize && sm.config.getCustomConfig().getBoolean(""String_Node_Str"")) {
          Entity holder=nearby;
          nearby=first;
          first=holder;
        }
        sm.tools.onceStacked(first,nearby);
        int amountTotal=nearbySize + firstSize;
        if (amountTotal > maxSize) {
          first.setMetadata(GlobalValues.METATAG,new FixedMetadataValue(sm,maxSize));
          nearby.setMetadata(GlobalValues.METATAG,new FixedMetadataValue(sm,amountTotal - maxSize));
        }
 else {
          first.setMetadata(GlobalValues.METATAG,new FixedMetadataValue(sm,amountTotal));
          nearby.remove();
        }
        break;
      }
    }
  }
}"
39773,"public Entity duplicate(Entity original){
  Entity dupe;
  Location dupeLoc;
  if (sm.pluginSupport.getMythicSupport() != null && sm.pluginSupport.getMythicSupport().isMythicMob(original)) {
    dupe=sm.pluginSupport.getMythicSupport().spawnMythicMob(original);
  }
 else   if (original.getType() == EntityType.PIG_ZOMBIE || original.getType() == EntityType.ZOMBIE_VILLAGER || original.getType() == EntityType.ZOMBIE) {
    dupeLoc=new Location(original.getWorld(),original.getLocation().getBlockX() + 0.5,original.getLocation().getY(),original.getLocation().getBlockZ() + 0.5);
    dupe=original.getWorld().spawnEntity(dupeLoc,original.getType());
  }
 else {
    dupe=original.getWorld().spawnEntity(original.getLocation(),original.getType());
  }
  return cloneTraits(original,dupe);
}","public Entity duplicate(Entity original){
  Entity dupe;
  Location dupeLoc;
  if (sm.pluginSupport.getMythicSupport() != null && sm.pluginSupport.getMythicSupport().isMythicMob(original)) {
    dupe=sm.pluginSupport.getMythicSupport().spawnMythicMob(original);
  }
 else   if (original instanceof Zombie) {
    dupeLoc=new Location(original.getWorld(),original.getLocation().getBlockX() + 0.5,original.getLocation().getY(),original.getLocation().getBlockZ() + 0.5);
    dupe=original.getWorld().spawnEntity(dupeLoc,original.getType());
  }
 else {
    dupe=original.getWorld().spawnEntity(original.getLocation(),original.getType());
  }
  return cloneTraits(original,dupe);
}"
39774,"public int multiplyExperience(int originalExperience,int entityAmount){
  int newExperience;
  if (sm.config.getCustomConfig().isDouble(""String_Node_Str"")) {
    Algorithm algorithm=Algorithm.valueOf(sm.config.getCustomConfig().getString(""String_Node_Str""));
    if (algorithm == LEGACY) {
      newExperience=(int)Math.round((1.45 + ThreadLocalRandom.current().nextDouble(0.75)) * (entityAmount - 1) * originalExperience);
    }
 else     if (algorithm == MINIMAL) {
      newExperience=(int)Math.round(originalExperience * ((0.25 + ThreadLocalRandom.current().nextDouble(0.5)) * entityAmount));
    }
 else     if (algorithm == NORMAL) {
      newExperience=(int)Math.round(originalExperience * ((0.75 + ThreadLocalRandom.current().nextDouble(0.5)) * entityAmount));
    }
 else     if (algorithm == GENEROUS) {
      newExperience=(int)Math.round(originalExperience * ((1.25 + ThreadLocalRandom.current().nextDouble(0.5)) * entityAmount));
    }
 else     if (algorithm == CUSTOM) {
      double customMultiplier=sm.config.getCustomConfig().getDouble(""String_Node_Str"");
      newExperience=(int)Math.round(originalExperience * (customMultiplier * entityAmount));
    }
 else {
      double customMultiplier=sm.config.getCustomConfig().getDouble(""String_Node_Str"");
      newExperience=(int)Math.round(originalExperience * (customMultiplier + ThreadLocalRandom.current().nextDouble(0.5) * entityAmount));
    }
  }
 else {
    newExperience=(int)Math.round(originalExperience * ((0.75 + ThreadLocalRandom.current().nextDouble(0.5)) * entityAmount));
  }
  return newExperience;
}","public int multiplyExperience(int originalExperience,int entityAmount){
  int newExperience;
  if (sm.config.getCustomConfig().isDouble(""String_Node_Str"")) {
    Algorithm algorithm=Algorithm.valueOf(sm.config.getCustomConfig().getString(""String_Node_Str""));
    if (algorithm == LEGACY) {
      newExperience=(int)Math.round((1.45 + ThreadLocalRandom.current().nextDouble(0.75)) * (entityAmount - 1) * originalExperience);
    }
 else     if (algorithm == MINIMAL) {
      newExperience=(int)Math.round(originalExperience * (0.25 + ThreadLocalRandom.current().nextDouble(0.5)) * entityAmount);
    }
 else     if (algorithm == NORMAL) {
      newExperience=(int)Math.round(originalExperience * (0.75 + ThreadLocalRandom.current().nextDouble(0.5)) * entityAmount);
    }
 else     if (algorithm == GENEROUS) {
      newExperience=(int)Math.round(originalExperience * (1.25 + ThreadLocalRandom.current().nextDouble(0.5)) * entityAmount);
    }
 else     if (algorithm == CUSTOM) {
      double customMultiplier=sm.config.getCustomConfig().getDouble(""String_Node_Str"");
      newExperience=(int)Math.round(originalExperience * (customMultiplier * entityAmount));
    }
 else {
      double customMultiplier=sm.config.getCustomConfig().getDouble(""String_Node_Str"");
      newExperience=(int)Math.round(originalExperience * (customMultiplier + ThreadLocalRandom.current().nextDouble(0.5)) * entityAmount);
    }
  }
 else {
    newExperience=(int)Math.round(originalExperience * ((0.75 + ThreadLocalRandom.current().nextDouble(0.5)) * entityAmount));
  }
  return newExperience;
}"
39775,"public void run(){
  for (  Player p : Bukkit.getOnlinePlayers()) {
    if (!sm.config.getCustomConfig().getStringList(""String_Node_Str"").contains(p.getWorld().getName())) {
      for (      Entity e : p.getNearbyEntities(15,15,15)) {
        if (!(e instanceof LivingEntity)) {
          continue;
        }
        if (e.hasMetadata(GlobalValues.METATAG)) {
          if (e.getMetadata(GlobalValues.METATAG).size() == 0) {
            e.setMetadata(GlobalValues.METATAG,new FixedMetadataValue(sm,1));
          }
          String typeString=e.getType().toString();
          int removeAt=sm.config.getCustomConfig().getInt(""String_Node_Str"");
          if (sm.config.getCustomConfig().isString(""String_Node_Str"" + typeString + ""String_Node_Str"")) {
            removeAt=sm.config.getCustomConfig().getInt(""String_Node_Str"" + typeString + ""String_Node_Str"");
          }
          if (e.getMetadata(GlobalValues.METATAG).get(0).asInt() > removeAt) {
            String format=sm.config.getCustomConfig().getString(""String_Node_Str"");
            if (sm.config.getCustomConfig().isString(""String_Node_Str"" + typeString + ""String_Node_Str"")) {
              format=sm.config.getCustomConfig().getString(""String_Node_Str"" + typeString + ""String_Node_Str"");
            }
            if (sm.pluginSupport.getMythicSupport() != null && sm.pluginSupport.getMythicSupport().isMythicMob(e)) {
              typeString=sm.pluginSupport.getMythicSupport().getMythicMobs().getMythicMobInstance(e).getType().getInternalName();
            }
 else             if (sm.translation.getCustomConfig().getBoolean(""String_Node_Str"")) {
              typeString=""String_Node_Str"" + sm.translation.getCustomConfig().getString(e.getType().toString());
            }
            String formattedType=toTitleCase(typeString.toLowerCase().replace(""String_Node_Str"",""String_Node_Str""));
            String nearlyFinal=format.replace(""String_Node_Str"",e.getMetadata(GlobalValues.METATAG).get(0).asString()).replace(""String_Node_Str"",formattedType).replace(""String_Node_Str"",e.getType().toString());
            String finalString=ChatColor.translateAlternateColorCodes('&',nearlyFinal);
            if (!finalString.equals(e.getCustomName())) {
              e.setCustomName(finalString);
            }
            if (!(sm.config.getCustomConfig().getBoolean(""String_Node_Str"") && sm.pluginSupport.isProtocolSupportEnabled() && sm.getVersionId() > 1)) {
              boolean alwaysVisible=sm.config.getCustomConfig().getBoolean(""String_Node_Str"");
              if (sm.config.getCustomConfig().isString(""String_Node_Str"" + typeString + ""String_Node_Str"")) {
                alwaysVisible=sm.config.getCustomConfig().getBoolean(""String_Node_Str"" + typeString + ""String_Node_Str"");
              }
              e.setCustomNameVisible(alwaysVisible);
            }
          }
        }
      }
      for (      Entity e : p.getNearbyEntities(30,30,30)) {
        if (e.hasMetadata(GlobalValues.METATAG)) {
          sm.pluginSupport.getProtocolSupport().sendUpdatePacket(p,e);
        }
      }
    }
  }
}","public void run(){
  for (  Player p : Bukkit.getOnlinePlayers()) {
    if (!sm.config.getCustomConfig().getStringList(""String_Node_Str"").contains(p.getWorld().getName())) {
      for (      Entity e : p.getNearbyEntities(15,15,15)) {
        if (!(e instanceof LivingEntity)) {
          continue;
        }
        if (e.hasMetadata(GlobalValues.METATAG)) {
          if (e.getMetadata(GlobalValues.METATAG).size() == 0) {
            e.setMetadata(GlobalValues.METATAG,new FixedMetadataValue(sm,1));
          }
          String typeString=e.getType().toString();
          int removeAt=sm.config.getCustomConfig().getInt(""String_Node_Str"");
          if (sm.config.getCustomConfig().isString(""String_Node_Str"" + typeString + ""String_Node_Str"")) {
            removeAt=sm.config.getCustomConfig().getInt(""String_Node_Str"" + typeString + ""String_Node_Str"");
          }
          if (e.getMetadata(GlobalValues.METATAG).get(0).asInt() > removeAt) {
            String format=sm.config.getCustomConfig().getString(""String_Node_Str"");
            if (sm.config.getCustomConfig().isString(""String_Node_Str"" + typeString + ""String_Node_Str"")) {
              format=sm.config.getCustomConfig().getString(""String_Node_Str"" + typeString + ""String_Node_Str"");
            }
            if (sm.pluginSupport.getMythicSupport() != null && sm.pluginSupport.getMythicSupport().isMythicMob(e)) {
              typeString=sm.pluginSupport.getMythicSupport().getMythicMobs().getMythicMobInstance(e).getType().getInternalName();
            }
 else             if (sm.translation.getCustomConfig().getBoolean(""String_Node_Str"")) {
              typeString=""String_Node_Str"" + sm.translation.getCustomConfig().getString(e.getType().toString());
            }
            String formattedType=toTitleCase(typeString.toLowerCase().replace(""String_Node_Str"",""String_Node_Str""));
            String nearlyFinal=format.replace(""String_Node_Str"",e.getMetadata(GlobalValues.METATAG).get(0).asString()).replace(""String_Node_Str"",formattedType).replace(""String_Node_Str"",e.getType().toString());
            String finalString=ChatColor.translateAlternateColorCodes('&',nearlyFinal);
            if (!finalString.equals(e.getCustomName())) {
              e.setCustomName(finalString);
            }
            if (!(sm.config.getCustomConfig().getBoolean(""String_Node_Str"") && sm.pluginSupport.isProtocolSupportEnabled() && sm.getVersionId() > 1)) {
              boolean alwaysVisible=sm.config.getCustomConfig().getBoolean(""String_Node_Str"");
              if (sm.config.getCustomConfig().isString(""String_Node_Str"" + typeString + ""String_Node_Str"")) {
                alwaysVisible=sm.config.getCustomConfig().getBoolean(""String_Node_Str"" + typeString + ""String_Node_Str"");
              }
              e.setCustomNameVisible(alwaysVisible);
            }
          }
        }
      }
      for (      Entity e : p.getNearbyEntities(30,30,30)) {
        if (e.hasMetadata(GlobalValues.METATAG)) {
          if (sm.config.getCustomConfig().getBoolean(""String_Node_Str"") && sm.pluginSupport.isProtocolSupportEnabled() && sm.getVersionId() > 1) {
            sm.pluginSupport.getProtocolSupport().sendUpdatePacket(p,e);
          }
        }
      }
    }
  }
}"
39776,"private Optional<String> createIndex(){
  if (isEsIndexingIncludedInPipeline()) {
    Path path=Paths.get(options.getESSchemaPath());
    if (!path.isAbsolute()) {
      path=Optional.ofNullable(getClass().getClassLoader().getResource(options.getESSchemaPath())).map(x -> Paths.get(x.getPath())).orElseThrow(() -> new IllegalArgumentException(""String_Node_Str"" + options.getESSchemaPath()));
    }
    String index=EsHandler.createIndex(esConfig,options.getDatasetId(),options.getAttempt(),path);
    LOG.info(""String_Node_Str"",index);
    return Optional.of(index);
  }
  return Optional.empty();
}","private Optional<String> createIndex(){
  if (isEsIndexingIncludedInPipeline()) {
    Path path=Paths.get(options.getESSchemaPath());
    String index=EsHandler.createIndex(esConfig,options.getDatasetId(),options.getAttempt(),path);
    LOG.info(""String_Node_Str"",index);
    return Optional.of(index);
  }
  return Optional.empty();
}"
39777,"private GbifRecords2JsonConverter(SpecificRecordBase[] bases){
  setSpecificRecordBase(bases);
  setEscapeKeys(ESCAPE_KEYS);
  setReplaceKeys(REPLACE_KEYS);
  addSpecificConverter(ExtendedRecord.class,getExtendedRecordConverter());
  addSpecificConverter(LocationRecord.class,getLocationRecordConverter());
  addSpecificConverter(TaxonRecord.class,getTaxonomyRecordConverter());
}","private GbifRecords2JsonConverter(SpecificRecordBase[] bases){
  setSpecificRecordBase(bases);
  setEscapeKeys(ESCAPE_KEYS);
  setReplaceKeys(REPLACE_KEYS);
  setClearValues(CLEAR_VALUES);
  addSpecificConverter(ExtendedRecord.class,getExtendedRecordConverter());
  addSpecificConverter(LocationRecord.class,getLocationRecordConverter());
  addSpecificConverter(TaxonRecord.class,getTaxonomyRecordConverter());
}"
39778,"/** 
 * Convert - ""key"":""value"" and check some incorrect symbols for json 
 */
Records2JsonConverter addJsonFieldNoCheck(String key,Object value){
  for (  String rule : replaceKeys) {
    key=key.replaceAll(rule,""String_Node_Str"");
  }
  sb.append(""String_Node_Str"").append(key).append(""String_Node_Str"");
  if (Objects.isNull(value)) {
    return append(""String_Node_Str"");
  }
  if (value instanceof String) {
    String r1=PATTERN1.matcher(((String)value)).replaceAll(""String_Node_Str"");
    value=PATTERN2.matcher(r1).replaceAll(""String_Node_Str"");
  }
  return append(""String_Node_Str"").append(value).append(""String_Node_Str"");
}","/** 
 * Convert - ""key"":""value"" and check some incorrect symbols for json 
 */
Records2JsonConverter addJsonFieldNoCheck(String key,Object value){
  for (  String rule : replaceKeys) {
    key=key.replaceAll(rule,""String_Node_Str"");
  }
  sb.append(""String_Node_Str"").append(key).append(""String_Node_Str"");
  if (Objects.isNull(value)) {
    return append(""String_Node_Str"");
  }
  if (value instanceof String) {
    String result=((String)value);
    if (clearValues.contains(key)) {
      String r12=PATTERN12.matcher(result).replaceAll(""String_Node_Str"");
      result=PATTERN13.matcher(r12).replaceAll(""String_Node_Str"");
    }
    String r1=PATTERN1.matcher(result).replaceAll(""String_Node_Str"");
    value=PATTERN2.matcher(r1).replaceAll(""String_Node_Str"");
  }
  return append(""String_Node_Str"").append(value).append(""String_Node_Str"");
}"
39779,"@Override protected void convert(Path inputPath,DataFileWriter<ExtendedRecord> dataFileWriter) throws IOException {
  DwCAReader reader=new DwCAReader(inputPath.toString());
  reader.init();
  LOG.info(""String_Node_Str"");
  while (reader.advance()) {
    dataFileWriter.append(reader.getCurrent());
  }
}","@Override protected void convert(Path inputPath,DataFileWriter<ExtendedRecord> dataFileWriter) throws IOException {
  DwCAReader reader=new DwCAReader(inputPath.toString());
  reader.init();
  LOG.info(""String_Node_Str"");
  dataFileWriter.append(reader.getCurrent());
  while (reader.advance()) {
    dataFileWriter.append(reader.getCurrent());
  }
}"
39780,"/** 
 * String converter for   {@link TaxonRecord}, convert an object to specific string view <pre>  {@code Result example: ""gbifKingdom"": ""Animalia"", //.....more fields}""usage"":  ""key"": 2442896, ""name"": ""Actinemys marmorata (Baird & Girard, 1852)"", ""rank"": ""SPECIES"" }, ""classification"": [ { ""key"": 1, ""name"": ""Animalia"", ""rank"": ""KINGDOM"" }, //.....more objects ], ""acceptedUsage"": null, //.....more fields }</pre>
 */
private Consumer<SpecificRecordBase> getTaxonomyRecordConverter(){
  return record -> {
    TaxonRecord taxon=(TaxonRecord)record;
    List<RankedName> classifications=taxon.getClassification();
    if (Objects.nonNull(classifications) && !classifications.isEmpty()) {
      Map<Rank,String> map=classifications.stream().collect(Collectors.toMap(RankedName::getRank,RankedName::getName));
      addJsonField(""String_Node_Str"",map.get(Rank.KINGDOM));
      addJsonField(""String_Node_Str"",map.get(Rank.PHYLUM));
      addJsonField(""String_Node_Str"",map.get(Rank.CLASS));
      addJsonField(""String_Node_Str"",map.get(Rank.ORDER));
      addJsonField(""String_Node_Str"",map.get(Rank.FAMILY));
      addJsonField(""String_Node_Str"",map.get(Rank.GENUS));
      addJsonField(""String_Node_Str"",map.get(Rank.SUBGENUS));
    }
    RankedName usage=taxon.getUsage();
    if (Objects.nonNull(usage)) {
      addJsonField(""String_Node_Str"",usage.getKey());
      addJsonField(""String_Node_Str"",usage.getName());
    }
    addCommonFields(record);
  }
;
}","/** 
 * String converter for   {@link TaxonRecord}, convert an object to specific string view <pre>  {@code Result example: ""gbifKingdom"": ""Animalia"", //.....more fields}""usage"":  ""key"": 2442896, ""name"": ""Actinemys marmorata (Baird & Girard, 1852)"", ""rank"": ""SPECIES"" }, ""classification"": [ { ""key"": 1, ""name"": ""Animalia"", ""rank"": ""KINGDOM"" }, //.....more objects ], ""acceptedUsage"": null, //.....more fields }</pre>
 */
private Consumer<SpecificRecordBase> getTaxonomyRecordConverter(){
  return record -> {
    TaxonRecord taxon=(TaxonRecord)record;
    List<RankedName> classifications=taxon.getClassification();
    if (classifications != null && !classifications.isEmpty()) {
      Map<Rank,String> map=classifications.stream().collect(Collectors.toMap(RankedName::getRank,RankedName::getName));
      this.addJsonField(""String_Node_Str"",map.get(Rank.KINGDOM)).addJsonField(""String_Node_Str"",map.get(Rank.PHYLUM)).addJsonField(""String_Node_Str"",map.get(Rank.CLASS)).addJsonField(""String_Node_Str"",map.get(Rank.ORDER)).addJsonField(""String_Node_Str"",map.get(Rank.FAMILY)).addJsonField(""String_Node_Str"",map.get(Rank.GENUS)).addJsonField(""String_Node_Str"",map.get(Rank.SUBGENUS));
    }
    RankedName usage=taxon.getUsage();
    if (usage != null) {
      this.addJsonField(""String_Node_Str"",usage.getKey().toString()).addJsonField(""String_Node_Str"",usage.getName());
    }
    this.addCommonFields(record);
  }
;
}"
39781,"/** 
 * String converter for   {@link ExtendedRecord}, convert an object to specific string view <pre>  {@code Result example:}""verbatim"":  ""continent"": ""North America"", //.....more fields }, ""basisOfRecord"": null, //.....more fields }</pre>
 */
private Consumer<SpecificRecordBase> getExtendedRecordConverter(){
  return record -> {
    Map<String,String> terms=((ExtendedRecord)record).getCoreTerms();
    addJsonFieldNoCheck(""String_Node_Str"",record.get(0)).addJsonObject(""String_Node_Str"",terms);
  }
;
}","/** 
 * String converter for   {@link ExtendedRecord}, convert an object to specific string view <pre>  {@code Result example:}""verbatim"":  ""continent"": ""North America"", //.....more fields }, ""basisOfRecord"": null, //.....more fields }</pre>
 */
private Consumer<SpecificRecordBase> getExtendedRecordConverter(){
  return record -> {
    Map<String,String> terms=((ExtendedRecord)record).getCoreTerms();
    this.addJsonFieldNoCheck(""String_Node_Str"",record.get(0).toString()).addJsonObject(""String_Node_Str"",terms);
  }
;
}"
39782,"/** 
 * String converter for   {@link LocationRecord}, convert an object to specific string view <pre>  {@code Result example:}""location"":  ""lon"": 10, ""lat"": 10}, ""continent"": ""NORTH_AMERICA"", ""waterBody"": null, //.....more fields }</pre>
 */
private Consumer<SpecificRecordBase> getLocationRecordConverter(){
  return record -> {
    LocationRecord location=(LocationRecord)record;
    if (Objects.isNull(location.getDecimalLongitude()) || Objects.isNull(location.getDecimalLatitude())) {
      addJsonObject(""String_Node_Str"");
    }
 else {
      addJsonObject(""String_Node_Str"",JsonFiled.create(""String_Node_Str"",location.getDecimalLongitude().toString()),JsonFiled.create(""String_Node_Str"",location.getDecimalLatitude().toString()));
    }
    addCommonFields(record);
  }
;
}","/** 
 * String converter for   {@link LocationRecord}, convert an object to specific string view <pre>  {@code Result example:}""location"":  ""lon"": 10, ""lat"": 10}, ""continent"": ""NORTH_AMERICA"", ""waterBody"": null, //.....more fields }</pre>
 */
private Consumer<SpecificRecordBase> getLocationRecordConverter(){
  return record -> {
    LocationRecord location=(LocationRecord)record;
    if (location.getDecimalLongitude() == null || location.getDecimalLatitude() == null) {
      this.addJsonObject(""String_Node_Str"");
    }
 else {
      ObjectNode node=mapper.createObjectNode();
      node.put(""String_Node_Str"",location.getDecimalLongitude().toString());
      node.put(""String_Node_Str"",location.getDecimalLatitude().toString());
      this.addJsonObject(""String_Node_Str"",node);
    }
    this.addCommonFields(record);
  }
;
}"
39783,"private GbifRecords2JsonConverter(SpecificRecordBase[] bases){
  setSpecificRecordBase(bases);
  setEscapeKeys(ESCAPE_KEYS);
  setReplaceKeys(REPLACE_KEYS);
  setClearValues(CLEAR_VALUES);
  addSpecificConverter(ExtendedRecord.class,getExtendedRecordConverter());
  addSpecificConverter(LocationRecord.class,getLocationRecordConverter());
  addSpecificConverter(TaxonRecord.class,getTaxonomyRecordConverter());
}","private GbifRecords2JsonConverter(SpecificRecordBase[] bases){
  this.setSpecificRecordBase(bases).setSkipKeys(SKIP_KEYS).setReplaceKeys(REPLACE_KEYS).addSpecificConverter(ExtendedRecord.class,getExtendedRecordConverter()).addSpecificConverter(LocationRecord.class,getLocationRecordConverter()).addSpecificConverter(TaxonRecord.class,getTaxonomyRecordConverter());
}"
39784,"/** 
 * Convert - ""key"":""value"" and check some incorrect symbols for json 
 */
Records2JsonConverter addJsonFieldNoCheck(String key,Object value){
  for (  String rule : replaceKeys) {
    key=key.replaceAll(rule,""String_Node_Str"");
  }
  sb.append(""String_Node_Str"").append(key).append(""String_Node_Str"");
  if (Objects.isNull(value)) {
    return append(""String_Node_Str"");
  }
  if (value instanceof String) {
    String result=((String)value);
    if (clearValues.contains(key)) {
      String r12=PATTERN12.matcher(result).replaceAll(""String_Node_Str"");
      result=PATTERN13.matcher(r12).replaceAll(""String_Node_Str"");
    }
    String r1=PATTERN1.matcher(result).replaceAll(""String_Node_Str"");
    value=PATTERN2.matcher(r1).replaceAll(""String_Node_Str"");
  }
  return append(""String_Node_Str"").append(value).append(""String_Node_Str"");
}","/** 
 * Convert - ""key"":""value"" and check some incorrect symbols for json 
 */
Records2JsonConverter addJsonFieldNoCheck(String key,String value){
  return addJsonFieldNoCheck(mainNode,key,value);
}"
39785,"/** 
 * You want to use another way how to process a specific class, you can use your appender for this object <pre>  {@code Example:}BiConsumer<SpecificRecordBase, StringBuilder> funct = (record, sb) ->  Map<String, String> terms = ((ExtendedRecord) record).getCoreTerms(); String example = map.get(""Example""); sb.append(""\""exampleKey\"":\"""").append(example).append(""\"",""); }; }</pre>
 */
public Records2JsonConverter addSpecificConverter(Class<? extends SpecificRecordBase> type,Consumer<SpecificRecordBase> consumer){
  this.customConvertersMap.put(type,consumer);
  return this;
}","/** 
 * You want to use another way how to process a specific class, you can use your appender for this object <pre>  {@code Example:}BiConsumer<SpecificRecordBase, StringBuilder> funct = (record, sb) ->  Map<String, String> terms = ((ExtendedRecord) record).getCoreTerms(); String example = map.get(""Example""); sb.append(""\""exampleKey\"":\"""").append(example).append(""\"",""); }; }</pre>
 */
public Records2JsonConverter addSpecificConverter(Class<? extends SpecificRecordBase> type,Consumer<SpecificRecordBase> consumer){
  customConvertersMap.put(type,consumer);
  return this;
}"
39786,"Records2JsonConverter addJsonObject(String key,Map<String,String> fields){
  append(""String_Node_Str"").append(key).append(""String_Node_Str"");
  if (!fields.isEmpty()) {
    append(""String_Node_Str"");
    fields.forEach(this::addJsonField);
    append(""String_Node_Str"");
  }
 else {
    append(""String_Node_Str"");
  }
  return this;
}","Records2JsonConverter addJsonObject(String key,Map<String,String> fields){
  ObjectNode node=mapper.createObjectNode();
  fields.forEach((k,v) -> addJsonField(node,k,v));
  mainNode.set(key,node);
  return this;
}"
39787,"/** 
 * Check field in escapeKeys and convert - ""key"":""value"" 
 */
Records2JsonConverter addJsonField(String key,Object value){
  if (escapeKeys.contains(key)) {
    return this;
  }
  return addJsonFieldNoCheck(key,value);
}","/** 
 * Check field in skipKeys and convert - ""key"":""value"" 
 */
Records2JsonConverter addJsonField(String key,String value){
  return addJsonField(mainNode,key,value);
}"
39788,"public String buildJson(){
  Arrays.stream(bases).forEach(record -> {
    Consumer<SpecificRecordBase> consumer=this.customConvertersMap.get(record.getClass());
    if (Objects.nonNull(consumer)) {
      consumer.accept(record);
    }
 else {
      addCommonFields(record);
    }
  }
);
  return filterAndConvert();
}","public String buildJson(){
  Arrays.stream(bases).forEach(record -> {
    Consumer<SpecificRecordBase> consumer=customConvertersMap.get(record.getClass());
    if (consumer != null) {
      consumer.accept(record);
    }
 else {
      addCommonFields(record);
    }
  }
);
  return mainNode.toString();
}"
39789,"public static JsonFiled create(String key,String value){
  return new JsonFiled(key,value);
}","public static Records2JsonConverter create(SpecificRecordBase... bases){
  return new Records2JsonConverter().setSpecificRecordBase(bases);
}"
39790,"/** 
 * Common way how to convert   {@link SpecificRecordBase} to json string 
 */
Records2JsonConverter addCommonFields(SpecificRecordBase base){
  base.getSchema().getFields().forEach(field -> addJsonField(field.name(),base.get(field.pos())));
  return this;
}","/** 
 * Common way how to convert   {@link SpecificRecordBase} to json string 
 */
Records2JsonConverter addCommonFields(SpecificRecordBase base){
  base.getSchema().getFields().forEach(field -> Optional.ofNullable(base.get(field.pos())).map(Object::toString).ifPresent(r -> addJsonField(field.name(),r)));
  return this;
}"
39791,"static Pipeline buildPipeline(DwcaMiniPipelineOptions options){
  LOG.info(""String_Node_Str"");
  Pipeline pipeline=Pipeline.create(options);
  Coders.registerAvroCoders(pipeline,ExtendedRecord.class);
  LOG.info(""String_Node_Str"");
  PCollection<ExtendedRecord> rawRecords=pipeline.apply(""String_Node_Str"",DwCAIO.Read.withPaths(options.getInputPath(),OutputWriter.getTempDir(options)));
  LOG.info(""String_Node_Str"");
  UniqueOccurrenceIdTransform uniquenessTransform=UniqueOccurrenceIdTransform.create().withAvroCoders(pipeline);
  PCollectionTuple uniqueTuple=rawRecords.apply(uniquenessTransform);
  PCollection<ExtendedRecord> verbatimRecords=uniqueTuple.get(uniquenessTransform.getDataTag());
  if (DWCA_TO_AVRO == options.getPipelineStep() || !options.getIgnoreIntermediateOutputs()) {
    OutputWriter.writeToAvro(verbatimRecords,ExtendedRecord.class,options,FsUtils.buildPathString(OutputWriter.getRootPath(options),""String_Node_Str""));
  }
  if (DWCA_TO_AVRO == options.getPipelineStep()) {
    LOG.info(""String_Node_Str"",DWCA_TO_AVRO);
    return pipeline;
  }
  LOG.info(""String_Node_Str"");
  final Config wsConfig=WsConfigFactory.getConfig(options.getGbifEnv());
  LOG.info(""String_Node_Str"");
  TaxonRecordTransform taxonTransform=TaxonRecordTransform.create(wsConfig);
  taxonTransform.withAvroCoders(pipeline);
  PCollectionTuple taxonRecordTuple=verbatimRecords.apply(""String_Node_Str"",taxonTransform);
  PCollection<KV<String,TaxonRecord>> interpretedTaxonRecords=taxonRecordTuple.get(taxonTransform.getDataTag());
  OutputWriter.writeInterpretationResult(taxonRecordTuple,TaxonRecord.class,taxonTransform,options,GbifInterpretationType.TAXONOMY);
  LOG.info(""String_Node_Str"");
  LocationRecordTransform locationTransform=LocationRecordTransform.create(wsConfig);
  locationTransform.withAvroCoders(pipeline);
  PCollectionTuple locationRecordTuple=verbatimRecords.apply(""String_Node_Str"",locationTransform);
  PCollection<KV<String,LocationRecord>> interpretedLocationRecords=locationRecordTuple.get(locationTransform.getDataTag());
  OutputWriter.writeInterpretationResult(locationRecordTuple,LocationRecord.class,locationTransform,options,GbifInterpretationType.LOCATION);
  LOG.info(""String_Node_Str"");
  TemporalRecordTransform temporalTransform=TemporalRecordTransform.create();
  temporalTransform.withAvroCoders(pipeline);
  PCollectionTuple temporalRecordTuple=verbatimRecords.apply(""String_Node_Str"",temporalTransform);
  PCollection<KV<String,TemporalRecord>> interpretedTemporalRecords=temporalRecordTuple.get(temporalTransform.getDataTag());
  OutputWriter.writeInterpretationResult(temporalRecordTuple,TemporalRecord.class,temporalTransform,options,GbifInterpretationType.TEMPORAL);
  LOG.info(""String_Node_Str"");
  InterpretedExtendedRecordTransform interpretedRecordTransform=InterpretedExtendedRecordTransform.create();
  interpretedRecordTransform.withAvroCoders(pipeline);
  PCollectionTuple interpretedRecordTuple=verbatimRecords.apply(""String_Node_Str"",interpretedRecordTransform);
  PCollection<KV<String,InterpretedExtendedRecord>> interpretedRecords=interpretedRecordTuple.get(interpretedRecordTransform.getDataTag());
  OutputWriter.writeInterpretationResult(interpretedRecordTuple,InterpretedExtendedRecord.class,interpretedRecordTransform,options,GbifInterpretationType.COMMON);
  LOG.info(""String_Node_Str"");
  MultimediaRecordTransform multimediaTransform=MultimediaRecordTransform.create();
  multimediaTransform.withAvroCoders(pipeline);
  PCollectionTuple multimediaRecordTuple=verbatimRecords.apply(""String_Node_Str"",multimediaTransform);
  PCollection<KV<String,MultimediaRecord>> interpretedMultimediaRecords=multimediaRecordTuple.get(multimediaTransform.getDataTag());
  OutputWriter.writeInterpretationResult(multimediaRecordTuple,MultimediaRecord.class,multimediaTransform,options,GbifInterpretationType.MULTIMEDIA);
  if (INTERPRET == options.getPipelineStep()) {
    LOG.info(""String_Node_Str"",INTERPRET);
    return pipeline;
  }
  LOG.info(""String_Node_Str"");
  final TupleTag<ExtendedRecord> extendedRecordTag=new TupleTag<ExtendedRecord>(){
  }
;
  final TupleTag<InterpretedExtendedRecord> interRecordTag=new TupleTag<InterpretedExtendedRecord>(){
  }
;
  final TupleTag<TemporalRecord> temporalTag=new TupleTag<TemporalRecord>(){
  }
;
  final TupleTag<LocationRecord> locationTag=new TupleTag<LocationRecord>(){
  }
;
  final TupleTag<TaxonRecord> taxonomyTag=new TupleTag<TaxonRecord>(){
  }
;
  final TupleTag<MultimediaRecord> multimediaTag=new TupleTag<MultimediaRecord>(){
  }
;
  PCollection<KV<String,ExtendedRecord>> verbatimRecordsMapped=verbatimRecords.apply(""String_Node_Str"",MapElements.into(new TypeDescriptor<KV<String,ExtendedRecord>>(){
  }
).via((  ExtendedRecord ex) -> KV.of(ex.getId(),ex)));
  PCollection<KV<String,CoGbkResult>> groupedCollection=KeyedPCollectionTuple.of(interRecordTag,interpretedRecords).and(temporalTag,interpretedTemporalRecords).and(locationTag,interpretedLocationRecords).and(taxonomyTag,interpretedTaxonRecords).and(multimediaTag,interpretedMultimediaRecords).and(extendedRecordTag,verbatimRecordsMapped).apply(CoGroupByKey.create());
  PCollection<String> resultCollection=groupedCollection.apply(""String_Node_Str"",ParDo.of(new DoFn<KV<String,CoGbkResult>,String>(){
    @ProcessElement public void processElement(    ProcessContext c){
      CoGbkResult value=c.element().getValue();
      String key=c.element().getKey();
      InterpretedExtendedRecord interRecord=value.getOnly(interRecordTag,InterpretedExtendedRecord.newBuilder().setId(key).build());
      TemporalRecord temporal=value.getOnly(temporalTag,TemporalRecord.newBuilder().setId(key).build());
      LocationRecord location=value.getOnly(locationTag,LocationRecord.newBuilder().setId(key).build());
      TaxonRecord taxon=value.getOnly(taxonomyTag,TaxonRecord.newBuilder().setId(key).build());
      MultimediaRecord multimedia=value.getOnly(multimediaTag,MultimediaRecord.newBuilder().setId(key).build());
      ExtendedRecord extendedRecord=value.getOnly(extendedRecordTag,ExtendedRecord.newBuilder().setId(key).build());
      c.output(EsSchemaConverter.toIndex(interRecord,temporal,location,taxon,multimedia,extendedRecord));
    }
  }
));
  ElasticsearchIO.ConnectionConfiguration esBeamConfig=ElasticsearchIO.ConnectionConfiguration.create(options.getESHosts(),options.getESIndexName(),""String_Node_Str"");
  resultCollection.apply(ElasticsearchIO.write().withConnectionConfiguration(esBeamConfig).withMaxBatchSizeBytes(options.getESMaxBatchSize()).withMaxBatchSize(options.getESMaxBatchSizeBytes()));
  return pipeline;
}","static Pipeline buildPipeline(DwcaMiniPipelineOptions options){
  LOG.info(""String_Node_Str"");
  Pipeline pipeline=Pipeline.create(options);
  Coders.registerAvroCoders(pipeline,ExtendedRecord.class);
  LOG.info(""String_Node_Str"");
  PCollection<ExtendedRecord> rawRecords=pipeline.apply(""String_Node_Str"",Files.isDirectory(Paths.get(options.getInputPath())) ? DwCAIO.Read.withPaths(options.getInputPath()) : DwCAIO.Read.withPaths(options.getInputPath(),OutputWriter.getTempDir(options)));
  LOG.info(""String_Node_Str"");
  UniqueOccurrenceIdTransform uniquenessTransform=UniqueOccurrenceIdTransform.create().withAvroCoders(pipeline);
  PCollectionTuple uniqueTuple=rawRecords.apply(uniquenessTransform);
  PCollection<ExtendedRecord> verbatimRecords=uniqueTuple.get(uniquenessTransform.getDataTag());
  if (DWCA_TO_AVRO == options.getPipelineStep() || !options.getIgnoreIntermediateOutputs()) {
    OutputWriter.writeToAvro(verbatimRecords,ExtendedRecord.class,options,FsUtils.buildPathString(OutputWriter.getRootPath(options),""String_Node_Str""));
  }
  if (DWCA_TO_AVRO == options.getPipelineStep()) {
    LOG.info(""String_Node_Str"",DWCA_TO_AVRO);
    return pipeline;
  }
  LOG.info(""String_Node_Str"");
  final Config wsConfig=WsConfigFactory.getConfig(options.getGbifEnv());
  LOG.info(""String_Node_Str"");
  TaxonRecordTransform taxonTransform=TaxonRecordTransform.create(wsConfig);
  taxonTransform.withAvroCoders(pipeline);
  PCollectionTuple taxonRecordTuple=verbatimRecords.apply(""String_Node_Str"",taxonTransform);
  PCollection<KV<String,TaxonRecord>> interpretedTaxonRecords=taxonRecordTuple.get(taxonTransform.getDataTag());
  OutputWriter.writeInterpretationResult(taxonRecordTuple,TaxonRecord.class,taxonTransform,options,GbifInterpretationType.TAXONOMY);
  LOG.info(""String_Node_Str"");
  LocationRecordTransform locationTransform=LocationRecordTransform.create(wsConfig);
  locationTransform.withAvroCoders(pipeline);
  PCollectionTuple locationRecordTuple=verbatimRecords.apply(""String_Node_Str"",locationTransform);
  PCollection<KV<String,LocationRecord>> interpretedLocationRecords=locationRecordTuple.get(locationTransform.getDataTag());
  OutputWriter.writeInterpretationResult(locationRecordTuple,LocationRecord.class,locationTransform,options,GbifInterpretationType.LOCATION);
  LOG.info(""String_Node_Str"");
  TemporalRecordTransform temporalTransform=TemporalRecordTransform.create();
  temporalTransform.withAvroCoders(pipeline);
  PCollectionTuple temporalRecordTuple=verbatimRecords.apply(""String_Node_Str"",temporalTransform);
  PCollection<KV<String,TemporalRecord>> interpretedTemporalRecords=temporalRecordTuple.get(temporalTransform.getDataTag());
  OutputWriter.writeInterpretationResult(temporalRecordTuple,TemporalRecord.class,temporalTransform,options,GbifInterpretationType.TEMPORAL);
  LOG.info(""String_Node_Str"");
  InterpretedExtendedRecordTransform interpretedRecordTransform=InterpretedExtendedRecordTransform.create();
  interpretedRecordTransform.withAvroCoders(pipeline);
  PCollectionTuple interpretedRecordTuple=verbatimRecords.apply(""String_Node_Str"",interpretedRecordTransform);
  PCollection<KV<String,InterpretedExtendedRecord>> interpretedRecords=interpretedRecordTuple.get(interpretedRecordTransform.getDataTag());
  OutputWriter.writeInterpretationResult(interpretedRecordTuple,InterpretedExtendedRecord.class,interpretedRecordTransform,options,GbifInterpretationType.COMMON);
  LOG.info(""String_Node_Str"");
  MultimediaRecordTransform multimediaTransform=MultimediaRecordTransform.create();
  multimediaTransform.withAvroCoders(pipeline);
  PCollectionTuple multimediaRecordTuple=verbatimRecords.apply(""String_Node_Str"",multimediaTransform);
  PCollection<KV<String,MultimediaRecord>> interpretedMultimediaRecords=multimediaRecordTuple.get(multimediaTransform.getDataTag());
  OutputWriter.writeInterpretationResult(multimediaRecordTuple,MultimediaRecord.class,multimediaTransform,options,GbifInterpretationType.MULTIMEDIA);
  if (INTERPRET == options.getPipelineStep()) {
    LOG.info(""String_Node_Str"",INTERPRET);
    return pipeline;
  }
  LOG.info(""String_Node_Str"");
  final TupleTag<ExtendedRecord> extendedRecordTag=new TupleTag<ExtendedRecord>(){
  }
;
  final TupleTag<InterpretedExtendedRecord> interRecordTag=new TupleTag<InterpretedExtendedRecord>(){
  }
;
  final TupleTag<TemporalRecord> temporalTag=new TupleTag<TemporalRecord>(){
  }
;
  final TupleTag<LocationRecord> locationTag=new TupleTag<LocationRecord>(){
  }
;
  final TupleTag<TaxonRecord> taxonomyTag=new TupleTag<TaxonRecord>(){
  }
;
  final TupleTag<MultimediaRecord> multimediaTag=new TupleTag<MultimediaRecord>(){
  }
;
  PCollection<KV<String,ExtendedRecord>> verbatimRecordsMapped=verbatimRecords.apply(""String_Node_Str"",MapElements.into(new TypeDescriptor<KV<String,ExtendedRecord>>(){
  }
).via((  ExtendedRecord ex) -> KV.of(ex.getId(),ex)));
  PCollection<KV<String,CoGbkResult>> groupedCollection=KeyedPCollectionTuple.of(interRecordTag,interpretedRecords).and(temporalTag,interpretedTemporalRecords).and(locationTag,interpretedLocationRecords).and(taxonomyTag,interpretedTaxonRecords).and(multimediaTag,interpretedMultimediaRecords).and(extendedRecordTag,verbatimRecordsMapped).apply(CoGroupByKey.create());
  PCollection<String> resultCollection=groupedCollection.apply(""String_Node_Str"",ParDo.of(new DoFn<KV<String,CoGbkResult>,String>(){
    @ProcessElement public void processElement(    ProcessContext c){
      CoGbkResult value=c.element().getValue();
      String key=c.element().getKey();
      InterpretedExtendedRecord interRecord=value.getOnly(interRecordTag,InterpretedExtendedRecord.newBuilder().setId(key).build());
      TemporalRecord temporal=value.getOnly(temporalTag,TemporalRecord.newBuilder().setId(key).build());
      LocationRecord location=value.getOnly(locationTag,LocationRecord.newBuilder().setId(key).build());
      TaxonRecord taxon=value.getOnly(taxonomyTag,TaxonRecord.newBuilder().setId(key).build());
      MultimediaRecord multimedia=value.getOnly(multimediaTag,MultimediaRecord.newBuilder().setId(key).build());
      ExtendedRecord extendedRecord=value.getOnly(extendedRecordTag,ExtendedRecord.newBuilder().setId(key).build());
      c.output(EsSchemaConverter.toIndex(interRecord,temporal,location,taxon,multimedia,extendedRecord));
    }
  }
));
  ElasticsearchIO.ConnectionConfiguration esBeamConfig=ElasticsearchIO.ConnectionConfiguration.create(options.getESHosts(),options.getESIndexName(),""String_Node_Str"");
  resultCollection.apply(ElasticsearchIO.write().withConnectionConfiguration(esBeamConfig).withMaxBatchSizeBytes(options.getESMaxBatchSize()).withMaxBatchSize(options.getESMaxBatchSizeBytes()));
  return pipeline;
}"
39792,"void run(){
  createIndex().ifPresent(options::setESIndexName);
  Pipeline pipeline=DwcaPipelineBuilder.buildPipeline(options);
  pipeline.run().waitUntilFinish();
  swapIndex();
  Runtime.getRuntime().addShutdownHook(new Thread(() -> {
    LOG.debug(""String_Node_Str"");
    File tmp=Paths.get(DwcaPipelineBuilder.OutputWriter.getTempDir(options)).toFile();
    if (tmp.delete()) {
      LOG.info(""String_Node_Str"",tmp.getPath());
    }
 else {
      LOG.warn(""String_Node_Str"",tmp.getPath());
    }
  }
));
}","void run(){
  createIndex().ifPresent(options::setESIndexName);
  Pipeline pipeline=DwcaPipelineBuilder.buildPipeline(options);
  pipeline.run().waitUntilFinish();
  swapIndex();
  Runtime.getRuntime().addShutdownHook(new Thread(() -> {
    LOG.debug(""String_Node_Str"");
    File tmp=Paths.get(DwcaPipelineBuilder.OutputWriter.getTempDir(options)).toFile();
    if (tmp.exists()) {
      try {
        FileUtils.deleteDirectory(tmp);
        LOG.info(""String_Node_Str"",tmp.getPath());
      }
 catch (      IOException e) {
        LOG.warn(""String_Node_Str"",tmp.getPath());
      }
    }
  }
));
}"
39793,"public static ParsedTemporalDates parse(String rawYear,String rawMonth,String rawDay,String rawDate){
  if (isEmpty(rawYear) && isEmpty(rawDate)) {
    return new ParsedTemporalDates();
  }
  List<IssueType> issueList=new ArrayList<>();
  ChronoAccumulator baseAccumulator=ChronoAccumulator.from(rawYear,rawMonth,rawDay);
  Year year=ChronoAccumulatorConverter.getYear(baseAccumulator,issueList).orElse(null);
  Month month=ChronoAccumulatorConverter.getMonth(baseAccumulator,issueList).orElse(null);
  Integer day=ChronoAccumulatorConverter.getDay(baseAccumulator,issueList).orElse(null);
  Temporal base=TEMPORAL_FUNC.apply(baseAccumulator,issueList);
  ParsedTemporalDates temporalDates=new ParsedTemporalDates(year,month,day,base);
  if (isEmpty(rawDate)) {
    return temporalDates;
  }
  String[] rawPeriod=DelimiterUtils.splitPeriod(rawDate);
  String rawFrom=rawPeriod[0];
  String rawTo=rawPeriod[1];
  ChronoAccumulator fromAccumulator=ParserRawDateTime.parse(rawFrom,null);
  ChronoAccumulator toAccumulator=ParserRawDateTime.parse(rawTo,fromAccumulator.getLastParsed().orElse(null));
  if (fromAccumulator.areAllNumeric() || (!isEmpty(rawTo) && toAccumulator.areAllNumeric())) {
    issueList.add(IssueType.RECORDED_DATE_INVALID);
  }
  if (toAccumulator.getLastParsed().isPresent()) {
    toAccumulator.mergeAbsent(fromAccumulator);
  }
 else {
    fromAccumulator.mergeReplace(baseAccumulator);
  }
  Temporal fromTemporal=TEMPORAL_FUNC.apply(fromAccumulator,issueList);
  Temporal toTemporal=TEMPORAL_FUNC.apply(toAccumulator,issueList);
  if (isValidRange(fromTemporal,toTemporal)) {
    Temporal tmp=fromTemporal;
    fromTemporal=toTemporal;
    toTemporal=tmp;
    issueList.add(IssueType.DAY_OUT_OF_RANGE);
  }
  temporalDates.setFromDate(fromTemporal);
  temporalDates.setToDate(toTemporal);
  temporalDates.setIssueList(issueList);
  return temporalDates;
}","public static ParsedTemporalDates parse(String rawYear,String rawMonth,String rawDay,String rawDate){
  if (isEmpty(rawYear) && isEmpty(rawDate)) {
    return new ParsedTemporalDates();
  }
  List<IssueType> issueList=new ArrayList<>();
  ChronoAccumulator baseAccumulator=ChronoAccumulator.from(rawYear,rawMonth,rawDay);
  Year year=ChronoAccumulatorConverter.getYear(baseAccumulator,issueList).orElse(null);
  Month month=ChronoAccumulatorConverter.getMonth(baseAccumulator,issueList).orElse(null);
  Integer day=ChronoAccumulatorConverter.getDay(baseAccumulator,issueList).orElse(null);
  Temporal base=TEMPORAL_FUNC.apply(baseAccumulator,issueList);
  ParsedTemporalDates temporalDates=new ParsedTemporalDates(year,month,day,base);
  if (isEmpty(rawDate)) {
    return temporalDates;
  }
  String[] rawPeriod=DelimiterUtils.splitPeriod(rawDate);
  String rawFrom=rawPeriod[0];
  String rawTo=rawPeriod[1];
  ChronoAccumulator fromAccumulator=ParserRawDateTime.parse(rawFrom,null);
  ChronoAccumulator toAccumulator=ParserRawDateTime.parse(rawTo,fromAccumulator.getLastParsed().orElse(null));
  if (fromAccumulator.areAllNumeric() || (!isEmpty(rawTo) && toAccumulator.areAllNumeric())) {
    issueList.add(IssueType.RECORDED_DATE_INVALID);
  }
  if (toAccumulator.getLastParsed().isPresent()) {
    toAccumulator.mergeAbsent(fromAccumulator);
  }
 else {
    fromAccumulator.mergeReplace(baseAccumulator);
  }
  Temporal fromTemporal=TEMPORAL_FUNC.apply(fromAccumulator,issueList);
  Temporal toTemporal=TEMPORAL_FUNC.apply(toAccumulator,issueList);
  if (!isValidDateType(fromTemporal,toTemporal)) {
    toTemporal=null;
    issueList.add(IssueType.RECORDED_DATE_INVALID);
  }
  if (!isValidRange(fromTemporal,toTemporal)) {
    Temporal tmp=fromTemporal;
    fromTemporal=toTemporal;
    toTemporal=tmp;
    issueList.add(IssueType.DAY_OUT_OF_RANGE);
  }
  temporalDates.setFromDate(fromTemporal);
  temporalDates.setToDate(toTemporal);
  temporalDates.setIssueList(issueList);
  return temporalDates;
}"
39794,"/** 
 * Compare dates, FROM cannot be greater than TO 
 */
private static boolean isValidRange(Temporal from,Temporal to){
  if (Objects.isNull(from) || Objects.isNull(to)) {
    return false;
  }
  TemporalUnit unit=null;
  if (from instanceof Year) {
    unit=ChronoUnit.YEARS;
  }
 else   if (from instanceof YearMonth) {
    unit=ChronoUnit.MONTHS;
  }
 else   if (from instanceof LocalDate) {
    unit=ChronoUnit.DAYS;
  }
 else   if (from instanceof LocalDateTime) {
    unit=ChronoUnit.SECONDS;
  }
  return from.until(to,unit) < 0;
}","/** 
 * Compare dates, FROM cannot be greater than TO 
 */
private static boolean isValidRange(Temporal from,Temporal to){
  if (Objects.isNull(from) || Objects.isNull(to)) {
    return true;
  }
  TemporalUnit unit=null;
  if (from instanceof Year) {
    unit=ChronoUnit.YEARS;
  }
 else   if (from instanceof YearMonth) {
    unit=ChronoUnit.MONTHS;
  }
 else   if (from instanceof LocalDate) {
    unit=ChronoUnit.DAYS;
  }
 else   if (from instanceof LocalDateTime) {
    unit=ChronoUnit.SECONDS;
  }
  return from.until(to,unit) >= 0;
}"
39795,"/** 
 * Asserts that the swap operation was done as expected in the embedded ES instance.
 */
protected static void assertSwapResults(String idxAdded,String idxPattern,String alias,Set<String> idxRemoved){
  Response response=null;
  try {
    response=restClient.performRequest(HttpGet.METHOD_NAME,""String_Node_Str"" + idxPattern + ""String_Node_Str""+ alias);
  }
 catch (  IOException e) {
    Assert.fail(e.getMessage());
  }
  Set<String> indexesFound=ResponseParser.parseIndexesInAliasResponse(response.getEntity());
  assertEquals(1,indexesFound.size());
  assertTrue(indexesFound.contains(idxAdded));
  for (  String removed : idxRemoved) {
    try {
      response=restClient.performRequest(HttpGet.METHOD_NAME,""String_Node_Str"" + removed);
    }
 catch (    ResponseException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getResponse().getStatusLine().getStatusCode());
    }
catch (    IOException e) {
      Assert.fail(e.getMessage());
    }
  }
}","/** 
 * Asserts that the swap operation was done as expected in the embedded ES instance.
 */
protected static void assertSwapResults(String idxAdded,String idxPattern,String alias,Set<String> idxRemoved){
  Response response=null;
  try {
    response=restClient.performRequest(HttpGet.METHOD_NAME,""String_Node_Str"" + idxPattern + ""String_Node_Str""+ alias);
  }
 catch (  IOException e) {
    Assert.fail(e.getMessage());
  }
  Set<String> indexesFound=ResponseParser.parseIndexesInAliasResponse(response.getEntity());
  assertEquals(1,indexesFound.size());
  assertTrue(indexesFound.contains(idxAdded));
  for (  String removed : idxRemoved) {
    try {
      response=restClient.performRequest(HttpGet.METHOD_NAME,""String_Node_Str"" + removed);
    }
 catch (    ResponseException e) {
      assertEquals(HttpStatus.SC_NOT_FOUND,e.getResponse().getStatusLine().getStatusCode());
    }
catch (    IOException e) {
      throw new AssertionError(e);
    }
  }
}"
39796,"/** 
 * Utility method to add an index to an alias.
 */
protected static void addIndexToAlias(String alias,Set<String> idxToAdd){
  HttpEntity entityBody=EntityBuilder.entityIndexAliasActions(alias,idxToAdd,Collections.emptySet());
  try {
    restClient.performRequest(HttpPost.METHOD_NAME,""String_Node_Str"",Collections.emptyMap(),entityBody);
  }
 catch (  IOException e) {
    Assert.fail(""String_Node_Str"");
  }
}","/** 
 * Utility method to add an index to an alias.
 */
protected static void addIndexToAlias(String alias,Set<String> idxToAdd){
  HttpEntity entityBody=EntityBuilder.entityIndexAliasActions(alias,idxToAdd,Collections.emptySet());
  try {
    restClient.performRequest(HttpPost.METHOD_NAME,""String_Node_Str"",Collections.emptyMap(),entityBody);
  }
 catch (  IOException e) {
    throw new AssertionError(""String_Node_Str"",e);
  }
}"
39797,"@Test public void swapEmptyAliasTest(){
  String idx1=EsService.createIndexWithSettings(getEsClient(),""String_Node_Str"",INDEXING);
  EsService.swapIndexes(getEsClient(),ALIAS_TEST,Collections.singleton(idx1),Collections.emptySet());
  assertSwapResults(idx1,""String_Node_Str"",ALIAS_TEST,Collections.EMPTY_SET);
}","@Test public void swapEmptyAliasTest(){
  String idx1=EsService.createIndexWithSettings(getEsClient(),""String_Node_Str"",INDEXING);
  EsService.swapIndexes(getEsClient(),ALIAS_TEST,Collections.singleton(idx1),Collections.emptySet());
  assertSwapResults(idx1,""String_Node_Str"",ALIAS_TEST,Collections.emptySet());
}"
39798,"@Test(expected=NullPointerException.class) public void testMatchNullTaxonRecord(){
  TaxonomyInterpreter.taxonomyInterpreter(null,null).apply(null);
}","@Test(expected=NullPointerException.class) public void testMatchNullTaxonRecord(){
  Interpretation<ExtendedRecord> interpretation=TaxonomyInterpreter.taxonomyInterpreter(null,null).apply(null);
}"
39799,"@Test public void testCeratiaceae() throws IOException {
  ExtendedRecord record=ExtendedRecordCustomBuilder.create().kingdom(""String_Node_Str"").phylum(""String_Node_Str"").clazz(""String_Node_Str"").order(""String_Node_Str"").family(""String_Node_Str"").genus(""String_Node_Str"").name(""String_Node_Str"").rank(Rank.SPECIES.name()).id(TEST_RECORD_ID).build();
  enqueueResponse(CERATIACEAE_RESPONSE);
  TaxonRecord taxonRecord=new TaxonRecord();
  TaxonomyInterpreter.taxonomyInterpreter(taxonRecord,WS_PROPERTIES_PATH).apply(record);
  Map<Rank,RankedName> ranksResponse=taxonRecord.getClassification().stream().collect(Collectors.toMap(RankedName::getRank,rankedName -> rankedName));
  Assert.assertEquals(7598904,taxonRecord.getUsage().getKey().intValue());
  Assert.assertEquals(7479242,ranksResponse.get(Rank.FAMILY).getKey().intValue());
  Assert.assertEquals(""String_Node_Str"",taxonRecord.getUsage().getName());
}","@Test public void testCeratiaceae() throws IOException {
  ExtendedRecord record=ExtendedRecordCustomBuilder.create().kingdom(""String_Node_Str"").phylum(""String_Node_Str"").clazz(""String_Node_Str"").order(""String_Node_Str"").family(""String_Node_Str"").genus(""String_Node_Str"").name(""String_Node_Str"").rank(Rank.SPECIES.name()).id(TEST_RECORD_ID).build();
  enqueueResponse(CERATIACEAE_RESPONSE);
  TaxonRecord taxonRecord=new TaxonRecord();
  Interpretation<ExtendedRecord> interpretation=TaxonomyInterpreter.taxonomyInterpreter(taxonRecord,WS_PROPERTIES_PATH).apply(record);
  Map<Rank,RankedName> ranksResponse=taxonRecord.getClassification().stream().collect(Collectors.toMap(RankedName::getRank,rankedName -> rankedName));
  Assert.assertNotNull(interpretation);
  Assert.assertEquals(7598904,taxonRecord.getUsage().getKey().intValue());
  Assert.assertEquals(7479242,ranksResponse.get(Rank.FAMILY).getKey().intValue());
  Assert.assertEquals(""String_Node_Str"",taxonRecord.getUsage().getName());
}"
39800,"@Test(expected=NullPointerException.class) public void testMatchNullArgs(){
  TaxonRecord taxonRecord=new TaxonRecord();
  TaxonomyInterpreter.taxonomyInterpreter(taxonRecord,WS_PROPERTIES_PATH).apply(null);
}","@Test(expected=NullPointerException.class) public void testMatchNullArgs(){
  TaxonRecord taxonRecord=new TaxonRecord();
  Interpretation<ExtendedRecord> interpretation=TaxonomyInterpreter.taxonomyInterpreter(taxonRecord,WS_PROPERTIES_PATH).apply(null);
  Assert.fail(""String_Node_Str"");
}"
39801,"@Test public void testOenanthe() throws IOException {
  ExtendedRecord record=ExtendedRecordCustomBuilder.create().kingdom(""String_Node_Str"").name(""String_Node_Str"").authorship(""String_Node_Str"").rank(Rank.GENUS.name()).id(TEST_RECORD_ID).build();
  enqueueResponse(OENANTHE_RESPONSE);
  TaxonRecord taxonRecord=new TaxonRecord();
  TaxonomyInterpreter interpreter=TaxonomyInterpreter.taxonomyInterpreter(taxonRecord,WS_PROPERTIES_PATH);
  interpreter.apply(record);
  Map<Rank,RankedName> ranksResponse=taxonRecord.getClassification().stream().collect(Collectors.toMap(RankedName::getRank,rankedName -> rankedName));
  Assert.assertEquals(3034893,taxonRecord.getUsage().getKey().intValue());
  Assert.assertEquals(6,ranksResponse.get(Rank.KINGDOM).getKey().intValue());
  Assert.assertEquals(""String_Node_Str"",taxonRecord.getUsage().getName());
  record=ExtendedRecordCustomBuilder.create().kingdom(""String_Node_Str"").name(""String_Node_Str"").authorship(""String_Node_Str"").rank(Rank.GENUS.name()).id(TEST_RECORD_ID).build();
  enqueueResponse(OENANTHE_2_RESPONSE);
  interpreter.apply(record);
  ranksResponse=taxonRecord.getClassification().stream().collect(Collectors.toMap(RankedName::getRank,rankedName -> rankedName));
  Assert.assertEquals(3034893,taxonRecord.getUsage().getKey().intValue());
  Assert.assertEquals(6,ranksResponse.get(Rank.KINGDOM).getKey().intValue());
  Assert.assertEquals(""String_Node_Str"",taxonRecord.getUsage().getName());
  record=ExtendedRecordCustomBuilder.create().kingdom(""String_Node_Str"").name(""String_Node_Str"").authorship(""String_Node_Str"").rank(Rank.GENUS.name()).id(TEST_RECORD_ID).build();
  enqueueResponse(OENANTHE_3_RESPONSE);
  interpreter.apply(record);
  ranksResponse=taxonRecord.getClassification().stream().collect(Collectors.toMap(RankedName::getRank,rankedName -> rankedName));
  Assert.assertEquals(2492483,taxonRecord.getUsage().getKey().intValue());
  Assert.assertEquals(1,ranksResponse.get(Rank.KINGDOM).getKey().intValue());
  Assert.assertEquals(""String_Node_Str"",taxonRecord.getUsage().getName());
}","@Test public void testOenanthe() throws IOException {
  ExtendedRecord record=ExtendedRecordCustomBuilder.create().kingdom(""String_Node_Str"").name(""String_Node_Str"").authorship(""String_Node_Str"").rank(Rank.GENUS.name()).id(TEST_RECORD_ID).build();
  enqueueResponse(OENANTHE_RESPONSE);
  TaxonRecord taxonRecord=new TaxonRecord();
  TaxonomyInterpreter interpreter=TaxonomyInterpreter.taxonomyInterpreter(taxonRecord,WS_PROPERTIES_PATH);
  Interpretation<ExtendedRecord> interpretation=interpreter.apply(record);
  Map<Rank,RankedName> ranksResponse=taxonRecord.getClassification().stream().collect(Collectors.toMap(RankedName::getRank,rankedName -> rankedName));
  Assert.assertNotNull(interpretation);
  Assert.assertEquals(3034893,taxonRecord.getUsage().getKey().intValue());
  Assert.assertEquals(6,ranksResponse.get(Rank.KINGDOM).getKey().intValue());
  Assert.assertEquals(""String_Node_Str"",taxonRecord.getUsage().getName());
  record=ExtendedRecordCustomBuilder.create().kingdom(""String_Node_Str"").name(""String_Node_Str"").authorship(""String_Node_Str"").rank(Rank.GENUS.name()).id(TEST_RECORD_ID).build();
  enqueueResponse(OENANTHE_2_RESPONSE);
  Interpretation<ExtendedRecord> interpretationOneanthe2=interpreter.apply(record);
  ranksResponse=taxonRecord.getClassification().stream().collect(Collectors.toMap(RankedName::getRank,rankedName -> rankedName));
  Assert.assertNotNull(interpretationOneanthe2);
  Assert.assertEquals(3034893,taxonRecord.getUsage().getKey().intValue());
  Assert.assertEquals(6,ranksResponse.get(Rank.KINGDOM).getKey().intValue());
  Assert.assertEquals(""String_Node_Str"",taxonRecord.getUsage().getName());
  record=ExtendedRecordCustomBuilder.create().kingdom(""String_Node_Str"").name(""String_Node_Str"").authorship(""String_Node_Str"").rank(Rank.GENUS.name()).id(TEST_RECORD_ID).build();
  enqueueResponse(OENANTHE_3_RESPONSE);
  Interpretation<ExtendedRecord> interpretationOneanthe3=interpreter.apply(record);
  ranksResponse=taxonRecord.getClassification().stream().collect(Collectors.toMap(RankedName::getRank,rankedName -> rankedName));
  Assert.assertNotNull(interpretationOneanthe3);
  Assert.assertEquals(2492483,taxonRecord.getUsage().getKey().intValue());
  Assert.assertEquals(1,ranksResponse.get(Rank.KINGDOM).getKey().intValue());
  Assert.assertEquals(""String_Node_Str"",taxonRecord.getUsage().getName());
}"
39802,"@Test public void testAcceptedUsage() throws IOException {
  ExtendedRecord record=ExtendedRecordCustomBuilder.create().name(""String_Node_Str"").id(TEST_RECORD_ID).build();
  enqueueResponse(AGALLISUS_LEPTUROIDES_RESPONSE);
  TaxonRecord taxonRecord=new TaxonRecord();
  TaxonomyInterpreter.taxonomyInterpreter(taxonRecord,WS_PROPERTIES_PATH).apply(record);
  Assert.assertEquals(1118030,taxonRecord.getUsage().getKey().intValue());
  Assert.assertEquals(1118026,taxonRecord.getAcceptedUsage().getKey().intValue());
  Assert.assertEquals(""String_Node_Str"",taxonRecord.getUsage().getName());
  Assert.assertEquals(""String_Node_Str"",taxonRecord.getAcceptedUsage().getName());
}","@Test public void testAcceptedUsage() throws IOException {
  ExtendedRecord record=ExtendedRecordCustomBuilder.create().name(""String_Node_Str"").id(TEST_RECORD_ID).build();
  enqueueResponse(AGALLISUS_LEPTUROIDES_RESPONSE);
  TaxonRecord taxonRecord=new TaxonRecord();
  Interpretation<ExtendedRecord> interpretation=TaxonomyInterpreter.taxonomyInterpreter(taxonRecord,WS_PROPERTIES_PATH).apply(record);
  Assert.assertNotNull(interpretation);
  Assert.assertEquals(1118030,taxonRecord.getUsage().getKey().intValue());
  Assert.assertEquals(1118026,taxonRecord.getAcceptedUsage().getKey().intValue());
  Assert.assertEquals(""String_Node_Str"",taxonRecord.getUsage().getName());
  Assert.assertEquals(""String_Node_Str"",taxonRecord.getAcceptedUsage().getName());
}"
39803,"@Test public void testOtu() throws IOException {
  ExtendedRecord record=ExtendedRecordCustomBuilder.create().kingdom(""String_Node_Str"").phylum(""String_Node_Str"").family(""String_Node_Str"").name(""String_Node_Str"").rank(Rank.SPECIES.name()).id(TEST_RECORD_ID).build();
  enqueueResponse(ANNELIDA_RESPONSE);
  TaxonRecord taxonRecord=new TaxonRecord();
  TaxonomyInterpreter.taxonomyInterpreter(taxonRecord,WS_PROPERTIES_PATH).apply(record);
  Assert.assertEquals(""String_Node_Str"",taxonRecord.getUsage().getName());
}","@Test public void testOtu() throws IOException {
  ExtendedRecord record=ExtendedRecordCustomBuilder.create().kingdom(""String_Node_Str"").phylum(""String_Node_Str"").family(""String_Node_Str"").name(""String_Node_Str"").rank(Rank.SPECIES.name()).id(TEST_RECORD_ID).build();
  enqueueResponse(ANNELIDA_RESPONSE);
  TaxonRecord taxonRecord=new TaxonRecord();
  Interpretation<ExtendedRecord> interpretation=TaxonomyInterpreter.taxonomyInterpreter(taxonRecord,WS_PROPERTIES_PATH).apply(record);
  Assert.assertNotNull(interpretation);
  Assert.assertEquals(""String_Node_Str"",taxonRecord.getUsage().getName());
}"
39804,"@Test public void testNubLookupGood() throws IOException {
  ExtendedRecord record=ExtendedRecordCustomBuilder.create().kingdom(""String_Node_Str"").genus(""String_Node_Str"").name(""String_Node_Str"").rank(Rank.SPECIES.name()).id(TEST_RECORD_ID).build();
  enqueueResponse(PUMA_CONCOLOR_RESPONSE);
  TaxonRecord taxonRecord=new TaxonRecord();
  TaxonomyInterpreter.taxonomyInterpreter(taxonRecord,WS_PROPERTIES_PATH).apply(record);
  Map<Rank,RankedName> ranksResponse=taxonRecord.getClassification().stream().collect(Collectors.toMap(RankedName::getRank,rankedName -> rankedName));
  Assert.assertEquals(2435099,taxonRecord.getUsage().getKey().intValue());
  Assert.assertEquals(1,ranksResponse.get(Rank.KINGDOM).getKey().intValue());
  Assert.assertEquals(""String_Node_Str"",ranksResponse.get(Rank.PHYLUM).getName());
}","@Test public void testNubLookupGood() throws IOException {
  ExtendedRecord record=ExtendedRecordCustomBuilder.create().kingdom(""String_Node_Str"").genus(""String_Node_Str"").name(""String_Node_Str"").rank(Rank.SPECIES.name()).id(TEST_RECORD_ID).build();
  enqueueResponse(PUMA_CONCOLOR_RESPONSE);
  TaxonRecord taxonRecord=new TaxonRecord();
  Interpretation<ExtendedRecord> interpretation=TaxonomyInterpreter.taxonomyInterpreter(taxonRecord,WS_PROPERTIES_PATH).apply(record);
  Map<Rank,RankedName> ranksResponse=taxonRecord.getClassification().stream().collect(Collectors.toMap(RankedName::getRank,rankedName -> rankedName));
  Assert.assertNotNull(interpretation);
  Assert.assertEquals(2435099,taxonRecord.getUsage().getKey().intValue());
  Assert.assertEquals(1,ranksResponse.get(Rank.KINGDOM).getKey().intValue());
  Assert.assertEquals(""String_Node_Str"",ranksResponse.get(Rank.PHYLUM).getName());
}"
39805,"@Test public void testAssembledAuthor() throws IOException {
  ExtendedRecord record=ExtendedRecordCustomBuilder.create().kingdom(""String_Node_Str"").genus(""String_Node_Str"").name(""String_Node_Str"").authorship(""String_Node_Str"").rank(Rank.SPECIES.name()).id(TEST_RECORD_ID).build();
  enqueueResponse(PUMA_CONCOLOR_RESPONSE);
  TaxonRecord taxonRecord=new TaxonRecord();
  TaxonomyInterpreter interpreter=TaxonomyInterpreter.taxonomyInterpreter(taxonRecord,WS_PROPERTIES_PATH);
  interpreter.apply(record);
  Map<Rank,RankedName> ranksResponse=taxonRecord.getClassification().stream().collect(Collectors.toMap(RankedName::getRank,rankedName -> rankedName));
  Assert.assertEquals(2435099,taxonRecord.getUsage().getKey().intValue());
  Assert.assertEquals(1,ranksResponse.get(Rank.KINGDOM).getKey().intValue());
  Assert.assertEquals(""String_Node_Str"",ranksResponse.get(Rank.PHYLUM).getName());
  record=ExtendedRecordCustomBuilder.create().kingdom(""String_Node_Str"").genus(""String_Node_Str"").name(""String_Node_Str"").rank(Rank.SPECIES.name()).id(TEST_RECORD_ID).build();
  enqueueResponse(PUMA_CONCOLOR_2_RESPONSE);
  interpreter.apply(record);
  ranksResponse=taxonRecord.getClassification().stream().collect(Collectors.toMap(RankedName::getRank,rankedName -> rankedName));
  Assert.assertEquals(2435099,taxonRecord.getUsage().getKey().intValue());
  Assert.assertEquals(1,ranksResponse.get(Rank.KINGDOM).getKey().intValue());
  Assert.assertEquals(""String_Node_Str"",ranksResponse.get(Rank.PHYLUM).getName());
  record=ExtendedRecordCustomBuilder.create().kingdom(""String_Node_Str"").genus(""String_Node_Str"").name(""String_Node_Str"").authorship(""String_Node_Str"").rank(Rank.SPECIES.name()).id(TEST_RECORD_ID).build();
  enqueueResponse(PUMA_CONCOLOR_3_RESPONSE);
  interpreter.apply(record);
  ranksResponse=taxonRecord.getClassification().stream().collect(Collectors.toMap(RankedName::getRank,rankedName -> rankedName));
  Assert.assertEquals(2435099,taxonRecord.getUsage().getKey().intValue());
  Assert.assertEquals(1,ranksResponse.get(Rank.KINGDOM).getKey().intValue());
  Assert.assertEquals(""String_Node_Str"",ranksResponse.get(Rank.PHYLUM).getName());
}","@Test public void testAssembledAuthor() throws IOException {
  ExtendedRecord record=ExtendedRecordCustomBuilder.create().kingdom(""String_Node_Str"").genus(""String_Node_Str"").name(""String_Node_Str"").authorship(""String_Node_Str"").rank(Rank.SPECIES.name()).id(TEST_RECORD_ID).build();
  enqueueResponse(PUMA_CONCOLOR_RESPONSE);
  TaxonRecord taxonRecord=new TaxonRecord();
  TaxonomyInterpreter interpreter=TaxonomyInterpreter.taxonomyInterpreter(taxonRecord,WS_PROPERTIES_PATH);
  Interpretation<ExtendedRecord> interpretation=interpreter.apply(record);
  Map<Rank,RankedName> ranksResponse=taxonRecord.getClassification().stream().collect(Collectors.toMap(RankedName::getRank,rankedName -> rankedName));
  Assert.assertNotNull(interpretation);
  Assert.assertEquals(2435099,taxonRecord.getUsage().getKey().intValue());
  Assert.assertEquals(1,ranksResponse.get(Rank.KINGDOM).getKey().intValue());
  Assert.assertEquals(""String_Node_Str"",ranksResponse.get(Rank.PHYLUM).getName());
  record=ExtendedRecordCustomBuilder.create().kingdom(""String_Node_Str"").genus(""String_Node_Str"").name(""String_Node_Str"").rank(Rank.SPECIES.name()).id(TEST_RECORD_ID).build();
  enqueueResponse(PUMA_CONCOLOR_2_RESPONSE);
  Interpretation<ExtendedRecord> interpretationPuma=interpreter.apply(record);
  ranksResponse=taxonRecord.getClassification().stream().collect(Collectors.toMap(RankedName::getRank,rankedName -> rankedName));
  Assert.assertNotNull(interpretationPuma);
  Assert.assertEquals(2435099,taxonRecord.getUsage().getKey().intValue());
  Assert.assertEquals(1,ranksResponse.get(Rank.KINGDOM).getKey().intValue());
  Assert.assertEquals(""String_Node_Str"",ranksResponse.get(Rank.PHYLUM).getName());
  record=ExtendedRecordCustomBuilder.create().kingdom(""String_Node_Str"").genus(""String_Node_Str"").name(""String_Node_Str"").authorship(""String_Node_Str"").rank(Rank.SPECIES.name()).id(TEST_RECORD_ID).build();
  enqueueResponse(PUMA_CONCOLOR_3_RESPONSE);
  Interpretation<ExtendedRecord> interpretationPuma2=interpreter.apply(record);
  ranksResponse=taxonRecord.getClassification().stream().collect(Collectors.toMap(RankedName::getRank,rankedName -> rankedName));
  Assert.assertNotNull(interpretationPuma2);
  Assert.assertEquals(2435099,taxonRecord.getUsage().getKey().intValue());
  Assert.assertEquals(1,ranksResponse.get(Rank.KINGDOM).getKey().intValue());
  Assert.assertEquals(""String_Node_Str"",ranksResponse.get(Rank.PHYLUM).getName());
}"
39806,"@Test(expected=IllegalArgumentException.class) public void testMatchEmptyArgs(){
  ExtendedRecord record=new ExtendedRecord();
  record.setCoreTerms(new HashMap<>());
  TaxonRecord taxonRecord=new TaxonRecord();
  TaxonomyInterpreter.taxonomyInterpreter(taxonRecord,WS_PROPERTIES_PATH).apply(record);
}","@Test(expected=IllegalArgumentException.class) public void testMatchEmptyArgs(){
  ExtendedRecord record=new ExtendedRecord();
  record.setCoreTerms(new HashMap<>());
  TaxonRecord taxonRecord=new TaxonRecord();
  Interpretation<ExtendedRecord> interpretation=TaxonomyInterpreter.taxonomyInterpreter(taxonRecord,WS_PROPERTIES_PATH).apply(record);
  Assert.fail(""String_Node_Str"");
}"
39807,"/** 
 * Interprets the   {@link DwcTerm#country},   {@link DwcTerm#countryCode},   {@link DwcTerm#decimalLatitude} and the{@link DwcTerm#decimalLongitude} terms.
 */
static LocationInterpreter interpretCountryAndCoordinates(Location locationRecord,String wsPropertiesPath){
  return (  ExtendedRecord extendedRecord) -> {
    ParsedField<ParsedLocation> parsedResult=LocationParser.parseCountryAndCoordinates(extendedRecord,wsPropertiesPath);
    ParsedLocation parsedLocation=parsedResult.getResult();
    if (parsedLocation.getCountry() != null) {
      locationRecord.setCountry(parsedLocation.getCountry().getTitle());
      locationRecord.setCountryCode(parsedLocation.getCountry().getIso2LetterCode());
    }
    if (parsedLocation.getLatLng() != null) {
      locationRecord.setDecimalLatitude(parsedLocation.getLatLng().getLat());
      locationRecord.setDecimalLongitude(parsedLocation.getLatLng().getLng());
    }
    Interpretation<ExtendedRecord> interpretation=Interpretation.of(extendedRecord);
    parsedResult.getIssues().forEach(issue -> {
      Trace<IssueType> trace;
      if (Objects.nonNull(issue.getTerms()) && !issue.getTerms().isEmpty() && Objects.nonNull(issue.getTerms().get(0))) {
        trace=Trace.of(issue.getTerms().get(0).simpleName(),issue.getIssueType());
      }
 else {
        trace=Trace.of(issue.getIssueType());
      }
      interpretation.withValidation(trace);
    }
);
    return interpretation;
  }
;
}","/** 
 * Interprets the   {@link DwcTerm#country},   {@link DwcTerm#countryCode},   {@link DwcTerm#decimalLatitude} and the{@link DwcTerm#decimalLongitude} terms.
 */
static LocationInterpreter interpretCountryAndCoordinates(Location locationRecord,String wsPropertiesPath){
  return (  ExtendedRecord extendedRecord) -> {
    ParsedField<ParsedLocation> parsedResult=LocationParser.parseCountryAndCoordinates(extendedRecord,wsPropertiesPath);
    ParsedLocation parsedLocation=parsedResult.getResult();
    if (Objects.nonNull(parsedLocation.getCountry())) {
      locationRecord.setCountry(parsedLocation.getCountry().getTitle());
      locationRecord.setCountryCode(parsedLocation.getCountry().getIso2LetterCode());
    }
    if (Objects.nonNull(parsedLocation.getLatLng())) {
      locationRecord.setDecimalLatitude(parsedLocation.getLatLng().getLat());
      locationRecord.setDecimalLongitude(parsedLocation.getLatLng().getLng());
    }
    Interpretation<ExtendedRecord> interpretation=Interpretation.of(extendedRecord);
    parsedResult.getIssues().forEach(issue -> {
      Trace<IssueType> trace;
      if (Objects.nonNull(issue.getTerms()) && !issue.getTerms().isEmpty() && Objects.nonNull(issue.getTerms().get(0))) {
        trace=Trace.of(issue.getTerms().get(0).simpleName(),issue.getIssueType());
      }
 else {
        trace=Trace.of(issue.getIssueType());
      }
      interpretation.withValidation(trace);
    }
);
    return interpretation;
  }
;
}"
39808,"/** 
 * Creates a   {@link OkHttpClient} with {@link Cache} from a specific {@link Config}.
 */
private static OkHttpClient createClientWithCache(Config config){
  File httpCacheDirectory;
  try {
    httpCacheDirectory=Files.createTempFile(config.getCacheConfig().getName(),""String_Node_Str"").toFile();
    httpCacheDirectory.deleteOnExit();
  }
 catch (  IOException e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
  Cache cache=new Cache(httpCacheDirectory,config.getCacheConfig().getSize());
  return new OkHttpClient.Builder().connectTimeout(config.getTimeout(),TimeUnit.SECONDS).readTimeout(config.getTimeout(),TimeUnit.SECONDS).cache(cache).build();
}","/** 
 * Creates a   {@link OkHttpClient} with {@link Cache} from a specific {@link Config}.
 */
private static OkHttpClient createClientWithCache(Config config){
  File httpCacheDirectory;
  try {
    httpCacheDirectory=Files.createTempDirectory(config.getCacheConfig().getName()).toFile();
    LOG.info(""String_Node_Str"",httpCacheDirectory.getAbsolutePath());
  }
 catch (  IOException e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
  Cache cache=new Cache(httpCacheDirectory,config.getCacheConfig().getSize());
  return new OkHttpClient.Builder().connectTimeout(config.getTimeout(),TimeUnit.SECONDS).readTimeout(config.getTimeout(),TimeUnit.SECONDS).cache(cache).build();
}"
39809,"private static Config createConfigInternal(Service service,Path propertiesPath){
  Properties props=loadProperties(propertiesPath).orElseThrow(() -> new IllegalArgumentException(""String_Node_Str"" + propertiesPath));
  String basePath=Optional.ofNullable(props.getProperty(generatePropertyName(service,WS_BASE_PATH_PROP))).filter(prop -> !prop.isEmpty()).orElseThrow(() -> new IllegalArgumentException(""String_Node_Str""));
  Config config=new Config();
  config.setBasePath(basePath);
  config.setTimeout(Long.parseLong(props.getProperty(generatePropertyName(service,WS_TIMEOUT_PROP),DEFAULT_TIMEOUT)));
  String cacheName=service.name().toLowerCase().concat(DEFAULT_CACHE_NAME_SUFFIX);
  Long cacheSize=Long.parseLong(props.getProperty(generatePropertyName(service,CACHE_SIZE_PROP),DEFAULT_CACHE_SIZE)) * 1024 * 1024;
  Config.CacheConfig cacheConfig=new Config.CacheConfig();
  cacheConfig.setName(cacheName);
  cacheConfig.setSize(cacheSize);
  config.setCacheConfig(cacheConfig);
  return config;
}","private static Config createConfigInternal(Service service,Path propertiesPath){
  Properties props=loadProperties(propertiesPath).orElseThrow(() -> new IllegalArgumentException(""String_Node_Str"" + propertiesPath));
  String basePath=Optional.ofNullable(props.getProperty(generatePropertyName(service,WS_BASE_PATH_PROP))).filter(prop -> !prop.isEmpty()).orElseThrow(() -> new IllegalArgumentException(""String_Node_Str""));
  Config config=new Config();
  config.setBasePath(basePath);
  config.setTimeout(Long.parseLong(props.getProperty(generatePropertyName(service,WS_TIMEOUT_PROP),DEFAULT_TIMEOUT)));
  String cacheName=service.name().toLowerCase().concat(DEFAULT_CACHE_NAME_SUFFIX);
  long configSize=Long.parseLong(props.getProperty(generatePropertyName(service,CACHE_SIZE_PROP),DEFAULT_CACHE_SIZE));
  Long cacheSize=configSize * 1024L * 1024L;
  Config.CacheConfig cacheConfig=new Config.CacheConfig();
  cacheConfig.setName(cacheName);
  cacheConfig.setSize(cacheSize);
  config.setCacheConfig(cacheConfig);
  return config;
}"
39810,"private GeocodeServiceClient(String wsPropertiesPath){
  geocodeServiceRest=GeocodeServiceRest.getInstance(HttpConfigFactory.createConfig(Service.GEO_CODE,Paths.get(wsPropertiesPath)));
}","private GeocodeServiceClient(String wsPropertiesPath){
  Config config=HttpConfigFactory.createConfig(Service.GEO_CODE,Paths.get(wsPropertiesPath));
  geocodeServiceRest=GeocodeServiceRest.getInstance(config);
}"
39811,"private static Map<String,String> createParamsMap(LatLng latLng){
  Map<String,String> params=new HashMap<>();
  params.put(""String_Node_Str"",String.valueOf(latLng.getLat()));
  params.put(""String_Node_Str"",String.valueOf(latLng.getLat()));
  return params;
}","private static Map<String,String> createParamsMap(LatLng latLng){
  Map<String,String> params=new HashMap<>();
  params.put(""String_Node_Str"",String.valueOf(latLng.getLat()));
  params.put(""String_Node_Str"",String.valueOf(latLng.getLng()));
  return params;
}"
39812,"@Override protected List<Country> parseResponse(Collection<GeocodeResponse> response){
  if (response != null && !response.isEmpty()) {
    return response.stream().filter(resp -> resp.getIsoCountryCode2Digit() != null).map(resp -> Country.fromIsoCode(resp.getIsoCountryCode2Digit())).collect(Collectors.toList());
  }
  return Collections.emptyList();
}","@Override protected List<Country> parseResponse(Collection<GeocodeResponse> response){
  if (Objects.nonNull(response) && !response.isEmpty()) {
    return response.stream().filter(resp -> Objects.nonNull(resp.getIsoCountryCode2Digit())).map(resp -> Country.fromIsoCode(resp.getIsoCountryCode2Digit())).collect(Collectors.toList());
  }
  return Collections.emptyList();
}"
39813,"public Builder withGenus(String genus){
  this.genus=Strings.emptyToNull(genus);
  return this;
}","Builder withGenus(String genus){
  this.genus=Strings.emptyToNull(genus);
  return this;
}"
39814,"private static Optional<Rank> interpretRank(final Map<String,String> terms,AtomizedFields atomizedFields){
  Optional<Rank> interpretedRank=rankParser().map(terms,Function.identity()).map(rankParseResult -> rankParseResult.isSuccessful() ? rankParseResult.getPayload() : verbatimTaxonRankParser().map(terms,ParseResult::getPayload).get());
  if (!interpretedRank.isPresent()) {
    return fromAtomizedFields(atomizedFields);
  }
  return interpretedRank;
}","private static Optional<Rank> interpretRank(final Map<String,String> terms,AtomizedFields atomizedFields){
  Optional<Rank> interpretedRank=rankParser().map(terms,Function.identity()).map(rankParseResult -> rankParseResult.isSuccessful() ? rankParseResult.getPayload() : verbatimTaxonRankParser().map(terms,ParseResult::getPayload).orElse(null));
  if (!interpretedRank.isPresent()) {
    return fromAtomizedFields(atomizedFields);
  }
  return interpretedRank;
}"
39815,"public Builder withInfraspecificEpithet(String infraspecificEpithet){
  this.infraspecificEpithet=Strings.emptyToNull(infraspecificEpithet);
  return this;
}","Builder withInfraspecificEpithet(String infraspecificEpithet){
  this.infraspecificEpithet=Strings.emptyToNull(infraspecificEpithet);
  return this;
}"
39816,"public Builder withSpecificEpithet(String specificEpithet){
  this.specificEpithet=Strings.emptyToNull(specificEpithet);
  return this;
}","Builder withSpecificEpithet(String specificEpithet){
  this.specificEpithet=Strings.emptyToNull(specificEpithet);
  return this;
}"
39817,"/** 
 * Creates a   {@link OkHttpClient} with {@link Cache} from a specific {@link Config}.
 */
private static OkHttpClient createClientWithCache(Config config){
  File httpCacheDirectory;
  try {
    httpCacheDirectory=Files.createTempDirectory(config.getCacheConfig().getName()).toFile();
  }
 catch (  IOException e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
  Cache cache=new Cache(httpCacheDirectory,config.getCacheConfig().getSize());
  return new OkHttpClient.Builder().connectTimeout(config.getTimeout(),TimeUnit.SECONDS).readTimeout(config.getTimeout(),TimeUnit.SECONDS).cache(cache).build();
}","/** 
 * Creates a   {@link OkHttpClient} with {@link Cache} from a specific {@link Config}.
 */
private static OkHttpClient createClientWithCache(Config config){
  File httpCacheDirectory;
  try {
    httpCacheDirectory=Files.createTempFile(config.getCacheConfig().getName(),""String_Node_Str"").toFile();
    httpCacheDirectory.deleteOnExit();
  }
 catch (  IOException e) {
    throw new IllegalStateException(""String_Node_Str"",e);
  }
  Cache cache=new Cache(httpCacheDirectory,config.getCacheConfig().getSize());
  return new OkHttpClient.Builder().connectTimeout(config.getTimeout(),TimeUnit.SECONDS).readTimeout(config.getTimeout(),TimeUnit.SECONDS).cache(cache).build();
}"
39818,"protected HttpResponse<R> performCall(Map<String,String> params){
  Call<T> call=getCall(params);
  try {
    Response<T> response=call.execute();
    if (!response.isSuccessful()) {
      String errorMessage=getErrorMessage() + response.message();
      return HttpResponse.<R>fail(response.code(),errorMessage,HttpResponse.ErrorCode.CALL_FAILED);
    }
    return HttpResponse.<R>success(parseResponse(response.body()));
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
    String errorMessage=""String_Node_Str"";
    return HttpResponse.<R>fail(errorMessage,HttpResponse.ErrorCode.UNEXPECTED_ERROR);
  }
}","protected HttpResponse<R> performCall(Map<String,String> params){
  Call<T> call=getCall(params);
  try {
    Response<T> response=call.execute();
    if (!response.isSuccessful()) {
      String errorMessage=getErrorMessage() + ""String_Node_Str"" + response.message();
      LOG.error(errorMessage);
      return HttpResponse.<R>fail(response.code(),errorMessage,HttpResponse.ErrorCode.CALL_FAILED);
    }
    return HttpResponse.<R>success(parseResponse(response.body()));
  }
 catch (  IOException e) {
    LOG.error(getErrorMessage(),e);
    return HttpResponse.<R>fail(getErrorMessage(),HttpResponse.ErrorCode.UNEXPECTED_ERROR);
  }
}"
39819,"/** 
 * Matches a   {@link ExtendedRecord} to an existing specie using the species match 2 WS.
 * @param extendedRecord avro file with the taxonomic data
 * @return {@link NameUsageMatch2} with the match received from the WS.
 */
public HttpResponse<NameUsageMatch2> getMatch(ExtendedRecord extendedRecord){
  HttpResponse<NameUsageMatch2> response=tryNameMatch(extendedRecord.getCoreTerms());
  if (isSuccessfulMatch(response) || !hasIdentifications(extendedRecord)) {
    return response;
  }
  LOG.info(""String_Node_Str"");
  List<Map<String,String>> identifications=extendedRecord.getExtensions().get(DwcTerm.Identification.qualifiedName());
  identifications.sort(Comparator.comparing((  Map<String,String> map) -> LocalDateTime.parse(map.get(DwcTerm.dateIdentified.qualifiedName()))).reversed());
  for (  Map<String,String> record : identifications) {
    response=tryNameMatch(record);
    if (isSuccessfulMatch(response)) {
      LOG.info(""String_Node_Str"",record.get(DwcTerm.identificationID.name()));
      return response;
    }
  }
  return response;
}","/** 
 * Matches a   {@link ExtendedRecord} to an existing specie using the species match 2 WS.
 * @param extendedRecord avro file with the taxonomic data
 * @return {@link NameUsageMatch2} with the match received from the WS.
 */
public HttpResponse<NameUsageMatch2> getMatch(ExtendedRecord extendedRecord){
  HttpResponse<NameUsageMatch2> response=tryNameMatch(extendedRecord.getCoreTerms());
  if (isSuccessfulMatch(response) || !hasIdentifications(extendedRecord)) {
    return response;
  }
  LOG.info(""String_Node_Str"");
  List<Map<String,String>> identifications=extendedRecord.getExtensions().get(DwcTerm.Identification.qualifiedName());
  identifications.sort(Comparator.comparing((  Map<String,String> map) -> {
    if (!map.containsKey(DwcTerm.dateIdentified.qualifiedName()) || Objects.isNull(map.get(DwcTerm.dateIdentified.qualifiedName()))) {
      return LocalDateTime.MIN;
    }
    return LocalDateTime.parse(map.get(DwcTerm.dateIdentified.qualifiedName()));
  }
).reversed());
  for (  Map<String,String> record : identifications) {
    response=tryNameMatch(record);
    if (isSuccessfulMatch(response)) {
      LOG.info(""String_Node_Str"",record.get(DwcTerm.identificationID.name()));
      return response;
    }
  }
  return response;
}"
39820,"private static void createAndRunPipeline(String[] args){
  Pipeline pipeline=InterpretationPipelineFactory.from(args).createPipeline();
  LOG.info(""String_Node_Str"",args);
  PipelineResult.State state=pipeline.run().waitUntilFinish();
  LOG.info(""String_Node_Str"",state,args);
}","private static void createAndRunPipeline(String[] args){
  Pipeline pipeline=InterpretationPipelineFactory.from(args).createPipeline();
  LOG.info(""String_Node_Str"",Arrays.asList(args));
  PipelineResult.State state=pipeline.run().waitUntilFinish();
  LOG.info(""String_Node_Str"",state,args);
}"
39821,"@Override public DoFn<ExtendedRecord,KV<String,TaxonRecord>> interpret(){
  return new DoFn<ExtendedRecord,KV<String,TaxonRecord>>(){
    @ProcessElement public void processElement(    ProcessContext context){
      ExtendedRecord extendedRecord=context.element();
      String id=extendedRecord.getId();
      Collection<Validation> validations=new ArrayList<>();
      String wsPropertiesPath=context.getPipelineOptions().as(DataProcessingPipelineOptions.class).getWsProperties();
      TaxonRecord taxonRecord=new TaxonRecord();
      Interpretation.of(extendedRecord).using(TaxonomyInterpreter.taxonomyInterpreter(taxonRecord,wsPropertiesPath)).forEachValidation(trace -> validations.add(toValidation(trace.getContext())));
      context.output(getDataTag(),KV.of(id,taxonRecord));
      if (!validations.isEmpty()) {
        OccurrenceIssue issue=OccurrenceIssue.newBuilder().setId(id).setIssues(validations).build();
        context.output(getIssueTag(),KV.of(id,issue));
      }
    }
  }
;
}","@Override public DoFn<ExtendedRecord,KV<String,TaxonRecord>> interpret(){
  return new DoFn<ExtendedRecord,KV<String,TaxonRecord>>(){
    @ProcessElement public void processElement(    ProcessContext context){
      ExtendedRecord extendedRecord=context.element();
      String id=extendedRecord.getId();
      Collection<Validation> validations=new ArrayList<>();
      String wsPropertiesPath=context.getPipelineOptions().as(DataProcessingPipelineOptions.class).getWsProperties();
      TaxonRecord taxonRecord=new TaxonRecord();
      Interpretation.of(extendedRecord).using(TaxonomyInterpreter.taxonomyInterpreter(taxonRecord,wsPropertiesPath)).forEachValidation(trace -> validations.add(toValidation(trace.getContext())));
      if (Objects.nonNull(taxonRecord.getId())) {
        context.output(getDataTag(),KV.of(id,taxonRecord));
      }
 else {
        LOG.info(""String_Node_Str"",id);
      }
      if (!validations.isEmpty()) {
        OccurrenceIssue issue=OccurrenceIssue.newBuilder().setId(id).setIssues(validations).build();
        context.output(getIssueTag(),KV.of(id,issue));
      }
    }
  }
;
}"
39822,"@ProcessElement public void processElement(ProcessContext context){
  ExtendedRecord extendedRecord=context.element();
  String id=extendedRecord.getId();
  Collection<Validation> validations=new ArrayList<>();
  String wsPropertiesPath=context.getPipelineOptions().as(DataProcessingPipelineOptions.class).getWsProperties();
  TaxonRecord taxonRecord=new TaxonRecord();
  Interpretation.of(extendedRecord).using(TaxonomyInterpreter.taxonomyInterpreter(taxonRecord,wsPropertiesPath)).forEachValidation(trace -> validations.add(toValidation(trace.getContext())));
  context.output(getDataTag(),KV.of(id,taxonRecord));
  if (!validations.isEmpty()) {
    OccurrenceIssue issue=OccurrenceIssue.newBuilder().setId(id).setIssues(validations).build();
    context.output(getIssueTag(),KV.of(id,issue));
  }
}","@ProcessElement public void processElement(ProcessContext context){
  ExtendedRecord extendedRecord=context.element();
  String id=extendedRecord.getId();
  Collection<Validation> validations=new ArrayList<>();
  String wsPropertiesPath=context.getPipelineOptions().as(DataProcessingPipelineOptions.class).getWsProperties();
  TaxonRecord taxonRecord=new TaxonRecord();
  Interpretation.of(extendedRecord).using(TaxonomyInterpreter.taxonomyInterpreter(taxonRecord,wsPropertiesPath)).forEachValidation(trace -> validations.add(toValidation(trace.getContext())));
  if (Objects.nonNull(taxonRecord.getId())) {
    context.output(getDataTag(),KV.of(id,taxonRecord));
  }
 else {
    LOG.info(""String_Node_Str"",id);
  }
  if (!validations.isEmpty()) {
    OccurrenceIssue issue=OccurrenceIssue.newBuilder().setId(id).setIssues(validations).build();
    context.output(getIssueTag(),KV.of(id,issue));
  }
}"
39823,"/** 
 * {@link DwcTerm#individualCount} interpretation.
 */
static ExtendedRecordInterpreter interpretIndividualCount(InterpretedExtendedRecord interpretedExtendedRecord){
  return (  ExtendedRecord extendedRecord) -> SimpleTypeParser.parseInt(extendedRecord,DwcTerm.individualCount,parseResult -> {
    Interpretation<ExtendedRecord> interpretation=Interpretation.of(extendedRecord);
    if (parseResult.isPresent()) {
      interpretedExtendedRecord.setIndividualCount(parseResult.get());
    }
 else {
      interpretation.withValidation(Trace.of(DwcTerm.individualCount.name(),IssueType.INDIVIDUAL_COUNT_INVALID));
    }
    return interpretation;
  }
);
}","/** 
 * {@link DwcTerm#individualCount} interpretation.
 */
static ExtendedRecordInterpreter interpretIndividualCount(InterpretedExtendedRecord interpretedExtendedRecord){
  return (  ExtendedRecord extendedRecord) -> SimpleTypeParser.parseInt(extendedRecord,DwcTerm.individualCount,parseResult -> {
    Interpretation<ExtendedRecord> interpretation=Interpretation.of(extendedRecord);
    if (parseResult.isPresent()) {
      interpretedExtendedRecord.setIndividualCount(parseResult.get());
    }
 else {
      interpretation.withValidation(Trace.of(DwcTerm.individualCount.name(),IssueType.INDIVIDUAL_COUNT_INVALID));
    }
    return interpretation;
  }
).orElse(Interpretation.of(extendedRecord));
}"
39824,"/** 
 * {@link DwcTerm#establishmentMeans} interpretation.
 */
static ExtendedRecordInterpreter interpretEstablishmentMeans(InterpretedExtendedRecord interpretedExtendedRecord){
  return (  ExtendedRecord extendedRecord) -> VocabularyParsers.establishmentMeansParser().map(extendedRecord,parseResult -> {
    Interpretation<ExtendedRecord> interpretation=Interpretation.of(extendedRecord);
    if (parseResult.isSuccessful()) {
      interpretedExtendedRecord.setEstablishmentMeans(parseResult.getPayload().name());
    }
    return interpretation;
  }
).get();
}","/** 
 * {@link DwcTerm#establishmentMeans} interpretation.
 */
static ExtendedRecordInterpreter interpretEstablishmentMeans(InterpretedExtendedRecord interpretedExtendedRecord){
  return (  ExtendedRecord extendedRecord) -> VocabularyParsers.establishmentMeansParser().map(extendedRecord,parseResult -> {
    Interpretation<ExtendedRecord> interpretation=Interpretation.of(extendedRecord);
    if (parseResult.isSuccessful()) {
      interpretedExtendedRecord.setEstablishmentMeans(parseResult.getPayload().name());
    }
    return interpretation;
  }
).orElse(Interpretation.of(extendedRecord));
}"
39825,"/** 
 * {@link DwcTerm#typeStatus} interpretation.
 */
static ExtendedRecordInterpreter interpretTypeStatus(InterpretedExtendedRecord interpretedExtendedRecord){
  return (  ExtendedRecord extendedRecord) -> VocabularyParsers.typeStatusParser().map(extendedRecord,parseResult -> {
    Interpretation<ExtendedRecord> interpretation=Interpretation.of(extendedRecord);
    if (parseResult.isSuccessful()) {
      interpretedExtendedRecord.setTypeStatus(parseResult.getPayload().name());
    }
 else {
      interpretation.withValidation(Trace.of(DwcTerm.typeStatus.name(),IssueType.TYPE_STATUS_INVALID));
    }
    return interpretation;
  }
).get();
}","/** 
 * {@link DwcTerm#typeStatus} interpretation.
 */
static ExtendedRecordInterpreter interpretTypeStatus(InterpretedExtendedRecord interpretedExtendedRecord){
  return (  ExtendedRecord extendedRecord) -> VocabularyParsers.typeStatusParser().map(extendedRecord,parseResult -> {
    Interpretation<ExtendedRecord> interpretation=Interpretation.of(extendedRecord);
    if (parseResult.isSuccessful()) {
      interpretedExtendedRecord.setTypeStatus(parseResult.getPayload().name());
    }
 else {
      interpretation.withValidation(Trace.of(DwcTerm.typeStatus.name(),IssueType.TYPE_STATUS_INVALID));
    }
    return interpretation;
  }
).orElse(Interpretation.of(extendedRecord));
}"
39826,"/** 
 * {@link DwcTerm#basisOfRecord} interpretation.
 */
static ExtendedRecordInterpreter interpretBasisOfRecord(InterpretedExtendedRecord interpretedExtendedRecord){
  return (  ExtendedRecord extendedRecord) -> VocabularyParsers.basisOfRecordParser().map(extendedRecord,parseResult -> {
    Interpretation<ExtendedRecord> interpretation=Interpretation.of(extendedRecord);
    if (parseResult.isSuccessful()) {
      interpretedExtendedRecord.setBasisOfRecord(parseResult.getPayload().name());
    }
 else {
      interpretation.withValidation(Trace.of(DwcTerm.basisOfRecord.name(),IssueType.BASIS_OF_RECORD_INVALID));
    }
    return interpretation;
  }
).get();
}","/** 
 * {@link DwcTerm#basisOfRecord} interpretation.
 */
static ExtendedRecordInterpreter interpretBasisOfRecord(InterpretedExtendedRecord interpretedExtendedRecord){
  return (  ExtendedRecord extendedRecord) -> VocabularyParsers.basisOfRecordParser().map(extendedRecord,parseResult -> {
    Interpretation<ExtendedRecord> interpretation=Interpretation.of(extendedRecord);
    if (parseResult.isSuccessful()) {
      interpretedExtendedRecord.setBasisOfRecord(parseResult.getPayload().name());
    }
 else {
      interpretation.withValidation(Trace.of(DwcTerm.basisOfRecord.name(),IssueType.BASIS_OF_RECORD_INVALID));
    }
    return interpretation;
  }
).orElse(Interpretation.of(extendedRecord));
}"
39827,"/** 
 * {@link DwcTerm#lifeStage} interpretation.
 */
static ExtendedRecordInterpreter interpretLifeStage(InterpretedExtendedRecord interpretedExtendedRecord){
  return (  ExtendedRecord extendedRecord) -> VocabularyParsers.lifeStageParser().map(extendedRecord,parseResult -> {
    Interpretation<ExtendedRecord> interpretation=Interpretation.of(extendedRecord);
    if (parseResult.isSuccessful()) {
      interpretedExtendedRecord.setLifeStage(parseResult.getPayload().name());
    }
    return interpretation;
  }
).get();
}","/** 
 * {@link DwcTerm#lifeStage} interpretation.
 */
static ExtendedRecordInterpreter interpretLifeStage(InterpretedExtendedRecord interpretedExtendedRecord){
  return (  ExtendedRecord extendedRecord) -> VocabularyParsers.lifeStageParser().map(extendedRecord,parseResult -> {
    Interpretation<ExtendedRecord> interpretation=Interpretation.of(extendedRecord);
    if (parseResult.isSuccessful()) {
      interpretedExtendedRecord.setLifeStage(parseResult.getPayload().name());
    }
    return interpretation;
  }
).orElse(Interpretation.of(extendedRecord));
}"
39828,"/** 
 * {@link DwcTerm#sex} interpretation.
 */
static ExtendedRecordInterpreter interpretSex(InterpretedExtendedRecord interpretedExtendedRecord){
  return (  ExtendedRecord extendedRecord) -> VocabularyParsers.sexParser().map(extendedRecord,parseResult -> {
    Interpretation<ExtendedRecord> interpretation=Interpretation.of(extendedRecord);
    if (parseResult.isSuccessful()) {
      interpretedExtendedRecord.setSex(parseResult.getPayload().name());
    }
    return interpretation;
  }
).get();
}","/** 
 * {@link DwcTerm#sex} interpretation.
 */
static ExtendedRecordInterpreter interpretSex(InterpretedExtendedRecord interpretedExtendedRecord){
  return (  ExtendedRecord extendedRecord) -> VocabularyParsers.sexParser().map(extendedRecord,parseResult -> {
    Interpretation<ExtendedRecord> interpretation=Interpretation.of(extendedRecord);
    if (parseResult.isSuccessful()) {
      interpretedExtendedRecord.setSex(parseResult.getPayload().name());
    }
    return interpretation;
  }
).orElse(Interpretation.of(extendedRecord));
}"
39829,"/** 
 * {@link DwcTerm#continent} interpretation.
 */
static LocationInterpreter interpretContinent(Location locationRecord){
  return (  ExtendedRecord extendedRecord) -> VocabularyParsers.continentParser().map(extendedRecord,parseResult -> {
    Interpretation<ExtendedRecord> interpretation=Interpretation.of(extendedRecord);
    if (parseResult.isSuccessful()) {
      locationRecord.setContinent(parseResult.getPayload().name());
    }
 else {
      interpretation.withValidation(Trace.of(DwcTerm.continent.name(),IssueType.CONTINENT_INVALID));
    }
    return interpretation;
  }
).get();
}","/** 
 * {@link DwcTerm#continent} interpretation.
 */
static LocationInterpreter interpretContinent(Location locationRecord){
  return (  ExtendedRecord extendedRecord) -> VocabularyParsers.continentParser().map(extendedRecord,parseResult -> {
    Interpretation<ExtendedRecord> interpretation=Interpretation.of(extendedRecord);
    if (parseResult.isSuccessful()) {
      locationRecord.setContinent(parseResult.getPayload().name());
    }
 else {
      interpretation.withValidation(Trace.of(DwcTerm.continent.name(),IssueType.CONTINENT_INVALID));
    }
    return interpretation;
  }
).orElse(Interpretation.of(extendedRecord));
}"
39830,"/** 
 * {@link DwcTerm#coordinatePrecision} interpretation.
 */
static LocationInterpreter interpretCoordinatePrecision(Location locationRecord){
  return (  ExtendedRecord extendedRecord) -> SimpleTypeParser.parseDouble(extendedRecord,DwcTerm.coordinatePrecision,parseResult -> {
    Interpretation<ExtendedRecord> interpretation=Interpretation.of(extendedRecord);
    Double result=parseResult.orElse(null);
    if (result != null && result >= COORDINATE_PRECISION_LOWER_BOUND && result <= COORDINATE_PRECISION_UPPER_BOUND) {
      locationRecord.setCoordinatePrecision(result);
    }
 else {
      interpretation.withValidation(Trace.of(DwcTerm.coordinatePrecision.name(),IssueType.COORDINATE_PRECISION_INVALID));
    }
    return interpretation;
  }
);
}","/** 
 * {@link DwcTerm#coordinatePrecision} interpretation.
 */
static LocationInterpreter interpretCoordinatePrecision(Location locationRecord){
  return (  ExtendedRecord extendedRecord) -> SimpleTypeParser.parseDouble(extendedRecord,DwcTerm.coordinatePrecision,parseResult -> {
    Interpretation<ExtendedRecord> interpretation=Interpretation.of(extendedRecord);
    Double result=parseResult.orElse(null);
    if (result != null && result >= COORDINATE_PRECISION_LOWER_BOUND && result <= COORDINATE_PRECISION_UPPER_BOUND) {
      locationRecord.setCoordinatePrecision(result);
    }
 else {
      interpretation.withValidation(Trace.of(DwcTerm.coordinatePrecision.name(),IssueType.COORDINATE_PRECISION_INVALID));
    }
    return interpretation;
  }
).orElse(Interpretation.of(extendedRecord));
}"
39831,"/** 
 * {@link DwcTerm#coordinateUncertaintyInMeters} interpretation.
 */
static LocationInterpreter interpretCoordinateUncertaintyInMeters(Location locationRecord){
  return (  ExtendedRecord extendedRecord) -> {
    Interpretation<ExtendedRecord> interpretation=Interpretation.of(extendedRecord);
    String value=extendedRecord.getCoreTerms().get(DwcTerm.coordinateUncertaintyInMeters.qualifiedName());
    ParseResult<Double> parseResult=MeterRangeParser.parseMeters(value.trim());
    Double result=parseResult.isSuccessful() ? Math.abs(parseResult.getPayload()) : null;
    if (result != null && result > COORDINATE_UNCERTAINTY_METERS_LOWER_BOUND && result < COORDINATE_UNCERTAINTY_METERS_UPPER_BOUND) {
      locationRecord.setCoordinateUncertaintyInMeters(result);
    }
 else {
      interpretation.withValidation(Trace.of(DwcTerm.coordinateUncertaintyInMeters.name(),IssueType.COORDINATE_UNCERTAINTY_METERS_INVALID));
    }
    return interpretation;
  }
;
}","/** 
 * {@link DwcTerm#coordinateUncertaintyInMeters} interpretation.
 */
static LocationInterpreter interpretCoordinateUncertaintyInMeters(Location locationRecord){
  return (  ExtendedRecord extendedRecord) -> {
    Interpretation<ExtendedRecord> interpretation=Interpretation.of(extendedRecord);
    String value=extendedRecord.getCoreTerms().get(DwcTerm.coordinateUncertaintyInMeters.qualifiedName());
    ParseResult<Double> parseResult=MeterRangeParser.parseMeters(value);
    Double result=parseResult.isSuccessful() ? Math.abs(parseResult.getPayload()) : null;
    if (result != null && result > COORDINATE_UNCERTAINTY_METERS_LOWER_BOUND && result < COORDINATE_UNCERTAINTY_METERS_UPPER_BOUND) {
      locationRecord.setCoordinateUncertaintyInMeters(result);
    }
 else {
      interpretation.withValidation(Trace.of(DwcTerm.coordinateUncertaintyInMeters.name(),IssueType.COORDINATE_UNCERTAINTY_METERS_INVALID));
    }
    return interpretation;
  }
;
}"
39832,"/** 
 * Parses an integer value and applies a mapping function to its response (if any).
 */
public static <U>U parseInt(ExtendedRecord extendedRecord,DwcTerm term,Function<Optional<Integer>,U> mapper){
  return Optional.ofNullable(extendedRecord.getCoreTerms().get(term.qualifiedName())).map(termValue -> mapper.apply(Optional.ofNullable(NumberParser.parseInteger(termValue)))).get();
}","/** 
 * Parses an integer value and applies a mapping function to its response (if any).
 */
public static <U>Optional<U> parseInt(ExtendedRecord extendedRecord,DwcTerm term,Function<Optional<Integer>,U> mapper){
  return Optional.ofNullable(extendedRecord.getCoreTerms().get(term.qualifiedName())).map(termValue -> mapper.apply(Optional.ofNullable(NumberParser.parseInteger(termValue))));
}"
39833,"/** 
 * Parses a double value and applies a mapping function to its response (if any).
 */
public static <U>U parseDouble(ExtendedRecord extendedRecord,DwcTerm term,Function<Optional<Double>,U> mapper){
  return Optional.ofNullable(extendedRecord.getCoreTerms().get(term.qualifiedName())).map(termValue -> mapper.apply(Optional.ofNullable(NumberParser.parseDouble(termValue)))).get();
}","/** 
 * Parses a double value and applies a mapping function to its response (if any).
 */
public static <U>Optional<U> parseDouble(ExtendedRecord extendedRecord,DwcTerm term,Function<Optional<Double>,U> mapper){
  return Optional.ofNullable(extendedRecord.getCoreTerms().get(term.qualifiedName())).map(termValue -> mapper.apply(Optional.ofNullable(NumberParser.parseDouble(termValue))));
}"
39834,"/** 
 * Parses a boolean value and applies mapping functions to its response (if any).
 */
public static <U>U parseBoolean(ExtendedRecord extendedRecord,DwcTerm term,Function<ParseResult<Boolean>,U> mapper){
  return Optional.ofNullable(extendedRecord.getCoreTerms().get(term.qualifiedName())).map(termValue -> mapper.apply(BOOLEAN_PARSER.parse(termValue))).get();
}","/** 
 * Parses a boolean value and applies mapping functions to its response (if any).
 */
public static <U>Optional<U> parseBoolean(ExtendedRecord extendedRecord,DwcTerm term,Function<ParseResult<Boolean>,U> mapper){
  return Optional.ofNullable(extendedRecord.getCoreTerms().get(term.qualifiedName())).map(termValue -> mapper.apply(BOOLEAN_PARSER.parse(termValue)));
}"
39835,"private ParsedField<ParsedLocation> applyMatchWithCountry(){
  List<Country> countries=getCountriesFromCoordinates(latLng);
  if (countries != null && !countries.isEmpty()) {
    if (countries.contains(country)) {
      return ParsedField.success(ParsedLocation.newBuilder().country(country).latLng(latLng).build());
    }
    Optional<Country> equivalentMatch=containsAnyCountry(CountryMaps.equivalent(country),countries);
    if (equivalentMatch.isPresent()) {
      return ParsedField.success(ParsedLocation.newBuilder().country(equivalentMatch.get()).latLng(latLng).build());
    }
    Optional<Country> confusedMatch=containsAnyCountry(CountryMaps.confused(country),countries);
    if (confusedMatch.isPresent()) {
      return ParsedField.success(ParsedLocation.newBuilder().country(confusedMatch.get()).latLng(latLng).build(),Collections.singletonList(new InterpretationIssue(IssueType.COUNTRY_DERIVED_FROM_COORDINATES,DwcTerm.country)));
    }
  }
  LOG.info(""String_Node_Str"");
  for (  CoordinatesFunction transformation : alternativeTransformations) {
    LatLng latLngTransformed=transformation.getTransformer().apply(latLng);
    List<Country> countriesFound=getCountriesFromCoordinates(latLngTransformed);
    if (countriesFound == null || countriesFound.isEmpty()) {
      continue;
    }
    if (countriesFound.contains(country)) {
      List<InterpretationIssue> issues=new ArrayList<>();
      CoordinatesFunction.getIssueTypes(transformation).forEach(issueType -> issues.add(new InterpretationIssue(issueType,getCountryAndCoordinatesTerms())));
      return ParsedField.success(ParsedLocation.newBuilder().country(country).latLng(latLngTransformed).build(),issues);
    }
  }
  return getFailResponse();
}","private ParsedField<ParsedLocation> applyMatchWithCountry(){
  List<Country> countries=getCountriesFromCoordinates(latLng);
  if (countries != null && !countries.isEmpty()) {
    if (countries.contains(country)) {
      return ParsedField.success(ParsedLocation.newBuilder().country(country).latLng(latLng).build());
    }
    Optional<Country> equivalentMatch=containsAnyCountry(CountryMaps.equivalent(country),countries);
    if (equivalentMatch.isPresent()) {
      return ParsedField.success(ParsedLocation.newBuilder().country(equivalentMatch.get()).latLng(latLng).build());
    }
    Optional<Country> confusedMatch=containsAnyCountry(CountryMaps.confused(country),countries);
    if (confusedMatch.isPresent()) {
      return ParsedField.success(ParsedLocation.newBuilder().country(confusedMatch.get()).latLng(latLng).build(),Collections.singletonList(new InterpretationIssue(IssueType.COUNTRY_DERIVED_FROM_COORDINATES,DwcTerm.country)));
    }
  }
  LOG.info(""String_Node_Str"",latLng);
  for (  CoordinatesFunction transformation : alternativeTransformations) {
    LatLng latLngTransformed=transformation.getTransformer().apply(latLng);
    List<Country> countriesFound=getCountriesFromCoordinates(latLngTransformed);
    if (countriesFound == null || countriesFound.isEmpty()) {
      continue;
    }
    if (countriesFound.contains(country)) {
      List<InterpretationIssue> issues=new ArrayList<>();
      CoordinatesFunction.getIssueTypes(transformation).forEach(issueType -> issues.add(new InterpretationIssue(issueType,getCountryAndCoordinatesTerms())));
      return ParsedField.success(ParsedLocation.newBuilder().country(country).latLng(latLngTransformed).build(),issues);
    }
  }
  return getFailResponse();
}"
39836,"private static Optional<Properties> loadProperties(Path propertiesPath){
  Function<Path,InputStream> absolute=path -> {
    try {
      return new FileInputStream(path.toFile());
    }
 catch (    FileNotFoundException ex) {
      throw new IllegalArgumentException(ex.getMessage(),ex);
    }
  }
;
  Function<Path,InputStream> resource=path -> Thread.currentThread().getContextClassLoader().getResourceAsStream(path.toString());
  Function<Path,InputStream> function=propertiesPath.isAbsolute() ? absolute : resource;
  Properties props=new Properties();
  try (InputStream in=function.apply(propertiesPath)){
    props.load(in);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",propertiesPath.toString(),e);
    return Optional.empty();
  }
  return Optional.of(props);
}","private static Optional<Properties> loadProperties(Path propertiesPath){
  Function<Path,InputStream> absolute=path -> {
    try {
      return new FileInputStream(path.toFile());
    }
 catch (    FileNotFoundException ex) {
      LOG.error(""String_Node_Str"",propertiesPath.toString(),ex);
      throw new IllegalArgumentException(ex.getMessage(),ex);
    }
  }
;
  Function<Path,InputStream> resource=path -> Thread.currentThread().getContextClassLoader().getResourceAsStream(path.toString());
  Function<Path,InputStream> function=propertiesPath.isAbsolute() ? absolute : resource;
  Properties props=new Properties();
  try (InputStream in=function.apply(propertiesPath)){
    props.load(in);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",propertiesPath.toString(),e);
    return Optional.empty();
  }
  return Optional.of(props);
}"
39837,"public <U>Interpretation<U> using(Function<? super T,Interpretation<U>> mapper){
  Interpretation<U> interpretation=mapper.apply(value);
  List<Trace<LineageType>> newLineage=new ArrayList<>(lineage);
  newLineage.addAll(interpretation.lineage);
  List<Trace<IssueType>> newValidations=new ArrayList<>(validations);
  newValidations.addAll(interpretation.validations);
  return new Interpretation<>(interpretation.value,newValidations,newLineage);
}","public <U>Interpretation<U> using(Function<? super T,Interpretation<U>> mapper){
  Interpretation<U> interpretation=mapper.apply(value);
  List<Trace<LineageType>> newLineage=new ArrayList<>(lineage);
  if (Objects.nonNull(interpretation.lineage)) {
    newLineage.addAll(interpretation.lineage);
  }
  List<Trace<IssueType>> newValidations=new ArrayList<>(validations);
  if (Objects.nonNull(interpretation.validations)) {
    newValidations.addAll(interpretation.validations);
  }
  return new Interpretation<>(interpretation.value,newValidations,newLineage);
}"
39838,"/** 
 * Parses a single DMS coordinate
 * @return the converted decimal up to 6 decimals accuracy
 */
@VisibleForTesting protected static double parseDMS(String coord,boolean lat){
  final String DIRS=lat ? ""String_Node_Str"" : ""String_Node_Str"";
  coord=coord.trim().toUpperCase();
  if (coord.length() > 3) {
    char dir='n';
    if (DIRS.contains(String.valueOf(coord.charAt(0)))) {
      dir=coord.charAt(0);
      coord=coord.substring(1);
    }
 else     if (DIRS.contains(String.valueOf(coord.charAt(coord.length() - 1)))) {
      dir=coord.charAt(coord.length() - 1);
      coord=coord.substring(0,coord.length() - 1);
    }
    Matcher m=DMS_SINGLE.matcher(coord);
    if (m.find()) {
      return coordFromMatcher(m,1,2,3,String.valueOf(dir));
    }
  }
  throw new IllegalArgumentException(""String_Node_Str"" + coord);
}","/** 
 * Parses a single DMS coordinate
 * @return the converted decimal up to 6 decimals accuracy
 */
private static double parseDMS(String coord,boolean lat){
  final String DIRS=lat ? ""String_Node_Str"" : ""String_Node_Str"";
  coord=coord.trim().toUpperCase();
  if (coord.length() > 3) {
    char dir='n';
    if (DIRS.contains(String.valueOf(coord.charAt(0)))) {
      dir=coord.charAt(0);
      coord=coord.substring(1);
    }
 else     if (DIRS.contains(String.valueOf(coord.charAt(coord.length() - 1)))) {
      dir=coord.charAt(coord.length() - 1);
      coord=coord.substring(0,coord.length() - 1);
    }
    Matcher m=DMS_SINGLE.matcher(coord);
    if (m.find()) {
      return coordFromMatcher(m,1,2,3,String.valueOf(dir));
    }
  }
  throw new IllegalArgumentException(""String_Node_Str"" + coord);
}"
39839,"public static ParsedField<LatLng> parseVerbatimCoordinates(final String coordinates){
  if (Strings.isNullOrEmpty(coordinates)) {
    return ParsedField.fail(new InterpretationIssue(IssueType.COORDINATE_INVALID,DwcTerm.verbatimCoordinates));
  }
  Matcher m=DMS_COORD.matcher(coordinates);
  if (m.find()) {
    final String dir1=m.group(4);
    final String dir2=m.group(8);
    double c1=coordFromMatcher(m,1,2,3,dir1);
    double c2=coordFromMatcher(m,5,6,7,dir2);
    if (isLat(dir1) && !isLat(dir2)) {
      return validateAndRound(c1,c2);
    }
 else     if (!isLat(dir1) && isLat(dir2)) {
      return validateAndRound(c2,c1);
    }
 else {
      return ParsedField.fail(new InterpretationIssue(IssueType.COORDINATE_INVALID,DwcTerm.decimalLatitude,DwcTerm.decimalLongitude));
    }
  }
 else   if (coordinates.length() > 4) {
    for (    final char delim : ""String_Node_Str"".toCharArray()) {
      int cnt=StringUtils.countMatches(coordinates,String.valueOf(delim));
      if (cnt == 1) {
        String[] latlon=StringUtils.split(coordinates,delim);
        return parseLatLng(latlon[0],latlon[1]);
      }
    }
  }
  return ParsedField.fail(new InterpretationIssue(IssueType.COORDINATE_INVALID,DwcTerm.decimalLatitude,DwcTerm.decimalLongitude));
}","public static ParsedField<LatLng> parseVerbatimCoordinates(final String coordinates){
  if (Strings.isNullOrEmpty(coordinates)) {
    return ParsedField.fail(new InterpretationIssue(IssueType.COORDINATE_INVALID,DwcTerm.verbatimCoordinates));
  }
  Matcher m=DMS_COORD.matcher(coordinates);
  if (m.find()) {
    final String dir1=m.group(4);
    final String dir2=m.group(8);
    double c1=coordFromMatcher(m,1,2,3,dir1);
    double c2=coordFromMatcher(m,5,6,7,dir2);
    if (isLat(dir1) && !isLat(dir2)) {
      return validateAndRound(c1,c2);
    }
 else     if (!isLat(dir1) && isLat(dir2)) {
      return validateAndRound(c2,c1);
    }
 else {
      return ParsedField.fail(new InterpretationIssue(IssueType.COORDINATE_INVALID,DwcTerm.decimalLatitude,DwcTerm.decimalLongitude));
    }
  }
 else   if (coordinates.length() > 4) {
    for (    final char delim : ""String_Node_Str"".toCharArray()) {
      int cnt=StringUtils.countMatches(coordinates,String.valueOf(delim));
      if (cnt == 1) {
        String[] latlon=StringUtils.split(coordinates,delim);
        if (latlon.length > 1) {
          return parseLatLng(latlon[0],latlon[1]);
        }
      }
    }
  }
  return ParsedField.fail(new InterpretationIssue(IssueType.COORDINATE_INVALID,DwcTerm.decimalLatitude,DwcTerm.decimalLongitude));
}"
39840,"/** 
 * Matches a   {@link ExtendedRecord} to an existing specie using the species match 2 WS.
 * @param extendedRecord avro file with the taxonomic data
 * @return {@link NameUsageMatch2} with the match received from the WS.
 */
public HttpResponse<NameUsageMatch2> getMatch(ExtendedRecord extendedRecord){
  HttpResponse<NameUsageMatch2> response=tryNameMatch(extendedRecord.getCoreTerms());
  if (isSuccessfulMatch(response) || !hasIdentifications(extendedRecord)) {
    return response;
  }
  LOG.info(""String_Node_Str"");
  List<Map<String,String>> identifications=extendedRecord.getExtensions().get(DwcTerm.Identification.qualifiedName());
  identifications.sort(Comparator.comparing((  Map<String,String> map) -> {
    if (!map.containsKey(DwcTerm.dateIdentified.qualifiedName()) || Objects.isNull(map.get(DwcTerm.dateIdentified.qualifiedName()))) {
      return LocalDateTime.MIN;
    }
    return LocalDateTime.parse(map.get(DwcTerm.dateIdentified.qualifiedName()));
  }
).reversed());
  for (  Map<String,String> record : identifications) {
    response=tryNameMatch(record);
    if (isSuccessfulMatch(response)) {
      LOG.info(""String_Node_Str"",record.get(DwcTerm.identificationID.name()));
      return response;
    }
  }
  return response;
}","/** 
 * Matches a   {@link ExtendedRecord} to an existing specie using the species match 2 WS.
 * @param extendedRecord avro file with the taxonomic data
 * @return {@link NameUsageMatch2} with the match received from the WS.
 */
public HttpResponse<NameUsageMatch2> getMatch(ExtendedRecord extendedRecord){
  HttpResponse<NameUsageMatch2> response=tryNameMatch(extendedRecord.getCoreTerms());
  if (isSuccessfulMatch(response) || !hasIdentifications(extendedRecord)) {
    return response;
  }
  LOG.info(""String_Node_Str"");
  List<Map<String,String>> identifications=extendedRecord.getExtensions().get(DwcTerm.Identification.qualifiedName());
  identifications.sort(Comparator.comparing((  Map<String,String> map) -> {
    ParsedTemporalDates parsedDates=TemporalParser.parseRawDate(map.get(DwcTerm.dateIdentified.qualifiedName()));
    return parsedDates.getFrom().map((temporal) -> Instant.from(temporal).toEpochMilli()).orElse(0L);
  }
).reversed());
  for (  Map<String,String> record : identifications) {
    response=tryNameMatch(record);
    if (isSuccessfulMatch(response)) {
      LOG.info(""String_Node_Str"",record.get(DwcTerm.identificationID.name()));
      return response;
    }
  }
  return response;
}"
39841,"private static DataProcessingPipelineOptions createPipelineOptionsFromArgsWithoutValidation(Configuration config,String[] args){
  DataProcessingPipelineOptions options=PipelineOptionsFactory.fromArgs(args).as(DataProcessingPipelineOptions.class);
  options.setHdfsConfiguration(Collections.singletonList(config));
  return options;
}","private static DataProcessingPipelineOptions createPipelineOptionsFromArgsWithoutValidation(Configuration config,String[] args){
  PipelineOptionsFactory.register(DataProcessingPipelineOptions.class);
  DataProcessingPipelineOptions options=PipelineOptionsFactory.fromArgs(args).as(DataProcessingPipelineOptions.class);
  options.setHdfsConfiguration(Collections.singletonList(config));
  return options;
}"
39842,"private static Country getCountryMatched(Optional<Country> countryName,Optional<Country> countryCode){
  if (countryCode.isPresent()) {
    return countryCode.get();
  }
  if (countryName.isPresent()) {
    countryName.get();
  }
  return null;
}","private static Country getCountryMatched(Optional<Country> countryName,Optional<Country> countryCode){
  if (countryCode.isPresent()) {
    return countryCode.get();
  }
  if (countryName.isPresent()) {
    return countryName.get();
  }
  return null;
}"
39843,"SchemaData addFieldAsFirstElement(Schema.Field field){
  fields.add(0,field);
  return this;
}","private SchemaData addFieldAsFirstElement(Schema.Field field){
  fields.add(0,field);
  return this;
}"
39844,"private static void createFieldsRecursive(List<Schema.Field> avroFields,Field[] fields,Map<String,Schema> customSchemas,String namespace){
  for (  Field field : fields) {
    Schema schema=null;
    if (field.getType().isEnum()) {
      schema=Schema.createEnum(capitalize(field.getName()),null,namespace,Arrays.stream(field.getType().getEnumConstants()).map(value -> value.toString()).collect(Collectors.toList()));
    }
 else     if (isCollection(field)) {
      schema=Schema.createArray(createSchema(getCollectionType(field),customSchemas));
    }
 else     if (isJavaType(field)) {
      schema=createSchema(field.getType().getSimpleName(),customSchemas);
    }
 else {
      String recordName=capitalize(field.getType().getSimpleName());
      schema=Schema.createRecord(recordName,null,namespace,false);
      customSchemas.put(recordName,schema);
      List<Schema.Field> avroFieldsRecordSchema=new ArrayList<>();
      createFieldsRecursive(avroFieldsRecordSchema,field.getType().getDeclaredFields(),customSchemas,namespace);
      schema.setFields(avroFieldsRecordSchema);
    }
    schema=makeNullable(schema);
    avroFields.add(new Schema.Field(field.getName(),schema,null,defaultValueOf(schema)));
  }
}","private static void createFieldsRecursive(List<Schema.Field> avroFields,Field[] fields,Map<String,Schema> customSchemas,String namespace){
  for (  Field field : fields) {
    Schema schema;
    if (field.getType().isEnum()) {
      schema=Schema.createEnum(capitalize(field.getName()),null,namespace,Arrays.stream(field.getType().getEnumConstants()).map(Object::toString).collect(Collectors.toList()));
    }
 else     if (isCollection(field)) {
      schema=Schema.createArray(createSchema(getCollectionType(field),customSchemas));
    }
 else     if (isJavaType(field)) {
      schema=createSchema(field.getType().getSimpleName(),customSchemas);
    }
 else {
      String recordName=capitalize(field.getType().getSimpleName());
      schema=Schema.createRecord(recordName,null,namespace,false);
      customSchemas.put(recordName,schema);
      List<Schema.Field> avroFieldsRecordSchema=new ArrayList<>();
      createFieldsRecursive(avroFieldsRecordSchema,field.getType().getDeclaredFields(),customSchemas,namespace);
      schema.setFields(avroFieldsRecordSchema);
    }
    schema=makeNullable(schema);
    avroFields.add(new Schema.Field(field.getName(),schema,null,defaultValueOf(schema)));
  }
}"
39845,"private static SchemaData generateSchemaData(Class clazz,String schemaName,String schemaDoc,String namespace){
  Objects.requireNonNull(clazz,""String_Node_Str"");
  Objects.requireNonNull(schemaName,""String_Node_Str"");
  Objects.requireNonNull(namespace,""String_Node_Str"");
  Schema schemaGenerated=Schema.createRecord(schemaName,schemaDoc,namespace,false);
  Map<String,Schema> customTypes=new HashMap<>();
  customTypes.put(clazz.getSimpleName(),schemaGenerated);
  List<Schema.Field> schemaFields=new ArrayList<>();
  createFieldsRecursive(schemaFields,clazz.getDeclaredFields(),customTypes,namespace);
  return new SchemaData(schemaGenerated,schemaFields);
}","private static SchemaData generateSchemaData(Class<?> clazz,String schemaName,String schemaDoc,String namespace){
  Objects.requireNonNull(clazz,""String_Node_Str"");
  Objects.requireNonNull(schemaName,""String_Node_Str"");
  Objects.requireNonNull(namespace,""String_Node_Str"");
  Schema schemaGenerated=Schema.createRecord(schemaName,schemaDoc,namespace,false);
  Map<String,Schema> customTypes=new HashMap<>();
  customTypes.put(clazz.getSimpleName(),schemaGenerated);
  List<Schema.Field> schemaFields=createFields(clazz,customTypes,namespace);
  return new SchemaData(schemaGenerated,schemaFields);
}"
39846,"/** 
 * Currently we generate all the fields nullable so the default will be always null, but we leave this method for the future.
 */
private static JsonNode defaultValueOf(Schema schema){
  Schema.Type schemaType=Schema.Type.UNION.equals(schema.getType()) ? schema.getTypes().get(0).getType() : schema.getType();
  return commonSchemasDefaults.getOrDefault(schemaType,NullNode.getInstance());
}","/** 
 * Currently we generate all the fields nullable so the default will be always null, but we leave this method for the future.
 */
private static JsonNode defaultValueOf(Schema schema){
  Schema.Type schemaType=Schema.Type.UNION == schema.getType() ? schema.getTypes().get(0).getType() : schema.getType();
  return COMMON_SCHEMAS_DEFAULTS.getOrDefault(schemaType,NullNode.getInstance());
}"
39847,"SchemaData(Schema rawSchema,List<Schema.Field> fields){
  this.rawSchema=rawSchema;
  this.fields=fields;
}","private SchemaData(Schema rawSchema,List<Schema.Field> fields){
  this.rawSchema=rawSchema;
  this.fields=fields;
}"
39848,"private static Schema createSchema(String className,Map<String,Schema> customSchemas){
  if (customSchemas.containsKey(className)) {
    return customSchemas.get(className);
  }
  if (commonTypesSchemas.get(className.toLowerCase()) == null) {
    return Schema.create(Schema.Type.STRING);
  }
  return Optional.ofNullable(commonTypesSchemas.get(className.toLowerCase())).orElse(Schema.create(Schema.Type.STRING));
}","private static Schema createSchema(String className,Map<String,Schema> customSchemas){
  if (customSchemas.containsKey(className)) {
    return customSchemas.get(className);
  }
  if (COMMON_TYPES_SCHEMAS.get(className.toLowerCase()) == null) {
    return Schema.create(Schema.Type.STRING);
  }
  return Optional.ofNullable(COMMON_TYPES_SCHEMAS.get(className.toLowerCase())).orElse(Schema.create(Schema.Type.STRING));
}"
39849,"Schema buildSchema(){
  rawSchema.setFields(fields);
  return rawSchema;
}","private Schema buildSchema(){
  rawSchema.setFields(fields);
  return rawSchema;
}"
39850,"/** 
 * Generates an Avro schema from a Java class.
 * @param clazz      class to generate the schema from
 * @param schemaName name of the schema
 * @param schemaDoc  documentation of the schema
 * @param namespace  namespace of the schema
 * @return {@link Schema} generated
 */
public static Schema generateSchema(Class clazz,String schemaName,String schemaDoc,String namespace){
  return generateSchemaData(clazz,schemaName,schemaDoc,namespace).buildSchema();
}","/** 
 * Generates an Avro schema from a Java class.
 * @param clazz      class to generate the schema from
 * @param schemaName name of the schema
 * @param schemaDoc  documentation of the schema
 * @param namespace  namespace of the schema
 * @return {@link Schema} generated
 */
public static Schema generateSchema(Class<?> clazz,String schemaName,String schemaDoc,String namespace){
  return generateSchemaData(clazz,schemaName,schemaDoc,namespace).buildSchema();
}"
39851,"@Override public void onCreate(){
  viewerBinding=DataBindingUtil.inflate(LayoutInflater.from(getBaseContext()),R.layout.view_viewer,null,false);
  toggleBinding=DataBindingUtil.inflate(LayoutInflater.from(getBaseContext()),R.layout.view_toggle,null,false);
  mParams=new WindowManager.LayoutParams(WindowManager.LayoutParams.MATCH_PARENT,WindowManager.LayoutParams.MATCH_PARENT,Build.VERSION.SDK_INT < Build.VERSION_CODES.O ? WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY : WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY,WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,PixelFormat.TRANSLUCENT);
  mWindowManager=(WindowManager)getSystemService(WINDOW_SERVICE);
  mWindowManager.addView(viewerBinding.getRoot(),mParams);
  mWindowManager.addView(toggleBinding.getRoot(),new WindowManager.LayoutParams(WindowManager.LayoutParams.MATCH_PARENT,WindowManager.LayoutParams.WRAP_CONTENT,Build.VERSION.SDK_INT < Build.VERSION_CODES.O ? WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY : WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY,WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN,PixelFormat.TRANSLUCENT));
  super.onCreate();
}","@Override public void onCreate(){
  viewerBinding=DataBindingUtil.inflate(LayoutInflater.from(getBaseContext()),R.layout.view_viewer,null,false);
  toggleBinding=DataBindingUtil.inflate(LayoutInflater.from(getBaseContext()),R.layout.view_toggle,null,false);
  mParams=new WindowManager.LayoutParams(WindowManager.LayoutParams.MATCH_PARENT,WindowManager.LayoutParams.MATCH_PARENT,Build.VERSION.SDK_INT < Build.VERSION_CODES.O ? WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY : WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY,WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,PixelFormat.TRANSLUCENT);
  mWindowManager=(WindowManager)getSystemService(WINDOW_SERVICE);
  mWindowManager.addView(viewerBinding.getRoot(),mParams);
  mWindowManager.addView(toggleBinding.getRoot(),new WindowManager.LayoutParams(WindowManager.LayoutParams.MATCH_PARENT,WindowManager.LayoutParams.WRAP_CONTENT,Build.VERSION.SDK_INT < Build.VERSION_CODES.O ? WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY : WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY,WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN,PixelFormat.TRANSLUCENT));
  super.onCreate();
}"
39852,"@Override public void onCreate(){
  viewerBinding=DataBindingUtil.inflate(LayoutInflater.from(getBaseContext()),R.layout.view_viewer,null,false);
  toggleBinding=DataBindingUtil.inflate(LayoutInflater.from(getBaseContext()),R.layout.view_toggle,null,false);
  mParams=new WindowManager.LayoutParams(WindowManager.LayoutParams.MATCH_PARENT,WindowManager.LayoutParams.MATCH_PARENT,Build.VERSION.SDK_INT < Build.VERSION_CODES.O ? WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY : WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY,WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN,PixelFormat.TRANSLUCENT);
  mWindowManager=(WindowManager)getSystemService(WINDOW_SERVICE);
  mWindowManager.addView(viewerBinding.getRoot(),mParams);
  mWindowManager.addView(toggleBinding.getRoot(),new WindowManager.LayoutParams(WindowManager.LayoutParams.MATCH_PARENT,WindowManager.LayoutParams.WRAP_CONTENT,Build.VERSION.SDK_INT < Build.VERSION_CODES.O ? WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY : WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY,WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN,PixelFormat.TRANSLUCENT));
  super.onCreate();
}","@Override public void onCreate(){
  viewerBinding=DataBindingUtil.inflate(LayoutInflater.from(getBaseContext()),R.layout.view_viewer,null,false);
  toggleBinding=DataBindingUtil.inflate(LayoutInflater.from(getBaseContext()),R.layout.view_toggle,null,false);
  mParams=new WindowManager.LayoutParams(WindowManager.LayoutParams.MATCH_PARENT,WindowManager.LayoutParams.MATCH_PARENT,Build.VERSION.SDK_INT < Build.VERSION_CODES.O ? WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY : WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY,WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,PixelFormat.TRANSLUCENT);
  mWindowManager=(WindowManager)getSystemService(WINDOW_SERVICE);
  mWindowManager.addView(viewerBinding.getRoot(),mParams);
  mWindowManager.addView(toggleBinding.getRoot(),new WindowManager.LayoutParams(WindowManager.LayoutParams.MATCH_PARENT,WindowManager.LayoutParams.WRAP_CONTENT,Build.VERSION.SDK_INT < Build.VERSION_CODES.O ? WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY : WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY,WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN,PixelFormat.TRANSLUCENT));
  super.onCreate();
}"
39853,"private void processScript(Script script){
  String scriptType=script.getType();
  scriptEngine=Main.scriptEngineManager.getEngineByName(scriptType);
  scriptEngine.put(""String_Node_Str"",this);
  scriptEngine.put(""String_Node_Str"",preload);
  scriptEngine.put(""String_Node_Str"",context);
  for (  String id : preload.keySet()) {
    scriptEngine.put(id,preload.get(id));
  }
  for (  String id : context.keySet()) {
    scriptEngine.put(id,context.get(id));
  }
  handleCustomerCode(null,accessCode -> scriptEngine.eval(script.getScript()));
  vertx.eventBus().<JsonObject>send(WebClientVerticle.class.getName(),new JsonObject().put(""String_Node_Str"",script.getHref()),ar -> {
    if (ar.succeeded()) {
      JsonObject result=ar.result().body();
      String content=resultMap.remove(result.getString(""String_Node_Str""));
      if (""String_Node_Str"".equals(result.getString(""String_Node_Str""))) {
        handleCustomerCode(null,accessCode -> scriptEngine.eval(content));
      }
 else {
        handleThrowableMessage(new Exception(content));
      }
    }
 else {
      handleThrowableMessage(ar.cause());
    }
  }
);
}","private void processScript(Script script){
  String scriptType=script.getType();
  scriptEngine=Main.scriptEngineManager.getEngineByName(scriptType);
  scriptEngine.put(""String_Node_Str"",this);
  scriptEngine.put(""String_Node_Str"",preload);
  scriptEngine.put(""String_Node_Str"",context);
  for (  String id : preload.keySet()) {
    scriptEngine.put(id,preload.get(id));
  }
  for (  String id : context.keySet()) {
    scriptEngine.put(id,context.get(id));
  }
  handleCustomerCode(null,accessCode -> scriptEngine.eval(script.getScript()));
  if (script.getHref() == null || script.getHref().equals(""String_Node_Str""))   return;
  vertx.eventBus().<JsonObject>send(WebClientVerticle.class.getName(),new JsonObject().put(""String_Node_Str"",script.getHref()),ar -> {
    if (ar.succeeded()) {
      JsonObject result=ar.result().body();
      String content=resultMap.remove(result.getString(""String_Node_Str""));
      if (""String_Node_Str"".equals(result.getString(""String_Node_Str""))) {
        handleCustomerCode(null,accessCode -> scriptEngine.eval(content));
      }
 else {
        handleThrowableMessage(new Exception(content));
      }
    }
 else {
      handleThrowableMessage(ar.cause());
    }
  }
);
}"
39854,"private void handleCustomerCode(String accessCode,Handler handler){
  vertx.executeBlocking(fut -> {
    Thread thread=new CustomerThread(() -> {
      try {
        fut.complete(handler.handle(accessCode));
      }
 catch (      Throwable throwable) {
        fut.fail(throwable);
      }
    }
);
    thread.setDaemon(true);
    thread.start();
    vertx.setTimer(Long.getLong(DEFAULT_TOLERATED_WORKER_EXECUTE_TIME),id -> {
      if (thread.isAlive()) {
        thread.interrupt();
      }
    }
);
    vertx.setTimer(Long.getLong(DEFAULT_MAX_WORKER_EXECUTE_TIME),id -> {
      if (thread.isAlive()) {
        thread.stop();
      }
    }
);
  }
,res -> {
    if (res.succeeded()) {
      handleMessage(res.result());
    }
 else {
      handleThrowableMessage(res.cause());
    }
  }
);
}","private void handleCustomerCode(String accessCode,Handler handler){
  vertx.executeBlocking(fut -> {
    Thread thread=new CustomerThread(() -> {
      try {
        fut.complete(handler.handle(accessCode));
      }
 catch (      Throwable throwable) {
        fut.fail(throwable);
      }
    }
);
    thread.setDaemon(true);
    thread.start();
    vertx.setTimer(Long.getLong(DEFAULT_TOLERATED_WORKER_EXECUTE_TIME),id -> {
      System.out.println(2);
      if (thread.isAlive()) {
        System.out.println(1);
        thread.interrupt();
      }
    }
);
    vertx.setTimer(Long.getLong(DEFAULT_MAX_WORKER_EXECUTE_TIME),id -> {
      System.out.println(2);
      if (thread.isAlive()) {
        System.out.println(3);
        thread.stop();
      }
    }
);
  }
,res -> {
    if (res.succeeded()) {
      handleMessage(res.result());
    }
 else {
      handleThrowableMessage(res.cause());
    }
  }
);
}"
39855,"public BooleanProperty getBooleanProperty(String name){
  if (properties.get(name) == null) {
    properties.put(name,new SimpleBooleanProperty());
  }
  return (BooleanProperty)properties.get(name);
}","public BooleanProperty getBooleanProperty(String name){
  if (properties.get(name) == null) {
    properties.put(name,new SimpleBooleanProperty());
  }
  if (!(properties.get(name) instanceof BooleanProperty)) {
    properties.put(name,new SimpleBooleanProperty());
  }
  return (BooleanProperty)properties.get(name);
}"
39856,"private void setValueBase(JsonArray values){
  if (values == null)   return;
  List vs=values.getList();
  List<TableColumn> leafColumns=((javafx.scene.control.TableView)body).getVisibleLeafColumns();
  for (int i=0; i < vs.size(); i++) {
    Item item=new Item();
    Object object=vs.get(i);
    if (object instanceof List) {
      List<String> list=(List)object;
      for (int j=0; j < leafColumns.size(); j++) {
        if (j >= list.size())         continue;
        item.setProperty(leafColumns.get(j).getText(),list.get(j));
      }
    }
 else     if (object instanceof Map) {
      Map<String,Object> map=(Map)object;
      for (      String key : map.keySet()) {
        if (map.get(key) instanceof String)         item.setProperty(key,map.get(key));
 else         if (map.get(key) instanceof Boolean)         item.setProperty(key,(Boolean)map.get(key));
      }
    }
    items.add(item);
  }
}","private void setValueBase(JsonArray values){
  if (values == null)   return;
  List vs=values.getList();
  List<TableColumn> leafColumns=((javafx.scene.control.TableView)body).getVisibleLeafColumns();
  for (int i=0; i < vs.size(); i++) {
    Item item=new Item();
    Object object=vs.get(i);
    if (object instanceof List) {
      List list=(List)object;
      for (int j=0; j < leafColumns.size(); j++) {
        if (j >= list.size())         continue;
        item.setProperty(leafColumns.get(j).getText(),list.get(j));
      }
    }
 else     if (object instanceof Map) {
      Map<String,Object> map=(Map)object;
      for (      String key : map.keySet()) {
        item.setProperty(key,map.get(key));
      }
    }
    items.add(item);
  }
}"
39857,"public void load(String url){
  removeParent();
  if (url == null || url.equals(""String_Node_Str"")) {
  }
 else   if (url.startsWith(""String_Node_Str"")) {
    try {
      URI uri=new URI(url);
      File file=new File(uri);
      loadFile(file);
    }
 catch (    Exception e) {
      handleExceptionMessage(e);
    }
  }
 else {
    loadWeb(url);
  }
}","public void load(String url){
  if (url == null || url.equals(""String_Node_Str"")) {
    handleMessage(""String_Node_Str"");
    return;
  }
  removeParent();
  if (url.startsWith(""String_Node_Str"")) {
    try {
      URI uri=new URI(url);
      File file=new File(uri);
      loadFile(file);
    }
 catch (    Exception e) {
      handleExceptionMessage(e);
    }
  }
 else {
    loadWeb(url);
  }
}"
39858,"public void loadWeb(String url){
  if (!url.startsWith(""String_Node_Str"")) {
    url=""String_Node_Str"" + url;
  }
  String immutableUrl=url;
  try {
    webClient.getAbs(url).send(ar -> {
      if (ar.succeeded()) {
        handleHttpResponse(immutableUrl,ar.result());
      }
 else {
        Throwable throwable=ar.cause();
        handleExceptionMessage(throwable);
      }
    }
);
  }
 catch (  Exception e) {
    handleExceptionMessage(e);
  }
}","private void loadWeb(String url){
  if (!url.startsWith(""String_Node_Str"")) {
    url=""String_Node_Str"" + url;
  }
  String immutableUrl=url;
  try {
    webClient.getAbs(url).send(ar -> {
      if (ar.succeeded()) {
        handleHttpResponse(immutableUrl,ar.result());
      }
 else {
        Throwable throwable=ar.cause();
        handleExceptionMessage(throwable);
      }
    }
);
  }
 catch (  Exception e) {
    handleExceptionMessage(e);
  }
}"
39859,"public Hyperlink(String text,javafx.scene.Node graphic){
  if (Platform.isFxApplicationThread()) {
    body=new javafx.scene.control.Hyperlink(text,graphic);
    setAction(event -> {
      if (value == null)       app.loadWeb(((javafx.scene.control.Hyperlink)body).getText());
 else       app.loadWeb(value);
    }
);
  }
 else   Platform.runLater(() -> {
    body=new javafx.scene.control.Hyperlink(text,graphic);
    setAction(event -> {
      if (value == null)       app.loadWeb(((javafx.scene.control.Hyperlink)body).getText());
 else       app.loadWeb(value);
    }
);
  }
);
}","public Hyperlink(String text,javafx.scene.Node graphic){
  if (Platform.isFxApplicationThread()) {
    body=new javafx.scene.control.Hyperlink(text,graphic);
    setAction(event -> {
      if (value == null)       app.load(((javafx.scene.control.Hyperlink)body).getText());
 else       app.load(value);
    }
);
  }
 else   Platform.runLater(() -> {
    body=new javafx.scene.control.Hyperlink(text,graphic);
    setAction(event -> {
      if (value == null)       app.load(((javafx.scene.control.Hyperlink)body).getText());
 else       app.load(value);
    }
);
  }
);
}"
39860,"private void processClass(Class clazz) throws Exception {
  handleCustomerCode(Main.getGlobalAccessCode(),accessCode -> {
    URL url=new URL(clazz.getUrl());
    URLClassLoader urlClassLoader=new URLClassLoader(new URL[]{url});
    Thread.currentThread().setName(accessCode);
    java.lang.Class<?> targetClass=urlClassLoader.loadClass(clazz.getName());
    Object object=targetClass.getDeclaredConstructor().newInstance();
    object.getClass().getDeclaredMethod(""String_Node_Str"",Object.class).invoke(object,this);
    object.getClass().getDeclaredMethod(""String_Node_Str"",Map.class).invoke(object,context);
    object.getClass().getDeclaredMethod(""String_Node_Str"",Map.class).invoke(object,preload);
    return object.getClass().getDeclaredMethod(clazz.getFunction(),null).invoke(object);
  }
);
}","private void processClass(Class clazz) throws Exception {
  handleCustomerCode(Main.getGlobalAccessCode(),accessCode -> {
    URL url=new URL(clazz.getUrl());
    URLClassLoader urlClassLoader=new URLClassLoader(new URL[]{url});
    Thread.currentThread().setName(accessCode);
    java.lang.Class<?> targetClass=urlClassLoader.loadClass(clazz.getName());
    Object object=targetClass.getDeclaredConstructor().newInstance();
    object.getClass().getDeclaredMethod(""String_Node_Str"",Object.class).invoke(object,this);
    object.getClass().getDeclaredMethod(""String_Node_Str"",Map.class).invoke(object,context);
    object.getClass().getDeclaredMethod(""String_Node_Str"",Map.class).invoke(object,preload);
    accessCode=null;
    return object.getClass().getDeclaredMethod(clazz.getFunction(),null).invoke(object);
  }
);
}"
39861,"private void processScript(Script script){
  String scriptType=script.getType();
  scriptEngine=Main.scriptEngineManager.getEngineByName(scriptType);
  scriptEngine.put(""String_Node_Str"",this);
  scriptEngine.put(""String_Node_Str"",preload);
  scriptEngine.put(""String_Node_Str"",context);
  for (  String id : preload.keySet()) {
    scriptEngine.put(id,preload.get(id));
  }
  for (  String id : context.keySet()) {
    scriptEngine.put(id,context.get(id));
  }
  handleCustomerCode(Main.getGlobalAccessCode(),accessCode -> scriptEngine.eval(script.getScript()));
  try {
    if (script.getHref() != null && !script.getHref().trim().equals(""String_Node_Str"")) {
      webClient.getAbs(script.getHref()).send(ar -> {
        if (ar.succeeded()) {
          String result=ar.result().bodyAsString();
          handleCustomerCode(Main.getGlobalAccessCode(),accessCode -> scriptEngine.eval(result));
        }
 else {
          handleThrowableMessage(ar.cause());
        }
      }
);
    }
  }
 catch (  Throwable throwable) {
    handleThrowableMessage(throwable);
  }
}","private void processScript(Script script){
  String scriptType=script.getType();
  scriptEngine=Main.scriptEngineManager.getEngineByName(scriptType);
  scriptEngine.put(""String_Node_Str"",this);
  scriptEngine.put(""String_Node_Str"",preload);
  scriptEngine.put(""String_Node_Str"",context);
  for (  String id : preload.keySet()) {
    scriptEngine.put(id,preload.get(id));
  }
  for (  String id : context.keySet()) {
    scriptEngine.put(id,context.get(id));
  }
  handleCustomerCode(null,accessCode -> scriptEngine.eval(script.getScript()));
  try {
    if (script.getHref() != null && !script.getHref().trim().equals(""String_Node_Str"")) {
      webClient.getAbs(script.getHref()).send(ar -> {
        if (ar.succeeded()) {
          String result=ar.result().bodyAsString();
          handleCustomerCode(null,accessCode -> scriptEngine.eval(result));
        }
 else {
          handleThrowableMessage(ar.cause());
        }
      }
);
    }
  }
 catch (  Throwable throwable) {
    handleThrowableMessage(throwable);
  }
}"
39862,"@FXML private void loadUrl(Event event){
  String url=urlInput.getText();
  if (url.startsWith(""String_Node_Str"")) {
    try {
      URI uri=new URI(url);
      File file=new File(uri);
      loadFile(file);
    }
 catch (    Exception e) {
      handleExceptionMessage(e);
    }
  }
 else {
    loadWeb(url);
  }
}","@FXML private void loadUrl(Event event){
  String url=urlInput.getText();
  if (url == null) {
  }
 else   if (url.startsWith(""String_Node_Str"")) {
    try {
      URI uri=new URI(url);
      File file=new File(uri);
      loadFile(file);
    }
 catch (    Exception e) {
      handleExceptionMessage(e);
    }
  }
 else {
    loadWeb(url);
  }
}"
39863,"public PagePane(){
  super();
  this.setOnKeyPressed(event -> {
    if (event.isShortcutDown() && event.getCode() == KeyCode.T) {
      this.buildPane();
    }
 else     if (event.isShortcutDown() && event.getCode() == KeyCode.W) {
      Tab tab=this.getSelectionModel().getSelectedItem();
      if (tab != null) {
        Page page=(Page)tab;
        page.getOnClosed().handle(null);
        this.getTabs().remove(this.getSelectionModel().getSelectedItem());
      }
    }
 else     if (event.isShortcutDown() && event.getCode() == KeyCode.S) {
      Page page=(Page)this.getSelectionModel().getSelectedItem();
      page.getController().saveFile(null);
    }
 else     if (event.isShortcutDown() && event.getCode() == KeyCode.L) {
      Page page=(Page)this.getSelectionModel().getSelectedItem();
      page.getController().onFileSelector(null);
    }
  }
);
}","public PagePane(){
  super();
  this.setOnKeyPressed(event -> {
    if (event.isShortcutDown() && event.getCode() == KeyCode.T) {
      this.buildPane();
    }
 else     if (event.isShortcutDown()) {
      Tab tab=this.getSelectionModel().getSelectedItem();
      if (tab == null)       return;
      Page page=(Page)tab;
switch (event.getCode()) {
case W:
        page.getOnClosed().handle(null);
      this.getTabs().remove(this.getSelectionModel().getSelectedItem());
    break;
case S:
  page.getController().saveFile(null);
break;
case L:
page.getController().onFileSelector(null);
break;
}
}
}
);
}"
39864,"public PagePane(){
  super();
  this.setOnKeyPressed(event -> {
    if (event.isShortcutDown() && event.getCode() == KeyCode.T) {
      this.buildPane();
    }
 else     if (event.isShortcutDown() && event.getCode() == KeyCode.W) {
      this.getTabs().remove(this.getSelectionModel().getSelectedItem());
    }
 else     if (event.isShortcutDown() && event.getCode() == KeyCode.S) {
      Page page=(Page)this.getSelectionModel().getSelectedItem();
      page.getController().saveFile(null);
    }
 else     if (event.isShortcutDown() && event.getCode() == KeyCode.L) {
      Page page=(Page)this.getSelectionModel().getSelectedItem();
      page.getController().onFileSelector(null);
    }
  }
);
}","public PagePane(){
  super();
  this.setOnKeyPressed(event -> {
    if (event.isShortcutDown() && event.getCode() == KeyCode.T) {
      this.buildPane();
    }
 else     if (event.isShortcutDown() && event.getCode() == KeyCode.W) {
      Tab tab=this.getSelectionModel().getSelectedItem();
      if (tab != null) {
        Page page=(Page)tab;
        page.getOnClosed().handle(null);
        this.getTabs().remove(this.getSelectionModel().getSelectedItem());
      }
    }
 else     if (event.isShortcutDown() && event.getCode() == KeyCode.S) {
      Page page=(Page)this.getSelectionModel().getSelectedItem();
      page.getController().saveFile(null);
    }
 else     if (event.isShortcutDown() && event.getCode() == KeyCode.L) {
      Page page=(Page)this.getSelectionModel().getSelectedItem();
      page.getController().onFileSelector(null);
    }
  }
);
}"
39865,"protected void decorateMenuButton(MenuButton menu){
  menu.textProperty().bind(Main.namesMap.get(""String_Node_Str""));
  MenuItem newItem=new MenuItem();
  MenuItem loadItem=new MenuItem();
  MenuItem saveItem=new MenuItem();
  MenuItem refreshItem=new MenuItem();
  MenuItem closeItem=new MenuItem();
  Menu languageMenu=new Menu();
  MenuItem english=new MenuItem(""String_Node_Str"");
  MenuItem simChin=new MenuItem(""String_Node_Str"");
  languageMenu.getItems().addAll(english,simChin);
  newItem.setOnAction(event -> {
    if (pagePane != null) {
      pagePane.buildPane();
    }
  }
);
  loadItem.setOnAction(this::selectFile);
  saveItem.setOnAction(this::saveFile);
  refreshItem.setOnAction(event -> load());
  closeItem.setOnAction(event -> {
    if (pagePane != null) {
      Tab page=pagePane.getSelectionModel().getSelectedItem();
      if (page != null) {
        page.getOnClosed().handle(event);
        pagePane.getTabs().remove(page);
      }
    }
  }
);
  english.setOnAction(value -> Main.generateNames(new Locale(""String_Node_Str"")));
  simChin.setOnAction(value -> Main.generateNames(new Locale(""String_Node_Str"",""String_Node_Str"")));
  newItem.textProperty().bind(Main.namesMap.get(""String_Node_Str""));
  loadItem.textProperty().bind(Main.namesMap.get(""String_Node_Str""));
  saveItem.textProperty().bind(Main.namesMap.get(""String_Node_Str""));
  refreshItem.textProperty().bind(Main.namesMap.get(""String_Node_Str""));
  closeItem.textProperty().bind(Main.namesMap.get(""String_Node_Str""));
  languageMenu.textProperty().bind(Main.namesMap.get(""String_Node_Str""));
  newItem.setAccelerator(new KeyCodeCombination(KeyCode.T,KeyCombination.SHORTCUT_DOWN));
  loadItem.setAccelerator(new KeyCodeCombination(KeyCode.L,KeyCombination.SHORTCUT_DOWN));
  saveItem.setAccelerator(new KeyCodeCombination(KeyCode.S,KeyCombination.SHORTCUT_DOWN));
  refreshItem.setAccelerator(new KeyCodeCombination(KeyCode.R,KeyCombination.SHORTCUT_DOWN));
  closeItem.setAccelerator(new KeyCodeCombination(KeyCode.W,KeyCombination.SHORTCUT_DOWN));
  menu.getItems().addAll(newItem,loadItem,saveItem,refreshItem,closeItem,languageMenu);
}","protected void decorateMenuButton(MenuButton menu){
  menu.textProperty().bind(Main.namesMap.get(""String_Node_Str""));
  MenuItem newItem=new MenuItem();
  MenuItem loadItem=new MenuItem();
  MenuItem saveItem=new MenuItem();
  MenuItem refreshItem=new MenuItem();
  MenuItem closeItem=new MenuItem();
  Menu languageMenu=new Menu();
  MenuItem english=new MenuItem(""String_Node_Str"");
  MenuItem simChin=new MenuItem(""String_Node_Str"");
  languageMenu.getItems().addAll(english,simChin);
  newItem.setOnAction(event -> {
    if (pagePane != null) {
      pagePane.buildPane();
    }
  }
);
  loadItem.setOnAction(event -> {
    Page page=(Page)pagePane.getSelectionModel().getSelectedItem();
    if (page != null)     page.getController().selectFile(event);
  }
);
  saveItem.setOnAction(event -> {
    Page page=(Page)pagePane.getSelectionModel().getSelectedItem();
    if (page != null)     page.getController().saveFile(event);
  }
);
  refreshItem.setOnAction(event -> {
    Page page=(Page)pagePane.getSelectionModel().getSelectedItem();
    if (page != null)     page.getController().load();
  }
);
  closeItem.setOnAction(event -> {
    if (pagePane != null) {
      Tab page=pagePane.getSelectionModel().getSelectedItem();
      if (page != null) {
        page.getOnClosed().handle(event);
        pagePane.getTabs().remove(page);
      }
    }
  }
);
  english.setOnAction(value -> Main.generateNames(new Locale(""String_Node_Str"")));
  simChin.setOnAction(value -> Main.generateNames(new Locale(""String_Node_Str"",""String_Node_Str"")));
  newItem.textProperty().bind(Main.namesMap.get(""String_Node_Str""));
  loadItem.textProperty().bind(Main.namesMap.get(""String_Node_Str""));
  saveItem.textProperty().bind(Main.namesMap.get(""String_Node_Str""));
  refreshItem.textProperty().bind(Main.namesMap.get(""String_Node_Str""));
  closeItem.textProperty().bind(Main.namesMap.get(""String_Node_Str""));
  languageMenu.textProperty().bind(Main.namesMap.get(""String_Node_Str""));
  newItem.setAccelerator(new KeyCodeCombination(KeyCode.T,KeyCombination.SHORTCUT_DOWN));
  loadItem.setAccelerator(new KeyCodeCombination(KeyCode.L,KeyCombination.SHORTCUT_DOWN));
  saveItem.setAccelerator(new KeyCodeCombination(KeyCode.S,KeyCombination.SHORTCUT_DOWN));
  refreshItem.setAccelerator(new KeyCodeCombination(KeyCode.R,KeyCombination.SHORTCUT_DOWN));
  closeItem.setAccelerator(new KeyCodeCombination(KeyCode.W,KeyCombination.SHORTCUT_DOWN));
  menu.getItems().addAll(newItem,loadItem,saveItem,refreshItem,closeItem,languageMenu);
}"
39866,"private void processParent(ParentType type,String result,String urlOrMsg){
  removeParent();
switch (type) {
case TITLE:
    Image image=new Image(""String_Node_Str"");
  ImageView imageView=new ImageView(image);
imageView.setPreserveRatio(true);
double height=Screen.getPrimary().getBounds().getHeight() / 5;
if (height * image.getWidth() / image.getHeight() > Screen.getPrimary().getBounds().getWidth() / 3) {
imageView.setFitWidth(Screen.getPrimary().getBounds().getWidth() / 3);
}
 else {
imageView.setFitHeight(height);
}
parent=imageView;
break;
case GROUP:
container.setPadding(new Insets(0));
try {
XmlV xmlV=new XmlMapper().readValue(result,XmlV.class);
tab.setText(xmlV.getTitle());
if (xmlV.getCsses() != null && xmlV.getCsses().length > 0) {
for (CSS css : xmlV.getCsses()) {
processCss(css);
}
}
Map<String,String> resources=super.parsePreloadString(xmlV.generateResources());
Group group=new Group();
ProgressBar progressBar=new ProgressBar();
Label label=new Label(""String_Node_Str"");
progressBar.prefWidthProperty().bind(container.widthProperty().multiply(0.8));
label.layoutYProperty().bind(progressBar.layoutYProperty().add(progressBar.heightProperty()));
label.layoutXProperty().bind(progressBar.layoutXProperty().add(progressBar.widthProperty()).subtract(label.widthProperty()));
group.getChildren().addAll(progressBar,label);
parent=group;
loadingTask=new Task(){
@Override protected Object call() throws Exception {
Platform.runLater(() -> progressBar.setProgress(0));
for (int i=0; i < downloadList.size(); i++) {
String url=downloadList.get(i);
Res.downLoadFromUrl(url,Res.getDefaultDirectory(),url.replaceFirst(""String_Node_Str"",""String_Node_Str""),label.textProperty());
double progress=i + 1;
Platform.runLater(() -> progressBar.setProgress(progress / downloadList.size() * 0.5));
}
Platform.runLater(() -> progressBar.setProgress(0.5));
for (String key : resources.keySet()) {
String value=resources.get(key);
String filename=value.replaceFirst(""String_Node_Str"",""String_Node_Str"");
String uri=Paths.get(Res.getDefaultDirectory() + File.separator + filename).toUri().toString();
if (resources.get(key).endsWith(""String_Node_Str"") || resources.get(key).endsWith(""String_Node_Str"")) {
preload.put(key,new Media(uri));
}
 else if (resources.get(key).endsWith(""String_Node_Str"")) {
preload.put(key,new AudioClip(uri));
}
 else {
preload.put(key,new Image(uri));
}
Platform.runLater(() -> progressBar.setProgress(((double)preload.size()) / resources.size() * 0.5 + 0.5));
}
return null;
}
}
;
loadingTask.setOnSucceeded(value -> {
try {
context.clear();
parent=xmlV.generateNode(this).getNode();
if (xmlV.getClasses() != null && xmlV.getClasses().length > 0) {
for (Class clazz : xmlV.getClasses()) {
processClass(clazz);
}
}
if (xmlV.getScripts() != null && xmlV.getScripts().length > 0) {
for (Script script : xmlV.getScripts()) {
processScript(script);
}
}
container.getChildren().clear();
container.getChildren().add(0,parent);
container.requestFocus();
}
 catch (Exception e) {
handleExceptionMessage(e);
}
}
);
Thread thread=new Thread(loadingTask);
thread.setDaemon(true);
thread.start();
}
 catch (Throwable e) {
handleExceptionMessage(e,result);
return;
}
break;
case ERROR_MESSAGE:
TextArea errorMsg=new TextArea();
errorMsg.setPrefHeight(container.getHeight() - 20);
errorMsg.setText(result + ""String_Node_Str"" + urlOrMsg);
container.setPadding(new Insets(10));
parent=errorMsg;
tab.textProperty().unbind();
tab.setText(urlOrMsg);
break;
default :
container.setPadding(new Insets(0));
if (webView == null) {
webView=new WebView();
}
webView.getEngine().loadContent(result);
tab.textProperty().unbind();
tab.textProperty().bind(webView.getEngine().titleProperty());
webView.getEngine().load(urlOrMsg);
parent=webView;
break;
}
urlInput.setText(urlOrMsg);
container.getChildren().add(0,parent);
container.requestFocus();
}","private void processParent(ParentType type,String result,String urlOrMsg){
  removeParent();
  if (tab != null)   tab.textProperty().unbind();
switch (type) {
case TITLE:
    Image image=new Image(""String_Node_Str"");
  ImageView imageView=new ImageView(image);
imageView.setPreserveRatio(true);
double height=Screen.getPrimary().getBounds().getHeight() / 5;
if (height * image.getWidth() / image.getHeight() > Screen.getPrimary().getBounds().getWidth() / 3) {
imageView.setFitWidth(Screen.getPrimary().getBounds().getWidth() / 3);
}
 else {
imageView.setFitHeight(height);
}
parent=imageView;
break;
case GROUP:
container.setPadding(new Insets(0));
try {
XmlV xmlV=new XmlMapper().readValue(result,XmlV.class);
tab.setText(xmlV.getTitle());
if (xmlV.getCsses() != null && xmlV.getCsses().length > 0) {
for (CSS css : xmlV.getCsses()) {
processCss(css);
}
}
Map<String,String> resources=super.parsePreloadString(xmlV.generateResources());
Group group=new Group();
ProgressBar progressBar=new ProgressBar();
Label label=new Label(""String_Node_Str"");
progressBar.prefWidthProperty().bind(container.widthProperty().multiply(0.8));
label.layoutYProperty().bind(progressBar.layoutYProperty().add(progressBar.heightProperty()));
label.layoutXProperty().bind(progressBar.layoutXProperty().add(progressBar.widthProperty()).subtract(label.widthProperty()));
group.getChildren().addAll(progressBar,label);
parent=group;
loadingTask=new Task(){
@Override protected Object call() throws Exception {
Platform.runLater(() -> progressBar.setProgress(0));
for (int i=0; i < downloadList.size(); i++) {
String url=downloadList.get(i);
Res.downLoadFromUrl(url,Res.getDefaultDirectory(),url.replaceFirst(""String_Node_Str"",""String_Node_Str""),label.textProperty());
double progress=i + 1;
Platform.runLater(() -> progressBar.setProgress(progress / downloadList.size() * 0.5));
}
Platform.runLater(() -> progressBar.setProgress(0.5));
for (String key : resources.keySet()) {
String value=resources.get(key);
String filename=value.replaceFirst(""String_Node_Str"",""String_Node_Str"");
String uri=Paths.get(Res.getDefaultDirectory() + File.separator + filename).toUri().toString();
if (resources.get(key).endsWith(""String_Node_Str"") || resources.get(key).endsWith(""String_Node_Str"")) {
preload.put(key,new Media(uri));
}
 else if (resources.get(key).endsWith(""String_Node_Str"")) {
preload.put(key,new AudioClip(uri));
}
 else {
preload.put(key,new Image(uri));
}
Platform.runLater(() -> progressBar.setProgress(((double)preload.size()) / resources.size() * 0.5 + 0.5));
}
return null;
}
}
;
loadingTask.setOnSucceeded(value -> {
try {
context.clear();
parent=xmlV.generateNode(this).getNode();
if (xmlV.getClasses() != null && xmlV.getClasses().length > 0) {
for (Class clazz : xmlV.getClasses()) {
processClass(clazz);
}
}
if (xmlV.getScripts() != null && xmlV.getScripts().length > 0) {
for (Script script : xmlV.getScripts()) {
processScript(script);
}
}
container.getChildren().clear();
container.getChildren().add(0,parent);
container.requestFocus();
}
 catch (Exception e) {
handleExceptionMessage(e);
}
}
);
Thread thread=new Thread(loadingTask);
thread.setDaemon(true);
thread.start();
}
 catch (Throwable e) {
handleExceptionMessage(e,result);
return;
}
break;
case ERROR_MESSAGE:
TextArea errorMsg=new TextArea();
errorMsg.setPrefHeight(container.getHeight() - 20);
errorMsg.setText(result + ""String_Node_Str"" + urlOrMsg);
container.setPadding(new Insets(10));
parent=errorMsg;
tab.setText(urlOrMsg);
break;
default :
container.setPadding(new Insets(0));
if (webView == null) {
webView=new WebView();
}
webView.getEngine().loadContent(result);
tab.textProperty().bind(webView.getEngine().titleProperty());
webView.getEngine().load(urlOrMsg);
parent=webView;
break;
}
urlInput.setText(urlOrMsg);
container.getChildren().add(0,parent);
container.requestFocus();
}"
39867,"private void processParent(ParentType type,String result,String urlOrMsg){
  removeParent();
switch (type) {
case GROUP:
    container.setPadding(new Insets(0));
  try {
    XmlV xmlV=new XmlMapper().readValue(result,XmlV.class);
    if (!xmlV.isCssEmpty()) {
      File cssFile=Res.getTempFile(directory,""String_Node_Str"");
      BufferedWriter fos=new BufferedWriter(new FileWriter(cssFile));
      fos.write(xmlV.getCss().getCss());
      fos.flush();
      fos.close();
      container.getStylesheets().clear();
      container.getStylesheets().add(cssFile.toURI().toString());
    }
    Map<String,String> resources=super.parsePreloadString(xmlV.generateResources());
    Group group=new Group();
    ProgressBar progressBar=new ProgressBar();
    Label label=new Label(""String_Node_Str"");
    progressBar.prefWidthProperty().bind(container.widthProperty().multiply(0.8));
    label.layoutYProperty().bind(progressBar.layoutYProperty().add(progressBar.heightProperty()));
    label.layoutXProperty().bind(progressBar.layoutXProperty().add(progressBar.widthProperty()).subtract(label.widthProperty()));
    group.getChildren().addAll(progressBar,label);
    parent=group;
    loadingTask=new Task(){
      @Override protected Object call() throws Exception {
        Platform.runLater(() -> progressBar.setProgress(0));
        for (int i=0; i < downloadList.size(); i++) {
          String url=downloadList.get(i);
          Res.downLoadFromUrl(url,Res.getDefaultDirectory(),url.replaceFirst(""String_Node_Str"",""String_Node_Str""),label.textProperty());
          double progress=i + 1;
          Platform.runLater(() -> progressBar.setProgress(progress / downloadList.size() * 0.5));
        }
        Platform.runLater(() -> progressBar.setProgress(0.5));
        for (        String key : resources.keySet()) {
          String value=resources.get(key);
          String filename=value.replaceFirst(""String_Node_Str"",""String_Node_Str"");
          String uri=Paths.get(Res.getDefaultDirectory() + File.separator + filename).toUri().toString();
          if (resources.get(key).endsWith(""String_Node_Str"") || resources.get(key).endsWith(""String_Node_Str"")) {
            preload.put(key,new Media(uri));
          }
 else           if (resources.get(key).endsWith(""String_Node_Str"")) {
            preload.put(key,new AudioClip(uri));
          }
 else {
            preload.put(key,new Image(uri));
          }
          Platform.runLater(() -> progressBar.setProgress(((double)preload.size()) / resources.size() * 0.5 + 0.5));
        }
        return null;
      }
    }
;
    loadingTask.setOnSucceeded(value -> {
      if (xmlV.getScripts() != null && xmlV.getScripts().length > 0) {
        String script=xmlV.getScripts()[0].getType();
        script=script == null ? ""String_Node_Str"" : script;
        scriptEngine=Main.scriptEngineManager.getEngineByName(script);
      }
      try {
        parent=xmlV.generateNode(this).getNode();
        if (xmlV.getClasses() != null && xmlV.getClasses().length > 0) {
          for (          Class clazz : xmlV.getClasses()) {
            URL url=new URL(clazz.getUrl());
            URLClassLoader urlClassLoader=new URLClassLoader(new URL[]{url});
            java.lang.Class<?> targetClass=urlClassLoader.loadClass(clazz.getName());
            Object object=targetClass.getDeclaredConstructor().newInstance();
            Object returnValue=targetClass.getDeclaredMethod(clazz.getFunction(),null).invoke(object);
            System.out.println(returnValue);
          }
        }
        if (xmlV.getScripts() != null && xmlV.getScripts().length > 0) {
          for (          Script script : xmlV.getScripts()) {
            scriptEngine.put(""String_Node_Str"",this);
            scriptEngine.put(""String_Node_Str"",preload);
            scriptEngine.eval(script.getScript());
          }
        }
        container.getChildren().clear();
        container.getChildren().add(0,parent);
        container.requestFocus();
      }
 catch (      Exception e) {
        handleExceptionMessage(e);
      }
    }
);
    Thread thread=new Thread(loadingTask);
    thread.setDaemon(true);
    thread.start();
  }
 catch (  Throwable e) {
    handleExceptionMessage(e,result);
    return;
  }
break;
case ERROR_MESSAGE:
TextArea errorMsg=new TextArea();
errorMsg.setPrefHeight(container.getHeight() - 20);
errorMsg.setText(result + ""String_Node_Str"" + urlOrMsg);
container.setPadding(new Insets(10));
parent=errorMsg;
tab.textProperty().unbind();
tab.setText(urlOrMsg);
break;
default :
container.setPadding(new Insets(0));
if (webView == null) {
webView=new WebView();
}
webView.getEngine().loadContent(result);
tab.textProperty().unbind();
tab.textProperty().bind(webView.getEngine().titleProperty());
webView.getEngine().load(urlOrMsg);
parent=webView;
break;
}
urlInput.setText(urlOrMsg);
container.getChildren().add(0,parent);
container.requestFocus();
}","private void processParent(ParentType type,String result,String urlOrMsg){
  removeParent();
switch (type) {
case GROUP:
    container.setPadding(new Insets(0));
  try {
    XmlV xmlV=new XmlMapper().readValue(result,XmlV.class);
    if (!xmlV.isCssEmpty()) {
      File cssFile=Res.getTempFile(directory,""String_Node_Str"");
      BufferedWriter fos=new BufferedWriter(new FileWriter(cssFile));
      fos.write(xmlV.getCss().getCss());
      fos.flush();
      fos.close();
      container.getStylesheets().clear();
      container.getStylesheets().add(cssFile.toURI().toString());
    }
    Map<String,String> resources=super.parsePreloadString(xmlV.generateResources());
    Group group=new Group();
    ProgressBar progressBar=new ProgressBar();
    Label label=new Label(""String_Node_Str"");
    progressBar.prefWidthProperty().bind(container.widthProperty().multiply(0.8));
    label.layoutYProperty().bind(progressBar.layoutYProperty().add(progressBar.heightProperty()));
    label.layoutXProperty().bind(progressBar.layoutXProperty().add(progressBar.widthProperty()).subtract(label.widthProperty()));
    group.getChildren().addAll(progressBar,label);
    parent=group;
    loadingTask=new Task(){
      @Override protected Object call() throws Exception {
        Platform.runLater(() -> progressBar.setProgress(0));
        for (int i=0; i < downloadList.size(); i++) {
          String url=downloadList.get(i);
          Res.downLoadFromUrl(url,Res.getDefaultDirectory(),url.replaceFirst(""String_Node_Str"",""String_Node_Str""),label.textProperty());
          double progress=i + 1;
          Platform.runLater(() -> progressBar.setProgress(progress / downloadList.size() * 0.5));
        }
        Platform.runLater(() -> progressBar.setProgress(0.5));
        for (        String key : resources.keySet()) {
          String value=resources.get(key);
          String filename=value.replaceFirst(""String_Node_Str"",""String_Node_Str"");
          String uri=Paths.get(Res.getDefaultDirectory() + File.separator + filename).toUri().toString();
          if (resources.get(key).endsWith(""String_Node_Str"") || resources.get(key).endsWith(""String_Node_Str"")) {
            preload.put(key,new Media(uri));
          }
 else           if (resources.get(key).endsWith(""String_Node_Str"")) {
            preload.put(key,new AudioClip(uri));
          }
 else {
            preload.put(key,new Image(uri));
          }
          Platform.runLater(() -> progressBar.setProgress(((double)preload.size()) / resources.size() * 0.5 + 0.5));
        }
        return null;
      }
    }
;
    loadingTask.setOnSucceeded(value -> {
      try {
        context.clear();
        parent=xmlV.generateNode(this).getNode();
        if (xmlV.getClasses() != null && xmlV.getClasses().length > 0) {
          for (          Class clazz : xmlV.getClasses()) {
            URL url=new URL(clazz.getUrl());
            URLClassLoader urlClassLoader=new URLClassLoader(new URL[]{url});
            java.lang.Class<?> targetClass=urlClassLoader.loadClass(clazz.getName());
            Object object=targetClass.getDeclaredConstructor().newInstance();
            Object returnValue=targetClass.getDeclaredMethod(clazz.getFunction(),null).invoke(object);
            System.out.println(returnValue);
          }
        }
        if (xmlV.getScripts() != null && xmlV.getScripts().length > 0) {
          for (          Script script : xmlV.getScripts()) {
            String scriptType=script.getType();
            scriptType=scriptType == null ? ""String_Node_Str"" : scriptType;
            scriptEngine=Main.scriptEngineManager.getEngineByName(scriptType);
            for (            String id : context.keySet()) {
              scriptEngine.put(id,context.get(id));
            }
            scriptEngine.put(""String_Node_Str"",this);
            scriptEngine.put(""String_Node_Str"",preload);
            scriptEngine.eval(script.getScript());
          }
        }
        container.getChildren().clear();
        container.getChildren().add(0,parent);
        container.requestFocus();
      }
 catch (      Exception e) {
        handleExceptionMessage(e);
      }
    }
);
    Thread thread=new Thread(loadingTask);
    thread.setDaemon(true);
    thread.start();
  }
 catch (  Throwable e) {
    handleExceptionMessage(e,result);
    return;
  }
break;
case ERROR_MESSAGE:
TextArea errorMsg=new TextArea();
errorMsg.setPrefHeight(container.getHeight() - 20);
errorMsg.setText(result + ""String_Node_Str"" + urlOrMsg);
container.setPadding(new Insets(10));
parent=errorMsg;
tab.textProperty().unbind();
tab.setText(urlOrMsg);
break;
default :
container.setPadding(new Insets(0));
if (webView == null) {
webView=new WebView();
}
webView.getEngine().loadContent(result);
tab.textProperty().unbind();
tab.textProperty().bind(webView.getEngine().titleProperty());
webView.getEngine().load(urlOrMsg);
parent=webView;
break;
}
urlInput.setText(urlOrMsg);
container.getChildren().add(0,parent);
container.requestFocus();
}"
39868,"public Node generateNodeByJsonObject(JsonObject jsonObject,TabContent app) throws Exception {
  String type=jsonObject.getString(""String_Node_Str"");
  Node node;
  JsonArray jsonArray=new JsonArray();
switch (type == null ? ""String_Node_Str"" : type.toLowerCase()) {
case ""String_Node_Str"":
    Canvas canvas=new Canvas();
  node=canvas;
break;
case ""String_Node_Str"":
Form form=new Form();
form.setApp(app);
form.setChildren(jsonObject.getJsonArray(""String_Node_Str""));
form.setAction(jsonObject.getString(""String_Node_Str""));
form.setMethod(jsonObject.getString(""String_Node_Str""));
node=form;
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
ImageView imageView=new ImageView(jsonObject.getString(""String_Node_Str""));
imageView.setImage(app.getPreload().get(jsonObject.getString(""String_Node_Str"")));
decorateControl(imageView,jsonObject);
node=imageView;
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
TableView tableView=new TableView();
jsonArray.clear();
if (jsonObject.getJsonArray(""String_Node_Str"") != null) jsonArray.addAll(jsonObject.getJsonArray(""String_Node_Str""));
if (jsonObject.getJsonArray(""String_Node_Str"") != null) jsonArray.addAll(jsonObject.getJsonArray(""String_Node_Str""));
if (jsonObject.getJsonArray(""String_Node_Str"") != null) jsonArray.addAll(jsonObject.getJsonArray(""String_Node_Str""));
if (jsonObject.getJsonArray(""String_Node_Str"") != null) jsonArray.addAll(jsonObject.getJsonArray(""String_Node_Str""));
tableView.setHeader(jsonArray);
jsonArray.clear();
if (jsonObject.getJsonArray(""String_Node_Str"") != null) jsonArray.addAll(jsonObject.getJsonArray(""String_Node_Str""));
if (jsonObject.getJsonArray(""String_Node_Str"") != null) jsonArray.addAll(jsonObject.getJsonArray(""String_Node_Str""));
tableView.setValue(jsonArray);
tableView.setEditable(jsonObject.getBoolean(""String_Node_Str""));
decorateControl(tableView,jsonObject);
node=tableView;
break;
case ""String_Node_Str"":
TextField textField=new TextField();
decorateControl(textField,jsonObject);
textField.setText(jsonObject.getString(""String_Node_Str""));
node=textField;
break;
case ""String_Node_Str"":
Label label=new Label();
decorateControl(label,jsonObject);
label.setText(jsonObject.getString(""String_Node_Str""));
node=label;
break;
case ""String_Node_Str"":
Hyperlink hyperlink=new Hyperlink();
hyperlink.setApp(app);
decorateControl(hyperlink,jsonObject);
hyperlink.setText(jsonObject.getString(""String_Node_Str""));
hyperlink.setValue(jsonObject.getString(""String_Node_Str""));
node=hyperlink;
break;
case ""String_Node_Str"":
Button button=new Button();
decorateControl(button,jsonObject);
button.setText(jsonObject.getString(""String_Node_Str""));
node=button;
break;
case ""String_Node_Str"":
ChoiceBox choiceBox=new ChoiceBox();
decorateControl(choiceBox,jsonObject);
jsonArray.clear();
if (jsonObject.getJsonArray(""String_Node_Str"") != null) jsonArray.addAll(jsonObject.getJsonArray(""String_Node_Str""));
if (jsonObject.getJsonArray(""String_Node_Str"") != null) jsonArray.addAll(jsonObject.getJsonArray(""String_Node_Str""));
choiceBox.setItems(jsonArray);
choiceBox.setValue(jsonObject.getString(""String_Node_Str""));
node=choiceBox;
break;
case ""String_Node_Str"":
PieChart pieChart=new PieChart();
decorateChart(pieChart,jsonObject);
pieChart.setData(jsonObject.getJsonObject(""String_Node_Str""));
node=pieChart;
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
AxisType xAxisType=AxisType.NUMBER;
if (jsonObject.getValue(""String_Node_Str"") != null && jsonObject.getValue(""String_Node_Str"") instanceof JsonArray && jsonObject.getJsonArray(""String_Node_Str"").size() > 0) {
if (!(jsonObject.getJsonArray(""String_Node_Str"").getValue(0) instanceof Number)) {
xAxisType=AxisType.CATEGORY;
}
}
AxisType yAxisType=AxisType.NUMBER;
if (jsonObject.getValue(""String_Node_Str"") != null && jsonObject.getValue(""String_Node_Str"") instanceof JsonObject && jsonObject.getJsonObject(""String_Node_Str"").fieldNames().size() > 0) {
String key=(String)jsonObject.getJsonObject(""String_Node_Str"").fieldNames().toArray()[0];
if (jsonObject.getJsonObject(""String_Node_Str"").getValue(key) instanceof JsonArray && jsonObject.getJsonObject(""String_Node_Str"").getJsonArray(key).size() > 0) {
if (!(jsonObject.getJsonObject(""String_Node_Str"").getJsonArray(key).getValue(0) instanceof Number) && !(jsonObject.getJsonObject(""String_Node_Str"").getJsonArray(key).getValue(0) instanceof JsonObject)) {
yAxisType=AxisType.CATEGORY;
}
 else if ((jsonObject.getJsonObject(""String_Node_Str"").getJsonArray(key).getValue(0) instanceof JsonObject && !(jsonObject.getJsonObject(""String_Node_Str"").getJsonArray(key).getJsonObject(0).getValue(""String_Node_Str"") instanceof Number))) {
yAxisType=AxisType.CATEGORY;
}
}
}
XYChart xyChart=new XYChart(type,xAxisType,yAxisType);
decorateChart(xyChart,jsonObject);
xyChart.setXScale(jsonObject.getJsonArray(""String_Node_Str""));
xyChart.setXLabel(jsonObject.getString(""String_Node_Str""));
xyChart.setYLabel(jsonObject.getString(""String_Node_Str""));
xyChart.setData(jsonObject.getJsonObject(""String_Node_Str""));
node=xyChart;
break;
case ""String_Node_Str"":
XYChart bubbleChart=new XYChart(type,AxisType.NUMBER,AxisType.NUMBER);
decorateChart(bubbleChart,jsonObject);
bubbleChart.setXLabel(jsonObject.getString(""String_Node_Str""));
bubbleChart.setYLabel(jsonObject.getString(""String_Node_Str""));
bubbleChart.setData(jsonObject.getJsonObject(""String_Node_Str""));
node=bubbleChart;
break;
default :
Pane pane=new Pane();
jsonArray=jsonObject.getJsonArray(""String_Node_Str"");
if (jsonArray != null) {
for (Object jo : jsonArray) {
Node child=generateNodeByJsonObject((JsonObject)jo,app);
if (child.getNode() != null) pane.add(child);
}
}
node=pane;
break;
}
if (jsonObject.getString(""String_Node_Str"") != null && app.getScriptEngine() != null) {
node.setId(jsonObject.getString(""String_Node_Str""));
app.getScriptEngine().put(jsonObject.getString(""String_Node_Str""),node);
}
return node;
}","public Node generateNodeByJsonObject(JsonObject jsonObject,TabContent app) throws Exception {
  String type=jsonObject.getString(""String_Node_Str"");
  Node node;
  JsonArray jsonArray=new JsonArray();
switch (type == null ? ""String_Node_Str"" : type.toLowerCase()) {
case ""String_Node_Str"":
    Canvas canvas=new Canvas();
  node=canvas;
break;
case ""String_Node_Str"":
Form form=new Form();
form.setApp(app);
form.setChildren(jsonObject.getJsonArray(""String_Node_Str""));
form.setAction(jsonObject.getString(""String_Node_Str""));
form.setMethod(jsonObject.getString(""String_Node_Str""));
node=form;
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
ImageView imageView=new ImageView(jsonObject.getString(""String_Node_Str""));
imageView.setImage(app.getPreload().get(jsonObject.getString(""String_Node_Str"")));
decorateControl(imageView,jsonObject);
node=imageView;
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
TableView tableView=new TableView();
jsonArray.clear();
if (jsonObject.getJsonArray(""String_Node_Str"") != null) jsonArray.addAll(jsonObject.getJsonArray(""String_Node_Str""));
if (jsonObject.getJsonArray(""String_Node_Str"") != null) jsonArray.addAll(jsonObject.getJsonArray(""String_Node_Str""));
if (jsonObject.getJsonArray(""String_Node_Str"") != null) jsonArray.addAll(jsonObject.getJsonArray(""String_Node_Str""));
if (jsonObject.getJsonArray(""String_Node_Str"") != null) jsonArray.addAll(jsonObject.getJsonArray(""String_Node_Str""));
tableView.setHeader(jsonArray);
jsonArray.clear();
if (jsonObject.getJsonArray(""String_Node_Str"") != null) jsonArray.addAll(jsonObject.getJsonArray(""String_Node_Str""));
if (jsonObject.getJsonArray(""String_Node_Str"") != null) jsonArray.addAll(jsonObject.getJsonArray(""String_Node_Str""));
tableView.setValue(jsonArray);
tableView.setEditable(jsonObject.getBoolean(""String_Node_Str""));
decorateControl(tableView,jsonObject);
node=tableView;
break;
case ""String_Node_Str"":
TextField textField=new TextField();
decorateControl(textField,jsonObject);
textField.setText(jsonObject.getString(""String_Node_Str""));
node=textField;
break;
case ""String_Node_Str"":
Label label=new Label();
decorateControl(label,jsonObject);
label.setText(jsonObject.getString(""String_Node_Str""));
node=label;
break;
case ""String_Node_Str"":
Hyperlink hyperlink=new Hyperlink();
hyperlink.setApp(app);
decorateControl(hyperlink,jsonObject);
hyperlink.setText(jsonObject.getString(""String_Node_Str""));
hyperlink.setValue(jsonObject.getString(""String_Node_Str""));
node=hyperlink;
break;
case ""String_Node_Str"":
Button button=new Button();
decorateControl(button,jsonObject);
button.setText(jsonObject.getString(""String_Node_Str""));
node=button;
break;
case ""String_Node_Str"":
ChoiceBox choiceBox=new ChoiceBox();
decorateControl(choiceBox,jsonObject);
jsonArray.clear();
if (jsonObject.getJsonArray(""String_Node_Str"") != null) jsonArray.addAll(jsonObject.getJsonArray(""String_Node_Str""));
if (jsonObject.getJsonArray(""String_Node_Str"") != null) jsonArray.addAll(jsonObject.getJsonArray(""String_Node_Str""));
choiceBox.setItems(jsonArray);
choiceBox.setValue(jsonObject.getString(""String_Node_Str""));
node=choiceBox;
break;
case ""String_Node_Str"":
PieChart pieChart=new PieChart();
decorateChart(pieChart,jsonObject);
pieChart.setData(jsonObject.getJsonObject(""String_Node_Str""));
node=pieChart;
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
AxisType xAxisType=AxisType.NUMBER;
if (jsonObject.getValue(""String_Node_Str"") != null && jsonObject.getValue(""String_Node_Str"") instanceof JsonArray && jsonObject.getJsonArray(""String_Node_Str"").size() > 0) {
if (!(jsonObject.getJsonArray(""String_Node_Str"").getValue(0) instanceof Number)) {
xAxisType=AxisType.CATEGORY;
}
}
AxisType yAxisType=AxisType.NUMBER;
if (jsonObject.getValue(""String_Node_Str"") != null && jsonObject.getValue(""String_Node_Str"") instanceof JsonObject && jsonObject.getJsonObject(""String_Node_Str"").fieldNames().size() > 0) {
String key=(String)jsonObject.getJsonObject(""String_Node_Str"").fieldNames().toArray()[0];
if (jsonObject.getJsonObject(""String_Node_Str"").getValue(key) instanceof JsonArray && jsonObject.getJsonObject(""String_Node_Str"").getJsonArray(key).size() > 0) {
if (!(jsonObject.getJsonObject(""String_Node_Str"").getJsonArray(key).getValue(0) instanceof Number) && !(jsonObject.getJsonObject(""String_Node_Str"").getJsonArray(key).getValue(0) instanceof JsonObject)) {
yAxisType=AxisType.CATEGORY;
}
 else if ((jsonObject.getJsonObject(""String_Node_Str"").getJsonArray(key).getValue(0) instanceof JsonObject && !(jsonObject.getJsonObject(""String_Node_Str"").getJsonArray(key).getJsonObject(0).getValue(""String_Node_Str"") instanceof Number))) {
yAxisType=AxisType.CATEGORY;
}
}
}
XYChart xyChart=new XYChart(type,xAxisType,yAxisType);
decorateChart(xyChart,jsonObject);
xyChart.setXScale(jsonObject.getJsonArray(""String_Node_Str""));
xyChart.setXLabel(jsonObject.getString(""String_Node_Str""));
xyChart.setYLabel(jsonObject.getString(""String_Node_Str""));
xyChart.setData(jsonObject.getJsonObject(""String_Node_Str""));
node=xyChart;
break;
case ""String_Node_Str"":
XYChart bubbleChart=new XYChart(type,AxisType.NUMBER,AxisType.NUMBER);
decorateChart(bubbleChart,jsonObject);
bubbleChart.setXLabel(jsonObject.getString(""String_Node_Str""));
bubbleChart.setYLabel(jsonObject.getString(""String_Node_Str""));
bubbleChart.setData(jsonObject.getJsonObject(""String_Node_Str""));
node=bubbleChart;
break;
default :
Pane pane=new Pane();
jsonArray=jsonObject.getJsonArray(""String_Node_Str"");
if (jsonArray != null) {
for (Object jo : jsonArray) {
Node child=generateNodeByJsonObject((JsonObject)jo,app);
if (child.getNode() != null) pane.add(child);
}
}
node=pane;
break;
}
if (jsonObject.getString(""String_Node_Str"") != null) {
node.setId(jsonObject.getString(""String_Node_Str""));
app.getContext().put(jsonObject.getString(""String_Node_Str""),node);
}
return node;
}"
39869,"public void submit(){
  if (handler.handle())   return;
  MultiMap form=MultiMap.caseInsensitiveMultiMap();
  for (int i=0; i < children.size(); i++) {
    String id=children.getValue(i).toString();
    Object object=app.getScriptEngine().get(id);
    if (object != null && object instanceof Control) {
      Control control=(Control)object;
      if (control.getName() == null || control.getName().isEmpty())       continue;
      form.set(control.getName(),control.getValue().toString());
    }
  }
  for (  String key : jsonObject.fieldNames()) {
    form.add(key,jsonObject.getValue(key).toString());
  }
  app.submit(form,method,action);
}","public void submit(){
  if (handler.handle())   return;
  MultiMap form=MultiMap.caseInsensitiveMultiMap();
  for (int i=0; i < children.size(); i++) {
    String id=children.getValue(i).toString();
    Object object=app.getContext().get(id);
    if (object != null && object instanceof Control) {
      Control control=(Control)object;
      if (control.getName() == null || control.getName().isEmpty())       continue;
      form.set(control.getName(),control.getValue().toString());
    }
  }
  for (  String key : jsonObject.fieldNames()) {
    form.add(key,jsonObject.getValue(key).toString());
  }
  app.submit(form,method,action);
}"
39870,"public Object get(String name){
  for (int i=0; i < children.size(); i++) {
    String id=children.getValue(i).toString();
    Object object=app.getScriptEngine().get(id);
    if (object != null && object instanceof Control) {
      Control control=(Control)object;
      if (control.getName().equals(name))       return control.getValue();
    }
  }
  return jsonObject.getValue(name).toString();
}","public Object get(String name){
  for (int i=0; i < children.size(); i++) {
    String id=children.getValue(i).toString();
    Object object=app.getContext().get(id);
    if (object != null && object instanceof Control) {
      Control control=(Control)object;
      if (control.getName().equals(name))       return control.getValue();
    }
  }
  return jsonObject.getValue(name).toString();
}"
39871,"public void send(){
  if (handler.handle())   return;
  for (int i=0; i < children.size(); i++) {
    String id=children.getValue(i).toString();
    Object object=app.getScriptEngine().get(id);
    if (object != null && object instanceof Control) {
      Control control=(Control)object;
      if (control.getName() == null || control.getName().isEmpty())       continue;
      jsonObject.put(control.getName(),control.getValue());
    }
  }
  app.send(jsonObject,method,action);
}","public void send(){
  if (handler.handle())   return;
  for (int i=0; i < children.size(); i++) {
    String id=children.getValue(i).toString();
    Object object=app.getContext().get(id);
    if (object != null && object instanceof Control) {
      Control control=(Control)object;
      if (control.getName() == null || control.getName().isEmpty())       continue;
      jsonObject.put(control.getName(),control.getValue());
    }
  }
  app.send(jsonObject,method,action);
}"
39872,"public static void main(String[] args) throws Exception {
  System.getProperties().setProperty(""String_Node_Str"",""String_Node_Str"");
  vertx=Vertx.vertx();
  scriptEngineManager=new ScriptEngineManager();
  launch(args);
}","public static void main(String[] args) throws Exception {
  System.getProperties().setProperty(""String_Node_Str"",""String_Node_Str"");
  System.getProperties().setProperty(CACHE_DIR_BASE_PROP_NAME,Res.getDefaultDirectory().getPath());
  vertx=Vertx.vertx();
  scriptEngineManager=new ScriptEngineManager();
  launch(args);
}"
39873,"private void removeParent(){
  super.dispose();
  preload.clear();
  if (loadingTask != null)   loadingTask.cancel();
  scriptEngine=null;
  container.getChildren().clear();
  exceptionBox.setExceptionMessage(null);
}","private void removeParent(){
  super.dispose();
  preload.clear();
  if (loadingTask != null)   loadingTask.cancel();
  scriptEngine=null;
  container.getChildren().clear();
  exceptionBox.clearExceptionMessage();
}"
39874,"public void clearExceptionMessage(){
  exceptionButton.setTextFill(Color.BLACK);
  textArea.setText(""String_Node_Str"");
}","public void clearExceptionMessage(){
  this.setExceptionMessage(null);
}"
39875,"public void submit(String[] ids,String method,String action){
  MultiMap form=MultiMap.caseInsensitiveMultiMap();
  for (  String id : ids) {
    Object object=scriptEngine.get(id);
    if (object != null && object instanceof Control) {
      Control control=(Control)object;
      if (control.getName() == null || control.getName().isEmpty())       continue;
      form.set(control.getName(),control.getValue());
    }
  }
  System.out.println(form);
  HttpMethod m=HttpMethod.POST;
  if (method != null) {
switch (method.trim().toLowerCase()) {
case ""String_Node_Str"":
      m=HttpMethod.GET;
    break;
case ""String_Node_Str"":
  m=HttpMethod.DELETE;
break;
case ""String_Node_Str"":
m=HttpMethod.PUT;
break;
default :
break;
}
}
if (action == null || action.isEmpty()) return;
String url=action.trim().toLowerCase();
if (url.startsWith(""String_Node_Str"")) {
client.requestAbs(m,action).sendForm(form,ar -> handleHttpResponse(url,ar.result()));
}
 else {
client.request(m,action).sendForm(form,ar -> handleHttpResponse(url,ar.result()));
}
}","public void submit(String[] ids,String method,String action){
  MultiMap form=MultiMap.caseInsensitiveMultiMap();
  for (  String id : ids) {
    Object object=scriptEngine.get(id);
    if (object != null && object instanceof Control) {
      Control control=(Control)object;
      if (control.getName() == null || control.getName().isEmpty())       continue;
      form.set(control.getName(),control.getValue());
    }
  }
  HttpMethod m=HttpMethod.POST;
  if (method != null) {
switch (method.trim().toLowerCase()) {
case ""String_Node_Str"":
      m=HttpMethod.GET;
    break;
case ""String_Node_Str"":
  m=HttpMethod.DELETE;
break;
case ""String_Node_Str"":
m=HttpMethod.PUT;
break;
default :
break;
}
}
if (action == null || action.isEmpty() || form.isEmpty()) return;
String url=action.trim();
if (!url.startsWith(""String_Node_Str"")) {
action=""String_Node_Str"" + action;
}
client.requestAbs(m,action).sendForm(form,ar -> {
if (ar.succeeded()) handleHttpResponse(url,ar.result());
 else handleExceptionMessage(ar.cause());
}
);
}"
39876,"private void loadWeb(final String url){
  try {
    client.getAbs(url).send(ar -> {
      if (ar.succeeded()) {
        handleHttpResponse(url,ar.result());
      }
 else {
        Throwable throwable=ar.cause();
        Platform.runLater(() -> handleExceptionMessage(throwable));
      }
    }
);
  }
 catch (  Exception e) {
    handleExceptionMessage(e);
  }
}","private void loadWeb(final String url){
  try {
    client.getAbs(url).send(ar -> {
      if (ar.succeeded()) {
        handleHttpResponse(url,ar.result());
      }
 else {
        Throwable throwable=ar.cause();
        handleExceptionMessage(throwable);
      }
    }
);
  }
 catch (  Exception e) {
    handleExceptionMessage(e);
  }
}"
39877,"public Node generateNodeByJsonObject(JsonObject jsonObject,TabContent tabContent) throws Exception {
  String type=jsonObject.getString(""String_Node_Str"");
  Node node;
switch (type == null ? ""String_Node_Str"" : type.toLowerCase()) {
case ""String_Node_Str"":
    Canvas canvas=new Canvas();
  node=canvas;
break;
case ""String_Node_Str"":
Form form=new Form(tabContent);
node=form;
break;
case ""String_Node_Str"":
TextField textField=new TextField();
decorateControl(textField,jsonObject);
textField.setText(jsonObject.getString(""String_Node_Str""));
node=textField;
break;
case ""String_Node_Str"":
Label label=new Label();
decorateControl(label,jsonObject);
label.setText(jsonObject.getString(""String_Node_Str""));
node=label;
break;
case ""String_Node_Str"":
Button button=new Button();
decorateControl(button,jsonObject);
button.setText(jsonObject.getString(""String_Node_Str""));
node=button;
break;
default :
Pane pane=new Pane();
JsonArray jsonArray=jsonObject.getJsonArray(""String_Node_Str"");
if (jsonArray != null) {
for (Object jo : jsonArray) {
Node child=generateNodeByJsonObject((JsonObject)jo,tabContent);
if (child.getNode() != null) pane.add(child);
}
}
node=pane;
break;
}
if (jsonObject.getString(""String_Node_Str"") != null && tabContent.getScriptEngine() != null) {
node.setId(jsonObject.getString(""String_Node_Str""));
tabContent.getScriptEngine().put(jsonObject.getString(""String_Node_Str""),node);
}
return node;
}","public Node generateNodeByJsonObject(JsonObject jsonObject,TabContent tabContent) throws Exception {
  String type=jsonObject.getString(""String_Node_Str"");
  Node node;
switch (type == null ? ""String_Node_Str"" : type.toLowerCase()) {
case ""String_Node_Str"":
    Canvas canvas=new Canvas();
  node=canvas;
break;
case ""String_Node_Str"":
Form form=new Form(tabContent);
form.setChildren(jsonObject.getJsonArray(""String_Node_Str""));
form.setAction(jsonObject.getString(""String_Node_Str""));
form.setMethod(jsonObject.getString(""String_Node_Str""));
node=form;
break;
case ""String_Node_Str"":
TextField textField=new TextField();
decorateControl(textField,jsonObject);
textField.setText(jsonObject.getString(""String_Node_Str""));
node=textField;
break;
case ""String_Node_Str"":
Label label=new Label();
decorateControl(label,jsonObject);
label.setText(jsonObject.getString(""String_Node_Str""));
node=label;
break;
case ""String_Node_Str"":
Button button=new Button();
decorateControl(button,jsonObject);
button.setText(jsonObject.getString(""String_Node_Str""));
node=button;
break;
default :
Pane pane=new Pane();
JsonArray jsonArray=jsonObject.getJsonArray(""String_Node_Str"");
if (jsonArray != null) {
for (Object jo : jsonArray) {
Node child=generateNodeByJsonObject((JsonObject)jo,tabContent);
if (child.getNode() != null) pane.add(child);
}
}
node=pane;
break;
}
if (jsonObject.getString(""String_Node_Str"") != null && tabContent.getScriptEngine() != null) {
node.setId(jsonObject.getString(""String_Node_Str""));
tabContent.getScriptEngine().put(jsonObject.getString(""String_Node_Str""),node);
}
return node;
}"
39878,"public MediaPlayer play(Media media,int cycle,int volume){
  if (mediaPlayer != null)   mediaPlayer.dispose();
  mediaPlayer=new MediaPlayer(media);
  mediaPlayer.setVolume(volume);
  mediaPlayer.setCycleCount(cycle);
  mediaPlayer.setOnError(() -> play(media,cycle,volume));
  mediaPlayer.setOnStopped(() -> play(media,cycle,volume));
  mediaPlayer.setOnEndOfMedia(() -> play(media,cycle,volume));
  mediaPlayer.play();
  return mediaPlayer;
}","public MediaPlayer play(Media media,int cycle,double volume){
  if (mediaPlayer != null)   mediaPlayer.dispose();
  if (media == null)   return null;
  mediaPlayer=new MediaPlayer(media);
  mediaPlayer.setVolume(volume);
  mediaPlayer.setCycleCount(cycle);
  mediaPlayer.setOnError(() -> play(media,cycle,volume));
  mediaPlayer.setOnStopped(() -> play(media,cycle,volume));
  mediaPlayer.setOnEndOfMedia(() -> play(media,cycle,volume));
  mediaPlayer.play();
  return mediaPlayer;
}"
39879,"public Map<String,Object> generateResources(){
  Map<String,Object> map=new HashMap<>();
  if (getPreload() != null && getPreload().getPreload() != null && !getPreload().getPreload().replace(""String_Node_Str"",""String_Node_Str"").trim().equals(""String_Node_Str"")) {
    String preload=getPreload().getPreload().replace(""String_Node_Str"",""String_Node_Str"").trim();
    String[] elements=preload.split(""String_Node_Str"");
    for (    String element : elements) {
      String[] res=element.split(""String_Node_Str"");
      if (res[1].endsWith(""String_Node_Str"")) {
        map.put(res[0],new AudioClip(res[1]));
      }
 else       if (res[1].endsWith(""String_Node_Str"") || res[1].endsWith(""String_Node_Str"")) {
        map.put(res[0],new Media(res[1]));
      }
 else {
        map.put(res[0],new Image(res[1]));
      }
    }
  }
  return map;
}","public Map<String,Object> generateResources(){
  Map<String,Object> map=new HashMap<>();
  if (getPreload() != null && getPreload().getPreload() != null && !getPreload().getPreload().replace(""String_Node_Str"",""String_Node_Str"").trim().equals(""String_Node_Str"")) {
    String preload=getPreload().getPreload().replace(""String_Node_Str"",""String_Node_Str"").trim();
    String[] elements=preload.split(""String_Node_Str"");
    for (    String element : elements) {
      if (element.replace(""String_Node_Str"",""String_Node_Str"").trim().equals(""String_Node_Str""))       continue;
      String[] res=element.split(""String_Node_Str"");
      if (res[1].endsWith(""String_Node_Str"")) {
        map.put(res[0],new AudioClip(res[1]));
      }
 else       if (res[1].endsWith(""String_Node_Str"") || res[1].endsWith(""String_Node_Str"")) {
        map.put(res[0],new Media(res[1]));
      }
 else {
        map.put(res[0],new Image(res[1]));
      }
    }
  }
  return map;
}"
39880,"private void processParent(ParentType type,String result,String urlOrMsg){
  removeParent();
switch (type) {
case GROUP:
    container.setPadding(new Insets(0));
  com.whitewoodcity.core.node.Group group=new com.whitewoodcity.core.node.Group();
try {
  XmlV xmlV=xmlMapper.readValue(result,XmlV.class);
  Button button=new Button(""String_Node_Str"");
  button.setWidth(100);
  group.add(button);
  parent=(Parent)group.getNode();
  container.getChildren().add(group.getNode());
}
 catch (Exception e) {
  handleExceptionMessage(e);
}
break;
case ERROR_MESSAGE:
TextArea errorMsg=new TextArea();
errorMsg.setPrefHeight(container.getHeight() - 20);
errorMsg.setText(result);
container.setPadding(new Insets(10));
container.getChildren().add(errorMsg);
parent=errorMsg;
tab.setText(urlOrMsg);
break;
default :
container.setPadding(new Insets(0));
if (webView == null) {
webView=new WebView();
}
webView.getEngine().loadContent(result);
tab.textProperty().unbind();
tab.textProperty().bind(webView.getEngine().titleProperty());
webView.getEngine().load(urlOrMsg);
container.getChildren().add(webView);
parent=webView;
break;
}
}","private void processParent(ParentType type,String result,String urlOrMsg){
  removeParent();
switch (type) {
case GROUP:
    container.setPadding(new Insets(0));
  com.whitewoodcity.core.node.Group group=new com.whitewoodcity.core.node.Group();
try {
  XmlV xmlV=xmlMapper.readValue(result,XmlV.class);
  Button button=new Button(""String_Node_Str"");
  button.setWidth(100);
  group.add(button);
  parent=(Parent)group.getNode();
  container.getChildren().add(group.getNode());
}
 catch (Exception e) {
  handleExceptionMessage(e);
}
break;
case ERROR_MESSAGE:
TextArea errorMsg=new TextArea();
errorMsg.setPrefHeight(container.getHeight() - 20);
errorMsg.setText(result);
container.setPadding(new Insets(10));
container.getChildren().add(errorMsg);
parent=errorMsg;
tab.textProperty().unbind();
tab.setText(urlOrMsg);
break;
default :
container.setPadding(new Insets(0));
if (webView == null) {
webView=new WebView();
}
webView.getEngine().loadContent(result);
tab.textProperty().unbind();
tab.textProperty().bind(webView.getEngine().titleProperty());
webView.getEngine().load(urlOrMsg);
container.getChildren().add(webView);
parent=webView;
break;
}
}"
39881,"public static void main(String[] args){
  ITransactionBuilder t=TransactionFactory.tx_T();
  ITransactionBuilder t1=TransactionFactory.tx_T1(42);
  ITransactionBuilder t2=TransactionFactory.tx_T2();
  System.out.println(t);
  System.out.println(t1);
  System.out.println(t2);
}","public static void main(String[] args){
}"
39882,"public void acknowledge(@NonNull CompletionHandler<Void> callback){
  _phone.getCallService().acknowledge(getKey());
  setStatus(CallStatus.RINGING);
  callback.onComplete(null);
}","public void acknowledge(@NonNull CompletionHandler<Void> callback){
  _phone.getCallService().acknowledge(getKey());
  callback.onComplete(null);
}"
39883,"void answer(@NonNull CallImpl call){
  Ln.i(""String_Node_Str"" + call);
  for (  CallImpl exist : _calls.values()) {
    Ln.d(""String_Node_Str"" + exist.getStatus());
    if (!exist.getKey().equals(call.getKey()) && (exist.getStatus() == Call.CallStatus.RINGING || exist.getStatus() == Call.CallStatus.CONNECTED)) {
      Ln.e(""String_Node_Str"");
      if (call.getAnswerCallback() != null) {
        call.getAnswerCallback().onComplete(ResultImpl.error(""String_Node_Str""));
      }
      return;
    }
  }
  if (call.getDirection() == Call.Direction.OUTGOING) {
    Ln.e(""String_Node_Str"");
    if (call.getAnswerCallback() != null) {
      call.getAnswerCallback().onComplete(ResultImpl.error(""String_Node_Str""));
    }
    return;
  }
  if (call.getDirection() == Call.Direction.INCOMING) {
    if (call.getStatus() == Call.CallStatus.CONNECTED) {
      Ln.e(""String_Node_Str"");
      if (call.getAnswerCallback() != null) {
        call.getAnswerCallback().onComplete(ResultImpl.error(""String_Node_Str""));
      }
      return;
    }
 else     if (call.getStatus() == Call.CallStatus.DISCONNECTED) {
      Ln.e(""String_Node_Str"");
      if (call.getAnswerCallback() != null) {
        call.getAnswerCallback().onComplete(ResultImpl.error(""String_Node_Str""));
      }
      return;
    }
  }
  stopPreview();
  CallContext.Builder builder=new CallContext.Builder(call.getKey()).setIsAnsweringCall(true).setIsOneOnOne(!call.isGroup());
  builder=builder.setMediaDirection(mediaOptionToMediaDirection(call.getOption()));
  _mediaEngine.setMediaConfig(new MediaCapabilityConfig(audioMaxBandwidth,videoMaxBandwidth,sharingMaxBandwidth));
  _callControlService.joinCall(builder.build(),false);
}","void answer(@NonNull CallImpl call){
  Ln.i(""String_Node_Str"" + call);
  for (  CallImpl exist : _calls.values()) {
    Ln.d(""String_Node_Str"" + exist.getStatus());
    if (!exist.getKey().equals(call.getKey()) && exist.getStatus() == Call.CallStatus.CONNECTED) {
      Ln.e(""String_Node_Str"");
      if (call.getAnswerCallback() != null) {
        call.getAnswerCallback().onComplete(ResultImpl.error(""String_Node_Str""));
      }
      return;
    }
  }
  if (call.getDirection() == Call.Direction.OUTGOING) {
    Ln.e(""String_Node_Str"");
    if (call.getAnswerCallback() != null) {
      call.getAnswerCallback().onComplete(ResultImpl.error(""String_Node_Str""));
    }
    return;
  }
  if (call.getDirection() == Call.Direction.INCOMING) {
    if (call.getStatus() == Call.CallStatus.CONNECTED) {
      Ln.e(""String_Node_Str"");
      if (call.getAnswerCallback() != null) {
        call.getAnswerCallback().onComplete(ResultImpl.error(""String_Node_Str""));
      }
      return;
    }
 else     if (call.getStatus() == Call.CallStatus.DISCONNECTED) {
      Ln.e(""String_Node_Str"");
      if (call.getAnswerCallback() != null) {
        call.getAnswerCallback().onComplete(ResultImpl.error(""String_Node_Str""));
      }
      return;
    }
  }
  stopPreview();
  CallContext.Builder builder=new CallContext.Builder(call.getKey()).setIsAnsweringCall(true).setIsOneOnOne(!call.isGroup());
  builder=builder.setMediaDirection(mediaOptionToMediaDirection(call.getOption()));
  _mediaEngine.setMediaConfig(new MediaCapabilityConfig(audioMaxBandwidth,videoMaxBandwidth,sharingMaxBandwidth));
  _callControlService.joinCall(builder.build(),false);
}"
39884,"public boolean isReceivingAudio(){
  return _phone.getCallService().isRemoteAudioMuted(getKey());
}","public boolean isReceivingAudio(){
  return !_phone.getCallService().isRemoteAudioMuted(getKey());
}"
39885,"public Spark(Application application,Authenticator authenticator){
  ConversationContract.CONTENT_AUTHORITY=getAuthority(application.getApplicationContext());
  ConversationContentProvider.resetUriMatcher();
  com.cisco.spark.android.core.Application.setApplication(application);
  _authenticator=authenticator;
  _injector=new SparkInjector(application);
  _injector.create();
  _injector.inject(this);
  _injector.inject(_authenticator);
  _phone=new PhoneImpl(application.getApplicationContext(),_authenticator,_injector);
}","public Spark(Application application,Authenticator authenticator){
  SquaredContentProvider.CONTENT_AUTHORITY=getAuthority(application.getApplicationContext());
  ConversationContentProvider.resetUriMatcher();
  com.cisco.spark.android.core.Application.setApplication(application);
  _authenticator=authenticator;
  _injector=new SparkInjector(application);
  _injector.create();
  _injector.inject(this);
  _injector.inject(_authenticator);
  _phone=new PhoneImpl(application.getApplicationContext(),_authenticator,_injector);
}"
39886,"/** 
 * Get current SDK version
 * @return major.minor.build-alpha/beta/SNAPSHOT
 * @since 0.1
 */
public String getVersion(){
  return APP_VERSION;
}","/** 
 * Get current SDK version
 * @return major.minor.build-alpha/beta/SNAPSHOT
 * @since 0.1
 */
public String getVersion(){
  return BuildConfig.VERSION_NAME;
}"
39887,"public void setSendingVideo(boolean sending){
  if (_phone.getCallService().getCall(this._key).isAudioCall()) {
    Ln.d(""String_Node_Str"");
    return;
  }
  if (sending) {
    _phone.getCallService().unMuteVideo(getKey(),MediaRequestSource.USER);
  }
 else {
    _phone.getCallService().muteVideo(getKey(),MediaRequestSource.USER);
  }
}","public void setSendingVideo(boolean sending){
  if (!_option.hasVideo()) {
    Ln.d(""String_Node_Str"");
    return;
  }
  if (sending) {
    _phone.getCallService().unMuteVideo(getKey(),MediaRequestSource.USER);
  }
 else {
    _phone.getCallService().muteVideo(getKey(),MediaRequestSource.USER);
  }
}"
39888,"public boolean isSendingVideo(){
  return !_phone.getCallService().getCall(this._key).isAudioCall() && !_phone.getCallService().isVideoMuted(getKey());
}","public boolean isSendingVideo(){
  return _option.hasVideo() && !_phone.getCallService().isVideoMuted(getKey());
}"
39889,"public void setReceivingVideo(boolean receiving){
  if (_phone.getCallService().getCall(this._key).isAudioCall()) {
    Ln.d(""String_Node_Str"");
    return;
  }
  _phone.getCallService().muteRemoteVideos(getKey(),!receiving);
  CallObserver observer=getObserver();
  if (observer != null) {
    observer.onMediaChanged(new CallObserver.ReceivingVideo(this,receiving));
  }
}","public void setReceivingVideo(boolean receiving){
  if (!_option.hasVideo()) {
    Ln.d(""String_Node_Str"");
    return;
  }
  _phone.getCallService().muteRemoteVideos(getKey(),!receiving);
  CallObserver observer=getObserver();
  if (observer != null) {
    observer.onMediaChanged(new CallObserver.ReceivingVideo(this,receiving));
  }
}"
39890,"CallImpl(@NonNull PhoneImpl phone,@NonNull Direction direction,@NonNull LocusKey key){
  _phone=phone;
  _direction=direction;
  _key=key;
  _status=CallStatus.INITIATED;
}","CallImpl(@NonNull PhoneImpl phone,@NonNull MediaOption option,@NonNull Direction direction,@NonNull LocusKey key){
  _phone=phone;
  _option=option;
  _direction=direction;
  _key=key;
  _status=CallStatus.INITIATED;
}"
39891,"public boolean isReceivingVideo(){
  return !_phone.getCallService().getCall(this._key).isAudioCall() && !_phone.getCallService().isRemoteVideoMuted(getKey());
}","public boolean isReceivingVideo(){
  return _option.hasVideo() && !_phone.getCallService().isRemoteVideoMuted(getKey());
}"
39892,"public static String versionInfo(){
  String tempUserAgent=String.format(""String_Node_Str"",Spark.APP_NAME,Spark.APP_VERSION,Build.VERSION.RELEASE,Strings.capitalize(Build.MANUFACTURER),Strings.capitalize(Build.DEVICE),Strings.capitalize(Build.BRAND),Strings.capitalize(Build.MODEL),BuildConfig.BUILD_TIME,BuildConfig.BUILD_REVISION);
  return Strings.stripInvalidHeaderChars(tempUserAgent);
}","public static String versionInfo(){
  String tempUserAgent=String.format(""String_Node_Str"",Spark.APP_NAME,Spark.APP_VERSION,Build.VERSION.RELEASE,Strings.capitalize(Build.MANUFACTURER),Strings.capitalize(Build.DEVICE),Strings.capitalize(Build.BRAND),Strings.capitalize(Build.MODEL));
  return Strings.stripInvalidHeaderChars(tempUserAgent);
}"
39893,"private static String getAuthority(final Context appContext){
  try {
    final ComponentName componentName=new ComponentName(appContext,ConversationContentProvider.class.getName());
    final ProviderInfo providerInfo=appContext.getPackageManager().getProviderInfo(componentName,0);
    return providerInfo.authority;
  }
 catch (  Throwable t) {
    t.printStackTrace();
    return ""String_Node_Str"";
  }
}","private static String getAuthority(final Context appContext){
  try {
    final ComponentName componentName=new ComponentName(appContext,ConversationContentProvider.class.getName());
    final ProviderInfo providerInfo=appContext.getPackageManager().getProviderInfo(componentName,0);
    return providerInfo.authority;
  }
 catch (  Throwable t) {
    Log.d(TAG,Exceptions.printStackTrace(t));
    return ""String_Node_Str"";
  }
}"
39894,"@Override public void onCreate(){
  super.onCreate();
  instance=this;
  Log.d(TAG,""String_Node_Str"");
  delegate=new SparkApplicationDelegate(this);
  delegate.create();
  Log.i(TAG,""String_Node_Str"");
}","@Override public void onCreate(){
  super.onCreate();
  instance=this;
  delegate=new SparkApplicationDelegate(this);
  delegate.create();
}"
39895,"@Override public void success(Response<JwtToken> response){
  mToken=response.body();
  if (mToken == null)   handler.onError(new SparkError(CLIENT_ERROR,response.errorBody().toString()));
 else {
    if (mToken.getAccessToken() != null && !mToken.getAccessToken().isEmpty()) {
      handler.onComplete(mToken.getAccessToken());
    }
 else {
      handler.onError(new SparkError(UNEXPECTED_ERROR,""String_Node_Str""));
    }
  }
}","@Override public void success(Response<JwtToken> response){
  mToken=response.body();
  if (mToken == null)   handler.onError(new SparkError(CLIENT_ERROR,response.errorBody().toString()));
 else {
    if (mToken.getAccessToken() != null && !mToken.getAccessToken().isEmpty()) {
      mToken.shoudlRefetchTokenNow();
      handler.onComplete(mToken.getAccessToken());
    }
 else {
      handler.onError(new SparkError(UNEXPECTED_ERROR,""String_Node_Str""));
    }
  }
}"
39896,"@Override public void authorize(CompletionHandler<String> handler){
  checkNotNull(handler,""String_Node_Str"");
  if (mJwtAuthCode == null || mJwtAuthCode.isEmpty()) {
    handler.onError(new SparkError(UNEXPECTED_ERROR,""String_Node_Str""));
    return;
  }
  mAuthService.getToken(mJwtAuthCode).enqueue(new ErrorHandlingCallback<JwtToken>(){
    @Override public void success(    Response<JwtToken> response){
      mToken=response.body();
      if (mToken == null)       handler.onError(new SparkError(CLIENT_ERROR,response.errorBody().toString()));
 else {
        if (mToken.getAccessToken() != null && !mToken.getAccessToken().isEmpty()) {
          handler.onComplete(mToken.getAccessToken());
        }
 else {
          handler.onError(new SparkError(UNEXPECTED_ERROR,""String_Node_Str""));
        }
      }
    }
    @Override public void unauthenticated(    Response<?> response){
      handler.onError(new SparkError(UNAUTHENTICATED,Integer.toString(response.code())));
    }
    @Override public void clientError(    Response<?> response){
      handler.onError(new SparkError(CLIENT_ERROR,Integer.toString(response.code())));
    }
    @Override public void serverError(    Response<?> response){
      handler.onError(new SparkError(SERVER_ERROR,Integer.toString(response.code())));
    }
    @Override public void networkError(    IOException e){
      handler.onError(new SparkError(NETWORK_ERROR,""String_Node_Str""));
    }
    @Override public void unexpectedError(    Throwable t){
      handler.onError(new SparkError(UNEXPECTED_ERROR,""String_Node_Str""));
    }
  }
);
}","@Override public void authorize(CompletionHandler<String> handler){
  checkNotNull(handler,""String_Node_Str"");
  if (mJwtAuthCode == null || mJwtAuthCode.isEmpty()) {
    handler.onError(new SparkError(UNEXPECTED_ERROR,""String_Node_Str""));
    return;
  }
  mAuthService.getToken(mJwtAuthCode).enqueue(new ErrorHandlingCallback<JwtToken>(){
    @Override public void success(    Response<JwtToken> response){
      mToken=response.body();
      if (mToken == null)       handler.onError(new SparkError(CLIENT_ERROR,response.errorBody().toString()));
 else {
        if (mToken.getAccessToken() != null && !mToken.getAccessToken().isEmpty()) {
          mToken.shoudlRefetchTokenNow();
          handler.onComplete(mToken.getAccessToken());
        }
 else {
          handler.onError(new SparkError(UNEXPECTED_ERROR,""String_Node_Str""));
        }
      }
    }
    @Override public void unauthenticated(    Response<?> response){
      handler.onError(new SparkError(UNAUTHENTICATED,Integer.toString(response.code())));
    }
    @Override public void clientError(    Response<?> response){
      handler.onError(new SparkError(CLIENT_ERROR,Integer.toString(response.code())));
    }
    @Override public void serverError(    Response<?> response){
      handler.onError(new SparkError(SERVER_ERROR,Integer.toString(response.code())));
    }
    @Override public void networkError(    IOException e){
      handler.onError(new SparkError(NETWORK_ERROR,""String_Node_Str""));
    }
    @Override public void unexpectedError(    Throwable t){
      handler.onError(new SparkError(UNEXPECTED_ERROR,""String_Node_Str""));
    }
  }
);
}"
39897,"boolean shoudlRefetchTokenNow(){
  return super.shouldRefreshNow();
}","boolean shoudlRefetchTokenNow(){
  super.expiresIn=this.expiresIn;
  return super.shouldRefreshNow();
}"
39898,"public Spark(Application application,Authenticator authenticator){
  UserAgentProvider.APP_NAME=DefaultHeadersInterceptor.APP_NAME;
  UserAgentProvider.APP_VERSION=DefaultHeadersInterceptor.APP_VERSION;
  com.cisco.spark.android.core.Application.setApplication(application);
  _authenticator=authenticator;
  _injector=new SparkInjector(application);
  _injector.create();
  _injector.inject(this);
  _injector.inject(_authenticator);
  _phone=new PhoneImpl(application.getApplicationContext(),_authenticator,_injector);
}","public Spark(Application application,Authenticator authenticator){
  ConversationContract.CONTENT_AUTHORITY=getAuthority(application.getApplicationContext());
  ConversationContentProvider.resetUriMatcher();
  com.cisco.spark.android.core.Application.setApplication(application);
  _authenticator=authenticator;
  _injector=new SparkInjector(application);
  _injector.create();
  _injector.inject(this);
  _injector.inject(_authenticator);
  _phone=new PhoneImpl(application.getApplicationContext(),_authenticator,_injector);
}"
39899,"@Override public boolean shouldOverrideUrlLoading(WebView view,String url){
  if (url.startsWith(getRedirectUri().toLowerCase())) {
    Uri uri=Uri.parse(url);
    String code=uri.getQueryParameter(""String_Node_Str"");
    if (code == null || code.isEmpty()) {
      mAuthListener.onError(new SparkError());
      return false;
    }
    setAuthCode(code);
    mWebView.clearCache(true);
    mWebView.loadUrl(""String_Node_Str"");
    mOAuthStategyDelegate.setAuthCode(getAuthCode());
    mOAuthStategyDelegate.authorize(mAuthListener);
    return false;
  }
  return super.shouldOverrideUrlLoading(view,url);
}","@Override public boolean shouldOverrideUrlLoading(WebView view,String url){
  if (url.startsWith(getRedirectUri().toLowerCase())) {
    Uri uri=Uri.parse(url);
    String code=uri.getQueryParameter(""String_Node_Str"");
    if (code == null || code.isEmpty()) {
      mAuthListener.onError(new SparkError(SERVER_ERROR,""String_Node_Str""));
      return false;
    }
    setAuthCode(code);
    mWebView.clearCache(true);
    mWebView.loadUrl(""String_Node_Str"");
    mOAuthStategyDelegate.setAuthCode(getAuthCode());
    mOAuthStategyDelegate.authorize(mAuthListener);
    return false;
  }
  return super.shouldOverrideUrlLoading(view,url);
}"
39900,"@Override public void onReceivedError(WebView view,int errorCode,String description,String failingUrl){
  if (mAuthListener != null)   mAuthListener.onError(new SparkError(SERVER_ERROR,Integer.toString(errorCode)));
  super.onReceivedError(view,errorCode,description,failingUrl);
}","@Override public void onReceivedError(WebView view,int errorCode,String description,String failingUrl){
  if (!failingUrl.toLowerCase().startsWith(getRedirectUri().toLowerCase())) {
    if (mAuthListener != null)     mAuthListener.onError(new SparkError(SERVER_ERROR,Integer.toString(errorCode)));
  }
  super.onReceivedError(view,errorCode,description,failingUrl);
}"
39901,"@Override public void onResponse(Call<JwtToken> call,Response<JwtToken> response){
  token=response.body();
  if (token == null)   listener.onFailed();
 else   listener.onSuccess();
}","@Override public void onResponse(Call<JwtToken> call,Response<JwtToken> response){
  mToken=response.body();
  if (mToken == null)   listener.onFailed();
 else   listener.onSuccess();
}"
39902,"@Override public boolean isAuthorized(){
  return (token != null);
}","@Override public boolean isAuthorized(){
  return (mToken != null);
}"
39903,"public JWTStrategy(String authcode){
  Retrofit retrofit=new Retrofit.Builder().baseUrl(JWT_BASE_URL).addConverterFactory(GsonConverterFactory.create()).build();
  AuthService service=retrofit.create(AuthService.class);
  call=service.getToken(authcode);
}","public JWTStrategy(String authcode){
  setAuthCode(authcode);
  Retrofit retrofit=new Retrofit.Builder().baseUrl(JWT_BASE_URL).addConverterFactory(GsonConverterFactory.create()).build();
  mAuthService=retrofit.create(AuthService.class);
}"
39904,"@Override public void deauthorize(){
  token=null;
}","@Override public void deauthorize(){
  mToken=null;
}"
39905,"@Override public void authorize(AuthorizeListener listener){
  call.enqueue(new Callback<JwtToken>(){
    @Override public void onResponse(    Call<JwtToken> call,    Response<JwtToken> response){
      token=response.body();
      if (token == null)       listener.onFailed();
 else       listener.onSuccess();
    }
    @Override public void onFailure(    Call<JwtToken> call,    Throwable t){
      listener.onFailed();
    }
  }
);
}","@Override public void authorize(AuthorizeListener listener){
  mAuthService.getToken(getAuthCode()).enqueue(new Callback<JwtToken>(){
    @Override public void onResponse(    Call<JwtToken> call,    Response<JwtToken> response){
      mToken=response.body();
      if (mToken == null)       listener.onFailed();
 else       listener.onSuccess();
    }
    @Override public void onFailure(    Call<JwtToken> call,    Throwable t){
      listener.onFailed();
    }
  }
);
}"
39906,"@Override public void onResponse(Call<OAuth2Tokens> call,Response<OAuth2Tokens> response){
  token=response.body();
  if (token != null)   listener.onSuccess();
 else   listener.onFailed();
}","@Override public void onResponse(Call<OAuth2Tokens> call,Response<OAuth2Tokens> response){
  mToken=response.body();
  if (mToken != null)   listener.onSuccess();
 else   listener.onFailed();
}"
39907,"@Override public boolean isAuthorized(){
  return token != null;
}","@Override public boolean isAuthorized(){
  return mToken != null;
}"
39908,"/** 
 * OAuth 2 authorize strategy.
 * @param clientId
 * @param clientSecret
 * @param scope
 * @param redirectUri
 * @param authCode
 */
public OAuthStrategy(String clientId,String clientSecret,String redirectUri,String scope,String email,String authCode){
  this.clientId=clientId;
  this.clientScret=clientSecret;
  this.scope=scope;
  this.redirectUri=redirectUri;
  this.email=email;
  this.authCode=authCode;
  retrofit=new Retrofit.Builder().baseUrl(OAUTH_BASE_URL).addConverterFactory(GsonConverterFactory.create()).build();
  AuthService service=retrofit.create(AuthService.class);
  call=service.getToken(clientId,clientSecret,redirectUri,AUTHORIZATION_CODE,authCode);
}","/** 
 * OAuth 2 authorize strategy.
 * @param clientId
 * @param clientSecret
 * @param scope
 * @param redirectUri
 * @param authCode
 */
public OAuthStrategy(String clientId,String clientSecret,String redirectUri,String scope,String email,String authCode){
  this.setClientId(clientId);
  this.setClientSecret(clientSecret);
  this.setScope(scope);
  this.setRedirectUri(redirectUri);
  this.setEmail(email);
  this.setAuthCode(authCode);
  Retrofit retrofit=new Retrofit.Builder().baseUrl(OAUTH_BASE_URL).addConverterFactory(GsonConverterFactory.create()).build();
  mAuthService=retrofit.create(AuthService.class);
}"
39909,"@Override public void deauthorize(){
  token=null;
}","@Override public void deauthorize(){
  mToken=null;
}"
39910,"/** 
 * @param listener
 */
@Override public void authorize(AuthorizeListener listener){
  call.enqueue(new Callback<OAuth2Tokens>(){
    @Override public void onResponse(    Call<OAuth2Tokens> call,    Response<OAuth2Tokens> response){
      token=response.body();
      if (token != null)       listener.onSuccess();
 else       listener.onFailed();
    }
    @Override public void onFailure(    Call<OAuth2Tokens> call,    Throwable t){
      listener.onFailed();
    }
  }
);
}","/** 
 * @param listener
 */
@Override public void authorize(AuthorizeListener listener){
  mAuthService.getToken(mClientId,mClientSecret,mRedirectUri,AUTHORIZATION_CODE,mAuthCode).enqueue(new Callback<OAuth2Tokens>(){
    @Override public void onResponse(    Call<OAuth2Tokens> call,    Response<OAuth2Tokens> response){
      mToken=response.body();
      if (mToken != null)       listener.onSuccess();
 else       listener.onFailed();
    }
    @Override public void onFailure(    Call<OAuth2Tokens> call,    Throwable t){
      listener.onFailed();
    }
  }
);
}"
39911,"@Override public void onResponse(Call<JwtToken> call,Response<JwtToken> response){
  token=response.body();
  listener.onSuccess();
}","@Override public void onResponse(Call<JwtToken> call,Response<JwtToken> response){
  token=response.body();
  if (token == null)   listener.onFailed();
 else   listener.onSuccess();
}"
39912,"@Override public void authorize(AuthorizeListener listener){
  call.enqueue(new Callback<JwtToken>(){
    @Override public void onResponse(    Call<JwtToken> call,    Response<JwtToken> response){
      token=response.body();
      listener.onSuccess();
    }
    @Override public void onFailure(    Call<JwtToken> call,    Throwable t){
      listener.onFailed();
    }
  }
);
}","@Override public void authorize(AuthorizeListener listener){
  call.enqueue(new Callback<JwtToken>(){
    @Override public void onResponse(    Call<JwtToken> call,    Response<JwtToken> response){
      token=response.body();
      if (token == null)       listener.onFailed();
 else       listener.onSuccess();
    }
    @Override public void onFailure(    Call<JwtToken> call,    Throwable t){
      listener.onFailed();
    }
  }
);
}"
39913,"@Override public void onResponse(Call<JwtToken> call,Response<JwtToken> response){
  token=response.body();
  listener.onSuccess();
}","@Override public void onResponse(Call<JwtToken> call,Response<JwtToken> response){
  token=response.body();
  if (token == null)   listener.onFailed();
 else   listener.onSuccess();
}"
39914,"@Override public void authorize(AuthorizeListener listener){
  call.enqueue(new Callback<JwtToken>(){
    @Override public void onResponse(    Call<JwtToken> call,    Response<JwtToken> response){
      token=response.body();
      listener.onSuccess();
    }
    @Override public void onFailure(    Call<JwtToken> call,    Throwable t){
      listener.onFailed();
    }
  }
);
}","@Override public void authorize(AuthorizeListener listener){
  call.enqueue(new Callback<JwtToken>(){
    @Override public void onResponse(    Call<JwtToken> call,    Response<JwtToken> response){
      token=response.body();
      if (token == null)       listener.onFailed();
 else       listener.onSuccess();
    }
    @Override public void onFailure(    Call<JwtToken> call,    Throwable t){
      listener.onFailed();
    }
  }
);
}"
39915,"@Override public void onFailed(){
  System.out.println(""String_Node_Str"");
}","@Override public void onFailed(){
  assertFalse(strategy.isAuthorized());
}"
39916,"@Override public void onSuccess(){
  assertTrue(strategy.isAuthorized());
  OAuth2AccessToken token=strategy.getToken();
  assertNotNull(token);
  System.out.println(token);
  System.out.println(token.getAccessToken());
  System.out.println(""String_Node_Str"" + token.getExpiresIn());
}","@Override public void onSuccess(){
  assertFalse(true);
}"
39917,"private void updateAllCalls(List<BluetoothHeadsetClientCall> calls){
  totalCalls=0;
  if (calls == null || calls.size() == 0) {
    onCall=false;
    callNumber=""String_Node_Str"";
    callId=0;
    ringingNumber=""String_Node_Str"";
    ringing=false;
    return;
  }
  for (  BluetoothHeadsetClientCall call : calls) {
    Log.v(TAG,""String_Node_Str"");
    int state=call.getState();
switch (state) {
case BluetoothHeadsetClientCall.CALL_STATE_ACTIVE:
      onCall=true;
    callNumber=call.getNumber();
  callId=call.getId();
totalCalls++;
break;
case BluetoothHeadsetClientCall.CALL_STATE_HELD:
case BluetoothHeadsetClientCall.CALL_STATE_HELD_BY_RESPONSE_AND_HOLD:
totalCalls++;
break;
case BluetoothHeadsetClientCall.CALL_STATE_DIALING:
totalCalls++;
break;
case BluetoothHeadsetClientCall.CALL_STATE_ALERTING:
totalCalls++;
break;
case BluetoothHeadsetClientCall.CALL_STATE_INCOMING:
case BluetoothHeadsetClientCall.CALL_STATE_WAITING:
ringingNumber=call.getNumber();
ringing=true;
totalCalls++;
break;
case BluetoothHeadsetClientCall.CALL_STATE_TERMINATED:
break;
}
}
}","private boolean updateAllCalls(List<BluetoothHeadsetClientCall> calls){
  int o_totalCalls=totalCalls;
  boolean o_onCall=onCall;
  String o_callNumber=callNumber;
  int o_callId=callId;
  String o_ringingNumber=ringingNumber;
  boolean o_ringing=ringing;
  totalCalls=0;
  onCall=false;
  callNumber=""String_Node_Str"";
  callId=0;
  ringingNumber=""String_Node_Str"";
  ringing=false;
  if (calls == null || calls.size() == 0)   return true;
  for (  BluetoothHeadsetClientCall call : calls) {
    Log.v(TAG,""String_Node_Str"" + call.getState());
    int state=call.getState();
switch (state) {
case BluetoothHeadsetClientCall.CALL_STATE_ACTIVE:
      onCall=true;
    callNumber=call.getNumber();
  callId=call.getId();
totalCalls++;
break;
case BluetoothHeadsetClientCall.CALL_STATE_HELD:
case BluetoothHeadsetClientCall.CALL_STATE_HELD_BY_RESPONSE_AND_HOLD:
totalCalls++;
break;
case BluetoothHeadsetClientCall.CALL_STATE_DIALING:
totalCalls++;
break;
case BluetoothHeadsetClientCall.CALL_STATE_ALERTING:
totalCalls++;
break;
case BluetoothHeadsetClientCall.CALL_STATE_INCOMING:
case BluetoothHeadsetClientCall.CALL_STATE_WAITING:
ringingNumber=call.getNumber();
ringing=true;
totalCalls++;
break;
case BluetoothHeadsetClientCall.CALL_STATE_TERMINATED:
break;
}
}
return (o_totalCalls != totalCalls || o_onCall != onCall || o_callId != callId || o_ringing != ringing || !o_callNumber.contentEquals(callNumber) || !o_ringingNumber.contentEquals(ringingNumber));
}"
39918,"private void showNotification(){
  Intent phoneIntent=new Intent(this,HfpTestActivity.class);
  PendingIntent phonePIntent=PendingIntent.getActivity(this,1,phoneIntent,0);
  Intent acceptIntent=new Intent(this,HFPNotificationService.class);
  acceptIntent.setAction(""String_Node_Str"");
  PendingIntent acceptPIntent=PendingIntent.getService(this,0,acceptIntent,0);
  Intent rejectIntent=new Intent(this,HFPNotificationService.class);
  rejectIntent.setAction(""String_Node_Str"");
  PendingIntent rejectPIntent=PendingIntent.getService(this,0,rejectIntent,0);
  Intent hangupIntent=new Intent(this,HFPNotificationService.class);
  hangupIntent.setAction(""String_Node_Str"");
  hangupIntent.putExtra(""String_Node_Str"",callId);
  PendingIntent hangupPIntent=PendingIntent.getService(this,0,hangupIntent,0);
  Log.d(TAG,""String_Node_Str"" + sigStrength);
  if (sigStrength > 4)   sigStrength=4;
  if (sigStrength < 0)   sigStrength=0;
  String signalIcon=""String_Node_Str"";
  if (!cellConnected)   signalIcon+=""String_Node_Str"";
 else {
    signalIcon+=Integer.toString(sigStrength);
    if (roaming)     signalIcon+=""String_Node_Str"";
 else     signalIcon+=""String_Node_Str"";
  }
  Notification.Builder builder=new Notification.Builder(this).setContentTitle(""String_Node_Str"").setContentText(""String_Node_Str"" + (connected ? 1 : 0) + ""String_Node_Str""+ cellBattery+ ""String_Node_Str""+ (audioConnected ? 1 : 0)).setSmallIcon(getResources().getIdentifier(signalIcon,""String_Node_Str"",this.getPackageName())).setContentIntent(phonePIntent).setOngoing(true);
  if (ringing && !onCall && ringingHoldover < System.currentTimeMillis() + 15000) {
    builder.setContentTitle(""String_Node_Str"" + ringingNumber);
    builder.addAction(R.drawable.ic_call_white_48dp,""String_Node_Str"",acceptPIntent);
    builder.addAction(R.drawable.ic_call_end_white_48dp,""String_Node_Str"",rejectPIntent);
    builder.setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_RINGTONE));
    builder.setPriority(Notification.PRIORITY_MAX);
  }
 else   if (ringing) {
    builder.addAction(R.drawable.ic_call_white_48dp,""String_Node_Str"",acceptPIntent);
    builder.addAction(R.drawable.ic_call_end_white_48dp,""String_Node_Str"",rejectPIntent);
    builder.setPriority(Notification.PRIORITY_MAX);
    builder.setContentText(""String_Node_Str"" + ringingNumber);
  }
 else   if (onCall) {
    builder.addAction(R.drawable.ic_call_end_white_48dp,""String_Node_Str"",hangupPIntent);
    builder.setContentText(""String_Node_Str"" + callNumber);
  }
  notification=builder.build();
  if (ringing)   notification.flags=Notification.FLAG_INSISTENT;
}","private void showNotification(){
  Intent phoneIntent=new Intent(this,HfpTestActivity.class);
  PendingIntent phonePIntent=PendingIntent.getActivity(this,1,phoneIntent,0);
  Intent acceptIntent=new Intent(this,HFPNotificationService.class);
  acceptIntent.setAction(""String_Node_Str"");
  PendingIntent acceptPIntent=PendingIntent.getService(this,0,acceptIntent,0);
  Intent rejectIntent=new Intent(this,HFPNotificationService.class);
  rejectIntent.setAction(""String_Node_Str"");
  PendingIntent rejectPIntent=PendingIntent.getService(this,0,rejectIntent,0);
  Intent hangupIntent=new Intent(this,HFPNotificationService.class);
  hangupIntent.setAction(""String_Node_Str"");
  hangupIntent.putExtra(""String_Node_Str"",callId);
  PendingIntent hangupPIntent=PendingIntent.getService(this,0,hangupIntent,0);
  Log.d(TAG,""String_Node_Str"" + sigStrength);
  if (sigStrength > 4)   sigStrength=4;
  if (sigStrength < 0)   sigStrength=0;
  String signalIcon=""String_Node_Str"";
  if (!cellConnected)   signalIcon+=""String_Node_Str"";
 else {
    signalIcon+=Integer.toString(sigStrength);
    if (roaming)     signalIcon+=""String_Node_Str"";
 else     signalIcon+=""String_Node_Str"";
  }
  Notification.Builder builder=new Notification.Builder(this).setContentTitle(""String_Node_Str"").setContentText(""String_Node_Str"" + (connected ? 1 : 0) + ""String_Node_Str""+ cellBattery+ ""String_Node_Str""+ (audioConnected ? 1 : 0)).setSmallIcon(getResources().getIdentifier(signalIcon,""String_Node_Str"",this.getPackageName())).setContentIntent(phonePIntent).setSound(null).setOngoing(true);
  Log.d(TAG,""String_Node_Str"" + ringing + ""String_Node_Str""+ onCall+ ""String_Node_Str""+ ringingHoldover+ ""String_Node_Str""+ System.currentTimeMillis());
  if (ringing && !onCall && ringingHoldover < System.currentTimeMillis() - 15000) {
    Log.d(TAG,""String_Node_Str"");
    builder.setContentTitle(""String_Node_Str"" + ringingNumber);
    builder.addAction(R.drawable.ic_call_white_48dp,""String_Node_Str"",acceptPIntent);
    builder.addAction(R.drawable.ic_call_end_white_48dp,""String_Node_Str"",rejectPIntent);
    builder.setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_RINGTONE));
    builder.setPriority(Notification.PRIORITY_MAX);
  }
 else   if (ringing) {
    Log.d(TAG,""String_Node_Str"");
    builder.addAction(R.drawable.ic_call_white_48dp,""String_Node_Str"",acceptPIntent);
    builder.addAction(R.drawable.ic_call_end_white_48dp,""String_Node_Str"",rejectPIntent);
    builder.setPriority(Notification.PRIORITY_MAX);
    builder.setContentText(""String_Node_Str"" + ringingNumber);
  }
 else   if (onCall) {
    Log.d(TAG,""String_Node_Str"");
    builder.addAction(R.drawable.ic_call_end_white_48dp,""String_Node_Str"",hangupPIntent);
    builder.setContentText(""String_Node_Str"" + callNumber);
  }
 else {
    Log.d(TAG,""String_Node_Str"");
    builder.setPriority(Notification.PRIORITY_DEFAULT);
  }
  notification=builder.build();
  if (ringing)   notification.flags=Notification.FLAG_INSISTENT;
  stopForeground(true);
  startForeground(17111,notification);
}"
39919,"@Override public void onReceive(Context context,Intent intent){
  Log.d(TAG,""String_Node_Str"");
  String action=intent.getAction();
  if (!isConnected()) {
    Log.d(TAG,""String_Node_Str"");
    if (mBluetoothHeadsetClient == null)     Log.d(TAG,""String_Node_Str"");
    if (mBluetoothHeadsetClient.hfpClientInstance == null)     Log.d(TAG,""String_Node_Str"");
    if (mDevice == null)     Log.d(TAG,""String_Node_Str"");
    try {
      if (mBluetoothHeadsetClient.getConnectionState(mDevice) != BluetoothProfile.STATE_CONNECTED)       Log.d(TAG,""String_Node_Str"");
    }
 catch (    NullPointerException npe) {
      Log.d(TAG,""String_Node_Str"");
    }
    return;
  }
switch (action) {
case BluetoothHeadsetClient.ACTION_CONNECTION_STATE_CHANGED:
    int state=intent.getIntExtra(BluetoothProfile.EXTRA_STATE,0);
switch (state) {
case BluetoothProfile.STATE_CONNECTED:
    updateAllCalls(mBluetoothHeadsetClient.getCurrentCalls(mDevice));
  connected=true;
break;
case BluetoothProfile.STATE_DISCONNECTED:
connected=false;
break;
}
break;
case BluetoothHeadsetClient.ACTION_AG_EVENT:
Bundle params=intent.getExtras();
forceUpdateAgEvents(params,false);
break;
case BluetoothHeadsetClient.ACTION_CALL_CHANGED:
updateAllCalls(mBluetoothHeadsetClient.getCurrentCalls(mDevice));
break;
case BluetoothHeadsetClient.ACTION_AUDIO_STATE_CHANGED:
Log.d(TAG,""String_Node_Str"");
int astate=intent.getIntExtra(BluetoothProfile.EXTRA_STATE,0);
if (astate == BluetoothHeadsetClient.STATE_AUDIO_CONNECTED) {
Intent i=new Intent();
i.setAction(""String_Node_Str"");
sendBroadcast(i);
audioConnected=true;
}
 else if (astate != BluetoothHeadsetClient.STATE_AUDIO_CONNECTING) {
Intent i=new Intent();
i.setAction(""String_Node_Str"");
sendBroadcast(i);
audioConnected=false;
}
break;
default :
Log.d(TAG,""String_Node_Str"" + action);
}
showNotification();
((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).notify(17111,notification);
}","@Override public void onReceive(Context context,Intent intent){
  Log.d(TAG,""String_Node_Str"" + intent.getAction());
  String action=intent.getAction();
  if (!isConnected()) {
    Log.d(TAG,""String_Node_Str"");
    if (mBluetoothHeadsetClient == null)     Log.d(TAG,""String_Node_Str"");
    if (mBluetoothHeadsetClient.hfpClientInstance == null)     Log.d(TAG,""String_Node_Str"");
    if (mDevice == null)     Log.d(TAG,""String_Node_Str"");
    try {
      if (mBluetoothHeadsetClient.getConnectionState(mDevice) != BluetoothProfile.STATE_CONNECTED)       Log.d(TAG,""String_Node_Str"");
    }
 catch (    NullPointerException npe) {
      Log.d(TAG,""String_Node_Str"");
    }
    return;
  }
switch (action) {
case BluetoothHeadsetClient.ACTION_CONNECTION_STATE_CHANGED:
    int state=intent.getIntExtra(BluetoothProfile.EXTRA_STATE,0);
switch (state) {
case BluetoothProfile.STATE_CONNECTED:
    updateAllCalls(mBluetoothHeadsetClient.getCurrentCalls(mDevice));
  connected=true;
break;
case BluetoothProfile.STATE_DISCONNECTED:
connected=false;
break;
}
break;
case BluetoothHeadsetClient.ACTION_AG_EVENT:
Bundle params=intent.getExtras();
forceUpdateAgEvents(params,false);
break;
case BluetoothHeadsetClient.ACTION_CALL_CHANGED:
if (!updateAllCalls(mBluetoothHeadsetClient.getCurrentCalls(mDevice))) return;
break;
case BluetoothHeadsetClient.ACTION_AUDIO_STATE_CHANGED:
Log.d(TAG,""String_Node_Str"");
int astate=intent.getIntExtra(BluetoothProfile.EXTRA_STATE,0);
if (astate == BluetoothHeadsetClient.STATE_AUDIO_CONNECTED) {
Intent i=new Intent();
i.setAction(""String_Node_Str"");
sendBroadcast(i);
audioConnected=true;
}
 else if (astate != BluetoothHeadsetClient.STATE_AUDIO_CONNECTING) {
Intent i=new Intent();
i.setAction(""String_Node_Str"");
sendBroadcast(i);
audioConnected=false;
}
break;
default :
Log.d(TAG,""String_Node_Str"" + action);
}
showNotification();
((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).notify(17111,notification);
}"
39920,"@Override public int onStartCommand(Intent intent,int flags,int startId){
  Log.d(TAG,""String_Node_Str"");
  if (intent.getAction() == null) {
    showNotification();
    startForeground(17111,notification);
  }
 else   if (isConnected() && intent.getAction().contentEquals(""String_Node_Str"")) {
    ringingHoldover=System.currentTimeMillis();
    showNotification();
    ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).notify(17111,notification);
    mBluetoothHeadsetClient.acceptCall(mDevice,BluetoothHeadsetClient.CALL_ACCEPT_NONE);
    connectAudio();
    showNotification();
    ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).notify(17111,notification);
  }
 else   if (isConnected() && intent.getAction().contentEquals(""String_Node_Str"")) {
    ringingHoldover=System.currentTimeMillis();
    showNotification();
    ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).notify(17111,notification);
    mBluetoothHeadsetClient.rejectCall(mDevice);
    showNotification();
    ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).notify(17111,notification);
  }
 else   if (isConnected() && intent.getAction().contentEquals(""String_Node_Str"")) {
    mBluetoothHeadsetClient.terminateCall(mDevice,intent.getIntExtra(""String_Node_Str"",0));
    showNotification();
    ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).notify(17111,notification);
  }
 else   if (intent.getAction().contentEquals(""String_Node_Str"")) {
    String prefDevice=getSharedPreferences(""String_Node_Str"",MODE_PRIVATE).getString(MainActivity.PREF_DEVICE,null);
    BluetoothAdapter ba=BluetoothAdapter.getDefaultAdapter();
    Set<BluetoothDevice> devices=ba.getBondedDevices();
    if (devices != null) {
      for (      BluetoothDevice device : devices) {
        if (prefDevice != null && device != null && device.getAddress() != null && prefDevice.equals(device.getAddress())) {
          mDevice=device;
          break;
        }
      }
    }
    showNotification();
    ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).notify(17111,notification);
  }
 else {
    showNotification();
    startForeground(17111,notification);
  }
  return START_STICKY;
}","@Override public int onStartCommand(Intent intent,int flags,int startId){
  Log.d(TAG,""String_Node_Str"" + intent.getAction());
  if (intent.getAction() == null) {
    showNotification();
    startForeground(17111,notification);
  }
 else   if (isConnected() && intent.getAction().contentEquals(""String_Node_Str"")) {
    ringingHoldover=System.currentTimeMillis();
    showNotification();
    ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).notify(17111,notification);
    mBluetoothHeadsetClient.acceptCall(mDevice,BluetoothHeadsetClient.CALL_ACCEPT_NONE);
    connectAudio();
    showNotification();
    ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).notify(17111,notification);
  }
 else   if (isConnected() && intent.getAction().contentEquals(""String_Node_Str"")) {
    ringingHoldover=System.currentTimeMillis();
    showNotification();
    ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).notify(17111,notification);
    mBluetoothHeadsetClient.rejectCall(mDevice);
    showNotification();
    ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).notify(17111,notification);
  }
 else   if (isConnected() && intent.getAction().contentEquals(""String_Node_Str"")) {
    mBluetoothHeadsetClient.terminateCall(mDevice,intent.getIntExtra(""String_Node_Str"",0));
    showNotification();
    ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).notify(17111,notification);
  }
 else   if (intent.getAction().contentEquals(""String_Node_Str"")) {
    String prefDevice=getSharedPreferences(""String_Node_Str"",MODE_PRIVATE).getString(MainActivity.PREF_DEVICE,null);
    BluetoothAdapter ba=BluetoothAdapter.getDefaultAdapter();
    Set<BluetoothDevice> devices=ba.getBondedDevices();
    if (devices != null) {
      for (      BluetoothDevice device : devices) {
        if (prefDevice != null && device != null && device.getAddress() != null && prefDevice.equals(device.getAddress())) {
          mDevice=device;
          break;
        }
      }
    }
    showNotification();
    ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).notify(17111,notification);
  }
 else {
    showNotification();
    startForeground(17111,notification);
  }
  return START_STICKY;
}"
39921,"private void showNotification(){
  Intent phoneIntent=new Intent(this,HfpTestActivity.class);
  PendingIntent phonePIntent=PendingIntent.getActivity(this,1,phoneIntent,0);
  Intent acceptIntent=new Intent(this,HFPNotificationService.class);
  acceptIntent.setAction(""String_Node_Str"");
  PendingIntent acceptPIntent=PendingIntent.getService(this,0,acceptIntent,0);
  Intent rejectIntent=new Intent(this,HFPNotificationService.class);
  rejectIntent.setAction(""String_Node_Str"");
  PendingIntent rejectPIntent=PendingIntent.getService(this,0,rejectIntent,0);
  Intent hangupIntent=new Intent(this,HFPNotificationService.class);
  hangupIntent.setAction(""String_Node_Str"");
  hangupIntent.putExtra(""String_Node_Str"",callId);
  PendingIntent hangupPIntent=PendingIntent.getService(this,0,hangupIntent,0);
  Log.d(TAG,""String_Node_Str"" + sigStrength);
  if (sigStrength > 4)   sigStrength=4;
  if (sigStrength < 0)   sigStrength=0;
  String signalIcon=""String_Node_Str"";
  if (!cellConnected)   signalIcon+=""String_Node_Str"";
 else {
    signalIcon+=Integer.toString(sigStrength);
    if (roaming)     signalIcon+=""String_Node_Str"";
 else     signalIcon+=""String_Node_Str"";
  }
  Notification.Builder builder=new Notification.Builder(this).setContentTitle(""String_Node_Str"").setContentText(""String_Node_Str"" + (connected ? 1 : 0) + ""String_Node_Str""+ cellBattery+ ""String_Node_Str""+ (audioConnected ? 1 : 0)).setSmallIcon(getResources().getIdentifier(signalIcon,""String_Node_Str"",this.getPackageName())).setContentIntent(phonePIntent).setOngoing(true);
  if (ringing && !onCall) {
    builder.setContentTitle(""String_Node_Str"" + ringingNumber);
    builder.addAction(android.R.drawable.ic_media_play,""String_Node_Str"",acceptPIntent);
    builder.addAction(android.R.drawable.ic_media_pause,""String_Node_Str"",rejectPIntent);
    builder.setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_RINGTONE));
    builder.setPriority(Notification.PRIORITY_MAX);
  }
 else   if (ringing) {
    builder.addAction(android.R.drawable.ic_media_play,""String_Node_Str"",acceptPIntent);
    builder.addAction(android.R.drawable.ic_media_pause,""String_Node_Str"",rejectPIntent);
    builder.setPriority(Notification.PRIORITY_MAX);
    builder.setContentText(""String_Node_Str"" + ringingNumber);
  }
 else   if (onCall) {
    builder.addAction(android.R.drawable.ic_media_play,""String_Node_Str"",hangupPIntent);
    builder.setContentText(""String_Node_Str"" + callNumber);
  }
  notification=builder.build();
  if (ringing)   notification.flags=Notification.FLAG_INSISTENT;
}","private void showNotification(){
  Intent phoneIntent=new Intent(this,HfpTestActivity.class);
  PendingIntent phonePIntent=PendingIntent.getActivity(this,1,phoneIntent,0);
  Intent acceptIntent=new Intent(this,HFPNotificationService.class);
  acceptIntent.setAction(""String_Node_Str"");
  PendingIntent acceptPIntent=PendingIntent.getService(this,0,acceptIntent,0);
  Intent rejectIntent=new Intent(this,HFPNotificationService.class);
  rejectIntent.setAction(""String_Node_Str"");
  PendingIntent rejectPIntent=PendingIntent.getService(this,0,rejectIntent,0);
  Intent hangupIntent=new Intent(this,HFPNotificationService.class);
  hangupIntent.setAction(""String_Node_Str"");
  hangupIntent.putExtra(""String_Node_Str"",callId);
  PendingIntent hangupPIntent=PendingIntent.getService(this,0,hangupIntent,0);
  Log.d(TAG,""String_Node_Str"" + sigStrength);
  if (sigStrength > 4)   sigStrength=4;
  if (sigStrength < 0)   sigStrength=0;
  String signalIcon=""String_Node_Str"";
  if (!cellConnected)   signalIcon+=""String_Node_Str"";
 else {
    signalIcon+=Integer.toString(sigStrength);
    if (roaming)     signalIcon+=""String_Node_Str"";
 else     signalIcon+=""String_Node_Str"";
  }
  Notification.Builder builder=new Notification.Builder(this).setContentTitle(""String_Node_Str"").setContentText(""String_Node_Str"" + (connected ? 1 : 0) + ""String_Node_Str""+ cellBattery+ ""String_Node_Str""+ (audioConnected ? 1 : 0)).setSmallIcon(getResources().getIdentifier(signalIcon,""String_Node_Str"",this.getPackageName())).setContentIntent(phonePIntent).setOngoing(true);
  if (ringing && !onCall && ringingHoldover < System.currentTimeMillis() + 15000) {
    builder.setContentTitle(""String_Node_Str"" + ringingNumber);
    builder.addAction(android.R.drawable.ic_media_play,""String_Node_Str"",acceptPIntent);
    builder.addAction(android.R.drawable.ic_media_pause,""String_Node_Str"",rejectPIntent);
    builder.setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_RINGTONE));
    builder.setPriority(Notification.PRIORITY_MAX);
  }
 else   if (ringing) {
    builder.addAction(android.R.drawable.ic_media_play,""String_Node_Str"",acceptPIntent);
    builder.addAction(android.R.drawable.ic_media_pause,""String_Node_Str"",rejectPIntent);
    builder.setPriority(Notification.PRIORITY_MAX);
    builder.setContentText(""String_Node_Str"" + ringingNumber);
  }
 else   if (onCall) {
    builder.addAction(android.R.drawable.ic_media_play,""String_Node_Str"",hangupPIntent);
    builder.setContentText(""String_Node_Str"" + callNumber);
  }
  notification=builder.build();
  if (ringing)   notification.flags=Notification.FLAG_INSISTENT;
}"
39922,"@Override public int onStartCommand(Intent intent,int flags,int startId){
  Log.d(TAG,""String_Node_Str"");
  if (intent.getAction() == null) {
    showNotification();
    startForeground(17111,notification);
  }
 else   if (isConnected() && intent.getAction().contentEquals(""String_Node_Str"")) {
    mBluetoothHeadsetClient.acceptCall(mDevice,BluetoothHeadsetClient.CALL_ACCEPT_NONE);
    showNotification();
    ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).notify(17111,notification);
  }
 else   if (isConnected() && intent.getAction().contentEquals(""String_Node_Str"")) {
    mBluetoothHeadsetClient.rejectCall(mDevice);
    showNotification();
    ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).notify(17111,notification);
  }
 else   if (isConnected() && intent.getAction().contentEquals(""String_Node_Str"")) {
    mBluetoothHeadsetClient.terminateCall(mDevice,intent.getIntExtra(""String_Node_Str"",0));
    showNotification();
    ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).notify(17111,notification);
  }
 else   if (intent.getAction().contentEquals(""String_Node_Str"")) {
    String prefDevice=getSharedPreferences(""String_Node_Str"",MODE_PRIVATE).getString(MainActivity.PREF_DEVICE,null);
    BluetoothAdapter ba=BluetoothAdapter.getDefaultAdapter();
    Set<BluetoothDevice> devices=ba.getBondedDevices();
    if (devices != null) {
      for (      BluetoothDevice device : devices) {
        if (prefDevice != null && device != null && device.getAddress() != null && prefDevice.equals(device.getAddress())) {
          mDevice=device;
          break;
        }
      }
    }
    showNotification();
    ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).notify(17111,notification);
  }
 else {
    showNotification();
    startForeground(17111,notification);
  }
  return START_STICKY;
}","@Override public int onStartCommand(Intent intent,int flags,int startId){
  Log.d(TAG,""String_Node_Str"");
  if (intent.getAction() == null) {
    showNotification();
    startForeground(17111,notification);
  }
 else   if (isConnected() && intent.getAction().contentEquals(""String_Node_Str"")) {
    ringingHoldover=System.currentTimeMillis();
    showNotification();
    ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).notify(17111,notification);
    mBluetoothHeadsetClient.acceptCall(mDevice,BluetoothHeadsetClient.CALL_ACCEPT_NONE);
    connectAudio();
    showNotification();
    ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).notify(17111,notification);
  }
 else   if (isConnected() && intent.getAction().contentEquals(""String_Node_Str"")) {
    mBluetoothHeadsetClient.rejectCall(mDevice);
    showNotification();
    ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).notify(17111,notification);
  }
 else   if (isConnected() && intent.getAction().contentEquals(""String_Node_Str"")) {
    mBluetoothHeadsetClient.terminateCall(mDevice,intent.getIntExtra(""String_Node_Str"",0));
    showNotification();
    ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).notify(17111,notification);
  }
 else   if (intent.getAction().contentEquals(""String_Node_Str"")) {
    String prefDevice=getSharedPreferences(""String_Node_Str"",MODE_PRIVATE).getString(MainActivity.PREF_DEVICE,null);
    BluetoothAdapter ba=BluetoothAdapter.getDefaultAdapter();
    Set<BluetoothDevice> devices=ba.getBondedDevices();
    if (devices != null) {
      for (      BluetoothDevice device : devices) {
        if (prefDevice != null && device != null && device.getAddress() != null && prefDevice.equals(device.getAddress())) {
          mDevice=device;
          break;
        }
      }
    }
    showNotification();
    ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).notify(17111,notification);
  }
 else {
    showNotification();
    startForeground(17111,notification);
  }
  return START_STICKY;
}"
39923,"private void processBeanDefinitions(Set<BeanDefinitionHolder> beanDefinitions){
  GenericBeanDefinition definition;
  for (  BeanDefinitionHolder holder : beanDefinitions) {
    definition=(GenericBeanDefinition)holder.getBeanDefinition();
    logger.info(""String_Node_Str"" + holder.getBeanName() + ""String_Node_Str""+ definition.getBeanClassName()+ ""String_Node_Str"");
    definition.getPropertyValues().add(""String_Node_Str"",definition.getBeanClassName());
    definition.setBeanClass(MapperFactoryBean.class);
    definition.getPropertyValues().add(""String_Node_Str"",mapperFactory);
    definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);
  }
}","private void processBeanDefinitions(Set<BeanDefinitionHolder> beanDefinitions){
  GenericBeanDefinition definition;
  for (  BeanDefinitionHolder holder : beanDefinitions) {
    definition=(GenericBeanDefinition)holder.getBeanDefinition();
    logger.info(""String_Node_Str"" + holder.getBeanName() + ""String_Node_Str""+ definition.getBeanClassName()+ ""String_Node_Str"");
    definition.getPropertyValues().add(""String_Node_Str"",definition.getBeanClassName());
    definition.setBeanClass(MapperBean.class);
    definition.getPropertyValues().add(""String_Node_Str"",new RuntimeBeanReference(this.mapperFactoryBeanId));
    definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);
  }
}"
39924,"@Override public T getObject() throws Exception {
  return mapperFactory.getMapper(this.mapperInterface);
}","@Override public MapperFactory getObject() throws Exception {
  if (this.mapperFactory == null) {
    afterPropertiesSet();
  }
  return this.mapperFactory;
}"
39925,"@Override public Class<T> getObjectType(){
  return this.mapperInterface;
}","@Override public Class<?> getObjectType(){
  return MapperFactory.class;
}"
39926,"@Override public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry){
  ClassPathMapperScanner scanner=new ClassPathMapperScanner(registry);
  scanner.setMapperFactory(mapperFactory);
  scanner.setAnnotationClass(this.annotationClass);
  scanner.setResourceLoader(this.applicationContext);
  scanner.registerFilters();
  scanner.scan(StringUtils.tokenizeToStringArray(this.basePackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS));
}","@Override public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry){
  ClassPathMapperScanner scanner=new ClassPathMapperScanner(registry);
  scanner.setMapperFactoryBeanId(this.mapperFactoryBeanId);
  scanner.setAnnotationClass(this.annotationClass);
  scanner.setResourceLoader(this.applicationContext);
  scanner.registerFilters();
  scanner.scan(StringUtils.tokenizeToStringArray(this.basePackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS));
}"
39927,"@Override public void afterPropertiesSet() throws Exception {
  notNull(this.basePackage,""String_Node_Str"");
  addResources();
}","@Override public void afterPropertiesSet() throws Exception {
  notNull(this.basePackage,""String_Node_Str"");
}"
39928,"@Override public String handleToken(String content){
  Object value=MVELUtils.eval(content,bindings);
  String srtValue=(value == null ? ""String_Node_Str"" : String.valueOf(value));
  return srtValue;
}","@Override public String handleToken(String content){
  Object value=MVELUtils.eval(content,bindings);
  if (value == null) {
    return ""String_Node_Str"";
  }
 else   if (value instanceof Date) {
    DateFormat df=new SimpleDateFormat(DEFAULT_DATE_FORMAT);
    df.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
    return df.format(value);
  }
 else {
    return String.valueOf(value);
  }
}"
39929,"public String parse(String raw,Map<String,Object> bindings){
  ParameterHandler handler=new ParameterHandler(bindings);
  TokenParser parser1=new TokenParser(""String_Node_Str"",""String_Node_Str"",handler);
  TokenParser parser2=new TokenParser(""String_Node_Str"",""String_Node_Str"",handler);
  String result=parser1.parse(raw);
  result=parser2.parse(result);
  return result;
}","public String parse(String raw,Map<String,Object> bindings){
  PlaceholderHandler handler=new PlaceholderHandler(bindings);
  TokenParser parser=new TokenParser(""String_Node_Str"",""String_Node_Str"",handler);
  String result=parser.parse(raw);
  return result;
}"
39930,"@Test public void test(){
  MapperFactory configuration=new MapperFactory();
  configuration.setHttpHosts(""String_Node_Str"");
  configuration.addResource(""String_Node_Str"");
  DemoDao demoDao=configuration.getMapper(DemoDao.class);
  Demo demo=new Demo();
  demo.setId(3L);
  demo.setCheckType(0);
  demo.setCheckId(1L);
  demo.setDataDt(""String_Node_Str"");
  demo.setCreatedAt(LocalDate.now().toString());
  demo.setUpdatedAt(LocalDate.now().toString());
  String json=""String_Node_Str"";
  demo.setCheckValueJson(json);
  demoDao.index(demo);
}","@Test public void test(){
  MapperFactory mapperFactory=new MapperFactory();
  mapperFactory.setHttpHosts(""String_Node_Str"");
  mapperFactory.addResource(""String_Node_Str"");
  DemoDao demoDao=mapperFactory.getMapper(DemoDao.class);
  Demo demo=new Demo();
  demo.setId(3L);
  demo.setDate(new Date());
  demoDao.index(demo);
}"
39931,"@Test public void test(){
  ApplicationContext applicationContext=new ClassPathXmlApplicationContext(""String_Node_Str"");
  DemoDao demoDao=applicationContext.getBean(DemoDao.class);
  Demo demo=new Demo();
  demo.setId(3L);
  demo.setCheckType(0);
  demo.setCheckId(1L);
  demo.setDataDt(""String_Node_Str"");
  demo.setCreatedAt(LocalDate.now().toString());
  demo.setUpdatedAt(LocalDate.now().toString());
  String json=""String_Node_Str"";
  demo.setCheckValueJson(json);
  demoDao.index(demo);
  demoDao.update();
  boolean b=demoDao.bulk();
  System.out.println(b);
  List<Demo> list=demoDao.mget();
  System.out.println(JSON.toJSON(list));
}","@Test public void test(){
  ApplicationContext applicationContext=new ClassPathXmlApplicationContext(""String_Node_Str"");
  DemoDao demoDao=applicationContext.getBean(DemoDao.class);
  Demo demo=new Demo();
  demo.setId(61L);
  demo.setAge(new ArrayList<>());
  demo.setDate(new Date());
  demoDao.index(demo);
  demoDao.update();
  boolean b=demoDao.bulk();
  System.out.println(b);
  List<Demo> list=demoDao.mget();
  System.out.println(JSON.toJSON(list));
}"
39932,"@Override public String addPmphGroupMemberOnGroup(Long groupId,List<PmphGroupMember> pmphGroupMembers,String sessionId) throws CheckedServiceException {
  String result=""String_Node_Str"";
  PmphUser pmphUser=SessionUtil.getPmphUserBySessionId(sessionId);
  if (null == pmphUser || null == pmphUser.getId()) {
    throw new CheckedServiceException(CheckedExceptionBusiness.GROUP,CheckedExceptionResult.NULL_PARAM,""String_Node_Str"");
  }
  Textbook textbook=new Textbook();
  if (null != pmphGroupMembers.get(0).getTextbookId()) {
    textbook=textbookService.getTextbookById(pmphGroupMembers.get(0).getTextbookId());
  }
  Material material=new Material();
  if (null != pmphGroupMembers.get(0).getMaterialId()) {
    material=materialService.getMaterialById(pmphGroupMembers.get(0).getMaterialId());
  }
  MaterialProjectEditor materialProjectEditor=materialProjectEditorService.getMaterialProjectEditorByMaterialIdAndUserId(material.getId(),pmphUser.getId());
  if (material.getDirector() != pmphUser.getId() || textbook.getPlanningEditor() != pmphUser.getId() || null == materialProjectEditor || !pmphUser.getIsAdmin()) {
    if (null != material.getPlanPermission() || null != material.getProjectPermission()) {
      if (!BinaryUtil.getBit(material.getPlanPermission(),7) || !BinaryUtil.getBit(material.getProjectPermission(),7)) {
        throw new CheckedServiceException(CheckedExceptionBusiness.GROUP,CheckedExceptionResult.ILLEGAL_PARAM,""String_Node_Str"");
      }
    }
  }
  if (pmphUser.getIsAdmin() || isFounderOrisAdmin(groupId,sessionId) || material.getDirector() == pmphUser.getId() || textbook.getPlanningEditor() == pmphUser.getId() || pmphUser.getId() == materialProjectEditor.getEditorId()) {
    if (pmphGroupMembers.size() > 0) {
      List<Long> writers=new ArrayList<>();
      List<Long> pmphs=new ArrayList<>();
      for (      PmphGroupMember pmphGroupMember : pmphGroupMembers) {
        PmphGroupMemberVO groupMember=pmphGroupMemberDao.getPmphGroupMemberByMemberId(groupId,pmphGroupMember.getUserId(),pmphGroupMember.getIsWriter());
        if (ObjectUtil.isNull(groupMember)) {
          if (null == pmphGroupMember.getUserId()) {
            throw new CheckedServiceException(CheckedExceptionBusiness.GROUP,CheckedExceptionResult.ILLEGAL_PARAM,""String_Node_Str"");
          }
          if (pmphGroupMember.getIsWriter()) {
            WriterUser writerUser=writerUserService.get(pmphGroupMember.getUserId());
            pmphGroupMember.setDisplayName(writerUser.getRealname());
            writers.add(pmphGroupMember.getUserId());
          }
 else {
            PmphUser user=pmphUserService.get(pmphGroupMember.getUserId());
            pmphGroupMember.setDisplayName(user.getRealname());
            pmphs.add(pmphGroupMember.getUserId());
          }
          pmphGroupMember.setGroupId(groupId);
          pmphGroupMemberDao.addPmphGroupMember(pmphGroupMember);
        }
 else {
          if (groupMember.getIsDeleted()) {
            pmphGroupMember.setGroupId(groupId);
            pmphGroupMember.setIsDeleted(false);
            pmphGroupMemberDao.update(pmphGroupMember);
            if (groupMember.getIsWriter()) {
              writers.add(pmphGroupMember.getUserId());
            }
 else {
              pmphs.add(pmphGroupMember.getUserId());
            }
          }
 else {
            throw new CheckedServiceException(CheckedExceptionBusiness.GROUP,CheckedExceptionResult.ILLEGAL_PARAM,""String_Node_Str"");
          }
        }
      }
      try {
        if (!writers.isEmpty()) {
          systemMessageService.sendWhenInviteJoinGroup(pmphUser.getRealname(),groupId,writers,(short)2);
        }
        if (!pmphs.isEmpty()) {
          systemMessageService.sendWhenInviteJoinGroup(pmphUser.getRealname(),groupId,pmphs,(short)1);
        }
      }
 catch (      IOException e) {
        throw new CheckedServiceException(CheckedExceptionBusiness.GROUP,CheckedExceptionResult.ILLEGAL_PARAM,""String_Node_Str"" + e.getMessage());
      }
      result=""String_Node_Str"";
    }
 else {
      throw new CheckedServiceException(CheckedExceptionBusiness.GROUP,CheckedExceptionResult.ILLEGAL_PARAM,""String_Node_Str"");
    }
  }
 else {
    throw new CheckedServiceException(CheckedExceptionBusiness.GROUP,CheckedExceptionResult.ILLEGAL_PARAM,""String_Node_Str"");
  }
  return result;
}","@Override public String addPmphGroupMemberOnGroup(Long groupId,List<PmphGroupMember> pmphGroupMembers,String sessionId) throws CheckedServiceException {
  String result=""String_Node_Str"";
  PmphUser pmphUser=SessionUtil.getPmphUserBySessionId(sessionId);
  if (null == pmphUser || null == pmphUser.getId()) {
    throw new CheckedServiceException(CheckedExceptionBusiness.GROUP,CheckedExceptionResult.NULL_PARAM,""String_Node_Str"");
  }
  Textbook textbook=new Textbook();
  if (null != pmphGroupMembers.get(0).getTextbookId()) {
    textbook=textbookService.getTextbookById(pmphGroupMembers.get(0).getTextbookId());
  }
  Material material=new Material();
  if (null != pmphGroupMembers.get(0).getMaterialId()) {
    material=materialService.getMaterialById(pmphGroupMembers.get(0).getMaterialId());
  }
  MaterialProjectEditor materialProjectEditor=materialProjectEditorService.getMaterialProjectEditorByMaterialIdAndUserId(material.getId(),pmphUser.getId());
  if (!material.getDirector().equals(pmphUser.getId()) && !textbook.getPlanningEditor().equals(pmphUser.getId()) && null == materialProjectEditor && !pmphUser.getIsAdmin()) {
    throw new CheckedServiceException(CheckedExceptionBusiness.GROUP,CheckedExceptionResult.ILLEGAL_PARAM,""String_Node_Str"");
  }
  if (null != material.getPlanPermission()) {
    if (!BinaryUtil.getBit(material.getPlanPermission(),7)) {
      throw new CheckedServiceException(CheckedExceptionBusiness.GROUP,CheckedExceptionResult.ILLEGAL_PARAM,""String_Node_Str"");
    }
  }
  if (null != material.getProjectPermission()) {
    if (!BinaryUtil.getBit(material.getProjectPermission(),7)) {
      throw new CheckedServiceException(CheckedExceptionBusiness.GROUP,CheckedExceptionResult.ILLEGAL_PARAM,""String_Node_Str"");
    }
  }
  if (pmphUser.getIsAdmin() || isFounderOrisAdmin(groupId,sessionId) || material.getDirector() == pmphUser.getId() || textbook.getPlanningEditor() == pmphUser.getId() || pmphUser.getId() == materialProjectEditor.getEditorId()) {
    if (pmphGroupMembers.size() > 0) {
      List<Long> writers=new ArrayList<>();
      List<Long> pmphs=new ArrayList<>();
      for (      PmphGroupMember pmphGroupMember : pmphGroupMembers) {
        PmphGroupMemberVO groupMember=pmphGroupMemberDao.getPmphGroupMemberByMemberId(groupId,pmphGroupMember.getUserId(),pmphGroupMember.getIsWriter());
        if (ObjectUtil.isNull(groupMember)) {
          if (null == pmphGroupMember.getUserId()) {
            throw new CheckedServiceException(CheckedExceptionBusiness.GROUP,CheckedExceptionResult.ILLEGAL_PARAM,""String_Node_Str"");
          }
          if (pmphGroupMember.getIsWriter()) {
            WriterUser writerUser=writerUserService.get(pmphGroupMember.getUserId());
            pmphGroupMember.setDisplayName(writerUser.getRealname());
            writers.add(pmphGroupMember.getUserId());
          }
 else {
            PmphUser user=pmphUserService.get(pmphGroupMember.getUserId());
            pmphGroupMember.setDisplayName(user.getRealname());
            pmphs.add(pmphGroupMember.getUserId());
          }
          pmphGroupMember.setGroupId(groupId);
          pmphGroupMemberDao.addPmphGroupMember(pmphGroupMember);
        }
 else {
          if (groupMember.getIsDeleted()) {
            pmphGroupMember.setGroupId(groupId);
            pmphGroupMember.setIsDeleted(false);
            pmphGroupMemberDao.update(pmphGroupMember);
            if (groupMember.getIsWriter()) {
              writers.add(pmphGroupMember.getUserId());
            }
 else {
              pmphs.add(pmphGroupMember.getUserId());
            }
          }
 else {
            throw new CheckedServiceException(CheckedExceptionBusiness.GROUP,CheckedExceptionResult.ILLEGAL_PARAM,""String_Node_Str"");
          }
        }
      }
      try {
        if (!writers.isEmpty()) {
          systemMessageService.sendWhenInviteJoinGroup(pmphUser.getRealname(),groupId,writers,(short)2);
        }
        if (!pmphs.isEmpty()) {
          systemMessageService.sendWhenInviteJoinGroup(pmphUser.getRealname(),groupId,pmphs,(short)1);
        }
      }
 catch (      IOException e) {
        throw new CheckedServiceException(CheckedExceptionBusiness.GROUP,CheckedExceptionResult.ILLEGAL_PARAM,""String_Node_Str"" + e.getMessage());
      }
      result=""String_Node_Str"";
    }
 else {
      throw new CheckedServiceException(CheckedExceptionBusiness.GROUP,CheckedExceptionResult.ILLEGAL_PARAM,""String_Node_Str"");
    }
  }
 else {
    throw new CheckedServiceException(CheckedExceptionBusiness.GROUP,CheckedExceptionResult.ILLEGAL_PARAM,""String_Node_Str"");
  }
  return result;
}"
39933,"@Override public PmphGroup addEditorSelcetionGroup(String sessionId,List<PmphGroupMember> list,Long textbookId) throws CheckedServiceException {
  PmphUser pmphUser=SessionUtil.getPmphUserBySessionId(sessionId);
  if (null == pmphUser || null == pmphUser.getId()) {
    throw new CheckedServiceException(CheckedExceptionBusiness.GROUP,CheckedExceptionResult.NULL_PARAM,""String_Node_Str"");
  }
  if (list.size() > 0) {
    throw new CheckedServiceException(CheckedExceptionBusiness.GROUP,CheckedExceptionResult.NULL_PARAM,""String_Node_Str"");
  }
  Textbook textbook=textbookService.getTextbookById(textbookId);
  list.get(0).setTextbookId(textbookId);
  list.get(0).setMaterialId(textbook.getMaterialId());
  String groupImage=RouteUtil.DEFAULT_GROUP_IMAGE;
  PmphGroup pmphGroup=new PmphGroup();
  if (ObjectUtil.isNull(pmphGroupDao.getPmphGroupByGroupName(textbook.getTextbookName()))) {
    pmphGroup.setGroupName(textbook.getTextbookName());
  }
 else {
    Long count=pmphGroupDao.getPmphGroupCount();
    pmphGroup.setGroupName(textbook.getTextbookName() + count);
  }
  pmphGroup.setGroupImage(groupImage);
  pmphGroup.setBookId(textbookId);
  pmphGroup.setFounderId(pmphUser.getId());
  pmphGroupDao.addPmphGroup(pmphGroup);
  if (null != pmphGroup.getId()) {
    PmphGroupMember pmphGroupMember=new PmphGroupMember();
    pmphGroupMember.setGroupId(pmphGroup.getId());
    pmphGroupMember.setIsFounder(true);
    pmphGroupMember.setUserId(pmphUser.getId());
    pmphGroupMember.setDisplayName(pmphUser.getRealname());
    pmphGroupMemberService.addPmphGroupMember(pmphGroupMember);
    pmphGroupMemberService.addPmphGroupMemberOnGroup(pmphGroup.getId(),list,sessionId);
  }
 else {
    throw new CheckedServiceException(CheckedExceptionBusiness.GROUP,CheckedExceptionResult.OBJECT_NOT_FOUND,""String_Node_Str"");
  }
  return pmphGroup;
}","@Override public PmphGroup addEditorSelcetionGroup(String sessionId,List<PmphGroupMember> list,Long textbookId) throws CheckedServiceException {
  PmphUser pmphUser=SessionUtil.getPmphUserBySessionId(sessionId);
  if (null == pmphUser || null == pmphUser.getId()) {
    throw new CheckedServiceException(CheckedExceptionBusiness.GROUP,CheckedExceptionResult.NULL_PARAM,""String_Node_Str"");
  }
  if (list.size() == 0) {
    throw new CheckedServiceException(CheckedExceptionBusiness.GROUP,CheckedExceptionResult.NULL_PARAM,""String_Node_Str"");
  }
  Textbook textbook=textbookService.getTextbookById(textbookId);
  list.get(0).setTextbookId(textbookId);
  list.get(0).setMaterialId(textbook.getMaterialId());
  String groupImage=RouteUtil.DEFAULT_GROUP_IMAGE;
  PmphGroup pmphGroup=new PmphGroup();
  if (ObjectUtil.isNull(pmphGroupDao.getPmphGroupByGroupName(textbook.getTextbookName()))) {
    pmphGroup.setGroupName(textbook.getTextbookName());
  }
 else {
    Long count=pmphGroupDao.getPmphGroupCount();
    pmphGroup.setGroupName(textbook.getTextbookName() + count);
  }
  pmphGroup.setGroupImage(groupImage);
  pmphGroup.setBookId(textbookId);
  pmphGroup.setFounderId(pmphUser.getId());
  pmphGroupDao.addPmphGroup(pmphGroup);
  if (null != pmphGroup.getId()) {
    PmphGroupMember pmphGroupMember=new PmphGroupMember();
    pmphGroupMember.setGroupId(pmphGroup.getId());
    pmphGroupMember.setIsFounder(true);
    pmphGroupMember.setUserId(pmphUser.getId());
    pmphGroupMember.setDisplayName(pmphUser.getRealname());
    pmphGroupMemberService.addPmphGroupMember(pmphGroupMember);
    pmphGroupMemberService.addPmphGroupMemberOnGroup(pmphGroup.getId(),list,sessionId);
  }
 else {
    throw new CheckedServiceException(CheckedExceptionBusiness.GROUP,CheckedExceptionResult.OBJECT_NOT_FOUND,""String_Node_Str"");
  }
  return pmphGroup;
}"
39934,"/** 
 * 功能描述：图书同步 1：全量同步 2：增量同步
 * @param type
 * @return
 */
@ResponseBody @LogDetail(businessType=BUSSINESS_TYPE,logRemark=""String_Node_Str"") @RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public ResponseBean allsynchronization(Integer type){
  return new ResponseBean(bookService.AllSynchronization(type));
}","/** 
 * 功能描述：图书同步 1：全量同步 2：增量同步
 * @param type
 * @return
 */
@ResponseBody @LogDetail(businessType=BUSSINESS_TYPE,logRemark=""String_Node_Str"") @RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public ResponseBean allsynchronization(Integer type){
  return new ResponseBean(bookService.AllSynchronization(type));
}"
39935,"/** 
 * 功能描述：图书同步 1：全量同步 2：增量同步
 * @param type
 * @return
 */
@ResponseBody @LogDetail(businessType=BUSSINESS_TYPE,logRemark=""String_Node_Str"") @RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public ResponseBean allsynchronization(Integer type){
  return new ResponseBean(bookService.AllSynchronization(type));
}","/** 
 * 功能描述：图书同步 1：全量同步 2：增量同步
 * @param type
 * @return
 */
@ResponseBody @LogDetail(businessType=BUSSINESS_TYPE,logRemark=""String_Node_Str"") @RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public ResponseBean allsynchronization(Integer type){
  return new ResponseBean(bookService.AllSynchronization(type));
}"
39936,"@Override public List<DeclarationEtcBO> declarationEtcBO(Long materialId,String textBookids,String realname,String position,String title,String orgName,String unitName,Integer positionType,Integer onlineProgress,Integer offlineProgress) throws CheckedServiceException, IllegalArgumentException, IllegalAccessException {
  List<DeclarationEtcBO> declarationEtcBOs=new ArrayList<>();
  Gson gson=new Gson();
  List<Long> bookIds=gson.fromJson(textBookids,new TypeToken<ArrayList<Long>>(){
  }
.getType());
  List<DeclarationOrDisplayVO> declarationOrDisplayVOs=declarationDao.getDeclarationOrDisplayVOByMaterialId(materialId,bookIds,realname,position,title,orgName,unitName,positionType,onlineProgress,offlineProgress);
  List<Long> decIds=new ArrayList<>();
  for (  DeclarationOrDisplayVO declarationOrDisplayVO : declarationOrDisplayVOs) {
    decIds.add(declarationOrDisplayVO.getId());
  }
  ArrayList<DecEduExp> decEduExps=(ArrayList<DecEduExp>)decEduExpDao.getListDecEduExpByDeclarationIds(decIds);
  ArrayList<DecWorkExp> decWorkExps=(ArrayList<DecWorkExp>)decWorkExpDao.getListDecWorkExpByDeclarationIds(decIds);
  ArrayList<DecTeachExp> decTeachExps=(ArrayList<DecTeachExp>)decTeachExpDao.getListDecTeachExpByDeclarationIds(decIds);
  ArrayList<DecAcade> decAcades=(ArrayList<DecAcade>)decAcadeDao.getListDecAcadeByDeclarationIds(decIds);
  ArrayList<DecAchievement> decAchievements=(ArrayList<DecAchievement>)decAchievementDao.getDecAchievementByDeclarationIds(decIds);
  ArrayList<DecLastPosition> decLastPositions=(ArrayList<DecLastPosition>)decLastPositionDao.getListDecLastPositionByDeclarationIds(decIds);
  ArrayList<DecCourseConstruction> decCourseConstructions=(ArrayList<DecCourseConstruction>)decCourseConstructionDao.getDecCourseConstructionByDeclarationIds(decIds);
  ArrayList<DecNationalPlan> decNationalPlans=(ArrayList<DecNationalPlan>)decNationalPlanDao.getListDecNationalPlanByDeclarationIds(decIds);
  ArrayList<DecTextbookPmph> decTextbookPmphs=(ArrayList<DecTextbookPmph>)decTextbookPmphDao.getListDecTextbookPmphByDeclarationIds(decIds);
  ArrayList<DecTextbook> decTextbooks=(ArrayList<DecTextbook>)decTextbookDao.getListDecTextbookByDeclarationIds(decIds);
  ArrayList<DecMoocDigital> decMoocDigitals=(ArrayList<DecMoocDigital>)decMoocDigitalDao.getDecMoocDigitalByDeclarationIds(decIds);
  ArrayList<DecResearch> decResearchs=(ArrayList<DecResearch>)decResearchDao.getListDecResearchByDeclarationIds(decIds);
  ArrayList<DecMonograph> decMonographList=(ArrayList<DecMonograph>)decMonographDao.getListDecMonographByDeclarationIds(decIds);
  ArrayList<DecPublishReward> decPublishRewardList=(ArrayList<DecPublishReward>)decPublishRewardDao.getListDecPublishRewardByDeclarationIds(decIds);
  ArrayList<DecSci> decSciList=(ArrayList<DecSci>)decSciDao.getListDecSciByDeclarationIds(decIds);
  ArrayList<DecClinicalReward> decClinicalRewardList=(ArrayList<DecClinicalReward>)decClinicalRewardDao.getListDecClinicalRewardByDeclarationIds(decIds);
  ArrayList<DecAcadeReward> decAcadeRewardList=(ArrayList<DecAcadeReward>)decAcadeRewardDao.getListDecAcadeRewardByDeclarationIds(decIds);
  ArrayList<DecExtensionVO> decExtensionVOs=(ArrayList<DecExtensionVO>)decExtensionDao.getListDecExtensionVOByDeclarationIds(decIds);
  ArrayList<DecIntention> decIntentions=(ArrayList<DecIntention>)decIntentionDao.getDecIntentionByDeclarationIds(decIds);
  for (  DeclarationOrDisplayVO declarationOrDisplayVO : declarationOrDisplayVOs) {
    String strOnlineProgress=""String_Node_Str"";
    String strOfflineProgress=""String_Node_Str"";
    String sex=""String_Node_Str"";
    String idtype=""String_Node_Str"";
    String degree=""String_Node_Str"";
switch (declarationOrDisplayVO.getIdtype()) {
case 0:
      idtype=""String_Node_Str"";
    break;
case 1:
  idtype=""String_Node_Str"";
break;
case 2:
idtype=""String_Node_Str"";
break;
default :
idtype=""String_Node_Str"";
break;
}
switch (declarationOrDisplayVO.getDegree()) {
case 0:
degree=""String_Node_Str"";
break;
case 1:
degree=""String_Node_Str"";
break;
case 2:
degree=""String_Node_Str"";
break;
case 3:
degree=""String_Node_Str"";
break;
case 4:
degree=""String_Node_Str"";
break;
default :
degree=""String_Node_Str"";
break;
}
switch (declarationOrDisplayVO.getOnlineProgress()) {
case 0:
strOnlineProgress=""String_Node_Str"";
break;
case 1:
strOnlineProgress=""String_Node_Str"";
break;
case 2:
strOnlineProgress=""String_Node_Str"";
break;
case 3:
strOnlineProgress=""String_Node_Str"";
break;
default :
strOnlineProgress=""String_Node_Str"";
break;
}
switch (declarationOrDisplayVO.getSex()) {
case 0:
sex=""String_Node_Str"";
break;
case 1:
sex=""String_Node_Str"";
break;
case 2:
sex=""String_Node_Str"";
break;
default :
sex=""String_Node_Str"";
break;
}
switch (declarationOrDisplayVO.getOfflineProgress()) {
case 0:
strOfflineProgress=""String_Node_Str"";
break;
case 1:
strOfflineProgress=""String_Node_Str"";
break;
case 2:
strOfflineProgress=""String_Node_Str"";
break;
default :
strOfflineProgress=""String_Node_Str"";
break;
}
String birthday=""String_Node_Str"";
if (null != declarationOrDisplayVO.getBirthday()) {
birthday=DateUtil.date2Str(declarationOrDisplayVO.getBirthday(),""String_Node_Str"");
}
if (null == declarationOrDisplayVO.getPosition() || ""String_Node_Str"".equals(declarationOrDisplayVO.getPosition())) {
declarationOrDisplayVO.setPosition(""String_Node_Str"");
}
if (StringUtil.isEmpty(declarationOrDisplayVO.getTextbookName())) {
declarationOrDisplayVO.setTextbookName(""String_Node_Str"");
}
if (StringUtil.isEmpty(declarationOrDisplayVO.getPresetPosition())) {
declarationOrDisplayVO.setPresetPosition(""String_Node_Str"");
}
List<DecEduExp> decEduExp=new ArrayList<>();
for (DecEduExp exp : decEduExps) {
if (exp.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decEduExp.add(exp);
}
}
List<DecWorkExp> decWorkExp=new ArrayList<>();
for (DecWorkExp workExp : decWorkExps) {
if (workExp.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decWorkExp.add(workExp);
}
}
List<DecTeachExp> decTeachExp=new ArrayList<>();
for (DecTeachExp teachExp : decTeachExps) {
if (teachExp.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decTeachExp.add(teachExp);
}
}
List<DecAcade> decAcade=new ArrayList<>();
for (DecAcade acade : decAcades) {
if (acade.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decAcade.add(acade);
}
}
DecAchievement decAchievement=new DecAchievement();
for (DecAchievement achievement : decAchievements) {
if (achievement.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decAchievement=achievement;
}
}
List<DecLastPosition> decLastPosition=new ArrayList<>();
for (DecLastPosition lastPosition : decLastPositions) {
if (lastPosition.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decLastPosition.add(lastPosition);
}
}
List<DecCourseConstruction> decCourseConstruction=new ArrayList<>();
for (DecCourseConstruction construction : decCourseConstructions) {
if (construction.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decCourseConstruction.add(construction);
}
}
List<DecNationalPlan> decNationalPlan=new ArrayList<>();
for (DecNationalPlan plan : decNationalPlans) {
if (plan.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decNationalPlan.add(plan);
}
}
List<DecTextbookPmph> decTextbookPmph=new ArrayList<>();
for (DecTextbookPmph textbookPmph : decTextbookPmphs) {
if (textbookPmph.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decTextbookPmph.add(textbookPmph);
}
}
List<DecTextbook> decTextbook=new ArrayList<>();
for (DecTextbook textbook : decTextbooks) {
if (textbook.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decTextbook.add(textbook);
}
}
DecMoocDigital decMoocDigital=new DecMoocDigital();
for (DecMoocDigital moocDigital : decMoocDigitals) {
if (moocDigital.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decMoocDigital=moocDigital;
}
}
List<DecResearch> decResearch=new ArrayList<>();
for (DecResearch research : decResearchs) {
if (research.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decResearch.add(research);
}
}
List<DecMonograph> monographs=new ArrayList<>();
for (DecMonograph monograph : decMonographList) {
if (monograph.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
monographs.add(monograph);
}
}
List<DecPublishReward> publishRewards=new ArrayList<>();
for (DecPublishReward publishReward : decPublishRewardList) {
if (publishReward.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
publishRewards.add(publishReward);
}
}
List<DecSci> scis=new ArrayList<>();
for (DecSci sci : decSciList) {
if (sci.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
scis.add(sci);
}
}
List<DecClinicalReward> clinicalRewards=new ArrayList<>();
for (DecClinicalReward clinicalReward : decClinicalRewardList) {
if (clinicalReward.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
clinicalRewards.add(clinicalReward);
}
}
List<DecAcadeReward> acadeRewards=new ArrayList<>();
for (DecAcadeReward acadeReward : decAcadeRewardList) {
if (acadeReward.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
acadeRewards.add(acadeReward);
}
}
List<DecExtensionVO> extensionVOs=new ArrayList<>();
for (DecExtensionVO extensionVO : decExtensionVOs) {
if (extensionVO.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
extensionVOs.add(extensionVO);
}
}
DecIntention decIntention=new DecIntention();
for (DecIntention intention : decIntentions) {
if (intention.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decIntention=intention;
}
}
DeclarationEtcBO declarationEtcBO=new DeclarationEtcBO(declarationOrDisplayVO.getTextbookName(),declarationOrDisplayVO.getPresetPosition(),declarationOrDisplayVO.getRealname(),declarationOrDisplayVO.getUsername(),sex,birthday,declarationOrDisplayVO.getExperience(),declarationOrDisplayVO.getOrgName(),declarationOrDisplayVO.getPosition(),declarationOrDisplayVO.getTitle(),declarationOrDisplayVO.getAddress(),declarationOrDisplayVO.getPostcode(),declarationOrDisplayVO.getTelephone(),declarationOrDisplayVO.getFax(),declarationOrDisplayVO.getHandphone(),degree,declarationOrDisplayVO.getEmail(),idtype,declarationOrDisplayVO.getIdcard(),declarationOrDisplayVO.getExpertise(),declarationOrDisplayVO.getIsDispensed(),declarationOrDisplayVO.getIsUtec(),strOnlineProgress,strOfflineProgress,declarationOrDisplayVO.getOrgNameOne(),(ArrayList<DecEduExp>)decEduExp,(ArrayList<DecWorkExp>)decWorkExp,(ArrayList<DecTeachExp>)decTeachExp,decAchievement,(ArrayList<DecAcade>)decAcade,(ArrayList<DecLastPosition>)decLastPosition,(ArrayList<DecCourseConstruction>)decCourseConstruction,(ArrayList<DecNationalPlan>)decNationalPlan,(ArrayList<DecTextbookPmph>)decTextbookPmph,decMoocDigital,(ArrayList<DecTextbook>)decTextbook,(ArrayList<DecResearch>)decResearch,(ArrayList<DecMonograph>)monographs,(ArrayList<DecPublishReward>)publishRewards,(ArrayList<DecSci>)scis,(ArrayList<DecClinicalReward>)clinicalRewards,(ArrayList<DecAcadeReward>)acadeRewards,(ArrayList<DecExtensionVO>)extensionVOs,decIntention);
declarationEtcBOs.add(declarationEtcBO);
}
return declarationEtcBOs;
}","@Override public List<DeclarationEtcBO> declarationEtcBO(Long materialId,String textBookids,String realname,String position,String title,String orgName,String unitName,Integer positionType,Integer onlineProgress,Integer offlineProgress) throws CheckedServiceException, IllegalArgumentException, IllegalAccessException {
  List<DeclarationEtcBO> declarationEtcBOs=new ArrayList<>();
  Gson gson=new Gson();
  List<Long> bookIds=gson.fromJson(textBookids,new TypeToken<ArrayList<Long>>(){
  }
.getType());
  List<DeclarationOrDisplayVO> declarationOrDisplayVOs=declarationDao.getDeclarationOrDisplayVOByMaterialId(materialId,bookIds,realname,position,title,orgName,unitName,positionType,onlineProgress,offlineProgress);
  List<Long> decIds=new ArrayList<>();
  for (  DeclarationOrDisplayVO declarationOrDisplayVO : declarationOrDisplayVOs) {
    decIds.add(declarationOrDisplayVO.getId());
  }
  ArrayList<DecEduExp> decEduExps=(ArrayList<DecEduExp>)decEduExpDao.getListDecEduExpByDeclarationIds(decIds);
  ArrayList<DecWorkExp> decWorkExps=(ArrayList<DecWorkExp>)decWorkExpDao.getListDecWorkExpByDeclarationIds(decIds);
  ArrayList<DecTeachExp> decTeachExps=(ArrayList<DecTeachExp>)decTeachExpDao.getListDecTeachExpByDeclarationIds(decIds);
  ArrayList<DecAcade> decAcades=(ArrayList<DecAcade>)decAcadeDao.getListDecAcadeByDeclarationIds(decIds);
  ArrayList<DecAchievement> decAchievements=(ArrayList<DecAchievement>)decAchievementDao.getDecAchievementByDeclarationIds(decIds);
  ArrayList<DecLastPosition> decLastPositions=(ArrayList<DecLastPosition>)decLastPositionDao.getListDecLastPositionByDeclarationIds(decIds);
  ArrayList<DecCourseConstruction> decCourseConstructions=(ArrayList<DecCourseConstruction>)decCourseConstructionDao.getDecCourseConstructionByDeclarationIds(decIds);
  ArrayList<DecNationalPlan> decNationalPlans=(ArrayList<DecNationalPlan>)decNationalPlanDao.getListDecNationalPlanByDeclarationIds(decIds);
  ArrayList<DecTextbookPmph> decTextbookPmphs=(ArrayList<DecTextbookPmph>)decTextbookPmphDao.getListDecTextbookPmphByDeclarationIds(decIds);
  ArrayList<DecTextbook> decTextbooks=(ArrayList<DecTextbook>)decTextbookDao.getListDecTextbookByDeclarationIds(decIds);
  ArrayList<DecMoocDigital> decMoocDigitals=(ArrayList<DecMoocDigital>)decMoocDigitalDao.getDecMoocDigitalByDeclarationIds(decIds);
  ArrayList<DecResearch> decResearchs=(ArrayList<DecResearch>)decResearchDao.getListDecResearchByDeclarationIds(decIds);
  ArrayList<DecMonograph> decMonographList=(ArrayList<DecMonograph>)decMonographDao.getListDecMonographByDeclarationIds(decIds);
  ArrayList<DecPublishReward> decPublishRewardList=(ArrayList<DecPublishReward>)decPublishRewardDao.getListDecPublishRewardByDeclarationIds(decIds);
  ArrayList<DecSci> decSciList=(ArrayList<DecSci>)decSciDao.getListDecSciByDeclarationIds(decIds);
  ArrayList<DecClinicalReward> decClinicalRewardList=(ArrayList<DecClinicalReward>)decClinicalRewardDao.getListDecClinicalRewardByDeclarationIds(decIds);
  ArrayList<DecAcadeReward> decAcadeRewardList=(ArrayList<DecAcadeReward>)decAcadeRewardDao.getListDecAcadeRewardByDeclarationIds(decIds);
  ArrayList<DecExtensionVO> decExtensionVOs=(ArrayList<DecExtensionVO>)decExtensionDao.getListDecExtensionVOByDeclarationIds(decIds);
  ArrayList<DecIntention> decIntentions=(ArrayList<DecIntention>)decIntentionDao.getDecIntentionByDeclarationIds(decIds);
  for (  DeclarationOrDisplayVO declarationOrDisplayVO : declarationOrDisplayVOs) {
    String strOnlineProgress=""String_Node_Str"";
    String strOfflineProgress=""String_Node_Str"";
    String sex=""String_Node_Str"";
    String idtype=""String_Node_Str"";
    String degree=""String_Node_Str"";
switch (declarationOrDisplayVO.getIdtype()) {
case 0:
      idtype=""String_Node_Str"";
    break;
case 1:
  idtype=""String_Node_Str"";
break;
case 2:
idtype=""String_Node_Str"";
break;
default :
idtype=""String_Node_Str"";
break;
}
switch (declarationOrDisplayVO.getDegree()) {
case 0:
degree=""String_Node_Str"";
break;
case 1:
degree=""String_Node_Str"";
break;
case 2:
degree=""String_Node_Str"";
break;
case 3:
degree=""String_Node_Str"";
break;
case 4:
degree=""String_Node_Str"";
break;
default :
degree=""String_Node_Str"";
break;
}
switch (declarationOrDisplayVO.getOnlineProgress()) {
case 0:
strOnlineProgress=""String_Node_Str"";
break;
case 1:
strOnlineProgress=""String_Node_Str"";
break;
case 2:
strOnlineProgress=""String_Node_Str"";
break;
case 3:
strOnlineProgress=""String_Node_Str"";
break;
default :
strOnlineProgress=""String_Node_Str"";
break;
}
switch (declarationOrDisplayVO.getSex()) {
case 0:
sex=""String_Node_Str"";
break;
case 1:
sex=""String_Node_Str"";
break;
case 2:
sex=""String_Node_Str"";
break;
default :
sex=""String_Node_Str"";
break;
}
switch (declarationOrDisplayVO.getOfflineProgress()) {
case 0:
strOfflineProgress=""String_Node_Str"";
break;
case 1:
strOfflineProgress=""String_Node_Str"";
break;
case 2:
strOfflineProgress=""String_Node_Str"";
break;
default :
strOfflineProgress=""String_Node_Str"";
break;
}
String birthday=""String_Node_Str"";
if (null != declarationOrDisplayVO.getBirthday()) {
birthday=DateUtil.date2Str(declarationOrDisplayVO.getBirthday(),""String_Node_Str"");
}
if (null == declarationOrDisplayVO.getPosition() || ""String_Node_Str"".equals(declarationOrDisplayVO.getPosition())) {
declarationOrDisplayVO.setPosition(""String_Node_Str"");
}
if (StringUtil.isEmpty(declarationOrDisplayVO.getTextbookName())) {
declarationOrDisplayVO.setTextbookName(""String_Node_Str"");
}
if (StringUtil.isEmpty(declarationOrDisplayVO.getPresetPosition())) {
declarationOrDisplayVO.setPresetPosition(""String_Node_Str"");
}
List<DecEduExp> decEduExp=new ArrayList<>();
for (DecEduExp exp : decEduExps) {
if (exp.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decEduExp.add(exp);
}
}
List<DecWorkExp> decWorkExp=new ArrayList<>();
for (DecWorkExp workExp : decWorkExps) {
if (workExp.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decWorkExp.add(workExp);
}
}
List<DecTeachExp> decTeachExp=new ArrayList<>();
for (DecTeachExp teachExp : decTeachExps) {
if (teachExp.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decTeachExp.add(teachExp);
}
}
List<DecAcade> decAcade=new ArrayList<>();
for (DecAcade acade : decAcades) {
if (acade.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decAcade.add(acade);
}
}
DecAchievement decAchievement=new DecAchievement();
for (DecAchievement achievement : decAchievements) {
if (achievement.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decAchievement=achievement;
break;
}
}
List<DecLastPosition> decLastPosition=new ArrayList<>();
for (DecLastPosition lastPosition : decLastPositions) {
if (lastPosition.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decLastPosition.add(lastPosition);
}
}
List<DecCourseConstruction> decCourseConstruction=new ArrayList<>();
for (DecCourseConstruction construction : decCourseConstructions) {
if (construction.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decCourseConstruction.add(construction);
}
}
List<DecNationalPlan> decNationalPlan=new ArrayList<>();
for (DecNationalPlan plan : decNationalPlans) {
if (plan.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decNationalPlan.add(plan);
}
}
List<DecTextbookPmph> decTextbookPmph=new ArrayList<>();
for (DecTextbookPmph textbookPmph : decTextbookPmphs) {
if (textbookPmph.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decTextbookPmph.add(textbookPmph);
}
}
List<DecTextbook> decTextbook=new ArrayList<>();
for (DecTextbook textbook : decTextbooks) {
if (textbook.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decTextbook.add(textbook);
}
}
DecMoocDigital decMoocDigital=new DecMoocDigital();
for (DecMoocDigital moocDigital : decMoocDigitals) {
if (moocDigital.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decMoocDigital=moocDigital;
break;
}
}
List<DecResearch> decResearch=new ArrayList<>();
for (DecResearch research : decResearchs) {
if (research.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decResearch.add(research);
}
}
List<DecMonograph> monographs=new ArrayList<>();
for (DecMonograph monograph : decMonographList) {
if (monograph.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
monographs.add(monograph);
}
}
List<DecPublishReward> publishRewards=new ArrayList<>();
for (DecPublishReward publishReward : decPublishRewardList) {
if (publishReward.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
publishRewards.add(publishReward);
}
}
List<DecSci> scis=new ArrayList<>();
for (DecSci sci : decSciList) {
if (sci.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
scis.add(sci);
}
}
List<DecClinicalReward> clinicalRewards=new ArrayList<>();
for (DecClinicalReward clinicalReward : decClinicalRewardList) {
if (clinicalReward.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
clinicalRewards.add(clinicalReward);
}
}
List<DecAcadeReward> acadeRewards=new ArrayList<>();
for (DecAcadeReward acadeReward : decAcadeRewardList) {
if (acadeReward.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
acadeRewards.add(acadeReward);
}
}
DecIntention decIntention=new DecIntention();
for (DecIntention intention : decIntentions) {
if (intention.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
decIntention=intention;
break;
}
}
List<DecExtensionVO> extensionVOs=new ArrayList<>();
for (DecExtensionVO extensionVO : decExtensionVOs) {
if (extensionVO.getDeclarationId().equals(declarationOrDisplayVO.getId())) {
extensionVOs.add(extensionVO);
}
}
DeclarationEtcBO declarationEtcBO=new DeclarationEtcBO(declarationOrDisplayVO.getTextbookName(),declarationOrDisplayVO.getPresetPosition(),declarationOrDisplayVO.getRealname(),declarationOrDisplayVO.getUsername(),sex,birthday,declarationOrDisplayVO.getExperience(),declarationOrDisplayVO.getOrgName(),declarationOrDisplayVO.getPosition(),declarationOrDisplayVO.getTitle(),declarationOrDisplayVO.getAddress(),declarationOrDisplayVO.getPostcode(),declarationOrDisplayVO.getTelephone(),declarationOrDisplayVO.getFax(),declarationOrDisplayVO.getHandphone(),degree,declarationOrDisplayVO.getEmail(),idtype,declarationOrDisplayVO.getIdcard(),declarationOrDisplayVO.getExpertise(),declarationOrDisplayVO.getIsDispensed(),declarationOrDisplayVO.getIsUtec(),strOnlineProgress,strOfflineProgress,declarationOrDisplayVO.getOrgNameOne(),(ArrayList<DecEduExp>)decEduExp,(ArrayList<DecWorkExp>)decWorkExp,(ArrayList<DecTeachExp>)decTeachExp,decAchievement,(ArrayList<DecAcade>)decAcade,(ArrayList<DecLastPosition>)decLastPosition,(ArrayList<DecCourseConstruction>)decCourseConstruction,(ArrayList<DecNationalPlan>)decNationalPlan,(ArrayList<DecTextbookPmph>)decTextbookPmph,decMoocDigital,(ArrayList<DecTextbook>)decTextbook,(ArrayList<DecResearch>)decResearch,(ArrayList<DecMonograph>)monographs,(ArrayList<DecPublishReward>)publishRewards,(ArrayList<DecSci>)scis,(ArrayList<DecClinicalReward>)clinicalRewards,(ArrayList<DecAcadeReward>)acadeRewards,(ArrayList<DecExtensionVO>)extensionVOs,decIntention);
declarationEtcBOs.add(declarationEtcBO);
}
return declarationEtcBOs;
}"
39937,"private Sheet generateDeclarationEtcBOHeader(List<MaterialExtension> extensions,Sheet sheet){
  Field[] fields=DeclarationEtcBO.class.getDeclaredFields();
  Row r1=sheet.createRow(0);
  Row r2=sheet.createRow(1);
  Cell numcell=r1.createCell(0);
  numcell.setCellValue(""String_Node_Str"");
  CellRangeAddress region=new CellRangeAddress(0,1,0,0);
  sheet.addMergedRegion(region);
  int count=1;
  for (  Field field : fields) {
    field.setAccessible(true);
    if (field.isAnnotationPresent(ExcelHeader.class)) {
      ExcelHeader excelHeader=(ExcelHeader)field.getAnnotation(ExcelHeader.class);
      String headerName=excelHeader.header();
      if (StringUtil.notEmpty(headerName)) {
switch (headerName) {
case ""String_Node_Str"":
{
            Cell r1cell=r1.createCell(count);
            r1cell.setCellValue(headerName);
            region=new CellRangeAddress(0,0,count,count + 3);
            sheet.addMergedRegion(region);
            Cell r2cell=r2.createCell(count);
            r2cell.setCellValue(""String_Node_Str"");
            sheet.setColumnWidth(count,5 * 512);
            count++;
            r2cell=r2.createCell(count);
            r2cell.setCellValue(""String_Node_Str"");
            sheet.setColumnWidth(count,5 * 512);
            count++;
            r2cell=r2.createCell(count);
            r2cell.setCellValue(""String_Node_Str"");
            sheet.setColumnWidth(count,5 * 512);
            count++;
            r2cell=r2.createCell(count);
            r2cell.setCellValue(""String_Node_Str"");
            sheet.setColumnWidth(count,3 * 512);
            count++;
            break;
          }
case ""String_Node_Str"":
{
          Cell r1cell=r1.createCell(count);
          r1cell.setCellValue(headerName);
          region=new CellRangeAddress(0,0,count,count + 2);
          sheet.addMergedRegion(region);
          Cell r2cell=r2.createCell(count);
          r2cell.setCellValue(""String_Node_Str"");
          sheet.setColumnWidth(count,5 * 512);
          count++;
          r2cell=r2.createCell(count);
          r2cell.setCellValue(""String_Node_Str"");
          sheet.setColumnWidth(count,5 * 512);
          count++;
          r2cell=r2.createCell(count);
          r2cell.setCellValue(""String_Node_Str"");
          sheet.setColumnWidth(count,3 * 512);
          count++;
          break;
        }
case ""String_Node_Str"":
{
        Cell r1cell=r1.createCell(count);
        r1cell.setCellValue(headerName);
        region=new CellRangeAddress(0,0,count,count + 2);
        sheet.addMergedRegion(region);
        Cell r2cell=r2.createCell(count);
        r2cell.setCellValue(""String_Node_Str"");
        sheet.setColumnWidth(count,5 * 512);
        count++;
        r2cell=r2.createCell(count);
        r2cell.setCellValue(""String_Node_Str"");
        sheet.setColumnWidth(count,5 * 512);
        count++;
        r2cell=r2.createCell(count);
        r2cell.setCellValue(""String_Node_Str"");
        sheet.setColumnWidth(count,5 * 512);
        count++;
        break;
      }
case ""String_Node_Str"":
{
      Cell r1cell=r1.createCell(count);
      r1cell.setCellValue(headerName);
      region=new CellRangeAddress(0,0,count,count + 2);
      sheet.addMergedRegion(region);
      Cell r2cell=r2.createCell(count);
      r2cell.setCellValue(""String_Node_Str"");
      sheet.setColumnWidth(count,7 * 512);
      count++;
      r2cell=r2.createCell(count);
      r2cell.setCellValue(""String_Node_Str"");
      sheet.setColumnWidth(count,3 * 512);
      count++;
      r2cell=r2.createCell(count);
      r2cell.setCellValue(""String_Node_Str"");
      sheet.setColumnWidth(count,3 * 512);
      count++;
      break;
    }
case ""String_Node_Str"":
{
    Cell r1cell=r1.createCell(count);
    r1cell.setCellValue(headerName);
    region=new CellRangeAddress(0,0,count,count + 1);
    sheet.addMergedRegion(region);
    Cell r2cell=r2.createCell(count);
    r2cell.setCellValue(""String_Node_Str"");
    sheet.setColumnWidth(count,5 * 512);
    count++;
    r2cell=r2.createCell(count);
    r2cell.setCellValue(""String_Node_Str"");
    sheet.setColumnWidth(count,5 * 512);
    count++;
    break;
  }
case ""String_Node_Str"":
{
  Cell r1cell=r1.createCell(count);
  r1cell.setCellValue(headerName);
  region=new CellRangeAddress(0,0,count,count + 2);
  sheet.addMergedRegion(region);
  Cell r2cell=r2.createCell(count);
  r2cell.setCellValue(""String_Node_Str"");
  sheet.setColumnWidth(count,5 * 512);
  count++;
  r2cell=r2.createCell(count);
  r2cell.setCellValue(""String_Node_Str"");
  sheet.setColumnWidth(count,5 * 512);
  count++;
  r2cell=r2.createCell(count);
  r2cell.setCellValue(""String_Node_Str"");
  sheet.setColumnWidth(count,5 * 512);
  count++;
  break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 4);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,3 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 5);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,3 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,4 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 4);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,7 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 3);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,9 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,3 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
if (extensions == null || extensions.isEmpty()) {
break;
}
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
if (extensions.size() > 1) {
region=new CellRangeAddress(0,0,count,count + extensions.size() - 1);
sheet.addMergedRegion(region);
}
for (MaterialExtension extension : extensions) {
Cell cell=r2.createCell(count);
String extensionName=extension.getExtensionName() == null ? ""String_Node_Str"" : extension.getExtensionName();
cell.setCellValue(extensionName);
int length=extension.getExtensionName().length() > 10 ? 10 : extension.getExtensionName().length();
sheet.setColumnWidth(count,length * 512);
count++;
}
break;
}
default :
Cell cell=r1.createCell(count);
sheet.setColumnWidth(count,(headerName.length() + 1) * 512);
cell.setCellValue(headerName);
region=new CellRangeAddress(0,1,count,count);
sheet.addMergedRegion(region);
count++;
break;
}
}
}
}
return sheet;
}","private Sheet generateDeclarationEtcBOHeader(List<MaterialExtension> extensions,Sheet sheet){
  Field[] fields=DeclarationEtcBO.class.getDeclaredFields();
  Row r1=sheet.createRow(0);
  Row r2=sheet.createRow(1);
  Cell numcell=r1.createCell(0);
  numcell.setCellValue(""String_Node_Str"");
  CellRangeAddress region=new CellRangeAddress(0,1,0,0);
  sheet.addMergedRegion(region);
  int count=1;
  for (  Field field : fields) {
    field.setAccessible(true);
    if (field.isAnnotationPresent(ExcelHeader.class)) {
      ExcelHeader excelHeader=(ExcelHeader)field.getAnnotation(ExcelHeader.class);
      String headerName=excelHeader.header();
      if (StringUtil.notEmpty(headerName)) {
switch (headerName) {
case ""String_Node_Str"":
{
            Cell r1cell=r1.createCell(count);
            r1cell.setCellValue(headerName);
            region=new CellRangeAddress(0,0,count,count + 3);
            sheet.addMergedRegion(region);
            Cell r2cell=r2.createCell(count);
            r2cell.setCellValue(""String_Node_Str"");
            sheet.setColumnWidth(count,5 * 512);
            count++;
            r2cell=r2.createCell(count);
            r2cell.setCellValue(""String_Node_Str"");
            sheet.setColumnWidth(count,5 * 512);
            count++;
            r2cell=r2.createCell(count);
            r2cell.setCellValue(""String_Node_Str"");
            sheet.setColumnWidth(count,5 * 512);
            count++;
            r2cell=r2.createCell(count);
            r2cell.setCellValue(""String_Node_Str"");
            sheet.setColumnWidth(count,3 * 512);
            count++;
            break;
          }
case ""String_Node_Str"":
{
          Cell r1cell=r1.createCell(count);
          r1cell.setCellValue(headerName);
          region=new CellRangeAddress(0,0,count,count + 2);
          sheet.addMergedRegion(region);
          Cell r2cell=r2.createCell(count);
          r2cell.setCellValue(""String_Node_Str"");
          sheet.setColumnWidth(count,5 * 512);
          count++;
          r2cell=r2.createCell(count);
          r2cell.setCellValue(""String_Node_Str"");
          sheet.setColumnWidth(count,5 * 512);
          count++;
          r2cell=r2.createCell(count);
          r2cell.setCellValue(""String_Node_Str"");
          sheet.setColumnWidth(count,3 * 512);
          count++;
          break;
        }
case ""String_Node_Str"":
{
        Cell r1cell=r1.createCell(count);
        r1cell.setCellValue(headerName);
        region=new CellRangeAddress(0,0,count,count + 2);
        sheet.addMergedRegion(region);
        Cell r2cell=r2.createCell(count);
        r2cell.setCellValue(""String_Node_Str"");
        sheet.setColumnWidth(count,5 * 512);
        count++;
        r2cell=r2.createCell(count);
        r2cell.setCellValue(""String_Node_Str"");
        sheet.setColumnWidth(count,5 * 512);
        count++;
        r2cell=r2.createCell(count);
        r2cell.setCellValue(""String_Node_Str"");
        sheet.setColumnWidth(count,5 * 512);
        count++;
        break;
      }
case ""String_Node_Str"":
{
      Cell r1cell=r1.createCell(count);
      r2.createCell(count);
      r1cell.setCellValue(headerName);
      region=new CellRangeAddress(0,1,count,count);
      sheet.setColumnWidth(count,15 * 512);
      sheet.addMergedRegion(region);
      count++;
      break;
    }
case ""String_Node_Str"":
{
    Cell r1cell=r1.createCell(count);
    r1cell.setCellValue(headerName);
    region=new CellRangeAddress(0,0,count,count + 2);
    sheet.addMergedRegion(region);
    Cell r2cell=r2.createCell(count);
    r2cell.setCellValue(""String_Node_Str"");
    sheet.setColumnWidth(count,7 * 512);
    count++;
    r2cell=r2.createCell(count);
    r2cell.setCellValue(""String_Node_Str"");
    sheet.setColumnWidth(count,3 * 512);
    count++;
    r2cell=r2.createCell(count);
    r2cell.setCellValue(""String_Node_Str"");
    sheet.setColumnWidth(count,3 * 512);
    count++;
    break;
  }
case ""String_Node_Str"":
{
  Cell r1cell=r1.createCell(count);
  r1cell.setCellValue(headerName);
  region=new CellRangeAddress(0,0,count,count + 1);
  sheet.addMergedRegion(region);
  Cell r2cell=r2.createCell(count);
  r2cell.setCellValue(""String_Node_Str"");
  sheet.setColumnWidth(count,5 * 512);
  count++;
  r2cell=r2.createCell(count);
  r2cell.setCellValue(""String_Node_Str"");
  sheet.setColumnWidth(count,5 * 512);
  count++;
  break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 4);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,3 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 5);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,3 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,4 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r2.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,1,count,count);
sheet.setColumnWidth(count,15 * 512);
sheet.addMergedRegion(region);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 4);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,7 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 3);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,9 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,3 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r2.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,1,count,count);
sheet.setColumnWidth(count,15 * 512);
sheet.addMergedRegion(region);
count++;
break;
}
case ""String_Node_Str"":
{
if (extensions == null || extensions.isEmpty()) {
break;
}
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
if (extensions.size() > 1) {
region=new CellRangeAddress(0,0,count,count + extensions.size() - 1);
sheet.addMergedRegion(region);
}
for (MaterialExtension extension : extensions) {
Cell cell=r2.createCell(count);
String extensionName=extension.getExtensionName() == null ? ""String_Node_Str"" : extension.getExtensionName();
cell.setCellValue(extensionName);
int length=extension.getExtensionName().length() > 10 ? 10 : extension.getExtensionName().length();
sheet.setColumnWidth(count,length * 512);
count++;
}
break;
}
default :
Cell cell=r1.createCell(count);
r2.createCell(count);
sheet.setColumnWidth(count,(headerName.length() + 1) * 512);
cell.setCellValue(headerName);
region=new CellRangeAddress(0,1,count,count);
sheet.addMergedRegion(region);
count++;
break;
}
}
}
}
return sheet;
}"
39938,"private Workbook clearColumns(Workbook workbook,Material material){
  int startColumn=26;
  if (!material.getIsEduExpUsed()) {
    for (int i=0; i < 4; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=4;
  }
  if (!material.getIsWorkExpUsed()) {
    for (int i=0; i < 3; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=3;
  }
  if (!material.getIsTeachExpUsed()) {
    for (int i=0; i < 3; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=3;
  }
  if (!material.getIsAcadeUsed()) {
    for (int i=0; i < 3; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=3;
  }
  if (!material.getIsLastPositionUsed()) {
    for (int i=0; i < 2; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=2;
  }
  if (!material.getIsCourseUsed()) {
    for (int i=0; i < 3; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=3;
  }
  if (!material.getIsNationalPlanUsed()) {
    for (int i=0; i < 3; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=3;
  }
  if (!material.getIsPmphTextbookUsed()) {
    for (int i=0; i < 5; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=5;
  }
  if (!material.getIsTextbookUsed()) {
    for (int i=0; i < 6; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=6;
  }
  if (!material.getIsResearchUsed()) {
    for (int i=0; i < 3; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=3;
  }
  if (!material.getIsMonographUsed()) {
    for (int i=0; i < 5; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=5;
  }
  if (!material.getIsPublishRewardUsed()) {
    for (int i=0; i < 3; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=3;
  }
  if (!material.getIsSciUsed()) {
    for (int i=0; i < 4; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=4;
  }
  if (!material.getIsClinicalRewardUsed()) {
    for (int i=0; i < 3; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=3;
  }
  if (!material.getIsAcadeRewardUsed()) {
    for (int i=0; i < 3; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=3;
  }
  return workbook;
}","private Workbook clearColumns(Workbook workbook,Material material){
  int startColumn=26;
  if (!material.getIsEduExpUsed()) {
    for (int i=0; i < 4; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=4;
  }
  if (!material.getIsWorkExpUsed()) {
    for (int i=0; i < 3; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=3;
  }
  if (!material.getIsTeachExpUsed()) {
    for (int i=0; i < 3; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=3;
  }
  if (!material.getIsAchievementUsed()) {
    workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
  }
 else {
    startColumn++;
  }
  if (!material.getIsAcadeUsed()) {
    for (int i=0; i < 3; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=3;
  }
  if (!material.getIsLastPositionUsed()) {
    for (int i=0; i < 2; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=2;
  }
  if (!material.getIsCourseUsed()) {
    for (int i=0; i < 3; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=3;
  }
  if (!material.getIsNationalPlanUsed()) {
    for (int i=0; i < 3; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=3;
  }
  if (!material.getIsPmphTextbookUsed()) {
    for (int i=0; i < 5; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=5;
  }
  if (!material.getIsTextbookUsed()) {
    for (int i=0; i < 6; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=6;
  }
  if (!material.getIsMoocDigitalUsed()) {
    workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
  }
 else {
    startColumn++;
  }
  if (!material.getIsResearchUsed()) {
    for (int i=0; i < 3; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=3;
  }
  if (!material.getIsMonographUsed()) {
    for (int i=0; i < 5; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=5;
  }
  if (!material.getIsPublishRewardUsed()) {
    for (int i=0; i < 3; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=3;
  }
  if (!material.getIsSciUsed()) {
    for (int i=0; i < 4; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=4;
  }
  if (!material.getIsClinicalRewardUsed()) {
    for (int i=0; i < 3; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=3;
  }
  if (!material.getIsAcadeRewardUsed()) {
    for (int i=0; i < 3; i++) {
      workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
    }
  }
 else {
    startColumn+=3;
  }
  if (!material.getIsIntentionUsed()) {
    workbook.getSheetAt(0).setColumnHidden(startColumn++,true);
  }
 else {
    startColumn++;
  }
  return workbook;
}"
39939,"/** 
 * 根据业务对象（包含子集合的BO）集合创建工作簿
 * @param material 申报表所属教材对象
 * @param extensions 教材扩展项集合
 * @param dataSource 业务对象（BO）集合
 * @param sheetName 要生成的Excel表名（非文件名）
 * @return Excel工作簿
 */
public Workbook fromDeclarationEtcBOList(Material material,List<MaterialExtension> extensions,List<DeclarationEtcBO> dataSource,String sheetName) throws CheckedServiceException, IllegalArgumentException, IllegalAccessException {
  if (null == dataSource || dataSource.isEmpty()) {
    throw new CheckedServiceException(CheckedExceptionBusiness.MATERIAL,CheckedExceptionResult.NULL_PARAM,""String_Node_Str"");
  }
  Workbook workbook=new HSSFWorkbook();
  Sheet sheet=workbook.createSheet(sheetName);
  sheet=generateDeclarationEtcBOHeader(extensions,sheet);
  headerStyleSetup(workbook,2);
  Field[] fields=dataSource.get(0).getClass().getDeclaredFields();
  int rowCount=2;
  ColumnProperties columnProperties=new ColumnProperties(1,new int[sheet.getRow(1).getLastCellNum()]);
  Iterator iterator=dataSource.iterator();
  while (iterator.hasNext()) {
    Object object=iterator.next();
    Row row=sheet.createRow(rowCount);
    row.createCell(0).setCellValue(String.valueOf(rowCount - 1));
    columnProperties.setMaxElement(0,2);
    columnProperties.setColCount(1);
    for (    Field field : fields) {
      field.setAccessible(true);
      if (field.isAnnotationPresent(ExcelHeader.class)) {
        ExcelHeader excelHeader=(ExcelHeader)field.getAnnotation(ExcelHeader.class);
        String headerName=excelHeader.header();
        if (StringUtil.notEmpty(headerName)) {
switch (headerName) {
case ""String_Node_Str"":
{
              List<DecEduExp> list=(List<DecEduExp>)field.get(object);
              columnProperties=fillDecEduExpData(list,row,columnProperties);
              break;
            }
case ""String_Node_Str"":
{
            List<DecWorkExp> list=(List<DecWorkExp>)field.get(object);
            columnProperties=fillDecWorkExpData(list,row,columnProperties);
            break;
          }
case ""String_Node_Str"":
{
          List<DecTeachExp> list=(List<DecTeachExp>)field.get(object);
          columnProperties=fillDecTeachExpData(list,row,columnProperties);
          break;
        }
case ""String_Node_Str"":
{
        List<DecAcade> list=(List<DecAcade>)field.get(object);
        columnProperties=fillDecAcadeData(list,row,columnProperties);
        break;
      }
case ""String_Node_Str"":
{
      List<DecLastPosition> list=(List<DecLastPosition>)field.get(object);
      columnProperties=fillDecLastPositionData(list,row,columnProperties);
      break;
    }
case ""String_Node_Str"":
{
    List<DecCourseConstruction> list=(List<DecCourseConstruction>)field.get(object);
    columnProperties=fillDecCourseConstructionData(list,row,columnProperties);
    break;
  }
case ""String_Node_Str"":
{
  List<DecNationalPlan> list=(List<DecNationalPlan>)field.get(object);
  columnProperties=fillDecNationalPlanData(list,row,columnProperties);
  break;
}
case ""String_Node_Str"":
{
List<DecTextbookPmph> list=(List<DecTextbookPmph>)field.get(object);
columnProperties=fillDecTextbookPmphData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecTextbook> list=(List<DecTextbook>)field.get(object);
columnProperties=fillDecTextbookData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecResearch> list=(List<DecResearch>)field.get(object);
columnProperties=fillDecResearchData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecMonograph> list=(List<DecMonograph>)field.get(object);
columnProperties=fillDecMonographData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecPublishReward> list=(List<DecPublishReward>)field.get(object);
columnProperties=fillDecPublishRewardData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecSci> list=(List<DecSci>)field.get(object);
columnProperties=fillDecSciData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecClinicalReward> list=(List<DecClinicalReward>)field.get(object);
columnProperties=fillDecClinicalRewardData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecAcadeReward> list=(List<DecAcadeReward>)field.get(object);
columnProperties=fillDecAcadeRewardData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
if (extensions == null || extensions.isEmpty()) {
break;
}
List<DecExtensionVO> list=(List<DecExtensionVO>)field.get(object);
columnProperties=fillDecExtensionVODataPlus(extensions,list,row,columnProperties);
break;
}
default :
Object o=field.get(object);
Cell cell=row.createCell(columnProperties.getColCount());
if (null != o) {
String value=o.toString();
cell.setCellValue(value);
if (value.length() > columnProperties.getCurrentMaxElement()) {
columnProperties.setCurrentMaxElement(value.length());
}
}
columnProperties.setColCount(columnProperties.getColCount() + 1);
break;
}
}
}
}
rowCount++;
}
workbook=dataStyleSetup(workbook,2,rowCount,columnProperties);
return clearColumns(workbook,material);
}","/** 
 * 根据业务对象（包含子集合的BO）集合创建工作簿
 * @param material 申报表所属教材对象
 * @param extensions 教材扩展项集合
 * @param dataSource 业务对象（BO）集合
 * @param sheetName 要生成的Excel表名（非文件名）
 * @return Excel工作簿
 */
public Workbook fromDeclarationEtcBOList(Material material,List<MaterialExtension> extensions,List<DeclarationEtcBO> dataSource,String sheetName) throws CheckedServiceException, IllegalArgumentException, IllegalAccessException {
  if (null == dataSource || dataSource.isEmpty()) {
    throw new CheckedServiceException(CheckedExceptionBusiness.MATERIAL,CheckedExceptionResult.NULL_PARAM,""String_Node_Str"");
  }
  Workbook workbook=new HSSFWorkbook();
  Sheet sheet=workbook.createSheet(sheetName);
  sheet=generateDeclarationEtcBOHeader(extensions,sheet);
  headerStyleSetup(workbook,2);
  Field[] fields=dataSource.get(0).getClass().getDeclaredFields();
  int rowCount=2;
  ColumnProperties columnProperties=new ColumnProperties(1,new int[sheet.getRow(1).getLastCellNum()]);
  Iterator iterator=dataSource.iterator();
  while (iterator.hasNext()) {
    Object object=iterator.next();
    Row row=sheet.createRow(rowCount);
    row.createCell(0).setCellValue(String.valueOf(rowCount - 1));
    columnProperties.setMaxElement(0,2);
    columnProperties.setColCount(1);
    for (    Field field : fields) {
      field.setAccessible(true);
      if (field.isAnnotationPresent(ExcelHeader.class)) {
        ExcelHeader excelHeader=(ExcelHeader)field.getAnnotation(ExcelHeader.class);
        String headerName=excelHeader.header();
        if (StringUtil.notEmpty(headerName)) {
switch (headerName) {
case ""String_Node_Str"":
{
              List<DecEduExp> list=(List<DecEduExp>)field.get(object);
              columnProperties=fillDecEduExpData(list,row,columnProperties);
              break;
            }
case ""String_Node_Str"":
{
            List<DecWorkExp> list=(List<DecWorkExp>)field.get(object);
            columnProperties=fillDecWorkExpData(list,row,columnProperties);
            break;
          }
case ""String_Node_Str"":
{
          List<DecTeachExp> list=(List<DecTeachExp>)field.get(object);
          columnProperties=fillDecTeachExpData(list,row,columnProperties);
          break;
        }
case ""String_Node_Str"":
{
        DecAchievement decAchievement=(DecAchievement)field.get(object);
        columnProperties=fillDecAchievementData(decAchievement,row,columnProperties);
        break;
      }
case ""String_Node_Str"":
{
      List<DecAcade> list=(List<DecAcade>)field.get(object);
      columnProperties=fillDecAcadeData(list,row,columnProperties);
      break;
    }
case ""String_Node_Str"":
{
    List<DecLastPosition> list=(List<DecLastPosition>)field.get(object);
    columnProperties=fillDecLastPositionData(list,row,columnProperties);
    break;
  }
case ""String_Node_Str"":
{
  List<DecCourseConstruction> list=(List<DecCourseConstruction>)field.get(object);
  columnProperties=fillDecCourseConstructionData(list,row,columnProperties);
  break;
}
case ""String_Node_Str"":
{
List<DecNationalPlan> list=(List<DecNationalPlan>)field.get(object);
columnProperties=fillDecNationalPlanData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecTextbookPmph> list=(List<DecTextbookPmph>)field.get(object);
columnProperties=fillDecTextbookPmphData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecTextbook> list=(List<DecTextbook>)field.get(object);
columnProperties=fillDecTextbookData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
DecMoocDigital decMoocDigital=(DecMoocDigital)field.get(object);
columnProperties=fillDecMoocDigitalData(decMoocDigital,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecResearch> list=(List<DecResearch>)field.get(object);
columnProperties=fillDecResearchData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecMonograph> list=(List<DecMonograph>)field.get(object);
columnProperties=fillDecMonographData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecPublishReward> list=(List<DecPublishReward>)field.get(object);
columnProperties=fillDecPublishRewardData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecSci> list=(List<DecSci>)field.get(object);
columnProperties=fillDecSciData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecClinicalReward> list=(List<DecClinicalReward>)field.get(object);
columnProperties=fillDecClinicalRewardData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecAcadeReward> list=(List<DecAcadeReward>)field.get(object);
columnProperties=fillDecAcadeRewardData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
DecIntention decIntention=(DecIntention)field.get(object);
columnProperties=fillDecIntentionData(decIntention,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
if (extensions == null || extensions.isEmpty()) {
break;
}
List<DecExtensionVO> list=(List<DecExtensionVO>)field.get(object);
columnProperties=fillDecExtensionVODataPlus(extensions,list,row,columnProperties);
break;
}
default :
Object o=field.get(object);
Cell cell=row.createCell(columnProperties.getColCount());
if (null != o) {
String value=o.toString();
cell.setCellValue(value);
if (value.length() > columnProperties.getCurrentMaxElement()) {
columnProperties.setCurrentMaxElement(value.length());
}
}
columnProperties.setColCount(columnProperties.getColCount() + 1);
break;
}
}
}
}
rowCount++;
}
workbook=dataStyleSetup(workbook,2,rowCount,columnProperties);
return clearColumns(workbook,material);
}"
39940,"@Test @Ignore public void fromDeclarationEtcBOList() throws CheckedServiceException, FileNotFoundException, IOException, IllegalArgumentException, IllegalAccessException {
  Workbook workbook=excelHelper.fromDeclarationEtcBOList(materialService.getMaterialById(2L),materialExtensionService.getMaterialExtensionByMaterialId(2L),declarationService.declarationEtcBO(2L,null,null,null,null,null,null,null,null,null),""String_Node_Str"");
  String path=this.getClass().getResource(""String_Node_Str"").getPath().concat(""String_Node_Str"");
  FileOutputStream out=new FileOutputStream(path);
  workbook.write(out);
  out.flush();
  out.close();
}","@Test public void fromDeclarationEtcBOList() throws CheckedServiceException, FileNotFoundException, IOException, IllegalArgumentException, IllegalAccessException {
  Workbook workbook=excelHelper.fromDeclarationEtcBOList(materialService.getMaterialById(2L),materialExtensionService.getMaterialExtensionByMaterialId(2L),declarationService.declarationEtcBO(2L,null,null,null,null,null,null,null,null,null),""String_Node_Str"");
  String path=this.getClass().getResource(""String_Node_Str"").getPath().concat(""String_Node_Str"");
  FileOutputStream out=new FileOutputStream(path);
  workbook.write(out);
  out.flush();
  out.close();
}"
39941,"private Sheet generateDeclarationEtcBOHeader(List<MaterialExtension> extensions,Sheet sheet){
  Field[] fields=DeclarationEtcBO.class.getDeclaredFields();
  Row r1=sheet.createRow(0);
  Row r2=sheet.createRow(1);
  Cell numcell=r1.createCell(0);
  numcell.setCellValue(""String_Node_Str"");
  CellRangeAddress region=new CellRangeAddress(0,1,0,0);
  sheet.addMergedRegion(region);
  int count=1;
  for (  Field field : fields) {
    field.setAccessible(true);
    if (field.isAnnotationPresent(ExcelHeader.class)) {
      ExcelHeader excelHeader=(ExcelHeader)field.getAnnotation(ExcelHeader.class);
      String headerName=excelHeader.header();
      if (StringUtil.notEmpty(headerName)) {
switch (headerName) {
case ""String_Node_Str"":
{
            Cell r1cell=r1.createCell(count);
            r1cell.setCellValue(headerName);
            region=new CellRangeAddress(0,0,count,count + 3);
            sheet.addMergedRegion(region);
            Cell r2cell=r2.createCell(count);
            r2cell.setCellValue(""String_Node_Str"");
            sheet.setColumnWidth(count,5 * 512);
            count++;
            r2cell=r2.createCell(count);
            r2cell.setCellValue(""String_Node_Str"");
            sheet.setColumnWidth(count,5 * 512);
            count++;
            r2cell=r2.createCell(count);
            r2cell.setCellValue(""String_Node_Str"");
            sheet.setColumnWidth(count,5 * 512);
            count++;
            r2cell=r2.createCell(count);
            r2cell.setCellValue(""String_Node_Str"");
            sheet.setColumnWidth(count,3 * 512);
            count++;
            break;
          }
case ""String_Node_Str"":
{
          Cell r1cell=r1.createCell(count);
          r1cell.setCellValue(headerName);
          region=new CellRangeAddress(0,0,count,count + 2);
          sheet.addMergedRegion(region);
          Cell r2cell=r2.createCell(count);
          r2cell.setCellValue(""String_Node_Str"");
          sheet.setColumnWidth(count,5 * 512);
          count++;
          r2cell=r2.createCell(count);
          r2cell.setCellValue(""String_Node_Str"");
          sheet.setColumnWidth(count,5 * 512);
          count++;
          r2cell=r2.createCell(count);
          r2cell.setCellValue(""String_Node_Str"");
          sheet.setColumnWidth(count,3 * 512);
          count++;
          break;
        }
case ""String_Node_Str"":
{
        Cell r1cell=r1.createCell(count);
        r1cell.setCellValue(headerName);
        region=new CellRangeAddress(0,0,count,count + 2);
        sheet.addMergedRegion(region);
        Cell r2cell=r2.createCell(count);
        r2cell.setCellValue(""String_Node_Str"");
        sheet.setColumnWidth(count,5 * 512);
        count++;
        r2cell=r2.createCell(count);
        r2cell.setCellValue(""String_Node_Str"");
        sheet.setColumnWidth(count,5 * 512);
        count++;
        r2cell=r2.createCell(count);
        r2cell.setCellValue(""String_Node_Str"");
        sheet.setColumnWidth(count,5 * 512);
        count++;
        break;
      }
case ""String_Node_Str"":
{
      Cell r1cell=r1.createCell(count);
      r1cell.setCellValue(headerName);
      region=new CellRangeAddress(0,0,count,count + 2);
      sheet.addMergedRegion(region);
      Cell r2cell=r2.createCell(count);
      r2cell.setCellValue(""String_Node_Str"");
      sheet.setColumnWidth(count,7 * 512);
      count++;
      r2cell=r2.createCell(count);
      r2cell.setCellValue(""String_Node_Str"");
      sheet.setColumnWidth(count,3 * 512);
      count++;
      r2cell=r2.createCell(count);
      r2cell.setCellValue(""String_Node_Str"");
      sheet.setColumnWidth(count,3 * 512);
      count++;
      break;
    }
case ""String_Node_Str"":
{
    Cell r1cell=r1.createCell(count);
    r1cell.setCellValue(headerName);
    region=new CellRangeAddress(0,0,count,count + 1);
    sheet.addMergedRegion(region);
    Cell r2cell=r2.createCell(count);
    r2cell.setCellValue(""String_Node_Str"");
    sheet.setColumnWidth(count,5 * 512);
    count++;
    r2cell=r2.createCell(count);
    r2cell.setCellValue(""String_Node_Str"");
    sheet.setColumnWidth(count,5 * 512);
    count++;
    break;
  }
case ""String_Node_Str"":
{
  Cell r1cell=r1.createCell(count);
  r1cell.setCellValue(headerName);
  region=new CellRangeAddress(0,0,count,count + 2);
  sheet.addMergedRegion(region);
  Cell r2cell=r2.createCell(count);
  r2cell.setCellValue(""String_Node_Str"");
  sheet.setColumnWidth(count,5 * 512);
  count++;
  r2cell=r2.createCell(count);
  r2cell.setCellValue(""String_Node_Str"");
  sheet.setColumnWidth(count,5 * 512);
  count++;
  r2cell=r2.createCell(count);
  r2cell.setCellValue(""String_Node_Str"");
  sheet.setColumnWidth(count,5 * 512);
  count++;
  break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 4);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,3 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 5);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,3 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,4 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 4);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,7 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 3);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,9 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,3 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
if (extensions == null || extensions.isEmpty()) {
break;
}
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + extensions.size());
sheet.addMergedRegion(region);
for (MaterialExtension extension : extensions) {
Cell cell=r2.createCell(count);
String extensionName=extension.getExtensionName() == null ? ""String_Node_Str"" : extension.getExtensionName();
cell.setCellValue(extensionName);
int length=extension.getExtensionName().length() > 10 ? 10 : extension.getExtensionName().length();
sheet.setColumnWidth(count,length * 512);
count++;
}
break;
}
default :
Cell cell=r1.createCell(count);
sheet.setColumnWidth(count,(headerName.length() + 1) * 512);
cell.setCellValue(headerName);
region=new CellRangeAddress(0,1,count,count);
sheet.addMergedRegion(region);
count++;
break;
}
}
}
}
return sheet;
}","private Sheet generateDeclarationEtcBOHeader(List<MaterialExtension> extensions,Sheet sheet){
  Field[] fields=DeclarationEtcBO.class.getDeclaredFields();
  Row r1=sheet.createRow(0);
  Row r2=sheet.createRow(1);
  Cell numcell=r1.createCell(0);
  numcell.setCellValue(""String_Node_Str"");
  CellRangeAddress region=new CellRangeAddress(0,1,0,0);
  sheet.addMergedRegion(region);
  int count=1;
  for (  Field field : fields) {
    field.setAccessible(true);
    if (field.isAnnotationPresent(ExcelHeader.class)) {
      ExcelHeader excelHeader=(ExcelHeader)field.getAnnotation(ExcelHeader.class);
      String headerName=excelHeader.header();
      if (StringUtil.notEmpty(headerName)) {
switch (headerName) {
case ""String_Node_Str"":
{
            Cell r1cell=r1.createCell(count);
            r1cell.setCellValue(headerName);
            region=new CellRangeAddress(0,0,count,count + 3);
            sheet.addMergedRegion(region);
            Cell r2cell=r2.createCell(count);
            r2cell.setCellValue(""String_Node_Str"");
            sheet.setColumnWidth(count,5 * 512);
            count++;
            r2cell=r2.createCell(count);
            r2cell.setCellValue(""String_Node_Str"");
            sheet.setColumnWidth(count,5 * 512);
            count++;
            r2cell=r2.createCell(count);
            r2cell.setCellValue(""String_Node_Str"");
            sheet.setColumnWidth(count,5 * 512);
            count++;
            r2cell=r2.createCell(count);
            r2cell.setCellValue(""String_Node_Str"");
            sheet.setColumnWidth(count,3 * 512);
            count++;
            break;
          }
case ""String_Node_Str"":
{
          Cell r1cell=r1.createCell(count);
          r1cell.setCellValue(headerName);
          region=new CellRangeAddress(0,0,count,count + 2);
          sheet.addMergedRegion(region);
          Cell r2cell=r2.createCell(count);
          r2cell.setCellValue(""String_Node_Str"");
          sheet.setColumnWidth(count,5 * 512);
          count++;
          r2cell=r2.createCell(count);
          r2cell.setCellValue(""String_Node_Str"");
          sheet.setColumnWidth(count,5 * 512);
          count++;
          r2cell=r2.createCell(count);
          r2cell.setCellValue(""String_Node_Str"");
          sheet.setColumnWidth(count,3 * 512);
          count++;
          break;
        }
case ""String_Node_Str"":
{
        Cell r1cell=r1.createCell(count);
        r1cell.setCellValue(headerName);
        region=new CellRangeAddress(0,0,count,count + 2);
        sheet.addMergedRegion(region);
        Cell r2cell=r2.createCell(count);
        r2cell.setCellValue(""String_Node_Str"");
        sheet.setColumnWidth(count,5 * 512);
        count++;
        r2cell=r2.createCell(count);
        r2cell.setCellValue(""String_Node_Str"");
        sheet.setColumnWidth(count,5 * 512);
        count++;
        r2cell=r2.createCell(count);
        r2cell.setCellValue(""String_Node_Str"");
        sheet.setColumnWidth(count,5 * 512);
        count++;
        break;
      }
case ""String_Node_Str"":
{
      Cell r1cell=r1.createCell(count);
      r1cell.setCellValue(headerName);
      region=new CellRangeAddress(0,0,count,count + 2);
      sheet.addMergedRegion(region);
      Cell r2cell=r2.createCell(count);
      r2cell.setCellValue(""String_Node_Str"");
      sheet.setColumnWidth(count,7 * 512);
      count++;
      r2cell=r2.createCell(count);
      r2cell.setCellValue(""String_Node_Str"");
      sheet.setColumnWidth(count,3 * 512);
      count++;
      r2cell=r2.createCell(count);
      r2cell.setCellValue(""String_Node_Str"");
      sheet.setColumnWidth(count,3 * 512);
      count++;
      break;
    }
case ""String_Node_Str"":
{
    Cell r1cell=r1.createCell(count);
    r1cell.setCellValue(headerName);
    region=new CellRangeAddress(0,0,count,count + 1);
    sheet.addMergedRegion(region);
    Cell r2cell=r2.createCell(count);
    r2cell.setCellValue(""String_Node_Str"");
    sheet.setColumnWidth(count,5 * 512);
    count++;
    r2cell=r2.createCell(count);
    r2cell.setCellValue(""String_Node_Str"");
    sheet.setColumnWidth(count,5 * 512);
    count++;
    break;
  }
case ""String_Node_Str"":
{
  Cell r1cell=r1.createCell(count);
  r1cell.setCellValue(headerName);
  region=new CellRangeAddress(0,0,count,count + 2);
  sheet.addMergedRegion(region);
  Cell r2cell=r2.createCell(count);
  r2cell.setCellValue(""String_Node_Str"");
  sheet.setColumnWidth(count,5 * 512);
  count++;
  r2cell=r2.createCell(count);
  r2cell.setCellValue(""String_Node_Str"");
  sheet.setColumnWidth(count,5 * 512);
  count++;
  r2cell=r2.createCell(count);
  r2cell.setCellValue(""String_Node_Str"");
  sheet.setColumnWidth(count,5 * 512);
  count++;
  break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 4);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,3 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 5);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,3 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,4 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 4);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,7 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 3);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,9 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,3 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
if (extensions == null || extensions.isEmpty()) {
break;
}
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
if (extensions.size() > 1) {
region=new CellRangeAddress(0,0,count,count + extensions.size() - 1);
sheet.addMergedRegion(region);
}
for (MaterialExtension extension : extensions) {
Cell cell=r2.createCell(count);
String extensionName=extension.getExtensionName() == null ? ""String_Node_Str"" : extension.getExtensionName();
cell.setCellValue(extensionName);
int length=extension.getExtensionName().length() > 10 ? 10 : extension.getExtensionName().length();
sheet.setColumnWidth(count,length * 512);
count++;
}
break;
}
default :
Cell cell=r1.createCell(count);
sheet.setColumnWidth(count,(headerName.length() + 1) * 512);
cell.setCellValue(headerName);
region=new CellRangeAddress(0,1,count,count);
sheet.addMergedRegion(region);
count++;
break;
}
}
}
}
return sheet;
}"
39942,"@Test public void fromDeclarationEtcBOList() throws CheckedServiceException, FileNotFoundException, IOException, IllegalArgumentException, IllegalAccessException {
  Workbook workbook=excelHelper.fromDeclarationEtcBOList(materialService.getMaterialById(2L),materialExtensionService.getMaterialExtensionByMaterialId(2L),declarationService.declarationEtcBO(2L,null,null,null,null,null,null,null,null,null),""String_Node_Str"");
  String path=this.getClass().getResource(""String_Node_Str"").getPath().concat(""String_Node_Str"");
  FileOutputStream out=new FileOutputStream(path);
  workbook.write(out);
  out.flush();
  out.close();
}","@Test @Ignore public void fromDeclarationEtcBOList() throws CheckedServiceException, FileNotFoundException, IOException, IllegalArgumentException, IllegalAccessException {
  Workbook workbook=excelHelper.fromDeclarationEtcBOList(materialService.getMaterialById(2L),materialExtensionService.getMaterialExtensionByMaterialId(2L),declarationService.declarationEtcBO(2L,null,null,null,null,null,null,null,null,null),""String_Node_Str"");
  String path=this.getClass().getResource(""String_Node_Str"").getPath().concat(""String_Node_Str"");
  FileOutputStream out=new FileOutputStream(path);
  workbook.write(out);
  out.flush();
  out.close();
}"
39943,"/** 
 * 审核视频
 * @introduction
 * @author Mryang
 * @createDate 2018年2月6日 下午5:34:12
 * @param pageSize
 * @param pageNumber
 * @param bookName
 * @return
 */
@ResponseBody @RequestMapping(value=""String_Node_Str"",method=RequestMethod.PUT) @LogDetail(businessType=BUSSINESS_TYPE,logRemark=""String_Node_Str"") public ResponseBean<Integer> audit(HttpServletRequest request,Long id,Boolean isAuth){
  BookVideo bookVideo=new BookVideo();
  bookVideo.setId(id).setAuthDate(new Date()).setAuthUserId(SessionUtil.getPmphUserBySessionId(CookiesUtil.getSessionId(request)).getId()).setIsAuth(isAuth == null ? false : isAuth);
  return new ResponseBean(bookVideoService.updateBookVideo(bookVideo));
}","/** 
 * 审核视频
 * @introduction
 * @author Mryang
 * @createDate 2018年2月6日 下午5:34:12
 * @return
 */
@ResponseBody @RequestMapping(value=""String_Node_Str"",method=RequestMethod.PUT) @LogDetail(businessType=BUSSINESS_TYPE,logRemark=""String_Node_Str"") public ResponseBean<Integer> audit(HttpServletRequest request,Long id,Boolean isAuth){
  if (ObjectUtil.isNull(id)) {
    return new ResponseBean(new CheckedServiceException(CheckedExceptionBusiness.BOOK_VEDIO,CheckedExceptionResult.NULL_PARAM,""String_Node_Str""));
  }
  if (ObjectUtil.isNull(isAuth)) {
    return new ResponseBean(new CheckedServiceException(CheckedExceptionBusiness.BOOK_VEDIO,CheckedExceptionResult.NULL_PARAM,""String_Node_Str""));
  }
  String sessionId=CookiesUtil.getSessionId(request);
  if (StringUtil.isEmpty(sessionId)) {
    return new ResponseBean(new CheckedServiceException(CheckedExceptionBusiness.BOOK_VEDIO,CheckedExceptionResult.USER_SESSION,""String_Node_Str""));
  }
  BookVideo bookVideo=new BookVideo();
  bookVideo.setId(id).setAuthDate(new Date()).setAuthUserId(SessionUtil.getPmphUserBySessionId(sessionId).getId()).setIsAuth(isAuth);
  return new ResponseBean(bookVideoService.updateBookVideo(bookVideo));
}"
39944,"/** 
 * 功能描述：申报表批量导出excel
 * @param materialId 教材id
 * @param textBookids 书籍id集合
 * @param realname 条件查询的账号或者姓名
 * @param position 条件查询 职务
 * @param title 条件查询 职称
 * @param orgName 条件查询 工作单位
 * @param unitName 条件查询 申报单位
 * @param positionType 条件查询 申报职位 ;null全部 1主编 2副主编 3编委
 * @param onlineProgress 1待审核 3已经审核
 * @param offlineProgress 0 未 2 收到
 * @param request
 * @param response
 */
@ResponseBody @LogDetail(businessType=BUSSINESS_TYPE,logRemark=""String_Node_Str"") @RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public void declarationExcel(Long materialId,String textBookids,String realname,String position,String title,String orgName,String unitName,Integer positionType,Integer onlineProgress,Integer offlineProgress,HttpServletRequest request,HttpServletResponse response){
  Workbook workbook=null;
  try {
    workbook=excelHelper.fromDeclarationEtcBOList(materialService.getMaterialById(materialId),declarationService.declarationEtcBO(materialId,textBookids,realname,position,title,orgName,unitName,positionType,onlineProgress,offlineProgress),""String_Node_Str"");
  }
 catch (  CheckedServiceException|IllegalArgumentException|IllegalAccessException e) {
    logger.warn(""String_Node_Str"");
  }
  response.setCharacterEncoding(""String_Node_Str"");
  response.setContentType(""String_Node_Str"");
  try {
    StringBuilder sb=new StringBuilder(""String_Node_Str"");
    String materialName;
    String userAgent=request.getHeader(""String_Node_Str"");
    if (userAgent.toLowerCase().contains(""String_Node_Str"")) {
      materialName=URLEncoder.encode(materialService.getMaterialNameById(materialId),""String_Node_Str"");
    }
 else {
      materialName=new String(materialService.getMaterialNameById(materialId).getBytes(""String_Node_Str""),""String_Node_Str"");
    }
    sb.append(materialName);
    sb.append(""String_Node_Str"");
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    sb.append(sdf.format(new Date()));
    sb.append(""String_Node_Str"");
    response.setHeader(""String_Node_Str"",sb.toString().replace(""String_Node_Str"",""String_Node_Str""));
  }
 catch (  UnsupportedEncodingException e) {
    logger.warn(""String_Node_Str"");
  }
  try (OutputStream out=response.getOutputStream()){
    workbook.write(out);
    out.flush();
    out.close();
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"",e.getMessage());
    throw new CheckedServiceException(CheckedExceptionBusiness.FILE,CheckedExceptionResult.FILE_DOWNLOAD_FAILED,""String_Node_Str"");
  }
}","/** 
 * 功能描述：申报表批量导出excel
 * @param materialId 教材id
 * @param textBookids 书籍id集合
 * @param realname 条件查询的账号或者姓名
 * @param position 条件查询 职务
 * @param title 条件查询 职称
 * @param orgName 条件查询 工作单位
 * @param unitName 条件查询 申报单位
 * @param positionType 条件查询 申报职位 ;null全部 1主编 2副主编 3编委
 * @param onlineProgress 1待审核 3已经审核
 * @param offlineProgress 0 未 2 收到
 * @param request
 * @param response
 */
@ResponseBody @LogDetail(businessType=BUSSINESS_TYPE,logRemark=""String_Node_Str"") @RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public void declarationExcel(Long materialId,String textBookids,String realname,String position,String title,String orgName,String unitName,Integer positionType,Integer onlineProgress,Integer offlineProgress,HttpServletRequest request,HttpServletResponse response){
  Workbook workbook=null;
  try {
    workbook=excelHelper.fromDeclarationEtcBOList(materialService.getMaterialById(materialId),materialExtensionService.getMaterialExtensionByMaterialId(materialId),declarationService.declarationEtcBO(materialId,textBookids,realname,position,title,orgName,unitName,positionType,onlineProgress,offlineProgress),""String_Node_Str"");
  }
 catch (  CheckedServiceException|IllegalArgumentException|IllegalAccessException e) {
    logger.warn(""String_Node_Str"");
  }
  response.setCharacterEncoding(""String_Node_Str"");
  response.setContentType(""String_Node_Str"");
  try {
    StringBuilder sb=new StringBuilder(""String_Node_Str"");
    String materialName;
    String userAgent=request.getHeader(""String_Node_Str"");
    if (userAgent.toLowerCase().contains(""String_Node_Str"")) {
      materialName=URLEncoder.encode(materialService.getMaterialNameById(materialId),""String_Node_Str"");
    }
 else {
      materialName=new String(materialService.getMaterialNameById(materialId).getBytes(""String_Node_Str""),""String_Node_Str"");
    }
    sb.append(materialName);
    sb.append(""String_Node_Str"");
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    sb.append(sdf.format(new Date()));
    sb.append(""String_Node_Str"");
    response.setHeader(""String_Node_Str"",sb.toString().replace(""String_Node_Str"",""String_Node_Str""));
  }
 catch (  UnsupportedEncodingException e) {
    logger.warn(""String_Node_Str"");
  }
  try (OutputStream out=response.getOutputStream()){
    workbook.write(out);
    out.flush();
    out.close();
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"",e.getMessage());
    throw new CheckedServiceException(CheckedExceptionBusiness.FILE,CheckedExceptionResult.FILE_DOWNLOAD_FAILED,""String_Node_Str"");
  }
}"
39945,"private Sheet generateDeclarationEtcBOHeader(Sheet sheet){
  Field[] fields=DeclarationEtcBO.class.getDeclaredFields();
  Row r1=sheet.createRow(0);
  Row r2=sheet.createRow(1);
  Cell numcell=r1.createCell(0);
  numcell.setCellValue(""String_Node_Str"");
  CellRangeAddress region=new CellRangeAddress(0,1,0,0);
  sheet.addMergedRegion(region);
  int count=1;
  for (  Field field : fields) {
    field.setAccessible(true);
    if (field.isAnnotationPresent(ExcelHeader.class)) {
      ExcelHeader excelHeader=(ExcelHeader)field.getAnnotation(ExcelHeader.class);
      String headerName=excelHeader.header();
      if (StringUtil.notEmpty(headerName)) {
switch (headerName) {
case ""String_Node_Str"":
{
            Cell r1cell=r1.createCell(count);
            r1cell.setCellValue(headerName);
            region=new CellRangeAddress(0,0,count,count + 3);
            sheet.addMergedRegion(region);
            Cell r2cell=r2.createCell(count);
            r2cell.setCellValue(""String_Node_Str"");
            sheet.setColumnWidth(count,5 * 512);
            count++;
            r2cell=r2.createCell(count);
            r2cell.setCellValue(""String_Node_Str"");
            sheet.setColumnWidth(count,5 * 512);
            count++;
            r2cell=r2.createCell(count);
            r2cell.setCellValue(""String_Node_Str"");
            sheet.setColumnWidth(count,5 * 512);
            count++;
            r2cell=r2.createCell(count);
            r2cell.setCellValue(""String_Node_Str"");
            sheet.setColumnWidth(count,3 * 512);
            count++;
            break;
          }
case ""String_Node_Str"":
{
          Cell r1cell=r1.createCell(count);
          r1cell.setCellValue(headerName);
          region=new CellRangeAddress(0,0,count,count + 2);
          sheet.addMergedRegion(region);
          Cell r2cell=r2.createCell(count);
          r2cell.setCellValue(""String_Node_Str"");
          sheet.setColumnWidth(count,5 * 512);
          count++;
          r2cell=r2.createCell(count);
          r2cell.setCellValue(""String_Node_Str"");
          sheet.setColumnWidth(count,5 * 512);
          count++;
          r2cell=r2.createCell(count);
          r2cell.setCellValue(""String_Node_Str"");
          sheet.setColumnWidth(count,3 * 512);
          count++;
          break;
        }
case ""String_Node_Str"":
{
        Cell r1cell=r1.createCell(count);
        r1cell.setCellValue(headerName);
        region=new CellRangeAddress(0,0,count,count + 2);
        sheet.addMergedRegion(region);
        Cell r2cell=r2.createCell(count);
        r2cell.setCellValue(""String_Node_Str"");
        sheet.setColumnWidth(count,5 * 512);
        count++;
        r2cell=r2.createCell(count);
        r2cell.setCellValue(""String_Node_Str"");
        sheet.setColumnWidth(count,5 * 512);
        count++;
        r2cell=r2.createCell(count);
        r2cell.setCellValue(""String_Node_Str"");
        sheet.setColumnWidth(count,5 * 512);
        count++;
        break;
      }
case ""String_Node_Str"":
{
      Cell r1cell=r1.createCell(count);
      r1cell.setCellValue(headerName);
      region=new CellRangeAddress(0,0,count,count + 2);
      sheet.addMergedRegion(region);
      Cell r2cell=r2.createCell(count);
      r2cell.setCellValue(""String_Node_Str"");
      sheet.setColumnWidth(count,7 * 512);
      count++;
      r2cell=r2.createCell(count);
      r2cell.setCellValue(""String_Node_Str"");
      sheet.setColumnWidth(count,3 * 512);
      count++;
      r2cell=r2.createCell(count);
      r2cell.setCellValue(""String_Node_Str"");
      sheet.setColumnWidth(count,3 * 512);
      count++;
      break;
    }
case ""String_Node_Str"":
{
    Cell r1cell=r1.createCell(count);
    r1cell.setCellValue(headerName);
    region=new CellRangeAddress(0,0,count,count + 1);
    sheet.addMergedRegion(region);
    Cell r2cell=r2.createCell(count);
    r2cell.setCellValue(""String_Node_Str"");
    sheet.setColumnWidth(count,5 * 512);
    count++;
    r2cell=r2.createCell(count);
    r2cell.setCellValue(""String_Node_Str"");
    sheet.setColumnWidth(count,5 * 512);
    count++;
    break;
  }
case ""String_Node_Str"":
{
  Cell r1cell=r1.createCell(count);
  r1cell.setCellValue(headerName);
  region=new CellRangeAddress(0,0,count,count + 2);
  sheet.addMergedRegion(region);
  Cell r2cell=r2.createCell(count);
  r2cell.setCellValue(""String_Node_Str"");
  sheet.setColumnWidth(count,5 * 512);
  count++;
  r2cell=r2.createCell(count);
  r2cell.setCellValue(""String_Node_Str"");
  sheet.setColumnWidth(count,5 * 512);
  count++;
  r2cell=r2.createCell(count);
  r2cell.setCellValue(""String_Node_Str"");
  sheet.setColumnWidth(count,5 * 512);
  count++;
  break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 4);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,3 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 5);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,3 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,4 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 4);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,7 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 3);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,9 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,3 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 1);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,6 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
default :
Cell cell=r1.createCell(count);
sheet.setColumnWidth(count,(headerName.length() + 1) * 512);
cell.setCellValue(headerName);
region=new CellRangeAddress(0,1,count,count);
sheet.addMergedRegion(region);
count++;
break;
}
}
}
}
return sheet;
}","private Sheet generateDeclarationEtcBOHeader(List<MaterialExtension> extensions,Sheet sheet){
  Field[] fields=DeclarationEtcBO.class.getDeclaredFields();
  Row r1=sheet.createRow(0);
  Row r2=sheet.createRow(1);
  Cell numcell=r1.createCell(0);
  numcell.setCellValue(""String_Node_Str"");
  CellRangeAddress region=new CellRangeAddress(0,1,0,0);
  sheet.addMergedRegion(region);
  int count=1;
  for (  Field field : fields) {
    field.setAccessible(true);
    if (field.isAnnotationPresent(ExcelHeader.class)) {
      ExcelHeader excelHeader=(ExcelHeader)field.getAnnotation(ExcelHeader.class);
      String headerName=excelHeader.header();
      if (StringUtil.notEmpty(headerName)) {
switch (headerName) {
case ""String_Node_Str"":
{
            Cell r1cell=r1.createCell(count);
            r1cell.setCellValue(headerName);
            region=new CellRangeAddress(0,0,count,count + 3);
            sheet.addMergedRegion(region);
            Cell r2cell=r2.createCell(count);
            r2cell.setCellValue(""String_Node_Str"");
            sheet.setColumnWidth(count,5 * 512);
            count++;
            r2cell=r2.createCell(count);
            r2cell.setCellValue(""String_Node_Str"");
            sheet.setColumnWidth(count,5 * 512);
            count++;
            r2cell=r2.createCell(count);
            r2cell.setCellValue(""String_Node_Str"");
            sheet.setColumnWidth(count,5 * 512);
            count++;
            r2cell=r2.createCell(count);
            r2cell.setCellValue(""String_Node_Str"");
            sheet.setColumnWidth(count,3 * 512);
            count++;
            break;
          }
case ""String_Node_Str"":
{
          Cell r1cell=r1.createCell(count);
          r1cell.setCellValue(headerName);
          region=new CellRangeAddress(0,0,count,count + 2);
          sheet.addMergedRegion(region);
          Cell r2cell=r2.createCell(count);
          r2cell.setCellValue(""String_Node_Str"");
          sheet.setColumnWidth(count,5 * 512);
          count++;
          r2cell=r2.createCell(count);
          r2cell.setCellValue(""String_Node_Str"");
          sheet.setColumnWidth(count,5 * 512);
          count++;
          r2cell=r2.createCell(count);
          r2cell.setCellValue(""String_Node_Str"");
          sheet.setColumnWidth(count,3 * 512);
          count++;
          break;
        }
case ""String_Node_Str"":
{
        Cell r1cell=r1.createCell(count);
        r1cell.setCellValue(headerName);
        region=new CellRangeAddress(0,0,count,count + 2);
        sheet.addMergedRegion(region);
        Cell r2cell=r2.createCell(count);
        r2cell.setCellValue(""String_Node_Str"");
        sheet.setColumnWidth(count,5 * 512);
        count++;
        r2cell=r2.createCell(count);
        r2cell.setCellValue(""String_Node_Str"");
        sheet.setColumnWidth(count,5 * 512);
        count++;
        r2cell=r2.createCell(count);
        r2cell.setCellValue(""String_Node_Str"");
        sheet.setColumnWidth(count,5 * 512);
        count++;
        break;
      }
case ""String_Node_Str"":
{
      Cell r1cell=r1.createCell(count);
      r1cell.setCellValue(headerName);
      region=new CellRangeAddress(0,0,count,count + 2);
      sheet.addMergedRegion(region);
      Cell r2cell=r2.createCell(count);
      r2cell.setCellValue(""String_Node_Str"");
      sheet.setColumnWidth(count,7 * 512);
      count++;
      r2cell=r2.createCell(count);
      r2cell.setCellValue(""String_Node_Str"");
      sheet.setColumnWidth(count,3 * 512);
      count++;
      r2cell=r2.createCell(count);
      r2cell.setCellValue(""String_Node_Str"");
      sheet.setColumnWidth(count,3 * 512);
      count++;
      break;
    }
case ""String_Node_Str"":
{
    Cell r1cell=r1.createCell(count);
    r1cell.setCellValue(headerName);
    region=new CellRangeAddress(0,0,count,count + 1);
    sheet.addMergedRegion(region);
    Cell r2cell=r2.createCell(count);
    r2cell.setCellValue(""String_Node_Str"");
    sheet.setColumnWidth(count,5 * 512);
    count++;
    r2cell=r2.createCell(count);
    r2cell.setCellValue(""String_Node_Str"");
    sheet.setColumnWidth(count,5 * 512);
    count++;
    break;
  }
case ""String_Node_Str"":
{
  Cell r1cell=r1.createCell(count);
  r1cell.setCellValue(headerName);
  region=new CellRangeAddress(0,0,count,count + 2);
  sheet.addMergedRegion(region);
  Cell r2cell=r2.createCell(count);
  r2cell.setCellValue(""String_Node_Str"");
  sheet.setColumnWidth(count,5 * 512);
  count++;
  r2cell=r2.createCell(count);
  r2cell.setCellValue(""String_Node_Str"");
  sheet.setColumnWidth(count,5 * 512);
  count++;
  r2cell=r2.createCell(count);
  r2cell.setCellValue(""String_Node_Str"");
  sheet.setColumnWidth(count,5 * 512);
  count++;
  break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 4);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,3 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 5);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,3 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,4 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 4);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,7 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 3);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,9 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,3 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + 2);
sheet.addMergedRegion(region);
Cell r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
r2cell=r2.createCell(count);
r2cell.setCellValue(""String_Node_Str"");
sheet.setColumnWidth(count,5 * 512);
count++;
break;
}
case ""String_Node_Str"":
{
if (extensions == null || extensions.isEmpty()) {
break;
}
Cell r1cell=r1.createCell(count);
r1cell.setCellValue(headerName);
region=new CellRangeAddress(0,0,count,count + extensions.size());
sheet.addMergedRegion(region);
for (MaterialExtension extension : extensions) {
Cell cell=r2.createCell(count);
String extensionName=extension.getExtensionName() == null ? ""String_Node_Str"" : extension.getExtensionName();
cell.setCellValue(extensionName);
int length=extension.getExtensionName().length() > 10 ? 10 : extension.getExtensionName().length();
sheet.setColumnWidth(count,length * 512);
count++;
}
break;
}
default :
Cell cell=r1.createCell(count);
sheet.setColumnWidth(count,(headerName.length() + 1) * 512);
cell.setCellValue(headerName);
region=new CellRangeAddress(0,1,count,count);
sheet.addMergedRegion(region);
count++;
break;
}
}
}
}
return sheet;
}"
39946,"/** 
 * 根据业务对象（包含子集合的BO）集合创建工作簿
 * @param material 申报表所属教材对象
 * @param dataSource 业务对象（BO）集合
 * @param sheetName 要生成的Excel表名（非文件名）
 * @return Excel工作簿
 */
public Workbook fromDeclarationEtcBOList(Material material,List<DeclarationEtcBO> dataSource,String sheetName) throws CheckedServiceException, IllegalArgumentException, IllegalAccessException {
  if (null == dataSource || dataSource.isEmpty()) {
    throw new CheckedServiceException(CheckedExceptionBusiness.MATERIAL,CheckedExceptionResult.NULL_PARAM,""String_Node_Str"");
  }
  Workbook workbook=new HSSFWorkbook();
  Sheet sheet=workbook.createSheet(sheetName);
  sheet=generateDeclarationEtcBOHeader(sheet);
  headerStyleSetup(workbook,2);
  Field[] fields=dataSource.get(0).getClass().getDeclaredFields();
  int rowCount=2;
  ColumnProperties columnProperties=new ColumnProperties(1,new int[sheet.getRow(1).getLastCellNum()]);
  Iterator iterator=dataSource.iterator();
  while (iterator.hasNext()) {
    Object object=iterator.next();
    Row row=sheet.createRow(rowCount);
    row.createCell(0).setCellValue(String.valueOf(rowCount - 1));
    columnProperties.setMaxElement(0,2);
    columnProperties.setColCount(1);
    for (    Field field : fields) {
      field.setAccessible(true);
      if (field.isAnnotationPresent(ExcelHeader.class)) {
        ExcelHeader excelHeader=(ExcelHeader)field.getAnnotation(ExcelHeader.class);
        String headerName=excelHeader.header();
        if (StringUtil.notEmpty(headerName)) {
switch (headerName) {
case ""String_Node_Str"":
{
              List<DecEduExp> list=(List<DecEduExp>)field.get(object);
              columnProperties=fillDecEduExpData(list,row,columnProperties);
              break;
            }
case ""String_Node_Str"":
{
            List<DecWorkExp> list=(List<DecWorkExp>)field.get(object);
            columnProperties=fillDecWorkExpData(list,row,columnProperties);
            break;
          }
case ""String_Node_Str"":
{
          List<DecTeachExp> list=(List<DecTeachExp>)field.get(object);
          columnProperties=fillDecTeachExpData(list,row,columnProperties);
          break;
        }
case ""String_Node_Str"":
{
        List<DecAcade> list=(List<DecAcade>)field.get(object);
        columnProperties=fillDecAcadeData(list,row,columnProperties);
        break;
      }
case ""String_Node_Str"":
{
      List<DecLastPosition> list=(List<DecLastPosition>)field.get(object);
      columnProperties=fillDecLastPositionData(list,row,columnProperties);
      break;
    }
case ""String_Node_Str"":
{
    List<DecCourseConstruction> list=(List<DecCourseConstruction>)field.get(object);
    columnProperties=fillDecCourseConstructionData(list,row,columnProperties);
    break;
  }
case ""String_Node_Str"":
{
  List<DecNationalPlan> list=(List<DecNationalPlan>)field.get(object);
  columnProperties=fillDecNationalPlanData(list,row,columnProperties);
  break;
}
case ""String_Node_Str"":
{
List<DecTextbookPmph> list=(List<DecTextbookPmph>)field.get(object);
columnProperties=fillDecTextbookPmphData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecTextbook> list=(List<DecTextbook>)field.get(object);
columnProperties=fillDecTextbookData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecResearch> list=(List<DecResearch>)field.get(object);
columnProperties=fillDecResearchData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecMonograph> list=(List<DecMonograph>)field.get(object);
columnProperties=fillDecMonographData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecPublishReward> list=(List<DecPublishReward>)field.get(object);
columnProperties=fillDecPublishRewardData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecSci> list=(List<DecSci>)field.get(object);
columnProperties=fillDecSciData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecClinicalReward> list=(List<DecClinicalReward>)field.get(object);
columnProperties=fillDecClinicalRewardData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecAcadeReward> list=(List<DecAcadeReward>)field.get(object);
columnProperties=fillDecAcadeRewardData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecExtensionVO> list=(List<DecExtensionVO>)field.get(object);
columnProperties=fillDecExtensionVOData(list,row,columnProperties);
break;
}
default :
Object o=field.get(object);
Cell cell=row.createCell(columnProperties.getColCount());
if (null != o) {
String value=o.toString();
cell.setCellValue(value);
if (value.length() > columnProperties.getCurrentMaxElement()) {
columnProperties.setCurrentMaxElement(value.length());
}
}
columnProperties.setColCount(columnProperties.getColCount() + 1);
break;
}
}
}
}
rowCount++;
}
workbook=dataStyleSetup(workbook,2,rowCount,columnProperties);
return clearColumns(workbook,material);
}","/** 
 * 根据业务对象（包含子集合的BO）集合创建工作簿
 * @param material 申报表所属教材对象
 * @param extensions 教材扩展项集合
 * @param dataSource 业务对象（BO）集合
 * @param sheetName 要生成的Excel表名（非文件名）
 * @return Excel工作簿
 */
public Workbook fromDeclarationEtcBOList(Material material,List<MaterialExtension> extensions,List<DeclarationEtcBO> dataSource,String sheetName) throws CheckedServiceException, IllegalArgumentException, IllegalAccessException {
  if (null == dataSource || dataSource.isEmpty()) {
    throw new CheckedServiceException(CheckedExceptionBusiness.MATERIAL,CheckedExceptionResult.NULL_PARAM,""String_Node_Str"");
  }
  Workbook workbook=new HSSFWorkbook();
  Sheet sheet=workbook.createSheet(sheetName);
  sheet=generateDeclarationEtcBOHeader(extensions,sheet);
  headerStyleSetup(workbook,2);
  Field[] fields=dataSource.get(0).getClass().getDeclaredFields();
  int rowCount=2;
  ColumnProperties columnProperties=new ColumnProperties(1,new int[sheet.getRow(1).getLastCellNum()]);
  Iterator iterator=dataSource.iterator();
  while (iterator.hasNext()) {
    Object object=iterator.next();
    Row row=sheet.createRow(rowCount);
    row.createCell(0).setCellValue(String.valueOf(rowCount - 1));
    columnProperties.setMaxElement(0,2);
    columnProperties.setColCount(1);
    for (    Field field : fields) {
      field.setAccessible(true);
      if (field.isAnnotationPresent(ExcelHeader.class)) {
        ExcelHeader excelHeader=(ExcelHeader)field.getAnnotation(ExcelHeader.class);
        String headerName=excelHeader.header();
        if (StringUtil.notEmpty(headerName)) {
switch (headerName) {
case ""String_Node_Str"":
{
              List<DecEduExp> list=(List<DecEduExp>)field.get(object);
              columnProperties=fillDecEduExpData(list,row,columnProperties);
              break;
            }
case ""String_Node_Str"":
{
            List<DecWorkExp> list=(List<DecWorkExp>)field.get(object);
            columnProperties=fillDecWorkExpData(list,row,columnProperties);
            break;
          }
case ""String_Node_Str"":
{
          List<DecTeachExp> list=(List<DecTeachExp>)field.get(object);
          columnProperties=fillDecTeachExpData(list,row,columnProperties);
          break;
        }
case ""String_Node_Str"":
{
        List<DecAcade> list=(List<DecAcade>)field.get(object);
        columnProperties=fillDecAcadeData(list,row,columnProperties);
        break;
      }
case ""String_Node_Str"":
{
      List<DecLastPosition> list=(List<DecLastPosition>)field.get(object);
      columnProperties=fillDecLastPositionData(list,row,columnProperties);
      break;
    }
case ""String_Node_Str"":
{
    List<DecCourseConstruction> list=(List<DecCourseConstruction>)field.get(object);
    columnProperties=fillDecCourseConstructionData(list,row,columnProperties);
    break;
  }
case ""String_Node_Str"":
{
  List<DecNationalPlan> list=(List<DecNationalPlan>)field.get(object);
  columnProperties=fillDecNationalPlanData(list,row,columnProperties);
  break;
}
case ""String_Node_Str"":
{
List<DecTextbookPmph> list=(List<DecTextbookPmph>)field.get(object);
columnProperties=fillDecTextbookPmphData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecTextbook> list=(List<DecTextbook>)field.get(object);
columnProperties=fillDecTextbookData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecResearch> list=(List<DecResearch>)field.get(object);
columnProperties=fillDecResearchData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecMonograph> list=(List<DecMonograph>)field.get(object);
columnProperties=fillDecMonographData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecPublishReward> list=(List<DecPublishReward>)field.get(object);
columnProperties=fillDecPublishRewardData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecSci> list=(List<DecSci>)field.get(object);
columnProperties=fillDecSciData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecClinicalReward> list=(List<DecClinicalReward>)field.get(object);
columnProperties=fillDecClinicalRewardData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
List<DecAcadeReward> list=(List<DecAcadeReward>)field.get(object);
columnProperties=fillDecAcadeRewardData(list,row,columnProperties);
break;
}
case ""String_Node_Str"":
{
if (extensions == null || extensions.isEmpty()) {
break;
}
List<DecExtensionVO> list=(List<DecExtensionVO>)field.get(object);
columnProperties=fillDecExtensionVODataPlus(extensions,list,row,columnProperties);
break;
}
default :
Object o=field.get(object);
Cell cell=row.createCell(columnProperties.getColCount());
if (null != o) {
String value=o.toString();
cell.setCellValue(value);
if (value.length() > columnProperties.getCurrentMaxElement()) {
columnProperties.setCurrentMaxElement(value.length());
}
}
columnProperties.setColCount(columnProperties.getColCount() + 1);
break;
}
}
}
}
rowCount++;
}
workbook=dataStyleSetup(workbook,2,rowCount,columnProperties);
return clearColumns(workbook,material);
}"
39947,"/** 
 * 功能描述：申报表批量导出excel
 * @param materialId 教材id
 * @param textBookids 书籍id集合
 * @param realname 条件查询的账号或者姓名
 * @param position 条件查询 职务
 * @param title 条件查询 职称
 * @param orgName 条件查询 工作单位
 * @param unitName 条件查询 申报单位
 * @param positionType 条件查询 申报职位 ;null全部 1主编 2副主编 3编委
 * @param onlineProgress 1待审核 3已经审核
 * @param offlineProgress 0 未 2 收到
 * @param request
 * @param response
 */
@ResponseBody @LogDetail(businessType=BUSSINESS_TYPE,logRemark=""String_Node_Str"") @RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public void declarationExcel(Long materialId,String textBookids,String realname,String position,String title,String orgName,String unitName,Integer positionType,Integer onlineProgress,Integer offlineProgress,HttpServletRequest request,HttpServletResponse response){
  Workbook workbook=null;
  try {
    workbook=excelHelper.fromDeclarationEtcBOList(materialService.getMaterialById(materialId),declarationService.declarationEtcBO(materialId,textBookids,realname,position,title,orgName,unitName,positionType,onlineProgress,offlineProgress),""String_Node_Str"");
  }
 catch (  CheckedServiceException|IllegalArgumentException|IllegalAccessException e) {
    logger.warn(""String_Node_Str"");
  }
  response.setCharacterEncoding(""String_Node_Str"");
  response.setContentType(""String_Node_Str"");
  try {
    StringBuilder sb=new StringBuilder(""String_Node_Str"");
    String materialName=new String(materialService.getMaterialNameById(materialId).getBytes(""String_Node_Str""),""String_Node_Str"");
    sb.append(materialName);
    sb.append(""String_Node_Str"");
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    sb.append(sdf.format(new Date()));
    sb.append(""String_Node_Str"");
    String userAgent=request.getHeader(""String_Node_Str"");
    if (userAgent.toLowerCase().contains(""String_Node_Str"")) {
      response.setHeader(""String_Node_Str"",URLDecoder.decode(sb.toString(),""String_Node_Str""));
    }
 else {
      response.setHeader(""String_Node_Str"",sb.toString().replace(""String_Node_Str"",""String_Node_Str""));
    }
  }
 catch (  UnsupportedEncodingException e) {
    logger.warn(""String_Node_Str"");
  }
  try (OutputStream out=response.getOutputStream()){
    workbook.write(out);
    out.flush();
    out.close();
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"",e.getMessage());
    throw new CheckedServiceException(CheckedExceptionBusiness.FILE,CheckedExceptionResult.FILE_DOWNLOAD_FAILED,""String_Node_Str"");
  }
}","/** 
 * 功能描述：申报表批量导出excel
 * @param materialId 教材id
 * @param textBookids 书籍id集合
 * @param realname 条件查询的账号或者姓名
 * @param position 条件查询 职务
 * @param title 条件查询 职称
 * @param orgName 条件查询 工作单位
 * @param unitName 条件查询 申报单位
 * @param positionType 条件查询 申报职位 ;null全部 1主编 2副主编 3编委
 * @param onlineProgress 1待审核 3已经审核
 * @param offlineProgress 0 未 2 收到
 * @param request
 * @param response
 */
@ResponseBody @LogDetail(businessType=BUSSINESS_TYPE,logRemark=""String_Node_Str"") @RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public void declarationExcel(Long materialId,String textBookids,String realname,String position,String title,String orgName,String unitName,Integer positionType,Integer onlineProgress,Integer offlineProgress,HttpServletRequest request,HttpServletResponse response){
  Workbook workbook=null;
  try {
    workbook=excelHelper.fromDeclarationEtcBOList(materialService.getMaterialById(materialId),declarationService.declarationEtcBO(materialId,textBookids,realname,position,title,orgName,unitName,positionType,onlineProgress,offlineProgress),""String_Node_Str"");
  }
 catch (  CheckedServiceException|IllegalArgumentException|IllegalAccessException e) {
    logger.warn(""String_Node_Str"");
  }
  response.setCharacterEncoding(""String_Node_Str"");
  response.setContentType(""String_Node_Str"");
  try {
    StringBuilder sb=new StringBuilder(""String_Node_Str"");
    String materialName;
    String userAgent=request.getHeader(""String_Node_Str"");
    if (userAgent.toLowerCase().contains(""String_Node_Str"")) {
      materialName=URLEncoder.encode(materialService.getMaterialNameById(materialId),""String_Node_Str"");
    }
 else {
      materialName=new String(materialService.getMaterialNameById(materialId).getBytes(""String_Node_Str""),""String_Node_Str"");
    }
    sb.append(materialName);
    sb.append(""String_Node_Str"");
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    sb.append(sdf.format(new Date()));
    sb.append(""String_Node_Str"");
    response.setHeader(""String_Node_Str"",sb.toString().replace(""String_Node_Str"",""String_Node_Str""));
  }
 catch (  UnsupportedEncodingException e) {
    logger.warn(""String_Node_Str"");
  }
  try (OutputStream out=response.getOutputStream()){
    workbook.write(out);
    out.flush();
    out.close();
  }
 catch (  Exception e) {
    logger.warn(""String_Node_Str"",e.getMessage());
    throw new CheckedServiceException(CheckedExceptionBusiness.FILE,CheckedExceptionResult.FILE_DOWNLOAD_FAILED,""String_Node_Str"");
  }
}"
39948,"/** 
 * 作家申报表
 */
protected void declaration(){
  String tableName=""String_Node_Str"";
  JdbcHelper.addColumn(tableName);
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  List<Map<String,Object>> maps=JdbcHelper.getJdbcTemplate().queryForList(sql);
  int count=0;
  int materialidCount=0;
  List<Map<String,Object>> excel=new LinkedList<>();
  for (  Map<String,Object> map : maps) {
    StringBuilder sb=new StringBuilder();
    String id=(String)map.get(""String_Node_Str"");
    Long materialid=(Long)map.get(""String_Node_Str"");
    Long userid=(Long)map.get(""String_Node_Str"");
    String realName=(String)map.get(""String_Node_Str"");
    String sexJudge=(String)map.get(""String_Node_Str"");
    String experienceNum=(String)map.get(""String_Node_Str"");
    String postCode=(String)map.get(""String_Node_Str"");
    Long onlineProgressJudge=(Long)map.get(""String_Node_Str"");
    String authUserid=(String)map.get(""String_Node_Str"");
    Long offlineProgressJudge=(Long)map.get(""String_Node_Str"");
    Long isStagingJudge=(Long)map.get(""String_Node_Str"");
    Declaration declaration=new Declaration();
    if (ObjectUtil.isNull(materialid) || materialid.intValue() == 0) {
      map.put(SQLParameters.EXCEL_EX_HEADER,sb.append(""String_Node_Str""));
      excel.add(map);
      logger.debug(""String_Node_Str"");
      materialidCount++;
      continue;
    }
    declaration.setMaterialId(materialid);
    if (ObjectUtil.isNull(userid) || userid.intValue() == 0) {
      map.put(SQLParameters.EXCEL_EX_HEADER,sb.append(""String_Node_Str""));
      excel.add(map);
      logger.debug(""String_Node_Str"");
      continue;
    }
    declaration.setUserId(userid);
    declaration.setRealname(realName);
    if (StringUtil.isEmpty(sexJudge)) {
      declaration.setSex(1);
    }
 else {
      Integer sex=Integer.parseInt(sexJudge.trim());
      declaration.setSex(sex);
    }
    declaration.setBirthday((Date)map.get(""String_Node_Str""));
    if (JdbcHelper.judgeExperience(experienceNum)) {
      experienceNum=JdbcHelper.correctExperience(experienceNum);
    }
    declaration.setExperience(Integer.parseInt(experienceNum));
    declaration.setOrgName((String)map.get(""String_Node_Str""));
    declaration.setPosition((String)map.get(""String_Node_Str""));
    declaration.setTitle((String)map.get(""String_Node_Str""));
    declaration.setAddress((String)map.get(""String_Node_Str""));
    if (StringUtil.notEmpty(postCode)) {
      if (StringUtil.strLength(postCode) > 20 || ""String_Node_Str"".equals(id)) {
        declaration.setPostcode(""String_Node_Str"");
      }
    }
    declaration.setPostcode(postCode);
    declaration.setHandphone((String)map.get(""String_Node_Str""));
    declaration.setEmail((String)map.get(""String_Node_Str""));
    declaration.setIdtype((Short)map.get(""String_Node_Str""));
    declaration.setIdcard((String)map.get(""String_Node_Str""));
    declaration.setTelephone((String)map.get(""String_Node_Str""));
    declaration.setFax((String)map.get(""String_Node_Str""));
    declaration.setOrgId((Long)map.get(""String_Node_Str""));
    if (ObjectUtil.notNull(onlineProgressJudge)) {
      Integer onlineProgress=onlineProgressJudge.intValue();
      declaration.setOnlineProgress(onlineProgress);
    }
 else {
      declaration.setOnlineProgress(0);
    }
    Long authUserId=JdbcHelper.getPrimaryKey(""String_Node_Str"",""String_Node_Str"",authUserid);
    declaration.setAuthUserId(authUserId);
    declaration.setAuthDate((Timestamp)map.get(""String_Node_Str""));
    if (ObjectUtil.notNull(offlineProgressJudge)) {
      Integer offlineProgress=offlineProgressJudge.intValue();
      declaration.setOfflineProgress(offlineProgress);
    }
 else {
      declaration.setOfflineProgress(0);
    }
    declaration.setPaperDate((Timestamp)map.get(""String_Node_Str""));
    if (ObjectUtil.isNull(isStagingJudge)) {
      declaration.setIsStaging(0);
    }
 else {
      Integer isStaging=isStagingJudge.intValue();
      declaration.setIsStaging(isStaging);
    }
    declaration=declarationService.addDeclaration(declaration);
    long pk=declaration.getId();
    JdbcHelper.updateNewPrimaryKey(tableName,pk,""String_Node_Str"",id);
    count++;
  }
  if (excel.size() > 0) {
    try {
      excelHelper.exportFromMaps(excel,""String_Node_Str"",""String_Node_Str"");
    }
 catch (    IOException ex) {
      logger.error(""String_Node_Str"",ex);
    }
  }
  logger.info(""String_Node_Str"",materialidCount);
  logger.info(""String_Node_Str"",excel.size());
  logger.info(""String_Node_Str"",maps.size(),count);
  Map<String,Object> msg=new HashMap<String,Object>();
  msg.put(""String_Node_Str"",""String_Node_Str"" + tableName + ""String_Node_Str""+ count+ ""String_Node_Str""+ maps.size());
  SQLParameters.STATISTICS.add(msg);
}","/** 
 * 作家申报表
 */
protected void declaration(){
  String tableName=""String_Node_Str"";
  JdbcHelper.addColumn(tableName);
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  List<Map<String,Object>> maps=JdbcHelper.getJdbcTemplate().queryForList(sql);
  int count=0;
  int materialidCount=0;
  List<Map<String,Object>> excel=new LinkedList<>();
  for (  Map<String,Object> map : maps) {
    StringBuilder sb=new StringBuilder();
    String id=(String)map.get(""String_Node_Str"");
    Long materialid=(Long)map.get(""String_Node_Str"");
    Long userid=(Long)map.get(""String_Node_Str"");
    String realName=(String)map.get(""String_Node_Str"");
    String sexJudge=(String)map.get(""String_Node_Str"");
    String experienceNum=(String)map.get(""String_Node_Str"");
    String postCode=(String)map.get(""String_Node_Str"");
    Long onlineProgressJudge=(Long)map.get(""String_Node_Str"");
    String authUserid=(String)map.get(""String_Node_Str"");
    Long offlineProgressJudge=(Long)map.get(""String_Node_Str"");
    Long isStagingJudge=(Long)map.get(""String_Node_Str"");
    Declaration declaration=new Declaration();
    if (ObjectUtil.isNull(materialid) || materialid.intValue() == 0) {
      map.put(SQLParameters.EXCEL_EX_HEADER,sb.append(""String_Node_Str""));
      excel.add(map);
      logger.debug(""String_Node_Str"");
      materialidCount++;
      continue;
    }
    declaration.setMaterialId(materialid);
    if (ObjectUtil.isNull(userid) || userid.intValue() == 0) {
      map.put(SQLParameters.EXCEL_EX_HEADER,sb.append(""String_Node_Str""));
      excel.add(map);
      logger.debug(""String_Node_Str"");
      continue;
    }
    declaration.setUserId(userid);
    declaration.setRealname(realName);
    if (StringUtil.isEmpty(sexJudge)) {
      declaration.setSex(1);
    }
 else {
      Integer sex=Integer.parseInt(sexJudge.trim());
      declaration.setSex(sex);
    }
    declaration.setBirthday((Date)map.get(""String_Node_Str""));
    if (JdbcHelper.judgeExperience(experienceNum)) {
      experienceNum=JdbcHelper.correctExperience(experienceNum);
    }
    declaration.setExperience(Integer.parseInt(experienceNum));
    declaration.setOrgName((String)map.get(""String_Node_Str""));
    declaration.setPosition((String)map.get(""String_Node_Str""));
    declaration.setTitle((String)map.get(""String_Node_Str""));
    declaration.setAddress((String)map.get(""String_Node_Str""));
    if (StringUtil.notEmpty(postCode)) {
      if (StringUtil.strLength(postCode) > 20 || ""String_Node_Str"".equals(id)) {
        declaration.setPostcode(""String_Node_Str"");
      }
    }
    declaration.setHandphone((String)map.get(""String_Node_Str""));
    declaration.setEmail((String)map.get(""String_Node_Str""));
    declaration.setIdtype((Short)map.get(""String_Node_Str""));
    declaration.setIdcard((String)map.get(""String_Node_Str""));
    declaration.setTelephone((String)map.get(""String_Node_Str""));
    declaration.setFax((String)map.get(""String_Node_Str""));
    declaration.setOrgId((Long)map.get(""String_Node_Str""));
    if (ObjectUtil.notNull(onlineProgressJudge)) {
      Integer onlineProgress=onlineProgressJudge.intValue();
      declaration.setOnlineProgress(onlineProgress);
    }
 else {
      declaration.setOnlineProgress(0);
    }
    Long authUserId=JdbcHelper.getPrimaryKey(""String_Node_Str"",""String_Node_Str"",authUserid);
    declaration.setAuthUserId(authUserId);
    declaration.setAuthDate((Timestamp)map.get(""String_Node_Str""));
    if (ObjectUtil.notNull(offlineProgressJudge)) {
      Integer offlineProgress=offlineProgressJudge.intValue();
      declaration.setOfflineProgress(offlineProgress);
    }
 else {
      declaration.setOfflineProgress(0);
    }
    declaration.setPaperDate((Timestamp)map.get(""String_Node_Str""));
    if (ObjectUtil.isNull(isStagingJudge)) {
      declaration.setIsStaging(0);
    }
 else {
      Integer isStaging=isStagingJudge.intValue();
      declaration.setIsStaging(isStaging);
    }
    declaration=declarationService.addDeclaration(declaration);
    long pk=declaration.getId();
    JdbcHelper.updateNewPrimaryKey(tableName,pk,""String_Node_Str"",id);
    count++;
  }
  if (excel.size() > 0) {
    try {
      excelHelper.exportFromMaps(excel,""String_Node_Str"",""String_Node_Str"");
    }
 catch (    IOException ex) {
      logger.error(""String_Node_Str"",ex);
    }
  }
  logger.info(""String_Node_Str"",materialidCount);
  logger.info(""String_Node_Str"",excel.size());
  logger.info(""String_Node_Str"",maps.size(),count);
  Map<String,Object> msg=new HashMap<String,Object>();
  msg.put(""String_Node_Str"",""String_Node_Str"" + tableName + ""String_Node_Str""+ count+ ""String_Node_Str""+ maps.size());
  SQLParameters.STATISTICS.add(msg);
}"
39949,"public double[] forward(int[] x,int action){
  double ans=0;
  for (int j=0; j < 100; j++) {
    for (int i=0; i < 64; i++)     sum[0][j]+=x[i] * w[0][i][j];
    sum[0][j]=LRelu(sum[0][j] + b[0][j]);
  }
  for (int k=1; k <= 2; k++)   for (int j=0; j < 100; j++) {
    for (int i=0; i < 100; i++)     sum[k][j]+=sum[k - 1][i] * w[k][i][j];
    sum[k][j]=LRelu(sum[k][j] + b[k][j]);
  }
  for (int i=0; i < 64; i++) {
    for (int j=0; j < 100; j++)     sum[3][j]+=sum[2][i] * w[3][i][j];
    sum[3][i]+=b[3][i];
  }
  return sum[3];
}","public double[] forward(int[] x,int action){
  double ans=0;
  for (int j=0; j < 100; j++) {
    for (int i=0; i < 64; i++)     sum[0][j]+=x[i] * w[0][i][j];
    sum[0][j]=LRelu(sum[0][j] + b[0][j]);
  }
  for (int k=1; k <= 2; k++)   for (int j=0; j < 100; j++) {
    for (int i=0; i < 100; i++)     sum[k][j]+=sum[k - 1][i] * w[k][i][j];
    sum[k][j]=LRelu(sum[k][j] + b[k][j]);
  }
  for (int i=0; i < 64; i++) {
    for (int j=0; j < 100; j++)     sum[3][j]+=sum[2][i] * w[3][i][j];
    sum[3][i]=Math.tanh(sum[3][i] + b[3][i]);
  }
  return sum[3];
}"
39950,"public void backward(double[] y,double[] t){
  double[][] error;
  error=new double[3][];
  for (int i=0; i < 2; i++)   error[i]=new double[100];
  error[2]=new double[64];
  double temp=0;
  for (int i=0; i < 64; i++)   error[2][i]=de(y[i]) * (y[i] - t[i]);
  for (int i=0; i < 100; i++) {
    temp=0;
    for (int j=0; j < 64; j++) {
      adam(3,i,j,error[2][j] * sum[3][j]);
      adam_b(3,j,error[2][j]);
      temp+=error[2][j] * w[3][i][j];
      adam(2,i,j,error[2][i] * sum[2][i]);
    }
    error[1][i]=de(sum[2][i]) * temp;
    adam_b(2,i,error[2][i]);
  }
  for (int k=1; k >= 0; k--)   for (int i=0; i < 100; i++) {
    temp=0;
    for (int j=0; j < 100; j++) {
      temp+=error[k][j] * w[k + 1][i][j];
      adam(k,i,j,error[k][i] * sum[k][i]);
    }
    if (k > 0)     error[k - 1][i]=de(sum[k][i]) * temp;
    adam_b(k,i,error[k][i]);
  }
}","public void backward(double[] y,double[] t){
  double[][] error;
  error=new double[3][];
  for (int i=0; i < 2; i++)   error[i]=new double[100];
  error[2]=new double[64];
  double temp=0;
  for (int i=0; i < 64; i++)   error[2][i]=(1 - Math.pow(y[i],2.0)) * (y[i] - t[i]);
  for (int i=0; i < 100; i++) {
    temp=0;
    for (int j=0; j < 64; j++) {
      adam(3,i,j,error[2][j] * sum[3][j]);
      adam_b(3,j,error[2][j]);
      temp+=error[2][j] * w[3][i][j];
      adam(2,i,j,error[2][i] * sum[2][i]);
    }
    error[1][i]=de(sum[2][i]) * temp;
    adam_b(2,i,error[2][i]);
  }
  for (int k=1; k >= 0; k--)   for (int i=0; i < 100; i++) {
    temp=0;
    for (int j=0; j < 100; j++) {
      temp+=error[k][j] * w[k + 1][i][j];
      adam(k,i,j,error[k][i] * sum[k][i]);
    }
    if (k > 0)     error[k - 1][i]=de(sum[k][i]) * temp;
    adam_b(k,i,error[k][i]);
  }
}"
39951,"private double evaluate(int[] x){
  double sum=0;
  for (int i=0; i <= 64; i++) {
    if (x[i] == hold)     sum+=value[i] * (32.0 / (double)(pt.hand)) + 0.32 / (double)(65.0 - pt.hand);
 else     if (x[i] == -hold)     sum-=value[i] * (32.0 / (double)(pt.hand)) + 0.32 / (double)(65.0 - pt.hand);
  }
  return sum;
}","private double evaluate(int[] x){
  double sum=0;
  int hand=0;
  for (int i=0; i <= 64; i++)   if (x[i] != 0)   hand++;
  for (int i=0; i <= 64; i++) {
    if (x[i] == hold)     sum+=value[i] * (32.0 / (double)(hand)) + 0.32 / (double)(65.0 - hand);
 else     if (x[i] == -hold)     sum-=value[i] * (32.0 / (double)(hand)) + 0.32 / (double)(65.0 - hand);
  }
  return sum;
}"
39952,"/** 
 * List Parts, check which parts have been uploaded.
 */
private ListPartsResult listPart() throws CosXmlServiceException, CosXmlClientException {
  listPartsRequest=new ListPartsRequest(bucket,cosPath,uploadId);
  setSignTime(listPartsRequest);
  return cosXmlService.listParts(listPartsRequest);
}","/** 
 * List Parts, check which parts have been uploaded.
 */
private ListPartsResult listPart() throws CosXmlServiceException, CosXmlClientException {
  listPartsRequest=new ListPartsRequest(bucket,cosPath,uploadId);
  setSignTime(listPartsRequest);
  setRequestHeaders(listPartsRequest);
  return cosXmlService.listParts(listPartsRequest);
}"
39953,"/** 
 * complete multi upload.
 */
private CompleteMultiUploadResult completeMultiUpload() throws CosXmlServiceException, CosXmlClientException {
  completeMultiUploadRequest=new CompleteMultiUploadRequest(bucket,cosPath,uploadId,null);
  for (  Map.Entry<Integer,SlicePartStruct> entry : partStructMap.entrySet()) {
    SlicePartStruct slicePartStruct=entry.getValue();
    completeMultiUploadRequest.setPartNumberAndETag(slicePartStruct.partNumber,slicePartStruct.eTag);
  }
  setSignTime(completeMultiUploadRequest);
  return cosXmlService.completeMultiUpload(completeMultiUploadRequest);
}","/** 
 * complete multi upload.
 */
private CompleteMultiUploadResult completeMultiUpload() throws CosXmlServiceException, CosXmlClientException {
  completeMultiUploadRequest=new CompleteMultiUploadRequest(bucket,cosPath,uploadId,null);
  for (  Map.Entry<Integer,SlicePartStruct> entry : partStructMap.entrySet()) {
    SlicePartStruct slicePartStruct=entry.getValue();
    completeMultiUploadRequest.setPartNumberAndETag(slicePartStruct.partNumber,slicePartStruct.eTag);
  }
  setSignTime(completeMultiUploadRequest);
  setRequestHeaders(completeMultiUploadRequest);
  return cosXmlService.completeMultiUpload(completeMultiUploadRequest);
}"
39954,"/** 
 * init multi,then get uploadId
 */
private InitMultipartUploadResult initMultiUpload() throws CosXmlServiceException, CosXmlClientException {
  initMultipartUploadRequest=new InitMultipartUploadRequest(bucket,cosPath);
  setSignTime(initMultipartUploadRequest);
  return cosXmlService.initMultipartUpload(initMultipartUploadRequest);
}","/** 
 * init multi,then get uploadId
 */
private InitMultipartUploadResult initMultiUpload() throws CosXmlServiceException, CosXmlClientException {
  initMultipartUploadRequest=new InitMultipartUploadRequest(bucket,cosPath);
  setSignTime(initMultipartUploadRequest);
  setRequestHeaders(initMultipartUploadRequest);
  return cosXmlService.initMultipartUpload(initMultipartUploadRequest);
}"
39955,"/** 
 * upload Part,  concurrence upload file parts.
 */
private void uploadPart(final int partNumber,long offset,long contentLength,CosXmlResultListener cosXmlResultListener){
  final UploadPartRequest uploadPartRequest=new UploadPartRequest(bucket,cosPath,partNumber,srcPath,offset,contentLength,uploadId);
  uploadPartRequestLongMap.put(uploadPartRequest,0L);
  setSignTime(uploadPartRequest);
  uploadPartRequest.setProgressListener(new CosXmlProgressListener(){
    @Override public void onProgress(    long complete,    long target){
synchronized (objectSync) {
        long dataLen=ALREADY_SEND_DATA_LEN.addAndGet(complete - uploadPartRequestLongMap.get(uploadPartRequest));
        uploadPartRequestLongMap.put(uploadPartRequest,complete);
        if (cosXmlProgressListener != null) {
          cosXmlProgressListener.onProgress(dataLen,fileLength);
        }
      }
    }
  }
);
  cosXmlService.uploadPartAsync(uploadPartRequest,cosXmlResultListener);
}","/** 
 * upload Part,  concurrence upload file parts.
 */
private void uploadPart(final int partNumber,long offset,long contentLength,CosXmlResultListener cosXmlResultListener){
  final UploadPartRequest uploadPartRequest=new UploadPartRequest(bucket,cosPath,partNumber,srcPath,offset,contentLength,uploadId);
  uploadPartRequestLongMap.put(uploadPartRequest,0L);
  setSignTime(uploadPartRequest);
  try {
    setRequestHeaders(uploadPartRequest);
  }
 catch (  CosXmlClientException e) {
    cosXmlResultListener.onFail(putObjectRequest,e,null);
    return;
  }
  uploadPartRequest.setProgressListener(new CosXmlProgressListener(){
    @Override public void onProgress(    long complete,    long target){
synchronized (objectSync) {
        long dataLen=ALREADY_SEND_DATA_LEN.addAndGet(complete - uploadPartRequestLongMap.get(uploadPartRequest));
        uploadPartRequestLongMap.put(uploadPartRequest,complete);
        if (cosXmlProgressListener != null) {
          cosXmlProgressListener.onProgress(dataLen,fileLength);
        }
      }
    }
  }
);
  cosXmlService.uploadPartAsync(uploadPartRequest,cosXmlResultListener);
}"
39956,"/** 
 * abort multi upload
 */
private void abortMultiUpload(final CosXmlResultListener cosXmlResultListener){
  if (uploadId == null)   return;
  AbortMultiUploadRequest abortMultiUploadRequest=new AbortMultiUploadRequest(bucket,cosPath,uploadId);
  setSignTime(abortMultiUploadRequest);
  cosXmlService.abortMultiUploadAsync(abortMultiUploadRequest,new CosXmlResultListener(){
    @Override public void onSuccess(    CosXmlRequest request,    CosXmlResult result){
      cosXmlResultListener.onSuccess(request,result);
      realCancel();
      clear();
    }
    @Override public void onFail(    CosXmlRequest request,    CosXmlClientException exception,    CosXmlServiceException serviceException){
      cosXmlResultListener.onFail(request,exception,serviceException);
      realCancel();
      clear();
    }
  }
);
}","/** 
 * abort multi upload
 */
private void abortMultiUpload(final CosXmlResultListener cosXmlResultListener){
  if (uploadId == null)   return;
  AbortMultiUploadRequest abortMultiUploadRequest=new AbortMultiUploadRequest(bucket,cosPath,uploadId);
  setSignTime(abortMultiUploadRequest);
  try {
    setRequestHeaders(abortMultiUploadRequest);
  }
 catch (  CosXmlClientException e) {
    cosXmlResultListener.onFail(abortMultiUploadRequest,e,null);
    return;
  }
  cosXmlService.abortMultiUploadAsync(abortMultiUploadRequest,new CosXmlResultListener(){
    @Override public void onSuccess(    CosXmlRequest request,    CosXmlResult result){
      cosXmlResultListener.onSuccess(request,result);
      realCancel();
      clear();
    }
    @Override public void onFail(    CosXmlRequest request,    CosXmlClientException exception,    CosXmlServiceException serviceException){
      cosXmlResultListener.onFail(request,exception,serviceException);
      realCancel();
      clear();
    }
  }
);
}"
39957,"private void updateSlicePart(ListPartsResult listPartsResult){
  if (listPartsResult != null && listPartsResult.listParts != null) {
    List<ListParts.Part> parts=listPartsResult.listParts.parts;
    if (parts != null) {
      for (      ListParts.Part part : parts) {
        if (partStructMap.containsKey(part.partNumber)) {
          SlicePartStruct slicePartStruct=partStructMap.get(part.partNumber);
          slicePartStruct.isAlreadyUpload=true;
          slicePartStruct.eTag=part.eTag;
          UPLOAD_PART_COUNT.decrementAndGet();
          ALREADY_SEND_DATA_LEN.addAndGet(Long.parseLong(part.size));
        }
      }
    }
  }
}","private void updateSlicePart(ListPartsResult listPartsResult){
  if (listPartsResult != null && listPartsResult.listParts != null) {
    List<ListParts.Part> parts=listPartsResult.listParts.parts;
    if (parts != null) {
      for (      ListParts.Part part : parts) {
        if (partStructMap.containsKey(Integer.valueOf(part.partNumber))) {
          SlicePartStruct slicePartStruct=partStructMap.get(Integer.valueOf(part.partNumber));
          slicePartStruct.isAlreadyUpload=true;
          slicePartStruct.eTag=part.eTag;
          UPLOAD_PART_COUNT.decrementAndGet();
          ALREADY_SEND_DATA_LEN.addAndGet(Long.parseLong(part.size));
        }
      }
    }
  }
}"
39958,"/** 
 * small file using put object api
 */
private UploadServiceResult putObject(final String bucket,String cosPath,String srcPath) throws CosXmlClientException, CosXmlServiceException {
  UPLOAD_PART_COUNT.set(1);
  putObjectRequest=new PutObjectRequest(bucket,cosPath,srcPath);
  putObjectRequest.setProgressListener(cosXmlProgressListener);
  setSignTime(putObjectRequest);
  cosXmlService.putObjectAsync(putObjectRequest,new CosXmlResultListener(){
    @Override public void onSuccess(    CosXmlRequest request,    CosXmlResult result){
synchronized (objectSync) {
        PutObjectResult putObjectResult=(PutObjectResult)result;
        if (uploadServiceResult == null)         uploadServiceResult=new UploadServiceResult();
        uploadServiceResult.httpCode=putObjectResult.httpCode;
        uploadServiceResult.httpMessage=putObjectResult.httpMessage;
        uploadServiceResult.headers=putObjectResult.headers;
        uploadServiceResult.eTag=putObjectResult.eTag;
      }
      UPLOAD_PART_COUNT.decrementAndGet();
    }
    @Override public void onFail(    CosXmlRequest request,    CosXmlClientException exception,    CosXmlServiceException serviceException){
synchronized (objectSync) {
        if (exception != null) {
          mException=exception;
        }
 else {
          mException=serviceException;
        }
        ERROR_EXIT_FLAG=1;
      }
    }
  }
);
  while (UPLOAD_PART_COUNT.get() > 0 && ERROR_EXIT_FLAG == 0)   ;
  if (ERROR_EXIT_FLAG > 0) {
switch (ERROR_EXIT_FLAG) {
case 2:
      realCancel();
    clear();
  throw new CosXmlClientException(""String_Node_Str"");
case 3:
throw new CosXmlClientException(""String_Node_Str"");
case 1:
realCancel();
if (mException != null) {
if (mException instanceof CosXmlClientException) {
throw (CosXmlClientException)mException;
}
if (mException instanceof CosXmlServiceException) {
throw (CosXmlServiceException)mException;
}
}
 else {
throw new CosXmlClientException(""String_Node_Str"");
}
}
}
uploadServiceResult.accessUrl=cosXmlService.getAccessUrl(putObjectRequest);
return uploadServiceResult;
}","/** 
 * small file using put object api
 */
private UploadServiceResult putObject(final String bucket,String cosPath,String srcPath) throws CosXmlClientException, CosXmlServiceException {
  UPLOAD_PART_COUNT.set(1);
  putObjectRequest=new PutObjectRequest(bucket,cosPath,srcPath);
  putObjectRequest.setProgressListener(cosXmlProgressListener);
  setSignTime(putObjectRequest);
  setRequestHeaders(putObjectRequest);
  cosXmlService.putObjectAsync(putObjectRequest,new CosXmlResultListener(){
    @Override public void onSuccess(    CosXmlRequest request,    CosXmlResult result){
synchronized (objectSync) {
        PutObjectResult putObjectResult=(PutObjectResult)result;
        if (uploadServiceResult == null)         uploadServiceResult=new UploadServiceResult();
        uploadServiceResult.httpCode=putObjectResult.httpCode;
        uploadServiceResult.httpMessage=putObjectResult.httpMessage;
        uploadServiceResult.headers=putObjectResult.headers;
        uploadServiceResult.eTag=putObjectResult.eTag;
      }
      UPLOAD_PART_COUNT.decrementAndGet();
    }
    @Override public void onFail(    CosXmlRequest request,    CosXmlClientException exception,    CosXmlServiceException serviceException){
synchronized (objectSync) {
        if (exception != null) {
          mException=exception;
        }
 else {
          mException=serviceException;
        }
        ERROR_EXIT_FLAG=1;
      }
    }
  }
);
  while (UPLOAD_PART_COUNT.get() > 0 && ERROR_EXIT_FLAG == 0)   ;
  if (ERROR_EXIT_FLAG > 0) {
switch (ERROR_EXIT_FLAG) {
case 2:
      realCancel();
    clear();
  throw new CosXmlClientException(""String_Node_Str"");
case 3:
throw new CosXmlClientException(""String_Node_Str"");
case 1:
realCancel();
if (mException != null) {
if (mException instanceof CosXmlClientException) {
throw (CosXmlClientException)mException;
}
if (mException instanceof CosXmlServiceException) {
throw (CosXmlServiceException)mException;
}
}
 else {
throw new CosXmlClientException(""String_Node_Str"");
}
}
}
uploadServiceResult.accessUrl=cosXmlService.getAccessUrl(putObjectRequest);
return uploadServiceResult;
}"
39959,"protected void initPartNumber() throws CosXmlClientException {
  if (srcPath != null) {
    File file=new File(srcPath);
    if (!file.exists()) {
      throw new CosXmlClientException(""String_Node_Str"");
    }
    fileLength=file.length();
  }
  if (fileLength > 0 && sliceSize > 0) {
    int count=(int)(fileLength / sliceSize);
    int i=1;
    for (; i < count; ++i) {
      PartStruct partStruct=new PartStruct();
      partStruct.partNumber=i;
      partStruct.alreadyUpload=false;
      partStruct.offset=(i - 1) * sliceSize;
      partStruct.sliceSize=sliceSize;
      partStructMap.put(i,partStruct);
    }
    PartStruct partStruct=new PartStruct();
    partStruct.partNumber=i;
    partStruct.alreadyUpload=false;
    partStruct.offset=(i - 1) * sliceSize;
    partStruct.sliceSize=(int)(fileLength - partStruct.offset);
    partStructMap.put(i,partStruct);
    UPLOAD_PART_COUNT.set(count);
  }
}","protected void initPartNumber() throws CosXmlClientException {
  if (srcPath != null) {
    File file=new File(srcPath);
    if (!file.exists()) {
      throw new CosXmlClientException(""String_Node_Str"");
    }
    fileLength=file.length();
  }
  if (fileLength > 0 && sliceSize > 0) {
    int count=(int)(fileLength / sliceSize);
    int i=1;
    for (; i < count; ++i) {
      PartStruct partStruct=new PartStruct();
      partStruct.partNumber=i;
      partStruct.alreadyUpload=false;
      partStruct.offset=(i - 1) * sliceSize;
      partStruct.sliceSize=sliceSize;
      partStructMap.put(i,partStruct);
    }
    PartStruct partStruct=new PartStruct();
    partStruct.partNumber=i;
    partStruct.alreadyUpload=false;
    partStruct.offset=(i - 1) * sliceSize;
    partStruct.sliceSize=(int)(fileLength - partStruct.offset);
    partStructMap.put(i,partStruct);
    UPLOAD_PART_COUNT.set(i);
  }
}"
39960,"public void checkParameters() throws CosXmlClientException {
  if (bucket == null) {
    throw new CosXmlClientException(""String_Node_Str"");
  }
  if (cosPath == null) {
    throw new CosXmlClientException(""String_Node_Str"");
  }
  if (appid == null) {
    throw new CosXmlClientException(""String_Node_Str"");
  }
  if (region == null) {
    throw new CosXmlClientException(""String_Node_Str"");
  }
  try {
    cosPath=URLEncodeUtils.cosPathEncode(cosPath);
  }
 catch (  UnsupportedEncodingException e) {
    throw new CosXmlClientException(e);
  }
}","public void checkParameters() throws CosXmlClientException {
  if (bucket == null) {
    throw new CosXmlClientException(""String_Node_Str"");
  }
  if (cosPath == null) {
    throw new CosXmlClientException(""String_Node_Str"");
  }
  if (appid == null) {
    throw new CosXmlClientException(""String_Node_Str"");
  }
  if (region == null) {
    throw new CosXmlClientException(""String_Node_Str"");
  }
  cosPath=URLEncodeUtils.cosPathEncode(cosPath);
}"
39961,"private synchronized void realCancel(){
  if (mInitMultipartUploadRequest != null) {
    cosXmlService.cancel(mInitMultipartUploadRequest);
  }
  mInitMultipartUploadRequest=null;
  if (mListPartsRequest != null) {
    cosXmlService.cancel(mListPartsRequest);
  }
  mListPartsRequest=null;
  if (uploadPartRequestLongMap != null) {
    Set<UploadPartRequest> set=uploadPartRequestLongMap.keySet();
    Iterator<UploadPartRequest> iterator=set.iterator();
    while (iterator.hasNext()) {
      cosXmlService.cancel(iterator.next());
    }
    uploadPartRequestLongMap.clear();
  }
  uploadPartRequestLongMap=null;
  if (mCompleteMultiUploadRequest != null) {
    cosXmlService.cancel(mCompleteMultiUploadRequest);
  }
  mCompleteMultiUploadRequest=null;
  if (partStructMap != null) {
    partStructMap.clear();
  }
  partStructMap=null;
}","private synchronized void realCancel(){
  if (mInitMultipartUploadRequest != null) {
    cosXmlService.cancel(mInitMultipartUploadRequest);
  }
  if (mListPartsRequest != null) {
    cosXmlService.cancel(mListPartsRequest);
  }
  if (uploadPartRequestLongMap != null) {
    Set<UploadPartRequest> set=uploadPartRequestLongMap.keySet();
    Iterator<UploadPartRequest> iterator=set.iterator();
    while (iterator.hasNext()) {
      cosXmlService.cancel(iterator.next());
    }
  }
  if (mCompleteMultiUploadRequest != null) {
    cosXmlService.cancel(mCompleteMultiUploadRequest);
  }
}"
39962,"/** 
 * End to end execution of experiment for a single query.
 * @param query              query to execute
 * @param connectionDataProd data of db connection for production database
 * @param connectionDataTest data of db connection for test database
 */
public static QueryExperimentResult runForQuery(String query,ConnectionData connectionDataProd,ConnectionData connectionDataTest,String packageName){
  Path experimentPath=Paths.get(System.getProperty(""String_Node_Str""),""String_Node_Str"",packageName);
  try {
    Files.createDirectories(experimentPath);
  }
 catch (  IOException e) {
    System.err.println(e);
  }
  URL gradlePath=Runner.class.getResource(""String_Node_Str"");
  try {
    Files.copy(Paths.get(gradlePath.toURI().toString()),Paths.get(experimentPath.toUri().toString(),""String_Node_Str""));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  URISyntaxException e) {
    e.printStackTrace();
  }
  Path testClassPath=Paths.get(experimentPath.toAbsolutePath().toString(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",packageName);
  if (!Files.exists(testClassPath)) {
    try {
      Files.createDirectories(testClassPath);
    }
 catch (    IOException e) {
      System.err.println(e);
    }
  }
  BrewExecutor brewExecutor=new BrewExecutor(connectionDataProd,connectionDataTest,query,packageName);
  brewExecutor.executeBrew(testClassPath,""String_Node_Str"");
  QueryMutator queryMutator=new QueryMutator(query,connectionDataProd.getDatabase());
  List<String> queryMutants=queryMutator.createMutants();
  for (int i=0; i < queryMutants.size(); i++) {
    brewExecutor.brewWithMutatedQuery(brewExecutor.getQueryResult(),testClassPath,""String_Node_Str"" + i);
  }
  try {
    Process proc;
    ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    pb.directory(experimentPath.toFile());
    proc=pb.start();
    proc.waitFor();
    final int exitCode=proc.exitValue();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return null;
}","/** 
 * End to end execution of experiment for a single query.
 * @param query              query to execute
 * @param connectionDataProd data of db connection for production database
 * @param connectionDataTest data of db connection for test database
 */
public static QueryExperimentResult runForQuery(String query,ConnectionData connectionDataProd,ConnectionData connectionDataTest,String packageName){
  Path experimentPath=Paths.get(System.getProperty(""String_Node_Str""),""String_Node_Str"",packageName);
  try {
    Files.createDirectories(experimentPath);
  }
 catch (  IOException e) {
    System.err.println(e);
  }
  URL gradlePathURL=Runner.class.getClassLoader().getResource(""String_Node_Str"");
  Path gradlePath=null;
  try {
    gradlePath=Paths.get(gradlePathURL.toURI());
  }
 catch (  URISyntaxException e) {
    e.printStackTrace();
  }
  try {
    Files.copy(Paths.get(gradlePath.toString()),Paths.get(experimentPath.toString(),""String_Node_Str""));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  Path testClassPath=Paths.get(experimentPath.toAbsolutePath().toString(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + packageName);
  if (!Files.exists(testClassPath)) {
    try {
      Files.createDirectories(testClassPath);
    }
 catch (    IOException e) {
      System.err.println(e);
    }
  }
  BrewExecutor brewExecutor=new BrewExecutor(connectionDataProd,connectionDataTest,query,""String_Node_Str"" + packageName);
  brewExecutor.executeBrew(testClassPath,""String_Node_Str"");
  QueryMutator queryMutator=new QueryMutator(query,connectionDataProd.getDatabase());
  List<String> queryMutants=queryMutator.createMutants();
  for (int i=0; i < queryMutants.size(); i++) {
    brewExecutor.brewWithMutatedQuery(brewExecutor.getQueryResult(),testClassPath,""String_Node_Str"" + i);
  }
  try {
    Process proc;
    ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    pb.directory(experimentPath.toFile());
    proc=pb.start();
    proc.waitFor();
    final int exitCode=proc.exitValue();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return null;
}"
39963,"public static void main(String[] args){
  int startIndex=Integer.valueOf(args[0]);
  int stepSize=Integer.valueOf(args[1]);
  BufferedReader reader_erpnext=new BufferedReader(new InputStreamReader(Runner.class.getResourceAsStream(""String_Node_Str"")));
  Stream<String> erpnext=reader_erpnext.lines();
  BufferedReader reader_espocrm=new BufferedReader(new InputStreamReader(Runner.class.getResourceAsStream(""String_Node_Str"")));
  Stream<String> espocrm=reader_espocrm.lines();
  BufferedReader reader_suitecrm=new BufferedReader(new InputStreamReader(Runner.class.getResourceAsStream(""String_Node_Str"")));
  Stream<String> suitecrm=reader_suitecrm.lines();
  try {
    reader_erpnext.close();
    reader_espocrm.close();
    reader_suitecrm.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  QueryReader queryReader=new QueryReader();
  List<String> allQueries=queryReader.readQueries(erpnext,espocrm,suitecrm);
  ConnectionData connectionDataProd=CONNECTION_DATA_ERPNEXT_PROD;
  ConnectionData connectionDataTest=CONNECTION_DATA_ERPNEXT_TEST;
  for (int i=startIndex; i < allQueries.size(); i+=stepSize) {
    if (i >= AMOUNT_QUERIES_ERPNEXT && i < AMOUNT_QUERIES_ERPNEXT + AMOUNT_QUERIES_ESPOCRM) {
      connectionDataProd=CONNECTION_DATA_ESPOCRM_PROD;
      connectionDataTest=CONNECTION_DATA_ESPOCRM_TEST;
    }
 else     if (i >= AMOUNT_QUERIES_ERPNEXT + AMOUNT_QUERIES_ESPOCRM) {
      connectionDataProd=CONNECTION_DATA_SUITECRM_PROD;
      connectionDataTest=CONNECTION_DATA_SUITECRM_TEST;
    }
    runForQuery(allQueries.get(i),connectionDataProd,connectionDataTest,String.valueOf(i));
  }
}","public static void main(String[] args){
  int startIndex=Integer.valueOf(args[0]);
  int stepSize=Integer.valueOf(args[1]);
  BufferedReader reader_erpnext=new BufferedReader(new InputStreamReader(Runner.class.getClassLoader().getResourceAsStream(""String_Node_Str"")));
  Stream<String> erpnext=reader_erpnext.lines();
  BufferedReader reader_espocrm=new BufferedReader(new InputStreamReader(Runner.class.getClassLoader().getResourceAsStream(""String_Node_Str"")));
  Stream<String> espocrm=reader_espocrm.lines();
  BufferedReader reader_suitecrm=new BufferedReader(new InputStreamReader(Runner.class.getClassLoader().getResourceAsStream(""String_Node_Str"")));
  Stream<String> suitecrm=reader_suitecrm.lines();
  QueryReader queryReader=new QueryReader();
  List<String> allQueries=queryReader.readQueries(erpnext,espocrm,suitecrm);
  try {
    reader_erpnext.close();
    reader_espocrm.close();
    reader_suitecrm.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  ConnectionData connectionDataProd=CONNECTION_DATA_ERPNEXT_PROD;
  ConnectionData connectionDataTest=CONNECTION_DATA_ERPNEXT_TEST;
  for (int i=startIndex; i < allQueries.size(); i+=stepSize) {
    if (i >= AMOUNT_QUERIES_ERPNEXT && i < AMOUNT_QUERIES_ERPNEXT + AMOUNT_QUERIES_ESPOCRM) {
      connectionDataProd=CONNECTION_DATA_ESPOCRM_PROD;
      connectionDataTest=CONNECTION_DATA_ESPOCRM_TEST;
    }
 else     if (i >= AMOUNT_QUERIES_ERPNEXT + AMOUNT_QUERIES_ESPOCRM) {
      connectionDataProd=CONNECTION_DATA_SUITECRM_PROD;
      connectionDataTest=CONNECTION_DATA_SUITECRM_TEST;
    }
    runForQuery(allQueries.get(i),connectionDataProd,connectionDataTest,String.valueOf(i));
  }
}"
39964,"@ParameterizedTest @ArgumentsSource(PrintConsumerArgumentsProvider.class) void testDefault(List<Output> in,String expected){
  PrintStream stdOut=System.out;
  try {
    OutputStream outStream=new ByteArrayOutputStream();
    PrintStream printStream=new PrintStream(outStream,true);
    System.setOut(printStream);
    PrintConsumer printConsumer=new PrintConsumer();
    printConsumer.consumeOutput(in);
    String actual=outStream.toString();
    assertThat(actual).isEqualTo(expected);
  }
  finally {
    System.setOut(stdOut);
  }
}","@ParameterizedTest @ArgumentsSource(PrintConsumerArgumentsProvider.class) void testDefault(List<Output> in,String expected) throws UnsupportedEncodingException {
  PrintStream stdOut=System.out;
  try {
    ByteArrayOutputStream outStream=new ByteArrayOutputStream();
    PrintStream printStream=new PrintStream(outStream,true,StandardCharsets.UTF_8.name());
    System.setOut(printStream);
    PrintConsumer printConsumer=new PrintConsumer();
    printConsumer.consumeOutput(in);
    String actual=outStream.toString(StandardCharsets.UTF_8.name());
    assertThat(actual).isEqualTo(expected);
  }
  finally {
    System.setOut(stdOut);
  }
}"
39965,"@ParameterizedTest @ArgumentsSource(PrintConsumerArgumentsProvider.class) void testSingle(List<Output> in,String expected){
  OutputStream outStream=new ByteArrayOutputStream();
  PrintStream printStream=new PrintStream(outStream,true);
  PrintConsumer printConsumer=new PrintConsumer(printStream);
  printConsumer.consumeOutput(in);
  String actual=outStream.toString();
  assertThat(actual).isEqualTo(expected);
}","@ParameterizedTest @ArgumentsSource(PrintConsumerArgumentsProvider.class) void testSingle(List<Output> in,String expected) throws UnsupportedEncodingException {
  ByteArrayOutputStream outStream=new ByteArrayOutputStream();
  PrintStream printStream=new PrintStream(outStream,true,StandardCharsets.UTF_8.name());
  PrintConsumer printConsumer=new PrintConsumer(printStream);
  printConsumer.consumeOutput(in);
  String actual=outStream.toString(StandardCharsets.UTF_8.name());
  assertThat(actual).isEqualTo(expected);
}"
39966,"public static void main(String[] args){
  ConnectionData connectionDataProd=new ConnectionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ConnectionData connectionDataTest=new ConnectionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  JUnitGeneratorSettings jUnitGeneratorSettings=new JUnitGeneratorSettings(connectionDataTest,""String_Node_Str"",""String_Node_Str"",true,true,true,false,true);
  Pipeline pipeline=Pipeline.builder().queryRunner(new EvoSQLRunner()).connectionData(connectionDataProd).sqlQuery(QUERY_TO_RUN).resultProcessor(new Pipeline.ResultProcessor(new JUnit5TestGenerator(jUnitGeneratorSettings),new PostgreSQLOptions(),new FileConsumer(Paths.get(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")))).resultProcessor(new Pipeline.ResultProcessor(new JUnit5TestGenerator(jUnitGeneratorSettings),new PostgreSQLOptions(),new PrintConsumer())).build();
  Connection c=null;
  try {
    c=DriverManager.getConnection(connectionDataProd.getConnectionString());
    Statement aids=c.createStatement();
    aids.execute(""String_Node_Str"");
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  pipeline.execute();
}","public static void main(String[] args){
  ConnectionData connectionDataProd=new ConnectionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ConnectionData connectionDataTest=new ConnectionData(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  JUnitGeneratorSettings jUnitGeneratorSettings=new JUnitGeneratorSettings(connectionDataTest,""String_Node_Str"",""String_Node_Str"",true,true,true,false,true);
  Pipeline pipeline=Pipeline.builder().queryRunner(new EvoSQLRunner()).connectionData(connectionDataProd).sqlQuery(QUERY_TO_RUN).resultProcessor(new Pipeline.ResultProcessor(new JUnit5TestGenerator(jUnitGeneratorSettings),new PostgreSQLOptions(),new FileConsumer(Paths.get(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")))).resultProcessor(new Pipeline.ResultProcessor(new JUnit5TestGenerator(jUnitGeneratorSettings),new PostgreSQLOptions(),new PrintConsumer())).build();
  pipeline.execute();
}"
39967,"/** 
 * Generates a method specification for the runSQL method.
 * @return method.
 */
private MethodSpec generateRunSQL(){
  MethodSpec.Builder runSQL=MethodSpec.methodBuilder(""String_Node_Str"").addModifiers(Modifier.PRIVATE,Modifier.STATIC).returns(TypeName.INT).addParameter(String.class,""String_Node_Str"").addParameter(boolean.class,""String_Node_Str"");
  if (jUnitGeneratorSettings.isGenerateSqlExecutorImplementation()) {
    runSQL.addJavadoc(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").beginControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",Connection.class,DriverManager.class,NAME_DB_JDBC_URL,NAME_DB_USER,NAME_DB_PASSWORD).addStatement(""String_Node_Str"" + ""String_Node_Str"",Statement.class).beginControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"").addStatement(""String_Node_Str"").nextControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",ResultSet.class).beginControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"").nextControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"").endControlFlow().nextControlFlow(""String_Node_Str"",SQLException.class).addStatement(""String_Node_Str"").addStatement(""String_Node_Str"").endControlFlow();
  }
 else {
    runSQL.addJavadoc(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").addComment(""String_Node_Str"").addStatement(""String_Node_Str"");
  }
  return runSQL.build();
}","/** 
 * Generates a method specification for the runSQL method.
 * @return method.
 */
private MethodSpec generateRunSQL(){
  MethodSpec.Builder runSQL=MethodSpec.methodBuilder(""String_Node_Str"").addModifiers(Modifier.PRIVATE,Modifier.STATIC).returns(TypeName.INT).addParameter(String.class,""String_Node_Str"").addParameter(boolean.class,""String_Node_Str"");
  if (jUnitGeneratorSettings.isGenerateSqlExecutorImplementation()) {
    runSQL.addJavadoc(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").beginControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",Connection.class,DriverManager.class,NAME_DB_JDBC_URL,NAME_DB_USER,NAME_DB_PASSWORD).addStatement(""String_Node_Str"" + ""String_Node_Str"",Statement.class).beginControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"").addStatement(""String_Node_Str"").nextControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"",ResultSet.class).beginControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"").nextControlFlow(""String_Node_Str"").addStatement(""String_Node_Str"").endControlFlow().endControlFlow().nextControlFlow(""String_Node_Str"",SQLException.class).addStatement(""String_Node_Str"").addStatement(""String_Node_Str"").endControlFlow();
  }
 else {
    runSQL.addJavadoc(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").addComment(""String_Node_Str"").addStatement(""String_Node_Str"");
  }
  return runSQL.build();
}"
39968,"@Test void constructorTest(){
  List<String> columns=new ArrayList<>();
  columns.add(""String_Node_Str"");
  columns.add(""String_Node_Str"");
  TableSchema tableSchema=new TableSchema(""String_Node_Str"",columns);
  assertThat(tableSchema.getName()).isEqualTo(""String_Node_Str"");
  assertThat(tableSchema.getColumns()).isEqualTo(columns);
}","@Test void constructorTest(){
  List<FixtureColumn> columns=new ArrayList<>();
  columns.add(new FixtureColumn(""String_Node_Str"",""String_Node_Str""));
  columns.add(new FixtureColumn(""String_Node_Str"",""String_Node_Str""));
  TableSchema tableSchema=new TableSchema(""String_Node_Str"",columns);
  assertThat(tableSchema.getName()).isEqualTo(""String_Node_Str"");
  assertThat(tableSchema.getColumns()).isEqualTo(columns);
}"
39969,"@Override public void run(){
  new MaterialDialog.Builder(activity).cancelable(false).title(stringValuesMap.get(Constants.ANDVERSION_WHATSNEW_TITLE)).content(features).positiveText(Constants.ANDVERSION_OK).show();
}","@Override public void run(){
  new MaterialDialog.Builder(activity).cancelable(false).title(stringValuesMap.get(Constants.ANDVERSION_WHATSNEW_TITLE)).content(features).positiveText(stringValuesMap.get(Constants.ANDVERSION_OK)).show();
}"
39970,"@Override public void showUpdateFeatures(final String features){
  final HashMap<String,String> stringValuesMap=mPresenter.getStringValues();
  activity.runOnUiThread(new Runnable(){
    @Override public void run(){
      new MaterialDialog.Builder(activity).cancelable(false).title(stringValuesMap.get(Constants.ANDVERSION_WHATSNEW_TITLE)).content(features).positiveText(Constants.ANDVERSION_OK).show();
    }
  }
);
}","@Override public void showUpdateFeatures(final String features){
  final HashMap<String,String> stringValuesMap=mPresenter.getStringValues();
  activity.runOnUiThread(new Runnable(){
    @Override public void run(){
      new MaterialDialog.Builder(activity).cancelable(false).title(stringValuesMap.get(Constants.ANDVERSION_WHATSNEW_TITLE)).content(features).positiveText(stringValuesMap.get(Constants.ANDVERSION_OK)).show();
    }
  }
);
}"
39971,"public double calculate(String expression) throws ParsingException {
  ArrayList<Object> tokens=toReversePolishNotation(expression);
  Stack<Double> stack=new Stack<>();
  for (  Object token : tokens) {
    if (token instanceof Double) {
      stack.add((Double)token);
    }
 else     if (token.equals(""String_Node_Str"")) {
      double a;
      try {
        a=stack.pop();
        stack.push(-a);
      }
 catch (      EmptyStackException e) {
        throw new ParsingException(""String_Node_Str"");
      }
    }
 else {
      double a, b;
      try {
        a=stack.pop();
        b=stack.pop();
      }
 catch (      EmptyStackException e) {
        throw new ParsingException(""String_Node_Str"");
      }
      String operator=(String)token;
switch (operator) {
case ""String_Node_Str"":
        stack.add(a * b);
      break;
case ""String_Node_Str"":
    stack.add(a + b);
  break;
case ""String_Node_Str"":
stack.add(b / a);
break;
case ""String_Node_Str"":
stack.add(b - a);
}
}
}
if (stack.size() != 1) {
throw new ParsingException(""String_Node_Str"");
}
return stack.remove(stack.size() - 1);
}","public double calculate(String expression) throws ParsingException {
  ArrayList<Object> tokens=toReversePolishNotation(expression);
  Stack<Double> stack=new Stack<>();
  for (  Object token : tokens) {
    if (token instanceof Double) {
      stack.add((Double)token);
    }
 else     if (token.equals(""String_Node_Str"")) {
      double a;
      try {
        a=stack.pop();
        stack.push(-a);
      }
 catch (      EmptyStackException e) {
        throw new ParsingException(""String_Node_Str"");
      }
    }
 else {
      double a;
      double b;
      try {
        a=stack.pop();
        b=stack.pop();
      }
 catch (      EmptyStackException e) {
        throw new ParsingException(""String_Node_Str"");
      }
      String operator=(String)token;
switch (operator) {
case ""String_Node_Str"":
        stack.add(a * b);
      break;
case ""String_Node_Str"":
    stack.add(a + b);
  break;
case ""String_Node_Str"":
stack.add(b / a);
break;
case ""String_Node_Str"":
stack.add(b - a);
break;
default :
break;
}
}
}
if (stack.size() != 1) {
throw new ParsingException(""String_Node_Str"");
}
return stack.remove(stack.size() - 1);
}"
39972,"public void rebuild(String expression) throws ParsingException {
  Integer pos;
  Character currentPrev;
  Character prevAtRebuilded;
  if (expression == null) {
    throw new ParsingException(""String_Node_Str"",new NullPointerException());
  }
  expression=expression.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  expression='#' + expression + '#';
  Stack<Character> temp=new Stack<>();
  temp.add('#');
  pos=1;
  currentPrev='#';
  prevAtRebuilded=currentPrev;
  while (!temp.isEmpty()) {
    char symbol=expression.charAt(pos);
    if (""String_Node_Str"".indexOf(symbol) != -1) {
      fstPriorityHandler(symbol,pos,currentPrev,prevAtRebuilded,temp);
      continue;
    }
    if (""String_Node_Str"".indexOf(symbol) != -1) {
      sndPriorityHandler(symbol,pos,currentPrev,prevAtRebuilded,temp);
      continue;
    }
    if (symbol == '(') {
      temp.add(symbol);
      currentPrev=symbol;
      pos++;
      continue;
    }
    if (symbol == ')') {
      closeBrace(pos,currentPrev,prevAtRebuilded,temp);
      continue;
    }
    if (symbol == '#') {
      endSymbol(pos,currentPrev,prevAtRebuilded,temp);
      continue;
    }
    if (NUMBERS.indexOf(symbol) != -1) {
      rebuildedExpression+=symbol;
      prevAtRebuilded=symbol;
      currentPrev=symbol;
      pos++;
    }
 else {
      throw new ParsingException(""String_Node_Str"");
    }
  }
  if (rebuildedExpression.equals(""String_Node_Str"")) {
    throw new ParsingException(""String_Node_Str"");
  }
  String tmp=""String_Node_Str"";
  for (int i=0; i < rebuildedExpression.length(); i++) {
    if (""String_Node_Str"".indexOf(rebuildedExpression.charAt(i)) == -1) {
      while (temp.size() != 1 && !temp.isEmpty()) {
        char a=temp.pop();
        char b=temp.pop();
        if (a == b) {
          temp.add('+');
        }
 else {
          temp.add('-');
        }
      }
      if (temp.size() == 1) {
        tmp+=temp.pop();
      }
      tmp+=rebuildedExpression.charAt(i);
    }
 else {
      temp.add(rebuildedExpression.charAt(i));
    }
  }
  rebuildedExpression=tmp;
}","public void rebuild(String expression) throws ParsingException {
  if (expression == null) {
    throw new ParsingException(""String_Node_Str"",new NullPointerException());
  }
  expression=expression.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  expression='#' + expression + '#';
  Stack<Character> temp=new Stack<>();
  temp.add('#');
  pos=1;
  currentPrev='#';
  prevAtRebuilded=currentPrev;
  while (!temp.isEmpty()) {
    char symbol=expression.charAt(pos);
    if (""String_Node_Str"".indexOf(symbol) != -1) {
      fstPriorityHandler(symbol,temp);
      continue;
    }
    if (""String_Node_Str"".indexOf(symbol) != -1) {
      sndPriorityHandler(symbol,temp);
      continue;
    }
    if (symbol == '(') {
      temp.add(symbol);
      currentPrev=symbol;
      pos++;
      continue;
    }
    if (symbol == ')') {
      closeBrace(temp);
      continue;
    }
    if (symbol == '#') {
      endSymbol(temp);
      continue;
    }
    if (NUMBERS.indexOf(symbol) != -1) {
      rebuildedExpression+=symbol;
      prevAtRebuilded=symbol;
      currentPrev=symbol;
      pos++;
    }
 else {
      throw new ParsingException(""String_Node_Str"");
    }
  }
  if (rebuildedExpression.equals(""String_Node_Str"")) {
    throw new ParsingException(""String_Node_Str"");
  }
  String tmp=""String_Node_Str"";
  for (int i=0; i < rebuildedExpression.length(); i++) {
    if (""String_Node_Str"".indexOf(rebuildedExpression.charAt(i)) == -1) {
      while (temp.size() != 1 && !temp.isEmpty()) {
        char a=temp.pop();
        char b=temp.pop();
        if (a == b) {
          temp.add('+');
        }
 else {
          temp.add('-');
        }
      }
      if (temp.size() == 1) {
        tmp+=temp.pop();
      }
      tmp+=rebuildedExpression.charAt(i);
    }
 else {
      temp.add(rebuildedExpression.charAt(i));
    }
  }
  rebuildedExpression=tmp;
}"
39973,"private void fstPriorityHandler(char symbol,Integer pos,Character currentPrev,Character prevAtRebuilded,Stack<Character> temp) throws ParsingException {
  if (""String_Node_Str"".indexOf(currentPrev) != -1) {
    throw new ParsingException(""String_Node_Str"");
  }
  if (NUMBERS.indexOf(prevAtRebuilded) != -1) {
    rebuildedExpression+=""String_Node_Str"";
    prevAtRebuilded=' ';
  }
  if (temp.peek() == '*' || temp.peek() == '/') {
    prevAtRebuilded=' ';
    rebuildedExpression+=temp.pop() + ""String_Node_Str"";
  }
 else {
    temp.add(symbol);
    currentPrev=symbol;
    pos++;
  }
}","private void fstPriorityHandler(char symbol,Stack<Character> temp) throws ParsingException {
  if (""String_Node_Str"".indexOf(currentPrev) != -1) {
    throw new ParsingException(""String_Node_Str"");
  }
  if (NUMBERS.indexOf(prevAtRebuilded) != -1) {
    rebuildedExpression+=""String_Node_Str"";
    prevAtRebuilded=' ';
  }
  if (temp.peek() == '*' || temp.peek() == '/') {
    prevAtRebuilded=' ';
    rebuildedExpression+=temp.pop() + ""String_Node_Str"";
  }
 else {
    temp.add(symbol);
    currentPrev=symbol;
    pos++;
  }
}"
39974,"private void sndPriorityHandler(char symbol,Integer pos,Character currentPrev,Character prevAtRebuilded,Stack<Character> temp) throws ParsingException {
  if (""String_Node_Str"".indexOf(currentPrev) != -1) {
    throw new ParsingException(""String_Node_Str"");
  }
  if (NUMBERS.indexOf(prevAtRebuilded) != -1) {
    rebuildedExpression+=""String_Node_Str"";
    prevAtRebuilded=' ';
  }
  if (""String_Node_Str"".indexOf(currentPrev) != -1) {
    currentPrev=symbol;
    prevAtRebuilded=symbol;
    rebuildedExpression+=symbol;
    pos++;
    return;
  }
  if (temp.peek() == '#' || temp.peek() == '(') {
    temp.add(symbol);
    currentPrev=symbol;
    pos++;
  }
 else {
    prevAtRebuilded=' ';
    rebuildedExpression+=temp.pop() + ""String_Node_Str"";
  }
}","private void sndPriorityHandler(char symbol,Stack<Character> temp) throws ParsingException {
  if (""String_Node_Str"".indexOf(currentPrev) != -1) {
    throw new ParsingException(""String_Node_Str"");
  }
  if (NUMBERS.indexOf(prevAtRebuilded) != -1) {
    rebuildedExpression+=""String_Node_Str"";
    prevAtRebuilded=' ';
  }
  if (""String_Node_Str"".indexOf(currentPrev) != -1) {
    currentPrev=symbol;
    prevAtRebuilded=symbol;
    rebuildedExpression+=symbol;
    pos++;
    return;
  }
  if (temp.peek() == '#' || temp.peek() == '(') {
    temp.add(symbol);
    currentPrev=symbol;
    pos++;
  }
 else {
    prevAtRebuilded=' ';
    rebuildedExpression+=temp.pop() + ""String_Node_Str"";
  }
}"
39975,"private void endSymbol(Integer pos,Character currentPrev,Character prevAtRebuilded,Stack<Character> temp) throws ParsingException {
  if (temp.peek() == '(') {
    throw new ParsingException(""String_Node_Str"");
  }
  if (temp.peek() == '#') {
    temp.pop();
  }
 else {
    if (NUMBERS.indexOf(prevAtRebuilded) != -1) {
      rebuildedExpression=rebuildedExpression.concat(""String_Node_Str"");
    }
    prevAtRebuilded=' ';
    rebuildedExpression=rebuildedExpression.concat(temp.pop() + ""String_Node_Str"");
  }
}","private void endSymbol(Stack<Character> temp) throws ParsingException {
  if (temp.peek() == '(') {
    throw new ParsingException(""String_Node_Str"");
  }
  if (temp.peek() == '#') {
    temp.pop();
  }
 else {
    if (NUMBERS.indexOf(prevAtRebuilded) != -1) {
      rebuildedExpression=rebuildedExpression.concat(""String_Node_Str"");
    }
    prevAtRebuilded=' ';
    rebuildedExpression=rebuildedExpression.concat(temp.pop() + ""String_Node_Str"");
  }
}"
39976,"private void closeBrace(Integer pos,Character currentPrev,Character prevAtRebuilded,Stack<Character> temp) throws ParsingException {
  if (currentPrev == '(') {
    throw new ParsingException(""String_Node_Str"");
  }
  if (temp.peek() == '#') {
    throw new ParsingException(""String_Node_Str"");
  }
  if (temp.peek() == '(') {
    currentPrev=')';
    pos++;
    temp.pop();
  }
 else {
    if (NUMBERS.indexOf(prevAtRebuilded) != -1) {
      rebuildedExpression=rebuildedExpression.concat(""String_Node_Str"");
    }
    prevAtRebuilded=' ';
    rebuildedExpression=rebuildedExpression.concat(temp.pop() + ""String_Node_Str"");
  }
}","private void closeBrace(Stack<Character> temp) throws ParsingException {
  if (currentPrev == '(') {
    throw new ParsingException(""String_Node_Str"");
  }
  if (temp.peek() == '#') {
    throw new ParsingException(""String_Node_Str"");
  }
  if (temp.peek() == '(') {
    currentPrev=')';
    pos++;
    temp.pop();
  }
 else {
    if (NUMBERS.indexOf(prevAtRebuilded) != -1) {
      rebuildedExpression=rebuildedExpression.concat(""String_Node_Str"");
    }
    prevAtRebuilded=' ';
    rebuildedExpression=rebuildedExpression.concat(temp.pop() + ""String_Node_Str"");
  }
}"
39977,"/** 
 * Evaluates a expression in it's inner state and returns it's final value
 * @return {@code double} value of expression
 * @throws ParsingException if given expression is not valid
 */
double evaluateRPN() throws ParsingException {
  for (int i=0; i < rpnExpression.length(); ++i) {
    char currentChar=rpnExpression.charAt(i);
    if (symbolIsDigit(currentChar)) {
      double result=Character.getNumericValue(currentChar);
      if (result == -1) {
        throw new ParsingException(""String_Node_Str"");
      }
 else {
        while (Character.isDigit(rpnExpression.charAt(i + 1))) {
          ++i;
          result=result * 10 + readDigitAt(i);
        }
        if (rpnExpression.charAt(i + 1) == '.') {
          ++i;
          double partAfterDot=1;
          while (Character.isDigit(rpnExpression.charAt(i + 1))) {
            ++i;
            partAfterDot*=0.1;
            result=result + partAfterDot * readDigitAt(i);
          }
          if (rpnExpression.charAt(i + 1) == '.') {
            throw new ParsingException(""String_Node_Str"");
          }
          rpnStack.push(result);
        }
 else {
          rpnStack.push(result);
        }
      }
      continue;
    }
    if (symbolIsOperator(currentChar)) {
      if (currentChar == '$') {
        if (!rpnStack.empty()) {
          double number=rpnStack.pop();
          rpnStack.push(-1 * number);
        }
 else {
          throw new ParsingException(""String_Node_Str"");
        }
      }
 else {
        if (rpnStack.size() >= 2) {
          eval_single(currentChar);
        }
 else {
          throw new ParsingException(""String_Node_Str"" + currentChar + ""String_Node_Str"");
        }
      }
    }
  }
  if (rpnStack.size() == 1) {
    return rpnStack.pop();
  }
 else {
    throw new ParsingException(""String_Node_Str"");
  }
}","/** 
 * Evaluates a expression in it's inner state and returns it's final value
 * @return {@code double} value of expression
 * @throws ParsingException if given expression is not valid
 */
double evaluateRPN() throws ParsingException {
  for (int i=0; i < rpnExpression.length(); ++i) {
    char currentChar=rpnExpression.charAt(i);
    if (symbolIsDigit(currentChar)) {
      double result=Character.getNumericValue(currentChar);
      if (result == -1) {
        throw new ParsingException(""String_Node_Str"");
      }
 else {
        while (Character.isDigit(rpnExpression.charAt(i + 1))) {
          ++i;
          result=result * 10 + readDigitAt(i);
        }
        if (rpnExpression.charAt(i + 1) == '.') {
          ++i;
          double partAfterDot=1;
          while (Character.isDigit(rpnExpression.charAt(i + 1))) {
            ++i;
            partAfterDot*=0.1;
            result=result + partAfterDot * readDigitAt(i);
          }
          if (rpnExpression.charAt(i + 1) == '.') {
            throw new ParsingException(""String_Node_Str"");
          }
          rpnStack.push(result);
        }
 else {
          rpnStack.push(result);
        }
      }
      continue;
    }
    if (symbolIsOperator(currentChar)) {
      if (currentChar == '$') {
        if (!rpnStack.empty()) {
          double number=rpnStack.pop();
          rpnStack.push(-1 * number);
        }
 else {
          throw new ParsingException(""String_Node_Str"");
        }
      }
 else {
        if (rpnStack.size() >= 2) {
          evalSingle(currentChar);
        }
 else {
          throw new ParsingException(""String_Node_Str"" + currentChar + ""String_Node_Str"");
        }
      }
    }
  }
  if (rpnStack.size() == 1) {
    return rpnStack.pop();
  }
 else {
    throw new ParsingException(""String_Node_Str"");
  }
}"
39978,"/** 
 * Initializes Evaluator and creates it's inner state
 * @param rpnExpression_ expression in Reverse Polish Notation
 * @return {@code Evaluator} object
 */
Evaluator(String rpnExpression_){
  rpnExpression=rpnExpression_;
  rpnStack=new java.util.Stack<>();
}","/** 
 * Initializes Evaluator and creates it's inner state
 * @param rpnExpr expression in Reverse Polish Notation
 * @return {@code Evaluator} object
 */
Evaluator(String rpnExpr){
  rpnExpression=rpnExpr;
  rpnStack=new java.util.Stack<>();
}"
39979,"@Override public double calculate(String expression) throws ParsingException {
  if (expression == null) {
    throw new ParsingException(""String_Node_Str"");
  }
 else {
    Parser LocalParser=new Parser(expression);
    String rpnExpression=LocalParser.parseRPN();
    Evaluator Evaluator=new Evaluator(rpnExpression);
    return Evaluator.evaluateRPN();
  }
}","@Override public double calculate(String expression) throws ParsingException {
  if (expression == null) {
    throw new ParsingException(""String_Node_Str"");
  }
 else {
    Parser localParser=new Parser(expression);
    String rpnExpression=localParser.parseRPN();
    Evaluator evaluator=new Evaluator(rpnExpression);
    return evaluator.evaluateRPN();
  }
}"
39980,"protected double evalUnary(String op,double a){
  if (op.equals(""String_Node_Str"")) {
    return a;
  }
  if (op.equals(""String_Node_Str"")) {
    return -a;
  }
  return 0;
}","/** 
 * Evaluates the unary operation.
 * @param op operation to evaluate
 * @param a  argument of the operation
 * @return the result of evaluation
 */
protected double evalUnary(String op,double a){
  if (op.equals(""String_Node_Str"")) {
    return a;
  }
  if (op.equals(""String_Node_Str"")) {
    return -a;
  }
  return 0;
}"
39981,"protected ArrayList<Token> reorder(ArrayList<Token> tokens){
  ArrayList<Token> result=new ArrayList<>();
  Stack<Token> stack=new Stack<>();
  for (  Token t : tokens) {
switch (t.getType()) {
case NUMBER:
      stack.push(t);
    break;
case UNARY_OP:
case BINARY_OP:
  while (!stack.empty() && stack.peek().getType() != TokenType.LEFTPAR && getPriority(stack.peek()) >= getPriority(t) && !isRightAssoc(stack.peek())) {
    result.add(stack.pop());
  }
case LEFTPAR:
stack.push(t);
break;
case RIGHTPAR:
while (!stack.empty() && stack.peek().getType() != TokenType.LEFTPAR) {
result.add(stack.pop());
}
stack.pop();
default :
}
}
while (!stack.empty()) {
result.add(stack.pop());
}
return result;
}","/** 
 * Converts the list of tokens in natural order into postfix notation.
 * @param tokens the list of tokens
 * @return the list of tokens in postfix notation
 */
protected ArrayList<Token> reorder(ArrayList<Token> tokens){
  ArrayList<Token> result=new ArrayList<>();
  Stack<Token> stack=new Stack<>();
  for (  Token t : tokens) {
switch (t.getType()) {
case NUMBER:
      stack.push(t);
    break;
case UNARY_OP:
case BINARY_OP:
  while (!stack.empty() && stack.peek().getType() != TokenType.LEFTPAR && getPrecedence(stack.peek()) >= getPrecedence(t) && !isRightAssoc(stack.peek())) {
    result.add(stack.pop());
  }
case LEFTPAR:
stack.push(t);
break;
case RIGHTPAR:
while (!stack.empty() && stack.peek().getType() != TokenType.LEFTPAR) {
result.add(stack.pop());
}
stack.pop();
default :
}
}
while (!stack.empty()) {
result.add(stack.pop());
}
return result;
}"
39982,"public double calculate(String expression) throws ParsingException {
  if (expression == null || expression.length() == 0) {
    throw new ParsingException(""String_Node_Str"");
  }
  ArrayList<Token> tokens=reorder(tokenize(expression));
  Stack<Double> st=new Stack<>();
  for (  Token t : tokens) {
    if (t.getType() == TokenType.NUMBER) {
      try {
        st.push(Double.parseDouble(t.getValue()));
      }
 catch (      NumberFormatException e) {
        throw new ParsingException(""String_Node_Str"" + t.getValue());
      }
    }
 else     if (t.getType() == TokenType.UNARY_OP) {
      if (st.empty()) {
        throw new ParsingException(""String_Node_Str"");
      }
      st.push(evalUnary(t.getValue(),st.pop()));
    }
 else     if (t.getType() == TokenType.BINARY_OP) {
      if (st.size() < 2) {
        throw new ParsingException(""String_Node_Str"");
      }
      double b=st.pop();
      double a=st.pop();
      st.push(evalBinary(t.getValue(),a,b));
    }
  }
  if (st.size() != 1) {
    throw new ParsingException(""String_Node_Str"");
  }
  return st.pop();
}","/** 
 * Evaluates an expression.
 * @param expression the expression to evaluate
 * @return the value of the expression
 * @throws ParsingException if the expression is invalid
 */
public double calculate(String expression) throws ParsingException {
  if (expression == null || expression.length() == 0) {
    throw new ParsingException(""String_Node_Str"");
  }
  ArrayList<Token> tokens=reorder(tokenize(expression));
  Stack<Double> st=new Stack<>();
  for (  Token t : tokens) {
    if (t.getType() == TokenType.NUMBER) {
      try {
        st.push(Double.parseDouble(t.getValue()));
      }
 catch (      NumberFormatException e) {
        throw new ParsingException(""String_Node_Str"" + t.getValue());
      }
    }
 else     if (t.getType() == TokenType.UNARY_OP) {
      if (st.empty()) {
        throw new ParsingException(""String_Node_Str"");
      }
      st.push(evalUnary(t.getValue(),st.pop()));
    }
 else     if (t.getType() == TokenType.BINARY_OP) {
      if (st.size() < 2) {
        throw new ParsingException(""String_Node_Str"");
      }
      double b=st.pop();
      double a=st.pop();
      st.push(evalBinary(t.getValue(),a,b));
    }
  }
  if (st.size() != 1) {
    throw new ParsingException(""String_Node_Str"");
  }
  return st.pop();
}"
39983,"protected boolean isRightAssoc(Token t){
  return t.getType() == TokenType.UNARY_OP;
}","/** 
 * Checks whether the operation is right-asociative.
 * @param t token with the operation
 * @return true if the operation is right-associative, false otherwise
 */
protected boolean isRightAssoc(Token t){
  return t.getType() == TokenType.UNARY_OP;
}"
39984,"protected ArrayList<Token> tokenize(String expression) throws ParsingException {
  ArrayList<Token> tokens=new ArrayList<>();
  String number=""String_Node_Str"";
  TokenType last=TokenType.LEFTPAR;
  int pars=0;
  for (  char c : (expression + ' ').toCharArray()) {
    if (Character.isDigit(c) || c == '.') {
      if (last == TokenType.NUMBER) {
        throw new ParsingException(""String_Node_Str"");
      }
      number+=c;
    }
 else     if (c == '+' || c == '-' || c == '*' || c == '/') {
      if (!number.isEmpty()) {
        tokens.add(new Token(TokenType.NUMBER,number));
        last=TokenType.NUMBER;
        number=""String_Node_Str"";
      }
      if (last == TokenType.LEFTPAR || last == TokenType.UNARY_OP || last == TokenType.BINARY_OP) {
        if (c != '+' && c != '-') {
          throw new ParsingException(""String_Node_Str"" + c);
        }
        tokens.add(new Token(TokenType.UNARY_OP,""String_Node_Str"" + c));
        last=TokenType.UNARY_OP;
      }
 else {
        tokens.add(new Token(TokenType.BINARY_OP,""String_Node_Str"" + c));
        last=TokenType.BINARY_OP;
      }
    }
 else     if (Character.isWhitespace(c)) {
      if (!number.isEmpty()) {
        tokens.add(new Token(TokenType.NUMBER,number));
        last=TokenType.NUMBER;
        number=""String_Node_Str"";
      }
    }
 else     if (c == '(') {
      if (!number.isEmpty() || last == TokenType.NUMBER || last == TokenType.RIGHTPAR) {
        throw new ParsingException(""String_Node_Str"");
      }
      tokens.add(new Token(TokenType.LEFTPAR,""String_Node_Str""));
      last=TokenType.LEFTPAR;
      pars++;
    }
 else     if (c == ')') {
      if (!number.isEmpty()) {
        tokens.add(new Token(TokenType.NUMBER,number));
        last=TokenType.NUMBER;
        number=""String_Node_Str"";
      }
      if (last == TokenType.LEFTPAR || last == TokenType.BINARY_OP || last == TokenType.UNARY_OP) {
        throw new ParsingException(""String_Node_Str"");
      }
      if (pars <= 0) {
        throw new ParsingException(""String_Node_Str"");
      }
      tokens.add(new Token(TokenType.RIGHTPAR,""String_Node_Str""));
      last=TokenType.RIGHTPAR;
      pars--;
    }
 else {
      throw new ParsingException(""String_Node_Str"" + c);
    }
  }
  if (pars != 0) {
    throw new ParsingException(""String_Node_Str"");
  }
  return tokens;
}","/** 
 * Converts the expression into a list of tokens.
 * @param expression the expression to convert
 * @return list of tokens
 * @throws ParsingException if the expression could not be tokenized
 */
protected ArrayList<Token> tokenize(String expression) throws ParsingException {
  ArrayList<Token> tokens=new ArrayList<>();
  String number=""String_Node_Str"";
  TokenType last=TokenType.LEFTPAR;
  int pars=0;
  for (  char c : (expression + ' ').toCharArray()) {
    if (Character.isDigit(c) || c == '.') {
      if (last == TokenType.NUMBER) {
        throw new ParsingException(""String_Node_Str"");
      }
      number+=c;
    }
 else     if (c == '+' || c == '-' || c == '*' || c == '/') {
      if (!number.isEmpty()) {
        tokens.add(new Token(TokenType.NUMBER,number));
        last=TokenType.NUMBER;
        number=""String_Node_Str"";
      }
      if (last == TokenType.LEFTPAR || last == TokenType.BINARY_OP) {
        if (c != '+' && c != '-') {
          throw new ParsingException(""String_Node_Str"" + c);
        }
        tokens.add(new Token(TokenType.UNARY_OP,""String_Node_Str"" + c));
        last=TokenType.UNARY_OP;
      }
 else       if (last == TokenType.UNARY_OP) {
        throw new ParsingException(""String_Node_Str"");
      }
 else {
        tokens.add(new Token(TokenType.BINARY_OP,""String_Node_Str"" + c));
        last=TokenType.BINARY_OP;
      }
    }
 else     if (Character.isWhitespace(c)) {
      if (!number.isEmpty()) {
        tokens.add(new Token(TokenType.NUMBER,number));
        last=TokenType.NUMBER;
        number=""String_Node_Str"";
      }
    }
 else     if (c == '(') {
      if (!number.isEmpty() || last == TokenType.NUMBER || last == TokenType.RIGHTPAR) {
        throw new ParsingException(""String_Node_Str"");
      }
      tokens.add(new Token(TokenType.LEFTPAR,""String_Node_Str""));
      last=TokenType.LEFTPAR;
      pars++;
    }
 else     if (c == ')') {
      if (!number.isEmpty()) {
        tokens.add(new Token(TokenType.NUMBER,number));
        last=TokenType.NUMBER;
        number=""String_Node_Str"";
      }
      if (last == TokenType.LEFTPAR || last == TokenType.BINARY_OP || last == TokenType.UNARY_OP) {
        throw new ParsingException(""String_Node_Str"");
      }
      if (pars <= 0) {
        throw new ParsingException(""String_Node_Str"");
      }
      tokens.add(new Token(TokenType.RIGHTPAR,""String_Node_Str""));
      last=TokenType.RIGHTPAR;
      pars--;
    }
 else {
      throw new ParsingException(""String_Node_Str"" + c);
    }
  }
  if (pars != 0) {
    throw new ParsingException(""String_Node_Str"");
  }
  return tokens;
}"
39985,"protected double evalBinary(String op,double a,double b){
  if (op.equals(""String_Node_Str"")) {
    return a + b;
  }
  if (op.equals(""String_Node_Str"")) {
    return a - b;
  }
  if (op.equals(""String_Node_Str"")) {
    return a * b;
  }
  if (op.equals(""String_Node_Str"")) {
    return a / b;
  }
  return 0;
}","/** 
 * Evaluates the binary operation.
 * @param op operation to evaluate
 * @param a  first argumrnt of the operation
 * @param b  second argument of the operation
 * @return the result of evaluation
 */
protected double evalBinary(String op,double a,double b){
  if (op.equals(""String_Node_Str"")) {
    return a + b;
  }
  if (op.equals(""String_Node_Str"")) {
    return a - b;
  }
  if (op.equals(""String_Node_Str"")) {
    return a * b;
  }
  if (op.equals(""String_Node_Str"")) {
    return a / b;
  }
  return 0;
}"
39986,"/** 
 * Parses single token starting at currentPosition Token is number or bracketed expression, possibly with single preceding minus
 * @param unaryOperationAllowed true if unary plus/minus is allowed as first symbol
 * @return value of token
 * @throws ParsingException invalid expression
 */
private double parseToken(boolean unaryOperationAllowed) throws ParsingException {
  if (currentPosition >= expression.length()) {
    throw new ParsingException(""String_Node_Str"");
  }
  double result;
  if (expression.charAt(currentPosition) == '(') {
    ++currentPosition;
    result=parseExpression();
    if (currentPosition >= expression.length() || expression.charAt(currentPosition) != ')') {
      throw new ParsingException(""String_Node_Str"");
    }
    ++currentPosition;
    return result;
  }
  if (!unaryOperationAllowed && (expression.charAt(currentPosition) == '-' || expression.charAt(currentPosition) == '+')) {
    throw new ParsingException(""String_Node_Str"");
  }
  if (expression.charAt(currentPosition) == '+' || expression.charAt(currentPosition) == '-') {
    if (currentPosition + 1 >= expression.length() || (expression.charAt(currentPosition + 1) != '(' && !Character.isDigit(expression.charAt(currentPosition + 1)))) {
      throw new ParsingException(""String_Node_Str"");
    }
  }
  if (expression.charAt(currentPosition) == '-') {
    ++currentPosition;
    result=parseToken(false);
    return -result;
  }
  if (expression.charAt(currentPosition) == '+') {
    result=parseToken(false);
    return result;
  }
  result=parseNumber();
  return result;
}","/** 
 * Parses single token starting at currentPosition Token is number or bracketed expression, possibly with single preceding minus
 * @param unaryOperationAllowed true if unary plus/minus is allowed as first symbol
 * @return value of token
 * @throws ParsingException invalid expression
 */
private double parseToken(boolean unaryOperationAllowed) throws ParsingException {
  if (currentPosition >= expression.length()) {
    throw new ParsingException(""String_Node_Str"");
  }
  double result;
  if (expression.charAt(currentPosition) == '(') {
    ++currentPosition;
    result=parseExpression();
    if (currentPosition >= expression.length() || expression.charAt(currentPosition) != ')') {
      throw new ParsingException(""String_Node_Str"");
    }
    ++currentPosition;
    return result;
  }
  if (!unaryOperationAllowed && (expression.charAt(currentPosition) == '-' || expression.charAt(currentPosition) == '+')) {
    throw new ParsingException(""String_Node_Str"");
  }
  if (expression.charAt(currentPosition) == '+' || expression.charAt(currentPosition) == '-') {
    if (currentPosition + 1 >= expression.length() || (expression.charAt(currentPosition + 1) != '(' && !Character.isDigit(expression.charAt(currentPosition + 1)))) {
      throw new ParsingException(""String_Node_Str"");
    }
  }
  if (expression.charAt(currentPosition) == '-') {
    ++currentPosition;
    result=parseToken(false);
    return -result;
  }
  if (expression.charAt(currentPosition) == '+') {
    ++currentPosition;
    result=parseToken(false);
    return result;
  }
  result=parseNumber();
  return result;
}"
39987,"private List<String> contents(final Path workspacePath){
  try {
    return Files.walk(workspacePath).map(Path::toString).collect(Collectors.toList());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","private List<String> contents(final Path workspacePath){
  try {
    try (Stream<Path> files=Files.walk(workspacePath)){
      return files.map(Path::toString).collect(Collectors.toList());
    }
   }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}"
39988,"@Override public void onCreate(SQLiteDatabase db){
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"");
}","@Override public void onCreate(SQLiteDatabase db){
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"");
  db.execSQL(""String_Node_Str"");
  for (int i=0; i < 10; i++) {
    db.execSQL(""String_Node_Str"");
  }
}"
39989,"private static String getTableName(String selectQuery){
  return null;
}","private static String getTableName(String selectQuery){
  TableNameParser tableNameParser=new TableNameParser(selectQuery);
  HashSet<String> tableName=(HashSet<String>)tableNameParser.tables();
  for (  String table : tableName) {
    if (!TextUtils.isEmpty(table)) {
      return table;
    }
  }
  return null;
}"
39990,"public static TableDataResponse getTableData(SQLiteDatabase db,String selectQuery,String tableName){
  TableDataResponse tableData=new TableDataResponse();
  tableData.isSelectQuery=true;
  if (tableName == null) {
    tableName=getTableName(selectQuery);
  }
  if (tableName != null) {
    final String pragmaQuery=""String_Node_Str"" + tableName + ""String_Node_Str"";
    tableData.tableInfos=getTableInfo(db,pragmaQuery);
  }
  Cursor cursor=null;
  boolean isView=false;
  try {
    cursor=db.rawQuery(""String_Node_Str"",new String[]{tableName});
    if (cursor.moveToFirst()) {
      isView=""String_Node_Str"".equalsIgnoreCase(cursor.getString(0));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  tableData.isEditable=tableName != null && tableData.tableInfos != null && !isView;
  try {
    cursor=db.rawQuery(selectQuery,null);
  }
 catch (  Exception e) {
    e.printStackTrace();
    tableData.isSuccessful=false;
    tableData.errorMessage=e.getMessage();
    return tableData;
  }
  if (cursor != null) {
    cursor.moveToFirst();
    if (tableData.tableInfos == null) {
      tableData.tableInfos=new ArrayList<>();
      for (int i=0; i < cursor.getColumnCount(); i++) {
        TableDataResponse.TableInfo tableInfo=new TableDataResponse.TableInfo();
        tableInfo.title=cursor.getColumnName(i);
        tableInfo.isPrimary=true;
        tableData.tableInfos.add(tableInfo);
      }
    }
    tableData.isSuccessful=true;
    tableData.rows=new ArrayList<>();
    if (cursor.getCount() > 0) {
      do {
        List<TableDataResponse.ColumnData> row=new ArrayList<>();
        for (int i=0; i < cursor.getColumnCount(); i++) {
          TableDataResponse.ColumnData columnData=new TableDataResponse.ColumnData();
switch (cursor.getType(i)) {
case Cursor.FIELD_TYPE_BLOB:
            columnData.dataType=DataType.TEXT;
          columnData.value=ConverterUtils.blobToString(cursor.getBlob(i));
        break;
case Cursor.FIELD_TYPE_FLOAT:
      columnData.dataType=DataType.REAL;
    columnData.value=cursor.getDouble(i);
  break;
case Cursor.FIELD_TYPE_INTEGER:
columnData.dataType=DataType.INTEGER;
columnData.value=cursor.getLong(i);
break;
case Cursor.FIELD_TYPE_STRING:
columnData.dataType=DataType.TEXT;
columnData.value=cursor.getString(i);
break;
default :
columnData.dataType=DataType.TEXT;
columnData.value=cursor.getString(i);
}
row.add(columnData);
}
tableData.rows.add(row);
}
 while (cursor.moveToNext());
}
cursor.close();
return tableData;
}
 else {
tableData.isSuccessful=false;
tableData.errorMessage=""String_Node_Str"";
return tableData;
}
}","public static TableDataResponse getTableData(SQLiteDatabase db,String selectQuery,String tableName){
  TableDataResponse tableData=new TableDataResponse();
  tableData.isSelectQuery=true;
  if (tableName == null) {
    tableName=getTableName(selectQuery);
  }
  if (tableName != null) {
    final String pragmaQuery=""String_Node_Str"" + tableName + ""String_Node_Str"";
    tableData.tableInfos=getTableInfo(db,pragmaQuery);
  }
  Cursor cursor=null;
  boolean isView=false;
  try {
    cursor=db.rawQuery(""String_Node_Str"",new String[]{tableName});
    if (cursor.moveToFirst()) {
      isView=""String_Node_Str"".equalsIgnoreCase(cursor.getString(0));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  tableData.isEditable=tableName != null && tableData.tableInfos != null && !isView;
  if (!TextUtils.isEmpty(tableName)) {
    selectQuery=selectQuery.replace(tableName,""String_Node_Str"" + tableName + ""String_Node_Str"");
  }
  try {
    cursor=db.rawQuery(selectQuery,null);
  }
 catch (  Exception e) {
    e.printStackTrace();
    tableData.isSuccessful=false;
    tableData.errorMessage=e.getMessage();
    return tableData;
  }
  if (cursor != null) {
    cursor.moveToFirst();
    if (tableData.tableInfos == null) {
      tableData.tableInfos=new ArrayList<>();
      for (int i=0; i < cursor.getColumnCount(); i++) {
        TableDataResponse.TableInfo tableInfo=new TableDataResponse.TableInfo();
        tableInfo.title=cursor.getColumnName(i);
        tableInfo.isPrimary=true;
        tableData.tableInfos.add(tableInfo);
      }
    }
    tableData.isSuccessful=true;
    tableData.rows=new ArrayList<>();
    if (cursor.getCount() > 0) {
      do {
        List<TableDataResponse.ColumnData> row=new ArrayList<>();
        for (int i=0; i < cursor.getColumnCount(); i++) {
          TableDataResponse.ColumnData columnData=new TableDataResponse.ColumnData();
switch (cursor.getType(i)) {
case Cursor.FIELD_TYPE_BLOB:
            columnData.dataType=DataType.TEXT;
          columnData.value=ConverterUtils.blobToString(cursor.getBlob(i));
        break;
case Cursor.FIELD_TYPE_FLOAT:
      columnData.dataType=DataType.REAL;
    columnData.value=cursor.getDouble(i);
  break;
case Cursor.FIELD_TYPE_INTEGER:
columnData.dataType=DataType.INTEGER;
columnData.value=cursor.getLong(i);
break;
case Cursor.FIELD_TYPE_STRING:
columnData.dataType=DataType.TEXT;
columnData.value=cursor.getString(i);
break;
default :
columnData.dataType=DataType.TEXT;
columnData.value=cursor.getString(i);
}
row.add(columnData);
}
tableData.rows.add(row);
}
 while (cursor.moveToNext());
}
cursor.close();
return tableData;
}
 else {
tableData.isSuccessful=false;
tableData.errorMessage=""String_Node_Str"";
return tableData;
}
}"
39991,"public static UpdateRowResponse addRow(SQLiteDatabase db,String tableName,List<RowDataRequest> rowDataRequests){
  UpdateRowResponse updateRowResponse=new UpdateRowResponse();
  if (rowDataRequests == null || tableName == null) {
    updateRowResponse.isSuccessful=false;
    return updateRowResponse;
  }
  ContentValues contentValues=new ContentValues();
  for (  RowDataRequest rowDataRequest : rowDataRequests) {
    if (Constants.NULL.equals(rowDataRequest.value)) {
      rowDataRequest.value=null;
    }
switch (rowDataRequest.dataType) {
case DataType.INTEGER:
      contentValues.put(rowDataRequest.title,Long.valueOf(rowDataRequest.value));
    break;
case DataType.REAL:
  contentValues.put(rowDataRequest.title,Double.valueOf(rowDataRequest.value));
break;
case DataType.TEXT:
contentValues.put(rowDataRequest.title,rowDataRequest.value);
break;
default :
contentValues.put(rowDataRequest.title,rowDataRequest.value);
break;
}
}
db.insert(tableName,null,contentValues);
updateRowResponse.isSuccessful=true;
return updateRowResponse;
}","public static UpdateRowResponse addRow(SQLiteDatabase db,String tableName,List<RowDataRequest> rowDataRequests){
  UpdateRowResponse updateRowResponse=new UpdateRowResponse();
  if (rowDataRequests == null || tableName == null) {
    updateRowResponse.isSuccessful=false;
    return updateRowResponse;
  }
  ContentValues contentValues=new ContentValues();
  for (  RowDataRequest rowDataRequest : rowDataRequests) {
    if (Constants.NULL.equals(rowDataRequest.value)) {
      rowDataRequest.value=null;
    }
switch (rowDataRequest.dataType) {
case DataType.INTEGER:
      contentValues.put(rowDataRequest.title,Long.valueOf(rowDataRequest.value));
    break;
case DataType.REAL:
  contentValues.put(rowDataRequest.title,Double.valueOf(rowDataRequest.value));
break;
case DataType.TEXT:
contentValues.put(rowDataRequest.title,rowDataRequest.value);
break;
default :
contentValues.put(rowDataRequest.title,rowDataRequest.value);
break;
}
}
long result=db.insert(tableName,null,contentValues);
updateRowResponse.isSuccessful=result > 0;
return updateRowResponse;
}"
39992,"public static UpdateRowResponse updateRow(SQLiteDatabase db,String tableName,List<RowDataRequest> rowDataRequests){
  UpdateRowResponse updateRowResponse=new UpdateRowResponse();
  if (rowDataRequests == null || tableName == null) {
    updateRowResponse.isSuccessful=false;
    return updateRowResponse;
  }
  ContentValues contentValues=new ContentValues();
  String whereClause=null;
  List<String> whereArgsList=new ArrayList<>();
  for (  RowDataRequest rowDataRequest : rowDataRequests) {
    if (Constants.NULL.equals(rowDataRequest.value)) {
      rowDataRequest.value=null;
    }
    if (rowDataRequest.isPrimary) {
      if (whereClause == null) {
        whereClause=rowDataRequest.title + ""String_Node_Str"";
      }
 else {
        whereClause=""String_Node_Str"" + rowDataRequest.title + ""String_Node_Str"";
      }
      whereArgsList.add(rowDataRequest.value);
    }
 else {
switch (rowDataRequest.dataType) {
case DataType.INTEGER:
        contentValues.put(rowDataRequest.title,Long.valueOf(rowDataRequest.value));
      break;
case DataType.REAL:
    contentValues.put(rowDataRequest.title,Double.valueOf(rowDataRequest.value));
  break;
case DataType.TEXT:
contentValues.put(rowDataRequest.title,rowDataRequest.value);
break;
default :
}
}
}
String[] whereArgs=new String[whereArgsList.size()];
for (int i=0; i < whereArgsList.size(); i++) {
whereArgs[i]=whereArgsList.get(i);
}
db.update(tableName,contentValues,whereClause,whereArgs);
updateRowResponse.isSuccessful=true;
return updateRowResponse;
}","public static UpdateRowResponse updateRow(SQLiteDatabase db,String tableName,List<RowDataRequest> rowDataRequests){
  UpdateRowResponse updateRowResponse=new UpdateRowResponse();
  if (rowDataRequests == null || tableName == null) {
    updateRowResponse.isSuccessful=false;
    return updateRowResponse;
  }
  tableName=getQuotedTableName(tableName);
  ContentValues contentValues=new ContentValues();
  String whereClause=null;
  List<String> whereArgsList=new ArrayList<>();
  for (  RowDataRequest rowDataRequest : rowDataRequests) {
    if (Constants.NULL.equals(rowDataRequest.value)) {
      rowDataRequest.value=null;
    }
    if (rowDataRequest.isPrimary) {
      if (whereClause == null) {
        whereClause=rowDataRequest.title + ""String_Node_Str"";
      }
 else {
        whereClause=""String_Node_Str"" + rowDataRequest.title + ""String_Node_Str"";
      }
      whereArgsList.add(rowDataRequest.value);
    }
 else {
switch (rowDataRequest.dataType) {
case DataType.INTEGER:
        contentValues.put(rowDataRequest.title,Long.valueOf(rowDataRequest.value));
      break;
case DataType.REAL:
    contentValues.put(rowDataRequest.title,Double.valueOf(rowDataRequest.value));
  break;
case DataType.TEXT:
contentValues.put(rowDataRequest.title,rowDataRequest.value);
break;
default :
}
}
}
String[] whereArgs=new String[whereArgsList.size()];
for (int i=0; i < whereArgsList.size(); i++) {
whereArgs[i]=whereArgsList.get(i);
}
db.update(tableName,contentValues,whereClause,whereArgs);
updateRowResponse.isSuccessful=true;
return updateRowResponse;
}"
39993,"public static UpdateRowResponse deleteRow(SQLiteDatabase db,String tableName,List<RowDataRequest> rowDataRequests){
  UpdateRowResponse updateRowResponse=new UpdateRowResponse();
  if (rowDataRequests == null || tableName == null) {
    updateRowResponse.isSuccessful=false;
    return updateRowResponse;
  }
  String whereClause=null;
  List<String> whereArgsList=new ArrayList<>();
  for (  RowDataRequest rowDataRequest : rowDataRequests) {
    if (Constants.NULL.equals(rowDataRequest.value)) {
      rowDataRequest.value=null;
    }
    if (rowDataRequest.isPrimary) {
      if (whereClause == null) {
        whereClause=rowDataRequest.title + ""String_Node_Str"";
      }
 else {
        whereClause=""String_Node_Str"" + rowDataRequest.title + ""String_Node_Str"";
      }
      whereArgsList.add(rowDataRequest.value);
    }
  }
  if (whereArgsList.size() == 0) {
    updateRowResponse.isSuccessful=true;
    return updateRowResponse;
  }
  String[] whereArgs=new String[whereArgsList.size()];
  for (int i=0; i < whereArgsList.size(); i++) {
    whereArgs[i]=whereArgsList.get(i);
  }
  db.delete(tableName,whereClause,whereArgs);
  updateRowResponse.isSuccessful=true;
  return updateRowResponse;
}","public static UpdateRowResponse deleteRow(SQLiteDatabase db,String tableName,List<RowDataRequest> rowDataRequests){
  UpdateRowResponse updateRowResponse=new UpdateRowResponse();
  if (rowDataRequests == null || tableName == null) {
    updateRowResponse.isSuccessful=false;
    return updateRowResponse;
  }
  tableName=getQuotedTableName(tableName);
  String whereClause=null;
  List<String> whereArgsList=new ArrayList<>();
  for (  RowDataRequest rowDataRequest : rowDataRequests) {
    if (Constants.NULL.equals(rowDataRequest.value)) {
      rowDataRequest.value=null;
    }
    if (rowDataRequest.isPrimary) {
      if (whereClause == null) {
        whereClause=rowDataRequest.title + ""String_Node_Str"";
      }
 else {
        whereClause=""String_Node_Str"" + rowDataRequest.title + ""String_Node_Str"";
      }
      whereArgsList.add(rowDataRequest.value);
    }
  }
  if (whereArgsList.size() == 0) {
    updateRowResponse.isSuccessful=true;
    return updateRowResponse;
  }
  String[] whereArgs=new String[whereArgsList.size()];
  for (int i=0; i < whereArgsList.size(); i++) {
    whereArgs[i]=whereArgsList.get(i);
  }
  db.delete(tableName,whereClause,whereArgs);
  updateRowResponse.isSuccessful=true;
  return updateRowResponse;
}"
39994,"public static UpdateRowResponse addRow(SQLiteDatabase db,String tableName,List<RowDataRequest> rowDataRequests){
  UpdateRowResponse updateRowResponse=new UpdateRowResponse();
  if (rowDataRequests == null || tableName == null) {
    updateRowResponse.isSuccessful=false;
    return updateRowResponse;
  }
  ContentValues contentValues=new ContentValues();
  for (  RowDataRequest rowDataRequest : rowDataRequests) {
    if (Constants.NULL.equals(rowDataRequest.value)) {
      rowDataRequest.value=null;
    }
switch (rowDataRequest.dataType) {
case DataType.INTEGER:
      contentValues.put(rowDataRequest.title,Long.valueOf(rowDataRequest.value));
    break;
case DataType.REAL:
  contentValues.put(rowDataRequest.title,Double.valueOf(rowDataRequest.value));
break;
case DataType.TEXT:
contentValues.put(rowDataRequest.title,rowDataRequest.value);
break;
default :
contentValues.put(rowDataRequest.title,rowDataRequest.value);
break;
}
}
long result=db.insert(tableName,null,contentValues);
updateRowResponse.isSuccessful=result > 0;
return updateRowResponse;
}","public static UpdateRowResponse addRow(SQLiteDatabase db,String tableName,List<RowDataRequest> rowDataRequests){
  UpdateRowResponse updateRowResponse=new UpdateRowResponse();
  if (rowDataRequests == null || tableName == null) {
    updateRowResponse.isSuccessful=false;
    return updateRowResponse;
  }
  tableName=getQuotedTableName(tableName);
  ContentValues contentValues=new ContentValues();
  for (  RowDataRequest rowDataRequest : rowDataRequests) {
    if (Constants.NULL.equals(rowDataRequest.value)) {
      rowDataRequest.value=null;
    }
switch (rowDataRequest.dataType) {
case DataType.INTEGER:
      contentValues.put(rowDataRequest.title,Long.valueOf(rowDataRequest.value));
    break;
case DataType.REAL:
  contentValues.put(rowDataRequest.title,Double.valueOf(rowDataRequest.value));
break;
case DataType.TEXT:
contentValues.put(rowDataRequest.title,rowDataRequest.value);
break;
default :
contentValues.put(rowDataRequest.title,rowDataRequest.value);
break;
}
}
long result=db.insert(tableName,null,contentValues);
updateRowResponse.isSuccessful=result > 0;
return updateRowResponse;
}"
39995,"public static TableDataResponse getTableData(SQLiteDatabase db,String selectQuery,String tableName){
  TableDataResponse tableData=new TableDataResponse();
  tableData.isSelectQuery=true;
  if (tableName == null) {
    tableName=getTableName(selectQuery);
  }
  if (tableName != null) {
    final String pragmaQuery=""String_Node_Str"" + tableName + ""String_Node_Str"";
    tableData.tableInfos=getTableInfo(db,pragmaQuery);
  }
  Cursor cursor=null;
  boolean isView=false;
  try {
    cursor=db.rawQuery(""String_Node_Str"",new String[]{tableName});
    if (cursor.moveToFirst()) {
      isView=""String_Node_Str"".equalsIgnoreCase(cursor.getString(0));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  tableData.isEditable=tableName != null && tableData.tableInfos != null && !isView;
  if (!TextUtils.isEmpty(tableName)) {
    selectQuery=selectQuery.replace(tableName,""String_Node_Str"" + tableName + ""String_Node_Str"");
  }
  try {
    cursor=db.rawQuery(selectQuery,null);
  }
 catch (  Exception e) {
    e.printStackTrace();
    tableData.isSuccessful=false;
    tableData.errorMessage=e.getMessage();
    return tableData;
  }
  if (cursor != null) {
    cursor.moveToFirst();
    if (tableData.tableInfos == null) {
      tableData.tableInfos=new ArrayList<>();
      for (int i=0; i < cursor.getColumnCount(); i++) {
        TableDataResponse.TableInfo tableInfo=new TableDataResponse.TableInfo();
        tableInfo.title=cursor.getColumnName(i);
        tableInfo.isPrimary=true;
        tableData.tableInfos.add(tableInfo);
      }
    }
    tableData.isSuccessful=true;
    tableData.rows=new ArrayList<>();
    if (cursor.getCount() > 0) {
      do {
        List<TableDataResponse.ColumnData> row=new ArrayList<>();
        for (int i=0; i < cursor.getColumnCount(); i++) {
          TableDataResponse.ColumnData columnData=new TableDataResponse.ColumnData();
switch (cursor.getType(i)) {
case Cursor.FIELD_TYPE_BLOB:
            columnData.dataType=DataType.TEXT;
          columnData.value=ConverterUtils.blobToString(cursor.getBlob(i));
        break;
case Cursor.FIELD_TYPE_FLOAT:
      columnData.dataType=DataType.REAL;
    columnData.value=cursor.getDouble(i);
  break;
case Cursor.FIELD_TYPE_INTEGER:
columnData.dataType=DataType.INTEGER;
columnData.value=cursor.getLong(i);
break;
case Cursor.FIELD_TYPE_STRING:
columnData.dataType=DataType.TEXT;
columnData.value=cursor.getString(i);
break;
default :
columnData.dataType=DataType.TEXT;
columnData.value=cursor.getString(i);
}
row.add(columnData);
}
tableData.rows.add(row);
}
 while (cursor.moveToNext());
}
cursor.close();
return tableData;
}
 else {
tableData.isSuccessful=false;
tableData.errorMessage=""String_Node_Str"";
return tableData;
}
}","public static TableDataResponse getTableData(SQLiteDatabase db,String selectQuery,String tableName){
  TableDataResponse tableData=new TableDataResponse();
  tableData.isSelectQuery=true;
  if (tableName == null) {
    tableName=getTableName(selectQuery);
  }
  final String quotedTableName=getQuotedTableName(tableName);
  if (tableName != null) {
    final String pragmaQuery=""String_Node_Str"" + quotedTableName + ""String_Node_Str"";
    tableData.tableInfos=getTableInfo(db,pragmaQuery);
  }
  Cursor cursor=null;
  boolean isView=false;
  try {
    cursor=db.rawQuery(""String_Node_Str"",new String[]{quotedTableName});
    if (cursor.moveToFirst()) {
      isView=""String_Node_Str"".equalsIgnoreCase(cursor.getString(0));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  tableData.isEditable=tableName != null && tableData.tableInfos != null && !isView;
  if (!TextUtils.isEmpty(tableName)) {
    selectQuery=selectQuery.replace(tableName,quotedTableName);
  }
  try {
    cursor=db.rawQuery(selectQuery,null);
  }
 catch (  Exception e) {
    e.printStackTrace();
    tableData.isSuccessful=false;
    tableData.errorMessage=e.getMessage();
    return tableData;
  }
  if (cursor != null) {
    cursor.moveToFirst();
    if (tableData.tableInfos == null) {
      tableData.tableInfos=new ArrayList<>();
      for (int i=0; i < cursor.getColumnCount(); i++) {
        TableDataResponse.TableInfo tableInfo=new TableDataResponse.TableInfo();
        tableInfo.title=cursor.getColumnName(i);
        tableInfo.isPrimary=true;
        tableData.tableInfos.add(tableInfo);
      }
    }
    tableData.isSuccessful=true;
    tableData.rows=new ArrayList<>();
    if (cursor.getCount() > 0) {
      do {
        List<TableDataResponse.ColumnData> row=new ArrayList<>();
        for (int i=0; i < cursor.getColumnCount(); i++) {
          TableDataResponse.ColumnData columnData=new TableDataResponse.ColumnData();
switch (cursor.getType(i)) {
case Cursor.FIELD_TYPE_BLOB:
            columnData.dataType=DataType.TEXT;
          columnData.value=ConverterUtils.blobToString(cursor.getBlob(i));
        break;
case Cursor.FIELD_TYPE_FLOAT:
      columnData.dataType=DataType.REAL;
    columnData.value=cursor.getDouble(i);
  break;
case Cursor.FIELD_TYPE_INTEGER:
columnData.dataType=DataType.INTEGER;
columnData.value=cursor.getLong(i);
break;
case Cursor.FIELD_TYPE_STRING:
columnData.dataType=DataType.TEXT;
columnData.value=cursor.getString(i);
break;
default :
columnData.dataType=DataType.TEXT;
columnData.value=cursor.getString(i);
}
row.add(columnData);
}
tableData.rows.add(row);
}
 while (cursor.moveToNext());
}
cursor.close();
return tableData;
}
 else {
tableData.isSuccessful=false;
tableData.errorMessage=""String_Node_Str"";
return tableData;
}
}"
39996,"public static TableDataResponse exec(SQLiteDatabase database,String sql){
  TableDataResponse tableDataResponse=new TableDataResponse();
  tableDataResponse.isSelectQuery=false;
  try {
    database.execSQL(sql);
  }
 catch (  Exception e) {
    e.printStackTrace();
    tableDataResponse.isSuccessful=false;
    tableDataResponse.errorMessage=e.getMessage();
    return tableDataResponse;
  }
  tableDataResponse.isSuccessful=true;
  return tableDataResponse;
}","public static TableDataResponse exec(SQLiteDatabase database,String sql){
  TableDataResponse tableDataResponse=new TableDataResponse();
  tableDataResponse.isSelectQuery=false;
  try {
    String tableName=getTableName(sql);
    if (!TextUtils.isEmpty(tableName)) {
      String quotedTableName=getQuotedTableName(tableName);
      sql=sql.replace(tableName,quotedTableName);
    }
    database.execSQL(sql);
  }
 catch (  Exception e) {
    e.printStackTrace();
    tableDataResponse.isSuccessful=false;
    tableDataResponse.errorMessage=e.getMessage();
    return tableDataResponse;
  }
  tableDataResponse.isSuccessful=true;
  return tableDataResponse;
}"
39997,"public boolean insertContact(String name,String phone,String email,String street,String place){
  SQLiteDatabase db=this.getWritableDatabase();
  ContentValues contentValues=new ContentValues();
  contentValues.put(""String_Node_Str"",name);
  contentValues.put(""String_Node_Str"",phone);
  contentValues.put(""String_Node_Str"",email);
  contentValues.put(""String_Node_Str"",street);
  contentValues.put(""String_Node_Str"",place);
  db.insert(""String_Node_Str"",null,contentValues);
  return true;
}","public boolean insertContact(String name,String phone,String email,String street,String place){
  SQLiteDatabase db=this.getWritableDatabase();
  ContentValues contentValues=new ContentValues();
  contentValues.put(""String_Node_Str"",name);
  contentValues.put(""String_Node_Str"",phone);
  contentValues.put(""String_Node_Str"",email);
  contentValues.put(""String_Node_Str"",street);
  contentValues.put(""String_Node_Str"",place);
  contentValues.put(CONTACTS_CREATED_AT,Calendar.getInstance().getTimeInMillis());
  db.insert(""String_Node_Str"",null,contentValues);
  return true;
}"
39998,"private Response query(String sql){
  Cursor cursor;
  try {
    cursor=mDatabase.rawQuery(sql,null);
  }
 catch (  Exception e) {
    e.printStackTrace();
    Response msg=new Response();
    msg.isSuccessful=false;
    msg.error=e.getMessage();
    return msg;
  }
  if (cursor != null) {
    cursor.moveToFirst();
    Response response=new Response();
    response.isSuccessful=true;
    List<String> columns=new ArrayList<>();
    for (int i=0; i < cursor.getColumnCount(); i++) {
      String name=cursor.getColumnName(i);
      columns.add(name);
    }
    response.columns=columns;
    if (cursor.getCount() > 0) {
      do {
        List<Object> row=new ArrayList<>();
        for (int i=0; i < cursor.getColumnCount(); i++) {
switch (cursor.getType(i)) {
case Cursor.FIELD_TYPE_BLOB:
            row.add(cursor.getBlob(i));
          break;
case Cursor.FIELD_TYPE_FLOAT:
        row.add(cursor.getFloat(i));
      break;
case Cursor.FIELD_TYPE_INTEGER:
    row.add(cursor.getInt(i));
  break;
case Cursor.FIELD_TYPE_STRING:
row.add(cursor.getString(i));
break;
default :
row.add(""String_Node_Str"");
}
}
response.rows.add(row);
}
 while (cursor.moveToNext());
}
cursor.close();
return response;
}
 else {
Response response=new Response();
response.isSuccessful=false;
response.error=""String_Node_Str"";
return response;
}
}","private Response query(String sql){
  Cursor cursor;
  try {
    cursor=mDatabase.rawQuery(sql,null);
  }
 catch (  Exception e) {
    e.printStackTrace();
    Response msg=new Response();
    msg.isSuccessful=false;
    msg.error=e.getMessage();
    return msg;
  }
  if (cursor != null) {
    cursor.moveToFirst();
    Response response=new Response();
    response.isSuccessful=true;
    List<String> columns=new ArrayList<>();
    for (int i=0; i < cursor.getColumnCount(); i++) {
      String name=cursor.getColumnName(i);
      columns.add(name);
    }
    response.columns=columns;
    if (cursor.getCount() > 0) {
      do {
        List<Object> row=new ArrayList<>();
        for (int i=0; i < cursor.getColumnCount(); i++) {
switch (cursor.getType(i)) {
case Cursor.FIELD_TYPE_BLOB:
            row.add(cursor.getBlob(i));
          break;
case Cursor.FIELD_TYPE_FLOAT:
        row.add(cursor.getFloat(i));
      break;
case Cursor.FIELD_TYPE_INTEGER:
    row.add(cursor.getLong(i));
  break;
case Cursor.FIELD_TYPE_STRING:
row.add(cursor.getString(i));
break;
default :
row.add(""String_Node_Str"");
}
}
response.rows.add(row);
}
 while (cursor.moveToNext());
}
cursor.close();
return response;
}
 else {
Response response=new Response();
response.isSuccessful=false;
response.error=""String_Node_Str"";
return response;
}
}"
39999,"private void select(TaggingPreset preset){
  this.selectedPreset=preset;
}","private void select(TaggingPreset preset){
  selectedPreset=preset;
}"
40000,"@Override public void valueChanged(ListSelectionEvent e){
  reorderUpButton.setEnabled(e.getFirstIndex() > 0);
  reorderDownButton.setEnabled(e.getFirstIndex() < presets.length - 1);
  if (!isSelectionValid()) {
    editButton.setEnabled(false);
    deleteButton.setEnabled(false);
    return;
  }
  editButton.setEnabled(true);
  deleteButton.setEnabled(true);
  copyButton.setEnabled(true);
  select(presets[e.getFirstIndex()]);
}","@Override public void valueChanged(ListSelectionEvent evt){
  int index=list.getSelectedIndex();
  reorderUpButton.setEnabled(index > 0);
  reorderDownButton.setEnabled(index < presets.length - 1);
  if (!isSelectionValid()) {
    editButton.setEnabled(false);
    deleteButton.setEnabled(false);
    return;
  }
  editButton.setEnabled(true);
  deleteButton.setEnabled(true);
  copyButton.setEnabled(true);
  select(presets[index]);
}"
