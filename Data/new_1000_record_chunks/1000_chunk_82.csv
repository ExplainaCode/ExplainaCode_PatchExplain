record_number,buggy_code,fixed_code
81001,"@Override protected void rollback(){
  StringBuilder es=new StringBuilder();
  for (  Pair p : list) {
    try {
      p.conn.rollback();
    }
 catch (    Throwable e) {
      es.append(e.getMessage()).append(""String_Node_Str"");
    }
 finally {
      try {
        p.conn.close();
      }
 catch (      SQLException e) {
        es.append(e.getMessage()).append(""String_Node_Str"");
      }
    }
  }
  if (es.length() > 0)   throw new RuntimeException(es.toString());
}","@Override protected void rollback(){
  for (  Pair p : list) {
    try {
      p.conn.rollback();
    }
 catch (    Throwable e) {
    }
  }
}"
81002,"@Override protected void commit() throws Exception {
  ComboException ce=new ComboException();
  for (  Pair p : list) {
    try {
      p.conn.commit();
      if (p.conn.getTransactionIsolation() != p.oldLevel)       p.conn.setTransactionIsolation(p.oldLevel);
    }
 catch (    SQLException e) {
      ce.add(e);
    }
 finally {
      p.conn.close();
    }
  }
  list.clear();
  if (null != ce.getCause()) {
    throw ce;
  }
}","@Override protected void commit(){
  ComboException ce=new ComboException();
  for (  Pair p : list) {
    try {
      p.conn.commit();
      if (p.conn.getTransactionIsolation() != p.oldLevel)       p.conn.setTransactionIsolation(p.oldLevel);
    }
 catch (    SQLException e) {
      ce.add(e);
    }
  }
  if (null != ce.getCause()) {
    throw ce;
  }
}"
81003,"@Override public void close() throws SQLException {
  for (  Pair p : list)   if (!p.conn.isClosed()) {
    try {
      if (p.conn.getTransactionIsolation() != p.oldLevel)       p.conn.setTransactionIsolation(p.oldLevel);
    }
 catch (    Exception e) {
    }
    p.conn.close();
  }
}","@Override public void close(){
  ComboException ce=new ComboException();
  for (  Pair p : list) {
    try {
      if (!p.conn.isClosed())       if (p.conn.getTransactionIsolation() != p.oldLevel)       p.conn.setTransactionIsolation(p.oldLevel);
    }
 catch (    Throwable e) {
    }
 finally {
      try {
        p.conn.close();
      }
 catch (      Exception e) {
        ce.add(e);
      }
    }
  }
  list.clear();
}"
81004,"private static void depose(){
  if (count.get() == 0)   try {
    trans.get().close();
  }
 catch (  SQLException e) {
    throw Lang.wrapThrow(e);
  }
 finally {
    trans.set(null);
  }
}","private static void depose(){
  if (count.get() == 0)   try {
    trans.get().close();
  }
 catch (  Throwable e) {
    throw Lang.wrapThrow(e);
  }
 finally {
    trans.set(null);
  }
}"
81005,protected abstract void commit() throws Exception ;,protected abstract void commit();
81006,public abstract void close() throws SQLException ;,public abstract void close();
81007,"public void setEntityMaker(EntityMaker entityMaker){
  this.entityMaker=entityMaker;
}","public void setEntityMaker(EntityMaker entityMaker){
  if (null == entityMaker) {
    log.error(""String_Node_Str"");
    return;
  }
  this.entityMaker=entityMaker;
  entities=new EntityHolder(this.entityMaker);
}"
81008,"/** 
 * 'databaseProductName' | 'driverName' <pre> psql:	'PostgreSQL'	|'PostgreSQL Native Driver' MySQL:	'MySQL'			|'MySQL-AB JDBC Driver' Oracle:	'Oracle'		|'Oracle JDBC driver' db2:		'DB2/NT'		|'IBM DB2 JDBC Universal Driver Architecture' SQLServer:	'Microsoft SQL Serve'	|'SQL Serve' </pre>
 */
public void setDataSource(DataSource dataSource){
  entities=new EntityHolder(null == entityMaker ? new DefaultEntityMaker() : entityMaker);
  this.dataSource=dataSource;
}","/** 
 * 'databaseProductName' | 'driverName' <pre> psql:	'PostgreSQL'	|'PostgreSQL Native Driver' MySQL:	'MySQL'			|'MySQL-AB JDBC Driver' Oracle:	'Oracle'		|'Oracle JDBC driver' db2:		'DB2/NT'		|'IBM DB2 JDBC Universal Driver Architecture' SQLServer:	'Microsoft SQL Serve'	|'SQL Serve' </pre>
 */
public void setDataSource(DataSource dataSource){
  if (null == entityMaker)   entities=new EntityHolder(new DefaultEntityMaker());
  this.dataSource=dataSource;
}"
81009,"public static void safeClose(ResultSet rs){
  if (null != rs)   try {
    rs.close();
  }
 catch (  Throwable e) {
  }
}","public static void safeClose(ResultSet rs){
  if (null != rs)   try {
    if (!rs.isClosed())     rs.close();
  }
 catch (  Throwable e) {
  }
}"
81010,"private int readTokenName(char[] cs,int i,StringBuilder sb){
  for (++i; i < cs.length; i++) {
    int b=(int)cs[i];
    if (b == 95 || b == 45 || b == 46 || (b >= 48 && b <= 57) || (b >= 65 && b <= 90) || (b >= 97 && b <= 122))     sb.append((char)b);
 else     break;
  }
  return i - 1;
}","private int readTokenName(char[] cs,int i,StringBuilder sb){
  for (++i; i < cs.length; i++) {
    int b=(int)cs[i];
    if (b == '_' || b == '-' || (b >= 48 && b <= 57) || (b >= 65 && b <= 90) || (b >= 97 && b <= 122))     sb.append((char)b);
 else     break;
  }
  return i - 1;
}"
81011,"/** 
 * 将两个文件对象比较，得出相对路径
 * @param base 基础文件对象
 * @param file 相对文件对象
 * @return 相对于基础文件对象的相对路径
 */
public static String getRelativePath(File base,File file){
  if (base.isFile())   base=base.getParentFile();
  String[] bb=Strings.splitIgnoreBlank(base.getAbsolutePath(),""String_Node_Str"");
  String[] ff=Strings.splitIgnoreBlank(file.getAbsolutePath(),""String_Node_Str"");
  int pos=0;
  for (; pos < Math.min(bb.length,ff.length); pos++)   if (!bb[pos].equals(ff[pos]))   break;
  String path=Strings.dup(""String_Node_Str"",bb.length - pos);
  path+=Lang.concat(pos,ff.length - pos,'/',ff);
  return path;
}","/** 
 * 将两个路径比较，得出相对路径
 * @param base 基础路径
 * @param path 相对文件路径
 * @return 相对于基础路径对象的相对路径
 */
public static String getRelativePath(String base,String path){
  String[] bb=Strings.splitIgnoreBlank(getCanonicalPath(base),""String_Node_Str"");
  String[] ff=Strings.splitIgnoreBlank(getCanonicalPath(path),""String_Node_Str"");
  int len=Math.min(bb.length,ff.length);
  int pos=0;
  for (; pos < len; pos++)   if (!bb[pos].equals(ff[pos]))   break;
  String re=Strings.dup(""String_Node_Str"",bb.length - pos);
  re+=Lang.concat(pos,ff.length - pos,'/',ff);
  return re;
}"
81012,"public static Record create(ResultSet rs){
  try {
    Record re=new Record();
    ResultSetMetaData meta=rs.getMetaData();
    int count=meta.getColumnCount();
    for (int i=1; i <= count; i++) {
      String name=meta.getColumnLabel(i);
      re.set(name.toLowerCase(),rs.getObject(i));
    }
    return re;
  }
 catch (  SQLException e) {
    throw Lang.wrapThrow(e);
  }
}","public static Record create(ResultSet rs){
  try {
    Record re=new Record();
    ResultSetMetaData meta=rs.getMetaData();
    int count=meta.getColumnCount();
    for (int i=1; i <= count; i++) {
      String name=meta.getColumnLabel(i);
      if (meta.getColumnType(i) == Types.CLOB) {
        re.set(name.toLowerCase(),rs.getString(i));
      }
 else {
        re.set(name.toLowerCase(),rs.getObject(i));
      }
    }
    return re;
  }
 catch (  SQLException e) {
    throw Lang.wrapThrow(e);
  }
}"
81013,"public void render(HttpServletRequest req,HttpServletResponse resp,Object obj) throws Exception {
  Mirror<?> mirror=Mirror.me(obj);
  for (Iterator<String> it=dest.keys().iterator(); it.hasNext(); ) {
    String key=it.next();
    Object value=null;
    if (null != mirror && key.startsWith(""String_Node_Str"") && key.length() > 4) {
      value=mirror.getValue(obj,key.substring(4));
    }
 else {
      value=req.getParameter(key);
    }
    if (null == value)     value=obj;
    dest.set(key,value);
  }
  String path=dest.toString();
  if (path.startsWith(""String_Node_Str"")) {
    path=req.getContextPath() + path;
  }
 else {
    String myPath=req.getPathInfo();
    int pos=myPath.lastIndexOf('/');
    if (pos > 0)     path=myPath.substring(0,pos) + ""String_Node_Str"" + path;
 else     path=""String_Node_Str"" + path;
  }
  resp.sendRedirect(path);
  resp.flushBuffer();
}","public void render(HttpServletRequest req,HttpServletResponse resp,Object obj) throws Exception {
  Mirror<?> mirror=Mirror.me(obj);
  for (Iterator<String> it=dest.keys().iterator(); it.hasNext(); ) {
    String key=it.next();
    Object value=null;
    if (null != mirror && key.startsWith(""String_Node_Str"") && key.length() > 4) {
      value=mirror.getValue(obj,key.substring(4));
    }
 else     if (null != mirror && key.startsWith(""String_Node_Str"") && key.length() > 2) {
      value=req.getParameter(key.substring(2));
    }
 else {
      value=obj;
    }
    if (null == value)     value=obj;
    dest.set(key,value);
  }
  String path=dest.toString();
  if (path.startsWith(""String_Node_Str"")) {
    path=req.getContextPath() + path;
  }
 else {
    String myPath=req.getPathInfo();
    int pos=myPath.lastIndexOf('/');
    if (pos > 0)     path=myPath.substring(0,pos) + ""String_Node_Str"" + path;
 else     path=""String_Node_Str"" + path;
  }
  resp.sendRedirect(path);
  resp.flushBuffer();
}"
81014,"public IocObject load(String name) throws ObjectLoadException {
  Map<String,Object> m=getMap(name);
  if (null == m)   throw new ObjectLoadException(""String_Node_Str"" + name + ""String_Node_Str"");
  Object p=m.get(""String_Node_Str"");
  if (null != p) {
    IocObject parent=load(p.toString());
    Map<String,Object> newMap=new HashMap<String,Object>();
    for (    Entry<String,Object> en : m.entrySet()) {
      if (""String_Node_Str"".equals(en.getKey()))       continue;
      newMap.put(en.getKey(),en.getValue());
    }
    IocObject self=Iocs.map2iobj(newMap);
    return Iocs.mergeWith(self,parent);
  }
  return Iocs.map2iobj(m);
}","public IocObject load(String name) throws ObjectLoadException {
  Map<String,Object> m=getMap(name);
  if (null == m)   throw new ObjectLoadException(""String_Node_Str"" + name + ""String_Node_Str"");
  Object p=m.get(""String_Node_Str"");
  if (null != p) {
    checkParents(name);
    IocObject parent=load(p.toString());
    Map<String,Object> newMap=new HashMap<String,Object>();
    for (    Entry<String,Object> en : m.entrySet()) {
      if (""String_Node_Str"".equals(en.getKey()))       continue;
      newMap.put(en.getKey(),en.getValue());
    }
    IocObject self=Iocs.map2iobj(newMap);
    return Iocs.mergeWith(self,parent);
  }
  return Iocs.map2iobj(m);
}"
81015,"<T>T parseFromJson(Class<T> type){
  try {
    nextChar();
    skipCommentsAndBlank();
    return parseFromCurrentLocation(type);
  }
 catch (  JsonException e) {
    throw e;
  }
catch (  Exception e) {
    throw makeError(e.getMessage());
  }
}","<T>T parseFromJson(Class<T> type,Class<?> componentType){
  try {
    nextChar();
    skipCommentsAndBlank();
    return parseFromCurrentLocation(type,componentType);
  }
 catch (  JsonException e) {
    throw e;
  }
catch (  Exception e) {
    throw makeError(e.getMessage());
  }
}"
81016,"/** 
 * @param < T >
 * @param type
 * @return
 * @throws Exception
 */
@SuppressWarnings(""String_Node_Str"") private <T>T parseFromCurrentLocation(Class<T> type) throws Exception {
  Mirror<T> me=Mirror.me(type);
switch (cursor) {
case -1:
    return null;
case '[':
  Class<?> compType=null;
boolean reurnAsList=true;
List list=null;
if (null == type) {
list=new LinkedList();
}
 else if (type.isArray()) {
list=new LinkedList();
reurnAsList=false;
compType=type.getComponentType();
}
 else if (List.class.isAssignableFrom(type)) {
reurnAsList=true;
if (me.is(List.class)) list=new LinkedList();
 else list=(List)me.born();
}
 else {
throw makeError(String.format(""String_Node_Str"",type.getName()));
}
nextChar();
skipCommentsAndBlank();
while (cursor != -1 && cursor != ']') {
Object o=parseFromCurrentLocation(compType);
list.add(o);
skipCommentsAndBlank();
if (cursor == ']') break;
if (cursor != ',') throw makeError(""String_Node_Str"");
nextChar();
skipCommentsAndBlank();
}
nextChar();
if (reurnAsList) return (T)list;
Object ary=Array.newInstance(compType,list.size());
int i=0;
for (Iterator it=list.iterator(); it.hasNext(); ) Array.set(ary,i++,Castors.me().castTo(it.next(),compType));
return (T)ary;
case '{':
nextChar();
skipCommentsAndBlank();
if (Map.class == type) me=(Mirror<T>)Mirror.me(HashMap.class);
if (null == me || Map.class.isAssignableFrom(type)) {
Map<String,Object> map=null == me ? new TreeMap<String,Object>() : (Map<String,Object>)me.born();
while (cursor != -1 && cursor != '}') {
String name=readFieldName();
Object value=parseFromJson(null);
map.put(name,value);
if (!findNextNamePair()) break;
}
nextChar();
return (T)map;
}
T obj=me.born();
while (cursor != -1 && cursor != '}') {
Field f=me.getField(readFieldName());
Object value=parseFromJson(f.getType());
me.setValue(obj,f,value);
if (!findNextNamePair()) break;
}
nextChar();
return obj;
case 'u':
if ('n' != (char)nextChar() & 'd' != (char)nextChar() & 'e' != (char)nextChar() & 'f' != (char)nextChar() & 'i' != (char)nextChar() & 'n' != (char)nextChar() & 'e' != (char)nextChar() & 'd' != (char)nextChar()) throw makeError(""String_Node_Str"");
nextChar();
return null;
case 'n':
if ('u' != (char)nextChar() & 'l' != (char)nextChar() & 'l' != (char)nextChar()) throw makeError(""String_Node_Str"");
nextChar();
return null;
case '\'':
case '""':
StringBuilder vs=readString();
String value=vs.toString();
if (null == me || me.is(String.class)) return (T)value;
return Castors.me().castTo(value,me.getType());
case 't':
if ('u' != (char)nextChar() & 'r' != (char)nextChar() & 'e' != (char)nextChar()) throw makeError(""String_Node_Str"");
if (null != type && !Mirror.me(type).isBoolean()) throw makeError(""String_Node_Str"");
nextChar();
return (T)Boolean.valueOf(true);
case 'f':
if ('a' != (char)nextChar() & 'l' != (char)nextChar() & 's' != (char)nextChar() & 'e' != (char)nextChar()) throw makeError(""String_Node_Str"");
if (null != type && !Mirror.me(type).isBoolean()) throw makeError(""String_Node_Str"");
nextChar();
return (T)Boolean.valueOf(false);
case '.':
case '-':
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
StringBuilder sb=new StringBuilder();
do {
sb.append((char)cursor);
nextChar();
}
 while (cursor != ' ' && cursor != -1 && cursor != ',' && cursor != ']' && cursor != '}' && cursor != '/');
String numValue=Strings.trim(sb);
if (null == me) {
char lastChar=Character.toUpperCase(numValue.charAt(numValue.length() - 1));
if (numValue.indexOf('.') >= 0) {
if (lastChar == 'F') return (T)Float.valueOf(numValue.substring(0,numValue.length() - 1));
 else return (T)Double.valueOf(numValue);
}
 else {
if (lastChar == 'L') return (T)Long.valueOf(numValue.substring(0,numValue.length() - 1));
 else return (T)Integer.valueOf(numValue);
}
}
if (me.isInt()) {
return (T)Integer.valueOf(numValue);
}
 else if (me.isLong()) {
return (T)Long.valueOf(numValue);
}
 else if (me.isFloat()) {
return (T)Float.valueOf(numValue);
}
 else if (me.isDouble()) {
return (T)Double.valueOf(numValue);
}
 else if (me.isByte()) {
return (T)Byte.valueOf(numValue);
}
 else {
throw makeError(""String_Node_Str"");
}
case 'v':
if ('a' == nextChar() && 'r' == nextChar() && ' ' == nextChar() && 'i' == nextChar() && 'o' == nextChar() && 'c' == nextChar() && ' ' == nextChar() && '=' == nextChar() && ' ' == nextChar() && '{' == nextChar()) return parseFromCurrentLocation(type);
default :
throw makeError(""String_Node_Str"");
}
}","/** 
 * @param < T >
 * @param type
 * @return
 * @throws Exception
 */
@SuppressWarnings(""String_Node_Str"") private <T>T parseFromCurrentLocation(Class<T> type,Class<?> componentType) throws Exception {
  Mirror<T> me=Mirror.me(type);
switch (cursor) {
case -1:
    return null;
case '[':
  Class<?> compType=componentType;
boolean reurnAsList=true;
List list=null;
if (null == type) {
list=new LinkedList();
}
 else if (type.isArray()) {
list=new LinkedList();
reurnAsList=false;
compType=type.getComponentType();
}
 else if (List.class.isAssignableFrom(type)) {
reurnAsList=true;
if (me.is(List.class)) list=new LinkedList();
 else list=(List)me.born();
}
 else {
throw makeError(String.format(""String_Node_Str"",type.getName()));
}
nextChar();
skipCommentsAndBlank();
while (cursor != -1 && cursor != ']') {
Object o=parseFromCurrentLocation(compType,null);
list.add(o);
skipCommentsAndBlank();
if (cursor == ']') break;
if (cursor != ',') throw makeError(""String_Node_Str"");
nextChar();
skipCommentsAndBlank();
}
nextChar();
if (reurnAsList) return (T)list;
Object ary=Array.newInstance(compType,list.size());
int i=0;
for (Iterator it=list.iterator(); it.hasNext(); ) Array.set(ary,i++,Castors.me().castTo(it.next(),compType));
return (T)ary;
case '{':
nextChar();
skipCommentsAndBlank();
if (Map.class == type) me=(Mirror<T>)Mirror.me(HashMap.class);
if (null == me || Map.class.isAssignableFrom(type)) {
Map<String,Object> map=null == me ? new TreeMap<String,Object>() : (Map<String,Object>)me.born();
while (cursor != -1 && cursor != '}') {
String name=readFieldName();
Object value=parseFromJson(null,componentType);
map.put(name,value);
if (!findNextNamePair()) break;
}
nextChar();
return (T)map;
}
T obj=me.born();
while (cursor != -1 && cursor != '}') {
Field f=me.getField(readFieldName());
Class<?> ft=f.getType();
Class<?> eleType=null;
if (List.class.isAssignableFrom(ft)) {
Class<?>[] ts=Mirror.getGenericTypes(f);
if (ts.length > 0) eleType=ts[0];
}
 else if (Map.class.isAssignableFrom(ft)) {
Class<?>[] ts=Mirror.getGenericTypes(f);
if (ts.length > 1) eleType=ts[1];
}
Object value=parseFromJson(f.getType(),eleType);
me.setValue(obj,f,value);
if (!findNextNamePair()) break;
}
nextChar();
return obj;
case 'u':
if ('n' != (char)nextChar() & 'd' != (char)nextChar() & 'e' != (char)nextChar() & 'f' != (char)nextChar() & 'i' != (char)nextChar() & 'n' != (char)nextChar() & 'e' != (char)nextChar() & 'd' != (char)nextChar()) throw makeError(""String_Node_Str"");
nextChar();
return null;
case 'n':
if ('u' != (char)nextChar() & 'l' != (char)nextChar() & 'l' != (char)nextChar()) throw makeError(""String_Node_Str"");
nextChar();
return null;
case '\'':
case '""':
StringBuilder vs=readString();
String value=vs.toString();
if (null == me || me.is(String.class)) return (T)value;
return Castors.me().castTo(value,me.getType());
case 't':
if ('u' != (char)nextChar() & 'r' != (char)nextChar() & 'e' != (char)nextChar()) throw makeError(""String_Node_Str"");
if (null != type && !Mirror.me(type).isBoolean()) throw makeError(""String_Node_Str"");
nextChar();
return (T)Boolean.valueOf(true);
case 'f':
if ('a' != (char)nextChar() & 'l' != (char)nextChar() & 's' != (char)nextChar() & 'e' != (char)nextChar()) throw makeError(""String_Node_Str"");
if (null != type && !Mirror.me(type).isBoolean()) throw makeError(""String_Node_Str"");
nextChar();
return (T)Boolean.valueOf(false);
case '.':
case '-':
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
StringBuilder sb=new StringBuilder();
do {
sb.append((char)cursor);
nextChar();
}
 while (cursor != ' ' && cursor != -1 && cursor != ',' && cursor != ']' && cursor != '}' && cursor != '/');
String numValue=Strings.trim(sb);
if (null == me) {
char lastChar=Character.toUpperCase(numValue.charAt(numValue.length() - 1));
if (numValue.indexOf('.') >= 0) {
if (lastChar == 'F') return (T)Float.valueOf(numValue.substring(0,numValue.length() - 1));
 else return (T)Double.valueOf(numValue);
}
 else {
if (lastChar == 'L') return (T)Long.valueOf(numValue.substring(0,numValue.length() - 1));
 else return (T)Integer.valueOf(numValue);
}
}
if (me.isInt()) {
return (T)Integer.valueOf(numValue);
}
 else if (me.isLong()) {
return (T)Long.valueOf(numValue);
}
 else if (me.isFloat()) {
return (T)Float.valueOf(numValue);
}
 else if (me.isDouble()) {
return (T)Double.valueOf(numValue);
}
 else if (me.isByte()) {
return (T)Byte.valueOf(numValue);
}
 else {
throw makeError(""String_Node_Str"");
}
case 'v':
if ('a' == nextChar() && 'r' == nextChar() && ' ' == nextChar() && 'i' == nextChar() && 'o' == nextChar() && 'c' == nextChar() && ' ' == nextChar() && '=' == nextChar() && ' ' == nextChar() && '{' == nextChar()) return parseFromCurrentLocation(type,componentType);
default :
throw makeError(""String_Node_Str"");
}
}"
81017,"/** 
 * 获取一个字段的泛型参数数组，如果这个字段没有泛型，返回空数组
 * @param f 字段
 * @return 泛型参数数组
 */
public static Class<?>[] getGenericTypes(Field f){
  String gts=f.toGenericString();
  Matcher m=PTN.matcher(gts);
  if (m.find()) {
    String s=m.group(2);
    String[] ss=Strings.splitIgnoreBlank(s);
    if (ss.length > 0) {
      Class<?>[] re=new Class<?>[ss.length];
      try {
        for (int i=0; i < ss.length; i++)         re[i]=Class.forName(ss[i]);
        return re;
      }
 catch (      ClassNotFoundException e) {
        throw Lang.wrapThrow(e);
      }
    }
  }
  return new Class<?>[0];
}","/** 
 * 获取一个字段的泛型参数数组，如果这个字段没有泛型，返回空数组
 * @param f 字段
 * @return 泛型参数数组
 */
public static Class<?>[] getGenericTypes(Field f){
  String gts=f.toGenericString();
  Matcher m=PTN.matcher(gts);
  if (m.find()) {
    String s=m.group(2);
    String[] ss=Strings.splitIgnoreBlank(s);
    if (ss.length > 0) {
      Class<?>[] re=new Class<?>[ss.length];
      try {
        for (int i=0; i < ss.length; i++) {
          String className=ss[i];
          if (className.startsWith(""String_Node_Str""))           re[i]=Object.class;
 else {
            int pos=className.indexOf('<');
            if (pos < 0)             re[i]=Class.forName(className);
 else             re[i]=Class.forName(className.substring(0,pos));
          }
        }
        return re;
      }
 catch (      ClassNotFoundException e) {
        throw Lang.wrapThrow(e);
      }
    }
  }
  return new Class<?>[0];
}"
81018,"@Test public void test_getGenericTypes() throws Exception {
  Field f=Abcc.class.getDeclaredField(""String_Node_Str"");
  Class<?>[] types=Mirror.getGenericTypes(f);
  assertEquals(2,types.length);
  assertEquals(String.class,types[0]);
  assertEquals(Object.class,types[1]);
  f=Abcc.class.getDeclaredField(""String_Node_Str"");
  types=Mirror.getGenericTypes(f);
  assertEquals(1,types.length);
  assertEquals(Abcc.class,types[0]);
  f=Abcc.class.getDeclaredField(""String_Node_Str"");
  types=Mirror.getGenericTypes(f);
  assertEquals(0,types.length);
}","@Test public void test_getGenericTypes() throws Exception {
  Field f=Abcc.class.getDeclaredField(""String_Node_Str"");
  Class<?>[] types=Mirror.getGenericTypes(f);
  assertEquals(2,types.length);
  assertEquals(String.class,types[0]);
  assertEquals(Mirror.class,types[1]);
  f=Abcc.class.getDeclaredField(""String_Node_Str"");
  types=Mirror.getGenericTypes(f);
  assertEquals(2,types.length);
  assertEquals(Object.class,types[0]);
  assertEquals(String.class,types[1]);
  f=Abcc.class.getDeclaredField(""String_Node_Str"");
  types=Mirror.getGenericTypes(f);
  assertEquals(1,types.length);
  assertEquals(Abcc.class,types[0]);
  f=Abcc.class.getDeclaredField(""String_Node_Str"");
  types=Mirror.getGenericTypes(f);
  assertEquals(1,types.length);
  assertEquals(Object.class,types[0]);
  f=Abcc.class.getDeclaredField(""String_Node_Str"");
  types=Mirror.getGenericTypes(f);
  assertEquals(0,types.length);
}"
81019,"@Override protected ParamInjector evalInjector(Class<?> type,Param param){
  if (null == param)   return new PathArgInjector(type);
  String pm=param.value();
  if (""String_Node_Str"".equals(pm)) {
    return new ObjectPairInjector(null,type);
  }
 else   if (pm.startsWith(""String_Node_Str"") && pm.length() > 2) {
    return new ObjectPairInjector(pm.substring(2),type);
  }
 else   if (type.isArray())   return new ArrayInjector(pm,type);
  return new NameInjector(pm,type);
}","@Override protected ParamInjector evalInjector(Class<?> type,Param param){
  if (null == param)   return new PathArgInjector(type);
  String pm=param.value();
  if (""String_Node_Str"".equals(pm)) {
    if (type.isAssignableFrom(Map.class))     return new MapPairInjector();
    return new ObjectPairInjector(null,type);
  }
 else   if (pm.startsWith(""String_Node_Str"") && pm.length() > 2) {
    return new ObjectPairInjector(pm.substring(2),type);
  }
 else   if (type.isArray())   return new ArrayInjector(pm,type);
  return new NameInjector(pm,type);
}"
81020,"private boolean isPojoExistsColumnAnnField(Mirror<?> mirror){
  for (  Field f : mirror.getFields())   if (null != f.getAnnotation(Column.class))   return true;
  return false;
}","private boolean isPojoExistsColumnAnnField(Mirror<?> mirror){
  for (  Field f : mirror.getFields())   if (null != f.getAnnotation(Column.class))   return true;
 else   if (null != f.getAnnotation(Id.class))   return true;
 else   if (null != f.getAnnotation(Name.class))   return true;
  return false;
}"
81021,"public Entity<?> make(DatabaseMeta db,Connection conn,Class<?> type){
  Entity<?> entity=new Entity<Object>();
  Mirror<?> mirror=Mirror.me(type);
  entity.setMirror(mirror);
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",type.getName(),db.getTypeName());
  entity.setTableName(evalEntityName(type,Table.class,null));
  entity.setViewName(evalEntityName(type,View.class,Table.class));
  entity.setBorning(Borns.evalBorning(entity));
  boolean existsColumnAnnField=isPojoExistsColumnAnnField(mirror);
  HashMap<String,EntityField> pkmap=new HashMap<String,EntityField>();
  PK pk=type.getAnnotation(PK.class);
  if (null != pk) {
    for (    String pknm : pk.value())     pkmap.put(pknm,null);
  }
  Statement stat=null;
  ResultSet rs=null;
  ResultSetMetaData rsmd=null;
  List<FieldQuery> befores;
  List<FieldQuery> afters;
  try {
    try {
      stat=conn.createStatement();
      rs=stat.executeQuery(db.getResultSetMetaSql(entity.getViewName()));
      rsmd=rs.getMetaData();
    }
 catch (    Exception e) {
      if (log.isWarnEnabled())       log.warn(""String_Node_Str"" + entity.getViewName() + ""String_Node_Str"");
    }
    befores=new ArrayList<FieldQuery>(5);
    afters=new ArrayList<FieldQuery>(5);
    for (    Field f : mirror.getFields()) {
      Link link=evalLink(db,conn,mirror,f);
      if (null != link) {
        entity.addLinks(link);
      }
 else {
        if (existsColumnAnnField && null == f.getAnnotation(Column.class))         continue;
        EntityField ef=evalField(db,rsmd,entity,f);
        if (pkmap.containsKey(ef.getName())) {
          pkmap.put(ef.getName(),ef);
          if (!(ef.isId() || ef.isName()))           ef.setType(FieldType.PK);
        }
        if (null != ef.getBeforeInsert())         befores.add(ef.getBeforeInsert());
 else         if (null != ef.getAfterInsert())         afters.add(ef.getAfterInsert());
        if (null != ef) {
          entity.addField(ef);
        }
      }
    }
  }
 catch (  SQLException e) {
    throw Lang.wrapThrow(e,""String_Node_Str"",type);
  }
 finally {
    Daos.safeClose(stat,rs);
  }
  if (pkmap.size() > 0) {
    EntityField[] pks=new EntityField[pkmap.size()];
    for (int i=0; i < pk.value().length; i++)     pks[i]=pkmap.get(pk.value()[i]);
    entity.setPkFields(pks);
  }
  entity.setBefores(befores.toArray(new FieldQuery[befores.size()]));
  entity.setAfters(afters.toArray(new FieldQuery[afters.size()]));
  return entity;
}","public Entity<?> make(DatabaseMeta db,Connection conn,Class<?> type){
  Entity<?> entity=new Entity<Object>();
  Mirror<?> mirror=Mirror.me(type);
  entity.setMirror(mirror);
  if (log.isDebugEnabled())   log.debugf(""String_Node_Str"",type.getName(),db.getTypeName());
  entity.setTableName(evalEntityName(type,Table.class,null));
  entity.setViewName(evalEntityName(type,View.class,Table.class));
  entity.setBorning(Borns.evalBorning(entity));
  boolean existsColumnAnnField=isPojoExistsColumnAnnField(mirror);
  HashMap<String,EntityField> pkmap=new HashMap<String,EntityField>();
  PK pk=type.getAnnotation(PK.class);
  if (null != pk) {
    for (    String pknm : pk.value())     pkmap.put(pknm,null);
  }
  Statement stat=null;
  ResultSet rs=null;
  ResultSetMetaData rsmd=null;
  List<FieldQuery> befores;
  List<FieldQuery> afters;
  try {
    try {
      stat=conn.createStatement();
      rs=stat.executeQuery(db.getResultSetMetaSql(entity.getViewName()));
      rsmd=rs.getMetaData();
    }
 catch (    Exception e) {
      if (log.isWarnEnabled())       log.warn(""String_Node_Str"" + entity.getViewName() + ""String_Node_Str"");
    }
    befores=new ArrayList<FieldQuery>(5);
    afters=new ArrayList<FieldQuery>(5);
    for (    Field f : mirror.getFields()) {
      Link link=evalLink(db,conn,mirror,f);
      if (null != link) {
        entity.addLinks(link);
      }
 else {
        if (existsColumnAnnField)         if (!pkmap.containsKey(f.getName()))         if (null == f.getAnnotation(Column.class))         if (null == f.getAnnotation(Id.class))         if (null == f.getAnnotation(Name.class))         continue;
        EntityField ef=evalField(db,rsmd,entity,f);
        if (pkmap.containsKey(ef.getName())) {
          pkmap.put(ef.getName(),ef);
          if (!(ef.isId() || ef.isName()))           ef.setType(FieldType.PK);
        }
        if (null != ef.getBeforeInsert())         befores.add(ef.getBeforeInsert());
 else         if (null != ef.getAfterInsert())         afters.add(ef.getAfterInsert());
        if (null != ef) {
          entity.addField(ef);
        }
      }
    }
  }
 catch (  SQLException e) {
    throw Lang.wrapThrow(e,""String_Node_Str"",type);
  }
 finally {
    Daos.safeClose(stat,rs);
  }
  if (pkmap.size() > 0) {
    EntityField[] pks=new EntityField[pkmap.size()];
    for (int i=0; i < pk.value().length; i++)     pks[i]=pkmap.get(pk.value()[i]);
    entity.setPkFields(pks);
  }
  entity.setBefores(befores.toArray(new FieldQuery[befores.size()]));
  entity.setAfters(afters.toArray(new FieldQuery[afters.size()]));
  return entity;
}"
81022,"/** 
 * 拷贝一个文件
 * @param src 原始文件
 * @param target 新文件
 * @return 是否拷贝成功
 * @throws IOException
 */
public static boolean copyFile(File src,File target) throws IOException {
  if (src == null || target == null)   return false;
  if (!src.exists())   return false;
  if (!target.exists())   if (!createNewFile(target))   return false;
  InputStream ins=new BufferedInputStream(new FileInputStream(src));
  OutputStream ops=new BufferedOutputStream(new FileOutputStream(target));
  int b;
  while (-1 != (b=ins.read()))   ops.write(b);
  ins.close();
  ops.close();
  target.setLastModified(src.lastModified());
  return true;
}","/** 
 * 拷贝一个文件
 * @param src 原始文件
 * @param target 新文件
 * @return 是否拷贝成功
 * @throws IOException
 */
public static boolean copyFile(File src,File target) throws IOException {
  if (src == null || target == null)   return false;
  if (!src.exists())   return false;
  if (!target.exists())   if (!createNewFile(target))   return false;
  InputStream ins=new BufferedInputStream(new FileInputStream(src));
  OutputStream ops=new BufferedOutputStream(new FileOutputStream(target));
  int b;
  while (-1 != (b=ins.read()))   ops.write(b);
  ins.close();
  ops.close();
  return target.setLastModified(src.lastModified());
}"
81023,"/** 
 * The function try to return the file path of one class or package. If it exists in regular directory, it will return as ""D:/folder/folder/name.class"" in windows, and ""/folder/folder/name.class"" in unix like system. <p> If the class file exists in one jar file, it will return the path like: <b>'XXXXXXXfile:\XXXXXX\XXX.jar!\XX\XX\XX'</b> <p> use ClassLoader.getResources(String) to search resources in classpath <p> <b style=color:red>Note:</b> <p> We use new <i>ClassLoader(){}</i> to instead of <i>classZ.getClassLoader()</i>, for the reason: in <b>GAE</b> , it will fail if you call getClassLoader() <br> <br>
 * @param base : the class file name or package dir name
 * @return path or null if nothing found
 * @author Wendal Chen
 * @author zozoh
 * @see java.lang.ClassLoader
 * @see java.io.File
 */
private static File getBasePath(String base){
  try {
    Enumeration<URL> urls=new ClassLoader(){
    }
.getResources(base);
    File file=null;
    if (null != urls && urls.hasMoreElements()) {
      URL url=urls.nextElement();
      if (url != null) {
        String path=url.getFile();
        try {
          path=URLDecoder.decode(path,Charset.defaultCharset().name());
        }
 catch (        Exception e) {
        }
        file=new File(path);
      }
    }
    if (null == file)     file=Files.findFile(base);
    if (null == file)     return null;
    try {
      if (file.isDirectory())       return file;
    }
 catch (    SecurityException e) {
    }
    return file.getParentFile();
  }
 catch (  IOException e) {
  }
  return null;
}","/** 
 * The function try to return the file path of one class or package. If it exists in regular directory, it will return as ""D:/folder/folder/name.class"" in windows, and ""/folder/folder/name.class"" in unix like system. <p> If the class file exists in one jar file, it will return the path like: <b>'XXXXXXXfile:\XXXXXX\XXX.jar!\XX\XX\XX'</b> <p> use ClassLoader.getResources(String) to search resources in classpath <p> <b style=color:red>Note:</b> <p> We use new <i>ClassLoader(){}</i> to instead of <i>classZ.getClassLoader()</i>, for the reason: in <b>GAE</b> , it will fail if you call getClassLoader() <br> <br>
 * @param base : the class file name or package dir name
 * @return path or null if nothing found
 * @author Wendal Chen
 * @author zozoh
 * @see java.lang.ClassLoader
 * @see java.io.File
 */
private static File getBasePath(String base){
  try {
    Enumeration<URL> urls=new ClassLoader(){
    }
.getResources(base);
    File file=null;
    if (null != urls && urls.hasMoreElements()) {
      URL url=urls.nextElement();
      if (url != null) {
        String path=url.getFile();
        path=decodePath(path);
        file=new File(path);
      }
    }
    if (null == file)     file=Files.findFile(base);
    if (null == file)     return null;
    try {
      if (file.isDirectory())       return file;
    }
 catch (    SecurityException e) {
    }
    return file.getParentFile();
  }
 catch (  IOException e) {
  }
  return null;
}"
81024,"private static String[] findInJar(String jarPath,Class<?> baseClass){
  try {
    try {
      jarPath=URLDecoder.decode(jarPath,Charset.defaultCharset().name());
    }
 catch (    UnsupportedEncodingException e) {
    }
    ZipEntry[] entrys=Files.findEntryInZip(new ZipFile(jarPath),baseClass.getPackage().getName().replace('.','/') + ""String_Node_Str"");
    if (null != entrys && entrys.length > 0) {
      String[] classNames=new String[entrys.length];
      for (int i=0; i < entrys.length; i++) {
        String ph=entrys[i].getName();
        classNames[i]=ph.substring(0,ph.lastIndexOf('.')).replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      return classNames;
    }
  }
 catch (  IOException e) {
  }
  return null;
}","private static String[] findInJar(String jarPath,Class<?> baseClass){
  try {
    jarPath=decodePath(jarPath);
    ZipEntry[] entrys=Files.findEntryInZip(new ZipFile(jarPath),baseClass.getPackage().getName().replace('.','/') + ""String_Node_Str"");
    if (null != entrys && entrys.length > 0) {
      String[] classNames=new String[entrys.length];
      for (int i=0; i < entrys.length; i++) {
        String ph=entrys[i].getName();
        classNames[i]=ph.substring(0,ph.lastIndexOf('.')).replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
      return classNames;
    }
  }
 catch (  IOException e) {
  }
  return null;
}"
81025,"public void parse(HttpServletRequest request,String charset,FilePool tmpFiles) throws UploadFailException {
  info=new UploadInfo();
  request.getSession().setAttribute(UploadInfo.class.getName(),info);
  info.setSum(request.getContentLength());
  try {
    params=new HashMap<String,Object>();
    InputStream ins=request.getInputStream();
    if (!(ins instanceof BufferedInputStream))     ins=new BufferedInputStream(ins);
    String contentType=request.getContentType();
    String s=""String_Node_Str"" + Http.multipart.getBoundary(contentType);
    char[] endValue=s.toCharArray();
    int[] right=new int[endValue.length];
    int cursor;
    int c=0;
    for (int i=0; i < s.length(); i++)     c=info.read(ins);
    while (c != -1) {
      cursor=0;
      right[cursor++]=info.read(ins);
      right[cursor++]=right[0] == -1 ? -1 : info.read(ins);
      if (right[1] == -1 || (right[0] == '-' && right[1] == '-'))       break;
      StreamBuffer sb=new StreamBuffer();
      while (cursor < endName.length && (c=info.read(ins)) != -1) {
        if (c == endName[cursor]) {
          right[cursor++]=c;
        }
 else {
          if (cursor > 0) {
            for (int i=0; i < cursor; i++)             sb.write(right[i]);
          }
          sb.write(c);
          cursor=0;
        }
      }
      FieldMeta meta=new FieldMeta(sb.toString(charset));
      cursor=0;
      if (meta.isFile()) {
        File tmp=tmpFiles.createFile(meta.getFileExtension());
        OutputStream ots=new BufferedOutputStream(new FileOutputStream(tmp));
        while (c != -1 && cursor < endValue.length) {
          c=info.read(ins);
          if (c == endValue[cursor]) {
            right[cursor++]=c;
          }
 else {
            if (cursor > 0) {
              for (int i=0; i < cursor; i++)               ots.write(right[i]);
            }
            ots.write(c);
            cursor=0;
          }
        }
        ots.close();
        params.put(meta.getName(),new TempFile(meta,tmp));
      }
 else {
        sb=new StreamBuffer();
        while (c != -1 && cursor < endValue.length) {
          c=info.read(ins);
          if (c == endValue[cursor]) {
            right[cursor++]=c;
          }
 else {
            if (cursor > 0) {
              for (int i=0; i < cursor; i++)               sb.write(right[i]);
            }
            sb.write(c);
            cursor=0;
          }
        }
        params.put(meta.getName(),sb.toString(charset));
      }
      s=request.getQueryString();
      if (null != s) {
        String[] pairs=Strings.splitIgnoreBlank(s,""String_Node_Str"");
        for (        String pair : pairs) {
          String[] pp=pair.split(""String_Node_Str"");
          if (pp.length > 1)           params.put(pp[0],pp[1]);
 else           params.put(pp[0],null);
        }
      }
    }
  }
 catch (  IOException e) {
    throw new UploadFailException(e);
  }
 finally {
    request.getSession().removeAttribute(UploadInfo.class.getName());
  }
}","public void parse(HttpServletRequest request,String charset,FilePool tmpFiles) throws UploadFailException {
  info=new UploadInfo();
  request.getSession().setAttribute(UploadInfo.class.getName(),info);
  info.setSum(request.getContentLength());
  try {
    params=new HashMap<String,Object>();
    InputStream ins=request.getInputStream();
    ins=new BufferedInputStream(ins);
    String contentType=request.getContentType();
    String s=""String_Node_Str"" + Http.multipart.getBoundary(contentType);
    char[] endValue=s.toCharArray();
    int[] right=new int[endValue.length];
    int cursor;
    int c=0;
    for (int i=0; i < s.length(); i++)     c=info.read(ins);
    while (c != -1) {
      cursor=0;
      right[cursor++]=info.read(ins);
      right[cursor++]=right[0] == -1 ? -1 : info.read(ins);
      if (right[1] == -1 || (right[0] == '-' && right[1] == '-'))       break;
      StreamBuffer sb=new StreamBuffer();
      while (cursor < endName.length && (c=info.read(ins)) != -1) {
        if (c == endName[cursor]) {
          right[cursor++]=c;
        }
 else {
          if (cursor > 0) {
            for (int i=0; i < cursor; i++)             sb.write(right[i]);
          }
          sb.write(c);
          cursor=0;
        }
      }
      FieldMeta meta=new FieldMeta(sb.toString(charset));
      cursor=0;
      if (meta.isFile()) {
        File tmp=tmpFiles.createFile(meta.getFileExtension());
        OutputStream ots=new BufferedOutputStream(new FileOutputStream(tmp));
        while (c != -1 && cursor < endValue.length) {
          c=info.read(ins);
          if (c == endValue[cursor]) {
            right[cursor++]=c;
          }
 else {
            if (cursor > 0) {
              for (int i=0; i < cursor; i++)               ots.write(right[i]);
            }
            ots.write(c);
            cursor=0;
          }
        }
        ots.close();
        params.put(meta.getName(),new TempFile(meta,tmp));
      }
 else {
        sb=new StreamBuffer();
        while (c != -1 && cursor < endValue.length) {
          c=info.read(ins);
          if (c == endValue[cursor]) {
            right[cursor++]=c;
          }
 else {
            if (cursor > 0) {
              for (int i=0; i < cursor; i++)               sb.write(right[i]);
            }
            sb.write(c);
            cursor=0;
          }
        }
        params.put(meta.getName(),sb.toString(charset));
      }
      s=request.getQueryString();
      if (null != s) {
        String[] pairs=Strings.splitIgnoreBlank(s,""String_Node_Str"");
        for (        String pair : pairs) {
          String[] pp=pair.split(""String_Node_Str"");
          if (pp.length > 1)           params.put(pp[0],pp[1]);
 else           params.put(pp[0],null);
        }
      }
    }
  }
 catch (  IOException e) {
    throw new UploadFailException(e);
  }
 finally {
    request.getSession().removeAttribute(UploadInfo.class.getName());
  }
}"
81026,"private void initLevelStuff() throws ClassNotFoundException, NoSuchFieldException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
  logClass=Class.forName(LOG4J_CLASS_NAME,true,Thread.currentThread().getContextClassLoader());
  log4jMirror=Mirror.me(logClass);
  getLogger=log4jMirror.findMethod(""String_Node_Str"",String.class);
  Mirror<?> levelMirror=Mirror.me(Thread.currentThread().getContextClassLoader().loadClass(""String_Node_Str""));
  levelFatal=levelMirror.getField(""String_Node_Str"").get(log4jImpl);
  levelError=levelMirror.getField(""String_Node_Str"").get(log4jImpl);
  levelWarn=levelMirror.getField(""String_Node_Str"").get(log4jImpl);
  levelInfo=levelMirror.getField(""String_Node_Str"").get(log4jImpl);
  levelDebug=levelMirror.getField(""String_Node_Str"").get(log4jImpl);
  levelTrace=levelMirror.getField(""String_Node_Str"").get(log4jImpl);
  isEnabledFor=log4jMirror.findMethod(""String_Node_Str"",levelMirror.getType());
  fatalObjectMethod=findMethod(""String_Node_Str"");
  fatalObjectThrowableMethod=findMethod_Throw(""String_Node_Str"");
  errorObjectMethod=findMethod(""String_Node_Str"");
  errorObjectThrowableMethod=findMethod_Throw(""String_Node_Str"");
  warnObjectMethod=findMethod(""String_Node_Str"");
  warnObjectThrowableMethod=findMethod_Throw(""String_Node_Str"");
  infoObjectMethod=findMethod(""String_Node_Str"");
  infoObjectThrowableMethod=findMethod_Throw(""String_Node_Str"");
  debugObjectMethod=findMethod(""String_Node_Str"");
  debugObjectThrowableMethod=findMethod_Throw(""String_Node_Str"");
  traceObjectMethod=findMethod(""String_Node_Str"");
  traceObjectThrowableMethod=findMethod_Throw(""String_Node_Str"");
}","private void initLevelStuff() throws ClassNotFoundException, NoSuchFieldException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
  logClass=Class.forName(LOG4J_CLASS_NAME,true,Thread.currentThread().getContextClassLoader());
  log4jMirror=Mirror.me(logClass);
  getLogger=log4jMirror.findMethod(""String_Node_Str"",String.class);
  Mirror<?> levelMirror=Mirror.me(Thread.currentThread().getContextClassLoader().loadClass(""String_Node_Str""));
  levelFatal=levelMirror.getField(""String_Node_Str"").get(log4jImpl);
  levelError=levelMirror.getField(""String_Node_Str"").get(log4jImpl);
  levelWarn=levelMirror.getField(""String_Node_Str"").get(log4jImpl);
  levelInfo=levelMirror.getField(""String_Node_Str"").get(log4jImpl);
  levelDebug=levelMirror.getField(""String_Node_Str"").get(log4jImpl);
  isEnabledFor=log4jMirror.findMethod(""String_Node_Str"",levelMirror.getType());
  fatalObjectMethod=findMethod(""String_Node_Str"");
  fatalObjectThrowableMethod=findMethod_Throw(""String_Node_Str"");
  errorObjectMethod=findMethod(""String_Node_Str"");
  errorObjectThrowableMethod=findMethod_Throw(""String_Node_Str"");
  warnObjectMethod=findMethod(""String_Node_Str"");
  warnObjectThrowableMethod=findMethod_Throw(""String_Node_Str"");
  infoObjectMethod=findMethod(""String_Node_Str"");
  infoObjectThrowableMethod=findMethod_Throw(""String_Node_Str"");
  debugObjectMethod=findMethod(""String_Node_Str"");
  debugObjectThrowableMethod=findMethod_Throw(""String_Node_Str"");
  try {
    levelTrace=levelMirror.getField(""String_Node_Str"").get(log4jImpl);
    traceObjectMethod=findMethod(""String_Node_Str"");
    traceObjectThrowableMethod=findMethod_Throw(""String_Node_Str"");
  }
 catch (  Throwable e) {
  }
}"
81027,"private Log4jAdapter(String className) throws ClassNotFoundException, NoSuchMethodException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
  if (false == isInited) {
    initLevelStuff();
    isInited=true;
  }
  log4jImpl=getLogger.invoke(null,className);
  isFatalEnabled=(Boolean)isEnabledFor.invoke(log4jImpl,levelFatal);
  isErrorEnabled=(Boolean)isEnabledFor.invoke(log4jImpl,levelError);
  isWarnEnabled=(Boolean)isEnabledFor.invoke(log4jImpl,levelWarn);
  isInfoEnabled=(Boolean)isEnabledFor.invoke(log4jImpl,levelInfo);
  isDebugEnabled=(Boolean)isEnabledFor.invoke(log4jImpl,levelDebug);
  isTraceEnabled=(Boolean)isEnabledFor.invoke(log4jImpl,levelTrace);
}","private Log4jAdapter(String className) throws ClassNotFoundException, NoSuchMethodException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
  if (false == isInited) {
    initLevelStuff();
    isInited=true;
  }
  log4jImpl=getLogger.invoke(null,className);
  isFatalEnabled=(Boolean)isEnabledFor.invoke(log4jImpl,levelFatal);
  isErrorEnabled=(Boolean)isEnabledFor.invoke(log4jImpl,levelError);
  isWarnEnabled=(Boolean)isEnabledFor.invoke(log4jImpl,levelWarn);
  isInfoEnabled=(Boolean)isEnabledFor.invoke(log4jImpl,levelInfo);
  isDebugEnabled=(Boolean)isEnabledFor.invoke(log4jImpl,levelDebug);
  isTraceEnabled=(Boolean)isEnabledFor.invoke(log4jImpl,levelTrace);
  System.out.println(""String_Node_Str"");
}"
81028,"public boolean canWork(NutPluginConfig config){
  try {
    LoggerFactory.getILoggerFactory();
    return true;
  }
 catch (  Throwable e) {
  }
  return false;
}","public boolean canWork(NutPluginConfig config){
  try {
    Class.forName(""String_Node_Str"");
    return true;
  }
 catch (  Throwable e) {
  }
  return false;
}"
81029,"private static void loadPlugin(String pluginClassName){
  try {
    Class<?> pluginClass=Class.forName(pluginClassName);
    NutPlugin nutPlugin=(NutPlugin)pluginClass.newInstance();
    if (nutPlugin.canWork(nutPluginConfig)) {
      nutPlugin.init(nutPluginConfig);
      Class<?> workForClass=nutPlugin.workFor();
      List<NutPlugin> list=plugins.get(workForClass);
      if (list == null) {
        list=new ArrayList<NutPlugin>();
        plugins.put(workForClass,list);
      }
      list.add(nutPlugin);
    }
  }
 catch (  Throwable e) {
    LogFactory.getLog(NutPluginManagement.class).warnf(""String_Node_Str"",pluginClassName);
  }
}","private static void loadPlugin(String pluginClassName){
  try {
    Class<?> pluginClass=Class.forName(pluginClassName);
    NutPlugin nutPlugin=(NutPlugin)pluginClass.newInstance();
    if (nutPlugin.canWork(nutPluginConfig)) {
      nutPlugin.init(nutPluginConfig);
      Class<?> workForClass=nutPlugin.workFor();
      List<NutPlugin> list=plugins.get(workForClass);
      if (list == null) {
        list=new ArrayList<NutPlugin>();
        plugins.put(workForClass,list);
      }
      list.add(nutPlugin);
    }
  }
 catch (  Throwable e) {
  }
}"
81030,"/** 
 * The function try to return the file path of one class or package. If it exists in regular directory, it will return as ""D:/folder/folder/name.class"" in windows, and ""/folder/folder/name.class"" in unix like system. <p> If the class file exists in one jar file, it will return the path like: <b>'XXXXXXXfile:\XXXXXX\XXX.jar!\XX\XX\XX'</b> <p> use ClassLoader.getResources(String) to search resources in classpath <p> <b style=color:red>Note:</b> <p> We use new <i>ClassLoader(){}</i> to instead of <i>classZ.getClassLoader()</i>, for the reason: in <b>GAE</b> , it will fail if you call getClassLoader() <br> <br>
 * @param base : the class file name or package dir name
 * @return path or null if nothing found
 * @author Wendal Chen
 * @author zozoh
 * @see java.lang.ClassLoader
 * @see java.io.File
 */
private static File getBasePath(String base){
  try {
    Enumeration<URL> urls=new ClassLoader(){
    }
.getResources(base);
    File file=null;
    if (null != urls && urls.hasMoreElements()) {
      URL url=urls.nextElement();
      if (url != null)       file=new File(url.getFile());
    }
    if (null == file)     file=Files.findFile(base);
    if (null == file)     return null;
    if (file.isDirectory())     return file;
    return file.getParentFile();
  }
 catch (  IOException e) {
  }
  return null;
}","/** 
 * The function try to return the file path of one class or package. If it exists in regular directory, it will return as ""D:/folder/folder/name.class"" in windows, and ""/folder/folder/name.class"" in unix like system. <p> If the class file exists in one jar file, it will return the path like: <b>'XXXXXXXfile:\XXXXXX\XXX.jar!\XX\XX\XX'</b> <p> use ClassLoader.getResources(String) to search resources in classpath <p> <b style=color:red>Note:</b> <p> We use new <i>ClassLoader(){}</i> to instead of <i>classZ.getClassLoader()</i>, for the reason: in <b>GAE</b> , it will fail if you call getClassLoader() <br> <br>
 * @param base : the class file name or package dir name
 * @return path or null if nothing found
 * @author Wendal Chen
 * @author zozoh
 * @see java.lang.ClassLoader
 * @see java.io.File
 */
private static File getBasePath(String base){
  try {
    Enumeration<URL> urls=new ClassLoader(){
    }
.getResources(base);
    File file=null;
    if (null != urls && urls.hasMoreElements()) {
      URL url=urls.nextElement();
      if (url != null)       file=new File(url.getFile());
    }
    if (null == file)     file=Files.findFile(base);
    if (null == file)     return null;
    try {
      if (file.isDirectory())       return file;
    }
 catch (    SecurityException e) {
    }
    return file.getParentFile();
  }
 catch (  IOException e) {
  }
  return null;
}"
81031,"/** 
 * Shows a notification icon in the status bar for GPS Logger
 */
private void showNotification(){
  Intent stopLoggingIntent=new Intent(this,GpsLoggingService.class);
  stopLoggingIntent.setAction(""String_Node_Str"");
  stopLoggingIntent.putExtra(IntentConstants.IMMEDIATE_STOP,true);
  PendingIntent piStop=PendingIntent.getService(this,0,stopLoggingIntent,0);
  Intent annotateIntent=new Intent(this,NotificationAnnotationActivity.class);
  annotateIntent.setAction(""String_Node_Str"");
  PendingIntent piAnnotate=PendingIntent.getActivity(this,0,annotateIntent,0);
  Intent contentIntent=new Intent(this,GpsMainActivity.class);
  TaskStackBuilder stackBuilder=TaskStackBuilder.create(this);
  stackBuilder.addNextIntent(contentIntent);
  PendingIntent pending=stackBuilder.getPendingIntent(0,PendingIntent.FLAG_UPDATE_CURRENT);
  CharSequence contentTitle=getString(R.string.gpslogger_still_running);
  CharSequence contentText=getString(R.string.app_name);
  long notificationTime=System.currentTimeMillis();
  if (session.hasValidLocation()) {
    contentTitle=Strings.getFormattedLatitude(session.getCurrentLatitude()) + ""String_Node_Str"" + Strings.getFormattedLongitude(session.getCurrentLongitude());
    contentText=Html.fromHtml(""String_Node_Str"" + getString(R.string.txt_altitude) + ""String_Node_Str""+ Strings.getDistanceDisplay(this,session.getCurrentLocationInfo().getAltitude(),preferenceHelper.shouldDisplayImperialUnits(),false)+ ""String_Node_Str""+ ""String_Node_Str""+ getString(R.string.txt_accuracy)+ ""String_Node_Str""+ Strings.getDistanceDisplay(this,session.getCurrentLocationInfo().getAltitude(),preferenceHelper.shouldDisplayImperialUnits(),true)+ ""String_Node_Str""+ ""String_Node_Str""+ getString(R.string.txt_travel_duration)+ ""String_Node_Str""+ Strings.getDescriptiveDurationString((int)(System.currentTimeMillis() - session.getStartTimeStamp()) / 1000,this));
    notificationTime=session.getCurrentLocationInfo().getTime();
  }
  if (nfc == null) {
    nfc=new NotificationCompat.Builder(getApplicationContext()).setSmallIcon(R.drawable.notification).setLargeIcon(BitmapFactory.decodeResource(getResources(),R.drawable.gpsloggericon3)).setPriority(preferenceHelper.shouldHideNotificationFromStatusBar() ? NotificationCompat.PRIORITY_MIN : NotificationCompat.PRIORITY_LOW).setCategory(NotificationCompat.CATEGORY_SERVICE).setVisibility(NotificationCompat.VISIBILITY_SECRET).setContentTitle(contentTitle).setContentText(contentText).setStyle(new NotificationCompat.BigTextStyle().bigText(contentText).setBigContentTitle(contentTitle)).setOngoing(true).setContentIntent(pending);
    if (!preferenceHelper.shouldHideNotificationButtons()) {
      nfc.addAction(R.drawable.annotate2,getString(R.string.menu_annotate),piAnnotate).addAction(android.R.drawable.ic_menu_close_clear_cancel,getString(R.string.shortcut_stop),piStop);
    }
  }
  nfc.setContentTitle(contentTitle);
  nfc.setContentText(contentText);
  nfc.setStyle(new NotificationCompat.BigTextStyle().bigText(contentText).setBigContentTitle(contentTitle));
  nfc.setWhen(notificationTime);
  notificationManager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);
  notificationManager.notify(NOTIFICATION_ID,nfc.build());
}","/** 
 * Shows a notification icon in the status bar for GPS Logger
 */
private void showNotification(){
  Intent stopLoggingIntent=new Intent(this,GpsLoggingService.class);
  stopLoggingIntent.setAction(""String_Node_Str"");
  stopLoggingIntent.putExtra(IntentConstants.IMMEDIATE_STOP,true);
  PendingIntent piStop=PendingIntent.getService(this,0,stopLoggingIntent,0);
  Intent annotateIntent=new Intent(this,NotificationAnnotationActivity.class);
  annotateIntent.setAction(""String_Node_Str"");
  PendingIntent piAnnotate=PendingIntent.getActivity(this,0,annotateIntent,0);
  Intent contentIntent=new Intent(this,GpsMainActivity.class);
  TaskStackBuilder stackBuilder=TaskStackBuilder.create(this);
  stackBuilder.addNextIntent(contentIntent);
  PendingIntent pending=stackBuilder.getPendingIntent(0,PendingIntent.FLAG_UPDATE_CURRENT);
  CharSequence contentTitle=getString(R.string.gpslogger_still_running);
  CharSequence contentText=getString(R.string.app_name);
  long notificationTime=System.currentTimeMillis();
  if (session.hasValidLocation()) {
    contentTitle=Strings.getFormattedLatitude(session.getCurrentLatitude()) + ""String_Node_Str"" + Strings.getFormattedLongitude(session.getCurrentLongitude());
    contentText=Html.fromHtml(""String_Node_Str"" + getString(R.string.txt_altitude) + ""String_Node_Str""+ Strings.getDistanceDisplay(this,session.getCurrentLocationInfo().getAltitude(),preferenceHelper.shouldDisplayImperialUnits(),false)+ ""String_Node_Str""+ ""String_Node_Str""+ getString(R.string.txt_accuracy)+ ""String_Node_Str""+ Strings.getDistanceDisplay(this,session.getCurrentLocationInfo().getAccuracy(),preferenceHelper.shouldDisplayImperialUnits(),true)+ ""String_Node_Str""+ ""String_Node_Str""+ getString(R.string.txt_travel_duration)+ ""String_Node_Str""+ Strings.getDescriptiveDurationString((int)(System.currentTimeMillis() - session.getStartTimeStamp()) / 1000,this));
    notificationTime=session.getCurrentLocationInfo().getTime();
  }
  if (nfc == null) {
    nfc=new NotificationCompat.Builder(getApplicationContext()).setSmallIcon(R.drawable.notification).setLargeIcon(BitmapFactory.decodeResource(getResources(),R.drawable.gpsloggericon3)).setPriority(preferenceHelper.shouldHideNotificationFromStatusBar() ? NotificationCompat.PRIORITY_MIN : NotificationCompat.PRIORITY_LOW).setCategory(NotificationCompat.CATEGORY_SERVICE).setVisibility(NotificationCompat.VISIBILITY_SECRET).setContentTitle(contentTitle).setContentText(contentText).setStyle(new NotificationCompat.BigTextStyle().bigText(contentText).setBigContentTitle(contentTitle)).setOngoing(true).setContentIntent(pending);
    if (!preferenceHelper.shouldHideNotificationButtons()) {
      nfc.addAction(R.drawable.annotate2,getString(R.string.menu_annotate),piAnnotate).addAction(android.R.drawable.ic_menu_close_clear_cancel,getString(R.string.shortcut_stop),piStop);
    }
  }
  nfc.setContentTitle(contentTitle);
  nfc.setContentText(contentText);
  nfc.setStyle(new NotificationCompat.BigTextStyle().bigText(contentText).setBigContentTitle(contentTitle));
  nfc.setWhen(notificationTime);
  notificationManager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);
  notificationManager.notify(NOTIFICATION_ID,nfc.build());
}"
81032,"private String getFormattedMessage(String message,int colorResourceId,long timeStamp){
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  String dateStamp=sdf.format(new Date(timeStamp)) + ""String_Node_Str"";
  String messageFormat=""String_Node_Str"";
  return String.format(messageFormat,dateStamp,Integer.toHexString(ContextCompat.getColor(getActivity(),colorResourceId)).substring(2),message);
}","private String getFormattedMessage(String message,int colorResourceId,long timeStamp){
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  String dateStamp=sdf.format(new Date(timeStamp)) + ""String_Node_Str"";
  String messageFormat=""String_Node_Str"";
  return String.format(messageFormat,dateStamp,Integer.toHexString(ContextCompat.getColor(rootView.getContext(),colorResourceId)).substring(2),message);
}"
81033,"public synchronized static boolean upload(String server,String username,String password,String directory,int port,boolean useFtps,String protocol,boolean implicit,File gpxFile,String fileName){
  FTPClient client;
  try {
    if (useFtps) {
      client=new FTPSClient(protocol,implicit);
      KeyManagerFactory kmf=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
      kmf.init(null,null);
      KeyManager km=kmf.getKeyManagers()[0];
      client.setSocketFactory(Networks.getSocketFactory(AppSettings.getInstance()));
      ((FTPSClient)client).setKeyManager(km);
    }
 else {
      client=new FTPClient();
    }
  }
 catch (  Exception e) {
    jobResult=new UploadEvents.Ftp().failed(""String_Node_Str"",e);
    LOG.error(""String_Node_Str"",e);
    return false;
  }
  try {
    client.connect(server,port);
    logServerReply(client);
    if (client.login(username,password)) {
      client.enterLocalPassiveMode();
      logServerReply(client);
      LOG.debug(""String_Node_Str"" + server);
      LOG.debug(""String_Node_Str"" + directory);
      FTPFile[] existingDirectory=client.listFiles(directory);
      logServerReply(client);
      if (existingDirectory.length <= 0) {
        LOG.debug(""String_Node_Str"" + directory);
        ftpCreateDirectoryTree(client,directory);
        logServerReply(client);
      }
      FileInputStream inputStream=new FileInputStream(gpxFile);
      client.changeWorkingDirectory(directory);
      client.setFileType(FTP.BINARY_FILE_TYPE);
      boolean result=client.storeFile(fileName,inputStream);
      inputStream.close();
      logServerReply(client);
      if (result) {
        LOG.debug(""String_Node_Str"" + fileName);
      }
 else {
        jobResult=new UploadEvents.Ftp().failed(""String_Node_Str"" + fileName,null);
        LOG.debug(""String_Node_Str"" + fileName);
        return false;
      }
    }
 else {
      logServerReply(client);
      jobResult=new UploadEvents.Ftp().failed(""String_Node_Str"",null);
      LOG.debug(""String_Node_Str"");
      return false;
    }
  }
 catch (  Exception e) {
    logServerReply(client);
    jobResult=new UploadEvents.Ftp().failed(""String_Node_Str"",e);
    LOG.error(""String_Node_Str"",e);
    return false;
  }
 finally {
    try {
      client.logout();
      logServerReply(client);
      client.disconnect();
      logServerReply(client);
    }
 catch (    Exception e) {
      if (jobResult == null) {
        jobResult=new UploadEvents.Ftp().failed(""String_Node_Str"",e);
      }
      LOG.error(""String_Node_Str"",e);
      return false;
    }
  }
  return true;
}","public synchronized static boolean upload(String server,String username,String password,String directory,int port,boolean useFtps,String protocol,boolean implicit,File gpxFile,String fileName){
  FTPClient client;
  try {
    if (useFtps) {
      client=new FTPSClient(protocol,implicit);
      KeyManagerFactory kmf=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
      kmf.init(Networks.getKnownServersStore(AppSettings.getInstance()),null);
      KeyManager km=kmf.getKeyManagers()[0];
      ((FTPSClient)client).setKeyManager(km);
      ((FTPSClient)client).setTrustManager(Networks.getTrustManager(AppSettings.getInstance()));
    }
 else {
      client=new FTPClient();
    }
  }
 catch (  Exception e) {
    jobResult=new UploadEvents.Ftp().failed(""String_Node_Str"",e);
    LOG.error(""String_Node_Str"",e);
    return false;
  }
  try {
    client.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(new LoggingOutputStream(LOG))));
    client.setDefaultTimeout(60000);
    client.setConnectTimeout(60000);
    client.connect(server,port);
    client.setSoTimeout(60000);
    client.setDataTimeout(60000);
    logServerReply(client);
    if (client.login(username,password)) {
      if (useFtps) {
        ((FTPSClient)client).execPBSZ(0);
        logServerReply(client);
        ((FTPSClient)client).execPROT(""String_Node_Str"");
        logServerReply(client);
      }
      client.enterLocalPassiveMode();
      logServerReply(client);
      LOG.debug(""String_Node_Str"" + server);
      LOG.debug(""String_Node_Str"" + directory);
      FTPFile[] existingDirectory=client.listFiles(directory);
      logServerReply(client);
      if (existingDirectory.length <= 0) {
        LOG.debug(""String_Node_Str"" + directory);
        ftpCreateDirectoryTree(client,directory);
        logServerReply(client);
      }
      FileInputStream inputStream=new FileInputStream(gpxFile);
      client.changeWorkingDirectory(directory);
      client.setFileType(FTP.BINARY_FILE_TYPE);
      boolean result=client.storeFile(fileName,inputStream);
      inputStream.close();
      logServerReply(client);
      if (result) {
        LOG.debug(""String_Node_Str"" + fileName);
      }
 else {
        jobResult=new UploadEvents.Ftp().failed(""String_Node_Str"" + fileName,null);
        LOG.debug(""String_Node_Str"" + fileName);
        return false;
      }
    }
 else {
      logServerReply(client);
      jobResult=new UploadEvents.Ftp().failed(""String_Node_Str"",null);
      LOG.debug(""String_Node_Str"");
      return false;
    }
  }
 catch (  Exception e) {
    logServerReply(client);
    jobResult=new UploadEvents.Ftp().failed(""String_Node_Str"",e);
    LOG.error(""String_Node_Str"",e);
    return false;
  }
 finally {
    try {
      client.logout();
      logServerReply(client);
      client.disconnect();
      logServerReply(client);
    }
 catch (    Exception e) {
      if (jobResult == null) {
        jobResult=new UploadEvents.Ftp().failed(""String_Node_Str"",e);
      }
      LOG.error(""String_Node_Str"",e);
      return false;
    }
  }
  return true;
}"
81034,"private static void logServerReply(FTPClient client){
  String singleReply=client.getReplyString();
  if (!Strings.isNullOrEmpty(singleReply)) {
    ftpServerResponses.add(singleReply);
    LOG.debug(""String_Node_Str"" + singleReply);
  }
  String[] replies=client.getReplyStrings();
  if (replies != null && replies.length > 0) {
    for (    String aReply : replies) {
      if (!Strings.isNullOrEmpty(aReply)) {
        ftpServerResponses.add(aReply);
        LOG.debug(""String_Node_Str"" + aReply);
      }
    }
  }
}","private static void logServerReply(FTPClient client){
  String singleReply=client.getReplyString();
  if (!Strings.isNullOrEmpty(singleReply)) {
    ftpServerResponses.add(singleReply);
  }
  String[] replies=client.getReplyStrings();
  if (replies != null && replies.length > 0) {
    for (    String aReply : replies) {
      if (!Strings.isNullOrEmpty(aReply)) {
        ftpServerResponses.add(aReply);
      }
    }
  }
}"
81035,"public String getLatestHdop(){
  if (nmeaParts[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (nmeaParts.length > 8 && !Utilities.IsNullOrEmpty(nmeaParts[8])) {
      return nmeaParts[8];
    }
  }
 else   if (nmeaParts.length > 16 && !Utilities.IsNullOrEmpty(nmeaParts[16])) {
    return nmeaParts[16];
  }
  return null;
}","public String getLatestHdop(){
  if (nmeaParts[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (nmeaParts.length > 8 && !Utilities.IsNullOrEmpty(nmeaParts[8])) {
      return nmeaParts[8];
    }
  }
 else   if (nmeaParts[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (nmeaParts.length > 16 && !Utilities.IsNullOrEmpty(nmeaParts[16])) {
      return nmeaParts[16];
    }
  }
  return null;
}"
81036,"/** 
 * Stops logging, removes notification, stops GPS manager, stops email timer
 */
public void StopLogging(){
  tracer.debug(""String_Node_Str"");
  Session.setAddNewTrackSegment(true);
  Session.setTotalTravelled(0);
  Session.setPreviousLocationInfo(null);
  Session.setStarted(false);
  Session.setUserStillSinceTimeStamp(0);
  stopAbsoluteTimer();
  AutoSendLogFileOnStop();
  CancelAlarm();
  Session.setCurrentLocationInfo(null);
  Session.setSinglePointMode(false);
  stopForeground(true);
  RemoveNotification();
  StopAlarm();
  StopGpsManager();
  StopPassiveManager();
  StopActivityRecognitionUpdates();
  NotifyClientStopped();
}","/** 
 * Stops logging, removes notification, stops GPS manager, stops email timer
 */
public void StopLogging(){
  tracer.debug(""String_Node_Str"");
  Session.setAddNewTrackSegment(true);
  Session.setTotalTravelled(0);
  Session.setPreviousLocationInfo(null);
  Session.setStarted(false);
  Session.setUserStillSinceTimeStamp(0);
  Session.setLatestTimeStamp(0);
  stopAbsoluteTimer();
  AutoSendLogFileOnStop();
  CancelAlarm();
  Session.setCurrentLocationInfo(null);
  Session.setSinglePointMode(false);
  stopForeground(true);
  RemoveNotification();
  StopAlarm();
  StopGpsManager();
  StopPassiveManager();
  StopActivityRecognitionUpdates();
  NotifyClientStopped();
}"
81037,"/** 
 * Sets the current file name based on user preference.
 */
private void ResetCurrentFileName(boolean newLogEachStart){
  String currentFileName=Session.getCurrentFormattedFileName();
  String newFileName=Session.getCurrentFileName();
  if (AppSettings.isCustomFile()) {
    newFileName=AppSettings.getCustomFileName();
    Session.setCurrentFileName(AppSettings.getCustomFileName());
  }
 else   if (AppSettings.shouldCreateNewFileOnceADay()) {
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    newFileName=sdf.format(new Date());
    Session.setCurrentFileName(newFileName);
  }
 else   if (newLogEachStart) {
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    newFileName=sdf.format(new Date());
    Session.setCurrentFileName(newFileName);
  }
  if (!Utilities.IsNullOrEmpty(currentFileName) && !currentFileName.equalsIgnoreCase(Utilities.GetFormattedCustomFileName(newFileName)) && Session.isStarted()) {
    tracer.info(""String_Node_Str"");
    EventBus.getDefault().post(new CommandEvents.AutoSend(currentFileName));
  }
  Session.setCurrentFormattedFileName(Session.getCurrentFileName());
  tracer.info(""String_Node_Str"" + newFileName);
  EventBus.getDefault().post(new ServiceEvents.FileNamed(newFileName));
}","/** 
 * Sets the current file name based on user preference.
 */
private void ResetCurrentFileName(boolean newLogEachStart){
  String oldFileName=Session.getCurrentFormattedFileName();
  String newFileName=Session.getCurrentFileName();
  if (AppSettings.isCustomFile()) {
    newFileName=AppSettings.getCustomFileName();
    Session.setCurrentFileName(AppSettings.getCustomFileName());
  }
 else   if (AppSettings.shouldCreateNewFileOnceADay()) {
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    newFileName=sdf.format(new Date());
    Session.setCurrentFileName(newFileName);
  }
 else   if (newLogEachStart) {
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    newFileName=sdf.format(new Date());
    Session.setCurrentFileName(newFileName);
  }
  if (!Utilities.IsNullOrEmpty(oldFileName) && !oldFileName.equalsIgnoreCase(Session.getCurrentFileName()) && Session.isStarted()) {
    tracer.info(""String_Node_Str"");
    EventBus.getDefault().post(new CommandEvents.AutoSend(oldFileName));
  }
  Session.setCurrentFormattedFileName(Session.getCurrentFileName());
  tracer.info(""String_Node_Str"" + Session.getCurrentFileName());
  EventBus.getDefault().post(new ServiceEvents.FileNamed(Session.getCurrentFileName()));
}"
81038,"/** 
 * Event raised when the form is created for the first time
 */
@Override public void onCreate(Bundle savedInstanceState){
  tracer.debug(""String_Node_Str"");
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_faq);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  browser=(WebView)findViewById(R.id.faqwebview);
  WebSettings settings=browser.getSettings();
  settings.setLoadWithOverviewMode(true);
  settings.setUseWideViewPort(true);
  settings.setBuiltInZoomControls(true);
  settings.setJavaScriptEnabled(true);
  settings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
  browser.loadUrl(""String_Node_Str"");
}","/** 
 * Event raised when the form is created for the first time
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_faq);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  browser=(WebView)findViewById(R.id.faqwebview);
  WebSettings settings=browser.getSettings();
  settings.setLoadWithOverviewMode(true);
  settings.setUseWideViewPort(true);
  settings.setBuiltInZoomControls(true);
  settings.setDisplayZoomControls(false);
  settings.setJavaScriptEnabled(true);
  settings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
  browser.loadUrl(""String_Node_Str"");
}"
81039,"GeneralLocationListener(GpsLoggingService activity,String name){
  tracer.debug(""String_Node_Str"");
  loggingService=activity;
  listenerName=name;
}","GeneralLocationListener(GpsLoggingService activity,String name){
  loggingService=activity;
  listenerName=name;
}"
81040,"public void onStatusChanged(String provider,int status,Bundle extras){
  if (status == LocationProvider.OUT_OF_SERVICE) {
    tracer.debug(provider + ""String_Node_Str"");
    loggingService.StopManagerAndResetAlarm();
  }
  if (status == LocationProvider.AVAILABLE) {
    tracer.debug(provider + ""String_Node_Str"");
  }
  if (status == LocationProvider.TEMPORARILY_UNAVAILABLE) {
    tracer.debug(provider + ""String_Node_Str"");
    loggingService.StopManagerAndResetAlarm();
  }
}","public void onStatusChanged(String provider,int status,Bundle extras){
  if (status == LocationProvider.OUT_OF_SERVICE) {
    tracer.info(provider + ""String_Node_Str"");
    loggingService.StopManagerAndResetAlarm();
  }
  if (status == LocationProvider.AVAILABLE) {
    tracer.info(provider + ""String_Node_Str"");
  }
  if (status == LocationProvider.TEMPORARILY_UNAVAILABLE) {
    tracer.info(provider + ""String_Node_Str"");
    loggingService.StopManagerAndResetAlarm();
  }
}"
81041,"private String GetMimeTypeFromFileName(String fileName){
  if (fileName.endsWith(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  if (fileName.endsWith(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  if (fileName.endsWith(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  return ""String_Node_Str"";
}","private String GetMimeTypeFromFileName(String fileName){
  if (fileName.endsWith(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  if (fileName.endsWith(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  if (fileName.endsWith(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  if (fileName.endsWith(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  return ""String_Node_Str"";
}"
81042,"@Override public void run(){
  try {
    String token=GoogleAuthUtil.getTokenWithNotification(ctx,GetAccountName(ctx),GetOauth2Scope(),new Bundle());
    GDocsHelper.SaveAuthToken(ctx,token);
    Utilities.LogDebug(token);
    String gpsLoggerFolderId=GetFileIdFromFileName(token,""String_Node_Str"");
    if (Utilities.IsNullOrEmpty(gpsLoggerFolderId)) {
      gpsLoggerFolderId=CreateEmptyFile(token,""String_Node_Str"",GetMimeTypeFromFileName(fileName),""String_Node_Str"");
      if (Utilities.IsNullOrEmpty(gpsLoggerFolderId)) {
        callback.OnFailure();
        return;
      }
    }
    String gpxFileId=GetFileIdFromFileName(token,fileName);
    if (Utilities.IsNullOrEmpty(gpxFileId)) {
      gpxFileId=CreateEmptyFile(token,fileName,GetMimeTypeFromFileName(fileName),gpsLoggerFolderId);
      if (Utilities.IsNullOrEmpty(gpxFileId)) {
        callback.OnFailure();
        return;
      }
    }
    if (!Utilities.IsNullOrEmpty(gpxFileId)) {
      UpdateFileContents(token,gpxFileId,Utilities.GetByteArrayFromInputStream(inputStream),fileName);
    }
    callback.OnComplete();
  }
 catch (  Exception e) {
    Utilities.LogError(""String_Node_Str"",e);
    callback.OnFailure();
  }
}","@Override public void run(){
  try {
    String token=GoogleAuthUtil.getTokenWithNotification(ctx,GetAccountName(ctx),GetOauth2Scope(),new Bundle());
    GDocsHelper.SaveAuthToken(ctx,token);
    Utilities.LogDebug(token);
    String gpsLoggerFolderId=GetFileIdFromFileName(token,""String_Node_Str"");
    if (Utilities.IsNullOrEmpty(gpsLoggerFolderId)) {
      gpsLoggerFolderId=CreateEmptyFile(token,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      if (Utilities.IsNullOrEmpty(gpsLoggerFolderId)) {
        callback.OnFailure();
        return;
      }
    }
    String gpxFileId=GetFileIdFromFileName(token,fileName);
    if (Utilities.IsNullOrEmpty(gpxFileId)) {
      gpxFileId=CreateEmptyFile(token,fileName,GetMimeTypeFromFileName(fileName),gpsLoggerFolderId);
      if (Utilities.IsNullOrEmpty(gpxFileId)) {
        callback.OnFailure();
        return;
      }
    }
    if (!Utilities.IsNullOrEmpty(gpxFileId)) {
      UpdateFileContents(token,gpxFileId,Utilities.GetByteArrayFromInputStream(inputStream),fileName);
    }
    callback.OnComplete();
  }
 catch (  Exception e) {
    Utilities.LogError(""String_Node_Str"",e);
    callback.OnFailure();
  }
}"
81043,"private void UploadTestFileToGoogleDocs(){
  Utilities.ShowProgress(GDocsSettingsActivity.this,getString(R.string.please_wait),getString(R.string.please_wait));
  File gpxFolder=new File(AppSettings.getGpsLoggerFolder());
  if (!gpxFolder.exists()) {
    gpxFolder.mkdirs();
  }
  File testFile=new File(gpxFolder.getPath(),""String_Node_Str"");
  try {
    if (!testFile.exists()) {
      testFile.createNewFile();
      FileOutputStream initialWriter=new FileOutputStream(testFile,true);
      BufferedOutputStream initialOutput=new BufferedOutputStream(initialWriter);
      StringBuilder initialString=new StringBuilder();
      initialString.append(""String_Node_Str"");
      initialOutput.write(initialString.toString().getBytes());
      initialOutput.flush();
      initialOutput.close();
    }
  }
 catch (  Exception ex) {
    OnFailure();
  }
  GDocsHelper helper=new GDocsHelper(getApplicationContext(),this);
  ArrayList<File> files=new ArrayList<File>();
  files.add(testFile);
  helper.UploadFile(files);
}","private void UploadTestFileToGoogleDocs(){
  Utilities.ShowProgress(GDocsSettingsActivity.this,getString(R.string.please_wait),getString(R.string.please_wait));
  File gpxFolder=new File(AppSettings.getGpsLoggerFolder());
  if (!gpxFolder.exists()) {
    gpxFolder.mkdirs();
  }
  Utilities.LogDebug(""String_Node_Str"");
  File testFile=new File(gpxFolder.getPath(),""String_Node_Str"");
  try {
    if (!testFile.exists()) {
      testFile.createNewFile();
      FileOutputStream initialWriter=new FileOutputStream(testFile,true);
      BufferedOutputStream initialOutput=new BufferedOutputStream(initialWriter);
      StringBuilder initialString=new StringBuilder();
      initialString.append(""String_Node_Str"");
      initialOutput.write(initialString.toString().getBytes());
      initialOutput.flush();
      initialOutput.close();
    }
  }
 catch (  Exception ex) {
    OnFailure();
  }
  GDocsHelper helper=new GDocsHelper(getApplicationContext(),this);
  ArrayList<File> files=new ArrayList<File>();
  files.add(testFile);
  helper.UploadFile(files);
}"
81044,"/** 
 * Resets the form, resets file name if required, reobtains preferences
 */
protected void StartLogging(){
  Utilities.LogDebug(""String_Node_Str"");
  Session.setAddNewTrackSegment(true);
  if (Session.isStarted()) {
    return;
  }
  Utilities.LogInfo(""String_Node_Str"");
  try {
    startForeground(NOTIFICATION_ID,new Notification());
  }
 catch (  Exception ex) {
    System.out.print(ex.getMessage());
  }
  Session.setStarted(true);
  GetPreferences();
  Notify();
  ResetCurrentFileName();
  ClearForm();
  StartGpsManager();
}","/** 
 * Resets the form, resets file name if required, reobtains preferences
 */
protected void StartLogging(){
  Utilities.LogDebug(""String_Node_Str"");
  Session.setAddNewTrackSegment(true);
  if (Session.isStarted()) {
    return;
  }
  Utilities.LogInfo(""String_Node_Str"");
  try {
    startForeground(NOTIFICATION_ID,new Notification());
  }
 catch (  Exception ex) {
    System.out.print(ex.getMessage());
  }
  Session.setStarted(true);
  GetPreferences();
  Notify();
  ResetCurrentFileName(true);
  ClearForm();
  StartGpsManager();
}"
81045,"/** 
 * This event is raised when the GeneralLocationListener has a new location. This method in turn updates notification, writes to file, reobtains preferences, notifies main service client and resets location managers.
 * @param loc Location object
 */
void OnLocationChanged(Location loc){
  if (!Session.isStarted()) {
    Utilities.LogDebug(""String_Node_Str"");
    StopLogging();
    return;
  }
  Utilities.LogDebug(""String_Node_Str"");
  long currentTimeStamp=System.currentTimeMillis();
  if ((currentTimeStamp - Session.getLatestTimeStamp()) < 1000) {
    return;
  }
  if ((currentTimeStamp - Session.getLatestTimeStamp()) < (AppSettings.getMinimumSeconds() * 1000)) {
    return;
  }
  if (AppSettings.getMinimumDistanceInMeters() > 0 && Session.hasValidLocation()) {
    double distanceTraveled=Utilities.CalculateDistance(loc.getLatitude(),loc.getLongitude(),Session.getCurrentLatitude(),Session.getCurrentLongitude());
    if (AppSettings.getMinimumDistanceInMeters() > distanceTraveled) {
      SetStatus(""String_Node_Str"" + String.valueOf(Math.floor(distanceTraveled)) + ""String_Node_Str"");
      StopManagerAndResetAlarm();
      return;
    }
  }
  Utilities.LogInfo(""String_Node_Str"");
  ResetCurrentFileName();
  Session.setLatestTimeStamp(System.currentTimeMillis());
  Session.setCurrentLocationInfo(loc);
  Notify();
  WriteToFile(loc);
  GetPreferences();
  StopManagerAndResetAlarm();
  if (IsMainFormVisible()) {
    mainServiceClient.OnLocationUpdate(loc);
  }
}","/** 
 * This event is raised when the GeneralLocationListener has a new location. This method in turn updates notification, writes to file, reobtains preferences, notifies main service client and resets location managers.
 * @param loc Location object
 */
void OnLocationChanged(Location loc){
  if (!Session.isStarted()) {
    Utilities.LogDebug(""String_Node_Str"");
    StopLogging();
    return;
  }
  Utilities.LogDebug(""String_Node_Str"");
  long currentTimeStamp=System.currentTimeMillis();
  if ((currentTimeStamp - Session.getLatestTimeStamp()) < 1000) {
    return;
  }
  if ((currentTimeStamp - Session.getLatestTimeStamp()) < (AppSettings.getMinimumSeconds() * 1000)) {
    return;
  }
  if (AppSettings.getMinimumDistanceInMeters() > 0 && Session.hasValidLocation()) {
    double distanceTraveled=Utilities.CalculateDistance(loc.getLatitude(),loc.getLongitude(),Session.getCurrentLatitude(),Session.getCurrentLongitude());
    if (AppSettings.getMinimumDistanceInMeters() > distanceTraveled) {
      SetStatus(""String_Node_Str"" + String.valueOf(Math.floor(distanceTraveled)) + ""String_Node_Str"");
      StopManagerAndResetAlarm();
      return;
    }
  }
  Utilities.LogInfo(""String_Node_Str"");
  ResetCurrentFileName(false);
  Session.setLatestTimeStamp(System.currentTimeMillis());
  Session.setCurrentLocationInfo(loc);
  Notify();
  WriteToFile(loc);
  GetPreferences();
  StopManagerAndResetAlarm();
  if (IsMainFormVisible()) {
    mainServiceClient.OnLocationUpdate(loc);
  }
}"
81046,"/** 
 * Sets the current file name based on user preference.
 */
private void ResetCurrentFileName(){
  Utilities.LogDebug(""String_Node_Str"");
  String newFileName;
  if (AppSettings.shouldCreateNewFileOnceADay()) {
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    newFileName=sdf.format(new Date());
    Session.setCurrentFileName(newFileName);
  }
 else {
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    newFileName=sdf.format(new Date());
    Session.setCurrentFileName(newFileName);
  }
  if (IsMainFormVisible()) {
    mainServiceClient.onFileName(newFileName);
  }
}","/** 
 * Sets the current file name based on user preference.
 */
private void ResetCurrentFileName(boolean newStart){
  Utilities.LogDebug(""String_Node_Str"");
  String newFileName=Session.getCurrentFileName();
  if (AppSettings.shouldCreateNewFileOnceADay()) {
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    newFileName=sdf.format(new Date());
    Session.setCurrentFileName(newFileName);
  }
 else   if (newStart) {
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    newFileName=sdf.format(new Date());
    Session.setCurrentFileName(newFileName);
  }
  if (IsMainFormVisible()) {
    mainServiceClient.onFileName(newFileName);
  }
}"
81047,"public Gpx10AnnotateHandler(String description,File gpxFile){
  this.description=description;
  this.gpxFile=gpxFile;
}","public Gpx10AnnotateHandler(String description,File gpxFile,Location loc,String dateTimeString){
  this.description=description;
  this.gpxFile=gpxFile;
  this.loc=loc;
  this.dateTimeString=dateTimeString;
}"
81048,"public void Annotate(String description,Location loc) throws Exception {
  Gpx10AnnotateHandler annotateHandler=new Gpx10AnnotateHandler(description,gpxFile);
  Utilities.LogDebug(String.format(""String_Node_Str"",EXECUTOR.getQueue().size()));
  EXECUTOR.execute(annotateHandler);
}","public void Annotate(String description,Location loc) throws Exception {
  Date now;
  if (useSatelliteTime) {
    now=new Date(loc.getTime());
  }
 else {
    now=new Date();
  }
  String dateTimeString=Utilities.GetIsoDateTime(now);
  Gpx10AnnotateHandler annotateHandler=new Gpx10AnnotateHandler(description,gpxFile,loc,dateTimeString);
  Utilities.LogDebug(String.format(""String_Node_Str"",EXECUTOR.getQueue().size()));
  EXECUTOR.execute(annotateHandler);
}"
81049,"public String[] forbids(){
  return depends;
}","public String[] forbids(){
  return forbids;
}"
81050,"/** 
 * Parses the command line arguments and set them to the option bean given in the constructor.
 * @param args arguments to parse
 * @throws CmdLineException if there's any error parsing arguments, or if {@link Option#required() required} option was not given.
 */
public void parseArgument(final String... args) throws CmdLineException {
  CmdLineImpl cmdLine=new CmdLineImpl(args);
  Set<OptionHandler> present=new HashSet<OptionHandler>();
  int argIndex=0;
  while (cmdLine.hasMore()) {
    String arg=cmdLine.getCurrentToken();
    if (isOption(arg)) {
      boolean isKeyValuePair=arg.indexOf('=') != -1;
      currentOptionHandler=isKeyValuePair ? findOptionHandler(arg) : findOptionByName(arg);
      if (currentOptionHandler == null) {
        throw new CmdLineException(this,Messages.UNDEFINED_OPTION.format(arg));
      }
      cmdLine.proceed(1);
    }
 else {
      if (argIndex >= arguments.size()) {
        Messages msg=arguments.size() == 0 ? Messages.NO_ARGUMENT_ALLOWED : Messages.TOO_MANY_ARGUMENTS;
        throw new CmdLineException(this,msg.format(arg));
      }
      currentOptionHandler=arguments.get(argIndex);
      if (!currentOptionHandler.option.isMultiValued())       argIndex++;
    }
    int diff=currentOptionHandler.parseArguments(cmdLine);
    cmdLine.proceed(diff);
    present.add(currentOptionHandler);
  }
  for (  OptionHandler handler : options)   if (handler.option.required() && !present.contains(handler))   throw new CmdLineException(this,Messages.REQUIRED_OPTION_MISSING.format(handler.option.toString()));
  for (  OptionHandler handler : arguments)   if (handler.option.required() && !present.contains(handler))   throw new CmdLineException(this,Messages.REQUIRED_ARGUMENT_MISSING.format(handler.option.toString()));
}","/** 
 * Parses the command line arguments and set them to the option bean given in the constructor.
 * @param args arguments to parse
 * @throws CmdLineException if there's any error parsing arguments, or if {@link Option#required() required} option was not given.
 */
public void parseArgument(final String... args) throws CmdLineException {
  CmdLineImpl cmdLine=new CmdLineImpl(args);
  Set<OptionHandler> present=new HashSet<OptionHandler>();
  int argIndex=0;
  while (cmdLine.hasMore()) {
    String arg=cmdLine.getCurrentToken();
    if (isOption(arg)) {
      boolean isKeyValuePair=arg.indexOf('=') != -1;
      currentOptionHandler=isKeyValuePair ? findOptionHandler(arg) : findOptionByName(arg);
      if (currentOptionHandler == null) {
        throw new CmdLineException(this,Messages.UNDEFINED_OPTION.format(arg));
      }
      cmdLine.proceed(1);
    }
 else {
      if (argIndex >= arguments.size()) {
        Messages msg=arguments.size() == 0 ? Messages.NO_ARGUMENT_ALLOWED : Messages.TOO_MANY_ARGUMENTS;
        throw new CmdLineException(this,msg.format(arg));
      }
      currentOptionHandler=arguments.get(argIndex);
      if (currentOptionHandler == null)       throw new IllegalStateException(""String_Node_Str"" + argIndex + ""String_Node_Str"");
      if (!currentOptionHandler.option.isMultiValued())       argIndex++;
    }
    int diff=currentOptionHandler.parseArguments(cmdLine);
    cmdLine.proceed(diff);
    present.add(currentOptionHandler);
  }
  for (  OptionHandler handler : options)   if (handler.option.required() && !present.contains(handler))   throw new CmdLineException(this,Messages.REQUIRED_OPTION_MISSING.format(handler.option.toString()));
  for (  OptionHandler handler : arguments)   if (handler.option.required() && !present.contains(handler))   throw new CmdLineException(this,Messages.REQUIRED_ARGUMENT_MISSING.format(handler.option.toString()));
}"
81051,"private void addValue(Object key,Object value) throws IllegalArgumentException, IllegalAccessException {
  Map map=(Map)f.get(bean);
  if (map == null) {
    map=new HashMap();
    f.set(bean,map);
  }
  map.put(key,value);
}","protected void addValue(String key,String value) throws IllegalArgumentException, IllegalAccessException {
  Map map=(Map)f.get(bean);
  if (map == null) {
    map=new HashMap();
    f.set(bean,map);
  }
  map.put(key,value);
}"
81052,"@Override public int parseArguments(Parameters params) throws CmdLineException {
  String s=params.getParameter(0);
  T value=null;
  for (  T o : enumType.getEnumConstants())   if (o.name().equalsIgnoreCase(s)) {
    value=o;
    break;
  }
  if (value == null)   throw new CmdLineException(owner,Messages.ILLEGAL_OPERAND.format(option.toString(),s));
  setter.addValue(value);
  return 1;
}","@Override public int parseArguments(Parameters params) throws CmdLineException {
  String s=params.getParameter(0);
  T value=null;
  for (  T o : enumType.getEnumConstants())   if (o.name().equalsIgnoreCase(s)) {
    value=o;
    break;
  }
  if (value == null)   throw new CmdLineException(owner,Messages.ILLEGAL_OPERAND.format(params.getParameter(-1),s));
  setter.addValue(value);
  return 1;
}"
81053,"@Override public int parseArguments(Parameters params) throws CmdLineException {
  String token=params.getParameter(0);
  try {
    T value=parse(token);
    setter.addValue(value);
  }
 catch (  NumberFormatException ex) {
    throw new CmdLineException(owner,Messages.ILLEGAL_OPERAND.format(option.toString(),token));
  }
  return 1;
}","@Override public int parseArguments(Parameters params) throws CmdLineException {
  String token=params.getParameter(0);
  try {
    T value=parse(token);
    setter.addValue(value);
  }
 catch (  NumberFormatException ex) {
    throw new CmdLineException(owner,Messages.ILLEGAL_OPERAND.format(params.getParameter(-1),token));
  }
  return 1;
}"
81054,"@Override public int parseArguments(Parameters params) throws CmdLineException {
  String param=params.getParameter(0);
  try {
    setter.addValue(new URI(param));
    return 1;
  }
 catch (  URISyntaxException e) {
    throw new CmdLineException(owner,Messages.ILLEGAL_OPERAND.format(param));
  }
}","@Override public int parseArguments(Parameters params) throws CmdLineException {
  String param=params.getParameter(0);
  try {
    setter.addValue(new URI(param));
    return 1;
  }
 catch (  URISyntaxException e) {
    throw new CmdLineException(owner,Messages.ILLEGAL_OPERAND.format(params.getParameter(-1),param));
  }
}"
81055,"@Override public int parseArguments(Parameters params) throws CmdLineException {
  String param=params.getParameter(0);
  try {
    setter.addValue(new URL(param));
    return 1;
  }
 catch (  MalformedURLException e) {
    throw new CmdLineException(owner,Messages.ILLEGAL_OPERAND.format(param));
  }
}","@Override public int parseArguments(Parameters params) throws CmdLineException {
  String param=params.getParameter(0);
  try {
    setter.addValue(new URL(param));
    return 1;
  }
 catch (  MalformedURLException e) {
    throw new CmdLineException(owner,Messages.ILLEGAL_OPERAND.format(params.getParameter(-1),param));
  }
}"
81056,"/** 
 * Prints the usage information for a given option.
 * @param out      Writer to write into
 * @param handler  handler where to receive the informations
 * @param len      Maximum length of metadata column
 * @param rb       ResourceBundle for I18N
 */
private void printOption(PrintWriter out,OptionHandler handler,int len,ResourceBundle rb){
  if (handler.option.usage() == null || handler.option.usage().length() == 0) {
    return;
  }
  int widthMetadata=Math.min(len,(usageWidth - 4) / 2);
  int widthUsage=usageWidth - 4 - widthMetadata;
  List<String> namesAndMetas=wrapLines(handler.getNameAndMeta(rb),widthMetadata);
  List<String> usages=wrapLines(handler.option.usage(),widthUsage);
  for (int i=0; i < Math.max(namesAndMetas.size(),usages.size()); i++) {
    String nameAndMeta=(i >= namesAndMetas.size()) ? ""String_Node_Str"" : namesAndMetas.get(i);
    String usage=(i >= usages.size()) ? ""String_Node_Str"" : usages.get(i);
    String format=(nameAndMeta.length() > 0) ? ""String_Node_Str"" + widthMetadata + ""String_Node_Str"" : ""String_Node_Str"" + widthMetadata + ""String_Node_Str"";
    String output=String.format(format,nameAndMeta,usage);
    out.println(output);
  }
}","/** 
 * Prints the usage information for a given option.
 * @param out      Writer to write into
 * @param handler  handler where to receive the informations
 * @param len      Maximum length of metadata column
 * @param rb       ResourceBundle for I18N
 */
private void printOption(PrintWriter out,OptionHandler handler,int len,ResourceBundle rb){
  if (handler.option.usage() == null || handler.option.usage().length() == 0) {
    return;
  }
  int widthMetadata=Math.min(len,(usageWidth - 4) / 2);
  int widthUsage=usageWidth - 4 - widthMetadata;
  List<String> namesAndMetas=wrapLines(handler.getNameAndMeta(rb),widthMetadata);
  List<String> usages=wrapLines(localize(handler.option.usage(),rb),widthUsage);
  for (int i=0; i < Math.max(namesAndMetas.size(),usages.size()); i++) {
    String nameAndMeta=(i >= namesAndMetas.size()) ? ""String_Node_Str"" : namesAndMetas.get(i);
    String usage=(i >= usages.size()) ? ""String_Node_Str"" : usages.get(i);
    String format=(nameAndMeta.length() > 0) ? ""String_Node_Str"" + widthMetadata + ""String_Node_Str"" : ""String_Node_Str"" + widthMetadata + ""String_Node_Str"";
    String output=String.format(format,nameAndMeta,usage);
    out.println(output);
  }
}"
81057,"/** 
 * Wraps a line so that the resulting parts are not longer than a given maximum length.
 * @param line       Line to wrap
 * @param maxLength  maximum length for the resulting parts
 * @return list of all wrapped parts
 */
private List<String> wrapLines(String line,int maxLength){
  List<String> rv=new ArrayList<String>();
  String[] hardWrapedLines=line.split(""String_Node_Str"");
  for (int i=0; i < hardWrapedLines.length; i++) {
    String restOfLine=hardWrapedLines[i];
    while (restOfLine.length() > maxLength) {
      rv.add(restOfLine.substring(0,maxLength));
      restOfLine=restOfLine.substring(maxLength);
    }
    rv.add(hardWrapedLines[i]);
  }
  return rv;
}","/** 
 * Wraps a line so that the resulting parts are not longer than a given maximum length.
 * @param line       Line to wrap
 * @param maxLength  maximum length for the resulting parts
 * @return list of all wrapped parts
 */
private List<String> wrapLines(String line,int maxLength){
  List<String> rv=new ArrayList<String>();
  String[] hardWrapedLines=line.split(""String_Node_Str"");
  for (int i=0; i < hardWrapedLines.length; i++) {
    String restOfLine=hardWrapedLines[i];
    while (restOfLine.length() > maxLength) {
      rv.add(restOfLine.substring(0,maxLength));
      restOfLine=restOfLine.substring(maxLength);
    }
    rv.add(restOfLine);
  }
  return rv;
}"
81058,"@Override public int parseArguments(Parameters params) throws CmdLineException {
  MapSetter mapSetter=(MapSetter)setter;
  mapSetter.addValue(params.getParameter(0));
  return 1;
}","@Override public int parseArguments(Parameters params) throws CmdLineException {
  MapSetter mapSetter=(MapSetter)setter;
  try {
    mapSetter.addValue(params.getParameter(0));
  }
 catch (  RuntimeException e) {
    throw new CmdLineException(e.getMessage());
  }
  return 1;
}"
81059,"public void testNoSplitCharacter(){
  args=new String[]{""String_Node_Str"",""String_Node_Str""};
  try {
    parser.parseArgument(args);
  }
 catch (  CmdLineException e) {
  }
}","public void testNoSplitCharacter(){
  args=new String[]{""String_Node_Str"",""String_Node_Str""};
  try {
    parser.parseArgument(args);
    fail(""String_Node_Str"");
  }
 catch (  CmdLineException e) {
    assertEquals(""String_Node_Str"",""String_Node_Str"",e.getMessage());
  }
}"
81060,"public void testNoKey(){
  args=new String[]{""String_Node_Str"",""String_Node_Str""};
  try {
    parser.parseArgument(args);
  }
 catch (  CmdLineException e) {
  }
}","public void testNoKey(){
  args=new String[]{""String_Node_Str"",""String_Node_Str""};
  try {
    parser.parseArgument(args);
    fail(""String_Node_Str"");
  }
 catch (  CmdLineException e) {
    assertEquals(""String_Node_Str"",""String_Node_Str"",e.getMessage());
  }
}"
81061,"public AnnotationProcessorFactoryImpl(){
  outDir=new File(System.getProperty(""String_Node_Str""));
  format=System.getProperty(""String_Node_Str"");
  String res=System.getProperty(""String_Node_Str"");
  if (res != null) {
    try {
      resource=new Properties();
      resource.load(new FileInputStream(res));
    }
 catch (    IOException e) {
      throw new Error(e);
    }
  }
}","public AnnotationProcessorFactoryImpl(){
  outDir=new File(System.getProperty(""String_Node_Str""));
  format=System.getProperty(""String_Node_Str"");
  String res=System.getProperty(""String_Node_Str"");
  if (res != null && res.length() > 0) {
    try {
      resource=new Properties();
      resource.load(new FileInputStream(res));
    }
 catch (    IOException e) {
      throw new Error(e);
    }
  }
}"
81062,"public int run(String[] args) throws Exception {
  CmdLineParser parser=new CmdLineParser(this);
  try {
    parser.parseArgument(args);
  }
 catch (  CmdLineException e) {
    System.err.println(e.getMessage());
    printUsage(parser);
    return -1;
  }
  if (aptArgs.isEmpty()) {
    printUsage(parser);
    return 0;
  }
  System.setProperty(""String_Node_Str"",outDir.getPath());
  System.setProperty(""String_Node_Str"",mode.name());
  System.setProperty(""String_Node_Str"",resourceName);
  aptArgs.add(0,""String_Node_Str"");
  ClassLoader cl=loadToolsJar();
  Class<?> apt=cl.loadClass(""String_Node_Str"");
  Method main=getProcessMethod(apt);
  return (Integer)main.invoke(null,new Object[]{cl.loadClass(""String_Node_Str"").newInstance(),aptArgs.toArray(new String[0])});
}","public int run(String[] args) throws Exception {
  CmdLineParser parser=new CmdLineParser(this);
  try {
    parser.parseArgument(args);
  }
 catch (  CmdLineException e) {
    System.err.println(e.getMessage());
    printUsage(parser);
    return -1;
  }
  if (aptArgs.isEmpty()) {
    printUsage(parser);
    return 0;
  }
  System.setProperty(""String_Node_Str"",outDir.getPath());
  System.setProperty(""String_Node_Str"",mode.name());
  if (resourceName == null)   resourceName=""String_Node_Str"";
  System.setProperty(""String_Node_Str"",resourceName);
  aptArgs.add(0,""String_Node_Str"");
  ClassLoader cl=loadToolsJar();
  Class<?> apt=cl.loadClass(""String_Node_Str"");
  Method main=getProcessMethod(apt);
  return (Integer)main.invoke(null,new Object[]{cl.loadClass(""String_Node_Str"").newInstance(),aptArgs.toArray(new String[0])});
}"
81063,"public String getDefaultMetaVariable(){
  String n=enumType.getName();
  int idx=n.lastIndexOf(n,'.');
  if (idx >= 0)   n=n.substring(idx + 1);
  return n.toUpperCase();
}","public String getDefaultMetaVariable(){
  String n=enumType.getName();
  int idx=n.lastIndexOf('.');
  if (idx >= 0)   n=n.substring(idx + 1);
  return n.toUpperCase();
}"
81064,"private void startNfc(){
  createPendingIntent();
  getActivity().runOnUiThread(new Runnable(){
    public void run(){
      NfcAdapter nfcAdapter=NfcAdapter.getDefaultAdapter(getActivity());
      if (nfcAdapter != null) {
        nfcAdapter.enableForegroundDispatch(getActivity(),getPendingIntent(),getIntentFilters(),getTechLists());
        if (p2pMessage != null) {
          nfcAdapter.setNdefPushMessage(p2pMessage,getActivity());
        }
      }
    }
  }
);
}","private void startNfc(){
  createPendingIntent();
  getActivity().runOnUiThread(new Runnable(){
    public void run(){
      NfcAdapter nfcAdapter=NfcAdapter.getDefaultAdapter(getActivity());
      if (nfcAdapter != null && getActivity().isFinishing() == false) {
        nfcAdapter.enableForegroundDispatch(getActivity(),getPendingIntent(),getIntentFilters(),getTechLists());
        if (p2pMessage != null) {
          nfcAdapter.setNdefPushMessage(p2pMessage,getActivity());
        }
      }
    }
  }
);
}"
81065,"@Override public void onResume(){
  super.onResume();
  if (mArrivalsListHeader != null && mSlidingPanel != null) {
    mArrivalsListHeader.setSlidingPanelCollapsed(isSlidingPanelCollapsed());
  }
  checkLeftHandMode();
  updateLayersFabVisibility();
  mFabMyLocation.requestLayout();
}","@Override public void onResume(){
  super.onResume();
  if (mArrivalsListHeader != null && mSlidingPanel != null) {
    mArrivalsListHeader.setSlidingPanelCollapsed(isSlidingPanelCollapsed());
  }
  checkLeftHandMode();
  updateLayersFab();
  mFabMyLocation.requestLayout();
}"
81066,"@Override public void onRegionTaskFinished(boolean currentRegionChanged){
  boolean update=autoShowWhatsNew();
  if (currentRegionChanged || update) {
    redrawNavigationDrawerFragment();
  }
  if (currentRegionChanged && Application.getPrefs().getBoolean(getString(R.string.preference_key_auto_select_region),true) && Application.get().getCurrentRegion() != null && UIUtils.canManageDialog(this)) {
    Toast.makeText(getApplicationContext(),getString(R.string.region_region_found,Application.get().getCurrentRegion().getName()),Toast.LENGTH_LONG).show();
  }
  updateLayersFabVisibility();
}","@Override public void onRegionTaskFinished(boolean currentRegionChanged){
  boolean update=autoShowWhatsNew();
  if (currentRegionChanged || update) {
    redrawNavigationDrawerFragment();
  }
  if (currentRegionChanged && Application.getPrefs().getBoolean(getString(R.string.preference_key_auto_select_region),true) && Application.get().getCurrentRegion() != null && UIUtils.canManageDialog(this)) {
    Toast.makeText(getApplicationContext(),getString(R.string.region_region_found,Application.get().getCurrentRegion().getName()),Toast.LENGTH_LONG).show();
  }
  updateLayersFab();
}"
81067,"private void setupLayersSpeedDial(){
  mLayersFab=(uk.co.markormesher.android_fab.FloatingActionButton)findViewById(R.id.layersSpeedDial);
  ViewGroup.MarginLayoutParams p=(ViewGroup.MarginLayoutParams)mLayersFab.getLayoutParams();
  LAYERS_FAB_DEFAULT_BOTTOM_MARGIN=p.bottomMargin;
  mLayersFab.setIcon(R.drawable.ic_layers_white_24dp);
  mLayersFab.setBackgroundColour(ContextCompat.getColor(this,R.color.theme_accent));
  LayersSpeedDialAdapter adapter=new LayersSpeedDialAdapter(this);
  adapter.addLayerActivationListener(mMapFragment);
  adapter.addLayerActivationListener(new LayersSpeedDialAdapter.LayerActivationListener(){
    @Override public void onActivateLayer(    LayerInfo layer){
      Handler h=new Handler(getMainLooper());
      h.postDelayed(new Runnable(){
        @Override public void run(){
          mLayersFab.rebuildSpeedDialMenu();
        }
      }
,100);
    }
    @Override public void onDeactivateLayer(    LayerInfo layer){
      Handler h=new Handler(getMainLooper());
      h.postDelayed(new Runnable(){
        @Override public void run(){
          mLayersFab.rebuildSpeedDialMenu();
        }
      }
,100);
    }
  }
);
  mLayersFab.setMenuAdapter(adapter);
  mLayersFab.setOnSpeedDialOpenListener(new uk.co.markormesher.android_fab.FloatingActionButton.OnSpeedDialOpenListener(){
    @Override public void onOpen(    uk.co.markormesher.android_fab.FloatingActionButton v){
      mLayersFab.setIcon(R.drawable.ic_add_white_24dp);
    }
  }
);
  mLayersFab.setOnSpeedDialCloseListener(new uk.co.markormesher.android_fab.FloatingActionButton.OnSpeedDialCloseListener(){
    @Override public void onClose(    uk.co.markormesher.android_fab.FloatingActionButton v){
      mLayersFab.setIcon(R.drawable.ic_layers_white_24dp);
    }
  }
);
  mLayersFab.setContentCoverEnabled(false);
}","private void setupLayersSpeedDial(){
  mLayersFab=(uk.co.markormesher.android_fab.FloatingActionButton)findViewById(R.id.layersSpeedDial);
  ViewGroup.MarginLayoutParams p=(ViewGroup.MarginLayoutParams)mLayersFab.getLayoutParams();
  LAYERS_FAB_DEFAULT_BOTTOM_MARGIN=p.bottomMargin;
}"
81068,"@Override protected void initView(final View view,CombinedArrivalInfoStyleB combinedArrivalInfoStyleB){
  final ArrivalInfo stopInfo=combinedArrivalInfoStyleB.getArrivalInfoList().get(0);
  final ObaArrivalInfo arrivalInfo=stopInfo.getInfo();
  final Context context=getContext();
  LayoutInflater inflater=LayoutInflater.from(context);
  TextView routeName=(TextView)view.findViewById(R.id.routeName);
  TextView destination=(TextView)view.findViewById(R.id.routeDestination);
  TableLayout arrivalTimesLayout=(TableLayout)view.findViewById(R.id.arrivalTimeLayout);
  arrivalTimesLayout.removeAllViews();
  Resources r=view.getResources();
  ImageButton starBtn=(ImageButton)view.findViewById(R.id.route_star);
  starBtn.setColorFilter(r.getColor(R.color.theme_primary));
  ImageButton mapImageBtn=(ImageButton)view.findViewById(R.id.mapImageBtn);
  mapImageBtn.setColorFilter(r.getColor(R.color.theme_primary));
  ImageButton routeMoreInfo=(ImageButton)view.findViewById(R.id.route_more_info);
  routeMoreInfo.setColorFilter(r.getColor(R.color.theme_primary));
  starBtn.setImageResource(stopInfo.isRouteAndHeadsignFavorite() ? R.drawable.focus_star_on : R.drawable.focus_star_off);
  starBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      RouteFavoriteDialogFragment dialog=new RouteFavoriteDialogFragment.Builder(stopInfo.getInfo().getRouteId(),stopInfo.getInfo().getHeadsign()).setRouteShortName(stopInfo.getInfo().getShortName()).setRouteLongName(stopInfo.getInfo().getRouteLongName()).setStopId(stopInfo.getInfo().getStopId()).setFavorite(!stopInfo.isRouteAndHeadsignFavorite()).build();
      dialog.setCallback(new RouteFavoriteDialogFragment.Callback(){
        @Override public void onSelectionComplete(        boolean savedFavorite){
          if (savedFavorite) {
            mFragment.refreshLocal();
          }
        }
      }
);
      dialog.show(mFragment.getFragmentManager(),RouteFavoriteDialogFragment.TAG);
    }
  }
);
  mapImageBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      HomeActivity.start(getContext(),stopInfo.getInfo().getRouteId());
    }
  }
);
  routeMoreInfo.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mFragment.showListItemMenu(view,stopInfo);
    }
  }
);
  startRealtimeAnimation(view);
  routeName.setText(arrivalInfo.getShortName());
  destination.setText(MyTextUtils.toTitleCase(arrivalInfo.getHeadsign()));
  for (int i=0; i < combinedArrivalInfoStyleB.getArrivalInfoList().size(); i++) {
    ArrivalInfo arrivalRow=combinedArrivalInfoStyleB.getArrivalInfoList().get(i);
    final ObaArrivalInfo tempArrivalInfo=arrivalRow.getInfo();
    long scheduledTime=tempArrivalInfo.getScheduledArrivalTime();
    TableRow tr=new TableRow(getContext());
    tr.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,TableRow.LayoutParams.MATCH_PARENT));
    tr.setFocusable(false);
    tr.setClickable(false);
    RelativeLayout layout;
    TextView scheduleView, estimatedView;
    View divider;
    if (i == 0) {
      layout=(RelativeLayout)inflater.inflate(R.layout.arrivals_list_rl_template_style_b_large,null);
      scheduleView=(TextView)inflater.inflate(R.layout.arrivals_list_tv_template_style_b_schedule_large,null);
      estimatedView=(TextView)inflater.inflate(R.layout.arrivals_list_tv_template_style_b_estimated_large,null);
    }
 else {
      layout=(RelativeLayout)inflater.inflate(R.layout.arrivals_list_rl_template_style_b_small,null);
      scheduleView=(TextView)inflater.inflate(R.layout.arrivals_list_tv_template_style_b_schedule_small,null);
      estimatedView=(TextView)inflater.inflate(R.layout.arrivals_list_tv_template_style_b_estimated_small,null);
    }
    scheduleView.setText(DateUtils.formatDateTime(context,scheduledTime,DateUtils.FORMAT_SHOW_TIME | DateUtils.FORMAT_NO_NOON | DateUtils.FORMAT_NO_MIDNIGHT));
    if (arrivalRow.getPredicted()) {
      long eta=arrivalRow.getEta();
      if (eta == 0) {
        estimatedView.setText(R.string.stop_info_eta_now);
      }
 else {
        estimatedView.setText(String.valueOf(Math.abs(eta)) + ""String_Node_Str"");
      }
    }
 else {
      estimatedView.setText(R.string.stop_info_eta_unknown);
    }
    layout.addView(scheduleView);
    layout.addView(estimatedView);
    RelativeLayout.LayoutParams params1=(RelativeLayout.LayoutParams)scheduleView.getLayoutParams();
    params1.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
    scheduleView.setLayoutParams(params1);
    RelativeLayout.LayoutParams params2=(RelativeLayout.LayoutParams)estimatedView.getLayoutParams();
    params2.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
    estimatedView.setLayoutParams(params2);
    tr.addView(layout);
    if (i != 0) {
      int dividerHeight=UIHelp.dpToPixels(context,1);
      divider=inflater.inflate(R.layout.arrivals_list_divider_template_style_b,null);
      divider.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,dividerHeight));
      arrivalTimesLayout.addView(divider);
    }
    arrivalTimesLayout.addView(tr,new TableLayout.LayoutParams(TableLayout.LayoutParams.MATCH_PARENT,TableLayout.LayoutParams.MATCH_PARENT));
  }
  ContentValues values=null;
  if (mTripsForStop != null) {
    values=mTripsForStop.getValues(arrivalInfo.getTripId());
  }
  if (values != null) {
    String reminderName=values.getAsString(ObaContract.Trips.NAME);
    TextView reminder=(TextView)view.findViewById(R.id.reminder);
    if (reminderName.length() == 0) {
      reminderName=context.getString(R.string.trip_info_noname);
    }
    reminder.setText(reminderName);
    Drawable d=reminder.getCompoundDrawables()[0];
    d=DrawableCompat.wrap(d);
    DrawableCompat.setTint(d.mutate(),view.getResources().getColor(R.color.theme_primary));
    reminder.setCompoundDrawables(d,null,null,null);
    reminder.setVisibility(View.VISIBLE);
  }
 else {
    View reminder=view.findViewById(R.id.reminder);
    reminder.setVisibility(View.GONE);
  }
}","@Override protected void initView(final View view,CombinedArrivalInfoStyleB combinedArrivalInfoStyleB){
  final ArrivalInfo stopInfo=combinedArrivalInfoStyleB.getArrivalInfoList().get(0);
  final ObaArrivalInfo arrivalInfo=stopInfo.getInfo();
  final Context context=getContext();
  LayoutInflater inflater=LayoutInflater.from(context);
  TextView routeName=(TextView)view.findViewById(R.id.routeName);
  TextView destination=(TextView)view.findViewById(R.id.routeDestination);
  TableLayout arrivalTimesLayout=(TableLayout)view.findViewById(R.id.arrivalTimeLayout);
  arrivalTimesLayout.removeAllViews();
  Resources r=view.getResources();
  ImageButton starBtn=(ImageButton)view.findViewById(R.id.route_star);
  starBtn.setColorFilter(r.getColor(R.color.theme_primary));
  ImageButton mapImageBtn=(ImageButton)view.findViewById(R.id.mapImageBtn);
  mapImageBtn.setColorFilter(r.getColor(R.color.theme_primary));
  ImageButton routeMoreInfo=(ImageButton)view.findViewById(R.id.route_more_info);
  routeMoreInfo.setColorFilter(r.getColor(R.color.theme_primary));
  starBtn.setImageResource(stopInfo.isRouteAndHeadsignFavorite() ? R.drawable.focus_star_on : R.drawable.focus_star_off);
  starBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      RouteFavoriteDialogFragment dialog=new RouteFavoriteDialogFragment.Builder(stopInfo.getInfo().getRouteId(),stopInfo.getInfo().getHeadsign()).setRouteShortName(stopInfo.getInfo().getShortName()).setRouteLongName(stopInfo.getInfo().getRouteLongName()).setStopId(stopInfo.getInfo().getStopId()).setFavorite(!stopInfo.isRouteAndHeadsignFavorite()).build();
      dialog.setCallback(new RouteFavoriteDialogFragment.Callback(){
        @Override public void onSelectionComplete(        boolean savedFavorite){
          if (savedFavorite) {
            mFragment.refreshLocal();
          }
        }
      }
);
      dialog.show(mFragment.getFragmentManager(),RouteFavoriteDialogFragment.TAG);
    }
  }
);
  mapImageBtn.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      HomeActivity.start(getContext(),stopInfo.getInfo().getRouteId());
    }
  }
);
  routeMoreInfo.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mFragment.showListItemMenu(view,stopInfo);
    }
  }
);
  routeName.setText(arrivalInfo.getShortName());
  destination.setText(MyTextUtils.toTitleCase(arrivalInfo.getHeadsign()));
  for (int i=0; i < combinedArrivalInfoStyleB.getArrivalInfoList().size(); i++) {
    ArrivalInfo arrivalRow=combinedArrivalInfoStyleB.getArrivalInfoList().get(i);
    final ObaArrivalInfo tempArrivalInfo=arrivalRow.getInfo();
    long scheduledTime=tempArrivalInfo.getScheduledArrivalTime();
    TableRow tr=new TableRow(getContext());
    tr.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,TableRow.LayoutParams.MATCH_PARENT));
    tr.setFocusable(false);
    tr.setClickable(false);
    RelativeLayout layout;
    TextView scheduleView, estimatedView;
    View divider;
    if (i == 0) {
      layout=(RelativeLayout)inflater.inflate(R.layout.arrivals_list_rl_template_style_b_large,null);
      scheduleView=(TextView)inflater.inflate(R.layout.arrivals_list_tv_template_style_b_schedule_large,null);
      estimatedView=(TextView)inflater.inflate(R.layout.arrivals_list_tv_template_style_b_estimated_large,null);
    }
 else {
      layout=(RelativeLayout)inflater.inflate(R.layout.arrivals_list_rl_template_style_b_small,null);
      scheduleView=(TextView)inflater.inflate(R.layout.arrivals_list_tv_template_style_b_schedule_small,null);
      estimatedView=(TextView)inflater.inflate(R.layout.arrivals_list_tv_template_style_b_estimated_small,null);
    }
    scheduleView.setText(DateUtils.formatDateTime(context,scheduledTime,DateUtils.FORMAT_SHOW_TIME | DateUtils.FORMAT_NO_NOON | DateUtils.FORMAT_NO_MIDNIGHT));
    if (arrivalRow.getPredicted()) {
      long eta=arrivalRow.getEta();
      if (eta == 0) {
        estimatedView.setText(R.string.stop_info_eta_now);
      }
 else {
        estimatedView.setText(String.valueOf(Math.abs(eta)) + ""String_Node_Str"");
      }
    }
 else {
      estimatedView.setText(R.string.stop_info_eta_unknown);
    }
    layout.addView(scheduleView);
    layout.addView(estimatedView);
    RelativeLayout.LayoutParams params1=(RelativeLayout.LayoutParams)scheduleView.getLayoutParams();
    params1.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
    scheduleView.setLayoutParams(params1);
    RelativeLayout.LayoutParams params2=(RelativeLayout.LayoutParams)estimatedView.getLayoutParams();
    params2.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
    estimatedView.setLayoutParams(params2);
    tr.addView(layout);
    if (i != 0) {
      int dividerHeight=UIHelp.dpToPixels(context,1);
      divider=inflater.inflate(R.layout.arrivals_list_divider_template_style_b,null);
      divider.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.MATCH_PARENT,dividerHeight));
      arrivalTimesLayout.addView(divider);
    }
    arrivalTimesLayout.addView(tr,new TableLayout.LayoutParams(TableLayout.LayoutParams.MATCH_PARENT,TableLayout.LayoutParams.MATCH_PARENT));
  }
  ContentValues values=null;
  if (mTripsForStop != null) {
    values=mTripsForStop.getValues(arrivalInfo.getTripId());
  }
  if (values != null) {
    String reminderName=values.getAsString(ObaContract.Trips.NAME);
    TextView reminder=(TextView)view.findViewById(R.id.reminder);
    if (reminderName.length() == 0) {
      reminderName=context.getString(R.string.trip_info_noname);
    }
    reminder.setText(reminderName);
    Drawable d=reminder.getCompoundDrawables()[0];
    d=DrawableCompat.wrap(d);
    DrawableCompat.setTint(d.mutate(),view.getResources().getColor(R.color.theme_primary));
    reminder.setCompoundDrawables(d,null,null,null);
    reminder.setVisibility(View.VISIBLE);
  }
 else {
    View reminder=view.findViewById(R.id.reminder);
    reminder.setVisibility(View.GONE);
  }
}"
81069,"public RealtimeIndicatorView(Context context,AttributeSet attrs){
  super(context,attrs);
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.RealtimeIndicatorView,0,0);
  mFillColor=a.getColor(R.styleable.RealtimeIndicatorView_fillColor,mFillColor);
  mLineColor=a.getColor(R.styleable.RealtimeIndicatorView_lineColor,mLineColor);
  mDuration=a.getInteger(R.styleable.RealtimeIndicatorView_duration,mDuration);
  a.recycle();
  mFillPaint=new Paint();
  mFillPaint.setColor(mFillColor);
  mFillPaint.setStyle(Paint.Style.FILL);
  mFillPaint.setAntiAlias(true);
  mLinePaint=new Paint();
  mLinePaint.setStrokeWidth(3);
  mLinePaint.setColor(mLineColor);
  mLinePaint.setStyle(Paint.Style.STROKE);
  mLinePaint.setAntiAlias(true);
  setOnMeasureCallback();
}","public RealtimeIndicatorView(Context context,AttributeSet attrs){
  super(context,attrs);
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.RealtimeIndicatorView,0,0);
  mFillColor=a.getColor(R.styleable.RealtimeIndicatorView_fillColor,mFillColor);
  mLineColor=a.getColor(R.styleable.RealtimeIndicatorView_lineColor,mLineColor);
  mDuration=a.getInteger(R.styleable.RealtimeIndicatorView_duration,mDuration);
  a.recycle();
  mFillPaint=new Paint();
  mFillPaint.setColor(mFillColor);
  mFillPaint.setStyle(Paint.Style.FILL);
  mFillPaint.setAntiAlias(true);
  mLinePaint=new Paint();
  mLinePaint.setStrokeWidth(3);
  mLinePaint.setColor(mLineColor);
  mLinePaint.setStyle(Paint.Style.STROKE);
  mLinePaint.setAntiAlias(true);
  setOnMeasureCallback();
  ensureInit();
}"
81070,"private void setOnMeasureCallback(){
  ViewTreeObserver vto=getViewTreeObserver();
  vto.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      removeOnGlobalLayoutListener(this);
      mAnimation1=new Animation(){
        @Override protected void applyTransformation(        float interpolatedTime,        Transformation t){
          int height=getHeight();
          mNewRadius=height * interpolatedTime;
          invalidate();
        }
      }
;
      mAnimation1.setDuration(mDuration);
      mAnimation1.setRepeatMode(Animation.REVERSE);
      mAnimation1.setInterpolator(new FastOutLinearInInterpolator());
      mAnimation1.setRepeatCount(Animation.INFINITE);
      startAnimation(mAnimation1);
    }
  }
);
}","private void setOnMeasureCallback(){
  getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      removeOnGlobalLayoutListener(this);
      initAnimation();
    }
  }
);
}"
81071,"@Override public void onGlobalLayout(){
  removeOnGlobalLayoutListener(this);
  mAnimation1=new Animation(){
    @Override protected void applyTransformation(    float interpolatedTime,    Transformation t){
      int height=getHeight();
      mNewRadius=height * interpolatedTime;
      invalidate();
    }
  }
;
  mAnimation1.setDuration(mDuration);
  mAnimation1.setRepeatMode(Animation.REVERSE);
  mAnimation1.setInterpolator(new FastOutLinearInInterpolator());
  mAnimation1.setRepeatCount(Animation.INFINITE);
  startAnimation(mAnimation1);
}","@Override public void onGlobalLayout(){
  removeOnGlobalLayoutListener(this);
  initAnimation();
}"
81072,"/** 
 * Sets the header for this list to be instantiated in another layout, but still controlled by this fragment
 * @param header     header that will be controlled by this fragment
 * @param headerView View that contains this header
 */
public void setHeader(ArrivalsListHeader header,View headerView){
  mHeader=header;
  mHeaderView=headerView;
}","/** 
 * Sets the header for this list to be instantiated in another layout, but still controlled by this fragment
 * @param header     header that will be controlled by this fragment
 * @param headerView View that contains this header
 */
public void setHeader(ArrivalsListHeader header,View headerView){
  mHeader=header;
  mHeaderView=headerView;
  mHeader.initView(mHeaderView);
  mExternalHeader=true;
}"
81073,"@Override public boolean onOptionsItemSelected(MenuItem item){
  final int id=item.getItemId();
  if (id == R.id.show_on_map) {
    if (mStop != null) {
      HomeActivity.start(getActivity(),mStop.getId(),mStop.getLatitude(),mStop.getLongitude());
    }
    return true;
  }
 else   if (id == R.id.refresh) {
    refresh();
    return true;
  }
 else   if (id == R.id.filter) {
    if (mStop != null) {
      showRoutesFilterDialog();
    }
  }
 else   if (id == R.id.edit_name) {
    mHeader.beginNameEdit(null);
  }
 else   if (id == R.id.toggle_favorite) {
    setFavorite(!mFavorite);
    mHeader.refresh();
  }
 else   if (id == R.id.report_problem) {
    if (mStop != null) {
      ReportStopProblemFragment.show(getSherlockActivity(),mStop);
    }
  }
  return false;
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  final int id=item.getItemId();
  if (id == R.id.show_on_map) {
    if (mStop != null) {
      HomeActivity.start(getActivity(),mStop.getId(),mStop.getLatitude(),mStop.getLongitude());
    }
    return true;
  }
 else   if (id == R.id.refresh) {
    refresh();
    return true;
  }
 else   if (id == R.id.filter) {
    if (mStop != null) {
      showRoutesFilterDialog();
    }
  }
 else   if (id == R.id.edit_name) {
    if (mHeader != null) {
      mHeader.beginNameEdit(null);
    }
  }
 else   if (id == R.id.toggle_favorite) {
    setFavorite(!mFavorite);
    if (mHeader != null) {
      mHeader.refresh();
    }
  }
 else   if (id == R.id.report_problem) {
    if (mStop != null) {
      ReportStopProblemFragment.show(getSherlockActivity(),mStop);
    }
  }
  return false;
}"
81074,"private void setRoutesFilter(boolean[] checks){
  final int len=checks.length;
  final ArrayList<String> newFilter=new ArrayList<String>(len);
  ObaArrivalInfoResponse response=getArrivalsLoader().getLastGoodResponse();
  final List<ObaRoute> routes=response.getRoutes(mStop.getRouteIds());
  assert(routes.size() == len);
  for (int i=0; i < len; ++i) {
    final ObaRoute route=routes.get(i);
    if (checks[i]) {
      newFilter.add(route.getId());
    }
  }
  if (newFilter.size() == len) {
    newFilter.clear();
  }
  setRoutesFilter(newFilter);
  mHeader.refresh();
}","private void setRoutesFilter(boolean[] checks){
  final int len=checks.length;
  final ArrayList<String> newFilter=new ArrayList<String>(len);
  ObaArrivalInfoResponse response=getArrivalsLoader().getLastGoodResponse();
  final List<ObaRoute> routes=response.getRoutes(mStop.getRouteIds());
  assert(routes.size() == len);
  for (int i=0; i < len; ++i) {
    final ObaRoute route=routes.get(i);
    if (checks[i]) {
      newFilter.add(route.getId());
    }
  }
  if (newFilter.size() == len) {
    newFilter.clear();
  }
  setRoutesFilter(newFilter);
  if (mHeader != null) {
    mHeader.refresh();
  }
}"
81075,"@Override public void onResume(){
  ArrivalsListLoader loader=getArrivalsLoader();
  if (loader != null) {
    ObaArrivalInfoResponse lastGood=loader.getLastGoodResponse();
    if (lastGood != null) {
      setResponseData(lastGood.getArrivalInfo(),lastGood.getSituations());
    }
  }
  getLoaderManager().restartLoader(TRIPS_FOR_STOP_LOADER,null,mTripsForStopCallback);
  long lastResponseTime=getArrivalsLoader().getLastResponseTime();
  long newPeriod=Math.min(RefreshPeriod,(lastResponseTime + RefreshPeriod) - System.currentTimeMillis());
  if (newPeriod <= 0) {
    refresh();
  }
 else {
    mRefreshHandler.postDelayed(mRefresh,newPeriod);
  }
  super.onResume();
}","@Override public void onResume(){
  if (mListener != null) {
    final Handler handler=new Handler();
    handler.post(new Runnable(){
      @Override public void run(){
        mListener.onListViewCreated(getListView());
      }
    }
);
  }
  if (mHeader != null) {
    Log.d(TAG,""String_Node_Str"");
    mHeader.refresh();
  }
  ArrivalsListLoader loader=getArrivalsLoader();
  if (loader != null) {
    ObaArrivalInfoResponse lastGood=loader.getLastGoodResponse();
    if (lastGood != null) {
      setResponseData(lastGood.getArrivalInfo(),lastGood.getSituations());
    }
  }
  getLoaderManager().restartLoader(TRIPS_FOR_STOP_LOADER,null,mTripsForStopCallback);
  long lastResponseTime=getArrivalsLoader().getLastResponseTime();
  long newPeriod=Math.min(RefreshPeriod,(lastResponseTime + RefreshPeriod) - System.currentTimeMillis());
  if (newPeriod <= 0) {
    refresh();
  }
 else {
    mRefreshHandler.postDelayed(mRefresh,newPeriod);
  }
  super.onResume();
}"
81076,"@Override public void onListItemClick(ListView l,View v,int position,long id){
  final ArrivalInfo stop=(ArrivalInfo)getListView().getItemAtPosition(position);
  if (stop == null) {
    return;
  }
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  builder.setTitle(R.string.stop_info_item_options_title);
  ObaArrivalInfoResponse response=getArrivalsLoader().getLastGoodResponse();
  final ObaRoute route=response.getRoute(stop.getInfo().getRouteId());
  final String url=route != null ? route.getUrl() : null;
  final boolean hasUrl=!TextUtils.isEmpty(url);
  int options;
  View tripView=v.findViewById(R.id.trip_info);
  if (tripView.getVisibility() != View.GONE) {
    if (hasUrl) {
      options=R.array.stop_item_options_edit;
    }
 else {
      options=R.array.stop_item_options_edit_noschedule;
    }
  }
 else   if (hasUrl) {
    options=R.array.stop_item_options;
  }
 else {
    options=R.array.stop_item_options_noschedule;
  }
  builder.setItems(options,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      if (which == 0) {
        goToTrip(stop);
      }
 else       if (which == 1) {
        goToRoute(stop);
      }
 else       if (which == 2) {
        ArrayList<String> routes=new ArrayList<String>(1);
        routes.add(stop.getInfo().getRouteId());
        setRoutesFilter(routes);
        mHeader.refresh();
      }
 else       if (hasUrl && which == 3) {
        UIHelp.goToUrl(getActivity(),url);
      }
 else       if ((!hasUrl && which == 3) || (hasUrl && which == 4)) {
        ReportTripProblemFragment.show(getSherlockActivity(),stop.getInfo());
      }
    }
  }
);
  AlertDialog dialog=builder.create();
  dialog.setOwnerActivity(getActivity());
  dialog.show();
}","@Override public void onListItemClick(ListView l,View v,int position,long id){
  final ArrivalInfo stop=(ArrivalInfo)getListView().getItemAtPosition(position);
  if (stop == null) {
    return;
  }
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  builder.setTitle(R.string.stop_info_item_options_title);
  ObaArrivalInfoResponse response=getArrivalsLoader().getLastGoodResponse();
  final ObaRoute route=response.getRoute(stop.getInfo().getRouteId());
  final String url=route != null ? route.getUrl() : null;
  final boolean hasUrl=!TextUtils.isEmpty(url);
  int options;
  View tripView=v.findViewById(R.id.trip_info);
  if (tripView.getVisibility() != View.GONE) {
    if (hasUrl) {
      options=R.array.stop_item_options_edit;
    }
 else {
      options=R.array.stop_item_options_edit_noschedule;
    }
  }
 else   if (hasUrl) {
    options=R.array.stop_item_options;
  }
 else {
    options=R.array.stop_item_options_noschedule;
  }
  builder.setItems(options,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      if (which == 0) {
        goToTrip(stop);
      }
 else       if (which == 1) {
        goToRoute(stop);
      }
 else       if (which == 2) {
        ArrayList<String> routes=new ArrayList<String>(1);
        routes.add(stop.getInfo().getRouteId());
        setRoutesFilter(routes);
        if (mHeader != null) {
          mHeader.refresh();
        }
      }
 else       if (hasUrl && which == 3) {
        UIHelp.goToUrl(getActivity(),url);
      }
 else       if ((!hasUrl && which == 3) || (hasUrl && which == 4)) {
        ReportTripProblemFragment.show(getSherlockActivity(),stop.getInfo());
      }
    }
  }
);
  AlertDialog dialog=builder.create();
  dialog.setOwnerActivity(getActivity());
  dialog.show();
}"
81077,"private void setResponseData(ObaArrivalInfo[] info,List<ObaSituation> situations){
  mHeader.refresh();
  if (situations != null) {
    refreshSituations(situations);
  }
 else {
    refreshSituations(new ArrayList<ObaSituation>());
  }
  if (info != null) {
    setEmptyText(UIHelp.getNoArrivalsMessage(getActivity(),getArrivalsLoader().getMinutesAfter(),false));
    mAdapter.setData(info,mRoutesFilter);
  }
}","private void setResponseData(ObaArrivalInfo[] info,List<ObaSituation> situations){
  if (mHeader != null) {
    mHeader.refresh();
  }
  if (situations != null) {
    refreshSituations(situations);
  }
 else {
    refreshSituations(new ArrayList<ObaSituation>());
  }
  if (info != null) {
    setEmptyText(UIHelp.getNoArrivalsMessage(getActivity(),getArrivalsLoader().getMinutesAfter(),false));
    mAdapter.setData(info,mRoutesFilter);
  }
}"
81078,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  getListView().setEmptyView(mEmptyList);
  ((ViewGroup)getListView().getParent()).addView(mEmptyList);
  setHasOptionsMenu(true);
  mAlertList=new AlertList(getActivity());
  mAlertList.initView(getView().findViewById(R.id.arrivals_alert_list));
  if (mHeader == null) {
    mHeader=new ArrivalsListHeader(getActivity(),this);
    mHeaderView=getView().findViewById(R.id.arrivals_list_header);
  }
 else {
    getView().findViewById(R.id.arrivals_list_header).setVisibility(View.GONE);
  }
  mHeader.initView(mHeaderView);
  mHeader.refresh();
  Button loadMoreArrivals=(Button)mFooter.findViewById(R.id.load_more_arrivals);
  loadMoreArrivals.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      loadMoreArrivals();
    }
  }
);
  getListView().addFooterView(mFooter);
  Button loadMoreArrivalsEmptyList=(Button)mEmptyList.findViewById(R.id.load_more_arrivals);
  loadMoreArrivalsEmptyList.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      loadMoreArrivals();
    }
  }
);
  setStopId();
  setUserInfo();
  mAdapter=new ArrivalsListAdapter(getActivity());
  setListAdapter(mAdapter);
  setListShown(false);
  mRoutesFilter=ObaContract.StopRouteFilters.get(getActivity(),mStopId);
  mTripsForStopCallback=new TripsForStopCallback();
  LoaderManager mgr=getLoaderManager();
  mgr.initLoader(TRIPS_FOR_STOP_LOADER,null,mTripsForStopCallback);
  mgr.initLoader(ARRIVALS_LIST_LOADER,getArguments(),this);
  setEmptyText(UIHelp.getNoArrivalsMessage(getActivity(),getArrivalsLoader().getMinutesAfter(),false));
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  getListView().setEmptyView(mEmptyList);
  ((ViewGroup)getListView().getParent()).addView(mEmptyList);
  setHasOptionsMenu(true);
  mAlertList=new AlertList(getActivity());
  mAlertList.initView(getView().findViewById(R.id.arrivals_alert_list));
  setupHeader(savedInstanceState);
  Button loadMoreArrivals=(Button)mFooter.findViewById(R.id.load_more_arrivals);
  loadMoreArrivals.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      loadMoreArrivals();
    }
  }
);
  getListView().addFooterView(mFooter);
  Button loadMoreArrivalsEmptyList=(Button)mEmptyList.findViewById(R.id.load_more_arrivals);
  loadMoreArrivalsEmptyList.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      loadMoreArrivals();
    }
  }
);
  setStopId();
  setUserInfo();
  mAdapter=new ArrivalsListAdapter(getActivity());
  setListAdapter(mAdapter);
  setListShown(false);
  mRoutesFilter=ObaContract.StopRouteFilters.get(getActivity(),mStopId);
  mTripsForStopCallback=new TripsForStopCallback();
  LoaderManager mgr=getLoaderManager();
  mgr.initLoader(TRIPS_FOR_STOP_LOADER,null,mTripsForStopCallback);
  mgr.initLoader(ARRIVALS_LIST_LOADER,getArguments(),this);
  setEmptyText(UIHelp.getNoArrivalsMessage(getActivity(),getArrivalsLoader().getMinutesAfter(),false));
}"
81079,"private void setupSlidingPanel(){
  mSlidingPanel=(SlidingUpPanelLayout)findViewById(R.id.sliding_layout);
  mSlidingPanel.hidePanel();
  mSlidingPanel.setOverlayed(true);
  mSlidingPanel.setPanelSlideListener(new SlidingUpPanelLayout.PanelSlideListener(){
    @Override public void onPanelSlide(    View panel,    float slideOffset){
      Log.d(TAG,""String_Node_Str"" + slideOffset);
    }
    @Override public void onPanelExpanded(    View panel){
      Log.d(TAG,""String_Node_Str"");
    }
    @Override public void onPanelCollapsed(    View panel){
      Log.d(TAG,""String_Node_Str"");
    }
    @Override public void onPanelAnchored(    View panel){
      Log.d(TAG,""String_Node_Str"");
      if (mFocusedStop != null && mMapFragment != null) {
        mMapFragment.setMapCenter(mFocusedStop.getLocation(),true,true);
      }
    }
    @Override public void onPanelHidden(    View panel){
      Log.d(TAG,""String_Node_Str"");
      if (mArrivalsListFragment != null) {
        FragmentManager fm=getSupportFragmentManager();
        fm.beginTransaction().remove(mArrivalsListFragment).commit();
      }
    }
  }
);
}","private void setupSlidingPanel(){
  mSlidingPanel=(SlidingUpPanelLayout)findViewById(R.id.sliding_layout);
  mArrivalsListHeaderView=findViewById(R.id.arrivals_list_header);
  mSlidingPanel.hidePanel();
  mSlidingPanel.setOverlayed(true);
  mSlidingPanel.setAnchorPoint(MapModeController.OVERLAY_PERCENTAGE);
  mSlidingPanel.setPanelSlideListener(new SlidingUpPanelLayout.PanelSlideListener(){
    @Override public void onPanelSlide(    View panel,    float slideOffset){
      Log.d(TAG,""String_Node_Str"" + slideOffset);
    }
    @Override public void onPanelExpanded(    View panel){
      Log.d(TAG,""String_Node_Str"");
    }
    @Override public void onPanelCollapsed(    View panel){
      Log.d(TAG,""String_Node_Str"");
    }
    @Override public void onPanelAnchored(    View panel){
      Log.d(TAG,""String_Node_Str"");
      if (mFocusedStop != null && mMapFragment != null) {
        mMapFragment.setMapCenter(mFocusedStop.getLocation(),true,true);
      }
    }
    @Override public void onPanelHidden(    View panel){
      Log.d(TAG,""String_Node_Str"");
      if (mArrivalsListFragment != null) {
        FragmentManager fm=getSupportFragmentManager();
        fm.beginTransaction().remove(mArrivalsListFragment).commit();
      }
    }
  }
);
}"
81080,"/** 
 * Called by the BaseMapFragment when a stop obtains focus, or no stops have focus
 * @param stop the ObaStop that obtained focus, or null if no stop is in focus
 * @param routes a HashMap of all route display names that serve this stop - key is routeId
 */
@Override public void onFocusChanged(ObaStop stop,HashMap<String,ObaRoute> routes){
  mFocusedStop=stop;
  if (stop != null) {
    FragmentManager fm=getSupportFragmentManager();
    mArrivalsListFragment=new ArrivalsListFragment();
    ArrivalsListHeader header=new ArrivalsListHeader(this,mArrivalsListFragment);
    mArrivalsListFragment.setHeader(header,findViewById(R.id.arrivals_list_header));
    Intent i=new ArrivalsListFragment.IntentBuilder(this,stop,routes).build();
    mArrivalsListFragment.setArguments(FragmentUtils.getIntentArgs(i));
    fm.beginTransaction().replace(R.id.slidingFragment,mArrivalsListFragment).commit();
    mSlidingPanel.setAnchorPoint(MapModeController.OVERLAY_PERCENTAGE);
    mSlidingPanel.showPanel();
  }
 else {
    mSlidingPanel.hidePanel();
  }
}","/** 
 * Called by the BaseMapFragment when a stop obtains focus, or no stops have focus
 * @param stop   the ObaStop that obtained focus, or null if no stop is in focus
 * @param routes a HashMap of all route display names that serve this stop - key is routeId
 */
@Override public void onFocusChanged(ObaStop stop,HashMap<String,ObaRoute> routes){
  mFocusedStop=stop;
  if (stop != null) {
    FragmentManager fm=getSupportFragmentManager();
    mArrivalsListFragment=new ArrivalsListFragment();
    mArrivalsListFragment.setListener(this);
    mArrivalsListHeader=new ArrivalsListHeader(this,mArrivalsListFragment);
    mArrivalsListFragment.setHeader(mArrivalsListHeader,mArrivalsListHeaderView);
    Intent i=new ArrivalsListFragment.IntentBuilder(this,stop,routes).build();
    mArrivalsListFragment.setArguments(FragmentUtils.getIntentArgs(i));
    fm.beginTransaction().replace(R.id.slidingFragment,mArrivalsListFragment).commit();
    mSlidingPanel.showPanel();
  }
 else {
    mSlidingPanel.hidePanel();
  }
}"
81081,"private Notification createNotification(Uri alertUri){
  Intent deleteIntent=new Intent(mContext,TripService.class);
  deleteIntent.setAction(TripService.ACTION_CANCEL);
  deleteIntent.setData(alertUri);
  return new NotificationCompat.Builder(mContext).setSmallIcon(R.drawable.ic_stat_notification).setDefaults(Notification.DEFAULT_ALL).setOnlyAlertOnce(true).setDeleteIntent(PendingIntent.getService(mContext,0,deleteIntent,PendingIntent.FLAG_UPDATE_CURRENT)).getNotification();
}","private Notification createNotification(PendingIntent deleteIntent){
  return new NotificationCompat.Builder(mContext).setSmallIcon(R.drawable.ic_stat_notification).setDefaults(Notification.DEFAULT_ALL).setOnlyAlertOnce(true).setDeleteIntent(deleteIntent).build();
}"
81082,"@SuppressWarnings(""String_Node_Str"") private void setLatestInfo(Notification notification,String stopId,String routeId,long timeDiff){
  final String title=mContext.getString(R.string.app_name);
  final PendingIntent intent=PendingIntent.getActivity(mContext,0,new ArrivalsListActivity.Builder(mContext,stopId).getIntent(),PendingIntent.FLAG_UPDATE_CURRENT);
  notification.setLatestEventInfo(mContext,title,getNotifyText(routeId,timeDiff),intent);
}","@SuppressWarnings(""String_Node_Str"") private void setLatestInfo(Notification notification,String stopId,String routeId,long timeDiff,PendingIntent deleteIntent){
  final String title=mContext.getString(R.string.app_name);
  final PendingIntent intent=PendingIntent.getActivity(mContext,0,new ArrivalsListActivity.Builder(mContext,stopId).getIntent(),PendingIntent.FLAG_UPDATE_CURRENT);
  notification.setLatestEventInfo(mContext,title,getNotifyText(routeId,timeDiff),intent);
  notification.deleteIntent=deleteIntent;
}"
81083,"private void notify(Cursor c){
  final int id=c.getInt(COL_ID);
  final String tripId=c.getString(COL_TRIP_ID);
  final String stopId=c.getString(COL_STOP_ID);
  final int state=c.getInt(COL_STATE);
  if (state == TripAlerts.STATE_CANCELLED) {
    return;
  }
  final Uri tripUri=ObaContract.Trips.buildUri(tripId,stopId);
  final String routeId=UIHelp.stringForQuery(mContext,tripUri,Trips.ROUTE_ID);
  Notification notification=mTaskContext.getNotification(id);
  if (notification == null) {
    notification=createNotification(mUri);
  }
  setLatestInfo(notification,stopId,routeId,mTimeDiff);
  mTaskContext.setNotification(id,notification);
}","private void notify(Cursor c){
  final int id=c.getInt(COL_ID);
  final String tripId=c.getString(COL_TRIP_ID);
  final String stopId=c.getString(COL_STOP_ID);
  final int state=c.getInt(COL_STATE);
  if (state == TripAlerts.STATE_CANCELLED) {
    return;
  }
  final Uri tripUri=ObaContract.Trips.buildUri(tripId,stopId);
  final String routeId=UIHelp.stringForQuery(mContext,tripUri,Trips.ROUTE_ID);
  Notification notification=mTaskContext.getNotification(id);
  Intent deleteIntent=new Intent(mContext,TripService.class);
  deleteIntent.setAction(TripService.ACTION_CANCEL);
  deleteIntent.setData(mUri);
  PendingIntent pendingIntent=PendingIntent.getService(mContext,0,deleteIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  if (notification == null) {
    notification=createNotification(pendingIntent);
  }
  setLatestInfo(notification,stopId,routeId,mTimeDiff,pendingIntent);
  mTaskContext.setNotification(id,notification);
}"
81084,"@Override public Loader<Cursor> onCreateLoader(int id,Bundle args){
  return new CursorLoader(getActivity(),ObaContract.Stops.CONTENT_URI,QueryUtils.StopList.Columns.PROJECTION,ObaContract.Stops.FAVORITE + ""String_Node_Str"" + Application.get().getCurrentRegion() == null ? ""String_Node_Str"" : ""String_Node_Str"" + QueryUtils.getRegionWhere(ObaContract.Stops.REGION_ID,Application.get().getCurrentRegion().getId()),null,ObaContract.Stops.USE_COUNT + ""String_Node_Str"");
}","@Override public Loader<Cursor> onCreateLoader(int id,Bundle args){
  return new CursorLoader(getActivity(),ObaContract.Stops.CONTENT_URI,QueryUtils.StopList.Columns.PROJECTION,ObaContract.Stops.FAVORITE + ""String_Node_Str"" + (Application.get().getCurrentRegion() == null ? ""String_Node_Str"" : ""String_Node_Str"" + QueryUtils.getRegionWhere(ObaContract.Stops.REGION_ID,Application.get().getCurrentRegion().getId())),null,ObaContract.Stops.USE_COUNT + ""String_Node_Str"");
}"
81085,"public void setBaseUrl(Context context,Uri.Builder builder){
  String serverName=Application.get().getCustomApiUrl();
  if (!TextUtils.isEmpty(serverName)) {
    builder.encodedAuthority(serverName);
    builder.scheme(""String_Node_Str"");
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + serverName + ""String_Node_Str"");
    }
  }
 else   if (mRegion != null) {
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + mRegion.getObaBaseUrl() + ""String_Node_Str"");
    }
    Uri base=Uri.parse(mRegion.getObaBaseUrl() + builder.build().getPath());
    builder.scheme(base.getScheme());
    builder.authority(base.getAuthority());
    builder.encodedPath(base.getEncodedPath());
  }
 else {
    String fallBack=""String_Node_Str"";
    Log.e(TAG,""String_Node_Str"" + fallBack + ""String_Node_Str"");
    builder.scheme(""String_Node_Str"");
    builder.authority(fallBack);
  }
}","public void setBaseUrl(Context context,Uri.Builder builder){
  String serverName=Application.get().getCustomApiUrl();
  if (!TextUtils.isEmpty(serverName)) {
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + serverName + ""String_Node_Str"");
    }
    Uri base=Uri.parse(""String_Node_Str"" + serverName + builder.build().getPath());
    builder.authority(base.getAuthority());
    builder.scheme(base.getScheme());
    builder.encodedPath(base.getEncodedPath());
  }
 else   if (mRegion != null) {
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + mRegion.getObaBaseUrl() + ""String_Node_Str"");
    }
    Uri base=Uri.parse(mRegion.getObaBaseUrl() + builder.build().getPath());
    builder.scheme(base.getScheme());
    builder.authority(base.getAuthority());
    builder.encodedPath(base.getEncodedPath());
  }
 else {
    String fallBack=""String_Node_Str"";
    Log.e(TAG,""String_Node_Str"" + fallBack + ""String_Node_Str"");
    builder.scheme(""String_Node_Str"");
    builder.authority(fallBack);
  }
}"
81086,"public void setBaseUrl(Context context,Uri.Builder builder){
  String serverName=Application.getCustomApiUrl();
  if (!TextUtils.isEmpty(serverName)) {
    builder.encodedAuthority(serverName);
    builder.scheme(""String_Node_Str"");
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + serverName + ""String_Node_Str"");
    }
  }
 else   if (mRegion != null) {
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + mRegion.getObaBaseUrl() + ""String_Node_Str"");
    }
    Uri base=Uri.parse(mRegion.getObaBaseUrl() + builder.build().getEncodedPath());
    builder.scheme(base.getScheme());
    builder.authority(base.getAuthority());
    builder.encodedPath(base.getEncodedPath());
  }
 else {
    String fallBack=""String_Node_Str"";
    Log.e(TAG,""String_Node_Str"" + fallBack + ""String_Node_Str"");
    builder.scheme(""String_Node_Str"");
    builder.authority(fallBack);
  }
}","public void setBaseUrl(Context context,Uri.Builder builder){
  String serverName=Application.getCustomApiUrl();
  if (!TextUtils.isEmpty(serverName)) {
    builder.encodedAuthority(serverName);
    builder.scheme(""String_Node_Str"");
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + serverName + ""String_Node_Str"");
    }
  }
 else   if (mRegion != null) {
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + mRegion.getObaBaseUrl() + ""String_Node_Str"");
    }
    Uri base=Uri.parse(mRegion.getObaBaseUrl() + builder.build().getPath());
    builder.scheme(base.getScheme());
    builder.authority(base.getAuthority());
    builder.encodedPath(base.getEncodedPath());
  }
 else {
    String fallBack=""String_Node_Str"";
    Log.e(TAG,""String_Node_Str"" + fallBack + ""String_Node_Str"");
    builder.scheme(""String_Node_Str"");
    builder.authority(fallBack);
  }
}"
81087,"public ObaRegionElement(long id,String name,boolean active,String obaBaseUrl,String siriBaseUrl,Bounds[] bounds,String lang,String contactEmail,boolean supportsObaDiscovery,boolean supportsObaRealtime,boolean supportsSiriRealtime){
  this.id=id;
  this.regionName=name;
  this.active=active;
  this.obaBaseUrl=obaBaseUrl;
  this.siriBaseUrl=siriBaseUrl;
  this.bounds=bounds;
  this.language=lang;
  this.contactEmail=contactEmail;
  this.supportsObaDiscovery=supportsObaDiscovery;
  this.supportsObaRealtime=supportsObaRealtime;
  this.supportsSiriRealtime=supportsSiriRealtime;
}","public ObaRegionElement(long id,String name,boolean active,String obaBaseUrl,String siriBaseUrl,Bounds[] bounds,String lang,String contactEmail,boolean supportsObaDiscoveryApis,boolean supportsObaRealtimeApis,boolean supportsSiriRealtimeApis){
  this.id=id;
  this.regionName=name;
  this.active=active;
  this.obaBaseUrl=obaBaseUrl;
  this.siriBaseUrl=siriBaseUrl;
  this.bounds=bounds;
  this.language=lang;
  this.contactEmail=contactEmail;
  this.supportsObaDiscoveryApis=supportsObaDiscoveryApis;
  this.supportsObaRealtimeApis=supportsObaRealtimeApis;
  this.supportsSiriRealtimeApis=supportsSiriRealtimeApis;
}"
81088,"/** 
 * Checks if the given region is usable by the app, based on what this app supports - Is the region active? - Does the region support the OBA Discovery APIs? - Does the region support the OBA Realtime APIs?
 * @param region region to be checked
 * @return true if the region is usable by this application, false if it is not
 */
public static boolean isRegionUsable(ObaRegion region){
  if (!region.getActive()) {
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + region.getName() + ""String_Node_Str"");
    }
    return false;
  }
  return true;
}","/** 
 * Checks if the given region is usable by the app, based on what this app supports - Is the region active? - Does the region support the OBA Discovery APIs? - Does the region support the OBA Realtime APIs?
 * @param region region to be checked
 * @return true if the region is usable by this application, false if it is not
 */
public static boolean isRegionUsable(ObaRegion region){
  if (!region.getActive()) {
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + region.getName() + ""String_Node_Str"");
    }
    return false;
  }
  if (!region.getSupportsObaDiscoveryApis()) {
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + region.getName() + ""String_Node_Str"");
    }
    return false;
  }
  if (!region.getSupportsObaRealtimeApis()) {
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + region.getName() + ""String_Node_Str"");
    }
    return false;
  }
  return true;
}"
81089,"public void setBaseUrl(Context context,Uri.Builder builder){
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(context);
  String serverName=preferences.getString(""String_Node_Str"",null);
  if (!TextUtils.isEmpty(serverName)) {
    builder.encodedAuthority(serverName);
    builder.scheme(""String_Node_Str"");
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + serverName + ""String_Node_Str"");
    }
  }
 else   if (mRegion != null) {
    Uri base=Uri.parse(mRegion.getObaBaseUrl());
    builder.scheme(base.getScheme());
    builder.encodedAuthority(base.getAuthority());
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + mRegion.getObaBaseUrl() + ""String_Node_Str"");
    }
  }
 else {
    String fallBack=""String_Node_Str"";
    Log.e(TAG,""String_Node_Str"" + fallBack + ""String_Node_Str"");
    builder.scheme(""String_Node_Str"");
    builder.authority(fallBack);
  }
}","public void setBaseUrl(Context context,Uri.Builder builder){
  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(context);
  String serverName=preferences.getString(""String_Node_Str"",null);
  if (!TextUtils.isEmpty(serverName)) {
    builder.encodedAuthority(serverName);
    builder.scheme(""String_Node_Str"");
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + serverName + ""String_Node_Str"");
    }
  }
 else   if (mRegion != null) {
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + mRegion.getObaBaseUrl() + ""String_Node_Str"");
    }
    Uri base=Uri.parse(mRegion.getObaBaseUrl());
    builder.scheme(base.getScheme());
    builder.authority(base.getAuthority());
    String tempPath=builder.build().getPath();
    builder.encodedPath(base.getPath() + tempPath);
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + builder.build().toString() + ""String_Node_Str"");
    }
  }
 else {
    String fallBack=""String_Node_Str"";
    Log.e(TAG,""String_Node_Str"" + fallBack + ""String_Node_Str"");
    builder.scheme(""String_Node_Str"");
    builder.authority(fallBack);
  }
}"
81090,"/** 
 * Get the closest region from a list of regions and a given location This method also enforces the constraints in isRegionUsable() to ensure the returned region is actually usable by the app
 * @param regions list of regions
 * @param loc location 
 * @return the closest region to the given location from the list of regions
 */
public static ObaRegion getClosestRegion(ArrayList<ObaRegion> regions,Location loc){
  float minDist=Float.MAX_VALUE;
  ObaRegion closestRegion=null;
  float distToRegion;
  NumberFormat fmt=NumberFormat.getInstance();
  if (fmt instanceof DecimalFormat) {
    ((DecimalFormat)fmt).setMaximumFractionDigits(1);
  }
  double miles;
  if (BuildConfig.DEBUG) {
    Log.d(TAG,""String_Node_Str"" + loc.getLatitude() + ""String_Node_Str""+ loc.getLongitude());
  }
  for (  ObaRegion region : regions) {
    if (!isRegionUsable(region)) {
      if (BuildConfig.DEBUG) {
        Log.d(TAG,""String_Node_Str"" + region.getName() + ""String_Node_Str"");
      }
      continue;
    }
    distToRegion=getDistanceAway(region,loc.getLatitude(),loc.getLongitude());
    miles=distToRegion * 0.000621371;
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + region.getName() + ""String_Node_Str""+ fmt.format(miles)+ ""String_Node_Str"");
    }
    if (distToRegion < minDist) {
      closestRegion=region;
    }
  }
  return closestRegion;
}","/** 
 * Get the closest region from a list of regions and a given location This method also enforces the constraints in isRegionUsable() to ensure the returned region is actually usable by the app
 * @param regions list of regions
 * @param loc location 
 * @return the closest region to the given location from the list of regions
 */
public static ObaRegion getClosestRegion(ArrayList<ObaRegion> regions,Location loc){
  float minDist=Float.MAX_VALUE;
  ObaRegion closestRegion=null;
  float distToRegion;
  NumberFormat fmt=NumberFormat.getInstance();
  if (fmt instanceof DecimalFormat) {
    ((DecimalFormat)fmt).setMaximumFractionDigits(1);
  }
  double miles;
  if (BuildConfig.DEBUG) {
    Log.d(TAG,""String_Node_Str"" + loc.getLatitude() + ""String_Node_Str""+ loc.getLongitude());
  }
  for (  ObaRegion region : regions) {
    if (!isRegionUsable(region)) {
      if (BuildConfig.DEBUG) {
        Log.d(TAG,""String_Node_Str"" + region.getName() + ""String_Node_Str"");
      }
      continue;
    }
    distToRegion=getDistanceAway(region,loc.getLatitude(),loc.getLongitude());
    miles=distToRegion * 0.000621371;
    if (BuildConfig.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + region.getName() + ""String_Node_Str""+ fmt.format(miles)+ ""String_Node_Str"");
    }
    if (distToRegion < minDist) {
      closestRegion=region;
      minDist=distToRegion;
    }
  }
  return closestRegion;
}"
81091,"@Override public boolean onContextItemSelected(MenuItem item){
  AdapterContextMenuInfo info=(AdapterContextMenuInfo)item.getMenuInfo();
switch (item.getItemId()) {
case CONTEXT_MENU_DEFAULT:
    onListItemClick(getListView(),info.targetView,info.position,info.id);
  return true;
case CONTEXT_MENU_SHOW_ON_MAP:
showOnMap(getListView(),info.position);
return true;
case CONTEXT_MENU_CREATE_SHORTCUT:
StopData stopData=getStopData(getListView(),info.position);
final Intent shortcutIntent=UIHelp.makeShortcut(getActivity(),stopData.uiName,ArrivalsListActivity.makeIntent(getActivity(),stopData.id,stopData.name,stopData.dir));
shortcutIntent.setAction(MyListConstants.INSTALL_SHORTCUT);
getActivity().sendBroadcast(shortcutIntent);
return true;
default :
return super.onContextItemSelected(item);
}
}","@Override public boolean onContextItemSelected(MenuItem item){
  AdapterContextMenuInfo info=(AdapterContextMenuInfo)item.getMenuInfo();
switch (item.getItemId()) {
case CONTEXT_MENU_DEFAULT:
    onListItemClick(getListView(),info.targetView,info.position,info.id);
  return true;
case CONTEXT_MENU_SHOW_ON_MAP:
showOnMap(getListView(),info.position);
return true;
case CONTEXT_MENU_CREATE_SHORTCUT:
StopData stopData=getStopData(getListView(),info.position);
final Intent shortcutIntent=UIHelp.makeShortcut(getActivity(),stopData.uiName,ArrivalsListActivity.makeIntent(getActivity(),stopData.id,stopData.name,stopData.dir));
shortcutIntent.setAction(MyListConstants.INSTALL_SHORTCUT);
shortcutIntent.setFlags(0);
getActivity().sendBroadcast(shortcutIntent);
return true;
default :
return super.onContextItemSelected(item);
}
}"
81092,"@Override public ObaReportProblemWithTripResponse call(){
  return call(ObaReportProblemWithTripResponse.class);
}","@Override public ObaReportProblemWithTripResponse call(){
  return callPostHack(ObaReportProblemWithTripResponse.class);
}"
81093,"public ObaReportProblemWithTripRequest build(){
  return new ObaReportProblemWithTripRequest(buildUri());
}","public ObaReportProblemWithTripRequest build(){
  return new ObaReportProblemWithTripRequest(buildUri(),buildPostData());
}"
81094,"protected ObaReportProblemWithTripRequest(Uri uri){
  super(uri);
}","protected ObaReportProblemWithTripRequest(Uri uri,String postData){
  super(uri,postData);
}"
81095,"@Override public ObaReportProblemWithStopResponse call(){
  return call(ObaReportProblemWithStopResponse.class);
}","@Override public ObaReportProblemWithStopResponse call(){
  return callPostHack(ObaReportProblemWithStopResponse.class);
}"
81096,"/** 
 * Sets the optional user comment.
 * @param comment The user comment.
 */
public Builder setUserComment(String comment){
  mBuilder.appendQueryParameter(""String_Node_Str"",comment);
  return this;
}","/** 
 * Sets the optional user comment.
 * @param comment The user comment.
 */
public Builder setUserComment(String comment){
  mPostData.appendQueryParameter(""String_Node_Str"",comment);
  return this;
}"
81097,"public ObaReportProblemWithStopRequest build(){
  return new ObaReportProblemWithStopRequest(buildUri());
}","public ObaReportProblemWithStopRequest build(){
  return new ObaReportProblemWithStopRequest(buildUri(),buildPostData());
}"
81098,"public Builder(Context context,String stopId){
  super(context,getPathWithId(""String_Node_Str"",stopId));
}","public Builder(Context context,String stopId){
  super(context,getPathWithId(""String_Node_Str"",stopId));
  mPostData.appendQueryParameter(""String_Node_Str"",stopId);
}"
81099,"/** 
 * Sets the optional problem code.
 * @param code The problem code.
 */
public Builder setCode(String code){
  mBuilder.appendQueryParameter(""String_Node_Str"",code);
  return this;
}","/** 
 * Sets the optional problem code.
 * @param code The problem code.
 */
public Builder setCode(String code){
  mPostData.appendQueryParameter(""String_Node_Str"",code);
  String data=String.format(""String_Node_Str"",code);
  mPostData.appendQueryParameter(""String_Node_Str"",data);
  return this;
}"
81100,"/** 
 * Sets the optional user location.
 * @param lat The user's current location.
 * @param lon The user's current location.
 */
public Builder setUserLocation(double lat,double lon){
  mBuilder.appendQueryParameter(""String_Node_Str"",String.valueOf(lat));
  mBuilder.appendQueryParameter(""String_Node_Str"",String.valueOf(lon));
  return this;
}","/** 
 * Sets the optional user location.
 * @param lat The user's current location.
 * @param lon The user's current location.
 */
public Builder setUserLocation(double lat,double lon){
  mPostData.appendQueryParameter(""String_Node_Str"",String.valueOf(lat));
  mPostData.appendQueryParameter(""String_Node_Str"",String.valueOf(lon));
  return this;
}"
81101,"/** 
 * Sets the optional user's location accuracy, in meters.
 * @param meters The user's location accuracy in meters.
 */
public Builder setUserLocationAccuracy(int meters){
  mBuilder.appendQueryParameter(""String_Node_Str"",String.valueOf(meters));
  return this;
}","/** 
 * Sets the optional user's location accuracy, in meters.
 * @param meters The user's location accuracy in meters.
 */
public Builder setUserLocationAccuracy(int meters){
  mPostData.appendQueryParameter(""String_Node_Str"",String.valueOf(meters));
  return this;
}"
81102,"protected ObaReportProblemWithStopRequest(Uri uri){
  super(uri);
}","protected ObaReportProblemWithStopRequest(Uri uri,String postData){
  super(uri,postData);
}"
81103,"/** 
 * Sets the optional service date of the trip.
 * @param serviceDate The service date.
 */
public Builder setServiceDate(long serviceDate){
  mBuilder.appendQueryParameter(""String_Node_Str"",String.valueOf(serviceDate));
  return this;
}","/** 
 * Sets the optional service date of the trip.
 * @param serviceDate The service date.
 */
public Builder setServiceDate(long serviceDate){
  mPostData.appendQueryParameter(""String_Node_Str"",String.valueOf(serviceDate));
  return this;
}"
81104,"public Builder(Context context,String tripId){
  super(context,getPathWithId(""String_Node_Str"",tripId));
}","public Builder(Context context,String tripId){
  super(context,getPathWithId(""String_Node_Str"",tripId));
  mPostData.appendQueryParameter(""String_Node_Str"",tripId);
}"
81105,"/** 
 * Sets the optional problem code.
 * @param code The problem code.
 */
public Builder setCode(String code){
  mBuilder.appendQueryParameter(""String_Node_Str"",code);
  return this;
}","/** 
 * Sets the optional problem code.
 * @param code The problem code.
 */
public Builder setCode(String code){
  mPostData.appendQueryParameter(""String_Node_Str"",code);
  String data=String.format(""String_Node_Str"",code);
  mPostData.appendQueryParameter(""String_Node_Str"",data);
  return this;
}"
81106,"/** 
 * Sets the optional user location.
 * @param lat The user's current location.
 * @param lon The user's current location.
 */
public Builder setUserLocation(double lat,double lon){
  mBuilder.appendQueryParameter(""String_Node_Str"",String.valueOf(lat));
  mBuilder.appendQueryParameter(""String_Node_Str"",String.valueOf(lon));
  return this;
}","/** 
 * Sets the optional user location.
 * @param lat The user's current location.
 * @param lon The user's current location.
 */
public Builder setUserLocation(double lat,double lon){
  mPostData.appendQueryParameter(""String_Node_Str"",String.valueOf(lat));
  mPostData.appendQueryParameter(""String_Node_Str"",String.valueOf(lon));
  return this;
}"
81107,"/** 
 * Sets true/false to indicate if the user is on the transit vehicle experiencing the problem.
 * @param onVehicle If the user is on the vehicle.
 */
public Builder setUserOnVehicle(boolean onVehicle){
  mBuilder.appendQueryParameter(""String_Node_Str"",String.valueOf(onVehicle));
  return this;
}","/** 
 * Sets true/false to indicate if the user is on the transit vehicle experiencing the problem.
 * @param onVehicle If the user is on the vehicle.
 */
public Builder setUserOnVehicle(boolean onVehicle){
  mPostData.appendQueryParameter(""String_Node_Str"",String.valueOf(onVehicle));
  return this;
}"
81108,"/** 
 * Sets the optional user comment.
 * @param comment The user comment.
 */
public Builder setUserComment(String comment){
  mBuilder.appendQueryParameter(""String_Node_Str"",comment);
  return this;
}","/** 
 * Sets the optional user comment.
 * @param comment The user comment.
 */
public Builder setUserComment(String comment){
  mPostData.appendQueryParameter(""String_Node_Str"",comment);
  return this;
}"
81109,"/** 
 * Sets the optional vehicle actively serving the trip.
 * @param vehicleId The vehicle actively serving the trip.
 */
public Builder setVehicleId(String vehicleId){
  mBuilder.appendQueryParameter(""String_Node_Str"",vehicleId);
  return this;
}","/** 
 * Sets the optional vehicle actively serving the trip.
 * @param vehicleId The vehicle actively serving the trip.
 */
public Builder setVehicleId(String vehicleId){
  mPostData.appendQueryParameter(""String_Node_Str"",vehicleId);
  return this;
}"
81110,"/** 
 * Set the vehicle number, as reported by the user.
 * @param vehicleNumber The vehicle as reported by the user.
 */
public Builder setUserVehicleNumber(String vehicleNumber){
  mBuilder.appendQueryParameter(""String_Node_Str"",vehicleNumber);
  return this;
}","/** 
 * Set the vehicle number, as reported by the user.
 * @param vehicleNumber The vehicle as reported by the user.
 */
public Builder setUserVehicleNumber(String vehicleNumber){
  mPostData.appendQueryParameter(""String_Node_Str"",vehicleNumber);
  return this;
}"
81111,"/** 
 * Sets the optional user's location accuracy, in meters.
 * @param meters The user's location accuracy in meters.
 */
public Builder setUserLocationAccuracy(int meters){
  mBuilder.appendQueryParameter(""String_Node_Str"",String.valueOf(meters));
  return this;
}","/** 
 * Sets the optional user's location accuracy, in meters.
 * @param meters The user's location accuracy in meters.
 */
public Builder setUserLocationAccuracy(int meters){
  mPostData.appendQueryParameter(""String_Node_Str"",String.valueOf(meters));
  return this;
}"
81112,"/** 
 * Sets the optional stop ID indicating the stop where the user is experiencing the problem.
 * @param stopId The stop ID.
 */
public Builder setStopId(String stopId){
  mBuilder.appendQueryParameter(""String_Node_Str"",stopId);
  return this;
}","/** 
 * Sets the optional stop ID indicating the stop where the user is experiencing the problem.
 * @param stopId The stop ID.
 */
public Builder setStopId(String stopId){
  mPostData.appendQueryParameter(""String_Node_Str"",stopId);
  return this;
}"
81113,"@Override public void onLoadFinished(Loader<ObaStopsForLocationResponse> loader,ObaStopsForLocationResponse response){
  Log.d(TAG,""String_Node_Str"");
  mFragment.showProgress(false);
  if (response.getCode() != ObaApi.OBA_OK) {
    Activity act=mFragment.getActivity();
    Toast.makeText(act,act.getString(R.string.main_stop_errors),Toast.LENGTH_LONG);
    return;
  }
  if (response.getOutOfRange()) {
    mFragment.notifyOutOfRange();
    return;
  }
  List<ObaStop> stops=Arrays.asList(response.getStops());
  mFragment.showStops(stops,response);
}","@Override public void onLoadFinished(Loader<ObaStopsForLocationResponse> loader,ObaStopsForLocationResponse response){
  Log.d(TAG,""String_Node_Str"");
  mFragment.showProgress(false);
  if (response.getCode() != ObaApi.OBA_OK) {
    Activity act=mFragment.getActivity();
    Toast.makeText(act,act.getString(R.string.main_stop_errors),Toast.LENGTH_LONG).show();
    return;
  }
  if (response.getOutOfRange()) {
    mFragment.notifyOutOfRange();
    return;
  }
  List<ObaStop> stops=Arrays.asList(response.getStops());
  mFragment.showStops(stops,response);
}"
81114,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  setContentView(R.layout.main);
  mMapView=(MapView)findViewById(R.id.mapview);
  mPopup=findViewById(R.id.map_popup);
  mPopup.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
    }
  }
);
  mMapView.setBuiltInZoomControls(false);
  mZoomControls=(ZoomControls)findViewById(R.id.zoom_controls);
  mZoomControls.setOnZoomInClickListener(mOnZoomIn);
  mZoomControls.setOnZoomOutClickListener(mOnZoomOut);
  mStopsController=new StopsController(this,this);
  mRouteOverlay=new RouteOverlay(this,mMapView);
  UIHelp.setChildClickable(this,R.id.show_arrival_info,mOnShowArrivals);
  UIHelp.setChildClickable(this,R.id.show_routes,mOnShowRoutes);
  Bundle bundle=getIntent().getExtras();
  if (bundle != null) {
    mFocusStopId=bundle.getString(FOCUS_STOP_ID);
    mapValuesFromBundle(bundle);
    mRouteOverlay.setRouteId(bundle.getString(ROUTE_ID),true);
  }
  if (savedInstanceState != null) {
    mFocusStopId=savedInstanceState.getString(FOCUS_STOP_ID);
    mShowRoutes=savedInstanceState.getBoolean(SHOW_ROUTES);
    mapValuesFromBundle(savedInstanceState);
    mRouteOverlay.setRouteId(savedInstanceState.getString(ROUTE_ID),false);
  }
  mStopsController.setNonConfigurationInstance(getLastNonConfigurationInstance());
  autoShowWhatsNew();
  UIHelp.checkAirplaneMode(this);
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  boolean firstRun=firstRunCheck();
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  setContentView(R.layout.main);
  mMapView=(MapView)findViewById(R.id.mapview);
  mPopup=findViewById(R.id.map_popup);
  mPopup.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
    }
  }
);
  mMapView.setBuiltInZoomControls(false);
  mZoomControls=(ZoomControls)findViewById(R.id.zoom_controls);
  mZoomControls.setOnZoomInClickListener(mOnZoomIn);
  mZoomControls.setOnZoomOutClickListener(mOnZoomOut);
  mStopsController=new StopsController(this,this);
  mRouteOverlay=new RouteOverlay(this,mMapView);
  UIHelp.setChildClickable(this,R.id.show_arrival_info,mOnShowArrivals);
  UIHelp.setChildClickable(this,R.id.show_routes,mOnShowRoutes);
  Bundle bundle=getIntent().getExtras();
  if (bundle != null) {
    mFocusStopId=bundle.getString(FOCUS_STOP_ID);
    mapValuesFromBundle(bundle);
    mRouteOverlay.setRouteId(bundle.getString(ROUTE_ID),true);
  }
  if (savedInstanceState != null) {
    mFocusStopId=savedInstanceState.getString(FOCUS_STOP_ID);
    mShowRoutes=savedInstanceState.getBoolean(SHOW_ROUTES);
    mapValuesFromBundle(savedInstanceState);
    mRouteOverlay.setRouteId(savedInstanceState.getString(ROUTE_ID),false);
  }
  mStopsController.setNonConfigurationInstance(getLastNonConfigurationInstance());
  autoShowWhatsNew();
  UIHelp.checkAirplaneMode(this);
  if (firstRun) {
    firstRunSetLocation(mMapView.getController());
  }
}"
81115,"@Override protected void initList(Cursor c){
  startManagingCursor(c);
  final String[] from={ObaContract.Routes.SHORTNAME,ObaContract.Routes.LONGNAME};
  final int[] to={R.id.short_name,R.id.long_name};
  SimpleCursorAdapter simpleAdapter=new SimpleCursorAdapter(this,R.layout.route_list_item,c,from,to);
  simpleAdapter.setViewBinder(mViewBinder);
  setListAdapter(simpleAdapter);
}","@Override protected void initList(Cursor c){
  startManagingCursor(c);
  final String[] from={ObaContract.Routes.SHORTNAME,ObaContract.Routes.LONGNAME};
  final int[] to={R.id.short_name,R.id.long_name};
  SimpleCursorAdapter simpleAdapter=new SimpleCursorAdapter(this,R.layout.route_list_item,c,from,to);
  setListAdapter(simpleAdapter);
}"
81116,"@Override protected void setData(View view,int position){
  TextView text1=(TextView)view.findViewById(R.id.short_name);
  TextView text2=(TextView)view.findViewById(R.id.long_name);
  ObaRoute route=mArray.get(position);
  final String shortName=route.getShortName();
  final String longName=route.getLongName();
  if (!TextUtils.isEmpty(shortName)) {
    text1.setText(shortName);
    text2.setText(longName);
  }
 else {
    text1.setText(longName);
    text2.setText(""String_Node_Str"");
  }
}","@Override protected void setData(View view,int position){
  TextView shortNameText=(TextView)view.findViewById(R.id.short_name);
  TextView longNameText=(TextView)view.findViewById(R.id.long_name);
  ObaRoute route=mArray.get(position);
  String shortName=route.getShortName();
  String longName=route.getLongName();
  if (TextUtils.isEmpty(shortName)) {
    shortName=longName;
  }
  if (TextUtils.isEmpty(longName) || shortName.equals(longName)) {
    longName=route.getDescription();
  }
  shortNameText.setText(shortName);
  longNameText.setText(longName);
}"
81117,"private void setHeader(ObaRouteResponse routeInfo,boolean addToDb){
  mRouteInfo=routeInfo;
  if (routeInfo.getCode() == ObaApi.OBA_OK) {
    TextView text1=(TextView)findViewById(R.id.short_name);
    TextView text2=(TextView)findViewById(R.id.long_name);
    TextView agencyText=(TextView)findViewById(R.id.agency);
    String url=mRouteInfo.getUrl();
    final String shortName=routeInfo.getShortName();
    final String longName=routeInfo.getLongName();
    if (!TextUtils.isEmpty(shortName)) {
      text1.setText(shortName);
      text2.setText(longName);
    }
 else {
      text1.setText(longName);
      text2.setText(""String_Node_Str"");
    }
    agencyText.setText(mRouteInfo.getAgency().getName());
    if (addToDb) {
      ContentValues values=new ContentValues();
      values.put(ObaContract.Routes.SHORTNAME,shortName);
      values.put(ObaContract.Routes.LONGNAME,longName);
      values.put(ObaContract.Routes.URL,url);
      ObaContract.Routes.insertOrUpdate(this,mRouteInfo.getId(),values,true);
    }
  }
 else {
    mEmptyText.setText(UIHelp.getRouteErrorString(routeInfo.getCode()));
  }
  mRouteInfoTask=null;
}","private void setHeader(ObaRouteResponse routeInfo,boolean addToDb){
  mRouteInfo=routeInfo;
  if (routeInfo.getCode() == ObaApi.OBA_OK) {
    TextView shortNameText=(TextView)findViewById(R.id.short_name);
    TextView longNameText=(TextView)findViewById(R.id.long_name);
    TextView agencyText=(TextView)findViewById(R.id.agency);
    String url=mRouteInfo.getUrl();
    String shortName=routeInfo.getShortName();
    String longName=routeInfo.getLongName();
    if (TextUtils.isEmpty(shortName)) {
      shortName=longName;
    }
    if (TextUtils.isEmpty(longName) || shortName.equals(longName)) {
      longName=routeInfo.getDescription();
    }
    shortNameText.setText(shortName);
    longNameText.setText(longName);
    agencyText.setText(mRouteInfo.getAgency().getName());
    if (addToDb) {
      ContentValues values=new ContentValues();
      values.put(ObaContract.Routes.SHORTNAME,shortName);
      values.put(ObaContract.Routes.LONGNAME,longName);
      values.put(ObaContract.Routes.URL,url);
      ObaContract.Routes.insertOrUpdate(this,mRouteInfo.getId(),values,true);
    }
  }
 else {
    mEmptyText.setText(UIHelp.getRouteErrorString(routeInfo.getCode()));
  }
  mRouteInfoTask=null;
}"
81118,"private void initMaps(Context cxt,ObaStopsForRouteResponse response){
  if (response.getCode() == ObaApi.OBA_OK) {
    final List<ObaStop> stops=response.getStops();
    final Map<String,ObaStop> stopMap=getStopMap(stops);
    final ObaStopGrouping[] groupings=response.getStopGroupings();
    final int groupingsLen=groupings.length;
    for (int groupingIndex=0; groupingIndex < groupingsLen; ++groupingIndex) {
      final ObaStopGrouping grouping=groupings[groupingIndex];
      final ObaStopGroup[] groups=grouping.getStopGroups();
      final int groupsLen=groups.length;
      for (int i=0; i < groupsLen; ++i) {
        final HashMap<String,String> groupMap=new HashMap<String,String>(1);
        final ObaStopGroup group=groups[i];
        groupMap.put(""String_Node_Str"",group.getName());
        final String[] stopIds=group.getStopIds();
        final int stopIdLen=stopIds.length;
        final ArrayList<HashMap<String,String>> childList=new ArrayList<HashMap<String,String>>(stopIdLen);
        for (int j=0; j < stopIdLen; ++j) {
          final String stopId=stopIds[j];
          final ObaStop stop=stopMap.get(stopId);
          HashMap<String,String> groupStopMap=new HashMap<String,String>(2);
          if (stop != null) {
            groupStopMap.put(""String_Node_Str"",stop.getName());
            String dir=cxt.getString(UIHelp.getStopDirectionText(stop.getDirection()));
            groupStopMap.put(""String_Node_Str"",dir);
            groupStopMap.put(""String_Node_Str"",stopId);
            mStopMap.put(stopId,stop);
          }
 else {
            groupStopMap.put(""String_Node_Str"",""String_Node_Str"");
            groupStopMap.put(""String_Node_Str"",""String_Node_Str"");
            groupStopMap.put(""String_Node_Str"",stopId);
          }
          childList.add(groupStopMap);
        }
        mStopGroups.add(groupMap);
        mStops.add(childList);
      }
    }
  }
}","private void initMaps(Context cxt,ObaStopsForRouteResponse response){
  if (response.getCode() == ObaApi.OBA_OK) {
    final List<ObaStop> stops=response.getStops();
    final Map<String,ObaStop> stopMap=getStopMap(stops);
    final ObaStopGrouping[] groupings=response.getStopGroupings();
    final int groupingsLen=groupings.length;
    for (int groupingIndex=0; groupingIndex < groupingsLen; ++groupingIndex) {
      final ObaStopGrouping grouping=groupings[groupingIndex];
      final ObaStopGroup[] groups=grouping.getStopGroups();
      final int groupsLen=groups.length;
      for (int i=0; i < groupsLen; ++i) {
        final HashMap<String,String> groupMap=new HashMap<String,String>(1);
        final ObaStopGroup group=groups[i];
        groupMap.put(""String_Node_Str"",MyTextUtils.toTitleCase(group.getName()));
        final String[] stopIds=group.getStopIds();
        final int stopIdLen=stopIds.length;
        final ArrayList<HashMap<String,String>> childList=new ArrayList<HashMap<String,String>>(stopIdLen);
        for (int j=0; j < stopIdLen; ++j) {
          final String stopId=stopIds[j];
          final ObaStop stop=stopMap.get(stopId);
          HashMap<String,String> groupStopMap=new HashMap<String,String>(2);
          if (stop != null) {
            groupStopMap.put(""String_Node_Str"",MyTextUtils.toTitleCase(stop.getName()));
            String dir=cxt.getString(UIHelp.getStopDirectionText(stop.getDirection()));
            groupStopMap.put(""String_Node_Str"",dir);
            groupStopMap.put(""String_Node_Str"",stopId);
            mStopMap.put(stopId,stop);
          }
 else {
            groupStopMap.put(""String_Node_Str"",""String_Node_Str"");
            groupStopMap.put(""String_Node_Str"",""String_Node_Str"");
            groupStopMap.put(""String_Node_Str"",stopId);
          }
          childList.add(groupStopMap);
        }
        mStopGroups.add(groupMap);
        mStops.add(childList);
      }
    }
  }
}"
81119,"private void setData(ViewGroup view,int position){
  TextView route=(TextView)view.findViewById(R.id.route);
  TextView destination=(TextView)view.findViewById(R.id.destination);
  TextView time=(TextView)view.findViewById(R.id.time);
  TextView status=(TextView)view.findViewById(R.id.status);
  TextView etaView=(TextView)view.findViewById(R.id.eta);
  final StopInfo stopInfo=mInfo.get(position);
  final ObaArrivalInfo arrivalInfo=stopInfo.getInfo();
  route.setText(arrivalInfo.getShortName());
  destination.setText(arrivalInfo.getHeadsign());
  status.setText(stopInfo.getStatusText());
  long eta=stopInfo.getEta();
  if (eta == 0) {
    etaView.setText(R.string.stop_info_eta_now);
  }
 else {
    etaView.setText(String.valueOf(eta));
  }
  int color=getResources().getColor(stopInfo.getColor());
  etaView.setTextColor(color);
  time.setText(DateUtils.formatDateTime(StopInfoActivity.this,stopInfo.getDisplayTime(),DateUtils.FORMAT_SHOW_TIME | DateUtils.FORMAT_NO_NOON | DateUtils.FORMAT_NO_MIDNIGHT));
  ContentValues values=mTripsForStop.getValues(arrivalInfo.getTripId());
  if (values != null) {
    String tripName=values.getAsString(ObaContract.Trips.NAME);
    TextView tripInfo=(TextView)view.findViewById(R.id.trip_info);
    if (tripName.length() == 0) {
      tripName=getString(R.string.trip_info_noname);
    }
    tripInfo.setText(tripName);
    tripInfo.setVisibility(View.VISIBLE);
  }
 else {
    View tripInfo=view.findViewById(R.id.trip_info);
    tripInfo.setVisibility(View.GONE);
  }
}","private void setData(ViewGroup view,int position){
  TextView route=(TextView)view.findViewById(R.id.route);
  TextView destination=(TextView)view.findViewById(R.id.destination);
  TextView time=(TextView)view.findViewById(R.id.time);
  TextView status=(TextView)view.findViewById(R.id.status);
  TextView etaView=(TextView)view.findViewById(R.id.eta);
  final StopInfo stopInfo=mInfo.get(position);
  final ObaArrivalInfo arrivalInfo=stopInfo.getInfo();
  route.setText(arrivalInfo.getShortName());
  destination.setText(MyTextUtils.toTitleCase(arrivalInfo.getHeadsign()));
  status.setText(stopInfo.getStatusText());
  long eta=stopInfo.getEta();
  if (eta == 0) {
    etaView.setText(R.string.stop_info_eta_now);
  }
 else {
    etaView.setText(String.valueOf(eta));
  }
  int color=getResources().getColor(stopInfo.getColor());
  etaView.setTextColor(color);
  time.setText(DateUtils.formatDateTime(StopInfoActivity.this,stopInfo.getDisplayTime(),DateUtils.FORMAT_SHOW_TIME | DateUtils.FORMAT_NO_NOON | DateUtils.FORMAT_NO_MIDNIGHT));
  ContentValues values=mTripsForStop.getValues(arrivalInfo.getTripId());
  if (values != null) {
    String tripName=values.getAsString(ObaContract.Trips.NAME);
    TextView tripInfo=(TextView)view.findViewById(R.id.trip_info);
    if (tripName.length() == 0) {
      tripName=getString(R.string.trip_info_noname);
    }
    tripInfo.setText(tripName);
    tripInfo.setVisibility(View.VISIBLE);
  }
 else {
    View tripInfo=view.findViewById(R.id.trip_info);
    tripInfo.setVisibility(View.GONE);
  }
}"
81120,"/** 
 * This should be used with compound drawables
 */
public void setView2(TextView nameView,String stopId,String stopName){
  ContentValues values=mMap.getValues(stopId);
  int icon=0;
  if (values != null) {
    Integer i=values.getAsInteger(ObaContract.Stops.FAVORITE);
    final boolean favorite=(i != null) && (i == 1);
    final String userName=values.getAsString(ObaContract.Stops.USER_NAME);
    nameView.setText(TextUtils.isEmpty(userName) ? stopName : userName);
    icon=favorite ? R.drawable.star_on : 0;
  }
 else {
    nameView.setText(stopName);
  }
  nameView.setCompoundDrawablesWithIntrinsicBounds(icon,0,0,0);
}","/** 
 * This should be used with compound drawables
 */
public void setView2(TextView nameView,String stopId,String stopName){
  ContentValues values=mMap.getValues(stopId);
  int icon=0;
  if (values != null) {
    Integer i=values.getAsInteger(ObaContract.Stops.FAVORITE);
    final boolean favorite=(i != null) && (i == 1);
    final String userName=values.getAsString(ObaContract.Stops.USER_NAME);
    nameView.setText(TextUtils.isEmpty(userName) ? MyTextUtils.toTitleCase(stopName) : userName);
    icon=favorite ? R.drawable.star_on : 0;
  }
 else {
    nameView.setText(MyTextUtils.toTitleCase(stopName));
  }
  nameView.setCompoundDrawablesWithIntrinsicBounds(icon,0,0,0);
}"
81121,"private String getAppUid(){
  final TelephonyManager telephony=(TelephonyManager)getSystemService(Context.TELEPHONY_SERVICE);
  final String id=telephony.getDeviceId();
  try {
    MessageDigest digest=MessageDigest.getInstance(""String_Node_Str"");
    digest.update(id.getBytes());
    return getHex(digest.digest());
  }
 catch (  NoSuchAlgorithmException e) {
    return UUID.randomUUID().toString();
  }
}","private String getAppUid(){
  try {
    final TelephonyManager telephony=(TelephonyManager)getSystemService(Context.TELEPHONY_SERVICE);
    final String id=telephony.getDeviceId();
    MessageDigest digest=MessageDigest.getInstance(""String_Node_Str"");
    digest.update(id.getBytes());
    return getHex(digest.digest());
  }
 catch (  Exception e) {
    return UUID.randomUUID().toString();
  }
}"
81122,"private void startTask(){
  Log.d(TAG,""String_Node_Str"" + mCurrentRequest);
  mTask=new AsyncTask(mCurrentRequest);
  mTask.execute();
}","private void startTask(){
  Log.d(TAG,""String_Node_Str"" + mCurrentRequest);
  if (mCurrentRequest != null) {
    mTask=new MyTask();
    mTask.execute(mCurrentRequest);
  }
}"
81123,"@Override protected ObaResponse doInBackground(String... params){
  if (mInfo.getRouteId() != null) {
    return ObaApi.getStopsForRoute(mActivity,mInfo.getRouteId(),false);
  }
 else {
    return ObaApi.getStopsByLocation(mActivity,mInfo.getCenter(),0,mInfo.getLatSpan(),mInfo.getLonSpan(),null,0);
  }
}","@Override protected ResponseInfo doInBackground(RequestInfo... params){
  final RequestInfo info=params[0];
  ObaResponse response=null;
  if (info.getRouteId() != null) {
    response=ObaApi.getStopsForRoute(mActivity,info.getRouteId(),false);
  }
 else {
    response=ObaApi.getStopsByLocation(mActivity,info.getCenter(),0,info.getLatSpan(),info.getLonSpan(),null,0);
  }
  return new ResponseInfo(info,response);
}"
81124,"void setRefreshError(){
  TextView errorText=(TextView)mResponseError.findViewById(R.id.response_error_text);
  CharSequence relativeTime=DateUtils.getRelativeTimeSpanString(mResponseTime,System.currentTimeMillis(),DateUtils.MINUTE_IN_MILLIS,0);
  errorText.setText(getString(R.string.stop_info_old_data,relativeTime));
  mResponseError.setVisibility(View.VISIBLE);
  mEmptyText.setText(R.string.stop_info_nodata);
  ((BaseAdapter)getListAdapter()).notifyDataSetChanged();
  mLoadingProgress.hideLoading();
  setProgressBarIndeterminateVisibility(false);
}","void setRefreshError(){
  final long now=System.currentTimeMillis();
  if ((now - mResponseTime) >= 2 * DateUtils.MINUTE_IN_MILLIS) {
    TextView errorText=(TextView)mResponseError.findViewById(R.id.response_error_text);
    CharSequence relativeTime=DateUtils.getRelativeTimeSpanString(mResponseTime,now,DateUtils.MINUTE_IN_MILLIS,0);
    errorText.setText(getString(R.string.stop_info_old_data,relativeTime));
    mResponseError.setVisibility(View.VISIBLE);
    mEmptyText.setText(R.string.stop_info_nodata);
  }
 else {
    mResponseError.setVisibility(View.GONE);
  }
  StopInfoListAdapter adapter=(StopInfoListAdapter)getListView().getAdapter();
  adapter.setData(mResponse.getData().getArrivalsAndDepartures());
  mLoadingProgress.hideLoading();
  setProgressBarIndeterminateVisibility(false);
}"
81125,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.route_info);
  registerForContextMenu(getExpandableListView());
  Bundle bundle=getIntent().getExtras();
  mRouteId=bundle.getString(ROUTE_ID);
  setListAdapter(new SimpleExpandableListAdapter(this,new ArrayList<HashMap<String,String>>(),android.R.layout.simple_expandable_list_item_1,new String[]{""String_Node_Str""},new int[]{android.R.id.text1},new ArrayList<ArrayList<HashMap<String,String>>>(),0,null,new int[]{}));
  Object config=getLastNonConfigurationInstance();
  if (config != null) {
    Object[] results=(Object[])config;
    setHeader((ObaResponse)results[0],false);
    setStopsForRoute((StopsForRouteInfo)results[1]);
  }
 else {
    mRouteInfoTask=new GetRouteInfo().execute(mRouteId);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.route_info);
  registerForContextMenu(getExpandableListView());
  final Intent intent=getIntent();
  final Bundle bundle=intent.getExtras();
  final Uri data=intent.getData();
  if (data != null) {
    mRouteId=data.getLastPathSegment();
  }
 else   if (bundle != null) {
    mRouteId=bundle.getString(ROUTE_ID);
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    finish();
    return;
  }
  setListAdapter(new SimpleExpandableListAdapter(this,new ArrayList<HashMap<String,String>>(),android.R.layout.simple_expandable_list_item_1,new String[]{""String_Node_Str""},new int[]{android.R.id.text1},new ArrayList<ArrayList<HashMap<String,String>>>(),0,null,new int[]{}));
  Object config=getLastNonConfigurationInstance();
  if (config != null) {
    Object[] results=(Object[])config;
    setHeader((ObaResponse)results[0],false);
    setStopsForRoute((StopsForRouteInfo)results[1]);
  }
 else {
    mRouteInfoTask=new GetRouteInfo().execute(mRouteId);
  }
}"
81126,"public static Intent makeIntent(Context context,String routeId){
  Intent myIntent=new Intent(context,RouteInfoActivity.class);
  myIntent.putExtra(ROUTE_ID,routeId);
  return myIntent;
}","public static Intent makeIntent(Context context,String routeId){
  Intent myIntent=new Intent(context,RouteInfoActivity.class);
  myIntent.setData(Uri.withAppendedPath(ObaContract.Routes.CONTENT_URI,routeId));
  return myIntent;
}"
81127,"public static Intent makeIntent(Context context,ObaStop stop){
  Intent myIntent=new Intent(context,StopInfoActivity.class);
  myIntent.putExtra(STOP_ID,stop.getId());
  myIntent.putExtra(STOP_NAME,stop.getName());
  myIntent.putExtra(STOP_DIRECTION,stop.getDirection());
  return myIntent;
}","public static Intent makeIntent(Context context,ObaStop stop){
  Intent myIntent=new Intent(context,StopInfoActivity.class);
  myIntent.setData(Uri.withAppendedPath(ObaContract.Stops.CONTENT_URI,stop.getId()));
  myIntent.putExtra(STOP_NAME,stop.getName());
  myIntent.putExtra(STOP_DIRECTION,stop.getDirection());
  return myIntent;
}"
81128,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  setContentView(R.layout.stop_info);
  setListAdapter(new StopInfoListAdapter());
  Bundle bundle=getIntent().getExtras();
  mStopId=bundle.getString(STOP_ID);
  setHeader(bundle);
  UIHelp.setChildClickable(this,R.id.show_all,mShowAllClick);
  mRoutesFilter=ObaContract.StopRouteFilters.get(this,mStopId);
  mTripsForStop=getTripsForStop();
  Object response=getLastNonConfigurationInstance();
  if (response != null) {
    setResponse((ObaResponse)response,false);
  }
 else {
    getStopInfo(false);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  setContentView(R.layout.stop_info);
  setListAdapter(new StopInfoListAdapter());
  final Intent intent=getIntent();
  final Bundle bundle=intent.getExtras();
  final Uri data=intent.getData();
  if (data != null) {
    mStopId=data.getLastPathSegment();
  }
 else   if (bundle != null) {
    mStopId=bundle.getString(STOP_ID);
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    finish();
    return;
  }
  setHeader(bundle);
  UIHelp.setChildClickable(this,R.id.show_all,mShowAllClick);
  mRoutesFilter=ObaContract.StopRouteFilters.get(this,mStopId);
  mTripsForStop=getTripsForStop();
  Object response=getLastNonConfigurationInstance();
  if (response != null) {
    setResponse((ObaResponse)response,false);
  }
 else {
    getStopInfo(false);
  }
}"
81129,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.trip_info);
  final Bundle bundle=getIntent().getExtras();
  if (bundle == null) {
    Log.e(TAG,""String_Node_Str"");
    finish();
    return;
  }
  if (!initFromBundle(bundle)) {
    Log.e(TAG,""String_Node_Str"");
    finish();
    return;
  }
  boolean newTrip=!initFromDB();
  initForm(newTrip);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.trip_info);
  if (!initFromIntent(getIntent())) {
    Log.e(TAG,""String_Node_Str"");
    finish();
    return;
  }
  boolean newTrip=!initFromDB();
  initForm(newTrip);
}"
81130,"public static void start(Context context,String tripId,String stopId,String routeId,String routeName,String stopName,long departureTime,String headsign){
  Intent myIntent=new Intent(context,TripInfoActivity.class);
  myIntent.putExtra(TRIP_ID,tripId);
  myIntent.putExtra(STOP_ID,stopId);
  myIntent.putExtra(ROUTE_ID,routeId);
  myIntent.putExtra(ROUTE_NAME,routeName);
  myIntent.putExtra(STOP_NAME,stopName);
  myIntent.putExtra(DEPARTURE_TIME,departureTime);
  myIntent.putExtra(HEADSIGN,headsign);
  context.startActivity(myIntent);
}","public static void start(Context context,String tripId,String stopId,String routeId,String routeName,String stopName,long departureTime,String headsign){
  Intent myIntent=new Intent(context,TripInfoActivity.class);
  myIntent.setData(ObaContract.Trips.buildUri(tripId,stopId));
  myIntent.putExtra(ROUTE_ID,routeId);
  myIntent.putExtra(ROUTE_NAME,routeName);
  myIntent.putExtra(STOP_NAME,stopName);
  myIntent.putExtra(DEPARTURE_TIME,departureTime);
  myIntent.putExtra(HEADSIGN,headsign);
  context.startActivity(myIntent);
}"
81131,"final void scheduleNext(TripsDbAdapter adapter,Cursor c){
  final int days=c.getInt(TripsDbAdapter.TRIP_COL_DAYS);
  if (days == 0) {
    adapter.deleteTrip(mTripId,mStopId);
  }
 else {
    final Intent tripService=new Intent(TripService.this,TripService.class);
    tripService.setAction(TripService.ACTION_SCHEDULE_TRIP);
    tripService.setData(buildTripUri(mTripId,mStopId));
    TripService.this.startService(tripService);
  }
}","final void scheduleNext(TripsDbAdapter adapter,Cursor c){
  final int days=c.getInt(TripsDbAdapter.TRIP_COL_DAYS);
  if (days == 0) {
    adapter.deleteTrip(mTripId,mStopId);
  }
 else {
    TripService ctx=TripService.this;
    Intent myIntent=new Intent(ACTION_POLL_TRIP,buildTripUri(mTripId,mStopId),ctx,AlarmReceiver.class);
    PendingIntent alarmIntent=PendingIntent.getBroadcast(ctx,0,myIntent,PendingIntent.FLAG_ONE_SHOT);
    AlarmManager alarm=(AlarmManager)ctx.getSystemService(Context.ALARM_SERVICE);
    long triggerTime=System.currentTimeMillis() + 60 * ONE_MINUTE;
    alarm.set(AlarmManager.RTC_WAKEUP,triggerTime,alarmIntent);
  }
}"
81132,"synchronized void clearNotification(){
  Log.d(TAG,""String_Node_Str"" + getTaskId());
  mState=CLEARED;
}","synchronized void clearNotification(){
  Log.d(TAG,""String_Node_Str"" + getTaskId());
  mNotification=null;
  mState=DONE;
}"
81133,"final boolean doPoll(Cursor c){
  final String tripId=mTripId;
  final String stopId=mStopId;
  final long reminderMS=(1 + c.getInt(TripsDbAdapter.TRIP_COL_REMINDER)) * ONE_MINUTE;
  final long departMS=c.getInt(TripsDbAdapter.TRIP_COL_DEPARTURE) * ONE_MINUTE;
  mState=NOT_FOUND;
  while (mState != CLEARED) {
    Log.d(TAG,""String_Node_Str"" + getTaskId());
    ObaResponse response=ObaApi.getArrivalsDeparturesForStop(stopId);
    final long now=System.currentTimeMillis();
    if (response.getCode() == ObaApi.OBA_OK) {
      final ObaArray arrivals=response.getData().getArrivalsAndDepartures();
      final int length=arrivals.length();
      for (int i=0; i < length; ++i) {
        ObaArrivalInfo info=arrivals.getArrivalInfo(i);
        if (tripId.equals(info.getTripId())) {
synchronized (this) {
            if (mState == NOT_FOUND) {
              Log.d(TAG,""String_Node_Str"" + getTaskId());
              mState=FOUND;
            }
            long time=info.getPredictedArrivalTime();
            if (time == 0) {
              time=info.getScheduledArrivalTime();
            }
            if (mState == FOUND) {
              if ((time - reminderMS) < now) {
                doNotification(time - now,c);
                mState=NOTIFIED;
              }
 else               if (time < now) {
                mState=CLEARED;
                break;
              }
            }
 else             if (mState == NOTIFIED) {
              final long timeDiff=time - now;
              if (timeDiff <= 0) {
                cancelNotification();
                mState=CLEARED;
                break;
              }
 else {
                doNotification(timeDiff,c);
              }
            }
          }
        }
      }
    }
    if (mState == NOT_FOUND && ((departMS + LOOKAHEAD_DURATION_MS) > now)) {
      Log.d(TAG,""String_Node_Str"" + getTaskId());
      break;
    }
    try {
      Thread.sleep(30 * 1000);
    }
 catch (    InterruptedException e) {
    }
  }
  return mState == CLEARED;
}","final void doPoll(Cursor c){
  final String stopId=mStopId;
  final long reminderMS=(1 + c.getInt(TripsDbAdapter.TRIP_COL_REMINDER)) * ONE_MINUTE;
  final long departMS=c.getInt(TripsDbAdapter.TRIP_COL_DEPARTURE) * ONE_MINUTE;
  mState=NOT_FOUND;
  while (mState != DONE) {
    Log.d(TAG,""String_Node_Str"" + getTaskId());
    ObaResponse response=ObaApi.getArrivalsDeparturesForStop(stopId);
synchronized (this) {
      if (mState == DONE) {
        break;
      }
      final long now=System.currentTimeMillis();
      if (response.getCode() == ObaApi.OBA_OK) {
        if (checkArrivals(response,c,reminderMS,now)) {
          break;
        }
      }
      if (mState == NOT_FOUND && ((departMS + LOOKAHEAD_DURATION_MS) > now)) {
        Log.d(TAG,""String_Node_Str"" + getTaskId());
        mState=DONE;
        break;
      }
    }
    try {
      Thread.sleep(30 * 1000);
    }
 catch (    InterruptedException e) {
    }
  }
}"
81134,"final void doNotification(long timeDiff,Cursor c){
  final Context ctx=TripService.this;
  Log.d(TAG,""String_Node_Str"" + getTaskId());
  if (mNotification == null) {
    mNotification=new Notification(R.drawable.stat_trip,null,System.currentTimeMillis());
    mNotification.defaults|=Notification.DEFAULT_SOUND | Notification.DEFAULT_LIGHTS | Notification.DEFAULT_VIBRATE;
    Intent deleteIntent=new Intent(ctx,TripService.class);
    deleteIntent.setAction(ACTION_CANCEL_POLL);
    deleteIntent.setData(buildTripUri(mTripId,mStopId));
    mNotification.deleteIntent=PendingIntent.getService(ctx,0,deleteIntent,PendingIntent.FLAG_ONE_SHOT);
    Intent stopActivity=new Intent(ctx,StopInfoActivity.class);
    stopActivity.putExtra(StopInfoActivity.STOP_ID,mStopId);
    mNotificationIntent=PendingIntent.getActivity(ctx,0,stopActivity,PendingIntent.FLAG_ONE_SHOT);
  }
 else {
    mNotification.defaults=0;
  }
  final String title=getResources().getString(R.string.app_name);
  mNotification.setLatestEventInfo(ctx,title,getNotifyText(c,timeDiff),mNotificationIntent);
  NotificationManager nm=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);
  nm.notify(NOTIFY_ID,mNotification);
}","final void doNotification(long timeDiff,Cursor c){
  final Context ctx=TripService.this;
  if (mNotification == null) {
    Log.d(TAG,""String_Node_Str"" + getTaskId());
    mNotification=new Notification(R.drawable.stat_trip,null,System.currentTimeMillis());
    mNotification.defaults|=Notification.DEFAULT_SOUND | Notification.DEFAULT_LIGHTS | Notification.DEFAULT_VIBRATE;
    Intent deleteIntent=new Intent(ctx,TripService.class);
    deleteIntent.setAction(ACTION_CANCEL_POLL);
    deleteIntent.setData(buildTripUri(mTripId,mStopId));
    mNotification.deleteIntent=PendingIntent.getService(ctx,0,deleteIntent,PendingIntent.FLAG_ONE_SHOT);
    Intent stopActivity=new Intent(ctx,StopInfoActivity.class);
    stopActivity.putExtra(StopInfoActivity.STOP_ID,mStopId);
    mNotificationIntent=PendingIntent.getActivity(ctx,0,stopActivity,PendingIntent.FLAG_ONE_SHOT);
  }
 else {
    Log.d(TAG,""String_Node_Str"" + getTaskId());
    mNotification.defaults=0;
  }
  final String title=getResources().getString(R.string.app_name);
  mNotification.setLatestEventInfo(ctx,title,getNotifyText(c,timeDiff),mNotificationIntent);
  NotificationManager nm=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);
  nm.notify(NOTIFY_ID,mNotification);
}"
81135,"final String getNotifyText(Cursor c,long timeDiff){
  final String routeName=RoutesDbAdapter.getRouteShortName(this,c.getString(TripsDbAdapter.TRIP_COL_ROUTEID));
  final Resources res=getResources();
  if (timeDiff < ONE_MINUTE) {
    final String fmt=res.getString(R.string.trip_stat_lessthanone);
    return String.format(fmt,routeName);
  }
 else   if (timeDiff < ONE_MINUTE * 2) {
    final String fmt=res.getString(R.string.trip_stat_one);
    return String.format(fmt,routeName);
  }
 else {
    final String fmt=res.getString(R.string.trip_stat);
    return String.format(fmt,routeName,(int)(timeDiff / ONE_MINUTE));
  }
}","final String getNotifyText(Cursor c,long timeDiff){
  final String routeName=RoutesDbAdapter.getRouteShortName(this,c.getString(TripsDbAdapter.TRIP_COL_ROUTEID));
  final Resources res=getResources();
  if (timeDiff <= 0) {
    final String fmt=res.getString(R.string.trip_stat_gone);
    return String.format(fmt,routeName);
  }
 else   if (timeDiff < ONE_MINUTE) {
    final String fmt=res.getString(R.string.trip_stat_lessthanone);
    return String.format(fmt,routeName);
  }
 else   if (timeDiff < ONE_MINUTE * 2) {
    final String fmt=res.getString(R.string.trip_stat_one);
    return String.format(fmt,routeName);
  }
 else {
    final String fmt=res.getString(R.string.trip_stat);
    return String.format(fmt,routeName,(int)(timeDiff / ONE_MINUTE));
  }
}"
81136,"@Override public void onPause(){
  mTimer.cancel();
  super.onPause();
}","@Override public void onPause(){
  mTimer.cancel();
  mTimer=null;
  super.onPause();
}"
81137,"@Override public void onResume(){
  mTimer.schedule(new TimerTask(){
    @Override public void run(){
      mRefreshHandler.post(mRefresh);
    }
  }
,RefreshPeriod,RefreshPeriod);
  super.onResume();
}","@Override public void onResume(){
  if (mTimer == null) {
    mTimer=new Timer();
  }
  mTimer.schedule(new TimerTask(){
    @Override public void run(){
      mRefreshHandler.post(mRefresh);
    }
  }
,RefreshPeriod,RefreshPeriod);
  super.onResume();
}"
81138,"/** 
 * Returns whether the specified class is either within one of the specified packages or within a subpackage of one of the packages
 * @param clazz       The class
 * @param packageList The list of packages
 * @return True if it is within the list of specified packages
 */
public static boolean isClassBelowPackage(@Nonnull Class<?> clazz,@Nonnull List<?> packageList){
  requireNonNull(clazz,ERROR_CLAZZ_NULL);
  requireNonNull(packageList,""String_Node_Str"");
  String classPackage=clazz.getPackage().getName();
  for (  Object packageName : packageList) {
    if (packageName != null) {
      if (classPackage.startsWith(packageName.toString())) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * Returns whether the specified class is either within one of the specified packages or within a subpackage of one of the packages
 * @param clazz       The class
 * @param packageList The list of packages
 * @return True if it is within the list of specified packages
 */
public static boolean isClassBelowPackage(@Nonnull Class<?> clazz,@Nonnull List<?> packageList){
  requireNonNull(clazz,ERROR_CLAZZ_NULL);
  requireNonNull(packageList,""String_Node_Str"");
  String classPackage=clazz.getPackage().getName();
  for (  Object packageName : packageList) {
    if (packageName != null && classPackage.startsWith(packageName.toString())) {
      return true;
    }
  }
  return false;
}"
81139,"public static String getLogicalPropertyName(String className,String trailingName){
  if (!isBlank(className) && !isBlank(trailingName)) {
    if (className.length() == trailingName.length() + 1 && className.endsWith(trailingName)) {
      return className.substring(0,1).toLowerCase();
    }
  }
  return getLogicalName(getPropertyName(className),trailingName);
}","public static String getLogicalPropertyName(String className,String trailingName){
  if (!isBlank(className) && !isBlank(trailingName) && className.length() == trailingName.length() + 1 && className.endsWith(trailingName)) {
    return className.substring(0,1).toLowerCase();
  }
  return getLogicalName(getPropertyName(className),trailingName);
}"
81140,"@PostConstruct private void initialize(){
  this.application=requireNonNull(application,""String_Node_Str"");
  application.getEventRouter().addEventListener(ApplicationEvent.NEW_INSTANCE.getName(),new RunnableWithArgs(){
    @Override public void run(    @Nullable Object... args){
      Object instance=args[1];
      injectConfiguration(instance);
    }
  }
);
}","@PostConstruct private void initialize(){
  requireNonNull(application,""String_Node_Str"");
  application.getEventRouter().addEventListener(ApplicationEvent.NEW_INSTANCE.getName(),new RunnableWithArgs(){
    @Override public void run(    @Nullable Object... args){
      Object instance=args[1];
      injectConfiguration(instance);
    }
  }
);
}"
81141,"@Nonnull protected Map<String,Object> copyAndConfigureArguments(@Nonnull Map<String,Object> args,@Nonnull MVCGroupConfiguration configuration,@Nonnull String mvcId){
  Map<String,Object> argsCopy=CollectionUtils.<String,Object>map().e(""String_Node_Str"",getApplication()).e(""String_Node_Str"",configuration.getMvcType()).e(""String_Node_Str"",mvcId).e(""String_Node_Str"",configuration);
  if (args.containsKey(KEY_PARENT_GROUP)) {
    if (args.get(KEY_PARENT_GROUP) instanceof MVCGroup) {
      MVCGroup parentGroup=(MVCGroup)args.get(KEY_PARENT_GROUP);
      for (      Map.Entry<String,Object> e : parentGroup.getMembers().entrySet()) {
        args.put(""String_Node_Str"" + capitalize(e.getKey()),e.getValue());
      }
    }
  }
  argsCopy.putAll(args);
  return argsCopy;
}","@Nonnull protected Map<String,Object> copyAndConfigureArguments(@Nonnull Map<String,Object> args,@Nonnull MVCGroupConfiguration configuration,@Nonnull String mvcId){
  Map<String,Object> argsCopy=CollectionUtils.<String,Object>map().e(""String_Node_Str"",getApplication()).e(""String_Node_Str"",configuration.getMvcType()).e(""String_Node_Str"",mvcId).e(""String_Node_Str"",configuration);
  if (args.containsKey(KEY_PARENT_GROUP) && args.get(KEY_PARENT_GROUP) instanceof MVCGroup) {
    MVCGroup parentGroup=(MVCGroup)args.get(KEY_PARENT_GROUP);
    for (    Map.Entry<String,Object> e : parentGroup.getMembers().entrySet()) {
      args.put(""String_Node_Str"" + capitalize(e.getKey()),e.getValue());
    }
  }
  argsCopy.putAll(args);
  return argsCopy;
}"
81142,"/** 
 * Creates a copy of a FieldNode with a new name and, optionally, a new type.
 * @param newName The name for the new field node.
 * @param newType The new type of the field.  If null, the old FieldNode's type will be used.
 * @param f       The FieldNode to copy.
 * @return The new FieldNode.
 */
private FieldNode createFieldNodeCopy(String newName,ClassNode newType,FieldNode f){
  if (newType == null)   newType=f.getType();
  newType=newType.getPlainNodeReference();
  return new FieldNode(newName,f.getModifiers(),newType,f.getOwner(),f.getInitialValueExpression());
}","/** 
 * Creates a copy of a FieldNode with a new name and, optionally, a new type.
 * @param newName The name for the new field node.
 * @param newType The new type of the field.  If null, the old FieldNode's type will be used.
 * @param f       The FieldNode to copy.
 * @return The new FieldNode.
 */
private FieldNode createFieldNodeCopy(String newName,ClassNode newType,FieldNode f){
  if (newType == null) {
    newType=f.getType();
  }
  newType=newType.getPlainNodeReference();
  return new FieldNode(newName,f.getModifiers(),newType,f.getOwner(),f.getInitialValueExpression());
}"
81143,"/** 
 * Creates the body of a property access method that returns the JavaFX *Property instance.  If the original property was ""String firstName"" then the generated code would be: <p> if (firstNameProperty == null) { firstNameProperty = new javafx.beans.property.StringProperty() } return firstNameProperty
 * @param classNode        The declaring class to which the JavaFX property will be added
 * @param fxProperty       The new JavaFX property
 * @param fxFieldShortName
 * @param initExp          The initializer expression from the original Groovy property declaration
 */
private void createPropertyAccessor(ClassNode classNode,PropertyNode fxProperty,FieldNode fxFieldShortName,Expression initExp){
  FieldExpression fieldExpression=new FieldExpression(fxFieldShortName);
  ArgumentListExpression ctorArgs=initExp == null ? ArgumentListExpression.EMPTY_ARGUMENTS : new ArgumentListExpression(initExp);
  BlockStatement block=new BlockStatement();
  ClassNode fxType=fxProperty.getType();
  ClassNode implNode=PROPERTY_IMPL_MAP.get(fxType);
  if (implNode == null) {
    if (fxType.getTypeClass() == SIMPLE_LIST_PROPERTY_CNODE.getTypeClass()) {
      if (initExp != null) {
        if (initExp instanceof ListExpression || (initExp instanceof CastExpression && (((CastExpression)initExp).getType().equals(LIST_TYPE) || ((CastExpression)initExp).getType().declaresInterface(LIST_TYPE))) || (initExp instanceof ConstructorCallExpression && (((ConstructorCallExpression)initExp).getType().equals(LIST_TYPE) || ((ConstructorCallExpression)initExp).getType().declaresInterface(LIST_TYPE)))) {
          ctorArgs=new ArgumentListExpression(new MethodCallExpression(new ClassExpression(FXCOLLECTIONS_CNODE),""String_Node_Str"",ctorArgs));
        }
      }
      implNode=fxType;
    }
 else     if (fxType.getTypeClass() == SIMPLE_MAP_PROPERTY_CNODE.getTypeClass()) {
      if (initExp != null) {
        if (initExp instanceof MapExpression || (initExp instanceof CastExpression && (((CastExpression)initExp).getType().equals(MAP_TYPE) || ((CastExpression)initExp).getType().declaresInterface(MAP_TYPE))) || (initExp instanceof ConstructorCallExpression && (((ConstructorCallExpression)initExp).getType().equals(MAP_TYPE) || ((ConstructorCallExpression)initExp).getType().declaresInterface(MAP_TYPE)))) {
          ctorArgs=new ArgumentListExpression(new MethodCallExpression(new ClassExpression(FXCOLLECTIONS_CNODE),""String_Node_Str"",ctorArgs));
        }
      }
      implNode=fxType;
    }
 else     if (fxType.getTypeClass() == SIMPLE_SET_PROPERTY_CNODE.getTypeClass()) {
      if (initExp != null) {
        if ((initExp instanceof CastExpression && (((CastExpression)initExp).getType().equals(SET_TYPE) || ((CastExpression)initExp).getType().declaresInterface(SET_TYPE))) || (initExp instanceof ConstructorCallExpression && (((ConstructorCallExpression)initExp).getType().equals(SET_TYPE) || ((ConstructorCallExpression)initExp).getType().declaresInterface(SET_TYPE)))) {
          ctorArgs=new ArgumentListExpression(new MethodCallExpression(new ClassExpression(FXCOLLECTIONS_CNODE),""String_Node_Str"",ctorArgs));
        }
      }
      implNode=fxType;
    }
 else {
      implNode=makeClassSafe(SIMPLE_OBJECT_PROPERTY_CNODE);
      GenericsType[] origGenerics=fxProperty.getType().getGenericsTypes();
      implNode.setGenericsTypes(origGenerics);
    }
  }
  Expression initExpression=new ConstructorCallExpression(implNode,ctorArgs);
  IfStatement ifStmt=new IfStatement(new BooleanExpression(new BinaryExpression(fieldExpression,Token.newSymbol(Types.COMPARE_EQUAL,0,0),ConstantExpression.NULL)),new ExpressionStatement(new BinaryExpression(fieldExpression,Token.newSymbol(Types.EQUAL,0,0),initExpression)),EmptyStatement.INSTANCE);
  block.addStatement(ifStmt);
  block.addStatement(new ReturnStatement(fieldExpression));
  String getterName=getFXPropertyGetterName(fxProperty);
  MethodNode accessor=new MethodNode(getterName,fxProperty.getModifiers(),fxProperty.getType(),Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,block);
  accessor.setSynthetic(true);
  classNode.addMethod(accessor);
  block=new BlockStatement();
  VariableExpression thisExpression=VariableExpression.THIS_EXPRESSION;
  ArgumentListExpression emptyArguments=ArgumentListExpression.EMPTY_ARGUMENTS;
  MethodCallExpression getProperty=new MethodCallExpression(thisExpression,getterName,emptyArguments);
  block.addStatement(new ReturnStatement(getProperty));
  String javaFXPropertyFunction=fxProperty.getName();
  accessor=new MethodNode(javaFXPropertyFunction,fxProperty.getModifiers(),fxProperty.getType(),Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,block);
  accessor.setSynthetic(true);
  classNode.addMethod(accessor);
  block=new BlockStatement();
  thisExpression=VariableExpression.THIS_EXPRESSION;
  emptyArguments=ArgumentListExpression.EMPTY_ARGUMENTS;
  getProperty=new MethodCallExpression(thisExpression,getterName,emptyArguments);
  block.addStatement(new ReturnStatement(getProperty));
  javaFXPropertyFunction=fxProperty.getName().replace(""String_Node_Str"",""String_Node_Str"");
  accessor=new MethodNode(javaFXPropertyFunction,fxProperty.getModifiers(),fxProperty.getType(),Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,block);
  accessor.setSynthetic(true);
  classNode.addMethod(accessor);
}","/** 
 * Creates the body of a property access method that returns the JavaFX *Property instance.  If the original property was ""String firstName"" then the generated code would be: <p> if (firstNameProperty == null) { firstNameProperty = new javafx.beans.property.StringProperty() } return firstNameProperty
 * @param classNode        The declaring class to which the JavaFX property will be added
 * @param fxProperty       The new JavaFX property
 * @param fxFieldShortName
 * @param initExp          The initializer expression from the original Groovy property declaration
 */
private void createPropertyAccessor(ClassNode classNode,PropertyNode fxProperty,FieldNode fxFieldShortName,Expression initExp){
  FieldExpression fieldExpression=new FieldExpression(fxFieldShortName);
  ArgumentListExpression ctorArgs=initExp == null ? ArgumentListExpression.EMPTY_ARGUMENTS : new ArgumentListExpression(initExp);
  BlockStatement block=new BlockStatement();
  ClassNode fxType=fxProperty.getType();
  ClassNode implNode=PROPERTY_IMPL_MAP.get(fxType);
  if (implNode == null) {
    if (fxType.getTypeClass() == SIMPLE_LIST_PROPERTY_CNODE.getTypeClass()) {
      if (initExp != null && initExp instanceof ListExpression || (initExp instanceof CastExpression && (((CastExpression)initExp).getType().equals(LIST_TYPE) || ((CastExpression)initExp).getType().declaresInterface(LIST_TYPE))) || (initExp instanceof ConstructorCallExpression && (((ConstructorCallExpression)initExp).getType().equals(LIST_TYPE) || ((ConstructorCallExpression)initExp).getType().declaresInterface(LIST_TYPE)))) {
        ctorArgs=new ArgumentListExpression(new MethodCallExpression(new ClassExpression(FXCOLLECTIONS_CNODE),""String_Node_Str"",ctorArgs));
      }
      implNode=fxType;
    }
 else     if (fxType.getTypeClass() == SIMPLE_MAP_PROPERTY_CNODE.getTypeClass()) {
      if (initExp != null && initExp instanceof MapExpression || (initExp instanceof CastExpression && (((CastExpression)initExp).getType().equals(MAP_TYPE) || ((CastExpression)initExp).getType().declaresInterface(MAP_TYPE))) || (initExp instanceof ConstructorCallExpression && (((ConstructorCallExpression)initExp).getType().equals(MAP_TYPE) || ((ConstructorCallExpression)initExp).getType().declaresInterface(MAP_TYPE)))) {
        ctorArgs=new ArgumentListExpression(new MethodCallExpression(new ClassExpression(FXCOLLECTIONS_CNODE),""String_Node_Str"",ctorArgs));
      }
      implNode=fxType;
    }
 else     if (fxType.getTypeClass() == SIMPLE_SET_PROPERTY_CNODE.getTypeClass()) {
      if (initExp != null && (initExp instanceof CastExpression && (((CastExpression)initExp).getType().equals(SET_TYPE) || ((CastExpression)initExp).getType().declaresInterface(SET_TYPE))) || (initExp instanceof ConstructorCallExpression && (((ConstructorCallExpression)initExp).getType().equals(SET_TYPE) || ((ConstructorCallExpression)initExp).getType().declaresInterface(SET_TYPE)))) {
        ctorArgs=new ArgumentListExpression(new MethodCallExpression(new ClassExpression(FXCOLLECTIONS_CNODE),""String_Node_Str"",ctorArgs));
      }
      implNode=fxType;
    }
 else {
      implNode=makeClassSafe(SIMPLE_OBJECT_PROPERTY_CNODE);
      GenericsType[] origGenerics=fxProperty.getType().getGenericsTypes();
      implNode.setGenericsTypes(origGenerics);
    }
  }
  Expression initExpression=new ConstructorCallExpression(implNode,ctorArgs);
  IfStatement ifStmt=new IfStatement(new BooleanExpression(new BinaryExpression(fieldExpression,Token.newSymbol(Types.COMPARE_EQUAL,0,0),ConstantExpression.NULL)),new ExpressionStatement(new BinaryExpression(fieldExpression,Token.newSymbol(Types.EQUAL,0,0),initExpression)),EmptyStatement.INSTANCE);
  block.addStatement(ifStmt);
  block.addStatement(new ReturnStatement(fieldExpression));
  String getterName=getFXPropertyGetterName(fxProperty);
  MethodNode accessor=new MethodNode(getterName,fxProperty.getModifiers(),fxProperty.getType(),Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,block);
  accessor.setSynthetic(true);
  classNode.addMethod(accessor);
  block=new BlockStatement();
  VariableExpression thisExpression=VariableExpression.THIS_EXPRESSION;
  ArgumentListExpression emptyArguments=ArgumentListExpression.EMPTY_ARGUMENTS;
  MethodCallExpression getProperty=new MethodCallExpression(thisExpression,getterName,emptyArguments);
  block.addStatement(new ReturnStatement(getProperty));
  String javaFXPropertyFunction=fxProperty.getName();
  accessor=new MethodNode(javaFXPropertyFunction,fxProperty.getModifiers(),fxProperty.getType(),Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,block);
  accessor.setSynthetic(true);
  classNode.addMethod(accessor);
  block=new BlockStatement();
  thisExpression=VariableExpression.THIS_EXPRESSION;
  emptyArguments=ArgumentListExpression.EMPTY_ARGUMENTS;
  getProperty=new MethodCallExpression(thisExpression,getterName,emptyArguments);
  block.addStatement(new ReturnStatement(getProperty));
  javaFXPropertyFunction=fxProperty.getName().replace(""String_Node_Str"",""String_Node_Str"");
  accessor=new MethodNode(javaFXPropertyFunction,fxProperty.getModifiers(),fxProperty.getType(),Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,block);
  accessor.setSynthetic(true);
  classNode.addMethod(accessor);
}"
81144,"/** 
 * Creates a setter method and adds it to the declaring class.  The setter has the form: <p> void <setter>(<type> fieldName)
 * @param declaringClass The class to which the method is added
 * @param propertyNode   The property node being accessed by this setter
 * @param setterName     The name of the setter method
 * @param setterBlock    The code body of the method
 */
protected void createSetterMethod(ClassNode declaringClass,PropertyNode propertyNode,String setterName,Statement setterBlock,List<AnnotationNode> annotations){
  Parameter[] setterParameterTypes={new Parameter(propertyNode.getType(),""String_Node_Str"")};
  int mod=propertyNode.getModifiers() | Opcodes.ACC_FINAL;
  MethodNode setter=new MethodNode(setterName,mod,ClassHelper.VOID_TYPE,setterParameterTypes,ClassNode.EMPTY_ARRAY,setterBlock);
  if (annotations != null)   setter.addAnnotations(annotations);
  setter.setSynthetic(true);
  declaringClass.addMethod(setter);
}","/** 
 * Creates a setter method and adds it to the declaring class.  The setter has the form: <p> void <setter>(<type> fieldName)
 * @param declaringClass The class to which the method is added
 * @param propertyNode   The property node being accessed by this setter
 * @param setterName     The name of the setter method
 * @param setterBlock    The code body of the method
 */
protected void createSetterMethod(ClassNode declaringClass,PropertyNode propertyNode,String setterName,Statement setterBlock,List<AnnotationNode> annotations){
  Parameter[] setterParameterTypes={new Parameter(propertyNode.getType(),""String_Node_Str"")};
  int mod=propertyNode.getModifiers() | Opcodes.ACC_FINAL;
  MethodNode setter=new MethodNode(setterName,mod,ClassHelper.VOID_TYPE,setterParameterTypes,ClassNode.EMPTY_ARRAY,setterBlock);
  if (annotations != null) {
    setter.addAnnotations(annotations);
  }
  setter.setSynthetic(true);
  declaringClass.addMethod(setter);
}"
81145,"/** 
 * Creates a getter method and adds it to the declaring class.
 * @param declaringClass The class to which the method is added
 * @param propertyNode   The property node being accessed by this getter
 * @param getterName     The name of the getter method
 * @param getterBlock    The code body of the method
 */
protected void createGetterMethod(ClassNode declaringClass,PropertyNode propertyNode,String getterName,Statement getterBlock,List<AnnotationNode> annotations){
  int mod=propertyNode.getModifiers() | Opcodes.ACC_FINAL;
  MethodNode getter=new MethodNode(getterName,mod,propertyNode.getType(),Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,getterBlock);
  if (annotations != null)   getter.addAnnotations(annotations);
  getter.setSynthetic(true);
  declaringClass.addMethod(getter);
}","/** 
 * Creates a getter method and adds it to the declaring class.
 * @param declaringClass The class to which the method is added
 * @param propertyNode   The property node being accessed by this getter
 * @param getterName     The name of the getter method
 * @param getterBlock    The code body of the method
 */
protected void createGetterMethod(ClassNode declaringClass,PropertyNode propertyNode,String getterName,Statement getterBlock,List<AnnotationNode> annotations){
  int mod=propertyNode.getModifiers() | Opcodes.ACC_FINAL;
  MethodNode getter=new MethodNode(getterName,mod,propertyNode.getType(),Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,getterBlock);
  if (annotations != null) {
    getter.addAnnotations(annotations);
  }
  getter.setSynthetic(true);
  declaringClass.addMethod(getter);
}"
81146,"/** 
 * Creates the JavaFX property and three methods for accessing the property and a pair of getter/setter methods for accessing the original (now synthetic) Groovy property.  For example, if the original property was ""String firstName"" then these three methods would be generated: <p> public String getFirstName() public void setFirstName(String value) public StringProperty firstNameProperty()
 * @param classNode    The declaring class in which the property will appear
 * @param originalProp The original Groovy property
 */
private void createPropertyGetterSetter(ClassNode classNode,PropertyNode originalProp){
  Expression initExp=originalProp.getInitialExpression();
  originalProp.getField().setInitialValueExpression(null);
  PropertyNode fxProperty=createFXProperty(originalProp);
  List<AnnotationNode> methodAnnotations=new ArrayList<>();
  List<AnnotationNode> fieldAnnotations=new ArrayList<>();
  for (  AnnotationNode annotation : originalProp.getField().getAnnotations()) {
    if (FXOBSERVABLE_CNODE.equals(annotation.getClassNode()))     continue;
    Class annotationClass=annotation.getClassNode().getTypeClass();
    Target target=(Target)annotationClass.getAnnotation(Target.class);
    if (isTargetAllowed(target,ElementType.METHOD)) {
      methodAnnotations.add(annotation);
    }
 else     if (isTargetAllowed(target,ElementType.FIELD)) {
      fieldAnnotations.add(annotation);
    }
  }
  String getterName=""String_Node_Str"" + MetaClassHelper.capitalize(originalProp.getName());
  if (classNode.getMethods(getterName).isEmpty()) {
    Statement getterBlock=createGetterStatement(createFXProperty(originalProp));
    createGetterMethod(classNode,originalProp,getterName,getterBlock,methodAnnotations);
    methodAnnotations=null;
  }
 else {
    wrapGetterMethod(classNode,originalProp.getName(),methodAnnotations);
    methodAnnotations=null;
  }
  String setterName=""String_Node_Str"" + MetaClassHelper.capitalize(originalProp.getName());
  if (classNode.getMethods(setterName).isEmpty()) {
    Statement setterBlock=createSetterStatement(createFXProperty(originalProp));
    createSetterMethod(classNode,originalProp,setterName,setterBlock,methodAnnotations);
  }
 else {
    wrapSetterMethod(classNode,originalProp.getName(),methodAnnotations);
  }
  FieldNode fxFieldShortName=createFieldNodeCopy(originalProp.getName() + ""String_Node_Str"",null,fxProperty.getField());
  createPropertyAccessor(classNode,createFXProperty(originalProp),fxFieldShortName,initExp);
  classNode.removeField(originalProp.getName());
  classNode.addField(fxFieldShortName);
  fxFieldShortName.addAnnotations(fieldAnnotations);
}","/** 
 * Creates the JavaFX property and three methods for accessing the property and a pair of getter/setter methods for accessing the original (now synthetic) Groovy property.  For example, if the original property was ""String firstName"" then these three methods would be generated: <p> public String getFirstName() public void setFirstName(String value) public StringProperty firstNameProperty()
 * @param classNode    The declaring class in which the property will appear
 * @param originalProp The original Groovy property
 */
private void createPropertyGetterSetter(ClassNode classNode,PropertyNode originalProp){
  Expression initExp=originalProp.getInitialExpression();
  originalProp.getField().setInitialValueExpression(null);
  PropertyNode fxProperty=createFXProperty(originalProp);
  List<AnnotationNode> methodAnnotations=new ArrayList<>();
  List<AnnotationNode> fieldAnnotations=new ArrayList<>();
  for (  AnnotationNode annotation : originalProp.getField().getAnnotations()) {
    if (FXOBSERVABLE_CNODE.equals(annotation.getClassNode())) {
      continue;
    }
    Class annotationClass=annotation.getClassNode().getTypeClass();
    Target target=(Target)annotationClass.getAnnotation(Target.class);
    if (isTargetAllowed(target,ElementType.METHOD)) {
      methodAnnotations.add(annotation);
    }
 else     if (isTargetAllowed(target,ElementType.FIELD)) {
      fieldAnnotations.add(annotation);
    }
  }
  String getterName=""String_Node_Str"" + MetaClassHelper.capitalize(originalProp.getName());
  if (classNode.getMethods(getterName).isEmpty()) {
    Statement getterBlock=createGetterStatement(createFXProperty(originalProp));
    createGetterMethod(classNode,originalProp,getterName,getterBlock,methodAnnotations);
    methodAnnotations=null;
  }
 else {
    wrapGetterMethod(classNode,originalProp.getName(),methodAnnotations);
    methodAnnotations=null;
  }
  String setterName=""String_Node_Str"" + MetaClassHelper.capitalize(originalProp.getName());
  if (classNode.getMethods(setterName).isEmpty()) {
    Statement setterBlock=createSetterStatement(createFXProperty(originalProp));
    createSetterMethod(classNode,originalProp,setterName,setterBlock,methodAnnotations);
  }
 else {
    wrapSetterMethod(classNode,originalProp.getName(),methodAnnotations);
  }
  FieldNode fxFieldShortName=createFieldNodeCopy(originalProp.getName() + ""String_Node_Str"",null,fxProperty.getField());
  createPropertyAccessor(classNode,createFXProperty(originalProp),fxFieldShortName,initExp);
  classNode.removeField(originalProp.getName());
  classNode.addField(fxFieldShortName);
  fxFieldShortName.addAnnotations(fieldAnnotations);
}"
81147,"public void handleClose(@Nonnull Window widget){
  if (getApplication().getPhase() == ApplicationPhase.SHUTDOWN) {
    return;
  }
  List<Window> visibleWindows=new ArrayList<>();
  for (  Window window : getWindows()) {
    if (window.isShowing()) {
      visibleWindows.add(window);
    }
  }
  if (isAutoShutdown() && visibleWindows.size() <= 1 && visibleWindows.contains(widget)) {
    if (!getApplication().shutdown())     show(widget);
  }
}","public void handleClose(@Nonnull Window widget){
  if (getApplication().getPhase() == ApplicationPhase.SHUTDOWN) {
    return;
  }
  List<Window> visibleWindows=new ArrayList<>();
  for (  Window window : getWindows()) {
    if (window.isShowing()) {
      visibleWindows.add(window);
    }
  }
  if (isAutoShutdown() && visibleWindows.size() <= 1 && visibleWindows.contains(widget) && !getApplication().shutdown()) {
    show(widget);
  }
}"
81148,"public void handleClose(@Nonnull Window widget){
  if (getApplication().getPhase() == ApplicationPhase.SHUTDOWN) {
    return;
  }
  int visibleWindows=getWindows().size();
  if (visibleWindows <= 1 && isAutoShutdown()) {
    if (!getApplication().shutdown())     show(widget);
  }
}","public void handleClose(@Nonnull Window widget){
  if (getApplication().getPhase() == ApplicationPhase.SHUTDOWN) {
    return;
  }
  int visibleWindows=getWindows().size();
  if (visibleWindows <= 1 && isAutoShutdown() && !getApplication().shutdown()) {
    show(widget);
  }
}"
81149,"public void handleClose(@Nonnull Window widget){
  if (getApplication().getPhase() == ApplicationPhase.SHUTDOWN) {
    return;
  }
  int visibleWindows=0;
  for (  Window window : getWindows()) {
    if (window.isShowing()) {
      visibleWindows++;
    }
  }
  if (visibleWindows <= 1 && isAutoShutdown()) {
    if (!getApplication().shutdown())     show(widget);
  }
}","public void handleClose(@Nonnull Window widget){
  if (getApplication().getPhase() == ApplicationPhase.SHUTDOWN) {
    return;
  }
  int visibleWindows=0;
  for (  Window window : getWindows()) {
    if (window.isShowing()) {
      visibleWindows++;
    }
  }
  if (visibleWindows <= 1 && isAutoShutdown() && !getApplication().shutdown()) {
    show(widget);
  }
}"
81150,"@SuppressWarnings(""String_Node_Str"") private void handleAsString(String str){
  try {
    super.setValueInternal(isBlank(str) ? null : Enum.valueOf(enumType,str));
  }
 catch (  Exception e) {
    throw illegalValue(str,enumType,e);
  }
}","@SuppressWarnings(""String_Node_Str"") private void handleAsString(String str){
  if (isBlank(str)) {
    super.setValueInternal(null);
    return;
  }
  try {
    super.setValueInternal(isBlank(str) ? null : Enum.valueOf(enumType,str));
  }
 catch (  Exception e) {
    throw illegalValue(str,enumType,e);
  }
}"
81151,"private void handleAsString(String str){
  if (isBlank(str)) {
    throw illegalValue(str,File.class);
  }
  super.setValueInternal(new File(str));
}","private void handleAsString(String str){
  if (isBlank(str)) {
    super.setValueInternal(null);
    return;
  }
  super.setValueInternal(new File(str));
}"
81152,"private void handleAsString(String str){
  try {
    super.setValueInternal(new URI(str));
  }
 catch (  URISyntaxException e) {
    throw illegalValue(str,URI.class,e);
  }
}","private void handleAsString(String str){
  if (isBlank(str)) {
    super.setValueInternal(null);
    return;
  }
  try {
    super.setValueInternal(new URI(str));
  }
 catch (  URISyntaxException e) {
    throw illegalValue(str,URI.class,e);
  }
}"
81153,"private void handleAsString(String str){
  try {
    super.setValueInternal(new URL(str));
  }
 catch (  MalformedURLException e) {
    throw illegalValue(str,URL.class,e);
  }
}","private void handleAsString(String str){
  if (isBlank(str)) {
    super.setValueInternal(null);
    return;
  }
  try {
    super.setValueInternal(new URL(str));
  }
 catch (  MalformedURLException e) {
    throw illegalValue(str,URL.class,e);
  }
}"
81154,"protected void doSetConfigProperties(String name,GriffonService service){
  if (LOG.isInfoEnabled()) {
    LOG.info(""String_Node_Str"" + name + ""String_Node_Str"");
  }
  name=name.substring(0,name.length() - TRAILING.length());
  ConfigObject config=(ConfigObject)ConfigUtils.getConfigValue(getApp().getConfig(),""String_Node_Str"" + name);
  InvokerHelper.setProperties(service,config);
}","protected void doSetConfigProperties(String name,GriffonService service){
  if (LOG.isInfoEnabled()) {
    LOG.info(""String_Node_Str"" + name + ""String_Node_Str"");
  }
  name=name.substring(0,name.length() - TRAILING.length());
  ConfigObject config=(ConfigObject)ConfigUtils.getConfigValue(getApp().getConfig(),""String_Node_Str"" + name);
  if (config != null && !config.isEmpty())   InvokerHelper.setProperties(service,config);
}"
81155,"/** 
 * Adds the necessary field and methods to support event firing. <p/> Adds a new field: <code>protected final org.codehaus.griffon.runtime.core.EventRouter this$eventRouter = new org.codehaus.griffon.runtime.core.EventRouter()</code> <p/> Also adds support methods: <code>public void addEventListener(Object)</code><br/> <code>public void addEventListener(String, Closure)</code><br/> <code>public void addEventListener(String, RunnableWithArgs)</code><br/> <code>public void removeEventListener(Object)</code><br/> <code>public void removeEventListener(String, Closure)</code><br/> <code>public void removeEventListener(String, RunnableWithArgs)</code><br/> <code>public void publishEvent(String,List = [])</code><br/> <code>public void publishEventOutsideUI(String,List = [])</code><br/> <code>public void publishEventAsync(String,List = [])</code><br/> <code>public boolean isEventPublishingEnabled()</code><br/> <code>public void setEventPublishingEnabled(boolean)</code><br/>
 * @param declaringClass the class to which we add the support field and methods
 */
protected static void addEventRouter(ClassNode declaringClass){
  injectInterface(declaringClass,EVENT_HANDLER_CLASS);
  FieldNode erField=declaringClass.addField(""String_Node_Str"",ACC_FINAL | ACC_PRIVATE | ACC_SYNTHETIC,EVENT_ROUTER_CLASS,ctor(EVENT_ROUTER_CLASS,NO_ARGS));
  injectMethod(declaringClass,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.DYNAMIC_TYPE,LISTENER)),ClassNode.EMPTY_ARRAY,stmnt(call(field(erField),""String_Node_Str"",vars(LISTENER)))));
  injectMethod(declaringClass,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,NAME),param(newClass(ClassHelper.CLOSURE_TYPE),LISTENER)),ClassNode.EMPTY_ARRAY,stmnt(call(field(erField),""String_Node_Str"",vars(NAME,LISTENER)))));
  injectMethod(declaringClass,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,NAME),param(RUNNABLE_WITH_ARGS_CLASS,LISTENER)),ClassNode.EMPTY_ARRAY,stmnt(call(field(erField),""String_Node_Str"",vars(NAME,LISTENER)))));
  injectMethod(declaringClass,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.DYNAMIC_TYPE,LISTENER)),ClassNode.EMPTY_ARRAY,stmnt(call(field(erField),""String_Node_Str"",vars(LISTENER)))));
  injectMethod(declaringClass,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,NAME),param(newClass(ClassHelper.CLOSURE_TYPE),LISTENER)),ClassNode.EMPTY_ARRAY,stmnt(call(field(erField),""String_Node_Str"",vars(NAME,LISTENER)))));
  injectMethod(declaringClass,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,NAME),param(RUNNABLE_WITH_ARGS_CLASS,LISTENER)),ClassNode.EMPTY_ARRAY,stmnt(call(field(erField),""String_Node_Str"",vars(NAME,LISTENER)))));
  injectMethod(declaringClass,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,NAME),param(newClass(ClassHelper.LIST_TYPE),ARGS,new ListExpression())),ClassNode.EMPTY_ARRAY,stmnt(call(field(erField),""String_Node_Str"",vars(NAME,ARGS)))));
  injectMethod(declaringClass,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,NAME),param(newClass(ClassHelper.LIST_TYPE),ARGS,new ListExpression())),ClassNode.EMPTY_ARRAY,stmnt(call(field(erField),""String_Node_Str"",vars(NAME,ARGS)))));
  injectMethod(declaringClass,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,NAME),param(newClass(ClassHelper.LIST_TYPE),ARGS,new ListExpression())),ClassNode.EMPTY_ARRAY,stmnt(call(field(erField),""String_Node_Str"",vars(NAME,ARGS)))));
  injectMethod(declaringClass,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,NAME),param(newClass(ClassHelper.LIST_TYPE),ARGS,new ListExpression())),ClassNode.EMPTY_ARRAY,stmnt(call(field(erField),""String_Node_Str"",vars(NAME,ARGS)))));
  injectMethod(declaringClass,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.boolean_TYPE,params(),ClassNode.EMPTY_ARRAY,returns(call(field(erField),""String_Node_Str"",NO_ARGS))));
  injectMethod(declaringClass,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.boolean_TYPE,ENABLED)),ClassNode.EMPTY_ARRAY,stmnt(call(field(erField),""String_Node_Str"",vars(ENABLED)))));
}","/** 
 * Adds the necessary field and methods to support event firing. <p/> Adds a new field: <code>protected final org.codehaus.griffon.runtime.core.EventRouter this$eventRouter = new org.codehaus.griffon.runtime.core.EventRouter()</code> <p/> Also adds support methods: <code>public void addEventListener(Object)</code><br/> <code>public void addEventListener(String, Closure)</code><br/> <code>public void addEventListener(String, RunnableWithArgs)</code><br/> <code>public void removeEventListener(Object)</code><br/> <code>public void removeEventListener(String, Closure)</code><br/> <code>public void removeEventListener(String, RunnableWithArgs)</code><br/> <code>public void publishEvent(String,List = [])</code><br/> <code>public void publishEventOutsideUI(String,List = [])</code><br/> <code>public void publishEventAsync(String,List = [])</code><br/> <code>public boolean isEventPublishingEnabled()</code><br/> <code>public void setEventPublishingEnabled(boolean)</code><br/>
 * @param declaringClass the class to which we add the support field and methods
 */
protected static void addEventRouter(ClassNode declaringClass){
  injectInterface(declaringClass,EVENT_HANDLER_CLASS);
  FieldNode erField=declaringClass.addField(""String_Node_Str"",ACC_FINAL | ACC_PRIVATE | ACC_SYNTHETIC,EVENT_ROUTER_CLASS,ctor(EVENT_ROUTER_CLASS,NO_ARGS));
  injectMethod(declaringClass,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.DYNAMIC_TYPE,LISTENER)),ClassNode.EMPTY_ARRAY,stmnt(call(field(erField),""String_Node_Str"",vars(LISTENER)))));
  injectMethod(declaringClass,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,NAME),param(makeClassSafe(ClassHelper.CLOSURE_TYPE),LISTENER)),ClassNode.EMPTY_ARRAY,stmnt(call(field(erField),""String_Node_Str"",vars(NAME,LISTENER)))));
  injectMethod(declaringClass,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,NAME),param(RUNNABLE_WITH_ARGS_CLASS,LISTENER)),ClassNode.EMPTY_ARRAY,stmnt(call(field(erField),""String_Node_Str"",vars(NAME,LISTENER)))));
  injectMethod(declaringClass,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.DYNAMIC_TYPE,LISTENER)),ClassNode.EMPTY_ARRAY,stmnt(call(field(erField),""String_Node_Str"",vars(LISTENER)))));
  injectMethod(declaringClass,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,NAME),param(makeClassSafe(ClassHelper.CLOSURE_TYPE),LISTENER)),ClassNode.EMPTY_ARRAY,stmnt(call(field(erField),""String_Node_Str"",vars(NAME,LISTENER)))));
  injectMethod(declaringClass,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,NAME),param(RUNNABLE_WITH_ARGS_CLASS,LISTENER)),ClassNode.EMPTY_ARRAY,stmnt(call(field(erField),""String_Node_Str"",vars(NAME,LISTENER)))));
  injectMethod(declaringClass,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,NAME),param(makeClassSafe(ClassHelper.LIST_TYPE),ARGS,new ListExpression())),ClassNode.EMPTY_ARRAY,stmnt(call(field(erField),""String_Node_Str"",vars(NAME,ARGS)))));
  injectMethod(declaringClass,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,NAME),param(makeClassSafe(ClassHelper.LIST_TYPE),ARGS,new ListExpression())),ClassNode.EMPTY_ARRAY,stmnt(call(field(erField),""String_Node_Str"",vars(NAME,ARGS)))));
  injectMethod(declaringClass,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,NAME),param(makeClassSafe(ClassHelper.LIST_TYPE),ARGS,new ListExpression())),ClassNode.EMPTY_ARRAY,stmnt(call(field(erField),""String_Node_Str"",vars(NAME,ARGS)))));
  injectMethod(declaringClass,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,NAME),param(makeClassSafe(ClassHelper.LIST_TYPE),ARGS,new ListExpression())),ClassNode.EMPTY_ARRAY,stmnt(call(field(erField),""String_Node_Str"",vars(NAME,ARGS)))));
  injectMethod(declaringClass,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.boolean_TYPE,params(),ClassNode.EMPTY_ARRAY,returns(call(field(erField),""String_Node_Str"",NO_ARGS))));
  injectMethod(declaringClass,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.boolean_TYPE,ENABLED)),ClassNode.EMPTY_ARRAY,stmnt(call(field(erField),""String_Node_Str"",vars(ENABLED)))));
}"
81156,"public static ClassExpression classx(Class clazz){
  return classx(ClassHelper.makeWithoutCaching(clazz));
}","public static ClassExpression classx(Class clazz){
  return classx(ClassHelper.makeWithoutCaching(clazz).getPlainNodeReference());
}"
81157,"public static void apply(ClassNode classNode){
  injectInterface(classNode,MVC_HANDLER_TYPE);
  injectMethod(classNode,new MethodNode(BUILD_MVC_GROUP,ACC_PUBLIC,MVCGROUP_CLASS,params(param(ClassHelper.STRING_TYPE,MVC_TYPE)),ClassNode.EMPTY_ARRAY,returns(call(mvcGroupManagerInstance(),BUILD_MVC_GROUP,args(var(MVC_TYPE),ConstantExpression.NULL,emptyMap())))));
  injectMethod(classNode,new MethodNode(BUILD_MVC_GROUP,ACC_PUBLIC,MVCGROUP_CLASS,params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(ClassHelper.STRING_TYPE,MVC_NAME)),ClassNode.EMPTY_ARRAY,returns(call(mvcGroupManagerInstance(),BUILD_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),emptyMap())))));
  injectMethod(classNode,new MethodNode(BUILD_MVC_GROUP,ACC_PUBLIC,MVCGROUP_CLASS,params(param(newClass(ClassHelper.MAP_TYPE),ARGS),param(ClassHelper.STRING_TYPE,MVC_TYPE)),ClassNode.EMPTY_ARRAY,returns(call(mvcGroupManagerInstance(),BUILD_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),var(ARGS))))));
  injectMethod(classNode,new MethodNode(BUILD_MVC_GROUP,ACC_PUBLIC,MVCGROUP_CLASS,params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(newClass(ClassHelper.MAP_TYPE),ARGS)),ClassNode.EMPTY_ARRAY,returns(call(mvcGroupManagerInstance(),BUILD_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),var(ARGS))))));
  injectMethod(classNode,new MethodNode(BUILD_MVC_GROUP,ACC_PUBLIC,MVCGROUP_CLASS,params(param(newClass(ClassHelper.MAP_TYPE),ARGS),param(ClassHelper.STRING_TYPE,MVC_TYPE),param(ClassHelper.STRING_TYPE,MVC_NAME)),ClassNode.EMPTY_ARRAY,returns(call(mvcGroupManagerInstance(),BUILD_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),var(ARGS))))));
  injectMethod(classNode,new MethodNode(BUILD_MVC_GROUP,ACC_PUBLIC,MVCGROUP_CLASS,params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(ClassHelper.STRING_TYPE,MVC_NAME),param(newClass(ClassHelper.MAP_TYPE),ARGS)),ClassNode.EMPTY_ARRAY,returns(call(mvcGroupManagerInstance(),BUILD_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),var(ARGS))))));
  injectMethod(classNode,new MethodNode(CREATE_MVC_GROUP,ACC_PUBLIC,newClass(ClassHelper.LIST_TYPE),params(param(ClassHelper.STRING_TYPE,MVC_TYPE)),ClassNode.EMPTY_ARRAY,returns(call(mvcGroupManagerInstance(),CREATE_MVC_GROUP,args(var(MVC_TYPE),ConstantExpression.NULL,emptyMap())))));
  injectMethod(classNode,new MethodNode(CREATE_MVC_GROUP,ACC_PUBLIC,newClass(ClassHelper.LIST_TYPE),params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(ClassHelper.STRING_TYPE,MVC_NAME)),ClassNode.EMPTY_ARRAY,returns(call(mvcGroupManagerInstance(),CREATE_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),emptyMap())))));
  injectMethod(classNode,new MethodNode(CREATE_MVC_GROUP,ACC_PUBLIC,newClass(ClassHelper.LIST_TYPE),params(param(newClass(ClassHelper.MAP_TYPE),ARGS),param(ClassHelper.STRING_TYPE,MVC_TYPE)),ClassNode.EMPTY_ARRAY,returns(call(mvcGroupManagerInstance(),CREATE_MVC_GROUP,args(var(MVC_TYPE),ConstantExpression.NULL,var(ARGS))))));
  injectMethod(classNode,new MethodNode(CREATE_MVC_GROUP,ACC_PUBLIC,newClass(ClassHelper.LIST_TYPE),params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(newClass(ClassHelper.MAP_TYPE),ARGS)),ClassNode.EMPTY_ARRAY,returns(call(mvcGroupManagerInstance(),CREATE_MVC_GROUP,args(var(MVC_TYPE),ConstantExpression.NULL,var(ARGS))))));
  injectMethod(classNode,new MethodNode(CREATE_MVC_GROUP,ACC_PUBLIC,newClass(ClassHelper.LIST_TYPE),params(param(newClass(ClassHelper.MAP_TYPE),ARGS),param(ClassHelper.STRING_TYPE,MVC_TYPE),param(ClassHelper.STRING_TYPE,MVC_NAME)),ClassNode.EMPTY_ARRAY,returns(call(mvcGroupManagerInstance(),CREATE_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),var(ARGS))))));
  injectMethod(classNode,new MethodNode(CREATE_MVC_GROUP,ACC_PUBLIC,newClass(ClassHelper.LIST_TYPE),params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(ClassHelper.STRING_TYPE,MVC_NAME),param(newClass(ClassHelper.MAP_TYPE),ARGS)),ClassNode.EMPTY_ARRAY,returns(call(mvcGroupManagerInstance(),CREATE_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),var(ARGS))))));
  injectMethod(classNode,new MethodNode(DESTROY_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,MVC_NAME)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),DESTROY_MVC_GROUP,args(var(MVC_NAME))))));
  injectMethod(classNode,new MethodNode(WITH_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(newClass(ClassHelper.CLOSURE_TYPE),HANDLER)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),WITH_MVC_GROUP,args(var(MVC_TYPE),ConstantExpression.NULL,emptyMap(),var(HANDLER))))));
  injectMethod(classNode,new MethodNode(WITH_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(ClassHelper.STRING_TYPE,MVC_NAME),param(newClass(ClassHelper.CLOSURE_TYPE),HANDLER)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),WITH_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),emptyMap(),var(HANDLER))))));
  injectMethod(classNode,new MethodNode(WITH_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(newClass(ClassHelper.MAP_TYPE),ARGS),param(newClass(ClassHelper.CLOSURE_TYPE),HANDLER)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),WITH_MVC_GROUP,args(var(MVC_TYPE),ConstantExpression.NULL,var(ARGS),var(HANDLER))))));
  injectMethod(classNode,new MethodNode(WITH_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(newClass(ClassHelper.MAP_TYPE),ARGS),param(ClassHelper.STRING_TYPE,MVC_TYPE),param(newClass(ClassHelper.CLOSURE_TYPE),HANDLER)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),WITH_MVC_GROUP,args(var(MVC_TYPE),ConstantExpression.NULL,var(ARGS),var(HANDLER))))));
  injectMethod(classNode,new MethodNode(WITH_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(ClassHelper.STRING_TYPE,MVC_NAME),param(newClass(ClassHelper.MAP_TYPE),ARGS),param(newClass(ClassHelper.CLOSURE_TYPE),HANDLER)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),WITH_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),var(ARGS),var(HANDLER))))));
  injectMethod(classNode,new MethodNode(WITH_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(newClass(ClassHelper.MAP_TYPE),ARGS),param(ClassHelper.STRING_TYPE,MVC_TYPE),param(ClassHelper.STRING_TYPE,MVC_NAME),param(newClass(ClassHelper.CLOSURE_TYPE),HANDLER)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),WITH_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),var(ARGS),var(HANDLER))))));
  injectMethod(classNode,new MethodNode(WITH_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(newClass(MVCCLOSURE_CLASS),HANDLER)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),WITH_MVC_GROUP,args(var(MVC_TYPE),ConstantExpression.NULL,emptyMap(),var(HANDLER))))));
  injectMethod(classNode,new MethodNode(WITH_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(ClassHelper.STRING_TYPE,MVC_NAME),param(newClass(MVCCLOSURE_CLASS),HANDLER)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),WITH_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),emptyMap(),var(HANDLER))))));
  injectMethod(classNode,new MethodNode(WITH_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(newClass(ClassHelper.MAP_TYPE),ARGS),param(newClass(MVCCLOSURE_CLASS),HANDLER)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),WITH_MVC_GROUP,args(var(MVC_TYPE),ConstantExpression.NULL,var(ARGS),var(HANDLER))))));
  injectMethod(classNode,new MethodNode(WITH_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(newClass(ClassHelper.MAP_TYPE),ARGS),param(ClassHelper.STRING_TYPE,MVC_TYPE),param(newClass(MVCCLOSURE_CLASS),HANDLER)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),WITH_MVC_GROUP,args(var(MVC_TYPE),ConstantExpression.NULL,var(ARGS),var(HANDLER))))));
  injectMethod(classNode,new MethodNode(WITH_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(ClassHelper.STRING_TYPE,MVC_NAME),param(newClass(ClassHelper.MAP_TYPE),ARGS),param(newClass(MVCCLOSURE_CLASS),HANDLER)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),WITH_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),var(ARGS),var(HANDLER))))));
  injectMethod(classNode,new MethodNode(WITH_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(newClass(ClassHelper.MAP_TYPE),ARGS),param(ClassHelper.STRING_TYPE,MVC_TYPE),param(ClassHelper.STRING_TYPE,MVC_NAME),param(newClass(MVCCLOSURE_CLASS),HANDLER)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),WITH_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),var(ARGS),var(HANDLER))))));
}","public static void apply(ClassNode classNode){
  injectInterface(classNode,MVC_HANDLER_TYPE);
  injectMethod(classNode,new MethodNode(BUILD_MVC_GROUP,ACC_PUBLIC,MVCGROUP_CLASS,params(param(ClassHelper.STRING_TYPE,MVC_TYPE)),ClassNode.EMPTY_ARRAY,returns(call(mvcGroupManagerInstance(),BUILD_MVC_GROUP,args(var(MVC_TYPE),ConstantExpression.NULL,emptyMap())))));
  injectMethod(classNode,new MethodNode(BUILD_MVC_GROUP,ACC_PUBLIC,MVCGROUP_CLASS,params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(ClassHelper.STRING_TYPE,MVC_NAME)),ClassNode.EMPTY_ARRAY,returns(call(mvcGroupManagerInstance(),BUILD_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),emptyMap())))));
  injectMethod(classNode,new MethodNode(BUILD_MVC_GROUP,ACC_PUBLIC,MVCGROUP_CLASS,params(param(makeClassSafe(ClassHelper.MAP_TYPE),ARGS),param(ClassHelper.STRING_TYPE,MVC_TYPE)),ClassNode.EMPTY_ARRAY,returns(call(mvcGroupManagerInstance(),BUILD_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),var(ARGS))))));
  injectMethod(classNode,new MethodNode(BUILD_MVC_GROUP,ACC_PUBLIC,MVCGROUP_CLASS,params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(makeClassSafe(ClassHelper.MAP_TYPE),ARGS)),ClassNode.EMPTY_ARRAY,returns(call(mvcGroupManagerInstance(),BUILD_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),var(ARGS))))));
  injectMethod(classNode,new MethodNode(BUILD_MVC_GROUP,ACC_PUBLIC,MVCGROUP_CLASS,params(param(makeClassSafe(ClassHelper.MAP_TYPE),ARGS),param(ClassHelper.STRING_TYPE,MVC_TYPE),param(ClassHelper.STRING_TYPE,MVC_NAME)),ClassNode.EMPTY_ARRAY,returns(call(mvcGroupManagerInstance(),BUILD_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),var(ARGS))))));
  injectMethod(classNode,new MethodNode(BUILD_MVC_GROUP,ACC_PUBLIC,MVCGROUP_CLASS,params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(ClassHelper.STRING_TYPE,MVC_NAME),param(makeClassSafe(ClassHelper.MAP_TYPE),ARGS)),ClassNode.EMPTY_ARRAY,returns(call(mvcGroupManagerInstance(),BUILD_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),var(ARGS))))));
  injectMethod(classNode,new MethodNode(CREATE_MVC_GROUP,ACC_PUBLIC,makeClassSafe(ClassHelper.LIST_TYPE),params(param(ClassHelper.STRING_TYPE,MVC_TYPE)),ClassNode.EMPTY_ARRAY,returns(call(mvcGroupManagerInstance(),CREATE_MVC_GROUP,args(var(MVC_TYPE),ConstantExpression.NULL,emptyMap())))));
  injectMethod(classNode,new MethodNode(CREATE_MVC_GROUP,ACC_PUBLIC,makeClassSafe(ClassHelper.LIST_TYPE),params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(ClassHelper.STRING_TYPE,MVC_NAME)),ClassNode.EMPTY_ARRAY,returns(call(mvcGroupManagerInstance(),CREATE_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),emptyMap())))));
  injectMethod(classNode,new MethodNode(CREATE_MVC_GROUP,ACC_PUBLIC,makeClassSafe(ClassHelper.LIST_TYPE),params(param(makeClassSafe(ClassHelper.MAP_TYPE),ARGS),param(ClassHelper.STRING_TYPE,MVC_TYPE)),ClassNode.EMPTY_ARRAY,returns(call(mvcGroupManagerInstance(),CREATE_MVC_GROUP,args(var(MVC_TYPE),ConstantExpression.NULL,var(ARGS))))));
  injectMethod(classNode,new MethodNode(CREATE_MVC_GROUP,ACC_PUBLIC,makeClassSafe(ClassHelper.LIST_TYPE),params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(makeClassSafe(ClassHelper.MAP_TYPE),ARGS)),ClassNode.EMPTY_ARRAY,returns(call(mvcGroupManagerInstance(),CREATE_MVC_GROUP,args(var(MVC_TYPE),ConstantExpression.NULL,var(ARGS))))));
  injectMethod(classNode,new MethodNode(CREATE_MVC_GROUP,ACC_PUBLIC,makeClassSafe(ClassHelper.LIST_TYPE),params(param(makeClassSafe(ClassHelper.MAP_TYPE),ARGS),param(ClassHelper.STRING_TYPE,MVC_TYPE),param(ClassHelper.STRING_TYPE,MVC_NAME)),ClassNode.EMPTY_ARRAY,returns(call(mvcGroupManagerInstance(),CREATE_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),var(ARGS))))));
  injectMethod(classNode,new MethodNode(CREATE_MVC_GROUP,ACC_PUBLIC,makeClassSafe(ClassHelper.LIST_TYPE),params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(ClassHelper.STRING_TYPE,MVC_NAME),param(makeClassSafe(ClassHelper.MAP_TYPE),ARGS)),ClassNode.EMPTY_ARRAY,returns(call(mvcGroupManagerInstance(),CREATE_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),var(ARGS))))));
  injectMethod(classNode,new MethodNode(DESTROY_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,MVC_NAME)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),DESTROY_MVC_GROUP,args(var(MVC_NAME))))));
  injectMethod(classNode,new MethodNode(WITH_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(makeClassSafe(ClassHelper.CLOSURE_TYPE),HANDLER)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),WITH_MVC_GROUP,args(var(MVC_TYPE),ConstantExpression.NULL,emptyMap(),var(HANDLER))))));
  injectMethod(classNode,new MethodNode(WITH_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(ClassHelper.STRING_TYPE,MVC_NAME),param(makeClassSafe(ClassHelper.CLOSURE_TYPE),HANDLER)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),WITH_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),emptyMap(),var(HANDLER))))));
  injectMethod(classNode,new MethodNode(WITH_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(makeClassSafe(ClassHelper.MAP_TYPE),ARGS),param(makeClassSafe(ClassHelper.CLOSURE_TYPE),HANDLER)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),WITH_MVC_GROUP,args(var(MVC_TYPE),ConstantExpression.NULL,var(ARGS),var(HANDLER))))));
  injectMethod(classNode,new MethodNode(WITH_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(makeClassSafe(ClassHelper.MAP_TYPE),ARGS),param(ClassHelper.STRING_TYPE,MVC_TYPE),param(makeClassSafe(ClassHelper.CLOSURE_TYPE),HANDLER)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),WITH_MVC_GROUP,args(var(MVC_TYPE),ConstantExpression.NULL,var(ARGS),var(HANDLER))))));
  injectMethod(classNode,new MethodNode(WITH_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(ClassHelper.STRING_TYPE,MVC_NAME),param(makeClassSafe(ClassHelper.MAP_TYPE),ARGS),param(makeClassSafe(ClassHelper.CLOSURE_TYPE),HANDLER)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),WITH_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),var(ARGS),var(HANDLER))))));
  injectMethod(classNode,new MethodNode(WITH_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(makeClassSafe(ClassHelper.MAP_TYPE),ARGS),param(ClassHelper.STRING_TYPE,MVC_TYPE),param(ClassHelper.STRING_TYPE,MVC_NAME),param(makeClassSafe(ClassHelper.CLOSURE_TYPE),HANDLER)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),WITH_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),var(ARGS),var(HANDLER))))));
  injectMethod(classNode,new MethodNode(WITH_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(makeClassSafe(MVCCLOSURE_CLASS),HANDLER)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),WITH_MVC_GROUP,args(var(MVC_TYPE),ConstantExpression.NULL,emptyMap(),var(HANDLER))))));
  injectMethod(classNode,new MethodNode(WITH_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(ClassHelper.STRING_TYPE,MVC_NAME),param(makeClassSafe(MVCCLOSURE_CLASS),HANDLER)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),WITH_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),emptyMap(),var(HANDLER))))));
  injectMethod(classNode,new MethodNode(WITH_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(makeClassSafe(ClassHelper.MAP_TYPE),ARGS),param(makeClassSafe(MVCCLOSURE_CLASS),HANDLER)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),WITH_MVC_GROUP,args(var(MVC_TYPE),ConstantExpression.NULL,var(ARGS),var(HANDLER))))));
  injectMethod(classNode,new MethodNode(WITH_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(makeClassSafe(ClassHelper.MAP_TYPE),ARGS),param(ClassHelper.STRING_TYPE,MVC_TYPE),param(makeClassSafe(MVCCLOSURE_CLASS),HANDLER)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),WITH_MVC_GROUP,args(var(MVC_TYPE),ConstantExpression.NULL,var(ARGS),var(HANDLER))))));
  injectMethod(classNode,new MethodNode(WITH_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,MVC_TYPE),param(ClassHelper.STRING_TYPE,MVC_NAME),param(makeClassSafe(ClassHelper.MAP_TYPE),ARGS),param(makeClassSafe(MVCCLOSURE_CLASS),HANDLER)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),WITH_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),var(ARGS),var(HANDLER))))));
  injectMethod(classNode,new MethodNode(WITH_MVC_GROUP,ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(makeClassSafe(ClassHelper.MAP_TYPE),ARGS),param(ClassHelper.STRING_TYPE,MVC_TYPE),param(ClassHelper.STRING_TYPE,MVC_NAME),param(makeClassSafe(MVCCLOSURE_CLASS),HANDLER)),ClassNode.EMPTY_ARRAY,stmnt(call(mvcGroupManagerInstance(),WITH_MVC_GROUP,args(var(MVC_TYPE),var(MVC_NAME),var(ARGS),var(HANDLER))))));
}"
81158,"public void inject(ClassNode classNode,String artifactType){
  injectProperty(classNode,APP,ACC_PUBLIC,GRIFFON_APPLICATION_CLASS);
  FieldNode _metaClass=injectField(classNode,""String_Node_Str"",ACC_PRIVATE | ACC_SYNTHETIC,ClassHelper.METACLASS_TYPE,ConstantExpression.NULL);
  injectMethod(classNode,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.METACLASS_TYPE,Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,block(ifs(ne(field(_metaClass),ConstantExpression.NULL),field(_metaClass)),decls(var(""String_Node_Str"",ClassHelper.METACLASS_TYPE),ConstantExpression.NULL),ifs_no_return(iof(THIS,EXPANDO_METACLASS_CLASS),assigns(field(_metaClass),var(""String_Node_Str"")),assigns(field(_metaClass),call(ABSTRACT_GRIFFON_ARTIFACT_CLASS,""String_Node_Str"",args(THIS)))),returns(field(_metaClass)))));
  injectMethod(classNode,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.METACLASS_TYPE,""String_Node_Str"")),ClassNode.EMPTY_ARRAY,block(assigns(field(_metaClass),var(""String_Node_Str"")),stmnt(call(call(GROOVY_SYSTEM_CLASS,""String_Node_Str"",NO_ARGS),""String_Node_Str"",args(call(THIS,""String_Node_Str"",NO_ARGS),var(""String_Node_Str"")))))));
  injectMethod(classNode,new MethodNode(""String_Node_Str"",ACC_PUBLIC,GRIFFON_CLASS_CLASS,Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,returns(call(call(call(THIS,""String_Node_Str"",NO_ARGS),""String_Node_Str"",NO_ARGS),""String_Node_Str"",args(classx(classNode))))));
  injectMethod(classNode,new MethodNode(""String_Node_Str"",ACC_PUBLIC,newClass(ClassHelper.OBJECT_TYPE),params(param(newClass(ClassHelper.CLASS_Type),""String_Node_Str""),param(ClassHelper.STRING_TYPE,""String_Node_Str"")),ClassNode.EMPTY_ARRAY,returns(call(GAH_CLASS,""String_Node_Str"",vars(APP,""String_Node_Str"",""String_Node_Str"")))));
  String loggerCategory=""String_Node_Str"" + artifactType + ""String_Node_Str""+ classNode.getName();
  FieldNode loggerField=injectField(classNode,""String_Node_Str"",ACC_FINAL | ACC_PRIVATE | ACC_SYNTHETIC,LOGGER_CLASS,call(LOGGER_FACTORY_CLASS,""String_Node_Str"",args(constx(loggerCategory))));
  injectMethod(classNode,new MethodNode(""String_Node_Str"",ACC_PUBLIC,LOGGER_CLASS,Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,returns(field(loggerField))));
  ThreadingAwareASTTransformation.apply(classNode);
  MVCAwareASTTransformation.apply(classNode);
}","public void inject(ClassNode classNode,String artifactType){
  injectProperty(classNode,APP,ACC_PUBLIC,GRIFFON_APPLICATION_CLASS);
  FieldNode _metaClass=injectField(classNode,""String_Node_Str"",ACC_PRIVATE | ACC_SYNTHETIC,ClassHelper.METACLASS_TYPE,ConstantExpression.NULL);
  injectMethod(classNode,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.METACLASS_TYPE,Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,block(ifs(ne(field(_metaClass),ConstantExpression.NULL),field(_metaClass)),decls(var(""String_Node_Str"",ClassHelper.METACLASS_TYPE),ConstantExpression.NULL),ifs_no_return(iof(THIS,EXPANDO_METACLASS_CLASS),assigns(field(_metaClass),var(""String_Node_Str"")),assigns(field(_metaClass),call(ABSTRACT_GRIFFON_ARTIFACT_CLASS,""String_Node_Str"",args(THIS)))),returns(field(_metaClass)))));
  injectMethod(classNode,new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.METACLASS_TYPE,""String_Node_Str"")),ClassNode.EMPTY_ARRAY,block(assigns(field(_metaClass),var(""String_Node_Str"")),stmnt(call(call(GROOVY_SYSTEM_CLASS,""String_Node_Str"",NO_ARGS),""String_Node_Str"",args(call(THIS,""String_Node_Str"",NO_ARGS),var(""String_Node_Str"")))))));
  injectMethod(classNode,new MethodNode(""String_Node_Str"",ACC_PUBLIC,GRIFFON_CLASS_CLASS,Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,returns(call(call(call(THIS,""String_Node_Str"",NO_ARGS),""String_Node_Str"",NO_ARGS),""String_Node_Str"",args(call(THIS,""String_Node_Str"",NO_ARGS))))));
  injectMethod(classNode,new MethodNode(""String_Node_Str"",ACC_PUBLIC,newClass(ClassHelper.OBJECT_TYPE),params(param(newClass(ClassHelper.CLASS_Type),""String_Node_Str""),param(ClassHelper.STRING_TYPE,""String_Node_Str"")),ClassNode.EMPTY_ARRAY,returns(call(GAH_CLASS,""String_Node_Str"",vars(APP,""String_Node_Str"",""String_Node_Str"")))));
  String loggerCategory=""String_Node_Str"" + artifactType + ""String_Node_Str""+ classNode.getName();
  FieldNode loggerField=injectField(classNode,""String_Node_Str"",ACC_FINAL | ACC_PRIVATE | ACC_SYNTHETIC,LOGGER_CLASS,call(LOGGER_FACTORY_CLASS,""String_Node_Str"",args(constx(loggerCategory))));
  injectMethod(classNode,new MethodNode(""String_Node_Str"",ACC_PUBLIC,LOGGER_CLASS,Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,returns(field(loggerField))));
  ThreadingAwareASTTransformation.apply(classNode);
  MVCAwareASTTransformation.apply(classNode);
}"
81159,"/** 
 * <p>Work out if the specified property is readable and static. Java introspection does not recognize this concept of static properties but Groovy does. We also consider public static fields as static properties with no getters/setters</p>
 * @param clazz The class to check for static property
 * @param propertyName The property name
 * @return true if the property with name propertyName has a static getter method
 */
public static boolean isStaticProperty(Class<?> clazz,String propertyName){
  Method getter=findDeclaredMethod(clazz,getGetterName(propertyName),null);
  if (getter != null) {
    return isPublicStatic(getter);
  }
 else {
    try {
      Field f=clazz.getDeclaredField(propertyName);
      if (f != null) {
        return isPublicStatic(f);
      }
    }
 catch (    NoSuchFieldException e) {
    }
  }
  return false;
}","/** 
 * <p>Work out if the specified property is readable and static. Java introspection does not recognize this concept of static properties but Groovy does. We also consider public static fields as static properties with no getters/setters</p>
 * @param clazz The class to check for static property
 * @param propertyName The property name
 * @return true if the property with name propertyName has a static getter method
 */
public static boolean isStaticProperty(Class<?> clazz,String propertyName){
  Method getter=findDeclaredMethod(clazz,getGetterName(propertyName),null);
  if (getter != null) {
    return isPublicStatic(getter);
  }
 else {
    try {
      Field f=clazz.getDeclaredField(propertyName);
      if (f != null) {
        return isPublicStatic(f);
      }
    }
 catch (    NoSuchFieldException ignore) {
    }
  }
  return false;
}"
81160,"/** 
 * <p>Get a static property value, which has a public static getter or is just a public static field.</p>
 * @param clazz The class to check for static property
 * @param name The property name
 * @return The value if there is one, or null if unset OR there is no such property
 */
public static Object getStaticPropertyValue(Class<?> clazz,String name){
  Method getter=findDeclaredMethod(clazz,getGetterName(name),null);
  try {
    if (getter != null) {
      return getter.invoke(null,(Object[])null);
    }
 else {
      Field f=clazz.getDeclaredField(name);
      if (f != null) {
        return f.get(null);
      }
    }
  }
 catch (  Exception e) {
  }
  return null;
}","/** 
 * <p>Get a static property value, which has a public static getter or is just a public static field.</p>
 * @param clazz The class to check for static property
 * @param name The property name
 * @return The value if there is one, or null if unset OR there is no such property
 */
public static Object getStaticPropertyValue(Class<?> clazz,String name){
  Method getter=findDeclaredMethod(clazz,getGetterName(name),null);
  try {
    if (getter != null) {
      return getter.invoke(null,(Object[])null);
    }
 else {
      Field f=clazz.getDeclaredField(name);
      if (f != null) {
        return f.get(null);
      }
    }
  }
 catch (  Exception ignore) {
  }
  return null;
}"
81161,"/** 
 * <p>Find an accessible method that matches the given name and has compatible parameters. Compatible parameters mean that every method parameter is assignable from  the given parameters. In other words, it finds a method with the given name  that will take the parameters given.<p> <p>This method is slightly undeterminstic since it loops  through methods names and return the first matching method.</p> <p>This method is used by   {@link #invokeMethod(Object object,String methodName,Object[] args,Class[] parameterTypes)}. <p>This method can match primitive parameter by passing in wrapper classes. For example, a <code>Boolean</code> will match a primitive <code>boolean</code> parameter.
 * @param clazz find method in this class
 * @param methodName find method with this name
 * @param parameterTypes find method with compatible parameters 
 * @return The accessible method
 */
public static Method getMatchingAccessibleMethod(Class clazz,String methodName,Class[] parameterTypes){
  MethodDescriptor md=new MethodDescriptor(clazz,methodName,parameterTypes,false);
  try {
    Method method=getCachedMethod(md);
    if (method != null) {
      return method;
    }
    method=clazz.getMethod(methodName,parameterTypes);
    setMethodAccessible(method);
    cacheMethod(md,method);
    return method;
  }
 catch (  NoSuchMethodException e) {
  }
  int paramSize=parameterTypes.length;
  Method bestMatch=null;
  Method[] methods=clazz.getMethods();
  float bestMatchCost=Float.MAX_VALUE;
  float myCost=Float.MAX_VALUE;
  for (int i=0, size=methods.length; i < size; i++) {
    if (methods[i].getName().equals(methodName)) {
      Class[] methodsParams=methods[i].getParameterTypes();
      int methodParamSize=methodsParams.length;
      if (methodParamSize == paramSize) {
        boolean match=true;
        for (int n=0; n < methodParamSize; n++) {
          if (!isAssignmentCompatible(methodsParams[n],parameterTypes[n])) {
            match=false;
            break;
          }
        }
        if (match) {
          Method method=getAccessibleMethod(clazz,methods[i]);
          if (method != null) {
            setMethodAccessible(method);
            myCost=getTotalTransformationCost(parameterTypes,method.getParameterTypes());
            if (myCost < bestMatchCost) {
              bestMatch=method;
              bestMatchCost=myCost;
            }
          }
        }
      }
    }
  }
  if (bestMatch != null) {
    cacheMethod(md,bestMatch);
  }
 else {
  }
  return bestMatch;
}","/** 
 * <p>Find an accessible method that matches the given name and has compatible parameters. Compatible parameters mean that every method parameter is assignable from  the given parameters. In other words, it finds a method with the given name  that will take the parameters given.<p> <p>This method is slightly undeterminstic since it loops  through methods names and return the first matching method.</p> <p>This method is used by   {@link #invokeMethod(Object object,String methodName,Object[] args,Class[] parameterTypes)}. <p>This method can match primitive parameter by passing in wrapper classes. For example, a <code>Boolean</code> will match a primitive <code>boolean</code> parameter.
 * @param clazz find method in this class
 * @param methodName find method with this name
 * @param parameterTypes find method with compatible parameters 
 * @return The accessible method
 */
public static Method getMatchingAccessibleMethod(Class clazz,String methodName,Class[] parameterTypes){
  MethodDescriptor md=new MethodDescriptor(clazz,methodName,parameterTypes,false);
  try {
    Method method=getCachedMethod(md);
    if (method != null) {
      return method;
    }
    method=clazz.getMethod(methodName,parameterTypes);
    setMethodAccessible(method);
    cacheMethod(md,method);
    return method;
  }
 catch (  NoSuchMethodException e) {
  }
  int paramSize=parameterTypes.length;
  Method bestMatch=null;
  Method[] methods=clazz.getMethods();
  float bestMatchCost=Float.MAX_VALUE;
  float myCost=Float.MAX_VALUE;
  for (int i=0, size=methods.length; i < size; i++) {
    if (methods[i].getName().equals(methodName)) {
      Class[] methodsParams=methods[i].getParameterTypes();
      int methodParamSize=methodsParams.length;
      if (methodParamSize == paramSize) {
        boolean match=true;
        for (int n=0; n < methodParamSize; n++) {
          if (!isAssignmentCompatible(methodsParams[n],parameterTypes[n])) {
            match=false;
            break;
          }
        }
        if (match) {
          Method method=getAccessibleMethod(clazz,methods[i]);
          if (method != null) {
            setMethodAccessible(method);
            myCost=getTotalTransformationCost(parameterTypes,method.getParameterTypes());
            if (myCost < bestMatchCost) {
              bestMatch=method;
              bestMatchCost=myCost;
            }
          }
        }
      }
    }
  }
  if (bestMatch != null) {
    cacheMethod(md,bestMatch);
  }
  return bestMatch;
}"
81162,"public void setMetaClass(MetaClass metaClass){
  _metaClass=metaClass;
  GroovySystem.getMetaClassRegistry().setMetaClass(getClass(),metaClass);
}","public void setMetaClass(MetaClass metaClass){
  metaClass=metaClass;
  GroovySystem.getMetaClassRegistry().setMetaClass(getClass(),metaClass);
}"
81163,"public MetaClass getMetaClass(){
  if (_metaClass == null) {
    Class clazz=getClass();
    _metaClass=GroovySystem.getMetaClassRegistry().getMetaClass(clazz);
    if (!(_metaClass instanceof ExpandoMetaClass) || !(_metaClass instanceof UberInterceptorMetaClass)) {
      _metaClass=new ExpandoMetaClass(clazz,true,true);
      log.debug(""String_Node_Str"" + _metaClass);
      _metaClass.initialize();
      GroovySystem.getMetaClassRegistry().setMetaClass(clazz,_metaClass);
    }
  }
  return _metaClass;
}","public MetaClass getMetaClass(){
  if (metaClass == null) {
    Class clazz=getClass();
    metaClass=GroovySystem.getMetaClassRegistry().getMetaClass(clazz);
    if (!(metaClass instanceof ExpandoMetaClass) || !(metaClass instanceof UberInterceptorMetaClass)) {
      metaClass=new ExpandoMetaClass(clazz,true,true);
      log.debug(""String_Node_Str"" + metaClass);
      metaClass.initialize();
      GroovySystem.getMetaClassRegistry().setMetaClass(clazz,metaClass);
    }
  }
  return metaClass;
}"
81164,"/** 
 * Handles the bulk of the processing, mostly delegating to other methods.
 * @param nodes  the ast nodes
 * @param source the source unit for the nodes
 */
public void visit(ASTNode[] nodes,SourceUnit source){
  if (!(nodes[0] instanceof AnnotationNode) || !(nodes[1] instanceof ClassNode)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  addEventRouterToClass(source,(ClassNode)nodes[1]);
}","/** 
 * Handles the bulk of the processing, mostly delegating to other methods.
 * @param nodes  the ast nodes
 * @param source the source unit for the nodes
 */
public void visit(ASTNode[] nodes,SourceUnit source){
  checkNodesForAnnotationAndType(nodes[0],nodes[1]);
  addEventRouterToClass(source,(ClassNode)nodes[1]);
}"
81165,"/** 
 * Handles the bulk of the processing, mostly delegating to other methods.
 * @param nodes  the ast nodes
 * @param source the source unit for the nodes
 */
public void visit(ASTNode[] nodes,SourceUnit source){
  if (!(nodes[0] instanceof AnnotationNode) || !(nodes[1] instanceof ClassNode)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  ClassNode classNode=(ClassNode)nodes[1];
  if (!classNode.implementsInterface(MVC_HANDLER_TYPE)) {
    apply(classNode);
  }
}","/** 
 * Handles the bulk of the processing, mostly delegating to other methods.
 * @param nodes  the ast nodes
 * @param source the source unit for the nodes
 */
public void visit(ASTNode[] nodes,SourceUnit source){
  checkNodesForAnnotationAndType(nodes[0],nodes[1]);
  ClassNode classNode=(ClassNode)nodes[1];
  if (!classNode.implementsInterface(MVC_HANDLER_TYPE)) {
    apply(classNode);
  }
}"
81166,"/** 
 * Handles the bulk of the processing, mostly delegating to other methods.
 * @param nodes   the ast nodes
 * @param source  the source unit for the nodes
 */
public void visit(ASTNode[] nodes,SourceUnit source){
  if (!(nodes[0] instanceof AnnotationNode) || !(nodes[1] instanceof AnnotatedNode)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  AnnotationNode annotation=(AnnotationNode)nodes[0];
  AnnotatedNode parent=(AnnotatedNode)nodes[1];
  ClassNode declaringClass=parent.getDeclaringClass();
  if (parent instanceof FieldNode) {
    addListenerToProperty(source,annotation,declaringClass,(FieldNode)parent);
  }
 else   if (parent instanceof ClassNode) {
    addListenerToClass(source,annotation,(ClassNode)parent);
  }
}","/** 
 * Handles the bulk of the processing, mostly delegating to other methods.
 * @param nodes   the ast nodes
 * @param source  the source unit for the nodes
 */
public void visit(ASTNode[] nodes,SourceUnit source){
  checkNodesForAnnotationAndType(nodes[0],nodes[1]);
  AnnotationNode annotation=(AnnotationNode)nodes[0];
  AnnotatedNode parent=(AnnotatedNode)nodes[1];
  ClassNode declaringClass=parent.getDeclaringClass();
  if (parent instanceof FieldNode) {
    addListenerToProperty(source,annotation,declaringClass,(FieldNode)parent);
  }
 else   if (parent instanceof ClassNode) {
    addListenerToClass(source,annotation,(ClassNode)parent);
  }
}"
81167,"/** 
 * Handles the bulk of the processing, mostly delegating to other methods.
 * @param nodes  the ast nodes
 * @param source the source unit for the nodes
 */
public void visit(ASTNode[] nodes,SourceUnit source){
  if (!(nodes[0] instanceof AnnotationNode) || !(nodes[1] instanceof ClassNode)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  ClassNode classNode=(ClassNode)nodes[1];
  if (!classNode.implementsInterface(THREADING_HANDLER_TYPE)) {
    apply(classNode);
  }
}","/** 
 * Handles the bulk of the processing, mostly delegating to other methods.
 * @param nodes  the ast nodes
 * @param source the source unit for the nodes
 */
public void visit(ASTNode[] nodes,SourceUnit source){
  checkNodesForAnnotationAndType(nodes[0],nodes[1]);
  ClassNode classNode=(ClassNode)nodes[1];
  if (!classNode.implementsInterface(THREADING_HANDLER_TYPE)) {
    apply(classNode);
  }
}"
81168,"public void inject(ClassNode classNode,String artifactType){
  classNode.addProperty(APP,ACC_PUBLIC,GRIFFON_APPLICATION_CLASS,null,null,null);
  FieldNode _metaClass=classNode.addField(""String_Node_Str"",ACC_PRIVATE | ACC_SYNTHETIC,ClassHelper.METACLASS_TYPE,ConstantExpression.NULL);
  classNode.addMethod(new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.METACLASS_TYPE,Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,block(ifs(ne(field(_metaClass),ConstantExpression.NULL),field(_metaClass)),decls(var(""String_Node_Str"",ClassHelper.METACLASS_TYPE),ConstantExpression.NULL),ifsNoReturn(iof(THIS,EXPANDO_METACLASS_CLASS),assigns(field(_metaClass),var(""String_Node_Str"")),assigns(field(_metaClass),call(ABSTRACT_GRIFFON_ARTIFACT_CLASS,""String_Node_Str"",args(THIS)))),returns(field(_metaClass)))));
  classNode.addMethod(new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.METACLASS_TYPE,""String_Node_Str"")),ClassNode.EMPTY_ARRAY,block(assigns(field(_metaClass),var(""String_Node_Str"")),stmnt(call(call(GROOVY_SYSTEM_CLASS,""String_Node_Str"",NO_ARGS),""String_Node_Str"",args(call(THIS,""String_Node_Str"",NO_ARGS),var(""String_Node_Str"")))))));
  classNode.addMethod(new MethodNode(""String_Node_Str"",ACC_PUBLIC,GRIFFON_CLASS_CLASS,Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,returns(call(call(call(THIS,""String_Node_Str"",NO_ARGS),""String_Node_Str"",NO_ARGS),""String_Node_Str"",args(classx(classNode))))));
  classNode.addMethod(new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.OBJECT_TYPE,params(param(ClassHelper.CLASS_Type,""String_Node_Str""),param(ClassHelper.STRING_TYPE,""String_Node_Str"")),ClassNode.EMPTY_ARRAY,returns(call(GAH_CLASS,""String_Node_Str"",vars(APP,""String_Node_Str"",""String_Node_Str"")))));
  String loggerCategory=""String_Node_Str"" + artifactType + ""String_Node_Str""+ classNode.getName();
  FieldNode loggerField=classNode.addField(""String_Node_Str"",ACC_FINAL | ACC_PRIVATE | ACC_SYNTHETIC,LOGGER_CLASS,call(LOGGER_FACTORY_CLASS,""String_Node_Str"",args(constx(loggerCategory))));
  classNode.addMethod(new MethodNode(""String_Node_Str"",ACC_PUBLIC,LOGGER_CLASS,Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,returns(field(loggerField))));
  ThreadingAwareASTTransformation.apply(classNode);
  MVCAwareASTTransformation.apply(classNode);
}","public void inject(ClassNode classNode,String artifactType){
  classNode.addProperty(APP,ACC_PUBLIC,GRIFFON_APPLICATION_CLASS,null,null,null);
  FieldNode _metaClass=classNode.addField(""String_Node_Str"",ACC_PRIVATE | ACC_SYNTHETIC,ClassHelper.METACLASS_TYPE,ConstantExpression.NULL);
  classNode.addMethod(new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.METACLASS_TYPE,Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,block(ifs(ne(field(_metaClass),ConstantExpression.NULL),field(_metaClass)),decls(var(""String_Node_Str"",ClassHelper.METACLASS_TYPE),ConstantExpression.NULL),ifs_no_return(iof(THIS,EXPANDO_METACLASS_CLASS),assigns(field(_metaClass),var(""String_Node_Str"")),assigns(field(_metaClass),call(ABSTRACT_GRIFFON_ARTIFACT_CLASS,""String_Node_Str"",args(THIS)))),returns(field(_metaClass)))));
  classNode.addMethod(new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.METACLASS_TYPE,""String_Node_Str"")),ClassNode.EMPTY_ARRAY,block(assigns(field(_metaClass),var(""String_Node_Str"")),stmnt(call(call(GROOVY_SYSTEM_CLASS,""String_Node_Str"",NO_ARGS),""String_Node_Str"",args(call(THIS,""String_Node_Str"",NO_ARGS),var(""String_Node_Str"")))))));
  classNode.addMethod(new MethodNode(""String_Node_Str"",ACC_PUBLIC,GRIFFON_CLASS_CLASS,Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,returns(call(call(call(THIS,""String_Node_Str"",NO_ARGS),""String_Node_Str"",NO_ARGS),""String_Node_Str"",args(classx(classNode))))));
  classNode.addMethod(new MethodNode(""String_Node_Str"",ACC_PUBLIC,ClassHelper.OBJECT_TYPE,params(param(ClassHelper.CLASS_Type,""String_Node_Str""),param(ClassHelper.STRING_TYPE,""String_Node_Str"")),ClassNode.EMPTY_ARRAY,returns(call(GAH_CLASS,""String_Node_Str"",vars(APP,""String_Node_Str"",""String_Node_Str"")))));
  String loggerCategory=""String_Node_Str"" + artifactType + ""String_Node_Str""+ classNode.getName();
  FieldNode loggerField=classNode.addField(""String_Node_Str"",ACC_FINAL | ACC_PRIVATE | ACC_SYNTHETIC,LOGGER_CLASS,call(LOGGER_FACTORY_CLASS,""String_Node_Str"",args(constx(loggerCategory))));
  classNode.addMethod(new MethodNode(""String_Node_Str"",ACC_PUBLIC,LOGGER_CLASS,Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,returns(field(loggerField))));
  ThreadingAwareASTTransformation.apply(classNode);
  MVCAwareASTTransformation.apply(classNode);
}"
81169,"public void removeItem(ListItem item){
  for (  MyListAdapter adapter : mAdapters.values()) {
    adapter.remove(item);
  }
  mAdapter.notifyDataSetChanged();
}","public void removeItem(ListItem item){
  for (  ListItemAdapter adapter : mAdapter.getSections()) {
    adapter.remove(item);
  }
  mAdapter.notifyDataSetChanged();
}"
81170,"public int getSectionItemCount(String section){
  MyListAdapter adapter=mAdapters.get(section);
  if (adapter == null)   return 0;
  return adapter.getCount();
}","public int getSectionItemCount(String section){
  ListItemAdapter adapter=mAdapter.getSection(section);
  if (adapter == null)   return 0;
  return adapter.getCount();
}"
81171,"protected void clear(){
  mAdapter.clear();
  mAdapters.clear();
}","public void clear(){
  mAdapter.clear();
}"
81172,"protected ListItem addItem(String sectionName,ListItem item,int index){
  MyListAdapter adapter=mAdapters.get(sectionName);
  if (adapter == null) {
    adapter=new MyListAdapter(getActivity());
    mAdapters.put(sectionName,adapter);
    mAdapter.addSection(sectionName,adapter);
    if (mListView != null) {
      mListView.setAdapter(null);
      mListView.setAdapter(mAdapter);
    }
  }
  if (index != -1)   adapter.insert(item,index);
 else   adapter.add(item);
  return item;
}","public ListItem addItem(String sectionName,ListItem item,int index){
  ListItemAdapter adapter=mAdapter.getSection(sectionName);
  if (adapter == null) {
    adapter=new ListItemAdapter(getActivity());
    mAdapter.addSection(sectionName,adapter);
    if (mListView != null) {
      mListView.setAdapter(null);
      mListView.setAdapter(mAdapter);
    }
  }
  if (index != -1)   adapter.insert(item,index);
 else   adapter.add(item);
  mAdapter.notifyDataSetChanged();
  return item;
}"
81173,"protected ListItem findItem(int item){
  String text=getString(item);
  for (  Adapter adapter : mAdapter.sections.values()) {
    MyListAdapter m=(MyListAdapter)adapter;
    for (int i=0; i < m.getCount(); i++) {
      ListItem li=m.getItem(i);
      if (text.equals(li.getTitle()))       return li;
    }
  }
  return null;
}","public ListItem findItem(int item){
  String text=getString(item);
  for (  ListItemAdapter adapter : mAdapter.getSections()) {
    for (int i=0; i < adapter.getCount(); i++) {
      ListItem li=adapter.getItem(i);
      if (text.equals(li.getTitle()))       return li;
    }
  }
  return null;
}"
81174,"protected void clearSection(String section){
  MyListAdapter adapter=mAdapters.get(section);
  if (adapter == null)   return;
  adapter.clear();
  mAdapter.notifyDataSetChanged();
}","public void clearSection(String section){
  ListItemAdapter adapter=mAdapter.getSection(section);
  if (adapter == null)   return;
  adapter.clear();
  mAdapter.notifyDataSetChanged();
}"
81175,"protected MyListAdapter ensureHeader(int sectionName){
  String sn=getString(sectionName);
  MyListAdapter adapter=mAdapters.get(sn);
  if (adapter == null) {
    adapter=new MyListAdapter(getActivity());
    mAdapters.put(sn,adapter);
    mAdapter.addSection(sn,adapter);
    mListView.setAdapter(null);
    mListView.setAdapter(mAdapter);
  }
  return adapter;
}","public ListItemAdapter ensureHeader(int index,String sectionName){
  ListItemAdapter adapter=mAdapter.getSection(sectionName);
  if (adapter == null) {
    adapter=new ListItemAdapter(getActivity());
    mAdapter.addSection(index,sectionName,adapter);
    mListView.setAdapter(null);
    mListView.setAdapter(mAdapter);
  }
  return adapter;
}"
81176,"@Override public int getItemViewType(int position){
  int type=1;
  for (  Object section : this.sections.keySet()) {
    Adapter adapter=sections.get(section);
    int size=adapter.getCount() + 1;
    if (position == 0)     return TYPE_SECTION_HEADER;
    if (position < size)     return type + adapter.getItemViewType(position - 1);
    position-=size;
    type+=adapter.getViewTypeCount();
  }
  return -1;
}","@Override public int getItemViewType(int position){
  int type=1;
  for (int i=0; i < headers.getCount(); i++) {
    String section=headers.getItem(i);
    Adapter adapter=sections.get(section);
    int size=adapter.getCount() + 1;
    if (position == 0)     return TYPE_SECTION_HEADER;
    if (position < size)     return type + adapter.getItemViewType(position - 1);
    position-=size;
    type+=adapter.getViewTypeCount();
  }
  return -1;
}"
81177,"public void addSection(String section,Adapter adapter){
  this.headers.add(section);
  this.sections.put(section,adapter);
}","public void addSection(int index,String section,T adapter){
  this.headers.insert(section,index);
  this.sections.put(section,adapter);
}"
81178,"@Override public Object getItem(int position){
  for (  Object section : this.sections.keySet()) {
    Adapter adapter=sections.get(section);
    int size=adapter.getCount() + 1;
    if (position == 0)     return section;
    if (position < size)     return adapter.getItem(position - 1);
    position-=size;
  }
  return null;
}","@Override public Object getItem(int position){
  for (int i=0; i < headers.getCount(); i++) {
    String section=headers.getItem(i);
    Adapter adapter=sections.get(section);
    int size=adapter.getCount() + 1;
    if (position == 0)     return section;
    if (position < size)     return adapter.getItem(position - 1);
    position-=size;
  }
  return null;
}"
81179,"@Override public View getView(int position,View convertView,ViewGroup parent){
  int sectionnum=0;
  for (  Object section : this.sections.keySet()) {
    Adapter adapter=sections.get(section);
    int size=adapter.getCount() + 1;
    if (position == 0)     return headers.getView(sectionnum,convertView,parent);
    if (position < size)     return adapter.getView(position - 1,convertView,parent);
    position-=size;
    sectionnum++;
  }
  return null;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  int sectionnum=0;
  for (int i=0; i < headers.getCount(); i++) {
    String section=headers.getItem(i);
    Adapter adapter=sections.get(section);
    int size=adapter.getCount() + 1;
    if (position == 0)     return headers.getView(sectionnum,convertView,parent);
    if (position < size)     return adapter.getView(position - 1,convertView,parent);
    position-=size;
    sectionnum++;
  }
  return null;
}"
81180,"private void renderScene(){
  Gdx.gl.glEnable(GL20.GL_CULL_FACE);
  Gdx.gl20.glEnable(GL20.GL_BLEND);
  Gdx.gl20.glBlendFunc(GL20.GL_SRC_ALPHA,GL20.GL_ONE_MINUS_SRC_ALPHA);
  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
  transShader.begin();
  transShader.setUniformMatrix(""String_Node_Str"",cam.combined);
{
    tmp.idt();
    model.idt();
    tmp.setToScaling(20.5f,20.5f,20.5f);
    model.mul(tmp);
    tmp.setToRotation(Vector3.X,angleX + angleXBack);
    model.mul(tmp);
    tmp.setToRotation(Vector3.Y,angleY + angleYBack);
    model.mul(tmp);
    tmp.setToTranslation(0,0,0);
    model.mul(tmp);
    transShader.setUniformMatrix(""String_Node_Str"",model);
    transShader.setUniformf(""String_Node_Str"",Resources.getInstance().backgroundWireColor[0],Resources.getInstance().backgroundWireColor[1],Resources.getInstance().backgroundWireColor[2],Resources.getInstance().backgroundWireColor[3]);
    playerModel.render(transShader,GL20.GL_LINE_STRIP);
  }
{
    tmp.idt();
    model.idt();
    tmp.setToScaling(5.5f,5.5f,5.5f);
    model.mul(tmp);
    tmp.setToRotation(Vector3.X,angleX);
    model.mul(tmp);
    tmp.setToRotation(Vector3.Y,angleY);
    model.mul(tmp);
    tmp.setToTranslation(0,0,0);
    model.mul(tmp);
    transShader.setUniformMatrix(""String_Node_Str"",model);
    transShader.setUniformf(""String_Node_Str"",Resources.getInstance().clearColor[0],Resources.getInstance().clearColor[1],Resources.getInstance().clearColor[2],Resources.getInstance().clearColor[3]);
    blockModel.render(transShader,GL20.GL_TRIANGLES);
    transShader.setUniformf(""String_Node_Str"",Resources.getInstance().wireCubeEdgeColor[0],Resources.getInstance().wireCubeEdgeColor[1],Resources.getInstance().wireCubeEdgeColor[2],Resources.getInstance().wireCubeEdgeColor[3]);
    wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
  }
  if (mode == 0) {
    if (player != null) {
      pRay.set(player.position,player.direction);
      float oldDst=1111f;
      nextBlock=new Renderable();
      for (      Renderable renderable : renderObjects) {
        if (!(renderable instanceof Player) && !(renderable instanceof Switch)) {
          boolean intersect=Intersector.intersectRaySphere(pRay,renderable.position,1f,intersection);
          float dst=intersection.dst(player.position);
          if (dst < oldDst && intersect) {
            nextBlock=renderable;
            oldDst=dst;
          }
          renderable.isHighlightAnimation=false;
        }
      }
      if (oldDst > 1.0f && nextBlock != null) {
        nextBlock.isHighlightAnimation=true;
      }
    }
  }
  for (int i=0; i < renderObjects.size; ++i) {
    if (mode == 1 && renderObjects.get(i) instanceof EditorBlock) {
      model.set(renderObjects.get(i).model);
      transShader.setUniformMatrix(""String_Node_Str"",model);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().editorBlockColor[0],Resources.getInstance().editorBlockColor[1],Resources.getInstance().editorBlockColor[2],Resources.getInstance().editorBlockColor[3] + renderObjects.get(i).collideAnimation);
      blockModel.render(transShader,GL20.GL_TRIANGLES);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().editorBlockEdgeColor[0],Resources.getInstance().editorBlockEdgeColor[1],Resources.getInstance().editorBlockEdgeColor[2],Resources.getInstance().editorBlockEdgeColor[3] + renderObjects.get(i).collideAnimation);
      wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
    }
    if (renderObjects.get(i).isCollidedAnimation == true && renderObjects.get(i).collideAnimation == 0) {
      renderObjects.get(i).collideAnimation=1.0f;
    }
    if (renderObjects.get(i).collideAnimation > 0.0f) {
      renderObjects.get(i).collideAnimation-=delta * 1.f;
      renderObjects.get(i).collideAnimation=Math.max(0.0f,renderObjects.get(i).collideAnimation);
      if (renderObjects.get(i).collideAnimation == 0.0f)       renderObjects.get(i).isCollidedAnimation=false;
    }
    if (renderObjects.get(i).isHighlightAnimation == true && renderObjects.get(i).isHighlightAnimationFadeInOut) {
      renderObjects.get(i).highlightAnimation+=delta / 6.f;
      renderObjects.get(i).highlightAnimation=Math.min(0.5f,renderObjects.get(i).highlightAnimation);
      if (renderObjects.get(i).highlightAnimation >= 0.5) {
        renderObjects.get(i).isHighlightAnimationFadeInOut=!renderObjects.get(i).isHighlightAnimationFadeInOut;
      }
    }
    if (renderObjects.get(i).isHighlightAnimation == true && !renderObjects.get(i).isHighlightAnimationFadeInOut) {
      renderObjects.get(i).highlightAnimation-=delta / 6.f;
      renderObjects.get(i).highlightAnimation=Math.max(0.0f,renderObjects.get(i).highlightAnimation);
      if (renderObjects.get(i).highlightAnimation <= 0) {
        renderObjects.get(i).isHighlightAnimationFadeInOut=!renderObjects.get(i).isHighlightAnimationFadeInOut;
      }
    }
    if (renderObjects.get(i).isHighlightAnimation == false) {
      renderObjects.get(i).highlightAnimation-=delta / 1.f;
      renderObjects.get(i).highlightAnimation=Math.max(0.0f,renderObjects.get(i).highlightAnimation);
      if (renderObjects.get(i).highlightAnimation <= 0) {
        renderObjects.get(i).isHighlightAnimationFadeInOut=!renderObjects.get(i).isHighlightAnimationFadeInOut;
      }
    }
    if (renderObjects.get(i) instanceof SwitchableBlock) {
      if (((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation == true && ((SwitchableBlock)renderObjects.get(i)).isSwitched == true && ((SwitchableBlock)renderObjects.get(i)).switchAnimation == 0) {
        ((SwitchableBlock)renderObjects.get(i)).switchAnimation=0.0f;
      }
      if (((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation == true && ((SwitchableBlock)renderObjects.get(i)).isSwitched == false && ((SwitchableBlock)renderObjects.get(i)).switchAnimation == 1) {
        ((SwitchableBlock)renderObjects.get(i)).switchAnimation=1.0f;
      }
      if (((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation == true) {
        if (!((SwitchableBlock)renderObjects.get(i)).isSwitched) {
          ((SwitchableBlock)renderObjects.get(i)).switchAnimation-=delta * 1.f;
          ((SwitchableBlock)renderObjects.get(i)).switchAnimation=Math.max(0.0f,((SwitchableBlock)renderObjects.get(i)).switchAnimation);
          if (((SwitchableBlock)renderObjects.get(i)).switchAnimation == 0.0f)           ((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation=false;
        }
 else {
          ((SwitchableBlock)renderObjects.get(i)).switchAnimation+=delta * 1.f;
          ((SwitchableBlock)renderObjects.get(i)).switchAnimation=Math.min(1.0f,((SwitchableBlock)renderObjects.get(i)).switchAnimation);
          if (((SwitchableBlock)renderObjects.get(i)).switchAnimation == 1.0f)           ((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation=false;
        }
      }
    }
    if (renderObjects.get(i) instanceof Block) {
      model.set(renderObjects.get(i).model);
      transShader.setUniformMatrix(""String_Node_Str"",model);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().blockColor[0],Resources.getInstance().blockColor[1],Resources.getInstance().blockColor[2],Resources.getInstance().blockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
      blockModel.render(transShader,GL20.GL_TRIANGLES);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().blockEdgeColor[0],Resources.getInstance().blockEdgeColor[1],Resources.getInstance().blockEdgeColor[2],Resources.getInstance().blockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
      wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
    }
    if (renderObjects.get(i) instanceof MovableBlock) {
      model.set(renderObjects.get(i).model);
      transShader.setUniformMatrix(""String_Node_Str"",model);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().movableBlockColor[0],Resources.getInstance().movableBlockColor[1],Resources.getInstance().movableBlockColor[2],Resources.getInstance().movableBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
      wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().movableBlockEdgeColor[0],Resources.getInstance().movableBlockEdgeColor[1],Resources.getInstance().movableBlockEdgeColor[2],Resources.getInstance().movableBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
      blockModel.render(transShader,GL20.GL_TRIANGLES);
    }
    if (renderObjects.get(i) instanceof SwitchableBlock) {
      if (!((SwitchableBlock)renderObjects.get(i)).isSwitched || ((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation == true) {
        model.set(renderObjects.get(i).model);
        SwitchableBlock tmpSwitchb=(SwitchableBlock)renderObjects.get(i);
switch (Math.abs(tmpSwitchb.id)) {
case 10:
          tmp.setToScaling(0.3f,0.3f,0.3f);
        model.mul(tmp);
      transShader.setUniformMatrix(""String_Node_Str"",model);
    transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
  playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(3f,3f,3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[1] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[2] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
break;
case 12:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(3f,3f,3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[1] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[2] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
break;
case 13:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
coneModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(3f,3f,3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[1] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[2] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
break;
default :
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(3f,3f,3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[1] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[2] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
break;
}
}
}
if (renderObjects.get(i) instanceof Switch) {
model.set(renderObjects.get(i).model);
Switch tmpSwitch=(Switch)renderObjects.get(i);
switch (Math.abs(tmpSwitch.id)) {
case 10:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f,2.0f,2.0f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0],Resources.getInstance().switchBlockEdgeColor[1],Resources.getInstance().switchBlockEdgeColor[2],Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
break;
case 12:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f,2.0f,2.0f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0],Resources.getInstance().switchBlockEdgeColor[1],Resources.getInstance().switchBlockEdgeColor[2],Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
break;
case 13:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
coneModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f,2.0f,2.0f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0],Resources.getInstance().switchBlockEdgeColor[1],Resources.getInstance().switchBlockEdgeColor[2],Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
break;
default :
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f,2.0f,2.0f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0],Resources.getInstance().switchBlockEdgeColor[1],Resources.getInstance().switchBlockEdgeColor[2],Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
break;
}
}
if (renderObjects.get(i) instanceof Player) {
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXBack);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYBack);
model.mul(tmp);
tmp.setToScaling(0.5f,0.5f,0.5f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().playerColor[0],Resources.getInstance().playerColor[1],Resources.getInstance().playerColor[2],Resources.getInstance().playerColor[3] + renderObjects.get(i).collideAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f - (renderObjects.get(i).collideAnimation),2.0f - (renderObjects.get(i).collideAnimation),2.0f - (renderObjects.get(i).collideAnimation));
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().playerEdgeColor[0],Resources.getInstance().playerEdgeColor[1],Resources.getInstance().playerEdgeColor[2],Resources.getInstance().playerEdgeColor[3] + renderObjects.get(i).collideAnimation);
playerModel.render(transShader,GL20.GL_LINE_STRIP);
playerModel.render(transShader,GL20.GL_LINE_STRIP,0,(int)(playerModel.getNumVertices() - (renderObjects.get(i).collideAnimation * playerModel.getNumVertices())));
}
if (renderObjects.get(i) instanceof Portal) {
if (renderObjects.get(i).position.x != -11) {
Portal tmpPortal=(Portal)renderObjects.get(i);
switch (Math.abs(tmpPortal.id)) {
case 4:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor[0],Resources.getInstance().portalColor[1],Resources.getInstance().portalColor[2],Resources.getInstance().portalColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor[0],Resources.getInstance().portalColor[1],Resources.getInstance().portalColor[2],Resources.getInstance().portalColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
case 5:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor2[0],Resources.getInstance().portalColor2[1],Resources.getInstance().portalColor2[2],Resources.getInstance().portalColor2[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor2[0],Resources.getInstance().portalColor2[1],Resources.getInstance().portalColor2[2],Resources.getInstance().portalColor2[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
case 6:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor3[0],Resources.getInstance().portalColor3[1],Resources.getInstance().portalColor3[2],Resources.getInstance().portalColor3[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor3[0],Resources.getInstance().portalColor3[1],Resources.getInstance().portalColor3[2],Resources.getInstance().portalColor3[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
case 7:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor4[0],Resources.getInstance().portalColor4[1],Resources.getInstance().portalColor4[2],Resources.getInstance().portalColor4[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor4[0],Resources.getInstance().portalColor4[1],Resources.getInstance().portalColor4[2],Resources.getInstance().portalColor4[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
case 8:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor5[0],Resources.getInstance().portalColor5[1],Resources.getInstance().portalColor5[2],Resources.getInstance().portalColor5[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor5[0],Resources.getInstance().portalColor5[1],Resources.getInstance().portalColor5[2],Resources.getInstance().portalColor5[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
default :
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor[0],Resources.getInstance().portalColor[1],Resources.getInstance().portalColor[2],Resources.getInstance().portalColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor[0],Resources.getInstance().portalColor[1],Resources.getInstance().portalColor[2],Resources.getInstance().portalColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
}
}
}
if (renderObjects.get(i) instanceof Target) {
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.Y,angleY + angleYBack);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().targetColor[0],Resources.getInstance().targetColor[1],Resources.getInstance().targetColor[2],Resources.getInstance().targetColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
targetModel.render(transShader,GL20.GL_TRIANGLES);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().targetEdgeColor[0],Resources.getInstance().targetEdgeColor[1],Resources.getInstance().targetEdgeColor[2],Resources.getInstance().targetEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
targetModel.render(transShader,GL20.GL_LINE_STRIP);
}
}
transShader.end();
}","private void renderScene(){
  Gdx.gl.glEnable(GL20.GL_CULL_FACE);
  Gdx.gl20.glEnable(GL20.GL_BLEND);
  Gdx.gl20.glBlendFunc(GL20.GL_SRC_ALPHA,GL20.GL_ONE_MINUS_SRC_ALPHA);
  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
  transShader.begin();
  transShader.setUniformMatrix(""String_Node_Str"",cam.combined);
{
    tmp.idt();
    model.idt();
    tmp.setToScaling(20.5f,20.5f,20.5f);
    model.mul(tmp);
    tmp.setToRotation(Vector3.X,angleX + angleXBack);
    model.mul(tmp);
    tmp.setToRotation(Vector3.Y,angleY + angleYBack);
    model.mul(tmp);
    tmp.setToTranslation(0,0,0);
    model.mul(tmp);
    transShader.setUniformMatrix(""String_Node_Str"",model);
    transShader.setUniformf(""String_Node_Str"",Resources.getInstance().backgroundWireColor[0],Resources.getInstance().backgroundWireColor[1],Resources.getInstance().backgroundWireColor[2],Resources.getInstance().backgroundWireColor[3]);
    playerModel.render(transShader,GL20.GL_LINE_STRIP);
  }
{
    tmp.idt();
    model.idt();
    tmp.setToScaling(5.5f,5.5f,5.5f);
    model.mul(tmp);
    tmp.setToRotation(Vector3.X,angleX);
    model.mul(tmp);
    tmp.setToRotation(Vector3.Y,angleY);
    model.mul(tmp);
    tmp.setToTranslation(0,0,0);
    model.mul(tmp);
    transShader.setUniformMatrix(""String_Node_Str"",model);
    transShader.setUniformf(""String_Node_Str"",Resources.getInstance().clearColor[0],Resources.getInstance().clearColor[1],Resources.getInstance().clearColor[2],Resources.getInstance().clearColor[3]);
    blockModel.render(transShader,GL20.GL_TRIANGLES);
    transShader.setUniformf(""String_Node_Str"",Resources.getInstance().wireCubeEdgeColor[0],Resources.getInstance().wireCubeEdgeColor[1],Resources.getInstance().wireCubeEdgeColor[2],Resources.getInstance().wireCubeEdgeColor[3]);
    wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
  }
  if (mode == 0) {
    if (player != null) {
      pRay.set(player.position,player.direction);
      float oldDst=1111f;
      nextBlock=new Renderable();
      for (int i=0; i < renderObjects.size; i++) {
        if (!(renderObjects.get(i) instanceof Player) && !(renderObjects.get(i) instanceof Switch) && !((renderObjects.get(i) instanceof SwitchableBlock) && ((SwitchableBlock)renderObjects.get(i)).isSwitched)) {
          boolean intersect=Intersector.intersectRaySphere(pRay,renderObjects.get(i).position,1f,intersection);
          float dst=intersection.dst(player.position);
          if (dst < oldDst && intersect) {
            nextBlock=renderObjects.get(i);
            oldDst=dst;
          }
          renderObjects.get(i).isHighlightAnimation=false;
        }
      }
      if (oldDst > 1.0f && nextBlock != null) {
        nextBlock.isHighlightAnimation=true;
      }
    }
  }
  for (int i=0; i < renderObjects.size; ++i) {
    if (mode == 1 && renderObjects.get(i) instanceof EditorBlock) {
      model.set(renderObjects.get(i).model);
      transShader.setUniformMatrix(""String_Node_Str"",model);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().editorBlockColor[0],Resources.getInstance().editorBlockColor[1],Resources.getInstance().editorBlockColor[2],Resources.getInstance().editorBlockColor[3] + renderObjects.get(i).collideAnimation);
      blockModel.render(transShader,GL20.GL_TRIANGLES);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().editorBlockEdgeColor[0],Resources.getInstance().editorBlockEdgeColor[1],Resources.getInstance().editorBlockEdgeColor[2],Resources.getInstance().editorBlockEdgeColor[3] + renderObjects.get(i).collideAnimation);
      wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
    }
    if (renderObjects.get(i).isCollidedAnimation == true && renderObjects.get(i).collideAnimation == 0) {
      renderObjects.get(i).collideAnimation=1.0f;
    }
    if (renderObjects.get(i).collideAnimation > 0.0f) {
      renderObjects.get(i).collideAnimation-=delta * 1.f;
      renderObjects.get(i).collideAnimation=Math.max(0.0f,renderObjects.get(i).collideAnimation);
      if (renderObjects.get(i).collideAnimation == 0.0f)       renderObjects.get(i).isCollidedAnimation=false;
    }
    if (renderObjects.get(i).isHighlightAnimation == true && renderObjects.get(i).isHighlightAnimationFadeInOut) {
      renderObjects.get(i).highlightAnimation+=delta / 6.f;
      renderObjects.get(i).highlightAnimation=Math.min(0.5f,renderObjects.get(i).highlightAnimation);
      if (renderObjects.get(i).highlightAnimation >= 0.5) {
        renderObjects.get(i).isHighlightAnimationFadeInOut=!renderObjects.get(i).isHighlightAnimationFadeInOut;
      }
    }
    if (renderObjects.get(i).isHighlightAnimation == true && !renderObjects.get(i).isHighlightAnimationFadeInOut) {
      renderObjects.get(i).highlightAnimation-=delta / 6.f;
      renderObjects.get(i).highlightAnimation=Math.max(0.0f,renderObjects.get(i).highlightAnimation);
      if (renderObjects.get(i).highlightAnimation <= 0) {
        renderObjects.get(i).isHighlightAnimationFadeInOut=!renderObjects.get(i).isHighlightAnimationFadeInOut;
      }
    }
    if (renderObjects.get(i).isHighlightAnimation == false) {
      renderObjects.get(i).highlightAnimation-=delta / 1.f;
      renderObjects.get(i).highlightAnimation=Math.max(0.0f,renderObjects.get(i).highlightAnimation);
      if (renderObjects.get(i).highlightAnimation <= 0) {
        renderObjects.get(i).isHighlightAnimationFadeInOut=!renderObjects.get(i).isHighlightAnimationFadeInOut;
      }
    }
    if (renderObjects.get(i) instanceof SwitchableBlock) {
      if (((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation == true && ((SwitchableBlock)renderObjects.get(i)).isSwitched == true && ((SwitchableBlock)renderObjects.get(i)).switchAnimation == 0) {
        ((SwitchableBlock)renderObjects.get(i)).switchAnimation=0.0f;
      }
      if (((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation == true && ((SwitchableBlock)renderObjects.get(i)).isSwitched == false && ((SwitchableBlock)renderObjects.get(i)).switchAnimation == 1) {
        ((SwitchableBlock)renderObjects.get(i)).switchAnimation=1.0f;
      }
      if (((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation == true) {
        if (!((SwitchableBlock)renderObjects.get(i)).isSwitched) {
          ((SwitchableBlock)renderObjects.get(i)).switchAnimation-=delta * 1.f;
          ((SwitchableBlock)renderObjects.get(i)).switchAnimation=Math.max(0.0f,((SwitchableBlock)renderObjects.get(i)).switchAnimation);
          if (((SwitchableBlock)renderObjects.get(i)).switchAnimation == 0.0f)           ((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation=false;
        }
 else {
          ((SwitchableBlock)renderObjects.get(i)).switchAnimation+=delta * 1.f;
          ((SwitchableBlock)renderObjects.get(i)).switchAnimation=Math.min(1.0f,((SwitchableBlock)renderObjects.get(i)).switchAnimation);
          if (((SwitchableBlock)renderObjects.get(i)).switchAnimation == 1.0f)           ((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation=false;
        }
      }
    }
    if (renderObjects.get(i) instanceof Block) {
      model.set(renderObjects.get(i).model);
      transShader.setUniformMatrix(""String_Node_Str"",model);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().blockColor[0],Resources.getInstance().blockColor[1],Resources.getInstance().blockColor[2],Resources.getInstance().blockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
      blockModel.render(transShader,GL20.GL_TRIANGLES);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().blockEdgeColor[0],Resources.getInstance().blockEdgeColor[1],Resources.getInstance().blockEdgeColor[2],Resources.getInstance().blockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
      wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
    }
    if (renderObjects.get(i) instanceof MovableBlock) {
      model.set(renderObjects.get(i).model);
      transShader.setUniformMatrix(""String_Node_Str"",model);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().movableBlockColor[0],Resources.getInstance().movableBlockColor[1],Resources.getInstance().movableBlockColor[2],Resources.getInstance().movableBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
      wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().movableBlockEdgeColor[0],Resources.getInstance().movableBlockEdgeColor[1],Resources.getInstance().movableBlockEdgeColor[2],Resources.getInstance().movableBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
      blockModel.render(transShader,GL20.GL_TRIANGLES);
    }
    if (renderObjects.get(i) instanceof SwitchableBlock) {
      if (!((SwitchableBlock)renderObjects.get(i)).isSwitched || ((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation == true) {
        model.set(renderObjects.get(i).model);
        SwitchableBlock tmpSwitchb=(SwitchableBlock)renderObjects.get(i);
switch (Math.abs(tmpSwitchb.id)) {
case 10:
          tmp.setToScaling(0.3f,0.3f,0.3f);
        model.mul(tmp);
      transShader.setUniformMatrix(""String_Node_Str"",model);
    transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
  playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(3f,3f,3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[1] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[2] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
break;
case 12:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(3f,3f,3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[1] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[2] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
break;
case 13:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
coneModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(3f,3f,3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[1] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[2] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
break;
default :
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(3f,3f,3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[1] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[2] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
break;
}
}
}
if (renderObjects.get(i) instanceof Switch) {
model.set(renderObjects.get(i).model);
Switch tmpSwitch=(Switch)renderObjects.get(i);
switch (Math.abs(tmpSwitch.id)) {
case 10:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f,2.0f,2.0f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0],Resources.getInstance().switchBlockEdgeColor[1],Resources.getInstance().switchBlockEdgeColor[2],Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
break;
case 12:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f,2.0f,2.0f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0],Resources.getInstance().switchBlockEdgeColor[1],Resources.getInstance().switchBlockEdgeColor[2],Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
break;
case 13:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
coneModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f,2.0f,2.0f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0],Resources.getInstance().switchBlockEdgeColor[1],Resources.getInstance().switchBlockEdgeColor[2],Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
break;
default :
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f,2.0f,2.0f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0],Resources.getInstance().switchBlockEdgeColor[1],Resources.getInstance().switchBlockEdgeColor[2],Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
break;
}
}
if (renderObjects.get(i) instanceof Player) {
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXBack);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYBack);
model.mul(tmp);
tmp.setToScaling(0.5f,0.5f,0.5f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().playerColor[0],Resources.getInstance().playerColor[1],Resources.getInstance().playerColor[2],Resources.getInstance().playerColor[3] + renderObjects.get(i).collideAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f - (renderObjects.get(i).collideAnimation),2.0f - (renderObjects.get(i).collideAnimation),2.0f - (renderObjects.get(i).collideAnimation));
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().playerEdgeColor[0],Resources.getInstance().playerEdgeColor[1],Resources.getInstance().playerEdgeColor[2],Resources.getInstance().playerEdgeColor[3] + renderObjects.get(i).collideAnimation);
playerModel.render(transShader,GL20.GL_LINE_STRIP);
playerModel.render(transShader,GL20.GL_LINE_STRIP,0,(int)(playerModel.getNumVertices() - (renderObjects.get(i).collideAnimation * playerModel.getNumVertices())));
}
if (renderObjects.get(i) instanceof Portal) {
if (renderObjects.get(i).position.x != -11) {
Portal tmpPortal=(Portal)renderObjects.get(i);
switch (Math.abs(tmpPortal.id)) {
case 4:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor[0],Resources.getInstance().portalColor[1],Resources.getInstance().portalColor[2],Resources.getInstance().portalColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor[0],Resources.getInstance().portalColor[1],Resources.getInstance().portalColor[2],Resources.getInstance().portalColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
case 5:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor2[0],Resources.getInstance().portalColor2[1],Resources.getInstance().portalColor2[2],Resources.getInstance().portalColor2[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor2[0],Resources.getInstance().portalColor2[1],Resources.getInstance().portalColor2[2],Resources.getInstance().portalColor2[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
case 6:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor3[0],Resources.getInstance().portalColor3[1],Resources.getInstance().portalColor3[2],Resources.getInstance().portalColor3[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor3[0],Resources.getInstance().portalColor3[1],Resources.getInstance().portalColor3[2],Resources.getInstance().portalColor3[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
case 7:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor4[0],Resources.getInstance().portalColor4[1],Resources.getInstance().portalColor4[2],Resources.getInstance().portalColor4[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor4[0],Resources.getInstance().portalColor4[1],Resources.getInstance().portalColor4[2],Resources.getInstance().portalColor4[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
case 8:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor5[0],Resources.getInstance().portalColor5[1],Resources.getInstance().portalColor5[2],Resources.getInstance().portalColor5[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor5[0],Resources.getInstance().portalColor5[1],Resources.getInstance().portalColor5[2],Resources.getInstance().portalColor5[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
default :
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor[0],Resources.getInstance().portalColor[1],Resources.getInstance().portalColor[2],Resources.getInstance().portalColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor[0],Resources.getInstance().portalColor[1],Resources.getInstance().portalColor[2],Resources.getInstance().portalColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
}
}
}
if (renderObjects.get(i) instanceof Target) {
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.Y,angleY + angleYBack);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().targetColor[0],Resources.getInstance().targetColor[1],Resources.getInstance().targetColor[2],Resources.getInstance().targetColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
targetModel.render(transShader,GL20.GL_TRIANGLES);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().targetEdgeColor[0],Resources.getInstance().targetEdgeColor[1],Resources.getInstance().targetEdgeColor[2],Resources.getInstance().targetEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
targetModel.render(transShader,GL20.GL_LINE_STRIP);
}
}
transShader.end();
}"
81181,"private void renderScene(){
  Gdx.gl.glEnable(GL20.GL_CULL_FACE);
  Gdx.gl20.glEnable(GL20.GL_BLEND);
  Gdx.gl20.glBlendFunc(GL20.GL_SRC_ALPHA,GL20.GL_ONE_MINUS_SRC_ALPHA);
  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
  transShader.begin();
  transShader.setUniformMatrix(""String_Node_Str"",cam.combined);
{
    tmp.idt();
    model.idt();
    tmp.setToScaling(20.5f,20.5f,20.5f);
    model.mul(tmp);
    tmp.setToRotation(Vector3.X,angleX + angleXBack);
    model.mul(tmp);
    tmp.setToRotation(Vector3.Y,angleY + angleYBack);
    model.mul(tmp);
    tmp.setToTranslation(0,0,0);
    model.mul(tmp);
    transShader.setUniformMatrix(""String_Node_Str"",model);
    transShader.setUniformf(""String_Node_Str"",Resources.getInstance().backgroundWireColor[0],Resources.getInstance().backgroundWireColor[1],Resources.getInstance().backgroundWireColor[2],Resources.getInstance().backgroundWireColor[3]);
    playerModel.render(transShader,GL20.GL_LINE_STRIP);
  }
{
    tmp.idt();
    model.idt();
    tmp.setToScaling(5.5f,5.5f,5.5f);
    model.mul(tmp);
    tmp.setToRotation(Vector3.X,angleX);
    model.mul(tmp);
    tmp.setToRotation(Vector3.Y,angleY);
    model.mul(tmp);
    tmp.setToTranslation(0,0,0);
    model.mul(tmp);
    transShader.setUniformMatrix(""String_Node_Str"",model);
    transShader.setUniformf(""String_Node_Str"",Resources.getInstance().clearColor[0],Resources.getInstance().clearColor[1],Resources.getInstance().clearColor[2],Resources.getInstance().clearColor[3]);
    blockModel.render(transShader,GL20.GL_TRIANGLES);
    transShader.setUniformf(""String_Node_Str"",Resources.getInstance().wireCubeEdgeColor[0],Resources.getInstance().wireCubeEdgeColor[1],Resources.getInstance().wireCubeEdgeColor[2],Resources.getInstance().wireCubeEdgeColor[3]);
    wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
  }
  pRay.set(player.position,player.direction);
  float oldDst=1111f;
  nextBlock=new Renderable();
  for (int i=0; i < renderObjects.size; i++) {
    if (!(renderObjects.get(i) instanceof Player) && !(renderObjects.get(i) instanceof Switch)) {
      boolean intersect=Intersector.intersectRaySphere(pRay,renderObjects.get(i).position,1f,intersection);
      float dst=intersection.dst(player.position);
      if (dst < oldDst && intersect) {
        nextBlock=renderObjects.get(i);
        oldDst=dst;
      }
      renderObjects.get(i).isHighlightAnimation=false;
    }
  }
  if (oldDst > 1.0f && nextBlock != null) {
    nextBlock.isHighlightAnimation=true;
  }
  for (int i=0; i < renderObjects.size; ++i) {
    if (renderObjects.get(i).isCollidedAnimation == true && renderObjects.get(i).collideAnimation == 0) {
      renderObjects.get(i).collideAnimation=1.0f;
    }
    if (renderObjects.get(i).collideAnimation > 0.0f) {
      renderObjects.get(i).collideAnimation-=delta * 1.f;
      renderObjects.get(i).collideAnimation=Math.max(0.0f,renderObjects.get(i).collideAnimation);
      if (renderObjects.get(i).collideAnimation == 0.0f)       renderObjects.get(i).isCollidedAnimation=false;
    }
    if (renderObjects.get(i).isHighlightAnimation == true && renderObjects.get(i).isHighlightAnimationFadeInOut) {
      renderObjects.get(i).highlightAnimation+=delta / 6.f;
      renderObjects.get(i).highlightAnimation=Math.min(0.5f,renderObjects.get(i).highlightAnimation);
      if (renderObjects.get(i).highlightAnimation >= 0.5) {
        renderObjects.get(i).isHighlightAnimationFadeInOut=!renderObjects.get(i).isHighlightAnimationFadeInOut;
      }
    }
    if (renderObjects.get(i).isHighlightAnimation == true && !renderObjects.get(i).isHighlightAnimationFadeInOut) {
      renderObjects.get(i).highlightAnimation-=delta / 6.f;
      renderObjects.get(i).highlightAnimation=Math.max(0.0f,renderObjects.get(i).highlightAnimation);
      if (renderObjects.get(i).highlightAnimation <= 0) {
        renderObjects.get(i).isHighlightAnimationFadeInOut=!renderObjects.get(i).isHighlightAnimationFadeInOut;
      }
    }
    if (renderObjects.get(i).isHighlightAnimation == false) {
      renderObjects.get(i).highlightAnimation-=delta / 1.f;
      renderObjects.get(i).highlightAnimation=Math.max(0.0f,renderObjects.get(i).highlightAnimation);
      if (renderObjects.get(i).highlightAnimation <= 0) {
        renderObjects.get(i).isHighlightAnimationFadeInOut=!renderObjects.get(i).isHighlightAnimationFadeInOut;
      }
    }
    if (renderObjects.get(i) instanceof SwitchableBlock) {
      if (((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation == true && ((SwitchableBlock)renderObjects.get(i)).isSwitched == true && ((SwitchableBlock)renderObjects.get(i)).switchAnimation == 0) {
        ((SwitchableBlock)renderObjects.get(i)).switchAnimation=0.0f;
      }
      if (((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation == true && ((SwitchableBlock)renderObjects.get(i)).isSwitched == false && ((SwitchableBlock)renderObjects.get(i)).switchAnimation == 1) {
        ((SwitchableBlock)renderObjects.get(i)).switchAnimation=1.0f;
      }
      if (((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation == true) {
        if (!((SwitchableBlock)renderObjects.get(i)).isSwitched) {
          ((SwitchableBlock)renderObjects.get(i)).switchAnimation-=delta * 1.f;
          ((SwitchableBlock)renderObjects.get(i)).switchAnimation=Math.max(0.0f,((SwitchableBlock)renderObjects.get(i)).switchAnimation);
          if (((SwitchableBlock)renderObjects.get(i)).switchAnimation == 0.0f)           ((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation=false;
        }
 else {
          ((SwitchableBlock)renderObjects.get(i)).switchAnimation+=delta * 1.f;
          ((SwitchableBlock)renderObjects.get(i)).switchAnimation=Math.min(1.0f,((SwitchableBlock)renderObjects.get(i)).switchAnimation);
          if (((SwitchableBlock)renderObjects.get(i)).switchAnimation == 1.0f)           ((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation=false;
        }
      }
    }
    if (renderObjects.get(i) instanceof Block) {
      model.set(renderObjects.get(i).model);
      transShader.setUniformMatrix(""String_Node_Str"",model);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().blockColor[0],Resources.getInstance().blockColor[1],Resources.getInstance().blockColor[2],Resources.getInstance().blockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
      blockModel.render(transShader,GL20.GL_TRIANGLES);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().blockEdgeColor[0],Resources.getInstance().blockEdgeColor[1],Resources.getInstance().blockEdgeColor[2],Resources.getInstance().blockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
      wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
    }
    if (renderObjects.get(i) instanceof MovableBlock) {
      model.set(renderObjects.get(i).model);
      transShader.setUniformMatrix(""String_Node_Str"",model);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().movableBlockColor[0],Resources.getInstance().movableBlockColor[1],Resources.getInstance().movableBlockColor[2],Resources.getInstance().movableBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
      wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().movableBlockEdgeColor[0],Resources.getInstance().movableBlockEdgeColor[1],Resources.getInstance().movableBlockEdgeColor[2],Resources.getInstance().movableBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
      blockModel.render(transShader,GL20.GL_TRIANGLES);
    }
    if (renderObjects.get(i) instanceof SwitchableBlock) {
      if (!((SwitchableBlock)renderObjects.get(i)).isSwitched || ((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation == true) {
        model.set(renderObjects.get(i).model);
        SwitchableBlock tmpSwitchb=(SwitchableBlock)renderObjects.get(i);
switch (Math.abs(tmpSwitchb.id)) {
case 10:
          tmp.setToScaling(0.3f,0.3f,0.3f);
        model.mul(tmp);
      transShader.setUniformMatrix(""String_Node_Str"",model);
    transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
  playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(3f,3f,3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[1] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[2] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
break;
case 12:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(3f,3f,3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[1] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[2] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
break;
case 13:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
coneModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(3f,3f,3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[1] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[2] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
break;
default :
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(3f,3f,3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[1] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[2] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
break;
}
}
}
if (renderObjects.get(i) instanceof Switch) {
model.set(renderObjects.get(i).model);
Switch tmpSwitch=(Switch)renderObjects.get(i);
switch (Math.abs(tmpSwitch.id)) {
case 10:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f,2.0f,2.0f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0],Resources.getInstance().switchBlockEdgeColor[1],Resources.getInstance().switchBlockEdgeColor[2],Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
break;
case 12:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f,2.0f,2.0f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0],Resources.getInstance().switchBlockEdgeColor[1],Resources.getInstance().switchBlockEdgeColor[2],Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
break;
case 13:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
coneModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f,2.0f,2.0f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0],Resources.getInstance().switchBlockEdgeColor[1],Resources.getInstance().switchBlockEdgeColor[2],Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
break;
default :
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f,2.0f,2.0f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0],Resources.getInstance().switchBlockEdgeColor[1],Resources.getInstance().switchBlockEdgeColor[2],Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
break;
}
}
if (renderObjects.get(i) instanceof Player) {
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXBack);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYBack);
model.mul(tmp);
tmp.setToScaling(0.5f,0.5f,0.5f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().playerColor[0],Resources.getInstance().playerColor[1],Resources.getInstance().playerColor[2],Resources.getInstance().playerColor[3] + renderObjects.get(i).collideAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f - (renderObjects.get(i).collideAnimation),2.0f - (renderObjects.get(i).collideAnimation),2.0f - (renderObjects.get(i).collideAnimation));
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().playerEdgeColor[0],Resources.getInstance().playerEdgeColor[1],Resources.getInstance().playerEdgeColor[2],Resources.getInstance().playerEdgeColor[3] + renderObjects.get(i).collideAnimation);
playerModel.render(transShader,GL20.GL_LINE_STRIP);
playerModel.render(transShader,GL20.GL_LINE_STRIP,0,(int)(playerModel.getNumVertices() - (renderObjects.get(i).collideAnimation * playerModel.getNumVertices())));
}
if (renderObjects.get(i) instanceof Portal) {
if (renderObjects.get(i).position.x != -11) {
Portal tmpPortal=(Portal)renderObjects.get(i);
switch (Math.abs(tmpPortal.id)) {
case 4:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor[0],Resources.getInstance().portalColor[1],Resources.getInstance().portalColor[2],Resources.getInstance().portalColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor[0],Resources.getInstance().portalColor[1],Resources.getInstance().portalColor[2],Resources.getInstance().portalColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
case 5:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor2[0],Resources.getInstance().portalColor2[1],Resources.getInstance().portalColor2[2],Resources.getInstance().portalColor2[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor2[0],Resources.getInstance().portalColor2[1],Resources.getInstance().portalColor2[2],Resources.getInstance().portalColor2[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
case 6:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor3[0],Resources.getInstance().portalColor3[1],Resources.getInstance().portalColor3[2],Resources.getInstance().portalColor3[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor3[0],Resources.getInstance().portalColor3[1],Resources.getInstance().portalColor3[2],Resources.getInstance().portalColor3[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
case 7:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor4[0],Resources.getInstance().portalColor4[1],Resources.getInstance().portalColor4[2],Resources.getInstance().portalColor4[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor4[0],Resources.getInstance().portalColor4[1],Resources.getInstance().portalColor4[2],Resources.getInstance().portalColor4[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
case 8:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor5[0],Resources.getInstance().portalColor5[1],Resources.getInstance().portalColor5[2],Resources.getInstance().portalColor5[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor5[0],Resources.getInstance().portalColor5[1],Resources.getInstance().portalColor5[2],Resources.getInstance().portalColor5[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
default :
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor[0],Resources.getInstance().portalColor[1],Resources.getInstance().portalColor[2],Resources.getInstance().portalColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor[0],Resources.getInstance().portalColor[1],Resources.getInstance().portalColor[2],Resources.getInstance().portalColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
}
}
}
if (renderObjects.get(i) instanceof Target) {
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.Y,angleY + angleYBack);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().targetColor[0],Resources.getInstance().targetColor[1],Resources.getInstance().targetColor[2],Resources.getInstance().targetColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
targetModel.render(transShader,GL20.GL_TRIANGLES);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().targetEdgeColor[0],Resources.getInstance().targetEdgeColor[1],Resources.getInstance().targetEdgeColor[2],Resources.getInstance().targetEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
targetModel.render(transShader,GL20.GL_LINE_STRIP);
}
}
transShader.end();
}","private void renderScene(){
  Gdx.gl.glEnable(GL20.GL_CULL_FACE);
  Gdx.gl20.glEnable(GL20.GL_BLEND);
  Gdx.gl20.glBlendFunc(GL20.GL_SRC_ALPHA,GL20.GL_ONE_MINUS_SRC_ALPHA);
  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
  transShader.begin();
  transShader.setUniformMatrix(""String_Node_Str"",cam.combined);
{
    tmp.idt();
    model.idt();
    tmp.setToScaling(20.5f,20.5f,20.5f);
    model.mul(tmp);
    tmp.setToRotation(Vector3.X,angleX + angleXBack);
    model.mul(tmp);
    tmp.setToRotation(Vector3.Y,angleY + angleYBack);
    model.mul(tmp);
    tmp.setToTranslation(0,0,0);
    model.mul(tmp);
    transShader.setUniformMatrix(""String_Node_Str"",model);
    transShader.setUniformf(""String_Node_Str"",Resources.getInstance().backgroundWireColor[0],Resources.getInstance().backgroundWireColor[1],Resources.getInstance().backgroundWireColor[2],Resources.getInstance().backgroundWireColor[3]);
    playerModel.render(transShader,GL20.GL_LINE_STRIP);
  }
{
    tmp.idt();
    model.idt();
    tmp.setToScaling(5.5f,5.5f,5.5f);
    model.mul(tmp);
    tmp.setToRotation(Vector3.X,angleX);
    model.mul(tmp);
    tmp.setToRotation(Vector3.Y,angleY);
    model.mul(tmp);
    tmp.setToTranslation(0,0,0);
    model.mul(tmp);
    transShader.setUniformMatrix(""String_Node_Str"",model);
    transShader.setUniformf(""String_Node_Str"",Resources.getInstance().clearColor[0],Resources.getInstance().clearColor[1],Resources.getInstance().clearColor[2],Resources.getInstance().clearColor[3]);
    blockModel.render(transShader,GL20.GL_TRIANGLES);
    transShader.setUniformf(""String_Node_Str"",Resources.getInstance().wireCubeEdgeColor[0],Resources.getInstance().wireCubeEdgeColor[1],Resources.getInstance().wireCubeEdgeColor[2],Resources.getInstance().wireCubeEdgeColor[3]);
    wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
  }
  pRay.set(player.position,player.direction);
  float oldDst=1111f;
  nextBlock=new Renderable();
  for (int i=0; i < renderObjects.size; i++) {
    if (!(renderObjects.get(i) instanceof Player) && !(renderObjects.get(i) instanceof Switch) && !((renderObjects.get(i) instanceof SwitchableBlock) && ((SwitchableBlock)renderObjects.get(i)).isSwitched)) {
      boolean intersect=Intersector.intersectRaySphere(pRay,renderObjects.get(i).position,1f,intersection);
      float dst=intersection.dst(player.position);
      if (dst < oldDst && intersect) {
        nextBlock=renderObjects.get(i);
        oldDst=dst;
      }
      renderObjects.get(i).isHighlightAnimation=false;
    }
  }
  if (oldDst > 1.0f && nextBlock != null) {
    nextBlock.isHighlightAnimation=true;
  }
  for (int i=0; i < renderObjects.size; ++i) {
    if (renderObjects.get(i).isCollidedAnimation == true && renderObjects.get(i).collideAnimation == 0) {
      renderObjects.get(i).collideAnimation=1.0f;
    }
    if (renderObjects.get(i).collideAnimation > 0.0f) {
      renderObjects.get(i).collideAnimation-=delta * 1.f;
      renderObjects.get(i).collideAnimation=Math.max(0.0f,renderObjects.get(i).collideAnimation);
      if (renderObjects.get(i).collideAnimation == 0.0f)       renderObjects.get(i).isCollidedAnimation=false;
    }
    if (renderObjects.get(i).isHighlightAnimation == true && renderObjects.get(i).isHighlightAnimationFadeInOut) {
      renderObjects.get(i).highlightAnimation+=delta / 6.f;
      renderObjects.get(i).highlightAnimation=Math.min(0.5f,renderObjects.get(i).highlightAnimation);
      if (renderObjects.get(i).highlightAnimation >= 0.5) {
        renderObjects.get(i).isHighlightAnimationFadeInOut=!renderObjects.get(i).isHighlightAnimationFadeInOut;
      }
    }
    if (renderObjects.get(i).isHighlightAnimation == true && !renderObjects.get(i).isHighlightAnimationFadeInOut) {
      renderObjects.get(i).highlightAnimation-=delta / 6.f;
      renderObjects.get(i).highlightAnimation=Math.max(0.0f,renderObjects.get(i).highlightAnimation);
      if (renderObjects.get(i).highlightAnimation <= 0) {
        renderObjects.get(i).isHighlightAnimationFadeInOut=!renderObjects.get(i).isHighlightAnimationFadeInOut;
      }
    }
    if (renderObjects.get(i).isHighlightAnimation == false) {
      renderObjects.get(i).highlightAnimation-=delta / 1.f;
      renderObjects.get(i).highlightAnimation=Math.max(0.0f,renderObjects.get(i).highlightAnimation);
      if (renderObjects.get(i).highlightAnimation <= 0) {
        renderObjects.get(i).isHighlightAnimationFadeInOut=!renderObjects.get(i).isHighlightAnimationFadeInOut;
      }
    }
    if (renderObjects.get(i) instanceof SwitchableBlock) {
      if (((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation == true && ((SwitchableBlock)renderObjects.get(i)).isSwitched == true && ((SwitchableBlock)renderObjects.get(i)).switchAnimation == 0) {
        ((SwitchableBlock)renderObjects.get(i)).switchAnimation=0.0f;
      }
      if (((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation == true && ((SwitchableBlock)renderObjects.get(i)).isSwitched == false && ((SwitchableBlock)renderObjects.get(i)).switchAnimation == 1) {
        ((SwitchableBlock)renderObjects.get(i)).switchAnimation=1.0f;
      }
      if (((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation == true) {
        if (!((SwitchableBlock)renderObjects.get(i)).isSwitched) {
          ((SwitchableBlock)renderObjects.get(i)).switchAnimation-=delta * 1.f;
          ((SwitchableBlock)renderObjects.get(i)).switchAnimation=Math.max(0.0f,((SwitchableBlock)renderObjects.get(i)).switchAnimation);
          if (((SwitchableBlock)renderObjects.get(i)).switchAnimation == 0.0f)           ((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation=false;
        }
 else {
          ((SwitchableBlock)renderObjects.get(i)).switchAnimation+=delta * 1.f;
          ((SwitchableBlock)renderObjects.get(i)).switchAnimation=Math.min(1.0f,((SwitchableBlock)renderObjects.get(i)).switchAnimation);
          if (((SwitchableBlock)renderObjects.get(i)).switchAnimation == 1.0f)           ((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation=false;
        }
      }
    }
    if (renderObjects.get(i) instanceof Block) {
      model.set(renderObjects.get(i).model);
      transShader.setUniformMatrix(""String_Node_Str"",model);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().blockColor[0],Resources.getInstance().blockColor[1],Resources.getInstance().blockColor[2],Resources.getInstance().blockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
      blockModel.render(transShader,GL20.GL_TRIANGLES);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().blockEdgeColor[0],Resources.getInstance().blockEdgeColor[1],Resources.getInstance().blockEdgeColor[2],Resources.getInstance().blockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
      wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
    }
    if (renderObjects.get(i) instanceof MovableBlock) {
      model.set(renderObjects.get(i).model);
      transShader.setUniformMatrix(""String_Node_Str"",model);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().movableBlockColor[0],Resources.getInstance().movableBlockColor[1],Resources.getInstance().movableBlockColor[2],Resources.getInstance().movableBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
      wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().movableBlockEdgeColor[0],Resources.getInstance().movableBlockEdgeColor[1],Resources.getInstance().movableBlockEdgeColor[2],Resources.getInstance().movableBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
      blockModel.render(transShader,GL20.GL_TRIANGLES);
    }
    if (renderObjects.get(i) instanceof SwitchableBlock) {
      if (!((SwitchableBlock)renderObjects.get(i)).isSwitched || ((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation == true) {
        model.set(renderObjects.get(i).model);
        SwitchableBlock tmpSwitchb=(SwitchableBlock)renderObjects.get(i);
switch (Math.abs(tmpSwitchb.id)) {
case 10:
          tmp.setToScaling(0.3f,0.3f,0.3f);
        model.mul(tmp);
      transShader.setUniformMatrix(""String_Node_Str"",model);
    transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
  playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(3f,3f,3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[1] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[2] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
break;
case 12:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(3f,3f,3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[1] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[2] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
break;
case 13:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
coneModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(3f,3f,3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[1] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[2] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
break;
default :
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(3f,3f,3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[1] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[2] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
break;
}
}
}
if (renderObjects.get(i) instanceof Switch) {
model.set(renderObjects.get(i).model);
Switch tmpSwitch=(Switch)renderObjects.get(i);
switch (Math.abs(tmpSwitch.id)) {
case 10:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f,2.0f,2.0f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0],Resources.getInstance().switchBlockEdgeColor[1],Resources.getInstance().switchBlockEdgeColor[2],Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
break;
case 12:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f,2.0f,2.0f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0],Resources.getInstance().switchBlockEdgeColor[1],Resources.getInstance().switchBlockEdgeColor[2],Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
break;
case 13:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
coneModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f,2.0f,2.0f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0],Resources.getInstance().switchBlockEdgeColor[1],Resources.getInstance().switchBlockEdgeColor[2],Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
break;
default :
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f,2.0f,2.0f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0],Resources.getInstance().switchBlockEdgeColor[1],Resources.getInstance().switchBlockEdgeColor[2],Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
break;
}
}
if (renderObjects.get(i) instanceof Player) {
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXBack);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYBack);
model.mul(tmp);
tmp.setToScaling(0.5f,0.5f,0.5f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().playerColor[0],Resources.getInstance().playerColor[1],Resources.getInstance().playerColor[2],Resources.getInstance().playerColor[3] + renderObjects.get(i).collideAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f - (renderObjects.get(i).collideAnimation),2.0f - (renderObjects.get(i).collideAnimation),2.0f - (renderObjects.get(i).collideAnimation));
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().playerEdgeColor[0],Resources.getInstance().playerEdgeColor[1],Resources.getInstance().playerEdgeColor[2],Resources.getInstance().playerEdgeColor[3] + renderObjects.get(i).collideAnimation);
playerModel.render(transShader,GL20.GL_LINE_STRIP);
playerModel.render(transShader,GL20.GL_LINE_STRIP,0,(int)(playerModel.getNumVertices() - (renderObjects.get(i).collideAnimation * playerModel.getNumVertices())));
}
if (renderObjects.get(i) instanceof Portal) {
if (renderObjects.get(i).position.x != -11) {
Portal tmpPortal=(Portal)renderObjects.get(i);
switch (Math.abs(tmpPortal.id)) {
case 4:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor[0],Resources.getInstance().portalColor[1],Resources.getInstance().portalColor[2],Resources.getInstance().portalColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor[0],Resources.getInstance().portalColor[1],Resources.getInstance().portalColor[2],Resources.getInstance().portalColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
case 5:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor2[0],Resources.getInstance().portalColor2[1],Resources.getInstance().portalColor2[2],Resources.getInstance().portalColor2[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor2[0],Resources.getInstance().portalColor2[1],Resources.getInstance().portalColor2[2],Resources.getInstance().portalColor2[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
case 6:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor3[0],Resources.getInstance().portalColor3[1],Resources.getInstance().portalColor3[2],Resources.getInstance().portalColor3[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor3[0],Resources.getInstance().portalColor3[1],Resources.getInstance().portalColor3[2],Resources.getInstance().portalColor3[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
case 7:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor4[0],Resources.getInstance().portalColor4[1],Resources.getInstance().portalColor4[2],Resources.getInstance().portalColor4[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor4[0],Resources.getInstance().portalColor4[1],Resources.getInstance().portalColor4[2],Resources.getInstance().portalColor4[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
case 8:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor5[0],Resources.getInstance().portalColor5[1],Resources.getInstance().portalColor5[2],Resources.getInstance().portalColor5[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor5[0],Resources.getInstance().portalColor5[1],Resources.getInstance().portalColor5[2],Resources.getInstance().portalColor5[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
default :
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor[0],Resources.getInstance().portalColor[1],Resources.getInstance().portalColor[2],Resources.getInstance().portalColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor[0],Resources.getInstance().portalColor[1],Resources.getInstance().portalColor[2],Resources.getInstance().portalColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
}
}
}
if (renderObjects.get(i) instanceof Target) {
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.Y,angleY + angleYBack);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().targetColor[0],Resources.getInstance().targetColor[1],Resources.getInstance().targetColor[2],Resources.getInstance().targetColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
targetModel.render(transShader,GL20.GL_TRIANGLES);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().targetEdgeColor[0],Resources.getInstance().targetEdgeColor[1],Resources.getInstance().targetEdgeColor[2],Resources.getInstance().targetEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
targetModel.render(transShader,GL20.GL_LINE_STRIP);
}
}
transShader.end();
}"
81182,"@Override public void render(float deltaTime){
  delta=Math.min(0.02f,deltaTime);
  startTime+=delta;
  touchTime+=Gdx.graphics.getDeltaTime();
  angleXBack+=MathUtils.sin(startTime) * delta * 10f;
  angleYBack+=MathUtils.cos(startTime) * delta * 5f;
  angleXFront+=MathUtils.sin(startTime) * delta * 10f;
  angleYFront+=MathUtils.cos(startTime) * delta * 5f;
  cam.update();
  if (player != null && player.isMoving) {
    player.position.add(player.direction.x * delta * 10f,player.direction.y * delta * 10f,player.direction.z * delta * 10f);
  }
  for (  MovableBlock m : movableBlocks) {
    if (m.isMoving) {
      m.position.add(m.direction.x * delta * 10f,m.direction.y * delta * 10f,m.direction.z * delta * 10f);
    }
  }
  collisionTest();
  sortScene();
  renderScene();
  if (Resources.getInstance().bloomOnOff) {
    frameBuffer.begin();
    renderScene();
    frameBuffer.end();
    Gdx.gl.glDisable(GL20.GL_CULL_FACE);
    Gdx.gl.glDisable(GL20.GL_DEPTH_TEST);
    Gdx.gl.glDisable(GL20.GL_BLEND);
    bloomShader.begin();
    frameBuffer.getColorBufferTexture().bind(0);
    bloomShader.setUniformi(""String_Node_Str"",0);
    bloomShader.setUniformf(""String_Node_Str"",Helper.map((MathUtils.sin(startTime * 3f) * 0.5f + (changeLevelEffect * 4f)) + 0.5f,0,1,0.67f,0.75f));
    frameBufferVert.begin();
    bloomShader.setUniformf(""String_Node_Str"",Resources.getInstance().m_fTexelOffset);
    bloomShader.setUniformf(""String_Node_Str"",0.0f);
    quadModel.render(bloomShader,GL20.GL_TRIANGLE_STRIP);
    frameBufferVert.end();
    frameBufferVert.getColorBufferTexture().bind(0);
    frameBuffer.begin();
    bloomShader.setUniformf(""String_Node_Str"",0.0f);
    bloomShader.setUniformf(""String_Node_Str"",Resources.getInstance().m_fTexelOffset);
    quadModel.render(bloomShader,GL20.GL_TRIANGLE_STRIP);
    frameBuffer.end();
    frameBuffer.getColorBufferTexture().bind(0);
    frameBufferVert.begin();
    bloomShader.setUniformf(""String_Node_Str"",Resources.getInstance().m_fTexelOffset / 2);
    bloomShader.setUniformf(""String_Node_Str"",Resources.getInstance().m_fTexelOffset / 2);
    quadModel.render(bloomShader,GL20.GL_TRIANGLE_STRIP);
    frameBufferVert.end();
    bloomShader.end();
    batch.setBlendFunction(GL20.GL_ONE,GL20.GL_ONE);
    batch.getProjectionMatrix().setToOrtho2D(0,0,Resources.getInstance().m_i32TexSize,Resources.getInstance().m_i32TexSize);
    batch.begin();
    batch.draw(frameBufferVert.getColorBufferTexture(),0,0);
    batch.end();
    batch.getProjectionMatrix().setToOrtho2D(0,0,800,480);
    if (Gdx.graphics.getBufferFormat().coverageSampling) {
      Gdx.gl.glClear(GL20.GL_COVERAGE_BUFFER_BIT_NV);
      Gdx.graphics.getGL20().glColorMask(false,false,false,false);
      renderScene();
      Gdx.graphics.getGL20().glColorMask(true,true,true,true);
      Gdx.gl.glDisable(GL20.GL_CULL_FACE);
      Gdx.gl.glDisable(GL20.GL_DEPTH_TEST);
      Gdx.gl.glDisable(GL20.GL_BLEND);
    }
  }
 else {
    Gdx.gl.glDisable(GL20.GL_CULL_FACE);
    Gdx.gl.glDisable(GL20.GL_DEPTH_TEST);
    Gdx.gl.glDisable(GL20.GL_BLEND);
  }
  if (!Resources.getInstance().debugMode) {
    fontbatch.getProjectionMatrix().setToOrtho2D(0,0,800,480);
    fontbatch.begin();
    font.draw(fontbatch,""String_Node_Str"" + Resources.getInstance().currentlevel,620,80);
    Resources.getInstance().time+=delta;
    Resources.getInstance().timeAttackTime-=delta;
    if (mode == 0) {
      seconds=(int)Resources.getInstance().time % 60;
      minutes=(int)Resources.getInstance().time / 60;
    }
 else     if (mode == 1) {
      seconds=(int)Resources.getInstance().timeAttackTime % 60;
      minutes=(int)Resources.getInstance().timeAttackTime / 60;
    }
    if (seconds > 9 && minutes > 9)     font.draw(fontbatch,""String_Node_Str"" + minutes + ""String_Node_Str""+ seconds,620,60);
 else     if (seconds > 9 && minutes < 10)     font.draw(fontbatch,""String_Node_Str"" + minutes + ""String_Node_Str""+ seconds,620,60);
 else     if (seconds < 10 && minutes > 9)     font.draw(fontbatch,""String_Node_Str"" + minutes + ""String_Node_Str""+ seconds,620,60);
 else     font.draw(fontbatch,""String_Node_Str"" + minutes + ""String_Node_Str""+ seconds,620,60);
    fontbatch.end();
  }
  if (!finished && fade > 0) {
    fade=Math.max(fade - (delta * 2.f),0);
    fadeBatch.begin();
    blackFade.setColor(blackFade.getColor().r,blackFade.getColor().g,blackFade.getColor().b,fade);
    blackFade.draw(fadeBatch);
    fadeBatch.end();
  }
  if (finished) {
    fade=Math.min(fade + (delta * 2.f),1);
    fadeBatch.begin();
    blackFade.setColor(blackFade.getColor().r,blackFade.getColor().g,blackFade.getColor().b,fade);
    blackFade.draw(fadeBatch);
    fadeBatch.end();
    if (fade >= 1) {
      game.setScreen(new MainMenuScreen(game));
    }
  }
  if (!changeLevel && changeLevelEffect > 0) {
    changeLevelEffect=Math.max(changeLevelEffect - (delta * 15.f),0);
  }
  if (changeLevel) {
    changeLevelEffect=Math.min(changeLevelEffect + (delta * 15.f),5);
    if (!Resources.getInstance().debugMode) {
      if (mode == 1) {
        fontbatch.begin();
        timeAttackFont.draw(fontbatch,""String_Node_Str"",740,40 - changeLevelEffect * 4);
        timeAttackFont.setColor(1,1,1,1 / changeLevelEffect);
        fontbatch.end();
      }
    }
    if (changeLevelEffect >= 5) {
      nextLevel();
    }
  }
  if (Resources.getInstance().timeAttackTime <= 0.5 && mode == 1) {
    finished=true;
    HighScoreManager.getInstance().newTimeAttackHighScore(0,Resources.getInstance().levelcount);
  }
}","@Override public void render(float deltaTime){
  delta=Math.min(0.02f,deltaTime);
  startTime+=delta;
  touchTime+=Gdx.graphics.getDeltaTime();
  angleXBack+=MathUtils.sin(startTime) * delta * 10f;
  angleYBack+=MathUtils.cos(startTime) * delta * 5f;
  angleXFront+=MathUtils.sin(startTime) * delta * 10f;
  angleYFront+=MathUtils.cos(startTime) * delta * 5f;
  cam.update();
  if (player != null && player.isMoving) {
    player.position.add(player.direction.x * delta * 10f,player.direction.y * delta * 10f,player.direction.z * delta * 10f);
  }
  for (  MovableBlock m : movableBlocks) {
    if (m.isMoving) {
      m.position.add(m.direction.x * delta * 10f,m.direction.y * delta * 10f,m.direction.z * delta * 10f);
    }
  }
  collisionTest();
  sortScene();
  renderScene();
  if (Resources.getInstance().bloomOnOff) {
    frameBuffer.begin();
    renderScene();
    frameBuffer.end();
    Gdx.gl.glDisable(GL20.GL_CULL_FACE);
    Gdx.gl.glDisable(GL20.GL_DEPTH_TEST);
    Gdx.gl.glDisable(GL20.GL_BLEND);
    bloomShader.begin();
    frameBuffer.getColorBufferTexture().bind(0);
    bloomShader.setUniformi(""String_Node_Str"",0);
    bloomShader.setUniformf(""String_Node_Str"",Helper.map((MathUtils.sin(startTime * 3f) * 0.5f + (changeLevelEffect * 4f)) + 0.5f,0,1,0.67f,0.75f));
    frameBufferVert.begin();
    bloomShader.setUniformf(""String_Node_Str"",Resources.getInstance().m_fTexelOffset);
    bloomShader.setUniformf(""String_Node_Str"",0.0f);
    quadModel.render(bloomShader,GL20.GL_TRIANGLE_STRIP);
    frameBufferVert.end();
    frameBufferVert.getColorBufferTexture().bind(0);
    frameBuffer.begin();
    bloomShader.setUniformf(""String_Node_Str"",0.0f);
    bloomShader.setUniformf(""String_Node_Str"",Resources.getInstance().m_fTexelOffset);
    quadModel.render(bloomShader,GL20.GL_TRIANGLE_STRIP);
    frameBuffer.end();
    frameBuffer.getColorBufferTexture().bind(0);
    frameBufferVert.begin();
    bloomShader.setUniformf(""String_Node_Str"",Resources.getInstance().m_fTexelOffset / 2);
    bloomShader.setUniformf(""String_Node_Str"",Resources.getInstance().m_fTexelOffset / 2);
    quadModel.render(bloomShader,GL20.GL_TRIANGLE_STRIP);
    frameBufferVert.end();
    bloomShader.end();
    batch.setBlendFunction(GL20.GL_ONE,GL20.GL_ONE);
    batch.getProjectionMatrix().setToOrtho2D(0,0,Resources.getInstance().m_i32TexSize,Resources.getInstance().m_i32TexSize);
    batch.begin();
    batch.draw(frameBufferVert.getColorBufferTexture(),0,0);
    batch.end();
    batch.getProjectionMatrix().setToOrtho2D(0,0,800,480);
    if (Gdx.graphics.getBufferFormat().coverageSampling) {
      Gdx.gl.glClear(GL20.GL_COVERAGE_BUFFER_BIT_NV);
      Gdx.graphics.getGL20().glColorMask(false,false,false,false);
      renderScene();
      Gdx.graphics.getGL20().glColorMask(true,true,true,true);
      Gdx.gl.glDisable(GL20.GL_CULL_FACE);
      Gdx.gl.glDisable(GL20.GL_DEPTH_TEST);
      Gdx.gl.glDisable(GL20.GL_BLEND);
    }
  }
 else {
    Gdx.gl.glDisable(GL20.GL_CULL_FACE);
    Gdx.gl.glDisable(GL20.GL_DEPTH_TEST);
    Gdx.gl.glDisable(GL20.GL_BLEND);
  }
  fontbatch.getProjectionMatrix().setToOrtho2D(0,0,800,480);
  fontbatch.begin();
  font.draw(fontbatch,""String_Node_Str"" + Resources.getInstance().currentlevel,620,80);
  Resources.getInstance().time+=delta;
  Resources.getInstance().timeAttackTime-=delta;
  if (mode == 0) {
    seconds=(int)Resources.getInstance().time % 60;
    minutes=(int)Resources.getInstance().time / 60;
  }
 else   if (mode == 1) {
    seconds=(int)Resources.getInstance().timeAttackTime % 60;
    minutes=(int)Resources.getInstance().timeAttackTime / 60;
  }
  if (seconds > 9 && minutes > 9)   font.draw(fontbatch,""String_Node_Str"" + minutes + ""String_Node_Str""+ seconds,620,60);
 else   if (seconds > 9 && minutes < 10)   font.draw(fontbatch,""String_Node_Str"" + minutes + ""String_Node_Str""+ seconds,620,60);
 else   if (seconds < 10 && minutes > 9)   font.draw(fontbatch,""String_Node_Str"" + minutes + ""String_Node_Str""+ seconds,620,60);
 else   font.draw(fontbatch,""String_Node_Str"" + minutes + ""String_Node_Str""+ seconds,620,60);
  fontbatch.end();
  if (!finished && fade > 0) {
    fade=Math.max(fade - (delta * 2.f),0);
    fadeBatch.begin();
    blackFade.setColor(blackFade.getColor().r,blackFade.getColor().g,blackFade.getColor().b,fade);
    blackFade.draw(fadeBatch);
    fadeBatch.end();
  }
  if (finished) {
    fade=Math.min(fade + (delta * 2.f),1);
    fadeBatch.begin();
    blackFade.setColor(blackFade.getColor().r,blackFade.getColor().g,blackFade.getColor().b,fade);
    blackFade.draw(fadeBatch);
    fadeBatch.end();
    if (fade >= 1) {
      game.setScreen(new MainMenuScreen(game));
    }
  }
  if (!changeLevel && changeLevelEffect > 0) {
    changeLevelEffect=Math.max(changeLevelEffect - (delta * 15.f),0);
  }
  if (changeLevel) {
    changeLevelEffect=Math.min(changeLevelEffect + (delta * 15.f),5);
    if (!Resources.getInstance().debugMode) {
      if (mode == 1) {
        fontbatch.begin();
        timeAttackFont.draw(fontbatch,""String_Node_Str"",740,40 - changeLevelEffect * 4);
        timeAttackFont.setColor(1,1,1,1 / changeLevelEffect);
        fontbatch.end();
      }
    }
    if (changeLevelEffect >= 5) {
      nextLevel();
    }
  }
  if (Resources.getInstance().timeAttackTime <= 0.5 && mode == 1) {
    finished=true;
    HighScoreManager.getInstance().newTimeAttackHighScore(0,Resources.getInstance().levelcount);
  }
}"
81183,"private void nextLevel(){
  if (Resources.getInstance().currentlevel++ < Resources.getInstance().levelcount) {
    Resources.getInstance().currentlevel++;
    Resources.getInstance().time=0;
    initLevel(Resources.getInstance().currentlevel);
    changeLevel=false;
  }
 else {
    game.setScreen(new LevelSelectScreen(game,0));
    changeLevel=false;
  }
}","private void nextLevel(){
  if (Resources.getInstance().currentlevel < Resources.getInstance().levelcount) {
    Resources.getInstance().currentlevel++;
    Resources.getInstance().time=0;
    initLevel(Resources.getInstance().currentlevel);
    changeLevel=false;
  }
 else {
    game.setScreen(new LevelSelectScreen(game,0));
    changeLevel=false;
  }
}"
81184,"private void renderScene(){
  Gdx.gl.glEnable(GL20.GL_CULL_FACE);
  Gdx.gl20.glEnable(GL20.GL_BLEND);
  Gdx.gl20.glBlendFunc(GL20.GL_SRC_ALPHA,GL20.GL_ONE_MINUS_SRC_ALPHA);
  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
  transShader.begin();
  transShader.setUniformMatrix(""String_Node_Str"",cam.combined);
{
    tmp.idt();
    model.idt();
    tmp.setToScaling(20.5f,20.5f,20.5f);
    model.mul(tmp);
    tmp.setToRotation(Vector3.X,angleX + angleXBack);
    model.mul(tmp);
    tmp.setToRotation(Vector3.Y,angleY + angleYBack);
    model.mul(tmp);
    tmp.setToTranslation(0,0,0);
    model.mul(tmp);
    transShader.setUniformMatrix(""String_Node_Str"",model);
    transShader.setUniformf(""String_Node_Str"",Resources.getInstance().backgroundWireColor[0],Resources.getInstance().backgroundWireColor[1],Resources.getInstance().backgroundWireColor[2],Resources.getInstance().backgroundWireColor[3]);
    playerModel.render(transShader,GL20.GL_LINE_STRIP);
  }
{
    tmp.idt();
    model.idt();
    tmp.setToScaling(5.5f,5.5f,5.5f);
    model.mul(tmp);
    tmp.setToRotation(Vector3.X,angleX);
    model.mul(tmp);
    tmp.setToRotation(Vector3.Y,angleY);
    model.mul(tmp);
    tmp.setToTranslation(0,0,0);
    model.mul(tmp);
    transShader.setUniformMatrix(""String_Node_Str"",model);
    transShader.setUniformf(""String_Node_Str"",Resources.getInstance().clearColor[0],Resources.getInstance().clearColor[1],Resources.getInstance().clearColor[2],Resources.getInstance().clearColor[3]);
    blockModel.render(transShader,GL20.GL_TRIANGLES);
    transShader.setUniformf(""String_Node_Str"",Resources.getInstance().wireCubeEdgeColor[0],Resources.getInstance().wireCubeEdgeColor[1],Resources.getInstance().wireCubeEdgeColor[2],Resources.getInstance().wireCubeEdgeColor[3]);
    wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
  }
  pRay.set(player.position,player.direction);
  float oldDst=1111f;
  nextBlock=new Renderable();
  for (  Renderable renderable : renderObjects) {
    if (!(renderable instanceof Player) && !(renderable instanceof Switch)) {
      boolean intersect=Intersector.intersectRaySphere(pRay,renderable.position,1f,intersection);
      float dst=intersection.dst(player.position);
      if (dst < oldDst && intersect) {
        nextBlock=renderable;
        oldDst=dst;
      }
      renderable.isHighlightAnimation=false;
    }
  }
  if (oldDst > 1.0f && nextBlock != null) {
    nextBlock.isHighlightAnimation=true;
  }
  for (int i=0; i < renderObjects.size; ++i) {
    if (renderObjects.get(i).isCollidedAnimation == true && renderObjects.get(i).collideAnimation == 0) {
      renderObjects.get(i).collideAnimation=1.0f;
    }
    if (renderObjects.get(i).collideAnimation > 0.0f) {
      renderObjects.get(i).collideAnimation-=delta * 1.f;
      renderObjects.get(i).collideAnimation=Math.max(0.0f,renderObjects.get(i).collideAnimation);
      if (renderObjects.get(i).collideAnimation == 0.0f)       renderObjects.get(i).isCollidedAnimation=false;
    }
    if (renderObjects.get(i).isHighlightAnimation == true && renderObjects.get(i).isHighlightAnimationFadeInOut) {
      renderObjects.get(i).highlightAnimation+=delta / 6.f;
      renderObjects.get(i).highlightAnimation=Math.min(0.5f,renderObjects.get(i).highlightAnimation);
      if (renderObjects.get(i).highlightAnimation >= 0.5) {
        renderObjects.get(i).isHighlightAnimationFadeInOut=!renderObjects.get(i).isHighlightAnimationFadeInOut;
      }
    }
    if (renderObjects.get(i).isHighlightAnimation == true && !renderObjects.get(i).isHighlightAnimationFadeInOut) {
      renderObjects.get(i).highlightAnimation-=delta / 6.f;
      renderObjects.get(i).highlightAnimation=Math.max(0.0f,renderObjects.get(i).highlightAnimation);
      if (renderObjects.get(i).highlightAnimation <= 0) {
        renderObjects.get(i).isHighlightAnimationFadeInOut=!renderObjects.get(i).isHighlightAnimationFadeInOut;
      }
    }
    if (renderObjects.get(i).isHighlightAnimation == false) {
      renderObjects.get(i).highlightAnimation-=delta / 1.f;
      renderObjects.get(i).highlightAnimation=Math.max(0.0f,renderObjects.get(i).highlightAnimation);
      if (renderObjects.get(i).highlightAnimation <= 0) {
        renderObjects.get(i).isHighlightAnimationFadeInOut=!renderObjects.get(i).isHighlightAnimationFadeInOut;
      }
    }
    if (renderObjects.get(i) instanceof SwitchableBlock) {
      if (((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation == true && ((SwitchableBlock)renderObjects.get(i)).isSwitched == true && ((SwitchableBlock)renderObjects.get(i)).switchAnimation == 0) {
        ((SwitchableBlock)renderObjects.get(i)).switchAnimation=0.0f;
      }
      if (((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation == true && ((SwitchableBlock)renderObjects.get(i)).isSwitched == false && ((SwitchableBlock)renderObjects.get(i)).switchAnimation == 1) {
        ((SwitchableBlock)renderObjects.get(i)).switchAnimation=1.0f;
      }
      if (((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation == true) {
        if (!((SwitchableBlock)renderObjects.get(i)).isSwitched) {
          ((SwitchableBlock)renderObjects.get(i)).switchAnimation-=delta * 1.f;
          ((SwitchableBlock)renderObjects.get(i)).switchAnimation=Math.max(0.0f,((SwitchableBlock)renderObjects.get(i)).switchAnimation);
          if (((SwitchableBlock)renderObjects.get(i)).switchAnimation == 0.0f)           ((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation=false;
        }
 else {
          ((SwitchableBlock)renderObjects.get(i)).switchAnimation+=delta * 1.f;
          ((SwitchableBlock)renderObjects.get(i)).switchAnimation=Math.min(1.0f,((SwitchableBlock)renderObjects.get(i)).switchAnimation);
          if (((SwitchableBlock)renderObjects.get(i)).switchAnimation == 1.0f)           ((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation=false;
        }
      }
    }
    if (renderObjects.get(i) instanceof Block) {
      model.set(renderObjects.get(i).model);
      transShader.setUniformMatrix(""String_Node_Str"",model);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().blockColor[0],Resources.getInstance().blockColor[1],Resources.getInstance().blockColor[2],Resources.getInstance().blockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
      blockModel.render(transShader,GL20.GL_TRIANGLES);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().blockEdgeColor[0],Resources.getInstance().blockEdgeColor[1],Resources.getInstance().blockEdgeColor[2],Resources.getInstance().blockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
      wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
    }
    if (renderObjects.get(i) instanceof MovableBlock) {
      model.set(renderObjects.get(i).model);
      transShader.setUniformMatrix(""String_Node_Str"",model);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().movableBlockColor[0],Resources.getInstance().movableBlockColor[1],Resources.getInstance().movableBlockColor[2],Resources.getInstance().movableBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
      wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().movableBlockEdgeColor[0],Resources.getInstance().movableBlockEdgeColor[1],Resources.getInstance().movableBlockEdgeColor[2],Resources.getInstance().movableBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
      blockModel.render(transShader,GL20.GL_TRIANGLES);
    }
    if (renderObjects.get(i) instanceof SwitchableBlock) {
      if (!((SwitchableBlock)renderObjects.get(i)).isSwitched || ((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation == true) {
        model.set(renderObjects.get(i).model);
        SwitchableBlock tmpSwitchb=(SwitchableBlock)renderObjects.get(i);
switch (Math.abs(tmpSwitchb.id)) {
case 10:
          tmp.setToScaling(0.3f,0.3f,0.3f);
        model.mul(tmp);
      transShader.setUniformMatrix(""String_Node_Str"",model);
    transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
  playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(3f,3f,3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[1] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[2] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
break;
case 12:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(3f,3f,3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[1] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[2] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
break;
case 13:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
coneModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(3f,3f,3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[1] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[2] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
break;
default :
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(3f,3f,3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[1] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[2] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
break;
}
}
}
if (renderObjects.get(i) instanceof Switch) {
model.set(renderObjects.get(i).model);
Switch tmpSwitch=(Switch)renderObjects.get(i);
switch (Math.abs(tmpSwitch.id)) {
case 10:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f,2.0f,2.0f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0],Resources.getInstance().switchBlockEdgeColor[1],Resources.getInstance().switchBlockEdgeColor[2],Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
break;
case 12:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f,2.0f,2.0f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0],Resources.getInstance().switchBlockEdgeColor[1],Resources.getInstance().switchBlockEdgeColor[2],Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
break;
case 13:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
coneModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f,2.0f,2.0f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0],Resources.getInstance().switchBlockEdgeColor[1],Resources.getInstance().switchBlockEdgeColor[2],Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
break;
default :
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f,2.0f,2.0f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0],Resources.getInstance().switchBlockEdgeColor[1],Resources.getInstance().switchBlockEdgeColor[2],Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
break;
}
}
if (renderObjects.get(i) instanceof Player) {
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXBack);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYBack);
model.mul(tmp);
tmp.setToScaling(0.5f,0.5f,0.5f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().playerColor[0],Resources.getInstance().playerColor[1],Resources.getInstance().playerColor[2],Resources.getInstance().playerColor[3] + renderObjects.get(i).collideAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f - (renderObjects.get(i).collideAnimation),2.0f - (renderObjects.get(i).collideAnimation),2.0f - (renderObjects.get(i).collideAnimation));
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().playerEdgeColor[0],Resources.getInstance().playerEdgeColor[1],Resources.getInstance().playerEdgeColor[2],Resources.getInstance().playerEdgeColor[3] + renderObjects.get(i).collideAnimation);
playerModel.render(transShader,GL20.GL_LINE_STRIP);
playerModel.render(transShader,GL20.GL_LINE_STRIP,0,(int)(playerModel.getNumVertices() - (renderObjects.get(i).collideAnimation * playerModel.getNumVertices())));
}
if (renderObjects.get(i) instanceof Portal) {
if (renderObjects.get(i).position.x != -11) {
Portal tmpPortal=(Portal)renderObjects.get(i);
switch (Math.abs(tmpPortal.id)) {
case 4:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor[0],Resources.getInstance().portalColor[1],Resources.getInstance().portalColor[2],Resources.getInstance().portalColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor[0],Resources.getInstance().portalColor[1],Resources.getInstance().portalColor[2],Resources.getInstance().portalColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
case 5:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor2[0],Resources.getInstance().portalColor2[1],Resources.getInstance().portalColor2[2],Resources.getInstance().portalColor2[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor2[0],Resources.getInstance().portalColor2[1],Resources.getInstance().portalColor2[2],Resources.getInstance().portalColor2[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
case 6:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor3[0],Resources.getInstance().portalColor3[1],Resources.getInstance().portalColor3[2],Resources.getInstance().portalColor3[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor3[0],Resources.getInstance().portalColor3[1],Resources.getInstance().portalColor3[2],Resources.getInstance().portalColor3[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
case 7:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor4[0],Resources.getInstance().portalColor4[1],Resources.getInstance().portalColor4[2],Resources.getInstance().portalColor4[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor4[0],Resources.getInstance().portalColor4[1],Resources.getInstance().portalColor4[2],Resources.getInstance().portalColor4[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
case 8:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor5[0],Resources.getInstance().portalColor5[1],Resources.getInstance().portalColor5[2],Resources.getInstance().portalColor5[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor5[0],Resources.getInstance().portalColor5[1],Resources.getInstance().portalColor5[2],Resources.getInstance().portalColor5[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
default :
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor[0],Resources.getInstance().portalColor[1],Resources.getInstance().portalColor[2],Resources.getInstance().portalColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor[0],Resources.getInstance().portalColor[1],Resources.getInstance().portalColor[2],Resources.getInstance().portalColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
}
}
}
if (renderObjects.get(i) instanceof Target) {
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.Y,angleY + angleYBack);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().targetColor[0],Resources.getInstance().targetColor[1],Resources.getInstance().targetColor[2],Resources.getInstance().targetColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
targetModel.render(transShader,GL20.GL_TRIANGLES);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().targetEdgeColor[0],Resources.getInstance().targetEdgeColor[1],Resources.getInstance().targetEdgeColor[2],Resources.getInstance().targetEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
targetModel.render(transShader,GL20.GL_LINE_STRIP);
}
}
transShader.end();
}","private void renderScene(){
  Gdx.gl.glEnable(GL20.GL_CULL_FACE);
  Gdx.gl20.glEnable(GL20.GL_BLEND);
  Gdx.gl20.glBlendFunc(GL20.GL_SRC_ALPHA,GL20.GL_ONE_MINUS_SRC_ALPHA);
  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
  transShader.begin();
  transShader.setUniformMatrix(""String_Node_Str"",cam.combined);
{
    tmp.idt();
    model.idt();
    tmp.setToScaling(20.5f,20.5f,20.5f);
    model.mul(tmp);
    tmp.setToRotation(Vector3.X,angleX + angleXBack);
    model.mul(tmp);
    tmp.setToRotation(Vector3.Y,angleY + angleYBack);
    model.mul(tmp);
    tmp.setToTranslation(0,0,0);
    model.mul(tmp);
    transShader.setUniformMatrix(""String_Node_Str"",model);
    transShader.setUniformf(""String_Node_Str"",Resources.getInstance().backgroundWireColor[0],Resources.getInstance().backgroundWireColor[1],Resources.getInstance().backgroundWireColor[2],Resources.getInstance().backgroundWireColor[3]);
    playerModel.render(transShader,GL20.GL_LINE_STRIP);
  }
{
    tmp.idt();
    model.idt();
    tmp.setToScaling(5.5f,5.5f,5.5f);
    model.mul(tmp);
    tmp.setToRotation(Vector3.X,angleX);
    model.mul(tmp);
    tmp.setToRotation(Vector3.Y,angleY);
    model.mul(tmp);
    tmp.setToTranslation(0,0,0);
    model.mul(tmp);
    transShader.setUniformMatrix(""String_Node_Str"",model);
    transShader.setUniformf(""String_Node_Str"",Resources.getInstance().clearColor[0],Resources.getInstance().clearColor[1],Resources.getInstance().clearColor[2],Resources.getInstance().clearColor[3]);
    blockModel.render(transShader,GL20.GL_TRIANGLES);
    transShader.setUniformf(""String_Node_Str"",Resources.getInstance().wireCubeEdgeColor[0],Resources.getInstance().wireCubeEdgeColor[1],Resources.getInstance().wireCubeEdgeColor[2],Resources.getInstance().wireCubeEdgeColor[3]);
    wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
  }
  pRay.set(player.position,player.direction);
  float oldDst=1111f;
  nextBlock=new Renderable();
  for (int i=0; i < renderObjects.size; i++) {
    if (!(renderObjects.get(i) instanceof Player) && !(renderObjects.get(i) instanceof Switch) && !((renderObjects.get(i) instanceof SwitchableBlock) && ((SwitchableBlock)renderObjects.get(i)).isSwitched)) {
      boolean intersect=Intersector.intersectRaySphere(pRay,renderObjects.get(i).position,1f,intersection);
      float dst=intersection.dst(player.position);
      if (dst < oldDst && intersect) {
        nextBlock=renderObjects.get(i);
        oldDst=dst;
      }
      renderObjects.get(i).isHighlightAnimation=false;
    }
  }
  if (oldDst > 1.0f && nextBlock != null) {
    nextBlock.isHighlightAnimation=true;
  }
  for (int i=0; i < renderObjects.size; ++i) {
    if (renderObjects.get(i).isCollidedAnimation == true && renderObjects.get(i).collideAnimation == 0) {
      renderObjects.get(i).collideAnimation=1.0f;
    }
    if (renderObjects.get(i).collideAnimation > 0.0f) {
      renderObjects.get(i).collideAnimation-=delta * 1.f;
      renderObjects.get(i).collideAnimation=Math.max(0.0f,renderObjects.get(i).collideAnimation);
      if (renderObjects.get(i).collideAnimation == 0.0f)       renderObjects.get(i).isCollidedAnimation=false;
    }
    if (renderObjects.get(i).isHighlightAnimation == true && renderObjects.get(i).isHighlightAnimationFadeInOut) {
      renderObjects.get(i).highlightAnimation+=delta / 6.f;
      renderObjects.get(i).highlightAnimation=Math.min(0.5f,renderObjects.get(i).highlightAnimation);
      if (renderObjects.get(i).highlightAnimation >= 0.5) {
        renderObjects.get(i).isHighlightAnimationFadeInOut=!renderObjects.get(i).isHighlightAnimationFadeInOut;
      }
    }
    if (renderObjects.get(i).isHighlightAnimation == true && !renderObjects.get(i).isHighlightAnimationFadeInOut) {
      renderObjects.get(i).highlightAnimation-=delta / 6.f;
      renderObjects.get(i).highlightAnimation=Math.max(0.0f,renderObjects.get(i).highlightAnimation);
      if (renderObjects.get(i).highlightAnimation <= 0) {
        renderObjects.get(i).isHighlightAnimationFadeInOut=!renderObjects.get(i).isHighlightAnimationFadeInOut;
      }
    }
    if (renderObjects.get(i).isHighlightAnimation == false) {
      renderObjects.get(i).highlightAnimation-=delta / 1.f;
      renderObjects.get(i).highlightAnimation=Math.max(0.0f,renderObjects.get(i).highlightAnimation);
      if (renderObjects.get(i).highlightAnimation <= 0) {
        renderObjects.get(i).isHighlightAnimationFadeInOut=!renderObjects.get(i).isHighlightAnimationFadeInOut;
      }
    }
    if (renderObjects.get(i) instanceof SwitchableBlock) {
      if (((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation == true && ((SwitchableBlock)renderObjects.get(i)).isSwitched == true && ((SwitchableBlock)renderObjects.get(i)).switchAnimation == 0) {
        ((SwitchableBlock)renderObjects.get(i)).switchAnimation=0.0f;
      }
      if (((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation == true && ((SwitchableBlock)renderObjects.get(i)).isSwitched == false && ((SwitchableBlock)renderObjects.get(i)).switchAnimation == 1) {
        ((SwitchableBlock)renderObjects.get(i)).switchAnimation=1.0f;
      }
      if (((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation == true) {
        if (!((SwitchableBlock)renderObjects.get(i)).isSwitched) {
          ((SwitchableBlock)renderObjects.get(i)).switchAnimation-=delta * 1.f;
          ((SwitchableBlock)renderObjects.get(i)).switchAnimation=Math.max(0.0f,((SwitchableBlock)renderObjects.get(i)).switchAnimation);
          if (((SwitchableBlock)renderObjects.get(i)).switchAnimation == 0.0f)           ((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation=false;
        }
 else {
          ((SwitchableBlock)renderObjects.get(i)).switchAnimation+=delta * 1.f;
          ((SwitchableBlock)renderObjects.get(i)).switchAnimation=Math.min(1.0f,((SwitchableBlock)renderObjects.get(i)).switchAnimation);
          if (((SwitchableBlock)renderObjects.get(i)).switchAnimation == 1.0f)           ((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation=false;
        }
      }
    }
    if (renderObjects.get(i) instanceof Block) {
      model.set(renderObjects.get(i).model);
      transShader.setUniformMatrix(""String_Node_Str"",model);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().blockColor[0],Resources.getInstance().blockColor[1],Resources.getInstance().blockColor[2],Resources.getInstance().blockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
      blockModel.render(transShader,GL20.GL_TRIANGLES);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().blockEdgeColor[0],Resources.getInstance().blockEdgeColor[1],Resources.getInstance().blockEdgeColor[2],Resources.getInstance().blockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
      wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
    }
    if (renderObjects.get(i) instanceof MovableBlock) {
      model.set(renderObjects.get(i).model);
      transShader.setUniformMatrix(""String_Node_Str"",model);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().movableBlockColor[0],Resources.getInstance().movableBlockColor[1],Resources.getInstance().movableBlockColor[2],Resources.getInstance().movableBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
      wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
      transShader.setUniformf(""String_Node_Str"",Resources.getInstance().movableBlockEdgeColor[0],Resources.getInstance().movableBlockEdgeColor[1],Resources.getInstance().movableBlockEdgeColor[2],Resources.getInstance().movableBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
      blockModel.render(transShader,GL20.GL_TRIANGLES);
    }
    if (renderObjects.get(i) instanceof SwitchableBlock) {
      if (!((SwitchableBlock)renderObjects.get(i)).isSwitched || ((SwitchableBlock)renderObjects.get(i)).isSwitchAnimation == true) {
        model.set(renderObjects.get(i).model);
        SwitchableBlock tmpSwitchb=(SwitchableBlock)renderObjects.get(i);
switch (Math.abs(tmpSwitchb.id)) {
case 10:
          tmp.setToScaling(0.3f,0.3f,0.3f);
        model.mul(tmp);
      transShader.setUniformMatrix(""String_Node_Str"",model);
    transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
  playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(3f,3f,3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[1] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[2] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
break;
case 12:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(3f,3f,3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[1] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[2] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
break;
case 13:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
coneModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(3f,3f,3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[1] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[2] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
break;
default :
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(3f,3f,3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[1] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[2] * (Math.abs(((SwitchableBlock)renderObjects.get(i)).id)),Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation - ((SwitchableBlock)renderObjects.get(i)).switchAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
break;
}
}
}
if (renderObjects.get(i) instanceof Switch) {
model.set(renderObjects.get(i).model);
Switch tmpSwitch=(Switch)renderObjects.get(i);
switch (Math.abs(tmpSwitch.id)) {
case 10:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f,2.0f,2.0f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0],Resources.getInstance().switchBlockEdgeColor[1],Resources.getInstance().switchBlockEdgeColor[2],Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
break;
case 12:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
blockModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f,2.0f,2.0f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0],Resources.getInstance().switchBlockEdgeColor[1],Resources.getInstance().switchBlockEdgeColor[2],Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
break;
case 13:
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
coneModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f,2.0f,2.0f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0],Resources.getInstance().switchBlockEdgeColor[1],Resources.getInstance().switchBlockEdgeColor[2],Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
break;
default :
tmp.setToScaling(0.3f,0.3f,0.3f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockColor[0],Resources.getInstance().switchBlockColor[1],Resources.getInstance().switchBlockColor[2],Resources.getInstance().switchBlockColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f,2.0f,2.0f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().switchBlockEdgeColor[0],Resources.getInstance().switchBlockEdgeColor[1],Resources.getInstance().switchBlockEdgeColor[2],Resources.getInstance().switchBlockEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
break;
}
}
if (renderObjects.get(i) instanceof Player) {
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXBack);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYBack);
model.mul(tmp);
tmp.setToScaling(0.5f,0.5f,0.5f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().playerColor[0],Resources.getInstance().playerColor[1],Resources.getInstance().playerColor[2],Resources.getInstance().playerColor[3] + renderObjects.get(i).collideAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
tmp.setToScaling(2.0f - (renderObjects.get(i).collideAnimation),2.0f - (renderObjects.get(i).collideAnimation),2.0f - (renderObjects.get(i).collideAnimation));
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().playerEdgeColor[0],Resources.getInstance().playerEdgeColor[1],Resources.getInstance().playerEdgeColor[2],Resources.getInstance().playerEdgeColor[3] + renderObjects.get(i).collideAnimation);
playerModel.render(transShader,GL20.GL_LINE_STRIP);
playerModel.render(transShader,GL20.GL_LINE_STRIP,0,(int)(playerModel.getNumVertices() - (renderObjects.get(i).collideAnimation * playerModel.getNumVertices())));
}
if (renderObjects.get(i) instanceof Portal) {
if (renderObjects.get(i).position.x != -11) {
Portal tmpPortal=(Portal)renderObjects.get(i);
switch (Math.abs(tmpPortal.id)) {
case 4:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor[0],Resources.getInstance().portalColor[1],Resources.getInstance().portalColor[2],Resources.getInstance().portalColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor[0],Resources.getInstance().portalColor[1],Resources.getInstance().portalColor[2],Resources.getInstance().portalColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
case 5:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor2[0],Resources.getInstance().portalColor2[1],Resources.getInstance().portalColor2[2],Resources.getInstance().portalColor2[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor2[0],Resources.getInstance().portalColor2[1],Resources.getInstance().portalColor2[2],Resources.getInstance().portalColor2[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
case 6:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor3[0],Resources.getInstance().portalColor3[1],Resources.getInstance().portalColor3[2],Resources.getInstance().portalColor3[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor3[0],Resources.getInstance().portalColor3[1],Resources.getInstance().portalColor3[2],Resources.getInstance().portalColor3[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
case 7:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor4[0],Resources.getInstance().portalColor4[1],Resources.getInstance().portalColor4[2],Resources.getInstance().portalColor4[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor4[0],Resources.getInstance().portalColor4[1],Resources.getInstance().portalColor4[2],Resources.getInstance().portalColor4[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
case 8:
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor5[0],Resources.getInstance().portalColor5[1],Resources.getInstance().portalColor5[2],Resources.getInstance().portalColor5[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor5[0],Resources.getInstance().portalColor5[1],Resources.getInstance().portalColor5[2],Resources.getInstance().portalColor5[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
default :
model.set(renderObjects.get(i).model);
tmp.setToScaling(0.4f,0.4f,0.4f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor[0],Resources.getInstance().portalColor[1],Resources.getInstance().portalColor[2],Resources.getInstance().portalColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
playerModel.render(transShader,GL20.GL_TRIANGLES);
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.X,angleXFront);
model.mul(tmp);
tmp.setToRotation(Vector3.Y,angleYFront);
model.mul(tmp);
tmp.setToScaling(0.8f,0.8f,0.8f);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().portalColor[0],Resources.getInstance().portalColor[1],Resources.getInstance().portalColor[2],Resources.getInstance().portalColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
wireCubeModel.render(transShader,GL20.GL_LINE_STRIP);
break;
}
}
}
if (renderObjects.get(i) instanceof Target) {
model.set(renderObjects.get(i).model);
tmp.setToRotation(Vector3.Y,angleY + angleYBack);
model.mul(tmp);
transShader.setUniformMatrix(""String_Node_Str"",model);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().targetColor[0],Resources.getInstance().targetColor[1],Resources.getInstance().targetColor[2],Resources.getInstance().targetColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
targetModel.render(transShader,GL20.GL_TRIANGLES);
transShader.setUniformf(""String_Node_Str"",Resources.getInstance().targetEdgeColor[0],Resources.getInstance().targetEdgeColor[1],Resources.getInstance().targetEdgeColor[2],Resources.getInstance().targetEdgeColor[3] + renderObjects.get(i).collideAnimation + renderObjects.get(i).highlightAnimation);
targetModel.render(transShader,GL20.GL_LINE_STRIP);
}
}
transShader.end();
}"
81185,"private static void processBatteryIntent(final Context context,Intent intent){
  boolean newData=false;
  if (Intent.ACTION_SCREEN_OFF.equals(intent.getAction())) {
    if (!screenOff)     newData=true;
    screenOff=true;
  }
 else   if (Intent.ACTION_SCREEN_ON.equals(intent.getAction())) {
    if (screenOff)     newData=true;
    screenOff=false;
  }
 else   if (Intent.ACTION_BATTERY_CHANGED.equals(intent.getAction())) {
    BatteryLevel newLevel=BatteryLevel.parse(intent.getExtras());
    if (newLevel == null)     return;
    if (newLevel.isDifferent(level))     newData=true;
    if ((level == null || level.get_status() == BatteryManager.BATTERY_STATUS_CHARGING) && newLevel.get_status() != BatteryManager.BATTERY_STATUS_CHARGING)     lastCharged=new Date();
    if (newLevel.is_dockFriendly() && level != null && level.get_dock_status() >= Constants.DOCK_STATE_CHARGING && newLevel.get_dock_status() < Constants.DOCK_STATE_CHARGING)     dockLastConnected=new Date();
    if (newLevel.get_dock_level() != null)     lastDockLevel=newLevel.get_dock_level();
    level=newLevel;
  }
  if (!newData || level == null)   return;
  new Thread(new Runnable(){
    @Override public void run(){
      BatteryLevelAdapter.Entry entry=new BatteryLevelAdapter.Entry(level.get_status(),level.get_level(),level.get_dock_status(),level.get_dock_level(),screenOff);
      BatteryLevelAdapter adapter=new BatteryLevelAdapter(context);
      adapter.open();
      adapter.insertEntry(entry);
      adapter.close();
      if (level.is_dockConnected())       mNotificationManager.update(level.get_dock_level());
 else       mNotificationManager.hide();
      WidgetUpdater.updateAllWidgets(context,level,null);
    }
  }
).start();
}","private static void processBatteryIntent(final Context context,Intent intent){
  boolean newData=false;
  if (Intent.ACTION_SCREEN_OFF.equals(intent.getAction())) {
    if (!screenOff)     newData=true;
    screenOff=true;
  }
 else   if (Intent.ACTION_SCREEN_ON.equals(intent.getAction())) {
    if (screenOff)     newData=true;
    screenOff=false;
  }
 else   if (Intent.ACTION_BATTERY_CHANGED.equals(intent.getAction())) {
    BatteryLevel newLevel=BatteryLevel.parse(intent.getExtras());
    if (newLevel == null)     return;
    if (newLevel.isDifferent(level))     newData=true;
    if ((level == null || level.get_status() == BatteryManager.BATTERY_STATUS_CHARGING) && newLevel.get_status() != BatteryManager.BATTERY_STATUS_CHARGING)     lastCharged=new Date();
    if (newLevel.is_dockFriendly() && level != null && level.get_dock_status() >= Constants.DOCK_STATE_CHARGING && newLevel.get_dock_status() < Constants.DOCK_STATE_CHARGING)     dockLastConnected=new Date();
    if (newLevel.get_dock_level() != null)     lastDockLevel=newLevel.get_dock_level();
    level=newLevel;
  }
  if (!newData || level == null)   return;
  new Thread(new Runnable(){
    @Override public void run(){
      BatteryLevelAdapter.Entry entry=new BatteryLevelAdapter.Entry(level.get_status(),level.get_level(),level.get_dock_status(),level.get_dock_level(),screenOff);
      BatteryLevelAdapter adapter=new BatteryLevelAdapter(context);
      adapter.open();
      adapter.insertEntry(entry);
      adapter.close();
      if (level.is_dockConnected())       mNotificationManager.update(level.get_dock_level());
 else       mNotificationManager.hide();
      WidgetUpdater.updateAllWidgets(context,level,null);
    }
  }
).run();
}"
81186,"@Override public int onStartCommand(Intent intent,int flags,int startId){
  final int[] widgetIds=intent.getIntArrayExtra(EXTRA_WIDGET_IDS);
  if (widgetIds != null) {
    new Thread(new Runnable(){
      @Override public void run(){
        WidgetUpdater.updateAllWidgets(BatteryMonitorService.this,level,widgetIds);
      }
    }
).start();
  }
  return START_STICKY;
}","@Override public int onStartCommand(Intent intent,int flags,int startId){
  processStartIntent(intent);
  return START_STICKY;
}"
81187,"public void update(int dockLevel){
  mNotification.setLatestEventInfo(mContext,title,dockLevel + ""String_Node_Str"",null);
  mNotificationManager.notify(NOTIFICATION_DOCK,mNotification);
}","public void update(int dockLevel){
  mNotification.setLatestEventInfo(mContext,title,""String_Node_Str"" + dockLevel + ""String_Node_Str"",null);
  mNotificationManager.notify(NOTIFICATION_DOCK,mNotification);
}"
81188,"@Override public void createPartControl(Composite parent){
  SashForm sash=new SashForm(parent,SWT.HORIZONTAL);
  sash.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  Composite cloudComp=new Composite(sash,SWT.NONE);
  cloudComp.setLayout(new GridLayout());
  cloudComp.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  TagCloud cloud=new TagCloud(cloudComp,SWT.HORIZONTAL | SWT.VERTICAL);
  cloud.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  viewer=new TagCloudViewer(cloud);
  createSideTab(sash);
  sash.setWeights(new int[]{72,28});
  layouter=new DefaultLayouter(20,10);
  viewer.setLayouter(layouter);
  labelProvider=new TypeLabelProvider();
  viewer.setLabelProvider(labelProvider);
  viewer.setContentProvider(new IStructuredContentProvider(){
    @Override public void inputChanged(    Viewer v,    Object oldInput,    Object newInput){
      List<?> list=(List<?>)newInput;
      if (list == null || list.size() == 0)       return;
      labelProvider.setMaxOccurrences(((Type)list.get(0)).getOccurrences());
      int minIndex=Math.min(list.size() - 1,viewer.getMaxWords());
      labelProvider.setMinOccurrences(((Type)list.get(minIndex)).getOccurrences());
    }
    @Override public void dispose(){
    }
    @Override public Object[] getElements(    Object inputElement){
      return ((List<?>)inputElement).toArray();
    }
  }
);
  cloud.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  viewer.getCloud().addControlListener(new ControlListener(){
    @Override public void controlResized(    ControlEvent e){
      viewer.getCloud().zoomFit();
    }
    @Override public void controlMoved(    ControlEvent e){
    }
  }
);
  ArrayList<Type> types=new ArrayList<Type>();
  types.add(new Type(""String_Node_Str"",220));
  types.add(new Type(""String_Node_Str"",150));
  types.add(new Type(""String_Node_Str"",100));
  types.add(new Type(""String_Node_Str"",150));
  int size=55;
  for (int i=0; i < 50; i++) {
    types.add(new Type(""String_Node_Str"",size));
    size--;
  }
  viewer.getCloud().setMaxFontSize(100);
  viewer.getCloud().setMinFontSize(15);
  labelProvider.setColors(options.getColors());
  labelProvider.setFonts(options.getFonts());
  viewer.setInput(types);
}","@Override public void createPartControl(Composite parent){
  SashForm sash=new SashForm(parent,SWT.HORIZONTAL);
  sash.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  Composite cloudComp=new Composite(sash,SWT.NONE);
  cloudComp.setLayout(new GridLayout());
  cloudComp.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  TagCloud cloud=new TagCloud(cloudComp,SWT.HORIZONTAL | SWT.VERTICAL);
  cloud.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  viewer=new TagCloudViewer(cloud);
  layouter=new DefaultLayouter(20,10);
  viewer.setLayouter(layouter);
  labelProvider=new TypeLabelProvider();
  viewer.setLabelProvider(labelProvider);
  viewer.setContentProvider(new IStructuredContentProvider(){
    @Override public void inputChanged(    Viewer v,    Object oldInput,    Object newInput){
      List<?> list=(List<?>)newInput;
      if (list == null || list.size() == 0)       return;
      labelProvider.setMaxOccurrences(((Type)list.get(0)).getOccurrences());
      int minIndex=Math.min(list.size() - 1,viewer.getMaxWords());
      labelProvider.setMinOccurrences(((Type)list.get(minIndex)).getOccurrences());
    }
    @Override public void dispose(){
    }
    @Override public Object[] getElements(    Object inputElement){
      return ((List<?>)inputElement).toArray();
    }
  }
);
  createSideTab(sash);
  cloud.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  viewer.getCloud().addControlListener(new ControlListener(){
    @Override public void controlResized(    ControlEvent e){
      viewer.getCloud().zoomFit();
    }
    @Override public void controlMoved(    ControlEvent e){
    }
  }
);
  ArrayList<Type> types=new ArrayList<Type>();
  types.add(new Type(""String_Node_Str"",220));
  types.add(new Type(""String_Node_Str"",150));
  types.add(new Type(""String_Node_Str"",100));
  types.add(new Type(""String_Node_Str"",150));
  int size=55;
  for (int i=0; i < 50; i++) {
    types.add(new Type(""String_Node_Str"",size));
    size--;
  }
  viewer.getCloud().setMaxFontSize(100);
  viewer.getCloud().setMinFontSize(15);
  labelProvider.setColors(options.getColors());
  labelProvider.setFonts(options.getFonts());
  sash.setWeights(new int[]{72,28});
  viewer.setInput(types);
}"
81189,"protected void initListeners(){
  cloud.addMouseListener(new MouseListener(){
    @Override public void mouseUp(    MouseEvent e){
      Word word=(Word)e.data;
      if (word == null)       return;
      boolean remove=selection.remove(word);
      if (!remove)       selection.add(word);
      cloud.setSelection(selection);
    }
    @Override public void mouseDown(    MouseEvent e){
    }
    @Override public void mouseDoubleClick(    MouseEvent e){
    }
  }
);
  cloud.addMouseWheelListener(new MouseWheelListener(){
    @Override public void mouseScrolled(    MouseEvent e){
      if (e.count > 0) {
        cloud.zoomIn();
      }
 else {
        cloud.zoomOut();
      }
    }
  }
);
  cloud.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent e){
      List<Object> data=new ArrayList<Object>();
      Set<Word> selected=(Set<Word>)e.data;
      for (      Word word : selected) {
        if (word.data != null) {
          data.add(word.data);
        }
      }
      StructuredSelection selection=new StructuredSelection(data);
      fireSelectionChanged(new SelectionChangedEvent(TagCloudViewer.this,selection));
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
}","protected void initListeners(){
  cloud.addMouseListener(new MouseListener(){
    @Override public void mouseUp(    MouseEvent e){
      Word word=(Word)e.data;
      if (word == null)       return;
      boolean remove=selection.remove(word);
      if (!remove)       selection.add(word);
      cloud.setSelection(selection);
    }
    @Override public void mouseDown(    MouseEvent e){
    }
    @Override public void mouseDoubleClick(    MouseEvent e){
    }
  }
);
  cloud.addMouseWheelListener(new MouseWheelListener(){
    @Override public void mouseScrolled(    MouseEvent e){
      if (e.count > 0) {
        cloud.zoomIn();
      }
 else {
        cloud.zoomOut();
      }
    }
  }
);
  cloud.addMouseTrackListener(new MouseTrackListener(){
    @Override public void mouseHover(    MouseEvent e){
    }
    @Override public void mouseExit(    MouseEvent e){
      cloud.setToolTipText(null);
    }
    @Override public void mouseEnter(    MouseEvent e){
      Word word=(Word)e.data;
      ICloudLabelProvider labelProvider=(ICloudLabelProvider)getLabelProvider();
      cloud.setToolTipText(labelProvider.getToolTip(word.data));
    }
  }
);
  cloud.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent e){
      List<Object> data=new ArrayList<Object>();
      Set<Word> selected=(Set<Word>)e.data;
      for (      Word word : selected) {
        if (word.data != null) {
          data.add(word.data);
        }
      }
      StructuredSelection selection=new StructuredSelection(data);
      fireSelectionChanged(new SelectionChangedEvent(TagCloudViewer.this,selection));
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
}"
81190,"@Test public void testMouseListener(){
  TagCloud cloud=new TagCloud(composite,SWT.NONE);
  MouseListener ml=new UniversalListener();
  cloud.addMouseListener(ml);
  cloud.removeMouseListener(ml);
}","@Test public void testMouseListener(){
  TagCloud cloud=new TagCloud(composite,SWT.NONE);
  UniversalListener ml=new UniversalListener();
  List<Word> words=new ArrayList<Word>();
  Word word=getWord();
  words.add(word);
  cloud.setWords(words,null);
  Event e=new Event();
  cloud.addMouseListener(ml);
  cloud.notifyListeners(SWT.MouseUp,e);
  cloud.notifyListeners(SWT.MouseDoubleClick,e);
  cloud.notifyListeners(SWT.MouseDown,e);
  Assert.assertEquals(1,ml.mouseUp);
  Assert.assertEquals(1,ml.mouseDC);
  Assert.assertEquals(1,ml.mouseDown);
  cloud.removeMouseListener(ml);
  cloud.notifyListeners(SWT.MouseUp,e);
  cloud.notifyListeners(SWT.MouseDoubleClick,e);
  cloud.notifyListeners(SWT.MouseDown,e);
  Assert.assertEquals(1,ml.mouseUp);
  Assert.assertEquals(1,ml.mouseDC);
  Assert.assertEquals(1,ml.mouseDown);
}"
81191,"@Test public void testMouseMoveListener(){
  TagCloud cloud=new TagCloud(composite,SWT.NONE);
  MouseMoveListener ml=new UniversalListener();
  cloud.addMouseMoveListener(ml);
  cloud.removeMouseMoveListener(ml);
}","@Test public void testMouseMoveListener(){
  TagCloud cloud=new TagCloud(composite,SWT.NONE);
  List<Word> words=new ArrayList<Word>();
  Word word=getWord();
  words.add(word);
  cloud.setWords(words,null);
  Event e=new Event();
  e.x=word.x;
  e.y=word.y;
  UniversalListener ml=new UniversalListener();
  cloud.addMouseMoveListener(ml);
  cloud.notifyListeners(SWT.MouseMove,e);
  Assert.assertEquals(1,ml.mouseMove);
  cloud.removeMouseMoveListener(ml);
  cloud.notifyListeners(SWT.MouseMove,e);
  Assert.assertEquals(1,ml.mouseMove);
}"
81192,"@Test public void testMouseWheelListener(){
  TagCloud cloud=new TagCloud(composite,SWT.NONE);
  MouseWheelListener ml=new UniversalListener();
  cloud.addMouseWheelListener(ml);
  cloud.removeMouseWheelListener(ml);
}","@Test public void testMouseWheelListener(){
  TagCloud cloud=new TagCloud(composite,SWT.NONE);
  UniversalListener ml=new UniversalListener();
  cloud.addMouseWheelListener(ml);
  cloud.notifyListeners(SWT.MouseWheel,new Event());
  Assert.assertEquals(1,ml.mouseScrolled);
  cloud.removeMouseWheelListener(ml);
  cloud.notifyListeners(SWT.MouseWheel,new Event());
  Assert.assertEquals(1,ml.mouseScrolled);
}"
81193,"@Override public void mouseMove(MouseEvent e){
  mouseMove++;
}","@Override public void mouseMove(MouseEvent e){
  mouseMove++;
  System.out.println(""String_Node_Str"");
}"
81194,"private void drawComponentOutline(Canvas canvas,View view){
  canvas.drawRect(view.getLeft(),view.getTop(),view.getRight(),view.getBottom(),outlinePaint);
}","private void drawComponentOutline(Canvas canvas,View view){
  canvas.drawRect(view.getLeft(),view.getTop() + 1,view.getRight() - 1,view.getBottom() - 1,outlinePaint);
}"
81195,"private void drawLayoutCell(Canvas canvas){
  canvas.drawRect(0,1,getWidth(),getHeight(),cellPaint);
}","private void drawLayoutCell(Canvas canvas){
  canvas.drawRect(0,1,getWidth() - 1,getHeight() - 1,cellPaint);
}"
81196,"private void drawLayoutOutline(Canvas canvas){
  canvas.drawRect(getPaddingLeft(),1 + getPaddingTop(),getWidth() - getPaddingLeft() - getPaddingRight(),getHeight() - getPaddingTop() - getPaddingBottom(),outlinePaint);
}","private void drawLayoutOutline(Canvas canvas){
  canvas.drawRect(getPaddingLeft(),1 + getPaddingTop(),getWidth() - getPaddingLeft() - getPaddingRight()- 1,getHeight() - getPaddingTop() - getPaddingBottom()- 1,outlinePaint);
}"
81197,"private void drawChildCell(Canvas canvas,int[] rect){
  canvas.drawRect(rect[0],rect[1],rect[2] + rect[0],rect[3] + rect[1],cellPaint);
}","private void drawChildCell(Canvas canvas,int[] rect){
  canvas.drawRect(rect[0],rect[1] + 1,rect[2] + rect[0] - 1,rect[3] + rect[1] - 1,cellPaint);
}"
81198,"private void drawComponentOutline(Canvas canvas,View view){
  canvas.drawRect(view.getLeft(),view.getTop() + 1,view.getRight() - 1,view.getBottom() - 1,outlinePaint);
}","private void drawComponentOutline(Canvas canvas,View view){
  canvas.drawRect(view.getLeft(),view.getTop(),view.getRight() - 1,view.getBottom() - 1,outlinePaint);
}"
81199,"private void drawLayoutCell(Canvas canvas){
  canvas.drawRect(0,1,getWidth() - 1,getHeight() - 1,cellPaint);
}","private void drawLayoutCell(Canvas canvas){
  canvas.drawRect(0,0,getWidth() - 1,getHeight() - 1,cellPaint);
}"
81200,"private void drawLayoutOutline(Canvas canvas){
  canvas.drawRect(getPaddingLeft(),1 + getPaddingTop(),getWidth() - getPaddingLeft() - getPaddingRight()- 1,getHeight() - getPaddingTop() - getPaddingBottom()- 1,outlinePaint);
}","private void drawLayoutOutline(Canvas canvas){
  canvas.drawRect(getPaddingLeft(),getPaddingTop(),getWidth() - getPaddingRight() - 1,getHeight() - getPaddingBottom() - 1,outlinePaint);
}"
81201,"private void drawChildCell(Canvas canvas,int[] rect){
  canvas.drawRect(rect[0],rect[1] + 1,rect[2] + rect[0] - 1,rect[3] + rect[1] - 1,cellPaint);
}","private void drawChildCell(Canvas canvas,int[] rect){
  canvas.drawRect(rect[0],rect[1],rect[2] + rect[0] - 1,rect[3] + rect[1] - 1,cellPaint);
}"
81202,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  migLayout=createLayout();
  setContentView(migLayout,new ViewGroup.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT,ViewGroup.LayoutParams.FILL_PARENT));
  toggleDebug();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  migLayout=createLayout();
  setContentView(migLayout,new ViewGroup.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT,ViewGroup.LayoutParams.FILL_PARENT));
  toggleDebug(true);
}"
81203,"private void toggleDebug(){
  final int current=LayoutUtil.getGlobalDebugMillis();
  final int millis=current <= 0 ? 1000 : 0;
  LayoutUtil.setGlobalDebugMillis(millis);
  migLayout.invalidate();
  migLayout.requestLayout();
}","private void toggleDebug(boolean debug){
  if (isDebug() != debug) {
    final int current=migLayout.getLayoutConstraints().getDebugMillis();
    final int millis=current <= 0 ? 1000 : 0;
    migLayout.getLayoutConstraints().setDebugMillis(millis);
    migLayout.invalidate();
    migLayout.requestLayout();
  }
}"
81204,"@Override public boolean onCreateOptionsMenu(Menu menu){
  final MenuItem item=menu.add(""String_Node_Str"");
  item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    public boolean onMenuItemClick(    MenuItem item){
      toggleDebug();
      return true;
    }
  }
);
  final MenuItem edit=menu.add(""String_Node_Str"");
  edit.setCheckable(true);
  edit.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    View.OnLongClickListener editListener=new View.OnLongClickListener(){
      public boolean onLongClick(      View v){
        ComponentResizer.openResizer(v);
        return true;
      }
    }
;
    public boolean onMenuItemClick(    MenuItem item){
      edit.setChecked(!edit.isChecked());
      final View.OnLongClickListener listenerToSet=edit.isChecked() ? editListener : null;
      for (      ViewWrapper w : migLayout.getParentWrapper().getComponents()) {
        w.getComponent().setOnLongClickListener(listenerToSet);
      }
      return true;
    }
  }
);
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  final MenuItem item=menu.add(""String_Node_Str"");
  item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    public boolean onMenuItemClick(    MenuItem item){
      toggleDebug(!isDebug());
      return true;
    }
  }
);
  final MenuItem edit=menu.add(""String_Node_Str"");
  edit.setCheckable(true);
  edit.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener(){
    View.OnLongClickListener editListener=new View.OnLongClickListener(){
      public boolean onLongClick(      View v){
        ComponentResizer.openResizer(v);
        return true;
      }
    }
;
    public boolean onMenuItemClick(    MenuItem item){
      edit.setChecked(!edit.isChecked());
      final View.OnLongClickListener listenerToSet=edit.isChecked() ? editListener : null;
      for (      ViewWrapper w : migLayout.getParentWrapper().getComponents()) {
        w.getComponent().setOnLongClickListener(listenerToSet);
      }
      return true;
    }
  }
);
  return true;
}"
81205,"@Override protected void onStart(){
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
  super.onStart();
  boolean bindSuccessful=bindService(new Intent(Activity_MainDisplay.this,HandbagParseService.class),connParseService,Context.BIND_AUTO_CREATE);
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"" + bindSuccessful);
  if (parseService != null) {
    registerWithParseServer();
  }
  if (commsService != null) {
    registerWithCommsService();
  }
  setContentView(R.layout.mainstage);
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
}","@Override protected void onStart(){
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
  super.onStart();
  if (wasRestart) {
    wasRestart=false;
    finish();
    return;
  }
  boolean bindSuccessful=bindService(new Intent(Activity_MainDisplay.this,HandbagParseService.class),connParseService,Context.BIND_AUTO_CREATE);
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"" + bindSuccessful);
  if (parseService != null) {
    registerWithParseServer();
  }
  if (commsService != null) {
    registerWithCommsService();
  }
  setContentView(R.layout.mainstage);
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
}"
81206,"@Override protected void onStop(){
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
  super.onStop();
  try {
    parseService.send(Message.obtain(null,HandbagParseService.MSG_UI_SHUTDOWN_REQUEST));
  }
 catch (  RemoteException e) {
  }
  try {
    commsService.send(Message.obtain(null,HandbagParseService.MSG_UI_SHUTDOWN_REQUEST));
  }
 catch (  RemoteException e) {
  }
  unbindService(connParseService);
  connParseService=null;
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
}","@Override protected void onStop(){
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
  super.onStop();
  onDestroy();
}"
81207,"public void onServiceConnected(ComponentName className,IBinder service){
  commsService=new Messenger(service);
  commsServiceIsBound=true;
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
  registerWithWiFiCommsService();
}","public void onServiceConnected(ComponentName className,IBinder service){
  commsService=new Messenger(service);
  commsServiceIsBound=true;
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
}"
81208,"@Override protected void onStart(){
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
  super.onStart();
  startService(new Intent(ActivitySetupNetwork.this,HandbagWiFiCommsService.class));
  boolean bindSuccessful=bindService(new Intent(ActivitySetupNetwork.this,HandbagWiFiCommsService.class),connCommsService,Context.BIND_AUTO_CREATE);
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"" + bindSuccessful);
  if (commsService != null) {
    registerWithWiFiCommsService();
  }
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
}","@Override protected void onStart(){
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
  super.onStart();
  startService(new Intent(ActivitySetupNetwork.this,HandbagWiFiCommsService.class));
  boolean bindSuccessful=bindService(new Intent(ActivitySetupNetwork.this,HandbagWiFiCommsService.class),connCommsService,Context.BIND_AUTO_CREATE);
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"" + bindSuccessful);
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
}"
81209,"@Override protected void onStart(){
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
  super.onStart();
  boolean bindSuccessful=bindService(new Intent(Activity_MainDisplay.this,HandbagParseService.class),connParseService,Context.BIND_AUTO_CREATE);
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"" + bindSuccessful);
  if (parseService != null) {
    registerWithParseServer();
  }
  setContentView(R.layout.mainstage);
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
}","@Override protected void onStart(){
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
  super.onStart();
  boolean bindSuccessful=bindService(new Intent(Activity_MainDisplay.this,HandbagParseService.class),connParseService,Context.BIND_AUTO_CREATE);
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"" + bindSuccessful);
  if (parseService != null) {
    registerWithParseServer();
  }
  if (commsService != null) {
    registerWithCommsService();
  }
  setContentView(R.layout.mainstage);
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
}"
81210,"@Override public void handleMessage(Message msg){
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"" + android.os.Process.myTid());
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
switch (msg.what) {
case HandbagParseService.MSG_UI_ACTIVITY_REGISTER:
    Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
  uiActivity=msg.replyTo;
shutdownRequested=false;
try {
uiActivity.send(Message.obtain(null,HandbagUI.MSG_UI_ACTIVITY_REGISTERED));
}
 catch (RemoteException e) {
uiActivity=null;
}
if (uiActivity != null) {
}
break;
case HandbagParseService.MSG_PARSE_SERVICE_REGISTER:
Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
parseService=msg.replyTo;
try {
parseService.send(Message.obtain(null,MSG_PARSE_SERVICE_REGISTERED));
}
 catch (RemoteException e) {
parseService=null;
}
break;
case MSG_UI_CONNECT_TO_TARGET:
Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
connectToTarget(msg.getData());
break;
case MSG_COMMS_SEND_PACKET:
Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
sendPacketToTarget(msg.getData().getStringArray(null));
break;
case MSG_UI_DISCONNECT_FROM_TARGET:
Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
if (targetNetworkConnection != null) {
Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
targetNetworkConnection.cancel(true);
try {
targetNetworkConnection.socket.close();
}
 catch (IOException e) {
e.printStackTrace();
}
catch (NullPointerException e) {
Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
}
}
break;
case HandbagParseService.MSG_UI_SHUTDOWN_REQUEST:
Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
shutdownRequested=true;
if (targetNetworkConnection != null) {
Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
targetNetworkConnection.cancel(true);
}
break;
default :
Log.d(this.getClass().getSimpleName(),""String_Node_Str"" + msg.what);
super.handleMessage(msg);
}
}","@Override public void handleMessage(Message msg){
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"" + android.os.Process.myTid());
  Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
switch (msg.what) {
case MSG_SETUP_ACTIVITY_REGISTER:
    Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
  uiActivity=msg.replyTo;
shutdownRequested=false;
try {
uiActivity.send(Message.obtain(null,Activity_MainDisplay.MSG_DISPLAY_ACTIVITY_REGISTERED));
}
 catch (RemoteException e) {
uiActivity=null;
}
if (uiActivity != null) {
}
break;
case HandbagParseService.MSG_PARSE_SERVICE_REGISTER:
Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
parseService=msg.replyTo;
try {
parseService.send(Message.obtain(null,MSG_PARSE_SERVICE_REGISTERED));
}
 catch (RemoteException e) {
parseService=null;
}
break;
case MSG_UI_CONNECT_TO_TARGET:
Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
connectToTarget(msg.getData());
break;
case MSG_COMMS_SEND_PACKET:
Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
sendPacketToTarget(msg.getData().getStringArray(null));
break;
case MSG_UI_DISCONNECT_FROM_TARGET:
Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
if (targetNetworkConnection != null) {
Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
targetNetworkConnection.cancel(true);
try {
targetNetworkConnection.socket.close();
}
 catch (IOException e) {
e.printStackTrace();
}
catch (NullPointerException e) {
Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
}
}
break;
case HandbagParseService.MSG_UI_SHUTDOWN_REQUEST:
Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
shutdownRequested=true;
if (targetNetworkConnection != null) {
Log.d(this.getClass().getSimpleName(),""String_Node_Str"");
targetNetworkConnection.cancel(true);
}
parseService=null;
break;
default :
Log.d(this.getClass().getSimpleName(),""String_Node_Str"" + msg.what);
super.handleMessage(msg);
}
}"
81211,"public String[] getNextPacket(){
  boolean packetComplete=false;
  String token;
  currentFieldContent.setLength(0);
  fieldsInPacket.clear();
  while (true) {
    scanner.useDelimiter(""String_Node_Str"");
    if ((!scanner.hasNext()) || (packetComplete)) {
      break;
    }
    token=scanner.next();
switch (token.charAt(0)) {
case '\n':
      packetComplete=true;
case ';':
    fieldsInPacket.add(currentFieldContent.toString());
  currentFieldContent.setLength(0);
break;
case '[':
scanner.useDelimiter(""String_Node_Str"");
int stringLength=scanner.nextInt();
scanner.useDelimiter(""String_Node_Str"");
scanner.next();
for (int i=0; i < stringLength; i++) {
currentFieldContent.append(scanner.next());
}
break;
default :
currentFieldContent.append(token);
break;
}
}
return fieldsInPacket.toArray(new String[]{});
}","public String[] getNextPacket(){
  boolean packetComplete=false;
  String token;
  currentFieldContent.setLength(0);
  fieldsInPacket.clear();
  while (true) {
    scanner.useDelimiter(""String_Node_Str"");
    if ((packetComplete) || (!scanner.hasNext())) {
      break;
    }
    token=scanner.next();
switch (token.charAt(0)) {
case '\n':
      packetComplete=true;
case ';':
    fieldsInPacket.add(currentFieldContent.toString());
  currentFieldContent.setLength(0);
break;
case '[':
scanner.useDelimiter(""String_Node_Str"");
int stringLength=scanner.nextInt();
scanner.useDelimiter(""String_Node_Str"");
scanner.next();
for (int i=0; i < stringLength; i++) {
currentFieldContent.append(scanner.next());
}
break;
default :
currentFieldContent.append(token);
break;
}
}
return fieldsInPacket.toArray(new String[]{});
}"
81212,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.receive_layout);
  accountAddressTextView=(TextView)findViewById(R.id.account_address2);
  accountAddressTextView.setText(BitPay.account_pkey);
  receiveAmountText=(EditText)findViewById(R.id.receive_amount);
  receiveAmountText.addTextChangedListener(this);
  Double recAmount=Double.parseDouble(""String_Node_Str"" + receiveAmountText.getText());
  showQrBitmap(BitPay.account_pkey,recAmount,""String_Node_Str"",""String_Node_Str"");
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.receive_layout);
  accountAddressTextView=(TextView)findViewById(R.id.account_address2);
  accountAddressTextView.setText(BitPay.account_pkey);
  accountAddressTextView.setOnClickListener(this);
  receiveAmountText=(EditText)findViewById(R.id.receive_amount);
  receiveAmountText.addTextChangedListener(this);
  Double recAmount=Double.parseDouble(""String_Node_Str"" + receiveAmountText.getText());
  showQrBitmap(BitPay.account_pkey,recAmount,""String_Node_Str"",""String_Node_Str"");
}"
81213,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.send_layout);
  accountAddressTextView=(TextView)findViewById(R.id.account_address1);
  accountAddressTextView.setText(BitPay.account_pkey);
  balanceTextView=(TextView)findViewById(R.id.balance1);
  balanceTextView.setText(BitPay.account_balance + ""String_Node_Str"");
  receiveAccountTextView=(TextView)findViewById(R.id.receive_account);
  receiveAccountTextView.setText(BitPay.send_pkey);
  Button button1=(Button)findViewById(R.id.from_camera_button);
  button1.setOnClickListener(this);
  Button button2=(Button)findViewById(R.id.send_button);
  button2.setOnClickListener(this);
  amountText=(EditText)findViewById(R.id.input_amount);
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.send_layout);
  accountAddressTextView=(TextView)findViewById(R.id.account_address1);
  accountAddressTextView.setText(BitPay.account_pkey);
  accountAddressTextView.setOnClickListener(this);
  balanceTextView=(TextView)findViewById(R.id.balance1);
  balanceTextView.setText(BitPay.account_balance + ""String_Node_Str"");
  receiveAccountTextView=(TextView)findViewById(R.id.receive_account);
  receiveAccountTextView.setText(BitPay.send_pkey);
  Button button1=(Button)findViewById(R.id.from_camera_button);
  button1.setOnClickListener(this);
  Button button2=(Button)findViewById(R.id.send_button);
  button2.setOnClickListener(this);
  amountText=(EditText)findViewById(R.id.input_amount);
}"
81214,"public void onClick(View arg0){
  if (R.id.from_camera_button == arg0.getId()) {
    Log.v(TAG,""String_Node_Str"");
    Intent intent=new Intent(""String_Node_Str"");
    intent.putExtra(""String_Node_Str"",""String_Node_Str"");
    try {
      startActivityForResult(intent,0);
    }
 catch (    Exception e) {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    }
  }
 else   if (R.id.send_button == arg0.getId()) {
    Log.v(TAG,""String_Node_Str"" + this.amountText.getText().toString() + ""String_Node_Str""+ BitPayObj.getBitPayObj().getReceiverAccount());
    try {
      myString=(String)BitPay.downloadHttpsUrl(""String_Node_Str"" + BitPay.account_url + ""String_Node_Str"",""String_Node_Str"" + BitPay.send_pkey + ""String_Node_Str""+ String.valueOf(Long.valueOf(this.amountText.getText().toString()) * 100000000));
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(myString);
      matcher.find();
      BitPay.account_balance=String.valueOf(Double.valueOf(matcher.group(1).toString()) / 100000000);
      balanceTextView.setText(BitPay.account_balance + ""String_Node_Str"");
      Toast.makeText(SendActivity.this,""String_Node_Str"",Toast.LENGTH_LONG).show();
      Toast.makeText(SendActivity.this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    }
 catch (    Exception e) {
      Toast.makeText(SendActivity.this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    }
  }
}","public void onClick(View arg0){
  if (R.id.from_camera_button == arg0.getId()) {
    Log.v(TAG,""String_Node_Str"");
    Intent intent=new Intent(""String_Node_Str"");
    intent.putExtra(""String_Node_Str"",""String_Node_Str"");
    try {
      startActivityForResult(intent,0);
    }
 catch (    Exception e) {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    }
  }
 else   if (R.id.send_button == arg0.getId()) {
    Log.v(TAG,""String_Node_Str"" + this.amountText.getText().toString() + ""String_Node_Str""+ BitPayObj.getBitPayObj().getReceiverAccount());
    try {
      myString=(String)BitPay.downloadHttpsUrl(""String_Node_Str"" + BitPay.account_url + ""String_Node_Str"",""String_Node_Str"" + BitPay.send_pkey + ""String_Node_Str""+ String.valueOf(Long.valueOf(this.amountText.getText().toString()) * 100000000));
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(myString);
      matcher.find();
      BitPay.account_balance=String.valueOf(Double.valueOf(matcher.group(1).toString()) / 100000000);
      balanceTextView.setText(BitPay.account_balance + ""String_Node_Str"");
      Toast.makeText(SendActivity.this,""String_Node_Str"",Toast.LENGTH_LONG).show();
      Toast.makeText(SendActivity.this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    }
 catch (    Exception e) {
      Toast.makeText(SendActivity.this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    }
  }
 else   if (R.id.account_address1 == arg0.getId()) {
    ClipboardManager clipboard=(ClipboardManager)getSystemService(CLIPBOARD_SERVICE);
    clipboard.setText(accountAddressTextView.getText());
    Toast.makeText(SendActivity.this,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
}"
81215,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.setttings_layout);
  textView5=(TextView)findViewById(R.id.textView5);
  textView5.setText(""String_Node_Str"" + BitPay.account_url);
  try {
    textView2=(TextView)findViewById(R.id.textView2);
    textView2.setText(""String_Node_Str"" + this.getPackageManager().getPackageInfo(this.getPackageName(),0).versionName);
  }
 catch (  Exception e) {
  }
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.setttings_layout);
  textView5=(TextView)findViewById(R.id.textView5);
  textView5.setText(""String_Node_Str"" + BitPay.account_url);
  textView5.setOnClickListener(this);
  try {
    textView2=(TextView)findViewById(R.id.textView2);
    textView2.setText(""String_Node_Str"" + this.getPackageManager().getPackageInfo(this.getPackageName(),0).versionName);
  }
 catch (  Exception e) {
  }
}"
81216,"@Override public void onWindowFocusChanged(boolean hasFocus){
  balanceTextView.setText(BitPayObj.getBitPayObj().getAccountBalance() + ""String_Node_Str"");
  receiveAccountTextView.setText(BitPayObj.getBitPayObj().getSendAcountBTCAddress());
}","@Override public void onWindowFocusChanged(boolean hasFocus){
}"
81217,"@Override protected void onResume(){
  super.onResume();
  Log.v(TAG,""String_Node_Str"");
  balanceTextView.setText(BitPayObj.getBitPayObj().getAccountBalance() + ""String_Node_Str"");
  receiveAccountTextView.setText(BitPayObj.getBitPayObj().getSendAcountBTCAddress());
}","@Override protected void onResume(){
  super.onResume();
  Log.v(TAG,""String_Node_Str"");
}"
81218,"@Override public void onWindowFocusChanged(boolean hasFocus){
}","@Override public void onWindowFocusChanged(boolean hasFocus){
  balanceTextView.setText(BitPayObj.getBitPayObj().getAccountBalance() + ""String_Node_Str"");
  receiveAccountTextView.setText(BitPayObj.getBitPayObj().getSendAcountBTCAddress());
}"
81219,"public void run(){
  sendBTCDialog();
  gettingWebPageDialog.setProgress(100);
  Log.v(TAG,""String_Node_Str"");
  gettingWebPageDialog.dismiss();
  Log.v(TAG,""String_Node_Str"");
  gettingWebPageDialog.dismiss();
}","public void run(){
  if (sendBTCDialog()) {
    gettingWebPageDialog.dismiss();
    Toast.makeText(SendActivity.this,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
 else {
    gettingWebPageDialog.dismiss();
    Toast.makeText(SendActivity.this,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
}"
81220,"public void onActivityResult(int requestCode,int resultCode,Intent intent){
  if (requestCode == 0) {
    if (resultCode == RESULT_OK) {
      String contents=intent.getStringExtra(""String_Node_Str"");
      String format=intent.getStringExtra(""String_Node_Str"");
      Uri bitcoinUri=Uri.parse(contents);
      Log.v(TAG,""String_Node_Str"" + contents + ""String_Node_Str""+ format+ ""String_Node_Str""+ bitcoinUri.toString());
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(contents);
      matcher.find();
      BitPayObj.getBitPayObj().setSendAcountBTCAddress((String)matcher.group(0));
      try {
        this.amountText.setText(contents.substring(contents.indexOf(""String_Node_Str"") + 8,contents.indexOf(""String_Node_Str"")));
      }
 catch (      Exception e) {
      }
      onResume();
    }
 else     if (resultCode == RESULT_CANCELED) {
    }
  }
}","public void onActivityResult(int requestCode,int resultCode,Intent intent){
  if (requestCode == 0) {
    if (resultCode == RESULT_OK) {
      String contents=intent.getStringExtra(""String_Node_Str"");
      String format=intent.getStringExtra(""String_Node_Str"");
      Uri bitcoinUri=Uri.parse(contents);
      Log.v(TAG,""String_Node_Str"" + contents + ""String_Node_Str""+ format+ ""String_Node_Str""+ bitcoinUri.toString());
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      Matcher matcher=pattern.matcher(contents);
      matcher.find();
      BitPayObj.getBitPayObj().setSendAcountBTCAddress((String)matcher.group(0));
      try {
        this.amountText.setText(contents.substring(contents.indexOf(""String_Node_Str"") + 8,contents.indexOf(""String_Node_Str"")));
      }
 catch (      Exception e) {
      }
      onResume();
    }
 else     if (resultCode == RESULT_CANCELED) {
    }
  }
  balanceTextView.setText(BitPayObj.getBitPayObj().getAccountBalance() + ""String_Node_Str"");
  receiveAccountTextView.setText(BitPayObj.getBitPayObj().getSendAcountBTCAddress());
}"
81221,"private void sendBTCDialog(){
  if (BitPayObj.getBitPayObj().sendBTC(String.valueOf(""String_Node_Str"" + (long)(Double.parseDouble(amountText.getText().toString()) * 100000000)))) {
    gettingWebPageDialog.setProgress(50);
  }
 else {
    gettingWebPageDialog.setProgress(50);
  }
  gettingWebPageDialog.setProgress(50);
  while (!BitPayObj.getBitPayObj().updateWalletInfo()) {
    gettingWebPageDialog.setProgress(75);
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  gettingWebPageDialog.setProgress(75);
}","private boolean sendBTCDialog(){
  if (BitPayObj.getBitPayObj().sendBTC(String.valueOf(""String_Node_Str"" + (long)(Double.parseDouble(amountText.getText().toString()) * 100000000)))) {
    gettingWebPageDialog.setProgress(50);
    while (!BitPayObj.getBitPayObj().updateWalletInfo()) {
      gettingWebPageDialog.setProgress(75);
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
    return true;
  }
 else {
    gettingWebPageDialog.setProgress(100);
    return false;
  }
}"
81222,"/** 
 * Get the strong checksum.
 * @return The strong checksum.
 * @since 1.1
 */
public byte[] getStrong(){
  return strong;
}","/** 
 * Get the strong checksum.
 * @return The strong checksum.
 * @since 1.1
 */
public byte[] getStrong(){
  return (byte[])strong.clone();
}"
81223,"/** 
 * Return the array of bytes that is the data block.
 * @return The block itself.
 * @since 1.1
 */
public byte[] getData(){
  return data;
}","/** 
 * Return the array of bytes that is the data block.
 * @return The block itself.
 * @since 1.1
 */
public byte[] getData(){
  return (byte[])data.clone();
}"
81224,"/** 
 * Generate a sum pair for a portion of a byte array.
 * @param buf The byte array to checksum.
 * @param off Where in <code>buf</code> to start.
 * @param len How many bytes to checksum.
 * @return A {@link ChecksumPair} for this byte array.
 */
protected ChecksumPair generateSum(byte[] buf,int off,int len){
  ChecksumPair p=new ChecksumPair();
  config.weakSum.check(buf,off,len);
  config.strongSum.update(buf,off,len);
  if (config.checksumSeed != null) {
    config.strongSum.update(config.checksumSeed,0,config.checksumSeed.length);
  }
  p.weak=config.weakSum.getValue();
  p.strong=new byte[config.strongSumLength];
  System.arraycopy(config.strongSum.digest(),0,p.strong,0,config.strongSumLength);
  p.offset=count;
  p.length=len;
  count+=len;
  return p;
}","/** 
 * Generate a sum pair for a portion of a byte array.
 * @param buf The byte array to checksum.
 * @param off Where in <code>buf</code> to start.
 * @param len How many bytes to checksum.
 * @return A {@link ChecksumPair} for this byte array.
 */
protected ChecksumPair generateSum(byte[] buf,int off,int len){
  ChecksumPair p=new ChecksumPair();
  config.weakSum.check(buf,off,len);
  config.strongSum.update(buf,off,len);
  if (config.checksumSeed != null) {
    config.strongSum.update(config.checksumSeed,0,config.checksumSeed.length);
  }
  p.weak=config.weakSum.getValue();
  p.strong=new byte[config.strongSumLength];
  System.arraycopy(config.strongSum.digest(),0,p.strong,0,config.strongSumLength);
  p.offset=count;
  p.length=len;
  count+=len;
  if (config.debug) {
    System.out.printf(""String_Node_Str"",p);
  }
  return p;
}"
81225,"/** 
 * Finish generating checksums, flushing any buffered data and resetting this instance.
 */
public void doFinal() throws ListenerException {
  ListenerException exception=null, current=null;
  if (ndx > 0) {
    ChecksumPair p=generateSum(buffer,0,ndx);
    for (    GeneratorListener listener : listeners) {
      try {
        listener.update(new GeneratorEvent(p));
      }
 catch (      ListenerException le) {
        if (exception != null) {
          current.setNext(le);
          current=le;
        }
 else {
          exception=le;
          current=le;
        }
      }
    }
    if (exception != null)     throw exception;
  }
  reset();
}","/** 
 * Finish generating checksums, flushing any buffered data and resetting this instance.
 */
public void doFinal() throws ListenerException {
  if (config.debug) {
    System.out.printf(""String_Node_Str"");
  }
  ListenerException exception=null, current=null;
  if (ndx > 0) {
    ChecksumPair p=generateSum(buffer,0,ndx);
    for (    GeneratorListener listener : listeners) {
      try {
        listener.update(new GeneratorEvent(p));
      }
 catch (      ListenerException le) {
        if (exception != null) {
          current.setNext(le);
          current=le;
        }
 else {
          exception=le;
          current=le;
        }
      }
    }
    if (exception != null)     throw exception;
  }
  reset();
}"
81226,"/** 
 * Search if a portion of the given byte array is in the map, returning its original offset if it is.
 * @param block   The block of bytes to search for.
 * @param off     The offset in the block to begin.
 * @param len     The number of bytes to read from the block.
 * @return The original offset of the given block if it was found inthe map. null if it was not found.
 */
protected Long hashSearch(byte[] block,int off,int len){
  Integer weakSum=new Integer(config.weakSum.getValue());
  if (hashtable.containsKey(weakSum.intValue())) {
    if (hashtable.containsKey(weakSum)) {
      config.strongSum.reset();
      config.strongSum.update(block,off,len);
      if (config.checksumSeed != null) {
        config.strongSum.update(config.checksumSeed);
      }
      byte[] digest=new byte[config.strongSumLength];
      System.arraycopy(config.strongSum.digest(),0,digest,0,digest.length);
      return (Long)hashtable.get(new ChecksumPair(weakSum.intValue(),digest));
    }
  }
  return null;
}","/** 
 * Search if a portion of the given byte array is in the map, returning its original offset if it is.
 * @param block   The block of bytes to search for.
 * @param off     The offset in the block to begin.
 * @param len     The number of bytes to read from the block.
 * @return The original offset of the given block if it was found inthe map. null if it was not found.
 */
protected Long hashSearch(byte[] block,int off,int len){
  Integer weakSum=new Integer(config.weakSum.getValue());
  if (hashtable.containsKey(weakSum.intValue())) {
    if (config.debug) {
      System.out.printf(""String_Node_Str"",weakSum);
    }
    if (hashtable.containsKey(weakSum)) {
      if (config.debug) {
        System.out.printf(""String_Node_Str"");
      }
      config.strongSum.reset();
      config.strongSum.update(block,off,len);
      if (config.checksumSeed != null) {
        config.strongSum.update(config.checksumSeed);
      }
      byte[] digest=new byte[config.strongSumLength];
      System.arraycopy(config.strongSum.digest(),0,digest,0,digest.length);
      ChecksumPair pair=new ChecksumPair(weakSum,digest);
      if (config.debug) {
        System.out.printf(""String_Node_Str"",pair);
      }
      Long offset=hashtable.get(pair);
      if (config.debug) {
        if (offset != null)         System.out.printf(""String_Node_Str"",offset);
 else         System.out.printf(""String_Node_Str"");
      }
      return offset;
    }
  }
  return null;
}"
81227,"/** 
 * Set the list of checksums that will be searched by this matcher. This method must be called at least once before calling update.
 * @param sums The checksums.
 */
public void setChecksums(List<ChecksumPair> sums){
  hashtable.clear();
  if (sums != null) {
    for (    ChecksumPair p : sums)     hashtable.put(p,p.getOffset());
  }
}","/** 
 * Set the list of checksums that will be searched by this matcher. This method must be called at least once before calling update.
 * @param sums The checksums.
 */
public void setChecksums(List<ChecksumPair> sums){
  hashtable.clear();
  if (sums != null) {
    for (    ChecksumPair p : sums)     hashtable.put(p,p.getOffset());
  }
  if (config.debug) {
    System.out.printf(""String_Node_Str"",hashtable);
  }
}"
81228,"/** 
 * Flush any buffered data and reset this instance.
 */
public void doFinal() throws ListenerException {
  ListenerException exception=null, current=null;
  if (ndx > 0) {
    int off=Math.max(0,ndx - config.blockLength);
    int len=Math.min(ndx,config.blockLength);
    config.weakSum.check(buffer,off,len);
    Long oldOff=hashSearch(buffer,off,len);
    if (oldOff != null) {
      if (off > 0) {
        DataBlock d=new DataBlock(count - ndx,buffer,0,off);
        for (        MatcherListener l : listeners) {
          try {
            l.update(new MatcherEvent(d));
          }
 catch (          ListenerException le) {
            if (exception != null) {
              current.setNext(le);
              current=le;
            }
 else {
              exception=le;
              current=le;
            }
          }
        }
        if (exception != null)         throw exception;
      }
      Offsets o=new Offsets(oldOff.longValue(),count - len,len);
      for (      MatcherListener l : listeners) {
        try {
          l.update(new MatcherEvent(o));
        }
 catch (        ListenerException le) {
          if (exception != null) {
            current.setNext(le);
            current=le;
          }
 else {
            exception=le;
            current=le;
          }
        }
      }
      if (exception != null)       throw exception;
    }
 else {
      DataBlock d=new DataBlock(count - ndx,buffer,0,ndx);
      for (      MatcherListener l : listeners) {
        try {
          l.update(new MatcherEvent(d));
        }
 catch (        ListenerException le) {
          if (exception != null) {
            current.setNext(le);
            current=le;
          }
 else {
            exception=le;
            current=le;
          }
        }
      }
      if (exception != null)       throw exception;
    }
  }
  reset();
}","/** 
 * Flush any buffered data and reset this instance.
 */
public void doFinal() throws ListenerException {
  if (config.debug) {
    System.out.printf(""String_Node_Str"");
  }
  ListenerException exception=null, current=null;
  if (ndx > 0) {
    int off=Math.max(0,ndx - config.blockLength);
    int len=Math.min(ndx,config.blockLength);
    config.weakSum.check(buffer,off,len);
    Long oldOff=hashSearch(buffer,off,len);
    if (oldOff != null) {
      if (off > 0) {
        DataBlock d=new DataBlock(count - ndx,buffer,0,off);
        for (        MatcherListener l : listeners) {
          try {
            l.update(new MatcherEvent(d));
          }
 catch (          ListenerException le) {
            if (exception != null) {
              current.setNext(le);
              current=le;
            }
 else {
              exception=le;
              current=le;
            }
          }
        }
        if (exception != null)         throw exception;
      }
      Offsets o=new Offsets(oldOff.longValue(),count - len,len);
      for (      MatcherListener l : listeners) {
        try {
          l.update(new MatcherEvent(o));
        }
 catch (        ListenerException le) {
          if (exception != null) {
            current.setNext(le);
            current=le;
          }
 else {
            exception=le;
            current=le;
          }
        }
      }
      if (exception != null)       throw exception;
    }
 else {
      DataBlock d=new DataBlock(count - ndx,buffer,0,ndx);
      for (      MatcherListener l : listeners) {
        try {
          l.update(new MatcherEvent(d));
        }
 catch (        ListenerException le) {
          if (exception != null) {
            current.setNext(le);
            current=le;
          }
 else {
            exception=le;
            current=le;
          }
        }
      }
      if (exception != null)       throw exception;
    }
  }
  reset();
}"
81229,"/** 
 * Make the signatures from data coming in through the input stream.
 * @param in The input stream to generate signatures for.
 * @return A Collection of signatures.
 * @throws java.io.IOException If reading fails.
 */
public Collection makeSignatures(InputStream in) throws IOException, NoSuchAlgorithmException {
  Configuration c=new Configuration();
  c.strongSum=MessageDigest.getInstance(""String_Node_Str"");
  c.weakSum=new Checksum32();
  c.blockLength=blockLength;
  c.strongSumLength=c.strongSumLength;
  return new Generator(c).generateSums(in);
}","/** 
 * Make the signatures from data coming in through the input stream.
 * @param in The input stream to generate signatures for.
 * @return A Collection of signatures.
 * @throws java.io.IOException If reading fails.
 */
public Collection makeSignatures(InputStream in) throws IOException, NoSuchAlgorithmException {
  Configuration c=new Configuration();
  c.strongSum=MessageDigest.getInstance(""String_Node_Str"");
  c.weakSum=new Checksum32();
  c.blockLength=blockLength;
  c.strongSumLength=strongSumLength;
  return new Generator(c).generateSums(in);
}"
81230,"private byte[] mutate(byte[] b,TestHarness harness){
  StringBuffer corpus=new StringBuffer(new String(b));
  int nmuts=Math.abs(rand.nextInt(30));
  while (--nmuts > 0) {
    int from_off=rand.nextInt(corpus.length());
    int from_len=(int)(rand.nextDouble() * rand.nextInt(corpus.length() - from_off));
    int to_off=rand.nextInt(corpus.length());
    int to_len=(int)(rand.nextDouble() * rand.nextInt(corpus.length() - to_off));
switch (rand.nextInt(3)) {
case 0:
      harness.verbose(""String_Node_Str"" + from_off + ""String_Node_Str""+ from_len+ ""String_Node_Str""+ to_off+ ""String_Node_Str""+ to_len+ ""String_Node_Str"");
    corpus.replace(to_off,to_off + to_len,corpus.substring(from_off,from_off + from_len));
  break;
case 1:
harness.verbose(""String_Node_Str"" + from_off + ""String_Node_Str""+ from_len+ ""String_Node_Str""+ to_off+ ""String_Node_Str""+ to_len+ ""String_Node_Str"");
corpus.insert(to_off,corpus.substring(from_off,from_off + from_len));
break;
case 2:
harness.verbose(""String_Node_Str"" + from_off + ""String_Node_Str""+ from_len+ ""String_Node_Str"");
corpus.delete(from_off,from_off + from_len);
break;
}
}
return corpus.toString().getBytes();
}","/** 
 * Derived from `mutate.pl' from librsync, (C) 1999, 2000 by Martin Pool and (C) 1999 by Andrew Tridgell.
 */
private byte[] mutate(byte[] b,TestHarness harness){
  StringBuffer corpus=new StringBuffer(new String(b));
  int nmuts=1 + rand.nextInt(30);
  harness.verbose(""String_Node_Str"" + nmuts + ""String_Node_Str"");
  while (--nmuts > 0) {
    int from_off=rand.nextInt(corpus.length());
    int from_len=(int)(rand.nextDouble() * rand.nextInt(corpus.length() - from_off));
    int to_off=rand.nextInt(corpus.length());
    int to_len=(int)(rand.nextDouble() * rand.nextInt(corpus.length() - to_off));
switch (rand.nextInt(3)) {
case 0:
      harness.verbose(""String_Node_Str"" + from_off + ""String_Node_Str""+ from_len+ ""String_Node_Str""+ to_off+ ""String_Node_Str""+ to_len+ ""String_Node_Str"");
    corpus.replace(to_off,to_off + to_len,corpus.substring(from_off,from_off + from_len));
  break;
case 1:
harness.verbose(""String_Node_Str"" + from_off + ""String_Node_Str""+ from_len+ ""String_Node_Str""+ to_off+ ""String_Node_Str""+ to_len+ ""String_Node_Str"");
corpus.insert(to_off,corpus.substring(from_off,from_off + from_len));
break;
case 2:
harness.verbose(""String_Node_Str"" + from_off + ""String_Node_Str""+ from_len+ ""String_Node_Str"");
corpus.delete(from_off,from_off + from_len);
break;
}
}
return corpus.toString().getBytes();
}"
81231,"public void test(TestHarness harness){
  String[] mds=getMessageDigests();
  harness.checkPoint(""String_Node_Str"");
  Security.addProvider(new JarsyncProvider());
  Configuration conf=new Configuration();
  try {
    conf.strongSum=MessageDigest.getInstance(""String_Node_Str"");
  }
 catch (  Exception x) {
    throw new Error(x);
  }
  conf.weakSum=new Checksum32();
  conf.strongSumLength=conf.strongSum.getDigestLength();
  for (int i=0; i < 50; i++) {
    conf.blockLength=rand.nextInt(1400) + 250;
    byte[] n3w=new byte[rand.nextInt(1000000) + 500];
    rand.nextBytes(n3w);
    byte[] old=mutate(n3w,harness);
    harness.verbose(""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ old.length+ ""String_Node_Str""+ n3w.length+ ""String_Node_Str""+ conf.blockLength+ ""String_Node_Str""+ conf.strongSum.getAlgorithm());
    Generator gen=new Generator(conf);
    Collection sums=gen.generateSums(old);
    Matcher mat=new Matcher(conf);
    Collection deltas=mat.hashSearch(sums,n3w,0);
    byte[] reconst=Rebuilder.rebuild(old,deltas);
    harness.check(Arrays.equals(n3w,reconst));
    try {
      conf.strongSum=MessageDigest.getInstance(mds[rand.nextInt(mds.length)]);
      conf.strongSumLength=conf.strongSum.getDigestLength();
    }
 catch (    Exception x) {
      throw new Error(x);
    }
  }
}","public void test(TestHarness harness){
  String[] mds=getMessageDigests();
  harness.checkPoint(""String_Node_Str"");
  Security.addProvider(new JarsyncProvider());
  Configuration conf=new Configuration();
  try {
    conf.strongSum=MessageDigest.getInstance(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception x) {
    throw new Error(x);
  }
  conf.weakSum=new Checksum32();
  conf.strongSumLength=conf.strongSum.getDigestLength();
  for (int i=0; i < 50; i++) {
    conf.blockLength=rand.nextInt(1400) + 250;
    byte[] n3w=new byte[rand.nextInt(1000000) + 500];
    rand.nextBytes(n3w);
    byte[] old=mutate(n3w,harness);
    harness.verbose(""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ old.length+ ""String_Node_Str""+ n3w.length+ ""String_Node_Str""+ conf.blockLength+ ""String_Node_Str""+ conf.strongSum.getAlgorithm());
    Generator gen=new Generator(conf);
    Collection sums=gen.generateSums(old);
    Matcher mat=new Matcher(conf);
    Collection deltas=mat.hashSearch(sums,n3w,0);
    byte[] reconst=Rebuilder.rebuild(old,deltas);
    harness.check(Arrays.equals(n3w,reconst));
    try {
      conf.strongSum=MessageDigest.getInstance(mds[rand.nextInt(mds.length)]);
      conf.strongSumLength=conf.strongSum.getDigestLength();
    }
 catch (    Exception x) {
      throw new Error(x);
    }
  }
}"
81232,"private String[] getMessageDigests(){
  HashSet algs=new HashSet();
  String[] tries={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < tries.length; i++) {
    try {
      MessageDigest.getInstance(tries[i]);
      algs.add(tries[i]);
    }
 catch (    Exception x) {
    }
  }
  return (String[])algs.toArray(tries);
}","private String[] getMessageDigests(){
  HashSet algs=new HashSet();
  String[] tries={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < tries.length; i++) {
    try {
      MessageDigest.getInstance(tries[i]);
      algs.add(tries[i]);
    }
 catch (    Exception x) {
    }
  }
  return (String[])algs.toArray(tries);
}"
81233,"public void test(TestHarness harness){
  harness.checkPoint(""String_Node_Str"");
  try {
    Security.addProvider(new JarsyncProvider());
    algorithm=MessageDigest.getInstance(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
    throw new Error(x);
  }
  try {
    for (int i=0; i < 64; i++)     algorithm.update((byte)'a');
    byte[] md=algorithm.digest();
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    harness.verbose(""String_Node_Str"");
    for (int i=0; i < 536870913; i++)     algorithm.update((byte)'a');
    byte[] md=algorithm.digest();
    String exp=""String_Node_Str"";
    System.err.println(Util.toHexString(md));
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    byte[] md=algorithm.digest(""String_Node_Str"".getBytes());
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    byte[] md=algorithm.digest(""String_Node_Str"".getBytes());
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    byte[] md=algorithm.digest(""String_Node_Str"".getBytes());
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    byte[] md=algorithm.digest(""String_Node_Str"".getBytes());
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    byte[] md=algorithm.digest(""String_Node_Str"".getBytes());
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    byte[] md=algorithm.digest(""String_Node_Str"".getBytes());
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    algorithm.update(""String_Node_Str"".getBytes(),0,1);
    clone=(MessageDigest)algorithm.clone();
    byte[] md=algorithm.digest();
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
    clone.update(""String_Node_Str"".getBytes(),0,2);
    md=clone.digest();
    exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
}","public void test(TestHarness harness){
  harness.checkPoint(""String_Node_Str"");
  try {
    Security.addProvider(new JarsyncProvider());
    algorithm=MessageDigest.getInstance(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
    throw new Error(x);
  }
  try {
    for (int i=0; i < 64; i++)     algorithm.update((byte)'a');
    byte[] md=algorithm.digest();
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    harness.verbose(""String_Node_Str"");
    for (int i=0; i < 536870913; i++)     algorithm.update((byte)'a');
    byte[] md=algorithm.digest();
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    byte[] md=algorithm.digest(""String_Node_Str"".getBytes());
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    byte[] md=algorithm.digest(""String_Node_Str"".getBytes());
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    byte[] md=algorithm.digest(""String_Node_Str"".getBytes());
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    byte[] md=algorithm.digest(""String_Node_Str"".getBytes());
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    byte[] md=algorithm.digest(""String_Node_Str"".getBytes());
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    byte[] md=algorithm.digest(""String_Node_Str"".getBytes());
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    algorithm.update(""String_Node_Str"".getBytes(),0,1);
    clone=(MessageDigest)algorithm.clone();
    byte[] md=algorithm.digest();
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
    clone.update(""String_Node_Str"".getBytes(),0,2);
    md=clone.digest();
    exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
}"
81234,"public void test(TestHarness harness){
  harness.checkPoint(""String_Node_Str"");
  try {
    Security.addProvider(new JarsyncProvider());
    algorithm=MessageDigest.getInstance(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
    throw new Error(x);
  }
  try {
    for (int i=0; i < 64; i++)     algorithm.update((byte)'a');
    byte[] md=algorithm.digest();
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    harness.verbose(""String_Node_Str"");
    for (int i=0; i < 536870913; i++)     algorithm.update((byte)'a');
    byte[] md=algorithm.digest();
    System.err.println(Util.toHexString(md));
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    byte[] md=algorithm.digest(""String_Node_Str"".getBytes());
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    byte[] md=algorithm.digest(""String_Node_Str"".getBytes());
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    byte[] md=algorithm.digest(""String_Node_Str"".getBytes());
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    byte[] md=algorithm.digest(""String_Node_Str"".getBytes());
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    byte[] md=algorithm.digest(""String_Node_Str"".getBytes());
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    byte[] md=algorithm.digest(""String_Node_Str"".getBytes());
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    algorithm.update(""String_Node_Str"".getBytes(),0,1);
    clone=(MessageDigest)algorithm.clone();
    byte[] md=algorithm.digest();
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
    clone.update(""String_Node_Str"".getBytes(),0,2);
    md=clone.digest();
    exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
}","public void test(TestHarness harness){
  harness.checkPoint(""String_Node_Str"");
  try {
    Security.addProvider(new JarsyncProvider());
    algorithm=MessageDigest.getInstance(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
    throw new Error(x);
  }
  try {
    for (int i=0; i < 64; i++)     algorithm.update((byte)'a');
    byte[] md=algorithm.digest();
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    harness.verbose(""String_Node_Str"");
    for (int i=0; i < 536870913; i++)     algorithm.update((byte)'a');
    byte[] md=algorithm.digest();
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    byte[] md=algorithm.digest(""String_Node_Str"".getBytes());
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    byte[] md=algorithm.digest(""String_Node_Str"".getBytes());
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    byte[] md=algorithm.digest(""String_Node_Str"".getBytes());
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    byte[] md=algorithm.digest(""String_Node_Str"".getBytes());
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    byte[] md=algorithm.digest(""String_Node_Str"".getBytes());
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    byte[] md=algorithm.digest(""String_Node_Str"".getBytes());
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
  try {
    algorithm.update(""String_Node_Str"".getBytes(),0,1);
    clone=(MessageDigest)algorithm.clone();
    byte[] md=algorithm.digest();
    String exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
    clone.update(""String_Node_Str"".getBytes(),0,2);
    md=clone.digest();
    exp=""String_Node_Str"";
    harness.check(exp.equals(Util.toHexString(md)),""String_Node_Str"");
  }
 catch (  Exception x) {
    harness.debug(x);
    harness.fail(""String_Node_Str"");
  }
}"
81235,"@Test(expected=NotAuthorizedException.class) public void testNotAutorizedException(){
  responseHeaders.setContentType(MediaType.APPLICATION_JSON);
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withResponse(""String_Node_Str"",responseHeaders,HttpStatus.valueOf(401),""String_Node_Str""));
  yammerTemplate.userOperations().getUsers(1);
}","@Test(expected=NotAuthorizedException.class) public void testNotAutorizedException(){
  responseHeaders.setContentType(MediaType.APPLICATION_JSON);
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withStatus(UNAUTHORIZED));
  yammerTemplate.userOperations().getUsers(1);
}"
81236,"@Test(expected=RateLimitExceededException.class) public void testRateLimitExceeded() throws IOException {
  responseHeaders.setContentType(MediaType.APPLICATION_JSON);
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withResponse(jsonResource(""String_Node_Str""),responseHeaders,HttpStatus.valueOf(401),""String_Node_Str""));
  yammerTemplate.userOperations().getUsers(1);
}","/** 
 * Tests that 401 is interpreted as rate limit exceeded if json body returned indicates so. According to Yammer API doc 403 will be returned if rate limit is exceeded, empiric evidence suggests otherwise.
 * @throws IOException
 */
@Test(expected=RateLimitExceededException.class) public void testRateLimitExceeded() throws IOException {
  responseHeaders.setContentType(MediaType.APPLICATION_JSON);
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withStatus(UNAUTHORIZED).body(jsonResource(""String_Node_Str"")).contentType(MediaType.APPLICATION_JSON));
  yammerTemplate.userOperations().getUsers(1);
}"
81237,"@Test public void testCreateGroup(){
  responseHeaders.setContentType(MediaType.APPLICATION_JSON);
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(POST)).andRespond(withResponse(""String_Node_Str"",responseHeaders));
  yammerTemplate.groupOperations().createGroup(""String_Node_Str"",false);
}","@Test public void testCreateGroup(){
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(POST)).andRespond(withSuccess(""String_Node_Str"",MediaType.TEXT_PLAIN));
  yammerTemplate.groupOperations().createGroup(""String_Node_Str"",false);
}"
81238,"@Test public void testJoinGroup(){
  responseHeaders.setContentType(MediaType.APPLICATION_JSON);
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(POST)).andRespond(withResponse(""String_Node_Str"",responseHeaders));
  yammerTemplate.groupOperations().joinGroup(1234L);
}","@Test public void testJoinGroup(){
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(POST)).andRespond(withSuccess(""String_Node_Str"",MediaType.TEXT_PLAIN));
  yammerTemplate.groupOperations().joinGroup(1234L);
}"
81239,"@Test public void testGetGroups_withNullParams(){
  responseHeaders.setContentType(MediaType.APPLICATION_JSON);
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withResponse(jsonResource(""String_Node_Str""),responseHeaders));
  List<Group> groups=yammerTemplate.groupOperations().getGroups(1,null,null,false);
  assertThat(groups.get(0).getFullName(),equalTo(""String_Node_Str""));
  assertThat(groups.get(0).getLastMessageAt(),notNullValue());
}","@Test public void testGetGroups_withNullParams(){
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withSuccess(jsonResource(""String_Node_Str""),APPLICATION_JSON));
  List<Group> groups=yammerTemplate.groupOperations().getGroups(1,null,null,false);
  assertThat(groups.get(0).getFullName(),equalTo(""String_Node_Str""));
  assertThat(groups.get(0).getLastMessageAt(),notNullValue());
}"
81240,"@Test public void testGetGroup(){
  Long id=4022983L;
  responseHeaders.setContentType(MediaType.APPLICATION_JSON);
  mockServer.expect(requestTo(""String_Node_Str"" + id + ""String_Node_Str"")).andExpect(method(GET)).andRespond(withResponse(jsonResource(""String_Node_Str""),responseHeaders));
  Group group=yammerTemplate.groupOperations().getGroup(id);
  assertThat(group.getFullName(),equalTo(""String_Node_Str""));
  assertThat(group.getLastMessageAt(),notNullValue());
}","@Test public void testGetGroup(){
  Long id=4022983L;
  mockServer.expect(requestTo(""String_Node_Str"" + id + ""String_Node_Str"")).andExpect(method(GET)).andRespond(withSuccess(jsonResource(""String_Node_Str""),APPLICATION_JSON));
  Group group=yammerTemplate.groupOperations().getGroup(id);
  assertThat(group.getFullName(),equalTo(""String_Node_Str""));
  assertThat(group.getLastMessageAt(),notNullValue());
}"
81241,"@Test public void testGetGroups_withAllParams(){
  responseHeaders.setContentType(MediaType.APPLICATION_JSON);
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withResponse(jsonResource(""String_Node_Str""),responseHeaders));
  List<Group> groups=yammerTemplate.groupOperations().getGroups(1,'A',GroupOperations.SORT_BY_PRIVACY,true);
  assertThat(groups.get(0).getFullName(),equalTo(""String_Node_Str""));
}","@Test public void testGetGroups_withAllParams(){
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withSuccess(jsonResource(""String_Node_Str""),APPLICATION_JSON));
  List<Group> groups=yammerTemplate.groupOperations().getGroups(1,'A',GroupOperations.SORT_BY_PRIVACY,true);
  assertThat(groups.get(0).getFullName(),equalTo(""String_Node_Str""));
}"
81242,"@Test public void testLeaveGroup(){
  responseHeaders.setContentType(MediaType.APPLICATION_JSON);
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(DELETE)).andRespond(withResponse(""String_Node_Str"",responseHeaders));
  yammerTemplate.groupOperations().leaveGroup(1234L);
}","@Test public void testLeaveGroup(){
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(DELETE)).andRespond(withSuccess(""String_Node_Str"",MediaType.TEXT_PLAIN));
  yammerTemplate.groupOperations().leaveGroup(1234L);
}"
81243,"public GroupStats(int updates,int members){
  this.updates=updates;
  this.members=members;
}","public GroupStats(int updates,int members,Date lastMessageAt,long lastMessageId){
  this.updates=updates;
  this.members=members;
  this.lastMessageAt=lastMessageAt;
  this.lastMessageId=lastMessageId;
}"
81244,"@JsonCreator GroupStatsMixin(@JsonProperty(""String_Node_Str"") int members,@JsonProperty(""String_Node_Str"") int updates){
}","@JsonCreator GroupStatsMixin(@JsonProperty(""String_Node_Str"") int members,@JsonProperty(""String_Node_Str"") int updates,@JsonProperty(""String_Node_Str"") @JsonDeserialize(using=YammerDateDeserializer.class) Date lastMessageAt,@JsonProperty(""String_Node_Str"") long lastMessageId){
}"
81245,"@Test public void testGetGroups_withNullParams(){
  responseHeaders.setContentType(MediaType.APPLICATION_JSON);
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withResponse(jsonResource(""String_Node_Str""),responseHeaders));
  List<Group> groups=yammerTemplate.groupOperations().getGroups(1,null,null,false);
  assertThat(groups.get(0).getFullName(),equalTo(""String_Node_Str""));
}","@Test public void testGetGroups_withNullParams(){
  responseHeaders.setContentType(MediaType.APPLICATION_JSON);
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withResponse(jsonResource(""String_Node_Str""),responseHeaders));
  List<Group> groups=yammerTemplate.groupOperations().getGroups(1,null,null,false);
  assertThat(groups.get(0).getFullName(),equalTo(""String_Node_Str""));
  assertThat(groups.get(0).getLastMessageAt(),notNullValue());
}"
81246,"@Test public void testGetGroup(){
  Long id=4022983L;
  responseHeaders.setContentType(MediaType.APPLICATION_JSON);
  mockServer.expect(requestTo(""String_Node_Str"" + id + ""String_Node_Str"")).andExpect(method(GET)).andRespond(withResponse(jsonResource(""String_Node_Str""),responseHeaders));
  Group group=yammerTemplate.groupOperations().getGroup(id);
  assertThat(group.getFullName(),equalTo(""String_Node_Str""));
}","@Test public void testGetGroup(){
  Long id=4022983L;
  responseHeaders.setContentType(MediaType.APPLICATION_JSON);
  mockServer.expect(requestTo(""String_Node_Str"" + id + ""String_Node_Str"")).andExpect(method(GET)).andRespond(withResponse(jsonResource(""String_Node_Str""),responseHeaders));
  Group group=yammerTemplate.groupOperations().getGroup(id);
  assertThat(group.getFullName(),equalTo(""String_Node_Str""));
  assertThat(group.getLastMessageAt(),notNullValue());
}"
81247,"private boolean isFollowing(URI url){
  try {
    restTemplate.getForObject(url,String.class);
    return true;
  }
 catch (  HttpClientErrorException ex) {
    if (ex.getStatusCode() == HttpStatus.NOT_FOUND) {
      return false;
    }
 else {
      throw ex;
    }
  }
}","private boolean isFollowing(URI url){
  try {
    restTemplate.getForObject(url,String.class);
    return true;
  }
 catch (  ResourceNotFoundException ex) {
    return false;
  }
}"
81248,"public List<Group> getGroups(int page,Character letter,String sortBy,boolean reverse){
  MultiValueMap<String,String> params=new LinkedMultiValueMap<String,String>();
  params.set(""String_Node_Str"",String.valueOf(page));
  if (sortBy != null) {
    params.set(""String_Node_Str"",GroupOperations.SORT_BY_PRIVACY);
  }
  params.set(""String_Node_Str"",String.valueOf(reverse));
  if (letter != null) {
    params.set(""String_Node_Str"",String.valueOf(letter));
  }
  return restTemplate.getForObject(buildUri(""String_Node_Str"",params),GroupList.class);
}","public List<Group> getGroups(int page,Character letter,String sortBy,boolean reverse){
  MultiValueMap<String,String> params=new LinkedMultiValueMap<String,String>();
  params.set(""String_Node_Str"",String.valueOf(page));
  if (sortBy != null) {
    params.set(""String_Node_Str"",sortBy);
  }
  params.set(""String_Node_Str"",String.valueOf(reverse));
  if (letter != null) {
    params.set(""String_Node_Str"",String.valueOf(letter));
  }
  return restTemplate.getForObject(buildUri(""String_Node_Str"",params),GroupList.class);
}"
81249,"@Test public void testGetGroups_withAllParams(){
  responseHeaders.setContentType(MediaType.APPLICATION_JSON);
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withResponse(new ClassPathResource(""String_Node_Str"",getClass()),responseHeaders));
  List<Group> groups=yammerTemplate.groupOperations().getGroups(1,'A',""String_Node_Str"",true);
  assertThat(groups.get(0).getFullName(),equalTo(""String_Node_Str""));
}","@Test public void testGetGroups_withAllParams(){
  responseHeaders.setContentType(MediaType.APPLICATION_JSON);
  mockServer.expect(requestTo(""String_Node_Str"")).andExpect(method(GET)).andRespond(withResponse(new ClassPathResource(""String_Node_Str"",getClass()),responseHeaders));
  List<Group> groups=yammerTemplate.groupOperations().getGroups(1,'A',GroupOperations.SORT_BY_PRIVACY,true);
  assertThat(groups.get(0).getFullName(),equalTo(""String_Node_Str""));
}"
81250,"public MessageInfo getMessages(long olderThan,long newerThan,String threaded,int limit){
  MultiValueMap<String,String> params=new LinkedMultiValueMap<String,String>();
  if (olderThan != 0) {
    params.set(""String_Node_Str"",String.valueOf(olderThan));
  }
  if (newerThan != 0) {
    params.set(""String_Node_Str"",String.valueOf(newerThan));
  }
  if (threaded != null) {
    params.set(""String_Node_Str"",String.valueOf(threaded));
  }
  if (limit != 0) {
    params.set(""String_Node_Str"",String.valueOf(limit));
  }
  return restTemplate.getForObject(buildUri(""String_Node_Str""),MessageInfo.class);
}","public MessageInfo getMessages(long olderThan,long newerThan,String threaded,int limit){
  MultiValueMap<String,String> params=buildParams(olderThan,newerThan,threaded,limit);
  return restTemplate.getForObject(buildUri(""String_Node_Str"",params),MessageInfo.class);
}"
81251,"@Override public EngineEvent listen(){
  if (this.events.isEmpty()) {
synchronized (this.waiter) {
      try {
        this.waiter.wait();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
synchronized (this.events) {
    return this.events.pop();
  }
}","@Override public EngineEvent listen(){
  while (this.events.isEmpty()) {
synchronized (this.waiter) {
      try {
        this.waiter.wait();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
synchronized (this.events) {
    return this.events.pop();
  }
}"
81252,"private List<Query> readQueries(){
  List<HPCService.Query> qs=new ArrayList<HPCService.Query>();
  String queryFile=System.getProperty(""String_Node_Str"");
  if (!queryFile.startsWith(""String_Node_Str"")) {
    String currentPath=System.getProperty(""String_Node_Str"");
    queryFile=currentPath + (currentPath.endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + queryFile;
  }
  String queryContents=getContents(new File(queryFile));
  String[] vals=queryContents.split(""String_Node_Str"");
  for (int i=0; i < vals.length; i+=3) {
    String name=vals[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
    String node=vals[i + 1];
    String script=vals[i + 2].replaceAll(""String_Node_Str"",""String_Node_Str"");
    Query q=new Query(name,node,script);
    qs.add(q);
  }
  return qs;
}","private List<Query> readQueries(){
  List<HPCService.Query> qs=new ArrayList<HPCService.Query>();
  String queryFile=System.getProperty(""String_Node_Str"");
  if (!queryFile.startsWith(""String_Node_Str"")) {
    String currentPath=System.getProperty(""String_Node_Str"");
    queryFile=currentPath + (currentPath.endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"") + queryFile;
  }
  String queryContents=getContents(new File(queryFile));
  String[] vals=queryContents.split(""String_Node_Str"");
  for (int i=0; i < vals.length; i+=3) {
    String name=vals[i].replaceAll(""String_Node_Str"",""String_Node_Str"");
    String node=vals[i + 1].equals(""String_Node_Str"") ? null : vals[i + 1];
    String script=vals[i + 2].replaceAll(""String_Node_Str"",""String_Node_Str"");
    Query q=new Query(name,node,script);
    qs.add(q);
  }
  return qs;
}"
81253,"@Override public void run(){
  while (true) {
    EngineEvent event=engine.listen();
    if (event == EngineEvent.TICK_END) {
      saveResults(runQueries());
      engine.wake();
    }
  }
}","@Override public void run(){
  while (true) {
    EngineEvent event=engine.listen();
    if (event == EngineEvent.TICK_END) {
      saveResults(runQueries());
      engine.wake();
    }
    if (engine.getState() == EngineState.STOPPING) {
      engine.release();
      logger.warn(""String_Node_Str"");
      System.exit(0);
    }
  }
}"
81254,"public HPCService(){
  ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext(""String_Node_Str"",""String_Node_Str"");
  engine=context.getBean(EngineServiceImpl.class);
  try {
    engine.init();
    engine.start();
    db=context.getBean(DbServiceImpl.class);
    if (System.getProperty(""String_Node_Str"") != null) {
      runId=System.getProperty(""String_Node_Str"");
    }
 else {
      runId=UUID.randomUUID().toString();
    }
    if (System.getProperty(""String_Node_Str"") != null) {
      resultsPath=System.getProperty(""String_Node_Str"");
    }
 else {
      resultsPath=""String_Node_Str"";
    }
    if (System.getProperty(""String_Node_Str"") != null) {
      queries=readQueries();
    }
 else {
      queries=Collections.emptyList();
    }
    listener=new EngineListener();
    listener.start();
  }
 catch (  EngineException err) {
    logger.error(err.getMessage());
  }
}","public HPCService(){
  ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext(""String_Node_Str"",""String_Node_Str"");
  engine=context.getBean(EngineServiceImpl.class);
  try {
    if (System.getProperty(""String_Node_Str"") != null) {
      scenarioFilename=System.getProperty(""String_Node_Str"");
      engine.init(scenarioFilename);
    }
 else {
      engine.init();
    }
    if (System.getProperty(""String_Node_Str"") != null) {
      runId=System.getProperty(""String_Node_Str"");
    }
 else {
      runId=UUID.randomUUID().toString();
    }
    logger.warn(""String_Node_Str"" + engine.getCurrentScenario() + ""String_Node_Str""+ runId);
    engine.start();
    db=context.getBean(DbServiceImpl.class);
    if (System.getProperty(""String_Node_Str"") != null) {
      resultsPath=System.getProperty(""String_Node_Str"");
    }
 else {
      resultsPath=""String_Node_Str"";
    }
    if (System.getProperty(""String_Node_Str"") != null) {
      queries=readQueries();
    }
 else {
      queries=Collections.emptyList();
    }
    listener=new EngineListener();
    listener.start();
  }
 catch (  EngineException err) {
    logger.error(err.getMessage());
  }
}"
81255,"private int findRole(String name){
  int i=0;
  for (  RoleAgent ba : roleList) {
    String n=ba.getName();
    if (n != null && n.equals(name)) {
      return i;
    }
    i++;
  }
  return -1;
}","private int findRole(String name){
  int i=0;
  int index=-1;
  for (  RoleAgent ba : roleList) {
    String n=ba.getName();
    if (n != null && n.equals(name)) {
      index=i;
    }
    i++;
  }
  return index;
}"
81256,"private int findRoleAfterMe(String name){
  for (  RoleAgent ba : roleList) {
    String after=ba.getAfter();
    if (after != ""String_Node_Str"" && after.equals(name)) {
      return roleList.indexOf(ba);
    }
  }
  return -1;
}","private int findRoleAfterMe(String name){
  int index=Integer.MAX_VALUE;
  for (  RoleAgent ba : roleList) {
    String after=ba.getAfter();
    if (after != ""String_Node_Str"" && after.equals(name)) {
      index=Math.min(index,roleList.indexOf(ba));
    }
  }
  return (index == Integer.MAX_VALUE) ? -1 : index;
}"
81257,"public void addRole(String name,Role<? extends Agent> role,Agent agent){
  RoleAgent roleAgent=new RoleAgent(name,role,agent);
  boolean first=roleAgent.isFirst();
  boolean last=roleAgent.isLast();
  String after=roleAgent.getAfter();
  if (first) {
    roleList.add(0,roleAgent);
  }
 else   if (last) {
    roleList.add(roleList.size(),roleAgent);
  }
 else   if (after != ""String_Node_Str"" && findRole(after) >= 0) {
    roleList.add(findRole(after) + 1,roleAgent);
  }
 else {
    int position=findRoleAfterMe(name);
    if (position >= 0) {
      roleList.add(position,roleAgent);
    }
 else {
      int size=roleList.size();
      boolean isLastRole=true;
      while (size > 0 && isLastRole) {
        RoleAgent lastRole=roleList.get(size - 1);
        isLastRole=lastRole.isLast();
        if (isLastRole)         size--;
      }
      roleList.add(size,roleAgent);
    }
  }
}","public void addRole(String name,Role<? extends Agent> role,Agent agent){
  RoleAgent roleAgent=new RoleAgent(name,role,agent);
  boolean first=roleAgent.isFirst();
  boolean last=roleAgent.isLast();
  String after=roleAgent.getAfter();
  if (first) {
    roleList.add(0,roleAgent);
  }
 else   if (last) {
    roleList.add(roleList.size(),roleAgent);
  }
 else   if (after != ""String_Node_Str"") {
    int afterIndex=findRole(after);
    if (afterIndex >= 0) {
      afterIndex++;
      if (afterIndex >= roleList.size()) {
        roleList.add(roleAgent);
      }
 else {
        roleList.add(afterIndex,roleAgent);
      }
    }
 else {
      roleList.add(roleAgent);
    }
  }
 else {
    int position=findRoleAfterMe(name);
    if (position >= 0) {
      roleList.add(position,roleAgent);
    }
 else {
      int size=roleList.size();
      boolean isLastRole=true;
      while (size > 0 && isLastRole) {
        RoleAgent lastRole=roleList.get(size - 1);
        isLastRole=lastRole.isLast();
        if (isLastRole)         size--;
      }
      roleList.add(size,roleAgent);
    }
  }
}"
81258,"private String constructQuery(String namespace,String type,String[] filters,String limit,Map<String,String> fieldMap){
  String query=""String_Node_Str"";
  for (  String field : fieldMap.values()) {
    query+=""String_Node_Str"" + field;
  }
  query+=""String_Node_Str"";
  query+=""String_Node_Str"" + getFullName(type,namespace) + ""String_Node_Str"";
  for (  Entry<String,String> entry : fieldMap.entrySet()) {
    query+=getFullName(entry.getKey(),namespace) + ""String_Node_Str"" + entry.getValue()+ ""String_Node_Str"";
  }
  query=query.substring(0,query.lastIndexOf(""String_Node_Str"")) + ""String_Node_Str"";
  if (filters.length > 0) {
    query+=""String_Node_Str"";
    for (    String filter : filters) {
      query+=""String_Node_Str"" + getFullName(filter,namespace) + ""String_Node_Str"";
    }
    query=query.substring(0,query.lastIndexOf(""String_Node_Str"")) + ""String_Node_Str"";
  }
  if (limit.length() > 0) {
    query+=""String_Node_Str"" + limit;
  }
  return query;
}","private String constructQuery(String namespace,String type,String[] filters,String limit,Map<String,String> fieldMap){
  String query=""String_Node_Str"";
  for (  String field : fieldMap.values()) {
    query+=""String_Node_Str"" + field;
  }
  query+=""String_Node_Str"";
  query+=""String_Node_Str"" + getFullName(type,namespace) + ""String_Node_Str"";
  for (  Entry<String,String> entry : fieldMap.entrySet()) {
    query+=getFullName(entry.getKey(),namespace) + ""String_Node_Str"" + entry.getValue()+ ""String_Node_Str"";
  }
  query=query.substring(0,query.lastIndexOf(""String_Node_Str"")) + ""String_Node_Str"";
  if (filters.length > 0) {
    query+=""String_Node_Str"";
    for (    String filter : filters) {
      query+=""String_Node_Str"" + getFullName(filter,namespace) + ""String_Node_Str"";
    }
    query=query.substring(0,query.lastIndexOf(""String_Node_Str"")) + ""String_Node_Str"";
  }
  query+=""String_Node_Str"";
  if (limit.length() > 0) {
    query+=""String_Node_Str"" + limit;
  }
  return query;
}"
81259,"@Override public void run(){
  while (Schedule.this.state != EngineState.STOPPING) {
    for (    RoleAgent roleAgent : roleList) {
      Role<? extends Agent> role=roleAgent.getRole();
      Agent agent=roleAgent.getAgent();
      long start=roleAgent.getStart();
      long end=roleAgent.getEnd();
      long timeStep=roleAgent.getTimeStep();
      if (start <= currentTick && (end > currentTick || end == 0) && (currentTick % timeStep == 0)) {
        if (agent != null) {
          agent.act(role);
        }
 else {
          role.act(null);
        }
      }
    }
synchronized (this) {
      if (Schedule.this.state == EngineState.PAUSING) {
        Schedule.this.state=EngineState.PAUSED;
      }
      while (Schedule.this.state == EngineState.PAUSED) {
        try {
          this.wait(100);
        }
 catch (        InterruptedException e) {
          throw new RuntimeException(e);
        }
      }
    }
synchronized (this) {
      for (      SimulationListener listener : Schedule.this.listeners) {
        listener.act(EngineEvent.TICK_END);
      }
      try {
        this.wait();
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
    currentTick++;
  }
  Schedule.this.state=EngineState.STOPPED;
}","@Override public void run(){
  while (Schedule.this.state != EngineState.STOPPING) {
    logger.info(""String_Node_Str"");
    for (    RoleAgent roleAgent : roleList) {
      logger.info(""String_Node_Str"",roleAgent.getName());
    }
    for (    RoleAgent roleAgent : roleList) {
      Role<? extends Agent> role=roleAgent.getRole();
      Agent agent=roleAgent.getAgent();
      long start=roleAgent.getStart();
      long end=roleAgent.getEnd();
      long timeStep=roleAgent.getTimeStep();
      if (start <= currentTick && (end > currentTick || end == 0) && (currentTick % timeStep == 0)) {
        if (agent != null) {
          agent.act(role);
        }
 else {
          role.act(null);
        }
      }
    }
synchronized (this) {
      if (Schedule.this.state == EngineState.PAUSING) {
        Schedule.this.state=EngineState.PAUSED;
      }
      while (Schedule.this.state == EngineState.PAUSED) {
        try {
          this.wait(100);
        }
 catch (        InterruptedException e) {
          throw new RuntimeException(e);
        }
      }
    }
synchronized (this) {
      for (      SimulationListener listener : Schedule.this.listeners) {
        listener.act(EngineEvent.TICK_END);
      }
      try {
        this.wait();
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
    currentTick++;
  }
  Schedule.this.state=EngineState.STOPPED;
}"
81260,"public void addRole(String name,Role<? extends Agent> role,Agent agent){
  RoleAgent roleAgent=new RoleAgent(name,role,agent);
  boolean first=roleAgent.isFirst();
  boolean last=roleAgent.isLast();
  String after=roleAgent.getAfter();
  if (first) {
    roleList.add(0,roleAgent);
  }
 else   if (last) {
    roleList.add(roleList.size(),roleAgent);
  }
 else   if (after != ""String_Node_Str"") {
    int afterIndex=findRole(after);
    if (afterIndex >= 0) {
      afterIndex++;
      if (afterIndex >= roleList.size()) {
        roleList.add(roleAgent);
      }
 else {
        roleList.add(afterIndex,roleAgent);
      }
    }
 else {
      roleList.add(roleAgent);
    }
  }
 else {
    int position=findRoleAfterMe(name);
    if (position >= 0) {
      roleList.add(position,roleAgent);
    }
 else {
      int size=roleList.size();
      boolean isLastRole=true;
      while (size > 0 && isLastRole) {
        RoleAgent lastRole=roleList.get(size - 1);
        isLastRole=lastRole.isLast();
        if (isLastRole)         size--;
      }
      roleList.add(size,roleAgent);
    }
  }
}","public void addRole(String name,Role<? extends Agent> role,Agent agent){
  RoleAgent roleAgent=new RoleAgent(name,role,agent);
  boolean first=roleAgent.isFirst();
  boolean last=roleAgent.isLast();
  String after=roleAgent.getAfter();
  if (first) {
    roleList.add(0,roleAgent);
  }
 else   if (last) {
    roleList.add(roleList.size(),roleAgent);
  }
 else   if (after != ""String_Node_Str"") {
    int afterIndex=findRole(after);
    if (afterIndex >= 0) {
      afterIndex++;
      if (afterIndex >= roleList.size()) {
        roleList.add(roleAgent);
      }
 else {
        roleList.add(afterIndex,roleAgent);
      }
    }
 else {
      int size=roleList.size();
      boolean isLastRole=true;
      while (size > 0 && isLastRole) {
        RoleAgent lastRole=roleList.get(size - 1);
        isLastRole=lastRole.isLast();
        if (isLastRole)         size--;
      }
      roleList.add(size,roleAgent);
    }
  }
 else {
    int position=findRoleAfterMe(name);
    if (position >= 0) {
      roleList.add(position,roleAgent);
    }
 else {
      int size=roleList.size();
      boolean isLastRole=true;
      while (size > 0 && isLastRole) {
        RoleAgent lastRole=roleList.get(size - 1);
        isLastRole=lastRole.isLast();
        if (isLastRole)         size--;
      }
      roleList.add(size,roleAgent);
    }
  }
  logger.info(""String_Node_Str"",name,roleList.indexOf(roleAgent));
}"
81261,"public List<Dependency> getLibraryDependencies(){
  List<Dependency> result=new ArrayList<Dependency>();
  for (int i=0; i < getContent().size(); i++) {
    String line=getContent().get(i);
    if (line.trim().startsWith(""String_Node_Str"")) {
      for (int braces=countBraces(line); braces > 0 && i < getContent().size(); i++) {
        line=line + getContent().get(i);
      }
      for (      String depString : line.split(""String_Node_Str"")) {
        result.add(getLibraryDependency(depString));
      }
    }
  }
  return result;
}","public List<Dependency> getLibraryDependencies(){
  List<Dependency> result=new ArrayList<Dependency>();
  for (int i=0; i < getContent().size(); i++) {
    String line=getContent().get(i);
    if (line.trim().startsWith(""String_Node_Str"")) {
      for (int braces=countBraces(line), j=0; braces > 0 && i < getContent().size(); i++, j++) {
        if (j > 0)         line=line + getContent().get(i);
      }
      String[] depStrings=line.split(""String_Node_Str"");
      if (depStrings.length > 0) {
        for (int count=countBraces(depStrings[0]); count > 0; count--) {
          depStrings[depStrings.length - 1]=removeLast(depStrings[depStrings.length - 1],')');
        }
        for (        String depString : depStrings) {
          result.add(getLibraryDependency(depString));
        }
      }
    }
  }
  return result;
}"
81262,"/** 
 * ADW: Apply and store the theme stuff
 * @param v
 */
public void applyTheme(View v){
  PreviewPreference themePreview=(PreviewPreference)findPreference(""String_Node_Str"");
  String packageName=themePreview.getValue().toString();
  SharedPreferences sp=getPreferenceManager().getSharedPreferences();
  SharedPreferences.Editor editor=sp.edit();
  editor.putString(""String_Node_Str"",packageName);
  if (!packageName.equals(LockscreenSettings.THEME_DEFAULT)) {
    Resources themeResources=null;
    try {
      themeResources=getPackageManager().getResourcesForApplication(packageName.toString());
    }
 catch (    NameNotFoundException e) {
    }
    if (themeResources != null) {
      int tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int network_text_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",network_text_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int network_text_shadow_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",network_text_shadow_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int clock_text_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",clock_text_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int clock_text_shadow_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",clock_text_shadow_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int music_text_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",music_text_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int music_text_shadow_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",music_text_shadow_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int notification_text_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",notification_text_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int notification_text_shadow_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",notification_text_shadow_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int music_control_pad=themeResources.getDimensionPixelSize(tmpId);
        editor.putInt(""String_Node_Str"",music_control_pad);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int text_notif_pad=themeResources.getDimensionPixelSize(tmpId);
        editor.putInt(""String_Node_Str"",text_notif_pad);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        boolean background_slide=themeResources.getBoolean(tmpId);
        editor.putBoolean(""String_Node_Str"",background_slide);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        boolean allow_art_slide=themeResources.getBoolean(tmpId);
        editor.putBoolean(""String_Node_Str"",allow_art_slide);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        boolean show_icons=themeResources.getBoolean(tmpId);
        editor.putBoolean(""String_Node_Str"",show_icons);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        boolean simple_text_notif=themeResources.getBoolean(tmpId);
        editor.putBoolean(""String_Node_Str"",simple_text_notif);
      }
    }
  }
 else {
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
  }
  editor.commit();
  startActivity(new Intent(getBaseContext(),LockscreenSettings.class));
  finish();
}","/** 
 * ADW: Apply and store the theme stuff
 * @param v
 */
public void applyTheme(View v){
  PreviewPreference themePreview=(PreviewPreference)findPreference(""String_Node_Str"");
  String packageName=themePreview.getValue().toString();
  SharedPreferences sp=getPreferenceManager().getSharedPreferences();
  SharedPreferences.Editor editor=sp.edit();
  editor.putString(""String_Node_Str"",packageName);
  if (!packageName.equals(LockscreenSettings.THEME_DEFAULT)) {
    Resources themeResources=null;
    try {
      themeResources=getPackageManager().getResourcesForApplication(packageName.toString());
    }
 catch (    NameNotFoundException e) {
    }
    if (themeResources != null) {
      int tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int network_text_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",network_text_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int network_text_shadow_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",network_text_shadow_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int clock_text_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",clock_text_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int clock_text_shadow_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",clock_text_shadow_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int music_text_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",music_text_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int music_text_shadow_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",music_text_shadow_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int notification_text_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",notification_text_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int notification_text_shadow_color=themeResources.getColor(tmpId);
        editor.putInt(""String_Node_Str"",notification_text_shadow_color);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int music_control_pad=themeResources.getDimensionPixelSize(tmpId);
        editor.putInt(""String_Node_Str"",music_control_pad);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        int text_notif_pad=themeResources.getDimensionPixelSize(tmpId);
        editor.putInt(""String_Node_Str"",text_notif_pad);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        boolean background_slide=themeResources.getBoolean(tmpId);
        editor.putBoolean(""String_Node_Str"",background_slide);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        boolean allow_art_slide=themeResources.getBoolean(tmpId);
        editor.putBoolean(""String_Node_Str"",allow_art_slide);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        boolean show_icons=themeResources.getBoolean(tmpId);
        editor.putBoolean(""String_Node_Str"",show_icons);
      }
      tmpId=themeResources.getIdentifier(""String_Node_Str"",""String_Node_Str"",packageName.toString());
      if (tmpId != 0) {
        boolean simple_text_notif=themeResources.getBoolean(tmpId);
        editor.putBoolean(""String_Node_Str"",simple_text_notif);
      }
    }
  }
 else {
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
    editor.remove(""String_Node_Str"");
  }
  editor.commit();
  if (utils.getCheckBoxPref(getBaseContext(),SMALL_TEXT_KEY,false)) {
    utils.setCheckBoxPref(getBaseContext(),GMAIL_ACCOUNT_KEY,false);
    utils.setCheckBoxPref(getBaseContext(),GMAIL_MERGE_KEY,true);
  }
  startActivity(new Intent(getBaseContext(),LockscreenSettings.class));
  finish();
}"
81263,"public boolean onKeyDown(int keyCode,KeyEvent event){
  if (keyCode == KeyEvent.KEYCODE_VOLUME_DOWN) {
    Intent intent;
    intent=new Intent(""String_Node_Str"");
    getBaseContext().sendBroadcast(intent);
    return true;
  }
 else   if (keyCode == KeyEvent.KEYCODE_VOLUME_UP) {
    Intent intent;
    intent=new Intent(""String_Node_Str"");
    getBaseContext().sendBroadcast(intent);
    return true;
  }
 else {
    return super.onKeyDown(keyCode,event);
  }
}","public boolean onKeyDown(int keyCode,KeyEvent event){
  Intent intent;
switch (keyCode) {
case KeyEvent.KEYCODE_VOLUME_DOWN:
    intent=new Intent(""String_Node_Str"");
  getBaseContext().sendBroadcast(intent);
return true;
case KeyEvent.KEYCODE_VOLUME_UP:
intent=new Intent(""String_Node_Str"");
getBaseContext().sendBroadcast(intent);
return true;
case KeyEvent.KEYCODE_BACK:
case KeyEvent.KEYCODE_HOME:
return true;
default :
return super.onKeyDown(keyCode,event);
}
}"
81264,"public void setCustomBackground(){
  if (utils.getCheckBoxPref(this,LockscreenSettings.KEY_SHOW_CUSTOM_BG,false)) {
    String BG_FILE=getFilesDir().toString() + File.separator + LockscreenSettings.BG_PHOTO_FILE;
    Bitmap bgBitmap=BitmapFactory.decodeFile(BG_FILE);
    BitmapDrawable background=new BitmapDrawable(getResources(),bgBitmap);
    background.setGravity(Gravity.CENTER);
    getWindow().setBackgroundDrawable(background);
  }
 else {
    getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
  }
}","public void setCustomBackground(){
  if (utils.getCheckBoxPref(this,LockscreenSettings.KEY_SHOW_CUSTOM_BG,false)) {
    if (bgBitmap != null) {
      bgBitmap.recycle();
      bgBitmap=null;
      System.gc();
    }
    String BG_FILE=getFilesDir().toString() + File.separator + LockscreenSettings.BG_PHOTO_FILE;
    bgBitmap=BitmapFactory.decodeFile(BG_FILE);
    BitmapDrawable background=new BitmapDrawable(getResources(),bgBitmap);
    background.setGravity(Gravity.CENTER);
    getWindow().setBackgroundDrawable(background);
  }
 else {
    getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
  }
}"
81265,"@Override public void onStart(Intent aIntent,int aStartId){
  if (aIntent == null)   return;
  final String action=aIntent.getAction();
  if (action == null)   return;
  if (action.equals(""String_Node_Str"") && getPlayer() == 1) {
    stopSelf();
  }
 else   if ((action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"")|| action.equals(""String_Node_Str"")) && getPlayer() == 1) {
    bindService(new Intent().setClassName(""String_Node_Str"",""String_Node_Str""),new ServiceConnection(){
      public void onServiceConnected(      ComponentName aName,      IBinder aService){
        com.android.music.IMediaPlaybackService mService=com.android.music.IMediaPlaybackService.Stub.asInterface(aService);
        try {
          if (mService.isPlaying()) {
            playing=true;
            titleName=mService.getTrackName();
            artistName=mService.getArtistName();
            albumName=mService.getAlbumName();
            pos=mService.position();
            dur=mService.duration();
            albumId=mService.getAlbumId();
            songId=mService.getAudioId();
            if (mService.isPlaying()) {
              notifyChange(MUSIC_CHANGED);
              playing=true;
            }
          }
 else {
            notifyChange(MUSIC_STOPPED);
            playing=false;
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          throw new RuntimeException(e);
        }
        unbindService(this);
      }
      public void onServiceDisconnected(      ComponentName aName){
        playing=false;
        notifyChange(MUSIC_STOPPED);
      }
    }
,0);
  }
 else   if (action.equals(""String_Node_Str"") && getPlayer() == 2) {
    stopSelf();
  }
 else   if ((action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"")|| action.equals(""String_Node_Str"")) && getPlayer() == 2) {
    bindService(new Intent().setClassName(""String_Node_Str"",""String_Node_Str""),new ServiceConnection(){
      public void onServiceConnected(      ComponentName aName,      IBinder aService){
        com.htc.music.IMediaPlaybackService mService=com.htc.music.IMediaPlaybackService.Stub.asInterface(aService);
        try {
          if (mService.isPlaying()) {
            playing=true;
            titleName=mService.getTrackName();
            artistName=mService.getArtistName();
            albumName=mService.getAlbumName();
            pos=mService.position();
            dur=mService.duration();
            albumId=mService.getAlbumId();
            songId=mService.getAudioId();
            if (mService.isPlaying()) {
              notifyChange(MUSIC_CHANGED);
              playing=true;
            }
          }
 else {
            notifyChange(MUSIC_STOPPED);
            playing=false;
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          throw new RuntimeException(e);
        }
        unbindService(this);
      }
      public void onServiceDisconnected(      ComponentName aName){
        playing=false;
        notifyChange(MUSIC_STOPPED);
      }
    }
,0);
  }
 else   if (action.equals(""String_Node_Str"") && getPlayer() == 3) {
    stopSelf();
  }
 else   if ((action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"")|| action.equals(""String_Node_Str"")) && getPlayer() == 3) {
    bindService(new Intent().setClassName(""String_Node_Str"",""String_Node_Str""),new ServiceConnection(){
      public void onServiceConnected(      ComponentName aName,      IBinder aService){
        com.piratemedia.musicmod.IMediaPlaybackService mService=com.piratemedia.musicmod.IMediaPlaybackService.Stub.asInterface(aService);
        try {
          if (mService.isPlaying()) {
            playing=true;
            titleName=mService.getTrackName();
            artistName=mService.getArtistName();
            albumName=mService.getAlbumName();
            pos=mService.position();
            dur=mService.duration();
            albumId=mService.getAlbumId();
            songId=mService.getAudioId();
            if (mService.isPlaying()) {
              notifyChange(MUSIC_CHANGED);
              playing=true;
            }
          }
 else {
            notifyChange(MUSIC_STOPPED);
            playing=false;
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          throw new RuntimeException(e);
        }
        unbindService(this);
      }
      public void onServiceDisconnected(      ComponentName aName){
        playing=false;
        notifyChange(MUSIC_STOPPED);
      }
    }
,0);
  }
 else   if (action.equals(""String_Node_Str"") && getPlayer() == 4) {
    stopSelf();
  }
 else   if ((action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"")|| action.equals(""String_Node_Str"")) && getPlayer() == 4) {
    bindService(new Intent().setClassName(""String_Node_Str"",""String_Node_Str""),new ServiceConnection(){
      public void onServiceConnected(      ComponentName aName,      IBinder aService){
        com.tbig.playerpro.IMediaPlaybackService mService=com.tbig.playerpro.IMediaPlaybackService.Stub.asInterface(aService);
        try {
          if (mService.isPlaying()) {
            playing=true;
            titleName=mService.getTrackName();
            artistName=mService.getArtistName();
            albumName=mService.getAlbumName();
            pos=mService.position();
            dur=mService.duration();
            albumId=mService.getAlbumId();
            songId=mService.getAudioId();
            if (mService.isPlaying()) {
              notifyChange(MUSIC_CHANGED);
              playing=true;
            }
          }
 else {
            notifyChange(MUSIC_STOPPED);
            playing=false;
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          throw new RuntimeException(e);
        }
        unbindService(this);
      }
      public void onServiceDisconnected(      ComponentName aName){
        playing=false;
        notifyChange(MUSIC_STOPPED);
      }
    }
,0);
  }
 else   if (action.equals(""String_Node_Str"")) {
    notifyChange(SMS_CHANGED);
  }
 else   if (action.equals(""String_Node_Str"")) {
    notifyChange(PHONE_CHANGED);
  }
 else   if (action.equals(""String_Node_Str"")) {
    notifyChange(MUTE_CHANGED);
  }
 else   if (action.equals(""String_Node_Str"")) {
    notifyChange(WIFI_CHANGED);
  }
 else   if (action.equals(""String_Node_Str"")) {
    notifyChange(WIFI_CHANGED);
  }
 else   if (action.equals(BluetoothAdapter.ACTION_STATE_CHANGED)) {
    notifyChange(BT_CHANGED);
  }
 else   if (action.equals(Intent.ACTION_BOOT_COMPLETED)) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    Intent lock=utils.getLockIntent(this);
    lock.setAction(utils.ACTION_UNLOCK);
    startActivity(lock);
  }
 else   if (action.equals(START_STOP_FORGROUND)) {
    foregroundStuff(utils.getCheckBoxPref(getBaseContext(),LockscreenSettings.SERVICE_FOREGROUND,true));
  }
 else   if (action.equals(STOP_SERVICE)) {
    stopSelf();
  }
}","@Override public void onStart(Intent aIntent,int aStartId){
  if (aIntent == null)   return;
  final String action=aIntent.getAction();
  if (action == null)   return;
  if (action.equals(""String_Node_Str"") && getPlayer() == 1) {
  }
 else   if ((action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"")|| action.equals(""String_Node_Str"")) && getPlayer() == 1) {
    bindService(new Intent().setClassName(""String_Node_Str"",""String_Node_Str""),new ServiceConnection(){
      public void onServiceConnected(      ComponentName aName,      IBinder aService){
        com.android.music.IMediaPlaybackService mService=com.android.music.IMediaPlaybackService.Stub.asInterface(aService);
        try {
          if (mService.isPlaying()) {
            playing=true;
            titleName=mService.getTrackName();
            artistName=mService.getArtistName();
            albumName=mService.getAlbumName();
            pos=mService.position();
            dur=mService.duration();
            albumId=mService.getAlbumId();
            songId=mService.getAudioId();
            if (mService.isPlaying()) {
              notifyChange(MUSIC_CHANGED);
              playing=true;
            }
          }
 else {
            notifyChange(MUSIC_STOPPED);
            playing=false;
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          throw new RuntimeException(e);
        }
        unbindService(this);
      }
      public void onServiceDisconnected(      ComponentName aName){
        playing=false;
        notifyChange(MUSIC_STOPPED);
      }
    }
,0);
  }
 else   if (action.equals(""String_Node_Str"") && getPlayer() == 2) {
  }
 else   if ((action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"")|| action.equals(""String_Node_Str"")) && getPlayer() == 2) {
    bindService(new Intent().setClassName(""String_Node_Str"",""String_Node_Str""),new ServiceConnection(){
      public void onServiceConnected(      ComponentName aName,      IBinder aService){
        com.htc.music.IMediaPlaybackService mService=com.htc.music.IMediaPlaybackService.Stub.asInterface(aService);
        try {
          if (mService.isPlaying()) {
            playing=true;
            titleName=mService.getTrackName();
            artistName=mService.getArtistName();
            albumName=mService.getAlbumName();
            pos=mService.position();
            dur=mService.duration();
            albumId=mService.getAlbumId();
            songId=mService.getAudioId();
            if (mService.isPlaying()) {
              notifyChange(MUSIC_CHANGED);
              playing=true;
            }
          }
 else {
            notifyChange(MUSIC_STOPPED);
            playing=false;
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          throw new RuntimeException(e);
        }
        unbindService(this);
      }
      public void onServiceDisconnected(      ComponentName aName){
        playing=false;
        notifyChange(MUSIC_STOPPED);
      }
    }
,0);
  }
 else   if (action.equals(""String_Node_Str"") && getPlayer() == 3) {
  }
 else   if ((action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"")|| action.equals(""String_Node_Str"")) && getPlayer() == 3) {
    bindService(new Intent().setClassName(""String_Node_Str"",""String_Node_Str""),new ServiceConnection(){
      public void onServiceConnected(      ComponentName aName,      IBinder aService){
        com.piratemedia.musicmod.IMediaPlaybackService mService=com.piratemedia.musicmod.IMediaPlaybackService.Stub.asInterface(aService);
        try {
          if (mService.isPlaying()) {
            playing=true;
            titleName=mService.getTrackName();
            artistName=mService.getArtistName();
            albumName=mService.getAlbumName();
            pos=mService.position();
            dur=mService.duration();
            albumId=mService.getAlbumId();
            songId=mService.getAudioId();
            if (mService.isPlaying()) {
              notifyChange(MUSIC_CHANGED);
              playing=true;
            }
          }
 else {
            notifyChange(MUSIC_STOPPED);
            playing=false;
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          throw new RuntimeException(e);
        }
        unbindService(this);
      }
      public void onServiceDisconnected(      ComponentName aName){
        playing=false;
        notifyChange(MUSIC_STOPPED);
      }
    }
,0);
  }
 else   if (action.equals(""String_Node_Str"") && getPlayer() == 4) {
  }
 else   if ((action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"") || action.equals(""String_Node_Str"")|| action.equals(""String_Node_Str"")) && getPlayer() == 4) {
    bindService(new Intent().setClassName(""String_Node_Str"",""String_Node_Str""),new ServiceConnection(){
      public void onServiceConnected(      ComponentName aName,      IBinder aService){
        com.tbig.playerpro.IMediaPlaybackService mService=com.tbig.playerpro.IMediaPlaybackService.Stub.asInterface(aService);
        try {
          if (mService.isPlaying()) {
            playing=true;
            titleName=mService.getTrackName();
            artistName=mService.getArtistName();
            albumName=mService.getAlbumName();
            pos=mService.position();
            dur=mService.duration();
            albumId=mService.getAlbumId();
            songId=mService.getAudioId();
            if (mService.isPlaying()) {
              notifyChange(MUSIC_CHANGED);
              playing=true;
            }
          }
 else {
            notifyChange(MUSIC_STOPPED);
            playing=false;
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          throw new RuntimeException(e);
        }
        unbindService(this);
      }
      public void onServiceDisconnected(      ComponentName aName){
        playing=false;
        notifyChange(MUSIC_STOPPED);
      }
    }
,0);
  }
 else   if (action.equals(""String_Node_Str"")) {
    notifyChange(SMS_CHANGED);
  }
 else   if (action.equals(""String_Node_Str"")) {
    notifyChange(PHONE_CHANGED);
  }
 else   if (action.equals(""String_Node_Str"")) {
    notifyChange(MUTE_CHANGED);
  }
 else   if (action.equals(""String_Node_Str"")) {
    notifyChange(WIFI_CHANGED);
  }
 else   if (action.equals(""String_Node_Str"")) {
    notifyChange(WIFI_CHANGED);
  }
 else   if (action.equals(BluetoothAdapter.ACTION_STATE_CHANGED)) {
    notifyChange(BT_CHANGED);
  }
 else   if (action.equals(Intent.ACTION_BOOT_COMPLETED)) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    Intent lock=utils.getLockIntent(this);
    lock.setAction(utils.ACTION_UNLOCK);
    startActivity(lock);
  }
 else   if (action.equals(START_STOP_FORGROUND)) {
    foregroundStuff(utils.getCheckBoxPref(getBaseContext(),LockscreenSettings.SERVICE_FOREGROUND,true));
  }
 else   if (action.equals(STOP_SERVICE)) {
    stopSelf();
  }
}"
81266,"/** 
 * Adds the simple attribute content.
 * @param simpleAttributeContent the simple attribute content
 */
public void addSimpleAttributeContent(AttributeElement simpleAttributeContent){
  if (this.simpleAttributeContent == null) {
    this.simpleAttributeContent=new TreeSet<AttributeElement>();
  }
  this.simpleAttributeContent.add(simpleAttributeContent);
}","/** 
 * Adds the simple attribute content.
 * @param simpleAttributeContent the simple attribute content
 */
public void addSimpleAttributeContent(AttributeElement simpleAttributeContent){
  if (this.simpleAttributeContent == null) {
    this.simpleAttributeContent=new LinkedHashSet<AttributeElement>();
  }
  this.simpleAttributeContent.add(simpleAttributeContent);
}"
81267,"/** 
 * Parses the child elements.
 * @param nsprefix namespace
 * @param ctype complex type
 * @param ctypes collection of all complex types
 * @param element parent complex type
 * @param xsdDocument handle to xsd document
 * @return list of all children of the given element node and alsoassociates with the complex type to enable traversal.
 * @throws XsdDocException 
 */
private Set<Element> parseChildElements(ComplexType ctype,NodeList ctypes,org.w3c.dom.Element element,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{ctype,ctypes,element,xsdDocument});
  Set<Element> elements=new TreeSet<Element>();
  NodeList domElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    String type=obj.getAttribute(""String_Node_Str"");
    String[] typeParts=type.split(""String_Node_Str"");
    if (typeParts != null && typeParts.length > 1)     type=typeParts[1];
    Element elem=Context.getContext().getNewElement();
    elem.setName(name);
    elem.setType(type);
    elem.setContainerComplexType(ctype);
    String prevComment=Utils.getPreviousComment(obj);
    String nextComment=Utils.getNextComment(obj);
    if (prevComment != null || nextComment != null) {
      Comment comment=new Comment();
      comment.setNextComment(nextComment);
      comment.setPreviousComment(prevComment);
      elem.setComment(comment);
    }
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        elem.getAttributes().add(attribute);
      }
    }
    elem.setAnnotationInfo(parseAnnotation(obj));
    elements.add(elem);
    postProcessElement(elem,obj);
    xsdDocument.addIndependentElement(elem);
  }
  NodeList attributeNodes=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  if (attributeNodes != null) {
    int count=attributeNodes.getLength();
    for (int j=0; j < count; j++) {
      org.w3c.dom.Element attrElem=(org.w3c.dom.Element)attributeNodes.item(j);
      AttributeElement attr=Context.getContext().getNewAttribute();
      String name=attrElem.getAttribute(""String_Node_Str"");
      if (Utils.isEmpty(name)) {
        for (int k=0; k < count; k++) {
          org.w3c.dom.Element ref=(org.w3c.dom.Element)attributeNodes.item(k);
          name=ref.getAttribute(""String_Node_Str"");
        }
      }
      String type=attrElem.getAttribute(""String_Node_Str"");
      attr.setContainerComplexType(ctype);
      String prevComment=Utils.getPreviousComment(attrElem);
      String nextComment=Utils.getNextComment(attrElem);
      if (prevComment != null || nextComment != null) {
        Comment comment=new Comment();
        comment.setNextComment(nextComment);
        comment.setPreviousComment(prevComment);
        attr.setComment(comment);
      }
      if (Utils.isEmpty(type)) {
        NodeList simpleTypes=attrElem.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
        if (simpleTypes.getLength() > 0) {
          org.w3c.dom.Element elem=(org.w3c.dom.Element)simpleTypes.item(0);
          SimpleType simpleType=populateSimpleType(xsdDocument,elem,true);
          if (Utils.isEmpty(simpleType.getName())) {
            simpleType.setName(name + ""String_Node_Str"");
            if (simpleType.getEnums() != null) {
              for (              EnumElement enumE : simpleType.getEnums()) {
                enumE.setType(simpleType.getName());
              }
            }
          }
          attr.setType(simpleType.getName());
          attr.setBaseType(simpleType.getName());
        }
      }
 else {
        attr.setType(type);
      }
      attr.setName(name);
      org.w3c.dom.Element parent=(org.w3c.dom.Element)attrElem.getParentNode();
      if (parent.getTagName().endsWith(""String_Node_Str"")) {
        String baseType=parent.getAttribute(""String_Node_Str"");
        attr.setBaseType(baseType);
      }
      NamedNodeMap nameNodeMap=attrElem.getAttributes();
      int size=nameNodeMap.getLength();
      for (int k=0; k < size; k++) {
        Attr attri=(Attr)nameNodeMap.item(k);
        if (attri != null) {
          Attribute attribute=new Attribute();
          attribute.setName(attri.getName());
          attribute.setValue(attri.getValue());
          attr.getAttributes().add(attribute);
        }
      }
      attr.setAnnotationInfo(parseAnnotation(attrElem));
      postProcessAttribute(attr,attrElem);
      ctype.addSimpleAttributeContent(attr);
    }
  }
  NodeList extensibleElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  org.w3c.dom.Element extensionbaseElem=(org.w3c.dom.Element)extensibleElements.item(0);
  if (extensionbaseElem != null) {
    String attribute=extensionbaseElem.getAttribute(""String_Node_Str"");
    String parentType=null;
    String[] strs=attribute.split(""String_Node_Str"");
    if (strs != null && strs.length > 1)     parentType=strs[1];
 else     parentType=attribute;
    ctype.setParentType(parentType);
    if (!Utils.isEmpty(parentType)) {
      xsdDocument.addParentToComplexTypeMap(parentType,ctype.getName());
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{elements});
  return elements;
}","/** 
 * Parses the child elements.
 * @param nsprefix namespace
 * @param ctype complex type
 * @param ctypes collection of all complex types
 * @param element parent complex type
 * @param xsdDocument handle to xsd document
 * @return list of all children of the given element node and alsoassociates with the complex type to enable traversal.
 * @throws XsdDocException 
 */
private Set<Element> parseChildElements(ComplexType ctype,org.w3c.dom.Element element,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{ctype,ctypes,element,xsdDocument});
  Set<Element> elements=new TreeSet<Element>();
  NodeList domElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    String type=obj.getAttribute(""String_Node_Str"");
    String[] typeParts=type.split(""String_Node_Str"");
    if (typeParts != null && typeParts.length > 1)     type=typeParts[1];
    Element elem=Context.getContext().getNewElement();
    elem.setName(name);
    elem.setType(type);
    elem.setContainerComplexType(ctype);
    String prevComment=Utils.getPreviousComment(obj);
    String nextComment=Utils.getNextComment(obj);
    if (prevComment != null || nextComment != null) {
      Comment comment=new Comment();
      comment.setNextComment(nextComment);
      comment.setPreviousComment(prevComment);
      elem.setComment(comment);
    }
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        elem.getAttributes().add(attribute);
      }
    }
    elem.setAnnotationInfo(parseAnnotation(obj));
    elements.add(elem);
    postProcessElement(elem,obj);
    xsdDocument.addIndependentElement(elem);
  }
  NodeList attributeNodes=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  if (attributeNodes != null) {
    int count=attributeNodes.getLength();
    for (int j=0; j < count; j++) {
      org.w3c.dom.Element attrElem=(org.w3c.dom.Element)attributeNodes.item(j);
      AttributeElement attr=Context.getContext().getNewAttribute();
      String name=attrElem.getAttribute(""String_Node_Str"");
      if (Utils.isEmpty(name)) {
        for (int k=0; k < count; k++) {
          org.w3c.dom.Element ref=(org.w3c.dom.Element)attributeNodes.item(k);
          name=ref.getAttribute(""String_Node_Str"");
        }
      }
      String type=attrElem.getAttribute(""String_Node_Str"");
      attr.setContainerComplexType(ctype);
      String prevComment=Utils.getPreviousComment(attrElem);
      String nextComment=Utils.getNextComment(attrElem);
      if (prevComment != null || nextComment != null) {
        Comment comment=new Comment();
        comment.setNextComment(nextComment);
        comment.setPreviousComment(prevComment);
        attr.setComment(comment);
      }
      if (Utils.isEmpty(type)) {
        NodeList simpleTypes=attrElem.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
        if (simpleTypes.getLength() > 0) {
          org.w3c.dom.Element elem=(org.w3c.dom.Element)simpleTypes.item(0);
          SimpleType simpleType=populateSimpleType(xsdDocument,elem,true);
          if (Utils.isEmpty(simpleType.getName())) {
            simpleType.setName(name + ""String_Node_Str"");
            if (simpleType.getEnums() != null) {
              for (              EnumElement enumE : simpleType.getEnums()) {
                enumE.setType(simpleType.getName());
              }
            }
          }
          attr.setType(simpleType.getName());
          attr.setBaseType(simpleType.getName());
        }
      }
 else {
        attr.setType(type);
      }
      attr.setName(name);
      org.w3c.dom.Element parent=(org.w3c.dom.Element)attrElem.getParentNode();
      if (parent.getTagName().endsWith(""String_Node_Str"")) {
        String baseType=parent.getAttribute(""String_Node_Str"");
        attr.setBaseType(baseType);
      }
      NamedNodeMap nameNodeMap=attrElem.getAttributes();
      int size=nameNodeMap.getLength();
      for (int k=0; k < size; k++) {
        Attr attri=(Attr)nameNodeMap.item(k);
        if (attri != null) {
          Attribute attribute=new Attribute();
          attribute.setName(attri.getName());
          attribute.setValue(attri.getValue());
          attr.getAttributes().add(attribute);
        }
      }
      attr.setAnnotationInfo(parseAnnotation(attrElem));
      postProcessAttribute(attr,attrElem);
      ctype.addSimpleAttributeContent(attr);
    }
  }
  NodeList extensibleElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  org.w3c.dom.Element extensionbaseElem=(org.w3c.dom.Element)extensibleElements.item(0);
  if (extensionbaseElem != null) {
    String attribute=extensionbaseElem.getAttribute(""String_Node_Str"");
    String parentType=null;
    String[] strs=attribute.split(""String_Node_Str"");
    if (strs != null && strs.length > 1)     parentType=strs[1];
 else     parentType=attribute;
    ctype.setParentType(parentType);
    if (!Utils.isEmpty(parentType)) {
      xsdDocument.addParentToComplexTypeMap(parentType,ctype.getName());
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{elements});
  return elements;
}"
81268,"/** 
 * Parses the complex types.
 * @param tagName the tag name
 * @param srcDoc dom handle
 * @param xsdDocument handle parses the complex types, its annotations and populates the xsd
 * @throws XsdDocException 
 */
private void parseComplexTypes(Document srcDoc,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{srcDoc,xsdDocument});
  NodeList ctypeElements=srcDoc.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  this.setCtypes(ctypeElements);
  int noOfDomElements=ctypeElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)ctypeElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    ComplexType cType=Context.getContext().getNewComplexType();
    cType.setName(name);
    cType.setAnnotationInfo(parseAnnotation(obj));
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        cType.getAttributes().add(attribute);
      }
    }
    cType.setChildElements(this.parseChildElements(cType,ctypeElements,obj,xsdDocument));
    List<Element> instances=(List<Element>)typeElementsMap.get(name);
    if (instances != null) {
      cType.setInstanceElements(instances);
    }
    postProcessComplexType(cType,obj);
    xsdDocument.addComplexType(cType);
  }
  logger.log(Level.FINER,""String_Node_Str"",xsdDocument);
}","/** 
 * Parses the complex types.
 * @param tagName the tag name
 * @param srcDoc dom handle
 * @param xsdDocument handle parses the complex types, its annotations and populates the xsd
 * @throws XsdDocException 
 */
private void parseComplexTypes(Document srcDoc,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{srcDoc,xsdDocument});
  NodeList ctypeElements=srcDoc.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  this.setCtypes(ctypeElements);
  int noOfDomElements=ctypeElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)ctypeElements.item(i);
    xsdDocument.addComplexType(processComplexType(xsdDocument,obj));
  }
  logger.log(Level.FINER,""String_Node_Str"",xsdDocument);
}"
81269,"/** 
 * Parses the all elements.
 * @param tagName the tag name
 * @param srcDoc the src doc
 * @param xsdDocument parses ""element"" nodes from the document and constructs its POJO representation. sticks the annotation associated with the element.
 * @throws ParserException 
 */
private void parseAllElements(String tagName,Document srcDoc,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{tagName,srcDoc,xsdDocument});
  List<Element> elements=new ArrayList<Element>();
  NodeList domElements=srcDoc.getElementsByTagName(tagName);
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    String type=obj.getAttribute(""String_Node_Str"");
    String[] typeParts=type.split(""String_Node_Str"");
    if (typeParts != null && typeParts.length > 1)     type=typeParts[1];
    Element elem=Context.getContext().getNewElement();
    elem.setName(name);
    elem.setType(type);
    String prevComment=Utils.getPreviousComment(obj);
    String nextComment=Utils.getNextComment(obj);
    if (prevComment != null || nextComment != null) {
      Comment comment=new Comment();
      comment.setNextComment(nextComment);
      comment.setPreviousComment(prevComment);
      elem.setComment(comment);
    }
    List<Element> instances=(List<Element>)typeElementsMap.get(type);
    if (instances == null) {
      instances=new ArrayList<Element>();
      instances.add(elem);
      typeElementsMap.put(type,instances);
    }
 else {
      instances.add(elem);
      typeElementsMap.put(type,instances);
    }
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        elem.getAttributes().add(attribute);
      }
    }
    elem.setAnnotationInfo(parseAnnotation(obj));
    postProcessElement(elem,obj);
    elements.add(elem);
    xsdDocument.addIndependentElement(elem);
    logger.log(Level.FINER,""String_Node_Str"",xsdDocument);
  }
}","/** 
 * Parses the all elements.
 * @param tagName the tag name
 * @param srcDoc the src doc
 * @param xsdDocument parses ""element"" nodes from the document and constructs its POJO representation. sticks the annotation associated with the element.
 * @throws ParserException 
 */
private void parseAllElements(String tagName,Document srcDoc,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{tagName,srcDoc,xsdDocument});
  List<Element> elements=new ArrayList<Element>();
  NodeList domElements=srcDoc.getElementsByTagName(tagName);
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    Element elem=Context.getContext().getNewElement();
    elem.setName(name);
    String type=obj.getAttribute(""String_Node_Str"");
    if (!Utils.isEmpty(type)) {
      String[] typeParts=type.split(""String_Node_Str"");
      if (typeParts != null && typeParts.length > 1) {
        type=typeParts[1];
      }
    }
 else {
      NodeList nodes=obj.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
      if (nodes != null && nodes.getLength() > 0) {
        org.w3c.dom.Element node=(org.w3c.dom.Element)nodes.item(0);
        ComplexType cType=processComplexType(xsdDocument,node);
        if (Utils.isEmpty(cType.getName())) {
          cType.setName(name + ""String_Node_Str"");
          List<Element> instances=(List<Element>)typeElementsMap.get(name);
          if (instances != null) {
            cType.setInstanceElements(instances);
          }
 else {
            instances=new ArrayList<Element>();
            instances.add(elem);
            cType.setInstanceElements(instances);
          }
        }
        type=cType.getName();
        xsdDocument.addComplexType(cType);
      }
    }
    elem.setType(type);
    String prevComment=Utils.getPreviousComment(obj);
    String nextComment=Utils.getNextComment(obj);
    if (prevComment != null || nextComment != null) {
      Comment comment=new Comment();
      comment.setNextComment(nextComment);
      comment.setPreviousComment(prevComment);
      elem.setComment(comment);
    }
    List<Element> instances=(List<Element>)typeElementsMap.get(type);
    if (instances == null) {
      instances=new ArrayList<Element>();
      instances.add(elem);
      typeElementsMap.put(type,instances);
    }
 else {
      instances.add(elem);
      typeElementsMap.put(type,instances);
    }
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        elem.getAttributes().add(attribute);
      }
    }
    elem.setAnnotationInfo(parseAnnotation(obj));
    postProcessElement(elem,obj);
    elements.add(elem);
    xsdDocument.addIndependentElement(elem);
    logger.log(Level.FINER,""String_Node_Str"",xsdDocument);
  }
}"
81270,"private void writeUseFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(type.getName(),currentPackageName + ""String_Node_Str""));
  Map<String,String> replacementMap=new HashMap<String,String>();
  replacementMap.put(""String_Node_Str"",getRelativePath(currentPackageName + ""String_Node_Str""));
  replacementMap.put(""String_Node_Str"",""String_Node_Str"");
  buildHeader(html,replacementMap,""String_Node_Str"");
  addHeadingTable(html,""String_Node_Str"" + type.getName());
  boolean tableAdded=false;
  Set<String> methods=returnTypeToMethodMap.get(type.getName());
  if (methods != null) {
    html.append(Constants.HTML_BR_TWICE);
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"" + type.getName());
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    for (    String str : methods) {
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + type.getName() + Constants.DOT_HTML,null,type.getName()));
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(str);
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(Constants.HTML_TABLE_TR_END);
    }
    html.append(Constants.HTML_TABLE_END);
    tableAdded=true;
  }
  methods=paramsToMethodMap.get(type.getName());
  if (methods != null) {
    html.append(Constants.HTML_BR_TWICE);
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"" + type.getName());
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    Iterator<String> itMethods=methods.iterator();
    while (itMethods.hasNext()) {
      String method=itMethods.next();
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      String retTypeName=method.substring(0,method.indexOf('-'));
      html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + retTypeName + Constants.DOT_HTML,null,retTypeName));
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(method.substring(method.indexOf('-') + 1));
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(Constants.HTML_TABLE_TR_END);
    }
    html.append(Constants.HTML_TABLE_END);
    tableAdded=true;
  }
  if (doc instanceof WSDLDocument) {
    Map<String,List<ComplexType>> map=doc.getElementComplexTypeMap();
    List<ComplexType> tempTypes=map.get(type.getName());
    if (tempTypes != null) {
      html.append(Constants.HTML_BR_TWICE);
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"" + type.getName());
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      Set<String> set=new TreeSet<String>();
      if (tempTypes != null) {
        for (        ComplexType tempType : tempTypes) {
          set.addAll(getExtensionTypes(tempType.getName(),doc));
        }
      }
      Iterator<String> setIterator=set.iterator();
      while (setIterator.hasNext()) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        String name=setIterator.next();
        html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + name + Constants.DOT_HTML,null,name));
        html.append(Constants.HTML_TABLE_TD_END);
        ComplexType cType=doc.searchCType(Utils.removeNameSpace(name));
        String desc=""String_Node_Str"";
        if (cType != null) {
          desc=cType.getAnnotations().getDocumentation();
        }
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(desc);
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
      html.append(Constants.HTML_TABLE_END);
      tableAdded=true;
    }
  }
  if (!tableAdded) {
    html.append(type.getName() + ""String_Node_Str"");
  }
  html.append(Constants.HTML_BR);
  addFooter(html,replacementMap,""String_Node_Str"");
  html.append(HtmlUtils.getEndTags());
  writeFile(html,classUseFolderPath,type.getName() + Constants.DOT_HTML);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","private void writeUseFile(WSDLDocInterface doc,AbstractType type) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(type.getName(),currentPackageName + ""String_Node_Str""));
  Map<String,String> replacementMap=new HashMap<String,String>();
  replacementMap.put(""String_Node_Str"",getRelativePath(currentPackageName + ""String_Node_Str""));
  replacementMap.put(""String_Node_Str"",""String_Node_Str"");
  buildHeader(html,replacementMap,""String_Node_Str"");
  addHeadingTable(html,""String_Node_Str"" + type.getName());
  boolean tableAdded=false;
  Set<String> methods=returnTypeToMethodMap.get(type.getName());
  if (methods != null) {
    html.append(Constants.HTML_BR_TWICE);
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"" + type.getName());
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    for (    String str : methods) {
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + type.getName() + Constants.DOT_HTML,null,type.getName()));
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(str);
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(Constants.HTML_TABLE_TR_END);
    }
    html.append(Constants.HTML_TABLE_END);
    tableAdded=true;
  }
  methods=paramsToMethodMap.get(type.getName());
  if (methods != null) {
    html.append(Constants.HTML_BR_TWICE);
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"" + type.getName());
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    Iterator<String> itMethods=methods.iterator();
    while (itMethods.hasNext()) {
      String method=itMethods.next();
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      String retTypeName=method.substring(0,method.indexOf('-'));
      html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + retTypeName + Constants.DOT_HTML,null,retTypeName));
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(method.substring(method.indexOf('-') + 1));
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(Constants.HTML_TABLE_TR_END);
    }
    html.append(Constants.HTML_TABLE_END);
    tableAdded=true;
  }
  if (doc instanceof WSDLDocument) {
    Map<String,List<ComplexType>> map=doc.getElementComplexTypeMap();
    List<ComplexType> tempTypes=map.get(type.getName());
    if (tempTypes != null) {
      html.append(Constants.HTML_BR_TWICE);
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"" + type.getName());
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      Set<String> set=new TreeSet<String>();
      if (tempTypes != null) {
        for (        ComplexType tempType : tempTypes) {
          set.addAll(getExtensionTypes(tempType.getName(),doc));
        }
      }
      Iterator<String> setIterator=set.iterator();
      while (setIterator.hasNext()) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        String name=setIterator.next();
        html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + name + Constants.DOT_HTML,null,name));
        html.append(Constants.HTML_TABLE_TD_END);
        ComplexType cType=doc.searchCType(Utils.removeNameSpace(name));
        String desc=""String_Node_Str"";
        if (cType != null) {
          desc=cType.getAnnotations().getDocumentation();
        }
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(desc);
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
      html.append(Constants.HTML_TABLE_END);
      tableAdded=true;
    }
  }
  if (!tableAdded) {
    html.append(type.getName() + ""String_Node_Str"");
  }
  html.append(Constants.HTML_BR);
  addFooter(html,replacementMap,""String_Node_Str"");
  html.append(HtmlUtils.getEndTags());
  writeFile(html,classUseFolderPath,type.getName() + Constants.DOT_HTML);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
81271,"/** 
 * Write simple type file.
 * @param doc the doc
 * @param type the type
 * @throws OutputFormatterException
 */
private void writeSimpleTypeFile(WSDLDocInterface doc,SimpleType type) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  String typeName=type.getName();
  StringBuffer html=new StringBuffer();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + TYPES));
    Map<String,String> replacementMap=new HashMap<String,String>();
    replacementMap.put(""String_Node_Str"",getRelativePath(currentPackageName + TYPES));
    replacementMap.put(""String_Node_Str"",type.getName());
    buildHeader(html,replacementMap,""String_Node_Str"");
    String parentType=type.getBase();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      typeName=typeName + ""String_Node_Str"" + parentType+ ""String_Node_Str"";
    }
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    List<EnumElement> enumElements=type.getEnums();
    if (enumElements != null && !enumElements.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      EnumElement enumElement : enumElements) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(HtmlUtils.getAnchorTag(enumElement.getValue(),null,null,null));
        html.append(enumElement.getValue());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        if (enumElement.getAnnotations().getDocumentation() != null) {
          html.append(enumElement.getAnnotations().getDocumentation());
        }
        deprDet=AnnotationsHelper.processDeprication(enumElement.getAnnotations());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,enumElement.getAnnotations());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
      html.append(Constants.HTML_TABLE_END);
    }
    addFooter(html,replacementMap,""String_Node_Str"");
    writeFile(html,currentTypesFolderPath,type.getName() + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Write simple type file.
 * @param doc the doc
 * @param type the type
 * @throws OutputFormatterException
 */
private void writeSimpleTypeFile(WSDLDocInterface doc,SimpleType type) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  String typeName=type.getName();
  StringBuffer html=new StringBuffer();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + TYPES));
    Map<String,String> replacementMap=new HashMap<String,String>();
    replacementMap.put(""String_Node_Str"",getRelativePath(currentPackageName + TYPES));
    replacementMap.put(""String_Node_Str"",type.getName());
    buildHeader(html,replacementMap,""String_Node_Str"");
    String parentType=type.getBase();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      typeName=typeName + ""String_Node_Str"" + parentType+ ""String_Node_Str"";
    }
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    List<EnumElement> enumElements=type.getEnums();
    if (enumElements != null && !enumElements.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      EnumElement enumElement : enumElements) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(HtmlUtils.getAnchorTag(enumElement.getValue(),null,null,null));
        html.append(enumElement.getValue());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        if (enumElement.getAnnotations().getDocumentation() != null) {
          html.append(enumElement.getAnnotations().getDocumentation());
        }
        deprDet=AnnotationsHelper.processDeprication(enumElement.getAnnotations());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,enumElement.getAnnotations());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
      html.append(Constants.HTML_TABLE_END);
    }
    writeUseFile(doc,type);
    addFooter(html,replacementMap,""String_Node_Str"");
    writeFile(html,currentTypesFolderPath,type.getName() + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
81272,"/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + TYPES));
    Map<String,String> replacementMap=new HashMap<String,String>();
    replacementMap.put(""String_Node_Str"",getRelativePath(currentPackageName + TYPES));
    replacementMap.put(""String_Node_Str"",type.getName());
    buildHeader(html,replacementMap,""String_Node_Str"");
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    buildFieldSummary(html,doc,type);
    html.append(Constants.HTML_HR);
    html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    if (elements.isEmpty()) {
      html.append(type.getName() + ""String_Node_Str"");
      html.append(Constants.HTML_TABLE_END);
    }
 else {
      html.append(Constants.HTML_BR + Constants.HTML_BR);
      for (      Element element : elements) {
        if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
          isRecursive=true;
        }
        String nodePath=parentPath + ""String_Node_Str"" + element.getName();
        String typeCName=getCTypeTypeName(element.getType());
        if (type.getName().equalsIgnoreCase(typeCName)) {
          isRecursive=true;
        }
        html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
        if (doc.searchCType(typeCName) != null && !isRecursive) {
          writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else         if (doc.searchSimpleType(typeCName) != null) {
          writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else {
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
        }
        if (element.getAnnotationInfo().getDocumentation() != null) {
          html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
        }
        processDefaultsAndBoundries(html,doc,element);
        deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,element.getAnnotationInfo());
        html.append(Constants.HTML_HR + Constants.HTML_BR);
      }
    }
    writeUseFile(doc,type,parentPath);
    addFooter(html,replacementMap,""String_Node_Str"");
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + TYPES));
    Map<String,String> replacementMap=new HashMap<String,String>();
    replacementMap.put(""String_Node_Str"",getRelativePath(currentPackageName + TYPES));
    replacementMap.put(""String_Node_Str"",type.getName());
    buildHeader(html,replacementMap,""String_Node_Str"");
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    buildFieldSummary(html,doc,type);
    html.append(Constants.HTML_HR);
    html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    if (elements.isEmpty()) {
      html.append(type.getName() + ""String_Node_Str"");
      html.append(Constants.HTML_TABLE_END);
    }
 else {
      html.append(Constants.HTML_BR + Constants.HTML_BR);
      for (      Element element : elements) {
        if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
          isRecursive=true;
        }
        String nodePath=parentPath + ""String_Node_Str"" + element.getName();
        String typeCName=getCTypeTypeName(element.getType());
        if (type.getName().equalsIgnoreCase(typeCName)) {
          isRecursive=true;
        }
        html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
        ComplexType cType=doc.searchCType(typeCName);
        if (cType != null && !isRecursive) {
          writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
          String typeVisName=HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName);
          StringBuffer attrParams=new StringBuffer();
          if (!Utils.isEmpty(type.getParentType())) {
            String baseType=Utils.removeNameSpace(type.getParentType());
            if (doc.searchCType(baseType) == null && doc.searchSimpleType(baseType) == null) {
              attrParams.append(baseType);
            }
 else {
              attrParams.append(HtmlUtils.getAnchorTag(null,baseType + Constants.DOT_HTML,baseType,baseType));
            }
          }
          if (attrParams.length() > 0) {
            typeVisName+=""String_Node_Str"" + attrParams + ""String_Node_Str"";
          }
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeVisName+ ""String_Node_Str"",""String_Node_Str""));
        }
 else         if (doc.searchSimpleType(typeCName) != null) {
          SimpleType Stype=doc.searchSimpleType(typeCName);
          writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
          String typeVisName=HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName);
          String base=Utils.removeNameSpace(Stype.getBase());
          if (!Utils.isEmpty(base)) {
            if (doc.searchCType(base) == null && doc.searchSimpleType(base) == null) {
              typeVisName+=""String_Node_Str"" + base + ""String_Node_Str"";
            }
 else {
              typeVisName+=""String_Node_Str"" + HtmlUtils.getAnchorTag(null,base + Constants.DOT_HTML,base,base) + ""String_Node_Str"";
            }
          }
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeVisName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else {
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
        }
        if (element.getAnnotationInfo().getDocumentation() != null) {
          html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
        }
        processDefaultsAndBoundries(html,doc,element);
        deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,element.getAnnotationInfo());
        html.append(Constants.HTML_HR + Constants.HTML_BR);
      }
    }
    writeUseFile(doc,type);
    addFooter(html,replacementMap,""String_Node_Str"");
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
81273,"private void mergeImportedXsd(Document document,XSDDocument xsdDocument,String tagName) throws ParserException, SAXException, IOException {
  if (document != null) {
    NodeList nodes=document.getElementsByTagNameNS(""String_Node_Str"",tagName);
    if (nodes != null) {
      for (int i=0; i < nodes.getLength(); i++) {
        org.w3c.dom.Element element=(org.w3c.dom.Element)nodes.item(i);
        if (element.hasAttribute(""String_Node_Str"")) {
          URL url=convertToURL(element.getAttribute(""String_Node_Str""),xsdDocument.getDocumentURL());
          if (url != null) {
            String schemaLocation=url.toExternalForm();
            if (!xsdDocument.getXsdsProcessed().contains(schemaLocation)) {
              XSDParserImpl parser=Context.getContext().getNewXsdParser();
              XSDDocument parsedDocument=(XSDDocument)parser.parse(schemaLocation);
              for (              Element elem : parsedDocument.getAllIndependentElements()) {
                xsdDocument.addIndependentElement(elem);
              }
              for (              ComplexType elem : parsedDocument.getAllComplexTypes()) {
                xsdDocument.addComplexType(elem);
              }
              for (              SimpleType elem : parsedDocument.getAllSimpleTypes()) {
                xsdDocument.addSimpleType(elem);
              }
              xsdDocument.getAllEnums().addAll(parsedDocument.getAllEnums());
              xsdDocument.getElementComplexTypeMap().putAll(parsedDocument.getElementComplexTypeMap());
              xsdDocument.getParentToComplexTypeMap().putAll(parsedDocument.getParentToComplexTypeMap());
              xsdDocument.getXsdsProcessed().addAll(parsedDocument.getXsdsProcessed());
              xsdDocument.getXsdsProcessed().add(schemaLocation);
            }
          }
 else {
            Logger.getLogger(XSDParserImpl.class.getName()).log(Level.SEVERE,element.getAttribute(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
      }
    }
  }
}","private void mergeImportedXsd(Document document,XSDDocument xsdDocument,String tagName) throws ParserException, SAXException, IOException {
  if (document != null) {
    NodeList nodes=document.getElementsByTagNameNS(""String_Node_Str"",tagName);
    if (nodes != null) {
      for (int i=0; i < nodes.getLength(); i++) {
        org.w3c.dom.Element element=(org.w3c.dom.Element)nodes.item(i);
        if (element.hasAttribute(""String_Node_Str"")) {
          URL url=convertToURL(element.getAttribute(""String_Node_Str""),xsdDocument.getDocumentURL());
          if (url != null) {
            String schemaLocation=url.toExternalForm();
            if (!xsdDocument.getXsdsProcessed().contains(schemaLocation)) {
              XSDParserImpl parser=Context.getContext().getNewXsdParser();
              XSDDocument parsedDocument=(XSDDocument)parser.parse(schemaLocation);
              for (              Element elem : parsedDocument.getAllIndependentElements()) {
                xsdDocument.addIndependentElement(elem);
              }
              for (              ComplexType elem : parsedDocument.getAllComplexTypes()) {
                ComplexType cType=xsdDocument.searchCType(elem.getName());
                if (cType != null && cType.getParentType() != null && cType.getParentType().equals(elem.getName())) {
                  if (cType.getChildElements() != null) {
                    cType.getChildElements().addAll(elem.getChildElements());
                  }
 else {
                    cType.setChildElements(elem.getChildElements());
                  }
                  if (cType.getAttributes() != null) {
                    cType.getAttributes().addAll(elem.getAttributes());
                  }
 else {
                    cType.setAttributes(elem.getAttributes());
                  }
                  if (cType.getInstanceElements() != null) {
                    cType.getInstanceElements().addAll(elem.getInstanceElements());
                  }
 else {
                    cType.setInstanceElements(elem.getInstanceElements());
                  }
                  cType.setParentType(null);
                }
 else {
                  xsdDocument.addComplexType(elem);
                }
              }
              for (              SimpleType elem : parsedDocument.getAllSimpleTypes()) {
                xsdDocument.addSimpleType(elem);
              }
              xsdDocument.getAllEnums().addAll(parsedDocument.getAllEnums());
              xsdDocument.getElementComplexTypeMap().putAll(parsedDocument.getElementComplexTypeMap());
              xsdDocument.getParentToComplexTypeMap().putAll(parsedDocument.getParentToComplexTypeMap());
              xsdDocument.getXsdsProcessed().addAll(parsedDocument.getXsdsProcessed());
              xsdDocument.getXsdsProcessed().add(schemaLocation);
            }
          }
 else {
            Logger.getLogger(XSDParserImpl.class.getName()).log(Level.SEVERE,element.getAttribute(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
      }
    }
  }
}"
81274,"public synchronized XSDDocInterface parse(String url) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",url);
  XSDDocument xsdDocument=Context.getContext().getNewXsdDocument();
  try {
    URL file=new URL(url);
    Document doc=initialize(file);
    xsdDocument.setDocumentURL(file);
    mergeImportedXsd(doc,xsdDocument,""String_Node_Str"");
    if (doc != null) {
      this.visit(doc);
      this.parseAllNSElements(doc,xsdDocument);
      this.parseAllNSComplexTypes(doc,xsdDocument);
      this.linkChildTypes(xsdDocument);
      this.parseAllNSSimpleTypes(doc,xsdDocument);
      this.buildElementToTypeMap(xsdDocument);
      mergeImportedXsd(doc,xsdDocument,""String_Node_Str"");
      handleAnonymous(doc,xsdDocument);
    }
  }
 catch (  SAXException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new ParserException(""String_Node_Str"" + url + ""String_Node_Str""+ e.getMessage(),e);
  }
catch (  IOException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new ParserException(""String_Node_Str"" + url + ""String_Node_Str""+ e.getMessage(),e);
  }
  logger.log(Level.FINER,""String_Node_Str"",xsdDocument);
  postProcessXsdDocument(xsdDocument,doc);
  return xsdDocument;
}","public synchronized XSDDocInterface parse(String url) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",url);
  XSDDocument xsdDocument=Context.getContext().getNewXsdDocument();
  try {
    URL file=new URL(url);
    Document doc=initialize(file);
    xsdDocument.setDocumentURL(file);
    if (doc != null) {
      this.visit(doc);
      this.parseAllNSElements(doc,xsdDocument);
      this.parseAllNSComplexTypes(doc,xsdDocument);
      this.linkChildTypes(xsdDocument);
      this.parseAllNSSimpleTypes(doc,xsdDocument);
      this.buildElementToTypeMap(xsdDocument);
      mergeImportedXsd(doc,xsdDocument,""String_Node_Str"");
      mergeImportedXsd(doc,xsdDocument,""String_Node_Str"");
      handleAnonymous(doc,xsdDocument);
    }
  }
 catch (  SAXException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new ParserException(""String_Node_Str"" + url + ""String_Node_Str""+ e.getMessage(),e);
  }
catch (  IOException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new ParserException(""String_Node_Str"" + url + ""String_Node_Str""+ e.getMessage(),e);
  }
  logger.log(Level.FINER,""String_Node_Str"",xsdDocument);
  postProcessXsdDocument(xsdDocument,doc);
  return xsdDocument;
}"
81275,"/** 
 * Builds the operation table.
 * @param html the html
 * @param portType the port type
 * @param wsdlDoc the wsdl doc
 */
private void buildOperationTable(StringBuffer html,PortType portType,WSDLDocInterface wsdlDoc){
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{html,portType});
  html.append(HtmlUtils.getAnchorTag(Constants.OPERATION_SUMMARY_HREF,null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(Constants.OPERATION_SUMMARY_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(Constants.RETURN_TYPE_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(Constants.METHOD_NAME_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  for (  OperationHolder opH : portType.getOperations()) {
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableDataTagWithStyle(""String_Node_Str""));
    setOutputTypes(html,opH,wsdlDoc.getServiceName());
    html.append(Constants.HTML_TABLE_TD_END);
    html.append(getTableDataTagWithStyle(""String_Node_Str""));
    html.append(getTextInSpan(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + opH.getName(),opH.getName(),opH.getName()),""String_Node_Str"") + ""String_Node_Str"");
    html.append(getInputTypes(opH,wsdlDoc.getServiceName(),""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_BR);
    html.append(getSummary(wsdlDoc,opH));
    html.append(Constants.HTML_TABLE_TD_END);
    html.append(Constants.HTML_TABLE_TR_END);
    if (returnTypeToMethodMap.get(opH.getOutputTypes().get(0).getType()) == null) {
      returnTypeToMethodMap.put(opH.getOutputTypes().get(0).getType(),new TreeSet<String>());
    }
    String str=wsdlDoc.getServiceName() + ""String_Node_Str"" + opH.getName()+ ""String_Node_Str"";
    str+=getInputTypes(opH,wsdlDoc.getServiceName(),""String_Node_Str"") + ""String_Node_Str"";
    str+=Constants.HTML_BR + Constants.NBSP_THRICE + getSummary(wsdlDoc,opH);
    returnTypeToMethodMap.get(opH.getOutputTypes().get(0).getType()).add(str);
    if (opH.getInputTypes() != null) {
      Iterator<Element> iter=opH.getInputTypes().iterator();
      while (iter.hasNext()) {
        Element elem=iter.next();
        if (paramsToMethodMap.get(elem.getType()) == null) {
          paramsToMethodMap.put(elem.getType(),new TreeSet<String>());
        }
        String retType=""String_Node_Str"";
        if (opH.getOutputTypes() != null && opH.getOutputTypes().size() > 0) {
          retType=opH.getOutputTypes().get(0).getType();
        }
        str=retType + ""String_Node_Str"" + wsdlDoc.getServiceName()+ ""String_Node_Str""+ opH.getName()+ ""String_Node_Str""+ getParams(opH.getInputTypes(),""String_Node_Str"")+ ""String_Node_Str"";
        str+=Constants.HTML_BR + Constants.NBSP_THRICE + getSummary(wsdlDoc,opH);
        paramsToMethodMap.get(elem.getType()).add(str);
      }
    }
  }
  html.append(Constants.HTML_TABLE_END);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Builds the operation table.
 * @param html the html
 * @param portType the port type
 * @param wsdlDoc the wsdl doc
 */
private void buildOperationTable(StringBuffer html,PortType portType,WSDLDocInterface wsdlDoc){
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{html,portType});
  html.append(HtmlUtils.getAnchorTag(Constants.OPERATION_SUMMARY_HREF,null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(Constants.OPERATION_SUMMARY_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(Constants.RETURN_TYPE_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(Constants.METHOD_NAME_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  for (  OperationHolder opH : portType.getOperations()) {
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableDataTagWithStyle(""String_Node_Str""));
    setOutputTypes(html,opH,wsdlDoc.getServiceName());
    html.append(Constants.HTML_TABLE_TD_END);
    html.append(getTableDataTagWithStyle(""String_Node_Str""));
    html.append(getTextInSpan(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + opH.getName(),opH.getName(),opH.getName()),""String_Node_Str"") + ""String_Node_Str"");
    html.append(getInputTypes(opH,wsdlDoc.getServiceName(),""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_BR);
    html.append(getSummary(wsdlDoc,opH));
    html.append(Constants.HTML_TABLE_TD_END);
    html.append(Constants.HTML_TABLE_TR_END);
    if (opH.getOutputTypes() != null && opH.getOutputTypes().size() > 0 && returnTypeToMethodMap.get(opH.getOutputTypes().get(0).getType()) == null) {
      returnTypeToMethodMap.put(opH.getOutputTypes().get(0).getType(),new TreeSet<String>());
    }
    String str=wsdlDoc.getServiceName() + ""String_Node_Str"" + opH.getName()+ ""String_Node_Str"";
    str+=getInputTypes(opH,wsdlDoc.getServiceName(),""String_Node_Str"") + ""String_Node_Str"";
    str+=Constants.HTML_BR + Constants.NBSP_THRICE + getSummary(wsdlDoc,opH);
    if (opH.getOutputTypes() != null && opH.getOutputTypes().size() > 0) {
      returnTypeToMethodMap.get(opH.getOutputTypes().get(0).getType()).add(str);
    }
    if (opH.getInputTypes() != null) {
      Iterator<Element> iter=opH.getInputTypes().iterator();
      while (iter.hasNext()) {
        Element elem=iter.next();
        if (paramsToMethodMap.get(elem.getType()) == null) {
          paramsToMethodMap.put(elem.getType(),new TreeSet<String>());
        }
        String retType=""String_Node_Str"";
        if (opH.getOutputTypes() != null && opH.getOutputTypes().size() > 0) {
          retType=opH.getOutputTypes().get(0).getType();
        }
        str=retType + ""String_Node_Str"" + wsdlDoc.getServiceName()+ ""String_Node_Str""+ opH.getName()+ ""String_Node_Str""+ getParams(opH.getInputTypes(),""String_Node_Str"")+ ""String_Node_Str"";
        str+=Constants.HTML_BR + Constants.NBSP_THRICE + getSummary(wsdlDoc,opH);
        paramsToMethodMap.get(elem.getType()).add(str);
      }
    }
  }
  html.append(Constants.HTML_TABLE_END);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
81276,"public synchronized WSDLDocument parse(String url) throws ParserException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",url);
  wsdlDoc=Context.getContext().getNewWsdlDocument();
  try {
    XSDParser xsdParser=null;
    xsdParser=Context.getContext().getNewXsdParser();
    xsdDocument=xsdParser.parse(url);
    wsdlDoc.setXsdDocument(xsdDocument);
    wsdlDoc.setDocumentURL(xsdDocument.getDocumentURL());
    WSDLReader wsdlReader=WSDLFactory.newInstance().newWSDLReader();
    Definition wsdlDefinition=wsdlReader.readWSDL(null,url);
    Map<QName,Service> allServices=wsdlDefinition.getAllServices();
    for (    Map.Entry<QName,Service> entry : allServices.entrySet()) {
      QName qname=entry.getKey();
      URI uri=new URI(qname.getNamespaceURI());
      wsdlDoc.setPackageName(uri.getPath());
      wsdlDoc.setServiceName(qname.getLocalPart());
      wsdlDoc.setCompleteRemotePath(qname.getNamespaceURI());
      org.w3c.dom.Element documentationElem=(org.w3c.dom.Element)entry.getValue().getDocumentationElement();
      wsdlDoc.setAnnotations(parseAnnotation(documentationElem));
    }
    Map<QName,PortType> allPortTypes=wsdlDefinition.getAllPortTypes();
    for (    Map.Entry<QName,PortType> entry : allPortTypes.entrySet()) {
      QName name=entry.getKey();
      PortType p=entry.getValue();
      org.ebayopensource.turmeric.tools.annoparser.dataobjects.PortType portType=Context.getContext().getNewPortType();
      portType.setName(name.getLocalPart());
      portType.setAnnotations(parseAnnotation(p.getDocumentationElement()));
      List<Operation> operations=p.getOperations();
      for (      Operation op : operations) {
        OperationHolder opHolder=Context.getContext().getNewOperation();
        opHolder.setName(op.getName());
        opHolder.setAnnotations(parseAnnotation(op.getDocumentationElement()));
        wsdlDoc.addOperation(opHolder);
        portType.addOperation(opHolder);
        Output output=op.getOutput();
        Input input=op.getInput();
        Map inputParts=(input == null || input.getMessage() == null) ? null : input.getMessage().getParts();
        Map outputParts=(output == null || output.getMessage() == null) ? null : output.getMessage().getParts();
        if (inputParts != null) {
          for (          Object obj1 : inputParts.values()) {
            Part ipPart=(Part)obj1;
            QName type=ipPart.getElementName();
            if (type == null) {
              type=ipPart.getTypeName();
            }
            String ipElemName=type.getLocalPart();
            Element elem=xsdDocument.searchIndependentElement(ipElemName);
            if (elem != null)             this.addEntry(elem.getType(),opHolder);
            ComplexType ctype=(elem != null) ? xsdDocument.searchCType(getLocalName(elem.getType())) : null;
            if (ctype != null) {
              List<Element> elements=ctype.getInstanceElements();
              if (elements != null) {
                opHolder.setInput(elements);
              }
            }
            logger.info(""String_Node_Str"" + ipElemName);
          }
        }
        if (outputParts != null) {
          for (          Object obj2 : outputParts.values()) {
            Part opPart=(Part)obj2;
            QName type=opPart.getElementName();
            if (type == null) {
              type=opPart.getTypeName();
            }
            String opElemName=type.getLocalPart();
            Element elem=(opElemName != null) ? xsdDocument.searchIndependentElement(opElemName) : null;
            ComplexType ctype=(elem != null) ? xsdDocument.searchCType(getLocalName(elem.getType())) : null;
            if (ctype != null) {
              List<Element> elements=ctype.getInstanceElements();
              if (elements != null)               opHolder.setOutput(elements);
            }
            if (elem != null)             this.addEntry(elem.getType(),opHolder);
          }
        }
        postProcessOperation(opHolder,op);
      }
      postProcessPortType(portType,p);
      wsdlDoc.addPortType(portType);
    }
    postProcessWsdlDocument(wsdlDoc,wsdlDefinition);
  }
 catch (  WSDLException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new ParserException(""String_Node_Str"" + url + ""String_Node_Str""+ e.getMessage(),e);
  }
catch (  URISyntaxException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new ParserException(e);
  }
  addExtentionElements();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",wsdlDoc);
  return wsdlDoc;
}","public synchronized WSDLDocument parse(String url) throws ParserException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",url);
  wsdlDoc=Context.getContext().getNewWsdlDocument();
  try {
    XSDParser xsdParser=null;
    xsdParser=Context.getContext().getNewXsdParser();
    xsdDocument=xsdParser.parse(url);
    wsdlDoc.setXsdDocument(xsdDocument);
    wsdlDoc.setDocumentURL(xsdDocument.getDocumentURL());
    WSDLReader wsdlReader=WSDLFactory.newInstance().newWSDLReader();
    Definition wsdlDefinition=wsdlReader.readWSDL(null,url);
    Map<QName,Service> allServices=wsdlDefinition.getAllServices();
    for (    Map.Entry<QName,Service> entry : allServices.entrySet()) {
      QName qname=entry.getKey();
      URI uri=new URI(qname.getNamespaceURI());
      wsdlDoc.setPackageName(uri.getPath());
      wsdlDoc.setServiceName(qname.getLocalPart());
      wsdlDoc.setCompleteRemotePath(qname.getNamespaceURI());
      org.w3c.dom.Element documentationElem=(org.w3c.dom.Element)entry.getValue().getDocumentationElement();
      wsdlDoc.setAnnotations(parseAnnotation(documentationElem));
    }
    Map<QName,PortType> allPortTypes=wsdlDefinition.getAllPortTypes();
    for (    Map.Entry<QName,PortType> entry : allPortTypes.entrySet()) {
      QName name=entry.getKey();
      PortType p=entry.getValue();
      org.ebayopensource.turmeric.tools.annoparser.dataobjects.PortType portType=Context.getContext().getNewPortType();
      portType.setName(name.getLocalPart());
      portType.setAnnotations(parseAnnotation(p.getDocumentationElement()));
      List<Operation> operations=p.getOperations();
      for (      Operation op : operations) {
        OperationHolder opHolder=Context.getContext().getNewOperation();
        opHolder.setName(op.getName());
        opHolder.setAnnotations(parseAnnotation(op.getDocumentationElement()));
        wsdlDoc.addOperation(opHolder);
        portType.addOperation(opHolder);
        Output output=op.getOutput();
        Input input=op.getInput();
        Map inputParts=(input == null || input.getMessage() == null) ? null : input.getMessage().getParts();
        Map outputParts=(output == null || output.getMessage() == null) ? null : output.getMessage().getParts();
        if (inputParts != null) {
          for (          Object obj1 : inputParts.values()) {
            Part ipPart=(Part)obj1;
            QName type=ipPart.getElementName();
            if (type == null) {
              type=ipPart.getTypeName();
            }
            String ipElemName=type.getLocalPart();
            Element elem=xsdDocument.searchIndependentElement(ipElemName);
            if (elem != null)             this.addEntry(elem.getType(),opHolder);
            ComplexType ctype=(elem != null) ? xsdDocument.searchCType(getLocalName(elem.getType())) : null;
            if (ctype != null) {
              List<Element> elements=ctype.getInstanceElements();
              if (elements != null) {
                List<Element> inputs=new ArrayList<Element>();
                for (                Element insElem : elements) {
                  if (insElem.getName().equals(elem.getName())) {
                    inputs.add(insElem);
                  }
                }
                opHolder.setInput(inputs);
              }
            }
            logger.info(""String_Node_Str"" + ipElemName);
          }
        }
        if (outputParts != null) {
          for (          Object obj2 : outputParts.values()) {
            Part opPart=(Part)obj2;
            QName type=opPart.getElementName();
            if (type == null) {
              type=opPart.getTypeName();
            }
            String opElemName=type.getLocalPart();
            Element elem=(opElemName != null) ? xsdDocument.searchIndependentElement(opElemName) : null;
            ComplexType ctype=(elem != null) ? xsdDocument.searchCType(getLocalName(elem.getType())) : null;
            if (ctype != null) {
              List<Element> elements=ctype.getInstanceElements();
              if (elements != null) {
                List<Element> inputs=new ArrayList<Element>();
                for (                Element insElem : elements) {
                  if (insElem.getName().equals(elem.getName())) {
                    inputs.add(insElem);
                  }
                }
                opHolder.setOutput(inputs);
              }
            }
            if (elem != null)             this.addEntry(elem.getType(),opHolder);
          }
        }
        postProcessOperation(opHolder,op);
      }
      postProcessPortType(portType,p);
      wsdlDoc.addPortType(portType);
    }
    postProcessWsdlDocument(wsdlDoc,wsdlDefinition);
  }
 catch (  WSDLException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new ParserException(""String_Node_Str"" + url + ""String_Node_Str""+ e.getMessage(),e);
  }
catch (  URISyntaxException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new ParserException(e);
  }
  addExtentionElements();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",wsdlDoc);
  return wsdlDoc;
}"
81277,"/** 
 * Parses the child elements.
 * @param nsprefix namespace
 * @param ctype complex type
 * @param ctypes collection of all complex types
 * @param element parent complex type
 * @param xsdDocument handle to xsd document
 * @return list of all children of the given element node and alsoassociates with the complex type to enable traversal.
 * @throws XsdDocException 
 */
private Set<Element> parseChildElements(ComplexType ctype,org.w3c.dom.Element element,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{ctype,ctypes,element,xsdDocument});
  Set<Element> elements=new TreeSet<Element>();
  NodeList domElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    String type=obj.getAttribute(""String_Node_Str"");
    String[] typeParts=type.split(""String_Node_Str"");
    if (typeParts != null && typeParts.length > 1)     type=typeParts[1];
    Element elem=Context.getContext().getNewElement();
    elem.setName(name);
    elem.setType(type);
    elem.setContainerComplexType(ctype);
    String prevComment=Utils.getPreviousComment(obj);
    String nextComment=Utils.getNextComment(obj);
    if (prevComment != null || nextComment != null) {
      Comment comment=new Comment();
      comment.setNextComment(nextComment);
      comment.setPreviousComment(prevComment);
      elem.setComment(comment);
    }
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        elem.getAttributes().add(attribute);
      }
    }
    elem.setAnnotationInfo(parseAnnotation(obj));
    elements.add(elem);
    postProcessElement(elem,obj);
    xsdDocument.addIndependentElement(elem);
  }
  NodeList attributeNodes=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  if (attributeNodes != null) {
    int count=attributeNodes.getLength();
    for (int j=0; j < count; j++) {
      org.w3c.dom.Element attrElem=(org.w3c.dom.Element)attributeNodes.item(j);
      AttributeElement attr=Context.getContext().getNewAttribute();
      String name=attrElem.getAttribute(""String_Node_Str"");
      if (Utils.isEmpty(name)) {
        for (int k=0; k < count; k++) {
          org.w3c.dom.Element ref=(org.w3c.dom.Element)attributeNodes.item(k);
          name=ref.getAttribute(""String_Node_Str"");
        }
      }
      String type=attrElem.getAttribute(""String_Node_Str"");
      attr.setContainerComplexType(ctype);
      String prevComment=Utils.getPreviousComment(attrElem);
      String nextComment=Utils.getNextComment(attrElem);
      if (prevComment != null || nextComment != null) {
        Comment comment=new Comment();
        comment.setNextComment(nextComment);
        comment.setPreviousComment(prevComment);
        attr.setComment(comment);
      }
      if (Utils.isEmpty(type)) {
        NodeList simpleTypes=attrElem.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
        if (simpleTypes.getLength() > 0) {
          org.w3c.dom.Element elem=(org.w3c.dom.Element)simpleTypes.item(0);
          SimpleType simpleType=populateSimpleType(xsdDocument,elem,true);
          if (Utils.isEmpty(simpleType.getName())) {
            simpleType.setName(name + ""String_Node_Str"");
            if (simpleType.getEnums() != null) {
              for (              EnumElement enumE : simpleType.getEnums()) {
                enumE.setType(simpleType.getName());
              }
            }
          }
          attr.setType(simpleType.getName());
          attr.setBaseType(simpleType.getName());
        }
      }
 else {
        attr.setType(type);
      }
      attr.setName(name);
      org.w3c.dom.Element parent=(org.w3c.dom.Element)attrElem.getParentNode();
      if (parent.getTagName().endsWith(""String_Node_Str"")) {
        String baseType=parent.getAttribute(""String_Node_Str"");
        attr.setBaseType(baseType);
      }
      NamedNodeMap nameNodeMap=attrElem.getAttributes();
      int size=nameNodeMap.getLength();
      for (int k=0; k < size; k++) {
        Attr attri=(Attr)nameNodeMap.item(k);
        if (attri != null) {
          Attribute attribute=new Attribute();
          attribute.setName(attri.getName());
          attribute.setValue(attri.getValue());
          attr.getAttributes().add(attribute);
        }
      }
      attr.setAnnotationInfo(parseAnnotation(attrElem));
      postProcessAttribute(attr,attrElem);
      ctype.addSimpleAttributeContent(attr);
    }
  }
  NodeList extensibleElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  org.w3c.dom.Element extensionbaseElem=(org.w3c.dom.Element)extensibleElements.item(0);
  if (extensionbaseElem != null) {
    String attribute=extensionbaseElem.getAttribute(""String_Node_Str"");
    String parentType=null;
    String[] strs=attribute.split(""String_Node_Str"");
    if (strs != null && strs.length > 1)     parentType=strs[1];
 else     parentType=attribute;
    ctype.setParentType(parentType);
    if (!Utils.isEmpty(parentType)) {
      xsdDocument.addParentToComplexTypeMap(parentType,ctype.getName());
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{elements});
  return elements;
}","/** 
 * Parses the child elements.
 * @param nsprefix namespace
 * @param ctype complex type
 * @param ctypes collection of all complex types
 * @param element parent complex type
 * @param xsdDocument handle to xsd document
 * @return list of all children of the given element node and alsoassociates with the complex type to enable traversal.
 * @throws XsdDocException 
 */
private Set<Element> parseChildElements(ComplexType ctype,org.w3c.dom.Element element,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{ctype,ctypes,element,xsdDocument});
  Set<Element> elements=new TreeSet<Element>();
  NodeList domElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    String type=obj.getAttribute(""String_Node_Str"");
    String[] typeParts=type.split(""String_Node_Str"");
    if (typeParts != null && typeParts.length > 1)     type=typeParts[1];
    Element elem=Context.getContext().getNewElement();
    elem.setName(name);
    elem.setType(type);
    elem.setContainerComplexType(ctype);
    String prevComment=Utils.getPreviousComment(obj);
    String nextComment=Utils.getNextComment(obj);
    if (prevComment != null || nextComment != null) {
      Comment comment=new Comment();
      comment.setNextComment(nextComment);
      comment.setPreviousComment(prevComment);
      elem.setComment(comment);
    }
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        elem.getAttributes().add(attribute);
      }
    }
    elem.setAnnotationInfo(parseAnnotation(obj));
    elements.add(elem);
    postProcessElement(elem,obj);
    xsdDocument.addIndependentElement(elem);
  }
  NodeList attributeNodes=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  if (attributeNodes != null) {
    int count=attributeNodes.getLength();
    for (int j=0; j < count; j++) {
      org.w3c.dom.Element attrElem=(org.w3c.dom.Element)attributeNodes.item(j);
      AttributeElement attr=Context.getContext().getNewAttribute();
      String name=attrElem.getAttribute(""String_Node_Str"");
      if (Utils.isEmpty(name)) {
        for (int k=0; k < count; k++) {
          org.w3c.dom.Element ref=(org.w3c.dom.Element)attributeNodes.item(k);
          name=ref.getAttribute(""String_Node_Str"");
        }
      }
      String type=attrElem.getAttribute(""String_Node_Str"");
      attr.setContainerComplexType(ctype);
      String prevComment=Utils.getPreviousComment(attrElem);
      String nextComment=Utils.getNextComment(attrElem);
      if (prevComment != null || nextComment != null) {
        Comment comment=new Comment();
        comment.setNextComment(nextComment);
        comment.setPreviousComment(prevComment);
        attr.setComment(comment);
      }
      if (Utils.isEmpty(type)) {
        NodeList simpleTypes=attrElem.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
        if (simpleTypes.getLength() > 0) {
          org.w3c.dom.Element elem=(org.w3c.dom.Element)simpleTypes.item(0);
          SimpleType simpleType=populateSimpleType(xsdDocument,elem,true);
          if (Utils.isEmpty(simpleType.getName())) {
            simpleType.setName(ctype.getName() + name + ""String_Node_Str"");
            if (simpleType.getEnums() != null) {
              for (              EnumElement enumE : simpleType.getEnums()) {
                enumE.setType(simpleType.getName());
              }
            }
          }
          xsdDocument.addSimpleType(simpleType);
          attr.setType(simpleType.getName());
          attr.setBaseType(simpleType.getName());
        }
      }
 else {
        attr.setType(type);
      }
      attr.setName(name);
      org.w3c.dom.Element parent=(org.w3c.dom.Element)attrElem.getParentNode();
      if (parent.getTagName().endsWith(""String_Node_Str"")) {
        String baseType=parent.getAttribute(""String_Node_Str"");
        attr.setBaseType(baseType);
      }
      NamedNodeMap nameNodeMap=attrElem.getAttributes();
      int size=nameNodeMap.getLength();
      for (int k=0; k < size; k++) {
        Attr attri=(Attr)nameNodeMap.item(k);
        if (attri != null) {
          Attribute attribute=new Attribute();
          attribute.setName(attri.getName());
          attribute.setValue(attri.getValue());
          attr.getAttributes().add(attribute);
        }
      }
      attr.setAnnotationInfo(parseAnnotation(attrElem));
      postProcessAttribute(attr,attrElem);
      ctype.addSimpleAttributeContent(attr);
    }
  }
  NodeList extensibleElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  org.w3c.dom.Element extensionbaseElem=(org.w3c.dom.Element)extensibleElements.item(0);
  if (extensionbaseElem != null) {
    String attribute=extensionbaseElem.getAttribute(""String_Node_Str"");
    String parentType=null;
    String[] strs=attribute.split(""String_Node_Str"");
    if (strs != null && strs.length > 1)     parentType=strs[1];
 else     parentType=attribute;
    ctype.setParentType(parentType);
    if (!Utils.isEmpty(parentType)) {
      xsdDocument.addParentToComplexTypeMap(parentType,ctype.getName());
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{elements});
  return elements;
}"
81278,"private SimpleType populateSimpleType(XSDDocument xsdDocument,org.w3c.dom.Element obj,boolean fromAttribute) throws ParserException {
  NodeList nodes=obj.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  String base=((org.w3c.dom.Element)nodes.item(0)).getAttribute(""String_Node_Str"");
  String name=obj.getAttribute(""String_Node_Str"");
  SimpleType sType=Context.getContext().getNewSimpleType();
  sType.setBase(base);
  sType.setName(name);
  List<Element> instances=(List<Element>)typeElementsMap.get(name);
  NamedNodeMap nameNodeMap=obj.getAttributes();
  int size=nameNodeMap.getLength();
  for (int j=0; j < size; j++) {
    Attr attr=(Attr)nameNodeMap.item(j);
    if (attr != null) {
      Attribute attribute=new Attribute();
      attribute.setName(attr.getName());
      attribute.setValue(attr.getValue());
      sType.getAttributes().add(attribute);
    }
  }
  sType.setAnnotationInfo(parseAnnotation(obj));
  sType.setEnums(this.parseEnumElements(obj,xsdDocument));
  if (instances != null) {
    sType.setInstanceElements(instances);
  }
  if (!fromAttribute) {
    org.w3c.dom.Element parent=(org.w3c.dom.Element)obj.getParentNode();
    if (!parent.getTagName().endsWith(""String_Node_Str"")) {
      xsdDocument.addSimpleType(sType);
    }
  }
 else {
    xsdDocument.addSimpleType(sType);
  }
  postProcessSimpleType(sType,obj);
  return sType;
}","private SimpleType populateSimpleType(XSDDocument xsdDocument,org.w3c.dom.Element obj,boolean fromAttribute) throws ParserException {
  NodeList nodes=obj.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  String base=((org.w3c.dom.Element)nodes.item(0)).getAttribute(""String_Node_Str"");
  String name=obj.getAttribute(""String_Node_Str"");
  SimpleType sType=Context.getContext().getNewSimpleType();
  sType.setBase(base);
  sType.setName(name);
  List<Element> instances=(List<Element>)typeElementsMap.get(name);
  NamedNodeMap nameNodeMap=obj.getAttributes();
  int size=nameNodeMap.getLength();
  for (int j=0; j < size; j++) {
    Attr attr=(Attr)nameNodeMap.item(j);
    if (attr != null) {
      Attribute attribute=new Attribute();
      attribute.setName(attr.getName());
      attribute.setValue(attr.getValue());
      sType.getAttributes().add(attribute);
    }
  }
  sType.setAnnotationInfo(parseAnnotation(obj));
  sType.setEnums(this.parseEnumElements(obj,xsdDocument));
  if (instances != null) {
    sType.setInstanceElements(instances);
  }
  postProcessSimpleType(sType,obj);
  return sType;
}"
81279,"/** 
 * Parses the simple types.
 * @param tagName the tag name
 * @param srcDoc the src doc
 * @param xsdDocument parses SimpleTypes within the document TBD: has to make it generic across namespaces
 * @throws XsdDocException 
 */
private void parseSimpleTypes(Document srcDoc,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{srcDoc,xsdDocument});
  NodeList domElements=srcDoc.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    populateSimpleType(xsdDocument,obj,false);
  }
  logger.log(Level.FINER,""String_Node_Str"",xsdDocument);
}","/** 
 * Parses the simple types.
 * @param tagName the tag name
 * @param srcDoc the src doc
 * @param xsdDocument parses SimpleTypes within the document TBD: has to make it generic across namespaces
 * @throws XsdDocException 
 */
private void parseSimpleTypes(Document srcDoc,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{srcDoc,xsdDocument});
  NodeList domElements=srcDoc.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    SimpleType sType=populateSimpleType(xsdDocument,obj,false);
    org.w3c.dom.Element parent=(org.w3c.dom.Element)obj.getParentNode();
    if (!parent.getTagName().endsWith(""String_Node_Str"")) {
      if (Utils.isEmpty(sType.getName())) {
        sType.setName(""String_Node_Str"" + i);
      }
      xsdDocument.addSimpleType(sType);
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",xsdDocument);
}"
81280,"/** 
 * Convert to url. The path supplied is first tried as a URL external form string, if it fails it is tried as a Class path resource, Then it is tried as a local file path.
 * @param path the path 
 * @return the uRL
 */
public static URL convertToURL(String path){
  URL url=null;
  try {
    url=new URL(path);
  }
 catch (  MalformedURLException e) {
    url=Thread.currentThread().getContextClassLoader().getResource(path);
    if (url == null) {
      File file=new File(path);
      if (file.exists()) {
        try {
          url=file.toURI().toURL();
        }
 catch (        MalformedURLException e1) {
          Logger.getLogger(ConfigurationReader.class.getName()).log(Level.SEVERE,path + ""String_Node_Str"",e);
          throw new ConfigurationException(""String_Node_Str"" + path + ""String_Node_Str""+ path+ ""String_Node_Str"",e);
        }
      }
    }
  }
  return url;
}","/** 
 * Convert to url. The path supplied is first tried as a URL external form string, if it fails it is tried as a Class path resource, Then it is tried as a local file path.
 * @param path the path 
 * @return the uRL
 */
public static URL convertToURL(String path){
  URL url=null;
  try {
    url=new URL(path);
  }
 catch (  MalformedURLException e) {
    url=Thread.currentThread().getContextClassLoader().getResource(path);
    if (url == null) {
      File file=new File(path);
      if (file.exists()) {
        try {
          url=file.toURI().toURL();
        }
 catch (        MalformedURLException e1) {
          Logger.getLogger(ConfigurationReader.class.getName()).log(Level.SEVERE,path + ""String_Node_Str"",e);
          throw new ConfigurationException(""String_Node_Str"" + path + ""String_Node_Str""+ path+ ""String_Node_Str"",e);
        }
      }
    }
  }
  if (url == null) {
    throw new ConfigurationException(""String_Node_Str"" + path + ""String_Node_Str""+ path+ ""String_Node_Str"");
  }
  return url;
}"
81281,"/** 
 * Parses the child elements.
 * @param nsprefix namespace
 * @param ctype complex type
 * @param ctypes collection of all complex types
 * @param element parent complex type
 * @param xsdDocument handle to xsd document
 * @return list of all children of the given element node and alsoassociates with the complex type to enable traversal.
 * @throws XsdDocException 
 */
private Set<Element> parseChildElements(ComplexType ctype,org.w3c.dom.Element element,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{ctype,ctypes,element,xsdDocument});
  Set<Element> elements=new TreeSet<Element>();
  NodeList domElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    String type=obj.getAttribute(""String_Node_Str"");
    String[] typeParts=type.split(""String_Node_Str"");
    if (typeParts != null && typeParts.length > 1)     type=typeParts[1];
    Element elem=Context.getContext().getNewElement();
    elem.setName(name);
    elem.setType(type);
    elem.setContainerComplexType(ctype);
    String prevComment=Utils.getPreviousComment(obj);
    String nextComment=Utils.getNextComment(obj);
    if (prevComment != null || nextComment != null) {
      Comment comment=new Comment();
      comment.setNextComment(nextComment);
      comment.setPreviousComment(prevComment);
      elem.setComment(comment);
    }
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        elem.getAttributes().add(attribute);
      }
    }
    elem.setAnnotationInfo(parseAnnotation(obj));
    elements.add(elem);
    postProcessElement(elem,obj);
    xsdDocument.addIndependentElement(elem);
  }
  NodeList attributeNodes=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  if (attributeNodes != null) {
    int count=attributeNodes.getLength();
    for (int j=0; j < count; j++) {
      org.w3c.dom.Element attrElem=(org.w3c.dom.Element)attributeNodes.item(j);
      AttributeElement attr=Context.getContext().getNewAttribute();
      String name=attrElem.getAttribute(""String_Node_Str"");
      if (Utils.isEmpty(name)) {
        for (int k=0; k < count; k++) {
          org.w3c.dom.Element ref=(org.w3c.dom.Element)attributeNodes.item(k);
          name=ref.getAttribute(""String_Node_Str"");
        }
      }
      String type=attrElem.getAttribute(""String_Node_Str"");
      attr.setContainerComplexType(ctype);
      String prevComment=Utils.getPreviousComment(attrElem);
      String nextComment=Utils.getNextComment(attrElem);
      if (prevComment != null || nextComment != null) {
        Comment comment=new Comment();
        comment.setNextComment(nextComment);
        comment.setPreviousComment(prevComment);
        attr.setComment(comment);
      }
      if (Utils.isEmpty(type)) {
        NodeList simpleTypes=attrElem.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
        if (simpleTypes.getLength() > 0) {
          org.w3c.dom.Element elem=(org.w3c.dom.Element)simpleTypes.item(0);
          SimpleType simpleType=populateSimpleType(xsdDocument,elem,true);
          if (Utils.isEmpty(simpleType.getName())) {
            simpleType.setName(ctype.getName() + name + ""String_Node_Str"");
            if (simpleType.getEnums() != null) {
              for (              EnumElement enumE : simpleType.getEnums()) {
                enumE.setType(simpleType.getName());
              }
            }
          }
          xsdDocument.addSimpleType(simpleType);
          attr.setType(simpleType.getName());
          attr.setBaseType(simpleType.getName());
        }
      }
 else {
        attr.setType(type);
      }
      attr.setName(name);
      org.w3c.dom.Element parent=(org.w3c.dom.Element)attrElem.getParentNode();
      if (parent.getTagName().endsWith(""String_Node_Str"")) {
        String baseType=parent.getAttribute(""String_Node_Str"");
        attr.setBaseType(baseType);
      }
      NamedNodeMap nameNodeMap=attrElem.getAttributes();
      int size=nameNodeMap.getLength();
      for (int k=0; k < size; k++) {
        Attr attri=(Attr)nameNodeMap.item(k);
        if (attri != null) {
          Attribute attribute=new Attribute();
          attribute.setName(attri.getName());
          attribute.setValue(attri.getValue());
          attr.getAttributes().add(attribute);
        }
      }
      attr.setAnnotationInfo(parseAnnotation(attrElem));
      postProcessAttribute(attr,attrElem);
      ctype.addSimpleAttributeContent(attr);
    }
  }
  NodeList extensibleElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  org.w3c.dom.Element extensionbaseElem=(org.w3c.dom.Element)extensibleElements.item(0);
  if (extensionbaseElem != null) {
    String attribute=extensionbaseElem.getAttribute(""String_Node_Str"");
    String parentType=null;
    String[] strs=attribute.split(""String_Node_Str"");
    if (strs != null && strs.length > 1)     parentType=strs[1];
 else     parentType=attribute;
    ctype.setParentType(parentType);
    if (!Utils.isEmpty(parentType)) {
      xsdDocument.addParentToComplexTypeMap(parentType,ctype.getName());
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{elements});
  return elements;
}","/** 
 * Parses the child elements.
 * @param nsprefix namespace
 * @param ctype complex type
 * @param ctypes collection of all complex types
 * @param element parent complex type
 * @param xsdDocument handle to xsd document
 * @return list of all children of the given element node and alsoassociates with the complex type to enable traversal.
 * @throws XsdDocException 
 */
private Set<Element> parseChildElements(ComplexType ctype,org.w3c.dom.Element element,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{ctype,ctypes,element,xsdDocument});
  Set<Element> elements=new TreeSet<Element>();
  NodeList domElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    String type=obj.getAttribute(""String_Node_Str"");
    String[] typeParts=type.split(""String_Node_Str"");
    if (typeParts != null && typeParts.length > 1)     type=typeParts[1];
    Element elem=Context.getContext().getNewElement();
    elem.setName(name);
    elem.setType(type);
    elem.setContainerComplexType(ctype);
    String prevComment=Utils.getPreviousComment(obj);
    String nextComment=Utils.getNextComment(obj);
    if (prevComment != null || nextComment != null) {
      Comment comment=new Comment();
      comment.setNextComment(nextComment);
      comment.setPreviousComment(prevComment);
      elem.setComment(comment);
    }
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        elem.getAttributes().add(attribute);
      }
    }
    elem.setAnnotationInfo(parseAnnotation(obj));
    elements.add(elem);
    postProcessElement(elem,obj);
    xsdDocument.addIndependentElement(elem);
  }
  NodeList attributeNodes=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  if (attributeNodes != null) {
    int count=attributeNodes.getLength();
    for (int j=0; j < count; j++) {
      org.w3c.dom.Element attrElem=(org.w3c.dom.Element)attributeNodes.item(j);
      AttributeElement attr=Context.getContext().getNewAttribute();
      String name=attrElem.getAttribute(""String_Node_Str"");
      if (Utils.isEmpty(name)) {
        for (int k=0; k < count; k++) {
          org.w3c.dom.Element ref=(org.w3c.dom.Element)attributeNodes.item(k);
          name=ref.getAttribute(""String_Node_Str"");
        }
      }
      String type=attrElem.getAttribute(""String_Node_Str"");
      attr.setContainerComplexType(ctype);
      String prevComment=Utils.getPreviousComment(attrElem);
      String nextComment=Utils.getNextComment(attrElem);
      if (prevComment != null || nextComment != null) {
        Comment comment=new Comment();
        comment.setNextComment(nextComment);
        comment.setPreviousComment(prevComment);
        attr.setComment(comment);
      }
      if (Utils.isEmpty(type)) {
        NodeList simpleTypes=attrElem.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
        if (simpleTypes.getLength() > 0) {
          org.w3c.dom.Element elem=(org.w3c.dom.Element)simpleTypes.item(0);
          SimpleType simpleType=populateSimpleType(xsdDocument,elem,true);
          if (Utils.isEmpty(simpleType.getName())) {
            simpleType.setName(ctype.getName() + name + ""String_Node_Str"");
          }
          if (simpleType.getEnums() != null) {
            for (            EnumElement enumE : simpleType.getEnums()) {
              enumE.setType(simpleType.getName());
              xsdDocument.addEnum(enumE);
            }
          }
          xsdDocument.addSimpleType(simpleType);
          attr.setType(simpleType.getName());
          attr.setBaseType(simpleType.getName());
        }
      }
 else {
        attr.setType(type);
      }
      attr.setName(name);
      org.w3c.dom.Element parent=(org.w3c.dom.Element)attrElem.getParentNode();
      if (parent.getTagName().endsWith(""String_Node_Str"")) {
        String baseType=parent.getAttribute(""String_Node_Str"");
        attr.setBaseType(baseType);
      }
      NamedNodeMap nameNodeMap=attrElem.getAttributes();
      int size=nameNodeMap.getLength();
      for (int k=0; k < size; k++) {
        Attr attri=(Attr)nameNodeMap.item(k);
        if (attri != null) {
          Attribute attribute=new Attribute();
          attribute.setName(attri.getName());
          attribute.setValue(attri.getValue());
          attr.getAttributes().add(attribute);
        }
      }
      attr.setAnnotationInfo(parseAnnotation(attrElem));
      postProcessAttribute(attr,attrElem);
      ctype.addSimpleAttributeContent(attr);
    }
  }
  NodeList extensibleElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  org.w3c.dom.Element extensionbaseElem=(org.w3c.dom.Element)extensibleElements.item(0);
  if (extensionbaseElem != null) {
    String attribute=extensionbaseElem.getAttribute(""String_Node_Str"");
    String parentType=null;
    String[] strs=attribute.split(""String_Node_Str"");
    if (strs != null && strs.length > 1)     parentType=strs[1];
 else     parentType=attribute;
    ctype.setParentType(parentType);
    if (!Utils.isEmpty(parentType)) {
      xsdDocument.addParentToComplexTypeMap(parentType,ctype.getName());
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{elements});
  return elements;
}"
81282,"/** 
 * Parses the simple types.
 * @param tagName the tag name
 * @param srcDoc the src doc
 * @param xsdDocument parses SimpleTypes within the document TBD: has to make it generic across namespaces
 * @throws XsdDocException 
 */
private void parseSimpleTypes(Document srcDoc,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{srcDoc,xsdDocument});
  NodeList domElements=srcDoc.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    SimpleType sType=populateSimpleType(xsdDocument,obj,false);
    org.w3c.dom.Element parent=(org.w3c.dom.Element)obj.getParentNode();
    if (!parent.getTagName().endsWith(""String_Node_Str"")) {
      if (Utils.isEmpty(sType.getName())) {
        sType.setName(""String_Node_Str"" + i);
      }
      xsdDocument.addSimpleType(sType);
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",xsdDocument);
}","/** 
 * Parses the simple types.
 * @param tagName the tag name
 * @param srcDoc the src doc
 * @param xsdDocument parses SimpleTypes within the document TBD: has to make it generic across namespaces
 * @throws XsdDocException 
 */
private void parseSimpleTypes(Document srcDoc,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{srcDoc,xsdDocument});
  NodeList domElements=srcDoc.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    SimpleType sType=populateSimpleType(xsdDocument,obj,false);
    org.w3c.dom.Element parent=(org.w3c.dom.Element)obj.getParentNode();
    if (!parent.getTagName().endsWith(""String_Node_Str"")) {
      if (Utils.isEmpty(sType.getName())) {
        sType.setName(""String_Node_Str"" + i);
      }
      if (sType.getEnums() != null) {
        for (        EnumElement enumE : sType.getEnums()) {
          enumE.setType(sType.getName());
          xsdDocument.addEnum(enumE);
        }
      }
      xsdDocument.addSimpleType(sType);
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",xsdDocument);
}"
81283,"/** 
 * Parses the enum elements.
 * @param namespacePrefix the namespace prefix
 * @param element the element
 * @param xsdDocument the xsd document
 * @return collection of enums contained by an element associates enums toits annotations
 * @throws ParserException 
 */
private List<EnumElement> parseEnumElements(org.w3c.dom.Element element,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{element,xsdDocument});
  List<EnumElement> elements=new ArrayList<EnumElement>();
  NodeList domElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String value=obj.getAttribute(""String_Node_Str"");
    EnumElement elem=Context.getContext().getNewEnumeration();
    elem.setValue(value);
    elem.setType(element.getAttribute(""String_Node_Str""));
    elem.setAnnotations(parseAnnotation(obj));
    elements.add(elem);
    postProcessEnum(elem,obj);
    xsdDocument.addEnum(elem);
  }
  logger.log(Level.FINER,""String_Node_Str"",elements);
  return elements;
}","/** 
 * Parses the enum elements.
 * @param namespacePrefix the namespace prefix
 * @param element the element
 * @param xsdDocument the xsd document
 * @return collection of enums contained by an element associates enums toits annotations
 * @throws ParserException 
 */
private List<EnumElement> parseEnumElements(org.w3c.dom.Element element,XSDDocument xsdDocument) throws ParserException {
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{element,xsdDocument});
  List<EnumElement> elements=new ArrayList<EnumElement>();
  NodeList domElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String value=obj.getAttribute(""String_Node_Str"");
    EnumElement elem=Context.getContext().getNewEnumeration();
    elem.setValue(value);
    elem.setType(element.getAttribute(""String_Node_Str""));
    elem.setAnnotations(parseAnnotation(obj));
    elements.add(elem);
    postProcessEnum(elem,obj);
  }
  logger.log(Level.FINER,""String_Node_Str"",elements);
  return elements;
}"
81284,"/** 
 * Gets the annotation info.
 * @return handle to ParsedAnnotationInfo object whichis the parsed annotation data including documentation and appInfo
 */
public ParsedAnnotationInfo getAnnotationInfo(){
  return annotation;
}","/** 
 * Gets the annotation info.
 * @return handle to ParsedAnnotationInfo object which is the parsedannotation data including documentation and appInfo
 */
public ParsedAnnotationInfo getAnnotationInfo(){
  return annotation;
}"
81285,"public int compareTo(Element object){
  return this.getName().toUpperCase().compareTo(object.getName().toUpperCase());
}","public int compareTo(Element object){
  int retVal=this.getName().toUpperCase().compareTo(object.getName().toUpperCase());
  if (retVal == 0 && (this.getType().equals(object.getType()) && ((this.getContainerComplexType() != null && this.getContainerComplexType().equals(object.getContainerComplexType())) || (object.getContainerComplexType() == null && this.getContainerComplexType() == null)))) {
    return 0;
  }
 else {
    if (retVal == 0) {
      retVal=1;
    }
    return retVal;
  }
}"
81286,"/** 
 * Sets the system env variables.
 */
private void setSystemEnvVariables(){
  if (configXmlPath == null) {
    configXmlPath=System.getenv().get(Constants.INPUT_SYSENV_CONFIG);
    logger.info(""String_Node_Str"" + configXmlPath);
  }
  if (outputDir == null) {
    outputDir=System.getenv().get(Constants.INPUT_SYSENV_OUTPUT_DIR);
    logger.info(""String_Node_Str"" + outputDir);
  }
  if (cssFilePath == null) {
    cssFilePath=System.getenv().get(Constants.INPUT_SYSENV_CSS);
    logger.info(""String_Node_Str"" + cssFilePath);
  }
}","/** 
 * Sets the system env variables.
 */
private void setSystemEnvVariables(){
  if (configXmlPath == null) {
    configXmlPath=System.getenv().get(Constants.INPUT_SYSENV_CONFIG);
    logger.finest(""String_Node_Str"" + configXmlPath);
  }
  if (outputDir == null) {
    outputDir=System.getenv().get(Constants.INPUT_SYSENV_OUTPUT_DIR);
    logger.finest(""String_Node_Str"" + outputDir);
  }
  if (cssFilePath == null) {
    cssFilePath=System.getenv().get(Constants.INPUT_SYSENV_CSS);
    logger.finest(""String_Node_Str"" + cssFilePath);
  }
}"
81287,"public void generateWsdlOutput(WSDLDocInterface wsdlDoc,OutputGenaratorParam outputGenaratorParam) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
  String packageName=wsdlDoc.getPackageName();
  this.outputGenaratorParam=outputGenaratorParam;
  if (packageName == null) {
    packageName=""String_Node_Str"";
  }
  if (packageName.startsWith(""String_Node_Str"")) {
    packageName=packageName.substring(1);
  }
  currentPackageName=packageName;
  currentTypesFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  classUseFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  writeCssFiles();
  logger.logp(Level.INFO,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<PortType> portTypes=wsdlDoc.getPortTypes();
  for (  PortType portType : portTypes) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(wsdlDoc.getServiceName(),packageName));
    Map<String,String> replacementMap=new HashMap<String,String>();
    replacementMap.put(""String_Node_Str"",getRelativePath(currentPackageName));
    buildHeader(html,replacementMap,""String_Node_Str"");
    html.append(Constants.HTML_BR);
    buildPortType(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationTable(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationDetails(html,portType,wsdlDoc);
    addFooter(html,replacementMap,""String_Node_Str"");
    html.append(HtmlUtils.getEndTags());
    String outputDir=getCurrentOutputDir() + File.separator;
    writeFile(html,outputDir + File.separator + packageName,wsdlDoc.getServiceName() + Constants.DOT_HTML);
  }
  writeOrphanTypes(wsdlDoc);
  createTypeIndex(wsdlDoc);
  addPackageToDocMap(packageName,wsdlDoc);
  addPackageToServiceMap(packageName,wsdlDoc.getServiceName());
  processedTypes=new ArrayList<AbstractType>();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
}","public void generateWsdlOutput(WSDLDocInterface wsdlDoc,OutputGenaratorParam outputGenaratorParam) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
  String packageName=wsdlDoc.getPackageName();
  this.outputGenaratorParam=outputGenaratorParam;
  if (packageName == null) {
    packageName=""String_Node_Str"";
  }
  if (packageName.startsWith(""String_Node_Str"")) {
    packageName=packageName.substring(1);
  }
  currentPackageName=packageName;
  currentTypesFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  classUseFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  writeCssFiles();
  logger.logp(Level.FINEST,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<PortType> portTypes=wsdlDoc.getPortTypes();
  for (  PortType portType : portTypes) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(wsdlDoc.getServiceName(),packageName));
    Map<String,String> replacementMap=new HashMap<String,String>();
    replacementMap.put(""String_Node_Str"",getRelativePath(currentPackageName));
    buildHeader(html,replacementMap,""String_Node_Str"");
    html.append(Constants.HTML_BR);
    buildPortType(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationTable(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationDetails(html,portType,wsdlDoc);
    addFooter(html,replacementMap,""String_Node_Str"");
    html.append(HtmlUtils.getEndTags());
    String outputDir=getCurrentOutputDir() + File.separator;
    writeFile(html,outputDir + File.separator + packageName,wsdlDoc.getServiceName() + Constants.DOT_HTML);
  }
  writeOrphanTypes(wsdlDoc);
  createTypeIndex(wsdlDoc);
  addPackageToDocMap(packageName,wsdlDoc);
  addPackageToServiceMap(packageName,wsdlDoc.getServiceName());
  processedTypes=new ArrayList<AbstractType>();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
}"
81288,"/** 
 * Gets the text in div.
 * @param text the text
 * @param styleClassName the style class name
 * @return the text in div
 */
private String getTextInDiv(String text,String styleClassName){
  String temp=""String_Node_Str"";
  if (styleClassName != null) {
    temp+=""String_Node_Str"" + styleClassName + ""String_Node_Str"";
  }
  String tag=Constants.HTML_DIV_START.replace(""String_Node_Str"",temp);
  tag+=text;
  tag+=Constants.HTML_DIV_END;
  logger.info(""String_Node_Str"" + tag);
  return tag;
}","/** 
 * Gets the text in div.
 * @param text the text
 * @param styleClassName the style class name
 * @return the text in div
 */
private String getTextInDiv(String text,String styleClassName){
  String temp=""String_Node_Str"";
  if (styleClassName != null) {
    temp+=""String_Node_Str"" + styleClassName + ""String_Node_Str"";
  }
  String tag=Constants.HTML_DIV_START.replace(""String_Node_Str"",temp);
  tag+=text;
  tag+=Constants.HTML_DIV_END;
  logger.finest(""String_Node_Str"" + tag);
  return tag;
}"
81289,"/** 
 * Gets the next sibling ignoring empty white-space nodes.
 * @param node the node
 * @return the next sibling
 */
private Node getNextSibling(Node node){
  Node sib=node.getNextSibling();
  if (sib != null && Node.COMMENT_NODE == sib.getNodeType()) {
    sib=getNextSibling(sib);
  }
  if (sib != null && sib.getNodeType() == Node.TEXT_NODE) {
    String value=sib.getTextContent();
    if (value != null) {
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (Utils.isEmpty(value)) {
        sib=getNextSibling(sib);
      }
    }
  }
  logger.log(Level.INFO,""String_Node_Str"",sib);
  return sib;
}","/** 
 * Gets the next sibling ignoring empty white-space nodes.
 * @param node the node
 * @return the next sibling
 */
private Node getNextSibling(Node node){
  Node sib=node.getNextSibling();
  if (sib != null && Node.COMMENT_NODE == sib.getNodeType()) {
    sib=getNextSibling(sib);
  }
  if (sib != null && sib.getNodeType() == Node.TEXT_NODE) {
    String value=sib.getTextContent();
    if (value != null) {
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (Utils.isEmpty(value)) {
        sib=getNextSibling(sib);
      }
    }
  }
  logger.log(Level.FINEST,""String_Node_Str"",sib);
  return sib;
}"
81290,"/** 
 * Gets the first child ignoring empty white-space nodes.
 * @param node the node
 * @return the first child
 */
private Node getFirstChild(Node node){
  Node firstChild=node.getFirstChild();
  if (firstChild != null && firstChild.getNodeType() == Node.TEXT_NODE) {
    String value=firstChild.getTextContent();
    if (value != null) {
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (Utils.isEmpty(value)) {
        firstChild=getNextSibling(firstChild);
      }
    }
  }
  logger.log(Level.INFO,""String_Node_Str"",firstChild);
  return firstChild;
}","/** 
 * Gets the first child ignoring empty white-space nodes.
 * @param node the node
 * @return the first child
 */
private Node getFirstChild(Node node){
  Node firstChild=node.getFirstChild();
  if (firstChild != null && firstChild.getNodeType() == Node.TEXT_NODE) {
    String value=firstChild.getTextContent();
    if (value != null) {
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (Utils.isEmpty(value)) {
        firstChild=getNextSibling(firstChild);
      }
    }
  }
  logger.log(Level.FINEST,""String_Node_Str"",firstChild);
  return firstChild;
}"
81291,"public synchronized WSDLDocument parse(String url) throws ParserException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",url);
  wsdlDoc=Context.getContext().getNewWsdlDocument();
  try {
    XSDParser xsdParser=null;
    xsdParser=Context.getContext().getNewXsdParser();
    xsdDocument=xsdParser.parse(url);
    wsdlDoc.setXsdDocument(xsdDocument);
    wsdlDoc.setDocumentURL(xsdDocument.getDocumentURL());
    WSDLReader wsdlReader=WSDLFactory.newInstance().newWSDLReader();
    Definition wsdlDefinition=wsdlReader.readWSDL(null,url);
    Map<QName,Service> allServices=wsdlDefinition.getAllServices();
    for (    Map.Entry<QName,Service> entry : allServices.entrySet()) {
      QName qname=entry.getKey();
      URI uri=new URI(qname.getNamespaceURI());
      wsdlDoc.setPackageName(uri.getPath());
      wsdlDoc.setServiceName(qname.getLocalPart());
      wsdlDoc.setCompleteRemotePath(qname.getNamespaceURI());
      org.w3c.dom.Element documentationElem=(org.w3c.dom.Element)entry.getValue().getDocumentationElement();
      wsdlDoc.setAnnotations(parseAnnotation(documentationElem));
    }
    Map<QName,PortType> allPortTypes=wsdlDefinition.getAllPortTypes();
    for (    Map.Entry<QName,PortType> entry : allPortTypes.entrySet()) {
      QName name=entry.getKey();
      PortType p=entry.getValue();
      org.ebayopensource.turmeric.tools.annoparser.dataobjects.PortType portType=Context.getContext().getNewPortType();
      portType.setName(name.getLocalPart());
      portType.setAnnotations(parseAnnotation(p.getDocumentationElement()));
      List<Operation> operations=p.getOperations();
      for (      Operation op : operations) {
        OperationHolder opHolder=Context.getContext().getNewOperation();
        opHolder.setName(op.getName());
        opHolder.setAnnotations(parseAnnotation(op.getDocumentationElement()));
        wsdlDoc.addOperation(opHolder);
        portType.addOperation(opHolder);
        Output output=op.getOutput();
        Input input=op.getInput();
        Map inputParts=(input == null || input.getMessage() == null) ? null : input.getMessage().getParts();
        Map outputParts=(output == null || output.getMessage() == null) ? null : output.getMessage().getParts();
        if (inputParts != null) {
          for (          Object obj1 : inputParts.values()) {
            Part ipPart=(Part)obj1;
            QName type=ipPart.getElementName();
            if (type == null) {
              type=ipPart.getTypeName();
            }
            String ipElemName=type.getLocalPart();
            Element elem=xsdDocument.searchIndependentElement(ipElemName);
            if (elem != null)             this.addEntry(elem.getType(),opHolder);
            ComplexType ctype=(elem != null) ? xsdDocument.searchCType(getLocalName(elem.getType())) : null;
            if (ctype != null) {
              List<Element> elements=ctype.getInstanceElements();
              if (elements != null) {
                List<Element> inputs=new ArrayList<Element>();
                for (                Element insElem : elements) {
                  if (insElem.getName().equals(elem.getName())) {
                    inputs.add(insElem);
                  }
                }
                opHolder.setInput(inputs);
              }
            }
            logger.info(""String_Node_Str"" + ipElemName);
          }
        }
        if (outputParts != null) {
          for (          Object obj2 : outputParts.values()) {
            Part opPart=(Part)obj2;
            QName type=opPart.getElementName();
            if (type == null) {
              type=opPart.getTypeName();
            }
            String opElemName=type.getLocalPart();
            Element elem=(opElemName != null) ? xsdDocument.searchIndependentElement(opElemName) : null;
            ComplexType ctype=(elem != null) ? xsdDocument.searchCType(getLocalName(elem.getType())) : null;
            if (ctype != null) {
              List<Element> elements=ctype.getInstanceElements();
              if (elements != null) {
                List<Element> inputs=new ArrayList<Element>();
                for (                Element insElem : elements) {
                  if (insElem.getName().equals(elem.getName())) {
                    inputs.add(insElem);
                  }
                }
                opHolder.setOutput(inputs);
              }
            }
            if (elem != null)             this.addEntry(elem.getType(),opHolder);
          }
        }
        postProcessOperation(opHolder,op);
      }
      postProcessPortType(portType,p);
      wsdlDoc.addPortType(portType);
    }
    postProcessWsdlDocument(wsdlDoc,wsdlDefinition);
  }
 catch (  WSDLException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new ParserException(""String_Node_Str"" + url + ""String_Node_Str""+ e.getMessage(),e);
  }
catch (  URISyntaxException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new ParserException(e);
  }
  addExtentionElements();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",wsdlDoc);
  return wsdlDoc;
}","public synchronized WSDLDocument parse(String url) throws ParserException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",url);
  wsdlDoc=Context.getContext().getNewWsdlDocument();
  try {
    XSDParser xsdParser=null;
    xsdParser=Context.getContext().getNewXsdParser();
    xsdDocument=xsdParser.parse(url);
    wsdlDoc.setXsdDocument(xsdDocument);
    wsdlDoc.setDocumentURL(xsdDocument.getDocumentURL());
    WSDLReader wsdlReader=WSDLFactory.newInstance().newWSDLReader();
    Definition wsdlDefinition=wsdlReader.readWSDL(null,url);
    Map<QName,Service> allServices=wsdlDefinition.getAllServices();
    for (    Map.Entry<QName,Service> entry : allServices.entrySet()) {
      QName qname=entry.getKey();
      URI uri=new URI(qname.getNamespaceURI());
      wsdlDoc.setPackageName(uri.getPath());
      wsdlDoc.setServiceName(qname.getLocalPart());
      wsdlDoc.setCompleteRemotePath(qname.getNamespaceURI());
      org.w3c.dom.Element documentationElem=(org.w3c.dom.Element)entry.getValue().getDocumentationElement();
      wsdlDoc.setAnnotations(parseAnnotation(documentationElem));
    }
    Map<QName,PortType> allPortTypes=wsdlDefinition.getAllPortTypes();
    for (    Map.Entry<QName,PortType> entry : allPortTypes.entrySet()) {
      QName name=entry.getKey();
      PortType p=entry.getValue();
      org.ebayopensource.turmeric.tools.annoparser.dataobjects.PortType portType=Context.getContext().getNewPortType();
      portType.setName(name.getLocalPart());
      portType.setAnnotations(parseAnnotation(p.getDocumentationElement()));
      List<Operation> operations=p.getOperations();
      for (      Operation op : operations) {
        OperationHolder opHolder=Context.getContext().getNewOperation();
        opHolder.setName(op.getName());
        opHolder.setAnnotations(parseAnnotation(op.getDocumentationElement()));
        wsdlDoc.addOperation(opHolder);
        portType.addOperation(opHolder);
        Output output=op.getOutput();
        Input input=op.getInput();
        Map inputParts=(input == null || input.getMessage() == null) ? null : input.getMessage().getParts();
        Map outputParts=(output == null || output.getMessage() == null) ? null : output.getMessage().getParts();
        if (inputParts != null) {
          for (          Object obj1 : inputParts.values()) {
            Part ipPart=(Part)obj1;
            QName type=ipPart.getElementName();
            if (type == null) {
              type=ipPart.getTypeName();
            }
            String ipElemName=type.getLocalPart();
            Element elem=xsdDocument.searchIndependentElement(ipElemName);
            if (elem != null)             this.addEntry(elem.getType(),opHolder);
            ComplexType ctype=(elem != null) ? xsdDocument.searchCType(getLocalName(elem.getType())) : null;
            if (ctype != null) {
              List<Element> elements=ctype.getInstanceElements();
              if (elements != null) {
                List<Element> inputs=new ArrayList<Element>();
                for (                Element insElem : elements) {
                  if (insElem.getName().equals(elem.getName())) {
                    inputs.add(insElem);
                  }
                }
                opHolder.setInput(inputs);
              }
            }
            logger.finest(""String_Node_Str"" + ipElemName);
          }
        }
        if (outputParts != null) {
          for (          Object obj2 : outputParts.values()) {
            Part opPart=(Part)obj2;
            QName type=opPart.getElementName();
            if (type == null) {
              type=opPart.getTypeName();
            }
            String opElemName=type.getLocalPart();
            Element elem=(opElemName != null) ? xsdDocument.searchIndependentElement(opElemName) : null;
            ComplexType ctype=(elem != null) ? xsdDocument.searchCType(getLocalName(elem.getType())) : null;
            if (ctype != null) {
              List<Element> elements=ctype.getInstanceElements();
              if (elements != null) {
                List<Element> inputs=new ArrayList<Element>();
                for (                Element insElem : elements) {
                  if (insElem.getName().equals(elem.getName())) {
                    inputs.add(insElem);
                  }
                }
                opHolder.setOutput(inputs);
              }
            }
            if (elem != null)             this.addEntry(elem.getType(),opHolder);
          }
        }
        postProcessOperation(opHolder,op);
      }
      postProcessPortType(portType,p);
      wsdlDoc.addPortType(portType);
    }
    postProcessWsdlDocument(wsdlDoc,wsdlDefinition);
  }
 catch (  WSDLException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new ParserException(""String_Node_Str"" + url + ""String_Node_Str""+ e.getMessage(),e);
  }
catch (  URISyntaxException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new ParserException(e);
  }
  addExtentionElements();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",wsdlDoc);
  return wsdlDoc;
}"
81292,"/** 
 * Gets the local name.
 * @param ctype the ctype
 * @return local name after stripping namespace prefix
 */
private String getLocalName(String ctype){
  logger.info(""String_Node_Str"" + ctype);
  String[] strs=ctype.split(""String_Node_Str"");
  if (strs.length > 1)   return strs[1];
 else   return strs[0];
}","/** 
 * Gets the local name.
 * @param ctype the ctype
 * @return local name after stripping namespace prefix
 */
private String getLocalName(String ctype){
  logger.finest(""String_Node_Str"" + ctype);
  String[] strs=ctype.split(""String_Node_Str"");
  if (strs.length > 1)   return strs[1];
 else   return strs[0];
}"
81293,"/** 
 * Visit.
 * @param node traverse and collect node names
 */
public void visit(Node node){
  logger.log(Level.INFO,""String_Node_Str"",node);
  this.nameNodeSet.add(node.getNodeName());
  NodeList children=node.getChildNodes();
  if (children != null) {
    int noOfNodes=children.getLength();
    for (int i=0; i < noOfNodes; i++) {
      Node tmpNode=children.item(i);
      this.nameNodeSet.add(tmpNode.getNodeName());
      visit(tmpNode);
    }
  }
}","/** 
 * Visit.
 * @param node traverse and collect node names
 */
public void visit(Node node){
  logger.log(Level.FINEST,""String_Node_Str"",node);
  this.nameNodeSet.add(node.getNodeName());
  NodeList children=node.getChildNodes();
  if (children != null) {
    int noOfNodes=children.getLength();
    for (int i=0; i < noOfNodes; i++) {
      Node tmpNode=children.item(i);
      this.nameNodeSet.add(tmpNode.getNodeName());
      visit(tmpNode);
    }
  }
}"
81294,"/** 
 * Gets the usage hierarchy for field.
 * @param allPossiblePaths the all possible paths
 * @param fieldName the field name
 * @return the possible usage paths to a field.
 */
public static List<String> getUsageHierarchyForField(List<String> allPossiblePaths,String fieldName){
  logger.info(""String_Node_Str"" + fieldName);
  logger.entering(""String_Node_Str"",""String_Node_Str"",fieldName);
  ArrayList<String> paths=new ArrayList<String>();
  for (  String path : allPossiblePaths) {
    if (path.endsWith(fieldName)) {
      paths.add(path.substring(0,path.lastIndexOf(""String_Node_Str"")));
    }
 else     if (path.contains(""String_Node_Str"" + fieldName + ""String_Node_Str"")) {
      paths.add(path.substring(0,path.indexOf(""String_Node_Str"" + fieldName + ""String_Node_Str"")));
    }
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",paths);
  return paths;
}","/** 
 * Gets the usage hierarchy for field.
 * @param allPossiblePaths the all possible paths
 * @param fieldName the field name
 * @return the possible usage paths to a field.
 */
public static List<String> getUsageHierarchyForField(List<String> allPossiblePaths,String fieldName){
  logger.finest(""String_Node_Str"" + fieldName);
  logger.entering(""String_Node_Str"",""String_Node_Str"",fieldName);
  ArrayList<String> paths=new ArrayList<String>();
  for (  String path : allPossiblePaths) {
    if (path.endsWith(fieldName)) {
      paths.add(path.substring(0,path.lastIndexOf(""String_Node_Str"")));
    }
 else     if (path.contains(""String_Node_Str"" + fieldName + ""String_Node_Str"")) {
      paths.add(path.substring(0,path.indexOf(""String_Node_Str"" + fieldName + ""String_Node_Str"")));
    }
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",paths);
  return paths;
}"
81295,"/** 
 * Sets the up.
 * @throws Exception the exception
 */
@Before public void setUp() throws Exception {
  wsdlPath=this.getClass().getClassLoader().getResource(""String_Node_Str"").toExternalForm();
  Context.getContext().addParser(""String_Node_Str"",new TestAnnoParserClass());
}","/** 
 * Sets the up.
 * @throws Exception the exception
 */
@Before public void setUp() throws Exception {
  wsdlPath=this.getClass().getClassLoader().getResource(""String_Node_Str"").toExternalForm();
  ConfigurationReader.loadDefaultConfiguration();
  Context.getContext().addParser(""String_Node_Str"",new TestAnnoParserClass());
}"
81296,"/** 
 * Load configurations from the file path specified.
 * @param config the config
 */
public static void loadConfigurations(InputStream config){
  Logger.getLogger(ConfigurationReader.class.getName()).log(Level.FINER,""String_Node_Str"",config);
  try {
    Document document=getDocument(config);
    if (document == null) {
      Logger.getLogger(ConfigurationReader.class.getName()).log(Level.SEVERE,""String_Node_Str"");
      throw new ConfigurationException(""String_Node_Str"");
    }
    Context context=Context.getContext();
    NodeList nodeList=document.getElementsByTagName(""String_Node_Str"");
    Node node=nodeList.item(0);
    if (node != null) {
      String css=node.getTextContent();
      context.setCssFilePath(css);
    }
    populateAnnotationParsers(document,context);
    populateOutputGenerators(document,context);
    nodeList=document.getElementsByTagName(""String_Node_Str"");
    node=nodeList.item(0);
    if (node != null) {
      String outputdir=node.getTextContent();
      context.setOutputDir(outputdir);
    }
    populateDocuments(document,context);
    Logger.getLogger(ConfigurationReader.class.getName()).log(Level.FINER,""String_Node_Str"",new Object[]{document,context});
  }
 catch (  SAXException e) {
    Logger.getLogger(ConfigurationReader.class.getName()).log(Level.SEVERE,""String_Node_Str"",e);
    StringBuffer sbf=new StringBuffer(""String_Node_Str"" + e.getMessage());
    throw new ConfigurationException(sbf.toString(),e);
  }
catch (  IOException e) {
    Logger.getLogger(ConfigurationReader.class.getName()).log(Level.SEVERE,""String_Node_Str"",e);
    StringBuffer sbf=new StringBuffer(""String_Node_Str"" + e.getMessage());
    throw new ConfigurationException(sbf.toString(),e);
  }
}","/** 
 * Load configurations from the file path specified.
 * @param config the config
 */
public static void loadConfigurations(InputStream config){
  Logger.getLogger(ConfigurationReader.class.getName()).log(Level.FINER,""String_Node_Str"",config);
  try {
    Document document=getDocument(config);
    if (document == null) {
      Logger.getLogger(ConfigurationReader.class.getName()).log(Level.SEVERE,""String_Node_Str"");
      throw new ConfigurationException(""String_Node_Str"");
    }
    Context context=Context.getContext();
    NodeList nodeList=document.getElementsByTagName(""String_Node_Str"");
    Node node=nodeList.item(0);
    if (node != null) {
      String css=node.getTextContent();
      context.setCssFilePath(css);
    }
    populateAnnotationParsers(document,context);
    populateOutputGenerators(document,context);
    nodeList=document.getElementsByTagName(""String_Node_Str"");
    node=nodeList.item(0);
    if (node != null) {
      String outputdir=node.getTextContent();
      context.setOutputDir(outputdir);
    }
    populateDocuments(document,context);
    populateFactoryClasses(document,context);
    Logger.getLogger(ConfigurationReader.class.getName()).log(Level.FINER,""String_Node_Str"",new Object[]{document,context});
  }
 catch (  SAXException e) {
    Logger.getLogger(ConfigurationReader.class.getName()).log(Level.SEVERE,""String_Node_Str"",e);
    StringBuffer sbf=new StringBuffer(""String_Node_Str"" + e.getMessage());
    throw new ConfigurationException(sbf.toString(),e);
  }
catch (  IOException e) {
    Logger.getLogger(ConfigurationReader.class.getName()).log(Level.SEVERE,""String_Node_Str"",e);
    StringBuffer sbf=new StringBuffer(""String_Node_Str"" + e.getMessage());
    throw new ConfigurationException(sbf.toString(),e);
  }
}"
81297,"/** 
 * Creates the all classes file.
 * @throws OutputFormatterException
 */
private void createAllClassesFile() throws OutputFormatterException {
  Set<String> set=packageServicesMap.keySet();
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.ALL_CLASSES,null));
  html.append(Constants.HTML_BOLD_START + Constants.ALL_CLASSES + Constants.HTML_BOLD_END+ Constants.HTML_BR);
  for (  String packageName : set) {
    List<String> list=packageServicesMap.get(packageName);
    for (    String className : list) {
      html.append(HtmlUtils.getAnchorTag(className,""String_Node_Str"" + SEPARATOR + packageName+ SEPARATOR+ className+ Constants.DOT_HTML,null,className,Constants.CLASSFRAME,null) + Constants.HTML_BR);
    }
  }
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.ALLCLASSES + Constants.DOT_HTML);
}","/** 
 * Creates the all classes file.
 * @throws OutputFormatterException
 */
private void createAllClassesFile() throws OutputFormatterException {
  Set<String> set=packageServicesMap.keySet();
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.ALL_CLASSES,null));
  html.append(Constants.HTML_BOLD_START + Constants.ALL_CLASSES + Constants.HTML_BOLD_END+ Constants.HTML_BR);
  for (  String packageName : set) {
    List<String> list=packageServicesMap.get(packageName);
    for (    String className : list) {
      html.append(HtmlUtils.getAnchorTag(className,packageName + SEPARATOR + className+ Constants.DOT_HTML,null,className,Constants.CLASSFRAME,null) + Constants.HTML_BR);
    }
  }
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.ALLCLASSES + Constants.DOT_HTML);
}"
81298,"private void buildFieldSummary(StringBuffer html,WSDLDocInterface doc,ComplexType type){
  html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(""String_Node_Str"");
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  Set<Element> elements=type.getChildElements();
  if (type.getSimpleAttributeContent() != null) {
    elements.addAll(type.getSimpleAttributeContent());
  }
  for (  Element element : elements) {
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableDataTagWithStyle(""String_Node_Str""));
    String typeCName=getCTypeTypeName(element.getType());
    html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
    if (doc.searchCType(typeCName) != null || doc.searchSimpleType(typeCName) != null) {
      html.append(HtmlUtils.getAnchorTag(null,element.getType() + Constants.DOT_HTML,element.getType(),element.getType()));
    }
 else {
      html.append(element.getType());
    }
    html.append(Constants.HTML_TABLE_TD_END);
    html.append(getTableDataTagWithStyle(""String_Node_Str""));
    html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + element.getName(),element.getName(),element.getName()));
    html.append(Constants.HTML_BR);
    if (element.getAnnotationInfo() != null && element.getAnnotationInfo().getDocumentation() != null) {
      html.append(element.getAnnotationInfo().getDocumentation());
    }
    html.append(Constants.HTML_TABLE_TD_END);
    html.append(Constants.HTML_TABLE_TR_END);
  }
  html.append(Constants.HTML_TABLE_END);
}","private void buildFieldSummary(StringBuffer html,WSDLDocInterface doc,ComplexType type){
  Set<Element> elements=type.getChildElements();
  if (type.getSimpleAttributeContent() != null) {
    elements.addAll(type.getSimpleAttributeContent());
  }
  html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(""String_Node_Str"");
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  if (elements == null || elements.isEmpty()) {
    html.append(Constants.HTML_TABLE_END);
    html.append(type.getName() + ""String_Node_Str"");
    return;
  }
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  for (  Element element : elements) {
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableDataTagWithStyle(""String_Node_Str""));
    String typeCName=getCTypeTypeName(element.getType());
    html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
    if (doc.searchCType(typeCName) != null || doc.searchSimpleType(typeCName) != null) {
      html.append(HtmlUtils.getAnchorTag(null,element.getType() + Constants.DOT_HTML,element.getType(),element.getType()));
    }
 else {
      html.append(element.getType());
    }
    html.append(Constants.HTML_TABLE_TD_END);
    html.append(getTableDataTagWithStyle(""String_Node_Str""));
    html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + element.getName(),element.getName(),element.getName()));
    html.append(Constants.HTML_BR);
    if (element.getAnnotationInfo() != null && element.getAnnotationInfo().getDocumentation() != null) {
      html.append(element.getAnnotationInfo().getDocumentation());
    }
    html.append(Constants.HTML_TABLE_TD_END);
    html.append(Constants.HTML_TABLE_TR_END);
  }
  html.append(Constants.HTML_TABLE_END);
}"
81299,"public void generateWsdlOutput(WSDLDocInterface wsdlDoc,OutputGenaratorParam outputGenaratorParam) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
  String packageName=wsdlDoc.getPackageName();
  this.outputGenaratorParam=outputGenaratorParam;
  if (packageName == null) {
    packageName=""String_Node_Str"";
  }
  currentTypesFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  writeCssFiles();
  logger.logp(Level.INFO,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<PortType> portTypes=wsdlDoc.getPortTypes();
  for (  PortType portType : portTypes) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(wsdlDoc.getServiceName(),packageName));
    buildHeader(html);
    html.append(Constants.HTML_BR);
    buildPortType(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationTable(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationDetails(html,portType,wsdlDoc);
    addFooter(html);
    html.append(HtmlUtils.getEndTags());
    String outputDir=getCurrentOutputDir() + File.separator;
    writeFile(html,outputDir + File.separator + packageName,wsdlDoc.getServiceName() + Constants.DOT_HTML);
  }
  addPackageToServiceMap(packageName,wsdlDoc.getServiceName());
  processedTypes=new ArrayList<AbstractType>();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
}","public void generateWsdlOutput(WSDLDocInterface wsdlDoc,OutputGenaratorParam outputGenaratorParam) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
  String packageName=wsdlDoc.getPackageName();
  if (packageName != null && packageName.startsWith(""String_Node_Str"")) {
    packageName=packageName.substring(1);
  }
  this.outputGenaratorParam=outputGenaratorParam;
  if (packageName == null) {
    packageName=""String_Node_Str"";
  }
  currentTypesFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  writeCssFiles();
  logger.logp(Level.INFO,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<PortType> portTypes=wsdlDoc.getPortTypes();
  for (  PortType portType : portTypes) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(wsdlDoc.getServiceName(),packageName));
    buildHeader(html);
    html.append(Constants.HTML_BR);
    buildPortType(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationTable(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationDetails(html,portType,wsdlDoc);
    addFooter(html);
    html.append(HtmlUtils.getEndTags());
    String outputDir=getCurrentOutputDir() + File.separator;
    writeFile(html,outputDir + File.separator + packageName,wsdlDoc.getServiceName() + Constants.DOT_HTML);
  }
  addPackageToServiceMap(packageName,wsdlDoc.getServiceName());
  processedTypes=new ArrayList<AbstractType>();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
}"
81300,"/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,doc.getPackageName() + File.separator + ""String_Node_Str""));
    buildTypeHeader(html);
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    buildFieldSummary(html,doc,type);
    html.append(Constants.HTML_HR);
    html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    for (    Element element : elements) {
      if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
        isRecursive=true;
      }
      String nodePath=parentPath + ""String_Node_Str"" + element.getName();
      String typeCName=getCTypeTypeName(element.getType());
      if (type.getName().equalsIgnoreCase(typeCName)) {
        isRecursive=true;
      }
      html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
      if (doc.searchCType(typeCName) != null && !isRecursive) {
        writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
        html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
      }
 else       if (doc.searchSimpleType(typeCName) != null) {
        writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
        html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
      }
 else {
        html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
      }
      if (element.getAnnotationInfo().getDocumentation() != null) {
        html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
      }
      processDefaultsAndBoundries(html,doc,element);
      deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
      if (deprDet != null) {
        html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
        html.append(deprDet);
      }
      processRelatedInfo(html,doc,element.getAnnotationInfo());
      html.append(Constants.HTML_HR + Constants.HTML_BR);
    }
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,doc.getPackageName() + File.separator + ""String_Node_Str""));
    buildTypeHeader(html);
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    buildFieldSummary(html,doc,type);
    html.append(Constants.HTML_HR);
    html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    if (elements.isEmpty()) {
      html.append(type.getName() + ""String_Node_Str"");
      html.append(Constants.HTML_TABLE_END);
    }
 else {
      html.append(Constants.HTML_BR + Constants.HTML_BR);
      for (      Element element : elements) {
        if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
          isRecursive=true;
        }
        String nodePath=parentPath + ""String_Node_Str"" + element.getName();
        String typeCName=getCTypeTypeName(element.getType());
        if (type.getName().equalsIgnoreCase(typeCName)) {
          isRecursive=true;
        }
        html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
        if (doc.searchCType(typeCName) != null && !isRecursive) {
          writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else         if (doc.searchSimpleType(typeCName) != null) {
          writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else {
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
        }
        if (element.getAnnotationInfo().getDocumentation() != null) {
          html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
        }
        processDefaultsAndBoundries(html,doc,element);
        deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,element.getAnnotationInfo());
        html.append(Constants.HTML_HR + Constants.HTML_BR);
      }
    }
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
81301,"private void writeUseFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(type.getName(),currentPackageName + ""String_Node_Str""));
  addHeadingTable(html,""String_Node_Str"" + type.getName());
  boolean tableAdded=false;
  Set<String> methods=returnTypeToMethodMap.get(type.getName());
  if (methods != null) {
    html.append(Constants.HTML_BR_TWICE);
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"" + type.getName());
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    for (    String str : methods) {
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + type.getName() + Constants.DOT_HTML,null,type.getName()));
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(str);
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(Constants.HTML_TABLE_TR_END);
    }
    html.append(Constants.HTML_TABLE_END);
    tableAdded=true;
  }
  methods=paramsToMethodMap.get(type.getName());
  if (methods != null) {
    html.append(Constants.HTML_BR_TWICE);
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"" + type.getName());
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    Iterator<String> itMethods=methods.iterator();
    while (itMethods.hasNext()) {
      String method=itMethods.next();
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      String retTypeName=method.substring(0,method.indexOf('-'));
      html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + retTypeName + Constants.DOT_HTML,null,retTypeName));
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(method.substring(method.indexOf('-') + 1));
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(Constants.HTML_TABLE_TR_END);
    }
    html.append(Constants.HTML_TABLE_END);
    tableAdded=true;
  }
  if (doc instanceof WSDLDocument) {
    Map<String,List<ComplexType>> map=doc.getElementComplexTypeMap();
    List<ComplexType> tempTypes=map.get(type.getName());
    if (tempTypes != null) {
      html.append(Constants.HTML_BR_TWICE);
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"" + type.getName());
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      Set<String> set=new TreeSet<String>();
      if (tempTypes != null) {
        for (        ComplexType tempType : tempTypes) {
          set.addAll(getExtensionTypes(tempType.getName(),doc));
        }
      }
      Iterator<String> setIterator=set.iterator();
      while (setIterator.hasNext()) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        String name=setIterator.next();
        html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + name + Constants.DOT_HTML,null,name));
        html.append(Constants.HTML_TABLE_TD_END);
        ComplexType cType=doc.searchCType(Utils.removeNameSpace(name));
        String desc=""String_Node_Str"";
        if (cType != null) {
          desc=cType.getAnnotations().getDocumentation();
        }
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(desc);
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
      html.append(Constants.HTML_TABLE_END);
      tableAdded=true;
    }
  }
  if (!tableAdded) {
    html.append(type.getName() + ""String_Node_Str"");
  }
  html.append(Constants.HTML_BR);
  writeFile(html,classUseFolderPath,type.getName() + Constants.DOT_HTML);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","private void writeUseFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(type.getName(),currentPackageName + ""String_Node_Str""));
  Map<String,String> replacementMap=new HashMap<String,String>();
  replacementMap.put(""String_Node_Str"",getRelativePath(currentPackageName + ""String_Node_Str""));
  replacementMap.put(""String_Node_Str"",""String_Node_Str"");
  buildHeader(html,replacementMap,""String_Node_Str"");
  addHeadingTable(html,""String_Node_Str"" + type.getName());
  boolean tableAdded=false;
  Set<String> methods=returnTypeToMethodMap.get(type.getName());
  if (methods != null) {
    html.append(Constants.HTML_BR_TWICE);
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"" + type.getName());
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    for (    String str : methods) {
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + type.getName() + Constants.DOT_HTML,null,type.getName()));
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(str);
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(Constants.HTML_TABLE_TR_END);
    }
    html.append(Constants.HTML_TABLE_END);
    tableAdded=true;
  }
  methods=paramsToMethodMap.get(type.getName());
  if (methods != null) {
    html.append(Constants.HTML_BR_TWICE);
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"" + type.getName());
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    Iterator<String> itMethods=methods.iterator();
    while (itMethods.hasNext()) {
      String method=itMethods.next();
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      String retTypeName=method.substring(0,method.indexOf('-'));
      html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + retTypeName + Constants.DOT_HTML,null,retTypeName));
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(method.substring(method.indexOf('-') + 1));
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(Constants.HTML_TABLE_TR_END);
    }
    html.append(Constants.HTML_TABLE_END);
    tableAdded=true;
  }
  if (doc instanceof WSDLDocument) {
    Map<String,List<ComplexType>> map=doc.getElementComplexTypeMap();
    List<ComplexType> tempTypes=map.get(type.getName());
    if (tempTypes != null) {
      html.append(Constants.HTML_BR_TWICE);
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"" + type.getName());
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      Set<String> set=new TreeSet<String>();
      if (tempTypes != null) {
        for (        ComplexType tempType : tempTypes) {
          set.addAll(getExtensionTypes(tempType.getName(),doc));
        }
      }
      Iterator<String> setIterator=set.iterator();
      while (setIterator.hasNext()) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        String name=setIterator.next();
        html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + name + Constants.DOT_HTML,null,name));
        html.append(Constants.HTML_TABLE_TD_END);
        ComplexType cType=doc.searchCType(Utils.removeNameSpace(name));
        String desc=""String_Node_Str"";
        if (cType != null) {
          desc=cType.getAnnotations().getDocumentation();
        }
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(desc);
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
      html.append(Constants.HTML_TABLE_END);
      tableAdded=true;
    }
  }
  if (!tableAdded) {
    html.append(type.getName() + ""String_Node_Str"");
  }
  html.append(Constants.HTML_BR);
  addFooter(html,replacementMap,""String_Node_Str"");
  html.append(HtmlUtils.getEndTags());
  writeFile(html,classUseFolderPath,type.getName() + Constants.DOT_HTML);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
81302,"/** 
 * Adds the footer.
 * @param html the html
 * @throws OutputFormatterException
 */
private void addFooter(StringBuffer html,boolean isType,boolean isComplexType,String typeName,String relPath,boolean isIndex,String keyLinks) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  String content=getFooterInformation(isType,isComplexType,typeName,relPath,isIndex,keyLinks);
  html.append(getTextInDiv(content,""String_Node_Str""));
  html.append(HtmlUtils.getEndTags());
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Adds the footer.
 * @param html the html
 * @throws OutputFormatterException
 */
private void addFooter(StringBuffer html,Map<String,String> replacementMap,String hdrFileParameterName) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  String content=getFooterInformation(replacementMap,hdrFileParameterName);
  html.append(getTextInDiv(content,""String_Node_Str""));
  html.append(HtmlUtils.getEndTags());
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
81303,"/** 
 * Gets the footer information. This method can be over ridden to supply Footer.
 * @return the footer information
 * @throws OutputFormatterException
 */
protected String getFooterInformation(boolean isType,boolean isComplex,String typeName,String relPath,boolean isIndex,String keyLinks) throws OutputFormatterException {
  String parameterName=getHeaderFileName(isType,isComplex,isIndex);
  String headerFile=outputGenaratorParam.getParameters().get(parameterName);
  if (headerFile != null) {
    try {
      String header=Utils.getFileAsString(Utils.convertToURL(headerFile).openStream()).toString();
      String version=outputGenaratorParam.getParameters().get(""String_Node_Str"");
      header=header.replaceAll(""String_Node_Str"",version);
      header=header.replaceAll(""String_Node_Str"",typeName);
      header=header.replaceAll(""String_Node_Str"",relPath);
      if (isIndex) {
        if (keyLinks == null) {
          keyLinks=""String_Node_Str"";
        }
        header=header.replaceAll(""String_Node_Str"",keyLinks);
      }
      header=""String_Node_Str"" + header;
      return header;
    }
 catch (    IOException e) {
      throw new OutputFormatterException(e);
    }
  }
  return ""String_Node_Str"";
}","/** 
 * Gets the footer information. This method can be over ridden to supply Footer.
 * @return the footer information
 * @throws OutputFormatterException
 */
protected String getFooterInformation(Map<String,String> replacementMap,String hdrFileParameterName) throws OutputFormatterException {
  String headerFile=outputGenaratorParam.getParameters().get(hdrFileParameterName);
  if (headerFile != null) {
    try {
      String header=Utils.getFileAsString(Utils.convertToURL(headerFile).openStream()).toString();
      for (      Map.Entry<String,String> entry : replacementMap.entrySet()) {
        header=header.replaceAll(""String_Node_Str"" + entry.getKey() + ""String_Node_Str"",entry.getValue());
      }
      String version=outputGenaratorParam.getParameters().get(""String_Node_Str"");
      header=header.replaceAll(""String_Node_Str"",version);
      header=""String_Node_Str"" + header;
      return header;
    }
 catch (    IOException e) {
      throw new OutputFormatterException(e);
    }
  }
  return ""String_Node_Str"";
}"
81304,"public void generateWsdlOutput(WSDLDocInterface wsdlDoc,OutputGenaratorParam outputGenaratorParam) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
  String packageName=wsdlDoc.getPackageName();
  this.outputGenaratorParam=outputGenaratorParam;
  if (packageName == null) {
    packageName=""String_Node_Str"";
  }
  if (packageName.startsWith(""String_Node_Str"")) {
    packageName=packageName.substring(1);
  }
  currentPackageName=packageName;
  currentTypesFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  classUseFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  writeCssFiles();
  logger.logp(Level.INFO,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<PortType> portTypes=wsdlDoc.getPortTypes();
  for (  PortType portType : portTypes) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(wsdlDoc.getServiceName(),packageName));
    buildHeader(html,false,false,null,getRelativePath(currentPackageName),false,null);
    html.append(Constants.HTML_BR);
    buildPortType(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationTable(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationDetails(html,portType,wsdlDoc);
    addFooter(html,false,false,null,getRelativePath(currentPackageName),false,null);
    html.append(HtmlUtils.getEndTags());
    String outputDir=getCurrentOutputDir() + File.separator;
    writeFile(html,outputDir + File.separator + packageName,wsdlDoc.getServiceName() + Constants.DOT_HTML);
  }
  writeOrphanTypes(wsdlDoc);
  createTypeIndex(wsdlDoc);
  addPackageToDocMap(packageName,wsdlDoc);
  addPackageToServiceMap(packageName,wsdlDoc.getServiceName());
  processedTypes=new ArrayList<AbstractType>();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
}","public void generateWsdlOutput(WSDLDocInterface wsdlDoc,OutputGenaratorParam outputGenaratorParam) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
  String packageName=wsdlDoc.getPackageName();
  this.outputGenaratorParam=outputGenaratorParam;
  if (packageName == null) {
    packageName=""String_Node_Str"";
  }
  if (packageName.startsWith(""String_Node_Str"")) {
    packageName=packageName.substring(1);
  }
  currentPackageName=packageName;
  currentTypesFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  classUseFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  writeCssFiles();
  logger.logp(Level.INFO,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<PortType> portTypes=wsdlDoc.getPortTypes();
  for (  PortType portType : portTypes) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(wsdlDoc.getServiceName(),packageName));
    Map<String,String> replacementMap=new HashMap<String,String>();
    replacementMap.put(""String_Node_Str"",getRelativePath(currentPackageName));
    buildHeader(html,replacementMap,""String_Node_Str"");
    html.append(Constants.HTML_BR);
    buildPortType(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationTable(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationDetails(html,portType,wsdlDoc);
    addFooter(html,replacementMap,""String_Node_Str"");
    html.append(HtmlUtils.getEndTags());
    String outputDir=getCurrentOutputDir() + File.separator;
    writeFile(html,outputDir + File.separator + packageName,wsdlDoc.getServiceName() + Constants.DOT_HTML);
  }
  writeOrphanTypes(wsdlDoc);
  createTypeIndex(wsdlDoc);
  addPackageToDocMap(packageName,wsdlDoc);
  addPackageToServiceMap(packageName,wsdlDoc.getServiceName());
  processedTypes=new ArrayList<AbstractType>();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
}"
81305,"private void createIndexFiles() throws OutputFormatterException {
  Map<String,IndexerDataObject> completeMap=getCompleteIndexerMap();
  StringBuffer keyLinks=getKeyLinks(completeMap);
  int i=1;
  for (  Map.Entry<String,IndexerDataObject> entry : completeMap.entrySet()) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(""String_Node_Str"" + i,""String_Node_Str""));
    buildHeader(html,false,false,null,""String_Node_Str"",true,keyLinks.toString());
    html.append(""String_Node_Str"" + entry.getKey() + ""String_Node_Str"");
    List<IndexerBaseDataObject> data=entry.getValue().getDataObjects();
    Collections.sort(data);
    for (    IndexerBaseDataObject dataObj : data) {
      if (!(dataObj instanceof IndexerType)) {
        String baseHref=""String_Node_Str"" + dataObj.getPackageName();
        String typeDesc=""String_Node_Str"";
        String baseTitleDesc=""String_Node_Str"";
        String baseName=""String_Node_Str"";
        String baseDoc=""String_Node_Str"";
        String inPageHref=dataObj.getBaseName();
        if (dataObj instanceof IndexerOperationHolder) {
          baseHref=baseHref + SEPARATOR + dataObj.getServiceName()+ Constants.DOT_HTML;
          typeDesc=""String_Node_Str"";
          baseName=dataObj.getServiceName();
          baseTitleDesc=typeDesc + baseName;
          IndexerOperationHolder opHolder=(IndexerOperationHolder)dataObj;
          if (opHolder.getOperation().getAnnotations() != null && opHolder.getOperation().getAnnotations().getDocumentation() != null) {
            baseDoc=opHolder.getOperation().getAnnotations().getDocumentation();
          }
        }
        if (dataObj instanceof IndexerElementHolder) {
          IndexerElementHolder elemHolder=(IndexerElementHolder)dataObj;
          if (elemHolder.isReqResp()) {
            baseHref=baseHref + SEPARATOR + dataObj.getServiceName()+ Constants.DOT_HTML;
            if (elemHolder.isInput()) {
              typeDesc=""String_Node_Str"";
            }
 else {
              typeDesc=""String_Node_Str"";
            }
            baseName=dataObj.getServiceName();
            baseTitleDesc=typeDesc + baseName;
            inPageHref=elemHolder.getOperationHolder().getBaseName();
          }
 else {
            baseHref=baseHref + TYPES + elemHolder.getElement().getContainerComplexType().getName()+ Constants.DOT_HTML;
            if (elemHolder.getElement() instanceof Element) {
              typeDesc=""String_Node_Str"";
            }
 else {
              typeDesc=""String_Node_Str"";
            }
            baseName=elemHolder.getElement().getContainerComplexType().getName();
            baseTitleDesc=typeDesc + baseName;
          }
          if (elemHolder.getElement().getAnnotationInfo() != null && elemHolder.getElement().getAnnotationInfo().getDocumentation() != null) {
            baseDoc=elemHolder.getElement().getAnnotationInfo().getDocumentation();
          }
        }
        if (dataObj instanceof IndexerEnumValueElements) {
          IndexerEnumValueElements elemHolder=(IndexerEnumValueElements)dataObj;
          baseHref=baseHref + TYPES + elemHolder.getEnumElem().getType()+ Constants.DOT_HTML;
          typeDesc=""String_Node_Str"";
          baseName=elemHolder.getEnumElem().getType();
          baseTitleDesc=typeDesc + baseName;
          if (elemHolder.getEnumElem().getAnnotations() != null && elemHolder.getEnumElem().getAnnotations().getDocumentation() != null) {
            baseDoc=elemHolder.getEnumElem().getAnnotations().getDocumentation();
          }
        }
        html.append(""String_Node_Str"" + baseHref + ""String_Node_Str""+ inPageHref+ ""String_Node_Str""+ dataObj.getBaseName()+ ""String_Node_Str""+ typeDesc+ ""String_Node_Str""+ baseHref+ ""String_Node_Str""+ baseTitleDesc+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ baseDoc+ ""String_Node_Str"");
      }
    }
    html.append(""String_Node_Str"");
    addFooter(html,false,false,null,""String_Node_Str"",true,keyLinks.toString());
    html.append(HtmlUtils.getEndTags());
    writeFile(html,getCurrentOutputDir() + ""String_Node_Str"",""String_Node_Str"" + i + ""String_Node_Str"");
    i=i + 1;
  }
  createDeprecationFile(completeMap);
}","private void createIndexFiles() throws OutputFormatterException {
  Map<String,IndexerDataObject> completeMap=getCompleteIndexerMap();
  StringBuffer keyLinks=getKeyLinks(completeMap);
  int i=1;
  for (  Map.Entry<String,IndexerDataObject> entry : completeMap.entrySet()) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(""String_Node_Str"" + i,""String_Node_Str""));
    Map<String,String> replacementMap=new HashMap<String,String>();
    replacementMap.put(""String_Node_Str"",""String_Node_Str"");
    replacementMap.put(""String_Node_Str"",""String_Node_Str"");
    replacementMap.put(""String_Node_Str"",keyLinks.toString());
    buildHeader(html,replacementMap,""String_Node_Str"");
    html.append(""String_Node_Str"" + entry.getKey() + ""String_Node_Str"");
    List<IndexerBaseDataObject> data=entry.getValue().getDataObjects();
    Collections.sort(data);
    for (    IndexerBaseDataObject dataObj : data) {
      if (!(dataObj instanceof IndexerType)) {
        String baseHref=""String_Node_Str"" + dataObj.getPackageName();
        String typeDesc=""String_Node_Str"";
        String baseTitleDesc=""String_Node_Str"";
        String baseName=""String_Node_Str"";
        String baseDoc=""String_Node_Str"";
        String inPageHref=dataObj.getBaseName();
        if (dataObj instanceof IndexerOperationHolder) {
          baseHref=baseHref + SEPARATOR + dataObj.getServiceName()+ Constants.DOT_HTML;
          typeDesc=""String_Node_Str"";
          baseName=dataObj.getServiceName();
          baseTitleDesc=typeDesc + baseName;
          IndexerOperationHolder opHolder=(IndexerOperationHolder)dataObj;
          if (opHolder.getOperation().getAnnotations() != null && opHolder.getOperation().getAnnotations().getDocumentation() != null) {
            baseDoc=opHolder.getOperation().getAnnotations().getDocumentation();
          }
        }
        if (dataObj instanceof IndexerElementHolder) {
          IndexerElementHolder elemHolder=(IndexerElementHolder)dataObj;
          if (elemHolder.isReqResp()) {
            baseHref=baseHref + SEPARATOR + dataObj.getServiceName()+ Constants.DOT_HTML;
            if (elemHolder.isInput()) {
              typeDesc=""String_Node_Str"";
            }
 else {
              typeDesc=""String_Node_Str"";
            }
            baseName=dataObj.getServiceName();
            baseTitleDesc=typeDesc + baseName;
            inPageHref=elemHolder.getOperationHolder().getBaseName();
          }
 else {
            baseHref=baseHref + TYPES + elemHolder.getElement().getContainerComplexType().getName()+ Constants.DOT_HTML;
            if (elemHolder.getElement() instanceof Element) {
              typeDesc=""String_Node_Str"";
            }
 else {
              typeDesc=""String_Node_Str"";
            }
            baseName=elemHolder.getElement().getContainerComplexType().getName();
            baseTitleDesc=typeDesc + baseName;
          }
          if (elemHolder.getElement().getAnnotationInfo() != null && elemHolder.getElement().getAnnotationInfo().getDocumentation() != null) {
            baseDoc=elemHolder.getElement().getAnnotationInfo().getDocumentation();
          }
        }
        if (dataObj instanceof IndexerEnumValueElements) {
          IndexerEnumValueElements elemHolder=(IndexerEnumValueElements)dataObj;
          baseHref=baseHref + TYPES + elemHolder.getEnumElem().getType()+ Constants.DOT_HTML;
          typeDesc=""String_Node_Str"";
          baseName=elemHolder.getEnumElem().getType();
          baseTitleDesc=typeDesc + baseName;
          if (elemHolder.getEnumElem().getAnnotations() != null && elemHolder.getEnumElem().getAnnotations().getDocumentation() != null) {
            baseDoc=elemHolder.getEnumElem().getAnnotations().getDocumentation();
          }
        }
        html.append(""String_Node_Str"" + baseHref + ""String_Node_Str""+ inPageHref+ ""String_Node_Str""+ dataObj.getBaseName()+ ""String_Node_Str""+ typeDesc+ ""String_Node_Str""+ baseHref+ ""String_Node_Str""+ baseTitleDesc+ ""String_Node_Str""+ baseName+ ""String_Node_Str""+ baseDoc+ ""String_Node_Str"");
      }
    }
    html.append(""String_Node_Str"");
    addFooter(html,replacementMap,""String_Node_Str"");
    html.append(HtmlUtils.getEndTags());
    writeFile(html,getCurrentOutputDir() + ""String_Node_Str"",""String_Node_Str"" + i + ""String_Node_Str"");
    i=i + 1;
  }
  createDeprecationFile(completeMap);
}"
81306,"/** 
 * Creates the all packages description file.
 * @throws OutputFormatterException
 */
private void createAllPackagesDescriptionFile() throws OutputFormatterException {
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.ALL_CLASSES,null));
  buildHeader(html,false,false,null,""String_Node_Str"",true,null);
  html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_BR);
  addFooter(html,false,false,null,""String_Node_Str"",true,null);
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.PACKAGES.toLowerCase() + Constants.INDEX + Constants.DOT_HTML);
}","/** 
 * Creates the all packages description file.
 * @throws OutputFormatterException
 */
private void createAllPackagesDescriptionFile() throws OutputFormatterException {
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.ALL_CLASSES,null));
  Map<String,String> replacementMap=new HashMap<String,String>();
  replacementMap.put(""String_Node_Str"",""String_Node_Str"");
  replacementMap.put(""String_Node_Str"",""String_Node_Str"");
  replacementMap.put(""String_Node_Str"",""String_Node_Str"");
  buildHeader(html,replacementMap,""String_Node_Str"");
  html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_BR);
  addFooter(html,replacementMap,""String_Node_Str"");
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.PACKAGES.toLowerCase() + Constants.INDEX + Constants.DOT_HTML);
}"
81307,"private void writePackageTree(List<XSDDocInterface> wsdlDoc,String outputdir,boolean isAllPackages,String packageName) throws OutputFormatterException {
  Node root=getTypesInTree(wsdlDoc);
  StringBuffer html=new StringBuffer();
  html.append(Constants.HTML_H3_START + ""String_Node_Str"" + currentPackageName+ Constants.HTML_H3_END);
  if (!isAllPackages) {
    html.append(""String_Node_Str"" + Constants.HTML_BR);
    String str=""String_Node_Str"";
    while (packageName.indexOf('/') != -1) {
      str=""String_Node_Str"";
      packageName=packageName.substring(packageName.indexOf('/') + 1);
    }
    html.append(Constants.NBSP_THRICE + Constants.NBSP_THRICE + HtmlUtils.getAnchorTag(null,str + ""String_Node_Str"" + Constants.DOT_HTML,null,""String_Node_Str""));
  }
  html.append(Constants.HTML_HR);
  html.append(Constants.HTML_H3_START + ""String_Node_Str"" + Constants.HTML_H3_END);
  html.append(""String_Node_Str"");
  writeTree(root,html,isAllPackages);
  html.append(""String_Node_Str"");
  writeFile(html,outputdir,""String_Node_Str"" + Constants.DOT_HTML);
}","private void writePackageTree(List<XSDDocInterface> wsdlDoc,String outputdir,boolean isAllPackages) throws OutputFormatterException {
  Node root=getTypesInTree(wsdlDoc);
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(""String_Node_Str"" + currentPackageName,outputdir));
  Map<String,String> replacementMap=new HashMap<String,String>();
  replacementMap.put(""String_Node_Str"",(outputdir == null ? ""String_Node_Str"" : getRelativePath(outputdir)));
  replacementMap.put(""String_Node_Str"",""String_Node_Str"");
  buildHeader(html,replacementMap,""String_Node_Str"");
  html.append(Constants.HTML_H3_START + ""String_Node_Str"" + currentPackageName+ Constants.HTML_H3_END);
  if (!isAllPackages) {
    html.append(""String_Node_Str"" + Constants.HTML_BR);
    String str=getRelativePath(outputdir);
    html.append(Constants.NBSP_THRICE + Constants.NBSP_THRICE + HtmlUtils.getAnchorTag(null,str + ""String_Node_Str"" + Constants.DOT_HTML,null,""String_Node_Str""));
  }
  html.append(Constants.HTML_HR);
  html.append(Constants.HTML_H3_START + ""String_Node_Str"" + Constants.HTML_H3_END);
  html.append(""String_Node_Str"");
  writeTree(root,html,isAllPackages);
  html.append(""String_Node_Str"");
  addFooter(html,replacementMap,""String_Node_Str"");
  html.append(HtmlUtils.getEndTags());
  if (outputdir == null) {
    outputdir=""String_Node_Str"";
  }
  writeFile(html,getCurrentOutputDir() + outputdir,""String_Node_Str"" + Constants.DOT_HTML);
}"
81308,"/** 
 * Sets the input types.
 * @param html the html
 * @param opH the op h
 * @param serviceName the service name
 */
private String setInputTypes(StringBuffer html,OperationHolder opH,String serviceName,String locBase){
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{html,opH});
  String params=""String_Node_Str"";
  List<Element> inputs=opH.getInputTypes();
  if (inputs != null) {
    Iterator<Element> iter=inputs.iterator();
    while (iter.hasNext()) {
      Element elem=iter.next();
      params=HtmlUtils.getAnchorTag(null,locBase + ""String_Node_Str"" + SEPARATOR+ elem.getType()+ Constants.DOT_HTML,elem.getType(),elem.getType());
      params+=""String_Node_Str"" + elem.getName();
      if (iter.hasNext()) {
        params+=""String_Node_Str"";
      }
    }
  }
  html.append(params);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
  return params;
}","/** 
 * Sets the input types.
 * @param html the html
 * @param opH the op h
 * @param wsdlDoc the wsdl doc
 * @throws OutputFormatterException
 */
private void setInputTypes(StringBuffer html,OperationHolder opH,WSDLDocInterface wsdlDoc) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{html,opH});
  List<Element> inputs=opH.getInputTypes();
  if (inputs != null) {
    Iterator<Element> iter=inputs.iterator();
    while (iter.hasNext()) {
      Element elem=iter.next();
      html.append(getTextInSpan(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + SEPARATOR + elem.getType()+ Constants.DOT_HTML,elem.getType(),elem.getType()),""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(getTextInSpan(elem.getName(),""String_Node_Str""));
      if (iter.hasNext()) {
        html.append(""String_Node_Str"");
      }
      ComplexType cType=wsdlDoc.searchCType(elem.getType());
      if (cType != null) {
        writeComplexTypeFile(wsdlDoc,cType,cType.getName());
      }
    }
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
81309,"/** 
 * Builds the header.
 * @param html the html
 * @throws OutputFormatterException
 */
private void buildHeader(StringBuffer html,boolean isType,boolean isComplex,String typeName,String relPath,boolean isIndex,String keyLinks) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  String header=getFooterInformation(isType,isComplex,typeName,relPath,isIndex,keyLinks);
  html.append(header);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Builds the header.
 * @param html the html
 * @throws OutputFormatterException
 */
private void buildHeader(StringBuffer html,Map<String,String> replacementMap,String hdrFileParameterName) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  String header=getFooterInformation(replacementMap,hdrFileParameterName);
  html.append(header);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
81310,"/** 
 * Write simple type file.
 * @param doc the doc
 * @param type the type
 * @throws OutputFormatterException
 */
private void writeSimpleTypeFile(WSDLDocInterface doc,SimpleType type) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  String typeName=type.getName();
  StringBuffer html=new StringBuffer();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + TYPES));
    buildHeader(html,true,false,type.getName(),getRelativePath(currentPackageName + TYPES),false,null);
    String parentType=type.getBase();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      typeName=typeName + ""String_Node_Str"" + parentType+ ""String_Node_Str"";
    }
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    List<EnumElement> enumElements=type.getEnums();
    if (enumElements != null && !enumElements.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      EnumElement enumElement : enumElements) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(HtmlUtils.getAnchorTag(enumElement.getValue(),null,null,null));
        html.append(enumElement.getValue());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        if (enumElement.getAnnotations().getDocumentation() != null) {
          html.append(enumElement.getAnnotations().getDocumentation());
        }
        deprDet=AnnotationsHelper.processDeprication(enumElement.getAnnotations());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,enumElement.getAnnotations());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
      html.append(Constants.HTML_TABLE_END);
    }
    addFooter(html,true,false,type.getName(),getRelativePath(currentPackageName + TYPES),false,null);
    writeFile(html,currentTypesFolderPath,type.getName() + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Write simple type file.
 * @param doc the doc
 * @param type the type
 * @throws OutputFormatterException
 */
private void writeSimpleTypeFile(WSDLDocInterface doc,SimpleType type) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  String typeName=type.getName();
  StringBuffer html=new StringBuffer();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + TYPES));
    Map<String,String> replacementMap=new HashMap<String,String>();
    replacementMap.put(""String_Node_Str"",getRelativePath(currentPackageName + TYPES));
    replacementMap.put(""String_Node_Str"",type.getName());
    buildHeader(html,replacementMap,""String_Node_Str"");
    String parentType=type.getBase();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      typeName=typeName + ""String_Node_Str"" + parentType+ ""String_Node_Str"";
    }
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    List<EnumElement> enumElements=type.getEnums();
    if (enumElements != null && !enumElements.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      EnumElement enumElement : enumElements) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(HtmlUtils.getAnchorTag(enumElement.getValue(),null,null,null));
        html.append(enumElement.getValue());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        if (enumElement.getAnnotations().getDocumentation() != null) {
          html.append(enumElement.getAnnotations().getDocumentation());
        }
        deprDet=AnnotationsHelper.processDeprication(enumElement.getAnnotations());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,enumElement.getAnnotations());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
      html.append(Constants.HTML_TABLE_END);
    }
    addFooter(html,replacementMap,""String_Node_Str"");
    writeFile(html,currentTypesFolderPath,type.getName() + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
81311,"/** 
 * Builds the operation table.
 * @param html the html
 * @param portType the port type
 * @param wsdlDoc the wsdl doc
 */
private void buildOperationTable(StringBuffer html,PortType portType,WSDLDocInterface wsdlDoc){
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{html,portType});
  html.append(HtmlUtils.getAnchorTag(Constants.OPERATION_SUMMARY_HREF,null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(Constants.OPERATION_SUMMARY_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(Constants.RETURN_TYPE_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(Constants.METHOD_NAME_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  for (  OperationHolder opH : portType.getOperations()) {
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableDataTagWithStyle(""String_Node_Str""));
    setOutputTypes(html,opH,wsdlDoc.getServiceName());
    html.append(Constants.HTML_TABLE_TD_END);
    html.append(getTableDataTagWithStyle(""String_Node_Str""));
    html.append(getTextInSpan(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + opH.getName(),opH.getName(),opH.getName()),""String_Node_Str"") + ""String_Node_Str"");
    setInputTypes(html,opH,wsdlDoc.getServiceName(),""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_BR);
    html.append(getSummary(wsdlDoc,opH));
    html.append(Constants.HTML_TABLE_TD_END);
    html.append(Constants.HTML_TABLE_TR_END);
    if (returnTypeToMethodMap.get(opH.getOutputTypes().get(0).getType()) == null) {
      returnTypeToMethodMap.put(opH.getOutputTypes().get(0).getType(),new TreeSet<String>());
    }
    String str=wsdlDoc.getServiceName() + ""String_Node_Str"" + opH.getName()+ ""String_Node_Str"";
    str+=setInputTypes(html,opH,wsdlDoc.getServiceName(),""String_Node_Str"") + ""String_Node_Str"";
    str+=Constants.HTML_BR + Constants.NBSP_THRICE + getSummary(wsdlDoc,opH);
    returnTypeToMethodMap.get(opH.getOutputTypes().get(0).getType()).add(str);
    if (opH.getInputTypes() != null) {
      Iterator<Element> iter=opH.getInputTypes().iterator();
      while (iter.hasNext()) {
        Element elem=iter.next();
        if (paramsToMethodMap.get(elem.getType()) == null) {
          paramsToMethodMap.put(elem.getType(),new TreeSet<String>());
        }
        String retType=""String_Node_Str"";
        if (opH.getOutputTypes() != null && opH.getOutputTypes().size() > 0) {
          retType=opH.getOutputTypes().get(0).getType();
        }
        str=retType + ""String_Node_Str"" + wsdlDoc.getServiceName()+ ""String_Node_Str""+ opH.getName()+ ""String_Node_Str""+ getParams(opH.getInputTypes(),""String_Node_Str"")+ ""String_Node_Str"";
        str+=Constants.HTML_BR + Constants.NBSP_THRICE + getSummary(wsdlDoc,opH);
        paramsToMethodMap.get(elem.getType()).add(str);
      }
    }
  }
  html.append(Constants.HTML_TABLE_END);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Builds the operation table.
 * @param html the html
 * @param portType the port type
 * @param wsdlDoc the wsdl doc
 */
private void buildOperationTable(StringBuffer html,PortType portType,WSDLDocInterface wsdlDoc){
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{html,portType});
  html.append(HtmlUtils.getAnchorTag(Constants.OPERATION_SUMMARY_HREF,null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(Constants.OPERATION_SUMMARY_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(Constants.RETURN_TYPE_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(Constants.METHOD_NAME_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  for (  OperationHolder opH : portType.getOperations()) {
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableDataTagWithStyle(""String_Node_Str""));
    setOutputTypes(html,opH,wsdlDoc.getServiceName());
    html.append(Constants.HTML_TABLE_TD_END);
    html.append(getTableDataTagWithStyle(""String_Node_Str""));
    html.append(getTextInSpan(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + opH.getName(),opH.getName(),opH.getName()),""String_Node_Str"") + ""String_Node_Str"");
    html.append(getInputTypes(opH,wsdlDoc.getServiceName(),""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_BR);
    html.append(getSummary(wsdlDoc,opH));
    html.append(Constants.HTML_TABLE_TD_END);
    html.append(Constants.HTML_TABLE_TR_END);
    if (returnTypeToMethodMap.get(opH.getOutputTypes().get(0).getType()) == null) {
      returnTypeToMethodMap.put(opH.getOutputTypes().get(0).getType(),new TreeSet<String>());
    }
    String str=wsdlDoc.getServiceName() + ""String_Node_Str"" + opH.getName()+ ""String_Node_Str"";
    str+=getInputTypes(opH,wsdlDoc.getServiceName(),""String_Node_Str"") + ""String_Node_Str"";
    str+=Constants.HTML_BR + Constants.NBSP_THRICE + getSummary(wsdlDoc,opH);
    returnTypeToMethodMap.get(opH.getOutputTypes().get(0).getType()).add(str);
    if (opH.getInputTypes() != null) {
      Iterator<Element> iter=opH.getInputTypes().iterator();
      while (iter.hasNext()) {
        Element elem=iter.next();
        if (paramsToMethodMap.get(elem.getType()) == null) {
          paramsToMethodMap.put(elem.getType(),new TreeSet<String>());
        }
        String retType=""String_Node_Str"";
        if (opH.getOutputTypes() != null && opH.getOutputTypes().size() > 0) {
          retType=opH.getOutputTypes().get(0).getType();
        }
        str=retType + ""String_Node_Str"" + wsdlDoc.getServiceName()+ ""String_Node_Str""+ opH.getName()+ ""String_Node_Str""+ getParams(opH.getInputTypes(),""String_Node_Str"")+ ""String_Node_Str"";
        str+=Constants.HTML_BR + Constants.NBSP_THRICE + getSummary(wsdlDoc,opH);
        paramsToMethodMap.get(elem.getType()).add(str);
      }
    }
  }
  html.append(Constants.HTML_TABLE_END);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
81312,"/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + TYPES));
    buildHeader(html,true,true,type.getName(),getRelativePath(currentPackageName + TYPES),false,null);
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    buildFieldSummary(html,doc,type);
    html.append(Constants.HTML_HR);
    html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    if (elements.isEmpty()) {
      html.append(type.getName() + ""String_Node_Str"");
      html.append(Constants.HTML_TABLE_END);
    }
 else {
      html.append(Constants.HTML_BR + Constants.HTML_BR);
      for (      Element element : elements) {
        if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
          isRecursive=true;
        }
        String nodePath=parentPath + ""String_Node_Str"" + element.getName();
        String typeCName=getCTypeTypeName(element.getType());
        if (type.getName().equalsIgnoreCase(typeCName)) {
          isRecursive=true;
        }
        html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
        if (doc.searchCType(typeCName) != null && !isRecursive) {
          writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else         if (doc.searchSimpleType(typeCName) != null) {
          writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else {
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
        }
        if (element.getAnnotationInfo().getDocumentation() != null) {
          html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
        }
        processDefaultsAndBoundries(html,doc,element);
        deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,element.getAnnotationInfo());
        html.append(Constants.HTML_HR + Constants.HTML_BR);
      }
    }
    writeUseFile(doc,type,parentPath);
    addFooter(html,true,true,type.getName(),getRelativePath(currentPackageName + TYPES),false,null);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + TYPES));
    Map<String,String> replacementMap=new HashMap<String,String>();
    replacementMap.put(""String_Node_Str"",getRelativePath(currentPackageName + TYPES));
    replacementMap.put(""String_Node_Str"",type.getName());
    buildHeader(html,replacementMap,""String_Node_Str"");
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    buildFieldSummary(html,doc,type);
    html.append(Constants.HTML_HR);
    html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    if (elements.isEmpty()) {
      html.append(type.getName() + ""String_Node_Str"");
      html.append(Constants.HTML_TABLE_END);
    }
 else {
      html.append(Constants.HTML_BR + Constants.HTML_BR);
      for (      Element element : elements) {
        if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
          isRecursive=true;
        }
        String nodePath=parentPath + ""String_Node_Str"" + element.getName();
        String typeCName=getCTypeTypeName(element.getType());
        if (type.getName().equalsIgnoreCase(typeCName)) {
          isRecursive=true;
        }
        html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
        if (doc.searchCType(typeCName) != null && !isRecursive) {
          writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else         if (doc.searchSimpleType(typeCName) != null) {
          writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else {
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
        }
        if (element.getAnnotationInfo().getDocumentation() != null) {
          html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
        }
        processDefaultsAndBoundries(html,doc,element);
        deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,element.getAnnotationInfo());
        html.append(Constants.HTML_HR + Constants.HTML_BR);
      }
    }
    writeUseFile(doc,type,parentPath);
    addFooter(html,replacementMap,""String_Node_Str"");
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
81313,"private void createDeprecationFile(Map<String,IndexerDataObject> completeMap) throws OutputFormatterException {
  Map<IndexerType,String> deprecatedTypes=new TreeMap<IndexerType,String>();
  Map<IndexerElementHolder,String> deprecatedElements=new TreeMap<IndexerElementHolder,String>();
  Map<IndexerOperationHolder,String> deprecatedOperations=new TreeMap<IndexerOperationHolder,String>();
  Map<IndexerEnumValueElements,String> deprecatedEnums=new TreeMap<IndexerEnumValueElements,String>();
  for (  Map.Entry<String,IndexerDataObject> entry : completeMap.entrySet()) {
    List<IndexerBaseDataObject> data=entry.getValue().getDataObjects();
    Collections.sort(data);
    for (    IndexerBaseDataObject dataObj : data) {
      if (dataObj instanceof IndexerType) {
        StringBuffer depreDetails=AnnotationsHelper.processDeprication(((IndexerType)dataObj).getType().getAnnotations());
        if (depreDetails != null) {
          deprecatedTypes.put(((IndexerType)dataObj),depreDetails.toString());
        }
      }
      if (dataObj instanceof IndexerElementHolder) {
        StringBuffer depreDetails=AnnotationsHelper.processDeprication(((IndexerElementHolder)dataObj).getElement().getAnnotationInfo());
        if (depreDetails != null) {
          deprecatedElements.put(((IndexerElementHolder)dataObj),depreDetails.toString());
        }
      }
      if (dataObj instanceof IndexerOperationHolder) {
        StringBuffer depreDetails=AnnotationsHelper.processDeprication(((IndexerOperationHolder)dataObj).getOperation().getAnnotations());
        if (depreDetails == null) {
          OperationHolder oper=((IndexerOperationHolder)dataObj).getOperation();
          for (          Element input : oper.getInputTypes()) {
            depreDetails=AnnotationsHelper.processDeprication(input.getAnnotationInfo());
          }
          if (depreDetails == null) {
            for (            Element input : oper.getOutputTypes()) {
              depreDetails=AnnotationsHelper.processDeprication(input.getAnnotationInfo());
            }
          }
        }
        if (depreDetails != null) {
          deprecatedOperations.put(((IndexerOperationHolder)dataObj),depreDetails.toString());
        }
      }
      if (dataObj instanceof IndexerEnumValueElements) {
        StringBuffer depreDetails=AnnotationsHelper.processDeprication(((IndexerEnumValueElements)dataObj).getEnumElem().getAnnotations());
        if (depreDetails != null) {
          deprecatedEnums.put(((IndexerEnumValueElements)dataObj),depreDetails.toString());
        }
      }
    }
  }
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(""String_Node_Str"",null));
  buildHeader(html,false,false,null,""String_Node_Str"",true,null);
  html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_BR);
  if (!(deprecatedTypes.isEmpty() && deprecatedElements.isEmpty() && deprecatedEnums.isEmpty()&& deprecatedOperations.isEmpty())) {
    if (!deprecatedOperations.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      Map.Entry<IndexerOperationHolder,String> entry : deprecatedOperations.entrySet()) {
        IndexerOperationHolder op=entry.getKey();
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(""String_Node_Str"" + op.getPackageName() + op.getBaseName()+ Constants.DOT_HTML+ ""String_Node_Str""+ op.getPackageName()+ ""String_Node_Str""+ op.getBaseName()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ entry.getValue()+ ""String_Node_Str"");
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
    }
    if (!deprecatedTypes.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      Map.Entry<IndexerType,String> entry : deprecatedTypes.entrySet()) {
        IndexerType op=entry.getKey();
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(""String_Node_Str"" + op.getPackageName() + ""String_Node_Str""+ op.getBaseName()+ Constants.DOT_HTML+ ""String_Node_Str""+ op.getPackageName()+ ""String_Node_Str""+ op.getBaseName()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ entry.getValue()+ ""String_Node_Str"");
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
    }
    if (!deprecatedElements.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      Map.Entry<IndexerElementHolder,String> entry : deprecatedElements.entrySet()) {
        IndexerElementHolder elemHolder=entry.getKey();
        String baseHref=elemHolder.getPackageName();
        String typeDesc=""String_Node_Str"";
        String baseTitleDesc=""String_Node_Str"";
        String baseName=""String_Node_Str"";
        String inPageHref=elemHolder.getBaseName();
        if (elemHolder.isReqResp()) {
          baseHref=baseHref + SEPARATOR + elemHolder.getServiceName()+ Constants.DOT_HTML;
          if (elemHolder.isInput()) {
            typeDesc=""String_Node_Str"";
          }
 else {
            typeDesc=""String_Node_Str"";
          }
          baseName=elemHolder.getServiceName();
          baseTitleDesc=typeDesc + baseName;
          inPageHref=elemHolder.getOperationHolder().getBaseName();
        }
 else {
          baseHref=baseHref + TYPES + elemHolder.getElement().getContainerComplexType().getName()+ Constants.DOT_HTML;
          if (elemHolder.getElement() instanceof Element) {
            typeDesc=""String_Node_Str"";
          }
 else {
            typeDesc=""String_Node_Str"";
          }
          baseName=elemHolder.getElement().getContainerComplexType().getName();
          baseTitleDesc=typeDesc + baseName;
        }
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(""String_Node_Str"" + baseHref + ""String_Node_Str""+ inPageHref+ ""String_Node_Str""+ elemHolder.getBaseName()+ ""String_Node_Str""+ typeDesc+ ""String_Node_Str""+ baseHref+ ""String_Node_Str""+ baseTitleDesc+ ""String_Node_Str""+ baseName+ ""String_Node_Str"");
        html.append(""String_Node_Str"" + ""String_Node_Str"" + entry.getValue() + ""String_Node_Str"");
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
    }
    if (!deprecatedEnums.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      Map.Entry<IndexerEnumValueElements,String> entry : deprecatedEnums.entrySet()) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        IndexerEnumValueElements elemHolder=entry.getKey();
        String baseHref=elemHolder.getPackageName();
        String typeDesc=""String_Node_Str"";
        String baseTitleDesc=""String_Node_Str"";
        String baseName=""String_Node_Str"";
        String inPageHref=elemHolder.getBaseName();
        baseHref=baseHref + TYPES + elemHolder.getEnumElem().getType()+ Constants.DOT_HTML;
        typeDesc=""String_Node_Str"";
        baseName=elemHolder.getEnumElem().getType();
        baseTitleDesc=typeDesc + baseName;
        html.append(""String_Node_Str"" + baseHref + ""String_Node_Str""+ inPageHref+ ""String_Node_Str""+ elemHolder.getBaseName()+ ""String_Node_Str""+ typeDesc+ ""String_Node_Str""+ baseHref+ ""String_Node_Str""+ baseTitleDesc+ ""String_Node_Str""+ baseName+ ""String_Node_Str"");
        html.append(""String_Node_Str"" + ""String_Node_Str"" + entry.getValue() + ""String_Node_Str"");
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
    }
  }
 else {
    html.append(""String_Node_Str"");
  }
  addFooter(html,false,false,null,""String_Node_Str"",true,null);
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),""String_Node_Str"");
}","private void createDeprecationFile(Map<String,IndexerDataObject> completeMap) throws OutputFormatterException {
  Map<IndexerType,String> deprecatedTypes=new TreeMap<IndexerType,String>();
  Map<IndexerElementHolder,String> deprecatedElements=new TreeMap<IndexerElementHolder,String>();
  Map<IndexerOperationHolder,String> deprecatedOperations=new TreeMap<IndexerOperationHolder,String>();
  Map<IndexerEnumValueElements,String> deprecatedEnums=new TreeMap<IndexerEnumValueElements,String>();
  for (  Map.Entry<String,IndexerDataObject> entry : completeMap.entrySet()) {
    List<IndexerBaseDataObject> data=entry.getValue().getDataObjects();
    Collections.sort(data);
    for (    IndexerBaseDataObject dataObj : data) {
      if (dataObj instanceof IndexerType) {
        StringBuffer depreDetails=AnnotationsHelper.processDeprication(((IndexerType)dataObj).getType().getAnnotations());
        if (depreDetails != null) {
          deprecatedTypes.put(((IndexerType)dataObj),depreDetails.toString());
        }
      }
      if (dataObj instanceof IndexerElementHolder) {
        StringBuffer depreDetails=AnnotationsHelper.processDeprication(((IndexerElementHolder)dataObj).getElement().getAnnotationInfo());
        if (depreDetails != null) {
          deprecatedElements.put(((IndexerElementHolder)dataObj),depreDetails.toString());
        }
      }
      if (dataObj instanceof IndexerOperationHolder) {
        StringBuffer depreDetails=AnnotationsHelper.processDeprication(((IndexerOperationHolder)dataObj).getOperation().getAnnotations());
        if (depreDetails == null) {
          OperationHolder oper=((IndexerOperationHolder)dataObj).getOperation();
          for (          Element input : oper.getInputTypes()) {
            depreDetails=AnnotationsHelper.processDeprication(input.getAnnotationInfo());
          }
          if (depreDetails == null) {
            for (            Element input : oper.getOutputTypes()) {
              depreDetails=AnnotationsHelper.processDeprication(input.getAnnotationInfo());
            }
          }
        }
        if (depreDetails != null) {
          deprecatedOperations.put(((IndexerOperationHolder)dataObj),depreDetails.toString());
        }
      }
      if (dataObj instanceof IndexerEnumValueElements) {
        StringBuffer depreDetails=AnnotationsHelper.processDeprication(((IndexerEnumValueElements)dataObj).getEnumElem().getAnnotations());
        if (depreDetails != null) {
          deprecatedEnums.put(((IndexerEnumValueElements)dataObj),depreDetails.toString());
        }
      }
    }
  }
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(""String_Node_Str"",null));
  Map<String,String> replacementMap=new HashMap<String,String>();
  replacementMap.put(""String_Node_Str"",""String_Node_Str"");
  replacementMap.put(""String_Node_Str"",""String_Node_Str"");
  replacementMap.put(""String_Node_Str"",""String_Node_Str"");
  buildHeader(html,replacementMap,""String_Node_Str"");
  html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_BR);
  if (!(deprecatedTypes.isEmpty() && deprecatedElements.isEmpty() && deprecatedEnums.isEmpty()&& deprecatedOperations.isEmpty())) {
    if (!deprecatedOperations.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      Map.Entry<IndexerOperationHolder,String> entry : deprecatedOperations.entrySet()) {
        IndexerOperationHolder op=entry.getKey();
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(""String_Node_Str"" + op.getPackageName() + op.getBaseName()+ Constants.DOT_HTML+ ""String_Node_Str""+ op.getPackageName()+ ""String_Node_Str""+ op.getBaseName()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ entry.getValue()+ ""String_Node_Str"");
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
    }
    if (!deprecatedTypes.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      Map.Entry<IndexerType,String> entry : deprecatedTypes.entrySet()) {
        IndexerType op=entry.getKey();
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(""String_Node_Str"" + op.getPackageName() + ""String_Node_Str""+ op.getBaseName()+ Constants.DOT_HTML+ ""String_Node_Str""+ op.getPackageName()+ ""String_Node_Str""+ op.getBaseName()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ entry.getValue()+ ""String_Node_Str"");
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
    }
    if (!deprecatedElements.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      Map.Entry<IndexerElementHolder,String> entry : deprecatedElements.entrySet()) {
        IndexerElementHolder elemHolder=entry.getKey();
        String baseHref=elemHolder.getPackageName();
        String typeDesc=""String_Node_Str"";
        String baseTitleDesc=""String_Node_Str"";
        String baseName=""String_Node_Str"";
        String inPageHref=elemHolder.getBaseName();
        if (elemHolder.isReqResp()) {
          baseHref=baseHref + SEPARATOR + elemHolder.getServiceName()+ Constants.DOT_HTML;
          if (elemHolder.isInput()) {
            typeDesc=""String_Node_Str"";
          }
 else {
            typeDesc=""String_Node_Str"";
          }
          baseName=elemHolder.getServiceName();
          baseTitleDesc=typeDesc + baseName;
          inPageHref=elemHolder.getOperationHolder().getBaseName();
        }
 else {
          baseHref=baseHref + TYPES + elemHolder.getElement().getContainerComplexType().getName()+ Constants.DOT_HTML;
          if (elemHolder.getElement() instanceof Element) {
            typeDesc=""String_Node_Str"";
          }
 else {
            typeDesc=""String_Node_Str"";
          }
          baseName=elemHolder.getElement().getContainerComplexType().getName();
          baseTitleDesc=typeDesc + baseName;
        }
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(""String_Node_Str"" + baseHref + ""String_Node_Str""+ inPageHref+ ""String_Node_Str""+ elemHolder.getBaseName()+ ""String_Node_Str""+ typeDesc+ ""String_Node_Str""+ baseHref+ ""String_Node_Str""+ baseTitleDesc+ ""String_Node_Str""+ baseName+ ""String_Node_Str"");
        html.append(""String_Node_Str"" + ""String_Node_Str"" + entry.getValue() + ""String_Node_Str"");
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
    }
    if (!deprecatedEnums.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      Map.Entry<IndexerEnumValueElements,String> entry : deprecatedEnums.entrySet()) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        IndexerEnumValueElements elemHolder=entry.getKey();
        String baseHref=elemHolder.getPackageName();
        String typeDesc=""String_Node_Str"";
        String baseTitleDesc=""String_Node_Str"";
        String baseName=""String_Node_Str"";
        String inPageHref=elemHolder.getBaseName();
        baseHref=baseHref + TYPES + elemHolder.getEnumElem().getType()+ Constants.DOT_HTML;
        typeDesc=""String_Node_Str"";
        baseName=elemHolder.getEnumElem().getType();
        baseTitleDesc=typeDesc + baseName;
        html.append(""String_Node_Str"" + baseHref + ""String_Node_Str""+ inPageHref+ ""String_Node_Str""+ elemHolder.getBaseName()+ ""String_Node_Str""+ typeDesc+ ""String_Node_Str""+ baseHref+ ""String_Node_Str""+ baseTitleDesc+ ""String_Node_Str""+ baseName+ ""String_Node_Str"");
        html.append(""String_Node_Str"" + ""String_Node_Str"" + entry.getValue() + ""String_Node_Str"");
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
    }
  }
 else {
    html.append(""String_Node_Str"");
  }
  addFooter(html,replacementMap,""String_Node_Str"");
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),""String_Node_Str"");
}"
81314,"public void createTreeFiles() throws OutputFormatterException {
  List<XSDDocInterface> allPackages=new ArrayList<XSDDocInterface>();
  for (  Map.Entry<String,List<XSDDocInterface>> entry : packageDocMap.entrySet()) {
    currentPackageName=entry.getKey();
    List<XSDDocInterface> list=entry.getValue();
    for (    XSDDocInterface xsd : list) {
      List<ComplexType> cTypes=xsd.getAllComplexTypes();
      for (      ComplexType cType : cTypes) {
        cType.setPackageName(((WSDLDocInterface)xsd).getPackageName());
      }
    }
    writePackageTree(list,getCurrentOutputDir() + File.separator + currentPackageName,false,currentPackageName);
    allPackages.addAll(entry.getValue());
  }
  writePackageTree(allPackages,getCurrentOutputDir(),true,null);
}","public void createTreeFiles() throws OutputFormatterException {
  List<XSDDocInterface> allPackages=new ArrayList<XSDDocInterface>();
  for (  Map.Entry<String,List<XSDDocInterface>> entry : packageDocMap.entrySet()) {
    currentPackageName=entry.getKey();
    List<XSDDocInterface> list=entry.getValue();
    for (    XSDDocInterface xsd : list) {
      List<ComplexType> cTypes=xsd.getAllComplexTypes();
      for (      ComplexType cType : cTypes) {
        cType.setPackageName(((WSDLDocInterface)xsd).getPackageName());
      }
    }
    writePackageTree(list,currentPackageName,false);
    allPackages.addAll(entry.getValue());
  }
  writePackageTree(allPackages,null,true);
}"
81315,"private void processSeeLinks(StringBuffer html,ParsedAnnotationInfo annInfo){
  if (annInfo != null) {
    List<ParsedAnnotationTag> seeLinks=AnnotationsHelper.getAnnotationTag(annInfo,""String_Node_Str"");
    if (seeLinks != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      for (      ParsedAnnotationTag seeLink : seeLinks) {
        html.append(AnnotationsHelper.processSeelink(seeLink) + ""String_Node_Str"");
      }
    }
    List<ParsedAnnotationTag> callInofs=AnnotationsHelper.getCallInfo(annInfo);
    if (callInofs != null) {
      for (      ParsedAnnotationTag callInfo : callInofs) {
        seeLinks=AnnotationsHelper.getCallInfoChildren(callInfo,""String_Node_Str"");
        if (seeLinks != null) {
          if (callInfo.getChildren().get(""String_Node_Str"") != null) {
            html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          }
 else {
            String value=AnnotationsHelper.getFirstCallInfoTagValue(callInfo,""String_Node_Str"");
            if (!Utils.isEmpty(value)) {
              html.append(getTextInDiv(""String_Node_Str"" + value + ""String_Node_Str"",""String_Node_Str""));
            }
          }
          List<ParsedAnnotationTag> calls=AnnotationsHelper.getCallInfoChildren(callInfo,""String_Node_Str"");
          if (calls != null) {
            String callString=""String_Node_Str"";
            Iterator<ParsedAnnotationTag> callIter=calls.iterator();
            while (callIter.hasNext()) {
              ParsedAnnotationTag call=callIter.next();
              callString=callString + call.getTagValue();
              if (callIter.hasNext()) {
                callString=callString + ""String_Node_Str"";
              }
            }
            html.append(getTextInDiv(callString + ""String_Node_Str"",""String_Node_Str""));
          }
          for (          ParsedAnnotationTag seeLink : seeLinks) {
            html.append(AnnotationsHelper.processSeelink(seeLink) + ""String_Node_Str"");
          }
        }
      }
    }
  }
}","private void processSeeLinks(StringBuffer html,ParsedAnnotationInfo annInfo){
  if (annInfo != null) {
    List<ParsedAnnotationTag> seeLinks=AnnotationsHelper.getAnnotationTag(annInfo,""String_Node_Str"");
    boolean headingAdded=false;
    if (seeLinks != null) {
      headingAdded=true;
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      for (      ParsedAnnotationTag seeLink : seeLinks) {
        html.append(AnnotationsHelper.processSeelink(seeLink) + ""String_Node_Str"");
      }
    }
    List<ParsedAnnotationTag> callInofs=AnnotationsHelper.getCallInfo(annInfo);
    if (callInofs != null) {
      for (      ParsedAnnotationTag callInfo : callInofs) {
        seeLinks=AnnotationsHelper.getCallInfoChildren(callInfo,""String_Node_Str"");
        if (seeLinks != null) {
          if (!headingAdded) {
            html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          }
          for (          ParsedAnnotationTag seeLink : seeLinks) {
            html.append(AnnotationsHelper.processSeelink(seeLink) + ""String_Node_Str"");
          }
        }
      }
    }
  }
}"
81316,"public ComplexType searchCType(String name){
  if (xsdDocument != null) {
    return this.xsdDocument.searchCType(name);
  }
  return xsdDocument.searchCType(name);
}","public ComplexType searchCType(String name){
  if (xsdDocument != null) {
    return this.xsdDocument.searchCType(name);
  }
  return null;
}"
81317,"public static StringBuffer processDeprication(ParsedAnnotationInfo annInfo){
  String deprVersion=getFirstAnnotationValue(annInfo,""String_Node_Str"");
  String deprDetails=getFirstAnnotationValue(annInfo,""String_Node_Str"");
  String useInstead=getFirstAnnotationValue(annInfo,""String_Node_Str"");
  StringBuffer result=null;
  if (!Utils.isEmpty(deprVersion)) {
    result=new StringBuffer();
    result.append(""String_Node_Str"" + deprVersion + Constants.HTML_BR);
    result.append(""String_Node_Str"" + deprDetails + Constants.HTML_BR);
    result.append(""String_Node_Str"" + useInstead + Constants.HTML_BR);
  }
  return result;
}","public static StringBuffer processDeprication(ParsedAnnotationInfo annInfo){
  String deprVersion=getFirstAnnotationValue(annInfo,""String_Node_Str"");
  String deprDetails=getFirstAnnotationValue(annInfo,""String_Node_Str"");
  String useInstead=getFirstAnnotationValue(annInfo,""String_Node_Str"");
  StringBuffer result=null;
  if (!Utils.isEmpty(deprVersion)) {
    result=new StringBuffer();
    result.append(""String_Node_Str"" + deprVersion + Constants.HTML_BR);
    if (!Utils.isEmpty(deprDetails)) {
      result.append(""String_Node_Str"" + deprDetails + Constants.HTML_BR);
    }
    if (!Utils.isEmpty(useInstead)) {
      result.append(""String_Node_Str"" + useInstead + Constants.HTML_BR);
    }
  }
  return result;
}"
81318,"/** 
 * Gets the help text.
 * @return the help text
 */
private static String getHelpText(){
  String help=null;
  InputStream is=Main.class.getClassLoader().getResourceAsStream(""String_Node_Str"");
  try {
    BufferedReader br=new BufferedReader(new InputStreamReader(is));
    StringBuffer sb=new StringBuffer();
    String line=""String_Node_Str"";
    while ((line=br.readLine()) != null) {
      sb.append(line + System.getProperty(""String_Node_Str""));
    }
    help=sb.toString();
  }
 catch (  IOException e) {
    Logger.getLogger(Main.class.getName()).throwing(Main.class.getName(),""String_Node_Str"",e);
  }
  return help;
}","/** 
 * Gets the help text.
 * @return text displayed when help option is supplied.
 */
private static String getHelpText(){
  String help=null;
  InputStream is=Main.class.getClassLoader().getResourceAsStream(""String_Node_Str"");
  try {
    BufferedReader br=new BufferedReader(new InputStreamReader(is));
    StringBuffer sb=new StringBuffer();
    String line=""String_Node_Str"";
    while ((line=br.readLine()) != null) {
      sb.append(line + System.getProperty(""String_Node_Str""));
    }
    help=sb.toString();
  }
 catch (  IOException e) {
    Logger.getLogger(Main.class.getName()).throwing(Main.class.getName(),""String_Node_Str"",e);
  }
  return help;
}"
81319,"/** 
 * Removes the empty values.
 * @param documentval the documentval
 * @return the list
 */
private static List<String> removeEmptyValues(String[] documentval){
  List<String> retList=new ArrayList<String>();
  for (  String value : documentval) {
    if (value != null && !Utils.isEmpty(value)) {
      retList.add(value);
    }
  }
  return retList;
}","/** 
 * Removes any empty values supplied as documents.
 * @param documentval the documentval
 * @return the list
 */
private static List<String> removeEmptyValues(String[] documentval){
  List<String> retList=new ArrayList<String>();
  for (  String value : documentval) {
    if (value != null && !Utils.isEmpty(value)) {
      retList.add(value);
    }
  }
  return retList;
}"
81320,"/** 
 * Gets the all operations.
 * @return the all operations
 */
public List<OperationHolder> getAllOperations();","/** 
 * Gets the all wsdl operations.
 * @return the all operations
 */
public List<OperationHolder> getAllOperations();"
81321,"/** 
 * Gets the port types.
 * @return the port types
 */
public List<PortType> getPortTypes();","/** 
 * Gets all the port types defined in WSDL.
 * @return the port types
 */
public List<PortType> getPortTypes();"
81322,"/** 
 * Gets the package name.
 * @return the package name
 */
public String getPackageName();","/** 
 * Gets the package name of the WSDL. Package name is the local part of the WSDL Service URL.
 * @return the package name
 */
public String getPackageName();"
81323,"/** 
 * Gets the annotations.
 * @return the annotations
 */
public ParsedAnnotationInfo getAnnotations();","/** 
 * Gets the annotations on the WSDL. Typically returns the annotation defined on the service element.
 * @return the annotations
 */
public ParsedAnnotationInfo getAnnotations();"
81324,"/** 
 * Gets the complete remote path.
 * @return the complete remote path
 */
public String getCompleteRemotePath();","/** 
 * Gets the complete remote address of the service endpoint.
 * @return the complete remote path
 */
public String getCompleteRemotePath();"
81325,"private Node getTypesInTree(List<XSDDocInterface> wsdlDoc){
  List<ComplexType> complexTypes=new ArrayList<ComplexType>();
  for (  XSDDocInterface xsdDocument : wsdlDoc) {
    if (xsdDocument.getAllComplexTypes() != null) {
      complexTypes.addAll(xsdDocument.getAllComplexTypes());
    }
  }
  Node root=new Node();
  root.setName(""String_Node_Str"");
  root.setLevel(0);
  for (  ComplexType type : complexTypes) {
    Node node=new Node();
    node.setName(type.getPackageName() + ""String_Node_Str"" + type.getName());
    node.setOriginalParent(type.getPackageName() + ""String_Node_Str"" + type.getParentType());
    getParent(root,node,type.getPackageName() + ""String_Node_Str"" + type.getParentType());
    if (!node.isNodeAdded()) {
      if (root.getChildren() == null) {
        root.setChildren(new TreeSet<Node>());
      }
      node.setParent(root);
      node.setLevel(root.getLevel() + 1);
      root.getChildren().add(node);
    }
    normalizeTree(type,root,node);
  }
  return root;
}","private Node getTypesInTree(List<XSDDocInterface> wsdlDoc){
  List<ComplexType> complexTypes=new ArrayList<ComplexType>();
  for (  XSDDocInterface xsdDocument : wsdlDoc) {
    if (xsdDocument.getAllComplexTypes() != null) {
      complexTypes.addAll(xsdDocument.getAllComplexTypes());
    }
  }
  Node root=new Node();
  root.setName(""String_Node_Str"");
  root.setLevel(0);
  for (  ComplexType type : complexTypes) {
    Node node=new Node();
    String packageName=type.getPackageName();
    if (packageName == null) {
      packageName=""String_Node_Str"";
    }
    node.setName(packageName + ""String_Node_Str"" + type.getName());
    node.setOriginalParent(packageName + ""String_Node_Str"" + type.getParentType());
    getParent(root,node,packageName + ""String_Node_Str"" + type.getParentType());
    if (!node.isNodeAdded()) {
      if (root.getChildren() == null) {
        root.setChildren(new TreeSet<Node>());
      }
      node.setParent(root);
      node.setLevel(root.getLevel() + 1);
      root.getChildren().add(node);
    }
    normalizeTree(type,root,node);
  }
  return root;
}"
81326,"private void printToFileIfApplicable(Object doc,OutputGenaratorParam outputGenaratorParam,String fileName) throws WsdlDocException {
  if (outputGenaratorParam.getParameters() != null) {
    if (outputGenaratorParam.getParameters().get(""String_Node_Str"") != null && ""String_Node_Str"".equals(outputGenaratorParam.getParameters().get(""String_Node_Str""))) {
      String outFile=outputGenaratorParam.getParameters().get(""String_Node_Str"");
      if (outFile != null) {
        try {
          writeFile(doc.toString(),outFile,fileName);
        }
 catch (        IOException e) {
          throw new WsdlDocException(e);
        }
      }
    }
  }
}","private void printToFileIfApplicable(Object doc,OutputGenaratorParam outputGenaratorParam,String fileName) throws WsdlDocException {
  if (outputGenaratorParam.getParameters() != null) {
    if (outputGenaratorParam.getParameters().get(""String_Node_Str"") != null && ""String_Node_Str"".equals(outputGenaratorParam.getParameters().get(""String_Node_Str""))) {
      String outFile=outputGenaratorParam.getOutputDir();
      if (outFile != null) {
        try {
          writeFile(doc.toString(),outFile,fileName);
        }
 catch (        IOException e) {
          throw new WsdlDocException(e);
        }
      }
    }
  }
}"
81327,"/** 
 * Creates the all classes file.
 */
private void createAllClassesFile(){
  Set<String> set=packageServicesMap.keySet();
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.ALL_CLASSES,null));
  html.append(Constants.HTML_BOLD_START + Constants.ALL_CLASSES + Constants.HTML_BOLD_END+ Constants.HTML_BR);
  for (  String packageName : set) {
    List<String> list=packageServicesMap.get(packageName);
    for (    String className : list) {
      html.append(HtmlUtils.getAnchorTag(className,""String_Node_Str"" + SEPARATOR + packageName+ SEPARATOR+ className+ Constants.DOT_HTML,null,className,Constants.CLASSFRAME,null) + Constants.HTML_BR);
    }
  }
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.ALLCLASSES + Constants.DOT_HTML);
}","/** 
 * Creates the all classes file.
 * @throws OutputFormatterException 
 */
private void createAllClassesFile() throws OutputFormatterException {
  Set<String> set=packageServicesMap.keySet();
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.ALL_CLASSES,null));
  html.append(Constants.HTML_BOLD_START + Constants.ALL_CLASSES + Constants.HTML_BOLD_END+ Constants.HTML_BR);
  for (  String packageName : set) {
    List<String> list=packageServicesMap.get(packageName);
    for (    String className : list) {
      html.append(HtmlUtils.getAnchorTag(className,""String_Node_Str"" + SEPARATOR + packageName+ SEPARATOR+ className+ Constants.DOT_HTML,null,className,Constants.CLASSFRAME,null) + Constants.HTML_BR);
    }
  }
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.ALLCLASSES + Constants.DOT_HTML);
}"
81328,"public void generateWsdlOutput(WSDLDocInterface wsdlDoc,OutputGenaratorParam outputGenaratorParam){
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
  String packageName=wsdlDoc.getPackageName();
  this.outputGenaratorParam=outputGenaratorParam;
  if (packageName == null) {
    packageName=""String_Node_Str"";
  }
  currentTypesFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  writeCssFiles();
  logger.logp(Level.INFO,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<PortType> portTypes=wsdlDoc.getPortTypes();
  for (  PortType portType : portTypes) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(wsdlDoc.getServiceName(),packageName));
    buildHeader(html);
    html.append(Constants.HTML_BR);
    buildPortType(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationTable(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationDetails(html,portType,wsdlDoc);
    addFooter(html);
    html.append(HtmlUtils.getEndTags());
    String outputDir=getCurrentOutputDir() + File.separator;
    writeFile(html,outputDir + File.separator + packageName,wsdlDoc.getServiceName() + Constants.DOT_HTML);
  }
  addPackageToServiceMap(packageName,wsdlDoc.getServiceName());
  processedTypes=new ArrayList<AbstractType>();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
}","public void generateWsdlOutput(WSDLDocInterface wsdlDoc,OutputGenaratorParam outputGenaratorParam) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
  String packageName=wsdlDoc.getPackageName();
  this.outputGenaratorParam=outputGenaratorParam;
  if (packageName == null) {
    packageName=""String_Node_Str"";
  }
  currentTypesFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  writeCssFiles();
  logger.logp(Level.INFO,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<PortType> portTypes=wsdlDoc.getPortTypes();
  for (  PortType portType : portTypes) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(wsdlDoc.getServiceName(),packageName));
    buildHeader(html);
    html.append(Constants.HTML_BR);
    buildPortType(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationTable(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationDetails(html,portType,wsdlDoc);
    addFooter(html);
    html.append(HtmlUtils.getEndTags());
    String outputDir=getCurrentOutputDir() + File.separator;
    writeFile(html,outputDir + File.separator + packageName,wsdlDoc.getServiceName() + Constants.DOT_HTML);
  }
  addPackageToServiceMap(packageName,wsdlDoc.getServiceName());
  processedTypes=new ArrayList<AbstractType>();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
}"
81329,"/** 
 * Write css files.
 */
private void writeCssFiles(){
  InputStream is=this.getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
  try {
    BufferedReader br=new BufferedReader(new InputStreamReader(is));
    StringBuffer sb=new StringBuffer();
    String line=""String_Node_Str"";
    while ((line=br.readLine()) != null) {
      sb.append(line);
    }
    String outputDir=getCurrentOutputDir();
    writeFile(sb,outputDir + File.separator + ""String_Node_Str"",""String_Node_Str"");
    if (Context.getContext().getCssFilePath() != null) {
      sb=new StringBuffer();
      while ((line=br.readLine()) != null) {
        sb.append(line);
      }
      writeFile(sb,outputDir + File.separator + ""String_Node_Str"",""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    logger.severe(e.getMessage());
  }
}","/** 
 * Write css files.
 * @throws OutputFormatterException 
 */
private void writeCssFiles() throws OutputFormatterException {
  InputStream is=this.getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
  try {
    BufferedReader br=new BufferedReader(new InputStreamReader(is));
    StringBuffer sb=new StringBuffer();
    String line=""String_Node_Str"";
    while ((line=br.readLine()) != null) {
      sb.append(line);
    }
    String outputDir=getCurrentOutputDir();
    writeFile(sb,outputDir + File.separator + ""String_Node_Str"",""String_Node_Str"");
    if (Context.getContext().getCssFilePath() != null) {
      sb=new StringBuffer();
      while ((line=br.readLine()) != null) {
        sb.append(line);
      }
      writeFile(sb,outputDir + File.separator + ""String_Node_Str"",""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    logger.severe(e.getMessage());
  }
}"
81330,"public void completeProcessing(){
  if (packageServicesMap != null && !packageServicesMap.isEmpty()) {
    createAllPackagesFile();
    createAllPackagesDescriptionFile();
    createIndividualPackageFiles();
    createAllClassesFile();
    createIndexFile();
  }
}","public void completeProcessing() throws OutputFormatterException {
  if (packageServicesMap != null && !packageServicesMap.isEmpty()) {
    createAllPackagesFile();
    createAllPackagesDescriptionFile();
    createIndividualPackageFiles();
    createAllClassesFile();
    createIndexFile();
  }
}"
81331,"/** 
 * Creates the index file.
 */
private void createIndexFile(){
  StringBuffer html=new StringBuffer(200);
  html.append(""String_Node_Str"");
  html.append(""String_Node_Str"");
  html.append(""String_Node_Str"" + Constants.PACKAGES.toLowerCase() + Constants.DOT_HTML+ ""String_Node_Str"");
  html.append(""String_Node_Str"" + Constants.ALLCLASSES.toLowerCase() + Constants.DOT_HTML+ ""String_Node_Str""+ Constants.CLASSESFRAME+ ""String_Node_Str"");
  html.append(""String_Node_Str"");
  html.append(""String_Node_Str"" + Constants.PACKAGES.toLowerCase() + Constants.INDEX+ Constants.DOT_HTML+ ""String_Node_Str""+ Constants.CLASSFRAME+ ""String_Node_Str"");
  html.append(""String_Node_Str"");
  writeFile(html,getCurrentOutputDir(),Constants.INDEX + Constants.DOT_HTML);
}","/** 
 * Creates the index file.
 * @throws OutputFormatterException 
 */
private void createIndexFile() throws OutputFormatterException {
  StringBuffer html=new StringBuffer(200);
  html.append(""String_Node_Str"");
  html.append(""String_Node_Str"");
  html.append(""String_Node_Str"" + Constants.PACKAGES.toLowerCase() + Constants.DOT_HTML+ ""String_Node_Str"");
  html.append(""String_Node_Str"" + Constants.ALLCLASSES.toLowerCase() + Constants.DOT_HTML+ ""String_Node_Str""+ Constants.CLASSESFRAME+ ""String_Node_Str"");
  html.append(""String_Node_Str"");
  html.append(""String_Node_Str"" + Constants.PACKAGES.toLowerCase() + Constants.INDEX+ Constants.DOT_HTML+ ""String_Node_Str""+ Constants.CLASSFRAME+ ""String_Node_Str"");
  html.append(""String_Node_Str"");
  writeFile(html,getCurrentOutputDir(),Constants.INDEX + Constants.DOT_HTML);
}"
81332,"/** 
 * Creates the all packages file.
 */
private void createAllPackagesFile(){
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.PACKAGES,null));
  Set<String> set=packageServicesMap.keySet();
  html.append(Constants.HTML_BOLD_START + Constants.PACKAGES + Constants.HTML_BOLD_END+ Constants.HTML_BR);
  for (  String packageName : set) {
    html.append(HtmlUtils.getAnchorTag(packageName,""String_Node_Str"" + SEPARATOR + packageName+ SEPARATOR+ Constants.ALLCLASSES+ Constants.DOT_HTML,null,packageName,Constants.CLASSESFRAME,null) + Constants.HTML_BR);
  }
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.PACKAGES.toLowerCase() + Constants.DOT_HTML);
}","/** 
 * Creates the all packages file.
 * @throws OutputFormatterException 
 */
private void createAllPackagesFile() throws OutputFormatterException {
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.PACKAGES,null));
  Set<String> set=packageServicesMap.keySet();
  html.append(Constants.HTML_BOLD_START + Constants.PACKAGES + Constants.HTML_BOLD_END+ Constants.HTML_BR);
  for (  String packageName : set) {
    html.append(HtmlUtils.getAnchorTag(packageName,""String_Node_Str"" + SEPARATOR + packageName+ SEPARATOR+ Constants.ALLCLASSES+ Constants.DOT_HTML,null,packageName,Constants.CLASSESFRAME,null) + Constants.HTML_BR);
  }
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.PACKAGES.toLowerCase() + Constants.DOT_HTML);
}"
81333,"/** 
 * Creates the all packages description file.
 */
private void createAllPackagesDescriptionFile(){
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.ALL_CLASSES,null));
  html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_BR);
  addFooter(html);
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.PACKAGES.toLowerCase() + Constants.INDEX + Constants.DOT_HTML);
}","/** 
 * Creates the all packages description file.
 * @throws OutputFormatterException 
 */
private void createAllPackagesDescriptionFile() throws OutputFormatterException {
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.ALL_CLASSES,null));
  html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_BR);
  addFooter(html);
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.PACKAGES.toLowerCase() + Constants.INDEX + Constants.DOT_HTML);
}"
81334,"/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath){
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,doc.getPackageName() + File.separator + ""String_Node_Str""));
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    for (    Element element : elements) {
      if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
        isRecursive=true;
      }
      String nodePath=parentPath + ""String_Node_Str"" + element.getName();
      String typeCName=getCTypeTypeName(element.getType());
      if (type.getName().equalsIgnoreCase(typeCName)) {
        isRecursive=true;
      }
      if (doc.searchCType(typeCName) != null && !isRecursive) {
        writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
        html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
      }
 else       if (doc.searchSimpleType(typeCName) != null) {
        writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
        html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
      }
 else {
        html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
      }
      if (element.getAnnotationInfo().getDocumentation() != null) {
        html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
      }
      processDefaultsAndBoundries(html,doc,element);
      deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
      if (deprDet != null) {
        html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
        html.append(deprDet);
      }
      processRelatedInfo(html,doc,element.getAnnotationInfo());
      html.append(Constants.HTML_HR + Constants.HTML_BR);
    }
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException 
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,doc.getPackageName() + File.separator + ""String_Node_Str""));
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    for (    Element element : elements) {
      if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
        isRecursive=true;
      }
      String nodePath=parentPath + ""String_Node_Str"" + element.getName();
      String typeCName=getCTypeTypeName(element.getType());
      if (type.getName().equalsIgnoreCase(typeCName)) {
        isRecursive=true;
      }
      if (doc.searchCType(typeCName) != null && !isRecursive) {
        writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
        html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
      }
 else       if (doc.searchSimpleType(typeCName) != null) {
        writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
        html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
      }
 else {
        html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
      }
      if (element.getAnnotationInfo().getDocumentation() != null) {
        html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
      }
      processDefaultsAndBoundries(html,doc,element);
      deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
      if (deprDet != null) {
        html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
        html.append(deprDet);
      }
      processRelatedInfo(html,doc,element.getAnnotationInfo());
      html.append(Constants.HTML_HR + Constants.HTML_BR);
    }
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
81335,"/** 
 * Write file.
 * @param html the html
 * @param dir the dir
 * @param fileName the file name
 */
private void writeFile(StringBuffer html,String dir,String fileName){
  try {
    File file=new File(dir);
    file.mkdirs();
    FileWriter fw=new FileWriter(dir + File.separator + fileName);
    fw.write(html.toString());
    fw.flush();
    fw.close();
  }
 catch (  IOException e) {
    new OutputFormatterException(e);
  }
}","/** 
 * Write file.
 * @param html the html
 * @param dir the dir
 * @param fileName the file name
 * @throws OutputFormatterException 
 */
private void writeFile(StringBuffer html,String dir,String fileName) throws OutputFormatterException {
  try {
    File file=new File(dir);
    file.mkdirs();
    FileWriter fw=new FileWriter(dir + File.separator + fileName);
    fw.write(html.toString());
    fw.flush();
    fw.close();
  }
 catch (  IOException e) {
    throw new OutputFormatterException(e);
  }
}"
81336,"/** 
 * Creates the individual package files.
 */
private void createIndividualPackageFiles(){
  Set<String> set=packageServicesMap.keySet();
  for (  String packageName : set) {
    List<String> list=packageServicesMap.get(packageName);
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(Constants.CLASSES,packageName));
    html.append(Constants.HTML_BOLD_START + Constants.CLASSES + Constants.HTML_BOLD_END+ Constants.HTML_BR);
    for (    String className : list) {
      html.append(HtmlUtils.getAnchorTag(className,className + Constants.DOT_HTML,null,className,Constants.CLASSFRAME,null) + Constants.HTML_BR);
    }
    html.append(HtmlUtils.getEndTags());
    writeFile(html,getCurrentOutputDir() + packageName,Constants.ALLCLASSES + Constants.DOT_HTML);
  }
}","/** 
 * Creates the individual package files.
 * @throws OutputFormatterException 
 */
private void createIndividualPackageFiles() throws OutputFormatterException {
  Set<String> set=packageServicesMap.keySet();
  for (  String packageName : set) {
    List<String> list=packageServicesMap.get(packageName);
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(Constants.CLASSES,packageName));
    html.append(Constants.HTML_BOLD_START + Constants.CLASSES + Constants.HTML_BOLD_END+ Constants.HTML_BR);
    for (    String className : list) {
      html.append(HtmlUtils.getAnchorTag(className,className + Constants.DOT_HTML,null,className,Constants.CLASSFRAME,null) + Constants.HTML_BR);
    }
    html.append(HtmlUtils.getEndTags());
    writeFile(html,getCurrentOutputDir() + packageName,Constants.ALLCLASSES + Constants.DOT_HTML);
  }
}"
81337,"/** 
 * Builds the operation details.
 * @param html the html
 * @param portType the port type
 * @param serviceName the service name
 */
private void buildOperationDetails(StringBuffer html,PortType portType,WSDLDocInterface doc){
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{html,portType});
  html.append(HtmlUtils.getAnchorTag(Constants.OPERATIONS_DETAIL_HREF,null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(Constants.OPERATION_DETAIL_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(Constants.HTML_TABLE_END);
  for (  OperationHolder opH : portType.getOperations()) {
    html.append(HtmlUtils.getAnchorTag(opH.getName(),null,null,null));
    html.append(getTextInDiv(opH.getName(),""String_Node_Str""));
    html.append(""String_Node_Str"");
    setOutputTypes(html,opH,doc);
    html.append(""String_Node_Str"" + getTextInSpan(opH.getName(),""String_Node_Str"") + ""String_Node_Str"");
    setInputTypes(html,opH,doc);
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_PRE_END);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    appendOperationDocumentation(html,doc,opH);
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    html.append(Constants.HTML_HR);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{html,portType});
}","/** 
 * Builds the operation details.
 * @param html the html
 * @param portType the port type
 * @param serviceName the service name
 * @throws OutputFormatterException 
 */
private void buildOperationDetails(StringBuffer html,PortType portType,WSDLDocInterface doc) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{html,portType});
  html.append(HtmlUtils.getAnchorTag(Constants.OPERATIONS_DETAIL_HREF,null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(Constants.OPERATION_DETAIL_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(Constants.HTML_TABLE_END);
  for (  OperationHolder opH : portType.getOperations()) {
    html.append(HtmlUtils.getAnchorTag(opH.getName(),null,null,null));
    html.append(getTextInDiv(opH.getName(),""String_Node_Str""));
    html.append(""String_Node_Str"");
    setOutputTypes(html,opH,doc);
    html.append(""String_Node_Str"" + getTextInSpan(opH.getName(),""String_Node_Str"") + ""String_Node_Str"");
    setInputTypes(html,opH,doc);
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_PRE_END);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    appendOperationDocumentation(html,doc,opH);
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    html.append(Constants.HTML_HR);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{html,portType});
}"
81338,"/** 
 * Write simple type file.
 * @param doc the doc
 * @param type the type
 */
private void writeSimpleTypeFile(WSDLDocInterface doc,SimpleType type){
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  String typeName=type.getName();
  StringBuffer html=new StringBuffer();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,doc.getPackageName() + File.separator + ""String_Node_Str""));
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    List<EnumElement> enumElements=type.getEnums();
    for (    EnumElement enumElement : enumElements) {
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(enumElement.getValue());
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      if (enumElement.getAnnotations().getDocumentation() != null) {
        html.append(enumElement.getAnnotations().getDocumentation());
      }
      deprDet=AnnotationsHelper.processDeprication(enumElement.getAnnotations());
      if (deprDet != null) {
        html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
        html.append(deprDet);
      }
      processRelatedInfo(html,doc,enumElement.getAnnotations());
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(Constants.HTML_TABLE_TR_END);
    }
    html.append(Constants.HTML_TABLE_END);
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Write simple type file.
 * @param doc the doc
 * @param type the type
 * @throws OutputFormatterException 
 */
private void writeSimpleTypeFile(WSDLDocInterface doc,SimpleType type) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  String typeName=type.getName();
  StringBuffer html=new StringBuffer();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,doc.getPackageName() + File.separator + ""String_Node_Str""));
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    List<EnumElement> enumElements=type.getEnums();
    for (    EnumElement enumElement : enumElements) {
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      html.append(enumElement.getValue());
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(getTableDataTagWithStyle(""String_Node_Str""));
      if (enumElement.getAnnotations().getDocumentation() != null) {
        html.append(enumElement.getAnnotations().getDocumentation());
      }
      deprDet=AnnotationsHelper.processDeprication(enumElement.getAnnotations());
      if (deprDet != null) {
        html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
        html.append(deprDet);
      }
      processRelatedInfo(html,doc,enumElement.getAnnotations());
      html.append(Constants.HTML_TABLE_TD_END);
      html.append(Constants.HTML_TABLE_TR_END);
    }
    html.append(Constants.HTML_TABLE_END);
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
81339,"public void generateWsdlOutput(WSDLDocInterface wsdlDoc,OutputGenaratorParam outputGenaratorParam) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
  String packageName=wsdlDoc.getPackageName();
  if (packageName != null && packageName.startsWith(""String_Node_Str"")) {
    packageName=packageName.substring(1);
  }
  this.outputGenaratorParam=outputGenaratorParam;
  if (packageName == null) {
    packageName=""String_Node_Str"";
  }
  currentTypesFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  writeCssFiles();
  logger.logp(Level.INFO,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<PortType> portTypes=wsdlDoc.getPortTypes();
  for (  PortType portType : portTypes) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(wsdlDoc.getServiceName(),packageName));
    buildHeader(html,wsdlDoc.getPackageName());
    html.append(Constants.HTML_BR);
    buildPortType(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationTable(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationDetails(html,portType,wsdlDoc);
    addFooter(html);
    html.append(HtmlUtils.getEndTags());
    String outputDir=getCurrentOutputDir() + File.separator;
    writeFile(html,outputDir + File.separator + packageName,wsdlDoc.getServiceName() + Constants.DOT_HTML);
  }
  writePackageTree(wsdlDoc);
  addPackageToServiceMap(packageName,wsdlDoc.getServiceName());
  processedTypes=new ArrayList<AbstractType>();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
}","public void generateWsdlOutput(WSDLDocInterface wsdlDoc,OutputGenaratorParam outputGenaratorParam) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
  String packageName=wsdlDoc.getPackageName();
  this.outputGenaratorParam=outputGenaratorParam;
  if (packageName == null) {
    packageName=""String_Node_Str"";
  }
  currentPackageName=packageName;
  currentTypesFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  writeCssFiles();
  logger.logp(Level.INFO,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<PortType> portTypes=wsdlDoc.getPortTypes();
  for (  PortType portType : portTypes) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(wsdlDoc.getServiceName(),packageName));
    buildHeader(html);
    html.append(Constants.HTML_BR);
    buildPortType(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationTable(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationDetails(html,portType,wsdlDoc);
    addFooter(html);
    html.append(HtmlUtils.getEndTags());
    String outputDir=getCurrentOutputDir() + File.separator;
    writeFile(html,outputDir + File.separator + packageName,wsdlDoc.getServiceName() + Constants.DOT_HTML);
  }
  writePackageTree(wsdlDoc);
  addPackageToServiceMap(packageName,wsdlDoc.getServiceName());
  processedTypes=new ArrayList<AbstractType>();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
}"
81340,"/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,doc.getPackageName() + File.separator + ""String_Node_Str""));
    buildTypeHeader(html,doc.getPackageName());
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    buildFieldSummary(html,doc,type);
    html.append(Constants.HTML_HR);
    html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    if (elements.isEmpty()) {
      html.append(type.getName() + ""String_Node_Str"");
      html.append(Constants.HTML_TABLE_END);
    }
 else {
      html.append(Constants.HTML_BR + Constants.HTML_BR);
      for (      Element element : elements) {
        if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
          isRecursive=true;
        }
        String nodePath=parentPath + ""String_Node_Str"" + element.getName();
        String typeCName=getCTypeTypeName(element.getType());
        if (type.getName().equalsIgnoreCase(typeCName)) {
          isRecursive=true;
        }
        html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
        if (doc.searchCType(typeCName) != null && !isRecursive) {
          writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else         if (doc.searchSimpleType(typeCName) != null) {
          writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else {
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
        }
        if (element.getAnnotationInfo().getDocumentation() != null) {
          html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
        }
        processDefaultsAndBoundries(html,doc,element);
        deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,element.getAnnotationInfo());
        html.append(Constants.HTML_HR + Constants.HTML_BR);
      }
    }
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + File.separator + ""String_Node_Str""));
    buildTypeHeader(html);
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    buildFieldSummary(html,doc,type);
    html.append(Constants.HTML_HR);
    html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    if (elements.isEmpty()) {
      html.append(type.getName() + ""String_Node_Str"");
      html.append(Constants.HTML_TABLE_END);
    }
 else {
      html.append(Constants.HTML_BR + Constants.HTML_BR);
      for (      Element element : elements) {
        if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
          isRecursive=true;
        }
        String nodePath=parentPath + ""String_Node_Str"" + element.getName();
        String typeCName=getCTypeTypeName(element.getType());
        if (type.getName().equalsIgnoreCase(typeCName)) {
          isRecursive=true;
        }
        html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
        if (doc.searchCType(typeCName) != null && !isRecursive) {
          writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else         if (doc.searchSimpleType(typeCName) != null) {
          writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else {
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
        }
        if (element.getAnnotationInfo().getDocumentation() != null) {
          html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
        }
        processDefaultsAndBoundries(html,doc,element);
        deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,element.getAnnotationInfo());
        html.append(Constants.HTML_HR + Constants.HTML_BR);
      }
    }
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
81341,"/** 
 * Builds the header.
 * @param html the html
 */
private void buildHeader(StringBuffer html,String packageName){
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  int count=packageName.replaceAll(""String_Node_Str"",""String_Node_Str"").length();
  String str=""String_Node_Str"";
  for (int i=0; i < count; i++) {
    str+=""String_Node_Str"";
  }
  html.append(HtmlUtils.getAnchorTag(null,str + ""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str""));
  html.append(Constants.HTML_HR);
  html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + Constants.OPERATION_SUMMARY_HREF,Constants.OPERATIONS_LABEL,Constants.OPERATIONS_LABEL));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + Constants.OPERATIONS_DETAIL_HREF,Constants.OPERATIONS_LABEL,Constants.OPERATIONS_LABEL));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(Constants.HTML_TABLE_END);
  html.append(Constants.HTML_HR);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Builds the header.
 * @param html the html
 */
private void buildHeader(StringBuffer html){
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  String relPath=""String_Node_Str"";
  if (currentPackageName != null) {
    String[] folders=currentPackageName.split(""String_Node_Str"");
    for (    String folder : folders) {
      relPath=relPath + ""String_Node_Str"";
    }
  }
  html.append(HtmlUtils.getAnchorTag(null,relPath + ""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str""));
  html.append(Constants.HTML_HR);
  html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + Constants.OPERATION_SUMMARY_HREF,Constants.OPERATIONS_LABEL,Constants.OPERATIONS_LABEL));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + Constants.OPERATIONS_DETAIL_HREF,Constants.OPERATIONS_LABEL,Constants.OPERATIONS_LABEL));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(Constants.HTML_TABLE_END);
  html.append(Constants.HTML_HR);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
81342,"/** 
 * Write simple type file.
 * @param doc the doc
 * @param type the type
 * @throws OutputFormatterException
 */
private void writeSimpleTypeFile(WSDLDocInterface doc,SimpleType type) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  String typeName=type.getName();
  StringBuffer html=new StringBuffer();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,doc.getPackageName() + File.separator + ""String_Node_Str""));
    String parentType=type.getBase();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      typeName=typeName + ""String_Node_Str"" + parentType+ ""String_Node_Str"";
    }
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    List<EnumElement> enumElements=type.getEnums();
    if (enumElements != null && !enumElements.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      EnumElement enumElement : enumElements) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(enumElement.getValue());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        if (enumElement.getAnnotations().getDocumentation() != null) {
          html.append(enumElement.getAnnotations().getDocumentation());
        }
        deprDet=AnnotationsHelper.processDeprication(enumElement.getAnnotations());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,enumElement.getAnnotations());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
      html.append(Constants.HTML_TABLE_END);
    }
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Write simple type file.
 * @param doc the doc
 * @param type the type
 * @throws OutputFormatterException
 */
private void writeSimpleTypeFile(WSDLDocInterface doc,SimpleType type) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  String typeName=type.getName();
  StringBuffer html=new StringBuffer();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + File.separator + ""String_Node_Str""));
    String parentType=type.getBase();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      typeName=typeName + ""String_Node_Str"" + parentType+ ""String_Node_Str"";
    }
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    List<EnumElement> enumElements=type.getEnums();
    if (enumElements != null && !enumElements.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      EnumElement enumElement : enumElements) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(enumElement.getValue());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        if (enumElement.getAnnotations().getDocumentation() != null) {
          html.append(enumElement.getAnnotations().getDocumentation());
        }
        deprDet=AnnotationsHelper.processDeprication(enumElement.getAnnotations());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,enumElement.getAnnotations());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
      html.append(Constants.HTML_TABLE_END);
    }
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
81343,"/** 
 * Builds the header for Types.
 * @param html the html
 */
private void buildTypeHeader(StringBuffer html,String packageName){
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  int count=packageName.replaceAll(""String_Node_Str"",""String_Node_Str"").length();
  String str=""String_Node_Str"";
  for (int i=0; i < count + 1; i++) {
    str+=""String_Node_Str"";
  }
  html.append(HtmlUtils.getAnchorTag(null,str + ""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str""));
  html.append(Constants.HTML_HR);
  html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(Constants.HTML_TABLE_END);
  html.append(Constants.HTML_HR);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Builds the header for Types.
 * @param html the html
 */
private void buildTypeHeader(StringBuffer html){
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  String relPath=""String_Node_Str"";
  String[] folders=currentPackageName.split(""String_Node_Str"");
  for (  String folder : folders) {
    relPath=relPath + ""String_Node_Str"";
  }
  relPath=relPath + ""String_Node_Str"";
  html.append(HtmlUtils.getAnchorTag(null,relPath + ""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str""));
  html.append(Constants.HTML_HR);
  html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(Constants.HTML_TABLE_END);
  html.append(Constants.HTML_HR);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
81344,"/** 
 * Gets the start tags.
 * @param title the title
 * @param currLocFromBase the curr loc from base
 * @return the start tags
 */
public static String getStartTags(String title,String currLocFromBase){
  List<String> cssList=new ArrayList<String>();
  cssList.add(""String_Node_Str"");
  if (Context.getContext().getCssFilePath() != null && !Utils.isEmpty(Context.getContext().getCssFilePath())) {
    cssList.add(""String_Node_Str"");
  }
  String relPath=""String_Node_Str"";
  if (currLocFromBase != null) {
    String[] folders=currLocFromBase.split(""String_Node_Str"");
    for (    String folder : folders) {
      relPath=relPath + ""String_Node_Str"";
    }
  }
  String tag=""String_Node_Str"" + title + ""String_Node_Str"";
  for (  String css : cssList) {
    tag+=""String_Node_Str"" + relPath + ""String_Node_Str""+ css+ ""String_Node_Str"";
  }
  tag+=""String_Node_Str"";
  return tag;
}","/** 
 * Gets the start tags.
 * @param title the title
 * @param currLocFromBase the curr loc from base
 * @return the start tags
 */
public static String getStartTags(String title,String currLocFromBase){
  List<String> cssList=new ArrayList<String>();
  cssList.add(""String_Node_Str"");
  if (Context.getContext().getCssFilePath() != null && !Utils.isEmpty(Context.getContext().getCssFilePath())) {
    cssList.add(""String_Node_Str"");
  }
  String relPath=""String_Node_Str"";
  if (currLocFromBase != null && ""String_Node_Str"".equals(currLocFromBase)) {
    System.out.println(currLocFromBase);
  }
  if (currLocFromBase != null) {
    String[] folders=currLocFromBase.split(""String_Node_Str"");
    for (    String folder : folders) {
      relPath=relPath + ""String_Node_Str"";
    }
  }
  String tag=""String_Node_Str"" + title + ""String_Node_Str"";
  for (  String css : cssList) {
    tag+=""String_Node_Str"" + relPath + ""String_Node_Str""+ css+ ""String_Node_Str"";
  }
  tag+=""String_Node_Str"";
  return tag;
}"
81345,"/** 
 * Gets the operation documentation.
 * @param wsdlDoc the wsdl doc
 * @param holder the holder
 * @return the operation documentation
 */
private void appendOperationDocumentation(StringBuffer html,WSDLDocInterface wsdlDoc,OperationHolder holder){
  if (holder != null) {
    String documentation=null;
    if (holder.getAnnotations() != null) {
      documentation=holder.getAnnotations().getDocumentation();
    }
    List<Element> inputs=holder.getInputTypes();
    for (    Element elem : inputs) {
      String type=elem.getType();
      ComplexType ctype=wsdlDoc.searchCType(type);
      ParsedAnnotationInfo annotationInfo=ctype.getAnnotations();
      if (annotationInfo != null) {
        if (Utils.isEmpty(documentation)) {
          documentation=annotationInfo.getDocumentation();
          if (documentation != null) {
            html.append(getTextInSpan(documentation,""String_Node_Str""));
          }
        }
        StringBuffer deprDet=AnnotationsHelper.processDeprication(annotationInfo);
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,wsdlDoc,annotationInfo);
      }
    }
  }
}","/** 
 * Gets the operation documentation.
 * @param wsdlDoc the wsdl doc
 * @param holder the holder
 * @return the operation documentation
 */
private void appendOperationDocumentation(StringBuffer html,WSDLDocInterface wsdlDoc,OperationHolder holder){
  if (holder != null) {
    String documentation=null;
    if (holder.getAnnotations() != null) {
      documentation=holder.getAnnotations().getDocumentation();
      if (holder.getAnnotations().getDocumentation() != null) {
        html.append(getTextInSpan(documentation,""String_Node_Str"") + Constants.HTML_BR);
      }
    }
    List<Element> inputs=holder.getInputTypes();
    for (    Element elem : inputs) {
      String type=elem.getType();
      ComplexType ctype=wsdlDoc.searchCType(type);
      ParsedAnnotationInfo annotationInfo=ctype.getAnnotations();
      if (annotationInfo != null) {
        Map<String,List<ParsedAnnotationTag>> tagList=annotationInfo.getValue();
        if (tagList != null) {
          List<ParsedAnnotationTag> summaryTag=(List<ParsedAnnotationTag>)tagList.get(""String_Node_Str"");
          if (summaryTag != null) {
            String summary=summaryTag.get(0).getTagValue();
            html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
            html.append(getTextInSpan(summary,""String_Node_Str"") + Constants.HTML_BR + Constants.HTML_BR);
          }
        }
        documentation=annotationInfo.getDocumentation();
        if (documentation != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(getTextInSpan(documentation,""String_Node_Str"") + Constants.HTML_BR);
        }
      }
    }
    List<Element> outputs=holder.getOutputTypes();
    for (    Element opElem : outputs) {
      String opType=opElem.getType();
      ComplexType opCtype=wsdlDoc.searchCType(opType);
      ParsedAnnotationInfo opannotationInfo=opCtype.getAnnotations();
      if (opannotationInfo != null) {
        String opDocumentation=opannotationInfo.getDocumentation();
        if (opDocumentation != null) {
          html.append(Constants.HTML_BR + getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(getTextInSpan(opDocumentation,""String_Node_Str"") + Constants.HTML_BR);
        }
      }
    }
    for (    Element elem : inputs) {
      String type=elem.getType();
      ComplexType ctype=wsdlDoc.searchCType(type);
      ParsedAnnotationInfo annotationInfo=ctype.getAnnotations();
      if (annotationInfo != null) {
        StringBuffer deprDet=AnnotationsHelper.processDeprication(annotationInfo);
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,wsdlDoc,annotationInfo);
      }
    }
  }
}"
81346,"/** 
 * Gets the next sibling ignoring empty white-space nodes.
 * @param node the node
 * @return the next sibling
 */
private Node getNextSibling(Node node){
  Node sib=node.getNextSibling();
  if (sib != null && sib.getNodeType() == Node.TEXT_NODE) {
    String value=sib.getTextContent();
    if (value != null) {
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (Utils.isEmpty(value)) {
        sib=getNextSibling(sib);
      }
    }
  }
  logger.log(Level.INFO,""String_Node_Str"",sib);
  return sib;
}","/** 
 * Gets the next sibling ignoring empty white-space nodes.
 * @param node the node
 * @return the next sibling
 */
private Node getNextSibling(Node node){
  Node sib=node.getNextSibling();
  if (sib != null && Node.COMMENT_NODE == sib.getNodeType()) {
    sib=getNextSibling(sib);
  }
  if (sib != null && sib.getNodeType() == Node.TEXT_NODE) {
    String value=sib.getTextContent();
    if (value != null) {
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (Utils.isEmpty(value)) {
        sib=getNextSibling(sib);
      }
    }
  }
  logger.log(Level.INFO,""String_Node_Str"",sib);
  return sib;
}"
81347,"/** 
 * Adds the footer.
 * @param html the html
 */
private void addFooter(StringBuffer html){
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  String content=getFooterInformation();
  html.append(getTextInDiv(content,""String_Node_Str""));
  html.append(HtmlUtils.getEndTags());
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Adds the footer.
 * @param html the html
 * @throws OutputFormatterException 
 */
private void addFooter(StringBuffer html,boolean isType,boolean isComplexType,String typeName) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  String content=getFooterInformation(isType,isComplexType,typeName);
  html.append(getTextInDiv(content,""String_Node_Str""));
  html.append(HtmlUtils.getEndTags());
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
81348,"/** 
 * Gets the footer information. This method can be over ridden to supply Footer.
 * @return the footer information
 */
protected String getFooterInformation(){
  return ""String_Node_Str"";
}","/** 
 * Gets the footer information. This method can be over ridden to supply Footer.
 * @return the footer information
 * @throws OutputFormatterException 
 */
protected String getFooterInformation(boolean isType,boolean isComplex,String typeName) throws OutputFormatterException {
  String parameterName=isType ? (isComplex ? ""String_Node_Str"" : ""String_Node_Str"") : ""String_Node_Str"";
  String headerFile=outputGenaratorParam.getParameters().get(parameterName);
  if (headerFile != null) {
    try {
      String header=Utils.getFileAsString(Utils.convertToURL(headerFile).openStream()).toString();
      String version=outputGenaratorParam.getParameters().get(""String_Node_Str"");
      header=header.replaceAll(""String_Node_Str"",version);
      header=header.replaceAll(""String_Node_Str"",typeName);
      header=""String_Node_Str"" + header;
      return header;
    }
 catch (    IOException e) {
      throw new OutputFormatterException(e);
    }
  }
  return ""String_Node_Str"";
}"
81349,"public void generateWsdlOutput(WSDLDocInterface wsdlDoc,OutputGenaratorParam outputGenaratorParam) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
  String packageName=wsdlDoc.getPackageName();
  this.outputGenaratorParam=outputGenaratorParam;
  if (packageName == null) {
    packageName=""String_Node_Str"";
  }
  currentPackageName=packageName;
  currentTypesFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  writeCssFiles();
  logger.logp(Level.INFO,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<PortType> portTypes=wsdlDoc.getPortTypes();
  for (  PortType portType : portTypes) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(wsdlDoc.getServiceName(),packageName));
    buildHeader(html);
    html.append(Constants.HTML_BR);
    buildPortType(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationTable(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationDetails(html,portType,wsdlDoc);
    addFooter(html);
    html.append(HtmlUtils.getEndTags());
    String outputDir=getCurrentOutputDir() + File.separator;
    writeFile(html,outputDir + File.separator + packageName,wsdlDoc.getServiceName() + Constants.DOT_HTML);
  }
  writePackageTree(wsdlDoc);
  addPackageToServiceMap(packageName,wsdlDoc.getServiceName());
  processedTypes=new ArrayList<AbstractType>();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
}","public void generateWsdlOutput(WSDLDocInterface wsdlDoc,OutputGenaratorParam outputGenaratorParam) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
  String packageName=wsdlDoc.getPackageName();
  this.outputGenaratorParam=outputGenaratorParam;
  if (packageName == null) {
    packageName=""String_Node_Str"";
  }
  currentPackageName=packageName;
  currentTypesFolderPath=getCurrentOutputDir() + File.separator + packageName+ File.separator+ ""String_Node_Str""+ File.separator;
  writeCssFiles();
  logger.logp(Level.INFO,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<PortType> portTypes=wsdlDoc.getPortTypes();
  for (  PortType portType : portTypes) {
    StringBuffer html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(wsdlDoc.getServiceName(),packageName));
    buildHeader(html,false,false,null);
    html.append(Constants.HTML_BR);
    buildPortType(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationTable(html,portType,wsdlDoc);
    html.append(Constants.HTML_BR);
    buildOperationDetails(html,portType,wsdlDoc);
    addFooter(html,false,false,null);
    html.append(HtmlUtils.getEndTags());
    String outputDir=getCurrentOutputDir() + File.separator;
    writeFile(html,outputDir + File.separator + packageName,wsdlDoc.getServiceName() + Constants.DOT_HTML);
  }
  addPackageToDocMap(packageName,wsdlDoc);
  addPackageToServiceMap(packageName,wsdlDoc.getServiceName());
  processedTypes=new ArrayList<AbstractType>();
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{wsdlDoc,outputGenaratorParam});
}"
81350,"public void completeProcessing() throws OutputFormatterException {
  if (packageServicesMap != null && !packageServicesMap.isEmpty()) {
    createAllPackagesFile();
    createAllPackagesDescriptionFile();
    createIndividualPackageFiles();
    createAllClassesFile();
    createIndexFile();
  }
}","public void completeProcessing() throws OutputFormatterException {
  if (packageServicesMap != null && !packageServicesMap.isEmpty()) {
    createAllPackagesFile();
    createAllPackagesDescriptionFile();
    createIndividualPackageFiles();
    createAllClassesFile();
    createIndexFile();
    createTreeFiles();
  }
}"
81351,"/** 
 * Creates the all packages description file.
 * @throws OutputFormatterException
 */
private void createAllPackagesDescriptionFile() throws OutputFormatterException {
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.ALL_CLASSES,null));
  html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_BR);
  addFooter(html);
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.PACKAGES.toLowerCase() + Constants.INDEX + Constants.DOT_HTML);
}","/** 
 * Creates the all packages description file.
 * @throws OutputFormatterException
 */
private void createAllPackagesDescriptionFile() throws OutputFormatterException {
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.ALL_CLASSES,null));
  html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_BR);
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.PACKAGES.toLowerCase() + Constants.INDEX + Constants.DOT_HTML);
}"
81352,"/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + ""String_Node_Str""));
    buildTypeHeader(html);
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    buildFieldSummary(html,doc,type);
    html.append(Constants.HTML_HR);
    html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    if (elements.isEmpty()) {
      html.append(type.getName() + ""String_Node_Str"");
      html.append(Constants.HTML_TABLE_END);
    }
 else {
      html.append(Constants.HTML_BR + Constants.HTML_BR);
      for (      Element element : elements) {
        if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
          isRecursive=true;
        }
        String nodePath=parentPath + ""String_Node_Str"" + element.getName();
        String typeCName=getCTypeTypeName(element.getType());
        if (type.getName().equalsIgnoreCase(typeCName)) {
          isRecursive=true;
        }
        html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
        if (doc.searchCType(typeCName) != null && !isRecursive) {
          writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else         if (doc.searchSimpleType(typeCName) != null) {
          writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else {
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
        }
        if (element.getAnnotationInfo().getDocumentation() != null) {
          html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
        }
        processDefaultsAndBoundries(html,doc,element);
        deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,element.getAnnotationInfo());
        html.append(Constants.HTML_HR + Constants.HTML_BR);
      }
    }
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + ""String_Node_Str""));
    buildHeader(html,true,true,type.getName());
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    buildFieldSummary(html,doc,type);
    html.append(Constants.HTML_HR);
    html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    if (elements.isEmpty()) {
      html.append(type.getName() + ""String_Node_Str"");
      html.append(Constants.HTML_TABLE_END);
    }
 else {
      html.append(Constants.HTML_BR + Constants.HTML_BR);
      for (      Element element : elements) {
        if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
          isRecursive=true;
        }
        String nodePath=parentPath + ""String_Node_Str"" + element.getName();
        String typeCName=getCTypeTypeName(element.getType());
        if (type.getName().equalsIgnoreCase(typeCName)) {
          isRecursive=true;
        }
        html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
        if (doc.searchCType(typeCName) != null && !isRecursive) {
          writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else         if (doc.searchSimpleType(typeCName) != null) {
          writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else {
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
        }
        if (element.getAnnotationInfo().getDocumentation() != null) {
          html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
        }
        processDefaultsAndBoundries(html,doc,element);
        deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,element.getAnnotationInfo());
        html.append(Constants.HTML_HR + Constants.HTML_BR);
      }
    }
    addFooter(html,true,true,type.getName());
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
81353,"/** 
 * Builds the operation details.
 * @param html the html
 * @param portType the port type
 * @param serviceName the service name
 * @throws OutputFormatterException
 */
private void buildOperationDetails(StringBuffer html,PortType portType,WSDLDocInterface doc) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{html,portType});
  html.append(HtmlUtils.getAnchorTag(Constants.OPERATIONS_DETAIL_HREF,null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(Constants.OPERATION_DETAIL_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(Constants.HTML_TABLE_END);
  for (  OperationHolder opH : portType.getOperations()) {
    html.append(HtmlUtils.getAnchorTag(opH.getName(),null,null,null));
    html.append(getTextInDiv(opH.getName(),""String_Node_Str""));
    html.append(""String_Node_Str"");
    setOutputTypes(html,opH,doc);
    html.append(""String_Node_Str"" + getTextInSpan(opH.getName(),""String_Node_Str"") + ""String_Node_Str"");
    setInputTypes(html,opH,doc);
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_PRE_END);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    appendOperationDocumentation(html,doc,opH);
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    html.append(Constants.HTML_HR);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{html,portType});
}","/** 
 * Builds the operation details.
 * @param html the html
 * @param portType the port type
 * @param serviceName the service name
 * @throws OutputFormatterException
 */
private void buildOperationDetails(StringBuffer html,PortType portType,WSDLDocInterface doc) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{html,portType});
  html.append(HtmlUtils.getAnchorTag(Constants.OPERATIONS_DETAIL_HREF,null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableHeadTagWithStyle(""String_Node_Str""));
  html.append(Constants.OPERATION_DETAIL_LABEL);
  html.append(Constants.HTML_TABLE_TH_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(Constants.HTML_TABLE_END);
  for (  OperationHolder opH : portType.getOperations()) {
    html.append(HtmlUtils.getAnchorTag(opH.getName(),null,null,null));
    html.append(getTextInDiv(opH.getName(),""String_Node_Str""));
    html.append(""String_Node_Str"");
    setOutputTypes(html,opH,doc);
    html.append(""String_Node_Str"" + getTextInSpan(opH.getName(),""String_Node_Str"") + ""String_Node_Str"");
    setInputTypes(html,opH,doc);
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_PRE_END);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    appendOperationDocumentation(html,doc,opH);
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",new Object[]{html,portType});
}"
81354,"private void writePackageTree(WSDLDocInterface wsdlDoc) throws OutputFormatterException {
  Node root=getTypesInTree(wsdlDoc);
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str""));
  html.append(Constants.HTML_HR);
  html.append(Constants.HTML_H3_START + ""String_Node_Str"" + wsdlDoc.getPackageName()+ Constants.HTML_H3_END);
  html.append(Constants.HTML_HR);
  html.append(Constants.HTML_H3_START + ""String_Node_Str"" + Constants.HTML_H3_END);
  html.append(""String_Node_Str"");
  writeTree(root,html);
  html.append(""String_Node_Str"");
  writeFile(html,getCurrentOutputDir(),""String_Node_Str"" + Constants.DOT_HTML);
  System.out.println(root);
}","private void writePackageTree(List<XSDDocInterface> wsdlDoc) throws OutputFormatterException {
  Node root=getTypesInTree(wsdlDoc);
  StringBuffer html=new StringBuffer();
  html.append(Constants.HTML_H3_START + ""String_Node_Str"" + currentPackageName+ Constants.HTML_H3_END);
  html.append(Constants.HTML_HR);
  html.append(Constants.HTML_H3_START + ""String_Node_Str"" + Constants.HTML_H3_END);
  html.append(""String_Node_Str"");
  writeTree(root,html);
  html.append(""String_Node_Str"");
  writeFile(html,getCurrentOutputDir() + File.separator + currentPackageName,""String_Node_Str"" + Constants.DOT_HTML);
}"
81355,"/** 
 * Builds the header.
 * @param html the html
 */
private void buildHeader(StringBuffer html){
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  String relPath=""String_Node_Str"";
  if (currentPackageName != null) {
    String[] folders=currentPackageName.split(""String_Node_Str"");
    for (    String folder : folders) {
      relPath=relPath + ""String_Node_Str"";
    }
  }
  html.append(HtmlUtils.getAnchorTag(null,relPath + ""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str""));
  html.append(Constants.HTML_HR);
  html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + Constants.OPERATION_SUMMARY_HREF,Constants.OPERATIONS_LABEL,Constants.OPERATIONS_LABEL));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"" + Constants.OPERATIONS_DETAIL_HREF,Constants.OPERATIONS_LABEL,Constants.OPERATIONS_LABEL));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(Constants.HTML_TABLE_END);
  html.append(Constants.HTML_HR);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Builds the header.
 * @param html the html
 * @throws OutputFormatterException 
 */
private void buildHeader(StringBuffer html,boolean isType,boolean isComplex,String typeName) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  String parameterName=isType ? (isComplex ? ""String_Node_Str"" : ""String_Node_Str"") : ""String_Node_Str"";
  String headerFile=outputGenaratorParam.getParameters().get(parameterName);
  if (headerFile != null) {
    try {
      String header=Utils.getFileAsString(Utils.convertToURL(headerFile).openStream()).toString();
      String version=outputGenaratorParam.getParameters().get(""String_Node_Str"");
      header=header.replaceAll(""String_Node_Str"",version);
      if (typeName != null) {
        header=header.replaceAll(""String_Node_Str"",typeName);
      }
      html.append(header);
    }
 catch (    IOException e) {
      throw new OutputFormatterException(e);
    }
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
81356,"private Node getTypesInTree(WSDLDocInterface wsdlDoc){
  XSDDocInterface xsdDocument=((WSDLDocument)wsdlDoc).getXsdDocument();
  List<ComplexType> complexTypes=xsdDocument.getAllComplexTypes();
  Node root=new Node();
  root.setName(""String_Node_Str"");
  root.setLevel(0);
  for (  ComplexType type : complexTypes) {
    Node node=new Node();
    node.setName(type.getName());
    node.setOriginalParent(type.getParentType());
    getParent(root,node,type.getParentType());
    if (!node.isNodeAdded()) {
      if (root.getChildren() == null) {
        root.setChildren(new TreeSet<Node>());
      }
      node.setParent(root);
      node.setLevel(root.getLevel() + 1);
      root.getChildren().add(node);
    }
    normalizeTree(type,root,node);
  }
  return root;
}","private Node getTypesInTree(List<XSDDocInterface> wsdlDoc){
  List<ComplexType> complexTypes=new ArrayList<ComplexType>();
  for (  XSDDocInterface xsdDocument : wsdlDoc) {
    if (xsdDocument.getAllComplexTypes() != null) {
      complexTypes.addAll(xsdDocument.getAllComplexTypes());
    }
  }
  Node root=new Node();
  root.setName(""String_Node_Str"");
  root.setLevel(0);
  for (  ComplexType type : complexTypes) {
    Node node=new Node();
    node.setName(type.getName());
    node.setOriginalParent(type.getParentType());
    getParent(root,node,type.getParentType());
    if (!node.isNodeAdded()) {
      if (root.getChildren() == null) {
        root.setChildren(new TreeSet<Node>());
      }
      node.setParent(root);
      node.setLevel(root.getLevel() + 1);
      root.getChildren().add(node);
    }
    normalizeTree(type,root,node);
  }
  return root;
}"
81357,"private void writeTree(Node root,StringBuffer html){
  Set<Node> children=root.getChildren();
  if (children != null) {
    html.append(""String_Node_Str"");
    for (    Node node : children) {
      if (node.isFlag()) {
        html.append(""String_Node_Str"");
        html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",""String_Node_Str"" + currentPackageName + ""String_Node_Str""+ node.getName()+ Constants.DOT_HTML,""String_Node_Str"",node.getName()) + Constants.HTML_BR);
        writeTree(node,html);
      }
    }
    if (children.size() != 0) {
      html.append(""String_Node_Str"");
    }
  }
}","private void writeTree(Node root,StringBuffer html){
  Set<Node> children=root.getChildren();
  if (children != null) {
    html.append(""String_Node_Str"");
    for (    Node node : children) {
      if (node.isFlag()) {
        html.append(""String_Node_Str"");
        html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",""String_Node_Str"" + node.getName() + Constants.DOT_HTML,""String_Node_Str"",node.getName()) + Constants.HTML_BR);
        writeTree(node,html);
      }
    }
    if (children.size() != 0) {
      html.append(""String_Node_Str"");
    }
  }
}"
81358,"/** 
 * Write simple type file.
 * @param doc the doc
 * @param type the type
 * @throws OutputFormatterException
 */
private void writeSimpleTypeFile(WSDLDocInterface doc,SimpleType type) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  String typeName=type.getName();
  StringBuffer html=new StringBuffer();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + File.separator + ""String_Node_Str""));
    String parentType=type.getBase();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      typeName=typeName + ""String_Node_Str"" + parentType+ ""String_Node_Str"";
    }
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    List<EnumElement> enumElements=type.getEnums();
    if (enumElements != null && !enumElements.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      EnumElement enumElement : enumElements) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(enumElement.getValue());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        if (enumElement.getAnnotations().getDocumentation() != null) {
          html.append(enumElement.getAnnotations().getDocumentation());
        }
        deprDet=AnnotationsHelper.processDeprication(enumElement.getAnnotations());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,enumElement.getAnnotations());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
      html.append(Constants.HTML_TABLE_END);
    }
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Write simple type file.
 * @param doc the doc
 * @param type the type
 * @throws OutputFormatterException
 */
private void writeSimpleTypeFile(WSDLDocInterface doc,SimpleType type) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  String typeName=type.getName();
  StringBuffer html=new StringBuffer();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + ""String_Node_Str""));
    buildHeader(html,true,false,type.getName());
    String parentType=type.getBase();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      typeName=typeName + ""String_Node_Str"" + parentType+ ""String_Node_Str"";
    }
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_BR + Constants.HTML_BR);
    List<EnumElement> enumElements=type.getEnums();
    if (enumElements != null && !enumElements.isEmpty()) {
      html.append(getTableTagWithStyle(""String_Node_Str""));
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      html.append(getTableRowTagWithStyle(""String_Node_Str""));
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(getTableHeadTagWithStyle(""String_Node_Str""));
      html.append(""String_Node_Str"");
      html.append(Constants.HTML_TABLE_TH_END);
      html.append(Constants.HTML_TABLE_TR_END);
      for (      EnumElement enumElement : enumElements) {
        html.append(getTableRowTagWithStyle(""String_Node_Str""));
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        html.append(enumElement.getValue());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(getTableDataTagWithStyle(""String_Node_Str""));
        if (enumElement.getAnnotations().getDocumentation() != null) {
          html.append(enumElement.getAnnotations().getDocumentation());
        }
        deprDet=AnnotationsHelper.processDeprication(enumElement.getAnnotations());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,enumElement.getAnnotations());
        html.append(Constants.HTML_TABLE_TD_END);
        html.append(Constants.HTML_TABLE_TR_END);
      }
      html.append(Constants.HTML_TABLE_END);
    }
    addFooter(html,true,false,type.getName());
    writeFile(html,currentTypesFolderPath,type.getName() + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
81359,"/** 
 * Parses the annotation.
 * @param namespacePrefix the namespace prefix
 * @param elem the elem
 * @return parses annotation dom element and populates its POJOrepresentation ParsedAnnotationInfo
 */
private ParsedAnnotationInfo parseAnnotation(org.w3c.dom.Element node){
  logger.log(Level.FINER,""String_Node_Str"",node);
  ParsedAnnotationInfo info=null;
  if (node != null) {
    info=new ParsedAnnotationInfo();
    String documentation=""String_Node_Str"";
    for (Node childNode=node.getFirstChild(); childNode != null; ) {
      Node nextChild=childNode.getNextSibling();
      if (childNode.getNodeType() == Node.ELEMENT_NODE) {
        String tagName=childNode.getNodeName();
        AnnotationParser parser=getAnnotationParser(tagName);
        if (parser != null) {
          ParsedAnnotationTag parsedData=parser.parseAnnotation((org.w3c.dom.Element)childNode);
          info.addParsedAnnotationTag(tagName,parsedData);
        }
      }
 else       if (childNode.getNodeType() == Node.TEXT_NODE) {
        documentation=documentation + childNode.getNodeValue();
      }
      childNode=nextChild;
    }
    if (!Utils.isEmpty(documentation)) {
      info.setDocumentation(documentation);
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",info);
  return info;
}","/** 
 * Parses the annotation.
 * @param namespacePrefix the namespace prefix
 * @param elem the elem
 * @return parses annotation dom element and populates its POJOrepresentation ParsedAnnotationInfo
 */
private ParsedAnnotationInfo parseAnnotation(org.w3c.dom.Element node){
  logger.log(Level.FINER,""String_Node_Str"",node);
  ParsedAnnotationInfo info=null;
  if (node != null) {
    info=new ParsedAnnotationInfo();
    processDocumentation(node,info);
  }
  logger.log(Level.FINER,""String_Node_Str"",info);
  return info;
}"
81360,"/** 
 * Parses the annotation.
 * @param namespacePrefix the namespace prefix
 * @param elem the elem
 * @return parses annotation dom element and populates its POJOrepresentation ParsedAnnotationInfo
 */
private ParsedAnnotationInfo parseAnnotation(org.w3c.dom.Element elem){
  logger.log(Level.FINER,""String_Node_Str"",elem);
  NodeList docElementList=(NodeList)elem.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  org.w3c.dom.Element docElement=(org.w3c.dom.Element)docElementList.item(0);
  ParsedAnnotationInfo info=new ParsedAnnotationInfo();
  if (docElement != null) {
    String documentation=docElement.getTextContent();
    info.setDocumentation(documentation);
  }
  NodeList annoElementList=(NodeList)elem.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  org.w3c.dom.Element node=(org.w3c.dom.Element)annoElementList.item(0);
  if (node != null) {
    for (Node childNode=node.getFirstChild(); childNode != null; ) {
      Node nextChild=childNode.getNextSibling();
      if (childNode.getNodeType() == Node.ELEMENT_NODE) {
        String tagName=childNode.getNodeName();
        AnnotationParser parser=getAnnotationParser(tagName);
        if (parser != null) {
          ParsedAnnotationTag parsedData=parser.parseAnnotation((org.w3c.dom.Element)childNode);
          info.addParsedAnnotationTag(tagName,parsedData);
        }
      }
      childNode=nextChild;
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",info);
  return info;
}","/** 
 * Parses the annotation.
 * @param namespacePrefix the namespace prefix
 * @param elem the elem
 * @return parses annotation dom element and populates its POJOrepresentation ParsedAnnotationInfo
 */
private ParsedAnnotationInfo parseAnnotation(org.w3c.dom.Element elem){
  logger.log(Level.FINER,""String_Node_Str"",elem);
  NodeList docElementList=(NodeList)elem.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  org.w3c.dom.Element docElement=(org.w3c.dom.Element)docElementList.item(0);
  ParsedAnnotationInfo info=new ParsedAnnotationInfo();
  if (docElement != null) {
    processDocumentation(docElement,info);
  }
  NodeList annoElementList=(NodeList)elem.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  org.w3c.dom.Element node=(org.w3c.dom.Element)annoElementList.item(0);
  if (node != null) {
    for (Node childNode=node.getFirstChild(); childNode != null; ) {
      Node nextChild=childNode.getNextSibling();
      if (childNode.getNodeType() == Node.ELEMENT_NODE) {
        String tagName=childNode.getNodeName();
        AnnotationParser parser=getAnnotationParser(tagName);
        if (parser != null) {
          ParsedAnnotationTag parsedData=parser.parseAnnotation((org.w3c.dom.Element)childNode);
          info.addParsedAnnotationTag(tagName,parsedData);
        }
      }
      childNode=nextChild;
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",info);
  return info;
}"
81361,"/** 
 * Creates the all classes file.
 * @throws OutputFormatterException
 */
private void createAllClassesFile() throws OutputFormatterException {
  Set<String> set=packageServicesMap.keySet();
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.ALL_CLASSES,null));
  html.append(Constants.HTML_BOLD_START + Constants.ALL_CLASSES + Constants.HTML_BOLD_END+ Constants.HTML_BR);
  for (  String packageName : set) {
    List<String> list=packageServicesMap.get(packageName);
    for (    String className : list) {
      html.append(HtmlUtils.getAnchorTag(className,packageName + SEPARATOR + className+ Constants.DOT_HTML,null,className,Constants.CLASSFRAME,null) + Constants.HTML_BR);
    }
  }
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.ALLCLASSES + Constants.DOT_HTML);
}","/** 
 * Creates the all classes file.
 * @throws OutputFormatterException
 */
private void createAllClassesFile() throws OutputFormatterException {
  Set<String> set=packageServicesMap.keySet();
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getStartTags(Constants.ALL_CLASSES,null));
  html.append(Constants.HTML_BOLD_START + Constants.ALL_CLASSES + Constants.HTML_BOLD_END+ Constants.HTML_BR);
  for (  String packageName : set) {
    List<String> list=packageServicesMap.get(packageName);
    if (packageName.startsWith(""String_Node_Str"")) {
      packageName=packageName.substring(1);
    }
    for (    String className : list) {
      html.append(HtmlUtils.getAnchorTag(className,packageName + SEPARATOR + className+ Constants.DOT_HTML,null,className,Constants.CLASSFRAME,null) + Constants.HTML_BR);
    }
  }
  html.append(HtmlUtils.getEndTags());
  writeFile(html,getCurrentOutputDir(),Constants.ALLCLASSES + Constants.DOT_HTML);
}"
81362,"/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + File.separator + ""String_Node_Str""));
    buildTypeHeader(html);
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    buildFieldSummary(html,doc,type);
    html.append(Constants.HTML_HR);
    html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    if (elements.isEmpty()) {
      html.append(type.getName() + ""String_Node_Str"");
      html.append(Constants.HTML_TABLE_END);
    }
 else {
      html.append(Constants.HTML_BR + Constants.HTML_BR);
      for (      Element element : elements) {
        if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
          isRecursive=true;
        }
        String nodePath=parentPath + ""String_Node_Str"" + element.getName();
        String typeCName=getCTypeTypeName(element.getType());
        if (type.getName().equalsIgnoreCase(typeCName)) {
          isRecursive=true;
        }
        html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
        if (doc.searchCType(typeCName) != null && !isRecursive) {
          writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else         if (doc.searchSimpleType(typeCName) != null) {
          writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else {
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
        }
        if (element.getAnnotationInfo().getDocumentation() != null) {
          html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
        }
        processDefaultsAndBoundries(html,doc,element);
        deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,element.getAnnotationInfo());
        html.append(Constants.HTML_HR + Constants.HTML_BR);
      }
    }
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Write complex type file.
 * @param doc the doc
 * @param type the type
 * @param parentPath the parent path
 * @throws OutputFormatterException
 */
private void writeComplexTypeFile(WSDLDocInterface doc,ComplexType type,String parentPath) throws OutputFormatterException {
  logger.entering(""String_Node_Str"",""String_Node_Str"",new Object[]{doc,type});
  processedTypes.add(type);
  boolean isRecursive=false;
  StringBuffer html=new StringBuffer();
  String typeName=type.getName();
  if (typeName != null && !Utils.isEmpty(typeName)) {
    String parentType=type.getParentType();
    if (!Utils.isEmpty(parentType)) {
      parentType=Utils.removeNameSpace(parentType);
      ComplexType parent=doc.searchCType(parentType);
      if (parent != null && !processedTypes.contains(parent)) {
        writeComplexTypeFile(doc,parent,parentPath);
      }
    }
    html=new StringBuffer();
    html.append(HtmlUtils.getStartTags(typeName,currentPackageName + ""String_Node_Str""));
    buildTypeHeader(html);
    html.append(getTextInDiv(""String_Node_Str"" + typeName,""String_Node_Str""));
    html.append(Constants.HTML_HR);
    html.append(Constants.HTML_DL_START + Constants.HTML_DD_START);
    if (!Utils.isEmpty(parentType)) {
      html.append(getTextInSpan(""String_Node_Str"",""String_Node_Str""));
      html.append(HtmlUtils.getAnchorTag(null,parentType + Constants.DOT_HTML,parentType,parentType) + Constants.HTML_BR);
    }
    if (type.getAnnotations().getDocumentation() != null) {
      html.append(getTextInSpan(type.getAnnotations().getDocumentation(),""String_Node_Str""));
    }
    html.append(Constants.HTML_DD_END + Constants.HTML_DL_END);
    StringBuffer deprDet=AnnotationsHelper.processDeprication(type.getAnnotations());
    if (deprDet != null) {
      html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
      html.append(deprDet);
    }
    processRelatedInfo(html,doc,type.getAnnotations());
    html.append(Constants.HTML_HR);
    buildFieldSummary(html,doc,type);
    html.append(Constants.HTML_HR);
    html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
    html.append(getTableTagWithStyle(""String_Node_Str""));
    html.append(getTableRowTagWithStyle(""String_Node_Str""));
    html.append(getTableHeadTagWithStyle(""String_Node_Str""));
    html.append(""String_Node_Str"");
    html.append(Constants.HTML_TABLE_TH_END);
    html.append(Constants.HTML_TABLE_TR_END);
    html.append(Constants.HTML_TABLE_END);
    Set<Element> elements=type.getChildElements();
    if (type.getSimpleAttributeContent() != null) {
      elements.addAll(type.getSimpleAttributeContent());
    }
    if (elements.isEmpty()) {
      html.append(type.getName() + ""String_Node_Str"");
      html.append(Constants.HTML_TABLE_END);
    }
 else {
      html.append(Constants.HTML_BR + Constants.HTML_BR);
      for (      Element element : elements) {
        if (parentPath.contains(""String_Node_Str"" + element.getName() + ""String_Node_Str"")) {
          isRecursive=true;
        }
        String nodePath=parentPath + ""String_Node_Str"" + element.getName();
        String typeCName=getCTypeTypeName(element.getType());
        if (type.getName().equalsIgnoreCase(typeCName)) {
          isRecursive=true;
        }
        html.append(HtmlUtils.getAnchorTag(element.getName(),null,null,null));
        if (doc.searchCType(typeCName) != null && !isRecursive) {
          writeComplexTypeFile(doc,doc.searchCType(typeCName),nodePath);
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else         if (doc.searchSimpleType(typeCName) != null) {
          writeSimpleTypeFile(doc,doc.searchSimpleType(typeCName));
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + HtmlUtils.getAnchorTag(null,typeCName + Constants.DOT_HTML,typeCName,typeCName)+ ""String_Node_Str"",""String_Node_Str""));
        }
 else {
          html.append(getTextInSpan(element.getName() + ""String_Node_Str"" + typeCName+ ""String_Node_Str"",""String_Node_Str""));
        }
        if (element.getAnnotationInfo().getDocumentation() != null) {
          html.append(Constants.HTML_BR + getTextInSpan(element.getAnnotationInfo().getDocumentation(),""String_Node_Str""));
        }
        processDefaultsAndBoundries(html,doc,element);
        deprDet=AnnotationsHelper.processDeprication(element.getAnnotationInfo());
        if (deprDet != null) {
          html.append(getTextInDiv(""String_Node_Str"",""String_Node_Str""));
          html.append(deprDet);
        }
        processRelatedInfo(html,doc,element.getAnnotationInfo());
        html.append(Constants.HTML_HR + Constants.HTML_BR);
      }
    }
    addFooter(html);
    writeFile(html,currentTypesFolderPath,typeName + Constants.DOT_HTML);
  }
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
81363,"private void writePackageTree(WSDLDocInterface wsdlDoc) throws OutputFormatterException {
  Node root=getTypesInTree(wsdlDoc);
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str""));
  html.append(Constants.HTML_HR);
  html.append(Constants.HTML_H3_START + ""String_Node_Str"" + wsdlDoc.getPackageName()+ Constants.HTML_H3_END);
  html.append(Constants.HTML_HR);
  html.append(Constants.HTML_H3_START + ""String_Node_Str"" + Constants.HTML_H3_END);
  html.append(""String_Node_Str"");
  writeTree(root,html,wsdlDoc.getPackageName());
  html.append(""String_Node_Str"");
  writeFile(html,getCurrentOutputDir(),""String_Node_Str"" + Constants.DOT_HTML);
  System.out.println(root);
}","private void writePackageTree(WSDLDocInterface wsdlDoc) throws OutputFormatterException {
  Node root=getTypesInTree(wsdlDoc);
  StringBuffer html=new StringBuffer();
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str""));
  html.append(Constants.HTML_HR);
  html.append(Constants.HTML_H3_START + ""String_Node_Str"" + wsdlDoc.getPackageName()+ Constants.HTML_H3_END);
  html.append(Constants.HTML_HR);
  html.append(Constants.HTML_H3_START + ""String_Node_Str"" + Constants.HTML_H3_END);
  html.append(""String_Node_Str"");
  writeTree(root,html);
  html.append(""String_Node_Str"");
  writeFile(html,getCurrentOutputDir(),""String_Node_Str"" + Constants.DOT_HTML);
  System.out.println(root);
}"
81364,"private void writeTree(Node root,StringBuffer html,String packageName){
  Set<Node> children=root.getChildren();
  if (children != null) {
    html.append(""String_Node_Str"");
    for (    Node node : children) {
      if (node.isFlag()) {
        html.append(""String_Node_Str"");
        html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",""String_Node_Str"" + packageName + ""String_Node_Str""+ node.getName()+ Constants.DOT_HTML,""String_Node_Str"",node.getName()) + Constants.HTML_BR);
        writeTree(node,html,packageName);
      }
    }
    if (children.size() != 0) {
      html.append(""String_Node_Str"");
    }
  }
}","private void writeTree(Node root,StringBuffer html){
  Set<Node> children=root.getChildren();
  if (children != null) {
    html.append(""String_Node_Str"");
    for (    Node node : children) {
      if (node.isFlag()) {
        html.append(""String_Node_Str"");
        html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",""String_Node_Str"" + currentPackageName + ""String_Node_Str""+ node.getName()+ Constants.DOT_HTML,""String_Node_Str"",node.getName()) + Constants.HTML_BR);
        writeTree(node,html);
      }
    }
    if (children.size() != 0) {
      html.append(""String_Node_Str"");
    }
  }
}"
81365,"/** 
 * Builds the header for Types.
 * @param html the html
 */
private void buildTypeHeader(StringBuffer html){
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  String relPath=""String_Node_Str"";
  String[] folders=currentPackageName.split(""String_Node_Str"");
  for (  String folder : folders) {
    relPath=relPath + ""String_Node_Str"";
  }
  relPath=relPath + ""String_Node_Str"";
  html.append(HtmlUtils.getAnchorTag(null,relPath + ""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str""));
  html.append(Constants.HTML_HR);
  html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(Constants.HTML_TABLE_END);
  html.append(Constants.HTML_HR);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}","/** 
 * Builds the header for Types.
 * @param html the html
 */
private void buildTypeHeader(StringBuffer html){
  logger.entering(""String_Node_Str"",""String_Node_Str"",html);
  String relPath=""String_Node_Str"";
  String[] folders=currentPackageName.split(""String_Node_Str"");
  for (  String folder : folders) {
    relPath=relPath + ""String_Node_Str"";
  }
  html.append(HtmlUtils.getAnchorTag(null,relPath + ""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str"") + Constants.NBSP_TWICE);
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",null,""String_Node_Str""));
  html.append(Constants.HTML_HR);
  html.append(HtmlUtils.getAnchorTag(""String_Node_Str"",null,null,null));
  html.append(getTableTagWithStyle(""String_Node_Str""));
  html.append(getTableRowTagWithStyle(""String_Node_Str""));
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(getTableDataTagWithStyle(""String_Node_Str""));
  html.append(""String_Node_Str"");
  html.append(HtmlUtils.getAnchorTag(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  html.append(Constants.HTML_TABLE_TD_END);
  html.append(Constants.HTML_TABLE_TR_END);
  html.append(Constants.HTML_TABLE_END);
  html.append(Constants.HTML_HR);
  logger.exiting(""String_Node_Str"",""String_Node_Str"",html);
}"
81366,"/** 
 * Gets the start tags.
 * @param title the title
 * @param currLocFromBase the curr loc from base
 * @return the start tags
 */
public static String getStartTags(String title,String currLocFromBase){
  List<String> cssList=new ArrayList<String>();
  cssList.add(""String_Node_Str"");
  if (Context.getContext().getCssFilePath() != null && !Utils.isEmpty(Context.getContext().getCssFilePath())) {
    cssList.add(""String_Node_Str"");
  }
  String relPath=""String_Node_Str"";
  if (currLocFromBase != null && ""String_Node_Str"".equals(currLocFromBase)) {
    System.out.println(currLocFromBase);
  }
  if (currLocFromBase != null) {
    String[] folders=currLocFromBase.split(""String_Node_Str"");
    for (    String folder : folders) {
      relPath=relPath + ""String_Node_Str"";
    }
  }
  String tag=""String_Node_Str"" + title + ""String_Node_Str"";
  for (  String css : cssList) {
    tag+=""String_Node_Str"" + relPath + ""String_Node_Str""+ css+ ""String_Node_Str"";
  }
  tag+=""String_Node_Str"";
  return tag;
}","/** 
 * Gets the start tags.
 * @param title the title
 * @param currLocFromBase the curr loc from base
 * @return the start tags
 */
public static String getStartTags(String title,String currLocFromBase){
  List<String> cssList=new ArrayList<String>();
  cssList.add(""String_Node_Str"");
  if (Context.getContext().getCssFilePath() != null && !Utils.isEmpty(Context.getContext().getCssFilePath())) {
    cssList.add(""String_Node_Str"");
  }
  String relPath=""String_Node_Str"";
  if (currLocFromBase != null) {
    if (currLocFromBase.startsWith(""String_Node_Str"")) {
      currLocFromBase=currLocFromBase.substring(1);
    }
    String[] folders=currLocFromBase.split(""String_Node_Str"");
    for (    String folder : folders) {
      relPath=relPath + ""String_Node_Str"";
    }
  }
  String tag=""String_Node_Str"" + title + ""String_Node_Str"";
  for (  String css : cssList) {
    tag+=""String_Node_Str"" + relPath + ""String_Node_Str""+ css+ ""String_Node_Str"";
  }
  tag+=""String_Node_Str"";
  return tag;
}"
81367,"/** 
 * Sets the up.
 * @throws Exception the exception
 */
@Before public void setUp() throws Exception {
  String xsdPath=this.getClass().getClassLoader().getResource(""String_Node_Str"").toExternalForm();
  Context.getContext().addParser(""String_Node_Str"",new TestAnnoParserClass());
  XSDParser parser=new XSDParserImpl();
  xsdIntf=parser.parse(xsdPath);
}","/** 
 * Sets the up.
 * @throws Exception the exception
 */
@Before public void setUp() throws Exception {
  String xsdPath=this.getClass().getClassLoader().getResource(""String_Node_Str"").toExternalForm();
  ConfigurationReader.loadDefaultConfiguration();
  Context.getContext().addParser(""String_Node_Str"",new TestAnnoParserClass());
  XSDParser parser=new XSDParserImpl();
  xsdIntf=parser.parse(xsdPath);
}"
81368,"/** 
 * Parses the child elements.
 * @param nsprefix namespace
 * @param ctype complex type
 * @param ctypes collection of all complex types
 * @param element parent complex type
 * @param xsdDocument handle to xsd document
 * @return list of all children of the given element node and alsoassociates with the complex type to enable traversal.
 */
private Set<Element> parseChildElements(ComplexType ctype,NodeList ctypes,org.w3c.dom.Element element,XSDDocument xsdDocument){
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{ctype,ctypes,element,xsdDocument});
  Set<Element> elements=new TreeSet<Element>();
  NodeList domElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    String type=obj.getAttribute(""String_Node_Str"");
    String[] typeParts=type.split(""String_Node_Str"");
    if (typeParts != null && typeParts.length > 1)     type=typeParts[1];
    Element elem=new Element();
    elem.setName(name);
    elem.setType(type);
    elem.setContainerComplexType(ctype);
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        elem.getAttributes().add(attribute);
      }
    }
    elem.setAnnotationInfo(parseAnnotation(obj));
    elements.add(elem);
    xsdDocument.addIndependentElement(elem);
  }
  NodeList attributeNodes=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  if (attributeNodes != null) {
    int count=attributeNodes.getLength();
    for (int j=0; j < count; j++) {
      org.w3c.dom.Element attrElem=(org.w3c.dom.Element)attributeNodes.item(j);
      AttributeElement attr=new AttributeElement();
      String name=attrElem.getAttribute(""String_Node_Str"");
      if (Utils.isEmpty(name)) {
        for (int k=0; k < count; k++) {
          org.w3c.dom.Element ref=(org.w3c.dom.Element)attributeNodes.item(k);
          name=ref.getAttribute(""String_Node_Str"");
        }
      }
      String type=attrElem.getAttribute(""String_Node_Str"");
      if (Utils.isEmpty(type)) {
        NodeList simpleTypes=attrElem.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
        if (simpleTypes.getLength() > 0) {
          org.w3c.dom.Element elem=(org.w3c.dom.Element)simpleTypes.item(0);
          SimpleType simpleType=populateSimpleType(xsdDocument,elem,true);
          if (Utils.isEmpty(simpleType.getName())) {
            simpleType.setName(name + ""String_Node_Str"");
            if (simpleType.getEnums() != null) {
              for (              EnumElement enumE : simpleType.getEnums()) {
                enumE.setType(simpleType.getName());
              }
            }
          }
          attr.setType(simpleType.getName());
          attr.setBaseType(simpleType.getName());
        }
      }
 else {
        attr.setType(type);
      }
      attr.setName(name);
      org.w3c.dom.Element parent=(org.w3c.dom.Element)attrElem.getParentNode();
      if (parent.getTagName().endsWith(""String_Node_Str"")) {
        String baseType=parent.getAttribute(""String_Node_Str"");
        attr.setBaseType(baseType);
      }
      NamedNodeMap nameNodeMap=attrElem.getAttributes();
      int size=nameNodeMap.getLength();
      for (int k=0; k < size; k++) {
        Attr attri=(Attr)nameNodeMap.item(k);
        if (attri != null) {
          Attribute attribute=new Attribute();
          attribute.setName(attri.getName());
          attribute.setValue(attri.getValue());
          attr.getAttributes().add(attribute);
        }
      }
      attr.setAnnotationInfo(parseAnnotation(attrElem));
      ctype.addSimpleAttributeContent(attr);
    }
  }
  NodeList extensibleElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  org.w3c.dom.Element extensionbaseElem=(org.w3c.dom.Element)extensibleElements.item(0);
  if (extensionbaseElem != null) {
    String attribute=extensionbaseElem.getAttribute(""String_Node_Str"");
    String parentType=null;
    String[] strs=attribute.split(""String_Node_Str"");
    if (strs != null && strs.length > 1)     parentType=strs[1];
 else     parentType=attribute;
    ctype.setParentType(parentType);
    if (!Utils.isEmpty(parentType)) {
      xsdDocument.addParentToComplexTypeMap(parentType,ctype.getName());
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{elements});
  return elements;
}","/** 
 * Parses the child elements.
 * @param nsprefix namespace
 * @param ctype complex type
 * @param ctypes collection of all complex types
 * @param element parent complex type
 * @param xsdDocument handle to xsd document
 * @return list of all children of the given element node and alsoassociates with the complex type to enable traversal.
 */
private Set<Element> parseChildElements(ComplexType ctype,NodeList ctypes,org.w3c.dom.Element element,XSDDocument xsdDocument){
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{ctype,ctypes,element,xsdDocument});
  Set<Element> elements=new TreeSet<Element>();
  NodeList domElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    String type=obj.getAttribute(""String_Node_Str"");
    String[] typeParts=type.split(""String_Node_Str"");
    if (typeParts != null && typeParts.length > 1)     type=typeParts[1];
    Element elem=new Element();
    elem.setName(name);
    elem.setType(type);
    elem.setContainerComplexType(ctype);
    String prevComment=Utils.getPreviousComment(obj);
    String nextComment=Utils.getNextComment(obj);
    if (prevComment != null || nextComment != null) {
      Comment comment=new Comment();
      comment.setNextComment(nextComment);
      comment.setPreviousComment(prevComment);
      elem.setComment(comment);
    }
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        elem.getAttributes().add(attribute);
      }
    }
    elem.setAnnotationInfo(parseAnnotation(obj));
    elements.add(elem);
    xsdDocument.addIndependentElement(elem);
  }
  NodeList attributeNodes=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  if (attributeNodes != null) {
    int count=attributeNodes.getLength();
    for (int j=0; j < count; j++) {
      org.w3c.dom.Element attrElem=(org.w3c.dom.Element)attributeNodes.item(j);
      AttributeElement attr=new AttributeElement();
      String name=attrElem.getAttribute(""String_Node_Str"");
      if (Utils.isEmpty(name)) {
        for (int k=0; k < count; k++) {
          org.w3c.dom.Element ref=(org.w3c.dom.Element)attributeNodes.item(k);
          name=ref.getAttribute(""String_Node_Str"");
        }
      }
      String type=attrElem.getAttribute(""String_Node_Str"");
      String prevComment=Utils.getPreviousComment(attrElem);
      String nextComment=Utils.getNextComment(attrElem);
      if (prevComment != null || nextComment != null) {
        Comment comment=new Comment();
        comment.setNextComment(nextComment);
        comment.setPreviousComment(prevComment);
        attr.setComment(comment);
      }
      if (Utils.isEmpty(type)) {
        NodeList simpleTypes=attrElem.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
        if (simpleTypes.getLength() > 0) {
          org.w3c.dom.Element elem=(org.w3c.dom.Element)simpleTypes.item(0);
          SimpleType simpleType=populateSimpleType(xsdDocument,elem,true);
          if (Utils.isEmpty(simpleType.getName())) {
            simpleType.setName(name + ""String_Node_Str"");
            if (simpleType.getEnums() != null) {
              for (              EnumElement enumE : simpleType.getEnums()) {
                enumE.setType(simpleType.getName());
              }
            }
          }
          attr.setType(simpleType.getName());
          attr.setBaseType(simpleType.getName());
        }
      }
 else {
        attr.setType(type);
      }
      attr.setName(name);
      org.w3c.dom.Element parent=(org.w3c.dom.Element)attrElem.getParentNode();
      if (parent.getTagName().endsWith(""String_Node_Str"")) {
        String baseType=parent.getAttribute(""String_Node_Str"");
        attr.setBaseType(baseType);
      }
      NamedNodeMap nameNodeMap=attrElem.getAttributes();
      int size=nameNodeMap.getLength();
      for (int k=0; k < size; k++) {
        Attr attri=(Attr)nameNodeMap.item(k);
        if (attri != null) {
          Attribute attribute=new Attribute();
          attribute.setName(attri.getName());
          attribute.setValue(attri.getValue());
          attr.getAttributes().add(attribute);
        }
      }
      attr.setAnnotationInfo(parseAnnotation(attrElem));
      ctype.addSimpleAttributeContent(attr);
    }
  }
  NodeList extensibleElements=element.getElementsByTagNameNS(""String_Node_Str"",""String_Node_Str"");
  org.w3c.dom.Element extensionbaseElem=(org.w3c.dom.Element)extensibleElements.item(0);
  if (extensionbaseElem != null) {
    String attribute=extensionbaseElem.getAttribute(""String_Node_Str"");
    String parentType=null;
    String[] strs=attribute.split(""String_Node_Str"");
    if (strs != null && strs.length > 1)     parentType=strs[1];
 else     parentType=attribute;
    ctype.setParentType(parentType);
    if (!Utils.isEmpty(parentType)) {
      xsdDocument.addParentToComplexTypeMap(parentType,ctype.getName());
    }
  }
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{elements});
  return elements;
}"
81369,"/** 
 * Parses the all elements.
 * @param tagName the tag name
 * @param srcDoc the src doc
 * @param xsdDocument parses ""element"" nodes from the document and constructs its POJO representation. sticks the annotation associated with the element.
 */
private void parseAllElements(String tagName,Document srcDoc,XSDDocument xsdDocument){
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{tagName,srcDoc,xsdDocument});
  List<Element> elements=new ArrayList<Element>();
  String[] strs=tagName.split(""String_Node_Str"");
  String nsprefix=strs[0] + ""String_Node_Str"";
  NodeList domElements=srcDoc.getElementsByTagName(tagName);
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    String type=obj.getAttribute(""String_Node_Str"");
    String[] typeParts=type.split(""String_Node_Str"");
    if (typeParts != null && typeParts.length > 1)     type=typeParts[1];
    Element elem=new Element();
    elem.setName(name);
    elem.setType(type);
    List<Element> instances=(List<Element>)typeElementsMap.get(type);
    if (instances == null) {
      instances=new ArrayList<Element>();
      instances.add(elem);
      typeElementsMap.put(type,instances);
    }
 else {
      instances.add(elem);
      typeElementsMap.put(type,instances);
    }
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        elem.getAttributes().add(attribute);
      }
    }
    elem.setAnnotationInfo(parseAnnotation(obj));
    elements.add(elem);
    xsdDocument.addIndependentElement(elem);
    logger.log(Level.FINER,""String_Node_Str"",xsdDocument);
  }
}","/** 
 * Parses the all elements.
 * @param tagName the tag name
 * @param srcDoc the src doc
 * @param xsdDocument parses ""element"" nodes from the document and constructs its POJO representation. sticks the annotation associated with the element.
 */
private void parseAllElements(String tagName,Document srcDoc,XSDDocument xsdDocument){
  logger.log(Level.FINER,""String_Node_Str"",new Object[]{tagName,srcDoc,xsdDocument});
  List<Element> elements=new ArrayList<Element>();
  NodeList domElements=srcDoc.getElementsByTagName(tagName);
  int noOfDomElements=domElements.getLength();
  for (int i=0; i < noOfDomElements; i++) {
    org.w3c.dom.Element obj=(org.w3c.dom.Element)domElements.item(i);
    String name=obj.getAttribute(""String_Node_Str"");
    String type=obj.getAttribute(""String_Node_Str"");
    String[] typeParts=type.split(""String_Node_Str"");
    if (typeParts != null && typeParts.length > 1)     type=typeParts[1];
    Element elem=new Element();
    elem.setName(name);
    elem.setType(type);
    String prevComment=Utils.getPreviousComment(obj);
    String nextComment=Utils.getNextComment(obj);
    if (prevComment != null || nextComment != null) {
      Comment comment=new Comment();
      comment.setNextComment(nextComment);
      comment.setPreviousComment(prevComment);
      elem.setComment(comment);
    }
    List<Element> instances=(List<Element>)typeElementsMap.get(type);
    if (instances == null) {
      instances=new ArrayList<Element>();
      instances.add(elem);
      typeElementsMap.put(type,instances);
    }
 else {
      instances.add(elem);
      typeElementsMap.put(type,instances);
    }
    NamedNodeMap nameNodeMap=obj.getAttributes();
    int size=nameNodeMap.getLength();
    for (int j=0; j < size; j++) {
      Attr attr=(Attr)nameNodeMap.item(j);
      if (attr != null) {
        Attribute attribute=new Attribute();
        attribute.setName(attr.getName());
        attribute.setValue(attr.getValue());
        elem.getAttributes().add(attribute);
      }
    }
    elem.setAnnotationInfo(parseAnnotation(obj));
    elements.add(elem);
    xsdDocument.addIndependentElement(elem);
    logger.log(Level.FINER,""String_Node_Str"",xsdDocument);
  }
}"
81370,"/** 
 * Sets the up.
 * @throws Exception the exception
 */
@Before public void setUp() throws Exception {
  this.xsdPath=this.getClass().getClassLoader().getResource(""String_Node_Str"").toExternalForm();
  Context.getContext().addParser(""String_Node_Str"",new TestAnnoParserClass());
}","/** 
 * Sets the up.
 * @throws Exception the exception
 */
@Before public void setUp() throws Exception {
  this.xsdPath=this.getClass().getClassLoader().getResource(""String_Node_Str"").toExternalForm();
  ConfigurationReader.loadDefaultConfiguration();
  Context.getContext().addParser(""String_Node_Str"",new TestAnnoParserClass());
}"
81371,"public static List<Injector> getDefaultInjectors(Object managed){
  List<Injector> result=new ArrayList<Injector>();
  if (managed instanceof Activity) {
    result.add(new ViewInjector());
    result.add(new ServiceInjector());
    result.add(new IntentExtraInjector());
    result.add(new LayoutInjector());
    result.add(new ObjectInjector());
    result.add(new ResourceInjector());
  }
  if (managed instanceof Fragment) {
    result.add(new ViewInjector());
    result.add(new ServiceInjector());
    result.add(new ResourceInjector());
    result.add(new IntentExtraInjector());
    result.add(new ObjectInjector());
  }
  if (managed instanceof android.app.Fragment) {
    result.add(new ViewInjector());
    result.add(new ServiceInjector());
    result.add(new ResourceInjector());
    result.add(new IntentExtraInjector());
    result.add(new ObjectInjector());
  }
  return result;
}","public static List<Injector> getDefaultInjectors(Object managed){
  List<Injector> result=new ArrayList<Injector>();
  if (managed instanceof Activity) {
    result.add(new ViewInjector());
    result.add(new ServiceInjector());
    result.add(new IntentExtraInjector());
    result.add(new LayoutInjector());
    result.add(new ObjectInjector());
    result.add(new ResourceInjector());
  }
  if (managed instanceof Fragment) {
    result.add(new ViewInjector());
    result.add(new ServiceInjector());
    result.add(new ResourceInjector());
    result.add(new IntentExtraInjector());
    result.add(new ObjectInjector());
  }
  try {
    if (managed instanceof android.app.Fragment) {
      result.add(new ViewInjector());
      result.add(new ServiceInjector());
      result.add(new ResourceInjector());
      result.add(new IntentExtraInjector());
      result.add(new ObjectInjector());
    }
  }
 catch (  NoClassDefFoundError e) {
  }
  return result;
}"
81372,"/** 
 * Method called by the container to initialize the container.
 * @param context   the android context
 * @param container the roboject container
 * @param managed   the managed instance
 * @param clazz     the managed class (the class of <tt>managed</tt>)
 * @return <code>true</code> if the injector wants to contribute to themanagement of the instance, <code>false</code> otherwise. In this latter case, the injector will be ignored for this instance.
 * @throws RobojectException if the configuration failed.
 */
@Override public boolean configure(Context context,Container container,Object managed,Class<?> clazz) throws RobojectException {
  if (context instanceof Activity) {
    this.activity=(Activity)context;
  }
 else {
    return false;
  }
  this.managed=managed;
  if (managed instanceof Activity) {
    return true;
  }
  if (managed instanceof Fragment) {
    return true;
  }
  if (managed instanceof android.app.Fragment) {
    return true;
  }
  return false;
}","/** 
 * Method called by the container to initialize the container.
 * @param context   the android context
 * @param container the roboject container
 * @param managed   the managed instance
 * @param clazz     the managed class (the class of <tt>managed</tt>)
 * @return <code>true</code> if the injector wants to contribute to themanagement of the instance, <code>false</code> otherwise. In this latter case, the injector will be ignored for this instance.
 * @throws RobojectException if the configuration failed.
 */
@Override public boolean configure(Context context,Container container,Object managed,Class<?> clazz) throws RobojectException {
  if (context instanceof Activity) {
    this.activity=(Activity)context;
  }
 else {
    return false;
  }
  this.managed=managed;
  if (managed instanceof Activity) {
    return true;
  }
  if (managed instanceof Fragment) {
    return true;
  }
  try {
    if (managed instanceof android.app.Fragment) {
      return true;
    }
  }
 catch (  NoClassDefFoundError e) {
  }
  return false;
}"
81373,"@Override public void onCreate(){
  InjectLayout layoutAnnotation=ReflectionUtil.getAnnotation(managed.getClass(),InjectLayout.class);
  if (layoutAnnotation != null) {
    int id=AndroidUtil.getIdentifierFromR(activity,""String_Node_Str"",layoutAnnotation.value());
    if (managed instanceof Activity) {
      ((Activity)managed).setContentView(id);
    }
    if (managed instanceof Fragment || managed instanceof android.app.Fragment)     throw new RuntimeException(""String_Node_Str"");
  }
}","@Override public void onCreate(){
  InjectLayout layoutAnnotation=ReflectionUtil.getAnnotation(managed.getClass(),InjectLayout.class);
  if (layoutAnnotation != null) {
    int id=AndroidUtil.getIdentifierFromR(activity,""String_Node_Str"",layoutAnnotation.value());
    if (managed instanceof Activity) {
      ((Activity)managed).setContentView(id);
    }
    try {
      if (managed instanceof Fragment || managed instanceof android.app.Fragment)       throw new RuntimeException(""String_Node_Str"");
    }
 catch (    NoClassDefFoundError e) {
    }
  }
}"
81374,"/** 
 * Method called by the container to initialize the container.
 * @param context   the android context
 * @param container the roboject container
 * @param managed   the managed instance
 * @param clazz     the managed class (the class of <tt>managed</tt>)
 * @return <code>true</code> if the injector wants to contribute to themanagement of the instance, <code>false</code> otherwise. In this latter case, the injector will be ignored for this instance.
 * @throws de.akquinet.android.roboject.RobojectException if the configuration failed.
 */
@Override public boolean configure(Context context,Container container,Object managed,Class<?> clazz) throws RobojectException {
  if (context instanceof Activity) {
    this.activity=(Activity)context;
  }
 else {
    return false;
  }
  this.managed=managed;
  if (managed instanceof Activity) {
    return true;
  }
  if (managed instanceof Fragment) {
    return true;
  }
  if (managed instanceof android.app.Fragment) {
    return true;
  }
  return false;
}","/** 
 * Method called by the container to initialize the container.
 * @param context   the android context
 * @param container the roboject container
 * @param managed   the managed instance
 * @param clazz     the managed class (the class of <tt>managed</tt>)
 * @return <code>true</code> if the injector wants to contribute to themanagement of the instance, <code>false</code> otherwise. In this latter case, the injector will be ignored for this instance.
 * @throws de.akquinet.android.roboject.RobojectException if the configuration failed.
 */
@Override public boolean configure(Context context,Container container,Object managed,Class<?> clazz) throws RobojectException {
  if (context instanceof Activity) {
    this.activity=(Activity)context;
  }
 else {
    return false;
  }
  this.managed=managed;
  if (managed instanceof Activity) {
    return true;
  }
  if (managed instanceof Fragment) {
    return true;
  }
  try {
    if (managed instanceof android.app.Fragment) {
      return true;
    }
  }
 catch (  NoClassDefFoundError e) {
  }
  return false;
}"
81375,"/** 
 * Method called by the container to initialize the container.
 * @param context   the android context
 * @param container the roboject container
 * @param managed   the managed instance
 * @param clazz     the managed class (the class of <tt>managed</tt>)
 * @return <code>true</code> if the injector wants to contribute to themanagement of the instance, <code>false</code> otherwise. In this latter case, the injector will be ignored for this instance.
 * @throws de.akquinet.android.roboject.RobojectException if the configuration failed.
 */
@Override public boolean configure(Context context,Container container,Object managed,Class<?> clazz) throws RobojectException {
  if (context instanceof Activity) {
    this.activity=(Activity)context;
  }
 else {
    return false;
  }
  this.managed=managed;
  if (managed instanceof Activity) {
    return true;
  }
  if (managed instanceof Fragment) {
    return true;
  }
  if (managed instanceof android.app.Fragment) {
    return true;
  }
  return false;
}","/** 
 * Method called by the container to initialize the container.
 * @param context   the android context
 * @param container the roboject container
 * @param managed   the managed instance
 * @param clazz     the managed class (the class of <tt>managed</tt>)
 * @return <code>true</code> if the injector wants to contribute to themanagement of the instance, <code>false</code> otherwise. In this latter case, the injector will be ignored for this instance.
 * @throws de.akquinet.android.roboject.RobojectException if the configuration failed.
 */
@Override public boolean configure(Context context,Container container,Object managed,Class<?> clazz) throws RobojectException {
  if (context instanceof Activity) {
    this.activity=(Activity)context;
  }
 else {
    return false;
  }
  this.managed=managed;
  if (managed instanceof Activity) {
    return true;
  }
  if (managed instanceof Fragment) {
    return true;
  }
  try {
    if (managed instanceof android.app.Fragment) {
      return true;
    }
  }
 catch (  NoClassDefFoundError e) {
  }
  return false;
}"
81376,"/** 
 * Method called by the container to initialize the container.
 * @param context   the android context
 * @param container the roboject container
 * @param managed   the managed instance
 * @param clazz     the managed class (the class of <tt>managed</tt>)
 * @return <code>true</code> if the injector wants to contribute to themanagement of the instance, <code>false</code> otherwise. In this latter case, the injector will be ignored for this instance.
 * @throws de.akquinet.android.roboject.RobojectException if the configuration failed.
 */
@Override public boolean configure(Context context,Container container,Object managed,Class<?> clazz) throws RobojectException {
  if (context instanceof Activity) {
    this.activity=(Activity)context;
  }
 else {
    return false;
  }
  this.managed=managed;
  if (managed instanceof Activity) {
    return true;
  }
  if (managed instanceof Fragment) {
    return true;
  }
  if (managed instanceof android.app.Fragment) {
    return true;
  }
  return false;
}","/** 
 * Method called by the container to initialize the container.
 * @param context   the android context
 * @param container the roboject container
 * @param managed   the managed instance
 * @param clazz     the managed class (the class of <tt>managed</tt>)
 * @return <code>true</code> if the injector wants to contribute to themanagement of the instance, <code>false</code> otherwise. In this latter case, the injector will be ignored for this instance.
 * @throws de.akquinet.android.roboject.RobojectException if the configuration failed.
 */
@Override public boolean configure(Context context,Container container,Object managed,Class<?> clazz) throws RobojectException {
  if (context instanceof Activity) {
    this.activity=(Activity)context;
  }
 else {
    return false;
  }
  this.managed=managed;
  if (managed instanceof Activity) {
    return true;
  }
  if (managed instanceof Fragment) {
    return true;
  }
  try {
    if (managed instanceof android.app.Fragment) {
      return true;
    }
  }
 catch (  NoClassDefFoundError e) {
  }
  return false;
}"
81377,"/** 
 * Method called by the container to initialize the container.
 * @param context   the android context
 * @param container the roboject container
 * @param managed   the managed instance
 * @param clazz     the managed class (the class of <tt>managed</tt>)
 * @return <code>true</code> if the injector wants to contribute to themanagement of the instance, <code>false</code> otherwise. In this latter case, the injector will be ignored for this instance.
 * @throws RobojectException if the configuration failed.
 */
@Override public boolean configure(Context context,Container container,Object managed,Class<?> clazz) throws RobojectException {
  this.context=context;
  this.managed=managed;
  this.container=container;
  if (managed instanceof Activity) {
    return true;
  }
  if (managed instanceof Fragment) {
    return true;
  }
  if (managed instanceof android.app.Fragment) {
    return true;
  }
  return false;
}","/** 
 * Method called by the container to initialize the container.
 * @param context   the android context
 * @param container the roboject container
 * @param managed   the managed instance
 * @param clazz     the managed class (the class of <tt>managed</tt>)
 * @return <code>true</code> if the injector wants to contribute to themanagement of the instance, <code>false</code> otherwise. In this latter case, the injector will be ignored for this instance.
 * @throws RobojectException if the configuration failed.
 */
@Override public boolean configure(Context context,Container container,Object managed,Class<?> clazz) throws RobojectException {
  this.context=context;
  this.managed=managed;
  this.container=container;
  if (managed instanceof Activity) {
    return true;
  }
  if (managed instanceof Fragment) {
    return true;
  }
  try {
    if (managed instanceof android.app.Fragment) {
      return true;
    }
  }
 catch (  NoClassDefFoundError e) {
  }
  return false;
}"
81378,"/** 
 * Method called by the container to initialize the container.
 * @param context   the android context
 * @param container the roboject container
 * @param managed   the managed instance
 * @param clazz     the managed class (the class of <tt>managed</tt>)
 * @return <code>true</code> if the injector wants to contribute to themanagement of the instance, <code>false</code> otherwise. In this latter case, the injector will be ignored for this instance.
 * @throws RobojectException if the configuration failed.
 */
@Override public boolean configure(Context context,Container container,Object managed,Class<?> clazz) throws RobojectException {
  if (context instanceof Activity) {
    this.activity=(Activity)context;
  }
 else {
    return false;
  }
  this.managed=managed;
  if (managed instanceof Activity) {
    return true;
  }
  if (managed instanceof Fragment) {
    return true;
  }
  if (managed instanceof android.app.Fragment) {
    return true;
  }
  return false;
}","/** 
 * Method called by the container to initialize the container.
 * @param context   the android context
 * @param container the roboject container
 * @param managed   the managed instance
 * @param clazz     the managed class (the class of <tt>managed</tt>)
 * @return <code>true</code> if the injector wants to contribute to themanagement of the instance, <code>false</code> otherwise. In this latter case, the injector will be ignored for this instance.
 * @throws RobojectException if the configuration failed.
 */
@Override public boolean configure(Context context,Container container,Object managed,Class<?> clazz) throws RobojectException {
  if (context instanceof Activity) {
    this.activity=(Activity)context;
  }
 else {
    return false;
  }
  this.managed=managed;
  if (managed instanceof Activity) {
    return true;
  }
  if (managed instanceof Fragment) {
    return true;
  }
  try {
    if (managed instanceof android.app.Fragment) {
      return true;
    }
  }
 catch (  NoClassDefFoundError e) {
  }
  return false;
}"
81379,"/** 
 * Contract for subclasses: You need to call super before relying on injections in  {@link #onCreate(Bundle)}.
 */
@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  try {
    new Container(this,this,getClass());
  }
 catch (  RobojectException e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Contract for subclasses: You need to call super before relying on injections in   {@link #onCreate(Bundle)}.
 */
@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  try {
    new Container(this,this,getClass());
  }
 catch (  RobojectException e) {
    throw new RuntimeException(e);
  }
}"
81380,"/** 
 * Inject an extra to the given field, using the value of the given annotation as extra id. If the annotation has no value, then use the field name as extra id.
 */
private void injectExtra(Field field,InjectExtra annotation){
  String value=annotation.value();
  Intent intent=activity.getIntent();
  if (InjectExtra.DEFAULT_VALUE.equals(value)) {
    value=field.getName();
  }
  Class<?> type=field.getType();
  Object extra=null;
  try {
    if (String.class.isAssignableFrom(type)) {
      extra=intent.getStringExtra(value);
    }
    if (ArrayList.class.isAssignableFrom(type)) {
      extra=intent.getStringArrayListExtra(value);
      if (extra == null) {
        extra=intent.getParcelableArrayListExtra(value);
      }
    }
 else     if (Boolean.class.isAssignableFrom(type)) {
      extra=intent.getBooleanExtra(value,false);
    }
 else     if (Bundle.class.isAssignableFrom(type)) {
      extra=intent.getBundleExtra(value);
    }
 else     if (Byte.class.isAssignableFrom(type)) {
      extra=intent.getByteExtra(value,(byte)0);
    }
 else     if (Character.class.isAssignableFrom(type)) {
      extra=intent.getCharExtra(value,(char)0);
    }
 else     if (CharSequence.class.isAssignableFrom(type)) {
      extra=intent.getCharSequenceExtra(value);
    }
 else     if (Double.class.isAssignableFrom(type)) {
      extra=intent.getDoubleExtra(value,0d);
    }
 else     if (Float.class.isAssignableFrom(type)) {
      extra=intent.getFloatExtra(value,0f);
    }
 else     if (Integer.class.isAssignableFrom(type)) {
      extra=intent.getIntExtra(value,0);
    }
 else     if (Long.class.isAssignableFrom(type)) {
      extra=intent.getLongExtra(value,0l);
    }
 else     if (Parcelable.class.isAssignableFrom(type)) {
      extra=intent.getParcelableExtra(value);
    }
 else     if (Serializable.class.isAssignableFrom(type)) {
      extra=intent.getSerializableExtra(value);
    }
 else     if (Short.class.isAssignableFrom(type)) {
      extra=intent.getShortExtra(value,(short)0);
    }
 else     if (type.isArray()) {
      Class<?> componentType=type.getComponentType();
      if (String.class.isAssignableFrom(componentType)) {
        extra=intent.getStringArrayExtra(value);
      }
 else       if (Boolean.class.isAssignableFrom(componentType)) {
        extra=intent.getBooleanArrayExtra(value);
      }
 else       if (Byte.class.isAssignableFrom(componentType)) {
        extra=intent.getByteArrayExtra(value);
      }
 else       if (Character.class.isAssignableFrom(componentType)) {
        extra=intent.getCharArrayExtra(value);
      }
 else       if (Double.class.isAssignableFrom(componentType)) {
        extra=intent.getDoubleArrayExtra(value);
      }
 else       if (Float.class.isAssignableFrom(componentType)) {
        extra=intent.getFloatArrayExtra(value);
      }
 else       if (Integer.class.isAssignableFrom(componentType)) {
        extra=intent.getIntArrayExtra(value);
      }
 else       if (Long.class.isAssignableFrom(componentType)) {
        extra=intent.getLongArrayExtra(value);
      }
 else       if (Parcelable.class.isAssignableFrom(componentType)) {
        extra=intent.getParcelableArrayExtra(value);
      }
 else       if (Short.class.isAssignableFrom(componentType)) {
        extra=intent.getShortArrayExtra(value);
      }
    }
    if (extra == null) {
      String message=""String_Node_Str"" + ""String_Node_Str"" + field.getName() + ""String_Node_Str""+ field.getDeclaringClass().getCanonicalName()+ ""String_Node_Str""+ ""String_Node_Str"";
      if (annotation.mandatory()) {
        throw new RuntimeException(message);
      }
 else {
        Log.i(getClass().getCanonicalName(),message);
        return;
      }
    }
    field.setAccessible(true);
    field.set(activity,extra);
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + field.getName() + ""String_Node_Str""+ field.getDeclaringClass().getCanonicalName(),e);
  }
}","/** 
 * Inject an extra to the given field, using the value of the given annotation as extra id. If the annotation has no value, then use the field name as extra id.
 */
private void injectExtra(Field field,InjectExtra annotation){
  String value=annotation.value();
  Intent intent=activity.getIntent();
  if (InjectExtra.DEFAULT_VALUE.equals(value)) {
    value=field.getName();
  }
  Class<?> type=field.getType();
  Object extra=null;
  try {
    if (String.class.isAssignableFrom(type)) {
      extra=intent.getStringExtra(value);
    }
 else     if (ArrayList.class.isAssignableFrom(type)) {
      extra=intent.getStringArrayListExtra(value);
      if (extra == null) {
        extra=intent.getParcelableArrayListExtra(value);
      }
    }
 else     if (Boolean.class.isAssignableFrom(type)) {
      extra=intent.getBooleanExtra(value,false);
    }
 else     if (Bundle.class.isAssignableFrom(type)) {
      extra=intent.getBundleExtra(value);
    }
 else     if (Byte.class.isAssignableFrom(type)) {
      extra=intent.getByteExtra(value,(byte)0);
    }
 else     if (Character.class.isAssignableFrom(type)) {
      extra=intent.getCharExtra(value,(char)0);
    }
 else     if (CharSequence.class.isAssignableFrom(type)) {
      extra=intent.getCharSequenceExtra(value);
    }
 else     if (Double.class.isAssignableFrom(type)) {
      extra=intent.getDoubleExtra(value,0d);
    }
 else     if (Float.class.isAssignableFrom(type)) {
      extra=intent.getFloatExtra(value,0f);
    }
 else     if (Integer.class.isAssignableFrom(type)) {
      extra=intent.getIntExtra(value,0);
    }
 else     if (Long.class.isAssignableFrom(type)) {
      extra=intent.getLongExtra(value,0l);
    }
 else     if (Parcelable.class.isAssignableFrom(type)) {
      extra=intent.getParcelableExtra(value);
    }
 else     if (Serializable.class.isAssignableFrom(type)) {
      extra=intent.getSerializableExtra(value);
    }
 else     if (Short.class.isAssignableFrom(type)) {
      extra=intent.getShortExtra(value,(short)0);
    }
 else     if (type.isArray()) {
      Class<?> componentType=type.getComponentType();
      if (String.class.isAssignableFrom(componentType)) {
        extra=intent.getStringArrayExtra(value);
      }
 else       if (Boolean.class.isAssignableFrom(componentType)) {
        extra=intent.getBooleanArrayExtra(value);
      }
 else       if (Byte.class.isAssignableFrom(componentType)) {
        extra=intent.getByteArrayExtra(value);
      }
 else       if (Character.class.isAssignableFrom(componentType)) {
        extra=intent.getCharArrayExtra(value);
      }
 else       if (Double.class.isAssignableFrom(componentType)) {
        extra=intent.getDoubleArrayExtra(value);
      }
 else       if (Float.class.isAssignableFrom(componentType)) {
        extra=intent.getFloatArrayExtra(value);
      }
 else       if (Integer.class.isAssignableFrom(componentType)) {
        extra=intent.getIntArrayExtra(value);
      }
 else       if (Long.class.isAssignableFrom(componentType)) {
        extra=intent.getLongArrayExtra(value);
      }
 else       if (Parcelable.class.isAssignableFrom(componentType)) {
        extra=intent.getParcelableArrayExtra(value);
      }
 else       if (Short.class.isAssignableFrom(componentType)) {
        extra=intent.getShortArrayExtra(value);
      }
    }
    if (extra == null) {
      String message=""String_Node_Str"" + ""String_Node_Str"" + field.getName() + ""String_Node_Str""+ field.getDeclaringClass().getCanonicalName()+ ""String_Node_Str""+ ""String_Node_Str"";
      if (annotation.mandatory()) {
        throw new RuntimeException(message);
      }
 else {
        Log.i(getClass().getCanonicalName(),message);
        return;
      }
    }
    field.setAccessible(true);
    field.set(activity,extra);
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + field.getName() + ""String_Node_Str""+ field.getDeclaringClass().getCanonicalName(),e);
  }
}"
81381,"@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (field.getType().isAssignableFrom(service.getClass())) {
    try {
      field.setAccessible(true);
      field.set(managed,service);
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
}","@Override public void onServiceConnected(ComponentName name,IBinder service){
  if (field.getType().isAssignableFrom(service.getClass())) {
    try {
      field.setAccessible(true);
      field.set(managed,service);
    }
 catch (    Exception e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
  if (managed instanceof RobojectActivity) {
    ((RobojectActivity)managed).onServiceConnected(name,service);
  }
}"
81382,"private void injectService(final Field field,Inject annotation){
  Class<? extends Service> androidServiceClass=annotation.value();
  Intent intent=new Intent(context,androidServiceClass);
  context.bindService(intent,new ServiceConnection(){
    @Override public void onServiceConnected(    ComponentName name,    IBinder service){
      if (field.getType().isAssignableFrom(service.getClass())) {
        try {
          field.setAccessible(true);
          field.set(managed,service);
        }
 catch (        Exception e) {
          throw new RuntimeException(""String_Node_Str"",e);
        }
      }
    }
    @Override public void onServiceDisconnected(    ComponentName name){
      try {
        field.set(managed,null);
      }
 catch (      IllegalArgumentException e) {
      }
catch (      IllegalAccessException e) {
      }
      ServiceInjector.this.managed=null;
    }
  }
,Service.BIND_AUTO_CREATE);
}","private void injectService(final Field field,Inject annotation){
  Class<? extends Service> androidServiceClass=annotation.value();
  Intent intent=new Intent(context,androidServiceClass);
  context.bindService(intent,new ServiceConnection(){
    @Override public void onServiceConnected(    ComponentName name,    IBinder service){
      if (field.getType().isAssignableFrom(service.getClass())) {
        try {
          field.setAccessible(true);
          field.set(managed,service);
        }
 catch (        Exception e) {
          throw new RuntimeException(""String_Node_Str"",e);
        }
      }
      if (managed instanceof RobojectActivity) {
        ((RobojectActivity)managed).onServiceConnected(name,service);
      }
    }
    @Override public void onServiceDisconnected(    ComponentName name){
      try {
        field.set(managed,null);
      }
 catch (      IllegalArgumentException e) {
      }
catch (      IllegalAccessException e) {
      }
      ServiceInjector.this.managed=null;
    }
  }
,Service.BIND_AUTO_CREATE);
}"
81383,"private static String readScript(File scriptFile) throws UnsupportedEncodingException, FileNotFoundException, IOException {
  Reader reader=null;
  try {
    reader=new InputStreamReader(new FileInputStream(scriptFile),PACK_FILE_ENCODING);
    StringWriter writer=new StringWriter();
    int i=0;
    char[] buff=new char[BUFFER_SIZE];
    while (i >= 0) {
      i=reader.read(buff);
      if (i > 0) {
        writer.write(buff,0,i);
      }
    }
    return writer.toString();
  }
 catch (  IOException e) {
    throw new IOException(""String_Node_Str"" + scriptFile.getAbsolutePath(),e);
  }
 finally {
    if (reader != null) {
      reader.close();
    }
  }
}","private static String readScript(File scriptFile) throws UnsupportedEncodingException, FileNotFoundException, IOException {
  Reader reader=null;
  try {
    reader=new InputStreamReader(new FileInputStream(scriptFile),PACK_FILE_ENCODING);
    StringWriter writer=new StringWriter();
    int i=0;
    char[] buff=new char[BUFFER_SIZE];
    while (i >= 0) {
      i=reader.read(buff);
      if (i > 0) {
        writer.write(buff,0,i);
      }
    }
    return writer.toString();
  }
 catch (  IOException e) {
    IOException ee=new IOException(""String_Node_Str"" + scriptFile.getAbsolutePath());
    ee.initCause(e);
    throw ee;
  }
 finally {
    if (reader != null) {
      reader.close();
    }
  }
}"
81384,"public void parseScript(File scriptFile,File outputDirectory,List<File> sourceFiles,List<File> outputFiles) throws IOException {
  File scriptDir=scriptFile.getParentFile();
  Context cx=Context.enter();
  try {
    Scriptable scope=cx.newObject(globalScope);
    String scriptBody=readScript(scriptFile);
    cx.evaluateString(scope,""String_Node_Str"" + scriptBody + ""String_Node_Str"",scriptFile.getAbsolutePath(),1,null);
    Scriptable script=(Scriptable)scope.get(""String_Node_Str"",scope);
    Scriptable packages=(Scriptable)script.get(""String_Node_Str"",script);
    int i=0;
    while (packages.has(i,packages)) {
      Scriptable packageDef=(Scriptable)packages.get(i++,packages);
      String output=(String)packageDef.get(""String_Node_Str"",packageDef);
      outputFiles.add(new File(outputDirectory,output));
      Scriptable files=(Scriptable)packageDef.get(""String_Node_Str"",packageDef);
      int j=0;
      while (files.has(j,files)) {
        String file=(String)files.get(j++,files);
        sourceFiles.add(new File(scriptDir,file));
      }
    }
  }
 catch (  Exception e) {
    throw new IOException(""String_Node_Str"" + scriptFile.getAbsolutePath(),e);
  }
 finally {
    Context.exit();
  }
}","public void parseScript(File scriptFile,File outputDirectory,List<File> sourceFiles,List<File> outputFiles) throws IOException {
  File scriptDir=scriptFile.getParentFile();
  Context cx=Context.enter();
  try {
    Scriptable scope=cx.newObject(globalScope);
    String scriptBody=readScript(scriptFile);
    cx.evaluateString(scope,""String_Node_Str"" + scriptBody + ""String_Node_Str"",scriptFile.getAbsolutePath(),1,null);
    Scriptable script=(Scriptable)scope.get(""String_Node_Str"",scope);
    Scriptable packages=(Scriptable)script.get(""String_Node_Str"",script);
    int i=0;
    while (packages.has(i,packages)) {
      Scriptable packageDef=(Scriptable)packages.get(i++,packages);
      String output=(String)packageDef.get(""String_Node_Str"",packageDef);
      outputFiles.add(new File(outputDirectory,output));
      Scriptable files=(Scriptable)packageDef.get(""String_Node_Str"",packageDef);
      int j=0;
      while (files.has(j,files)) {
        String file=(String)files.get(j++,files);
        sourceFiles.add(new File(scriptDir,file));
      }
    }
  }
 catch (  Exception e) {
    IOException ee=new IOException(""String_Node_Str"" + scriptFile.getAbsolutePath());
    ee.initCause(e);
    throw ee;
  }
 finally {
    Context.exit();
  }
}"
81385,"@Override public View getView(int position,View convertView,ViewGroup parent){
  String ayah=ayahList.get(position);
  String translatedAya=""String_Node_Str"";
  if (this.nTranslationVal != 0) {
    translatedAya=translatedAyaList.get(position);
  }
  ViewHolder holder=null;
  LayoutInflater mInflater=(LayoutInflater)context.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.list_item_ayas,null);
    holder=new ViewHolder();
    holder.txtAyaNum=(TextView)convertView.findViewById(R.id.ayanum);
    holder.txtAya=(TextView)convertView.findViewById(R.id.aya);
    holder.txtTranslatedAya=(TextView)convertView.findViewById(R.id.translatedaya);
    holder.spacer=(View)convertView.findViewById(R.id.spacer);
    convertView.setTag(holder);
  }
 else   holder=(ViewHolder)convertView.getTag();
  holder.txtAyaNum.setText(String.valueOf(position + 1));
  Typeface externalFont=Typeface.createFromAsset(context.getAssets(),""String_Node_Str"");
  if (Build.VERSION.SDK_INT != Build.VERSION_CODES.JELLY_BEAN) {
    holder.txtAya.setTypeface(externalFont);
    if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB_MR2) {
      ayah=ayah + '\u200f';
    }
  }
  holder.txtAya.setText(ayah);
  holder.txtAya.setGravity(Gravity.RIGHT);
  if (nTranslationVal != 0) {
    holder.txtTranslatedAya.setVisibility(View.VISIBLE);
    holder.spacer.setVisibility(View.VISIBLE);
    holder.txtTranslatedAya.setGravity(Gravity.LEFT);
    if (nTranslationVal == 1) {
      Spanned translatedAyaSpan=Html.fromHtml(translatedAya);
      holder.txtTranslatedAya.setText(translatedAyaSpan);
    }
 else     if ((nTranslationVal == 2) || (nTranslationVal == 3)) {
      holder.txtTranslatedAya.setText(translatedAya);
    }
 else     if (nTranslationVal == 4) {
      externalFont=Typeface.createFromAsset(context.getAssets(),""String_Node_Str"");
      if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN_MR1) {
        holder.txtTranslatedAya.setTypeface(externalFont);
        holder.txtTranslatedAya.setTextSize(20);
        translatedAya=ComplexCharacterMapper.fix(translatedAya,0);
      }
      holder.txtTranslatedAya.setText(translatedAya);
    }
  }
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  String ayah=ayahList.get(position);
  String translatedAya=""String_Node_Str"";
  if (this.nTranslationVal != 0) {
    translatedAya=translatedAyaList.get(position);
  }
  ViewHolder holder=null;
  LayoutInflater mInflater=(LayoutInflater)context.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.list_item_ayas,null);
    holder=new ViewHolder();
    holder.txtAyaNum=(TextView)convertView.findViewById(R.id.ayanum);
    holder.txtAya=(TextView)convertView.findViewById(R.id.aya);
    holder.txtTranslatedAya=(TextView)convertView.findViewById(R.id.translatedaya);
    holder.spacer=(View)convertView.findViewById(R.id.spacer);
    convertView.setTag(holder);
  }
 else   holder=(ViewHolder)convertView.getTag();
  holder.txtAyaNum.setText(String.valueOf(position + 1));
  Typeface externalFont=Typeface.createFromAsset(context.getAssets(),""String_Node_Str"");
  if ((Build.VERSION.SDK_INT != Build.VERSION_CODES.JELLY_BEAN) && (Build.VERSION.SDK_INT != Build.VERSION_CODES.ICE_CREAM_SANDWICH)) {
    holder.txtAya.setTypeface(externalFont);
    if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB_MR2) {
      ayah=ayah + '\u200f';
    }
  }
  holder.txtAya.setText(ayah);
  holder.txtAya.setGravity(Gravity.RIGHT);
  if (nTranslationVal != 0) {
    holder.txtTranslatedAya.setVisibility(View.VISIBLE);
    holder.spacer.setVisibility(View.VISIBLE);
    holder.txtTranslatedAya.setGravity(Gravity.LEFT);
    if (nTranslationVal == 1) {
      Spanned translatedAyaSpan=Html.fromHtml(translatedAya);
      holder.txtTranslatedAya.setText(translatedAyaSpan);
    }
 else     if ((nTranslationVal == 2) || (nTranslationVal == 3)) {
      holder.txtTranslatedAya.setText(translatedAya);
    }
 else     if (nTranslationVal == 4) {
      externalFont=Typeface.createFromAsset(context.getAssets(),""String_Node_Str"");
      if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN_MR1) {
        holder.txtTranslatedAya.setTypeface(externalFont);
        holder.txtTranslatedAya.setTextSize(20);
        translatedAya=ComplexCharacterMapper.fix(translatedAya,0);
      }
      holder.txtTranslatedAya.setText(translatedAya);
    }
  }
  return convertView;
}"
81386,"public static ArrayList<String> getAyahList(Context context,XmlPullParser xpp,int position){
  ArrayList<String> ayahList=new ArrayList<String>();
  try {
    boolean suraFound=false;
    boolean suraFoundandFinishedGet=false;
    int ayanum=0;
    while ((xpp.getEventType() != XmlPullParser.END_DOCUMENT)) {
      if (xpp.getEventType() == XmlPullParser.START_TAG) {
        if (xpp.getName().equals(""String_Node_Str"")) {
          if (xpp.getAttributeValue(0).equals(position + ""String_Node_Str"")) {
            xpp.nextTag();
            suraFound=true;
            suraFoundandFinishedGet=false;
            continue;
          }
 else {
            if (suraFound) {
              suraFoundandFinishedGet=true;
            }
          }
        }
        if (suraFoundandFinishedGet) {
          break;
        }
        if (xpp.getName().equals(""String_Node_Str"") && suraFound) {
          String ayah=""String_Node_Str"";
          if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB_MR2) {
            ayah=ArabicUtilities.reshapeSentence(xpp.getAttributeValue(1));
          }
 else           if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN) {
            ayah=xpp.getAttributeValue(1);
          }
 else {
            ayah=xpp.getAttributeValue(1);
            ayah=ayah.replaceAll(""String_Node_Str"",""String_Node_Str"");
          }
          ayahList.add(ayah);
          ayanum+=1;
        }
      }
      xpp.next();
    }
  }
 catch (  Exception ex) {
    return ayahList;
  }
  return ayahList;
}","public static ArrayList<String> getAyahList(Context context,XmlPullParser xpp,int position){
  ArrayList<String> ayahList=new ArrayList<String>();
  try {
    boolean suraFound=false;
    boolean suraFoundandFinishedGet=false;
    int ayanum=0;
    while ((xpp.getEventType() != XmlPullParser.END_DOCUMENT)) {
      if (xpp.getEventType() == XmlPullParser.START_TAG) {
        if (xpp.getName().equals(""String_Node_Str"")) {
          if (xpp.getAttributeValue(0).equals(position + ""String_Node_Str"")) {
            xpp.nextTag();
            suraFound=true;
            suraFoundandFinishedGet=false;
            continue;
          }
 else {
            if (suraFound) {
              suraFoundandFinishedGet=true;
            }
          }
        }
        if (suraFoundandFinishedGet) {
          break;
        }
        if (xpp.getName().equals(""String_Node_Str"") && suraFound) {
          String ayah=""String_Node_Str"";
          if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB_MR2) {
            ayah=ArabicUtilities.reshapeSentence(xpp.getAttributeValue(1));
          }
 else           if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN) {
            ayah=xpp.getAttributeValue(1);
            if (Build.VERSION.SDK_INT == Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1) {
              ayah=ayah.replaceAll(""String_Node_Str"",""String_Node_Str"");
            }
          }
 else {
            ayah=xpp.getAttributeValue(1);
            ayah=ayah.replaceAll(""String_Node_Str"",""String_Node_Str"");
          }
          ayahList.add(ayah);
          ayanum+=1;
        }
      }
      xpp.next();
    }
  }
 catch (  Exception ex) {
    return ayahList;
  }
  return ayahList;
}"
81387,"@Override public View getView(int position,View convertView,ViewGroup parent){
  String ayah=ayahList.get(position);
  String translatedAya=""String_Node_Str"";
  if (this.nTranslationVal != 0) {
    translatedAya=translatedAyaList.get(position);
  }
  ViewHolder holder=null;
  LayoutInflater mInflater=(LayoutInflater)context.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.list_item_ayas,null);
    holder=new ViewHolder();
    holder.txtAyaNum=(TextView)convertView.findViewById(R.id.ayanum);
    holder.txtAya=(TextView)convertView.findViewById(R.id.aya);
    holder.txtTranslatedAya=(TextView)convertView.findViewById(R.id.translatedaya);
    holder.spacer=(View)convertView.findViewById(R.id.spacer);
    convertView.setTag(holder);
  }
 else   holder=(ViewHolder)convertView.getTag();
  holder.txtAyaNum.setText(String.valueOf(position + 1));
  Typeface externalFont=Typeface.createFromAsset(context.getAssets(),""String_Node_Str"");
  holder.txtAya.setTypeface(externalFont);
  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB_MR2) {
    ayah=ayah + '\u200f';
    holder.txtAya.setTypeface(externalFont);
  }
  holder.txtAya.setText(ayah);
  holder.txtAya.setGravity(Gravity.RIGHT);
  if (nTranslationVal != 0) {
    holder.txtTranslatedAya.setVisibility(View.VISIBLE);
    holder.spacer.setVisibility(View.VISIBLE);
    holder.txtTranslatedAya.setGravity(Gravity.LEFT);
    if (nTranslationVal == 1) {
      Spanned translatedAyaSpan=Html.fromHtml(translatedAya);
      holder.txtTranslatedAya.setText(translatedAyaSpan);
    }
 else     if ((nTranslationVal == 2) || (nTranslationVal == 3)) {
      holder.txtTranslatedAya.setText(translatedAya);
    }
 else     if (nTranslationVal == 4) {
      externalFont=Typeface.createFromAsset(context.getAssets(),""String_Node_Str"");
      if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN_MR1) {
        holder.txtTranslatedAya.setTypeface(externalFont);
        holder.txtTranslatedAya.setTextSize(20);
        translatedAya=ComplexCharacterMapper.fix(translatedAya,0);
      }
      holder.txtTranslatedAya.setText(translatedAya);
    }
  }
  return convertView;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  String ayah=ayahList.get(position);
  String translatedAya=""String_Node_Str"";
  if (this.nTranslationVal != 0) {
    translatedAya=translatedAyaList.get(position);
  }
  ViewHolder holder=null;
  LayoutInflater mInflater=(LayoutInflater)context.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.list_item_ayas,null);
    holder=new ViewHolder();
    holder.txtAyaNum=(TextView)convertView.findViewById(R.id.ayanum);
    holder.txtAya=(TextView)convertView.findViewById(R.id.aya);
    holder.txtTranslatedAya=(TextView)convertView.findViewById(R.id.translatedaya);
    holder.spacer=(View)convertView.findViewById(R.id.spacer);
    convertView.setTag(holder);
  }
 else   holder=(ViewHolder)convertView.getTag();
  holder.txtAyaNum.setText(String.valueOf(position + 1));
  Typeface externalFont=Typeface.createFromAsset(context.getAssets(),""String_Node_Str"");
  if (Build.VERSION.SDK_INT != Build.VERSION_CODES.JELLY_BEAN) {
    holder.txtAya.setTypeface(externalFont);
    if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB_MR2) {
      ayah=ayah + '\u200f';
    }
  }
  holder.txtAya.setText(ayah);
  holder.txtAya.setGravity(Gravity.RIGHT);
  if (nTranslationVal != 0) {
    holder.txtTranslatedAya.setVisibility(View.VISIBLE);
    holder.spacer.setVisibility(View.VISIBLE);
    holder.txtTranslatedAya.setGravity(Gravity.LEFT);
    if (nTranslationVal == 1) {
      Spanned translatedAyaSpan=Html.fromHtml(translatedAya);
      holder.txtTranslatedAya.setText(translatedAyaSpan);
    }
 else     if ((nTranslationVal == 2) || (nTranslationVal == 3)) {
      holder.txtTranslatedAya.setText(translatedAya);
    }
 else     if (nTranslationVal == 4) {
      externalFont=Typeface.createFromAsset(context.getAssets(),""String_Node_Str"");
      if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN_MR1) {
        holder.txtTranslatedAya.setTypeface(externalFont);
        holder.txtTranslatedAya.setTextSize(20);
        translatedAya=ComplexCharacterMapper.fix(translatedAya,0);
      }
      holder.txtTranslatedAya.setText(translatedAya);
    }
  }
  return convertView;
}"
81388,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  try {
    setContentView(R.layout.displaysurah);
    ayahListView=(ListView)findViewById(R.id.ayahList);
    ArrayList<String> ayahList=new ArrayList<String>();
    Typeface externalFont=Typeface.createFromAsset(getAssets(),""String_Node_Str"");
    XmlPullParser xpp=this.getResources().getXml(R.xml.quransimple);
    Bundle bundle=this.getIntent().getExtras();
    suraName=bundle.getString(""String_Node_Str"");
    suraPosition=bundle.getInt(""String_Node_Str"");
    numAyas=bundle.getInt(""String_Node_Str"");
    ayahList=SurahDataParser.getAyahList(this,xpp,suraPosition);
    int nTranslationVal=bundle.getInt(""String_Node_Str"");
    statTranslationVal=nTranslationVal;
    if (nTranslationVal == 1) {
      xpp=this.getResources().getXml(R.xml.entransliteration);
    }
 else     if (nTranslationVal == 2) {
      xpp=this.getResources().getXml(R.xml.ensahih);
    }
 else     if (nTranslationVal == 3) {
      xpp=this.getResources().getXml(R.xml.enyusufali);
    }
 else     if (nTranslationVal == 4) {
      xpp=this.getResources().getXml(R.xml.mlabdulhameed);
    }
    ArrayList<String> translatedAyaList=new ArrayList<String>();
    if (nTranslationVal != 0) {
      translatedAyaList=TranslatedSuraDataParser.getTranslatedAyaList(this,xpp,suraPosition);
    }
    CustomAyaListAdapter customAdapter=new CustomAyaListAdapter(this,ayahList,translatedAyaList,nTranslationVal);
    ayahListView.setAdapter(customAdapter);
    array_gotoAya=new String[numAyas];
    for (int i=0; i < numAyas; i++) {
      array_gotoAya[i]=String.valueOf(i + 1);
    }
    getAudioPath(DisplaySuraActivity.this.getExternalFilesDir(null).getAbsolutePath());
    ayahListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
      public void onItemClick(      AdapterView<?> parent,      View view,      int position,      long id){
        if (ayaOnTapEnabled) {
          if (Recitation.isPlaying()) {
            Recitation.pausePlayer();
          }
 else {
            Recitation.currentAyaPos=position + 2;
            Recitation.play(DisplaySuraActivity.this,DisplaySuraActivity.this.suraPosition,DisplaySuraActivity.this.numAyas,false);
          }
        }
      }
    }
);
  }
 catch (  Exception ex) {
    AlertDialog.Builder adb=new AlertDialog.Builder(DisplaySuraActivity.this);
    adb.setTitle(""String_Node_Str"");
    adb.setMessage(""String_Node_Str"" + ex.toString() + ""String_Node_Str""+ ex.getMessage());
    adb.setNegativeButton(""String_Node_Str"",null);
    adb.show();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  try {
    setContentView(R.layout.displaysurah);
    ayahListView=(ListView)findViewById(R.id.ayahList);
    ArrayList<String> ayahList=new ArrayList<String>();
    Typeface externalFont=Typeface.createFromAsset(getAssets(),""String_Node_Str"");
    XmlPullParser xpp=this.getResources().getXml(R.xml.quransimple);
    Bundle bundle=this.getIntent().getExtras();
    suraName=bundle.getString(""String_Node_Str"");
    suraPosition=bundle.getInt(""String_Node_Str"");
    numAyas=bundle.getInt(""String_Node_Str"");
    ayahList=SurahDataParser.getAyahList(this,xpp,suraPosition);
    int nTranslationVal=bundle.getInt(""String_Node_Str"");
    statTranslationVal=nTranslationVal;
    if (nTranslationVal == 1) {
      xpp=this.getResources().getXml(R.xml.entransliteration);
    }
 else     if (nTranslationVal == 2) {
      xpp=this.getResources().getXml(R.xml.ensahih);
    }
 else     if (nTranslationVal == 3) {
      xpp=this.getResources().getXml(R.xml.enyusufali);
    }
 else     if (nTranslationVal == 4) {
      xpp=this.getResources().getXml(R.xml.mlabdulhameed);
    }
    ArrayList<String> translatedAyaList=new ArrayList<String>();
    if (nTranslationVal != 0) {
      translatedAyaList=TranslatedSuraDataParser.getTranslatedAyaList(this,xpp,suraPosition);
    }
    CustomAyaListAdapter customAdapter=new CustomAyaListAdapter(this,ayahList,translatedAyaList,nTranslationVal);
    ayahListView.setAdapter(customAdapter);
    array_gotoAya=new String[numAyas];
    for (int i=0; i < numAyas; i++) {
      array_gotoAya[i]=String.valueOf(i + 1);
    }
    boolean mExternalStorageAvailable=false;
    boolean mExternalStorageWritable=false;
    String state=Environment.getExternalStorageState();
    if (Environment.MEDIA_MOUNTED.equals(state)) {
      mExternalStorageAvailable=mExternalStorageWritable=true;
    }
 else     if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {
      mExternalStorageAvailable=true;
      mExternalStorageWritable=false;
    }
 else {
      mExternalStorageAvailable=mExternalStorageWritable=false;
    }
    if ((!mExternalStorageAvailable) || (!mExternalStorageWritable)) {
      AlertDialog.Builder adb=new AlertDialog.Builder(DisplaySuraActivity.this);
      adb.setTitle(""String_Node_Str"");
      adb.setMessage(""String_Node_Str"");
      adb.setPositiveButton(""String_Node_Str"",null);
      adb.show();
    }
 else {
      getAudioPath(DisplaySuraActivity.this.getExternalFilesDir(null).getAbsolutePath());
    }
    ayahListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
      public void onItemClick(      AdapterView<?> parent,      View view,      int position,      long id){
        if (ayaOnTapEnabled) {
          if (Recitation.isPlaying()) {
            Recitation.pausePlayer();
          }
 else {
            Recitation.currentAyaPos=position + 2;
            Recitation.play(DisplaySuraActivity.this,DisplaySuraActivity.this.suraPosition,DisplaySuraActivity.this.numAyas,false);
          }
        }
      }
    }
);
  }
 catch (  Exception ex) {
    AlertDialog.Builder adb=new AlertDialog.Builder(DisplaySuraActivity.this);
    adb.setTitle(""String_Node_Str"");
    adb.setMessage(""String_Node_Str"" + ex.toString() + ""String_Node_Str""+ ex.getMessage());
    adb.setNegativeButton(""String_Node_Str"",null);
    adb.show();
  }
}"
81389,"public static ArrayList<String> getAyahList(Context context,XmlPullParser xpp,int position){
  ArrayList<String> ayahList=new ArrayList<String>();
  try {
    boolean suraFound=false;
    boolean suraFoundandFinishedGet=false;
    int ayanum=0;
    while ((xpp.getEventType() != XmlPullParser.END_DOCUMENT)) {
      if (xpp.getEventType() == XmlPullParser.START_TAG) {
        if (xpp.getName().equals(""String_Node_Str"")) {
          if (xpp.getAttributeValue(0).equals(position + ""String_Node_Str"")) {
            xpp.nextTag();
            suraFound=true;
            suraFoundandFinishedGet=false;
            continue;
          }
 else {
            if (suraFound) {
              suraFoundandFinishedGet=true;
            }
          }
        }
        if (suraFoundandFinishedGet) {
          break;
        }
        if (xpp.getName().equals(""String_Node_Str"") && suraFound) {
          String ayah=""String_Node_Str"";
          if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN_MR1) {
            ayah=ArabicUtilities.reshapeSentence(xpp.getAttributeValue(1));
          }
 else {
            ayah=xpp.getAttributeValue(1);
          }
          ayahList.add(ayah);
          ayanum+=1;
        }
      }
      xpp.next();
    }
  }
 catch (  Exception ex) {
    return ayahList;
  }
  return ayahList;
}","public static ArrayList<String> getAyahList(Context context,XmlPullParser xpp,int position){
  ArrayList<String> ayahList=new ArrayList<String>();
  try {
    boolean suraFound=false;
    boolean suraFoundandFinishedGet=false;
    int ayanum=0;
    while ((xpp.getEventType() != XmlPullParser.END_DOCUMENT)) {
      if (xpp.getEventType() == XmlPullParser.START_TAG) {
        if (xpp.getName().equals(""String_Node_Str"")) {
          if (xpp.getAttributeValue(0).equals(position + ""String_Node_Str"")) {
            xpp.nextTag();
            suraFound=true;
            suraFoundandFinishedGet=false;
            continue;
          }
 else {
            if (suraFound) {
              suraFoundandFinishedGet=true;
            }
          }
        }
        if (suraFoundandFinishedGet) {
          break;
        }
        if (xpp.getName().equals(""String_Node_Str"") && suraFound) {
          String ayah=""String_Node_Str"";
          if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB_MR2) {
            ayah=ArabicUtilities.reshapeSentence(xpp.getAttributeValue(1));
          }
 else           if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN) {
            ayah=xpp.getAttributeValue(1);
          }
 else {
            ayah=xpp.getAttributeValue(1);
            ayah=ayah.replaceAll(""String_Node_Str"",""String_Node_Str"");
          }
          ayahList.add(ayah);
          ayanum+=1;
        }
      }
      xpp.next();
    }
  }
 catch (  Exception ex) {
    return ayahList;
  }
  return ayahList;
}"
81390,"public void actionPerformed(ActionEvent event){
  if (Jail.timeUpdateRunning)   return;
  Jail.timeUpdateRunning=true;
  if (UpdateTime == 0) {
    getServer().getScheduler().scheduleSyncDelayedTask(Jail.instance,new Runnable(){
      public void run(){
        for (        JailPrisoner prisoner : prisoners.values().toArray(new JailPrisoner[0])) {
          Util.debug(prisoner,""String_Node_Str"");
          Player player=getServer().getPlayerExact(prisoner.getName());
          if (prisoner.getRemainingTime() > 0 && (player != null || (prisoner.getJail() != null && prisoner.getJail().getSettings().getBoolean(Setting.CountdownTimeWhenOffline)))) {
            Util.debug(prisoner,""String_Node_Str"");
            prisoner.setRemainingTime(prisoner.getRemainingTime() - 1);
            InputOutput.UpdatePrisoner(prisoner);
            if (prisoner.getRemainingTime() == 0) {
              Util.debug(prisoner,""String_Node_Str"");
              prisoner.release();
            }
          }
          if (player != null && prisoner.getJail() != null) {
            if (prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime) > 0.0) {
              prisoner.setAFKTime(prisoner.getAFKTime() + 1);
              if (prisoner.getAFKTimeMinutes() > prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime)) {
                Util.debug(prisoner,""String_Node_Str"");
                prisoner.setAFKTime(0);
                player.kickPlayer(prisoner.getJail().getSettings().getString(Setting.MessageAFKKick));
              }
            }
          }
        }
      }
    }
,1L);
    UpdateTime++;
  }
 else {
    UpdateTime++;
    if (UpdateTime > 9) {
      UpdateTime=0;
    }
  }
  for (  JailPrisoner prisoner : prisoners.values()) {
    Player player=getServer().getPlayerExact(prisoner.getName());
    if (player == null || prisoner.getJail() == null || player.getGameMode() == GameMode.CREATIVE)     continue;
    if (!prisoner.getJail().getSettings().getBoolean(Setting.EnableFoodControl))     continue;
    int minfood=prisoner.getJail().getSettings().getInt(Setting.FoodControlMinimumFood);
    int maxfood=prisoner.getJail().getSettings().getInt(Setting.FoodControlMaximumFood);
    if (player.getFoodLevel() < minfood || player.getFoodLevel() > maxfood) {
      player.setFoodLevel((minfood + maxfood) / 2);
    }
  }
  Jail.timeUpdateRunning=false;
}","public void actionPerformed(ActionEvent event){
  if (Jail.timeUpdateRunning)   return;
  Jail.timeUpdateRunning=true;
  if (UpdateTime == 0) {
    getServer().getScheduler().scheduleSyncDelayedTask(Jail.instance,new Runnable(){
      public void run(){
        for (        JailPrisoner prisoner : prisoners.values().toArray(new JailPrisoner[0])) {
          Util.debug(prisoner,""String_Node_Str"");
          Util.debug(prisoner,""String_Node_Str"" + prisoner.getName() + ""String_Node_Str"");
          Player player=getServer().getPlayerExact(prisoner.getName());
          Util.debug(prisoner,""String_Node_Str"" + prisoner.getRemainingTime());
          Util.debug(""String_Node_Str"" + String.valueOf(player));
          if (prisoner.getRemainingTime() > 0 && (player != null || (prisoner.getJail() != null && prisoner.getJail().getSettings().getBoolean(Setting.CountdownTimeWhenOffline)))) {
            Util.debug(prisoner,""String_Node_Str"");
            prisoner.setRemainingTime(prisoner.getRemainingTime() - 1);
            InputOutput.UpdatePrisoner(prisoner);
            if (prisoner.getRemainingTime() == 0) {
              Util.debug(prisoner,""String_Node_Str"");
              prisoner.release();
            }
          }
          if (player != null && prisoner.getJail() != null) {
            if (prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime) > 0.0) {
              prisoner.setAFKTime(prisoner.getAFKTime() + 1);
              if (prisoner.getAFKTimeMinutes() > prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime)) {
                Util.debug(prisoner,""String_Node_Str"");
                prisoner.setAFKTime(0);
                player.kickPlayer(prisoner.getJail().getSettings().getString(Setting.MessageAFKKick));
              }
            }
          }
        }
      }
    }
,1L);
    UpdateTime++;
  }
 else {
    UpdateTime++;
    if (UpdateTime > 9) {
      UpdateTime=0;
    }
  }
  for (  JailPrisoner prisoner : prisoners.values()) {
    Player player=getServer().getPlayerExact(prisoner.getName());
    if (player == null || prisoner.getJail() == null || player.getGameMode() == GameMode.CREATIVE)     continue;
    if (!prisoner.getJail().getSettings().getBoolean(Setting.EnableFoodControl))     continue;
    int minfood=prisoner.getJail().getSettings().getInt(Setting.FoodControlMinimumFood);
    int maxfood=prisoner.getJail().getSettings().getInt(Setting.FoodControlMaximumFood);
    if (player.getFoodLevel() < minfood || player.getFoodLevel() > maxfood) {
      player.setFoodLevel((minfood + maxfood) / 2);
    }
  }
  Jail.timeUpdateRunning=false;
}"
81391,"public void run(){
  for (  JailPrisoner prisoner : prisoners.values().toArray(new JailPrisoner[0])) {
    Util.debug(prisoner,""String_Node_Str"");
    Player player=getServer().getPlayerExact(prisoner.getName());
    if (prisoner.getRemainingTime() > 0 && (player != null || (prisoner.getJail() != null && prisoner.getJail().getSettings().getBoolean(Setting.CountdownTimeWhenOffline)))) {
      Util.debug(prisoner,""String_Node_Str"");
      prisoner.setRemainingTime(prisoner.getRemainingTime() - 1);
      InputOutput.UpdatePrisoner(prisoner);
      if (prisoner.getRemainingTime() == 0) {
        Util.debug(prisoner,""String_Node_Str"");
        prisoner.release();
      }
    }
    if (player != null && prisoner.getJail() != null) {
      if (prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime) > 0.0) {
        prisoner.setAFKTime(prisoner.getAFKTime() + 1);
        if (prisoner.getAFKTimeMinutes() > prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime)) {
          Util.debug(prisoner,""String_Node_Str"");
          prisoner.setAFKTime(0);
          player.kickPlayer(prisoner.getJail().getSettings().getString(Setting.MessageAFKKick));
        }
      }
    }
  }
}","public void run(){
  for (  JailPrisoner prisoner : prisoners.values().toArray(new JailPrisoner[0])) {
    Util.debug(prisoner,""String_Node_Str"");
    Util.debug(prisoner,""String_Node_Str"" + prisoner.getName() + ""String_Node_Str"");
    Player player=getServer().getPlayerExact(prisoner.getName());
    Util.debug(prisoner,""String_Node_Str"" + prisoner.getRemainingTime());
    Util.debug(""String_Node_Str"" + String.valueOf(player));
    if (prisoner.getRemainingTime() > 0 && (player != null || (prisoner.getJail() != null && prisoner.getJail().getSettings().getBoolean(Setting.CountdownTimeWhenOffline)))) {
      Util.debug(prisoner,""String_Node_Str"");
      prisoner.setRemainingTime(prisoner.getRemainingTime() - 1);
      InputOutput.UpdatePrisoner(prisoner);
      if (prisoner.getRemainingTime() == 0) {
        Util.debug(prisoner,""String_Node_Str"");
        prisoner.release();
      }
    }
    if (player != null && prisoner.getJail() != null) {
      if (prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime) > 0.0) {
        prisoner.setAFKTime(prisoner.getAFKTime() + 1);
        if (prisoner.getAFKTimeMinutes() > prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime)) {
          Util.debug(prisoner,""String_Node_Str"");
          prisoner.setAFKTime(0);
          player.kickPlayer(prisoner.getJail().getSettings().getString(Setting.MessageAFKKick));
        }
      }
    }
  }
}"
81392,"/** 
 * Restores items from inventory string to specified player. Inventory string will be deleted.
 * @param player player that will receive items
 */
public void restoreInventory(Player player){
  if (inventory == null)   return;
  String[] inv=inventory.split(""String_Node_Str"");
  for (  String i : inv) {
    if (i == null || i.trim().equals(""String_Node_Str""))     return;
    String[] items=i.split(""String_Node_Str"");
    ItemStack item=new ItemStack(Integer.parseInt(items[0]),Integer.parseInt(items[1]));
    item.setDurability(Short.parseShort(items[2]));
    if (items.length > 3 && items[3].contains(""String_Node_Str"")) {
      String[] enchantments=items[3].split(""String_Node_Str"");
      for (      String e : enchantments) {
        item.addEnchantment(Enchantment.getById(Integer.parseInt(e.split(""String_Node_Str"")[0])),Integer.parseInt(e.split(""String_Node_Str"")[1]));
      }
    }
    if (player.getInventory().firstEmpty() == -1)     player.getWorld().dropItem(player.getLocation(),item);
 else     player.getInventory().addItem(item);
  }
  inventory=""String_Node_Str"";
  InputOutput.UpdatePrisoner(this);
}","/** 
 * Restores items from inventory string to specified player. Inventory string will be deleted.
 * @param player player that will receive items
 */
public void restoreInventory(Player player){
  if (inventory == null)   return;
  String[] inv=inventory.split(""String_Node_Str"");
  for (  String i : inv) {
    if (i == null || i.trim().equals(""String_Node_Str""))     return;
    String[] items=i.split(""String_Node_Str"");
    ItemStack item=new ItemStack(Integer.parseInt(items[0]),Integer.parseInt(items[1]));
    item.setDurability(Short.parseShort(items[2]));
    if (items.length > 3 && items[3].contains(""String_Node_Str"")) {
      String[] enchantments=items[3].split(""String_Node_Str"");
      for (      String e : enchantments) {
        item.addUnsafeEnchantment(Enchantment.getById(Integer.parseInt(e.split(""String_Node_Str"")[0])),Integer.parseInt(e.split(""String_Node_Str"")[1]));
      }
    }
    if (player.getInventory().firstEmpty() == -1)     player.getWorld().dropItem(player.getLocation(),item);
 else     player.getInventory().addItem(item);
  }
  inventory=""String_Node_Str"";
  InputOutput.UpdatePrisoner(this);
}"
81393,"public Boolean run(CommandSender sender,String[] args){
  if (args.length < 1)   Util.Message(""String_Node_Str"",sender);
 else   if (!Jail.zones.containsKey(args[0].toLowerCase())) {
    Util.Message(""String_Node_Str"",sender);
    return true;
  }
 else {
    if (Jail.zones.size() < 2 && Jail.prisoners.size() > 0) {
      Util.Message(""String_Node_Str"",sender);
      return true;
    }
 else {
      JailZone zone=Jail.zones.get(args[0].toLowerCase());
      zone.delete();
      Util.Message(""String_Node_Str"",sender);
      return true;
    }
  }
  if (InputOutput.global.getBoolean(Setting.LogJailingIntoConsole.getString(),false)) {
    String jailer;
    if (sender instanceof Player)     jailer=((Player)sender).getName();
 else     if (sender == null)     jailer=""String_Node_Str"";
 else     jailer=""String_Node_Str"";
    Jail.log.info(""String_Node_Str"" + args[0] + ""String_Node_Str""+ jailer);
  }
  return true;
}","public Boolean run(CommandSender sender,String[] args){
  if (args.length < 1)   Util.Message(""String_Node_Str"",sender);
 else   if (!Jail.zones.containsKey(args[0].toLowerCase())) {
    Util.Message(""String_Node_Str"",sender);
    return true;
  }
 else {
    if (Jail.zones.size() < 2 && Jail.prisoners.size() > 0) {
      Util.Message(""String_Node_Str"",sender);
      return true;
    }
 else {
      JailZone zone=Jail.zones.get(args[0].toLowerCase());
      zone.delete();
      Util.Message(""String_Node_Str"",sender);
      if (InputOutput.global.getBoolean(Setting.LogJailingIntoConsole.getString(),false)) {
        String jailer;
        if (sender instanceof Player)         jailer=((Player)sender).getName();
 else         if (sender == null)         jailer=""String_Node_Str"";
 else         jailer=""String_Node_Str"";
        Jail.log.info(""String_Node_Str"" + args[0] + ""String_Node_Str""+ jailer);
      }
      return true;
    }
  }
  return true;
}"
81394,"public Boolean run(CommandSender sender,String[] args){
  Object[] names=Jail.prisoners.keySet().toArray();
  for (  Object p : names) {
    JailPrisoner prisoner=Jail.prisoners.get((String)p);
    String playername=prisoner.getName();
    Player player=Jail.instance.getServer().getPlayerExact(playername);
    if (player == null) {
      prisoner.setOfflinePending(true);
      prisoner.setRemainingTime(0);
      InputOutput.UpdatePrisoner(prisoner);
      Jail.prisoners.put(prisoner.getName(),prisoner);
    }
 else {
      PrisonerManager.UnJail(prisoner,player);
    }
  }
  return true;
}","public Boolean run(CommandSender sender,String[] args){
  Object[] names=Jail.prisoners.keySet().toArray();
  for (  Object p : names) {
    JailPrisoner prisoner=Jail.prisoners.get((String)p);
    prisoner.release();
  }
  return true;
}"
81395,"public void onPlayerJoin(PlayerJoinEvent event){
  if (Jail.prisoners.containsKey(event.getPlayer().getName().toLowerCase())) {
    JailPrisoner prisoner=Jail.prisoners.get(event.getPlayer().getName().toLowerCase());
    if (prisoner.offlinePending()) {
      if (prisoner.getTransferDestination().isEmpty()) {
        if (prisoner.getRemainingTime() != 0) {
          PrisonerManager.Jail(prisoner,event.getPlayer());
        }
 else {
          PrisonerManager.UnJail(prisoner,event.getPlayer());
        }
      }
 else {
        PrisonerManager.Transfer(prisoner,event.getPlayer());
      }
    }
    if (prisoner.getJail().getSettings().getBoolean(Setting.IgnorePrisonersSleepingState))     event.getPlayer().setSleepingIgnored(true);
  }
}","public void onPlayerJoin(PlayerJoinEvent event){
  if (Jail.prisoners.containsKey(event.getPlayer().getName().toLowerCase())) {
    JailPrisoner prisoner=Jail.prisoners.get(event.getPlayer().getName().toLowerCase());
    if (prisoner.offlinePending()) {
      if (prisoner.getTransferDestination().isEmpty()) {
        if (prisoner.getRemainingTime() != 0) {
          PrisonerManager.Jail(prisoner,event.getPlayer());
        }
 else         if (prisoner.getJail() != null) {
          PrisonerManager.UnJail(prisoner,event.getPlayer());
        }
 else {
          prisoner.delete();
        }
      }
 else {
        PrisonerManager.Transfer(prisoner,event.getPlayer());
      }
    }
    if (prisoner.getJail().getSettings().getBoolean(Setting.IgnorePrisonersSleepingState))     event.getPlayer().setSleepingIgnored(true);
  }
}"
81396,"public void onPlayerInteract(PlayerInteractEvent event){
  if (event.getAction() == Action.RIGHT_CLICK_BLOCK && event.getClickedBlock().getType() == Material.CHEST && (Jail.prisoners.containsKey(event.getPlayer().getName().toLowerCase()) || !Util.permission(event.getPlayer(),""String_Node_Str"",PermissionDefault.OP))) {
    for (    JailZone jail : Jail.zones.values())     for (    JailCell cell : jail.getCellList()) {
      if ((!jail.getSettings().getBoolean(Setting.CanPrisonerOpenHisChest) || !cell.getPlayerName().toLowerCase().equals(event.getPlayer().getName().toLowerCase())) && ((cell.getChest() != null && event.getClickedBlock() == cell.getChest().getBlock()) || (cell.getSecondChest() != null && event.getClickedBlock() == cell.getSecondChest().getBlock()))) {
        event.setCancelled(true);
        return;
      }
    }
  }
  JailPrisoner prisoner=Jail.prisoners.get(event.getPlayer().getName().toLowerCase());
  if (prisoner != null) {
    JailZone jail=prisoner.getJail();
    if (event.getClickedBlock() != null) {
      int id=event.getClickedBlock().getTypeId();
      if (jail.getSettings().getList(Setting.PreventInteractionBlocks).contains(String.valueOf(id))) {
        if (event.getAction() != Action.PHYSICAL && jail.getSettings().getInt(Setting.InteractionPenalty) > 0 && prisoner.getRemainingTime() > 0) {
          Util.Message(jail.getSettings().getString(Setting.MessagePreventedInteractionPenalty),event.getPlayer());
          prisoner.setRemainingTime(prisoner.getRemainingTime() + jail.getSettings().getInt(Setting.InteractionPenalty) * 6);
          InputOutput.UpdatePrisoner(prisoner);
        }
 else         if (event.getAction() != Action.PHYSICAL) {
          Util.Message(jail.getSettings().getString(Setting.MessagePreventedInteractionNoPenalty),event.getPlayer());
        }
        event.setCancelled(true);
        return;
      }
    }
    if (event.getPlayer().getItemInHand() != null) {
      int id=event.getPlayer().getItemInHand().getTypeId();
      if (jail.getSettings().getList(Setting.PreventInteractionItems).contains(String.valueOf(id))) {
        if (event.getAction() != Action.PHYSICAL && jail.getSettings().getInt(Setting.InteractionPenalty) > 0 && prisoner.getRemainingTime() > 0) {
          Util.Message(jail.getSettings().getString(Setting.MessagePreventedInteractionPenalty),event.getPlayer());
          prisoner.setRemainingTime(prisoner.getRemainingTime() + jail.getSettings().getInt(Setting.InteractionPenalty) * 6);
          InputOutput.UpdatePrisoner(prisoner);
        }
 else         if (event.getAction() != Action.PHYSICAL) {
          Util.Message(jail.getSettings().getString(Setting.MessagePreventedInteractionNoPenalty),event.getPlayer());
        }
        event.setCancelled(true);
        return;
      }
    }
  }
}","public void onPlayerInteract(PlayerInteractEvent event){
  if (event.getAction() == Action.RIGHT_CLICK_BLOCK && event.getClickedBlock().getType() == Material.CHEST && (Jail.prisoners.containsKey(event.getPlayer().getName().toLowerCase()) || !Util.permission(event.getPlayer(),""String_Node_Str"",PermissionDefault.OP))) {
    for (    JailZone jail : Jail.zones.values())     for (    JailCell cell : jail.getCellList()) {
      if ((!jail.getSettings().getBoolean(Setting.CanPrisonerOpenHisChest) || !cell.getPlayerName().toLowerCase().equals(event.getPlayer().getName().toLowerCase())) && ((cell.getChest() != null && event.getClickedBlock() == cell.getChest().getBlock()) || (cell.getSecondChest() != null && event.getClickedBlock() == cell.getSecondChest().getBlock()))) {
        event.setCancelled(true);
        return;
      }
    }
  }
  JailPrisoner prisoner=Jail.prisoners.get(event.getPlayer().getName().toLowerCase());
  if (prisoner != null && prisoner.getJail() != null) {
    JailZone jail=prisoner.getJail();
    if (event.getClickedBlock() != null) {
      int id=event.getClickedBlock().getTypeId();
      if (jail.getSettings().getList(Setting.PreventInteractionBlocks).contains(String.valueOf(id))) {
        if (event.getAction() != Action.PHYSICAL && jail.getSettings().getInt(Setting.InteractionPenalty) > 0 && prisoner.getRemainingTime() > 0) {
          Util.Message(jail.getSettings().getString(Setting.MessagePreventedInteractionPenalty),event.getPlayer());
          prisoner.setRemainingTime(prisoner.getRemainingTime() + jail.getSettings().getInt(Setting.InteractionPenalty) * 6);
          InputOutput.UpdatePrisoner(prisoner);
        }
 else         if (event.getAction() != Action.PHYSICAL) {
          Util.Message(jail.getSettings().getString(Setting.MessagePreventedInteractionNoPenalty),event.getPlayer());
        }
        event.setCancelled(true);
        return;
      }
    }
    if (event.getPlayer().getItemInHand() != null) {
      int id=event.getPlayer().getItemInHand().getTypeId();
      if (jail.getSettings().getList(Setting.PreventInteractionItems).contains(String.valueOf(id))) {
        if (event.getAction() != Action.PHYSICAL && jail.getSettings().getInt(Setting.InteractionPenalty) > 0 && prisoner.getRemainingTime() > 0) {
          Util.Message(jail.getSettings().getString(Setting.MessagePreventedInteractionPenalty),event.getPlayer());
          prisoner.setRemainingTime(prisoner.getRemainingTime() + jail.getSettings().getInt(Setting.InteractionPenalty) * 6);
          InputOutput.UpdatePrisoner(prisoner);
        }
 else         if (event.getAction() != Action.PHYSICAL) {
          Util.Message(jail.getSettings().getString(Setting.MessagePreventedInteractionNoPenalty),event.getPlayer());
        }
        event.setCancelled(true);
        return;
      }
    }
  }
}"
81397,"public void actionPerformed(ActionEvent event){
  if (Jail.timeUpdateRunning)   return;
  Jail.timeUpdateRunning=true;
  if (UpdateTime == 0) {
    getServer().getScheduler().scheduleSyncDelayedTask(Jail.instance,new Runnable(){
      public void run(){
        for (        JailPrisoner prisoner : prisoners.values().toArray(new JailPrisoner[0])) {
          Player player=getServer().getPlayerExact(prisoner.getName());
          if (prisoner.getRemainingTime() > 0 && (player != null || (prisoner.getJail() != null && prisoner.getJail().getSettings().getBoolean(Setting.CountdownTimeWhenOffline)))) {
            prisoner.setRemainingTime(prisoner.getRemainingTime() - 1);
            InputOutput.UpdatePrisoner(prisoner);
          }
 else           if (player != null && prisoner.getRemainingTime() == 0 && prisoner.offlinePending() == false) {
            PrisonerManager.UnJail(prisoner,player);
          }
          if (player != null && prisoner.getJail() != null) {
            if (prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime) > 0.0) {
              prisoner.setAFKTime(prisoner.getAFKTime() + 1);
              if (prisoner.getAFKTimeMinutes() > prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime)) {
                prisoner.setAFKTime(0);
                player.kickPlayer(prisoner.getJail().getSettings().getString(Setting.MessageAFKKick));
              }
            }
          }
        }
      }
    }
,1L);
    UpdateTime++;
  }
 else {
    UpdateTime++;
    if (UpdateTime > 9) {
      UpdateTime=0;
    }
  }
  for (  JailPrisoner prisoner : prisoners.values()) {
    Player player=getServer().getPlayerExact(prisoner.getName());
    if (player == null || prisoner.getJail() == null)     continue;
    if (!prisoner.getJail().getSettings().getBoolean(Setting.EnableFoodControl))     continue;
    int minfood=prisoner.getJail().getSettings().getInt(Setting.FoodControlMinimumFood);
    int maxfood=prisoner.getJail().getSettings().getInt(Setting.FoodControlMaximumFood);
    if (player.getFoodLevel() < minfood || player.getFoodLevel() > maxfood) {
      player.setFoodLevel((minfood + maxfood) / 2);
    }
  }
  Jail.timeUpdateRunning=false;
}","public void actionPerformed(ActionEvent event){
  if (Jail.timeUpdateRunning)   return;
  Jail.timeUpdateRunning=true;
  if (UpdateTime == 0) {
    getServer().getScheduler().scheduleSyncDelayedTask(Jail.instance,new Runnable(){
      public void run(){
        for (        JailPrisoner prisoner : prisoners.values().toArray(new JailPrisoner[0])) {
          Player player=getServer().getPlayerExact(prisoner.getName());
          if (prisoner.getRemainingTime() > 0 && (player != null || (prisoner.getJail() != null && prisoner.getJail().getSettings().getBoolean(Setting.CountdownTimeWhenOffline)))) {
            prisoner.setRemainingTime(prisoner.getRemainingTime() - 1);
            InputOutput.UpdatePrisoner(prisoner);
          }
 else           if (player != null && prisoner.getRemainingTime() == 0 && prisoner.offlinePending() == false) {
            PrisonerManager.UnJail(prisoner,player);
          }
          if (player != null && prisoner.getJail() != null) {
            if (prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime) > 0.0) {
              prisoner.setAFKTime(prisoner.getAFKTime() + 1);
              if (prisoner.getAFKTimeMinutes() > prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime)) {
                prisoner.setAFKTime(0);
                player.kickPlayer(prisoner.getJail().getSettings().getString(Setting.MessageAFKKick));
              }
            }
          }
        }
      }
    }
,1L);
    UpdateTime++;
  }
 else {
    UpdateTime++;
    if (UpdateTime > 9) {
      UpdateTime=0;
    }
  }
  for (  JailPrisoner prisoner : prisoners.values()) {
    Player player=getServer().getPlayerExact(prisoner.getName());
    if (player == null || prisoner.getJail() == null || player.getGameMode() == GameMode.CREATIVE)     continue;
    if (!prisoner.getJail().getSettings().getBoolean(Setting.EnableFoodControl))     continue;
    int minfood=prisoner.getJail().getSettings().getInt(Setting.FoodControlMinimumFood);
    int maxfood=prisoner.getJail().getSettings().getInt(Setting.FoodControlMaximumFood);
    if (player.getFoodLevel() < minfood || player.getFoodLevel() > maxfood) {
      player.setFoodLevel((minfood + maxfood) / 2);
    }
  }
  Jail.timeUpdateRunning=false;
}"
81398,"@Override public void onEnable(){
  instance=this;
  PlayerListener=new JailPlayerListener(this);
  BlockListener=new JailBlockListener();
  PlayerPreventListener=new JailPlayerProtectionListener(this);
  EntityListener=new JailEntityListener(this);
  IO=new InputOutput();
  API=new JailAPI();
  UpdateTime=0;
  IO.LoadSettings();
  IO.PrepareDB();
  IO.LoadJails();
  IO.LoadPrisoners();
  IO.LoadCells();
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_COMMAND_PREPROCESS,PlayerPreventListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_JOIN,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_INTERACT,PlayerListener,Event.Priority.High,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_BREAK,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_MOVE,PlayerPreventListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_TELEPORT,PlayerPreventListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_PLACE,BlockListener,Event.Priority.High,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_RESPAWN,PlayerPreventListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_QUIT,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DEATH,EntityListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DAMAGE,EntityListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_EXPLODE,EntityListener,Event.Priority.High,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_CHAT,PlayerListener,Event.Priority.Lowest,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_CHAT,PlayerPreventListener,Event.Priority.High,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_INTERACT,PlayerPreventListener,Event.Priority.High,this);
  Plugin plugin=Jail.instance.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (plugin != null) {
    SpoutListener=new JailSpoutListener();
    getServer().getPluginManager().registerEvent(Event.Type.CUSTOM_EVENT,SpoutListener,Event.Priority.Normal,this);
  }
  timer=new Timer(1000,action);
  timer.start();
  permissions=this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  commands.put(""String_Node_Str"",new JailCommand());
  commands.put(""String_Node_Str"",new UnJailCommand());
  commands.put(""String_Node_Str"",new JailDeleteCommand());
  commands.put(""String_Node_Str"",new JailCreateCellsCommand());
  commands.put(""String_Node_Str"",new JailTeleInCommand());
  commands.put(""String_Node_Str"",new JailTeleOutCommand());
  commands.put(""String_Node_Str"",new UnJailForceCommand());
  commands.put(""String_Node_Str"",new JailClearCommand());
  commands.put(""String_Node_Str"",new JailClearForceCommand());
  commands.put(""String_Node_Str"",new JailTransferCommand());
  commands.put(""String_Node_Str"",new JailTransferAllCommand());
  commands.put(""String_Node_Str"",new JailStatusCommand());
  commands.put(""String_Node_Str"",new JailCheckCommand());
  commands.put(""String_Node_Str"",new JailListCommand());
  commands.put(""String_Node_Str"",new JailMuteCommand());
  commands.put(""String_Node_Str"",new JailStopCommand());
  commands.put(""String_Node_Str"",new JailSetCommand());
  commands.put(""String_Node_Str"",new JailPayCommand());
  commands.put(""String_Node_Str"",new JailCreateCommand());
  commands.put(""String_Node_Str"",new JailDeleteCellsCommand());
  commands.put(""String_Node_Str"",new JailListCellsCommand());
  commands.put(""String_Node_Str"",new JailStickCommand());
  commands.put(""String_Node_Str"",new JailCreateWeCommand());
  commands.put(""String_Node_Str"",new JailDeleteCellCommand());
  log.info(""String_Node_Str"" + getDescription().getFullName() + ""String_Node_Str"");
}","@Override public void onEnable(){
  instance=this;
  PlayerListener=new JailPlayerListener(this);
  BlockListener=new JailBlockListener();
  PlayerPreventListener=new JailPlayerProtectionListener(this);
  EntityListener=new JailEntityListener(this);
  IO=new InputOutput();
  API=new JailAPI();
  UpdateTime=0;
  IO.LoadSettings();
  IO.PrepareDB();
  IO.LoadJails();
  IO.LoadPrisoners();
  IO.LoadCells();
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_COMMAND_PREPROCESS,PlayerPreventListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_JOIN,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_INTERACT,PlayerListener,Event.Priority.High,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_BREAK,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_MOVE,PlayerPreventListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_TELEPORT,PlayerPreventListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_PLACE,BlockListener,Event.Priority.High,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_RESPAWN,PlayerPreventListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_QUIT,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DEATH,EntityListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DAMAGE,EntityListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_EXPLODE,EntityListener,Event.Priority.High,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_CHAT,PlayerListener,Event.Priority.Lowest,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_CHAT,PlayerPreventListener,Event.Priority.High,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_INTERACT,PlayerPreventListener,Event.Priority.High,this);
  Plugin plugin=Jail.instance.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (plugin != null) {
    SpoutListener=new JailSpoutListener();
    getServer().getPluginManager().registerEvent(Event.Type.CUSTOM_EVENT,SpoutListener,Event.Priority.Normal,this);
  }
  timer=new Timer(1000,action);
  timer.start();
  commands.put(""String_Node_Str"",new JailCommand());
  commands.put(""String_Node_Str"",new UnJailCommand());
  commands.put(""String_Node_Str"",new JailDeleteCommand());
  commands.put(""String_Node_Str"",new JailCreateCellsCommand());
  commands.put(""String_Node_Str"",new JailTeleInCommand());
  commands.put(""String_Node_Str"",new JailTeleOutCommand());
  commands.put(""String_Node_Str"",new UnJailForceCommand());
  commands.put(""String_Node_Str"",new JailClearCommand());
  commands.put(""String_Node_Str"",new JailClearForceCommand());
  commands.put(""String_Node_Str"",new JailTransferCommand());
  commands.put(""String_Node_Str"",new JailTransferAllCommand());
  commands.put(""String_Node_Str"",new JailStatusCommand());
  commands.put(""String_Node_Str"",new JailCheckCommand());
  commands.put(""String_Node_Str"",new JailListCommand());
  commands.put(""String_Node_Str"",new JailMuteCommand());
  commands.put(""String_Node_Str"",new JailStopCommand());
  commands.put(""String_Node_Str"",new JailSetCommand());
  commands.put(""String_Node_Str"",new JailPayCommand());
  commands.put(""String_Node_Str"",new JailCreateCommand());
  commands.put(""String_Node_Str"",new JailDeleteCellsCommand());
  commands.put(""String_Node_Str"",new JailListCellsCommand());
  commands.put(""String_Node_Str"",new JailStickCommand());
  commands.put(""String_Node_Str"",new JailCreateWeCommand());
  commands.put(""String_Node_Str"",new JailDeleteCellCommand());
  log.info(""String_Node_Str"" + getDescription().getFullName() + ""String_Node_Str"");
}"
81399,"public static Boolean permission(Player player,String line,PermissionDefault def){
  if (Jail.permissions != null) {
    return (((Permissions)Jail.permissions).getHandler()).has(player,line);
  }
 else {
    return player.hasPermission(new org.bukkit.permissions.Permission(line,def));
  }
}","public static Boolean permission(Player player,String line,PermissionDefault def){
  Plugin plugin=Jail.instance.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (plugin != null && setupPermissions())   return permission.has(player,line);
 else   return player.hasPermission(new org.bukkit.permissions.Permission(line,def));
}"
81400,"/** 
 * @param loc Location to check
 * @return distance between teleport location of this jail zone and specified location in blocks.
 */
public double getDistance(Location loc){
  return Math.sqrt(Math.abs(loc.getX() - teleX) + Math.abs(loc.getY() - teleY) + Math.abs(loc.getZ() + teleZ));
}","/** 
 * @param loc Location to check
 * @return squared distance between teleport location of this jail zone and specified location in blocks.
 */
public double getDistance(Location loc){
  return loc.distance(getTeleportLocation());
}"
81401,"public static synchronized void freeConnection(){
  if (connection != null) {
    try {
      connection.close();
      connection=null;
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
  }
}","public static synchronized void freeConnection(){
  Connection conn=getConnection();
  if (conn != null) {
    try {
      conn.close();
      conn=null;
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
  }
}"
81402,"/** 
 * Spawn guard wolves to this prisoner to kill him
 * @param num Number of guards to spawn
 * @param location Spawning location
 * @param player Player, associated with this JailPrisoner
 */
public void spawnGuards(int num,Location location,Player player){
  List<BlockFace> checkedCorners=new ArrayList<BlockFace>();
  for (int i=0; i < num; i++) {
    Location spawn=null;
    for (int ci=0; ci < 4; ci++) {
      Block block=location.getBlock().getRelative(BlockFace.values()[ci]);
      if (!checkedCorners.contains(BlockFace.values()[ci]) && (block.getType() == Material.AIR || block.getType() == Material.STATIONARY_WATER || block.getType() == Material.WATER)) {
        spawn=block.getLocation();
        checkedCorners.add(BlockFace.values()[ci]);
        break;
      }
    }
    if (spawn == null) {
      checkedCorners.clear();
      for (int ci=0; ci < 3; ci++) {
        if (!checkedCorners.contains(BlockFace.values()[ci]) && location.getBlock().getRelative(BlockFace.values()[ci]).getType() == Material.AIR || location.getBlock().getRelative(BlockFace.values()[ci]).getType() == Material.STATIONARY_WATER) {
          spawn=location.getBlock().getRelative(BlockFace.NORTH).getLocation();
          checkedCorners.add(BlockFace.values()[ci]);
        }
      }
      if (spawn == null)       spawn=location;
    }
    Wolf guard=(Wolf)location.getWorld().spawnCreature(spawn,CreatureType.WOLF);
    if (!(guard.getWorld().getEntities().contains(guard))) {
      canSpawnGuards=false;
      return;
    }
    guard.setHealth(getJail().getSettings().getInt(Setting.GuardHealth));
    guard.setAngry(true);
    guard.setSitting(false);
    guard.setTarget(player);
    getGuards().add(guard);
    Jail.guards.put(guard,this);
  }
}","/** 
 * Spawn guard wolves to this prisoner to kill him
 * @param num Number of guards to spawn
 * @param location Spawning location
 * @param player Player, associated with this JailPrisoner
 */
public void spawnGuards(int num,Location location,Player player){
  List<BlockFace> checkedCorners=new ArrayList<BlockFace>();
  for (int i=0; i < num; i++) {
    Location spawn=null;
    for (int ci=0; ci < 4; ci++) {
      Block block=location.getBlock().getRelative(BlockFace.values()[ci]);
      if (!checkedCorners.contains(BlockFace.values()[ci]) && (block.getType() == Material.AIR || block.getType() == Material.STATIONARY_WATER || block.getType() == Material.WATER)) {
        spawn=block.getLocation();
        checkedCorners.add(BlockFace.values()[ci]);
        break;
      }
    }
    if (spawn == null) {
      checkedCorners.clear();
      for (int ci=0; ci < 3; ci++) {
        if (!checkedCorners.contains(BlockFace.values()[ci]) && location.getBlock().getRelative(BlockFace.values()[ci]).getType() == Material.AIR || location.getBlock().getRelative(BlockFace.values()[ci]).getType() == Material.STATIONARY_WATER) {
          spawn=location.getBlock().getRelative(BlockFace.NORTH).getLocation();
          checkedCorners.add(BlockFace.values()[ci]);
        }
      }
      if (spawn == null)       spawn=location;
    }
    Wolf guard=(Wolf)location.getWorld().spawnCreature(spawn,CreatureType.WOLF);
    if (!(guard.getWorld().getEntities().contains(guard))) {
      canSpawnGuards=false;
      return;
    }
    int health=getJail().getSettings().getInt(Setting.GuardHealth);
    if (health > guard.getMaxHealth()) {
      Jail.log.warning(""String_Node_Str"" + guard.getMaxHealth() + ""String_Node_Str"");
      health=guard.getMaxHealth();
    }
    guard.setHealth(health);
    guard.setAngry(true);
    guard.setSitting(false);
    guard.setTarget(player);
    getGuards().add(guard);
    Jail.guards.put(guard,this);
  }
}"
81403,"/** 
 * Parse jail command and prepare user for jailing (if he is online, he will be instantly jailed. Otherwise, he will be jailed first time when he comes online)
 * @param sender CommandSender that send this command
 * @param args Arguments for the command. 0 = name, 1 = time, 2 = jailname:cellname, 3 = reason
 */
public static void PrepareJail(CommandSender sender,String args[]){
  String playername;
  int time=-1;
  String jailname=""String_Node_Str"";
  if (args.length < 1 || (args.length > 1 && (!Util.isInteger(args[1]))) || args[0].trim().equals(""String_Node_Str"")) {
    if (sender != null)     Util.Message(""String_Node_Str"",sender);
    return;
  }
  if (Jail.zones.size() < 1) {
    if (sender != null)     Util.Message(""String_Node_Str"",sender);
    return;
  }
  if (Jail.prisoners.containsKey(args[0].toLowerCase())) {
    JailPrisoner prisoner=Jail.prisoners.get(args[0].toLowerCase());
    Player player=Jail.instance.getServer().getPlayer(prisoner.getName());
    if (player != null) {
      player.teleport(prisoner.getTeleportLocation());
      if (sender != null)       Util.Message(""String_Node_Str"",sender);
    }
 else {
      if (sender != null)       Util.Message(""String_Node_Str"",sender);
    }
    return;
  }
  playername=args[0].toLowerCase();
  if (args.length > 1)   time=Integer.valueOf(args[1]);
  if (args.length > 2)   jailname=args[2].toLowerCase();
  String reason=""String_Node_Str"";
  if (args.length > 3) {
    for (int i=3; i < args.length; i++) {
      reason+=""String_Node_Str"" + args[i];
    }
    if (reason.length() > 250) {
      if (sender != null)       Util.Message(""String_Node_Str"",sender);
      return;
    }
  }
  if (jailname.equals(InputOutput.global.getString(Setting.NearestJailCode.getString())))   jailname=""String_Node_Str"";
  String cellname=null;
  if (jailname.contains(""String_Node_Str"")) {
    cellname=jailname.split(""String_Node_Str"")[1];
    jailname=jailname.split(""String_Node_Str"")[0];
  }
  String jailer;
  if (sender instanceof Player)   jailer=((Player)sender).getName();
 else   if (sender == null)   jailer=""String_Node_Str"";
 else   jailer=""String_Node_Str"";
  Player player=Jail.instance.getServer().getPlayer(playername);
  if (player == null) {
    JailPrisoner prisoner=new JailPrisoner(playername,time * 6,jailname,cellname,true,""String_Node_Str"",reason,InputOutput.global.getBoolean(Setting.AutomaticMute.getString(),false),""String_Node_Str"",jailer,""String_Node_Str"");
    if (prisoner.getJail() != null) {
      JailCell cell=prisoner.getJail().getRequestedCell(prisoner);
      if (cell != null && (cell.getPlayerName() == null || cell.getPlayerName().trim().equals(""String_Node_Str""))) {
        cell.setPlayerName(prisoner.getName());
        cell.update();
      }
    }
    InputOutput.InsertPrisoner(prisoner);
    Jail.prisoners.put(prisoner.getName(),prisoner);
    Util.Message(""String_Node_Str"",sender);
  }
 else {
    playername=player.getName().toLowerCase();
    JailPrisoner prisoner=new JailPrisoner(playername,time * 6,jailname,cellname,false,""String_Node_Str"",reason,InputOutput.global.getBoolean(Setting.AutomaticMute.getString(),false),""String_Node_Str"",jailer,""String_Node_Str"");
    Jail(prisoner,player);
    Util.Message(""String_Node_Str"",sender);
  }
  if (InputOutput.global.getBoolean(Setting.LogJailingIntoConsole.getString(),false)) {
    String times;
    if (time < 0)     times=""String_Node_Str"";
 else     times=""String_Node_Str"" + String.valueOf(time) + ""String_Node_Str"";
    Jail.log.info(""String_Node_Str"" + playername + ""String_Node_Str""+ jailer+ ""String_Node_Str""+ times);
  }
}","/** 
 * Parse jail command and prepare user for jailing (if he is online, he will be instantly jailed. Otherwise, he will be jailed first time when he comes online)
 * @param sender CommandSender that send this command
 * @param args Arguments for the command. 0 = name, 1 = time, 2 = jailname:cellname, 3 = reason
 */
public static void PrepareJail(CommandSender sender,String args[]){
  String playername;
  int time=-1;
  String jailname=""String_Node_Str"";
  if (args.length < 1 || (args.length > 1 && (!Util.isInteger(args[1]))) || args[0].trim().equals(""String_Node_Str"")) {
    if (sender != null)     Util.Message(""String_Node_Str"",sender);
    return;
  }
  if (Jail.zones.size() < 1) {
    if (sender != null)     Util.Message(""String_Node_Str"",sender);
    return;
  }
  if (Jail.prisoners.containsKey(args[0].toLowerCase())) {
    JailPrisoner prisoner=Jail.prisoners.get(args[0].toLowerCase());
    Player player=Jail.instance.getServer().getPlayer(prisoner.getName());
    if (player != null) {
      player.teleport(prisoner.getTeleportLocation());
      if (sender != null)       Util.Message(""String_Node_Str"",sender);
    }
 else {
      if (sender != null)       Util.Message(""String_Node_Str"",sender);
    }
    return;
  }
  try {
    if (sender != null) {
      Boolean exist=false;
      for (      OfflinePlayer p : Jail.instance.getServer().getOfflinePlayers()) {
        if (p.getName().toLowerCase().equals(args[0].toLowerCase())) {
          exist=true;
          break;
        }
      }
      if (!exist) {
        Util.Message(""String_Node_Str"" + args[0] + ""String_Node_Str"",sender);
        return;
      }
    }
  }
 catch (  NoSuchMethodError e) {
  }
  playername=args[0].toLowerCase();
  if (args.length > 1)   time=Integer.valueOf(args[1]);
  if (args.length > 2)   jailname=args[2].toLowerCase();
  String reason=""String_Node_Str"";
  if (args.length > 3) {
    for (int i=3; i < args.length; i++) {
      reason+=""String_Node_Str"" + args[i];
    }
    if (reason.length() > 250) {
      if (sender != null)       Util.Message(""String_Node_Str"",sender);
      return;
    }
  }
  if (jailname.equals(InputOutput.global.getString(Setting.NearestJailCode.getString())))   jailname=""String_Node_Str"";
  String cellname=null;
  if (jailname.contains(""String_Node_Str"")) {
    cellname=jailname.split(""String_Node_Str"")[1];
    jailname=jailname.split(""String_Node_Str"")[0];
  }
  String jailer;
  if (sender instanceof Player)   jailer=((Player)sender).getName();
 else   if (sender == null)   jailer=""String_Node_Str"";
 else   jailer=""String_Node_Str"";
  Player player=Jail.instance.getServer().getPlayer(playername);
  if (player == null) {
    JailPrisoner prisoner=new JailPrisoner(playername,time * 6,jailname,cellname,true,""String_Node_Str"",reason,InputOutput.global.getBoolean(Setting.AutomaticMute.getString(),false),""String_Node_Str"",jailer,""String_Node_Str"");
    if (prisoner.getJail() != null) {
      JailCell cell=prisoner.getJail().getRequestedCell(prisoner);
      if (cell != null && (cell.getPlayerName() == null || cell.getPlayerName().trim().equals(""String_Node_Str""))) {
        cell.setPlayerName(prisoner.getName());
        cell.update();
      }
    }
    InputOutput.InsertPrisoner(prisoner);
    Jail.prisoners.put(prisoner.getName(),prisoner);
    Util.Message(""String_Node_Str"",sender);
  }
 else {
    playername=player.getName().toLowerCase();
    JailPrisoner prisoner=new JailPrisoner(playername,time * 6,jailname,cellname,false,""String_Node_Str"",reason,InputOutput.global.getBoolean(Setting.AutomaticMute.getString(),false),""String_Node_Str"",jailer,""String_Node_Str"");
    Jail(prisoner,player);
    Util.Message(""String_Node_Str"",sender);
  }
  if (InputOutput.global.getBoolean(Setting.LogJailingIntoConsole.getString(),false)) {
    String times;
    if (time < 0)     times=""String_Node_Str"";
 else     times=""String_Node_Str"" + String.valueOf(time) + ""String_Node_Str"";
    Jail.log.info(""String_Node_Str"" + playername + ""String_Node_Str""+ jailer+ ""String_Node_Str""+ times);
  }
}"
81404,"public void onEntityDamage(EntityDamageEvent event){
  if (event.isCancelled())   return;
  Entity victim=event.getEntity();
  JailPrisoner prisoner=Jail.guards.get(victim);
  JailZone jail=prisoner != null ? prisoner.getJail() : null;
  if (prisoner != null && jail.getSettings().getBoolean(Setting.GuardInvincibility)) {
    event.setCancelled(true);
    return;
  }
  if (!(event instanceof EntityDamageByEntityEvent))   return;
  EntityDamageByEntityEvent newevent=(EntityDamageByEntityEvent)event;
  Entity damager=newevent.getDamager();
  prisoner=Jail.guards.get(damager);
  jail=prisoner != null ? prisoner.getJail() : null;
  if (prisoner != null) {
    if (new Random().nextInt(100) > jail.getSettings().getInt(Setting.GuardAttackSpeedPercent)) {
      event.setCancelled(true);
      return;
    }
    event.setDamage(jail.getSettings().getInt(Setting.GuardDamage));
  }
  jail=JailZoneManager.getJail(victim.getLocation());
  if (jail != null && jail.getSettings().getBoolean(Setting.EnablePVPProtection) && victim instanceof Player && damager instanceof Player) {
    event.setCancelled(true);
    return;
  }
}","public void onEntityDamage(EntityDamageEvent event){
  if (event.isCancelled())   return;
  Entity victim=event.getEntity();
  JailPrisoner prisoner=Jail.guards.get(victim);
  JailZone jail=prisoner != null ? prisoner.getJail() : null;
  if (prisoner != null) {
    if (jail.getSettings().getBoolean(Setting.GuardInvincibility)) {
      event.setCancelled(true);
      return;
    }
    int newArmor=event.getDamage() - (event.getDamage() * jail.getSettings().getInt(Setting.GuardArmor) / 100);
    if (newArmor <= 0)     newArmor=1;
    event.setDamage(newArmor);
  }
  if (!(event instanceof EntityDamageByEntityEvent))   return;
  EntityDamageByEntityEvent newevent=(EntityDamageByEntityEvent)event;
  Entity damager=newevent.getDamager();
  prisoner=Jail.guards.get(damager);
  jail=prisoner != null ? prisoner.getJail() : null;
  if (prisoner != null) {
    if (new Random().nextInt(100) > jail.getSettings().getInt(Setting.GuardAttackSpeedPercent)) {
      event.setCancelled(true);
      return;
    }
    event.setDamage(jail.getSettings().getInt(Setting.GuardDamage));
  }
  jail=JailZoneManager.getJail(victim.getLocation());
  if (jail != null && jail.getSettings().getBoolean(Setting.EnablePVPProtection) && victim instanceof Player && damager instanceof Player) {
    event.setCancelled(true);
    return;
  }
}"
81405,"public void onPlayerMove(PlayerMoveEvent event){
  if (event.isCancelled())   return;
  if (Jail.prisoners.containsKey(event.getPlayer().getName().toLowerCase())) {
    JailPrisoner prisoner=Jail.prisoners.get(event.getPlayer().getName().toLowerCase());
    if (prisoner.isBeingReleased() || prisoner.getJail() == null)     return;
    prisoner.setAFKTime(0);
    JailZone jail=prisoner.getJail();
    if (!jail.getSettings().getBoolean(Setting.EnablePlayerMoveProtection))     return;
    if (!jail.isInside(event.getTo())) {
      if (jail.getSettings().getString(Setting.PlayerMoveProtectionAction).equals(""String_Node_Str"") && prisoner.canGuardsBeSpawned() && (!Util.isServer18() || event.getPlayer().getGameMode() == GameMode.SURVIVAL)) {
        if (prisoner.getGuards().size() > 0) {
          for (          Wolf w : prisoner.getGuards().toArray(new Wolf[0])) {
            if (w == null || w.isDead()) {
              prisoner.getGuards().remove(w);
              Jail.guards.remove(w);
              continue;
            }
            if (w.getTarget() == null)             w.setTarget(event.getPlayer());
            if (jail.getSettings().getInt(Setting.GuardTeleportDistance) > 0 && (w.getWorld() != w.getTarget().getWorld() || w.getLocation().distanceSquared(w.getTarget().getLocation()) > jail.getSettings().getInt(Setting.GuardTeleportDistance)))             w.teleport(w.getTarget().getLocation());
          }
        }
 else         prisoner.spawnGuards(jail.getSettings().getInt(Setting.NumbefOfGuards),event.getTo(),event.getPlayer());
      }
 else       if (jail.getSettings().getString(Setting.PlayerMoveProtectionAction).equals(""String_Node_Str"")) {
        prisoner.delete();
        plugin.getServer().broadcastMessage(event.getPlayer().getName() + ""String_Node_Str"");
        return;
      }
 else {
        if (!prisoner.canGuardsBeSpawned()) {
          Jail.log.warning(""String_Node_Str"" + prisoner.getName() + ""String_Node_Str"");
          prisoner.setGuardCanBeSpawned(true);
        }
        if (jail.getSettings().getInt(Setting.PlayerMoveProtectionPenalty) > 0 && prisoner.getRemainingTime() > 0) {
          Util.Message(jail.getSettings().getString(Setting.MessageEscapePenalty),event.getPlayer());
          prisoner.setRemainingTime(prisoner.getRemainingTime() + jail.getSettings().getInt(Setting.PlayerMoveProtectionPenalty) * 6);
          InputOutput.UpdatePrisoner(prisoner);
        }
 else {
          Util.Message(jail.getSettings().getString(Setting.MessageEscapeNoPenalty),event.getPlayer());
        }
        Location teleport;
        teleport=prisoner.getTeleportLocation();
        event.setTo(teleport);
      }
    }
 else     if (jail.getSettings().getString(Setting.PlayerMoveProtectionAction).equals(""String_Node_Str"")) {
      for (      Object o : prisoner.getGuards().toArray()) {
        Wolf w=(Wolf)o;
        prisoner.getGuards().remove(w);
        Jail.guards.remove(w);
        w.remove();
      }
    }
  }
}","public void onPlayerMove(PlayerMoveEvent event){
  if (event.isCancelled())   return;
  if (Jail.prisoners.containsKey(event.getPlayer().getName().toLowerCase())) {
    JailPrisoner prisoner=Jail.prisoners.get(event.getPlayer().getName().toLowerCase());
    if (prisoner.isBeingReleased() || prisoner.getJail() == null)     return;
    prisoner.setAFKTime(0);
    JailZone jail=prisoner.getJail();
    if (!jail.getSettings().getBoolean(Setting.EnablePlayerMoveProtection))     return;
    if (!jail.isInside(event.getTo())) {
      if (jail.getSettings().getString(Setting.PlayerMoveProtectionAction).equals(""String_Node_Str"") && prisoner.canGuardsBeSpawned() && event.getPlayer().getGameMode() == GameMode.SURVIVAL) {
        if (prisoner.getGuards().size() > 0) {
          for (          Wolf w : prisoner.getGuards().toArray(new Wolf[0])) {
            if (w == null || w.isDead()) {
              prisoner.getGuards().remove(w);
              Jail.guards.remove(w);
              continue;
            }
            if (w.getTarget() == null)             w.setTarget(event.getPlayer());
            if (jail.getSettings().getInt(Setting.GuardTeleportDistance) > 0 && (w.getWorld() != w.getTarget().getWorld() || w.getLocation().distanceSquared(w.getTarget().getLocation()) > jail.getSettings().getInt(Setting.GuardTeleportDistance)))             w.teleport(w.getTarget().getLocation());
          }
        }
 else         prisoner.spawnGuards(jail.getSettings().getInt(Setting.NumbefOfGuards),event.getTo(),event.getPlayer());
      }
 else       if (jail.getSettings().getString(Setting.PlayerMoveProtectionAction).equals(""String_Node_Str"")) {
        prisoner.delete();
        plugin.getServer().broadcastMessage(event.getPlayer().getName() + ""String_Node_Str"");
        return;
      }
 else {
        if (!prisoner.canGuardsBeSpawned()) {
          Jail.log.warning(""String_Node_Str"" + prisoner.getName() + ""String_Node_Str"");
          prisoner.setGuardCanBeSpawned(true);
        }
        if (jail.getSettings().getInt(Setting.PlayerMoveProtectionPenalty) > 0 && prisoner.getRemainingTime() > 0) {
          Util.Message(jail.getSettings().getString(Setting.MessageEscapePenalty),event.getPlayer());
          prisoner.setRemainingTime(prisoner.getRemainingTime() + jail.getSettings().getInt(Setting.PlayerMoveProtectionPenalty) * 6);
          InputOutput.UpdatePrisoner(prisoner);
        }
 else {
          Util.Message(jail.getSettings().getString(Setting.MessageEscapeNoPenalty),event.getPlayer());
        }
        Location teleport;
        teleport=prisoner.getTeleportLocation();
        event.setTo(teleport);
      }
    }
 else     if (jail.getSettings().getString(Setting.PlayerMoveProtectionAction).equals(""String_Node_Str"")) {
      for (      Object o : prisoner.getGuards().toArray()) {
        Wolf w=(Wolf)o;
        prisoner.getGuards().remove(w);
        Jail.guards.remove(w);
        w.remove();
      }
    }
  }
}"
81406,"/** 
 * Restores items from inventory string to specified player. Inventory string will be deleted.
 * @param player player that will receive items
 */
public void restoreInventory(Player player){
  if (inventory == null)   return;
  String[] inv=inventory.split(""String_Node_Str"");
  for (  String i : inv) {
    if (i == null || i.trim().equals(""String_Node_Str""))     return;
    String[] items=i.split(""String_Node_Str"");
    ItemStack item=new ItemStack(Integer.parseInt(items[0]),Integer.parseInt(items[1]));
    item.setDurability(Short.parseShort(items[2]));
    if (items[3].contains(""String_Node_Str"")) {
      String[] enchantments=items[3].split(""String_Node_Str"");
      for (      String e : enchantments) {
        item.addEnchantment(Enchantment.getById(Integer.parseInt(e.split(""String_Node_Str"")[0])),Integer.parseInt(e.split(""String_Node_Str"")[1]));
      }
    }
    if (player.getInventory().firstEmpty() == -1)     player.getWorld().dropItem(player.getLocation(),item);
 else     player.getInventory().addItem(item);
  }
  inventory=""String_Node_Str"";
  InputOutput.UpdatePrisoner(this);
}","/** 
 * Restores items from inventory string to specified player. Inventory string will be deleted.
 * @param player player that will receive items
 */
public void restoreInventory(Player player){
  if (inventory == null)   return;
  String[] inv=inventory.split(""String_Node_Str"");
  for (  String i : inv) {
    if (i == null || i.trim().equals(""String_Node_Str""))     return;
    String[] items=i.split(""String_Node_Str"");
    ItemStack item=new ItemStack(Integer.parseInt(items[0]),Integer.parseInt(items[1]));
    item.setDurability(Short.parseShort(items[2]));
    if (items.length > 3 && items[3].contains(""String_Node_Str"")) {
      String[] enchantments=items[3].split(""String_Node_Str"");
      for (      String e : enchantments) {
        item.addEnchantment(Enchantment.getById(Integer.parseInt(e.split(""String_Node_Str"")[0])),Integer.parseInt(e.split(""String_Node_Str"")[1]));
      }
    }
    if (player.getInventory().firstEmpty() == -1)     player.getWorld().dropItem(player.getLocation(),item);
 else     player.getInventory().addItem(item);
  }
  inventory=""String_Node_Str"";
  InputOutput.UpdatePrisoner(this);
}"
81407,"/** 
 * Update text of the sign that belongs to prisoner's cell if he have one.
 */
public void updateSign(){
  if (cell != null) {
    for (    Sign sign : cell.getSigns()) {
      String[] lines=getJail().getSettings().getString(Setting.SignText).split(""String_Node_Str"");
      int max=lines.length;
      if (max > 4)       max=4;
      for (int i=0; i < max; i++) {
        sign.setLine(i,parseTags(lines[i]));
      }
      sign.update();
    }
  }
}","/** 
 * Update text of the sign that belongs to prisoner's cell if he have one.
 */
public void updateSign(){
  if (cell != null) {
    for (    Sign sign : cell.getSigns()) {
      String set=getJail().getSettings().getString(Setting.SignText);
      set=set.replaceAll(""String_Node_Str"",""String_Node_Str"");
      String[] lines=set.split(""String_Node_Str"");
      int max=lines.length;
      if (max > 4)       max=4;
      for (int i=0; i < max; i++) {
        sign.setLine(i,parseTags(lines[i]));
      }
      sign.update();
    }
  }
}"
81408,"public void onPlayerJoin(PlayerJoinEvent event){
  if (Jail.prisoners.containsKey(event.getPlayer().getName().toLowerCase())) {
    JailPrisoner prisoner=Jail.prisoners.get(event.getPlayer().getName().toLowerCase());
    if (prisoner.offlinePending()) {
      if (prisoner.getTransferDestination().isEmpty()) {
        if (prisoner.getRemainingTime() != 0) {
          PrisonerManager.Jail(prisoner,event.getPlayer());
        }
 else         if (prisoner.getJail() != null) {
          PrisonerManager.UnJail(prisoner,event.getPlayer());
        }
 else {
          prisoner.delete();
        }
      }
 else {
        PrisonerManager.Transfer(prisoner,event.getPlayer());
      }
    }
    if (prisoner.getJail().getSettings().getBoolean(Setting.IgnorePrisonersSleepingState))     event.getPlayer().setSleepingIgnored(true);
  }
}","public void onPlayerJoin(PlayerJoinEvent event){
  if (Jail.prisoners.containsKey(event.getPlayer().getName().toLowerCase())) {
    JailPrisoner prisoner=Jail.prisoners.get(event.getPlayer().getName().toLowerCase());
    if (prisoner.offlinePending()) {
      if (prisoner.getTransferDestination().isEmpty()) {
        if (prisoner.getRemainingTime() != 0) {
          PrisonerManager.Jail(prisoner,event.getPlayer());
        }
 else         if (prisoner.getJail() != null) {
          PrisonerManager.UnJail(prisoner,event.getPlayer());
          return;
        }
 else {
          prisoner.delete();
          return;
        }
      }
 else {
        PrisonerManager.Transfer(prisoner,event.getPlayer());
      }
    }
    if (prisoner.getJail().getSettings().getBoolean(Setting.IgnorePrisonersSleepingState))     event.getPlayer().setSleepingIgnored(true);
  }
}"
81409,"/** 
 * @param loc Location to check
 * @return squared distance between teleport location of this jail zone and specified location in blocks.
 */
public double getDistance(Location loc){
  return loc.distance(getTeleportLocation());
}","/** 
 * @param loc Location to check
 * @return squared distance between teleport location of this jail zone and specified location in blocks. If locations are not in same world, distance cannot be calculated and it will return 2147483647. 
 */
public double getDistance(Location loc){
  if (loc.getWorld() != getTeleportLocation().getWorld())   return (double)Integer.MAX_VALUE;
  return loc.distance(getTeleportLocation());
}"
81410,"/** 
 * Parse jail command and prepare user for jailing (if he is online, he will be instantly jailed. Otherwise, he will be jailed first time when he comes online)
 * @param sender CommandSender that send this command
 * @param args Arguments for the command. 0 = name, 1 = time, 2 = jailname:cellname, 3 = reason
 */
public static void PrepareJail(CommandSender sender,String args[]){
  String playername;
  int time=-1;
  String jailname=""String_Node_Str"";
  if (args.length < 1 || (args.length > 1 && (!Util.isInteger(args[1]))) || args[0].trim().equals(""String_Node_Str"")) {
    if (sender != null)     Util.Message(""String_Node_Str"",sender);
    return;
  }
  if (Jail.zones.size() < 1) {
    if (sender != null)     Util.Message(""String_Node_Str"",sender);
    return;
  }
  if (Jail.prisoners.containsKey(args[0].toLowerCase())) {
    JailPrisoner prisoner=Jail.prisoners.get(args[0].toLowerCase());
    Player player=Jail.instance.getServer().getPlayer(prisoner.getName());
    if (player != null) {
      player.teleport(prisoner.getTeleportLocation());
      if (sender != null)       Util.Message(""String_Node_Str"",sender);
    }
 else {
      if (sender != null)       Util.Message(""String_Node_Str"",sender);
    }
    return;
  }
  playername=args[0].toLowerCase();
  Player player=Jail.instance.getServer().getPlayerExact(playername);
  if (player == null)   player=Jail.instance.getServer().getPlayer(playername);
  if (player != null)   playername=player.getName().toLowerCase();
 else {
    if (sender != null && !Jail.instance.getServer().getOfflinePlayer(playername).hasPlayedBefore()) {
      Util.Message(""String_Node_Str"" + playername + ""String_Node_Str"",sender);
      return;
    }
  }
  if (args.length > 1)   time=Integer.valueOf(args[1]);
  if (args.length > 2)   jailname=args[2].toLowerCase();
  String reason=""String_Node_Str"";
  if (args.length > 3) {
    for (int i=3; i < args.length; i++) {
      reason+=""String_Node_Str"" + args[i];
    }
    if (reason.length() > 250) {
      if (sender != null)       Util.Message(""String_Node_Str"",sender);
      return;
    }
  }
  if (jailname.equals(InputOutput.global.getString(Setting.NearestJailCode.getString())))   jailname=""String_Node_Str"";
  Util.debug(""String_Node_Str"" + playername + ""String_Node_Str""+ jailname);
  String cellname=null;
  if (jailname.contains(""String_Node_Str"")) {
    cellname=jailname.split(""String_Node_Str"")[1];
    jailname=jailname.split(""String_Node_Str"")[0];
    Util.debug(""String_Node_Str"" + playername + ""String_Node_Str""+ cellname);
  }
  String jailer;
  if (sender instanceof Player)   jailer=((Player)sender).getName();
 else   if (sender == null)   jailer=""String_Node_Str"";
 else   jailer=""String_Node_Str"";
  if (player == null) {
    JailPrisoner prisoner=new JailPrisoner(playername,time * 6,jailname,cellname,true,""String_Node_Str"",reason,InputOutput.global.getBoolean(Setting.AutomaticMute.getString(),false),""String_Node_Str"",jailer,""String_Node_Str"");
    if (prisoner.getJail() != null) {
      Util.debug(""String_Node_Str"" + playername + ""String_Node_Str"");
      JailCell cell=prisoner.getJail().getRequestedCell(prisoner);
      if (cell != null && (cell.getPlayerName() == null || cell.getPlayerName().trim().equals(""String_Node_Str""))) {
        Util.debug(""String_Node_Str"" + playername + ""String_Node_Str"");
        cell.setPlayerName(prisoner.getName());
        cell.update();
      }
    }
    InputOutput.InsertPrisoner(prisoner);
    Jail.prisoners.put(prisoner.getName(),prisoner);
    Util.Message(""String_Node_Str"",sender);
  }
 else {
    playername=player.getName().toLowerCase();
    JailPrisoner prisoner=new JailPrisoner(playername,time * 6,jailname,cellname,false,""String_Node_Str"",reason,InputOutput.global.getBoolean(Setting.AutomaticMute.getString(),false),""String_Node_Str"",jailer,""String_Node_Str"");
    Jail(prisoner,player);
    Util.Message(""String_Node_Str"",sender);
  }
  if (InputOutput.global.getBoolean(Setting.LogJailingIntoConsole.getString(),false)) {
    String times;
    if (time < 0)     times=""String_Node_Str"";
 else     times=""String_Node_Str"" + String.valueOf(time) + ""String_Node_Str"";
    Jail.log.info(""String_Node_Str"" + playername + ""String_Node_Str""+ jailer+ ""String_Node_Str""+ times);
  }
}","/** 
 * Parse jail command and prepare user for jailing (if he is online, he will be instantly jailed. Otherwise, he will be jailed first time when he comes online)
 * @param sender CommandSender that send this command
 * @param args Arguments for the command. 0 = name, 1 = time, 2 = jailname:cellname, 3 = reason
 */
public static void PrepareJail(CommandSender sender,String args[]){
  String playername;
  int time=-1;
  String jailname=""String_Node_Str"";
  if (args.length < 1 || (args.length > 1 && (!Util.isInteger(args[1]))) || args[0].trim().equals(""String_Node_Str"")) {
    if (sender != null)     Util.Message(""String_Node_Str"",sender);
    return;
  }
  if (Jail.zones.size() < 1) {
    if (sender != null)     Util.Message(""String_Node_Str"",sender);
    return;
  }
  if (Jail.prisoners.containsKey(args[0].toLowerCase())) {
    JailPrisoner prisoner=Jail.prisoners.get(args[0].toLowerCase());
    Player player=Jail.instance.getServer().getPlayer(prisoner.getName());
    if (player != null) {
      player.teleport(prisoner.getTeleportLocation());
      if (sender != null)       Util.Message(""String_Node_Str"",sender);
    }
 else {
      if (sender != null)       Util.Message(""String_Node_Str"",sender);
    }
    return;
  }
  playername=args[0];
  Player player=Jail.instance.getServer().getPlayerExact(playername);
  if (player == null)   player=Jail.instance.getServer().getPlayer(playername);
  if (player != null)   playername=player.getName().toLowerCase();
 else   if (sender != null) {
    Boolean exist=false;
    for (    OfflinePlayer p : Bukkit.getServer().getOfflinePlayers())     if (p.getName().toLowerCase().equals(playername.toLowerCase())) {
      exist=true;
      break;
    }
    if (!exist) {
      Util.Message(""String_Node_Str"" + playername + ""String_Node_Str"",sender);
      return;
    }
  }
  if (args.length > 1)   time=Integer.valueOf(args[1]);
  if (args.length > 2)   jailname=args[2].toLowerCase();
  String reason=""String_Node_Str"";
  if (args.length > 3) {
    for (int i=3; i < args.length; i++) {
      reason+=""String_Node_Str"" + args[i];
    }
    if (reason.length() > 250) {
      if (sender != null)       Util.Message(""String_Node_Str"",sender);
      return;
    }
  }
  if (jailname.equals(InputOutput.global.getString(Setting.NearestJailCode.getString())))   jailname=""String_Node_Str"";
  Util.debug(""String_Node_Str"" + playername + ""String_Node_Str""+ jailname);
  String cellname=null;
  if (jailname.contains(""String_Node_Str"")) {
    cellname=jailname.split(""String_Node_Str"")[1];
    jailname=jailname.split(""String_Node_Str"")[0];
    Util.debug(""String_Node_Str"" + playername + ""String_Node_Str""+ cellname);
  }
  String jailer;
  if (sender instanceof Player)   jailer=((Player)sender).getName();
 else   if (sender == null)   jailer=""String_Node_Str"";
 else   jailer=""String_Node_Str"";
  if (player == null) {
    JailPrisoner prisoner=new JailPrisoner(playername,time * 6,jailname,cellname,true,""String_Node_Str"",reason,InputOutput.global.getBoolean(Setting.AutomaticMute.getString(),false),""String_Node_Str"",jailer,""String_Node_Str"");
    if (prisoner.getJail() != null) {
      Util.debug(""String_Node_Str"" + playername + ""String_Node_Str"");
      JailCell cell=prisoner.getJail().getRequestedCell(prisoner);
      if (cell != null && (cell.getPlayerName() == null || cell.getPlayerName().trim().equals(""String_Node_Str""))) {
        Util.debug(""String_Node_Str"" + playername + ""String_Node_Str"");
        cell.setPlayerName(prisoner.getName());
        cell.update();
      }
    }
    InputOutput.InsertPrisoner(prisoner);
    Jail.prisoners.put(prisoner.getName(),prisoner);
    Util.Message(""String_Node_Str"",sender);
  }
 else {
    playername=player.getName().toLowerCase();
    JailPrisoner prisoner=new JailPrisoner(playername,time * 6,jailname,cellname,false,""String_Node_Str"",reason,InputOutput.global.getBoolean(Setting.AutomaticMute.getString(),false),""String_Node_Str"",jailer,""String_Node_Str"");
    Jail(prisoner,player);
    Util.Message(""String_Node_Str"",sender);
  }
  if (InputOutput.global.getBoolean(Setting.LogJailingIntoConsole.getString(),false)) {
    String times;
    if (time < 0)     times=""String_Node_Str"";
 else     times=""String_Node_Str"" + String.valueOf(time) + ""String_Node_Str"";
    Jail.log.info(""String_Node_Str"" + playername + ""String_Node_Str""+ jailer+ ""String_Node_Str""+ times);
  }
}"
81411,"public void actionPerformed(ActionEvent event){
  if (Jail.timeUpdateRunning)   return;
  Jail.timeUpdateRunning=true;
  if (UpdateTime == 0) {
    getServer().getScheduler().scheduleSyncDelayedTask(Jail.instance,new Runnable(){
      public void run(){
        for (        JailPrisoner prisoner : prisoners.values()) {
          Player player=getServer().getPlayer(prisoner.getName());
          if (prisoner.getRemainingTime() > 0 && (player != null || (prisoner.getJail() != null && prisoner.getJail().getSettings().getBoolean(Setting.CountdownTimeWhenOffline)))) {
            prisoner.setRemainingTime(prisoner.getRemainingTime() - 1);
            InputOutput.UpdatePrisoner(prisoner);
          }
 else           if (player != null && prisoner.getRemainingTime() == 0 && prisoner.offlinePending() == false) {
            PrisonerManager.UnJail(prisoner,player);
          }
          if (player != null && prisoner.getJail() != null) {
            if (prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime) > 0.0) {
              prisoner.setAFKTime(prisoner.getAFKTime() + 1);
              if (prisoner.getAFKTimeMinutes() > prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime)) {
                prisoner.setAFKTime(0);
                player.kickPlayer(prisoner.getJail().getSettings().getString(Setting.MessageAFKKick));
              }
            }
          }
        }
      }
    }
,1L);
    UpdateTime++;
  }
 else {
    UpdateTime++;
    if (UpdateTime > 9) {
      UpdateTime=0;
    }
  }
  for (  JailPrisoner prisoner : prisoners.values()) {
    Player player=getServer().getPlayer(prisoner.getName());
    if (player == null || prisoner.getJail() == null)     continue;
    if (!prisoner.getJail().getSettings().getBoolean(Setting.EnableFoodControl))     continue;
    int minfood=prisoner.getJail().getSettings().getInt(Setting.FoodControlMinimumFood);
    int maxfood=prisoner.getJail().getSettings().getInt(Setting.FoodControlMaximumFood);
    if (player.getFoodLevel() < minfood || player.getFoodLevel() > maxfood) {
      player.setFoodLevel((minfood + maxfood) / 2);
    }
  }
  Jail.timeUpdateRunning=false;
}","public void actionPerformed(ActionEvent event){
  if (Jail.timeUpdateRunning)   return;
  Jail.timeUpdateRunning=true;
  if (UpdateTime == 0) {
    getServer().getScheduler().scheduleSyncDelayedTask(Jail.instance,new Runnable(){
      public void run(){
        for (        JailPrisoner prisoner : prisoners.values().toArray(new JailPrisoner[0])) {
          Player player=getServer().getPlayer(prisoner.getName());
          if (prisoner.getRemainingTime() > 0 && (player != null || (prisoner.getJail() != null && prisoner.getJail().getSettings().getBoolean(Setting.CountdownTimeWhenOffline)))) {
            prisoner.setRemainingTime(prisoner.getRemainingTime() - 1);
            InputOutput.UpdatePrisoner(prisoner);
          }
 else           if (player != null && prisoner.getRemainingTime() == 0 && prisoner.offlinePending() == false) {
            PrisonerManager.UnJail(prisoner,player);
          }
          if (player != null && prisoner.getJail() != null) {
            if (prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime) > 0.0) {
              prisoner.setAFKTime(prisoner.getAFKTime() + 1);
              if (prisoner.getAFKTimeMinutes() > prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime)) {
                prisoner.setAFKTime(0);
                player.kickPlayer(prisoner.getJail().getSettings().getString(Setting.MessageAFKKick));
              }
            }
          }
        }
      }
    }
,1L);
    UpdateTime++;
  }
 else {
    UpdateTime++;
    if (UpdateTime > 9) {
      UpdateTime=0;
    }
  }
  for (  JailPrisoner prisoner : prisoners.values()) {
    Player player=getServer().getPlayer(prisoner.getName());
    if (player == null || prisoner.getJail() == null)     continue;
    if (!prisoner.getJail().getSettings().getBoolean(Setting.EnableFoodControl))     continue;
    int minfood=prisoner.getJail().getSettings().getInt(Setting.FoodControlMinimumFood);
    int maxfood=prisoner.getJail().getSettings().getInt(Setting.FoodControlMaximumFood);
    if (player.getFoodLevel() < minfood || player.getFoodLevel() > maxfood) {
      player.setFoodLevel((minfood + maxfood) / 2);
    }
  }
  Jail.timeUpdateRunning=false;
}"
81412,"public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  BaseCommand cmd=commands.get(command.getName().toLowerCase());
  if (cmd != null)   return cmd.execute(sender,args);
  log.info(""String_Node_Str"");
  return false;
}","public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  BaseCommand cmd=commands.get(command.getName().toLowerCase());
  if (cmd != null)   return cmd.execute(sender,args);
  return false;
}"
81413,"public void run(){
  for (  JailPrisoner prisoner : prisoners.values()) {
    Player player=getServer().getPlayer(prisoner.getName());
    if (prisoner.getRemainingTime() > 0 && (player != null || (prisoner.getJail() != null && prisoner.getJail().getSettings().getBoolean(Setting.CountdownTimeWhenOffline)))) {
      prisoner.setRemainingTime(prisoner.getRemainingTime() - 1);
      InputOutput.UpdatePrisoner(prisoner);
    }
 else     if (player != null && prisoner.getRemainingTime() == 0 && prisoner.offlinePending() == false) {
      PrisonerManager.UnJail(prisoner,player);
    }
    if (player != null && prisoner.getJail() != null) {
      if (prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime) > 0.0) {
        prisoner.setAFKTime(prisoner.getAFKTime() + 1);
        if (prisoner.getAFKTimeMinutes() > prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime)) {
          prisoner.setAFKTime(0);
          player.kickPlayer(prisoner.getJail().getSettings().getString(Setting.MessageAFKKick));
        }
      }
    }
  }
}","public void run(){
  for (  JailPrisoner prisoner : prisoners.values().toArray(new JailPrisoner[0])) {
    Player player=getServer().getPlayer(prisoner.getName());
    if (prisoner.getRemainingTime() > 0 && (player != null || (prisoner.getJail() != null && prisoner.getJail().getSettings().getBoolean(Setting.CountdownTimeWhenOffline)))) {
      prisoner.setRemainingTime(prisoner.getRemainingTime() - 1);
      InputOutput.UpdatePrisoner(prisoner);
    }
 else     if (player != null && prisoner.getRemainingTime() == 0 && prisoner.offlinePending() == false) {
      PrisonerManager.UnJail(prisoner,player);
    }
    if (player != null && prisoner.getJail() != null) {
      if (prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime) > 0.0) {
        prisoner.setAFKTime(prisoner.getAFKTime() + 1);
        if (prisoner.getAFKTimeMinutes() > prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime)) {
          prisoner.setAFKTime(0);
          player.kickPlayer(prisoner.getJail().getSettings().getString(Setting.MessageAFKKick));
        }
      }
    }
  }
}"
81414,"public Boolean run(CommandSender sender,String[] args){
  if (args.length < 1) {
    Util.Message(""String_Node_Str"",sender);
    return true;
  }
 else   if (Jail.zones.containsKey(args[0].toLowerCase())) {
    Util.Message(""String_Node_Str"",sender);
    return true;
  }
  Plugin plugin=Jail.instance.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (plugin != null) {
    WorldEditPlugin we=(WorldEditPlugin)plugin;
    LocalPlayer player=new BukkitPlayer(we,we.getServerInterface(),(Player)sender);
    LocalSession session=we.getWorldEdit().getSession(player);
    if (!(session.getRegionSelector() instanceof CuboidRegionSelector)) {
      Util.Message(""String_Node_Str"",sender);
      return true;
    }
    CuboidRegionSelector selector=(CuboidRegionSelector)session.getRegionSelector();
    try {
      CuboidRegion region=selector.getRegion();
      Vector v1=region.getPos1();
      Block b1=((Player)sender).getWorld().getBlockAt(v1.getBlockX(),v1.getBlockY(),v1.getBlockZ());
      Vector v2=region.getPos2();
      Block b2=((Player)sender).getWorld().getBlockAt(v2.getBlockX(),v2.getBlockY(),v2.getBlockZ());
      JailZoneCreation.selectstart((Player)sender,args[0].toLowerCase());
      JailZoneCreation.select((Player)sender,b1);
      JailZoneCreation.select((Player)sender,b2);
      return true;
    }
 catch (    IncompleteRegionException e) {
      Util.Message(""String_Node_Str"",sender);
      return true;
    }
  }
 else {
    Util.Message(""String_Node_Str"",sender);
  }
  return true;
}","public Boolean run(CommandSender sender,String[] args){
  if (args.length < 1) {
    Util.Message(""String_Node_Str"",sender);
    return true;
  }
 else   if (Jail.zones.containsKey(args[0].toLowerCase())) {
    Util.Message(""String_Node_Str"",sender);
    return true;
  }
  Block[] corners=Util.getWorldEditRegion((Player)sender);
  if (corners == null)   return true;
  JailZoneCreation.selectstart((Player)sender,args[0].toLowerCase());
  JailZoneCreation.select((Player)sender,corners[0]);
  JailZoneCreation.select((Player)sender,corners[1]);
  return true;
}"
81415,"public static void JailSetJail(CommandSender sender,String[] args){
  String parameter=args[1];
  if (!(sender instanceof Player)) {
    Util.Message(""String_Node_Str"",sender);
    return;
  }
  JailZone jail=Jail.zones.get(args[0]);
  if (jail == null) {
    Util.Message(""String_Node_Str"",sender);
    return;
  }
  if (parameter.equals(""String_Node_Str"")) {
    Util.Message(""String_Node_Str"",sender);
    players.put(((Player)sender).getName(),new SelectionPlayer(jail,0));
  }
 else   if (parameter.equals(""String_Node_Str"")) {
    Util.Message(""String_Node_Str"",sender);
    players.put(((Player)sender).getName(),new SelectionPlayer(jail,1));
  }
 else   if (parameter.equals(""String_Node_Str"")) {
    Util.Message(""String_Node_Str"",sender);
    players.put(((Player)sender).getName(),new SelectionPlayer(jail,2));
  }
 else   if (parameter.equals(""String_Node_Str"")) {
    Util.Message(""String_Node_Str"",sender);
    players.put(((Player)sender).getName(),new SelectionPlayer(jail,3));
  }
 else   if (parameter.equals(""String_Node_Str"")) {
    List<String> list=(List<String>)InputOutput.global.getProperty(Setting.ManualJails.getString());
    if (list.contains(jail.getName())) {
      list.remove(jail.getName());
      Util.Message(""String_Node_Str"",sender);
    }
 else {
      list.add(jail.getName());
      Util.Message(""String_Node_Str"",sender);
    }
    InputOutput.global.setProperty(Setting.ManualJails.getString(),list);
    InputOutput.global.save();
  }
 else   if (parameter.equals(""String_Node_Str"")) {
    Plugin plugin=Jail.instance.getServer().getPluginManager().getPlugin(""String_Node_Str"");
    if (plugin != null) {
      WorldEditPlugin we=(WorldEditPlugin)plugin;
      LocalPlayer player=new BukkitPlayer(we,we.getServerInterface(),(Player)sender);
      LocalSession session=we.getWorldEdit().getSession(player);
      if (!(session.getRegionSelector() instanceof CuboidRegionSelector)) {
        Util.Message(""String_Node_Str"",sender);
        return;
      }
      CuboidRegionSelector selector=(CuboidRegionSelector)session.getRegionSelector();
      try {
        CuboidRegion region=selector.getRegion();
        Vector v1=region.getPos1();
        Block b1=((Player)sender).getWorld().getBlockAt(v1.getBlockX(),v1.getBlockY(),v1.getBlockZ());
        Vector v2=region.getPos2();
        Block b2=((Player)sender).getWorld().getBlockAt(v2.getBlockX(),v2.getBlockY(),v2.getBlockZ());
        jail.setFirstCorner(b1.getLocation());
        jail.setSecondCorner(b2.getLocation());
        jail.update();
        Util.Message(""String_Node_Str"",sender);
      }
 catch (      IncompleteRegionException e) {
        Util.Message(""String_Node_Str"",sender);
        return;
      }
    }
 else {
      Util.Message(""String_Node_Str"",sender);
    }
  }
}","public static void JailSetJail(CommandSender sender,String[] args){
  String parameter=args[1];
  if (!(sender instanceof Player)) {
    Util.Message(""String_Node_Str"",sender);
    return;
  }
  JailZone jail=Jail.zones.get(args[0]);
  if (jail == null) {
    Util.Message(""String_Node_Str"",sender);
    return;
  }
  if (parameter.equals(""String_Node_Str"")) {
    Util.Message(""String_Node_Str"",sender);
    players.put(((Player)sender).getName(),new SelectionPlayer(jail,0));
  }
 else   if (parameter.equals(""String_Node_Str"")) {
    Util.Message(""String_Node_Str"",sender);
    players.put(((Player)sender).getName(),new SelectionPlayer(jail,1));
  }
 else   if (parameter.equals(""String_Node_Str"")) {
    Util.Message(""String_Node_Str"",sender);
    players.put(((Player)sender).getName(),new SelectionPlayer(jail,2));
  }
 else   if (parameter.equals(""String_Node_Str"")) {
    Util.Message(""String_Node_Str"",sender);
    players.put(((Player)sender).getName(),new SelectionPlayer(jail,3));
  }
 else   if (parameter.equals(""String_Node_Str"")) {
    List<String> list=(List<String>)InputOutput.global.getProperty(Setting.ManualJails.getString());
    if (list.contains(jail.getName())) {
      list.remove(jail.getName());
      Util.Message(""String_Node_Str"",sender);
    }
 else {
      list.add(jail.getName());
      Util.Message(""String_Node_Str"",sender);
    }
    InputOutput.global.setProperty(Setting.ManualJails.getString(),list);
    InputOutput.global.save();
  }
 else   if (parameter.equals(""String_Node_Str"")) {
    Block[] corners=Util.getWorldEditRegion((Player)sender);
    if (corners == null)     return;
    jail.setFirstCorner(corners[0].getLocation());
    jail.setSecondCorner(corners[1].getLocation());
    jail.update();
    Util.Message(""String_Node_Str"",sender);
  }
}"
81416,"public void onPlayerMove(PlayerMoveEvent event){
  if (event.isCancelled())   return;
  if (Jail.prisoners.containsKey(event.getPlayer().getName().toLowerCase())) {
    JailPrisoner prisoner=Jail.prisoners.get(event.getPlayer().getName().toLowerCase());
    if (prisoner.isBeingReleased())     return;
    prisoner.setAFKTime(0);
    JailZone jail=prisoner.getJail();
    if (!jail.getSettings().getBoolean(Setting.EnablePlayerMoveProtection))     return;
    if (!jail.isInside(event.getTo())) {
      if (jail.getSettings().getString(Setting.PlayerMoveProtectionAction).equals(""String_Node_Str"") && prisoner.canGuardsBeSpawned() && (!Util.isServer18() || event.getPlayer().getGameMode() == GameMode.SURVIVAL)) {
        if (prisoner.getGuards().size() > 0) {
          for (          Wolf w : prisoner.getGuards().toArray(new Wolf[0])) {
            if (w == null || w.isDead()) {
              prisoner.getGuards().remove(w);
              Jail.guards.remove(w);
              continue;
            }
            if (w.getTarget() == null)             w.setTarget(event.getPlayer());
            if (jail.getSettings().getInt(Setting.GuardTeleportDistance) > 0 && (w.getWorld() != w.getTarget().getWorld() || w.getLocation().distanceSquared(w.getTarget().getLocation()) > jail.getSettings().getInt(Setting.GuardTeleportDistance)))             w.teleport(w.getTarget().getLocation());
          }
        }
 else         prisoner.spawnGuards(jail.getSettings().getInt(Setting.NumbefOfGuards),event.getTo(),event.getPlayer());
      }
 else       if (jail.getSettings().getString(Setting.PlayerMoveProtectionAction).equals(""String_Node_Str"")) {
        prisoner.delete();
        plugin.getServer().broadcastMessage(event.getPlayer().getName() + ""String_Node_Str"");
        return;
      }
 else {
        if (!prisoner.canGuardsBeSpawned()) {
          Jail.log.warning(""String_Node_Str"" + prisoner.getName() + ""String_Node_Str"");
          prisoner.setGuardCanBeSpawned(true);
        }
        if (jail.getSettings().getInt(Setting.PlayerMoveProtectionPenalty) > 0 && prisoner.getRemainingTime() > 0) {
          Util.Message(jail.getSettings().getString(Setting.MessageEscapePenalty),event.getPlayer());
          prisoner.setRemainingTime(prisoner.getRemainingTime() + jail.getSettings().getInt(Setting.PlayerMoveProtectionPenalty) * 6);
          InputOutput.UpdatePrisoner(prisoner);
        }
 else {
          Util.Message(jail.getSettings().getString(Setting.MessageEscapeNoPenalty),event.getPlayer());
        }
        Location teleport;
        teleport=prisoner.getTeleportLocation();
        event.setTo(teleport);
      }
    }
 else     if (jail.getSettings().getString(Setting.PlayerMoveProtectionAction).equals(""String_Node_Str"")) {
      for (      Object o : prisoner.getGuards().toArray()) {
        Wolf w=(Wolf)o;
        prisoner.getGuards().remove(w);
        Jail.guards.remove(w);
        w.remove();
      }
    }
  }
}","public void onPlayerMove(PlayerMoveEvent event){
  if (event.isCancelled())   return;
  if (Jail.prisoners.containsKey(event.getPlayer().getName().toLowerCase())) {
    JailPrisoner prisoner=Jail.prisoners.get(event.getPlayer().getName().toLowerCase());
    if (prisoner.isBeingReleased() || prisoner.getJail() == null)     return;
    prisoner.setAFKTime(0);
    JailZone jail=prisoner.getJail();
    if (!jail.getSettings().getBoolean(Setting.EnablePlayerMoveProtection))     return;
    if (!jail.isInside(event.getTo())) {
      if (jail.getSettings().getString(Setting.PlayerMoveProtectionAction).equals(""String_Node_Str"") && prisoner.canGuardsBeSpawned() && (!Util.isServer18() || event.getPlayer().getGameMode() == GameMode.SURVIVAL)) {
        if (prisoner.getGuards().size() > 0) {
          for (          Wolf w : prisoner.getGuards().toArray(new Wolf[0])) {
            if (w == null || w.isDead()) {
              prisoner.getGuards().remove(w);
              Jail.guards.remove(w);
              continue;
            }
            if (w.getTarget() == null)             w.setTarget(event.getPlayer());
            if (jail.getSettings().getInt(Setting.GuardTeleportDistance) > 0 && (w.getWorld() != w.getTarget().getWorld() || w.getLocation().distanceSquared(w.getTarget().getLocation()) > jail.getSettings().getInt(Setting.GuardTeleportDistance)))             w.teleport(w.getTarget().getLocation());
          }
        }
 else         prisoner.spawnGuards(jail.getSettings().getInt(Setting.NumbefOfGuards),event.getTo(),event.getPlayer());
      }
 else       if (jail.getSettings().getString(Setting.PlayerMoveProtectionAction).equals(""String_Node_Str"")) {
        prisoner.delete();
        plugin.getServer().broadcastMessage(event.getPlayer().getName() + ""String_Node_Str"");
        return;
      }
 else {
        if (!prisoner.canGuardsBeSpawned()) {
          Jail.log.warning(""String_Node_Str"" + prisoner.getName() + ""String_Node_Str"");
          prisoner.setGuardCanBeSpawned(true);
        }
        if (jail.getSettings().getInt(Setting.PlayerMoveProtectionPenalty) > 0 && prisoner.getRemainingTime() > 0) {
          Util.Message(jail.getSettings().getString(Setting.MessageEscapePenalty),event.getPlayer());
          prisoner.setRemainingTime(prisoner.getRemainingTime() + jail.getSettings().getInt(Setting.PlayerMoveProtectionPenalty) * 6);
          InputOutput.UpdatePrisoner(prisoner);
        }
 else {
          Util.Message(jail.getSettings().getString(Setting.MessageEscapeNoPenalty),event.getPlayer());
        }
        Location teleport;
        teleport=prisoner.getTeleportLocation();
        event.setTo(teleport);
      }
    }
 else     if (jail.getSettings().getString(Setting.PlayerMoveProtectionAction).equals(""String_Node_Str"")) {
      for (      Object o : prisoner.getGuards().toArray()) {
        Wolf w=(Wolf)o;
        prisoner.getGuards().remove(w);
        Jail.guards.remove(w);
        w.remove();
      }
    }
  }
}"
81417,"public void actionPerformed(ActionEvent event){
  if (Jail.timeUpdateRunning)   return;
  Jail.timeUpdateRunning=true;
  if (UpdateTime == 0) {
    getServer().getScheduler().scheduleSyncDelayedTask(Jail.instance,new Runnable(){
      public void run(){
        for (        JailPrisoner prisoner : prisoners.values()) {
          Player player=getServer().getPlayer(prisoner.getName());
          if (prisoner.getRemainingTime() > 0 && (player != null || (prisoner.getJail() != null && prisoner.getJail().getSettings().getBoolean(Setting.CountdownTimeWhenOffline)))) {
            prisoner.setRemainingTime(prisoner.getRemainingTime() - 1);
            InputOutput.UpdatePrisoner(prisoner);
          }
 else           if (player != null && prisoner.getRemainingTime() == 0 && prisoner.offlinePending() == false) {
            PrisonerManager.UnJail(prisoner,player);
          }
          if (player != null) {
            if (prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime) > 0.0) {
              prisoner.setAFKTime(prisoner.getAFKTime() + 1);
              if (prisoner.getAFKTimeMinutes() > prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime)) {
                prisoner.setAFKTime(0);
                player.kickPlayer(prisoner.getJail().getSettings().getString(Setting.MessageAFKKick));
              }
            }
          }
        }
      }
    }
,1L);
    UpdateTime++;
  }
 else {
    UpdateTime++;
    if (UpdateTime > 9) {
      UpdateTime=0;
    }
  }
  for (  JailPrisoner prisoner : prisoners.values()) {
    Player player=getServer().getPlayer(prisoner.getName());
    if (player == null)     continue;
    if (!prisoner.getJail().getSettings().getBoolean(Setting.EnableFoodControl))     continue;
    int minfood=prisoner.getJail().getSettings().getInt(Setting.FoodControlMinimumFood);
    int maxfood=prisoner.getJail().getSettings().getInt(Setting.FoodControlMaximumFood);
    if (player.getFoodLevel() < minfood || player.getFoodLevel() > maxfood) {
      player.setFoodLevel((minfood + maxfood) / 2);
    }
  }
  Jail.timeUpdateRunning=false;
}","public void actionPerformed(ActionEvent event){
  if (Jail.timeUpdateRunning)   return;
  Jail.timeUpdateRunning=true;
  if (UpdateTime == 0) {
    getServer().getScheduler().scheduleSyncDelayedTask(Jail.instance,new Runnable(){
      public void run(){
        for (        JailPrisoner prisoner : prisoners.values()) {
          Player player=getServer().getPlayer(prisoner.getName());
          if (prisoner.getRemainingTime() > 0 && (player != null || (prisoner.getJail() != null && prisoner.getJail().getSettings().getBoolean(Setting.CountdownTimeWhenOffline)))) {
            prisoner.setRemainingTime(prisoner.getRemainingTime() - 1);
            InputOutput.UpdatePrisoner(prisoner);
          }
 else           if (player != null && prisoner.getRemainingTime() == 0 && prisoner.offlinePending() == false) {
            PrisonerManager.UnJail(prisoner,player);
          }
          if (player != null && prisoner.getJail() != null) {
            if (prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime) > 0.0) {
              prisoner.setAFKTime(prisoner.getAFKTime() + 1);
              if (prisoner.getAFKTimeMinutes() > prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime)) {
                prisoner.setAFKTime(0);
                player.kickPlayer(prisoner.getJail().getSettings().getString(Setting.MessageAFKKick));
              }
            }
          }
        }
      }
    }
,1L);
    UpdateTime++;
  }
 else {
    UpdateTime++;
    if (UpdateTime > 9) {
      UpdateTime=0;
    }
  }
  for (  JailPrisoner prisoner : prisoners.values()) {
    Player player=getServer().getPlayer(prisoner.getName());
    if (player == null || prisoner.getJail() == null)     continue;
    if (!prisoner.getJail().getSettings().getBoolean(Setting.EnableFoodControl))     continue;
    int minfood=prisoner.getJail().getSettings().getInt(Setting.FoodControlMinimumFood);
    int maxfood=prisoner.getJail().getSettings().getInt(Setting.FoodControlMaximumFood);
    if (player.getFoodLevel() < minfood || player.getFoodLevel() > maxfood) {
      player.setFoodLevel((minfood + maxfood) / 2);
    }
  }
  Jail.timeUpdateRunning=false;
}"
81418,"public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  BaseCommand cmd=commands.get(command.getName().toLowerCase());
  if (cmd != null)   return cmd.execute(sender,args);
  return false;
}","public boolean onCommand(CommandSender sender,Command command,String commandLabel,String[] args){
  BaseCommand cmd=commands.get(command.getName().toLowerCase());
  if (cmd != null)   return cmd.execute(sender,args);
  log.info(""String_Node_Str"");
  return false;
}"
81419,"public void run(){
  for (  JailPrisoner prisoner : prisoners.values()) {
    Player player=getServer().getPlayer(prisoner.getName());
    if (prisoner.getRemainingTime() > 0 && (player != null || (prisoner.getJail() != null && prisoner.getJail().getSettings().getBoolean(Setting.CountdownTimeWhenOffline)))) {
      prisoner.setRemainingTime(prisoner.getRemainingTime() - 1);
      InputOutput.UpdatePrisoner(prisoner);
    }
 else     if (player != null && prisoner.getRemainingTime() == 0 && prisoner.offlinePending() == false) {
      PrisonerManager.UnJail(prisoner,player);
    }
    if (player != null) {
      if (prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime) > 0.0) {
        prisoner.setAFKTime(prisoner.getAFKTime() + 1);
        if (prisoner.getAFKTimeMinutes() > prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime)) {
          prisoner.setAFKTime(0);
          player.kickPlayer(prisoner.getJail().getSettings().getString(Setting.MessageAFKKick));
        }
      }
    }
  }
}","public void run(){
  for (  JailPrisoner prisoner : prisoners.values()) {
    Player player=getServer().getPlayer(prisoner.getName());
    if (prisoner.getRemainingTime() > 0 && (player != null || (prisoner.getJail() != null && prisoner.getJail().getSettings().getBoolean(Setting.CountdownTimeWhenOffline)))) {
      prisoner.setRemainingTime(prisoner.getRemainingTime() - 1);
      InputOutput.UpdatePrisoner(prisoner);
    }
 else     if (player != null && prisoner.getRemainingTime() == 0 && prisoner.offlinePending() == false) {
      PrisonerManager.UnJail(prisoner,player);
    }
    if (player != null && prisoner.getJail() != null) {
      if (prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime) > 0.0) {
        prisoner.setAFKTime(prisoner.getAFKTime() + 1);
        if (prisoner.getAFKTimeMinutes() > prisoner.getJail().getSettings().getDouble(Setting.MaximumAFKTime)) {
          prisoner.setAFKTime(0);
          player.kickPlayer(prisoner.getJail().getSettings().getString(Setting.MessageAFKKick));
        }
      }
    }
  }
}"
81420,"public Boolean execute(CommandSender sender,String[] args){
  if (!(sender instanceof Player) && needPlayer) {
    sender.sendMessage(""String_Node_Str"");
    return false;
  }
  if (!Util.permission((Player)sender,permission,adminCommand ? PermissionDefault.OP : PermissionDefault.TRUE)) {
    Util.Message(""String_Node_Str"",sender);
    return false;
  }
  return run(sender,args);
}","public Boolean execute(CommandSender sender,String[] args){
  if (!(sender instanceof Player) && needPlayer) {
    sender.sendMessage(""String_Node_Str"");
    return false;
  }
  if (sender instanceof Player && !Util.permission((Player)sender,permission,adminCommand ? PermissionDefault.OP : PermissionDefault.TRUE)) {
    Util.Message(""String_Node_Str"",sender);
    return false;
  }
  return run(sender,args);
}"
81421,"public static void Transfer(JailPrisoner prisoner,Player player){
  if (prisoner.getTransferDestination() == ""String_Node_Str"")   prisoner.setTransferDestination(JailZoneManager.findNearestJail(player.getLocation(),prisoner.getJail().getName()).getName());
  if (prisoner.getCell() != null) {
    Inventory inventory=player.getInventory();
    JailCell cell=prisoner.getCell();
    cell.setPlayerName(""String_Node_Str"");
    if (cell.getSign() != null) {
      Sign sign=cell.getSign();
      sign.setLine(0,""String_Node_Str"");
      sign.setLine(1,""String_Node_Str"");
      sign.setLine(2,""String_Node_Str"");
      sign.setLine(3,""String_Node_Str"");
      sign.update();
    }
    if (cell.getChest() != null) {
      for (      ItemStack i : cell.getChest().getInventory().getContents())       inventory.addItem(i);
      cell.getChest().getInventory().clear();
    }
    if (cell.getSecondChest() != null) {
      for (      ItemStack i : cell.getSecondChest().getInventory().getContents())       inventory.addItem(i);
      cell.getSecondChest().getInventory().clear();
    }
    prisoner.setCell(null);
  }
  prisoner.SetBeingReleased(true);
  JailZone jail=Jail.zones.get(prisoner.getTransferDestination());
  prisoner.setJail(jail);
  prisoner.setTransferDestination(""String_Node_Str"");
  prisoner.setOfflinePending(false);
  Util.Message(Settings.MessageTransfer,player);
  Jail.prisoners.put(prisoner.getName(),prisoner);
  JailCell cell=jail.getEmptyCell();
  if (cell != null) {
    cell.setPlayerName(player.getName());
    prisoner.setCell(cell);
    prisoner.updateSign();
    if (Settings.StoreInventory && cell.getChest() != null) {
      Chest chest=cell.getChest();
      chest.getInventory().clear();
      for (int i=0; i < player.getInventory().getSize(); i++) {
        if (chest.getInventory().getSize() <= Util.getNumberOfOccupiedItemSlots(chest.getInventory().getContents()))         break;
        if (player.getInventory().getItem(i) == null || player.getInventory().getItem(i).getType() == Material.AIR)         continue;
        chest.getInventory().addItem(player.getInventory().getItem(i));
        player.getInventory().clear(i);
      }
      if (cell.getSecondChest() != null) {
        chest=cell.getSecondChest();
        chest.getInventory().clear();
        for (int i=0; i < player.getInventory().getSize(); i++) {
          if (chest.getInventory().getSize() <= Util.getNumberOfOccupiedItemSlots(chest.getInventory().getContents()))           break;
          if (player.getInventory().getItem(i) == null || player.getInventory().getItem(i).getType() == Material.AIR)           continue;
          chest.getInventory().addItem(player.getInventory().getItem(i));
          player.getInventory().clear(i);
        }
      }
    }
    InputOutput.UpdateCell(cell);
  }
  if (Settings.StoreInventory) {
    prisoner.storeInventory(player.getInventory());
    player.getInventory().clear();
  }
  player.teleport(prisoner.getTeleportLocation());
  prisoner.SetBeingReleased(false);
  InputOutput.UpdatePrisoner(prisoner);
}","public static void Transfer(JailPrisoner prisoner,Player player){
  if (prisoner.getTransferDestination() == ""String_Node_Str"")   prisoner.setTransferDestination(JailZoneManager.findNearestJail(player.getLocation(),prisoner.getJail().getName()).getName());
  if (prisoner.getCell() != null) {
    Inventory inventory=player.getInventory();
    JailCell cell=prisoner.getCell();
    cell.setPlayerName(""String_Node_Str"");
    if (cell.getSign() != null) {
      Sign sign=cell.getSign();
      sign.setLine(0,""String_Node_Str"");
      sign.setLine(1,""String_Node_Str"");
      sign.setLine(2,""String_Node_Str"");
      sign.setLine(3,""String_Node_Str"");
      sign.update();
    }
    if (cell.getChest() != null) {
      for (      ItemStack i : cell.getChest().getInventory().getContents()) {
        if (i == null || i.getType() == Material.AIR)         continue;
        inventory.addItem(i);
      }
      cell.getChest().getInventory().clear();
    }
    if (cell.getSecondChest() != null) {
      for (      ItemStack i : cell.getSecondChest().getInventory().getContents()) {
        if (i == null || i.getType() == Material.AIR)         continue;
        inventory.addItem(i);
      }
      cell.getSecondChest().getInventory().clear();
    }
    prisoner.setCell(null);
  }
  prisoner.SetBeingReleased(true);
  JailZone jail=Jail.zones.get(prisoner.getTransferDestination());
  prisoner.setJail(jail);
  prisoner.setTransferDestination(""String_Node_Str"");
  prisoner.setOfflinePending(false);
  Util.Message(Settings.MessageTransfer,player);
  Jail.prisoners.put(prisoner.getName(),prisoner);
  JailCell cell=jail.getEmptyCell();
  if (cell != null) {
    cell.setPlayerName(player.getName());
    prisoner.setCell(cell);
    prisoner.updateSign();
    if (Settings.StoreInventory && cell.getChest() != null) {
      Chest chest=cell.getChest();
      chest.getInventory().clear();
      for (int i=0; i < player.getInventory().getSize(); i++) {
        if (chest.getInventory().getSize() <= Util.getNumberOfOccupiedItemSlots(chest.getInventory().getContents()))         break;
        if (player.getInventory().getItem(i) == null || player.getInventory().getItem(i).getType() == Material.AIR)         continue;
        chest.getInventory().addItem(player.getInventory().getItem(i));
        player.getInventory().clear(i);
      }
      if (cell.getSecondChest() != null) {
        chest=cell.getSecondChest();
        chest.getInventory().clear();
        for (int i=0; i < player.getInventory().getSize(); i++) {
          if (chest.getInventory().getSize() <= Util.getNumberOfOccupiedItemSlots(chest.getInventory().getContents()))           break;
          if (player.getInventory().getItem(i) == null || player.getInventory().getItem(i).getType() == Material.AIR)           continue;
          chest.getInventory().addItem(player.getInventory().getItem(i));
          player.getInventory().clear(i);
        }
      }
    }
    InputOutput.UpdateCell(cell);
  }
  if (Settings.StoreInventory) {
    prisoner.storeInventory(player.getInventory());
    player.getInventory().clear();
  }
  player.teleport(prisoner.getTeleportLocation());
  prisoner.SetBeingReleased(false);
  InputOutput.UpdatePrisoner(prisoner);
}"
81422,"public void onBlockBreak(BlockBreakEvent event){
  if (event.isCancelled())   return;
  if (plugin.isInsideJail(event.getBlock().getLocation()) && (!Util.permission(event.getPlayer(),""String_Node_Str"",event.getPlayer().isOp()) || Jail.prisoners.containsKey(event.getPlayer().getName().toLowerCase()))) {
    if (Settings.BlockDestroyPenalty > 0 && Jail.prisoners.containsKey(event.getPlayer().getName().toLowerCase()) && Jail.prisoners.get(event.getPlayer().getName().toLowerCase()).getRemainingTime() > 0) {
      JailPrisoner prisoner=Jail.prisoners.get(event.getPlayer().getName().toLowerCase());
      Util.Message(Settings.MessageDestroyPenalty,event.getPlayer());
      prisoner.setRemainingTime(prisoner.getRemainingTime() + Settings.BlockDestroyPenalty * 6);
      InputOutput.UpdatePrisoner(prisoner);
    }
 else {
      Util.Message(Settings.MessageDestroyNoPenalty,event.getPlayer());
    }
    event.setCancelled(true);
  }
}","public void onBlockBreak(BlockBreakEvent event){
  if (event.isCancelled())   return;
  if (JailZoneManager.isInsideJail(event.getBlock().getLocation()) && (!Util.permission(event.getPlayer(),""String_Node_Str"",event.getPlayer().isOp()) || Jail.prisoners.containsKey(event.getPlayer().getName().toLowerCase()))) {
    if (Settings.BlockDestroyPenalty > 0 && Jail.prisoners.containsKey(event.getPlayer().getName().toLowerCase()) && Jail.prisoners.get(event.getPlayer().getName().toLowerCase()).getRemainingTime() > 0) {
      JailPrisoner prisoner=Jail.prisoners.get(event.getPlayer().getName().toLowerCase());
      Util.Message(Settings.MessageDestroyPenalty,event.getPlayer());
      prisoner.setRemainingTime(prisoner.getRemainingTime() + Settings.BlockDestroyPenalty * 6);
      InputOutput.UpdatePrisoner(prisoner);
    }
 else {
      Util.Message(Settings.MessageDestroyNoPenalty,event.getPlayer());
    }
    event.setCancelled(true);
  }
}"
81423,"public void onBlockIgnite(BlockIgniteEvent event){
  if (plugin.isInsideJail(event.getBlock().getLocation())) {
    if (event.getCause() == IgniteCause.FLINT_AND_STEEL) {
      if (Settings.FirePenalty > 0 && Jail.prisoners.containsKey(event.getPlayer().getName()) && Jail.prisoners.get(event.getPlayer().getName()).getRemainingTime() > 0) {
        JailPrisoner prisoner=Jail.prisoners.get(event.getPlayer().getName());
        Util.Message(Settings.MessageFirePenalty,event.getPlayer());
        prisoner.setRemainingTime(prisoner.getRemainingTime() + Settings.FirePenalty * 6);
        InputOutput.UpdatePrisoner(prisoner);
      }
 else {
        Util.Message(Settings.MessageFireNoPenalty,event.getPlayer());
      }
    }
    event.setCancelled(true);
  }
}","public void onBlockIgnite(BlockIgniteEvent event){
  if (JailZoneManager.isInsideJail(event.getBlock().getLocation())) {
    if (event.getCause() == IgniteCause.FLINT_AND_STEEL) {
      if (Settings.FirePenalty > 0 && Jail.prisoners.containsKey(event.getPlayer().getName()) && Jail.prisoners.get(event.getPlayer().getName()).getRemainingTime() > 0) {
        JailPrisoner prisoner=Jail.prisoners.get(event.getPlayer().getName());
        Util.Message(Settings.MessageFirePenalty,event.getPlayer());
        prisoner.setRemainingTime(prisoner.getRemainingTime() + Settings.FirePenalty * 6);
        InputOutput.UpdatePrisoner(prisoner);
      }
 else {
        Util.Message(Settings.MessageFireNoPenalty,event.getPlayer());
      }
    }
    event.setCancelled(true);
  }
}"
81424,"public void onBlockPlace(BlockPlaceEvent event){
  if (event.isCancelled())   return;
  if (plugin.isInsideJail(event.getBlockPlaced().getLocation()) && (!Util.permission(event.getPlayer(),""String_Node_Str"",event.getPlayer().isOp()) || Jail.prisoners.containsKey(event.getPlayer().getName()))) {
    if (Settings.BlockPlacePenalty > 0 && Jail.prisoners.containsKey(event.getPlayer().getName()) && Jail.prisoners.get(event.getPlayer().getName()).getRemainingTime() > 0) {
      JailPrisoner prisoner=Jail.prisoners.get(event.getPlayer().getName());
      Util.Message(Settings.MessagePlacePenalty,event.getPlayer());
      prisoner.setRemainingTime(prisoner.getRemainingTime() + Settings.BlockPlacePenalty * 6);
      InputOutput.UpdatePrisoner(prisoner);
    }
 else {
      Util.Message(Settings.MessagePlaceNoPenalty,event.getPlayer());
    }
    event.setCancelled(true);
  }
}","public void onBlockPlace(BlockPlaceEvent event){
  if (event.isCancelled())   return;
  if (JailZoneManager.isInsideJail(event.getBlockPlaced().getLocation()) && (!Util.permission(event.getPlayer(),""String_Node_Str"",event.getPlayer().isOp()) || Jail.prisoners.containsKey(event.getPlayer().getName()))) {
    if (Settings.BlockPlacePenalty > 0 && Jail.prisoners.containsKey(event.getPlayer().getName()) && Jail.prisoners.get(event.getPlayer().getName()).getRemainingTime() > 0) {
      JailPrisoner prisoner=Jail.prisoners.get(event.getPlayer().getName());
      Util.Message(Settings.MessagePlacePenalty,event.getPlayer());
      prisoner.setRemainingTime(prisoner.getRemainingTime() + Settings.BlockPlacePenalty * 6);
      InputOutput.UpdatePrisoner(prisoner);
    }
 else {
      Util.Message(Settings.MessagePlaceNoPenalty,event.getPlayer());
    }
    event.setCancelled(true);
  }
}"
81425,"public void onPlayerBucketEmpty(PlayerBucketEmptyEvent event){
  if (plugin.isInsideJail(event.getBlockClicked().getLocation()) || plugin.isInsideJail(event.getBlockClicked().getFace(event.getBlockFace()).getLocation())) {
    if (Settings.BucketPenalty > 0 && Jail.prisoners.containsKey(event.getPlayer().getName().toLowerCase()) && Jail.prisoners.get(event.getPlayer().getName().toLowerCase()).getRemainingTime() > 0) {
      JailPrisoner prisoner=Jail.prisoners.get(event.getPlayer().getName().toLowerCase());
      Util.Message(Settings.MessageBucketPenalty,event.getPlayer());
      prisoner.setRemainingTime(prisoner.getRemainingTime() + Settings.BucketPenalty * 6);
      InputOutput.UpdatePrisoner(prisoner);
    }
 else {
      Util.Message(Settings.MessageBucketNoPenalty,event.getPlayer());
    }
    event.setCancelled(true);
  }
}","public void onPlayerBucketEmpty(PlayerBucketEmptyEvent event){
  if (JailZoneManager.isInsideJail(event.getBlockClicked().getLocation()) || JailZoneManager.isInsideJail(event.getBlockClicked().getFace(event.getBlockFace()).getLocation())) {
    if (Settings.BucketPenalty > 0 && Jail.prisoners.containsKey(event.getPlayer().getName().toLowerCase()) && Jail.prisoners.get(event.getPlayer().getName().toLowerCase()).getRemainingTime() > 0) {
      JailPrisoner prisoner=Jail.prisoners.get(event.getPlayer().getName().toLowerCase());
      Util.Message(Settings.MessageBucketPenalty,event.getPlayer());
      prisoner.setRemainingTime(prisoner.getRemainingTime() + Settings.BucketPenalty * 6);
      InputOutput.UpdatePrisoner(prisoner);
    }
 else {
      Util.Message(Settings.MessageBucketNoPenalty,event.getPlayer());
    }
    event.setCancelled(true);
  }
}"
81426,"/** 
 * Delete this cell from database
 */
public void delete(){
  InputOutput.DeleteCell(this);
  getJail().getCellList().remove(this);
}","/** 
 * Delete this cell from database
 */
public void delete(){
  InputOutput.DeleteCell(this);
  if (getJail() != null)   getJail().getCellList().remove(this);
}"
81427,"/** 
 * @return First empty cell in this jail zone.
 */
public JailCell getEmptyCell(){
  for (  JailCell c : cells) {
    if (c.getPlayerName() == null || c.getPlayerName().trim().equals(""String_Node_Str"")) {
      return c;
    }
  }
  return null;
}","/** 
 * @return First empty cell in this jail zone.
 */
public JailCell getEmptyCell(){
  for (  JailCell c : cells) {
    if (c.getPlayerName() == null || c.getPlayerName().trim().equals(""String_Node_Str"") || !Jail.prisoners.containsKey(c.getPlayerName())) {
      return c;
    }
  }
  return null;
}"
81428,"/** 
 * Parse jail command and prepare user for jailing (if he is online, he will be instantly jailed. Otherwise, he will be jailed first time when he comes online)
 * @param sender CommandSender that send this command
 * @param args Arguments for the command. 0 = name, 1 = time, 2 = jailname:cellname, 3 = reason
 */
public static void PrepareJail(CommandSender sender,String args[]){
  String playername;
  int time=-1;
  String jailname=""String_Node_Str"";
  if (args.length < 1) {
    if (sender != null)     Util.Message(""String_Node_Str"",sender);
    return;
  }
  if (Jail.zones.size() < 1) {
    if (sender != null)     Util.Message(""String_Node_Str"",sender);
    return;
  }
  if (Jail.prisoners.containsKey(args[0].toLowerCase())) {
    JailPrisoner prisoner=Jail.prisoners.get(args[0].toLowerCase());
    Player player=Jail.instance.getServer().getPlayer(prisoner.getName());
    if (player != null) {
      player.teleport(prisoner.getTeleportLocation());
      if (sender != null)       Util.Message(""String_Node_Str"",sender);
    }
 else {
      if (sender != null)       Util.Message(""String_Node_Str"",sender);
    }
    return;
  }
  playername=args[0].toLowerCase();
  if (args.length > 1)   time=Integer.valueOf(args[1]);
  if (args.length > 2)   jailname=args[2].toLowerCase();
  String reason=""String_Node_Str"";
  if (args.length > 3) {
    for (int i=3; i < args.length; i++) {
      reason+=""String_Node_Str"" + args[i];
    }
    if (reason.length() > 250) {
      if (sender != null)       Util.Message(""String_Node_Str"",sender);
      return;
    }
  }
  if (jailname.equals(Settings.NearestJailCode))   jailname=""String_Node_Str"";
  String cellname=null;
  if (jailname.contains(""String_Node_Str"")) {
    cellname=jailname.split(""String_Node_Str"")[1];
    jailname=jailname.split(""String_Node_Str"")[0];
  }
  String jailer;
  if (sender instanceof Player)   jailer=((Player)sender).getName();
 else   jailer=""String_Node_Str"";
  Player player=Jail.instance.getServer().getPlayer(playername);
  if (player == null) {
    JailPrisoner prisoner=new JailPrisoner(playername,time * 6,jailname,null,true,""String_Node_Str"",reason,Settings.AutomaticMute,""String_Node_Str"",jailer);
    JailCell cell=prisoner.getJail().getRequestedCell(prisoner);
    if (cell != null && (cell.getPlayerName() == null || !cell.getPlayerName().trim().equals(""String_Node_Str""))) {
      cell.setPlayerName(prisoner.getName());
      cell.update();
    }
    InputOutput.InsertPrisoner(prisoner);
    Jail.prisoners.put(prisoner.getName(),prisoner);
    Util.Message(""String_Node_Str"",sender);
  }
 else {
    JailPrisoner prisoner=new JailPrisoner(playername,time * 6,jailname,cellname,false,""String_Node_Str"",reason,Settings.AutomaticMute,""String_Node_Str"",jailer);
    Jail(prisoner,player);
    Util.Message(""String_Node_Str"",sender);
  }
}","/** 
 * Parse jail command and prepare user for jailing (if he is online, he will be instantly jailed. Otherwise, he will be jailed first time when he comes online)
 * @param sender CommandSender that send this command
 * @param args Arguments for the command. 0 = name, 1 = time, 2 = jailname:cellname, 3 = reason
 */
public static void PrepareJail(CommandSender sender,String args[]){
  String playername;
  int time=-1;
  String jailname=""String_Node_Str"";
  if (args.length < 1) {
    if (sender != null)     Util.Message(""String_Node_Str"",sender);
    return;
  }
  if (Jail.zones.size() < 1) {
    if (sender != null)     Util.Message(""String_Node_Str"",sender);
    return;
  }
  if (Jail.prisoners.containsKey(args[0].toLowerCase())) {
    JailPrisoner prisoner=Jail.prisoners.get(args[0].toLowerCase());
    Player player=Jail.instance.getServer().getPlayer(prisoner.getName());
    if (player != null) {
      player.teleport(prisoner.getTeleportLocation());
      if (sender != null)       Util.Message(""String_Node_Str"",sender);
    }
 else {
      if (sender != null)       Util.Message(""String_Node_Str"",sender);
    }
    return;
  }
  playername=args[0].toLowerCase();
  if (args.length > 1)   time=Integer.valueOf(args[1]);
  if (args.length > 2)   jailname=args[2].toLowerCase();
  String reason=""String_Node_Str"";
  if (args.length > 3) {
    for (int i=3; i < args.length; i++) {
      reason+=""String_Node_Str"" + args[i];
    }
    if (reason.length() > 250) {
      if (sender != null)       Util.Message(""String_Node_Str"",sender);
      return;
    }
  }
  if (jailname.equals(Settings.NearestJailCode))   jailname=""String_Node_Str"";
  String cellname=null;
  if (jailname.contains(""String_Node_Str"")) {
    cellname=jailname.split(""String_Node_Str"")[1];
    jailname=jailname.split(""String_Node_Str"")[0];
  }
  String jailer;
  if (sender instanceof Player)   jailer=((Player)sender).getName();
 else   jailer=""String_Node_Str"";
  Player player=Jail.instance.getServer().getPlayer(playername);
  if (player == null) {
    JailPrisoner prisoner=new JailPrisoner(playername,time * 6,jailname,cellname,true,""String_Node_Str"",reason,Settings.AutomaticMute,""String_Node_Str"",jailer);
    if (prisoner.getJail() != null) {
      JailCell cell=prisoner.getJail().getRequestedCell(prisoner);
      if (cell != null && (cell.getPlayerName() == null || !cell.getPlayerName().trim().equals(""String_Node_Str""))) {
        cell.setPlayerName(prisoner.getName());
        cell.update();
      }
    }
    InputOutput.InsertPrisoner(prisoner);
    Jail.prisoners.put(prisoner.getName(),prisoner);
    Util.Message(""String_Node_Str"",sender);
  }
 else {
    playername=player.getName().toLowerCase();
    JailPrisoner prisoner=new JailPrisoner(playername,time * 6,jailname,cellname,false,""String_Node_Str"",reason,Settings.AutomaticMute,""String_Node_Str"",jailer);
    Jail(prisoner,player);
    Util.Message(""String_Node_Str"",sender);
  }
}"
81429,"/** 
 * Performs jailing of specified JailPrisoner.  If you just want to jail someone, I recommend using JailAPI.jailPlayer,  because it supports offline jail and it's easier to do.
 * @param prisoner JailPrisoner class of the new prisoner. Must be already inserted into database
 * @param player Player that will be teleported
 */
public static void Jail(JailPrisoner prisoner,Player player){
  prisoner.SetBeingReleased(true);
  JailZone jail=prisoner.getJail();
  if (jail == null) {
    jail=JailZoneManager.findNearestJail(player.getLocation());
    prisoner.setJail(jail);
  }
  prisoner.setOfflinePending(false);
  if (prisoner.getReason().isEmpty())   Util.Message(Settings.MessageJail,player);
 else   Util.Message(Settings.MessageJailReason.replace(""String_Node_Str"",prisoner.getReason()),player);
  if (Settings.DeleteInventoryOnJail)   player.getInventory().clear();
  JailCell cell=jail.getRequestedCell(prisoner);
  if (cell == null || (cell.getPlayerName() != null && !cell.getPlayerName().equals(""String_Node_Str"") && !cell.getPlayerName().equals(prisoner.getName()))) {
    cell=null;
    cell=jail.getEmptyCell();
  }
  if (cell != null) {
    cell.setPlayerName(player.getName());
    prisoner.setCell(cell);
    prisoner.updateSign();
    if (Settings.StoreInventory && cell.getChest() != null) {
      Chest chest=cell.getChest();
      chest.getInventory().clear();
      for (int i=0; i < player.getInventory().getSize(); i++) {
        if (chest.getInventory().getSize() <= Util.getNumberOfOccupiedItemSlots(chest.getInventory().getContents()))         break;
        if (player.getInventory().getItem(i) == null || player.getInventory().getItem(i).getType() == Material.AIR)         continue;
        chest.getInventory().addItem(player.getInventory().getItem(i));
        player.getInventory().clear(i);
      }
      if (cell.getSecondChest() != null) {
        chest=cell.getSecondChest();
        chest.getInventory().clear();
        for (int i=0; i < player.getInventory().getSize(); i++) {
          if (chest.getInventory().getSize() <= Util.getNumberOfOccupiedItemSlots(chest.getInventory().getContents()))           break;
          if (player.getInventory().getItem(i) == null || player.getInventory().getItem(i).getType() == Material.AIR)           continue;
          chest.getInventory().addItem(player.getInventory().getItem(i));
          player.getInventory().clear(i);
        }
      }
    }
    cell.update();
  }
  player.teleport(prisoner.getTeleportLocation());
  if (Settings.StoreInventory) {
    prisoner.storeInventory(player.getInventory());
    player.getInventory().clear();
  }
  if (Jail.prisoners.containsKey(prisoner.getName()))   InputOutput.UpdatePrisoner(prisoner);
 else   InputOutput.InsertPrisoner(prisoner);
  Jail.prisoners.put(prisoner.getName(),prisoner);
  prisoner.SetBeingReleased(false);
  for (  String s : Settings.ExecutedCommandsOnJail) {
    CraftServer cs=(CraftServer)Jail.instance.getServer();
    CommandSender coms=new ConsoleCommandSender(Jail.instance.getServer());
    cs.dispatchCommand(coms,s.replace(""String_Node_Str"",player.getName()));
  }
}","/** 
 * Performs jailing of specified JailPrisoner.  If you just want to jail someone, I recommend using JailAPI.jailPlayer,  because it supports offline jail and it's easier to do.
 * @param prisoner JailPrisoner class of the new prisoner. Must be already inserted into database
 * @param player Player that will be teleported
 */
public static void Jail(JailPrisoner prisoner,Player player){
  if (!prisoner.getName().equals(player.getName().toLowerCase()))   return;
  prisoner.SetBeingReleased(true);
  JailZone jail=prisoner.getJail();
  if (jail == null) {
    jail=JailZoneManager.findNearestJail(player.getLocation());
    prisoner.setJail(jail);
  }
  prisoner.setOfflinePending(false);
  if (prisoner.getReason().isEmpty())   Util.Message(Settings.MessageJail,player);
 else   Util.Message(Settings.MessageJailReason.replace(""String_Node_Str"",prisoner.getReason()),player);
  if (Settings.DeleteInventoryOnJail)   player.getInventory().clear();
  JailCell cell=jail.getRequestedCell(prisoner);
  if (cell == null || (cell.getPlayerName() != null && !cell.getPlayerName().equals(""String_Node_Str"") && !cell.getPlayerName().equals(prisoner.getName()))) {
    cell=null;
    cell=jail.getEmptyCell();
  }
  if (cell != null) {
    cell.setPlayerName(player.getName());
    prisoner.setCell(cell);
    prisoner.updateSign();
    if (Settings.StoreInventory && cell.getChest() != null) {
      Chest chest=cell.getChest();
      chest.getInventory().clear();
      for (int i=0; i < player.getInventory().getSize(); i++) {
        if (chest.getInventory().getSize() <= Util.getNumberOfOccupiedItemSlots(chest.getInventory().getContents()))         break;
        if (player.getInventory().getItem(i) == null || player.getInventory().getItem(i).getType() == Material.AIR)         continue;
        chest.getInventory().addItem(player.getInventory().getItem(i));
        player.getInventory().clear(i);
      }
      if (cell.getSecondChest() != null) {
        chest=cell.getSecondChest();
        chest.getInventory().clear();
        for (int i=0; i < player.getInventory().getSize(); i++) {
          if (chest.getInventory().getSize() <= Util.getNumberOfOccupiedItemSlots(chest.getInventory().getContents()))           break;
          if (player.getInventory().getItem(i) == null || player.getInventory().getItem(i).getType() == Material.AIR)           continue;
          chest.getInventory().addItem(player.getInventory().getItem(i));
          player.getInventory().clear(i);
        }
      }
    }
    cell.update();
  }
  player.teleport(prisoner.getTeleportLocation());
  if (Settings.StoreInventory) {
    prisoner.storeInventory(player.getInventory());
    player.getInventory().clear();
  }
  if (Jail.prisoners.containsKey(prisoner.getName()))   InputOutput.UpdatePrisoner(prisoner);
 else   InputOutput.InsertPrisoner(prisoner);
  Jail.prisoners.put(prisoner.getName(),prisoner);
  prisoner.SetBeingReleased(false);
  for (  String s : Settings.ExecutedCommandsOnJail) {
    CraftServer cs=(CraftServer)Jail.instance.getServer();
    CommandSender coms=new ConsoleCommandSender(Jail.instance.getServer());
    cs.dispatchCommand(coms,s.replace(""String_Node_Str"",player.getName()));
  }
}"
81430,"public PropertiesFile(File file){
  this.file=file;
  map=new HashMap<String,PropertiesEntry>();
  Scanner scan;
  try {
    if (!file.exists())     file.createNewFile();
    scan=new Scanner(file);
    while (scan.hasNextLine()) {
      String line=scan.nextLine();
      if (!line.contains(""String_Node_Str""))       continue;
      int equals=line.indexOf(""String_Node_Str"");
      int commentIndex=line.length();
      if (line.contains(""String_Node_Str"")) {
        commentIndex=line.indexOf(""String_Node_Str"");
      }
      String key=line.substring(0,equals).trim();
      if (key.equals(""String_Node_Str""))       continue;
      String value=line.substring(equals + 1,commentIndex).trim();
      String comment=""String_Node_Str"";
      if (commentIndex < line.length() - 1) {
        comment=line.substring(commentIndex + 1,line.length()).trim();
      }
      map.put(key,new PropertiesEntry(value));
    }
  }
 catch (  FileNotFoundException e) {
    Jail.log.log(Level.SEVERE,""String_Node_Str"" + file.getName());
  }
catch (  IOException e) {
    Jail.log.log(Level.SEVERE,""String_Node_Str"" + file.getName());
  }
}","public PropertiesFile(File file){
  this.file=file;
  map=new HashMap<String,PropertiesEntry>();
  Scanner scan;
  try {
    if (!file.exists())     file.createNewFile();
    scan=new Scanner(file);
    while (scan.hasNextLine()) {
      String line=scan.nextLine();
      if (!line.contains(""String_Node_Str""))       continue;
      int equals=line.indexOf(""String_Node_Str"");
      int commentIndex=line.length();
      if (line.contains(""String_Node_Str"")) {
        commentIndex=line.indexOf(""String_Node_Str"");
      }
      String key=line.substring(0,equals).trim();
      if (key.equals(""String_Node_Str""))       continue;
      String value=line.substring(equals + 1,commentIndex).trim();
      map.put(key,new PropertiesEntry(value));
    }
  }
 catch (  FileNotFoundException e) {
    Jail.log.log(Level.SEVERE,""String_Node_Str"" + file.getName());
  }
catch (  IOException e) {
    Jail.log.log(Level.SEVERE,""String_Node_Str"" + file.getName());
  }
}"
81431,"public void onPlayerRespawn(PlayerRespawnEvent event){
  if (Jail.prisoners.containsKey(event.getPlayer().getName().toLowerCase()) && !Jail.prisoners.get(event.getPlayer().getName().toLowerCase()).isBeingReleased()) {
    JailPrisoner prisoner=Jail.prisoners.get(event.getPlayer().getName().toLowerCase());
    JailZone jail=prisoner.getJail();
    if (!jail.isInside(event.getRespawnLocation())) {
      if (Settings.PlayerMovePenalty > 0 && prisoner.getRemainingTime() > 0) {
        Util.Message(Settings.MessageMovePenalty,event.getPlayer());
        prisoner.setRemainingTime(prisoner.getRemainingTime() + Settings.PlayerMovePenalty * 6);
        InputOutput.UpdatePrisoner(prisoner);
      }
 else {
        Util.Message(Settings.MessageMoveNoPenalty,event.getPlayer());
      }
      event.setRespawnLocation(prisoner.getTeleportLocation());
    }
  }
}","public void onPlayerRespawn(PlayerRespawnEvent event){
  if (Jail.prisoners.containsKey(event.getPlayer().getName().toLowerCase()) && !Jail.prisoners.get(event.getPlayer().getName().toLowerCase()).isBeingReleased()) {
    JailPrisoner prisoner=Jail.prisoners.get(event.getPlayer().getName().toLowerCase());
    JailZone jail=prisoner.getJail();
    if (!jail.isInside(event.getRespawnLocation())) {
      if (Settings.PlayerMovePenalty > 0 && prisoner.getRemainingTime() > 0) {
        Util.Message(Settings.MessageMovePenalty,event.getPlayer());
        prisoner.setRemainingTime(prisoner.getRemainingTime() + Settings.PlayerMovePenalty * 6);
        InputOutput.UpdatePrisoner(prisoner);
      }
 else {
        Util.Message(Settings.MessageMoveNoPenalty,event.getPlayer());
      }
      final Location teleloc=prisoner.getTeleportLocation();
      final Player player=event.getPlayer();
      Jail.instance.getServer().getScheduler().scheduleSyncDelayedTask(Jail.instance,new Runnable(){
        public void run(){
          if (player != null)           player.teleport(teleloc);
        }
      }
,1);
    }
  }
}"
81432,"@Override public void onEnable(){
  instance=this;
  PlayerListener=new JailPlayerListener(this);
  BlockListener=new JailBlockListener();
  PlayerPreventListener=new JailPlayerProtectionListener(this);
  EntityListener=new JailEntityListener(this);
  IO=new InputOutput();
  API=new JailAPI();
  UpdateTime=0;
  IO.LoadSettings();
  IO.PrepareDB();
  IO.LoadJails();
  IO.LoadPrisoners();
  IO.LoadCells();
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_COMMAND_PREPROCESS,PlayerPreventListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_JOIN,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_INTERACT,PlayerListener,Event.Priority.High,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_BREAK,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_MOVE,PlayerPreventListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_TELEPORT,PlayerPreventListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_PLACE,BlockListener,Event.Priority.High,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_RESPAWN,PlayerPreventListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_QUIT,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DEATH,EntityListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DAMAGE,EntityListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_EXPLODE,EntityListener,Event.Priority.High,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_CHAT,PlayerListener,Event.Priority.Lowest,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_CHAT,PlayerPreventListener,Event.Priority.High,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_INTERACT,PlayerPreventListener,Event.Priority.High,this);
  timer=new Timer(1000,action);
  timer.start();
  permissions=this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  commands.put(""String_Node_Str"",new JailCommand());
  commands.put(""String_Node_Str"",new UnJailCommand());
  commands.put(""String_Node_Str"",new JailDeleteCommand());
  commands.put(""String_Node_Str"",new JailCreateCellsCommand());
  commands.put(""String_Node_Str"",new JailTeleInCommand());
  commands.put(""String_Node_Str"",new JailTeleOutCommand());
  commands.put(""String_Node_Str"",new UnJailForceCommand());
  commands.put(""String_Node_Str"",new JailClearCommand());
  commands.put(""String_Node_Str"",new JailClearForceCommand());
  commands.put(""String_Node_Str"",new JailTransferCommand());
  commands.put(""String_Node_Str"",new JailTransferAllCommand());
  commands.put(""String_Node_Str"",new JailStatusCommand());
  commands.put(""String_Node_Str"",new JailCheckCommand());
  commands.put(""String_Node_Str"",new JailListCommand());
  commands.put(""String_Node_Str"",new JailMuteCommand());
  commands.put(""String_Node_Str"",new JailStopCommand());
  commands.put(""String_Node_Str"",new JailSetCommand());
  commands.put(""String_Node_Str"",new JailPayCommand());
  commands.put(""String_Node_Str"",new JailCreateCommand());
  commands.put(""String_Node_Str"",new JailDeleteCellsCommand());
  commands.put(""String_Node_Str"",new JailListCellsCommand());
  commands.put(""String_Node_Str"",new JailStickCommand());
}","@Override public void onEnable(){
  instance=this;
  PlayerListener=new JailPlayerListener(this);
  BlockListener=new JailBlockListener();
  PlayerPreventListener=new JailPlayerProtectionListener(this);
  EntityListener=new JailEntityListener(this);
  IO=new InputOutput();
  API=new JailAPI();
  UpdateTime=0;
  IO.LoadSettings();
  IO.PrepareDB();
  IO.LoadJails();
  IO.LoadPrisoners();
  IO.LoadCells();
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_COMMAND_PREPROCESS,PlayerPreventListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_JOIN,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_INTERACT,PlayerListener,Event.Priority.High,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_BREAK,BlockListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_MOVE,PlayerPreventListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_TELEPORT,PlayerPreventListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.BLOCK_PLACE,BlockListener,Event.Priority.High,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_RESPAWN,PlayerPreventListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_QUIT,PlayerListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DEATH,EntityListener,Event.Priority.Monitor,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DAMAGE,EntityListener,Event.Priority.Low,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_EXPLODE,EntityListener,Event.Priority.High,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_CHAT,PlayerListener,Event.Priority.Lowest,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_CHAT,PlayerPreventListener,Event.Priority.High,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_INTERACT,PlayerPreventListener,Event.Priority.High,this);
  timer=new Timer(1000,action);
  timer.start();
  permissions=this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  commands.put(""String_Node_Str"",new JailCommand());
  commands.put(""String_Node_Str"",new UnJailCommand());
  commands.put(""String_Node_Str"",new JailDeleteCommand());
  commands.put(""String_Node_Str"",new JailCreateCellsCommand());
  commands.put(""String_Node_Str"",new JailTeleInCommand());
  commands.put(""String_Node_Str"",new JailTeleOutCommand());
  commands.put(""String_Node_Str"",new UnJailForceCommand());
  commands.put(""String_Node_Str"",new JailClearCommand());
  commands.put(""String_Node_Str"",new JailClearForceCommand());
  commands.put(""String_Node_Str"",new JailTransferCommand());
  commands.put(""String_Node_Str"",new JailTransferAllCommand());
  commands.put(""String_Node_Str"",new JailStatusCommand());
  commands.put(""String_Node_Str"",new JailCheckCommand());
  commands.put(""String_Node_Str"",new JailListCommand());
  commands.put(""String_Node_Str"",new JailMuteCommand());
  commands.put(""String_Node_Str"",new JailStopCommand());
  commands.put(""String_Node_Str"",new JailSetCommand());
  commands.put(""String_Node_Str"",new JailPayCommand());
  commands.put(""String_Node_Str"",new JailCreateCommand());
  commands.put(""String_Node_Str"",new JailDeleteCellsCommand());
  commands.put(""String_Node_Str"",new JailListCellsCommand());
  commands.put(""String_Node_Str"",new JailStickCommand());
  commands.put(""String_Node_Str"",new JailCreateWeCommand());
}"
81433,"public Boolean run(CommandSender sender,String[] args){
  Player player=(Player)sender;
  iConomy iConomy=null;
  Plugin iCoplugin=Jail.instance.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (iCoplugin == null) {
    Util.Message(""String_Node_Str"",sender);
    return true;
  }
  iConomy=(iConomy)iCoplugin;
  if (args.length < 1) {
    JailPrisoner prisoner=Jail.prisoners.get(((Player)sender).getName().toLowerCase());
    JailZone jail=prisoner.getJail();
    if (prisoner == null) {
      Util.Message(""String_Node_Str"",sender);
      return true;
    }
    if (jail.getSettings().getBoolean(Setting.EnablePaying) && jail.getSettings().getDouble(Setting.PriceForInfiniteJail) > 0 && prisoner.getRemainingTime() < 0)     Util.Message(""String_Node_Str"" + iConomy.format(jail.getSettings().getDouble(Setting.PriceForInfiniteJail)) + ""String_Node_Str"",sender);
 else     if (!jail.getSettings().getBoolean(Setting.EnablePaying) || prisoner.getRemainingTime() < 0 || jail.getSettings().getDouble(Setting.PriceForInfiniteJail) == 0)     Util.Message(""String_Node_Str"",sender);
 else {
      String message=""String_Node_Str"" + iConomy.format(jail.getSettings().getDouble(Setting.PricePerMinute)) + ""String_Node_Str"";
      message+=""String_Node_Str"" + iConomy.format(jail.getSettings().getDouble(Setting.PricePerMinute) * Math.round(prisoner.getRemainingTimeMinutes())) + ""String_Node_Str"";
      Util.Message(message,sender);
    }
  }
 else {
    JailPrisoner prisoner;
    if (args.length > 1) {
      prisoner=Jail.prisoners.get(args[1].toLowerCase());
      if (prisoner == null) {
        Util.Message(""String_Node_Str"",sender);
        return true;
      }
    }
 else {
      prisoner=Jail.prisoners.get(((Player)sender).getName().toLowerCase());
      if (prisoner == null) {
        Util.Message(""String_Node_Str"",sender);
        return true;
      }
    }
    JailZone jail=prisoner.getJail();
    if ((prisoner.getRemainingTime() < 0 && jail.getSettings().getDouble(Setting.PriceForInfiniteJail) == 0) || (prisoner.getRemainingTime() > 0 && jail.getSettings().getDouble(Setting.PricePerMinute) == 0)) {
      if (args.length > 1)       Util.Message(""String_Node_Str"",sender);
 else       Util.Message(""String_Node_Str"",sender);
      return true;
    }
    Account account=iConomy.getAccount(player.getName());
    Holdings holdings=account.getHoldings();
    double payment=Double.parseDouble(args[0]);
    if (holdings.hasUnder(payment)) {
      Util.Message(""String_Node_Str"",sender);
      return true;
    }
    if (prisoner.getRemainingTime() < 0) {
      if (payment >= jail.getSettings().getDouble(Setting.PriceForInfiniteJail)) {
        if (args.length > 1)         Util.Message(""String_Node_Str"" + iConomy.format(jail.getSettings().getDouble(Setting.PriceForInfiniteJail)) + ""String_Node_Str""+ prisoner.getName()+ ""String_Node_Str"",sender);
 else         Util.Message(""String_Node_Str"" + iConomy.format(jail.getSettings().getDouble(Setting.PriceForInfiniteJail)) + ""String_Node_Str"",sender);
        holdings.subtract(jail.getSettings().getDouble(Setting.PriceForInfiniteJail));
        prisoner.release();
      }
 else {
        Util.Message(""String_Node_Str"",sender);
        return true;
      }
    }
 else {
      double releasebill=jail.getSettings().getDouble(Setting.PricePerMinute) * Math.round(prisoner.getRemainingTimeMinutes());
      if (payment >= releasebill) {
        if (args.length > 1)         Util.Message(""String_Node_Str"" + iConomy.format(releasebill) + ""String_Node_Str""+ prisoner.getName()+ ""String_Node_Str"",sender);
 else         Util.Message(""String_Node_Str"" + iConomy.format(releasebill) + ""String_Node_Str"",sender);
        holdings.subtract(releasebill);
        prisoner.release();
      }
 else {
        int minutes=(int)Math.round(payment / jail.getSettings().getDouble(Setting.PricePerMinute));
        double bill=minutes * jail.getSettings().getDouble(Setting.PricePerMinute);
        int remain=(int)(Math.round(prisoner.getRemainingTimeMinutes()) - minutes);
        if (args.length > 1)         Util.Message(""String_Node_Str"" + iConomy.format(bill) + ""String_Node_Str""+ prisoner.getName()+ ""String_Node_Str""+ String.valueOf(remain)+ ""String_Node_Str"",sender);
 else         Util.Message(""String_Node_Str"" + iConomy.format(bill) + ""String_Node_Str""+ String.valueOf(remain)+ ""String_Node_Str"",sender);
        holdings.subtract(bill);
        prisoner.setRemainingTimeMinutes(remain);
      }
    }
  }
  return true;
}","public Boolean run(CommandSender sender,String[] args){
  Player player=(Player)sender;
  iConomy iConomy=null;
  Plugin iCoplugin=Jail.instance.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (iCoplugin == null) {
    Util.Message(""String_Node_Str"",sender);
    return true;
  }
  iConomy=(iConomy)iCoplugin;
  if (args.length < 1) {
    JailPrisoner prisoner=Jail.prisoners.get(((Player)sender).getName().toLowerCase());
    if (prisoner == null) {
      Util.Message(""String_Node_Str"",sender);
      return true;
    }
    JailZone jail=prisoner.getJail();
    if (jail.getSettings().getBoolean(Setting.EnablePaying) && jail.getSettings().getDouble(Setting.PriceForInfiniteJail) > 0 && prisoner.getRemainingTime() < 0)     Util.Message(""String_Node_Str"" + iConomy.format(jail.getSettings().getDouble(Setting.PriceForInfiniteJail)) + ""String_Node_Str"",sender);
 else     if (!jail.getSettings().getBoolean(Setting.EnablePaying) || prisoner.getRemainingTime() < 0 || jail.getSettings().getDouble(Setting.PriceForInfiniteJail) == 0)     Util.Message(""String_Node_Str"",sender);
 else {
      String message=""String_Node_Str"" + iConomy.format(jail.getSettings().getDouble(Setting.PricePerMinute)) + ""String_Node_Str"";
      message+=""String_Node_Str"" + iConomy.format(jail.getSettings().getDouble(Setting.PricePerMinute) * Math.round(prisoner.getRemainingTimeMinutes())) + ""String_Node_Str"";
      Util.Message(message,sender);
    }
  }
 else {
    JailPrisoner prisoner;
    if (args.length > 1) {
      prisoner=Jail.prisoners.get(args[1].toLowerCase());
      if (prisoner == null) {
        Util.Message(""String_Node_Str"",sender);
        return true;
      }
    }
 else {
      prisoner=Jail.prisoners.get(((Player)sender).getName().toLowerCase());
      if (prisoner == null) {
        Util.Message(""String_Node_Str"",sender);
        return true;
      }
    }
    JailZone jail=prisoner.getJail();
    if ((prisoner.getRemainingTime() < 0 && jail.getSettings().getDouble(Setting.PriceForInfiniteJail) == 0) || (prisoner.getRemainingTime() > 0 && jail.getSettings().getDouble(Setting.PricePerMinute) == 0)) {
      if (args.length > 1)       Util.Message(""String_Node_Str"",sender);
 else       Util.Message(""String_Node_Str"",sender);
      return true;
    }
    Account account=iConomy.getAccount(player.getName());
    Holdings holdings=account.getHoldings();
    double payment=Double.parseDouble(args[0]);
    if (holdings.hasUnder(payment)) {
      Util.Message(""String_Node_Str"",sender);
      return true;
    }
    if (prisoner.getRemainingTime() < 0) {
      if (payment >= jail.getSettings().getDouble(Setting.PriceForInfiniteJail)) {
        if (args.length > 1)         Util.Message(""String_Node_Str"" + iConomy.format(jail.getSettings().getDouble(Setting.PriceForInfiniteJail)) + ""String_Node_Str""+ prisoner.getName()+ ""String_Node_Str"",sender);
 else         Util.Message(""String_Node_Str"" + iConomy.format(jail.getSettings().getDouble(Setting.PriceForInfiniteJail)) + ""String_Node_Str"",sender);
        holdings.subtract(jail.getSettings().getDouble(Setting.PriceForInfiniteJail));
        prisoner.release();
      }
 else {
        Util.Message(""String_Node_Str"",sender);
        return true;
      }
    }
 else {
      double releasebill=jail.getSettings().getDouble(Setting.PricePerMinute) * Math.round(prisoner.getRemainingTimeMinutes());
      if (payment >= releasebill) {
        if (args.length > 1)         Util.Message(""String_Node_Str"" + iConomy.format(releasebill) + ""String_Node_Str""+ prisoner.getName()+ ""String_Node_Str"",sender);
 else         Util.Message(""String_Node_Str"" + iConomy.format(releasebill) + ""String_Node_Str"",sender);
        holdings.subtract(releasebill);
        prisoner.release();
      }
 else {
        int minutes=(int)Math.round(payment / jail.getSettings().getDouble(Setting.PricePerMinute));
        double bill=minutes * jail.getSettings().getDouble(Setting.PricePerMinute);
        int remain=(int)(Math.round(prisoner.getRemainingTimeMinutes()) - minutes);
        if (args.length > 1)         Util.Message(""String_Node_Str"" + iConomy.format(bill) + ""String_Node_Str""+ prisoner.getName()+ ""String_Node_Str""+ String.valueOf(remain)+ ""String_Node_Str"",sender);
 else         Util.Message(""String_Node_Str"" + iConomy.format(bill) + ""String_Node_Str""+ String.valueOf(remain)+ ""String_Node_Str"",sender);
        holdings.subtract(bill);
        prisoner.setRemainingTimeMinutes(remain);
      }
    }
  }
  return true;
}"
81434,"/** 
 * Parse jail command and prepare user for jailing (if he is online, he will be instantly jailed. Otherwise, he will be jailed first time when he comes online)
 * @param sender CommandSender that send this command
 * @param args Arguments for the command. 0 = name, 1 = time, 2 = jailname:cellname, 3 = reason
 */
public static void PrepareJail(CommandSender sender,String args[]){
  String playername;
  int time=-1;
  String jailname=""String_Node_Str"";
  if (args.length < 1) {
    if (sender != null)     Util.Message(""String_Node_Str"",sender);
    return;
  }
  if (Jail.zones.size() < 1) {
    if (sender != null)     Util.Message(""String_Node_Str"",sender);
    return;
  }
  if (Jail.prisoners.containsKey(args[0].toLowerCase())) {
    JailPrisoner prisoner=Jail.prisoners.get(args[0].toLowerCase());
    Player player=Jail.instance.getServer().getPlayer(prisoner.getName());
    if (player != null) {
      player.teleport(prisoner.getTeleportLocation());
      if (sender != null)       Util.Message(""String_Node_Str"",sender);
    }
 else {
      if (sender != null)       Util.Message(""String_Node_Str"",sender);
    }
    return;
  }
  playername=args[0].toLowerCase();
  if (args.length > 1)   time=Integer.valueOf(args[1]);
  if (args.length > 2)   jailname=args[2].toLowerCase();
  String reason=""String_Node_Str"";
  if (args.length > 3) {
    for (int i=3; i < args.length; i++) {
      reason+=""String_Node_Str"" + args[i];
    }
    if (reason.length() > 250) {
      if (sender != null)       Util.Message(""String_Node_Str"",sender);
      return;
    }
  }
  if (jailname.equals(Settings.NearestJailCode))   jailname=""String_Node_Str"";
  String cellname=null;
  if (jailname.contains(""String_Node_Str"")) {
    cellname=jailname.split(""String_Node_Str"")[1];
    jailname=jailname.split(""String_Node_Str"")[0];
  }
  String jailer;
  if (sender instanceof Player)   jailer=((Player)sender).getName();
 else   jailer=""String_Node_Str"";
  Player player=Jail.instance.getServer().getPlayer(playername);
  if (player == null) {
    JailPrisoner prisoner=new JailPrisoner(playername,time * 6,jailname,cellname,true,""String_Node_Str"",reason,Settings.AutomaticMute,""String_Node_Str"",jailer);
    if (prisoner.getJail() != null) {
      JailCell cell=prisoner.getJail().getRequestedCell(prisoner);
      if (cell != null && (cell.getPlayerName() == null || !cell.getPlayerName().trim().equals(""String_Node_Str""))) {
        cell.setPlayerName(prisoner.getName());
        cell.update();
      }
    }
    InputOutput.InsertPrisoner(prisoner);
    Jail.prisoners.put(prisoner.getName(),prisoner);
    Util.Message(""String_Node_Str"",sender);
  }
 else {
    playername=player.getName().toLowerCase();
    JailPrisoner prisoner=new JailPrisoner(playername,time * 6,jailname,cellname,false,""String_Node_Str"",reason,Settings.AutomaticMute,""String_Node_Str"",jailer);
    Jail(prisoner,player);
    Util.Message(""String_Node_Str"",sender);
  }
}","/** 
 * Parse jail command and prepare user for jailing (if he is online, he will be instantly jailed. Otherwise, he will be jailed first time when he comes online)
 * @param sender CommandSender that send this command
 * @param args Arguments for the command. 0 = name, 1 = time, 2 = jailname:cellname, 3 = reason
 */
public static void PrepareJail(CommandSender sender,String args[]){
  String playername;
  int time=-1;
  String jailname=""String_Node_Str"";
  if (args.length < 1 || (args.length > 1 && !Util.isInteger(args[1]))) {
    if (sender != null)     Util.Message(""String_Node_Str"",sender);
    return;
  }
  if (Jail.zones.size() < 1) {
    if (sender != null)     Util.Message(""String_Node_Str"",sender);
    return;
  }
  if (Jail.prisoners.containsKey(args[0].toLowerCase())) {
    JailPrisoner prisoner=Jail.prisoners.get(args[0].toLowerCase());
    Player player=Jail.instance.getServer().getPlayer(prisoner.getName());
    if (player != null) {
      player.teleport(prisoner.getTeleportLocation());
      if (sender != null)       Util.Message(""String_Node_Str"",sender);
    }
 else {
      if (sender != null)       Util.Message(""String_Node_Str"",sender);
    }
    return;
  }
  playername=args[0].toLowerCase();
  if (args.length > 1)   time=Integer.valueOf(args[1]);
  if (args.length > 2)   jailname=args[2].toLowerCase();
  String reason=""String_Node_Str"";
  if (args.length > 3) {
    for (int i=3; i < args.length; i++) {
      reason+=""String_Node_Str"" + args[i];
    }
    if (reason.length() > 250) {
      if (sender != null)       Util.Message(""String_Node_Str"",sender);
      return;
    }
  }
  if (jailname.equals(Settings.NearestJailCode))   jailname=""String_Node_Str"";
  String cellname=null;
  if (jailname.contains(""String_Node_Str"")) {
    cellname=jailname.split(""String_Node_Str"")[1];
    jailname=jailname.split(""String_Node_Str"")[0];
  }
  String jailer;
  if (sender instanceof Player)   jailer=((Player)sender).getName();
 else   jailer=""String_Node_Str"";
  Player player=Jail.instance.getServer().getPlayer(playername);
  if (player == null) {
    JailPrisoner prisoner=new JailPrisoner(playername,time * 6,jailname,cellname,true,""String_Node_Str"",reason,Settings.AutomaticMute,""String_Node_Str"",jailer);
    if (prisoner.getJail() != null) {
      JailCell cell=prisoner.getJail().getRequestedCell(prisoner);
      if (cell != null && (cell.getPlayerName() == null || !cell.getPlayerName().trim().equals(""String_Node_Str""))) {
        cell.setPlayerName(prisoner.getName());
        cell.update();
      }
    }
    InputOutput.InsertPrisoner(prisoner);
    Jail.prisoners.put(prisoner.getName(),prisoner);
    Util.Message(""String_Node_Str"",sender);
  }
 else {
    playername=player.getName().toLowerCase();
    JailPrisoner prisoner=new JailPrisoner(playername,time * 6,jailname,cellname,false,""String_Node_Str"",reason,Settings.AutomaticMute,""String_Node_Str"",jailer);
    Jail(prisoner,player);
    Util.Message(""String_Node_Str"",sender);
  }
}"
81435,"public void onPlayerMove(PlayerMoveEvent event){
  if (event.isCancelled())   return;
  if (Jail.prisoners.containsKey(event.getPlayer().getName().toLowerCase())) {
    JailPrisoner prisoner=Jail.prisoners.get(event.getPlayer().getName().toLowerCase());
    if (prisoner.isBeingReleased())     return;
    JailZone jail=prisoner.getJail();
    if (!jail.isInside(event.getTo())) {
      if (Settings.PlayerMoveProtectionAction.equals(""String_Node_Str"")) {
        if (prisoner.getGuards().size() > 0) {
          for (          Wolf w : prisoner.getGuards()) {
            if (w == null || w.isDead()) {
              prisoner.getGuards().remove(w);
              Jail.guards.remove(w);
              continue;
            }
            if (w.getTarget() == null)             w.setTarget(event.getPlayer());
            if (Settings.GuardTeleportDistance > 0 && w.getLocation().distanceSquared(w.getTarget().getLocation()) > Settings.GuardTeleportDistance)             w.teleport(w.getTarget().getLocation());
          }
        }
 else         prisoner.spawnGuards(Settings.NumberOfGuards,event.getTo(),event.getPlayer());
      }
 else       if (Settings.PlayerMoveProtectionAction.equals(""String_Node_Str"")) {
        prisoner.delete();
        plugin.getServer().broadcastMessage(event.getPlayer().getName() + ""String_Node_Str"");
        return;
      }
 else {
        if (Settings.PlayerMovePenalty > 0 && prisoner.getRemainingTime() > 0) {
          Util.Message(Settings.MessageMovePenalty,event.getPlayer());
          prisoner.setRemainingTime(prisoner.getRemainingTime() + Settings.PlayerMovePenalty * 6);
          InputOutput.UpdatePrisoner(prisoner);
        }
 else {
          Util.Message(Settings.MessageMoveNoPenalty,event.getPlayer());
        }
        Location teleport;
        if (!Settings.AlwaysTeleportIntoJailCenter && jail.isInside(event.getFrom()))         teleport=event.getFrom();
 else         teleport=prisoner.getTeleportLocation();
        event.setTo(teleport);
        event.setCancelled(true);
      }
    }
 else     if (Settings.PlayerMoveProtectionAction.equals(""String_Node_Str"")) {
      for (      Object o : prisoner.getGuards().toArray()) {
        Wolf w=(Wolf)o;
        prisoner.getGuards().remove(w);
        Jail.guards.remove(w);
        w.remove();
      }
    }
  }
}","public void onPlayerMove(PlayerMoveEvent event){
  if (event.isCancelled())   return;
  if (Jail.prisoners.containsKey(event.getPlayer().getName().toLowerCase())) {
    JailPrisoner prisoner=Jail.prisoners.get(event.getPlayer().getName().toLowerCase());
    if (prisoner.isBeingReleased())     return;
    JailZone jail=prisoner.getJail();
    if (!jail.isInside(event.getTo())) {
      if (Settings.PlayerMoveProtectionAction.equals(""String_Node_Str"")) {
        if (prisoner.getGuards().size() > 0) {
          for (          Wolf w : prisoner.getGuards().toArray(new Wolf[0])) {
            if (w == null || w.isDead()) {
              prisoner.getGuards().remove(w);
              Jail.guards.remove(w);
              continue;
            }
            if (w.getTarget() == null)             w.setTarget(event.getPlayer());
            if (Settings.GuardTeleportDistance > 0 && w.getLocation().distanceSquared(w.getTarget().getLocation()) > Settings.GuardTeleportDistance)             w.teleport(w.getTarget().getLocation());
          }
        }
 else         prisoner.spawnGuards(Settings.NumberOfGuards,event.getTo(),event.getPlayer());
      }
 else       if (Settings.PlayerMoveProtectionAction.equals(""String_Node_Str"")) {
        prisoner.delete();
        plugin.getServer().broadcastMessage(event.getPlayer().getName() + ""String_Node_Str"");
        return;
      }
 else {
        if (Settings.PlayerMovePenalty > 0 && prisoner.getRemainingTime() > 0) {
          Util.Message(Settings.MessageMovePenalty,event.getPlayer());
          prisoner.setRemainingTime(prisoner.getRemainingTime() + Settings.PlayerMovePenalty * 6);
          InputOutput.UpdatePrisoner(prisoner);
        }
 else {
          Util.Message(Settings.MessageMoveNoPenalty,event.getPlayer());
        }
        Location teleport;
        if (!Settings.AlwaysTeleportIntoJailCenter && jail.isInside(event.getFrom()))         teleport=event.getFrom();
 else         teleport=prisoner.getTeleportLocation();
        event.setTo(teleport);
      }
    }
 else     if (Settings.PlayerMoveProtectionAction.equals(""String_Node_Str"")) {
      for (      Object o : prisoner.getGuards().toArray()) {
        Wolf w=(Wolf)o;
        prisoner.getGuards().remove(w);
        Jail.guards.remove(w);
        w.remove();
      }
    }
  }
}"
81436,"public void start() throws Exception {
  logger.info(""String_Node_Str"");
  final IPlayerFactory factory;
  try {
    Class<?> c=Thread.currentThread().getContextClassLoader().loadClass(clientClass);
    factory=(IPlayerFactory)c.newInstance();
  }
 catch (  ClassCastException e) {
    logger.error(""String_Node_Str"" + IPlayerFactory.class.getName());
    return;
  }
  logger.info(""String_Node_Str"");
  final List<ServerInfo> si=GameServerClient.lookup(UDPBroadcastPort,1,discoveryTimeout);
  if (si.size() != 1) {
    logger.warn(""String_Node_Str"");
    return;
  }
  final ServerInfo server=si.get(0);
  final GameServerClient client=new GameServerClient(server);
  client.connect();
  GameHandle handle;
  if (boardName != null) {
    logger.info(""String_Node_Str"" + gameName + ""String_Node_Str""+ boardName+ ""String_Node_Str"");
    handle=client.createGame(gameName,boardName);
  }
 else {
    int attempts=5;
    do {
      logger.info(""String_Node_Str"" + attempts + ""String_Node_Str""+ gameName);
      handle=client.getGame(gameName);
      if (handle == null)       Thread.sleep(1000);
    }
 while (handle == null && --attempts > 0);
    if (handle == null) {
      logger.error(""String_Node_Str"" + gameName + ""String_Node_Str"");
      return;
    }
  }
  final GameClient gameClient=new GameClient(handle,server);
  final UDPPacketEmitter serverUpdater=new UDPPacketEmitter(new DatagramSocket());
  serverUpdater.setDefaultTarget(Inet4Address.getByName(server.serverAddress),server.UDPFeedbackPort);
  final String fullName=this.playerName;
  final String playerName=Player.split(this.playerName)[1];
  final PlayerHandle playerHandle=client.joinGame(handle,fullName);
  final IPlayerController localController=factory.getController(playerName);
  final AsyncPlayerController asyncController=new AsyncPlayerController(localController);
  gameClient.addListener(asyncController);
  gameClient.addListener(new ControllerStateDispatch(playerHandle,asyncController,serverUpdater));
  client.disconnect();
  if (!noSound)   gameClient.attachSound();
  if (!noView)   gameClient.attachView(playerHandle.playerName);
  gameClient.runLoop();
}","public void start() throws Exception {
  logger.info(""String_Node_Str"");
  final IPlayerFactory factory;
  try {
    Class<?> c=Thread.currentThread().getContextClassLoader().loadClass(clientClass);
    factory=(IPlayerFactory)c.newInstance();
  }
 catch (  ClassCastException e) {
    logger.error(""String_Node_Str"" + IPlayerFactory.class.getName());
    return;
  }
  logger.info(""String_Node_Str"");
  final List<ServerInfo> si=GameServerClient.lookup(UDPBroadcastPort,1,discoveryTimeout);
  if (si.size() != 1) {
    logger.warn(""String_Node_Str"");
    return;
  }
  final ServerInfo server=si.get(0);
  final GameServerClient client=new GameServerClient(server);
  client.connect();
  GameHandle handle;
  if (boardName != null) {
    logger.info(""String_Node_Str"" + gameName + ""String_Node_Str""+ boardName+ ""String_Node_Str"");
    handle=client.createGame(gameName,boardName);
  }
 else {
    int attempts=5;
    do {
      logger.info(""String_Node_Str"" + attempts + ""String_Node_Str""+ gameName);
      handle=client.getGame(gameName);
      if (handle == null)       Thread.sleep(1000);
    }
 while (handle == null && --attempts > 0);
    if (handle == null) {
      logger.error(""String_Node_Str"" + gameName + ""String_Node_Str"");
      return;
    }
  }
  final GameClient gameClient=new GameClient(handle,server);
  final UDPPacketEmitter serverUpdater=new UDPPacketEmitter(new DatagramSocket());
  serverUpdater.setDefaultTarget(Inet4Address.getByName(server.serverAddress),server.UDPFeedbackPort);
  final String fullName=this.playerName;
  final String playerName=Player.split(this.playerName)[1];
  final PlayerHandle playerHandle=client.joinGame(handle,fullName);
  final IPlayerController localController=factory.getController(playerName);
  final AsyncPlayerController asyncController=new AsyncPlayerController(localController);
  gameClient.addListener(asyncController);
  gameClient.addListener(new ControllerStateDispatch(playerHandle,asyncController,serverUpdater));
  client.disconnect();
  if (!noSound)   gameClient.attachSound();
  if (!noView)   gameClient.attachView(playerName);
  gameClient.runLoop();
}"
81437,"@Override public void windowClosed(WindowEvent e){
  proxy.removeListener(boardFrame);
  boardFrame.dispose();
}","@Override public void windowClosed(WindowEvent e){
  proxy.removeListener(boardFrame);
}"
81438,"public void attachView(String playerName){
  if (boardFrame != null)   throw new RuntimeException(""String_Node_Str"");
  boardFrame=new BoardFrame();
  if (!StringUtils.isEmpty(playerName)) {
    boardFrame.getGamePanel().trackPlayer(playerName);
  }
  proxy.addListener(boardFrame);
  boardFrame.addWindowListener(new WindowAdapter(){
    @Override public void windowClosed(    WindowEvent e){
      proxy.removeListener(boardFrame);
      boardFrame.dispose();
    }
  }
);
}","public void attachView(String playerName){
  if (boardFrame != null)   throw new RuntimeException(""String_Node_Str"");
  boardFrame=new BoardFrame();
  if (!StringUtils.isEmpty(playerName)) {
    boardFrame.getGamePanel().trackPlayer(playerName);
  }
  proxy.addListener(boardFrame);
  boardFrame.addWindowListener(new WindowAdapter(){
    @Override public void windowClosed(    WindowEvent e){
      proxy.removeListener(boardFrame);
    }
  }
);
}"
81439,"/** 
 * Starts the game, does not return until the game ends. The game can be interrupted by setting the running thread's interrupted flag.
 */
public GameResult run(Mode mode){
  this.mode=mode;
  lastBonusFrame=bonusPeriod;
  int frame=0;
  GameResult result=null;
  events.add(new GameStartEvent(boardData));
  do {
    if (Thread.currentThread().isInterrupted() || (result == null && frameLimit > 0 && frame > frameLimit)) {
      interrupted=true;
      break;
    }
    try {
      timer.waitForFrame();
    }
 catch (    InterruptedException e) {
      interrupted=true;
      break;
    }
    firePreFrameEvent(frame);
synchronized (this) {
      this.currentFrame=frame;
      processBoardCells();
      processPlayers(frame);
      processBonuses(frame);
      events.add(new GameStateEvent(board.cells,playerInfos));
      if (dispatchPlayerStatuses || (frame % 50) == 0) {
        events.add(new GameStatusEvent(getPlayerStats(),getTeamStats()));
      }
      fireFrameEvent(frame);
      frame++;
      if (result == null) {
        result=checkGameOver();
      }
      events.clear();
      this.dispatchPlayerStatuses=false;
    }
    firePostFrameEvent(frame);
  }
 while (result == null || lingerFrames-- > 0);
  if (interrupted || Thread.interrupted()) {
    if (result == null)     result=new GameResult(mode,getPlayerStats());
    result.gameInterrupted=true;
  }
  events.add(new GameOverEvent());
  fireFrameEvent(frame);
  return result;
}","/** 
 * Starts the game, does not return until the game ends. The game can be interrupted by setting the running thread's interrupted flag.
 */
public GameResult run(Mode mode){
  this.mode=mode;
  lastBonusFrame=bonusPeriod;
  int frame=0;
  GameResult result=null;
  events.add(new GameStartEvent(boardData));
  do {
    if (interrupted || Thread.currentThread().isInterrupted() || (result == null && frameLimit > 0 && frame > frameLimit)) {
      interrupted=true;
      break;
    }
    try {
      timer.waitForFrame();
    }
 catch (    InterruptedException e) {
      interrupted=true;
      break;
    }
    firePreFrameEvent(frame);
synchronized (this) {
      this.currentFrame=frame;
      processBoardCells();
      processPlayers(frame);
      processBonuses(frame);
      events.add(new GameStateEvent(board.cells,playerInfos));
      if (dispatchPlayerStatuses || (frame % 50) == 0) {
        events.add(new GameStatusEvent(getPlayerStats(),getTeamStats()));
      }
      fireFrameEvent(frame);
      frame++;
      if (result == null) {
        result=checkGameOver();
      }
      events.clear();
      this.dispatchPlayerStatuses=false;
    }
    firePostFrameEvent(frame);
  }
 while (result == null || lingerFrames-- > 0);
  if (interrupted || Thread.interrupted()) {
    if (result == null)     result=new GameResult(mode,getPlayerStats());
    result.gameInterrupted=true;
  }
  events.add(new GameOverEvent());
  fireFrameEvent(frame);
  return result;
}"
81440,"/** 
 * Update   {@link #background} because the board changed.
 */
public void updateBoard(GameStateEvent gameState){
  final Graphics2D g=background.createGraphics();
  g.setRenderingHints(hints);
  final BufferedImage backgroundImage=getCellImage(CellType.CELL_EMPTY,0);
  final Color backgroundColor=new Color(backgroundImage.getRGB(0,0));
synchronized (exclusiveLock) {
    g.setColor(backgroundColor);
    g.fillRect(0,0,boardInfo.pixelSize.width,boardInfo.pixelSize.height);
    final Cell[][] cells=gameState.getCells();
    final int cellSize=boardInfo.cellSize;
    for (int y=boardInfo.gridSize.height - 1; y >= 0; y--) {
      for (int x=boardInfo.gridSize.width - 1; x >= 0; x--) {
        final Cell cell=cells[x][y];
        final CellType type=cell.type;
        final BufferedImage image=getCellImage(type,cell.counter);
        if (image != null) {
          g.drawImage(image,null,x * cellSize,y * cellSize);
        }
      }
    }
    final List<? extends IPlayerSprite> players=gameState.getPlayers();
    for (int playerIndex=0; playerIndex < players.size(); playerIndex++) {
      final IPlayerSprite player=players.get(playerIndex);
      int state=player.getAnimationState();
      int frame=player.getAnimationFrame();
      final int deadState=Player.State.DEAD.ordinal();
      final int dyingState=Player.State.DYING.ordinal();
      if (state == deadState) {
        Integer f=dyingPlayers.get(playerIndex);
        f=(f == null ? 0 : f);
        final int max=images.getMaxSpriteImageFrame(player.getType(),dyingState);
        if (f < max) {
          state=dyingState;
          frame=f;
          dyingPlayers.put(playerIndex,f + 1);
        }
      }
      int animFrame=0;
      if (frame > 0) {
        animFrame=(frame - 1) / images.getSpriteAdvanceRate(player.getType());
        if (state != dyingState && state != deadState) {
          animFrame++;
        }
      }
      BufferedImage image=images.getSpriteImage(player.getType(),state,animFrame);
      if (image != null) {
        final Composite c=g.getComposite();
        if (player.isImmortal()) {
          final float alpha=(globalFrameCounter & 4) != 0 ? 0.25f : 0.8f;
          g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,alpha));
        }
        final Point p=new Point(player.getPosition());
        final Point offset=images.getSpriteOffset(player.getType(),state,frame);
        final Point label=new Point(p);
        p.translate(offset.x,offset.y);
        g.drawImage(image,null,p.x,p.y);
        if (paintPlayerLabels) {
          final String playerLabel=player.getName().toUpperCase();
          g.setFont(labelFont);
          final FontMetrics fm=g.getFontMetrics();
          label.translate(0,-image.getHeight() / 2);
          label.translate(-fm.stringWidth(player.getName()) / 2,-(fm.getDescent() + 2));
          g.setColor(Color.YELLOW);
          g.drawString(playerLabel,label.x,label.y);
        }
        g.setComposite(c);
      }
    }
  }
  g.dispose();
}","/** 
 * Update   {@link #background} because the board changed.
 */
public void updateBoard(GameStateEvent gameState){
  final Graphics2D g=background.createGraphics();
  g.setRenderingHints(hints);
  final BufferedImage backgroundImage=getCellImage(CellType.CELL_EMPTY,0);
  final Color backgroundColor=new Color(backgroundImage.getRGB(0,0));
synchronized (exclusiveLock) {
    g.setColor(backgroundColor);
    g.fillRect(0,0,boardInfo.pixelSize.width,boardInfo.pixelSize.height);
    final Cell[][] cells=gameState.getCells();
    final int cellSize=boardInfo.cellSize;
    for (int y=boardInfo.gridSize.height - 1; y >= 0; y--) {
      for (int x=boardInfo.gridSize.width - 1; x >= 0; x--) {
        final Cell cell=cells[x][y];
        final CellType type=cell.type;
        final BufferedImage image=getCellImage(type,cell.counter);
        if (image != null) {
          g.drawImage(image,null,x * cellSize,y * cellSize);
        }
      }
    }
    final List<? extends IPlayerSprite> players=gameState.getPlayers();
    for (int playerIndex=0; playerIndex < players.size(); playerIndex++) {
      final IPlayerSprite player=players.get(playerIndex);
      int state=player.getAnimationState();
      int frame=player.getAnimationFrame();
      final int deadState=Player.State.DEAD.ordinal();
      final int dyingState=Player.State.DYING.ordinal();
      if (state == deadState) {
        Integer f=dyingPlayers.get(playerIndex);
        f=(f == null ? 0 : f);
        final int max=images.getMaxSpriteImageFrame(player.getType(),dyingState);
        if (f < max) {
          state=dyingState;
          frame=f;
          dyingPlayers.put(playerIndex,f + 1);
        }
      }
 else {
        dyingPlayers.remove(playerIndex);
      }
      int animFrame=0;
      if (frame > 0) {
        animFrame=(frame - 1) / images.getSpriteAdvanceRate(player.getType());
        if (state != dyingState && state != deadState) {
          animFrame++;
        }
      }
      BufferedImage image=images.getSpriteImage(player.getType(),state,animFrame);
      if (image != null) {
        final Composite c=g.getComposite();
        if (player.isImmortal()) {
          final float alpha=(globalFrameCounter & 4) != 0 ? 0.25f : 0.8f;
          g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,alpha));
        }
        final Point p=new Point(player.getPosition());
        final Point offset=images.getSpriteOffset(player.getType(),state,frame);
        final Point label=new Point(p);
        p.translate(offset.x,offset.y);
        g.drawImage(image,null,p.x,p.y);
        if (paintPlayerLabels) {
          final String playerLabel=player.getName().toUpperCase();
          g.setFont(labelFont);
          final FontMetrics fm=g.getFontMetrics();
          label.translate(0,-image.getHeight() / 2);
          label.translate(-fm.stringWidth(player.getName()) / 2,-(fm.getDescent() + 2));
          g.setColor(Color.YELLOW);
          g.drawString(playerLabel,label.x,label.y);
        }
        g.setComposite(c);
      }
    }
  }
  g.dispose();
}"
81441,"public BufferedImage getSpriteImage(SpriteType type,int state,int frameCounter){
  final SpriteData data=sprites.get(type);
  if (data == null)   return null;
  if (state >= data.frames.length || data.frames[state].length == 0)   return null;
  final int frame;
  if (frameCounter == 0) {
    frame=0;
  }
 else {
    frame=1 + (frameCounter - 1) / data.frameAdvanceRate;
  }
  final int frames=data.frames[state].length;
  return data.frames[state][frame % frames];
}","public BufferedImage getSpriteImage(SpriteType type,int state,int frame){
  final SpriteData data=sprites.get(type);
  if (data == null)   return null;
  if (state >= data.frames.length || data.frames[state].length == 0)   return null;
  final int frames=data.frames[state].length;
  return data.frames[state][frame % frames];
}"
81442,"/** 
 * Update   {@link #background} because the board changed.
 */
public void updateBoard(IBoardSnapshot snapshot){
  final Graphics2D g=background.createGraphics();
  final BufferedImage backgroundImage=getCellImage(CellType.CELL_EMPTY,0);
  final Color backgroundColor=new Color(backgroundImage.getRGB(0,0));
synchronized (exclusiveLock) {
    g.setColor(backgroundColor);
    g.fillRect(0,0,boardInfo.pixelSize.width,boardInfo.pixelSize.height);
    final Cell[][] cells=snapshot.getCells();
    final int cellSize=boardInfo.cellSize;
    for (int y=boardInfo.gridSize.height - 1; y >= 0; y--) {
      for (int x=boardInfo.gridSize.width - 1; x >= 0; x--) {
        final Cell cell=cells[x][y];
        final CellType type=cell.type;
        final BufferedImage image=getCellImage(type,cell.counter);
        if (image != null) {
          g.drawImage(image,null,x * cellSize,y * cellSize);
        }
      }
    }
    final IPlayerSprite[] players=snapshot.getPlayers();
    for (int playerIndex=0; playerIndex < players.length; playerIndex++) {
      final IPlayerSprite player=players[playerIndex];
      int state=player.getAnimationState();
      int frame=player.getAnimationFrame();
      final int deadState=Player.State.DEAD.ordinal();
      final int dyingState=Player.State.DYING.ordinal();
      if (state == deadState) {
        Integer f=dyingPlayers.get(playerIndex);
        f=(f == null ? 0 : f);
        final int max=images.getMaxSpriteImageFrame(player.getType(),dyingState);
        if (f < max) {
          state=dyingState;
          frame=f;
          dyingPlayers.put(playerIndex,f + 1);
        }
      }
      final BufferedImage image=images.getSpriteImage(player.getType(),state,frame);
      if (image != null) {
        final Point p=new Point(player.getPosition());
        final Point offset=images.getSpriteOffset(player.getType(),state,frame);
        final Point label=new Point(p);
        p.translate(offset.x,offset.y);
        g.drawImage(image,null,p.x,p.y);
        if (paintPlayerLabels) {
          final String playerLabel=player.getName().toUpperCase();
          g.setFont(labelFont);
          final FontMetrics fm=g.getFontMetrics();
          label.translate(0,-image.getHeight() / 2);
          label.translate(-fm.stringWidth(player.getName()) / 2,-(fm.getDescent() + 2));
          g.setColor(Color.YELLOW);
          g.drawString(playerLabel,label.x,label.y);
        }
      }
    }
  }
  g.dispose();
}","/** 
 * Update   {@link #background} because the board changed.
 */
public void updateBoard(IBoardSnapshot snapshot){
  final Graphics2D g=background.createGraphics();
  final BufferedImage backgroundImage=getCellImage(CellType.CELL_EMPTY,0);
  final Color backgroundColor=new Color(backgroundImage.getRGB(0,0));
synchronized (exclusiveLock) {
    g.setColor(backgroundColor);
    g.fillRect(0,0,boardInfo.pixelSize.width,boardInfo.pixelSize.height);
    final Cell[][] cells=snapshot.getCells();
    final int cellSize=boardInfo.cellSize;
    for (int y=boardInfo.gridSize.height - 1; y >= 0; y--) {
      for (int x=boardInfo.gridSize.width - 1; x >= 0; x--) {
        final Cell cell=cells[x][y];
        final CellType type=cell.type;
        final BufferedImage image=getCellImage(type,cell.counter);
        if (image != null) {
          g.drawImage(image,null,x * cellSize,y * cellSize);
        }
      }
    }
    final IPlayerSprite[] players=snapshot.getPlayers();
    for (int playerIndex=0; playerIndex < players.length; playerIndex++) {
      final IPlayerSprite player=players[playerIndex];
      int state=player.getAnimationState();
      int frame=player.getAnimationFrame();
      final int deadState=Player.State.DEAD.ordinal();
      final int dyingState=Player.State.DYING.ordinal();
      if (state == deadState) {
        Integer f=dyingPlayers.get(playerIndex);
        f=(f == null ? 0 : f);
        final int max=images.getMaxSpriteImageFrame(player.getType(),dyingState);
        if (f < max) {
          state=dyingState;
          frame=f;
          dyingPlayers.put(playerIndex,f + 1);
        }
      }
      int animFrame=0;
      if (frame > 0) {
        animFrame=(frame - 1) / images.getSpriteAdvanceRate(player.getType());
        if (state != dyingState && state != deadState) {
          animFrame++;
        }
      }
      final BufferedImage image=images.getSpriteImage(player.getType(),state,animFrame);
      if (image != null) {
        final Point p=new Point(player.getPosition());
        final Point offset=images.getSpriteOffset(player.getType(),state,frame);
        final Point label=new Point(p);
        p.translate(offset.x,offset.y);
        g.drawImage(image,null,p.x,p.y);
        if (paintPlayerLabels) {
          final String playerLabel=player.getName().toUpperCase();
          g.setFont(labelFont);
          final FontMetrics fm=g.getFontMetrics();
          label.translate(0,-image.getHeight() / 2);
          label.translate(-fm.stringWidth(player.getName()) / 2,-(fm.getDescent() + 2));
          g.setColor(Color.YELLOW);
          g.drawString(playerLabel,label.x,label.y);
        }
      }
    }
  }
  g.dispose();
}"
81443,"public List<URLTriggerRequestHeader> getRequestHeaders(){
  return requestHeaders;
}","public List<URLTriggerRequestHeader> getRequestHeaders(){
  if (requestHeaders == null) {
    return new ArrayList<URLTriggerRequestHeader>();
  }
 else {
    return requestHeaders;
  }
}"
81444,"private double getMax(double[] a,int o,int l){
  double r=0;
  for (int i=o; i < o + l; i++) {
    if (Math.abs(a[i]) > r)     r=a[i];
  }
  return r;
}","private double getMax(double[] a,int o,int l){
  double r=0;
  for (int i=o; i < o + l; i+=2) {
    if (Math.abs(a[i]) > r)     r=a[i];
  }
  return r;
}"
81445,"public boolean reservationExists(CacheKey key){
  boolean found=false;
  for (  SeatBlock block : reserved) {
    if (block.getKey().getShowId() == key.getShowId()) {
      if (showDao.getSectionIdByRowId(block.getKey().getRowId()) == showDao.getSectionIdByRowId(key.getRowId())) {
        found=true;
      }
    }
  }
  return found;
}","public boolean reservationExists(CacheKey key){
  for (  SeatBlock block : reserved) {
    if (block.getKey().getShowId() == key.getShowId()) {
      if (showDao.getSectionIdByRowId(block.getKey().getRowId()) == showDao.getSectionIdByRowId(key.getRowId())) {
        return true;
      }
    }
  }
  return false;
}"
81446,"public boolean updateSeatReservation(Long showId,Long sectionId,int quantity){
  boolean found=false, success=false;
  Section section=showDao.findSection(sectionId);
  List<SectionRow> rows=showDao.getRowsBySection(section,quantity);
  if (quantity < 0) {
    return success;
  }
  for (  SectionRow row : rows) {
    CacheKey key=new CacheKey(showId,row.getId());
    found=bookingState.reservationExists(key);
    if (found == true) {
      if (quantity == 0) {
        this.removeSeatReservation(showId,row.getId());
        return true;
      }
      SeatBlock block=this.update(showId,row.getId(),quantity);
      if (block != null) {
        success=true;
      }
 else {
        success=false;
      }
    }
  }
  if (found == false) {
    success=this.findContiguousSeats(showId,sectionId,quantity);
  }
  return success;
}","public boolean updateSeatReservation(Long showId,Long sectionId,int quantity){
  boolean found=false, success=false;
  Section section=showDao.findSection(sectionId);
  List<SectionRow> rows=showDao.getRowsBySection(section,quantity);
  if (quantity < 0) {
    return false;
  }
  for (  SectionRow row : rows) {
    CacheKey key=new CacheKey(showId,row.getId());
    found=bookingState.reservationExists(key);
    if (found == true) {
      if (quantity == 0) {
        this.removeSeatReservation(showId,row.getId());
        return true;
      }
      SeatBlock block=this.update(showId,row.getId(),quantity);
      if (block != null) {
        return true;
      }
 else {
        return false;
      }
    }
  }
  if (found == false) {
    success=this.findContiguousSeats(showId,sectionId,quantity);
  }
  return success;
}"
81447,"@Ignore public void testUpdateSeatAllocation(){
  boolean success=reservationManager.findContiguousSeats((long)3,(long)100,10);
  Assert.assertEquals(true,success);
  Assert.assertEquals(1,reservationManager.getBookingState().getReserved().get(0).getStartSeat());
  Assert.assertEquals(10,reservationManager.getBookingState().getReserved().get(0).getEndSeat());
  Assert.assertEquals(1,reservationManager.getBookingState().getReserved().size());
  success=reservationManager.updateSeatReservation((long)3,(long)100,15);
  Assert.assertEquals(1,reservationManager.getBookingState().getReserved().size());
  Assert.assertEquals(1,reservationManager.getBookingState().getReserved().get(0).getStartSeat());
  Assert.assertEquals(15,reservationManager.getBookingState().getReserved().get(0).getEndSeat());
  Assert.assertEquals((long)1,reservationManager.getBookingState().getReserved().get(0).getKey().getRowId(),0);
  success=reservationManager.findContiguousSeats((long)3,(long)100,50);
  Assert.assertEquals((long)2,reservationManager.getBookingState().getReserved().get(1).getKey().getRowId(),0);
  Assert.assertEquals(1,reservationManager.getBookingState().getReserved().get(1).getStartSeat());
  Assert.assertEquals(50,reservationManager.getBookingState().getReserved().get(1).getEndSeat());
}","@Test public void testUpdateSeatAllocation(){
  Assert.assertEquals(2,reservationManager.getBookingState().getReserved().size());
  Assert.assertEquals(1,reservationManager.getBookingState().getReserved().get(0).getStartSeat());
  Assert.assertEquals(10,reservationManager.getBookingState().getReserved().get(0).getEndSeat());
  Assert.assertEquals(11,reservationManager.getBookingState().getReserved().get(1).getStartSeat());
  Assert.assertEquals(15,reservationManager.getBookingState().getReserved().get(1).getEndSeat());
  Assert.assertEquals(true,reservationManager.getBookingState().getReserved().get(0).getKey().equals(reservationManager.getBookingState().getReserved().get(1).getKey()));
  boolean success=reservationManager.findContiguousSeats((long)3,(long)101,10);
  Assert.assertEquals(true,success);
  Assert.assertEquals(3,reservationManager.getBookingState().getReserved().size());
  Assert.assertEquals(1,reservationManager.getBookingState().getReserved().get(2).getStartSeat());
  Assert.assertEquals(10,reservationManager.getBookingState().getReserved().get(2).getEndSeat());
  success=reservationManager.updateSeatReservation((long)3,(long)101,15);
  Assert.assertEquals(true,success);
  Assert.assertEquals(3,reservationManager.getBookingState().getReserved().size());
  Assert.assertEquals(1,reservationManager.getBookingState().getReserved().get(2).getStartSeat());
  Assert.assertEquals(15,reservationManager.getBookingState().getReserved().get(2).getEndSeat());
  Assert.assertEquals((long)51,reservationManager.getBookingState().getReserved().get(2).getKey().getRowId(),0);
}"
81448,"@RequestMapping(method=RequestMethod.POST) public String onSubmit(BookingRequest command,Model model){
  for (  PriceCategoryRequest categoryRequest : command.getCategoryRequests()) {
    int quantity=categoryRequest.getQuantity();
  }
  return ""String_Node_Str"";
}","@RequestMapping(method=RequestMethod.POST) public String onSubmit(BookingRequest command,Model model){
  return ""String_Node_Str"";
}"
81449,"public static void performDirectEditing(GraphicalEditPart editPart,SmartLabelFigure textFigure){
  OPPNamedElementDirectEditManager manager;
  manager=new OPPNamedElementDirectEditManager(editPart,TextCellEditor.class,new OPPNamedElementCellEditorLocator(textFigure),textFigure);
  manager.show();
}","public static void performDirectEditing(GraphicalEditPart editPart,SmartLabelFigure textFigure){
  OPPNamedElementDirectEditManager manager;
  manager=new OPPNamedElementDirectEditManager(editPart,MultiLineTextCellEditor.class,new OPPNamedElementCellEditorLocator(textFigure),textFigure);
  manager.show();
}"
81450,"public Command getCommandToMoveBendpointsAfterTargetHasMoved(OPPStructuralLinkPart link,Rectangle rect,IFigure translator){
  if (link.getTarget() instanceof OPPStructuralLinkAggregator)   return getCommandToMoveBendpointsAfterTargetAggregatorHasMoved(link,rect);
 else   return getCommandToMoveBendpointsAfterTargetThingHasMoved(link,rect,translator);
}","public Command getCommandToMoveBendpointsAfterTargetHasMoved(OPPStructuralLinkPart link,Rectangle rect,IFigure translator){
  if (link.getTarget() instanceof OPPStructuralLinkAggregator)   return getCommandToMoveBendpointsAfterTargetAggregatorHasMoved(link,rect,translator);
 else   return getCommandToMoveBendpointsAfterTargetThingHasMoved(link,rect,translator);
}"
81451,"private Command getCommandToMoveBendpointsAfterTargetAggregatorHasMoved(OPPStructuralLinkPart link,Rectangle rect){
  CompoundCommand cc=new CompoundCommand();
  Point prevPoint=pointFromOPPPoint(link.getBendpoints().get(link.getBendpoints().size() - 2));
  cc.add(newMoveBendpointCommand(link,link.getBendpoints().size() - 1,new Point(rect.x + rect.width / 2,rect.y)));
  cc.add(newMoveBendpointCommand(link,link.getBendpoints().size() - 2,prevPoint.setX(rect.x + rect.width / 2)));
  if (link.getBendpoints().size() == 2) {
    if (!isBetween(middle(rect.x,rect.x + rect.width),left(link.getSource()),right(link.getSource()))) {
      cc.add(newCreateBendpointCommand(link,0,getStructuralLinkEndpoint(link.getSource(),prevPoint)));
    }
  }
  return cc;
}","private Command getCommandToMoveBendpointsAfterTargetAggregatorHasMoved(OPPStructuralLinkPart link,Rectangle rect,IFigure translator){
  CompoundCommand cc=new CompoundCommand();
  rect=rect.getCopy();
  Point prevPoint=pointFromOPPPoint(link.getBendpoints().get(link.getBendpoints().size() - 2));
  cc.add(newMoveBendpointCommand(link,link.getBendpoints().size() - 1,new Point(rect.x + rect.width / 2,rect.y)));
  cc.add(newMoveBendpointCommand(link,link.getBendpoints().size() - 2,prevPoint.setX(rect.x + rect.width / 2)));
  if (link.getBendpoints().size() == 2) {
    Rectangle linkSource=rectangleFromOPPNode(link.getSource());
    translator.translateToAbsolute(linkSource);
    if (!isBetween(middle(rect.x,rect.x + rect.width),left(linkSource),right(linkSource))) {
      cc.add(newCreateBendpointCommand(link,0,getStructuralLinkEndpoint(linkSource,prevPoint)));
    }
  }
  return cc;
}"
81452,"@Override public OPPObjectInstance getArgument(String name){
  if (name == null)   name=""String_Node_Str"";
 else {
    if (!getAllParameterNames().contains(name)) {
      logSevere(""String_Node_Str"",getName(),name);
      throw new OPPRuntimeException(""String_Node_Str"" + getName() + ""String_Node_Str""+ name+ ""String_Node_Str"");
    }
  }
  return getHeap().getArgument(name.toLowerCase());
}","@Override public OPPObjectInstance getArgument(String name){
  if (name == null)   name=""String_Node_Str"";
 else {
  }
  return getHeap().getArgument(name.toLowerCase());
}"
81453,"@Override public void setArgument(String name,OPPObjectInstance value){
  if (name == null)   name=""String_Node_Str"";
 else {
    if (!getAllParameterNames().contains(name)) {
      logSevere(""String_Node_Str"",getName(),name);
      throw new OPPRuntimeException(""String_Node_Str"" + getName() + ""String_Node_Str""+ name+ ""String_Node_Str"");
    }
  }
  getHeap().setArgument(name.toLowerCase(),value);
}","@Override public void setArgument(String name,OPPObjectInstance value){
  if (name == null)   name=""String_Node_Str"";
 else {
  }
  getHeap().setArgument(name.toLowerCase(),value);
}"
81454,"@Override public void buildContextMenu(IMenuManager menu){
  GEFActionConstants.addStandardActionGroups(menu);
  IAction action;
  action=getActionRegistry().getAction(OPPToggledProceduralLinkSubkindAction.CONDITIONAL_SUBKIND_ID);
  if (action.isEnabled())   menu.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
  action=getActionRegistry().getAction(OPPToggledProceduralLinkSubkindAction.EVENT_SUBKIND_ID);
  if (action.isEnabled())   menu.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
  action=getActionRegistry().getAction(OPPToggledProceduralLinkSubkindAction.OPTIONAL_SUBKIND_ID);
  if (action.isEnabled())   menu.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
  action=getActionRegistry().getAction(OPPCreateObjectAction.ID);
  if (action.isEnabled())   menu.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
  action=getActionRegistry().getAction(OPPCreateProcessAction.ID);
  if (action.isEnabled())   menu.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
  action=getActionRegistry().getAction(OPPCreateStateAction.ID);
  if (action.isEnabled())   menu.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
  action=getActionRegistry().getAction(OPPCreateAgentLinkAction.ID);
  if (action.isEnabled())   menu.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
  action=getActionRegistry().getAction(OPPCreateInstrumentLinkAction.ID);
  if (action.isEnabled())   menu.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
  action=getActionRegistry().getAction(OPPCreateConsResLinkAction.ID);
  if (action.isEnabled())   menu.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
  action=getActionRegistry().getAction(OPPResizeToContentsAction.RESIZE_TO_CONTENTS_ID);
  if (action.isEnabled())   menu.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
  action=getActionRegistry().getAction(OPPToggleGlobalObjectAction.TOGGLE_GLOBALOBJECT_ID);
  if (action.isEnabled())   menu.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
  action=getActionRegistry().getAction(OPPThingInZoomAction.THING_IN_ZOOM_ID);
  if (action.isEnabled())   menu.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
  action=getActionRegistry().getAction(OPPThingUnfoldAction.THING_UNFOLD_ID);
  if (action.isEnabled())   menu.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
}","@Override public void buildContextMenu(IMenuManager menu){
  GEFActionConstants.addStandardActionGroups(menu);
  IAction action;
  action=getActionRegistry().getAction(OPPToggledProceduralLinkSubkindAction.CONDITIONAL_SUBKIND_ID);
  if (action.isEnabled())   menu.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
  action=getActionRegistry().getAction(OPPToggledProceduralLinkSubkindAction.EVENT_SUBKIND_ID);
  if (action.isEnabled())   menu.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
  action=getActionRegistry().getAction(OPPCreateObjectAction.ID);
  if (action.isEnabled())   menu.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
  action=getActionRegistry().getAction(OPPCreateProcessAction.ID);
  if (action.isEnabled())   menu.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
  action=getActionRegistry().getAction(OPPCreateStateAction.ID);
  if (action.isEnabled())   menu.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
  action=getActionRegistry().getAction(OPPCreateAgentLinkAction.ID);
  if (action.isEnabled())   menu.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
  action=getActionRegistry().getAction(OPPCreateInstrumentLinkAction.ID);
  if (action.isEnabled())   menu.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
  action=getActionRegistry().getAction(OPPCreateConsResLinkAction.ID);
  if (action.isEnabled())   menu.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
  action=getActionRegistry().getAction(OPPResizeToContentsAction.RESIZE_TO_CONTENTS_ID);
  if (action.isEnabled())   menu.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
  action=getActionRegistry().getAction(OPPToggleGlobalObjectAction.TOGGLE_GLOBALOBJECT_ID);
  if (action.isEnabled())   menu.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
  action=getActionRegistry().getAction(OPPThingInZoomAction.THING_IN_ZOOM_ID);
  if (action.isEnabled())   menu.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
  action=getActionRegistry().getAction(OPPThingUnfoldAction.THING_UNFOLD_ID);
  if (action.isEnabled())   menu.appendToGroup(GEFActionConstants.GROUP_EDIT,action);
}"
81455,"@Override protected void executing() throws Exception {
  P_waiting=Lists.newArrayList();
  P_ready=Sets.newHashSet();
  P_executing=Maps.newHashMap();
  P_skipped=Lists.newArrayList();
  P_invoked=Lists.newArrayList();
  ExecutionMode executionMode=ExecutionMode.NATURAL_ORDER;
  getHeap().initializeVariablesWithLiterals(analyzer.getInZoomedProcess(getOpd()));
  pc=new OPPInZoomedProcessIntanceProgramCounter(getOpd());
  pc.setPC(pc.getNextPC());
  calculateNextProcesses();
  executeReadyProcesses();
  while (!P_executing.isEmpty()) {
    if (Thread.currentThread().isInterrupted()) {
      logInfo(""String_Node_Str"");
      return;
    }
    try {
      heapObserver.clear();
      Future<OPPProcessExecutionResult> executionResult=completionService.take();
      OPPProcessInstance executedInstance=executionResult.get().getInstance();
      OPPProcess executedProcess=P_executing.get(executedInstance);
      P_executing.remove(executedInstance);
      argumentHandler.extractResultsToVariables(executedProcess,executedInstance);
      Set<OPPProcess> invoked=findInvokedAndNotSkippedProcesses();
      if (invoked.size() > 0) {
        executionMode=ExecutionMode.EVENT;
      }
switch (executionMode) {
case NATURAL_ORDER:
        calculateNextProcesses();
      executeReadyProcesses();
    break;
case EVENT:
  if (invoked.size() > 0) {
    P_ready.addAll(invoked);
    executeReadyProcesses();
  }
 else {
    if (P_executing.size() == 0) {
      executionMode=ExecutionMode.NATURAL_ORDER;
      pc.setPC(executedProcess.getY() + executedProcess.getHeight());
      calculateNextProcesses();
      executeReadyProcesses();
    }
  }
break;
}
}
 catch (InterruptedException e) {
logInfo(""String_Node_Str"");
return;
}
}
if (P_waiting.size() > 0) logInfo(""String_Node_Str"",getName(),P_waiting.size());
}","@Override protected void executing() throws Exception {
  P_waiting=Lists.newArrayList();
  P_ready=Sets.newHashSet();
  P_executing=Maps.newHashMap();
  P_skipped=Lists.newArrayList();
  P_invoked=Lists.newArrayList();
  ExecutionMode executionMode=ExecutionMode.NATURAL_ORDER;
  getHeap().initializeVariablesWithLiterals(analyzer.getInZoomedProcess(getOpd()));
  pc=new OPPInZoomedProcessIntanceProgramCounter(getOpd());
  pc.setPC(pc.getNextPC());
  calculateNextProcesses();
  executeReadyProcesses();
  while (!P_executing.isEmpty()) {
    if (Thread.currentThread().isInterrupted()) {
      logInfo(""String_Node_Str"");
      return;
    }
    try {
      heapObserver.clear();
      Future<OPPProcessExecutionResult> executionResult=completionService.take();
      OPPProcessInstance executedInstance=executionResult.get().getInstance();
      OPPProcess executedProcess=P_executing.get(executedInstance);
      P_executing.remove(executedInstance);
      argumentHandler.extractResultsToVariables(executedProcess,executedInstance);
      Set<OPPProcess> invoked=findInvokedAndNotSkippedProcesses();
      if (invoked.size() > 0) {
        executionMode=ExecutionMode.EVENT;
      }
switch (executionMode) {
case NATURAL_ORDER:
        calculateNextProcesses();
      executeReadyProcesses();
    break;
case EVENT:
  if (invoked.size() > 0) {
    P_ready.addAll(invoked);
    executeReadyProcesses();
  }
 else {
    if (P_executing.size() == 0) {
      executionMode=ExecutionMode.NATURAL_ORDER;
      pc.setPC(executedProcess.getY() + executedProcess.getHeight());
      pc.setPC(pc.getNextPC());
      calculateNextProcesses();
      executeReadyProcesses();
    }
  }
break;
}
}
 catch (InterruptedException e) {
logInfo(""String_Node_Str"");
return;
}
}
if (P_waiting.size() > 0) logInfo(""String_Node_Str"",getName(),P_waiting.size());
}"
81456,"@Override protected void postExecution(){
  super.postExecution();
  getHeap().exportVariableValuesToArguments(getOpd());
}","@Override protected void postExecution(){
  getHeap().exportVariableValuesToArguments(getOpd());
  super.postExecution();
}"
81457,"/** 
 * Set the text of the figure's tooltip. If the text is null or empty, no tooltip will be shown.
 * @param tooltipText the text to show as the figure's tooltip.
 */
public void setTooltipText(String tooltipText){
  if (tooltipText != null && tooltipText != ""String_Node_Str"") {
    tooltipFigure.setMessage(tooltipText);
    setToolTip(tooltipFigure);
  }
 else {
    setToolTip(null);
  }
}","/** 
 * Set the text of the figure's tooltip. If the text is null or empty, no tooltip will be shown.
 * @param tooltipText the text to show as the figure's tooltip.
 */
public void setTooltipText(String tooltipText){
  if (tooltipText != null && ""String_Node_Str"".equals(tooltipText)) {
    tooltipFigure.setMessage(tooltipText);
    setToolTip(tooltipFigure);
  }
 else {
    setToolTip(null);
  }
}"
81458,"@Override protected void executing(){
  loadMethod();
  for (  String parameter : parameters) {
    OPPObject object=OPPFactory.eINSTANCE.createOPPObject();
    object.setName(parameter);
  }
  arguments=new Object[parameters.length];
  for (int i=0; i < parameters.length; i++) {
    arguments[i]=getArgument(""String_Node_Str"" + i);
  }
  OPPObjectInstance instance=null;
  if (!method.getReturnType().equals(Void.TYPE)) {
    setArgument(""String_Node_Str"",instance);
  }
}","@Override protected void executing(){
  loadMethod();
  for (  String parameter : parameters) {
    OPPObject object=OPPFactory.eINSTANCE.createOPPObject();
    object.setName(parameter);
  }
  arguments=new Object[parameters.length];
  for (int i=0; i < parameters.length; i++) {
    arguments[i]=getArgument(""String_Node_Str"" + i);
  }
}"
81459,"@Override public void executing(){
  BigDecimal a=getArgument(""String_Node_Str"").getNumericalValue();
  BigDecimal b=getArgument(""String_Node_Str"").getNumericalValue();
  BigDecimal c=null;
switch (opType) {
case ADD:
    c=a.add(b);
  break;
case SUBS:
c=a.subtract(b);
break;
case MULT:
c=a.multiply(b);
break;
case DIV:
c=a.divide(b);
break;
case POW:
c=a.pow(b.intValueExact());
break;
}
OPPObjectInstance instance=OPPObjectInstance.createFromValue(c);
setArgument(""String_Node_Str"",instance);
}","@Override public void executing(){
  BigDecimal a=getArgument(""String_Node_Str"").getNumericalValue();
  BigDecimal b=getArgument(""String_Node_Str"").getNumericalValue();
  BigDecimal c=new BigDecimal(0);
switch (opType) {
case ADD:
    c=a.add(b);
  break;
case SUBS:
c=a.subtract(b);
break;
case MULT:
c=a.multiply(b);
break;
case DIV:
c=a.divide(b);
break;
case POW:
c=a.pow(b.intValueExact());
break;
}
OPPObjectInstance instance=OPPObjectInstance.createFromValue(c);
setArgument(""String_Node_Str"",instance);
}"
81460,"@Override protected void executing(){
  OPPObjectInstance prompt=getArgument(PROMPT_PARAM_NAME);
  if (prompt != null)   System.out.println(prompt);
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  String input=""String_Node_Str"";
  try {
    input=br.readLine();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  OPPObjectInstance instance=valueAnalyzer.calculateOPMObjectValue(input);
  setArgument(INPUT_PARAM_NAME,instance);
}","@Override protected void executing(){
  OPPObjectInstance prompt=getArgument(PROMPT_PARAM_NAME);
  if (prompt != null)   System.out.println(prompt);
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  String input=""String_Node_Str"";
  try {
    input=br.readLine();
    if (input != null) {
      OPPObjectInstance instance=valueAnalyzer.calculateOPMObjectValue(input);
      setArgument(INPUT_PARAM_NAME,instance);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}"
81461,"public void extractResultsToVariables(OPPProcess process,OPPProcessInstance instance){
  Map<String,OPPArgument> namedResults=Maps.newHashMap();
  List<OPPArgument> anonymousResults=Lists.newArrayList();
  catalogueArguments(analyzer.findOutgoingDataLinks(process),namedResults,anonymousResults);
  logFiner(""String_Node_Str"",anonymousResults.size(),namedResults.size());
  List<String> outgoingParametersNames=instance.getOutgoingParameters().stream().map(p -> p.getName()).collect(Collectors.toList());
  for (  String namedResult : namedResults.keySet()) {
    copyArgumentValueToHeap(namedResults.get(namedResult),instance.getArgument(namedResult));
    outgoingParametersNames.remove(namedResult);
  }
  Iterator<OPPArgument> anonymousResultsIterator=anonymousResults.iterator();
  while (anonymousResultsIterator.hasNext()) {
    OPPArgument argument=anonymousResultsIterator.next();
    if (instance.getOutgoingParameters().contains(argument.getObject().getName())) {
      if (instance.getArgument(argument.getObject().getName()) != null) {
        copyArgumentValueToHeap(argument,instance.getArgument(argument.getObject().getName()));
        anonymousResultsIterator.remove();
      }
    }
  }
  for (int i=0; i < anonymousResults.size(); i++) {
    copyArgumentValueToHeap(anonymousResults.get(i),instance.getArgument(outgoingParametersNames.get(i)));
  }
}","public void extractResultsToVariables(OPPProcess process,OPPProcessInstance instance){
  Map<String,OPPArgument> namedResults=Maps.newHashMap();
  List<OPPArgument> anonymousResults=Lists.newArrayList();
  catalogueArguments(analyzer.findOutgoingDataLinks(process),namedResults,anonymousResults);
  logFiner(""String_Node_Str"",anonymousResults.size(),namedResults.size());
  List<String> outgoingParametersNames=instance.getOutgoingParameters().stream().map(p -> p.getName()).collect(Collectors.toList());
  for (  String namedResult : namedResults.keySet()) {
    copyArgumentValueToHeap(namedResults.get(namedResult),instance.getArgument(namedResult));
    outgoingParametersNames.remove(namedResult);
  }
  Iterator<OPPArgument> anonymousResultsIterator=anonymousResults.iterator();
  while (anonymousResultsIterator.hasNext()) {
    OPPArgument argument=anonymousResultsIterator.next();
    if (instance.getOutgoingParameters().stream().map(p -> p.getName()).collect(Collectors.toList()).contains(argument.getObject().getName())) {
      if (instance.getArgument(argument.getObject().getName()) != null) {
        copyArgumentValueToHeap(argument,instance.getArgument(argument.getObject().getName()));
        anonymousResultsIterator.remove();
      }
    }
  }
  for (int i=0; i < anonymousResults.size(); i++) {
    copyArgumentValueToHeap(anonymousResults.get(i),instance.getArgument(outgoingParametersNames.get(i)));
  }
}"
81462,"public OPMObjectInstance getCollectionFirstElement(){
  checkTypeForCollectionOnlyOperations();
  return collectionValues.get(0);
}","public OPMObjectInstance getCollectionFirstElement(){
  checkTypeForCollectionOnlyOperations();
  return collectionValues.get(collectionValues.firstKey());
}"
81463,"public void appendCollectionElement(OPMObjectInstance element){
  checkTypeForCollectionOnlyOperations();
  checkNotNull(element,""String_Node_Str"");
  collectionValues.add(element);
  collectionNameToIndexMapping.put(UUID.randomUUID().toString(),collectionValues.size());
}","public void appendCollectionElement(OPMObjectInstance element){
  checkTypeForCollectionOnlyOperations();
  checkNotNull(element,""String_Node_Str"");
  collectionValues.add(element);
  collectionNameToIndexMapping.put(UUID.randomUUID().toString(),collectionValues.size() - 1);
}"
81464,"public synchronized long getNextId(){
  long idToReturn=_id;
  _id++;
  return idToReturn;
}","public synchronized long getNextId(){
  long idToReturn=_id;
  _id++;
  logger.info(""String_Node_Str"" + _id);
  return idToReturn;
}"
81465,"@Before public void setup(){
  heap=OPMInterpreterInjector.INSTANCE.getInstance(OPMInZoomedProcessInstanceHeap.class);
  observer=new MyObserver();
  obj1=OPMFactory.eINSTANCE.createOPMObject();
  obj2=OPMFactory.eINSTANCE.createOPMObject();
  obj3=OPMFactory.eINSTANCE.createOPMObject();
  objPart1=OPMFactory.eINSTANCE.createOPMObject();
  objPart1.setName(""String_Node_Str"");
  objPart2=OPMFactory.eINSTANCE.createOPMObject();
  objPart2.setName(""String_Node_Str"");
  objPart11=OPMFactory.eINSTANCE.createOPMObject();
  objPart11.setName(""String_Node_Str"");
  objPart12=OPMFactory.eINSTANCE.createOPMObject();
  objPart12.setName(""String_Node_Str"");
  inst1=OPMObjectInstance.createFromValue(new BigDecimal(1));
  inst2=OPMObjectInstance.createFromValue(new BigDecimal(2));
  inst3=OPMObjectInstance.createFromValue(new BigDecimal(3));
}","@Before public void setup(){
  heap=OPMInterpreterInjector.INSTANCE.getInstance(OPMInZoomedProcessInstanceHeap.class);
  observer=new MyObserver();
  obj1=OPMFactory.eINSTANCE.createOPMObject();
  obj1.setName(""String_Node_Str"");
  obj2=OPMFactory.eINSTANCE.createOPMObject();
  obj2.setName(""String_Node_Str"");
  obj3=OPMFactory.eINSTANCE.createOPMObject();
  obj3.setName(""String_Node_Str"");
  objPart1=OPMFactory.eINSTANCE.createOPMObject();
  objPart1.setName(""String_Node_Str"");
  objPart2=OPMFactory.eINSTANCE.createOPMObject();
  objPart2.setName(""String_Node_Str"");
  objPart11=OPMFactory.eINSTANCE.createOPMObject();
  objPart11.setName(""String_Node_Str"");
  objPart12=OPMFactory.eINSTANCE.createOPMObject();
  objPart12.setName(""String_Node_Str"");
  inst1=OPMObjectInstance.createFromValue(new BigDecimal(1));
  inst2=OPMObjectInstance.createFromValue(new BigDecimal(2));
  inst3=OPMObjectInstance.createFromValue(new BigDecimal(3));
}"
81466,"public OPMObjectInstance getPart(String name){
  checkState(isComposite());
  return parts.get(name);
}","public OPMObjectInstance getPart(String name){
  checkNotNull(name,""String_Node_Str"");
  checkArgument(!""String_Node_Str"".equals(name),""String_Node_Str"");
  checkState(isComposite());
  return parts.get(name);
}"
81467,"/** 
 * <p> Set the value in an   {@link OPMObject}. </p> <p> If the   {@link OPMObject} is a part of another {@link OPMObject}, the parent  {@link OPMObject} is updated. If the {@link OPMObject} is part of another{@link OPMObject}, but the parent doesn't exist yet, it is created. </p> <p> If the   {@link OPMObject} has outgoing data links to other {@link OPMObject}s, these   {@link OPMObject}s are updated (recursively if necessary).
 * @param object where a value can be stored
 * @param value the value to store
 */
public void setVariable(OPMObject object,OPMObjectInstance value){
  Preconditions.checkArgument(value != null,""String_Node_Str"");
  if (analyzer.isObjectPartOfAnotherObject(object)) {
    OPMObject parentObject=analyzer.findParent(object);
    OPMObjectInstance parentInstance=getVariable(parentObject);
    if (parentInstance == null) {
      parentInstance=OPMObjectInstance.createCompositeInstance();
      setVariable(parentObject,parentInstance);
    }
    parentInstance.addPart(object.getName(),OPMObjectInstance.createFromExistingInstance(value));
  }
 else {
    if (value != null) {
      OPMObjectInstance objectValue=OPMObjectInstance.createFromExistingInstance(value);
      variables.put(object,objectValue);
      observable.notifyObservers(new HeapChange(object,objectValue));
    }
  }
  transferDataFromObject(object);
}","/** 
 * <p> Set the value in an   {@link OPMObject}. </p> <p> If the   {@link OPMObject} is a part of another {@link OPMObject}, the parent  {@link OPMObject} is updated. If the {@link OPMObject} is part of another{@link OPMObject}, but the parent doesn't exist yet, it is created. </p> <p> If the   {@link OPMObject} has outgoing data links to other {@link OPMObject}s, these   {@link OPMObject}s are updated (recursively if necessary).
 * @param object where a value can be stored
 * @param value the value to store
 */
public void setVariable(OPMObject object,OPMObjectInstance value){
  Preconditions.checkArgument(value != null,""String_Node_Str"");
  if (analyzer.isObjectPartOfAnotherObject(object)) {
    OPMObject parentObject=analyzer.findParent(object);
    OPMObjectInstance parentInstance=getVariable(parentObject);
    if (parentInstance == null) {
      setVariable(parentObject,OPMObjectInstance.createCompositeInstance());
      parentInstance=getVariable(parentObject);
    }
    parentInstance.addPart(object.getName(),OPMObjectInstance.createFromExistingInstance(value));
  }
 else {
    if (value != null) {
      OPMObjectInstance objectValue=OPMObjectInstance.createFromExistingInstance(value);
      variables.put(object,objectValue);
      observable.notifyObservers(new HeapChange(object,objectValue));
    }
  }
  transferDataFromObject(object);
}"
81468,"/** 
 * Extend the connection creted by   {@link OPMLinkEditPart#createFigure()} byadding decorations depending on the link kind. An agent link is decorated at the target with black filled  {@link CircleDecoration}. An instrument link is decorated at the target with a white filled  {@link CircleDecoration}. A consumption or result link is decorated at the target with a   {@link PolylineDecoration} (which is an arrow). Aneffect link link is decorated at the source and target with a {@link PolylineDecoration}.
 * @return a decorated {@link PolylineConnection} figure.
 */
@Override protected PolylineConnection createFigure(){
  PolylineConnection connection=super.createFigure();
  OPMProceduralLink model=(OPMProceduralLink)getModel();
  decorateConnection(connection,model.getKind());
  sourceDecorationLabel=new Label();
  centerDecorationLabel=new Label();
  targetDecorationLabel=new Label();
  ConnectionLocator locator=new ConnectionLocator(connection,ConnectionLocator.SOURCE);
  connection.add(sourceDecorationLabel,locator);
  locator=new ConnectionLocator(connection,ConnectionLocator.MIDDLE);
  connection.add(centerDecorationLabel,locator);
  locator=new ConnectionLocator(connection,ConnectionLocator.TARGET);
  connection.add(targetDecorationLabel,locator);
  connection.add(centerDecorationLabel,locator);
  return connection;
}","/** 
 * Extend the connection created by   {@link OPMLinkEditPart#createFigure()}by adding decorations depending on the link kind. An agent link is decorated at the target with black filled   {@link CircleDecoration}. An instrument link is decorated at the target with a white filled  {@link CircleDecoration}. A consumption or result link is decorated at the target with a   {@link PolylineDecoration} (which is an arrow). Aneffect link link is decorated at the source and target with a {@link PolylineDecoration}.
 * @return a decorated {@link PolylineConnection} figure.
 */
@Override protected PolylineConnection createFigure(){
  PolylineConnection connection=super.createFigure();
  OPMProceduralLink model=(OPMProceduralLink)getModel();
  decorateConnection(connection,model.getKind());
  sourceDecorationLabel=new Label();
  centerDecorationLabel=new Label();
  targetDecorationLabel=new Label();
  ConnectionLocator locator=new ConnectionLocator(connection,ConnectionLocator.SOURCE);
  connection.add(sourceDecorationLabel,locator);
  locator=new ConnectionLocator(connection,ConnectionLocator.MIDDLE);
  connection.add(centerDecorationLabel,locator);
  locator=new ConnectionLocator(connection,ConnectionLocator.TARGET);
  connection.add(targetDecorationLabel,locator);
  return connection;
}"
81469,"/** 
 * {@inheritDoc}<p> The action is enabled if all the selected entities on the editor are  {@link OPMNodeEditPart} instances</p>
 */
@Override protected boolean calculateEnabled(){
  if (getSelectedObjects().isEmpty()) {
    return false;
  }
  for (  Object selectedObject : getSelectedObjects()) {
    if (selectedObject instanceof OPMNodeEditPart) {
      return true;
    }
  }
  return false;
}","/** 
 * {@inheritDoc}<p> The action is enabled if all the selected entities on the editor are  {@link OPMNodeEditPart} instances</p>
 */
@Override protected boolean calculateEnabled(){
  if (getSelectedObjects().isEmpty()) {
    return false;
  }
  for (  Object selectedObject : getSelectedObjects()) {
    if (!(selectedObject instanceof OPMNodeEditPart)) {
      return false;
    }
  }
  return true;
}"
81470,"@Override protected void createEditPolicies(){
  super.createEditPolicies();
  installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE,new OPMStateDirectEditPolicy());
  installEditPolicy(""String_Node_Str"",new SnapFeedbackPolicy());
}","@Override protected void createEditPolicies(){
  super.createEditPolicies();
  installEditPolicy(""String_Node_Str"",new SnapFeedbackPolicy());
}"
81471,"/** 
 * This functions is ignored. Use   {@link IsoscelesTriangle#setDirection(int)}instead.
 */
@Override @Deprecated public void setOrientation(final int orientation){
}","/** 
 * This functions is ignored. Use  {@link IsoscelesTriangle#setDirection(int)} instead.
 */
@Override @Deprecated public void setOrientation(final int orientation){
}"
81472,"/** 
 * Validates the figure, drawing a vertical isosceles triangle filling the  figure's bounds.
 */
@Override public void validate(){
  super.validate();
  Rectangle r=getBounds().getCopy();
  r.shrink(getInsets());
  r.resize(-1,-1);
  Point p1=null, p2=null, p3=null;
switch (direction) {
case NORTH:
    p1=new Point(r.x + r.width / 2,r.y);
  p2=new Point(r.x,r.y + r.height);
p3=new Point(r.x + r.width,r.y + r.height);
break;
case SOUTH:
p1=new Point(r.x + r.width / 2,r.y + r.height);
p2=new Point(r.x,r.y);
p3=new Point(r.x + r.width,r.y);
break;
case EAST:
p1=new Point(r.x,r.y);
p2=new Point(r.x + r.width,r.y + r.height / 2);
p3=new Point(r.x,r.y + r.height);
break;
case WEST:
p1=new Point(r.x + r.width,r.y);
p2=new Point(r.x + r.width,r.y + r.height);
p3=new Point(r.x,r.y + r.height / 2);
}
triangle.removeAllPoints();
triangle.addPoint(p1);
triangle.addPoint(p2);
triangle.addPoint(p3);
}","/** 
 * Validates the figure, drawing a vertical isosceles triangle filling the figure's bounds.
 */
@Override public void validate(){
  super.validate();
  Rectangle r=getBounds().getCopy();
  r.shrink(getInsets());
  r.resize(-1,-1);
  Point p1=null, p2=null, p3=null;
switch (direction) {
case NORTH:
    p1=new Point(r.x + r.width / 2,r.y);
  p2=new Point(r.x,r.y + r.height);
p3=new Point(r.x + r.width,r.y + r.height);
break;
case SOUTH:
p1=new Point(r.x + r.width / 2,r.y + r.height);
p2=new Point(r.x,r.y);
p3=new Point(r.x + r.width,r.y);
break;
case EAST:
p1=new Point(r.x,r.y);
p2=new Point(r.x + r.width,r.y + r.height / 2);
p3=new Point(r.x,r.y + r.height);
break;
case WEST:
p1=new Point(r.x + r.width,r.y);
p2=new Point(r.x + r.width,r.y + r.height);
p3=new Point(r.x,r.y + r.height / 2);
}
triangle.removeAllPoints();
triangle.addPoint(p1);
triangle.addPoint(p2);
triangle.addPoint(p3);
}"
81473,"/** 
 * Find.
 * @param key the key
 * @return the t
 */
public T find(KeyType key){
  SliceQuery<Object,String,byte[]> query=HFactory.createSliceQuery(keySpace,SerializerTypeInferer.getSerializer(keyTypeClass),StringSerializer.get(),BytesArraySerializer.get());
  QueryResult<ColumnSlice<String,byte[]>> result=query.setColumnFamily(columnFamilyName).setKey(key).setRange(""String_Node_Str"",""String_Node_Str"",false,10).execute();
  try {
    if (result.get().getColumns().isEmpty()) {
      return null;
    }
  }
 catch (  Exception e) {
    return null;
  }
  try {
    Constructor<?>[] constructorsT=persistentClass.getConstructors();
    T t=null;
    if (constructorsT.length > 1) {
      if (constructorsT[0].getParameterTypes().length == 1 && constructorsT[0].getParameterTypes()[0].isAssignableFrom(keyTypeClass)) {
        t=(T)constructorsT[0].newInstance(keyTypeClass);
      }
 else {
        t=(T)constructorsT[0].newInstance();
      }
    }
 else {
      if (constructorsT[0].getParameterTypes().length == 1 && (constructorsT[0].getParameterTypes()[0].isAssignableFrom(keyTypeClass) || Object.class.equals(constructorsT[0].getParameterTypes()[0]))) {
        t=(T)constructorsT[0].newInstance(keyTypeClass);
      }
 else {
        t=(T)constructorsT[0].newInstance();
      }
    }
    HectorHelper.populateEntity(t,key,result);
    return t;
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","/** 
 * Find.
 * @param key the key
 * @return the t
 */
public T find(KeyType key){
  SliceQuery<Object,String,byte[]> query=HFactory.createSliceQuery(keySpace,SerializerTypeInferer.getSerializer(keyTypeClass),StringSerializer.get(),BytesArraySerializer.get());
  int columnQuerySize=100;
  QueryResult<ColumnSlice<String,byte[]>> result=query.setColumnFamily(columnFamilyName).setKey(key).setRange(""String_Node_Str"",""String_Node_Str"",false,columnQuerySize).execute();
  try {
    if (result.get().getColumns().isEmpty()) {
      return null;
    }
  }
 catch (  Exception e) {
    return null;
  }
  try {
    Constructor<?>[] constructorsT=persistentClass.getConstructors();
    T t=null;
    if (constructorsT.length > 1) {
      if (constructorsT[0].getParameterTypes().length == 1 && constructorsT[0].getParameterTypes()[0].isAssignableFrom(keyTypeClass)) {
        t=(T)constructorsT[0].newInstance(keyTypeClass);
      }
 else {
        t=(T)constructorsT[0].newInstance();
      }
    }
 else {
      if (constructorsT[0].getParameterTypes().length == 1 && (constructorsT[0].getParameterTypes()[0].isAssignableFrom(keyTypeClass) || Object.class.equals(constructorsT[0].getParameterTypes()[0]))) {
        t=(T)constructorsT[0].newInstance(keyTypeClass);
      }
 else {
        t=(T)constructorsT[0].newInstance();
      }
    }
    HectorHelper.populateEntity(t,key,result);
    return t;
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}"
81474,"@Override public HConsistencyLevel get(OperationType op,String cfName){
switch (op) {
case READ:
    return HConsistencyLevel.QUORUM;
case WRITE:
  return HConsistencyLevel.ONE;
}
return HConsistencyLevel.ONE;
}","@Override public HConsistencyLevel get(OperationType op,String cfName){
switch (op) {
case READ:
    return HConsistencyLevel.QUORUM;
case WRITE:
  return HConsistencyLevel.QUORUM;
}
return HConsistencyLevel.QUORUM;
}"
81475,"@Override public ChannelFuture generate(final String hostname){
  log.info(String.format(""String_Node_Str"",hostname));
  URL url=null;
  try {
    url=new URL(hostname);
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException(e);
  }
  final String host=url.getHost();
  final int port=url.getPort() == -1 ? url.getDefaultPort() : url.getPort();
  final ChannelFuture retVal;
  final ChannelFuture connectFuture=bootstrap.connect(new InetSocketAddress(host,port));
  if (""String_Node_Str"".equals(url.getProtocol())) {
    if (sslContext == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    final SSLEngine sslEngine=sslContext.createSSLEngine(host,port);
    final SSLParameters sslParameters=new SSLParameters();
    sslParameters.setEndpointIdentificationAlgorithm(""String_Node_Str"");
    sslEngine.setSSLParameters(sslParameters);
    sslEngine.setUseClientMode(true);
    final SslHandler sslHandler=new SslHandler(sslEngine,SslHandler.getDefaultBufferPool(),false,timer,sslHandshakeTimeout);
    sslHandler.setCloseOnSSLException(true);
    final ChannelPipeline pipeline=connectFuture.getChannel().getPipeline();
    pipeline.addFirst(""String_Node_Str"",sslHandler);
    final ChannelFuture handshakeFuture=Channels.future(connectFuture.getChannel());
    connectFuture.addListener(new ChannelFutureListener(){
      @Override public void operationComplete(      ChannelFuture f) throws Exception {
        if (f.isSuccess()) {
          sslHandler.handshake().addListener(new ChannelFutureListener(){
            @Override public void operationComplete(            ChannelFuture f2) throws Exception {
              if (f2.isSuccess()) {
                handshakeFuture.setSuccess();
              }
 else {
                handshakeFuture.setFailure(new ChannelException(String.format(""String_Node_Str"",hostname),f2.getCause()));
              }
            }
          }
);
        }
 else {
          handshakeFuture.setFailure(new ChannelException(String.format(""String_Node_Str"",hostname),f.getCause()));
        }
      }
    }
);
    retVal=handshakeFuture;
  }
 else {
    retVal=connectFuture;
  }
  return retVal;
}","@Override public ChannelFuture generate(final String hostname){
  log.info(""String_Node_Str"",hostname);
  URL url=null;
  try {
    url=new URL(hostname);
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException(e);
  }
  final String host=url.getHost();
  final int port=url.getPort() == -1 ? url.getDefaultPort() : url.getPort();
  final ChannelFuture retVal;
  final ChannelFuture connectFuture=bootstrap.connect(new InetSocketAddress(host,port));
  if (""String_Node_Str"".equals(url.getProtocol())) {
    if (sslContext == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    final SSLEngine sslEngine=sslContext.createSSLEngine(host,port);
    final SSLParameters sslParameters=new SSLParameters();
    sslParameters.setEndpointIdentificationAlgorithm(""String_Node_Str"");
    sslEngine.setSSLParameters(sslParameters);
    sslEngine.setUseClientMode(true);
    final SslHandler sslHandler=new SslHandler(sslEngine,SslHandler.getDefaultBufferPool(),false,timer,sslHandshakeTimeout);
    sslHandler.setCloseOnSSLException(true);
    final ChannelPipeline pipeline=connectFuture.getChannel().getPipeline();
    pipeline.addFirst(""String_Node_Str"",sslHandler);
    final ChannelFuture handshakeFuture=Channels.future(connectFuture.getChannel());
    connectFuture.addListener(new ChannelFutureListener(){
      @Override public void operationComplete(      ChannelFuture f) throws Exception {
        if (f.isSuccess()) {
          sslHandler.handshake().addListener(new ChannelFutureListener(){
            @Override public void operationComplete(            ChannelFuture f2) throws Exception {
              if (f2.isSuccess()) {
                handshakeFuture.setSuccess();
              }
 else {
                handshakeFuture.setFailure(new ChannelException(String.format(""String_Node_Str"",hostname),f2.getCause()));
              }
            }
          }
);
        }
 else {
          handshakeFuture.setFailure(new ChannelException(String.format(""String_Node_Str"",hostname),f.getCause()));
        }
      }
    }
);
    retVal=handshakeFuture;
  }
 else {
    retVal=connectFuture;
  }
  return retVal;
}"
81476,"public void add(byte[] bytesToAdd){
synchronized (bytes) {
    bytes.addLast(bytesToAdd);
    available+=bytesToAdd.length;
    bytes.notify();
  }
}","public void add(byte[] bytesToAdd){
  if (bytesToAdd.length == 0) {
    return;
  }
synchronized (bytes) {
    bytes.addLast(bytesToAdd);
    available+=bytesToAdd.length;
    bytes.notify();
  }
}"
81477,"@Override public ChannelPipeline getPipeline() throws Exception {
  ChannelPipeline pipeline=new DefaultChannelPipeline();
  pipeline.addLast(""String_Node_Str"",new HttpClientCodec());
  pipeline.addLast(""String_Node_Str"",new HttpContentDecompressor());
  return pipeline;
}","@Override public ChannelPipeline getPipeline() throws Exception {
  ChannelPipeline pipeline=new DefaultChannelPipeline();
  pipeline.addLast(""String_Node_Str"",new HttpClientCodec());
  pipeline.addLast(""String_Node_Str"",new HttpContentDecompressor(){
    @Override public void exceptionCaught(    ChannelHandlerContext context,    ExceptionEvent event) throws Exception {
      log.error(""String_Node_Str"" + event.getCause());
      event.getCause().printStackTrace();
    }
  }
);
  return pipeline;
}"
81478,"public MineProxyHandler(MineProxy proxy,Socket conn) throws IOException {
  this.setName(""String_Node_Str"");
  this.proxy=proxy;
  this.connection=conn;
  this.fromClient=new BufferedReader(new InputStreamReader(conn.getInputStream()));
  this.toClient=new DataOutputStream(conn.getOutputStream());
}","public MineProxyHandler(MineProxy proxy,Socket conn) throws IOException {
  setName(""String_Node_Str"");
  this.proxy=proxy;
  connection=conn;
  fromClient=new BufferedInputStream(conn.getInputStream());
  toClient=new DataOutputStream(conn.getOutputStream());
}"
81479,"public void run(){
  String header=null;
  HashMap<String,String> headers=new HashMap<String,String>();
  String url=null;
  String method=null;
  try {
    String[] requestLine=this.fromClient.readLine().split(""String_Node_Str"");
    method=requestLine[0].trim().toUpperCase();
    url=requestLine[1].trim();
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  System.out.println(""String_Node_Str"" + method + ""String_Node_Str""+ url);
  try {
    do {
      header=this.fromClient.readLine().trim();
      int splitPoint=header.indexOf(""String_Node_Str"");
      if (splitPoint != -1) {
        headers.put(header.substring(0,splitPoint).toLowerCase().trim(),header.substring(splitPoint + 1).trim());
      }
    }
 while (header.length() > 0);
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  Matcher skinMatcher=MineProxy.SKIN_URL.matcher(url);
  Matcher cloakMatcher=MineProxy.CLOAK_URL.matcher(url);
  Matcher getversionMatcher=MineProxy.GETVERSION_URL.matcher(url);
  Matcher joinserverMatcher=MineProxy.JOINSERVER_URL.matcher(url);
  Matcher checkserverMatcher=MineProxy.CHECKSERVER_URL.matcher(url);
  byte[] data=null;
  String params;
  if (skinMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    String username=skinMatcher.group(1);
    if (this.proxy.skinCache.containsKey(username)) {
      System.out.println(""String_Node_Str"");
      data=this.proxy.skinCache.get(username);
    }
 else {
      url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ username+ ""String_Node_Str"";
      System.out.println(""String_Node_Str"" + url);
      data=getRequest(url);
      System.out.println(""String_Node_Str"" + data.length);
      this.proxy.skinCache.put(username,data);
    }
  }
 else   if (cloakMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    String username=cloakMatcher.group(1);
    if (this.proxy.cloakCache.containsKey(username)) {
      System.out.println(""String_Node_Str"");
      data=this.proxy.cloakCache.get(username);
    }
 else {
      url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ username;
      System.out.println(""String_Node_Str"" + url);
      data=getRequest(url);
      System.out.println(""String_Node_Str"" + data.length);
      this.proxy.cloakCache.put(username,data);
    }
  }
 else   if (getversionMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ this.proxy.version;
    System.out.println(""String_Node_Str"" + url);
    try {
      int postlen=Integer.parseInt(headers.get(""String_Node_Str""));
      char[] postdata=new char[postlen];
      this.fromClient.read(postdata);
      data=postRequest(url,new String(postdata),""String_Node_Str"");
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
 else   if (joinserverMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    params=joinserverMatcher.group(1);
    url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ params;
    System.out.println(""String_Node_Str"" + url);
    data=getRequest(url);
    System.out.println(data);
  }
 else   if (checkserverMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    params=checkserverMatcher.group(1);
    url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ params;
    System.out.println(""String_Node_Str"" + url);
    data=getRequest(url);
    System.out.println(data);
  }
 else {
    System.out.println(""String_Node_Str"");
    try {
      if (!url.startsWith(""String_Node_Str"") && !url.startsWith(""String_Node_Str"")) {
        url=""String_Node_Str"" + url;
      }
      URL u=new URL(url);
      if (method.equals(""String_Node_Str"")) {
        int port=u.getPort();
        if (port == -1)         port=80;
        Socket sock=new Socket(u.getHost(),port);
        Streams.pipeStreamsActive(sock.getInputStream(),this.toClient);
        Streams.pipeStreamsActive(this.connection.getInputStream(),sock.getOutputStream());
      }
 else       if (method.equals(""String_Node_Str"")) {
        HttpURLConnection c=(HttpURLConnection)u.openConnection(Proxy.NO_PROXY);
        c.setRequestMethod(""String_Node_Str"");
        for (        String k : headers.keySet()) {
          c.setRequestProperty(k,headers.get(k));
        }
        String res=""String_Node_Str"" + c.getResponseCode() + ""String_Node_Str""+ c.getResponseMessage()+ ""String_Node_Str"";
        res+=""String_Node_Str"";
        java.util.Map<String,java.util.List<String>> h=c.getHeaderFields();
        headerloop:         for (        String k : h.keySet()) {
          if (k == null)           continue;
          k=k.trim();
          for (          String forbiddenHeader : BLACKLISTED_HEADERS) {
            if (k.equalsIgnoreCase(forbiddenHeader))             continue headerloop;
          }
          java.util.List<String> vals=h.get(k);
          for (          String v : vals) {
            res+=k + ""String_Node_Str"" + v+ ""String_Node_Str"";
          }
        }
        res+=""String_Node_Str"";
        this.toClient.writeBytes(res);
        int size=Streams.pipeStreams(c.getInputStream(),this.toClient);
        this.toClient.close();
        this.connection.close();
        System.out.println(""String_Node_Str"" + size);
      }
 else       if (method.equals(""String_Node_Str"")) {
        HttpURLConnection c=(HttpURLConnection)u.openConnection(Proxy.NO_PROXY);
        c.setRequestMethod(""String_Node_Str"");
        for (        String k : headers.keySet()) {
          c.setRequestProperty(k,headers.get(k));
        }
        String res=""String_Node_Str"" + c.getResponseCode() + ""String_Node_Str""+ c.getResponseMessage()+ ""String_Node_Str"";
        res+=""String_Node_Str"";
        java.util.Map<String,java.util.List<String>> h=c.getHeaderFields();
        for (        String k : h.keySet()) {
          if (k == null)           continue;
          java.util.List<String> vals=h.get(k);
          for (          String v : vals) {
            res+=k + ""String_Node_Str"" + v+ ""String_Node_Str"";
          }
        }
        res+=""String_Node_Str"";
        this.toClient.writeBytes(res);
        this.toClient.close();
        this.connection.close();
      }
 else {
        System.out.println(""String_Node_Str"" + method);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return;
  }
  try {
    if (data != null) {
      this.toClient.writeBytes(""String_Node_Str"" + data.length + ""String_Node_Str"");
      this.toClient.write(data);
    }
    this.toClient.close();
    this.connection.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void run(){
  HashMap<String,String> headers=new HashMap<String,String>();
  String url=null;
  String method=null;
  String[] requestLine=readLines(fromClient,1)[0].split(""String_Node_Str"");
  method=requestLine[0].trim().toUpperCase();
  url=requestLine[1].trim();
  System.out.println(""String_Node_Str"" + method + ""String_Node_Str""+ url);
  String header;
  do {
    header=readLines(fromClient,1)[0].trim();
    int splitPoint=header.indexOf(':');
    if (splitPoint != -1) {
      headers.put(header.substring(0,splitPoint).toLowerCase().trim(),header.substring(splitPoint + 1).trim());
    }
  }
 while (header.length() > 0);
  Matcher skinMatcher=MineProxy.SKIN_URL.matcher(url);
  Matcher cloakMatcher=MineProxy.CLOAK_URL.matcher(url);
  Matcher getversionMatcher=MineProxy.GETVERSION_URL.matcher(url);
  Matcher joinserverMatcher=MineProxy.JOINSERVER_URL.matcher(url);
  Matcher checkserverMatcher=MineProxy.CHECKSERVER_URL.matcher(url);
  byte[] data=null;
  String contentType=null;
  String params;
  if (skinMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    String username=skinMatcher.group(1);
    if (proxy.skinCache.containsKey(username)) {
      System.out.println(""String_Node_Str"");
      data=proxy.skinCache.get(username);
    }
 else {
      url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ username+ ""String_Node_Str"";
      System.out.println(""String_Node_Str"" + url);
      data=getRequest(url);
      System.out.println(""String_Node_Str"" + data.length);
      proxy.skinCache.put(username,data);
    }
  }
 else   if (cloakMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    String username=cloakMatcher.group(1);
    if (proxy.cloakCache.containsKey(username)) {
      System.out.println(""String_Node_Str"");
      data=proxy.cloakCache.get(username);
    }
 else {
      url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ username;
      System.out.println(""String_Node_Str"" + url);
      data=getRequest(url);
      System.out.println(""String_Node_Str"" + data.length);
      proxy.cloakCache.put(username,data);
    }
  }
 else   if (getversionMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ proxy.version;
    System.out.println(""String_Node_Str"" + url);
    try {
      int postlen=Integer.parseInt(headers.get(""String_Node_Str""));
      char[] postdata=new char[postlen];
      InputStreamReader reader=new InputStreamReader(fromClient);
      reader.read(postdata);
      data=postRequest(url,new String(postdata),""String_Node_Str"");
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
 else   if (joinserverMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    params=joinserverMatcher.group(1);
    url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ params;
    System.out.println(""String_Node_Str"" + url);
    data=getRequest(url);
    contentType=""String_Node_Str"";
  }
 else   if (checkserverMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    params=checkserverMatcher.group(1);
    url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ params;
    System.out.println(""String_Node_Str"" + url);
    data=getRequest(url);
  }
 else {
    System.out.println(""String_Node_Str"");
    try {
      if (!url.startsWith(""String_Node_Str"") && !url.startsWith(""String_Node_Str"")) {
        url=""String_Node_Str"" + url;
      }
      URL u=new URL(url);
      if (method.equals(""String_Node_Str"")) {
        int port=u.getPort();
        if (port == -1)         port=80;
        Socket sock=new Socket(u.getHost(),port);
        Streams.pipeStreamsActive(sock.getInputStream(),toClient);
        Streams.pipeStreamsActive(connection.getInputStream(),sock.getOutputStream());
      }
 else       if (method.equals(""String_Node_Str"") || method.equals(""String_Node_Str"")) {
        HttpURLConnection c=(HttpURLConnection)u.openConnection(Proxy.NO_PROXY);
        c.setRequestMethod(method);
        boolean post=method.equals(""String_Node_Str"");
        for (        String k : headers.keySet()) {
          c.setRequestProperty(k,headers.get(k));
        }
        if (post) {
          c.setDoInput(true);
          c.setDoOutput(true);
          c.setUseCaches(false);
          c.connect();
          int postlen=Integer.parseInt(headers.get(""String_Node_Str""));
          byte[] postdata=new byte[postlen];
          fromClient.read(postdata);
          DataOutputStream os=new DataOutputStream(c.getOutputStream());
          os.write(postdata);
        }
        String res=""String_Node_Str"" + c.getResponseCode() + ""String_Node_Str""+ c.getResponseMessage()+ ""String_Node_Str"";
        res+=""String_Node_Str"";
        java.util.Map<String,java.util.List<String>> h=c.getHeaderFields();
        headerloop:         for (        String k : h.keySet()) {
          if (k == null)           continue;
          k=k.trim();
          for (          String forbiddenHeader : BLACKLISTED_HEADERS) {
            if (k.equalsIgnoreCase(forbiddenHeader))             continue headerloop;
          }
          java.util.List<String> vals=h.get(k);
          for (          String v : vals) {
            res+=k + ""String_Node_Str"" + v+ ""String_Node_Str"";
          }
        }
        res+=""String_Node_Str"";
        toClient.writeBytes(res);
        int size=Streams.pipeStreams(c.getInputStream(),toClient);
        toClient.close();
        connection.close();
        System.out.println(""String_Node_Str"" + size);
      }
 else       if (method.equals(""String_Node_Str"")) {
        HttpURLConnection c=(HttpURLConnection)u.openConnection(Proxy.NO_PROXY);
        c.setRequestMethod(""String_Node_Str"");
        for (        String k : headers.keySet()) {
          c.setRequestProperty(k,headers.get(k));
        }
        String res=""String_Node_Str"" + c.getResponseCode() + ""String_Node_Str""+ c.getResponseMessage()+ ""String_Node_Str"";
        res+=""String_Node_Str"";
        java.util.Map<String,java.util.List<String>> h=c.getHeaderFields();
        for (        String k : h.keySet()) {
          if (k == null)           continue;
          java.util.List<String> vals=h.get(k);
          for (          String v : vals) {
            res+=k + ""String_Node_Str"" + v+ ""String_Node_Str"";
          }
        }
        res+=""String_Node_Str"";
        toClient.writeBytes(res);
        toClient.close();
        connection.close();
      }
 else {
        System.out.println(""String_Node_Str"" + method);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return;
  }
  try {
    if (data != null) {
      toClient.writeBytes(""String_Node_Str"" + data.length + ""String_Node_Str"");
      if (contentType != null) {
        toClient.writeBytes(""String_Node_Str"" + contentType);
      }
      toClient.writeBytes(""String_Node_Str"");
      toClient.write(data);
      toClient.flush();
    }
    fromClient.close();
    toClient.close();
    connection.close();
    System.out.println(data.length);
    System.out.println(new String(data));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}"
81480,"public static void main(String[] args){
  try {
    String verstring=new String(SimpleRequest.get(""String_Node_Str""));
    if (verstring.isEmpty())     verstring=""String_Node_Str"";
    float version;
    try {
      version=Float.parseFloat(verstring);
    }
 catch (    Exception e) {
      version=0;
    }
    System.out.println(""String_Node_Str"" + VERSION);
    System.out.println(""String_Node_Str"" + version);
    if (VERSION < version) {
      JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.PLAIN_MESSAGE);
      System.exit(0);
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
  try {
    MineProxy proxy=new MineProxy(proxyPort,VERSION);
    proxy.start();
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",Integer.toString(proxyPort));
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",Integer.toString(proxyPort));
    File hackedFile=new File(hackedLauncherFilename);
    if (hackedFile.exists())     hackedFile.delete();
    startLauncher(args);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    System.exit(1);
  }
}","public static void main(String[] args){
  try {
    byte[] verdata=SimpleRequest.get(""String_Node_Str"");
    String verstring=new String();
    if (verdata == null)     verstring=""String_Node_Str"";
 else     verstring=new String(verdata);
    if (verstring.isEmpty())     verstring=""String_Node_Str"";
    float version;
    try {
      version=Float.parseFloat(verstring);
    }
 catch (    Exception e) {
      version=0;
    }
    System.out.println(""String_Node_Str"" + VERSION);
    System.out.println(""String_Node_Str"" + version);
    if (VERSION < version) {
      JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.PLAIN_MESSAGE);
      System.exit(0);
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
  try {
    MineProxy proxy=new MineProxy(proxyPort,VERSION);
    proxy.start();
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",Integer.toString(proxyPort));
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    System.setProperty(""String_Node_Str"",Integer.toString(proxyPort));
    File hackedFile=new File(hackedLauncherFilename);
    if (hackedFile.exists())     hackedFile.delete();
    startLauncher(args);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    System.exit(1);
  }
}"
81481,"public void run(){
  try {
    ServerSocket server=new ServerSocket(this.port);
    while (true) {
      Socket connection=server.accept();
      MineProxyHandler handler=new MineProxyHandler(this,connection);
      handler.start();
    }
  }
 catch (  IOException e) {
  }
}","public void run(){
  try {
    ServerSocket server=new ServerSocket(this.port);
    while (true) {
      Socket connection=server.accept();
      MineProxyHandler handler=new MineProxyHandler(this,connection);
      handler.start();
    }
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
}"
81482,"public void run(){
  String header=null;
  HashMap<String,String> headers=new HashMap<String,String>();
  String url=null;
  String method=null;
  try {
    String[] requestLine=this.fromClient.readLine().split(""String_Node_Str"");
    method=requestLine[0].trim().toUpperCase();
    url=requestLine[1].trim();
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  System.out.println(""String_Node_Str"" + method + ""String_Node_Str""+ url);
  try {
    do {
      header=this.fromClient.readLine().trim();
      int splitPoint=header.indexOf(""String_Node_Str"");
      if (splitPoint != -1) {
        headers.put(header.substring(0,splitPoint).toLowerCase().trim(),header.substring(splitPoint + 1).trim());
      }
    }
 while (header.length() > 0);
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  Matcher skinMatcher=MineProxy.SKIN_URL.matcher(url);
  Matcher cloakMatcher=MineProxy.CLOAK_URL.matcher(url);
  Matcher getversionMatcher=MineProxy.GETVERSION_URL.matcher(url);
  Matcher joinserverMatcher=MineProxy.JOINSERVER_URL.matcher(url);
  Matcher checkserverMatcher=MineProxy.CHECKSERVER_URL.matcher(url);
  byte[] data=null;
  String params;
  if (skinMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    String username=skinMatcher.group(1);
    if (this.proxy.skinCache.containsKey(username)) {
      System.out.println(""String_Node_Str"");
      data=this.proxy.skinCache.get(username);
    }
 else {
      url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ username+ ""String_Node_Str"";
      System.out.println(""String_Node_Str"" + url);
      data=getRequest(url);
      System.out.println(""String_Node_Str"" + data.length);
      this.proxy.skinCache.put(username,data);
    }
  }
 else   if (cloakMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    String username=cloakMatcher.group(1);
    if (this.proxy.cloakCache.containsKey(username)) {
      System.out.println(""String_Node_Str"");
      data=this.proxy.cloakCache.get(username);
    }
 else {
      url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ username;
      System.out.println(""String_Node_Str"" + url);
      data=getRequest(url);
      System.out.println(""String_Node_Str"" + data.length);
      this.proxy.cloakCache.put(username,data);
    }
  }
 else   if (getversionMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ this.proxy.version;
    System.out.println(""String_Node_Str"" + url);
    try {
      int postlen=Integer.parseInt(headers.get(""String_Node_Str""));
      char[] postdata=new char[postlen];
      this.fromClient.read(postdata);
      data=postRequest(url,new String(postdata),""String_Node_Str"");
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
 else   if (joinserverMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    params=joinserverMatcher.group(1);
    url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ params;
    System.out.println(""String_Node_Str"" + url);
    data=getRequest(url);
  }
 else   if (checkserverMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    params=checkserverMatcher.group(1);
    url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ params;
    System.out.println(""String_Node_Str"" + url);
    data=getRequest(url);
  }
 else {
    System.out.println(""String_Node_Str"");
    try {
      if (!url.startsWith(""String_Node_Str"") && !url.startsWith(""String_Node_Str"")) {
        url=""String_Node_Str"" + url;
      }
      URL u=new URL(url);
      if (method.equals(""String_Node_Str"")) {
        int port=u.getPort();
        if (port == -1)         port=80;
        Socket sock=new Socket(u.getHost(),port);
        Streams.pipeStreamsActive(sock.getInputStream(),this.toClient);
        Streams.pipeStreamsActive(this.connection.getInputStream(),sock.getOutputStream());
      }
 else       if (method.equals(""String_Node_Str"")) {
        HttpURLConnection c=(HttpURLConnection)u.openConnection(Proxy.NO_PROXY);
        c.setRequestMethod(""String_Node_Str"");
        for (        String k : headers.keySet()) {
          c.setRequestProperty(k,headers.get(k));
        }
        String res=""String_Node_Str"" + c.getResponseCode() + ""String_Node_Str""+ c.getResponseMessage()+ ""String_Node_Str"";
        res+=""String_Node_Str"";
        java.util.Map<String,java.util.List<String>> h=c.getHeaderFields();
        for (        String k : h.keySet()) {
          if (k == null || k.equalsIgnoreCase(""String_Node_Str"") || k.equalsIgnoreCase(""String_Node_Str""))           continue;
          java.util.List<String> vals=h.get(k);
          for (          String v : vals) {
            res+=k + ""String_Node_Str"" + v+ ""String_Node_Str"";
          }
        }
        res+=""String_Node_Str"";
        this.toClient.writeBytes(res);
        int size=Streams.pipeStreams(c.getInputStream(),this.toClient);
        this.toClient.close();
        this.connection.close();
        System.out.println(""String_Node_Str"" + size);
      }
 else       if (method.equals(""String_Node_Str"")) {
        HttpURLConnection c=(HttpURLConnection)u.openConnection(Proxy.NO_PROXY);
        c.setRequestMethod(""String_Node_Str"");
        for (        String k : headers.keySet()) {
          c.setRequestProperty(k,headers.get(k));
        }
        String res=""String_Node_Str"" + c.getResponseCode() + ""String_Node_Str""+ c.getResponseMessage()+ ""String_Node_Str"";
        res+=""String_Node_Str"";
        java.util.Map<String,java.util.List<String>> h=c.getHeaderFields();
        for (        String k : h.keySet()) {
          if (k == null)           continue;
          java.util.List<String> vals=h.get(k);
          for (          String v : vals) {
            res+=k + ""String_Node_Str"" + v+ ""String_Node_Str"";
          }
        }
        res+=""String_Node_Str"";
        this.toClient.writeBytes(res);
        this.toClient.close();
        this.connection.close();
      }
 else {
        System.out.println(""String_Node_Str"" + method);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return;
  }
  try {
    this.toClient.writeBytes(""String_Node_Str"" + data.length + ""String_Node_Str"");
    this.toClient.write(data);
    this.connection.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void run(){
  String header=null;
  HashMap<String,String> headers=new HashMap<String,String>();
  String url=null;
  String method=null;
  try {
    String[] requestLine=this.fromClient.readLine().split(""String_Node_Str"");
    method=requestLine[0].trim().toUpperCase();
    url=requestLine[1].trim();
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  System.out.println(""String_Node_Str"" + method + ""String_Node_Str""+ url);
  try {
    do {
      header=this.fromClient.readLine().trim();
      int splitPoint=header.indexOf(""String_Node_Str"");
      if (splitPoint != -1) {
        headers.put(header.substring(0,splitPoint).toLowerCase().trim(),header.substring(splitPoint + 1).trim());
      }
    }
 while (header.length() > 0);
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  Matcher skinMatcher=MineProxy.SKIN_URL.matcher(url);
  Matcher cloakMatcher=MineProxy.CLOAK_URL.matcher(url);
  Matcher getversionMatcher=MineProxy.GETVERSION_URL.matcher(url);
  Matcher joinserverMatcher=MineProxy.JOINSERVER_URL.matcher(url);
  Matcher checkserverMatcher=MineProxy.CHECKSERVER_URL.matcher(url);
  byte[] data=null;
  String params;
  if (skinMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    String username=skinMatcher.group(1);
    if (this.proxy.skinCache.containsKey(username)) {
      System.out.println(""String_Node_Str"");
      data=this.proxy.skinCache.get(username);
    }
 else {
      url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ username+ ""String_Node_Str"";
      System.out.println(""String_Node_Str"" + url);
      data=getRequest(url);
      System.out.println(""String_Node_Str"" + data.length);
      this.proxy.skinCache.put(username,data);
    }
  }
 else   if (cloakMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    String username=cloakMatcher.group(1);
    if (this.proxy.cloakCache.containsKey(username)) {
      System.out.println(""String_Node_Str"");
      data=this.proxy.cloakCache.get(username);
    }
 else {
      url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ username;
      System.out.println(""String_Node_Str"" + url);
      data=getRequest(url);
      System.out.println(""String_Node_Str"" + data.length);
      this.proxy.cloakCache.put(username,data);
    }
  }
 else   if (getversionMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ this.proxy.version;
    System.out.println(""String_Node_Str"" + url);
    try {
      int postlen=Integer.parseInt(headers.get(""String_Node_Str""));
      char[] postdata=new char[postlen];
      this.fromClient.read(postdata);
      data=postRequest(url,new String(postdata),""String_Node_Str"");
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
 else   if (joinserverMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    params=joinserverMatcher.group(1);
    url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ params;
    System.out.println(""String_Node_Str"" + url);
    data=getRequest(url);
  }
 else   if (checkserverMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    params=checkserverMatcher.group(1);
    url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ params;
    System.out.println(""String_Node_Str"" + url);
    data=getRequest(url);
  }
 else {
    System.out.println(""String_Node_Str"");
    try {
      if (!url.startsWith(""String_Node_Str"") && !url.startsWith(""String_Node_Str"")) {
        url=""String_Node_Str"" + url;
      }
      URL u=new URL(url);
      if (method.equals(""String_Node_Str"")) {
        int port=u.getPort();
        if (port == -1)         port=80;
        Socket sock=new Socket(u.getHost(),port);
        Streams.pipeStreamsActive(sock.getInputStream(),this.toClient);
        Streams.pipeStreamsActive(this.connection.getInputStream(),sock.getOutputStream());
      }
 else       if (method.equals(""String_Node_Str"")) {
        HttpURLConnection c=(HttpURLConnection)u.openConnection(Proxy.NO_PROXY);
        c.setRequestMethod(""String_Node_Str"");
        for (        String k : headers.keySet()) {
          c.setRequestProperty(k,headers.get(k));
        }
        String res=""String_Node_Str"" + c.getResponseCode() + ""String_Node_Str""+ c.getResponseMessage()+ ""String_Node_Str"";
        res+=""String_Node_Str"";
        java.util.Map<String,java.util.List<String>> h=c.getHeaderFields();
        for (        String k : h.keySet()) {
          if (k == null || k.equalsIgnoreCase(""String_Node_Str"") || k.equalsIgnoreCase(""String_Node_Str""))           continue;
          java.util.List<String> vals=h.get(k);
          for (          String v : vals) {
            res+=k + ""String_Node_Str"" + v+ ""String_Node_Str"";
          }
        }
        res+=""String_Node_Str"";
        this.toClient.writeBytes(res);
        int size=Streams.pipeStreams(c.getInputStream(),this.toClient);
        this.toClient.close();
        this.connection.close();
        System.out.println(""String_Node_Str"" + size);
      }
 else       if (method.equals(""String_Node_Str"")) {
        HttpURLConnection c=(HttpURLConnection)u.openConnection(Proxy.NO_PROXY);
        c.setRequestMethod(""String_Node_Str"");
        for (        String k : headers.keySet()) {
          c.setRequestProperty(k,headers.get(k));
        }
        String res=""String_Node_Str"" + c.getResponseCode() + ""String_Node_Str""+ c.getResponseMessage()+ ""String_Node_Str"";
        res+=""String_Node_Str"";
        java.util.Map<String,java.util.List<String>> h=c.getHeaderFields();
        for (        String k : h.keySet()) {
          if (k == null)           continue;
          java.util.List<String> vals=h.get(k);
          for (          String v : vals) {
            res+=k + ""String_Node_Str"" + v+ ""String_Node_Str"";
          }
        }
        res+=""String_Node_Str"";
        this.toClient.writeBytes(res);
        this.toClient.close();
        this.connection.close();
      }
 else {
        System.out.println(""String_Node_Str"" + method);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return;
  }
  try {
    if (data != null) {
      this.toClient.writeBytes(""String_Node_Str"" + data.length + ""String_Node_Str"");
      this.toClient.write(data);
    }
    this.toClient.close();
    this.connection.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}"
81483,"public static byte[] postRequest(String url,byte[] postdata,String contentType){
  try {
    URL u=new URL(url);
    HttpURLConnection c=(HttpURLConnection)new URL(url).openConnection(Proxy.NO_PROXY);
    c.setDoOutput(true);
    c.setRequestMethod(""String_Node_Str"");
    c.setRequestProperty(""String_Node_Str"",u.getHost());
    c.setRequestProperty(""String_Node_Str"",Integer.toString(postdata.length));
    c.setRequestProperty(""String_Node_Str"",contentType);
    BufferedOutputStream out=new BufferedOutputStream(c.getOutputStream());
    out.write(postdata);
    out.flush();
    out.close();
    byte[] data=grabData(new BufferedInputStream(c.getInputStream()));
    return data;
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return null;
}","public static byte[] postRequest(String url,byte[] postdata,String contentType){
  try {
    URL u=new URL(url);
    HttpURLConnection c=(HttpURLConnection)new URL(url).openConnection(Proxy.NO_PROXY);
    c.setDoOutput(true);
    c.setRequestMethod(""String_Node_Str"");
    c.setRequestProperty(""String_Node_Str"",u.getHost());
    c.setRequestProperty(""String_Node_Str"",Integer.toString(postdata.length));
    c.setRequestProperty(""String_Node_Str"",contentType);
    BufferedOutputStream out=new BufferedOutputStream(c.getOutputStream());
    out.write(postdata);
    out.flush();
    out.close();
    byte[] data=grabData(new BufferedInputStream(c.getInputStream()));
    return data;
  }
 catch (  java.net.UnknownHostException e) {
    System.out.println(""String_Node_Str"");
  }
catch (  MalformedURLException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return null;
}"
81484,"public void run(){
  String header=null;
  HashMap<String,String> headers=new HashMap<String,String>();
  String url=null;
  String method=null;
  try {
    String[] requestLine=this.fromClient.readLine().split(""String_Node_Str"");
    method=requestLine[0].trim().toUpperCase();
    url=requestLine[1].trim();
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  System.out.println(""String_Node_Str"" + method + ""String_Node_Str""+ url);
  try {
    do {
      header=this.fromClient.readLine().trim();
      int splitPoint=header.indexOf(""String_Node_Str"");
      if (splitPoint != -1) {
        headers.put(header.substring(0,splitPoint).toLowerCase().trim(),header.substring(splitPoint + 1).trim());
      }
    }
 while (header.length() > 0);
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  Matcher skinMatcher=MineProxy.SKIN_URL.matcher(url);
  Matcher cloakMatcher=MineProxy.CLOAK_URL.matcher(url);
  Matcher getversionMatcher=MineProxy.GETVERSION_URL.matcher(url);
  Matcher joinserverMatcher=MineProxy.JOINSERVER_URL.matcher(url);
  Matcher checkserverMatcher=MineProxy.CHECKSERVER_URL.matcher(url);
  byte[] data=null;
  String params;
  if (skinMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    String username=skinMatcher.group(1);
    if (this.proxy.skinCache.containsKey(username)) {
      System.out.println(""String_Node_Str"");
      data=this.proxy.skinCache.get(username);
    }
 else {
      url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ username+ ""String_Node_Str"";
      System.out.println(""String_Node_Str"" + url);
      data=getRequest(url);
      System.out.println(""String_Node_Str"" + data.length);
      this.proxy.skinCache.put(username,data);
    }
  }
 else   if (cloakMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    String username=cloakMatcher.group(1);
    if (this.proxy.cloakCache.containsKey(username)) {
      System.out.println(""String_Node_Str"");
      data=this.proxy.cloakCache.get(username);
    }
 else {
      url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ username;
      System.out.println(""String_Node_Str"" + url);
      data=getRequest(url);
      System.out.println(""String_Node_Str"" + data.length);
      this.proxy.cloakCache.put(username,data);
    }
  }
 else   if (getversionMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ this.proxy.version;
    System.out.println(""String_Node_Str"" + url);
    try {
      int postlen=Integer.parseInt(headers.get(""String_Node_Str""));
      char[] postdata=new char[postlen];
      this.fromClient.read(postdata);
      data=postRequest(url,new String(postdata),""String_Node_Str"");
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
 else   if (joinserverMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    params=joinserverMatcher.group(1);
    url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ params;
    System.out.println(""String_Node_Str"" + url);
    data=getRequest(url);
  }
 else   if (checkserverMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    params=checkserverMatcher.group(1);
    url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ params;
    System.out.println(""String_Node_Str"" + url);
    data=getRequest(url);
  }
 else {
    System.out.println(""String_Node_Str"");
    try {
      if (!url.startsWith(""String_Node_Str"") && !url.startsWith(""String_Node_Str"")) {
        url=""String_Node_Str"" + url;
      }
      URL u=new URL(url);
      if (method.equals(""String_Node_Str"")) {
        int port=u.getPort();
        if (port == -1)         port=80;
        Socket sock=new Socket(u.getHost(),port);
        Streams.pipeStreamsActive(sock.getInputStream(),this.toClient);
        Streams.pipeStreamsActive(this.connection.getInputStream(),sock.getOutputStream());
      }
 else       if (method.equals(""String_Node_Str"")) {
        HttpURLConnection c=(HttpURLConnection)u.openConnection(Proxy.NO_PROXY);
        c.setRequestMethod(""String_Node_Str"");
        for (        String k : headers.keySet()) {
          c.setRequestProperty(k,headers.get(k));
        }
        String res=""String_Node_Str"" + c.getResponseCode() + ""String_Node_Str""+ c.getResponseMessage()+ ""String_Node_Str"";
        res+=""String_Node_Str"";
        java.util.Map<String,java.util.List<String>> h=c.getHeaderFields();
        for (        String k : h.keySet()) {
          if (k == null || k.equalsIgnoreCase(""String_Node_Str"") || k.equalsIgnoreCase(""String_Node_Str""))           continue;
          java.util.List<String> vals=h.get(k);
          for (          String v : vals) {
            res+=k + ""String_Node_Str"" + v+ ""String_Node_Str"";
          }
        }
        res+=""String_Node_Str"";
        this.toClient.writeBytes(res);
        int size=Streams.pipeStreams(c.getInputStream(),this.toClient);
        this.toClient.close();
        this.connection.close();
        System.out.println(""String_Node_Str"" + size);
      }
 else       if (method.equals(""String_Node_Str"")) {
        HttpURLConnection c=(HttpURLConnection)u.openConnection(Proxy.NO_PROXY);
        c.setRequestMethod(""String_Node_Str"");
        for (        String k : headers.keySet()) {
          c.setRequestProperty(k,headers.get(k));
        }
        String res=""String_Node_Str"" + c.getResponseCode() + ""String_Node_Str""+ c.getResponseMessage()+ ""String_Node_Str"";
        res+=""String_Node_Str"";
        java.util.Map<String,java.util.List<String>> h=c.getHeaderFields();
        for (        String k : h.keySet()) {
          if (k == null)           continue;
          java.util.List<String> vals=h.get(k);
          for (          String v : vals) {
            res+=k + ""String_Node_Str"" + v+ ""String_Node_Str"";
          }
        }
        res+=""String_Node_Str"";
        this.toClient.writeBytes(res);
        this.toClient.close();
        this.connection.close();
      }
 else {
        System.out.println(""String_Node_Str"" + method);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return;
  }
  try {
    if (data != null) {
      this.toClient.writeBytes(""String_Node_Str"" + data.length + ""String_Node_Str"");
      this.toClient.write(data);
    }
    this.toClient.close();
    this.connection.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void run(){
  String header=null;
  HashMap<String,String> headers=new HashMap<String,String>();
  String url=null;
  String method=null;
  try {
    String[] requestLine=this.fromClient.readLine().split(""String_Node_Str"");
    method=requestLine[0].trim().toUpperCase();
    url=requestLine[1].trim();
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  System.out.println(""String_Node_Str"" + method + ""String_Node_Str""+ url);
  try {
    do {
      header=this.fromClient.readLine().trim();
      int splitPoint=header.indexOf(""String_Node_Str"");
      if (splitPoint != -1) {
        headers.put(header.substring(0,splitPoint).toLowerCase().trim(),header.substring(splitPoint + 1).trim());
      }
    }
 while (header.length() > 0);
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  Matcher skinMatcher=MineProxy.SKIN_URL.matcher(url);
  Matcher cloakMatcher=MineProxy.CLOAK_URL.matcher(url);
  Matcher getversionMatcher=MineProxy.GETVERSION_URL.matcher(url);
  Matcher joinserverMatcher=MineProxy.JOINSERVER_URL.matcher(url);
  Matcher checkserverMatcher=MineProxy.CHECKSERVER_URL.matcher(url);
  byte[] data=null;
  String params;
  if (skinMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    String username=skinMatcher.group(1);
    if (this.proxy.skinCache.containsKey(username)) {
      System.out.println(""String_Node_Str"");
      data=this.proxy.skinCache.get(username);
    }
 else {
      url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ username+ ""String_Node_Str"";
      System.out.println(""String_Node_Str"" + url);
      data=getRequest(url);
      System.out.println(""String_Node_Str"" + data.length);
      this.proxy.skinCache.put(username,data);
    }
  }
 else   if (cloakMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    String username=cloakMatcher.group(1);
    if (this.proxy.cloakCache.containsKey(username)) {
      System.out.println(""String_Node_Str"");
      data=this.proxy.cloakCache.get(username);
    }
 else {
      url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ username;
      System.out.println(""String_Node_Str"" + url);
      data=getRequest(url);
      System.out.println(""String_Node_Str"" + data.length);
      this.proxy.cloakCache.put(username,data);
    }
  }
 else   if (getversionMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ this.proxy.version;
    System.out.println(""String_Node_Str"" + url);
    try {
      int postlen=Integer.parseInt(headers.get(""String_Node_Str""));
      char[] postdata=new char[postlen];
      this.fromClient.read(postdata);
      data=postRequest(url,new String(postdata),""String_Node_Str"");
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
 else   if (joinserverMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    params=joinserverMatcher.group(1);
    url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ params;
    System.out.println(""String_Node_Str"" + url);
    data=getRequest(url);
  }
 else   if (checkserverMatcher.matches()) {
    System.out.println(""String_Node_Str"");
    params=checkserverMatcher.group(1);
    url=""String_Node_Str"" + MineProxy.authServer + ""String_Node_Str""+ params;
    System.out.println(""String_Node_Str"" + url);
    data=getRequest(url);
  }
 else {
    System.out.println(""String_Node_Str"");
    try {
      if (!url.startsWith(""String_Node_Str"") && !url.startsWith(""String_Node_Str"")) {
        url=""String_Node_Str"" + url;
      }
      URL u=new URL(url);
      if (method.equals(""String_Node_Str"")) {
        int port=u.getPort();
        if (port == -1)         port=80;
        Socket sock=new Socket(u.getHost(),port);
        Streams.pipeStreamsActive(sock.getInputStream(),this.toClient);
        Streams.pipeStreamsActive(this.connection.getInputStream(),sock.getOutputStream());
      }
 else       if (method.equals(""String_Node_Str"")) {
        HttpURLConnection c=(HttpURLConnection)u.openConnection(Proxy.NO_PROXY);
        c.setRequestMethod(""String_Node_Str"");
        for (        String k : headers.keySet()) {
          c.setRequestProperty(k,headers.get(k));
        }
        String res=""String_Node_Str"" + c.getResponseCode() + ""String_Node_Str""+ c.getResponseMessage()+ ""String_Node_Str"";
        res+=""String_Node_Str"";
        java.util.Map<String,java.util.List<String>> h=c.getHeaderFields();
        headerloop:         for (        String k : h.keySet()) {
          if (k == null)           continue;
          k=k.trim();
          for (          String forbiddenHeader : BLACKLISTED_HEADERS) {
            if (k.equalsIgnoreCase(forbiddenHeader))             continue headerloop;
          }
          java.util.List<String> vals=h.get(k);
          for (          String v : vals) {
            res+=k + ""String_Node_Str"" + v+ ""String_Node_Str"";
          }
        }
        res+=""String_Node_Str"";
        this.toClient.writeBytes(res);
        int size=Streams.pipeStreams(c.getInputStream(),this.toClient);
        this.toClient.close();
        this.connection.close();
        System.out.println(""String_Node_Str"" + size);
      }
 else       if (method.equals(""String_Node_Str"")) {
        HttpURLConnection c=(HttpURLConnection)u.openConnection(Proxy.NO_PROXY);
        c.setRequestMethod(""String_Node_Str"");
        for (        String k : headers.keySet()) {
          c.setRequestProperty(k,headers.get(k));
        }
        String res=""String_Node_Str"" + c.getResponseCode() + ""String_Node_Str""+ c.getResponseMessage()+ ""String_Node_Str"";
        res+=""String_Node_Str"";
        java.util.Map<String,java.util.List<String>> h=c.getHeaderFields();
        for (        String k : h.keySet()) {
          if (k == null)           continue;
          java.util.List<String> vals=h.get(k);
          for (          String v : vals) {
            res+=k + ""String_Node_Str"" + v+ ""String_Node_Str"";
          }
        }
        res+=""String_Node_Str"";
        this.toClient.writeBytes(res);
        this.toClient.close();
        this.connection.close();
      }
 else {
        System.out.println(""String_Node_Str"" + method);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return;
  }
  try {
    if (data != null) {
      this.toClient.writeBytes(""String_Node_Str"" + data.length + ""String_Node_Str"");
      this.toClient.write(data);
    }
    this.toClient.close();
    this.connection.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}"
81485,"/** 
 * Convert from PointF p from View coordinats to Model Coordinates
 * @param p
 * @return
 */
public PointF viewToModel(PointF p){
  PointF q=new PointF(p.x * zoom,height - p.y * zoom);
  return q;
}","/** 
 * Convert from PointF p from View coordinats to Model Coordinates
 * @param p
 * @return
 */
public PointF viewToModel(PointF p){
  PointF q=new PointF(p.x * zoom,(height - p.y) * zoom);
  return q;
}"
81486,"/** 
 * When the activity starts we create a model, view, and controller for the game. The model and controller are separate classes
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  model=new GameModel();
  createLevel(2);
  createPaints();
  setContentView(R.layout.game);
  surface=(SurfaceView)findViewById(R.id.game_surface);
  holder=surface.getHolder();
  surface.getHolder().addCallback(this);
  controller=new GameController(this,model);
  surface.setOnTouchListener(controller);
}","/** 
 * When the activity starts we create a model, view, and controller for the game. The model and controller are separate classes
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  model=new GameModel();
  createPaints();
  setContentView(R.layout.game);
  surface=(SurfaceView)findViewById(R.id.game_surface);
  holder=surface.getHolder();
  surface.getHolder().addCallback(this);
  controller=new GameController(this,model);
  surface.setOnTouchListener(controller);
}"
81487,"public void draw(){
  Canvas c=null;
  try {
    c=holder.lockCanvas();
    if (c != null) {
      doDraw(c);
      if (model.levelOver) {
        model.resetGame();
        createLevel(2);
        model.levelOver=false;
      }
    }
  }
  finally {
    if (c != null) {
      holder.unlockCanvasAndPost(c);
    }
  }
}","public void draw(){
  Canvas c=null;
  try {
    c=holder.lockCanvas();
    if (c != null) {
      doDraw(c);
    }
  }
  finally {
    if (c != null) {
      holder.unlockCanvasAndPost(c);
    }
  }
}"
81488,"/** 
 * When the drawing surface is created we start up a game loop, the game loop just draws the scene and updates the model in an infinite loop running in a separate thread. We create the thread and start it up here ...
 */
public void surfaceCreated(SurfaceHolder holder){
  gameLoop=new GameLoop(this,model,controller);
  gameLoop.start();
}","/** 
 * When the drawing surface is created we start up a game loop, the game loop just draws the scene and updates the model in an infinite loop running in a separate thread. We create the thread and start it up here ...
 */
public void surfaceCreated(SurfaceHolder holder){
  gameLoop=new GameLoop(this,model,controller);
  gameLoop.start();
synchronized (model) {
    model.createLevel(2);
  }
}"
81489,"/** 
 * This handles all events in which the user touches the screen. For example, the user can touch a square and drag it to a new position, or the user can touch a disk and flick it toward the target.
 */
public boolean onTouch(View v,MotionEvent event){
  float x, y;
synchronized (gameModel) {
    x=event.getX();
    y=height - event.getY();
    Log.d(TAG,""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ (height - y)+ ""String_Node_Str""+ currState+ ""String_Node_Str""+ firstX+ ""String_Node_Str""+ firstY);
    if (event.getAction() == MotionEvent.ACTION_DOWN) {
      Disk d;
      Square s;
      firstX=x;
      firstY=y;
      d=gameModel.touchingDisk(x,y);
      s=gameModel.touchingSquare(x,y);
      Log.d(TAG,""String_Node_Str"" + d);
      Log.d(TAG,""String_Node_Str"" + s);
      if ((d != null) && (!d.isStatic)) {
        currDisk=d;
        currDisk.vx=currDisk.vy=0;
        currDisk.weightless=true;
        currState=State.TOUCH_DISK;
        Log.d(TAG,""String_Node_Str"" + d);
      }
 else       if (s != null) {
        currSquare=s;
        currState=State.TOUCH_SQUARE;
        Log.d(TAG,""String_Node_Str"" + s);
      }
      return true;
    }
 else     if (event.getAction() == MotionEvent.ACTION_MOVE) {
      if (currState == State.TOUCH_DISK) {
        currDisk.move(firstX,firstY);
      }
 else       if (currState == State.TOUCH_SQUARE) {
        currSquare.move(x,y);
      }
      return true;
    }
 else     if (event.getAction() == MotionEvent.ACTION_UP) {
      if (currState == State.TOUCH_DISK) {
        currState=State.WAIT;
        float dx=x - firstX;
        float dy=y - firstY;
        currDisk.vx=dx;
        currDisk.vy=dy;
        currDisk.weightless=false;
        currDisk=null;
        return true;
      }
 else       if (currState == State.TOUCH_SQUARE) {
        currState=State.WAIT;
        currSquare=null;
        return true;
      }
    }
    return false;
  }
}","/** 
 * This handles all events in which the user touches the screen. For example, the user can touch a square and drag it to a new position, or the user can touch a disk and flick it toward the target.
 */
public boolean onTouch(View v,MotionEvent event){
  float x, y;
synchronized (gameModel) {
    x=event.getX();
    y=height - event.getY();
    Log.d(TAG,""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ (height - y)+ ""String_Node_Str""+ currState+ ""String_Node_Str""+ firstX+ ""String_Node_Str""+ firstY);
    if (event.getAction() == MotionEvent.ACTION_DOWN) {
      Disk d;
      Square s;
      d=gameModel.touchingDisk(x,y);
      s=gameModel.touchingSquare(x,y);
      Log.d(TAG,""String_Node_Str"" + d);
      Log.d(TAG,""String_Node_Str"" + s);
      if ((d != null) && (!d.isStatic)) {
        currDisk=d;
        currDisk.vx=currDisk.vy=0;
        currDisk.weightless=true;
        currState=State.TOUCH_DISK;
        firstX=d.x;
        firstY=d.y;
        Log.d(TAG,""String_Node_Str"" + d);
      }
 else       if (s != null) {
        currSquare=s;
        currState=State.TOUCH_SQUARE;
        Log.d(TAG,""String_Node_Str"" + s);
      }
      return true;
    }
 else     if (event.getAction() == MotionEvent.ACTION_MOVE) {
      if (currState == State.TOUCH_DISK) {
        currDisk.move(firstX,firstY);
      }
 else       if (currState == State.TOUCH_SQUARE) {
        currSquare.move(x,y);
      }
      return true;
    }
 else     if (event.getAction() == MotionEvent.ACTION_UP) {
      if (currState == State.TOUCH_DISK) {
        currState=State.WAIT;
        float dx=x - firstX;
        float dy=y - firstY;
        currDisk.vx=dx;
        currDisk.vy=dy;
        currDisk.weightless=false;
        currDisk=null;
        return true;
      }
 else       if (currState == State.TOUCH_SQUARE) {
        currState=State.WAIT;
        currSquare=null;
        return true;
      }
    }
    return false;
  }
}"
81490,"public void levelOver(){
}","public void levelOver(){
  if (gameModel.levelOver) {
    gameModel.resetGame();
    gameModel.createLevel(2);
    gameModel.levelOver=false;
  }
}"
81491,"@Override public void addPages(){
  IStructuredSelection selection=MantisUIUtil.getCurrentSelection();
  if (selection != null && !selection.isEmpty()) {
    Object selectedElement=selection.getFirstElement();
    String projectName=null;
    if (selectedElement instanceof ITask) {
      ITask task=(ITask)selectedElement;
      projectName=task.getAttribute(PROJECT.getKey());
    }
 else     if (selectedElement instanceof IRepositoryQuery) {
      IRepositoryQuery query=(IRepositoryQuery)selectedElement;
      projectName=query.getAttribute(IMantisClient.PROJECT_NAME);
    }
 else     if (selectedElement instanceof IAdaptable) {
      IAdaptable adaptable=(IAdaptable)selectedElement;
      ITask task=(ITask)adaptable.getAdapter(ITask.class);
      if (task != null)       projectName=task.getAttribute(PROJECT.getKey());
    }
    if (projectName != null && !MantisProject.ALL_PROJECTS.getName().equals(projectName)) {
      mapping=new ProductOnlyTaskMapping(projectName);
      return;
    }
  }
  newTaskPage=new MantisProjectPage(taskRepository,clientManager);
  addPage(newTaskPage);
}","@Override public void addPages(){
  IStructuredSelection selection=MantisUIUtil.getCurrentSelection();
  if (selection != null && !selection.isEmpty()) {
    Object selectedElement=selection.getFirstElement();
    String projectName=null;
    if (selectedElement instanceof ITask) {
      ITask task=(ITask)selectedElement;
      projectName=task.getAttribute(PROJECT.getKey());
    }
 else     if (selectedElement instanceof IRepositoryQuery) {
      IRepositoryQuery query=(IRepositoryQuery)selectedElement;
      projectName=query.getAttribute(IMantisClient.PROJECT_NAME);
    }
 else     if (selectedElement instanceof IAdaptable) {
      IAdaptable adaptable=(IAdaptable)selectedElement;
      ITask task=(ITask)adaptable.getAdapter(ITask.class);
      if (task != null)       projectName=task.getAttribute(PROJECT.getKey());
    }
    if (projectName != null && !MantisProject.ALL_PROJECTS.getName().equals(projectName)) {
      try {
        MantisCacheData cacheData=clientManager.getRepository(taskRepository).getCacheData();
        for (        MantisProject project : cacheData.getProjects()) {
          if (project.getName().equals(projectName)) {
            mapping=new ProductOnlyTaskMapping(projectName);
            return;
          }
        }
      }
 catch (      MantisException e) {
      }
    }
  }
  newTaskPage=new MantisProjectPage(taskRepository,clientManager);
  addPage(newTaskPage);
}"
81492,"public void add(String url,MantisCacheData data){
  ensureRead();
  _cacheDataByUrl.put(url,data);
}","public void add(String url,MantisCacheData data){
  ensureRead();
  add0(url,data);
}"
81493,"private void read(){
  ObjectInputStream in=null;
  try {
    in=new ObjectInputStream(new FileInputStream(cacheFile));
    int size=in.readInt();
    for (int i=0; i < size; i++) {
      String url=(String)in.readObject();
      MantisCacheData data=(MantisCacheData)in.readObject();
      add(url,data);
    }
  }
 catch (  FileNotFoundException cacheDoesNotExist) {
  }
catch (  Throwable e) {
    cleanCache(e);
  }
 finally {
    read=true;
    closeSilently(in);
  }
}","private void read(){
  ObjectInputStream in=null;
  try {
    in=new ObjectInputStream(new FileInputStream(cacheFile));
    int size=in.readInt();
    for (int i=0; i < size; i++) {
      String url=(String)in.readObject();
      MantisCacheData data=(MantisCacheData)in.readObject();
      add0(url,data);
    }
  }
 catch (  FileNotFoundException cacheDoesNotExist) {
  }
catch (  Throwable e) {
    cleanCache(e);
  }
 finally {
    read=true;
    closeSilently(in);
  }
}"
81494,"@Override protected boolean isAuthenticationException(Exception exception){
  if (!(exception instanceof MantisException))   return false;
  MantisException mantisException=(MantisException)exception;
  return mantisException.getMessage() != null && mantisException.getMessage().toLowerCase().indexOf(""String_Node_Str"") != -1;
}","@Override protected boolean isAuthenticationException(Exception exception){
  if (!(exception instanceof MantisException))   return false;
  MantisException mantisException=(MantisException)exception;
  return mantisException.getMessage() != null && mantisException.getMessage().toLowerCase(Locale.ENGLISH).indexOf(""String_Node_Str"") != -1;
}"
81495,"private MantisRemoteException wrap(RemoteException e){
  StringBuilder message=new StringBuilder();
  if (isSourceforgeRepoWithoutHttpAuth())   message.append(""String_Node_Str"").append('\n');
  if (location.getUrl().startsWith(SourceForgeConstants.OLD_SF_NET_URL))   message.append(""String_Node_Str"").append('\n');
  if (e instanceof AxisFault) {
    AxisFault axisFault=(AxisFault)e;
    if (axisFault.getCause() instanceof SAXException)     message.append(""String_Node_Str"" + String.valueOf(axisFault.getCause().getMessage()) + ""String_Node_Str"");
 else     if (e.getMessage() != null)     message.append(e.getMessage());
  }
 else   if (e.getMessage() != null)   message.append(e.getMessage());
  return new MantisRemoteException(message.toString(),e);
}","private MantisRemoteException wrap(RemoteException e){
  boolean unexpected=false;
  StringBuilder message=new StringBuilder();
  if (isSourceforgeRepoWithoutHttpAuth())   message.append(""String_Node_Str"").append('\n');
  if (location.getUrl().startsWith(SourceForgeConstants.OLD_SF_NET_URL))   message.append(""String_Node_Str"").append('\n');
  if (e instanceof AxisFault) {
    AxisFault axisFault=(AxisFault)e;
    if (axisFault.getCause() instanceof SAXException)     message.append(""String_Node_Str"" + String.valueOf(axisFault.getCause().getMessage()));
 else     if (e.getMessage() != null)     message.append(e.getMessage());
    unexpected=true;
  }
 else   if (e.getMessage() != null)   message.append(e.getMessage());
  return new MantisRemoteException(message.toString(),e,unexpected);
}"
81496,"public Status toStatus(String message,Throwable t,TaskRepository repository){
  String actualMessage=message == null ? t.getMessage() : message;
  if (repository == null)   return new Status(IStatus.ERROR,PLUGIN_ID,actualMessage,t);
  if (t instanceof MantisLoginException || ""String_Node_Str"".equals(actualMessage))   return RepositoryStatus.createLoginError(repository.getRepositoryUrl(),actualMessage);
  if (t instanceof MantisRemoteException)   return new RepositoryStatus(IStatus.ERROR,PLUGIN_ID,RepositoryStatus.ERROR_REPOSITORY,actualMessage);
  if (t instanceof MantisLocalException)   return RepositoryStatus.createInternalError(PLUGIN_ID,actualMessage,t);
  if (t instanceof IOException)   return new RepositoryStatus(IStatus.ERROR,PLUGIN_ID,RepositoryStatus.ERROR_IO,actualMessage);
  return RepositoryStatus.createInternalError(PLUGIN_ID,actualMessage,t);
}","public Status toStatus(String message,Throwable t,TaskRepository repository){
  String actualMessage=message == null ? t.getMessage() : message;
  if (repository == null)   return new Status(IStatus.ERROR,PLUGIN_ID,actualMessage,t);
  if (t instanceof MantisLoginException || (actualMessage != null && actualMessage.toLowerCase(Locale.ENGLISH).contains(""String_Node_Str"")))   return new RepositoryStatus(IStatus.ERROR,PLUGIN_ID,RepositoryStatus.ERROR_PERMISSION_DENIED,actualMessage);
  if (t instanceof MantisRemoteException) {
    if (t.getCause() instanceof AxisHttpFault)     if (((AxisHttpFault)t.getCause()).getReturnCode() == 404)     return RepositoryStatus.createNotFoundError(repository.getUrl(),PLUGIN_ID);
    if (t.getCause() instanceof AxisFault) {
      AxisFault fault=(AxisFault)t.getCause();
      if (fault.detail instanceof IOException)       return new RepositoryStatus(IStatus.ERROR,PLUGIN_ID,RepositoryStatus.ERROR_PERMISSION_DENIED,""String_Node_Str"" + fault.detail.getMessage() + ""String_Node_Str"");
    }
    if (((MantisRemoteException)t).isUnexpected())     return RepositoryStatus.createInternalError(PLUGIN_ID,actualMessage,t);
    return new RepositoryStatus(IStatus.ERROR,PLUGIN_ID,RepositoryStatus.ERROR_REPOSITORY,actualMessage);
  }
  if (t instanceof MalformedURLException || t.getCause() instanceof MalformedURLException)   return RepositoryStatus.createStatus(repository,RepositoryStatus.ERROR_REPOSITORY_NOT_FOUND,PLUGIN_ID,t.getMessage());
  if (t instanceof MantisLocalException)   return RepositoryStatus.createInternalError(PLUGIN_ID,actualMessage,t);
  if (t instanceof IOException || t.getCause() instanceof IOException)   return new RepositoryStatus(IStatus.ERROR,PLUGIN_ID,RepositoryStatus.ERROR_IO,actualMessage);
  return RepositoryStatus.createInternalError(PLUGIN_ID,actualMessage,t);
}"
81497,"public MantisRemoteException(String message,Throwable cause){
  super(message,cause);
}","public MantisRemoteException(String message,Throwable cause,boolean unexpected){
  super(message,cause);
  this.unexpected=unexpected;
}"
81498,"@Override public void stop(BundleContext context) throws Exception {
  TasksUi.getRepositoryManager().removeListener(MantisCorePlugin.getDefault().getConnector().getClientManager());
  plugin=null;
  super.stop(context);
}","@Override public void stop(BundleContext context) throws Exception {
  TasksUi.getRepositoryManager().removeListener(MantisCorePlugin.getDefault().getConnector().getClientManager());
  plugin=null;
  if (formColors != null) {
    formColors.dispose();
    formColors=null;
  }
  super.stop(context);
}"
81499,"@Override protected void applyValidatorResult(Validator validator){
  super.applyValidatorResult(validator);
  if (validator.getStatus().getSeverity() != IStatus.ERROR)   return;
  if (validator.getStatus().getMessage().toLowerCase(Locale.ENGLISH).indexOf(""String_Node_Str"") != -1)   return;
  ErrorDialog.openError(getShell(),""String_Node_Str"",""String_Node_Str"",validator.getStatus());
}","@Override protected void applyValidatorResult(Validator validator){
  super.applyValidatorResult(validator);
  if (validator.getStatus().getSeverity() != IStatus.ERROR)   return;
  if (validator.getStatus() instanceof RepositoryStatus) {
    RepositoryStatus status=(RepositoryStatus)validator.getStatus();
    if (status.getCode() != RepositoryStatus.ERROR_INTERNAL)     return;
  }
  new WikiLinkedErrorDialog(getShell(),""String_Node_Str"",""String_Node_Str"",validator.getStatus()).open();
}"
81500,"@Override public void run(IProgressMonitor monitor) throws CoreException {
  try {
    validate(monitor);
  }
 catch (  MalformedURLException e) {
    throw new CoreException(RepositoryStatus.createStatus(repositoryUrl,IStatus.ERROR,MantisUIPlugin.PLUGIN_ID,INVALID_REPOSITORY_URL));
  }
catch (  MantisException e) {
    throw new CoreException(RepositoryStatus.createStatus(repositoryUrl,IStatus.ERROR,MantisUIPlugin.PLUGIN_ID,e.getMessage()));
  }
}","@Override public void run(IProgressMonitor monitor) throws CoreException {
  try {
    validate(monitor);
  }
 catch (  MantisException e) {
    throw new CoreException(MantisCorePlugin.getDefault().getStatusFactory().toStatus(null,e,taskRepository));
  }
catch (  MalformedURLException e) {
    throw new CoreException(MantisCorePlugin.getDefault().getStatusFactory().toStatus(null,e,taskRepository));
  }
}"
81501,"private static URL makeIconFileURL(String prefix,String name) throws MalformedURLException {
  if (baseURL == null)   throw new MalformedURLException();
  StringBuffer buffer=new StringBuffer(prefix);
  if (prefix != ""String_Node_Str"")   buffer.append('/');
  buffer.append(name);
  return new URL(baseURL,buffer.toString());
}","private static URL makeIconFileURL(String prefix,String name) throws MalformedURLException {
  if (baseURL == null)   throw new MalformedURLException();
  StringBuffer buffer=new StringBuffer(prefix);
  if (!""String_Node_Str"".equals(prefix))   buffer.append('/');
  buffer.append(name);
  return new URL(baseURL,buffer.toString());
}"
81502,"/** 
 * Since for large user counts the reporter retrieval fails, we provide a hook for registering additional reporter users as they are discovered, e.g. in IssueData
 * @param projectId the project id
 * @param reporterName the name of the reporter
 */
void registerAdditionalReporter(int projectId,String reporterName){
  if (cacheData.reportersByProjectId == null) {
    MantisCorePlugin.warn(""String_Node_Str"",new RuntimeException());
    cacheData.reportersByProjectId=new HashMap<Integer,List<String>>();
  }
  List<String> reporters=cacheData.reportersByProjectId.get(projectId);
  if (reporters == null) {
    MantisCorePlugin.warn(""String_Node_Str"" + projectId + ""String_Node_Str"",new RuntimeException());
    cacheData.reportersByProjectId.put(projectId,new ArrayList<String>());
  }
  if (reporters.contains(reporterName))   return;
  reporters.add(reporterName);
}","/** 
 * Since for large user counts the reporter retrieval fails, we provide a hook for registering additional reporter users as they are discovered, e.g. in IssueData
 * @param projectId the project id
 * @param reporterName the name of the reporter
 */
void registerAdditionalReporter(int projectId,String reporterName){
  if (cacheData.reportersByProjectId == null) {
    MantisCorePlugin.warn(""String_Node_Str"",new RuntimeException());
    cacheData.reportersByProjectId=new HashMap<Integer,List<String>>();
  }
  List<String> reporters=cacheData.reportersByProjectId.get(projectId);
  if (reporters == null) {
    reporters=new ArrayList<String>();
    MantisCorePlugin.warn(""String_Node_Str"" + projectId + ""String_Node_Str"",new RuntimeException());
    cacheData.reportersByProjectId.put(projectId,reporters);
  }
  if (reporters.contains(reporterName))   return;
  reporters.add(reporterName);
}"
81503,"void refresh(IProgressMonitor monitor,String repositoryUrl) throws MantisException {
synchronized (sync) {
    long start=System.currentTimeMillis();
    SubMonitor subMonitor=SubMonitor.convert(monitor);
    try {
      cacheProjects(soapClient.getProjectData(monitor));
      subMonitor.beginTask(""String_Node_Str"",cacheData.projects.size() * 6 + 15);
      cacheReporterThreshold(soapClient.getStringConfiguration(monitor,REPORTER_THRESHOLD));
      Policy.advance(subMonitor,1);
      cacheDeveloperThreshold(soapClient.getStringConfiguration(monitor,DEVELOPER_THRESHOLD));
      Policy.advance(subMonitor,1);
      cacheDueDateViewThreshold(soapClient.getStringConfiguration(monitor,DUE_DATE_VIEW_THRESOLD));
      Policy.advance(subMonitor,1);
      cacheDueDateUpdateThreshold(soapClient.getStringConfiguration(monitor,DUE_DATE_UPDATE_THRESOLD));
      Policy.advance(subMonitor,1);
      cacheTimeTrackingEnabled(soapClient.getStringConfiguration(monitor,TIME_TRACKING_ENABLED));
      Policy.advance(subMonitor,1);
      for (      MantisProject project : cacheData.projects) {
        cacheFilters(project.getValue(),soapClient.getProjectFilters(project.getValue(),monitor));
        Policy.advance(subMonitor,1);
        cacheProjectCustomFields(project.getValue(),soapClient.getProjectCustomFields(project.getValue(),monitor));
        Policy.advance(subMonitor,1);
        cacheProjectCategories(project.getValue(),soapClient.getProjectCategories(project.getValue(),monitor));
        Policy.advance(subMonitor,1);
        cacheProjectDevelopers(project.getValue(),soapClient.getProjectUsers(project.getValue(),cacheData.developerThreshold,monitor));
        Policy.advance(subMonitor,1);
        try {
          cacheProjectReporters(project.getValue(),soapClient.getProjectUsers(project.getValue(),cacheData.reporterThreshold,monitor));
        }
 catch (        MantisException e) {
          if (!cacheData.reportersByProjectId.containsKey(project.getValue())) {
            cacheData.reportersByProjectId.put(project.getValue(),new ArrayList<String>(cacheData.developersByProjectId.get(project.getValue())));
            MantisCorePlugin.log(new Status(Status.WARNING,MantisCorePlugin.PLUGIN_ID,""String_Node_Str"",e));
          }
 else {
            MantisCorePlugin.log(new Status(Status.WARNING,MantisCorePlugin.PLUGIN_ID,""String_Node_Str"",e));
          }
        }
        Policy.advance(subMonitor,1);
        cacheProjectVersions(project.getValue(),soapClient.getProjectVersions(project.getValue(),monitor));
        Policy.advance(subMonitor,1);
      }
      cacheResolvedStatus(soapClient.getStringConfiguration(monitor,RESOLVED_STATUS_THRESHOLD));
      Policy.advance(subMonitor,1);
      cacheRepositoryVersion(soapClient.getVersion(monitor));
      Policy.advance(subMonitor,1);
      cachePriorities(soapClient.getPriorities(monitor));
      Policy.advance(subMonitor,1);
      cacheStatuses(soapClient.getStatuses(monitor));
      Policy.advance(subMonitor,1);
      cacheSeverities(soapClient.getSeverities(monitor));
      Policy.advance(subMonitor,1);
      cacheResolutions(soapClient.getResolutions(monitor));
      Policy.advance(subMonitor,1);
      cacheReproducibilites(soapClient.getReproducibilities(monitor));
      Policy.advance(subMonitor,1);
      cacheProjections(soapClient.getProjections(monitor));
      Policy.advance(subMonitor,1);
      cacheEtas(soapClient.getEtas(monitor));
      Policy.advance(subMonitor,1);
      cacheViewStates(soapClient.getViewStates(monitor));
      Policy.advance(subMonitor,1);
      cacheData.lastUpdate=System.currentTimeMillis();
    }
  finally {
      subMonitor.done();
      MantisCorePlugin.log(new Status(Status.INFO,MantisCorePlugin.PLUGIN_ID,""String_Node_Str"" + repositoryUrl + ""String_Node_Str""+ format(start)+ ""String_Node_Str""));
    }
  }
}","void refresh(IProgressMonitor monitor,String repositoryUrl) throws MantisException {
synchronized (sync) {
    long start=System.currentTimeMillis();
    SubMonitor subMonitor=SubMonitor.convert(monitor);
    try {
      cacheProjects(soapClient.getProjectData(monitor));
      subMonitor.beginTask(""String_Node_Str"",cacheData.projects.size() * 6 + 15);
      cacheReporterThreshold(soapClient.getStringConfiguration(monitor,REPORTER_THRESHOLD));
      Policy.advance(subMonitor,1);
      cacheDeveloperThreshold(soapClient.getStringConfiguration(monitor,DEVELOPER_THRESHOLD));
      Policy.advance(subMonitor,1);
      try {
        cacheDueDateViewThreshold(soapClient.getStringConfiguration(monitor,DUE_DATE_VIEW_THRESOLD));
      }
 catch (      MantisException e) {
        MantisCorePlugin.log(new Status(Status.WARNING,MantisCorePlugin.PLUGIN_ID,""String_Node_Str"" + e.getMessage() + ""String_Node_Str""));
        cacheDueDateViewThreshold(ACCESS_LEVEL_NOBODY + ""String_Node_Str"");
      }
 finally {
        Policy.advance(subMonitor,1);
      }
      try {
        cacheDueDateUpdateThreshold(soapClient.getStringConfiguration(monitor,DUE_DATE_UPDATE_THRESOLD));
      }
 catch (      MantisException e) {
        MantisCorePlugin.log(new Status(Status.WARNING,MantisCorePlugin.PLUGIN_ID,""String_Node_Str"" + e.getMessage() + ""String_Node_Str""));
        cacheDueDateUpdateThreshold(ACCESS_LEVEL_NOBODY + ""String_Node_Str"");
      }
 finally {
        Policy.advance(subMonitor,1);
      }
      try {
        cacheTimeTrackingEnabled(soapClient.getStringConfiguration(monitor,TIME_TRACKING_ENABLED));
      }
 catch (      MantisException e) {
        MantisCorePlugin.log(new Status(Status.WARNING,MantisCorePlugin.PLUGIN_ID,""String_Node_Str"" + e.getMessage() + ""String_Node_Str""));
        cacheTimeTrackingEnabled(Boolean.FALSE.toString());
      }
 finally {
        Policy.advance(subMonitor,1);
      }
      for (      MantisProject project : cacheData.projects) {
        cacheFilters(project.getValue(),soapClient.getProjectFilters(project.getValue(),monitor));
        Policy.advance(subMonitor,1);
        cacheProjectCustomFields(project.getValue(),soapClient.getProjectCustomFields(project.getValue(),monitor));
        Policy.advance(subMonitor,1);
        cacheProjectCategories(project.getValue(),soapClient.getProjectCategories(project.getValue(),monitor));
        Policy.advance(subMonitor,1);
        cacheProjectDevelopers(project.getValue(),soapClient.getProjectUsers(project.getValue(),cacheData.developerThreshold,monitor));
        Policy.advance(subMonitor,1);
        try {
          cacheProjectReporters(project.getValue(),soapClient.getProjectUsers(project.getValue(),cacheData.reporterThreshold,monitor));
        }
 catch (        MantisException e) {
          if (!cacheData.reportersByProjectId.containsKey(project.getValue())) {
            cacheData.reportersByProjectId.put(project.getValue(),new ArrayList<String>(cacheData.developersByProjectId.get(project.getValue())));
            MantisCorePlugin.log(new Status(Status.WARNING,MantisCorePlugin.PLUGIN_ID,""String_Node_Str"",e));
          }
 else {
            MantisCorePlugin.log(new Status(Status.WARNING,MantisCorePlugin.PLUGIN_ID,""String_Node_Str"",e));
          }
        }
        Policy.advance(subMonitor,1);
        cacheProjectVersions(project.getValue(),soapClient.getProjectVersions(project.getValue(),monitor));
        Policy.advance(subMonitor,1);
      }
      cacheResolvedStatus(soapClient.getStringConfiguration(monitor,RESOLVED_STATUS_THRESHOLD));
      Policy.advance(subMonitor,1);
      cacheRepositoryVersion(soapClient.getVersion(monitor));
      Policy.advance(subMonitor,1);
      cachePriorities(soapClient.getPriorities(monitor));
      Policy.advance(subMonitor,1);
      cacheStatuses(soapClient.getStatuses(monitor));
      Policy.advance(subMonitor,1);
      cacheSeverities(soapClient.getSeverities(monitor));
      Policy.advance(subMonitor,1);
      cacheResolutions(soapClient.getResolutions(monitor));
      Policy.advance(subMonitor,1);
      cacheReproducibilites(soapClient.getReproducibilities(monitor));
      Policy.advance(subMonitor,1);
      cacheProjections(soapClient.getProjections(monitor));
      Policy.advance(subMonitor,1);
      cacheEtas(soapClient.getEtas(monitor));
      Policy.advance(subMonitor,1);
      cacheViewStates(soapClient.getViewStates(monitor));
      Policy.advance(subMonitor,1);
      cacheData.lastUpdate=System.currentTimeMillis();
    }
  finally {
      subMonitor.done();
      MantisCorePlugin.log(new Status(Status.INFO,MantisCorePlugin.PLUGIN_ID,""String_Node_Str"" + repositoryUrl + ""String_Node_Str""+ format(start)+ ""String_Node_Str""));
    }
  }
}"
81504,"public boolean isTimeTrackingEnabled(IProgressMonitor monitor) throws MantisException {
  cache.refreshIfNeeded(monitor,location.getUrl());
  return cache.getCacheData().timeTrackingEnabled;
}","public boolean isTimeTrackingEnabled(IProgressMonitor monitor) throws MantisException {
  cache.refreshIfNeeded(monitor,location.getUrl());
  return cache.getCacheData().timeTrackingEnabled && cache.getRepositoryVersion().isHasTimeTrackingSupport();
}"
81505,"public void createControl(Composite parent){
  projectCombo=new Combo(parent,SWT.READ_ONLY);
  projectCombo.add(""String_Node_Str"");
  setControl(projectCombo);
  try {
    MantisRepositoryConnector connector=(MantisRepositoryConnector)TasksUi.getRepositoryManager().getRepositoryConnector(MantisCorePlugin.REPOSITORY_KIND);
    IMantisClient client=connector.getClientManager().getRepository(taskRepository);
    for (    MantisProject pd : client.getProjects())     projectCombo.add(pd.getName());
    projectCombo.setText(projectCombo.getItem(0));
    projectCombo.addSelectionListener(new SelectionListener(){
      public void widgetSelected(      SelectionEvent e){
        if (projectCombo.getSelectionIndex() > 0) {
          TaskAttribute attribute=taskData.getRoot().getAttribute(Key.PROJECT.getKey());
          attribute.setValue(projectCombo.getText());
          final MantisRepositoryConnector connector=(MantisRepositoryConnector)TasksUi.getRepositoryManager().getRepositoryConnector(MantisCorePlugin.REPOSITORY_KIND);
          try {
            getContainer().run(false,true,new IRunnableWithProgress(){
              public void run(              IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
                try {
                  MantisTaskDataHandler.createProjectSpecificAttributes(taskData,connector.getClientManager().getRepository(taskRepository),monitor);
                }
 catch (                MalformedURLException e) {
                  throw new InvocationTargetException(e);
                }
              }
            }
);
          }
 catch (          InvocationTargetException ex) {
            MantisUIPlugin.handleMantisException(ex);
            return;
          }
catch (          InterruptedException ex) {
            MantisUIPlugin.handleMantisException(ex);
            return;
          }
        }
        getWizard().getContainer().updateButtons();
      }
      public void widgetDefaultSelected(      SelectionEvent e){
      }
    }
);
  }
 catch (  Exception e1) {
    MantisCorePlugin.log(e1);
  }
}","public void createControl(Composite parent){
  Composite control=new Composite(parent,SWT.NONE);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,false,false);
  control.setLayoutData(gd);
  GridLayout layout=new GridLayout(1,false);
  control.setLayout(layout);
  projectCombo=new Combo(control,SWT.READ_ONLY);
  projectCombo.add(""String_Node_Str"");
  setControl(projectCombo);
  try {
    MantisRepositoryConnector connector=(MantisRepositoryConnector)TasksUi.getRepositoryManager().getRepositoryConnector(MantisCorePlugin.REPOSITORY_KIND);
    IMantisClient client=connector.getClientManager().getRepository(taskRepository);
    for (    MantisProject pd : client.getProjects())     projectCombo.add(pd.getName());
    projectCombo.setText(projectCombo.getItem(0));
    projectCombo.addSelectionListener(new SelectionListener(){
      public void widgetSelected(      SelectionEvent e){
        if (projectCombo.getSelectionIndex() > 0) {
          TaskAttribute attribute=taskData.getRoot().getAttribute(Key.PROJECT.getKey());
          attribute.setValue(projectCombo.getText());
          final MantisRepositoryConnector connector=(MantisRepositoryConnector)TasksUi.getRepositoryManager().getRepositoryConnector(MantisCorePlugin.REPOSITORY_KIND);
          try {
            getContainer().run(false,true,new IRunnableWithProgress(){
              public void run(              IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
                try {
                  MantisTaskDataHandler.createProjectSpecificAttributes(taskData,connector.getClientManager().getRepository(taskRepository),monitor);
                }
 catch (                MalformedURLException e) {
                  throw new InvocationTargetException(e);
                }
              }
            }
);
          }
 catch (          InvocationTargetException ex) {
            MantisUIPlugin.handleMantisException(ex);
            return;
          }
catch (          InterruptedException ex) {
            MantisUIPlugin.handleMantisException(ex);
            return;
          }
        }
        getWizard().getContainer().updateButtons();
      }
      public void widgetDefaultSelected(      SelectionEvent e){
      }
    }
);
  }
 catch (  Exception e1) {
    MantisCorePlugin.log(e1);
  }
}"
81506,"/** 
 */
@Override public DataTableSpec[] configure(DataTableSpec[] in) throws InvalidSettingsException {
  DataTableSpec tSpec=in[0];
  SettingsModelString columnModelSetting=(SettingsModelString)getModelSetting(CFG_ConcentrationColumn);
  String conColumn=columnModelSetting.getStringValue();
  if (conColumn == null) {
    conColumn=tryAutoGuessingConcentrationColumn(tSpec);
    ((SettingsModelString)this.getModelSetting(CFG_ConcentrationColumn)).setStringValue(conColumn);
  }
  if (!tSpec.containsName(conColumn))   throw new InvalidSettingsException(""String_Node_Str"" + conColumn + ""String_Node_Str"");
  int idCol=tSpec.findColumnIndex(conColumn);
  DataColumnSpec cSpec=tSpec.getColumnSpec(idCol);
  if (checkForDataType(cSpec) == 1) {
    if (cSpec.getDomain() != null) {
      Set<DataCell> domVals=cSpec.getDomain().getValues();
      if (domVals != null) {
        int nNumericStrings=0;
        for (        DataCell cell : domVals) {
          try {
            Double.parseDouble(((StringValue)cell).getStringValue());
            nNumericStrings++;
          }
 catch (          NumberFormatException e) {
          }
        }
        if (nNumericStrings == 0) {
          throw new InvalidSettingsException(""String_Node_Str"");
        }
      }
    }
  }
 else {
    DataColumnDomain domain=tSpec.getColumnSpec(idCol).getDomain();
    if (domain != null) {
      double lower=((DoubleValue)domain.getLowerBound()).getDoubleValue();
      if (lower < 0) {
        throw new InvalidSettingsException(""String_Node_Str"");
      }
    }
  }
  ColumnRearranger c=createColumnRearranger(in[0],idCol,null,new double[2],checkForDataType(tSpec.getColumnSpec(idCol)),null,null);
  if (((SettingsModelBoolean)getModelSetting(CFG_deleteSouceCol)).getBooleanValue() == true) {
    c.remove(idCol);
  }
  DataTableSpec result=c.createSpec();
  return new DataTableSpec[]{result};
}","/** 
 */
@Override public DataTableSpec[] configure(DataTableSpec[] in) throws InvalidSettingsException {
  DataTableSpec tSpec=in[0];
  SettingsModelString columnModelSetting=(SettingsModelString)getModelSetting(CFG_ConcentrationColumn);
  String conColumn=columnModelSetting.getStringValue();
  if (conColumn == null) {
    conColumn=tryAutoGuessingConcentrationColumn(tSpec);
    ((SettingsModelString)this.getModelSetting(CFG_ConcentrationColumn)).setStringValue(conColumn);
  }
  if (!tSpec.containsName(conColumn))   throw new InvalidSettingsException(""String_Node_Str"" + conColumn + ""String_Node_Str"");
  int idCol=tSpec.findColumnIndex(conColumn);
  DataColumnSpec cSpec=tSpec.getColumnSpec(idCol);
  if (checkForDataType(cSpec) == 1) {
    if (cSpec.getDomain() != null) {
      Set<DataCell> domVals=cSpec.getDomain().getValues();
      if (domVals != null) {
        int nNumericStrings=0;
        for (        DataCell cell : domVals) {
          try {
            Double.parseDouble(((StringValue)cell).getStringValue());
            nNumericStrings++;
          }
 catch (          NumberFormatException e) {
          }
        }
        if (nNumericStrings == 0) {
          throw new InvalidSettingsException(""String_Node_Str"");
        }
      }
    }
  }
 else {
    DataColumnDomain domain=tSpec.getColumnSpec(idCol).getDomain();
    if (domain != null) {
      if (domain.getLowerBound() != null) {
        double lower=((DoubleValue)domain.getLowerBound()).getDoubleValue();
        if (lower < 0) {
          throw new InvalidSettingsException(""String_Node_Str"");
        }
      }
    }
  }
  ColumnRearranger c=createColumnRearranger(in[0],idCol,null,new double[2],checkForDataType(tSpec.getColumnSpec(idCol)),null,null);
  if (((SettingsModelBoolean)getModelSetting(CFG_deleteSouceCol)).getBooleanValue() == true) {
    c.remove(idCol);
  }
  DataTableSpec result=c.createSpec();
  return new DataTableSpec[]{result};
}"
81507,"public String getGroup(String groupKey){
  if (barcodeMatcher.groupIndex(groupKey) == 0)   return null;
  return barcodeMatcher.group(groupKey).trim();
}","public String getGroup(String groupKey){
  doesMatchPattern();
  if (barcodeMatcher.groupIndex(groupKey) == 0)   return null;
  return barcodeMatcher.group(groupKey).trim();
}"
81508,"public Map<String,String> namedGroups(){
  Map<String,String> result=new LinkedHashMap<String,String>();
  for (int i=1; i <= groupCount(); i++) {
    String groupName=parentPattern.groupNames().get(i - 1);
    String groupValue=matcher.group(i);
    result.put(groupName,groupValue);
  }
  return result;
}","public Map<String,String> namedGroups(){
  Map<String,String> result=new LinkedHashMap<String,String>();
  matches();
  for (int i=1; i <= groupCount(); i++) {
    String groupName=parentPattern.groupNames().get(i - 1);
    String groupValue=matcher.group(i);
    result.put(groupName,groupValue);
  }
  return result;
}"
81509,"/** 
 * Constructor for the node model.
 */
protected EchoFileReaderNodeModel(){
  super(0,2,true);
  addModelSetting(EchoFileReaderNodeModel.CFG_FILE_URL,createFileURL());
  addModelSetting(EchoFileReaderNodeModel.CFG_FlowVariable,createFlowVariable());
  addModelSetting(EchoFileReaderNodeModel.CFG_splitDestinationCol,createSplitDestinationCol());
  addModelSetting(EchoFileReaderNodeModel.CFG_splitSourceCol,createSplitSourceCol());
}","/** 
 * Constructor for the node model.
 */
protected EchoFileReaderNodeModel(){
  super(0,2,true);
  addModelSetting(EchoFileReaderNodeModel.CFG_FILE_URL,createFileURL());
  addModelSetting(EchoFileReaderNodeModel.CFG_splitDestinationCol,createSplitDestinationCol());
  addModelSetting(EchoFileReaderNodeModel.CFG_splitSourceCol,createSplitSourceCol());
}"
81510,"/** 
 * {@inheritDoc}
 */
@Override protected BufferedDataTable[] execute(final BufferedDataTable[] inData,final ExecutionContext exec) throws Exception {
  String xml_file=null;
  if (getModelSetting(CFG_FILE_URL) != null) {
    xml_file=((SettingsModelString)getModelSetting(CFG_FILE_URL)).getStringValue();
  }
  if (getModelSetting(CFG_FILE_URL) == null) {
    throw new InvalidSettingsException(""String_Node_Str"");
  }
  if (xml_file.isEmpty() || xml_file.length() == 0) {
    throw new InvalidSettingsException(""String_Node_Str"");
  }
  DefaultHandler handler=new ParseXML();
  SAXParserFactory factory=SAXParserFactory.newInstance();
  factory.setValidating(false);
  SAXParser parser=factory.newSAXParser();
  parser.parse(xml_file,handler);
  int nrColumns=0;
  if (((SettingsModelBoolean)getModelSetting(CFG_splitSourceCol)).getBooleanValue() && ((SettingsModelBoolean)getModelSetting(CFG_splitDestinationCol)).getBooleanValue() == true) {
    nrColumns=17;
  }
 else   if (((SettingsModelBoolean)getModelSetting(CFG_splitSourceCol)).getBooleanValue() == true) {
    nrColumns=15;
  }
 else   if (((SettingsModelBoolean)getModelSetting(CFG_splitDestinationCol)).getBooleanValue() == true) {
    nrColumns=15;
  }
 else {
    nrColumns=13;
  }
  List<Attribute> colAttributes=getEchoColumnModel();
  BufferedDataContainer buf=exec.createDataContainer(AttributeUtils.compileTableSpecs(colAttributes));
  DataCell[] cells=new DataCell[nrColumns];
  setWarningMessage(""String_Node_Str"" + EchoReportRecords.records.size());
  int counter=0;
  for (  EchoReportRecords r : EchoReportRecords.records) {
    cells[0]=new StringCell(r.getSrcPlateName());
    cells[1]=new StringCell(r.getSrcPlateBarcode());
    cells[2]=new StringCell(r.getSrcWell());
    cells[3]=new StringCell(r.getDestPlateName());
    cells[4]=new StringCell(r.getDestPlateBarcode());
    cells[5]=new StringCell(r.getDestWell());
    cells[6]=new StringCell(r.getXferVol());
    cells[7]=new StringCell(r.getActualVol());
    cells[8]=new StringCell(r.getCurrentFluidVolume());
    cells[9]=new StringCell(r.getFluidComposition());
    cells[10]=new StringCell(r.getFluidUnits());
    cells[11]=new StringCell(r.getFluidType());
    cells[12]=new StringCell(r.getXferStatus());
    int index=12;
    if (((SettingsModelBoolean)getModelSetting(CFG_splitSourceCol)).getBooleanValue() == true) {
      String[] parts=splitPosition(r.getSrcWell());
      cells[index + 1]=new StringCell(parts[0]);
      cells[index + 2]=new StringCell(parts[1]);
      index=index + 2;
    }
    if (((SettingsModelBoolean)getModelSetting(CFG_splitDestinationCol)).getBooleanValue() == true) {
      String[] parts=splitPosition(r.getDestWell());
      cells[index + 1]=new StringCell(parts[0]);
      cells[index + 2]=new StringCell(parts[1]);
    }
    DataRow row=new DefaultRow(""String_Node_Str"" + counter,cells);
    buf.addRowToTable(row);
    counter++;
  }
  buf.close();
  BufferedDataTable table=buf.getTable();
  int meta_nrColumns=10;
  List<Attribute> colAttributes1=getMetaDataColumnModel();
  BufferedDataContainer buf1=exec.createDataContainer(AttributeUtils.compileTableSpecs(colAttributes1));
  DataCell[] cells1=new DataCell[meta_nrColumns];
  setWarningMessage(""String_Node_Str"" + EchoReportHeader.headers.size());
  int counter1=0;
  for (  EchoReportHeader rh : EchoReportHeader.headers) {
    cells1[0]=new StringCell(rh.getRunID());
    cells1[1]=new StringCell(rh.getRunDateTime());
    cells1[2]=new StringCell(rh.getAppName());
    cells1[3]=new StringCell(rh.getAppVersion());
    cells1[4]=new StringCell(rh.getProtocolName());
    cells1[5]=new StringCell(rh.getUserName());
  }
  for (  EchoReportFooter rf : EchoReportFooter.footers) {
    cells1[6]=new StringCell(rf.getInstrName());
    cells1[7]=new StringCell(rf.getInstrModel());
    cells1[8]=new StringCell(rf.getInstrSN());
    cells1[9]=new StringCell(rf.getInstrSWVersion());
    DataRow row=new DefaultRow(""String_Node_Str"" + counter1,cells1);
    buf1.addRowToTable(row);
    counter1++;
  }
  buf1.close();
  BufferedDataTable table1=buf1.getTable();
  return new BufferedDataTable[]{table,table1};
}","/** 
 * {@inheritDoc}
 */
@Override protected BufferedDataTable[] execute(final BufferedDataTable[] inData,final ExecutionContext exec) throws Exception {
  String xml_file=null;
  if (getModelSetting(CFG_FILE_URL) != null) {
    xml_file=((SettingsModelString)getModelSetting(CFG_FILE_URL)).getStringValue();
  }
  if (getModelSetting(CFG_FILE_URL) == null) {
    throw new InvalidSettingsException(""String_Node_Str"");
  }
  if (xml_file.isEmpty() || xml_file.length() == 0) {
    throw new InvalidSettingsException(""String_Node_Str"");
  }
  ParseXML handler=new ParseXML();
  SAXParserFactory factory=SAXParserFactory.newInstance();
  factory.setValidating(false);
  SAXParser parser=factory.newSAXParser();
  parser.parse(xml_file,handler);
  int nrColumns=0;
  if (((SettingsModelBoolean)getModelSetting(CFG_splitSourceCol)).getBooleanValue() && ((SettingsModelBoolean)getModelSetting(CFG_splitDestinationCol)).getBooleanValue() == true) {
    nrColumns=17;
  }
 else   if (((SettingsModelBoolean)getModelSetting(CFG_splitSourceCol)).getBooleanValue() == true) {
    nrColumns=15;
  }
 else   if (((SettingsModelBoolean)getModelSetting(CFG_splitDestinationCol)).getBooleanValue() == true) {
    nrColumns=15;
  }
 else {
    nrColumns=13;
  }
  List<Attribute> colAttributes=getEchoColumnModel();
  BufferedDataContainer buf=exec.createDataContainer(AttributeUtils.compileTableSpecs(colAttributes));
  DataCell[] cells=new DataCell[nrColumns];
  int counter=0;
  for (  EchoRecord r : handler.getRecords()) {
    cells[0]=new StringCell(r.getSrcPlateName());
    cells[1]=new StringCell(r.getSrcPlateBarcode());
    cells[2]=new StringCell(r.getSrcWell());
    cells[3]=new StringCell(r.getDestPlateName());
    cells[4]=new StringCell(r.getDestPlateBarcode());
    cells[5]=new StringCell(r.getDestWell());
    cells[6]=new StringCell(r.getXferVol());
    cells[7]=new StringCell(r.getActualVol());
    cells[8]=new StringCell(r.getCurrentFluidVolume());
    cells[9]=new StringCell(r.getFluidComposition());
    cells[10]=new StringCell(r.getFluidUnits());
    cells[11]=new StringCell(r.getFluidType());
    cells[12]=new StringCell(r.getXferStatus());
    int index=12;
    if (((SettingsModelBoolean)getModelSetting(CFG_splitSourceCol)).getBooleanValue() == true) {
      String[] parts=splitPosition(r.getSrcWell());
      cells[index + 1]=new StringCell(parts[0]);
      cells[index + 2]=new StringCell(parts[1]);
      index=index + 2;
    }
    if (((SettingsModelBoolean)getModelSetting(CFG_splitDestinationCol)).getBooleanValue() == true) {
      String[] parts=splitPosition(r.getDestWell());
      cells[index + 1]=new StringCell(parts[0]);
      cells[index + 2]=new StringCell(parts[1]);
    }
    DataRow row=new DefaultRow(""String_Node_Str"" + counter,cells);
    buf.addRowToTable(row);
    counter++;
  }
  buf.close();
  BufferedDataTable table=buf.getTable();
  int meta_nrColumns=10;
  List<Attribute> colAttributes1=getMetaDataColumnModel();
  BufferedDataContainer buf1=exec.createDataContainer(AttributeUtils.compileTableSpecs(colAttributes1));
  DataCell[] cells1=new DataCell[meta_nrColumns];
  EchoReportHeader rh=handler.getReportHeader();
  EchoReportFooter rf=handler.getReportFooter();
  cells1[0]=new StringCell(rh.getRunID());
  cells1[1]=new StringCell(rh.getRunDateTime());
  cells1[2]=new StringCell(rh.getAppName());
  cells1[3]=new StringCell(rh.getAppVersion());
  cells1[4]=new StringCell(rh.getProtocolName());
  cells1[5]=new StringCell(rh.getUserName());
  cells1[6]=new StringCell(rf.getInstrName());
  cells1[7]=new StringCell(rf.getInstrModel());
  cells1[8]=new StringCell(rf.getInstrSN());
  cells1[9]=new StringCell(rf.getInstrSWVersion());
  DataRow row=new DefaultRow(RowKey.createRowKey((long)1),cells1);
  buf1.addRowToTable(row);
  buf1.close();
  BufferedDataTable table1=buf1.getTable();
  return new BufferedDataTable[]{table,table1};
}"
81511,"/** 
 */
@Override public DataTableSpec[] configure(DataTableSpec[] in) throws InvalidSettingsException {
  DataTableSpec tSpec=in[0];
  SettingsModelString columnModelSetting=(SettingsModelString)getModelSetting(CFG_ConcentrationColumn);
  String conColumn=columnModelSetting.getStringValue();
  if (conColumn == null) {
    conColumn=tryAutoGuessingConcentrationColumn(tSpec);
    ((SettingsModelString)this.getModelSetting(CFG_ConcentrationColumn)).setStringValue(conColumn);
  }
  if (!tSpec.containsName(conColumn))   throw new InvalidSettingsException(""String_Node_Str"" + conColumn + ""String_Node_Str"");
  int idCol=tSpec.findColumnIndex(conColumn);
  DataColumnSpec cSpec=tSpec.getColumnSpec(idCol);
  if (checkForDataType(cSpec) == 1) {
    if (cSpec.getDomain() != null) {
      Set<DataCell> domVals=cSpec.getDomain().getValues();
      if (domVals != null) {
        int nNumericStrings=0;
        for (        DataCell cell : domVals) {
          try {
            Double.parseDouble(((StringValue)cell).getStringValue());
            nNumericStrings++;
          }
 catch (          NumberFormatException e) {
          }
        }
        if (nNumericStrings == 0) {
          throw new InvalidSettingsException(""String_Node_Str"");
        }
      }
    }
  }
 else {
    DataColumnDomain domain=tSpec.getColumnSpec(idCol).getDomain();
    if (domain != null) {
      double lower=((DoubleValue)domain.getLowerBound()).getDoubleValue();
      if (lower <= 0) {
        throw new InvalidSettingsException(""String_Node_Str"");
      }
    }
  }
  ColumnRearranger c=createColumnRearranger(in[0],idCol,null,new double[2],checkForDataType(tSpec.getColumnSpec(idCol)),null,null);
  if (((SettingsModelBoolean)getModelSetting(CFG_deleteSouceCol)).getBooleanValue() == true) {
    c.remove(idCol);
  }
  DataTableSpec result=c.createSpec();
  return new DataTableSpec[]{result};
}","/** 
 */
@Override public DataTableSpec[] configure(DataTableSpec[] in) throws InvalidSettingsException {
  DataTableSpec tSpec=in[0];
  SettingsModelString columnModelSetting=(SettingsModelString)getModelSetting(CFG_ConcentrationColumn);
  String conColumn=columnModelSetting.getStringValue();
  if (conColumn == null) {
    conColumn=tryAutoGuessingConcentrationColumn(tSpec);
    ((SettingsModelString)this.getModelSetting(CFG_ConcentrationColumn)).setStringValue(conColumn);
  }
  if (!tSpec.containsName(conColumn))   throw new InvalidSettingsException(""String_Node_Str"" + conColumn + ""String_Node_Str"");
  int idCol=tSpec.findColumnIndex(conColumn);
  DataColumnSpec cSpec=tSpec.getColumnSpec(idCol);
  if (checkForDataType(cSpec) == 1) {
    if (cSpec.getDomain() != null) {
      Set<DataCell> domVals=cSpec.getDomain().getValues();
      if (domVals != null) {
        int nNumericStrings=0;
        for (        DataCell cell : domVals) {
          try {
            Double.parseDouble(((StringValue)cell).getStringValue());
            nNumericStrings++;
          }
 catch (          NumberFormatException e) {
          }
        }
        if (nNumericStrings == 0) {
          throw new InvalidSettingsException(""String_Node_Str"");
        }
      }
    }
  }
 else {
    DataColumnDomain domain=tSpec.getColumnSpec(idCol).getDomain();
    if (domain != null) {
      double lower=((DoubleValue)domain.getLowerBound()).getDoubleValue();
      if (lower < 0) {
        throw new InvalidSettingsException(""String_Node_Str"");
      }
    }
  }
  ColumnRearranger c=createColumnRearranger(in[0],idCol,null,new double[2],checkForDataType(tSpec.getColumnSpec(idCol)),null,null);
  if (((SettingsModelBoolean)getModelSetting(CFG_deleteSouceCol)).getBooleanValue() == true) {
    c.remove(idCol);
  }
  DataTableSpec result=c.createSpec();
  return new DataTableSpec[]{result};
}"
81512,"/** 
 * ColumnRearranger to create output table
 */
private ColumnRearranger createColumnRearranger(DataTableSpec inSpec,final Integer idCol,final Integer idRow){
  ColumnRearranger rearranged_table=new ColumnRearranger(inSpec);
  DataColumnSpec newColSpec=new DataColumnSpecCreator(""String_Node_Str"",StringCell.TYPE).createSpec();
  String[] ColumnNames=inSpec.getColumnNames();
  CellFactory factory=new SingleCellFactory(newColSpec){
    public DataCell getCell(    DataRow row){
      DataCell dcell0=row.getCell(idCol);
      DataCell dcell1=row.getCell(idRow);
      String ConvData0=null;
      String ConvData1=null;
      String RowId=row.getKey().getString();
      if (dcell0.isMissing() || dcell1.isMissing()) {
        return DataType.getMissingCell();
      }
      if (dcell0.getType() == DoubleCell.TYPE || dcell0.getType() == IntCell.TYPE) {
        Integer ConvDataInt0=((IntValue)dcell0).getIntValue();
        if (ConvDataInt0 > TdsUtils.MAX_PLATE_COLUMN) {
          SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
          return DataType.getMissingCell();
        }
        ConvData0=ConvDataInt0.toString();
      }
 else {
        SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
        return DataType.getMissingCell();
      }
      if (dcell1.getType() == StringCell.TYPE) {
        ConvData1=((StringValue)dcell1).getStringValue();
        if (ConvData1.matches(""String_Node_Str"")) {
          ConvData1=ConvData1.toUpperCase();
        }
 else {
          SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
          return DataType.getMissingCell();
        }
      }
      if (dcell1.getType() == DoubleCell.TYPE || dcell1.getType() == IntCell.TYPE) {
        Double ConvDataDouble=((DoubleValue)dcell1).getDoubleValue();
        if (ConvDataDouble > TdsUtils.MAX_PLATE_ROW) {
          SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
          return DataType.getMissingCell();
        }
        try {
          Integer ConvDataInt=(int)ConvDataDouble.doubleValue();
          ConvData1=TdsUtils.mapPlateRowNumberToString(ConvDataInt);
          if (ConvData1 == null) {
            SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
            return DataType.getMissingCell();
          }
        }
 catch (        NumberFormatException e) {
          setWarningMessage(""String_Node_Str"" + dcell0.toString());
          return DataType.getMissingCell();
        }
catch (        NullPointerException e) {
          setWarningMessage(""String_Node_Str"" + dcell0.toString() + ""String_Node_Str"");
          return DataType.getMissingCell();
        }
catch (        IndexOutOfBoundsException e) {
          setWarningMessage(""String_Node_Str"" + dcell1.toString() + ""String_Node_Str"");
          return DataType.getMissingCell();
        }
      }
      if (((SettingsModelBoolean)getModelSetting(CFG_formateColumn)).getBooleanValue() == true) {
        if (ConvData1.length() == 1) {
          ConvData1=""String_Node_Str"" + ConvData1;
        }
        if (ConvData0.length() == 1) {
          return new StringCell(ConvData1.concat(""String_Node_Str"").concat(ConvData0));
        }
      }
      return new StringCell(ConvData1.concat(ConvData0));
    }
  }
;
  rearranged_table.append(factory);
  return rearranged_table;
}","/** 
 * ColumnRearranger to create output table
 */
private ColumnRearranger createColumnRearranger(DataTableSpec inSpec,final Integer idCol,final Integer idRow){
  ColumnRearranger rearranged_table=new ColumnRearranger(inSpec);
  DataColumnSpec newColSpec=new DataColumnSpecCreator(""String_Node_Str"",StringCell.TYPE).createSpec();
  String[] ColumnNames=inSpec.getColumnNames();
  CellFactory factory=new SingleCellFactory(newColSpec){
    public DataCell getCell(    DataRow row){
      DataCell dcell0=row.getCell(idCol);
      DataCell dcell1=row.getCell(idRow);
      String ConvData0=null;
      String ConvData1=null;
      String RowId=row.getKey().getString();
      if (dcell0.isMissing() || dcell1.isMissing()) {
        return DataType.getMissingCell();
      }
      if (dcell0.getType() == DoubleCell.TYPE || dcell0.getType() == IntCell.TYPE) {
        Integer ConvDataInt0=((IntValue)dcell0).getIntValue();
        if (ConvDataInt0 > TdsUtils.MAX_PLATE_COLUMN) {
          SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
          return DataType.getMissingCell();
        }
        ConvData0=ConvDataInt0.toString();
      }
 else {
        SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
        return DataType.getMissingCell();
      }
      if (dcell1.getType() == StringCell.TYPE) {
        ConvData1=((StringValue)dcell1).getStringValue();
        if (ConvData1.matches(""String_Node_Str"")) {
          ConvData1=ConvData1.toUpperCase();
        }
 else {
          SendWarning(1,dcell0.toString(),RowId,ColumnNames[idRow]);
          return DataType.getMissingCell();
        }
      }
      if (dcell1.getType() == DoubleCell.TYPE || dcell1.getType() == IntCell.TYPE) {
        Double ConvDataDouble=((DoubleValue)dcell1).getDoubleValue();
        if (ConvDataDouble > TdsUtils.MAX_PLATE_ROW) {
          SendWarning(1,dcell0.toString(),RowId,ColumnNames[idRow]);
          return DataType.getMissingCell();
        }
        try {
          Integer ConvDataInt=(int)ConvDataDouble.doubleValue();
          ConvData1=TdsUtils.mapPlateRowNumberToString(ConvDataInt);
          if (ConvData1 == null) {
            SendWarning(1,dcell0.toString(),RowId,ColumnNames[idRow]);
            return DataType.getMissingCell();
          }
        }
 catch (        NumberFormatException e) {
          setWarningMessage(""String_Node_Str"" + dcell0.toString());
          return DataType.getMissingCell();
        }
catch (        NullPointerException e) {
          setWarningMessage(""String_Node_Str"" + dcell0.toString() + ""String_Node_Str"");
          return DataType.getMissingCell();
        }
catch (        IndexOutOfBoundsException e) {
          setWarningMessage(""String_Node_Str"" + dcell1.toString() + ""String_Node_Str"");
          return DataType.getMissingCell();
        }
      }
      if (((SettingsModelBoolean)getModelSetting(CFG_formateColumn)).getBooleanValue() == true) {
        if (ConvData1.length() == 1) {
          ConvData1=""String_Node_Str"" + ConvData1;
        }
        if (ConvData0.length() == 1) {
          return new StringCell(ConvData1.concat(""String_Node_Str"").concat(ConvData0));
        }
      }
      return new StringCell(ConvData1.concat(ConvData0));
    }
  }
;
  rearranged_table.append(factory);
  return rearranged_table;
}"
81513,"public DataCell getCell(DataRow row){
  DataCell dcell0=row.getCell(idCol);
  DataCell dcell1=row.getCell(idRow);
  String ConvData0=null;
  String ConvData1=null;
  String RowId=row.getKey().getString();
  if (dcell0.isMissing() || dcell1.isMissing()) {
    return DataType.getMissingCell();
  }
  if (dcell0.getType() == DoubleCell.TYPE || dcell0.getType() == IntCell.TYPE) {
    Integer ConvDataInt0=((IntValue)dcell0).getIntValue();
    if (ConvDataInt0 > TdsUtils.MAX_PLATE_COLUMN) {
      SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
      return DataType.getMissingCell();
    }
    ConvData0=ConvDataInt0.toString();
  }
 else {
    SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
    return DataType.getMissingCell();
  }
  if (dcell1.getType() == StringCell.TYPE) {
    ConvData1=((StringValue)dcell1).getStringValue();
    if (ConvData1.matches(""String_Node_Str"")) {
      ConvData1=ConvData1.toUpperCase();
    }
 else {
      SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
      return DataType.getMissingCell();
    }
  }
  if (dcell1.getType() == DoubleCell.TYPE || dcell1.getType() == IntCell.TYPE) {
    Double ConvDataDouble=((DoubleValue)dcell1).getDoubleValue();
    if (ConvDataDouble > TdsUtils.MAX_PLATE_ROW) {
      SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
      return DataType.getMissingCell();
    }
    try {
      Integer ConvDataInt=(int)ConvDataDouble.doubleValue();
      ConvData1=TdsUtils.mapPlateRowNumberToString(ConvDataInt);
      if (ConvData1 == null) {
        SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
        return DataType.getMissingCell();
      }
    }
 catch (    NumberFormatException e) {
      setWarningMessage(""String_Node_Str"" + dcell0.toString());
      return DataType.getMissingCell();
    }
catch (    NullPointerException e) {
      setWarningMessage(""String_Node_Str"" + dcell0.toString() + ""String_Node_Str"");
      return DataType.getMissingCell();
    }
catch (    IndexOutOfBoundsException e) {
      setWarningMessage(""String_Node_Str"" + dcell1.toString() + ""String_Node_Str"");
      return DataType.getMissingCell();
    }
  }
  if (((SettingsModelBoolean)getModelSetting(CFG_formateColumn)).getBooleanValue() == true) {
    if (ConvData1.length() == 1) {
      ConvData1=""String_Node_Str"" + ConvData1;
    }
    if (ConvData0.length() == 1) {
      return new StringCell(ConvData1.concat(""String_Node_Str"").concat(ConvData0));
    }
  }
  return new StringCell(ConvData1.concat(ConvData0));
}","public DataCell getCell(DataRow row){
  DataCell dcell0=row.getCell(idCol);
  DataCell dcell1=row.getCell(idRow);
  String ConvData0=null;
  String ConvData1=null;
  String RowId=row.getKey().getString();
  if (dcell0.isMissing() || dcell1.isMissing()) {
    return DataType.getMissingCell();
  }
  if (dcell0.getType() == DoubleCell.TYPE || dcell0.getType() == IntCell.TYPE) {
    Integer ConvDataInt0=((IntValue)dcell0).getIntValue();
    if (ConvDataInt0 > TdsUtils.MAX_PLATE_COLUMN) {
      SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
      return DataType.getMissingCell();
    }
    ConvData0=ConvDataInt0.toString();
  }
 else {
    SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
    return DataType.getMissingCell();
  }
  if (dcell1.getType() == StringCell.TYPE) {
    ConvData1=((StringValue)dcell1).getStringValue();
    if (ConvData1.matches(""String_Node_Str"")) {
      ConvData1=ConvData1.toUpperCase();
    }
 else {
      SendWarning(1,dcell0.toString(),RowId,ColumnNames[idRow]);
      return DataType.getMissingCell();
    }
  }
  if (dcell1.getType() == DoubleCell.TYPE || dcell1.getType() == IntCell.TYPE) {
    Double ConvDataDouble=((DoubleValue)dcell1).getDoubleValue();
    if (ConvDataDouble > TdsUtils.MAX_PLATE_ROW) {
      SendWarning(1,dcell0.toString(),RowId,ColumnNames[idRow]);
      return DataType.getMissingCell();
    }
    try {
      Integer ConvDataInt=(int)ConvDataDouble.doubleValue();
      ConvData1=TdsUtils.mapPlateRowNumberToString(ConvDataInt);
      if (ConvData1 == null) {
        SendWarning(1,dcell0.toString(),RowId,ColumnNames[idRow]);
        return DataType.getMissingCell();
      }
    }
 catch (    NumberFormatException e) {
      setWarningMessage(""String_Node_Str"" + dcell0.toString());
      return DataType.getMissingCell();
    }
catch (    NullPointerException e) {
      setWarningMessage(""String_Node_Str"" + dcell0.toString() + ""String_Node_Str"");
      return DataType.getMissingCell();
    }
catch (    IndexOutOfBoundsException e) {
      setWarningMessage(""String_Node_Str"" + dcell1.toString() + ""String_Node_Str"");
      return DataType.getMissingCell();
    }
  }
  if (((SettingsModelBoolean)getModelSetting(CFG_formateColumn)).getBooleanValue() == true) {
    if (ConvData1.length() == 1) {
      ConvData1=""String_Node_Str"" + ConvData1;
    }
    if (ConvData0.length() == 1) {
      return new StringCell(ConvData1.concat(""String_Node_Str"").concat(ConvData0));
    }
  }
  return new StringCell(ConvData1.concat(ConvData0));
}"
81514,"/** 
 * ColumnRearranger to create output table
 */
private ColumnRearranger createColumnRearranger(DataTableSpec inSpec,final Integer idCol,final Integer idRow){
  ColumnRearranger rearranged_table=new ColumnRearranger(inSpec);
  DataColumnSpec newColSpec=new DataColumnSpecCreator(""String_Node_Str"",StringCell.TYPE).createSpec();
  String[] ColumnNames=inSpec.getColumnNames();
  CellFactory factory=new SingleCellFactory(newColSpec){
    public DataCell getCell(    DataRow row){
      DataCell dcell0=row.getCell(idCol);
      DataCell dcell1=row.getCell(idRow);
      String ConvData0=null;
      String ConvData1=null;
      String RowId=row.getKey().getString();
      if (dcell0.isMissing() || dcell1.isMissing()) {
        return DataType.getMissingCell();
      }
      if (dcell0.getType() == DoubleCell.TYPE || dcell0.getType() == IntCell.TYPE) {
        Integer ConvDataInt0=((IntValue)dcell0).getIntValue();
        if (ConvDataInt0 > TdsUtils.MAX_PLATE_COLUMN) {
          SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
          return DataType.getMissingCell();
        }
        ConvData0=ConvDataInt0.toString();
      }
 else {
        SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
        return DataType.getMissingCell();
      }
      if (dcell1.getType() == StringCell.TYPE) {
        ConvData1=((StringValue)dcell1).getStringValue();
        if (ConvData1.matches(""String_Node_Str"")) {
          ConvData1=ConvData1.toUpperCase();
        }
 else {
          SendWarning(1,dcell0.toString(),RowId,ColumnNames[idRow]);
          return DataType.getMissingCell();
        }
      }
      if (dcell1.getType() == DoubleCell.TYPE || dcell1.getType() == IntCell.TYPE) {
        Double ConvDataDouble=((DoubleValue)dcell1).getDoubleValue();
        if (ConvDataDouble > TdsUtils.MAX_PLATE_ROW) {
          SendWarning(1,dcell0.toString(),RowId,ColumnNames[idRow]);
          return DataType.getMissingCell();
        }
        try {
          Integer ConvDataInt=(int)ConvDataDouble.doubleValue();
          ConvData1=TdsUtils.mapPlateRowNumberToString(ConvDataInt);
          if (ConvData1 == null) {
            SendWarning(1,dcell0.toString(),RowId,ColumnNames[idRow]);
            return DataType.getMissingCell();
          }
        }
 catch (        NumberFormatException e) {
          setWarningMessage(""String_Node_Str"" + dcell0.toString());
          return DataType.getMissingCell();
        }
catch (        NullPointerException e) {
          setWarningMessage(""String_Node_Str"" + dcell0.toString() + ""String_Node_Str"");
          return DataType.getMissingCell();
        }
catch (        IndexOutOfBoundsException e) {
          setWarningMessage(""String_Node_Str"" + dcell1.toString() + ""String_Node_Str"");
          return DataType.getMissingCell();
        }
      }
      if (((SettingsModelBoolean)getModelSetting(CFG_formateColumn)).getBooleanValue() == true) {
        if (ConvData1.length() == 1) {
          ConvData1=""String_Node_Str"" + ConvData1;
        }
        if (ConvData0.length() == 1) {
          return new StringCell(ConvData1.concat(""String_Node_Str"").concat(ConvData0));
        }
      }
      return new StringCell(ConvData1.concat(ConvData0));
    }
  }
;
  rearranged_table.append(factory);
  return rearranged_table;
}","/** 
 * ColumnRearranger to create output table
 */
private ColumnRearranger createColumnRearranger(DataTableSpec inSpec,final Integer idCol,final Integer idRow){
  ColumnRearranger rearranged_table=new ColumnRearranger(inSpec);
  DataColumnSpec newColSpec=new DataColumnSpecCreator(""String_Node_Str"",StringCell.TYPE).createSpec();
  String[] ColumnNames=inSpec.getColumnNames();
  CellFactory factory=new SingleCellFactory(newColSpec){
    public DataCell getCell(    DataRow row){
      DataCell dcell0=row.getCell(idCol);
      DataCell dcell1=row.getCell(idRow);
      String ConvData0=null;
      String ConvData1=null;
      String RowId=row.getKey().getString();
      if (dcell0.isMissing() || dcell1.isMissing()) {
        return DataType.getMissingCell();
      }
      if (dcell0.getType() == DoubleCell.TYPE || dcell0.getType() == IntCell.TYPE) {
        Integer ConvDataInt0=null;
        if (dcell0.getType() == DoubleCell.TYPE) {
          Double ConvDataDouble=((DoubleValue)dcell0).getDoubleValue();
          ConvDataInt0=(int)ConvDataDouble.doubleValue();
        }
 else {
          ConvDataInt0=((IntValue)dcell0).getIntValue();
        }
        if (ConvDataInt0 > TdsUtils.MAX_PLATE_COLUMN) {
          SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
          return DataType.getMissingCell();
        }
        ConvData0=ConvDataInt0.toString();
      }
 else {
        SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
        return DataType.getMissingCell();
      }
      if (dcell1.getType() == StringCell.TYPE) {
        ConvData1=((StringValue)dcell1).getStringValue();
        if (ConvData1.matches(""String_Node_Str"")) {
          ConvData1=ConvData1.toUpperCase();
        }
 else {
          SendWarning(1,dcell0.toString(),RowId,ColumnNames[idRow]);
          return DataType.getMissingCell();
        }
      }
      if (dcell1.getType() == DoubleCell.TYPE || dcell1.getType() == IntCell.TYPE) {
        Double ConvDataDouble=((DoubleValue)dcell1).getDoubleValue();
        if (ConvDataDouble > TdsUtils.MAX_PLATE_ROW) {
          SendWarning(1,dcell0.toString(),RowId,ColumnNames[idRow]);
          return DataType.getMissingCell();
        }
        try {
          Integer ConvDataInt=(int)ConvDataDouble.doubleValue();
          ConvData1=TdsUtils.mapPlateRowNumberToString(ConvDataInt);
          if (ConvData1 == null) {
            SendWarning(1,dcell0.toString(),RowId,ColumnNames[idRow]);
            return DataType.getMissingCell();
          }
        }
 catch (        NumberFormatException e) {
          SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
          return DataType.getMissingCell();
        }
catch (        NullPointerException e) {
          setWarningMessage(""String_Node_Str"");
          return DataType.getMissingCell();
        }
catch (        IndexOutOfBoundsException e) {
          SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
          return DataType.getMissingCell();
        }
      }
      if (((SettingsModelBoolean)getModelSetting(CFG_formateColumn)).getBooleanValue() == true) {
        if (ConvData1.length() == 1) {
          ConvData1=""String_Node_Str"" + ConvData1;
        }
        if (ConvData0.length() == 1) {
          return new StringCell(ConvData1.concat(""String_Node_Str"").concat(ConvData0));
        }
      }
      return new StringCell(ConvData1.concat(ConvData0));
    }
  }
;
  rearranged_table.append(factory);
  return rearranged_table;
}"
81515,"public DataCell getCell(DataRow row){
  DataCell dcell0=row.getCell(idCol);
  DataCell dcell1=row.getCell(idRow);
  String ConvData0=null;
  String ConvData1=null;
  String RowId=row.getKey().getString();
  if (dcell0.isMissing() || dcell1.isMissing()) {
    return DataType.getMissingCell();
  }
  if (dcell0.getType() == DoubleCell.TYPE || dcell0.getType() == IntCell.TYPE) {
    Integer ConvDataInt0=((IntValue)dcell0).getIntValue();
    if (ConvDataInt0 > TdsUtils.MAX_PLATE_COLUMN) {
      SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
      return DataType.getMissingCell();
    }
    ConvData0=ConvDataInt0.toString();
  }
 else {
    SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
    return DataType.getMissingCell();
  }
  if (dcell1.getType() == StringCell.TYPE) {
    ConvData1=((StringValue)dcell1).getStringValue();
    if (ConvData1.matches(""String_Node_Str"")) {
      ConvData1=ConvData1.toUpperCase();
    }
 else {
      SendWarning(1,dcell0.toString(),RowId,ColumnNames[idRow]);
      return DataType.getMissingCell();
    }
  }
  if (dcell1.getType() == DoubleCell.TYPE || dcell1.getType() == IntCell.TYPE) {
    Double ConvDataDouble=((DoubleValue)dcell1).getDoubleValue();
    if (ConvDataDouble > TdsUtils.MAX_PLATE_ROW) {
      SendWarning(1,dcell0.toString(),RowId,ColumnNames[idRow]);
      return DataType.getMissingCell();
    }
    try {
      Integer ConvDataInt=(int)ConvDataDouble.doubleValue();
      ConvData1=TdsUtils.mapPlateRowNumberToString(ConvDataInt);
      if (ConvData1 == null) {
        SendWarning(1,dcell0.toString(),RowId,ColumnNames[idRow]);
        return DataType.getMissingCell();
      }
    }
 catch (    NumberFormatException e) {
      setWarningMessage(""String_Node_Str"" + dcell0.toString());
      return DataType.getMissingCell();
    }
catch (    NullPointerException e) {
      setWarningMessage(""String_Node_Str"" + dcell0.toString() + ""String_Node_Str"");
      return DataType.getMissingCell();
    }
catch (    IndexOutOfBoundsException e) {
      setWarningMessage(""String_Node_Str"" + dcell1.toString() + ""String_Node_Str"");
      return DataType.getMissingCell();
    }
  }
  if (((SettingsModelBoolean)getModelSetting(CFG_formateColumn)).getBooleanValue() == true) {
    if (ConvData1.length() == 1) {
      ConvData1=""String_Node_Str"" + ConvData1;
    }
    if (ConvData0.length() == 1) {
      return new StringCell(ConvData1.concat(""String_Node_Str"").concat(ConvData0));
    }
  }
  return new StringCell(ConvData1.concat(ConvData0));
}","public DataCell getCell(DataRow row){
  DataCell dcell0=row.getCell(idCol);
  DataCell dcell1=row.getCell(idRow);
  String ConvData0=null;
  String ConvData1=null;
  String RowId=row.getKey().getString();
  if (dcell0.isMissing() || dcell1.isMissing()) {
    return DataType.getMissingCell();
  }
  if (dcell0.getType() == DoubleCell.TYPE || dcell0.getType() == IntCell.TYPE) {
    Integer ConvDataInt0=null;
    if (dcell0.getType() == DoubleCell.TYPE) {
      Double ConvDataDouble=((DoubleValue)dcell0).getDoubleValue();
      ConvDataInt0=(int)ConvDataDouble.doubleValue();
    }
 else {
      ConvDataInt0=((IntValue)dcell0).getIntValue();
    }
    if (ConvDataInt0 > TdsUtils.MAX_PLATE_COLUMN) {
      SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
      return DataType.getMissingCell();
    }
    ConvData0=ConvDataInt0.toString();
  }
 else {
    SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
    return DataType.getMissingCell();
  }
  if (dcell1.getType() == StringCell.TYPE) {
    ConvData1=((StringValue)dcell1).getStringValue();
    if (ConvData1.matches(""String_Node_Str"")) {
      ConvData1=ConvData1.toUpperCase();
    }
 else {
      SendWarning(1,dcell0.toString(),RowId,ColumnNames[idRow]);
      return DataType.getMissingCell();
    }
  }
  if (dcell1.getType() == DoubleCell.TYPE || dcell1.getType() == IntCell.TYPE) {
    Double ConvDataDouble=((DoubleValue)dcell1).getDoubleValue();
    if (ConvDataDouble > TdsUtils.MAX_PLATE_ROW) {
      SendWarning(1,dcell0.toString(),RowId,ColumnNames[idRow]);
      return DataType.getMissingCell();
    }
    try {
      Integer ConvDataInt=(int)ConvDataDouble.doubleValue();
      ConvData1=TdsUtils.mapPlateRowNumberToString(ConvDataInt);
      if (ConvData1 == null) {
        SendWarning(1,dcell0.toString(),RowId,ColumnNames[idRow]);
        return DataType.getMissingCell();
      }
    }
 catch (    NumberFormatException e) {
      SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
      return DataType.getMissingCell();
    }
catch (    NullPointerException e) {
      setWarningMessage(""String_Node_Str"");
      return DataType.getMissingCell();
    }
catch (    IndexOutOfBoundsException e) {
      SendWarning(1,dcell0.toString(),RowId,ColumnNames[idCol]);
      return DataType.getMissingCell();
    }
  }
  if (((SettingsModelBoolean)getModelSetting(CFG_formateColumn)).getBooleanValue() == true) {
    if (ConvData1.length() == 1) {
      ConvData1=""String_Node_Str"" + ConvData1;
    }
    if (ConvData0.length() == 1) {
      return new StringCell(ConvData1.concat(""String_Node_Str"").concat(ConvData0));
    }
  }
  return new StringCell(ConvData1.concat(ConvData0));
}"
81516,"/** 
 * ColumnRearranger to create output table
 */
private ColumnRearranger createColumnRearranger(DataTableSpec inSpec,final Integer idCol,final Integer idRow){
  ColumnRearranger rearranged_table=new ColumnRearranger(inSpec);
  DataColumnSpec newColSpec=new DataColumnSpecCreator(""String_Node_Str"",StringCell.TYPE).createSpec();
  CellFactory factory=new SingleCellFactory(newColSpec){
    public DataCell getCell(    DataRow row){
      DataCell dcell0=row.getCell(idCol);
      DataCell dcell1=row.getCell(idRow);
      String ConvData0=dcell1.toString();
      if (dcell0.isMissing() || dcell1.isMissing()) {
        return DataType.getMissingCell();
      }
 else {
        try {
          Integer.parseInt(ConvData0);
          ConvData0=TdsUtils.mapPlateRowNumberToString(Integer.parseInt(ConvData0));
          if (ConvData0 == null) {
            setWarningMessage(""String_Node_Str"" + dcell0.toString() + ""String_Node_Str"");
            return DataType.getMissingCell();
          }
        }
 catch (        NumberFormatException e) {
        }
        String ConvData1=dcell0.toString();
        if (((SettingsModelBoolean)getModelSetting(CFG_formateColumn)).getBooleanValue() == true) {
          if (ConvData0.length() == 1) {
            ConvData0=""String_Node_Str"" + ConvData0;
          }
          if (ConvData1.length() == 1) {
            return new StringCell(ConvData0.concat(""String_Node_Str"").concat(ConvData1));
          }
        }
        return new StringCell(ConvData0.concat(ConvData1));
      }
    }
  }
;
  rearranged_table.append(factory);
  return rearranged_table;
}","/** 
 * ColumnRearranger to create output table
 */
private ColumnRearranger createColumnRearranger(DataTableSpec inSpec,final Integer idCol,final Integer idRow){
  ColumnRearranger rearranged_table=new ColumnRearranger(inSpec);
  DataColumnSpec newColSpec=new DataColumnSpecCreator(""String_Node_Str"",StringCell.TYPE).createSpec();
  CellFactory factory=new SingleCellFactory(newColSpec){
    public DataCell getCell(    DataRow row){
      DataCell dcell0=row.getCell(idCol);
      DataCell dcell1=row.getCell(idRow);
      String ConvData0=dcell0.toString();
      String ConvData1=dcell1.toString();
      if (dcell0.isMissing() || dcell1.isMissing()) {
        return DataType.getMissingCell();
      }
 else {
        try {
          if (Double.parseDouble(ConvData0) > 768) {
            setWarningMessage(""String_Node_Str"" + dcell0.toString() + ""String_Node_Str"");
            return DataType.getMissingCell();
          }
          if (ConvData1.matches(""String_Node_Str"")) {
          }
 else {
            Double ConvDataDouble=Double.parseDouble(ConvData1);
            Integer ConvDataINT=(int)ConvDataDouble.doubleValue();
            ConvData1=TdsUtils.mapPlateRowNumberToString(ConvDataINT);
            if (ConvData1 == null) {
              setWarningMessage(""String_Node_Str"" + dcell0.toString() + ""String_Node_Str"");
              return DataType.getMissingCell();
            }
          }
        }
 catch (        NumberFormatException e) {
          setWarningMessage(""String_Node_Str"" + dcell0.toString());
          return DataType.getMissingCell();
        }
catch (        NullPointerException e) {
          setWarningMessage(""String_Node_Str"" + dcell0.toString() + ""String_Node_Str"");
          return DataType.getMissingCell();
        }
catch (        IndexOutOfBoundsException e) {
          setWarningMessage(""String_Node_Str"" + dcell0.toString());
          return DataType.getMissingCell();
        }
        if (((SettingsModelBoolean)getModelSetting(CFG_formateColumn)).getBooleanValue() == true) {
          if (ConvData1.length() == 1) {
            ConvData1=""String_Node_Str"" + ConvData1;
          }
          if (ConvData0.length() == 1) {
            return new StringCell(ConvData1.concat(""String_Node_Str"").concat(ConvData0));
          }
        }
        return new StringCell(ConvData1.concat(ConvData0));
      }
    }
  }
;
  rearranged_table.append(factory);
  return rearranged_table;
}"
81517,"public DataCell getCell(DataRow row){
  DataCell dcell0=row.getCell(idCol);
  DataCell dcell1=row.getCell(idRow);
  String ConvData0=dcell1.toString();
  if (dcell0.isMissing() || dcell1.isMissing()) {
    return DataType.getMissingCell();
  }
 else {
    try {
      Integer.parseInt(ConvData0);
      ConvData0=TdsUtils.mapPlateRowNumberToString(Integer.parseInt(ConvData0));
      if (ConvData0 == null) {
        setWarningMessage(""String_Node_Str"" + dcell0.toString() + ""String_Node_Str"");
        return DataType.getMissingCell();
      }
    }
 catch (    NumberFormatException e) {
    }
    String ConvData1=dcell0.toString();
    if (((SettingsModelBoolean)getModelSetting(CFG_formateColumn)).getBooleanValue() == true) {
      if (ConvData0.length() == 1) {
        ConvData0=""String_Node_Str"" + ConvData0;
      }
      if (ConvData1.length() == 1) {
        return new StringCell(ConvData0.concat(""String_Node_Str"").concat(ConvData1));
      }
    }
    return new StringCell(ConvData0.concat(ConvData1));
  }
}","public DataCell getCell(DataRow row){
  DataCell dcell0=row.getCell(idCol);
  DataCell dcell1=row.getCell(idRow);
  String ConvData0=dcell0.toString();
  String ConvData1=dcell1.toString();
  if (dcell0.isMissing() || dcell1.isMissing()) {
    return DataType.getMissingCell();
  }
 else {
    try {
      if (Double.parseDouble(ConvData0) > 768) {
        setWarningMessage(""String_Node_Str"" + dcell0.toString() + ""String_Node_Str"");
        return DataType.getMissingCell();
      }
      if (ConvData1.matches(""String_Node_Str"")) {
      }
 else {
        Double ConvDataDouble=Double.parseDouble(ConvData1);
        Integer ConvDataINT=(int)ConvDataDouble.doubleValue();
        ConvData1=TdsUtils.mapPlateRowNumberToString(ConvDataINT);
        if (ConvData1 == null) {
          setWarningMessage(""String_Node_Str"" + dcell0.toString() + ""String_Node_Str"");
          return DataType.getMissingCell();
        }
      }
    }
 catch (    NumberFormatException e) {
      setWarningMessage(""String_Node_Str"" + dcell0.toString());
      return DataType.getMissingCell();
    }
catch (    NullPointerException e) {
      setWarningMessage(""String_Node_Str"" + dcell0.toString() + ""String_Node_Str"");
      return DataType.getMissingCell();
    }
catch (    IndexOutOfBoundsException e) {
      setWarningMessage(""String_Node_Str"" + dcell0.toString());
      return DataType.getMissingCell();
    }
    if (((SettingsModelBoolean)getModelSetting(CFG_formateColumn)).getBooleanValue() == true) {
      if (ConvData1.length() == 1) {
        ConvData1=""String_Node_Str"" + ConvData1;
      }
      if (ConvData0.length() == 1) {
        return new StringCell(ConvData1.concat(""String_Node_Str"").concat(ConvData0));
      }
    }
    return new StringCell(ConvData1.concat(ConvData0));
  }
}"
81518,"/** 
 * Configure Class for configuring and checking the input
 */
public DataTableSpec[] configure(DataTableSpec[] in) throws InvalidSettingsException {
  DataTableSpec tSpec=in[0];
  String plateColumn=null;
  if (getModelSetting(CFG_PlateColumn) != null) {
    plateColumn=((SettingsModelString)getModelSetting(CFG_PlateColumn)).getStringValue();
  }
  String plateRow=null;
  if (getModelSetting(CFG_PlateRow) != null) {
    plateRow=((SettingsModelString)getModelSetting(CFG_PlateRow)).getStringValue();
  }
  if (plateColumn == null) {
    List<String> guessedColums=tryAutoGuessingPlateColumns(tSpec);
    plateColumn=guessedColums.get(0);
    plateRow=guessedColums.get(1);
    ((SettingsModelString)this.getModelSetting(CFG_PlateColumn)).setStringValue(plateColumn);
    ((SettingsModelString)this.getModelSetting(CFG_PlateRow)).setStringValue(plateRow);
  }
  int idCol=tSpec.findColumnIndex(plateColumn);
  int idRow=tSpec.findColumnIndex(plateRow);
  ColumnRearranger rearranged_table=createColumnRearranger(in[0],idCol,idRow);
  DataTableSpec output_table=rearranged_table.createSpec();
  return new DataTableSpec[]{output_table};
}","/** 
 * Configure Class for configuring and checking the input
 */
public DataTableSpec[] configure(DataTableSpec[] in) throws InvalidSettingsException {
  DataTableSpec tSpec=in[0];
  String plateColumn=null;
  if (getModelSetting(CFG_PlateColumn) != null) {
    plateColumn=((SettingsModelString)getModelSetting(CFG_PlateColumn)).getStringValue();
  }
  String plateRow=null;
  if (getModelSetting(CFG_PlateRow) != null) {
    plateRow=((SettingsModelString)getModelSetting(CFG_PlateRow)).getStringValue();
  }
  if (plateColumn == null) {
    List<String> guessedColums=tryAutoGuessingPlateColumns(tSpec);
    plateColumn=guessedColums.get(0);
    plateRow=guessedColums.get(1);
    ((SettingsModelString)this.getModelSetting(CFG_PlateColumn)).setStringValue(plateColumn);
    ((SettingsModelString)this.getModelSetting(CFG_PlateRow)).setStringValue(plateRow);
  }
  int idCol=tSpec.findColumnIndex(plateColumn);
  int idRow=tSpec.findColumnIndex(plateRow);
  ColumnRearranger rearranged_table=createColumnRearranger(in[0],idCol,idRow);
  if (((SettingsModelBoolean)getModelSetting(CFG_deleteSouceCol)).getBooleanValue() == true) {
    rearranged_table.remove(idCol,idRow);
  }
  DataTableSpec output_table=rearranged_table.createSpec();
  return new DataTableSpec[]{output_table};
}"
81519,"private List<String> tryAutoGuessingPlateColumns(DataTableSpec tSpec) throws InvalidSettingsException {
  List<String> guessedColums=new ArrayList<String>();
  if (tSpec.containsName(CFG_PlateColumn_DFT)) {
    if (tSpec.getColumnSpec(CFG_PlateColumn_DFT).getType().isCompatible(DoubleValue.class)) {
      guessedColums.add(0,CFG_PlateColumn_DFT);
    }
  }
  if (tSpec.containsName(CFG_PlateRow_DFT)) {
    if (tSpec.getColumnSpec(CFG_PlateRow_DFT).getType().isCompatible(DoubleValue.class)) {
      guessedColums.add(1,CFG_PlateRow_DFT);
    }
  }
  String firstStringColumn=null;
  for (  String col : tSpec.getColumnNames()) {
    if (tSpec.getColumnSpec(col).getType().isCompatible(StringValue.class) || tSpec.getColumnSpec(col).getType().isCompatible(DoubleValue.class)) {
      if (col.contains(CFG_PlateColumn_DFT)) {
        guessedColums.add(0,CFG_PlateColumn_DFT);
      }
 else {
        firstStringColumn=col;
        break;
      }
      if (col.contains(CFG_PlateRow_DFT)) {
        guessedColums.add(1,CFG_PlateRow_DFT);
      }
 else       firstStringColumn=col;
      break;
    }
  }
  if (firstStringColumn == null) {
    throw new InvalidSettingsException(""String_Node_Str"");
  }
  return guessedColums;
}","/** 
 * Auto guessing for plate column and row in a data set 
 */
@SuppressWarnings(""String_Node_Str"") private List<String> tryAutoGuessingPlateColumns(DataTableSpec tSpec) throws InvalidSettingsException {
  List<String> guessedColums=new ArrayList<String>();
  if (tSpec.containsName(CFG_PlateColumn_DFT)) {
    if (tSpec.getColumnSpec(CFG_PlateColumn_DFT).getType().isCompatible(DoubleValue.class)) {
      guessedColums.add(0,CFG_PlateColumn_DFT);
    }
  }
  if (tSpec.containsName(CFG_PlateRow_DFT)) {
    if (tSpec.getColumnSpec(CFG_PlateRow_DFT).getType().isCompatible(DoubleValue.class)) {
      guessedColums.add(1,CFG_PlateRow_DFT);
    }
  }
  for (  String col : tSpec.getColumnNames()) {
    if (tSpec.getColumnSpec(col).getType().isCompatible(StringValue.class) || tSpec.getColumnSpec(col).getType().isCompatible(DoubleValue.class)) {
      if (col.contains(CFG_PlateColumn_DFT)) {
        guessedColums.add(0,CFG_PlateColumn_DFT);
      }
 else {
        guessedColums.add(0,col);
      }
      if (col.contains(CFG_PlateRow_DFT)) {
        guessedColums.add(1,CFG_PlateRow_DFT);
      }
 else       guessedColums.add(1,col);
    }
  }
  if (guessedColums == null) {
    throw new InvalidSettingsException(""String_Node_Str"");
  }
  return guessedColums;
}"
81520,"/** 
 * SettingModel for the option to formate the content for better sorting
 */
static final SettingsModelBoolean createFormateColumn(){
  return new SettingsModelBoolean(CFG_formateColumn,false);
}","/** 
 * SettingModel for the option to formating the content for better sorting
 */
static final SettingsModelBoolean createFormateColumn(){
  return new SettingsModelBoolean(CFG_formateColumn,false);
}"
81521,"/** 
 * new table spec should insert columns after the index columns are defined by pattern groups,  data type dependent if group expects to be of a certain type
 * @param inSpec
 * @param pattern
 * @param bcIdx
 * @return
 */
private ColumnRearranger createColumnRearranger(DataTableSpec inSpec,final NamedPattern pattern,final int bcIdx,final int insertAt){
  final List<String> groupNames=pattern.groupNames();
  final int newColCount=groupNames.size();
  final DataColumnSpec[] newColSpecs=new DataColumnSpec[newColCount];
  final LinkedHashMap<String,DataType> typeMapping=new LinkedHashMap<String,DataType>();
  for (int i=0; i < newColCount; i++) {
    String group=groupNames.get(i);
    DataType dtype=StringCell.TYPE;
    if (BarcodeParser.longGroupNames.containsKey(group) && BarcodeParser.groupTypes.containsKey(group)) {
      dtype=getColumnType(group);
    }
    typeMapping.put(group,dtype);
    group=BarcodeParser.longGroupNames.get(group);
    String name=DataTableSpec.getUniqueColumnName(inSpec,group);
    newColSpecs[i]=new DataColumnSpecCreator(name,dtype).createSpec();
  }
  ColumnRearranger rearranger=new ColumnRearranger(inSpec);
  rearranger.insertAt(insertAt + 1,new AbstractCellFactory(newColSpecs){
    /** 
 * {@inheritDoc} 
 */
    @Override public DataCell[] getCells(    final DataRow row){
      DataCell[] result=new DataCell[newColCount];
      Arrays.fill(result,DataType.getMissingCell());
      DataCell c=row.getCell(bcIdx);
      if (c.isMissing()) {
        return result;
      }
      DataCellFactory cellFactory=new DataCellFactory();
      String s=((StringValue)c).getStringValue();
      BarcodeParser parser=new BarcodeParser(s,pattern);
      if (!parser.doesMatchPattern()) {
        Integer count=invalidBarcodes.get(s) == null ? 1 : invalidBarcodes.get(s) + 1;
        invalidBarcodes.put(s,count);
        return result;
      }
      int i=0;
      for (      String group : typeMapping.keySet()) {
        DataType dtype=typeMapping.get(group);
        String substring=parser.getGroup(group);
        result[i]=cellFactory.createDataCellOfType(dtype,substring);
        i++;
      }
      return result;
    }
  }
);
  return rearranger;
}","/** 
 * new table spec should insert columns after the index columns are defined by pattern groups,  data type dependent if group expects to be of a certain type
 * @param inSpec
 * @param pattern
 * @param bcIdx
 * @return
 */
private ColumnRearranger createColumnRearranger(DataTableSpec inSpec,final NamedPattern pattern,final int bcIdx,final int insertAt){
  final List<String> groupNames=pattern.groupNames();
  final int newColCount=groupNames.size();
  final DataColumnSpec[] newColSpecs=new DataColumnSpec[newColCount];
  final LinkedHashMap<String,DataType> typeMapping=new LinkedHashMap<String,DataType>();
  for (int i=0; i < newColCount; i++) {
    String group=groupNames.get(i);
    DataType dtype=StringCell.TYPE;
    typeMapping.put(group,dtype);
    if (BarcodeParser.longGroupNames.containsKey(group) && BarcodeParser.groupTypes.containsKey(group)) {
      group=BarcodeParser.longGroupNames.get(group);
    }
    String name=DataTableSpec.getUniqueColumnName(inSpec,group);
    newColSpecs[i]=new DataColumnSpecCreator(name,dtype).createSpec();
  }
  ColumnRearranger rearranger=new ColumnRearranger(inSpec);
  rearranger.insertAt(insertAt + 1,new AbstractCellFactory(newColSpecs){
    /** 
 * {@inheritDoc} 
 */
    @Override public DataCell[] getCells(    final DataRow row){
      DataCell[] result=new DataCell[newColCount];
      Arrays.fill(result,DataType.getMissingCell());
      DataCell c=row.getCell(bcIdx);
      if (c.isMissing()) {
        return result;
      }
      DataCellFactory cellFactory=new DataCellFactory();
      String s=((StringValue)c).getStringValue();
      BarcodeParser parser=new BarcodeParser(s,pattern);
      if (!parser.doesMatchPattern()) {
        Integer count=invalidBarcodes.get(s) == null ? 1 : invalidBarcodes.get(s) + 1;
        invalidBarcodes.put(s,count);
        return result;
      }
      int i=0;
      for (      String group : typeMapping.keySet()) {
        DataType dtype=typeMapping.get(group);
        String substring=parser.getGroup(group);
        result[i]=cellFactory.createDataCellOfType(dtype,substring);
        i++;
      }
      return result;
    }
  }
);
  return rearranger;
}"
81522,"private double[] findMinMax(BufferedDataTable inTable,int idCol){
  double[] MinMax=new double[2];
  double maxTrailing=0;
  double maxLeading=Double.NEGATIVE_INFINITY;
  for (  DataRow row : inTable) {
    double newValue=((DoubleValue)row.getCell(idCol)).getDoubleValue();
    if (newValue > maxLeading)     maxLeading=newValue;
    double[] splitted=getLength(newValue);
    if (splitted[1] > maxTrailing) {
      maxTrailing=splitted[1];
    }
  }
  double[] Leading=new double[2];
  Leading=getLength(maxLeading);
  MinMax[0]=Leading[0];
  MinMax[1]=maxTrailing;
  return MinMax;
}","private double[] findMinMax(BufferedDataTable inTable,int idCol){
  double[] MinMax=new double[2];
  double maxTrailing=0;
  double maxLeading=Double.NEGATIVE_INFINITY;
  for (  DataRow row : inTable) {
    if (row.getCell(idCol).isMissing()) {
      break;
    }
    double newValue=((DoubleValue)row.getCell(idCol)).getDoubleValue();
    if (newValue > maxLeading)     maxLeading=newValue;
    double[] splitted=getLength(newValue);
    if (splitted[1] > maxTrailing) {
      maxTrailing=splitted[1];
    }
  }
  double[] Leading=new double[2];
  Leading=getLength(maxLeading);
  MinMax[0]=Leading[0];
  MinMax[1]=maxTrailing;
  return MinMax;
}"
81523,"@Override protected DataCell getResultInternal(){
  IPreferenceStore prefStore=HCSToolsBundleActivator.getDefault().getPreferenceStore();
  double madScalingFactor=prefStore.getDouble(HCSToolsPreferenceInitializer.MAD_SCALING_FACTOR);
  if (super.getResultInternal().isMissing())   return super.getResultInternal();
  final List<DataCell> cells=super.getCells();
  ExtDescriptiveStats stats=new ExtDescriptiveStats();
  stats.setMadImpl(new MadStatistic(madScalingFactor));
  for (  DataCell dc : cells) {
    double val=((DoubleCell)dc).getDoubleValue();
    stats.addValue(val);
  }
  try {
    return new DoubleCell(stats.getMad());
  }
 catch (  IllegalMadFactorException e) {
    return new DoubleCell(Double.NaN);
  }
}","@Override protected DataCell getResultInternal(){
  IPreferenceStore prefStore=HCSToolsBundleActivator.getDefault().getPreferenceStore();
  double madScalingFactor=prefStore.getDouble(HCSToolsPreferenceInitializer.MAD_SCALING_FACTOR);
  if (super.getResultInternal().isMissing())   return super.getResultInternal();
  final List<DataCell> cells=super.getCells();
  ExtDescriptiveStats stats=new ExtDescriptiveStats();
  stats.setMadImpl(new MadStatistic(madScalingFactor));
  for (  DataCell dc : cells) {
    double val=((DoubleValue)dc).getDoubleValue();
    stats.addValue(val);
  }
  try {
    return new DoubleCell(stats.getMad());
  }
 catch (  IllegalMadFactorException e) {
    return new DoubleCell(Double.NaN);
  }
}"
81524,"@Override protected DataCell getResultInternal(){
  IPreferenceStore prefStore=HCSToolsBundleActivator.getDefault().getPreferenceStore();
  double madScalingFactor=prefStore.getDouble(HCSToolsPreferenceInitializer.MAD_SCALING_FACTOR);
  if (super.getResultInternal().isMissing())   return super.getResultInternal();
  final List<DataCell> cells=super.getCells();
  ExtDescriptiveStats stats=new ExtDescriptiveStats();
  stats.setMadImpl(new MadStatistic(madScalingFactor));
  for (  DataCell dc : cells) {
    double val=((DoubleCell)dc).getDoubleValue();
    stats.addValue(val);
  }
  try {
    return new DoubleCell(stats.getMad());
  }
 catch (  IllegalMadFactorException e) {
    return new DoubleCell(Double.NaN);
  }
}","@Override protected DataCell getResultInternal(){
  IPreferenceStore prefStore=HCSToolsBundleActivator.getDefault().getPreferenceStore();
  double madScalingFactor=prefStore.getDouble(HCSToolsPreferenceInitializer.MAD_SCALING_FACTOR);
  if (super.getResultInternal().isMissing())   return super.getResultInternal();
  final List<DataCell> cells=super.getCells();
  ExtDescriptiveStats stats=new ExtDescriptiveStats();
  stats.setMadImpl(new MadStatistic(madScalingFactor));
  for (  DataCell dc : cells) {
    double val=((DoubleValue)dc).getDoubleValue();
    stats.addValue(val);
  }
  try {
    return new DoubleCell(stats.getMad());
  }
 catch (  IllegalMadFactorException e) {
    return new DoubleCell(Double.NaN);
  }
}"
81525,"/** 
 * Action to control the flag for the global color scale for the heatmaps
 * @param event fired by the menu item
 */
private void globalScalingAction(ActionEvent event){
  JCheckBoxMenuItem item=(JCheckBoxMenuItem)event.getSource();
  if (heatTrellis.plateViewers.isEmpty()) {
    heatMapModel.setGlobalScaling(item.isSelected());
    return;
  }
  Object[] options={""String_Node_Str"",""String_Node_Str""};
  int optionIndex=JOptionPane.showOptionDialog(getTopLevelAncestor(),""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[1]);
  if (optionIndex == 0) {
    item.setSelected(heatMapModel.isGlobalScaling());
  }
 else {
    heatMapModel.setGlobalScaling(item.isSelected());
    heatTrellis.closePlateViewers();
  }
}","/** 
 * Action to control the flag for the global color scale for the heatmaps
 * @param event fired by the menu item
 */
private void globalScalingAction(ActionEvent event){
  JCheckBoxMenuItem item=(JCheckBoxMenuItem)event.getSource();
  if (heatTrellis.plateViewers.isEmpty()) {
    heatMapModel.setGlobalScaling(item.isSelected());
    heatMapModel.fireModelChanged();
    return;
  }
  Object[] options={""String_Node_Str"",""String_Node_Str""};
  int optionIndex=JOptionPane.showOptionDialog(getTopLevelAncestor(),""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[1]);
  if (optionIndex == 0) {
    item.setSelected(heatMapModel.isGlobalScaling());
  }
 else {
    heatMapModel.setGlobalScaling(item.isSelected());
    heatTrellis.closePlateViewers();
    heatMapModel.fireModelChanged();
  }
}"
81526,"@Override public void modelChanged(){
  this.colorMapMenu.setEnabled(!heatMapModel.isGlobalScaling());
  this.markSelection.setSelected(heatMapModel.doMarkSelection());
  this.overlayHider.setSelected(this.heatMapModel.doHideMostFreqOverlay());
  if ((heatMapModel != null) && heatMapModel.getReadoutRescaleStrategy().getClass().equals(MinMaxStrategy.class)) {
    this.outlierHandlingMenu.getItem(0).setSelected(true);
  }
 else {
    this.outlierHandlingMenu.getItem(1).setSelected(true);
  }
  colorMapGroup.clearSelection();
  JRadioButtonMenuItem item=colorMap.get(heatMapModel.getColorGradient().getGradientName());
  if (item != null) {
    item.setSelected(true);
  }
}","@Override public void modelChanged(){
  if (parent.getChildViews() == null)   this.colorMapMenu.setEnabled(!heatMapModel.isGlobalScaling());
  this.markSelection.setSelected(heatMapModel.doMarkSelection());
  this.overlayHider.setSelected(this.heatMapModel.doHideMostFreqOverlay());
  if ((heatMapModel != null) && heatMapModel.getReadoutRescaleStrategy().getClass().equals(MinMaxStrategy.class)) {
    this.outlierHandlingMenu.getItem(0).setSelected(true);
  }
 else {
    this.outlierHandlingMenu.getItem(1).setSelected(true);
  }
  colorMapGroup.clearSelection();
  JRadioButtonMenuItem item=colorMap.get(heatMapModel.getColorGradient().getGradientName());
  if (item != null) {
    item.setSelected(true);
  }
}"
81527,"/** 
 * Configure the gui components with the menu items.
 * @param hmm data model delivering the content
 */
public void configure(HeatMapModel hmm){
  heatMapModel=hmm;
  if (heatMapModel.getScreen() == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  List<Plate> subScreen=Arrays.asList(hmm.getScreen().get(0));
  List<String> annotations=new ArrayList<String>();
  annotations.addAll(heatMapModel.getAnnotations());
  if (heatMapModel.hasKnimeColorModel())   annotations.add(0,heatMapModel.getKnimeColorAttributeTitle());
  annotations.add(0,""String_Node_Str"");
  overlaySelector.configure(annotations,heatMapModel,AttributeType.OVERLAY_ANNOTATION);
  List<String> readouts=heatMapModel.getReadouts();
  readoutSelector.configure(readouts,heatMapModel,AttributeType.READOUT);
  if ((parent == null) || (parent instanceof ScreenViewer)) {
    Collection<PlateAttribute> plateAttributes=heatMapModel.getPlateAttributes();
    DefaultComboBoxModel model=new DefaultComboBoxModel(PlateUtils.getPlateAttributeTitles(plateAttributes));
    filterSelector.setModel(model);
  }
  String plateFilterString=heatMapModel.getPlateFilterString();
  assert(plateFilterString != null);
  if (plateFilterString.length() > 0)   filterString.setText(plateFilterString);
}","/** 
 * Configure the gui components with the menu items.
 * @param hmm data model delivering the content
 */
public void configure(HeatMapModel hmm){
  heatMapModel=hmm;
  if (heatMapModel.getScreen() == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  List<Plate> subScreen=Arrays.asList(hmm.getScreen().get(0));
  List<String> annotations=heatMapModel.getAnnotations();
  overlaySelector.configure(annotations,heatMapModel,AttributeType.OVERLAY_ANNOTATION);
  List<String> readouts=heatMapModel.getReadouts();
  readoutSelector.configure(readouts,heatMapModel,AttributeType.READOUT);
  if ((parent == null) || (parent instanceof ScreenViewer)) {
    Collection<PlateAttribute> plateAttributes=heatMapModel.getPlateAttributes();
    DefaultComboBoxModel model=new DefaultComboBoxModel(PlateUtils.getPlateAttributeTitles(plateAttributes));
    filterSelector.setModel(model);
  }
  String plateFilterString=heatMapModel.getPlateFilterString();
  assert(plateFilterString != null);
  if (plateFilterString.length() > 0)   filterString.setText(plateFilterString);
}"
81528,"@Override public void modelChanged(){
switch (selectionType) {
case READOUT:
    if (heatMapModel.getSelectedReadOut() != null) {
      setSelectedItem(heatMapModel.getSelectedReadOut());
    }
 else {
      heatMapModel.setCurrentReadout((String)getSelectedItem());
    }
  break;
case OVERLAY_ANNOTATION:
if (heatMapModel.getCurrentOverlay() != null) {
  setSelectedItem(heatMapModel.getCurrentOverlay());
}
 else {
  heatMapModel.setCurrentOverlay((String)getSelectedItem());
}
break;
}
}","@Override public void modelChanged(){
  DefaultComboBoxModel<String> currentModel=(DefaultComboBoxModel<String>)this.getModel();
  this.removeItemListener(m_listener);
  currentModel.removeAllElements();
switch (selectionType) {
case READOUT:
    List<String> readouts=heatMapModel.getReadouts();
  for (  String ro : readouts)   currentModel.addElement(ro);
if (heatMapModel.getSelectedReadOut() != null) {
  setSelectedItem(heatMapModel.getSelectedReadOut());
}
 else {
  heatMapModel.setCurrentReadout((String)getSelectedItem());
}
break;
case OVERLAY_ANNOTATION:
List<String> annotations=heatMapModel.getAnnotations();
String[] items=annotations.toArray(new String[annotations.size()]);
items=addOverlayOptions(items);
for (String an : items) currentModel.addElement(an);
if (heatMapModel.getCurrentOverlay() != null) {
setSelectedItem(heatMapModel.getCurrentOverlay());
}
 else {
heatMapModel.setCurrentOverlay((String)getSelectedItem());
}
break;
}
this.addItemListener(m_listener);
}"
81529,"/** 
 * Configure the UI components
 * @param options List of attribute values
 * @param heatMapModel data model delivering the data
 * @param selType type of attribute (factor or readout)
 */
public void configure(List<String> options,final HeatMapModel heatMapModel,final AttributeType selType){
  this.heatMapModel=heatMapModel;
  this.heatMapModel.addChangeListener(this);
  this.selectionType=selType;
  DefaultComboBoxModel<String> readoutModel=new DefaultComboBoxModel<String>(options.toArray(new String[options.size()]));
  setModel(readoutModel);
switch (selType) {
case READOUT:
    if (heatMapModel.getSelectedReadOut() != null) {
      setSelectedItem(heatMapModel.getSelectedReadOut());
    }
 else {
      heatMapModel.setCurrentReadout((String)getSelectedItem());
    }
  break;
case OVERLAY_ANNOTATION:
if (heatMapModel.getCurrentOverlay() != null) {
  setSelectedItem(heatMapModel.getCurrentOverlay());
}
 else {
  heatMapModel.setCurrentOverlay((String)getSelectedItem());
}
break;
}
addItemListener(new ItemListener(){
public void itemStateChanged(ItemEvent event){
if (event.getStateChange() == ItemEvent.SELECTED) {
HeatMapModel mapModel=WellAttributeComboBox.this.heatMapModel;
switch (selType) {
case READOUT:
  mapModel.setCurrentReadout((String)getModel().getSelectedItem());
break;
case OVERLAY_ANNOTATION:
mapModel.setCurrentOverlay((String)getModel().getSelectedItem());
break;
}
heatMapModel.fireModelChanged();
}
}
}
);
setRenderer(new MyComboBoxRenderer());
}","/** 
 * Configure the UI components
 * @param options List of attribute values
 * @param heatMapModel data model delivering the data
 * @param selType type of attribute (factor or readout)
 */
public void configure(List<String> options,final HeatMapModel heatMapModel,final AttributeType selType){
  this.heatMapModel=heatMapModel;
  this.heatMapModel.addChangeListener(this);
  this.selectionType=selType;
  String[] items=options.toArray(new String[options.size()]);
  if (selectionType == AttributeType.OVERLAY_ANNOTATION) {
    items=addOverlayOptions(items);
  }
  DefaultComboBoxModel<String> readoutModel=new DefaultComboBoxModel<String>(items);
  setModel(readoutModel);
switch (selType) {
case READOUT:
    if (heatMapModel.getSelectedReadOut() != null) {
      setSelectedItem(heatMapModel.getSelectedReadOut());
    }
 else {
      heatMapModel.setCurrentReadout((String)getSelectedItem());
    }
  break;
case OVERLAY_ANNOTATION:
if (heatMapModel.getCurrentOverlay() != null) {
  setSelectedItem(heatMapModel.getCurrentOverlay());
}
 else {
  heatMapModel.setCurrentOverlay((String)getSelectedItem());
}
break;
}
m_listener=new ItemListener(){
public void itemStateChanged(ItemEvent event){
if (event.getStateChange() == ItemEvent.SELECTED) {
HeatMapModel mapModel=WellAttributeComboBox.this.heatMapModel;
switch (selType) {
case READOUT:
  mapModel.setCurrentReadout((String)getModel().getSelectedItem());
break;
case OVERLAY_ANNOTATION:
mapModel.setCurrentOverlay((String)getModel().getSelectedItem());
break;
}
heatMapModel.fireModelChanged();
}
}
}
;
addItemListener(m_listener);
setRenderer(new MyComboBoxRenderer());
}"
81530,"/** 
 * initialization of the UI components
 */
private void initialize(){
  JPanel buttonPanel=new JPanel();
  buttonPanel.setLayout(new BoxLayout(buttonPanel,BoxLayout.LINE_AXIS));
  buttonPanel.add(Box.createHorizontalGlue());
  JButton buttonCancel=new JButton(""String_Node_Str"");
  buttonCancel.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onCancel();
    }
  }
);
  buttonPanel.add(buttonCancel);
  buttonPanel.add(Box.createRigidArea(new Dimension(10,0)));
  JButton buttonOK=new JButton(""String_Node_Str"");
  getRootPane().setDefaultButton(buttonOK);
  buttonOK.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onOK();
    }
  }
);
  buttonPanel.add(buttonOK);
  Font font=new Font(""String_Node_Str"",Font.PLAIN,12);
  JPanel sensPanel=new JPanel();
  Border border=BorderFactory.createEtchedBorder();
  TitledBorder titledBorder=BorderFactory.createTitledBorder(border,""String_Node_Str"");
  titledBorder.setTitleFont(font);
  sensPanel.setBorder(titledBorder);
  ButtonGroup group=new ButtonGroup();
  JRadioButton radio=new JRadioButton(""String_Node_Str"");
  radio.setFont(font);
  group.add(radio);
  sensPanel.add(radio);
  descending=new JRadioButton(""String_Node_Str"");
  descending.setFont(font);
  descending.setSelected(true);
  group.add(descending);
  sensPanel.add(descending);
  JPanel contentPane=new JPanel(new GridBagLayout());
  GridBagConstraints constraints=new GridBagConstraints();
  constraints.gridy=0;
  constraints.gridx=0;
  constraints.weighty=0.8;
  constraints.weightx=1;
  constraints.insets=new Insets(7,7,7,7);
  constraints.fill=GridBagConstraints.BOTH;
  contentPane.add(createTable(),constraints);
  table.setFont(font);
  constraints.gridy=1;
  constraints.weighty=0.01;
  contentPane.add(sensPanel,constraints);
  constraints.gridy=2;
  contentPane.add(buttonPanel,constraints);
  setContentPane(contentPane);
  setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      onCancel();
    }
  }
);
  contentPane.registerKeyboardAction(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      onCancel();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
}","/** 
 * initialization of the UI components
 */
private void initialize(){
  JPanel buttonPanel=new JPanel();
  buttonPanel.setLayout(new BoxLayout(buttonPanel,BoxLayout.LINE_AXIS));
  buttonPanel.add(Box.createHorizontalGlue());
  JButton buttonCancel=new JButton(""String_Node_Str"");
  buttonCancel.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onCancel();
    }
  }
);
  buttonPanel.add(buttonCancel);
  buttonPanel.add(Box.createRigidArea(new Dimension(10,0)));
  JButton buttonOK=new JButton(""String_Node_Str"");
  getRootPane().setDefaultButton(buttonOK);
  buttonOK.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onOK();
    }
  }
);
  buttonPanel.add(buttonOK);
  Font font=new Font(""String_Node_Str"",Font.PLAIN,12);
  JPanel sensPanel=new JPanel();
  Border border=BorderFactory.createEtchedBorder();
  TitledBorder titledBorder=BorderFactory.createTitledBorder(border,""String_Node_Str"");
  titledBorder.setTitleFont(font);
  sensPanel.setBorder(titledBorder);
  ButtonGroup group=new ButtonGroup();
  JRadioButton radio=new JRadioButton(""String_Node_Str"");
  radio.setFont(font);
  group.add(radio);
  sensPanel.add(radio);
  descending=new JRadioButton(""String_Node_Str"");
  descending.setFont(font);
  descending.setSelected(false);
  group.add(descending);
  sensPanel.add(descending);
  JPanel contentPane=new JPanel(new GridBagLayout());
  GridBagConstraints constraints=new GridBagConstraints();
  constraints.gridy=0;
  constraints.gridx=0;
  constraints.weighty=0.8;
  constraints.weightx=1;
  constraints.insets=new Insets(7,7,7,7);
  constraints.fill=GridBagConstraints.BOTH;
  contentPane.add(createTable(),constraints);
  table.setFont(font);
  constraints.gridy=1;
  constraints.weighty=0.01;
  contentPane.add(sensPanel,constraints);
  constraints.gridy=2;
  contentPane.add(buttonPanel,constraints);
  setContentPane(contentPane);
  setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      onCancel();
    }
  }
);
  contentPane.registerKeyboardAction(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      onCancel();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
}"
81531,"/** 
 * Action to control the flag for the global color scale for the heatmaps
 * @param event fired by the menu item
 */
private void globalScalingAction(ActionEvent event){
  JCheckBoxMenuItem item=(JCheckBoxMenuItem)event.getSource();
  if (heatTrellis.plateViewers.isEmpty())   return;
  Object[] options={""String_Node_Str"",""String_Node_Str""};
  int optionIndex=JOptionPane.showOptionDialog(getTopLevelAncestor(),""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[1]);
  if (optionIndex == 0) {
    item.setSelected(heatMapModel.isGlobalScaling());
  }
 else {
    heatMapModel.setGlobalScaling(item.isSelected());
    heatTrellis.closePlateViewers();
  }
}","/** 
 * Action to control the flag for the global color scale for the heatmaps
 * @param event fired by the menu item
 */
private void globalScalingAction(ActionEvent event){
  JCheckBoxMenuItem item=(JCheckBoxMenuItem)event.getSource();
  if (heatTrellis.plateViewers.isEmpty()) {
    heatMapModel.setGlobalScaling(item.isSelected());
    return;
  }
  Object[] options={""String_Node_Str"",""String_Node_Str""};
  int optionIndex=JOptionPane.showOptionDialog(getTopLevelAncestor(),""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[1]);
  if (optionIndex == 0) {
    item.setSelected(heatMapModel.isGlobalScaling());
  }
 else {
    heatMapModel.setGlobalScaling(item.isSelected());
    heatTrellis.closePlateViewers();
  }
}"
81532,"/** 
 * Action executed when selecting the sort plate function
 */
private void sortPlatesAction(){
  PlateAttributeDialog dialog=new PlateAttributeDialog(heatMapModel);
  dialog.setVisible(true);
  String[] selectedAttributes=dialog.getSelectedAttributeTitles();
  for (int i=selectedAttributes.length - 1; i >= 0; i--) {
    PlateAttribute attribute=PlateUtils.getPlateAttributeByTitle(selectedAttributes[i]);
    heatMapModel.sortPlates(attribute);
  }
  if (!dialog.isDescending()) {
    heatMapModel.revertScreen();
  }
  heatMapModel.fireModelChanged();
  heatMapModel.setSortAttributeSelectionByTiles(selectedAttributes);
}","/** 
 * Action executed when selecting the sort plate function
 */
private void sortPlatesAction(){
  PlateAttributeDialog dialog=new PlateAttributeDialog(heatMapModel);
  dialog.setVisible(true);
  String[] selectedAttributes=dialog.getSelectedAttributeTitles();
  ArrayList<PlateAttribute> attributeList=new ArrayList<PlateAttribute>();
  for (  String attributeString : selectedAttributes) {
    PlateAttribute attribute=PlateUtils.getPlateAttributeByTitle(attributeString);
    attributeList.add(attribute);
  }
  heatMapModel.sortPlates(attributeList,dialog.isDescending());
  heatMapModel.fireModelChanged();
  heatMapModel.setSortAttributeSelectionByTiles(selectedAttributes);
}"
81533,"/** 
 * Configure the attribute table
 */
private void configureTable(){
  if (!(heatMapModel == null)) {
    String[] attributes=PlateUtils.getPlateAttributeTitles(heatMapModel.getPlateAttributes());
    String[] selectedAttributes=heatMapModel.getSortAttributesSelectionTitles();
    tableData=new String[attributes.length][1];
    DefaultTableModel model=new DefaultTableModel(tableData,columnNames);
    table.setModel(model);
    int index=0;
    List<Integer> selectionIndex=new ArrayList<Integer>();
    for (    String attribute : attributes) {
      if (ArrayUtils.contains(selectedAttributes,attribute)) {
        selectionIndex.add(index);
      }
      model.setValueAt(""String_Node_Str"",index,0);
      model.setValueAt(attribute,index++,1);
    }
    for (    Integer position : selectionIndex) {
      listSelectionModel.addSelectionInterval(position,position);
    }
  }
  repaint();
}","/** 
 * Configure the attribute table
 */
private void configureTable(){
  if (!(heatMapModel == null)) {
    String[] attributes=PlateUtils.getPlateAttributeTitles(heatMapModel.getPlateAttributes());
    String[] selectedAttributes=heatMapModel.getSortAttributesSelectionTitles();
    tableData=new String[attributes.length][1];
    DefaultTableModel model=new DefaultTableModel(tableData,columnNames);
    table.setModel(model);
    int index=0;
    for (    String attribute : attributes) {
      model.setValueAt(""String_Node_Str"",index,0);
      model.setValueAt(attribute,index++,1);
    }
    if (selectedAttributes != null) {
      for (      String attribute : selectedAttributes) {
        int position=ArrayUtils.indexOf(attributes,attribute);
        listSelectionModel.addSelectionInterval(position,position);
      }
    }
  }
  repaint();
}"
81534,"/** 
 * Create the ""reference population parameter"" setting model with the default columns name as defined by   {@link PlateUtils}.
 * @return ""reference population parameter"" setting model
 */
static SettingsModelString createReferenceParameterSettingModel(){
  return new SettingsModelString(REFERENCE_POPULATIONS_SETTING_NAME,PlateUtils.SCREEN_MODEL_TREATMENT);
}","/** 
 * Create the ""reference population parameter"" setting model with the default columns name as defined by   {@link PlateUtils}.
 * @return ""reference population parameter"" setting model
 */
static SettingsModelString createReferenceParameterSettingModel(){
  return new SettingsModelString(REFERENCE_PARAMETER_SETTING_NAME,PlateUtils.SCREEN_MODEL_TREATMENT);
}"
81535,"/** 
 * Get a color at a particular fraction of the gradient.
 * @param painter to fetch the color from
 * @param input fraction [0...1]
 * @return the color at the input fraction
 */
public static Color getColorAt(LinearGradientPaint painter,float input){
  int lowerIndex=0;
  int upperIndex=1;
  float lowerBound=0;
  float upperBound=1;
  float[] fractions=painter.getFractions();
  Color[] colors=painter.getColors();
  if (input > 1) {
    input=1f;
  }
  if (input < 0) {
    input=0f;
  }
  int index=0;
  for (  float fraction : fractions) {
    if (fraction < input) {
      lowerBound=fraction;
      lowerIndex=index;
    }
 else     if (fraction == input) {
      return colors[index];
    }
 else     if (fraction > input) {
      upperBound=fraction;
      upperIndex=index;
    }
    index++;
  }
  float rescaled=(input - lowerBound) / (upperBound - lowerBound);
  return interpolateColor(colors[lowerIndex],colors[upperIndex],rescaled);
}","/** 
 * Get a color at a particular fraction of the gradient.
 * @param painter to fetch the color from
 * @param input fraction [0...1]
 * @return the color at the input fraction
 */
public static Color getColorAt(LinearGradientPaint painter,float input){
  int lowerIndex=0;
  int upperIndex=1;
  float lowerBound=0;
  float upperBound=1;
  float[] fractions=painter.getFractions();
  Color[] colors=painter.getColors();
  if (input > 1) {
    input=1f;
  }
  if (input < 0) {
    input=0f;
  }
  int index=0;
  for (  float fraction : fractions) {
    if (fraction < input) {
      lowerBound=fraction;
      lowerIndex=index;
    }
 else     if (fraction == input) {
      return colors[index];
    }
    index++;
  }
  index=0;
  for (  float fraction : fractions) {
    if (fraction > input) {
      upperBound=fraction;
      upperIndex=index;
      break;
    }
    index++;
  }
  float rescaled=(input - lowerBound) / (upperBound - lowerBound);
  return interpolateColor(colors[lowerIndex],colors[upperIndex],rescaled);
}"
81536,"/** 
 * Get a predefined color gradient
 * @param str abbreviation or name of the gradient.
 * @return predefined gradient
 */
public static LinearGradientPaint getStandardGradient(String str){
  LinearGradientPaint gradient=null;
  if (Arrays.asList(MAP_GB).contains(str)) {
    gradient=new LinearGradientPaint(new Point2D.Double(0,0),new Point2D.Double(100,0),new float[]{0f,1f},new Color[]{new Color(0,0,0),new Color(0,255,0)});
  }
 else   if (Arrays.asList(MAP_DARK).contains(str)) {
    gradient=new LinearGradientPaint(new Point2D.Double(0,0),new Point2D.Double(100,0),new float[]{0f,0.5f,1f},new Color[]{new Color(0,0,0),new Color(255,0,0),new Color(255,255,0)});
  }
 else   if (Arrays.asList(MAP_HSV).contains(str)) {
    gradient=new LinearGradientPaint(new Point2D.Double(0,0),new Point2D.Double(100,0),new float[]{0f,0.2f,0.4f,0.6f,0.8f,1f},new Color[]{new Color(255,0,0),new Color(255,255,0),new Color(0,255,0),new Color(0,255,255),new Color(0,0,255),new Color(255,0,255)});
  }
 else   if (Arrays.asList(MAP_JET).contains(str)) {
    gradient=new LinearGradientPaint(new Point2D.Double(0,0),new Point2D.Double(100,0),new float[]{0f,0.333f,0.666f,1f},new Color[]{new Color(255,0,0),new Color(255,255,0),new Color(0,255,255),new Color(0,0,255)});
  }
 else   if (Arrays.asList(MAP_GBR).contains(str)) {
    gradient=new LinearGradientPaint(new Point2D.Double(0,0),new Point2D.Double(100,0),new float[]{0f,0.5f,1f},new Color[]{new Color(0,255,0),new Color(0,0,0),new Color(255,0,0)});
  }
 else {
    System.err.println(""String_Node_Str"" + str + ""String_Node_Str"");
  }
  return gradient;
}","/** 
 * Get a predefined color gradient
 * @param str abbreviation or name of the gradient.
 * @return predefined gradient
 */
public static LinearGradientPaint getStandardGradient(String str){
  LinearGradientPaint gradient=null;
  if (Arrays.asList(MAP_GB).contains(str)) {
    gradient=new LinearGradientPaint(new Point2D.Double(0,0),new Point2D.Double(100,0),new float[]{0f,1f},new Color[]{new Color(0,0,0),new Color(0,255,0)});
  }
 else   if (Arrays.asList(MAP_DARK).contains(str)) {
    gradient=new LinearGradientPaint(new Point2D.Double(0,0),new Point2D.Double(100,0),new float[]{0f,0.5f,1f},new Color[]{new Color(0,0,0),new Color(255,0,0),new Color(255,255,0)});
  }
 else   if (Arrays.asList(MAP_HSV).contains(str)) {
    gradient=new LinearGradientPaint(new Point2D.Double(0,0),new Point2D.Double(100,0),new float[]{0f,0.2f,0.4f,0.6f,0.8f,1f},new Color[]{new Color(255,0,0),new Color(255,255,0),new Color(0,255,0),new Color(0,255,255),new Color(0,0,255),new Color(255,0,255)});
  }
 else   if (Arrays.asList(MAP_JET).contains(str)) {
    gradient=new LinearGradientPaint(new Point2D.Double(0,0),new Point2D.Double(100,0),new float[]{0f,0.333f,0.666f,1f},new Color[]{new Color(255,0,0),new Color(255,255,0),new Color(0,255,255),new Color(0,0,255)});
  }
 else   if (Arrays.asList(MAP_GBR).contains(str)) {
    gradient=new LinearGradientPaint(new Point2D.Double(0,0),new Point2D.Double(100,0),new float[]{0f,0.5f,1f},new Color[]{new Color(0,255,0),new Color(0,0,0),new Color(255,0,0)});
  }
 else   if (Arrays.asList(MAP_RWB).contains(str)) {
    gradient=new LinearGradientPaint(new Point2D.Double(0,0),new Point2D.Double(100,0),new float[]{0f,0.5f,1f},new Color[]{new Color(255,0,0),new Color(255,255,255),new Color(0,0,255)});
  }
 else {
    System.err.println(""String_Node_Str"" + str + ""String_Node_Str"");
  }
  return gradient;
}"
81537,"/** 
 * Linear interpolator between two colors
 * @param color1 first bound
 * @param color2 second bound
 * @param fraction [0...1]
 * @return interpolation: color2+(color2-color1) * fraction
 */
public static Color interpolateColor(final Color color1,final Color color2,final float fraction){
  assert(Float.compare(fraction,0f) >= 0 && Float.compare(fraction,1f) <= 0);
  final float INT_TO_FLOAT_CONST=1f / 255f;
  final float RED1=color1.getRed() * INT_TO_FLOAT_CONST;
  final float GREEN1=color1.getGreen() * INT_TO_FLOAT_CONST;
  final float BLUE1=color1.getBlue() * INT_TO_FLOAT_CONST;
  final float ALPHA1=color1.getAlpha() * INT_TO_FLOAT_CONST;
  final float RED2=color2.getRed() * INT_TO_FLOAT_CONST;
  final float GREEN2=color2.getGreen() * INT_TO_FLOAT_CONST;
  final float BLUE2=color2.getBlue() * INT_TO_FLOAT_CONST;
  final float ALPHA2=color2.getAlpha() * INT_TO_FLOAT_CONST;
  final float DELTA_RED=RED2 - RED1;
  final float DELTA_GREEN=GREEN2 - GREEN1;
  final float DELTA_BLUE=BLUE2 - BLUE1;
  final float DELTA_ALPHA=ALPHA2 - ALPHA1;
  float red=RED1 + (DELTA_RED * fraction);
  float green=GREEN1 + (DELTA_GREEN * fraction);
  float blue=BLUE1 + (DELTA_BLUE * fraction);
  float alpha=ALPHA1 + (DELTA_ALPHA * fraction);
  red=red < 0f ? 0f : red;
  red=red > 1f ? 1f : red;
  green=green < 0f ? 0f : green;
  green=green > 1f ? 1f : green;
  blue=blue < 0f ? 0f : blue;
  blue=blue > 1f ? 1f : blue;
  alpha=alpha < 0f ? 0f : alpha;
  alpha=alpha > 1f ? 1f : alpha;
  return new Color(red,green,blue,alpha);
}","/** 
 * Linear interpolator between two colors
 * @param color1 first bound
 * @param color2 second bound
 * @param fraction [0...1]
 * @return interpolation: color2 + (color2 - color1) * fraction
 */
public static Color interpolateColor(final Color color1,final Color color2,final float fraction){
  assert(Float.compare(fraction,0f) >= 0 && Float.compare(fraction,1f) <= 0);
  final float INT_TO_FLOAT_CONST=1f / 255f;
  final float RED1=color1.getRed() * INT_TO_FLOAT_CONST;
  final float GREEN1=color1.getGreen() * INT_TO_FLOAT_CONST;
  final float BLUE1=color1.getBlue() * INT_TO_FLOAT_CONST;
  final float ALPHA1=color1.getAlpha() * INT_TO_FLOAT_CONST;
  final float RED2=color2.getRed() * INT_TO_FLOAT_CONST;
  final float GREEN2=color2.getGreen() * INT_TO_FLOAT_CONST;
  final float BLUE2=color2.getBlue() * INT_TO_FLOAT_CONST;
  final float ALPHA2=color2.getAlpha() * INT_TO_FLOAT_CONST;
  final float DELTA_RED=RED2 - RED1;
  final float DELTA_GREEN=GREEN2 - GREEN1;
  final float DELTA_BLUE=BLUE2 - BLUE1;
  final float DELTA_ALPHA=ALPHA2 - ALPHA1;
  float red=RED1 + (DELTA_RED * fraction);
  float green=GREEN1 + (DELTA_GREEN * fraction);
  float blue=BLUE1 + (DELTA_BLUE * fraction);
  float alpha=ALPHA1 + (DELTA_ALPHA * fraction);
  red=red < 0f ? 0f : red;
  red=red > 1f ? 1f : red;
  green=green < 0f ? 0f : green;
  green=green > 1f ? 1f : green;
  blue=blue < 0f ? 0f : blue;
  blue=blue > 1f ? 1f : blue;
  alpha=alpha < 0f ? 0f : alpha;
  alpha=alpha > 1f ? 1f : alpha;
  return new Color(red,green,blue,alpha);
}"
81538,"/** 
 * Returns the menu of the color map manipulations
 * @return color map sub-menu
 */
private JMenu createColorMapMenu(){
  JMenu lut=new JMenu(""String_Node_Str"");
  ButtonGroup group=new ButtonGroup();
  String[] names={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  JRadioButtonMenuItem[] item=new JRadioButtonMenuItem[names.length];
  for (int i=0; i < names.length; i++) {
    Icon icon=createImageIcon(""String_Node_Str"" + names[i].toLowerCase() + ""String_Node_Str"",names[i] + ""String_Node_Str"");
    item[i]=new JRadioButtonMenuItem(names[i],icon);
    group.add(item[i]);
    lut.add(item[i]);
    item[i].addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent actionEvent){
        toggleColorMapAction(actionEvent);
      }
    }
);
    if ((heatMapModel != null) && heatMapModel.getColorGradient().getGradientName().equals(names[i]))     item[i].setSelected(true);
  }
  return lut;
}","/** 
 * Returns the menu of the color map manipulations
 * @return color map sub-menu
 */
private JMenu createColorMapMenu(){
  JMenu lut=new JMenu(""String_Node_Str"");
  ButtonGroup group=new ButtonGroup();
  String[] names={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  JRadioButtonMenuItem[] item=new JRadioButtonMenuItem[names.length];
  for (int i=0; i < names.length; i++) {
    Icon icon=createImageIcon(""String_Node_Str"" + names[i].toLowerCase() + ""String_Node_Str"",names[i] + ""String_Node_Str"");
    item[i]=new JRadioButtonMenuItem(names[i],icon);
    group.add(item[i]);
    lut.add(item[i]);
    item[i].addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent actionEvent){
        toggleColorMapAction(actionEvent);
      }
    }
);
    if ((heatMapModel != null) && heatMapModel.getColorGradient().getGradientName().equals(names[i]))     item[i].setSelected(true);
  }
  return lut;
}"
81539,"/** 
 * {@inheritDoc} 
 */
@Override public void paintComponent(Graphics graphics){
  super.paintComponent(graphics);
  Graphics2D g2d=(Graphics2D)graphics;
  Font font=new Font(""String_Node_Str"",Font.PLAIN,11);
  g2d.setFont(font);
  FontMetrics metrics=g2d.getFontMetrics(font);
  Insets insets=getBorder().getBorderInsets(this);
  RenderingHints rh=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  rh.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  g2d.setRenderingHints(rh);
  float scaleFactor=this.getWidth() / StrictMath.abs(maxScale - minScale);
  float lowerBound=mean - factor * sd;
  float upperBound=mean + factor * sd;
  int left=StrictMath.round((lowerBound - minScale) * scaleFactor);
  int top=insets.top / 2;
  int width=StrictMath.round(2 * factor * sd* scaleFactor);
  int right=left + width;
  int middle=(left + right) / 2;
  int height=this.getHeight() - (insets.top / 2 + insets.bottom);
  int halfHeight=StrictMath.round(height / 2 + top + 5);
  left=left < 0 ? 0 : left;
  width=width > this.getWidth() ? this.getWidth() : width;
  g2d.setColor(new Color(165,205,255));
  g2d.drawRect(left,top,width,height);
  g2d.fillRect(left,top,width,height);
  g2d.setColor(new Color(0,0,0));
  String s=HeatMapColorToolBar.format(lowerBound);
  g2d.drawString(s,left + metrics.stringWidth(""String_Node_Str""),halfHeight);
  s=HeatMapColorToolBar.format(mean);
  g2d.drawString(s,middle - metrics.stringWidth(s) / 2,halfHeight);
  s=HeatMapColorToolBar.format(upperBound);
  g2d.drawString(s,right - metrics.stringWidth(s + ""String_Node_Str""),halfHeight);
}","/** 
 * {@inheritDoc} 
 */
@Override public void paintComponent(Graphics graphics){
  super.paintComponent(graphics);
  Graphics2D g2d=(Graphics2D)graphics;
  Font font=new Font(""String_Node_Str"",Font.PLAIN,11);
  g2d.setFont(font);
  FontMetrics metrics=g2d.getFontMetrics(font);
  Insets insets=getBorder().getBorderInsets(this);
  RenderingHints rh=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  rh.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  g2d.setRenderingHints(rh);
  float scaleFactor=this.getWidth() / StrictMath.abs(maxScale - minScale);
  float lowerBound=mean - factor * sd;
  float upperBound=mean + factor * sd;
  int left=StrictMath.round((lowerBound - minScale) * scaleFactor);
  int top=insets.top / 2;
  int width=StrictMath.round(2 * factor * sd* scaleFactor);
  int right=left + width;
  int middle=(left + right) / 2;
  int height=this.getHeight() - (insets.top / 2 + insets.bottom);
  int halfHeight=StrictMath.round(height / 2 + top + 5);
  if (left < 0) {
    width+=left;
    left=0;
  }
  width=width > this.getWidth() ? this.getWidth() : width;
  g2d.setColor(new Color(165,205,255));
  g2d.drawRect(left,top,width,height);
  g2d.fillRect(left,top,width,height);
  g2d.setColor(new Color(0,0,0));
  String s=HeatMapColorToolBar.format(lowerBound);
  g2d.drawString(s,left + metrics.stringWidth(""String_Node_Str""),halfHeight);
  s=HeatMapColorToolBar.format(mean);
  g2d.drawString(s,middle - metrics.stringWidth(s) / 2,halfHeight);
  s=HeatMapColorToolBar.format(upperBound);
  g2d.drawString(s,right - metrics.stringWidth(s + ""String_Node_Str""),halfHeight);
}"
81540,"/** 
 * Add thumbnails to the   {@link GradientSlider}
 * @param scaleValue position of the thumbnail
 */
public void addThumbnail(float scaleValue){
  float pos=(scaleValue - minScaleValue) / (maxScaleValue - minScaleValue);
  for (  float exi : slider.getThumbPositions()) {
    if (pos == exi) {
      System.err.println(""String_Node_Str"" + pos + ""String_Node_Str"");
    }
  }
  slider.addThumb(pos);
}","/** 
 * Add thumbnails to the   {@link GradientSlider}
 * @param scaleValue position of the thumbnail
 */
public void addThumbnail(float scaleValue){
  float pos=(scaleValue - minScaleValue) / (maxScaleValue - minScaleValue);
  if (pos < 0 || 1 < pos) {
    System.err.println(""String_Node_Str"" + pos + ""String_Node_Str"");
    return;
  }
  for (  float exi : slider.getThumbPositions()) {
    if (pos == exi) {
      System.err.println(""String_Node_Str"" + pos + ""String_Node_Str"");
    }
  }
  slider.addThumb(pos);
}"
81541,"/** 
 * Configure the gui components with the menu items.
 * @param hmm data model delivering the content
 */
public void configure(HeatMapModel hmm){
  heatMapModel=hmm;
  if (heatMapModel.getScreen() == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  List<Plate> subScreen=Arrays.asList(hmm.getScreen().get(0));
  List<String> annotations=heatMapModel.getAnnotations();
  if (heatMapModel.hasKnimeColorModel())   annotations.add(0,heatMapModel.getKnimeColorAttributeTitle());
  annotations.add(0,""String_Node_Str"");
  overlaySelector.configure(annotations,heatMapModel,AttributeType.OVERLAY_ANNOTATION);
  List<String> readouts=heatMapModel.getReadouts();
  readoutSelector.configure(readouts,heatMapModel,AttributeType.READOUT);
  if ((parent == null) || (parent instanceof ScreenViewer)) {
    Collection<PlateAttribute> plateAttributes=heatMapModel.getPlateAttributes();
    DefaultComboBoxModel model=new DefaultComboBoxModel(PlateUtils.getPlateAttributeTitles(plateAttributes));
    filterSelector.setModel(model);
  }
}","/** 
 * Configure the gui components with the menu items.
 * @param hmm data model delivering the content
 */
public void configure(HeatMapModel hmm){
  heatMapModel=hmm;
  if (heatMapModel.getScreen() == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  List<Plate> subScreen=Arrays.asList(hmm.getScreen().get(0));
  List<String> annotations=new ArrayList<String>();
  annotations.addAll(heatMapModel.getAnnotations());
  if (heatMapModel.hasKnimeColorModel())   annotations.add(0,heatMapModel.getKnimeColorAttributeTitle());
  annotations.add(0,""String_Node_Str"");
  overlaySelector.configure(annotations,heatMapModel,AttributeType.OVERLAY_ANNOTATION);
  List<String> readouts=heatMapModel.getReadouts();
  readoutSelector.configure(readouts,heatMapModel,AttributeType.READOUT);
  if ((parent == null) || (parent instanceof ScreenViewer)) {
    Collection<PlateAttribute> plateAttributes=heatMapModel.getPlateAttributes();
    DefaultComboBoxModel model=new DefaultComboBoxModel(PlateUtils.getPlateAttributeTitles(plateAttributes));
    filterSelector.setModel(model);
  }
}"
81542,"/** 
 * {@inheritDoc} 
 */
@Override public void mousePressed(MouseEvent mouseEvent){
  if (mouseEvent.getButton() == MouseEvent.BUTTON1) {
    drag=true;
    if (!mouseEvent.isMetaDown())     heatMapModel.clearWellSelection();
    pressedHeatMap=getHeatMap(mouseEvent);
  }
 else   if (mouseEvent.getButton() == MouseEvent.BUTTON3) {
    HeatScreen heatMap=getHeatMap(mouseEvent);
    PlateViewer viewer=new PlateViewer(this,heatMap.getPlate());
    if (plateViewers.containsKey(heatMap.getPlate().getUuid())) {
      viewer=plateViewers.get(heatMap.getPlate().getUuid());
      viewer.toFront();
      viewer.repaint();
    }
 else {
      viewer.setVisible(true);
      plateViewers.put(heatMap.getPlate().getUuid(),viewer);
      heatMapModel.addChangeListener(viewer);
    }
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void mousePressed(MouseEvent mouseEvent){
  if (mouseEvent.getButton() == MouseEvent.BUTTON1) {
    drag=true;
    if (!mouseEvent.isMetaDown())     heatMapModel.clearWellSelection();
    pressedHeatMap=getHeatMap(mouseEvent);
  }
 else   if (mouseEvent.getButton() == MouseEvent.BUTTON3) {
    HeatScreen heatMap=getHeatMap(mouseEvent);
    PlateViewer viewer=new PlateViewer(this,heatMap.getPlate());
    if (plateViewers.containsKey(heatMap.getPlate().getUuid())) {
      viewer=plateViewers.get(heatMap.getPlate().getUuid());
      viewer.setVisible(true);
      viewer.toFront();
      viewer.repaint();
    }
 else {
      viewer.setVisible(true);
      plateViewers.put(heatMap.getPlate().getUuid(),viewer);
      heatMapModel.addChangeListener(viewer);
    }
  }
}"
81543,"/** 
 * Dumps the parts of the   {@link HeatMapModel} that concern view settingsto a binary file.
 * @throws IOException
 */
protected void serializeViewConfiguration() throws IOException {
  FileOutputStream sout=new FileOutputStream(viewConfigFile);
  ObjectOutputStream oout=new ObjectOutputStream(sout);
  oout.writeObject(heatMapModel.getColorGradient());
  oout.writeObject(heatMapModel.getSortAttributesSelectionTitles());
  oout.writeObject(heatMapModel.getWellSelection());
  oout.writeObject(heatMapModel.getNumberOfTrellisRows());
  oout.writeObject(heatMapModel.getNumberOfTrellisColumns());
  oout.writeObject(heatMapModel.doHideMostFreqOverlay());
  oout.writeObject(heatMapModel.isGlobalScaling());
  oout.writeObject(heatMapModel.isFixedPlateProportion());
  oout.writeObject(heatMapModel.getReadoutRescaleStrategy());
  oout.flush();
  oout.close();
}","/** 
 * Dumps the parts of the   {@link HeatMapModel} that concern view settingsto a binary file.
 * @throws IOException
 */
protected void serializeViewConfiguration() throws IOException {
  if (viewConfigFile == null)   return;
  FileOutputStream sout=new FileOutputStream(viewConfigFile);
  ObjectOutputStream oout=new ObjectOutputStream(sout);
  oout.writeObject(heatMapModel.getColorGradient());
  oout.writeObject(heatMapModel.getSortAttributesSelectionTitles());
  oout.writeObject(heatMapModel.getWellSelection());
  oout.writeObject(heatMapModel.getNumberOfTrellisRows());
  oout.writeObject(heatMapModel.getNumberOfTrellisColumns());
  oout.writeObject(heatMapModel.doHideMostFreqOverlay());
  oout.writeObject(heatMapModel.isGlobalScaling());
  oout.writeObject(heatMapModel.isFixedPlateProportion());
  oout.writeObject(heatMapModel.getReadoutRescaleStrategy());
  oout.flush();
  oout.close();
}"
81544,"/** 
 * Action executed when selecting the sort plate function
 */
private void sortPlatesAction(){
  PlateAttributeDialog dialog=new PlateAttributeDialog(heatMapModel);
  dialog.setVisible(true);
  String[] selectedAttributes=dialog.getSelectedAttributeTitles();
  List<String> inverted=Arrays.asList(selectedAttributes);
  Collections.reverse(inverted);
  for (  String key : inverted) {
    PlateAttribute attribute=PlateUtils.getPlateAttributeByTitle(key);
    heatMapModel.sortPlates(attribute);
  }
  if (!dialog.isDescending()) {
    heatMapModel.revertScreen();
  }
  heatMapModel.fireModelChanged();
  heatMapModel.setSortAttributeSelectionByTiles(selectedAttributes);
}","/** 
 * Action executed when selecting the sort plate function
 */
private void sortPlatesAction(){
  PlateAttributeDialog dialog=new PlateAttributeDialog(heatMapModel);
  dialog.setVisible(true);
  String[] selectedAttributes=dialog.getSelectedAttributeTitles();
  for (int i=selectedAttributes.length - 1; i >= 0; i--) {
    PlateAttribute attribute=PlateUtils.getPlateAttributeByTitle(selectedAttributes[i]);
    heatMapModel.sortPlates(attribute);
  }
  if (!dialog.isDescending()) {
    heatMapModel.revertScreen();
  }
  heatMapModel.fireModelChanged();
  heatMapModel.setSortAttributeSelectionByTiles(selectedAttributes);
}"
81545,"public void setKnimeTableRowKey(RowKey knimeTableRowKey){
  this.knimeTableRowKey=knimeTableRowKey;
}","public void setKnimeTableRowKey(RowKey knimeTableRowKey){
  this.knimeTableRowKey=knimeTableRowKey.getString();
}"
81546,"public RowKey getKnimeTableRowKey(){
  return knimeTableRowKey;
}","public RowKey getKnimeTableRowKey(){
  return new RowKey(this.knimeTableRowKey);
}"
81547,"public List<String> getBasicReadoutNames(){
  Class<? extends de.mpicbg.tds.core.model.Well> clazz=this.getClass();
  if (clazz.equals(de.mpicbg.tds.core.model.Well.class))   return new ArrayList<String>();
  if (!readoutNames.containsKey(clazz)) {
    List<String> readouts=new ArrayList<String>();
    for (    Field f : clazz.getDeclaredFields()) {
      if (f.getDeclaredAnnotations().length == 0) {
        String readoutFieldName=f.getName();
        char[] chars=readoutFieldName.toCharArray();
        chars[0]=Character.toUpperCase(chars[0]);
        readouts.add(new String(chars));
      }
    }
    readoutNames.put(clazz,readouts);
  }
  return readoutNames.get(clazz);
}","public List<String> getBasicReadoutNames(){
  Class<? extends Well> clazz=this.getClass();
  if (clazz.equals(de.mpicbg.tds.core.model.Well.class))   return new ArrayList<String>();
  if (!readoutNames.containsKey(clazz)) {
    List<String> readouts=new ArrayList<String>();
    for (    Field f : clazz.getDeclaredFields()) {
      if (f.getDeclaredAnnotations().length == 0) {
        String readoutFieldName=f.getName();
        char[] chars=readoutFieldName.toCharArray();
        chars[0]=Character.toUpperCase(chars[0]);
        readouts.add(new String(chars));
      }
    }
    readoutNames.put(clazz,readouts);
  }
  return readoutNames.get(clazz);
}"
81548,"public HeatMapInputToolbar(HeatMapViewer parent){
  setPreferredSize(new Dimension(600,30));
  add(new JLabel(""String_Node_Str""));
  readoutSelector=new WellAttributeComboBox();
  readoutSelector.setPreferredSize(new Dimension(250,-1));
  add(readoutSelector);
  addSeparator();
  add(new JLabel(""String_Node_Str""));
  overlaySelector=new WellAttributeComboBox();
  overlaySelector.setPreferredSize(new Dimension(100,-1));
  add(overlaySelector);
  if ((parent == null) || (parent instanceof ScreenViewer)) {
    addSeparator();
    add(new JLabel(""String_Node_Str""));
    filterSelector=new JComboBox();
    filterSelector.setPreferredSize(new Dimension(100,-1));
    add(filterSelector);
    JFormattedTextField filterString=new JFormattedTextField();
    filterString.setMinimumSize(new Dimension(100,20));
    filterString.setPreferredSize(new Dimension(100,20));
    filterString.setMaximumSize(new Dimension(300,20));
    filterString.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent actionEvent){
        filterPlatesAction(actionEvent);
      }
    }
);
    add(filterString);
  }
}","public HeatMapInputToolbar(HeatMapViewer parent){
  this.parent=parent;
  setPreferredSize(new Dimension(600,30));
  add(new JLabel(""String_Node_Str""));
  readoutSelector=new WellAttributeComboBox();
  readoutSelector.setPreferredSize(new Dimension(250,-1));
  add(readoutSelector);
  addSeparator();
  add(new JLabel(""String_Node_Str""));
  overlaySelector=new WellAttributeComboBox();
  overlaySelector.setPreferredSize(new Dimension(100,-1));
  add(overlaySelector);
  if ((parent == null) || (parent instanceof ScreenViewer)) {
    addSeparator();
    add(new JLabel(""String_Node_Str""));
    filterSelector=new JComboBox();
    filterSelector.setPreferredSize(new Dimension(100,-1));
    add(filterSelector);
    JFormattedTextField filterString=new JFormattedTextField();
    filterString.setMinimumSize(new Dimension(100,20));
    filterString.setPreferredSize(new Dimension(100,20));
    filterString.setMaximumSize(new Dimension(300,20));
    filterString.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent actionEvent){
        filterPlatesAction(actionEvent);
      }
    }
);
    add(filterString);
  }
}"
81549,"protected void configure(HeatMapModel2 hmm){
  heatMapModel=hmm;
  if (heatMapModel.getScreen() == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  java.util.List<Plate> subScreen=Arrays.asList(hmm.getScreen().get(0));
  java.util.List<String> annotations=TdsUtils.flattenAnnotationTypes(subScreen);
  annotations.add(0,""String_Node_Str"");
  overlaySelector.configure(annotations,heatMapModel,AttributeType.OVERLAY_ANNOTATION);
  Collection<PlateComparators.PlateAttribute> plateAttributes=heatMapModel.getPlateAttributes();
  DefaultComboBoxModel model=new DefaultComboBoxModel(PlateComparators.getPlateAttributeTitles(plateAttributes));
  filterSelector.setModel(model);
  java.util.List<String> readouts=TdsUtils.flattenReadoutNames(subScreen);
  readoutSelector.configure(readouts,heatMapModel,AttributeType.READOUT);
}","protected void configure(HeatMapModel2 hmm){
  heatMapModel=hmm;
  if (heatMapModel.getScreen() == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  List<Plate> subScreen=Arrays.asList(hmm.getScreen().get(0));
  List<String> annotations=TdsUtils.flattenAnnotationTypes(subScreen);
  annotations.add(0,""String_Node_Str"");
  overlaySelector.configure(annotations,heatMapModel,AttributeType.OVERLAY_ANNOTATION);
  List<String> readouts=TdsUtils.flattenReadoutNames(subScreen);
  readoutSelector.configure(readouts,heatMapModel,AttributeType.READOUT);
  if ((parent == null) || (parent instanceof ScreenViewer)) {
    Collection<PlateComparators.PlateAttribute> plateAttributes=heatMapModel.getPlateAttributes();
    DefaultComboBoxModel model=new DefaultComboBoxModel(PlateComparators.getPlateAttributeTitles(plateAttributes));
    filterSelector.setModel(model);
  }
}"
81550,"public PlateViewer(Plate plate,HeatMapModel2 heatMapModel){
  this(heatMapModel);
  setTitle(plate.getBarcode());
  heatMapModel.setScreen(Arrays.asList(plate));
  heatMap=new HeatPlate(plate,heatMapModel);
  heatMapContainer.add(heatMap);
  Random posJitter=new Random();
  this.setBounds(200 + posJitter.nextInt(100),200 + posJitter.nextInt(100),630,500);
  setVisible(true);
}","public PlateViewer(Plate plate,HeatMapModel2 heatMapModel){
  this(heatMapModel);
  List<Plate> pseudoScreen=new ArrayList<Plate>();
  pseudoScreen.add(plate);
  this.heatMapModel.setScreen(pseudoScreen);
  setTitle(plate.getBarcode());
  toolbar.configure(heatMapModel);
  colorbar.configure(heatMapModel);
  heatMapModel.setScreen(Arrays.asList(plate));
  heatMap=new HeatPlate(plate,heatMapModel);
  heatMapContainer.add(heatMap);
  Random posJitter=new Random();
  this.setBounds(200 + posJitter.nextInt(100),200 + posJitter.nextInt(100),630,500);
  setVisible(true);
}"
81551,"public boolean isWellSelected(Well well){
  if (selection.isEmpty())   return false;
  for (  Well w : selection) {
    if (well.getPlateColumn().equals(w.getPlateColumn()) && well.getPlateRow().equals(w.getPlateRow()) && well.getPlate().getBarcode().equals(w.getPlate().getBarcode()))     return true;
  }
  return false;
}","public boolean isWellSelected(Well well){
  if ((selection == null) || selection.isEmpty())   return false;
  for (  Well w : selection) {
    if (well.getPlateColumn().equals(w.getPlateColumn()) && well.getPlateRow().equals(w.getPlateRow()) && well.getPlate().getBarcode().equals(w.getPlate().getBarcode()))     return true;
  }
  return false;
}"
81552,"@Override public void paintComponent(Graphics graphics){
  super.paintComponent(graphics);
  Graphics2D g2d=(Graphics2D)graphics;
  Font font=new Font(""String_Node_Str"",Font.PLAIN,11);
  g2d.setFont(font);
  FontMetrics metrics=g2d.getFontMetrics(font);
  Insets insets=getBorder().getBorderInsets(this);
  RenderingHints rh=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  rh.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  g2d.setRenderingHints(rh);
  float scaleFactor=this.getWidth() / StrictMath.abs(maxScale - minScale);
  float lowerBound=mean - factor * sd;
  float upperBound=mean + factor * sd;
  int left=StrictMath.round((lowerBound) * scaleFactor);
  left=left < 0 ? insets.left : left;
  int top=insets.top / 2;
  int width=StrictMath.round(2 * factor * sd* scaleFactor);
  width=width > this.getWidth() ? this.getWidth() - insets.left - insets.right : width;
  int height=this.getHeight() - (insets.top / 2 + insets.bottom);
  int middle=StrictMath.round(height / 2 + top + 5);
  g2d.setColor(new Color(165,205,255));
  g2d.drawRect(left,top,width,height);
  g2d.fillRect(left,top,width,height);
  g2d.setColor(new Color(0,0,0));
  String s=HeatMapColorToolBar.format(lowerBound);
  g2d.drawString(s,left + metrics.stringWidth(""String_Node_Str""),middle);
  s=HeatMapColorToolBar.format(mean);
  g2d.drawString(s,mean * scaleFactor - metrics.stringWidth(s) / 2,middle);
  s=HeatMapColorToolBar.format(upperBound);
  g2d.drawString(s,upperBound * scaleFactor - metrics.stringWidth(s + ""String_Node_Str""),middle);
}","@Override public void paintComponent(Graphics graphics){
  super.paintComponent(graphics);
  Graphics2D g2d=(Graphics2D)graphics;
  Font font=new Font(""String_Node_Str"",Font.PLAIN,11);
  g2d.setFont(font);
  FontMetrics metrics=g2d.getFontMetrics(font);
  Insets insets=getBorder().getBorderInsets(this);
  RenderingHints rh=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  rh.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  g2d.setRenderingHints(rh);
  float scaleFactor=this.getWidth() / StrictMath.abs(maxScale - minScale);
  float lowerBound=mean - factor * sd;
  float upperBound=mean + factor * sd;
  int left=StrictMath.round((lowerBound - minScale) * scaleFactor);
  int top=insets.top / 2;
  int width=StrictMath.round(2 * factor * sd* scaleFactor);
  int right=left + width;
  int middle=(left + right) / 2;
  int height=this.getHeight() - (insets.top / 2 + insets.bottom);
  int halfHeight=StrictMath.round(height / 2 + top + 5);
  left=left < 0 ? 0 : left;
  width=width > this.getWidth() ? this.getWidth() : width;
  g2d.setColor(new Color(165,205,255));
  g2d.drawRect(left,top,width,height);
  g2d.fillRect(left,top,width,height);
  g2d.setColor(new Color(0,0,0));
  String s=HeatMapColorToolBar.format(lowerBound);
  g2d.drawString(s,left + metrics.stringWidth(""String_Node_Str""),halfHeight);
  s=HeatMapColorToolBar.format(mean);
  g2d.drawString(s,middle - metrics.stringWidth(s) / 2,halfHeight);
  s=HeatMapColorToolBar.format(upperBound);
  g2d.drawString(s,right - metrics.stringWidth(s + ""String_Node_Str""),halfHeight);
}"
81553,"public static void main(String[] args){
  ColorGradientDialog dialog=new ColorGradientDialog(""String_Node_Str"");
  dialog.setVisible(true);
  System.exit(0);
}","public static void main(String[] args){
  ColorGradientDialog dialog=new ColorGradientDialog(new HeatMapModel2());
  dialog.setVisible(true);
  System.exit(0);
}"
81554,"private JPanel initialize(){
  JPanel buttonPanel=new JPanel();
  buttonPanel.setLayout(new BoxLayout(buttonPanel,BoxLayout.LINE_AXIS));
  buttonPanel.add(Box.createHorizontalGlue());
  JButton buttonCancel=new JButton(""String_Node_Str"");
  buttonCancel.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onCancel();
    }
  }
);
  buttonPanel.add(buttonCancel);
  buttonPanel.add(Box.createRigidArea(new Dimension(10,0)));
  JButton buttonOK=new JButton(""String_Node_Str"");
  getRootPane().setDefaultButton(buttonOK);
  buttonOK.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onOK();
    }
  }
);
  buttonPanel.add(buttonOK);
  slider=new GradientSlider(MultiThumbSlider.HORIZONTAL);
  slider.setValues(currentGradient.getFractions(),currentGradient.getColors());
  slider.setPaintTicks(true);
  slider.putClientProperty(""String_Node_Str"",""String_Node_Str"");
  slider.putClientProperty(""String_Node_Str"",""String_Node_Str"");
  slider.setToolTipText(""String_Node_Str"" + ""String_Node_Str"");
  JPanel labelPanel=new JPanel();
  labelPanel.setLayout(new BoxLayout(labelPanel,BoxLayout.LINE_AXIS));
  labelPanel.add(minLabel);
  labelPanel.add(Box.createHorizontalGlue());
  labelPanel.add(medLabel);
  labelPanel.add(Box.createHorizontalGlue());
  labelPanel.add(maxLabel);
  JPanel contentPane=new JPanel(new GridBagLayout());
  GridBagConstraints constraints=new GridBagConstraints();
  constraints.insets=new Insets(5,15,0,15);
  constraints.fill=GridBagConstraints.BOTH;
  constraints.weightx=1;
  constraints.weighty=-1;
  constraints.gridx=0;
  int index=0;
  String[] populations=heatMapModel.getReferencePopulations();
  for (  String population : populations) {
    populationPanels.add(new PopulationPanel(this,population));
    constraints.gridy=index;
    contentPane.add(populationPanels.get(index++),constraints);
  }
  constraints.weighty=0.8;
  constraints.gridy=index;
  constraints.insets=new Insets(5,10,0,10);
  contentPane.add(slider,constraints);
  constraints.insets=new Insets(0,10,20,10);
  constraints.gridy=++index;
  constraints.weighty=-1;
  contentPane.add(labelPanel,constraints);
  constraints.insets=new Insets(0,10,0,10);
  constraints.gridy=++index;
  constraints.weighty=0.2;
  contentPane.add(buttonPanel,constraints);
  setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      onCancel();
    }
  }
);
  contentPane.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onCancel();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  return contentPane;
}","private JPanel initialize(){
  JPanel buttonPanel=new JPanel();
  buttonPanel.setLayout(new BoxLayout(buttonPanel,BoxLayout.LINE_AXIS));
  buttonPanel.add(Box.createHorizontalGlue());
  JButton buttonCancel=new JButton(""String_Node_Str"");
  buttonCancel.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onCancel();
    }
  }
);
  buttonPanel.add(buttonCancel);
  buttonPanel.add(Box.createRigidArea(new Dimension(10,0)));
  JButton buttonOK=new JButton(""String_Node_Str"");
  getRootPane().setDefaultButton(buttonOK);
  buttonOK.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onOK();
    }
  }
);
  buttonPanel.add(buttonOK);
  slider=new GradientSlider(MultiThumbSlider.HORIZONTAL);
  slider.setValues(currentGradient.getFractions(),currentGradient.getColors());
  slider.setPaintTicks(true);
  slider.putClientProperty(""String_Node_Str"",""String_Node_Str"");
  slider.putClientProperty(""String_Node_Str"",""String_Node_Str"");
  slider.setToolTipText(""String_Node_Str"" + ""String_Node_Str"");
  JPanel labelPanel=new JPanel();
  labelPanel.setLayout(new BoxLayout(labelPanel,BoxLayout.LINE_AXIS));
  labelPanel.add(minLabel);
  labelPanel.add(Box.createHorizontalGlue());
  labelPanel.add(medLabel);
  labelPanel.add(Box.createHorizontalGlue());
  labelPanel.add(maxLabel);
  populationPanel=new JPanel(new GridBagLayout());
  JPanel contentPane=new JPanel(new GridBagLayout());
  GridBagConstraints constraints=new GridBagConstraints();
  constraints.insets=new Insets(5,15,0,15);
  constraints.fill=GridBagConstraints.BOTH;
  constraints.weightx=1;
  constraints.weighty=-1;
  constraints.gridx=0;
  constraints.gridy=0;
  contentPane.add(populationPanel,constraints);
  constraints.weighty=0.8;
  constraints.gridy=1;
  constraints.insets=new Insets(5,10,0,10);
  contentPane.add(slider,constraints);
  constraints.insets=new Insets(0,10,20,10);
  constraints.gridy=2;
  constraints.weighty=-1;
  contentPane.add(labelPanel,constraints);
  constraints.insets=new Insets(0,10,0,10);
  constraints.gridy=3;
  constraints.weighty=0.2;
  contentPane.add(buttonPanel,constraints);
  setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
  addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      onCancel();
    }
  }
);
  contentPane.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      onCancel();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  return contentPane;
}"
81555,"@Override protected void paintComponent(Graphics graphics){
}","@Override protected synchronized void paintComponent(Graphics graphics){
}"
81556,"protected void configure(HeatMapModel2 model){
  heatMapModel=model;
}","protected void configure(HeatMapModel2 model){
  heatMapModel=model;
  heatMapModel.addChangeListener(this);
}"
81557,"private void sortPlatesAction(){
  PlateAttributeDialog dialog=new PlateAttributeDialog(heatMapModel);
  dialog.setVisible(true);
  String[] selectedAttributes=dialog.getSelectedAttributeTitles();
  List<String> inverted=Arrays.asList(selectedAttributes);
  Collections.reverse(inverted);
  for (  String key : inverted) {
    PlateComparators.PlateAttribute attribute=PlateComparators.getPlateAttributeByTitle(key);
    heatMapModel.sortPlates(attribute);
  }
  if (!dialog.descending.isSelected()) {
    heatMapModel.revertScreen();
  }
  heatMapModel.fireModelChanged();
  heatMapModel.setSortAttributeSelectionByTiles(selectedAttributes);
}","private void sortPlatesAction(){
  PlateAttributeDialog dialog=new PlateAttributeDialog(heatMapModel);
  dialog.setVisible(true);
  String[] selectedAttributes=dialog.getSelectedAttributeTitles();
  List<String> inverted=Arrays.asList(selectedAttributes);
  Collections.reverse(inverted);
  for (  String key : inverted) {
    PlateComparators.PlateAttribute attribute=PlateComparators.getPlateAttributeByTitle(key);
    heatMapModel.sortPlates(attribute);
  }
  if (!dialog.isDescending()) {
    heatMapModel.revertScreen();
  }
  heatMapModel.fireModelChanged();
  heatMapModel.setSortAttributeSelectionByTiles(selectedAttributes);
}"
81558,"private void outlierHandlingAction(ActionEvent event){
  JRadioButtonMenuItem menuItem=(JRadioButtonMenuItem)event.getSource();
  if (menuItem.isSelected()) {
    if (menuItem.getText().equals(""String_Node_Str"")) {
      heatMapModel.setReadoutRescaleStrategy(new GlobalMinMaxStrategy());
    }
 else     if (menuItem.getText().equals(""String_Node_Str"")) {
      heatMapModel.setReadoutRescaleStrategy(new QuantileSmoothedStrategy());
    }
 else {
      System.err.println(""String_Node_Str"" + menuItem.getName() + ""String_Node_Str"");
    }
  }
}","private void outlierHandlingAction(ActionEvent event){
  JRadioButtonMenuItem menuItem=(JRadioButtonMenuItem)event.getSource();
  if (menuItem.isSelected()) {
    if (menuItem.getText().equals(""String_Node_Str"")) {
      heatMapModel.setReadoutRescaleStrategy(new GlobalMinMaxStrategy());
    }
 else     if (menuItem.getText().equals(""String_Node_Str"")) {
      heatMapModel.setReadoutRescaleStrategy(new QuantileSmoothedStrategy());
    }
 else {
      System.err.println(""String_Node_Str"" + menuItem.getName() + ""String_Node_Str"");
    }
    heatMapModel.fireModelChanged();
  }
}"
81559,"public static void main(String[] args){
  JFrame frame=new JFrame();
  frame.setSize(new Dimension(200,500));
  frame.add(new HeatTrellis());
  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  frame.setVisible(true);
}","public static void main(String[] args){
  JFrame frame=new JFrame();
  frame.setSize(new Dimension(200,500));
  frame.add(new HeatTrellis(new HeatMapModel2()));
  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  frame.setVisible(true);
}"
81560,"public void configure(HeatMapModel2 model,List<Plate> plates){
  this.heatMapModel=model;
  heatMapModel.addChangeListener(this);
  this.setPlates(plates);
}","public void configure(HeatMapModel2 model){
  this.heatMapModel=model;
  heatMapModel.addChangeListener(this);
}"
81561,"private void repopulatePlateGrid(){
  List<HeatScreen> heatmapSelection=getFilteredHeatMap();
  int[] rowsColumns=calculateTrellisDimensions(heatmapSelection.size());
  int numRows=rowsColumns[0];
  int numColumns=rowsColumns[1];
  heatMapModel.updateTrellisConfiguration(numRows,numColumns);
  numColumns=updateTrellisTableLayout(numRows,numColumns);
  int plateNameFontSize=Utils.isWindowsPlatform() ? 8 : 12;
  Font barcodeFont=new Font(""String_Node_Str"",Font.PLAIN,plateNameFontSize);
  for (int i=0; i < heatmapSelection.size(); i++) {
    HeatScreen heatMapPanel=heatmapSelection.get(i);
    Plate plate=heatMapPanel.getPlate();
    int rowIndex=i / numColumns;
    String gridPosition=(i - rowIndex * numColumns) + ""String_Node_Str"" + (rowIndex);
    JPanel plateContainer=new JPanel();
    TitledBorder titledBorder=new TitledBorder(BorderFactory.createBevelBorder(1),plate.getBarcode(),TitledBorder.CENTER,TitledBorder.BOTTOM,barcodeFont);
    plateContainer.setBorder(titledBorder);
    plateContainer.setLayout(new BorderLayout());
    String title=plate.getBarcode();
    FontMetrics metrics=plateContainer.getFontMetrics(barcodeFont);
    if (metrics.stringWidth(title) >= HEATMAP_WIDTH) {
      while (metrics.stringWidth(title + ""String_Node_Str"") > HEATMAP_WIDTH) {
        if (title.length() < 2) {
          break;
        }
        title=title.substring(0,title.length() - 1);
      }
      titledBorder.setTitle(title + ""String_Node_Str"");
    }
    plateContainer.add(heatMapPanel,BorderLayout.CENTER);
    heatMapsContainer.add(plateContainer,gridPosition);
  }
  updateContainerDimensions(numRows,numColumns);
  JPanel firstPlate=getFistPlate();
  if (!(firstPlate == null)) {
    Insets plateInsets=firstPlate.getInsets();
    updateContainerDimensions(numRows,numColumns,(plateInsets.left + plateInsets.right),(plateInsets.top + plateInsets.bottom));
  }
  invalidate();
  updateUI();
  repaint();
}","private void repopulatePlateGrid(){
  List<HeatScreen> heatmapSelection=createHeatMaps();
  int[] rowsColumns=calculateTrellisDimensions(heatmapSelection.size());
  int numRows=rowsColumns[0];
  int numColumns=rowsColumns[1];
  heatMapModel.updateTrellisConfiguration(numRows,numColumns);
  numColumns=updateTrellisTableLayout(numRows,numColumns);
  int plateNameFontSize=Utils.isWindowsPlatform() ? 8 : 12;
  Font barcodeFont=new Font(""String_Node_Str"",Font.PLAIN,plateNameFontSize);
  for (int i=0; i < heatmapSelection.size(); i++) {
    HeatScreen heatMapPanel=heatmapSelection.get(i);
    Plate plate=heatMapPanel.getPlate();
    int rowIndex=i / numColumns;
    String gridPosition=(i - rowIndex * numColumns) + ""String_Node_Str"" + (rowIndex);
    JPanel plateContainer=new JPanel();
    TitledBorder titledBorder=new TitledBorder(BorderFactory.createBevelBorder(1),plate.getBarcode(),TitledBorder.CENTER,TitledBorder.BOTTOM,barcodeFont);
    plateContainer.setBorder(titledBorder);
    plateContainer.setLayout(new BorderLayout());
    String title=plate.getBarcode();
    FontMetrics metrics=plateContainer.getFontMetrics(barcodeFont);
    if (metrics.stringWidth(title) >= HEATMAP_WIDTH) {
      while (metrics.stringWidth(title + ""String_Node_Str"") > HEATMAP_WIDTH) {
        if (title.length() < 2) {
          break;
        }
        title=title.substring(0,title.length() - 1);
      }
      titledBorder.setTitle(title + ""String_Node_Str"");
    }
    plateContainer.add(heatMapPanel,BorderLayout.CENTER);
    heatMapsContainer.add(plateContainer,gridPosition);
  }
  updateContainerDimensions(numRows,numColumns);
  JPanel firstPlate=getFistPlate();
  if (!(firstPlate == null)) {
    Insets plateInsets=firstPlate.getInsets();
    updateContainerDimensions(numRows,numColumns,(plateInsets.left + plateInsets.right),(plateInsets.top + plateInsets.bottom));
  }
  invalidate();
  updateUI();
  repaint();
}"
81562,"public HeatTrellis(HeatMapModel2 model,List<Plate> plates){
  initialize();
  configure(model,plates);
  ToolTipManager.sharedInstance().setDismissDelay(7500);
  ToolTipManager.sharedInstance().setInitialDelay(500);
  addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent componentEvent){
      if (getWidth() > 0) {
        repopulatePlateGrid();
      }
    }
  }
);
  heatMapsContainer.setDoubleBuffered(true);
  setMinimumSize(new Dimension(PREFERRED_WITH,PREFERRED_HEIGHT));
  setPreferredSize(new Dimension(PREFERRED_WITH,PREFERRED_HEIGHT));
  new PanelImageExporter(this,true);
}","public HeatTrellis(HeatMapModel2 model){
  this();
  configure(model);
}"
81563,"public ScreenViewer(List<Plate> plates){
  heatMapModel=new HeatMapModel2();
  initialize();
  configure(plates);
  setBounds(150,150,810,600);
  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  setVisible(true);
}","public ScreenViewer(List<Plate> plates){
  heatMapModel=new HeatMapModel2();
  heatMapModel.setScreen(plates);
  initialize();
  configure();
  setBounds(150,150,810,600);
  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  setVisible(true);
}"
81564,"private void configure(List<Plate> plates){
  heatTrellis.configure(heatMapModel,plates);
  toolbar.configure(heatMapModel);
  colorbar.configure(heatMapModel);
}","private void configure(){
  heatTrellis.configure(heatMapModel);
  toolbar.configure(heatMapModel);
  colorbar.configure(heatMapModel);
}"
81565,"private void initialize(){
  toolbar=new HeatMapInputToolbar();
  colorbar=new HeatMapColorToolBar();
  heatTrellis=new HeatTrellis(heatMapModel);
  add(toolbar,BorderLayout.NORTH);
  add(heatTrellis,BorderLayout.CENTER);
  add(colorbar,BorderLayout.SOUTH);
  menus=new HeatMapMenu(this);
  setTitle(""String_Node_Str"");
  setJMenuBar(menus);
}","private void initialize(){
  toolbar=new HeatMapInputToolbar();
  colorbar=new HeatMapColorToolBar();
  heatTrellis=new HeatTrellis();
  add(toolbar,BorderLayout.NORTH);
  add(heatTrellis,BorderLayout.CENTER);
  add(colorbar,BorderLayout.SOUTH);
  HeatMapMenu menus=new HeatMapMenu(this);
  setTitle(""String_Node_Str"");
  setJMenuBar(menus);
}"
81566,"public boolean isWellSelected(Well well){
  for (  Well w : selection) {
    if (well.getPlateColumn().equals(w.getPlateColumn()) && well.getPlateRow().equals(w.getPlateRow()) && well.getPlate().getBarcode().equals(w.getPlate().getBarcode()))     return true;
  }
  return false;
}","public boolean isWellSelected(Well well){
  if (selection.isEmpty())   return false;
  for (  Well w : selection) {
    if (well.getPlateColumn().equals(w.getPlateColumn()) && well.getPlateRow().equals(w.getPlateRow()) && well.getPlate().getBarcode().equals(w.getPlate().getBarcode()))     return true;
  }
  return false;
}"
81567,"private void outlierHandlingAction(ActionEvent event){
  JRadioButtonMenuItem menuItem=(JRadioButtonMenuItem)event.getSource();
  if (!menuItem.isSelected()) {
    if (menuItem.getName().equals(OUTLIER_HANDLING_ORIGINAL)) {
      heatMapModel.setReadoutRescaleStrategy(new GlobalMinMaxStrategy());
    }
 else     if (menuItem.getName().equals(OUTLIER_HANDLING_SMOOTHED)) {
      heatMapModel.setReadoutRescaleStrategy(new QuantileSmoothedStrategy());
    }
 else {
      System.err.println(""String_Node_Str"" + menuItem.getName() + ""String_Node_Str"");
    }
  }
}","private void outlierHandlingAction(ActionEvent event){
  JRadioButtonMenuItem menuItem=(JRadioButtonMenuItem)event.getSource();
  if (menuItem.isSelected()) {
    if (menuItem.getText().equals(OUTLIER_HANDLING_ORIGINAL)) {
      heatMapModel.setReadoutRescaleStrategy(new GlobalMinMaxStrategy());
    }
 else     if (menuItem.getText().equals(OUTLIER_HANDLING_SMOOTHED)) {
      heatMapModel.setReadoutRescaleStrategy(new QuantileSmoothedStrategy());
    }
 else {
      System.err.println(""String_Node_Str"" + menuItem.getName() + ""String_Node_Str"");
    }
  }
}"
81568,"@Override protected BufferedDataTable[] execute(BufferedDataTable[] inData,ExecutionContext exec) throws Exception {
  BufferedDataTable input=inData[0];
  DataTableSpec inputSpec=input.getDataTableSpec();
  List<Attribute> parameter=new ArrayList<Attribute>();
  for (  String item : parameterNames.getIncludeList()) {
    Attribute attribute=new InputTableAttribute(item,input);
    if (attribute.getType().equals(DoubleCell.TYPE)) {
      parameter.add(attribute);
    }
 else {
      logger.warn(""String_Node_Str"" + attribute.getName() + ""String_Node_Str"");
    }
  }
  Attribute groupingAttribute=new InputTableAttribute(this.groupingColumn.getStringValue(),input);
  Map<Object,List<DataRow>> subsets=AttributeUtils.splitRowsGeneric(input,groupingAttribute);
  BufferedDataContainer keepContainer=exec.createDataContainer(inputSpec);
  BufferedDataContainer discartContainer=exec.createDataContainer(inputSpec);
  int S=subsets.size();
  int s=1;
  for (  Object key : subsets.keySet()) {
    List<DataRow> rowSubset=subsets.get(key);
    RealMatrix data=extractMatrix(rowSubset,parameter);
    int N=data.getColumnDimension();
    int M=data.getRowDimension();
    if (M == 0) {
      logger.warn(""String_Node_Str"" + key + ""String_Node_Str"");
    }
 else {
      double[] lowerBound=new double[N];
      double[] upperBound=new double[N];
      if (method.getStringValue().equals(""String_Node_Str"")) {
        for (int c=0; c < N; ++c) {
          RealVector vect=data.getColumnVector(c);
          DescriptiveStatistics stats=new DescriptiveStatistics();
          for (          double value : vect.getData()) {
            stats.addValue(value);
          }
          double lowerQuantile=stats.getPercentile(25);
          double upperQuantile=stats.getPercentile(85);
          double whisker=factor.getDoubleValue() * Math.abs(lowerQuantile - upperQuantile);
          lowerBound[c]=lowerQuantile - whisker;
          upperBound[c]=upperQuantile + whisker;
        }
      }
 else {
        for (int c=0; c < N; ++c) {
          RealVector vect=data.getColumnVector(c);
          double mean=StatUtils.mean(vect.getData());
          double sd=Math.sqrt(StatUtils.variance(vect.getData()));
          lowerBound[c]=mean - factor.getDoubleValue() * sd;
          upperBound[c]=mean + factor.getDoubleValue() * sd;
        }
      }
      if (rule.getBooleanValue()) {
        for (        DataRow row : rowSubset) {
          int c=0;
          for (          Attribute column : parameter) {
            Double value=(Double)column.getValue(row);
            if ((value != null) && (lowerBound[c] <= value) && (value <= upperBound[c])) {
              break;
            }
 else {
              c++;
            }
          }
          if (c != N) {
            keepContainer.addRowToTable(row);
          }
 else {
            discartContainer.addRowToTable(row);
          }
        }
      }
 else {
        for (        DataRow row : rowSubset) {
          int c=0;
          for (          Attribute column : parameter) {
            Double value=(Double)column.getValue(row);
            if ((value != null) && (lowerBound[c] <= value) && (value <= upperBound[c])) {
              c++;
            }
 else {
              break;
            }
          }
          if (c == N) {
            keepContainer.addRowToTable(row);
          }
 else {
            discartContainer.addRowToTable(row);
          }
        }
      }
    }
    BufTableUtils.updateProgress(exec,s++,S);
  }
  keepContainer.close();
  discartContainer.close();
  return new BufferedDataTable[]{keepContainer.getTable(),discartContainer.getTable()};
}","@Override protected BufferedDataTable[] execute(BufferedDataTable[] inData,ExecutionContext exec) throws Exception {
  BufferedDataTable input=inData[0];
  DataTableSpec inputSpec=input.getDataTableSpec();
  List<Attribute> parameter=new ArrayList<Attribute>();
  for (  String item : parameterNames.getIncludeList()) {
    Attribute attribute=new InputTableAttribute(item,input);
    if (attribute.getType().isCompatible(DoubleValue.class)) {
      parameter.add(attribute);
    }
 else {
      logger.warn(""String_Node_Str"" + attribute.getName() + ""String_Node_Str"");
    }
  }
  Attribute groupingAttribute=new InputTableAttribute(this.groupingColumn.getStringValue(),input);
  Map<Object,List<DataRow>> subsets=AttributeUtils.splitRowsGeneric(input,groupingAttribute);
  BufferedDataContainer keepContainer=exec.createDataContainer(inputSpec);
  BufferedDataContainer discartContainer=exec.createDataContainer(inputSpec);
  int S=subsets.size();
  int s=1;
  for (  Object key : subsets.keySet()) {
    List<DataRow> rowSubset=subsets.get(key);
    RealMatrix data=extractMatrix(rowSubset,parameter);
    int N=data.getColumnDimension();
    int M=data.getRowDimension();
    if (M == 0) {
      logger.warn(""String_Node_Str"" + key + ""String_Node_Str"");
    }
 else {
      double[] lowerBound=new double[N];
      double[] upperBound=new double[N];
      if (method.getStringValue().equals(""String_Node_Str"")) {
        for (int c=0; c < N; ++c) {
          RealVector vect=data.getColumnVector(c);
          DescriptiveStatistics stats=new DescriptiveStatistics();
          for (          double value : vect.getData()) {
            stats.addValue(value);
          }
          double lowerQuantile=stats.getPercentile(25);
          double upperQuantile=stats.getPercentile(85);
          double whisker=factor.getDoubleValue() * Math.abs(lowerQuantile - upperQuantile);
          lowerBound[c]=lowerQuantile - whisker;
          upperBound[c]=upperQuantile + whisker;
        }
      }
 else {
        for (int c=0; c < N; ++c) {
          RealVector vect=data.getColumnVector(c);
          double mean=StatUtils.mean(vect.getData());
          double sd=Math.sqrt(StatUtils.variance(vect.getData()));
          lowerBound[c]=mean - factor.getDoubleValue() * sd;
          upperBound[c]=mean + factor.getDoubleValue() * sd;
        }
      }
      if (rule.getBooleanValue()) {
        for (        DataRow row : rowSubset) {
          int c=0;
          for (          Attribute column : parameter) {
            DataCell valueCell=row.getCell(((InputTableAttribute)column).getColumnIndex());
            if (valueCell.isMissing()) {
              continue;
            }
            Double value=((DoubleValue)valueCell).getDoubleValue();
            if ((value != null) && (lowerBound[c] <= value) && (value <= upperBound[c])) {
              break;
            }
 else {
              c++;
            }
          }
          if (c != N) {
            keepContainer.addRowToTable(row);
          }
 else {
            discartContainer.addRowToTable(row);
          }
        }
      }
 else {
        for (        DataRow row : rowSubset) {
          int c=0;
          for (          Attribute column : parameter) {
            DataCell valueCell=row.getCell(((InputTableAttribute)column).getColumnIndex());
            if (valueCell.isMissing()) {
              c++;
              continue;
            }
            Double value=((DoubleValue)valueCell).getDoubleValue();
            if ((value != null) && (lowerBound[c] <= value) && (value <= upperBound[c])) {
              c++;
            }
 else {
              break;
            }
          }
          if (c == N) {
            keepContainer.addRowToTable(row);
          }
 else {
            discartContainer.addRowToTable(row);
          }
        }
      }
    }
    BufTableUtils.updateProgress(exec,s++,S);
  }
  keepContainer.close();
  discartContainer.close();
  return new BufferedDataTable[]{keepContainer.getTable(),discartContainer.getTable()};
}"
81569,"@Override public NodeDialogPane createNodeDialogPane(){
  return new AbstractScreenTrafoDialog(){
    @Override protected void createControls(){
      addDialogComponent(new DialogComponentStringSelection(createMethodSelection(),""String_Node_Str"",createMethodUsageOptions()));
      addDialogComponent(new DialogComponentNumberEdit(createFactor(),""String_Node_Str""));
      addDialogComponent(new DialogComponentColumnNameSelection(createGrouping(),""String_Node_Str"",0,new Class[]{StringValue.class,IntValue.class,DateAndTimeValue.class}));
      addDialogComponent(new DialogComponentColumnFilter(createPropReadoutSelection(),0,true,new TdsNumericFilter()));
      addDialogComponent(new DialogComponentBoolean(createRule(),""String_Node_Str""));
    }
  }
;
}","@Override public NodeDialogPane createNodeDialogPane(){
  return new AbstractScreenTrafoDialog(){
    @Override protected void createControls(){
      addDialogComponent(new DialogComponentStringSelection(createMethodSelection(),""String_Node_Str"",createMethodUsageOptions()));
      addDialogComponent(new DialogComponentNumberEdit(createFactor(),""String_Node_Str""));
      addDialogComponent(new DialogComponentColumnNameSelection(createGrouping(),""String_Node_Str"",0,new Class[]{StringValue.class,IntValue.class}));
      addDialogComponent(new DialogComponentColumnFilter(createPropReadoutSelection(),0,true,new TdsNumericFilter()));
      addDialogComponent(new DialogComponentBoolean(createRule(),""String_Node_Str""));
    }
  }
;
}"
81570,"@Override protected void createControls(){
  addDialogComponent(new DialogComponentStringSelection(createMethodSelection(),""String_Node_Str"",createMethodUsageOptions()));
  addDialogComponent(new DialogComponentNumberEdit(createFactor(),""String_Node_Str""));
  addDialogComponent(new DialogComponentColumnNameSelection(createGrouping(),""String_Node_Str"",0,new Class[]{StringValue.class,IntValue.class,DateAndTimeValue.class}));
  addDialogComponent(new DialogComponentColumnFilter(createPropReadoutSelection(),0,true,new TdsNumericFilter()));
  addDialogComponent(new DialogComponentBoolean(createRule(),""String_Node_Str""));
}","@Override protected void createControls(){
  addDialogComponent(new DialogComponentStringSelection(createMethodSelection(),""String_Node_Str"",createMethodUsageOptions()));
  addDialogComponent(new DialogComponentNumberEdit(createFactor(),""String_Node_Str""));
  addDialogComponent(new DialogComponentColumnNameSelection(createGrouping(),""String_Node_Str"",0,new Class[]{StringValue.class,IntValue.class}));
  addDialogComponent(new DialogComponentColumnFilter(createPropReadoutSelection(),0,true,new TdsNumericFilter()));
  addDialogComponent(new DialogComponentBoolean(createRule(),""String_Node_Str""));
}"
81571,"@Override protected NodeDialogPane createNodeDialogPane(){
  return new AbstractConfigDialog(){
    @Override protected void createControls(){
      addDialogComponent(new DialogComponentNumberEdit(createLowerBoundSetting(),""String_Node_Str""));
      addDialogComponent(new DialogComponentNumberEdit(createUpperBoundSetting(),""String_Node_Str""));
      addDialogComponent(new DialogComponentButtonGroup(createFilterRuleMatchSetting(),false,""String_Node_Str"",RangeFilterV2Model.FILTER_RULE_MATCHALL));
      addDialogComponent(new DialogComponentButtonGroup(createFilterRuleIncludeSetting(),false,""String_Node_Str"",RangeFilterV2Model.FILTER_RULE_INCLUDE));
      addDialogComponent(new DialogComponentColumnFilter(createParameterFilterSetting(),0,true,new NumericFilter()));
    }
  }
;
}","@Override protected NodeDialogPane createNodeDialogPane(){
  return new RangeFilterV2NodeDialog();
}"
81572,"@Override public RangeFilterV2Model createNodeModel(){
  return new RangeFilterV2Model();
}","@Override public RangeFilterV2NodeModel createNodeModel(){
  return new RangeFilterV2NodeModel(1);
}"
81573,"@Override public NodeView<RangeFilterV2Model> createNodeView(int i,RangeFilterV2Model rangeFilterModel){
  return null;
}","@Override public NodeView<RangeFilterV2NodeModel> createNodeView(int i,RangeFilterV2NodeModel rangeFilterModel){
  return null;
}"
81574,"/** 
 * {@inheritDoc}
 */
@Override protected BufferedDataTable[] execute(final BufferedDataTable[] inData,final ExecutionContext exec) throws Exception {
  BufferedDataTable inTable=inData[0];
  DataTableSpec inSpec=inTable.getSpec();
  int nBins=((SettingsModelIntegerBounded)getModelSetting(CFG_BIN)).getIntValue();
  String aggColumn=((SettingsModelString)getModelSetting(CFG_AGGR)).getStringValue();
  List<String> selColumns=((SettingsModelFilterString)getModelSetting(CFG_COLUMN)).getIncludeList();
  boolean hasRefColumn=true;
  String refColumn=((SettingsModelString)getModelSetting(CFG_REFCOLUMN)).getStringValue();
  if (refColumn == null)   hasRefColumn=false;
  String refString=null;
  if (hasRefColumn)   refString=((SettingsModelString)getModelSetting(CFG_REFSTRING)).getStringValue();
  int aggIdx=inSpec.findColumnIndex(aggColumn);
  int refIdx=-1;
  if (hasRefColumn)   refIdx=inSpec.findColumnIndex(refColumn);
  List<Double> doubleList;
  int i=1;
  int n=selColumns.size();
  double progress=0.0;
  int countMissing;
  BufferedDataContainer con=exec.createDataContainer(createOutSpec(inTable.getSpec()));
  rowCount=0;
  for (  String col : selColumns) {
    int colIdx=inSpec.findColumnIndex(col);
    countMissing=0;
    HashMap<Object,List<Double>> refData=new HashMap<Object,List<Double>>();
    HashMap<Object,List<Double>> allData=new HashMap<Object,List<Double>>();
    for (    DataRow row : inTable) {
      DataCell aggCell=row.getCell(aggIdx);
      String aggString=null;
      if (!aggCell.isMissing())       aggString=((StringCell)aggCell).getStringValue();
      String label=null;
      if (hasRefColumn) {
        DataCell labelCell=row.getCell(refIdx);
        if (!aggCell.isMissing())         label=((StringCell)labelCell).getStringValue();
      }
      DataCell valueCell=row.getCell(colIdx);
      Double value=null;
      if (!valueCell.isMissing())       value=((DoubleValue)valueCell).getDoubleValue();
      if (aggString == null || value == null || (hasRefColumn && label == null)) {
        countMissing++;
        continue;
      }
      if (hasRefColumn) {
        if (label.equals(refString)) {
          if (refData.containsKey(aggString))           doubleList=refData.get(aggString);
 else           doubleList=new ArrayList<Double>();
          doubleList.add(value);
          refData.put(aggString,doubleList);
        }
      }
      if (allData.containsKey(aggString))       doubleList=allData.get(aggString);
 else       doubleList=new ArrayList<Double>();
      doubleList.add(value);
      allData.put(aggString,doubleList);
      exec.checkCanceled();
    }
    if (!hasRefColumn) {
      refData=allData;
    }
    if (refData.isEmpty()) {
      setWarningMessage(""String_Node_Str"" + col);
      continue;
    }
    if (countMissing > 0) {
      this.logger.info(col + ""String_Node_Str"" + countMissing+ ""String_Node_Str"");
    }
    BinningAnalysis binAnalysis=new BinningAnalysis(refData,nBins,col);
    HashMap<Object,List<BinningData>> ret=binAnalysis.getZscore(allData);
    for (    Object aggLabel : ret.keySet()) {
      DataRow[] newRows=createDataRow(col,(String)aggLabel,ret.get(aggLabel));
      for (      DataRow row : newRows) {
        con.addRowToTable(row);
      }
    }
    progress=progress + 1.0 / n;
    i++;
    exec.setProgress(progress,""String_Node_Str"" + col + ""String_Node_Str""+ i+ ""String_Node_Str""+ n+ ""String_Node_Str"");
  }
  con.close();
  return new BufferedDataTable[]{con.getTable()};
}","/** 
 * {@inheritDoc}
 */
@Override protected BufferedDataTable[] execute(final BufferedDataTable[] inData,final ExecutionContext exec) throws Exception {
  BufferedDataTable inTable=inData[0];
  DataTableSpec inSpec=inTable.getSpec();
  int nBins=((SettingsModelIntegerBounded)getModelSetting(CFG_BIN)).getIntValue();
  String aggColumn=((SettingsModelString)getModelSetting(CFG_AGGR)).getStringValue();
  List<String> selColumns=((SettingsModelFilterString)getModelSetting(CFG_COLUMN)).getIncludeList();
  boolean hasRefColumn=true;
  String refColumn=((SettingsModelString)getModelSetting(CFG_REFCOLUMN)).getStringValue();
  if (refColumn == null)   hasRefColumn=false;
  String refString=null;
  if (hasRefColumn)   refString=((SettingsModelString)getModelSetting(CFG_REFSTRING)).getStringValue();
  int aggIdx=inSpec.findColumnIndex(aggColumn);
  int refIdx=-1;
  if (hasRefColumn)   refIdx=inSpec.findColumnIndex(refColumn);
  List<Double> doubleList;
  int i=1;
  int n=selColumns.size();
  double progress=0.0;
  int countMissing;
  BufferedDataContainer con=exec.createDataContainer(createOutSpec(inTable.getSpec()));
  rowCount=0;
  for (  String col : selColumns) {
    int colIdx=inSpec.findColumnIndex(col);
    countMissing=0;
    HashMap<Object,List<Double>> refData=new HashMap<Object,List<Double>>();
    HashMap<Object,List<Double>> allData=new HashMap<Object,List<Double>>();
    for (    DataRow row : inTable) {
      DataCell aggCell=row.getCell(aggIdx);
      String aggString=null;
      if (!aggCell.isMissing())       aggString=((StringCell)aggCell).getStringValue();
      String label=null;
      if (hasRefColumn) {
        DataCell labelCell=row.getCell(refIdx);
        if (!labelCell.isMissing())         label=((StringCell)labelCell).getStringValue();
      }
      DataCell valueCell=row.getCell(colIdx);
      Double value=null;
      if (!valueCell.isMissing())       value=((DoubleValue)valueCell).getDoubleValue();
      if (aggString == null || value == null || (hasRefColumn && label == null)) {
        countMissing++;
        continue;
      }
      if (hasRefColumn) {
        if (label.equals(refString)) {
          if (refData.containsKey(aggString))           doubleList=refData.get(aggString);
 else           doubleList=new ArrayList<Double>();
          doubleList.add(value);
          refData.put(aggString,doubleList);
        }
      }
      if (allData.containsKey(aggString))       doubleList=allData.get(aggString);
 else       doubleList=new ArrayList<Double>();
      doubleList.add(value);
      allData.put(aggString,doubleList);
      exec.checkCanceled();
    }
    if (!hasRefColumn) {
      refData=allData;
    }
    if (refData.isEmpty()) {
      setWarningMessage(""String_Node_Str"" + col);
      continue;
    }
    if (countMissing > 0) {
      this.logger.info(col + ""String_Node_Str"" + countMissing+ ""String_Node_Str"");
    }
    BinningAnalysis binAnalysis=new BinningAnalysis(refData,nBins,col);
    HashMap<Object,List<BinningData>> ret=binAnalysis.getZscore(allData);
    for (    Object aggLabel : ret.keySet()) {
      DataRow[] newRows=createDataRow(col,(String)aggLabel,ret.get(aggLabel));
      for (      DataRow row : newRows) {
        con.addRowToTable(row);
      }
    }
    progress=progress + 1.0 / n;
    i++;
    exec.setProgress(progress,""String_Node_Str"" + col + ""String_Node_Str""+ i+ ""String_Node_Str""+ n+ ""String_Node_Str"");
  }
  con.close();
  return new BufferedDataTable[]{con.getTable()};
}"
81575,"@Override protected BufferedDataTable[] execute(BufferedDataTable[] inData,ExecutionContext exec) throws Exception {
  BufferedDataTable input=inData[0];
  Attribute treatmentAttribute=new InputTableAttribute(this.treatmentAttribute.getStringValue(),input);
  String libraryName=AbstractScreenTrafoModel.getAndValidateTreatment(reference);
  String referenceName=AbstractScreenTrafoModel.getAndValidateTreatment(library);
  List<Attribute> parameters=getParameterList(input);
  Map<String,List<DataRow>> groupedRows=AttributeUtils.splitRows(input,treatmentAttribute);
  List<DataRow> libraryRows=groupedRows.get(libraryName);
  List<DataRow> referenceRows=groupedRows.get(referenceName);
  int progress=parameters.size();
  BufTableUtils.updateProgress(exec,progress / 2,progress);
  BufferedDataContainer container=exec.createDataContainer(new DataTableSpec(getListSpec()));
  MutualInformation mutualinfo=new MutualInformation();
  mutualinfo.set_base(logbase.getDoubleValue());
  mutualinfo.set_method(method.getStringValue());
  DataCell[] cells=new DataCell[8];
  int p=0;
  for (  Attribute parameter : parameters) {
    Double[] x=getDataVec(libraryRows,parameter);
    Double[] y=getDataVec(referenceRows,parameter);
    mutualinfo.set_vectors(x,y);
    Double[] res=mutualinfo.calculate();
    if (binning.getIntValue() == 0) {
      mutualinfo.set_binning();
    }
 else {
      mutualinfo.set_binning(binning.getIntValue());
    }
    int[] bins=mutualinfo.get_binning();
    cells[0]=new StringCell(parameter.getName());
    cells[1]=new DoubleCell(res[0]);
    cells[2]=new DoubleCell(res[1]);
    cells[3]=new DoubleCell(res[2]);
    cells[4]=new IntCell(bins[0]);
    cells[5]=new IntCell(bins[1]);
    cells[6]=new DoubleCell(mutualinfo.get_logbase());
    cells[7]=new StringCell(mutualinfo.get_method());
    container.addRowToTable(new DefaultRow(""String_Node_Str"" + p,cells));
    BufTableUtils.updateProgress(exec,(progress + p++) / 2,progress);
    exec.checkCanceled();
  }
  container.close();
  return new BufferedDataTable[]{container.getTable()};
}","@Override protected BufferedDataTable[] execute(BufferedDataTable[] inData,ExecutionContext exec) throws Exception {
  BufferedDataTable input=inData[0];
  Attribute treatmentAttribute=new InputTableAttribute(this.treatmentAttribute.getStringValue(),input);
  String libraryName=AbstractScreenTrafoModel.getAndValidateTreatment(reference);
  String referenceName=AbstractScreenTrafoModel.getAndValidateTreatment(library);
  List<Attribute> parameters=getParameterList(input);
  Map<String,List<DataRow>> groupedRows=AttributeUtils.splitRows(input,treatmentAttribute);
  List<DataRow> libraryRows=groupedRows.get(libraryName);
  List<DataRow> referenceRows=groupedRows.get(referenceName);
  int progress=parameters.size();
  BufTableUtils.updateProgress(exec,progress / 2,progress);
  BufferedDataContainer container=exec.createDataContainer(new DataTableSpec(getListSpec()));
  MutualInformation mutualinfo=new MutualInformation();
  mutualinfo.set_base(logbase.getDoubleValue());
  mutualinfo.set_method(method.getStringValue());
  DataCell[] cells=new DataCell[8];
  int p=0;
  for (  Attribute parameter : parameters) {
    Double[] x=getDataVec(libraryRows,parameter);
    Double[] y=getDataVec(referenceRows,parameter);
    mutualinfo.set_vectors(x,y);
    if (binning.getIntValue() == 0) {
      mutualinfo.set_binning();
    }
 else {
      mutualinfo.set_binning(binning.getIntValue());
    }
    int[] bins=mutualinfo.get_binning();
    Double[] res=mutualinfo.calculate();
    cells[0]=new StringCell(parameter.getName());
    cells[1]=new DoubleCell(res[0]);
    cells[2]=new DoubleCell(res[1]);
    cells[3]=new DoubleCell(res[2]);
    cells[4]=new IntCell(bins[0]);
    cells[5]=new IntCell(bins[1]);
    cells[6]=new DoubleCell(mutualinfo.get_logbase());
    cells[7]=new StringCell(mutualinfo.get_method());
    container.addRowToTable(new DefaultRow(""String_Node_Str"" + p,cells));
    BufTableUtils.updateProgress(exec,(progress + p++) / 2,progress);
    exec.checkCanceled();
  }
  container.close();
  return new BufferedDataTable[]{container.getTable()};
}"
81576,"public BScore(RealMatrix matrix){
  input=matrix;
  original=matrix.copy();
  rowResiduals=new double[matrix.getRowDimension()];
  colResiduals=new double[matrix.getColumnDimension()];
  doMedianPolish(3);
  resiudalMAD=calcResidualMAD();
}","public BScore(RealMatrix matrix){
  residualMatrix=matrix;
  original=matrix.copy();
  rowEffect=new double[matrix.getRowDimension()];
  colEffect=new double[matrix.getColumnDimension()];
  medianPolish(3);
  resiudalMAD=calcResidualMAD();
}"
81577,"private double calcResidualMAD(){
  DescriptiveStatistics stats=new DescriptiveStatistics();
  for (  double colResidual : colResiduals) {
    if (colResidual == Double.NaN)     continue;
    stats.addValue(colResidual);
  }
  for (  double rowResidual : rowResiduals) {
    if (rowResidual == Double.NaN)     continue;
    stats.addValue(rowResidual);
  }
  stats.setVarianceImpl(new MadStatistic(stats.getPercentile(50)));
  return stats.getStandardDeviation();
}","/** 
 * @return median absolute deviation of the residuals
 */
private double calcResidualMAD(){
  ExtDescriptiveStats stats=new ExtDescriptiveStats();
  for (int row=0; row < residualMatrix.getRowDimension(); row++) {
    double[] rowResiduals=residualMatrix.getRow(row);
    for (int i=0; i < rowResiduals.length; i++) {
      if (((Double)rowResiduals[i]).isNaN())       continue;
      stats.addValue(rowResiduals[i]);
    }
  }
  return stats.getMad();
}"
81578,"public double get(int plateRow,int plateColumn){
  double predicted=inputMean + rowResiduals[plateRow] + colResiduals[plateColumn];
  return (original.getEntry(plateRow,plateColumn) - predicted) / resiudalMAD;
}","/** 
 * @param plateRow
 * @param plateColumn
 * @return bscore value of a certain position
 */
public double get(int plateRow,int plateColumn){
  return residualMatrix.getEntry(plateRow,plateColumn) / resiudalMAD;
}"
81579,"public static void main(String[] args){
  Array2DRowRealMatrix inMatrix=new Array2DRowRealMatrix(new double[][]{{13,17,26,18,29},{42,48,57,41,59},{34,31,36,22,41}});
  BScore bScore=new BScore(inMatrix);
  System.err.println(""String_Node_Str"" + bScore.get(1,2));
  System.err.println(""String_Node_Str"" + bScore.getScoreMatrix().toString());
}","public static void main(String[] args){
  Array2DRowRealMatrix inMatrix=new Array2DRowRealMatrix(new double[][]{{99,108,105,98,100,101},{71,79,83,70,84,80},{100,104,92,102,99,98},{81,75,80,82,77,78}});
  BScore bScore=new BScore(inMatrix);
  System.err.println(""String_Node_Str"" + bScore.get(1,2));
  System.err.println(""String_Node_Str"" + bScore.residualMatrix.toString());
}"
81580,"private Double[] biased(){
  double[][] H=histogram2();
  int r=H.length;
  int c=H[1].length;
  double[] Hx=new double[r];
  double[] Hy=new double[c];
  int count=0;
  for (int i=0; i < r; i++) {
    for (int j=0; j < c; j++) {
      Hx[i]+=H[i][j];
      Hy[i]+=H[j][i];
      count+=H[i][j];
    }
  }
  Double mutualinfo=0.0;
  Double sigma=0.0;
  Double logf;
  for (int i=0; i < r; i++) {
    for (int j=0; j < c; j++) {
      logf=log(H[i][j],Hx[i],Hy[j]);
      mutualinfo+=H[i][j] * logf;
      sigma+=H[i][j] * Math.pow(logf,2);
    }
  }
  mutualinfo/=count;
  sigma=Math.sqrt((sigma / count - Math.pow(mutualinfo,2)) / (count - 1));
  mutualinfo+=Math.log(count);
  Double bias=(double)(r - 1) * (c - 1) / (2 * count);
  Double[] out=new Double[]{mutualinfo,sigma,bias};
  out=basetransform(out,logbase);
  return out;
}","private Double[] biased(){
  double[][] H=histogram2();
  int r=H.length;
  int c=H[1].length;
  double[] Hx=new double[r];
  double[] Hy=new double[c];
  int count=0;
  for (int i=0; i < r; i++) {
    for (int j=0; j < c; j++) {
      Hx[i]+=H[i][j];
      Hy[i]+=H[j][i];
      count+=H[i][j];
    }
  }
  Double mutualinfo=0.0;
  Double sigma=0.0;
  Double logf;
  for (int i=0; i < r; i++) {
    for (int j=0; j < c; j++) {
      logf=log(H[i][j],Hx[i],Hy[j]);
      mutualinfo+=H[i][j] * logf;
      sigma+=H[i][j] * Math.pow(logf,2);
    }
  }
  mutualinfo/=count;
  sigma=Math.sqrt((sigma / count - Math.pow(mutualinfo,2)) / (count - 1));
  mutualinfo+=Math.log(count);
  Double bias=(double)(r - 1) * (c - 1) / (2 * count);
  return new Double[]{mutualinfo,sigma,bias};
}"
81581,"public Double[] calculate() throws Exception {
  if (x.length < 10 || y.length < 10)   throw new RuntimeException(""String_Node_Str"");
  Double[] res;
  if (method.contentEquals(""String_Node_Str"")) {
    res=unbiased();
  }
 else   if (method.contentEquals(""String_Node_Str"")) {
    res=biased();
  }
 else   if (method.contentEquals(""String_Node_Str"")) {
    res=mms_estimate();
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + method + ""String_Node_Str"");
  }
  return res;
}","public Double[] calculate() throws Exception {
  if (x.length < 10 || y.length < 10)   throw new RuntimeException(""String_Node_Str"");
  Double[] res;
  if (method.contentEquals(""String_Node_Str"")) {
    res=unbiased();
  }
 else   if (method.contentEquals(""String_Node_Str"")) {
    res=biased();
  }
 else   if (method.contentEquals(""String_Node_Str"")) {
    res=mms_estimate();
  }
 else {
    throw new RuntimeException(""String_Node_Str"" + method + ""String_Node_Str"");
  }
  res=basetransform(res,logbase);
  return res;
}"
81582,"/** 
 * {@inheritDoc}
 */
@Override protected BufferedDataTable[] execute(final BufferedDataTable[] inData,final ExecutionContext exec) throws Exception {
  BufferedDataTable inTable=inData[0];
  DataTableSpec inSpec=inTable.getSpec();
  String aggColumn=((SettingsModelString)getModelSetting(CFG_AGGR)).getStringValue();
  List<String> selColumns=((SettingsModelFilterString)getModelSetting(CFG_COLUMN)).getIncludeList();
  boolean hasRefColumn=true;
  String refColumn=((SettingsModelString)getModelSetting(CFG_REFCOLUMN)).getStringValue();
  if (refColumn == null)   hasRefColumn=false;
  String refString=null;
  if (hasRefColumn)   refString=((SettingsModelString)getModelSetting(CFG_REFSTRING)).getStringValue();
  int nBins=((SettingsModelInteger)getModelSetting(CFG_BIN)).getIntValue();
  int aggIdx=inSpec.findColumnIndex(aggColumn);
  int refIdx=-1;
  if (hasRefColumn)   refIdx=inSpec.findColumnIndex(refColumn);
  List<Double> doubleList;
  int i=1;
  int n=selColumns.size();
  double progress=0.0;
  int countMissing;
  BufferedDataContainer con=exec.createDataContainer(createOutSpec(inTable.getSpec()));
  rowCount=0;
  for (  String col : selColumns) {
    int colIdx=inSpec.findColumnIndex(col);
    countMissing=0;
    HashMap<Object,List<Double>> refData=new HashMap<Object,List<Double>>();
    HashMap<Object,List<Double>> allData=new HashMap<Object,List<Double>>();
    for (    DataRow row : inTable) {
      DataCell aggCell=row.getCell(aggIdx);
      String aggString=null;
      if (!aggCell.isMissing())       aggString=((StringCell)aggCell).getStringValue();
      String label=null;
      if (hasRefColumn) {
        DataCell labelCell=row.getCell(refIdx);
        if (!aggCell.isMissing())         label=((StringCell)labelCell).getStringValue();
      }
      DataCell valueCell=row.getCell(colIdx);
      Double value=null;
      if (!valueCell.isMissing())       value=((DoubleCell)valueCell).getDoubleValue();
      if (aggString == null || value == null || (hasRefColumn && label == null)) {
        countMissing++;
        continue;
      }
      if (hasRefColumn) {
        if (label.equals(refString)) {
          if (refData.containsKey(aggString))           doubleList=refData.get(aggString);
 else           doubleList=new ArrayList<Double>();
          doubleList.add(value);
          refData.put(aggString,doubleList);
        }
      }
      if (allData.containsKey(aggString))       doubleList=allData.get(aggString);
 else       doubleList=new ArrayList<Double>();
      doubleList.add(value);
      allData.put(aggString,doubleList);
      exec.checkCanceled();
    }
    if (!hasRefColumn) {
      refData=allData;
    }
    if (refData.isEmpty()) {
      setWarningMessage(""String_Node_Str"" + col + ""String_Node_Str""+ countMissing+ ""String_Node_Str"");
      continue;
    }
    BinningAnalysis binAnalysis=new BinningAnalysis(refData,10,col);
    HashMap<Object,List<BinningData>> ret=binAnalysis.getZscore(allData);
    for (    Object aggLabel : ret.keySet()) {
      DataRow[] newRows=createDataRow(col,(String)aggLabel,ret.get(aggLabel));
      for (      DataRow row : newRows) {
        con.addRowToTable(row);
      }
    }
    progress=progress + 1.0 / n;
    i++;
    exec.setProgress(progress,""String_Node_Str"" + col + ""String_Node_Str""+ i+ ""String_Node_Str""+ n+ ""String_Node_Str"");
  }
  con.close();
  return new BufferedDataTable[]{con.getTable()};
}","/** 
 * {@inheritDoc}
 */
@Override protected BufferedDataTable[] execute(final BufferedDataTable[] inData,final ExecutionContext exec) throws Exception {
  BufferedDataTable inTable=inData[0];
  DataTableSpec inSpec=inTable.getSpec();
  int nBins=((SettingsModelIntegerBounded)getModelSetting(CFG_BIN)).getIntValue();
  String aggColumn=((SettingsModelString)getModelSetting(CFG_AGGR)).getStringValue();
  List<String> selColumns=((SettingsModelFilterString)getModelSetting(CFG_COLUMN)).getIncludeList();
  boolean hasRefColumn=true;
  String refColumn=((SettingsModelString)getModelSetting(CFG_REFCOLUMN)).getStringValue();
  if (refColumn == null)   hasRefColumn=false;
  String refString=null;
  if (hasRefColumn)   refString=((SettingsModelString)getModelSetting(CFG_REFSTRING)).getStringValue();
  int aggIdx=inSpec.findColumnIndex(aggColumn);
  int refIdx=-1;
  if (hasRefColumn)   refIdx=inSpec.findColumnIndex(refColumn);
  List<Double> doubleList;
  int i=1;
  int n=selColumns.size();
  double progress=0.0;
  int countMissing;
  BufferedDataContainer con=exec.createDataContainer(createOutSpec(inTable.getSpec()));
  rowCount=0;
  for (  String col : selColumns) {
    int colIdx=inSpec.findColumnIndex(col);
    countMissing=0;
    HashMap<Object,List<Double>> refData=new HashMap<Object,List<Double>>();
    HashMap<Object,List<Double>> allData=new HashMap<Object,List<Double>>();
    for (    DataRow row : inTable) {
      DataCell aggCell=row.getCell(aggIdx);
      String aggString=null;
      if (!aggCell.isMissing())       aggString=((StringCell)aggCell).getStringValue();
      String label=null;
      if (hasRefColumn) {
        DataCell labelCell=row.getCell(refIdx);
        if (!aggCell.isMissing())         label=((StringCell)labelCell).getStringValue();
      }
      DataCell valueCell=row.getCell(colIdx);
      Double value=null;
      if (!valueCell.isMissing())       value=((DoubleValue)valueCell).getDoubleValue();
      if (aggString == null || value == null || (hasRefColumn && label == null)) {
        countMissing++;
        continue;
      }
      if (hasRefColumn) {
        if (label.equals(refString)) {
          if (refData.containsKey(aggString))           doubleList=refData.get(aggString);
 else           doubleList=new ArrayList<Double>();
          doubleList.add(value);
          refData.put(aggString,doubleList);
        }
      }
      if (allData.containsKey(aggString))       doubleList=allData.get(aggString);
 else       doubleList=new ArrayList<Double>();
      doubleList.add(value);
      allData.put(aggString,doubleList);
      exec.checkCanceled();
    }
    if (!hasRefColumn) {
      refData=allData;
    }
    if (refData.isEmpty()) {
      setWarningMessage(""String_Node_Str"" + col);
      continue;
    }
    if (countMissing > 0) {
      this.logger.info(col + ""String_Node_Str"" + countMissing+ ""String_Node_Str"");
    }
    BinningAnalysis binAnalysis=new BinningAnalysis(refData,nBins,col);
    HashMap<Object,List<BinningData>> ret=binAnalysis.getZscore(allData);
    for (    Object aggLabel : ret.keySet()) {
      DataRow[] newRows=createDataRow(col,(String)aggLabel,ret.get(aggLabel));
      for (      DataRow row : newRows) {
        con.addRowToTable(row);
      }
    }
    progress=progress + 1.0 / n;
    i++;
    exec.setProgress(progress,""String_Node_Str"" + col + ""String_Node_Str""+ i+ ""String_Node_Str""+ n+ ""String_Node_Str"");
  }
  con.close();
  return new BufferedDataTable[]{con.getTable()};
}"
81583,"@Override protected BufferedDataTable[] execute(BufferedDataTable[] inData,ExecutionContext exec) throws Exception {
  BufferedDataTable input=inData[0];
  DataTableSpec inputSpec=input.getDataTableSpec();
  List<Attribute> parameter=new ArrayList<Attribute>();
  for (  String item : parameterNames.getIncludeList()) {
    Attribute attribute=new InputTableAttribute(item,input);
    if (attribute.getType().equals(DoubleCell.TYPE)) {
      parameter.add(attribute);
    }
 else {
      logger.warn(""String_Node_Str"" + attribute.getName() + ""String_Node_Str"");
    }
  }
  Attribute groupingAttribute=new InputTableAttribute(this.groupingColumn.getStringValue(),input);
  Map<Object,List<DataRow>> subsets=AttributeUtils.splitRowsGeneric(input,groupingAttribute);
  BufferedDataContainer container=exec.createDataContainer(inputSpec);
  int S=subsets.size();
  int s=1;
  for (  Object key : subsets.keySet()) {
    List<DataRow> rowSubset=subsets.get(key);
    RealMatrix data=getMatrix(rowSubset,parameter);
    int N=data.getColumnDimension();
    int M=data.getRowDimension();
    if (M == 0) {
      logger.warn(""String_Node_Str"" + key + ""String_Node_Str"");
    }
 else {
      double[] lowerBound=new double[N];
      double[] upperBound=new double[N];
      if (method.getStringValue().equals(""String_Node_Str"")) {
        for (int c=0; c < N; ++c) {
          RealVector vect=data.getColumnVector(c);
          DescriptiveStatistics stats=new DescriptiveStatistics();
          for (          double value : vect.getData()) {
            stats.addValue(value);
          }
          double lowerQuantile=stats.getPercentile(25);
          double upperQuantile=stats.getPercentile(85);
          double whisker=factor.getDoubleValue() * Math.abs(lowerQuantile - upperQuantile);
          lowerBound[c]=lowerQuantile - whisker;
          upperBound[c]=upperQuantile + whisker;
        }
      }
 else {
        for (int c=0; c < N; ++c) {
          RealVector vect=data.getColumnVector(c);
          double mean=StatUtils.mean(vect.getData());
          double sd=Math.sqrt(StatUtils.variance(vect.getData()));
          lowerBound[c]=mean - factor.getDoubleValue() * sd;
          upperBound[c]=mean + factor.getDoubleValue() * sd;
        }
      }
      if (rule.getBooleanValue()) {
        for (        DataRow row : rowSubset) {
          int c=0;
          for (          Attribute column : parameter) {
            Double value=(Double)column.getValue(row);
            if ((value != null) && (lowerBound[c] < value) && (value < upperBound[c])) {
              break;
            }
 else {
              c++;
            }
          }
          if (c != N) {
            container.addRowToTable(row);
          }
        }
      }
 else {
        for (        DataRow row : rowSubset) {
          int c=0;
          for (          Attribute column : parameter) {
            Double value=(Double)column.getValue(row);
            if ((value != null) && (lowerBound[c] < value) && (value < upperBound[c])) {
              c++;
            }
 else {
              break;
            }
          }
          if (c == N) {
            container.addRowToTable(row);
          }
        }
      }
    }
    BufTableUtils.updateProgress(exec,s++,S);
  }
  container.close();
  return new BufferedDataTable[]{container.getTable()};
}","@Override protected BufferedDataTable[] execute(BufferedDataTable[] inData,ExecutionContext exec) throws Exception {
  BufferedDataTable input=inData[0];
  DataTableSpec inputSpec=input.getDataTableSpec();
  List<Attribute> parameter=new ArrayList<Attribute>();
  for (  String item : parameterNames.getIncludeList()) {
    Attribute attribute=new InputTableAttribute(item,input);
    if (attribute.getType().equals(DoubleCell.TYPE)) {
      parameter.add(attribute);
    }
 else {
      logger.warn(""String_Node_Str"" + attribute.getName() + ""String_Node_Str"");
    }
  }
  Attribute groupingAttribute=new InputTableAttribute(this.groupingColumn.getStringValue(),input);
  Map<Object,List<DataRow>> subsets=AttributeUtils.splitRowsGeneric(input,groupingAttribute);
  BufferedDataContainer container=exec.createDataContainer(inputSpec);
  int S=subsets.size();
  int s=1;
  for (  Object key : subsets.keySet()) {
    List<DataRow> rowSubset=subsets.get(key);
    RealMatrix data=extractMatrix(rowSubset,parameter);
    int N=data.getColumnDimension();
    int M=data.getRowDimension();
    if (M == 0) {
      logger.warn(""String_Node_Str"" + key + ""String_Node_Str"");
    }
 else {
      double[] lowerBound=new double[N];
      double[] upperBound=new double[N];
      if (method.getStringValue().equals(""String_Node_Str"")) {
        for (int c=0; c < N; ++c) {
          RealVector vect=data.getColumnVector(c);
          DescriptiveStatistics stats=new DescriptiveStatistics();
          for (          double value : vect.getData()) {
            stats.addValue(value);
          }
          double lowerQuantile=stats.getPercentile(25);
          double upperQuantile=stats.getPercentile(85);
          double whisker=factor.getDoubleValue() * Math.abs(lowerQuantile - upperQuantile);
          lowerBound[c]=lowerQuantile - whisker;
          upperBound[c]=upperQuantile + whisker;
        }
      }
 else {
        for (int c=0; c < N; ++c) {
          RealVector vect=data.getColumnVector(c);
          double mean=StatUtils.mean(vect.getData());
          double sd=Math.sqrt(StatUtils.variance(vect.getData()));
          lowerBound[c]=mean - factor.getDoubleValue() * sd;
          upperBound[c]=mean + factor.getDoubleValue() * sd;
        }
      }
      if (rule.getBooleanValue()) {
        for (        DataRow row : rowSubset) {
          int c=0;
          for (          Attribute column : parameter) {
            Double value=(Double)column.getValue(row);
            if ((value != null) && (lowerBound[c] < value) && (value < upperBound[c])) {
              break;
            }
 else {
              c++;
            }
          }
          if (c != N) {
            container.addRowToTable(row);
          }
        }
      }
 else {
        for (        DataRow row : rowSubset) {
          int c=0;
          for (          Attribute column : parameter) {
            Double value=(Double)column.getValue(row);
            if ((value != null) && (lowerBound[c] < value) && (value < upperBound[c])) {
              c++;
            }
 else {
              break;
            }
          }
          if (c == N) {
            container.addRowToTable(row);
          }
        }
      }
    }
    BufTableUtils.updateProgress(exec,s++,S);
  }
  container.close();
  return new BufferedDataTable[]{container.getTable()};
}"
81584,"@Override protected BufferedDataTable[] execute(BufferedDataTable[] inData,ExecutionContext exec) throws Exception {
  BufferedDataTable input=inData[0];
  Attribute groupingAttribute=new InputTableAttribute(groupBy.getStringValue(),input);
  Attribute treatmentAttribute=new InputTableAttribute(this.treatmentAttribute.getStringValue(),input);
  List<String> posCtrls=getPosControls();
  List<String> negCtrls=getNegControls();
  HashSet<String> intersection=new HashSet<String>(posCtrls);
  intersection.retainAll(negCtrls);
  if (!intersection.isEmpty()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  List<String> readouts=propReadouts.getIncludeList();
  Map<String,List<DataRow>> groups=AttributeUtils.splitRows(input,groupingAttribute);
  BufferedDataTable barcodeTable=prepareZPrimeTable(exec,new ArrayList<String>(groups.keySet()));
  TableUpdateCache updateCache=new TableUpdateCache(barcodeTable.getDataTableSpec());
  Attribute barcodeAttr=new InputTableAttribute(groupBy.getStringValue(),barcodeTable);
  Attribute positiveAttr=new InputTableAttribute(POSITIVE_CONTROL_DESC,barcodeTable);
  Attribute negativeAttr=new InputTableAttribute(NEGATIVE_CONTROL_DESC,barcodeTable);
  int counter=0;
  for (  DataRow dataRow : barcodeTable) {
    String barcode=barcodeAttr.getNominalAttribute(dataRow);
    String positiveControl=positiveAttr.getNominalAttribute(dataRow);
    String negativeControl=negativeAttr.getNominalAttribute(dataRow);
    logger.info(""String_Node_Str"" + barcode + ""String_Node_Str"");
    List<DataRow> plate=groups.get(barcode);
    List<DataRow> posCtrlWells=AttributeUtils.filterByAttributeValue(plate,treatmentAttribute,positiveControl);
    List<DataRow> negCtrlWells=AttributeUtils.filterByAttributeValue(plate,treatmentAttribute,negativeControl);
    RealMatrix posMatrix=getMatrix(posCtrlWells,readouts,input);
    RealMatrix negMatrix=getMatrix(negCtrlWells,readouts,input);
    int[] columnIndex=checkColumns(posMatrix,negMatrix);
    int[] rowIndex=getRowIndices(posMatrix);
    posMatrix.getSubMatrix(rowIndex,columnIndex);
    rowIndex=getRowIndices(negMatrix);
    negMatrix.getSubMatrix(rowIndex,columnIndex);
    posMatrix=bootstrapMatrix(posMatrix);
    negMatrix=bootstrapMatrix(negMatrix);
    String posStatus=getSampilingStatus(posMatrix,posCtrlWells.size());
    String negStatus=getSampilingStatus(negMatrix,negCtrlWells.size());
    Double zPrime=Double.NaN;
    Double classificationError=Double.NaN;
    if ((posMatrix != null) && (negMatrix != null)) {
      RealVector posMeanVect=computeColumnMeans(posMatrix);
      RealVector negMeanVect=computeColumnMeans(negMatrix);
      Covariance posCov=new Covariance(posMatrix);
      Covariance negCov=new Covariance(negMatrix);
      RealVector meanVect=posMeanVect.subtract(negMeanVect);
      RealMatrix cov=posCov.getCovarianceMatrix();
      cov.add(negCov.getCovarianceMatrix());
      try {
        DecompositionSolver solver=new SingularValueDecompositionImpl(cov).getSolver();
        RealMatrix inv=solver.getInverse();
        RealVector weights=inv.preMultiply(meanVect);
        double[] posProj=computeProjectedValues(posMatrix,weights);
        double[] negProj=computeProjectedValues(negMatrix,weights);
        classificationError=calculateClassificationError(weights,posMeanVect,negMeanVect,posProj,negProj);
        double posCtrlMean=StatUtils.mean(posProj);
        double posCtrlSD=Math.sqrt(StatUtils.variance(posProj));
        double negCtrlMean=StatUtils.mean(negProj);
        double negCtrlSD=Math.sqrt(StatUtils.variance(negProj));
        zPrime=1 - 3 * ((posCtrlSD + negCtrlSD) / Math.abs(posCtrlMean - negCtrlMean));
      }
 catch (      InvalidMatrixException e) {
        zPrime=Double.NaN;
      }
    }
    Attribute attribute;
    attribute=new Attribute(POSITIVE_CONTROL_DESC + ""String_Node_Str"",DoubleCell.TYPE);
    updateCache.add(dataRow,attribute,new DoubleCell(negCtrlWells.size()));
    attribute=new Attribute(POSITIVE_CONTROL_DESC + ""String_Node_Str"",StringCell.TYPE);
    updateCache.add(dataRow,attribute,new StringCell(posStatus));
    attribute=new Attribute(NEGATIVE_CONTROL_DESC + ""String_Node_Str"",DoubleCell.TYPE);
    updateCache.add(dataRow,attribute,new DoubleCell(negCtrlWells.size()));
    attribute=new Attribute(NEGATIVE_CONTROL_DESC + ""String_Node_Str"",StringCell.TYPE);
    updateCache.add(dataRow,attribute,new StringCell(negStatus));
    attribute=new Attribute(""String_Node_Str"",DoubleCell.TYPE);
    updateCache.add(dataRow,attribute,isValidNumber(zPrime) ? DataType.getMissingCell() : new DoubleCell(zPrime));
    attribute=new Attribute(""String_Node_Str"",DoubleCell.TYPE);
    updateCache.add(dataRow,attribute,isValidNumber(classificationError) ? DataType.getMissingCell() : new DoubleCell(classificationError));
    BufTableUtils.updateProgress(exec,counter++,groups.size());
  }
  ColumnRearranger c=updateCache.createColRearranger();
  BufferedDataTable out=exec.createColumnRearrangeTable(barcodeTable,c,exec);
  return new BufferedDataTable[]{out};
}","@Override protected BufferedDataTable[] execute(BufferedDataTable[] inData,ExecutionContext exec) throws Exception {
  BufferedDataTable input=inData[0];
  Attribute groupingAttribute=new InputTableAttribute(groupBy.getStringValue(),input);
  Attribute treatmentAttribute=new InputTableAttribute(this.treatmentAttribute.getStringValue(),input);
  List<String> posCtrls=getPosControls();
  List<String> negCtrls=getNegControls();
  HashSet<String> intersection=new HashSet<String>(posCtrls);
  intersection.retainAll(negCtrls);
  if (!intersection.isEmpty()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  List<Attribute> readouts=new ArrayList<Attribute>();
  for (  String item : propReadouts.getIncludeList()) {
    Attribute attribute=new InputTableAttribute(item,input);
    if (attribute.getType().equals(DoubleCell.TYPE)) {
      readouts.add(attribute);
    }
 else {
      logger.warn(""String_Node_Str"" + attribute.getName() + ""String_Node_Str"");
    }
  }
  Map<String,List<DataRow>> groups=AttributeUtils.splitRows(input,groupingAttribute);
  BufferedDataTable barcodeTable=prepareZPrimeTable(exec,new ArrayList<String>(groups.keySet()));
  TableUpdateCache updateCache=new TableUpdateCache(barcodeTable.getDataTableSpec());
  Attribute barcodeAttr=new InputTableAttribute(groupBy.getStringValue(),barcodeTable);
  Attribute positiveAttr=new InputTableAttribute(POSITIVE_CONTROL_DESC,barcodeTable);
  Attribute negativeAttr=new InputTableAttribute(NEGATIVE_CONTROL_DESC,barcodeTable);
  int counter=0;
  for (  DataRow dataRow : barcodeTable) {
    String barcode=barcodeAttr.getNominalAttribute(dataRow);
    String positiveControl=positiveAttr.getNominalAttribute(dataRow);
    String negativeControl=negativeAttr.getNominalAttribute(dataRow);
    logger.info(""String_Node_Str"" + barcode + ""String_Node_Str"");
    List<DataRow> plate=groups.get(barcode);
    List<DataRow> posCtrlWells=AttributeUtils.filterByAttributeValue(plate,treatmentAttribute,positiveControl);
    List<DataRow> negCtrlWells=AttributeUtils.filterByAttributeValue(plate,treatmentAttribute,negativeControl);
    RealMatrix posMatrix=extractMatrix(posCtrlWells,readouts);
    RealMatrix negMatrix=extractMatrix(negCtrlWells,readouts);
    Double zPrime=Double.NaN;
    Double classificationError=Double.NaN;
    if ((posMatrix != null) && (negMatrix != null)) {
      int[] columnIndex=checkColumns(posMatrix,negMatrix);
      int[] rowIndex=getRowIndices(posMatrix);
      posMatrix.getSubMatrix(rowIndex,columnIndex);
      rowIndex=getRowIndices(negMatrix);
      negMatrix.getSubMatrix(rowIndex,columnIndex);
      posMatrix=bootstrapMatrix(posMatrix);
      negMatrix=bootstrapMatrix(negMatrix);
      RealVector posMeanVect=computeColumnMeans(posMatrix);
      RealVector negMeanVect=computeColumnMeans(negMatrix);
      Covariance posCov=new Covariance(posMatrix);
      Covariance negCov=new Covariance(negMatrix);
      RealVector meanVect=posMeanVect.subtract(negMeanVect);
      RealMatrix cov=posCov.getCovarianceMatrix();
      cov.add(negCov.getCovarianceMatrix());
      try {
        DecompositionSolver solver=new SingularValueDecompositionImpl(cov).getSolver();
        RealMatrix inv=solver.getInverse();
        RealVector weights=inv.preMultiply(meanVect);
        double[] posProj=computeProjectedValues(posMatrix,weights);
        double[] negProj=computeProjectedValues(negMatrix,weights);
        classificationError=calculateClassificationError(weights,posMeanVect,negMeanVect,posProj,negProj);
        double posCtrlMean=StatUtils.mean(posProj);
        double posCtrlSD=Math.sqrt(StatUtils.variance(posProj));
        double negCtrlMean=StatUtils.mean(negProj);
        double negCtrlSD=Math.sqrt(StatUtils.variance(negProj));
        zPrime=1 - 3 * ((posCtrlSD + negCtrlSD) / Math.abs(posCtrlMean - negCtrlMean));
      }
 catch (      InvalidMatrixException e) {
        zPrime=Double.NaN;
      }
    }
    String posStatus=getSampilingStatus(posMatrix,posCtrlWells.size());
    String negStatus=getSampilingStatus(negMatrix,negCtrlWells.size());
    Attribute attribute;
    attribute=new Attribute(POSITIVE_CONTROL_DESC + ""String_Node_Str"",DoubleCell.TYPE);
    updateCache.add(dataRow,attribute,new DoubleCell(negCtrlWells.size()));
    attribute=new Attribute(POSITIVE_CONTROL_DESC + ""String_Node_Str"",StringCell.TYPE);
    updateCache.add(dataRow,attribute,new StringCell(posStatus));
    attribute=new Attribute(NEGATIVE_CONTROL_DESC + ""String_Node_Str"",DoubleCell.TYPE);
    updateCache.add(dataRow,attribute,new DoubleCell(negCtrlWells.size()));
    attribute=new Attribute(NEGATIVE_CONTROL_DESC + ""String_Node_Str"",StringCell.TYPE);
    updateCache.add(dataRow,attribute,new StringCell(negStatus));
    attribute=new Attribute(""String_Node_Str"",DoubleCell.TYPE);
    updateCache.add(dataRow,attribute,isValidNumber(zPrime) ? DataType.getMissingCell() : new DoubleCell(zPrime));
    attribute=new Attribute(""String_Node_Str"",DoubleCell.TYPE);
    updateCache.add(dataRow,attribute,isValidNumber(classificationError) ? DataType.getMissingCell() : new DoubleCell(classificationError));
    BufTableUtils.updateProgress(exec,counter++,groups.size());
  }
  ColumnRearranger c=updateCache.createColRearranger();
  BufferedDataTable out=exec.createColumnRearrangeTable(barcodeTable,c,exec);
  return new BufferedDataTable[]{out};
}"
81585,"@Override protected BufferedDataTable[] execute(BufferedDataTable[] inData,ExecutionContext exec) throws Exception {
  BufferedDataTable input=inData[0];
  DataTableSpec inputSpec=input.getDataTableSpec();
  List<Attribute> parameter=new ArrayList<Attribute>();
  for (  String item : parameterNames.getIncludeList()) {
    Attribute attribute=new InputTableAttribute(item,input);
    if (attribute.getType().equals(DoubleCell.TYPE)) {
      parameter.add(attribute);
    }
 else {
      logger.warn(""String_Node_Str"" + attribute.getName() + ""String_Node_Str"");
    }
  }
  Attribute groupingAttribute=new InputTableAttribute(this.groupingColumn.getStringValue(),input);
  Map<Object,List<DataRow>> subsets=AttributeUtils.splitRowsGeneric(input,groupingAttribute);
  BufferedDataContainer container=exec.createDataContainer(inputSpec);
  int S=subsets.size();
  int s=1;
  for (  Object key : subsets.keySet()) {
    List<DataRow> rowSubset=subsets.get(key);
    RealMatrix data=extractMatrix(rowSubset,parameter);
    int N=data.getColumnDimension();
    int M=data.getRowDimension();
    if (M == 0) {
      logger.warn(""String_Node_Str"" + key + ""String_Node_Str"");
    }
 else {
      double[] lowerBound=new double[N];
      double[] upperBound=new double[N];
      if (method.getStringValue().equals(""String_Node_Str"")) {
        for (int c=0; c < N; ++c) {
          RealVector vect=data.getColumnVector(c);
          DescriptiveStatistics stats=new DescriptiveStatistics();
          for (          double value : vect.getData()) {
            stats.addValue(value);
          }
          double lowerQuantile=stats.getPercentile(25);
          double upperQuantile=stats.getPercentile(85);
          double whisker=factor.getDoubleValue() * Math.abs(lowerQuantile - upperQuantile);
          lowerBound[c]=lowerQuantile - whisker;
          upperBound[c]=upperQuantile + whisker;
        }
      }
 else {
        for (int c=0; c < N; ++c) {
          RealVector vect=data.getColumnVector(c);
          double mean=StatUtils.mean(vect.getData());
          double sd=Math.sqrt(StatUtils.variance(vect.getData()));
          lowerBound[c]=mean - factor.getDoubleValue() * sd;
          upperBound[c]=mean + factor.getDoubleValue() * sd;
        }
      }
      if (rule.getBooleanValue()) {
        for (        DataRow row : rowSubset) {
          int c=0;
          for (          Attribute column : parameter) {
            Double value=(Double)column.getValue(row);
            if ((value != null) && (lowerBound[c] < value) && (value < upperBound[c])) {
              break;
            }
 else {
              c++;
            }
          }
          if (c != N) {
            container.addRowToTable(row);
          }
        }
      }
 else {
        for (        DataRow row : rowSubset) {
          int c=0;
          for (          Attribute column : parameter) {
            Double value=(Double)column.getValue(row);
            if ((value != null) && (lowerBound[c] < value) && (value < upperBound[c])) {
              c++;
            }
 else {
              break;
            }
          }
          if (c == N) {
            container.addRowToTable(row);
          }
        }
      }
    }
    BufTableUtils.updateProgress(exec,s++,S);
  }
  container.close();
  return new BufferedDataTable[]{container.getTable()};
}","@Override protected BufferedDataTable[] execute(BufferedDataTable[] inData,ExecutionContext exec) throws Exception {
  BufferedDataTable input=inData[0];
  DataTableSpec inputSpec=input.getDataTableSpec();
  List<Attribute> parameter=new ArrayList<Attribute>();
  for (  String item : parameterNames.getIncludeList()) {
    Attribute attribute=new InputTableAttribute(item,input);
    if (attribute.getType().equals(DoubleCell.TYPE)) {
      parameter.add(attribute);
    }
 else {
      logger.warn(""String_Node_Str"" + attribute.getName() + ""String_Node_Str"");
    }
  }
  Attribute groupingAttribute=new InputTableAttribute(this.groupingColumn.getStringValue(),input);
  Map<Object,List<DataRow>> subsets=AttributeUtils.splitRowsGeneric(input,groupingAttribute);
  BufferedDataContainer container=exec.createDataContainer(inputSpec);
  int S=subsets.size();
  int s=1;
  for (  Object key : subsets.keySet()) {
    List<DataRow> rowSubset=subsets.get(key);
    RealMatrix data=extractMatrix(rowSubset,parameter);
    int N=data.getColumnDimension();
    int M=data.getRowDimension();
    if (M == 0) {
      logger.warn(""String_Node_Str"" + key + ""String_Node_Str"");
    }
 else {
      double[] lowerBound=new double[N];
      double[] upperBound=new double[N];
      if (method.getStringValue().equals(""String_Node_Str"")) {
        for (int c=0; c < N; ++c) {
          RealVector vect=data.getColumnVector(c);
          DescriptiveStatistics stats=new DescriptiveStatistics();
          for (          double value : vect.getData()) {
            stats.addValue(value);
          }
          double lowerQuantile=stats.getPercentile(25);
          double upperQuantile=stats.getPercentile(85);
          double whisker=factor.getDoubleValue() * Math.abs(lowerQuantile - upperQuantile);
          lowerBound[c]=lowerQuantile - whisker;
          upperBound[c]=upperQuantile + whisker;
        }
      }
 else {
        for (int c=0; c < N; ++c) {
          RealVector vect=data.getColumnVector(c);
          double mean=StatUtils.mean(vect.getData());
          double sd=Math.sqrt(StatUtils.variance(vect.getData()));
          lowerBound[c]=mean - factor.getDoubleValue() * sd;
          upperBound[c]=mean + factor.getDoubleValue() * sd;
        }
      }
      if (rule.getBooleanValue()) {
        for (        DataRow row : rowSubset) {
          int c=0;
          for (          Attribute column : parameter) {
            Double value=(Double)column.getValue(row);
            if ((value != null) && (lowerBound[c] <= value) && (value <= upperBound[c])) {
              break;
            }
 else {
              c++;
            }
          }
          if (c != N) {
            container.addRowToTable(row);
          }
        }
      }
 else {
        for (        DataRow row : rowSubset) {
          int c=0;
          for (          Attribute column : parameter) {
            Double value=(Double)column.getValue(row);
            if ((value != null) && (lowerBound[c] <= value) && (value <= upperBound[c])) {
              c++;
            }
 else {
              break;
            }
          }
          if (c == N) {
            container.addRowToTable(row);
          }
        }
      }
    }
    BufTableUtils.updateProgress(exec,s++,S);
  }
  container.close();
  return new BufferedDataTable[]{container.getTable()};
}"
81586,"@Override protected BufferedDataTable[] execute(BufferedDataTable[] inData,ExecutionContext exec) throws Exception {
  BufferedDataTable input=inData[0];
  Attribute groupingAttribute=new InputTableAttribute(groupBy.getStringValue(),input);
  Attribute treatmentAttribute=new InputTableAttribute(this.treatmentAttribute.getStringValue(),input);
  List<String> posCtrls=getPosControls();
  List<String> negCtrls=getNegControls();
  HashSet<String> intersection=new HashSet<String>(posCtrls);
  intersection.retainAll(negCtrls);
  if (!intersection.isEmpty()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  List<Attribute> readouts=new ArrayList<Attribute>();
  for (  String item : propReadouts.getIncludeList()) {
    Attribute attribute=new InputTableAttribute(item,input);
    if (attribute.getType().equals(DoubleCell.TYPE)) {
      readouts.add(attribute);
    }
 else {
      logger.warn(""String_Node_Str"" + attribute.getName() + ""String_Node_Str"");
    }
  }
  Map<String,List<DataRow>> groups=AttributeUtils.splitRows(input,groupingAttribute);
  BufferedDataTable barcodeTable=prepareZPrimeTable(exec,new ArrayList<String>(groups.keySet()));
  TableUpdateCache updateCache=new TableUpdateCache(barcodeTable.getDataTableSpec());
  Attribute barcodeAttr=new InputTableAttribute(groupBy.getStringValue(),barcodeTable);
  Attribute positiveAttr=new InputTableAttribute(POSITIVE_CONTROL_DESC,barcodeTable);
  Attribute negativeAttr=new InputTableAttribute(NEGATIVE_CONTROL_DESC,barcodeTable);
  int counter=0;
  for (  DataRow dataRow : barcodeTable) {
    String barcode=barcodeAttr.getNominalAttribute(dataRow);
    String positiveControl=positiveAttr.getNominalAttribute(dataRow);
    String negativeControl=negativeAttr.getNominalAttribute(dataRow);
    logger.info(""String_Node_Str"" + barcode + ""String_Node_Str"");
    List<DataRow> plate=groups.get(barcode);
    List<DataRow> posCtrlWells=AttributeUtils.filterByAttributeValue(plate,treatmentAttribute,positiveControl);
    List<DataRow> negCtrlWells=AttributeUtils.filterByAttributeValue(plate,treatmentAttribute,negativeControl);
    RealMatrix posMatrix=extractMatrix(posCtrlWells,readouts);
    RealMatrix negMatrix=extractMatrix(negCtrlWells,readouts);
    Double zPrime=Double.NaN;
    Double classificationError=Double.NaN;
    if ((posMatrix != null) && (negMatrix != null)) {
      int[] columnIndex=checkColumns(posMatrix,negMatrix);
      int[] rowIndex=getRowIndices(posMatrix);
      posMatrix.getSubMatrix(rowIndex,columnIndex);
      rowIndex=getRowIndices(negMatrix);
      negMatrix.getSubMatrix(rowIndex,columnIndex);
      posMatrix=bootstrapMatrix(posMatrix);
      negMatrix=bootstrapMatrix(negMatrix);
      RealVector posMeanVect=computeColumnMeans(posMatrix);
      RealVector negMeanVect=computeColumnMeans(negMatrix);
      Covariance posCov=new Covariance(posMatrix);
      Covariance negCov=new Covariance(negMatrix);
      RealVector meanVect=posMeanVect.subtract(negMeanVect);
      RealMatrix cov=posCov.getCovarianceMatrix();
      cov.add(negCov.getCovarianceMatrix());
      try {
        DecompositionSolver solver=new SingularValueDecompositionImpl(cov).getSolver();
        RealMatrix inv=solver.getInverse();
        RealVector weights=inv.preMultiply(meanVect);
        double[] posProj=computeProjectedValues(posMatrix,weights);
        double[] negProj=computeProjectedValues(negMatrix,weights);
        classificationError=calculateClassificationError(weights,posMeanVect,negMeanVect,posProj,negProj);
        double posCtrlMean=StatUtils.mean(posProj);
        double posCtrlSD=Math.sqrt(StatUtils.variance(posProj));
        double negCtrlMean=StatUtils.mean(negProj);
        double negCtrlSD=Math.sqrt(StatUtils.variance(negProj));
        zPrime=1 - 3 * ((posCtrlSD + negCtrlSD) / Math.abs(posCtrlMean - negCtrlMean));
      }
 catch (      InvalidMatrixException e) {
        zPrime=Double.NaN;
      }
    }
    String posStatus=getSampilingStatus(posMatrix,posCtrlWells.size());
    String negStatus=getSampilingStatus(negMatrix,negCtrlWells.size());
    Attribute attribute;
    attribute=new Attribute(POSITIVE_CONTROL_DESC + ""String_Node_Str"",DoubleCell.TYPE);
    updateCache.add(dataRow,attribute,new DoubleCell(negCtrlWells.size()));
    attribute=new Attribute(POSITIVE_CONTROL_DESC + ""String_Node_Str"",StringCell.TYPE);
    updateCache.add(dataRow,attribute,new StringCell(posStatus));
    attribute=new Attribute(NEGATIVE_CONTROL_DESC + ""String_Node_Str"",DoubleCell.TYPE);
    updateCache.add(dataRow,attribute,new DoubleCell(negCtrlWells.size()));
    attribute=new Attribute(NEGATIVE_CONTROL_DESC + ""String_Node_Str"",StringCell.TYPE);
    updateCache.add(dataRow,attribute,new StringCell(negStatus));
    attribute=new Attribute(""String_Node_Str"",DoubleCell.TYPE);
    updateCache.add(dataRow,attribute,isValidNumber(zPrime) ? DataType.getMissingCell() : new DoubleCell(zPrime));
    attribute=new Attribute(""String_Node_Str"",DoubleCell.TYPE);
    updateCache.add(dataRow,attribute,isValidNumber(classificationError) ? DataType.getMissingCell() : new DoubleCell(classificationError));
    BufTableUtils.updateProgress(exec,counter++,groups.size());
  }
  ColumnRearranger c=updateCache.createColRearranger();
  BufferedDataTable out=exec.createColumnRearrangeTable(barcodeTable,c,exec);
  return new BufferedDataTable[]{out};
}","@Override protected BufferedDataTable[] execute(BufferedDataTable[] inData,ExecutionContext exec) throws Exception {
  BufferedDataTable input=inData[0];
  Attribute groupingAttribute=new InputTableAttribute(groupBy.getStringValue(),input);
  Attribute treatmentAttribute=new InputTableAttribute(this.treatmentAttribute.getStringValue(),input);
  List<String> posCtrls=getPosControls();
  List<String> negCtrls=getNegControls();
  HashSet<String> intersection=new HashSet<String>(posCtrls);
  intersection.retainAll(negCtrls);
  if (!intersection.isEmpty()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  List<Attribute> readouts=new ArrayList<Attribute>();
  for (  String item : propReadouts.getIncludeList()) {
    Attribute attribute=new InputTableAttribute(item,input);
    if (attribute.getType().equals(DoubleCell.TYPE)) {
      readouts.add(attribute);
    }
 else {
      logger.warn(""String_Node_Str"" + attribute.getName() + ""String_Node_Str"");
    }
  }
  Map<String,List<DataRow>> groups=AttributeUtils.splitRows(input,groupingAttribute);
  BufferedDataTable barcodeTable=prepareZPrimeTable(exec,new ArrayList<String>(groups.keySet()));
  TableUpdateCache updateCache=new TableUpdateCache(barcodeTable.getDataTableSpec());
  Attribute barcodeAttr=new InputTableAttribute(groupBy.getStringValue(),barcodeTable);
  Attribute positiveAttr=new InputTableAttribute(POSITIVE_CONTROL_DESC,barcodeTable);
  Attribute negativeAttr=new InputTableAttribute(NEGATIVE_CONTROL_DESC,barcodeTable);
  int counter=0;
  for (  DataRow dataRow : barcodeTable) {
    String barcode=barcodeAttr.getNominalAttribute(dataRow);
    String positiveControl=positiveAttr.getNominalAttribute(dataRow);
    String negativeControl=negativeAttr.getNominalAttribute(dataRow);
    logger.info(""String_Node_Str"" + barcode + ""String_Node_Str"");
    List<DataRow> plate=groups.get(barcode);
    List<DataRow> posCtrlWells=AttributeUtils.filterByAttributeValue(plate,treatmentAttribute,positiveControl);
    List<DataRow> negCtrlWells=AttributeUtils.filterByAttributeValue(plate,treatmentAttribute,negativeControl);
    RealMatrix posMatrix=extractMatrix(posCtrlWells,readouts);
    RealMatrix negMatrix=extractMatrix(negCtrlWells,readouts);
    Double zPrime=Double.NaN;
    Double classificationError=Double.NaN;
    if ((posMatrix != null) && (negMatrix != null)) {
      int[] columnIndex=checkColumns(posMatrix,negMatrix);
      int[] rowIndex=getRowIndices(posMatrix);
      posMatrix.getSubMatrix(rowIndex,columnIndex);
      rowIndex=getRowIndices(negMatrix);
      negMatrix.getSubMatrix(rowIndex,columnIndex);
      posMatrix=bootstrapMatrix(posMatrix);
      negMatrix=bootstrapMatrix(negMatrix);
      if ((posMatrix != null) && (negMatrix != null)) {
        RealVector posMeanVect=computeColumnMeans(posMatrix);
        RealVector negMeanVect=computeColumnMeans(negMatrix);
        Covariance posCov=new Covariance(posMatrix);
        Covariance negCov=new Covariance(negMatrix);
        RealVector meanVect=posMeanVect.subtract(negMeanVect);
        RealMatrix cov=posCov.getCovarianceMatrix();
        cov.add(negCov.getCovarianceMatrix());
        try {
          DecompositionSolver solver=new SingularValueDecompositionImpl(cov).getSolver();
          RealMatrix inv=solver.getInverse();
          RealVector weights=inv.preMultiply(meanVect);
          double[] posProj=computeProjectedValues(posMatrix,weights);
          double[] negProj=computeProjectedValues(negMatrix,weights);
          classificationError=calculateClassificationError(weights,posMeanVect,negMeanVect,posProj,negProj);
          double posCtrlMean=StatUtils.mean(posProj);
          double posCtrlSD=Math.sqrt(StatUtils.variance(posProj));
          double negCtrlMean=StatUtils.mean(negProj);
          double negCtrlSD=Math.sqrt(StatUtils.variance(negProj));
          zPrime=1 - 3 * ((posCtrlSD + negCtrlSD) / Math.abs(posCtrlMean - negCtrlMean));
        }
 catch (        InvalidMatrixException e) {
          zPrime=Double.NaN;
        }
      }
    }
    String posStatus=getSampilingStatus(posMatrix,posCtrlWells.size());
    String negStatus=getSampilingStatus(negMatrix,negCtrlWells.size());
    Attribute attribute;
    attribute=new Attribute(POSITIVE_CONTROL_DESC + ""String_Node_Str"",DoubleCell.TYPE);
    updateCache.add(dataRow,attribute,new DoubleCell(posCtrlWells.size()));
    attribute=new Attribute(POSITIVE_CONTROL_DESC + ""String_Node_Str"",StringCell.TYPE);
    updateCache.add(dataRow,attribute,new StringCell(posStatus));
    attribute=new Attribute(NEGATIVE_CONTROL_DESC + ""String_Node_Str"",DoubleCell.TYPE);
    updateCache.add(dataRow,attribute,new DoubleCell(negCtrlWells.size()));
    attribute=new Attribute(NEGATIVE_CONTROL_DESC + ""String_Node_Str"",StringCell.TYPE);
    updateCache.add(dataRow,attribute,new StringCell(negStatus));
    attribute=new Attribute(""String_Node_Str"",DoubleCell.TYPE);
    updateCache.add(dataRow,attribute,isValidNumber(zPrime) ? DataType.getMissingCell() : new DoubleCell(zPrime));
    attribute=new Attribute(""String_Node_Str"",DoubleCell.TYPE);
    updateCache.add(dataRow,attribute,isValidNumber(classificationError) ? DataType.getMissingCell() : new DoubleCell(classificationError));
    BufTableUtils.updateProgress(exec,counter++,groups.size());
  }
  ColumnRearranger c=updateCache.createColRearranger();
  BufferedDataTable out=exec.createColumnRearrangeTable(barcodeTable,c,exec);
  return new BufferedDataTable[]{out};
}"
81587,"protected RealMatrix bootstrapMatrix(RealMatrix mat){
  double[][] bootstrap;
  if (mat.getRowDimension() < mat.getColumnDimension()) {
    if (mat.getRowDimension() < 3) {
      bootstrap=null;
    }
 else {
      int Nboot;
      if (mat.getRowDimension() < 100) {
        Nboot=100;
      }
 else {
        Nboot=mat.getColumnDimension();
      }
      bootstrap=new double[Nboot][mat.getColumnDimension()];
      int R;
      RandomData rand=new RandomDataImpl();
      for (int c=0; c < mat.getColumnDimension(); ++c) {
        for (int r=0; r < bootstrap.length; ++r) {
          R=rand.nextInt(0,mat.getRowDimension() - 1);
          bootstrap[r][c]=mat.getEntry(R,c);
        }
      }
    }
  }
 else {
    bootstrap=mat.getData();
  }
  return new Array2DRowRealMatrix(bootstrap);
}","protected RealMatrix bootstrapMatrix(RealMatrix mat){
  double[][] bootstrap;
  if ((mat.getRowDimension() < mat.getColumnDimension()) && (mat.getRowDimension() >= 3)) {
    int Nboot;
    if (mat.getRowDimension() < 100) {
      Nboot=100;
    }
 else {
      Nboot=mat.getColumnDimension();
    }
    bootstrap=new double[Nboot][mat.getColumnDimension()];
    int R;
    RandomData rand=new RandomDataImpl();
    for (int c=0; c < mat.getColumnDimension(); ++c) {
      for (int r=0; r < bootstrap.length; ++r) {
        R=rand.nextInt(0,mat.getRowDimension() - 1);
        bootstrap[r][c]=mat.getEntry(R,c);
      }
    }
    return new Array2DRowRealMatrix(bootstrap);
  }
 else {
    return mat;
  }
}"
81588,"public final void run(){
  Object result;
  System.err.println(""String_Node_Str"" + id);
  while (true) {
    message=getMessage();
    try {
switch (message.type) {
case Message.CONSTRUCT_MESSAGE:
        message.target.invokeConstructor(message.message_id,message.arguments);
      break;
case Message.SIMPLE_MESSAGE:
    message.target.invokeMessage(message.message_id,message.arguments);
  break;
case Message.CONTINUATION_MESSAGE:
message.target.invokeMessage(message.message_id,message.arguments);
StageService.sendMessage(message.continuationDirector,2,null);
break;
case Message.TOKEN_MESSAGE:
result=message.target.invokeMessage(message.message_id,message.arguments);
StageService.sendMessage(message.continuationDirector,2,new Object[]{result});
break;
case Message.CONSTRUCT_CONTINUATION_MESSAGE:
message.target.invokeConstructor(message.message_id,message.arguments);
StageService.sendMessage(message.continuationDirector,2,new Object[]{message.target});
break;
default :
System.err.println(""String_Node_Str"" + message.type);
return;
}
}
 catch (TokenPassException tpe) {
}
catch (RemoteMessageException exception) {
}
catch (Exception exception) {
StringBuilder errorMessage=new StringBuilder(""String_Node_Str"");
errorMessage.append(""String_Node_Str"" + message + ""String_Node_Str"");
errorMessage.append(""String_Node_Str"" + message.target + ""String_Node_Str"");
errorMessage.append(""String_Node_Str"" + message.message_id + ""String_Node_Str"");
errorMessage.append(""String_Node_Str"" + message.type + ""String_Node_Str"");
errorMessage.append(""String_Node_Str"");
if (message.arguments == null) errorMessage.append(""String_Node_Str"");
 else {
for (int i=0; i < message.arguments.length; i++) {
errorMessage.append(""String_Node_Str"" + message.arguments[i]);
}
}
errorMessage.append(""String_Node_Str"");
errorMessage.append(""String_Node_Str"" + exception + ""String_Node_Str"");
for (StackTraceElement ste : exception.getStackTrace()) {
errorMessage.append(""String_Node_Str"" + ste.toString() + ""String_Node_Str"");
}
System.err.println(errorMessage.toString());
return;
}
}
}","public final void run(){
  Object result;
  while (true) {
    message=getMessage();
    try {
      System.err.println(""String_Node_Str"" + message);
switch (message.type) {
case Message.CONSTRUCT_MESSAGE:
        message.target.invokeConstructor(message.message_id,message.arguments);
      break;
case Message.SIMPLE_MESSAGE:
    message.target.invokeMessage(message.message_id,message.arguments);
  break;
case Message.CONTINUATION_MESSAGE:
message.target.invokeMessage(message.message_id,message.arguments);
StageService.sendMessage(message.continuationDirector,2,null);
break;
case Message.TOKEN_MESSAGE:
result=message.target.invokeMessage(message.message_id,message.arguments);
StageService.sendMessage(message.continuationDirector,2,new Object[]{result});
break;
case Message.CONSTRUCT_CONTINUATION_MESSAGE:
message.target.invokeConstructor(message.message_id,message.arguments);
StageService.sendMessage(message.continuationDirector,2,new Object[]{message.target});
break;
default :
System.err.println(""String_Node_Str"" + message.type);
return;
}
}
 catch (TokenPassException tpe) {
}
catch (RemoteMessageException exception) {
}
catch (Exception exception) {
StringBuilder errorMessage=new StringBuilder(""String_Node_Str"");
errorMessage.append(""String_Node_Str"" + message + ""String_Node_Str"");
errorMessage.append(""String_Node_Str"" + message.target + ""String_Node_Str"");
errorMessage.append(""String_Node_Str"" + message.message_id + ""String_Node_Str"");
errorMessage.append(""String_Node_Str"" + message.type + ""String_Node_Str"");
errorMessage.append(""String_Node_Str"");
if (message.arguments == null) errorMessage.append(""String_Node_Str"");
 else {
for (int i=0; i < message.arguments.length; i++) {
errorMessage.append(""String_Node_Str"" + message.arguments[i]);
}
}
errorMessage.append(""String_Node_Str"");
errorMessage.append(""String_Node_Str"" + exception + ""String_Node_Str"");
for (StackTraceElement ste : exception.getStackTrace()) {
errorMessage.append(""String_Node_Str"" + ste.toString() + ""String_Node_Str"");
}
System.err.println(errorMessage.toString());
return;
}
}
}"
81589,"public void load(CCompilationUnit cu,String oldModule) throws SalsaNotFoundException, VariableDeclarationException {
  int i;
  if (cu.getExtendsName() != null) {
    this.superType=SymbolTable.getTypeSymbol(cu.getExtendsName().name);
    if (this.superType.isInterface)     this.isInterface=true;
  }
 else {
    this.superType=SymbolTable.getTypeSymbol(""String_Node_Str"");
    this.isInterface=true;
  }
  for (  CName implementsName : cu.getImplementsNames()) {
    this.implementsTypes.add(SymbolTable.getTypeSymbol(implementsName.name));
  }
  if (declaredGenericTypes.size() == 0) {
    for (    CGenericType gt : cu.getName().generic_types) {
      declaredGenericTypes.add(gt.toString());
      addGenericType(gt.toString(),""String_Node_Str"");
      TypeSymbol ts=SymbolTable.getTypeSymbol(gt.toString());
    }
  }
  if (cu.behavior_declaration != null && cu.behavior_declaration.implements_names != null) {
    for (    CName implementsName : cu.behavior_declaration.implements_names) {
      implementsTypes.add(SymbolTable.getTypeSymbol(implementsName.name));
    }
  }
  for (  CGenericType generic_type : cu.getName().generic_types) {
    ObjectType ot;
    if (generic_type.bound != null) {
      if (generic_type.name.name.equals(""String_Node_Str"")) {
        CompilerErrors.printErrorMessage(""String_Node_Str"",generic_type);
      }
      if (generic_type.modifier.equals(""String_Node_Str"")) {
        ot=new ObjectType(SymbolTable.getCurrentModule() + generic_type.name.name,SymbolTable.getTypeSymbol(generic_type.bound.name));
      }
 else {
        CompilerErrors.printErrorMessage(""String_Node_Str"",generic_type);
        ot=null;
      }
    }
 else {
      if (generic_type.name.name.equals(""String_Node_Str"")) {
        CompilerErrors.printErrorMessage(""String_Node_Str"",generic_type);
        ot=new ObjectType(SymbolTable.getCurrentModule() + generic_type.name.name);
      }
 else {
        ot=new ObjectType(SymbolTable.getCurrentModule() + generic_type.name.name,SymbolTable.getTypeSymbol(""String_Node_Str""));
      }
    }
    SymbolTable.knownTypes.put(ot.getLongSignature(),ot);
    SymbolTable.namespace.put(ot.getName(),ot.getLongSignature());
  }
  ArrayList<MessageSymbol> superclassMessageHandlers=null;
  if (getSuperType() instanceof ActorType) {
    ActorType superType=(ActorType)getSuperType();
    superclassMessageHandlers=new ArrayList<MessageSymbol>();
    for (    MessageSymbol ms : superType.message_handlers)     superclassMessageHandlers.add(ms.copy());
    for (    MessageSymbol ms : superType.overloaded_message_handlers) {
      MessageSymbol copy=ms.copy();
      copy.isOverloadedByParent=true;
      superclassMessageHandlers.add(copy);
    }
  }
 else {
    superclassMessageHandlers=new ArrayList<MessageSymbol>();
  }
  Vector<CConstructor> cv=cu.getConstructors();
  if (cv != null) {
    for (i=0; i < cv.size(); i++) {
      ConstructorSymbol cs=new ConstructorSymbol(i,this,cv.get(i));
      constructors.add(cs);
    }
  }
  if (cv == null || cv.size() == 0) {
    if (cv.size() == 0) {
      ConstructorSymbol cs=new ConstructorSymbol(0,this,new TypeSymbol[]{});
      constructors.add(cs);
    }
  }
  ArrayList<MessageSymbol> childMessageHandlers=new ArrayList<MessageSymbol>();
  Vector<CMessageHandler> mv=cu.getMessageHandlers();
  for (i=0; i < mv.size(); i++) {
    MessageSymbol ms=new MessageSymbol(i,this,mv.get(i));
    childMessageHandlers.add(ms);
  }
  for (i=0; i < superclassMessageHandlers.size(); i++) {
    MessageSymbol sms=superclassMessageHandlers.get(i);
    MessageSymbol overloadedMessageHandler=null;
    for (    MessageSymbol cms : childMessageHandlers) {
      if (sms.matches(cms) == 0) {
        if (overloadedMessageHandler != null) {
          System.err.println(""String_Node_Str"");
          throw new RuntimeException();
        }
 else {
          overloadedMessageHandler=cms;
        }
      }
    }
    if (overloadedMessageHandler == null) {
      message_handlers.add(sms);
    }
 else {
      message_handlers.add(overloadedMessageHandler);
      childMessageHandlers.remove(overloadedMessageHandler);
      if (!sms.is_abstract) {
        overloaded_message_handlers.add(sms.copy());
      }
    }
  }
  for (  MessageSymbol ms : childMessageHandlers)   message_handlers.add(ms);
  int current=0;
  for (  MessageSymbol ms : message_handlers)   ms.id=current++;
  for (  MessageSymbol ms : overloaded_message_handlers)   ms.id=current++;
  Vector<CLocalVariableDeclaration> fv=cu.getFields();
  for (i=0; i < fv.size(); i++) {
    Vector<CVariableInit> vv=fv.get(i).variables;
    for (int j=0; j < vv.size(); j++) {
      FieldSymbol fs=new FieldSymbol(this,fv.get(i),vv.get(j));
      fields.add(fs);
    }
  }
  SymbolTable.setCurrentModule(oldModule);
}","public void load(CCompilationUnit cu,String oldModule) throws SalsaNotFoundException, VariableDeclarationException {
  int i;
  if (cu.getExtendsName() != null) {
    this.superType=SymbolTable.getTypeSymbol(cu.getExtendsName().name);
    if (this.superType.isInterface)     this.isInterface=true;
  }
 else {
    this.superType=SymbolTable.getTypeSymbol(""String_Node_Str"");
    this.isInterface=true;
  }
  for (  CName implementsName : cu.getImplementsNames()) {
    this.implementsTypes.add(SymbolTable.getTypeSymbol(implementsName.name));
  }
  if (declaredGenericTypes.size() == 0) {
    for (    CGenericType gt : cu.getName().generic_types) {
      declaredGenericTypes.add(gt.toString());
      addGenericType(gt.toString(),""String_Node_Str"");
      TypeSymbol ts=SymbolTable.getTypeSymbol(gt.toString());
    }
  }
  if (cu.behavior_declaration != null && cu.behavior_declaration.implements_names != null) {
    for (    CName implementsName : cu.behavior_declaration.implements_names) {
      implementsTypes.add(SymbolTable.getTypeSymbol(implementsName.name));
    }
  }
  for (  CGenericType generic_type : cu.getName().generic_types) {
    ObjectType ot;
    if (generic_type.bound != null) {
      if (generic_type.name.name.equals(""String_Node_Str"")) {
        CompilerErrors.printErrorMessage(""String_Node_Str"",generic_type);
      }
      if (generic_type.modifier.equals(""String_Node_Str"")) {
        ot=new ObjectType(SymbolTable.getCurrentModule() + generic_type.name.name,SymbolTable.getTypeSymbol(generic_type.bound.name));
      }
 else {
        CompilerErrors.printErrorMessage(""String_Node_Str"",generic_type);
        ot=null;
      }
    }
 else {
      if (generic_type.name.name.equals(""String_Node_Str"")) {
        CompilerErrors.printErrorMessage(""String_Node_Str"",generic_type);
        ot=new ObjectType(SymbolTable.getCurrentModule() + generic_type.name.name);
      }
 else {
        ot=new ObjectType(SymbolTable.getCurrentModule() + generic_type.name.name,SymbolTable.getTypeSymbol(""String_Node_Str""));
      }
    }
    SymbolTable.knownTypes.put(ot.getLongSignature(),ot);
    SymbolTable.namespace.put(ot.getName(),ot.getLongSignature());
  }
  ArrayList<MessageSymbol> superclassMessageHandlers=null;
  if (getSuperType() instanceof ActorType) {
    ActorType superType=(ActorType)getSuperType();
    superclassMessageHandlers=new ArrayList<MessageSymbol>();
    for (    MessageSymbol ms : superType.message_handlers)     superclassMessageHandlers.add(ms.copy());
    for (    MessageSymbol ms : superType.overloaded_message_handlers) {
      MessageSymbol copy=ms.copy();
      copy.isOverloadedByParent=true;
      superclassMessageHandlers.add(copy);
    }
  }
 else {
    superclassMessageHandlers=new ArrayList<MessageSymbol>();
  }
  Vector<CConstructor> cv=cu.getConstructors();
  if (cv != null) {
    for (i=0; i < cv.size(); i++) {
      ConstructorSymbol cs=new ConstructorSymbol(i,this,cv.get(i));
      constructors.add(cs);
    }
  }
  if (cv == null || cv.size() == 0) {
    if (cv.size() == 0) {
      ConstructorSymbol cs=new ConstructorSymbol(0,this,new TypeSymbol[]{});
      constructors.add(cs);
    }
  }
  ArrayList<MessageSymbol> childMessageHandlers=new ArrayList<MessageSymbol>();
  Vector<CMessageHandler> mv=cu.getMessageHandlers();
  for (i=0; i < mv.size(); i++) {
    MessageSymbol ms=new MessageSymbol(i,this,mv.get(i));
    childMessageHandlers.add(ms);
  }
  for (i=0; i < superclassMessageHandlers.size(); i++) {
    MessageSymbol sms=superclassMessageHandlers.get(i);
    MessageSymbol overloadedMessageHandler=null;
    for (    MessageSymbol cms : childMessageHandlers) {
      if (sms.matches(cms) == 0) {
        if (overloadedMessageHandler != null) {
          System.err.println(""String_Node_Str"");
          throw new RuntimeException();
        }
 else {
          overloadedMessageHandler=cms;
        }
      }
    }
    if (overloadedMessageHandler == null) {
      message_handlers.add(sms);
    }
 else {
      message_handlers.add(overloadedMessageHandler);
      childMessageHandlers.remove(overloadedMessageHandler);
      if (!sms.is_abstract) {
        overloaded_message_handlers.add(sms.copy());
      }
    }
  }
  for (  MessageSymbol ms : childMessageHandlers)   message_handlers.add(ms);
  int current=0;
  for (  MessageSymbol ms : message_handlers)   ms.id=current++;
  for (  MessageSymbol ms : overloaded_message_handlers)   ms.id=current++;
  for (  MessageSymbol ms : message_handlers) {
  }
  for (  MessageSymbol ms : overloaded_message_handlers) {
  }
  Vector<CLocalVariableDeclaration> fv=cu.getFields();
  for (i=0; i < fv.size(); i++) {
    Vector<CVariableInit> vv=fv.get(i).variables;
    for (int j=0; j < vv.size(); j++) {
      FieldSymbol fs=new FieldSymbol(this,fv.get(i),vv.get(j));
      fields.add(fs);
    }
  }
  SymbolTable.setCurrentModule(oldModule);
}"
81590,"public ArrayType(TypeSymbol subtype,String dimensions) throws SalsaNotFoundException, VariableDeclarationException {
  if (dimensions.length() > 2)   this.subtype=new ArrayType(subtype,dimensions.substring(2,dimensions.length()));
 else   this.subtype=subtype;
  this.superType=SymbolTable.getTypeSymbol(""String_Node_Str"");
  this.module=subtype.getModule();
  this.name=subtype.getName() + ""String_Node_Str"";
  FieldSymbol fs=new FieldSymbol(this,""String_Node_Str"",SymbolTable.getTypeSymbol(""String_Node_Str""));
  fields.add(fs);
}","public ArrayType(TypeSymbol subtype,String dimensions) throws SalsaNotFoundException, VariableDeclarationException {
  if (dimensions.length() > 2) {
    this.subtype=new ArrayType(subtype,dimensions.substring(2,dimensions.length()));
  }
 else {
    this.subtype=subtype;
  }
  this.superType=SymbolTable.getTypeSymbol(""String_Node_Str"");
  this.module=this.subtype.getModule();
  this.name=this.subtype.getName() + ""String_Node_Str"";
  FieldSymbol fs=new FieldSymbol(this,""String_Node_Str"",SymbolTable.getTypeSymbol(""String_Node_Str""));
  fields.add(fs);
}"
81591,"public static void addGenericType(String gt,String superType) throws SalsaNotFoundException, VariableDeclarationException {
  String extendsGeneric=null, superGeneric=null;
  if (gt.contains(""String_Node_Str"")) {
    superGeneric=gt.substring(gt.indexOf(""String_Node_Str"") + ""String_Node_Str"".length(),gt.length());
    addGenericType(superGeneric,superType);
  }
 else   if (gt.contains(""String_Node_Str"")) {
    extendsGeneric=gt.substring(gt.indexOf(""String_Node_Str"") + ""String_Node_Str"".length(),gt.length());
    addGenericType(extendsGeneric,superType);
  }
  TypeSymbol genericType=null;
  try {
    genericType=SymbolTable.getTypeSymbol(gt);
  }
 catch (  SalsaNotFoundException snfe) {
    genericType=null;
  }
  if (genericType == null) {
    if (superType.equals(""String_Node_Str"")) {
      if (extendsGeneric != null)       genericType=new ObjectType(gt,SymbolTable.getTypeSymbol(extendsGeneric));
 else       genericType=new ObjectType(gt,SymbolTable.getTypeSymbol(superType));
    }
 else {
      if (extendsGeneric != null)       genericType=new ActorType(gt,SymbolTable.getTypeSymbol(extendsGeneric));
 else       genericType=new ActorType(gt,SymbolTable.getTypeSymbol(superType));
    }
    SymbolTable.addGenericVariableType(gt,genericType);
  }
}","public static void addGenericType(String gt,String superType) throws SalsaNotFoundException, VariableDeclarationException {
  String extendsGeneric=null, superGeneric=null;
  if (gt.contains(""String_Node_Str"")) {
    superGeneric=gt.substring(gt.indexOf(""String_Node_Str"") + ""String_Node_Str"".length(),gt.length());
    addGenericType(superGeneric,superType);
  }
 else   if (gt.contains(""String_Node_Str"")) {
    extendsGeneric=gt.substring(gt.indexOf(""String_Node_Str"") + ""String_Node_Str"".length(),gt.length());
    addGenericType(extendsGeneric,superType);
  }
  TypeSymbol genericType=null;
  try {
    genericType=SymbolTable.getTypeSymbol(gt);
    if (!SymbolTable.isGeneric(gt)) {
    }
 else {
    }
  }
 catch (  SalsaNotFoundException snfe) {
    genericType=null;
  }
  if (genericType == null) {
    if (superType.equals(""String_Node_Str"")) {
      if (extendsGeneric != null)       genericType=new ObjectType(gt,SymbolTable.getTypeSymbol(extendsGeneric));
 else       genericType=new ObjectType(gt,SymbolTable.getTypeSymbol(superType));
    }
 else {
      if (extendsGeneric != null)       genericType=new ActorType(gt,SymbolTable.getTypeSymbol(extendsGeneric));
 else       genericType=new ActorType(gt,SymbolTable.getTypeSymbol(superType));
    }
    SymbolTable.addGenericVariableType(gt,genericType);
  }
}"
81592,"public String toJavaCode(){
  String code=""String_Node_Str"";
  if (extended_for != null) {
    code+=extended_for.type.name + ""String_Node_Str"";
    code+=extended_for.name + ""String_Node_Str"";
    try {
      SymbolTable.addVariableType(extended_for.name,extended_for.type.name,false,false);
    }
 catch (    VariableDeclarationException vde) {
      CompilerErrors.printErrorMessage(""String_Node_Str"" + vde.toString(),extended_for);
    }
catch (    SalsaNotFoundException snfe) {
      CompilerErrors.printErrorMessage(""String_Node_Str"" + snfe.toString(),extended_for);
    }
    if (extended_for.expression.isToken()) {
      CompilerErrors.printErrorMessage(""String_Node_Str"",extended_for);
    }
 else {
      code+=extended_for.expression.toJavaCode();
    }
    code+=""String_Node_Str"";
    SymbolTable.openScope();
  }
 else {
    if (init.isToken()) {
      CompilerErrors.printErrorMessage(""String_Node_Str"",init);
    }
    SymbolTable.openScope();
    if (init != null) {
      code+=init.toJavaCode();
    }
 else {
      code+=""String_Node_Str"";
    }
    if (conditional.isToken()) {
      CompilerErrors.printErrorMessage(""String_Node_Str"",conditional);
    }
    code+=""String_Node_Str"" + conditional.toJavaCode() + ""String_Node_Str"";
    for (    CExpression expression : increment_expressions) {
      if (expression.isToken()) {
        CompilerErrors.printErrorMessage(""String_Node_Str"",expression);
      }
    }
    for (int i=0; i < increment_expressions.size(); i++) {
      code+=increment_expressions.get(i).toJavaCode();
      if (i != increment_expressions.size() - 1)       code+=""String_Node_Str"";
    }
    code+=""String_Node_Str"";
  }
  code+=statement.toJavaCode();
  SymbolTable.closeScope();
  return code;
}","public String toJavaCode(){
  String code=""String_Node_Str"";
  if (extended_for != null) {
    code+=extended_for.type.name + ""String_Node_Str"";
    code+=extended_for.name + ""String_Node_Str"";
    try {
      SymbolTable.addVariableType(extended_for.name,extended_for.type.name,false,false);
    }
 catch (    VariableDeclarationException vde) {
      CompilerErrors.printErrorMessage(""String_Node_Str"" + vde.toString(),extended_for);
    }
catch (    SalsaNotFoundException snfe) {
      CompilerErrors.printErrorMessage(""String_Node_Str"" + snfe.toString(),extended_for);
    }
    if (extended_for.expression.isToken()) {
      CompilerErrors.printErrorMessage(""String_Node_Str"",extended_for);
    }
 else {
      code+=extended_for.expression.toJavaCode();
    }
    code+=""String_Node_Str"";
    SymbolTable.openScope();
  }
 else {
    if (init.isToken()) {
      CompilerErrors.printErrorMessage(""String_Node_Str"",init);
    }
    SymbolTable.openScope();
    if (init != null) {
      code+=init.toJavaCode();
    }
 else {
      code+=""String_Node_Str"";
    }
    if (conditional.isToken()) {
      CompilerErrors.printErrorMessage(""String_Node_Str"",conditional);
    }
    code+=""String_Node_Str"" + conditional.toJavaCode() + ""String_Node_Str"";
    for (    CExpression expression : increment_expressions) {
      if (expression.isToken()) {
        CompilerErrors.printErrorMessage(""String_Node_Str"",expression);
      }
    }
    for (int i=0; i < increment_expressions.size(); i++) {
      code+=increment_expressions.get(i).toJavaCode();
      if (i != increment_expressions.size() - 1)       code+=""String_Node_Str"";
    }
    code+=""String_Node_Str"";
  }
  code+=statement.toJavaCode();
  if (!(statement instanceof CBlock))   code+=""String_Node_Str"";
  SymbolTable.closeScope();
  return code;
}"
81593,"public Object invokeMessage(int messageId,Object[] arguments) throws RemoteMessageException, TokenPassException, MessageHandlerNotFoundException {
switch (messageId) {
case 0:
    return toString();
case 1:
  return hashCode();
case 2:
setNextThread((ThreadRing)arguments[0]);
return null;
case 3:
forwardMessage((Integer)arguments[0]);
return null;
default :
throw new MessageHandlerNotFoundException(messageId,arguments);
}
}","public Object invokeMessage(int messageId,Object[] arguments) throws RemoteMessageException, TokenPassException, MessageHandlerNotFoundException {
switch (messageId) {
case 0:
    return toString();
case 1:
  return hashCode();
case 2:
return getStageId();
case 3:
setNextThread((ThreadRing)arguments[0]);
return null;
case 4:
forwardMessage((Integer)arguments[0]);
return null;
default :
throw new MessageHandlerNotFoundException(messageId,arguments);
}
}"
81594,"public String getMessageInformation(int messageId){
switch (messageId) {
case 0:
    return ""String_Node_Str"";
case 1:
  return ""String_Node_Str"";
case 2:
return ""String_Node_Str"";
case 3:
return ""String_Node_Str"";
}
return ""String_Node_Str"";
}","public String getMessageInformation(int messageId){
switch (messageId) {
case 0:
    return ""String_Node_Str"";
case 1:
  return ""String_Node_Str"";
case 2:
return ""String_Node_Str"";
case 3:
return ""String_Node_Str"";
case 4:
return ""String_Node_Str"";
}
return ""String_Node_Str"";
}"
81595,"public void forwardMessage(int value){
  if (value == 0) {
    System.out.println(id);
    System.exit(0);
  }
 else {
    value--;
    StageService.sendMessage(next,3,new Object[]{value});
  }
}","public void forwardMessage(int value){
  if (value == 0) {
    System.out.println(id);
    System.exit(0);
  }
 else {
    value--;
    StageService.sendMessage(next,4,new Object[]{value});
  }
}"
81596,"public final static void passToken(ContinuationDirector token,Director currentContinuation){
  if (currentContinuation == null)   return;
  token.stage.putMessageInMailbox(new Message(Message.SIMPLE_MESSAGE,token,4,new Object[]{currentContinuation},null));
}","public final static void passToken(ContinuationDirector token,Director currentContinuation){
  if (currentContinuation == null)   return;
  token.stage.putMessageInMailbox(new Message(Message.SIMPLE_MESSAGE,token,5,new Object[]{currentContinuation},null));
}"
81597,"public final void run(){
  Object result;
  while (true) {
    message=getMessage();
    try {
switch (message.type) {
case Message.CONSTRUCT_MESSAGE:
        message.target.invokeConstructor(message.message_id,message.arguments);
      break;
case Message.SIMPLE_MESSAGE:
    message.target.invokeMessage(message.message_id,message.arguments);
  break;
case Message.CONTINUATION_MESSAGE:
message.target.invokeMessage(message.message_id,message.arguments);
StageService.sendMessage(message.continuationDirector,2,null);
break;
case Message.TOKEN_MESSAGE:
result=message.target.invokeMessage(message.message_id,message.arguments);
StageService.sendMessage(message.continuationDirector,2,new Object[]{result});
break;
case Message.CONSTRUCT_CONTINUATION_MESSAGE:
message.target.invokeConstructor(message.message_id,message.arguments);
StageService.sendMessage(message.continuationDirector,2,new Object[]{message.target});
break;
default :
System.err.println(""String_Node_Str"" + message.type);
return;
}
}
 catch (TokenPassException tpe) {
}
catch (RemoteMessageException exception) {
}
catch (Exception exception) {
StringBuilder errorMessage=new StringBuilder(""String_Node_Str"");
errorMessage.append(""String_Node_Str"" + message.target.getMessageInformation(message.message_id) + ""String_Node_Str"");
errorMessage.append(""String_Node_Str"" + message + ""String_Node_Str"");
errorMessage.append(""String_Node_Str"" + message.target + ""String_Node_Str"");
errorMessage.append(""String_Node_Str"" + message.message_id + ""String_Node_Str"");
errorMessage.append(""String_Node_Str"" + message.type + ""String_Node_Str"");
errorMessage.append(""String_Node_Str"");
if (message.arguments == null) errorMessage.append(""String_Node_Str"");
 else {
for (int i=0; i < message.arguments.length; i++) {
errorMessage.append(""String_Node_Str"" + message.arguments[i]);
}
}
errorMessage.append(""String_Node_Str"");
errorMessage.append(""String_Node_Str"" + exception + ""String_Node_Str"");
for (StackTraceElement ste : exception.getStackTrace()) {
errorMessage.append(""String_Node_Str"" + ste.toString() + ""String_Node_Str"");
}
System.err.println(errorMessage.toString());
return;
}
}
}","public final void run(){
  Object result;
  while (true) {
    message=getMessage();
    try {
switch (message.type) {
case Message.CONSTRUCT_MESSAGE:
        message.target.invokeConstructor(message.message_id,message.arguments);
      break;
case Message.SIMPLE_MESSAGE:
    message.target.invokeMessage(message.message_id,message.arguments);
  break;
case Message.CONTINUATION_MESSAGE:
message.target.invokeMessage(message.message_id,message.arguments);
StageService.sendMessage(message.continuationDirector,3,null);
break;
case Message.TOKEN_MESSAGE:
result=message.target.invokeMessage(message.message_id,message.arguments);
StageService.sendMessage(message.continuationDirector,3,new Object[]{result});
break;
case Message.CONSTRUCT_CONTINUATION_MESSAGE:
message.target.invokeConstructor(message.message_id,message.arguments);
StageService.sendMessage(message.continuationDirector,3,new Object[]{message.target});
break;
default :
System.err.println(""String_Node_Str"" + message.type);
return;
}
}
 catch (TokenPassException tpe) {
}
catch (RemoteMessageException exception) {
}
catch (Exception exception) {
StringBuilder errorMessage=new StringBuilder(""String_Node_Str"");
errorMessage.append(""String_Node_Str"" + message.target.getMessageInformation(message.message_id) + ""String_Node_Str"");
errorMessage.append(""String_Node_Str"" + message + ""String_Node_Str"");
errorMessage.append(""String_Node_Str"" + message.target + ""String_Node_Str"");
errorMessage.append(""String_Node_Str"" + message.message_id + ""String_Node_Str"");
errorMessage.append(""String_Node_Str"" + message.type + ""String_Node_Str"");
errorMessage.append(""String_Node_Str"");
if (message.arguments == null) errorMessage.append(""String_Node_Str"");
 else {
for (int i=0; i < message.arguments.length; i++) {
errorMessage.append(""String_Node_Str"" + message.arguments[i]);
}
}
errorMessage.append(""String_Node_Str"");
errorMessage.append(""String_Node_Str"" + exception + ""String_Node_Str"");
for (StackTraceElement ste : exception.getStackTrace()) {
errorMessage.append(""String_Node_Str"" + ste.toString() + ""String_Node_Str"");
}
System.err.println(errorMessage.toString());
return;
}
}
}"
81598,"public static final void sendMessageToRemote(String host,int port,Message message){
  OutgoingTheaterConnection out=getSocket(host,port);
  StageService.sendMessage(new Message(Message.SIMPLE_MESSAGE,out,2,new Object[]{message}));
}","public static final void sendMessageToRemote(String host,int port,Message message){
  OutgoingTheaterConnection out=getSocket(host,port);
  StageService.sendMessage(new Message(Message.SIMPLE_MESSAGE,out,3,new Object[]{message}));
}"
81599,"public static final void createRemotely(String host,int port,Object remoteCreator){
  OutgoingTheaterConnection out=getSocket(host,port);
  StageService.sendMessage(new Message(Message.SIMPLE_MESSAGE,out,4,new Object[]{remoteCreator}));
}","public static final void createRemotely(String host,int port,Object remoteCreator){
  OutgoingTheaterConnection out=getSocket(host,port);
  StageService.sendMessage(new Message(Message.SIMPLE_MESSAGE,out,5,new Object[]{remoteCreator}));
}"
81600,"public static final void migrateActor(String host,int port,MobileActor.State actor){
  actor.host=host;
  actor.port=port;
  OutgoingTheaterConnection out=getSocket(host,port);
  StageService.sendMessage(new Message(Message.SIMPLE_MESSAGE,out,3,new Object[]{actor}));
}","public static final void migrateActor(String host,int port,MobileActor.State actor){
  actor.host=host;
  actor.port=port;
  OutgoingTheaterConnection out=getSocket(host,port);
  StageService.sendMessage(new Message(Message.SIMPLE_MESSAGE,out,4,new Object[]{actor}));
}"
81601,"private final synchronized Message getMessage(){
  if (mailbox.isEmpty()) {
    try {
      wait();
    }
 catch (    InterruptedException e) {
      System.err.println(""String_Node_Str"");
      System.err.println(""String_Node_Str"" + e);
      System.exit(0);
    }
  }
  return mailbox.removeFirst();
}","private final synchronized Message getMessage(){
  Message message=null;
  while (mailbox.isEmpty()) {
    try {
      wait();
    }
 catch (    InterruptedException e) {
      System.err.println(""String_Node_Str"");
      System.err.println(""String_Node_Str"" + e);
      System.exit(0);
    }
  }
  message=mailbox.removeFirst();
  return message;
}"
81602,"public String toJavaCode(TypeSymbol currentType){
  String code=""String_Node_Str"";
  boolean isParentMessageSend=false;
  boolean currentValueIsToken=false;
  if (literal != null) {
    if (literal.value.equals(""String_Node_Str"")) {
      code+=""String_Node_Str"";
      if (modifications.size() == 0 || (modifications.size() > 0 && modifications.get(0) instanceof CMessageSend)) {
        if (SymbolTable.is_mobile_actor) {
          code+=""String_Node_Str"";
        }
      }
    }
 else     if (literal.value.equals(""String_Node_Str"")) {
      if (modifications.size() > 0 && modifications.get(0) instanceof CMessageSend) {
        code+=""String_Node_Str"";
        if (SymbolTable.is_mobile_actor) {
          code+=""String_Node_Str"";
        }
        isParentMessageSend=true;
      }
 else {
        code+=""String_Node_Str"";
      }
    }
 else     if (literal.value.equals(""String_Node_Str"")) {
      code+=""String_Node_Str"";
    }
 else {
      code+=literal.toJavaCode();
    }
  }
 else   if (variable_name != null) {
    code+=variable_name;
    try {
      currentValueIsToken=SymbolTable.isToken(variable_name.name);
    }
 catch (    SalsaNotFoundException snfe) {
      CompilerErrors.printErrorMessage(""String_Node_Str"",variable_name);
      currentValueIsToken=false;
    }
  }
 else   if (expression != null) {
    code+=""String_Node_Str"" + expression.toJavaCode() + ""String_Node_Str"";
    currentValueIsToken=expression.isToken();
  }
 else   if (allocation != null) {
    code+=allocation.toJavaCode();
    currentValueIsToken=allocation.isToken();
  }
  if (cast_type != null) {
    if (isToken()) {
      if (cast_type.is_token) {
        code=""String_Node_Str"" + code;
      }
 else {
        CompilerErrors.printErrorMessage(""String_Node_Str"",cast_type);
      }
    }
 else {
      if (cast_type.is_token) {
        CompilerErrors.printErrorMessage(""String_Node_Str"",cast_type);
      }
 else {
        code=""String_Node_Str"" + cast_type.name + ""String_Node_Str""+ code;
      }
    }
  }
  if (currentType == null)   currentType=getValueType();
  int position=0;
  for (  CModification modification : modifications) {
    if (modification instanceof CArrayAccess) {
      CArrayAccess aa=(CArrayAccess)modification;
      if (aa.expression.isToken()) {
        System.err.println(""String_Node_Str"");
        CompilerErrors.printErrorMessage(""String_Node_Str"",aa);
        currentType=null;
      }
 else {
        code+=""String_Node_Str"" + aa.expression.toJavaCode() + ""String_Node_Str"";
        if (currentType == null) {
          System.err.println(""String_Node_Str"");
          throw new RuntimeException();
        }
        currentType=((ArrayType)currentType).getSubtype();
      }
      if (aa.expression.isToken())       currentValueIsToken=true;
    }
 else     if (modification instanceof CFieldAccess) {
      CFieldAccess fa=(CFieldAccess)modification;
      if (currentType instanceof ObjectType) {
        code+=""String_Node_Str"" + fa.name;
        currentType=((ObjectType)currentType).getFieldType(fa.name);
      }
 else       if (currentType instanceof ActorType) {
        code+=""String_Node_Str"" + fa.name;
        currentType=((ActorType)currentType).getFieldType(fa.name);
      }
 else       if (currentType instanceof ArrayType) {
        code+=""String_Node_Str"" + fa.name;
        currentType=((ArrayType)currentType).getFieldType(fa.name);
      }
 else       if (currentType instanceof PrimitiveType) {
        CompilerErrors.printErrorMessage(""String_Node_Str"",fa);
        currentType=null;
      }
 else {
        CompilerErrors.printErrorMessage(""String_Node_Str"",fa);
        currentType=null;
      }
    }
 else     if (modification instanceof CMethodInvocation) {
      CMethodInvocation mi=(CMethodInvocation)modification;
      try {
        if (currentType instanceof ObjectType) {
          MethodSymbol ms=((ObjectType)currentType).getMethod(mi.method_name,mi.arguments);
          if (ms == null) {
            CompilerErrors.printErrorMessage(""String_Node_Str"",mi);
            currentType=null;
          }
          currentType=ms.getReturnType();
        }
 else         if (currentType instanceof ActorType) {
          if (modifications.getFirst().equals(modification) && (isSelf() || isParent() || SymbolTable.isReferenceMethod((CMethodInvocation)modification))) {
            currentType=((ActorType)currentType).getMessage(mi.method_name,mi.arguments,isParentMessageSend).getPassType();
          }
 else {
            CompilerErrors.printErrorMessage(""String_Node_Str"",mi);
            currentType=null;
          }
        }
 else         if (currentType instanceof ArrayType) {
          CompilerErrors.printErrorMessage(""String_Node_Str"",mi);
          currentType=null;
        }
 else         if (currentType instanceof PrimitiveType) {
          CompilerErrors.printErrorMessage(""String_Node_Str"",mi);
          currentType=null;
        }
 else {
          CompilerErrors.printErrorMessage(""String_Node_Str"",mi);
          currentType=null;
        }
        if (currentType != null) {
          code+=""String_Node_Str"" + mi.method_name + ""String_Node_Str"";
          for (          CExpression argument : mi.arguments) {
            if (!argument.isToken()) {
              code+=argument.toJavaCode();
              if (!argument.equals(mi.arguments.lastElement()))               code+=""String_Node_Str"";
            }
 else {
              CompilerErrors.printErrorMessage(""String_Node_Str"",argument);
            }
          }
          code+=""String_Node_Str"";
        }
      }
 catch (      VariableDeclarationException vde) {
        CompilerErrors.printErrorMessage(""String_Node_Str"" + vde.toString(),mi);
        throw new RuntimeException(vde);
      }
catch (      SalsaNotFoundException snfe) {
        CompilerErrors.printErrorMessage(""String_Node_Str"" + snfe.toString(),mi);
        throw new RuntimeException(snfe);
      }
    }
 else     if (modification instanceof CMessageSend) {
      CMessageSend ms=(CMessageSend)modification;
      try {
        String joinDirector=SymbolTable.getJoinDirector();
        if (ms.message_property != null && !ms.message_property.name.equals(""String_Node_Str"")) {
          CompilerErrors.printErrorMessage(""String_Node_Str"" + ms.message_property.name + ""String_Node_Str"",ms);
        }
        boolean moreMessages=false;
        for (int new_pos=position + 1; new_pos < modifications.size(); new_pos++) {
          if (modifications.get(new_pos) instanceof CMessageSend) {
            moreMessages=true;
            break;
          }
        }
        String pre_code=""String_Node_Str"";
        if (SymbolTable.continuesToPass && !SymbolTable.withinArguments) {
          pre_code+=""String_Node_Str"";
        }
 else         if (SymbolTable.withinArguments) {
          pre_code+=""String_Node_Str"";
        }
 else         if (SymbolTable.continuationTokenMessage) {
          pre_code+=""String_Node_Str"";
        }
 else         if (SymbolTable.isExpressionContinuation) {
          pre_code+=""String_Node_Str"";
        }
 else         if (SymbolTable.messageContinues || joinDirector != null) {
          if (moreMessages) {
            pre_code+=""String_Node_Str"";
          }
 else {
            if (SymbolTable.firstContinuation()) {
              pre_code+=""String_Node_Str"";
              SymbolTable.initializedFirstContinuation();
            }
            pre_code+=""String_Node_Str"";
          }
        }
 else         if (moreMessages) {
          pre_code+=""String_Node_Str"";
        }
 else {
          pre_code+=""String_Node_Str"";
        }
        String expression_director_code=""String_Node_Str"";
        pre_code+=""String_Node_Str"";
        String target_code=code;
        if (currentType.isInterface)         target_code=""String_Node_Str"" + target_code;
        if (currentValueIsToken) {
          code=pre_code + ""String_Node_Str"";
        }
 else {
          code=pre_code + target_code + ""String_Node_Str"";
        }
        if (!(currentType instanceof ActorType)) {
          CompilerErrors.printErrorMessage(""String_Node_Str"" + currentType.getLongSignature() + ""String_Node_Str"",ms);
          throw new RuntimeException();
        }
        ActorType at=(ActorType)currentType;
        MessageSymbol messageSymbol=null;
        try {
          messageSymbol=at.getMessage(ms.message_name,ms.arguments,isParentMessageSend);
        }
 catch (        VariableDeclarationException vde) {
          CompilerErrors.printErrorMessage(""String_Node_Str"" + ms.message_name + ""String_Node_Str""+ vde.toString(),ms);
          throw new RuntimeException(vde);
        }
catch (        SalsaNotFoundException snfe) {
          CompilerErrors.printErrorMessage(""String_Node_Str"" + ms.message_name + ""String_Node_Str"",ms);
          throw new RuntimeException(snfe);
        }
        code+=messageSymbol.getId();
        code+=""String_Node_Str"" + ms.message_name + ""String_Node_Str"";
        String argument_code=""String_Node_Str"";
        String argument_tokens=""String_Node_Str"";
        boolean hasContinuationToken=false;
        boolean hasToken=false;
        int j=0;
        for (        CExpression argument : ms.arguments) {
          if (argument.isToken()) {
            if (argument.requiresExpressionDirector()) {
              expression_director_code+=argument.getExpressionDirectorCode();
            }
            if (argument_tokens.length() > 10)             argument_tokens+=""String_Node_Str"";
            argument_tokens+=j;
            hasToken=true;
          }
 else           if (SymbolTable.isMutableObject(argument.getType())) {
            argument_code+=""String_Node_Str"" + argument.getType().getName() + ""String_Node_Str"";
          }
          SymbolTable.withinArguments=true;
          argument_code+=argument.toJavaCode();
          SymbolTable.withinArguments=false;
          if (SymbolTable.isMutableObject(argument.getType()))           argument_code+=""String_Node_Str"";
          if (!argument.equals(ms.arguments.lastElement()))           argument_code+=""String_Node_Str"";
          j++;
        }
        code=expression_director_code + code;
        if (hasToken) {
          argument_code+=""String_Node_Str"" + argument_tokens + ""String_Node_Str"";
        }
 else {
          argument_code+=""String_Node_Str"";
        }
        if (ms.arguments.size() == 0)         argument_code=""String_Node_Str"";
        code+=argument_code;
        if (ms.message_property != null && ms.message_property.name.equals(""String_Node_Str"")) {
          code+=""String_Node_Str"";
          for (int i=0; i < ms.message_property.arguments.size(); i++) {
            CExpression arg=ms.message_property.arguments.get(i);
            if (!arg.isToken()) {
              CompilerErrors.printErrorMessage(""String_Node_Str"",arg);
              throw new RuntimeException();
            }
            code+=arg.toJavaCode();
            if (i != ms.message_property.arguments.size() - 1)             code+=""String_Node_Str"";
          }
          if (SymbolTable.messageRequiresContinuation) {
            code+=""String_Node_Str"";
            SymbolTable.messageRequiresContinuation=false;
          }
          code+=""String_Node_Str"";
        }
 else         if (SymbolTable.messageRequiresContinuation) {
          code+=""String_Node_Str"";
          SymbolTable.messageRequiresContinuation=false;
        }
        if (SymbolTable.continuesToPass && !SymbolTable.withinArguments) {
          code+=""String_Node_Str"";
        }
        if (currentValueIsToken) {
          code+=""String_Node_Str"" + target_code;
        }
        code+=""String_Node_Str"";
        if (joinDirector != null && !SymbolTable.messageContinues) {
          code+=""String_Node_Str"";
          code+=CIndent.getIndent() + ""String_Node_Str"" + joinDirector+ ""String_Node_Str""+ joinDirector+ ""String_Node_Str"";
        }
        currentType=((ActorType)currentType).getMessage(ms.message_name,ms.arguments,isParentMessageSend).getPassType();
        SymbolTable.setContinuationType(currentType);
      }
 catch (      VariableDeclarationException vde) {
        CompilerErrors.printErrorMessage(""String_Node_Str"" + vde.toString(),ms);
        throw new RuntimeException(vde);
      }
catch (      SalsaNotFoundException snfe) {
        CompilerErrors.printErrorMessage(""String_Node_Str"" + snfe.toString(),ms);
        throw new RuntimeException(snfe);
      }
      currentValueIsToken=true;
    }
    isParentMessageSend=false;
    position++;
  }
  return code;
}","public String toJavaCode(TypeSymbol currentType){
  String code=""String_Node_Str"";
  boolean isParentMessageSend=false;
  boolean currentValueIsToken=false;
  if (literal != null) {
    if (literal.value.equals(""String_Node_Str"")) {
      code+=""String_Node_Str"";
      if (modifications.size() == 0 || (modifications.size() > 0 && modifications.get(0) instanceof CMessageSend)) {
        if (SymbolTable.is_mobile_actor) {
          code+=""String_Node_Str"";
        }
      }
    }
 else     if (literal.value.equals(""String_Node_Str"")) {
      if (modifications.size() > 0 && modifications.get(0) instanceof CMessageSend) {
        code+=""String_Node_Str"";
        if (SymbolTable.is_mobile_actor) {
          code+=""String_Node_Str"";
        }
        isParentMessageSend=true;
      }
 else {
        code+=""String_Node_Str"";
      }
    }
 else     if (literal.value.equals(""String_Node_Str"")) {
      code+=""String_Node_Str"";
    }
 else {
      code+=literal.toJavaCode();
    }
  }
 else   if (variable_name != null) {
    code+=variable_name;
    try {
      currentValueIsToken=SymbolTable.isToken(variable_name.name);
    }
 catch (    SalsaNotFoundException snfe) {
      CompilerErrors.printErrorMessage(""String_Node_Str"",variable_name);
      currentValueIsToken=false;
    }
  }
 else   if (expression != null) {
    code+=""String_Node_Str"" + expression.toJavaCode() + ""String_Node_Str"";
    currentValueIsToken=expression.isToken();
  }
 else   if (allocation != null) {
    code+=allocation.toJavaCode();
    currentValueIsToken=allocation.isToken();
  }
  if (cast_type != null) {
    if (isToken()) {
      if (cast_type.is_token) {
        code=""String_Node_Str"" + code;
      }
 else {
        CompilerErrors.printErrorMessage(""String_Node_Str"",cast_type);
      }
    }
 else {
      if (cast_type.is_token) {
        CompilerErrors.printErrorMessage(""String_Node_Str"",cast_type);
      }
 else {
        code=""String_Node_Str"" + cast_type.name + ""String_Node_Str""+ code;
      }
    }
  }
  if (currentType == null)   currentType=getValueType();
  int position=0;
  for (  CModification modification : modifications) {
    if (modification instanceof CArrayAccess) {
      CArrayAccess aa=(CArrayAccess)modification;
      if (aa.expression.isToken()) {
        System.err.println(""String_Node_Str"");
        CompilerErrors.printErrorMessage(""String_Node_Str"",aa);
        currentType=null;
      }
 else {
        code+=""String_Node_Str"" + aa.expression.toJavaCode() + ""String_Node_Str"";
        if (currentType == null) {
          System.err.println(""String_Node_Str"");
          throw new RuntimeException();
        }
        currentType=((ArrayType)currentType).getSubtype();
      }
      if (aa.expression.isToken())       currentValueIsToken=true;
    }
 else     if (modification instanceof CFieldAccess) {
      CFieldAccess fa=(CFieldAccess)modification;
      if (currentType instanceof ObjectType) {
        code+=""String_Node_Str"" + fa.name;
        currentType=((ObjectType)currentType).getFieldType(fa.name);
      }
 else       if (currentType instanceof ActorType) {
        code+=""String_Node_Str"" + fa.name;
        currentType=((ActorType)currentType).getFieldType(fa.name);
      }
 else       if (currentType instanceof ArrayType) {
        code+=""String_Node_Str"" + fa.name;
        currentType=((ArrayType)currentType).getFieldType(fa.name);
      }
 else       if (currentType instanceof PrimitiveType) {
        CompilerErrors.printErrorMessage(""String_Node_Str"",fa);
        currentType=null;
      }
 else {
        CompilerErrors.printErrorMessage(""String_Node_Str"",fa);
        currentType=null;
      }
    }
 else     if (modification instanceof CMethodInvocation) {
      CMethodInvocation mi=(CMethodInvocation)modification;
      try {
        if (currentType instanceof ObjectType) {
          MethodSymbol ms=((ObjectType)currentType).getMethod(mi.method_name,mi.arguments);
          if (ms == null) {
            CompilerErrors.printErrorMessage(""String_Node_Str"",mi);
            currentType=null;
          }
          currentType=ms.getReturnType();
        }
 else         if (currentType instanceof ActorType) {
          if (modifications.getFirst().equals(modification) && (isSelf() || isParent() || SymbolTable.isReferenceMethod((CMethodInvocation)modification))) {
            currentType=((ActorType)currentType).getMessage(mi.method_name,mi.arguments,isParentMessageSend).getPassType();
          }
 else {
            CompilerErrors.printErrorMessage(""String_Node_Str"",mi);
            currentType=null;
          }
        }
 else         if (currentType instanceof ArrayType) {
          CompilerErrors.printErrorMessage(""String_Node_Str"",mi);
          currentType=null;
        }
 else         if (currentType instanceof PrimitiveType) {
          CompilerErrors.printErrorMessage(""String_Node_Str"",mi);
          currentType=null;
        }
 else {
          CompilerErrors.printErrorMessage(""String_Node_Str"",mi);
          currentType=null;
        }
        if (currentType != null) {
          code+=""String_Node_Str"" + mi.method_name + ""String_Node_Str"";
          for (          CExpression argument : mi.arguments) {
            if (!argument.isToken()) {
              code+=argument.toJavaCode();
              if (!argument.equals(mi.arguments.lastElement()))               code+=""String_Node_Str"";
            }
 else {
              CompilerErrors.printErrorMessage(""String_Node_Str"",argument);
            }
          }
          code+=""String_Node_Str"";
        }
      }
 catch (      VariableDeclarationException vde) {
        CompilerErrors.printErrorMessage(""String_Node_Str"" + vde.toString(),mi);
        throw new RuntimeException(vde);
      }
catch (      SalsaNotFoundException snfe) {
        CompilerErrors.printErrorMessage(""String_Node_Str"" + snfe.toString(),mi);
        throw new RuntimeException(snfe);
      }
    }
 else     if (modification instanceof CMessageSend) {
      CMessageSend ms=(CMessageSend)modification;
      try {
        String joinDirector=SymbolTable.getJoinDirector();
        if (ms.message_property != null && !ms.message_property.name.equals(""String_Node_Str"")) {
          CompilerErrors.printErrorMessage(""String_Node_Str"" + ms.message_property.name + ""String_Node_Str"",ms);
        }
        boolean moreMessages=false;
        for (int new_pos=position + 1; new_pos < modifications.size(); new_pos++) {
          if (modifications.get(new_pos) instanceof CMessageSend) {
            moreMessages=true;
            break;
          }
        }
        String pre_code=""String_Node_Str"";
        if (SymbolTable.continuesToPass && !SymbolTable.withinArguments) {
          pre_code+=""String_Node_Str"";
        }
 else         if (SymbolTable.withinArguments) {
          pre_code+=""String_Node_Str"";
        }
 else         if (SymbolTable.continuationTokenMessage) {
          pre_code+=""String_Node_Str"";
        }
 else         if (SymbolTable.isExpressionContinuation) {
          pre_code+=""String_Node_Str"";
        }
 else         if (SymbolTable.messageContinues || joinDirector != null) {
          if (moreMessages) {
            pre_code+=""String_Node_Str"";
          }
 else {
            if (SymbolTable.firstContinuation()) {
              pre_code+=""String_Node_Str"";
              SymbolTable.initializedFirstContinuation();
            }
            pre_code+=""String_Node_Str"";
          }
        }
 else         if (moreMessages) {
          pre_code+=""String_Node_Str"";
        }
 else {
          pre_code+=""String_Node_Str"";
        }
        String expression_director_code=""String_Node_Str"";
        pre_code+=""String_Node_Str"";
        String target_code=code;
        if (currentType.isInterface)         target_code=""String_Node_Str"" + target_code;
        if (currentValueIsToken) {
          code=pre_code + ""String_Node_Str"";
        }
 else {
          code=pre_code + target_code + ""String_Node_Str"";
        }
        if (!(currentType instanceof ActorType)) {
          CompilerErrors.printErrorMessage(""String_Node_Str"" + currentType.getLongSignature() + ""String_Node_Str"",ms);
          throw new RuntimeException();
        }
        ActorType at=(ActorType)currentType;
        MessageSymbol messageSymbol=null;
        try {
          messageSymbol=at.getMessage(ms.message_name,ms.arguments,isParentMessageSend);
        }
 catch (        VariableDeclarationException vde) {
          CompilerErrors.printErrorMessage(""String_Node_Str"" + ms.message_name + ""String_Node_Str""+ vde.toString(),ms);
          throw new RuntimeException(vde);
        }
catch (        SalsaNotFoundException snfe) {
          CompilerErrors.printErrorMessage(""String_Node_Str"" + ms.message_name + ""String_Node_Str"",ms);
          throw new RuntimeException(snfe);
        }
        code+=messageSymbol.getId();
        code+=""String_Node_Str"" + ms.message_name + ""String_Node_Str"";
        String argument_code=""String_Node_Str"";
        String argument_tokens=""String_Node_Str"";
        boolean hasContinuationToken=false;
        boolean hasToken=false;
        int j=0;
        for (        CExpression argument : ms.arguments) {
          if (argument.isToken()) {
            if (argument.requiresExpressionDirector()) {
              expression_director_code+=argument.getExpressionDirectorCode();
            }
            if (argument_tokens.length() > 10)             argument_tokens+=""String_Node_Str"";
            argument_tokens+=j;
            hasToken=true;
          }
 else           if (SymbolTable.isMutableObject(argument.getType())) {
            argument_code+=""String_Node_Str"" + argument.getType().getName() + ""String_Node_Str"";
          }
          SymbolTable.withinArguments=true;
          argument_code+=argument.toJavaCode();
          SymbolTable.withinArguments=false;
          if (!argument.isToken() && SymbolTable.isMutableObject(argument.getType()))           argument_code+=""String_Node_Str"";
          if (!argument.equals(ms.arguments.lastElement()))           argument_code+=""String_Node_Str"";
          j++;
        }
        code=expression_director_code + code;
        if (hasToken) {
          argument_code+=""String_Node_Str"" + argument_tokens + ""String_Node_Str"";
        }
 else {
          argument_code+=""String_Node_Str"";
        }
        if (ms.arguments.size() == 0)         argument_code=""String_Node_Str"";
        code+=argument_code;
        if (ms.message_property != null && ms.message_property.name.equals(""String_Node_Str"")) {
          code+=""String_Node_Str"";
          for (int i=0; i < ms.message_property.arguments.size(); i++) {
            CExpression arg=ms.message_property.arguments.get(i);
            if (!arg.isToken()) {
              CompilerErrors.printErrorMessage(""String_Node_Str"",arg);
              throw new RuntimeException();
            }
            code+=arg.toJavaCode();
            if (i != ms.message_property.arguments.size() - 1)             code+=""String_Node_Str"";
          }
          if (SymbolTable.messageRequiresContinuation) {
            code+=""String_Node_Str"";
            SymbolTable.messageRequiresContinuation=false;
          }
          code+=""String_Node_Str"";
        }
 else         if (SymbolTable.messageRequiresContinuation) {
          code+=""String_Node_Str"";
          SymbolTable.messageRequiresContinuation=false;
        }
        if (SymbolTable.continuesToPass && !SymbolTable.withinArguments) {
          code+=""String_Node_Str"";
        }
        if (currentValueIsToken) {
          code+=""String_Node_Str"" + target_code;
        }
        code+=""String_Node_Str"";
        if (joinDirector != null && !SymbolTable.messageContinues) {
          code+=""String_Node_Str"";
          code+=CIndent.getIndent() + ""String_Node_Str"" + joinDirector+ ""String_Node_Str""+ joinDirector+ ""String_Node_Str"";
        }
        currentType=((ActorType)currentType).getMessage(ms.message_name,ms.arguments,isParentMessageSend).getPassType();
        SymbolTable.setContinuationType(currentType);
      }
 catch (      VariableDeclarationException vde) {
        CompilerErrors.printErrorMessage(""String_Node_Str"" + vde.toString(),ms);
        throw new RuntimeException(vde);
      }
catch (      SalsaNotFoundException snfe) {
        CompilerErrors.printErrorMessage(""String_Node_Str"" + snfe.toString(),ms);
        throw new RuntimeException(snfe);
      }
      currentValueIsToken=true;
    }
    isParentMessageSend=false;
    position++;
  }
  return code;
}"
81603,"public static Invokable matchInvokable(Invokable targetArguments,ArrayList<? extends Invokable> invokables) throws SalsaNotFoundException, VariableDeclarationException {
  Invokable match=null;
  int matches=0;
  int[] match_distance=new int[invokables.size()];
  int min_distance=Integer.MAX_VALUE;
  int i=0;
  for (  Invokable current : invokables) {
    if (current.isOverloadedByParent) {
      match_distance[i]=-1;
      continue;
    }
    match_distance[i]=targetArguments.matches(current);
    if (match_distance[i] >= 0 && match_distance[i] < min_distance) {
      matches=1;
      min_distance=match_distance[i];
      match=current;
    }
 else     if (match_distance[i] >= 0 && match_distance[i] == min_distance) {
      matches++;
    }
    i++;
  }
  if (matches > 1) {
    int min_match=match_distance[1];
    int min_match_position=1;
    int min_matches=0;
    for (i=1; i < match_distance.length; i++) {
      if (min_match >= 0 && min_match < match_distance[i]) {
        min_match_position=i;
        min_match=match_distance[i];
        min_matches=0;
      }
 else       if (min_match >= 0 && min_match == match_distance[i]) {
        min_matches++;
      }
    }
    if (min_matches > 1) {
      i=0;
      System.err.println(""String_Node_Str"" + targetArguments.getLongSignature() + ""String_Node_Str"");
      for (      Invokable current : invokables) {
        if (match_distance[i] == min_match) {
          System.err.println(""String_Node_Str"" + match_distance[i] + ""String_Node_Str""+ current.getLongSignature());
        }
        i++;
      }
    }
 else {
      return match;
    }
  }
  if (match == null) {
    System.err.println(""String_Node_Str"" + targetArguments.getLongSignature() + ""String_Node_Str"");
    for (    TypeSymbol ts : targetArguments.parameterTypes) {
      System.err.println(""String_Node_Str"" + ts + ""String_Node_Str""+ ts.superType);
    }
    System.err.println(""String_Node_Str"");
    i=0;
    for (    Invokable current : invokables) {
      if (!current.getName().equals(targetArguments.getName()))       continue;
      if (targetArguments.parameterTypes.length != current.parameterTypes.length)       continue;
      System.err.println(""String_Node_Str"" + current.getLongSignature());
    }
    throw new SalsaNotFoundException(targetArguments.getEnclosingType().getModule(),targetArguments.getEnclosingType().getName(),""String_Node_Str"" + targetArguments.getLongSignature() + ""String_Node_Str"");
  }
  return match;
}","public static Invokable matchInvokable(Invokable targetArguments,ArrayList<? extends Invokable> invokables) throws SalsaNotFoundException, VariableDeclarationException {
  Invokable match=null;
  int matches=0;
  int[] match_distance=new int[invokables.size()];
  int min_distance=Integer.MAX_VALUE;
  int i=0;
  for (  Invokable current : invokables) {
    if (current.isOverloadedByParent) {
      match_distance[i]=-1;
      continue;
    }
    match_distance[i]=targetArguments.matches(current);
    if (match_distance[i] >= 0 && match_distance[i] < min_distance) {
      matches=1;
      min_distance=match_distance[i];
      match=current;
    }
 else     if (match_distance[i] >= 0 && match_distance[i] == min_distance) {
      matches++;
    }
    i++;
  }
  if (matches > 1) {
    int min_match=match_distance[1];
    int min_match_position=1;
    int min_matches=0;
    for (i=1; i < match_distance.length; i++) {
      if (min_match >= 0 && min_match < match_distance[i]) {
        min_match_position=i;
        min_match=match_distance[i];
        min_matches=0;
      }
 else       if (min_match >= 0 && min_match == match_distance[i]) {
        min_matches++;
      }
    }
    if (min_matches > 1) {
      i=0;
      System.err.println(""String_Node_Str"" + targetArguments.getLongSignature() + ""String_Node_Str"");
      for (      Invokable current : invokables) {
        if (match_distance[i] == min_match) {
          System.err.println(""String_Node_Str"" + match_distance[i] + ""String_Node_Str""+ current.getLongSignature());
        }
        i++;
      }
    }
 else {
      return match;
    }
  }
  if (match == null) {
    System.err.println(""String_Node_Str"" + targetArguments.getLongSignature() + ""String_Node_Str"");
    for (    TypeSymbol ts : targetArguments.parameterTypes) {
      System.err.println(""String_Node_Str"" + ts + ""String_Node_Str""+ ts.superType);
    }
    System.err.println(""String_Node_Str"");
    i=0;
    for (    Invokable current : invokables) {
      if (!current.getName().equals(targetArguments.getName()))       continue;
      if (targetArguments.parameterTypes.length != current.parameterTypes.length)       continue;
      System.err.println(""String_Node_Str"" + current.getLongSignature());
    }
    System.err.println(""String_Node_Str"");
    i=0;
    for (    Invokable current : invokables) {
      System.err.println(""String_Node_Str"" + current.getLongSignature());
    }
    throw new SalsaNotFoundException(targetArguments.getEnclosingType().getModule(),targetArguments.getEnclosingType().getName(),""String_Node_Str"" + targetArguments.getLongSignature() + ""String_Node_Str"");
  }
  return match;
}"
81604,"public String getStateCode(){
  String code=""String_Node_Str"";
  if (module_string != null) {
    code+=""String_Node_Str"" + module_string + ""String_Node_Str"";
    SymbolTable.setCurrentModule(module_string + ""String_Node_Str"");
  }
  code+=""String_Node_Str"";
  code+=""String_Node_Str"";
  if (System.getProperty(""String_Node_Str"") != null) {
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    if (module_string == null || !module_string.equals(""String_Node_Str"")) {
      code+=""String_Node_Str"";
      code+=""String_Node_Str"";
      code+=""String_Node_Str"";
      code+=""String_Node_Str"";
    }
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
  }
 else   if (System.getProperty(""String_Node_Str"") != null) {
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
  }
  code+=""String_Node_Str"";
  code+=""String_Node_Str"";
  if (java_statement != null)   code+=java_statement.toJavaCode() + ""String_Node_Str"";
  code+=getImportDeclarationCode() + ""String_Node_Str"";
  String actor_name=getName().name;
  try {
    SymbolTable.addVariableType(""String_Node_Str"",actor_name,false,false);
  }
 catch (  SalsaNotFoundException snfe) {
    CompilerErrors.printErrorMessage(""String_Node_Str"",behavior_declaration);
    throw new RuntimeException(snfe);
  }
  if (behavior_declaration != null) {
    if (behavior_declaration.is_abstract) {
      code+=""String_Node_Str"" + actor_name;
    }
 else {
      code+=""String_Node_Str"" + actor_name;
    }
  }
 else {
    code+=""String_Node_Str"" + actor_name;
  }
  if (getExtendsName() == null) {
    if (System.getProperty(""String_Node_Str"") != null || System.getProperty(""String_Node_Str"") != null) {
      actor_name+=""String_Node_Str"";
    }
  }
 else {
    String extendsName=getExtendsName().name;
    if (System.getProperty(""String_Node_Str"") != null || System.getProperty(""String_Node_Str"") != null) {
      actor_name+=""String_Node_Str"";
      extendsName+=""String_Node_Str"";
    }
    code+=""String_Node_Str"" + extendsName;
  }
  String implementsNames=null;
  if (behavior_declaration != null)   implementsNames=behavior_declaration.getImplementsNames();
 else   if (interface_declaration.extends_names.size() > 0)   implementsNames=interface_declaration.getImplementsNames();
  if (implementsNames != null)   code+=""String_Node_Str"" + implementsNames;
  code+=""String_Node_Str"";
  CIndent.increaseIndent();
  Vector<CMessageHandler> containedMessageHandlers=new Vector<CMessageHandler>();
  int i=0;
  if (getConstructors() != null) {
    for (    CConstructor constructor : getConstructors()) {
      constructor.addContainedMessageHandlers(containedMessageHandlers);
    }
  }
  i=0;
  for (  CMessageHandler message_handler : getMessageHandlers()) {
    message_handler.addContainedMessageHandlers(containedMessageHandlers);
  }
  TypeSymbol self_type=null;
  try {
    self_type=SymbolTable.getVariableType(""String_Node_Str"");
    if (!(self_type instanceof ActorType)) {
      System.err.println(""String_Node_Str"" + self_type.getLongSignature());
    }
  }
 catch (  SalsaNotFoundException snfe) {
    CompilerErrors.printErrorMessage(""String_Node_Str"",behavior_declaration);
    throw new RuntimeException(snfe);
  }
  ActorType at=(ActorType)self_type;
  int number_original_messages=getMessageHandlers().size();
  for (i=0; i < containedMessageHandlers.size(); i++) {
    MessageSymbol ms=new MessageSymbol(i + number_original_messages,self_type,containedMessageHandlers.get(i));
    at.message_handlers.add(ms);
  }
  code+=getFieldCode() + ""String_Node_Str"";
  code+=getEnumerationCode() + ""String_Node_Str"";
  if (behavior_declaration != null) {
    code+=getInvokeMessageCode() + ""String_Node_Str"";
    if (!behavior_declaration.is_abstract) {
      code+=getInvokeConstructorCode() + ""String_Node_Str"";
    }
  }
  if (behavior_declaration != null && !behavior_declaration.is_abstract) {
    code+=getConstructorCode() + ""String_Node_Str"";
  }
  code+=getMessageCode() + ""String_Node_Str"";
  if (actor_name.contains(""String_Node_Str""))   actor_name=actor_name.substring(0,actor_name.indexOf('<'));
  if (System.getProperty(""String_Node_Str"") != null) {
    code+=CIndent.getIndent() + ""String_Node_Str"" + actor_name+ ""String_Node_Str"";
    code+=CIndent.getIndent() + ""String_Node_Str"" + actor_name+ ""String_Node_Str"";
  }
  if (behavior_declaration != null && !behavior_declaration.is_abstract) {
    if (System.getProperty(""String_Node_Str"") != null) {
      code+=CIndent.getIndent() + ""String_Node_Str"" + actor_name+ ""String_Node_Str"";
    }
    if (System.getProperty(""String_Node_Str"") != null || System.getProperty(""String_Node_Str"") != null) {
      if (behavior_declaration != null) {
        int act_constructor=behavior_declaration.getActConstructor();
        if (act_constructor >= 0) {
          code+=CIndent.getIndent() + ""String_Node_Str"";
          if (System.getProperty(""String_Node_Str"") != null) {
            code+=CIndent.getIndent() + ""String_Node_Str"" + act_constructor+ ""String_Node_Str"";
          }
 else {
            code+=CIndent.getIndent() + ""String_Node_Str"" + actor_name+ ""String_Node_Str""+ act_constructor+ ""String_Node_Str"";
          }
          code+=CIndent.getIndent() + ""String_Node_Str"";
        }
      }
      code+=CIndent.getIndent() + ""String_Node_Str"";
      code+=CIndent.getIndent() + ""String_Node_Str"" + actor_name+ ""String_Node_Str""+ actor_name+ ""String_Node_Str"";
      code+=CIndent.getIndent() + ""String_Node_Str"";
      code+=CIndent.getIndent() + ""String_Node_Str"";
      code+=CIndent.getIndent() + ""String_Node_Str"";
      code+=CIndent.getIndent() + ""String_Node_Str"";
      code+=CIndent.getIndent() + ""String_Node_Str"";
      code+=CIndent.getIndent() + ""String_Node_Str"" + actor_name+ ""String_Node_Str"";
      code+=CIndent.getIndent() + ""String_Node_Str"" + actor_name+ ""String_Node_Str""+ actor_name+ ""String_Node_Str"";
      code+=CIndent.getIndent() + ""String_Node_Str"";
      code+=CIndent.getIndent() + ""String_Node_Str"";
      code+=CIndent.getIndent() + ""String_Node_Str"";
      if (System.getProperty(""String_Node_Str"") != null) {
        code+=CIndent.getIndent() + ""String_Node_Str"";
        code+=CIndent.getIndent() + ""String_Node_Str"" + actor_name+ ""String_Node_Str""+ actor_name+ ""String_Node_Str"";
        code+=CIndent.getIndent() + ""String_Node_Str"";
        code+=CIndent.getIndent() + ""String_Node_Str"";
        code+=CIndent.getIndent() + ""String_Node_Str"";
        code+=CIndent.getIndent() + ""String_Node_Str"";
        code+=CIndent.getIndent() + ""String_Node_Str"";
        code+=CIndent.getIndent() + ""String_Node_Str"" + actor_name+ ""String_Node_Str"";
        code+=CIndent.getIndent() + ""String_Node_Str"" + actor_name+ ""String_Node_Str""+ actor_name+ ""String_Node_Str"";
        code+=CIndent.getIndent() + ""String_Node_Str"";
        code+=CIndent.getIndent() + ""String_Node_Str"";
        code+=CIndent.getIndent() + ""String_Node_Str"";
      }
    }
  }
  CIndent.decreaseIndent();
  code+=CIndent.getIndent() + ""String_Node_Str"";
  return code;
}","public String getStateCode(){
  String code=""String_Node_Str"";
  if (module_string != null) {
    code+=""String_Node_Str"" + module_string + ""String_Node_Str"";
    SymbolTable.setCurrentModule(module_string + ""String_Node_Str"");
  }
  code+=""String_Node_Str"";
  code+=""String_Node_Str"";
  if (System.getProperty(""String_Node_Str"") != null) {
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    if (module_string == null || !module_string.equals(""String_Node_Str"")) {
      code+=""String_Node_Str"";
      code+=""String_Node_Str"";
      code+=""String_Node_Str"";
      code+=""String_Node_Str"";
      code+=""String_Node_Str"";
    }
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
  }
 else   if (System.getProperty(""String_Node_Str"") != null) {
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
    code+=""String_Node_Str"";
  }
  code+=""String_Node_Str"";
  code+=""String_Node_Str"";
  if (java_statement != null)   code+=java_statement.toJavaCode() + ""String_Node_Str"";
  code+=getImportDeclarationCode() + ""String_Node_Str"";
  String actor_name=getName().name;
  try {
    SymbolTable.addVariableType(""String_Node_Str"",actor_name,false,false);
  }
 catch (  SalsaNotFoundException snfe) {
    CompilerErrors.printErrorMessage(""String_Node_Str"",behavior_declaration);
    throw new RuntimeException(snfe);
  }
  if (behavior_declaration != null) {
    if (behavior_declaration.is_abstract) {
      code+=""String_Node_Str"" + actor_name;
    }
 else {
      code+=""String_Node_Str"" + actor_name;
    }
  }
 else {
    code+=""String_Node_Str"" + actor_name;
  }
  if (getExtendsName() == null) {
    if (System.getProperty(""String_Node_Str"") != null || System.getProperty(""String_Node_Str"") != null) {
      actor_name+=""String_Node_Str"";
    }
  }
 else {
    String extendsName=getExtendsName().name;
    if (System.getProperty(""String_Node_Str"") != null || System.getProperty(""String_Node_Str"") != null) {
      actor_name+=""String_Node_Str"";
      extendsName+=""String_Node_Str"";
    }
    code+=""String_Node_Str"" + extendsName;
  }
  String implementsNames=null;
  if (behavior_declaration != null)   implementsNames=behavior_declaration.getImplementsNames();
 else   if (interface_declaration.extends_names.size() > 0)   implementsNames=interface_declaration.getImplementsNames();
  if (implementsNames != null)   code+=""String_Node_Str"" + implementsNames;
  code+=""String_Node_Str"";
  CIndent.increaseIndent();
  Vector<CMessageHandler> containedMessageHandlers=new Vector<CMessageHandler>();
  int i=0;
  if (getConstructors() != null) {
    for (    CConstructor constructor : getConstructors()) {
      constructor.addContainedMessageHandlers(containedMessageHandlers);
    }
  }
  i=0;
  for (  CMessageHandler message_handler : getMessageHandlers()) {
    message_handler.addContainedMessageHandlers(containedMessageHandlers);
  }
  TypeSymbol self_type=null;
  try {
    self_type=SymbolTable.getVariableType(""String_Node_Str"");
    if (!(self_type instanceof ActorType)) {
      System.err.println(""String_Node_Str"" + self_type.getLongSignature());
    }
  }
 catch (  SalsaNotFoundException snfe) {
    CompilerErrors.printErrorMessage(""String_Node_Str"",behavior_declaration);
    throw new RuntimeException(snfe);
  }
  ActorType at=(ActorType)self_type;
  int number_original_messages=getMessageHandlers().size();
  for (i=0; i < containedMessageHandlers.size(); i++) {
    MessageSymbol ms=new MessageSymbol(i + number_original_messages,self_type,containedMessageHandlers.get(i));
    at.message_handlers.add(ms);
  }
  code+=getFieldCode() + ""String_Node_Str"";
  code+=getEnumerationCode() + ""String_Node_Str"";
  if (behavior_declaration != null) {
    code+=getInvokeMessageCode() + ""String_Node_Str"";
    if (!behavior_declaration.is_abstract) {
      code+=getInvokeConstructorCode() + ""String_Node_Str"";
    }
  }
  if (behavior_declaration != null && !behavior_declaration.is_abstract) {
    code+=getConstructorCode() + ""String_Node_Str"";
  }
  code+=getMessageCode() + ""String_Node_Str"";
  if (actor_name.contains(""String_Node_Str""))   actor_name=actor_name.substring(0,actor_name.indexOf('<'));
  if (System.getProperty(""String_Node_Str"") != null) {
    code+=CIndent.getIndent() + ""String_Node_Str"" + actor_name+ ""String_Node_Str"";
    code+=CIndent.getIndent() + ""String_Node_Str"" + actor_name+ ""String_Node_Str"";
  }
  if (behavior_declaration != null && !behavior_declaration.is_abstract) {
    if (System.getProperty(""String_Node_Str"") != null) {
      code+=CIndent.getIndent() + ""String_Node_Str"" + actor_name+ ""String_Node_Str"";
    }
    if (System.getProperty(""String_Node_Str"") != null || System.getProperty(""String_Node_Str"") != null) {
      if (behavior_declaration != null) {
        int act_constructor=behavior_declaration.getActConstructor();
        if (act_constructor >= 0) {
          code+=CIndent.getIndent() + ""String_Node_Str"";
          if (System.getProperty(""String_Node_Str"") != null) {
            code+=CIndent.getIndent() + ""String_Node_Str"" + act_constructor+ ""String_Node_Str"";
          }
 else {
            code+=CIndent.getIndent() + ""String_Node_Str"" + actor_name+ ""String_Node_Str""+ act_constructor+ ""String_Node_Str"";
          }
          code+=CIndent.getIndent() + ""String_Node_Str"";
        }
      }
      code+=CIndent.getIndent() + ""String_Node_Str"";
      code+=CIndent.getIndent() + ""String_Node_Str"" + actor_name+ ""String_Node_Str""+ actor_name+ ""String_Node_Str"";
      code+=CIndent.getIndent() + ""String_Node_Str"";
      code+=CIndent.getIndent() + ""String_Node_Str"";
      code+=CIndent.getIndent() + ""String_Node_Str"";
      code+=CIndent.getIndent() + ""String_Node_Str"";
      code+=CIndent.getIndent() + ""String_Node_Str"";
      code+=CIndent.getIndent() + ""String_Node_Str"" + actor_name+ ""String_Node_Str"";
      code+=CIndent.getIndent() + ""String_Node_Str"" + actor_name+ ""String_Node_Str""+ actor_name+ ""String_Node_Str"";
      code+=CIndent.getIndent() + ""String_Node_Str"";
      code+=CIndent.getIndent() + ""String_Node_Str"";
      code+=CIndent.getIndent() + ""String_Node_Str"";
      if (System.getProperty(""String_Node_Str"") != null) {
        code+=CIndent.getIndent() + ""String_Node_Str"";
        code+=CIndent.getIndent() + ""String_Node_Str"" + actor_name+ ""String_Node_Str""+ actor_name+ ""String_Node_Str"";
        code+=CIndent.getIndent() + ""String_Node_Str"";
        code+=CIndent.getIndent() + ""String_Node_Str"";
        code+=CIndent.getIndent() + ""String_Node_Str"";
        code+=CIndent.getIndent() + ""String_Node_Str"";
        code+=CIndent.getIndent() + ""String_Node_Str"";
        code+=CIndent.getIndent() + ""String_Node_Str"" + actor_name+ ""String_Node_Str"";
        code+=CIndent.getIndent() + ""String_Node_Str"" + actor_name+ ""String_Node_Str""+ actor_name+ ""String_Node_Str"";
        code+=CIndent.getIndent() + ""String_Node_Str"";
        code+=CIndent.getIndent() + ""String_Node_Str"";
        code+=CIndent.getIndent() + ""String_Node_Str"";
      }
    }
  }
  CIndent.decreaseIndent();
  code+=CIndent.getIndent() + ""String_Node_Str"";
  return code;
}"
81605,"public void load(CCompilationUnit cu,String oldModule) throws SalsaNotFoundException {
  int i;
  if (cu.getExtendsName() != null) {
    this.superType=SymbolTable.getTypeSymbol(cu.getExtendsName().name);
    if (this.superType.isInterface)     this.isInterface=true;
  }
 else {
    this.superType=SymbolTable.getTypeSymbol(""String_Node_Str"");
    this.isInterface=true;
  }
  for (  CName implementsName : cu.getImplementsNames()) {
    this.implementsTypes.add(SymbolTable.getTypeSymbol(implementsName.name));
  }
  if (declaredGenericTypes.size() == 0) {
    for (    CGenericType gt : cu.getName().generic_types) {
      declaredGenericTypes.add(gt.toString());
      addGenericType(gt.toString(),""String_Node_Str"");
      TypeSymbol ts=SymbolTable.getTypeSymbol(gt.toString());
    }
  }
  if (cu.behavior_declaration != null && cu.behavior_declaration.implements_names != null) {
    for (    CName implementsName : cu.behavior_declaration.implements_names) {
      implementsTypes.add(SymbolTable.getTypeSymbol(implementsName.name));
    }
  }
  for (  CGenericType generic_type : cu.getName().generic_types) {
    ObjectType ot;
    if (generic_type.bound != null) {
      if (generic_type.name.name.equals(""String_Node_Str"")) {
        CompilerErrors.printErrorMessage(""String_Node_Str"",generic_type);
      }
      if (generic_type.modifier.equals(""String_Node_Str"")) {
        ot=new ObjectType(SymbolTable.getCurrentModule() + generic_type.name.name,SymbolTable.getTypeSymbol(generic_type.bound.name));
      }
 else {
        CompilerErrors.printErrorMessage(""String_Node_Str"",generic_type);
        ot=null;
      }
    }
 else {
      if (generic_type.name.name.equals(""String_Node_Str"")) {
        CompilerErrors.printErrorMessage(""String_Node_Str"",generic_type);
        ot=new ObjectType(SymbolTable.getCurrentModule() + generic_type.name.name);
      }
 else {
        ot=new ObjectType(SymbolTable.getCurrentModule() + generic_type.name.name,SymbolTable.getTypeSymbol(""String_Node_Str""));
      }
    }
    SymbolTable.knownTypes.put(ot.getLongSignature(),ot);
    SymbolTable.namespace.put(ot.getName(),ot.getLongSignature());
  }
  ArrayList<MessageSymbol> superclassMessageHandlers=null;
  if (getSuperType() instanceof ActorType) {
    ActorType superType=(ActorType)getSuperType();
    superclassMessageHandlers=new ArrayList<MessageSymbol>();
    for (    MessageSymbol ms : superType.message_handlers)     superclassMessageHandlers.add(ms.copy());
    for (    MessageSymbol ms : superType.overloaded_message_handlers) {
      MessageSymbol copy=ms.copy();
      copy.isOverloadedByParent=true;
      superclassMessageHandlers.add(copy);
    }
  }
 else {
    superclassMessageHandlers=new ArrayList<MessageSymbol>();
  }
  Vector<CConstructor> cv=cu.getConstructors();
  if (cv != null) {
    for (i=0; i < cv.size(); i++) {
      ConstructorSymbol cs=new ConstructorSymbol(i,this,cv.get(i));
      constructors.add(cs);
    }
    if (cv.size() == 0) {
      ConstructorSymbol cs=new ConstructorSymbol(0,this,new TypeSymbol[]{});
      constructors.add(cs);
    }
 else     if (cv.size() == 1 && cv.get(0).getArgumentTypes().length == 1 && cv.get(0).getArgumentTypes()[0].equals(""String_Node_Str"")) {
      ConstructorSymbol cs=new ConstructorSymbol(0,this,new TypeSymbol[]{});
      constructors.add(cs);
    }
  }
  ArrayList<MessageSymbol> childMessageHandlers=new ArrayList<MessageSymbol>();
  Vector<CMessageHandler> mv=cu.getMessageHandlers();
  for (i=0; i < mv.size(); i++) {
    MessageSymbol ms=new MessageSymbol(i,this,mv.get(i));
    childMessageHandlers.add(ms);
  }
  for (i=0; i < superclassMessageHandlers.size(); i++) {
    MessageSymbol sms=superclassMessageHandlers.get(i);
    MessageSymbol overloadedMessageHandler=null;
    for (    MessageSymbol cms : childMessageHandlers) {
      if (sms.matches(cms) == 0) {
        if (overloadedMessageHandler != null) {
          System.err.println(""String_Node_Str"");
          throw new RuntimeException();
        }
 else {
          overloadedMessageHandler=cms;
        }
      }
    }
    if (overloadedMessageHandler == null) {
      message_handlers.add(sms);
    }
 else {
      message_handlers.add(overloadedMessageHandler);
      childMessageHandlers.remove(overloadedMessageHandler);
      if (!sms.is_abstract) {
        overloaded_message_handlers.add(sms.copy());
      }
    }
  }
  for (  MessageSymbol ms : childMessageHandlers)   message_handlers.add(ms);
  int current=0;
  for (  MessageSymbol ms : message_handlers)   ms.id=current++;
  for (  MessageSymbol ms : overloaded_message_handlers)   ms.id=current++;
  Vector<CLocalVariableDeclaration> fv=cu.getFields();
  for (i=0; i < fv.size(); i++) {
    Vector<CVariableInit> vv=fv.get(i).variables;
    for (int j=0; j < vv.size(); j++) {
      FieldSymbol fs=new FieldSymbol(this,fv.get(i),vv.get(j));
      fields.add(fs);
    }
  }
  SymbolTable.setCurrentModule(oldModule);
}","public void load(CCompilationUnit cu,String oldModule) throws SalsaNotFoundException {
  int i;
  if (cu.getExtendsName() != null) {
    this.superType=SymbolTable.getTypeSymbol(cu.getExtendsName().name);
    if (this.superType.isInterface)     this.isInterface=true;
  }
 else {
    this.superType=SymbolTable.getTypeSymbol(""String_Node_Str"");
    this.isInterface=true;
  }
  for (  CName implementsName : cu.getImplementsNames()) {
    this.implementsTypes.add(SymbolTable.getTypeSymbol(implementsName.name));
  }
  if (declaredGenericTypes.size() == 0) {
    for (    CGenericType gt : cu.getName().generic_types) {
      declaredGenericTypes.add(gt.toString());
      addGenericType(gt.toString(),""String_Node_Str"");
      TypeSymbol ts=SymbolTable.getTypeSymbol(gt.toString());
    }
  }
  if (cu.behavior_declaration != null && cu.behavior_declaration.implements_names != null) {
    for (    CName implementsName : cu.behavior_declaration.implements_names) {
      implementsTypes.add(SymbolTable.getTypeSymbol(implementsName.name));
    }
  }
  for (  CGenericType generic_type : cu.getName().generic_types) {
    ObjectType ot;
    if (generic_type.bound != null) {
      if (generic_type.name.name.equals(""String_Node_Str"")) {
        CompilerErrors.printErrorMessage(""String_Node_Str"",generic_type);
      }
      if (generic_type.modifier.equals(""String_Node_Str"")) {
        ot=new ObjectType(SymbolTable.getCurrentModule() + generic_type.name.name,SymbolTable.getTypeSymbol(generic_type.bound.name));
      }
 else {
        CompilerErrors.printErrorMessage(""String_Node_Str"",generic_type);
        ot=null;
      }
    }
 else {
      if (generic_type.name.name.equals(""String_Node_Str"")) {
        CompilerErrors.printErrorMessage(""String_Node_Str"",generic_type);
        ot=new ObjectType(SymbolTable.getCurrentModule() + generic_type.name.name);
      }
 else {
        ot=new ObjectType(SymbolTable.getCurrentModule() + generic_type.name.name,SymbolTable.getTypeSymbol(""String_Node_Str""));
      }
    }
    SymbolTable.knownTypes.put(ot.getLongSignature(),ot);
    SymbolTable.namespace.put(ot.getName(),ot.getLongSignature());
  }
  ArrayList<MessageSymbol> superclassMessageHandlers=null;
  if (getSuperType() instanceof ActorType) {
    ActorType superType=(ActorType)getSuperType();
    superclassMessageHandlers=new ArrayList<MessageSymbol>();
    for (    MessageSymbol ms : superType.message_handlers)     superclassMessageHandlers.add(ms.copy());
    for (    MessageSymbol ms : superType.overloaded_message_handlers) {
      MessageSymbol copy=ms.copy();
      copy.isOverloadedByParent=true;
      superclassMessageHandlers.add(copy);
    }
  }
 else {
    superclassMessageHandlers=new ArrayList<MessageSymbol>();
  }
  Vector<CConstructor> cv=cu.getConstructors();
  if (cv != null) {
    for (i=0; i < cv.size(); i++) {
      ConstructorSymbol cs=new ConstructorSymbol(i,this,cv.get(i));
      constructors.add(cs);
    }
    if (cv.size() == 0) {
    }
 else     if (cv.size() == 1 && cv.get(0).getArgumentTypes().length == 1 && cv.get(0).getArgumentTypes()[0].equals(""String_Node_Str"")) {
    }
  }
  ArrayList<MessageSymbol> childMessageHandlers=new ArrayList<MessageSymbol>();
  Vector<CMessageHandler> mv=cu.getMessageHandlers();
  for (i=0; i < mv.size(); i++) {
    MessageSymbol ms=new MessageSymbol(i,this,mv.get(i));
    childMessageHandlers.add(ms);
  }
  for (i=0; i < superclassMessageHandlers.size(); i++) {
    MessageSymbol sms=superclassMessageHandlers.get(i);
    MessageSymbol overloadedMessageHandler=null;
    for (    MessageSymbol cms : childMessageHandlers) {
      if (sms.matches(cms) == 0) {
        if (overloadedMessageHandler != null) {
          System.err.println(""String_Node_Str"");
          throw new RuntimeException();
        }
 else {
          overloadedMessageHandler=cms;
        }
      }
    }
    if (overloadedMessageHandler == null) {
      message_handlers.add(sms);
    }
 else {
      message_handlers.add(overloadedMessageHandler);
      childMessageHandlers.remove(overloadedMessageHandler);
      if (!sms.is_abstract) {
        overloaded_message_handlers.add(sms.copy());
      }
    }
  }
  for (  MessageSymbol ms : childMessageHandlers)   message_handlers.add(ms);
  int current=0;
  for (  MessageSymbol ms : message_handlers)   ms.id=current++;
  for (  MessageSymbol ms : overloaded_message_handlers)   ms.id=current++;
  Vector<CLocalVariableDeclaration> fv=cu.getFields();
  for (i=0; i < fv.size(); i++) {
    Vector<CVariableInit> vv=fv.get(i).variables;
    for (int j=0; j < vv.size(); j++) {
      FieldSymbol fs=new FieldSymbol(this,fv.get(i),vv.get(j));
      fields.add(fs);
    }
  }
  SymbolTable.setCurrentModule(oldModule);
}"
81606,"public String toJavaCode(){
  if (implicit_token_code != null) {
    return implicit_token_code;
  }
  String code=""String_Node_Str"";
  for (int i=0; i < prefixes.size(); i++)   code+=prefixes.get(i);
  code+=value.toJavaCode();
  for (int i=0; i < suffixes.size(); i++) {
    code+=suffixes.get(i);
  }
  if (operator != null) {
    code+=""String_Node_Str"" + operator + ""String_Node_Str"";
    boolean isExpressionContinuation=SymbolTable.isExpressionContinuation;
    if (operator.equals(""String_Node_Str""))     SymbolTable.isExpressionContinuation=true;
    code+=operator_expression.toJavaCode();
    if (operator.equals(""String_Node_Str""))     SymbolTable.isExpressionContinuation=isExpressionContinuation;
  }
  return code;
}","public String toJavaCode(){
  if (implicit_token_code != null) {
    return implicit_token_code;
  }
  String code=""String_Node_Str"";
  for (int i=0; i < prefixes.size(); i++)   code+=prefixes.get(i);
  code+=value.toJavaCode();
  for (int i=0; i < suffixes.size(); i++) {
    code+=suffixes.get(i);
  }
  if (operator != null) {
    code+=""String_Node_Str"" + operator + ""String_Node_Str"";
    boolean isExpressionContinuation=SymbolTable.isExpressionContinuation;
    boolean continuationTokenMessage=SymbolTable.continuationTokenMessage;
    if (value.getType().getLongSignature().equals(""String_Node_Str"")) {
      SymbolTable.continuationTokenMessage=true;
    }
    if (operator.equals(""String_Node_Str""))     SymbolTable.isExpressionContinuation=true;
    code+=operator_expression.toJavaCode();
    SymbolTable.continuationTokenMessage=continuationTokenMessage;
    if (operator.equals(""String_Node_Str""))     SymbolTable.isExpressionContinuation=isExpressionContinuation;
  }
  return code;
}"
81607,"public String toJavaCode(){
  SymbolTable.messageContinues=continues;
  String code=""String_Node_Str"";
  if (is_token) {
    for (int i=0; i < variables.size(); i++) {
      code+=""String_Node_Str"";
      code+=variables.get(i).toJavaCodeAsToken(type.name,is_token);
      try {
        SymbolTable.addVariableType(variables.get(i).name,type.name,true,false);
      }
 catch (      SalsaNotFoundException snfe) {
        CompilerErrors.printErrorMessage(""String_Node_Str"" + snfe.toString(),variables.get(i));
        throw new RuntimeException(snfe);
      }
      code+=""String_Node_Str"";
      if (i < variables.size() - 1)       code+=""String_Node_Str"" + CIndent.getIndent();
    }
  }
 else {
    for (int i=0; i < variables.size(); i++) {
      code+=type.name + ""String_Node_Str"";
      code+=variables.get(i).toJavaCode(type.name,is_token);
      try {
        SymbolTable.addVariableType(variables.get(i).name,type.name,false,false);
      }
 catch (      SalsaNotFoundException snfe) {
        CompilerErrors.printErrorMessage(""String_Node_Str"" + snfe.toString(),variables.get(i));
        throw new RuntimeException(snfe);
      }
      code+=""String_Node_Str"";
      if (i < variables.size() - 1)       code+=""String_Node_Str"" + CIndent.getIndent();
    }
  }
  SymbolTable.messageRequiresContinuation=continues;
  return code;
}","public String toJavaCode(){
  SymbolTable.messageContinues=continues;
  String code=""String_Node_Str"";
  if (is_token) {
    for (int i=0; i < variables.size(); i++) {
      if (type.name.equals(""String_Node_Str"")) {
        code+=""String_Node_Str"";
      }
 else {
        code+=""String_Node_Str"";
      }
      code+=variables.get(i).toJavaCodeAsToken(type.name,is_token);
      try {
        SymbolTable.addVariableType(variables.get(i).name,type.name,true,false);
      }
 catch (      SalsaNotFoundException snfe) {
        CompilerErrors.printErrorMessage(""String_Node_Str"" + snfe.toString(),variables.get(i));
        throw new RuntimeException(snfe);
      }
      code+=""String_Node_Str"";
      if (i < variables.size() - 1)       code+=""String_Node_Str"" + CIndent.getIndent();
    }
  }
 else {
    for (int i=0; i < variables.size(); i++) {
      code+=type.name + ""String_Node_Str"";
      code+=variables.get(i).toJavaCode(type.name,is_token);
      try {
        SymbolTable.addVariableType(variables.get(i).name,type.name,false,false);
      }
 catch (      SalsaNotFoundException snfe) {
        CompilerErrors.printErrorMessage(""String_Node_Str"" + snfe.toString(),variables.get(i));
        throw new RuntimeException(snfe);
      }
      code+=""String_Node_Str"";
      if (i < variables.size() - 1)       code+=""String_Node_Str"" + CIndent.getIndent();
    }
  }
  SymbolTable.messageRequiresContinuation=continues;
  return code;
}"
81608,"public String toJavaCode(TypeSymbol currentType){
  String code=""String_Node_Str"";
  boolean isParentMessageSend=false;
  if (literal != null) {
    if (literal.value.equals(""String_Node_Str"")) {
      code+=""String_Node_Str"";
    }
 else     if (literal.value.equals(""String_Node_Str"")) {
      if (modifications.size() > 0 && modifications.get(0) instanceof CMessageSend) {
        code+=""String_Node_Str"";
        isParentMessageSend=true;
      }
 else {
        code+=""String_Node_Str"";
      }
    }
 else     if (literal.value.equals(""String_Node_Str"")) {
      code+=""String_Node_Str"";
    }
 else {
      code+=literal.toJavaCode();
    }
  }
 else   if (variable_name != null) {
    code+=variable_name;
  }
 else   if (expression != null) {
    code+=""String_Node_Str"" + expression.toJavaCode() + ""String_Node_Str"";
  }
 else   if (allocation != null) {
    code+=allocation.toJavaCode();
  }
  if (cast_type != null) {
    code=""String_Node_Str"" + cast_type.name + ""String_Node_Str""+ code;
  }
  if (currentType == null)   currentType=getValueType();
  for (  CModification modification : modifications) {
    if (modification instanceof CArrayAccess) {
      CArrayAccess aa=(CArrayAccess)modification;
      if (aa.expression.isToken()) {
        System.err.println(""String_Node_Str"");
        CompilerErrors.printErrorMessage(""String_Node_Str"",aa);
        currentType=null;
      }
 else {
        code+=""String_Node_Str"" + aa.expression.toJavaCode() + ""String_Node_Str"";
        if (currentType == null) {
          System.err.println(""String_Node_Str"");
          throw new RuntimeException();
        }
        currentType=((ArrayType)currentType).getSubtype();
      }
    }
 else     if (modification instanceof CFieldAccess) {
      CFieldAccess fa=(CFieldAccess)modification;
      if (currentType instanceof ObjectType) {
        code+=""String_Node_Str"" + fa.name;
        currentType=((ObjectType)currentType).getFieldType(fa.name);
      }
 else       if (currentType instanceof ActorType) {
        code+=""String_Node_Str"" + fa.name;
        currentType=((ActorType)currentType).getFieldType(fa.name);
      }
 else       if (currentType instanceof ArrayType) {
        code+=""String_Node_Str"" + fa.name;
        currentType=((ArrayType)currentType).getFieldType(fa.name);
      }
 else       if (currentType instanceof PrimitiveType) {
        CompilerErrors.printErrorMessage(""String_Node_Str"",fa);
        currentType=null;
      }
 else {
        CompilerErrors.printErrorMessage(""String_Node_Str"",fa);
        currentType=null;
      }
    }
 else     if (modification instanceof CMethodInvocation) {
      CMethodInvocation mi=(CMethodInvocation)modification;
      try {
        if (currentType instanceof ObjectType) {
          MethodSymbol ms=((ObjectType)currentType).getMethod(mi.method_name,mi.arguments);
          if (ms == null) {
            CompilerErrors.printErrorMessage(""String_Node_Str"",mi);
            currentType=null;
          }
          currentType=ms.getReturnType();
        }
 else         if (currentType instanceof ActorType) {
          if (modifications.getFirst().equals(modification) && (isSelf() || isParent())) {
            currentType=((ActorType)currentType).getMessage(mi.method_name,mi.arguments,isParentMessageSend).getPassType();
          }
 else {
            CompilerErrors.printErrorMessage(""String_Node_Str"",mi);
            currentType=null;
          }
        }
 else         if (currentType instanceof ArrayType) {
          CompilerErrors.printErrorMessage(""String_Node_Str"",mi);
          currentType=null;
        }
 else         if (currentType instanceof PrimitiveType) {
          CompilerErrors.printErrorMessage(""String_Node_Str"",mi);
          currentType=null;
        }
 else {
          CompilerErrors.printErrorMessage(""String_Node_Str"",mi);
          currentType=null;
        }
        if (currentType != null) {
          code+=""String_Node_Str"" + mi.method_name + ""String_Node_Str"";
          for (          CExpression argument : mi.arguments) {
            if (!argument.isToken()) {
              code+=argument.toJavaCode();
              if (!argument.equals(mi.arguments.lastElement()))               code+=""String_Node_Str"";
            }
 else {
              CompilerErrors.printErrorMessage(""String_Node_Str"",argument);
            }
          }
          code+=""String_Node_Str"";
        }
      }
 catch (      SalsaNotFoundException snfe) {
        CompilerErrors.printErrorMessage(""String_Node_Str"" + snfe.toString(),mi);
        throw new RuntimeException(snfe);
      }
    }
 else     if (modification instanceof CMessageSend) {
      CMessageSend ms=(CMessageSend)modification;
      try {
        String joinDirector=SymbolTable.getJoinDirector();
        if (ms.message_property != null && !ms.message_property.name.equals(""String_Node_Str"")) {
          CompilerErrors.printErrorMessage(""String_Node_Str"" + ms.message_property.name + ""String_Node_Str"",ms);
        }
        String pre_code=""String_Node_Str"";
        if (SymbolTable.continuesToPass && !SymbolTable.withinArguments) {
          pre_code+=""String_Node_Str"";
        }
 else         if (SymbolTable.withinArguments) {
          pre_code+=""String_Node_Str"";
          pre_code+=""String_Node_Str"";
          pre_code+=""String_Node_Str"";
        }
 else         if (SymbolTable.isExpressionContinuation) {
          pre_code+=""String_Node_Str"";
        }
 else         if (SymbolTable.messageContinues || joinDirector != null) {
          if (SymbolTable.firstContinuation()) {
            pre_code+=""String_Node_Str"";
            SymbolTable.initializedFirstContinuation();
          }
          pre_code+=""String_Node_Str"";
        }
 else {
          pre_code+=""String_Node_Str"";
        }
        String expression_director_code=""String_Node_Str"";
        pre_code+=""String_Node_Str"";
        if (currentType.isInterface)         code=""String_Node_Str"" + code;
        code=pre_code + code + ""String_Node_Str"";
        if (!(currentType instanceof ActorType)) {
          CompilerErrors.printErrorMessage(""String_Node_Str"" + currentType.getLongSignature() + ""String_Node_Str"",ms);
          throw new RuntimeException();
        }
        ActorType at=(ActorType)currentType;
        MessageSymbol messageSymbol=null;
        try {
          messageSymbol=at.getMessage(ms.message_name,ms.arguments,isParentMessageSend);
        }
 catch (        SalsaNotFoundException snfe) {
          CompilerErrors.printErrorMessage(""String_Node_Str"" + ms.message_name + ""String_Node_Str"",ms);
          throw new RuntimeException(snfe);
        }
        code+=messageSymbol.getId();
        code+=""String_Node_Str"" + ms.message_name + ""String_Node_Str"";
        String argument_code=""String_Node_Str"";
        String argument_tokens=""String_Node_Str"";
        boolean hasContinuationToken=false;
        boolean hasToken=false;
        int j=0;
        for (        CExpression argument : ms.arguments) {
          if (argument.isToken()) {
            if (argument.requiresExpressionDirector()) {
              expression_director_code+=argument.getExpressionDirectorCode();
            }
            if (argument_tokens.length() > 10)             argument_tokens+=""String_Node_Str"";
            argument_tokens+=j;
            hasToken=true;
          }
 else           if (SymbolTable.isMutableObject(argument.getType())) {
            argument_code+=""String_Node_Str"" + argument.getType().getName() + ""String_Node_Str"";
          }
          SymbolTable.withinArguments=true;
          argument_code+=argument.toJavaCode();
          SymbolTable.withinArguments=false;
          if (SymbolTable.isMutableObject(argument.getType()))           argument_code+=""String_Node_Str"";
          if (!argument.equals(ms.arguments.lastElement()))           argument_code+=""String_Node_Str"";
          j++;
        }
        code=expression_director_code + code;
        if (hasToken) {
          argument_code+=""String_Node_Str"" + argument_tokens + ""String_Node_Str"";
        }
 else {
          argument_code+=""String_Node_Str"";
        }
        if (ms.arguments.size() == 0)         argument_code=""String_Node_Str"";
        code+=argument_code;
        if (ms.message_property != null && ms.message_property.name.equals(""String_Node_Str"")) {
          code+=""String_Node_Str"";
          for (int i=0; i < ms.message_property.arguments.size(); i++) {
            CExpression arg=ms.message_property.arguments.get(i);
            if (!arg.isToken()) {
              CompilerErrors.printErrorMessage(""String_Node_Str"",arg);
              throw new RuntimeException();
            }
            code+=arg.toJavaCode();
            if (i != ms.message_property.arguments.size() - 1)             code+=""String_Node_Str"";
          }
          if (SymbolTable.messageRequiresContinuation) {
            code+=""String_Node_Str"";
          }
          code+=""String_Node_Str"";
        }
 else         if (SymbolTable.messageRequiresContinuation) {
          code+=""String_Node_Str"";
        }
        if (SymbolTable.continuesToPass && !SymbolTable.withinArguments) {
          code+=""String_Node_Str"";
        }
        code+=""String_Node_Str"";
        if (joinDirector != null && !SymbolTable.messageContinues) {
          code+=""String_Node_Str"";
          code+=CIndent.getIndent() + ""String_Node_Str"" + joinDirector+ ""String_Node_Str""+ joinDirector+ ""String_Node_Str"";
        }
        currentType=((ActorType)currentType).getMessage(ms.message_name,ms.arguments,isParentMessageSend).getPassType();
        SymbolTable.setContinuationType(currentType);
      }
 catch (      SalsaNotFoundException snfe) {
        CompilerErrors.printErrorMessage(""String_Node_Str"" + snfe.toString(),ms);
        throw new RuntimeException(snfe);
      }
    }
    isParentMessageSend=false;
  }
  return code;
}","public String toJavaCode(TypeSymbol currentType){
  String code=""String_Node_Str"";
  boolean isParentMessageSend=false;
  if (literal != null) {
    if (literal.value.equals(""String_Node_Str"")) {
      code+=""String_Node_Str"";
    }
 else     if (literal.value.equals(""String_Node_Str"")) {
      if (modifications.size() > 0 && modifications.get(0) instanceof CMessageSend) {
        code+=""String_Node_Str"";
        isParentMessageSend=true;
      }
 else {
        code+=""String_Node_Str"";
      }
    }
 else     if (literal.value.equals(""String_Node_Str"")) {
      code+=""String_Node_Str"";
    }
 else {
      code+=literal.toJavaCode();
    }
  }
 else   if (variable_name != null) {
    code+=variable_name;
  }
 else   if (expression != null) {
    code+=""String_Node_Str"" + expression.toJavaCode() + ""String_Node_Str"";
  }
 else   if (allocation != null) {
    code+=allocation.toJavaCode();
  }
  if (cast_type != null) {
    code=""String_Node_Str"" + cast_type.name + ""String_Node_Str""+ code;
  }
  if (currentType == null)   currentType=getValueType();
  for (  CModification modification : modifications) {
    if (modification instanceof CArrayAccess) {
      CArrayAccess aa=(CArrayAccess)modification;
      if (aa.expression.isToken()) {
        System.err.println(""String_Node_Str"");
        CompilerErrors.printErrorMessage(""String_Node_Str"",aa);
        currentType=null;
      }
 else {
        code+=""String_Node_Str"" + aa.expression.toJavaCode() + ""String_Node_Str"";
        if (currentType == null) {
          System.err.println(""String_Node_Str"");
          throw new RuntimeException();
        }
        currentType=((ArrayType)currentType).getSubtype();
      }
    }
 else     if (modification instanceof CFieldAccess) {
      CFieldAccess fa=(CFieldAccess)modification;
      if (currentType instanceof ObjectType) {
        code+=""String_Node_Str"" + fa.name;
        currentType=((ObjectType)currentType).getFieldType(fa.name);
      }
 else       if (currentType instanceof ActorType) {
        code+=""String_Node_Str"" + fa.name;
        currentType=((ActorType)currentType).getFieldType(fa.name);
      }
 else       if (currentType instanceof ArrayType) {
        code+=""String_Node_Str"" + fa.name;
        currentType=((ArrayType)currentType).getFieldType(fa.name);
      }
 else       if (currentType instanceof PrimitiveType) {
        CompilerErrors.printErrorMessage(""String_Node_Str"",fa);
        currentType=null;
      }
 else {
        CompilerErrors.printErrorMessage(""String_Node_Str"",fa);
        currentType=null;
      }
    }
 else     if (modification instanceof CMethodInvocation) {
      CMethodInvocation mi=(CMethodInvocation)modification;
      try {
        if (currentType instanceof ObjectType) {
          MethodSymbol ms=((ObjectType)currentType).getMethod(mi.method_name,mi.arguments);
          if (ms == null) {
            CompilerErrors.printErrorMessage(""String_Node_Str"",mi);
            currentType=null;
          }
          currentType=ms.getReturnType();
        }
 else         if (currentType instanceof ActorType) {
          if (modifications.getFirst().equals(modification) && (isSelf() || isParent())) {
            currentType=((ActorType)currentType).getMessage(mi.method_name,mi.arguments,isParentMessageSend).getPassType();
          }
 else {
            CompilerErrors.printErrorMessage(""String_Node_Str"",mi);
            currentType=null;
          }
        }
 else         if (currentType instanceof ArrayType) {
          CompilerErrors.printErrorMessage(""String_Node_Str"",mi);
          currentType=null;
        }
 else         if (currentType instanceof PrimitiveType) {
          CompilerErrors.printErrorMessage(""String_Node_Str"",mi);
          currentType=null;
        }
 else {
          CompilerErrors.printErrorMessage(""String_Node_Str"",mi);
          currentType=null;
        }
        if (currentType != null) {
          code+=""String_Node_Str"" + mi.method_name + ""String_Node_Str"";
          for (          CExpression argument : mi.arguments) {
            if (!argument.isToken()) {
              code+=argument.toJavaCode();
              if (!argument.equals(mi.arguments.lastElement()))               code+=""String_Node_Str"";
            }
 else {
              CompilerErrors.printErrorMessage(""String_Node_Str"",argument);
            }
          }
          code+=""String_Node_Str"";
        }
      }
 catch (      SalsaNotFoundException snfe) {
        CompilerErrors.printErrorMessage(""String_Node_Str"" + snfe.toString(),mi);
        throw new RuntimeException(snfe);
      }
    }
 else     if (modification instanceof CMessageSend) {
      CMessageSend ms=(CMessageSend)modification;
      try {
        String joinDirector=SymbolTable.getJoinDirector();
        if (ms.message_property != null && !ms.message_property.name.equals(""String_Node_Str"")) {
          CompilerErrors.printErrorMessage(""String_Node_Str"" + ms.message_property.name + ""String_Node_Str"",ms);
        }
        String pre_code=""String_Node_Str"";
        if (SymbolTable.continuesToPass && !SymbolTable.withinArguments) {
          pre_code+=""String_Node_Str"";
        }
 else         if (SymbolTable.withinArguments) {
          pre_code+=""String_Node_Str"";
        }
 else         if (SymbolTable.continuationTokenMessage) {
          pre_code+=""String_Node_Str"";
        }
 else         if (SymbolTable.isExpressionContinuation) {
          pre_code+=""String_Node_Str"";
        }
 else         if (SymbolTable.messageContinues || joinDirector != null) {
          if (SymbolTable.firstContinuation()) {
            pre_code+=""String_Node_Str"";
            SymbolTable.initializedFirstContinuation();
          }
          pre_code+=""String_Node_Str"";
        }
 else {
          pre_code+=""String_Node_Str"";
        }
        String expression_director_code=""String_Node_Str"";
        pre_code+=""String_Node_Str"";
        if (currentType.isInterface)         code=""String_Node_Str"" + code;
        code=pre_code + code + ""String_Node_Str"";
        if (!(currentType instanceof ActorType)) {
          CompilerErrors.printErrorMessage(""String_Node_Str"" + currentType.getLongSignature() + ""String_Node_Str"",ms);
          throw new RuntimeException();
        }
        ActorType at=(ActorType)currentType;
        MessageSymbol messageSymbol=null;
        try {
          messageSymbol=at.getMessage(ms.message_name,ms.arguments,isParentMessageSend);
        }
 catch (        SalsaNotFoundException snfe) {
          CompilerErrors.printErrorMessage(""String_Node_Str"" + ms.message_name + ""String_Node_Str"",ms);
          throw new RuntimeException(snfe);
        }
        code+=messageSymbol.getId();
        code+=""String_Node_Str"" + ms.message_name + ""String_Node_Str"";
        String argument_code=""String_Node_Str"";
        String argument_tokens=""String_Node_Str"";
        boolean hasContinuationToken=false;
        boolean hasToken=false;
        int j=0;
        for (        CExpression argument : ms.arguments) {
          if (argument.isToken()) {
            if (argument.requiresExpressionDirector()) {
              expression_director_code+=argument.getExpressionDirectorCode();
            }
            if (argument_tokens.length() > 10)             argument_tokens+=""String_Node_Str"";
            argument_tokens+=j;
            hasToken=true;
          }
 else           if (SymbolTable.isMutableObject(argument.getType())) {
            argument_code+=""String_Node_Str"" + argument.getType().getName() + ""String_Node_Str"";
          }
          SymbolTable.withinArguments=true;
          argument_code+=argument.toJavaCode();
          SymbolTable.withinArguments=false;
          if (SymbolTable.isMutableObject(argument.getType()))           argument_code+=""String_Node_Str"";
          if (!argument.equals(ms.arguments.lastElement()))           argument_code+=""String_Node_Str"";
          j++;
        }
        code=expression_director_code + code;
        if (hasToken) {
          argument_code+=""String_Node_Str"" + argument_tokens + ""String_Node_Str"";
        }
 else {
          argument_code+=""String_Node_Str"";
        }
        if (ms.arguments.size() == 0)         argument_code=""String_Node_Str"";
        code+=argument_code;
        if (ms.message_property != null && ms.message_property.name.equals(""String_Node_Str"")) {
          code+=""String_Node_Str"";
          for (int i=0; i < ms.message_property.arguments.size(); i++) {
            CExpression arg=ms.message_property.arguments.get(i);
            if (!arg.isToken()) {
              CompilerErrors.printErrorMessage(""String_Node_Str"",arg);
              throw new RuntimeException();
            }
            code+=arg.toJavaCode();
            if (i != ms.message_property.arguments.size() - 1)             code+=""String_Node_Str"";
          }
          if (SymbolTable.messageRequiresContinuation) {
            code+=""String_Node_Str"";
          }
          code+=""String_Node_Str"";
        }
 else         if (SymbolTable.messageRequiresContinuation) {
          code+=""String_Node_Str"";
        }
        if (SymbolTable.continuesToPass && !SymbolTable.withinArguments) {
          code+=""String_Node_Str"";
        }
        code+=""String_Node_Str"";
        if (joinDirector != null && !SymbolTable.messageContinues) {
          code+=""String_Node_Str"";
          code+=CIndent.getIndent() + ""String_Node_Str"" + joinDirector+ ""String_Node_Str""+ joinDirector+ ""String_Node_Str"";
        }
        currentType=((ActorType)currentType).getMessage(ms.message_name,ms.arguments,isParentMessageSend).getPassType();
        SymbolTable.setContinuationType(currentType);
      }
 catch (      SalsaNotFoundException snfe) {
        CompilerErrors.printErrorMessage(""String_Node_Str"" + snfe.toString(),ms);
        throw new RuntimeException(snfe);
      }
    }
    isParentMessageSend=false;
  }
  return code;
}"
81609,"public String toJavaCodeAsToken(String type,boolean is_token){
  String code=name;
  TypeSymbol ts=null;
  try {
    ts=SymbolTable.getTypeSymbol(type);
  }
 catch (  SalsaNotFoundException snfe) {
    CompilerErrors.printErrorMessage(""String_Node_Str"" + type + ""String_Node_Str"",this);
    throw new RuntimeException(snfe);
  }
  if (expression != null) {
    if (expression.getType().canMatch(ts) < 0) {
      CompilerErrors.printErrorMessage(""String_Node_Str"" + expression.getType().getLongSignature() + ""String_Node_Str""+ ts.getLongSignature()+ ""String_Node_Str"",expression);
    }
    if (!is_token && expression.isToken()) {
      CompilerErrors.printErrorMessage(""String_Node_Str"" + expression.getType().getLongSignature() + ""String_Node_Str"",expression);
    }
    if (expression.isToken()) {
      code+=""String_Node_Str"" + expression.toJavaCode();
    }
 else {
      code+=""String_Node_Str"" + expression.toJavaCode() + ""String_Node_Str"";
    }
  }
  return code;
}","public String toJavaCodeAsToken(String type,boolean is_token){
  String code=name;
  TypeSymbol ts=null;
  try {
    ts=SymbolTable.getTypeSymbol(type);
  }
 catch (  SalsaNotFoundException snfe) {
    CompilerErrors.printErrorMessage(""String_Node_Str"" + type + ""String_Node_Str"",this);
    throw new RuntimeException(snfe);
  }
  if (expression != null) {
    if (expression.getType().canMatch(ts) < 0) {
      CompilerErrors.printErrorMessage(""String_Node_Str"" + expression.getType().getLongSignature() + ""String_Node_Str""+ ts.getLongSignature()+ ""String_Node_Str"",expression);
    }
    if (!is_token && expression.isToken()) {
      CompilerErrors.printErrorMessage(""String_Node_Str"" + expression.getType().getLongSignature() + ""String_Node_Str"",expression);
    }
    boolean previous_continues=SymbolTable.continuationTokenMessage;
    SymbolTable.continuationTokenMessage=true;
    if (expression.isToken()) {
      code+=""String_Node_Str"" + expression.toJavaCode();
    }
 else {
      code+=""String_Node_Str"" + expression.toJavaCode() + ""String_Node_Str"";
    }
    SymbolTable.continuationTokenMessage=previous_continues;
  }
  return code;
}"
81610,"public void set(T value){
  this.value=value;
}","public void set(T value){
  System.err.println(""String_Node_Str"" + value);
  this.value=value;
}"
81611,"public T get(){
  return (T)DeepCopy.deepCopy(value);
}","public T get(){
  System.err.println(""String_Node_Str"" + value);
  return (T)DeepCopy.deepCopy(value);
}"
81612,"public TypeSymbol getType(){
  TypeSymbol value_type=value.getType();
  if (operator == null) {
    return value_type;
  }
 else   if (operator.equals(""String_Node_Str"")) {
    if (!value_type.canMatch(operator_expression.getType())) {
      CompilerErrors.printErrorMessage(""String_Node_Str"" + operator_expression.getType().getLongSignature() + ""String_Node_Str""+ value_type.getLongSignature()+ ""String_Node_Str"",operator_expression);
    }
    if (!value.isToken() && operator_expression.isToken()) {
      CompilerErrors.printErrorMessage(""String_Node_Str"",operator_expression);
    }
    return value_type;
  }
 else {
    try {
      TypeSymbol dominatingType=SymbolTable.getDominatingType(value_type,operator_expression.getType());
      return dominatingType;
    }
 catch (    SalsaNotFoundException snfe) {
      CompilerErrors.printErrorMessage(""String_Node_Str"" + snfe.toString(),this);
      throw new RuntimeException();
    }
  }
}","public TypeSymbol getType(){
  TypeSymbol value_type=value.getType();
  if (operator == null) {
    return value_type;
  }
 else   if (operator.equals(""String_Node_Str"")) {
    if (value_type.canMatch(operator_expression.getType()) < 0) {
      CompilerErrors.printErrorMessage(""String_Node_Str"" + operator_expression.getType().getLongSignature() + ""String_Node_Str""+ value_type.getLongSignature()+ ""String_Node_Str"",operator_expression);
    }
    if (!value.isToken() && operator_expression.isToken()) {
      CompilerErrors.printErrorMessage(""String_Node_Str"",operator_expression);
    }
    return value_type;
  }
 else {
    try {
      TypeSymbol dominatingType=SymbolTable.getDominatingType(value_type,operator_expression.getType());
      return dominatingType;
    }
 catch (    SalsaNotFoundException snfe) {
      CompilerErrors.printErrorMessage(""String_Node_Str"" + snfe.toString(),this);
      throw new RuntimeException();
    }
  }
}"
81613,"public String toJavaCodeAsToken(String type,boolean is_token){
  String code=name;
  TypeSymbol ts=null;
  try {
    ts=SymbolTable.getTypeSymbol(type);
  }
 catch (  SalsaNotFoundException snfe) {
    CompilerErrors.printErrorMessage(""String_Node_Str"" + type + ""String_Node_Str"",this);
    throw new RuntimeException(snfe);
  }
  if (expression != null) {
    if (!ts.canMatch(expression.getType())) {
      CompilerErrors.printErrorMessage(""String_Node_Str"" + expression.getType().getLongSignature() + ""String_Node_Str""+ ts.getLongSignature()+ ""String_Node_Str"",expression);
    }
    if (is_token && expression.isToken()) {
      CompilerErrors.printErrorMessage(""String_Node_Str"",expression);
    }
    if (expression.isToken()) {
      code+=""String_Node_Str"" + expression.toJavaCode();
    }
 else {
      code+=""String_Node_Str"" + expression.toJavaCode() + ""String_Node_Str"";
    }
  }
  return code;
}","public String toJavaCodeAsToken(String type,boolean is_token){
  String code=name;
  TypeSymbol ts=null;
  try {
    ts=SymbolTable.getTypeSymbol(type);
  }
 catch (  SalsaNotFoundException snfe) {
    CompilerErrors.printErrorMessage(""String_Node_Str"" + type + ""String_Node_Str"",this);
    throw new RuntimeException(snfe);
  }
  if (expression != null) {
    if (ts.canMatch(expression.getType()) < 0) {
      CompilerErrors.printErrorMessage(""String_Node_Str"" + expression.getType().getLongSignature() + ""String_Node_Str""+ ts.getLongSignature()+ ""String_Node_Str"",expression);
    }
    if (is_token && expression.isToken()) {
      CompilerErrors.printErrorMessage(""String_Node_Str"",expression);
    }
    if (expression.isToken()) {
      code+=""String_Node_Str"" + expression.toJavaCode();
    }
 else {
      code+=""String_Node_Str"" + expression.toJavaCode() + ""String_Node_Str"";
    }
  }
  return code;
}"
81614,"public String toJavaCode(String type,boolean is_token){
  String code=name;
  TypeSymbol ts=null;
  try {
    ts=SymbolTable.getTypeSymbol(type);
  }
 catch (  SalsaNotFoundException snfe) {
    CompilerErrors.printErrorMessage(""String_Node_Str"" + type + ""String_Node_Str"",this);
    throw new RuntimeException(snfe);
  }
  if (expression != null) {
    if (!ts.canMatch(expression.getType())) {
      CompilerErrors.printErrorMessage(""String_Node_Str"" + expression.getType().getLongSignature() + ""String_Node_Str""+ ts.getLongSignature()+ ""String_Node_Str"",expression);
    }
    if (is_token && expression.isToken()) {
      CompilerErrors.printErrorMessage(""String_Node_Str"",expression);
    }
    code+=""String_Node_Str"" + expression.toJavaCode();
  }
  return code;
}","public String toJavaCode(String type,boolean is_token){
  String code=name;
  TypeSymbol ts=null;
  try {
    ts=SymbolTable.getTypeSymbol(type);
  }
 catch (  SalsaNotFoundException snfe) {
    CompilerErrors.printErrorMessage(""String_Node_Str"" + type + ""String_Node_Str"",this);
    throw new RuntimeException(snfe);
  }
  if (expression != null) {
    if (ts.canMatch(expression.getType()) < 0) {
      CompilerErrors.printErrorMessage(""String_Node_Str"" + expression.getType().getLongSignature() + ""String_Node_Str""+ ts.getLongSignature()+ ""String_Node_Str"",expression);
    }
    if (is_token && expression.isToken()) {
      CompilerErrors.printErrorMessage(""String_Node_Str"",expression);
    }
    code+=""String_Node_Str"" + expression.toJavaCode();
  }
  return code;
}"
81615,"public static Invokable matchInvokable(Invokable targetArguments,LinkedHashMap<String,? extends Invokable> invokableMap) throws SalsaNotFoundException {
  Invokable match=null;
  int matches=0;
  for (  Invokable current : new LinkedList<Invokable>(invokableMap.values())) {
    if (targetArguments.matches(current)) {
      matches++;
      if (matches == 2) {
        System.err.println(""String_Node_Str"" + targetArguments.getLongSignature() + ""String_Node_Str"");
        System.err.println(""String_Node_Str"" + match.getLongSignature());
      }
      match=current;
      if (matches > 1) {
        System.err.println(""String_Node_Str"" + match.getLongSignature());
      }
    }
  }
  if (match == null) {
    System.err.println(""String_Node_Str"" + targetArguments.getLongSignature() + ""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    for (    Invokable current : new LinkedList<Invokable>(invokableMap.values())) {
      System.err.println(""String_Node_Str"" + current.getLongSignature());
    }
  }
  return match;
}","public static Invokable matchInvokable(Invokable targetArguments,LinkedHashMap<String,? extends Invokable> invokableMap) throws SalsaNotFoundException {
  Invokable match=null;
  int matches=0;
  int[] match_distance=new int[invokableMap.values().size()];
  int min_distance=Integer.MAX_VALUE;
  int i=0;
  for (  Invokable current : new LinkedList<Invokable>(invokableMap.values())) {
    match_distance[i]=targetArguments.matches(current);
    if (match_distance[i] >= 0 && match_distance[i] < min_distance) {
      matches=1;
      min_distance=match_distance[i];
      match=current;
    }
 else     if (match_distance[i] >= 0 && match_distance[i] == min_distance) {
      matches++;
    }
    i++;
  }
  if (matches > 1) {
    int min_match=match_distance[1];
    int min_match_position=1;
    int min_matches=0;
    for (i=1; i < match_distance.length; i++) {
      if (min_match >= 0 && min_match < match_distance[i]) {
        min_match_position=i;
        min_match=match_distance[i];
        min_matches=0;
      }
 else       if (min_match >= 0 && min_match == match_distance[i]) {
        min_matches++;
      }
    }
    if (min_matches > 1) {
      i=0;
      System.err.println(""String_Node_Str"" + targetArguments.getLongSignature() + ""String_Node_Str"");
      for (      Invokable current : new LinkedList<Invokable>(invokableMap.values())) {
        if (match_distance[i] == min_match) {
          System.err.println(""String_Node_Str"" + match_distance[i] + ""String_Node_Str""+ current.getLongSignature());
        }
        i++;
      }
    }
 else {
      return match;
    }
  }
  if (match == null) {
    System.err.println(""String_Node_Str"" + targetArguments.getLongSignature() + ""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    i=0;
    for (    Invokable current : new LinkedList<Invokable>(invokableMap.values())) {
      System.err.println(""String_Node_Str"" + current.getLongSignature());
    }
  }
  return match;
}"
81616,"/** 
 * The current invokable is has the arguments we're trying to send to target
 */
public boolean matches(Invokable target) throws SalsaNotFoundException {
  if (!name.equals(target.getName()))   return false;
  if (parameterTypes.length != target.parameterTypes.length)   return false;
  for (int i=0; i < parameterTypes.length; i++) {
    boolean canMatch=parameterTypes[i].canMatch(target.parameterTypes[i]);
    if (!canMatch)     return false;
  }
  return true;
}","/** 
 * The current invokable is has the arguments we're trying to send to target returns -1 if there is no match, otherwise it returns the distance between types (in terms of how many superclasses away it is)
 */
public int matches(Invokable target) throws SalsaNotFoundException {
  if (!name.equals(target.getName()))   return -1;
  if (parameterTypes.length != target.parameterTypes.length)   return -1;
  int match_distance;
  int total_match_distance=0;
  for (int i=0; i < parameterTypes.length; i++) {
    match_distance=this.parameterTypes[i].canMatch(target.parameterTypes[i]);
    total_match_distance+=match_distance;
    if (match_distance < 0)     return -1;
  }
  return total_match_distance;
}"
81617,"/** 
 * This type matches the target if the target is the same type, or a superclass of this type
 */
public boolean canMatch(TypeSymbol target){
  if (this.equals(target))   return true;
  if (target.getName().equals(""String_Node_Str"")) {
    if (this instanceof PrimitiveType)     return false;
 else     return true;
  }
  if (this instanceof PrimitiveType && !(target instanceof PrimitiveType)) {
    try {
      TypeSymbol nonPrimitive=SymbolTable.getTypeSymbol(toNonPrimitiveString());
      return nonPrimitive.canMatch(target);
    }
 catch (    SalsaNotFoundException snfe) {
      System.err.println(""String_Node_Str"" + toNonPrimitiveString() + ""String_Node_Str"");
      System.err.println(""String_Node_Str"");
      throw new RuntimeException();
    }
  }
  boolean canMatch=false;
  if (superType != null)   canMatch=superType.canMatch(target);
  if (canMatch)   return true;
  for (  TypeSymbol implementsType : implementsTypes) {
    canMatch=implementsType.canMatch(target);
    if (canMatch)     return true;
  }
  return false;
}","public int canMatch(TypeSymbol target,int distance){
  if (this.equals(target))   return distance;
  if (target.getName().equals(""String_Node_Str"")) {
    if (this instanceof PrimitiveType)     return -1;
 else     return distance;
  }
  if (this instanceof PrimitiveType && !(target instanceof PrimitiveType)) {
    try {
      TypeSymbol nonPrimitive=SymbolTable.getTypeSymbol(toNonPrimitiveString());
      return nonPrimitive.canMatch(target,distance + 1);
    }
 catch (    SalsaNotFoundException snfe) {
      System.err.println(""String_Node_Str"" + toNonPrimitiveString() + ""String_Node_Str"");
      System.err.println(""String_Node_Str"");
      throw new RuntimeException();
    }
  }
  int temp_distance=-1;
  if (superType != null)   temp_distance=superType.canMatch(target,distance + 1);
  if (temp_distance >= 0)   return temp_distance;
  for (  TypeSymbol implementsType : implementsTypes) {
    temp_distance=implementsType.canMatch(target,distance + 1);
    if (temp_distance >= 0)     return temp_distance;
  }
  return -1;
}"
81618,"/** 
 * Activates this buffer
 */
public void bind(){
  glBindBufferARB(GL_ARRAY_BUFFER_ARB,vboPtr);
  if (!dataTransferred) {
    dataTransferred=true;
    vertexBuffer.flip();
    serverMemoryUsage=vertexBuffer.limit();
    glBufferDataARB(GL_ARRAY_BUFFER_ARB,vertexBuffer,GL_STATIC_DRAW_ARB);
    ServerMemoryManager.arbBufferMemory+=serverMemoryUsage;
    vertexBuffer=null;
  }
  glVertexPointer(3,GL_FLOAT,use3DTextures ? 52 : 48,0);
  glNormalPointer(GL_FLOAT,use3DTextures ? 52 : 48,12);
  glTexCoordPointer(use3DTextures ? 3 : 2,GL_FLOAT,use3DTextures ? 52 : 48,24);
  glColorPointer(4,GL_FLOAT,use3DTextures ? 52 : 48,use3DTextures ? 36 : 32);
}","/** 
 * Activates this buffer
 */
public void bind(){
  glBindBufferARB(GL_ARRAY_BUFFER_ARB,vboPtr);
  if (!dataTransferred) {
    dataTransferred=true;
    vertexBuffer.flip();
    serverMemoryUsage=vertexBuffer.limit();
    glBufferDataARB(GL_ARRAY_BUFFER_ARB,vertexBuffer,GL_STATIC_DRAW_ARB);
    ServerMemoryManager.arbBufferMemory+=serverMemoryUsage;
    DirectBufferManager.free(vertexBuffer);
    vertexBuffer=null;
  }
  glVertexPointer(3,GL_FLOAT,use3DTextures ? 52 : 48,0);
  glNormalPointer(GL_FLOAT,use3DTextures ? 52 : 48,12);
  glTexCoordPointer(use3DTextures ? 3 : 2,GL_FLOAT,use3DTextures ? 52 : 48,24);
  glColorPointer(4,GL_FLOAT,use3DTextures ? 52 : 48,use3DTextures ? 36 : 32);
}"
81619,"/** 
 * Creates a new ARB geometry buffer
 * @param maxSize       Maximal amount of vertices this buffer may store
 * @param use3DTextures If the W texture coordinate should be enabled
 * @throws PglException When the card does not support ARB VBOs
 */
public ARBGeometryBuffer(int maxSize,boolean use3DTextures) throws PglException {
  if (!GLContext.getCapabilities().GL_ARB_vertex_buffer_object)   throw new PglException(""String_Node_Str"");
  this.use3DTextures=use3DTextures;
  vertexBuffer=BufferUtils.createByteBuffer(maxSize * (use3DTextures ? 52 : 48));
  vboPtr=glGenBuffersARB();
}","/** 
 * Creates a new ARB geometry buffer
 * @param maxSize       Maximal amount of vertices this buffer may store
 * @param use3DTextures If the W texture coordinate should be enabled
 * @throws PglException When the card does not support ARB VBOs
 */
public ARBGeometryBuffer(int maxSize,boolean use3DTextures) throws PglException {
  if (!GLContext.getCapabilities().GL_ARB_vertex_buffer_object)   throw new PglException(""String_Node_Str"");
  this.use3DTextures=use3DTextures;
  vertexBuffer=DirectBufferManager.alloc(maxSize * (use3DTextures ? 52 : 48));
  vboPtr=glGenBuffersARB();
}"
81620,"@Override protected void finalize() throws Throwable {
  super.finalize();
  vertexBuffer=null;
  ServerMemoryManager.requestARBBufferDeletion(vboPtr,serverMemoryUsage);
}","@Override protected void finalize() throws Throwable {
  super.finalize();
  if (vertexBuffer != null)   DirectBufferManager.free(vertexBuffer);
  vertexBuffer=null;
  ServerMemoryManager.requestARBBufferDeletion(vboPtr,serverMemoryUsage);
}"
81621,"/** 
 * Activates this buffer
 */
public void bind(){
  glBindBufferARB(GL_ELEMENT_ARRAY_BUFFER_ARB,vboPtr);
  if (!dataTransferred) {
    dataTransferred=true;
    elementBuffer.flip();
    serverMemoryUsage=elementBuffer.limit();
    glBufferDataARB(GL_ELEMENT_ARRAY_BUFFER_ARB,elementBuffer,GL_STATIC_DRAW_ARB);
    ServerMemoryManager.arbBufferMemory+=serverMemoryUsage;
    elementBuffer=null;
  }
}","/** 
 * Activates this buffer
 */
public void bind(){
  glBindBufferARB(GL_ELEMENT_ARRAY_BUFFER_ARB,vboPtr);
  if (!dataTransferred) {
    dataTransferred=true;
    elementBuffer.flip();
    serverMemoryUsage=elementBuffer.limit();
    glBufferDataARB(GL_ELEMENT_ARRAY_BUFFER_ARB,elementBuffer,GL_STATIC_DRAW_ARB);
    ServerMemoryManager.arbBufferMemory+=serverMemoryUsage;
    DirectBufferManager.free(elementBuffer);
    elementBuffer=null;
  }
}"
81622,"/** 
 * Creates a new ARB element buffer
 * @param maxSize Maximal amount of polygons this buffer may store
 * @param drawMode The OpenGL drawing mode to use
 * @throws PglException When the card does not support ARB VBOs
 */
public ArbElementBuffer(int maxSize,int drawMode) throws PglException {
  if (!GLContext.getCapabilities().GL_ARB_vertex_buffer_object)   throw new PglException(""String_Node_Str"");
  this.drawMode=drawMode;
  this.elementBuffer=ByteBuffer.allocateDirect(maxSize * sizeof() * 4);
  vboPtr=glGenBuffersARB();
}","/** 
 * Creates a new ARB element buffer
 * @param maxSize Maximal amount of polygons this buffer may store
 * @param drawMode The OpenGL drawing mode to use
 * @throws PglException When the card does not support ARB VBOs
 */
public ArbElementBuffer(int maxSize,int drawMode) throws PglException {
  if (!GLContext.getCapabilities().GL_ARB_vertex_buffer_object)   throw new PglException(""String_Node_Str"");
  this.drawMode=drawMode;
  this.elementBuffer=DirectBufferManager.alloc(maxSize * sizeof() * 4);
  vboPtr=glGenBuffersARB();
}"
81623,"@Override protected void finalize() throws Throwable {
  super.finalize();
  elementBuffer=null;
  ServerMemoryManager.requestARBBufferDeletion(vboPtr,serverMemoryUsage);
}","@Override protected void finalize() throws Throwable {
  super.finalize();
  if (elementBuffer != null)   DirectBufferManager.free(elementBuffer);
  elementBuffer=null;
  ServerMemoryManager.requestARBBufferDeletion(vboPtr,serverMemoryUsage);
}"
81624,"/** 
 * Creates a new element array
 * @param maxSize Maximal amount of polygons this buffer may store
 * @param drawMode The OpenGL drawing mode to use
 */
public ElementArray(int maxSize,int drawMode){
  this.elementBuffer=ByteBuffer.allocateDirect(maxSize * sizeof() * 4);
  this.drawMode=drawMode;
}","/** 
 * Creates a new element array
 * @param maxSize Maximal amount of polygons this buffer may store
 * @param drawMode The OpenGL drawing mode to use
 */
public ElementArray(int maxSize,int drawMode){
  this.drawMode=drawMode;
  this.elementBuffer=DirectBufferManager.alloc(maxSize * sizeof() * 4);
}"
81625,"/** 
 * Creates a new vertex array geometry buffer
 * @param maxSize       Maximal amount of vertices this buffer may store
 * @param use3DTextures If the W texture coordinate should be enabled
 */
public GeometryArray(int maxSize,boolean use3DTextures){
  this.use3DTextures=use3DTextures;
  vertexBuffer=BufferUtils.createByteBuffer(maxSize * (use3DTextures ? 52 : 48));
}","/** 
 * Creates a new vertex array geometry buffer
 * @param maxSize       Maximal amount of vertices this buffer may store
 * @param use3DTextures If the W texture coordinate should be enabled
 */
public GeometryArray(int maxSize,boolean use3DTextures){
  this.use3DTextures=use3DTextures;
  vertexBuffer=DirectBufferManager.alloc(maxSize * (use3DTextures ? 52 : 48));
}"
81626,"public TerrainLayer(Terrain terrain,int textureId){
  this.terrain=terrain;
  this.texture=terrain.getTerrainSource().getTexture(textureId);
  this.textureId=textureId;
  int[][] heightmap=terrain.getTerrainSource().getHeightMap();
  int side=terrain.getTerrainSource().getSideSize();
  int totalTiles=side * side;
  int totalPolys=(side - 1) * (side - 1);
  geometryBuffer=OpenGLBufferFactory.createGeometryBuffer(totalPolys * 4,false);
  elementBuffer=OpenGLBufferFactory.createElementBuffer(totalPolys,GL11.GL_QUADS);
  for (int x=0; x < side - 1; x++)   for (int z=0; z < side - 1; z++)   try {
    addTile(x,z);
  }
 catch (  PglException e) {
    e.printStackTrace();
  }
}","public TerrainLayer(Terrain terrain,int textureId){
  this.terrain=terrain;
  this.texture=terrain.getTerrainSource().getTexture(textureId);
  this.textureId=textureId;
  int[][] heightmap=terrain.getTerrainSource().getHeightMap();
  int side=terrain.getTerrainSource().getSideSize();
  int totalTiles=side * side;
  int totalPolys=(side - 1) * (side - 1);
  geometryBuffer=OpenGLBufferFactory.createGeometryBuffer(totalPolys * 6,false);
  elementBuffer=OpenGLBufferFactory.createElementBuffer(totalPolys * 3,GL11.GL_TRIANGLES);
  for (int x=0; x < side - 1; x++)   for (int z=0; z < side - 1; z++)   try {
    addTile(x,z);
  }
 catch (  PglException e) {
    e.printStackTrace();
  }
}"
81627,"public void glTexParameterf(int id,float value){
}","public void glTexParameterf(int id,float value){
  bind();
  GL11.glTexParameterf(GL_TEXTURE_2D,id,value);
}"
81628,"public void glTexParameteri(int id,int value){
}","public void glTexParameteri(int id,int value){
  bind();
  GL11.glTexParameteri(GL_TEXTURE_2D,id,value);
}"
81629,"/** 
 * Renders this node and its children
 * @param cam The camera that is rendering this node.When the camera parameter is null only Camera nodes will render, this is used to have all active cameras render.
 */
@Override public void render(Camera cam){
  for (  TileNode[][] t : tileArray)   for (  TileNode[] _t : t)   for (  TileNode __t : _t) {
    if (tileLightingEnabled)     activateLightsForTile(__t.getTileY(),__t.getTileX(),__t.getTileZ());
    openGLLightManager.startLighting(cam);
    __t.render(cam);
    openGLLightManager.stopLighting();
    if (tileLightingEnabled)     deactivateLightsForTile(__t.getTileY(),__t.getTileX(),__t.getTileZ());
  }
}","/** 
 * Renders this node and its children
 * @param cam The camera that is rendering this node.When the camera parameter is null only Camera nodes will render, this is used to have all active cameras render.
 */
@Override public void render(Camera cam){
  for (  TileNode[][] t : tileArray)   for (  TileNode[] _t : t)   for (  TileNode __t : _t) {
    if (tileLightingEnabled) {
      activateLightsForTile(__t.getTileY(),__t.getTileX(),__t.getTileZ());
      openGLLightManager.startLighting(cam);
    }
    __t.render(cam);
    if (tileLightingEnabled) {
      openGLLightManager.stopLighting();
      deactivateLightsForTile(__t.getTileY(),__t.getTileX(),__t.getTileZ());
    }
  }
}"
81630,"/** 
 * Construct an simple AST representing an entire   {@link CompilationState}. Does not support deferred binding. Implementation mostly copied from  {@link JavaToJavaScriptCompiler}.
 */
public static JProgram construct(TreeLogger logger,final CompilationState state,JJSOptions options) throws UnableToCompleteException {
  InternalCompilerException.preload();
  RebindPermutationOracle rpo=new RebindPermutationOracle(){
    @Override public void clear(){
    }
    @Override public String[] getAllPossibleRebindAnswers(    TreeLogger logger,    String sourceTypeName) throws UnableToCompleteException {
      return new String[0];
    }
    public CompilationState getCompilationState(){
      return state;
    }
    public StandardGeneratorContext getGeneratorContext(){
      return null;
    }
  }
;
  JProgram jprogram=new JProgram();
  JsProgram jsProgram=new JsProgram();
  UnifyAst unifyAst=new UnifyAst(jprogram,jsProgram,options,rpo);
  unifyAst.buildEverything(logger);
  jprogram.typeOracle.computeBeforeAST();
  FixAssignmentToUnbox.exec(jprogram);
  if (options.isEnableAssertions()) {
    AssertionNormalizer.exec(jprogram);
  }
 else {
    AssertionRemover.exec(jprogram);
  }
  if (options.isRunAsyncEnabled()) {
    ReplaceRunAsyncs.exec(logger,jprogram);
  }
  ImplementClassLiteralsAsFields.exec(jprogram);
  return jprogram;
}","/** 
 * Construct an simple AST representing an entire   {@link CompilationState}. Does not support deferred binding. Implementation mostly copied from  {@link JavaToJavaScriptCompiler}.
 */
public static JProgram construct(TreeLogger logger,final CompilationState state,JJSOptions options) throws UnableToCompleteException {
  InternalCompilerException.preload();
  RebindPermutationOracle rpo=new RebindPermutationOracle(){
    @Override public void clear(){
    }
    @Override public String[] getAllPossibleRebindAnswers(    TreeLogger logger,    String sourceTypeName) throws UnableToCompleteException {
      return new String[0];
    }
    public CompilationState getCompilationState(){
      return state;
    }
    public StandardGeneratorContext getGeneratorContext(){
      return null;
    }
  }
;
  JProgram jprogram=new JProgram();
  JsProgram jsProgram=new JsProgram();
  UnifyAst unifyAst=new UnifyAst(logger,jprogram,jsProgram,options,rpo);
  unifyAst.buildEverything();
  jprogram.typeOracle.computeBeforeAST();
  FixAssignmentToUnbox.exec(jprogram);
  if (options.isEnableAssertions()) {
    AssertionNormalizer.exec(jprogram);
  }
 else {
    AssertionRemover.exec(jprogram);
  }
  if (options.isRunAsyncEnabled()) {
    ReplaceRunAsyncs.exec(logger,jprogram);
  }
  ImplementClassLiteralsAsFields.exec(jprogram);
  return jprogram;
}"
81631,"/** 
 * Performs a precompilation, returning a unified AST.
 * @param logger the logger to use
 * @param module the module to compile
 * @param rpo the RebindPermutationOracle
 * @param declEntryPts the set of entry classes declared in a GWT module;these will be automatically rebound
 * @param additionalRootTypes additional classes that should serve as coderoots; will not be rebound; may be <code>null</code>
 * @param options the compiler options
 * @param singlePermutation if true, do not pre-optimize the resulting AST orallow serialization of the result
 * @param precompilationMetrics if not null, gather diagnostic informationfrom this build for a report.
 * @return the unified AST used to drive permutation compiles
 * @throws UnableToCompleteException if an error other than{@link OutOfMemoryError} occurs
 */
public static UnifiedAst precompile(TreeLogger logger,ModuleDef module,RebindPermutationOracle rpo,String[] declEntryPts,String[] additionalRootTypes,JJSOptions options,boolean singlePermutation,PrecompilationMetricsArtifact precompilationMetrics) throws UnableToCompleteException {
  InternalCompilerException.preload();
  if (additionalRootTypes == null) {
    additionalRootTypes=Empty.STRINGS;
  }
  if (declEntryPts.length + additionalRootTypes.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Set<String> allRootTypes=new TreeSet<String>();
  for (  String element : declEntryPts) {
    String[] all=rpo.getAllPossibleRebindAnswers(logger,element);
    Collections.addAll(allRootTypes,all);
  }
  rpo.getGeneratorContext().finish(logger);
  Collections.addAll(allRootTypes,additionalRootTypes);
  allRootTypes.addAll(JProgram.CODEGEN_TYPES_SET);
  allRootTypes.addAll(JProgram.INDEX_TYPES_SET);
  TypeOracle typeOracle=rpo.getCompilationState().getTypeOracle();
  for (  com.google.gwt.core.ext.typeinfo.JClassType singleJsoIntf : typeOracle.getSingleJsoImplInterfaces()) {
    allRootTypes.add(typeOracle.getSingleJsoImpl(singleJsoIntf).getQualifiedSourceName());
  }
  Memory.maybeDumpMemory(""String_Node_Str"");
  JProgram jprogram=new JProgram();
  JsProgram jsProgram=new JsProgram();
  try {
    UnifyAst unifyAst=new UnifyAst(jprogram,jsProgram,options,rpo);
    unifyAst.addRootTypes(allRootTypes);
    findEntryPoints(logger,rpo,declEntryPts,jprogram);
    unifyAst.exec(logger);
    List<String> finalTypeOracleTypes=Lists.create();
    if (precompilationMetrics != null) {
      for (      com.google.gwt.core.ext.typeinfo.JClassType type : typeOracle.getTypes()) {
        finalTypeOracleTypes=Lists.add(finalTypeOracleTypes,type.getPackage().getName() + ""String_Node_Str"" + type.getName());
      }
      precompilationMetrics.setFinalTypeOracleTypes(finalTypeOracleTypes);
    }
    rpo.clear();
    if (options.isSoycEnabled()) {
      SourceInfoCorrelator.exec(jprogram);
    }
    jprogram.typeOracle.computeBeforeAST();
    Memory.maybeDumpMemory(""String_Node_Str"");
    AstDumper.maybeDumpAST(jprogram);
    if (module != null) {
      ConfigurationProperty enumNameObfuscationProp=(ConfigurationProperty)module.getProperties().find(ENUM_NAME_OBFUSCATION_PROPERTY);
      if (enumNameObfuscationProp != null && Boolean.parseBoolean(enumNameObfuscationProp.getValue())) {
        EnumNameObfuscator.exec(jprogram,logger);
      }
    }
    FixAssignmentToUnbox.exec(jprogram);
    if (options.isEnableAssertions()) {
      AssertionNormalizer.exec(jprogram);
    }
 else {
      AssertionRemover.exec(jprogram);
    }
    if (module != null && options.isRunAsyncEnabled()) {
      ReplaceRunAsyncs.exec(logger,jprogram);
      CodeSplitter2.pickInitialLoadSequence(logger,jprogram,module.getProperties());
    }
    ImplementClassLiteralsAsFields.exec(jprogram);
    if (options.getOptimizationLevel() > OptionOptimize.OPTIMIZE_LEVEL_DRAFT && !singlePermutation) {
      if (options.isOptimizePrecompile()) {
        optimize(options,jprogram);
      }
 else {
        optimizeLoop(""String_Node_Str"",jprogram,false);
      }
    }
    Set<String> rebindRequests=new HashSet<String>();
    RecordRebinds.exec(jprogram,rebindRequests);
    if (options.isCompilerMetricsEnabled()) {
      precompilationMetrics.setAstTypes(getReferencedJavaClasses(jprogram));
    }
    logTrackingStats(logger);
    Event createUnifiedAstEvent=SpeedTracerLogger.start(CompilerEventType.CREATE_UNIFIED_AST);
    UnifiedAst result=new UnifiedAst(options,new AST(jprogram,jsProgram),singlePermutation,rebindRequests);
    createUnifiedAstEvent.end();
    return result;
  }
 catch (  Throwable e) {
    throw CompilationProblemReporter.logAndTranslateException(logger,e);
  }
 finally {
  }
}","/** 
 * Performs a precompilation, returning a unified AST.
 * @param logger the logger to use
 * @param module the module to compile
 * @param rpo the RebindPermutationOracle
 * @param declEntryPts the set of entry classes declared in a GWT module;these will be automatically rebound
 * @param additionalRootTypes additional classes that should serve as coderoots; will not be rebound; may be <code>null</code>
 * @param options the compiler options
 * @param singlePermutation if true, do not pre-optimize the resulting AST orallow serialization of the result
 * @param precompilationMetrics if not null, gather diagnostic informationfrom this build for a report.
 * @return the unified AST used to drive permutation compiles
 * @throws UnableToCompleteException if an error other than{@link OutOfMemoryError} occurs
 */
public static UnifiedAst precompile(TreeLogger logger,ModuleDef module,RebindPermutationOracle rpo,String[] declEntryPts,String[] additionalRootTypes,JJSOptions options,boolean singlePermutation,PrecompilationMetricsArtifact precompilationMetrics) throws UnableToCompleteException {
  InternalCompilerException.preload();
  if (additionalRootTypes == null) {
    additionalRootTypes=Empty.STRINGS;
  }
  if (declEntryPts.length + additionalRootTypes.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Set<String> allRootTypes=new TreeSet<String>();
  for (  String element : declEntryPts) {
    String[] all=rpo.getAllPossibleRebindAnswers(logger,element);
    Collections.addAll(allRootTypes,all);
  }
  rpo.getGeneratorContext().finish(logger);
  Collections.addAll(allRootTypes,additionalRootTypes);
  allRootTypes.addAll(JProgram.CODEGEN_TYPES_SET);
  allRootTypes.addAll(JProgram.INDEX_TYPES_SET);
  TypeOracle typeOracle=rpo.getCompilationState().getTypeOracle();
  for (  com.google.gwt.core.ext.typeinfo.JClassType singleJsoIntf : typeOracle.getSingleJsoImplInterfaces()) {
    allRootTypes.add(typeOracle.getSingleJsoImpl(singleJsoIntf).getQualifiedSourceName());
  }
  Memory.maybeDumpMemory(""String_Node_Str"");
  JProgram jprogram=new JProgram();
  JsProgram jsProgram=new JsProgram();
  try {
    UnifyAst unifyAst=new UnifyAst(logger,jprogram,jsProgram,options,rpo);
    unifyAst.addRootTypes(allRootTypes);
    findEntryPoints(logger,rpo,declEntryPts,jprogram);
    unifyAst.exec();
    List<String> finalTypeOracleTypes=Lists.create();
    if (precompilationMetrics != null) {
      for (      com.google.gwt.core.ext.typeinfo.JClassType type : typeOracle.getTypes()) {
        finalTypeOracleTypes=Lists.add(finalTypeOracleTypes,type.getPackage().getName() + ""String_Node_Str"" + type.getName());
      }
      precompilationMetrics.setFinalTypeOracleTypes(finalTypeOracleTypes);
    }
    rpo.clear();
    if (options.isSoycEnabled()) {
      SourceInfoCorrelator.exec(jprogram);
    }
    jprogram.typeOracle.computeBeforeAST();
    Memory.maybeDumpMemory(""String_Node_Str"");
    AstDumper.maybeDumpAST(jprogram);
    if (module != null) {
      ConfigurationProperty enumNameObfuscationProp=(ConfigurationProperty)module.getProperties().find(ENUM_NAME_OBFUSCATION_PROPERTY);
      if (enumNameObfuscationProp != null && Boolean.parseBoolean(enumNameObfuscationProp.getValue())) {
        EnumNameObfuscator.exec(jprogram,logger);
      }
    }
    FixAssignmentToUnbox.exec(jprogram);
    if (options.isEnableAssertions()) {
      AssertionNormalizer.exec(jprogram);
    }
 else {
      AssertionRemover.exec(jprogram);
    }
    if (module != null && options.isRunAsyncEnabled()) {
      ReplaceRunAsyncs.exec(logger,jprogram);
      CodeSplitter2.pickInitialLoadSequence(logger,jprogram,module.getProperties());
    }
    ImplementClassLiteralsAsFields.exec(jprogram);
    if (options.getOptimizationLevel() > OptionOptimize.OPTIMIZE_LEVEL_DRAFT && !singlePermutation) {
      if (options.isOptimizePrecompile()) {
        optimize(options,jprogram);
      }
 else {
        optimizeLoop(""String_Node_Str"",jprogram,false);
      }
    }
    Set<String> rebindRequests=new HashSet<String>();
    RecordRebinds.exec(jprogram,rebindRequests);
    if (options.isCompilerMetricsEnabled()) {
      precompilationMetrics.setAstTypes(getReferencedJavaClasses(jprogram));
    }
    logTrackingStats(logger);
    Event createUnifiedAstEvent=SpeedTracerLogger.start(CompilerEventType.CREATE_UNIFIED_AST);
    UnifiedAst result=new UnifiedAst(options,new AST(jprogram,jsProgram),singlePermutation,rebindRequests);
    createUnifiedAstEvent.end();
    return result;
  }
 catch (  Throwable e) {
    throw CompilationProblemReporter.logAndTranslateException(logger,e);
  }
 finally {
  }
}"
81632,"/** 
 * Special AST construction, useful for tests. Everything is resolved, translated, and unified.
 */
public void buildEverything(TreeLogger logger) throws UnableToCompleteException {
  this.logger=logger;
  for (  String internalName : classFileMap.keySet()) {
    String typeName=InternalName.toBinaryName(internalName);
    searchForTypeByBinary(typeName);
  }
  for (  JDeclaredType type : program.getDeclaredTypes()) {
    instantiate(type);
    for (    JField field : type.getFields()) {
      flowInto(field);
    }
    for (    JMethod method : type.getMethods()) {
      flowInto(method);
    }
  }
  mainLoop();
  computeOverrides();
  if (errorsFound) {
    throw new UnableToCompleteException();
  }
}","/** 
 * Special AST construction, useful for tests. Everything is resolved, translated, and unified.
 */
public void buildEverything() throws UnableToCompleteException {
  for (  String internalName : classFileMap.keySet()) {
    String typeName=InternalName.toBinaryName(internalName);
    searchForTypeByBinary(typeName);
  }
  for (  JDeclaredType type : program.getDeclaredTypes()) {
    instantiate(type);
    for (    JField field : type.getFields()) {
      flowInto(field);
    }
    for (    JMethod method : type.getMethods()) {
      flowInto(method);
    }
  }
  mainLoop();
  computeOverrides();
  if (errorsFound) {
    throw new UnableToCompleteException();
  }
}"
81633,"public UnifyAst(JProgram program,JsProgram jsProgram,JJSOptions options,RebindPermutationOracle rpo){
  this.program=program;
  this.jsProgram=jsProgram;
  this.options=options;
  this.rpo=rpo;
  this.classFileMap=rpo.getCompilationState().getClassFileMap();
  this.classFileMapBySource=rpo.getCompilationState().getClassFileMapBySource();
}","public UnifyAst(TreeLogger logger,JProgram program,JsProgram jsProgram,JJSOptions options,RebindPermutationOracle rpo){
  this.logger=logger;
  this.program=program;
  this.jsProgram=jsProgram;
  this.options=options;
  this.rpo=rpo;
  this.classFileMap=rpo.getCompilationState().getClassFileMap();
  this.classFileMapBySource=rpo.getCompilationState().getClassFileMapBySource();
}"
81634,"/** 
 * For normal compilation, only translate and stitch types reachable from entry points. This reduces memory and improves compile speed. Any unreachable elements are pruned.
 */
public void exec(TreeLogger logger) throws UnableToCompleteException {
  this.logger=logger;
  for (  JMethod entryMethod : program.getEntryMethods()) {
    flowInto(entryMethod);
  }
  for (  JClassType type : program.codeGenTypes) {
    for (    JMethod method : type.getMethods()) {
      flowInto(method);
    }
  }
  instantiate(program.getTypeJavaLangString());
  flowInto(program.getIndexedMethod(""String_Node_Str""));
  mapApi(program.getTypeJavaLangString());
  flowInto(methodMap.get(""String_Node_Str""));
  flowInto(program.getIndexedMethod(""String_Node_Str""));
  AutoboxUtils autoboxUtils=new AutoboxUtils(program);
  for (  JMethod method : autoboxUtils.getBoxMethods()) {
    flowInto(method);
  }
  for (  JMethod method : autoboxUtils.getUnboxMethods()) {
    flowInto(method);
  }
  if (options.isRunAsyncEnabled()) {
    flowInto(program.getIndexedMethod(""String_Node_Str""));
    flowInto(program.getIndexedMethod(""String_Node_Str""));
  }
  staticInitialize(program.getTypeClassLiteralHolder());
  for (  JMethod method : program.getTypeJavaLangClass().getMethods()) {
    if (method.isStatic() && method.getName().startsWith(""String_Node_Str"")) {
      flowInto(method);
    }
  }
  mainLoop();
  for (Iterator<JDeclaredType> it=program.getDeclaredTypes().iterator(); it.hasNext(); ) {
    JDeclaredType type=it.next();
    boolean isInstantiated=instantiatedTypes.contains(type);
    for (int i=0; i < type.getFields().size(); ++i) {
      JField field=type.getFields().get(i);
      if (!liveFieldsAndMethods.contains(field) || (!field.isStatic() && !isInstantiated)) {
        type.removeField(i);
        --i;
      }
    }
    JMethod clinit=type.getClinitMethod();
    if (!liveFieldsAndMethods.contains(clinit)) {
      clinit.setBody(new JMethodBody(SourceOrigin.UNKNOWN));
    }
    for (int i=1; i < type.getMethods().size(); ++i) {
      JMethod method=type.getMethods().get(i);
      if (!liveFieldsAndMethods.contains(method) || (!method.isStatic() && !isInstantiated)) {
        type.removeMethod(i);
        --i;
      }
    }
  }
  computeOverrides();
  if (errorsFound) {
    throw new UnableToCompleteException();
  }
}","/** 
 * For normal compilation, only translate and stitch types reachable from entry points. This reduces memory and improves compile speed. Any unreachable elements are pruned.
 */
public void exec() throws UnableToCompleteException {
  for (  JMethod entryMethod : program.getEntryMethods()) {
    flowInto(entryMethod);
  }
  for (  JClassType type : program.codeGenTypes) {
    for (    JMethod method : type.getMethods()) {
      flowInto(method);
    }
  }
  instantiate(program.getTypeJavaLangString());
  flowInto(program.getIndexedMethod(""String_Node_Str""));
  mapApi(program.getTypeJavaLangString());
  flowInto(methodMap.get(""String_Node_Str""));
  flowInto(program.getIndexedMethod(""String_Node_Str""));
  AutoboxUtils autoboxUtils=new AutoboxUtils(program);
  for (  JMethod method : autoboxUtils.getBoxMethods()) {
    flowInto(method);
  }
  for (  JMethod method : autoboxUtils.getUnboxMethods()) {
    flowInto(method);
  }
  if (options.isRunAsyncEnabled()) {
    flowInto(program.getIndexedMethod(""String_Node_Str""));
    flowInto(program.getIndexedMethod(""String_Node_Str""));
  }
  staticInitialize(program.getTypeClassLiteralHolder());
  for (  JMethod method : program.getTypeJavaLangClass().getMethods()) {
    if (method.isStatic() && method.getName().startsWith(""String_Node_Str"")) {
      flowInto(method);
    }
  }
  mainLoop();
  for (Iterator<JDeclaredType> it=program.getDeclaredTypes().iterator(); it.hasNext(); ) {
    JDeclaredType type=it.next();
    boolean isInstantiated=instantiatedTypes.contains(type);
    for (int i=0; i < type.getFields().size(); ++i) {
      JField field=type.getFields().get(i);
      if (!liveFieldsAndMethods.contains(field) || (!field.isStatic() && !isInstantiated)) {
        type.removeField(i);
        --i;
      }
    }
    JMethod clinit=type.getClinitMethod();
    if (!liveFieldsAndMethods.contains(clinit)) {
      clinit.setBody(new JMethodBody(SourceOrigin.UNKNOWN));
    }
    for (int i=1; i < type.getMethods().size(); ++i) {
      JMethod method=type.getMethods().get(i);
      if (!liveFieldsAndMethods.contains(method) || (!method.isStatic() && !isInstantiated)) {
        type.removeMethod(i);
        --i;
      }
    }
  }
  computeOverrides();
  if (errorsFound) {
    throw new UnableToCompleteException();
  }
}"
81635,"private Entry<K,V> implFindEntry(Object key,boolean remove){
  for (Iterator<Entry<K,V>> iter=entrySet().iterator(); iter.hasNext(); ) {
    Entry<K,V> entry=iter.next();
    K k=entry.getKey();
    if (key == null ? k == null : key.equals(k)) {
      if (remove) {
        iter.remove();
      }
      return entry;
    }
  }
  return null;
}","private Entry<K,V> implFindEntry(Object key,boolean remove){
  for (Iterator<Entry<K,V>> iter=entrySet().iterator(); iter.hasNext(); ) {
    Entry<K,V> entry=iter.next();
    K k=entry.getKey();
    if (key == null ? k == null : key.equals(k)) {
      if (remove) {
        entry=new MapEntryImpl<K,V>(entry.getKey(),entry.getValue());
        iter.remove();
      }
      return entry;
    }
  }
  return null;
}"
81636,"/** 
 * Returns <code>true</code> if this type or one of its subtypes is instantiable relative to a known base type.
 */
private boolean checkSubtypes(TreeLogger logger,JClassType originalType,Set<JClassType> instSubtypes,TypePath path,ProblemReport problems){
  JClassType baseType=getBaseType(originalType);
  TreeLogger computationLogger=logger.branch(TreeLogger.DEBUG,""String_Node_Str"");
  List<JClassType> candidates=getPossiblyInstantiableSubtypes(computationLogger,baseType,problems);
  boolean anySubtypes=false;
  TreeLogger verificationLogger=logger.branch(TreeLogger.DEBUG,""String_Node_Str"");
  for (  JClassType candidate : candidates) {
    if (getBaseType(candidate) == baseType && originalType.isRawType() == null) {
      candidate=originalType;
    }
 else {
      candidate=constrainTypeBy(candidate,originalType);
      if (candidate == null) {
        continue;
      }
    }
    if (!isAllowedByFilter(candidate,problems)) {
      continue;
    }
    TypePath subtypePath=TypePaths.createSubtypePath(path,candidate,originalType);
    TypeInfoComputed tic=ensureTypeInfoComputed(candidate,subtypePath);
    if (tic.isDone()) {
      if (tic.isInstantiable()) {
        anySubtypes=true;
        instSubtypes.add(candidate);
      }
      continue;
    }
 else     if (tic.isPendingInstantiable()) {
      anySubtypes=true;
      instSubtypes.add(candidate);
      continue;
    }
    tic.setPendingInstantiable();
    TreeLogger subtypeLogger=verificationLogger.branch(TreeLogger.DEBUG,candidate.getParameterizedQualifiedSourceName());
    boolean instantiable=checkSubtype(subtypeLogger,candidate,originalType,subtypePath,problems);
    anySubtypes|=instantiable;
    tic.setInstantiable(instantiable);
    if (instantiable) {
      subtypeLogger.branch(TreeLogger.DEBUG,""String_Node_Str"");
    }
    if (instantiable) {
      instSubtypes.add(candidate);
    }
  }
  return anySubtypes;
}","/** 
 * Returns <code>true</code> if this type or one of its subtypes is instantiable relative to a known base type.
 */
private boolean checkSubtypes(TreeLogger logger,JClassType originalType,Set<JClassType> instSubtypes,TypePath path,ProblemReport problems){
  JRealClassType baseType=getBaseType(originalType);
  TreeLogger computationLogger=logger.branch(TreeLogger.DEBUG,""String_Node_Str"");
  List<JClassType> candidates=getPossiblyInstantiableSubtypes(computationLogger,baseType,problems);
  boolean anySubtypes=false;
  TreeLogger verificationLogger=logger.branch(TreeLogger.DEBUG,""String_Node_Str"");
  for (  JClassType candidate : candidates) {
    if (getBaseType(candidate) == baseType && originalType.isRawType() == null) {
      candidate=originalType;
    }
 else {
      candidate=constrainTypeBy(candidate,originalType);
      if (candidate == null) {
        continue;
      }
    }
    if (!isAllowedByFilter(candidate,problems)) {
      continue;
    }
    TypePath subtypePath=TypePaths.createSubtypePath(path,candidate,originalType);
    TypeInfoComputed tic=ensureTypeInfoComputed(candidate,subtypePath);
    if (tic.isDone()) {
      if (tic.isInstantiable()) {
        anySubtypes=true;
        instSubtypes.add(candidate);
      }
      continue;
    }
 else     if (tic.isPendingInstantiable()) {
      anySubtypes=true;
      instSubtypes.add(candidate);
      continue;
    }
    tic.setPendingInstantiable();
    TreeLogger subtypeLogger=verificationLogger.branch(TreeLogger.DEBUG,candidate.getParameterizedQualifiedSourceName());
    boolean instantiable=checkSubtype(subtypeLogger,candidate,originalType,subtypePath,problems);
    anySubtypes|=instantiable;
    tic.setInstantiable(instantiable);
    if (instantiable) {
      subtypeLogger.branch(TreeLogger.DEBUG,""String_Node_Str"");
    }
    if (instantiable) {
      instSubtypes.add(candidate);
    }
  }
  return anySubtypes;
}"
81637,"/** 
 * Returns the subtypes of a given base type as parameterized by wildcards.
 */
private List<JClassType> getPossiblyInstantiableSubtypes(TreeLogger logger,JClassType baseType,ProblemReport problems){
  assert(baseType == getBaseType(baseType));
  List<JClassType> possiblyInstantiableTypes=new ArrayList<JClassType>();
  if (baseType == typeOracle.getJavaLangObject()) {
    return possiblyInstantiableTypes;
  }
  List<JClassType> candidates=new ArrayList<JClassType>();
  candidates.add(baseType);
  List<JClassType> subtypes=Arrays.asList(baseType.getSubtypes());
  candidates.addAll(subtypes);
  for (  JClassType subtype : candidates) {
    JClassType subtypeBase=getBaseType(subtype);
    if (maybeInstantiable(logger,subtypeBase,problems)) {
      JGenericType isGeneric=subtype.isGenericType();
      if (isGeneric != null) {
        subtype=isGeneric.asParameterizedByWildcards();
      }
 else {
        assert(subtype instanceof JRealClassType);
      }
      possiblyInstantiableTypes.add(subtype);
    }
  }
  if (possiblyInstantiableTypes.size() == 0) {
    String possibilities[]=new String[candidates.size()];
    for (int i=0; i < possibilities.length; i++) {
      JClassType subtype=candidates.get(i);
      String worstMessage=problems.getWorstMessageForType(subtype);
      if (worstMessage == null) {
        possibilities[i]=""String_Node_Str"" + subtype.getParameterizedQualifiedSourceName() + ""String_Node_Str"";
      }
 else {
        possibilities[i]=""String_Node_Str"" + worstMessage;
      }
    }
    problems.add(baseType,baseType.getParameterizedQualifiedSourceName() + ""String_Node_Str"",Priority.DEFAULT,possibilities);
  }
  return possiblyInstantiableTypes;
}","/** 
 * Returns the subtypes of a given base type as parameterized by wildcards.
 */
private List<JClassType> getPossiblyInstantiableSubtypes(TreeLogger logger,JRealClassType baseType,ProblemReport problems){
  assert(baseType == getBaseType(baseType));
  List<JClassType> possiblyInstantiableTypes=new ArrayList<JClassType>();
  if (baseType == typeOracle.getJavaLangObject()) {
    return possiblyInstantiableTypes;
  }
  List<JClassType> candidates=new ArrayList<JClassType>();
  candidates.add(baseType);
  List<JClassType> subtypes=Arrays.asList(baseType.getSubtypes());
  candidates.addAll(subtypes);
  for (  JClassType subtype : candidates) {
    JClassType subtypeBase=getBaseType(subtype);
    if (maybeInstantiable(logger,subtypeBase,problems)) {
      JGenericType isGeneric=subtype.isGenericType();
      if (isGeneric != null) {
        subtype=isGeneric.asParameterizedByWildcards();
      }
 else {
        assert(subtype instanceof JRealClassType);
      }
      possiblyInstantiableTypes.add(subtype);
    }
  }
  if (possiblyInstantiableTypes.size() == 0) {
    String possibilities[]=new String[candidates.size()];
    for (int i=0; i < possibilities.length; i++) {
      JClassType subtype=candidates.get(i);
      String worstMessage=problems.getWorstMessageForType(subtype);
      if (worstMessage == null) {
        possibilities[i]=""String_Node_Str"" + subtype.getParameterizedQualifiedSourceName() + ""String_Node_Str"";
      }
 else {
        possibilities[i]=""String_Node_Str"" + worstMessage;
      }
    }
    problems.add(baseType,baseType.getParameterizedQualifiedSourceName() + ""String_Node_Str"",Priority.DEFAULT,possibilities);
  }
  return possiblyInstantiableTypes;
}"
81638,"@Override public boolean hasSideEffects(){
  return false;
}","@Override public boolean hasSideEffects(){
  return expr.hasSideEffects();
}"
81639,"@Override protected boolean optimizeMethod(JProgram program,JMethod method){
  MethodCallTightener.exec(program);
  OptimizerStats result=DeadCodeElimination.exec(program,method);
  if (result.didChange()) {
    assertFalse(DeadCodeElimination.exec(program,method).didChange());
  }
  return result.didChange();
}","@Override protected boolean optimizeMethod(JProgram program,JMethod method){
  MethodCallTightener.exec(program);
  if (runMethodInliner) {
    MethodInliner.exec(program);
  }
  OptimizerStats result=DeadCodeElimination.exec(program,method);
  if (result.didChange()) {
    assertFalse(DeadCodeElimination.exec(program,method).didChange());
  }
  return result.didChange();
}"
81640,"@Override public void setUp() throws Exception {
  addSnippetClassDecl(""String_Node_Str"");
  addSnippetClassDecl(""String_Node_Str"");
  addSnippetClassDecl(""String_Node_Str"");
  addSnippetClassDecl(""String_Node_Str"");
  addSnippetClassDecl(""String_Node_Str"");
  addSnippetClassDecl(""String_Node_Str"");
  addSnippetClassDecl(""String_Node_Str"");
  addSnippetClassDecl(""String_Node_Str"");
}","@Override public void setUp() throws Exception {
  addSnippetClassDecl(""String_Node_Str"");
  addSnippetClassDecl(""String_Node_Str"");
  addSnippetClassDecl(""String_Node_Str"");
  addSnippetClassDecl(""String_Node_Str"");
  addSnippetClassDecl(""String_Node_Str"");
  addSnippetClassDecl(""String_Node_Str"");
  addSnippetClassDecl(""String_Node_Str"");
  addSnippetClassDecl(""String_Node_Str"");
  runMethodInliner=false;
}"
81641,"private TypeInfoComputed checkArrayInstantiable(TreeLogger logger,JArrayType array,TypePath path,ProblemReport problems){
}","private TypeInfoComputed checkArrayInstantiable(TreeLogger logger,JArrayType array,TypePath path,ProblemReport problems){
  JType leafType=array.getLeafType();
  JWildcardType leafWild=leafType.isWildcard();
  if (leafWild != null) {
    JArrayType arrayType=getArrayType(typeOracle,array.getRank(),leafWild.getUpperBound());
    return checkArrayInstantiable(logger,arrayType,path,problems);
  }
  TypeInfoComputed tic=ensureTypeInfoComputed(array,path);
  if (tic.isDone() || tic.isPendingInstantiable()) {
    return tic;
  }
  tic.setPendingInstantiable();
  JTypeParameter isLeafTypeParameter=leafType.isTypeParameter();
  if (isLeafTypeParameter != null && !typeParametersInRootTypes.contains(isLeafTypeParameter)) {
    tic.setInstantiableSubtypes(true);
    tic.setInstantiable(false);
    return tic;
  }
  if (!isAllowedByFilter(array,problems)) {
    tic.setInstantiable(false);
    return tic;
  }
  TreeLogger branch=logger.branch(TreeLogger.DEBUG,""String_Node_Str"",null);
  TypeInfoComputed leafTic=computeTypeInstantiability(branch,leafType,TypePaths.createArrayComponentPath(array,path),problems);
  boolean succeeded=leafTic.hasInstantiableSubtypes();
  tic.setInstantiable(succeeded);
  return tic;
}"
81642,"/** 
 * Builds a   {@link SerializableTypeOracle} for a given set of root types.
 * @param logger
 * @return a {@link SerializableTypeOracle} for the specified set of roottypes
 * @throws UnableToCompleteException if there was not at least oneinstantiable type assignable to each of the specified root types
 */
public SerializableTypeOracle build(TreeLogger logger) throws UnableToCompleteException {
  alreadyCheckedObject=false;
  boolean allSucceeded=true;
  for (  Entry<JClassType,TreeLogger> entry : rootTypes.entrySet()) {
    ProblemReport problems=new ProblemReport();
    problems.setContextType(entry.getKey());
    boolean entrySucceeded=computeTypeInstantiability(entry.getValue(),entry.getKey(),TypePaths.createRootPath(entry.getKey()),problems).hasInstantiableSubtypes();
    if (!entrySucceeded) {
      problems.report(logger,TreeLogger.ERROR,TreeLogger.INFO);
    }
 else {
      if (problems.hasFatalProblems()) {
        entrySucceeded=false;
        problems.reportFatalProblems(logger,TreeLogger.ERROR);
      }
      problems.report(logger,TreeLogger.DEBUG,TreeLogger.DEBUG);
    }
    allSucceeded&=entrySucceeded;
  }
  if (!allSucceeded) {
    throw new UnableToCompleteException();
  }
  for (  TypeInfoComputed tic : typeToTypeInfoComputed.values()) {
    assert(!tic.isPendingInstantiable());
  }
  pruneUnreachableTypes();
  logReachableTypes(logger);
  Set<JClassType> possiblyInstantiatedTypes=new TreeSet<JClassType>(JTYPE_COMPARATOR);
  Set<JClassType> fieldSerializableTypes=new TreeSet<JClassType>(JTYPE_COMPARATOR);
  for (  TypeInfoComputed tic : typeToTypeInfoComputed.values()) {
    if (!(tic.getType() instanceof JClassType)) {
      continue;
    }
    JClassType type=(JClassType)tic.getType();
    type=type.getErasedType();
    if (tic.isInstantiable()) {
      assert(!type.isAbstract() || type.isEnum() != null);
      possiblyInstantiatedTypes.add(type);
    }
    if (tic.isFieldSerializable()) {
      assert(type.isInterface() == null);
      fieldSerializableTypes.add(type);
    }
    if (tic.maybeEnhanced() || (enhancedClasses != null && enhancedClasses.contains(type.getQualifiedSourceName()))) {
      type.setEnhanced();
    }
  }
  logSerializableTypes(logger,fieldSerializableTypes);
  return new SerializableTypeOracleImpl(fieldSerializableTypes,possiblyInstantiatedTypes);
}","/** 
 * Builds a   {@link SerializableTypeOracle} for a given set of root types.
 * @param logger
 * @return a {@link SerializableTypeOracle} for the specified set of roottypes
 * @throws UnableToCompleteException if there was not at least oneinstantiable type assignable to each of the specified root types
 */
public SerializableTypeOracle build(TreeLogger logger) throws UnableToCompleteException {
  alreadyCheckedObject=false;
  boolean allSucceeded=true;
  for (  Entry<JClassType,TreeLogger> entry : rootTypes.entrySet()) {
    ProblemReport problems=new ProblemReport();
    problems.setContextType(entry.getKey());
    boolean entrySucceeded=computeTypeInstantiability(entry.getValue(),entry.getKey(),TypePaths.createRootPath(entry.getKey()),problems).hasInstantiableSubtypes();
    if (!entrySucceeded) {
      problems.report(logger,TreeLogger.ERROR,TreeLogger.INFO);
    }
 else {
      maybeReport(logger,problems);
    }
    allSucceeded&=entrySucceeded & !problems.hasFatalProblems();
  }
  if (!allSucceeded) {
    throw new UnableToCompleteException();
  }
  assertNothingPending();
  List<TypeInfoComputed> ticsToCheck=new ArrayList<TypeInfoComputed>();
  ticsToCheck.addAll(typeToTypeInfoComputed.values());
  for (  TypeInfoComputed tic : ticsToCheck) {
    JArrayType type=tic.getType().isArray();
    if (type != null && tic.instantiable) {
      ProblemReport problems=new ProblemReport();
      problems.setContextType(type);
      markArrayTypes(logger,type,tic.getPath(),problems);
      maybeReport(logger,problems);
      allSucceeded&=!problems.hasFatalProblems();
    }
  }
  if (!allSucceeded) {
    throw new UnableToCompleteException();
  }
  assertNothingPending();
  pruneUnreachableTypes();
  logReachableTypes(logger);
  Set<JClassType> possiblyInstantiatedTypes=new TreeSet<JClassType>(JTYPE_COMPARATOR);
  Set<JClassType> fieldSerializableTypes=new TreeSet<JClassType>(JTYPE_COMPARATOR);
  for (  TypeInfoComputed tic : typeToTypeInfoComputed.values()) {
    if (!(tic.getType() instanceof JClassType)) {
      continue;
    }
    JClassType type=(JClassType)tic.getType();
    type=type.getErasedType();
    if (tic.isInstantiable()) {
      assert(!type.isAbstract() || type.isEnum() != null);
      possiblyInstantiatedTypes.add(type);
    }
    if (tic.isFieldSerializable()) {
      assert(type.isInterface() == null);
      fieldSerializableTypes.add(type);
    }
    if (tic.maybeEnhanced() || (enhancedClasses != null && enhancedClasses.contains(type.getQualifiedSourceName()))) {
      type.setEnhanced();
    }
  }
  logSerializableTypes(logger,fieldSerializableTypes);
  return new SerializableTypeOracleImpl(fieldSerializableTypes,possiblyInstantiatedTypes);
}"
81643,"public CfgOptionalThrowNode(CfgNode<?> parent,JMethodCall node){
  super(parent,node);
}","public CfgOptionalThrowNode(CfgNode<?> parent,JExpression node){
  super(parent,node);
}"
81644,"@Override public String toDebugString(){
  return ""String_Node_Str"" + getJNode().getTarget().getName() + ""String_Node_Str"";
}","@Override public String toDebugString(){
  if (getJNode() instanceof JMethodCall) {
    return ""String_Node_Str"" + ((JMethodCall)getJNode()).getTarget().getName() + ""String_Node_Str"";
  }
  return ""String_Node_Str"" + getJNode().toSource() + ""String_Node_Str"";
}"
81645,"@Override public void onBrowserEvent(Event event){
  CellBasedWidgetImpl.get().onBrowserEvent(this,event);
  if (isRefreshing) {
    return;
  }
  super.onBrowserEvent(event);
  String eventType=event.getType();
  if (BrowserEvents.FOCUS.equals(eventType)) {
    isFocused=true;
    onFocus();
  }
 else   if (BrowserEvents.BLUR.equals(eventType)) {
    isFocused=false;
    onBlur();
  }
 else   if (BrowserEvents.KEYDOWN.equals(eventType) && !cellIsEditing) {
    int keyCode=event.getKeyCode();
switch (keyCode) {
case KeyCodes.KEY_DOWN:
case KeyCodes.KEY_UP:
case KeyCodes.KEY_RIGHT:
case KeyCodes.KEY_LEFT:
      handleKeyNavigation(keyCode);
    event.preventDefault();
  return;
case 32:
event.preventDefault();
}
}
final Element target=event.getEventTarget().cast();
ArrayList<Element> chain=new ArrayList<Element>();
collectElementChain(chain,getElement(),target);
final boolean isMouseDown=BrowserEvents.MOUSEDOWN.equals(eventType);
final boolean isClick=BrowserEvents.CLICK.equals(eventType);
final CellTreeNodeView<?> nodeView=findItemByChain(chain,0,rootNode);
if (nodeView != null) {
if (isMouseDown) {
Element showMoreElem=nodeView.getShowMoreElement();
if (nodeView.getImageElement().isOrHasChild(target)) {
nodeView.setOpen(!nodeView.isOpen(),true);
return;
}
 else if (showMoreElem != null && showMoreElem.isOrHasChild(target)) {
nodeView.showMore();
return;
}
}
if (nodeView != rootNode && nodeView.getSelectionElement().isOrHasChild(target)) {
if (isClick) {
boolean isFocusable=CellBasedWidgetImpl.get().isFocusable(target);
isFocused=isFocused || isFocusable;
keyboardSelect(nodeView,!isFocusable);
}
nodeView.fireEventToCell(event);
}
}
}","@Override public void onBrowserEvent(Event event){
  CellBasedWidgetImpl.get().onBrowserEvent(this,event);
  if (isRefreshing) {
    return;
  }
  super.onBrowserEvent(event);
  String eventType=event.getType();
  if (BrowserEvents.FOCUS.equals(eventType)) {
    isFocused=true;
    onFocus();
  }
 else   if (BrowserEvents.BLUR.equals(eventType)) {
    isFocused=false;
    onBlur();
  }
 else   if (BrowserEvents.KEYDOWN.equals(eventType) && !cellIsEditing) {
    int keyCode=event.getKeyCode();
switch (keyCode) {
case KeyCodes.KEY_DOWN:
case KeyCodes.KEY_UP:
case KeyCodes.KEY_RIGHT:
case KeyCodes.KEY_LEFT:
      handleKeyNavigation(keyCode);
    event.preventDefault();
  return;
case 32:
event.preventDefault();
}
}
final Element target=event.getEventTarget().cast();
ArrayList<Element> chain=new ArrayList<Element>();
collectElementChain(chain,getElement(),target);
final boolean isMouseDown=BrowserEvents.MOUSEDOWN.equals(eventType);
final boolean isClick=BrowserEvents.CLICK.equals(eventType);
final CellTreeNodeView<?> nodeView=findItemByChain(chain,0,rootNode);
if (nodeView != null) {
if (isMouseDown) {
Element showMoreElem=nodeView.getShowMoreElement();
if (!nodeView.isRootNode() && nodeView.getImageElement().isOrHasChild(target)) {
nodeView.setOpen(!nodeView.isOpen(),true);
return;
}
 else if (showMoreElem != null && showMoreElem.isOrHasChild(target)) {
nodeView.showMore();
return;
}
}
if (nodeView != rootNode && nodeView.getSelectionElement().isOrHasChild(target)) {
if (isClick) {
boolean isFocusable=CellBasedWidgetImpl.get().isFocusable(target);
isFocused=isFocused || isFocusable;
keyboardSelect(nodeView,!isFocusable);
}
nodeView.fireEventToCell(event);
}
}
}"
81646,"/** 
 * Preview the   {@link NativePreviewEvent}.
 * @param event the {@link NativePreviewEvent}
 */
private void previewNativeEvent(NativePreviewEvent event){
  if (event.isCanceled() || (!previewAllNativeEvents && event.isConsumed())) {
    if (modal) {
      event.cancel();
    }
    return;
  }
  onPreviewNativeEvent(event);
  if (event.isCanceled()) {
    return;
  }
  Event nativeEvent=Event.as(event.getNativeEvent());
  boolean eventTargetsPopupOrPartner=eventTargetsPopup(nativeEvent) || eventTargetsPartner(nativeEvent);
  if (eventTargetsPopupOrPartner) {
    event.consume();
  }
  if (modal) {
    event.cancel();
  }
  int type=nativeEvent.getTypeInt();
switch (type) {
case Event.ONKEYDOWN:
{
      if (!onKeyDownPreview((char)nativeEvent.getKeyCode(),KeyboardListenerCollection.getKeyboardModifiers(nativeEvent))) {
        event.cancel();
      }
      return;
    }
case Event.ONKEYUP:
{
    if (!onKeyUpPreview((char)nativeEvent.getKeyCode(),KeyboardListenerCollection.getKeyboardModifiers(nativeEvent))) {
      event.cancel();
    }
    return;
  }
case Event.ONKEYPRESS:
{
  if (!onKeyPressPreview((char)nativeEvent.getKeyCode(),KeyboardListenerCollection.getKeyboardModifiers(nativeEvent))) {
    event.cancel();
  }
  return;
}
case Event.ONMOUSEDOWN:
if (DOM.getCaptureElement() != null) {
event.consume();
return;
}
if (!eventTargetsPopupOrPartner && autoHide) {
hide(true);
return;
}
break;
case Event.ONMOUSEUP:
case Event.ONMOUSEMOVE:
case Event.ONCLICK:
case Event.ONDBLCLICK:
{
if (DOM.getCaptureElement() != null) {
event.consume();
return;
}
break;
}
case Event.ONFOCUS:
{
Element target=nativeEvent.getTarget();
if (modal && !eventTargetsPopupOrPartner && (target != null)) {
blur(target);
event.cancel();
return;
}
break;
}
}
}","/** 
 * Preview the   {@link NativePreviewEvent}.
 * @param event the {@link NativePreviewEvent}
 */
private void previewNativeEvent(NativePreviewEvent event){
  if (event.isCanceled() || (!previewAllNativeEvents && event.isConsumed())) {
    if (modal) {
      event.cancel();
    }
    return;
  }
  onPreviewNativeEvent(event);
  if (event.isCanceled()) {
    return;
  }
  Event nativeEvent=Event.as(event.getNativeEvent());
  boolean eventTargetsPopupOrPartner=eventTargetsPopup(nativeEvent) || eventTargetsPartner(nativeEvent);
  if (eventTargetsPopupOrPartner) {
    event.consume();
  }
  if (modal) {
    event.cancel();
  }
  int type=nativeEvent.getTypeInt();
switch (type) {
case Event.ONKEYDOWN:
{
      if (!onKeyDownPreview((char)nativeEvent.getKeyCode(),KeyboardListenerCollection.getKeyboardModifiers(nativeEvent))) {
        event.cancel();
      }
      return;
    }
case Event.ONKEYUP:
{
    if (!onKeyUpPreview((char)nativeEvent.getKeyCode(),KeyboardListenerCollection.getKeyboardModifiers(nativeEvent))) {
      event.cancel();
    }
    return;
  }
case Event.ONKEYPRESS:
{
  if (!onKeyPressPreview((char)nativeEvent.getKeyCode(),KeyboardListenerCollection.getKeyboardModifiers(nativeEvent))) {
    event.cancel();
  }
  return;
}
case Event.ONMOUSEDOWN:
case Event.ONTOUCHSTART:
if (DOM.getCaptureElement() != null) {
event.consume();
return;
}
if (!eventTargetsPopupOrPartner && autoHide) {
hide(true);
return;
}
break;
case Event.ONMOUSEUP:
case Event.ONMOUSEMOVE:
case Event.ONCLICK:
case Event.ONDBLCLICK:
case Event.ONTOUCHEND:
{
if (DOM.getCaptureElement() != null) {
event.consume();
return;
}
break;
}
case Event.ONFOCUS:
{
Element target=nativeEvent.getTarget();
if (modal && !eventTargetsPopupOrPartner && (target != null)) {
blur(target);
event.cancel();
return;
}
break;
}
}
}"
81647,"static String extractNameFromToString(String fnToString){
  String toReturn=""String_Node_Str"";
  fnToString=fnToString.trim();
  int index=fnToString.indexOf(""String_Node_Str"");
  if (index != -1) {
    int start=fnToString.startsWith(""String_Node_Str"") ? 8 : 0;
    toReturn=fnToString.substring(start,index).trim();
  }
  return toReturn.length() > 0 ? toReturn : ""String_Node_Str"";
}","static String extractNameFromToString(String fnToString){
  String toReturn=""String_Node_Str"";
  fnToString=fnToString.trim();
  int index=fnToString.indexOf(""String_Node_Str"");
  int start=fnToString.startsWith(""String_Node_Str"") ? 8 : 0;
  if (index == -1) {
    index=fnToString.indexOf('@');
    start=fnToString.startsWith(""String_Node_Str"") ? 9 : 0;
  }
  if (index != -1) {
    toReturn=fnToString.substring(start,index).trim();
  }
  return toReturn.length() > 0 ? toReturn : ""String_Node_Str"";
}"
81648,"private ModuleDef loadModule(TreeLogger logger,Map<String,String> bindingProperties) throws UnableToCompleteException {
  ZipFileClassPathEntry.clearCache();
  ResourceOracleImpl.clearCache();
  ModuleDefLoader.clearModuleCache();
  ResourceLoader resources=ResourceLoaders.forClassLoader(Thread.currentThread());
  resources=ResourceLoaders.forPathAndFallback(sourcePath,resources);
  this.resourceLoader.set(resources);
  ModuleDef moduleDef=ModuleDefLoader.loadFromResources(logger,originalModuleName,resources,true);
  if (IFrameLinker.class.isAssignableFrom(moduleDef.getActivePrimaryLinker())) {
    moduleDef.addLinker(""String_Node_Str"");
  }
  Class<? extends Linker> linker=moduleDef.getActivePrimaryLinker();
  if (!CrossSiteIframeLinker.class.isAssignableFrom(linker)) {
    logger.log(TreeLogger.ERROR,""String_Node_Str"" + linker.getName());
    throw new UnableToCompleteException();
  }
  if (moduleDef.getProperties().find(""String_Node_Str"") == null) {
    throw new RuntimeException(""String_Node_Str"" + moduleDef.getName());
  }
  overrideConfig(moduleDef,""String_Node_Str"",""String_Node_Str"");
  overrideConfig(moduleDef,""String_Node_Str"",""String_Node_Str"");
  overrideConfig(moduleDef,""String_Node_Str"",""String_Node_Str"");
  maybeOverrideConfig(moduleDef,""String_Node_Str"",""String_Node_Str"");
  maybeOverrideConfig(moduleDef,""String_Node_Str"",""String_Node_Str"");
  maybeOverrideConfig(moduleDef,""String_Node_Str"",""String_Node_Str"");
  maybeOverrideConfig(moduleDef,""String_Node_Str"",""String_Node_Str"");
  for (  Map.Entry<String,String> entry : bindingProperties.entrySet()) {
    String propName=entry.getKey();
    String propValue=entry.getValue();
    logger.log(TreeLogger.Type.INFO,""String_Node_Str"" + propName + ""String_Node_Str""+ propValue);
    overrideBinding(moduleDef,propName,propValue);
  }
  overrideBinding(moduleDef,""String_Node_Str"",""String_Node_Str"");
  return moduleDef;
}","private ModuleDef loadModule(TreeLogger logger,Map<String,String> bindingProperties) throws UnableToCompleteException {
  ZipFileClassPathEntry.clearCache();
  ResourceOracleImpl.clearCache();
  ModuleDefLoader.clearModuleCache();
  ResourceLoader resources=ResourceLoaders.forClassLoader(Thread.currentThread());
  resources=ResourceLoaders.forPathAndFallback(sourcePath,resources);
  this.resourceLoader.set(resources);
  ModuleDef moduleDef=ModuleDefLoader.loadFromResources(logger,originalModuleName,resources,true);
  if (IFrameLinker.class.isAssignableFrom(moduleDef.getActivePrimaryLinker())) {
    moduleDef.addLinker(""String_Node_Str"");
  }
  Class<? extends Linker> linker=moduleDef.getActivePrimaryLinker();
  if (!CrossSiteIframeLinker.class.isAssignableFrom(linker)) {
    logger.log(TreeLogger.ERROR,""String_Node_Str"" + linker.getName());
    throw new UnableToCompleteException();
  }
  if (moduleDef.getProperties().find(""String_Node_Str"") == null) {
    throw new RuntimeException(""String_Node_Str"" + moduleDef.getName());
  }
  overrideConfig(moduleDef,""String_Node_Str"",""String_Node_Str"");
  overrideConfig(moduleDef,""String_Node_Str"",""String_Node_Str"");
  overrideConfig(moduleDef,""String_Node_Str"",""String_Node_Str"");
  overrideConfig(moduleDef,""String_Node_Str"",""String_Node_Str"");
  maybeOverrideConfig(moduleDef,""String_Node_Str"",""String_Node_Str"");
  maybeOverrideConfig(moduleDef,""String_Node_Str"",""String_Node_Str"");
  maybeOverrideConfig(moduleDef,""String_Node_Str"",""String_Node_Str"");
  for (  Map.Entry<String,String> entry : bindingProperties.entrySet()) {
    String propName=entry.getKey();
    String propValue=entry.getValue();
    logger.log(TreeLogger.Type.INFO,""String_Node_Str"" + propName + ""String_Node_Str""+ propValue);
    overrideBinding(moduleDef,propName,propValue);
  }
  overrideBinding(moduleDef,""String_Node_Str"",""String_Node_Str"");
  return moduleDef;
}"
81649,"/** 
 * Returns the name of the   {@code ComputeScriptBase} script.  By default,returns  {@code ""com/google/gwt/core/ext/linker/impl/computeScriptBase.js""}.
 * @param context a LinkerContext
 */
protected String getJsComputeScriptBase(LinkerContext context){
  return ""String_Node_Str"";
}","/** 
 * Returns the name of the   {@code ComputeScriptBase} script.  By default,returns  {@code ""com/google/gwt/core/ext/linker/impl/computeScriptBase.js""}.
 * @param context a LinkerContext
 */
protected String getJsComputeScriptBase(LinkerContext context){
  return getStringConfigurationProperty(context,""String_Node_Str"",""String_Node_Str"");
}"
81650,"/** 
 * Verify that the given widget is not statically positioned on the page (relative to the document window), unless the widget is in fact directly attached to the document BODY. Note that the current use of this method is not comprehensive, since we can only verify the offsetParent if both parent (AbsolutePanel) and child widget are both visible and attached to the DOM when this test is executed.
 * @param child the widget whose position and placement should be tested
 */
private void verifyPositionNotStatic(Widget child){
  if (GWT.isProdMode()) {
    return;
  }
  if (child.getElement().getOffsetParent() == null) {
    return;
  }
  if (child.getElement().getOffsetParent() == getElement()) {
    return;
  }
  if (""String_Node_Str"".equals(getElement().getNodeName().toLowerCase())) {
    return;
  }
  String className=getClass().getName();
  GWT.log(""String_Node_Str"" + className + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",new IllegalStateException(className + ""String_Node_Str""));
}","/** 
 * Verify that the given widget is not statically positioned on the page (relative to the document window), unless the widget is in fact directly attached to the document BODY. Note that the current use of this method is not comprehensive, since we can only verify the offsetParent if both parent (AbsolutePanel) and child widget are both visible and attached to the DOM when this test is executed.
 * @param child the widget whose position and placement should be tested
 */
private void verifyPositionNotStatic(Widget child){
  if (GWT.isProdMode()) {
    return;
  }
  if (!isAttached()) {
    return;
  }
  if (child.getElement().getOffsetParent() == null) {
    return;
  }
  if (child.getElement().getOffsetParent() == getElement()) {
    return;
  }
  if (""String_Node_Str"".equals(getElement().getNodeName().toLowerCase())) {
    return;
  }
  String className=getClass().getName();
  GWT.log(""String_Node_Str"" + className + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",new IllegalStateException(className + ""String_Node_Str""));
}"
81651,"/** 
 * Returns a map of properties that differ (via   {@link Object#equals(Object)}) between two AutoBeans. The keys are property names and the values are the value of the property in <code>b</code>. Properties present in <code>a</code> but missing in <code>b</code> will be represented by <code>null</code> values. This implementation will compare AutoBeans of different parameterizations, although the diff produced is likely meaningless. <p> This will work for both simple and wrapper AutoBeans.
 * @param a an {@link AutoBean}
 * @param b an {@link AutoBean}
 * @return a {@link Map} of differing properties
 */
public static Map<String,Object> diff(AutoBean<?> a,AutoBean<?> b){
  if (a.equals(b)) {
    return Collections.emptyMap();
  }
  final Map<String,Object> toReturn=getAllProperties(b);
  a.accept(new AutoBeanVisitor(){
    @Override public boolean visitReferenceProperty(    String propertyName,    AutoBean<?> previousValue,    PropertyContext ctx){
      if (toReturn.containsKey(propertyName)) {
        if (equal(propertyName,previousValue)) {
          toReturn.remove(propertyName);
        }
      }
 else {
        toReturn.put(propertyName,null);
      }
      return false;
    }
    @Override public boolean visitValueProperty(    String propertyName,    Object previousValue,    PropertyContext ctx){
      if (toReturn.containsKey(propertyName)) {
        if (equal(propertyName,previousValue)) {
          toReturn.remove(propertyName);
        }
      }
 else {
        toReturn.put(propertyName,null);
      }
      return false;
    }
    private boolean equal(    String propertyName,    AutoBean<?> previousValue){
      return previousValue == null && toReturn.get(propertyName) == null || previousValue != null && equal(propertyName,previousValue.as());
    }
    private boolean equal(    String propertyName,    Object previousValue){
      Object currentValue=toReturn.get(propertyName);
      return previousValue == null && currentValue == null || previousValue != null && previousValue.equals(currentValue);
    }
  }
);
  return toReturn;
}","/** 
 * Returns a map of properties that differ (via   {@link Object#equals(Object)}) between two AutoBeans. The keys are property names and the values are the value of the property in <code>b</code>. Properties present in <code>a</code> but missing in <code>b</code> will be represented by <code>null</code> values. This implementation will compare AutoBeans of different parameterizations, although the diff produced is likely meaningless. <p> This will work for both simple and wrapper AutoBeans.
 * @param a an {@link AutoBean}
 * @param b an {@link AutoBean}
 * @return a {@link Map} of differing properties
 */
public static Map<String,Object> diff(AutoBean<?> a,AutoBean<?> b){
  if (a == b) {
    return Collections.emptyMap();
  }
  final Map<String,Object> toReturn=getAllProperties(b);
  a.accept(new AutoBeanVisitor(){
    @Override public boolean visitReferenceProperty(    String propertyName,    AutoBean<?> previousValue,    PropertyContext ctx){
      if (toReturn.containsKey(propertyName)) {
        if (equal(propertyName,previousValue)) {
          toReturn.remove(propertyName);
        }
      }
 else {
        toReturn.put(propertyName,null);
      }
      return false;
    }
    @Override public boolean visitValueProperty(    String propertyName,    Object previousValue,    PropertyContext ctx){
      if (toReturn.containsKey(propertyName)) {
        if (equal(propertyName,previousValue)) {
          toReturn.remove(propertyName);
        }
      }
 else {
        toReturn.put(propertyName,null);
      }
      return false;
    }
    private boolean equal(    String propertyName,    AutoBean<?> previousValue){
      return previousValue == null && toReturn.get(propertyName) == null || previousValue != null && equal(propertyName,previousValue.as());
    }
    private boolean equal(    String propertyName,    Object previousValue){
      Object currentValue=toReturn.get(propertyName);
      return previousValue == null && currentValue == null || previousValue != null && previousValue.equals(currentValue);
    }
  }
);
  return toReturn;
}"
81652,"/** 
 * Compute deltas for each entity seen by the context.
 */
private List<OperationMessage> makePayloadOperations(){
  List<OperationMessage> operations=new ArrayList<OperationMessage>();
  for (  AutoBean<? extends BaseProxy> currentView : state.editedProxies.values()) {
    OperationMessage operation=makeOperationMessage(BaseProxyCategory.stableId(currentView),currentView,true).as();
    operations.add(operation);
  }
  return operations;
}","/** 
 * Compute deltas for each entity seen by the context. <p> TODO(t.broyer): reduce payload size by only sending proxies that are directly referenced by invocation arguments or by other proxies. For backwards-compatibility with no-op requests and operation-only requests, only do so when there's at least one invocation (or we can choose to break backwards compatibility for those edge-cases).
 */
private List<OperationMessage> makePayloadOperations(){
}"
81653,"public boolean isChanged(){
  for (  AutoBean<? extends BaseProxy> bean : state.editedProxies.values()) {
    AutoBean<?> previous=bean.getTag(Constants.PARENT_OBJECT);
    if (previous == null) {
      Class<?> proxyClass=stableId(bean).getProxyClass();
      previous=getAutoBeanFactory().create(proxyClass);
    }
    if (!AutoBeanUtils.diff(previous,bean).isEmpty()) {
      return true;
    }
  }
  return false;
}","public boolean isChanged(){
}"
81654,"/** 
 * Sniff all return values and ensure that if the current bean is a mutable EntityProxy, that its return values are mutable.
 */
public static <T>T __intercept(AutoBean<?> bean,T returnValue){
  AbstractRequestContext context=requestContext(bean);
  if (context == null || context.isLocked()) {
    return returnValue;
  }
  if (returnValue instanceof BaseProxy) {
    @SuppressWarnings(""String_Node_Str"") T toReturn=(T)context.editProxy((BaseProxy)returnValue);
    return toReturn;
  }
  if (returnValue instanceof Poser<?>) {
    ((Poser<?>)returnValue).setFrozen(false);
  }
  AutoBean<T> otherBean=AutoBeanUtils.getAutoBean(returnValue);
  if (otherBean != null) {
    otherBean.setTag(REQUEST_CONTEXT_STATE,bean.getTag(REQUEST_CONTEXT_STATE));
  }
  return returnValue;
}","/** 
 * Sniff all return values and ensure that if the current bean is a mutable EntityProxy, that its return values are mutable.
 */
public static <T>T __intercept(AutoBean<?> bean,T returnValue){
  AbstractRequestContext context=requestContext(bean);
  if (context == null || context.isLocked() || context.isDiffing()) {
    return returnValue;
  }
  if (returnValue instanceof BaseProxy) {
    @SuppressWarnings(""String_Node_Str"") T toReturn=(T)context.editProxy((BaseProxy)returnValue);
    return toReturn;
  }
  if (returnValue instanceof Poser<?>) {
    ((Poser<?>)returnValue).setFrozen(false);
  }
  AutoBean<T> otherBean=AutoBeanUtils.getAutoBean(returnValue);
  if (otherBean != null) {
    otherBean.setTag(REQUEST_CONTEXT_STATE,bean.getTag(REQUEST_CONTEXT_STATE));
  }
  return returnValue;
}"
81655,"/** 
 * EntityProxies are equal if they are from the same RequestContext and their stableIds are equal.
 */
public static boolean equals(AutoBean<? extends EntityProxy> bean,Object o){
  if (!(o instanceof EntityProxy)) {
    return false;
  }
  AutoBean<EntityProxy> other=AutoBeanUtils.getAutoBean((EntityProxy)o);
  if (other == null) {
    return false;
  }
  return stableId(bean).equals(stableId(other)) && requestContext(bean) == requestContext(other);
}","/** 
 * EntityProxies are equal if they are from the same RequestContext and their stableIds are equal.
 */
public static boolean equals(AutoBean<? extends EntityProxy> bean,Object o){
  if (!(o instanceof EntityProxy)) {
    return false;
  }
  AutoBean<EntityProxy> other=AutoBeanUtils.getAutoBean((EntityProxy)o);
  if (other == null) {
    return false;
  }
  return stableId(bean).equals(stableId(other)) && nonDiffingRequestContext(bean) == nonDiffingRequestContext(other);
}"
81656,"public static Test suite(){
  GWTTestSuite suite=new GWTTestSuite(""String_Node_Str"");
  suite.addTestSuite(RequestBatcherTest.class);
  suite.addTestSuite(BoxesAndPrimitivesTest.class);
  suite.addTestSuite(ComplexKeysTest.class);
  suite.addTestSuite(EditorTest.class);
  suite.addTestSuite(FanoutReceiverTest.class);
  suite.addTestSuite(FindServiceTest.class);
  suite.addTestSuite(LocatorTest.class);
  suite.addTestSuite(RequestFactoryTest.class);
  suite.addTestSuite(RequestFactoryChainedContextTest.class);
  suite.addTestSuite(RequestFactoryExceptionHandlerTest.class);
  suite.addTestSuite(RequestFactoryExceptionPropagationTest.class);
  suite.addTestSuite(RequestFactoryPolymorphicTest.class);
  suite.addTestSuite(RequestFactoryUnicodeEscapingTest.class);
  suite.addTestSuite(ServiceInheritanceTest.class);
  return suite;
}","public static Test suite(){
  GWTTestSuite suite=new GWTTestSuite(""String_Node_Str"");
  suite.addTestSuite(RequestBatcherTest.class);
  suite.addTestSuite(BoxesAndPrimitivesTest.class);
  suite.addTestSuite(ComplexKeysTest.class);
  suite.addTestSuite(EditorTest.class);
  suite.addTestSuite(FanoutReceiverTest.class);
  suite.addTestSuite(FindServiceTest.class);
  suite.addTestSuite(LocatorTest.class);
  suite.addTestSuite(RequestFactoryTest.class);
  suite.addTestSuite(RequestFactoryChainedContextTest.class);
  suite.addTestSuite(RequestFactoryExceptionHandlerTest.class);
  suite.addTestSuite(RequestFactoryExceptionPropagationTest.class);
  suite.addTestSuite(RequestFactoryPolymorphicTest.class);
  suite.addTestSuite(RequestFactoryUnicodeEscapingTest.class);
  suite.addTestSuite(RequestPayloadTest.class);
  suite.addTestSuite(ServiceInheritanceTest.class);
  return suite;
}"
81657,"public native void selectRemoveOption(SelectElement select,int index);","@Override public native void selectRemoveOption(SelectElement select,int index);"
81658,"public int getScrollLeft(Element elem){
  int left=getScrollLeftImpl(elem);
  if (isRTL(elem)) {
    left=-left;
  }
  return left;
}","@Override public int getScrollLeft(Element elem){
  int left=getScrollLeftImpl(elem);
  if (isRTL(elem)) {
    left=-left;
  }
  return left;
}"
81659,"/** 
 * Get the z-index css property.
 */
public final String getZIndex(){
  return getProperty(STYLE_Z_INDEX);
}","/** 
 * Get the z-index css property.
 */
public final String getZIndex(){
  return DOMImpl.impl.getNumericStyleProperty(this,STYLE_Z_INDEX);
}"
81660,"/** 
 * Gets the value of a named property.
 */
private native String getPropertyImpl(String name);","/** 
 * Gets the value of a named property.
 */
private String getPropertyImpl(String name){
  return DOMImpl.impl.getStyleProperty(this,name);
}"
81661,"/** 
 * Returns true if the given object should be selected by default. Subclasses implement this method in order to define the default selection behavior.
 * @param object an object of this {@link SelectionModel}'s type
 * @return true if the object should be selected by default
 */
public abstract boolean isDefaultSelected(T object);","/** 
 * Returns true if the given item should be selected by default. Subclasses implement this method in order to define the default selection behavior.
 * @param item an object of this {@link SelectionModel}'s type
 * @return true if the item should be selected by default
 */
public abstract boolean isDefaultSelected(T item);"
81662,"/** 
 * Sets an object's selection state. If the object is currently marked as an exception, and the new selected state differs from the previous selected state, the object is removed from the list of exceptions. Otherwise, the object is added to the list of exceptions with the given selected state.
 */
public void setSelected(T object,boolean selected){
  selectionChanges.put(object,selected);
  scheduleSelectionChangeEvent();
}","/** 
 * Sets an item's selection state. If the item is currently marked as an exception, and the new selected state differs from the previous selected state, the object is removed from the list of exceptions. Otherwise, the object is added to the list of exceptions with the given selected state.
 */
@Override public void setSelected(T item,boolean selected){
  selectionChanges.put(getKey(item),new SelectionChange<T>(item,selected));
  scheduleSelectionChangeEvent();
}"
81663,"/** 
 * If the given object is marked as an exception, return the exception value. Otherwise, return the value of isDefaultSelected for the given object.
 */
public boolean isSelected(T object){
  resolveChanges();
  Object key=getKey(object);
  Boolean exception=exceptions.get(key);
  if (exception != null) {
    return exception.booleanValue();
  }
  return isDefaultSelected(object);
}","/** 
 * If the given item is marked as an exception, return the exception value. Otherwise, return the value of isDefaultSelected for the given item.
 */
@Override public boolean isSelected(T item){
  resolveChanges();
  Object key=getKey(item);
  Boolean exception=exceptions.get(key);
  if (exception != null) {
    return exception.booleanValue();
  }
  return isDefaultSelected(item);
}"
81664,"private void resolveChanges(){
  boolean changed=false;
  for (  Map.Entry<T,Boolean> entry : selectionChanges.entrySet()) {
    T object=entry.getKey();
    boolean selected=entry.getValue();
    boolean defaultSelected=isDefaultSelected(object);
    Object key=getKey(object);
    Boolean previousException=exceptions.get(key);
    if (defaultSelected == selected) {
      if (previousException != null) {
        exceptions.remove(key);
        changed=true;
      }
    }
 else {
      if (previousException != Boolean.valueOf(selected)) {
        exceptions.put(key,selected);
        changed=true;
      }
    }
  }
  selectionChanges.clear();
  if (changed) {
    SelectionChangeEvent.fire(this);
  }
}","private void resolveChanges(){
  boolean changed=false;
  for (  Map.Entry<Object,SelectionChange<T>> entry : selectionChanges.entrySet()) {
    Object key=entry.getKey();
    SelectionChange<T> value=entry.getValue();
    T item=value.getItem();
    boolean selected=value.isSelected();
    boolean defaultSelected=isDefaultSelected(item);
    Boolean previousException=exceptions.get(key);
    if (defaultSelected == selected) {
      if (previousException != null) {
        exceptions.remove(key);
        changed=true;
      }
    }
 else {
      if (previousException != Boolean.valueOf(selected)) {
        exceptions.put(key,selected);
        changed=true;
      }
    }
  }
  selectionChanges.clear();
  if (changed) {
    SelectionChangeEvent.fire(this);
  }
}"
81665,"/** 
 * Constructs a DefaultSelectionModel with the given key provider.
 * @param keyProvider an instance of ProvidesKey<T>, or null if the recordobject should act as its own key
 */
public DefaultSelectionModel(ProvidesKey<T> keyProvider){
  super(keyProvider);
}","/** 
 * Constructs a DefaultSelectionModel with the given key provider.
 * @param keyProvider an instance of ProvidesKey<T>, or null if the itemshould act as its own key
 */
public DefaultSelectionModel(ProvidesKey<T> keyProvider){
  super(keyProvider);
}"
81666,"@Override public void setSelected(T object,boolean selected){
  selectionChanges.put(object,selected);
  scheduleSelectionChangeEvent();
}","@Override public void setSelected(T item,boolean selected){
  selectionChanges.put(getKey(item),new SelectionChange<T>(item,selected));
  scheduleSelectionChangeEvent();
}"
81667,"/** 
 * Construct a MultiSelectionModel with the given key provider and implementations of selectedSet and selectionChanges. Different implementations allow for enforcing order on selection.
 * @param keyProvider an instance of ProvidesKey<T>, or null if the recordobject should act as its own key
 * @param selectedSet an instance of Map
 * @param selectionChanges an instance of Map
 */
MultiSelectionModel(ProvidesKey<T> keyProvider,Map<Object,T> selectedSet,Map<T,Boolean> selectionChanges){
  super(keyProvider);
  this.selectedSet=selectedSet;
  this.selectionChanges=selectionChanges;
}","/** 
 * Construct a MultiSelectionModel with the given key provider and implementations of selectedSet and selectionChanges. Different implementations allow for enforcing order on selection.
 * @param keyProvider an instance of ProvidesKey<T>, or null if the itemshould act as its own key
 * @param selectedSet an instance of Map
 * @param selectionChanges an instance of Map
 */
MultiSelectionModel(ProvidesKey<T> keyProvider,Map<Object,T> selectedSet,Map<Object,SelectionChange<T>> selectionChanges){
  super(keyProvider);
  this.selectedSet=selectedSet;
  this.selectionChanges=selectionChanges;
}"
81668,"/** 
 * Deselect all selected values.
 */
public void clear(){
  selectionChanges.clear();
  for (  T value : selectedSet.values()) {
    selectionChanges.put(value,false);
  }
  scheduleSelectionChangeEvent();
}","/** 
 * Deselect all selected values.
 */
public void clear(){
  selectionChanges.clear();
  for (  T value : selectedSet.values()) {
    selectionChanges.put(getKey(value),new SelectionChange<T>(value,false));
  }
  scheduleSelectionChangeEvent();
}"
81669,"@Override public boolean isSelected(T object){
  resolveChanges();
  return selectedSet.containsKey(getKey(object));
}","@Override public boolean isSelected(T item){
  resolveChanges();
  return selectedSet.containsKey(getKey(item));
}"
81670,"void resolveChanges(){
  if (selectionChanges.isEmpty()) {
    return;
  }
  boolean changed=false;
  for (  Map.Entry<T,Boolean> entry : selectionChanges.entrySet()) {
    T object=entry.getKey();
    boolean selected=entry.getValue();
    Object key=getKey(object);
    T oldValue=selectedSet.get(key);
    if (selected) {
      selectedSet.put(key,object);
      Object oldKey=getKey(oldValue);
      if (!changed) {
        changed=(oldKey == null) ? (key != null) : !oldKey.equals(key);
      }
    }
 else {
      if (oldValue != null) {
        selectedSet.remove(key);
        changed=true;
      }
    }
  }
  selectionChanges.clear();
  if (changed) {
    SelectionChangeEvent.fire(this);
  }
}","void resolveChanges(){
  if (selectionChanges.isEmpty()) {
    return;
  }
  boolean changed=false;
  for (  Map.Entry<Object,SelectionChange<T>> entry : selectionChanges.entrySet()) {
    Object key=entry.getKey();
    SelectionChange<T> value=entry.getValue();
    boolean selected=value.isSelected;
    T oldValue=selectedSet.get(key);
    if (selected) {
      selectedSet.put(key,value.item);
      Object oldKey=getKey(oldValue);
      if (!changed) {
        changed=(oldKey == null) ? (key != null) : !oldKey.equals(key);
      }
    }
 else {
      if (oldValue != null) {
        selectedSet.remove(key);
        changed=true;
      }
    }
  }
  selectionChanges.clear();
  if (changed) {
    SelectionChangeEvent.fire(this);
  }
}"
81671,"/** 
 * Get the set of selected items as a copy.
 * @return the set of selected items
 */
public Set<T> getSelectedSet(){
  resolveChanges();
  return new HashSet<T>(selectedSet.values());
}","/** 
 * Get the set of selected items as a copy. If multiple selected items share the same key, only the last selected item is included in the set.
 * @return the set of selected items
 */
public Set<T> getSelectedSet(){
  resolveChanges();
  return new HashSet<T>(selectedSet.values());
}"
81672,"/** 
 * Gets the object that was last selected.
 * @return the last selected object
 */
public T getLastSelectedObject(){
  return lastSelection;
}","/** 
 * Gets the item that was last selected.
 * @return the last selected item
 */
public T getLastSelectedObject(){
  return lastSelection;
}"
81673,"public void setSelected(T object,boolean selected){
  Object key=getKey(object);
  if (selected) {
    lastSelection=object;
    lastKey=key;
  }
 else   if (lastKey != null && lastKey.equals(key)) {
    lastSelection=null;
    lastKey=null;
  }
  scheduleSelectionChangeEvent();
}","@Override public void setSelected(T item,boolean selected){
  Object key=getKey(item);
  if (selected) {
    lastSelection=item;
    lastKey=key;
  }
 else   if (lastKey != null && lastKey.equals(key)) {
    lastSelection=null;
    lastKey=null;
  }
  scheduleSelectionChangeEvent();
}"
81674,"/** 
 * Constructs a NoSelectionModel with the given key provider.
 * @param keyProvider an instance of ProvidesKey<T>, or null if the recordobject should act as its own key
 */
public NoSelectionModel(ProvidesKey<T> keyProvider){
  super(keyProvider);
}","/** 
 * Constructs a NoSelectionModel with the given key provider.
 * @param keyProvider an instance of ProvidesKey<T>, or null if the itemshould act as its own key
 */
public NoSelectionModel(ProvidesKey<T> keyProvider){
  super(keyProvider);
}"
81675,"public boolean isSelected(T object){
  return false;
}","@Override public boolean isSelected(T item){
  return false;
}"
81676,"public List<SimpleValue> getSimpleValues(){
  return Arrays.asList(simpleValueField);
}","public List<SimpleValue> getSimpleValues(){
  return simpleValueField;
}"
81677,"public SimpleValue getSimpleValue(){
  return simpleValueField;
}","public SimpleValue getSimpleValue(){
  return simpleValueField != null && simpleValueField.size() > 0 ? simpleValueField.get(0) : null;
}"
81678,"public void setSimpleValue(SimpleValue simpleValueField){
  this.simpleValueField=simpleValueField;
}","public void setSimpleValue(SimpleValue simpleValueField){
  this.simpleValueField=Collections.singletonList(simpleValueField);
}"
81679,"public void setSimpleValues(List<SimpleValue> simpleValueField){
  this.simpleValueField=simpleValueField.get(0);
}","public void setSimpleValues(List<SimpleValue> simpleValueField){
  this.simpleValueField=simpleValueField;
}"
81680,"/** 
 * Does all of the work necessary to do the dispatch to the appropriate variant of   {@link JavaScriptHost#invokeNativeVoid JavaScriptHost.invokeNative*}. And example output: <pre> return JavaScriptHost.invokeNativeInt( ""@com.google.gwt.sample.hello.client.Hello::echo(I)"", null, new Class[] {int.class,}, new Object[] {x,}); </pre>
 */
@Override public void visitCode(){
  super.visitCode();
  String jsniTarget=getJsniSignature(name,descriptor);
  visitLdcInsn(jsniTarget);
  if (isStatic) {
    visitInsn(Opcodes.ACONST_NULL);
  }
 else {
    loadThis();
    visitMethodInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
  loadClassArray();
  loadArgArray();
  Type returnType=Type.getReturnType(descriptor);
  JavaScriptHostInfo info=JavaScriptHostInfo.get(returnType.getSort());
  invokeStatic(JavaScriptHostInfo.TYPE,info.getMethod());
  if (info.requiresCast()) {
    checkCast(returnType);
  }
  returnValue();
}","/** 
 * Does all of the work necessary to do the dispatch to the appropriate variant of   {@link JavaScriptHost#invokeNativeVoid JavaScriptHost.invokeNative*}. And example output: <pre> return JavaScriptHost.invokeNativeInt( ""@com.google.gwt.sample.hello.client.Hello::echo(I)"", null, new Class[] {int.class,}, new Object[] {x,}); </pre>
 */
@Override public void visitCode(){
  super.visitCode();
  String jsniTarget=getJsniSignature(name,descriptor);
  visitLdcInsn(jsniTarget);
  if (isStatic) {
    visitInsn(Opcodes.ACONST_NULL);
  }
 else {
    loadThis();
  }
  loadClassArray();
  loadArgArray();
  Type returnType=Type.getReturnType(descriptor);
  JavaScriptHostInfo info=JavaScriptHostInfo.get(returnType.getSort());
  invokeStatic(JavaScriptHostInfo.TYPE,info.getMethod());
  if (info.requiresCast()) {
    checkCast(returnType);
  }
  returnValue();
}"
81681,"/** 
 * Does all of the work necessary to do the dispatch to the appropriate variant of   {@link JavaScriptHost#invokeNativeVoid JavaScriptHost.invokeNative*}. And example output: <pre> return JavaScriptHost.invokeNativeInt( ""@com.google.gwt.sample.hello.client.Hello::echo(I)"", null, new Class[] {int.class,}, new Object[] {x,}); </pre>
 */
@Override public void visitCode(){
  super.visitCode();
  String jsniTarget=getJsniSignature(name,descriptor);
  visitLdcInsn(jsniTarget);
  if (isStatic) {
    visitInsn(Opcodes.ACONST_NULL);
  }
 else {
    loadThis();
  }
  loadClassArray();
  loadArgArray();
  Type returnType=Type.getReturnType(descriptor);
  JavaScriptHostInfo info=JavaScriptHostInfo.get(returnType.getSort());
  invokeStatic(JavaScriptHostInfo.TYPE,info.getMethod());
  if (info.requiresCast()) {
    checkCast(returnType);
  }
  returnValue();
}","/** 
 * Does all of the work necessary to do the dispatch to the appropriate variant of   {@link JavaScriptHost#invokeNativeVoid JavaScriptHost.invokeNative*}. And example output: <pre> return JavaScriptHost.invokeNativeInt( ""@com.google.gwt.sample.hello.client.Hello::echo(I)"", null, new Class[] {int.class,}, new Object[] {x,}); </pre>
 */
@Override public void visitCode(){
  super.visitCode();
  String jsniTarget=getJsniSignature(name,descriptor);
  visitLdcInsn(jsniTarget);
  if (isStatic) {
    visitInsn(Opcodes.ACONST_NULL);
  }
 else {
    loadThis();
    visitMethodInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
  loadClassArray();
  loadArgArray();
  Type returnType=Type.getReturnType(descriptor);
  JavaScriptHostInfo info=JavaScriptHostInfo.get(returnType.getSort());
  invokeStatic(JavaScriptHostInfo.TYPE,info.getMethod());
  if (info.requiresCast()) {
    checkCast(returnType);
  }
  returnValue();
}"
81682,"/** 
 * Creates a   {@link CellWidget} with the specified cell, initial value, keyprovider, using the specified element as the wrapper around the cell.
 * @param cell the cell to wrap
 * @param initialValue the initial value of the Cell
 * @param keyProvider the key provider used to get keys from values
 * @param elem the browser element to use
 */
protected CellWidget(Cell<C> cell,C initialValue,ProvidesKey<C> keyProvider,Element elem){
  this.cell=cell;
  this.keyProvider=keyProvider;
  setElement(elem);
  CellBasedWidgetImpl.get().sinkEvents(this,cell.getConsumedEvents());
  setValue(initialValue);
}","/** 
 * Creates a   {@link CellWidget} with the specified cell, initial value, keyprovider, using the specified element as the wrapper around the cell.
 * @param cell the cell to wrap
 * @param initialValue the initial value of the Cell
 * @param keyProvider the key provider used to get keys from values
 * @param elem the browser element to use
 */
protected CellWidget(Cell<C> cell,C initialValue,ProvidesKey<C> keyProvider,Element elem){
  this.cell=cell;
  this.keyProvider=keyProvider;
  setElement(elem);
  CellBasedWidgetImpl.get().sinkEvents(this,cell.getConsumedEvents());
  this.value=initialValue;
  redraw();
}"
81683,"public ProvidesKey<C> getKeyProvider(){
  return keyProvider;
}","@Override public ProvidesKey<C> getKeyProvider(){
  return keyProvider;
}"
81684,"public void update(C value){
  setValue(value,true,false);
}","@Override public void update(C value){
  setValue(value,true,false);
}"
81685,"public LeafValueEditor<C> asEditor(){
  if (editor == null) {
    editor=TakesValueEditor.of(this);
  }
  return editor;
}","@Override public LeafValueEditor<C> asEditor(){
  if (editor == null) {
    editor=TakesValueEditor.of(this);
  }
  return editor;
}"
81686,"public HandlerRegistration addValueChangeHandler(ValueChangeHandler<C> handler){
  return addHandler(handler,ValueChangeEvent.getType());
}","@Override public HandlerRegistration addValueChangeHandler(ValueChangeHandler<C> handler){
  return addHandler(handler,ValueChangeEvent.getType());
}"
81687,"public C getValue(){
  return value;
}","@Override public C getValue(){
  return value;
}"
81688,"public Object getKey(String item){
  return (item == null) ? null : item.substring(0,1);
}","@Override public Object getKey(String item){
  return (item == null) ? null : item.substring(0,1);
}"
81689,"public void onValueChange(ValueChangeEvent<C> event){
  assertFalse(""String_Node_Str"",onValueChangeCalled);
  onValueChangeCalled=true;
  lastValue=event.getValue();
}","@Override public void onValueChange(ValueChangeEvent<C> event){
  assertFalse(""String_Node_Str"",onValueChangeCalled);
  onValueChangeCalled=true;
  lastValue=event.getValue();
}"
81690,"public void testOnBrowserEventWithKeyProvider(){
  ProvidesKey<String> keyProvider=new ProvidesKey<String>(){
    public Object getKey(    String item){
      return (item == null) ? null : item.substring(0,1);
    }
  }
;
  CustomCell cell=new CustomCell();
  final CellWidget<String> cw=new CellWidget<String>(cell,""String_Node_Str"",keyProvider);
  assertEquals(""String_Node_Str"",cw.getValue());
  assertEquals(keyProvider,cw.getKeyProvider());
  Event event=Document.get().createChangeEvent().cast();
  cw.onBrowserEvent(event);
  cell.assertLastEventKey(""String_Node_Str"");
  cell.assertLastEventValue(""String_Node_Str"");
  assertEquals(""String_Node_Str"",cw.getValue());
}","public void testOnBrowserEventWithKeyProvider(){
  ProvidesKey<String> keyProvider=new ProvidesKey<String>(){
    @Override public Object getKey(    String item){
      return (item == null) ? null : item.substring(0,1);
    }
  }
;
  CustomCell cell=new CustomCell();
  final CellWidget<String> cw=new CellWidget<String>(cell,""String_Node_Str"",keyProvider);
  assertEquals(""String_Node_Str"",cw.getValue());
  assertEquals(keyProvider,cw.getKeyProvider());
  Event event=Document.get().createChangeEvent().cast();
  cw.onBrowserEvent(event);
  cell.assertLastEventKey(""String_Node_Str"");
  cell.assertLastEventValue(""String_Node_Str"");
  assertEquals(""String_Node_Str"",cw.getValue());
}"
81691,"public void testSetValue(){
  CustomCell cell=new CustomCell();
  CellWidget<String> cw=new CellWidget<String>(cell,""String_Node_Str"");
  MockValueChangeHandler<String> handler=new MockValueChangeHandler<String>();
  cw.addValueChangeHandler(handler);
  assertEquals(""String_Node_Str"",cw.getValue());
  assertEquals(""String_Node_Str"",cw.getElement().getInnerText());
  cw.setValue(""String_Node_Str"");
  assertEquals(""String_Node_Str"",cw.getValue());
  assertEquals(""String_Node_Str"",cw.getElement().getInnerText());
  handler.assertOnValueChangeNotCalled();
  cw.setValue(""String_Node_Str"",true);
  handler.assertOnValueChangeNotCalled();
  cw.setValue(""String_Node_Str"",true);
  assertEquals(""String_Node_Str"",cw.getValue());
  assertEquals(""String_Node_Str"",cw.getElement().getInnerText());
  handler.assertLastValue(""String_Node_Str"");
  cw.setValue(""String_Node_Str"",true,false);
  assertEquals(""String_Node_Str"",cw.getValue());
  assertEquals(""String_Node_Str"",cw.getElement().getInnerText());
  handler.assertLastValue(""String_Node_Str"");
}","public void testSetValue(){
  CustomCell cell=new CustomCell();
  CellWidget<String> cw=new CellWidget<String>(cell,""String_Node_Str"");
  MockValueChangeHandler<String> handler=new MockValueChangeHandler<String>();
  cw.addValueChangeHandler(handler);
  assertEquals(""String_Node_Str"",cw.getValue());
  assertEquals(""String_Node_Str"",cw.getElement().getInnerText());
  cell.assertLastRenderedValue(""String_Node_Str"");
  cw.setValue(""String_Node_Str"");
  assertEquals(""String_Node_Str"",cw.getValue());
  assertEquals(""String_Node_Str"",cw.getElement().getInnerText());
  cell.assertLastRenderedValue(""String_Node_Str"");
  handler.assertOnValueChangeNotCalled();
  cw.setValue(""String_Node_Str"",true);
  handler.assertOnValueChangeNotCalled();
  cw.setValue(""String_Node_Str"",true);
  assertEquals(""String_Node_Str"",cw.getValue());
  assertEquals(""String_Node_Str"",cw.getElement().getInnerText());
  cell.assertLastRenderedValue(""String_Node_Str"");
  handler.assertLastValue(""String_Node_Str"");
  cw.setValue(""String_Node_Str"",true,false);
  assertEquals(""String_Node_Str"",cw.getValue());
  assertEquals(""String_Node_Str"",cw.getElement().getInnerText());
  handler.assertLastValue(""String_Node_Str"");
}"
81692,"@Override public void render(com.google.gwt.cell.client.Cell.Context context,String value,SafeHtmlBuilder sb){
  sb.appendHtmlConstant(""String_Node_Str"").appendEscaped(value).appendHtmlConstant(""String_Node_Str"");
  sb.appendHtmlConstant(""String_Node_Str"");
}","@Override public void render(com.google.gwt.cell.client.Cell.Context context,String value,SafeHtmlBuilder sb){
  if (value != null) {
    sb.appendHtmlConstant(""String_Node_Str"").appendEscaped(value).appendHtmlConstant(""String_Node_Str"");
    sb.appendHtmlConstant(""String_Node_Str"");
  }
}"
81693,"/** 
 * Test that a cell that defines an HTML elment can be rendered.
 */
public void testRedrawWithMultipleInnerChildren(){
  Cell<String> cell=new AbstractCell<String>(){
    @Override public void render(    com.google.gwt.cell.client.Cell.Context context,    String value,    SafeHtmlBuilder sb){
      sb.appendHtmlConstant(""String_Node_Str"").appendEscaped(value).appendHtmlConstant(""String_Node_Str"");
      sb.appendHtmlConstant(""String_Node_Str"");
    }
  }
;
  CellWidget<String> cw=new CellWidget<String>(cell);
  cw.setValue(""String_Node_Str"",false,false);
  assertEquals(""String_Node_Str"",cw.getElement().getInnerText());
  cw.redraw();
  assertTrue(cw.getElement().getInnerText().contains(""String_Node_Str""));
  Style firstChildStyle=cw.getElement().getFirstChildElement().getStyle();
  assertFalse(firstChildStyle.getHeight().matches(""String_Node_Str""));
  assertFalse(firstChildStyle.getWidth().matches(""String_Node_Str""));
}","/** 
 * Test that a cell that defines an HTML elment can be rendered.
 */
public void testRedrawWithMultipleInnerChildren(){
  Cell<String> cell=new AbstractCell<String>(){
    @Override public void render(    com.google.gwt.cell.client.Cell.Context context,    String value,    SafeHtmlBuilder sb){
      if (value != null) {
        sb.appendHtmlConstant(""String_Node_Str"").appendEscaped(value).appendHtmlConstant(""String_Node_Str"");
        sb.appendHtmlConstant(""String_Node_Str"");
      }
    }
  }
;
  CellWidget<String> cw=new CellWidget<String>(cell);
  cw.setValue(""String_Node_Str"",false,false);
  assertEquals(""String_Node_Str"",cw.getElement().getInnerText());
  cw.redraw();
  assertTrue(cw.getElement().getInnerText().contains(""String_Node_Str""));
  Style firstChildStyle=cw.getElement().getFirstChildElement().getStyle();
  assertFalse(firstChildStyle.getHeight().matches(""String_Node_Str""));
  assertFalse(firstChildStyle.getWidth().matches(""String_Node_Str""));
}"
81694,"public static void recordSourceMap(List<Map<Range,SourceInfo>> sourceInfoMaps,List<SyntheticArtifact> artifacts,int permutationId){
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  SourceMapGenerator generator=SourceMapGeneratorFactory.getInstance(SourceMapFormat.V3);
  OutputStreamWriter out=new OutputStreamWriter(baos);
  int fragment=0;
  if (!sourceInfoMaps.isEmpty()) {
    for (    Map<Range,SourceInfo> sourceMap : sourceInfoMaps) {
      generator.reset();
      Set<Range> rangeSet=sourceMap.keySet();
      Range[] ranges=rangeSet.toArray(new Range[rangeSet.size()]);
      Arrays.sort(ranges,Range.DEPENDENCY_ORDER_COMPARATOR);
      for (      Range r : ranges) {
        SourceInfo si=sourceMap.get(r);
        if (si.getFileName() == null || si.getStartLine() < 0) {
          continue;
        }
        if (r.getStartLine() == 0 || r.getEndLine() == 0) {
          continue;
        }
        generator.addMapping(si.getFileName(),null,new FilePosition(si.getStartLine(),0),new FilePosition(r.getStartLine(),r.getStartColumn()),new FilePosition(r.getEndLine(),r.getEndColumn()));
      }
      try {
        baos.reset();
        generator.appendTo(out,""String_Node_Str"" + fragment);
        out.flush();
        artifacts.add(new SymbolMapsLinker.SourceMapArtifact(permutationId,fragment,baos.toByteArray()));
        fragment++;
      }
 catch (      IOException e) {
        throw new InternalCompilerException(e.toString(),e);
      }
    }
  }
}","public static void recordSourceMap(List<Map<Range,SourceInfo>> sourceInfoMaps,List<SyntheticArtifact> artifacts,int permutationId){
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  SourceMapGenerator generator=SourceMapGeneratorFactory.getInstance(SourceMapFormat.V3);
  OutputStreamWriter out=new OutputStreamWriter(baos);
  int fragment=0;
  if (!sourceInfoMaps.isEmpty()) {
    for (    Map<Range,SourceInfo> sourceMap : sourceInfoMaps) {
      generator.reset();
      Set<Range> rangeSet=sourceMap.keySet();
      Range[] ranges=rangeSet.toArray(new Range[rangeSet.size()]);
      Arrays.sort(ranges,Range.DEPENDENCY_ORDER_COMPARATOR);
      for (      Range r : ranges) {
        SourceInfo si=sourceMap.get(r);
        if (si.getFileName() == null || si.getStartLine() < 0) {
          continue;
        }
        if (r.getStartLine() == 0 || r.getEndLine() == 0) {
          continue;
        }
        generator.addMapping(si.getFileName(),null,new FilePosition(si.getStartLine() - 1,0),new FilePosition(r.getStartLine(),r.getStartColumn()),new FilePosition(r.getEndLine(),r.getEndColumn()));
      }
      try {
        baos.reset();
        generator.appendTo(out,""String_Node_Str"" + fragment);
        out.flush();
        artifacts.add(new SymbolMapsLinker.SourceMapArtifact(permutationId,fragment,baos.toByteArray()));
        fragment++;
      }
 catch (      IOException e) {
        throw new InternalCompilerException(e.toString(),e);
      }
    }
  }
}"
81695,"public static Test suite(){
  GWTTestSuite suite=new GWTTestSuite(""String_Node_Str"");
  suite.addTestSuite(AuthorTest.class);
  return suite;
}","public static Test suite(){
  GWTTestSuite suite=new GWTTestSuite(""String_Node_Str"");
  suite.addTestSuite(AuthorTest.class);
  suite.addTestSuite(BookTest.class);
  return suite;
}"
81696,"private SourceMapping loadSourceMap(String permutationStrongName,int fragmentId){
  SourceMapping toReturn=sourceMaps.get(permutationStrongName + fragmentId);
  if (toReturn == null) {
    try {
      SourceMapConsumerV3 consumer=new SourceMapConsumerV3();
      String sourceMapString=loadStreamAsString(getSourceMapInputStream(permutationStrongName,fragmentId));
      JSONObject obj=new JSONObject(sourceMapString);
      toReturn=SourceMapConsumerFactory.parse(sourceMapString);
      sourceMaps.put(permutationStrongName + fragmentId,toReturn);
    }
 catch (    Exception e) {
    }
  }
  return toReturn;
}","private SourceMapping loadSourceMap(String permutationStrongName,int fragmentId){
  SourceMapping toReturn=sourceMaps.get(permutationStrongName + fragmentId);
  if (toReturn == null) {
    try {
      String sourceMapString=loadStreamAsString(getSourceMapInputStream(permutationStrongName,fragmentId));
      toReturn=SourceMapConsumerFactory.parse(sourceMapString);
      sourceMaps.put(permutationStrongName + fragmentId,toReturn);
    }
 catch (    Exception e) {
    }
  }
  return toReturn;
}"
81697,"/** 
 * Best effort resymbolization of a a single stack trace element.
 * @param ste        the stack trace element to resymbolize
 * @param strongName the GWT permutation strong name
 * @return the best effort resymbolized stack trace element
 */
public StackTraceElement resymbolize(StackTraceElement ste,String strongName){
  String declaringClass=null;
  String methodName=null;
  String filename=null;
  int lineNumber=-1;
  int fragmentId=-1;
  String steFilename=ste.getFileName();
  SymbolMap map=loadSymbolMap(strongName);
  String symbolData=map == null ? null : map.get(ste.getMethodName());
  if (symbolData != null) {
    String[] parts=symbolData.split(""String_Node_Str"");
    if (parts.length == 6) {
      String[] ref=parse(parts[0].substring(0,parts[0].lastIndexOf(')') + 1));
      if (ref != null) {
        declaringClass=ref[0];
        methodName=ref[1];
      }
 else {
        declaringClass=ste.getClassName();
        methodName=ste.getMethodName();
      }
      filename=""String_Node_Str"".equals(parts[3]) ? null : parts[3].substring(parts[3].lastIndexOf('/') + 1);
      lineNumber=ste.getLineNumber();
      if (lineNumber == LINE_NUMBER_UNKNOWN) {
        lineNumber=Integer.parseInt(parts[4]);
      }
      fragmentId=Integer.parseInt(parts[5]);
    }
  }
  int column=1;
  if (steFilename != null) {
    int columnMarkerIndex=steFilename.indexOf(""String_Node_Str"");
    if (columnMarkerIndex != -1) {
      try {
        column=Integer.parseInt(steFilename.substring(columnMarkerIndex + 1));
      }
 catch (      NumberFormatException nfe) {
      }
      steFilename=steFilename.substring(0,columnMarkerIndex);
    }
  }
  if (fragmentId == -1 && steFilename != null) {
    Matcher matcher=fragmentIdPattern.matcher(steFilename);
    if (matcher.matches()) {
      String fragment=matcher.group(1);
      try {
        fragmentId=Integer.parseInt(fragment);
      }
 catch (      Exception e) {
      }
    }
 else     if (steFilename.contains(strongName)) {
      fragmentId=0;
    }
  }
  int jsLineNumber=ste.getLineNumber();
  if (fragmentId != -1) {
    SourceMapping sourceMapping=loadSourceMap(strongName,fragmentId);
    if (sourceMapping != null && ste.getLineNumber() > -1) {
      Mapping.OriginalMapping mappingForLine=sourceMapping.getMappingForLine(jsLineNumber,column);
      if (mappingForLine != null) {
        if (declaringClass == null || declaringClass.equals(ste.getClassName())) {
          declaringClass=mappingForLine.getOriginalFile();
          methodName=mappingForLine.getIdentifier();
        }
        filename=mappingForLine.getOriginalFile();
        lineNumber=mappingForLine.getLineNumber() - 1;
      }
    }
  }
  if (declaringClass != null) {
    return new StackTraceElement(declaringClass,methodName,filename,lineNumber);
  }
  return ste;
}","/** 
 * Best effort resymbolization of a a single stack trace element.
 * @param ste        the stack trace element to resymbolize
 * @param strongName the GWT permutation strong name
 * @return the best effort resymbolized stack trace element
 */
public StackTraceElement resymbolize(StackTraceElement ste,String strongName){
  String declaringClass=null;
  String methodName=null;
  String filename=null;
  int lineNumber=-1;
  int fragmentId=-1;
  String steFilename=ste.getFileName();
  SymbolMap map=loadSymbolMap(strongName);
  String symbolData=map == null ? null : map.get(ste.getMethodName());
  if (symbolData != null) {
    String[] parts=symbolData.split(""String_Node_Str"");
    if (parts.length == 6) {
      String[] ref=parse(parts[0].substring(0,parts[0].lastIndexOf(')') + 1));
      if (ref != null) {
        declaringClass=ref[0];
        methodName=ref[1];
      }
 else {
        declaringClass=ste.getClassName();
        methodName=ste.getMethodName();
      }
      filename=""String_Node_Str"".equals(parts[3]) ? null : parts[3].substring(parts[3].lastIndexOf('/') + 1);
      lineNumber=ste.getLineNumber();
      if (lineNumber == LINE_NUMBER_UNKNOWN) {
        lineNumber=Integer.parseInt(parts[4]);
      }
      fragmentId=Integer.parseInt(parts[5]);
    }
  }
  int column=1;
  if (steFilename != null) {
    int columnMarkerIndex=steFilename.indexOf(""String_Node_Str"");
    if (columnMarkerIndex != -1) {
      try {
        column=Integer.parseInt(steFilename.substring(columnMarkerIndex + 1));
      }
 catch (      NumberFormatException nfe) {
      }
      steFilename=steFilename.substring(0,columnMarkerIndex);
    }
  }
  if (fragmentId == -1 && steFilename != null) {
    Matcher matcher=fragmentIdPattern.matcher(steFilename);
    if (matcher.matches()) {
      String fragment=matcher.group(1);
      try {
        fragmentId=Integer.parseInt(fragment);
      }
 catch (      Exception e) {
      }
    }
 else     if (steFilename.contains(strongName)) {
      fragmentId=0;
    }
  }
  int jsLineNumber=ste.getLineNumber();
  if (fragmentId != -1) {
    SourceMapping sourceMapping=loadSourceMap(strongName,fragmentId);
    if (sourceMapping != null && ste.getLineNumber() > -1) {
      Mapping.OriginalMapping mappingForLine=sourceMapping.getMappingForLine(jsLineNumber,column);
      if (mappingForLine != null) {
        if (declaringClass == null || declaringClass.equals(ste.getClassName())) {
          declaringClass=mappingForLine.getOriginalFile();
          methodName=mappingForLine.getIdentifier();
        }
        filename=mappingForLine.getOriginalFile();
        lineNumber=mappingForLine.getLineNumber();
      }
    }
  }
  if (declaringClass != null) {
    return new StackTraceElement(declaringClass,methodName,filename,lineNumber);
  }
  return ste;
}"
81698,"public ImageResource cellListSelectedBackground(){
  return delegate.cellBrowserSelectedBackground();
}","@Override public ImageResource cellListSelectedBackground(){
  return delegate.cellBrowserSelectedBackground();
}"
81699,"public String getName(){
  return delegate.getName();
}","@Override public String getName(){
  return delegate.getName();
}"
81700,"public void onValueChange(ValueChangeEvent<List<C>> event){
  Object focusedKey=display.focusedKey;
  if (focusedKey != null) {
    boolean stillExists=false;
    List<C> displayValues=event.getValue();
    for (    C displayValue : displayValues) {
      if (focusedKey.equals(display.getValueKey(displayValue))) {
        stillExists=true;
        break;
      }
    }
    if (!stillExists) {
      trimToLevel(display.level);
    }
  }
}","@Override public void onValueChange(ValueChangeEvent<List<C>> event){
  Object focusedKey=display.focusedKey;
  if (focusedKey != null) {
    boolean stillExists=false;
    List<C> displayValues=event.getValue();
    for (    C displayValue : displayValues) {
      if (focusedKey.equals(display.getValueKey(displayValue))) {
        stillExists=true;
        break;
      }
    }
    if (!stillExists) {
      trimToLevel(display.level);
    }
  }
}"
81701,"public int getIndex(){
  assertNotDestroyed();
  TreeNodeImpl<?> parent=getParent();
  return (parent == null) ? 0 : parent.getOpenIndex();
}","@Override public int getIndex(){
  assertNotDestroyed();
  TreeNodeImpl<?> parent=getParent();
  return (parent == null) ? 0 : parent.getOpenIndex();
}"
81702,"public String cellListSelectedItem(){
  return delegate.cellBrowserSelectedItem();
}","@Override public String cellListSelectedItem(){
  return delegate.cellBrowserSelectedItem();
}"
81703,"public String cellListOddItem(){
  return delegate.cellBrowserOddItem();
}","@Override public String cellListOddItem(){
  return delegate.cellBrowserOddItem();
}"
81704,"public boolean isAnimationEnabled(){
  return isAnimationEnabled;
}","@Override public boolean isAnimationEnabled(){
  return isAnimationEnabled;
}"
81705,"public boolean isChildLeaf(int index){
  assertNotDestroyed();
  checkChildBounds(index);
  return isLeaf(getChildValue(index));
}","@Override public boolean isChildLeaf(int index){
  assertNotDestroyed();
  checkChildBounds(index);
  return isLeaf(getChildValue(index));
}"
81706,"public String cellListKeyboardSelectedItem(){
  return delegate.cellBrowserKeyboardSelectedItem();
}","@Override public String cellListKeyboardSelectedItem(){
  return delegate.cellBrowserKeyboardSelectedItem();
}"
81707,"public String getText(){
  return delegate.getText();
}","@Override public String getText(){
  return delegate.getText();
}"
81708,"public boolean isDestroyed(){
  if (nodeInfo != null) {
    TreeNodeImpl<?> parent=getParentImpl();
    if (parent != null && !parent.isDestroyed()) {
      parent.display.getPresenter().flush();
    }
  }
  return nodeInfo == null;
}","@Override public boolean isDestroyed(){
  if (nodeInfo != null) {
    TreeNodeImpl<?> parent=getParentImpl();
    if (parent != null && !parent.isDestroyed()) {
      parent.display.getPresenter().flush();
    }
  }
  return nodeInfo == null;
}"
81709,"/** 
 * Unregister the list view and remove it from the widget.
 */
private void destroy(){
  display.isDestroyed=true;
  valueChangeHandler.removeHandler();
  display.setSelectionModel(null);
  nodeInfo.unsetDataDisplay();
  getSplitLayoutPanel().remove(widget);
  nodeInfo=null;
}","/** 
 * Unregister the list view and remove it from the widget.
 */
private void destroy(){
  display.isDestroyed=true;
  valueChangeHandler.removeHandler();
  display.deselectValue();
  display.setSelectionModel(null);
  nodeInfo.unsetDataDisplay();
  getSplitLayoutPanel().remove(widget);
  nodeInfo=null;
}"
81710,"/** 
 * Create a   {@link HasData} that will display items. The {@link HasData} mustextend  {@link Widget}.
 * @param < C > the item type in the list view
 * @param nodeInfo the node info with child data
 * @param level the level of the list
 * @return the {@link HasData}
 */
private <C>BrowserCellList<C> createDisplay(NodeInfo<C> nodeInfo,int level){
  BrowserCellList<C> display=new BrowserCellList<C>(nodeInfo.getCell(),level,nodeInfo.getProvidesKey());
  display.setValueUpdater(nodeInfo.getValueUpdater());
  KeyboardSelectionPolicy keyboardPolicy=getKeyboardSelectionPolicyForLists();
  display.setKeyboardSelectionPolicy(keyboardPolicy);
  return display;
}","/** 
 * Create a   {@link HasData} that will display items. The {@link HasData} mustextend  {@link Widget}.
 * @param < C > the item type in the list view
 * @param nodeInfo the node info with child data
 * @param level the level of the list
 * @return the {@link HasData}
 */
private <C>BrowserCellList<C> createDisplay(NodeInfo<C> nodeInfo,int level){
  BrowserCellList<C> display=new BrowserCellList<C>(nodeInfo.getCell(),level,nodeInfo.getProvidesKey());
  display.setValueUpdater(nodeInfo.getValueUpdater());
  display.setKeyboardSelectionPolicy(KeyboardSelectionPolicy.ENABLED);
  return display;
}"
81711,"public String cellListWidget(){
  return null;
}","@Override public String cellListWidget(){
  return null;
}"
81712,"public int getChildCount(){
  assertNotDestroyed();
  return display.getPresenter().getVisibleItemCount();
}","@Override public int getChildCount(){
  assertNotDestroyed();
  return display.getPresenter().getVisibleItemCount();
}"
81713,"public void onResize(){
  getSplitLayoutPanel().onResize();
}","@Override public void onResize(){
  getSplitLayoutPanel().onResize();
}"
81714,"public String cellListEvenItem(){
  return delegate.cellBrowserEvenItem();
}","@Override public String cellListEvenItem(){
  return delegate.cellBrowserEvenItem();
}"
81715,"/** 
 * Construct a new   {@link TreeNodeImpl}.
 * @param nodeInfo the nodeInfo for the children nodes
 * @param value the value of the node
 * @param display the display associated with the node
 * @param widget the widget that wraps the display
 */
public TreeNodeImpl(final NodeInfo<C> nodeInfo,Object value,final BrowserCellList<C> display,Widget widget){
  this.display=display;
  this.nodeInfo=nodeInfo;
  this.value=value;
  this.widget=widget;
  valueChangeHandler=display.addValueChangeHandler(new ValueChangeHandler<List<C>>(){
    public void onValueChange(    ValueChangeEvent<List<C>> event){
      Object focusedKey=display.focusedKey;
      if (focusedKey != null) {
        boolean stillExists=false;
        List<C> displayValues=event.getValue();
        for (        C displayValue : displayValues) {
          if (focusedKey.equals(display.getValueKey(displayValue))) {
            stillExists=true;
            break;
          }
        }
        if (!stillExists) {
          trimToLevel(display.level);
        }
      }
    }
  }
);
}","/** 
 * Construct a new   {@link TreeNodeImpl}.
 * @param nodeInfo the nodeInfo for the children nodes
 * @param value the value of the node
 * @param display the display associated with the node
 * @param widget the widget that wraps the display
 */
public TreeNodeImpl(final NodeInfo<C> nodeInfo,Object value,final BrowserCellList<C> display,Widget widget){
  this.display=display;
  this.nodeInfo=nodeInfo;
  this.value=value;
  this.widget=widget;
  valueChangeHandler=display.addValueChangeHandler(new ValueChangeHandler<List<C>>(){
    @Override public void onValueChange(    ValueChangeEvent<List<C>> event){
      Object focusedKey=display.focusedKey;
      if (focusedKey != null) {
        boolean stillExists=false;
        List<C> displayValues=event.getValue();
        for (        C displayValue : displayValues) {
          if (focusedKey.equals(display.getValueKey(displayValue))) {
            stillExists=true;
            break;
          }
        }
        if (!stillExists) {
          trimToLevel(display.level);
        }
      }
    }
  }
);
}"
81716,"public C getChildValue(int index){
  assertNotDestroyed();
  checkChildBounds(index);
  return display.getVisibleItem(index);
}","@Override public C getChildValue(int index){
  assertNotDestroyed();
  checkChildBounds(index);
  return display.getVisibleItem(index);
}"
81717,"public TreeNode setChildOpen(int index,boolean open,boolean fireEvents){
  assertNotDestroyed();
  checkChildBounds(index);
  if (open) {
    display.getPresenter().setKeyboardSelectedRow(index,false,true);
    return updateChildState(display,fireEvents);
  }
 else {
    if (index == display.getKeyboardSelectedRow()) {
      display.getPresenter().clearKeyboardSelectedRowValue();
      updateChildState(display,fireEvents);
    }
    return null;
  }
}","@Override public TreeNode setChildOpen(int index,boolean open,boolean fireEvents){
  assertNotDestroyed();
  checkChildBounds(index);
  if (open) {
    display.getPresenter().setKeyboardSelectedRow(index,false,true);
    return updateChildState(display,fireEvents);
  }
 else {
    if (index == display.getKeyboardSelectedRow()) {
      display.getPresenter().clearKeyboardSelectedRowValue();
      updateChildState(display,fireEvents);
    }
    return null;
  }
}"
81718,"public boolean ensureInjected(){
  return delegate.ensureInjected();
}","@Override public boolean ensureInjected(){
  return delegate.ensureInjected();
}"
81719,"public TreeNodeImpl<?> getParent(){
  assertNotDestroyed();
  return getParentImpl();
}","@Override public TreeNodeImpl<?> getParent(){
  assertNotDestroyed();
  return getParentImpl();
}"
81720,"/** 
 * Update the state of a child node based on the keyboard selection of the specified   {@link BrowserCellList}. This method will open/close child  {@link TreeNode}s as needed.
 * @param cellList the CellList that changed state.
 * @param value the value to open
 * @param open true to open, false to close
 * @param fireEvents true to fireEvents
 * @return the open {@link TreeNode}, or null if not opened
 */
private <C>TreeNode updateChildState(BrowserCellList<C> cellList,boolean fireEvents){
  if (cellList.isDestroyed) {
    return null;
  }
  C newValue=cellList.getPresenter().getKeyboardSelectedRowValue();
  Object newKey=cellList.getValueKey(newValue);
  TreeNode closedNode=null;
  if (cellList.focusedKey != null && cellList.isFocusedOpen && !cellList.focusedKey.equals(newKey)) {
    closedNode=(treeNodes.size() > cellList.level + 1) ? treeNodes.get(cellList.level + 1) : null;
    trimToLevel(cellList.level);
  }
  TreeNode openNode=null;
  boolean justOpenedNode=false;
  if (newKey != null) {
    if (newKey.equals(cellList.focusedKey)) {
      openNode=cellList.isFocusedOpen ? treeNodes.get(cellList.level + 1) : null;
    }
 else {
      cellList.focusedKey=newKey;
      NodeInfo<?> childNodeInfo=isLeaf(newValue) ? null : getNodeInfo(newValue);
      if (childNodeInfo != null) {
        cellList.isFocusedOpen=true;
        justOpenedNode=true;
        openNode=appendTreeNode(childNodeInfo,newValue);
      }
    }
  }
  if (fireEvents) {
    if (closedNode != null) {
      CloseEvent.fire(this,closedNode);
    }
    if (openNode != null && justOpenedNode) {
      OpenEvent.fire(this,openNode);
    }
  }
  return (openNode == null || openNode.isDestroyed()) ? null : openNode;
}","/** 
 * Update the state of a child node based on the keyboard selection of the specified   {@link BrowserCellList}. This method will open/close child  {@link TreeNode}s as needed.
 * @param cellList the CellList that changed state.
 * @param fireEvents true to fireEvents
 * @return the open {@link TreeNode}, or null if not opened
 */
private <C>TreeNode updateChildState(BrowserCellList<C> cellList,boolean fireEvents){
  if (cellList.isDestroyed) {
    return null;
  }
  C newValue=cellList.getPresenter().getKeyboardSelectedRowValue();
  Object newKey=cellList.getValueKey(newValue);
  TreeNode closedNode=null;
  if (cellList.focusedKey != null && cellList.isFocusedOpen && !cellList.focusedKey.equals(newKey)) {
    closedNode=(treeNodes.size() > cellList.level + 1) ? treeNodes.get(cellList.level + 1) : null;
    trimToLevel(cellList.level);
  }
  TreeNode openNode=null;
  boolean justOpenedNode=false;
  if (newKey != null) {
    if (newKey.equals(cellList.focusedKey)) {
      openNode=cellList.isFocusedOpen ? treeNodes.get(cellList.level + 1) : null;
    }
 else {
      if (KeyboardSelectionPolicy.BOUND_TO_SELECTION == getKeyboardSelectionPolicy()) {
        cellList.setSelectedValue(newValue);
      }
      cellList.focusedKey=newKey;
      NodeInfo<?> childNodeInfo=isLeaf(newValue) ? null : getNodeInfo(newValue);
      if (childNodeInfo != null) {
        cellList.isFocusedOpen=true;
        justOpenedNode=true;
        openNode=appendTreeNode(childNodeInfo,newValue);
      }
    }
  }
  if (fireEvents) {
    if (closedNode != null) {
      CloseEvent.fire(this,closedNode);
    }
    if (openNode != null && justOpenedNode) {
      OpenEvent.fire(this,openNode);
    }
  }
  return (openNode == null || openNode.isDestroyed()) ? null : openNode;
}"
81721,"public Object getValue(){
  return value;
}","@Override public Object getValue(){
  return value;
}"
81722,"public boolean isChildOpen(int index){
  assertNotDestroyed();
  checkChildBounds(index);
  return (display.focusedKey == null || !display.isFocusedOpen) ? false : display.focusedKey.equals(display.getValueKey(getChildValue(index)));
}","@Override public boolean isChildOpen(int index){
  assertNotDestroyed();
  checkChildBounds(index);
  return (display.focusedKey == null || !display.isFocusedOpen) ? false : display.focusedKey.equals(display.getValueKey(getChildValue(index)));
}"
81723,"public void setAnimationEnabled(boolean enable){
  this.isAnimationEnabled=enable;
}","@Override public void setAnimationEnabled(boolean enable){
  this.isAnimationEnabled=enable;
}"
81724,"public CellList.Style cellListStyle(){
  return style;
}","@Override public CellList.Style cellListStyle(){
  return style;
}"
81725,"/** 
 * Resolve the pending state and push updates to the view.
 */
private void resolvePendingState(){
  pendingStateCommand=null;
  if (pendingState == null) {
    pendingStateLoop=0;
    return;
  }
  pendingStateLoop++;
  if (pendingStateLoop > LOOP_MAXIMUM) {
    pendingStateLoop=0;
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  }
  if (isResolvingState) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  }
  isResolvingState=true;
  JsArrayInteger modifiedRows=JavaScriptObject.createArray().cast();
  State<T> oldState=state;
  PendingState<T> pending=pendingState;
  int pageStart=pending.getPageStart();
  int pageSize=pending.getPageSize();
  int pageEnd=pageStart + pageSize;
  int rowDataCount=pending.getRowDataSize();
  pending.keyboardSelectedRow=Math.max(0,Math.min(pending.keyboardSelectedRow,rowDataCount - 1));
  if (KeyboardSelectionPolicy.DISABLED == keyboardSelectionPolicy) {
    pending.keyboardSelectedRow=0;
    pending.keyboardSelectedRowValue=null;
  }
 else   if (pending.keyboardSelectedRowChanged) {
    pending.keyboardSelectedRowValue=rowDataCount > 0 ? pending.getRowDataValue(pending.keyboardSelectedRow) : null;
  }
 else   if (pending.keyboardSelectedRowValue != null) {
    int bestMatchIndex=findIndexOfBestMatch(pending,pending.keyboardSelectedRowValue,pending.keyboardSelectedRow);
    if (bestMatchIndex >= 0) {
      pending.keyboardSelectedRow=bestMatchIndex;
      pending.keyboardSelectedRowValue=rowDataCount > 0 ? pending.getRowDataValue(pending.keyboardSelectedRow) : null;
    }
 else {
      pending.keyboardSelectedRow=0;
      pending.keyboardSelectedRowValue=null;
    }
  }
  try {
    if (KeyboardSelectionPolicy.BOUND_TO_SELECTION == keyboardSelectionPolicy && selectionModel != null && pending.viewTouched) {
      T oldValue=oldState.getSelectedValue();
      Object oldKey=getRowValueKey(oldValue);
      T newValue=rowDataCount > 0 ? pending.getRowDataValue(pending.getKeyboardSelectedRow()) : null;
      Object newKey=getRowValueKey(newValue);
      if (newKey != null && !newKey.equals(oldKey)) {
        boolean oldValueWasSelected=(oldValue == null) ? false : selectionModel.isSelected(oldValue);
        boolean newValueWasSelected=(newValue == null) ? false : selectionModel.isSelected(newValue);
        if (oldValueWasSelected) {
          selectionModel.setSelected(oldValue,false);
        }
        pending.selectedValue=newValue;
        if (newValue != null && !newValueWasSelected) {
          selectionModel.setSelected(newValue,true);
        }
      }
    }
  }
 catch (  RuntimeException e) {
    isResolvingState=false;
    throw e;
  }
  boolean keyboardRowChanged=pending.keyboardSelectedRowChanged || (oldState.getKeyboardSelectedRow() != pending.keyboardSelectedRow) || (oldState.getKeyboardSelectedRowValue() == null && pending.keyboardSelectedRowValue != null);
  for (int i=pageStart; i < pageStart + rowDataCount; i++) {
    T rowValue=pending.getRowDataValue(i - pageStart);
    boolean isSelected=(rowValue != null && selectionModel != null && selectionModel.isSelected(rowValue));
    boolean wasSelected=oldState.isRowSelected(i);
    if (isSelected) {
      pending.selectedRows.add(i);
      if (!wasSelected) {
        modifiedRows.push(i);
      }
    }
 else     if (wasSelected) {
      modifiedRows.push(i);
    }
  }
  if (pendingStateCommand != null) {
    isResolvingState=false;
    return;
  }
  pendingStateLoop=0;
  state=pendingState;
  pendingState=null;
  boolean replacedEmptyRange=false;
  for (  Range replacedRange : pending.replacedRanges) {
    int start=replacedRange.getStart();
    int length=replacedRange.getLength();
    if (length == 0) {
      replacedEmptyRange=true;
    }
    for (int i=start; i < start + length; i++) {
      modifiedRows.push(i);
    }
  }
  if (modifiedRows.length() > 0 && keyboardRowChanged) {
    modifiedRows.push(oldState.getKeyboardSelectedRow());
    modifiedRows.push(pending.keyboardSelectedRow);
  }
  List<Range> modifiedRanges=calculateModifiedRanges(modifiedRows,pageStart,pageEnd);
  Range range0=modifiedRanges.size() > 0 ? modifiedRanges.get(0) : null;
  Range range1=modifiedRanges.size() > 1 ? modifiedRanges.get(1) : null;
  int replaceDiff=0;
  for (  Range range : modifiedRanges) {
    replaceDiff+=range.getLength();
  }
  int oldPageStart=oldState.getPageStart();
  int oldPageSize=oldState.getPageSize();
  int oldRowDataCount=oldState.getRowDataSize();
  boolean redrawRequired=pending.redrawRequired;
  if (pageStart != oldPageStart) {
    redrawRequired=true;
  }
 else   if (rowDataCount < oldRowDataCount) {
    redrawRequired=true;
  }
 else   if (range1 == null && range0 != null && range0.getStart() == pageStart && (replaceDiff >= oldRowDataCount || replaceDiff > oldPageSize)) {
    redrawRequired=true;
  }
 else   if (replaceDiff >= REDRAW_MINIMUM && replaceDiff > REDRAW_THRESHOLD * oldRowDataCount) {
    redrawRequired=true;
  }
 else   if (replacedEmptyRange && oldRowDataCount == 0) {
    redrawRequired=true;
  }
  updateLoadingState();
  try {
    if (redrawRequired) {
      SafeHtmlBuilder sb=new SafeHtmlBuilder();
      view.replaceAllChildren(pending.rowData,selectionModel,pending.keyboardStealFocus);
      view.resetFocus();
    }
 else     if (range0 != null) {
{
        int absStart=range0.getStart();
        int relStart=absStart - pageStart;
        SafeHtmlBuilder sb=new SafeHtmlBuilder();
        List<T> replaceValues=pending.rowData.subList(relStart,relStart + range0.getLength());
        view.replaceChildren(replaceValues,relStart,selectionModel,pending.keyboardStealFocus);
      }
      if (range1 != null) {
        int absStart=range1.getStart();
        int relStart=absStart - pageStart;
        SafeHtmlBuilder sb=new SafeHtmlBuilder();
        List<T> replaceValues=pending.rowData.subList(relStart,relStart + range1.getLength());
        view.replaceChildren(replaceValues,relStart,selectionModel,pending.keyboardStealFocus);
      }
      view.resetFocus();
    }
 else     if (keyboardRowChanged) {
      int oldSelectedRow=oldState.getKeyboardSelectedRow();
      if (oldSelectedRow >= 0 && oldSelectedRow < rowDataCount) {
        view.setKeyboardSelected(oldSelectedRow,false,false);
      }
      int newSelectedRow=pending.getKeyboardSelectedRow();
      if (newSelectedRow >= 0 && newSelectedRow < rowDataCount) {
        view.setKeyboardSelected(newSelectedRow,true,pending.keyboardStealFocus);
      }
    }
  }
 catch (  Error e) {
    throw new RuntimeException(e);
  }
 finally {
    isResolvingState=false;
  }
}","/** 
 * Resolve the pending state and push updates to the view.
 */
private void resolvePendingState(){
  pendingStateCommand=null;
  if (pendingState == null) {
    pendingStateLoop=0;
    return;
  }
  pendingStateLoop++;
  if (pendingStateLoop > LOOP_MAXIMUM) {
    pendingStateLoop=0;
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  }
  if (isResolvingState) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  }
  isResolvingState=true;
  JsArrayInteger modifiedRows=JavaScriptObject.createArray().cast();
  State<T> oldState=state;
  PendingState<T> pending=pendingState;
  int pageStart=pending.getPageStart();
  int pageSize=pending.getPageSize();
  int pageEnd=pageStart + pageSize;
  int rowDataCount=pending.getRowDataSize();
  pending.keyboardSelectedRow=Math.max(0,Math.min(pending.keyboardSelectedRow,rowDataCount - 1));
  if (KeyboardSelectionPolicy.DISABLED == keyboardSelectionPolicy) {
    pending.keyboardSelectedRow=0;
    pending.keyboardSelectedRowValue=null;
  }
 else   if (pending.keyboardSelectedRowChanged) {
    pending.keyboardSelectedRowValue=rowDataCount > 0 ? pending.getRowDataValue(pending.keyboardSelectedRow) : null;
  }
 else   if (pending.keyboardSelectedRowValue != null) {
    int bestMatchIndex=findIndexOfBestMatch(pending,pending.keyboardSelectedRowValue,pending.keyboardSelectedRow);
    if (bestMatchIndex >= 0) {
      pending.keyboardSelectedRow=bestMatchIndex;
      pending.keyboardSelectedRowValue=rowDataCount > 0 ? pending.getRowDataValue(pending.keyboardSelectedRow) : null;
    }
 else {
      pending.keyboardSelectedRow=0;
      pending.keyboardSelectedRowValue=null;
    }
  }
  try {
    if (KeyboardSelectionPolicy.BOUND_TO_SELECTION == keyboardSelectionPolicy && selectionModel != null && pending.viewTouched) {
      T oldValue=oldState.getSelectedValue();
      Object oldKey=getRowValueKey(oldValue);
      T newValue=rowDataCount > 0 ? pending.getRowDataValue(pending.getKeyboardSelectedRow()) : null;
      Object newKey=getRowValueKey(newValue);
      if (newKey != null) {
        boolean oldValueWasSelected=(oldValue == null) ? false : selectionModel.isSelected(oldValue);
        boolean newValueWasSelected=(newValue == null) ? false : selectionModel.isSelected(newValue);
        if (!newKey.equals(oldKey)) {
          if (oldValueWasSelected) {
            selectionModel.setSelected(oldValue,false);
          }
          pending.selectedValue=newValue;
          if (newValue != null && !newValueWasSelected) {
            selectionModel.setSelected(newValue,true);
          }
        }
 else         if (!newValueWasSelected) {
          pending.selectedValue=null;
        }
      }
    }
  }
 catch (  RuntimeException e) {
    isResolvingState=false;
    throw e;
  }
  boolean keyboardRowChanged=pending.keyboardSelectedRowChanged || (oldState.getKeyboardSelectedRow() != pending.keyboardSelectedRow) || (oldState.getKeyboardSelectedRowValue() == null && pending.keyboardSelectedRowValue != null);
  for (int i=pageStart; i < pageStart + rowDataCount; i++) {
    T rowValue=pending.getRowDataValue(i - pageStart);
    boolean isSelected=(rowValue != null && selectionModel != null && selectionModel.isSelected(rowValue));
    boolean wasSelected=oldState.isRowSelected(i);
    if (isSelected) {
      pending.selectedRows.add(i);
      if (!wasSelected) {
        modifiedRows.push(i);
      }
    }
 else     if (wasSelected) {
      modifiedRows.push(i);
    }
  }
  if (pendingStateCommand != null) {
    isResolvingState=false;
    return;
  }
  pendingStateLoop=0;
  state=pendingState;
  pendingState=null;
  boolean replacedEmptyRange=false;
  for (  Range replacedRange : pending.replacedRanges) {
    int start=replacedRange.getStart();
    int length=replacedRange.getLength();
    if (length == 0) {
      replacedEmptyRange=true;
    }
    for (int i=start; i < start + length; i++) {
      modifiedRows.push(i);
    }
  }
  if (modifiedRows.length() > 0 && keyboardRowChanged) {
    modifiedRows.push(oldState.getKeyboardSelectedRow());
    modifiedRows.push(pending.keyboardSelectedRow);
  }
  List<Range> modifiedRanges=calculateModifiedRanges(modifiedRows,pageStart,pageEnd);
  Range range0=modifiedRanges.size() > 0 ? modifiedRanges.get(0) : null;
  Range range1=modifiedRanges.size() > 1 ? modifiedRanges.get(1) : null;
  int replaceDiff=0;
  for (  Range range : modifiedRanges) {
    replaceDiff+=range.getLength();
  }
  int oldPageStart=oldState.getPageStart();
  int oldPageSize=oldState.getPageSize();
  int oldRowDataCount=oldState.getRowDataSize();
  boolean redrawRequired=pending.redrawRequired;
  if (pageStart != oldPageStart) {
    redrawRequired=true;
  }
 else   if (rowDataCount < oldRowDataCount) {
    redrawRequired=true;
  }
 else   if (range1 == null && range0 != null && range0.getStart() == pageStart && (replaceDiff >= oldRowDataCount || replaceDiff > oldPageSize)) {
    redrawRequired=true;
  }
 else   if (replaceDiff >= REDRAW_MINIMUM && replaceDiff > REDRAW_THRESHOLD * oldRowDataCount) {
    redrawRequired=true;
  }
 else   if (replacedEmptyRange && oldRowDataCount == 0) {
    redrawRequired=true;
  }
  updateLoadingState();
  try {
    if (redrawRequired) {
      SafeHtmlBuilder sb=new SafeHtmlBuilder();
      view.replaceAllChildren(pending.rowData,selectionModel,pending.keyboardStealFocus);
      view.resetFocus();
    }
 else     if (range0 != null) {
{
        int absStart=range0.getStart();
        int relStart=absStart - pageStart;
        SafeHtmlBuilder sb=new SafeHtmlBuilder();
        List<T> replaceValues=pending.rowData.subList(relStart,relStart + range0.getLength());
        view.replaceChildren(replaceValues,relStart,selectionModel,pending.keyboardStealFocus);
      }
      if (range1 != null) {
        int absStart=range1.getStart();
        int relStart=absStart - pageStart;
        SafeHtmlBuilder sb=new SafeHtmlBuilder();
        List<T> replaceValues=pending.rowData.subList(relStart,relStart + range1.getLength());
        view.replaceChildren(replaceValues,relStart,selectionModel,pending.keyboardStealFocus);
      }
      view.resetFocus();
    }
 else     if (keyboardRowChanged) {
      int oldSelectedRow=oldState.getKeyboardSelectedRow();
      if (oldSelectedRow >= 0 && oldSelectedRow < rowDataCount) {
        view.setKeyboardSelected(oldSelectedRow,false,false);
      }
      int newSelectedRow=pending.getKeyboardSelectedRow();
      if (newSelectedRow >= 0 && newSelectedRow < rowDataCount) {
        view.setKeyboardSelected(newSelectedRow,true,pending.keyboardStealFocus);
      }
    }
  }
 catch (  Error e) {
    throw new RuntimeException(e);
  }
 finally {
    isResolvingState=false;
  }
}"
81726,"/** 
 * Resolve the pending state and push updates to the view.
 * @param modifiedRows the modified rows that need to be updated, or null ifnone. The modified rows may be mutated.
 * @return true if the state changed, false if not
 */
private boolean resolvePendingState(JsArrayInteger modifiedRows){
  pendingStateCommand=null;
  if (isResolvingState) {
    return false;
  }
  isResolvingState=true;
  if (pendingState == null) {
    isResolvingState=false;
    pendingStateLoop=0;
    return false;
  }
  pendingStateLoop++;
  if (pendingStateLoop > LOOP_MAXIMUM) {
    isResolvingState=false;
    pendingStateLoop=0;
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  }
  State<T> oldState=state;
  PendingState<T> pending=pendingState;
  state=pendingState;
  pendingState=null;
  if (modifiedRows == null) {
    modifiedRows=JavaScriptObject.createArray().cast();
  }
  int pageStart=pending.getPageStart();
  int pageSize=pending.getPageSize();
  int pageEnd=pageStart + pageSize;
  int rowDataCount=pending.getRowDataSize();
  pending.keyboardSelectedRow=Math.max(0,Math.min(pending.keyboardSelectedRow,rowDataCount - 1));
  if (KeyboardSelectionPolicy.DISABLED == keyboardSelectionPolicy) {
    pending.keyboardSelectedRow=0;
    pending.keyboardSelectedRowValue=null;
  }
 else   if (pending.keyboardSelectedRowChanged) {
    pending.keyboardSelectedRowValue=rowDataCount > 0 ? pending.getRowDataValue(pending.keyboardSelectedRow) : null;
  }
 else   if (pending.keyboardSelectedRowValue != null) {
    int bestMatchIndex=findIndexOfBestMatch(pending,pending.keyboardSelectedRowValue,pending.keyboardSelectedRow);
    if (bestMatchIndex >= 0) {
      pending.keyboardSelectedRow=bestMatchIndex;
      pending.keyboardSelectedRowValue=rowDataCount > 0 ? pending.getRowDataValue(pending.keyboardSelectedRow) : null;
    }
 else {
      pending.keyboardSelectedRow=0;
      pending.keyboardSelectedRowValue=null;
    }
  }
  try {
    if (KeyboardSelectionPolicy.BOUND_TO_SELECTION == keyboardSelectionPolicy && selectionModel != null && pending.viewTouched) {
      T oldValue=oldState.getSelectedValue();
      Object oldKey=getRowValueKey(oldValue);
      T newValue=rowDataCount > 0 ? pending.getRowDataValue(pending.getKeyboardSelectedRow()) : null;
      Object newKey=getRowValueKey(newValue);
      if (newKey != null) {
        boolean oldValueWasSelected=(oldValue == null) ? false : selectionModel.isSelected(oldValue);
        boolean newValueWasSelected=(newValue == null) ? false : selectionModel.isSelected(newValue);
        if (!newKey.equals(oldKey)) {
          if (oldValueWasSelected) {
            selectionModel.setSelected(oldValue,false);
          }
          pending.selectedValue=newValue;
          if (newValue != null && !newValueWasSelected) {
            selectionModel.setSelected(newValue,true);
          }
        }
 else         if (!newValueWasSelected) {
          pending.selectedValue=null;
        }
      }
      if (pendingState != null) {
        pendingState.selectedValue=pending.selectedValue;
      }
    }
  }
 catch (  RuntimeException e) {
    isResolvingState=false;
    pendingStateLoop=0;
    throw e;
  }
  boolean keyboardRowChanged=pending.keyboardSelectedRowChanged || (oldState.getKeyboardSelectedRow() != pending.keyboardSelectedRow) || (oldState.getKeyboardSelectedRowValue() == null && pending.keyboardSelectedRowValue != null);
  try {
    for (int i=pageStart; i < pageStart + rowDataCount; i++) {
      T rowValue=pending.getRowDataValue(i - pageStart);
      boolean isSelected=(rowValue != null && selectionModel != null && selectionModel.isSelected(rowValue));
      boolean wasSelected=oldState.isRowSelected(i);
      if (isSelected) {
        pending.selectedRows.add(i);
        if (pendingState != null) {
          pendingState.selectedRows.add(i);
        }
        if (!wasSelected) {
          modifiedRows.push(i);
        }
      }
 else       if (wasSelected) {
        modifiedRows.push(i);
      }
    }
  }
 catch (  RuntimeException e) {
    isResolvingState=false;
    pendingStateLoop=0;
    throw e;
  }
  if (pendingState != null) {
    isResolvingState=false;
    if (resolvePendingState(modifiedRows)) {
      return true;
    }
  }
  boolean replacedEmptyRange=false;
  for (  Range replacedRange : pending.replacedRanges) {
    int start=replacedRange.getStart();
    int length=replacedRange.getLength();
    if (length == 0) {
      replacedEmptyRange=true;
    }
    for (int i=start; i < start + length; i++) {
      modifiedRows.push(i);
    }
  }
  if (modifiedRows.length() > 0 && keyboardRowChanged) {
    modifiedRows.push(oldState.getKeyboardSelectedRow());
    modifiedRows.push(pending.keyboardSelectedRow);
  }
  List<Range> modifiedRanges=calculateModifiedRanges(modifiedRows,pageStart,pageEnd);
  Range range0=modifiedRanges.size() > 0 ? modifiedRanges.get(0) : null;
  Range range1=modifiedRanges.size() > 1 ? modifiedRanges.get(1) : null;
  int replaceDiff=0;
  for (  Range range : modifiedRanges) {
    replaceDiff+=range.getLength();
  }
  int oldPageStart=oldState.getPageStart();
  int oldPageSize=oldState.getPageSize();
  int oldRowDataCount=oldState.getRowDataSize();
  boolean redrawRequired=pending.redrawRequired;
  if (pageStart != oldPageStart) {
    redrawRequired=true;
  }
 else   if (rowDataCount < oldRowDataCount) {
    redrawRequired=true;
  }
 else   if (range1 == null && range0 != null && range0.getStart() == pageStart && (replaceDiff >= oldRowDataCount || replaceDiff > oldPageSize)) {
    redrawRequired=true;
  }
 else   if (replaceDiff >= REDRAW_MINIMUM && replaceDiff > REDRAW_THRESHOLD * oldRowDataCount) {
    redrawRequired=true;
  }
 else   if (replacedEmptyRange && oldRowDataCount == 0) {
    redrawRequired=true;
  }
  updateLoadingState();
  try {
    if (redrawRequired) {
      SafeHtmlBuilder sb=new SafeHtmlBuilder();
      view.replaceAllChildren(pending.rowData,selectionModel,pending.keyboardStealFocus);
      view.resetFocus();
    }
 else     if (range0 != null) {
{
        int absStart=range0.getStart();
        int relStart=absStart - pageStart;
        SafeHtmlBuilder sb=new SafeHtmlBuilder();
        List<T> replaceValues=pending.rowData.subList(relStart,relStart + range0.getLength());
        view.replaceChildren(replaceValues,relStart,selectionModel,pending.keyboardStealFocus);
      }
      if (range1 != null) {
        int absStart=range1.getStart();
        int relStart=absStart - pageStart;
        SafeHtmlBuilder sb=new SafeHtmlBuilder();
        List<T> replaceValues=pending.rowData.subList(relStart,relStart + range1.getLength());
        view.replaceChildren(replaceValues,relStart,selectionModel,pending.keyboardStealFocus);
      }
      view.resetFocus();
    }
 else     if (keyboardRowChanged) {
      int oldSelectedRow=oldState.getKeyboardSelectedRow();
      if (oldSelectedRow >= 0 && oldSelectedRow < rowDataCount) {
        view.setKeyboardSelected(oldSelectedRow,false,false);
      }
      int newSelectedRow=pending.getKeyboardSelectedRow();
      if (newSelectedRow >= 0 && newSelectedRow < rowDataCount) {
        view.setKeyboardSelected(newSelectedRow,true,pending.keyboardStealFocus);
      }
    }
  }
 catch (  Error e) {
    throw new RuntimeException(e);
  }
 finally {
    isResolvingState=false;
  }
  resolvePendingState(null);
  return true;
}","/** 
 * Resolve the pending state and push updates to the view.
 * @param modifiedRows the modified rows that need to be updated, or null ifnone. The modified rows may be mutated.
 * @return true if the state changed, false if not
 */
private boolean resolvePendingState(JsArrayInteger modifiedRows){
  pendingStateCommand=null;
  if (isResolvingState) {
    return false;
  }
  isResolvingState=true;
  if (pendingState == null) {
    isResolvingState=false;
    pendingStateLoop=0;
    return false;
  }
  pendingStateLoop++;
  if (pendingStateLoop > LOOP_MAXIMUM) {
    isResolvingState=false;
    pendingStateLoop=0;
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  }
  State<T> oldState=state;
  PendingState<T> pending=pendingState;
  state=pendingState;
  pendingState=null;
  if (modifiedRows == null) {
    modifiedRows=JavaScriptObject.createArray().cast();
  }
  int pageStart=pending.getPageStart();
  int pageSize=pending.getPageSize();
  int pageEnd=pageStart + pageSize;
  int rowDataCount=pending.getRowDataSize();
  pending.keyboardSelectedRow=Math.max(0,Math.min(pending.keyboardSelectedRow,rowDataCount - 1));
  if (KeyboardSelectionPolicy.DISABLED == keyboardSelectionPolicy) {
    pending.keyboardSelectedRow=0;
    pending.keyboardSelectedRowValue=null;
  }
 else   if (pending.keyboardSelectedRowChanged) {
    pending.keyboardSelectedRowValue=rowDataCount > 0 ? pending.getRowDataValue(pending.keyboardSelectedRow) : null;
  }
 else   if (pending.keyboardSelectedRowValue != null) {
    int bestMatchIndex=findIndexOfBestMatch(pending,pending.keyboardSelectedRowValue,pending.keyboardSelectedRow);
    if (bestMatchIndex >= 0) {
      pending.keyboardSelectedRow=bestMatchIndex;
      pending.keyboardSelectedRowValue=rowDataCount > 0 ? pending.getRowDataValue(pending.keyboardSelectedRow) : null;
    }
 else {
      pending.keyboardSelectedRow=0;
      pending.keyboardSelectedRowValue=null;
    }
  }
  try {
    if (KeyboardSelectionPolicy.BOUND_TO_SELECTION == keyboardSelectionPolicy && selectionModel != null && pending.viewTouched) {
      T oldValue=oldState.getSelectedValue();
      Object oldKey=getRowValueKey(oldValue);
      T newValue=rowDataCount > 0 ? pending.getRowDataValue(pending.getKeyboardSelectedRow()) : null;
      Object newKey=getRowValueKey(newValue);
      if (newKey != null) {
        boolean oldValueWasSelected=(oldValue == null) ? false : selectionModel.isSelected(oldValue);
        boolean newValueWasSelected=(newValue == null) ? false : selectionModel.isSelected(newValue);
        if (!newKey.equals(oldKey)) {
          if (oldValueWasSelected) {
            selectionModel.setSelected(oldValue,false);
          }
          pending.selectedValue=newValue;
          if (newValue != null && !newValueWasSelected) {
            selectionModel.setSelected(newValue,true);
          }
        }
 else         if (!newValueWasSelected) {
          pending.selectedValue=null;
        }
      }
      if (pendingState != null) {
        pendingState.selectedValue=pending.selectedValue;
      }
    }
  }
 catch (  RuntimeException e) {
    isResolvingState=false;
    pendingStateLoop=0;
    throw e;
  }
  boolean keyboardRowChanged=pending.keyboardSelectedRowChanged || (oldState.getKeyboardSelectedRow() != pending.keyboardSelectedRow) || (oldState.getKeyboardSelectedRowValue() == null && pending.keyboardSelectedRowValue != null);
  try {
    for (int i=pageStart; i < pageStart + rowDataCount; i++) {
      T rowValue=pending.getRowDataValue(i - pageStart);
      boolean isSelected=(rowValue != null && selectionModel != null && selectionModel.isSelected(rowValue));
      boolean wasSelected=oldState.isRowSelected(i);
      if (isSelected) {
        pending.selectedRows.add(i);
        if (pendingState != null) {
          pendingState.selectedRows.add(i);
        }
        if (!wasSelected) {
          modifiedRows.push(i);
        }
      }
 else       if (wasSelected) {
        modifiedRows.push(i);
      }
    }
  }
 catch (  RuntimeException e) {
    isResolvingState=false;
    pendingStateLoop=0;
    throw e;
  }
  boolean replacedEmptyRange=false;
  for (  Range replacedRange : pending.replacedRanges) {
    int start=replacedRange.getStart();
    int length=replacedRange.getLength();
    if (length == 0) {
      replacedEmptyRange=true;
    }
    for (int i=start; i < start + length; i++) {
      modifiedRows.push(i);
    }
  }
  if (modifiedRows.length() > 0 && keyboardRowChanged) {
    modifiedRows.push(oldState.getKeyboardSelectedRow());
    modifiedRows.push(pending.keyboardSelectedRow);
  }
  if (pendingState != null) {
    isResolvingState=false;
    modifiedRows.push(oldState.getKeyboardSelectedRow());
    modifiedRows.push(pending.keyboardSelectedRow);
    if (resolvePendingState(modifiedRows)) {
      return true;
    }
  }
  List<Range> modifiedRanges=calculateModifiedRanges(modifiedRows,pageStart,pageEnd);
  Range range0=modifiedRanges.size() > 0 ? modifiedRanges.get(0) : null;
  Range range1=modifiedRanges.size() > 1 ? modifiedRanges.get(1) : null;
  int replaceDiff=0;
  for (  Range range : modifiedRanges) {
    replaceDiff+=range.getLength();
  }
  int oldPageStart=oldState.getPageStart();
  int oldPageSize=oldState.getPageSize();
  int oldRowDataCount=oldState.getRowDataSize();
  boolean redrawRequired=pending.redrawRequired;
  if (pageStart != oldPageStart) {
    redrawRequired=true;
  }
 else   if (rowDataCount < oldRowDataCount) {
    redrawRequired=true;
  }
 else   if (range1 == null && range0 != null && range0.getStart() == pageStart && (replaceDiff >= oldRowDataCount || replaceDiff > oldPageSize)) {
    redrawRequired=true;
  }
 else   if (replaceDiff >= REDRAW_MINIMUM && replaceDiff > REDRAW_THRESHOLD * oldRowDataCount) {
    redrawRequired=true;
  }
 else   if (replacedEmptyRange && oldRowDataCount == 0) {
    redrawRequired=true;
  }
  updateLoadingState();
  try {
    if (redrawRequired) {
      SafeHtmlBuilder sb=new SafeHtmlBuilder();
      view.replaceAllChildren(pending.rowData,selectionModel,pending.keyboardStealFocus);
      view.resetFocus();
    }
 else     if (range0 != null) {
{
        int absStart=range0.getStart();
        int relStart=absStart - pageStart;
        SafeHtmlBuilder sb=new SafeHtmlBuilder();
        List<T> replaceValues=pending.rowData.subList(relStart,relStart + range0.getLength());
        view.replaceChildren(replaceValues,relStart,selectionModel,pending.keyboardStealFocus);
      }
      if (range1 != null) {
        int absStart=range1.getStart();
        int relStart=absStart - pageStart;
        SafeHtmlBuilder sb=new SafeHtmlBuilder();
        List<T> replaceValues=pending.rowData.subList(relStart,relStart + range1.getLength());
        view.replaceChildren(replaceValues,relStart,selectionModel,pending.keyboardStealFocus);
      }
      view.resetFocus();
    }
 else     if (keyboardRowChanged) {
      int oldSelectedRow=oldState.getKeyboardSelectedRow();
      if (oldSelectedRow >= 0 && oldSelectedRow < rowDataCount) {
        view.setKeyboardSelected(oldSelectedRow,false,false);
      }
      int newSelectedRow=pending.getKeyboardSelectedRow();
      if (newSelectedRow >= 0 && newSelectedRow < rowDataCount) {
        view.setKeyboardSelected(newSelectedRow,true,pending.keyboardStealFocus);
      }
    }
  }
 catch (  Error e) {
    throw new RuntimeException(e);
  }
 finally {
    isResolvingState=false;
  }
  resolvePendingState(null);
  return true;
}"
81727,"public void onSuggestionsReady(Request request,Response response){
  display.setMoreSuggestions(response.hasMoreSuggestions(),response.getMoreSuggestionsCount());
  display.showSuggestions(SuggestBox.this,response.getSuggestions(),oracle.isDisplayStringHTML(),isAutoSelectEnabled(),suggestionCallback);
}","public void onSuggestionsReady(Request request,Response response){
  if (!isEnabled()) {
    return;
  }
  display.setMoreSuggestions(response.hasMoreSuggestions(),response.getMoreSuggestionsCount());
  display.showSuggestions(SuggestBox.this,response.getSuggestions(),oracle.isDisplayStringHTML(),isAutoSelectEnabled(),suggestionCallback);
}"
81728,"/** 
 * Builds a CSV file mapping obfuscated CSS class names to their qualified source name and outputs it as a private build artifact.
 */
protected void outputCssMapArtifact(TreeLogger logger,ResourceContext context,Map<JMethod,String> actualReplacements,String outputFileName){
  String mappingFileName=""String_Node_Str"" + outputFileName + ""String_Node_Str"";
  OutputStream os=null;
  try {
    os=context.getGeneratorContext().tryCreateResource(logger,mappingFileName);
  }
 catch (  UnableToCompleteException e) {
    logger.log(TreeLogger.ERROR,""String_Node_Str"" + mappingFileName);
    return;
  }
  if (os == null) {
    logger.log(TreeLogger.ERROR,""String_Node_Str"" + mappingFileName);
    return;
  }
  BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(os));
  try {
    for (    Map.Entry<JMethod,String> replacement : actualReplacements.entrySet()) {
      String qualifiedName=replacement.getKey().getEnclosingType().getQualifiedSourceName();
      String baseName=replacement.getKey().getName();
      writer.write(qualifiedName.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + baseName);
      writer.write(""String_Node_Str"");
      writer.write(replacement.getValue());
      writer.newLine();
    }
    writer.flush();
    writer.close();
  }
 catch (  IOException e) {
    logger.log(TreeLogger.ERROR,""String_Node_Str"" + mappingFileName);
  }
  try {
    context.getGeneratorContext().commitResource(logger,os).setVisibility(Visibility.Private);
  }
 catch (  UnableToCompleteException e) {
    logger.log(TreeLogger.ERROR,""String_Node_Str"" + mappingFileName);
  }
}","/** 
 * Builds a CSV file mapping obfuscated CSS class names to their qualified source name and outputs it as a private build artifact.
 */
protected void outputCssMapArtifact(TreeLogger logger,ResourceContext context,JMethod method,Map<JMethod,String> actualReplacements){
  JClassType bundleType=method.getEnclosingType();
  String qualifiedMethodName=bundleType.getQualifiedSourceName() + ""String_Node_Str"" + method.getName();
  String mappingFileName=""String_Node_Str"" + qualifiedMethodName + ""String_Node_Str"";
  OutputStream os=null;
  try {
    os=context.getGeneratorContext().tryCreateResource(logger,mappingFileName);
  }
 catch (  UnableToCompleteException e) {
    logger.log(TreeLogger.WARN,""String_Node_Str"" + mappingFileName);
    return;
  }
  if (os == null) {
    logger.log(TreeLogger.WARN,""String_Node_Str"" + mappingFileName);
    return;
  }
  BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(os));
  try {
    for (    Map.Entry<JMethod,String> replacement : actualReplacements.entrySet()) {
      String qualifiedName=replacement.getKey().getEnclosingType().getQualifiedSourceName();
      String baseName=replacement.getKey().getName();
      writer.write(qualifiedName.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + baseName);
      writer.write(""String_Node_Str"");
      writer.write(replacement.getValue());
      writer.newLine();
    }
    writer.flush();
    writer.close();
  }
 catch (  IOException e) {
    logger.log(TreeLogger.WARN,""String_Node_Str"" + mappingFileName);
  }
  try {
    context.getGeneratorContext().commitResource(logger,os).setVisibility(Visibility.Private);
  }
 catch (  UnableToCompleteException e) {
    logger.log(TreeLogger.WARN,""String_Node_Str"" + mappingFileName);
  }
}"
81729,"public void testOutputCssMapArtifactReturnNullOutputString() throws UnableToCompleteException {
  UnitTestTreeLogger.Builder builder=new UnitTestTreeLogger.Builder();
  builder.expectError(""String_Node_Str"",null);
  UnitTestTreeLogger testLogger=builder.createLogger();
  ResourceContext mockResourceContext=EasyMock.createMock(ResourceContext.class);
  Map<JMethod,String> testMap=new HashMap<JMethod,String>();
  OutputStream mockOutputStream=EasyMock.createMock(OutputStream.class);
  GeneratorContext mockGeneratorContext=EasyMock.createMock(GeneratorContext.class);
  GeneratedResource mockGeneratedResource=EasyMock.createMock(GeneratedResource.class);
  EasyMock.expect(mockResourceContext.getGeneratorContext()).andReturn(mockGeneratorContext);
  EasyMock.expect(mockGeneratorContext.tryCreateResource(testLogger,""String_Node_Str"")).andReturn(null);
  EasyMock.replay(mockResourceContext);
  EasyMock.replay(mockGeneratorContext);
  CssResourceGenerator crg=new CssResourceGenerator();
  crg.outputCssMapArtifact(testLogger,mockResourceContext,testMap,""String_Node_Str"");
  testLogger.assertCorrectLogEntries();
  EasyMock.verify(mockResourceContext);
  EasyMock.verify(mockGeneratorContext);
}","public void testOutputCssMapArtifactReturnNullOutputString() throws UnableToCompleteException {
  UnitTestTreeLogger.Builder builder=new UnitTestTreeLogger.Builder();
  builder.expectWarn(""String_Node_Str"",null);
  UnitTestTreeLogger testLogger=builder.createLogger();
  ResourceContext mockResourceContext=EasyMock.createMock(ResourceContext.class);
  Map<JMethod,String> testMap=new HashMap<JMethod,String>();
  OutputStream mockOutputStream=EasyMock.createMock(OutputStream.class);
  GeneratorContext mockGeneratorContext=EasyMock.createMock(GeneratorContext.class);
  GeneratedResource mockGeneratedResource=EasyMock.createMock(GeneratedResource.class);
  EasyMock.expect(mockResourceContext.getGeneratorContext()).andReturn(mockGeneratorContext);
  EasyMock.expect(mockGeneratorContext.tryCreateResource(testLogger,""String_Node_Str"")).andReturn(null);
  JMethod method=EasyMock.createMock(JMethod.class);
  JClassType bundleType=EasyMock.createMock(JClassType.class);
  EasyMock.expect(method.getEnclosingType()).andReturn(bundleType);
  EasyMock.expect(bundleType.getQualifiedSourceName()).andReturn(""String_Node_Str"");
  EasyMock.expect(method.getName()).andReturn(""String_Node_Str"");
  EasyMock.replay(mockResourceContext);
  EasyMock.replay(mockGeneratorContext);
  EasyMock.replay(method);
  EasyMock.replay(bundleType);
  CssResourceGenerator crg=new CssResourceGenerator();
  crg.outputCssMapArtifact(testLogger,mockResourceContext,method,testMap);
  testLogger.assertCorrectLogEntries();
  EasyMock.verify(mockResourceContext);
  EasyMock.verify(mockGeneratorContext);
  EasyMock.verify(method);
  EasyMock.verify(bundleType);
}"
81730,"public void testOutputCssMapArtifactWithTestData() throws UnableToCompleteException {
  UnitTestTreeLogger testLogger=new UnitTestTreeLogger.Builder().createLogger();
  ResourceContext mockResourceContext=EasyMock.createMock(ResourceContext.class);
  JMethod mockJMethod1=EasyMock.createMock(JMethod.class);
  JMethod mockJMethod2=EasyMock.createMock(JMethod.class);
  JMethod mockJMethod3=EasyMock.createMock(JMethod.class);
  JClassType mockJClassType1=EasyMock.createMock(JClassType.class);
  JClassType mockJClassType2=EasyMock.createMock(JClassType.class);
  JClassType mockJClassType3=EasyMock.createMock(JClassType.class);
  Map<JMethod,String> testMap=new LinkedHashMap<JMethod,String>();
  testMap.put(mockJMethod1,""String_Node_Str"");
  testMap.put(mockJMethod2,""String_Node_Str"");
  testMap.put(mockJMethod3,""String_Node_Str"");
  ByteArrayOutputStream testOutputStream=new ByteArrayOutputStream();
  GeneratorContext mockGeneratorContext=EasyMock.createMock(GeneratorContext.class);
  GeneratedResource mockGeneratedResource=EasyMock.createMock(GeneratedResource.class);
  EasyMock.expect(mockResourceContext.getGeneratorContext()).andReturn(mockGeneratorContext);
  EasyMock.expectLastCall().times(2);
  EasyMock.expect(mockGeneratorContext.tryCreateResource(testLogger,""String_Node_Str"")).andReturn(testOutputStream);
  EasyMock.expect(mockJMethod1.getEnclosingType()).andReturn(mockJClassType1);
  EasyMock.expect(mockJClassType1.getQualifiedSourceName()).andReturn(""String_Node_Str"");
  EasyMock.expect(mockJMethod1.getName()).andReturn(""String_Node_Str"");
  EasyMock.expect(mockJMethod2.getEnclosingType()).andReturn(mockJClassType2);
  EasyMock.expect(mockJClassType2.getQualifiedSourceName()).andReturn(""String_Node_Str"");
  EasyMock.expect(mockJMethod2.getName()).andReturn(""String_Node_Str"");
  EasyMock.expect(mockJMethod3.getEnclosingType()).andReturn(mockJClassType3);
  EasyMock.expect(mockJClassType3.getQualifiedSourceName()).andReturn(""String_Node_Str"");
  EasyMock.expect(mockJMethod3.getName()).andReturn(""String_Node_Str"");
  EasyMock.expect(mockGeneratorContext.commitResource(testLogger,testOutputStream)).andReturn(mockGeneratedResource);
  EasyMock.replay(mockResourceContext);
  EasyMock.replay(mockGeneratorContext);
  EasyMock.replay(mockJMethod1);
  EasyMock.replay(mockJMethod2);
  EasyMock.replay(mockJMethod3);
  EasyMock.replay(mockJClassType1);
  EasyMock.replay(mockJClassType2);
  EasyMock.replay(mockJClassType3);
  CssResourceGenerator crg=new CssResourceGenerator();
  crg.outputCssMapArtifact(testLogger,mockResourceContext,testMap,""String_Node_Str"");
  String expectedOutput=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  assertEquals(expectedOutput,testOutputStream.toString());
  testLogger.assertCorrectLogEntries();
  EasyMock.verify(mockResourceContext);
  EasyMock.verify(mockGeneratorContext);
  EasyMock.verify(mockJMethod1);
  EasyMock.verify(mockJMethod2);
  EasyMock.verify(mockJMethod3);
  EasyMock.verify(mockJClassType1);
  EasyMock.verify(mockJClassType2);
  EasyMock.verify(mockJClassType3);
}","public void testOutputCssMapArtifactWithTestData() throws UnableToCompleteException {
  UnitTestTreeLogger testLogger=new UnitTestTreeLogger.Builder().createLogger();
  ResourceContext mockResourceContext=EasyMock.createMock(ResourceContext.class);
  JMethod mockJMethod1=EasyMock.createMock(JMethod.class);
  JMethod mockJMethod2=EasyMock.createMock(JMethod.class);
  JMethod mockJMethod3=EasyMock.createMock(JMethod.class);
  JClassType mockJClassType1=EasyMock.createMock(JClassType.class);
  JClassType mockJClassType2=EasyMock.createMock(JClassType.class);
  JClassType mockJClassType3=EasyMock.createMock(JClassType.class);
  Map<JMethod,String> testMap=new LinkedHashMap<JMethod,String>();
  testMap.put(mockJMethod1,""String_Node_Str"");
  testMap.put(mockJMethod2,""String_Node_Str"");
  testMap.put(mockJMethod3,""String_Node_Str"");
  ByteArrayOutputStream testOutputStream=new ByteArrayOutputStream();
  GeneratorContext mockGeneratorContext=EasyMock.createMock(GeneratorContext.class);
  GeneratedResource mockGeneratedResource=EasyMock.createMock(GeneratedResource.class);
  EasyMock.expect(mockResourceContext.getGeneratorContext()).andReturn(mockGeneratorContext);
  EasyMock.expectLastCall().times(2);
  EasyMock.expect(mockGeneratorContext.tryCreateResource(testLogger,""String_Node_Str"")).andReturn(testOutputStream);
  EasyMock.expect(mockJMethod1.getEnclosingType()).andReturn(mockJClassType1);
  EasyMock.expect(mockJClassType1.getQualifiedSourceName()).andReturn(""String_Node_Str"");
  EasyMock.expect(mockJMethod1.getName()).andReturn(""String_Node_Str"");
  EasyMock.expect(mockJMethod2.getEnclosingType()).andReturn(mockJClassType2);
  EasyMock.expect(mockJClassType2.getQualifiedSourceName()).andReturn(""String_Node_Str"");
  EasyMock.expect(mockJMethod2.getName()).andReturn(""String_Node_Str"");
  EasyMock.expect(mockJMethod3.getEnclosingType()).andReturn(mockJClassType3);
  EasyMock.expect(mockJClassType3.getQualifiedSourceName()).andReturn(""String_Node_Str"");
  EasyMock.expect(mockJMethod3.getName()).andReturn(""String_Node_Str"");
  EasyMock.expect(mockGeneratorContext.commitResource(testLogger,testOutputStream)).andReturn(mockGeneratedResource);
  JMethod method=EasyMock.createMock(JMethod.class);
  JClassType bundleType=EasyMock.createMock(JClassType.class);
  EasyMock.expect(method.getEnclosingType()).andReturn(bundleType);
  EasyMock.expect(bundleType.getQualifiedSourceName()).andReturn(""String_Node_Str"");
  EasyMock.expect(method.getName()).andReturn(""String_Node_Str"");
  EasyMock.replay(mockResourceContext);
  EasyMock.replay(mockGeneratorContext);
  EasyMock.replay(mockJMethod1);
  EasyMock.replay(mockJMethod2);
  EasyMock.replay(mockJMethod3);
  EasyMock.replay(mockJClassType1);
  EasyMock.replay(mockJClassType2);
  EasyMock.replay(mockJClassType3);
  EasyMock.replay(method);
  EasyMock.replay(bundleType);
  CssResourceGenerator crg=new CssResourceGenerator();
  crg.outputCssMapArtifact(testLogger,mockResourceContext,method,testMap);
  String expectedOutput=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  assertEquals(expectedOutput,testOutputStream.toString());
  testLogger.assertCorrectLogEntries();
  EasyMock.verify(mockResourceContext);
  EasyMock.verify(mockGeneratorContext);
  EasyMock.verify(mockJMethod1);
  EasyMock.verify(mockJMethod2);
  EasyMock.verify(mockJMethod3);
  EasyMock.verify(mockJClassType1);
  EasyMock.verify(mockJClassType2);
  EasyMock.verify(mockJClassType3);
  EasyMock.verify(method);
  EasyMock.verify(bundleType);
}"
81731,"public void testOutputCssMapArtifact() throws UnableToCompleteException {
  UnitTestTreeLogger testLogger=new UnitTestTreeLogger.Builder().createLogger();
  ResourceContext mockResourceContext=EasyMock.createMock(ResourceContext.class);
  Map<JMethod,String> testMap=new HashMap<JMethod,String>();
  OutputStream mockOutputStream=EasyMock.createMock(OutputStream.class);
  GeneratorContext mockGeneratorContext=EasyMock.createMock(GeneratorContext.class);
  GeneratedResource mockGeneratedResource=EasyMock.createMock(GeneratedResource.class);
  EasyMock.expect(mockResourceContext.getGeneratorContext()).andReturn(mockGeneratorContext);
  EasyMock.expectLastCall().times(2);
  EasyMock.expect(mockGeneratorContext.tryCreateResource(testLogger,""String_Node_Str"")).andReturn(mockOutputStream);
  EasyMock.expect(mockGeneratorContext.commitResource(testLogger,mockOutputStream)).andReturn(mockGeneratedResource);
  EasyMock.replay(mockResourceContext);
  EasyMock.replay(mockGeneratorContext);
  CssResourceGenerator crg=new CssResourceGenerator();
  crg.outputCssMapArtifact(testLogger,mockResourceContext,testMap,""String_Node_Str"");
  testLogger.assertCorrectLogEntries();
  EasyMock.verify(mockResourceContext);
  EasyMock.verify(mockGeneratorContext);
}","public void testOutputCssMapArtifact() throws UnableToCompleteException {
  UnitTestTreeLogger testLogger=new UnitTestTreeLogger.Builder().createLogger();
  ResourceContext mockResourceContext=EasyMock.createMock(ResourceContext.class);
  Map<JMethod,String> testMap=new HashMap<JMethod,String>();
  OutputStream mockOutputStream=EasyMock.createMock(OutputStream.class);
  GeneratorContext mockGeneratorContext=EasyMock.createMock(GeneratorContext.class);
  GeneratedResource mockGeneratedResource=EasyMock.createMock(GeneratedResource.class);
  EasyMock.expect(mockResourceContext.getGeneratorContext()).andReturn(mockGeneratorContext);
  EasyMock.expectLastCall().times(2);
  EasyMock.expect(mockGeneratorContext.tryCreateResource(testLogger,""String_Node_Str"")).andReturn(mockOutputStream);
  EasyMock.expect(mockGeneratorContext.commitResource(testLogger,mockOutputStream)).andReturn(mockGeneratedResource);
  JMethod method=EasyMock.createMock(JMethod.class);
  JClassType bundleType=EasyMock.createMock(JClassType.class);
  EasyMock.expect(method.getEnclosingType()).andReturn(bundleType);
  EasyMock.expect(bundleType.getQualifiedSourceName()).andReturn(""String_Node_Str"");
  EasyMock.expect(method.getName()).andReturn(""String_Node_Str"");
  EasyMock.replay(mockResourceContext);
  EasyMock.replay(mockGeneratorContext);
  EasyMock.replay(method);
  EasyMock.replay(bundleType);
  CssResourceGenerator crg=new CssResourceGenerator();
  crg.outputCssMapArtifact(testLogger,mockResourceContext,method,testMap);
  testLogger.assertCorrectLogEntries();
  EasyMock.verify(mockResourceContext);
  EasyMock.verify(mockGeneratorContext);
  EasyMock.verify(method);
  EasyMock.verify(bundleType);
}"
81732,"public void testOutputCssMapArtifactThrowOnTryCreateResource() throws UnableToCompleteException {
  UnitTestTreeLogger.Builder builder=new UnitTestTreeLogger.Builder();
  builder.expectError(""String_Node_Str"",null);
  UnitTestTreeLogger testLogger=builder.createLogger();
  ResourceContext mockResourceContext=EasyMock.createMock(ResourceContext.class);
  Map<JMethod,String> testMap=new HashMap<JMethod,String>();
  OutputStream mockOutputStream=EasyMock.createMock(OutputStream.class);
  GeneratorContext mockGeneratorContext=EasyMock.createMock(GeneratorContext.class);
  GeneratedResource mockGeneratedResource=EasyMock.createMock(GeneratedResource.class);
  EasyMock.expect(mockResourceContext.getGeneratorContext()).andReturn(mockGeneratorContext);
  EasyMock.expect(mockGeneratorContext.tryCreateResource(testLogger,""String_Node_Str"")).andThrow(new UnableToCompleteException());
  EasyMock.replay(mockResourceContext);
  EasyMock.replay(mockGeneratorContext);
  CssResourceGenerator crg=new CssResourceGenerator();
  crg.outputCssMapArtifact(testLogger,mockResourceContext,testMap,""String_Node_Str"");
  testLogger.assertCorrectLogEntries();
  EasyMock.verify(mockResourceContext);
  EasyMock.verify(mockGeneratorContext);
}","public void testOutputCssMapArtifactThrowOnTryCreateResource() throws UnableToCompleteException {
  UnitTestTreeLogger.Builder builder=new UnitTestTreeLogger.Builder();
  builder.expectWarn(""String_Node_Str"",null);
  UnitTestTreeLogger testLogger=builder.createLogger();
  ResourceContext mockResourceContext=EasyMock.createMock(ResourceContext.class);
  Map<JMethod,String> testMap=new HashMap<JMethod,String>();
  OutputStream mockOutputStream=EasyMock.createMock(OutputStream.class);
  GeneratorContext mockGeneratorContext=EasyMock.createMock(GeneratorContext.class);
  GeneratedResource mockGeneratedResource=EasyMock.createMock(GeneratedResource.class);
  EasyMock.expect(mockResourceContext.getGeneratorContext()).andReturn(mockGeneratorContext);
  EasyMock.expect(mockGeneratorContext.tryCreateResource(testLogger,""String_Node_Str"")).andThrow(new UnableToCompleteException());
  JMethod method=EasyMock.createMock(JMethod.class);
  JClassType bundleType=EasyMock.createMock(JClassType.class);
  EasyMock.expect(method.getEnclosingType()).andReturn(bundleType);
  EasyMock.expect(bundleType.getQualifiedSourceName()).andReturn(""String_Node_Str"");
  EasyMock.expect(method.getName()).andReturn(""String_Node_Str"");
  EasyMock.replay(mockResourceContext);
  EasyMock.replay(mockGeneratorContext);
  EasyMock.replay(method);
  EasyMock.replay(bundleType);
  CssResourceGenerator crg=new CssResourceGenerator();
  crg.outputCssMapArtifact(testLogger,mockResourceContext,method,testMap);
  testLogger.assertCorrectLogEntries();
  EasyMock.verify(mockResourceContext);
  EasyMock.verify(mockGeneratorContext);
  EasyMock.verify(method);
  EasyMock.verify(bundleType);
}"
81733,"public void testOutputCssMapArtifactThrowOnCommitResource() throws UnableToCompleteException {
  UnitTestTreeLogger.Builder builder=new UnitTestTreeLogger.Builder();
  builder.expectError(""String_Node_Str"",null);
  UnitTestTreeLogger testLogger=builder.createLogger();
  ResourceContext mockResourceContext=EasyMock.createMock(ResourceContext.class);
  Map<JMethod,String> testMap=new HashMap<JMethod,String>();
  OutputStream mockOutputStream=EasyMock.createMock(OutputStream.class);
  GeneratorContext mockGeneratorContext=EasyMock.createMock(GeneratorContext.class);
  GeneratedResource mockGeneratedResource=EasyMock.createMock(GeneratedResource.class);
  EasyMock.expect(mockResourceContext.getGeneratorContext()).andReturn(mockGeneratorContext);
  EasyMock.expectLastCall().times(2);
  EasyMock.expect(mockGeneratorContext.tryCreateResource(testLogger,""String_Node_Str"")).andReturn(mockOutputStream);
  EasyMock.expect(mockGeneratorContext.commitResource(testLogger,mockOutputStream)).andThrow(new UnableToCompleteException());
  EasyMock.replay(mockResourceContext);
  EasyMock.replay(mockGeneratorContext);
  CssResourceGenerator crg=new CssResourceGenerator();
  crg.outputCssMapArtifact(testLogger,mockResourceContext,testMap,""String_Node_Str"");
  testLogger.assertCorrectLogEntries();
  EasyMock.verify(mockResourceContext);
  EasyMock.verify(mockGeneratorContext);
}","public void testOutputCssMapArtifactThrowOnCommitResource() throws UnableToCompleteException {
  UnitTestTreeLogger.Builder builder=new UnitTestTreeLogger.Builder();
  builder.expectWarn(""String_Node_Str"",null);
  UnitTestTreeLogger testLogger=builder.createLogger();
  ResourceContext mockResourceContext=EasyMock.createMock(ResourceContext.class);
  Map<JMethod,String> testMap=new HashMap<JMethod,String>();
  OutputStream mockOutputStream=EasyMock.createMock(OutputStream.class);
  GeneratorContext mockGeneratorContext=EasyMock.createMock(GeneratorContext.class);
  GeneratedResource mockGeneratedResource=EasyMock.createMock(GeneratedResource.class);
  EasyMock.expect(mockResourceContext.getGeneratorContext()).andReturn(mockGeneratorContext);
  EasyMock.expectLastCall().times(2);
  EasyMock.expect(mockGeneratorContext.tryCreateResource(testLogger,""String_Node_Str"")).andReturn(mockOutputStream);
  EasyMock.expect(mockGeneratorContext.commitResource(testLogger,mockOutputStream)).andThrow(new UnableToCompleteException());
  JMethod method=EasyMock.createMock(JMethod.class);
  JClassType bundleType=EasyMock.createMock(JClassType.class);
  EasyMock.expect(method.getEnclosingType()).andReturn(bundleType);
  EasyMock.expect(bundleType.getQualifiedSourceName()).andReturn(""String_Node_Str"");
  EasyMock.expect(method.getName()).andReturn(""String_Node_Str"");
  EasyMock.replay(mockResourceContext);
  EasyMock.replay(mockGeneratorContext);
  EasyMock.replay(method);
  EasyMock.replay(bundleType);
  CssResourceGenerator crg=new CssResourceGenerator();
  crg.outputCssMapArtifact(testLogger,mockResourceContext,method,testMap);
  testLogger.assertCorrectLogEntries();
  EasyMock.verify(mockResourceContext);
  EasyMock.verify(mockGeneratorContext);
  EasyMock.verify(method);
  EasyMock.verify(bundleType);
}"
81734,"@SuppressWarnings(""String_Node_Str"") @Override protected void onBrowserEvent2(Event event){
  EventTarget eventTarget=event.getEventTarget();
  if (!Element.is(eventTarget)) {
    return;
  }
  final Element target=event.getEventTarget().cast();
  TableSectionElement tbody=getTableBodyElement();
  TableSectionElement tfoot=getTableFootElement();
  TableSectionElement thead=getTableHeadElement();
  TableSectionElement targetTableSection=null;
  TableCellElement targetTableCell=null;
  Element cellParent=null;
  Element headerParent=null;
  Element headerColumnParent=null;
  Element footerParent=null;
  Element footerColumnParent=null;
{
    Element maybeTableCell=null;
    Element cur=target;
    while (cur != null && targetTableSection == null) {
      if (cur == tbody || cur == tfoot || cur == thead) {
        targetTableSection=cur.cast();
        if (maybeTableCell != null) {
          targetTableCell=maybeTableCell.cast();
          break;
        }
      }
      String tagName=cur.getTagName();
      if (TableCellElement.TAG_TD.equalsIgnoreCase(tagName) || TableCellElement.TAG_TH.equalsIgnoreCase(tagName)) {
        maybeTableCell=cur;
      }
      if (cellParent == null && tableBuilder.isColumn(cur)) {
        cellParent=cur;
      }
      if (headerParent == null && headerBuilder.isHeader(cur)) {
        headerParent=cur;
      }
      if (footerParent == null && footerBuilder.isHeader(cur)) {
        footerParent=cur;
      }
      if (headerColumnParent == null && headerBuilder.isColumn(cur)) {
        headerColumnParent=cur;
      }
      if (footerColumnParent == null && footerBuilder.isColumn(cur)) {
        footerColumnParent=cur;
      }
      cur=cur.getParentElement();
    }
  }
  if (targetTableCell == null) {
    return;
  }
  if (legacyRenderRowValues) {
    cellParent=targetTableCell.getFirstChildElement();
  }
  TableRowElement targetTableRow=targetTableCell.getParentElement().cast();
  String eventType=event.getType();
  boolean isClick=""String_Node_Str"".equals(eventType);
  int col=targetTableCell.getCellIndex();
  if (targetTableSection == thead || targetTableSection == tfoot) {
    boolean isHeader=(targetTableSection == thead);
    headerParent=isHeader ? headerParent : footerParent;
    Element columnParent=isHeader ? headerColumnParent : footerColumnParent;
    if (headerParent != null) {
      Header<?> header=isHeader ? headerBuilder.getHeader(headerParent) : footerBuilder.getHeader(footerParent);
      if (header != null && cellConsumesEventType(header.getCell(),eventType)) {
        Context context=new Context(0,col,header.getKey());
        header.onBrowserEvent(context,cellParent,event);
      }
    }
    if (isClick && columnParent != null) {
      Column<T,?> column=isHeader ? headerBuilder.getColumn(columnParent) : footerBuilder.getColumn(columnParent);
      if (column != null && column.isSortable()) {
        headersDirty=true;
        updatingSortList=true;
        sortList.push(column);
        updatingSortList=false;
        ColumnSortEvent.fire(this,sortList);
      }
    }
  }
 else   if (targetTableSection == tbody) {
    int absRow=tableBuilder.getRowValueIndex(targetTableRow);
    int relRow=absRow - getPageStart();
    int subrow=tableBuilder.getSubrowValueIndex(targetTableRow);
    if (""String_Node_Str"".equals(eventType)) {
      if (hoveringRow != null && getTableBodyElement().isOrHasChild(hoveringRow)) {
        setRowHover(hoveringRow,false);
      }
      hoveringRow=targetTableRow;
      setRowHover(hoveringRow,true);
    }
 else     if (""String_Node_Str"".equals(eventType) && hoveringRow != null) {
      setRowHover(hoveringRow,false);
      hoveringRow=null;
    }
    if (!isRowWithinBounds(relRow)) {
      return;
    }
    boolean isSelectionHandled=handlesSelection || KeyboardSelectionPolicy.BOUND_TO_SELECTION == getKeyboardSelectionPolicy();
    T value=getVisibleItem(relRow);
    Context context=new Context(absRow,col,getValueKey(value),subrow);
    CellPreviewEvent<T> previewEvent=CellPreviewEvent.fire(this,event,this,context,value,cellIsEditing,isSelectionHandled);
    if (cellParent != null && !previewEvent.isCanceled()) {
      HasCell<T,?> column;
      if (legacyRenderRowValues) {
        column=columns.get(col);
      }
 else {
        column=tableBuilder.getColumn(context,value,cellParent);
      }
      if (column != null) {
        fireEventToCell(event,eventType,cellParent,value,context,column);
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override protected void onBrowserEvent2(Event event){
  EventTarget eventTarget=event.getEventTarget();
  if (!Element.is(eventTarget)) {
    return;
  }
  final Element target=event.getEventTarget().cast();
  TableSectionElement tbody=getTableBodyElement();
  TableSectionElement tfoot=getTableFootElement();
  TableSectionElement thead=getTableHeadElement();
  TableSectionElement targetTableSection=null;
  TableCellElement targetTableCell=null;
  Element cellParent=null;
  Element headerParent=null;
  Element headerColumnParent=null;
  Element footerParent=null;
  Element footerColumnParent=null;
{
    Element maybeTableCell=null;
    Element cur=target;
    while (cur != null && targetTableSection == null) {
      if (cur == tbody || cur == tfoot || cur == thead) {
        targetTableSection=cur.cast();
        if (maybeTableCell != null) {
          targetTableCell=maybeTableCell.cast();
          break;
        }
      }
      String tagName=cur.getTagName();
      if (TableCellElement.TAG_TD.equalsIgnoreCase(tagName) || TableCellElement.TAG_TH.equalsIgnoreCase(tagName)) {
        maybeTableCell=cur;
      }
      if (cellParent == null && tableBuilder.isColumn(cur)) {
        cellParent=cur;
      }
      if (headerParent == null && headerBuilder.isHeader(cur)) {
        headerParent=cur;
      }
      if (footerParent == null && footerBuilder.isHeader(cur)) {
        footerParent=cur;
      }
      if (headerColumnParent == null && headerBuilder.isColumn(cur)) {
        headerColumnParent=cur;
      }
      if (footerColumnParent == null && footerBuilder.isColumn(cur)) {
        footerColumnParent=cur;
      }
      cur=cur.getParentElement();
    }
  }
  if (targetTableCell == null) {
    return;
  }
  if (legacyRenderRowValues) {
    cellParent=targetTableCell.getFirstChildElement();
  }
  TableRowElement targetTableRow=targetTableCell.getParentElement().cast();
  String eventType=event.getType();
  boolean isClick=""String_Node_Str"".equals(eventType);
  int col=targetTableCell.getCellIndex();
  if (targetTableSection == thead || targetTableSection == tfoot) {
    boolean isHeader=(targetTableSection == thead);
    headerParent=isHeader ? headerParent : footerParent;
    Element columnParent=isHeader ? headerColumnParent : footerColumnParent;
    if (headerParent != null) {
      Header<?> header=isHeader ? headerBuilder.getHeader(headerParent) : footerBuilder.getHeader(footerParent);
      if (header != null && cellConsumesEventType(header.getCell(),eventType)) {
        Context context=new Context(0,col,header.getKey());
        header.onBrowserEvent(context,headerParent,event);
      }
    }
    if (isClick && columnParent != null) {
      Column<T,?> column=isHeader ? headerBuilder.getColumn(columnParent) : footerBuilder.getColumn(columnParent);
      if (column != null && column.isSortable()) {
        headersDirty=true;
        updatingSortList=true;
        sortList.push(column);
        updatingSortList=false;
        ColumnSortEvent.fire(this,sortList);
      }
    }
  }
 else   if (targetTableSection == tbody) {
    int absRow=tableBuilder.getRowValueIndex(targetTableRow);
    int relRow=absRow - getPageStart();
    int subrow=tableBuilder.getSubrowValueIndex(targetTableRow);
    if (""String_Node_Str"".equals(eventType)) {
      if (hoveringRow != null && getTableBodyElement().isOrHasChild(hoveringRow)) {
        setRowHover(hoveringRow,false);
      }
      hoveringRow=targetTableRow;
      setRowHover(hoveringRow,true);
    }
 else     if (""String_Node_Str"".equals(eventType) && hoveringRow != null) {
      setRowHover(hoveringRow,false);
      hoveringRow=null;
    }
    if (!isRowWithinBounds(relRow)) {
      return;
    }
    boolean isSelectionHandled=handlesSelection || KeyboardSelectionPolicy.BOUND_TO_SELECTION == getKeyboardSelectionPolicy();
    T value=getVisibleItem(relRow);
    Context context=new Context(absRow,col,getValueKey(value),subrow);
    CellPreviewEvent<T> previewEvent=CellPreviewEvent.fire(this,event,this,context,value,cellIsEditing,isSelectionHandled);
    if (cellParent != null && !previewEvent.isCanceled()) {
      HasCell<T,?> column;
      if (legacyRenderRowValues) {
        column=columns.get(col);
      }
 else {
        column=tableBuilder.getColumn(context,value,cellParent);
      }
      if (column != null) {
        fireEventToCell(event,eventType,cellParent,value,context,column);
      }
    }
  }
}"
81735,"/** 
 * Set a row's hovering style and fire a   {@link RowHoverEvent}
 * @param tr the row element
 * @param isHovering false if this is an unhover event
 */
private void setRowHover(TableRowElement tr,boolean isHovering){
  setRowStyleName(tr,style.hoveredRow(),style.hoveredRowCell(),isHovering);
  RowHoverEvent.fire(this,tr,isHovering);
}","/** 
 * Set a row's hovering style and fire a   {@link RowHoverEvent}
 * @param tr the row element
 * @param isHovering false if this is an unhover event
 */
private void setRowHover(TableRowElement tr,boolean isHovering){
  setRowStyleName(tr,style.hoveredRow(),style.hoveredRowCell(),isHovering);
  RowHoverEvent.fire(this,tr,!isHovering);
}"
81736,"@Override public LogRecord instantiateInstance(ServerSerializationStreamReader reader) throws SerializationException {
  return LogRecord_CustomFieldSerializer.instantiate(reader);
}","@Override public LogRecord instantiateInstance(ServerSerializationStreamReader reader,Class<?> instanceClass,DequeMap<Type,Type> resolvedTypes) throws SerializationException {
  return LogRecord_CustomFieldSerializer.instantiate(reader);
}"
81737,"@SuppressWarnings(""String_Node_Str"") public static void deserialize(ServerSerializationStreamReader streamReader,LogRecord instance,Class<?> instanceClass,DequeMap<Type,Type> resolvedTypes) throws SerializationException {
  String loggerName=streamReader.readString();
  Long millis=streamReader.readLong();
  Object throwable=streamReader.readObject(Throwable.class,resolvedTypes);
  instance.setLoggerName(loggerName);
  instance.setMillis(millis);
  if (throwable != null && throwable instanceof SerializableThrowable) {
    instance.setThrown(((SerializableThrowable)throwable).getThrowable());
  }
}","@SuppressWarnings(""String_Node_Str"") public static void deserialize(ServerSerializationStreamReader streamReader,LogRecord instance,Class<?> instanceClass,DequeMap<Type,Type> resolvedTypes) throws SerializationException {
  String loggerName=streamReader.readString();
  Long millis=streamReader.readLong();
  Object throwable=streamReader.readObject(SerializableThrowable.class,resolvedTypes);
  instance.setLoggerName(loggerName);
  instance.setMillis(millis);
  if (throwable != null && throwable instanceof SerializableThrowable) {
    instance.setThrown(((SerializableThrowable)throwable).getThrowable());
  }
}"
81738,"public void onFailure(Throwable caught){
  TestSetValidator.rethrowException(caught);
}","public void onFailure(Throwable caught){
  TestSetValidator.rethrowException(caught);
  fail(caught.getMessage());
}"
81739,"public void testLogRecord(){
  LoggingRPCTestServiceAsync service=getServiceAsync();
  delayTestFinish(15000);
  service.echoLogRecord(expectedLogRecord,new AsyncCallback<LogRecord>(){
    public void onFailure(    Throwable caught){
      TestSetValidator.rethrowException(caught);
    }
    public void onSuccess(    LogRecord result){
      assertNotNull(result);
      assertTrue(isValid(result));
      finishTest();
    }
  }
);
  finishTest();
}","public void testLogRecord(){
  LoggingRPCTestServiceAsync service=getServiceAsync();
  delayTestFinish(15000);
  service.echoLogRecord(expectedLogRecord,new AsyncCallback<LogRecord>(){
    public void onFailure(    Throwable caught){
      TestSetValidator.rethrowException(caught);
      fail(caught.getMessage());
    }
    public void onSuccess(    LogRecord result){
      assertNotNull(result);
      assertTrue(isValid(result));
      finishTest();
    }
  }
);
}"
81740,"private void createResourceUiRenderer(XMLElement elem,String resourceName,JClassType resourceType,JClassType matchingResourceType) throws UnableToCompleteException {
  FieldWriter fieldWriter;
  if (resourceType != null && !resourceType.getErasedType().isAssignableFrom(matchingResourceType.getErasedType())) {
    writer.die(elem,""String_Node_Str"",resourceName,writer.getBaseClass().getQualifiedSourceName());
  }
  fieldWriter=fieldManager.registerField(FieldWriterType.IMPORTED,matchingResourceType.getErasedType(),resourceName);
  fieldWriter.setInitializer(""String_Node_Str"" + resourceName);
}","private void createResourceUiRenderer(XMLElement elem,String resourceName,JClassType resourceType,JClassType matchingResourceType) throws UnableToCompleteException {
  FieldWriter fieldWriter;
  if (resourceType != null && !resourceType.getErasedType().isAssignableFrom(matchingResourceType.getErasedType())) {
    writer.die(elem,""String_Node_Str"",resourceName,writer.getBaseClass().getQualifiedSourceName());
  }
  fieldWriter=fieldManager.registerField(FieldWriterType.IMPORTED,matchingResourceType.getErasedType(),resourceName);
  fieldWriter.setInitializer(UiBinderWriter.RENDER_PARAM_HOLDER_PREFIX + resourceName);
}"
81741,"private void writeRenderParameterDefinitions(IndentedWriter w,JParameter[] renderParameters){
  for (int i=0; i < renderParameters.length; i++) {
    JParameter parameter=renderParameters[i];
    w.write(""String_Node_Str"",parameter.getType().getQualifiedSourceName(),parameter.getName());
    w.newline();
  }
}","private void writeRenderParameterDefinitions(IndentedWriter w,JParameter[] renderParameters){
  for (int i=0; i < renderParameters.length; i++) {
    JParameter parameter=renderParameters[i];
    w.write(""String_Node_Str"",parameter.getType().getQualifiedSourceName(),RENDER_PARAM_HOLDER_PREFIX,parameter.getName());
    w.newline();
  }
}"
81742,"private void writeRenderParameterInitializers(IndentedWriter w,JParameter[] renderParameters){
  for (int i=0; i < renderParameters.length; i++) {
    JParameter parameter=renderParameters[i];
    w.write(""String_Node_Str"",parameter.getName(),parameter.getName());
    w.newline();
  }
}","private void writeRenderParameterInitializers(IndentedWriter w,JParameter[] renderParameters){
  for (int i=0; i < renderParameters.length; i++) {
    JParameter parameter=renderParameters[i];
    w.write(""String_Node_Str"",RENDER_PARAM_HOLDER_PREFIX,parameter.getName(),parameter.getName());
    w.newline();
  }
}"
81743,"public void testFieldGetters(){
  assertTrue(renderer.isParentOrRenderer(docDiv));
  DivElement root=renderer.getRoot(docDiv);
  assertTrue(renderer.isParentOrRenderer(root));
  assertNotNull(root);
  assertSpanContainsRenderedValue(root);
  SpanElement nameSpan=renderer.getNameSpan(docDiv);
  assertSpanContainsRenderedValueText(nameSpan.getFirstChild());
  DivElement root2=renderer.getRoot(root);
  assertTrue(renderer.isParentOrRenderer(root2));
  assertNotNull(root2);
  assertSpanContainsRenderedValue(root2);
  nameSpan=renderer.getNameSpan(root);
  assertSpanContainsRenderedValueText(nameSpan.getFirstChild());
}","public void testFieldGetters(){
  assertTrue(renderer.isParentOrRenderer(docDiv));
  DivElement root=renderer.getRoot(docDiv);
  assertTrue(renderer.isParentOrRenderer(root));
  assertNotNull(root);
  assertSpanContainsRenderedValue(root);
  SpanElement nameSpan=renderer.getNameSpan(docDiv);
  assertSpanContainsRenderedValueText(RENDERED_VALUE,nameSpan.getFirstChild());
  DivElement root2=renderer.getRoot(root);
  assertTrue(renderer.isParentOrRenderer(root2));
  assertNotNull(root2);
  assertSpanContainsRenderedValue(root2);
  nameSpan=renderer.getNameSpan(root);
  assertSpanContainsRenderedValueText(RENDERED_VALUE,nameSpan.getFirstChild());
}"
81744,"private void assertSpanContainsRenderedValue(Node root){
  Node firstFieldNode=root.getChild(2);
  assertEquals(Node.ELEMENT_NODE,firstFieldNode.getNodeType());
  assertEquals(""String_Node_Str"",firstFieldNode.getNodeName().toLowerCase());
  assertTrue(firstFieldNode.hasChildNodes());
  Node renderedValue=firstFieldNode.getFirstChild();
  assertSpanContainsRenderedValueText(renderedValue);
}","private void assertSpanContainsRenderedValue(Node root){
  Node firstFieldNode=root.getChild(2);
  assertEquals(Node.ELEMENT_NODE,firstFieldNode.getNodeType());
  assertEquals(""String_Node_Str"",firstFieldNode.getNodeName().toLowerCase());
  assertTrue(firstFieldNode.hasChildNodes());
  Node renderedValue=firstFieldNode.getFirstChild();
  assertSpanContainsRenderedValueText(RENDERED_VALUE,renderedValue);
}"
81745,"public void testFieldGettersNotOnlyChild(){
  DivElement root=renderer.getRoot(docDiv);
  docDiv.appendChild(Document.get().createSpanElement());
  DivElement rootAgain=renderer.getRoot(docDiv);
  assertEquals(root,rootAgain);
  if (GWT.isProdMode()) {
    assertTrue(renderer.isParentOrRenderer(docDiv));
    SpanElement nameSpan=renderer.getNameSpan(docDiv);
    assertSpanContainsRenderedValueText(nameSpan.getFirstChild());
  }
 else {
    assertFalse(renderer.isParentOrRenderer(docDiv));
    try {
      renderer.getNameSpan(docDiv);
      fail(""String_Node_Str"");
    }
 catch (    IllegalArgumentException e) {
    }
  }
}","public void testFieldGettersNotOnlyChild(){
  DivElement root=renderer.getRoot(docDiv);
  docDiv.appendChild(Document.get().createSpanElement());
  DivElement rootAgain=renderer.getRoot(docDiv);
  assertEquals(root,rootAgain);
  if (GWT.isProdMode()) {
    assertTrue(renderer.isParentOrRenderer(docDiv));
    SpanElement nameSpan=renderer.getNameSpan(docDiv);
    assertSpanContainsRenderedValueText(RENDERED_VALUE,nameSpan.getFirstChild());
  }
 else {
    assertFalse(renderer.isParentOrRenderer(docDiv));
    try {
      renderer.getNameSpan(docDiv);
      fail(""String_Node_Str"");
    }
 catch (    IllegalArgumentException e) {
    }
  }
}"
81746,"public void testSafeHtmlRendererText(){
  Node innerDiv=docDiv.getFirstChild();
  Node spanWithConstantTextNode=innerDiv.getChild(0);
  assertEquals(""String_Node_Str"",spanWithConstantTextNode.getNodeName().toLowerCase());
  assertEquals(Node.TEXT_NODE,spanWithConstantTextNode.getFirstChild().getNodeType());
  assertEquals(""String_Node_Str"",spanWithConstantTextNode.getFirstChild().getNodeValue());
  Node firstRawTextNode=innerDiv.getChild(1);
  assertEquals(Node.TEXT_NODE,firstRawTextNode.getNodeType());
  assertEquals(""String_Node_Str"",firstRawTextNode.getNodeValue());
  assertSpanContainsRenderedValue(innerDiv);
  Node secondRawTextNode=innerDiv.getChild(3);
  assertEquals(Node.TEXT_NODE,secondRawTextNode.getNodeType());
  assertEquals(""String_Node_Str"",secondRawTextNode.getNodeValue());
  Node spanNode=innerDiv.getChild(4);
  assertEquals(Node.ELEMENT_NODE,spanNode.getNodeType());
  assertEquals(""String_Node_Str"",spanNode.getNodeName().toLowerCase());
  assertFalse(spanNode.hasChildNodes());
}","public void testSafeHtmlRendererText(){
  Node innerDiv=docDiv.getFirstChild();
  Node spanWithConstantTextNode=innerDiv.getChild(0);
  assertEquals(""String_Node_Str"",spanWithConstantTextNode.getNodeName().toLowerCase());
  assertEquals(Node.TEXT_NODE,spanWithConstantTextNode.getFirstChild().getNodeType());
  assertEquals(""String_Node_Str"",spanWithConstantTextNode.getFirstChild().getNodeValue());
  Node firstRawTextNode=innerDiv.getChild(1);
  assertEquals(Node.TEXT_NODE,firstRawTextNode.getNodeType());
  assertEquals(""String_Node_Str"",firstRawTextNode.getNodeValue());
  assertSpanContainsRenderedValue(innerDiv);
  Node secondRawTextNode=innerDiv.getChild(3);
  assertEquals(Node.TEXT_NODE,secondRawTextNode.getNodeType());
  assertEquals(""String_Node_Str"",secondRawTextNode.getNodeValue());
  Node spanNode=innerDiv.getChild(4);
  assertEquals(Node.ELEMENT_NODE,spanNode.getNodeType());
  assertEquals(""String_Node_Str"",spanNode.getNodeName().toLowerCase());
  assertFalse(spanNode.hasChildNodes());
  Node spanNode2=innerDiv.getChild(5);
  assertEquals(Node.ELEMENT_NODE,spanNode2.getNodeType());
  assertEquals(""String_Node_Str"",spanNode2.getNodeName().toLowerCase());
  assertTrue(spanNode2.hasChildNodes());
  assertSpanContainsRenderedValueText(RENDERED_VALUE_TWICE + RENDERED_VALUE_TWICE,spanNode2.getFirstChild());
}"
81747,"@Override public void gwtSetUp() throws Exception {
  super.gwtSetUp();
  UiRendererTestApp app=UiRendererTestApp.getInstance();
  safeHtmlUi=app.getSafeHtmlUi();
  renderedHtml=safeHtmlUi.render(RENDERED_VALUE);
  renderer=safeHtmlUi.getRenderer();
  docDiv=Document.get().createDivElement();
  docDiv.setInnerHTML(renderedHtml.asString());
  Document.get().getBody().appendChild(docDiv);
}","@Override public void gwtSetUp() throws Exception {
  super.gwtSetUp();
  UiRendererTestApp app=UiRendererTestApp.getInstance();
  safeHtmlUi=app.getSafeHtmlUi();
  renderedHtml=safeHtmlUi.render(RENDERED_VALUE,RENDERED_VALUE_TWICE);
  renderer=safeHtmlUi.getRenderer();
  docDiv=Document.get().createDivElement();
  docDiv.setInnerHTML(renderedHtml.asString());
  Document.get().getBody().appendChild(docDiv);
}"
81748,"private void assertSpanContainsRenderedValueText(Node renderedValue){
  assertEquals(Node.TEXT_NODE,renderedValue.getNodeType());
  assertEquals(RENDERED_VALUE,renderedValue.getNodeValue());
}","private void assertSpanContainsRenderedValueText(String expectedValue,Node renderedValue){
  assertEquals(Node.TEXT_NODE,renderedValue.getNodeType());
  assertEquals(expectedValue,renderedValue.getNodeValue());
}"
81749,"public SafeHtml render(String value){
  SafeHtmlBuilder sb=new SafeHtmlBuilder();
  getRenderer().render(sb,new Foo(value));
  return sb.toSafeHtml();
}","public SafeHtml render(String value,String valueTwice){
  SafeHtmlBuilder sb=new SafeHtmlBuilder();
  getRenderer().render(sb,new Foo(value),new Foo(valueTwice));
  return sb.toSafeHtml();
}"
81750,"/** 
 * Set the row index of the keyboard selected element.
 * @param index the row index
 * @param stealFocus true to steal focus
 * @param forceUpdate force the update even if the row didn't change
 */
public void setKeyboardSelectedRow(int index,boolean stealFocus,boolean forceUpdate){
  if (KeyboardSelectionPolicy.DISABLED == keyboardSelectionPolicy) {
    return;
  }
  if (keyboardPagingPolicy.isLimitedToRange()) {
    index=Math.max(0,Math.min(index,getVisibleItemCount() - 1));
  }
  ensurePendingState().viewTouched=true;
  if (!forceUpdate && getKeyboardSelectedRow() == index && getKeyboardSelectedRowValue() != null) {
    return;
  }
  int pageStart=getPageStart();
  int pageSize=getPageSize();
  int rowCount=getRowCount();
  int absIndex=pageStart + index;
  if (absIndex >= rowCount && isRowCountExact()) {
    absIndex=rowCount - 1;
  }
  index=Math.max(0,absIndex) - pageStart;
  if (keyboardPagingPolicy.isLimitedToRange()) {
    index=Math.max(0,Math.min(index,pageSize - 1));
  }
  int newPageStart=pageStart;
  int newPageSize=pageSize;
  PendingState<T> pending=ensurePendingState();
  pending.keyboardSelectedRow=0;
  pending.keyboardSelectedRowValue=null;
  pending.keyboardSelectedRowChanged=true;
  if (index >= 0 && index < pageSize) {
    pending.keyboardSelectedRow=index;
    pending.keyboardSelectedRowValue=index < pending.getRowDataSize() ? ensurePendingState().getRowDataValue(index) : null;
    pending.keyboardStealFocus=stealFocus;
    return;
  }
 else   if (KeyboardPagingPolicy.CHANGE_PAGE == keyboardPagingPolicy) {
    while (index < 0) {
      newPageStart-=pageSize;
      index+=pageSize;
    }
    while (index >= pageSize) {
      newPageStart+=pageSize;
      index-=pageSize;
    }
  }
 else   if (KeyboardPagingPolicy.INCREASE_RANGE == keyboardPagingPolicy) {
    while (index < 0) {
      newPageSize+=PAGE_INCREMENT;
      newPageStart-=PAGE_INCREMENT;
      index+=PAGE_INCREMENT;
    }
    if (newPageStart < 0) {
      index+=newPageStart;
      newPageSize+=newPageStart;
      newPageStart=0;
    }
    while (index >= newPageSize) {
      newPageSize+=PAGE_INCREMENT;
    }
    if (isRowCountExact()) {
      newPageSize=Math.min(newPageSize,rowCount - newPageStart);
      if (index >= rowCount) {
        index=rowCount - 1;
      }
    }
  }
  if (newPageStart != pageStart || newPageSize != pageSize) {
    pending.keyboardSelectedRow=index;
    setVisibleRange(new Range(newPageStart,newPageSize),false,false);
  }
}","/** 
 * Set the row index of the keyboard selected element.
 * @param index the row index
 * @param stealFocus true to steal focus
 * @param forceUpdate force the update even if the row didn't change
 */
public void setKeyboardSelectedRow(int index,boolean stealFocus,boolean forceUpdate){
  if (KeyboardSelectionPolicy.DISABLED == keyboardSelectionPolicy) {
    return;
  }
  if (keyboardPagingPolicy.isLimitedToRange()) {
    index=Math.max(0,Math.min(index,getVisibleItemCount() - 1));
  }
  ensurePendingState().viewTouched=true;
  if (!forceUpdate && getKeyboardSelectedRow() == index && getKeyboardSelectedRowValue() != null) {
    return;
  }
  int pageStart=getPageStart();
  int pageSize=getPageSize();
  int rowCount=getRowCount();
  int absIndex=pageStart + index;
  if (absIndex >= rowCount && isRowCountExact()) {
    absIndex=rowCount - 1;
  }
  index=Math.max(0,absIndex) - pageStart;
  if (keyboardPagingPolicy.isLimitedToRange()) {
    index=Math.max(0,Math.min(index,pageSize - 1));
  }
  int newPageStart=pageStart;
  int newPageSize=pageSize;
  PendingState<T> pending=ensurePendingState();
  pending.keyboardSelectedRow=0;
  pending.keyboardSelectedRowValue=null;
  pending.keyboardSelectedRowChanged=true;
  if (index >= 0 && index < pageSize) {
    pending.keyboardSelectedRow=index;
    pending.keyboardSelectedRowValue=index < pending.getRowDataSize() ? ensurePendingState().getRowDataValue(index) : null;
    pending.keyboardStealFocus=stealFocus;
    return;
  }
 else   if (KeyboardPagingPolicy.CHANGE_PAGE == keyboardPagingPolicy) {
    while (index < 0) {
      int shift=Math.min(pageSize,newPageStart);
      newPageStart-=shift;
      index+=shift;
    }
    while (index >= pageSize) {
      newPageStart+=pageSize;
      index-=pageSize;
    }
  }
 else   if (KeyboardPagingPolicy.INCREASE_RANGE == keyboardPagingPolicy) {
    while (index < 0) {
      int shift=Math.min(PAGE_INCREMENT,newPageStart);
      newPageSize+=shift;
      newPageStart-=shift;
      index+=shift;
    }
    if (newPageStart < 0) {
      index+=newPageStart;
      newPageSize+=newPageStart;
      newPageStart=0;
    }
    while (index >= newPageSize) {
      newPageSize+=PAGE_INCREMENT;
    }
    if (isRowCountExact()) {
      newPageSize=Math.min(newPageSize,rowCount - newPageStart);
      if (index >= rowCount) {
        index=rowCount - 1;
      }
    }
  }
  if (newPageStart != pageStart || newPageSize != pageSize) {
    pending.keyboardSelectedRow=index;
    setVisibleRange(new Range(newPageStart,newPageSize),false,false);
  }
}"
81751,"public void testSetKeyboardSelectedRowChangePage(){
  HasData<String> listView=new MockHasData<String>();
  MockView<String> view=new MockView<String>();
  HasDataPresenter<String> presenter=new HasDataPresenter<String>(listView,view,10,null);
  presenter.setVisibleRange(new Range(10,10));
  populatePresenter(presenter);
  presenter.flush();
  assertEquals(KeyboardPagingPolicy.CHANGE_PAGE,presenter.getKeyboardPagingPolicy());
  assertEquals(0,presenter.getKeyboardSelectedRow());
  view.assertKeyboardSelectedRowEmpty();
  presenter.setKeyboardSelectedRow(1,false,false);
  assertEquals(""String_Node_Str"",presenter.getKeyboardSelectedRowValue());
  presenter.flush();
  assertEquals(1,presenter.getKeyboardSelectedRow());
  assertEquals(""String_Node_Str"",presenter.getKeyboardSelectedRowValue());
  view.assertKeyboardSelectedRow(0,false);
  view.assertKeyboardSelectedRow(1,true);
  presenter.setKeyboardSelectedRow(1,false,true);
  assertEquals(""String_Node_Str"",presenter.getKeyboardSelectedRowValue());
  presenter.flush();
  assertEquals(1,presenter.getKeyboardSelectedRow());
  assertEquals(""String_Node_Str"",presenter.getKeyboardSelectedRowValue());
  view.assertKeyboardSelectedRow(1,false);
  view.assertKeyboardSelectedRow(1,true);
  presenter.setKeyboardSelectedRow(9,false,false);
  assertEquals(""String_Node_Str"",presenter.getKeyboardSelectedRowValue());
  presenter.flush();
  assertEquals(9,presenter.getKeyboardSelectedRow());
  assertEquals(""String_Node_Str"",presenter.getKeyboardSelectedRowValue());
  view.assertKeyboardSelectedRow(1,false);
  view.assertKeyboardSelectedRow(9,true);
  assertEquals(10,presenter.getVisibleRange().getStart());
  assertEquals(10,presenter.getVisibleRange().getLength());
  presenter.setKeyboardSelectedRow(10,false,false);
  populatePresenter(presenter);
  assertNull(presenter.getKeyboardSelectedRowValue());
  presenter.flush();
  assertEquals(0,presenter.getKeyboardSelectedRow());
  assertEquals(""String_Node_Str"",presenter.getKeyboardSelectedRowValue());
  view.assertReplaceAllChildrenCalled(10);
  view.assertKeyboardSelectedRowEmpty();
  assertEquals(20,presenter.getVisibleRange().getStart());
  assertEquals(10,presenter.getVisibleRange().getLength());
  presenter.setKeyboardSelectedRow(-1,false,false);
  populatePresenter(presenter);
  assertNull(presenter.getKeyboardSelectedRowValue());
  presenter.flush();
  assertEquals(9,presenter.getKeyboardSelectedRow());
  assertEquals(""String_Node_Str"",presenter.getKeyboardSelectedRowValue());
  view.assertReplaceAllChildrenCalled(10);
  view.assertKeyboardSelectedRowEmpty();
  assertEquals(10,presenter.getVisibleRange().getStart());
  assertEquals(10,presenter.getVisibleRange().getLength());
}","public void testSetKeyboardSelectedRowChangePage(){
  HasData<String> listView=new MockHasData<String>();
  MockView<String> view=new MockView<String>();
  HasDataPresenter<String> presenter=new HasDataPresenter<String>(listView,view,10,null);
  presenter.setVisibleRange(new Range(10,10));
  populatePresenter(presenter);
  presenter.flush();
  assertEquals(KeyboardPagingPolicy.CHANGE_PAGE,presenter.getKeyboardPagingPolicy());
  assertEquals(0,presenter.getKeyboardSelectedRow());
  view.assertKeyboardSelectedRowEmpty();
  presenter.setKeyboardSelectedRow(1,false,false);
  assertEquals(""String_Node_Str"",presenter.getKeyboardSelectedRowValue());
  presenter.flush();
  assertEquals(1,presenter.getKeyboardSelectedRow());
  assertEquals(""String_Node_Str"",presenter.getKeyboardSelectedRowValue());
  view.assertKeyboardSelectedRow(0,false);
  view.assertKeyboardSelectedRow(1,true);
  presenter.setKeyboardSelectedRow(1,false,true);
  assertEquals(""String_Node_Str"",presenter.getKeyboardSelectedRowValue());
  presenter.flush();
  assertEquals(1,presenter.getKeyboardSelectedRow());
  assertEquals(""String_Node_Str"",presenter.getKeyboardSelectedRowValue());
  view.assertKeyboardSelectedRow(1,false);
  view.assertKeyboardSelectedRow(1,true);
  presenter.setKeyboardSelectedRow(9,false,false);
  assertEquals(""String_Node_Str"",presenter.getKeyboardSelectedRowValue());
  presenter.flush();
  assertEquals(9,presenter.getKeyboardSelectedRow());
  assertEquals(""String_Node_Str"",presenter.getKeyboardSelectedRowValue());
  view.assertKeyboardSelectedRow(1,false);
  view.assertKeyboardSelectedRow(9,true);
  assertEquals(10,presenter.getVisibleRange().getStart());
  assertEquals(10,presenter.getVisibleRange().getLength());
  presenter.setKeyboardSelectedRow(10,false,false);
  populatePresenter(presenter);
  assertNull(presenter.getKeyboardSelectedRowValue());
  presenter.flush();
  assertEquals(0,presenter.getKeyboardSelectedRow());
  assertEquals(""String_Node_Str"",presenter.getKeyboardSelectedRowValue());
  view.assertReplaceAllChildrenCalled(10);
  view.assertKeyboardSelectedRowEmpty();
  assertEquals(20,presenter.getVisibleRange().getStart());
  assertEquals(10,presenter.getVisibleRange().getLength());
  presenter.setKeyboardSelectedRow(-1,false,false);
  populatePresenter(presenter);
  assertNull(presenter.getKeyboardSelectedRowValue());
  presenter.flush();
  assertEquals(9,presenter.getKeyboardSelectedRow());
  assertEquals(""String_Node_Str"",presenter.getKeyboardSelectedRowValue());
  view.assertReplaceAllChildrenCalled(10);
  view.assertKeyboardSelectedRowEmpty();
  assertEquals(10,presenter.getVisibleRange().getStart());
  assertEquals(10,presenter.getVisibleRange().getLength());
  presenter.setVisibleRange(new Range(3,10));
  presenter.setKeyboardSelectedRow(3,false,false);
  populatePresenter(presenter);
  presenter.flush();
  presenter.setKeyboardSelectedRow(-4,false,false);
  populatePresenter(presenter);
  presenter.flush();
  assertEquals(0,presenter.getKeyboardSelectedRow());
  assertEquals(0,presenter.getVisibleRange().getStart());
  assertEquals(10,presenter.getVisibleRange().getLength());
}"
81752,"public void testSetKeyboardSelectedRowIncreaseRange(){
  HasData<String> listView=new MockHasData<String>();
  MockView<String> view=new MockView<String>();
  HasDataPresenter<String> presenter=new HasDataPresenter<String>(listView,view,10,null);
  presenter.setVisibleRange(new Range(10,10));
  populatePresenter(presenter);
  presenter.flush();
  presenter.setKeyboardPagingPolicy(KeyboardPagingPolicy.INCREASE_RANGE);
  int pageSize=presenter.getVisibleRange().getLength();
  assertEquals(0,presenter.getKeyboardSelectedRow());
  view.assertKeyboardSelectedRowEmpty();
  presenter.setKeyboardSelectedRow(1,false,false);
  presenter.flush();
  assertEquals(1,presenter.getKeyboardSelectedRow());
  view.assertKeyboardSelectedRow(0,false);
  view.assertKeyboardSelectedRow(1,true);
  presenter.setKeyboardSelectedRow(1,false,true);
  presenter.flush();
  assertEquals(1,presenter.getKeyboardSelectedRow());
  view.assertKeyboardSelectedRow(1,false);
  view.assertKeyboardSelectedRow(1,true);
  presenter.setKeyboardSelectedRow(9,false,false);
  presenter.flush();
  assertEquals(9,presenter.getKeyboardSelectedRow());
  view.assertKeyboardSelectedRow(1,false);
  view.assertKeyboardSelectedRow(9,true);
  assertEquals(10,presenter.getVisibleRange().getStart());
  assertEquals(pageSize,presenter.getVisibleRange().getLength());
  presenter.setKeyboardSelectedRow(10,false,false);
  populatePresenter(presenter);
  presenter.flush();
  assertEquals(10,presenter.getKeyboardSelectedRow());
  view.assertReplaceAllChildrenCalled(pageSize);
  view.assertKeyboardSelectedRowEmpty();
  assertEquals(10,presenter.getVisibleRange().getStart());
  pageSize+=HasDataPresenter.PAGE_INCREMENT;
  assertEquals(pageSize,presenter.getVisibleRange().getLength());
  presenter.setKeyboardSelectedRow(-1,false,false);
  populatePresenter(presenter);
  presenter.flush();
  assertEquals(9,presenter.getKeyboardSelectedRow());
  view.assertReplaceAllChildrenCalled(pageSize);
  view.assertKeyboardSelectedRowEmpty();
  assertEquals(0,presenter.getVisibleRange().getStart());
  pageSize+=10;
  assertEquals(pageSize,presenter.getVisibleRange().getLength());
}","public void testSetKeyboardSelectedRowIncreaseRange(){
  HasData<String> listView=new MockHasData<String>();
  MockView<String> view=new MockView<String>();
  HasDataPresenter<String> presenter=new HasDataPresenter<String>(listView,view,10,null);
  presenter.setVisibleRange(new Range(10,10));
  populatePresenter(presenter);
  presenter.flush();
  presenter.setKeyboardPagingPolicy(KeyboardPagingPolicy.INCREASE_RANGE);
  int pageSize=presenter.getVisibleRange().getLength();
  assertEquals(0,presenter.getKeyboardSelectedRow());
  view.assertKeyboardSelectedRowEmpty();
  presenter.setKeyboardSelectedRow(1,false,false);
  presenter.flush();
  assertEquals(1,presenter.getKeyboardSelectedRow());
  view.assertKeyboardSelectedRow(0,false);
  view.assertKeyboardSelectedRow(1,true);
  presenter.setKeyboardSelectedRow(1,false,true);
  presenter.flush();
  assertEquals(1,presenter.getKeyboardSelectedRow());
  view.assertKeyboardSelectedRow(1,false);
  view.assertKeyboardSelectedRow(1,true);
  presenter.setKeyboardSelectedRow(9,false,false);
  presenter.flush();
  assertEquals(9,presenter.getKeyboardSelectedRow());
  view.assertKeyboardSelectedRow(1,false);
  view.assertKeyboardSelectedRow(9,true);
  assertEquals(10,presenter.getVisibleRange().getStart());
  assertEquals(pageSize,presenter.getVisibleRange().getLength());
  presenter.setKeyboardSelectedRow(10,false,false);
  populatePresenter(presenter);
  presenter.flush();
  assertEquals(10,presenter.getKeyboardSelectedRow());
  view.assertReplaceAllChildrenCalled(pageSize);
  view.assertKeyboardSelectedRowEmpty();
  assertEquals(10,presenter.getVisibleRange().getStart());
  pageSize+=HasDataPresenter.PAGE_INCREMENT;
  assertEquals(pageSize,presenter.getVisibleRange().getLength());
  presenter.setKeyboardSelectedRow(-1,false,false);
  populatePresenter(presenter);
  presenter.flush();
  assertEquals(9,presenter.getKeyboardSelectedRow());
  view.assertReplaceAllChildrenCalled(pageSize);
  view.assertKeyboardSelectedRowEmpty();
  assertEquals(0,presenter.getVisibleRange().getStart());
  pageSize+=10;
  assertEquals(pageSize,presenter.getVisibleRange().getLength());
  presenter.setVisibleRange(new Range(3,10));
  presenter.setKeyboardSelectedRow(3,false,false);
  populatePresenter(presenter);
  presenter.flush();
  presenter.setKeyboardSelectedRow(-4,false,false);
  populatePresenter(presenter);
  presenter.flush();
  assertEquals(0,presenter.getKeyboardSelectedRow());
  assertEquals(0,presenter.getVisibleRange().getStart());
  assertEquals(13,presenter.getVisibleRange().getLength());
}"
81753,"@Override public void onCellPreview(CellPreviewEvent<T> event){
  NativeEvent nativeEvent=event.getNativeEvent();
  String eventType=event.getNativeEvent().getType();
  if (""String_Node_Str"".equals(eventType) && !event.isCellEditing()) {
switch (nativeEvent.getKeyCode()) {
case KeyCodes.KEY_DOWN:
      nextRow();
    handledEvent(event);
  return;
case KeyCodes.KEY_UP:
prevRow();
handledEvent(event);
return;
case KeyCodes.KEY_PAGEDOWN:
nextPage();
handledEvent(event);
return;
case KeyCodes.KEY_PAGEUP:
prevPage();
handledEvent(event);
return;
case KeyCodes.KEY_HOME:
home();
handledEvent(event);
return;
case KeyCodes.KEY_END:
end();
handledEvent(event);
return;
case 32:
handledEvent(event);
return;
}
}
 else if (""String_Node_Str"".equals(eventType)) {
int relRow=event.getIndex() - display.getPageStart();
if (display.getKeyboardSelectedRow() != relRow) {
boolean isFocusable=false;
Element target=Element.as(event.getNativeEvent().getEventTarget());
isFocusable=CellBasedWidgetImpl.get().isFocusable(target);
display.setKeyboardSelectedRow(relRow,!isFocusable);
}
}
 else if (""String_Node_Str"".equals(eventType)) {
int relRow=event.getIndex() - display.getPageStart();
if (display.getKeyboardSelectedRow() != relRow) {
display.setKeyboardSelectedRow(event.getIndex(),false);
return;
}
}
}","@Override public void onCellPreview(CellPreviewEvent<T> event){
  NativeEvent nativeEvent=event.getNativeEvent();
  String eventType=event.getNativeEvent().getType();
  if (""String_Node_Str"".equals(eventType) && !event.isCellEditing()) {
switch (nativeEvent.getKeyCode()) {
case KeyCodes.KEY_DOWN:
      nextRow();
    handledEvent(event);
  return;
case KeyCodes.KEY_UP:
prevRow();
handledEvent(event);
return;
case KeyCodes.KEY_PAGEDOWN:
nextPage();
handledEvent(event);
return;
case KeyCodes.KEY_PAGEUP:
prevPage();
handledEvent(event);
return;
case KeyCodes.KEY_HOME:
home();
handledEvent(event);
return;
case KeyCodes.KEY_END:
end();
handledEvent(event);
return;
case 32:
handledEvent(event);
return;
}
}
 else if (""String_Node_Str"".equals(eventType)) {
int relRow=event.getIndex() - display.getPageStart();
boolean isFocusable=false;
Element target=Element.as(event.getNativeEvent().getEventTarget());
isFocusable=CellBasedWidgetImpl.get().isFocusable(target);
display.setKeyboardSelectedRow(relRow,!isFocusable);
}
 else if (""String_Node_Str"".equals(eventType)) {
int relRow=event.getIndex() - display.getPageStart();
if (display.getKeyboardSelectedRow() != relRow) {
display.setKeyboardSelectedRow(event.getIndex(),false);
return;
}
}
}"
81754,"public Object getKey(String item){
  return Integer.parseInt(item.substring(5));
}","@Override public Object getKey(String item){
  return Integer.parseInt(item.substring(5));
}"
81755,"/** 
 * Test that the correct values are sent to the Cell to be rendered.
 */
public void testRenderWithKeyProvider(){
  final List<String> rendered=new ArrayList<String>();
  final Cell<String> cell=new TextCell(){
    @Override public void render(    Context context,    SafeHtml data,    SafeHtmlBuilder sb){
      int call=rendered.size();
      rendered.add(data.asString());
      assertTrue(""String_Node_Str"",rendered.size() < 11);
      Object key=context.getKey();
      assertEquals(""String_Node_Str"" + call,data.asString());
      assertTrue(key instanceof Integer);
      assertEquals(call,key);
    }
  }
;
  ProvidesKey<String> keyProvider=new ProvidesKey<String>(){
    public Object getKey(    String item){
      return Integer.parseInt(item.substring(5));
    }
  }
;
  CellList<String> cellList=new CellList<String>(cell,keyProvider);
  cellList.setRowData(createData(0,10));
  cellList.getPresenter().flush();
  assertEquals(10,rendered.size());
}","/** 
 * Test that the correct values are sent to the Cell to be rendered.
 */
public void testRenderWithKeyProvider(){
  final List<String> rendered=new ArrayList<String>();
  final Cell<String> cell=new TextCell(){
    @Override public void render(    Context context,    SafeHtml data,    SafeHtmlBuilder sb){
      int call=rendered.size();
      rendered.add(data.asString());
      assertTrue(""String_Node_Str"",rendered.size() < 11);
      Object key=context.getKey();
      assertEquals(""String_Node_Str"" + call,data.asString());
      assertTrue(key instanceof Integer);
      assertEquals(call,key);
    }
  }
;
  ProvidesKey<String> keyProvider=new ProvidesKey<String>(){
    @Override public Object getKey(    String item){
      return Integer.parseInt(item.substring(5));
    }
  }
;
  CellList<String> cellList=new CellList<String>(cell,keyProvider);
  cellList.setRowData(createData(0,10));
  cellList.getPresenter().flush();
  assertEquals(10,rendered.size());
}"
81756,"public void onRowCountChange(RowCountChangeEvent event){
  if (AbstractPager.this.display != null) {
    handleRowCountChange(event.getNewRowCount(),event.isNewRowCountExact());
  }
}","@Override public void onRowCountChange(RowCountChangeEvent event){
  if (AbstractPager.this.display != null) {
    handleRowCountChange(event.getNewRowCount(),event.isNewRowCountExact());
  }
}"
81757,"public void onRangeChange(RangeChangeEvent event){
  if (AbstractPager.this.display != null) {
    onRangeOrRowCountChanged();
  }
}","@Override public void onRangeChange(RangeChangeEvent event){
  if (AbstractPager.this.display != null) {
    onRangeOrRowCountChanged();
  }
}"
81758,"/** 
 * Set the   {@link HasRows} to be paged.
 * @param display the {@link HasRows}
 * @see #getDisplay()
 */
public void setDisplay(HasRows display){
  if (rangeChangeHandler != null) {
    rangeChangeHandler.removeHandler();
    rangeChangeHandler=null;
  }
  if (rowCountChangeHandler != null) {
    rowCountChangeHandler.removeHandler();
    rangeChangeHandler=null;
  }
  this.display=display;
  if (display != null) {
    rangeChangeHandler=display.addRangeChangeHandler(new RangeChangeEvent.Handler(){
      public void onRangeChange(      RangeChangeEvent event){
        if (AbstractPager.this.display != null) {
          onRangeOrRowCountChanged();
        }
      }
    }
);
    rowCountChangeHandler=display.addRowCountChangeHandler(new RowCountChangeEvent.Handler(){
      public void onRowCountChange(      RowCountChangeEvent event){
        if (AbstractPager.this.display != null) {
          handleRowCountChange(event.getNewRowCount(),event.isNewRowCountExact());
        }
      }
    }
);
    onRangeOrRowCountChanged();
  }
}","/** 
 * Set the   {@link HasRows} to be paged.
 * @param display the {@link HasRows}
 * @see #getDisplay()
 */
public void setDisplay(HasRows display){
  if (rangeChangeHandler != null) {
    rangeChangeHandler.removeHandler();
    rangeChangeHandler=null;
  }
  if (rowCountChangeHandler != null) {
    rowCountChangeHandler.removeHandler();
    rowCountChangeHandler=null;
  }
  this.display=display;
  if (display != null) {
    rangeChangeHandler=display.addRangeChangeHandler(new RangeChangeEvent.Handler(){
      @Override public void onRangeChange(      RangeChangeEvent event){
        if (AbstractPager.this.display != null) {
          onRangeOrRowCountChanged();
        }
      }
    }
);
    rowCountChangeHandler=display.addRowCountChangeHandler(new RowCountChangeEvent.Handler(){
      @Override public void onRowCountChange(      RowCountChangeEvent event){
        if (AbstractPager.this.display != null) {
          handleRowCountChange(event.getNewRowCount(),event.isNewRowCountExact());
        }
      }
    }
);
    onRangeOrRowCountChanged();
  }
}"
81759,"/** 
 * Performs a   {@link DOM#getElementById(String)} after attaching the panel'selement into a hidden DIV in the document's body. Attachment is necessary to be able to use the native getElementById. The panel's element will be re-attached to its original parent (if any) after the method returns.
 * @param id the id whose associated element is to be retrieved
 * @return the associated element, or <code>null</code> if none is found
 */
private Element attachToDomAndGetElement(String id){
  if (hiddenDiv == null) {
    hiddenDiv=Document.get().createDivElement();
    UIObject.setVisible(hiddenDiv,false);
    RootPanel.getBodyElement().appendChild(hiddenDiv);
  }
  Element origParent=getElement().getParentElement();
  Element origSibling=getElement().getNextSiblingElement();
  hiddenDiv.appendChild(getElement());
  Element child=Document.get().getElementById(id);
  if (origParent != null) {
    origParent.insertBefore(getElement(),origSibling);
  }
 else {
    hiddenDiv.removeChild(getElement());
  }
  return child;
}","/** 
 * Performs a   {@link Document#getElementById(String)} after attaching the panel'selement into a hidden DIV in the document's body. Attachment is necessary to be able to use the native getElementById. The panel's element will be re-attached to its original parent (if any) after the method returns.
 * @param id the id whose associated element is to be retrieved
 * @return the associated element, or <code>null</code> if none is found
 */
private Element attachToDomAndGetElement(String id){
  if (hiddenDiv == null) {
    hiddenDiv=Document.get().createDivElement();
    UIObject.setVisible(hiddenDiv,false);
    RootPanel.getBodyElement().appendChild(hiddenDiv);
  }
  Element origParent=getElement().getParentElement();
  Element origSibling=getElement().getNextSiblingElement();
  hiddenDiv.appendChild(getElement());
  Element child=Document.get().getElementById(id);
  if (origParent != null) {
    origParent.insertBefore(getElement(),origSibling);
  }
 else {
    hiddenDiv.removeChild(getElement());
  }
  return child;
}"
81760,"/** 
 * Ensures that   {@link HTMLPanel#addAndReplaceChild(Widget,String)} puts thewidget in exactly the right place in the DOM.
 */
public void testAddAndReplaceElement(){
  HTMLPanel hp=new HTMLPanel(""String_Node_Str"");
  Button button=new Button(""String_Node_Str"");
  hp.addAndReplaceElement(button,""String_Node_Str"");
  assertParentId(button,""String_Node_Str"");
  assertIsBetweenSiblings(button,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Ensures that   {@link HTMLPanel#addAndReplaceElement(Widget,String)} putsthe widget in exactly the right place in the DOM.
 */
public void testAddAndReplaceElement(){
  HTMLPanel hp=new HTMLPanel(""String_Node_Str"");
  Button button=new Button(""String_Node_Str"");
  hp.addAndReplaceElement(button,""String_Node_Str"");
  assertParentId(button,""String_Node_Str"");
  assertIsBetweenSiblings(button,""String_Node_Str"",""String_Node_Str"");
}"
81761,"/** 
 * Ensures that  {@link HTMLPanel#addAndReplaceElement(Widget,com.google.gwt.user.client.Element)}puts the widget in exactly the right place in the DOM.
 */
@SuppressWarnings(""String_Node_Str"") public void testAddAndReplaceElementForUserElement(){
  HTMLPanel hp=new HTMLPanel(""String_Node_Str"");
  RootPanel.get().add(hp);
  com.google.gwt.user.client.Element placeholder=hp.getElementById(""String_Node_Str"");
  Button button=new Button(""String_Node_Str"");
  hp.addAndReplaceElement(button,placeholder);
  assertParentId(button,""String_Node_Str"");
  assertIsBetweenSiblings(button,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Ensures that   {@link HTMLPanel#addAndReplaceElement(Widget,Element)} putsthe widget in exactly the right place in the DOM.
 */
@SuppressWarnings(""String_Node_Str"") public void testAddAndReplaceElementForUserElement(){
  HTMLPanel hp=new HTMLPanel(""String_Node_Str"");
  RootPanel.get().add(hp);
  com.google.gwt.user.client.Element placeholder=hp.getElementById(""String_Node_Str"");
  Button button=new Button(""String_Node_Str"");
  hp.addAndReplaceElement(button,placeholder);
  assertParentId(button,""String_Node_Str"");
  assertIsBetweenSiblings(button,""String_Node_Str"",""String_Node_Str"");
}"
81762,"public String getModuleName(){
  return ""String_Node_Str"";
}","@Override public String getModuleName(){
  return ""String_Node_Str"";
}"
81763,"public void addChild(HasWidgets container,Widget child){
  ((HTMLPanel)container).add(child,""String_Node_Str"");
}","@Override public void addChild(HasWidgets container,Widget child){
  ((HTMLPanel)container).add(child,""String_Node_Str"");
}"
81764,"public boolean isRowCountExact(){
  return presenter.isRowCountExact();
}","@Override public boolean isRowCountExact(){
  return presenter.isRowCountExact();
}"
81765,"public ProvidesKey<T> getKeyProvider(){
  return presenter.getKeyProvider();
}","@Override public ProvidesKey<T> getKeyProvider(){
  return presenter.getKeyProvider();
}"
81766,"public void setLoadingState(LoadingState state){
  hasData.isRefreshing=true;
  hasData.onLoadingStateChanged(state);
  hasData.isRefreshing=false;
}","@Override public void setLoadingState(LoadingState state){
  hasData.isRefreshing=true;
  hasData.onLoadingStateChanged(state);
  hasData.isRefreshing=false;
}"
81767,"public HandlerRegistration addCellPreviewHandler(CellPreviewEvent.Handler<T> handler){
  return presenter.addCellPreviewHandler(handler);
}","@Override public HandlerRegistration addCellPreviewHandler(CellPreviewEvent.Handler<T> handler){
  return presenter.addCellPreviewHandler(handler);
}"
81768,"public int getTabIndex(){
  return tabIndex;
}","@Override public int getTabIndex(){
  return tabIndex;
}"
81769,"public int getRowCount(){
  return presenter.getRowCount();
}","@Override public int getRowCount(){
  return presenter.getRowCount();
}"
81770,"public SelectionModel<? super T> getSelectionModel(){
  return presenter.getSelectionModel();
}","@Override public SelectionModel<? super T> getSelectionModel(){
  return presenter.getSelectionModel();
}"
81771,"public KeyboardPagingPolicy getKeyboardPagingPolicy(){
  return presenter.getKeyboardPagingPolicy();
}","@Override public KeyboardPagingPolicy getKeyboardPagingPolicy(){
  return presenter.getKeyboardPagingPolicy();
}"
81772,"public void execute(){
  if (!hasData.resetFocusOnCell()) {
    Element elem=hasData.getKeyboardSelectedElement();
    if (elem != null) {
      elem.focus();
    }
  }
}","@Override public void execute(){
  if (!hasData.resetFocusOnCell()) {
    Element elem=hasData.getKeyboardSelectedElement();
    if (elem != null) {
      elem.focus();
    }
  }
}"
81773,"public void setKeyboardPagingPolicy(KeyboardPagingPolicy policy){
  presenter.setKeyboardPagingPolicy(policy);
}","@Override public void setKeyboardPagingPolicy(KeyboardPagingPolicy policy){
  presenter.setKeyboardPagingPolicy(policy);
}"
81774,"public void setVisibleRange(Range range){
  presenter.setVisibleRange(range);
}","@Override public void setVisibleRange(Range range){
  presenter.setVisibleRange(range);
}"
81775,"public void setVisibleRangeAndClearData(Range range,boolean forceRangeChangeEvent){
  presenter.setVisibleRangeAndClearData(range,forceRangeChangeEvent);
}","@Override public void setVisibleRangeAndClearData(Range range,boolean forceRangeChangeEvent){
  presenter.setVisibleRangeAndClearData(range,forceRangeChangeEvent);
}"
81776,"/** 
 * {@inheritDoc}
 * @see #getAccessKey()
 */
public void setAccessKey(char key){
  this.accessKey=key;
  setKeyboardSelected(getKeyboardSelectedRow(),true,false);
}","/** 
 * {@inheritDoc}
 * @see #getAccessKey()
 */
@Override public void setAccessKey(char key){
  this.accessKey=key;
  setKeyboardSelected(getKeyboardSelectedRow(),true,false);
}"
81777,"public void setRowData(int start,List<? extends T> values){
  presenter.setRowData(start,values);
}","@Override public void setRowData(int start,List<? extends T> values){
  presenter.setRowData(start,values);
}"
81778,"public int getVisibleItemCount(){
  return presenter.getVisibleItemCount();
}","@Override public int getVisibleItemCount(){
  return presenter.getVisibleItemCount();
}"
81779,"public void setKeyboardSelectionPolicy(KeyboardSelectionPolicy policy){
  presenter.setKeyboardSelectionPolicy(policy);
}","@Override public void setKeyboardSelectionPolicy(KeyboardSelectionPolicy policy){
  presenter.setKeyboardSelectionPolicy(policy);
}"
81780,"public void render(SafeHtmlBuilder sb,List<T> values,int start,SelectionModel<? super T> selectionModel){
  hasData.renderRowValues(sb,values,start,selectionModel);
}","@Override public void render(SafeHtmlBuilder sb,List<T> values,int start,SelectionModel<? super T> selectionModel){
  hasData.renderRowValues(sb,values,start,selectionModel);
}"
81781,"public <H extends EventHandler>HandlerRegistration addHandler(H handler,Type<H> type){
  return hasData.addHandler(handler,type);
}","@Override public <H extends EventHandler>HandlerRegistration addHandler(H handler,Type<H> type){
  return hasData.addHandler(handler,type);
}"
81782,"public HandlerRegistration addRangeChangeHandler(RangeChangeEvent.Handler handler){
  return presenter.addRangeChangeHandler(handler);
}","@Override public HandlerRegistration addRangeChangeHandler(RangeChangeEvent.Handler handler){
  return presenter.addRangeChangeHandler(handler);
}"
81783,"public void setFocus(boolean focused){
  Element elem=getKeyboardSelectedElement();
  if (elem != null) {
    if (focused) {
      elem.focus();
    }
 else {
      elem.blur();
    }
  }
}","@Override public void setFocus(boolean focused){
  Element elem=getKeyboardSelectedElement();
  if (elem != null) {
    if (focused) {
      elem.focus();
    }
 else {
      elem.blur();
    }
  }
}"
81784,"public HandlerRegistration addRowCountChangeHandler(RowCountChangeEvent.Handler handler){
  return presenter.addRowCountChangeHandler(handler);
}","@Override public HandlerRegistration addRowCountChangeHandler(RowCountChangeEvent.Handler handler){
  return presenter.addRowCountChangeHandler(handler);
}"
81785,"public Range getVisibleRange(){
  return presenter.getVisibleRange();
}","@Override public Range getVisibleRange(){
  return presenter.getVisibleRange();
}"
81786,"public KeyboardSelectionPolicy getKeyboardSelectionPolicy(){
  return presenter.getKeyboardSelectionPolicy();
}","@Override public KeyboardSelectionPolicy getKeyboardSelectionPolicy(){
  return presenter.getKeyboardSelectionPolicy();
}"
81787,"public void setTabIndex(int index){
  this.tabIndex=index;
  setKeyboardSelected(getKeyboardSelectedRow(),true,false);
}","@Override public void setTabIndex(int index){
  this.tabIndex=index;
  setKeyboardSelected(getKeyboardSelectedRow(),true,false);
}"
81788,"public T getVisibleItem(int indexOnPage){
  checkRowBounds(indexOnPage);
  return presenter.getVisibleItem(indexOnPage);
}","@Override public T getVisibleItem(int indexOnPage){
  checkRowBounds(indexOnPage);
  return presenter.getVisibleItem(indexOnPage);
}"
81789,"public void setRowCount(int size,boolean isExact){
  presenter.setRowCount(size,isExact);
}","@Override public void setRowCount(int size,boolean isExact){
  presenter.setRowCount(size,isExact);
}"
81790,"public void resetFocus(){
  if (wasFocused) {
    CellBasedWidgetImpl.get().resetFocus(new Scheduler.ScheduledCommand(){
      public void execute(){
        if (!hasData.resetFocusOnCell()) {
          Element elem=hasData.getKeyboardSelectedElement();
          if (elem != null) {
            elem.focus();
          }
        }
      }
    }
);
  }
}","@Override public void resetFocus(){
  if (wasFocused) {
    CellBasedWidgetImpl.get().resetFocus(new Scheduler.ScheduledCommand(){
      @Override public void execute(){
        if (!hasData.resetFocusOnCell()) {
          Element elem=hasData.getKeyboardSelectedElement();
          if (elem != null) {
            elem.focus();
          }
        }
      }
    }
);
  }
}"
81791,"/** 
 * Return the row values that the widget is currently displaying as an immutable list.
 * @return a List of displayed items
 */
public List<T> getVisibleItems(){
  return presenter.getVisibleItems();
}","/** 
 * Return the row values that the widget is currently displaying as an immutable list.
 * @return a List of displayed items
 */
@Override public List<T> getVisibleItems(){
  return presenter.getVisibleItems();
}"
81792,"@Override public void replaceAllChildren(List<C> values,SafeHtml html,boolean stealFocus){
  if (nodeView.tree.isAnimationEnabled()) {
    nodeView.ensureAnimationFrame().getStyle().setDisplay(Display.NONE);
  }
  nodeView.tree.isRefreshing=true;
  Map<Object,CellTreeNodeView<?>> savedViews=saveChildState(values,0);
  AbstractHasData.replaceAllChildren(nodeView.tree,childContainer,html);
  nodeView.tree.isRefreshing=false;
  int size=values.size();
  int childCount=nodeView.children.size();
  while (childCount > size) {
    childCount--;
    nodeView.children.remove(childCount);
  }
  loadChildState(values,0,savedViews);
  if (nodeView.isRootNode() && nodeView.tree.getKeyboardSelectedNode() == nodeView && values.size() > 0) {
    nodeView.tree.keyboardSelect(nodeView.children.get(0),false);
  }
  if (nodeView.tree.isAnimationEnabled()) {
    nodeView.tree.maybeAnimateTreeNode(nodeView);
  }
}","@Override public void replaceAllChildren(List<C> values,SafeHtml html,boolean stealFocus,boolean contentChanged){
  if (nodeView.tree.isAnimationEnabled()) {
    nodeView.ensureAnimationFrame().getStyle().setDisplay(Display.NONE);
  }
  nodeView.tree.isRefreshing=true;
  Map<Object,CellTreeNodeView<?>> savedViews=saveChildState(values,0);
  if (contentChanged) {
    AbstractHasData.replaceAllChildren(nodeView.tree,childContainer,html);
  }
  nodeView.tree.isRefreshing=false;
  int size=values.size();
  int childCount=nodeView.children.size();
  while (childCount > size) {
    childCount--;
    nodeView.children.remove(childCount);
  }
  loadChildState(values,0,savedViews);
  if (nodeView.isRootNode() && nodeView.tree.getKeyboardSelectedNode() == nodeView && values.size() > 0) {
    nodeView.tree.keyboardSelect(nodeView.children.get(0),false);
  }
  if (nodeView.tree.isAnimationEnabled()) {
    nodeView.tree.maybeAnimateTreeNode(nodeView);
  }
}"
81793,"public boolean isRowCountExact(){
  return presenter.isRowCountExact();
}","@Override public boolean isRowCountExact(){
  return presenter.isRowCountExact();
}"
81794,"public void fireEvent(GwtEvent<?> event){
  handlerManger.fireEvent(event);
}","@Override public void fireEvent(GwtEvent<?> event){
  handlerManger.fireEvent(event);
}"
81795,"public void setLoadingState(LoadingState state){
  nodeView.updateImage(state == LoadingState.LOADING);
  showOrHide(nodeView.emptyMessageElem,state == LoadingState.LOADED && presenter.isEmpty());
}","@Override public void setLoadingState(LoadingState state){
  nodeView.updateImage(state == LoadingState.LOADING);
  showOrHide(nodeView.emptyMessageElem,state == LoadingState.LOADED && presenter.isEmpty());
}"
81796,"public void onRowCountChange(RowCountChangeEvent event){
  int rowCount=event.getNewRowCount();
  boolean isExact=event.isNewRowCountExact();
  int pageSize=getVisibleRange().getLength();
  showOrHide(nodeView.showMoreElem,isExact && rowCount > pageSize);
}","@Override public void onRowCountChange(RowCountChangeEvent event){
  int rowCount=event.getNewRowCount();
  boolean isExact=event.isNewRowCountExact();
  int pageSize=getVisibleRange().getLength();
  showOrHide(nodeView.showMoreElem,isExact && rowCount > pageSize);
}"
81797,"public HandlerRegistration addCellPreviewHandler(Handler<C> handler){
  return presenter.addCellPreviewHandler(handler);
}","@Override public HandlerRegistration addCellPreviewHandler(Handler<C> handler){
  return presenter.addCellPreviewHandler(handler);
}"
81798,"public boolean isChildLeaf(int index){
  assertNotDestroyed();
  checkChildBounds(index);
  flush();
  return nodeView.getChildNode(index).isLeaf();
}","@Override public boolean isChildLeaf(int index){
  assertNotDestroyed();
  checkChildBounds(index);
  flush();
  return nodeView.getChildNode(index).isLeaf();
}"
81799,"public void replaceChildren(List<C> values,int start,SafeHtml html,boolean stealFocus){
  Map<Object,CellTreeNodeView<?>> savedViews=saveChildState(values,start);
  nodeView.tree.isRefreshing=true;
  Element newChildren=AbstractHasData.convertToElements(nodeView.tree,getTmpElem(),html);
  AbstractHasData.replaceChildren(nodeView.tree,childContainer,newChildren,start,html);
  nodeView.tree.isRefreshing=false;
  loadChildState(values,start,savedViews);
}","@Override public void replaceChildren(List<C> values,int start,SafeHtml html,boolean stealFocus){
  Map<Object,CellTreeNodeView<?>> savedViews=saveChildState(values,start);
  nodeView.tree.isRefreshing=true;
  Element newChildren=AbstractHasData.convertToElements(nodeView.tree,getTmpElem(),html);
  AbstractHasData.replaceChildren(nodeView.tree,childContainer,newChildren,start,html);
  nodeView.tree.isRefreshing=false;
  loadChildState(values,start,savedViews);
}"
81800,"public int getRowCount(){
  return presenter.getRowCount();
}","@Override public int getRowCount(){
  return presenter.getRowCount();
}"
81801,"public SelectionModel<? super C> getSelectionModel(){
  return presenter.getSelectionModel();
}","@Override public SelectionModel<? super C> getSelectionModel(){
  return presenter.getSelectionModel();
}"
81802,"public void execute(){
  tree.setFocus(true);
}","@Override public void execute(){
  tree.setFocus(true);
}"
81803,"/** 
 * Reload the open children after rendering new items in this node.
 * @param values the values being replaced
 * @param start the start index
 * @param savedViews the open nodes
 */
private void loadChildState(List<C> values,int start,Map<Object,CellTreeNodeView<?>> savedViews){
  int len=values.size();
  int end=start + len;
  int childCount=nodeView.getChildCount();
  ProvidesKey<C> keyProvider=nodeInfo.getProvidesKey();
  Element container=nodeView.ensureChildContainer();
  Element childElem=container.getChild(start).cast();
  CellTreeNodeView<?> keyboardSelected=nodeView.tree.getKeyboardSelectedNode();
  for (int i=start; i < end; i++) {
    C childValue=values.get(i - start);
    CellTreeNodeView<C> child=nodeView.createTreeNodeView(nodeInfo,childElem,childValue,null);
    CellTreeNodeView<?> savedChild=savedViews.remove(keyProvider.getKey(childValue));
    if (savedChild != null) {
      child.animationFrame=savedChild.animationFrame;
      child.contentContainer=savedChild.contentContainer;
      child.childContainer=savedChild.childContainer;
      child.children=savedChild.children;
      child.emptyMessageElem=savedChild.emptyMessageElem;
      child.nodeInfo=savedChild.nodeInfo;
      child.nodeInfoLoaded=savedChild.nodeInfoLoaded;
      child.open=savedChild.open;
      child.showMoreElem=savedChild.showMoreElem;
      child.treeNode=savedChild.treeNode;
      if (child.treeNode != null) {
        child.treeNode.nodeView=child;
      }
      child.listView=savedChild.listView;
      if (child.listView != null) {
        child.listView.nodeView=child;
      }
      if (child.children != null) {
        for (        CellTreeNodeView<?> grandchild : child.children) {
          grandchild.parentNode=child;
        }
      }
      if (keyboardSelected == savedChild) {
        keyboardSelected=child;
      }
      child.getElement().appendChild(savedChild.ensureAnimationFrame());
      savedChild.isDestroyed=true;
    }
    if (childCount > i) {
      nodeView.children.set(i,child);
    }
 else {
      nodeView.children.add(child);
    }
    childElem=childElem.getNextSiblingElement();
  }
  CellTreeNodeView<?> curNode=keyboardSelected;
  while (curNode != null) {
    if (curNode == nodeView) {
      nodeView.tree.keyboardSelect(keyboardSelected,false);
      break;
    }
    curNode=curNode.parentNode;
  }
}","/** 
 * Reload the open children after rendering new items in this node.
 * @param values the values being replaced
 * @param start the start index
 * @param savedViews the open nodes
 */
private void loadChildState(List<C> values,int start,Map<Object,CellTreeNodeView<?>> savedViews){
  int len=values.size();
  int end=start + len;
  int childCount=nodeView.getChildCount();
  ProvidesKey<C> keyProvider=nodeInfo.getProvidesKey();
  Element container=nodeView.ensureChildContainer();
  Element childElem=(values.size() == 0) ? null : Element.as(container.getChild(start));
  CellTreeNodeView<?> keyboardSelected=nodeView.tree.getKeyboardSelectedNode();
  for (int i=start; i < end; i++) {
    C childValue=values.get(i - start);
    CellTreeNodeView<C> child=nodeView.createTreeNodeView(nodeInfo,childElem,childValue,null);
    CellTreeNodeView<?> savedChild=savedViews.remove(keyProvider.getKey(childValue));
    if (savedChild != null) {
      child.animationFrame=savedChild.animationFrame;
      child.contentContainer=savedChild.contentContainer;
      child.childContainer=savedChild.childContainer;
      child.children=savedChild.children;
      child.emptyMessageElem=savedChild.emptyMessageElem;
      child.nodeInfo=savedChild.nodeInfo;
      child.nodeInfoLoaded=savedChild.nodeInfoLoaded;
      child.open=savedChild.open;
      child.showMoreElem=savedChild.showMoreElem;
      child.treeNode=savedChild.treeNode;
      if (child.treeNode != null) {
        child.treeNode.nodeView=child;
      }
      child.listView=savedChild.listView;
      if (child.listView != null) {
        child.listView.nodeView=child;
      }
      if (child.children != null) {
        for (        CellTreeNodeView<?> grandchild : child.children) {
          grandchild.parentNode=child;
        }
      }
      if (keyboardSelected == savedChild) {
        keyboardSelected=child;
      }
      child.getElement().appendChild(savedChild.ensureAnimationFrame());
      savedChild.isDestroyed=true;
    }
    if (childCount > i) {
      nodeView.children.set(i,child);
    }
 else {
      nodeView.children.add(child);
    }
    childElem=childElem.getNextSiblingElement();
  }
  CellTreeNodeView<?> curNode=keyboardSelected;
  while (curNode != null) {
    if (curNode == nodeView) {
      nodeView.tree.keyboardSelect(keyboardSelected,false);
      break;
    }
    curNode=curNode.parentNode;
  }
}"
81804,"public void setSelectionModel(final SelectionModel<? super C> selectionModel){
  presenter.setSelectionModel(selectionModel);
}","@Override public void setSelectionModel(final SelectionModel<? super C> selectionModel){
  presenter.setSelectionModel(selectionModel);
}"
81805,"public void setVisibleRange(Range range){
  presenter.setVisibleRange(range);
}","@Override public void setVisibleRange(Range range){
  presenter.setVisibleRange(range);
}"
81806,"public void setVisibleRangeAndClearData(Range range,boolean forceRangeChangeEvent){
  presenter.setVisibleRangeAndClearData(range,forceRangeChangeEvent);
}","@Override public void setVisibleRangeAndClearData(Range range,boolean forceRangeChangeEvent){
  presenter.setVisibleRangeAndClearData(range,forceRangeChangeEvent);
}"
81807,"public void replaceAllChildren(List<C> values,SafeHtml html,boolean stealFocus){
  if (nodeView.tree.isAnimationEnabled()) {
    nodeView.ensureAnimationFrame().getStyle().setDisplay(Display.NONE);
  }
  nodeView.tree.isRefreshing=true;
  Map<Object,CellTreeNodeView<?>> savedViews=saveChildState(values,0);
  AbstractHasData.replaceAllChildren(nodeView.tree,childContainer,html);
  nodeView.tree.isRefreshing=false;
  int size=values.size();
  int childCount=nodeView.children.size();
  while (childCount > size) {
    childCount--;
    nodeView.children.remove(childCount);
  }
  loadChildState(values,0,savedViews);
  if (nodeView.isRootNode() && nodeView.tree.getKeyboardSelectedNode() == nodeView && values.size() > 0) {
    nodeView.tree.keyboardSelect(nodeView.children.get(0),false);
  }
  if (nodeView.tree.isAnimationEnabled()) {
    nodeView.tree.maybeAnimateTreeNode(nodeView);
  }
}","@Override public void replaceAllChildren(List<C> values,SafeHtml html,boolean stealFocus){
  if (nodeView.tree.isAnimationEnabled()) {
    nodeView.ensureAnimationFrame().getStyle().setDisplay(Display.NONE);
  }
  nodeView.tree.isRefreshing=true;
  Map<Object,CellTreeNodeView<?>> savedViews=saveChildState(values,0);
  AbstractHasData.replaceAllChildren(nodeView.tree,childContainer,html);
  nodeView.tree.isRefreshing=false;
  int size=values.size();
  int childCount=nodeView.children.size();
  while (childCount > size) {
    childCount--;
    nodeView.children.remove(childCount);
  }
  loadChildState(values,0,savedViews);
  if (nodeView.isRootNode() && nodeView.tree.getKeyboardSelectedNode() == nodeView && values.size() > 0) {
    nodeView.tree.keyboardSelect(nodeView.children.get(0),false);
  }
  if (nodeView.tree.isAnimationEnabled()) {
    nodeView.tree.maybeAnimateTreeNode(nodeView);
  }
}"
81808,"public void setRowData(int start,List<? extends C> values){
  presenter.setRowData(start,values);
}","@Override public void setRowData(int start,List<? extends C> values){
  presenter.setRowData(start,values);
}"
81809,"public int getVisibleItemCount(){
  return presenter.getVisibleItemCount();
}","@Override public int getVisibleItemCount(){
  return presenter.getVisibleItemCount();
}"
81810,"public Object getChildValue(int index){
  assertNotDestroyed();
  checkChildBounds(index);
  flush();
  return nodeView.getChildNode(index).value;
}","@Override public Object getChildValue(int index){
  assertNotDestroyed();
  checkChildBounds(index);
  flush();
  return nodeView.getChildNode(index).value;
}"
81811,"public TreeNode setChildOpen(int index,boolean open,boolean fireEvents){
  assertNotDestroyed();
  checkChildBounds(index);
  CellTreeNodeView<?> child=nodeView.getChildNode(index);
  return child.setOpen(open,fireEvents) ? child.treeNode : null;
}","@Override public TreeNode setChildOpen(int index,boolean open,boolean fireEvents){
  assertNotDestroyed();
  checkChildBounds(index);
  CellTreeNodeView<?> child=nodeView.getChildNode(index);
  return child.setOpen(open,fireEvents) ? child.treeNode : null;
}"
81812,"/** 
 * Fire an event to the   {@link com.google.gwt.cell.client.AbstractCell}.
 * @param event the native event
 */
@SuppressWarnings(""String_Node_Str"") protected void fireEventToCell(NativeEvent event){
  if (parentNodeInfo == null) {
    return;
  }
  Cell<T> parentCell=parentNodeInfo.getCell();
  String eventType=event.getType();
  Element cellParent=getCellParent();
  Object key=getValueKey();
  Context context=new Context(getIndex(),0,key);
  boolean cellWasEditing=parentCell.isEditing(context,cellParent,value);
  boolean isSelectionHandled=parentCell.handlesSelection() || KeyboardSelectionPolicy.BOUND_TO_SELECTION == tree.getKeyboardSelectionPolicy();
  HasData<T> display=(HasData<T>)parentNode.listView;
  CellPreviewEvent<T> previewEvent=CellPreviewEvent.fire(display,event,display,context,value,cellWasEditing,isSelectionHandled);
  if (previewEvent.isCanceled() || !cellParent.isOrHasChild(Element.as(event.getEventTarget()))) {
    return;
  }
  Set<String> consumedEvents=parentCell.getConsumedEvents();
  if (consumedEvents != null && consumedEvents.contains(eventType)) {
    parentCell.onBrowserEvent(context,cellParent,value,event,parentNodeInfo.getValueUpdater());
    tree.cellIsEditing=parentCell.isEditing(context,cellParent,value);
    if (cellWasEditing && !tree.cellIsEditing) {
      CellBasedWidgetImpl.get().resetFocus(new Scheduler.ScheduledCommand(){
        public void execute(){
          tree.setFocus(true);
        }
      }
);
    }
  }
}","/** 
 * Fire an event to the   {@link com.google.gwt.cell.client.AbstractCell}.
 * @param event the native event
 */
@SuppressWarnings(""String_Node_Str"") protected void fireEventToCell(NativeEvent event){
  if (parentNodeInfo == null) {
    return;
  }
  Cell<T> parentCell=parentNodeInfo.getCell();
  String eventType=event.getType();
  Element cellParent=getCellParent();
  Object key=getValueKey();
  Context context=new Context(getIndex(),0,key);
  boolean cellWasEditing=parentCell.isEditing(context,cellParent,value);
  boolean isSelectionHandled=parentCell.handlesSelection() || KeyboardSelectionPolicy.BOUND_TO_SELECTION == tree.getKeyboardSelectionPolicy();
  HasData<T> display=(HasData<T>)parentNode.listView;
  CellPreviewEvent<T> previewEvent=CellPreviewEvent.fire(display,event,display,context,value,cellWasEditing,isSelectionHandled);
  if (previewEvent.isCanceled() || !cellParent.isOrHasChild(Element.as(event.getEventTarget()))) {
    return;
  }
  Set<String> consumedEvents=parentCell.getConsumedEvents();
  if (consumedEvents != null && consumedEvents.contains(eventType)) {
    parentCell.onBrowserEvent(context,cellParent,value,event,parentNodeInfo.getValueUpdater());
    tree.cellIsEditing=parentCell.isEditing(context,cellParent,value);
    if (cellWasEditing && !tree.cellIsEditing) {
      CellBasedWidgetImpl.get().resetFocus(new Scheduler.ScheduledCommand(){
        @Override public void execute(){
          tree.setFocus(true);
        }
      }
);
    }
  }
}"
81813,"public void render(SafeHtmlBuilder sb,List<C> values,int start,SelectionModel<? super C> selectionModel){
  CellTree.Style style=nodeView.tree.getStyle();
  String itemValueStyle=style.cellTreeItemValue();
  String selectedStyle=""String_Node_Str"" + style.cellTreeSelectedItem();
  String itemStyle=style.cellTreeItem();
  String itemImageValueStyle=""String_Node_Str"" + style.cellTreeItemImageValue();
  String openStyle=""String_Node_Str"" + style.cellTreeOpenItem();
  String topStyle=""String_Node_Str"" + style.cellTreeTopItem();
  String topImageValueStyle=""String_Node_Str"" + style.cellTreeTopItemImageValue();
  boolean isRootNode=nodeView.isRootNode();
  SafeHtml openImage=nodeView.tree.getOpenImageHtml(isRootNode);
  SafeHtml closedImage=nodeView.tree.getClosedImageHtml(isRootNode);
  int imageWidth=nodeView.tree.getImageWidth();
  String paddingDirection=LocaleInfo.getCurrentLocale().isRTL() ? ""String_Node_Str"" : ""String_Node_Str"";
  int paddingAmount=imageWidth * nodeView.depth;
  Set<Object> openNodes=new HashSet<Object>();
  int childCount=nodeView.getChildCount();
  int end=start + values.size();
  for (int i=start; i < end && i < childCount; i++) {
    CellTreeNodeView<?> child=nodeView.getChildNode(i);
    if (child.isOpen()) {
      openNodes.add(child.getValueKey());
    }
  }
  ProvidesKey<C> keyProvider=nodeInfo.getProvidesKey();
  TreeViewModel model=nodeView.tree.getTreeViewModel();
  for (int i=start; i < end; i++) {
    C value=values.get(i - start);
    Object key=keyProvider.getKey(value);
    boolean isOpen=openNodes.contains(key);
    StringBuilder outerClasses=new StringBuilder(itemStyle);
    if (isOpen) {
      outerClasses.append(openStyle);
    }
    if (isRootNode) {
      outerClasses.append(topStyle);
    }
    if (selectionModel != null && selectionModel.isSelected(value)) {
      outerClasses.append(selectedStyle);
    }
    StringBuilder innerClasses=new StringBuilder(itemStyle);
    innerClasses.append(itemImageValueStyle);
    if (isRootNode) {
      innerClasses.append(topImageValueStyle);
    }
    SafeHtml image;
    if (isOpen) {
      image=openImage;
    }
 else     if (model.isLeaf(value)) {
      image=LEAF_IMAGE;
    }
 else {
      image=closedImage;
    }
    SafeHtmlBuilder cellBuilder=new SafeHtmlBuilder();
    Context context=new Context(i,0,key);
    cell.render(context,value,cellBuilder);
    SafeStyles innerPadding=SafeStylesUtils.fromTrustedString(""String_Node_Str"" + paddingDirection + ""String_Node_Str""+ imageWidth+ ""String_Node_Str"");
    SafeHtml innerDiv=template.innerDiv(innerPadding,innerClasses.toString(),image,itemValueStyle,cellBuilder.toSafeHtml());
    SafeStyles outerPadding=SafeStylesUtils.fromTrustedString(""String_Node_Str"" + paddingDirection + ""String_Node_Str""+ paddingAmount+ ""String_Node_Str"");
    sb.append(template.outerDiv(outerPadding,outerClasses.toString(),innerDiv));
  }
}","@Override public void render(SafeHtmlBuilder sb,List<C> values,int start,SelectionModel<? super C> selectionModel){
  CellTree.Style style=nodeView.tree.getStyle();
  String itemValueStyle=style.cellTreeItemValue();
  String selectedStyle=""String_Node_Str"" + style.cellTreeSelectedItem();
  String itemStyle=style.cellTreeItem();
  String itemImageValueStyle=""String_Node_Str"" + style.cellTreeItemImageValue();
  String openStyle=""String_Node_Str"" + style.cellTreeOpenItem();
  String topStyle=""String_Node_Str"" + style.cellTreeTopItem();
  String topImageValueStyle=""String_Node_Str"" + style.cellTreeTopItemImageValue();
  boolean isRootNode=nodeView.isRootNode();
  SafeHtml openImage=nodeView.tree.getOpenImageHtml(isRootNode);
  SafeHtml closedImage=nodeView.tree.getClosedImageHtml(isRootNode);
  int imageWidth=nodeView.tree.getImageWidth();
  String paddingDirection=LocaleInfo.getCurrentLocale().isRTL() ? ""String_Node_Str"" : ""String_Node_Str"";
  int paddingAmount=imageWidth * nodeView.depth;
  Set<Object> openNodes=new HashSet<Object>();
  int childCount=nodeView.getChildCount();
  int end=start + values.size();
  for (int i=start; i < end && i < childCount; i++) {
    CellTreeNodeView<?> child=nodeView.getChildNode(i);
    if (child.isOpen()) {
      openNodes.add(child.getValueKey());
    }
  }
  ProvidesKey<C> keyProvider=nodeInfo.getProvidesKey();
  TreeViewModel model=nodeView.tree.getTreeViewModel();
  for (int i=start; i < end; i++) {
    C value=values.get(i - start);
    Object key=keyProvider.getKey(value);
    boolean isOpen=openNodes.contains(key);
    StringBuilder outerClasses=new StringBuilder(itemStyle);
    if (isOpen) {
      outerClasses.append(openStyle);
    }
    if (isRootNode) {
      outerClasses.append(topStyle);
    }
    if (selectionModel != null && selectionModel.isSelected(value)) {
      outerClasses.append(selectedStyle);
    }
    StringBuilder innerClasses=new StringBuilder(itemStyle);
    innerClasses.append(itemImageValueStyle);
    if (isRootNode) {
      innerClasses.append(topImageValueStyle);
    }
    SafeHtml image;
    if (isOpen) {
      image=openImage;
    }
 else     if (model.isLeaf(value)) {
      image=LEAF_IMAGE;
    }
 else {
      image=closedImage;
    }
    SafeHtmlBuilder cellBuilder=new SafeHtmlBuilder();
    Context context=new Context(i,0,key);
    cell.render(context,value,cellBuilder);
    SafeStyles innerPadding=SafeStylesUtils.fromTrustedString(""String_Node_Str"" + paddingDirection + ""String_Node_Str""+ imageWidth+ ""String_Node_Str"");
    SafeHtml innerDiv=template.innerDiv(innerPadding,innerClasses.toString(),image,itemValueStyle,cellBuilder.toSafeHtml());
    SafeStyles outerPadding=SafeStylesUtils.fromTrustedString(""String_Node_Str"" + paddingDirection + ""String_Node_Str""+ paddingAmount+ ""String_Node_Str"");
    sb.append(template.outerDiv(outerPadding,outerClasses.toString(),innerDiv));
  }
}"
81814,"public <H extends EventHandler>HandlerRegistration addHandler(H handler,Type<H> type){
  return handlerManger.addHandler(type,handler);
}","@Override public <H extends EventHandler>HandlerRegistration addHandler(H handler,Type<H> type){
  return handlerManger.addHandler(type,handler);
}"
81815,"public TreeNode getParent(){
  assertNotDestroyed();
  return getParentImpl();
}","@Override public TreeNode getParent(){
  assertNotDestroyed();
  return getParentImpl();
}"
81816,"public HandlerRegistration addRangeChangeHandler(RangeChangeEvent.Handler handler){
  return presenter.addRangeChangeHandler(handler);
}","@Override public HandlerRegistration addRangeChangeHandler(RangeChangeEvent.Handler handler){
  return presenter.addRangeChangeHandler(handler);
}"
81817,"public HandlerRegistration addRowCountChangeHandler(RowCountChangeEvent.Handler handler){
  return presenter.addRowCountChangeHandler(handler);
}","@Override public HandlerRegistration addRowCountChangeHandler(RowCountChangeEvent.Handler handler){
  return presenter.addRowCountChangeHandler(handler);
}"
81818,"public Range getVisibleRange(){
  return presenter.getVisibleRange();
}","@Override public Range getVisibleRange(){
  return presenter.getVisibleRange();
}"
81819,"public Object getValue(){
  return nodeView.value;
}","@Override public Object getValue(){
  return nodeView.value;
}"
81820,"public boolean isChildOpen(int index){
  assertNotDestroyed();
  checkChildBounds(index);
  flush();
  return nodeView.getChildNode(index).isOpen();
}","@Override public boolean isChildOpen(int index){
  assertNotDestroyed();
  checkChildBounds(index);
  flush();
  return nodeView.getChildNode(index).isOpen();
}"
81821,"public C getVisibleItem(int indexOnPage){
  return presenter.getVisibleItem(indexOnPage);
}","@Override public C getVisibleItem(int indexOnPage){
  return presenter.getVisibleItem(indexOnPage);
}"
81822,"public void setRowCount(int size,boolean isExact){
  presenter.setRowCount(size,isExact);
}","@Override public void setRowCount(int size,boolean isExact){
  presenter.setRowCount(size,isExact);
}"
81823,"public void resetFocus(){
  nodeView.tree.resetFocus();
}","@Override public void resetFocus(){
  nodeView.tree.resetFocus();
}"
81824,"public NodeCellList(final NodeInfo<C> nodeInfo,final CellTreeNodeView<?> nodeView,int pageSize){
  this.defaultPageSize=pageSize;
  this.nodeInfo=nodeInfo;
  this.nodeView=nodeView;
  cell=nodeInfo.getCell();
  presenter=new HasDataPresenter<C>(this,new View(nodeView.ensureChildContainer()),pageSize,nodeInfo.getProvidesKey());
  presenter.setKeyboardSelectionPolicy(KeyboardSelectionPolicy.DISABLED);
  presenter.addRowCountChangeHandler(new RowCountChangeEvent.Handler(){
    public void onRowCountChange(    RowCountChangeEvent event){
      int rowCount=event.getNewRowCount();
      boolean isExact=event.isNewRowCountExact();
      int pageSize=getVisibleRange().getLength();
      showOrHide(nodeView.showMoreElem,isExact && rowCount > pageSize);
    }
  }
);
}","public NodeCellList(final NodeInfo<C> nodeInfo,final CellTreeNodeView<?> nodeView,int pageSize){
  this.defaultPageSize=pageSize;
  this.nodeInfo=nodeInfo;
  this.nodeView=nodeView;
  cell=nodeInfo.getCell();
  presenter=new HasDataPresenter<C>(this,new View(nodeView.ensureChildContainer()),pageSize,nodeInfo.getProvidesKey());
  presenter.setKeyboardSelectionPolicy(KeyboardSelectionPolicy.DISABLED);
  presenter.addRowCountChangeHandler(new RowCountChangeEvent.Handler(){
    @Override public void onRowCountChange(    RowCountChangeEvent event){
      int rowCount=event.getNewRowCount();
      boolean isExact=event.isNewRowCountExact();
      int pageSize=getVisibleRange().getLength();
      showOrHide(nodeView.showMoreElem,isExact && rowCount > pageSize);
    }
  }
);
}"
81825,"public List<C> getVisibleItems(){
  return presenter.getVisibleItems();
}","@Override public List<C> getVisibleItems(){
  return presenter.getVisibleItems();
}"
81826,"@Override public String getReadableDeclaration(){
  String[] names=TypeOracle.modifierBitsToNames(getModifierBits());
  StringBuilder sb=new StringBuilder();
  for (  String name : names) {
    sb.append(name);
    sb.append(""String_Node_Str"");
  }
  if (getTypeParameters().length > 0) {
    toStringTypeParams(sb);
    sb.append(""String_Node_Str"");
  }
  sb.append(getName());
  toStringParamsAndThrows(sb);
  return sb.toString();
}","@Override public String getReadableDeclaration(){
  String[] names=TypeOracle.modifierBitsToNamesForMethod(getModifierBits());
  StringBuilder sb=new StringBuilder();
  for (  String name : names) {
    sb.append(name);
    sb.append(""String_Node_Str"");
  }
  if (getTypeParameters().length > 0) {
    toStringTypeParams(sb);
    sb.append(""String_Node_Str"");
  }
  sb.append(getName());
  toStringParamsAndThrows(sb);
  return sb.toString();
}"
81827,"@Override public String toString(){
  String[] names=TypeOracle.modifierBitsToNames(modifierBits);
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < names.length; i++) {
    if (i > 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(names[i]);
  }
  if (names.length > 0) {
    sb.append(""String_Node_Str"");
  }
  sb.append(type.getParameterizedQualifiedSourceName());
  sb.append(""String_Node_Str"");
  sb.append(getName());
  return sb.toString();
}","@Override public String toString(){
  String[] names=TypeOracle.modifierBitsToNamesForField(modifierBits);
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < names.length; i++) {
    if (i > 0) {
      sb.append(""String_Node_Str"");
    }
    sb.append(names[i]);
  }
  if (names.length > 0) {
    sb.append(""String_Node_Str"");
  }
  sb.append(type.getParameterizedQualifiedSourceName());
  sb.append(""String_Node_Str"");
  sb.append(getName());
  return sb.toString();
}"
81828,"String getReadableDeclaration(int modifierBits){
  String[] names=TypeOracle.modifierBitsToNames(modifierBits);
  StringBuilder sb=new StringBuilder();
  for (  String name : names) {
    sb.append(name);
    sb.append(""String_Node_Str"");
  }
  if (getTypeParameters().length > 0) {
    toStringTypeParams(sb);
    sb.append(""String_Node_Str"");
  }
  sb.append(returnType.getParameterizedQualifiedSourceName());
  sb.append(""String_Node_Str"");
  sb.append(getName());
  toStringParamsAndThrows(sb);
  return sb.toString();
}","String getReadableDeclaration(int modifierBits){
  String[] names=TypeOracle.modifierBitsToNamesForMethod(modifierBits);
  StringBuilder sb=new StringBuilder();
  for (  String name : names) {
    sb.append(name);
    sb.append(""String_Node_Str"");
  }
  if (getTypeParameters().length > 0) {
    toStringTypeParams(sb);
    sb.append(""String_Node_Str"");
  }
  sb.append(returnType.getParameterizedQualifiedSourceName());
  sb.append(""String_Node_Str"");
  sb.append(getName());
  toStringParamsAndThrows(sb);
  return sb.toString();
}"
81829,"/** 
 * Best effort resymbolization of a a single stack trace element.
 * @param ste the stack trace element to resymbolize
 * @param strongName the GWT permutation strong name
 * @return the best effort resymbolized stack trace element
 */
public StackTraceElement resymbolize(StackTraceElement ste,String strongName){
  SymbolMap map=loadSymbolMap(strongName);
  String symbolData=map == null ? null : map.get(ste.getMethodName());
  if (symbolData != null) {
    String[] parts=symbolData.split(""String_Node_Str"");
    if (parts.length == 5) {
      String[] ref=parse(parts[0].substring(0,parts[0].lastIndexOf(')') + 1));
      String declaringClass;
      String methodName;
      if (ref != null) {
        declaringClass=ref[0];
        methodName=ref[1];
      }
 else {
        declaringClass=ste.getClassName();
        methodName=ste.getMethodName();
      }
      String filename=""String_Node_Str"".equals(parts[3]) ? null : parts[3].substring(parts[3].lastIndexOf('/') + 1);
      int lineNumber=ste.getLineNumber();
      if (lineNumber == 0) {
        lineNumber=Integer.parseInt(parts[4]);
      }
      return new StackTraceElement(declaringClass,methodName,filename,lineNumber);
    }
  }
  return ste;
}","/** 
 * Best effort resymbolization of a a single stack trace element.
 * @param ste the stack trace element to resymbolize
 * @param strongName the GWT permutation strong name
 * @return the best effort resymbolized stack trace element
 */
public StackTraceElement resymbolize(StackTraceElement ste,String strongName){
  SymbolMap map=loadSymbolMap(strongName);
  String symbolData=map == null ? null : map.get(ste.getMethodName());
  if (symbolData != null) {
    String[] parts=symbolData.split(""String_Node_Str"");
    if (parts.length == 5) {
      String[] ref=parse(parts[0].substring(0,parts[0].lastIndexOf(')') + 1));
      String declaringClass;
      String methodName;
      if (ref != null) {
        declaringClass=ref[0];
        methodName=ref[1];
      }
 else {
        declaringClass=ste.getClassName();
        methodName=ste.getMethodName();
      }
      String filename=""String_Node_Str"".equals(parts[3]) ? null : parts[3].substring(parts[3].lastIndexOf('/') + 1);
      int lineNumber=ste.getLineNumber();
      if (lineNumber == LINE_NUMBER_UNKNOWN) {
        lineNumber=Integer.parseInt(parts[4]);
      }
      return new StackTraceElement(declaringClass,methodName,filename,lineNumber);
    }
  }
  return ste;
}"
81830,"private void checkName(JsName name){
  if (!toEvaluate.contains(name)) {
    return;
  }
  if (unevaluated.size() == 0 || !unevaluated.remove(0).equals(name)) {
    maintainsOrder=false;
  }
}","/** 
 * Check to see if the evaluation of this JsName will break program order assumptions given the parameters left to be substituted. The cases are as follows: 1) JsName is a function parameter name which has side effects or is affected by side effects (hereafter called 'volatile'), so it will be in 'toEvaluate' 2) JsName is a function parameter which is not volatile (not in toEvaluate) 3) JsName is a reference to a global variable 4) JsName is a reference to a local variable A reference to a global while there are still parameters left to evaluate / substitute implies an order violation. A reference to a volatile parameter is ok if it is the next parameter in sequence to be evaluated (beginning of unevaluated list). Else, it is either being evaluated out of order with respect to other parameters, or it is being evaluated more than once.
 */
private void checkName(JsName name){
  if (!toEvaluate.contains(name)) {
    if (!paramsOrLocals.contains(name) && unevaluated.size() > 0) {
      maintainsOrder=false;
    }
    return;
  }
  if (unevaluated.size() == 0 || !unevaluated.remove(0).equals(name)) {
    maintainsOrder=false;
  }
}"
81831,"public EvaluationOrderVisitor(List<JsName> toEvaluate){
  this.toEvaluate=toEvaluate;
  this.unevaluated=new ArrayList<JsName>(toEvaluate);
}","public EvaluationOrderVisitor(List<JsName> toEvaluate,JsFunction callee){
  this.toEvaluate=toEvaluate;
  this.unevaluated=new ArrayList<JsName>(toEvaluate);
  new JsVisitor(){
    @Override public void endVisit(    JsParameter x,    JsContext ctx){
      paramsOrLocals.add(x.getName());
    }
    @Override public boolean visit(    JsVar x,    JsContext ctx){
      paramsOrLocals.add(x.getName());
      return true;
    }
  }
.accept(callee);
}"
81832,"public JClassType(SourceInfo info,String name,boolean isAbstract,boolean isFinal){
  super(info,name);
  this.isAbstract=isAbstract;
  this.isFinal=isFinal;
}","/** 
 * Construct a bare-bones deserialized external class.
 */
private JClassType(String name){
  super(SourceOrigin.UNKNOWN,name);
  isAbstract=false;
  setExternal(true);
}"
81833,"private Object readResolve(){
  JClassType result=new JClassType(SourceOrigin.UNKNOWN,name,false,false);
  result.setExternal(true);
  return result;
}","private Object readResolve(){
  return new JClassType(name);
}"
81834,"@Override protected Object writeReplace(){
  if (getEnclosingType() != null && getEnclosingType().isExternal()) {
    return new ExternalSerializedForm(this);
  }
 else {
    return this;
  }
}","@Override protected Object writeReplace(){
  if (isExternal()) {
    return new ExternalSerializedForm(this);
  }
 else {
    return this;
  }
}"
81835,"protected Object writeReplace(){
  if (enclosingType != null && enclosingType.isExternal()) {
    return new ExternalSerializedForm(this);
  }
 else   if (this == NULL_FIELD) {
    return ExternalSerializedNullField.INSTANCE;
  }
 else {
    return this;
  }
}","protected Object writeReplace(){
  if (isExternal()) {
    return new ExternalSerializedForm(this);
  }
 else   if (this == NULL_FIELD) {
    return ExternalSerializedNullField.INSTANCE;
  }
 else {
    return this;
  }
}"
81836,"public boolean hasClinit(){
  if (!field.isStatic()) {
    return false;
  }
  if (field.isFinal() && field.isCompileTimeConstant()) {
    return false;
  }
  return getEnclosingType().checkClinitTo(field.getEnclosingType());
}","public boolean hasClinit(){
  JField field=getField();
  if (!field.isStatic()) {
    return false;
  }
  if (field.isFinal() && field.isCompileTimeConstant()) {
    return false;
  }
  return getEnclosingType().checkClinitTo(field.getEnclosingType());
}"
81837,"public JFieldRef(SourceInfo info,JExpression instance,JField field,JDeclaredType enclosingType,JType overriddenType){
  super(info,field);
  assert(instance != null || field.isStatic());
  assert(enclosingType != null);
  this.instance=instance;
  this.field=field;
  this.enclosingType=enclosingType;
  this.overriddenType=overriddenType;
}","public JFieldRef(SourceInfo info,JExpression instance,JField field,JDeclaredType enclosingType,JType overriddenType){
  super(info,field);
  assert(instance != null || field.isStatic());
  assert(enclosingType != null);
  this.instance=instance;
  this.enclosingType=enclosingType;
  this.overriddenType=overriddenType;
}"
81838,"public JField getField(){
  return field;
}","public JField getField(){
  return (JField)getTarget();
}"
81839,"public static JExpression createInstantiationExpression(SourceInfo info,JClassType classType,JDeclaredType enclosingType){
  JConstructor noArgCtor=null;
  for (  JMethod ctor : classType.getMethods()) {
    if (ctor instanceof JConstructor) {
      if (ctor.getParams().size() == 0) {
        noArgCtor=(JConstructor)ctor;
        break;
      }
    }
  }
  if (noArgCtor == null) {
    return null;
  }
  return new JNewInstance(info,noArgCtor,enclosingType);
}","public static JExpression createInstantiationExpression(SourceInfo info,JClassType classType,JDeclaredType enclosingType){
  JConstructor noArgCtor=null;
  for (  JMethod ctor : classType.getMethods()) {
    if (ctor instanceof JConstructor) {
      if (ctor.getOriginalParamTypes().size() == 0) {
        noArgCtor=(JConstructor)ctor;
        break;
      }
    }
  }
  if (noArgCtor == null) {
    return null;
  }
  return new JNewInstance(info,noArgCtor,enclosingType);
}"
81840,"private Object readResolve(){
  JInterfaceType result=new JInterfaceType(SourceOrigin.UNKNOWN,name);
  result.setExternal(true);
  return result;
}","private Object readResolve(){
  return new JInterfaceType(name);
}"
81841,"public JInterfaceType(SourceInfo info,String name){
  super(info,name);
}","/** 
 * Construct a bare-bones deserialized external interface.
 */
private JInterfaceType(String name){
  super(SourceOrigin.UNKNOWN,name);
  setExternal(true);
}"
81842,"protected Object writeReplace(){
  if (enclosingType != null && enclosingType.isExternal()) {
    return new ExternalSerializedForm(this);
  }
 else   if (this == NULL_METHOD) {
    return ExternalSerializedNullMethod.INSTANCE;
  }
 else {
    return this;
  }
}","protected Object writeReplace(){
  if (isExternal()) {
    return new ExternalSerializedForm(this);
  }
 else   if (this == NULL_METHOD) {
    return ExternalSerializedNullMethod.INSTANCE;
  }
 else {
    return this;
  }
}"
81843,"/** 
 * These are only supposed to be constructed by JProgram.
 */
public JMethod(SourceInfo info,String name,JDeclaredType enclosingType,JType returnType,boolean isAbstract,boolean isStatic,boolean isFinal,boolean isPrivate){
  super(info);
  this.name=StringInterner.get().intern(name);
  this.enclosingType=enclosingType;
  this.returnType=returnType;
  this.isAbstract=isAbstract;
  this.isStatic=isStatic;
  this.isFinal=isFinal;
  this.isPrivate=isPrivate;
}","/** 
 * Construct a bare-bones deserialized external method.
 */
private JMethod(String signature,JDeclaredType enclosingType){
  super(SourceOrigin.UNKNOWN);
  this.name=signature.substring(0,signature.indexOf('('));
  this.enclosingType=enclosingType;
  this.signature=signature;
  this.isAbstract=false;
  this.isStatic=false;
  this.isPrivate=false;
}"
81844,"public JStringLiteral(SourceInfo sourceInfo,String value,JClassType stringType){
  super(sourceInfo);
  this.value=value;
  this.stringType=stringType;
}","public JStringLiteral(SourceInfo sourceInfo,String value,JClassType stringType){
}"
81845,"private ImplementClassLiteralsAsFields(JProgram program){
  this.program=program;
  this.typeClassLiteralHolder=program.getTypeClassLiteralHolder();
  this.classLiteralHolderClinitBody=(JMethodBody)typeClassLiteralHolder.getMethods().get(0).getBody();
}","private ImplementClassLiteralsAsFields(JProgram program){
}"
81846,"public void testUiTextWithSafeHtml(){
  assertEquals(widgetUi.htmlWithComputedSafeHtml.getHTML().toLowerCase(),""String_Node_Str"");
  assertEquals(widgetUi.htmlWithComputedText.getHTML().toLowerCase(),""String_Node_Str"");
  assertEquals(widgetUi.labelWithComputedText.getText().toLowerCase(),""String_Node_Str"");
}","public void testUiTextWithSafeHtml(){
  assertEquals(widgetUi.htmlWithComputedSafeHtml.getHTML().toLowerCase(),""String_Node_Str"");
  assertEquals(widgetUi.htmlWithComputedText.getHTML().toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"");
  assertEquals(widgetUi.labelWithComputedText.getText().toLowerCase(),""String_Node_Str"");
}"
81847,"@Override public void wrapElement(Element element){
  if (!isFullyInitialized()) {
    element.getParentNode().replaceChild(getElement(),element);
  }
 else {
    setElement(element);
    html=null;
  }
  if (wrapInitializationCallback != null) {
    wrapInitializationCallback.execute();
    wrapInitializationCallback=null;
  }
}","@Override public void wrapElement(Element element){
  if (isFullyInitialized()) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
  setElement(element);
  html=null;
  if (wrapInitializationCallback != null) {
    wrapInitializationCallback.execute();
    wrapInitializationCallback=null;
  }
}"
81848,"/** 
 * Synchronize the scroll positions of the scrollbars with the actual scroll position of the content.
 */
private void maybeUpdateScrollbarPositions(){
  if (!isAttached()) {
    return;
  }
  if (hScrollbar != null) {
    int hPos=getHorizontalScrollPosition();
    if (hScrollbar.getHorizontalScrollPosition() != hPos) {
      hScrollbar.setHorizontalScrollPosition(hPos);
    }
  }
  if (vScrollbar != null) {
    int vPos=getVerticalScrollPosition();
    if (vScrollbar.getVerticalScrollPosition() != vPos) {
      vScrollbar.setVerticalScrollPosition(vPos);
    }
  }
  getElement().setScrollLeft(0);
  getElement().setScrollTop(0);
}","/** 
 * Synchronize the scroll positions of the scrollbars with the actual scroll position of the content.
 */
private void maybeUpdateScrollbarPositions(){
  if (!isAttached()) {
    return;
  }
  if (hScrollbar != null) {
    int hPos=getHorizontalScrollPosition();
    if (hScrollbar.getHorizontalScrollPosition() != hPos) {
      hScrollbar.setHorizontalScrollPosition(hPos);
    }
  }
  if (vScrollbar != null) {
    int vPos=getVerticalScrollPosition();
    if (vScrollbar.getVerticalScrollPosition() != vPos) {
      vScrollbar.setVerticalScrollPosition(vPos);
    }
  }
  if (getElement().getScrollLeft() != 0) {
    getElement().setScrollLeft(0);
  }
  if (getElement().getScrollTop() != 0) {
    getElement().setScrollTop(0);
  }
}"
81849,"@Override public boolean visit(JMethod x,Context ctx){
  currentMethod=x;
  return true;
}","@Override public boolean visit(JMethod x,Context ctx){
  currentMethod=x;
  if (program.getStaticImpl(x) != null) {
    return false;
  }
  return true;
}"
81850,"@Override public boolean visit(JMethod x,Context ctx){
  Set<JMethod> overrides=program.typeOracle.getAllOverrides(x);
  if (!overrides.isEmpty()) {
    for (    JMethod m : overrides) {
      rescuedMethods.add(m);
    }
    rescuedMethods.add(x);
  }
 else {
    JMethod staticImpl=program.staticImplFor(x);
    if (staticImpl != null && staticImpl.getEnclosingType().getMethods().contains(staticImpl)) {
      rescuedMethods.add(x);
    }
  }
  return true;
}","@Override public boolean visit(JMethod x,Context ctx){
  Set<JMethod> overrides=program.typeOracle.getAllOverrides(x);
  if (!overrides.isEmpty()) {
    for (    JMethod m : overrides) {
      rescuedMethods.add(m);
    }
    rescuedMethods.add(x);
  }
  return true;
}"
81851,"/** 
 * Declare a field that will hold an Element instance. Returns a token that the caller must set as the id attribute of that element in whatever innerHTML expression will reproduce it at runtime. <P> In the generated code, this token will be replaced by an expression to generate a unique dom id at runtime. Further code will be generated to be run after widgets are instantiated, to use that dom id in a getElementById call and assign the Element instance to its field.
 * @param fieldName The name of the field being declared
 * @param ancestorField The name of fieldName parent
 */
public String declareDomField(String fieldName,String ancestorField) throws UnableToCompleteException {
  ensureAttached();
  String name=declareDomIdHolder();
  if (useLazyWidgetBuilders) {
    FieldWriter field=fieldManager.require(fieldName);
    field.setInitializer(formatCode(""String_Node_Str"",fieldManager.convertFieldToGetter(name)));
    field.addStatement(""String_Node_Str"",fieldName);
    fieldManager.require(ancestorField).addAttachStatement(fieldManager.convertFieldToGetter(fieldName) + ""String_Node_Str"");
  }
 else {
    setFieldInitializer(fieldName,""String_Node_Str"");
    addInitStatement(""String_Node_Str"",fieldName,name);
    addInitStatement(""String_Node_Str"",fieldName);
  }
  return tokenForStringExpression(fieldManager.convertFieldToGetter(name));
}","/** 
 * Declare a field that will hold an Element instance. Returns a token that the caller must set as the id attribute of that element in whatever innerHTML expression will reproduce it at runtime. <P> In the generated code, this token will be replaced by an expression to generate a unique dom id at runtime. Further code will be generated to be run after widgets are instantiated, to use that dom id in a getElementById call and assign the Element instance to its field.
 * @param fieldName The name of the field being declared
 * @param ancestorField The name of fieldName parent
 */
public String declareDomField(String fieldName,String ancestorField) throws UnableToCompleteException {
  ensureAttached();
  String name=declareDomIdHolder();
  if (useLazyWidgetBuilders) {
    FieldWriter field=fieldManager.require(fieldName);
    field.setInitializer(formatCode(""String_Node_Str"",LazyDomElement.class.getCanonicalName(),fieldManager.convertFieldToGetter(name)));
    fieldManager.require(ancestorField).addAttachStatement(fieldManager.convertFieldToGetter(fieldName) + ""String_Node_Str"");
  }
 else {
    setFieldInitializer(fieldName,""String_Node_Str"");
    addInitStatement(""String_Node_Str"",fieldName,name);
    addInitStatement(""String_Node_Str"",fieldName);
  }
  return tokenForStringExpression(fieldManager.convertFieldToGetter(name));
}"
81852,"@Override public void onBrowserEvent(Event event){
  CellBasedWidgetImpl.get().onBrowserEvent(this,event);
  if (isRefreshing) {
    return;
  }
  super.onBrowserEvent(event);
  String eventType=event.getType();
  if (""String_Node_Str"".equals(eventType)) {
    isFocused=true;
    onFocus();
  }
 else   if (""String_Node_Str"".equals(eventType)) {
    isFocused=false;
    onBlur();
  }
 else   if (""String_Node_Str"".equals(eventType) && !cellIsEditing) {
    int keyCode=event.getKeyCode();
switch (keyCode) {
case KeyCodes.KEY_DOWN:
case KeyCodes.KEY_UP:
case KeyCodes.KEY_RIGHT:
case KeyCodes.KEY_LEFT:
      handleKeyNavigation(keyCode);
    event.preventDefault();
  return;
case 32:
event.preventDefault();
}
}
final Element target=event.getEventTarget().cast();
ArrayList<Element> chain=new ArrayList<Element>();
collectElementChain(chain,getElement(),target);
final boolean isMouseDown=""String_Node_Str"".equals(eventType);
final boolean isClick=""String_Node_Str"".equals(eventType);
final CellTreeNodeView<?> nodeView=findItemByChain(chain,0,rootNode);
if (nodeView != null && nodeView != rootNode) {
if (isMouseDown) {
Element showMoreElem=nodeView.getShowMoreElement();
if (nodeView.getImageElement().isOrHasChild(target)) {
nodeView.setOpen(!nodeView.isOpen(),true);
return;
}
 else if (showMoreElem != null && showMoreElem.isOrHasChild(target)) {
nodeView.showMore();
return;
}
}
if (nodeView.getSelectionElement().isOrHasChild(target)) {
if (isClick) {
boolean isFocusable=CellBasedWidgetImpl.get().isFocusable(target);
isFocused=isFocused || isFocusable;
keyboardSelect(nodeView,!isFocusable);
}
nodeView.fireEventToCell(event);
}
}
}","@Override public void onBrowserEvent(Event event){
  CellBasedWidgetImpl.get().onBrowserEvent(this,event);
  if (isRefreshing) {
    return;
  }
  super.onBrowserEvent(event);
  String eventType=event.getType();
  if (""String_Node_Str"".equals(eventType)) {
    isFocused=true;
    onFocus();
  }
 else   if (""String_Node_Str"".equals(eventType)) {
    isFocused=false;
    onBlur();
  }
 else   if (""String_Node_Str"".equals(eventType) && !cellIsEditing) {
    int keyCode=event.getKeyCode();
switch (keyCode) {
case KeyCodes.KEY_DOWN:
case KeyCodes.KEY_UP:
case KeyCodes.KEY_RIGHT:
case KeyCodes.KEY_LEFT:
      handleKeyNavigation(keyCode);
    event.preventDefault();
  return;
case 32:
event.preventDefault();
}
}
final Element target=event.getEventTarget().cast();
ArrayList<Element> chain=new ArrayList<Element>();
collectElementChain(chain,getElement(),target);
final boolean isMouseDown=""String_Node_Str"".equals(eventType);
final boolean isClick=""String_Node_Str"".equals(eventType);
final CellTreeNodeView<?> nodeView=findItemByChain(chain,0,rootNode);
if (nodeView != null) {
if (isMouseDown) {
Element showMoreElem=nodeView.getShowMoreElement();
if (nodeView.getImageElement().isOrHasChild(target)) {
nodeView.setOpen(!nodeView.isOpen(),true);
return;
}
 else if (showMoreElem != null && showMoreElem.isOrHasChild(target)) {
nodeView.showMore();
return;
}
}
if (nodeView != rootNode && nodeView.getSelectionElement().isOrHasChild(target)) {
if (isClick) {
boolean isFocusable=CellBasedWidgetImpl.get().isFocusable(target);
isFocused=isFocused || isFocusable;
keyboardSelect(nodeView,!isFocusable);
}
nodeView.fireEventToCell(event);
}
}
}"
81853,"@Override public void onBrowserEvent(Event event){
  if (event.getTypeInt() == Event.ONLOAD) {
    clearUnhandledEvent();
  }
  super.onBrowserEvent(event);
}","@Override public void onBrowserEvent(Event event){
  if (event.getTypeInt() == Event.ONLOAD) {
    clearUnhandledEvent();
    state.onLoadEvent(this);
  }
  super.onBrowserEvent(event);
}"
81854,"public void execute(){
  NativeEvent evt=Document.get().createLoadEvent();
  getImageElement(image).dispatchEvent(evt);
}","public void execute(){
  if (image.state != State.this || this != syntheticEventCommand) {
    return;
  }
  syntheticEventCommand=null;
  if (!image.isAttached()) {
    getImageElement(image).setPropertyString(UNHANDLED_EVENT_ATTR,""String_Node_Str"");
    return;
  }
  NativeEvent evt=Document.get().createLoadEvent();
  getImageElement(image).dispatchEvent(evt);
}"
81855,"/** 
 * We need to synthesize a load event in case the image loads synchronously, before our handlers can be attached.
 * @param image the image on which to dispatch the event
 */
protected void fireSyntheticLoadEvent(final Image image){
  DeferredCommand.addCommand(new Command(){
    public void execute(){
      NativeEvent evt=Document.get().createLoadEvent();
      getImageElement(image).dispatchEvent(evt);
    }
  }
);
}","/** 
 * We need to synthesize a load event in case the image loads synchronously, before our handlers can be attached.
 * @param image the image on which to dispatch the event
 */
protected void fireSyntheticLoadEvent(final Image image){
  syntheticEventCommand=new ScheduledCommand(){
    public void execute(){
      if (image.state != State.this || this != syntheticEventCommand) {
        return;
      }
      syntheticEventCommand=null;
      if (!image.isAttached()) {
        getImageElement(image).setPropertyString(UNHANDLED_EVENT_ATTR,""String_Node_Str"");
        return;
      }
      NativeEvent evt=Document.get().createLoadEvent();
      getImageElement(image).dispatchEvent(evt);
    }
  }
;
  Scheduler.get().scheduleDeferred(syntheticEventCommand);
}"
81856,"@Override public int getAbsoluteLeft(Element elem){
  Document doc=elem.getOwnerDocument();
  return getBoundingClientRectLeft(elem) + doc.getScrollLeft();
}","@Override public int getAbsoluteLeft(Element elem){
  int left=getBoundingClientRectLeft(elem) + getDocumentScrollLeftImpl();
  if (isRTL(elem)) {
    left+=getParentOffsetDelta(elem);
  }
  return left;
}"
81857,"@Override public int getAbsoluteTop(Element elem){
  Document doc=elem.getOwnerDocument();
  return getBoundingClientRectTop(elem) + doc.getScrollTop();
}","@Override public int getAbsoluteTop(Element elem){
  return getBoundingClientRectTop(elem) + getDocumentScrollTopImpl();
}"
81858,private native boolean isRTL(Element elem);,protected native boolean isRTL(Element elem);
81859,"/** 
 * Creates an &lt;input type='checkbox'&gt; element.
 * @return the newly created element
 */
public final InputElement createCheckInputElement(){
  return DOMImpl.impl.createInputElement(this,""String_Node_Str"");
}","/** 
 * Creates an &lt;input type='checkbox'&gt; element.
 * @return the newly created element
 */
public final InputElement createCheckInputElement(){
  return DOMImpl.impl.createCheckInputElement(this);
}"
81860,"public Map<String,String> getReplacements(String installPath,String theModuleName){
  String gwtUserPath=installPath + '/' + ""String_Node_Str"";
  String gwtDevPath=installPath + '/' + ""String_Node_Str"";
  String gwtValidationPath=installPath + '/' + ""String_Node_Str"";
  String gwtValidationSourcesPath=installPath + '/' + ""String_Node_Str"";
  String gwtModuleDtd=""String_Node_Str"";
  GwtVersion gwtVersion=About.getGwtVersionObject();
  if (gwtVersion.isNoNagVersion()) {
    gwtModuleDtd=""String_Node_Str"" + About.getGwtVersionNum() + ""String_Node_Str""+ About.getGwtVersionNum()+ ""String_Node_Str"";
  }
  int pos=theModuleName.lastIndexOf('.');
  String modulePackageName=theModuleName.substring(0,pos);
  String moduleShortName=theModuleName.substring(pos + 1);
  Map<String,String> replacements=new HashMap<String,String>();
  String srcFolder=templates.contains(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
  String testFolder=templates.contains(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
  String warFolder=templates.contains(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
{
    if (junitPath == null) {
      System.err.println(""String_Node_Str"");
    }
    String testTargetsBegin=""String_Node_Str"";
    String testTargetsEnd=""String_Node_Str"";
    String junitJarPath=junitPath;
    String eclipseTestDir=""String_Node_Str"";
    if (junitPath != null) {
      eclipseTestDir=""String_Node_Str"" + testFolder + ""String_Node_Str"";
    }
    if (junitPath == null) {
      testTargetsBegin=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
      testTargetsEnd=""String_Node_Str"";
      junitJarPath=""String_Node_Str"";
    }
    replacements.put(""String_Node_Str"",testTargetsBegin);
    replacements.put(""String_Node_Str"",testTargetsEnd);
    replacements.put(""String_Node_Str"",junitJarPath);
    replacements.put(""String_Node_Str"",eclipseTestDir);
  }
  replacements.put(""String_Node_Str"",srcFolder);
  replacements.put(""String_Node_Str"",testFolder);
  replacements.put(""String_Node_Str"",warFolder);
  replacements.put(""String_Node_Str"",moduleShortName);
  replacements.put(""String_Node_Str"",modulePackageName);
  replacements.put(""String_Node_Str"",modulePackageName.replace('.','/'));
  replacements.put(""String_Node_Str"",theModuleName);
  replacements.put(""String_Node_Str"",modulePackageName + ""String_Node_Str"");
  replacements.put(""String_Node_Str"",modulePackageName + ""String_Node_Str"");
  replacements.put(""String_Node_Str"",modulePackageName + ""String_Node_Str"");
  replacements.put(""String_Node_Str"",installPath);
  replacements.put(""String_Node_Str"",gwtUserPath);
  replacements.put(""String_Node_Str"",gwtDevPath);
  replacements.put(""String_Node_Str"",gwtValidationPath);
  replacements.put(""String_Node_Str"",gwtValidationSourcesPath);
  replacements.put(""String_Node_Str"",About.getGwtVersionNum());
  replacements.put(""String_Node_Str"",gwtModuleDtd);
  replacements.put(""String_Node_Str"",DevMode.class.getName());
  replacements.put(""String_Node_Str"",Compiler.class.getName());
  replacements.put(""String_Node_Str"",moduleShortName + ""String_Node_Str"");
  replacements.put(""String_Node_Str"",moduleShortName.toLowerCase());
  replacements.put(""String_Node_Str"",theModuleName + ""String_Node_Str"");
  String copyServletDeps=""String_Node_Str"";
  copyServletDeps=""String_Node_Str"" + warFolder + ""String_Node_Str""+ ""String_Node_Str"";
  replacements.put(""String_Node_Str"",copyServletDeps);
  File libDirectory=new File(outDir + warFolder + ""String_Node_Str"");
  StringBuilder serverLibs=new StringBuilder();
  if (libDirectory.exists()) {
    for (    File file : libDirectory.listFiles()) {
      if (file.getName().toLowerCase().endsWith(""String_Node_Str"")) {
        serverLibs.append(""String_Node_Str"");
        serverLibs.append(file.getName());
        serverLibs.append(""String_Node_Str"");
      }
    }
  }
  replacements.put(""String_Node_Str"",serverLibs.toString());
  String antEclipseRule=""String_Node_Str"";
  if (!templates.contains(""String_Node_Str"")) {
    antEclipseRule=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ theModuleName+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  }
 else {
    antEclipseRule=""String_Node_Str"";
  }
  replacements.put(""String_Node_Str"",antEclipseRule);
  return replacements;
}","public Map<String,String> getReplacements(String installPath,String theModuleName){
  String gwtUserPath=installPath + '/' + ""String_Node_Str"";
  String gwtDevPath=installPath + '/' + ""String_Node_Str"";
  String gwtValidationPath=installPath + '/' + ""String_Node_Str"";
  String gwtValidationSourcesPath=installPath + '/' + ""String_Node_Str"";
  String gwtModuleDtd=""String_Node_Str"";
  GwtVersion gwtVersion=About.getGwtVersionObject();
  if (gwtVersion.isNoNagVersion()) {
    gwtModuleDtd=""String_Node_Str"" + About.getGwtVersionNum() + ""String_Node_Str""+ About.getGwtVersionNum()+ ""String_Node_Str"";
  }
  int pos=theModuleName.lastIndexOf('.');
  String modulePackageName=theModuleName.substring(0,pos);
  String moduleShortName=theModuleName.substring(pos + 1);
  Map<String,String> replacements=new HashMap<String,String>();
  String srcFolder=templates.contains(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
  String testFolder=templates.contains(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
  String warFolder=templates.contains(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
{
    if (junitPath == null) {
      System.err.println(""String_Node_Str"");
    }
    String testTargetsBegin=""String_Node_Str"";
    String testTargetsEnd=""String_Node_Str"";
    String junitJarPath=junitPath;
    String eclipseTestDir=""String_Node_Str"";
    if (junitPath != null) {
      eclipseTestDir=""String_Node_Str"" + testFolder + ""String_Node_Str"";
    }
    if (junitPath == null) {
      testTargetsBegin=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
      testTargetsEnd=""String_Node_Str"";
      junitJarPath=""String_Node_Str"";
    }
    replacements.put(""String_Node_Str"",testTargetsBegin);
    replacements.put(""String_Node_Str"",testTargetsEnd);
    replacements.put(""String_Node_Str"",junitJarPath);
    replacements.put(""String_Node_Str"",eclipseTestDir);
  }
  replacements.put(""String_Node_Str"",srcFolder);
  replacements.put(""String_Node_Str"",testFolder);
  replacements.put(""String_Node_Str"",warFolder);
  replacements.put(""String_Node_Str"",moduleShortName);
  replacements.put(""String_Node_Str"",modulePackageName);
  replacements.put(""String_Node_Str"",modulePackageName.replace('.','/'));
  replacements.put(""String_Node_Str"",theModuleName);
  replacements.put(""String_Node_Str"",modulePackageName + ""String_Node_Str"");
  replacements.put(""String_Node_Str"",modulePackageName + ""String_Node_Str"");
  replacements.put(""String_Node_Str"",modulePackageName + ""String_Node_Str"");
  replacements.put(""String_Node_Str"",installPath);
  replacements.put(""String_Node_Str"",gwtUserPath);
  replacements.put(""String_Node_Str"",gwtDevPath);
  replacements.put(""String_Node_Str"",gwtValidationPath);
  replacements.put(""String_Node_Str"",gwtValidationSourcesPath);
  replacements.put(""String_Node_Str"",About.getGwtVersionNum());
  replacements.put(""String_Node_Str"",gwtModuleDtd);
  replacements.put(""String_Node_Str"",DevMode.class.getName());
  replacements.put(""String_Node_Str"",Compiler.class.getName());
  replacements.put(""String_Node_Str"",moduleShortName + ""String_Node_Str"");
  replacements.put(""String_Node_Str"",moduleShortName.toLowerCase());
  replacements.put(""String_Node_Str"",theModuleName + ""String_Node_Str"");
  String copyServletDeps=""String_Node_Str"";
  copyServletDeps=""String_Node_Str"" + warFolder + ""String_Node_Str""+ ""String_Node_Str"";
  replacements.put(""String_Node_Str"",copyServletDeps);
  File libDirectory=new File(outDir + ""String_Node_Str"" + warFolder+ ""String_Node_Str"");
  StringBuilder serverLibs=new StringBuilder();
  if (libDirectory.exists()) {
    for (    File file : libDirectory.listFiles()) {
      if (file.getName().toLowerCase().endsWith(""String_Node_Str"")) {
        serverLibs.append(""String_Node_Str"");
        serverLibs.append(file.getName());
        serverLibs.append(""String_Node_Str"");
      }
    }
  }
  replacements.put(""String_Node_Str"",serverLibs.toString());
  String antEclipseRule=""String_Node_Str"";
  if (!templates.contains(""String_Node_Str"")) {
    antEclipseRule=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ theModuleName+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  }
 else {
    antEclipseRule=""String_Node_Str"";
  }
  replacements.put(""String_Node_Str"",antEclipseRule);
  return replacements;
}"
81861,"public Map<String,String> getReplacements(String installPath,String theModuleName){
  String gwtUserPath=installPath + '/' + ""String_Node_Str"";
  String gwtDevPath=installPath + '/' + ""String_Node_Str"";
  String gwtValidationPath=installPath + '/' + ""String_Node_Str"";
  String gwtValidationSourcesPath=installPath + '/' + ""String_Node_Str"";
  String gwtModuleDtd=""String_Node_Str"";
  GwtVersion gwtVersion=About.getGwtVersionObject();
  if (gwtVersion.isNoNagVersion()) {
    gwtModuleDtd=""String_Node_Str"" + About.getGwtVersionNum() + ""String_Node_Str""+ About.getGwtVersionNum()+ ""String_Node_Str"";
  }
  int pos=theModuleName.lastIndexOf('.');
  String modulePackageName=theModuleName.substring(0,pos);
  String moduleShortName=theModuleName.substring(pos + 1);
  Map<String,String> replacements=new HashMap<String,String>();
  String srcFolder=templates.contains(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
  String testFolder=templates.contains(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
  String warFolder=templates.contains(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
{
    if (junitPath == null) {
      System.err.println(""String_Node_Str"");
    }
    String testTargetsBegin=""String_Node_Str"";
    String testTargetsEnd=""String_Node_Str"";
    String junitJarPath=junitPath;
    String eclipseTestDir=""String_Node_Str"";
    if (junitPath != null) {
      eclipseTestDir=""String_Node_Str"" + testFolder + ""String_Node_Str"";
    }
    if (junitPath == null) {
      testTargetsBegin=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
      testTargetsEnd=""String_Node_Str"";
      junitJarPath=""String_Node_Str"";
    }
    replacements.put(""String_Node_Str"",testTargetsBegin);
    replacements.put(""String_Node_Str"",testTargetsEnd);
    replacements.put(""String_Node_Str"",junitJarPath);
    replacements.put(""String_Node_Str"",eclipseTestDir);
  }
  replacements.put(""String_Node_Str"",srcFolder);
  replacements.put(""String_Node_Str"",testFolder);
  replacements.put(""String_Node_Str"",warFolder);
  replacements.put(""String_Node_Str"",moduleShortName);
  replacements.put(""String_Node_Str"",modulePackageName);
  replacements.put(""String_Node_Str"",modulePackageName.replace('.','/'));
  replacements.put(""String_Node_Str"",theModuleName);
  replacements.put(""String_Node_Str"",modulePackageName + ""String_Node_Str"");
  replacements.put(""String_Node_Str"",modulePackageName + ""String_Node_Str"");
  replacements.put(""String_Node_Str"",modulePackageName + ""String_Node_Str"");
  replacements.put(""String_Node_Str"",installPath);
  replacements.put(""String_Node_Str"",gwtUserPath);
  replacements.put(""String_Node_Str"",gwtDevPath);
  replacements.put(""String_Node_Str"",gwtValidationPath);
  replacements.put(""String_Node_Str"",gwtValidationSourcesPath);
  replacements.put(""String_Node_Str"",About.getGwtVersionNum());
  replacements.put(""String_Node_Str"",gwtModuleDtd);
  replacements.put(""String_Node_Str"",DevMode.class.getName());
  replacements.put(""String_Node_Str"",Compiler.class.getName());
  replacements.put(""String_Node_Str"",moduleShortName + ""String_Node_Str"");
  replacements.put(""String_Node_Str"",moduleShortName.toLowerCase());
  replacements.put(""String_Node_Str"",theModuleName + ""String_Node_Str"");
  String copyServletDeps=""String_Node_Str"";
  copyServletDeps=""String_Node_Str"" + warFolder + ""String_Node_Str""+ ""String_Node_Str"";
  replacements.put(""String_Node_Str"",copyServletDeps);
  File libDirectory=new File(outDir + warFolder + ""String_Node_Str"");
  StringBuilder serverLibs=new StringBuilder();
  if (libDirectory.exists()) {
    for (    File file : libDirectory.listFiles()) {
      if (file.getName().toLowerCase().endsWith(""String_Node_Str"")) {
        serverLibs.append(""String_Node_Str"");
        serverLibs.append(file.getName());
        serverLibs.append(""String_Node_Str"");
      }
    }
  }
  replacements.put(""String_Node_Str"",serverLibs.toString());
  String antEclipseRule=""String_Node_Str"";
  if (!templates.contains(""String_Node_Str"")) {
    antEclipseRule=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ theModuleName+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  }
 else {
    antEclipseRule=""String_Node_Str"";
  }
  replacements.put(""String_Node_Str"",antEclipseRule);
  return replacements;
}","public Map<String,String> getReplacements(String installPath,String theModuleName){
  String gwtUserPath=installPath + '/' + ""String_Node_Str"";
  String gwtDevPath=installPath + '/' + ""String_Node_Str"";
  String gwtValidationPath=installPath + '/' + ""String_Node_Str"";
  String gwtValidationSourcesPath=installPath + '/' + ""String_Node_Str"";
  String gwtModuleDtd=""String_Node_Str"";
  GwtVersion gwtVersion=About.getGwtVersionObject();
  if (gwtVersion.isNoNagVersion()) {
    gwtModuleDtd=""String_Node_Str"" + About.getGwtVersionNum() + ""String_Node_Str""+ About.getGwtVersionNum()+ ""String_Node_Str"";
  }
  int pos=theModuleName.lastIndexOf('.');
  String modulePackageName=theModuleName.substring(0,pos);
  String moduleShortName=theModuleName.substring(pos + 1);
  Map<String,String> replacements=new HashMap<String,String>();
  String srcFolder=templates.contains(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
  String testFolder=templates.contains(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
  String warFolder=templates.contains(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
{
    if (junitPath == null) {
      System.err.println(""String_Node_Str"");
    }
    String testTargetsBegin=""String_Node_Str"";
    String testTargetsEnd=""String_Node_Str"";
    String junitJarPath=junitPath;
    String eclipseTestDir=""String_Node_Str"";
    if (junitPath != null) {
      eclipseTestDir=""String_Node_Str"" + testFolder + ""String_Node_Str"";
    }
    if (junitPath == null) {
      testTargetsBegin=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
      testTargetsEnd=""String_Node_Str"";
      junitJarPath=""String_Node_Str"";
    }
    replacements.put(""String_Node_Str"",testTargetsBegin);
    replacements.put(""String_Node_Str"",testTargetsEnd);
    replacements.put(""String_Node_Str"",junitJarPath);
    replacements.put(""String_Node_Str"",eclipseTestDir);
  }
  replacements.put(""String_Node_Str"",srcFolder);
  replacements.put(""String_Node_Str"",testFolder);
  replacements.put(""String_Node_Str"",warFolder);
  replacements.put(""String_Node_Str"",moduleShortName);
  replacements.put(""String_Node_Str"",modulePackageName);
  replacements.put(""String_Node_Str"",modulePackageName.replace('.','/'));
  replacements.put(""String_Node_Str"",theModuleName);
  replacements.put(""String_Node_Str"",modulePackageName + ""String_Node_Str"");
  replacements.put(""String_Node_Str"",modulePackageName + ""String_Node_Str"");
  replacements.put(""String_Node_Str"",modulePackageName + ""String_Node_Str"");
  replacements.put(""String_Node_Str"",installPath);
  replacements.put(""String_Node_Str"",gwtUserPath);
  replacements.put(""String_Node_Str"",gwtDevPath);
  replacements.put(""String_Node_Str"",gwtValidationPath);
  replacements.put(""String_Node_Str"",gwtValidationSourcesPath);
  replacements.put(""String_Node_Str"",About.getGwtVersionNum());
  replacements.put(""String_Node_Str"",gwtModuleDtd);
  replacements.put(""String_Node_Str"",DevMode.class.getName());
  replacements.put(""String_Node_Str"",Compiler.class.getName());
  replacements.put(""String_Node_Str"",moduleShortName + ""String_Node_Str"");
  replacements.put(""String_Node_Str"",moduleShortName.toLowerCase());
  replacements.put(""String_Node_Str"",theModuleName + ""String_Node_Str"");
  String copyServletDeps=""String_Node_Str"";
  copyServletDeps=""String_Node_Str"" + warFolder + ""String_Node_Str""+ ""String_Node_Str"";
  replacements.put(""String_Node_Str"",copyServletDeps);
  File libDirectory=new File(outDir + ""String_Node_Str"" + warFolder+ ""String_Node_Str"");
  StringBuilder serverLibs=new StringBuilder();
  if (libDirectory.exists()) {
    for (    File file : libDirectory.listFiles()) {
      if (file.getName().toLowerCase().endsWith(""String_Node_Str"")) {
        serverLibs.append(""String_Node_Str"");
        serverLibs.append(file.getName());
        serverLibs.append(""String_Node_Str"");
      }
    }
  }
  replacements.put(""String_Node_Str"",serverLibs.toString());
  String antEclipseRule=""String_Node_Str"";
  if (!templates.contains(""String_Node_Str"")) {
    antEclipseRule=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ theModuleName+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  }
 else {
    antEclipseRule=""String_Node_Str"";
  }
  replacements.put(""String_Node_Str"",antEclipseRule);
  return replacements;
}"
81862,"@Override public Object createServiceInstance(Method contextMethod,Method domainMethod){
  Class<? extends ServiceLocator> locatorType=getTop().resolveServiceLocator(contextMethod,domainMethod);
  ServiceLocator locator=newInstance(locatorType,ServiceLocator.class);
  return locator.getInstance(domainMethod.getDeclaringClass());
}","@Override public Object createServiceInstance(Method contextMethod,Method domainMethod){
  Class<? extends ServiceLocator> locatorType=getTop().resolveServiceLocator(contextMethod,domainMethod);
  ServiceLocator locator=newInstance(locatorType,ServiceLocator.class);
  Class<?> declaringClass=contextMethod.getDeclaringClass();
  Class<?> serviceClass=getTop().resolveServiceClass(declaringClass.asSubclass(RequestContext.class));
  return locator.getInstance(serviceClass);
}"
81863,"@Override public Method resolveDomainMethod(Method requestContextMethod){
  Class<?> enclosing=requestContextMethod.getDeclaringClass();
  Class<?> searchIn=null;
  Service s=enclosing.getAnnotation(Service.class);
  if (s != null) {
    searchIn=s.value();
  }
  ServiceName sn=enclosing.getAnnotation(ServiceName.class);
  if (sn != null) {
    searchIn=forName(sn.value());
  }
  if (searchIn == null) {
    die(null,""String_Node_Str"",RequestContext.class.getSimpleName(),enclosing.getCanonicalName());
  }
  Class<?>[] parameterTypes=requestContextMethod.getParameterTypes();
  Class<?>[] domainArgs=new Class<?>[parameterTypes.length];
  for (int i=0, j=domainArgs.length; i < j; i++) {
    if (BaseProxy.class.isAssignableFrom(parameterTypes[i])) {
      domainArgs[i]=getTop().resolveDomainClass(parameterTypes[i].asSubclass(BaseProxy.class));
    }
 else     if (EntityProxyId.class.isAssignableFrom(parameterTypes[i])) {
      domainArgs[i]=TypeUtils.ensureBaseType(TypeUtils.getSingleParameterization(EntityProxyId.class,requestContextMethod.getGenericParameterTypes()[i]));
    }
 else {
      domainArgs[i]=parameterTypes[i];
    }
  }
  Throwable ex;
  try {
    return searchIn.getMethod(requestContextMethod.getName(),domainArgs);
  }
 catch (  SecurityException e) {
    ex=e;
  }
catch (  NoSuchMethodException e) {
    return report(""String_Node_Str"",requestContextMethod.getName());
  }
  return die(ex,""String_Node_Str"",requestContextMethod.getName(),searchIn.getCanonicalName());
}","@Override public Method resolveDomainMethod(Method requestContextMethod){
  Class<?> declaringClass=requestContextMethod.getDeclaringClass();
  Class<?> searchIn=getTop().resolveServiceClass(declaringClass.asSubclass(RequestContext.class));
  Class<?>[] parameterTypes=requestContextMethod.getParameterTypes();
  Class<?>[] domainArgs=new Class<?>[parameterTypes.length];
  for (int i=0, j=domainArgs.length; i < j; i++) {
    if (BaseProxy.class.isAssignableFrom(parameterTypes[i])) {
      domainArgs[i]=getTop().resolveDomainClass(parameterTypes[i].asSubclass(BaseProxy.class));
    }
 else     if (EntityProxyId.class.isAssignableFrom(parameterTypes[i])) {
      domainArgs[i]=TypeUtils.ensureBaseType(TypeUtils.getSingleParameterization(EntityProxyId.class,requestContextMethod.getGenericParameterTypes()[i]));
    }
 else {
      domainArgs[i]=parameterTypes[i];
    }
  }
  Throwable ex;
  try {
    return searchIn.getMethod(requestContextMethod.getName(),domainArgs);
  }
 catch (  SecurityException e) {
    ex=e;
  }
catch (  NoSuchMethodException e) {
    return report(""String_Node_Str"",requestContextMethod.getName());
  }
  return die(ex,""String_Node_Str"",requestContextMethod.getName(),searchIn.getCanonicalName());
}"
81864,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(BoxesAndPrimitivesJreTest.class);
  suite.addTestSuite(ComplexKeysJreTest.class);
  suite.addTestSuite(FindServiceJreTest.class);
  suite.addTestSuite(LocatorJreTest.class);
  suite.addTestSuite(RequestFactoryExceptionPropagationJreTest.class);
  suite.addTestSuite(RequestFactoryInterfaceValidatorTest.class);
  suite.addTestSuite(RequestFactoryJreTest.class);
  suite.addTestSuite(RequestFactoryModelTest.class);
  suite.addTestSuite(RequestFactoryUnicodeEscapingJreTest.class);
  suite.addTestSuite(SimpleEntityProxyIdTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(BoxesAndPrimitivesJreTest.class);
  suite.addTestSuite(ComplexKeysJreTest.class);
  suite.addTestSuite(FindServiceJreTest.class);
  suite.addTestSuite(LocatorJreTest.class);
  suite.addTestSuite(RequestFactoryExceptionPropagationJreTest.class);
  suite.addTestSuite(RequestFactoryInterfaceValidatorTest.class);
  suite.addTestSuite(RequestFactoryJreTest.class);
  suite.addTestSuite(RequestFactoryModelTest.class);
  suite.addTestSuite(RequestFactoryUnicodeEscapingJreTest.class);
  suite.addTestSuite(ServiceInheritanceJreTest.class);
  suite.addTestSuite(SimpleEntityProxyIdTest.class);
  return suite;
}"
81865,"public static Test suite(){
  GWTTestSuite suite=new GWTTestSuite(""String_Node_Str"");
  suite.addTestSuite(BoxesAndPrimitivesTest.class);
  suite.addTestSuite(ComplexKeysTest.class);
  suite.addTestSuite(EditorTest.class);
  suite.addTestSuite(FindServiceTest.class);
  suite.addTestSuite(LocatorTest.class);
  suite.addTestSuite(RequestFactoryTest.class);
  suite.addTestSuite(RequestFactoryExceptionHandlerTest.class);
  suite.addTestSuite(RequestFactoryExceptionPropagationTest.class);
  suite.addTestSuite(RequestFactoryPolymorphicTest.class);
  suite.addTestSuite(RequestFactoryUnicodeEscapingTest.class);
  return suite;
}","public static Test suite(){
  GWTTestSuite suite=new GWTTestSuite(""String_Node_Str"");
  suite.addTestSuite(BoxesAndPrimitivesTest.class);
  suite.addTestSuite(ComplexKeysTest.class);
  suite.addTestSuite(EditorTest.class);
  suite.addTestSuite(FindServiceTest.class);
  suite.addTestSuite(LocatorTest.class);
  suite.addTestSuite(RequestFactoryTest.class);
  suite.addTestSuite(RequestFactoryExceptionHandlerTest.class);
  suite.addTestSuite(RequestFactoryExceptionPropagationTest.class);
  suite.addTestSuite(RequestFactoryPolymorphicTest.class);
  suite.addTestSuite(RequestFactoryUnicodeEscapingTest.class);
  suite.addTestSuite(ServiceInheritanceTest.class);
  return suite;
}"
81866,"@SuppressWarnings(""String_Node_Str"") public V next(){
  if (!hasNext()) {
    throw new NoSuchElementException();
  }
  last=index;
  Object toReturn=values[index++];
  advanceToItem();
  return (V)toReturn;
}","public E next(){
  if (!hasNext()) {
    throw new NoSuchElementException();
  }
  last=index;
  return iteratorItem(index++);
}"
81867,"public HashMap(Map<? extends K,? extends V> m){
  int newCapacity=INITIAL_TABLE_SIZE;
  int expectedSize=m.size();
  while (newCapacity * 3 < expectedSize * 4) {
    newCapacity<<=1;
  }
  initTable(newCapacity);
  internalPutAll(m);
}","public HashMap(Map<? extends K,? extends V> m){
  int newCapacity=INITIAL_TABLE_SIZE;
  int expectedSize=m.size();
  while (newCapacity * 3 < expectedSize * 4) {
    newCapacity<<=1;
  }
  initTable(newCapacity);
  putAll(m);
}"
81868,"@SuppressWarnings(""String_Node_Str"") public V put(K key,V value){
  ensureSizeFor(size + 1);
  int index=findKeyOrEmpty(key);
  if (keys[index] == null) {
    ++size;
    keys[index]=maskNullKey(key);
    values[index]=value;
    return null;
  }
 else {
    Object previousValue=values[index];
    values[index]=value;
    return (V)previousValue;
  }
}","@SuppressWarnings(""String_Node_Str"") public V put(K key,V value){
  int index=findKeyOrEmpty(key);
  if (keys[index] == null) {
    if (ensureSizeFor(++size)) {
      index=findKeyOrEmpty(key);
    }
    keys[index]=maskNullKey(key);
    values[index]=value;
    return null;
  }
 else {
    Object previousValue=values[index];
    values[index]=value;
    return (V)previousValue;
  }
}"
81869,"public void putAll(Map<? extends K,? extends V> m){
  ensureSizeFor(size + m.size());
  internalPutAll(m);
}","public void putAll(Map<? extends K,? extends V> m){
  resizeForJoin(m.size());
  for (  Entry<? extends K,? extends V> entry : m.entrySet()) {
    put(entry.getKey(),entry.getValue());
  }
}"
81870,"public boolean hasNext(){
  return index < keys.length;
}","public boolean hasNext(){
  if (coModCheckKeys != keys) {
    throw new ConcurrentModificationException();
  }
  advanceToItem();
  return index < keys.length;
}"
81871,"@Override public boolean addAll(Collection<? extends Entry<K,V>> c){
  HashMap.this.ensureSizeFor(size() + c.size());
  return super.addAll(c);
}","@Override public boolean addAll(Collection<? extends Entry<K,V>> c){
  HashMap.this.resizeForJoin(c.size());
  return super.addAll(c);
}"
81872,"/** 
 * Ensures the map is large enough to contain the specified number of entries. Default access to avoid synthetic accessors from inner classes.
 */
void ensureSizeFor(int expectedSize){
  if (keys.length * 3 >= expectedSize * 4) {
    return;
  }
  int newCapacity=keys.length << 1;
  while (newCapacity * 3 < expectedSize * 4) {
    newCapacity<<=1;
  }
  Object[] oldKeys=keys;
  Object[] oldValues=values;
  initTable(newCapacity);
  for (int i=0; i < oldKeys.length; ++i) {
    Object k=oldKeys[i];
    if (k != null) {
      int newIndex=getKeyIndex(unmaskNullKey(k));
      while (keys[newIndex] != null) {
        if (++newIndex == keys.length) {
          newIndex=0;
        }
      }
      keys[newIndex]=k;
      values[newIndex]=oldValues[i];
    }
  }
}","/** 
 * Ensures the map is large enough to contain the specified number of entries. Default access to avoid synthetic accessors from inner classes.
 */
boolean ensureSizeFor(int expectedSize){
  if (keys.length * 3 >= expectedSize * 4) {
    return false;
  }
  int newCapacity=keys.length << 1;
  while (newCapacity * 3 < expectedSize * 4) {
    newCapacity<<=1;
  }
  Object[] oldKeys=keys;
  Object[] oldValues=values;
  initTable(newCapacity);
  for (int i=0; i < oldKeys.length; ++i) {
    Object k=oldKeys[i];
    if (k != null) {
      int newIndex=getKeyIndex(unmaskNullKey(k));
      while (keys[newIndex] != null) {
        if (++newIndex == keys.length) {
          newIndex=0;
        }
      }
      keys[newIndex]=k;
      values[newIndex]=oldValues[i];
    }
  }
  return true;
}"
81873,"@Override public Object createServiceInstance(Method contextMethod,Method domainMethod){
  Class<? extends ServiceLocator> locatorType=getTop().resolveServiceLocator(contextMethod,domainMethod);
  ServiceLocator locator=newInstance(locatorType,ServiceLocator.class);
  return locator.getInstance(domainMethod.getDeclaringClass());
}","@Override public Object createServiceInstance(Method contextMethod,Method domainMethod){
  Class<? extends ServiceLocator> locatorType=getTop().resolveServiceLocator(contextMethod,domainMethod);
  ServiceLocator locator=newInstance(locatorType,ServiceLocator.class);
  Class<?> declaringClass=contextMethod.getDeclaringClass();
  Class<?> serviceClass=getTop().resolveServiceClass((Class<? extends RequestContext>)declaringClass);
  return locator.getInstance(serviceClass);
}"
81874,"@Override public Method resolveDomainMethod(Method requestContextMethod){
  Class<?> enclosing=requestContextMethod.getDeclaringClass();
  Class<?> searchIn=null;
  Service s=enclosing.getAnnotation(Service.class);
  if (s != null) {
    searchIn=s.value();
  }
  ServiceName sn=enclosing.getAnnotation(ServiceName.class);
  if (sn != null) {
    searchIn=forName(sn.value());
  }
  if (searchIn == null) {
    die(null,""String_Node_Str"",RequestContext.class.getSimpleName(),enclosing.getCanonicalName());
  }
  Class<?>[] parameterTypes=requestContextMethod.getParameterTypes();
  Class<?>[] domainArgs=new Class<?>[parameterTypes.length];
  for (int i=0, j=domainArgs.length; i < j; i++) {
    if (BaseProxy.class.isAssignableFrom(parameterTypes[i])) {
      domainArgs[i]=getTop().resolveDomainClass(parameterTypes[i].asSubclass(BaseProxy.class));
    }
 else     if (EntityProxyId.class.isAssignableFrom(parameterTypes[i])) {
      domainArgs[i]=TypeUtils.ensureBaseType(TypeUtils.getSingleParameterization(EntityProxyId.class,requestContextMethod.getGenericParameterTypes()[i]));
    }
 else {
      domainArgs[i]=parameterTypes[i];
    }
  }
  Throwable ex;
  try {
    return searchIn.getMethod(requestContextMethod.getName(),domainArgs);
  }
 catch (  SecurityException e) {
    ex=e;
  }
catch (  NoSuchMethodException e) {
    return report(""String_Node_Str"",requestContextMethod.getName());
  }
  return die(ex,""String_Node_Str"",requestContextMethod.getName(),searchIn.getCanonicalName());
}","@Override public Method resolveDomainMethod(Method requestContextMethod){
  Class<?> declaringClass=requestContextMethod.getDeclaringClass();
  Class<?> searchIn=getTop().resolveServiceClass((Class<? extends RequestContext>)declaringClass);
  Class<?>[] parameterTypes=requestContextMethod.getParameterTypes();
  Class<?>[] domainArgs=new Class<?>[parameterTypes.length];
  for (int i=0, j=domainArgs.length; i < j; i++) {
    if (BaseProxy.class.isAssignableFrom(parameterTypes[i])) {
      domainArgs[i]=getTop().resolveDomainClass(parameterTypes[i].asSubclass(BaseProxy.class));
    }
 else     if (EntityProxyId.class.isAssignableFrom(parameterTypes[i])) {
      domainArgs[i]=TypeUtils.ensureBaseType(TypeUtils.getSingleParameterization(EntityProxyId.class,requestContextMethod.getGenericParameterTypes()[i]));
    }
 else {
      domainArgs[i]=parameterTypes[i];
    }
  }
  Throwable ex;
  try {
    return searchIn.getMethod(requestContextMethod.getName(),domainArgs);
  }
 catch (  SecurityException e) {
    ex=e;
  }
catch (  NoSuchMethodException e) {
    return report(""String_Node_Str"",requestContextMethod.getName());
  }
  return die(ex,""String_Node_Str"",requestContextMethod.getName(),searchIn.getCanonicalName());
}"
81875,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(BoxesAndPrimitivesJreTest.class);
  suite.addTestSuite(ComplexKeysJreTest.class);
  suite.addTestSuite(FindServiceJreTest.class);
  suite.addTestSuite(LocatorJreTest.class);
  suite.addTestSuite(RequestFactoryExceptionPropagationJreTest.class);
  suite.addTestSuite(RequestFactoryInterfaceValidatorTest.class);
  suite.addTestSuite(RequestFactoryJreTest.class);
  suite.addTestSuite(RequestFactoryModelTest.class);
  suite.addTestSuite(RequestFactoryUnicodeEscapingJreTest.class);
  suite.addTestSuite(SimpleEntityProxyIdTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(BoxesAndPrimitivesJreTest.class);
  suite.addTestSuite(ComplexKeysJreTest.class);
  suite.addTestSuite(FindServiceJreTest.class);
  suite.addTestSuite(LocatorJreTest.class);
  suite.addTestSuite(RequestFactoryExceptionPropagationJreTest.class);
  suite.addTestSuite(RequestFactoryInterfaceValidatorTest.class);
  suite.addTestSuite(RequestFactoryJreTest.class);
  suite.addTestSuite(RequestFactoryModelTest.class);
  suite.addTestSuite(RequestFactoryUnicodeEscapingJreTest.class);
  suite.addTestSuite(ServiceInheritanceJreTest.class);
  suite.addTestSuite(SimpleEntityProxyIdTest.class);
  return suite;
}"
81876,"@Override public void generateSelectMatchStart(SourceWriter out,TreeLogger logger,String value) throws UnableToCompleteException {
  missingPluralForms.remove(value);
  if (value.startsWith(""String_Node_Str"")) {
    try {
      long val=Long.parseLong(value.substring(1));
      out.println(""String_Node_Str"" + val + ""String_Node_Str""+ value);
    }
 catch (    NumberFormatException e) {
      throw error(logger,""String_Node_Str"" + value + ""String_Node_Str"",e);
    }
    out.indent();
    return;
  }
  if (inExactMatches) {
    inExactMatches=false;
    out.println(""String_Node_Str"");
    out.indent();
    out.println(""String_Node_Str"" + argNumber + ""String_Node_Str"");
    out.indent();
  }
  if (""String_Node_Str"".equals(value)) {
    out.println(""String_Node_Str"");
    out.indent();
    return;
  }
  PluralForm[] pluralForms=pluralRule.pluralForms();
  for (int i=0; i < pluralForms.length; ++i) {
    if (pluralForms[i].getName().equals(value)) {
      out.println(""String_Node_Str"" + i + ""String_Node_Str""+ value);
      out.indent();
      return;
    }
  }
  logger.log(TreeLogger.WARN,""String_Node_Str"" + value + ""String_Node_Str""+ pluralRule.getClass().getCanonicalName()+ ""String_Node_Str"");
  out.println(""String_Node_Str"" + (bogusCaseValue++) + ""String_Node_Str""+ value+ ""String_Node_Str"");
  out.indent();
}","@Override public void generateSelectMatchStart(SourceWriter out,TreeLogger logger,String value) throws UnableToCompleteException {
  missingPluralForms.remove(value);
  if (value.startsWith(""String_Node_Str"")) {
    try {
      long val=Long.parseLong(value.substring(1));
      out.println(""String_Node_Str"" + val + ""String_Node_Str""+ value);
    }
 catch (    NumberFormatException e) {
      throw error(logger,""String_Node_Str"" + value + ""String_Node_Str"",e);
    }
    out.indent();
    return;
  }
  if (inExactMatches) {
    inExactMatches=false;
    out.println(""String_Node_Str"");
    out.indent();
    out.println(""String_Node_Str"" + argNumber + ""String_Node_Str"");
    out.indent();
  }
  if (AlternateMessageSelector.OTHER_FORM_NAME.equals(value)) {
    out.println(""String_Node_Str"");
    out.indent();
    return;
  }
  PluralForm[] pluralForms=pluralRule.pluralForms();
  for (int i=0; i < pluralForms.length; ++i) {
    if (pluralForms[i].getName().equals(value)) {
      out.println(""String_Node_Str"" + i + ""String_Node_Str""+ value);
      out.indent();
      return;
    }
  }
  logger.log(TreeLogger.WARN,""String_Node_Str"" + value + ""String_Node_Str""+ pluralRule.getClass().getCanonicalName()+ ""String_Node_Str"");
  out.println(""String_Node_Str"" + (bogusCaseValue++) + ""String_Node_Str""+ value+ ""String_Node_Str"");
  out.indent();
}"
81877,"/** 
 * Generate code for one list pattern.
 * @param logger logger to use for error/warning messages
 * @param locale locale we are generating code for
 * @param listArg the {n,list,...} argument in the original format pattern
 * @param val0 the expression defining the {0} argument in the list pattern
 * @param val1 the expression defining the {1} argument in the list pattern
 * @param elemType the element type of the list/array being rendered as a list* @param isSafeHtml true if the resulting string is SafeHtml
 * @param listPattern the list pattern to generate code for, ie ""{0}, {1}""
 * @param formatSecond true if the {1} parameter needs to be formatted
 * @param params parameters passed to the Messages method call
 * @return a constructed string containing the code to implement the givenlist pattern
 * @throws UnableToCompleteException
 */
private CharSequence formatListPattern(final TreeLogger logger,final GwtLocale locale,final ArgumentChunk listArg,final String val0,final String val1,final JType elemType,final boolean isSafeHtml,String listPattern,final boolean formatSecond,final Parameters params) throws UnableToCompleteException {
  final StringBuffer buf=new StringBuffer();
  final StringGenerator gen=new StringGenerator(buf,isSafeHtml);
  try {
    List<TemplateChunk> chunks=MessageFormatParser.parse(listPattern);
    for (    TemplateChunk chunk : chunks) {
      chunk.accept(new DefaultTemplateChunkVisitor(){
        @Override public void visit(        ArgumentChunk argChunk) throws UnableToCompleteException {
          if (argChunk.getArgumentNumber() == 0 || formatSecond) {
            formatArg(logger,locale,gen,listArg,argChunk.getArgumentNumber() == 0 ? val0 : val1,elemType,params);
          }
 else {
            gen.appendExpression(val1,isSafeHtml,false,false);
          }
        }
        @Override public void visit(        StringChunk stringChunk) throws UnableToCompleteException {
          gen.appendStringLiteral(stringChunk.getString());
        }
      }
);
    }
  }
 catch (  ParseException e) {
    logger.log(TreeLogger.ERROR,""String_Node_Str"" + listPattern + ""String_Node_Str""+ locale,e);
    throw new UnableToCompleteException();
  }
  gen.completeString();
  return buf;
}","/** 
 * Generate code for one list pattern.
 * @param logger logger to use for error/warning messages
 * @param locale locale we are generating code for
 * @param listArg the {n,list,...} argument in the original format pattern
 * @param val0 the expression defining the {0} argument in the list pattern
 * @param val1 the expression defining the {1} argument in the list pattern
 * @param elemType the element type of the list/array being rendered as a list* @param isSafeHtml true if the resulting string is SafeHtml
 * @param listPattern the list pattern to generate code for, ie ""{0}, {1}""
 * @param formatSecond true if the {1} parameter needs to be formatted
 * @param params parameters passed to the Messages method call
 * @return a constructed string containing the code to implement the givenlist pattern
 * @throws UnableToCompleteException
 */
private CharSequence formatListPattern(final TreeLogger logger,final GwtLocale locale,final ArgumentChunk listArg,final String val0,final String val1,final JType elemType,final boolean isSafeHtml,String listPattern,final boolean formatSecond,final Parameters params) throws UnableToCompleteException {
  final StringBuffer buf=new StringBuffer();
  final StringGenerator gen=new StringGenerator(buf,isSafeHtml);
  try {
    List<TemplateChunk> chunks=MessageFormatParser.parse(listPattern);
    for (    TemplateChunk chunk : chunks) {
      chunk.accept(new DefaultTemplateChunkVisitor(){
        @Override public void visit(        ArgumentChunk argChunk) throws UnableToCompleteException {
          if (argChunk.getArgumentNumber() == 0 || formatSecond) {
            formatArg(logger,locale,gen,listArg,argChunk.getArgumentNumber() == 0 ? val0 : val1,elemType,params);
          }
 else {
            gen.appendExpression(val1,isSafeHtml,false,false);
          }
        }
        @Override public void visit(        StringChunk stringChunk){
          gen.appendStringLiteral(stringChunk.getString());
        }
      }
);
    }
  }
 catch (  ParseException e) {
    logger.log(TreeLogger.ERROR,""String_Node_Str"" + listPattern + ""String_Node_Str""+ locale,e);
    throw new UnableToCompleteException();
  }
  gen.completeString();
  return buf;
}"
81878,"/** 
 * Generate a Java string for a given MessageFormat string.
 * @param logger
 * @param template
 * @param paramsAccessor
 * @param writer
 * @throws UnableToCompleteException
 */
private void generateString(final TreeLogger logger,final GwtLocale locale,final String template,final Parameters paramsAccessor,SourceWriter writer,final boolean isSafeHtml) throws UnableToCompleteException {
  StringBuffer outputBuf=new StringBuffer();
  final StringGenerator buf=new StringGenerator(outputBuf,isSafeHtml);
  final int n=paramsAccessor.getCount();
  try {
    for (    TemplateChunk chunk : MessageFormatParser.parse(template)) {
      chunk.accept(new DefaultTemplateChunkVisitor(){
        @Override public void visit(        ArgumentChunk argChunk) throws UnableToCompleteException {
          int argNumber=argChunk.getArgumentNumber();
          if (argNumber >= n) {
            throw error(logger,""String_Node_Str"" + argNumber + ""String_Node_Str""+ template);
          }
          JParameter param=paramsAccessor.getParameter(argNumber);
          String arg=""String_Node_Str"" + argNumber;
          if (argChunk.isList()) {
            buf.appendExpression(arg + ""String_Node_Str"",isSafeHtml,false,false);
          }
 else {
            JType paramType=param.getType();
            formatArg(logger,locale,buf,argChunk,paramsAccessor.getParameterExpression(argNumber),paramType,paramsAccessor);
          }
        }
        @Override public void visit(        StaticArgChunk staticArgChunk) throws UnableToCompleteException {
          buf.appendStringLiteral(staticArgChunk.getReplacement());
        }
        @Override public void visit(        StringChunk stringChunk){
          buf.appendStringLiteral(stringChunk.getString());
        }
      }
);
    }
  }
 catch (  ParseException e) {
    throw error(logger,e);
  }
  buf.completeString();
  writer.print(outputBuf.toString());
}","/** 
 * Generate a Java string for a given MessageFormat string.
 * @param logger
 * @param template
 * @param paramsAccessor
 * @param writer
 * @throws UnableToCompleteException
 */
private void generateString(final TreeLogger logger,final GwtLocale locale,final String template,final Parameters paramsAccessor,SourceWriter writer,final boolean isSafeHtml) throws UnableToCompleteException {
  StringBuffer outputBuf=new StringBuffer();
  final StringGenerator buf=new StringGenerator(outputBuf,isSafeHtml);
  final int n=paramsAccessor.getCount();
  try {
    for (    TemplateChunk chunk : MessageFormatParser.parse(template)) {
      chunk.accept(new DefaultTemplateChunkVisitor(){
        @Override public void visit(        ArgumentChunk argChunk) throws UnableToCompleteException {
          int argNumber=argChunk.getArgumentNumber();
          if (argNumber >= n) {
            throw error(logger,""String_Node_Str"" + argNumber + ""String_Node_Str""+ template);
          }
          JParameter param=paramsAccessor.getParameter(argNumber);
          String arg=""String_Node_Str"" + argNumber;
          if (argChunk.isList()) {
            buf.appendExpression(arg + ""String_Node_Str"",isSafeHtml,false,false);
          }
 else {
            JType paramType=param.getType();
            formatArg(logger,locale,buf,argChunk,paramsAccessor.getParameterExpression(argNumber),paramType,paramsAccessor);
          }
        }
        @Override public void visit(        StaticArgChunk staticArgChunk){
          buf.appendStringLiteral(staticArgChunk.getReplacement());
        }
        @Override public void visit(        StringChunk stringChunk){
          buf.appendStringLiteral(stringChunk.getString());
        }
      }
);
    }
  }
 catch (  ParseException e) {
    throw error(logger,e);
  }
  buf.completeString();
  writer.print(outputBuf.toString());
}"
81879,"public PluralFormSelector(TreeLogger logger,JMethod method,int argNumber,JParameter[] params,GwtLocale locale) throws UnableToCompleteException {
  super(logger,argNumber,params);
  PluralCount pluralCount=params[argNumber].getAnnotation(PluralCount.class);
  Class<? extends PluralRule> ruleClass=pluralCount.value();
  if (ruleClass == PluralRule.class) {
    ruleClass=DefaultRule.class;
  }
  pluralRule=createLocalizedPluralRule(logger,method.getEnclosingType().getOracle(),ruleClass,locale);
  missingPluralForms=new HashSet<String>();
  for (  PluralForm form : pluralRule.pluralForms()) {
    if (form.getWarnIfMissing() && !""String_Node_Str"".equals(form.getName())) {
      missingPluralForms.add(form.getName());
    }
  }
  Offset offsetAnnot=params[argNumber].getAnnotation(Offset.class);
  int offset=0;
  if (offsetAnnot != null) {
    offset=offsetAnnot.value();
  }
  this.pluralOffset=offset;
  boolean isArray=false;
  boolean isList=false;
  JPrimitiveType primType=argType.isPrimitive();
  JClassType classType=argType.isInterface();
  if (classType != null) {
    classType=classType.getErasedType();
    if (""String_Node_Str"".equals(classType.getQualifiedSourceName())) {
      isList=true;
    }
 else {
      classType=null;
    }
  }
  JArrayType arrayType=argType.isArray();
  if (arrayType != null) {
    isArray=true;
  }
  if (!isList && !isArray && (primType == null || (primType != JPrimitiveType.INT && primType != JPrimitiveType.SHORT))) {
    throw error(logger,method.getName() + ""String_Node_Str"");
  }
  String tempListSuffix=""String_Node_Str"";
  if (isList) {
    tempListSuffix=""String_Node_Str"";
  }
 else   if (isArray) {
    tempListSuffix=""String_Node_Str"";
  }
  String tempCountSuffix=tempListSuffix;
  if (isList || isArray || offset != 0) {
    tempCountSuffix=""String_Node_Str"";
  }
  listSuffix=tempListSuffix;
  countSuffix=tempCountSuffix;
}","public PluralFormSelector(TreeLogger logger,JMethod method,int argNumber,JParameter[] params,GwtLocale locale) throws UnableToCompleteException {
  super(logger,argNumber,params);
  PluralCount pluralCount=params[argNumber].getAnnotation(PluralCount.class);
  Class<? extends PluralRule> ruleClass=pluralCount.value();
  if (ruleClass == PluralRule.class) {
    ruleClass=DefaultRule.class;
  }
  pluralRule=createLocalizedPluralRule(logger,method.getEnclosingType().getOracle(),ruleClass,locale);
  missingPluralForms=new HashSet<String>();
  for (  PluralForm form : pluralRule.pluralForms()) {
    if (form.getWarnIfMissing() && !AlternateMessageSelector.OTHER_FORM_NAME.equals(form.getName())) {
      missingPluralForms.add(form.getName());
    }
  }
  Offset offsetAnnot=params[argNumber].getAnnotation(Offset.class);
  int offset=0;
  if (offsetAnnot != null) {
    offset=offsetAnnot.value();
  }
  this.pluralOffset=offset;
  boolean isArray=false;
  boolean isList=false;
  JPrimitiveType primType=argType.isPrimitive();
  JClassType classType=argType.isInterface();
  if (classType != null) {
    classType=classType.getErasedType();
    if (""String_Node_Str"".equals(classType.getQualifiedSourceName())) {
      isList=true;
    }
 else {
      classType=null;
    }
  }
  JArrayType arrayType=argType.isArray();
  if (arrayType != null) {
    isArray=true;
  }
  if (!isList && !isArray && (primType == null || (primType != JPrimitiveType.INT && primType != JPrimitiveType.SHORT))) {
    throw error(logger,method.getName() + ""String_Node_Str"");
  }
  String tempListSuffix=""String_Node_Str"";
  if (isList) {
    tempListSuffix=""String_Node_Str"";
  }
 else   if (isArray) {
    tempListSuffix=""String_Node_Str"";
  }
  String tempCountSuffix=tempListSuffix;
  if (isList || isArray || offset != 0) {
    tempCountSuffix=""String_Node_Str"";
  }
  listSuffix=tempListSuffix;
  countSuffix=tempCountSuffix;
}"
81880,"/** 
 * @param logger
 * @param m
 * @param locale
 * @param resourceEntry
 * @param selectors
 * @param paramsAccessor
 * @param isSafeHtml
 * @param forms
 * @throws UnableToCompleteException
 */
private void generateMessageSelectors(TreeLogger logger,JMethod m,GwtLocale locale,ResourceEntry resourceEntry,List<AlternateFormSelector> selectors,Parameters paramsAccessor,boolean isSafeHtml,String[] forms) throws UnableToCompleteException {
  int numSelectors=selectors.size();
  String[] lastForm=new String[numSelectors];
  for (  String form : forms) {
    String[] splitForms=form.split(""String_Node_Str"");
    if (splitForms.length != numSelectors) {
      throw error(logger,""String_Node_Str"" + m.getName() + ""String_Node_Str""+ form+ ""String_Node_Str"");
    }
    boolean allOther=true;
    for (    String splitForm : splitForms) {
      if (splitForm.startsWith(""String_Node_Str"")) {
        allOther=false;
      }
 else       if (!""String_Node_Str"".equals(splitForm)) {
        allOther=false;
      }
    }
    if (allOther) {
      logger.log(TreeLogger.WARN,""String_Node_Str"" + ""String_Node_Str"");
      continue;
    }
    int firstDifferent=0;
    while (firstDifferent < numSelectors && splitForms[firstDifferent].equals(lastForm[firstDifferent])) {
      firstDifferent++;
    }
    for (int i=numSelectors; i-- > firstDifferent; ) {
      if (lastForm[i] != null) {
        selectors.get(i).generateSelectMatchEnd(writer,lastForm[i]);
        if (i > firstDifferent) {
          selectors.get(i).generateSelectEnd(writer);
        }
      }
    }
    for (int i=firstDifferent; i < numSelectors; ++i) {
      if (i > firstDifferent || lastForm[i] == null) {
        selectors.get(i).generateSelectStart(writer,splitForms[i].startsWith(""String_Node_Str""));
      }
      selectors.get(i).generateSelectMatchStart(writer,logger,splitForms[i]);
      lastForm[i]=splitForms[i];
    }
    writer.print(""String_Node_Str"");
    generateString(logger,locale,resourceEntry.getForm(form),paramsAccessor,writer,isSafeHtml);
    writer.println(""String_Node_Str"");
  }
  for (int i=numSelectors; i-- > 0; ) {
    if (lastForm[i] != null) {
      selectors.get(i).generateSelectMatchEnd(writer,lastForm[i]);
      selectors.get(i).generateSelectEnd(writer);
    }
  }
}","/** 
 * @param logger
 * @param m
 * @param locale
 * @param resourceEntry
 * @param selectors
 * @param paramsAccessor
 * @param isSafeHtml
 * @param forms
 * @throws UnableToCompleteException
 */
private void generateMessageSelectors(TreeLogger logger,JMethod m,GwtLocale locale,ResourceEntry resourceEntry,List<AlternateFormSelector> selectors,Parameters paramsAccessor,boolean isSafeHtml,String[] forms) throws UnableToCompleteException {
  int numSelectors=selectors.size();
  String[] lastForm=new String[numSelectors];
  for (  String form : forms) {
    String[] splitForms=form.split(""String_Node_Str"");
    if (splitForms.length != numSelectors) {
      throw error(logger,""String_Node_Str"" + m.getName() + ""String_Node_Str""+ form+ ""String_Node_Str"");
    }
    boolean allOther=true;
    for (    String splitForm : splitForms) {
      if (splitForm.startsWith(""String_Node_Str"")) {
        allOther=false;
      }
 else       if (!AlternateMessageSelector.OTHER_FORM_NAME.equals(splitForm)) {
        allOther=false;
      }
    }
    if (allOther) {
      logger.log(TreeLogger.WARN,""String_Node_Str"" + ""String_Node_Str"");
      continue;
    }
    int firstDifferent=0;
    while (firstDifferent < numSelectors && splitForms[firstDifferent].equals(lastForm[firstDifferent])) {
      firstDifferent++;
    }
    for (int i=numSelectors; i-- > firstDifferent; ) {
      if (lastForm[i] != null) {
        selectors.get(i).generateSelectMatchEnd(writer,lastForm[i]);
        if (i > firstDifferent) {
          selectors.get(i).generateSelectEnd(writer);
        }
      }
    }
    for (int i=firstDifferent; i < numSelectors; ++i) {
      if (i > firstDifferent || lastForm[i] == null) {
        selectors.get(i).generateSelectStart(writer,splitForms[i].startsWith(""String_Node_Str""));
      }
      selectors.get(i).generateSelectMatchStart(writer,logger,splitForms[i]);
      lastForm[i]=splitForms[i];
    }
    writer.print(""String_Node_Str"");
    generateString(logger,locale,resourceEntry.getForm(form),paramsAccessor,writer,isSafeHtml);
    writer.println(""String_Node_Str"");
  }
  for (int i=numSelectors; i-- > 0; ) {
    if (lastForm[i] != null) {
      selectors.get(i).generateSelectMatchEnd(writer,lastForm[i]);
      selectors.get(i).generateSelectEnd(writer);
    }
  }
}"
81881,"protected void addMapping(List<AlternateFormMapping> mapping,int numSelectors,String joinedForms,String msg){
  String[] formNames=joinedForms.split(""String_Node_Str"");
  if (formNames.length != numSelectors) {
    return;
  }
  List<AlternateForm> forms=new ArrayList<AlternateForm>();
  boolean nonOther=false;
  for (int selIdx=0; selIdx < numSelectors; ++selIdx) {
    String formName=formNames[selIdx];
    if (!selectors[selIdx].isFormAcceptable(formName)) {
      nonOther=false;
      break;
    }
    if (isStringMap || !""String_Node_Str"".equals(formName)) {
      nonOther=true;
    }
    forms.add(new AlternateForm(formName,formName));
  }
  if (!nonOther) {
  }
 else {
    mapping.add(new AlternateFormMapping(forms,msg));
  }
}","protected void addMapping(List<AlternateFormMapping> mapping,int numSelectors,String joinedForms,String msg){
  String[] formNames=joinedForms.split(""String_Node_Str"");
  if (formNames.length != numSelectors) {
    return;
  }
  List<AlternateForm> forms=new ArrayList<AlternateForm>();
  boolean nonOther=false;
  for (int selIdx=0; selIdx < numSelectors; ++selIdx) {
    String formName=formNames[selIdx];
    if (!selectors[selIdx].isFormAcceptable(formName)) {
      nonOther=false;
      break;
    }
    if (isStringMap || !AlternateMessageSelector.OTHER_FORM_NAME.equals(formName)) {
      nonOther=true;
    }
    forms.add(new AlternateForm(formName,formName));
  }
  if (!nonOther) {
  }
 else {
    mapping.add(new AlternateFormMapping(forms,msg));
  }
}"
81882,"/** 
 * Called by subclasses to complete initialization, after ensuring that calls to   {@link #getAnnotation(Class)} will function properly.
 */
protected void init(){
  matchedLocale=getDefaultLocale();
  if (isAnnotationPresent(DefaultMessage.class)) {
    messageStyle=MessageStyle.MESSAGE_FORMAT;
    DefaultMessage defMsgAnnot=getAnnotation(DefaultMessage.class);
    defaultMessage=defMsgAnnot.value();
  }
 else   if (isAnnotationPresent(DefaultStringMapValue.class)) {
    messageStyle=MessageStyle.PLAIN;
    processStringMap(getAnnotation(DefaultStringMapValue.class));
    isStringMap=true;
  }
 else {
    messageStyle=MessageStyle.PLAIN;
    defaultMessage=MessageUtils.getConstantsDefaultValue(this);
  }
  Meaning meaningAnnot=getAnnotation(Meaning.class);
  if (meaningAnnot != null) {
    meaning=meaningAnnot.value();
  }
 else {
    meaning=null;
  }
  if (overrideDefault == null) {
    overrideDefault=getTranslation(localeFactory.getDefault());
    if (overrideDefault == this) {
      overrideDefault=null;
    }
  }
  List<Parameter> params=getParameters();
  int[] selectorIndices=getSelectorParameterIndices();
  int numSelectors=selectorIndices.length;
  defaultForms=new ArrayList<AlternateForm>();
  selectors=new AlternateMessageSelector[numSelectors];
  for (int i=0; i < numSelectors; ++i) {
    int selIdx=selectorIndices[i];
    if (selIdx < 0) {
      selectors[i]=new AlternateMessageSelector(){
        public boolean isFormAcceptable(        String form){
          return true;
        }
      }
;
    }
 else {
      selectors[i]=params.get(selIdx).getAlternateMessageSelector();
      defaultForms.add(AlternateMessageSelector.OTHER);
    }
  }
}","/** 
 * Called by subclasses to complete initialization, after ensuring that calls to   {@link #getAnnotation(Class)} will function properly.
 */
protected void init(){
  matchedLocale=getDefaultLocale();
  if (isAnnotationPresent(DefaultMessage.class)) {
    messageStyle=MessageStyle.MESSAGE_FORMAT;
    DefaultMessage defMsgAnnot=getAnnotation(DefaultMessage.class);
    defaultMessage=defMsgAnnot.value();
  }
 else   if (isAnnotationPresent(DefaultStringMapValue.class)) {
    messageStyle=MessageStyle.PLAIN;
    processStringMap(getAnnotation(DefaultStringMapValue.class));
    isStringMap=true;
  }
 else {
    messageStyle=MessageStyle.PLAIN;
    defaultMessage=MessageUtils.getConstantsDefaultValue(this);
  }
  Meaning meaningAnnot=getAnnotation(Meaning.class);
  if (meaningAnnot != null) {
    meaning=meaningAnnot.value();
  }
 else {
    meaning=null;
  }
  if (overrideDefault == null) {
    overrideDefault=getTranslation(localeFactory.getDefault());
    if (overrideDefault == this) {
      overrideDefault=null;
    }
  }
  List<Parameter> params=getParameters();
  int[] selectorIndices=getSelectorParameterIndices();
  int numSelectors=selectorIndices.length;
  defaultForms=new ArrayList<AlternateForm>();
  selectors=new AlternateMessageSelector[numSelectors];
  for (int i=0; i < numSelectors; ++i) {
    int selIdx=selectorIndices[i];
    if (selIdx < 0) {
      selectors[i]=new AlternateMessageSelector(){
        public boolean isFormAcceptable(        String form){
          return true;
        }
      }
;
    }
 else {
      selectors[i]=params.get(selIdx).getAlternateMessageSelector();
      defaultForms.add(AlternateMessageSelector.OTHER_FORM);
    }
  }
}"
81883,"public void accept(MessageVisitor mv,GwtLocale locale) throws MessageProcessingException {
  ensureSelectorParams();
  List<Parameter> params=getParameters();
  int numSelectors=selectorParams.length;
  String[] lastForm=new String[numSelectors];
  MessageTranslation trans=null;
  if (locale != null) {
    for (    GwtLocale search : locale.getCompleteSearchList()) {
      trans=getTranslation(search);
      if (trans != null) {
        break;
      }
    }
  }
  if (trans == null) {
    trans=this;
  }
  for (  AlternateFormMapping mapping : trans.getAllMessageForms()) {
    List<AlternateForm> forms=mapping.getForms();
    boolean allOther=true;
    for (int i=0; i < forms.size(); ++i) {
      lastForm[i]=forms.get(i).getName();
      if (!""String_Node_Str"".equals(lastForm[i])) {
        allOther=false;
      }
    }
    mv.visitTranslation(lastForm,allOther,messageStyle,mapping.getMessage());
  }
  mv.endMessage(this,trans);
}","public void accept(MessageVisitor mv,GwtLocale locale) throws MessageProcessingException {
  ensureSelectorParams();
  List<Parameter> params=getParameters();
  int numSelectors=selectorParams.length;
  String[] lastForm=new String[numSelectors];
  MessageTranslation trans=null;
  if (locale != null) {
    for (    GwtLocale search : locale.getCompleteSearchList()) {
      trans=getTranslation(search);
      if (trans != null) {
        break;
      }
    }
  }
  if (trans == null) {
    trans=this;
  }
  for (  AlternateFormMapping mapping : trans.getAllMessageForms()) {
    List<AlternateForm> forms=mapping.getForms();
    boolean allOther=true;
    for (int i=0; i < forms.size(); ++i) {
      lastForm[i]=forms.get(i).getName();
      if (!AlternateMessageSelector.OTHER_FORM_NAME.equals(lastForm[i])) {
        allOther=false;
      }
    }
    mv.visitTranslation(lastForm,allOther,messageStyle,mapping.getMessage());
  }
  mv.endMessage(this,trans);
}"
81884,"private AlternateMessageSelector computeAlternateMessageSelector(){
  PluralCount pluralAnnot=getAnnotation(PluralCount.class);
  if (pluralAnnot != null) {
    Class<? extends PluralRule> pluralClass=pluralAnnot.value();
    DefaultLocale defLocaleAnnot=getAnnotation(DefaultLocale.class);
    String defaultLocale=null;
    if (defLocaleAnnot != null) {
      defaultLocale=defLocaleAnnot.value();
    }
 else {
      defaultLocale=DefaultLocale.DEFAULT_LOCALE;
    }
    PluralRule pluralRule=getLocalizedPluralRule(pluralClass,localeFactory.fromString(defaultLocale));
    return new PluralRuleAdapter(pluralRule);
  }
  Select selectAnnot=getAnnotation(Select.class);
  if (selectAnnot != null) {
    final String[] validValues=type.getEnumValues();
    return new AlternateMessageSelector(){
      public boolean isFormAcceptable(      String form){
        if (validValues == null) {
          return true;
        }
        for (        String value : validValues) {
          if (value.equals(form)) {
            return true;
          }
        }
        return false;
      }
    }
;
  }
  return null;
}","private AlternateMessageSelector computeAlternateMessageSelector(){
  PluralCount pluralAnnot=getAnnotation(PluralCount.class);
  if (pluralAnnot != null) {
    Class<? extends PluralRule> pluralClass=pluralAnnot.value();
    DefaultLocale defLocaleAnnot=getAnnotation(DefaultLocale.class);
    String defaultLocale=null;
    if (defLocaleAnnot != null) {
      defaultLocale=defLocaleAnnot.value();
    }
 else {
      defaultLocale=DefaultLocale.DEFAULT_LOCALE;
    }
    PluralRule pluralRule=getLocalizedPluralRule(pluralClass,localeFactory.fromString(defaultLocale));
    return new PluralRuleAdapter(pluralRule);
  }
  Select selectAnnot=getAnnotation(Select.class);
  if (selectAnnot != null) {
    final String[] validValues=type.getEnumValues();
    return new AlternateMessageSelector(){
      public boolean isFormAcceptable(      String form){
        if (validValues == null || AlternateMessageSelector.OTHER_FORM_NAME.equals(form)) {
          return true;
        }
        for (        String value : validValues) {
          if (value.equals(form)) {
            return true;
          }
        }
        return false;
      }
    }
;
  }
  return null;
}"
81885,"public boolean isFormAcceptable(String form){
  if (validValues == null) {
    return true;
  }
  for (  String value : validValues) {
    if (value.equals(form)) {
      return true;
    }
  }
  return false;
}","public boolean isFormAcceptable(String form){
  if (validValues == null || AlternateMessageSelector.OTHER_FORM_NAME.equals(form)) {
    return true;
  }
  for (  String value : validValues) {
    if (value.equals(form)) {
      return true;
    }
  }
  return false;
}"
81886,"public static Test suite(){
  GWTTestSuite suite=new GWTTestSuite(""String_Node_Str"");
  suite.addTestSuite(DocumentTest.class);
  suite.addTestSuite(NodeTest.class);
  suite.addTestSuite(ElementTest.class);
  suite.addTestSuite(FormTests.class);
  suite.addTestSuite(MapTests.class);
  suite.addTestSuite(SelectTests.class);
  suite.addTestSuite(StyleInjectorTest.class);
  suite.addTestSuite(TableTests.class);
  suite.addTestSuite(TextTest.class);
  return suite;
}","public static Test suite(){
  GWTTestSuite suite=new GWTTestSuite(""String_Node_Str"");
  suite.addTestSuite(DocumentTest.class);
  suite.addTestSuite(NodeTest.class);
  suite.addTestSuite(ElementTest.class);
  suite.addTestSuite(FormTests.class);
  suite.addTestSuite(FrameTests.class);
  suite.addTestSuite(MapTests.class);
  suite.addTestSuite(SelectTests.class);
  suite.addTestSuite(StyleInjectorTest.class);
  suite.addTestSuite(TableTests.class);
  suite.addTestSuite(TextTest.class);
  return suite;
}"
81887,"/** 
 * Determines whether the given   {@link JavaScriptObject} is a DOM node. A<code>null</code> object will cause this method to return <code>false</code>.
 */
public static native boolean is(JavaScriptObject o);","/** 
 * Determines whether the given   {@link JavaScriptObject} is a DOM node. A<code>null</code> object will cause this method to return <code>false</code>. The try catch is needed for the firefox permission error: ""Permission denied to access property 'nodeType'""
 */
public static native boolean is(JavaScriptObject o);"
81888,"public boolean isChanged(){
  for (  AutoBean<?> bean : editedProxies.values()) {
    AutoBean<?> previous=bean.getTag(Constants.PARENT_OBJECT);
    if (previous == null) {
      Class<?> proxyClass=((EntityProxy)bean.as()).stableId().getProxyClass();
      previous=getRequestFactory().getAutoBeanFactory().create(proxyClass);
    }
    if (!AutoBeanUtils.diff(previous,bean).isEmpty()) {
      return true;
    }
  }
  return false;
}","public boolean isChanged(){
  for (  AutoBean<? extends BaseProxy> bean : editedProxies.values()) {
    AutoBean<?> previous=bean.getTag(Constants.PARENT_OBJECT);
    if (previous == null) {
      Class<?> proxyClass=stableId(bean).getProxyClass();
      previous=getRequestFactory().getAutoBeanFactory().create(proxyClass);
    }
    if (!AutoBeanUtils.diff(previous,bean).isEmpty()) {
      return true;
    }
  }
  return false;
}"
81889,"/** 
 * Returns a hash code on the byte code of the class. TODO(zundel): should be a hash on only the public API for this class. 
 */
public String getSignatureHash(){
  if (signatureHash == null) {
    signatureHash=Util.computeStrongName(getBytes());
  }
  return signatureHash;
}","/** 
 * Returns a hash code on the byte code of the class.
 */
public String getSignatureHash(){
  if (signatureHash == null) {
    signatureHash=BytecodeSignatureMaker.getCompileDependencySignature(getBytes());
  }
  return signatureHash;
}"
81890,"private Object writeReplace(){
  return new SerializedRef(target.getInternalName(),getSignatureHash());
}","protected Object writeReplace(){
  return new SerializedRef(target.getInternalName(),getSignatureHash());
}"
81891,"Splittable encode(Object obj){
  Splittable value;
  if (obj == null) {
    return LazySplittable.NULL;
  }
 else   if (obj.getClass().isEnum() && getRequestFactory() instanceof EnumMap) {
    value=ValueCodex.encode(((EnumMap)getRequestFactory()).getToken((Enum<?>)obj));
  }
 else   if (ValueCodex.canDecode(obj.getClass())) {
    value=ValueCodex.encode(obj);
  }
 else {
    value=AutoBeanCodex.encode(AutoBeanUtils.getAutoBean(obj));
  }
  return value;
}","Splittable encode(Object obj){
  Splittable value;
  if (obj == null) {
    return LazySplittable.NULL;
  }
 else   if (obj.getClass().isEnum() && getRequestFactory().getAutoBeanFactory() instanceof EnumMap) {
    value=ValueCodex.encode(((EnumMap)getRequestFactory().getAutoBeanFactory()).getToken((Enum<?>)obj));
  }
 else   if (ValueCodex.canDecode(obj.getClass())) {
    value=ValueCodex.encode(obj);
  }
 else {
    value=AutoBeanCodex.encode(AutoBeanUtils.getAutoBean(obj));
  }
  return value;
}"
81892,"public static Test suite(){
  GWTTestSuite suite=new GWTTestSuite(""String_Node_Str"");
  suite.addTestSuite(DocumentTest.class);
  suite.addTestSuite(NodeTest.class);
  suite.addTestSuite(ElementTest.class);
  suite.addTestSuite(FormTests.class);
  suite.addTestSuite(FrameTests.class);
  suite.addTestSuite(MapTests.class);
  suite.addTestSuite(SelectTests.class);
  suite.addTestSuite(StyleInjectorTest.class);
  suite.addTestSuite(TableTests.class);
  suite.addTestSuite(TextTest.class);
  return suite;
}","public static Test suite(){
  GWTTestSuite suite=new GWTTestSuite(""String_Node_Str"");
  suite.addTestSuite(DocumentTest.class);
  suite.addTestSuite(NodeTest.class);
  suite.addTestSuite(ElementTest.class);
  suite.addTestSuite(FormTests.class);
  suite.addTestSuite(MapTests.class);
  suite.addTestSuite(SelectTests.class);
  suite.addTestSuite(StyleInjectorTest.class);
  suite.addTestSuite(TableTests.class);
  suite.addTestSuite(TextTest.class);
  return suite;
}"
81893,"/** 
 * Determines whether the given class fully implements an interface (either directly or via inherited methods).
 */
private boolean classFullyImplements(JClassType cls,JClassType intf){
  if (!intf.isAssignableFrom(cls)) {
    return false;
  }
  for (  JMethod meth : intf.getInheritableMethods()) {
    if (!classImplementsMethod(cls,meth)) {
      return false;
    }
  }
  return true;
}","/** 
 * Determines whether the given class fully implements an interface (either directly or via inherited methods).
 */
private boolean classFullyImplements(JClassType cls,JClassType intf){
  if ((intf.getMethods().length > 0) && !intf.isAssignableFrom(cls)) {
    return false;
  }
  for (  JMethod meth : intf.getInheritableMethods()) {
    if (!classImplementsMethod(cls,meth)) {
      return false;
    }
  }
  return true;
}"
81894,"/** 
 * This constructor may be used by subclasses to explicitly use an existing element. This element must be an &lt;img&gt; element.
 * @param element the element to be used
 */
protected Image(Element element){
  ImageElement.as(element);
  setElement(element);
}","/** 
 * This constructor may be used by subclasses to explicitly use an existing element. This element must be an &lt;img&gt; element.
 * @param element the element to be used
 */
protected Image(Element element){
  ImageElement.as(element);
  setElement(element);
  changeState(new UnclippedState(element));
}"
81895,"public static Test suite(){
  GWTTestSuite suite=new GWTTestSuite(""String_Node_Str"");
  suite.addTestSuite(DocumentTest.class);
  suite.addTestSuite(NodeTest.class);
  suite.addTestSuite(ElementTest.class);
  suite.addTestSuite(FormTests.class);
  suite.addTestSuite(MapTests.class);
  suite.addTestSuite(SelectTests.class);
  suite.addTestSuite(StyleInjectorTest.class);
  suite.addTestSuite(TableTests.class);
  suite.addTestSuite(TextTest.class);
  return suite;
}","public static Test suite(){
  GWTTestSuite suite=new GWTTestSuite(""String_Node_Str"");
  suite.addTestSuite(DocumentTest.class);
  suite.addTestSuite(NodeTest.class);
  suite.addTestSuite(ElementTest.class);
  suite.addTestSuite(FormTests.class);
  suite.addTestSuite(FrameTests.class);
  suite.addTestSuite(MapTests.class);
  suite.addTestSuite(SelectTests.class);
  suite.addTestSuite(StyleInjectorTest.class);
  suite.addTestSuite(TableTests.class);
  suite.addTestSuite(TextTest.class);
  return suite;
}"
81896,"private void animate(int duration){
  if (layoutData.size() == 0) {
    return;
  }
  double top=0, bottom=0;
  int i=0;
  for (; i < layoutData.size(); ++i) {
    LayoutData data=layoutData.get(i);
    layoutPanel.setWidgetTopHeight(data.header,top,unit,data.headerSize,unit);
    top+=data.headerSize;
    layoutPanel.setWidgetTopHeight(data.widget,top,unit,0,unit);
    if (i == selectedIndex) {
      break;
    }
  }
  for (int j=layoutData.size() - 1; j > i; --j) {
    LayoutData data=layoutData.get(j);
    layoutPanel.setWidgetBottomHeight(data.header,bottom,unit,data.headerSize,unit);
    layoutPanel.setWidgetBottomHeight(data.widget,bottom,unit,0,unit);
    bottom+=data.headerSize;
  }
  LayoutData data=layoutData.get(selectedIndex);
  layoutPanel.setWidgetTopBottom(data.widget,top,unit,bottom,unit);
  layoutPanel.animate(duration);
}","public void animate(int duration,AnimationCallback callback){
  if (layoutData.size() == 0) {
    if (callback != null) {
      callback.onAnimationComplete();
    }
    return;
  }
  double top=0, bottom=0;
  int i=0;
  for (; i < layoutData.size(); ++i) {
    LayoutData data=layoutData.get(i);
    layoutPanel.setWidgetTopHeight(data.header,top,unit,data.headerSize,unit);
    top+=data.headerSize;
    layoutPanel.setWidgetTopHeight(data.widget,top,unit,0,unit);
    if (i == selectedIndex) {
      break;
    }
  }
  for (int j=layoutData.size() - 1; j > i; --j) {
    LayoutData data=layoutData.get(j);
    layoutPanel.setWidgetBottomHeight(data.header,bottom,unit,data.headerSize,unit);
    layoutPanel.setWidgetBottomHeight(data.widget,bottom,unit,0,unit);
    bottom+=data.headerSize;
  }
  LayoutData data=layoutData.get(selectedIndex);
  layoutPanel.setWidgetTopBottom(data.widget,top,unit,bottom,unit);
  layoutPanel.animate(duration,callback);
}"
81897,"public boolean remove(Widget child){
  if (child.getParent() != layoutPanel) {
    return false;
  }
  for (int i=0; i < layoutData.size(); ++i) {
    LayoutData data=layoutData.get(i);
    if (data.widget == child) {
      layoutPanel.remove(data.header);
      layoutPanel.remove(data.widget);
      data.header.removeStyleName(HEADER_STYLE);
      data.widget.removeStyleName(CONTENT_STYLE);
      layoutData.remove(i);
      if (selectedIndex == i) {
        selectedIndex=-1;
        if (layoutData.size() > 0) {
          showWidget(layoutData.get(0).widget);
        }
      }
      return true;
    }
  }
  return false;
}","public boolean remove(Widget child){
  if (child.getParent() != layoutPanel) {
    return false;
  }
  for (int i=0; i < layoutData.size(); ++i) {
    LayoutData data=layoutData.get(i);
    if (data.widget == child) {
      layoutPanel.remove(data.header);
      layoutPanel.remove(data.widget);
      data.header.removeStyleName(HEADER_STYLE);
      data.widget.removeStyleName(CONTENT_STYLE);
      layoutData.remove(i);
      if (selectedIndex == i) {
        selectedIndex=-1;
        if (layoutData.size() > 0) {
          showWidget(layoutData.get(0).widget);
        }
      }
 else {
        if (i <= selectedIndex) {
          selectedIndex--;
        }
        animate(animationDuration);
      }
      return true;
    }
  }
  return false;
}"
81898,"/** 
 * Tests to ensure that arbitrary widgets can be added/inserted effectively.
 */
public void testInsertWithWidgets(){
  StackLayoutPanel p=new StackLayoutPanel(Unit.EM);
  TextBox wa=new TextBox();
  CheckBox wb=new CheckBox();
  VerticalPanel wc=new VerticalPanel();
  wc.add(new Label(""String_Node_Str""));
  wc.add(new Label(""String_Node_Str""));
  p.add(new Label(""String_Node_Str""),wc,1);
  p.insert(new Label(""String_Node_Str""),wb,1,0);
  p.insert(new Label(""String_Node_Str""),wa,1,0);
  assertNotNull(p.getHeaderWidget(0));
  assertNotNull(p.getHeaderWidget(1));
  assertNotNull(p.getHeaderWidget(2));
  assertEquals(3,p.getWidgetCount());
}","/** 
 * Tests to ensure that arbitrary widgets can be added/inserted effectively.
 */
public void testInsertWithWidgets(){
  StackLayoutPanel p=new StackLayoutPanel(Unit.EM);
  TextBox wa=new TextBox();
  CheckBox wb=new CheckBox();
  VerticalPanel wc=new VerticalPanel();
  wc.add(new Label(""String_Node_Str""));
  wc.add(new Label(""String_Node_Str""));
  Label contentA=new Label(""String_Node_Str"");
  Label contentB=new Label(""String_Node_Str"");
  Label contentC=new Label(""String_Node_Str"");
  p.add(contentC,wc,1);
  p.insert(contentB,wb,1,0);
  p.showWidget(1);
  p.insert(contentA,wa,1,0);
  assertEquals(2,p.getVisibleIndex());
  assertEquals(wa,p.getHeaderWidget(0));
  assertEquals(wb,p.getHeaderWidget(1));
  assertEquals(wc,p.getHeaderWidget(2));
  assertEquals(contentA,p.getWidget(0));
  assertEquals(contentB,p.getWidget(1));
  assertEquals(contentC,p.getWidget(2));
  assertEquals(3,p.getWidgetCount());
}"
81899,"/** 
 * Initialize the location of the widget that will slide into view.
 */
private void doBeforeLayout(){
  Layer oldLayer=(lastVisibleWidget == null) ? null : (Layer)lastVisibleWidget.getLayoutData();
  Layer newLayer=(visibleWidget == null) ? null : (Layer)visibleWidget.getLayoutData();
  int oldIndex=getWidgetIndex(lastVisibleWidget);
  int newIndex=getWidgetIndex(visibleWidget);
  double direction=(oldIndex < newIndex) ? 100.0 : -100.0;
  double vDirection=isAnimationVertical ? direction : 0.0;
  double hDirection=isAnimationVertical ? 0.0 : LocaleInfo.getCurrentLocale().isRTL() ? -direction : direction;
  if (oldLayer != null) {
    oldLayer.setTopHeight(0.0,Unit.PCT,100.0,Unit.PCT);
    oldLayer.setLeftWidth(0.0,Unit.PCT,100.0,Unit.PCT);
    setWidgetVisible(lastVisibleWidget,oldLayer,true);
  }
  if (newLayer != null) {
    newLayer.setTopHeight(vDirection,Unit.PCT,100.0,Unit.PCT);
    newLayer.setLeftWidth(hDirection,Unit.PCT,100.0,Unit.PCT);
    setWidgetVisible(visibleWidget,newLayer,true);
  }
  layout.layout();
  if (oldLayer != null) {
    oldLayer.setTopHeight(-vDirection,Unit.PCT,100.0,Unit.PCT);
    oldLayer.setLeftWidth(-hDirection,Unit.PCT,100.0,Unit.PCT);
    setWidgetVisible(lastVisibleWidget,oldLayer,true);
  }
  if (newLayer != null) {
    newLayer.setTopHeight(0.0,Unit.PCT,100.0,Unit.PCT);
    newLayer.setLeftWidth(0.0,Unit.PCT,100.0,Unit.PCT);
    setWidgetVisible(visibleWidget,newLayer,true);
  }
  hidingWidget=lastVisibleWidget;
  lastVisibleWidget=visibleWidget;
}","/** 
 * Initialize the location of the widget that will slide into view.
 */
private void doBeforeLayout(){
  Layer oldLayer=(lastVisibleWidget == null) ? null : (Layer)lastVisibleWidget.getLayoutData();
  Layer newLayer=(visibleWidget == null) ? null : (Layer)visibleWidget.getLayoutData();
  int oldIndex=getWidgetIndex(lastVisibleWidget);
  int newIndex=getWidgetIndex(visibleWidget);
  double direction=(oldIndex < newIndex) ? 100.0 : -100.0;
  double vDirection=isAnimationVertical ? direction : 0.0;
  double hDirection=isAnimationVertical ? 0.0 : LocaleInfo.getCurrentLocale().isRTL() ? -direction : direction;
  hidingWidget=null;
  if (visibleWidget != lastVisibleWidget) {
    if (oldLayer != null) {
      oldLayer.setTopHeight(0.0,Unit.PCT,100.0,Unit.PCT);
      oldLayer.setLeftWidth(0.0,Unit.PCT,100.0,Unit.PCT);
      setWidgetVisible(lastVisibleWidget,oldLayer,true);
    }
    if (newLayer != null) {
      newLayer.setTopHeight(vDirection,Unit.PCT,100.0,Unit.PCT);
      newLayer.setLeftWidth(hDirection,Unit.PCT,100.0,Unit.PCT);
      setWidgetVisible(visibleWidget,newLayer,true);
    }
    layout.layout();
    hidingWidget=lastVisibleWidget;
  }
  if (oldLayer != null) {
    oldLayer.setTopHeight(-vDirection,Unit.PCT,100.0,Unit.PCT);
    oldLayer.setLeftWidth(-hDirection,Unit.PCT,100.0,Unit.PCT);
    setWidgetVisible(lastVisibleWidget,oldLayer,true);
  }
  if (newLayer != null) {
    newLayer.setTopHeight(0.0,Unit.PCT,100.0,Unit.PCT);
    newLayer.setLeftWidth(0.0,Unit.PCT,100.0,Unit.PCT);
    setWidgetVisible(visibleWidget,newLayer,true);
  }
  lastVisibleWidget=visibleWidget;
}"
81900,"private boolean process(ReferenceBinding binding){
  JDeclaredType type=(JDeclaredType)getType(binding);
  try {
    if (type instanceof JClassType && type != program.getTypeJavaLangObject()) {
      JMethod getClassMethod=program.createMethod(type.getSourceInfo().makeChild(BuildDeclMapVisitor.class,""String_Node_Str""),""String_Node_Str"",type,program.getTypeJavaLangClass(),false,false,false,false,false);
      assert(type.getMethods().get(2) == getClassMethod);
      getClassMethod.freezeParamTypes();
      getClassMethod.setSynthetic();
    }
    if (binding.isNestedType() && !binding.isStatic() && !(binding instanceof BinaryTypeBinding)) {
      assert(type instanceof JClassType);
      NestedTypeBinding nestedBinding=(NestedTypeBinding)binding;
      if (nestedBinding.enclosingInstances != null) {
        for (int i=0; i < nestedBinding.enclosingInstances.length; ++i) {
          SyntheticArgumentBinding arg=nestedBinding.enclosingInstances[i];
          if (arg.matchingField != null) {
            createField(arg,type,Disposition.THIS_REF);
          }
        }
      }
      if (nestedBinding.outerLocalVariables != null) {
        for (int i=0; i < nestedBinding.outerLocalVariables.length; ++i) {
          SyntheticArgumentBinding arg=nestedBinding.outerLocalVariables[i];
          boolean isReallyThisRef=false;
          if (arg.actualOuterLocalVariable instanceof SyntheticArgumentBinding) {
            SyntheticArgumentBinding outer=(SyntheticArgumentBinding)arg.actualOuterLocalVariable;
            if (outer.matchingField != null) {
              JField field=(JField)typeMap.get(outer.matchingField);
              if (field.isThisRef()) {
                isReallyThisRef=true;
              }
            }
          }
          createField(arg,type,isReallyThisRef ? Disposition.THIS_REF : Disposition.FINAL);
        }
      }
    }
    ReferenceBinding superClassBinding=binding.superclass();
    if (type instanceof JClassType && superClassBinding != null) {
      assert(binding.superclass().isClass() || binding.superclass().isEnum());
      JClassType superClass=(JClassType)getType(superClassBinding);
      ((JClassType)type).setSuperClass(superClass);
    }
    ReferenceBinding[] superInterfaces=binding.superInterfaces();
    for (    ReferenceBinding superInterfaceBinding : superInterfaces) {
      assert(superInterfaceBinding.isInterface());
      JInterfaceType superInterface=(JInterfaceType)getType(superInterfaceBinding);
      type.addImplements(superInterface);
    }
    ReferenceBinding enclosingBinding=binding.enclosingType();
    if (enclosingBinding != null) {
      type.setEnclosingType((JDeclaredType)getType(enclosingBinding));
    }
    if (type instanceof JEnumType) {
      processEnumType(binding,(JEnumType)type);
    }
    return true;
  }
 catch (  VirtualMachineError e) {
    throw e;
  }
catch (  InternalCompilerException ice) {
    ice.addNode(type);
    throw ice;
  }
catch (  Throwable e) {
    throw new InternalCompilerException(type,""String_Node_Str"",e);
  }
}","private boolean process(ReferenceBinding binding){
  JDeclaredType type=(JDeclaredType)getType(binding);
  try {
    if (type instanceof JClassType && type != program.getTypeJavaLangObject()) {
      JMethod getClassMethod=program.createMethod(type.getSourceInfo().makeChild(BuildDeclMapVisitor.class,""String_Node_Str""),""String_Node_Str"",type,program.getTypeJavaLangClass(),false,false,false,false,false);
      assert(type.getMethods().get(2) == getClassMethod);
      getClassMethod.freezeParamTypes();
      getClassMethod.setSynthetic();
    }
    if (binding.isNestedType() && !binding.isStatic() && !(binding instanceof BinaryTypeBinding)) {
      assert(type instanceof JClassType);
      NestedTypeBinding nestedBinding=(NestedTypeBinding)binding;
      if (nestedBinding.enclosingInstances != null) {
        for (int i=0; i < nestedBinding.enclosingInstances.length; ++i) {
          SyntheticArgumentBinding arg=nestedBinding.enclosingInstances[i];
          createField(arg,type,Disposition.THIS_REF);
        }
      }
      if (nestedBinding.outerLocalVariables != null) {
        for (int i=0; i < nestedBinding.outerLocalVariables.length; ++i) {
          SyntheticArgumentBinding arg=nestedBinding.outerLocalVariables[i];
          boolean isReallyThisRef=false;
          if (arg.actualOuterLocalVariable instanceof SyntheticArgumentBinding) {
            SyntheticArgumentBinding outer=(SyntheticArgumentBinding)arg.actualOuterLocalVariable;
            if (outer.matchingField != null) {
              JField field=(JField)typeMap.get(outer.matchingField);
              if (field.isThisRef()) {
                isReallyThisRef=true;
              }
            }
          }
          createField(arg,type,isReallyThisRef ? Disposition.THIS_REF : Disposition.FINAL);
        }
      }
    }
    ReferenceBinding superClassBinding=binding.superclass();
    if (type instanceof JClassType && superClassBinding != null) {
      assert(binding.superclass().isClass() || binding.superclass().isEnum());
      JClassType superClass=(JClassType)getType(superClassBinding);
      ((JClassType)type).setSuperClass(superClass);
    }
    ReferenceBinding[] superInterfaces=binding.superInterfaces();
    for (    ReferenceBinding superInterfaceBinding : superInterfaces) {
      assert(superInterfaceBinding.isInterface());
      JInterfaceType superInterface=(JInterfaceType)getType(superInterfaceBinding);
      type.addImplements(superInterface);
    }
    ReferenceBinding enclosingBinding=binding.enclosingType();
    if (enclosingBinding != null) {
      type.setEnclosingType((JDeclaredType)getType(enclosingBinding));
    }
    if (type instanceof JEnumType) {
      processEnumType(binding,(JEnumType)type);
    }
    return true;
  }
 catch (  VirtualMachineError e) {
    throw e;
  }
catch (  InternalCompilerException ice) {
    ice.addNode(type);
    throw ice;
  }
catch (  Throwable e) {
    throw new InternalCompilerException(type,""String_Node_Str"",e);
  }
}"
81901,"/** 
 * Sometimes a variable reference can be to a local or parameter in an an enclosing method. This is a tricky situation to detect. There's no obvious way to tell, but the clue we can get from JDT is that the local's containing method won't be the same as the method we're currently processing. Once we have this clue, we can use getEmulationPath to compute the current class's binding for that field.
 */
private JVariable possiblyReferenceOuterLocal(JVariable variable,Binding binding){
  if (variable instanceof JLocal || variable instanceof JParameter) {
    LocalVariableBinding localBinding=(LocalVariableBinding)binding;
    if (localBinding.declaringScope.methodScope() != currentMethodScope) {
      variable=null;
      VariableBinding[] vars=currentMethodScope.getEmulationPath(localBinding);
      if (vars == null) {
        return null;
      }
      assert(vars.length == 1);
      VariableBinding varBinding=vars[0];
      if (varBinding instanceof SyntheticArgumentBinding) {
        JType type=(JType)typeMap.get(varBinding.type);
        String name=String.valueOf(varBinding.name);
        for (int i=0; i < currentMethod.getParams().size(); ++i) {
          JParameter param=currentMethod.getParams().get(i);
          if (type == param.getType() && name.equals(param.getName())) {
            variable=param;
            break;
          }
        }
      }
      if (variable == null) {
        variable=(JField)typeMap.get(varBinding);
      }
    }
  }
  return variable;
}","/** 
 * Sometimes a variable reference can be to a local or parameter in an an enclosing method. This is a tricky situation to detect. There's no obvious way to tell, but the clue we can get from JDT is that the local's containing method won't be the same as the method we're currently processing. Once we have this clue, we can use getEmulationPath to compute the current class's binding for that field.
 */
private JVariable possiblyReferenceOuterLocal(JVariable variable,Binding binding){
}"
81902,"/** 
 * This is slightly different from the normal Java language. Specifically, we explicitly handle synthetic fields that are part of nested/local classes. It boils down to the fact that we really HAVE to assign synthetic arguments to synthetic fields BEFORE calling the superclass constructor (because it might call you back polymorphically). In straight Java that glue code is a semantic error, because a this/super call must be the first statement of your constructor. On the upside, optimizations work the same on our synthetic fields as with any user fields. The order of emulation is: - assign all synthetic fields from synthetic args - call our super constructor emulation method - call our instance initializer emulation method - run user code
 */
void processConstructor(ConstructorDeclaration x){
  JConstructor ctor=(JConstructor)typeMap.get(x.binding);
  try {
    processHasAnnotations(ctor,x.annotations);
    SourceInfo info=ctor.getSourceInfo();
    currentMethod=ctor;
    currentMethodBody=ctor.getBody();
    currentMethodScope=x.scope;
    boolean hasExplicitThis=(x.constructorCall != null) && !x.constructorCall.isSuperAccess();
    JClassType enclosingType=ctor.getEnclosingType();
    JBlock block=currentMethodBody.getBlock();
    currentOuterThisRefParams=Maps.create();
    if (!hasExplicitThis) {
      ReferenceBinding declaringClass=x.binding.declaringClass;
      if (declaringClass instanceof NestedTypeBinding) {
        Iterator<JParameter> paramIt=currentMethod.getParams().iterator();
        NestedTypeBinding nestedBinding=(NestedTypeBinding)declaringClass;
        if (nestedBinding.enclosingInstances != null) {
          for (          SyntheticArgumentBinding arg : nestedBinding.enclosingInstances) {
            JParameter param=paramIt.next();
            if (arg.matchingField != null) {
              JField field=(JField)typeMap.get(arg);
              block.addStmt(JProgram.createAssignmentStmt(info,createVariableRef(info,field),createVariableRef(info,param)));
              currentOuterThisRefParams=Maps.put(currentOuterThisRefParams,field,param);
            }
          }
        }
        paramIt=getSyntheticLocalsIterator();
        if (nestedBinding.outerLocalVariables != null) {
          for (          SyntheticArgumentBinding arg : nestedBinding.outerLocalVariables) {
            JParameter param=paramIt.next();
            JField field=(JField)typeMap.get(arg);
            block.addStmt(JProgram.createAssignmentStmt(info,createVariableRef(info,field),createVariableRef(info,param)));
          }
        }
      }
    }
    if (x.constructorCall != null) {
      JMethodCall superOrThisCall=(JMethodCall)dispatch(""String_Node_Str"",x.constructorCall);
      if (enclosingType.isEnumOrSubclass() != null) {
        JVariableRef enumNameRef=createVariableRef(superOrThisCall.getSourceInfo(),ctor.getParams().get(0));
        superOrThisCall.addArg(0,enumNameRef);
        JVariableRef enumOrdinalRef=createVariableRef(superOrThisCall.getSourceInfo(),ctor.getParams().get(1));
        superOrThisCall.addArg(1,enumOrdinalRef);
      }
      superOrThisCall.setStaticDispatchOnly();
      block.addStmt(superOrThisCall.makeStatement());
    }
    JExpression thisRef=createThisRef(info,enclosingType);
    if (!hasExplicitThis) {
      JMethod initMethod=enclosingType.getMethods().get(1);
      JMethodCall initCall=new JMethodCall(info,thisRef,initMethod);
      block.addStmt(initCall.makeStatement());
    }
    block.addStmts(processStatements(x.statements));
    currentOuterThisRefParams=null;
    currentMethodScope=null;
    currentMethod=null;
  }
 catch (  Throwable e) {
    throw translateException(ctor,e);
  }
}","/** 
 * This is slightly different from the normal Java language. Specifically, we explicitly handle synthetic fields that are part of nested/local classes. It boils down to the fact that we really HAVE to assign synthetic arguments to synthetic fields BEFORE calling the superclass constructor (because it might call you back polymorphically). In straight Java that glue code is a semantic error, because a this/super call must be the first statement of your constructor. On the upside, optimizations work the same on our synthetic fields as with any user fields. The order of emulation is: - assign all synthetic fields from synthetic args - call our super constructor emulation method - call our instance initializer emulation method - run user code
 */
void processConstructor(ConstructorDeclaration x){
  JConstructor ctor=(JConstructor)typeMap.get(x.binding);
  try {
    processHasAnnotations(ctor,x.annotations);
    SourceInfo info=ctor.getSourceInfo();
    currentMethod=ctor;
    currentMethodBody=ctor.getBody();
    currentMethodScope=x.scope;
    boolean hasExplicitThis=(x.constructorCall != null) && !x.constructorCall.isSuperAccess();
    JClassType enclosingType=ctor.getEnclosingType();
    JBlock block=currentMethodBody.getBlock();
    currentOuterThisRefParams=Maps.create();
    ReferenceBinding declaringClass=x.binding.declaringClass;
    if (declaringClass instanceof NestedTypeBinding) {
      Iterator<JParameter> paramIt=currentMethod.getParams().iterator();
      NestedTypeBinding nestedBinding=(NestedTypeBinding)declaringClass;
      if (nestedBinding.enclosingInstances != null) {
        for (        SyntheticArgumentBinding arg : nestedBinding.enclosingInstances) {
          JParameter param=paramIt.next();
          JField field=(JField)typeMap.get(arg);
          if (!hasExplicitThis) {
            block.addStmt(JProgram.createAssignmentStmt(info,createVariableRef(info,field),createVariableRef(info,param)));
          }
          currentOuterThisRefParams=Maps.put(currentOuterThisRefParams,field,param);
        }
      }
      if (!hasExplicitThis) {
        paramIt=getSyntheticLocalsIterator();
        if (nestedBinding.outerLocalVariables != null) {
          for (          SyntheticArgumentBinding arg : nestedBinding.outerLocalVariables) {
            JParameter param=paramIt.next();
            JField field=(JField)typeMap.get(arg);
            block.addStmt(JProgram.createAssignmentStmt(info,createVariableRef(info,field),createVariableRef(info,param)));
          }
        }
      }
    }
    if (x.constructorCall != null) {
      JMethodCall superOrThisCall=(JMethodCall)dispatch(""String_Node_Str"",x.constructorCall);
      if (enclosingType.isEnumOrSubclass() != null) {
        JVariableRef enumNameRef=createVariableRef(superOrThisCall.getSourceInfo(),ctor.getParams().get(0));
        superOrThisCall.addArg(0,enumNameRef);
        JVariableRef enumOrdinalRef=createVariableRef(superOrThisCall.getSourceInfo(),ctor.getParams().get(1));
        superOrThisCall.addArg(1,enumOrdinalRef);
      }
      superOrThisCall.setStaticDispatchOnly();
      block.addStmt(superOrThisCall.makeStatement());
    }
    JExpression thisRef=createThisRef(info,enclosingType);
    if (!hasExplicitThis) {
      JMethod initMethod=enclosingType.getMethods().get(1);
      JMethodCall initCall=new JMethodCall(info,thisRef,initMethod);
      block.addStmt(initCall.makeStatement());
    }
    block.addStmts(processStatements(x.statements));
    currentOuterThisRefParams=null;
    currentMethodScope=null;
    currentMethod=null;
  }
 catch (  Throwable e) {
    throw translateException(ctor,e);
  }
}"
81903,"private void fetch(final int start){
  lastFetch=start;
  requestFactory.schoolCalendarRequest().getPeople(start,numRows,filter).fire(new Receiver<List<PersonProxy>>(){
    @Override public void onSuccess(    List<PersonProxy> response){
      int responses=response.size();
      table.setRowData(start,response);
      pager.setPageStart(start);
      if (start == 0 || !table.isRowCountExact()) {
        table.setRowCount(start + responses,responses < numRows);
      }
    }
  }
);
}","private void fetch(final int start){
  lastFetch=start;
  requestFactory.schoolCalendarRequest().getPeople(start,numRows,filter).fire(new Receiver<List<PersonProxy>>(){
    @Override public void onSuccess(    List<PersonProxy> response){
      if (lastFetch != start) {
        return;
      }
      int responses=response.size();
      table.setRowData(start,response);
      pager.setPageStart(start);
      if (start == 0 || !table.isRowCountExact()) {
        table.setRowCount(start + responses,responses < numRows);
      }
    }
  }
);
}"
81904,"@Override public void onSuccess(List<PersonProxy> response){
  int responses=response.size();
  table.setRowData(start,response);
  pager.setPageStart(start);
  if (start == 0 || !table.isRowCountExact()) {
    table.setRowCount(start + responses,responses < numRows);
  }
}","@Override public void onSuccess(List<PersonProxy> response){
  if (lastFetch != start) {
    return;
  }
  int responses=response.size();
  table.setRowData(start,response);
  pager.setPageStart(start);
  if (start == 0 || !table.isRowCountExact()) {
    table.setRowCount(start + responses,responses < numRows);
  }
}"
81905,"/** 
 * Enable or disable the previous page buttons.
 * @param disabled true to disable, false to enable
 */
private void setPrevPageButtonsDisabled(boolean disabled){
  if (disabled == prevDisabled) {
    return;
  }
  prevDisabled=disabled;
  if (disabled) {
    firstPage.setResource(resources.simplePagerFirstPageDisabled());
    firstPage.getElement().getParentElement().addClassName(style.disabledButton());
    prevPage.setResource(resources.simplePagerPreviousPageDisabled());
    prevPage.getElement().getParentElement().addClassName(style.disabledButton());
  }
 else {
    firstPage.setResource(resources.simplePagerFirstPage());
    firstPage.getElement().getParentElement().removeClassName(style.disabledButton());
    prevPage.setResource(resources.simplePagerPreviousPage());
    prevPage.getElement().getParentElement().removeClassName(style.disabledButton());
  }
}","/** 
 * Enable or disable the previous page buttons.
 * @param disabled true to disable, false to enable
 */
private void setPrevPageButtonsDisabled(boolean disabled){
  firstPage.setDisabled(disabled);
  prevPage.setDisabled(disabled);
}"
81906,"/** 
 * Enable or disable the next page buttons.
 * @param disabled true to disable, false to enable
 */
private void setNextPageButtonsDisabled(boolean disabled){
  if (disabled == nextDisabled) {
    return;
  }
  nextDisabled=disabled;
  if (disabled) {
    nextPage.setResource(resources.simplePagerNextPageDisabled());
    nextPage.getElement().getParentElement().addClassName(style.disabledButton());
    if (lastPage != null) {
      lastPage.setResource(resources.simplePagerLastPageDisabled());
      lastPage.getElement().getParentElement().addClassName(style.disabledButton());
    }
  }
 else {
    nextPage.setResource(resources.simplePagerNextPage());
    nextPage.getElement().getParentElement().removeClassName(style.disabledButton());
    if (lastPage != null) {
      lastPage.setResource(resources.simplePagerLastPage());
      lastPage.getElement().getParentElement().removeClassName(style.disabledButton());
    }
  }
}","/** 
 * Enable or disable the next page buttons.
 * @param disabled true to disable, false to enable
 */
private void setNextPageButtonsDisabled(boolean disabled){
  nextPage.setDisabled(disabled);
  if (lastPage != null) {
    lastPage.setDisabled(disabled);
  }
}"
81907,"/** 
 * Construct a   {@link SimplePager} with the specified resources.
 * @param location the location of the text relative to the buttons
 * @param resources the {@link Resources} to use
 * @param showFastForwardButton if true, show a fast-forward button thatadvances by a larger increment than a single page
 * @param fastForwardRows the number of rows to jump when fast forwarding
 * @param showLastPageButton if true, show a button to go the the last page
 */
public SimplePager(TextLocation location,Resources resources,boolean showFastForwardButton,final int fastForwardRows,boolean showLastPageButton){
  this.resources=resources;
  this.fastForwardRows=fastForwardRows;
  this.style=resources.simplePagerStyle();
  this.style.ensureInjected();
  firstPage=new Image(resources.simplePagerFirstPage());
  firstPage.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      firstPage();
    }
  }
);
  nextPage=new Image(resources.simplePagerNextPage());
  nextPage.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      nextPage();
    }
  }
);
  prevPage=new Image(resources.simplePagerPreviousPage());
  prevPage.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      previousPage();
    }
  }
);
  if (showLastPageButton) {
    lastPage=new Image(resources.simplePagerLastPage());
    lastPage.addClickHandler(new ClickHandler(){
      public void onClick(      ClickEvent event){
        lastPage();
      }
    }
);
  }
 else {
    lastPage=null;
  }
  if (showFastForwardButton) {
    fastForward=new Image(resources.simplePagerFastForward());
    fastForward.addClickHandler(new ClickHandler(){
      public void onClick(      ClickEvent event){
        setPage(getPage() + getFastForwardPages());
      }
    }
);
  }
 else {
    fastForward=null;
  }
  HorizontalPanel layout=new HorizontalPanel();
  layout.setVerticalAlignment(HasVerticalAlignment.ALIGN_MIDDLE);
  initWidget(layout);
  if (location == TextLocation.RIGHT) {
    layout.add(label);
  }
  layout.add(firstPage);
  layout.add(prevPage);
  if (location == TextLocation.CENTER) {
    layout.add(label);
  }
  layout.add(nextPage);
  if (showFastForwardButton) {
    layout.add(fastForward);
  }
  if (showLastPageButton) {
    layout.add(lastPage);
  }
  if (location == TextLocation.LEFT) {
    layout.add(label);
  }
  firstPage.getElement().getParentElement().addClassName(style.button());
  prevPage.getElement().getParentElement().addClassName(style.button());
  label.getElement().getParentElement().addClassName(style.pageDetails());
  nextPage.getElement().getParentElement().addClassName(style.button());
  if (showFastForwardButton) {
    fastForward.getElement().getParentElement().addClassName(style.button());
  }
  if (showLastPageButton) {
    lastPage.getElement().getParentElement().addClassName(style.button());
  }
  setDisplay(null);
}","/** 
 * Construct a   {@link SimplePager} with the specified resources.
 * @param location the location of the text relative to the buttons
 * @param resources the {@link Resources} to use
 * @param showFastForwardButton if true, show a fast-forward button thatadvances by a larger increment than a single page
 * @param fastForwardRows the number of rows to jump when fast forwarding
 * @param showLastPageButton if true, show a button to go the the last page
 */
public SimplePager(TextLocation location,Resources resources,boolean showFastForwardButton,final int fastForwardRows,boolean showLastPageButton){
  this.resources=resources;
  this.fastForwardRows=fastForwardRows;
  this.style=resources.simplePagerStyle();
  this.style.ensureInjected();
  String disabledStyle=style.disabledButton();
  firstPage=new ImageButton(resources.simplePagerFirstPage(),resources.simplePagerFirstPageDisabled(),disabledStyle);
  firstPage.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      firstPage();
    }
  }
);
  nextPage=new ImageButton(resources.simplePagerNextPage(),resources.simplePagerNextPageDisabled(),disabledStyle);
  nextPage.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      nextPage();
    }
  }
);
  prevPage=new ImageButton(resources.simplePagerPreviousPage(),resources.simplePagerPreviousPageDisabled(),disabledStyle);
  prevPage.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      previousPage();
    }
  }
);
  if (showLastPageButton) {
    lastPage=new ImageButton(resources.simplePagerLastPage(),resources.simplePagerLastPageDisabled(),disabledStyle);
    lastPage.addClickHandler(new ClickHandler(){
      public void onClick(      ClickEvent event){
        lastPage();
      }
    }
);
  }
 else {
    lastPage=null;
  }
  if (showFastForwardButton) {
    fastForward=new ImageButton(resources.simplePagerFastForward(),resources.simplePagerFastForwardDisabled(),disabledStyle);
    fastForward.addClickHandler(new ClickHandler(){
      public void onClick(      ClickEvent event){
        setPage(getPage() + getFastForwardPages());
      }
    }
);
  }
 else {
    fastForward=null;
  }
  HorizontalPanel layout=new HorizontalPanel();
  layout.setVerticalAlignment(HasVerticalAlignment.ALIGN_MIDDLE);
  initWidget(layout);
  if (location == TextLocation.RIGHT) {
    layout.add(label);
  }
  layout.add(firstPage);
  layout.add(prevPage);
  if (location == TextLocation.CENTER) {
    layout.add(label);
  }
  layout.add(nextPage);
  if (showFastForwardButton) {
    layout.add(fastForward);
  }
  if (showLastPageButton) {
    layout.add(lastPage);
  }
  if (location == TextLocation.LEFT) {
    layout.add(label);
  }
  firstPage.getElement().getParentElement().addClassName(style.button());
  prevPage.getElement().getParentElement().addClassName(style.button());
  label.getElement().getParentElement().addClassName(style.pageDetails());
  nextPage.getElement().getParentElement().addClassName(style.button());
  if (showFastForwardButton) {
    fastForward.getElement().getParentElement().addClassName(style.button());
  }
  if (showLastPageButton) {
    lastPage.getElement().getParentElement().addClassName(style.button());
  }
  setDisplay(null);
}"
81908,"/** 
 * Check if the previous button is disabled. Visible for testing.
 */
boolean isPreviousButtonDisabled(){
  return prevDisabled;
}","/** 
 * Check if the previous button is disabled. Visible for testing.
 */
boolean isPreviousButtonDisabled(){
  return prevPage.isDisabled();
}"
81909,"/** 
 * Check if the next button is disabled. Visible for testing.
 */
boolean isNextButtonDisabled(){
  return nextDisabled;
}","/** 
 * Check if the next button is disabled. Visible for testing.
 */
boolean isNextButtonDisabled(){
  return nextPage.isDisabled();
}"
81910,"/** 
 * Reset the positions of the scrollable elements.
 * @return true if the size changed, false if not
 */
private boolean resetScrollables(){
  int offsetHeight=parent.getOffsetHeight();
  int offsetWidth=parent.getOffsetWidth();
  int height=offsetHeight + 100;
  int width=offsetWidth + 100;
  expandableInner.getStyle().setHeight(height,Unit.PX);
  expandableInner.getStyle().setWidth(width,Unit.PX);
  expandable.setScrollTop(height);
  expandable.setScrollLeft(width);
  collapsible.setScrollTop(collapsible.getScrollHeight() + 100);
  collapsible.setScrollLeft(collapsible.getScrollWidth() + 100);
  if (lastOffsetHeight != offsetHeight || lastOffsetWidth != offsetWidth) {
    lastOffsetHeight=offsetHeight;
    lastOffsetWidth=offsetWidth;
    return true;
  }
  return false;
}","/** 
 * Reset the positions of the scrollable elements.
 * @return true if the size changed, false if not
 */
private boolean resetScrollables(){
  if (resettingScrollables) {
    return false;
  }
  resettingScrollables=true;
  int offsetHeight=parent.getOffsetHeight();
  int offsetWidth=parent.getOffsetWidth();
  int height=offsetHeight + 100;
  int width=offsetWidth + 100;
  expandableInner.getStyle().setHeight(height,Unit.PX);
  expandableInner.getStyle().setWidth(width,Unit.PX);
  expandable.setScrollTop(height);
  expandable.setScrollLeft(width);
  collapsible.setScrollTop(collapsible.getScrollHeight() + 100);
  collapsible.setScrollLeft(collapsible.getScrollWidth() + 100);
  if (lastOffsetHeight != offsetHeight || lastOffsetWidth != offsetWidth) {
    lastOffsetHeight=offsetHeight;
    lastOffsetWidth=offsetWidth;
    resettingScrollables=false;
    return true;
  }
  resettingScrollables=false;
  return false;
}"
81911,"public void onBrowserEvent(Event event){
  if (Event.ONSCROLL == event.getTypeInt()) {
    EventTarget eventTarget=event.getEventTarget();
    if (!Element.is(eventTarget)) {
      return;
    }
    Element target=eventTarget.cast();
    if (target == collapsible || target == expandable) {
      handleResize();
    }
  }
}","public void onBrowserEvent(Event event){
  if (!resettingScrollables && Event.ONSCROLL == event.getTypeInt()) {
    EventTarget eventTarget=event.getEventTarget();
    if (!Element.is(eventTarget)) {
      return;
    }
    Element target=eventTarget.cast();
    if (target == collapsible || target == expandable) {
      handleResize();
    }
  }
}"
81912,"/** 
 * Run the given proxy through a ProxySerializer and verify that the before-and-after values match.
 */
protected <T extends BaseProxy>T checkSerialization(T proxy){
  AutoBean<T> originalBean=AutoBeanUtils.getAutoBean(proxy);
  SimpleProxyId<T> id=BaseProxyCategory.stableId(originalBean);
  DefaultProxyStore store=new DefaultProxyStore();
  ProxySerializer s=req.getSerializer(store);
  String key=s.serialize(proxy);
  assertNotNull(key);
  store=new DefaultProxyStore(store.encode());
  s=req.getSerializer(store);
  T restored=s.deserialize(id.getProxyClass(),key);
  AutoBean<BaseProxy> restoredBean=AutoBeanUtils.getAutoBean(restored);
  assertNotSame(proxy,restored);
  assertTrue(AutoBeanUtils.deepEquals(originalBean,restoredBean));
  if (proxy instanceof EntityProxy && !id.isEphemeral()) {
    assertEquals(((EntityProxy)proxy).stableId(),((EntityProxy)restored).stableId());
  }
  restoredBean.setTag(Constants.STABLE_ID,originalBean.getTag(Constants.STABLE_ID));
  return restored;
}","/** 
 * Run the given proxy through a ProxySerializer and verify that the before-and-after values match.
 */
protected <T extends BaseProxy>T checkSerialization(T proxy){
  AutoBean<T> originalBean=AutoBeanUtils.getAutoBean(proxy);
  SimpleProxyId<T> id=BaseProxyCategory.stableId(originalBean);
  DefaultProxyStore store=new DefaultProxyStore();
  ProxySerializer s=req.getSerializer(store);
  String key=s.serialize(proxy);
  assertNotNull(key);
  store=new DefaultProxyStore(store.encode());
  s=req.getSerializer(store);
  T restored=s.deserialize(id.getProxyClass(),key);
  AutoBean<? extends BaseProxy> restoredBean=AutoBeanUtils.getAutoBean(restored);
  assertNotSame(proxy,restored);
  assertTrue(AutoBeanUtils.deepEquals(originalBean,restoredBean));
  if (proxy instanceof EntityProxy && !id.isEphemeral()) {
    assertEquals(((EntityProxy)proxy).stableId(),((EntityProxy)restored).stableId());
  }
  restoredBean.setTag(Constants.STABLE_ID,originalBean.getTag(Constants.STABLE_ID));
  return restored;
}"
81913,"public int compareTo(Timestamp o){
  int delta=(int)(getTime() - o.getTime());
  return delta == 0 ? getNanos() - o.getNanos() : delta;
}","public int compareTo(Timestamp o){
  int sign=Long.signum(getTime() - o.getTime());
  return sign == 0 ? getNanos() - o.getNanos() : sign;
}"
81914,"public int compareTo(Date other){
  long thisTime=getTime();
  long otherTime=other.getTime();
  if (thisTime < otherTime) {
    return -1;
  }
 else   if (thisTime > otherTime) {
    return 1;
  }
 else {
    return 0;
  }
}","public int compareTo(Date other){
  return Long.signum(getTime() - other.getTime());
}"
81915,"private void writeEmptyMethod(String mangledMethodName,Method method){
}","private void writeEmptyMethod(String mangledMethodName,Method declMethod){
  MethodVisitor mv=super.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_ABSTRACT,mangledMethodName,declMethod.getDescriptor(),null,null);
  mv.visitEnd();
}"
81916,"@Override public void visitEnd(){
  if (inSingleJsoImplInterfaceType) {
    for (    Map.Entry<String,List<Method>> entry : toImplement(currentTypeName).entrySet()) {
      for (      Method method : entry.getValue()) {
        writeEmptyMethod(entry.getKey(),method);
      }
    }
  }
  super.visitEnd();
}","@Override public void visitEnd(){
  if (inSingleJsoImplInterfaceType) {
    for (    String mangledName : toImplement(currentTypeName)) {
      for (      Method method : jsoData.getDeclarations(mangledName)) {
        writeEmptyMethod(mangledName,method);
      }
    }
  }
  super.visitEnd();
}"
81917,"/** 
 * Given a resource name of a class, find all mangled method names that must be implemented.
 */
private SortedMap<String,List<Method>> toImplement(String typeName){
  String name=typeName.replace('/','_');
  String prefix=name + ""String_Node_Str"";
  String suffix=name + ""String_Node_Str"";
  SortedMap<String,List<Method>> toReturn=new TreeMap<String,List<Method>>();
  for (  String mangledName : jsoData.getMangledNames().subSet(prefix,suffix)) {
    toReturn.put(mangledName,jsoData.getImplementations(mangledName));
  }
  toReturn.keySet().removeAll(implementedMethods);
  return toReturn;
}","/** 
 * Given a resource name of a class, find all mangled method names that must be implemented.
 */
private SortedSet<String> toImplement(String typeName){
  String name=typeName.replace('/','_');
  String prefix=name + ""String_Node_Str"";
  String suffix=name + ""String_Node_Str"";
  SortedSet<String> toReturn=new TreeSet<String>();
  for (  String mangledName : jsoData.getMangledNames().subSet(prefix,suffix)) {
    if (!implementedMethods.contains(mangledName)) {
      toReturn.add(mangledName);
    }
  }
  return toReturn;
}"
81918,"/** 
 * For regular Java objects that implement a SingleJsoImpl interface, write instance trampoline dispatchers for mangled method names to the implementing method.
 */
private void writeTrampoline(String stubIntr){
  for (  Map.Entry<String,List<Method>> entry : toImplement(stubIntr).entrySet()) {
    for (    Method method : entry.getValue()) {
      String mangledName=entry.getKey();
      String descriptor=""String_Node_Str"" + method.getDescriptor().substring(1 + method.getArgumentTypes()[0].getDescriptor().length());
      String localName=method.getName().substring(0,method.getName().length() - 1);
      Method toCall=new Method(localName,descriptor);
      MethodVisitor mv=super.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_SYNTHETIC,mangledName,descriptor,null,null);
      if (mv != null) {
        mv.visitCode();
        int var=1;
        int size=1;
        mv.visitVarInsn(Opcodes.ALOAD,0);
        for (        Type t : toCall.getArgumentTypes()) {
          size+=t.getSize();
          mv.visitVarInsn(t.getOpcode(Opcodes.ILOAD),var);
          var+=t.getSize();
        }
        size=Math.max(size,toCall.getReturnType().getSize());
        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,currentTypeName,toCall.getName(),toCall.getDescriptor());
        mv.visitInsn(toCall.getReturnType().getOpcode(Opcodes.IRETURN));
        mv.visitMaxs(size,var);
        mv.visitEnd();
      }
    }
  }
}","/** 
 * For regular Java objects that implement a SingleJsoImpl interface, write instance trampoline dispatchers for mangled method names to the implementing method.
 */
private void writeTrampoline(String stubIntr){
  for (  String mangledName : toImplement(stubIntr)) {
    for (    Method method : jsoData.getDeclarations(mangledName)) {
      Method toCall=new Method(method.getName(),method.getDescriptor());
      MethodVisitor mv=super.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_SYNTHETIC,mangledName,method.getDescriptor(),null,null);
      if (mv != null) {
        mv.visitCode();
        int var=1;
        int size=1;
        mv.visitVarInsn(Opcodes.ALOAD,0);
        for (        Type t : toCall.getArgumentTypes()) {
          size+=t.getSize();
          mv.visitVarInsn(t.getOpcode(Opcodes.ILOAD),var);
          var+=t.getSize();
        }
        size=Math.max(size,toCall.getReturnType().getSize());
        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,currentTypeName,toCall.getName(),toCall.getDescriptor());
        mv.visitInsn(toCall.getReturnType().getOpcode(Opcodes.IRETURN));
        mv.visitMaxs(size,var);
        mv.visitEnd();
      }
    }
  }
}"
81919,"public static PlainJsoWithInterface create(){
  return JavaScriptObject.createArray().cast();
}","static Element create(){
  return (Element)JavaScriptObject.createObject();
}"
81920,"@Override protected Element getKeyboardSelectedElement(){
  int rowIndex=getKeyboardSelectedRow();
  if (childContainer.getChildCount() > rowIndex) {
    return childContainer.getChild(rowIndex).cast();
  }
  return null;
}","@Override protected Element getKeyboardSelectedElement(){
  int rowIndex=getKeyboardSelectedRow();
  if (rowIndex >= 0 && childContainer.getChildCount() > rowIndex) {
    return childContainer.getChild(rowIndex).cast();
  }
  return null;
}"
81921,"@Override protected Element getKeyboardSelectedElement(){
  int rowIndex=getKeyboardSelectedRow();
  NodeList<TableRowElement> rows=tbody.getRows();
  if (rowIndex < rows.getLength() && columns.size() > 0) {
    TableRowElement tr=rows.getItem(rowIndex);
    TableCellElement td=tr.getCells().getItem(keyboardSelectedColumn);
    return getCellParent(td);
  }
  return null;
}","@Override protected Element getKeyboardSelectedElement(){
  int rowIndex=getKeyboardSelectedRow();
  NodeList<TableRowElement> rows=tbody.getRows();
  if (rowIndex >= 0 && rowIndex < rows.getLength() && columns.size() > 0) {
    TableRowElement tr=rows.getItem(rowIndex);
    TableCellElement td=tr.getCells().getItem(keyboardSelectedColumn);
    return getCellParent(td);
  }
  return null;
}"
81922,"public Double parse(CharSequence object) throws ParseException {
  if (""String_Node_Str"".equals(object.toString())) {
    return null;
  }
  try {
    return Math.rint(NumberFormat.getDecimalFormat().parse(object.toString()));
  }
 catch (  NumberFormatException e) {
    throw new ParseException(e.getMessage(),0);
  }
}","public Double parse(CharSequence object) throws ParseException {
  if (""String_Node_Str"".equals(object.toString())) {
    return null;
  }
  try {
    return NumberFormat.getDecimalFormat().parse(object.toString());
  }
 catch (  NumberFormatException e) {
    throw new ParseException(e.getMessage(),0);
  }
}"
81923,"/** 
 * Returns the content of an   {@link HttpServletRequest} by decoding it using<code>expectedCharSet</code>, or <code>UTF-8</code> if <code>expectedCharSet</code> is <code>null</null>.
 * @param request the servlet request whose content we want to read
 * @param expectedContentType the expected content (i.e. 'type/subtype' only)in the Content-Type request header, or <code>null</code> if no validation is to be performed, and you are willing to allow for some types of cross type security attacks
 * @param expectedCharSet the expected request charset, or <code>null</code>if no charset validation is to be performed and <code>UTF-8</code> should be assumed
 * @return the content of an {@link HttpServletRequest} by decoding it using<code>expectedCharSet</code>, or <code>UTF-8</code> if <code>expectedCharSet</code> is <code>null</null>
 * @throws IOException if the request's input stream cannot be accessed, readfrom or closed
 * @throws ServletException if the request's content type does notequal the supplied <code>expectedContentType</code> or <code>expectedCharSet</code>
 */
public static String readContent(HttpServletRequest request,String expectedContentType,String expectedCharSet) throws IOException, ServletException {
  if (expectedContentType != null) {
    checkContentTypeIgnoreCase(request,expectedContentType);
  }
  if (expectedCharSet != null) {
    checkCharacterEncodingIgnoreCase(request,expectedCharSet);
  }
  InputStream in=request.getInputStream();
  byte[] buffer=new byte[BUFFER_SIZE];
  ByteArrayOutputStream out=new ByteArrayOutputStream(BUFFER_SIZE);
  try {
    while (true) {
      int byteCount=in.read(buffer);
      if (byteCount == -1) {
        break;
      }
      out.write(buffer,0,byteCount);
    }
    String contentCharSet=expectedCharSet != null ? expectedCharSet : CHARSET_UTF8;
    return out.toString(contentCharSet);
  }
  finally {
    if (in != null) {
      in.close();
    }
  }
}","/** 
 * Returns the content of an   {@link HttpServletRequest} by decoding it using<code>expectedCharSet</code>, or <code>UTF-8</code> if <code>expectedCharSet</code> is <code>null</null>.
 * @param request the servlet request whose content we want to read
 * @param expectedContentType the expected content (i.e. 'type/subtype' only)in the Content-Type request header, or <code>null</code> if no validation is to be performed, and you are willing to allow for some types of cross type security attacks
 * @param expectedCharSet the expected request charset, or <code>null</code>if no charset validation is to be performed and <code>UTF-8</code> should be assumed
 * @return the content of an {@link HttpServletRequest} by decoding it using<code>expectedCharSet</code>, or <code>UTF-8</code> if <code>expectedCharSet</code> is <code>null</code>
 * @throws IOException if the request's input stream cannot be accessed, readfrom or closed
 * @throws ServletException if the request's content type does notequal the supplied <code>expectedContentType</code> or <code>expectedCharSet</code>
 */
public static String readContent(HttpServletRequest request,String expectedContentType,String expectedCharSet) throws IOException, ServletException {
  if (expectedContentType != null) {
    checkContentTypeIgnoreCase(request,expectedContentType);
  }
  if (expectedCharSet != null) {
    checkCharacterEncodingIgnoreCase(request,expectedCharSet);
  }
  InputStream in=request.getInputStream();
  byte[] buffer=new byte[BUFFER_SIZE];
  ByteArrayOutputStream out=new ByteArrayOutputStream(BUFFER_SIZE);
  try {
    while (true) {
      int byteCount=in.read(buffer);
      if (byteCount == -1) {
        break;
      }
      out.write(buffer,0,byteCount);
    }
    String contentCharSet=expectedCharSet != null ? expectedCharSet : CHARSET_UTF8;
    return out.toString(contentCharSet);
  }
  finally {
    if (in != null) {
      in.close();
    }
  }
}"
81924,"private boolean classImplementsMethod(JClassType cls,JMethod meth){
  while (cls != null) {
    JMethod found=cls.findMethod(meth.getName(),methodParamTypes(meth));
    if ((found != null) && !found.isAbstract()) {
      return true;
    }
    cls=cls.getSuperclass();
  }
  return false;
}","private boolean classImplementsMethod(JClassType cls,JMethod meth){
  while (cls != null) {
    JMethod found=cls.findMethod(meth.getName(),meth.getParameterTypes());
    if ((found != null) && !found.isAbstract()) {
      return true;
    }
    cls=cls.getSuperclass();
  }
  return false;
}"
81925,"/** 
 * Updates the list of jsoSingleImpl types from recently-added types.
 */
private void computeSingleJsoImplData(JClassType... newTypes){
  JClassType jsoType=findType(JSO_CLASS);
  if (jsoType == null) {
    return;
  }
  for (  JClassType type : newTypes) {
    if (!jsoType.isAssignableFrom(type)) {
      continue;
    }
    for (    JClassType intf : JClassType.getFlattenedSuperTypeHierarchy(type)) {
      if (intf.isInterface() == null) {
        continue;
      }
      if (intf.getOverridableMethods().length == 0) {
        jsoSingleImpls.put(intf,jsoType);
        continue;
      }
      JClassType previousType=jsoSingleImpls.get(intf);
      if (previousType == null) {
        jsoSingleImpls.put(intf,type);
      }
 else       if (type.isAssignableFrom(previousType)) {
        jsoSingleImpls.put(intf,type);
      }
 else       if (type.isAssignableTo(previousType)) {
      }
 else {
        JClassType impl=findFullyImplementingBase(intf,type,previousType);
        if (impl != null) {
          jsoSingleImpls.put(intf,impl);
        }
 else {
          throw new InternalCompilerException(""String_Node_Str"" + previousType.getName() + ""String_Node_Str""+ intf.getName()+ ""String_Node_Str""+ type.getName()+ ""String_Node_Str""+ ""String_Node_Str"");
        }
      }
    }
  }
}","/** 
 * Updates the list of jsoSingleImpl types from recently-added types.
 */
private void computeSingleJsoImplData(JClassType... newTypes){
  JClassType jsoType=findType(JSO_CLASS);
  if (jsoType == null) {
    return;
  }
  for (  JClassType type : newTypes) {
    if (!jsoType.isAssignableFrom(type)) {
      continue;
    }
    for (    JClassType intf : JClassType.getFlattenedSuperTypeHierarchy(type)) {
      if (intf instanceof JParameterizedType) {
        intf=((JParameterizedType)intf).getBaseType();
      }
      if (intf.isInterface() == null) {
        continue;
      }
      if (intf.getOverridableMethods().length == 0) {
        jsoSingleImpls.put(intf,jsoType);
        continue;
      }
      JClassType previousType=jsoSingleImpls.get(intf);
      if (previousType == null) {
        jsoSingleImpls.put(intf,type);
      }
 else       if (type.isAssignableFrom(previousType)) {
        jsoSingleImpls.put(intf,type);
      }
 else       if (type.isAssignableTo(previousType)) {
      }
 else {
        JClassType impl=findFullyImplementingBase(intf,type,previousType);
        if (impl != null) {
          jsoSingleImpls.put(intf,impl);
        }
 else {
          throw new InternalCompilerException(""String_Node_Str"" + previousType.getName() + ""String_Node_Str""+ intf.getName()+ ""String_Node_Str""+ type.getName()+ ""String_Node_Str""+ ""String_Node_Str"");
        }
      }
    }
  }
}"
81926,"/** 
 * Commit the current value.
 * @param parent the parent element
 * @param viewData the {@link ViewData} object
 * @param valueUpdater the {@link ValueUpdater}
 */
private void commit(Element parent,ViewData viewData,ValueUpdater<String> valueUpdater){
  String value=updateViewData(parent,viewData,false);
  clearInput(getInputElement(parent));
  setValue(parent,value,viewData);
  valueUpdater.update(value);
}","/** 
 * Commit the current value.
 * @param parent the parent element
 * @param viewData the {@link ViewData} object
 * @param valueUpdater the {@link ValueUpdater}
 */
private void commit(Element parent,ViewData viewData,ValueUpdater<String> valueUpdater){
  String value=updateViewData(parent,viewData,false);
  clearInput(getInputElement(parent));
  setValue(parent,value,viewData);
  if (valueUpdater != null) {
    valueUpdater.update(value);
  }
}"
81927,"/** 
 * Navigate to a deeper node.
 */
private void keyboardNavigateDeep(){
  if (isKeyboardSelectionDisabled()) {
    return;
  }
  if (level < treeNodes.size() - 1) {
    TreeNodeImpl<?> treeNode=treeNodes.get(level + 1);
    treeNode.display.getPresenter().setKeyboardSelectedRow(treeNode.display.getKeyboardSelectedRow(),true);
  }
}","/** 
 * Navigate to a deeper node.
 */
private void keyboardNavigateDeep(){
  if (isKeyboardSelectionDisabled()) {
    return;
  }
  if (level < treeNodes.size() - 1) {
    TreeNodeImpl<?> treeNode=treeNodes.get(level + 1);
    treeNode.display.getPresenter().setKeyboardSelectedRow(treeNode.display.getKeyboardSelectedRow(),true,true);
  }
}"
81928,"public TreeNode setChildOpen(int index,boolean open,boolean fireEvents){
  assertNotDestroyed();
  checkChildBounds(index);
  if (open) {
    display.getPresenter().setKeyboardSelectedRow(index,false);
    return updateChildState(display,fireEvents);
  }
 else {
    if (index == display.getKeyboardSelectedRow()) {
      display.getPresenter().clearKeyboardSelectedRowValue();
      updateChildState(display,fireEvents);
    }
    return null;
  }
}","public TreeNode setChildOpen(int index,boolean open,boolean fireEvents){
  assertNotDestroyed();
  checkChildBounds(index);
  if (open) {
    display.getPresenter().setKeyboardSelectedRow(index,false,true);
    return updateChildState(display,fireEvents);
  }
 else {
    if (index == display.getKeyboardSelectedRow()) {
      display.getPresenter().clearKeyboardSelectedRowValue();
      updateChildState(display,fireEvents);
    }
    return null;
  }
}"
81929,"@Override protected void renderRowValues(SafeHtmlBuilder sb,List<T> values,int start,SelectionModel<? super T> selectionModel){
  String keyboardSelectedItem=""String_Node_Str"" + style.cellListKeyboardSelectedItem();
  String selectedItem=""String_Node_Str"" + style.cellListSelectedItem();
  String evenItem=style.cellListEvenItem();
  String oddItem=style.cellListOddItem();
  int keyboardSelectedRow=getKeyboardSelectedRow() + getPageStart();
  int length=values.size();
  int end=start + length;
  for (int i=start; i < end; i++) {
    T value=values.get(i - start);
    boolean isSelected=selectionModel == null ? false : selectionModel.isSelected(value);
    StringBuilder classesBuilder=new StringBuilder();
    classesBuilder.append(i % 2 == 0 ? evenItem : oddItem);
    if (isSelected) {
      classesBuilder.append(selectedItem);
    }
    SafeHtmlBuilder cellBuilder=new SafeHtmlBuilder();
    cell.render(value,null,cellBuilder);
    if (i == keyboardSelectedRow) {
      if (isFocused) {
        classesBuilder.append(keyboardSelectedItem);
      }
      char accessKey=getAccessKey();
      if (accessKey != 0) {
        sb.append(TEMPLATE.divFocusableWithKey(i,classesBuilder.toString(),getTabIndex(),accessKey,cellBuilder.toSafeHtml()));
      }
 else {
        sb.append(TEMPLATE.divFocusable(i,classesBuilder.toString(),getTabIndex(),cellBuilder.toSafeHtml()));
      }
    }
 else {
      sb.append(TEMPLATE.div(i,classesBuilder.toString(),cellBuilder.toSafeHtml()));
    }
  }
}","@Override protected void renderRowValues(SafeHtmlBuilder sb,List<T> values,int start,SelectionModel<? super T> selectionModel){
  String keyboardSelectedItem=""String_Node_Str"" + style.cellListKeyboardSelectedItem();
  String selectedItem=""String_Node_Str"" + style.cellListSelectedItem();
  String evenItem=style.cellListEvenItem();
  String oddItem=style.cellListOddItem();
  int keyboardSelectedRow=getKeyboardSelectedRow() + getPageStart();
  int length=values.size();
  int end=start + length;
  for (int i=start; i < end; i++) {
    T value=values.get(i - start);
    boolean isSelected=selectionModel == null ? false : selectionModel.isSelected(value);
    StringBuilder classesBuilder=new StringBuilder();
    classesBuilder.append(i % 2 == 0 ? evenItem : oddItem);
    if (isSelected) {
      classesBuilder.append(selectedItem);
    }
    SafeHtmlBuilder cellBuilder=new SafeHtmlBuilder();
    cell.render(value,getValueKey(value),cellBuilder);
    if (i == keyboardSelectedRow) {
      if (isFocused) {
        classesBuilder.append(keyboardSelectedItem);
      }
      char accessKey=getAccessKey();
      if (accessKey != 0) {
        sb.append(TEMPLATE.divFocusableWithKey(i,classesBuilder.toString(),getTabIndex(),accessKey,cellBuilder.toSafeHtml()));
      }
 else {
        sb.append(TEMPLATE.divFocusable(i,classesBuilder.toString(),getTabIndex(),cellBuilder.toSafeHtml()));
      }
    }
 else {
      sb.append(TEMPLATE.div(i,classesBuilder.toString(),cellBuilder.toSafeHtml()));
    }
  }
}"
81930,"@SuppressWarnings(""String_Node_Str"") @Override protected void onBrowserEvent2(Event event){
  EventTarget eventTarget=event.getEventTarget();
  if (!Element.is(eventTarget)) {
    return;
  }
  final Element target=event.getEventTarget().cast();
  String idxString=""String_Node_Str"";
  Element cellTarget=target;
  while ((cellTarget != null) && ((idxString=cellTarget.getAttribute(""String_Node_Str"")).length() == 0)) {
    cellTarget=cellTarget.getParentElement();
  }
  if (idxString.length() > 0) {
    String eventType=event.getType();
    boolean isClick=""String_Node_Str"".equals(eventType);
    int idx=Integer.parseInt(idxString);
    int indexOnPage=idx - getPageStart();
    if (!isRowWithinBounds(indexOnPage)) {
      return;
    }
    boolean isSelectionHandled=cell.handlesSelection() || KeyboardSelectionPolicy.BOUND_TO_SELECTION == getKeyboardSelectionPolicy();
    Element cellParent=getCellParent(cellTarget);
    T value=getVisibleItem(indexOnPage);
    CellPreviewEvent<T> previewEvent=CellPreviewEvent.fire(this,event,this,indexOnPage,value,cellIsEditing,isSelectionHandled);
    if (isClick && !cellIsEditing && !isSelectionHandled) {
      doSelection(event,value,indexOnPage);
    }
    if (isClick && getPresenter().getKeyboardSelectedRowInView() != indexOnPage) {
      boolean isFocusable=CellBasedWidgetImpl.get().isFocusable(target);
      isFocused=isFocused || isFocusable;
      getPresenter().setKeyboardSelectedRow(indexOnPage,!isFocusable);
    }
    if (!previewEvent.isCanceled()) {
      fireEventToCell(event,cellParent,value);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override protected void onBrowserEvent2(Event event){
  EventTarget eventTarget=event.getEventTarget();
  if (!Element.is(eventTarget)) {
    return;
  }
  final Element target=event.getEventTarget().cast();
  String idxString=""String_Node_Str"";
  Element cellTarget=target;
  while ((cellTarget != null) && ((idxString=cellTarget.getAttribute(""String_Node_Str"")).length() == 0)) {
    cellTarget=cellTarget.getParentElement();
  }
  if (idxString.length() > 0) {
    String eventType=event.getType();
    boolean isClick=""String_Node_Str"".equals(eventType);
    int idx=Integer.parseInt(idxString);
    int indexOnPage=idx - getPageStart();
    if (!isRowWithinBounds(indexOnPage)) {
      return;
    }
    boolean isSelectionHandled=cell.handlesSelection() || KeyboardSelectionPolicy.BOUND_TO_SELECTION == getKeyboardSelectionPolicy();
    Element cellParent=getCellParent(cellTarget);
    T value=getVisibleItem(indexOnPage);
    CellPreviewEvent<T> previewEvent=CellPreviewEvent.fire(this,event,this,indexOnPage,value,cellIsEditing,isSelectionHandled);
    if (isClick && !cellIsEditing && !isSelectionHandled) {
      doSelection(event,value,indexOnPage);
    }
    if (isClick) {
      boolean isFocusable=CellBasedWidgetImpl.get().isFocusable(target);
      isFocused=isFocused || isFocusable;
      getPresenter().setKeyboardSelectedRow(indexOnPage,!isFocusable,false);
    }
    if (!previewEvent.isCanceled()) {
      fireEventToCell(event,cellParent,value);
    }
  }
}"
81931,"@Override protected void setKeyboardSelected(int index,boolean selected,boolean stealFocus){
  if (!isRowWithinBounds(index)) {
    return;
  }
  Element elem=getRowElement(index);
  if (!selected || isFocused || stealFocus) {
    setStyleName(elem,style.cellListKeyboardSelectedItem(),selected);
  }
  setFocusable(elem,selected);
  if (selected && stealFocus) {
    elem.focus();
    onFocus();
  }
}","@Override protected void setKeyboardSelected(int index,boolean selected,boolean stealFocus){
  if (!isRowWithinBounds(index)) {
    return;
  }
  Element elem=getRowElement(index);
  if (!selected || isFocused || stealFocus) {
    setStyleName(elem,style.cellListKeyboardSelectedItem(),selected);
  }
  setFocusable(elem,selected);
  if (selected && stealFocus && !cellIsEditing) {
    elem.focus();
    onFocus();
  }
}"
81932,"@SuppressWarnings(""String_Node_Str"") @Override protected void onBrowserEvent2(Event event){
  EventTarget eventTarget=event.getEventTarget();
  if (!Element.is(eventTarget)) {
    return;
  }
  final Element target=event.getEventTarget().cast();
  String eventType=event.getType();
  if (""String_Node_Str"".equals(eventType) && !isKeyboardNavigationSuppressed() && KeyboardSelectionPolicy.DISABLED != getKeyboardSelectionPolicy()) {
    if (handleKey(event)) {
      return;
    }
  }
  TableCellElement tableCell=findNearestParentCell(target);
  if (tableCell == null) {
    return;
  }
  Element trElem=tableCell.getParentElement();
  if (trElem == null) {
    return;
  }
  TableRowElement tr=TableRowElement.as(trElem);
  Element sectionElem=tr.getParentElement();
  if (sectionElem == null) {
    return;
  }
  TableSectionElement section=TableSectionElement.as(sectionElem);
  int col=tableCell.getCellIndex();
  if (section == thead) {
    Header<?> header=headers.get(col);
    if (header != null && cellConsumesEventType(header.getCell(),eventType)) {
      header.onBrowserEvent(tableCell,event);
    }
  }
 else   if (section == tfoot) {
    Header<?> footer=footers.get(col);
    if (footer != null && cellConsumesEventType(footer.getCell(),eventType)) {
      footer.onBrowserEvent(tableCell,event);
    }
  }
 else   if (section == tbody) {
    boolean isClick=""String_Node_Str"".equals(eventType);
    int row=tr.getSectionRowIndex();
    if (""String_Node_Str"".equals(eventType)) {
      if (hoveringRow != null && tbody.isOrHasChild(hoveringRow)) {
        setRowStyleName(hoveringRow,style.cellTableHoveredRow(),style.cellTableHoveredRowCell(),false);
      }
      hoveringRow=tr;
      setRowStyleName(hoveringRow,style.cellTableHoveredRow(),style.cellTableHoveredRowCell(),true);
    }
 else     if (""String_Node_Str"".equals(eventType) && hoveringRow != null) {
      setRowStyleName(hoveringRow,style.cellTableHoveredRow(),style.cellTableHoveredRowCell(),false);
      hoveringRow=null;
    }
 else     if (isClick && ((getPresenter().getKeyboardSelectedRowInView() != row) || (keyboardSelectedColumn != col))) {
      boolean isFocusable=CellBasedWidgetImpl.get().isFocusable(target);
      isFocused=isFocused || isFocusable;
      keyboardSelectedColumn=col;
      getPresenter().setKeyboardSelectedRow(row,!isFocusable);
    }
    if (!isRowWithinBounds(row)) {
      return;
    }
    boolean isSelectionHandled=handlesSelection || KeyboardSelectionPolicy.BOUND_TO_SELECTION == getKeyboardSelectionPolicy();
    T value=getVisibleItem(row);
    CellPreviewEvent<T> previewEvent=CellPreviewEvent.fire(this,event,this,row,col,value,cellIsEditing,isSelectionHandled);
    if (isClick && !cellIsEditing && !isSelectionHandled) {
      doSelection(event,value,row,col);
    }
    if (!previewEvent.isCanceled()) {
      fireEventToCell(event,eventType,tableCell,value,row,columns.get(col));
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override protected void onBrowserEvent2(Event event){
  EventTarget eventTarget=event.getEventTarget();
  if (!Element.is(eventTarget)) {
    return;
  }
  final Element target=event.getEventTarget().cast();
  String eventType=event.getType();
  if (""String_Node_Str"".equals(eventType) && !isKeyboardNavigationSuppressed() && KeyboardSelectionPolicy.DISABLED != getKeyboardSelectionPolicy()) {
    if (handleKey(event)) {
      return;
    }
  }
  TableCellElement tableCell=findNearestParentCell(target);
  if (tableCell == null) {
    return;
  }
  Element trElem=tableCell.getParentElement();
  if (trElem == null) {
    return;
  }
  TableRowElement tr=TableRowElement.as(trElem);
  Element sectionElem=tr.getParentElement();
  if (sectionElem == null) {
    return;
  }
  TableSectionElement section=TableSectionElement.as(sectionElem);
  int col=tableCell.getCellIndex();
  if (section == thead) {
    Header<?> header=headers.get(col);
    if (header != null && cellConsumesEventType(header.getCell(),eventType)) {
      header.onBrowserEvent(tableCell,event);
    }
  }
 else   if (section == tfoot) {
    Header<?> footer=footers.get(col);
    if (footer != null && cellConsumesEventType(footer.getCell(),eventType)) {
      footer.onBrowserEvent(tableCell,event);
    }
  }
 else   if (section == tbody) {
    boolean isClick=""String_Node_Str"".equals(eventType);
    int row=tr.getSectionRowIndex();
    if (""String_Node_Str"".equals(eventType)) {
      if (hoveringRow != null && tbody.isOrHasChild(hoveringRow)) {
        setRowStyleName(hoveringRow,style.cellTableHoveredRow(),style.cellTableHoveredRowCell(),false);
      }
      hoveringRow=tr;
      setRowStyleName(hoveringRow,style.cellTableHoveredRow(),style.cellTableHoveredRowCell(),true);
    }
 else     if (""String_Node_Str"".equals(eventType) && hoveringRow != null) {
      setRowStyleName(hoveringRow,style.cellTableHoveredRow(),style.cellTableHoveredRowCell(),false);
      hoveringRow=null;
    }
 else     if (isClick && ((getPresenter().getKeyboardSelectedRowInView() != row) || (keyboardSelectedColumn != col))) {
      boolean isFocusable=CellBasedWidgetImpl.get().isFocusable(target);
      isFocused=isFocused || isFocusable;
      keyboardSelectedColumn=col;
      getPresenter().setKeyboardSelectedRow(row,!isFocusable,true);
    }
    if (!isRowWithinBounds(row)) {
      return;
    }
    boolean isSelectionHandled=handlesSelection || KeyboardSelectionPolicy.BOUND_TO_SELECTION == getKeyboardSelectionPolicy();
    T value=getVisibleItem(row);
    CellPreviewEvent<T> previewEvent=CellPreviewEvent.fire(this,event,this,row,col,value,cellIsEditing,isSelectionHandled);
    if (isClick && !cellIsEditing && !isSelectionHandled) {
      doSelection(event,value,row,col);
    }
    if (!previewEvent.isCanceled()) {
      fireEventToCell(event,eventType,tableCell,value,row,columns.get(col));
    }
  }
}"
81933,"private boolean handleKey(Event event){
  HasDataPresenter<T> presenter=getPresenter();
  int oldRow=getKeyboardSelectedRow();
  boolean isRtl=LocaleInfo.getCurrentLocale().isRTL();
  int keyCodeLineEnd=isRtl ? KeyCodes.KEY_LEFT : KeyCodes.KEY_RIGHT;
  int keyCodeLineStart=isRtl ? KeyCodes.KEY_RIGHT : KeyCodes.KEY_LEFT;
  int keyCode=event.getKeyCode();
  if (keyCode == keyCodeLineEnd) {
    int nextColumn=findInteractiveColumn(keyboardSelectedColumn,false);
    if (nextColumn <= keyboardSelectedColumn) {
      if (presenter.hasKeyboardNext()) {
        keyboardSelectedColumn=nextColumn;
        presenter.keyboardNext();
        event.preventDefault();
        return true;
      }
    }
 else {
      keyboardSelectedColumn=nextColumn;
      getPresenter().setKeyboardSelectedRow(oldRow,true);
      event.preventDefault();
      return true;
    }
  }
 else   if (keyCode == keyCodeLineStart) {
    int prevColumn=findInteractiveColumn(keyboardSelectedColumn,true);
    if (prevColumn >= keyboardSelectedColumn) {
      if (presenter.hasKeyboardPrev()) {
        keyboardSelectedColumn=prevColumn;
        presenter.keyboardPrev();
        event.preventDefault();
        return true;
      }
    }
 else {
      keyboardSelectedColumn=prevColumn;
      getPresenter().setKeyboardSelectedRow(oldRow,true);
      event.preventDefault();
      return true;
    }
  }
  return false;
}","private boolean handleKey(Event event){
  HasDataPresenter<T> presenter=getPresenter();
  int oldRow=getKeyboardSelectedRow();
  boolean isRtl=LocaleInfo.getCurrentLocale().isRTL();
  int keyCodeLineEnd=isRtl ? KeyCodes.KEY_LEFT : KeyCodes.KEY_RIGHT;
  int keyCodeLineStart=isRtl ? KeyCodes.KEY_RIGHT : KeyCodes.KEY_LEFT;
  int keyCode=event.getKeyCode();
  if (keyCode == keyCodeLineEnd) {
    int nextColumn=findInteractiveColumn(keyboardSelectedColumn,false);
    if (nextColumn <= keyboardSelectedColumn) {
      if (presenter.hasKeyboardNext()) {
        keyboardSelectedColumn=nextColumn;
        presenter.keyboardNext();
        event.preventDefault();
        return true;
      }
    }
 else {
      keyboardSelectedColumn=nextColumn;
      getPresenter().setKeyboardSelectedRow(oldRow,true,true);
      event.preventDefault();
      return true;
    }
  }
 else   if (keyCode == keyCodeLineStart) {
    int prevColumn=findInteractiveColumn(keyboardSelectedColumn,true);
    if (prevColumn >= keyboardSelectedColumn) {
      if (presenter.hasKeyboardPrev()) {
        keyboardSelectedColumn=prevColumn;
        presenter.keyboardPrev();
        event.preventDefault();
        return true;
      }
    }
 else {
      keyboardSelectedColumn=prevColumn;
      getPresenter().setKeyboardSelectedRow(oldRow,true,true);
      event.preventDefault();
      return true;
    }
  }
  return false;
}"
81934,"@Override protected void setKeyboardSelected(int index,boolean selected,boolean stealFocus){
  if (KeyboardSelectionPolicy.DISABLED == getKeyboardSelectionPolicy() || !isRowWithinBounds(index) || columns.size() == 0) {
    return;
  }
  TableRowElement tr=getRowElement(index);
  String cellStyle=style.cellTableKeyboardSelectedCell();
  boolean updatedSelection=!selected || isFocused || stealFocus;
  setRowStyleName(tr,style.cellTableKeyboardSelectedRow(),style.cellTableKeyboardSelectedRowCell(),selected);
  NodeList<TableCellElement> cells=tr.getCells();
  for (int i=0; i < cells.getLength(); i++) {
    TableCellElement td=cells.getItem(i);
    setStyleName(td,cellStyle,updatedSelection && selected && i == keyboardSelectedColumn);
    final com.google.gwt.user.client.Element cellParent=getCellParent(td).cast();
    setFocusable(cellParent,selected && i == keyboardSelectedColumn);
  }
  if (selected && stealFocus) {
    TableCellElement td=tr.getCells().getItem(keyboardSelectedColumn);
    final com.google.gwt.user.client.Element cellParent=getCellParent(td).cast();
    CellBasedWidgetImpl.get().resetFocus(new Scheduler.ScheduledCommand(){
      public void execute(){
        cellParent.focus();
      }
    }
);
  }
}","@Override protected void setKeyboardSelected(int index,boolean selected,boolean stealFocus){
  if (KeyboardSelectionPolicy.DISABLED == getKeyboardSelectionPolicy() || !isRowWithinBounds(index) || columns.size() == 0) {
    return;
  }
  TableRowElement tr=getRowElement(index);
  String cellStyle=style.cellTableKeyboardSelectedCell();
  boolean updatedSelection=!selected || isFocused || stealFocus;
  setRowStyleName(tr,style.cellTableKeyboardSelectedRow(),style.cellTableKeyboardSelectedRowCell(),selected);
  NodeList<TableCellElement> cells=tr.getCells();
  for (int i=0; i < cells.getLength(); i++) {
    TableCellElement td=cells.getItem(i);
    setStyleName(td,cellStyle,updatedSelection && selected && i == keyboardSelectedColumn);
    final com.google.gwt.user.client.Element cellParent=getCellParent(td).cast();
    setFocusable(cellParent,selected && i == keyboardSelectedColumn);
  }
  if (selected && stealFocus && !cellIsEditing) {
    TableCellElement td=tr.getCells().getItem(keyboardSelectedColumn);
    final com.google.gwt.user.client.Element cellParent=getCellParent(td).cast();
    CellBasedWidgetImpl.get().resetFocus(new Scheduler.ScheduledCommand(){
      public void execute(){
        cellParent.focus();
      }
    }
);
  }
}"
81935,"/** 
 * Select or deselect this node with the keyboard.
 * @param selected true if selected, false if not
 * @param stealFocus true to steal focus
 */
void setKeyboardSelected(boolean selected,boolean stealFocus){
  if (tree.isKeyboardSelectionDisabled()) {
    return;
  }
  if (!selected || tree.isFocused || stealFocus) {
    setKeyboardSelectedStyle(selected);
  }
  Element cellParent=getCellParent();
  if (!selected) {
    cellParent.setTabIndex(-1);
    cellParent.removeAttribute(""String_Node_Str"");
    cellParent.removeAttribute(""String_Node_Str"");
  }
 else {
    FocusImpl focusImpl=FocusImpl.getFocusImplForWidget();
    com.google.gwt.user.client.Element cellElem=cellParent.cast();
    focusImpl.setTabIndex(cellElem,tree.getTabIndex());
    char accessKey=tree.getAccessKey();
    if (accessKey != 0) {
      focusImpl.setAccessKey(cellElem,accessKey);
    }
    if (stealFocus) {
      cellElem.focus();
    }
  }
  if (KeyboardSelectionPolicy.BOUND_TO_SELECTION == tree.getKeyboardSelectionPolicy()) {
    setSelected(selected);
  }
}","/** 
 * Select or deselect this node with the keyboard.
 * @param selected true if selected, false if not
 * @param stealFocus true to steal focus
 */
void setKeyboardSelected(boolean selected,boolean stealFocus){
  if (tree.isKeyboardSelectionDisabled()) {
    return;
  }
  if (!selected || tree.isFocused || stealFocus) {
    setKeyboardSelectedStyle(selected);
  }
  Element cellParent=getCellParent();
  if (!selected) {
    cellParent.setTabIndex(-1);
    cellParent.removeAttribute(""String_Node_Str"");
    cellParent.removeAttribute(""String_Node_Str"");
  }
 else {
    FocusImpl focusImpl=FocusImpl.getFocusImplForWidget();
    com.google.gwt.user.client.Element cellElem=cellParent.cast();
    focusImpl.setTabIndex(cellElem,tree.getTabIndex());
    char accessKey=tree.getAccessKey();
    if (accessKey != 0) {
      focusImpl.setAccessKey(cellElem,accessKey);
    }
    if (stealFocus && !tree.cellIsEditing) {
      cellElem.focus();
    }
  }
  if (KeyboardSelectionPolicy.BOUND_TO_SELECTION == tree.getKeyboardSelectionPolicy()) {
    setSelected(selected);
  }
}"
81936,"/** 
 * Move keyboard selection to the absolute 0th row.
 */
public void keyboardHome(){
  if (!keyboardPagingPolicy.isLimitedToRange()) {
    setKeyboardSelectedRow(-getPageStart(),true);
  }
}","/** 
 * Move keyboard selection to the absolute 0th row.
 */
public void keyboardHome(){
  if (!keyboardPagingPolicy.isLimitedToRange()) {
    setKeyboardSelectedRow(-getPageStart(),true,false);
  }
}"
81937,"/** 
 * Move keyboard selection to the next row.
 */
public void keyboardNext(){
  if (hasKeyboardNext()) {
    setKeyboardSelectedRow(getKeyboardSelectedRow() + 1,true);
  }
}","/** 
 * Move keyboard selection to the next row.
 */
public void keyboardNext(){
  if (hasKeyboardNext()) {
    setKeyboardSelectedRow(getKeyboardSelectedRow() + 1,true,false);
  }
}"
81938,"/** 
 * Move keyboard selection to the last row.
 */
public void keyboardEnd(){
  if (!keyboardPagingPolicy.isLimitedToRange()) {
    setKeyboardSelectedRow(getRowCount() - 1,true);
  }
}","/** 
 * Move keyboard selection to the last row.
 */
public void keyboardEnd(){
  if (!keyboardPagingPolicy.isLimitedToRange()) {
    setKeyboardSelectedRow(getRowCount() - 1,true,false);
  }
}"
81939,"/** 
 * Set the row index of the keyboard selected element.
 * @param index the row index
 * @param stealFocus true to steal focus
 */
public void setKeyboardSelectedRow(int index,boolean stealFocus){
  if (KeyboardSelectionPolicy.DISABLED == keyboardSelectionPolicy) {
    return;
  }
  int pageStart=getPageStart();
  int pageSize=getPageSize();
  int rowCount=getRowCount();
  int absIndex=pageStart + index;
  if (absIndex >= rowCount && isRowCountExact()) {
    absIndex=rowCount - 1;
  }
  index=Math.max(0,absIndex) - pageStart;
  if (keyboardPagingPolicy.isLimitedToRange()) {
    index=Math.max(0,Math.min(index,pageSize - 1));
  }
  int newPageStart=pageStart;
  int newPageSize=pageSize;
  PendingState<T> pending=ensurePendingState();
  pending.keyboardSelectedRow=0;
  pending.keyboardSelectedRowValue=null;
  pending.keyboardSelectedRowChanged=true;
  if (index >= 0 && index < pageSize) {
    pending.keyboardSelectedRow=index;
    pending.keyboardSelectedRowValue=index < pending.getRowDataSize() ? ensurePendingState().getRowDataValue(index) : null;
    pending.keyboardStealFocus=stealFocus;
    return;
  }
 else   if (KeyboardPagingPolicy.CHANGE_PAGE == keyboardPagingPolicy) {
    while (index < 0) {
      newPageStart-=pageSize;
      index+=pageSize;
    }
    while (index >= pageSize) {
      newPageStart+=pageSize;
      index-=pageSize;
    }
  }
 else   if (KeyboardPagingPolicy.INCREASE_RANGE == keyboardPagingPolicy) {
    while (index < 0) {
      newPageSize+=PAGE_INCREMENT;
      newPageStart-=PAGE_INCREMENT;
      index+=PAGE_INCREMENT;
    }
    if (newPageStart < 0) {
      index+=newPageStart;
      newPageSize+=newPageStart;
      newPageStart=0;
    }
    while (index >= newPageSize) {
      newPageSize+=PAGE_INCREMENT;
    }
    if (isRowCountExact()) {
      newPageSize=Math.min(newPageSize,rowCount - newPageStart);
      if (index >= rowCount) {
        index=rowCount - 1;
      }
    }
  }
  if (newPageStart != pageStart || newPageSize != pageSize) {
    pending.keyboardSelectedRow=index;
    setVisibleRange(new Range(newPageStart,newPageSize),false,false);
  }
}","/** 
 * Set the row index of the keyboard selected element.
 * @param index the row index
 * @param stealFocus true to steal focus
 * @param forceUpdate force the update even if the row didn't change
 */
public void setKeyboardSelectedRow(int index,boolean stealFocus,boolean forceUpdate){
  if (KeyboardSelectionPolicy.DISABLED == keyboardSelectionPolicy) {
    return;
  }
  if (!forceUpdate && getKeyboardSelectedRow() == index && getKeyboardSelectedRowValue() != null) {
    return;
  }
  int pageStart=getPageStart();
  int pageSize=getPageSize();
  int rowCount=getRowCount();
  int absIndex=pageStart + index;
  if (absIndex >= rowCount && isRowCountExact()) {
    absIndex=rowCount - 1;
  }
  index=Math.max(0,absIndex) - pageStart;
  if (keyboardPagingPolicy.isLimitedToRange()) {
    index=Math.max(0,Math.min(index,pageSize - 1));
  }
  int newPageStart=pageStart;
  int newPageSize=pageSize;
  PendingState<T> pending=ensurePendingState();
  pending.keyboardSelectedRow=0;
  pending.keyboardSelectedRowValue=null;
  pending.keyboardSelectedRowChanged=true;
  if (index >= 0 && index < pageSize) {
    pending.keyboardSelectedRow=index;
    pending.keyboardSelectedRowValue=index < pending.getRowDataSize() ? ensurePendingState().getRowDataValue(index) : null;
    pending.keyboardStealFocus=stealFocus;
    return;
  }
 else   if (KeyboardPagingPolicy.CHANGE_PAGE == keyboardPagingPolicy) {
    while (index < 0) {
      newPageStart-=pageSize;
      index+=pageSize;
    }
    while (index >= pageSize) {
      newPageStart+=pageSize;
      index-=pageSize;
    }
  }
 else   if (KeyboardPagingPolicy.INCREASE_RANGE == keyboardPagingPolicy) {
    while (index < 0) {
      newPageSize+=PAGE_INCREMENT;
      newPageStart-=PAGE_INCREMENT;
      index+=PAGE_INCREMENT;
    }
    if (newPageStart < 0) {
      index+=newPageStart;
      newPageSize+=newPageStart;
      newPageStart=0;
    }
    while (index >= newPageSize) {
      newPageSize+=PAGE_INCREMENT;
    }
    if (isRowCountExact()) {
      newPageSize=Math.min(newPageSize,rowCount - newPageStart);
      if (index >= rowCount) {
        index=rowCount - 1;
      }
    }
  }
  if (newPageStart != pageStart || newPageSize != pageSize) {
    pending.keyboardSelectedRow=index;
    setVisibleRange(new Range(newPageStart,newPageSize),false,false);
  }
}"
81940,"/** 
 * Move keyboard selection to the previous row.
 */
public void keyboardPrev(){
  if (hasKeyboardPrev()) {
    setKeyboardSelectedRow(getKeyboardSelectedRow() - 1,true);
  }
}","/** 
 * Move keyboard selection to the previous row.
 */
public void keyboardPrev(){
  if (hasKeyboardPrev()) {
    setKeyboardSelectedRow(getKeyboardSelectedRow() - 1,true,false);
  }
}"
81941,"/** 
 * Move keyboard selection to the next page.
 */
public void keyboardNextPage(){
  if (KeyboardPagingPolicy.CHANGE_PAGE == keyboardPagingPolicy) {
    setKeyboardSelectedRow(getPageSize(),true);
  }
 else   if (KeyboardPagingPolicy.INCREASE_RANGE == keyboardPagingPolicy) {
    setKeyboardSelectedRow(getKeyboardSelectedRow() + PAGE_INCREMENT,true);
  }
}","/** 
 * Move keyboard selection to the next page.
 */
public void keyboardNextPage(){
  if (KeyboardPagingPolicy.CHANGE_PAGE == keyboardPagingPolicy) {
    setKeyboardSelectedRow(getPageSize(),true,false);
  }
 else   if (KeyboardPagingPolicy.INCREASE_RANGE == keyboardPagingPolicy) {
    setKeyboardSelectedRow(getKeyboardSelectedRow() + PAGE_INCREMENT,true,false);
  }
}"
81942,"/** 
 * Move keyboard selection to the previous page.
 */
public void keyboardPrevPage(){
  if (KeyboardPagingPolicy.CHANGE_PAGE == keyboardPagingPolicy) {
    setKeyboardSelectedRow(-getPageSize(),true);
  }
 else   if (KeyboardPagingPolicy.INCREASE_RANGE == keyboardPagingPolicy) {
    setKeyboardSelectedRow(getKeyboardSelectedRow() - PAGE_INCREMENT,true);
  }
}","/** 
 * Move keyboard selection to the previous page.
 */
public void keyboardPrevPage(){
  if (KeyboardPagingPolicy.CHANGE_PAGE == keyboardPagingPolicy) {
    setKeyboardSelectedRow(-getPageSize(),true,false);
  }
 else   if (KeyboardPagingPolicy.INCREASE_RANGE == keyboardPagingPolicy) {
    setKeyboardSelectedRow(getKeyboardSelectedRow() - PAGE_INCREMENT,true,false);
  }
}"
81943,"public Object getKey(T item){
  return keyProvider == null ? item : keyProvider.getKey(item);
}","public Object getKey(T item){
  return (keyProvider == null || item == null) ? item : keyProvider.getKey(item);
}"
81944,"public void setSelected(T object,boolean selected){
  newSelectedObject=object;
  newSelected=selected;
  newSelectedPending=true;
  scheduleSelectionChangeEvent();
}","public void setSelected(T object,boolean selected){
  if (!selected) {
    Object oldKey=newSelectedPending ? getKey(newSelectedObject) : curKey;
    Object newKey=getKey(object);
    if (!equalsOrBothNull(oldKey,newKey)) {
      return;
    }
  }
  newSelectedObject=object;
  newSelected=selected;
  newSelectedPending=true;
  scheduleSelectionChangeEvent();
}"
81945,"private void resolveChanges(){
  if (!newSelectedPending) {
    return;
  }
  Object key=(newSelectedObject == null) ? null : getKey(newSelectedObject);
  boolean sameKey=curKey == null ? key == null : curKey.equals(key);
  boolean changed=false;
  if (newSelected) {
    changed=!sameKey;
    curSelection=newSelectedObject;
    curKey=key;
  }
 else   if (sameKey) {
    changed=true;
    curSelection=null;
    curKey=null;
  }
  newSelectedObject=null;
  newSelectedPending=false;
  if (changed) {
    SelectionChangeEvent.fire(this);
  }
}","private void resolveChanges(){
  if (!newSelectedPending) {
    return;
  }
  Object key=getKey(newSelectedObject);
  boolean sameKey=equalsOrBothNull(curKey,key);
  boolean changed=false;
  if (newSelected) {
    changed=!sameKey;
    curSelection=newSelectedObject;
    curKey=key;
  }
 else   if (sameKey) {
    changed=true;
    curSelection=null;
    curKey=null;
  }
  newSelectedObject=null;
  newSelectedPending=false;
  if (changed) {
    SelectionChangeEvent.fire(this);
  }
}"
81946,"private void registerParsers(){
  addElementParser(""String_Node_Str"",""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
}","private void registerParsers(){
  addElementParser(""String_Node_Str"",""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
}"
81947,"private void registerParsers(){
  addElementParser(""String_Node_Str"",""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
}","private void registerParsers(){
  addElementParser(""String_Node_Str"",""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
  addWidgetParser(""String_Node_Str"");
}"
81948,"/** 
 * Logs a message.
 * @param logRecordJson a log record in JSON format.
 * @throws RemoteLoggingException if logging fails
 */
public static void logMessage(String logRecordJson) throws RemoteLoggingException {
  String strongName=RequestFactoryServlet.getThreadLocalRequest().getHeader(RpcRequestBuilder.STRONG_NAME_HEADER);
  RemoteLoggingServiceUtil.logOnServer(logRecordJson,strongName,deobfuscator,null);
}","/** 
 * Logs a message.
 * @param serializedLogRecordString a json serialized LogRecord, as provided by{@link com.google.gwt.logging.client.JsonLogRecordClientUtil.logRecordAsJsonObject(LogRecord)}
 * @throws RemoteLoggingException if logging fails
 */
public static void logMessage(String logRecordJson) throws RemoteLoggingException {
  HttpServletRequest threadLocalRequest=RequestFactoryServlet.getThreadLocalRequest();
  String strongName=null;
  if (threadLocalRequest != null) {
    threadLocalRequest.getHeader(RpcRequestBuilder.STRONG_NAME_HEADER);
  }
  RemoteLoggingServiceUtil.logOnServer(logRecordJson,strongName,deobfuscator,null);
}"
81949,"/** 
 * Given the binary name of a domain type, return the BaseProxy type that is assignable to   {@code clientType}. This method allows multiple proxy types to be assigned to a domain type for use in different contexts (e.g. API slices). If there are multiple client types mapped to  {@code domainTypeBinaryName} and assignable to {@code clientTypeBinaryName}, the first matching type will be returned.
 */
String getEntityProxyTypeName(String domainTypeBinaryName,String clientTypeBinaryName){
  Type key=Type.getObjectType(BinaryName.toInternalName(domainTypeBinaryName));
  List<Type> found=domainToClientType.get(key);
  if (found == null || found.isEmpty()) {
    return null;
  }
  if (found.size() == 1) {
    return found.get(0).getClassName();
  }
  Type assignableTo=Type.getObjectType(BinaryName.toInternalName(clientTypeBinaryName));
  for (  Type t : found) {
    if (isAssignable(parentLogger,assignableTo,t)) {
      return t.getClassName();
    }
  }
  return null;
}","/** 
 * Given the binary name of a domain type, return the BaseProxy type that is assignable to   {@code clientType}. This method allows multiple proxy types to be assigned to a domain type for use in different contexts (e.g. API slices). If there are multiple client types mapped to  {@code domainTypeBinaryName} and assignable to {@code clientTypeBinaryName}, the first matching type will be returned.
 */
String getEntityProxyTypeName(String domainTypeBinaryName,String clientTypeBinaryName){
  Type key=Type.getObjectType(BinaryName.toInternalName(domainTypeBinaryName));
  List<Type> found=domainToClientType.get(key);
  if (found == null || found.isEmpty()) {
    List<Type> types=getSupertypes(parentLogger,key);
    for (    Type type : types) {
      if (objectType.equals(type)) {
        break;
      }
      found=domainToClientType.get(type);
      if (found != null && !found.isEmpty()) {
        break;
      }
    }
  }
  if (found == null || found.isEmpty()) {
    return null;
  }
  Type typeToReturn=null;
  if (found.size() == 1) {
    typeToReturn=found.get(0);
  }
 else {
    Type assignableTo=Type.getObjectType(BinaryName.toInternalName(clientTypeBinaryName));
    for (    Type t : found) {
      if (isAssignable(parentLogger,assignableTo,t)) {
        typeToReturn=t;
        break;
      }
    }
  }
  return typeToReturn == null ? null : typeToReturn.getClassName();
}"
81950,"public List<Type> exec(Type type){
  RequestFactoryInterfaceValidator.this.visit(logger,type.getInternalName(),this);
  return supertypes;
}","public List<Type> exec(Type type){
  RequestFactoryInterfaceValidator.this.visit(logger,type.getInternalName(),this);
  return supers;
}"
81951,"/** 
 * Examines a generic RequestContext method declaration and determines the expected domain return type. This implementation is limited in that it will not attempt to resolve type bounds since that would essentially require implementing TypeOracle. In the case where the type bound cannot be resolved, this method will return Object's type.
 */
private Type getReturnType(ErrorContext logger,RFMethod method){
  logger=logger.setMethod(method);
  final String[] returnType={""String_Node_Str""};
  String signature=method.getSignature();
  final int expectedCount;
  if (method.getReturnType().equals(instanceRequestIntf)) {
    expectedCount=2;
  }
 else   if (method.getReturnType().equals(requestIntf)) {
    expectedCount=1;
  }
 else {
    logger.spam(""String_Node_Str"" + signature);
    return Type.getObjectType(returnType[0]);
  }
  new SignatureReader(signature).accept(new SignatureAdapter(){
    @Override public SignatureVisitor visitReturnType(){
      return new SignatureAdapter(){
        int count;
        @Override public SignatureVisitor visitTypeArgument(        char wildcard){
          if (++count == expectedCount) {
            return new SignatureAdapter(){
              @Override public void visitClassType(              String name){
                returnType[0]=name;
              }
            }
;
          }
          return super.visitTypeArgument(wildcard);
        }
      }
;
    }
  }
);
  logger.spam(""String_Node_Str"" + returnType[0]);
  return Type.getObjectType(returnType[0]);
}","/** 
 * Examines a generic RequestContext method declaration and determines the expected domain return type. This implementation is limited in that it will not attempt to resolve type bounds since that would essentially require implementing TypeOracle. In the case where the type bound cannot be resolved, this method will return Object's type.
 */
private Type getReturnType(ErrorContext logger,RFMethod method){
  logger=logger.setMethod(method);
  final String[] returnType={objectType.getInternalName()};
  String signature=method.getSignature();
  final int expectedCount;
  if (method.getReturnType().equals(instanceRequestIntf)) {
    expectedCount=2;
  }
 else   if (method.getReturnType().equals(requestIntf)) {
    expectedCount=1;
  }
 else {
    logger.spam(""String_Node_Str"" + signature);
    return Type.getObjectType(returnType[0]);
  }
  new SignatureReader(signature).accept(new SignatureAdapter(){
    @Override public SignatureVisitor visitReturnType(){
      return new SignatureAdapter(){
        int count;
        @Override public SignatureVisitor visitTypeArgument(        char wildcard){
          if (++count == expectedCount) {
            return new SignatureAdapter(){
              @Override public void visitClassType(              String name){
                returnType[0]=name;
              }
            }
;
          }
          return super.visitTypeArgument(wildcard);
        }
      }
;
    }
  }
);
  logger.spam(""String_Node_Str"" + returnType[0]);
  return Type.getObjectType(returnType[0]);
}"
81952,"/** 
 * Returns the current user information for a given redirect URL. If  {@link #setUserInformationImplClass(String)} has been called with a classname, that class is used to gather the information by calling a (String) constructor. If the impl class name is """", or if the class cannont be instantiated, dummy user info is returned.
 * @param redirectUrl the redirect URL as a String
 * @return a {@link UserInformation} instance
 */
public static UserInformation getCurrentUserInformation(String redirectUrl){
  UserInformation userInfo=null;
  if (!""String_Node_Str"".equals(userInformationImplClass)) {
    try {
      userInfo=(UserInformation)Class.forName(userInformationImplClass).getConstructor(String.class).newInstance(redirectUrl);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  if (userInfo == null) {
    userInfo=new UserInformationSimpleImpl(redirectUrl);
  }
  return userInfo;
}","/** 
 * Called by   {@link RequestFactoryServlet#doPost} at the start of each requestreceived. Establishes the current user information for this request, and notes a redirect url to be provided back to the client if the user's bona fides cannot be established. All succeeding calls to {@link #findUserInformation(Long)} made from the same thread will returnthe same UserInfo instance. <p> If  {@link #setUserInformationImplClass(String)} has been called with aclass name, that class is used to gather the information by calling a (String) constructor. If the impl class name is """", or if the class cannont be instantiated, dummy user info is returned.
 * @param redirectUrl the redirect URL as a String
 * @return a {@link UserInformation} instance
 */
public static UserInformation getCurrentUserInformation(String redirectUrl){
  currentUser.remove();
  if (!""String_Node_Str"".equals(userInformationImplClass)) {
    try {
      currentUser.set((UserInformation)Class.forName(userInformationImplClass).getConstructor(String.class).newInstance(redirectUrl));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  if (currentUser.get() == null) {
    currentUser.set(new UserInformationSimpleImpl(redirectUrl));
  }
  return currentUser.get();
}"
81953,"/** 
 * Log a message on the server.
 * @param serializedLogRecordString a String
 * @return a Void {@link Request}
 */
Request<Void> logMessage(String serializedLogRecordString);","/** 
 * Log a message on the server.
 * @param serializedLogRecordString a json serialized LogRecord, as provided by{@link com.google.gwt.logging.client.JsonLogRecordClientUtil.logRecordAsJsonObject(LogRecord)}
 * @return a Void {@link Request}
 */
Request<Void> logMessage(String serializedLogRecordString);"
81954,"public void render(SafeHtmlBuilder sb,List<C> values,int start,SelectionModel<? super C> selectionModel){
  CellTree.Style style=nodeView.tree.getStyle();
  String itemValueStyle=style.cellTreeItemValue();
  String selectedStyle=""String_Node_Str"" + style.cellTreeSelectedItem();
  String itemStyle=style.cellTreeItem();
  String itemImageValueStyle=""String_Node_Str"" + style.cellTreeItemImageValue();
  String openStyle=""String_Node_Str"" + style.cellTreeOpenItem();
  String topStyle=""String_Node_Str"" + style.cellTreeTopItem();
  String topImageValueStyle=""String_Node_Str"" + style.cellTreeTopItemImageValue();
  boolean isRootNode=nodeView.isRootNode();
  SafeHtml openImage=nodeView.tree.getOpenImageHtml(isRootNode);
  SafeHtml closedImage=nodeView.tree.getClosedImageHtml(isRootNode);
  int imageWidth=nodeView.tree.getImageWidth();
  String paddingDirection=LocaleInfo.getCurrentLocale().isRTL() ? ""String_Node_Str"" : ""String_Node_Str"";
  int paddingAmount=imageWidth * nodeView.depth;
  Set<Object> openNodes=new HashSet<Object>();
  int childCount=nodeView.getChildCount();
  int end=start + values.size();
  for (int i=start; i < end && i < childCount; i++) {
    CellTreeNodeView<?> child=nodeView.getChildNode(i);
    if (child.isOpen()) {
      openNodes.add(child.getValueKey());
    }
  }
  ProvidesKey<C> keyProvider=nodeInfo.getProvidesKey();
  TreeViewModel model=nodeView.tree.getTreeViewModel();
  for (  C value : values) {
    Object key=keyProvider.getKey(value);
    boolean isOpen=openNodes.contains(key);
    StringBuilder outerClasses=new StringBuilder(itemStyle);
    if (isOpen) {
      outerClasses.append(openStyle);
    }
    if (isRootNode) {
      outerClasses.append(topStyle);
    }
    if (selectionModel != null && selectionModel.isSelected(value)) {
      outerClasses.append(selectedStyle);
    }
    StringBuilder innerClasses=new StringBuilder(itemStyle);
    innerClasses.append(itemImageValueStyle);
    if (isRootNode) {
      innerClasses.append(topImageValueStyle);
    }
    SafeHtml image;
    if (isOpen) {
      image=openImage;
    }
 else     if (model.isLeaf(value)) {
      image=LEAF_IMAGE;
    }
 else {
      image=closedImage;
    }
    SafeHtmlBuilder cellBuilder=new SafeHtmlBuilder();
    cell.render(value,null,cellBuilder);
    SafeHtml innerDiv=template.innerDiv(paddingDirection,imageWidth,innerClasses.toString(),image,itemValueStyle,cellBuilder.toSafeHtml());
    sb.append(template.outerDiv(paddingDirection,paddingAmount,outerClasses.toString(),innerDiv));
  }
}","public void render(SafeHtmlBuilder sb,List<C> values,int start,SelectionModel<? super C> selectionModel){
  CellTree.Style style=nodeView.tree.getStyle();
  String itemValueStyle=style.cellTreeItemValue();
  String selectedStyle=""String_Node_Str"" + style.cellTreeSelectedItem();
  String itemStyle=style.cellTreeItem();
  String itemImageValueStyle=""String_Node_Str"" + style.cellTreeItemImageValue();
  String openStyle=""String_Node_Str"" + style.cellTreeOpenItem();
  String topStyle=""String_Node_Str"" + style.cellTreeTopItem();
  String topImageValueStyle=""String_Node_Str"" + style.cellTreeTopItemImageValue();
  boolean isRootNode=nodeView.isRootNode();
  SafeHtml openImage=nodeView.tree.getOpenImageHtml(isRootNode);
  SafeHtml closedImage=nodeView.tree.getClosedImageHtml(isRootNode);
  int imageWidth=nodeView.tree.getImageWidth();
  String paddingDirection=LocaleInfo.getCurrentLocale().isRTL() ? ""String_Node_Str"" : ""String_Node_Str"";
  int paddingAmount=imageWidth * nodeView.depth;
  Set<Object> openNodes=new HashSet<Object>();
  int childCount=nodeView.getChildCount();
  int end=start + values.size();
  for (int i=start; i < end && i < childCount; i++) {
    CellTreeNodeView<?> child=nodeView.getChildNode(i);
    if (child.isOpen()) {
      openNodes.add(child.getValueKey());
    }
  }
  ProvidesKey<C> keyProvider=nodeInfo.getProvidesKey();
  TreeViewModel model=nodeView.tree.getTreeViewModel();
  for (  C value : values) {
    Object key=keyProvider.getKey(value);
    boolean isOpen=openNodes.contains(key);
    StringBuilder outerClasses=new StringBuilder(itemStyle);
    if (isOpen) {
      outerClasses.append(openStyle);
    }
    if (isRootNode) {
      outerClasses.append(topStyle);
    }
    if (selectionModel != null && selectionModel.isSelected(value)) {
      outerClasses.append(selectedStyle);
    }
    StringBuilder innerClasses=new StringBuilder(itemStyle);
    innerClasses.append(itemImageValueStyle);
    if (isRootNode) {
      innerClasses.append(topImageValueStyle);
    }
    SafeHtml image;
    if (isOpen) {
      image=openImage;
    }
 else     if (model.isLeaf(value)) {
      image=LEAF_IMAGE;
    }
 else {
      image=closedImage;
    }
    SafeHtmlBuilder cellBuilder=new SafeHtmlBuilder();
    cell.render(value,key,cellBuilder);
    SafeHtml innerDiv=template.innerDiv(paddingDirection,imageWidth,innerClasses.toString(),image,itemValueStyle,cellBuilder.toSafeHtml());
    sb.append(template.outerDiv(paddingDirection,paddingAmount,outerClasses.toString(),innerDiv));
  }
}"
81955,"public <T>NodeInfo<?> getNodeInfo(T value){
  if (value == ROOT_VALUE) {
    return new DefaultNodeInfo<String>(rootDataProvider,cell);
  }
 else   if (value instanceof String) {
    String prefix=(String)value;
    if (prefix.length() > 3) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    return new DefaultNodeInfo<String>(createDataProvider(prefix),cell);
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}","public NodeInfo<?> getNodeInfo(Object value){
  ProvidesKey<String> keyProvider=new ProvidesKey<String>(){
    public Object getKey(    String item){
      return Integer.parseInt(item.substring(0,1));
    }
  }
;
  ListDataProvider<String> dataProvider=new ListDataProvider<String>(keyProvider);
  dataProvider.getList().add(""String_Node_Str"");
  dataProvider.getList().add(""String_Node_Str"");
  dataProvider.getList().add(""String_Node_Str"");
  return new DefaultNodeInfo<String>(dataProvider,cell);
}"
81956,"public boolean isLeaf(Object value){
  if (value == ROOT_VALUE) {
    return false;
  }
 else   if (value instanceof String) {
    String s=(String)value;
    if (s.length() > 4) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    return ((String)value).length() == 4;
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}","public boolean isLeaf(Object value){
  return value != null;
}"
81957,"public static StringBuffer injectResources(StringBuffer selectionScript,ArtifactSet artifacts){
  int startPos=selectionScript.indexOf(""String_Node_Str"");
  if (startPos != -1) {
    for (    StylesheetReference resource : artifacts.find(StylesheetReference.class)) {
      String text=generateStylesheetInjector(resource.getSrc());
      selectionScript.insert(startPos,text);
      startPos+=text.length();
    }
  }
  startPos=selectionScript.indexOf(""String_Node_Str"");
  if (startPos != -1) {
    for (    ScriptReference resource : artifacts.find(ScriptReference.class)) {
      String text=generateScriptInjector(resource.getSrc());
      selectionScript.insert(startPos,text);
      startPos+=text.length();
    }
  }
  return selectionScript;
}","/** 
 * Installs stylesheets and scripts
 */
public static StringBuffer injectResources(StringBuffer selectionScript,ArtifactSet artifacts){
  int startPos=selectionScript.indexOf(""String_Node_Str"");
  if (startPos != -1) {
    for (    StylesheetReference resource : artifacts.find(StylesheetReference.class)) {
      String text=generateStylesheetInjector(resource.getSrc());
      selectionScript.insert(startPos,text);
      startPos+=text.length();
    }
  }
  startPos=selectionScript.indexOf(""String_Node_Str"");
  if (startPos != -1) {
    for (    ScriptReference resource : artifacts.find(ScriptReference.class)) {
      String text=generateScriptInjector(resource.getSrc());
      selectionScript.insert(startPos,text);
      startPos+=text.length();
    }
  }
  return selectionScript;
}"
81958,"private PersonEditorWorkflow(DynaTableRequestFactory requestFactory,FavoritesManager manager,PersonProxy person){
  this.requestFactory=requestFactory;
  this.manager=manager;
  this.person=person;
  personEditor=new PersonEditor(requestFactory);
  Binder.BINDER.createAndBindUi(this);
  contents.addDomHandler(new KeyUpHandler(){
    public void onKeyUp(    KeyUpEvent event){
      if (event.getNativeKeyCode() == KeyCodes.KEY_ESCAPE) {
        onCancel(null);
      }
    }
  }
,KeyUpEvent.getType());
}","private PersonEditorWorkflow(DynaTableRequestFactory requestFactory,FavoritesManager manager,PersonProxy person){
  this.requestFactory=requestFactory;
  this.manager=manager;
  this.person=person;
  personEditor=new PersonEditor(requestFactory);
  Binder.BINDER.createAndBindUi(this);
  contents.addDomHandler(new KeyUpHandler(){
    public void onKeyUp(    KeyUpEvent event){
      if (event.getNativeKeyCode() == KeyCodes.KEY_ESCAPE) {
        onCancel(null);
      }
    }
  }
,KeyUpEvent.getType());
  this.favorite.setVisible(false);
}"
81959,"/** 
 * Construct and display the UI that will be used to edit the current PersonProxy, using the given RequestContext to accumulate the edits.
 */
private void edit(RequestContext requestContext){
  editorDriver=GWT.create(Driver.class);
  editorDriver.initialize(requestFactory,personEditor);
  if (requestContext == null) {
    fetchAndEdit();
    return;
  }
  editorDriver.edit(person,requestContext);
  personEditor.focus();
  favorite.setValue(manager.isFavorite(person),false);
  dialog.center();
}","/** 
 * Construct and display the UI that will be used to edit the current PersonProxy, using the given RequestContext to accumulate the edits.
 */
private void edit(RequestContext requestContext){
  editorDriver=GWT.create(Driver.class);
  editorDriver.initialize(requestFactory,personEditor);
  if (requestContext == null) {
    this.favorite.setVisible(true);
    fetchAndEdit();
    return;
  }
  editorDriver.edit(person,requestContext);
  personEditor.focus();
  favorite.setValue(manager.isFavorite(person),false);
  dialog.center();
}"
81960,"/** 
 * Generate the primary fragment. The default implementation is based on  {@link #getModulePrefix(TreeLogger,LinkerContext,String,int)} and{@link #getModuleSuffix(TreeLogger,LinkerContext)}.
 */
protected byte[] generatePrimaryFragment(TreeLogger logger,LinkerContext context,CompilationResult result,String[] js) throws UnableToCompleteException {
  TextOutput to=new DefaultTextOutput(context.isOutputCompact());
  to.print(generatePrimaryFragmentString(logger,context,result.getStrongName(),js[0],js.length));
  return Util.getBytes(to.toString());
}","/** 
 * Generate the primary fragment. The default implementation is based on  {@link #getModulePrefix(TreeLogger,LinkerContext,String,int)} and{@link #getModuleSuffix(TreeLogger,LinkerContext)}.
 */
protected byte[] generatePrimaryFragment(TreeLogger logger,LinkerContext context,CompilationResult result,String[] js,ArtifactSet artifacts) throws UnableToCompleteException {
  TextOutput to=new DefaultTextOutput(context.isOutputCompact());
  to.print(generatePrimaryFragmentString(logger,context,result.getStrongName(),js[0],js.length,artifacts));
  return Util.getBytes(to.toString());
}"
81961,"protected String generatePrimaryFragmentString(TreeLogger logger,LinkerContext context,String strongName,String js,int length) throws UnableToCompleteException {
  StringBuffer b=new StringBuffer();
  b.append(getModulePrefix(logger,context,strongName,length));
  b.append(js);
  b.append(getModuleSuffix(logger,context));
  return wrapPrimaryFragment(logger,context,b.toString());
}","protected String generatePrimaryFragmentString(TreeLogger logger,LinkerContext context,String strongName,String js,int length,ArtifactSet artifacts) throws UnableToCompleteException {
  StringBuffer b=new StringBuffer();
  b.append(getModulePrefix(logger,context,strongName,length));
  b.append(js);
  b.append(getModuleSuffix(logger,context));
  return wrapPrimaryFragment(logger,context,b.toString(),artifacts);
}"
81962,"@Override public ArtifactSet link(TreeLogger logger,LinkerContext context,ArtifactSet artifacts,boolean onePermutation) throws UnableToCompleteException {
  if (onePermutation) {
    ArtifactSet toReturn=new ArtifactSet(artifacts);
    for (    CompilationResult compilation : toReturn.find(CompilationResult.class)) {
      toReturn.addAll(doEmitCompilation(logger,context,compilation));
    }
    return toReturn;
  }
 else {
    permutationsUtil.setupPermutationsMap(artifacts);
    ArtifactSet toReturn=new ArtifactSet(artifacts);
    EmittedArtifact art=emitSelectionScript(logger,context,artifacts);
    if (art != null) {
      toReturn.add(art);
    }
    maybeOutputPropertyMap(logger,context,toReturn);
    maybeAddHostedModeFile(logger,context,toReturn);
    return toReturn;
  }
}","@Override public ArtifactSet link(TreeLogger logger,LinkerContext context,ArtifactSet artifacts,boolean onePermutation) throws UnableToCompleteException {
  if (onePermutation) {
    ArtifactSet toReturn=new ArtifactSet(artifacts);
    for (    CompilationResult compilation : toReturn.find(CompilationResult.class)) {
      toReturn.addAll(doEmitCompilation(logger,context,compilation,artifacts));
    }
    return toReturn;
  }
 else {
    permutationsUtil.setupPermutationsMap(artifacts);
    ArtifactSet toReturn=new ArtifactSet(artifacts);
    EmittedArtifact art=emitSelectionScript(logger,context,artifacts);
    if (art != null) {
      toReturn.add(art);
    }
    maybeOutputPropertyMap(logger,context,toReturn);
    maybeAddHostedModeFile(logger,context,toReturn);
    return toReturn;
  }
}"
81963,"protected String wrapPrimaryFragment(TreeLogger logger,LinkerContext context,String script){
  return script;
}","protected String wrapPrimaryFragment(TreeLogger logger,LinkerContext context,String script,ArtifactSet artifacts){
  return script;
}"
81964,"protected Collection<Artifact<?>> doEmitCompilation(TreeLogger logger,LinkerContext context,CompilationResult result) throws UnableToCompleteException {
  String[] js=result.getJavaScript();
  byte[][] bytes=new byte[js.length][];
  bytes[0]=generatePrimaryFragment(logger,context,result,js);
  for (int i=1; i < js.length; i++) {
    bytes[i]=Util.getBytes(generateDeferredFragment(logger,context,i,js[i]));
  }
  Collection<Artifact<?>> toReturn=new ArrayList<Artifact<?>>();
  toReturn.add(emitBytes(logger,bytes[0],result.getStrongName() + getCompilationExtension(logger,context)));
  for (int i=1; i < js.length; i++) {
    toReturn.add(emitBytes(logger,bytes[i],FRAGMENT_SUBDIR + File.separator + result.getStrongName()+ File.separator+ i+ FRAGMENT_EXTENSION));
  }
  toReturn.addAll(emitSelectionInformation(result.getStrongName(),result));
  return toReturn;
}","protected Collection<Artifact<?>> doEmitCompilation(TreeLogger logger,LinkerContext context,CompilationResult result,ArtifactSet artifacts) throws UnableToCompleteException {
  String[] js=result.getJavaScript();
  byte[][] bytes=new byte[js.length][];
  bytes[0]=generatePrimaryFragment(logger,context,result,js,artifacts);
  for (int i=1; i < js.length; i++) {
    bytes[i]=Util.getBytes(generateDeferredFragment(logger,context,i,js[i]));
  }
  Collection<Artifact<?>> toReturn=new ArrayList<Artifact<?>>();
  toReturn.add(emitBytes(logger,bytes[0],result.getStrongName() + getCompilationExtension(logger,context)));
  for (int i=1; i < js.length; i++) {
    toReturn.add(emitBytes(logger,bytes[i],FRAGMENT_SUBDIR + File.separator + result.getStrongName()+ File.separator+ i+ FRAGMENT_EXTENSION));
  }
  toReturn.addAll(emitSelectionInformation(result.getStrongName(),result));
  return toReturn;
}"
81965,"@Override protected String wrapPrimaryFragment(TreeLogger logger,LinkerContext context,String script){
  StringBuffer out=new StringBuffer();
  if (shouldIncludeBootstrapInPrimaryFragment(context)) {
    try {
      out.append(generateSelectionScript(logger,context,null));
    }
 catch (    UnableToCompleteException e) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"",e);
      e.printStackTrace();
    }
  }
  if (shouldInstallCode(context)) {
    out.append(context.getModuleFunctionName());
    out.append(""String_Node_Str"");
    out.append(JsToStringGenerationVisitor.javaScriptString(script.toString()));
    out.append(""String_Node_Str"");
  }
 else {
    out.append(script.toString());
  }
  return out.toString();
}","@Override protected String wrapPrimaryFragment(TreeLogger logger,LinkerContext context,String script,ArtifactSet artifacts){
  StringBuffer out=new StringBuffer();
  if (shouldIncludeBootstrapInPrimaryFragment(context)) {
    try {
      out.append(generateSelectionScript(logger,context,artifacts));
    }
 catch (    UnableToCompleteException e) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"",e);
      e.printStackTrace();
    }
  }
  if (shouldInstallCode(context)) {
    out.append(context.getModuleFunctionName());
    out.append(""String_Node_Str"");
    out.append(JsToStringGenerationVisitor.javaScriptString(script.toString()));
    out.append(""String_Node_Str"");
  }
 else {
    out.append(script.toString());
  }
  return out.toString();
}"
81966,"@Override protected void maybeAddHostedModeFile(TreeLogger logger,LinkerContext context,ArtifactSet artifacts) throws UnableToCompleteException {
  String filename=getHostedFilename();
  if (""String_Node_Str"".equals(filename)) {
    return;
  }
  long lastModified=System.currentTimeMillis();
  StringBuffer buffer=readFileToStringBuffer(""String_Node_Str"" + filename,logger);
  String script=generatePrimaryFragmentString(logger,context,""String_Node_Str"",buffer.toString(),1);
  EmittedArtifact devArtifact=emitString(logger,script,filename,lastModified);
  artifacts.add(devArtifact);
}","@Override protected void maybeAddHostedModeFile(TreeLogger logger,LinkerContext context,ArtifactSet artifacts) throws UnableToCompleteException {
  String filename=getHostedFilename();
  if (""String_Node_Str"".equals(filename)) {
    return;
  }
  long lastModified=System.currentTimeMillis();
  StringBuffer buffer=readFileToStringBuffer(""String_Node_Str"" + filename,logger);
  String script=generatePrimaryFragmentString(logger,context,""String_Node_Str"",buffer.toString(),1,artifacts);
  EmittedArtifact devArtifact=emitString(logger,script,filename,lastModified);
  artifacts.add(devArtifact);
}"
81967,"@Override protected byte[] generatePrimaryFragment(TreeLogger logger,LinkerContext context,CompilationResult result,String[] js) throws UnableToCompleteException {
  StringBuffer b=new StringBuffer();
  b.append(getModulePrefix(logger,context,result.getStrongName(),js.length));
  b.append(splitPrimaryJavaScript(result.getStatementRanges()[0],js[0],charsPerChunk(context,logger)));
  b.append(getModuleSuffix(logger,context));
  return Util.getBytes(b.toString());
}","@Override protected byte[] generatePrimaryFragment(TreeLogger logger,LinkerContext context,CompilationResult result,String[] js,ArtifactSet artifacts) throws UnableToCompleteException {
  StringBuffer b=new StringBuffer();
  b.append(getModulePrefix(logger,context,result.getStrongName(),js.length));
  b.append(splitPrimaryJavaScript(result.getStatementRanges()[0],js[0],charsPerChunk(context,logger)));
  b.append(getModuleSuffix(logger,context));
  return Util.getBytes(b.toString());
}"
81968,"@Override protected Collection<Artifact<?>> doEmitCompilation(TreeLogger logger,LinkerContext context,CompilationResult result) throws UnableToCompleteException {
  if (result.getJavaScript().length != 1) {
    logger.branch(TreeLogger.ERROR,""String_Node_Str"" + getDescription() + ""String_Node_Str"",null);
    throw new UnableToCompleteException();
  }
  return super.doEmitCompilation(logger,context,result);
}","@Override protected Collection<Artifact<?>> doEmitCompilation(TreeLogger logger,LinkerContext context,CompilationResult result,ArtifactSet artifacts) throws UnableToCompleteException {
  if (result.getJavaScript().length != 1) {
    logger.branch(TreeLogger.ERROR,""String_Node_Str"" + getDescription() + ""String_Node_Str"",null);
    throw new UnableToCompleteException();
  }
  return super.doEmitCompilation(logger,context,result,artifacts);
}"
81969,"/** 
 * Constructs a new DatePickerCell that uses the given date/time format and  {@link SafeHtmlRenderer}.
 */
public DatePickerCell(DateTimeFormat format,SafeHtmlRenderer<String> renderer){
  super(""String_Node_Str"",""String_Node_Str"");
  if (format == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (renderer == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.format=format;
  this.renderer=renderer;
  this.datePicker=new DatePicker();
  this.panel=new PopupPanel(true,true){
    @Override protected void onPreviewNativeEvent(    NativePreviewEvent event){
      if (Event.ONKEYUP == event.getTypeInt()) {
        if (event.getNativeEvent().getKeyCode() == ESCAPE) {
          panel.hide();
        }
      }
    }
  }
;
  panel.addCloseHandler(new CloseHandler<PopupPanel>(){
    public void onClose(    CloseEvent<PopupPanel> event){
      lastKey=null;
      lastValue=null;
      if (lastParent != null && !event.isAutoClosed()) {
        lastParent.focus();
      }
      lastParent=null;
    }
  }
);
  panel.add(datePicker);
  datePicker.addValueChangeHandler(new ValueChangeHandler<Date>(){
    public void onValueChange(    ValueChangeEvent<Date> event){
      panel.hide();
      Date date=event.getValue();
      setViewData(lastKey,date);
      setValue(lastParent,lastValue,lastKey);
      if (valueUpdater != null) {
        valueUpdater.update(date);
      }
    }
  }
);
}","/** 
 * Constructs a new DatePickerCell that uses the given date/time format and  {@link SafeHtmlRenderer}.
 */
public DatePickerCell(DateTimeFormat format,SafeHtmlRenderer<String> renderer){
  super(""String_Node_Str"",""String_Node_Str"");
  if (format == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (renderer == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.format=format;
  this.renderer=renderer;
  this.datePicker=new DatePicker();
  this.panel=new PopupPanel(true,true){
    @Override protected void onPreviewNativeEvent(    NativePreviewEvent event){
      if (Event.ONKEYUP == event.getTypeInt()) {
        if (event.getNativeEvent().getKeyCode() == ESCAPE) {
          panel.hide();
        }
      }
    }
  }
;
  panel.addCloseHandler(new CloseHandler<PopupPanel>(){
    public void onClose(    CloseEvent<PopupPanel> event){
      lastKey=null;
      lastValue=null;
      if (lastParent != null && !event.isAutoClosed()) {
        lastParent.focus();
      }
      lastParent=null;
    }
  }
);
  panel.add(datePicker);
  datePicker.addValueChangeHandler(new ValueChangeHandler<Date>(){
    public void onValueChange(    ValueChangeEvent<Date> event){
      Element cellParent=lastParent;
      Date oldValue=lastValue;
      Object key=lastKey;
      panel.hide();
      Date date=event.getValue();
      setViewData(key,date);
      setValue(cellParent,oldValue,key);
      if (valueUpdater != null) {
        valueUpdater.update(date);
      }
    }
  }
);
}"
81970,"public void onValueChange(ValueChangeEvent<Date> event){
  panel.hide();
  Date date=event.getValue();
  setViewData(lastKey,date);
  setValue(lastParent,lastValue,lastKey);
  if (valueUpdater != null) {
    valueUpdater.update(date);
  }
}","public void onValueChange(ValueChangeEvent<Date> event){
  Element cellParent=lastParent;
  Date oldValue=lastValue;
  Object key=lastKey;
  panel.hide();
  Date date=event.getValue();
  setViewData(key,date);
  setValue(cellParent,oldValue,key);
  if (valueUpdater != null) {
    valueUpdater.update(date);
  }
}"
81971,"/** 
 * Create the shim instance of the AutoBean's peer type that lets us hijack the method calls. Using a shim type, as opposed to making the AutoBean implement the peer type directly, means that there can't be any conflicts between methods in the peer type and methods declared in the AutoBean implementation.
 */
private void writeShim(SourceWriter sw,AutoBeanType type) throws UnableToCompleteException {
  sw.println(""String_Node_Str"",type.getPeerType().getQualifiedSourceName());
  sw.indent();
  for (  AutoBeanMethod method : type.getMethods()) {
    JMethod jmethod=method.getMethod();
    String methodName=jmethod.getName();
    JParameter[] parameters=jmethod.getParameters();
    if (isObjectMethodImplementedByShim(jmethod)) {
      continue;
    }
    StringBuilder arguments=new StringBuilder();
{
      for (      JParameter param : parameters) {
        arguments.append(""String_Node_Str"").append(param.getName());
      }
      if (arguments.length() > 0) {
        arguments=arguments.deleteCharAt(0);
      }
    }
    sw.println(""String_Node_Str"",getBaseMethodDeclaration(jmethod));
    sw.indent();
    sw.println(""String_Node_Str"",type.getSimpleSourceName());
switch (method.getAction()) {
case GET:
      sw.println(""String_Node_Str"",AutoBeanFactoryModel.ensureBaseType(jmethod.getReturnType()).getQualifiedSourceName(),methodName,type.getSimpleSourceName());
    writeReturnWrapper(sw,type,method);
  sw.println(""String_Node_Str"");
break;
case SET:
sw.println(""String_Node_Str"",type.getSimpleSourceName());
sw.println(""String_Node_Str"",type.getSimpleSourceName(),methodName,parameters[0].getName());
sw.println(""String_Node_Str"",type.getSimpleSourceName(),methodName,parameters[0].getName());
break;
case CALL:
if (JPrimitiveType.VOID.equals(jmethod.getReturnType())) {
sw.println(""String_Node_Str"",type.getSimpleSourceName(),methodName,arguments);
sw.println(""String_Node_Str"",type.getSimpleSourceName(),methodName,arguments.length() > 0 ? ""String_Node_Str"" : ""String_Node_Str"",arguments);
}
 else {
sw.println(""String_Node_Str"",AutoBeanFactoryModel.ensureBaseType(jmethod.getReturnType()).getQualifiedSourceName(),type.getSimpleSourceName(),methodName,arguments);
writeReturnWrapper(sw,type,method);
sw.println(""String_Node_Str"",type.getSimpleSourceName(),methodName,arguments.length() > 0 ? ""String_Node_Str"" : ""String_Node_Str"",arguments);
sw.println(""String_Node_Str"");
}
break;
default :
throw new RuntimeException();
}
sw.outdent();
sw.println(""String_Node_Str"");
}
sw.println(""String_Node_Str"");
sw.indentln(""String_Node_Str"");
sw.println(""String_Node_Str"");
sw.println(""String_Node_Str"");
sw.indentln(""String_Node_Str"");
sw.println(""String_Node_Str"");
sw.println(""String_Node_Str"");
sw.indentln(""String_Node_Str"");
sw.println(""String_Node_Str"");
sw.outdent();
sw.println(""String_Node_Str"");
}","/** 
 * Create the shim instance of the AutoBean's peer type that lets us hijack the method calls. Using a shim type, as opposed to making the AutoBean implement the peer type directly, means that there can't be any conflicts between methods in the peer type and methods declared in the AutoBean implementation.
 */
private void writeShim(SourceWriter sw,AutoBeanType type) throws UnableToCompleteException {
  sw.println(""String_Node_Str"",type.getPeerType().getQualifiedSourceName());
  sw.indent();
  for (  AutoBeanMethod method : type.getMethods()) {
    JMethod jmethod=method.getMethod();
    String methodName=jmethod.getName();
    JParameter[] parameters=jmethod.getParameters();
    if (isObjectMethodImplementedByShim(jmethod)) {
      continue;
    }
    StringBuilder arguments=new StringBuilder();
{
      for (      JParameter param : parameters) {
        arguments.append(""String_Node_Str"").append(param.getName());
      }
      if (arguments.length() > 0) {
        arguments=arguments.deleteCharAt(0);
      }
    }
    sw.println(""String_Node_Str"",getBaseMethodDeclaration(jmethod));
    sw.indent();
    sw.println(""String_Node_Str"",type.getSimpleSourceName());
switch (method.getAction()) {
case GET:
      sw.println(""String_Node_Str"",ModelUtils.getQualifiedBaseName(jmethod.getReturnType()),methodName,type.getSimpleSourceName());
    writeReturnWrapper(sw,type,method);
  sw.println(""String_Node_Str"");
break;
case SET:
sw.println(""String_Node_Str"",type.getSimpleSourceName());
sw.println(""String_Node_Str"",type.getSimpleSourceName(),methodName,parameters[0].getName());
sw.println(""String_Node_Str"",type.getSimpleSourceName(),methodName,parameters[0].getName());
break;
case CALL:
if (JPrimitiveType.VOID.equals(jmethod.getReturnType())) {
sw.println(""String_Node_Str"",type.getSimpleSourceName(),methodName,arguments);
sw.println(""String_Node_Str"",type.getSimpleSourceName(),methodName,arguments.length() > 0 ? ""String_Node_Str"" : ""String_Node_Str"",arguments);
}
 else {
sw.println(""String_Node_Str"",ModelUtils.ensureBaseType(jmethod.getReturnType()).getQualifiedSourceName(),type.getSimpleSourceName(),methodName,arguments);
writeReturnWrapper(sw,type,method);
sw.println(""String_Node_Str"",type.getSimpleSourceName(),methodName,arguments.length() > 0 ? ""String_Node_Str"" : ""String_Node_Str"",arguments);
sw.println(""String_Node_Str"");
}
break;
default :
throw new RuntimeException();
}
sw.outdent();
sw.println(""String_Node_Str"");
}
sw.println(""String_Node_Str"");
sw.indentln(""String_Node_Str"");
sw.println(""String_Node_Str"");
sw.println(""String_Node_Str"");
sw.indentln(""String_Node_Str"");
sw.println(""String_Node_Str"");
sw.println(""String_Node_Str"");
sw.indentln(""String_Node_Str"");
sw.println(""String_Node_Str"");
sw.outdent();
sw.println(""String_Node_Str"");
}"
81972,"/** 
 * For interfaces that consist of nothing more than getters and setters, create a map-based implementation that will allow the AutoBean's internal state to be easily consumed.
 */
private void writeCreateSimpleBean(SourceWriter sw,AutoBeanType type){
  sw.println(""String_Node_Str"",type.getPeerType().getQualifiedSourceName());
  sw.indent();
  sw.println(""String_Node_Str"",type.getPeerType().getQualifiedSourceName());
  sw.indent();
  for (  AutoBeanMethod method : type.getMethods()) {
    JMethod jmethod=method.getMethod();
    sw.println(""String_Node_Str"",getBaseMethodDeclaration(jmethod));
    sw.indent();
switch (method.getAction()) {
case GET:
{
        JPrimitiveType primitive=jmethod.getReturnType().isPrimitive();
        if (primitive != null) {
          sw.println(""String_Node_Str"",method.getPropertyName());
          sw.println(""String_Node_Str"");
          sw.indentln(""String_Node_Str"",primitive.getUninitializedFieldExpression());
          sw.println(""String_Node_Str"");
          sw.indentln(""String_Node_Str"",primitive.getQualifiedBoxedSourceName());
          sw.println(""String_Node_Str"");
        }
 else {
          sw.println(""String_Node_Str"",AutoBeanFactoryModel.ensureBaseType(jmethod.getReturnType()).getQualifiedSourceName(),method.getPropertyName());
        }
      }
    break;
case SET:
  sw.println(""String_Node_Str"",method.getPropertyName(),jmethod.getParameters()[0].getName());
break;
case CALL:
JMethod staticImpl=method.getStaticImpl();
if (!jmethod.getReturnType().equals(JPrimitiveType.VOID)) {
sw.print(""String_Node_Str"");
}
sw.print(""String_Node_Str"",staticImpl.getEnclosingType().getQualifiedSourceName(),staticImpl.getName(),type.getSimpleSourceName());
for (JParameter param : jmethod.getParameters()) {
sw.print(""String_Node_Str"",param.getName());
}
sw.println(""String_Node_Str"");
break;
default :
throw new RuntimeException();
}
sw.outdent();
sw.println(""String_Node_Str"");
}
sw.outdent();
sw.println(""String_Node_Str"");
sw.outdent();
sw.println(""String_Node_Str"");
}","/** 
 * For interfaces that consist of nothing more than getters and setters, create a map-based implementation that will allow the AutoBean's internal state to be easily consumed.
 */
private void writeCreateSimpleBean(SourceWriter sw,AutoBeanType type){
  sw.println(""String_Node_Str"",type.getPeerType().getQualifiedSourceName());
  sw.indent();
  sw.println(""String_Node_Str"",type.getPeerType().getQualifiedSourceName());
  sw.indent();
  for (  AutoBeanMethod method : type.getMethods()) {
    JMethod jmethod=method.getMethod();
    sw.println(""String_Node_Str"",getBaseMethodDeclaration(jmethod));
    sw.indent();
switch (method.getAction()) {
case GET:
{
        JPrimitiveType primitive=jmethod.getReturnType().isPrimitive();
        if (primitive != null) {
          sw.println(""String_Node_Str"",method.getPropertyName());
          sw.println(""String_Node_Str"");
          sw.indentln(""String_Node_Str"",primitive.getUninitializedFieldExpression());
          sw.println(""String_Node_Str"");
          sw.indentln(""String_Node_Str"",primitive.getQualifiedBoxedSourceName());
          sw.println(""String_Node_Str"");
        }
 else {
          sw.println(""String_Node_Str"",ModelUtils.getQualifiedBaseName(jmethod.getReturnType()),method.getPropertyName());
        }
      }
    break;
case SET:
  sw.println(""String_Node_Str"",method.getPropertyName(),jmethod.getParameters()[0].getName());
break;
case CALL:
JMethod staticImpl=method.getStaticImpl();
if (!jmethod.getReturnType().equals(JPrimitiveType.VOID)) {
sw.print(""String_Node_Str"");
}
sw.print(""String_Node_Str"",staticImpl.getEnclosingType().getQualifiedSourceName(),staticImpl.getName(),type.getSimpleSourceName());
for (JParameter param : jmethod.getParameters()) {
sw.print(""String_Node_Str"",param.getName());
}
sw.println(""String_Node_Str"");
break;
default :
throw new RuntimeException();
}
sw.outdent();
sw.println(""String_Node_Str"");
}
sw.outdent();
sw.println(""String_Node_Str"");
sw.outdent();
sw.println(""String_Node_Str"");
}"
81973,"private AutoBeanType getAutoBeanType(JClassType beanType){
  beanType=ensureBaseType(beanType);
  AutoBeanType toReturn=peers.get(beanType);
  if (toReturn == null) {
    AutoBeanType.Builder builder=new AutoBeanType.Builder();
    builder.setPeerType(beanType);
    builder.setMethods(computeMethods(beanType));
    builder.setInterceptor(findInterceptor(beanType));
    if (noWrapTypes != null) {
      for (      JClassType noWrap : noWrapTypes) {
        if (noWrap.isAssignableFrom(beanType)) {
          builder.setNoWrap(true);
          break;
        }
      }
    }
    toReturn=builder.build();
    peers.put(beanType,toReturn);
  }
  return toReturn;
}","private AutoBeanType getAutoBeanType(JClassType beanType){
  beanType=ModelUtils.ensureBaseType(beanType);
  AutoBeanType toReturn=peers.get(beanType);
  if (toReturn == null) {
    AutoBeanType.Builder builder=new AutoBeanType.Builder();
    builder.setPeerType(beanType);
    builder.setMethods(computeMethods(beanType));
    builder.setInterceptor(findInterceptor(beanType));
    if (noWrapTypes != null) {
      for (      JClassType noWrap : noWrapTypes) {
        if (noWrap.isAssignableFrom(beanType)) {
          builder.setNoWrap(true);
          break;
        }
      }
    }
    toReturn=builder.build();
    peers.put(beanType,toReturn);
  }
  return toReturn;
}"
81974,"private boolean methodAcceptsAutoBeanAsFirstParam(JClassType beanType,JMethod method){
  JParameter[] params=method.getParameters();
  if (params.length == 0) {
    return false;
  }
  JClassType paramAsClass=params[0].getType().isClassOrInterface();
  if (paramAsClass == null) {
    return false;
  }
  JParameterizedType expectedFirst=oracle.getParameterizedType(autoBeanInterface,new JClassType[]{ensureBaseType(beanType)});
  return expectedFirst.isAssignableTo(paramAsClass);
}","private boolean methodAcceptsAutoBeanAsFirstParam(JClassType beanType,JMethod method){
  JParameter[] params=method.getParameters();
  if (params.length == 0) {
    return false;
  }
  JClassType paramAsClass=params[0].getType().isClassOrInterface();
  if (paramAsClass == null) {
    return false;
  }
  JParameterizedType expectedFirst=oracle.getParameterizedType(autoBeanInterface,new JClassType[]{ModelUtils.ensureBaseType(beanType)});
  return expectedFirst.isAssignableTo(paramAsClass);
}"
81975,"public AutoBeanType getPeer(JClassType beanType){
  beanType=ensureBaseType(beanType);
  return peers.get(beanType);
}","public AutoBeanType getPeer(JClassType beanType){
  beanType=ModelUtils.ensureBaseType(beanType);
  return peers.get(beanType);
}"
81976,"private void writeContextImplementations(){
  for (  ContextMethod method : model.getMethods()) {
    PrintWriter pw=context.tryCreate(logger,method.getPackageName(),method.getSimpleSourceName());
    if (pw == null) {
      continue;
    }
    ClassSourceFileComposerFactory factory=new ClassSourceFileComposerFactory(method.getPackageName(),method.getSimpleSourceName());
    factory.setSuperclass(AbstractRequestContext.class.getCanonicalName());
    factory.addImplementedInterface(method.getImplementedInterfaceQualifiedSourceName());
    SourceWriter sw=factory.createSourceWriter(context,pw);
    sw.println(""String_Node_Str"",method.getSimpleSourceName(),AbstractRequestFactory.class.getCanonicalName());
    for (    RequestMethod request : method.getRequestMethods()) {
      JMethod jmethod=request.getDeclarationMethod();
      String operation=jmethod.getEnclosingType().getQualifiedBinaryName() + ""String_Node_Str"" + jmethod.getName();
      StringBuilder parameterArray=new StringBuilder();
      StringBuilder parameterDeclaration=new StringBuilder();
      if (request.isInstance()) {
        parameterArray.append(""String_Node_Str"");
      }
      for (      JParameter param : jmethod.getParameters()) {
        parameterArray.append(""String_Node_Str"").append(param.getName());
        parameterDeclaration.append(""String_Node_Str"").append(param.getType().getParameterizedQualifiedSourceName()).append(""String_Node_Str"").append(param.getName());
      }
      if (parameterArray.length() > 0) {
        parameterArray.deleteCharAt(0);
      }
      if (parameterDeclaration.length() > 0) {
        parameterDeclaration.deleteCharAt(0);
      }
      sw.println(""String_Node_Str"",jmethod.getReturnType().getParameterizedQualifiedSourceName(),jmethod.getName(),parameterDeclaration);
      sw.indent();
      sw.println(""String_Node_Str"",AbstractRequest.class.getCanonicalName(),request.getDataType().getParameterizedQualifiedSourceName(),jmethod.getReturnType().getParameterizedQualifiedSourceName());
      sw.indent();
      sw.println(""String_Node_Str"",method.getSimpleSourceName());
      sw.println(""String_Node_Str"");
      sw.println(""String_Node_Str"",RequestData.class.getCanonicalName());
      sw.indentln(""String_Node_Str"",RequestData.class.getCanonicalName(),operation,parameterArray);
      sw.println(""String_Node_Str"");
      sw.println(""String_Node_Str"");
      sw.indent();
      sw.println(""String_Node_Str"");
      if (request.isCollectionType()) {
        Class<?> collectionType=request.getCollectionType().equals(CollectionType.LIST) ? ArrayList.class : HashSet.class;
        sw.println(""String_Node_Str"",collectionType.getCanonicalName());
        String decodeMethod=request.isValueType() ? ""String_Node_Str"" : ""String_Node_Str"";
        sw.println(""String_Node_Str"",decodeMethod,request.getCollectionElementType().getQualifiedSourceName(),collectionType.getCanonicalName());
      }
 else       if (request.isValueType()) {
        sw.println(""String_Node_Str"",ValueCodex.class.getCanonicalName(),request.getDataType().getQualifiedSourceName());
      }
 else       if (request.isEntityType()) {
        sw.println(""String_Node_Str"",request.getEntityType().getQualifiedSourceName());
      }
 else {
        sw.println(""String_Node_Str"");
      }
      sw.println(""String_Node_Str"",request.getDataType().getParameterizedQualifiedSourceName());
      sw.outdent();
      sw.println(""String_Node_Str"");
      sw.outdent();
      sw.println(""String_Node_Str"");
      sw.println(""String_Node_Str"");
      if (!request.isInstance()) {
        sw.println(""String_Node_Str"");
      }
      sw.println(""String_Node_Str"");
      sw.outdent();
      sw.println(""String_Node_Str"");
    }
    sw.commit(logger);
  }
}","private void writeContextImplementations(){
  for (  ContextMethod method : model.getMethods()) {
    PrintWriter pw=context.tryCreate(logger,method.getPackageName(),method.getSimpleSourceName());
    if (pw == null) {
      continue;
    }
    ClassSourceFileComposerFactory factory=new ClassSourceFileComposerFactory(method.getPackageName(),method.getSimpleSourceName());
    factory.setSuperclass(AbstractRequestContext.class.getCanonicalName());
    factory.addImplementedInterface(method.getImplementedInterfaceQualifiedSourceName());
    SourceWriter sw=factory.createSourceWriter(context,pw);
    sw.println(""String_Node_Str"",method.getSimpleSourceName(),AbstractRequestFactory.class.getCanonicalName());
    for (    RequestMethod request : method.getRequestMethods()) {
      JMethod jmethod=request.getDeclarationMethod();
      String operation=jmethod.getEnclosingType().getQualifiedBinaryName() + ""String_Node_Str"" + jmethod.getName();
      StringBuilder parameterArray=new StringBuilder();
      StringBuilder parameterDeclaration=new StringBuilder();
      StringBuilder typeParameterDeclaration=new StringBuilder();
      if (request.isInstance()) {
        parameterArray.append(""String_Node_Str"");
      }
      for (      JTypeParameter param : jmethod.getTypeParameters()) {
        typeParameterDeclaration.append(""String_Node_Str"").append(param.getQualifiedSourceName());
      }
      for (      JParameter param : jmethod.getParameters()) {
        parameterArray.append(""String_Node_Str"").append(param.getName());
        parameterDeclaration.append(""String_Node_Str"").append(param.getType().getParameterizedQualifiedSourceName()).append(""String_Node_Str"").append(param.getName());
      }
      if (parameterArray.length() > 0) {
        parameterArray.deleteCharAt(0);
      }
      if (parameterDeclaration.length() > 0) {
        parameterDeclaration.deleteCharAt(0);
      }
      if (typeParameterDeclaration.length() > 0) {
        typeParameterDeclaration.deleteCharAt(0).insert(0,""String_Node_Str"").append(""String_Node_Str"");
      }
      sw.println(""String_Node_Str"",typeParameterDeclaration,jmethod.getReturnType().getParameterizedQualifiedSourceName(),jmethod.getName(),parameterDeclaration);
      sw.indent();
      sw.println(""String_Node_Str"",AbstractRequest.class.getCanonicalName(),request.getDataType().getParameterizedQualifiedSourceName(),jmethod.getReturnType().getParameterizedQualifiedSourceName());
      sw.indent();
      sw.println(""String_Node_Str"",method.getSimpleSourceName());
      sw.println(""String_Node_Str"");
      sw.println(""String_Node_Str"",RequestData.class.getCanonicalName());
      sw.indentln(""String_Node_Str"",RequestData.class.getCanonicalName(),operation,parameterArray);
      sw.println(""String_Node_Str"");
      sw.println(""String_Node_Str"");
      sw.indent();
      sw.println(""String_Node_Str"");
      if (request.isCollectionType()) {
        Class<?> collectionType=request.getCollectionType().equals(CollectionType.LIST) ? ArrayList.class : HashSet.class;
        sw.println(""String_Node_Str"",collectionType.getCanonicalName());
        String decodeMethod=request.isValueType() ? ""String_Node_Str"" : ""String_Node_Str"";
        sw.println(""String_Node_Str"",decodeMethod,ModelUtils.getQualifiedBaseName(request.getCollectionElementType()),collectionType.getCanonicalName());
      }
 else       if (request.isValueType()) {
        sw.println(""String_Node_Str"",ValueCodex.class.getCanonicalName(),ModelUtils.getQualifiedBaseName(request.getDataType()));
      }
 else       if (request.isEntityType()) {
        sw.println(""String_Node_Str"",request.getEntityType().getQualifiedSourceName());
      }
 else {
        sw.println(""String_Node_Str"");
      }
      sw.println(""String_Node_Str"",request.getDataType().getParameterizedQualifiedSourceName());
      sw.outdent();
      sw.println(""String_Node_Str"");
      sw.outdent();
      sw.println(""String_Node_Str"");
      sw.println(""String_Node_Str"");
      if (!request.isInstance()) {
        sw.println(""String_Node_Str"");
      }
      sw.println(""String_Node_Str"");
      sw.outdent();
      sw.println(""String_Node_Str"");
    }
    sw.commit(logger);
  }
}"
81977,"public void setQualifiedSourceName(String name){
  toReturn.qualifiedSourceName=name;
}","public void setQualifiedSourceName(String name){
}"
81978,"/** 
 * Set the open state of a tree node.
 * @param cellList the CellList that changed state.
 * @param value the value to open
 * @param open true to open, false to close
 * @param fireEvents true to fireEvents
 * @return the open {@link TreeNode}, or null if not opened
 */
private <C>TreeNode setChildState(BrowserCellList<C> cellList,C value,boolean open,boolean fireEvents,boolean redraw){
  Object newKey=cellList.getValueKey(value);
  if (open) {
    if (newKey == null) {
      return null;
    }
 else     if (newKey.equals(cellList.focusedKey)) {
      return cellList.isFocusedOpen ? treeNodes.get(cellList.level + 1) : null;
    }
    if (cellList.focusedKey != null) {
      setChildState(cellList,cellList.focusedValue,false,fireEvents,false);
    }
    cellList.focusedValue=value;
    cellList.focusedKey=cellList.getValueKey(value);
    NodeInfo<?> childNodeInfo=isLeaf(value) ? null : getNodeInfo(value);
    if (childNodeInfo != null) {
      cellList.isFocusedOpen=true;
      appendTreeNode(childNodeInfo,value);
    }
 else {
      cellList.isFocusedOpen=false;
    }
    if (redraw) {
      treeNodes.get(cellList.level).display.redraw();
    }
    if (cellList.isFocusedOpen) {
      TreeNodeImpl<?> node=treeNodes.get(cellList.level + 1);
      if (fireEvents) {
        OpenEvent.fire(this,node);
      }
      return node.isDestroyed() ? null : node;
    }
    return null;
  }
 else {
    if (cellList.focusedKey == null || !cellList.focusedKey.equals(newKey)) {
      return null;
    }
    TreeNode closedNode=cellList.isFocusedOpen ? treeNodes.get(cellList.level + 1) : null;
    trimToLevel(cellList.level);
    cellList.focusedKey=null;
    cellList.focusedValue=null;
    cellList.isFocusedOpen=false;
    if (redraw) {
      treeNodes.get(cellList.level).display.redraw();
    }
    if (fireEvents && closedNode != null) {
      CloseEvent.fire(this,closedNode);
    }
  }
  return null;
}","/** 
 * Set the open state of a tree node.
 * @param cellList the CellList that changed state.
 * @param value the value to open
 * @param open true to open, false to close
 * @param fireEvents true to fireEvents
 * @return the open {@link TreeNode}, or null if not opened
 */
private <C>TreeNode setChildState(BrowserCellList<C> cellList,C value,boolean open,boolean fireEvents,boolean redraw){
  Object newKey=cellList.getValueKey(value);
  if (open) {
    if (newKey == null) {
      return null;
    }
 else     if (newKey.equals(cellList.focusedKey)) {
      return cellList.isFocusedOpen ? treeNodes.get(cellList.level + 1) : null;
    }
    if (cellList.focusedKey != null) {
      setChildState(cellList,cellList.focusedValue,false,fireEvents,false);
    }
    cellList.focusedValue=value;
    cellList.focusedKey=cellList.getValueKey(value);
    NodeInfo<?> childNodeInfo=isLeaf(value) ? null : getNodeInfo(value);
    if (childNodeInfo != null) {
      cellList.isFocusedOpen=true;
      appendTreeNode(childNodeInfo,value);
    }
 else {
      cellList.isFocusedOpen=false;
    }
    if (redraw) {
      treeNodes.get(cellList.level).display.redraw();
    }
    if (cellList.isFocusedOpen) {
      TreeNodeImpl<?> node=treeNodes.get(cellList.level + 1);
      if (fireEvents) {
        OpenEvent.fire(this,node);
      }
      return node.isDestroyed() ? null : node;
    }
    return null;
  }
 else {
    if (cellList.focusedKey == null || !cellList.focusedKey.equals(newKey)) {
      return null;
    }
    TreeNode closedNode=(cellList.isFocusedOpen && (treeNodes.size() > cellList.level + 1)) ? treeNodes.get(cellList.level + 1) : null;
    trimToLevel(cellList.level);
    if (redraw) {
      treeNodes.get(cellList.level).display.redraw();
    }
    if (fireEvents && closedNode != null) {
      CloseEvent.fire(this,closedNode);
    }
  }
  return null;
}"
81979,"/** 
 * Reduce the number of   {@link HasData}s down to the specified level.
 * @param level the level to trim to
 */
private void trimToLevel(int level){
  adjustScrollLock();
  int curLevel=treeNodes.size() - 1;
  while (curLevel > level) {
    TreeNodeImpl<?> removed=treeNodes.remove(curLevel);
    removed.destroy();
    curLevel--;
  }
}","/** 
 * Reduce the number of   {@link HasData}s down to the specified level.
 * @param level the level to trim to
 */
private void trimToLevel(int level){
  adjustScrollLock();
  int curLevel=treeNodes.size() - 1;
  while (curLevel > level) {
    TreeNodeImpl<?> removed=treeNodes.remove(curLevel);
    removed.destroy();
    curLevel--;
  }
  if (level < treeNodes.size()) {
    TreeNodeImpl<?> node=treeNodes.get(level);
    node.display.focusedKey=null;
    node.display.focusedValue=null;
    node.display.isFocusedOpen=false;
  }
}"
81980,"/** 
 * Test that a tree node is destroyed if its associated data is lost when new data is provided to the node.
 */
public void testTreeNodeDataLost(){
  MockOpenHandler openHandler=new MockOpenHandler();
  MockCloseHandler closeHandler=new MockCloseHandler();
  tree.addOpenHandler(openHandler);
  tree.addCloseHandler(closeHandler);
  TreeNode root=tree.getRootTreeNode();
  TreeNode b=root.setChildOpen(1,true);
  assertEquals(b,openHandler.getLastEventAndClear().getTarget());
  List<String> list=new ArrayList<String>();
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  model.rootDataProvider.setList(list);
  assertTrue(b.isDestroyed());
}","/** 
 * Test that a tree node is destroyed if its associated data is lost when new data is provided to the node.
 */
public void testTreeNodeDataLost(){
  MockOpenHandler openHandler=new MockOpenHandler();
  MockCloseHandler closeHandler=new MockCloseHandler();
  tree.addOpenHandler(openHandler);
  tree.addCloseHandler(closeHandler);
  TreeNode root=tree.getRootTreeNode();
  TreeNode b=root.setChildOpen(1,true);
  assertEquals(b,openHandler.getLastEventAndClear().getTarget());
  List<String> list=new ArrayList<String>();
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  model.rootDataProvider.setList(list);
  assertTrue(b.isDestroyed());
  assertNotNull(root.setChildOpen(0,true));
}"
81981,"private void createHeadersAndFooters(){
  if (headersStale) {
    headersStale=false;
    createHeaders(false);
    createHeaders(true);
  }
}","private void createHeadersAndFooters(){
  createHeaders(false);
  createHeaders(true);
}"
81982,"/** 
 * Render the header or footer.
 * @param isFooter true if this is the footer table, false if the header table
 */
private void createHeaders(boolean isFooter){
  List<Header<?>> theHeaders=isFooter ? footers : headers;
  TableSectionElement section=isFooter ? tfoot : thead;
  String className=isFooter ? style.cellTableFooter() : style.cellTableHeader();
  boolean hasHeader=false;
  SafeHtmlBuilder sb=new SafeHtmlBuilder();
  sb.appendHtmlConstant(""String_Node_Str"");
  int columnCount=columns.size();
  int curColumn=0;
  for (  Header<?> header : theHeaders) {
    StringBuilder classesBuilder=new StringBuilder(className);
    if (curColumn == 0) {
      classesBuilder.append(""String_Node_Str"");
      classesBuilder.append(isFooter ? style.cellTableFirstColumnFooter() : style.cellTableFirstColumnHeader());
    }
    if (curColumn == columnCount - 1) {
      classesBuilder.append(""String_Node_Str"");
      classesBuilder.append(isFooter ? style.cellTableLastColumnFooter() : style.cellTableLastColumnHeader());
    }
    SafeHtmlBuilder headerBuilder=new SafeHtmlBuilder();
    if (header != null) {
      hasHeader=true;
      header.render(headerBuilder);
    }
    sb.append(template.th(classesBuilder.toString(),headerBuilder.toSafeHtml()));
    curColumn++;
  }
  sb.appendHtmlConstant(""String_Node_Str"");
  TABLE_IMPL.replaceAllRows(this,section,sb.toSafeHtml());
  setVisible(section,hasHeader);
}","/** 
 * Render the header or footer.
 * @param isFooter true if this is the footer table, false if the header table
 */
private void createHeaders(boolean isFooter){
  List<Header<?>> theHeaders=isFooter ? footers : headers;
  TableSectionElement section=isFooter ? tfoot : thead;
  String className=isFooter ? style.cellTableFooter() : style.cellTableHeader();
  boolean hasHeader=false;
  SafeHtmlBuilder sb=new SafeHtmlBuilder();
  sb.appendHtmlConstant(""String_Node_Str"");
  int columnCount=columns.size();
  if (columnCount > 0) {
    Header<?> prevHeader=theHeaders.get(0);
    int prevColspan=1;
    StringBuilder classesBuilder=new StringBuilder(className);
    classesBuilder.append(""String_Node_Str"");
    classesBuilder.append(isFooter ? style.cellTableFirstColumnFooter() : style.cellTableFirstColumnHeader());
    for (int curColumn=1; curColumn < columnCount; curColumn++) {
      Header<?> header=theHeaders.get(curColumn);
      if (header != prevHeader) {
        SafeHtmlBuilder headerBuilder=new SafeHtmlBuilder();
        if (prevHeader != null) {
          hasHeader=true;
          prevHeader.render(headerBuilder);
        }
        sb.append(template.th(prevColspan,classesBuilder.toString(),headerBuilder.toSafeHtml()));
        prevHeader=header;
        prevColspan=1;
        classesBuilder=new StringBuilder(className);
      }
 else {
        prevColspan++;
      }
    }
    SafeHtmlBuilder headerBuilder=new SafeHtmlBuilder();
    if (prevHeader != null) {
      hasHeader=true;
      prevHeader.render(headerBuilder);
    }
    classesBuilder.append(""String_Node_Str"");
    classesBuilder.append(isFooter ? style.cellTableLastColumnFooter() : style.cellTableLastColumnHeader());
    sb.append(template.th(prevColspan,classesBuilder.toString(),headerBuilder.toSafeHtml()));
  }
  sb.appendHtmlConstant(""String_Node_Str"");
  TABLE_IMPL.replaceAllRows(this,section,sb.toSafeHtml());
  setVisible(section,hasHeader);
}"
81983,"/** 
 * Remove a column.
 * @param index the column index
 */
public void removeColumn(int index){
  if (index < 0 || index >= columns.size()) {
    throw new IndexOutOfBoundsException(""String_Node_Str"");
  }
  columns.remove(index);
  headers.remove(index);
  footers.remove(index);
  updateDependsOnSelection();
  headersStale=true;
  if (index <= keyboardSelectedColumn) {
    keyboardSelectedColumn=0;
    if (isInteractive) {
      for (int i=0; i < columns.size(); i++) {
        if (isColumnInteractive(columns.get(i))) {
          keyboardSelectedColumn=i;
          break;
        }
      }
    }
  }
  scheduleRedraw();
}","/** 
 * Remove a column.
 * @param index the column index
 */
public void removeColumn(int index){
  if (index < 0 || index >= columns.size()) {
    throw new IndexOutOfBoundsException(""String_Node_Str"");
  }
  columns.remove(index);
  headers.remove(index);
  footers.remove(index);
  updateDependsOnSelection();
  if (index <= keyboardSelectedColumn) {
    keyboardSelectedColumn=0;
    if (isInteractive) {
      for (int i=0; i < columns.size(); i++) {
        if (isColumnInteractive(columns.get(i))) {
          keyboardSelectedColumn=i;
          break;
        }
      }
    }
  }
  scheduleRedraw();
}"
81984,"@Template(""String_Node_Str"") SafeHtml th(String classes,SafeHtml contents);","@Template(""String_Node_Str"") SafeHtml th(int colspan,String classes,SafeHtml contents);"
81985,"/** 
 * Find the entity in the server data store, apply its setters, capture any violations, and return a  {@link com.google.gwt.requestfactory.server.JsonRequestProcessor.EntityData EntityData} encapsulating the results.<p> If a <i>set</i> method has side-effects, we will not notice.
 */
public EntityData getEntityDataForRecordWithSettersApplied(EntityKey entityKey,JSONObject recordObject,WriteOperation writeOperation) throws JSONException, SecurityException, IllegalAccessException, InvocationTargetException, NoSuchMethodException, InstantiationException {
  Class<?> entityType=getEntityTypeForProxyType(entityKey.proxyType);
  Map<String,Property<?>> propertiesInProxy=getPropertiesFromRecordProxyType(entityKey.proxyType);
  Map<String,Class<?>> propertiesInDomain=updatePropertyTypes(propertiesInProxy,entityType);
  validateKeys(recordObject,propertiesInDomain.keySet());
  Object entityInstance=getEntityInstance(writeOperation,entityType,entityKey.decodedId(propertiesInProxy.get(Constants.ENTITY_ID_PROPERTY).getType()),propertiesInProxy.get(Constants.ENTITY_ID_PROPERTY).getType());
  cachedEntityLookup.put(entityKey,entityInstance);
  Iterator<?> keys=recordObject.keys();
  while (keys.hasNext()) {
    String key=(String)keys.next();
    Class<?> propertyType=propertiesInDomain.get(key);
    Property<?> dtoProperty=propertiesInProxy.get(key);
    if (writeOperation == WriteOperation.PERSIST && (Constants.ENTITY_ID_PROPERTY.equals(key))) {
      String id=generateIdForCreate(key);
      if (id != null) {
        entityType.getMethod(getMethodNameFromPropertyName(key,""String_Node_Str""),propertyType).invoke(entityInstance,id);
      }
    }
 else {
      Object propertyValue=null;
      if (recordObject.isNull(key)) {
      }
 else       if (dtoProperty instanceof CollectionProperty<?,?>) {
        Class<?> cType=dtoProperty.getType();
        Class<?> leafType=((CollectionProperty<?,?>)dtoProperty).getLeafType();
        Collection<Object> col=createCollection(cType);
        if (col != null) {
          JSONArray array=recordObject.getJSONArray(key);
          for (int i=0; i < array.length(); i++) {
            if (EntityProxy.class.isAssignableFrom(leafType)) {
              propertyValue=getPropertyValueFromRequestCached(array,i,dtoProperty);
            }
 else {
              propertyValue=decodeParameterValue(leafType,array.getString(i));
            }
            col.add(propertyValue);
          }
          propertyValue=col;
        }
      }
 else {
        propertyValue=getPropertyValueFromRequestCached(recordObject,propertiesInProxy,key,dtoProperty);
      }
      entityType.getMethod(getMethodNameFromPropertyName(key,""String_Node_Str""),propertiesInDomain.get(key)).invoke(entityInstance,propertyValue);
    }
  }
  Set<ConstraintViolation<Object>> violations=Collections.emptySet();
  Validator validator=null;
  try {
    ValidatorFactory validatorFactory=Validation.buildDefaultValidatorFactory();
    validator=validatorFactory.getValidator();
  }
 catch (  Exception e) {
    log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",e.getClass().getName(),e.getLocalizedMessage()));
  }
  if (validator != null) {
    violations=validator.validate(entityInstance);
  }
  return new EntityData(entityInstance,(violations.isEmpty() ? null : getViolationsAsJson(violations)));
}","/** 
 * Find the entity in the server data store, apply its setters, capture any violations, and return a  {@link com.google.gwt.requestfactory.server.JsonRequestProcessor.EntityData EntityData} encapsulating the results.<p> If a <i>set</i> method has side-effects, we will not notice.
 */
public EntityData getEntityDataForRecordWithSettersApplied(EntityKey entityKey,JSONObject recordObject,WriteOperation writeOperation) throws JSONException, SecurityException, IllegalAccessException, InvocationTargetException, NoSuchMethodException, InstantiationException {
  Class<?> entityType=getEntityTypeForProxyType(entityKey.proxyType);
  Map<String,Property<?>> propertiesInProxy=getPropertiesFromRecordProxyType(entityKey.proxyType);
  Map<String,Class<?>> propertiesInDomain=updatePropertyTypes(propertiesInProxy,entityType);
  validateKeys(recordObject,propertiesInDomain.keySet());
  Class<?> idType=getIdMethodForEntity(entityType).getReturnType();
  Object entityInstance=getEntityInstance(writeOperation,entityType,entityKey.decodedId(idType),idType);
  cachedEntityLookup.put(entityKey,entityInstance);
  Iterator<?> keys=recordObject.keys();
  while (keys.hasNext()) {
    String key=(String)keys.next();
    Property<?> dtoProperty=propertiesInProxy.get(key);
    if (writeOperation == WriteOperation.PERSIST && (Constants.ENTITY_ID_PROPERTY.equals(key))) {
      continue;
    }
 else {
      Object propertyValue=null;
      if (recordObject.isNull(key)) {
      }
 else       if (dtoProperty instanceof CollectionProperty<?,?>) {
        Class<?> cType=dtoProperty.getType();
        Class<?> leafType=((CollectionProperty<?,?>)dtoProperty).getLeafType();
        Collection<Object> col=createCollection(cType);
        if (col != null) {
          JSONArray array=recordObject.getJSONArray(key);
          for (int i=0; i < array.length(); i++) {
            if (EntityProxy.class.isAssignableFrom(leafType)) {
              propertyValue=getPropertyValueFromRequestCached(array,i,dtoProperty);
            }
 else {
              propertyValue=decodeParameterValue(leafType,array.getString(i));
            }
            col.add(propertyValue);
          }
          propertyValue=col;
        }
      }
 else {
        propertyValue=getPropertyValueFromRequestCached(recordObject,propertiesInProxy,key,dtoProperty);
      }
      entityType.getMethod(getMethodNameFromPropertyName(key,""String_Node_Str""),propertiesInDomain.get(key)).invoke(entityInstance,propertyValue);
    }
  }
  Set<ConstraintViolation<Object>> violations=Collections.emptySet();
  Validator validator=null;
  try {
    ValidatorFactory validatorFactory=Validation.buildDefaultValidatorFactory();
    validator=validatorFactory.getValidator();
  }
 catch (  Exception e) {
    log.info(String.format(""String_Node_Str"" + ""String_Node_Str"",e.getClass().getName(),e.getLocalizedMessage()));
  }
  if (validator != null) {
    violations=validator.validate(entityInstance);
  }
  return new EntityData(entityInstance,(violations.isEmpty() ? null : getViolationsAsJson(violations)));
}"
81986,"public void testFetchEntityWithStringId(){
  delayTestFinish(TEST_DELAY);
  req.simpleBarRequest().findSimpleBarById(""String_Node_Str"").fire(new Receiver<SimpleBarProxy>(){
    @Override public void onSuccess(    SimpleBarProxy response){
      final EntityProxyId<SimpleBarProxy> stableId=response.stableId();
      req.find(stableId).fire(new Receiver<SimpleBarProxy>(){
        @Override public void onSuccess(        SimpleBarProxy returnedProxy){
          assertEquals(stableId,returnedProxy.stableId());
          assertEquals(""String_Node_Str"",returnedProxy.getId());
          finishTestAndReset();
        }
      }
);
    }
  }
);
}","public void testFetchEntityWithStringId(){
  delayTestFinish(TEST_DELAY);
  req.simpleBarRequest().findSimpleBarById(""String_Node_Str"").fire(new Receiver<SimpleBarProxy>(){
    @Override public void onSuccess(    SimpleBarProxy response){
      final EntityProxyId<SimpleBarProxy> stableId=response.stableId();
      req.find(stableId).fire(new Receiver<SimpleBarProxy>(){
        @Override public void onSuccess(        SimpleBarProxy returnedProxy){
          assertEquals(stableId,returnedProxy.stableId());
          finishTestAndReset();
        }
      }
);
    }
  }
);
}"
81987,"public void testDummyCreateBar(){
  delayTestFinish(5000);
  SimpleBarRequest context=req.simpleBarRequest();
  final SimpleBarProxy foo=context.create(SimpleBarProxy.class);
  Object futureId=foo.getId();
  assertEquals(futureId,foo.getId());
  Request<SimpleBarProxy> fooReq=context.persistAndReturnSelf().using(foo);
  fooReq.fire(new Receiver<SimpleBarProxy>(){
    @Override public void onSuccess(    final SimpleBarProxy returned){
      Object futureId=foo.getId();
      assertEquals(futureId,foo.getId());
      checkStableIdEquals(foo,returned);
      finishTestAndReset();
    }
  }
);
}","public void testDummyCreateBar(){
  delayTestFinish(5000);
  SimpleBarRequest context=req.simpleBarRequest();
  final SimpleBarProxy foo=context.create(SimpleBarProxy.class);
  Request<SimpleBarProxy> fooReq=context.persistAndReturnSelf().using(foo);
  fooReq.fire(new Receiver<SimpleBarProxy>(){
    @Override public void onSuccess(    final SimpleBarProxy returned){
      checkStableIdEquals(foo,returned);
      finishTestAndReset();
    }
  }
);
}"
81988,"public void testDummyCreateList(){
  delayTestFinish(DELAY_TEST_FINISH);
  SimpleBarRequest context=simpleBarRequest();
  final SimpleBarProxy bar=context.create(SimpleBarProxy.class);
  Object futureId=bar.getId();
  assertEquals(futureId,bar.getId());
  assertTrue(((SimpleEntityProxyId<?>)bar.stableId()).isEphemeral());
  Request<SimpleBarProxy> fooReq=context.returnFirst(Collections.singletonList(bar));
  fooReq.fire(new Receiver<SimpleBarProxy>(){
    @Override public void onSuccess(    final SimpleBarProxy returned){
      Object futureId=bar.getId();
      assertEquals(futureId,bar.getId());
      assertFalse(((SimpleEntityProxyId<?>)bar.stableId()).isEphemeral());
      assertFalse(((SimpleEntityProxyId<?>)returned.stableId()).isEphemeral());
      checkStableIdEquals(bar,returned);
      finishTestAndReset();
    }
  }
);
}","public void testDummyCreateList(){
  delayTestFinish(DELAY_TEST_FINISH);
  SimpleBarRequest context=simpleBarRequest();
  final SimpleBarProxy bar=context.create(SimpleBarProxy.class);
  assertTrue(((SimpleEntityProxyId<?>)bar.stableId()).isEphemeral());
  Request<SimpleBarProxy> fooReq=context.returnFirst(Collections.singletonList(bar));
  fooReq.fire(new Receiver<SimpleBarProxy>(){
    @Override public void onSuccess(    final SimpleBarProxy returned){
      assertFalse(((SimpleEntityProxyId<?>)bar.stableId()).isEphemeral());
      assertFalse(((SimpleEntityProxyId<?>)returned.stableId()).isEphemeral());
      checkStableIdEquals(bar,returned);
      finishTestAndReset();
    }
  }
);
}"
81989,"public void testDummyCreateBar(){
  delayTestFinish(DELAY_TEST_FINISH);
  SimpleBarRequest context=simpleBarRequest();
  final SimpleBarProxy foo=context.create(SimpleBarProxy.class);
  Object futureId=foo.getId();
  assertEquals(futureId,foo.getId());
  assertTrue(((SimpleEntityProxyId<?>)foo.stableId()).isEphemeral());
  Request<SimpleBarProxy> fooReq=context.persistAndReturnSelf().using(foo);
  fooReq.fire(new Receiver<SimpleBarProxy>(){
    @Override public void onSuccess(    final SimpleBarProxy returned){
      Object futureId=foo.getId();
      assertEquals(futureId,foo.getId());
      assertFalse(((SimpleEntityProxyId<?>)foo.stableId()).isEphemeral());
      checkStableIdEquals(foo,returned);
      finishTestAndReset();
    }
  }
);
}","public void testDummyCreateBar(){
  delayTestFinish(DELAY_TEST_FINISH);
  SimpleBarRequest context=simpleBarRequest();
  final SimpleBarProxy foo=context.create(SimpleBarProxy.class);
  assertTrue(((SimpleEntityProxyId<?>)foo.stableId()).isEphemeral());
  Request<SimpleBarProxy> fooReq=context.persistAndReturnSelf().using(foo);
  fooReq.fire(new Receiver<SimpleBarProxy>(){
    @Override public void onSuccess(    final SimpleBarProxy returned){
      assertFalse(((SimpleEntityProxyId<?>)foo.stableId()).isEphemeral());
      checkStableIdEquals(foo,returned);
      finishTestAndReset();
    }
  }
);
}"
81990,"private Object getPropertyValueFromRequestCached(JSONArray recordArray,int index,Property<?> dtoProperty) throws JSONException, IllegalAccessException, InvocationTargetException, NoSuchMethodException, InstantiationException {
  Object propertyValue;
  Class<?> leafType=dtoProperty instanceof CollectionProperty<?,?> ? ((CollectionProperty<?,?>)dtoProperty).getLeafType() : dtoProperty.getType();
  if (EntityProxy.class.isAssignableFrom(leafType)) {
    EntityKey propKey=getEntityKey(recordArray.getString(index));
    Object cacheValue=cachedEntityLookup.get(propKey);
    if (cachedEntityLookup.containsKey(propKey)) {
      propertyValue=cacheValue;
    }
 else {
      propertyValue=getPropertyValueFromRequest(recordArray,index,leafType);
    }
  }
 else {
    propertyValue=getPropertyValueFromRequest(recordArray,index,leafType);
  }
  return propertyValue;
}","private Object getPropertyValueFromRequestCached(JSONObject recordObject,Map<String,Property<?>> propertiesInProxy,String key,Property<?> dtoProperty) throws JSONException, IllegalAccessException, InvocationTargetException, NoSuchMethodException, InstantiationException {
  Object propertyValue;
  if (!recordObject.isNull(key) && EntityProxy.class.isAssignableFrom(dtoProperty.getType())) {
    EntityKey propKey=getEntityKey(recordObject.getString(key));
    Object cacheValue=cachedEntityLookup.get(propKey);
    if (cachedEntityLookup.containsKey(propKey)) {
      propertyValue=cacheValue;
    }
 else {
      propertyValue=getPropertyValueFromRequest(recordObject,key,propertiesInProxy.get(key).getType());
    }
  }
 else {
    propertyValue=getPropertyValueFromRequest(recordObject,key,propertiesInProxy.get(key).getType());
  }
  return propertyValue;
}"
81991,"/** 
 * Returns a JSONObject with at most three keys: CREATE, UPDATE, DELETE. Each value is a JSONArray of JSONObjects.
 */
private JSONObject getSideEffects() throws SecurityException, JSONException, IllegalAccessException, InvocationTargetException, NoSuchMethodException, IllegalArgumentException, InstantiationException {
  JSONObject sideEffects=new JSONObject();
  JSONArray createArray=new JSONArray();
  JSONArray deleteArray=new JSONArray();
  JSONArray updateArray=new JSONArray();
  for (  EntityKey entityKey : involvedKeys) {
    EntityData entityData=afterDvsDataMap.get(entityKey);
    if (entityData == null) {
      continue;
    }
    if (entityKey.isFuture) {
      JSONObject createRecord=getCreateReturnRecord(entityKey,entityData);
      if (createRecord != null) {
        createArray.put(createRecord);
      }
      continue;
    }
    WriteOperation writeOperation=detectDeleteOrUpdate(entityKey,entityData);
    if (writeOperation == WriteOperation.DELETE) {
      JSONObject deleteRecord=new JSONObject();
      deleteRecord.put(Constants.ENCODED_ID_PROPERTY,getSchemaAndId(entityKey.proxyType,entityKey.encodedId));
      deleteArray.put(deleteRecord);
    }
    if (writeOperation == WriteOperation.UPDATE) {
      JSONObject updateRecord=new JSONObject();
      updateRecord.put(Constants.ENCODED_ID_PROPERTY,getSchemaAndId(entityKey.proxyType,entityKey.encodedId));
      updateArray.put(updateRecord);
    }
  }
  if (createArray.length() > 0) {
    sideEffects.put(WriteOperation.PERSIST.name(),createArray);
  }
  if (deleteArray.length() > 0) {
    sideEffects.put(WriteOperation.DELETE.name(),deleteArray);
  }
  if (updateArray.length() > 0) {
    sideEffects.put(WriteOperation.UPDATE.name(),updateArray);
  }
  return sideEffects;
}","/** 
 * Returns a JSONObject with at most three keys: CREATE, UPDATE, DELETE. Each value is a JSONArray of JSONObjects.
 */
private JSONObject getSideEffects() throws SecurityException, JSONException, IllegalAccessException, InvocationTargetException, NoSuchMethodException, IllegalArgumentException, InstantiationException {
}"
81992,"public Object getJsonObject(Object entityElement,Class<? extends EntityProxy> entityKeyClass,RequestProperty propertyContext) throws JSONException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {
  JSONObject jsonObject=new JSONObject();
  if (entityElement == null || !EntityProxy.class.isAssignableFrom(entityKeyClass)) {
    return JSONObject.NULL;
  }
  jsonObject.put(Constants.ENCODED_ID_PROPERTY,isEntityReference(entityElement,entityKeyClass));
  jsonObject.put(Constants.ENCODED_VERSION_PROPERTY,encodePropertyValueFromDataStore(entityElement,Constants.ENTITY_VERSION_PROPERTY,Constants.ENTITY_VERSION_PROPERTY.getName(),propertyContext));
  for (  Property<?> p : allProperties(entityKeyClass)) {
    if (requestedProperty(p,propertyContext)) {
      String propertyName=p.getName();
      jsonObject.put(propertyName,encodePropertyValueFromDataStore(entityElement,p,propertyName,propertyContext));
    }
  }
  return jsonObject;
}","public Object getJsonObject(Object entityElement,Class<? extends EntityProxy> entityKeyClass,RequestProperty propertyContext) throws JSONException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {
  if (entityElement == null || !EntityProxy.class.isAssignableFrom(entityKeyClass)) {
    return JSONObject.NULL;
  }
  JSONObject jsonObject=getJsonObjectWithIdAndVersion(isEntityReference(entityElement,entityKeyClass),entityElement,propertyContext);
  for (  Property<?> p : allProperties(entityKeyClass)) {
    if (requestedProperty(p,propertyContext)) {
      String propertyName=p.getName();
      jsonObject.put(propertyName,encodePropertyValueFromDataStore(entityElement,p,propertyName,propertyContext));
    }
  }
  return jsonObject;
}"
81993,"public void testMethodWithSideEffects(){
  delayTestFinish(5000);
  final SimpleFooEventHandler<SimpleFooStringProxy> handler=new SimpleFooEventHandler<SimpleFooStringProxy>();
  EntityProxyChange.registerForProxyType(req.getEventBus(),SimpleFooStringProxy.class,handler);
  req.simpleFooStringRequest().findSimpleFooStringById(""String_Node_Str"").fire(new Receiver<SimpleFooStringProxy>(){
    @Override public void onSuccess(    SimpleFooStringProxy newFoo){
      assertEquals(1,handler.updateEventCount);
      assertEquals(1,handler.totalEventCount);
      SimpleFooStringRequest context=req.simpleFooStringRequest();
      final Request<Long> mutateRequest=context.countSimpleFooWithUserNameSideEffect().using(newFoo);
      newFoo=context.edit(newFoo);
      newFoo.setUserName(""String_Node_Str"");
      mutateRequest.fire(new Receiver<Long>(){
        @Override public void onSuccess(        Long response){
          assertCannotFire(mutateRequest);
          assertEquals(new Long(1L),response);
          assertEquals(2,handler.updateEventCount);
          assertEquals(2,handler.totalEventCount);
          req.simpleFooStringRequest().findSimpleFooStringById(""String_Node_Str"").fire(new Receiver<SimpleFooStringProxy>(){
            @Override public void onSuccess(            SimpleFooStringProxy finalFoo){
              assertEquals(""String_Node_Str"",finalFoo.getUserName());
              assertEquals(3,handler.updateEventCount);
              assertEquals(3,handler.totalEventCount);
              finishTestAndReset();
            }
          }
);
        }
      }
);
      try {
        newFoo.setUserName(""String_Node_Str"");
        fail();
      }
 catch (      IllegalStateException e) {
      }
    }
  }
);
}","public void testMethodWithSideEffects(){
  delayTestFinish(5000);
  final SimpleFooEventHandler<SimpleFooStringProxy> handler=new SimpleFooEventHandler<SimpleFooStringProxy>();
  EntityProxyChange.registerForProxyType(req.getEventBus(),SimpleFooStringProxy.class,handler);
  req.simpleFooStringRequest().findSimpleFooStringById(""String_Node_Str"").fire(new Receiver<SimpleFooStringProxy>(){
    @Override public void onSuccess(    SimpleFooStringProxy newFoo){
      assertEquals(1,handler.updateEventCount);
      assertEquals(1,handler.totalEventCount);
      SimpleFooStringRequest context=req.simpleFooStringRequest();
      final Request<Long> mutateRequest=context.countSimpleFooWithUserNameSideEffect().using(newFoo);
      newFoo=context.edit(newFoo);
      newFoo.setUserName(""String_Node_Str"");
      mutateRequest.fire(new Receiver<Long>(){
        @Override public void onSuccess(        Long response){
          assertCannotFire(mutateRequest);
          assertEquals(new Long(1L),response);
          assertEquals(2,handler.updateEventCount);
          assertEquals(2,handler.totalEventCount);
          req.simpleFooStringRequest().findSimpleFooStringById(""String_Node_Str"").fire(new Receiver<SimpleFooStringProxy>(){
            @Override public void onSuccess(            SimpleFooStringProxy finalFoo){
              assertEquals(""String_Node_Str"",finalFoo.getUserName());
              assertEquals(2,handler.updateEventCount);
              assertEquals(2,handler.totalEventCount);
              finishTestAndReset();
            }
          }
);
        }
      }
);
      try {
        newFoo.setUserName(""String_Node_Str"");
        fail();
      }
 catch (      IllegalStateException e) {
      }
    }
  }
);
}"
81994,"public void testMethodWithSideEffects(){
  delayTestFinish(DELAY_TEST_FINISH);
  final SimpleFooEventHandler<SimpleFooProxy> handler=new SimpleFooEventHandler<SimpleFooProxy>();
  EntityProxyChange.registerForProxyType(req.getEventBus(),SimpleFooProxy.class,handler);
  simpleFooRequest().findSimpleFooById(999L).fire(new Receiver<SimpleFooProxy>(){
    @Override public void onSuccess(    SimpleFooProxy newFoo){
      assertEquals(1,handler.updateEventCount);
      assertEquals(1,handler.totalEventCount);
      SimpleFooRequest context=simpleFooRequest();
      final Request<Long> mutateRequest=context.countSimpleFooWithUserNameSideEffect().using(newFoo);
      newFoo=context.edit(newFoo);
      newFoo.setUserName(""String_Node_Str"");
      mutateRequest.fire(new Receiver<Long>(){
        @Override public void onSuccess(        Long response){
          assertCannotFire(mutateRequest);
          assertEquals(new Long(2L),response);
          assertEquals(2,handler.updateEventCount);
          assertEquals(2,handler.totalEventCount);
          simpleFooRequest().findSimpleFooById(999L).fire(new Receiver<SimpleFooProxy>(){
            @Override public void onSuccess(            SimpleFooProxy finalFoo){
              assertEquals(""String_Node_Str"",finalFoo.getUserName());
              assertEquals(3,handler.updateEventCount);
              assertEquals(3,handler.totalEventCount);
              finishTestAndReset();
            }
          }
);
        }
      }
);
      try {
        newFoo.setUserName(""String_Node_Str"");
        fail();
      }
 catch (      IllegalStateException e) {
      }
    }
  }
);
}","public void testMethodWithSideEffects(){
  delayTestFinish(DELAY_TEST_FINISH);
  final SimpleFooEventHandler<SimpleFooProxy> handler=new SimpleFooEventHandler<SimpleFooProxy>();
  EntityProxyChange.registerForProxyType(req.getEventBus(),SimpleFooProxy.class,handler);
  simpleFooRequest().findSimpleFooById(999L).fire(new Receiver<SimpleFooProxy>(){
    @Override public void onSuccess(    SimpleFooProxy newFoo){
      assertEquals(1,handler.updateEventCount);
      assertEquals(1,handler.totalEventCount);
      SimpleFooRequest context=simpleFooRequest();
      final Request<Long> mutateRequest=context.countSimpleFooWithUserNameSideEffect().using(newFoo);
      newFoo=context.edit(newFoo);
      newFoo.setUserName(""String_Node_Str"");
      mutateRequest.fire(new Receiver<Long>(){
        @Override public void onSuccess(        Long response){
          assertCannotFire(mutateRequest);
          assertEquals(new Long(2L),response);
          assertEquals(2,handler.updateEventCount);
          assertEquals(2,handler.totalEventCount);
          simpleFooRequest().findSimpleFooById(999L).fire(new Receiver<SimpleFooProxy>(){
            @Override public void onSuccess(            SimpleFooProxy finalFoo){
              assertEquals(""String_Node_Str"",finalFoo.getUserName());
              assertEquals(2,handler.updateEventCount);
              assertEquals(2,handler.totalEventCount);
              finishTestAndReset();
            }
          }
);
        }
      }
);
      try {
        newFoo.setUserName(""String_Node_Str"");
        fail();
      }
 catch (      IllegalStateException e) {
      }
    }
  }
);
}"
81995,"public void testEndToEnd() throws Exception {
  com.google.gwt.requestfactory.server.SimpleFoo.reset();
  JSONObject foo=fetchVerifyAndGetInitialObject();
  foo.put(""String_Node_Str"",45);
  foo.put(""String_Node_Str"",""String_Node_Str"");
  foo.put(""String_Node_Str"",""String_Node_Str"" + 9L);
  foo.put(""String_Node_Str"",SimpleEnum.BAR.ordinal());
  foo.put(""String_Node_Str"",false);
  Date now=new Date();
  foo.put(""String_Node_Str"",""String_Node_Str"" + now.getTime());
  JSONObject result=getResultFromServer(foo);
  SimpleFoo fooResult=SimpleFoo.findSimpleFooById(999L);
  JSONArray updateArray=result.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
  assertEquals(1,updateArray.length());
  assertEquals(1,updateArray.getJSONObject(0).length());
  assertTrue(updateArray.getJSONObject(0).has(Constants.ENCODED_ID_PROPERTY));
  assertFalse(updateArray.getJSONObject(0).has(""String_Node_Str""));
  assertEquals(45,(int)fooResult.getIntId());
  assertEquals(""String_Node_Str"",fooResult.getUserName());
  assertEquals(now,fooResult.getCreated());
  assertEquals(9L,(long)fooResult.getLongField());
  assertEquals(com.google.gwt.requestfactory.shared.SimpleEnum.BAR,fooResult.getEnumField());
  assertEquals(false,(boolean)fooResult.getBoolField());
}","public void testEndToEnd() throws Exception {
  com.google.gwt.requestfactory.server.SimpleFoo.reset();
  JSONObject foo=fetchVerifyAndGetInitialObject();
  foo.put(""String_Node_Str"",45);
  foo.put(""String_Node_Str"",""String_Node_Str"");
  foo.put(""String_Node_Str"",""String_Node_Str"" + 9L);
  foo.put(""String_Node_Str"",SimpleEnum.BAR.ordinal());
  foo.put(""String_Node_Str"",false);
  Date now=new Date();
  foo.put(""String_Node_Str"",""String_Node_Str"" + now.getTime());
  JSONObject result=getResultFromServer(foo);
  SimpleFoo fooResult=SimpleFoo.findSimpleFooById(999L);
  JSONArray updateArray=result.getJSONObject(""String_Node_Str"").getJSONArray(""String_Node_Str"");
  assertEquals(1,updateArray.length());
  assertEquals(2,updateArray.getJSONObject(0).length());
  assertTrue(updateArray.getJSONObject(0).has(Constants.ENCODED_ID_PROPERTY));
  assertTrue(updateArray.getJSONObject(0).has(Constants.ENCODED_VERSION_PROPERTY));
  assertFalse(updateArray.getJSONObject(0).has(""String_Node_Str""));
  assertEquals(45,(int)fooResult.getIntId());
  assertEquals(""String_Node_Str"",fooResult.getUserName());
  assertEquals(now,fooResult.getCreated());
  assertEquals(9L,(long)fooResult.getLongField());
  assertEquals(com.google.gwt.requestfactory.shared.SimpleEnum.BAR,fooResult.getEnumField());
  assertEquals(false,(boolean)fooResult.getBoolField());
}"
81996,"public void persist(){
  if (isNew) {
    setId(Long.toString(nextId++));
    isNew=false;
    get().put(getId(),this);
  }
}","public void persist(){
  if (isNew) {
    setId(Long.toString(nextId++));
    isNew=false;
    get().put(getId(),this);
  }
  version++;
}"
81997,"public Long countSimpleFooWithUserNameSideEffect(){
  findSimpleFoo(1L).setUserName(userName);
  return countSimpleFoo();
}","public Long countSimpleFooWithUserNameSideEffect(){
  findSimpleFoo(1L).setUserName(userName);
  version++;
  return countSimpleFoo();
}"
81998,"public void persist(){
  if (isNew) {
    setId(nextId++);
    isNew=false;
    get().put(getId(),this);
  }
}","public void persist(){
  if (isNew) {
    setId(nextId++);
    isNew=false;
    get().put(getId(),this);
  }
  version++;
}"
81999,"public Long countSimpleFooWithUserNameSideEffect(){
  get().setUserName(userName);
  return 1L;
}","public Long countSimpleFooWithUserNameSideEffect(){
  get().setUserName(userName);
  version++;
  return 1L;
}"
82000,"public void persist(){
  setId(nextId++ + ""String_Node_Str"");
}","public void persist(){
  setId(nextId++ + ""String_Node_Str"");
  version++;
}"
