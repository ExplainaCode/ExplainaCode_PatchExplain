record_number,buggy_code,fixed_code
40001,"public void load(){
  BufferedReader bReader=null;
  FileReader fReader=null;
  try {
    fReader=new FileReader(EasyPresets.getInstance().getXMLPath());
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    return;
  }
  bReader=new BufferedReader(fReader);
  Collection<TaggingPreset> readResult;
  try {
    readResult=TaggingPresetReader.readAll(bReader,true);
    presets=readResult;
    TaggingPresets.addTaggingPresets(readResult);
  }
 catch (  SAXException e) {
    e.printStackTrace();
  }
}","public void load(){
  ReaderUTF8 reader;
  try {
    reader=new ReaderUTF8(new FileInputStream(EasyPresets.getInstance().getXMLPath()));
  }
 catch (  FileNotFoundException ex) {
    ex.printStackTrace();
    return;
  }
  Collection<TaggingPreset> readResult;
  try {
    readResult=TaggingPresetReader.readAll(reader,true);
    presets=readResult;
    TaggingPresets.addTaggingPresets(readResult);
  }
 catch (  SAXException e) {
    e.printStackTrace();
  }
}"
40002,"public double getAspectRatio(){
  if (aspectY == 0) {
    return 0;
  }
 else {
    return aspectX / aspectY;
  }
}","public double getAspectRatio(){
  if (aspectY == 0) {
    return 0;
  }
 else {
    return ((double)aspectX) / ((double)aspectY);
  }
}"
40003,"public static Project fromBytes(byte[] bytes,Gson gson) throws IOException {
  InputStreamReader reader=new InputStreamReader(new ByteArrayInputStream(bytes));
  return fromReader(reader,gson);
}","public static Project fromBytes(byte[] bytes,Gson gson) throws IOException {
  InputStreamReader reader=new InputStreamReader(new ByteArrayInputStream(bytes),Charset.forName(""String_Node_Str""));
  return fromReader(reader,gson);
}"
40004,"public static void toStream(Project project,OutputStream stream,Gson gson) throws IOException {
  Writer writer=new OutputStreamWriter(stream);
  ExportPackage p=new ExportPackage();
  p.project=project;
  p.version=Application.getVersion().toString();
  gson.toJson(p,writer);
  writer.close();
}","public static void toStream(Project project,OutputStream stream,Gson gson) throws IOException {
  Writer writer=new OutputStreamWriter(stream,Charset.forName(""String_Node_Str""));
  ExportPackage p=new ExportPackage();
  p.project=project;
  p.version=Application.getVersion().toString();
  gson.toJson(p,writer);
  writer.close();
}"
40005,"private void rollback(){
  logger.info(""String_Node_Str"");
  bounds.upperSection-=1;
  if (bounds.upperSection < bounds.lowerSection) {
    logger.info(""String_Node_Str"");
    probeSubdivided();
  }
 else {
    loadSections(this::render);
  }
}","private void rollback(){
  logger.info(""String_Node_Str"");
  bounds.upperSection-=1;
  if (bounds.upperSection < bounds.lowerSection) {
    logger.info(""String_Node_Str"");
    probeSubdivided();
  }
 else {
    loadSections(() -> {
      if (height <= heightLimit)       render();
 else       probeSubdivided();
    }
);
  }
}"
40006,"/** 
 * Search for XmEntity by type key and query.
 * @param query the query
 * @param typeKey the type key
 * @param pageable the page info
 * @param privilegeKey the privilege key
 * @return permitted entities
 */
public Page<XmEntity> searchByQueryAndTypeKey(String query,String typeKey,Pageable pageable,String privilegeKey){
  String permittedQuery=buildPermittedQuery(query,privilegeKey);
  val prefix=(typeKey + ""String_Node_Str"").toLowerCase();
  val typeKeyQuery=boolQuery().should(matchQuery(TYPE_KEY,typeKey)).should(prefixQuery(TYPE_KEY,prefix)).minimumNumberShouldMatch(1);
  val esQuery=isEmpty(permittedQuery) ? boolQuery().must(typeKeyQuery) : typeKeyQuery.must(simpleQueryStringQuery(permittedQuery));
  log.debug(""String_Node_Str"",esQuery);
  NativeSearchQuery queryBuilder=new NativeSearchQueryBuilder().withQuery(esQuery).withPageable(pageable).build();
  return getElasticsearchTemplate().queryForPage(queryBuilder,XmEntity.class);
}","/** 
 * Search for XmEntity by type key and query.
 * @param query the query
 * @param typeKey the type key
 * @param pageable the page info
 * @param privilegeKey the privilege key
 * @return permitted entities
 */
public Page<XmEntity> searchByQueryAndTypeKey(String query,String typeKey,Pageable pageable,String privilegeKey){
  String permittedQuery=buildPermittedQuery(query,privilegeKey);
  val typeKeyQuery=boolQuery().should(matchQuery(TYPE_KEY,typeKey)).minimumNumberShouldMatch(1);
  val esQuery=isEmpty(permittedQuery) ? boolQuery().must(typeKeyQuery) : typeKeyQuery.must(simpleQueryStringQuery(permittedQuery));
  log.debug(""String_Node_Str"",esQuery);
  NativeSearchQuery queryBuilder=new NativeSearchQueryBuilder().withQuery(esQuery).withPageable(pageable).build();
  return getElasticsearchTemplate().queryForPage(queryBuilder,XmEntity.class);
}"
40007,"private void createTenant(Tenant tenant){
  forEachDomainDocument(beanDefinition -> {
    try {
      Class<?> cl=Class.forName(beanDefinition.getBeanClassName());
      elasticsearchTemplate.createIndex(cl);
    }
 catch (    ClassNotFoundException e) {
      log.error(""String_Node_Str"",beanDefinition.getBeanClassName(),tenant.getTenantKey());
      throw new IllegalStateException(e);
    }
  }
);
}","private void createTenant(Tenant tenant){
  forEachDomainDocument(beanDefinition -> {
    try {
      Class<?> cl=Class.forName(beanDefinition.getBeanClassName());
      elasticsearchTemplate.createIndex(cl);
      elasticsearchTemplate.putMapping(cl);
    }
 catch (    ClassNotFoundException e) {
      log.error(""String_Node_Str"",beanDefinition.getBeanClassName(),tenant.getTenantKey());
      throw new IllegalStateException(e);
    }
  }
);
}"
40008,"@After public void afterTest(){
  tenantContextHolder.getPrivilegedContext().destroyCurrentContext();
}","@After public void afterTest(){
  elasticsearchTemplate.deleteIndex(XmEntity.class);
  tenantContextHolder.getPrivilegedContext().destroyCurrentContext();
}"
40009,"@BeforeTransaction public void beforeTransaction(){
  TenantContextUtils.setTenant(tenantContextHolder,""String_Node_Str"");
  elasticsearchTemplate.createIndex(XmEntity.class);
  elasticsearchTemplate.putMapping(XmEntity.class);
  MockitoAnnotations.initMocks(this);
  when(authContextHolder.getContext()).thenReturn(context);
  when(context.getRequiredUserKey()).thenReturn(""String_Node_Str"");
  String tenantName=getRequiredTenantKeyValue(tenantContextHolder);
  String config=getXmEntityTemplatesSpec(tenantName);
  String key=applicationProperties.getSpecificationTemplatesPathPattern().replace(""String_Node_Str"",tenantName);
  xmEntityTemplatesSpecService.onRefresh(key,config);
  xmEntityService=new XmEntityServiceImpl(xmEntitySpecService,xmEntityTemplatesSpecService,xmEntityRepository,xmEntitySearchRepository,lifecycleService,null,profileService,linkService,storageService,attachmentService,permittedSearchRepository,startUpdateDateGenerationStrategy,authContextHolder,objectMapper,tenantConfigService);
  xmEntityService.setSelf(xmEntityService);
  lepManager.beginThreadContext(ctx -> {
    ctx.setValue(THREAD_CONTEXT_KEY_TENANT_CONTEXT,tenantContextHolder.getContext());
    ctx.setValue(THREAD_CONTEXT_KEY_AUTH_CONTEXT,authContextHolder.getContext());
  }
);
}","@BeforeTransaction public void beforeTransaction(){
  TenantContextUtils.setTenant(tenantContextHolder,""String_Node_Str"");
  elasticsearchTemplate.deleteIndex(XmEntity.class);
  elasticsearchTemplate.createIndex(XmEntity.class);
  elasticsearchTemplate.putMapping(XmEntity.class);
  MockitoAnnotations.initMocks(this);
  when(authContextHolder.getContext()).thenReturn(context);
  when(context.getRequiredUserKey()).thenReturn(""String_Node_Str"");
  String tenantName=getRequiredTenantKeyValue(tenantContextHolder);
  String config=getXmEntityTemplatesSpec(tenantName);
  String key=applicationProperties.getSpecificationTemplatesPathPattern().replace(""String_Node_Str"",tenantName);
  xmEntityTemplatesSpecService.onRefresh(key,config);
  xmEntityService=new XmEntityServiceImpl(xmEntitySpecService,xmEntityTemplatesSpecService,xmEntityRepository,xmEntitySearchRepository,lifecycleService,null,profileService,linkService,storageService,attachmentService,permittedSearchRepository,startUpdateDateGenerationStrategy,authContextHolder,objectMapper,tenantConfigService);
  xmEntityService.setSelf(xmEntityService);
  lepManager.beginThreadContext(ctx -> {
    ctx.setValue(THREAD_CONTEXT_KEY_TENANT_CONTEXT,tenantContextHolder.getContext());
    ctx.setValue(THREAD_CONTEXT_KEY_AUTH_CONTEXT,authContextHolder.getContext());
  }
);
}"
40010,"/** 
 * PUT  /locations : Updates an existing location.
 * @param location the location to update
 * @return the ResponseEntity with status 200 (OK) and with body the updated location,or with status 400 (Bad Request) if the location is not valid, or with status 500 (Internal Server Error) if the location couldn't be updated
 * @throws URISyntaxException if the Location URI syntax is incorrect
 */
@PutMapping(""String_Node_Str"") @Timed @PreAuthorize(""String_Node_Str"") public ResponseEntity<Location> updateLocation(@Valid @RequestBody Location location) throws URISyntaxException {
  if (location.getId() == null) {
    return this.locationResource.createLocation(location);
  }
  Location result=locationRepository.save(location);
  locationSearchRepository.save(result);
  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME,location.getId().toString())).body(result);
}","/** 
 * PUT  /locations : Updates an existing location.
 * @param location the location to update
 * @return the ResponseEntity with status 200 (OK) and with body the updated location,or with status 400 (Bad Request) if the location is not valid, or with status 500 (Internal Server Error) if the location couldn't be updated
 * @throws URISyntaxException if the Location URI syntax is incorrect
 */
@PutMapping(""String_Node_Str"") @Timed @PreAuthorize(""String_Node_Str"") public ResponseEntity<Location> updateLocation(@Valid @RequestBody Location location) throws URISyntaxException {
  if (location.getId() == null) {
    return this.locationResource.createLocation(location);
  }
  Location result=locationService.save(location);
  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME,location.getId().toString())).body(result);
}"
40011,"/** 
 * POST  /locations : Create a new location.
 * @param location the location to create
 * @return the ResponseEntity with status 201 (Created) and with body the new location, or with status 400 (Bad Request) if the location has already an ID
 * @throws URISyntaxException if the Location URI syntax is incorrect
 */
@PostMapping(""String_Node_Str"") @Timed @PreAuthorize(""String_Node_Str"") public ResponseEntity<Location> createLocation(@Valid @RequestBody Location location) throws URISyntaxException {
  if (location.getId() != null) {
    throw new BusinessException(ErrorConstants.ERR_BUSINESS_IDEXISTS,""String_Node_Str"");
  }
  Location result=locationRepository.save(location);
  locationSearchRepository.save(result);
  return ResponseEntity.created(new URI(""String_Node_Str"" + result.getId())).headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME,result.getId().toString())).body(result);
}","/** 
 * POST  /locations : Create a new location.
 * @param location the location to create
 * @return the ResponseEntity with status 201 (Created) and with body the new location, or with status 400 (Bad Request) if the location has already an ID
 * @throws URISyntaxException if the Location URI syntax is incorrect
 */
@PostMapping(""String_Node_Str"") @Timed @PreAuthorize(""String_Node_Str"") public ResponseEntity<Location> createLocation(@Valid @RequestBody Location location) throws URISyntaxException {
  if (location.getId() != null) {
    throw new BusinessException(ErrorConstants.ERR_BUSINESS_IDEXISTS,""String_Node_Str"");
  }
  Location result=locationService.save(location);
  return ResponseEntity.created(new URI(""String_Node_Str"" + result.getId())).headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME,result.getId().toString())).body(result);
}"
40012,"/** 
 * Save a functionContext.
 * @param functionContext the entity to save
 * @return the persisted entity
 */
public FunctionContext save(FunctionContext functionContext){
  startUpdateDateGenerationStrategy.preProcessStartUpdateDates(functionContext,functionContext.getId(),functionContextRepository,FunctionContext::setStartDate,FunctionContext::getStartDate,FunctionContext::setUpdateDate);
  functionContext.setXmEntity(xmEntityRepository.getOne(functionContext.getXmEntity().getId()));
  FunctionContext result=functionContextRepository.save(functionContext);
  functionContextSearchRepository.save(result);
  return result;
}","/** 
 * Save a functionContext.
 * @param functionContext the entity to save
 * @return the persisted entity
 */
public FunctionContext save(FunctionContext functionContext){
  startUpdateDateGenerationStrategy.preProcessStartUpdateDates(functionContext,functionContext.getId(),functionContextRepository,FunctionContext::setStartDate,FunctionContext::getStartDate,FunctionContext::setUpdateDate);
  if (functionContext.getXmEntity() != null) {
    functionContext.setXmEntity(xmEntityRepository.getOne(functionContext.getXmEntity().getId()));
  }
  FunctionContext result=functionContextRepository.save(functionContext);
  functionContextSearchRepository.save(result);
  return result;
}"
40013,"@Override public Object findById(Object id){
  return findOne(IdOrKey.of((String)id));
}","@Override public Object findById(Object id){
  return findOne(IdOrKey.of(String.valueOf(id)));
}"
40014,"@SuppressWarnings(""String_Node_Str"") public Object apply(List args){
  if (args.size() > 1) {
    List firstArg=(List)args.get(0);
    return firstArg.subList(1,firstArg.size());
  }
 else {
    return Environment.FALSE;
  }
}","@SuppressWarnings(""String_Node_Str"") public Object apply(List args){
  if (args.size() == 1) {
    List firstArg=(List)args.get(0);
    return firstArg.subList(1,firstArg.size());
  }
 else {
    return Environment.FALSE;
  }
}"
40015,"public static String prelude(String namespace){
  StringBuilder builder=new StringBuilder();
  builder.append(jsNamespace + ""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  return builder.toString();
}","public static String prelude(String namespace){
  StringBuilder builder=new StringBuilder();
  builder.append(jsNamespace + ""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  builder.append(""String_Node_Str"");
  return builder.toString();
}"
40016,"public void onClick(View v){
  v.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
  SharedPreferences sharedPreferences=getActivity().getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
switch (v.getId()) {
case R.id.fragment_signup_signup:
    String txtFirstName=""String_Node_Str"";
  String txtLastName=""String_Node_Str"";
String txtEmail=""String_Node_Str"";
String txtPass=""String_Node_Str"";
String txtOrg=""String_Node_Str"";
String txtPhone=""String_Node_Str"";
boolean validForm=true;
EditText signupFirstName=(EditText)getActivity().findViewById(R.id.fragment_signup_first_name);
EditText signupLastName=(EditText)getActivity().findViewById(R.id.fragment_signup_last_name);
EditText signupEmail=(EditText)getActivity().findViewById(R.id.fragment_signup_email_address);
EditText signupPassword=(EditText)getActivity().findViewById(R.id.fragment_signup_password);
EditText signupPasswordConfirm=(EditText)getActivity().findViewById(R.id.fragment_signup_password_confirm);
EditText signupOrganization=(EditText)getActivity().findViewById(R.id.fragment_signup_organization);
EditText signupPhone=(EditText)getActivity().findViewById(R.id.fragment_signup_phone_number);
txtOrg=signupOrganization.getText().toString();
txtPhone=signupPhone.getText().toString();
CheckBox signupPrivacyPolicy=(CheckBox)getActivity().findViewById(R.id.fragment_signup_privacy_policy_checkbox);
if (signupPassword.getText().length() == 0) {
signupPassword.setError(""String_Node_Str"");
signupPassword.requestFocus();
validForm=false;
}
 else if (!signupPassword.getText().equals(signupPasswordConfirm.getText())) {
signupPasswordConfirm.setError(""String_Node_Str"");
signupPasswordConfirm.requestFocus();
validForm=false;
}
 else {
txtPass=signupPassword.getText().toString();
}
if (signupEmail.getText().length() == 0) {
signupEmail.setError(""String_Node_Str"");
signupEmail.requestFocus();
validForm=false;
}
 else if (!android.util.Patterns.EMAIL_ADDRESS.matcher(signupEmail.getText()).matches()) {
signupEmail.setError(""String_Node_Str"");
signupEmail.requestFocus();
validForm=false;
}
 else {
txtEmail=signupEmail.getText().toString();
sharedPreferences.edit().putString(ValueHelper.USERNAME,txtEmail).commit();
}
if (signupLastName.getText().length() == 0) {
signupLastName.setError(""String_Node_Str"");
signupLastName.requestFocus();
validForm=false;
}
 else {
txtLastName=signupLastName.getText().toString();
}
if (signupFirstName.getText().length() == 0) {
signupFirstName.setError(""String_Node_Str"");
signupFirstName.requestFocus();
validForm=false;
}
 else {
txtFirstName=signupFirstName.getText().toString();
}
if (!signupPrivacyPolicy.isChecked()) {
signupPrivacyPolicy.setError(""String_Node_Str"");
signupPrivacyPolicy.requestFocus();
validForm=false;
}
if (validForm) {
InputMethodManager inputManager=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
inputManager.hideSoftInputFromWindow(signupEmail.getWindowToken(),0);
RegisterRequest registerRequest=new RegisterRequest();
registerRequest.setFirstName(txtFirstName);
registerRequest.setLastName(txtLastName);
registerRequest.setClientId(txtEmail);
registerRequest.setClientSecret(txtPass);
registerRequest.setOrganization(txtOrg);
registerRequest.setPhone(txtPhone);
MainActivity.progressDialog=new ProgressDialog(getActivity());
MainActivity.progressDialog.setCancelable(false);
MainActivity.progressDialog.setMessage(getActivity().getString(R.string.sign_up_in_progress));
MainActivity.progressDialog.show();
final String finalFirstName=txtFirstName;
final String finalLastName=txtLastName;
Call<TokenResponse> register=Api.instance().getApi().register(registerRequest);
register.enqueue(new Callback<TokenResponse>(){
@Override public void onResponse(Call<TokenResponse> call,Response<TokenResponse> response){
MainActivity.progressDialog.cancel();
if (response.isSuccessful()) {
SharedPreferences mSharedPreferences=getActivity().getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
mSharedPreferences.edit().putString(ValueHelper.TOKEN,response.body().getToken()).commit();
Api.instance().setAuthToken(response.body().getToken());
((MainActivity)getActivity()).transitionToMapsFragment();
}
}
@Override public void onFailure(Call<TokenResponse> call,Throwable t){
MainActivity.progressDialog.cancel();
Toast.makeText(getActivity(),t.getMessage(),Toast.LENGTH_SHORT).show();
Timber.tag(TAG).e(t.getMessage());
}
}
);
}
break;
case R.id.fragment_signup_login_already_have_account:
sharedPreferences.edit().putBoolean(ValueHelper.SHOW_SIGNUP_FRAGMENT,false).commit();
sharedPreferences.edit().putBoolean(ValueHelper.SHOW_LOGIN_FRAGMENT,true).commit();
LoginFragment fragment=new LoginFragment();
Bundle bundle=getActivity().getIntent().getExtras();
fragment.setArguments(bundle);
FragmentTransaction fragmentTransaction1=getActivity().getSupportFragmentManager().beginTransaction();
fragmentTransaction1.replace(R.id.container_fragment,fragment).commit();
break;
}
}","public void onClick(View v){
  v.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
  SharedPreferences sharedPreferences=getActivity().getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
switch (v.getId()) {
case R.id.fragment_signup_signup:
    String txtFirstName=""String_Node_Str"";
  String txtLastName=""String_Node_Str"";
String txtEmail=""String_Node_Str"";
String txtPass=""String_Node_Str"";
String txtPassConfirm=""String_Node_Str"";
String txtOrg=""String_Node_Str"";
String txtPhone=""String_Node_Str"";
boolean validForm=true;
EditText signupFirstName=(EditText)getActivity().findViewById(R.id.fragment_signup_first_name);
EditText signupLastName=(EditText)getActivity().findViewById(R.id.fragment_signup_last_name);
EditText signupEmail=(EditText)getActivity().findViewById(R.id.fragment_signup_email_address);
EditText signupPassword=(EditText)getActivity().findViewById(R.id.fragment_signup_password);
EditText signupPasswordConfirm=(EditText)getActivity().findViewById(R.id.fragment_signup_password_confirm);
EditText signupOrganization=(EditText)getActivity().findViewById(R.id.fragment_signup_organization);
EditText signupPhone=(EditText)getActivity().findViewById(R.id.fragment_signup_phone_number);
txtOrg=signupOrganization.getText().toString();
txtPhone=signupPhone.getText().toString();
txtPass=signupPassword.getText().toString().trim();
txtPassConfirm=signupPasswordConfirm.getText().toString().trim();
CheckBox signupPrivacyPolicy=(CheckBox)getActivity().findViewById(R.id.fragment_signup_privacy_policy_checkbox);
if (signupPassword.getText().length() == 0) {
signupPassword.setError(""String_Node_Str"");
signupPassword.requestFocus();
validForm=false;
}
 else if (!txtPass.equals(txtPassConfirm)) {
signupPasswordConfirm.setError(""String_Node_Str"");
signupPasswordConfirm.requestFocus();
validForm=false;
}
 else {
txtPass=signupPassword.getText().toString();
}
if (signupEmail.getText().length() == 0) {
signupEmail.setError(""String_Node_Str"");
signupEmail.requestFocus();
validForm=false;
}
 else if (!android.util.Patterns.EMAIL_ADDRESS.matcher(signupEmail.getText()).matches()) {
signupEmail.setError(""String_Node_Str"");
signupEmail.requestFocus();
validForm=false;
}
 else {
txtEmail=signupEmail.getText().toString();
sharedPreferences.edit().putString(ValueHelper.USERNAME,txtEmail).commit();
}
if (signupLastName.getText().length() == 0) {
signupLastName.setError(""String_Node_Str"");
signupLastName.requestFocus();
validForm=false;
}
 else {
txtLastName=signupLastName.getText().toString();
}
if (signupFirstName.getText().length() == 0) {
signupFirstName.setError(""String_Node_Str"");
signupFirstName.requestFocus();
validForm=false;
}
 else {
txtFirstName=signupFirstName.getText().toString();
}
if (!signupPrivacyPolicy.isChecked()) {
signupPrivacyPolicy.setError(""String_Node_Str"");
signupPrivacyPolicy.requestFocus();
validForm=false;
}
if (validForm) {
InputMethodManager inputManager=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
inputManager.hideSoftInputFromWindow(signupEmail.getWindowToken(),0);
RegisterRequest registerRequest=new RegisterRequest();
registerRequest.setFirstName(txtFirstName);
registerRequest.setLastName(txtLastName);
registerRequest.setClientId(txtEmail);
registerRequest.setClientSecret(txtPass);
registerRequest.setOrganization(txtOrg);
registerRequest.setPhone(txtPhone);
MainActivity.progressDialog=new ProgressDialog(getActivity());
MainActivity.progressDialog.setCancelable(false);
MainActivity.progressDialog.setMessage(getActivity().getString(R.string.sign_up_in_progress));
MainActivity.progressDialog.show();
final String finalFirstName=txtFirstName;
final String finalLastName=txtLastName;
Call<TokenResponse> register=Api.instance().getApi().register(registerRequest);
register.enqueue(new Callback<TokenResponse>(){
@Override public void onResponse(Call<TokenResponse> call,Response<TokenResponse> response){
MainActivity.progressDialog.cancel();
if (response.isSuccessful()) {
SharedPreferences mSharedPreferences=getActivity().getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
mSharedPreferences.edit().putString(ValueHelper.TOKEN,response.body().getToken()).commit();
Api.instance().setAuthToken(response.body().getToken());
((MainActivity)getActivity()).transitionToMapsFragment();
}
}
@Override public void onFailure(Call<TokenResponse> call,Throwable t){
MainActivity.progressDialog.cancel();
Toast.makeText(getActivity(),t.getMessage(),Toast.LENGTH_SHORT).show();
Timber.tag(TAG).e(t.getMessage());
}
}
);
}
break;
case R.id.fragment_signup_login_already_have_account:
sharedPreferences.edit().putBoolean(ValueHelper.SHOW_SIGNUP_FRAGMENT,false).commit();
sharedPreferences.edit().putBoolean(ValueHelper.SHOW_LOGIN_FRAGMENT,true).commit();
LoginFragment fragment=new LoginFragment();
Bundle bundle=getActivity().getIntent().getExtras();
fragment.setArguments(bundle);
FragmentTransaction fragmentTransaction1=getActivity().getSupportFragmentManager().beginTransaction();
fragmentTransaction1.replace(R.id.container_fragment,fragment).commit();
break;
}
}"
40017,"public void onPictureTaken(byte[] data,Camera camera){
  saveImg.setVisibility(View.VISIBLE);
  reloadButton.setVisibility(View.VISIBLE);
  captureButton.setVisibility(View.INVISIBLE);
  mCurrentPictureData=data;
  tmpImageFile=null;
  try {
    tmpImageFile=File.createTempFile(""String_Node_Str"",null,getCacheDir());
  }
 catch (  IOException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
  try {
    FileOutputStream fo=new FileOutputStream(tmpImageFile);
    fo.write(data);
    fo.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  setPic();
  safeToTakePicture=true;
}","public void onPictureTaken(byte[] data,Camera camera){
  captureButton.setVisibility(View.INVISIBLE);
  cancelImg.setVisibility(View.INVISIBLE);
  mCurrentPictureData=data;
  tmpImageFile=null;
  try {
    tmpImageFile=File.createTempFile(""String_Node_Str"",null,getCacheDir());
  }
 catch (  IOException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
  try {
    FileOutputStream fo=new FileOutputStream(tmpImageFile);
    fo.write(data);
    fo.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  setPic();
  safeToTakePicture=true;
  savePicture();
  releaseCamera();
}"
40018,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.camera_preview);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO) {
    mAlbumStorageDirFactory=new FroyoAlbumDirFactory();
  }
 else {
    mAlbumStorageDirFactory=new BaseAlbumDirFactory();
  }
  mImageView=(ImageView)findViewById(R.id.camera_preview_taken);
  saveImg=(ImageButton)findViewById(R.id.camera_preview_ok);
  cancelImg=(ImageButton)findViewById(R.id.camera_preview_cancel);
  captureButton=(ImageButton)findViewById(R.id.button_capture);
  reloadButton=(ImageButton)findViewById(R.id.camera_preview_reload);
  captureButton.setOnClickListener(CameraActivity.this);
  cancelImg.setOnClickListener(CameraActivity.this);
  saveImg.setOnClickListener(CameraActivity.this);
  reloadButton.setOnClickListener(CameraActivity.this);
  openCameraTask=new OpenCameraTask().execute(new String[]{});
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.camera_preview);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO) {
    mAlbumStorageDirFactory=new FroyoAlbumDirFactory();
  }
 else {
    mAlbumStorageDirFactory=new BaseAlbumDirFactory();
  }
  mImageView=(ImageView)findViewById(R.id.camera_preview_taken);
  cancelImg=(ImageButton)findViewById(R.id.camera_preview_cancel);
  captureButton=(ImageButton)findViewById(R.id.button_capture);
  captureButton.setOnClickListener(CameraActivity.this);
  cancelImg.setOnClickListener(CameraActivity.this);
  openCameraTask=new OpenCameraTask().execute(new String[]{});
}"
40019,"private void releaseCamera(){
  if (mCamera != null) {
    mCamera.release();
    mCamera=null;
  }
}","private void releaseCamera(){
  if (mCamera != null) {
    mCamera.release();
    mCamera=null;
    Timber.d(""String_Node_Str"");
  }
}"
40020,"public void onClick(View v){
  v.setHapticFeedbackEnabled(true);
switch (v.getId()) {
case R.id.button_capture:
    if (safeToTakePicture) {
      safeToTakePicture=false;
      mCamera.takePicture(null,null,CameraActivity.this);
      Log.e(""String_Node_Str"",""String_Node_Str"");
    }
  break;
case R.id.camera_preview_cancel:
setResult(Activity.RESULT_CANCELED);
finish();
break;
case R.id.camera_preview_reload:
mCamera.startPreview();
FrameLayout preview=(FrameLayout)findViewById(R.id.camera_preview);
preview.removeAllViews();
preview.addView(mPreview);
mImageView.setImageDrawable(null);
reloadButton.setVisibility(View.INVISIBLE);
captureButton.setVisibility(View.VISIBLE);
saveImg.setVisibility(View.INVISIBLE);
break;
case R.id.camera_preview_ok:
File pictureFile=null;
try {
pictureFile=setUpPhotoFile();
mCurrentPhotoPath=pictureFile.getAbsolutePath();
}
 catch (IOException e) {
e.printStackTrace();
pictureFile=null;
mCurrentPhotoPath=null;
}
boolean saved=true;
try {
FileOutputStream fos=new FileOutputStream(pictureFile);
fos.write(mCurrentPictureData);
fos.close();
galleryAddPic();
}
 catch (FileNotFoundException e) {
Log.d(TAG,""String_Node_Str"" + e.getMessage());
saved=false;
}
catch (IOException e) {
Log.d(TAG,""String_Node_Str"" + e.getMessage());
saved=false;
}
catch (Exception e) {
Log.d(TAG,""String_Node_Str"" + e.getMessage());
saved=false;
}
if (saved) {
Intent data=new Intent();
data.putExtra(ValueHelper.TAKEN_IMAGE_PATH,mCurrentPhotoPath);
setResult(Activity.RESULT_OK,data);
}
 else {
setResult(Activity.RESULT_CANCELED);
}
finish();
break;
default :
break;
}
}","public void onClick(View v){
  v.setHapticFeedbackEnabled(true);
  if (safeToTakePicture) {
    safeToTakePicture=false;
    mCamera.takePicture(null,null,CameraActivity.this);
    Log.e(""String_Node_Str"",""String_Node_Str"");
  }
}"
40021,"protected void onPreExecute(){
  cancelImg.setVisibility(View.INVISIBLE);
  captureButton.setVisibility(View.INVISIBLE);
  saveImg.setVisibility(View.INVISIBLE);
}","protected void onPreExecute(){
  cancelImg.setVisibility(View.INVISIBLE);
  captureButton.setVisibility(View.INVISIBLE);
}"
40022,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  if (view != null) {
    ViewGroup parent=(ViewGroup)view.getParent();
    if (parent != null)     parent.removeView(view);
  }
  try {
    view=inflater.inflate(R.layout.fragment_map,container,false);
  }
 catch (  InflateException e) {
  }
  View v=view;
  mSharedPreferences=getActivity().getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
  ((TextView)getActivity().findViewById(R.id.actionbar_title)).setText(R.string.map);
  Button newTreeBtn=(Button)v.findViewById(R.id.fragment_map_new_tree);
  newTreeBtn.setOnClickListener(MapsFragment.this);
  Button dataBtn=(Button)v.findViewById(R.id.fragment_map_data);
  dataBtn.setOnClickListener(MapsFragment.this);
  Button updateTreeBtn=(Button)v.findViewById(R.id.fragment_map_update_tree);
  updateTreeBtn.setOnClickListener(MapsFragment.this);
  ((SupportMapFragment)getChildFragmentManager().findFragmentById(R.id.map)).getMapAsync(this);
  TextView mapGpsAccuracy=((TextView)v.findViewById(R.id.fragment_map_gps_accuracy));
  TextView mapGpsAccuracyValue=((TextView)v.findViewById(R.id.fragment_map_gps_accuracy_value));
  int minAccuracy=mSharedPreferences.getInt(ValueHelper.MIN_ACCURACY_GLOBAL_SETTING,ValueHelper.MIN_ACCURACY_DEFAULT_SETTING);
  if (mapGpsAccuracy != null) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    if (MainActivity.mCurrentLocation != null) {
      Log.i(""String_Node_Str"",""String_Node_Str"");
      if (MainActivity.mCurrentLocation.hasAccuracy() && (MainActivity.mCurrentLocation.getAccuracy() < minAccuracy)) {
        Log.i(""String_Node_Str"",""String_Node_Str"");
        mapGpsAccuracy.setTextColor(Color.GREEN);
        mapGpsAccuracyValue.setTextColor(Color.GREEN);
        mapGpsAccuracyValue.setText(Integer.toString(Math.round(MainActivity.mCurrentLocation.getAccuracy())) + ""String_Node_Str"" + getResources().getString(R.string.meters));
        MainActivity.mAllowNewTreeOrUpdate=true;
      }
 else {
        Log.i(""String_Node_Str"",""String_Node_Str"");
        mapGpsAccuracy.setTextColor(Color.RED);
        MainActivity.mAllowNewTreeOrUpdate=false;
        if (MainActivity.mCurrentLocation.hasAccuracy()) {
          mapGpsAccuracyValue.setTextColor(Color.RED);
          mapGpsAccuracyValue.setText(Integer.toString(Math.round(MainActivity.mCurrentLocation.getAccuracy())) + ""String_Node_Str"" + getResources().getString(R.string.meters));
        }
 else {
          mapGpsAccuracyValue.setTextColor(Color.RED);
          mapGpsAccuracyValue.setText(""String_Node_Str"");
        }
      }
    }
 else {
      Log.i(""String_Node_Str"",""String_Node_Str"");
      if (ActivityCompat.checkSelfPermission(getActivity(),android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getActivity(),android.Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
        showLocationAlertDialog();
      }
      mapGpsAccuracy.setTextColor(Color.RED);
      mapGpsAccuracyValue.setTextColor(Color.RED);
      mapGpsAccuracyValue.setText(""String_Node_Str"");
      MainActivity.mAllowNewTreeOrUpdate=false;
    }
  }
  return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  if (view != null) {
    ViewGroup parent=(ViewGroup)view.getParent();
    if (parent != null)     parent.removeView(view);
  }
  try {
    view=inflater.inflate(R.layout.fragment_map,container,false);
  }
 catch (  InflateException e) {
  }
  View v=view;
  mSharedPreferences=getActivity().getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
  ((TextView)getActivity().findViewById(R.id.actionbar_title)).setText(R.string.map);
  Button newTreeBtn=(Button)v.findViewById(R.id.fragment_map_new_tree);
  newTreeBtn.setOnClickListener(MapsFragment.this);
  Button dataBtn=(Button)v.findViewById(R.id.fragment_map_data);
  dataBtn.setOnClickListener(MapsFragment.this);
  Button updateTreeBtn=(Button)v.findViewById(R.id.fragment_map_update_tree);
  updateTreeBtn.setOnClickListener(MapsFragment.this);
  ((SupportMapFragment)getChildFragmentManager().findFragmentById(R.id.map)).getMapAsync(this);
  TextView mapGpsAccuracy=((TextView)v.findViewById(R.id.fragment_map_gps_accuracy));
  TextView mapGpsAccuracyValue=((TextView)v.findViewById(R.id.fragment_map_gps_accuracy_value));
  int minAccuracy=mSharedPreferences.getInt(ValueHelper.MIN_ACCURACY_GLOBAL_SETTING,ValueHelper.MIN_ACCURACY_DEFAULT_SETTING);
  if (mapGpsAccuracy != null) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    if (MainActivity.mCurrentLocation != null) {
      Log.i(""String_Node_Str"",""String_Node_Str"");
      if (MainActivity.mCurrentLocation.hasAccuracy() && (MainActivity.mCurrentLocation.getAccuracy() < minAccuracy)) {
        Log.i(""String_Node_Str"",""String_Node_Str"");
        mapGpsAccuracy.setTextColor(Color.GREEN);
        mapGpsAccuracyValue.setTextColor(Color.GREEN);
        mapGpsAccuracyValue.setText(Integer.toString(Math.round(MainActivity.mCurrentLocation.getAccuracy())) + ""String_Node_Str"" + getResources().getString(R.string.meters));
        MainActivity.mAllowNewTreeOrUpdate=true;
      }
 else {
        Log.i(""String_Node_Str"",""String_Node_Str"");
        mapGpsAccuracy.setTextColor(Color.RED);
        MainActivity.mAllowNewTreeOrUpdate=false;
        if (MainActivity.mCurrentLocation.hasAccuracy()) {
          mapGpsAccuracyValue.setTextColor(Color.RED);
          mapGpsAccuracyValue.setText(Integer.toString(Math.round(MainActivity.mCurrentLocation.getAccuracy())) + ""String_Node_Str"" + getResources().getString(R.string.meters));
        }
 else {
          mapGpsAccuracyValue.setTextColor(Color.RED);
          mapGpsAccuracyValue.setText(""String_Node_Str"");
        }
      }
    }
 else {
      Log.i(""String_Node_Str"",""String_Node_Str"");
      if (ActivityCompat.checkSelfPermission(getActivity(),android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getActivity(),android.Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
        requestPermissions(new String[]{android.Manifest.permission.ACCESS_COARSE_LOCATION},Permissions.MY_PERMISSION_ACCESS_COURSE_LOCATION);
      }
      mapGpsAccuracy.setTextColor(Color.RED);
      mapGpsAccuracyValue.setTextColor(Color.RED);
      mapGpsAccuracyValue.setText(""String_Node_Str"");
      MainActivity.mAllowNewTreeOrUpdate=false;
    }
  }
  return v;
}"
40023,"@Override public void onReceive(Context context,Intent intent){
  if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) {
    for (    String file : context.getFilesDir().list()) {
      ProcessRunner pr=new ProcessRunner();
      String fullFilePath=context.getFilesDir().toString() + ""String_Node_Str"" + file;
      int exitCode=pr.Run(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",fullFilePath});
      if (exitCode == 0) {
        Log.d(TAG,""String_Node_Str"" + file);
      }
 else {
        Log.d(TAG,String.format(""String_Node_Str"",file,exitCode,pr.getStdout(),pr.getStderr()));
      }
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) {
    for (    String file : context.getFilesDir().list()) {
      ProcessRunner pr=new ProcessRunner();
      String fullFilePath=context.getFilesDir().toString() + ""String_Node_Str"" + file;
      int exitCode=pr.Run(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + fullFilePath});
      if (exitCode == 0) {
        Log.d(TAG,""String_Node_Str"" + file);
      }
 else {
        Log.d(TAG,String.format(""String_Node_Str"",file,exitCode,pr.getStdout(),pr.getStderr()));
      }
    }
  }
}"
40024,"private void setupSwipeLayout(){
  Utils.print(TAG,""String_Node_Str"");
  mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      connected=Utils.isInternetConnected(mContext);
      if (connected)       getNews(mSource,mPage=1);
 else {
        if (mListener != null)         mListener.showSnackBar(R.string.response_fail);
        if (mSwipeRefreshLayout != null && mSwipeRefreshLayout.isRefreshing())         mSwipeRefreshLayout.setRefreshing(false);
      }
    }
  }
);
}","private void setupSwipeLayout(){
  Utils.print(TAG,""String_Node_Str"");
  mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){
    @Override public void onRefresh(){
      connected=Utils.isInternetConnected(mContext);
      if (connected)       if (mType == 1)       refreshRec();
 else       getNews(mSource,mPage=1);
 else {
        if (mListener != null)         mListener.showSnackBar(R.string.response_fail);
        if (mSwipeRefreshLayout != null && mSwipeRefreshLayout.isRefreshing())         mSwipeRefreshLayout.setRefreshing(false);
      }
    }
  }
);
}"
40025,"@Override public void onRefresh(){
  connected=Utils.isInternetConnected(mContext);
  if (connected)   getNews(mSource,mPage=1);
 else {
    if (mListener != null)     mListener.showSnackBar(R.string.response_fail);
    if (mSwipeRefreshLayout != null && mSwipeRefreshLayout.isRefreshing())     mSwipeRefreshLayout.setRefreshing(false);
  }
}","@Override public void onRefresh(){
  connected=Utils.isInternetConnected(mContext);
  if (connected)   if (mType == 1)   refreshRec();
 else   getNews(mSource,mPage=1);
 else {
    if (mListener != null)     mListener.showSnackBar(R.string.response_fail);
    if (mSwipeRefreshLayout != null && mSwipeRefreshLayout.isRefreshing())     mSwipeRefreshLayout.setRefreshing(false);
  }
}"
40026,"@Override public void onResponse(@NonNull Call<Register> call,@NonNull Response<Register> response){
  Utils.print(TAG,""String_Node_Str"");
  Utils.print(TAG,""String_Node_Str"" + response.raw().request().url());
  Utils.print(TAG,""String_Node_Str"" + response.code());
  if (response.isSuccessful()) {
    Intent intent=new Intent(mContext,LoginActivity.class);
    Bundle bundle=new Bundle();
    bundle.putString(""String_Node_Str"",response.body().getMessage());
    intent.putExtras(bundle);
    startActivity(intent);
    finish();
  }
 else {
    Utils.print(TAG,""String_Node_Str"" + response.message(),Log.ERROR);
    Utils.showSnackbar(mCoordinatorLayout,mContext,""String_Node_Str"",true);
  }
}","@Override public void onResponse(@NonNull Call<DefaultMsg> call,@NonNull Response<DefaultMsg> response){
  Utils.print(TAG,""String_Node_Str"");
  Utils.print(TAG,""String_Node_Str"" + response.raw().request().url());
  Utils.print(TAG,""String_Node_Str"" + response.code());
  if (response.isSuccessful()) {
    Intent intent=new Intent(mContext,LoginActivity.class);
    Bundle bundle=new Bundle();
    bundle.putString(""String_Node_Str"",response.body().getMessage());
    intent.putExtras(bundle);
    startActivity(intent);
    finish();
  }
 else {
    Utils.print(TAG,""String_Node_Str"" + response.message(),Log.ERROR);
    Utils.showSnackbar(mCoordinatorLayout,mContext,""String_Node_Str"",true);
  }
}"
40027,"@Override public void onFailure(@NonNull Call<Register> call,@NonNull Throwable t){
  Utils.print(TAG,""String_Node_Str"",Log.ERROR);
  Utils.print(TAG,t.toString(),Log.ERROR);
  Utils.showSnackbar(mCoordinatorLayout,mContext,R.string.response_fail,true);
}","@Override public void onFailure(@NonNull Call<DefaultMsg> call,@NonNull Throwable t){
  Utils.print(TAG,""String_Node_Str"",Log.ERROR);
  Utils.print(TAG,t.toString(),Log.ERROR);
  Utils.showSnackbar(mCoordinatorLayout,mContext,R.string.response_fail,true);
}"
40028,"private void register(String fullName,String username,String email,String password){
  Utils.print(TAG,""String_Node_Str"");
  getApi().register(email,password,username,fullName).enqueue(new Callback<Register>(){
    @Override public void onResponse(    @NonNull Call<Register> call,    @NonNull Response<Register> response){
      Utils.print(TAG,""String_Node_Str"");
      Utils.print(TAG,""String_Node_Str"" + response.raw().request().url());
      Utils.print(TAG,""String_Node_Str"" + response.code());
      if (response.isSuccessful()) {
        Intent intent=new Intent(mContext,LoginActivity.class);
        Bundle bundle=new Bundle();
        bundle.putString(""String_Node_Str"",response.body().getMessage());
        intent.putExtras(bundle);
        startActivity(intent);
        finish();
      }
 else {
        Utils.print(TAG,""String_Node_Str"" + response.message(),Log.ERROR);
        Utils.showSnackbar(mCoordinatorLayout,mContext,""String_Node_Str"",true);
      }
    }
    @Override public void onFailure(    @NonNull Call<Register> call,    @NonNull Throwable t){
      Utils.print(TAG,""String_Node_Str"",Log.ERROR);
      Utils.print(TAG,t.toString(),Log.ERROR);
      Utils.showSnackbar(mCoordinatorLayout,mContext,R.string.response_fail,true);
    }
  }
);
}","private void register(String fullName,String username,String email,String password){
  Utils.print(TAG,""String_Node_Str"");
  getApi().register(email,password,username,fullName).enqueue(new Callback<DefaultMsg>(){
    @Override public void onResponse(    @NonNull Call<DefaultMsg> call,    @NonNull Response<DefaultMsg> response){
      Utils.print(TAG,""String_Node_Str"");
      Utils.print(TAG,""String_Node_Str"" + response.raw().request().url());
      Utils.print(TAG,""String_Node_Str"" + response.code());
      if (response.isSuccessful()) {
        Intent intent=new Intent(mContext,LoginActivity.class);
        Bundle bundle=new Bundle();
        bundle.putString(""String_Node_Str"",response.body().getMessage());
        intent.putExtras(bundle);
        startActivity(intent);
        finish();
      }
 else {
        Utils.print(TAG,""String_Node_Str"" + response.message(),Log.ERROR);
        Utils.showSnackbar(mCoordinatorLayout,mContext,""String_Node_Str"",true);
      }
    }
    @Override public void onFailure(    @NonNull Call<DefaultMsg> call,    @NonNull Throwable t){
      Utils.print(TAG,""String_Node_Str"",Log.ERROR);
      Utils.print(TAG,t.toString(),Log.ERROR);
      Utils.showSnackbar(mCoordinatorLayout,mContext,R.string.response_fail,true);
    }
  }
);
}"
40029,"@FormUrlEncoded @POST(""String_Node_Str"") Call<Register> register(@NonNull @Field(""String_Node_Str"") String email,@NonNull @Field(""String_Node_Str"") String password,@NonNull @Field(""String_Node_Str"") String username,@NonNull @Field(""String_Node_Str"") String firstName);","@FormUrlEncoded @POST(""String_Node_Str"") Call<DefaultMsg> register(@NonNull @Field(""String_Node_Str"") String email,@NonNull @Field(""String_Node_Str"") String password,@NonNull @Field(""String_Node_Str"") String username,@NonNull @Field(""String_Node_Str"") String firstName);"
40030,"@SuppressLint(""String_Node_Str"") public void login(User user,String token){
  if (!TextUtils.isEmpty(token)) {
    accessToken=token;
    isLoggedIn=true;
    userFullName=user.getFullName();
    userUsername=user.getUsername();
    userType=user.getType();
    userEmail=user.getEmail();
    SharedPreferences.Editor editor=prefs.edit();
    editor.putString(KEY_USER_FULL_NAME,userFullName);
    editor.putString(KEY_USER_USERNAME,userUsername);
    editor.putString(KEY_USER_EMAIL,userEmail);
    editor.putInt(KEY_USER_TYPE,userType);
    editor.commit();
  }
}","@SuppressLint(""String_Node_Str"") public void login(User user,String token){
  if (!TextUtils.isEmpty(token)) {
    accessToken=token;
    isLoggedIn=true;
    userFullName=user.getFullName();
    userUsername=user.getUsername();
    userType=user.getType();
    userEmail=user.getEmail();
    SharedPreferences.Editor editor=prefs.edit();
    editor.putString(KEY_ACCESS_TOKEN,accessToken);
    editor.putString(KEY_USER_FULL_NAME,userFullName);
    editor.putString(KEY_USER_USERNAME,userUsername);
    editor.putString(KEY_USER_EMAIL,userEmail);
    editor.putInt(KEY_USER_TYPE,userType);
    editor.commit();
  }
}"
40031,"public boolean logout(){
  if (isLoggedIn) {
    isLoggedIn=false;
    accessToken=null;
    userFullName=null;
    userUsername=null;
    userType=0;
    userEmail=null;
    SharedPreferences.Editor editor=prefs.edit();
    editor.putString(KEY_ACCESS_TOKEN,accessToken);
    editor.putString(KEY_USER_FULL_NAME,userFullName);
    editor.putInt(KEY_USER_TYPE,userType);
    editor.apply();
    return true;
  }
  return false;
}","public boolean logout(){
  if (isLoggedIn) {
    isLoggedIn=false;
    accessToken=null;
    userFullName=null;
    userUsername=null;
    userType=0;
    userEmail=null;
    SharedPreferences.Editor editor=prefs.edit();
    editor.putString(KEY_ACCESS_TOKEN,accessToken);
    editor.putString(KEY_USER_FULL_NAME,userFullName);
    editor.putString(KEY_USER_USERNAME,userUsername);
    editor.putString(KEY_USER_EMAIL,userEmail);
    editor.putInt(KEY_USER_TYPE,userType);
    editor.apply();
    return true;
  }
  return false;
}"
40032,"private ApiPrefs(Context context){
  prefs=context.getApplicationContext().getSharedPreferences(APP_PREF,Context.MODE_PRIVATE);
  accessToken=prefs.getString(KEY_ACCESS_TOKEN,null);
  isLoggedIn=!TextUtils.isEmpty(accessToken);
  if (isLoggedIn) {
    userFullName=prefs.getString(KEY_USER_FULL_NAME,null);
    userUsername=prefs.getString(KEY_USER_USERNAME,null);
    userEmail=prefs.getString(KEY_USER_EMAIL,null);
    userType=prefs.getInt(KEY_USER_TYPE,0);
  }
}","private ApiPrefs(Context context){
  prefs=context.getApplicationContext().getSharedPreferences(APP_PREF,Context.MODE_PRIVATE);
  accessToken=prefs.getString(KEY_ACCESS_TOKEN,null);
  Utils.print(""String_Node_Str"",accessToken + ""String_Node_Str"");
  isLoggedIn=!TextUtils.isEmpty(accessToken);
  if (isLoggedIn) {
    userFullName=prefs.getString(KEY_USER_FULL_NAME,null);
    userUsername=prefs.getString(KEY_USER_USERNAME,null);
    userEmail=prefs.getString(KEY_USER_EMAIL,null);
    userType=prefs.getInt(KEY_USER_TYPE,0);
  }
}"
40033,"@Override public void onResponse(@NonNull Call<Ping> call,@NonNull Response<Ping> response){
  Utils.print(TAG,""String_Node_Str"");
  Utils.print(TAG,""String_Node_Str"" + response.raw().request().url());
  Utils.print(TAG,""String_Node_Str"" + response.code());
  if (response.isSuccessful()) {
    mAppPrefs.login(response.body().getUser(),response.body().getToken());
    updateUi();
  }
 else {
    Utils.print(TAG,""String_Node_Str"" + response.message(),Log.ERROR);
    updateUi();
    mAppPrefs.logout();
  }
}","@Override public void onResponse(@NonNull Call<Ping> call,@NonNull Response<Ping> response){
  Utils.print(TAG,""String_Node_Str"");
  Utils.print(TAG,""String_Node_Str"" + response.raw().request().url());
  Utils.print(TAG,""String_Node_Str"" + response.code());
  if (response.isSuccessful()) {
    mAppPrefs.login(response.body().getUser(),response.body().getToken());
    updateUi();
  }
 else {
    Utils.print(TAG,""String_Node_Str"" + response.message(),Log.ERROR);
    updateUi();
  }
}"
40034,"private void ping(){
  Utils.print(TAG,""String_Node_Str"");
  mAppPrefs.getApi().ping(mAppPrefs.getAccessToken()).enqueue(new Callback<Ping>(){
    @Override public void onResponse(    @NonNull Call<Ping> call,    @NonNull Response<Ping> response){
      Utils.print(TAG,""String_Node_Str"");
      Utils.print(TAG,""String_Node_Str"" + response.raw().request().url());
      Utils.print(TAG,""String_Node_Str"" + response.code());
      if (response.isSuccessful()) {
        mAppPrefs.login(response.body().getUser(),response.body().getToken());
        updateUi();
      }
 else {
        Utils.print(TAG,""String_Node_Str"" + response.message(),Log.ERROR);
        updateUi();
        mAppPrefs.logout();
      }
    }
    @Override public void onFailure(    @NonNull Call<Ping> call,    @NonNull Throwable t){
      Utils.print(TAG,""String_Node_Str"",Log.ERROR);
      Utils.print(TAG,t.toString(),Log.ERROR);
      updateUi();
      mAppPrefs.logout();
    }
  }
);
}","private void ping(){
  Utils.print(TAG,""String_Node_Str"");
  mAppPrefs.getApi().ping(mAppPrefs.getAccessToken()).enqueue(new Callback<Ping>(){
    @Override public void onResponse(    @NonNull Call<Ping> call,    @NonNull Response<Ping> response){
      Utils.print(TAG,""String_Node_Str"");
      Utils.print(TAG,""String_Node_Str"" + response.raw().request().url());
      Utils.print(TAG,""String_Node_Str"" + response.code());
      if (response.isSuccessful()) {
        mAppPrefs.login(response.body().getUser(),response.body().getToken());
        updateUi();
      }
 else {
        Utils.print(TAG,""String_Node_Str"" + response.message(),Log.ERROR);
        updateUi();
      }
    }
    @Override public void onFailure(    @NonNull Call<Ping> call,    @NonNull Throwable t){
      Utils.print(TAG,""String_Node_Str"",Log.ERROR);
      Utils.print(TAG,t.toString(),Log.ERROR);
      updateUi();
    }
  }
);
}"
40035,"@Override public void onFailure(@NonNull Call<Ping> call,@NonNull Throwable t){
  Utils.print(TAG,""String_Node_Str"",Log.ERROR);
  Utils.print(TAG,t.toString(),Log.ERROR);
  updateUi();
  mAppPrefs.logout();
}","@Override public void onFailure(@NonNull Call<Ping> call,@NonNull Throwable t){
  Utils.print(TAG,""String_Node_Str"",Log.ERROR);
  Utils.print(TAG,t.toString(),Log.ERROR);
  updateUi();
}"
40036,"@Override public void onResponse(@NonNull Call<Ping> call,@NonNull Response<Ping> response){
  Utils.print(TAG,""String_Node_Str"");
  Utils.print(TAG,""String_Node_Str"" + response.raw().request().url());
  Utils.print(TAG,""String_Node_Str"" + response.code());
  if (response.isSuccessful()) {
    mAppPrefs.login(response.body().getUser(),response.body().getToken());
    updateUi();
  }
 else {
    Utils.print(TAG,""String_Node_Str"" + response.message(),Log.ERROR);
    updateUi();
  }
}","@Override public void onResponse(@NonNull Call<Ping> call,@NonNull Response<Ping> response){
  Utils.print(TAG,""String_Node_Str"");
  Utils.print(TAG,""String_Node_Str"" + response.raw().request().url());
  Utils.print(TAG,""String_Node_Str"" + response.code());
  if (response.isSuccessful()) {
    mAppPrefs.login(response.body().getUser(),response.body().getToken());
    updateUi();
  }
 else {
    Utils.print(TAG,""String_Node_Str"" + response.message(),Log.ERROR);
    updateUi();
    mAppPrefs.logout();
  }
}"
40037,"private void ping(){
  Utils.print(TAG,""String_Node_Str"");
  mAppPrefs.getApi().ping(mAppPrefs.getAccessToken()).enqueue(new Callback<Ping>(){
    @Override public void onResponse(    @NonNull Call<Ping> call,    @NonNull Response<Ping> response){
      Utils.print(TAG,""String_Node_Str"");
      Utils.print(TAG,""String_Node_Str"" + response.raw().request().url());
      Utils.print(TAG,""String_Node_Str"" + response.code());
      if (response.isSuccessful()) {
        mAppPrefs.login(response.body().getUser(),response.body().getToken());
        updateUi();
      }
 else {
        Utils.print(TAG,""String_Node_Str"" + response.message(),Log.ERROR);
        updateUi();
      }
    }
    @Override public void onFailure(    @NonNull Call<Ping> call,    @NonNull Throwable t){
      Utils.print(TAG,""String_Node_Str"",Log.ERROR);
      Utils.print(TAG,t.toString(),Log.ERROR);
      updateUi();
    }
  }
);
}","private void ping(){
  Utils.print(TAG,""String_Node_Str"");
  mAppPrefs.getApi().ping(mAppPrefs.getAccessToken()).enqueue(new Callback<Ping>(){
    @Override public void onResponse(    @NonNull Call<Ping> call,    @NonNull Response<Ping> response){
      Utils.print(TAG,""String_Node_Str"");
      Utils.print(TAG,""String_Node_Str"" + response.raw().request().url());
      Utils.print(TAG,""String_Node_Str"" + response.code());
      if (response.isSuccessful()) {
        mAppPrefs.login(response.body().getUser(),response.body().getToken());
        updateUi();
      }
 else {
        Utils.print(TAG,""String_Node_Str"" + response.message(),Log.ERROR);
        updateUi();
        mAppPrefs.logout();
      }
    }
    @Override public void onFailure(    @NonNull Call<Ping> call,    @NonNull Throwable t){
      Utils.print(TAG,""String_Node_Str"",Log.ERROR);
      Utils.print(TAG,t.toString(),Log.ERROR);
      updateUi();
      mAppPrefs.logout();
    }
  }
);
}"
40038,"@Override public void onFailure(@NonNull Call<Ping> call,@NonNull Throwable t){
  Utils.print(TAG,""String_Node_Str"",Log.ERROR);
  Utils.print(TAG,t.toString(),Log.ERROR);
  updateUi();
}","@Override public void onFailure(@NonNull Call<Ping> call,@NonNull Throwable t){
  Utils.print(TAG,""String_Node_Str"",Log.ERROR);
  Utils.print(TAG,t.toString(),Log.ERROR);
  updateUi();
  mAppPrefs.logout();
}"
40039,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Element adsElement=new Element();
  adsElement.setTitle(""String_Node_Str"");
  View aboutPage=new AboutPage(this).isRTL(false).setImage(R.drawable.smaplelogo).setDescription(""String_Node_Str"").addItem(new Element().setTitle(""String_Node_Str"")).addItem(new Element().setTitle(""String_Node_Str"").setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Log.d(""String_Node_Str"",""String_Node_Str"");
      Intent intent=new Intent();
      intent.setClass(getApplicationContext(),PrivatePolicyActivity.class);
      startActivityForResult(intent,100);
    }
  }
)).addItem(new Element().setTitle(""String_Node_Str"").setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Log.d(""String_Node_Str"",""String_Node_Str"");
      Intent intent=new Intent();
      intent.setClass(getApplicationContext(),LibActivity.class);
      startActivityForResult(intent,100);
    }
  }
)).addGroup(""String_Node_Str"").addEmail(""String_Node_Str"").addGitHub(""String_Node_Str"").addPlayStore(""String_Node_Str"").addItem(createCopyright()).create();
  setContentView(aboutPage);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_about);
  toolbar=findViewById(R.id.toolbar);
  setupToolbar(false,true);
  ConstraintLayout mRoot=findViewById(R.id.main_view);
  Element adsElement=new Element();
  adsElement.setTitle(""String_Node_Str"");
  View aboutPage=new AboutPage(this).isRTL(false).setImage(R.drawable.smaplelogo).setDescription(""String_Node_Str"").addItem(new Element().setTitle(""String_Node_Str"")).addItem(new Element().setTitle(""String_Node_Str"").setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Log.d(""String_Node_Str"",""String_Node_Str"");
      Intent intent=new Intent();
      intent.setClass(getApplicationContext(),PrivatePolicyActivity.class);
      startActivityForResult(intent,100);
    }
  }
)).addItem(new Element().setTitle(""String_Node_Str"").setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Log.d(""String_Node_Str"",""String_Node_Str"");
      Intent intent=new Intent();
      intent.setClass(getApplicationContext(),LibActivity.class);
      startActivityForResult(intent,100);
    }
  }
)).addGroup(""String_Node_Str"").addEmail(""String_Node_Str"").addGitHub(""String_Node_Str"").addPlayStore(""String_Node_Str"").addItem(createCopyright()).create();
  mRoot.addView(aboutPage,1);
}"
40040,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (mContext == null)   mContext=getActivity().getApplicationContext();
  Utils.print(TAG,""String_Node_Str"");
  mApiPrefs=ApiPrefs.get(mContext);
  if (getArguments() != null) {
    mColumnCount=getArguments().getInt(ARG_COLUMN_COUNT,1);
    mSource=getArguments().getString(ARG_PARAM_SOURCE,""String_Node_Str"");
  }
  Utils.print(""String_Node_Str"",""String_Node_Str"" + mSource + ""String_Node_Str"");
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (mContext == null)   mContext=getActivity().getApplicationContext();
  Utils.print(TAG,""String_Node_Str"");
  mApiPrefs=ApiPrefs.get(mContext);
  if (getArguments() != null) {
    mColumnCount=getArguments().getInt(ARG_COLUMN_COUNT,1);
    mSource=getArguments().getString(ARG_PARAM_SOURCE,""String_Node_Str"");
  }
}"
40041,"void bindNews(final boolean postponeEnterTransition){
  createMap();
  Glide.with(this).load(newsItem.getCover()).apply(new RequestOptions().centerCrop().error(R.drawable.sample)).into(ivCover);
  if (postponeEnterTransition)   postponeEnterTransition();
  ivCover.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener(){
    @Override public boolean onPreDraw(){
      ivCover.getViewTreeObserver().removeOnPreDrawListener(this);
      calculateFabPosition();
      if (postponeEnterTransition)       startPostponedEnterTransition();
      return true;
    }
  }
);
  tvTitle.setText(newsItem.getTitle());
  tvArticle.setText(newsItem.getArticle());
  if (newsItem.getViews() > 0) {
    tvViews.setVisibility(View.VISIBLE);
    String views=getResources().getQuantityString(R.plurals.views,newsItem.getViews(),newsItem.getViews());
    tvViews.setText(views);
  }
 else {
    tvViews.setVisibility(View.GONE);
  }
  String date=Utils.getDateAgo(getApplicationContext(),newsItem.getCreatedAt());
  tvDate.setText(date);
  String source=mSources.get(newsItem.getSource());
  if (source != null)   tvSource.setText(source);
 else   tvSource.setText(R.string.news);
}","void bindNews(final boolean postponeEnterTransition){
  createMap();
  Glide.with(this).load(newsItem.getCover()).apply(new RequestOptions().centerCrop().error(R.drawable.sample)).into(ivCover);
  if (postponeEnterTransition)   postponeEnterTransition();
  ivCover.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener(){
    @Override public boolean onPreDraw(){
      ivCover.getViewTreeObserver().removeOnPreDrawListener(this);
      calculateFabPosition();
      if (postponeEnterTransition)       startPostponedEnterTransition();
      return true;
    }
  }
);
  Utils.print(TAG,newsItem.getArticle());
  tvTitle.setText(newsItem.getTitle());
  tvArticle.setText(newsItem.getArticle());
  if (newsItem.getViews() > 0) {
    tvViews.setVisibility(View.VISIBLE);
    String views=getResources().getQuantityString(R.plurals.views,newsItem.getViews(),newsItem.getViews());
    tvViews.setText(views);
  }
 else {
    tvViews.setVisibility(View.GONE);
  }
  String date=Utils.getDateAgo(getApplicationContext(),newsItem.getCreatedAt());
  tvDate.setText(date);
  String source=mSources.get(newsItem.getSource());
  if (source != null)   tvSource.setText(source);
 else   tvSource.setText(R.string.news);
}"
40042,"public String getSubtitle(){
  return article.substring(0,Math.min(article.length(),100)).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
}","public String getSubtitle(){
  return ""String_Node_Str"";
}"
40043,"void bindNews(final boolean postponeEnterTransition){
  createMap();
  Glide.with(this).load(newsItem.getCover()).apply(new RequestOptions().centerCrop().error(R.drawable.sample)).into(ivCover);
  if (postponeEnterTransition)   postponeEnterTransition();
  ivCover.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener(){
    @Override public boolean onPreDraw(){
      ivCover.getViewTreeObserver().removeOnPreDrawListener(this);
      calculateFabPosition();
      if (postponeEnterTransition)       startPostponedEnterTransition();
      return true;
    }
  }
);
  Utils.print(TAG,newsItem.getArticle());
  tvTitle.setText(newsItem.getTitle());
  tvArticle.setText(newsItem.getArticle());
  if (newsItem.getViews() > 0) {
    tvViews.setVisibility(View.VISIBLE);
    String views=getResources().getQuantityString(R.plurals.views,newsItem.getViews(),newsItem.getViews());
    tvViews.setText(views);
  }
 else {
    tvViews.setVisibility(View.GONE);
  }
  String date=Utils.getDateAgo(getApplicationContext(),newsItem.getCreatedAt());
  tvDate.setText(date);
  String source=mSources.get(newsItem.getSource());
  if (source != null)   tvSource.setText(source);
 else   tvSource.setText(R.string.news);
}","void bindNews(final boolean postponeEnterTransition){
  createMap();
  Glide.with(this).load(newsItem.getCover()).apply(new RequestOptions().centerCrop().error(R.drawable.sample)).into(ivCover);
  if (postponeEnterTransition)   postponeEnterTransition();
  ivCover.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener(){
    @Override public boolean onPreDraw(){
      ivCover.getViewTreeObserver().removeOnPreDrawListener(this);
      calculateFabPosition();
      if (postponeEnterTransition)       startPostponedEnterTransition();
      return true;
    }
  }
);
  tvTitle.setText(newsItem.getTitle());
  tvArticle.setText(newsItem.getArticle());
  if (newsItem.getViews() > 0) {
    tvViews.setVisibility(View.VISIBLE);
    String views=getResources().getQuantityString(R.plurals.views,newsItem.getViews(),newsItem.getViews());
    tvViews.setText(views);
  }
 else {
    tvViews.setVisibility(View.GONE);
  }
  String date=Utils.getDateAgo(getApplicationContext(),newsItem.getCreatedAt());
  tvDate.setText(date);
  String source=mSources.get(newsItem.getSource());
  if (source != null)   tvSource.setText(source);
 else   tvSource.setText(R.string.news);
}"
40044,"@Override public void start(){
  if (!started.compareAndSet(false,true)) {
    return;
  }
  ThreadFactory f=(  Runnable r) -> new Thread(r,""String_Node_Str"");
  scheduler=new ScheduledThreadPoolExecutor(1,f);
  scheduler.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
  scheduler.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);
  scheduler.setRemoveOnCancelPolicy(true);
  Runnable poller=() -> {
    poll();
  }
;
  scheduler.scheduleWithFixedDelay(poller,ackPollInterval,ackPollInterval,TimeUnit.SECONDS);
  ThreadFactory e=(  Runnable r) -> new Thread(r,""String_Node_Str"");
  executorService=Executors.newFixedThreadPool(pollThreads,e);
}","@Override public void start(){
  if (!started.compareAndSet(false,true)) {
    return;
  }
  ThreadFactory f=(  Runnable r) -> new Thread(r,""String_Node_Str"");
  scheduler=new ScheduledThreadPoolExecutor(1,f);
  scheduler.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
  scheduler.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);
  scheduler.setRemoveOnCancelPolicy(true);
  Runnable poller=() -> {
    try {
      poll();
    }
 catch (    HecException e) {
      log.error(""String_Node_Str"",e);
    }
  }
;
  scheduler.scheduleWithFixedDelay(poller,ackPollInterval,ackPollInterval,TimeUnit.SECONDS);
  ThreadFactory e=(  Runnable r) -> new Thread(r,""String_Node_Str"");
  executorService=Executors.newFixedThreadPool(pollThreads,e);
}"
40045,"private void findAndRemoveTimedoutBatches(Map<Long,EventBatch> batches,List<EventBatch> timeouts){
  Iterator<Map.Entry<Long,EventBatch>> iterator=batches.entrySet().iterator();
  while (iterator.hasNext()) {
    EventBatch batch=iterator.next().getValue();
    if (batch.isTimedout(eventBatchTimeout)) {
      timeouts.add(batch);
      iterator.remove();
    }
  }
}","private void findAndRemoveTimedoutBatches(Map<Long,EventBatch> batches,List<EventBatch> timeouts){
  Iterator<Map.Entry<Long,EventBatch>> iterator=batches.entrySet().iterator();
  while (iterator.hasNext()) {
    EventBatch batch=iterator.next().getValue();
    if (batch.isTimedout(eventBatchTimeout)) {
      batch.fail();
      timeouts.add(batch);
      iterator.remove();
    }
  }
}"
40046,"private void handleAckPollResponse(String resp,HecChannel channel){
  log.debug(""String_Node_Str"",resp);
  HecAckPollResponse ackPollResult;
  try {
    ackPollResult=jsonMapper.readValue(resp,HecAckPollResponse.class);
  }
 catch (  Exception ex) {
    log.error(""String_Node_Str"",ex);
    return;
  }
  handleAckPollResult(channel,ackPollResult);
}","private void handleAckPollResponse(String resp,HecChannel channel){
  log.debug(""String_Node_Str"",resp,channel);
  HecAckPollResponse ackPollResult;
  try {
    ackPollResult=jsonMapper.readValue(resp,HecAckPollResponse.class);
  }
 catch (  Exception ex) {
    log.error(""String_Node_Str"",ex);
    return;
  }
  handleAckPollResult(channel,ackPollResult);
}"
40047,"public void addFailedEventBatch(final EventBatch batch){
  if (!batch.isFailed()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  failed.add(batch);
}","public void addFailedEventBatch(final EventBatch batch){
  if (!batch.isFailed()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  failed.add(batch);
  log.info(""String_Node_Str"",failed.size());
}"
40048,"public void onEventFailure(final List<EventBatch> batches,Exception ex){
  for (  EventBatch batch : batches) {
    tracker.addFailedEventBatch(batch);
  }
}","public void onEventFailure(final List<EventBatch> batches,Exception ex){
  log.info(""String_Node_Str"",batches.size());
  for (  EventBatch batch : batches) {
    tracker.addFailedEventBatch(batch);
  }
}"
40049,"public void addEventBatch(final EventBatch batch){
  for (  final Event event : batch.getEvents()) {
    if (event.getTied() instanceof SinkRecord) {
      final SinkRecord record=(SinkRecord)event.getTied();
      TopicPartition tp=new TopicPartition(record.topic(),record.kafkaPartition());
      TreeMap<Long,EventBatch> tpRecords=all.get(tp);
      if (tpRecords == null) {
        tpRecords=new TreeMap<>();
        all.put(tp,tpRecords);
      }
      tpRecords.put(record.kafkaOffset(),batch);
      total+=1;
    }
  }
}","public void addEventBatch(final EventBatch batch){
  for (  final Event event : batch.getEvents()) {
    if (event.getTied() instanceof SinkRecord) {
      final SinkRecord record=(SinkRecord)event.getTied();
      TopicPartition tp=new TopicPartition(record.topic(),record.kafkaPartition());
      TreeMap<Long,EventBatch> tpRecords=all.get(tp);
      if (tpRecords == null) {
        tpRecords=new TreeMap<>();
        all.put(tp,tpRecords);
      }
      if (!tpRecords.containsKey(record.kafkaOffset())) {
        tpRecords.put(record.kafkaOffset(),batch);
        total+=1;
      }
    }
  }
}"
40050,"@Override public void put(Collection<SinkRecord> records){
  log.info(""String_Node_Str"",records.size());
  handleFailedBatches();
  preventTooManyOutstandingEvents();
  bufferedRecords.addAll(records);
  if (bufferedRecords.size() < connectorConfig.maxBatchSize) {
    if (System.currentTimeMillis() - lastFlushed < flushWindow) {
      return;
    }
    if (bufferedRecords.isEmpty()) {
      lastFlushed=System.currentTimeMillis();
      return;
    }
  }
  records=bufferedRecords;
  bufferedRecords=new ArrayList<>();
  lastFlushed=System.currentTimeMillis();
  if (connectorConfig.raw) {
    handleRaw(records);
  }
 else {
    handleEvent(records);
  }
}","@Override public void put(Collection<SinkRecord> records){
  log.debug(""String_Node_Str"",records.size(),tracker.totalEvents());
  handleFailedBatches();
  preventTooManyOutstandingEvents();
  bufferedRecords.addAll(records);
  if (bufferedRecords.size() < connectorConfig.maxBatchSize) {
    if (System.currentTimeMillis() - lastFlushed < flushWindow) {
      return;
    }
    if (bufferedRecords.isEmpty()) {
      lastFlushed=System.currentTimeMillis();
      return;
    }
  }
  records=bufferedRecords;
  bufferedRecords=new ArrayList<>();
  lastFlushed=System.currentTimeMillis();
  if (connectorConfig.raw) {
    handleRaw(records);
  }
 else {
    handleEvent(records);
  }
}"
40051,"private void preventTooManyOutstandingEvents(){
  if (tracker.totalEventBatches() >= connectorConfig.maxOutstandingEvents) {
    String msg=String.format(""String_Node_Str"",connectorConfig.maxOutstandingEvents);
    throw new RetriableException(new HecException(msg));
  }
}","private void preventTooManyOutstandingEvents(){
  if (tracker.totalEvents() >= connectorConfig.maxOutstandingEvents) {
    String msg=String.format(""String_Node_Str"",connectorConfig.maxOutstandingEvents);
    throw new RetriableException(new HecException(msg));
  }
}"
40052,"private void handleFailedBatches(){
  Collection<EventBatch> failed=tracker.getAndRemoveFailedRecords();
  if (failed.isEmpty()) {
    return;
  }
  long failedEvents=0;
  for (  final EventBatch batch : failed) {
    failedEvents+=batch.size();
    if (connectorConfig.maxRetries > 0 && batch.getFailureCount() > connectorConfig.maxRetries) {
      log.error(""String_Node_Str"",batch.size(),connectorConfig.maxRetries);
      continue;
    }
    send(batch);
  }
  log.info(""String_Node_Str"",failed.size());
  if (failedEvents * 10 > connectorConfig.maxOutstandingEvents) {
    String msg=String.format(""String_Node_Str"",connectorConfig.maxOutstandingEvents);
    throw new RetriableException(new HecException(msg));
  }
}","private void handleFailedBatches(){
  Collection<EventBatch> failed=tracker.getAndRemoveFailedRecords();
  if (failed.isEmpty()) {
    return;
  }
  log.debug(""String_Node_Str"",failed.size());
  long failedEvents=0;
  for (  final EventBatch batch : failed) {
    failedEvents+=batch.size();
    if (connectorConfig.maxRetries > 0 && batch.getFailureCount() > connectorConfig.maxRetries) {
      log.error(""String_Node_Str"",batch.size(),connectorConfig.maxRetries);
      continue;
    }
    send(batch);
  }
  log.info(""String_Node_Str"",failed.size(),failedEvents);
  if (failedEvents * 10 > connectorConfig.maxOutstandingEvents) {
    String msg=String.format(""String_Node_Str"",connectorConfig.maxOutstandingEvents);
    throw new RetriableException(new HecException(msg));
  }
}"
40053,"@Override public synchronized String executeHttpRequest(final HttpUriRequest req){
  CloseableHttpResponse resp;
  try {
    resp=httpClient.execute(req,context);
  }
 catch (  Exception ex) {
    log.error(""String_Node_Str"",ex);
    throw new HecException(""String_Node_Str"",ex);
  }
  return readAndCloseResponse(resp);
}","@Override public synchronized String executeHttpRequest(final HttpUriRequest req){
  CloseableHttpResponse resp;
  try {
    resp=httpClient.execute(req,context);
  }
 catch (  ConnectException ex) {
    backPressure+=1;
    log.error(""String_Node_Str"",ex);
    throw new HecException(""String_Node_Str"",ex);
  }
catch (  Exception ex) {
    log.error(""String_Node_Str"",ex);
    throw new HecException(""String_Node_Str"",ex);
  }
  return readAndCloseResponse(resp);
}"
40054,"public Map<TopicPartition,OffsetAndMetadata> computeOffsets(){
  Map<TopicPartition,OffsetAndMetadata> offsets=new HashMap<>();
  for (  Map.Entry<TopicPartition,TreeMap<Long,EventBatch>> entry : all.entrySet()) {
    long offset=-1;
    Iterator<Map.Entry<Long,EventBatch>> iter=entry.getValue().entrySet().iterator();
    for (; iter.hasNext(); ) {
      Map.Entry<Long,EventBatch> e=iter.next();
      if (e.getValue().isCommitted()) {
        offset=e.getKey();
        iter.remove();
      }
 else {
        break;
      }
    }
    if (offset >= 0) {
      offsets.put(entry.getKey(),new OffsetAndMetadata(offset + 1));
    }
  }
  return offsets;
}","public Map<TopicPartition,OffsetAndMetadata> computeOffsets(){
  Map<TopicPartition,OffsetAndMetadata> offsets=new HashMap<>();
  for (  Map.Entry<TopicPartition,TreeMap<Long,EventBatch>> entry : all.entrySet()) {
    long offset=-1;
    Iterator<Map.Entry<Long,EventBatch>> iter=entry.getValue().entrySet().iterator();
    for (; iter.hasNext(); ) {
      Map.Entry<Long,EventBatch> e=iter.next();
      if (e.getValue().isCommitted()) {
        offset=e.getKey();
        iter.remove();
        total-=1;
      }
 else {
        break;
      }
    }
    if (offset >= 0) {
      offsets.put(entry.getKey(),new OffsetAndMetadata(offset + 1));
    }
  }
  return offsets;
}"
40055,"public KafkaRecordTracker(){
  all=new HashMap<>();
  failed=new ConcurrentLinkedQueue<>();
}","public KafkaRecordTracker(){
  all=new HashMap<>();
  failed=new ConcurrentLinkedQueue<>();
  total=0;
}"
40056,"public void addEventBatch(final EventBatch batch){
  for (  final Event event : batch.getEvents()) {
    if (event.getTied() instanceof SinkRecord) {
      final SinkRecord record=(SinkRecord)event.getTied();
      TopicPartition tp=new TopicPartition(record.topic(),record.kafkaPartition());
      TreeMap<Long,EventBatch> tpRecords=all.get(tp);
      if (tpRecords == null) {
        tpRecords=new TreeMap<>();
        all.put(tp,tpRecords);
      }
      tpRecords.put(record.kafkaOffset(),batch);
    }
  }
}","public void addEventBatch(final EventBatch batch){
  for (  final Event event : batch.getEvents()) {
    if (event.getTied() instanceof SinkRecord) {
      final SinkRecord record=(SinkRecord)event.getTied();
      TopicPartition tp=new TopicPartition(record.topic(),record.kafkaPartition());
      TreeMap<Long,EventBatch> tpRecords=all.get(tp);
      if (tpRecords == null) {
        tpRecords=new TreeMap<>();
        all.put(tp,tpRecords);
      }
      tpRecords.put(record.kafkaOffset(),batch);
      total+=1;
    }
  }
}"
40057,"SplunkSinkConnectorConfig(Map<String,String> taskConfig){
  super(conf(),taskConfig);
  splunkToken=getPassword(TOKEN_CONF).value();
  splunkURI=getString(URI_CONF);
  raw=getBoolean(RAW_CONF);
  ack=getBoolean(ACK_CONF);
  indexes=getString(INDEX_CONF);
  sourcetypes=getString(SOURCETYPE_CONF);
  sources=getString(SOURCE_CONF);
  httpKeepAlive=getBoolean(HTTP_KEEPALIVE_CONF);
  validateCertificates=getBoolean(SSL_VALIDATE_CERTIFICATES_CONF);
  trustStorePath=getString(SSL_TRUSTSTORE_PATH_CONF);
  trustStorePassword=getPassword(SSL_TRUSTSTORE_PASSWORD_CONF).value();
  eventBatchTimeout=getInt(EVENT_TIMEOUT_CONF);
  ackPollInterval=getInt(ACK_POLL_INTERVAL_CONF);
  ackPollThreads=getInt(ACK_POLL_THREADS_CONF);
  maxHttpConnPerChannel=getInt(MAX_HTTP_CONNECTION_PER_CHANNEL_CONF);
  totalHecChannels=getInt(TOTAL_HEC_CHANNEL_CONF);
  socketTimeout=getInt(SOCKET_TIMEOUT_CONF);
  enrichements=parseEnrichements(getString(ENRICHEMENT_CONF));
  trackData=getBoolean(TRACK_DATA_CONF);
  maxBatchSize=getInt(MAX_BATCH_SIZE_CONF);
  numberOfThreads=getInt(HEC_THREDS_CONF);
  lineBreaker=getString(LINE_BREAKER_CONF);
  topicMetas=initMetaMap(taskConfig);
}","SplunkSinkConnectorConfig(Map<String,String> taskConfig){
  super(conf(),taskConfig);
  splunkToken=getPassword(TOKEN_CONF).value();
  splunkURI=getString(URI_CONF);
  raw=getBoolean(RAW_CONF);
  ack=getBoolean(ACK_CONF);
  indexes=getString(INDEX_CONF);
  sourcetypes=getString(SOURCETYPE_CONF);
  sources=getString(SOURCE_CONF);
  httpKeepAlive=getBoolean(HTTP_KEEPALIVE_CONF);
  validateCertificates=getBoolean(SSL_VALIDATE_CERTIFICATES_CONF);
  trustStorePath=getString(SSL_TRUSTSTORE_PATH_CONF);
  trustStorePassword=getPassword(SSL_TRUSTSTORE_PASSWORD_CONF).value();
  eventBatchTimeout=getInt(EVENT_TIMEOUT_CONF);
  ackPollInterval=getInt(ACK_POLL_INTERVAL_CONF);
  ackPollThreads=getInt(ACK_POLL_THREADS_CONF);
  maxHttpConnPerChannel=getInt(MAX_HTTP_CONNECTION_PER_CHANNEL_CONF);
  totalHecChannels=getInt(TOTAL_HEC_CHANNEL_CONF);
  socketTimeout=getInt(SOCKET_TIMEOUT_CONF);
  enrichments=parseEnrichments(getString(ENRICHMENT_CONF));
  trackData=getBoolean(TRACK_DATA_CONF);
  maxBatchSize=getInt(MAX_BATCH_SIZE_CONF);
  numberOfThreads=getInt(HEC_THREDS_CONF);
  lineBreaker=getString(LINE_BREAKER_CONF);
  maxOutstandingEvents=getInt(MAX_OUTSTANDING_EVENTS_CONF);
  maxRetries=getInt(MAX_RETRIES_CONF);
  topicMetas=initMetaMap(taskConfig);
}"
40058,"public static ConfigDef conf(){
  return new ConfigDef().define(TOKEN_CONF,ConfigDef.Type.PASSWORD,ConfigDef.Importance.HIGH,TOKEN_DOC).define(URI_CONF,ConfigDef.Type.STRING,ConfigDef.Importance.HIGH,URI_DOC).define(RAW_CONF,ConfigDef.Type.BOOLEAN,false,ConfigDef.Importance.MEDIUM,RAW_DOC).define(ACK_CONF,ConfigDef.Type.BOOLEAN,true,ConfigDef.Importance.MEDIUM,ACK_DOC).define(INDEX_CONF,ConfigDef.Type.STRING,""String_Node_Str"",ConfigDef.Importance.MEDIUM,INDEX_DOC).define(SOURCETYPE_CONF,ConfigDef.Type.STRING,""String_Node_Str"",ConfigDef.Importance.MEDIUM,SOURCETYPE_DOC).define(SOURCE_CONF,ConfigDef.Type.STRING,""String_Node_Str"",ConfigDef.Importance.MEDIUM,SOURCE_DOC).define(HTTP_KEEPALIVE_CONF,ConfigDef.Type.BOOLEAN,true,ConfigDef.Importance.MEDIUM,HTTP_KEEPALIVE_DOC).define(SSL_VALIDATE_CERTIFICATES_CONF,ConfigDef.Type.BOOLEAN,true,ConfigDef.Importance.MEDIUM,SSL_VALIDATE_CERTIFICATES_DOC).define(SSL_TRUSTSTORE_PATH_CONF,ConfigDef.Type.STRING,""String_Node_Str"",ConfigDef.Importance.HIGH,SSL_TRUSTSTORE_PATH_DOC).define(SSL_TRUSTSTORE_PASSWORD_CONF,ConfigDef.Type.PASSWORD,""String_Node_Str"",ConfigDef.Importance.HIGH,SSL_TRUSTSTORE_PASSWORD_DOC).define(EVENT_TIMEOUT_CONF,ConfigDef.Type.INT,120,ConfigDef.Importance.MEDIUM,EVENT_TIMEOUT_DOC).define(ACK_POLL_INTERVAL_CONF,ConfigDef.Type.INT,10,ConfigDef.Importance.MEDIUM,ACK_POLL_INTERVAL_DOC).define(ACK_POLL_THREADS_CONF,ConfigDef.Type.INT,2,ConfigDef.Importance.MEDIUM,ACK_POLL_THREADS_DOC).define(MAX_HTTP_CONNECTION_PER_CHANNEL_CONF,ConfigDef.Type.INT,2,ConfigDef.Importance.MEDIUM,MAX_HTTP_CONNECTION_PER_CHANNEL_DOC).define(TOTAL_HEC_CHANNEL_CONF,ConfigDef.Type.INT,2,ConfigDef.Importance.HIGH,TOTAL_HEC_CHANNEL_DOC).define(SOCKET_TIMEOUT_CONF,ConfigDef.Type.INT,60,ConfigDef.Importance.LOW,SOCKET_TIMEOUT_DOC).define(ENRICHEMENT_CONF,ConfigDef.Type.STRING,""String_Node_Str"",ConfigDef.Importance.LOW,ENRICHMENT_DOC).define(TRACK_DATA_CONF,ConfigDef.Type.BOOLEAN,false,ConfigDef.Importance.LOW,TRACK_DATA_DOC).define(HEC_THREDS_CONF,ConfigDef.Type.INT,1,ConfigDef.Importance.LOW,HEC_THREADS_DOC).define(LINE_BREAKER_CONF,ConfigDef.Type.STRING,""String_Node_Str"",ConfigDef.Importance.MEDIUM,LINE_BREAKER_DOC).define(MAX_BATCH_SIZE_CONF,ConfigDef.Type.INT,100,ConfigDef.Importance.MEDIUM,MAX_BATCH_SIZE_DOC);
}","public static ConfigDef conf(){
  return new ConfigDef().define(TOKEN_CONF,ConfigDef.Type.PASSWORD,ConfigDef.Importance.HIGH,TOKEN_DOC).define(URI_CONF,ConfigDef.Type.STRING,ConfigDef.Importance.HIGH,URI_DOC).define(RAW_CONF,ConfigDef.Type.BOOLEAN,false,ConfigDef.Importance.MEDIUM,RAW_DOC).define(ACK_CONF,ConfigDef.Type.BOOLEAN,true,ConfigDef.Importance.MEDIUM,ACK_DOC).define(INDEX_CONF,ConfigDef.Type.STRING,""String_Node_Str"",ConfigDef.Importance.MEDIUM,INDEX_DOC).define(SOURCETYPE_CONF,ConfigDef.Type.STRING,""String_Node_Str"",ConfigDef.Importance.MEDIUM,SOURCETYPE_DOC).define(SOURCE_CONF,ConfigDef.Type.STRING,""String_Node_Str"",ConfigDef.Importance.MEDIUM,SOURCE_DOC).define(HTTP_KEEPALIVE_CONF,ConfigDef.Type.BOOLEAN,true,ConfigDef.Importance.MEDIUM,HTTP_KEEPALIVE_DOC).define(SSL_VALIDATE_CERTIFICATES_CONF,ConfigDef.Type.BOOLEAN,true,ConfigDef.Importance.MEDIUM,SSL_VALIDATE_CERTIFICATES_DOC).define(SSL_TRUSTSTORE_PATH_CONF,ConfigDef.Type.STRING,""String_Node_Str"",ConfigDef.Importance.HIGH,SSL_TRUSTSTORE_PATH_DOC).define(SSL_TRUSTSTORE_PASSWORD_CONF,ConfigDef.Type.PASSWORD,""String_Node_Str"",ConfigDef.Importance.HIGH,SSL_TRUSTSTORE_PASSWORD_DOC).define(EVENT_TIMEOUT_CONF,ConfigDef.Type.INT,120,ConfigDef.Importance.MEDIUM,EVENT_TIMEOUT_DOC).define(ACK_POLL_INTERVAL_CONF,ConfigDef.Type.INT,10,ConfigDef.Importance.MEDIUM,ACK_POLL_INTERVAL_DOC).define(ACK_POLL_THREADS_CONF,ConfigDef.Type.INT,2,ConfigDef.Importance.MEDIUM,ACK_POLL_THREADS_DOC).define(MAX_HTTP_CONNECTION_PER_CHANNEL_CONF,ConfigDef.Type.INT,2,ConfigDef.Importance.MEDIUM,MAX_HTTP_CONNECTION_PER_CHANNEL_DOC).define(TOTAL_HEC_CHANNEL_CONF,ConfigDef.Type.INT,2,ConfigDef.Importance.HIGH,TOTAL_HEC_CHANNEL_DOC).define(SOCKET_TIMEOUT_CONF,ConfigDef.Type.INT,60,ConfigDef.Importance.LOW,SOCKET_TIMEOUT_DOC).define(ENRICHMENT_CONF,ConfigDef.Type.STRING,""String_Node_Str"",ConfigDef.Importance.LOW,ENRICHMENT_DOC).define(TRACK_DATA_CONF,ConfigDef.Type.BOOLEAN,false,ConfigDef.Importance.LOW,TRACK_DATA_DOC).define(HEC_THREDS_CONF,ConfigDef.Type.INT,1,ConfigDef.Importance.LOW,HEC_THREADS_DOC).define(LINE_BREAKER_CONF,ConfigDef.Type.STRING,""String_Node_Str"",ConfigDef.Importance.MEDIUM,LINE_BREAKER_DOC).define(MAX_OUTSTANDING_EVENTS_CONF,ConfigDef.Type.INT,500000,ConfigDef.Importance.MEDIUM,MAX_OUTSTANDING_EVENTS_DOC).define(MAX_RETRIES_CONF,ConfigDef.Type.INT,-1,ConfigDef.Importance.MEDIUM,MAX_RETRIES_DOC).define(MAX_BATCH_SIZE_CONF,ConfigDef.Type.INT,500,ConfigDef.Importance.MEDIUM,MAX_BATCH_SIZE_DOC);
}"
40059,"public String toString(){
  return ""String_Node_Str"" + splunkURI + ""String_Node_Str""+ ""String_Node_Str""+ raw+ ""String_Node_Str""+ ""String_Node_Str""+ ack+ ""String_Node_Str""+ ""String_Node_Str""+ indexes+ ""String_Node_Str""+ ""String_Node_Str""+ sourcetypes+ ""String_Node_Str""+ ""String_Node_Str""+ sources+ ""String_Node_Str""+ ""String_Node_Str""+ httpKeepAlive+ ""String_Node_Str""+ ""String_Node_Str""+ validateCertificates+ ""String_Node_Str""+ ""String_Node_Str""+ trustStorePath+ ""String_Node_Str""+ ""String_Node_Str""+ socketTimeout+ ""String_Node_Str""+ ""String_Node_Str""+ eventBatchTimeout+ ""String_Node_Str""+ ""String_Node_Str""+ ackPollInterval+ ""String_Node_Str""+ ""String_Node_Str""+ ackPollThreads+ ""String_Node_Str""+ ""String_Node_Str""+ maxHttpConnPerChannel+ ""String_Node_Str""+ ""String_Node_Str""+ totalHecChannels+ ""String_Node_Str""+ ""String_Node_Str""+ getString(ENRICHEMENT_CONF)+ ""String_Node_Str""+ ""String_Node_Str""+ maxBatchSize+ ""String_Node_Str""+ ""String_Node_Str""+ numberOfThreads+ ""String_Node_Str""+ ""String_Node_Str""+ lineBreaker+ ""String_Node_Str""+ ""String_Node_Str""+ trackData;
}","public String toString(){
  return ""String_Node_Str"" + splunkURI + ""String_Node_Str""+ ""String_Node_Str""+ raw+ ""String_Node_Str""+ ""String_Node_Str""+ ack+ ""String_Node_Str""+ ""String_Node_Str""+ indexes+ ""String_Node_Str""+ ""String_Node_Str""+ sourcetypes+ ""String_Node_Str""+ ""String_Node_Str""+ sources+ ""String_Node_Str""+ ""String_Node_Str""+ httpKeepAlive+ ""String_Node_Str""+ ""String_Node_Str""+ validateCertificates+ ""String_Node_Str""+ ""String_Node_Str""+ trustStorePath+ ""String_Node_Str""+ ""String_Node_Str""+ socketTimeout+ ""String_Node_Str""+ ""String_Node_Str""+ eventBatchTimeout+ ""String_Node_Str""+ ""String_Node_Str""+ ackPollInterval+ ""String_Node_Str""+ ""String_Node_Str""+ ackPollThreads+ ""String_Node_Str""+ ""String_Node_Str""+ maxHttpConnPerChannel+ ""String_Node_Str""+ ""String_Node_Str""+ totalHecChannels+ ""String_Node_Str""+ ""String_Node_Str""+ getString(ENRICHMENT_CONF)+ ""String_Node_Str""+ ""String_Node_Str""+ maxBatchSize+ ""String_Node_Str""+ ""String_Node_Str""+ numberOfThreads+ ""String_Node_Str""+ ""String_Node_Str""+ lineBreaker+ ""String_Node_Str""+ ""String_Node_Str""+ maxOutstandingEvents+ ""String_Node_Str""+ ""String_Node_Str""+ maxRetries+ ""String_Node_Str""+ ""String_Node_Str""+ trackData;
}"
40060,"public void onEventCommitted(final List<EventBatch> batches){
  for (  final EventBatch batch : batches) {
  }
}","public void onEventCommitted(final List<EventBatch> batches){
}"
40061,"private Event createHecEventFrom(SinkRecord record){
  if (connectorConfig.raw) {
    RawEvent event=new RawEvent(record.value(),record);
    event.setLineBreaker(connectorConfig.lineBreaker);
    return event;
  }
  JsonEvent event=new JsonEvent(record.value(),record);
  Map<String,String> metas=connectorConfig.topicMetas.get(record.topic());
  if (metas != null) {
    event.setIndex(metas.get(SplunkSinkConnectorConfig.INDEX));
    event.setSourcetype(metas.get(SplunkSinkConnectorConfig.SOURCETYPE));
    event.setSource(metas.get(SplunkSinkConnectorConfig.SOURCE));
    event.addFields(connectorConfig.enrichements);
  }
  if (connectorConfig.trackData) {
    Map<String,String> trackMetas=new HashMap<>();
    trackMetas.put(""String_Node_Str"",String.valueOf(record.kafkaOffset()));
    trackMetas.put(""String_Node_Str"",String.valueOf(record.timestamp()));
    trackMetas.put(""String_Node_Str"",record.topic());
    trackMetas.put(""String_Node_Str"",String.valueOf(record.kafkaPartition()));
    event.addFields(trackMetas);
  }
  return event;
}","private Event createHecEventFrom(SinkRecord record){
  if (connectorConfig.raw) {
    RawEvent event=new RawEvent(record.value(),record);
    event.setLineBreaker(connectorConfig.lineBreaker);
    return event;
  }
  JsonEvent event=new JsonEvent(record.value(),record);
  Map<String,String> metas=connectorConfig.topicMetas.get(record.topic());
  if (metas != null) {
    event.setIndex(metas.get(SplunkSinkConnectorConfig.INDEX));
    event.setSourcetype(metas.get(SplunkSinkConnectorConfig.SOURCETYPE));
    event.setSource(metas.get(SplunkSinkConnectorConfig.SOURCE));
    event.addFields(connectorConfig.enrichments);
  }
  if (connectorConfig.trackData) {
    Map<String,String> trackMetas=new HashMap<>();
    trackMetas.put(""String_Node_Str"",String.valueOf(record.kafkaOffset()));
    trackMetas.put(""String_Node_Str"",String.valueOf(record.timestamp()));
    trackMetas.put(""String_Node_Str"",record.topic());
    trackMetas.put(""String_Node_Str"",String.valueOf(record.kafkaPartition()));
    event.addFields(trackMetas);
  }
  return event;
}"
40062,"@Override public void put(Collection<SinkRecord> records){
  log.info(""String_Node_Str"",records.size());
  handleFailedBatches();
  bufferedRecords.addAll(records);
  if (bufferedRecords.size() < connectorConfig.maxBatchSize) {
    if (System.currentTimeMillis() - lastFlushed < flushWindow) {
      return;
    }
    if (bufferedRecords.isEmpty()) {
      lastFlushed=System.currentTimeMillis();
      return;
    }
  }
  records=bufferedRecords;
  bufferedRecords=new ArrayList<>();
  lastFlushed=System.currentTimeMillis();
  if (connectorConfig.raw) {
    handleRaw(records);
  }
 else {
    handleEvent(records);
  }
}","@Override public void put(Collection<SinkRecord> records){
  log.info(""String_Node_Str"",records.size());
  handleFailedBatches();
  preventTooManyOutstandingEvents();
  bufferedRecords.addAll(records);
  if (bufferedRecords.size() < connectorConfig.maxBatchSize) {
    if (System.currentTimeMillis() - lastFlushed < flushWindow) {
      return;
    }
    if (bufferedRecords.isEmpty()) {
      lastFlushed=System.currentTimeMillis();
      return;
    }
  }
  records=bufferedRecords;
  bufferedRecords=new ArrayList<>();
  lastFlushed=System.currentTimeMillis();
  if (connectorConfig.raw) {
    handleRaw(records);
  }
 else {
    handleEvent(records);
  }
}"
40063,"private void handleFailedBatches(){
  Collection<EventBatch> failed=tracker.getAndRemoveFailedRecords();
  for (  final EventBatch batch : failed) {
    send(batch);
  }
  if (!failed.isEmpty()) {
    log.info(""String_Node_Str"",failed.size());
    throw new RetriableException(new HecException(""String_Node_Str""));
  }
}","private void handleFailedBatches(){
  Collection<EventBatch> failed=tracker.getAndRemoveFailedRecords();
  for (  final EventBatch batch : failed) {
    if (connectorConfig.maxRetries > 0 && batch.getFailureCount() > connectorConfig.maxRetries) {
      log.error(""String_Node_Str"",batch.size(),connectorConfig.maxRetries);
      continue;
    }
    send(batch);
  }
  if (!failed.isEmpty()) {
    log.info(""String_Node_Str"",failed.size());
    throw new RetriableException(new HecException(""String_Node_Str""));
  }
}"
40064,"@Test(expected=ConfigException.class) public void createWithInvalidEnrichment(){
  UnitUtil uu=new UnitUtil();
  Map<String,String> config=uu.createTaskConfig();
  config.put(SplunkSinkConnectorConfig.ENRICHEMENT_CONF,""String_Node_Str"");
  SplunkSinkConnectorConfig connectorConfig=new SplunkSinkConnectorConfig(config);
}","@Test(expected=ConfigException.class) public void createWithInvalidEnrichment(){
  UnitUtil uu=new UnitUtil();
  Map<String,String> config=uu.createTaskConfig();
  config.put(SplunkSinkConnectorConfig.ENRICHMENT_CONF,""String_Node_Str"");
  SplunkSinkConnectorConfig connectorConfig=new SplunkSinkConnectorConfig(config);
}"
40065,"@Test public void create(){
  UnitUtil uu=new UnitUtil();
  uu.enrichementMap.put(""String_Node_Str"",""String_Node_Str"");
  Map<String,String> config=uu.createTaskConfig();
  SplunkSinkConnectorConfig connectorConfig=new SplunkSinkConnectorConfig(config);
  Assert.assertEquals(uu.enrichementMap,connectorConfig.enrichements);
  Assert.assertEquals(1,connectorConfig.topicMetas.size());
  Assert.assertEquals(0,connectorConfig.topicMetas.get(""String_Node_Str"").size());
  assertMeta(connectorConfig);
  commonAssert(connectorConfig);
}","@Test public void create(){
  UnitUtil uu=new UnitUtil();
  uu.enrichementMap.put(""String_Node_Str"",""String_Node_Str"");
  Map<String,String> config=uu.createTaskConfig();
  SplunkSinkConnectorConfig connectorConfig=new SplunkSinkConnectorConfig(config);
  Assert.assertEquals(uu.enrichementMap,connectorConfig.enrichments);
  Assert.assertEquals(1,connectorConfig.topicMetas.size());
  Assert.assertEquals(0,connectorConfig.topicMetas.get(""String_Node_Str"").size());
  assertMeta(connectorConfig);
  commonAssert(connectorConfig);
}"
40066,"@Test public void createWithoutEnrichment(){
  UnitUtil uu=new UnitUtil();
  Map<String,String> config=uu.createTaskConfig();
  config.put(SplunkSinkConnectorConfig.ENRICHEMENT_CONF,""String_Node_Str"");
  SplunkSinkConnectorConfig connectorConfig=new SplunkSinkConnectorConfig(config);
  Assert.assertNull(connectorConfig.enrichements);
  assertMeta(connectorConfig);
  commonAssert(connectorConfig);
  config.put(SplunkSinkConnectorConfig.ENRICHEMENT_CONF,null);
  connectorConfig=new SplunkSinkConnectorConfig(config);
  Assert.assertNull(connectorConfig.enrichements);
  assertMeta(connectorConfig);
  commonAssert(connectorConfig);
}","@Test public void createWithoutEnrichment(){
  UnitUtil uu=new UnitUtil();
  Map<String,String> config=uu.createTaskConfig();
  config.put(SplunkSinkConnectorConfig.ENRICHMENT_CONF,""String_Node_Str"");
  SplunkSinkConnectorConfig connectorConfig=new SplunkSinkConnectorConfig(config);
  Assert.assertNull(connectorConfig.enrichments);
  assertMeta(connectorConfig);
  commonAssert(connectorConfig);
  config.put(SplunkSinkConnectorConfig.ENRICHMENT_CONF,null);
  connectorConfig=new SplunkSinkConnectorConfig(config);
  Assert.assertNull(connectorConfig.enrichments);
  assertMeta(connectorConfig);
  commonAssert(connectorConfig);
}"
40067,"private void putWithSuccess(boolean raw,boolean withMeta){
  int batchSize=100;
  int total=1000;
  UnitUtil uu=new UnitUtil();
  Map<String,String> config=uu.createTaskConfig();
  config.put(SplunkSinkConnectorConfig.RAW_CONF,String.valueOf(raw));
  config.put(SplunkSinkConnectorConfig.ACK_CONF,String.valueOf(true));
  config.put(SplunkSinkConnectorConfig.MAX_BATCH_SIZE_CONF,String.valueOf(batchSize));
  if (withMeta) {
    config.put(SplunkSinkConnectorConfig.INDEX_CONF,""String_Node_Str"");
    config.put(SplunkSinkConnectorConfig.SOURCETYPE_CONF,""String_Node_Str"");
    config.put(SplunkSinkConnectorConfig.SOURCE_CONF,""String_Node_Str"");
  }
 else {
    config.put(SplunkSinkConnectorConfig.INDEX_CONF,""String_Node_Str"");
    config.put(SplunkSinkConnectorConfig.SOURCETYPE_CONF,""String_Node_Str"");
    config.put(SplunkSinkConnectorConfig.SOURCE_CONF,""String_Node_Str"");
  }
  SplunkSinkTask task=new SplunkSinkTask();
  HecMock hec=new HecMock(task);
  hec.setSendReturnResult(HecMock.success);
  task.setHec(hec);
  task.start(config);
  task.put(createSinkRecords(total));
  Assert.assertEquals(10,hec.getBatches().size());
  if (raw && withMeta) {
    for (    EventBatch batch : hec.getBatches()) {
      RawEventBatch rb=(RawEventBatch)batch;
      Assert.assertEquals(""String_Node_Str"",rb.getIndex());
      Assert.assertEquals(""String_Node_Str"",rb.getSourcetype());
      Assert.assertEquals(""String_Node_Str"",rb.getSource());
    }
  }
  if (!raw) {
    int i=0;
    ;
    for (    EventBatch batch : hec.getBatches()) {
      int j=0;
      for (      Event event : batch.getEvents()) {
        int n=i * 100 + j;
        Assert.assertEquals(String.valueOf(n),event.getFields().get(""String_Node_Str""));
        Assert.assertEquals(String.valueOf(1),event.getFields().get(""String_Node_Str""));
        Assert.assertEquals(new UnitUtil().topics,event.getFields().get(""String_Node_Str""));
        Assert.assertEquals(String.valueOf(0),event.getFields().get(""String_Node_Str""));
        j++;
      }
      i++;
    }
  }
  Map<TopicPartition,OffsetAndMetadata> offsets=new HashMap<>();
  offsets.put(new TopicPartition(uu.topics,1),new OffsetAndMetadata(1000));
  Assert.assertEquals(offsets,task.preCommit(null));
  Assert.assertTrue(task.getTracker().getAndRemoveFailedRecords().isEmpty());
  task.stop();
}","private void putWithSuccess(boolean raw,boolean withMeta){
  int batchSize=100;
  int total=1000;
  UnitUtil uu=new UnitUtil();
  Map<String,String> config=uu.createTaskConfig();
  config.put(SplunkSinkConnectorConfig.RAW_CONF,String.valueOf(raw));
  config.put(SplunkSinkConnectorConfig.ACK_CONF,String.valueOf(true));
  config.put(SplunkSinkConnectorConfig.MAX_BATCH_SIZE_CONF,String.valueOf(batchSize));
  if (withMeta) {
    config.put(SplunkSinkConnectorConfig.INDEX_CONF,""String_Node_Str"");
    config.put(SplunkSinkConnectorConfig.SOURCETYPE_CONF,""String_Node_Str"");
    config.put(SplunkSinkConnectorConfig.SOURCE_CONF,""String_Node_Str"");
  }
 else {
    config.put(SplunkSinkConnectorConfig.INDEX_CONF,""String_Node_Str"");
    config.put(SplunkSinkConnectorConfig.SOURCETYPE_CONF,""String_Node_Str"");
    config.put(SplunkSinkConnectorConfig.SOURCE_CONF,""String_Node_Str"");
  }
  SplunkSinkTask task=new SplunkSinkTask();
  HecMock hec=new HecMock(task);
  hec.setSendReturnResult(HecMock.success);
  task.setHec(hec);
  task.start(config);
  task.put(createSinkRecords(total));
  Assert.assertEquals(10,hec.getBatches().size());
  if (raw && withMeta) {
    for (    EventBatch batch : hec.getBatches()) {
      RawEventBatch rb=(RawEventBatch)batch;
      Assert.assertEquals(""String_Node_Str"",rb.getIndex());
      Assert.assertEquals(""String_Node_Str"",rb.getSourcetype());
      Assert.assertEquals(""String_Node_Str"",rb.getSource());
    }
  }
  if (!raw) {
    int i=0;
    ;
    for (    EventBatch batch : hec.getBatches()) {
      int j=0;
      for (      Event event : batch.getEvents()) {
        int n=i * 100 + j;
        Assert.assertEquals(String.valueOf(n),event.getFields().get(""String_Node_Str""));
        Assert.assertEquals(String.valueOf(1),event.getFields().get(""String_Node_Str""));
        Assert.assertEquals(new UnitUtil().topics,event.getFields().get(""String_Node_Str""));
        Assert.assertEquals(String.valueOf(0),event.getFields().get(""String_Node_Str""));
        j++;
      }
      i++;
    }
  }
  Map<TopicPartition,OffsetAndMetadata> offsets=new HashMap<>();
  offsets.put(new TopicPartition(uu.topics,1),new OffsetAndMetadata(1000));
  Assert.assertEquals(offsets,task.preCommit(new HashMap<>()));
  Assert.assertTrue(task.getTracker().getAndRemoveFailedRecords().isEmpty());
  task.stop();
}"
40068,"@Test public void putWithoutMaxBatchAligned(){
  UnitUtil uu=new UnitUtil();
  Map<String,String> config=uu.createTaskConfig();
  config.put(SplunkSinkConnectorConfig.RAW_CONF,String.valueOf(false));
  config.put(SplunkSinkConnectorConfig.ACK_CONF,String.valueOf(true));
  config.put(SplunkSinkConnectorConfig.MAX_BATCH_SIZE_CONF,String.valueOf(100));
  SplunkSinkTask task=new SplunkSinkTask();
  HecMock hec=new HecMock(task);
  hec.setSendReturnResult(HecMock.success);
  task.setHec(hec);
  task.start(config);
  task.put(createSinkRecords(120));
  Assert.assertEquals(2,hec.getBatches().size());
  Map<TopicPartition,OffsetAndMetadata> offsets=new HashMap<>();
  offsets.put(new TopicPartition(uu.topics,1),new OffsetAndMetadata(120));
  Assert.assertEquals(offsets,task.preCommit(null));
  Assert.assertTrue(task.getTracker().getAndRemoveFailedRecords().isEmpty());
  task.stop();
}","@Test public void putWithoutMaxBatchAligned(){
  UnitUtil uu=new UnitUtil();
  Map<String,String> config=uu.createTaskConfig();
  config.put(SplunkSinkConnectorConfig.RAW_CONF,String.valueOf(false));
  config.put(SplunkSinkConnectorConfig.ACK_CONF,String.valueOf(true));
  config.put(SplunkSinkConnectorConfig.MAX_BATCH_SIZE_CONF,String.valueOf(100));
  SplunkSinkTask task=new SplunkSinkTask();
  HecMock hec=new HecMock(task);
  hec.setSendReturnResult(HecMock.success);
  task.setHec(hec);
  task.start(config);
  task.put(createSinkRecords(120));
  Assert.assertEquals(2,hec.getBatches().size());
  Map<TopicPartition,OffsetAndMetadata> offsets=new HashMap<>();
  offsets.put(new TopicPartition(uu.topics,1),new OffsetAndMetadata(120));
  Assert.assertEquals(offsets,task.preCommit(new HashMap<>()));
  Assert.assertTrue(task.getTracker().getAndRemoveFailedRecords().isEmpty());
  task.stop();
}"
40069,"public Map<String,String> createTaskConfig(){
  Map<String,String> config=new HashMap<>();
  config.put(SinkConnector.TOPICS_CONFIG,topics);
  config.put(SplunkSinkConnectorConfig.TOKEN_CONF,token);
  config.put(SplunkSinkConnectorConfig.URI_CONF,uri);
  config.put(SplunkSinkConnectorConfig.RAW_CONF,String.valueOf(raw));
  config.put(SplunkSinkConnectorConfig.ACK_CONF,String.valueOf(ack));
  config.put(SplunkSinkConnectorConfig.INDEX_CONF,indexes);
  config.put(SplunkSinkConnectorConfig.SOURCETYPE_CONF,sourcetypes);
  config.put(SplunkSinkConnectorConfig.SOURCE_CONF,sources);
  config.put(SplunkSinkConnectorConfig.HTTP_KEEPALIVE_CONF,String.valueOf(httpKeepAlive));
  config.put(SplunkSinkConnectorConfig.SSL_VALIDATE_CERTIFICATES_CONF,String.valueOf(validateCertificates));
  config.put(SplunkSinkConnectorConfig.SSL_TRUSTSTORE_PATH_CONF,trustStorePath);
  config.put(SplunkSinkConnectorConfig.SSL_TRUSTSTORE_PASSWORD_CONF,trustStorePassword);
  config.put(SplunkSinkConnectorConfig.EVENT_TIMEOUT_CONF,String.valueOf(eventBatchTimeout));
  config.put(SplunkSinkConnectorConfig.ACK_POLL_INTERVAL_CONF,String.valueOf(ackPollInterval));
  config.put(SplunkSinkConnectorConfig.MAX_HTTP_CONNECTION_PER_CHANNEL_CONF,String.valueOf(maxHttpConnPerChannel));
  config.put(SplunkSinkConnectorConfig.ACK_POLL_THREADS_CONF,String.valueOf(ackPollThreads));
  config.put(SplunkSinkConnectorConfig.TOTAL_HEC_CHANNEL_CONF,String.valueOf(totalHecChannels));
  config.put(SplunkSinkConnectorConfig.SOCKET_TIMEOUT_CONF,String.valueOf(socketTimeout));
  config.put(SplunkSinkConnectorConfig.ENRICHEMENT_CONF,String.valueOf(enrichements));
  config.put(SplunkSinkConnectorConfig.TRACK_DATA_CONF,String.valueOf(trackData));
  config.put(SplunkSinkConnectorConfig.MAX_BATCH_SIZE_CONF,String.valueOf(maxBatchSize));
  config.put(SplunkSinkConnectorConfig.HEC_THREDS_CONF,String.valueOf(numOfThreads));
  return config;
}","public Map<String,String> createTaskConfig(){
  Map<String,String> config=new HashMap<>();
  config.put(SinkConnector.TOPICS_CONFIG,topics);
  config.put(SplunkSinkConnectorConfig.TOKEN_CONF,token);
  config.put(SplunkSinkConnectorConfig.URI_CONF,uri);
  config.put(SplunkSinkConnectorConfig.RAW_CONF,String.valueOf(raw));
  config.put(SplunkSinkConnectorConfig.ACK_CONF,String.valueOf(ack));
  config.put(SplunkSinkConnectorConfig.INDEX_CONF,indexes);
  config.put(SplunkSinkConnectorConfig.SOURCETYPE_CONF,sourcetypes);
  config.put(SplunkSinkConnectorConfig.SOURCE_CONF,sources);
  config.put(SplunkSinkConnectorConfig.HTTP_KEEPALIVE_CONF,String.valueOf(httpKeepAlive));
  config.put(SplunkSinkConnectorConfig.SSL_VALIDATE_CERTIFICATES_CONF,String.valueOf(validateCertificates));
  config.put(SplunkSinkConnectorConfig.SSL_TRUSTSTORE_PATH_CONF,trustStorePath);
  config.put(SplunkSinkConnectorConfig.SSL_TRUSTSTORE_PASSWORD_CONF,trustStorePassword);
  config.put(SplunkSinkConnectorConfig.EVENT_TIMEOUT_CONF,String.valueOf(eventBatchTimeout));
  config.put(SplunkSinkConnectorConfig.ACK_POLL_INTERVAL_CONF,String.valueOf(ackPollInterval));
  config.put(SplunkSinkConnectorConfig.MAX_HTTP_CONNECTION_PER_CHANNEL_CONF,String.valueOf(maxHttpConnPerChannel));
  config.put(SplunkSinkConnectorConfig.ACK_POLL_THREADS_CONF,String.valueOf(ackPollThreads));
  config.put(SplunkSinkConnectorConfig.TOTAL_HEC_CHANNEL_CONF,String.valueOf(totalHecChannels));
  config.put(SplunkSinkConnectorConfig.SOCKET_TIMEOUT_CONF,String.valueOf(socketTimeout));
  config.put(SplunkSinkConnectorConfig.ENRICHMENT_CONF,String.valueOf(enrichements));
  config.put(SplunkSinkConnectorConfig.TRACK_DATA_CONF,String.valueOf(trackData));
  config.put(SplunkSinkConnectorConfig.MAX_BATCH_SIZE_CONF,String.valueOf(maxBatchSize));
  config.put(SplunkSinkConnectorConfig.HEC_THREDS_CONF,String.valueOf(numOfThreads));
  return config;
}"
40070,"public final void addExtraFields(final Map<String,String> fields){
  for (  final Event event : events) {
    event.addFields(fields);
  }
}","public final void addExtraFields(final Map<String,String> fields){
  int newLength=0;
  for (  final Event event : events) {
    event.addFields(fields);
    newLength+=event.length();
  }
  len=newLength;
}"
40071,"public ConcurrentHec(int numberOfThreads,boolean useAck,HecClientConfig config,PollerCallback cb){
  batches=new LinkedBlockingQueue<>(100);
  executorService=Executors.newFixedThreadPool(numberOfThreads);
  initHec(numberOfThreads,useAck,config,cb);
  pollerCallback=cb;
  stopped=false;
  for (int i=0; i < numberOfThreads; i++) {
    final int id=i;
    Runnable r=() -> {
      run(id);
    }
;
    executorService.submit(r);
  }
}","public ConcurrentHec(int numberOfThreads,boolean useAck,HecClientConfig config,PollerCallback cb){
  batches=new LinkedBlockingQueue<>(100);
  ThreadFactory e=(  Runnable r) -> new Thread(r,""String_Node_Str"");
  executorService=Executors.newFixedThreadPool(numberOfThreads,e);
  initHec(numberOfThreads,useAck,config,cb);
  pollerCallback=cb;
  stopped=false;
  for (int i=0; i < numberOfThreads; i++) {
    final int id=i;
    Runnable r=() -> {
      run(id);
    }
;
    executorService.submit(r);
  }
}"
40072,"private void run(int id){
  final Hec hec=hecs.get(id);
  while (!stopped) {
    EventBatch batch;
    try {
      batch=batches.poll(1,TimeUnit.SECONDS);
    }
 catch (    InterruptedException ex) {
      continue;
    }
    send(hec,batch);
  }
  hec.close();
}","private void run(int id){
  final Hec hec=hecs.get(id);
  while (!stopped) {
    EventBatch batch;
    try {
      batch=batches.poll(1,TimeUnit.SECONDS);
    }
 catch (    InterruptedException ex) {
      continue;
    }
    if (batch != null) {
      send(hec,batch);
    }
  }
  hec.close();
}"
40073,"public void setRepeatingAlarm(Context context,String type,String time,String message){
  AlarmManager alarmManager=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);
  Intent intent=new Intent(context,AlarmReceiver.class);
  intent.putExtra(EXTRA_MESSAGE,message);
  intent.putExtra(EXTRA_TYPE,type);
  String timeArray[]=time.split(""String_Node_Str"");
  Calendar calendar=Calendar.getInstance();
  calendar.set(Calendar.HOUR_OF_DAY,Integer.parseInt(timeArray[0]));
  calendar.set(Calendar.MINUTE,Integer.parseInt(timeArray[1]));
  calendar.set(Calendar.SECOND,0);
  int requestCode=NOTIF_ID_REPEATING;
  PendingIntent pendingIntent=PendingIntent.getBroadcast(context,requestCode,intent,0);
  alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP,calendar.getTimeInMillis(),AlarmManager.INTERVAL_DAY,pendingIntent);
}","public void setRepeatingAlarm(Context context,String type,String time,String message){
  AlarmManager alarmManager=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);
  Intent intent=new Intent(context,AlarmReceiver.class);
  intent.putExtra(EXTRA_MESSAGE,message);
  intent.putExtra(EXTRA_TYPE,type);
  String timeArray[]=time.split(""String_Node_Str"");
  Calendar calendar=Calendar.getInstance();
  calendar.set(Calendar.HOUR_OF_DAY,Integer.parseInt(timeArray[0]));
  calendar.set(Calendar.MINUTE,Integer.parseInt(timeArray[1]));
  calendar.set(Calendar.SECOND,0);
  if (calendar.before(Calendar.getInstance()))   calendar.add(Calendar.DATE,1);
  int requestCode=NOTIF_ID_REPEATING;
  PendingIntent pendingIntent=PendingIntent.getBroadcast(context,requestCode,intent,PendingIntent.FLAG_UPDATE_CURRENT);
  alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP,calendar.getTimeInMillis(),AlarmManager.INTERVAL_DAY,pendingIntent);
}"
40074,"@Override public void onResponse(Call<UpcomingModel> call,Response<UpcomingModel> response){
  if (response.isSuccessful()) {
    List<ResultsItem> items=response.body().getResults();
    int index=new Random().nextInt(items.size());
    String title=items.get(index).getTitle();
    String message=items.get(index).getOverview();
    int notifId=200;
    showNotification(getApplicationContext(),title,message,notifId);
  }
 else   loadFailed();
}","@Override public void onResponse(Call<UpcomingModel> call,Response<UpcomingModel> response){
  if (response.isSuccessful()) {
    List<ResultsItem> items=response.body().getResults();
    int index=new Random().nextInt(items.size());
    ResultsItem item=items.get(index);
    String title=items.get(index).getTitle();
    String message=items.get(index).getOverview();
    int notifId=200;
    showNotification(getApplicationContext(),title,message,notifId,item);
  }
 else   loadFailed();
}"
40075,"private void loadData(){
  apiCall=apiClient.getService().getUpcomingMovie();
  apiCall.enqueue(new Callback<UpcomingModel>(){
    @Override public void onResponse(    Call<UpcomingModel> call,    Response<UpcomingModel> response){
      if (response.isSuccessful()) {
        List<ResultsItem> items=response.body().getResults();
        int index=new Random().nextInt(items.size());
        String title=items.get(index).getTitle();
        String message=items.get(index).getOverview();
        int notifId=200;
        showNotification(getApplicationContext(),title,message,notifId);
      }
 else       loadFailed();
    }
    @Override public void onFailure(    Call<UpcomingModel> call,    Throwable t){
      loadFailed();
    }
  }
);
}","private void loadData(){
  apiCall=apiClient.getService().getUpcomingMovie();
  apiCall.enqueue(new Callback<UpcomingModel>(){
    @Override public void onResponse(    Call<UpcomingModel> call,    Response<UpcomingModel> response){
      if (response.isSuccessful()) {
        List<ResultsItem> items=response.body().getResults();
        int index=new Random().nextInt(items.size());
        ResultsItem item=items.get(index);
        String title=items.get(index).getTitle();
        String message=items.get(index).getOverview();
        int notifId=200;
        showNotification(getApplicationContext(),title,message,notifId,item);
      }
 else       loadFailed();
    }
    @Override public void onFailure(    Call<UpcomingModel> call,    Throwable t){
      loadFailed();
    }
  }
);
}"
40076,"private void showNotification(Context context,String title,String message,int notifId){
  NotificationManager notificationManagerCompat=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
  Uri alarmSound=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
  NotificationCompat.Builder builder=new NotificationCompat.Builder(context).setSmallIcon(R.mipmap.ic_launcher_round).setContentTitle(title).setContentText(message).setColor(ContextCompat.getColor(context,android.R.color.black)).setVibrate(new long[]{1000,1000,1000,1000,1000}).setSound(alarmSound);
  notificationManagerCompat.notify(notifId,builder.build());
}","private void showNotification(Context context,String title,String message,int notifId,ResultsItem item){
  NotificationManager notificationManagerCompat=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
  Uri alarmSound=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
  Intent intent=new Intent(context,DetailActivity.class);
  intent.putExtra(DetailActivity.MOVIE_ITEM,new Gson().toJson(item));
  PendingIntent pendingIntent=PendingIntent.getActivity(context,notifId,intent,PendingIntent.FLAG_UPDATE_CURRENT);
  NotificationCompat.Builder builder=new NotificationCompat.Builder(context).setSmallIcon(R.mipmap.ic_launcher_round).setContentTitle(title).setContentText(message).setColor(ContextCompat.getColor(context,android.R.color.transparent)).setContentIntent(pendingIntent).setAutoCancel(true).setVibrate(new long[]{1000,1000,1000,1000,1000}).setSound(alarmSound);
  notificationManagerCompat.notify(notifId,builder.build());
}"
40077,"public void createPeriodicTask(){
  Task periodicTask=new PeriodicTask.Builder().setService(SchedulerService.class).setPeriod(60).setFlex(10).setTag(SchedulerService.TAG_TASK_UPCOMING).setPersisted(true).build();
  mGcmNetworkManager.schedule(periodicTask);
}","public void createPeriodicTask(){
  Task periodicTask=new PeriodicTask.Builder().setService(SchedulerService.class).setPeriod(3 * 60 * 1000).setFlex(10).setTag(SchedulerService.TAG_TASK_UPCOMING).setPersisted(true).build();
  mGcmNetworkManager.schedule(periodicTask);
}"
40078,"private void loadDummyData(){
  list.clear();
  for (int i=0; i <= 10; i++) {
    ResultsItem item=new ResultsItem();
    item.setTitle(""String_Node_Str"" + i);
    item.setOverview(""String_Node_Str"" + i);
    item.setReleaseDate(""String_Node_Str"");
    list.add(item);
  }
  adapter.replaceAll(list);
}","private void loadDummyData(){
  list.clear();
  for (int i=0; i <= 10; i++) {
    ResultsItem item=new ResultsItem();
    item.setTitle(""String_Node_Str"" + i);
    item.setOverview(""String_Node_Str"" + i);
    item.setReleaseDate(DateTime.getLongDate(""String_Node_Str"" + i));
    list.add(item);
  }
  adapter.replaceAll(list);
}"
40079,"/** 
 * Creates a repository with the given ID, label and optional override parameters.
 * @param repositoryId    a new repository ID
 * @param repositoryLabel a repository label, or null if none should be set
 * @param overrides       a map of repository creation parameters that override the defaults, or null if none should be overridden
 * @throws RDFParseException
 * @throws IOException
 * @throws RDFHandlerException
 * @throws GraphUtilException
 * @throws RepositoryConfigException
 * @throws RepositoryException
 */
public void createRepository(String repositoryId,String repositoryLabel,Map<String,String> overrides) throws RDFParseException, IOException, RDFHandlerException, RepositoryConfigException, RepositoryException {
  if (repositoryManager.hasRepositoryConfig(repositoryId)) {
    throw new RuntimeException(""String_Node_Str"" + repositoryId + ""String_Node_Str"");
  }
  TreeModel graph=new TreeModel();
  InputStream config=EmbeddedGraphDB.class.getResourceAsStream(""String_Node_Str"");
  RDFParser rdfParser=Rio.createParser(RDFFormat.TURTLE);
  rdfParser.setRDFHandler(new StatementCollector(graph));
  rdfParser.parse(config,RepositoryConfigSchema.NAMESPACE);
  config.close();
  Resource repositoryNode=Models.subject(graph.filter(null,RDF.TYPE,RepositoryConfigSchema.REPOSITORY)).orElse(null);
  graph.add(repositoryNode,RepositoryConfigSchema.REPOSITORYID,SimpleValueFactory.getInstance().createLiteral(repositoryId));
  if (repositoryLabel != null) {
    graph.add(repositoryNode,RDFS.LABEL,SimpleValueFactory.getInstance().createLiteral(repositoryLabel));
  }
  if (overrides != null) {
    Resource configNode=(Resource)Models.object(graph.filter(null,SailRepositorySchema.SAILIMPL,null)).orElse(null);
    for (    Map.Entry<String,String> e : overrides.entrySet()) {
      IRI key=SimpleValueFactory.getInstance().createIRI(OWLIMSailSchema.NAMESPACE + e.getKey());
      Literal value=SimpleValueFactory.getInstance().createLiteral(e.getValue());
      graph.remove(configNode,key,null);
      graph.add(configNode,key,value);
    }
  }
  RepositoryConfig repositoryConfig=RepositoryConfig.create(graph,repositoryNode);
  repositoryManager.addRepositoryConfig(repositoryConfig);
}","/** 
 * Creates a repository with the given ID, label and optional override parameters.
 * @param repositoryId a new repository ID
 * @param repositoryLabel a repository label, or null if none should be set
 * @param overrides a map of repository creation parameters that override the defaults, or null if none should be overridden
 * @throws RDFParseException
 * @throws IOException
 * @throws RDFHandlerException
 * @throws GraphUtilException
 * @throws RepositoryConfigException
 * @throws RepositoryException
 */
public void createRepository(String repositoryId,String repositoryLabel,Map<String,String> overrides) throws RDFParseException, IOException, RDFHandlerException, RepositoryConfigException, RepositoryException {
  if (repositoryManager.hasRepositoryConfig(repositoryId)) {
    repositoryManager.removeRepository(repositoryId);
  }
  TreeModel graph=new TreeModel();
  InputStream config=EmbeddedGraphDB.class.getResourceAsStream(""String_Node_Str"");
  RDFParser rdfParser=Rio.createParser(RDFFormat.TURTLE);
  rdfParser.setRDFHandler(new StatementCollector(graph));
  rdfParser.parse(config,RepositoryConfigSchema.NAMESPACE);
  config.close();
  Resource repositoryNode=Models.subject(graph.filter(null,RDF.TYPE,RepositoryConfigSchema.REPOSITORY)).orElse(null);
  graph.add(repositoryNode,RepositoryConfigSchema.REPOSITORYID,SimpleValueFactory.getInstance().createLiteral(repositoryId));
  if (repositoryLabel != null) {
    graph.add(repositoryNode,RDFS.LABEL,SimpleValueFactory.getInstance().createLiteral(repositoryLabel));
  }
  if (overrides != null) {
    Resource configNode=(Resource)Models.object(graph.filter(null,SailRepositorySchema.SAILIMPL,null)).orElse(null);
    for (    Map.Entry<String,String> e : overrides.entrySet()) {
      IRI key=SimpleValueFactory.getInstance().createIRI(OWLIMSailSchema.NAMESPACE + e.getKey());
      Literal value=SimpleValueFactory.getInstance().createLiteral(e.getValue());
      graph.remove(configNode,key,null);
      graph.add(configNode,key,value);
    }
  }
  RepositoryConfig repositoryConfig=RepositoryConfig.create(graph,repositoryNode);
  repositoryManager.addRepositoryConfig(repositoryConfig);
}"
40080,"/** 
 * A convenience method to create a temporary repository and open a connection to it. When the connection is closed all underlying objects (EmbeddedGraphDB and LocalRepositoryManager) will be closed as well. The temporary repository is created in a unique temporary directory that will be deleted when the program terminates.
 * @param ruleset ruleset to use for the repository, e.g. owl-horst-optimized
 * @return a RepositoryConnection to a new temporary repository
 * @throws IOException
 * @throws RepositoryException
 * @throws RDFParseException
 * @throws GraphUtilException
 * @throws RepositoryConfigException
 * @throws RDFHandlerException
 */
public static RepositoryConnection openConnectionToTemporaryRepository(String ruleset) throws IOException, RepositoryException, RDFParseException, RepositoryConfigException, RDFHandlerException {
  File baseDir=FileUtil.createTempDir(""String_Node_Str"");
  baseDir.deleteOnExit();
  final EmbeddedGraphDB embeddedGraphDB=new EmbeddedGraphDB(baseDir.getAbsolutePath());
  embeddedGraphDB.createRepository(""String_Node_Str"",null,Collections.singletonMap(""String_Node_Str"",ruleset));
  Repository repository=embeddedGraphDB.getRepository(""String_Node_Str"");
  RepositoryConnection connection=repository.getConnection();
  return new RepositoryConnectionWrapper(repository,connection){
    @Override public void close() throws RepositoryException {
      super.close();
      try {
        embeddedGraphDB.close();
      }
 catch (      IOException e) {
        throw new RepositoryException(e);
      }
    }
  }
;
}","/** 
 * A convenience method to create a temporary repository and open a connection to it. When the connection is closed all underlying objects (EmbeddedGraphDB and LocalRepositoryManager) will be closed as well. The temporary repository is created in a unique temporary directory that will be deleted when the program terminates.
 * @param ruleset ruleset to use for the repository, e.g. owl-horst-optimized
 * @return a RepositoryConnection to a new temporary repository
 * @throws IOException
 * @throws RepositoryException
 * @throws RDFParseException
 * @throws GraphUtilException
 * @throws RepositoryConfigException
 * @throws RDFHandlerException
 */
public static RepositoryConnection openConnectionToTemporaryRepository(String ruleset) throws IOException {
  File baseDir=FileUtil.createTempDir(""String_Node_Str"");
  baseDir.deleteOnExit();
  try {
    singleton=new EmbeddedGraphDB(baseDir.getAbsolutePath());
    singleton.createRepository(""String_Node_Str"",null,Collections.singletonMap(""String_Node_Str"",ruleset));
    Repository repository=singleton.getRepository(""String_Node_Str"");
    RepositoryConnection connection=repository.getConnection();
    return new RepositoryConnectionWrapper(repository,connection){
      @Override public void close() throws RepositoryException {
        super.close();
        try {
          if (singleton != null) {
            singleton.close();
          }
        }
 catch (        IOException e) {
          throw new RepositoryException(e);
        }
      }
    }
;
  }
 catch (  RepositoryException e) {
    singleton.close();
    singleton=null;
    throw e;
  }
}"
40081,"/** 
 * Creates a new embedded instance of GraphDB in the provided directory.
 * @param baseDir a directory where to store repositories
 * @throws RepositoryException
 */
public EmbeddedGraphDB(String baseDir) throws RepositoryException {
  repositoryManager=new LocalRepositoryManager(new File(baseDir));
  repositoryManager.initialize();
}","/** 
 * Creates a new embedded instance of GraphDB in the provided directory.
 * @param baseDir a directory where to store repositories
 * @throws RepositoryException
 */
private EmbeddedGraphDB(String baseDir) throws RepositoryException {
  repositoryManager=new LocalRepositoryManager(new File(baseDir));
  repositoryManager.initialize();
}"
40082,"@Override public void close() throws RepositoryException {
  super.close();
  try {
    embeddedGraphDB.close();
  }
 catch (  IOException e) {
    throw new RepositoryException(e);
  }
}","@Override public void close() throws RepositoryException {
  super.close();
  try {
    if (singleton != null) {
      singleton.close();
    }
  }
 catch (  IOException e) {
    throw new RepositoryException(e);
  }
}"
40083,"protected String generateItemID(){
  String id=UUID.randomUUID().toString();
  return id.substring(0,id.indexOf('-'));
}",protected abstract String generateItemID();
40084,"protected String getItemID(HttpServletRequest req){
  String uri=req.getRequestURI();
  return uri.substring(uri.lastIndexOf(""String_Node_Str"") + 1,uri.length());
}",protected abstract String getItemID(HttpServletRequest req);
40085,"private boolean hasExpired(String uri){
  Resource res=ResourceFactory.createResource(uri);
  try (RDFConnection conn=Connector.getConnection()){
    return Txn.calculateRead(conn,() -> {
      Query q=Queries.hasExpired(res);
      return conn.queryAsk(q);
    }
);
  }
 }","boolean hasExpired(){
  Resource res=ResourceFactory.createResource(uri);
  try (RDFConnection conn=Connector.getConnection()){
    return Txn.calculateRead(conn,() -> {
      Query q=Queries.hasExpired(res);
      return conn.queryAsk(q);
    }
);
  }
 }"
40086,"@Override public void get(Map<String,String> parameters,OutputStream out) throws RESTException {
  if (hasExpired(uri)) {
    delete(parameters);
    throw new NotFoundException();
  }
  super.get(parameters,out);
}","@Override public void get(Map<String,String> parameters,OutputStream out) throws RESTException {
  if (hasExpired()) {
    delete(parameters);
    throw new NotFoundException();
  }
  super.get(parameters,out);
}"
40087,"@Override public void delete(Map<String,String> parameters) throws RESTException {
  super.delete(parameters);
  try (RDFConnection conn=Connector.getConnection()){
    Txn.executeWrite(conn,() -> {
      removeDocument(uri,conn);
    }
);
  }
 }","@Override public void delete(Map<String,String> parameters) throws RESTException {
  super.delete(parameters);
  try (RDFConnection conn=Connector.getConnection()){
    Txn.executeWrite(conn,() -> {
      removeDocument(uri,conn);
    }
);
  }
   ThingDirectory.LOG.info(""String_Node_Str"" + path);
}"
40088,"@Override public RESTResource post(Map<String,String> parameters,InputStream payload) throws RESTException {
  String id=idQueue.poll();
  String childPath=path + ""String_Node_Str"" + (id != null ? id : generateChildID());
  RESTResource child=factory.create(childPath,parameters,payload);
  children.add(child);
  for (  RESTResourceListener l : listeners) {
    l.onCreate(child);
  }
  return child;
}","@Override public RESTResource post(Map<String,String> parameters,InputStream payload) throws RESTException {
  String id=idQueue.poll();
  String childPath=path + ""String_Node_Str"" + (id != null ? id : generateChildID());
  RESTResource child=factory.create(childPath,parameters,payload);
  children.add(child);
  for (  RESTResourceListener l : listeners) {
    l.onCreate(child);
  }
  child.addListener(new RESTResourceListener(){
    @Override public void onDelete(    RESTResource resource){
      children.remove(resource);
    }
    @Override public void onCreate(    RESTResource resource){
    }
  }
);
  return child;
}"
40089,"@Override protected void doPut(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  try {
    resource.put(params(req),req.getInputStream());
  }
 catch (  BadRequestException e) {
    resp.sendError(400);
  }
catch (  RESTException e) {
    resp.sendError(500);
  }
}","@Override protected void doPut(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  try {
    RESTResource res=select(req);
    res.put(params(req),req.getInputStream());
  }
 catch (  BadRequestException e) {
    resp.sendError(400);
  }
catch (  NotFoundException e) {
    resp.sendError(404);
  }
catch (  RESTException e) {
    resp.sendError(500);
  }
}"
40090,"@Override protected void doDelete(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  try {
    resource.delete(params(req));
  }
 catch (  BadRequestException e) {
    resp.sendError(400);
  }
catch (  RESTException e) {
    resp.sendError(500);
  }
}","@Override protected void doDelete(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  try {
    RESTResource res=select(req);
    res.delete(params(req));
  }
 catch (  BadRequestException e) {
    resp.sendError(400);
  }
catch (  NotFoundException e) {
    resp.sendError(404);
  }
catch (  RESTException e) {
    resp.sendError(500);
  }
}"
40091,"@Override protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  try {
    RESTResource child=resource.post(params(req),req.getInputStream());
    resp.setStatus(201);
    resp.setHeader(""String_Node_Str"",child.getPath());
  }
 catch (  BadRequestException e) {
    resp.sendError(400);
  }
catch (  RESTException e) {
    resp.sendError(500);
  }
}","@Override protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  try {
    RESTResource res=select(req);
    RESTResource child=res.post(params(req),req.getInputStream());
    resp.setStatus(201);
    resp.setHeader(""String_Node_Str"",child.getPath());
  }
 catch (  BadRequestException e) {
    resp.sendError(400);
  }
catch (  NotFoundException e) {
    resp.sendError(404);
  }
catch (  RESTException e) {
    resp.sendError(500);
  }
}"
40092,"@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  try {
    resource.get(params(req),resp.getOutputStream());
    resp.setContentType(resource.getContentType());
  }
 catch (  BadRequestException e) {
    resp.sendError(400);
  }
catch (  RESTException e) {
    resp.sendError(500);
  }
}","@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  try {
    RESTResource res=select(req);
    res.get(params(req),resp.getOutputStream());
    resp.setContentType(res.getContentType());
  }
 catch (  BadRequestException e) {
    resp.sendError(400);
  }
catch (  NotFoundException e) {
    resp.sendError(404);
  }
catch (  RESTException e) {
    resp.sendError(500);
  }
}"
40093,"@Override public void onCreate(RESTResource resource){
  ServletHolder holder=new ServletHolder(new HTTPResourceContainer(resource));
  handler.addServletWithMapping(holder,resource.getPath());
  resource.addListener(this);
}","@Override public void onCreate(RESTResource resource){
  if (!isMapped(resource)) {
    ServletHolder holder=new ServletHolder(new HTTPResourceContainer(resource));
    handler.addServletWithMapping(holder,resource.getPath());
    resource.addListener(this);
    if (resource instanceof CollectionResource && !(resource instanceof IndexResource)) {
      HttpServlet collectionContainer=new HTTPCollectionContainer((CollectionResource)resource);
      ServletHolder collectionHolder=new ServletHolder(collectionContainer);
      handler.addServletWithMapping(collectionHolder,resource.getPath() + ""String_Node_Str"");
    }
  }
}"
40094,"public static void main(String[] args) throws Exception {
  int portCoAP=5683;
  int portHTTP=8080;
  String loc=""String_Node_Str"";
  String lucene=""String_Node_Str"";
  if (args.length >= 1) {
    loc=args[0];
  }
  if (args.length >= 2) {
    portCoAP=Integer.parseInt(args[1]);
  }
  if (args.length >= 3) {
    portHTTP=Integer.parseInt(args[2]);
  }
  if (args.length >= 4) {
    lucene=args[3];
  }
  Repository.get().init(loc,""String_Node_Str"",lucene);
  RESTHandler root=new WelcomePageHandler(servers);
  servers.add(new CoAPServer(portCoAP,root));
  servers.add(new HTTPServer(portHTTP,root));
  for (  RESTServerInstance i : servers) {
    i.add(""String_Node_Str"",new TDLookUpHandler(servers));
    i.add(""String_Node_Str"",new TDLookUpEPHandler(servers));
    i.add(""String_Node_Str"",new TDLookUpSEMHandler(servers));
    i.add(""String_Node_Str"",new ThingDescriptionCollectionHandler(servers));
    for (    String td : listThingDescriptions()) {
      i.add(""String_Node_Str"" + td,new ThingDescriptionHandler(td,servers));
    }
    i.start();
  }
  String fileName=""String_Node_Str"";
  for (  RESTServerInstance i : servers) {
    i.join();
  }
  Repository.get().terminate();
}","public static void main(String[] args) throws Exception {
  int portCoAP=5683;
  int portHTTP=8080;
  String loc=""String_Node_Str"";
  String lucene=""String_Node_Str"";
  if (args.length >= 1) {
    loc=args[0];
  }
  if (args.length >= 2) {
    portCoAP=Integer.parseInt(args[1]);
  }
  if (args.length >= 3) {
    portHTTP=Integer.parseInt(args[2]);
  }
  if (args.length >= 4) {
    lucene=args[3];
  }
  Repository.get().init(loc,""String_Node_Str"",lucene);
  RESTHandler root=new WelcomePageHandler(servers);
  servers.add(new CoAPServer(portCoAP,root));
  servers.add(new HTTPServer(portHTTP,root));
  for (  RESTServerInstance i : servers) {
    i.add(""String_Node_Str"",new TDLookUpHandler(servers));
    i.add(""String_Node_Str"",new TDLookUpEPHandler(servers));
    i.add(""String_Node_Str"",new TDLookUpSEMHandler(servers));
    i.add(""String_Node_Str"",new ThingDescriptionCollectionHandler(servers));
    for (    String td : listThingDescriptions()) {
      i.add(""String_Node_Str"" + td,new ThingDescriptionHandler(td,servers));
    }
    i.start();
  }
  String fileName=""String_Node_Str"";
  InputStream in=Repository.get().getClass().getClassLoader().getResourceAsStream(fileName);
  ThingDescriptionUtils.loadOntology(in);
  for (  RESTServerInstance i : servers) {
    i.join();
  }
  Repository.get().terminate();
}"
40095,"/** 
 * Loads an ontology to the triple store, in the default graph.
 * @param fileName File name with the ontology context.
 */
public static void loadOntology(String fileName){
  List<String> ont=new ArrayList<>();
  Dataset dataset=Repository.get().dataset;
  dataset.begin(ReadWrite.READ);
  try {
    String prefix=StrUtils.strjoinNL(""String_Node_Str"",""String_Node_Str"");
    String query=prefix + ""String_Node_Str"";
    try (QueryExecution qexec=QueryExecutionFactory.create(query,dataset)){
      ResultSet result=qexec.execSelect();
      while (result.hasNext()) {
        ont.add(result.next().get(""String_Node_Str"").toString());
      }
    }
   }
  finally {
    dataset.end();
  }
  if (ont.isEmpty()) {
    dataset=Repository.get().dataset;
    dataset.begin(ReadWrite.WRITE);
    try {
      Model m=dataset.getDefaultModel();
      RDFDataMgr.read(m,fileName);
      dataset.commit();
    }
  finally {
      dataset.end();
    }
  }
}","/** 
 * Loads an ontology to the triple store, in the default graph.
 * @param fileName File name with the ontology context.
 */
public static void loadOntology(InputStream fileName){
  List<String> ont=new ArrayList<>();
  Dataset dataset=Repository.get().dataset;
  dataset.begin(ReadWrite.READ);
  try {
    String prefix=StrUtils.strjoinNL(""String_Node_Str"",""String_Node_Str"");
    String query=prefix + ""String_Node_Str"";
    try (QueryExecution qexec=QueryExecutionFactory.create(query,dataset)){
      ResultSet result=qexec.execSelect();
      while (result.hasNext()) {
        ont.add(result.next().get(""String_Node_Str"").toString());
      }
    }
   }
  finally {
    dataset.end();
  }
  if (ont.isEmpty()) {
    dataset=Repository.get().dataset;
    dataset.begin(ReadWrite.WRITE);
    try {
      Model m=dataset.getDefaultModel();
      RDFDataMgr.read(m,fileName,Lang.TURTLE);
      dataset.commit();
    }
  finally {
      dataset.end();
    }
  }
}"
40096,"@Test public void testREST() throws IOException, URISyntaxException {
  RESTResource resource;
  byte[] content;
  String tdId, tdId2, td;
  Map<String,String> parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",baseUri);
  String tdUri=""String_Node_Str"";
  URL path=Repository.class.getClassLoader().getResource(""String_Node_Str"");
  content=getThingDescription(path.toURI());
  resource=tdch.post(new URI(baseUri + ""String_Node_Str""),parameters,new ByteArrayInputStream(content));
  tdId=resource.path;
  td=ThingDescriptionUtils.getThingDescriptionIdFromUri(tdUri);
  Assert.assertEquals(""String_Node_Str"",baseUri + tdId,td);
  String tdUri2=""String_Node_Str"";
  path=Repository.class.getClassLoader().getResource(""String_Node_Str"");
  content=getThingDescription(path.toURI());
  resource=tdch.post(new URI(baseUri + ""String_Node_Str""),parameters,new ByteArrayInputStream(content));
  tdId2=resource.path;
  td=ThingDescriptionUtils.getThingDescriptionIdFromUri(tdUri2);
  Assert.assertEquals(""String_Node_Str"",baseUri + tdId2,td);
  Set<String> tdIds;
  JsonObject fanQR;
  parameters.clear();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  resource=tdch.get(new URI(baseUri + ""String_Node_Str""),parameters);
  fanQR=JSON.parse(resource.content);
  tdIds=fanQR.keys();
  Assert.assertFalse(""String_Node_Str"",tdIds.isEmpty());
  Assert.assertTrue(""String_Node_Str"",tdIds.contains(tdId));
  parameters.clear();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  resource=tdch.get(new URI(baseUri + ""String_Node_Str""),parameters);
  fanQR=JSON.parse(resource.content);
  tdIds=fanQR.keys();
  Assert.assertFalse(""String_Node_Str"",tdIds.isEmpty());
  Assert.assertTrue(""String_Node_Str"",tdIds.contains(tdId));
  Assert.assertFalse(""String_Node_Str"",tdIds.contains(tdId2));
  ThingDescriptionHandler tdh=new ThingDescriptionHandler(tdId,Repository.get().servers);
  resource=tdh.get(new URI(baseUri + tdId),null);
  JsonObject o=JSON.parse(resource.content);
  JsonValue v=o.get(""String_Node_Str"").getAsArray().get(0);
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"" + tdUri + ""String_Node_Str"",v.toString());
  path=Repository.class.getClassLoader().getResource(""String_Node_Str"");
  content=getThingDescription(path.toURI());
  tdh.put(new URI(baseUri + tdId),new HashMap<String,String>(),new ByteArrayInputStream(content));
  RESTResource resource2=tdh.get(new URI(baseUri + tdId),null);
  JsonObject o2=JSON.parse(resource2.content);
  JsonValue v2=o2.get(""String_Node_Str"");
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",v2.toString());
  tdh.delete(new URI(baseUri + tdId),null,null);
  td=ThingDescriptionUtils.getThingDescriptionIdFromUri(tdUri);
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",td);
  tdh.delete(new URI(baseUri + tdId2),null,null);
  td=ThingDescriptionUtils.getThingDescriptionIdFromUri(tdUri2);
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",td);
}","@Test public void testREST() throws IOException, URISyntaxException {
  RESTResource resource;
  byte[] content;
  String tdId, tdId2, td;
  Map<String,String> parameters=new HashMap<String,String>();
  parameters.put(""String_Node_Str"",baseUri);
  String tdUri=""String_Node_Str"";
  InputStream in=Repository.get().getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
  resource=tdch.post(new URI(baseUri + ""String_Node_Str""),parameters,in);
  tdId=resource.path;
  td=ThingDescriptionUtils.getThingDescriptionIdFromUri(tdUri);
  Assert.assertEquals(""String_Node_Str"",baseUri + tdId,td);
  String tdUri2=""String_Node_Str"";
  in=Repository.get().getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
  resource=tdch.post(new URI(baseUri + ""String_Node_Str""),parameters,in);
  tdId2=resource.path;
  td=ThingDescriptionUtils.getThingDescriptionIdFromUri(tdUri2);
  Assert.assertEquals(""String_Node_Str"",baseUri + tdId2,td);
  Set<String> tdIds;
  JsonObject fanQR;
  parameters.clear();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  resource=tdch.get(new URI(baseUri + ""String_Node_Str""),parameters);
  fanQR=JSON.parse(resource.content);
  tdIds=fanQR.keys();
  Assert.assertFalse(""String_Node_Str"",tdIds.isEmpty());
  Assert.assertTrue(""String_Node_Str"",tdIds.contains(tdId));
  parameters.clear();
  parameters.put(""String_Node_Str"",""String_Node_Str"");
  resource=tdch.get(new URI(baseUri + ""String_Node_Str""),parameters);
  fanQR=JSON.parse(resource.content);
  tdIds=fanQR.keys();
  Assert.assertFalse(""String_Node_Str"",tdIds.isEmpty());
  Assert.assertTrue(""String_Node_Str"",tdIds.contains(tdId));
  Assert.assertFalse(""String_Node_Str"",tdIds.contains(tdId2));
  ThingDescriptionHandler tdh=new ThingDescriptionHandler(tdId,Repository.get().servers);
  resource=tdh.get(new URI(baseUri + tdId),null);
  JsonObject o=JSON.parse(resource.content);
  JsonValue v=o.get(""String_Node_Str"").getAsArray().get(0);
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"" + tdUri + ""String_Node_Str"",v.toString());
  in=Repository.get().getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
  content=IOUtils.toByteArray(in);
  tdh.put(new URI(baseUri + tdId),new HashMap<String,String>(),new ByteArrayInputStream(content));
  RESTResource resource2=tdh.get(new URI(baseUri + tdId),null);
  JsonObject o2=JSON.parse(resource2.content);
  JsonValue v2=o2.get(""String_Node_Str"");
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",v2.toString());
  tdh.delete(new URI(baseUri + tdId),null,null);
  td=ThingDescriptionUtils.getThingDescriptionIdFromUri(tdUri);
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",td);
  tdh.delete(new URI(baseUri + tdId2),null,null);
  td=ThingDescriptionUtils.getThingDescriptionIdFromUri(tdUri2);
  Assert.assertEquals(""String_Node_Str"",""String_Node_Str"",td);
}"
40097,"public static void main(String[] args) throws Exception {
  int portCoAP=5683;
  int portHTTP=8080;
  String loc=""String_Node_Str"";
  String lucene=""String_Node_Str"";
  Options options=new Options();
  options.addOption(""String_Node_Str"",true,""String_Node_Str"");
  options.addOption(""String_Node_Str"",true,""String_Node_Str"");
  options.addOption(""String_Node_Str"",true,""String_Node_Str"");
  options.addOption(""String_Node_Str"",true,""String_Node_Str"");
  options.addOption(""String_Node_Str"",false,""String_Node_Str"");
  CommandLineParser parser=new DefaultParser();
  CommandLine cmd=parser.parse(options,args);
  if (cmd.hasOption(""String_Node_Str"")) {
    portCoAP=Integer.parseInt(cmd.getOptionValue(""String_Node_Str""));
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    portHTTP=Integer.parseInt(cmd.getOptionValue(""String_Node_Str""));
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    loc=cmd.getOptionValue(""String_Node_Str"");
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    lucene=cmd.getOptionValue(""String_Node_Str"");
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(""String_Node_Str"",options);
    System.exit(0);
  }
  Repository.get().init(loc,""String_Node_Str"",lucene);
  RESTHandler root=new WelcomePageHandler(servers);
  servers.add(new CoAPServer(portCoAP,root));
  servers.add(new HTTPServer(portHTTP,root));
  for (  RESTServerInstance i : servers) {
    i.add(""String_Node_Str"" + OpenAPISpecHandler.FILENAME,new OpenAPISpecHandler(servers));
    i.add(""String_Node_Str"",new TDLookUpHandler(servers));
    i.add(""String_Node_Str"",new TDLookUpEPHandler(servers));
    i.add(""String_Node_Str"",new TDLookUpSEMHandler(servers));
    i.add(""String_Node_Str"",new ThingDescriptionCollectionHandler(servers));
    for (    String td : listThingDescriptions()) {
      i.add(""String_Node_Str"" + td,new ThingDescriptionHandler(td,servers));
    }
    i.add(""String_Node_Str"",new VocabularyCollectionHandler(servers));
    for (    String vocab : listThingDescriptions()) {
      i.add(""String_Node_Str"" + vocab,new VocabularyHandler(vocab,servers));
    }
    i.start();
  }
  String fileName=""String_Node_Str"";
  InputStream in=Repository.get().getClass().getClassLoader().getResourceAsStream(fileName);
  ThingDescriptionUtils.loadOntology(in);
  for (  RESTServerInstance i : servers) {
    i.join();
  }
  Repository.get().terminate();
}","public static void main(String[] args) throws Exception {
  int portCoAP=5683;
  int portHTTP=8080;
  String loc=""String_Node_Str"";
  String lucene=""String_Node_Str"";
  Options options=new Options();
  options.addOption(""String_Node_Str"",true,""String_Node_Str"");
  options.addOption(""String_Node_Str"",true,""String_Node_Str"");
  options.addOption(""String_Node_Str"",true,""String_Node_Str"");
  options.addOption(""String_Node_Str"",true,""String_Node_Str"");
  options.addOption(""String_Node_Str"",false,""String_Node_Str"");
  CommandLineParser parser=new DefaultParser();
  CommandLine cmd=parser.parse(options,args);
  if (cmd.hasOption(""String_Node_Str"")) {
    portCoAP=Integer.parseInt(cmd.getOptionValue(""String_Node_Str""));
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    portHTTP=Integer.parseInt(cmd.getOptionValue(""String_Node_Str""));
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    loc=cmd.getOptionValue(""String_Node_Str"");
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    lucene=cmd.getOptionValue(""String_Node_Str"");
  }
  if (cmd.hasOption(""String_Node_Str"")) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(""String_Node_Str"",options);
    System.exit(0);
  }
  Repository.get().init(loc,""String_Node_Str"",lucene);
  RESTHandler root=new WelcomePageHandler(servers);
  servers.add(new CoAPServer(portCoAP,root));
  servers.add(new HTTPServer(portHTTP,root));
  for (  RESTServerInstance i : servers) {
    i.add(""String_Node_Str"" + OpenAPISpecHandler.FILENAME,new OpenAPISpecHandler(servers));
    i.add(""String_Node_Str"",new TDLookUpHandler(servers));
    i.add(""String_Node_Str"",new TDLookUpEPHandler(servers));
    i.add(""String_Node_Str"",new TDLookUpSEMHandler(servers));
    i.add(""String_Node_Str"",new ThingDescriptionCollectionHandler(servers));
    for (    String td : listThingDescriptions()) {
      i.add(""String_Node_Str"" + td,new ThingDescriptionHandler(td,servers));
    }
    i.add(""String_Node_Str"",new VocabularyCollectionHandler(servers));
    for (    String vocab : listVocabularies()) {
      i.add(""String_Node_Str"" + vocab,new VocabularyHandler(vocab,servers));
    }
    i.start();
  }
  String fileName=""String_Node_Str"";
  InputStream in=Repository.get().getClass().getClassLoader().getResourceAsStream(fileName);
  ThingDescriptionUtils.loadOntology(in);
  for (  RESTServerInstance i : servers) {
    i.join();
  }
  Repository.get().terminate();
}"
40098,"/** 
 * The GENERAL AUTHENTICATE card command performs a cryptographic operation, such as an authentication protocol, using the data provided in the data field of the command and returns the result of the cryptographic operation in the response data field.
 * @param buffer The incoming APDU buffer
 * @param offset The offset of the CDATA element
 * @param length The length of the CDATA element
 * @return The length of the return data
 */
public short generalAuthenticate(byte[] buffer,short offset,short length){
  final byte CONST_TAG_TEMPLATE=(byte)0x7C;
  final byte CONST_TAG_WITNESS=(byte)0x80;
  final byte CONST_TAG_CHALLENGE=(byte)0x81;
  final byte CONST_TAG_RESPONSE=(byte)0x82;
  length=chainBuffer.processIncomingAPDU(buffer,offset,length,scratch,(short)0);
  if (length == 0)   return length;
  tlvReader.init(scratch,(short)0,length);
  PIVKeyObject key=cspPIV.selectKey(buffer[ISO7816.OFFSET_P2],buffer[ISO7816.OFFSET_P1]);
  if (key == null) {
    cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
    ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);
  }
  if (!key.isInitialised()) {
    cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
    ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);
  }
  if (!cspPIV.checkAccessModeObject(key)) {
    cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
    ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
  }
  if (!tlvReader.find(CONST_TAG_TEMPLATE)) {
    cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
    ISOException.throwIt(ISO7816.SW_DATA_INVALID);
  }
  tlvReader.moveInto();
  short challengeOffset=0, witnessOffset=0, responseOffset=0;
  boolean challengeEmpty=false, witnessEmpty=false, responseEmpty=false;
  offset=tlvReader.getOffset();
  do {
    if (tlvReader.match(CONST_TAG_CHALLENGE)) {
      challengeOffset=tlvReader.getOffset();
      challengeEmpty=tlvReader.isNull();
    }
 else     if (tlvReader.match(CONST_TAG_RESPONSE)) {
      responseOffset=tlvReader.getOffset();
      responseEmpty=tlvReader.isNull();
    }
 else     if (tlvReader.match(CONST_TAG_WITNESS)) {
      witnessOffset=tlvReader.getOffset();
      witnessEmpty=tlvReader.isNull();
    }
 else {
    }
  }
 while (tlvReader.moveNext());
  tlvReader.setOffset(offset);
  length=key.getBlockLength();
  if ((challengeOffset != 0 && !challengeEmpty) && (responseOffset != 0 && responseEmpty)) {
    authenticateReset();
    if (!key.hasRole(PIVKeyObject.ROLE_AUTH_INTERNAL)) {
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
    }
    tlvReader.setOffset(challengeOffset);
    if (tlvReader.getLength() != length) {
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_WRONG_DATA);
    }
    tlvWriter.init(scratch,(short)0,length,CONST_TAG_TEMPLATE);
    tlvWriter.writeTag(CONST_TAG_RESPONSE);
    tlvWriter.writeLength(length);
    offset=tlvWriter.getOffset();
    offset+=cspPIV.encrypt(key,scratch,tlvReader.getDataOffset(),length,scratch,offset);
    tlvWriter.setOffset(offset);
    length=tlvWriter.finish();
    chainBuffer.setOutgoing(scratch,(short)0,length,true);
    return length;
  }
 else   if (challengeOffset != 0 && challengeEmpty) {
    authenticateReset();
    key.resetSecurityStatus();
    if (!key.hasRole(PIVKeyObject.ROLE_AUTH_EXTERNAL)) {
      authenticateReset();
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
    }
    tlvWriter.init(scratch,(short)0,length,CONST_TAG_TEMPLATE);
    tlvWriter.writeTag(CONST_TAG_CHALLENGE);
    tlvWriter.writeLength(length);
    offset=tlvWriter.getOffset();
    cspPIV.generateRandom(scratch,offset,length);
    offset+=cspPIV.encrypt(key,scratch,offset,length,authenticationContext,OFFSET_AUTH_CHALLENGE);
    tlvWriter.setOffset(offset);
    length=tlvWriter.finish();
    authenticationContext[OFFSET_AUTH_STATE]=AUTH_STATE_EXTERNAL;
    authenticationContext[OFFSET_AUTH_ID]=key.getId();
    authenticationContext[OFFSET_AUTH_MECHANISM]=key.getMechanism();
    chainBuffer.setOutgoing(scratch,(short)0,length,true);
    return length;
  }
 else   if (responseOffset != 0 && !responseEmpty) {
    if (authenticationContext[OFFSET_AUTH_STATE] != AUTH_STATE_EXTERNAL) {
      authenticateReset();
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
    }
    if (authenticationContext[OFFSET_AUTH_ID] != key.getId() || authenticationContext[OFFSET_AUTH_MECHANISM] != key.getMechanism()) {
      authenticateReset();
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
    }
    tlvReader.setOffset(responseOffset);
    if (length != tlvReader.getLength()) {
      authenticateReset();
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
    }
    if (Util.arrayCompare(scratch,tlvReader.getDataOffset(),authenticationContext,OFFSET_AUTH_CHALLENGE,length) != 0) {
      authenticateReset();
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
    }
    key.setSecurityStatus();
    authenticateReset();
    cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
    return (short)0;
  }
 else   if (witnessOffset != 0 && witnessEmpty) {
    authenticateReset();
    key.resetSecurityStatus();
    if (!key.hasRole(PIVKeyObject.ROLE_AUTH_EXTERNAL)) {
      authenticateReset();
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
    }
    cspPIV.generateRandom(authenticationContext,OFFSET_AUTH_CHALLENGE,length);
    tlvWriter.init(scratch,(short)0,length,CONST_TAG_TEMPLATE);
    tlvWriter.writeTag(CONST_TAG_WITNESS);
    tlvWriter.writeLength(length);
    offset=tlvWriter.getOffset();
    offset+=cspPIV.encrypt(key,authenticationContext,OFFSET_AUTH_CHALLENGE,length,scratch,offset);
    tlvWriter.setOffset(offset);
    length=tlvWriter.finish();
    authenticationContext[OFFSET_AUTH_STATE]=AUTH_STATE_MUTUAL;
    authenticationContext[OFFSET_AUTH_ID]=key.getId();
    authenticationContext[OFFSET_AUTH_MECHANISM]=key.getMechanism();
    chainBuffer.setOutgoing(scratch,(short)0,length,true);
    return length;
  }
 else   if (witnessOffset != 0 && !witnessEmpty && challengeOffset != 0 && !challengeEmpty) {
    if (authenticationContext[OFFSET_AUTH_STATE] != AUTH_STATE_MUTUAL) {
      authenticateReset();
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
    }
    if (authenticationContext[OFFSET_AUTH_ID] != key.getId() || authenticationContext[OFFSET_AUTH_MECHANISM] != key.getMechanism()) {
      authenticateReset();
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
    }
    tlvReader.setOffset(witnessOffset);
    if (length != tlvReader.getLength()) {
      authenticateReset();
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
    }
    if (Util.arrayCompare(scratch,tlvReader.getDataOffset(),authenticationContext,OFFSET_AUTH_CHALLENGE,length) != 0) {
      authenticateReset();
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
    }
    tlvReader.setOffset(challengeOffset);
    length=tlvReader.getLength();
    if (key.getBlockLength() != length) {
      authenticateReset();
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);
    }
    tlvWriter.init(scratch,(short)0,length,CONST_TAG_TEMPLATE);
    tlvWriter.writeTag(CONST_TAG_RESPONSE);
    tlvWriter.writeLength(length);
    offset=tlvWriter.getOffset();
    offset+=cspPIV.encrypt(key,scratch,tlvReader.getDataOffset(),key.getBlockLength(),scratch,offset);
    tlvWriter.setOffset(offset);
    length=tlvWriter.finish();
    key.setSecurityStatus();
    authenticateReset();
    chainBuffer.setOutgoing(scratch,(short)0,length,true);
    return length;
  }
 else {
    authenticateReset();
    cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
    ISOException.throwIt(ISO7816.SW_WRONG_DATA);
    return (short)0;
  }
}","/** 
 * The GENERAL AUTHENTICATE card command performs a cryptographic operation, such as an authentication protocol, using the data provided in the data field of the command and returns the result of the cryptographic operation in the response data field.
 * @param buffer The incoming APDU buffer
 * @param offset The offset of the CDATA element
 * @param length The length of the CDATA element
 * @return The length of the return data
 */
public short generalAuthenticate(byte[] buffer,short offset,short length){
  final byte CONST_TAG_TEMPLATE=(byte)0x7C;
  final byte CONST_TAG_WITNESS=(byte)0x80;
  final byte CONST_TAG_CHALLENGE=(byte)0x81;
  final byte CONST_TAG_RESPONSE=(byte)0x82;
  length=chainBuffer.processIncomingAPDU(buffer,offset,length,scratch,(short)0);
  if (length == 0)   return length;
  tlvReader.init(scratch,(short)0,length);
  PIVKeyObject key=cspPIV.selectKey(buffer[ISO7816.OFFSET_P2],buffer[ISO7816.OFFSET_P1]);
  if (key == null) {
    cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
    ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);
  }
  if (!key.isInitialised()) {
    cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
    ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);
  }
  if (!cspPIV.checkAccessModeObject(key)) {
    cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
    ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
  }
  if (!tlvReader.find(CONST_TAG_TEMPLATE)) {
    cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
    ISOException.throwIt(ISO7816.SW_DATA_INVALID);
  }
  tlvReader.moveInto();
  short challengeOffset=0, witnessOffset=0, responseOffset=0;
  boolean challengeEmpty=false, witnessEmpty=false, responseEmpty=false;
  offset=tlvReader.getOffset();
  do {
    if (tlvReader.match(CONST_TAG_CHALLENGE)) {
      challengeOffset=tlvReader.getOffset();
      challengeEmpty=tlvReader.isNull();
    }
 else     if (tlvReader.match(CONST_TAG_RESPONSE)) {
      responseOffset=tlvReader.getOffset();
      responseEmpty=tlvReader.isNull();
    }
 else     if (tlvReader.match(CONST_TAG_WITNESS)) {
      witnessOffset=tlvReader.getOffset();
      witnessEmpty=tlvReader.isNull();
    }
 else {
    }
  }
 while (tlvReader.moveNext());
  tlvReader.setOffset(offset);
  length=key.getBlockLength();
  if ((challengeOffset != 0 && !challengeEmpty) && (responseOffset != 0 && responseEmpty)) {
    authenticateReset();
    if (!key.hasRole(PIVKeyObject.ROLE_AUTH_INTERNAL)) {
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
    }
    tlvReader.setOffset(challengeOffset);
    if (tlvReader.getLength() != length) {
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_WRONG_DATA);
    }
    length=cspPIV.encrypt(key,scratch,tlvReader.getDataOffset(),length,buffer,(short)0);
    cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
    tlvWriter.init(scratch,(short)0,length,CONST_TAG_TEMPLATE);
    tlvWriter.writeTag(CONST_TAG_RESPONSE);
    tlvWriter.writeLength(length);
    offset=Util.arrayCopyNonAtomic(buffer,(short)0,scratch,tlvWriter.getOffset(),length);
    tlvWriter.setOffset(offset);
    length=tlvWriter.finish();
    chainBuffer.setOutgoing(scratch,(short)0,length,true);
    return length;
  }
 else   if (challengeOffset != 0 && challengeEmpty) {
    authenticateReset();
    key.resetSecurityStatus();
    if (!key.hasRole(PIVKeyObject.ROLE_AUTH_EXTERNAL)) {
      authenticateReset();
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
    }
    tlvWriter.init(scratch,(short)0,length,CONST_TAG_TEMPLATE);
    tlvWriter.writeTag(CONST_TAG_CHALLENGE);
    tlvWriter.writeLength(length);
    offset=tlvWriter.getOffset();
    cspPIV.generateRandom(scratch,offset,length);
    offset+=cspPIV.encrypt(key,scratch,offset,length,authenticationContext,OFFSET_AUTH_CHALLENGE);
    tlvWriter.setOffset(offset);
    length=tlvWriter.finish();
    authenticationContext[OFFSET_AUTH_STATE]=AUTH_STATE_EXTERNAL;
    authenticationContext[OFFSET_AUTH_ID]=key.getId();
    authenticationContext[OFFSET_AUTH_MECHANISM]=key.getMechanism();
    chainBuffer.setOutgoing(scratch,(short)0,length,true);
    return length;
  }
 else   if (responseOffset != 0 && !responseEmpty) {
    if (authenticationContext[OFFSET_AUTH_STATE] != AUTH_STATE_EXTERNAL) {
      authenticateReset();
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
    }
    if (authenticationContext[OFFSET_AUTH_ID] != key.getId() || authenticationContext[OFFSET_AUTH_MECHANISM] != key.getMechanism()) {
      authenticateReset();
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
    }
    tlvReader.setOffset(responseOffset);
    if (length != tlvReader.getLength()) {
      authenticateReset();
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
    }
    if (Util.arrayCompare(scratch,tlvReader.getDataOffset(),authenticationContext,OFFSET_AUTH_CHALLENGE,length) != 0) {
      authenticateReset();
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
    }
    key.setSecurityStatus();
    authenticateReset();
    cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
    return (short)0;
  }
 else   if (witnessOffset != 0 && witnessEmpty) {
    authenticateReset();
    key.resetSecurityStatus();
    if (!key.hasRole(PIVKeyObject.ROLE_AUTH_EXTERNAL)) {
      authenticateReset();
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
    }
    cspPIV.generateRandom(authenticationContext,OFFSET_AUTH_CHALLENGE,length);
    tlvWriter.init(scratch,(short)0,length,CONST_TAG_TEMPLATE);
    tlvWriter.writeTag(CONST_TAG_WITNESS);
    tlvWriter.writeLength(length);
    offset=tlvWriter.getOffset();
    offset+=cspPIV.encrypt(key,authenticationContext,OFFSET_AUTH_CHALLENGE,length,scratch,offset);
    tlvWriter.setOffset(offset);
    length=tlvWriter.finish();
    authenticationContext[OFFSET_AUTH_STATE]=AUTH_STATE_MUTUAL;
    authenticationContext[OFFSET_AUTH_ID]=key.getId();
    authenticationContext[OFFSET_AUTH_MECHANISM]=key.getMechanism();
    chainBuffer.setOutgoing(scratch,(short)0,length,true);
    return length;
  }
 else   if (witnessOffset != 0 && !witnessEmpty && challengeOffset != 0 && !challengeEmpty) {
    if (authenticationContext[OFFSET_AUTH_STATE] != AUTH_STATE_MUTUAL) {
      authenticateReset();
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
    }
    if (authenticationContext[OFFSET_AUTH_ID] != key.getId() || authenticationContext[OFFSET_AUTH_MECHANISM] != key.getMechanism()) {
      authenticateReset();
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
    }
    tlvReader.setOffset(witnessOffset);
    if (length != tlvReader.getLength()) {
      authenticateReset();
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
    }
    if (Util.arrayCompare(scratch,tlvReader.getDataOffset(),authenticationContext,OFFSET_AUTH_CHALLENGE,length) != 0) {
      authenticateReset();
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
    }
    tlvReader.setOffset(challengeOffset);
    length=tlvReader.getLength();
    if (key.getBlockLength() != length) {
      authenticateReset();
      cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
      ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);
    }
    length=cspPIV.encrypt(key,scratch,tlvReader.getDataOffset(),length,buffer,(short)0);
    tlvWriter.init(scratch,(short)0,length,CONST_TAG_TEMPLATE);
    tlvWriter.writeTag(CONST_TAG_RESPONSE);
    tlvWriter.writeLength(length);
    offset=Util.arrayCopyNonAtomic(buffer,(short)0,scratch,tlvWriter.getOffset(),length);
    tlvWriter.setOffset(offset);
    length=tlvWriter.finish();
    key.setSecurityStatus();
    authenticateReset();
    chainBuffer.setOutgoing(scratch,(short)0,length,true);
    return length;
  }
 else {
    authenticateReset();
    cspPIV.zeroise(scratch,(short)0,LENGTH_SCRATCH);
    ISOException.throwIt(ISO7816.SW_WRONG_DATA);
    return (short)0;
  }
}"
40099,"public void process(APDU apdu){
  if (secureChannel == null) {
    secureChannel=GPSystem.getSecureChannel();
  }
  byte[] buffer=apdu.getBuffer();
  short length=apdu.setIncomingAndReceive();
  if (!apdu.isISOInterindustryCLA() && buffer[ISO7816.OFFSET_INS] != INS_GP_INITIALIZE_UPDATE && buffer[ISO7816.OFFSET_INS] != INS_GP_EXTERNAL_AUTHENTICATE) {
    ISOException.throwIt(ISO7816.SW_CLA_NOT_SUPPORTED);
  }
  final byte SC_MASK=SecureChannel.AUTHENTICATED | SecureChannel.C_DECRYPTION | SecureChannel.C_MAC;
  byte media=(byte)(APDU.getProtocol() & APDU.PROTOCOL_MEDIA_MASK);
  boolean contactless=(media == APDU.PROTOCOL_MEDIA_CONTACTLESS_TYPE_A || media == APDU.PROTOCOL_MEDIA_CONTACTLESS_TYPE_B);
  boolean isSecureChannel;
  if ((secureChannel.getSecurityLevel() & SC_MASK) == SC_MASK) {
    length=secureChannel.unwrap(buffer,(short)0,(short)(ISO7816.OFFSET_CDATA + length));
    isSecureChannel=true;
  }
 else {
    isSecureChannel=false;
  }
  piv.updateSecurityStatus(contactless,isSecureChannel);
  chainBuffer.processOutgoing(apdu);
  chainBuffer.processIncomingObject(buffer,apdu.getOffsetCdata(),length);
switch (buffer[ISO7816.OFFSET_INS]) {
case INS_GP_INITIALIZE_UPDATE:
    if (Config.FEATURE_RESTRICT_SCP_TO_CONTACT && contactless) {
      ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
    }
  secureChannel.resetSecurity();
processGP_SECURECHANNEL(apdu);
break;
case INS_GP_EXTERNAL_AUTHENTICATE:
if (Config.FEATURE_RESTRICT_SCP_TO_CONTACT && contactless) {
ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
}
processGP_SECURECHANNEL(apdu);
break;
case INS_PIV_SELECT:
processPIV_SELECT(apdu);
break;
case INS_PIV_GET_DATA:
processPIV_GET_DATA(apdu);
break;
case INS_PIV_VERIFY:
processPIV_VERIFY(apdu);
break;
case INS_PIV_CHANGE_REFERENCE_DATA:
processPIV_CHANGE_REFERENCE_DATA(apdu);
break;
case INS_PIV_RESET_RETRY_COUNTER:
processPIV_RESET_RETRY_COUNTER(apdu);
break;
case INS_PIV_GENERAL_AUTHENTICATE:
processPIV_GENERAL_AUTHENTICATE(apdu);
break;
case INS_PIV_PUT_DATA:
processPIV_PUT_DATA(apdu);
break;
case INS_PIV_GENERATE_ASSYMETRIC_KEYPAIR:
processPIV_GENERATE_ASSYMETRIC_KEYPAIR(apdu);
break;
default :
ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
}
}","public void process(APDU apdu){
  if (secureChannel == null) {
    secureChannel=GPSystem.getSecureChannel();
  }
  byte[] buffer=apdu.getBuffer();
  short length=apdu.setIncomingAndReceive();
  if (!apdu.isISOInterindustryCLA() && buffer[ISO7816.OFFSET_INS] != INS_GP_INITIALIZE_UPDATE && buffer[ISO7816.OFFSET_INS] != INS_GP_EXTERNAL_AUTHENTICATE) {
    ISOException.throwIt(ISO7816.SW_CLA_NOT_SUPPORTED);
  }
  final byte SC_MASK=SecureChannel.AUTHENTICATED | SecureChannel.C_DECRYPTION | SecureChannel.C_MAC;
  byte media=(byte)(APDU.getProtocol() & APDU.PROTOCOL_MEDIA_MASK);
  boolean contactless=(media == APDU.PROTOCOL_MEDIA_CONTACTLESS_TYPE_A || media == APDU.PROTOCOL_MEDIA_CONTACTLESS_TYPE_B);
  boolean isSecureChannel;
  if ((secureChannel.getSecurityLevel() & SC_MASK) == SC_MASK) {
    length=secureChannel.unwrap(buffer,(short)0,(short)(ISO7816.OFFSET_CDATA + length));
    length-=ISO7816.OFFSET_CDATA;
    isSecureChannel=true;
  }
 else {
    isSecureChannel=false;
  }
  piv.updateSecurityStatus(contactless,isSecureChannel);
  chainBuffer.processOutgoing(apdu);
  chainBuffer.processIncomingObject(buffer,apdu.getOffsetCdata(),length);
switch (buffer[ISO7816.OFFSET_INS]) {
case INS_GP_INITIALIZE_UPDATE:
    if (Config.FEATURE_RESTRICT_SCP_TO_CONTACT && contactless) {
      ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
    }
  secureChannel.resetSecurity();
processGP_SECURECHANNEL(apdu);
break;
case INS_GP_EXTERNAL_AUTHENTICATE:
if (Config.FEATURE_RESTRICT_SCP_TO_CONTACT && contactless) {
ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
}
processGP_SECURECHANNEL(apdu);
break;
case INS_PIV_SELECT:
processPIV_SELECT(apdu);
break;
case INS_PIV_GET_DATA:
processPIV_GET_DATA(apdu);
break;
case INS_PIV_VERIFY:
processPIV_VERIFY(apdu);
break;
case INS_PIV_CHANGE_REFERENCE_DATA:
processPIV_CHANGE_REFERENCE_DATA(apdu);
break;
case INS_PIV_RESET_RETRY_COUNTER:
processPIV_RESET_RETRY_COUNTER(apdu);
break;
case INS_PIV_GENERAL_AUTHENTICATE:
processPIV_GENERAL_AUTHENTICATE(apdu);
break;
case INS_PIV_PUT_DATA:
processPIV_PUT_DATA(apdu);
break;
case INS_PIV_GENERATE_ASSYMETRIC_KEYPAIR:
processPIV_GENERATE_ASSYMETRIC_KEYPAIR(apdu);
break;
default :
ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
}
}"
40100,"/** 
 * Process the PIV 'SELECT' command
 * @param apdu The incoming APDU object
 */
private void processPIV_SELECT(APDU apdu){
  byte[] buffer=apdu.getBuffer();
  short length=(short)(buffer[ISO7816.OFFSET_LC] & 0xFF);
  length=piv.select(buffer,ISO7816.OFFSET_CDATA,length);
  apdu.setOutgoingAndSend(ISO7816.OFFSET_CDATA,length);
}","/** 
 * Process the PIV 'SELECT' command
 * @param apdu The incoming APDU object
 */
private void processPIV_SELECT(APDU apdu){
  byte[] buffer=apdu.getBuffer();
  short length=(short)(buffer[ISO7816.OFFSET_LC] & 0xFF);
  if (!selectingApplet()) {
    ISOException.throwIt(ISO7816.SW_FILE_NOT_FOUND);
  }
  length=piv.select(buffer,ISO7816.OFFSET_CDATA,length);
  apdu.setOutgoingAndSend(ISO7816.OFFSET_CDATA,length);
}"
40101,"/** 
 * 组装ProductDetailVo对象
 * @param product
 * @return
 */
private ProductDetailVo assembleProductDetailVo(Product product){
  ProductDetailVo productDetailVo=new ProductDetailVo();
  productDetailVo.setId(product.getId());
  productDetailVo.setSubtitle(product.getSubtitle());
  productDetailVo.setPrice(product.getPrice());
  productDetailVo.setMainImage(product.getMainImage());
  productDetailVo.setSubImages(product.getSubImages());
  productDetailVo.setCategoryId(product.getCategoryId());
  productDetailVo.setDetail(product.getDetail());
  productDetailVo.setName(product.getName());
  productDetailVo.setRate(product.getRate());
  productDetailVo.setStatus(product.getStatus());
  productDetailVo.setStock(product.getStock());
  productDetailVo.setImageHost(PropertiesUtil.getProperty(Const.FTPSERVERHTTPPREFIX,""String_Node_Str""));
  productDetailVo.setParentCategoryId(new Integer(0));
  productDetailVo.setCreateTime(DateTimeUtil.dateToStr(product.getCreateTime()));
  productDetailVo.setUpdateTime(DateTimeUtil.dateToStr(product.getUpdateTime()));
  return productDetailVo;
}","/** 
 * 组装ProductDetailVo对象
 * @param product
 * @return
 */
private ProductDetailVo assembleProductDetailVo(Product product){
  ProductDetailVo productDetailVo=new ProductDetailVo();
  productDetailVo.setId(product.getId());
  productDetailVo.setSubtitle(product.getSubtitle());
  productDetailVo.setPrice(product.getPrice());
  productDetailVo.setMainImage(product.getMainImage());
  productDetailVo.setSubImages(Lists.newArrayList(product.getSubImages().split(""String_Node_Str"")));
  productDetailVo.setCategoryId(product.getCategoryId());
  productDetailVo.setDetail(product.getDetail());
  productDetailVo.setName(product.getName());
  productDetailVo.setRate(product.getRate());
  productDetailVo.setStatus(product.getStatus());
  productDetailVo.setStock(product.getStock());
  productDetailVo.setImageHost(PropertiesUtil.getProperty(Const.FTPSERVERHTTPPREFIX,""String_Node_Str""));
  productDetailVo.setParentCategoryId(new Integer(0));
  productDetailVo.setCreateTime(DateTimeUtil.dateToStr(product.getCreateTime()));
  productDetailVo.setUpdateTime(DateTimeUtil.dateToStr(product.getUpdateTime()));
  return productDetailVo;
}"
40102,"public String getSubImages(){
  return subImages;
}","public List<String> getSubImages(){
  return subImages;
}"
40103,"public void setSubImages(String subImages){
  this.subImages=subImages;
}","public void setSubImages(List<String> subImages){
  this.subImages=subImages;
}"
40104,"public static UniqueId generateId(SharedStreetsReference ssr){
  String hashString=new String();
  hashString=""String_Node_Str"" + ssr.formOfWay.value;
  for (  SharedStreetsLocationReference lr : ssr.locationReferences) {
    hashString+=String.format(""String_Node_Str"",lr.point.getX(),lr.point.getY());
    if (lr.outboundBearing != null) {
      hashString+=String.format(""String_Node_Str"",Math.round(lr.outboundBearing));
      hashString+=String.format(""String_Node_Str"",Math.round(lr.distanceToNextRef * 100));
    }
    if (lr.inboundBearing != null) {
      hashString+=String.format(""String_Node_Str"",Math.round(lr.inboundBearing));
    }
  }
  UniqueId id=UniqueId.generateHash(hashString);
  return id;
}","public static UniqueId generateId(SharedStreetsReference ssr){
  String hashString=new String();
  hashString=""String_Node_Str"" + ssr.formOfWay.value;
  for (  SharedStreetsLocationReference lr : ssr.locationReferences) {
    hashString+=String.format(""String_Node_Str"",lr.point.getX(),lr.point.getY());
    if (lr.outboundBearing != null) {
      hashString+=String.format(""String_Node_Str"",Math.round(lr.outboundBearing));
      hashString+=String.format(""String_Node_Str"",Math.round(lr.distanceToNextRef * 100));
    }
    if (lr.inboundBearing != null) {
      hashString+=String.format(""String_Node_Str"",Math.round(lr.inboundBearing));
    }
  }
  return UniqueId.generateHash(hashString);
}"
40105,"public byte[] toBinary() throws IOException {
  SharedStreetsProto.SharedStreetsGeometry.Builder geometryBuilder=SharedStreetsProto.SharedStreetsGeometry.newBuilder();
  geometryBuilder.setId(this.id.toString());
  geometryBuilder.setFromIntersectionId(this.startIntersectionId.toString());
  geometryBuilder.setToIntersectionId(this.endIntersectionId.toString());
  geometryBuilder.setForwardReferenceId(this.forwardReferenceId.toString());
  if (this.backReferenceId != null)   geometryBuilder.setBackReferenceId(this.backReferenceId.toString());
  geometryBuilder.setRoadClass(SharedStreetsProto.RoadClass.forNumber(this.metadata.getRoadClass().getValue()));
  for (int i=0; i < ((Polyline)geometry).getPointCount(); i++) {
    geometryBuilder.addLatlons((float)((Polyline)geometry).getPoint(i).getY());
    geometryBuilder.addLatlons((float)((Polyline)geometry).getPoint(i).getX());
  }
  ByteArrayOutputStream bytes=new ByteArrayOutputStream();
  geometryBuilder.build().writeDelimitedTo(bytes);
  return bytes.toByteArray();
}","public byte[] toBinary() throws IOException {
  SharedStreetsProto.SharedStreetsGeometry.Builder geometryBuilder=SharedStreetsProto.SharedStreetsGeometry.newBuilder();
  geometryBuilder.setId(this.id.toString());
  geometryBuilder.setFromIntersectionId(this.startIntersectionId.toString());
  geometryBuilder.setToIntersectionId(this.endIntersectionId.toString());
  geometryBuilder.setForwardReferenceId(this.forwardReferenceId.toString());
  if (this.backReferenceId != null)   geometryBuilder.setBackReferenceId(this.backReferenceId.toString());
  geometryBuilder.setRoadClass(SharedStreetsProto.RoadClass.forNumber(this.metadata.getRoadClass().getValue()));
  for (int i=0; i < ((Polyline)geometry).getPointCount(); i++) {
    geometryBuilder.addLonlats(((Polyline)geometry).getPoint(i).getX());
    geometryBuilder.addLonlats(((Polyline)geometry).getPoint(i).getY());
  }
  ByteArrayOutputStream bytes=new ByteArrayOutputStream();
  geometryBuilder.build().writeDelimitedTo(bytes);
  return bytes.toByteArray();
}"
40106,"@Override @JsonIgnore public String getId(){
  return this.id.toString();
}","@Override @JsonIgnore public String getId(){
  if (id == null)   this.id=generateId(this);
  return this.id.toString();
}"
40107,"@Override @JsonIgnore public String getId(){
  return this.id.toString();
}","@Override @JsonIgnore public String getId(){
  if (id == null)   this.id=generateId(this);
  return this.id.toString();
}"
40108,"public byte[] toBinary() throws IOException {
  SharedStreetsProto.SharedStreetsIntersection.Builder intersection=SharedStreetsProto.SharedStreetsIntersection.newBuilder();
  intersection.setId(this.id.toString());
  intersection.setNodeId(this.osmNodeId);
  intersection.setLon((float)this.point.getX());
  intersection.setLat((float)this.point.getY());
  for (  UniqueId inboundId : this.inboundSegmentIds) {
    intersection.addInboundReferenceIds(inboundId.toString());
  }
  for (  UniqueId outboundId : this.outboundSegmentIds) {
    intersection.addOutboundReferenceIds(outboundId.toString());
  }
  ByteArrayOutputStream bytes=new ByteArrayOutputStream();
  intersection.build().writeDelimitedTo(bytes);
  return bytes.toByteArray();
}","public byte[] toBinary() throws IOException {
  SharedStreetsProto.SharedStreetsIntersection.Builder intersection=SharedStreetsProto.SharedStreetsIntersection.newBuilder();
  intersection.setId(this.getId());
  intersection.setNodeId(this.osmNodeId);
  intersection.setLon(this.point.getX());
  intersection.setLat(this.point.getY());
  for (  UniqueId inboundId : this.inboundSegmentIds) {
    intersection.addInboundReferenceIds(inboundId.toString());
  }
  for (  UniqueId outboundId : this.outboundSegmentIds) {
    intersection.addOutboundReferenceIds(outboundId.toString());
  }
  ByteArrayOutputStream bytes=new ByteArrayOutputStream();
  intersection.build().writeDelimitedTo(bytes);
  return bytes.toByteArray();
}"
40109,"public static UniqueId generateId(SharedStreetsReference ssr){
  String hashString=new String();
  hashString=""String_Node_Str"" + ssr.formOfWay.value;
  for (  SharedStreetsLocationReference lr : ssr.locationReferences) {
    hashString+=String.format(""String_Node_Str"",lr.point.getX(),lr.point.getY());
    if (lr.outboundBearing != null) {
      hashString+=String.format(""String_Node_Str"",Math.round(lr.outboundBearing));
      hashString+=String.format(""String_Node_Str"",Math.round(lr.distanceToNextRef * 100));
    }
    if (lr.inboundBearing != null) {
      hashString+=String.format(""String_Node_Str"",lr.inboundBearing);
    }
  }
  return UniqueId.generateHash(hashString);
}","public static UniqueId generateId(SharedStreetsReference ssr){
  String hashString=new String();
  hashString=""String_Node_Str"" + ssr.formOfWay.value;
  for (  SharedStreetsLocationReference lr : ssr.locationReferences) {
    hashString+=String.format(""String_Node_Str"",lr.point.getX(),lr.point.getY());
    if (lr.outboundBearing != null) {
      hashString+=String.format(""String_Node_Str"",Math.round(lr.outboundBearing));
      hashString+=String.format(""String_Node_Str"",Math.round(lr.distanceToNextRef * 100));
    }
    if (lr.inboundBearing != null) {
      hashString+=String.format(""String_Node_Str"",Math.round(lr.inboundBearing));
    }
  }
  UniqueId id=UniqueId.generateHash(hashString);
  return id;
}"
40110,"public byte[] toBinary() throws IOException {
  SharedStreetsProto.SharedStreetsReference.Builder reference=SharedStreetsProto.SharedStreetsReference.newBuilder();
  reference.setId(this.id.toString());
  reference.setFormOfWay(SharedStreetsProto.SharedStreetsReference.FormOfWay.forNumber(this.formOfWay.getValue()));
  reference.setGeometryId(this.geometry.id.toString());
  for (  SharedStreetsLocationReference locationReference : this.locationReferences) {
    SharedStreetsProto.LocationReference.Builder lr=SharedStreetsProto.LocationReference.newBuilder();
    lr.setIntersectionId(locationReference.intersection.id.toString());
    if (locationReference.distanceToNextRef != null)     lr.setDistanceToNextRef((int)Math.round(locationReference.distanceToNextRef * 100));
    if (locationReference.inboundBearing != null)     lr.setInboundBearing((int)Math.round(locationReference.inboundBearing));
    if (locationReference.outboundBearing != null)     lr.setOutboundBearing((int)Math.round(locationReference.outboundBearing));
    lr.setLat((float)locationReference.point.getY());
    lr.setLon((float)locationReference.point.getX());
    reference.addLocationReferences(lr);
  }
  ByteArrayOutputStream bytes=new ByteArrayOutputStream();
  reference.build().writeDelimitedTo(bytes);
  return bytes.toByteArray();
}","public byte[] toBinary() throws IOException {
  SharedStreetsProto.SharedStreetsReference.Builder reference=SharedStreetsProto.SharedStreetsReference.newBuilder();
  reference.setId(this.id.toString());
  reference.setFormOfWay(SharedStreetsProto.SharedStreetsReference.FormOfWay.forNumber(this.formOfWay.getValue()));
  reference.setGeometryId(this.geometry.id.toString());
  for (  SharedStreetsLocationReference locationReference : this.locationReferences) {
    SharedStreetsProto.LocationReference.Builder lr=SharedStreetsProto.LocationReference.newBuilder();
    lr.setIntersectionId(locationReference.intersection.id.toString());
    if (locationReference.distanceToNextRef != null)     lr.setDistanceToNextRef((int)Math.round(locationReference.distanceToNextRef * 100));
    if (locationReference.inboundBearing != null)     lr.setInboundBearing((int)Math.round(locationReference.inboundBearing));
    if (locationReference.outboundBearing != null)     lr.setOutboundBearing((int)Math.round(locationReference.outboundBearing));
    lr.setLon(locationReference.point.getX());
    lr.setLat(locationReference.point.getY());
    reference.addLocationReferences(lr);
  }
  ByteArrayOutputStream bytes=new ByteArrayOutputStream();
  reference.build().writeDelimitedTo(bytes);
  return bytes.toByteArray();
}"
40111,"@Override @JsonIgnore public String getId(){
  return this.id.toString();
}","@Override @JsonIgnore public String getId(){
  if (id == null)   this.id=generateId(this);
  return this.id.toString();
}"
40112,"public static void main(String[] args){
  GameMap gameMap=new GameMap(MapDriver.readMap(""String_Node_Str""));
  ConsolePrinter.printMap(gameMap);
  Score score=new Score();
  score.init(gameMap,Color.BLACK);
  Analyzer analyzer=new Analyzer(gameMap,Color.WHITE,gameMap.getNeighbor(),score,false);
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getFiveAttack());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getFourAttack());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getFourDefence());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getThreeOpenAttack());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getThreeDefence());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getTwoAttack());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getNotKey());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getFourCloseDefence());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getDoubleFourCloseDefence());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getThreeOpenDefence());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getDoubleThreeOpenDefense());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getFourCloseAndOpenThreeDefense());
}","public static void main(String[] args){
  GameMap gameMap=new GameMap(MapDriver.readMap());
  ConsolePrinter.printMap(gameMap);
  Score score=new Score();
  score.init(gameMap,Color.BLACK);
  Analyzer analyzer=new Analyzer(gameMap,Color.BLACK,gameMap.getNeighbor(),score,false);
  ConsolePrinter.printMapWithPoints(gameMap,analyzer.getFourCloseAndOpenThreeDefense());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getFiveAttack());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getFourAttack());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getFourDefence());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getThreeOpenAttack());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getThreeDefence());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getTwoAttack());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getNotKey());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getFourCloseDefence());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getDoubleFourCloseDefence());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getThreeOpenDefence());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getDoubleThreeOpenDefense());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getFourCloseAndOpenThreeDefense());
}"
40113,"private void addAnalyze(Point point){
  for (int i=0; i < 4; i++) {
    int x=point.getX();
    int y=point.getY();
    Color otherColor=color.getOtherColor();
    for (int k=0; k < 5; k++) {
      if (score.getColorCount(otherColor)[x][y][i] == 0 && score.getColorCount(color)[x][y][i] == 4) {
        fiveAttack.add(point);
      }
      if (score.getColorCount(otherColor)[x][y][i] == 0 && score.getColorCount(color)[x][y][i] == 3) {
        fourAttack.add(point);
      }
      if (score.getColorCount(otherColor)[x][y][i] == 4 && score.getColorCount(color)[x][y][i] == 0) {
        fourDefence.add(point);
      }
      if (score.getColorCount(otherColor)[x][y][i] == 0 && score.getColorCount(color)[x][y][i] == 2) {
        if (k != 0 && k != 4) {
          int headX=x - directX[i] * 4;
          int headY=y - directY[i] * 4;
          if (GameMap.reachable(headX,headY)) {
            Color headColor=gameMap.getColor(headX,headY);
            Color tailColor=gameMap.getColor(x,y);
            if (headColor == Color.NULL && tailColor != Color.NULL) {
              int sideX=x + directX[i];
              int sideY=y + directY[i];
              if (GameMap.reachable(sideX,sideY)) {
                Color sideColor=gameMap.getColor(sideX,sideY);
                if (sideColor == Color.NULL) {
                  threeOpenAttack.add(point);
                }
              }
            }
            if (headColor != Color.NULL && tailColor == Color.NULL) {
              int sideX=headX - directX[i];
              int sideY=headY - directY[i];
              if (GameMap.reachable(sideX,sideY)) {
                Color sideColor=gameMap.getColor(sideX,sideY);
                if (sideColor == Color.NULL) {
                  threeOpenAttack.add(point);
                }
              }
            }
          }
        }
      }
      if (score.getColorCount(otherColor)[x][y][i] == 3 && score.getColorCount(color)[x][y][i] == 0) {
        int headX=x - directX[i] * 4;
        int headY=y - directY[i] * 4;
        if (GameMap.reachable(headX,headY)) {
          Color headColor=gameMap.getColor(headX,headY);
          Color tailColor=gameMap.getColor(x,y);
          if (headColor != Color.NULL && tailColor == Color.NULL) {
            if (gameMap.getColor(x - directX[i],y - directY[i]) != Color.NULL) {
              int sideX=headX - directX[i];
              int sideY=headY - directY[i];
              if (GameMap.reachable(sideX,sideY)) {
                Color sideColor=gameMap.getColor(sideX,sideY);
                if (sideColor == Color.NULL) {
                  threeDefence.add(point);
                }
              }
            }
          }
          if (tailColor != Color.NULL && headColor == Color.NULL) {
            if (gameMap.getColor(headX + directX[i],headY + directY[i]) != Color.NULL) {
              int sideX=x + directX[i];
              int sideY=y + directY[i];
              if (GameMap.reachable(sideX,sideY)) {
                Color sideColor=gameMap.getColor(sideX,sideY);
                if (sideColor == Color.NULL) {
                  threeDefence.add(point);
                }
              }
            }
          }
          if (headColor == Color.NULL && tailColor == Color.NULL) {
            int sideX=x + directX[i];
            int sideY=y + directY[i];
            if (GameMap.reachable(sideX,sideY) && gameMap.getColor(sideX,sideY) == Color.NULL) {
              threeDefence.add(point);
            }
            sideX=headX - directX[i];
            sideY=headY - directY[i];
            if (GameMap.reachable(sideX,sideY) && gameMap.getColor(sideX,sideY) == Color.NULL) {
              threeDefence.add(point);
            }
          }
        }
      }
      if (!basic) {
        if (score.getColorCount(otherColor)[x][y][i] == 0 && score.getColorCount(color)[x][y][i] == 1) {
          twoAttack.add(point);
        }
        if (score.getColorCount(otherColor)[x][y][i] == 3 && score.getColorCount(color)[x][y][i] == 0) {
          if (fourCloseDefence.containsKey(point)) {
            if (fourCloseDefence.get(point) != i) {
              doubleFourCloseDefence.add(point);
            }
          }
          if (threeOpenDefence.containsKey(point)) {
            if (threeOpenDefence.get(point) != i) {
              fourCloseAndOpenThreeDefense.add(point);
            }
          }
          fourCloseDefence.put(point,i);
        }
        if (score.getColorCount(otherColor)[x][y][i] == 2 && score.getColorCount(color)[x][y][i] == 0) {
          int headX=x - directX[i] * 4;
          int headY=y - directY[i] * 4;
          if (k != 0 && k != 4) {
            if (GameMap.reachable(headX,headY)) {
              Color headColor=gameMap.getColor(headX,headY);
              Color tailColor=gameMap.getColor(x,y);
              if (headColor == Color.NULL && tailColor != Color.NULL) {
                int sideX=x + directX[i];
                int sideY=y + directY[i];
                if (GameMap.reachable(sideX,sideY)) {
                  Color sideColor=gameMap.getColor(sideX,sideY);
                  if (sideColor == Color.NULL) {
                    if (threeOpenDefence.containsKey(point)) {
                      if (threeOpenDefence.get(point) != i) {
                        doubleThreeOpenDefense.add(point);
                      }
                    }
                    if (fourCloseDefence.containsKey(point)) {
                      if (fourCloseDefence.get(point) != i) {
                        fourCloseAndOpenThreeDefense.add(point);
                      }
                    }
                    threeOpenDefence.put(point,i);
                  }
                }
              }
              if (headColor != Color.NULL && tailColor == Color.NULL) {
                int sideX=headX - directX[i];
                int sideY=headY - directY[i];
                if (GameMap.reachable(sideX,sideY)) {
                  Color sideColor=gameMap.getColor(sideX,sideY);
                  if (sideColor == Color.NULL) {
                    if (threeOpenDefence.containsKey(point)) {
                      if (threeOpenDefence.get(point) != i) {
                        doubleThreeOpenDefense.add(point);
                      }
                    }
                    if (fourCloseDefence.containsKey(point)) {
                      if (fourCloseDefence.get(point) != i) {
                        fourCloseAndOpenThreeDefense.add(point);
                      }
                    }
                    threeOpenDefence.put(point,i);
                  }
                }
              }
            }
          }
        }
      }
      x+=directX[i];
      y+=directY[i];
      if (!GameMap.reachable(x,y)) {
        break;
      }
    }
  }
}","private void addAnalyze(Point point){
  for (int i=0; i < 4; i++) {
    int x=point.getX();
    int y=point.getY();
    Color otherColor=color.getOtherColor();
    for (int k=0; k < 5; k++) {
      if (score.getColorCount(otherColor)[x][y][i] == 0 && score.getColorCount(color)[x][y][i] == 4) {
        fiveAttack.add(point);
      }
      if (score.getColorCount(otherColor)[x][y][i] == 0 && score.getColorCount(color)[x][y][i] == 3) {
        fourAttack.add(point);
      }
      if (score.getColorCount(otherColor)[x][y][i] == 4 && score.getColorCount(color)[x][y][i] == 0) {
        fourDefence.add(point);
      }
      if (score.getColorCount(otherColor)[x][y][i] == 0 && score.getColorCount(color)[x][y][i] == 2) {
        if (k != 0 && k != 4) {
          int headX=x - directX[i] * 4;
          int headY=y - directY[i] * 4;
          if (GameMap.reachable(headX,headY)) {
            Color headColor=gameMap.getColor(headX,headY);
            Color tailColor=gameMap.getColor(x,y);
            if (headColor == Color.NULL && tailColor == Color.NULL) {
              int sideX=x + directX[i];
              int sideY=y + directY[i];
              if (GameMap.reachable(sideX,sideY)) {
                Color sideColor=gameMap.getColor(sideX,sideY);
                if (sideColor == Color.NULL) {
                  threeOpenAttack.add(point);
                }
              }
              sideX=headX - directX[i];
              sideY=headY - directY[i];
              if (GameMap.reachable(sideX,sideY)) {
                Color sideColor=gameMap.getColor(sideX,sideY);
                if (sideColor == Color.NULL) {
                  threeOpenAttack.add(point);
                }
              }
            }
            if (headColor == Color.NULL && tailColor != Color.NULL) {
              int sideX=x + directX[i];
              int sideY=y + directY[i];
              if (GameMap.reachable(sideX,sideY)) {
                Color sideColor=gameMap.getColor(sideX,sideY);
                if (sideColor == Color.NULL) {
                  threeOpenAttack.add(point);
                }
              }
            }
            if (headColor != Color.NULL && tailColor == Color.NULL) {
              int sideX=headX - directX[i];
              int sideY=headY - directY[i];
              if (GameMap.reachable(sideX,sideY)) {
                Color sideColor=gameMap.getColor(sideX,sideY);
                if (sideColor == Color.NULL) {
                  threeOpenAttack.add(point);
                }
              }
            }
          }
        }
      }
      if (score.getColorCount(otherColor)[x][y][i] == 3 && score.getColorCount(color)[x][y][i] == 0) {
        int headX=x - directX[i] * 4;
        int headY=y - directY[i] * 4;
        if (GameMap.reachable(headX,headY)) {
          Color headColor=gameMap.getColor(headX,headY);
          Color tailColor=gameMap.getColor(x,y);
          if (headColor != Color.NULL && tailColor == Color.NULL) {
            if (gameMap.getColor(x - directX[i],y - directY[i]) != Color.NULL) {
              int sideX=headX - directX[i];
              int sideY=headY - directY[i];
              if (GameMap.reachable(sideX,sideY)) {
                Color sideColor=gameMap.getColor(sideX,sideY);
                if (sideColor == Color.NULL) {
                  threeDefence.add(point);
                }
              }
            }
          }
          if (tailColor != Color.NULL && headColor == Color.NULL) {
            if (gameMap.getColor(headX + directX[i],headY + directY[i]) != Color.NULL) {
              int sideX=x + directX[i];
              int sideY=y + directY[i];
              if (GameMap.reachable(sideX,sideY)) {
                Color sideColor=gameMap.getColor(sideX,sideY);
                if (sideColor == Color.NULL) {
                  threeDefence.add(point);
                }
              }
            }
          }
          if (headColor == Color.NULL && tailColor == Color.NULL) {
            int sideX=x + directX[i];
            int sideY=y + directY[i];
            if (GameMap.reachable(sideX,sideY) && gameMap.getColor(sideX,sideY) == Color.NULL) {
              threeDefence.add(point);
            }
            sideX=headX - directX[i];
            sideY=headY - directY[i];
            if (GameMap.reachable(sideX,sideY) && gameMap.getColor(sideX,sideY) == Color.NULL) {
              threeDefence.add(point);
            }
          }
        }
      }
      if (!basic) {
        if (score.getColorCount(otherColor)[x][y][i] == 0 && score.getColorCount(color)[x][y][i] == 1) {
          twoAttack.add(point);
        }
        if (score.getColorCount(otherColor)[x][y][i] == 3 && score.getColorCount(color)[x][y][i] == 0) {
          if (fourCloseDefence.containsKey(point)) {
            if (fourCloseDefence.get(point) != i) {
              doubleFourCloseDefence.add(point);
            }
          }
          if (threeOpenDefence.containsKey(point)) {
            if (threeOpenDefence.get(point) != i) {
              fourCloseAndOpenThreeDefense.add(point);
            }
          }
          fourCloseDefence.put(point,i);
        }
        if (score.getColorCount(otherColor)[x][y][i] == 2 && score.getColorCount(color)[x][y][i] == 0) {
          int headX=x - directX[i] * 4;
          int headY=y - directY[i] * 4;
          if (k != 0 && k != 4) {
            if (GameMap.reachable(headX,headY)) {
              Color headColor=gameMap.getColor(headX,headY);
              Color tailColor=gameMap.getColor(x,y);
              if (headColor == Color.NULL && tailColor == Color.NULL) {
                int sideX=x + directX[i];
                int sideY=y + directY[i];
                if (GameMap.reachable(sideX,sideY)) {
                  Color sideColor=gameMap.getColor(sideX,sideY);
                  if (sideColor == Color.NULL) {
                    if (threeOpenDefence.containsKey(point)) {
                      if (threeOpenDefence.get(point) != i) {
                        doubleThreeOpenDefense.add(point);
                      }
                    }
                    if (fourCloseDefence.containsKey(point)) {
                      if (fourCloseDefence.get(point) != i) {
                        fourCloseAndOpenThreeDefense.add(point);
                      }
                    }
                    threeOpenDefence.put(point,i);
                  }
                }
                sideX=headX - directX[i];
                sideY=headY - directY[i];
                if (GameMap.reachable(sideX,sideY)) {
                  Color sideColor=gameMap.getColor(sideX,sideY);
                  if (sideColor == Color.NULL) {
                    if (threeOpenDefence.containsKey(point)) {
                      if (threeOpenDefence.get(point) != i) {
                        doubleThreeOpenDefense.add(point);
                      }
                    }
                    if (fourCloseDefence.containsKey(point)) {
                      if (fourCloseDefence.get(point) != i) {
                        fourCloseAndOpenThreeDefense.add(point);
                      }
                    }
                    threeOpenDefence.put(point,i);
                  }
                }
              }
              if (headColor == Color.NULL && tailColor != Color.NULL) {
                int sideX=x + directX[i];
                int sideY=y + directY[i];
                if (GameMap.reachable(sideX,sideY)) {
                  Color sideColor=gameMap.getColor(sideX,sideY);
                  if (sideColor == Color.NULL) {
                    if (threeOpenDefence.containsKey(point)) {
                      if (threeOpenDefence.get(point) != i) {
                        doubleThreeOpenDefense.add(point);
                      }
                    }
                    if (fourCloseDefence.containsKey(point)) {
                      if (fourCloseDefence.get(point) != i) {
                        fourCloseAndOpenThreeDefense.add(point);
                      }
                    }
                    threeOpenDefence.put(point,i);
                  }
                }
              }
              if (headColor != Color.NULL && tailColor == Color.NULL) {
                int sideX=headX - directX[i];
                int sideY=headY - directY[i];
                if (GameMap.reachable(sideX,sideY)) {
                  Color sideColor=gameMap.getColor(sideX,sideY);
                  if (sideColor == Color.NULL) {
                    if (threeOpenDefence.containsKey(point)) {
                      if (threeOpenDefence.get(point) != i) {
                        doubleThreeOpenDefense.add(point);
                      }
                    }
                    if (fourCloseDefence.containsKey(point)) {
                      if (fourCloseDefence.get(point) != i) {
                        fourCloseAndOpenThreeDefense.add(point);
                      }
                    }
                    threeOpenDefence.put(point,i);
                  }
                }
              }
            }
          }
        }
      }
      x+=directX[i];
      y+=directY[i];
      if (!GameMap.reachable(x,y)) {
        break;
      }
    }
  }
}"
40114,"ComboResult canKill(Color targetColor,int level,long startTime,long limitTime){
  if (level % 2 == 1) {
    level--;
  }
  this.startTime=startTime;
  this.limitTime=limitTime;
  currentLevel=level;
  result=new ComboResult();
  result.point=null;
  cache.clear();
  dfsKill(gameMap,targetColor,targetColor,level,score,ComboTye.FOUR,null,null,null);
  if (result.point != null)   return result;
  result.point=null;
  cache.clear();
  dfsKill(gameMap,targetColor.getOtherColor(),targetColor.getOtherColor(),level,score,ComboTye.FOUR,null,null,null);
  if (result.point != null) {
    result.point=null;
    return result;
  }
  result.point=null;
  cache.clear();
  dfsKill(gameMap,targetColor,targetColor,level,score,ComboTye.THREE,null,null,null);
  return result;
}","ComboResult canKill(Color targetColor,int level,long startTime,long limitTime){
  if (level % 2 == 1) {
    level--;
  }
  this.startTime=startTime;
  this.limitTime=limitTime;
  currentLevel=level;
  result=new ComboResult();
  result.point=null;
  cache.clear();
  dfsKill(gameMap,targetColor,targetColor,level,score,ComboTye.FOUR,null,null,null);
  if (result.point != null) {
    result.fourWin=true;
    return result;
  }
  result.point=null;
  cache.clear();
  dfsKill(gameMap,targetColor.getOtherColor(),targetColor.getOtherColor(),level,score,ComboTye.FOUR,null,null,null);
  if (result.point != null) {
    result.point=null;
    result.fourWin=true;
    return result;
  }
  result.point=null;
  cache.clear();
  dfsKill(gameMap,targetColor,targetColor,level,score,ComboTye.THREE,null,null,null);
  result.fourWin=false;
  return result;
}"
40115,"public Result search(Color color,boolean randomBegin){
  timeOut=false;
  Result result=new Result();
  Cache cache=new Cache(config,gameMap);
  aiColor=color;
  if (WinChecker.win(gameMap.getMap()) != null) {
    return null;
  }
  consolePrinter.init(counter);
  score.init(gameMap,aiColor);
  comboProcessor.init(gameMap,score,counter,cache);
  if (randomBegin) {
    Point point=BeginningProcessor.getBeginningRandomPoint(gameMap.getMap());
    if (point != null) {
      result.add(point,0);
      return result;
    }
  }
  Analyzer data=new Analyzer(gameMap,color,gameMap.getNeighbor(),score,false);
  List<Point> points=LevelProcessor.getExpandPoints(data,gameMap);
  if (points.size() == 1) {
    result.add(points.get(0),0);
    return result;
  }
  Set<Point> losePoints=new HashSet<>();
  int comboLevel=config.comboDeep;
  startTime=System.currentTimeMillis();
  boolean otherWin=false;
  for (int i=1; i <= comboLevel; i+=3) {
    ComboResult comboResult=comboProcessor.canKill(color,i,startTime,config.comboTimeOut);
    Point winTry=comboResult.point;
    if (winTry != null) {
      result.add(winTry,Integer.MAX_VALUE);
      return result;
    }
    for (    Point point : points) {
      if (losePoints.contains(point)) {
        continue;
      }
      setColor(point,color,Color.NULL,color);
      comboResult=comboProcessor.canKill(color.getOtherColor(),i,startTime,config.comboTimeOut);
      winTry=comboResult.point;
      if (winTry != null) {
        losePoints.add(point);
      }
      setColor(point,Color.NULL,color,color);
    }
    if (losePoints.size() == points.size()) {
      otherWin=true;
    }
    if (comboResult.timeOut) {
      if (Config.debug) {
        System.out.println(""String_Node_Str"");
      }
      break;
    }
    if (Config.debug) {
      System.out.printf(""String_Node_Str"",i);
      if (losePoints.size() == points.size()) {
        System.out.print(""String_Node_Str"");
      }
      System.out.println();
    }
    result.setComboLevel(i);
  }
  if (otherWin) {
    losePoints.clear();
  }
  startTime=System.currentTimeMillis();
  counter.allStep=points.size();
  for (int level=2; level <= config.searchDeep; level+=2) {
    int extreme=Integer.MIN_VALUE;
    Result currentResult=new Result();
    if (result.getPoint() != null) {
      points.remove(result.getPoint());
      points.add(0,result.getPoint());
    }
    for (    Point point : points) {
      setColor(point,color,Color.NULL,aiColor);
      int value;
      if (!losePoints.contains(point)) {
        value=dfsScore(level - 1,color.getOtherColor(),null,extreme);
      }
 else {
        value=Integer.MIN_VALUE;
      }
      if (timeOut) {
        if (Config.debug) {
          System.out.println(""String_Node_Str"");
        }
        setColor(point,Color.NULL,color,aiColor);
        break;
      }
      counter.finishStep++;
      consolePrinter.printInfo(point,value);
      if (value >= extreme) {
        extreme=value;
        currentResult.add(point,value);
        if (extreme == Integer.MAX_VALUE) {
          currentResult.add(point,value);
          setColor(point,Color.NULL,color,aiColor);
          break;
        }
      }
      setColor(point,Color.NULL,color,aiColor);
    }
    if (Config.debug) {
      if (!timeOut) {
        System.out.printf(""String_Node_Str"",level);
        System.out.println(currentResult.getPoint());
        System.out.println();
      }
    }
    if (!timeOut) {
      currentResult.setComboLevel(result.getComboLevel());
      currentResult.setSearchLevel(level);
      result=currentResult;
    }
    if (losePoints.size() == points.size() - 1) {
      break;
    }
    if (System.currentTimeMillis() - startTime > config.searchTimeOut / 3) {
      break;
    }
  }
  return result;
}","public Result search(Color color,boolean randomBegin){
  timeOut=false;
  Result result=new Result();
  Cache cache=new Cache(config,gameMap);
  aiColor=color;
  if (WinChecker.win(gameMap.getMap()) != null) {
    return null;
  }
  consolePrinter.init(counter);
  score.init(gameMap,aiColor);
  comboProcessor.init(gameMap,score,counter,cache);
  if (randomBegin) {
    Point point=BeginningProcessor.getBeginningRandomPoint(gameMap.getMap());
    if (point != null) {
      result.add(point,0);
      return result;
    }
  }
  Analyzer data=new Analyzer(gameMap,color,gameMap.getNeighbor(),score,false);
  List<Point> points=LevelProcessor.getExpandPoints(data,gameMap);
  if (points.size() == 1) {
    result.add(points.get(0),0);
    return result;
  }
  Set<Point> losePoints=new HashSet<>();
  Set<Point> threeWins=new HashSet<>();
  int comboLevel=config.comboDeep;
  startTime=System.currentTimeMillis();
  boolean otherWin=false;
  for (int i=1; i <= comboLevel; i+=3) {
    ComboResult comboResult=comboProcessor.canKill(color,i,startTime,config.comboTimeOut);
    Point winTry=comboResult.point;
    if (winTry != null) {
      if (comboResult.fourWin) {
        result.add(winTry,Integer.MAX_VALUE);
        return result;
      }
 else {
        threeWins.add(winTry);
      }
    }
    for (    Point point : points) {
      if (losePoints.contains(point)) {
        continue;
      }
      setColor(point,color,Color.NULL,color);
      comboResult=comboProcessor.canKill(color.getOtherColor(),i,startTime,config.comboTimeOut);
      winTry=comboResult.point;
      if (winTry != null) {
        losePoints.add(point);
      }
      setColor(point,Color.NULL,color,color);
    }
    if (losePoints.size() == points.size()) {
      otherWin=true;
    }
    if (comboResult.timeOut) {
      if (Config.debug) {
        System.out.println(""String_Node_Str"");
      }
      break;
    }
    if (Config.debug) {
      System.out.printf(""String_Node_Str"",i);
      if (losePoints.size() == points.size()) {
        System.out.print(""String_Node_Str"");
      }
      System.out.println();
    }
    result.setComboLevel(i);
  }
  threeWins.removeAll(losePoints);
  if (threeWins.size() > 0) {
    result.add(threeWins.iterator().next(),Integer.MAX_VALUE);
    return result;
  }
  if (otherWin) {
    losePoints.clear();
  }
  startTime=System.currentTimeMillis();
  counter.allStep=points.size();
  for (int level=2; level <= config.searchDeep; level+=2) {
    int extreme=Integer.MIN_VALUE;
    Result currentResult=new Result();
    if (result.getPoint() != null) {
      points.remove(result.getPoint());
      points.add(0,result.getPoint());
    }
    for (    Point point : points) {
      setColor(point,color,Color.NULL,aiColor);
      int value;
      if (!losePoints.contains(point)) {
        value=dfsScore(level - 1,color.getOtherColor(),null,extreme);
      }
 else {
        value=Integer.MIN_VALUE;
      }
      if (timeOut) {
        if (Config.debug) {
          System.out.println(""String_Node_Str"");
        }
        setColor(point,Color.NULL,color,aiColor);
        break;
      }
      counter.finishStep++;
      consolePrinter.printInfo(point,value);
      if (value >= extreme) {
        extreme=value;
        currentResult.add(point,value);
        if (extreme == Integer.MAX_VALUE) {
          currentResult.add(point,value);
          setColor(point,Color.NULL,color,aiColor);
          break;
        }
      }
      setColor(point,Color.NULL,color,aiColor);
    }
    if (Config.debug) {
      if (!timeOut) {
        System.out.printf(""String_Node_Str"",level);
        System.out.println(currentResult.getPoint());
        System.out.println();
      }
    }
    if (!timeOut) {
      currentResult.setComboLevel(result.getComboLevel());
      currentResult.setSearchLevel(level);
      result=currentResult;
    }
    if (losePoints.size() == points.size() - 1) {
      break;
    }
    if (System.currentTimeMillis() - startTime > config.searchTimeOut / 3) {
      break;
    }
  }
  return result;
}"
40116,"public static void main(String[] args){
  GameMap gameMap=new GameMap(MapDriver.readMap(""String_Node_Str""));
  Score score=new Score();
  score.init(gameMap,Color.BLACK);
  Analyzer analyzer=new Analyzer(gameMap,Color.WHITE,gameMap.getNeighbor(),score,false);
  List<Point> points=getExpandPoints(analyzer,gameMap);
  ConsolePrinter.printMapWithPoints(gameMap,points);
  System.out.println(points);
}","public static void main(String[] args){
  GameMap gameMap=new GameMap(MapDriver.readMap());
  Score score=new Score();
  score.init(gameMap,Color.BLACK);
  Analyzer analyzer=new Analyzer(gameMap,Color.BLACK,gameMap.getNeighbor(),score,false);
  List<Point> points=getExpandPoints(analyzer,gameMap);
  ConsolePrinter.printMapWithPoints(gameMap,points);
  System.out.println(points);
}"
40117,"private static List<Point> selectSet(Analyzer data,GameMap gameMap){
  if (!data.getFiveAttack().isEmpty()) {
    return new ArrayList<>(data.getFiveAttack());
  }
  if (!data.getFourDefence().isEmpty()) {
    return new ArrayList<>(data.getFourDefence());
  }
  if (!data.getThreeDefence().isEmpty()) {
    return new ArrayList<Point>(data.getFourAttack()){
{
        addAll(data.getThreeDefence());
      }
    }
;
  }
  if (!data.getDoubleFourCloseDefence().isEmpty()) {
    Point deadPoint=data.getDoubleFourCloseDefence().iterator().next();
    Set<Point> linePoints=gameMap.getPointLinesNeighbor(deadPoint);
    Set<Point> result=new HashSet<>();
    result.add(deadPoint);
    result.addAll(data.getFourAttack());
    data.getFourCloseDefence().forEach((k,v) -> {
      if (linePoints.contains(k)) {
        result.add(k);
      }
    }
);
    return new ArrayList<>(result);
  }
  if (!data.getDoubleThreeOpenDefense().isEmpty()) {
    Point deadPoint=data.getDoubleThreeOpenDefense().iterator().next();
    Set<Point> linePoints=gameMap.getPointLinesNeighbor(deadPoint);
    Set<Point> result=new HashSet<>();
    result.add(deadPoint);
    result.addAll(data.getFourAttack());
    result.addAll(data.getThreeOpenAttack());
    data.getThreeOpenDefence().forEach((k,v) -> {
      if (linePoints.contains(k)) {
        result.add(k);
      }
    }
);
    return new ArrayList<>(result);
  }
  if (!data.getFourCloseAndOpenThreeDefense().isEmpty()) {
    Point deadPoint=data.getFourCloseAndOpenThreeDefense().iterator().next();
    Set<Point> linePoints=gameMap.getPointLinesNeighbor(deadPoint);
    Set<Point> result=new HashSet<>();
    result.addAll(data.getFourAttack());
    result.add(deadPoint);
    data.getThreeOpenDefence().forEach((k,v) -> {
      if (linePoints.contains(k)) {
        result.add(k);
      }
    }
);
    data.getFourCloseDefence().forEach((k,v) -> {
      if (linePoints.contains(k)) {
        result.add(k);
      }
    }
);
    return new ArrayList<>(result);
  }
  List<Point> result=new ArrayList<>();
  result.addAll(data.getFourAttack());
  result.addAll(data.getThreeOpenAttack());
  result.addAll(data.getTwoAttack());
  result.addAll(data.getNotKey());
  while (result.size() > Config.nodeLimit) {
    result=result.subList(0,Config.nodeLimit);
  }
  return result;
}","private static List<Point> selectSet(Analyzer data,GameMap gameMap){
  if (!data.getFiveAttack().isEmpty()) {
    return new ArrayList<>(data.getFiveAttack());
  }
  if (!data.getFourDefence().isEmpty()) {
    return new ArrayList<>(data.getFourDefence());
  }
  if (!data.getThreeDefence().isEmpty()) {
    return new ArrayList<Point>(data.getFourAttack()){
{
        addAll(data.getThreeDefence());
      }
    }
;
  }
  if (!data.getDoubleFourCloseDefence().isEmpty()) {
    Point deadPoint=data.getDoubleFourCloseDefence().iterator().next();
    Set<Point> linePoints=gameMap.getPointLinesNeighbor(deadPoint);
    Set<Point> result=new HashSet<>();
    result.add(deadPoint);
    result.addAll(data.getFourAttack());
    data.getFourCloseDefence().forEach((k,v) -> {
      if (linePoints.contains(k)) {
        result.add(k);
      }
    }
);
    return new ArrayList<>(result);
  }
  if (!data.getFourCloseAndOpenThreeDefense().isEmpty()) {
    Point deadPoint=data.getFourCloseAndOpenThreeDefense().iterator().next();
    Set<Point> linePoints=gameMap.getPointLinesNeighbor(deadPoint);
    Set<Point> result=new HashSet<>();
    result.addAll(data.getFourAttack());
    result.add(deadPoint);
    data.getThreeOpenDefence().forEach((k,v) -> {
      if (linePoints.contains(k)) {
        result.add(k);
      }
    }
);
    data.getFourCloseDefence().forEach((k,v) -> {
      if (linePoints.contains(k)) {
        result.add(k);
      }
    }
);
    return new ArrayList<>(result);
  }
  if (!data.getDoubleThreeOpenDefense().isEmpty()) {
    Point deadPoint=data.getDoubleThreeOpenDefense().iterator().next();
    Set<Point> linePoints=gameMap.getPointLinesNeighbor(deadPoint);
    Set<Point> result=new HashSet<>();
    result.add(deadPoint);
    result.addAll(data.getFourAttack());
    result.addAll(data.getThreeOpenAttack());
    data.getThreeOpenDefence().forEach((k,v) -> {
      if (linePoints.contains(k)) {
        result.add(k);
      }
    }
);
    return new ArrayList<>(result);
  }
  List<Point> result=new ArrayList<>();
  result.addAll(data.getFourAttack());
  result.addAll(data.getThreeOpenAttack());
  result.addAll(data.getTwoAttack());
  result.addAll(data.getNotKey());
  while (result.size() > Config.nodeLimit) {
    result=result.subList(0,Config.nodeLimit);
  }
  return result;
}"
40118,"public static Color[][] readMap(String filePath){
  File file=new File(resourcePath + filePath);
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new FileReader(file));
    String tempString=reader.readLine();
    int size=Integer.valueOf(tempString);
    Color[][] map=new Color[size][size];
    for (int i=0; i < size; i++) {
      tempString=reader.readLine();
      for (int j=0; j < size; j++) {
switch (tempString.charAt(j)) {
case '.':
          map[i][j]=Color.NULL;
        break;
case '□':
      map[i][j]=Color.NULL;
    break;
case '×':
  map[i][j]=Color.BLACK;
break;
case '●':
map[i][j]=Color.WHITE;
break;
}
}
}
reader.close();
return map;
}
 catch (IOException e) {
e.printStackTrace();
}
 finally {
if (reader != null) {
try {
reader.close();
}
 catch (IOException ignored) {
}
}
}
return null;
}","public static Color[][] readMap(String filePath){
  File file=new File(resourcePath + filePath);
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new FileReader(file));
    String tempString=reader.readLine();
    int size=Integer.valueOf(tempString);
    Color[][] map=new Color[size][size];
    for (int i=0; i < size; i++) {
      tempString=reader.readLine();
      for (int j=0; j < size; j++) {
switch (tempString.charAt(j)) {
case '.':
          map[i][j]=Color.NULL;
        break;
case '□':
      map[i][j]=Color.NULL;
    break;
case '×':
  map[i][j]=Color.BLACK;
break;
case '●':
map[i][j]=Color.WHITE;
break;
case 'x':
map[i][j]=Color.BLACK;
break;
case 'o':
map[i][j]=Color.WHITE;
break;
}
}
}
reader.close();
return map;
}
 catch (IOException e) {
e.printStackTrace();
}
 finally {
if (reader != null) {
try {
reader.close();
}
 catch (IOException ignored) {
}
}
}
return null;
}"
40119,"private boolean dfsKill(GameMap gameMap,Color color,Color targetColor,int level,Score score,ComboTye comboTye,Set<Point> nextRange,Set<Point> oldRange,Point lastPoint){
  if (System.currentTimeMillis() - startTime > limitTime) {
    result.timeOut=true;
    return false;
  }
  Boolean cacheResult=cache.getComboResult();
  if (cacheResult != null) {
    return cacheResult;
  }
  if (level == 0) {
    return returnValue(false);
  }
  List<Point> rangePoints;
  Set<Point> rangeSet=new HashSet<>();
  if (nextRange != null)   rangeSet.addAll(nextRange);
  if (oldRange != null)   rangeSet.addAll(oldRange);
  if (rangeSet.isEmpty()) {
    rangePoints=gameMap.getNeighbor();
  }
 else {
    rangeSet.remove(lastPoint);
    rangePoints=new ArrayList<>(rangeSet);
  }
  Analyzer data=new Analyzer(gameMap,color,rangePoints,score,false);
  if (comboTye == ComboTye.THREE) {
    if (color == targetColor && !data.getThreeDefence().isEmpty()) {
      comboTye=ComboTye.FOUR;
    }
  }
  if (color == targetColor) {
    if (data.getFiveAttack().size() > 0) {
      return returnValue(true);
    }
    List<Point> points=getComboAttackPoints(data,comboTye);
    for (    Point point : points) {
      setColor(point,color,Color.NULL,targetColor,score,gameMap);
      Set<Point> newNextRange=gameMap.getPointLinesNeighbor(point);
      boolean value=dfsKill(gameMap,color.getOtherColor(),targetColor,level - 1,score,comboTye,newNextRange,nextRange,point);
      if (level == currentLevel && value) {
        result.point=point;
      }
      if (value) {
        setColor(point,Color.NULL,color,targetColor,score,gameMap);
        return returnValue(true);
      }
      setColor(point,Color.NULL,color,targetColor,score,gameMap);
    }
    return returnValue(false);
  }
 else {
    if (data.getFiveAttack().size() > 0) {
      return returnValue(false);
    }
    List<Point> points=getComboDefencePoints(data,comboTye);
    if (points.size() == 0) {
      return returnValue(false);
    }
    for (    Point point : points) {
      setColor(point,color,Color.NULL,targetColor,score,gameMap);
      Set<Point> newNextRange=gameMap.getPointLinesNeighbor(point);
      boolean value=dfsKill(gameMap,color.getOtherColor(),targetColor,level - 1,score,comboTye,newNextRange,nextRange,point);
      if (!value) {
        setColor(point,Color.NULL,color,targetColor,score,gameMap);
        return returnValue(false);
      }
      setColor(point,Color.NULL,color,targetColor,score,gameMap);
    }
    return returnValue(true);
  }
}","private boolean dfsKill(GameMap gameMap,Color color,Color targetColor,int level,Score score,ComboTye comboTye,Set<Point> nextRange,Set<Point> oldRange,Point lastPoint){
  if (System.currentTimeMillis() - startTime > limitTime) {
    result.timeOut=true;
    return false;
  }
  Boolean cacheResult=cache.getComboResult();
  if (cacheResult != null) {
    return cacheResult;
  }
  if (level == 0) {
    return returnValue(false);
  }
  List<Point> rangePoints;
  Set<Point> rangeSet=new HashSet<>();
  if (nextRange != null)   rangeSet.addAll(nextRange);
  if (oldRange != null)   rangeSet.addAll(oldRange);
  if (rangeSet.isEmpty()) {
    rangePoints=gameMap.getNeighbor();
  }
 else {
    rangeSet.remove(lastPoint);
    rangePoints=new ArrayList<>(rangeSet);
  }
  Analyzer data=new Analyzer(gameMap,color,rangePoints,score,true);
  if (comboTye == ComboTye.THREE) {
    if (color == targetColor && !data.getThreeDefence().isEmpty()) {
      comboTye=ComboTye.FOUR;
    }
  }
  if (color == targetColor) {
    if (data.getFiveAttack().size() > 0) {
      if (level == currentLevel) {
        result.point=data.getFiveAttack().iterator().next();
      }
      return returnValue(true);
    }
    List<Point> points=getComboAttackPoints(data,comboTye);
    for (    Point point : points) {
      setColor(point,color,Color.NULL,targetColor,score,gameMap);
      Set<Point> newNextRange=gameMap.getPointLinesNeighbor(point);
      boolean value=dfsKill(gameMap,color.getOtherColor(),targetColor,level - 1,score,comboTye,newNextRange,nextRange,point);
      if (level == currentLevel && value) {
        result.point=point;
      }
      if (value) {
        setColor(point,Color.NULL,color,targetColor,score,gameMap);
        return returnValue(true);
      }
      setColor(point,Color.NULL,color,targetColor,score,gameMap);
    }
    return returnValue(false);
  }
 else {
    if (data.getFiveAttack().size() > 0) {
      return returnValue(false);
    }
    List<Point> points=getComboDefencePoints(data,comboTye);
    if (points.size() == 0) {
      return returnValue(false);
    }
    for (    Point point : points) {
      setColor(point,color,Color.NULL,targetColor,score,gameMap);
      Set<Point> newNextRange=gameMap.getPointLinesNeighbor(point);
      boolean value=dfsKill(gameMap,color.getOtherColor(),targetColor,level - 1,score,comboTye,newNextRange,nextRange,point);
      if (!value) {
        setColor(point,Color.NULL,color,targetColor,score,gameMap);
        return returnValue(false);
      }
      setColor(point,Color.NULL,color,targetColor,score,gameMap);
    }
    return returnValue(true);
  }
}"
40120,"public static void main(String[] args) throws TimeOutException {
  Color[][] colors=MapDriver.readMap();
  GameMap gameMap=new GameMap(colors);
  ConsolePrinter.printMap(gameMap);
  Score score=new Score();
  Color color=Color.BLACK;
  score.init(gameMap,color);
  long time=System.currentTimeMillis();
  Config config=new Config();
  config.comboDeep=15;
  ComboProcessor comboProcessor=new ComboProcessor();
  comboProcessor.init(gameMap,score,new Counter(),new Cache(config,gameMap));
  System.out.println(comboProcessor.canKill(color,15,System.currentTimeMillis(),config.comboTimeOut).point);
  System.out.println(System.currentTimeMillis() - time + ""String_Node_Str"");
}","public static void main(String[] args) throws TimeOutException {
  Color[][] colors=MapDriver.readMap();
  GameMap gameMap=new GameMap(colors);
  ConsolePrinter.printMap(gameMap);
  Score score=new Score();
  Color color=Color.WHITE;
  score.init(gameMap,color);
  long time=System.currentTimeMillis();
  Config config=new Config();
  config.comboDeep=15;
  ComboProcessor comboProcessor=new ComboProcessor();
  comboProcessor.init(gameMap,score,new Counter(),new Cache(config,gameMap));
  System.out.println(comboProcessor.canKill(color,config.comboDeep,System.currentTimeMillis(),config.comboTimeOut).point);
  System.out.println(System.currentTimeMillis() - time + ""String_Node_Str"");
}"
40121,"ComboResult canKill(Color targetColor,int level,long startTime,long limitTime){
  if (level % 2 == 1) {
    level--;
  }
  this.startTime=startTime;
  this.limitTime=limitTime;
  currentLevel=level;
  result=new ComboResult();
  result.point=null;
  cache.clear();
  dfsKill(gameMap,targetColor,targetColor,level,score,ComboTye.FOUR,null,null,null);
  if (result.point != null) {
    result.fourWin=true;
    return result;
  }
  result.point=null;
  cache.clear();
  dfsKill(gameMap,targetColor.getOtherColor(),targetColor.getOtherColor(),level,score,ComboTye.FOUR,null,null,null);
  if (result.point != null) {
    result.point=null;
    result.fourWin=true;
    return result;
  }
  result.point=null;
  cache.clear();
  dfsKill(gameMap,targetColor,targetColor,level,score,ComboTye.THREE,null,null,null);
  result.fourWin=false;
  return result;
}","ComboResult canKill(Color targetColor,int level,long startTime,long limitTime){
  if (level % 2 == 0) {
    level++;
  }
  this.startTime=startTime;
  this.limitTime=limitTime;
  currentLevel=level;
  result=new ComboResult();
  result.point=null;
  cache.clear();
  dfsKill(gameMap,targetColor,targetColor,level,score,ComboTye.FOUR,null,null,null);
  if (result.point != null) {
    result.fourWin=true;
    return result;
  }
  result.point=null;
  cache.clear();
  dfsKill(gameMap,targetColor.getOtherColor(),targetColor.getOtherColor(),level,score,ComboTye.FOUR,null,null,null);
  if (result.point != null) {
    result.point=null;
    result.fourWin=true;
    return result;
  }
  result.point=null;
  cache.clear();
  dfsKill(gameMap,targetColor,targetColor,level,score,ComboTye.THREE,null,null,null);
  result.fourWin=false;
  return result;
}"
40122,"private int getValueByCount(int blackCount,int whiteCount,Color color){
  int ONE=4;
  int TWO=20;
  int THREE=40;
  int FOUR=100;
  float weight=1.0f;
  int valueWhite=0;
  if (blackCount == 0) {
    if (whiteCount == 1)     valueWhite+=ONE;
    if (whiteCount == 2)     valueWhite+=TWO;
    if (whiteCount == 3)     valueWhite+=THREE;
    if (whiteCount == 4)     valueWhite+=FOUR;
  }
  int valueBlack=0;
  if (whiteCount == 0) {
    if (blackCount == 1)     valueBlack+=ONE;
    if (blackCount == 2)     valueBlack+=TWO;
    if (blackCount == 3)     valueBlack+=THREE;
    if (blackCount == 4)     valueBlack+=FOUR;
  }
  int value=0;
  if (color == Color.BLACK) {
    return valueBlack - (int)(valueWhite * weight);
  }
  if (color == Color.WHITE) {
    return valueWhite - (int)(valueBlack * weight);
  }
  return value;
}","private int getValueByCount(int blackCount,int whiteCount,Color color){
  int ONE=4;
  int TWO=20;
  int THREE=40;
  int FOUR=90;
  float weight=1.0f;
  int valueWhite=0;
  if (blackCount == 0) {
    if (whiteCount == 1)     valueWhite+=ONE;
    if (whiteCount == 2)     valueWhite+=TWO;
    if (whiteCount == 3)     valueWhite+=THREE;
    if (whiteCount == 4)     valueWhite+=FOUR;
  }
  int valueBlack=0;
  if (whiteCount == 0) {
    if (blackCount == 1)     valueBlack+=ONE;
    if (blackCount == 2)     valueBlack+=TWO;
    if (blackCount == 3)     valueBlack+=THREE;
    if (blackCount == 4)     valueBlack+=FOUR;
  }
  int value=0;
  if (color == Color.BLACK) {
    return valueBlack - (int)(valueWhite * weight);
  }
  if (color == Color.WHITE) {
    return valueWhite - (int)(valueBlack * weight);
  }
  return value;
}"
40123,"private void addAnalyze(Point point){
  for (int i=0; i < 4; i++) {
    int x=point.getX();
    int y=point.getY();
    Color otherColor=color.getOtherColor();
    for (int k=0; k < 5; k++) {
      if (score.getColorCount(otherColor)[x][y][i] == 0 && score.getColorCount(color)[x][y][i] == 4) {
        fiveAttack.add(point);
      }
      if (score.getColorCount(otherColor)[x][y][i] == 0 && score.getColorCount(color)[x][y][i] == 3) {
        fourAttack.add(point);
      }
      if (score.getColorCount(otherColor)[x][y][i] == 4 && score.getColorCount(color)[x][y][i] == 0) {
        fourDefence.add(point);
      }
      if (score.getColorCount(otherColor)[x][y][i] == 0 && score.getColorCount(color)[x][y][i] == 2) {
        if (k != 0 && k != 4) {
          int headX=x - directX[i] * 4;
          int headY=y - directY[i] * 4;
          if (GameMap.reachable(headX,headY)) {
            Color headColor=gameMap.getColor(headX,headY);
            Color tailColor=gameMap.getColor(x,y);
            if (headColor == Color.NULL && tailColor != Color.NULL) {
              int sideX=x + directX[i];
              int sideY=y + directY[i];
              if (GameMap.reachable(sideX,sideY)) {
                Color sideColor=gameMap.getColor(sideX,sideY);
                if (sideColor == Color.NULL) {
                  threeOpenAttack.add(point);
                }
              }
            }
            if (headColor != Color.NULL && tailColor == Color.NULL) {
              int sideX=headX - directX[i];
              int sideY=headY - directY[i];
              if (GameMap.reachable(sideX,sideY)) {
                Color sideColor=gameMap.getColor(sideX,sideY);
                if (sideColor == Color.NULL) {
                  threeOpenAttack.add(point);
                }
              }
            }
          }
        }
      }
      if (score.getColorCount(otherColor)[x][y][i] == 3 && score.getColorCount(color)[x][y][i] == 0) {
        int headX=x - directX[i] * 4;
        int headY=y - directY[i] * 4;
        if (GameMap.reachable(headX,headY)) {
          Color headColor=gameMap.getColor(headX,headY);
          Color tailColor=gameMap.getColor(x,y);
          if (headColor != Color.NULL && tailColor == Color.NULL) {
            if (gameMap.getColor(x - directX[i],y - directY[i]) != Color.NULL) {
              int sideX=headX - directX[i];
              int sideY=headY - directY[i];
              if (GameMap.reachable(sideX,sideY)) {
                Color sideColor=gameMap.getColor(sideX,sideY);
                if (sideColor == Color.NULL) {
                  threeDefence.add(point);
                }
              }
            }
          }
          if (tailColor != Color.NULL && headColor == Color.NULL) {
            if (gameMap.getColor(headX + directX[i],headY + directY[i]) != Color.NULL) {
              int sideX=x + directX[i];
              int sideY=y + directY[i];
              if (GameMap.reachable(sideX,sideY)) {
                Color sideColor=gameMap.getColor(sideX,sideY);
                if (sideColor == Color.NULL) {
                  threeDefence.add(point);
                }
              }
            }
          }
          if (headColor == Color.NULL && tailColor == Color.NULL) {
            int sideX=x + directX[i];
            int sideY=y + directY[i];
            if (GameMap.reachable(sideX,sideY) && gameMap.getColor(sideX,sideY) == Color.NULL) {
              threeDefence.add(point);
            }
            sideX=x - directX[i];
            sideY=y - directY[i];
            if (GameMap.reachable(sideX,sideY) && gameMap.getColor(sideX,sideY) == Color.NULL) {
              threeDefence.add(point);
            }
          }
        }
      }
      if (score.getColorCount(otherColor)[x][y][i] == 0 && score.getColorCount(color)[x][y][i] == 1) {
        twoAttack.add(point);
      }
      x+=directX[i];
      y+=directY[i];
      if (!GameMap.reachable(x,y)) {
        break;
      }
    }
  }
}","private void addAnalyze(Point point){
  for (int i=0; i < 4; i++) {
    int x=point.getX();
    int y=point.getY();
    Color otherColor=color.getOtherColor();
    for (int k=0; k < 5; k++) {
      if (score.getColorCount(otherColor)[x][y][i] == 0 && score.getColorCount(color)[x][y][i] == 4) {
        fiveAttack.add(point);
      }
      if (score.getColorCount(otherColor)[x][y][i] == 0 && score.getColorCount(color)[x][y][i] == 3) {
        fourAttack.add(point);
      }
      if (score.getColorCount(otherColor)[x][y][i] == 4 && score.getColorCount(color)[x][y][i] == 0) {
        fourDefence.add(point);
      }
      if (score.getColorCount(otherColor)[x][y][i] == 0 && score.getColorCount(color)[x][y][i] == 2) {
        if (k != 0 && k != 4) {
          int headX=x - directX[i] * 4;
          int headY=y - directY[i] * 4;
          if (GameMap.reachable(headX,headY)) {
            Color headColor=gameMap.getColor(headX,headY);
            Color tailColor=gameMap.getColor(x,y);
            if (headColor == Color.NULL && tailColor != Color.NULL) {
              int sideX=x + directX[i];
              int sideY=y + directY[i];
              if (GameMap.reachable(sideX,sideY)) {
                Color sideColor=gameMap.getColor(sideX,sideY);
                if (sideColor == Color.NULL) {
                  threeOpenAttack.add(point);
                }
              }
            }
            if (headColor != Color.NULL && tailColor == Color.NULL) {
              int sideX=headX - directX[i];
              int sideY=headY - directY[i];
              if (GameMap.reachable(sideX,sideY)) {
                Color sideColor=gameMap.getColor(sideX,sideY);
                if (sideColor == Color.NULL) {
                  threeOpenAttack.add(point);
                }
              }
            }
          }
        }
      }
      if (score.getColorCount(otherColor)[x][y][i] == 3 && score.getColorCount(color)[x][y][i] == 0) {
        int headX=x - directX[i] * 4;
        int headY=y - directY[i] * 4;
        if (GameMap.reachable(headX,headY)) {
          Color headColor=gameMap.getColor(headX,headY);
          Color tailColor=gameMap.getColor(x,y);
          if (headColor != Color.NULL && tailColor == Color.NULL) {
            if (gameMap.getColor(x - directX[i],y - directY[i]) != Color.NULL) {
              int sideX=headX - directX[i];
              int sideY=headY - directY[i];
              if (GameMap.reachable(sideX,sideY)) {
                Color sideColor=gameMap.getColor(sideX,sideY);
                if (sideColor == Color.NULL) {
                  threeDefence.add(point);
                }
              }
            }
          }
          if (tailColor != Color.NULL && headColor == Color.NULL) {
            if (gameMap.getColor(headX + directX[i],headY + directY[i]) != Color.NULL) {
              int sideX=x + directX[i];
              int sideY=y + directY[i];
              if (GameMap.reachable(sideX,sideY)) {
                Color sideColor=gameMap.getColor(sideX,sideY);
                if (sideColor == Color.NULL) {
                  threeDefence.add(point);
                }
              }
            }
          }
          if (headColor == Color.NULL && tailColor == Color.NULL) {
            int sideX=x + directX[i];
            int sideY=y + directY[i];
            if (GameMap.reachable(sideX,sideY) && gameMap.getColor(sideX,sideY) == Color.NULL) {
              threeDefence.add(point);
            }
            sideX=headX - directX[i];
            sideY=headY - directY[i];
            if (GameMap.reachable(sideX,sideY) && gameMap.getColor(sideX,sideY) == Color.NULL) {
              threeDefence.add(point);
            }
          }
        }
      }
      if (score.getColorCount(otherColor)[x][y][i] == 0 && score.getColorCount(color)[x][y][i] == 1) {
        twoAttack.add(point);
      }
      x+=directX[i];
      y+=directY[i];
      if (!GameMap.reachable(x,y)) {
        break;
      }
    }
  }
}"
40124,"public static void main(String[] args){
  GameMap gameMap=new GameMap(MapDriver.readMap(""String_Node_Str""));
  ConsolePrinter.printMap(gameMap);
  Score score=new Score();
  score.init(gameMap,Color.WHITE);
  Analyzer analyzer=new Analyzer(gameMap,Color.WHITE,gameMap.getNeighbor(),score,new Counter());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getFiveAttack());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getFourAttack());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getFourDefence());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getThreeOpenAttack());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getThreeDefence());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getTwoAttack());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getNotKey());
}","public static void main(String[] args){
  GameMap gameMap=new GameMap(MapDriver.readMap());
  ConsolePrinter.printMap(gameMap);
  Score score=new Score();
  score.init(gameMap,Color.BLACK);
  Analyzer analyzer=new Analyzer(gameMap,Color.WHITE,gameMap.getNeighbor(),score,new Counter());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getFiveAttack());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getFourAttack());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getFourDefence());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getThreeOpenAttack());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getThreeDefence());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getTwoAttack());
  System.out.println(""String_Node_Str"");
  System.out.println(analyzer.getNotKey());
}"
40125,"public static void main(String[] args) throws TimeOutException {
  Color[][] colors=MapDriver.readMap();
  GameMap gameMap=new GameMap(colors);
  ConsolePrinter.printMap(gameMap);
  Score score=new Score();
  Color color=Color.WHITE;
  score.init(gameMap,color);
  long time=System.currentTimeMillis();
  Config config=new Config();
  config.comboDeep=15;
  ComboProcessor comboProcessor=new ComboProcessor();
  comboProcessor.init(gameMap,score,new Counter(),new Cache(config,gameMap,new Counter()));
  System.out.println(comboProcessor.canKill(color,15,System.currentTimeMillis(),config.comboTimeOut).point);
  System.out.println(System.currentTimeMillis() - time + ""String_Node_Str"");
}","public static void main(String[] args) throws TimeOutException {
  Color[][] colors=MapDriver.readMap();
  GameMap gameMap=new GameMap(colors);
  ConsolePrinter.printMap(gameMap);
  Score score=new Score();
  Color color=Color.BLACK;
  score.init(gameMap,color);
  long time=System.currentTimeMillis();
  Config config=new Config();
  config.comboDeep=15;
  ComboProcessor comboProcessor=new ComboProcessor();
  comboProcessor.init(gameMap,score,new Counter(),new Cache(config,gameMap,new Counter()));
  System.out.println(comboProcessor.canKill(color,15,System.currentTimeMillis(),config.comboTimeOut).point);
  System.out.println(System.currentTimeMillis() - time + ""String_Node_Str"");
}"
40126,"public Result search(Color color,boolean randomBegin){
  timeOut=false;
  config.searchTimeOut-=1000;
  Result result=new Result();
  Cache cache=new Cache(config,gameMap,counter);
  aiColor=color;
  if (WinChecker.win(gameMap.getMap()) != null) {
    return null;
  }
  consolePrinter.init(counter);
  score.init(gameMap,aiColor);
  comboProcessor.init(gameMap,score,counter,cache);
  if (randomBegin) {
    Point point=BeginningProcessor.getBeginningRandomPoint(gameMap.getMap());
    if (point != null) {
      result.add(point,0);
      return result;
    }
  }
  Analyzer data=new Analyzer(gameMap,color,gameMap.getNeighbor(),score,counter);
  List<Point> points=LevelProcessor.getExpandPoints(data);
  if (points.size() == 1) {
    result.add(points.get(0),0);
    return result;
  }
  Set<Point> losePoints=new HashSet<>();
  int comboLevel=config.comboDeep;
  startTime=System.currentTimeMillis() - 1000;
  boolean otherWin=false;
  for (int i=1; i <= comboLevel; i+=4) {
    ComboResult comboResult=comboProcessor.canKill(color,i,startTime,config.comboTimeOut);
    Point winTry=comboResult.point;
    if (winTry != null) {
      result.add(winTry,Integer.MAX_VALUE);
      return result;
    }
    for (    Point point : points) {
      if (losePoints.contains(point)) {
        continue;
      }
      setColor(point,color,Color.NULL,color);
      comboResult=comboProcessor.canKill(color.getOtherColor(),i,startTime,config.comboTimeOut);
      winTry=comboResult.point;
      if (winTry != null) {
        losePoints.add(point);
      }
      setColor(point,Color.NULL,color,color);
    }
    if (losePoints.size() == points.size()) {
      otherWin=true;
    }
    if (comboResult.timeOut) {
      System.out.println(""String_Node_Str"");
      break;
    }
    if (Config.debug) {
      System.out.printf(""String_Node_Str"",i);
      if (losePoints.size() == points.size()) {
        System.out.print(""String_Node_Str"");
      }
      System.out.println();
    }
  }
  if (otherWin) {
    losePoints.clear();
  }
  startTime=System.currentTimeMillis() - 1000;
  counter.allStep=points.size();
  for (int level=4; level <= config.searchDeep; level+=2) {
    int extreme=Integer.MIN_VALUE;
    Result currentResult=new Result();
    if (result.point != null) {
      points.remove(result.getPoint());
      points.add(0,result.getPoint());
    }
    for (    Point point : points) {
      setColor(point,color,Color.NULL,aiColor);
      int value;
      if (!losePoints.contains(point)) {
        value=dfsScore(level - 1,color.getOtherColor(),null,extreme);
      }
 else {
        value=Integer.MIN_VALUE;
      }
      if (timeOut) {
        System.out.println(""String_Node_Str"");
        setColor(point,Color.NULL,color,aiColor);
        break;
      }
      counter.finishStep++;
      consolePrinter.printInfo(point,value);
      if (value >= extreme) {
        extreme=value;
        currentResult.add(point,value);
        if (extreme == Integer.MAX_VALUE) {
          currentResult.add(point,value);
          setColor(point,Color.NULL,color,aiColor);
          break;
        }
      }
      setColor(point,Color.NULL,color,aiColor);
    }
    if (Config.debug) {
      if (!timeOut) {
        System.out.printf(""String_Node_Str"",level);
        System.out.println(currentResult.getPoint());
        System.out.println();
      }
    }
    if (!timeOut) {
      result=currentResult;
    }
    if (System.currentTimeMillis() - startTime > config.searchTimeOut / 2) {
      break;
    }
  }
  return result;
}","public Result search(Color color,boolean randomBegin){
  timeOut=false;
  config.searchTimeOut-=1000;
  Result result=new Result();
  Cache cache=new Cache(config,gameMap,counter);
  aiColor=color;
  if (WinChecker.win(gameMap.getMap()) != null) {
    return null;
  }
  consolePrinter.init(counter);
  score.init(gameMap,aiColor);
  comboProcessor.init(gameMap,score,counter,cache);
  if (randomBegin) {
    Point point=BeginningProcessor.getBeginningRandomPoint(gameMap.getMap());
    if (point != null) {
      result.add(point,0);
      return result;
    }
  }
  Analyzer data=new Analyzer(gameMap,color,gameMap.getNeighbor(),score,counter);
  List<Point> points=LevelProcessor.getExpandPoints(data);
  if (points.size() == 1) {
    result.add(points.get(0),0);
    return result;
  }
  Set<Point> losePoints=new HashSet<>();
  int comboLevel=config.comboDeep;
  startTime=System.currentTimeMillis() - 1000;
  boolean otherWin=false;
  for (int i=1; i <= comboLevel; i+=4) {
    ComboResult comboResult=comboProcessor.canKill(color,i,startTime,config.comboTimeOut);
    Point winTry=comboResult.point;
    if (winTry != null) {
      result.add(winTry,Integer.MAX_VALUE);
      return result;
    }
    for (    Point point : points) {
      if (losePoints.contains(point)) {
        continue;
      }
      setColor(point,color,Color.NULL,color);
      comboResult=comboProcessor.canKill(color.getOtherColor(),i,startTime,config.comboTimeOut);
      winTry=comboResult.point;
      if (winTry != null) {
        losePoints.add(point);
      }
      setColor(point,Color.NULL,color,color);
    }
    if (losePoints.size() == points.size()) {
      otherWin=true;
    }
    if (comboResult.timeOut) {
      System.out.println(""String_Node_Str"");
      break;
    }
    if (Config.debug) {
      System.out.printf(""String_Node_Str"",i);
      if (losePoints.size() == points.size()) {
        System.out.print(""String_Node_Str"");
      }
      System.out.println();
    }
  }
  if (otherWin) {
    losePoints.clear();
  }
  startTime=System.currentTimeMillis() - 1000;
  counter.allStep=points.size();
  for (int level=4; level <= config.searchDeep; level+=2) {
    int extreme=Integer.MIN_VALUE;
    Result currentResult=new Result();
    if (result.point != null) {
      points.remove(result.getPoint());
      points.add(0,result.getPoint());
    }
    for (    Point point : points) {
      setColor(point,color,Color.NULL,aiColor);
      int value;
      if (!losePoints.contains(point)) {
        value=dfsScore(level - 1,color.getOtherColor(),null,extreme);
      }
 else {
        value=Integer.MIN_VALUE;
      }
      if (timeOut) {
        System.out.println(""String_Node_Str"");
        setColor(point,Color.NULL,color,aiColor);
        break;
      }
      counter.finishStep++;
      consolePrinter.printInfo(point,value);
      if (value >= extreme) {
        extreme=value;
        currentResult.add(point,value);
        if (extreme == Integer.MAX_VALUE) {
          currentResult.add(point,value);
          setColor(point,Color.NULL,color,aiColor);
          break;
        }
      }
      setColor(point,Color.NULL,color,aiColor);
    }
    if (Config.debug) {
      if (!timeOut) {
        System.out.printf(""String_Node_Str"",level);
        System.out.println(currentResult.getPoint());
        System.out.println();
      }
    }
    if (!timeOut) {
      result=currentResult;
    }
    if (System.currentTimeMillis() - startTime > config.searchTimeOut / 3) {
      break;
    }
  }
  return result;
}"
40127,"private int getValueByCount(int blackCount,int whiteCount,Color color){
  int ONE=2;
  int TWO=10;
  int THREE=20;
  int FOUR=50;
  float weight=1.0f;
  int valueWhite=0;
  if (blackCount == 0) {
    if (whiteCount == 1)     valueWhite+=ONE;
    if (whiteCount == 2)     valueWhite+=TWO;
    if (whiteCount == 3)     valueWhite+=THREE;
    if (whiteCount == 4)     valueWhite+=FOUR;
  }
  int valueBlack=0;
  if (whiteCount == 0) {
    if (blackCount == 1)     valueBlack+=ONE;
    if (blackCount == 2)     valueBlack+=TWO;
    if (blackCount == 3)     valueBlack+=THREE;
    if (blackCount == 4)     valueBlack+=FOUR;
  }
  int value=0;
  if (color == Color.BLACK) {
    return valueBlack - (int)(valueWhite * weight);
  }
  if (color == Color.WHITE) {
    return valueWhite - (int)(valueBlack * weight);
  }
  return value;
}","private int getValueByCount(int blackCount,int whiteCount,Color color){
  int ONE=2;
  int TWO=10;
  int THREE=20;
  int FOUR=40;
  float weight=1.0f;
  int valueWhite=0;
  if (blackCount == 0) {
    if (whiteCount == 1)     valueWhite+=ONE;
    if (whiteCount == 2)     valueWhite+=TWO;
    if (whiteCount == 3)     valueWhite+=THREE;
    if (whiteCount == 4)     valueWhite+=FOUR;
  }
  int valueBlack=0;
  if (whiteCount == 0) {
    if (blackCount == 1)     valueBlack+=ONE;
    if (blackCount == 2)     valueBlack+=TWO;
    if (blackCount == 3)     valueBlack+=THREE;
    if (blackCount == 4)     valueBlack+=FOUR;
  }
  int value=0;
  if (color == Color.BLACK) {
    return valueBlack - (int)(valueWhite * weight);
  }
  if (color == Color.WHITE) {
    return valueWhite - (int)(valueBlack * weight);
  }
  return value;
}"
40128,"/** 
 * Main method to be called to start the program.
 * @param args unused
 */
public static void main(String[] args) throws Exception {
  Coordinate startCoord=new Coordinate(7568,1507);
  Coordinate endCoord=new Coordinate(7568,1727);
  String mapPath=""String_Node_Str"";
  MarsRover rover=new MarsRover(6,startCoord,endCoord,mapPath,3);
  Algorithm algorithm=new AlgorithmLimitedIDAStar(rover,""String_Node_Str"");
  try {
    algorithm.findPath();
  }
 catch (  Exception expectedException) {
  }
  TerminalInterface ti=new TerminalInterface();
  ti.promptUser();
}","/** 
 * Main method to be called to start the program.
 * @param args unused
 */
public static void main(String[] args) throws Exception {
  Coordinate startCoord=new Coordinate(7568,1507);
  Coordinate endCoord=new Coordinate(7568,1727);
  String mapPath=""String_Node_Str"";
  MarsRover rover=new MarsRover(6,startCoord,endCoord,mapPath,50);
  Algorithm algorithm=new AlgorithmUnlimitedBestFirst(rover,""String_Node_Str"");
  try {
    algorithm.findPath();
  }
 catch (  Exception expectedException) {
  }
  OutputFactory.getOutput(algorithm);
  TerminalInterface ti=new TerminalInterface();
  ti.promptUser();
}"
40129,"/** 
 * Heuristic function for BestFirst implementing diagonal distance between two nodes
 * @param current current node
 * @param goal goal node
 * @return diagonal distance
 */
private double estimateHeuristic(Coordinate current,Coordinate goal){
  double currentXPos=current.getX();
  double currentYPos=current.getY();
  double goalXPos=goal.getX();
  double goalYPos=goal.getY();
  return Math.max(Math.abs(currentXPos - goalXPos),Math.abs(currentYPos - goalYPos));
}","/** 
 * Heuristic function for BestFirst implementing diagonal distance between two nodes
 * @param current current node
 * @param goal goal node
 * @return diagonal distance
 */
private double estimateHeuristic(Coordinate current,Coordinate goal){
  double currentXPos=current.getX();
  double currentYPos=current.getY();
  double goalXPos=goal.getX();
  double goalYPos=goal.getY();
  return (Math.abs(currentXPos - goalXPos) + Math.abs(currentYPos - goalYPos));
}"
40130,"private BestFirstCoordinate getLowestFScore(ArrayList<BestFirstCoordinate> list){
  BestFirstCoordinate lowest=list.get(0);
  for (  BestFirstCoordinate n : list) {
    if (estimateHeuristic(n,goal) < estimateHeuristic(lowest,goal)) {
      lowest=n;
    }
  }
  return lowest;
}","private BestFirstCoordinate getLowestFScore(ArrayList<BestFirstCoordinate> list){
  BestFirstCoordinate lowest=list.get(0);
  for (  BestFirstCoordinate n : list) {
    if (estimateHeuristic(n,interimGoal) < estimateHeuristic(lowest,interimGoal)) {
      lowest=n;
    }
  }
  return lowest;
}"
40131,"public AlgorithmLimitedBestFirst(MarsRover r,String output){
  rover=r;
  map=rover.getMap();
  goal=r.getEndPosition();
  fieldOfView=r.getFieldOfView();
}","public AlgorithmLimitedBestFirst(MarsRover r,String output){
  rover=r;
  map=rover.getMap();
  goal=r.getEndPosition();
  fieldOfView=r.getFieldOfView();
  outputClass=output;
}"
40132,"public AlgorithmLimitedDijkstra(MarsRover r,String output){
  rover=r;
  map=r.getMap();
  goal=new DijkstraNode(r.getEndPosition());
  fieldOfView=r.getFieldOfView();
}","public AlgorithmLimitedDijkstra(MarsRover r,String output){
  rover=r;
  map=r.getMap();
  goal=new DijkstraNode(r.getEndPosition());
  fieldOfView=r.getFieldOfView();
  outputClass=output;
}"
40133,"/** 
 * Find a path from start to goal with IDA*. Then output it. Throw an exception if a path cannot be found.
 * @param thisNode The coordinate being considered by the algorithm.
 */
public ArrayList<AStarCoordinate> IDAStar(AStarCoordinate thisNode,Coordinate currentGoal) throws Exception {
  ArrayList<AStarCoordinate> currentPath=constructPath(thisNode);
  if (coordIsInSet(thisNode,currentPath.subList(0,currentPath.size() - 1))) {
    throw new Exception(""String_Node_Str"");
  }
  if (thisNode == null) {
    if (getDistanceToPoint(bestNode,interimGoal) < (fieldOfView - 1)) {
      return constructPath(bestNode);
    }
    throw new Exception(""String_Node_Str"");
  }
 else {
    if (thisNode.equals(interimGoal)) {
      return constructPath(thisNode);
    }
 else {
      ArrayList<AStarCoordinate> neighbors=getReachableNeighbors(thisNode);
      sortCoordinatesByCost(neighbors);
      if (neighbors.get(0).getDistanceToGoal() < bestNode.getDistanceToGoal()) {
        bestNode=neighbors.get(0);
      }
      for (      AStarCoordinate n : neighbors) {
        try {
          return IDAStar(n,currentGoal);
        }
 catch (        Exception e) {
        }
      }
    }
  }
  throw new Exception(""String_Node_Str"");
}","/** 
 * Find a path from start to goal with IDA*. Then output it. Throw an exception if a path cannot be found.
 * @param thisNode The coordinate being considered by the algorithm.
 */
public ArrayList<AStarCoordinate> IDAStar(AStarCoordinate thisNode,Coordinate currentGoal) throws Exception {
  ArrayList<AStarCoordinate> currentPath=constructPath(thisNode);
  if (thisNode == null) {
    if (getDistanceToPoint(bestNode,interimGoal) < (fieldOfView - 1)) {
      return constructPath(bestNode);
    }
    throw new Exception(""String_Node_Str"");
  }
 else {
    if (thisNode.equals(interimGoal)) {
      return constructPath(thisNode);
    }
 else {
      ArrayList<AStarCoordinate> neighbors=getReachableNeighbors(thisNode);
      sortCoordinatesByCost(neighbors);
      if (neighbors.get(0).getDistanceToGoal() < bestNode.getDistanceToGoal()) {
        bestNode=neighbors.get(0);
      }
      for (      AStarCoordinate n : neighbors) {
        try {
          return IDAStar(n,currentGoal);
        }
 catch (        Exception e) {
        }
      }
    }
  }
  throw new Exception(""String_Node_Str"");
}"
40134,"public void writeToOutput() throws IOException {
  for (int i=1; i <= resultList.size(); i++) {
    int x=resultList.get(i - 1).getX();
    int y=resultList.get(i - 1).getY();
    writer.append(Integer.toString(x) + ',' + Integer.toString(y)+ '\n');
  }
  writer.close();
}","public void writeToOutput() throws IOException {
  try {
    for (int i=1; i <= resultList.size(); i++) {
      int x=resultList.get(i - 1).getX();
      int y=resultList.get(i - 1).getY();
      writer.append(Integer.toString(x) + ',' + Integer.toString(y)+ '\n');
    }
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
  }
  writer.close();
}"
40135,"public void AStarSearch(ArrayList<AStarCoordinate> coords) throws Exception {
  AStarCoordinate thisCoord=coords.get(0);
  double goalAngle;
  Coordinate interimGoal;
  ArrayList<AStarCoordinate> tempPath=new ArrayList<AStarCoordinate>();
  while (!thisCoord.equals(goal)) {
    goalAngle=getAngleToGoal(thisCoord,goal);
    if (getDistanceToPoint(thisCoord,goal) > fieldOfView) {
      interimGoal=new Coordinate((int)(thisCoord.getX() + (fieldOfView * Math.cos(goalAngle))),(int)(thisCoord.getY() + (fieldOfView * Math.sin(goalAngle))));
    }
 else {
      interimGoal=goal;
    }
    tempPath.clear();
    tempPath.add(thisCoord);
    try {
      tempPath=AStar(tempPath,interimGoal);
    }
 catch (    Exception e) {
      throw e;
    }
    coords.addAll(tempPath);
    thisCoord=coords.get(coords.size() - 1);
  }
  output=new TerminalOutput(path);
}","public void AStarSearch(ArrayList<AStarCoordinate> coords) throws Exception {
  AStarCoordinate thisCoord=coords.get(0);
  double goalAngle;
  ArrayList<AStarCoordinate> tempPath=new ArrayList<AStarCoordinate>();
  while (!thisCoord.equals(goal)) {
    goalAngle=getAngleToGoal(thisCoord,goal);
    if (getDistanceToPoint(thisCoord,goal) > fieldOfView) {
      interimGoal=new Coordinate((int)(thisCoord.getX() + ((fieldOfView - 1) * Math.cos(Math.toRadians(goalAngle)))),(int)(thisCoord.getY() + ((fieldOfView - 1) * Math.sin(Math.toRadians(goalAngle)))));
    }
 else {
      interimGoal=goal;
    }
    tempPath.clear();
    tempPath.add(new AStarCoordinate(thisCoord.getX(),thisCoord.getY()));
    try {
      tempPath=AStar(tempPath,interimGoal);
    }
 catch (    Exception e) {
      throw e;
    }
    coords.addAll(tempPath);
    thisCoord=coords.get(coords.size() - 1);
  }
  output=new TerminalOutput(path);
}"
40136,"/** 
 * Find a path from start to goal with A*. Then output it. Throw an exception if a path cannot be found.
 * @param unvisitedCoords The list of coordinates being considered by the algorithm.
 */
public ArrayList<AStarCoordinate> AStar(ArrayList<AStarCoordinate> unvisitedCoords,Coordinate currentGoal) throws Exception {
  if (unvisitedCoords.isEmpty()) {
    throw new Exception(""String_Node_Str"");
  }
 else {
    AStarCoordinate thisCoord=unvisitedCoords.get(0);
    visitedCoords.add(thisCoord);
    if (thisCoord.equals(goal)) {
      return constructPath(thisCoord);
    }
 else {
      ArrayList<AStarCoordinate> unvisitedNeighbors=getReachableUnvisitedNeighbors(thisCoord);
      for (      AStarCoordinate n : unvisitedNeighbors) {
        if (!coordIsInSet(n,unvisitedCoords))         unvisitedCoords.add(n);
      }
      sortCoordinatesByCost(unvisitedCoords);
      unvisitedCoords.remove(thisCoord);
      return AStar(unvisitedCoords,currentGoal);
    }
  }
}","/** 
 * Find a path from start to goal with A*. Then output it. Throw an exception if a path cannot be found.
 * @param unvisitedCoords The list of coordinates being considered by the algorithm.
 */
public ArrayList<AStarCoordinate> AStar(ArrayList<AStarCoordinate> unvisitedCoords,Coordinate currentGoal) throws Exception {
  if (unvisitedCoords.isEmpty()) {
    throw new Exception(""String_Node_Str"");
  }
 else {
    AStarCoordinate thisCoord=unvisitedCoords.get(0);
    visitedCoords.add(thisCoord);
    if (thisCoord.equals(currentGoal)) {
      return constructPath(thisCoord);
    }
 else {
      ArrayList<AStarCoordinate> unvisitedNeighbors=getReachableUnvisitedNeighbors(thisCoord);
      for (      AStarCoordinate n : unvisitedNeighbors) {
        if (!coordIsInSet(n,unvisitedCoords))         unvisitedCoords.add(n);
      }
      sortCoordinatesByCost(unvisitedCoords);
      unvisitedCoords.remove(thisCoord);
      return AStar(unvisitedCoords,currentGoal);
    }
  }
}"
40137,"/** 
 * Given a set of coordinates, sort them according to their overall cost, which is the euclidean distance to the rover's goal coordinate plus the distance traveled from the start to a coordinate.
 */
public void sortCoordinatesByCost(ArrayList<AStarCoordinate> coords){
  for (  AStarCoordinate c : coords) {
    c.setDistanceToGoal(getDistanceToPoint(c,goal));
  }
  Collections.sort(coords);
}","/** 
 * Given a set of coordinates, sort them according to their overall cost, which is the euclidean distance to the rover's goal coordinate plus the distance traveled from the start to a coordinate.
 */
public void sortCoordinatesByCost(ArrayList<AStarCoordinate> coords){
  for (  AStarCoordinate c : coords) {
    c.setDistanceToGoal(getDistanceToPoint(c,interimGoal));
  }
  Collections.sort(coords);
}"
40138,"public void GreedySearch(ArrayList<GreedyCoordinate> coords) throws Exception {
  ArrayList<GreedyCoordinate> fullcoords=new ArrayList<GreedyCoordinate>();
  fullcoords.add(new GreedyCoordinate(rover.getXPosition(),rover.getYPosition()));
  ArrayList<GreedyCoordinate> preferences=new ArrayList<GreedyCoordinate>();
  boolean working=true;
  boolean stepped;
  GreedyCoordinate currentNode=new GreedyCoordinate(coords.get(0));
  GreedyCoordinate checkNode;
  double goalDirection;
  while (working) {
    currentNode.setVisited(true);
    ArrayList<GreedyCoordinate> neighbors=currentNode.getNeighbors();
    goalDirection=getAngleToGoal(currentNode,rover.getEndPosition());
    ArrayList<GreedyCoordinateWrapper> directionList=new ArrayList<GreedyCoordinateWrapper>();
    for (    GreedyCoordinate item : neighbors) {
      if (checkArray(item,fullcoords) > -1) {
        item.setVisited(true);
      }
      if (item.getDirection() == 0 && goalDirection > 180) {
        directionList.add(new GreedyCoordinateWrapper(item,getAngleDiff((int)goalDirection,360)));
      }
 else {
        directionList.add(new GreedyCoordinateWrapper(item,getAngleDiff((int)goalDirection,item.getDirection())));
      }
    }
    Collections.sort(directionList,new Comparator<GreedyCoordinateWrapper>(){
      public int compare(      GreedyCoordinateWrapper l,      GreedyCoordinateWrapper r){
        return l.getDiff() > r.getDiff() ? 1 : (l.getDiff() < r.getDiff()) ? -1 : 0;
      }
    }
);
    for (    GreedyCoordinateWrapper item : directionList) {
      preferences.add(item.getCoordinate());
    }
    directionList.clear();
    stepped=true;
    while (stepped) {
      if (preferences.size() > 0) {
        checkNode=preferences.get(0);
        if (checkNode != null && processSlope(currentNode,checkNode,getAngleToGoal(currentNode,checkNode)) && !checkNode.isVisited()) {
          currentNode=checkNode;
          coords.add(currentNode);
          fullcoords.add(currentNode);
          stepped=false;
        }
 else {
          preferences.remove(0);
        }
      }
 else {
        if (coords.size() > 1) {
          coords.remove(checkArray(currentNode,coords));
          currentNode=coords.get(coords.size() - 1);
          currentNode.setVisited(true);
          if (mode.equals(""String_Node_Str""))           fullcoords.add(currentNode);
          stepped=false;
        }
 else {
          throw new Exception(""String_Node_Str"");
        }
      }
    }
    preferences.clear();
    if (currentNode.equals(goal)) {
      if (mode.equals(""String_Node_Str"")) {
        output=new TerminalOutput(fullcoords);
        coords=fullcoords;
      }
 else {
        output=new TerminalOutput(coords);
      }
      working=false;
    }
  }
}","public void GreedySearch(ArrayList<GreedyCoordinate> coords) throws Exception {
  ArrayList<GreedyCoordinate> fullcoords=new ArrayList<GreedyCoordinate>();
  fullcoords.add(new GreedyCoordinate(rover.getXPosition(),rover.getYPosition()));
  ArrayList<GreedyCoordinate> preferences=new ArrayList<GreedyCoordinate>();
  boolean working=true;
  boolean stepped;
  GreedyCoordinate currentNode=new GreedyCoordinate(coords.get(0));
  GreedyCoordinate checkNode;
  double goalDirection;
  while (working) {
    currentNode.setVisited(true);
    ArrayList<GreedyCoordinate> neighbors=currentNode.getNeighbors();
    goalDirection=getAngleToGoal(currentNode,rover.getEndPosition());
    ArrayList<GreedyCoordinateWrapper> directionList=new ArrayList<GreedyCoordinateWrapper>();
    for (    GreedyCoordinate item : neighbors) {
      if (checkArray(item,fullcoords) > -1) {
        item.setVisited(true);
      }
      if (item.getDirection() == 0 && goalDirection > 180) {
        directionList.add(new GreedyCoordinateWrapper(item,getAngleDiff((int)goalDirection,360)));
      }
 else {
        directionList.add(new GreedyCoordinateWrapper(item,getAngleDiff((int)goalDirection,item.getDirection())));
      }
    }
    Collections.sort(directionList,new Comparator<GreedyCoordinateWrapper>(){
      public int compare(      GreedyCoordinateWrapper l,      GreedyCoordinateWrapper r){
        return l.getDiff() > r.getDiff() ? 1 : (l.getDiff() < r.getDiff()) ? -1 : 0;
      }
    }
);
    for (    GreedyCoordinateWrapper item : directionList) {
      preferences.add(item.getCoordinate());
    }
    directionList.clear();
    stepped=true;
    while (stepped) {
      if (preferences.size() > 0) {
        checkNode=preferences.get(0);
        if (checkNode != null && rover.canTraverse(currentNode,checkNode) && !checkNode.isVisited()) {
          currentNode=checkNode;
          coords.add(currentNode);
          fullcoords.add(currentNode);
          stepped=false;
        }
 else {
          preferences.remove(0);
        }
      }
 else {
        if (coords.size() > 1) {
          coords.remove(checkArray(currentNode,coords));
          currentNode=coords.get(coords.size() - 1);
          currentNode.setVisited(true);
          if (mode.equals(""String_Node_Str""))           fullcoords.add(currentNode);
          stepped=false;
        }
 else {
          throw new Exception(""String_Node_Str"");
        }
      }
    }
    preferences.clear();
    if (currentNode.equals(goal)) {
      if (mode.equals(""String_Node_Str"")) {
        output=new TerminalOutput(fullcoords);
        output=new MapImageOutput(fullcoords,map.getMapPath());
        coords=fullcoords;
      }
 else {
        output=new TerminalOutput(coords);
        output=new MapImageOutput(coords,map.getMapPath());
      }
      working=false;
    }
  }
}"
40139,"public void AStarSearch(ArrayList<AStarCoordinate> coords) throws Exception {
  AStarCoordinate thisCoord=coords.get(0);
  double goalAngle;
  ArrayList<AStarCoordinate> tempPath=new ArrayList<AStarCoordinate>();
  while (!thisCoord.equals(goal)) {
    goalAngle=getAngleToGoal(thisCoord,goal);
    if (getDistanceToPoint(thisCoord,goal) > fieldOfView) {
      interimGoal=new Coordinate((int)(thisCoord.getX() + ((fieldOfView - 1) * Math.cos(Math.toRadians(goalAngle)))),(int)(thisCoord.getY() + ((fieldOfView - 1) * Math.sin(Math.toRadians(goalAngle)))));
    }
 else {
      interimGoal=goal;
    }
    tempPath.clear();
    tempPath.add(new AStarCoordinate(thisCoord.getX(),thisCoord.getY()));
    try {
      tempPath=AStar(tempPath,interimGoal);
    }
 catch (    Exception e) {
      throw e;
    }
    coords.addAll(tempPath);
    thisCoord=coords.get(coords.size() - 1);
  }
  output=new TerminalOutput(path);
}","public void AStarSearch(ArrayList<AStarCoordinate> coords) throws Exception {
  AStarCoordinate thisCoord=coords.get(0);
  AStarCoordinate backCoord;
  int backtrackDistance=0;
  double goalAngle;
  ArrayList<AStarCoordinate> tempPath=new ArrayList<AStarCoordinate>();
  while (!thisCoord.equals(goal)) {
    goalAngle=getAngleToGoal(thisCoord,goal);
    if (getDistanceToPoint(thisCoord,goal) > fieldOfView) {
      interimGoal=new Coordinate((int)(thisCoord.getX() + ((fieldOfView) * Math.cos(Math.toRadians(goalAngle)))),(int)(thisCoord.getY() + ((fieldOfView) * Math.sin(Math.toRadians(goalAngle)))));
    }
 else {
      interimGoal=goal;
    }
    tempPath.clear();
    visitedCoords.clear();
    tempPath.add(new AStarCoordinate(thisCoord.getX(),thisCoord.getY()));
    tempPath.get(0).setCostSoFar(0);
    try {
      tempPath=AStar(tempPath,interimGoal);
      if (tempPath.get(tempPath.size() - 1).equals(goal)) {
        coords.addAll(tempPath.subList(1,tempPath.size()));
      }
 else {
        coords.addAll(tempPath.subList(1,tempPath.size()));
      }
      backtrackDistance=0;
    }
 catch (    Exception e) {
      if (coords.get(0).equals(thisCoord)) {
        throw e;
      }
 else {
        System.out.printf(""String_Node_Str"");
        backtrackDistance++;
        backCoord=coords.get(coords.size() - 1 - backtrackDistance);
        coords.add(backCoord);
        backtrackDistance++;
      }
    }
    thisCoord=coords.get(coords.size() - 1);
    System.out.println((thisCoord.getX()) + ""String_Node_Str"" + (thisCoord.getY()));
  }
  output=new TerminalOutput(path);
  output=new MapImageOutput(path,map.getMapPath());
}"
40140,"/** 
 * Find a path from start to goal with A*. Then output it. Throw an exception if a path cannot be found.
 * @param unvisitedCoords The list of coordinates being considered by the algorithm.
 */
public ArrayList<AStarCoordinate> AStar(ArrayList<AStarCoordinate> unvisitedCoords,Coordinate currentGoal) throws Exception {
  if (unvisitedCoords.isEmpty()) {
    throw new Exception(""String_Node_Str"");
  }
 else {
    AStarCoordinate thisCoord=unvisitedCoords.get(0);
    visitedCoords.add(thisCoord);
    if (thisCoord.equals(currentGoal)) {
      return constructPath(thisCoord);
    }
 else {
      ArrayList<AStarCoordinate> unvisitedNeighbors=getReachableUnvisitedNeighbors(thisCoord);
      for (      AStarCoordinate n : unvisitedNeighbors) {
        if (!coordIsInSet(n,unvisitedCoords))         unvisitedCoords.add(n);
      }
      sortCoordinatesByCost(unvisitedCoords);
      unvisitedCoords.remove(thisCoord);
      return AStar(unvisitedCoords,currentGoal);
    }
  }
}","/** 
 * Find a path from start to goal with A*. Then output it. Throw an exception if a path cannot be found.
 * @param unvisitedCoords The list of coordinates being considered by the algorithm.
 */
public ArrayList<AStarCoordinate> AStar(ArrayList<AStarCoordinate> unvisitedCoords,Coordinate currentGoal) throws Exception {
  if (unvisitedCoords.isEmpty()) {
    AStarCoordinate targetCoord=new AStarCoordinate(0,0);
    for (    AStarCoordinate n : visitedCoords) {
      if (n.getDistanceToGoal() < targetCoord.getDistanceToGoal()) {
        targetCoord=n;
      }
    }
    if (targetCoord.getDistanceToGoal() < (fieldOfView - 1)) {
      return constructPath(targetCoord);
    }
 else {
      throw new Exception(""String_Node_Str"");
    }
  }
 else {
    AStarCoordinate thisCoord=unvisitedCoords.get(0);
    visitedCoords.add(thisCoord);
    if (thisCoord.equals(currentGoal)) {
      return constructPath(thisCoord);
    }
 else {
      ArrayList<AStarCoordinate> unvisitedNeighbors=getReachableUnvisitedNeighbors(thisCoord);
      for (      AStarCoordinate n : unvisitedNeighbors) {
        if (!coordIsInSet(n,unvisitedCoords))         unvisitedCoords.add(n);
      }
      sortCoordinatesByCost(unvisitedCoords);
      unvisitedCoords.remove(thisCoord);
      return AStar(unvisitedCoords,currentGoal);
    }
  }
}"
40141,"/** 
 * Implementation of A
 */
public void findPath(){
  Coordinate startPosition=rover.getStartPosition();
  Coordinate endPosition=rover.getEndPosition();
  List<Node> openList=new ArrayList<Node>();
  List<Node> closedList=new ArrayList<Node>();
  Node startNode=new Node(startPosition);
  Node goalNode=new Node(endPosition);
  startNode.setGScore(0);
  startNode.setFScore(estimateHeuristic(startNode,goalNode));
  startNode.setParent(null);
  openList.add(startNode);
  while (!openList.isEmpty()) {
    Node currentNode=getLowestFScore(openList);
    if (currentIsGoal(currentNode,goalNode)) {
      constructPath(currentNode);
      break;
    }
    openList.remove(currentNode);
    closedList.add(currentNode);
    List<Node> neighborList=getNeighbors(currentNode);
    for (    Node neighbor : neighborList) {
      double tentativeGScore=Double.POSITIVE_INFINITY;
      if (rover.canTraverse(currentNode.getPosition(),neighbor.getPosition())) {
        if (isNodeInList(neighbor,closedList)) {
          continue;
        }
        if (!isNodeInList(neighbor,openList)) {
          openList.add(neighbor);
        }
        tentativeGScore=currentNode.getGScore() + distBetween(currentNode,neighbor);
        if (tentativeGScore >= neighbor.getGScore()) {
          continue;
        }
      }
 else {
        closedList.add(currentNode);
      }
      neighbor.setParent(currentNode);
      neighbor.setGScore(tentativeGScore);
      neighbor.setFScore(neighbor.getGScore() + estimateHeuristic(neighbor,goalNode));
    }
  }
  Collections.reverse(fullPath);
  output=new TerminalOutput(fullPath);
}","/** 
 * Implementation of A
 */
public void findPath(){
  Coordinate startPosition=rover.getStartPosition();
  Coordinate endPosition=rover.getEndPosition();
  List<Node> openList=new ArrayList<Node>();
  List<Node> closedList=new ArrayList<Node>();
  Node startNode=new Node(startPosition);
  Node goalNode=new Node(endPosition);
  startNode.setGScore(0);
  startNode.setFScore(estimateHeuristic(startNode,goalNode));
  startNode.setParent(null);
  openList.add(startNode);
  while (!openList.isEmpty()) {
    Node currentNode=getLowestFScore(openList);
    if (currentIsGoal(currentNode,goalNode)) {
      constructPath(currentNode);
      break;
    }
    openList.remove(currentNode);
    closedList.add(currentNode);
    List<Node> neighborList=getNeighbors(currentNode);
    for (    Node neighbor : neighborList) {
      double tentativeGScore=Double.POSITIVE_INFINITY;
      if (rover.canTraverse(currentNode.getPosition(),neighbor.getPosition())) {
        if (isNodeInList(neighbor,closedList)) {
          continue;
        }
        if (!isNodeInList(neighbor,openList)) {
          openList.add(neighbor);
        }
        tentativeGScore=currentNode.getGScore() + distBetween(currentNode,neighbor);
        if (tentativeGScore >= neighbor.getGScore()) {
          continue;
        }
      }
 else {
        closedList.add(currentNode);
      }
      neighbor.setParent(currentNode);
      neighbor.setGScore(tentativeGScore);
      neighbor.setFScore(neighbor.getGScore() + estimateHeuristic(neighbor,goalNode));
    }
  }
  Collections.reverse(fullPath);
  output=new TerminalOutput(fullPath);
  output=new MapImageOutput(fullPath,map.getMapPath());
}"
40142,"public void findPath(){
  Vector<DijkstraNode> nodeVector=new Vector<DijkstraNode>();
  DijkstraNode startNode=new DijkstraNode(rover.getStartPosition());
  DijkstraNode goalNode=new DijkstraNode(rover.getEndPosition());
  int startX=startNode.getPosition().getX();
  int startY=startNode.getPosition().getY();
  int goalX=goalNode.getPosition().getX();
  int goalY=goalNode.getPosition().getY();
  int yRange=Math.abs(goalY - startY);
  int xRange=Math.abs(goalX - startX);
  int halfYRange=yRange / 2;
  int halfXRange=xRange / 2;
  int bufferStartY;
  int bufferStartX;
  int bufferGoalY;
  int bufferGoalX;
  if (startX < goalX) {
    bufferStartX=startX - halfXRange;
    bufferGoalX=goalX + halfXRange;
    if (startY < goalY) {
      bufferStartY=startY - halfYRange;
      bufferGoalY=goalY + halfYRange;
      for (int y=bufferStartY; y <= bufferGoalY; y++) {
        for (int x=bufferStartX; x <= bufferGoalX; x++) {
          Coordinate tmpCoordinate=new Coordinate(x,y);
          DijkstraNode tmpNode=new DijkstraNode(tmpCoordinate);
          tmpNode.setDistanceFromStart(Double.POSITIVE_INFINITY);
          tmpNode.setParent(null);
          nodeVector.add(tmpNode);
        }
      }
    }
 else {
      bufferStartY=startY + halfYRange;
      bufferGoalY=goalY - halfYRange;
      for (int y=bufferGoalY; y <= bufferStartY; y++) {
        for (int x=bufferStartX; x <= bufferGoalX; x++) {
          Coordinate tmpCoordinate=new Coordinate(x,y);
          DijkstraNode tmpNode=new DijkstraNode(tmpCoordinate);
          tmpNode.setDistanceFromStart(Double.POSITIVE_INFINITY);
          tmpNode.setParent(null);
          nodeVector.add(tmpNode);
        }
      }
    }
  }
 else {
    System.out.println(""String_Node_Str"");
    bufferStartX=startX + halfXRange;
    bufferGoalX=goalX - halfXRange;
    if (startY < goalY) {
      System.out.println(""String_Node_Str"");
      bufferStartY=startY - halfYRange;
      bufferGoalY=goalY + halfYRange;
      for (int y=bufferStartY; y <= bufferGoalY; y++) {
        for (int x=bufferGoalX; x <= bufferStartX; x++) {
          Coordinate tmpCoordinate=new Coordinate(x,y);
          DijkstraNode tmpNode=new DijkstraNode(tmpCoordinate);
          tmpNode.setDistanceFromStart(Double.POSITIVE_INFINITY);
          tmpNode.setParent(null);
          nodeVector.add(tmpNode);
        }
      }
    }
 else {
      bufferStartY=startY + halfYRange;
      bufferGoalY=goalY - halfYRange;
      for (int y=bufferGoalY; y <= bufferStartY; y++) {
        for (int x=bufferGoalX; x <= bufferStartX; x++) {
          Coordinate tmpCoordinate=new Coordinate(x,y);
          DijkstraNode tmpNode=new DijkstraNode(tmpCoordinate);
          tmpNode.setDistanceFromStart(Double.POSITIVE_INFINITY);
          tmpNode.setParent(null);
          nodeVector.add(tmpNode);
          System.out.println(""String_Node_Str"");
        }
      }
    }
  }
  for (int i=0; i < nodeVector.size(); i++) {
    if (nodeVector.get(i).getPosition().getX() == startX && nodeVector.get(i).getPosition().getY() == startY) {
      nodeVector.get(i).setDistanceFromStart(0);
    }
  }
  while (!nodeVector.isEmpty()) {
    boolean goalFound=false;
    DijkstraNode minNode=getClosestNode(nodeVector);
    if (minNode.getPosition().getX() == Integer.MAX_VALUE) {
      break;
    }
    removeNodeFromVector(nodeVector,minNode);
    List<DijkstraNode> neighborList=minNode.getNeighbors();
    for (int i=0; i < neighborList.size(); i++) {
      DijkstraNode currentNode=neighborList.get(i);
      int currentX=currentNode.getPosition().getX();
      int currentY=currentNode.getPosition().getY();
      boolean inVector=false;
      for (      DijkstraNode nVec : nodeVector) {
        if (neighborList.get(i).getPosition().getX() == nVec.getPosition().getX() && neighborList.get(i).getPosition().getY() == nVec.getPosition().getY()) {
          inVector=true;
        }
      }
      if (inVector) {
        System.out.println(""String_Node_Str"");
        double totalDist=minNode.getDistanceFromStart() + minNode.distBetween(neighborList.get(i));
        if (totalDist < neighborList.get(i).getDistanceFromStart()) {
          for (int q=0; q < nodeVector.size(); q++) {
            if (nodeVector.get(q).getPosition().getX() == currentX && nodeVector.get(q).getPosition().getY() == currentY) {
              if (rover.canTraverse(minNode.getPosition(),currentNode.getPosition())) {
                nodeVector.get(q).setDistanceFromStart(totalDist);
                nodeVector.get(q).setParent(minNode);
              }
            }
          }
        }
      }
      if (neighborList.get(i).currentIsGoal(goalNode)) {
        for (int q=0; q < nodeVector.size(); q++) {
          if (nodeVector.get(q).getPosition().getX() == neighborList.get(i).getPosition().getX() && nodeVector.get(q).getPosition().getY() == neighborList.get(i).getPosition().getY()) {
            List<Coordinate> tmpList=nodeVector.get(q).constructPath();
            fullPath=new ArrayList<Coordinate>(tmpList);
            goalFound=true;
          }
        }
      }
    }
    if (goalFound) {
      break;
    }
  }
  Collections.reverse(fullPath);
  output=new TerminalOutput(fullPath);
}","public void findPath(){
  Vector<DijkstraNode> nodeVector=new Vector<DijkstraNode>();
  DijkstraNode startNode=new DijkstraNode(rover.getStartPosition());
  DijkstraNode goalNode=new DijkstraNode(rover.getEndPosition());
  int startX=startNode.getPosition().getX();
  int startY=startNode.getPosition().getY();
  int goalX=goalNode.getPosition().getX();
  int goalY=goalNode.getPosition().getY();
  int yRange=Math.abs(goalY - startY);
  int xRange=Math.abs(goalX - startX);
  int halfYRange=yRange / 2;
  int halfXRange=xRange / 2;
  int bufferStartY;
  int bufferStartX;
  int bufferGoalY;
  int bufferGoalX;
  if (startX < goalX) {
    bufferStartX=startX - halfXRange;
    bufferGoalX=goalX + halfXRange;
    if (startY < goalY) {
      bufferStartY=startY - halfYRange;
      bufferGoalY=goalY + halfYRange;
      for (int y=bufferStartY; y <= bufferGoalY; y++) {
        for (int x=bufferStartX; x <= bufferGoalX; x++) {
          Coordinate tmpCoordinate=new Coordinate(x,y);
          DijkstraNode tmpNode=new DijkstraNode(tmpCoordinate);
          tmpNode.setDistanceFromStart(Double.POSITIVE_INFINITY);
          tmpNode.setParent(null);
          nodeVector.add(tmpNode);
        }
      }
    }
 else {
      bufferStartY=startY + halfYRange;
      bufferGoalY=goalY - halfYRange;
      for (int y=bufferGoalY; y <= bufferStartY; y++) {
        for (int x=bufferStartX; x <= bufferGoalX; x++) {
          Coordinate tmpCoordinate=new Coordinate(x,y);
          DijkstraNode tmpNode=new DijkstraNode(tmpCoordinate);
          tmpNode.setDistanceFromStart(Double.POSITIVE_INFINITY);
          tmpNode.setParent(null);
          nodeVector.add(tmpNode);
        }
      }
    }
  }
 else {
    System.out.println(""String_Node_Str"");
    bufferStartX=startX + halfXRange;
    bufferGoalX=goalX - halfXRange;
    if (startY < goalY) {
      System.out.println(""String_Node_Str"");
      bufferStartY=startY - halfYRange;
      bufferGoalY=goalY + halfYRange;
      for (int y=bufferStartY; y <= bufferGoalY; y++) {
        for (int x=bufferGoalX; x <= bufferStartX; x++) {
          Coordinate tmpCoordinate=new Coordinate(x,y);
          DijkstraNode tmpNode=new DijkstraNode(tmpCoordinate);
          tmpNode.setDistanceFromStart(Double.POSITIVE_INFINITY);
          tmpNode.setParent(null);
          nodeVector.add(tmpNode);
        }
      }
    }
 else {
      bufferStartY=startY + halfYRange;
      bufferGoalY=goalY - halfYRange;
      for (int y=bufferGoalY; y <= bufferStartY; y++) {
        for (int x=bufferGoalX; x <= bufferStartX; x++) {
          Coordinate tmpCoordinate=new Coordinate(x,y);
          DijkstraNode tmpNode=new DijkstraNode(tmpCoordinate);
          tmpNode.setDistanceFromStart(Double.POSITIVE_INFINITY);
          tmpNode.setParent(null);
          nodeVector.add(tmpNode);
          System.out.println(""String_Node_Str"");
        }
      }
    }
  }
  for (int i=0; i < nodeVector.size(); i++) {
    if (nodeVector.get(i).getPosition().getX() == startX && nodeVector.get(i).getPosition().getY() == startY) {
      nodeVector.get(i).setDistanceFromStart(0);
    }
  }
  while (!nodeVector.isEmpty()) {
    boolean goalFound=false;
    DijkstraNode minNode=getClosestNode(nodeVector);
    if (minNode.getPosition().getX() == Integer.MAX_VALUE) {
      break;
    }
    removeNodeFromVector(nodeVector,minNode);
    List<DijkstraNode> neighborList=minNode.getNeighbors();
    for (int i=0; i < neighborList.size(); i++) {
      DijkstraNode currentNode=neighborList.get(i);
      int currentX=currentNode.getPosition().getX();
      int currentY=currentNode.getPosition().getY();
      boolean inVector=false;
      for (      DijkstraNode nVec : nodeVector) {
        if (neighborList.get(i).getPosition().getX() == nVec.getPosition().getX() && neighborList.get(i).getPosition().getY() == nVec.getPosition().getY()) {
          inVector=true;
        }
      }
      if (inVector) {
        System.out.println(""String_Node_Str"");
        double totalDist=minNode.getDistanceFromStart() + minNode.distBetween(neighborList.get(i));
        if (totalDist < neighborList.get(i).getDistanceFromStart()) {
          for (int q=0; q < nodeVector.size(); q++) {
            if (nodeVector.get(q).getPosition().getX() == currentX && nodeVector.get(q).getPosition().getY() == currentY) {
              if (rover.canTraverse(minNode.getPosition(),currentNode.getPosition())) {
                nodeVector.get(q).setDistanceFromStart(totalDist);
                nodeVector.get(q).setParent(minNode);
              }
            }
          }
        }
      }
      if (neighborList.get(i).currentIsGoal(goalNode)) {
        for (int q=0; q < nodeVector.size(); q++) {
          if (nodeVector.get(q).getPosition().getX() == neighborList.get(i).getPosition().getX() && nodeVector.get(q).getPosition().getY() == neighborList.get(i).getPosition().getY()) {
            List<Coordinate> tmpList=nodeVector.get(q).constructPath();
            fullPath=new ArrayList<Coordinate>(tmpList);
            goalFound=true;
          }
        }
      }
    }
    if (goalFound) {
      break;
    }
  }
  Collections.reverse(fullPath);
  output=new TerminalOutput(fullPath);
  output=new MapImageOutput(fullPath,map.getMapPath());
}"
40143,"public void startAlgorithm(){
  if (alg.equalsIgnoreCase(""String_Node_Str"")) {
    MarsRover r=new MarsRover(slope,startCoords,endCoords,mapPath);
    algorithm=new OptimalAlgorithm(map,r);
    algorithm.findPath();
  }
 else   if (alg.equalsIgnoreCase(""String_Node_Str"")) {
    MarsRover r=new MarsRover(slope,startCoords,endCoords,mapPath,fieldOfView);
    algorithm=new SuboptimalAlgorithm(map,r);
    algorithm.findPath();
  }
 else {
    System.out.println(""String_Node_Str"");
  }
}","public void startAlgorithm(){
  if (alg.equalsIgnoreCase(""String_Node_Str"")) {
    MarsRover r=new MarsRover(slope,startCoords,endCoords,mapPath);
    algorithm=new AlgorithmUnlimitedScope(map,r);
    algorithm.findPath();
  }
 else   if (alg.equalsIgnoreCase(""String_Node_Str"")) {
    MarsRover r=new MarsRover(slope,startCoords,endCoords,mapPath,fieldOfView);
    algorithm=new AlgorithmLimitedScope(map,r);
    algorithm.findPath();
  }
 else {
    System.out.println(""String_Node_Str"");
  }
}"
40144,"/** 
 * Create a resized image to fill the maxWidth/maxHeight values,the quality value and the angle value
 * @param realPath
 * @param initialWidth
 * @param initialHeight
 * @return resized file
 */
private File getResizedImage(final String realPath,final int initialWidth,final int initialHeight){
  Bitmap photo=BitmapFactory.decodeFile(realPath);
  if (photo == null) {
    return null;
  }
  Bitmap scaledphoto=null;
  if (maxWidth == 0) {
    maxWidth=initialWidth;
  }
  if (maxHeight == 0) {
    maxHeight=initialHeight;
  }
  double widthRatio=(double)maxWidth / initialWidth;
  double heightRatio=(double)maxHeight / initialHeight;
  double ratio=(widthRatio < heightRatio) ? widthRatio : heightRatio;
  Matrix matrix=new Matrix();
  matrix.postRotate(angle);
  matrix.postScale((float)ratio,(float)ratio);
  ExifInterface exif;
  try {
    exif=new ExifInterface(realPath);
    int orientation=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,0);
    if (orientation == 6) {
      matrix.postRotate(90);
    }
 else     if (orientation == 3) {
      matrix.postRotate(180);
    }
 else     if (orientation == 8) {
      matrix.postRotate(270);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  scaledphoto=Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),matrix,true);
  ByteArrayOutputStream bytes=new ByteArrayOutputStream();
  scaledphoto.compress(Bitmap.CompressFormat.JPEG,quality,bytes);
  File f=createNewFile(false);
  FileOutputStream fo;
  try {
    fo=new FileOutputStream(f);
    try {
      fo.write(bytes.toByteArray());
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  if (photo != null) {
    scaledphoto.recycle();
    photo.recycle();
    scaledphoto=null;
    photo=null;
  }
  return f;
}","/** 
 * Create a resized image to fill the maxWidth/maxHeight values,the quality value and the angle value
 * @param realPath
 * @param initialWidth
 * @param initialHeight
 * @return resized file
 */
private File getResizedImage(final String realPath,final int initialWidth,final int initialHeight){
  Options options=new BitmapFactory.Options();
  options.inScaled=false;
  Bitmap photo=BitmapFactory.decodeFile(realPath,options);
  if (photo == null) {
    return null;
  }
  Bitmap scaledphoto=null;
  if (maxWidth == 0) {
    maxWidth=initialWidth;
  }
  if (maxHeight == 0) {
    maxHeight=initialHeight;
  }
  double widthRatio=(double)maxWidth / initialWidth;
  double heightRatio=(double)maxHeight / initialHeight;
  double ratio=(widthRatio < heightRatio) ? widthRatio : heightRatio;
  Matrix matrix=new Matrix();
  matrix.postRotate(angle);
  matrix.postScale((float)ratio,(float)ratio);
  ExifInterface exif;
  try {
    exif=new ExifInterface(realPath);
    int orientation=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,0);
    if (orientation == 6) {
      matrix.postRotate(90);
    }
 else     if (orientation == 3) {
      matrix.postRotate(180);
    }
 else     if (orientation == 8) {
      matrix.postRotate(270);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  scaledphoto=Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),matrix,true);
  ByteArrayOutputStream bytes=new ByteArrayOutputStream();
  scaledphoto.compress(Bitmap.CompressFormat.JPEG,quality,bytes);
  File f=createNewFile(false);
  FileOutputStream fo;
  try {
    fo=new FileOutputStream(f);
    try {
      fo.write(bytes.toByteArray());
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  if (photo != null) {
    scaledphoto.recycle();
    photo.recycle();
    scaledphoto=null;
    photo=null;
  }
  return f;
}"
40145,"/** 
 * Create a resized image to fill the maxWidth/maxHeight values,the quality value and the angle value
 * @param realPath
 * @param initialWidth
 * @param initialHeight
 * @return resized file
 */
private File getResizedImage(final String realPath,final int initialWidth,final int initialHeight){
  Bitmap photo=BitmapFactory.decodeFile(realPath);
  Bitmap scaledphoto=null;
  if (maxWidth == 0) {
    maxWidth=initialWidth;
  }
  if (maxHeight == 0) {
    maxHeight=initialHeight;
  }
  double widthRatio=(double)maxWidth / initialWidth;
  double heightRatio=(double)maxHeight / initialHeight;
  double ratio=(widthRatio < heightRatio) ? widthRatio : heightRatio;
  Matrix matrix=new Matrix();
  matrix.postRotate(angle);
  matrix.postScale((float)ratio,(float)ratio);
  scaledphoto=Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),matrix,true);
  ByteArrayOutputStream bytes=new ByteArrayOutputStream();
  scaledphoto.compress(Bitmap.CompressFormat.JPEG,quality,bytes);
  File f=createNewFile();
  FileOutputStream fo;
  try {
    fo=new FileOutputStream(f);
    try {
      fo.write(bytes.toByteArray());
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  if (photo != null) {
    photo.recycle();
    photo=null;
  }
  return f;
}","/** 
 * Create a resized image to fill the maxWidth/maxHeight values,the quality value and the angle value
 * @param realPath
 * @param initialWidth
 * @param initialHeight
 * @return resized file
 */
private File getResizedImage(final String realPath,final int initialWidth,final int initialHeight){
  Bitmap photo=BitmapFactory.decodeFile(realPath);
  Bitmap scaledphoto=null;
  if (maxWidth == 0) {
    maxWidth=initialWidth;
  }
  if (maxHeight == 0) {
    maxHeight=initialHeight;
  }
  double widthRatio=(double)maxWidth / initialWidth;
  double heightRatio=(double)maxHeight / initialHeight;
  double ratio=(widthRatio < heightRatio) ? widthRatio : heightRatio;
  Matrix matrix=new Matrix();
  matrix.postRotate(angle);
  matrix.postScale((float)ratio,(float)ratio);
  scaledphoto=Bitmap.createBitmap(photo,0,0,photo.getWidth(),photo.getHeight(),matrix,true);
  ByteArrayOutputStream bytes=new ByteArrayOutputStream();
  scaledphoto.compress(Bitmap.CompressFormat.JPEG,quality,bytes);
  File f=createNewFile();
  FileOutputStream fo;
  try {
    fo=new FileOutputStream(f);
    try {
      fo.write(bytes.toByteArray());
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
  if (photo != null) {
    scaledphoto.recycle();
    photo.recycle();
    scaledphoto=null;
    photo=null;
  }
  return f;
}"
40146,"public List<PlayerBoard> getPlayerBoards(){
  List<PlayerBoard> playerList=new ArrayList<>();
  for (  PlayerBoard playerBoard : brainySnakePlayers.values()) {
    playerList.add(playerBoard);
  }
  return playerList;
}","/** 
 * @return List of {@link PlayerBoard}
 */
public List<PlayerBoard> getPlayerBoards(){
  List<PlayerBoard> playerList=new ArrayList<>();
  for (  PlayerBoard playerBoard : brainySnakePlayers.values()) {
    playerList.add(playerBoard);
  }
  return playerList;
}"
40147,"public void reset(){
  gameMaster=new GameMaster(new Level(HEIGHT,WIDTH,Color.WHITE));
}","public void reset(){
  GameBoard.getINSTANCE().reset();
}"
40148,"/** 
 * Creates a sorted Map of the players according to the points
 * @return Keys are the score as Integer and the value is a ArrayList with the PlayerHandlers with this score
 */
public SortedMap<Long,ArrayList<PlayerBoard>> createSortedWinnerMap(){
  SortedMap<Long,ArrayList<PlayerBoard>> sortedMap=new TreeMap<>();
  for (  PlayerBoard playerHandler : GameBoard.getINSTANCE().getPlayerBoards()) {
    if (sortedMap.containsKey(playerHandler.getSize())) {
      sortedMap.get(playerHandler.getSize()).add(playerHandler);
    }
 else {
      ArrayList<PlayerBoard> playerHandlers=new ArrayList<PlayerBoard>(){
{
          add(playerHandler);
        }
      }
;
      sortedMap.put(playerHandler.getSize(),playerHandlers);
    }
  }
  return sortedMap;
}","/** 
 * Creates a sorted Map of the players according to the points
 * @return Keys are the score as Integer and the value is a ArrayList with the PlayerHandlers with this score
 */
public SortedMap<Long,ArrayList<PlayerBoard>> createSortedWinnerMap(){
  SortedMap<Long,ArrayList<PlayerBoard>> sortedMap=new TreeMap<>();
  for (  PlayerBoard playerBoard : GameBoard.getINSTANCE().getPlayerBoards()) {
    if (sortedMap.containsKey(playerBoard.getSize())) {
      sortedMap.get(playerBoard.getSize()).add(playerBoard);
    }
 else {
      ArrayList<PlayerBoard> playerHandlers=new ArrayList<PlayerBoard>(){
{
          add(playerBoard);
        }
      }
;
      sortedMap.put(playerBoard.getSize(),playerHandlers);
    }
  }
  return sortedMap;
}"
40149,"public void gameLoop(){
  GlobalGameState.countMoves++;
  UiState.getINSTANCE().setRoundsRemaining(GlobalGameState.movesRemaining());
  List<PlayerHandler> winner=getWinner();
  if (winner.size() > 0) {
    gameOver=true;
    ArrayList<PlayerDTO> playerDTOS=new ArrayList<>();
    for (    PlayerHandler playerHandler : getPlayerHandler()) {
      playerDTOS.add(new PlayerDTO(playerHandler.getPlayerName(),new Color(playerHandler.getSnake().getHeadColor()),playerHandler.getSnake().getAllSnakePositions().size()));
    }
    ArrayList<PlayerDTO> deadPlayerDTOS=new ArrayList<>();
    for (    PlayerHandler playerHandler : deadPlayer) {
      deadPlayerDTOS.add(new PlayerDTO(playerHandler.getPlayerName(),new Color(playerHandler.getSnake().getHeadColor()),playerHandler.getSnake().getAllSnakePositions().size()));
    }
    ScreenManager.getINSTANCE().finishGame(playerDTOS,deadPlayerDTOS);
    ScreenManager.getINSTANCE().showScreen(ScreenType.WINNER_SCREEN);
  }
  for (  PlayerHandler playerHandler : playerController.getPlayerHandlerList()) {
    updateRoundForPlayer(playerHandler);
    this.playerController.updatePlayerState(new GlobalGameState());
  }
  Map<PlayerHandler,PlayerChoice> playerStatus=this.playerController.getPlayerStatus();
  for (  PlayerHandler playerHandler : playerStatus.keySet()) {
    PlayerChoice playerChoice=playerStatus.get(playerHandler);
    validateEvents(playerHandler,playerChoice);
  }
  playerStatus.clear();
  for (  PlayerHandler playerHandler : playerController.getPlayerHandlerList()) {
    List<RoundEvent> roundEvents=playerHandler.getRoundEvents();
    int collectedPoints=0;
    for (    RoundEvent roundEvent : roundEvents) {
switch (roundEvent) {
case DIED:
        playerHandler.getSnake().removeHead();
      deadPlayer.add(playerHandler);
    break;
case MOVED:
  playerHandler.moveToNextPosition();
break;
case CONFUSED:
collectedPoints++;
break;
case COLLISION_WITH_LEVEL:
collectedPoints--;
break;
case BIT_HIMSELF:
collectedPoints--;
break;
case BIT_AGENT:
if (!playerHandler.isGhostMode()) {
collectedPoints++;
}
break;
case BIT_BY_PLAYER:
if (!playerHandler.isGhostMode()) {
collectedPoints--;
}
break;
case CONSUMED_POINT:
collectedPoints++;
break;
}
}
if (collectedPoints <= 0) {
playerHandler.penalty();
if (collectedPoints <= -1) {
playerHandler.penalty();
}
}
}
for (PlayerHandler dead : deadPlayer) {
playerController.getPlayerHandlerList().remove(dead);
UiState.getINSTANCE().rip(dead.getPlayerName());
}
level.spreadPoints();
for (PlayerHandler playerHandler : playerController.getPlayerHandlerList()) {
playerHandler.endRound();
}
}","public void gameLoop(){
  GlobalGameState.countMoves++;
  UiState.getINSTANCE().setRoundsRemaining(GlobalGameState.movesRemaining());
  List<PlayerHandler> winner=getWinner();
  if (winner.size() > 0) {
    gameOver=true;
    ArrayList<PlayerDTO> playerDTOS=new ArrayList<>();
    for (    PlayerHandler playerHandler : getPlayerHandler()) {
      playerDTOS.add(new PlayerDTO(playerHandler.getPlayerName(),new Color(playerHandler.getSnake().getHeadColor()),playerHandler.getSnake().getAllSnakePositions().size()));
    }
    ArrayList<PlayerDTO> deadPlayerDTOS=new ArrayList<>();
    for (    PlayerHandler playerHandler : deadPlayer) {
      deadPlayerDTOS.add(new PlayerDTO(playerHandler.getPlayerName(),new Color(playerHandler.getSnake().getHeadColor()),playerHandler.getSnake().getAllSnakePositions().size()));
    }
    ScreenManager.getINSTANCE().finishGame(playerDTOS,deadPlayerDTOS);
    ScreenManager.getINSTANCE().showScreen(ScreenType.WINNER_SCREEN);
  }
  for (  PlayerHandler playerHandler : playerController.getPlayerHandlerList()) {
    updateRoundForPlayer(playerHandler);
    this.playerController.updatePlayerState(new GlobalGameState());
  }
  Map<PlayerHandler,PlayerChoice> playerStatus=this.playerController.getPlayerStatus();
  for (  PlayerHandler playerHandler : playerStatus.keySet()) {
    PlayerChoice playerChoice=playerStatus.get(playerHandler);
    validateEvents(playerHandler,playerChoice);
  }
  playerStatus.clear();
  for (  PlayerHandler playerHandler : playerController.getPlayerHandlerList()) {
    List<RoundEvent> roundEvents=playerHandler.getRoundEvents();
    int collectedPoints=0;
    for (    RoundEvent roundEvent : roundEvents) {
switch (roundEvent) {
case DIED:
        playerHandler.getSnake().removeHead();
      deadPlayer.add(playerHandler);
    break;
case MOVED:
  playerHandler.moveToNextPosition();
break;
case CONFUSED:
collectedPoints++;
break;
case COLLISION_WITH_LEVEL:
collectedPoints--;
break;
case BIT_HIMSELF:
collectedPoints--;
break;
case BIT_AGENT:
collectedPoints++;
break;
case BIT_BY_PLAYER:
collectedPoints--;
break;
case CONSUMED_POINT:
collectedPoints++;
break;
}
}
if (collectedPoints <= 0) {
playerHandler.penalty();
if (collectedPoints <= -1) {
playerHandler.penalty();
}
}
}
for (PlayerHandler dead : deadPlayer) {
playerController.getPlayerHandlerList().remove(dead);
UiState.getINSTANCE().rip(dead.getPlayerName());
}
level.spreadPoints();
for (PlayerHandler playerHandler : playerController.getPlayerHandlerList()) {
playerHandler.endRound();
}
}"
40150,"public GameMaster(){
  brainySnake=new BrainySnake();
  brainySnake.initialize();
  brainySnake.create();
  levelBoard=new LevelBoard(Config.LEVEL_WIDTH,Config.LEVEL_HEIGHT);
  GameBoard gameBoard=GameBoard.getINSTANCE();
  GlobalGameState.initialize(gameBoard.getRemainingRoundsToPlay());
  playerController=new PlayerController(gameBoard.getBrainySnakePlayers(),levelBoard);
}","public GameMaster(GameBoard gameBoard){
  brainySnake=new BrainySnake();
  brainySnake.initialize();
  brainySnake.create();
  levelBoard=new LevelBoard(Config.LEVEL_WIDTH,Config.LEVEL_HEIGHT);
  this.gameBoard=gameBoard;
  GlobalGameState.initialize(gameBoard.getRemainingRoundsToPlay());
  playerController=new PlayerController(gameBoard.getBrainySnakePlayers(),levelBoard);
}"
40151,"/** 
 * Updates the meta information of the game and the player in the gameboard
 */
private void updateGameBaordData(){
  GameBoard.getINSTANCE().updateGameBoard(GlobalGameState.movesRemaining());
}","/** 
 * Updates the meta information of the game and the player in the gameboard
 */
private void updateGameBaordData(){
  for (  PlayerHandler playerHandler : playerController.getPlayerHandlerList()) {
    playerHandler.updatePlayerBoard();
  }
  gameBoard.updateGameBoard(GlobalGameState.movesRemaining());
}"
40152,"private void validateEvents(PlayerHandler playerHandler,PlayerChoice playerChoice){
  List<RoundEvent> roundEvents=playerHandler.getRoundEvents();
  if (playerHandler.isDead() || playerHandler.getSnake().countPoints() <= 1) {
    roundEvents.add(DIED);
    playerHandler.kill();
    return;
  }
  if (!playerChoice.isHasChosen() || !playerHandler.isOrientationValid(playerChoice.getOrientation())) {
    roundEvents.add(CONFUSED);
    playerHandler.setConfused(true);
    return;
  }
  Point2D nextPosition=playerHandler.getNextPositionBy(playerChoice.getOrientation());
  if (levelBoard.checkCollision(nextPosition)) {
    roundEvents.add(COLLISION_WITH_LEVEL);
    playerHandler.setConfused(true);
    return;
  }
  playerHandler.setCurrentOrientation(playerChoice.getOrientation());
  roundEvents.add(MOVED);
  playerHandler.setConfused(false);
  for (  PlayerHandler player : playerController.getPlayerHandlerList()) {
    if (!playerHandler.isGhostMode() && player.gotBitten(nextPosition)) {
      if (player.equals(playerHandler)) {
        roundEvents.add(BIT_HIMSELF);
      }
 else {
        roundEvents.add(BIT_AGENT);
        player.getRoundEvents().add(BIT_BY_PLAYER);
      }
      playerHandler.setGhostMode();
    }
  }
  if (!playerHandler.isGhostMode() && levelBoard.tryConsumePoint(nextPosition)) {
    roundEvents.add(CONSUMED_POINT);
  }
}","private void validateEvents(PlayerHandler playerHandler,PlayerChoice playerChoice){
  List<RoundEvent> roundEvents=playerHandler.getRoundEvents();
  if (playerHandler.isDead() || playerHandler.getSnake().countPoints() <= 1) {
    roundEvents.add(DIED);
    return;
  }
  if (!playerChoice.isHasChosen() || !playerHandler.isOrientationValid(playerChoice.getOrientation())) {
    roundEvents.add(CONFUSED);
    playerHandler.setConfused(true);
    return;
  }
  Point2D nextPosition=playerHandler.getNextPositionBy(playerChoice.getOrientation());
  if (levelBoard.checkCollision(nextPosition)) {
    roundEvents.add(COLLISION_WITH_LEVEL);
    playerHandler.setConfused(true);
    return;
  }
  playerHandler.setCurrentOrientation(playerChoice.getOrientation());
  roundEvents.add(MOVED);
  playerHandler.setConfused(false);
  for (  PlayerHandler player : playerController.getPlayerHandlerList()) {
    if (!playerHandler.isGhostMode() && player.gotBitten(nextPosition)) {
      if (player.equals(playerHandler)) {
        roundEvents.add(BIT_HIMSELF);
      }
 else {
        roundEvents.add(BIT_AGENT);
        player.getRoundEvents().add(BIT_BY_PLAYER);
      }
      playerHandler.setGhostMode();
    }
  }
  if (!playerHandler.isGhostMode() && levelBoard.tryConsumePoint(nextPosition)) {
    roundEvents.add(CONSUMED_POINT);
  }
}"
40153,"public void updateGame(){
  brainySnake.updateLevelPoints(levelBoard.getPoints(),levelBoard.getBarriers(),levelBoard.getWalls());
  List<LevelObject> snakes=new ArrayList<>();
  for (  PlayerHandler playerHandler : playerController.getPlayerHandlerList()) {
    Snake snake=playerHandler.getSnake();
    snakes.add(snake.getHead());
    snakes.add(snake.getBody());
    if (Config.RENDER_PLAYERVIEW && playerHandler.getPlayerView() != null) {
      snakes.addAll(drawPlayerView(playerHandler.getPlayerView()));
    }
  }
  brainySnake.updateSnakes(snakes);
  brainySnake.render();
}","public void updateGame(){
  brainySnake.updateLevelPoints(levelBoard.getPoints(),levelBoard.getBarriers(),levelBoard.getWalls());
  List<LevelObject> snakes=new ArrayList<>();
  for (  PlayerHandler playerHandler : playerController.getPlayerHandlerList()) {
    Snake snake=playerHandler.getSnake();
    if (Config.RENDER_PLAYERVIEW && playerHandler.getPlayerView() != null) {
      snakes.addAll(drawPlayerView(playerHandler.getPlayerView()));
    }
    snakes.add(snake.getBody());
    snakes.add(snake.getHead());
  }
  brainySnake.updateSnakes(snakes);
  brainySnake.render();
}"
40154,"public void gameLoop(){
  GlobalGameState.increasePastRounds();
  if (!checkIfPlayerWon().isEmpty()) {
    gameOver();
    return;
  }
  for (  PlayerHandler playerHandler : playerController.getPlayerHandlerList()) {
    updateRoundForPlayer(playerHandler);
    playerController.updatePlayerState();
  }
  Map<PlayerHandler,PlayerChoice> playerStatus=playerController.getPlayerStatus();
  for (  PlayerHandler playerHandler : playerStatus.keySet()) {
    PlayerChoice playerChoice=playerStatus.get(playerHandler);
    validateEvents(playerHandler,playerChoice);
  }
  playerStatus.clear();
  for (  PlayerHandler playerHandler : playerController.getPlayerHandlerList()) {
    List<RoundEvent> roundEvents=playerHandler.getRoundEvents();
    int collectedPoints=0;
    for (    RoundEvent roundEvent : roundEvents) {
switch (roundEvent) {
case DIED:
        playerHandler.getSnake().removeHead();
      break;
case MOVED:
    playerHandler.moveToNextPosition();
  break;
case CONFUSED:
collectedPoints++;
break;
case COLLISION_WITH_LEVEL:
collectedPoints--;
break;
case BIT_HIMSELF:
collectedPoints--;
break;
case BIT_AGENT:
collectedPoints++;
break;
case BIT_BY_PLAYER:
collectedPoints--;
break;
case CONSUMED_POINT:
collectedPoints++;
break;
}
}
if (collectedPoints <= 0) {
playerHandler.penalty();
if (collectedPoints <= -1) {
playerHandler.penalty();
}
}
}
playerController.removeDeadPlayer();
levelBoard.fillUpWithPoints(Config.MAX_POINTS_IN_LEVEL);
for (PlayerHandler playerHandler : playerController.getPlayerHandlerList()) {
playerHandler.endRound();
}
GlobalGameState.increasePastRounds();
updateGameBaordData();
}","public void gameLoop(){
  GlobalGameState.increasePastRounds();
  if (!checkIfPlayerWon().isEmpty()) {
    gameOver();
    return;
  }
  for (  PlayerHandler playerHandler : playerController.getPlayerHandlerList()) {
    updateRoundForPlayer(playerHandler);
    playerController.updatePlayerState();
  }
  Map<PlayerHandler,PlayerChoice> playerStatus=playerController.getPlayerStatus();
  for (  PlayerHandler playerHandler : playerStatus.keySet()) {
    PlayerChoice playerChoice=playerStatus.get(playerHandler);
    validateEvents(playerHandler,playerChoice);
  }
  playerStatus.clear();
  for (  PlayerHandler playerHandler : playerController.getPlayerHandlerList()) {
    List<RoundEvent> roundEvents=playerHandler.getRoundEvents();
    int collectedPoints=0;
    for (    RoundEvent roundEvent : roundEvents) {
switch (roundEvent) {
case DIED:
        playerHandler.kill();
      break;
case MOVED:
    playerHandler.moveToNextPosition();
  break;
case CONFUSED:
collectedPoints++;
break;
case COLLISION_WITH_LEVEL:
collectedPoints--;
break;
case BIT_HIMSELF:
collectedPoints--;
break;
case BIT_AGENT:
collectedPoints++;
break;
case BIT_BY_PLAYER:
collectedPoints--;
break;
case CONSUMED_POINT:
collectedPoints++;
break;
}
}
if (collectedPoints <= 0) {
playerHandler.penalty();
if (collectedPoints <= -1) {
playerHandler.penalty();
}
}
}
levelBoard.fillUpWithPoints(Config.MAX_POINTS_IN_LEVEL);
for (PlayerHandler playerHandler : playerController.getPlayerHandlerList()) {
playerHandler.endRound();
}
GlobalGameState.increasePastRounds();
updateGameBaordData();
playerController.removeDeadPlayer();
}"
40155,"public PlayerController(Map<Long,PlayerBoard> playerMap,LevelBoard levelBoard){
  for (  PlayerBoard player : playerMap.values()) {
    Snake newPlayerSnake=levelBoard.createStartingGameObject(Config.INITIAL_PLAYER_LENGTH,player.getColor());
    playerHandlerList.add(new PlayerHandler(player.getBrainySnakePlayer(),newPlayerSnake));
  }
  playerStatePushExecutorService=new PlayerStatePushExecutorService(playerHandlerList,Config.MAX_AGENT_PROCESSING_TIME_MS);
  playerUpdateGetExecutorService=new PlayerUpdateGetExecutorService(playerHandlerList,Config.MAX_AGENT_PROCESSING_TIME_MS);
}","public PlayerController(Map<Long,PlayerBoard> playerMap,LevelBoard levelBoard){
  for (  PlayerBoard player : playerMap.values()) {
    Snake newPlayerSnake=levelBoard.createStartingGameObject(Config.INITIAL_PLAYER_LENGTH,player.getColor());
    playerHandlerList.add(new PlayerHandler(player,newPlayerSnake));
  }
  playerStatePushExecutorService=new PlayerStatePushExecutorService(playerHandlerList,Config.MAX_AGENT_PROCESSING_TIME_MS);
  playerUpdateGetExecutorService=new PlayerUpdateGetExecutorService(playerHandlerList,Config.MAX_AGENT_PROCESSING_TIME_MS);
}"
40156,"public PlayerHandler(BrainySnakePlayer brainySnakePlayer,Snake snake){
  this.brainySnakePlayer=brainySnakePlayer;
  this.currentOrientation=snake.getStartOrientation();
  this.snake=snake;
  this.playerIdentifier=UUID.randomUUID();
}","public PlayerHandler(PlayerBoard playerBoard,Snake snake){
  this.playerBoard=playerBoard;
  this.currentOrientation=snake.getStartOrientation();
  this.snake=snake;
  this.playerIdentifier=UUID.randomUUID();
}"
40157,"public void penalty(){
  if (snake.countPoints() <= 1) {
    dead=true;
  }
 else {
    snake.removeTail();
  }
}","public void penalty(){
  if (snake.countPoints() <= 1) {
    kill();
    LOGGER.info(""String_Node_Str"",playerBoard.getName());
  }
 else {
    snake.removeTail();
  }
}"
40158,"public void update(){
  if (dead) {
    return;
  }
  if (ghostMode) {
    ghostMode();
  }
 else   if (confused) {
    blink();
  }
 else {
    snake.reset();
  }
}","public void update(){
  if (isDead) {
    return;
  }
  if (isGhostMode) {
    ghostMode();
  }
 else   if (isConfused) {
    blink();
  }
 else {
    snake.reset();
  }
}"
40159,"private void ghostMode(){
  if (ghostTime++ > Config.GHOST_TIME) {
    ghostTime=0;
    snake.reset();
    ghostMode=false;
  }
 else {
    snake.setGhostMode();
  }
}","private void ghostMode(){
  if (ghostTime++ > Config.GHOST_TIME) {
    ghostTime=0;
    snake.reset();
    isGhostMode=false;
  }
 else {
    snake.setGhostMode();
  }
}"
40160,"private void blink(){
  if (blinkTime++ > Config.BLINK_TIME) {
    blinkTime=0;
    blinked=!blinked;
  }
  if (blinked) {
    snake.reset();
  }
 else {
    snake.blink();
  }
}","private void blink(){
  if (blinkTime++ > Config.BLINK_TIME) {
    blinkTime=0;
    isBlinking=!isBlinking;
  }
  if (isBlinking) {
    snake.reset();
  }
 else {
    snake.blink();
  }
}"
40161,"public void setGhostMode(){
  ghostMode=true;
  ghostTime=0;
}","public void setGhostMode(){
  isGhostMode=true;
  ghostTime=0;
}"
40162,"public boolean isDead(){
  return dead;
}","public boolean isDead(){
  return isDead;
}"
40163,"public boolean isGhostMode(){
  return ghostMode;
}","public boolean isGhostMode(){
  return isGhostMode;
}"
40164,"public void moveToNextPosition(){
  this.snake.setNextPosition(nextPositionIs(currentOrientation));
  confused=false;
}","public void moveToNextPosition(){
  this.snake.setNextPosition(nextPositionIs(currentOrientation));
  isConfused=false;
}"
40165,"public void setConfused(boolean confused){
  this.confused=confused;
}","public void setConfused(boolean confused){
  this.isConfused=confused;
}"
40166,"/** 
 * Requests the next Update (step) from the Agent (Player) Warning: Call this Method from Thread or Test only
 * @return PlayerUpdate (this can be null
 */
PlayerUpdate requestPlayerUpdate(){
  return brainySnakePlayer.tellPlayerUpdate();
}","/** 
 * Requests the next Update (step) from the Agent (Player) Warning: Call this Method from Thread or Test only
 * @return PlayerUpdate (this can be null
 */
PlayerUpdate requestPlayerUpdate(){
  return playerBoard.getBrainySnakePlayer().tellPlayerUpdate();
}"
40167,"public void kill(){
  dead=true;
  Gdx.app.log(""String_Node_Str"",""String_Node_Str"" + brainySnakePlayer.getPlayerName() + ""String_Node_Str"");
}","public void kill(){
  isDead=true;
  snake.clear();
}"
40168,"/** 
 * Sends the last PlayerState to the Agent Warning: Call this Method from Thread or Test only
 * @return if processing was successful. (This can be ignored)
 */
Boolean sendPlayerState(){
  return this.brainySnakePlayer.handlePlayerStatusUpdate(this.lastPlayerState);
}","/** 
 * Sends the last PlayerState to the Agent Warning: Call this Method from Thread or Test only
 * @return if processing was successful. (This can be ignored)
 */
Boolean sendPlayerState(){
  return playerBoard.getBrainySnakePlayer().handlePlayerStatusUpdate(this.lastPlayerState);
}"
40169,"/** 
 * Calculates the next PlayerState from global GameData
 */
public void calculatePlayerState(){
  int points=snake.countPoints();
  Point2D head=snake.getHeadPosition();
  Point2D tail;
  if (points > 1) {
    tail=snake.getTailPosition();
  }
 else {
    tail=null;
  }
  int ghostModeRemaining=Config.GHOST_TIME - ghostTime;
  boolean bitByPlayer=false;
  boolean moved=false;
  boolean collisionWithLevel=false;
  for (  RoundEvent roundEvent : roundEvents) {
switch (roundEvent) {
case BIT_BY_PLAYER:
      bitByPlayer=true;
    break;
case MOVED:
  moved=true;
break;
case COLLISION_WITH_LEVEL:
collisionWithLevel=true;
break;
}
}
this.lastPlayerState=new PlayerState(GlobalGameState.getPastRounds(),GlobalGameState.movesRemaining(),points,head,tail,ghostMode,ghostModeRemaining,bitByPlayer,moved,collisionWithLevel,playerView);
}","/** 
 * Calculates the next PlayerState from global GameData
 */
public void calculatePlayerState(){
  int points=snake.countPoints();
  Point2D head=snake.getHeadPosition();
  Point2D tail;
  if (points > 1) {
    tail=snake.getTailPosition();
  }
 else {
    tail=null;
  }
  int ghostModeRemaining=Config.GHOST_TIME - ghostTime;
  boolean bitByPlayer=false;
  boolean moved=false;
  boolean collisionWithLevel=false;
  for (  RoundEvent roundEvent : roundEvents) {
switch (roundEvent) {
case BIT_BY_PLAYER:
      bitByPlayer=true;
    break;
case MOVED:
  moved=true;
break;
case COLLISION_WITH_LEVEL:
collisionWithLevel=true;
break;
}
}
this.lastPlayerState=new PlayerState(GlobalGameState.getPastRounds(),GlobalGameState.movesRemaining(),points,head,tail,isGhostMode,ghostModeRemaining,bitByPlayer,moved,collisionWithLevel,playerView);
}"
40170,"public void removeTail(){
  body.getPositions().removeLast();
}","public void removeTail(){
  if (!body.getPositions().isEmpty()) {
    body.getPositions().removeLast();
  }
}"
40171,"public void removeHead(){
  head.getPositions().removeLast();
}","public void removeHead(){
  if (!head.getPositions().isEmpty()) {
    head.getPositions().removeLast();
  }
}"
40172,"public GameScreen(){
  gameMaster=new GameMaster();
}","public GameScreen(){
  gameMaster=new GameMaster(GameBoard.getINSTANCE());
}"
40173,"public void gameLoop(){
  GlobalGameState.countMoves++;
  UiState.getINSTANCE().setRoundsRemaining(GlobalGameState.movesRemaining());
  List<PlayerHandler> winner=getWinner();
  if (winner.size() > 0) {
    gameOver=true;
    return;
  }
  Map<PlayerHandler,PlayerChoice> playerStatus=this.playerController.getPlayerStatus();
  for (  PlayerHandler playerHandler : playerStatus.keySet()) {
    PlayerChoice playerChoice=playerStatus.get(playerHandler);
    validateEvents(playerHandler,playerChoice);
  }
  playerStatus.clear();
  List<PlayerHandler> deadPlayer=new ArrayList<PlayerHandler>();
  for (  PlayerHandler playerHandler : playerController.getPlayerHandlerList()) {
    List<RoundEvent> roundEvents=playerHandler.getRoundEvents();
    int collectedPoints=0;
    for (    RoundEvent roundEvent : roundEvents) {
switch (roundEvent) {
case DIED:
        deadPlayer.add(playerHandler);
      break;
case MOVED:
    playerHandler.moveToNextPosition();
  break;
case CONFUSED:
collectedPoints++;
break;
case COLLISION_WITH_LEVEL:
collectedPoints--;
break;
case BIT_HIMSELF:
collectedPoints--;
break;
case BIT_AGENT:
if (!playerHandler.isGhostMode()) {
collectedPoints++;
}
break;
case BIT_BY_PLAYER:
if (!playerHandler.isGhostMode()) {
collectedPoints--;
}
break;
case CONSUMED_POINT:
collectedPoints++;
break;
}
}
if (collectedPoints <= 0) {
playerHandler.penalty();
if (collectedPoints <= -1) {
playerHandler.penalty();
}
}
}
for (PlayerHandler dead : deadPlayer) {
playerController.getPlayerHandlerList().remove(dead);
UiState.getINSTANCE().rip(dead.getPlayerName());
}
level.spreadPoints();
for (PlayerHandler playerHandler : playerController.getPlayerHandlerList()) {
updateRoundForPlayer(playerHandler);
this.playerController.updatePlayerState(new GlobalGameState());
}
for (PlayerHandler playerHandler : playerController.getPlayerHandlerList()) {
playerHandler.endround();
}
}","public void gameLoop(){
  GlobalGameState.countMoves++;
  UiState.getINSTANCE().setRoundsRemaining(GlobalGameState.movesRemaining());
  List<PlayerHandler> winner=getWinner();
  if (winner.size() > 0) {
    gameOver=true;
    return;
  }
  Map<PlayerHandler,PlayerChoice> playerStatus=this.playerController.getPlayerStatus();
  for (  PlayerHandler playerHandler : playerStatus.keySet()) {
    PlayerChoice playerChoice=playerStatus.get(playerHandler);
    validateEvents(playerHandler,playerChoice);
  }
  playerStatus.clear();
  List<PlayerHandler> deadPlayer=new ArrayList<PlayerHandler>();
  for (  PlayerHandler playerHandler : playerController.getPlayerHandlerList()) {
    List<RoundEvent> roundEvents=playerHandler.getRoundEvents();
    int collectedPoints=0;
    for (    RoundEvent roundEvent : roundEvents) {
switch (roundEvent) {
case DIED:
        deadPlayer.add(playerHandler);
      break;
case MOVED:
    playerHandler.moveToNextPosition();
  break;
case CONFUSED:
collectedPoints++;
break;
case COLLISION_WITH_LEVEL:
collectedPoints--;
break;
case BIT_HIMSELF:
collectedPoints--;
break;
case BIT_AGENT:
if (!playerHandler.isGhostMode()) {
collectedPoints++;
}
break;
case BIT_BY_PLAYER:
if (!playerHandler.isGhostMode()) {
collectedPoints--;
}
break;
case CONSUMED_POINT:
collectedPoints++;
break;
}
}
if (collectedPoints <= 0) {
playerHandler.penalty();
if (collectedPoints <= -1) {
playerHandler.penalty();
}
}
}
for (PlayerHandler dead : deadPlayer) {
playerController.getPlayerHandlerList().remove(dead);
UiState.getINSTANCE().rip(dead.getPlayerName());
}
level.spreadPoints();
for (PlayerHandler playerHandler : playerController.getPlayerHandlerList()) {
updateRoundForPlayer(playerHandler);
this.playerController.updatePlayerState(new GlobalGameState());
}
for (PlayerHandler playerHandler : playerController.getPlayerHandlerList()) {
playerHandler.endRound();
}
}"
40174,"public void gameLoop(){
  for (  Agent agent : agents) {
    agent.updatePlayerState();
  }
  this.playerController.updatePlayerState(new GlobalGameState());
  for (  Agent agent : agents) {
    agent.generateMove();
  }
  Map<PlayerHandler,AgentChoice> playerStatus=this.playerController.getPlayerStatus();
  for (  PlayerHandler playerHandler : playerStatus.keySet()) {
  }
  for (  Agent agent : agents) {
    validateEvents(agent);
  }
  for (  Agent agent : agents) {
    List<GameEvent> gameEvents=agent.getGameEvents();
    int collectedPoints=0;
    for (    GameEvent gameEvent : gameEvents) {
switch (gameEvent) {
case DIEDED:
        agent.kill();
      deadAgents.add(agent);
    break;
case MOVED:
  agent.moveToNextPosition();
break;
case COLLISION_WITH_LEVEL:
agent.setConfused(true);
collectedPoints--;
break;
case HIT_HIMSELF:
collectedPoints--;
agent.setGhostMode();
break;
case HIT_AGENT:
agent.setConfused(true);
collectedPoints++;
break;
case HIT_BY_AGENT:
if (!agent.isGhostMode()) {
collectedPoints--;
}
agent.setGhostMode();
break;
case CONSUMED_POINT:
collectedPoints++;
break;
}
}
if (collectedPoints <= 0) {
agent.removeTail();
if (collectedPoints <= -1) {
agent.removeTail();
}
}
agent.endround();
}
for (Agent agent : deadAgents) {
agents.remove(agent);
}
level.spreadPoints();
}","public void gameLoop(){
  for (  Agent agent : agents) {
    agent.updatePlayerState();
  }
  this.playerController.updatePlayerState(new GlobalGameState());
  for (  Agent agent : agents) {
    agent.generateMove();
  }
  Map<PlayerHandler,AgentChoice> playerStatus=this.playerController.getPlayerStatus();
  for (  PlayerHandler playerHandler : playerStatus.keySet()) {
    playerHandler.getGameObject();
    AgentChoice agentChoice=playerStatus.get(playerHandler);
    boolean hasChosen=agentChoice.isHasChosen();
    AgentMovement agentMovement=agentChoice.getAgentMovement();
  }
  for (  Agent agent : agents) {
    validateEvents(agent);
  }
  for (  Agent agent : agents) {
    List<GameEvent> gameEvents=agent.getGameEvents();
    int collectedPoints=0;
    for (    GameEvent gameEvent : gameEvents) {
switch (gameEvent) {
case DIEDED:
        agent.kill();
      deadAgents.add(agent);
    break;
case MOVED:
  agent.moveToNextPosition();
break;
case COLLISION_WITH_LEVEL:
agent.setConfused(true);
collectedPoints--;
break;
case HIT_HIMSELF:
collectedPoints--;
agent.setGhostMode();
break;
case HIT_AGENT:
agent.setConfused(true);
collectedPoints++;
break;
case HIT_BY_AGENT:
if (!agent.isGhostMode()) {
collectedPoints--;
}
agent.setGhostMode();
break;
case CONSUMED_POINT:
collectedPoints++;
break;
}
}
if (collectedPoints <= 0) {
agent.removeTail();
if (collectedPoints <= -1) {
agent.removeTail();
}
}
agent.endround();
}
for (Agent agent : deadAgents) {
agents.remove(agent);
}
level.spreadPoints();
}"
40175,"public GameMaster(Level level){
  this.level=level;
  brainySnakePlayers.add(playerOne);
  brainySnakePlayers.add(playerTwo);
  brainySnakePlayers.add(playerThree);
  brainySnakePlayers.add(playerFour);
  Map<Orientation,Snake> brainySnakePlayersUiModel=new HashMap<Orientation,Snake>();
  brainySnakePlayersUiModel.put(UP,level.createStartingGameObject(UP,Config.INITIAL_PLAYER_LENGTH));
  brainySnakePlayersUiModel.put(DOWN,level.createStartingGameObject(DOWN,Config.INITIAL_PLAYER_LENGTH));
  brainySnakePlayersUiModel.put(RIGHT,level.createStartingGameObject(RIGHT,Config.INITIAL_PLAYER_LENGTH));
  brainySnakePlayersUiModel.put(LEFT,level.createStartingGameObject(LEFT,Config.INITIAL_PLAYER_LENGTH));
  playerController=new PlayerController(brainySnakePlayers,brainySnakePlayersUiModel);
}","public GameMaster(Level level){
  this.level=level;
  brainySnakePlayers.add(playerOne);
  Map<Orientation,Snake> brainySnakePlayersUiModel=new HashMap<Orientation,Snake>();
  brainySnakePlayersUiModel.put(UP,level.createStartingGameObject(UP,Config.INITIAL_PLAYER_LENGTH));
  playerController=new PlayerController(brainySnakePlayers,brainySnakePlayersUiModel);
}"
40176,"private void validateEvents(PlayerHandler playerHandler,PlayerChoice playerChoice){
  List<RoundEvents> roundEvents=playerHandler.getRoundEvents();
  if (playerHandler.getSnake().countPoints() <= 1) {
    roundEvents.add(DIEDED);
    return;
  }
  Point2D nextPosition=playerHandler.getNextPosition();
  if (level.checkCollision(nextPosition.x,nextPosition.y)) {
    roundEvents.add(COLLISION_WITH_LEVEL);
    return;
  }
  if (playerChoice.isHasChosen() && playerHandler.isOrientationValid(playerChoice.getOrientation())) {
    playerHandler.setCurrentOrientation(playerChoice.getOrientation());
    roundEvents.add(MOVED);
  }
  for (  PlayerHandler player : playerController.getPlayerHandlerList()) {
    if (playerHandler.gotBitten(nextPosition)) {
      if (player.equals(playerHandler)) {
        roundEvents.add(BIT_HIMSELF);
      }
 else {
        roundEvents.add(BIT_AGENT);
        player.getRoundEvents().add(BIT_BY_AGENT);
      }
    }
  }
  if (level.tryConsumePoint(nextPosition)) {
    roundEvents.add(CONSUMED_POINT);
  }
}","private void validateEvents(PlayerHandler playerHandler,PlayerChoice playerChoice){
  List<RoundEvents> roundEvents=playerHandler.getRoundEvents();
  if (playerHandler.isDead() || playerHandler.getSnake().countPoints() <= 1) {
    roundEvents.add(DIEDED);
    return;
  }
  Point2D nextPosition=playerHandler.getNextPosition();
  if (level.checkCollision(nextPosition.x,nextPosition.y)) {
    roundEvents.add(COLLISION_WITH_LEVEL);
    return;
  }
  if (playerChoice.isHasChosen() && playerHandler.isOrientationValid(playerChoice.getOrientation())) {
    playerHandler.setCurrentOrientation(playerChoice.getOrientation());
    roundEvents.add(MOVED);
  }
 else {
    roundEvents.add(CONFUSED);
  }
  for (  PlayerHandler player : playerController.getPlayerHandlerList()) {
    if (playerHandler.gotBitten(nextPosition)) {
      if (player.equals(playerHandler)) {
        roundEvents.add(BIT_HIMSELF);
      }
 else {
        roundEvents.add(BIT_AGENT);
        player.getRoundEvents().add(BIT_BY_AGENT);
      }
    }
  }
  if (level.tryConsumePoint(nextPosition)) {
    roundEvents.add(CONSUMED_POINT);
  }
}"
40177,"public void gameLoop(){
  this.playerController.updatePlayerState(new GlobalGameState());
  Map<PlayerHandler,PlayerChoice> playerStatus=this.playerController.getPlayerStatus();
  for (  PlayerHandler playerHandler : playerStatus.keySet()) {
    PlayerChoice playerChoice=playerStatus.get(playerHandler);
    validateEvents(playerHandler,playerChoice);
  }
  List<PlayerHandler> deadPlayer=new ArrayList<PlayerHandler>();
  for (  PlayerHandler playerHandler : playerController.getPlayerHandlerList()) {
    List<RoundEvents> roundEvents=playerHandler.getRoundEvents();
    int collectedPoints=0;
    for (    RoundEvents roundEvent : roundEvents) {
switch (roundEvent) {
case DIEDED:
        playerHandler.kill();
      deadPlayer.add(playerHandler);
    break;
case MOVED:
  playerHandler.moveToNextPosition();
break;
case COLLISION_WITH_LEVEL:
playerHandler.setConfused(true);
collectedPoints--;
break;
case BIT_HIMSELF:
collectedPoints--;
playerHandler.setGhostMode();
break;
case BIT_AGENT:
playerHandler.setGhostMode();
collectedPoints++;
break;
case BIT_BY_AGENT:
if (!playerHandler.isGhostMode()) {
collectedPoints--;
}
break;
case CONSUMED_POINT:
collectedPoints++;
break;
}
}
if (collectedPoints < 0) {
}
playerHandler.endround();
}
for (PlayerHandler dead : deadPlayer) {
playerController.getPlayerHandlerList().remove(dead);
}
level.spreadPoints();
}","public void gameLoop(){
  this.playerController.updatePlayerState(new GlobalGameState());
  Map<PlayerHandler,PlayerChoice> playerStatus=this.playerController.getPlayerStatus();
  for (  PlayerHandler playerHandler : playerStatus.keySet()) {
    PlayerChoice playerChoice=playerStatus.get(playerHandler);
    validateEvents(playerHandler,playerChoice);
  }
  List<PlayerHandler> deadPlayer=new ArrayList<PlayerHandler>();
  for (  PlayerHandler playerHandler : playerController.getPlayerHandlerList()) {
    List<RoundEvents> roundEvents=playerHandler.getRoundEvents();
    int collectedPoints=0;
    for (    RoundEvents roundEvent : roundEvents) {
switch (roundEvent) {
case DIEDED:
        playerHandler.kill();
      deadPlayer.add(playerHandler);
    break;
case MOVED:
  playerHandler.moveToNextPosition();
break;
case CONFUSED:
playerHandler.setConfused(true);
collectedPoints++;
break;
case COLLISION_WITH_LEVEL:
playerHandler.setConfused(true);
collectedPoints--;
break;
case BIT_HIMSELF:
collectedPoints--;
playerHandler.setGhostMode();
break;
case BIT_AGENT:
playerHandler.setGhostMode();
collectedPoints++;
break;
case BIT_BY_AGENT:
if (!playerHandler.isGhostMode()) {
collectedPoints--;
}
break;
case CONSUMED_POINT:
collectedPoints++;
break;
}
}
if (collectedPoints <= 0) {
playerHandler.penalty();
if (collectedPoints < -1) {
playerHandler.penalty();
}
}
playerHandler.endround();
playerHandler.update();
}
for (PlayerHandler dead : deadPlayer) {
playerController.getPlayerHandlerList().remove(dead);
}
level.spreadPoints();
}"
40178,"public void penalty(){
  snake.removeTail();
}","public void penalty(){
  if (snake.countPoints() <= 1) {
    dead=true;
  }
 else {
    snake.removeTail();
  }
}"
40179,"private void update(float delta){
  if (dead) {
    return;
  }
  if (ghostMode) {
    ghostMode();
  }
 else   if (confused) {
    blink();
  }
}","public void update(){
  if (dead) {
    return;
  }
  if (ghostMode) {
    ghostMode();
  }
 else   if (confused) {
    blink();
  }
}"
40180,"private void ghostMode(){
  if (ghostTime++ > Config.GHOST_TIME) {
    ghostTime=0;
    snake.setGhostMode();
    ghostMode=false;
  }
 else {
    snake.reset();
  }
}","private void ghostMode(){
  if (ghostTime++ > Config.GHOST_TIME) {
    ghostTime=0;
    snake.reset();
    ghostMode=false;
  }
 else {
    snake.setGhostMode();
  }
}"
40181,"private void blink(){
  blinked=!blinked;
  if (blinked) {
    snake.blink();
  }
 else {
    snake.reset();
  }
}","private void blink(){
  if (blinkTime++ > Config.BLINK_TIME) {
    blinkTime=0;
    blinked=!blinked;
  }
  if (blinked) {
    snake.reset();
  }
 else {
    snake.blink();
  }
}"
40182,"public void setGhostMode(){
  this.ghostMode=true;
}","public void setGhostMode(){
  ghostMode=true;
  ghostTime=0;
}"
40183,"public void setGhostMode(){
  head.getColor().a*=Config.GHOSTMODE_OPACITY;
  body.getColor().a*=Config.GHOSTMODE_OPACITY;
}","public void setGhostMode(){
  head.setColor(Config.GHOSTMODE_COLOR);
  body.setColor(Config.GHOSTMODE_COLOR);
}"
40184,"public void setColor(Color color){
  headColor=color;
  bodyColor=new Color(color);
  bodyColor.a=Config.SNAKE_BODY_LIGHTING;
}","public void setColor(Color color){
  headColor=new Color(color);
  bodyColor=new Color(color);
  bodyColor.a=Config.SNAKE_BODY_LIGHTING;
  head.setColor(headColor);
  body.setColor(bodyColor);
}"
40185,"public void setNextPosition(Point2D nextPosition){
  body.getPositions().removeLast();
  body.getPositions().addFirst(getHeadPosition());
  setHead(nextPosition);
}","public void setNextPosition(Point2D nextPosition){
  body.getPositions().addFirst(getHeadPosition());
  setHead(nextPosition);
}"
40186,"public void getNextMoveActions(){
  for (  Agent agent : agents) {
    agent.updatePlayerState();
  }
  for (  Agent agent : agents) {
    agent.generateMove();
  }
  for (  Agent agent : agents) {
    validateEvents(agent);
  }
  for (  Agent agent : agents) {
    List<GameEvent> gameEvents=agent.getGameEvents();
    int collectedPoints=0;
    for (    GameEvent gameEvent : gameEvents) {
switch (gameEvent) {
case MOVED:
        agent.moveToNextPosition();
      break;
case COLLISION_WITH_LEVEL:
    agent.setConfused(true);
  collectedPoints--;
case HIT_HIMSELF:
collectedPoints--;
agent.setGhostMode();
break;
case HIT_AGENT:
agent.setConfused(true);
collectedPoints++;
break;
case HIT_BY_AGENT:
if (!agent.isGhostMode()) {
collectedPoints--;
}
agent.setGhostMode();
break;
case CONSUMED_POINT:
collectedPoints++;
case DIEDED:
break;
}
}
if (collectedPoints <= 0) {
agent.removeTail();
}
agent.endround();
}
level.spreadPoints();
}","public void getNextMoveActions(){
  for (  Agent agent : agents) {
    agent.updatePlayerState();
  }
  for (  Agent agent : agents) {
    agent.generateMove();
  }
  for (  Agent agent : agents) {
    validateEvents(agent);
  }
  for (  Agent agent : agents) {
    List<GameEvent> gameEvents=agent.getGameEvents();
    int collectedPoints=0;
    for (    GameEvent gameEvent : gameEvents) {
switch (gameEvent) {
case MOVED:
        agent.moveToNextPosition();
      break;
case COLLISION_WITH_LEVEL:
    agent.setConfused(true);
  collectedPoints--;
break;
case HIT_HIMSELF:
collectedPoints--;
agent.setGhostMode();
break;
case HIT_AGENT:
agent.setConfused(true);
collectedPoints++;
break;
case HIT_BY_AGENT:
if (!agent.isGhostMode()) {
collectedPoints--;
}
agent.setGhostMode();
break;
case CONSUMED_POINT:
collectedPoints++;
case DIEDED:
break;
}
}
if (collectedPoints <= 0) {
agent.removeTail();
if (collectedPoints <= -1) {
agent.removeTail();
}
}
agent.endround();
}
level.spreadPoints();
}"
40187,"@After public void afterEach() throws InterruptedException {
  TimeUnit.SECONDS.sleep(10l);
}","@After public void afterEach() throws InterruptedException {
  TimeUnit.SECONDS.sleep(11l);
}"
40188,"@Bean final ListenerContainerLifecycleManager listenerContainerLifecycleManager(){
  ListenerContainerLifecycleManager listenerContainerLifecycleManager=new ListenerContainerLifecycleManager();
  listenerContainerLifecycleManager.setConnectionFactory(connectionFactory);
  return listenerContainerLifecycleManager;
}","@Bean ListenerContainerLifecycleManager listenerContainerLifecycleManager(){
  ListenerContainerLifecycleManager listenerContainerLifecycleManager=new ListenerContainerLifecycleManager();
  listenerContainerLifecycleManager.setConnectionFactory(connectionFactory);
  return listenerContainerLifecycleManager;
}"
40189,"@Bean final EventBus eventBus(final SimpleCluster simpleCluster){
  return new ClusteringEventBus(new DefaultClusterSelector(simpleCluster),terminal());
}","@Bean EventBus eventBus(final SimpleCluster simpleCluster){
  return new ClusteringEventBus(new DefaultClusterSelector(simpleCluster),terminal());
}"
40190,"@Bean final SpringAMQPConsumerConfiguration springAMQPConsumerConfiguration(){
  SpringAMQPConsumerConfiguration amqpConsumerConfiguration=new SpringAMQPConsumerConfiguration();
  amqpConsumerConfiguration.setTxSize(10);
  amqpConsumerConfiguration.setTransactionManager(transactionManager);
  amqpConsumerConfiguration.setQueueName(uniqueQueueName);
  return amqpConsumerConfiguration;
}","@Bean SpringAMQPConsumerConfiguration springAMQPConsumerConfiguration(){
  SpringAMQPConsumerConfiguration amqpConsumerConfiguration=new SpringAMQPConsumerConfiguration();
  amqpConsumerConfiguration.setTxSize(10);
  amqpConsumerConfiguration.setTransactionManager(transactionManager);
  amqpConsumerConfiguration.setQueueName(uniqueQueueName);
  return amqpConsumerConfiguration;
}"
40191,"@Bean final SimpleCluster simpleCluster(final SpringAMQPConsumerConfiguration springAMQPConsumerConfiguration){
  SimpleCluster simpleCluster=new SimpleCluster(uniqueQueueName);
  simpleCluster.getMetaData().setProperty(AMQP_CONFIG_KEY,springAMQPConsumerConfiguration);
  return simpleCluster;
}","@Bean SimpleCluster simpleCluster(final SpringAMQPConsumerConfiguration springAMQPConsumerConfiguration){
  SimpleCluster simpleCluster=new SimpleCluster(uniqueQueueName);
  simpleCluster.getMetaData().setProperty(AMQP_CONFIG_KEY,springAMQPConsumerConfiguration);
  return simpleCluster;
}"
40192,"@Bean final EventBusTerminal terminal(){
  SpringAMQPTerminal terminal=new SpringAMQPTerminal();
  terminal.setConnectionFactory(connectionFactory);
  terminal.setSerializer(axonJsonSerializer());
  terminal.setExchangeName(terminalName);
  terminal.setListenerContainerLifecycleManager(listenerContainerLifecycleManager());
  terminal.setDurable(true);
  terminal.setTransactional(true);
  return terminal;
}","@Bean EventBusTerminal terminal(){
  SpringAMQPTerminal terminal=new SpringAMQPTerminal();
  terminal.setConnectionFactory(connectionFactory);
  terminal.setSerializer(axonJsonSerializer());
  terminal.setExchangeName(terminalName);
  terminal.setListenerContainerLifecycleManager(listenerContainerLifecycleManager());
  terminal.setDurable(true);
  terminal.setTransactional(true);
  return terminal;
}"
40193,"@Bean final JacksonSerializer axonJsonSerializer(){
  return new JacksonSerializer();
}","@Bean JacksonSerializer axonJsonSerializer(){
  return new JacksonSerializer();
}"
40194,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public void add(@PathVariable(value=""String_Node_Str"") String id,@RequestParam(value=""String_Node_Str"",required=true) String description,HttpServletResponse response){
  CreateOrderCommand command=new CreateOrderCommand(id,description);
  commandGateway.sendAndWait(command);
  response.setStatus(HttpServletResponse.SC_CREATED);
  return;
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.POST) public void add(@PathVariable(value=""String_Node_Str"") String id,@RequestParam(value=""String_Node_Str"",required=true) String description,HttpServletResponse response){
  try {
    CreateOrderCommand command=new CreateOrderCommand(id,description);
    commandGateway.sendAndWait(command);
    response.setStatus(HttpServletResponse.SC_CREATED);
    return;
  }
 catch (  CommandExecutionException cex) {
    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
    if (null != cex.getCause()) {
      if (cex.getCause() instanceof ConcurrencyException) {
        response.setStatus(HttpServletResponse.SC_CONFLICT);
      }
    }
  }
}"
40195,"/** 
 * 发送服务器数据到统计网页
 */
private void postPlugin() throws IOException {
  final String pluginname=""String_Node_Str"";
  final String tmposarch=System.getProperty(""String_Node_Str"");
  final Map<String,Object> data=new HashMap();
  data.put(""String_Node_Str"",guid);
  data.put(""String_Node_Str"",Bukkit.getVersion());
  data.put(""String_Node_Str"",Bukkit.getServer().getPort());
  data.put(""String_Node_Str"",timer.getAverageTPS());
  data.put(""String_Node_Str"",KCauldron.getCurrentVersion());
  data.put(""String_Node_Str"",getOnlinePlayerNumber());
  data.put(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  data.put(""String_Node_Str"",tmposarch.equalsIgnoreCase(""String_Node_Str"") ? ""String_Node_Str"" : tmposarch);
  data.put(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  data.put(""String_Node_Str"",(Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1024 / 1024);
  data.put(""String_Node_Str"",Runtime.getRuntime().availableProcessors());
  data.put(""String_Node_Str"",Bukkit.getServer().getOnlineMode() ? 1 : 0);
  data.put(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  final String jsondata=""String_Node_Str"" + JSONValue.toJSONString(data);
  final String url=String.format(""String_Node_Str"",REVISION,URLEncoder.encode(pluginname,""String_Node_Str""));
  print(""String_Node_Str"" + pluginname + ""String_Node_Str"");
  print(""String_Node_Str"" + url);
  print(""String_Node_Str"" + jsondata);
  final JSONObject result=(JSONObject)JSONValue.parse(postData(url,jsondata));
  print(""String_Node_Str"" + pluginname + ""String_Node_Str""+ result.get(""String_Node_Str""));
}","/** 
 * 发送服务器数据到统计网页
 */
private void postPlugin() throws IOException {
  final String pluginname=""String_Node_Str"";
  final String tmposarch=System.getProperty(""String_Node_Str"");
  final Map<String,Object> data=new HashMap();
  data.put(""String_Node_Str"",guid);
  data.put(""String_Node_Str"",Bukkit.getVersion());
  data.put(""String_Node_Str"",Bukkit.getServer().getPort());
  data.put(""String_Node_Str"",FMLCommonHandler.instance().getMinecraftServerInstance().recentTps[1]);
  data.put(""String_Node_Str"",KCauldron.getCurrentVersion());
  data.put(""String_Node_Str"",getOnlinePlayerNumber());
  data.put(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  data.put(""String_Node_Str"",tmposarch.equalsIgnoreCase(""String_Node_Str"") ? ""String_Node_Str"" : tmposarch);
  data.put(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  data.put(""String_Node_Str"",(Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1024 / 1024);
  data.put(""String_Node_Str"",Runtime.getRuntime().availableProcessors());
  data.put(""String_Node_Str"",Bukkit.getServer().getOnlineMode() ? 1 : 0);
  data.put(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  final String jsondata=""String_Node_Str"" + JSONValue.toJSONString(data);
  final String url=String.format(""String_Node_Str"",REVISION,URLEncoder.encode(pluginname,""String_Node_Str""));
  print(""String_Node_Str"" + pluginname + ""String_Node_Str"");
  print(""String_Node_Str"" + url);
  print(""String_Node_Str"" + jsondata);
  final JSONObject result=(JSONObject)JSONValue.parse(postData(url,jsondata));
  print(""String_Node_Str"" + pluginname + ""String_Node_Str""+ result.get(""String_Node_Str""));
}"
40196,"/** 
 * 开启数据统计 这将会在异步执行
 * @return 是否运行成功.
 */
public boolean start(){
  if (task != null) {
    return true;
  }
  timer=new StatisticsTimer();
  MinecraftForge.EVENT_BUS.register(timer);
  task=new Thread(new Runnable(){
    @Override public void run(){
      try {
        postPlugin();
      }
 catch (      final Throwable e) {
        if (debug) {
          e.printStackTrace();
        }
      }
    }
  }
);
  task.start();
  return true;
}","/** 
 * 开启数据统计 这将会在异步执行
 * @return 是否运行成功.
 */
public boolean start(){
  if (task != null) {
    return true;
  }
  task=new Thread(new Runnable(){
    @Override public void run(){
      try {
        postPlugin();
      }
 catch (      final Throwable e) {
        if (debug) {
          e.printStackTrace();
        }
      }
    }
  }
);
  task.start();
  return true;
}"
40197,"@Override public void run(){
  long startTime=System.nanoTime();
  long timeSpent=(startTime - lastPoll) / 1000;
  if (history.size() > 10) {
    history.removeFirst();
  }
  double ttps=2.0E7D / (timeSpent == 0 ? 1 : timeSpent);
  if (ttps <= 21.0D) {
    history.add(ttps);
  }
  lastPoll=startTime;
}","@Override public void run(){
  try {
    postPlugin();
  }
 catch (  final Throwable e) {
    if (debug) {
      e.printStackTrace();
    }
  }
}"
40198,"public CraftLivingEntity(final CraftServer server,final net.minecraft.entity.EntityLivingBase entity){
  super(server,entity);
  updateEntity(entity);
  if (entity instanceof net.minecraft.entity.EntityLiving) {
    equipment=new CraftEntityEquipment(this);
  }
}","public CraftLivingEntity(final CraftServer server,final net.minecraft.entity.EntityLivingBase entity){
  super(server,entity);
  this.entityClass=entity.getClass();
  this.entityName=EntityRegistry.getCustomEntityTypeName(entityClass);
  if (entityName == null)   entityName=entity.getCommandSenderName();
  if (entity instanceof net.minecraft.entity.EntityLiving) {
    equipment=new CraftEntityEquipment(this);
  }
}"
40199,"@Override public void respawn(){
  if (getHealth() <= 0 && isOnline()) {
    server.getServer().getConfigurationManager().respawnPlayer(getHandle(),0,false);
  }
}","@Override public void respawn(){
  if (getHealth() <= 0 && isOnline()) {
    server.getServer().getConfigurationManager().respawnPlayer(getHandle(),0,TeleportCause.DEATH,null);
  }
}"
40200,"@Override public boolean teleport(Location location,PlayerTeleportEvent.TeleportCause cause){
  net.minecraft.entity.player.EntityPlayerMP entity=getHandle();
  if (getHealth() == 0 || entity.isDead) {
    return false;
  }
  if (entity.playerNetServerHandler == null || entity.playerNetServerHandler.isDisconnected()) {
    return false;
  }
  Location from=this.getLocation();
  Location to=location;
  PlayerTeleportEvent event=new PlayerTeleportEvent(this,from,to,cause);
  server.getPluginManager().callEvent(event);
  if (event.isCancelled()) {
    return false;
  }
  eject();
  leaveVehicle();
  from=event.getFrom();
  to=event.getTo();
  net.minecraft.world.WorldServer fromWorld=((CraftWorld)from.getWorld()).getHandle();
  net.minecraft.world.WorldServer toWorld=((CraftWorld)to.getWorld()).getHandle();
  if (getHandle().openContainer != getHandle().inventoryContainer) {
    getHandle().closeScreen();
  }
  if (fromWorld == toWorld) {
    entity.playerNetServerHandler.teleport(to);
  }
 else {
    server.getHandle().respawnPlayer(entity,toWorld.dimension,false,to,cause);
  }
  return true;
}","@Override public boolean teleport(Location location,PlayerTeleportEvent.TeleportCause cause){
  net.minecraft.entity.player.EntityPlayerMP entity=getHandle();
  if (getHealth() == 0 || entity.isDead) {
    return false;
  }
  if (entity.playerNetServerHandler == null || entity.playerNetServerHandler.isDisconnected()) {
    return false;
  }
  Location from=this.getLocation();
  Location to=location;
  PlayerTeleportEvent event=new PlayerTeleportEvent(this,from,to,cause);
  server.getPluginManager().callEvent(event);
  if (event.isCancelled()) {
    return false;
  }
  eject();
  leaveVehicle();
  from=event.getFrom();
  to=event.getTo();
  net.minecraft.world.WorldServer fromWorld=((CraftWorld)from.getWorld()).getHandle();
  net.minecraft.world.WorldServer toWorld=((CraftWorld)to.getWorld()).getHandle();
  if (getHandle().openContainer != getHandle().inventoryContainer) {
    getHandle().closeScreen();
  }
  if (fromWorld == toWorld) {
    entity.playerNetServerHandler.teleport(to);
  }
 else {
    server.getHandle().respawnPlayer(entity,toWorld.dimension,cause,to);
  }
  return true;
}"
40201,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  Log.i(""String_Node_Str"",""String_Node_Str"");
  Log.i(""String_Node_Str"",""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode+ ""String_Node_Str""+ ((null != data) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  if (REQUEST_IMAGE_CAPTURE == requestCode && RESULT_OK == resultCode) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    if (doUseImageDataFromIntent()) {
      Log.i(""String_Node_Str"",""String_Node_Str"");
      Bundle extras=data.getExtras();
      Log.i(""String_Node_Str"",""String_Node_Str"");
      Bitmap bmp=(Bitmap)extras.get(""String_Node_Str"");
      try {
        Log.i(""String_Node_Str"",""String_Node_Str"");
        FileOutputStream out=new FileOutputStream(mCurrentPhotoPath);
        Log.i(""String_Node_Str"",""String_Node_Str"");
        bmp.compress(Bitmap.CompressFormat.PNG,100,out);
        out.flush();
        out.close();
        Log.i(""String_Node_Str"",""String_Node_Str"");
      }
 catch (      Exception e) {
        Log.e(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
      }
    }
    resizePictureToThumbnail(mCurrentPhotoPath);
    Log.i(""String_Node_Str"",""String_Node_Str"");
    documentPartsDataSource.ensureConnectionIsOpen();
    documentPartsDataSource.createDocument(FileType.fromInt(selectedFileTypeId),mCurrentPhotoFilename);
    Log.i(""String_Node_Str"",""String_Node_Str"");
    refreshDocumentPartList();
  }
 else   if (RESULT_OK == resultCode && UCrop.REQUEST_CROP == requestCode) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    final Uri resultUri=UCrop.getOutput(data);
    resizePictureToThumbnail(resultUri.getPath());
    Log.i(""String_Node_Str"",""String_Node_Str"" + resultUri);
    refreshDocumentPartList();
  }
 else   if (UCrop.RESULT_ERROR == resultCode) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    final Throwable cropError=UCrop.getError(data);
    Log.i(""String_Node_Str"",""String_Node_Str"" + cropError.getLocalizedMessage());
  }
 else {
    Log.i(""String_Node_Str"",""String_Node_Str"" + resultCode + ""String_Node_Str""+ requestCode+ ""String_Node_Str"");
  }
  Log.i(""String_Node_Str"",""String_Node_Str"");
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  Log.i(""String_Node_Str"",""String_Node_Str"");
  Log.i(""String_Node_Str"",""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode+ ""String_Node_Str""+ ((null != data) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  if (REQUEST_IMAGE_CAPTURE == requestCode && RESULT_OK == resultCode) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    if (doUseImageDataFromIntent()) {
      Log.i(""String_Node_Str"",""String_Node_Str"");
      Bundle extras=data.getExtras();
      Log.i(""String_Node_Str"",""String_Node_Str"");
      Bitmap bmp=(Bitmap)extras.get(""String_Node_Str"");
      try {
        Log.i(""String_Node_Str"",""String_Node_Str"");
        FileOutputStream out=new FileOutputStream(mCurrentPhotoPath);
        Log.i(""String_Node_Str"",""String_Node_Str"");
        bmp.compress(Bitmap.CompressFormat.PNG,100,out);
        out.flush();
        out.close();
        Log.i(""String_Node_Str"",""String_Node_Str"");
      }
 catch (      Exception e) {
        Log.e(""String_Node_Str"",""String_Node_Str"" + e.getLocalizedMessage());
        Toast.makeText(getApplicationContext(),getString(R.string.camera_general_error),Toast.LENGTH_LONG).show();
        return;
      }
    }
    resizePictureToThumbnail(mCurrentPhotoPath);
    Log.i(""String_Node_Str"",""String_Node_Str"");
    documentPartsDataSource.ensureConnectionIsOpen();
    documentPartsDataSource.createDocument(FileType.fromInt(selectedFileTypeId),mCurrentPhotoFilename);
    Log.i(""String_Node_Str"",""String_Node_Str"");
    refreshDocumentPartList();
  }
 else   if (RESULT_OK == resultCode && UCrop.REQUEST_CROP == requestCode) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    final Uri resultUri=UCrop.getOutput(data);
    resizePictureToThumbnail(resultUri.getPath());
    Log.i(""String_Node_Str"",""String_Node_Str"" + resultUri);
    refreshDocumentPartList();
  }
 else   if (UCrop.RESULT_ERROR == resultCode) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    final Throwable cropError=UCrop.getError(data);
    Log.i(""String_Node_Str"",""String_Node_Str"" + cropError.getLocalizedMessage());
  }
 else {
    Log.i(""String_Node_Str"",""String_Node_Str"" + resultCode + ""String_Node_Str""+ requestCode+ ""String_Node_Str"");
  }
  Log.i(""String_Node_Str"",""String_Node_Str"");
}"
40202,"@Override public ClosableIterator<Tuple> executeBackendQuery(BackendQuery<IgniteQueryDescriptor> backendQuery,QueryParameters queryParameters,TupleContext tupleContext){
  IgniteCache<Object,BinaryObject> cache;
  if (backendQuery.getSingleEntityMetadataInformationOrNull() != null) {
    cache=provider.getEntityCache(backendQuery.getSingleEntityMetadataInformationOrNull().getEntityKeyMetadata());
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  QueryHints hints=(new QueryHints.Builder(queryParameters.getQueryHints())).build();
  SqlFieldsQuery sqlQuery=provider.createSqlFieldsQueryWithLog(backendQuery.getQuery().getSql(),hints,backendQuery.getQuery().getIndexedParameters() != null ? backendQuery.getQuery().getIndexedParameters().toArray() : null);
  Iterable<List<?>> result=executeWithHints(cache,sqlQuery,hints);
  if (backendQuery.getSingleEntityMetadataInformationOrNull() != null) {
    return new IgnitePortableFromProjectionResultCursor(result,queryParameters.getRowSelection(),backendQuery.getSingleEntityMetadataInformationOrNull().getEntityKeyMetadata());
  }
 else   if (backendQuery.getQuery().isHasScalar()) {
    throw new NotYetImplementedException();
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
}","@Override public ClosableIterator<Tuple> executeBackendQuery(BackendQuery<IgniteQueryDescriptor> backendQuery,QueryParameters queryParameters,TupleContext tupleContext){
  IgniteCache<Object,BinaryObject> cache;
  if (backendQuery.getSingleEntityMetadataInformationOrNull() != null) {
    cache=provider.getEntityCache(backendQuery.getSingleEntityMetadataInformationOrNull().getEntityKeyMetadata());
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  QueryHints hints=(new QueryHints.Builder(null)).build();
  SqlFieldsQuery sqlQuery=provider.createSqlFieldsQueryWithLog(backendQuery.getQuery().getSql(),hints,backendQuery.getQuery().getIndexedParameters() != null ? backendQuery.getQuery().getIndexedParameters().toArray() : null);
  Iterable<List<?>> result=executeWithHints(cache,sqlQuery,hints);
  if (backendQuery.getSingleEntityMetadataInformationOrNull() != null) {
    return new IgnitePortableFromProjectionResultCursor(result,queryParameters.getRowSelection(),backendQuery.getSingleEntityMetadataInformationOrNull().getEntityKeyMetadata());
  }
 else   if (backendQuery.getQuery().isHasScalar()) {
    throw new NotYetImplementedException();
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
}"
40203,"private static Map<String,Object> collectProperties(RemoteNeo4jAssociationPropertiesRow row,AssociationKey associationKey,AssociatedEntityKeyMetadata associatedEntityKeyMetadata){
  Map<String,Object> properties=new HashMap<String,Object>();
  String[] rowKeyColumnNames=associationKey.getMetadata().getRowKeyColumnNames();
  Map<String,Object> relationship=row.getRelationship();
  Map<String,Object> ownerNode=row.getOwnerNode();
  Map<String,Object> targetNode=row.getTargetNode();
  for (int i=0; i < rowKeyColumnNames.length; i++) {
    if (relationship.containsKey(rowKeyColumnNames[i])) {
      properties.put(rowKeyColumnNames[i],relationship.get(rowKeyColumnNames[i]));
    }
  }
  for (  String associationColumn : associatedEntityKeyMetadata.getAssociationKeyColumns()) {
    String targetColumnName=associatedEntityKeyMetadata.getCorrespondingEntityKeyColumn(associationColumn);
    if (isPartOfEmbedded(targetColumnName)) {
      String collectionRole=associationKey.getMetadata().getCollectionRole();
      if (targetColumnName.equals(collectionRole)) {
        targetColumnName=targetColumnName.substring(targetColumnName.lastIndexOf(""String_Node_Str"") + 1);
        if (targetNode.containsKey(targetColumnName)) {
          properties.put(associationColumn,targetNode.get(targetColumnName));
        }
      }
 else       if (targetNode.containsKey(targetColumnName)) {
        properties.put(associationColumn,targetNode.get(targetColumnName));
      }
 else {
        if (targetNode.containsKey(targetColumnName)) {
          properties.put(associationColumn,targetNode.get(targetColumnName));
        }
      }
    }
 else {
      if (targetNode.containsKey(targetColumnName)) {
        properties.put(associationColumn,targetNode.get(targetColumnName));
      }
    }
  }
  for (int i=0; i < associationKey.getColumnNames().length; i++) {
    String key=associationKey.getEntityKey().getColumnNames()[i];
    if (ownerNode.containsKey(key)) {
      properties.put(associationKey.getColumnNames()[i],ownerNode.get(key));
    }
  }
  return properties;
}","private static Map<String,Object> collectProperties(RemoteNeo4jAssociationPropertiesRow row,AssociationKey associationKey,AssociatedEntityKeyMetadata associatedEntityKeyMetadata){
  Map<String,Object> properties=new HashMap<String,Object>();
  String[] rowKeyColumnNames=associationKey.getMetadata().getRowKeyColumnNames();
  Map<String,Object> relationship=row.getRelationship();
  Map<String,Object> ownerNode=row.getOwnerNode();
  Map<String,Object> targetNode=row.getTargetNode();
  for (int i=0; i < rowKeyColumnNames.length; i++) {
    if (relationship.containsKey(rowKeyColumnNames[i])) {
      properties.put(rowKeyColumnNames[i],relationship.get(rowKeyColumnNames[i]));
    }
  }
  for (  String associationColumn : associatedEntityKeyMetadata.getAssociationKeyColumns()) {
    String targetColumnName=associatedEntityKeyMetadata.getCorrespondingEntityKeyColumn(associationColumn);
    if (isPartOfEmbedded(targetColumnName)) {
      String collectionRole=associationKey.getMetadata().getCollectionRole();
      if (targetColumnName.equals(collectionRole)) {
        targetColumnName=targetColumnName.substring(targetColumnName.lastIndexOf(""String_Node_Str"") + 1);
        if (targetNode.containsKey(targetColumnName)) {
          properties.put(associationColumn,targetNode.get(targetColumnName));
        }
      }
 else       if (targetNode.containsKey(targetColumnName)) {
        properties.put(associationColumn,targetNode.get(targetColumnName));
      }
      if (targetColumnName.startsWith(collectionRole)) {
        targetColumnName=targetColumnName.substring(collectionRole.length() + 1);
        if (targetNode.containsKey(targetColumnName)) {
          properties.put(associationColumn,targetNode.get(targetColumnName));
        }
      }
 else {
        if (targetNode.containsKey(targetColumnName)) {
          properties.put(associationColumn,targetNode.get(targetColumnName));
        }
      }
    }
 else {
      if (targetNode.containsKey(targetColumnName)) {
        properties.put(associationColumn,targetNode.get(targetColumnName));
      }
    }
  }
  for (int i=0; i < associationKey.getColumnNames().length; i++) {
    String key=associationKey.getEntityKey().getColumnNames()[i];
    if (ownerNode.containsKey(key)) {
      properties.put(associationKey.getColumnNames()[i],ownerNode.get(key));
    }
  }
  return properties;
}"
40204,"private static Map<String,Object> collectProperties(HttpNeo4jClient client,HttpNeo4jAssociationQueries queries,RemoteNeo4jAssociationPropertiesRow row,AssociationKey associationKey,AssociatedEntityKeyMetadata associatedEntityKeyMetadata){
  Map<String,Object> properties=new HashMap<String,Object>();
  String[] rowKeyColumnNames=associationKey.getMetadata().getRowKeyColumnNames();
  Map<String,Object> relationship=row.getRelationship();
  Map<String,Object> ownerNode=row.getOwnerNode();
  Map<String,Object> targetNode=row.getTargetNode();
  for (int i=0; i < rowKeyColumnNames.length; i++) {
    if (relationship.containsKey(rowKeyColumnNames[i])) {
      properties.put(rowKeyColumnNames[i],relationship.get(rowKeyColumnNames[i]));
    }
  }
  for (  String associationColumn : associatedEntityKeyMetadata.getAssociationKeyColumns()) {
    String targetColumnName=associatedEntityKeyMetadata.getCorrespondingEntityKeyColumn(associationColumn);
    if (isPartOfEmbedded(targetColumnName)) {
      String collectionRole=associationKey.getMetadata().getCollectionRole();
      if (targetColumnName.equals(collectionRole)) {
        targetColumnName=targetColumnName.substring(targetColumnName.lastIndexOf(""String_Node_Str"") + 1);
        if (targetNode.containsKey(targetColumnName)) {
          properties.put(associationColumn,targetNode.get(targetColumnName));
        }
      }
 else       if (targetNode.containsKey(targetColumnName)) {
        properties.put(associationColumn,targetNode.get(targetColumnName));
      }
 else {
        if (targetNode.containsKey(targetColumnName)) {
          properties.put(associationColumn,targetNode.get(targetColumnName));
        }
      }
    }
 else {
      if (targetNode.containsKey(targetColumnName)) {
        properties.put(associationColumn,targetNode.get(targetColumnName));
      }
    }
  }
  for (int i=0; i < associationKey.getColumnNames().length; i++) {
    String key=associationKey.getEntityKey().getColumnNames()[i];
    if (ownerNode.containsKey(key)) {
      properties.put(associationKey.getColumnNames()[i],ownerNode.get(key));
    }
  }
  return properties;
}","private static Map<String,Object> collectProperties(HttpNeo4jClient client,HttpNeo4jAssociationQueries queries,RemoteNeo4jAssociationPropertiesRow row,AssociationKey associationKey,AssociatedEntityKeyMetadata associatedEntityKeyMetadata){
  Map<String,Object> properties=new HashMap<String,Object>();
  String[] rowKeyColumnNames=associationKey.getMetadata().getRowKeyColumnNames();
  Map<String,Object> relationship=row.getRelationship();
  Map<String,Object> ownerNode=row.getOwnerNode();
  Map<String,Object> targetNode=row.getTargetNode();
  for (int i=0; i < rowKeyColumnNames.length; i++) {
    if (relationship.containsKey(rowKeyColumnNames[i])) {
      properties.put(rowKeyColumnNames[i],relationship.get(rowKeyColumnNames[i]));
    }
  }
  for (  String associationColumn : associatedEntityKeyMetadata.getAssociationKeyColumns()) {
    String targetColumnName=associatedEntityKeyMetadata.getCorrespondingEntityKeyColumn(associationColumn);
    if (isPartOfEmbedded(targetColumnName)) {
      String collectionRole=associationKey.getMetadata().getCollectionRole();
      if (targetColumnName.equals(collectionRole)) {
        targetColumnName=targetColumnName.substring(targetColumnName.lastIndexOf(""String_Node_Str"") + 1);
        if (targetNode.containsKey(targetColumnName)) {
          properties.put(associationColumn,targetNode.get(targetColumnName));
        }
      }
 else       if (targetNode.containsKey(targetColumnName)) {
        properties.put(associationColumn,targetNode.get(targetColumnName));
      }
      if (targetColumnName.startsWith(collectionRole)) {
        targetColumnName=targetColumnName.substring(collectionRole.length() + 1);
        if (targetNode.containsKey(targetColumnName)) {
          properties.put(associationColumn,targetNode.get(targetColumnName));
        }
      }
 else {
        if (targetNode.containsKey(targetColumnName)) {
          properties.put(associationColumn,targetNode.get(targetColumnName));
        }
      }
    }
 else {
      if (targetNode.containsKey(targetColumnName)) {
        properties.put(associationColumn,targetNode.get(targetColumnName));
      }
    }
  }
  for (int i=0; i < associationKey.getColumnNames().length; i++) {
    String key=associationKey.getEntityKey().getColumnNames()[i];
    if (ownerNode.containsKey(key)) {
      properties.put(associationKey.getColumnNames()[i],ownerNode.get(key));
    }
  }
  return properties;
}"
40205,"@Test public void testUnidirectionalManyToMany(){
  Session session=openSession();
  Transaction tx=session.beginTransaction();
  Student john=new Student(""String_Node_Str"",""String_Node_Str"");
  Student kate=new Student(""String_Node_Str"",""String_Node_Str"");
  Student mario=new Student(""String_Node_Str"",""String_Node_Str"");
  ClassRoom math=new ClassRoom(1L,""String_Node_Str"");
  math.getStudents().add(john);
  math.getStudents().add(mario);
  ClassRoom english=new ClassRoom(2L,""String_Node_Str"");
  english.getStudents().add(kate);
  math.getStudents().add(mario);
  persist(session,math,english,john,mario,kate);
  tx.commit();
  assertThat(getNumberOfEntities(sessionFactory)).isEqualTo(5);
  assertThat(getNumberOfAssociations(sessionFactory)).isEqualTo(expectedAssociationNumber());
  session.clear();
  delete(session,math,english,john,mario,kate);
  session.close();
  checkCleanCache();
}","@Test public void testUnidirectionalManyToMany(){
  Session session=openSession();
  Transaction tx=session.beginTransaction();
  Student john=new Student(""String_Node_Str"",""String_Node_Str"");
  Student kate=new Student(""String_Node_Str"",""String_Node_Str"");
  Student mario=new Student(""String_Node_Str"",""String_Node_Str"");
  ClassRoom math=new ClassRoom(1L,""String_Node_Str"");
  math.getStudents().add(john);
  math.getStudents().add(mario);
  ClassRoom english=new ClassRoom(2L,""String_Node_Str"");
  english.getStudents().add(kate);
  english.getStudents().add(mario);
  persist(session,math,english,john,mario,kate);
  tx.commit();
  assertThat(getNumberOfEntities(sessionFactory)).isEqualTo(5);
  assertThat(getNumberOfAssociations(sessionFactory)).isEqualTo(expectedAssociationNumber());
  session.clear();
  delete(session,math,english,john,mario,kate);
  session.close();
  checkCleanCache();
}"
40206,"/** 
 * Create a String representation of the identifier key in the format of   {@code Identifiers:(table name):(columnId)}.  {@see #IDENTIFIERS}
 * @param key Key for the identifier
 * @return byte array containing the key
 */
protected String identifierId(IdSourceKey key){
  String prefix=IDENTIFIERS + ""String_Node_Str"" + key.getTable();
  if (key.getColumnName() != null) {
    String entityId=key.getColumnValue();
    return prefix + ""String_Node_Str"" + entityId;
  }
  return prefix;
}","/** 
 * Create a String representation of the identifier key in the format of   {@code Identifiers:(table name):(columnId)}.  {@link #IDENTIFIERS}
 * @param key Key for the identifier
 * @return byte array containing the key
 */
protected String identifierId(IdSourceKey key){
  String prefix=IDENTIFIERS + ""String_Node_Str"" + key.getTable();
  if (key.getColumnName() != null) {
    String entityId=key.getColumnValue();
    return prefix + ""String_Node_Str"" + entityId;
  }
  return prefix;
}"
40207,"/** 
 * Create a String representation of the entity key in the format of   {@code Association:(table name):(columnId)}.  {@see #ASSOCIATIONS}
 * @param key Key of the association
 * @return byte array containing the key
 */
protected String associationId(AssociationKey key){
  String prefix=ASSOCIATIONS + ""String_Node_Str"" + key.getTable()+ ""String_Node_Str"";
  String entityId=keyToString(key.getColumnNames(),key.getColumnValues()) + ""String_Node_Str"" + key.getMetadata().getCollectionRole();
  return prefix + entityId;
}","/** 
 * Create a String representation of the entity key in the format of   {@code Association:(table name):(columnId)}.  {@link #ASSOCIATIONS}
 * @param key Key of the association
 * @return byte array containing the key
 */
protected String associationId(AssociationKey key){
  String prefix=ASSOCIATIONS + ""String_Node_Str"" + key.getTable()+ ""String_Node_Str"";
  String entityId=keyToString(key.getColumnNames(),key.getColumnValues()) + ""String_Node_Str"" + key.getMetadata().getCollectionRole();
  return prefix + entityId;
}"
40208,"/** 
 * Invoked by Jackson for any non-static property. <p/> A   {@link Map} creates an additional set of properties, one for each entry of the map.
 * @param name the property name
 * @param value the property value
 */
@JsonAnySetter @SuppressWarnings(""String_Node_Str"") public void set(String name,Object value){
  if (value instanceof Map) {
    setMapValue(name,(Map<String,Object>)value);
  }
 else {
    properties.put(name,value);
  }
}","/** 
 * Invoked by Jackson for any non-static property. <p> A   {@link Map} creates an additional set of properties, one for each entry of the map.
 * @param name the property name
 * @param value the property value
 */
@JsonAnySetter @SuppressWarnings(""String_Node_Str"") public void set(String name,Object value){
  if (value instanceof Map) {
    setMapValue(name,(Map<String,Object>)value);
  }
 else {
    properties.put(name,value);
  }
}"
40209,"@Test public void testOverriddenTypeInDialect() throws Exception {
  final EntityManagerFactory emf=Persistence.createEntityManagerFactory(""String_Node_Str"");
  final EntityManager em=emf.createEntityManager();
  em.getTransaction().begin();
  try {
    Poem poem=new Poem();
    poem.setName(""String_Node_Str"");
    poem.setPoemSocietyId(UUID.randomUUID());
    poem.setCreation(new Date());
    em.persist(poem);
    em.getTransaction().commit();
    assertThat(true).as(""String_Node_Str"").isFalse();
  }
 catch (  RollbackException e) {
    assertThat(Throwables.getRootCause(e)).hasMessage(""String_Node_Str"");
  }
 finally {
    try {
      em.getTransaction().rollback();
    }
 catch (    Exception e) {
    }
    em.close();
    dropSchemaAndDatabase(emf);
    emf.close();
  }
}","@Test public void testOverriddenTypeInDialect() throws Exception {
  final EntityManagerFactory emf=Persistence.createEntityManagerFactory(""String_Node_Str"");
  final EntityManager em=emf.createEntityManager();
  em.getTransaction().begin();
  try {
    Poem poem=new Poem();
    poem.setName(""String_Node_Str"");
    poem.setPoemSocietyId(UUID.randomUUID());
    poem.setCreation(new Date());
    em.persist(poem);
    em.getTransaction().commit();
    assertThat(true).as(""String_Node_Str"").isFalse();
  }
 catch (  RollbackException e) {
    assertThat(e.getCause().getMessage()).isEqualTo(""String_Node_Str"");
  }
 finally {
    try {
      em.getTransaction().rollback();
    }
 catch (    Exception e) {
    }
    em.close();
    dropSchemaAndDatabase(emf);
    emf.close();
  }
}"
40210,"@Test public void concurrentUpdateToAssociationShouldCauseException() throws Exception {
  Animal animal=createAndPersistAnimal();
  Zoo zoo=createAndPersistZoo(animal);
  doConcurrentUpdateToTheZoosAnimals();
  Transaction transaction=session.beginTransaction();
  zoo.getAnimals().remove(zoo.getAnimals().iterator().next());
  try {
    transaction.commit();
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertThat(Throwables.getRootCause(e)).isInstanceOf(StaleObjectStateException.class);
  }
}","@Test(expected=StaleObjectStateException.class) public void concurrentUpdateToAssociationShouldCauseException() throws Exception {
  Animal animal=createAndPersistAnimal();
  Zoo zoo=createAndPersistZoo(animal);
  doConcurrentUpdateToTheZoosAnimals();
  Transaction transaction=session.beginTransaction();
  zoo.getAnimals().remove(zoo.getAnimals().iterator().next());
  transaction.commit();
}"
40211,"@Test public void concurrentModificationShouldCauseException() throws Exception {
  Novel novel=createAndPersistNovel();
  String newRevision=doConcurrentUpdateToNovel();
  assertThat(newRevision).isNotEqualTo(novel.get_rev());
  Transaction transaction=session.beginTransaction();
  novel.setDescription(""String_Node_Str"");
  try {
    transaction.commit();
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertThat(Throwables.getRootCause(e)).isInstanceOf(StaleObjectStateException.class);
  }
}","@Test(expected=StaleObjectStateException.class) public void concurrentModificationShouldCauseException() throws Exception {
  Novel novel=createAndPersistNovel();
  String newRevision=doConcurrentUpdateToNovel();
  assertThat(newRevision).isNotEqualTo(novel.get_rev());
  Transaction transaction=session.beginTransaction();
  novel.setDescription(""String_Node_Str"");
  transaction.commit();
}"
40212,"@Test public void deletionAfterConcurrentModificationShouldCauseException() throws Exception {
  Novel novel=createAndPersistNovel();
  doConcurrentUpdateToNovel();
  Transaction transaction=session.beginTransaction();
  session.delete(novel);
  try {
    transaction.commit();
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertThat(Throwables.getRootCause(e)).isInstanceOf(StaleObjectStateException.class);
  }
}","@Test(expected=StaleObjectStateException.class) public void deletionAfterConcurrentModificationShouldCauseException() throws Exception {
  Novel novel=createAndPersistNovel();
  doConcurrentUpdateToNovel();
  Transaction transaction=session.beginTransaction();
  session.delete(novel);
  transaction.commit();
}"
40213,"@Test public void mergeAfterConcurrentModificationShouldCauseException() throws Exception {
  Novel novel=createAndPersistNovel();
  session.clear();
  doConcurrentUpdateToNovel();
  session.beginTransaction();
  try {
    novel=(Novel)session.merge(novel);
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertThat(Throwables.getRootCause(e)).isInstanceOf(StaleObjectStateException.class);
  }
}","@Test(expected=StaleObjectStateException.class) public void mergeAfterConcurrentModificationShouldCauseException() throws Exception {
  Novel novel=createAndPersistNovel();
  session.clear();
  doConcurrentUpdateToNovel();
  session.beginTransaction();
  novel=(Novel)session.merge(novel);
}"
40214,"@Test public void concurrentUpdateToObjectShouldCauseExceptionWhenUpdatingAssociation() throws Exception {
  Animal animal=createAndPersistAnimal();
  Zoo zoo=createAndPersistZoo(animal);
  doConcurrentUpdateToZoo();
  Transaction transaction=session.beginTransaction();
  zoo.getAnimals().remove(zoo.getAnimals().iterator().next());
  try {
    transaction.commit();
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertThat(Throwables.getRootCause(e)).isInstanceOf(StaleObjectStateException.class);
  }
}","@Test(expected=StaleObjectStateException.class) public void concurrentUpdateToObjectShouldCauseExceptionWhenUpdatingAssociation() throws Exception {
  Animal animal=createAndPersistAnimal();
  Zoo zoo=createAndPersistZoo(animal);
  doConcurrentUpdateToZoo();
  Transaction transaction=session.beginTransaction();
  zoo.getAnimals().remove(zoo.getAnimals().iterator().next());
  transaction.commit();
}"
40215,"@Test public void customColumnNameShouldBeUsableForRevisionProperty() throws Exception {
  Animal animal=createAndPersistAnimal();
  String newRevision=doConcurrentUpdateToAnimal();
  assertThat(newRevision).isNotEqualTo(animal.getRevision());
  Transaction transaction=session.beginTransaction();
  animal.setName(""String_Node_Str"");
  try {
    transaction.commit();
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertThat(Throwables.getRootCause(e)).isInstanceOf(StaleObjectStateException.class);
  }
}","@Test(expected=StaleObjectStateException.class) public void customColumnNameShouldBeUsableForRevisionProperty() throws Exception {
  Animal animal=createAndPersistAnimal();
  String newRevision=doConcurrentUpdateToAnimal();
  assertThat(newRevision).isNotEqualTo(animal.getRevision());
  Transaction transaction=session.beginTransaction();
  animal.setName(""String_Node_Str"");
  transaction.commit();
}"
40216,"@Test public void updateAfterConcurrentDeletionShouldCauseException() throws Exception {
  createAndPersistNovel();
  session.clear();
  Transaction transaction=session.beginTransaction();
  Novel novel=(Novel)session.get(Novel.class,""String_Node_Str"");
  concurrentlyDeleteNovel();
  novel.setPosition(2);
  try {
    transaction.commit();
    fail(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertThat(Throwables.getRootCause(e)).isInstanceOf(StaleObjectStateException.class);
  }
}","@Test(expected=StaleObjectStateException.class) public void updateAfterConcurrentDeletionShouldCauseException() throws Exception {
  createAndPersistNovel();
  session.clear();
  Transaction transaction=session.beginTransaction();
  Novel novel=(Novel)session.get(Novel.class,""String_Node_Str"");
  concurrentlyDeleteNovel();
  novel.setPosition(2);
  transaction.commit();
}"
40217,"/** 
 * Specifies how data (entity, associations, id source) should be mapped to caches.
 * @param cacheMapping the cache mapping type to be used when not configured on the entity or property level
 * @return this context, allowing for further fluent API invocations
 */
G cacheMapping(CacheMappingType cacheMappingType);","/** 
 * Specifies how data (entity, associations, id source) should be mapped to caches.
 * @param cacheMapping the cache mapping type to be used when not configured on the entity or property level
 * @return this context, allowing for further fluent API invocations
 */
G cacheMapping(CacheMappingType cacheMapping);"
40218,"/** 
 * Adds the given row to this association, using the given row key. The row must not be null, use the   {@link #remove()} operation instead.
 * @param key the key to store the row under
 * @param value the association row to store
 */
public void put(RowKey key,Tuple value){
  Contracts.assertNotNull(value,""String_Node_Str"");
  currentState.put(key,new AssociationOperation(key,value,PUT));
}","/** 
 * Adds the given row to this association, using the given row key. The row must not be null, use the   {@link org.hibernate.ogm.model.spi.Association#remove(org.hibernate.ogm.model.key.spi.RowKey)}operation instead.
 * @param key the key to store the row under
 * @param value the association row to store
 */
public void put(RowKey key,Tuple value){
  Contracts.assertNotNull(value,""String_Node_Str"");
  currentState.put(key,new AssociationOperation(key,value,PUT));
}"
40219,"/** 
 * Determine the name of the column in which we will store the generator persistent value. <p> Called during   {@link #configure configuration}.
 * @param params The params supplied in the generator config (plus some standard useful extras).
 * @param dialect The dialect in effect
 * @return The name of the value column
 * @see #getValueColumnName()
 */
protected String determineValueColumnName(Properties params,Dialect dialect){
  ObjectNameNormalizer normalizer=(ObjectNameNormalizer)params.get(PersistentIdentifierGenerator.IDENTIFIER_NORMALIZER);
  String name=ConfigurationHelper.getString(VALUE_COLUMN_PARAM,params,DEF_VALUE_COLUMN);
  return dialect.quote(normalizer.normalizeIdentifierQuoting(name));
}","/** 
 * Determine the name of the column in which we will store the generator persistent value. <p> Called during   {@link #configure configuration}.
 * @param params The params supplied in the generator config (plus some standard useful extras).
 * @param dialect The dialect in effect
 * @return The name of the value column
 */
protected String determineValueColumnName(Properties params,Dialect dialect){
  ObjectNameNormalizer normalizer=(ObjectNameNormalizer)params.get(PersistentIdentifierGenerator.IDENTIFIER_NORMALIZER);
  String name=ConfigurationHelper.getString(VALUE_COLUMN_PARAM,params,DEF_VALUE_COLUMN);
  return dialect.quote(normalizer.normalizeIdentifierQuoting(name));
}"
40220,"/** 
 * Determine the segment value corresponding to this generator instance. <p> Called during   {@link #configure configuration}.
 * @param params The params supplied in the generator config (plus some standard useful extras).
 * @return The name of the value column
 * @see #getSegmentValue()
 */
protected String determineSegmentValue(Properties params){
  String segmentValue=params.getProperty(SEGMENT_VALUE_PARAM);
  if (StringHelper.isEmpty(segmentValue)) {
    segmentValue=determineDefaultSegmentValue(params);
  }
  return segmentValue;
}","/** 
 * Determine the segment value corresponding to this generator instance. <p> Called during   {@link #configure configuration}.
 * @param params The params supplied in the generator config (plus some standard useful extras).
 * @return The name of the value column
 */
protected String determineSegmentValue(Properties params){
  String segmentValue=params.getProperty(SEGMENT_VALUE_PARAM);
  if (StringHelper.isEmpty(segmentValue)) {
    segmentValue=determineDefaultSegmentValue(params);
  }
  return segmentValue;
}"
40221,"/** 
 * Perform the binding.  Safe to assume that value is not null.
 * @param st The prepared statement
 * @param value The value to bind (not null).
 * @param index The index at which to bind
 * @param options The binding options
 * @throws java.sql.SQLException Indicates a problem binding to the prepared statement.
 */
protected abstract void doBind(Tuple resultset,X value,String[] names,WrapperOptions options);","/** 
 * Perform the binding.  Safe to assume that value is not null.
 */
protected abstract void doBind(Tuple resultset,X value,String[] names,WrapperOptions options);"
40222,"/** 
 * Update an object
 */
@Override public void update(final Serializable id,final Object[] fields,final int[] dirtyFields,final boolean hasDirtyCollection,final Object[] oldFields,final Object oldVersion,final Object object,final Object rowId,final SessionImplementor session) throws HibernateException {
  final boolean[] tableUpdateNeeded=getTableUpdateNeeded(dirtyFields,hasDirtyCollection);
  final int span=getTableSpan();
  final boolean[] propsToUpdate;
  EntityEntry entry=session.getPersistenceContext().getEntry(object);
  if (entry == null && !isMutable()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if ((dirtyFields != null)) {
    propsToUpdate=getPropertiesToUpdate(dirtyFields,hasDirtyCollection);
  }
 else   if (!isModifiableEntity(entry)) {
    propsToUpdate=getPropertiesToUpdate((dirtyFields == null ? ArrayHelper.EMPTY_INT_ARRAY : dirtyFields),hasDirtyCollection);
  }
 else {
    propsToUpdate=getPropertyUpdateability(object);
  }
  final SessionFactoryImplementor factory=getFactory();
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"" + MessageHelper.infoString(this,id,factory));
    if (isVersioned()) {
      log.trace(""String_Node_Str"" + oldVersion + ""String_Node_Str""+ fields[getVersionProperty()]);
    }
  }
  for (int j=0; j < span; j++) {
    if (tableUpdateNeeded[j]) {
      final EntityKey key=EntityKeyBuilder.fromPersister(this,id,session);
      Tuple resultset=gridDialect.getTuple(key,this.getTupleContext());
      final boolean useVersion=j == 0 && isVersioned();
      resultset=createNewResultSetIfNull(key,resultset,id,session);
      final EntityMetamodel entityMetamodel=getEntityMetamodel();
      if (useVersion && entityMetamodel.getOptimisticLockStyle() == OptimisticLockStyle.VERSION) {
        if (checkVersion(propsToUpdate)) {
          checkVersionAndRaiseSOSE(id,oldVersion,session,resultset);
        }
      }
 else       if (isAllOrDirtyOptLocking() && oldFields != null) {
        boolean[] versionability=getPropertyVersionability();
        boolean[] includeOldField=entityMetamodel.getOptimisticLockStyle() == OptimisticLockStyle.ALL ? getPropertyUpdateability() : propsToUpdate;
        GridType[] types=gridPropertyTypes;
        for (int i=0; i < entityMetamodel.getPropertySpan(); i++) {
          boolean include=includeOldField[i] && isPropertyOfTable(i,j) && versionability[i];
          if (include) {
            final GridType type=types[i];
            boolean[] settable=type.toColumnNullness(oldFields[i],factory);
            final Object snapshotValue=type.nullSafeGet(resultset,getPropertyColumnNames(i),session,object);
            if (!type.isEqual(oldFields,snapshotValue,factory)) {
              raiseStaleObjectStateException(id);
            }
          }
        }
      }
      removeFromInverseAssociations(resultset,j,id,session);
      dehydrate(resultset,fields,propsToUpdate,j,id,session);
      if (isVersioned() && optimisticLockingAwareGridDialect != null) {
        Tuple oldVersionTuple=new Tuple();
        oldVersionTuple.put(getVersionColumnName(),oldVersion);
        boolean success=optimisticLockingAwareGridDialect.updateTuple(key,oldVersionTuple,resultset,getTupleContext());
        if (!success) {
          raiseStaleObjectStateException(id);
        }
      }
 else {
        gridDialect.insertOrUpdateTuple(key,resultset,getTupleContext());
      }
      addToInverseAssociations(resultset,j,id,session);
    }
  }
}","/** 
 * Update an object
 */
@Override public void update(final Serializable id,final Object[] fields,final int[] dirtyFields,final boolean hasDirtyCollection,final Object[] oldFields,final Object oldVersion,final Object object,final Object rowId,final SessionImplementor session) throws HibernateException {
  final boolean[] tableUpdateNeeded=getTableUpdateNeeded(dirtyFields,hasDirtyCollection);
  final int span=getTableSpan();
  final boolean[] propsToUpdate;
  EntityEntry entry=session.getPersistenceContext().getEntry(object);
  if (entry == null && !isMutable()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if ((dirtyFields != null)) {
    propsToUpdate=getPropertiesToUpdate(dirtyFields,hasDirtyCollection);
  }
 else   if (!isModifiableEntity(entry)) {
    propsToUpdate=getPropertiesToUpdate((dirtyFields == null ? ArrayHelper.EMPTY_INT_ARRAY : dirtyFields),hasDirtyCollection);
  }
 else {
    propsToUpdate=getPropertyUpdateability(object);
  }
  final SessionFactoryImplementor factory=getFactory();
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"" + MessageHelper.infoString(this,id,factory));
    if (isVersioned()) {
      log.trace(""String_Node_Str"" + oldVersion + ""String_Node_Str""+ fields[getVersionProperty()]);
    }
  }
  for (int j=0; j < span; j++) {
    if (tableUpdateNeeded[j]) {
      final EntityKey key=EntityKeyBuilder.fromPersister(this,id,session);
      Tuple resultset=gridDialect.getTuple(key,this.getTupleContext());
      final boolean useVersion=j == 0 && isVersioned();
      resultset=createNewResultSetIfNull(key,resultset,id,session);
      final EntityMetamodel entityMetamodel=getEntityMetamodel();
      if (useVersion && entityMetamodel.getOptimisticLockStyle() == OptimisticLockStyle.VERSION) {
        if (checkVersion(propsToUpdate)) {
          checkVersionAndRaiseSOSE(id,oldVersion,session,resultset);
        }
      }
 else       if (isAllOrDirtyOptLocking() && oldFields != null) {
        boolean[] versionability=getPropertyVersionability();
        boolean[] includeOldField=entityMetamodel.getOptimisticLockStyle() == OptimisticLockStyle.ALL ? getPropertyUpdateability() : propsToUpdate;
        GridType[] types=gridPropertyTypes;
        for (int i=0; i < entityMetamodel.getPropertySpan(); i++) {
          boolean include=includeOldField[i] && isPropertyOfTable(i,j) && versionability[i];
          if (include) {
            final GridType type=types[i];
            boolean[] settable=type.toColumnNullness(oldFields[i],factory);
            final Object snapshotValue=type.nullSafeGet(resultset,getPropertyColumnNames(i),session,object);
            if (!type.isEqual(oldFields[i],snapshotValue,factory)) {
              raiseStaleObjectStateException(id);
            }
          }
        }
      }
      removeFromInverseAssociations(resultset,j,id,session);
      dehydrate(resultset,fields,propsToUpdate,j,id,session);
      if (isVersioned() && optimisticLockingAwareGridDialect != null) {
        Tuple oldVersionTuple=new Tuple();
        oldVersionTuple.put(getVersionColumnName(),oldVersion);
        boolean success=optimisticLockingAwareGridDialect.updateTuple(key,oldVersionTuple,resultset,getTupleContext());
        if (!success) {
          raiseStaleObjectStateException(id);
        }
      }
 else {
        gridDialect.insertOrUpdateTuple(key,resultset,getTupleContext());
      }
      addToInverseAssociations(resultset,j,id,session);
    }
  }
}"
40223,"@After public void cleanUp(){
  removePlanet();
}","@After public void cleanUp(){
  removePlanet();
  removePulsar();
}"
40224,"@Override protected Class<?>[] getAnnotatedClasses(){
  return new Class<?>[]{Planet.class,Galaxy.class};
}","@Override protected Class<?>[] getAnnotatedClasses(){
  return new Class<?>[]{Planet.class,Galaxy.class,Pulsar.class};
}"
40225,"private RowKey createRowKey(String tableName,String[] rowKeyColumnNames,Object[] rowKeyColumnValues){
  return new RowKey(tableName,rowKeyColumnNames,rowKeyColumnValues);
}","private RowKey createRowKey(String tableName,String[] rowKeyColumnNames,Object[] rowKeyColumnValues){
  return new RowKey(tableName,rowKeyColumnNames,rowKeyColumnValues,null);
}"
40226,"private AssociationKey createAssociationKey(EntityKey ownerEntityKey,String collectionRole,String tableName,String[] columnNames,Object[] columnValues,String[] rowKeyColumnNames){
  AssociationKeyMetadata associationKeyMetadata=new AssociationKeyMetadata(tableName,columnNames,rowKeyColumnNames);
  return new AssociationKey(associationKeyMetadata,columnValues,collectionRole,ownerEntityKey,AssociationKind.ASSOCIATION);
}","private AssociationKey createAssociationKey(EntityKey ownerEntityKey,String collectionRole,String tableName,String[] columnNames,Object[] columnValues,String[] rowKeyColumnNames){
  AssociationKeyMetadata associationKeyMetadata=new AssociationKeyMetadata(tableName,columnNames,rowKeyColumnNames,EMPTY_STRING_ARRAY,null,EMPTY_STRING_ARRAY);
  return new AssociationKey(associationKeyMetadata,columnValues,collectionRole,ownerEntityKey,AssociationKind.ASSOCIATION);
}"
40227,"@Override public Set<RowKey> getRowKeys(){
  Set<RowKey> rowKeys=new HashSet<RowKey>(associationMap.size());
  for (  SerializableKey key : associationMap.keySet()) {
    rowKeys.add(new RowKey(key.getTable(),key.getColumnNames(),key.getColumnValues()));
  }
  return rowKeys;
}","@Override public Set<RowKey> getRowKeys(){
  Set<RowKey> rowKeys=new HashSet<RowKey>(associationMap.size());
  for (  SerializableKey key : associationMap.keySet()) {
    rowKeys.add(new RowKey(key.getTable(),key.getColumnNames(),key.getColumnValues(),null));
  }
  return rowKeys;
}"
40228,"@Test public void shouldSerializeAndDeserializeRowKey() throws Exception {
  String[] columnNames={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Object[] values={123,""String_Node_Str"",456L};
  SerializableKey key=new SerializableKey(new RowKey(""String_Node_Str"",columnNames,values));
  byte[] bytes=marshall(key);
  SerializableKey unmarshalledKey=unmarshall(bytes);
  assertThat(unmarshalledKey.getClass()).isEqualTo(SerializableKey.class);
  assertThat(unmarshalledKey.getTable()).isEqualTo(key.getTable());
  assertThat(unmarshalledKey.getColumnNames()).isEqualTo(key.getColumnNames());
  assertThat(unmarshalledKey.getColumnValues()).isEqualTo(key.getColumnValues());
  assertTrue(key.equals(unmarshalledKey));
  assertTrue(unmarshalledKey.equals(key));
  assertThat(unmarshalledKey.hashCode()).isEqualTo(key.hashCode());
}","@Test public void shouldSerializeAndDeserializeRowKey() throws Exception {
  String[] columnNames={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Object[] values={123,""String_Node_Str"",456L};
  SerializableKey key=new SerializableKey(new RowKey(""String_Node_Str"",columnNames,values,null));
  byte[] bytes=marshall(key);
  SerializableKey unmarshalledKey=unmarshall(bytes);
  assertThat(unmarshalledKey.getClass()).isEqualTo(SerializableKey.class);
  assertThat(unmarshalledKey.getTable()).isEqualTo(key.getTable());
  assertThat(unmarshalledKey.getColumnNames()).isEqualTo(key.getColumnNames());
  assertThat(unmarshalledKey.getColumnValues()).isEqualTo(key.getColumnValues());
  assertTrue(key.equals(unmarshalledKey));
  assertTrue(unmarshalledKey.equals(key));
  assertThat(unmarshalledKey.hashCode()).isEqualTo(key.hashCode());
}"
40229,"@Override public AssociationKey readObject(ObjectInput input) throws IOException, ClassNotFoundException {
  input.readInt();
  String tableName=input.readUTF();
  String[] columnNames=(String[])input.readObject();
  Object[] values=(Object[])input.readObject();
  AssociationKeyMetadata associationKeyMetadata=new AssociationKeyMetadata(tableName,columnNames,null);
  return new AssociationKey(associationKeyMetadata,values,null,null,null);
}","@Override public AssociationKey readObject(ObjectInput input) throws IOException, ClassNotFoundException {
  input.readInt();
  String tableName=input.readUTF();
  String[] columnNames=(String[])input.readObject();
  Object[] values=(Object[])input.readObject();
  AssociationKeyMetadata associationKeyMetadata=new AssociationKeyMetadata(tableName,columnNames,null,null,null,null);
  return new AssociationKey(associationKeyMetadata,values,null,null,null);
}"
40230,"@Override public RowKey readObject(ObjectInput input) throws IOException, ClassNotFoundException {
  input.readInt();
  String tableName=input.readUTF();
  String[] columnNames=(String[])input.readObject();
  Object[] values=(Object[])input.readObject();
  return new RowKey(tableName,columnNames,values);
}","@Override public RowKey readObject(ObjectInput input) throws IOException, ClassNotFoundException {
  input.readInt();
  String tableName=input.readUTF();
  String[] columnNames=(String[])input.readObject();
  Object[] values=(Object[])input.readObject();
  return new RowKey(tableName,columnNames,values,null);
}"
40231,"@Test public void shouldSerializeAndDeserializeAssociationKey() throws Exception {
  String[] columnNames={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  AssociationKeyMetadata keyMetadata=new AssociationKeyMetadata(""String_Node_Str"",columnNames,null);
  Object[] values={123,""String_Node_Str"",456L};
  AssociationKey key=new AssociationKey(keyMetadata,values,null,null,null);
  byte[] bytes=externalizerHelper.marshall(key);
  Key unmarshalledKey=externalizerHelper.unmarshall(bytes);
  assertThat(unmarshalledKey.getClass()).isEqualTo(AssociationKey.class);
  assertThat(unmarshalledKey.getTable()).isEqualTo(key.getTable());
  assertThat(unmarshalledKey.getColumnNames()).isEqualTo(key.getColumnNames());
  assertThat(unmarshalledKey.getColumnValues()).isEqualTo(key.getColumnValues());
  assertTrue(key.equals(unmarshalledKey));
  assertTrue(unmarshalledKey.equals(key));
  assertThat(unmarshalledKey.hashCode()).isEqualTo(key.hashCode());
}","@Test public void shouldSerializeAndDeserializeAssociationKey() throws Exception {
  String[] columnNames={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  AssociationKeyMetadata keyMetadata=new AssociationKeyMetadata(""String_Node_Str"",columnNames,null,null,null,null);
  Object[] values={123,""String_Node_Str"",456L};
  AssociationKey key=new AssociationKey(keyMetadata,values,null,null,null);
  byte[] bytes=externalizerHelper.marshall(key);
  Key unmarshalledKey=externalizerHelper.unmarshall(bytes);
  assertThat(unmarshalledKey.getClass()).isEqualTo(AssociationKey.class);
  assertThat(unmarshalledKey.getTable()).isEqualTo(key.getTable());
  assertThat(unmarshalledKey.getColumnNames()).isEqualTo(key.getColumnNames());
  assertThat(unmarshalledKey.getColumnValues()).isEqualTo(key.getColumnValues());
  assertTrue(key.equals(unmarshalledKey));
  assertTrue(unmarshalledKey.equals(key));
  assertThat(unmarshalledKey.hashCode()).isEqualTo(key.hashCode());
}"
40232,"@Test public void shouldWriteAndReadAssociationInClusteredMode() throws Exception {
  String[] columnNames={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  AssociationKeyMetadata keyMetadata=new AssociationKeyMetadata(""String_Node_Str"",columnNames,null);
  Object[] values={123,""String_Node_Str"",456L};
  AssociationKey key=new AssociationKey(keyMetadata,values,null,null,null);
  RowKey rowKey=new RowKey(""String_Node_Str"",columnNames,values);
  Tuple tuple=new Tuple();
  tuple.put(""String_Node_Str"",""String_Node_Str"");
  Association association=dialect1.createAssociation(key,null);
  association.put(rowKey,tuple);
  dialect1.updateAssociation(association,key,null);
  Association readAssociation=dialect2.getAssociation(key,null);
  Tuple readKey=readAssociation.get(rowKey);
  assertThat(readKey).isNotNull();
  assertThat(readKey.get(""String_Node_Str"")).isEqualTo(""String_Node_Str"");
}","@Test public void shouldWriteAndReadAssociationInClusteredMode() throws Exception {
  String[] columnNames={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  AssociationKeyMetadata keyMetadata=new AssociationKeyMetadata(""String_Node_Str"",columnNames,null,null,null,null);
  Object[] values={123,""String_Node_Str"",456L};
  AssociationKey key=new AssociationKey(keyMetadata,values,null,null,null);
  RowKey rowKey=new RowKey(""String_Node_Str"",columnNames,values,null);
  Tuple tuple=new Tuple();
  tuple.put(""String_Node_Str"",""String_Node_Str"");
  Association association=dialect1.createAssociation(key,null);
  association.put(rowKey,tuple);
  dialect1.updateAssociation(association,key,null);
  Association readAssociation=dialect2.getAssociation(key,null);
  Tuple readKey=readAssociation.get(rowKey);
  assertThat(readKey).isNotNull();
  assertThat(readKey.get(""String_Node_Str"")).isEqualTo(""String_Node_Str"");
}"
40233,"@Test public void shouldSerializeAndDeserializeRowKey() throws Exception {
  String[] columnNames={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Object[] values={123,""String_Node_Str"",456L};
  RowKey key=new RowKey(""String_Node_Str"",columnNames,values);
  byte[] bytes=externalizerHelper.marshall(key);
  Key unmarshalledKey=externalizerHelper.unmarshall(bytes);
  assertThat(unmarshalledKey.getClass()).isEqualTo(RowKey.class);
  assertThat(unmarshalledKey.getTable()).isEqualTo(key.getTable());
  assertThat(unmarshalledKey.getColumnNames()).isEqualTo(key.getColumnNames());
  assertThat(unmarshalledKey.getColumnValues()).isEqualTo(key.getColumnValues());
  assertTrue(key.equals(unmarshalledKey));
  assertTrue(unmarshalledKey.equals(key));
  assertThat(unmarshalledKey.hashCode()).isEqualTo(key.hashCode());
}","@Test public void shouldSerializeAndDeserializeRowKey() throws Exception {
  String[] columnNames={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Object[] values={123,""String_Node_Str"",456L};
  RowKey key=new RowKey(""String_Node_Str"",columnNames,values,null);
  byte[] bytes=externalizerHelper.marshall(key);
  Key unmarshalledKey=externalizerHelper.unmarshall(bytes);
  assertThat(unmarshalledKey.getClass()).isEqualTo(RowKey.class);
  assertThat(unmarshalledKey.getTable()).isEqualTo(key.getTable());
  assertThat(unmarshalledKey.getColumnNames()).isEqualTo(key.getColumnNames());
  assertThat(unmarshalledKey.getColumnValues()).isEqualTo(key.getColumnValues());
  assertTrue(key.equals(unmarshalledKey));
  assertTrue(unmarshalledKey.equals(key));
  assertThat(unmarshalledKey.hashCode()).isEqualTo(key.hashCode());
}"
40234,"@Test public void testLoadSelectedAssociationColumns(){
  Session session=openSession();
  final Transaction transaction=session.getTransaction();
  transaction.begin();
  Module mongodb=new Module();
  mongodb.setName(""String_Node_Str"");
  session.persist(mongodb);
  Module infinispan=new Module();
  infinispan.setName(""String_Node_Str"");
  session.persist(infinispan);
  List<Module> modules=new ArrayList<Module>();
  modules.add(mongodb);
  modules.add(infinispan);
  Project hibernateOGM=new Project();
  hibernateOGM.setId(""String_Node_Str"");
  hibernateOGM.setName(""String_Node_Str"");
  hibernateOGM.setModules(modules);
  session.persist(hibernateOGM);
  transaction.commit();
  this.addExtraColumn();
  AssociationKeyMetadata metadata=new AssociationKeyMetadata(""String_Node_Str"",new String[]{""String_Node_Str""},new String[]{""String_Node_Str"",""String_Node_Str""});
  AssociationKey associationKey=new AssociationKey(metadata,new Object[]{""String_Node_Str""},""String_Node_Str"",new EntityKey(new EntityKeyMetadata(""String_Node_Str"",new String[]{""String_Node_Str""}),new String[]{""String_Node_Str""}),AssociationKind.ASSOCIATION);
  AssociationContext associationContext=new AssociationContext(OptionsContextImpl.forProperty(OptionValueSources.getDefaultSources(new ConfigurationPropertyReader(sessions.getProperties(),new ClassLoaderServiceImpl())),Project.class,""String_Node_Str""));
  final Association association=getService(GridDialect.class).getAssociation(associationKey,associationContext);
  final MongoDBAssociationSnapshot associationSnapshot=(MongoDBAssociationSnapshot)association.getSnapshot();
  final DBObject assocObject=associationSnapshot.getDBObject();
  this.checkLoading(assocObject);
  session.delete(mongodb);
  session.delete(infinispan);
  session.delete(hibernateOGM);
  session.close();
}","@Test public void testLoadSelectedAssociationColumns(){
  Session session=openSession();
  final Transaction transaction=session.getTransaction();
  transaction.begin();
  Module mongodb=new Module();
  mongodb.setName(""String_Node_Str"");
  session.persist(mongodb);
  Module infinispan=new Module();
  infinispan.setName(""String_Node_Str"");
  session.persist(infinispan);
  List<Module> modules=new ArrayList<Module>();
  modules.add(mongodb);
  modules.add(infinispan);
  Project hibernateOGM=new Project();
  hibernateOGM.setId(""String_Node_Str"");
  hibernateOGM.setName(""String_Node_Str"");
  hibernateOGM.setModules(modules);
  session.persist(hibernateOGM);
  transaction.commit();
  this.addExtraColumn();
  AssociationKeyMetadata metadata=new AssociationKeyMetadata(""String_Node_Str"",new String[]{""String_Node_Str""},new String[]{""String_Node_Str"",""String_Node_Str""},ArrayHelper.EMPTY_STRING_ARRAY,new EntityKeyMetadata(""String_Node_Str"",new String[]{""String_Node_Str""}),new String[]{""String_Node_Str""});
  AssociationKey associationKey=new AssociationKey(metadata,new Object[]{""String_Node_Str""},""String_Node_Str"",new EntityKey(new EntityKeyMetadata(""String_Node_Str"",new String[]{""String_Node_Str""}),new String[]{""String_Node_Str""}),AssociationKind.ASSOCIATION);
  AssociationContext associationContext=new AssociationContext(OptionsContextImpl.forProperty(OptionValueSources.getDefaultSources(new ConfigurationPropertyReader(sessions.getProperties(),new ClassLoaderServiceImpl())),Project.class,""String_Node_Str""));
  final Association association=getService(GridDialect.class).getAssociation(associationKey,associationContext);
  final MongoDBAssociationSnapshot associationSnapshot=(MongoDBAssociationSnapshot)association.getSnapshot();
  final DBObject assocObject=associationSnapshot.getDBObject();
  this.checkLoading(assocObject);
  session.delete(mongodb);
  session.delete(infinispan);
  session.delete(hibernateOGM);
  session.close();
}"
40235,"@Test public void testUnidirectionalCollectionWithIndex() throws Exception {
  getTransactionManager().begin();
  final EntityManager em=getFactory().createEntityManager();
  Child child1=new Child();
  child1.setName(""String_Node_Str"");
  em.persist(child1);
  Child child2=new Child();
  child2.setName(""String_Node_Str"");
  em.persist(child2);
  Father father=new Father();
  father.getOrderedChildren().add(child1);
  father.getOrderedChildren().add(child2);
  em.persist(father);
  Child child3=new Child();
  child3.setName(""String_Node_Str"");
  em.persist(child3);
  Child child4=new Child();
  child4.setName(""String_Node_Str"");
  em.persist(child4);
  Father father2=new Father();
  father2.getOrderedChildren().add(child3);
  father2.getOrderedChildren().add(child4);
  em.persist(father2);
  commitOrRollback(true);
  assertNumberOfNodes(3 * 2);
  assertRelationships(2 * 2);
}","@Test public void testUnidirectionalCollectionWithIndex() throws Exception {
  getTransactionManager().begin();
  final EntityManager em=getFactory().createEntityManager();
  Child child1=new Child();
  child1.setName(""String_Node_Str"");
  em.persist(child1);
  Child child2=new Child();
  child2.setName(""String_Node_Str"");
  em.persist(child2);
  Father father=new Father();
  father.getOrderedChildren().add(child1);
  father.getOrderedChildren().add(child2);
  em.persist(father);
  Child child3=new Child();
  child3.setName(""String_Node_Str"");
  em.persist(child3);
  Child child4=new Child();
  child4.setName(""String_Node_Str"");
  em.persist(child4);
  Father father2=new Father();
  father2.getOrderedChildren().add(child3);
  father2.getOrderedChildren().add(child4);
  em.persist(father2);
  commitOrRollback(true);
  assertNumberOfNodes(6);
  assertRelationships(4);
}"
40236,"@Override public Association createAssociation(AssociationKey key){
  if (isEmbeddedInEntity(key,provider.getAssociationStorage())) {
    DBObject entity=getObjectAsEmbeddedAssociation(key);
    boolean insert=false;
    if (entity == null) {
      insert=true;
      entity=this.prepareIdObject(key);
    }
    if (getAssociationFieldOrNull(key,entity) == null) {
      if (insert) {
        addEmptyAssociationField(key,entity);
        getCollection(key.getEntityKey()).insert(entity);
      }
 else {
        BasicDBObject updater=new BasicDBObject();
        this.addSubQuery(""String_Node_Str"",updater,key.getCollectionRole(),Collections.EMPTY_LIST);
        this.getCollection(key.getEntityKey()).update(entity,updater,true,false);
        addEmptyAssociationField(key,entity);
      }
    }
    return new Association(new MongoDBAssociationSnapshot(entity,key,provider.getAssociationStorage()));
  }
  DBCollection associations=getAssociationCollection(key);
  DBObject assoc=MongoHelpers.associationKeyToObject(provider.getAssociationStorage(),key);
  assoc.put(ROWS_FIELDNAME,Collections.EMPTY_LIST);
  associations.insert(assoc);
  return new Association(new MongoDBAssociationSnapshot(assoc,key,provider.getAssociationStorage()));
}","@Override public Association createAssociation(AssociationKey key){
  if (isEmbeddedInEntity(key,provider.getAssociationStorage())) {
    DBObject entity=getObjectAsEmbeddedAssociation(key);
    boolean insert=false;
    if (entity == null) {
      insert=true;
      entity=this.prepareIdObject(key.getEntityKey());
    }
    if (getAssociationFieldOrNull(key,entity) == null) {
      if (insert) {
        addEmptyAssociationField(key,entity);
        getCollection(key.getEntityKey()).insert(entity);
      }
 else {
        BasicDBObject updater=new BasicDBObject();
        this.addSubQuery(""String_Node_Str"",updater,key.getCollectionRole(),Collections.EMPTY_LIST);
        this.getCollection(key.getEntityKey()).update(entity,updater,true,false);
        addEmptyAssociationField(key,entity);
      }
    }
    return new Association(new MongoDBAssociationSnapshot(entity,key,provider.getAssociationStorage()));
  }
  DBCollection associations=getAssociationCollection(key);
  DBObject assoc=MongoHelpers.associationKeyToObject(provider.getAssociationStorage(),key);
  assoc.put(ROWS_FIELDNAME,Collections.EMPTY_LIST);
  associations.insert(assoc);
  return new Association(new MongoDBAssociationSnapshot(assoc,key,provider.getAssociationStorage()));
}"
40237,"@Override public void updateAssociation(Association association,AssociationKey key){
  DBCollection collection;
  DBObject query;
  MongoDBAssociationSnapshot assocSnapshot=(MongoDBAssociationSnapshot)association.getSnapshot();
  String associationField;
  if (isEmbeddedInEntity(key,provider.getAssociationStorage())) {
    collection=this.getCollection(key.getEntityKey());
    query=this.prepareIdObject(key);
    associationField=key.getCollectionRole();
  }
 else {
    collection=getAssociationCollection(key);
    query=assocSnapshot.getQueryObject();
    associationField=ROWS_FIELDNAME;
  }
  for (  AssociationOperation action : association.getOperations()) {
    RowKey rowKey=action.getKey();
    Tuple rowValue=action.getValue();
    DBObject update=null;
switch (action.getType()) {
case CLEAR:
      update=new BasicDBObject(""String_Node_Str"",new BasicDBObject(associationField,Collections.EMPTY_LIST));
    break;
case PUT_NULL:
case PUT:
  update=putAssociationRowKey(rowValue,associationField,key);
break;
case REMOVE:
update=removeAssociationRowKey(assocSnapshot,rowKey,associationField);
break;
}
if (update != null) {
collection.update(query,update,true,false);
}
}
}","@Override public void updateAssociation(Association association,AssociationKey key){
  DBCollection collection;
  DBObject query;
  MongoDBAssociationSnapshot assocSnapshot=(MongoDBAssociationSnapshot)association.getSnapshot();
  String associationField;
  if (isEmbeddedInEntity(key,provider.getAssociationStorage())) {
    collection=this.getCollection(key.getEntityKey());
    query=this.prepareIdObject(key.getEntityKey());
    associationField=key.getCollectionRole();
  }
 else {
    collection=getAssociationCollection(key);
    query=assocSnapshot.getQueryObject();
    associationField=ROWS_FIELDNAME;
  }
  for (  AssociationOperation action : association.getOperations()) {
    RowKey rowKey=action.getKey();
    Tuple rowValue=action.getValue();
    DBObject update=null;
switch (action.getType()) {
case CLEAR:
      update=new BasicDBObject(""String_Node_Str"",new BasicDBObject(associationField,Collections.EMPTY_LIST));
    break;
case PUT_NULL:
case PUT:
  update=putAssociationRowKey(rowValue,associationField,key);
break;
case REMOVE:
update=removeAssociationRowKey(assocSnapshot,rowKey,associationField);
break;
}
if (update != null) {
collection.update(query,update,true,false);
}
}
}"
40238,"@Override public Tuple getTuple(EntityKey key){
  DBObject found=this.getObject(key);
  return this.getObject(key) != null ? new Tuple(new MongoDBTupleSnapshot(found)) : null;
}","@Override public Tuple getTuple(EntityKey key){
  DBObject found=this.getObject(key);
  return found != null ? new Tuple(new MongoDBTupleSnapshot(found)) : null;
}"
40239,"public void put(String column,Object value){
  if (value == null) {
    currentState.put(column,new TupleOperation(column,null,PUT_NULL));
  }
  currentState.put(column,new TupleOperation(column,value,PUT));
}","public void put(String column,Object value){
  if (value == null) {
    currentState.put(column,new TupleOperation(column,null,PUT_NULL));
  }
 else {
    currentState.put(column,new TupleOperation(column,value,PUT));
  }
}"
40240,"public int size(){
  int size=cleared ? 0 : snapshot.size();
  for (  Map.Entry<RowKey,AssociationOperation> op : currentState.entrySet()) {
switch (op.getValue().getType()) {
case PUT:
case PUT_NULL:
      if (cleared || snapshot.get(op.getKey()) == null) {
        size++;
      }
    break;
case REMOVE:
  if (!cleared && snapshot.get(op.getKey()) != null) {
    size--;
  }
break;
}
}
return size;
}","public int size(){
  int size=cleared ? 0 : snapshot.size();
  for (  Map.Entry<RowKey,AssociationOperation> op : currentState.entrySet()) {
switch (op.getValue().getType()) {
case PUT:
case PUT_NULL:
      if (cleared || !snapshot.containsKey(op.getKey())) {
        size++;
      }
    break;
case REMOVE:
  if (!cleared && snapshot.containsKey(op.getKey())) {
    size--;
  }
break;
}
}
return size;
}"
40241,"@Test public void doTest() throws Exception {
  getTransactionManager().begin();
  final EntityManager em=getFactory().createEntityManager();
  Poem poem=new Poem();
  poem.setName(""String_Node_Str"");
  em.persist(poem);
  getTransactionManager().commit();
  em.clear();
  getTransactionManager().begin();
  poem=em.find(Poem.class,poem.getId());
  assertThat(poem).isNotNull();
  assertThat(poem.getName()).isEqualTo(""String_Node_Str"");
  em.remove(poem);
  getTransactionManager().commit();
}","@Test public void doTest() throws Exception {
  getTransactionManager().begin();
  final EntityManager em=getFactory().createEntityManager();
  Poem poem=new Poem();
  poem.setName(""String_Node_Str"");
  em.persist(poem);
  getTransactionManager().commit();
  em.clear();
  getTransactionManager().begin();
  poem=em.find(Poem.class,poem.getId());
  assertThat(poem).isNotNull();
  assertThat(poem.getName()).isEqualTo(""String_Node_Str"");
  em.remove(poem);
  getTransactionManager().commit();
  em.close();
}"
40242,"@Before public void createFactory() throws MalformedURLException {
  GetterPersistenceUnitInfo info=new GetterPersistenceUnitInfo();
  info.setClassLoader(Thread.currentThread().getContextClassLoader());
  info.setExcludeUnlistedClasses(true);
  info.setJtaDataSource(null);
  List<String> classNames=new ArrayList<String>();
  for (  Class<?> clazz : getEntities()) {
    classNames.add(clazz.getName());
  }
  info.setManagedClassNames(classNames);
  info.setNonJtaDataSource(null);
  info.setPersistenceProviderClassName(HibernateOgmPersistence.class.getName());
  info.setPersistenceUnitName(""String_Node_Str"");
  final URL persistenceUnitRootUrl=new File(""String_Node_Str"").toURI().toURL();
  info.setPersistenceUnitRootUrl(persistenceUnitRootUrl);
  info.setPersistenceXMLSchemaVersion(""String_Node_Str"");
  info.setProperties(new Properties());
  info.setSharedCacheMode(SharedCacheMode.ENABLE_SELECTIVE);
  info.setTransactionType(PersistenceUnitTransactionType.JTA);
  info.setValidationMode(ValidationMode.AUTO);
  info.getProperties().setProperty(Environment.TRANSACTION_MANAGER_STRATEGY,JBossTSStandaloneTransactionManagerLookup.class.getName());
  factory=new HibernateOgmPersistence().createContainerEntityManagerFactory(info,Collections.EMPTY_MAP);
  transactionManager=new JBossTSStandaloneTransactionManagerLookup().getTransactionManager(null);
}","@Before public void createFactory() throws MalformedURLException {
  arjPropertyManager.getCoordinatorEnvironmentBean().setActionStore(VolatileStore.class.getName());
  transactionManager=new JBossTSStandaloneTransactionManagerLookup().getTransactionManager(null);
  GetterPersistenceUnitInfo info=new GetterPersistenceUnitInfo();
  info.setClassLoader(Thread.currentThread().getContextClassLoader());
  info.setExcludeUnlistedClasses(true);
  info.setJtaDataSource(null);
  List<String> classNames=new ArrayList<String>();
  for (  Class<?> clazz : getEntities()) {
    classNames.add(clazz.getName());
  }
  info.setManagedClassNames(classNames);
  info.setNonJtaDataSource(null);
  info.setPersistenceProviderClassName(HibernateOgmPersistence.class.getName());
  info.setPersistenceUnitName(""String_Node_Str"");
  final URL persistenceUnitRootUrl=new File(""String_Node_Str"").toURI().toURL();
  info.setPersistenceUnitRootUrl(persistenceUnitRootUrl);
  info.setPersistenceXMLSchemaVersion(""String_Node_Str"");
  info.setProperties(new Properties());
  info.setSharedCacheMode(SharedCacheMode.ENABLE_SELECTIVE);
  info.setTransactionType(PersistenceUnitTransactionType.JTA);
  info.setValidationMode(ValidationMode.AUTO);
  info.getProperties().setProperty(Environment.TRANSACTION_MANAGER_STRATEGY,JBossTSStandaloneTransactionManagerLookup.class.getName());
  factory=new HibernateOgmPersistence().createContainerEntityManagerFactory(info,Collections.EMPTY_MAP);
}"
40243,"@Override public EntityManagerFactory createEntityManagerFactory(String emName,Map map){
  try {
    Map integration=map == null ? CollectionHelper.EMPTY_MAP : Collections.unmodifiableMap(map);
    Enumeration<URL> persistenceXml=Thread.currentThread().getContextClassLoader().getResources(""String_Node_Str"");
    if (!persistenceXml.hasMoreElements()) {
      LOG.warn(""String_Node_Str"" + ""String_Node_Str"" + (emName != null ? emName : ""String_Node_Str""));
    }
    while (persistenceXml.hasMoreElements()) {
      URL url=persistenceXml.nextElement();
      List<PersistenceMetadata> metadataFiles=PersistenceXmlLoader.deploy(url,integration,new EJB3DTDEntityResolver(),PersistenceUnitTransactionType.RESOURCE_LOCAL);
      for (      PersistenceMetadata metadata : metadataFiles) {
        if (metadata.getProvider() == null || IMPLEMENTATION_NAME.equalsIgnoreCase(metadata.getProvider())) {
          Map<Object,Object> protectiveCopy=new HashMap<Object,Object>(map);
          enforceOgmConfig(protectiveCopy);
          protectiveCopy.put(HibernatePersistence.PROVIDER,delegate.getClass().getName());
          return delegate.createEntityManagerFactory(emName,protectiveCopy);
        }
      }
    }
    return null;
  }
 catch (  Exception e) {
    if (e instanceof PersistenceException) {
      throw (PersistenceException)e;
    }
 else {
      throw new PersistenceException(""String_Node_Str"",e);
    }
  }
}","@Override public EntityManagerFactory createEntityManagerFactory(String emName,Map map){
  try {
    Map integration=map == null ? CollectionHelper.EMPTY_MAP : Collections.unmodifiableMap(map);
    Enumeration<URL> persistenceXml=Thread.currentThread().getContextClassLoader().getResources(""String_Node_Str"");
    if (!persistenceXml.hasMoreElements()) {
      LOG.warn(""String_Node_Str"" + ""String_Node_Str"" + (emName != null ? emName : ""String_Node_Str""));
    }
    while (persistenceXml.hasMoreElements()) {
      URL url=persistenceXml.nextElement();
      List<PersistenceMetadata> metadataFiles=PersistenceXmlLoader.deploy(url,integration,new EJB3DTDEntityResolver(),PersistenceUnitTransactionType.RESOURCE_LOCAL);
      for (      PersistenceMetadata metadata : metadataFiles) {
        if (metadata.getProvider() == null || IMPLEMENTATION_NAME.equalsIgnoreCase(metadata.getProvider())) {
          Map<Object,Object> protectiveCopy=new HashMap<Object,Object>(integration);
          enforceOgmConfig(protectiveCopy);
          protectiveCopy.put(HibernatePersistence.PROVIDER,delegate.getClass().getName());
          return delegate.createEntityManagerFactory(emName,protectiveCopy);
        }
      }
    }
    return null;
  }
 catch (  Exception e) {
    if (e instanceof PersistenceException) {
      throw (PersistenceException)e;
    }
 else {
      throw new PersistenceException(""String_Node_Str"",e);
    }
  }
}"
40244,"private void enforceOgmConfig(Map<Object,Object> map){
  map.put(AvailableSettings.SESSION_FACTORY_OBSERVER,GridMetadataManager.class.getName());
  map.put(AvailableSettings.NAMING_STRATEGY,OgmNamingStrategy.class.getName());
  map.put(Environment.CONNECTION_PROVIDER,NoopConnectionProvider.class);
  map.put(Environment.DIALECT,NoopDialect.class);
}","private void enforceOgmConfig(Map<Object,Object> map){
  map.put(AvailableSettings.SESSION_FACTORY_OBSERVER,GridMetadataManager.class.getName());
  map.put(AvailableSettings.NAMING_STRATEGY,OgmNamingStrategy.class.getName());
  map.put(Environment.CONNECTION_PROVIDER,NoopConnectionProvider.class.getName());
  map.put(Environment.DIALECT,NoopDialect.class.getName());
}"
40245,"/** 
 * copied from Loader#endCollectionLoad
 */
private void endCollectionLoad(final Object resultSetId,final SessionImplementor session,final CollectionPersister collectionPersister){
  session.getPersistenceContext().getLoadContexts().getCollectionLoadContext(null).endLoadingCollections(collectionPersister);
}","/** 
 * copied from Loader#endCollectionLoad
 */
private void endCollectionLoad(final Object resultSetId,final SessionImplementor session,final CollectionPersister collectionPersister){
  session.getPersistenceContext().getLoadContexts().getCollectionLoadContext(resultSetId).endLoadingCollections(collectionPersister);
}"
40246,"/** 
 * Execute the physical query and initialize the various entities and collections
 */
private Object doQuery(SessionImplementor session,Serializable id,Type identifierType,Object optionalObject,String optionalEntityName,Serializable optionalId,LockOptions lockOptions,boolean returnProxies){
  int entitySpan=1;
  final List<Object> hydratedObjects=entitySpan == 0 ? null : new ArrayList<Object>(entitySpan * 10);
  TupleAsMapResultSet resultset=getResultSet(id,session);
  QueryParameters qp=new QueryParameters();
  qp.setPositionalParameterTypes(new Type[]{identifierType});
  qp.setPositionalParameterValues(new Object[]{id});
  qp.setOptionalObject(optionalObject);
  qp.setOptionalEntityName(optionalEntityName);
  qp.setOptionalId(optionalId);
  qp.setLockOptions(lockOptions);
  handleEmptyCollections(qp.getCollectionKeys(),resultset,session);
  final org.hibernate.engine.EntityKey[] keys=new org.hibernate.engine.EntityKey[entitySpan];
  Object result=null;
  try {
    while (resultset.next()) {
      result=getRowFromResultSet(resultset,session,qp,optionalId,hydratedObjects,keys,returnProxies);
    }
  }
 catch (  SQLException e) {
  }
  initializeEntitiesAndCollections(hydratedObjects,resultset,session,qp.isReadOnly(session));
  return result;
}","/** 
 * Execute the physical query and initialize the various entities and collections
 */
private Object doQuery(SessionImplementor session,Serializable id,Type identifierType,Object optionalObject,String optionalEntityName,Serializable optionalId,LockOptions lockOptions,boolean returnProxies){
  int entitySpan=entityPersisters.length;
  final List<Object> hydratedObjects=entitySpan == 0 ? null : new ArrayList<Object>(entitySpan * 10);
  TupleAsMapResultSet resultset=getResultSet(id,session);
  QueryParameters qp=new QueryParameters();
  qp.setPositionalParameterTypes(new Type[]{identifierType});
  qp.setPositionalParameterValues(new Object[]{id});
  qp.setOptionalObject(optionalObject);
  qp.setOptionalEntityName(optionalEntityName);
  qp.setOptionalId(optionalId);
  qp.setLockOptions(lockOptions);
  handleEmptyCollections(qp.getCollectionKeys(),resultset,session);
  final org.hibernate.engine.EntityKey[] keys=new org.hibernate.engine.EntityKey[entitySpan];
  Object result=null;
  try {
    while (resultset.next()) {
      result=getRowFromResultSet(resultset,session,qp,optionalId,hydratedObjects,keys,returnProxies);
    }
  }
 catch (  SQLException e) {
  }
  initializeEntitiesAndCollections(hydratedObjects,resultset,session,qp.isReadOnly(session));
  return result;
}"
40247,"public void testUnidirectionalCollection() throws Exception {
  final Session session=openSession();
  Transaction transaction=session.beginTransaction();
  SnowFlake sf=new SnowFlake();
  sf.setDescription(""String_Node_Str"");
  session.save(sf);
  SnowFlake sf2=new SnowFlake();
  sf.setDescription(""String_Node_Str"");
  session.save(sf2);
  Cloud cloud=new Cloud();
  cloud.setLength(23);
  cloud.getProducedSnowFlakes().add(sf);
  cloud.getProducedSnowFlakes().add(sf2);
  session.persist(cloud);
  transaction.commit();
  session.clear();
  transaction=session.beginTransaction();
  cloud=(Cloud)session.get(Cloud.class,cloud.getId());
  assertNotNull(cloud.getProducedSnowFlakes());
  assertEquals(2,cloud.getProducedSnowFlakes().size());
  final SnowFlake removedSf=cloud.getProducedSnowFlakes().iterator().next();
  SnowFlake sf3=new SnowFlake();
  sf3.setDescription(""String_Node_Str"");
  session.persist(sf3);
  cloud.getProducedSnowFlakes().remove(removedSf);
  cloud.getProducedSnowFlakes().add(sf3);
  transaction.commit();
  session.clear();
  transaction=session.beginTransaction();
  cloud=(Cloud)session.get(Cloud.class,cloud.getId());
  assertNotNull(cloud.getProducedSnowFlakes());
  assertEquals(2,cloud.getProducedSnowFlakes().size());
  boolean present=false;
  for (  SnowFlake current : cloud.getProducedSnowFlakes()) {
    if (current.getDescription().equals(removedSf.getDescription())) {
      present=true;
    }
  }
  assertFalse(""String_Node_Str"",present);
  for (  SnowFlake current : cloud.getProducedSnowFlakes()) {
    session.delete(current);
  }
  session.delete(session.load(SnowFlake.class,removedSf.getId()));
  cloud.getProducedSnowFlakes().clear();
  transaction.commit();
  session.clear();
  transaction=session.beginTransaction();
  cloud=(Cloud)session.get(Cloud.class,cloud.getId());
  assertNotNull(cloud.getProducedSnowFlakes());
  assertEquals(0,cloud.getProducedSnowFlakes().size());
  session.delete(cloud);
  transaction.commit();
  session.close();
}","public void testUnidirectionalCollection() throws Exception {
  final Session session=openSession();
  Transaction transaction=session.beginTransaction();
  SnowFlake sf=new SnowFlake();
  sf.setDescription(""String_Node_Str"");
  session.save(sf);
  SnowFlake sf2=new SnowFlake();
  sf2.setDescription(""String_Node_Str"");
  session.save(sf2);
  Cloud cloud=new Cloud();
  cloud.setLength(23);
  cloud.getProducedSnowFlakes().add(sf);
  cloud.getProducedSnowFlakes().add(sf2);
  session.persist(cloud);
  transaction.commit();
  session.clear();
  transaction=session.beginTransaction();
  cloud=(Cloud)session.get(Cloud.class,cloud.getId());
  assertNotNull(cloud.getProducedSnowFlakes());
  assertEquals(2,cloud.getProducedSnowFlakes().size());
  final SnowFlake removedSf=cloud.getProducedSnowFlakes().iterator().next();
  SnowFlake sf3=new SnowFlake();
  sf3.setDescription(""String_Node_Str"");
  session.persist(sf3);
  cloud.getProducedSnowFlakes().remove(removedSf);
  cloud.getProducedSnowFlakes().add(sf3);
  transaction.commit();
  session.clear();
  transaction=session.beginTransaction();
  cloud=(Cloud)session.get(Cloud.class,cloud.getId());
  assertNotNull(cloud.getProducedSnowFlakes());
  assertEquals(2,cloud.getProducedSnowFlakes().size());
  boolean present=false;
  for (  SnowFlake current : cloud.getProducedSnowFlakes()) {
    if (current.getDescription().equals(removedSf.getDescription())) {
      present=true;
    }
  }
  assertFalse(""String_Node_Str"",present);
  for (  SnowFlake current : cloud.getProducedSnowFlakes()) {
    session.delete(current);
  }
  session.delete(session.load(SnowFlake.class,removedSf.getId()));
  cloud.getProducedSnowFlakes().clear();
  transaction.commit();
  session.clear();
  transaction=session.beginTransaction();
  cloud=(Cloud)session.get(Cloud.class,cloud.getId());
  assertNotNull(cloud.getProducedSnowFlakes());
  assertEquals(0,cloud.getProducedSnowFlakes().size());
  session.delete(cloud);
  transaction.commit();
  session.close();
}"
40248,"public void dehydrate(){
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"" + MessageHelper.infoString(persister,id,persister.getFactory()));
  }
  final EntityMetamodel entityMetamodel=persister.getEntityMetamodel();
  final boolean[] uniqueness=persister.getPropertyUniqueness();
  final Cache<PropertyKey,List<Serializable>> propertyCache=GridMetadataManagerHelper.getPropertyCache(session.getFactory());
  for (int index=0; index < entityMetamodel.getPropertySpan(); index++) {
    if (persister.isPropertyOfTable(index,tableIndex)) {
      if (removePropertyMetadata) {
        if (uniqueness[index]) {
          Object[] oldColumnValues=Helper.getColumnValuesFromResultset(resultset,index,persister);
          PropertyKey propertyKey=new PropertyKey(persister.getTableName(tableIndex),persister.getPropertyNames()[index],oldColumnValues);
          List<Serializable> propertyValues=propertyCache.get(propertyKey);
          if (propertyValues != null) {
            final boolean lastId=propertyValues.size() == 1 && id.equals(propertyValues.get(0));
            if (lastId) {
              propertyCache.remove(propertyValues);
            }
 else {
              propertyValues.remove(id);
              propertyCache.put(propertyKey,propertyValues);
            }
          }
        }
      }
      if (dehydrate && includeProperties[index]) {
        gridPropertyTypes[index].nullSafeSet(resultset,fields[index],persister.getPropertyColumnNames(index),includeColumns[index],session);
      }
      if (addPropertyMetadata) {
        if (uniqueness[index]) {
          Object[] newColumnValues=Helper.getColumnValuesFromResultset(resultset,index,persister);
          PropertyKey propertyKey=new PropertyKey(persister.getTableName(tableIndex),persister.getPropertyNames()[index],newColumnValues);
          List<Serializable> propertyValues=propertyCache.get(propertyKey);
          if (propertyValues == null) {
            propertyValues=new ArrayList<Serializable>();
          }
          propertyValues.add(id);
          propertyCache.put(propertyKey,propertyValues);
        }
      }
    }
  }
}","public void dehydrate(){
  if (log.isTraceEnabled()) {
    log.trace(""String_Node_Str"" + MessageHelper.infoString(persister,id,persister.getFactory()));
  }
  final EntityMetamodel entityMetamodel=persister.getEntityMetamodel();
  final boolean[] uniqueness=persister.getPropertyUniqueness();
  final Cache<PropertyKey,List<Serializable>> propertyCache=GridMetadataManagerHelper.getPropertyCache(session.getFactory());
  for (int index=0; index < entityMetamodel.getPropertySpan(); index++) {
    if (persister.isPropertyOfTable(index,tableIndex)) {
      if (removePropertyMetadata) {
        if (uniqueness[index]) {
          Object[] oldColumnValues=Helper.getColumnValuesFromResultset(resultset,index,persister);
          PropertyKey propertyKey=new PropertyKey(persister.getTableName(tableIndex),persister.getPropertyNames()[index],oldColumnValues);
          List<Serializable> propertyValues=propertyCache.get(propertyKey);
          if (propertyValues != null) {
            final boolean lastId=propertyValues.size() == 1 && id.equals(propertyValues.get(0));
            if (lastId) {
              propertyCache.remove(propertyKey);
            }
 else {
              propertyValues.remove(id);
              propertyCache.put(propertyKey,propertyValues);
            }
          }
        }
      }
      if (dehydrate && includeProperties[index]) {
        gridPropertyTypes[index].nullSafeSet(resultset,fields[index],persister.getPropertyColumnNames(index),includeColumns[index],session);
      }
      if (addPropertyMetadata) {
        if (uniqueness[index]) {
          Object[] newColumnValues=Helper.getColumnValuesFromResultset(resultset,index,persister);
          PropertyKey propertyKey=new PropertyKey(persister.getTableName(tableIndex),persister.getPropertyNames()[index],newColumnValues);
          List<Serializable> propertyValues=propertyCache.get(propertyKey);
          if (propertyValues == null) {
            propertyValues=new ArrayList<Serializable>();
          }
          propertyValues.add(id);
          propertyCache.put(propertyKey,propertyValues);
        }
      }
    }
  }
}"
40249,"public void stop(){
  _handler.removeCallbacks(_runnable);
}","public void stop(){
  if (_runnable != null)   _handler.removeCallbacks(_runnable);
}"
40250,"public void start(){
  _handler.postDelayed(_runnable,_time);
}","public void start(){
  if (_runnable != null)   _handler.postDelayed(_runnable,_time);
}"
40251,"@Bean public SpringAMQPMessageSource orderEvents(Serializer serializer){
  return new SpringAMQPMessageSource(new DefaultAMQPMessageConverter(serializer)){
    @RabbitListener(queues=""String_Node_Str"") @Override public void onMessage(    Message message,    Channel channel) throws Exception {
      Thread.sleep(1000);
      super.onMessage(message,channel);
    }
  }
;
}","@Bean public SpringAMQPMessageSource orderEvents(Serializer serializer){
  return new SpringAMQPMessageSource(new DefaultAMQPMessageConverter(serializer)){
    @Transactional @RabbitListener(queues=""String_Node_Str"") @Override public void onMessage(    Message message,    Channel channel) throws Exception {
      super.onMessage(message,channel);
    }
  }
;
}"
40252,"@RabbitListener(queues=""String_Node_Str"") @Override public void onMessage(Message message,Channel channel) throws Exception {
  Thread.sleep(1000);
  super.onMessage(message,channel);
}","@Transactional @RabbitListener(queues=""String_Node_Str"") @Override public void onMessage(Message message,Channel channel) throws Exception {
  super.onMessage(message,channel);
}"
40253,"public Optional<Credentials> extractCredentials(String line,boolean isBase64Encoded){
  if (line != null && !line.isEmpty()) {
    String[] part=line.split(""String_Node_Str"");
    Credentials credentials=new Credentials();
    credentials.setUsername(part[0]);
    String password;
    if (isBase64Encoded) {
      password=new String(Base64.getDecoder().decode(part[1]));
    }
 else {
      password=part[1];
    }
    credentials.setPassword(password);
    return Optional.of(credentials);
  }
 else {
    return Optional.empty();
  }
}","public Optional<Credentials> extractCredentials(String line,boolean isBase64Encoded){
  if (line != null && !line.isEmpty()) {
    String[] part=line.split(""String_Node_Str"");
    if (part.length != 2) {
      return Optional.empty();
    }
    Credentials credentials=new Credentials();
    credentials.setUsername(part[0]);
    String password;
    if (isBase64Encoded) {
      password=new String(Base64.getDecoder().decode(part[1]));
    }
 else {
      password=part[1];
    }
    credentials.setPassword(password);
    return Optional.of(credentials);
  }
 else {
    return Optional.empty();
  }
}"
40254,"private static void executeLogins(Configuration configuration,LoginExecutor executor){
  configuration.getCredentials().forEach(credentials -> loginWithCredentials(executor,credentials));
}","private static void executeLogins(Configuration configuration){
  configuration.getCredentials().forEach(credentials -> loginWithCredentials(configuration,credentials));
}"
40255,"public static void main(String[] args) throws Exception {
  CliLoader cliLoader=new CliLoader();
  Configuration configuration=cliLoader.parseArgs(args);
  LOGGER.info(""String_Node_Str"");
  LoginExecutor executor=new LoginExecutor(configuration);
  for (long i=0; i < configuration.getLoops(); i++) {
    configuration=cliLoader.parseArgs(args);
    executeLogins(configuration,executor);
  }
}","public static void main(String[] args) throws Exception {
  CliLoader cliLoader=new CliLoader();
  Configuration configuration=cliLoader.parseArgs(args);
  LOGGER.info(""String_Node_Str"");
  for (long i=0; i < configuration.getLoops(); i++) {
    LOGGER.info(""String_Node_Str"",i);
    configuration=cliLoader.parseArgs(args);
    executeLogins(configuration);
  }
}"
40256,"/** 
 * Performs a single login with the given credentials object
 * @param executor the login executor to perform the login
 * @param credentials the credentials to attempt to login with
 */
private static void loginWithCredentials(LoginExecutor executor,Credentials credentials){
  LOGGER.info(""String_Node_Str"",credentials);
  Optional<String> sessionId;
  try {
    sessionId=executor.performLogin(credentials);
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + ""String_Node_Str"",credentials,e);
    return;
  }
  if (sessionId.isPresent()) {
    LOGGER.info(""String_Node_Str"" + sessionId.get());
  }
 else {
    LOGGER.info(""String_Node_Str"");
  }
}","/** 
 * Performs a single login with the given credentials object
 * @param configuration the configuration for the login executor
 * @param credentials the credentials to attempt to login with
 */
private static void loginWithCredentials(Configuration configuration,Credentials credentials){
  LOGGER.info(""String_Node_Str"",credentials);
  LoginExecutor executor=new LoginExecutor(configuration);
  Optional<String> sessionId;
  try {
    sessionId=executor.performLogin(credentials);
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + ""String_Node_Str"",credentials,e);
    return;
  }
  if (sessionId.isPresent()) {
    LOGGER.info(""String_Node_Str"" + sessionId.get());
  }
 else {
    LOGGER.info(""String_Node_Str"");
  }
}"
40257,"private Stream<Credentials> getCredentials(String fileName,String[] cs){
  Stream<Credentials> cliCredentials=Stream.empty();
  if (cs != null && cs.length > 0) {
    cliCredentials=Stream.of(cs).map(credential -> credentialFileParser.extractCredentials(credential,false));
  }
  Stream<Credentials> fileCredentials=Stream.empty();
  if (fileName != null && Paths.get(fileName).toFile().exists()) {
    fileCredentials=credentialFileParser.loadFile(Paths.get(fileName)).orElse(Stream.empty());
  }
  return Stream.concat(cliCredentials,fileCredentials);
}","private Stream<Credentials> getCredentials(String fileName,String[] cs){
  Stream<Credentials> cliCredentials=Stream.empty();
  if (cs != null && cs.length > 0) {
    cliCredentials=Stream.of(cs).map(credential -> credentialFileParser.extractCredentials(credential,false)).flatMap(o -> o.isPresent() ? Stream.of(o.get()) : Stream.empty());
  }
  Stream<Credentials> fileCredentials=Stream.empty();
  if (fileName != null && Paths.get(fileName).toFile().exists()) {
    fileCredentials=credentialFileParser.loadFile(Paths.get(fileName)).orElse(Stream.empty());
  }
  return Stream.concat(cliCredentials,fileCredentials);
}"
40258,"public LoginExecutor(Configuration configuration){
  this.configuration=configuration;
  logger=LoggerFactory.getLogger(Application.class);
}","public LoginExecutor(Configuration configuration){
  this.configuration=configuration;
  logger=LoggerFactory.getLogger(LoginExecutor.class);
}"
40259,"/** 
 * Perform a http login and return the acquired session ID.
 * @param credentials the credentials to login with
 * @param csrfToken   the csrfToken form the login page
 * @return the sessionId if login was successful
 * @throws IOException
 */
private Optional<String> login(Credentials credentials,String csrfToken) throws IOException {
  Optional<String> sessionId;
  CloseableHttpClient httpclient=HttpClientBuilder.create().setRedirectStrategy(new LaxRedirectStrategy()).build();
  try {
    HttpPost httpPost=new HttpPost(configuration.getLoginUrl());
    List<NameValuePair> nvps=new ArrayList<>();
    nvps.add(new BasicNameValuePair(""String_Node_Str"",credentials.getUsername()));
    nvps.add(new BasicNameValuePair(""String_Node_Str"",credentials.getPassword()));
    nvps.add(new BasicNameValuePair(""String_Node_Str"",csrfToken));
    httpPost.setEntity(new UrlEncodedFormEntity(nvps));
    CloseableHttpResponse response2=httpclient.execute(httpPost,context);
    try {
      logger.debug(response2.getStatusLine().toString());
      sessionId=extractSessionId(context);
    }
  finally {
      response2.close();
    }
  }
  finally {
    httpclient.close();
  }
  return sessionId;
}","/** 
 * Perform a http login and return the acquired session ID.
 * @param credentials the credentials to login with
 * @param csrfToken   the csrfToken form the login page
 * @return the sessionId if login was successful
 * @throws IOException
 */
private Optional<String> login(Credentials credentials,String csrfToken) throws IOException {
  Optional<String> sessionId;
  CloseableHttpClient httpclient=HttpClientBuilder.create().setRedirectStrategy(new LaxRedirectStrategy()).build();
  try {
    HttpPost httpPost=new HttpPost(configuration.getLoginUrl());
    List<NameValuePair> nvps=new ArrayList<>();
    nvps.add(new BasicNameValuePair(""String_Node_Str"",credentials.getUsername()));
    nvps.add(new BasicNameValuePair(""String_Node_Str"",credentials.getPassword()));
    nvps.add(new BasicNameValuePair(""String_Node_Str"",csrfToken));
    String initialSession=getCurrentSession(context);
    httpPost.setEntity(new UrlEncodedFormEntity(nvps));
    CloseableHttpResponse response2=httpclient.execute(httpPost,context);
    try {
      logger.debug(response2.getStatusLine().toString());
      sessionId=extractSessionId(context);
      if (initialSession != null && initialSession.equals(sessionId.orElse(""String_Node_Str""))) {
        return Optional.empty();
      }
    }
  finally {
      response2.close();
    }
  }
  finally {
    httpclient.close();
  }
  return sessionId;
}"
40260,"public Optional<Stream<Credentials>> loadFile(Path filePath){
  if (filePath == null) {
    return Optional.empty();
  }
  try {
    bufferedReader=Files.newBufferedReader(filePath);
    return Optional.of(bufferedReader.lines().map(line -> extractCredentials(line,true)));
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    return Optional.empty();
  }
}","public Optional<Stream<Credentials>> loadFile(Path filePath){
  if (filePath == null) {
    return Optional.empty();
  }
  try {
    bufferedReader=Files.newBufferedReader(filePath);
    return Optional.of(bufferedReader.lines().map(line -> extractCredentials(line,true)).flatMap(o -> o.isPresent() ? Stream.of(o.get()) : Stream.empty()));
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    return Optional.empty();
  }
}"
40261,"public Credentials extractCredentials(String line,boolean isBase64Encoded){
  String[] part=line.split(""String_Node_Str"");
  Credentials credentials=new Credentials();
  credentials.setUsername(part[0]);
  String password;
  if (isBase64Encoded) {
    password=new String(Base64.getDecoder().decode(part[1]));
  }
 else {
    password=part[1];
  }
  credentials.setPassword(password);
  return credentials;
}","public Optional<Credentials> extractCredentials(String line,boolean isBase64Encoded){
  if (line != null && !line.isEmpty()) {
    String[] part=line.split(""String_Node_Str"");
    Credentials credentials=new Credentials();
    credentials.setUsername(part[0]);
    String password;
    if (isBase64Encoded) {
      password=new String(Base64.getDecoder().decode(part[1]));
    }
 else {
      password=part[1];
    }
    credentials.setPassword(password);
    return Optional.of(credentials);
  }
 else {
    return Optional.empty();
  }
}"
40262,"@Override public long check(final AbstractCloudComputer c){
  if (c.isIdle() && !disabled) {
    final long milliBetweenCreationAndIdle=c.getIdleStartMilliseconds() - c.getConnectTime();
    boolean neverConnected=milliBetweenCreationAndIdle < TimeUnit2.SECONDS.toMillis(LAPSE);
    final long idleMilliseconds=System.currentTimeMillis() - c.getIdleStartMilliseconds();
    if (!neverConnected && idleMilliseconds > TimeUnit2.MINUTES.toMillis(IDLE_MINUTES)) {
      LOGGER.log(Level.INFO,""String_Node_Str"",c.getName());
      done(c);
    }
  }
  return 1;
}","@Override public long check(final AbstractCloudComputer c){
  if (c.isIdle() && !disabled) {
    final long milliBetweenCreationAndIdle=c.getIdleStartMilliseconds() - c.getConnectTime();
    boolean neverConnected=milliBetweenCreationAndIdle < TimeUnit2.SECONDS.toMillis(LAPSE);
    if (c.getIdleStartMilliseconds() - Jenkins.getInstance().toComputer().getConnectTime() < TimeUnit2.SECONDS.toMillis(LAPSE)) {
      neverConnected=false;
    }
    final long idleMilliseconds=System.currentTimeMillis() - c.getIdleStartMilliseconds();
    if (!neverConnected && idleMilliseconds > TimeUnit2.MINUTES.toMillis(IDLE_MINUTES)) {
      LOGGER.log(Level.INFO,""String_Node_Str"",c.getName());
      done(c);
    }
  }
  return 1;
}"
40263,"public static void deleteAciContainerGroup(String credentialsId,String resourceGroup,String containerGroupName,String deployName){
  final Azure azureClient=AzureContainerUtils.getAzureClient(credentialsId);
  final Map<String,String> properties=new HashMap<>();
  try {
    azureClient.genericResources().delete(resourceGroup,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",containerGroupName,""String_Node_Str"");
    LOGGER.log(Level.INFO,""String_Node_Str"",containerGroupName);
    properties.put(Constants.AI_ACI_NAME,containerGroupName);
    ContainerPlugin.sendEvent(Constants.AI_ACI_AGENT,""String_Node_Str"",properties);
    if (deployName != null) {
      azureClient.deployments().deleteByResourceGroup(resourceGroup,deployName);
      LOGGER.log(Level.INFO,""String_Node_Str"",deployName);
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",new Object[]{containerGroupName,e});
    properties.put(""String_Node_Str"",e.getMessage());
    ContainerPlugin.sendEvent(Constants.AI_ACI_AGENT,""String_Node_Str"",properties);
  }
}","public static void deleteAciContainerGroup(String credentialsId,String resourceGroup,String containerGroupName,String deployName){
  final Azure azureClient=AzureContainerUtils.getAzureClient(credentialsId);
  final Map<String,String> properties=new HashMap<>();
  try {
    azureClient.genericResources().delete(resourceGroup,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",containerGroupName,""String_Node_Str"");
    LOGGER.log(Level.INFO,""String_Node_Str"",containerGroupName);
    properties.put(Constants.AI_ACI_NAME,containerGroupName);
    ContainerPlugin.sendEvent(Constants.AI_ACI_AGENT,""String_Node_Str"",properties);
  }
 catch (  Exception e) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",new Object[]{containerGroupName,e});
    properties.put(""String_Node_Str"",e.getMessage());
    ContainerPlugin.sendEvent(Constants.AI_ACI_AGENT,""String_Node_Str"",properties);
  }
  try {
    if (deployName != null) {
      azureClient.deployments().deleteByResourceGroup(resourceGroup,deployName);
      LOGGER.log(Level.INFO,""String_Node_Str"",deployName);
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",new Object[]{deployName,e});
  }
}"
40264,"@Override public long check(final AbstractCloudComputer c){
  if (c.isIdle() && !disabled) {
    final long idleMilliseconds=System.currentTimeMillis() - c.getIdleStartMilliseconds();
    if (idleMilliseconds > TimeUnit2.MINUTES.toMillis(IDLE_MINUTES)) {
      LOGGER.log(Level.INFO,""String_Node_Str"",c.getName());
      done(c);
    }
  }
  return 1;
}","@Override public long check(final AbstractCloudComputer c){
  if (c.isIdle() && !disabled) {
    final long milliBetweenCreationAndIdle=c.getConnectTime() - c.getIdleStartMilliseconds();
    boolean neverConnected=milliBetweenCreationAndIdle < TimeUnit2.SECONDS.toMillis(LAPSE);
    final long idleMilliseconds=System.currentTimeMillis() - c.getIdleStartMilliseconds();
    if (!neverConnected && idleMilliseconds > TimeUnit2.MINUTES.toMillis(IDLE_MINUTES)) {
      LOGGER.log(Level.INFO,""String_Node_Str"",c.getName());
      done(c);
    }
  }
  return 1;
}"
40265,"public void deletePod(String podName){
  LOGGER.log(Level.INFO,""String_Node_Str"",podName);
  try (KubernetesClient client=connect()){
    boolean result=client.pods().inNamespace(namespace).withName(podName).delete();
    if (result) {
      LOGGER.log(Level.INFO,""String_Node_Str"",podName);
    }
 else {
      LOGGER.log(Level.WARNING,""String_Node_Str"" + podName);
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + podName,e);
  }
}","public void deletePod(String podName){
  LOGGER.log(Level.INFO,""String_Node_Str"",podName);
  final Map<String,String> properties=new HashMap<>();
  try (KubernetesClient client=connect()){
    properties.put(Constants.AI_CONTAINER_NAME,podName);
    boolean result=client.pods().inNamespace(namespace).withName(podName).delete();
    ContainerPlugin.sendEvent(Constants.AI_CONTAINER_AGENT,""String_Node_Str"",properties);
    if (result) {
      LOGGER.log(Level.INFO,""String_Node_Str"",podName);
    }
 else {
      LOGGER.log(Level.WARNING,""String_Node_Str"" + podName);
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.WARNING,""String_Node_Str"" + podName,e);
    properties.put(""String_Node_Str"",e.getMessage());
    ContainerPlugin.sendEvent(Constants.AI_CONTAINER_AGENT,""String_Node_Str"",properties);
  }
}"
40266,"@Override public Node call() throws Exception {
  KubernetesAgent slave=null;
  final Map<String,String> properties=new HashMap<>();
  try {
    properties.put(AppInsightsConstants.AZURE_SUBSCRIPTION_ID,AzureCredentials.getServicePrincipal(azureCredentialsId).getSubscriptionId());
    properties.put(Constants.AI_ACS_CREDENTIALS_TYPE,KubernetesService.lookupSshCredentials(acsCredentialsId) != null ? Constants.AI_ACS_TYPE_SSH : Constants.AI_ACS_TYPE_CONFIG);
    final int retryInterval=1000;
    slave=new KubernetesAgent(KubernetesCloud.this,template);
    LOGGER.log(Level.INFO,""String_Node_Str"",slave.getNodeName());
    Jenkins.getInstance().addNode(slave);
    Secret registrySecret=null;
    String secretName=null;
    if (!template.getPrivateRegistryCredentials().isEmpty()) {
      secretName=name + ""String_Node_Str"" + template.getName();
      registrySecret=template.buildSecret(namespace,secretName,template.getPrivateRegistryCredentials());
    }
    Pod pod=template.buildPod(slave,secretName);
    String podId=pod.getMetadata().getName();
    StopWatch stopwatch=new StopWatch();
    stopwatch.start();
    try (KubernetesClient k8sClient=connect()){
      properties.put(Constants.AI_ACS_MASTER_FQDN,k8sClient.getMasterUrl().toString());
      if (registrySecret != null) {
        k8sClient.secrets().inNamespace(namespace).createOrReplace(registrySecret);
      }
      pod=k8sClient.pods().inNamespace(getNamespace()).create(pod);
      LOGGER.log(Level.INFO,""String_Node_Str"",podId);
      KubernetesService.waitPodToOnline(k8sClient,podId,namespace,stopwatch,retryInterval,startupTimeout);
    }
     while (true) {
      if (isTimeout(stopwatch.getTime())) {
        throw new TimeoutException(Messages.Kubernetes_Pod_Start_Failed(podId,startupTimeout));
      }
      if (slave.getComputer() == null) {
        throw new IllegalStateException(Messages.Kubernetes_Pod_Deleted());
      }
      if (slave.getComputer().isOnline()) {
        break;
      }
      Thread.sleep(retryInterval);
    }
    KubernetesPlugin.sendEvent(Constants.AI_CONTAINER_AGENT,""String_Node_Str"",properties);
    return slave;
  }
 catch (  Exception ex) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",new Object[]{slave,template});
    properties.put(""String_Node_Str"",ex.getMessage());
    KubernetesPlugin.sendEvent(Constants.AI_CONTAINER_AGENT,""String_Node_Str"",properties);
    if (slave != null) {
      LOGGER.log(Level.INFO,""String_Node_Str"",slave.getNodeName());
      try {
        slave.terminate();
      }
 catch (      IOException e) {
        LOGGER.log(Level.WARNING,""String_Node_Str"" + slave.getNodeName(),e);
      }
    }
    throw new RuntimeException(ex);
  }
}","@Override public Node call() throws Exception {
  KubernetesAgent slave=null;
  final Map<String,String> properties=new HashMap<>();
  try {
    final int retryInterval=1000;
    slave=new KubernetesAgent(KubernetesCloud.this,template);
    LOGGER.log(Level.INFO,""String_Node_Str"",slave.getNodeName());
    Jenkins.getInstance().addNode(slave);
    properties.put(AppInsightsConstants.AZURE_SUBSCRIPTION_ID,AzureCredentials.getServicePrincipal(azureCredentialsId).getSubscriptionId());
    properties.put(Constants.AI_ACS_CREDENTIALS_TYPE,KubernetesService.lookupSshCredentials(acsCredentialsId) != null ? Constants.AI_ACS_TYPE_SSH : Constants.AI_ACS_TYPE_CONFIG);
    properties.put(Constants.AI_CONTAINER_NAME,slave.getNodeName());
    Secret registrySecret=null;
    String secretName=null;
    if (!template.getPrivateRegistryCredentials().isEmpty()) {
      secretName=name + ""String_Node_Str"" + template.getName();
      registrySecret=template.buildSecret(namespace,secretName,template.getPrivateRegistryCredentials());
    }
    Pod pod=template.buildPod(slave,secretName);
    String podId=pod.getMetadata().getName();
    StopWatch stopwatch=new StopWatch();
    stopwatch.start();
    try (KubernetesClient k8sClient=connect()){
      properties.put(Constants.AI_ACS_MASTER_FQDN,k8sClient.getMasterUrl().toString());
      if (registrySecret != null) {
        k8sClient.secrets().inNamespace(namespace).createOrReplace(registrySecret);
      }
      pod=k8sClient.pods().inNamespace(getNamespace()).create(pod);
      LOGGER.log(Level.INFO,""String_Node_Str"",podId);
      KubernetesService.waitPodToOnline(k8sClient,podId,namespace,stopwatch,retryInterval,startupTimeout);
    }
     while (true) {
      if (isTimeout(stopwatch.getTime())) {
        throw new TimeoutException(Messages.Kubernetes_Pod_Start_Failed(podId,startupTimeout));
      }
      if (slave.getComputer() == null) {
        throw new IllegalStateException(Messages.Kubernetes_Pod_Deleted());
      }
      if (slave.getComputer().isOnline()) {
        break;
      }
      Thread.sleep(retryInterval);
    }
    ContainerPlugin.sendEvent(Constants.AI_CONTAINER_AGENT,""String_Node_Str"",properties);
    return slave;
  }
 catch (  Exception ex) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",new Object[]{slave,template});
    properties.put(""String_Node_Str"",ex.getMessage());
    ContainerPlugin.sendEvent(Constants.AI_CONTAINER_AGENT,""String_Node_Str"",properties);
    if (slave != null) {
      LOGGER.log(Level.INFO,""String_Node_Str"",slave.getNodeName());
      try {
        slave.terminate();
      }
 catch (      IOException e) {
        LOGGER.log(Level.WARNING,""String_Node_Str"" + slave.getNodeName(),e);
      }
    }
    throw new RuntimeException(ex);
  }
}"
40267,"@DataBoundSetter public void setEnvVars(List<PodEnvVar> envVars){
  this.envVars=envVars;
}","@DataBoundSetter public void setEnvVars(List<PodEnvVar> envVars){
  this.envVars=envVars == null ? new ArrayList<>() : envVars;
}"
40268,"@DataBoundSetter public void setPrivateRegistryCredentials(List<DockerRegistryEndpoint> privateRegistryCredentials){
  this.privateRegistryCredentials=privateRegistryCredentials;
}","@DataBoundSetter public void setPrivateRegistryCredentials(List<DockerRegistryEndpoint> privateRegistryCredentials){
  this.privateRegistryCredentials=privateRegistryCredentials == null ? new ArrayList<>() : privateRegistryCredentials;
}"
40269,"@DataBoundSetter public void setImagePullSecrets(List<PodImagePullSecrets> imagePullSecrets){
  this.imagePullSecrets=imagePullSecrets;
}","@DataBoundSetter public void setImagePullSecrets(List<PodImagePullSecrets> imagePullSecrets){
  this.imagePullSecrets=imagePullSecrets == null ? new ArrayList<>() : imagePullSecrets;
}"
40270,"@DataBoundSetter public void setVolumes(List<PodVolume> volumes){
  this.volumes=volumes;
}","@DataBoundSetter public void setVolumes(List<PodVolume> volumes){
  this.volumes=volumes == null ? new ArrayList<>() : volumes;
}"
40271,"@Override public Node call() throws Exception {
  AciAgent agent=null;
  try {
    agent=new AciAgent(AciCloud.this,template);
    LOGGER.log(Level.INFO,""String_Node_Str"",agent.getNodeName());
    Jenkins.getInstance().addNode(agent);
    StopWatch stopWatch=new StopWatch();
    stopWatch.start();
    template.provisionAgents(AciCloud.this,agent,stopWatch);
    waitToOnline(agent,template.getTimeout(),stopWatch);
    return agent;
  }
 catch (  Exception e) {
    LOGGER.log(Level.WARNING,e.toString());
    if (agent != null) {
      agent.terminate();
    }
    throw new Exception(e);
  }
}","@Override public Node call() throws Exception {
  AciAgent agent=null;
  final Map<String,String> properties=new HashMap<>();
  try {
    agent=new AciAgent(AciCloud.this,template);
    LOGGER.log(Level.INFO,""String_Node_Str"",agent.getNodeName());
    Jenkins.getInstance().addNode(agent);
    StopWatch stopWatch=new StopWatch();
    stopWatch.start();
    properties.put(AppInsightsConstants.AZURE_SUBSCRIPTION_ID,AzureCredentials.getServicePrincipal(credentialsId).getSubscriptionId());
    properties.put(Constants.AI_ACI_NAME,agent.getNodeName());
    template.provisionAgents(AciCloud.this,agent,stopWatch);
    waitToOnline(agent,template.getTimeout(),stopWatch);
    ContainerPlugin.sendEvent(Constants.AI_ACI_AGENT,""String_Node_Str"",properties);
    return agent;
  }
 catch (  Exception e) {
    LOGGER.log(Level.WARNING,e.toString());
    properties.put(""String_Node_Str"",e.getMessage());
    ContainerPlugin.sendEvent(Constants.AI_ACI_AGENT,""String_Node_Str"",properties);
    if (agent != null) {
      agent.terminate();
    }
    throw new Exception(e);
  }
}"
40272,"@Override public Collection<NodeProvisioner.PlannedNode> provision(Label label,int excessWorkload){
  try {
    LOGGER.log(Level.INFO,""String_Node_Str"",new Object[]{label,excessWorkload});
    List<NodeProvisioner.PlannedNode> r=new ArrayList<>();
    AciContainerTemplate template=getFirstTemplate(label);
    LOGGER.log(Level.INFO,""String_Node_Str"",template.getName());
    for (int i=1; i <= excessWorkload; i++) {
      r.add(new NodeProvisioner.PlannedNode(template.getName(),Computer.threadPoolForRemoting.submit(new Callable<Node>(){
        @Override public Node call() throws Exception {
          AciAgent agent=null;
          try {
            agent=new AciAgent(AciCloud.this,template);
            LOGGER.log(Level.INFO,""String_Node_Str"",agent.getNodeName());
            Jenkins.getInstance().addNode(agent);
            StopWatch stopWatch=new StopWatch();
            stopWatch.start();
            template.provisionAgents(AciCloud.this,agent,stopWatch);
            waitToOnline(agent,template.getTimeout(),stopWatch);
            return agent;
          }
 catch (          Exception e) {
            LOGGER.log(Level.WARNING,e.toString());
            if (agent != null) {
              agent.terminate();
            }
            throw new Exception(e);
          }
        }
      }
),1));
    }
    return r;
  }
 catch (  Exception e) {
    LOGGER.log(Level.SEVERE,e.toString());
  }
  return Collections.emptyList();
}","@Override public Collection<NodeProvisioner.PlannedNode> provision(Label label,int excessWorkload){
  try {
    LOGGER.log(Level.INFO,""String_Node_Str"",new Object[]{label,excessWorkload});
    List<NodeProvisioner.PlannedNode> r=new ArrayList<>();
    AciContainerTemplate template=getFirstTemplate(label);
    LOGGER.log(Level.INFO,""String_Node_Str"",template.getName());
    for (int i=1; i <= excessWorkload; i++) {
      r.add(new NodeProvisioner.PlannedNode(template.getName(),Computer.threadPoolForRemoting.submit(new Callable<Node>(){
        @Override public Node call() throws Exception {
          AciAgent agent=null;
          final Map<String,String> properties=new HashMap<>();
          try {
            agent=new AciAgent(AciCloud.this,template);
            LOGGER.log(Level.INFO,""String_Node_Str"",agent.getNodeName());
            Jenkins.getInstance().addNode(agent);
            StopWatch stopWatch=new StopWatch();
            stopWatch.start();
            properties.put(AppInsightsConstants.AZURE_SUBSCRIPTION_ID,AzureCredentials.getServicePrincipal(credentialsId).getSubscriptionId());
            properties.put(Constants.AI_ACI_NAME,agent.getNodeName());
            template.provisionAgents(AciCloud.this,agent,stopWatch);
            waitToOnline(agent,template.getTimeout(),stopWatch);
            ContainerPlugin.sendEvent(Constants.AI_ACI_AGENT,""String_Node_Str"",properties);
            return agent;
          }
 catch (          Exception e) {
            LOGGER.log(Level.WARNING,e.toString());
            properties.put(""String_Node_Str"",e.getMessage());
            ContainerPlugin.sendEvent(Constants.AI_ACI_AGENT,""String_Node_Str"",properties);
            if (agent != null) {
              agent.terminate();
            }
            throw new Exception(e);
          }
        }
      }
),1));
    }
    return r;
  }
 catch (  Exception e) {
    LOGGER.log(Level.SEVERE,e.toString());
  }
  return Collections.emptyList();
}"
40273,"@DataBoundConstructor public AciContainerTemplate(String name,String label,int timeout,String osType,String image,String command,String rootFs,List<AciPort> ports,List<DockerRegistryEndpoint> privateRegistryCredentials,List<PodEnvVar> envVars,List<AzureFileVolume> volumes,RetentionStrategy<?> retentionStrategy,String cpu,String memory){
  this.name=name;
  this.label=label;
  this.image=image;
  this.osType=osType;
  this.command=command;
  this.rootFs=rootFs;
  this.ports=ports;
  this.cpu=cpu;
  this.memory=memory;
  this.timeout=timeout;
  this.retentionStrategy=retentionStrategy;
  this.envVars=envVars;
  this.privateRegistryCredentials=privateRegistryCredentials;
  this.volumes=volumes;
}","@DataBoundConstructor public AciContainerTemplate(String name,String label,int timeout,String osType,String image,String command,String rootFs,List<AciPort> ports,List<DockerRegistryEndpoint> privateRegistryCredentials,List<PodEnvVar> envVars,List<AzureFileVolume> volumes,RetentionStrategy<?> retentionStrategy,String cpu,String memory){
  this.name=name;
  this.label=label;
  this.image=image;
  this.osType=osType;
  this.command=command;
  this.rootFs=rootFs;
  this.ports=ports == null ? new ArrayList<>() : ports;
  this.cpu=cpu;
  this.memory=memory;
  this.timeout=timeout;
  this.retentionStrategy=retentionStrategy;
  this.envVars=envVars == null ? new ArrayList<>() : envVars;
  this.privateRegistryCredentials=privateRegistryCredentials == null ? new ArrayList<>() : privateRegistryCredentials;
  this.volumes=volumes == null ? new ArrayList<>() : volumes;
}"
40274,"public static void deleteAciContainerGroup(String credentialsId,String resourceGroup,String containerGroupName,String deployName){
  final Azure azureClient=AzureContainerUtils.getAzureClient(credentialsId);
  try {
    azureClient.genericResources().delete(resourceGroup,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",containerGroupName,""String_Node_Str"");
    LOGGER.log(Level.INFO,""String_Node_Str"",containerGroupName);
    if (deployName != null) {
      azureClient.deployments().deleteByResourceGroup(resourceGroup,deployName);
      LOGGER.log(Level.INFO,""String_Node_Str"",deployName);
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",new Object[]{containerGroupName,e});
  }
}","public static void deleteAciContainerGroup(String credentialsId,String resourceGroup,String containerGroupName,String deployName){
  final Azure azureClient=AzureContainerUtils.getAzureClient(credentialsId);
  final Map<String,String> properties=new HashMap<>();
  try {
    azureClient.genericResources().delete(resourceGroup,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",containerGroupName,""String_Node_Str"");
    LOGGER.log(Level.INFO,""String_Node_Str"",containerGroupName);
    properties.put(Constants.AI_ACI_NAME,containerGroupName);
    ContainerPlugin.sendEvent(Constants.AI_ACI_AGENT,""String_Node_Str"",properties);
    if (deployName != null) {
      azureClient.deployments().deleteByResourceGroup(resourceGroup,deployName);
      LOGGER.log(Level.INFO,""String_Node_Str"",deployName);
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",new Object[]{containerGroupName,e});
    properties.put(""String_Node_Str"",e.getMessage());
    ContainerPlugin.sendEvent(Constants.AI_ACI_AGENT,""String_Node_Str"",properties);
  }
}"
40275,"public static ListBoxModel listResourceGroupItems(String credentialsId) throws IOException {
  ListBoxModel model=new ListBoxModel();
  model.add(""String_Node_Str"",""String_Node_Str"");
  if (StringUtils.isBlank(credentialsId)) {
    return model;
  }
  try {
    AzureCredentials.ServicePrincipal servicePrincipal=AzureCredentials.getServicePrincipal(credentialsId);
    final Azure azureClient=TokenCache.getInstance(servicePrincipal).getAzureClient();
    List<ResourceGroup> list=azureClient.resourceGroups().list();
    for (    ResourceGroup resourceGroup : list) {
      model.add(resourceGroup.name());
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.INFO,""String_Node_Str"",e);
  }
  return model;
}","public static ListBoxModel listResourceGroupItems(String credentialsId) throws IOException {
  ListBoxModel model=new ListBoxModel();
  model.add(""String_Node_Str"",""String_Node_Str"");
  if (StringUtils.isBlank(credentialsId)) {
    return model;
  }
  try {
    final Azure azureClient=getAzureClient(credentialsId);
    List<ResourceGroup> list=azureClient.resourceGroups().list();
    for (    ResourceGroup resourceGroup : list) {
      model.add(resourceGroup.name());
    }
  }
 catch (  Exception e) {
    LOGGER.log(Level.INFO,""String_Node_Str"",e);
  }
  return model;
}"
40276,"public Azure getAzureClient(){
  return Azure.configure().withInterceptor(new KubernetesPlugin.AzureTelemetryInterceptor()).withLogLevel(LogLevel.NONE).withUserAgent(getUserAgent()).authenticate(get(credentials)).withSubscription(credentials.getSubscriptionId());
}","public Azure getAzureClient(){
  return Azure.configure().withInterceptor(new ContainerPlugin.AzureTelemetryInterceptor()).withLogLevel(LogLevel.NONE).withUserAgent(getUserAgent()).authenticate(get(credentials)).withSubscription(credentials.getSubscriptionId());
}"
40277,"public void render(){
  glClear(GL_COLOR_BUFFER_BIT);
  RenderContext.colour(Theme.BASE);
  RenderContext.rect(0,0,Display.getWidth(),Display.getHeight());
  renderChildren(children);
  RenderContext.colour(Colour.YELLOW);
  String framerate=""String_Node_Str"" + frameRate;
  int padding=60;
  RenderContext.drawString(framerate,Display.getWidth() - RenderBackend.INTERFACE_FONT.getWidth(framerate) - padding,Display.getHeight() - RenderBackend.INTERFACE_FONT.getHeight() - padding);
  RenderContext.drawString(""String_Node_Str"" + commands + ""String_Node_Str"",40,Display.getHeight() - padding);
}","public void render(){
  glClear(GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
  RenderContext.colour(Theme.BASE);
  RenderContext.rect(0,0,Display.getWidth(),Display.getHeight());
  renderChildren(children);
  RenderContext.colour(Colour.YELLOW);
  String framerate=""String_Node_Str"" + frameRate;
  int padding=60;
  RenderContext.drawString(framerate,Display.getWidth() - RenderBackend.INTERFACE_FONT.getWidth(framerate) - padding,Display.getHeight() - RenderBackend.INTERFACE_FONT.getHeight() - padding);
  RenderContext.drawString(""String_Node_Str"" + commands + ""String_Node_Str"",40,Display.getHeight() - padding);
}"
40278,"@Override public void init(final int width,final int height){
  GL11.glEnable(GL11.GL_TEXTURE_2D);
  GL11.glMatrixMode(GL11.GL_PROJECTION);
  GL11.glLoadIdentity();
  GL11.glMatrixMode(GL11.GL_MODELVIEW);
  GL11.glOrtho(0,width,height,0,1,-1);
}","@Override public void init(final int width,final int height){
  System.out.println(""String_Node_Str"");
  GL11.glMatrixMode(GL11.GL_PROJECTION);
  GL11.glLoadIdentity();
  GL11.glMatrixMode(GL11.GL_MODELVIEW);
  GL11.glOrtho(0,width,height,0,1,-1);
}"
40279,"public static void drawString(String suggName,int x,int y){
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  RenderBackend.CURRENT_FONT.drawString(x,y,suggName,backend.currentColour.getStupidFuckingColour());
  GL11.glDisable(GL11.GL_BLEND);
}","public static void drawString(String suggName,int x,int y){
  GL11.glEnable(GL11.GL_TEXTURE_2D);
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  RenderBackend.CURRENT_FONT.drawString(x,y,suggName,backend.currentColour.getStupidFuckingColour());
  GL11.glDisable(GL11.GL_BLEND);
  GL11.glDisable(GL11.GL_TEXTURE_2D);
}"
40280,"public void render(){
  glClear(GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
  RenderContext.colour(Theme.BASE);
  RenderContext.rect(0,0,Display.getWidth(),Display.getHeight());
  renderChildren(children);
  RenderContext.colour(Colour.YELLOW);
  final String framerate=""String_Node_Str"" + frameRate + ""String_Node_Str""+ tickRate;
  final int padding=60;
  RenderContext.drawString(framerate,Display.getWidth() - RenderBackend.INTERFACE_FONT.getWidth(framerate) - (padding * 2),Display.getHeight() - RenderBackend.INTERFACE_FONT.getHeight() - padding);
  RenderContext.drawString(""String_Node_Str"" + commands + ""String_Node_Str"",padding,Display.getHeight() - padding);
}","public void render(){
  glClear(GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
  RenderContext.colour(Theme.BASE);
  RenderContext.rect(0,0,Display.getWidth(),Display.getHeight());
  renderChildren(children);
  RenderContext.colour(Colour.YELLOW);
  final String framerate=""String_Node_Str"" + frameRate + ""String_Node_Str""+ tickRate;
  final int padding=60;
  RenderContext.drawString(framerate,Display.getWidth() - RenderBackend.INTERFACE_FONT.getWidth(framerate) - (padding * 2),Display.getHeight() - RenderBackend.INTERFACE_FONT.getHeight() - padding);
  RenderContext.drawString(""String_Node_Str"" + commands + ""String_Node_Str"",padding,Display.getHeight() - RenderBackend.INTERFACE_FONT.getHeight() - padding);
}"
40281,"public void save(){
  if (!isSaved()) {
    JFileChooser chooser=new JFileChooser(System.getenv(""String_Node_Str""));
    chooser.setDialogTitle(""String_Node_Str"" + name + ""String_Node_Str"");
    chooser.setSelectedFile(new File(name));
    if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
      file=chooser.getSelectedFile();
    }
 else {
      System.err.println(""String_Node_Str"");
      return;
    }
  }
  if (file == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  try {
    BufferedWriter bw=new BufferedWriter(new FileWriter(file));
    for (    Line builtString : buffer) {
      String actualString=builtString.toString() + '\n';
      bw.write(actualString);
    }
    bw.close();
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
  }
  saved=true;
}","public void save(){
  if (!isSaved()) {
    JFileChooser chooser=new JFileChooser(System.getenv(""String_Node_Str""));
    chooser.setDialogTitle(""String_Node_Str"" + name + ""String_Node_Str"");
    chooser.setSelectedFile(new File(name));
    if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
      file=chooser.getSelectedFile();
    }
 else {
      System.err.println(""String_Node_Str"");
      return;
    }
  }
  if (file == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  try {
    BufferedWriter bw=new BufferedWriter(new FileWriter(file));
    for (    Line builtString : buffer) {
      String actualString=builtString.toString() + '\n';
      bw.write(actualString);
    }
    bw.close();
    saved=true;
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
  }
  saved=true;
}"
40282,"public void update(){
  super.update();
  title.setValue((saved ? name : ""String_Node_Str"" + name) + ""String_Node_Str"" + (getCaret().iy + 1));
}","public void update(){
  super.update();
  title.setValue((saved ? name : ""String_Node_Str"" + name) + ""String_Node_Str"" + (getCaret().iy + 1));
  if (System.currentTimeMillis() - timer > 1000 && hasBeenSaved()) {
    save();
    timer+=1000;
  }
}"
40283,"public void closeCurrentBuffer(){
  Buffer buff=buffers.pop();
  children.remove(buff);
  if (buffers.isEmpty()) {
    return;
  }
  if (buffers.peek() != null) {
    buffers.peek().setFocus(true);
  }
}","public void closeCurrentBuffer(){
  if (buffers.empty()) {
    return;
  }
  Buffer buff=buffers.pop();
  children.remove(buff);
  if (buffers.isEmpty()) {
    return;
  }
  if (!buffers.empty()) {
    buffers.peek().setFocus(true);
  }
}"
40284,"public Colour darker(){
  this.r*=(1 - 5);
  this.g*=(1 - 5);
  this.b*=(1 - 5);
  return this;
}","public Colour darker(){
  this.r*=(1 - 0.1);
  this.g*=(1 - 0.1);
  this.b*=(1 - 0.1);
  return this;
}"
40285,"public Buffer(File file){
  this.name=file.getName();
  this.saved=true;
  this.file=file;
  buffer.clear();
  this.loadFile(file);
}","public Buffer(File file){
  this(file.getName());
  this.saved=true;
  this.file=file;
  buffer.clear();
  this.loadFile(file);
}"
40286,"public void save(){
  if (!isSaved()) {
    JFileChooser chooser=new JFileChooser(System.getenv(""String_Node_Str""));
    if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
      file=chooser.getSelectedFile();
    }
 else {
      System.err.println(""String_Node_Str"");
      return;
    }
  }
  if (file == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  try {
    BufferedWriter bw=new BufferedWriter(new FileWriter(file));
    for (    StringBuilder builtString : buffer) {
      String actualString=builtString.toString() + '\n';
      bw.write(actualString);
    }
    bw.close();
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
  }
  saved=true;
}","public void save(){
  if (!isSaved()) {
    JFileChooser chooser=new JFileChooser(System.getenv(""String_Node_Str""));
    chooser.setDialogTitle(""String_Node_Str"" + name + ""String_Node_Str"");
    chooser.setSelectedFile(new File(name));
    if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
      file=chooser.getSelectedFile();
    }
 else {
      System.err.println(""String_Node_Str"");
      return;
    }
  }
  if (file == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  try {
    BufferedWriter bw=new BufferedWriter(new FileWriter(file));
    for (    StringBuilder builtString : buffer) {
      String actualString=builtString.toString() + '\n';
      bw.write(actualString);
    }
    bw.close();
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
  }
  saved=true;
}"
40287,"public static Object getSetting(String key){
  if (USER_SETTING_LOOKUP.containsKey(key)) {
    Object res=USER_SETTING_LOOKUP.get(key);
    if (res instanceof Long) {
      return (int)safeLongToInt((long)res);
    }
    return res;
  }
  System.err.println(""String_Node_Str"" + key + ""String_Node_Str"");
  Object res=DEFAULT_SETTING_LOOKUP.get(key);
  if (res instanceof Long) {
    return (int)safeLongToInt((long)res);
  }
  return res;
}","public static Object getSetting(String key){
  if (USER_SETTING_LOOKUP.containsKey(key)) {
    Object res=USER_SETTING_LOOKUP.get(key);
    System.out.println(""String_Node_Str"" + key + ""String_Node_Str""+ res.toString());
    if (res instanceof Long) {
      return (int)safeLongToInt((long)res);
    }
    return res;
  }
  System.err.println(""String_Node_Str"" + key + ""String_Node_Str"");
  Object res=DEFAULT_SETTING_LOOKUP.get(key);
  if (res instanceof Long) {
    return (int)safeLongToInt((long)res);
  }
  return res;
}"
40288,"public void place(char c,int ix,int iy){
  StringBuilder line=getLine(iy);
  if (ix >= line.length()) {
    line.append(c);
  }
 else {
    line.insert(ix,c);
  }
  setLine(line,iy);
}","public void place(char c,int ix,int iy){
  if (ix == 0 && iy == 0 && buffer.size() == 0) {
    buffer.add(new StringBuilder(1));
  }
  StringBuilder line=getLine(iy);
  if (ix >= line.length()) {
    line.append(c);
  }
 else {
    line.insert(ix,c);
  }
  setLine(line,iy);
}"
40289,"@Override public void render(){
  Render.endClip();
  Render.colour(Colour.BLACK);
  Render.rect(x,y,w + 2,h + 2);
  renderChildren(children);
  for (int i=0; i < suggestions.size(); i++) {
    Render.colour(selectedSuggestion == i ? Theme.DARK_ACCENT : Theme.ACCENT);
    Render.rect(x,y + ((i + 1) * h),w,h);
    Render.colour(Colour.WHITE);
    Render.font(caret.getFont());
    Render.drawString(suggestions.get(i).name,x + 5,y + 4 + ((i + 1) * h));
  }
}","@Override public void render(){
  Render.endClip();
  Render.colour(Colour.BLACK);
  Render.rect(x,y,w + 2,h + 2);
  renderChildren(children);
  for (int i=0; i < suggestions.size(); i++) {
    Command sugg=suggestions.get(i);
    Render.colour(selectedSuggestion == i ? Theme.DARK_ACCENT : Theme.ACCENT);
    Render.rect(x,y + ((i + 1) * h),w,h);
    Render.colour(Colour.WHITE);
    Render.font(caret.getFont());
    String suggName=sugg.name;
    Render.drawString(suggName,x + 5,y + 4 + ((i + 1) * h));
    Render.colour(Colour.GRAY);
    Render.drawString(""String_Node_Str"" + sugg.getShortHelp(),x + 5 + caret.getFont().getWidth(suggName),y + 4 + ((i + 1) * h));
  }
}"
40290,"@Override public boolean keyPress(int keyCode){
  findSuggestions(buffer.getLine().toString());
switch (keyCode) {
case Keyboard.KEY_TAB:
    return true;
case Keyboard.KEY_RETURN:
  if (suggestions.size() > 0 && selectedSuggestion != -1) {
    String suggested=suggestions.get(selectedSuggestion).name;
    String oldLine=buffer.getLine(0).toString();
    buffer.setLine(suggested);
    buffer.moveCursor(suggested.length() - oldLine.length(),0);
    Command cmd=suggestions.get(selectedSuggestion);
    if (cmd.argumentCount > 0) {
      buffer.append(' ');
      buffer.moveCursor(1,0);
    }
    removeSuggestions();
  }
 else {
    String[] command=buffer.getBuffer().get(0).toString().split(""String_Node_Str"");
    if (!commands.containsKey(command[0])) {
      System.err.println(""String_Node_Str"");
      hide();
      return true;
    }
    processCommand(command);
    hide();
  }
return true;
case Keyboard.KEY_ESCAPE:
if (timeAlive > 5) {
hide();
}
break;
}
if (suggestions.size() > 0) {
String[] command=buffer.getBuffer().get(0).toString().split(""String_Node_Str"");
int suggestionIndex=getSuggestionIndex(command[0]);
if (suggestionIndex != -1) {
selectedSuggestion=suggestionIndex;
}
}
return false;
}","@Override public boolean keyPress(int keyCode){
  findSuggestions(buffer.getLine().toString());
switch (keyCode) {
case Keyboard.KEY_TAB:
    return true;
case Keyboard.KEY_RETURN:
  if (suggestions.size() > 0 && selectedSuggestion != -1) {
    String suggested=suggestions.get(selectedSuggestion).name;
    String oldLine=buffer.getLine(0).toString();
    buffer.setLine(suggested);
    buffer.moveCursor(suggested.length() - oldLine.length(),0);
    Command cmd=suggestions.get(selectedSuggestion);
    if (cmd.argumentCount > 0) {
      buffer.append(' ');
      buffer.moveCursor(1,0);
    }
    removeSuggestions();
  }
 else {
    String[] command=buffer.getBuffer().get(0).toString().split(""String_Node_Str"");
    if (command[0].equals(""String_Node_Str"")) {
      for (      String c : commands.keySet()) {
        suggestions.add(commands.get(c));
      }
      return true;
    }
    if (!commands.containsKey(command[0])) {
      System.err.println(""String_Node_Str"");
      hide();
      return true;
    }
    processCommand(command);
    hide();
  }
return true;
case Keyboard.KEY_UP:
case Keyboard.KEY_DOWN:
return true;
case Keyboard.KEY_ESCAPE:
if (timeAlive > 5) {
hide();
}
break;
}
if (suggestions.size() > 0) {
String[] command=buffer.getBuffer().get(0).toString().split(""String_Node_Str"");
int suggestionIndex=getSuggestionIndex(command[0]);
if (suggestionIndex != -1) {
selectedSuggestion=suggestionIndex;
}
}
return false;
}"
40291,"@Override public String getHelp(){
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
}","@Override public String getHelp(){
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
}"
40292,"@Override public String getHelp(){
  return ""String_Node_Str"" + ""String_Node_Str"";
}","@Override public String getHelp(){
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
}"
40293,"public void handleShiftCombo(){
  while (Keyboard.next()) {
    if (Keyboard.getEventKeyState()) {
      int keyCode=Keyboard.getEventKey();
switch (keyCode) {
case Keyboard.KEY_LEFT:
        break;
case Keyboard.KEY_RIGHT:
      break;
default :
    owner.place(Keyboard.getEventCharacter(),ix,iy);
  move(1,0);
break;
case Keyboard.KEY_LSHIFT:
case Keyboard.KEY_RSHIFT:
case Keyboard.KEY_LCONTROL:
case Keyboard.KEY_RCONTROL:
break;
}
}
}
}","public void handleShiftCombo(){
  while (Keyboard.next()) {
    if (Keyboard.getEventKeyState()) {
      int keyCode=Keyboard.getEventKey();
switch (keyCode) {
case Keyboard.KEY_LEFT:
        break;
case Keyboard.KEY_RIGHT:
      break;
default :
    handleKeyCode(keyCode);
  break;
case Keyboard.KEY_LSHIFT:
case Keyboard.KEY_RSHIFT:
case Keyboard.KEY_LCONTROL:
case Keyboard.KEY_RCONTROL:
break;
}
}
}
}"
40294,"public void handleKeyCode(int keyCode){
switch (keyCode) {
case Keyboard.KEY_LSHIFT:
case Keyboard.KEY_RSHIFT:
case Keyboard.KEY_LCONTROL:
case Keyboard.KEY_RCONTROL:
case Keyboard.KEY_LMETA:
case Keyboard.KEY_RMETA:
case Keyboard.KEY_LMENU:
case Keyboard.KEY_RMENU:
case Keyboard.KEY_F2:
case Keyboard.KEY_ESCAPE:
    break;
case Keyboard.KEY_BACK:
  if (atStart()) {
    return;
  }
if (hungryBackspace && ix - owner.getTabSize() >= 0) {
  String cut=owner.getLine(iy).substring(ix - owner.getTabSize(),ix);
  if (cut.length() == owner.getTabSize() && cut.trim().length() == 0) {
    for (int i=0; i < owner.getTabSize(); i++) {
      owner.backspace(this);
    }
  }
 else {
    setLast();
    owner.backspace(this);
  }
}
 else {
  setLast();
  owner.backspace(this);
}
break;
case Keyboard.KEY_LEFT:
setLast();
move(ix > 0 ? -1 : 0,0);
break;
case Keyboard.KEY_RIGHT:
setLast();
move(ix < getCurrentLine().length() ? 1 : 0,0);
break;
case Keyboard.KEY_DELETE:
owner.delete(ix,iy);
break;
case Keyboard.KEY_LBRACKET:
char openingBracket=Keyboard.getEventCharacter();
owner.place(openingBracket,ix,iy);
move(1,0);
if (matchBraces) {
owner.place((char)((int)(openingBracket + 2)),ix,iy);
}
break;
case Keyboard.KEY_UP:
if (iy > 0) {
int prevLineLen=getLineOffsetBy(-1).length();
move(ix >= prevLineLen ? prevLineLen - ix : 0,-1);
}
break;
case Keyboard.KEY_DOWN:
if (atEndOfLine() && iy < owner.getLineCount() - 1) {
move(getLineOffsetBy(1).length() - ix,1);
}
 else if (iy < owner.getLineCount() - 1) {
int nextLineLen=getLineOffsetBy(1).length();
move(ix >= nextLineLen ? nextLineLen - ix : 0,1);
}
break;
case Keyboard.KEY_HOME:
move(ix > 0 ? -ix : 0,0);
break;
case Keyboard.KEY_END:
moveToEnd();
break;
case Keyboard.KEY_RETURN:
owner.newline(ix,iy);
move(-ix,1);
carriageReturn();
break;
case Keyboard.KEY_TAB:
move(owner.tab(ix,iy),0);
break;
default :
owner.place(Keyboard.getEventCharacter(),ix,iy);
move(1,0);
break;
}
}","public void handleKeyCode(int keyCode){
switch (keyCode) {
case Keyboard.KEY_LSHIFT:
case Keyboard.KEY_RSHIFT:
case Keyboard.KEY_LCONTROL:
case Keyboard.KEY_RCONTROL:
case Keyboard.KEY_LMETA:
case Keyboard.KEY_RMETA:
case Keyboard.KEY_LMENU:
case Keyboard.KEY_RMENU:
case Keyboard.KEY_F2:
case Keyboard.KEY_ESCAPE:
    break;
case Keyboard.KEY_BACK:
  if (atStart()) {
    return;
  }
if (hungryBackspace && ix - owner.getTabSize() >= 0) {
  String cut=owner.getLine(iy).substring(ix - owner.getTabSize(),ix);
  if (cut.length() == owner.getTabSize() && cut.trim().length() == 0) {
    for (int i=0; i < owner.getTabSize(); i++) {
      owner.backspace(this);
    }
  }
 else {
    setLast();
    owner.backspace(this);
  }
}
 else {
  setLast();
  owner.backspace(this);
}
break;
case Keyboard.KEY_LEFT:
setLast();
move(ix > 0 ? -1 : 0,0);
break;
case Keyboard.KEY_RIGHT:
setLast();
move(ix < getCurrentLine().length() ? 1 : 0,0);
break;
case Keyboard.KEY_DELETE:
owner.delete(ix,iy);
break;
case Keyboard.KEY_LBRACKET:
char openingBracket=Keyboard.getEventCharacter();
owner.place(openingBracket,ix,iy);
move(1,0);
System.out.println(matchBraces);
if (matchBraces) {
owner.place((char)((int)(openingBracket + 2)),ix,iy);
}
break;
case Keyboard.KEY_UP:
if (iy > 0) {
int prevLineLen=getLineOffsetBy(-1).length();
move(ix >= prevLineLen ? prevLineLen - ix : 0,-1);
}
break;
case Keyboard.KEY_DOWN:
if (atEndOfLine() && iy < owner.getLineCount() - 1) {
move(getLineOffsetBy(1).length() - ix,1);
}
 else if (iy < owner.getLineCount() - 1) {
int nextLineLen=getLineOffsetBy(1).length();
move(ix >= nextLineLen ? nextLineLen - ix : 0,1);
}
break;
case Keyboard.KEY_HOME:
move(ix > 0 ? -ix : 0,0);
break;
case Keyboard.KEY_END:
moveToEnd();
break;
case Keyboard.KEY_RETURN:
owner.newline(ix,iy);
move(-ix,1);
carriageReturn();
break;
case Keyboard.KEY_TAB:
move(owner.tab(ix,iy),0);
break;
default :
owner.place(Keyboard.getEventCharacter(),ix,iy);
move(1,0);
break;
}
}"
40295,"public void handleControlCombo(){
  while (Keyboard.next()) {
    if (Keyboard.getEventKeyState()) {
      int keyCode=Keyboard.getEventKey();
switch (keyCode) {
case Keyboard.KEY_C:
        break;
case Keyboard.KEY_N:
      break;
case Keyboard.KEY_W:
    Editor.getInstance().closeCurrentBuffer();
  break;
case Keyboard.KEY_S:
Editor.getInstance().getCurrentBuffer().save();
break;
case Keyboard.KEY_L:
Editor.getInstance().showCommandPalette(""String_Node_Str"");
break;
case Keyboard.KEY_LEFT:
String previousWord=getWordBefore(ix);
move(-previousWord.length(),0);
break;
case Keyboard.KEY_RIGHT:
String nextWord=getWordAfter(ix);
move(nextWord.length(),0);
break;
case Keyboard.KEY_BACK:
String prevWord=getWordBefore(ix);
for (int i=0; i < prevWord.length() + 1; i++) {
owner.backspace(this);
}
break;
case Keyboard.KEY_DELETE:
String next=getWordAfter(ix);
for (int i=0; i < next.length(); i++) {
owner.delete(ix,iy);
}
break;
case Keyboard.KEY_D:
if (iy >= 0 && iy < owner.getLineCount() - 1) {
owner.deleteLine(iy);
carriageReturn();
}
 else if (iy == owner.getLineCount() - 1 && owner.getLine(iy).length() == 0) {
if (iy != 0) {
owner.deleteLine(iy);
move(owner.getLine(iy - 1).length(),-1);
}
}
 else if (owner.getLine(iy).toString().trim().length() == 0) {
owner.deleteLine(iy);
move(owner.getLine(iy - 1).length(),-1);
}
 else {
owner.clearLine(iy);
carriageReturn();
}
break;
default :
break;
case Keyboard.KEY_LSHIFT:
case Keyboard.KEY_RSHIFT:
case Keyboard.KEY_LCONTROL:
case Keyboard.KEY_RCONTROL:
break;
}
}
}
}","public void handleControlCombo(){
  while (Keyboard.next()) {
    if (Keyboard.getEventKeyState()) {
      int keyCode=Keyboard.getEventKey();
switch (keyCode) {
case Keyboard.KEY_C:
        break;
case Keyboard.KEY_N:
      Editor.getInstance().showCommandPalette(""String_Node_Str"");
    break;
case Keyboard.KEY_W:
  Editor.getInstance().closeCurrentBuffer();
break;
case Keyboard.KEY_S:
Editor.getInstance().getCurrentBuffer().save();
break;
case Keyboard.KEY_L:
Editor.getInstance().showCommandPalette(""String_Node_Str"");
break;
case Keyboard.KEY_LEFT:
String previousWord=getWordBefore(ix);
move(-previousWord.length(),0);
break;
case Keyboard.KEY_RIGHT:
String nextWord=getWordAfter(ix);
move(nextWord.length(),0);
break;
case Keyboard.KEY_BACK:
String prevWord=getWordBefore(ix);
for (int i=0; i < prevWord.length() + 1; i++) {
owner.backspace(this);
}
break;
case Keyboard.KEY_DELETE:
String next=getWordAfter(ix);
for (int i=0; i < next.length(); i++) {
owner.delete(ix,iy);
}
break;
case Keyboard.KEY_D:
if (iy >= 0 && iy < owner.getLineCount() - 1) {
owner.deleteLine(iy);
carriageReturn();
}
 else if (iy == owner.getLineCount() - 1 && owner.getLine(iy).length() == 0) {
if (iy != 0) {
owner.deleteLine(iy);
move(owner.getLine(iy - 1).length(),-1);
}
}
 else if (owner.getLine(iy).toString().trim().length() == 0) {
owner.deleteLine(iy);
move(owner.getLine(iy - 1).length(),-1);
}
 else {
owner.clearLine(iy);
carriageReturn();
}
break;
default :
break;
case Keyboard.KEY_LSHIFT:
case Keyboard.KEY_RSHIFT:
case Keyboard.KEY_LCONTROL:
case Keyboard.KEY_RCONTROL:
break;
}
}
}
}"
40296,"public void run(){
  init();
  long timer=System.currentTimeMillis();
  int frames=0;
  while (!Display.isCloseRequested()) {
    render();
    update();
    frames++;
    if (System.currentTimeMillis() - timer > 1000) {
      timer+=1000;
      this.frames=frames;
      frames=0;
    }
  }
  Display.destroy();
  stop();
}","public void run(){
  init();
  long timer=System.currentTimeMillis();
  int frames=0;
  double ns=1000000000.0 / 60.0;
  double delta=0;
  long last=System.nanoTime();
  while (!Display.isCloseRequested()) {
    long now=System.nanoTime();
    delta+=(now - last) / ns;
    last=now;
    if (delta >= 1) {
      render();
      update();
      frames++;
      delta--;
    }
    if (System.currentTimeMillis() - timer > 1000) {
      timer+=1000;
      this.frames=frames;
      frames=0;
    }
    try {
      Thread.sleep(2);
    }
 catch (    Exception e) {
    }
  }
  Display.destroy();
  stop();
}"
40297,"public Buffer(File file){
  this.name=file.getName();
  this.saved=true;
  this.file=file;
  this.loadFile(file);
  this.saved=true;
}","public Buffer(File file){
  this.name=file.getName();
  this.saved=true;
  this.file=file;
  this.loadFile(file);
  this.saved=true;
  buffer.clear();
}"
40298,"@Override public void update(){
  updateChildren(children);
  hack++;
  System.out.println(hack);
}","@Override public void update(){
  updateChildren(children);
  hack++;
}"
40299,"@Override public void keyPress(int keyCode){
switch (keyCode) {
case Keyboard.KEY_RETURN:
    String command=buffer.getBuffer().get(0).toString();
  processCommand(command.split(""String_Node_Str""));
hide();
break;
case Keyboard.KEY_ESCAPE:
if (hack > 5) {
hide();
}
break;
}
}","@Override public void keyPress(int keyCode){
switch (keyCode) {
case Keyboard.KEY_RETURN:
    String command=buffer.getBuffer().get(0).toString();
  String[] args=command.split(""String_Node_Str"");
for (String a : args) {
  System.out.println(a + ""String_Node_Str"");
}
processCommand(args);
hide();
break;
case Keyboard.KEY_ESCAPE:
if (hack > 5) {
hide();
}
break;
}
}"
40300,"public void init(){
  try {
    Display.setDisplayMode(new DisplayMode(1280,720));
    Display.create();
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
  }
  this.w=Display.getWidth();
  this.h=Display.getHeight();
  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();
  glMatrixMode(GL_MODELVIEW);
  glOrtho(0,Display.getWidth(),Display.getHeight(),0,1,-1);
  addChild(new TextArea(Display.getWidth(),Display.getHeight()),Layout.Halves);
  addChild(new TextArea(Display.getWidth(),Display.getHeight()),Layout.Halves);
  DEBUG_INTERFACE=new Panel(Display.getWidth() - 150,15);
  addChild(DEBUG_INTERFACE,Layout.Free);
  DEBUG_INTERFACE.setFocusable(false);
  fps=new Label(""String_Node_Str"");
  DEBUG_INTERFACE.addChild(fps,Layout.Child);
}","public void init(){
  try {
    Display.setDisplayMode(new DisplayMode(1280,720));
    Display.create();
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
  }
  this.w=Display.getWidth();
  this.h=Display.getHeight();
  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();
  glMatrixMode(GL_MODELVIEW);
  glOrtho(0,Display.getWidth(),Display.getHeight(),0,1,-1);
  if (children.size() != 0) {
    children.get(RNG.cap(children.size())).setFocus(true);
  }
  DEBUG_INTERFACE=new Panel(Display.getWidth() - 150,15);
  addChild(DEBUG_INTERFACE,Layout.Free);
  DEBUG_INTERFACE.setFocusable(false);
  fps=new Label(""String_Node_Str"");
}"
40301,"public void update(){
  Input.update();
  checkFocus();
  for (  Component c : children) {
    c.checkFocus();
    if (!c.getFocusable() || c.getFocus()) {
      c.update();
    }
  }
  Display.update();
}","public void update(){
  Input.update();
  if (Keyboard.isKeyDown(Keyboard.KEY_F2)) {
    JFileChooser chooser=new JFileChooser();
    chooser.setVisible(true);
    if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
      File file=chooser.getSelectedFile();
      TextArea buff=new TextArea(Display.getWidth(),Display.getHeight());
      buff.loadFile(file);
      addChild(buff);
    }
  }
  checkFocus();
  for (  Component c : children) {
    c.checkFocus();
    if (!c.getFocusable() || c.getFocus()) {
      c.update();
    }
  }
  Display.update();
}"
40302,"public static void main(String[] args){
  new Editor().start();
}","public static void main(String[] args){
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception e) {
  }
  new Editor().start();
}"
40303,"public void move(int x,int y){
  System.out.println(Math.signum(y));
  ix+=Math.signum(x);
  iy+=Math.signum(y);
  xOffset+=charWidth * x;
  yOffset+=charHeight * y;
}","public void move(int x,int y){
  System.out.println(Math.signum(y));
  ix+=x;
  iy+=y;
  xOffset+=charWidth * x;
  yOffset+=charHeight * y;
}"
40304,"@Override public void update(){
  this.x=owner.x;
  this.y=owner.y;
  while (Keyboard.next()) {
    if (Keyboard.getEventKeyState()) {
switch (Keyboard.getEventKey()) {
case Keyboard.KEY_LSHIFT:
case Keyboard.KEY_RSHIFT:
case Keyboard.KEY_LCONTROL:
case Keyboard.KEY_RCONTROL:
case Keyboard.KEY_LMETA:
case Keyboard.KEY_RMETA:
case Keyboard.KEY_LMENU:
case Keyboard.KEY_RMENU:
        break;
case Keyboard.KEY_LEFT:
      move(-1,0);
    break;
case Keyboard.KEY_RIGHT:
  move(1,0);
break;
case Keyboard.KEY_UP:
move(0,-1);
break;
case Keyboard.KEY_DOWN:
move(0,1);
break;
case Keyboard.KEY_RETURN:
owner.newline();
move(0,1);
reset();
break;
default :
owner.place(Keyboard.getEventCharacter(),ix,iy);
move(1,0);
break;
}
}
}
}","@Override public void update(){
  this.x=owner.x;
  this.y=owner.y;
  while (Keyboard.next()) {
    if (Keyboard.getEventKeyState()) {
switch (Keyboard.getEventKey()) {
case Keyboard.KEY_LSHIFT:
case Keyboard.KEY_RSHIFT:
case Keyboard.KEY_LCONTROL:
case Keyboard.KEY_RCONTROL:
case Keyboard.KEY_LMETA:
case Keyboard.KEY_RMETA:
case Keyboard.KEY_LMENU:
case Keyboard.KEY_RMENU:
        break;
case Keyboard.KEY_BACK:
      owner.backspace(this,ix,iy);
    break;
case Keyboard.KEY_LEFT:
  if (ix > 0) {
    move(-1,0);
  }
break;
case Keyboard.KEY_RIGHT:
if (ix < owner.getLine(iy).length()) {
move(1,0);
}
break;
case Keyboard.KEY_UP:
move(0,-1);
break;
case Keyboard.KEY_DOWN:
move(0,1);
break;
case Keyboard.KEY_HOME:
move(-ix,0);
break;
case Keyboard.KEY_END:
System.out.println(ix);
if (ix < owner.getLine(iy).length()) {
move(owner.getLine(iy).length(),0);
}
break;
case Keyboard.KEY_RETURN:
owner.newline();
move(0,1);
reset();
break;
default :
owner.place(Keyboard.getEventCharacter(),ix,iy);
move(1,0);
break;
}
}
}
}"
40305,"public StringBuilder getLine(int lineNum){
  return buffer.get(lineNum);
}","public StringBuilder getLine(){
  return buffer.get(buffer.size() - 1);
}"
40306,"public void append(char c){
}","public void append(char c){
  setLine(getLine().append(c),buffer.size() - 1);
}"
40307,"public void init(){
  java.awt.DisplayMode mode=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDisplayMode();
  final int width=mode.getWidth() / 12 * 9;
  final int height=mode.getHeight() / 12 * 9;
  try {
    Display.setDisplayMode(new DisplayMode(width,height));
    Display.create();
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
  }
  this.w=Display.getWidth();
  this.h=Display.getHeight();
  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();
  glMatrixMode(GL_MODELVIEW);
  glOrtho(0,Display.getWidth(),Display.getHeight(),0,1,-1);
  if (children.size() != 0) {
    children.get(RNG.cap(children.size())).setFocus(true);
  }
  areas=new Stack<TextArea>();
  palette=new CommandPalette();
  palette.setVisible(false);
}","public void init(){
  java.awt.DisplayMode mode=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDisplayMode();
  final int width=mode.getWidth() / 12 * 9;
  final int height=mode.getHeight() / 12 * 9;
  try {
    Display.setDisplayMode(new DisplayMode(width,height));
    Display.setTitle(""String_Node_Str"");
    Display.create();
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
  }
  this.w=Display.getWidth();
  this.h=Display.getHeight();
  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();
  glMatrixMode(GL_MODELVIEW);
  glOrtho(0,Display.getWidth(),Display.getHeight(),0,1,-1);
  if (children.size() != 0) {
    children.get(RNG.cap(children.size())).setFocus(true);
  }
  areas=new Stack<TextArea>();
  palette=new CommandPalette();
  palette.setVisible(false);
}"
40308,"public void update(){
  if (Input.getKeyPressed(Keyboard.KEY_ESCAPE)) {
    palette.setVisible(true);
    palette.setFocus(true);
  }
 else   if (Input.getKeyPressed(Keyboard.KEY_F2)) {
    JFileChooser chooser=new JFileChooser();
    chooser.setVisible(true);
    if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
      File file=chooser.getSelectedFile();
      TextArea buff=new TextArea(Display.getWidth(),Display.getHeight());
      buff.loadFile(file);
      addChild(buff);
    }
  }
  if (palette.isVisible() && palette.getFocus()) {
    palette.update();
  }
 else {
    updateChildren(children);
  }
  Input.update();
  Display.update();
}","public void update(){
  if (Input.getKeyPressed(Keyboard.KEY_ESCAPE)) {
    palette.setVisible(true);
    palette.setFocus(true);
  }
  if (palette.isVisible() && palette.getFocus()) {
    palette.update();
  }
 else {
    updateChildren(children);
  }
  while (Keyboard.next()) {
  }
  Input.update();
  Display.update();
}"
40309,"public void render(){
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  Render.colour(Colour.BLACK);
  Render.rect(0,0,Display.getWidth(),Display.getHeight());
  renderChildren(children);
  if (palette.isVisible()) {
    palette.render();
  }
  Input.render();
  Render.colour(255,0,0);
  Render.drawString(""String_Node_Str"" + frames,Display.getWidth() - 100,20);
}","public void render(){
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  Render.colour(Colour.WHITE);
  Render.rect(0,0,Display.getWidth(),Display.getHeight());
  renderChildren(children);
  if (palette.isVisible()) {
    palette.render();
  }
  Input.render();
  Render.colour(255,0,0);
  Render.drawString(""String_Node_Str"" + frames,Display.getWidth() - 100,20);
}"
40310,"public void setCurrentTextArea(TextArea area){
  addChild(area);
  this.areas.push(area);
}","public void setCurrentTextArea(TextArea area){
  addChild(area);
  this.areas.push(area);
  area.setFocus(true);
}"
40311,"@Override public void update(){
  this.x=owner.x;
  this.y=owner.y;
  this.visible=owner.visible;
  while (this.visible && Keyboard.next()) {
    if (Keyboard.getEventKeyState()) {
      int keyCode=Keyboard.getEventKey();
switch (keyCode) {
case Keyboard.KEY_LSHIFT:
case Keyboard.KEY_RSHIFT:
case Keyboard.KEY_LCONTROL:
case Keyboard.KEY_RCONTROL:
case Keyboard.KEY_LMETA:
case Keyboard.KEY_RMETA:
case Keyboard.KEY_LMENU:
case Keyboard.KEY_RMENU:
case Keyboard.KEY_F2:
case Keyboard.KEY_ESCAPE:
        break;
case Keyboard.KEY_BACK:
      owner.backspace(this,ix,iy);
    break;
case Keyboard.KEY_LEFT:
  if (ix > 0) {
    move(-1,0);
  }
break;
case Keyboard.KEY_RIGHT:
if (ix < owner.getLine(iy).length()) {
move(1,0);
}
break;
case Keyboard.KEY_UP:
if (iy >= 0) {
int prevLineLen=owner.getLine(iy - 1).length();
if (ix >= prevLineLen) {
move(prevLineLen - ix,-1);
}
 else {
move(0,-1);
}
}
break;
case Keyboard.KEY_DOWN:
if (ix >= owner.getLine(iy).length() && iy < owner.getLineCount() - 1) {
int nextLineLen=owner.getLine(iy + 1).length();
if (ix <= nextLineLen) {
move(nextLineLen - ix,1);
}
 else if (ix >= nextLineLen) {
move(nextLineLen - ix,1);
}
}
 else if (iy < owner.getLineCount() - 1) {
move(0,1);
}
break;
case Keyboard.KEY_HOME:
if (ix > 0) {
move(-ix,0);
}
break;
case Keyboard.KEY_END:
if (ix < owner.getLine(iy).length()) {
move(owner.getLine(iy).length() - ix,0);
}
break;
case Keyboard.KEY_RETURN:
owner.newline(ix,iy);
move(-ix,1);
carriageReturn();
break;
case Keyboard.KEY_TAB:
int tabSize=owner.tab(ix,iy);
move(tabSize,0);
break;
default :
owner.place(Keyboard.getEventCharacter(),ix,iy);
move(1,0);
break;
}
if (cursorAction != null) {
cursorAction.keyPress(keyCode);
}
}
}
}","@Override public void update(){
  this.x=owner.x;
  this.y=owner.y;
  this.visible=owner.visible;
  while (Keyboard.next()) {
    if (Keyboard.getEventKeyState()) {
      int keyCode=Keyboard.getEventKey();
switch (keyCode) {
case Keyboard.KEY_LSHIFT:
case Keyboard.KEY_RSHIFT:
case Keyboard.KEY_LCONTROL:
case Keyboard.KEY_RCONTROL:
case Keyboard.KEY_LMETA:
case Keyboard.KEY_RMETA:
case Keyboard.KEY_LMENU:
case Keyboard.KEY_RMENU:
case Keyboard.KEY_F2:
case Keyboard.KEY_ESCAPE:
        break;
case Keyboard.KEY_BACK:
      owner.backspace(this,ix,iy);
    break;
case Keyboard.KEY_LEFT:
  if (ix > 0) {
    move(-1,0);
  }
break;
case Keyboard.KEY_RIGHT:
if (ix < owner.getLine(iy).length()) {
move(1,0);
}
break;
case Keyboard.KEY_UP:
if (iy >= 0) {
int prevLineLen=owner.getLine(iy - 1).length();
if (ix >= prevLineLen) {
move(prevLineLen - ix,-1);
}
 else {
move(0,-1);
}
}
break;
case Keyboard.KEY_DOWN:
if (ix >= owner.getLine(iy).length() && iy < owner.getLineCount() - 1) {
int nextLineLen=owner.getLine(iy + 1).length();
if (ix <= nextLineLen) {
move(nextLineLen - ix,1);
}
 else if (ix >= nextLineLen) {
move(nextLineLen - ix,1);
}
}
 else if (iy < owner.getLineCount() - 1) {
move(0,1);
}
break;
case Keyboard.KEY_HOME:
if (ix > 0) {
move(-ix,0);
}
break;
case Keyboard.KEY_END:
if (ix < owner.getLine(iy).length()) {
move(owner.getLine(iy).length() - ix,0);
}
break;
case Keyboard.KEY_RETURN:
owner.newline(ix,iy);
move(-ix,1);
carriageReturn();
break;
case Keyboard.KEY_TAB:
int tabSize=owner.tab(ix,iy);
move(tabSize,0);
break;
default :
owner.place(Keyboard.getEventCharacter(),ix,iy);
move(1,0);
break;
}
if (cursorAction != null) {
cursorAction.keyPress(keyCode);
}
}
}
}"
40312,"public void clear(){
  caret.carriageReturn();
  buffer.clear();
  buffer.add(new StringBuilder());
}","public void clear(){
  caret.carriageReturn();
  buffer.clear();
  buffer.add(new StringBuilder());
  caret.reset();
}"
40313,"@Override public void update(){
  updateChildren(children);
}","@Override public void update(){
  updateChildren(children);
  hack++;
  System.out.println(hack);
}"
40314,"public CommandPalette(){
  this.defaultHeight=Render.MONOSPACED_FONT.getHeight() + 10;
  this.w=512;
  this.h=defaultHeight;
  this.x=(Display.getWidth() / 2) - (this.w / 2);
  this.y=0;
  this.buffer=new TextArea(this.w,defaultHeight);
  buffer.setFocus(true);
  buffer.getCaret().setCursorAction(this);
  addChild(buffer,Layout.Child);
}","public CommandPalette(){
  this.defaultHeight=Render.MONOSPACED_FONT.getHeight() + 10;
  this.w=512;
  this.h=defaultHeight;
  this.x=(Display.getWidth() / 2) - (this.w / 2);
  this.y=0;
  this.buffer=new TextArea(this.w,defaultHeight);
  buffer.setBackground(Colour.BLACK);
  buffer.setFocus(true);
  buffer.getCaret().setCursorAction(this);
  addChild(buffer,Layout.Child);
}"
40315,"@Override public void keyPress(int keyCode){
  if (keyCode == Keyboard.KEY_RETURN) {
    String command=buffer.getBuffer().get(0).toString();
    processCommand(command.split(""String_Node_Str""));
    buffer.clear();
    buffer.getCaret().reset();
    setVisible(false);
    setFocus(false);
  }
}","@Override public void keyPress(int keyCode){
switch (keyCode) {
case Keyboard.KEY_RETURN:
    String command=buffer.getBuffer().get(0).toString();
  processCommand(command.split(""String_Node_Str""));
hide();
break;
case Keyboard.KEY_ESCAPE:
if (hack > 5) {
hide();
}
break;
}
}"
40316,"@Override public void action(String[] arguments){
  String filename=arguments[0];
  TextArea area=new TextArea(filename);
  area.setBackground(new Colour(0x3D3331));
  area.setCursorColour(new Colour(0x61A598));
  area.setForeground(Colour.PINK);
  Editor.getInstance().clearFocus();
  Editor.getInstance().setCurrentTextArea(area);
}","@Override public void action(String[] arguments){
  String filename=arguments[0];
  TextArea area=new TextArea(filename);
  Editor.getInstance().clearFocus();
  Editor.getInstance().setCurrentTextArea(area);
}"
40317,"@Override public void action(String[] arguments){
}","@Override public void action(String[] arguments){
  System.out.println(arguments.toString());
  if (arguments[0].equals(""String_Node_Str"")) {
    JFileChooser chooser=new JFileChooser();
    chooser.setVisible(true);
    if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
      File file=chooser.getSelectedFile();
      TextArea buff=new TextArea(file.getName());
      buff.loadFile(file);
      Editor.getInstance().setCurrentTextArea(buff);
    }
  }
}"
40318,"public static void render(){
  Render.colour(Colour.BLACK);
  Render.rect(x,y,w,h);
}","public static void render(){
  Render.colour(Colour.YELLOW);
  Render.rect(x,y,w,h);
}"
40319,"public void init(){
  java.awt.DisplayMode mode=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDisplayMode();
  final int width=mode.getWidth() / 12 * 9;
  final int height=mode.getHeight() / 12 * 9;
  try {
    Display.setDisplayMode(new DisplayMode(width,height));
    Display.setTitle(""String_Node_Str"");
    Display.create();
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
  }
  this.w=Display.getWidth();
  this.h=Display.getHeight();
  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();
  glMatrixMode(GL_MODELVIEW);
  glOrtho(0,Display.getWidth(),Display.getHeight(),0,1,-1);
  if (children.size() != 0) {
    children.get(RNG.cap(children.size())).setFocus(true);
  }
  areas=new Stack<TextArea>();
  palette=new CommandPalette();
  palette.setVisible(false);
}","public void init(){
  java.awt.DisplayMode mode=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDisplayMode();
  final int width=mode.getWidth() / 12 * 9;
  final int height=mode.getHeight() / 12 * 9;
  try {
    Display.setDisplayMode(new DisplayMode(width,height));
    Display.setTitle(""String_Node_Str"");
    Display.create();
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
  }
  this.w=Display.getWidth();
  this.h=Display.getHeight();
  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();
  glMatrixMode(GL_MODELVIEW);
  glOrtho(0,Display.getWidth(),Display.getHeight(),0,1,-1);
  if (children.size() != 0) {
    children.get(RNG.cap(children.size())).setFocus(true);
  }
  buffers=new Stack<Buffer>();
  palette=new CommandPalette();
  palette.setVisible(false);
}"
40320,"public void closeCurrentBuffer(){
  TextArea area=areas.pop();
  children.remove(area);
  if (areas.isEmpty()) {
    return;
  }
  areas.peek().setFocus(true);
}","public void closeCurrentBuffer(){
  Buffer buff=buffers.pop();
  children.remove(buff);
  if (buffers.isEmpty()) {
    return;
  }
  buffers.peek().setFocus(true);
}"
40321,"@Override public void update(){
  this.x=owner.x;
  this.y=owner.y;
  this.visible=owner.visible;
  while (Keyboard.next()) {
    if (Keyboard.getEventKeyState()) {
      int keyCode=Keyboard.getEventKey();
switch (keyCode) {
case Keyboard.KEY_LSHIFT:
case Keyboard.KEY_RSHIFT:
case Keyboard.KEY_LCONTROL:
case Keyboard.KEY_RCONTROL:
case Keyboard.KEY_LMETA:
case Keyboard.KEY_RMETA:
case Keyboard.KEY_LMENU:
case Keyboard.KEY_RMENU:
case Keyboard.KEY_F2:
case Keyboard.KEY_ESCAPE:
        break;
case Keyboard.KEY_BACK:
      owner.backspace(this,ix,iy);
    break;
case Keyboard.KEY_LEFT:
  if (ix > 0) {
    move(-1,0);
  }
break;
case Keyboard.KEY_RIGHT:
if (ix < owner.getLine(iy).length()) {
move(1,0);
}
break;
case Keyboard.KEY_UP:
if (iy >= 0) {
int prevLineLen=owner.getLine(iy - 1).length();
if (ix >= prevLineLen) {
move(prevLineLen - ix,-1);
}
 else {
move(0,-1);
}
}
break;
case Keyboard.KEY_DOWN:
if (ix >= owner.getLine(iy).length() && iy < owner.getLineCount() - 1) {
int nextLineLen=owner.getLine(iy + 1).length();
if (ix <= nextLineLen) {
move(nextLineLen - ix,1);
}
 else if (ix >= nextLineLen) {
move(nextLineLen - ix,1);
}
}
 else if (iy < owner.getLineCount() - 1) {
move(0,1);
}
break;
case Keyboard.KEY_HOME:
if (ix > 0) {
move(-ix,0);
}
break;
case Keyboard.KEY_END:
if (ix < owner.getLine(iy).length()) {
move(owner.getLine(iy).length() - ix,0);
}
break;
case Keyboard.KEY_RETURN:
owner.newline(ix,iy);
move(-ix,1);
carriageReturn();
break;
case Keyboard.KEY_TAB:
int tabSize=owner.tab(ix,iy);
move(tabSize,0);
break;
default :
owner.place(Keyboard.getEventCharacter(),ix,iy);
move(1,0);
break;
}
if (cursorAction != null) {
cursorAction.keyPress(keyCode);
}
}
}
}","@Override public void update(){
  this.x=owner.x;
  this.y=owner.y;
  this.visible=owner.visible;
  while (Keyboard.next()) {
    if (Keyboard.getEventKeyState()) {
      int keyCode=Keyboard.getEventKey();
switch (keyCode) {
case Keyboard.KEY_LSHIFT:
case Keyboard.KEY_RSHIFT:
case Keyboard.KEY_LCONTROL:
case Keyboard.KEY_RCONTROL:
case Keyboard.KEY_LMETA:
case Keyboard.KEY_RMETA:
case Keyboard.KEY_LMENU:
case Keyboard.KEY_RMENU:
case Keyboard.KEY_F2:
case Keyboard.KEY_ESCAPE:
        break;
case Keyboard.KEY_BACK:
      owner.backspace(this,ix,iy);
    break;
case Keyboard.KEY_LEFT:
  if (ix > 0) {
    move(-1,0);
  }
break;
case Keyboard.KEY_RIGHT:
if (ix < owner.getLine(iy).length()) {
move(1,0);
}
break;
case Keyboard.KEY_UP:
if (iy > 0) {
int prevLineLen=owner.getLine(iy - 1).length();
if (ix >= prevLineLen) {
move(prevLineLen - ix,-1);
}
 else {
move(0,-1);
}
}
break;
case Keyboard.KEY_DOWN:
if (ix >= owner.getLine(iy).length() && iy < owner.getLineCount() - 1) {
int nextLineLen=owner.getLine(iy + 1).length();
if (ix <= nextLineLen) {
move(nextLineLen - ix,1);
}
 else if (ix >= nextLineLen) {
move(nextLineLen - ix,1);
}
}
 else if (iy < owner.getLineCount() - 1) {
move(0,1);
}
break;
case Keyboard.KEY_HOME:
if (ix > 0) {
move(-ix,0);
}
break;
case Keyboard.KEY_END:
if (ix < owner.getLine(iy).length()) {
move(owner.getLine(iy).length() - ix,0);
}
break;
case Keyboard.KEY_RETURN:
owner.newline(ix,iy);
move(-ix,1);
carriageReturn();
break;
case Keyboard.KEY_TAB:
int tabSize=owner.tab(ix,iy);
move(tabSize,0);
break;
default :
owner.place(Keyboard.getEventCharacter(),ix,iy);
move(1,0);
break;
}
if (cursorAction != null) {
cursorAction.keyPress(keyCode);
}
}
}
}"
40322,"public TextArea(String name){
  this(name,Display.getWidth(),Display.getHeight());
}","public TextArea(){
  this(Display.getWidth(),Display.getHeight());
}"
40323,"@Override public void action(String[] arguments){
  String filename=arguments[0];
  TextArea area=new TextArea(filename);
  Editor.getInstance().clearFocus();
  Editor.getInstance().setCurrentTextArea(area);
}","@Override public void action(String[] arguments){
  String filename=arguments[0];
  Editor.getInstance().setCurrentBuffer(new Buffer(filename,false));
}"
40324,"@Override public void action(String[] arguments){
  System.out.println(arguments.toString());
  if (arguments[0].equals(""String_Node_Str"")) {
    JFileChooser chooser=new JFileChooser();
    chooser.setVisible(true);
    if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
      File file=chooser.getSelectedFile();
      TextArea buff=new TextArea(file.getName());
      buff.loadFile(file);
      Editor.getInstance().setCurrentTextArea(buff);
    }
  }
}","@Override public void action(String[] arguments){
  if (arguments[0].equals(""String_Node_Str"")) {
    JFileChooser chooser=new JFileChooser();
    chooser.setVisible(true);
    if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
      File file=chooser.getSelectedFile();
      Editor.getInstance().setCurrentBuffer(new Buffer(file));
    }
    return;
  }
  File potentialFile=new File(arguments[0]);
  if (potentialFile.isFile()) {
    Editor.getInstance().setCurrentBuffer(new Buffer(potentialFile));
    return;
  }
}"
40325,"@POST @Path(PROTOBUF_URL) @Produces(MediaTypeExt.APPLICATION_PROTOBUF) @Consumes(MediaTypeExt.APPLICATION_PROTOBUF) public ConnectorMessage checkConfiguration(ConnectorMessage msg) throws SQLException {
  if (msg.getType().equals(ConnectorMessage.Type.RAT_REPO_REQUEST)) {
    try {
      AttestationRepositoryRequest request=msg.getAttestationRepositoryRequest();
      int numPcrValues=request.getPcrValuesCount();
      IdsAttestationType type=request.getAtype();
      if (numPcrValues > 0) {
switch (type) {
case BASIC:
          if (numPcrValues == 11) {
            return this.checkMessage(msg);
          }
 else {
            return this.sendError(""String_Node_Str"" + numPcrValues + ""String_Node_Str"",msg.getId());
          }
case ADVANCED:
        return this.checkMessage(msg);
case ALL:
      if (numPcrValues == 24) {
        return this.checkMessage(msg);
      }
 else {
        return this.sendError(""String_Node_Str"" + numPcrValues + ""String_Node_Str"",msg.getId());
      }
default :
    return this.sendError(""String_Node_Str"",msg.getId());
}
}
 else {
return this.sendError(""String_Node_Str"",msg.getId());
}
}
 catch (Exception e) {
return this.sendError(e.getMessage(),msg.getId());
}
}
 else {
return this.sendError(""String_Node_Str"",msg.getId());
}
}","@POST @Path(PROTOBUF_URL) @Produces(MediaTypeExt.APPLICATION_PROTOBUF) @Consumes(MediaTypeExt.APPLICATION_PROTOBUF) public ConnectorMessage checkConfiguration(ConnectorMessage msg){
  if (msg.getType().equals(ConnectorMessage.Type.RAT_REPO_REQUEST)) {
    try {
      AttestationRepositoryRequest request=msg.getAttestationRepositoryRequest();
      int numPcrValues=request.getPcrValuesCount();
      IdsAttestationType type=request.getAtype();
      if (numPcrValues > 0) {
switch (type) {
case BASIC:
          if (numPcrValues == 11) {
            return this.checkMessage(msg);
          }
 else {
            return this.sendError(""String_Node_Str"" + numPcrValues + ""String_Node_Str"",msg.getId());
          }
case ADVANCED:
        return this.checkMessage(msg);
case ALL:
      if (numPcrValues == 24) {
        return this.checkMessage(msg);
      }
 else {
        return this.sendError(""String_Node_Str"" + numPcrValues + ""String_Node_Str"",msg.getId());
      }
default :
    return this.sendError(""String_Node_Str"",msg.getId());
}
}
 else {
return this.sendError(""String_Node_Str"",msg.getId());
}
}
 catch (Exception e) {
return this.sendError(e.getMessage(),msg.getId());
}
}
 else {
return this.sendError(""String_Node_Str"",msg.getId());
}
}"
40326,"@DELETE @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public String deleteConfiguration(@PathParam(""String_Node_Str"") String cid) throws NumberFormatException, SQLException {
  this.setCORSHeader(response,corsEnabled);
  if (isInteger(cid)) {
    if (this.db.deleteConfigurationById(Integer.parseInt(cid))) {
      return cid;
    }
 else {
      throw new InternalServerErrorException();
    }
  }
 else {
    throw new InternalServerErrorException();
  }
}","@DELETE @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public String deleteConfiguration(@PathParam(""String_Node_Str"") String cid) throws SQLException {
  this.setCORSHeader(response,corsEnabled);
  if (isInteger(cid)) {
    if (this.db.deleteConfigurationById(Integer.parseInt(cid))) {
      return cid;
    }
 else {
      throw new InternalServerErrorException();
    }
  }
 else {
    throw new InternalServerErrorException();
  }
}"
40327,"public synchronized byte[] waitForResponse(){
  while (this.rsp == null) {
    try {
      this.wait();
    }
 catch (    InterruptedException e) {
      LOG.error(e.getMessage(),e);
    }
  }
  return this.rsp;
}","public synchronized byte[] waitForResponse(){
  while (this.rsp == null) {
    try {
      this.wait();
    }
 catch (    InterruptedException e) {
      LOG.error(e.getMessage(),e);
    }
  }
  byte[] result=rsp;
  this.rsp=null;
  return result;
}"
40328,"private int readMessageLength(SelectionKey key,UnixSocketChannel channel) throws IOException {
  lengthBuffer.clear();
  int length;
  try {
    int numread=channel.read(lengthBuffer);
    if (numread == 4) {
      length=new BigInteger(lengthBuffer.array()).intValue();
    }
 else {
      length=-1;
    }
  }
 catch (  IOException e) {
    key.cancel();
    channel.close();
    return -1;
  }
  return length;
}","private int readMessageLength(SelectionKey key,UnixSocketChannel channel) throws IOException {
  lengthBuffer.clear();
  int length;
  try {
    int numread=channel.read(lengthBuffer);
    if (numread == 4) {
      length=new BigInteger(lengthBuffer.array()).intValue();
    }
 else {
      length=-1;
    }
  }
 catch (  IOException e) {
    key.cancel();
    channel.close();
    return -1;
  }
  LOG.debug(""String_Node_Str"" + length);
  return length;
}"
40329,"@Override public TransformationDecision requestTranformations(ServiceNode lastServiceNode){
  TransformationDecision result=new TransformationDecision();
  String query=this.createTransformationQuery(lastServiceNode);
  LOG.info(""String_Node_Str"" + query);
  try {
    List<SolveInfo> solveInfo=this.engine.query(query,false);
    if (solveInfo.isEmpty()) {
      return result;
    }
    List<Var> vars=solveInfo.get(0).getBindingVars();
    Set<String> labelsToRemove=vars.stream().filter(v -> ""String_Node_Str"".equals(v.getName())).map(var -> var.getTerm().toString()).collect(Collectors.toSet());
    Set<String> labelsToAdd=vars.stream().filter(v -> ""String_Node_Str"".equals(v.getName())).map(var -> var.getTerm().toString()).collect(Collectors.toSet());
    result.getLabelsToRemove().addAll(labelsToRemove);
    result.getLabelsToAdd().addAll(labelsToAdd);
  }
 catch (  NoMoreSolutionException|MalformedGoalException|NoSolutionException e) {
    LOG.error(e.getMessage(),e);
  }
  return result;
}","@Override public TransformationDecision requestTranformations(ServiceNode lastServiceNode){
  TransformationDecision result=new TransformationDecision();
  String query=this.createTransformationQuery(lastServiceNode);
  LOG.info(""String_Node_Str"" + query);
  try {
    List<SolveInfo> solveInfo=this.engine.query(query,false);
    if (solveInfo.isEmpty()) {
      return result;
    }
    List<Var> vars=solveInfo.get(0).getBindingVars();
    Set<String> labelsToRemove=new HashSet<>();
    for (    Var var : vars) {
      if (""String_Node_Str"".equals(var.getName()) && var.getLink() instanceof Struct) {
        Struct labelStruct=((Struct)var.getLink());
        int labelCount=labelStruct.getArity();
        for (int i=0; i < labelCount; i++) {
          Term label=labelStruct.getTerm(i);
          if (!label.isEmptyList()) {
            labelsToRemove.add(label.toString());
          }
        }
      }
    }
    Set<String> labelsToAdd=new HashSet<>();
    for (    Var var : vars) {
      if (""String_Node_Str"".equals(var.getName()) && var.getLink() instanceof Struct) {
        Struct labelStruct=((Struct)var.getLink());
        int labelCount=labelStruct.getArity();
        for (int i=0; i < labelCount; i++) {
          Term label=labelStruct.getTerm(i);
          if (!label.isEmptyList()) {
            labelsToAdd.add(label.toString());
          }
        }
      }
    }
    result.getLabelsToRemove().addAll(labelsToRemove);
    result.getLabelsToAdd().addAll(labelsToAdd);
  }
 catch (  NoMoreSolutionException|MalformedGoalException|NoSolutionException e) {
    LOG.error(e.getMessage(),e);
  }
  return result;
}"
40330,"@Test public void testTransformationsMatch() throws IOException {
  PolicyDecisionPoint pdp=new PolicyDecisionPoint();
  pdp.activate(null);
  pdp.loadPolicy(new ByteArrayInputStream(EXAMPLE_POLICY.getBytes()));
  ServiceNode node=new ServiceNode(""String_Node_Str"",null,null);
  TransformationDecision trans=pdp.requestTranformations(node);
  assertNotNull(trans);
  assertNotNull(trans.getLabelsToAdd());
  assertNotNull(trans.getLabelsToRemove());
  assertEquals(1,trans.getLabelsToAdd().size());
  assertEquals(1,trans.getLabelsToRemove().size());
  assertTrue(trans.getLabelsToAdd().contains(""String_Node_Str""));
  assertTrue(trans.getLabelsToRemove().contains(""String_Node_Str""));
}","@Test public void testTransformationsMatch() throws IOException {
  PolicyDecisionPoint pdp=new PolicyDecisionPoint();
  pdp.activate(null);
  pdp.loadPolicy(new ByteArrayInputStream(EXAMPLE_POLICY.getBytes()));
  ServiceNode node=new ServiceNode(""String_Node_Str"",null,null);
  TransformationDecision trans=pdp.requestTranformations(node);
  assertNotNull(trans);
  assertNotNull(trans.getLabelsToAdd());
  assertNotNull(trans.getLabelsToRemove());
  assertEquals(2,trans.getLabelsToAdd().size());
  assertEquals(1,trans.getLabelsToRemove().size());
  assertTrue(trans.getLabelsToAdd().contains(""String_Node_Str""));
  assertTrue(trans.getLabelsToRemove().contains(""String_Node_Str""));
}"
40331,"@Override protected AsyncHttpClient createClient(AsyncHttpClientConfig config){
  AsyncHttpClient client;
  if (config == null) {
    config=new DefaultAsyncHttpClientConfig.Builder().setEnabledProtocols(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}).build();
    client=new DefaultAsyncHttpClient(config);
  }
 else {
    client=new DefaultAsyncHttpClient();
  }
  return client;
}","@Override protected AsyncHttpClient createClient(AsyncHttpClientConfig config){
  AsyncHttpClient client;
  if (config == null) {
    config=new DefaultAsyncHttpClientConfig.Builder().setEnabledProtocols(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}).build();
    client=new DefaultAsyncHttpClient(config);
  }
 else {
    client=new DefaultAsyncHttpClient(config);
  }
  return client;
}"
40332,"/** 
 * Stop a route based on an id.
 */
@GET @Path(""String_Node_Str"") public String stopRoute(@PathParam(""String_Node_Str"") String id){
  List<CamelContext> camelO=WebConsoleComponent.getCamelContexts();
  for (  CamelContext cCtx : camelO) {
    Route rt=cCtx.getRoute(id);
    if (rt != null) {
      try {
        cCtx.stopRoute(id);
      }
 catch (      Exception e) {
        return ""String_Node_Str"";
      }
    }
  }
  return ""String_Node_Str"";
}","/** 
 * Stop a route based on an id.
 */
@GET @Path(""String_Node_Str"") public String stopRoute(@PathParam(""String_Node_Str"") String id){
  List<CamelContext> camelO=WebConsoleComponent.getCamelContexts();
  for (  CamelContext cCtx : camelO) {
    Route rt=cCtx.getRoute(id);
    if (rt != null) {
      try {
        cCtx.suspendRoute(id);
      }
 catch (      Exception e) {
        return ""String_Node_Str"";
      }
    }
  }
  return ""String_Node_Str"";
}"
40333,"/** 
 * Returns map from camel context to list of camel routes. Example: {""camel-1"":[""Route(demo-route)[[From[timer://simpleTimer?period\u003d10000]] -\u003e [SetBody[simple{This is a demo body!}], Log[The message contains ${body}]]]""]}
 * @return
 */
@GET @Path(""String_Node_Str"") @Produces(""String_Node_Str"") public String list(){
  List<HashMap<String,String>> result=new ArrayList<>();
  List<CamelContext> camelO=WebConsoleComponent.getCamelContexts();
  for (  CamelContext cCtx : camelO) {
    for (    RouteDefinition rd : cCtx.getRouteDefinitions()) {
      HashMap<String,String> route=new HashMap<>();
      route.put(""String_Node_Str"",rd.getId());
      route.put(""String_Node_Str"",(rd.getDescriptionText() != null) ? rd.getDescriptionText() : ""String_Node_Str"");
      route.put(""String_Node_Str"",routeToDot(rd));
      route.put(""String_Node_Str"",rd.getShortName());
      route.put(""String_Node_Str"",cCtx.getName());
      route.put(""String_Node_Str"",String.valueOf(cCtx.getUptimeMillis()));
      route.put(""String_Node_Str"",cCtx.getStatus().toString());
      result.add(route);
    }
  }
  return new GsonBuilder().create().toJson(result);
}","/** 
 * Returns map from camel context to list of camel routes. Example: {""camel-1"":[""Route(demo-route)[[From[timer://simpleTimer?period\u003d10000]] -\u003e [SetBody[simple{This is a demo body!}], Log[The message contains ${body}]]]""]}
 * @return
 */
@GET @Path(""String_Node_Str"") @Produces(""String_Node_Str"") public String list(){
  List<HashMap<String,String>> result=new ArrayList<>();
  List<CamelContext> camelO=WebConsoleComponent.getCamelContexts();
  for (  CamelContext cCtx : camelO) {
    for (    RouteDefinition rd : cCtx.getRouteDefinitions()) {
      HashMap<String,String> route=new HashMap<>();
      route.put(""String_Node_Str"",rd.getId());
      route.put(""String_Node_Str"",(rd.getDescriptionText() != null) ? rd.getDescriptionText() : ""String_Node_Str"");
      route.put(""String_Node_Str"",routeToDot(rd));
      route.put(""String_Node_Str"",rd.getShortName());
      route.put(""String_Node_Str"",cCtx.getName());
      route.put(""String_Node_Str"",String.valueOf(cCtx.getUptimeMillis()));
      route.put(""String_Node_Str"",String.valueOf(cCtx.getUptimeMillis()));
      route.put(""String_Node_Str"",cCtx.getRouteStatus(rd.getId()).toString());
      result.add(route);
    }
  }
  return new GsonBuilder().create().toJson(result);
}"
40334,"public MessageLite sendTPM2Ddata(Event e){
  this.yourNonce=e.getMessage().getAttestationResponse().getQualifyingData().toString();
  this.yourQuoted=DatatypeConverter.parseHexBinary(e.getMessage().getAttestationResponse().getQuoted());
  this.yourSignature=DatatypeConverter.parseHexBinary(e.getMessage().getAttestationResponse().getSignature());
  this.certUri=e.getMessage().getAttestationResponse().getCertificateUri();
  byte[] bkey=new byte[0];
  PublicKey publicKey=null;
  PublicKeyConverter conv=null;
  TPM2B_PUBLIC key=null;
  try {
    bkey=this.fetchPublicKey(this.certUri);
    key=new TPM2B_PUBLIC(bkey);
    conv=new PublicKeyConverter(key);
    publicKey=conv.getPublicKey();
  }
 catch (  Exception ex) {
    LOG.debug(""String_Node_Str"" + this.certUri + ""String_Node_Str""+ ex.getMessage());
    ex.printStackTrace();
    return ControllerToTpm.newBuilder().build();
  }
  try {
    TPMT_SIGNATURE signature=new TPMT_SIGNATURE(this.yourSignature);
    TPMS_ATTEST quoted=new TPMS_ATTEST(this.yourQuoted);
    byte[] dig=quoted.getAttested().getDigest().getBuffer();
    byte[] sign=signature.getSignature().getSig();
switch (signature.getSignature().getHashAlg()) {
case TPM_ALG_SHA256:
      LOG.debug(""String_Node_Str"" + ByteArrayUtil.toPrintableHexString(publicKey.getEncoded()).replaceAll(""String_Node_Str"",""String_Node_Str""));
    LOG.debug(""String_Node_Str"" + ByteArrayUtil.toPrintableHexString(sign).replaceAll(""String_Node_Str"",""String_Node_Str""));
  LOG.debug(""String_Node_Str"" + ByteArrayUtil.toPrintableHexString(dig).replaceAll(""String_Node_Str"",""String_Node_Str""));
LOG.debug(""String_Node_Str"" + new String(quoted.getExtraData().getBuffer()));
LOG.debug(""String_Node_Str"" + this.checkSignRsaPssSha256(publicKey,sign,dig));
break;
case TPM_ALG_SHA1:
default :
LOG.debug(""String_Node_Str"" + signature.getSignature().getHashAlg().toString() + ""String_Node_Str"");
break;
}
}
 catch (Exception ex) {
LOG.debug(""String_Node_Str"" + ex.getMessage());
ex.printStackTrace();
return ControllerToTpm.newBuilder().build();
}
if (thread.isAlive()) {
try {
ControllerToTpm msg=ControllerToTpm.newBuilder().setAtype(this.aType).setQualifyingData(this.yourNonce).setCode(Code.INTERNAL_ATTESTATION_REQ).build();
client.send(msg.toByteArray(),this.handler);
TpmToController answer=this.handler.waitForResponse();
return ConnectorMessage.newBuilder().setId(0).setType(ConnectorMessage.Type.RAT_RESPONSE).setAttestationResponse(AttestationResponse.newBuilder().setAtype(this.aType).setHalg(answer.getHalg()).setQuoted(answer.getQuoted()).setSignature(answer.getSignature()).addAllPcrValues(answer.getPcrValuesList()).setCertificateUri(answer.getCertificateUri()).build()).build();
}
 catch (IOException e1) {
LOG.debug(""String_Node_Str"");
e1.printStackTrace();
return ControllerToTpm.newBuilder().build();
}
catch (InterruptedException e1) {
LOG.debug(""String_Node_Str"");
e1.printStackTrace();
return ControllerToTpm.newBuilder().build();
}
}
 else {
LOG.debug(""String_Node_Str"");
return null;
}
}","public MessageLite sendTPM2Ddata(Event e){
  this.yourNonce=e.getMessage().getAttestationResponse().getQualifyingData().toString();
  this.yourQuoted=DatatypeConverter.parseHexBinary(e.getMessage().getAttestationResponse().getQuoted());
  this.yourSignature=DatatypeConverter.parseHexBinary(e.getMessage().getAttestationResponse().getSignature());
  this.certUri=e.getMessage().getAttestationResponse().getCertificateUri();
  byte[] bkey=new byte[0];
  PublicKey publicKey=null;
  PublicKeyConverter conv=null;
  TPM2B_PUBLIC key=null;
  try {
    bkey=this.fetchPublicKey(this.certUri);
    key=new TPM2B_PUBLIC(bkey);
    conv=new PublicKeyConverter(key);
    publicKey=conv.getPublicKey();
  }
 catch (  Exception ex) {
    LOG.debug(""String_Node_Str"" + this.certUri + ""String_Node_Str""+ ex.getMessage());
    ex.printStackTrace();
    return ControllerToTpm.newBuilder().build();
  }
  try {
    TPMT_SIGNATURE signature=new TPMT_SIGNATURE(this.yourSignature);
    TPMS_ATTEST quoted=new TPMS_ATTEST(this.yourQuoted);
    byte[] dig=quoted.getAttested().getDigest().getBuffer();
    LOG.debug(signature.toString());
    byte[] sign=signature.getSignature().getSig();
switch (signature.getSignature().getHashAlg()) {
case TPM_ALG_SHA256:
      LOG.debug(""String_Node_Str"" + ByteArrayUtil.toPrintableHexString(publicKey.getEncoded()).replaceAll(""String_Node_Str"",""String_Node_Str""));
    LOG.debug(""String_Node_Str"" + ByteArrayUtil.toPrintableHexString(sign).replaceAll(""String_Node_Str"",""String_Node_Str""));
  LOG.debug(""String_Node_Str"" + ByteArrayUtil.toPrintableHexString(dig).replaceAll(""String_Node_Str"",""String_Node_Str""));
LOG.debug(""String_Node_Str"" + new String(quoted.getExtraData().getBuffer()));
LOG.debug(""String_Node_Str"" + this.checkSignRsaPssSha256(publicKey,sign,dig));
break;
case TPM_ALG_SHA1:
default :
LOG.debug(""String_Node_Str"" + signature.getSignature().getHashAlg().toString() + ""String_Node_Str"");
break;
}
}
 catch (Exception ex) {
LOG.debug(""String_Node_Str"" + ex.getMessage());
ex.printStackTrace();
return ControllerToTpm.newBuilder().build();
}
if (thread.isAlive()) {
try {
ControllerToTpm msg=ControllerToTpm.newBuilder().setAtype(this.aType).setQualifyingData(this.yourNonce).setCode(Code.INTERNAL_ATTESTATION_REQ).build();
client.send(msg.toByteArray(),this.handler);
TpmToController answer=this.handler.waitForResponse();
return ConnectorMessage.newBuilder().setId(0).setType(ConnectorMessage.Type.RAT_RESPONSE).setAttestationResponse(AttestationResponse.newBuilder().setAtype(this.aType).setHalg(answer.getHalg()).setQuoted(answer.getQuoted()).setSignature(answer.getSignature()).addAllPcrValues(answer.getPcrValuesList()).setCertificateUri(answer.getCertificateUri()).build()).build();
}
 catch (IOException e1) {
LOG.debug(""String_Node_Str"");
e1.printStackTrace();
return ControllerToTpm.newBuilder().build();
}
catch (InterruptedException e1) {
LOG.debug(""String_Node_Str"");
e1.printStackTrace();
return ControllerToTpm.newBuilder().build();
}
}
 else {
LOG.debug(""String_Node_Str"");
return null;
}
}"
40335,"@Override public void fromBytes(byte[] source,int offset){
  ByteArrayReadWriter brw=new ByteArrayReadWriter(source,offset);
  this.sigAlg=new TPMI_ALG_SIG_SCHEME();
  brw.readStruct(this.sigAlg);
  LOG.debug(""String_Node_Str"" + ByteArrayUtil.toHexString(this.sigAlg.getAlgId().Id()));
switch (this.sigAlg.getAlgId().getAlgId()) {
case TPM_ALG_RSASSA:
    break;
case TPM_ALG_RSAPSS:
  this.signature=new TPMS_SIGNATURE_RSAPSS();
brw.readStruct(this.signature);
break;
case TPM_ALG_ECDSA:
case TPM_ALG_SM2:
case TPM_ALG_ECDAA:
break;
case TPM_ALG_ECSCHNORR:
this.signature=new TPMS_SIGNATURE_ECDSA();
brw.readStruct(this.signature);
break;
default :
LOG.debug(""String_Node_Str"" + this.sigAlg.getAlgId().getAlgId().toString() + ""String_Node_Str""+ this.sigAlg.getAlgId().getAlgId().name()+ ""String_Node_Str"");
break;
}
}","@Override public void fromBytes(byte[] source,int offset){
  ByteArrayReadWriter brw=new ByteArrayReadWriter(source,offset);
  this.sigAlg=new TPMI_ALG_SIG_SCHEME();
  brw.readStruct(this.sigAlg);
  LOG.debug(""String_Node_Str"" + ByteArrayUtil.toHexString(this.sigAlg.getAlgId().Id()));
switch (this.sigAlg.getAlgId().getAlgId()) {
case TPM_ALG_RSASSA:
    this.signature=new TPMS_SIGNATURE_RSAPSS();
  brw.readStruct(this.signature);
break;
case TPM_ALG_RSAPSS:
break;
case TPM_ALG_ECDSA:
case TPM_ALG_SM2:
case TPM_ALG_ECDAA:
break;
case TPM_ALG_ECSCHNORR:
this.signature=new TPMS_SIGNATURE_ECDSA();
brw.readStruct(this.signature);
break;
default :
LOG.debug(""String_Node_Str"" + this.sigAlg.getAlgId().getAlgId().toString() + ""String_Node_Str""+ this.sigAlg.getAlgId().getAlgId().name()+ ""String_Node_Str"");
break;
}
}"
40336,"@Override public String toString(){
  return ""String_Node_Str"" + exception.getMessage() + ""String_Node_Str""+ pos.toString();
}","@Override public String toString(){
  return ""String_Node_Str"" + exception.getMessage();
}"
40337,"@FXML private void handleMenuPlay(ActionEvent event){
  log.setText(""String_Node_Str"");
  val input=editor.getText();
  val context=new Context();
  BundleLoader.load(context,Arrays.asList(CompositionBundle.class,NodesBundle.class));
  val parser=new HotaruParser(HotaruLexer.tokenize(input));
  val program=parser.parse();
  if (parser.getParseErrors().hasErrors()) {
    val sb=new StringBuilder();
    for (    ParseError parseError : parser.getParseErrors()) {
      sb.append(parseError);
    }
    log.setText(sb.toString());
    logPane.setExpanded(true);
    return;
  }
  program.accept(new InterpreterVisitor(),context);
  val stage=new Stage();
  val composition=context.composition();
  stage.setScene(composition.produceAnimationScene());
  composition.getTimeline().getFxTimeline().play();
  stage.show();
}","@FXML private void handleMenuPlay(ActionEvent event){
  log.setText(""String_Node_Str"");
  val input=editor.getText();
  val context=new Context();
  BundleLoader.load(context,Arrays.asList(CompositionBundle.class,NodesBundle.class));
  val parser=new HotaruParser(HotaruLexer.tokenize(input));
  val program=parser.parse();
  if (parser.getParseErrors().hasErrors()) {
    log.setText(parser.getParseErrors().toString());
    logPane.setExpanded(true);
    return;
  }
  program.accept(new InterpreterVisitor(),context);
  val stage=new Stage();
  val composition=context.composition();
  stage.setScene(composition.produceAnimationScene());
  composition.getTimeline().getFxTimeline().play();
  stage.show();
}"
40338,"private OrderSpecifier<?> toOrderSpecifier(Sorting sorting){
  if (sorting == null) {
    sorting=Sorting.of(Sorting.By.ASN,Sorting.Direction.ASC);
  }
  Expression<? extends Comparable> column;
switch (sorting.getBy()) {
case PREFIX:
    column=roaPrefixAssertion.prefix;
  break;
case COMMENT:
column=roaPrefixAssertion.comment;
break;
case ASN:
default :
column=roaPrefixAssertion.asn;
break;
}
Order order=sorting.getDirection() == Sorting.Direction.DESC ? Order.DESC : Order.ASC;
return new OrderSpecifier<>(order,column);
}","private OrderSpecifier<?> toOrderSpecifier(Sorting sorting){
  if (sorting == null) {
    sorting=Sorting.of(Sorting.By.ASN,Sorting.Direction.ASC);
  }
  Expression<? extends Comparable> column;
switch (sorting.getBy()) {
case PREFIX:
    column=roaPrefixAssertion.prefix;
  break;
case COMMENT:
column=roaPrefixAssertion.comment;
break;
case MAXIMUMLENGTH:
column=roaPrefixAssertion.maximumLength;
break;
case ASN:
default :
column=roaPrefixAssertion.asn;
break;
}
Order order=sorting.getDirection() == Sorting.Direction.DESC ? Order.DESC : Order.ASC;
return new OrderSpecifier<>(order,column);
}"
40339,"@GetMapping public ResponseEntity<ApiResponse<Stream<IgnoreFilter>>> list(@RequestParam(name=""String_Node_Str"",defaultValue=""String_Node_Str"") int startFrom,@RequestParam(name=""String_Node_Str"",defaultValue=""String_Node_Str"") int pageSize,@RequestParam(name=""String_Node_Str"",defaultValue=""String_Node_Str"",required=false) String searchString,@RequestParam(name=""String_Node_Str"",defaultValue=""String_Node_Str"") String sortBy,@RequestParam(name=""String_Node_Str"",defaultValue=""String_Node_Str"") String sortDirection){
  final SearchTerm searchTerm=StringUtils.isNotBlank(searchString) ? new SearchTerm(searchString) : null;
  final Sorting sorting=Sorting.parse(sortBy,sortDirection);
  final Paging paging=Paging.of(startFrom,pageSize);
  final List<net.ripe.rpki.validator3.domain.IgnoreFilter> all=ignoreFilters.all().collect(Collectors.toList());
  int totalSize=all.size();
  final Links links=Paging.links(startFrom,pageSize,totalSize,(sf,ps) -> methodOn(IgnoreFiltersController.class).list(sf,ps,searchString,sortBy,sortDirection));
  return ResponseEntity.ok(ApiResponse.<Stream<IgnoreFilter>>builder().links(links).metadata(Metadata.of(totalSize)).data(all.stream().map(f -> toIgnoreFilter(f))).build());
}","@GetMapping public ResponseEntity<ApiResponse<Stream<IgnoreFilter>>> list(@RequestParam(name=""String_Node_Str"",defaultValue=""String_Node_Str"") int startFrom,@RequestParam(name=""String_Node_Str"",defaultValue=""String_Node_Str"") int pageSize,@RequestParam(name=""String_Node_Str"",defaultValue=""String_Node_Str"",required=false) String searchString,@RequestParam(name=""String_Node_Str"",defaultValue=""String_Node_Str"") String sortBy,@RequestParam(name=""String_Node_Str"",defaultValue=""String_Node_Str"") String sortDirection){
  final SearchTerm searchTerm=StringUtils.isNotBlank(searchString) ? new SearchTerm(searchString) : null;
  final Sorting sorting=Sorting.parse(sortBy,sortDirection);
  final Paging paging=Paging.of(startFrom,pageSize);
  final List<net.ripe.rpki.validator3.domain.IgnoreFilter> matching=ignoreFilters.find(searchTerm,sorting,paging).collect(Collectors.toList());
  int totalSize=(int)ignoreFilters.count(searchTerm);
  final Links links=Paging.links(startFrom,pageSize,totalSize,(sf,ps) -> methodOn(IgnoreFiltersController.class).list(sf,ps,searchString,sortBy,sortDirection));
  return ResponseEntity.ok(ApiResponse.<Stream<IgnoreFilter>>builder().links(links).metadata(Metadata.of(totalSize)).data(matching.stream().map(this::toIgnoreFilter)).build());
}"
40340,"public BgpValidityResource validity(final Asn origin,final IpRange prefix){
  final List<Pair<RoaPrefix,Validity>> roaPrefixes=this.roaPrefixes.findExactAndAllLessSpecific(prefix).stream().flatMap(x -> x.stream()).map(r -> {
    final BgpPreviewEntry bgpPreviewEntry=BgpPreviewEntry.of(origin,prefix,Validity.UNKNOWN);
    final Validity validity=validateBgpRisEntry(Collections.singletonList(r),bgpPreviewEntry);
    return Pair.of(r,validity);
  }
).sorted(Comparator.comparingInt(p -> {
switch (p.getRight()) {
case VALID:
      return 0;
case INVALID_LENGTH:
    return 1;
case INVALID_ASN:
  return 2;
}
return 10;
}
)).collect(Collectors.toList());
final Validity validity=roaPrefixes.stream().findFirst().map(p -> p.getRight()).orElse(Validity.UNKNOWN);
final List<ValidatingRoa> validatingRoaStream=roaPrefixes.stream().flatMap(p -> {
final RoaPrefix r=p.getLeft();
if (r.getTrustAnchor() != null) {
return r.getLocations().stream().map(loc -> ValidatingRoa.of(r.getAsn().toString(),r.getPrefix().toString(),p.getRight().toString(),r.getMaximumLength(),r.getTrustAnchor() == null ? null : r.getTrustAnchor().getName(),loc,null,null));
}
 else if (r.getRoaPrefixAssertionId() != null) {
return Stream.of(ValidatingRoa.of(r.getAsn().toString(),r.getPrefix().toString(),p.getRight().toString(),r.getMaximumLength(),null,null,r.getRoaPrefixAssertionId(),r.getComment()));
}
 else {
return Stream.empty();
}
}
).distinct().collect(Collectors.toList());
return BgpValidityResource.of(origin.toString(),prefix.toString(),validity.toString(),validatingRoaStream);
}","public BgpValidityResource validity(final Asn origin,final IpRange prefix){
  final List<Pair<RoaPrefix,Validity>> roaPrefixes=this.roaPrefixes.findExactAndAllLessSpecific(prefix).stream().flatMap(x -> x.stream()).map(r -> {
    final BgpPreviewEntry bgpPreviewEntry=BgpPreviewEntry.of(origin,prefix,Validity.UNKNOWN);
    final Validity validity=validateBgpRisEntry(Collections.singletonList(r),bgpPreviewEntry);
    return Pair.of(r,validity);
  }
).sorted(Comparator.comparingInt(p -> {
switch (p.getRight()) {
case VALID:
      return 0;
case INVALID_LENGTH:
    return 1;
case INVALID_ASN:
  return 2;
}
return 10;
}
)).collect(Collectors.toList());
final Validity validity=roaPrefixes.stream().findFirst().map(p -> p.getRight()).orElse(Validity.UNKNOWN);
final List<ValidatingRoa> validatingRoaStream=roaPrefixes.stream().flatMap(p -> {
final RoaPrefix r=p.getLeft();
if (r.getTrustAnchor() != null) {
return r.getLocations().stream().map(loc -> ValidatingRoa.of(r.getAsn().toString(),r.getPrefix().toString(),p.getRight().toString(),r.getMaximumLength(),r.getTrustAnchor() == null ? null : r.getTrustAnchor().getName(),loc,null,null));
}
 else if (r.getRoaPrefixAssertionId() != null) {
return Stream.of(ValidatingRoa.of(r.getAsn().toString(),r.getPrefix().toString(),p.getRight().toString(),r.getMaximumLength(),""String_Node_Str"",null,r.getRoaPrefixAssertionId(),r.getComment()));
}
 else {
return Stream.empty();
}
}
).distinct().collect(Collectors.toList());
return BgpValidityResource.of(origin.toString(),prefix.toString(),validity.toString(),validatingRoaStream);
}"
40341,"private static Validity validateBgpRisEntry(IntervalMap<IpRange,List<RoaPrefix>> roaPrefixes,BgpPreviewEntry bgpRisEntry){
  List<RoaPrefix> matchingRoaPrefixes=roaPrefixes.findExactAndAllLessSpecific(bgpRisEntry.getPrefix()).stream().flatMap(Collection::stream).collect(Collectors.toList());
  List<RoaPrefix> matchingAsnRoas=matchingRoaPrefixes.stream().filter(roaPrefix -> roaPrefix.getAsn().equals(bgpRisEntry.getOrigin())).collect(Collectors.toList());
  Validity validity;
  if (matchingRoaPrefixes.isEmpty()) {
    validity=Validity.UNKNOWN;
  }
 else   if (matchingAsnRoas.isEmpty()) {
    validity=Validity.INVALID_ASN;
  }
 else   if (matchingAsnRoas.stream().noneMatch(roaPrefix -> roaPrefix.getEffectiveLength() >= bgpRisEntry.getPrefix().getPrefixLength())) {
    validity=Validity.INVALID_LENGTH;
  }
 else {
    validity=Validity.VALID;
  }
  return validity;
}","private static Validity validateBgpRisEntry(List<RoaPrefix> matchingRoaPrefixes,BgpPreviewEntry bgpRisEntry){
  List<RoaPrefix> matchingAsnRoas=matchingRoaPrefixes.stream().filter(roaPrefix -> roaPrefix.getAsn().equals(bgpRisEntry.getOrigin())).collect(Collectors.toList());
  final Validity validity;
  if (matchingRoaPrefixes.isEmpty()) {
    validity=Validity.UNKNOWN;
  }
 else   if (matchingAsnRoas.isEmpty()) {
    validity=Validity.INVALID_ASN;
  }
 else   if (matchingAsnRoas.stream().noneMatch(roaPrefix -> roaPrefix.getEffectiveLength() >= bgpRisEntry.getPrefix().getPrefixLength())) {
    validity=Validity.INVALID_LENGTH;
  }
 else {
    validity=Validity.VALID;
  }
  return validity;
}"
40342,"public BgpValidityResource validity(final Asn origin,final IpRange prefix){
  final List<Pair<RoaPrefix,Validity>> roaPrefixes=this.roaPrefixes.findExactAndAllLessSpecific(prefix).stream().flatMap(x -> x.stream()).map(r -> {
    final BgpPreviewEntry bgpPreviewEntry=BgpPreviewEntry.of(origin,prefix,Validity.UNKNOWN);
    final Validity validity=validateBgpRisEntry(this.roaPrefixes,bgpPreviewEntry);
    return Pair.of(r,validity);
  }
).sorted(Comparator.comparingInt(p -> {
switch (p.getRight()) {
case VALID:
      return 0;
case INVALID_LENGTH:
    return 1;
case INVALID_ASN:
  return 2;
}
return 10;
}
)).collect(Collectors.toList());
final Validity validity=roaPrefixes.stream().findFirst().map(p -> p.getRight()).orElse(Validity.UNKNOWN);
final List<ValidatingRoa> validatingRoaStream=roaPrefixes.stream().flatMap(p -> {
final RoaPrefix r=p.getLeft();
if (r.getTrustAnchor() != null) {
return r.getLocations().stream().map(loc -> ValidatingRoa.of(r.getAsn().toString(),r.getPrefix().toString(),p.getRight().toString(),r.getMaximumLength(),r.getTrustAnchor() == null ? null : r.getTrustAnchor().getName(),loc,null,null));
}
 else if (r.getRoaPrefixAssertionId() != null) {
return Stream.of(ValidatingRoa.of(r.getAsn().toString(),r.getPrefix().toString(),p.getRight().toString(),r.getMaximumLength(),null,null,r.getRoaPrefixAssertionId(),r.getComment()));
}
 else {
return Stream.empty();
}
}
).distinct().collect(Collectors.toList());
return BgpValidityResource.of(origin.toString(),prefix.toString(),validity.toString(),validatingRoaStream);
}","public BgpValidityResource validity(final Asn origin,final IpRange prefix){
  final List<Pair<RoaPrefix,Validity>> roaPrefixes=this.roaPrefixes.findExactAndAllLessSpecific(prefix).stream().flatMap(x -> x.stream()).map(r -> {
    final BgpPreviewEntry bgpPreviewEntry=BgpPreviewEntry.of(origin,prefix,Validity.UNKNOWN);
    final Validity validity=validateBgpRisEntry(Collections.singletonList(r),bgpPreviewEntry);
    return Pair.of(r,validity);
  }
).sorted(Comparator.comparingInt(p -> {
switch (p.getRight()) {
case VALID:
      return 0;
case INVALID_LENGTH:
    return 1;
case INVALID_ASN:
  return 2;
}
return 10;
}
)).collect(Collectors.toList());
final Validity validity=roaPrefixes.stream().findFirst().map(p -> p.getRight()).orElse(Validity.UNKNOWN);
final List<ValidatingRoa> validatingRoaStream=roaPrefixes.stream().flatMap(p -> {
final RoaPrefix r=p.getLeft();
if (r.getTrustAnchor() != null) {
return r.getLocations().stream().map(loc -> ValidatingRoa.of(r.getAsn().toString(),r.getPrefix().toString(),p.getRight().toString(),r.getMaximumLength(),r.getTrustAnchor() == null ? null : r.getTrustAnchor().getName(),loc,null,null));
}
 else if (r.getRoaPrefixAssertionId() != null) {
return Stream.of(ValidatingRoa.of(r.getAsn().toString(),r.getPrefix().toString(),p.getRight().toString(),r.getMaximumLength(),null,null,r.getRoaPrefixAssertionId(),r.getComment()));
}
 else {
return Stream.empty();
}
}
).distinct().collect(Collectors.toList());
return BgpValidityResource.of(origin.toString(),prefix.toString(),validity.toString(),validatingRoaStream);
}"
40343,"public List<BgpRisEntry> parse(final InputStream is){
  final BufferedReader reader=new BufferedReader(new InputStreamReader(is));
  String line=null;
  final List<BgpRisEntry> entries=new ArrayList<>();
  final IdentityMap id=new IdentityMap();
  do {
    try {
      line=reader.readLine();
      final BgpRisEntry e=parseLine(line,id::unique);
      if (e != null) {
        entries.add(e);
      }
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + line);
    }
  }
 while (line != null);
  return entries;
}","public List<BgpRisEntry> parse(final InputStream is){
  final BufferedReader reader=new BufferedReader(new InputStreamReader(is));
  String line=null;
  final List<BgpRisEntry> entries=new ArrayList<>();
  final IdentityMap id=new IdentityMap();
  while (true) {
    try {
      line=reader.readLine();
      if (line == null) {
        return entries;
      }
      final BgpRisEntry e=parseLine(line,id::unique);
      if (e != null) {
        entries.add(e);
      }
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + line);
      return entries;
    }
  }
}"
40344,"@Test public void parse1() throws UnsupportedEncodingException {
  String line=""String_Node_Str"";
  List<BgpRisEntry> parsed=parse(line);
  assertEquals(1,parsed.size());
  assertEquals(new Asn(4200003018L),parsed.get(0).origin);
  assertEquals(IpRange.parse(""String_Node_Str""),parsed.get(0).prefix);
  assertEquals(3,parsed.get(0).visibility);
}","@Test public void parse1() throws UnsupportedEncodingException {
  final String line=""String_Node_Str"";
  List<BgpRisEntry> parsed=parse(line);
  assertEquals(1,parsed.size());
  assertEquals(new Asn(4200003018L),parsed.get(0).origin);
  assertEquals(IpRange.parse(""String_Node_Str""),parsed.get(0).prefix);
  assertEquals(3,parsed.get(0).visibility);
}"
40345,"@Override protected void decode(ChannelHandlerContext ctx,ByteBuf in,List<Object> out) throws Exception {
  if (in.readableBytes() < 8) {
    return;
  }
  in.markReaderIndex();
  byte protocolVersionValue=in.readByte();
  ProtocolVersion protocolVersion=ProtocolVersion.of(protocolVersionValue);
  BiFunction<ErrorCode,String,ErrorPdu> generateError=(code,text) -> {
    in.resetReaderIndex();
    byte[] content=new byte[in.readableBytes()];
    in.readBytes(content);
    return ErrorPdu.of(protocolVersion == null ? V1 : protocolVersion,code,content,text);
  }
;
  if (protocolVersion == null) {
    throw new RtrProtocolException(generateError.apply(ErrorCode.UnsupportedProtocolVersion,String.format(""String_Node_Str"",Byte.toUnsignedInt(protocolVersionValue))));
  }
  int pduType=in.readUnsignedByte();
switch (pduType) {
case SerialQueryPdu.PDU_TYPE:
{
      short sessionId=in.readShort();
      long length=in.readUnsignedInt();
      if (length != SerialQueryPdu.PDU_LENGTH) {
        throw new RtrProtocolException(generateError.apply(ErrorCode.InvalidRequest,String.format(""String_Node_Str"",SerialQueryPdu.PDU_LENGTH,length)));
      }
      if (in.readableBytes() + 8 < length) {
        return;
      }
      int serialNumber=in.readInt();
      out.add(SerialQueryPdu.of(protocolVersion,sessionId,SerialNumber.of(serialNumber)));
      break;
    }
case ResetQueryPdu.PDU_TYPE:
{
    @SuppressWarnings(""String_Node_Str"") int zero=in.readUnsignedShort();
    long length=in.readUnsignedInt();
    if (length != ResetQueryPdu.PDU_LENGTH) {
      throw new RtrProtocolException(generateError.apply(ErrorCode.InvalidRequest,String.format(""String_Node_Str"",ResetQueryPdu.PDU_LENGTH,length)));
    }
    out.add(ResetQueryPdu.of(protocolVersion));
    break;
  }
case ErrorPdu.PDU_TYPE:
{
  int errorCode=in.readUnsignedShort();
  long length=in.readUnsignedInt();
  if (length > Pdu.MAX_LENGTH) {
    throw new RtrProtocolException(generateError.apply(ErrorCode.InvalidRequest,String.format(""String_Node_Str"",Pdu.MAX_LENGTH,length)));
  }
  if (in.readableBytes() + 8 < length) {
    return;
  }
  long encapsulatedPduLength=in.readUnsignedInt();
  if (encapsulatedPduLength > length - 16) {
    throw new RtrProtocolException(generateError.apply(ErrorCode.InvalidRequest,String.format(""String_Node_Str"",encapsulatedPduLength,length - 16)));
  }
  byte[] encapsulatedPdu=new byte[(int)encapsulatedPduLength];
  in.readBytes(encapsulatedPdu);
  long errorTextLength=in.readUnsignedInt();
  if (errorTextLength > length - encapsulatedPduLength - 16) {
    throw new RtrProtocolException(generateError.apply(ErrorCode.InvalidRequest,String.format(""String_Node_Str"",errorTextLength,length - encapsulatedPduLength - 16)));
  }
  byte[] errorTextBytes=new byte[(int)errorTextLength];
  in.readBytes(errorTextBytes);
  out.add(ErrorPdu.of(protocolVersion,ErrorCode.of(errorCode),encapsulatedPdu,new String(errorTextBytes,StandardCharsets.UTF_8)));
  break;
}
default :
throw new RtrProtocolException(generateError.apply(ErrorCode.UnsupportedPduType,String.format(""String_Node_Str"",pduType)));
}
}","@Override protected void decode(ChannelHandlerContext ctx,ByteBuf in,List<Object> out) throws Exception {
  parsePdu(in).ifPresent(out::add);
}"
40346,"@Override public int length(){
  return 8;
}","@Override public int length(){
  return PDU_LENGTH;
}"
40347,"@Override public int length(){
switch (protocolVersion) {
case V0:
    return 12;
case V1:
  return 24;
}
throw new IllegalStateException(""String_Node_Str"" + protocolVersion);
}","@Override public int length(){
switch (protocolVersion) {
case V0:
    return PDU_LENGTH_V0;
case V1:
  return PDU_LENGTH_V1;
}
throw new IllegalStateException(""String_Node_Str"" + protocolVersion);
}"
40348,"@Override public void write(ByteBuf out){
  out.writeByte(protocolVersion.getValue()).writeByte(PDU_TYPE).writeShort(sessionId).writeInt(length());
switch (protocolVersion) {
case V0:
    return;
case V1:
  out.writeInt(serialNumber.getValue()).writeInt(refreshInterval).writeInt(retryInterval).writeInt(expireInterval);
return;
}
throw new IllegalStateException(""String_Node_Str"" + protocolVersion);
}","@Override public void write(ByteBuf out){
  out.writeByte(protocolVersion.getValue()).writeByte(PDU_TYPE).writeShort(sessionId).writeInt(length()).writeInt(serialNumber.getValue());
switch (protocolVersion) {
case V0:
    return;
case V1:
  out.writeInt(refreshInterval).writeInt(retryInterval).writeInt(expireInterval);
return;
}
throw new IllegalStateException(""String_Node_Str"" + protocolVersion);
}"
40349,"public void write(ByteBuf out){
  final byte[] errorTextBytes=errorTextBytes();
  out.writeByte(protocolVersion.getValue()).writeByte(PDU_TYPE).writeShort(0).writeInt(length()).writeBytes(causingPdu).writeInt(errorTextBytes.length).writeBytes(errorTextBytes);
}","public void write(ByteBuf out){
  final byte[] errorTextBytes=errorTextBytes();
  out.writeByte(protocolVersion.getValue()).writeByte(PDU_TYPE).writeShort(errorCode.getCode()).writeInt(length()).writeInt(causingPdu.length).writeBytes(causingPdu).writeInt(errorTextBytes.length).writeBytes(errorTextBytes);
}"
40350,"@Override public int length(){
  return 20;
}","@Override public int length(){
  return PDU_LENGTH;
}"
40351,"@Override public int length(){
  return 32;
}","@Override public int length(){
  return PDU_LENGTH;
}"
40352,"@Override public int length(){
  return 12;
}","@Override public int length(){
  return PDU_LENGTH;
}"
40353,"public void addRpkiObject(RpkiObject rpkiObject){
  rpkiObjects.add(rpkiObject);
}","public void addRpkiObject(RpkiObject rpkiObject){
  if (rpkiObjects.add(rpkiObject)) {
    objectAdded();
  }
}"
40354,"public void addRpkiObject(RpkiObject rpkiObject){
  rpkiObjects.add(rpkiObject);
}","public void addRpkiObject(RpkiObject rpkiObject){
  if (rpkiObjects.add(rpkiObject)) {
    objectAdded();
  }
}"
40355,"private void verifyDeltaSerials(final List<Delta> orderedDeltas,final Notification notification,RpkiRepository rpkiRepository){
  if (orderedDeltas.isEmpty()) {
    throw new RrdpException(""String_Node_Str"" + rpkiRepository.getRrdpSerial() + ""String_Node_Str""+ notification.serial+ ""String_Node_Str"");
  }
  final BigInteger lastDeltaSerial=orderedDeltas.get(orderedDeltas.size() - 1).getSerial();
  if (!notification.serial.equals(lastDeltaSerial)) {
    throw new RrdpException(""String_Node_Str"" + lastDeltaSerial + ""String_Node_Str""+ notification.serial);
  }
  final BigInteger[] previous={null};
  orderedDeltas.forEach(d -> {
    if (previous[0] == null) {
      previous[0]=d.getSerial();
    }
 else {
      if (!d.getSerial().equals(previous[0].add(BigInteger.ONE))) {
        throw new RrdpException(String.format(""String_Node_Str"",previous[0],d.getSerial()));
      }
    }
  }
);
}","private void verifyDeltaSerials(final List<Delta> orderedDeltas,final Notification notification,RpkiRepository rpkiRepository){
  if (orderedDeltas.isEmpty()) {
    if (!rpkiRepository.getRrdpSerial().equals(notification.serial)) {
      throw new RrdpException(""String_Node_Str"" + rpkiRepository.getRrdpSerial() + ""String_Node_Str""+ notification.serial+ ""String_Node_Str"");
    }
  }
 else {
    final BigInteger lastDeltaSerial=orderedDeltas.get(orderedDeltas.size() - 1).getSerial();
    if (!notification.serial.equals(lastDeltaSerial)) {
      throw new RrdpException(""String_Node_Str"" + lastDeltaSerial + ""String_Node_Str""+ notification.serial);
    }
    final BigInteger[] previous={null};
    orderedDeltas.forEach(d -> {
      if (previous[0] == null) {
        previous[0]=d.getSerial();
      }
 else {
        if (!d.getSerial().equals(previous[0].add(BigInteger.ONE))) {
          throw new RrdpException(String.format(""String_Node_Str"",previous[0],d.getSerial()));
        }
      }
    }
);
  }
}"
40356,"public static Session fromBootstrap(io.microprofile.showcase.bootstrap.Session bootstrapModel){
  Session session=new Session(bootstrapModel.getId(),bootstrapModel.getUnderlying());
  session.setSpeakers(bootstrapModel.getSpeakers());
  session.setSchedule(bootstrapModel.getSchedule());
  return session;
}","public static Session fromBootstrap(io.microprofile.showcase.bootstrap.Session bootstrapModel){
  Session session=new Session(Integer.valueOf(bootstrapModel.getId()),bootstrapModel.getUnderlying());
  session.setSpeakers(mapStringToIntCollection(bootstrapModel.getSpeakers()));
  session.setSchedule(Integer.valueOf(bootstrapModel.getSchedule()));
  return session;
}"
40357,"@PostConstruct private void initStore(){
  Logger.getLogger(SessionStore.class.getName()).log(Level.INFO,""String_Node_Str"");
  bootstrapData.getSessions().forEach(bootstrap -> storage.put(bootstrap.getId(),SessionFactory.fromBootstrap(bootstrap)));
}","@PostConstruct private void initStore(){
  Logger.getLogger(SessionStore.class.getName()).log(Level.INFO,""String_Node_Str"");
  bootstrapData.getSessions().forEach(bootstrap -> storage.put(Integer.valueOf(bootstrap.getId()),SessionFactory.fromBootstrap(bootstrap)));
}"
40358,"@PostConstruct private void initStore(){
  Logger.getLogger(SpeakerDAO.class.getName()).log(Level.INFO,""String_Node_Str"");
  final Set<Speaker> featured=new HashSet<>(0);
  for (  final Venue venue : this.venues) {
    featured.addAll(venue.getSpeakers());
  }
  final AtomicInteger idc=new AtomicInteger(0);
  this.bootstrapData.getSpeaker().forEach(bootstrap -> {
    final int intId=bootstrap.getId();
    if (intId > idc.get()) {
      idc.set(intId);
    }
    final String id=String.valueOf(intId);
    final String[] names=bootstrap.getFullName().split(""String_Node_Str"");
    final Speaker sp=new Speaker();
    sp.setId(id);
    sp.setNameFirst(names[0].trim());
    sp.setNameLast(names[1].trim());
    sp.setOrganization(bootstrap.getCompany());
    sp.setBiography(bootstrap.getJobTitle());
    sp.setPicture(""String_Node_Str"");
    appendFeatured(featured,sp);
    this.speakers.put(id,sp);
  }
);
  for (  final Speaker fs : featured) {
    boolean found=false;
    for (    final Speaker sp : this.speakers.values()) {
      if (fs.getNameFirst().toLowerCase().equals(sp.getNameFirst().toLowerCase()) && fs.getNameLast().toLowerCase().equals(sp.getNameLast().toLowerCase())) {
        found=true;
        break;
      }
    }
    if (!found) {
      fs.setId(String.valueOf(idc.incrementAndGet()));
      this.speakers.put(fs.getId(),fs);
    }
  }
}","@PostConstruct private void initStore(){
  Logger.getLogger(SpeakerDAO.class.getName()).log(Level.INFO,""String_Node_Str"");
  final Set<Speaker> featured=new HashSet<>(0);
  for (  final Venue venue : this.venues) {
    featured.addAll(venue.getSpeakers());
  }
  final AtomicInteger idc=new AtomicInteger(0);
  this.bootstrapData.getSpeaker().forEach(bootstrap -> {
    final int intId=Integer.valueOf(bootstrap.getId());
    if (intId > idc.get()) {
      idc.set(intId);
    }
    final String id=String.valueOf(intId);
    final String[] names=bootstrap.getFullName().split(""String_Node_Str"");
    final Speaker sp=new Speaker();
    sp.setId(id);
    sp.setNameFirst(names[0].trim());
    sp.setNameLast(names[1].trim());
    sp.setOrganization(bootstrap.getCompany());
    sp.setBiography(bootstrap.getJobTitle());
    sp.setPicture(""String_Node_Str"");
    appendFeatured(featured,sp);
    this.speakers.put(id,sp);
  }
);
  for (  final Speaker fs : featured) {
    boolean found=false;
    for (    final Speaker sp : this.speakers.values()) {
      if (fs.getNameFirst().toLowerCase().equals(sp.getNameFirst().toLowerCase()) && fs.getNameLast().toLowerCase().equals(sp.getNameLast().toLowerCase())) {
        found=true;
        break;
      }
    }
    if (!found) {
      fs.setId(String.valueOf(idc.incrementAndGet()));
      this.speakers.put(fs.getId(),fs);
    }
  }
}"
40359,"public ImageApiProfile addFeature(Feature first,Feature... rest){
  this.features.addAll(Lists.asList(first,rest));
  return this;
}","public ImageApiProfile addFeature(Feature first,Feature... rest){
  if (this.features == null) {
    this.features=new LinkedHashSet<>();
  }
  this.features.addAll(Lists.asList(first,rest));
  return this;
}"
40360,"public ImageApiProfile addFormat(Format first,Format... rest){
  this.formats.addAll(Lists.asList(first,rest));
  return this;
}","public ImageApiProfile addFormat(Format first,Format... rest){
  if (this.formats == null) {
    this.formats=new LinkedHashSet<>();
  }
  this.formats.addAll(Lists.asList(first,rest));
  return this;
}"
40361,"public ImageApiProfile addQuality(Quality first,Quality... rest){
  this.qualities.addAll(Lists.asList(first,rest));
  return this;
}","public ImageApiProfile addQuality(Quality first,Quality... rest){
  if (this.qualities == null) {
    this.qualities=new LinkedHashSet<>();
  }
  this.qualities.addAll(Lists.asList(first,rest));
  return this;
}"
40362,"/** 
 * Merge two profiles. 
 */
public ImageApiProfile merge(ImageApiProfile other){
  ImageApiProfile merged=new ImageApiProfile();
  merged.features.addAll(this.features);
  merged.features.addAll(other.features);
  merged.formats.addAll(this.formats);
  merged.formats.addAll(other.formats);
  merged.qualities.addAll(this.qualities);
  merged.qualities.addAll(other.qualities);
  other.getFeatures().forEach(merged::addFeature);
  if (this.maxWidth != null && other.maxWidth == null) {
    merged.maxWidth=this.maxWidth;
  }
 else   if (this.maxWidth == null && other.maxWidth != null) {
    merged.maxWidth=other.maxWidth;
  }
 else   if (this.maxWidth != null) {
    merged.maxWidth=Math.min(this.maxWidth,other.maxWidth);
  }
  if (this.maxHeight != null && other.maxHeight == null) {
    merged.maxHeight=this.maxHeight;
  }
 else   if (this.maxHeight == null && other.maxHeight != null) {
    merged.maxHeight=other.maxHeight;
  }
 else   if (this.maxHeight != null) {
    merged.maxHeight=Math.min(this.maxHeight,other.maxHeight);
  }
  if (this.maxArea != null && other.maxArea == null) {
    merged.maxArea=this.maxArea;
  }
 else   if (this.maxArea == null && other.maxArea != null) {
    merged.maxArea=other.maxArea;
  }
 else   if (this.maxArea != null) {
    merged.maxArea=Math.min(this.maxArea,other.maxArea);
  }
  return merged;
}","/** 
 * Merge two profiles. 
 */
public ImageApiProfile merge(ImageApiProfile other){
  ImageApiProfile merged=new ImageApiProfile();
  streamNotNull(this.features).forEach(merged::addFeature);
  streamNotNull(other.features).forEach(merged::addFeature);
  streamNotNull(this.formats).forEach(merged::addFormat);
  streamNotNull(other.formats).forEach(merged::addFormat);
  streamNotNull(this.qualities).forEach(merged::addQuality);
  streamNotNull(other.qualities).forEach(merged::addQuality);
  if (this.maxWidth != null && other.maxWidth == null) {
    merged.maxWidth=this.maxWidth;
  }
 else   if (this.maxWidth == null && other.maxWidth != null) {
    merged.maxWidth=other.maxWidth;
  }
 else   if (this.maxWidth != null) {
    merged.maxWidth=Math.min(this.maxWidth,other.maxWidth);
  }
  if (this.maxHeight != null && other.maxHeight == null) {
    merged.maxHeight=this.maxHeight;
  }
 else   if (this.maxHeight == null && other.maxHeight != null) {
    merged.maxHeight=other.maxHeight;
  }
 else   if (this.maxHeight != null) {
    merged.maxHeight=Math.min(this.maxHeight,other.maxHeight);
  }
  if (this.maxArea != null && other.maxArea == null) {
    merged.maxArea=this.maxArea;
  }
 else   if (this.maxArea == null && other.maxArea != null) {
    merged.maxArea=other.maxArea;
  }
 else   if (this.maxArea != null) {
    merged.maxArea=Math.min(this.maxArea,other.maxArea);
  }
  return merged;
}"
40363,"/** 
 * Create the canonical of the Image API request. See http://iiif.io/api/image/2.1/#canonical-uri-syntax
 * @param nativeSize      Native size of the image the selector is applied to
 * @param profile         Image API profile used
 * @param defaultQuality  The native/default quality of the image the selector is applied to
 * @return The canonical form of the Image API request
 */
public String getCanonicalForm(Dimension nativeSize,ImageApiProfile profile,Quality defaultQuality){
  return String.format(""String_Node_Str"",identifier != null ? urlEncode(identifier) + ""String_Node_Str"" : ""String_Node_Str"",region.getCanonicalForm(nativeSize),size.getCanonicalForm(nativeSize,profile),rotation.toString(),quality.equals(defaultQuality) ? ""String_Node_Str"" : quality.toString(),format.toString());
}","/** 
 * Create the canonical of the Image API request. See http://iiif.io/api/image/2.1/#canonical-uri-syntax
 * @param nativeSize      Native size of the image the selector is applied to
 * @param profile         Image API profile used
 * @param defaultQuality  The native/default quality of the image the selector is applied to
 * @return The canonical form of the Image API request
 */
public String getCanonicalForm(Dimension nativeSize,ImageApiProfile profile,Quality defaultQuality){
  Dimension scaleReference=nativeSize;
  Rectangle2D canonicalRegion=RegionRequest.fromString(region.getCanonicalForm(nativeSize)).getRegion();
  if (canonicalRegion != null) {
    scaleReference=new Dimension((int)canonicalRegion.getWidth(),(int)canonicalRegion.getHeight());
  }
  return String.format(""String_Node_Str"",identifier != null ? urlEncode(identifier) + ""String_Node_Str"" : ""String_Node_Str"",region.getCanonicalForm(nativeSize),size.getCanonicalForm(scaleReference,profile),rotation.toString(),quality.equals(defaultQuality) ? ""String_Node_Str"" : quality.toString(),format.toString());
}"
40364,"/** 
 * Get the canonical form of this request.
 * @See http://iiif.io/api/image/2.1/#canonical-uri-syntax
 */
public String getCanonicalForm(Dimension nativeSize,ImageApiProfile profile){
  Dimension resolved=this.resolve(nativeSize,profile);
  double nativeRatio=nativeSize.getWidth() / nativeSize.getHeight();
  double resolvedRatio=resolved.getWidth() / resolved.getHeight();
  if (resolved.equals(nativeSize)) {
    return ""String_Node_Str"";
  }
 else   if (this.width != null && this.height == null) {
    return this.toString();
  }
 else   if (Math.round(resolvedRatio * nativeSize.getHeight()) == nativeSize.getWidth()) {
    return String.format(""String_Node_Str"",resolved.width);
  }
 else {
    return String.format(""String_Node_Str"",resolved.width,resolved.height);
  }
}","/** 
 * Get the canonical form of this request.
 * @See http://iiif.io/api/image/2.1/#canonical-uri-syntax
 */
public String getCanonicalForm(Dimension nativeSize,ImageApiProfile profile){
  Dimension resolved=this.resolve(nativeSize,profile);
  double nativeRatio=nativeSize.getWidth() / nativeSize.getHeight();
  double resolvedRatio=resolved.getWidth() / resolved.getHeight();
  if (resolved.equals(nativeSize)) {
    return ""String_Node_Str"";
  }
 else   if (this.width != null && this.height == null) {
    return this.toString();
  }
 else   if (Math.floor(resolvedRatio * nativeSize.getHeight()) == nativeSize.getWidth() || Math.ceil(resolvedRatio * nativeSize.getHeight()) == nativeSize.getWidth()) {
    return String.format(""String_Node_Str"",resolved.width);
  }
 else {
    return String.format(""String_Node_Str"",resolved.width,resolved.height);
  }
}"
40365,"public GeoService(String identifier,org.geojson.Feature feature){
  this();
  this.setIdentifier(URI.create(identifier));
  if (!isFeatureEmpty(feature)) {
    this.feature=feature;
  }
}","public GeoService(String identifier,org.geojson.Feature feature){
  this(identifier);
  if (!isFeatureEmpty(feature)) {
    this.feature=feature;
  }
}"
40366,"@Override public Service deserialize(JsonParser p,DeserializationContext ctxt) throws IOException, JsonProcessingException {
  ObjectMapper mapper=(ObjectMapper)p.getCodec();
  ObjectNode obj=mapper.readTree(p);
  if (isImageService(obj)) {
    return mapper.treeToValue(obj,ImageService.class);
  }
  String context=obj.get(""String_Node_Str"").asText();
  String profile=obj.get(""String_Node_Str"").asText();
  if (Objects.equals(context,ContentSearchService.CONTEXT)) {
    if (Objects.equals(profile,AutocompleteService.PROFILE)) {
      return mapper.treeToValue(obj,AutocompleteService.class);
    }
 else {
      return mapper.treeToValue(obj,ContentSearchService.class);
    }
  }
 else   if (Objects.equals(context,GeoService.CONTEXT)) {
    return mapper.treeToValue(obj,GeoService.class);
  }
 else   if (Objects.equals(context,PhysicalDimensionsService.CONTEXT)) {
    return mapper.treeToValue(obj,PhysicalDimensionsService.class);
  }
 else {
    return mapper.treeToValue(obj,GenericService.class);
  }
}","@Override public Service deserialize(JsonParser p,DeserializationContext ctxt) throws IOException, JsonProcessingException {
  ObjectMapper mapper=(ObjectMapper)p.getCodec();
  ObjectNode obj=mapper.readTree(p);
  if (isImageService(obj)) {
    return mapper.treeToValue(obj,ImageService.class);
  }
  String context=obj.get(""String_Node_Str"").asText();
  JsonNode profileNode=obj.get(""String_Node_Str"");
  String profile=null;
  if (profileNode != null) {
    profile=profileNode.asText();
  }
  if (Objects.equals(context,ContentSearchService.CONTEXT)) {
    if (Objects.equals(profile,AutocompleteService.PROFILE)) {
      return mapper.treeToValue(obj,AutocompleteService.class);
    }
 else {
      return mapper.treeToValue(obj,ContentSearchService.class);
    }
  }
 else   if (Objects.equals(context,GeoService.CONTEXT)) {
    return mapper.treeToValue(obj,GeoService.class);
  }
 else   if (Objects.equals(context,PhysicalDimensionsService.CONTEXT)) {
    return mapper.treeToValue(obj,PhysicalDimensionsService.class);
  }
 else {
    return mapper.treeToValue(obj,GenericService.class);
  }
}"
40367,"public boolean isImageService(ObjectNode node){
  JsonNode ctxNode=node.get(""String_Node_Str"");
  if (ctxNode != null && ImageService.CONTEXT.equals(ctxNode.textValue())) {
    return true;
  }
 else {
    return ImmutableSet.of(ImageApiProfile.LEVEL_ONE.getIdentifier().toString(),ImageApiProfile.LEVEL_TWO.getIdentifier().toString(),ImageApiProfile.LEVEL_ZERO.getIdentifier().toString()).contains(node.get(""String_Node_Str"").asText());
  }
}","public boolean isImageService(ObjectNode node){
  JsonNode ctxNode=node.get(""String_Node_Str"");
  JsonNode profileNode=node.get(""String_Node_Str"");
  if (ctxNode != null && ImageService.CONTEXT.equals(ctxNode.textValue())) {
    return true;
  }
 else   if (profileNode != null) {
    return ImmutableSet.of(ImageApiProfile.LEVEL_ONE.getIdentifier().toString(),ImageApiProfile.LEVEL_TWO.getIdentifier().toString(),ImageApiProfile.LEVEL_ZERO.getIdentifier().toString()).contains(profileNode.asText());
  }
 else {
    return false;
  }
}"
40368,"@Override public void serialize(Resource value,JsonGenerator gen,SerializerProvider serializers) throws IOException {
  if (gen.getOutputContext().getParent() == null) {
    value._context=Resource.CONTEXT;
  }
  String containingField=getContainingField(gen);
  String typeBackup=null;
  if (ImmutableSet.of(""String_Node_Str"",""String_Node_Str"").contains(containingField)) {
    ImageContent imgContent=(ImageContent)value;
    typeBackup=imgContent._type;
    imgContent._type=null;
  }
  Completeness completeness=ModelUtilities.getCompleteness(value,value.getClass());
  if (Objects.equals(containingField,""String_Node_Str"") && completeness == ModelUtilities.Completeness.ID_AND_TYPE) {
    completeness=ModelUtilities.Completeness.ID_ONLY;
  }
  if (Objects.equals(containingField,""String_Node_Str"") && completeness == ModelUtilities.Completeness.ID_AND_TYPE) {
    String parentType=((Resource)gen.getCurrentValue()).getType();
    String withinType=value.getType();
    boolean skipType=((parentType.equals(""String_Node_Str"") && withinType.equals(""String_Node_Str"")) || (parentType.equals(""String_Node_Str"") && withinType.equals(""String_Node_Str"")) || (parentType.equals(""String_Node_Str"") && withinType.equals(""String_Node_Str"")));
    if (skipType) {
      completeness=ModelUtilities.Completeness.ID_ONLY;
    }
  }
 else   if (Objects.equals(containingField,""String_Node_Str"") && completeness == ModelUtilities.Completeness.ID_AND_TYPE) {
    boolean skipType=(value instanceof Canvas && gen.getCurrentValue() instanceof Annotation && ((Annotation)gen.getCurrentValue()).getMotivation().equals(Motivation.PAINTING));
    if (skipType) {
      completeness=ModelUtilities.Completeness.ID_ONLY;
    }
  }
 else {
    ImmutableSet<String> skipParents=ImmutableSet.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    boolean shouldSkip=(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").contains(containingField) || (completeness == Completeness.ID_AND_TYPE && skipParents.contains(containingField)));
    if (shouldSkip) {
      completeness=Completeness.ID_ONLY;
    }
  }
switch (completeness) {
case EMPTY:
    gen.writeNull();
  break;
case ID_ONLY:
gen.writeObject(value.getIdentifier().toString());
break;
default :
defaultSerializer.serialize(value,gen,serializers);
}
if (typeBackup != null) {
((ImageContent)value)._type=typeBackup;
}
}","@Override public void serialize(Resource value,JsonGenerator gen,SerializerProvider serializers) throws IOException {
  if (gen.getOutputContext().getParent() == null) {
    value._context=Resource.CONTEXT;
  }
  String containingField=getContainingField(gen);
  String typeBackup=null;
  if (ImmutableSet.of(""String_Node_Str"",""String_Node_Str"").contains(containingField)) {
    ImageContent imgContent=(ImageContent)value;
    typeBackup=imgContent._type;
    imgContent._type=null;
  }
  Completeness completeness=ModelUtilities.getCompleteness(value,value.getClass());
  if (Objects.equals(containingField,""String_Node_Str"") && completeness == ModelUtilities.Completeness.ID_AND_TYPE) {
    completeness=ModelUtilities.Completeness.ID_ONLY;
  }
  if (Objects.equals(containingField,""String_Node_Str"") && completeness == ModelUtilities.Completeness.ID_AND_TYPE) {
    String parentType=null;
    if (gen.getCurrentValue() != null) {
      parentType=((Resource)gen.getCurrentValue()).getType();
    }
    String withinType=value.getType();
    boolean skipType=((""String_Node_Str"".equals(parentType) && ""String_Node_Str"".equals(withinType)) || (""String_Node_Str"".equals(parentType) && ""String_Node_Str"".equals(withinType)) || (""String_Node_Str"".equals(parentType) && ""String_Node_Str"".equals(withinType)));
    if (skipType) {
      completeness=ModelUtilities.Completeness.ID_ONLY;
    }
  }
 else   if (Objects.equals(containingField,""String_Node_Str"") && completeness == ModelUtilities.Completeness.ID_AND_TYPE) {
    boolean skipType=(value instanceof Canvas && gen.getCurrentValue() instanceof Annotation && Objects.equals(((Annotation)gen.getCurrentValue()).getMotivation(),Motivation.PAINTING));
    if (skipType) {
      completeness=ModelUtilities.Completeness.ID_ONLY;
    }
  }
 else {
    ImmutableSet<String> skipParents=ImmutableSet.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    boolean shouldSkip=(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").contains(containingField) || (completeness == Completeness.ID_AND_TYPE && skipParents.contains(containingField)));
    if (shouldSkip) {
      completeness=Completeness.ID_ONLY;
    }
  }
switch (completeness) {
case EMPTY:
    gen.writeNull();
  break;
case ID_ONLY:
gen.writeObject(value.getIdentifier().toString());
break;
default :
defaultSerializer.serialize(value,gen,serializers);
}
if (typeBackup != null) {
((ImageContent)value)._type=typeBackup;
}
}"
40369,"@Override protected StorjNode doInBackground(List<StorjNode>... lists){
  StorjNode node=null;
  if (hasActiveInternetConnection()) {
    for (    StorjNode storjNode : lists[0]) {
      try {
        if (MainActivity.mIsRunning) {
          ListViewHolder holder=ListViewHolder.getInstance();
          holder.showLoadingBar(storjNode.getNodeID().getValue(),true);
        }
        JSONObject storjApiReponse=getJSONObjectFromURL(STORJ_API_URL + ""String_Node_Str"" + storjNode.getNodeID().getValue());
        Log.d(TAG,""String_Node_Str"" + storjApiReponse.toString());
        DatabaseManager db=DatabaseManager.getInstance(mContext);
        node=new StorjNode(storjApiReponse);
        node.setLastChecked(Calendar.getInstance().getTime());
        JSONObject releaseInfoJson=getJSONObjectFromURL(""String_Node_Str"");
        Version newestGithubVersion=null;
        if (releaseInfoJson == null) {
          Version savedStorjCoreVersion=getSavedActualStorjCoreVersion();
          if (savedStorjCoreVersion != null) {
            newestGithubVersion=getSavedActualStorjCoreVersion();
          }
        }
 else {
          newestGithubVersion=new Version(releaseInfoJson.getString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
        }
        if (newestGithubVersion != null && node.getUserAgent().isSet()) {
          node.setIsOutdated(!node.getUserAgent().getValue().isEqualTo(newestGithubVersion));
        }
 else {
          node.setIsOutdated(false);
        }
        if (getSavedActualStorjCoreVersion() == null && newestGithubVersion != null) {
          saveNewUserAgentVersion(newestGithubVersion);
        }
 else         if (newestGithubVersion != null && getSavedActualStorjCoreVersion().isLowerThan(newestGithubVersion)) {
          saveNewUserAgentVersion(newestGithubVersion);
          sendNewUserAgentVersionNotification();
        }
        Cursor cursor=db.getNode(node.getNodeID().getValue());
        if (cursor.getCount() > 0) {
          StorjNode previusNode=new StorjNode(cursor);
          node.setSimpleName(previusNode.getSimpleName().getValue());
          if (previusNode.getResponseTime().getValue() != previusNode.getResponseTime().getDefault())           node.setOnlineSince(previusNode.getOnlineSince());
          if (node.getLastContractSent().getValue() != previusNode.getLastContractSent().getValue()) {
            node.setLastContractSentUpdated(Calendar.getInstance().getTime());
          }
 else {
            node.setLastContractSentUpdated(previusNode.getLastContractSentUpdated());
          }
          if (isNodeOffline(node)) {
            node.setResponseTime(node.getResponseTime().getDefault());
            node.setShouldSendNotification(false);
            if (previusNode.getShouldSendNotification())             sendNodeOfflineNotification(node);
          }
 else {
            db.insertNodeResponseTimeEntry(node);
            db.insertNodeReputationEntry(node);
            if (previusNode.getResponseTime().getValue() == previusNode.getResponseTime().getDefault()) {
              node.setShouldSendNotification(true);
            }
          }
          db.updateNode(node);
          publishProgress(node.getNodeID().getValue());
        }
        if (MainActivity.mIsRunning) {
          ListViewHolder holder=ListViewHolder.getInstance();
          holder.showLoadingBar(storjNode.getNodeID().getValue(),false);
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
        if (MainActivity.mIsRunning) {
          ListViewHolder holder=ListViewHolder.getInstance();
          holder.showLoadingBar(storjNode.getNodeID().getValue(),false);
        }
        Log.i(TAG,""String_Node_Str"" + storjNode.getNodeID().getValue() + ""String_Node_Str"");
      }
catch (      JSONException e) {
        if (MainActivity.mIsRunning) {
          ListViewHolder holder=ListViewHolder.getInstance();
          holder.showLoadingBar(storjNode.getNodeID().getValue(),false);
        }
        e.printStackTrace();
      }
    }
  }
  return node;
}","@Override protected StorjNode doInBackground(List<StorjNode>... lists){
  mRunning=true;
  StorjNode node=null;
  if (hasActiveInternetConnection()) {
    for (    StorjNode storjNode : lists[0]) {
      try {
        if (MainActivity.mIsRunning) {
          ListViewHolder holder=ListViewHolder.getInstance();
          holder.showLoadingBar(storjNode.getNodeID().getValue(),true);
        }
        JSONObject storjApiReponse=getJSONObjectFromURL(STORJ_API_URL + ""String_Node_Str"" + storjNode.getNodeID().getValue());
        Log.d(TAG,""String_Node_Str"" + storjApiReponse.toString());
        DatabaseManager db=DatabaseManager.getInstance(mContext);
        node=new StorjNode(storjApiReponse);
        node.setLastChecked(Calendar.getInstance().getTime());
        JSONObject releaseInfoJson=getJSONObjectFromURL(""String_Node_Str"");
        Version newestGithubVersion=null;
        if (releaseInfoJson == null) {
          Version savedStorjCoreVersion=getSavedActualStorjCoreVersion();
          if (savedStorjCoreVersion != null) {
            newestGithubVersion=getSavedActualStorjCoreVersion();
          }
        }
 else {
          newestGithubVersion=new Version(releaseInfoJson.getString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
        }
        if (newestGithubVersion != null && node.getUserAgent().isSet()) {
          node.setIsOutdated(!node.getUserAgent().getValue().isEqualTo(newestGithubVersion));
        }
 else {
          node.setIsOutdated(false);
        }
        if (getSavedActualStorjCoreVersion() == null && newestGithubVersion != null) {
          saveNewUserAgentVersion(newestGithubVersion);
        }
 else         if (newestGithubVersion != null && getSavedActualStorjCoreVersion().isLowerThan(newestGithubVersion)) {
          saveNewUserAgentVersion(newestGithubVersion);
          sendNewUserAgentVersionNotification();
        }
        Cursor cursor=db.getNode(node.getNodeID().getValue());
        if (cursor.getCount() > 0) {
          StorjNode previusNode=new StorjNode(cursor);
          node.setSimpleName(previusNode.getSimpleName().getValue());
          if (previusNode.getResponseTime().getValue() != previusNode.getResponseTime().getDefault())           node.setOnlineSince(previusNode.getOnlineSince());
          if (node.getLastContractSent().getValue() != previusNode.getLastContractSent().getValue()) {
            node.setLastContractSentUpdated(Calendar.getInstance().getTime());
          }
 else {
            node.setLastContractSentUpdated(previusNode.getLastContractSentUpdated());
          }
          if (isNodeOffline(node)) {
            node.setResponseTime(node.getResponseTime().getDefault());
            node.setShouldSendNotification(false);
            if (previusNode.getShouldSendNotification())             sendNodeOfflineNotification(node);
          }
 else {
            db.insertNodeResponseTimeEntry(node);
            db.insertNodeReputationEntry(node);
            if (previusNode.getResponseTime().getValue() == previusNode.getResponseTime().getDefault()) {
              node.setShouldSendNotification(true);
            }
          }
          db.updateNode(node);
          publishProgress(node.getNodeID().getValue());
        }
        if (MainActivity.mIsRunning) {
          ListViewHolder holder=ListViewHolder.getInstance();
          holder.showLoadingBar(storjNode.getNodeID().getValue(),false);
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
        if (MainActivity.mIsRunning) {
          ListViewHolder holder=ListViewHolder.getInstance();
          holder.showLoadingBar(storjNode.getNodeID().getValue(),false);
        }
        Log.i(TAG,""String_Node_Str"" + storjNode.getNodeID().getValue() + ""String_Node_Str"");
      }
catch (      JSONException e) {
        if (MainActivity.mIsRunning) {
          ListViewHolder holder=ListViewHolder.getInstance();
          holder.showLoadingBar(storjNode.getNodeID().getValue(),false);
        }
        e.printStackTrace();
      }
    }
  }
  mRunning=false;
  return node;
}"
40370,"@Override protected void onPostExecute(StorjNode receivedStorjNode){
  super.onPostExecute(receivedStorjNode);
}","@Override protected void onPostExecute(StorjNode receivedStorjNode){
  super.onPostExecute(receivedStorjNode);
  if (mRetrigger) {
    pullStorjNodesStats(mContext);
    mRetrigger=false;
  }
}"
40371,"private void showAddNewNodeDialog(){
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(R.string.add_node_popup_title);
  LayoutInflater inflater=this.getLayoutInflater();
  View dialogView=inflater.inflate(R.layout.activity_main_add_node,null);
  builder.setView(dialogView);
  final AppCompatEditText textViewSimpleName=(AppCompatEditText)dialogView.findViewById(R.id.textView_add_simpleName);
  final AppCompatEditText textViewNodeId=(AppCompatEditText)dialogView.findViewById(R.id.textView_add_nodeID);
  builder.setPositiveButton(getString(R.string.ok),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      boolean error=false;
      if (textViewNodeId.getText().toString().matches(""String_Node_Str"")) {
        Toast.makeText(mContext,getString(R.string.add_error_missing_nodeID),Toast.LENGTH_SHORT).show();
        error=true;
      }
 else       if (textViewSimpleName.getText().toString().matches(""String_Node_Str"")) {
        Toast.makeText(mContext,getString(R.string.add_error_missing_SimpleName),Toast.LENGTH_SHORT).show();
        error=true;
      }
 else       if (textViewNodeId.getText().length() != 40) {
        Toast.makeText(mContext,getString(R.string.add_error_wrong_character_count),Toast.LENGTH_SHORT).show();
        error=true;
      }
      DatabaseManager databaseManager=DatabaseManager.getInstance(mContext);
      Cursor cursor=databaseManager.getNode(textViewNodeId.getText().toString());
      if (cursor.getCount() >= 1) {
        Toast.makeText(mContext,getString(R.string.add_error_node_exists),Toast.LENGTH_SHORT).show();
        error=true;
      }
      if (!error) {
        StorjNode newNode=new StorjNode(textViewNodeId.getText().toString());
        newNode.setSimpleName(textViewSimpleName.getText().toString());
        databaseManager.insertNode(newNode);
        redrawList();
        pullSotrjNodeStats(mContext);
      }
    }
  }
);
  builder.setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      dialog.cancel();
    }
  }
);
  AlertDialog alertDialog=builder.create();
  alertDialog.show();
  alertDialog.getButton(AlertDialog.BUTTON_POSITIVE).setTextColor(getResources().getColor(R.color.black));
  alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE).setTextColor(getResources().getColor(R.color.black));
}","private void showAddNewNodeDialog(){
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(R.string.add_node_popup_title);
  LayoutInflater inflater=this.getLayoutInflater();
  View dialogView=inflater.inflate(R.layout.activity_main_add_node,null);
  builder.setView(dialogView);
  final AppCompatEditText textViewSimpleName=(AppCompatEditText)dialogView.findViewById(R.id.textView_add_simpleName);
  final AppCompatEditText textViewNodeId=(AppCompatEditText)dialogView.findViewById(R.id.textView_add_nodeID);
  builder.setPositiveButton(getString(R.string.ok),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      boolean error=false;
      if (textViewNodeId.getText().toString().matches(""String_Node_Str"")) {
        Toast.makeText(mContext,getString(R.string.add_error_missing_nodeID),Toast.LENGTH_SHORT).show();
        error=true;
      }
 else       if (textViewSimpleName.getText().toString().matches(""String_Node_Str"")) {
        Toast.makeText(mContext,getString(R.string.add_error_missing_SimpleName),Toast.LENGTH_SHORT).show();
        error=true;
      }
 else       if (textViewNodeId.getText().length() != 40) {
        Toast.makeText(mContext,getString(R.string.add_error_wrong_character_count),Toast.LENGTH_SHORT).show();
        error=true;
      }
      DatabaseManager databaseManager=DatabaseManager.getInstance(mContext);
      Cursor cursor=databaseManager.getNode(textViewNodeId.getText().toString());
      if (cursor.getCount() >= 1) {
        Toast.makeText(mContext,getString(R.string.add_error_node_exists),Toast.LENGTH_SHORT).show();
        error=true;
      }
      if (!error) {
        StorjNode newNode=new StorjNode(textViewNodeId.getText().toString());
        newNode.setSimpleName(textViewSimpleName.getText().toString());
        databaseManager.insertNode(newNode);
        redrawList();
        if (!AlarmReceiver.mRunning) {
          pullStorjNodeStats(mContext);
        }
 else {
          AlarmReceiver.mRetrigger=true;
        }
      }
    }
  }
);
  builder.setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      dialog.cancel();
    }
  }
);
  AlertDialog alertDialog=builder.create();
  alertDialog.show();
  alertDialog.getButton(AlertDialog.BUTTON_POSITIVE).setTextColor(getResources().getColor(R.color.black));
  alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE).setTextColor(getResources().getColor(R.color.black));
}"
40372,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.action_settings:
    Intent i=new Intent(this,PreferencesActivity.class);
  startActivity(i);
return true;
case R.id.action_sort:
switchSortOrder();
return true;
case R.id.action_refresh:
pullSotrjNodeStats(mContext);
return true;
case R.id.action_help:
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(Parameters.HELP_URL));
startActivity(browserIntent);
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.action_settings:
    Intent i=new Intent(this,PreferencesActivity.class);
  startActivity(i);
return true;
case R.id.action_sort:
switchSortOrder();
return true;
case R.id.action_refresh:
pullStorjNodeStats(mContext);
return true;
case R.id.action_help:
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(Parameters.HELP_URL));
startActivity(browserIntent);
default :
return super.onOptionsItemSelected(item);
}
}"
40373,"private void showEditNowDialog(StorjNode storjNode,int position){
  AlertDialog.Builder builder=new AlertDialog.Builder(mContext);
  builder.setTitle(mContext.getString(R.string.edit_node));
  LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View layout=inflater.inflate(R.layout.activity_main_edit_node_popup,null);
  AppCompatEditText textView_nodeSimpleName=(AppCompatEditText)layout.findViewById(R.id.textView_edit_simpleName);
  AppCompatEditText textView_nodeId=(AppCompatEditText)layout.findViewById(R.id.textView_edit_nodeID);
  textView_nodeId.setText(storjNode.getNodeID().getValue());
  textView_nodeSimpleName.setText(storjNode.getSimpleName().getValue());
  builder.setView(layout);
  final AlertDialog alertDialog=builder.create();
  ImageView deleteButton=(ImageView)layout.findViewById(R.id.button_edit_delete_node);
  deleteButton.setTag(position);
  deleteButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      int position=(Integer)v.getTag();
      StorjNode selectedNode=mItems.get(position);
      alertDialog.cancel();
      deleteNode(selectedNode);
      pullSotrjNodeStats(mContext);
    }
  }
);
  ImageView saveButton=(ImageView)layout.findViewById(R.id.button_edit_save_node);
  saveButton.setTag(position);
  saveButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      int position=(Integer)v.getTag();
      boolean error=false;
      StorjNode selectedNode=mItems.get(position);
      TextView textView_nodeId=(TextView)v.getRootView().findViewById(R.id.textView_edit_nodeID);
      TextView textView_simpleName=(TextView)v.getRootView().findViewById(R.id.textView_edit_simpleName);
      if (textView_nodeId.getText().toString().matches(""String_Node_Str"")) {
        Toast.makeText(mContext,mContext.getString(R.string.add_error_missing_nodeID),Toast.LENGTH_SHORT).show();
        error=true;
      }
 else       if (textView_simpleName.getText().toString().matches(""String_Node_Str"")) {
        Toast.makeText(mContext,mContext.getString(R.string.add_error_missing_SimpleName),Toast.LENGTH_SHORT).show();
        error=true;
      }
 else       if (textView_nodeId.getText().length() != 40) {
        Toast.makeText(mContext,mContext.getString(R.string.add_error_wrong_character_count),Toast.LENGTH_SHORT).show();
        error=true;
      }
      DatabaseManager databaseManager=DatabaseManager.getInstance(mContext);
      Cursor cursor=databaseManager.getNode(textView_nodeId.getText().toString());
      if (cursor.getCount() >= 1 && !(textView_nodeId.getText().toString().equals(selectedNode.getNodeID().getValue()))) {
        Toast.makeText(mContext,mContext.getString(R.string.add_error_node_exists),Toast.LENGTH_SHORT).show();
        error=true;
      }
      if (!error) {
        StorjNode updatedNode=new StorjNode(textView_nodeId.getText().toString());
        updatedNode.setSimpleName(textView_simpleName.getText().toString());
        updateNode(selectedNode,updatedNode);
        pullSotrjNodeStats(mContext);
      }
      alertDialog.cancel();
    }
  }
);
  alertDialog.show();
}","private void showEditNowDialog(StorjNode storjNode,int position){
  AlertDialog.Builder builder=new AlertDialog.Builder(mContext);
  builder.setTitle(mContext.getString(R.string.edit_node));
  LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View layout=inflater.inflate(R.layout.activity_main_edit_node_popup,null);
  AppCompatEditText textView_nodeSimpleName=(AppCompatEditText)layout.findViewById(R.id.textView_edit_simpleName);
  AppCompatEditText textView_nodeId=(AppCompatEditText)layout.findViewById(R.id.textView_edit_nodeID);
  textView_nodeId.setText(storjNode.getNodeID().getValue());
  textView_nodeSimpleName.setText(storjNode.getSimpleName().getValue());
  builder.setView(layout);
  final AlertDialog alertDialog=builder.create();
  ImageView deleteButton=(ImageView)layout.findViewById(R.id.button_edit_delete_node);
  deleteButton.setTag(position);
  deleteButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      int position=(Integer)v.getTag();
      StorjNode selectedNode=mItems.get(position);
      alertDialog.cancel();
      deleteNode(selectedNode);
      if (!AlarmReceiver.mRunning) {
        pullSotrjNodeStats(mContext);
      }
 else {
        AlarmReceiver.mRetrigger=true;
      }
    }
  }
);
  ImageView saveButton=(ImageView)layout.findViewById(R.id.button_edit_save_node);
  saveButton.setTag(position);
  saveButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      int position=(Integer)v.getTag();
      boolean error=false;
      StorjNode selectedNode=mItems.get(position);
      TextView textView_nodeId=(TextView)v.getRootView().findViewById(R.id.textView_edit_nodeID);
      TextView textView_simpleName=(TextView)v.getRootView().findViewById(R.id.textView_edit_simpleName);
      if (textView_nodeId.getText().toString().matches(""String_Node_Str"")) {
        Toast.makeText(mContext,mContext.getString(R.string.add_error_missing_nodeID),Toast.LENGTH_SHORT).show();
        error=true;
      }
 else       if (textView_simpleName.getText().toString().matches(""String_Node_Str"")) {
        Toast.makeText(mContext,mContext.getString(R.string.add_error_missing_SimpleName),Toast.LENGTH_SHORT).show();
        error=true;
      }
 else       if (textView_nodeId.getText().length() != 40) {
        Toast.makeText(mContext,mContext.getString(R.string.add_error_wrong_character_count),Toast.LENGTH_SHORT).show();
        error=true;
      }
      DatabaseManager databaseManager=DatabaseManager.getInstance(mContext);
      Cursor cursor=databaseManager.getNode(textView_nodeId.getText().toString());
      if (cursor.getCount() >= 1 && !(textView_nodeId.getText().toString().equals(selectedNode.getNodeID().getValue()))) {
        Toast.makeText(mContext,mContext.getString(R.string.add_error_node_exists),Toast.LENGTH_SHORT).show();
        error=true;
      }
      if (!error) {
        StorjNode updatedNode=new StorjNode(textView_nodeId.getText().toString());
        updatedNode.setSimpleName(textView_simpleName.getText().toString());
        updateNode(selectedNode,updatedNode);
        if (!AlarmReceiver.mRunning) {
          pullSotrjNodeStats(mContext);
        }
 else {
          AlarmReceiver.mRetrigger=true;
        }
      }
      alertDialog.cancel();
    }
  }
);
  alertDialog.show();
}"
40374,"@Override public void onClick(View v){
  int position=(Integer)v.getTag();
  boolean error=false;
  StorjNode selectedNode=mItems.get(position);
  TextView textView_nodeId=(TextView)v.getRootView().findViewById(R.id.textView_edit_nodeID);
  TextView textView_simpleName=(TextView)v.getRootView().findViewById(R.id.textView_edit_simpleName);
  if (textView_nodeId.getText().toString().matches(""String_Node_Str"")) {
    Toast.makeText(mContext,mContext.getString(R.string.add_error_missing_nodeID),Toast.LENGTH_SHORT).show();
    error=true;
  }
 else   if (textView_simpleName.getText().toString().matches(""String_Node_Str"")) {
    Toast.makeText(mContext,mContext.getString(R.string.add_error_missing_SimpleName),Toast.LENGTH_SHORT).show();
    error=true;
  }
 else   if (textView_nodeId.getText().length() != 40) {
    Toast.makeText(mContext,mContext.getString(R.string.add_error_wrong_character_count),Toast.LENGTH_SHORT).show();
    error=true;
  }
  DatabaseManager databaseManager=DatabaseManager.getInstance(mContext);
  Cursor cursor=databaseManager.getNode(textView_nodeId.getText().toString());
  if (cursor.getCount() >= 1 && !(textView_nodeId.getText().toString().equals(selectedNode.getNodeID().getValue()))) {
    Toast.makeText(mContext,mContext.getString(R.string.add_error_node_exists),Toast.LENGTH_SHORT).show();
    error=true;
  }
  if (!error) {
    StorjNode updatedNode=new StorjNode(textView_nodeId.getText().toString());
    updatedNode.setSimpleName(textView_simpleName.getText().toString());
    updateNode(selectedNode,updatedNode);
    pullSotrjNodeStats(mContext);
  }
  alertDialog.cancel();
}","@Override public void onClick(View v){
  int position=(Integer)v.getTag();
  boolean error=false;
  StorjNode selectedNode=mItems.get(position);
  TextView textView_nodeId=(TextView)v.getRootView().findViewById(R.id.textView_edit_nodeID);
  TextView textView_simpleName=(TextView)v.getRootView().findViewById(R.id.textView_edit_simpleName);
  if (textView_nodeId.getText().toString().matches(""String_Node_Str"")) {
    Toast.makeText(mContext,mContext.getString(R.string.add_error_missing_nodeID),Toast.LENGTH_SHORT).show();
    error=true;
  }
 else   if (textView_simpleName.getText().toString().matches(""String_Node_Str"")) {
    Toast.makeText(mContext,mContext.getString(R.string.add_error_missing_SimpleName),Toast.LENGTH_SHORT).show();
    error=true;
  }
 else   if (textView_nodeId.getText().length() != 40) {
    Toast.makeText(mContext,mContext.getString(R.string.add_error_wrong_character_count),Toast.LENGTH_SHORT).show();
    error=true;
  }
  DatabaseManager databaseManager=DatabaseManager.getInstance(mContext);
  Cursor cursor=databaseManager.getNode(textView_nodeId.getText().toString());
  if (cursor.getCount() >= 1 && !(textView_nodeId.getText().toString().equals(selectedNode.getNodeID().getValue()))) {
    Toast.makeText(mContext,mContext.getString(R.string.add_error_node_exists),Toast.LENGTH_SHORT).show();
    error=true;
  }
  if (!error) {
    StorjNode updatedNode=new StorjNode(textView_nodeId.getText().toString());
    updatedNode.setSimpleName(textView_simpleName.getText().toString());
    updateNode(selectedNode,updatedNode);
    if (!AlarmReceiver.mRunning) {
      pullSotrjNodeStats(mContext);
    }
 else {
      AlarmReceiver.mRetrigger=true;
    }
  }
  alertDialog.cancel();
}"
40375,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_storj_node_detail);
  Toolbar toolbar=(Toolbar)findViewById(R.id.my_toolbar);
  setSupportActionBar(toolbar);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  mContext=getApplicationContext();
  if (!getIntent().hasExtra(EXTRA_NODEID))   finish();
  DatabaseManager db=DatabaseManager.getInstance(mContext);
  Cursor selectedNode=db.getNode(getIntent().getStringExtra(EXTRA_NODEID));
  if (selectedNode.getColumnIndex(NodeReaderContract.NodeEntry.NODE_ID) == -1)   finish();
  try {
    mSelectedNode=new StorjNode(selectedNode);
  }
 catch (  CursorIndexOutOfBoundsException e) {
    e.printStackTrace();
    finish();
  }
  if (mSelectedNode.getNodeID().getValue() == null) {
    finish();
  }
  AppCompatTextView text_Error=(AppCompatTextView)findViewById(R.id.storjNode_details_Error);
  AppCompatTextView text_SimpleName=(AppCompatTextView)findViewById(R.id.storjNode_details_SimpleName);
  DetailsLineView text_NodeID=(DetailsLineView)findViewById(R.id.storjNode_details_NodeID);
  DetailsLineView text_Address=(DetailsLineView)findViewById(R.id.storjNode_details_Address);
  DetailsLineView text_LastSeen=(DetailsLineView)findViewById(R.id.storjNode_details_LastSeen);
  DetailsLineView text_UserAgent=(DetailsLineView)findViewById(R.id.storjNode_details_UserAgent);
  DetailsLineView text_Protocol=(DetailsLineView)findViewById(R.id.storjNode_details_Protocol);
  DetailsLineView text_LastTimeout=(DetailsLineView)findViewById(R.id.storjNode_details_LastTimeout);
  DetailsLineView text_TimeoutRate=(DetailsLineView)findViewById(R.id.storjNode_details_TimeoutRate);
  AppCompatTextView text_Status=(AppCompatTextView)findViewById(R.id.storjNode_details_Status);
  DetailsLineView text_LastContractSent=(DetailsLineView)findViewById(R.id.storjNode_details_LastContractSent);
  DetailsLineView text_SpaceAvailable=(DetailsLineView)findViewById(R.id.storjNode_details_SpaceAvailable);
  DetailsLineView text_onlineSince=(DetailsLineView)findViewById(R.id.storjNode_details_OnlineSince);
  DetailsLineView text_LastContractSentUpdated=(DetailsLineView)findViewById(R.id.storjNode_details_LastContractSentUpdated);
  AppCompatButton btn_ResponseTime=(AppCompatButton)findViewById(R.id.btn_responseTime);
  AppCompatButton btn_Reputation=(AppCompatButton)findViewById(R.id.btn_reputation);
  ValueLineChart mCubicValueLineChart=(ValueLineChart)findViewById(R.id.cubiclinechart);
  ValueLineSeries series=getSeriesFromDB(NodeReaderContract.NodeResponseTimeEntry.TABLE_NAME,mSelectedNode.getNodeID().getValue());
  if (series != null && series.getSeries().size() > 2) {
    mCubicValueLineChart.addSeries(series);
    mCubicValueLineChart.startAnimation();
  }
  text_SimpleName.setText(getString(R.string.details_SimpleName,mSelectedNode.getSimpleName().getValue()));
  if (mSelectedNode.getAddress().isSet()) {
    SimpleDateFormat simpleDate=new SimpleDateFormat(""String_Node_Str"");
    int gmtOffset=TimeZone.getDefault().getRawOffset();
    text_NodeID.setTitle(getString(R.string.details_NodeID));
    text_NodeID.setValue(mSelectedNode.getNodeID().getValue());
    text_NodeID.setStatus(DetailsLineView.Status.NoStatus);
    text_Address.setTitle(getString(R.string.details_Address));
    if (mSelectedNode.getAddress().isSet() && mSelectedNode.getPort().isSet()) {
      String address=mSelectedNode.getAddress().getValue() + ""String_Node_Str"" + Integer.toString(mSelectedNode.getPort().getValue());
      text_Address.setValue(address);
      text_Address.setStatus(DetailsLineView.Status.NoStatus);
    }
 else {
      text_Address.setValue(getString(R.string.unknown));
      text_Address.setStatus(DetailsLineView.Status.NOK);
    }
    text_UserAgent.setTitle(getString(R.string.details_UserAgent));
    if (mSelectedNode.isOutdated()) {
      text_UserAgent.setValue(getString(R.string.userAgent_outdated,mSelectedNode.getUserAgent().getValue().toString()));
      text_UserAgent.setStatus(DetailsLineView.Status.NOK);
    }
 else {
      if (mSelectedNode.getUserAgent().isSet()) {
        text_UserAgent.setValue(mSelectedNode.getUserAgent().getValue().toString());
        text_UserAgent.setStatus(DetailsLineView.Status.OK);
      }
 else {
        text_UserAgent.setValue(getString(R.string.unknown));
        text_UserAgent.setStatus(DetailsLineView.Status.NOK);
      }
    }
    text_LastSeen.setTitle(getString(R.string.details_LastSeen));
    if (mSelectedNode.getLastSeen().isSet()) {
      if (mSelectedNode.getResponseTime().getValue() != mSelectedNode.getResponseTime().getDefault()) {
        text_LastSeen.setValue(simpleDate.format(mSelectedNode.getLastSeen().getValue().getTime() + gmtOffset));
        text_LastSeen.setStatus(DetailsLineView.Status.OK);
      }
 else {
        text_LastSeen.setValue(simpleDate.format(mSelectedNode.getLastSeen().getValue().getTime() + gmtOffset));
        text_LastSeen.setStatus(DetailsLineView.Status.NOK);
      }
    }
 else {
      text_LastSeen.setValue(getString(R.string.unknown));
      text_LastSeen.setStatus(DetailsLineView.Status.NOK);
    }
    text_UserAgent.setTitle(getString(R.string.details_UserAgent));
    if (mSelectedNode.getUserAgent().isSet()) {
      text_UserAgent.setValue(mSelectedNode.getUserAgent().getValue().toString());
      text_UserAgent.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_UserAgent.setValue(getString(R.string.unknown));
      text_UserAgent.setStatus(DetailsLineView.Status.OK);
    }
    text_Protocol.setTitle(getString(R.string.details_Protocol));
    if (mSelectedNode.getProtocol().isSet()) {
      text_Protocol.setValue(mSelectedNode.getProtocol().getValue().toString());
      text_Protocol.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_Protocol.setValue(getString(R.string.unknown));
      text_Protocol.setStatus(DetailsLineView.Status.OK);
    }
    text_LastTimeout.setTitle(getString(R.string.details_LastTimeout));
    if (mSelectedNode.getLastTimeout().isSet()) {
      text_LastTimeout.setValue(simpleDate.format(mSelectedNode.getLastTimeout().getValue().getTime() + gmtOffset));
      text_LastTimeout.setStatus(DetailsLineView.Status.NoStatus);
    }
 else {
      text_LastTimeout.setValue(getString(R.string.details_No_Timeout));
      text_LastTimeout.setStatus(DetailsLineView.Status.OK);
    }
    text_TimeoutRate.setTitle(getString(R.string.details_TimeoutRate));
    if (mSelectedNode.getTimeoutRate().isSet()) {
      text_TimeoutRate.setValue(String.format(""String_Node_Str"",mSelectedNode.getTimeoutRate().getValue()));
      text_TimeoutRate.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_TimeoutRate.setValue(""String_Node_Str"");
      text_TimeoutRate.setStatus(DetailsLineView.Status.OK);
    }
    text_LastContractSent.setTitle(getString(R.string.details_LastContractSent));
    if (mSelectedNode.getLastContractSent().isSet()) {
      text_LastContractSent.setValue(Long.toString(mSelectedNode.getLastContractSent().getValue()));
      text_LastContractSent.setStatus(DetailsLineView.Status.NoStatus);
    }
 else {
      text_LastContractSent.setValue(getString(R.string.unknown));
      text_LastContractSent.setStatus(DetailsLineView.Status.NOK);
    }
    text_SpaceAvailable.setTitle(getString(R.string.details_SpaceAvailable));
    if (mSelectedNode.isSpaceAvailable().isSet()) {
      text_SpaceAvailable.setValue(Boolean.toString(mSelectedNode.isSpaceAvailable().getValue()));
      text_SpaceAvailable.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_SpaceAvailable.setValue(getString(R.string.unknown));
      text_SpaceAvailable.setStatus(DetailsLineView.Status.NOK);
    }
    text_onlineSince.setTitle(getString(R.string.details_OnlineSince));
    if (mSelectedNode.getOnlineSince() != null && mSelectedNode.getResponseTime().getValue() != -1) {
      String onlineSinceString=TimestampConverter.getFormatedTimediff(mSelectedNode.getOnlineSince(),Calendar.getInstance().getTime());
      text_onlineSince.setValue(onlineSinceString);
      text_onlineSince.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_onlineSince.setValue(getString(R.string.details_OnlineSince_offline));
      text_onlineSince.setStatus(DetailsLineView.Status.NOK);
    }
    text_LastContractSentUpdated.setTitle(getString(R.string.details_LastContractSentUpdated));
    if (mSelectedNode.getLastContractSentUpdated() != null) {
      String lastUpdatedString=TimestampConverter.getFormatedTimediff(mSelectedNode.getLastContractSentUpdated(),Calendar.getInstance().getTime());
      text_LastContractSentUpdated.setValue(lastUpdatedString + ""String_Node_Str"");
      text_LastContractSentUpdated.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_LastContractSentUpdated.setVisibility(View.GONE);
    }
    text_Error.setVisibility(View.GONE);
  }
 else {
    text_Error.setText(getString(R.string.details_Error,mSelectedNode.getNodeID().getValue()));
    text_NodeID.setVisibility(View.GONE);
    text_Address.setVisibility(View.GONE);
    text_UserAgent.setVisibility(View.GONE);
    text_LastSeen.setVisibility(View.GONE);
    text_Protocol.setVisibility(View.GONE);
    text_LastTimeout.setVisibility(View.GONE);
    text_TimeoutRate.setVisibility(View.GONE);
    text_LastContractSent.setVisibility(View.GONE);
    text_onlineSince.setVisibility(View.GONE);
    text_LastContractSentUpdated.setVisibility(View.GONE);
  }
  if (mSelectedNode.getResponseTime().getValue() == mSelectedNode.getResponseTime().getDefault()) {
    text_Status.setText(getString(R.string.details_offline));
    text_Status.setTextColor(getResources().getColor(R.color.red));
  }
 else {
    text_Status.setText(getString(R.string.details_online));
    text_Status.setTextColor(getResources().getColor(R.color.storj_color_green));
  }
  btn_ResponseTime.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ValueLineChart mCubicValueLineChart=(ValueLineChart)findViewById(R.id.cubiclinechart);
      AppCompatButton btn_ResponseTime=(AppCompatButton)findViewById(R.id.btn_responseTime);
      AppCompatButton btn_Reputation=(AppCompatButton)findViewById(R.id.btn_reputation);
      mCubicValueLineChart.clearChart();
      ValueLineSeries valueLineSeries=getSeriesFromDB(NodeReaderContract.NodeResponseTimeEntry.TABLE_NAME,mSelectedNode.getNodeID().getValue());
      if (valueLineSeries != null && valueLineSeries.getSeries().size() > 2) {
        mCubicValueLineChart.addSeries(valueLineSeries);
        mCubicValueLineChart.startAnimation();
      }
      btn_ResponseTime.setTextColor(getResources().getColor(R.color.storj_color_blue));
      btn_Reputation.setTextColor(getResources().getColor(R.color.grey));
    }
  }
);
  btn_Reputation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ValueLineChart mCubicValueLineChart=(ValueLineChart)findViewById(R.id.cubiclinechart);
      AppCompatButton btn_ResponseTime=(AppCompatButton)findViewById(R.id.btn_responseTime);
      AppCompatButton btn_Reputation=(AppCompatButton)findViewById(R.id.btn_reputation);
      mCubicValueLineChart.clearChart();
      ValueLineSeries valueLineSeries=getSeriesFromDB(NodeReaderContract.NodeReputationEntry.TABLE_NAME,mSelectedNode.getNodeID().getValue());
      if (valueLineSeries != null && valueLineSeries.getSeries().size() > 2) {
        mCubicValueLineChart.addSeries(valueLineSeries);
        mCubicValueLineChart.startAnimation();
      }
      btn_Reputation.setTextColor(getResources().getColor(R.color.storj_color_green));
      btn_ResponseTime.setTextColor(getResources().getColor(R.color.dark_grey));
    }
  }
);
  btn_ResponseTime.setTextColor(getResources().getColor(R.color.storj_color_blue));
  btn_Reputation.setTextColor(getResources().getColor(R.color.grey));
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_storj_node_detail);
  Toolbar toolbar=(Toolbar)findViewById(R.id.my_toolbar);
  setSupportActionBar(toolbar);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  mContext=getApplicationContext();
  if (!getIntent().hasExtra(EXTRA_NODEID))   finish();
  DatabaseManager db=DatabaseManager.getInstance(mContext);
  Cursor selectedNode=db.getNode(getIntent().getStringExtra(EXTRA_NODEID));
  if (selectedNode.getColumnIndex(NodeReaderContract.NodeEntry.NODE_ID) == -1)   finish();
  try {
    mSelectedNode=new StorjNode(selectedNode);
  }
 catch (  CursorIndexOutOfBoundsException e) {
    e.printStackTrace();
    finish();
  }
  if (mSelectedNode.getNodeID().getValue() == null) {
    finish();
  }
  AppCompatTextView text_Error=(AppCompatTextView)findViewById(R.id.storjNode_details_Error);
  AppCompatTextView text_SimpleName=(AppCompatTextView)findViewById(R.id.storjNode_details_SimpleName);
  DetailsLineView text_NodeID=(DetailsLineView)findViewById(R.id.storjNode_details_NodeID);
  DetailsLineView text_Address=(DetailsLineView)findViewById(R.id.storjNode_details_Address);
  DetailsLineView text_LastSeen=(DetailsLineView)findViewById(R.id.storjNode_details_LastSeen);
  DetailsLineView text_UserAgent=(DetailsLineView)findViewById(R.id.storjNode_details_UserAgent);
  DetailsLineView text_Protocol=(DetailsLineView)findViewById(R.id.storjNode_details_Protocol);
  DetailsLineView text_LastTimeout=(DetailsLineView)findViewById(R.id.storjNode_details_LastTimeout);
  DetailsLineView text_TimeoutRate=(DetailsLineView)findViewById(R.id.storjNode_details_TimeoutRate);
  AppCompatTextView text_Status=(AppCompatTextView)findViewById(R.id.storjNode_details_Status);
  DetailsLineView text_LastContractSent=(DetailsLineView)findViewById(R.id.storjNode_details_LastContractSent);
  DetailsLineView text_SpaceAvailable=(DetailsLineView)findViewById(R.id.storjNode_details_SpaceAvailable);
  DetailsLineView text_onlineSince=(DetailsLineView)findViewById(R.id.storjNode_details_OnlineSince);
  DetailsLineView text_LastContractSentUpdated=(DetailsLineView)findViewById(R.id.storjNode_details_LastContractSentUpdated);
  AppCompatButton btn_ResponseTime=(AppCompatButton)findViewById(R.id.btn_responseTime);
  AppCompatButton btn_Reputation=(AppCompatButton)findViewById(R.id.btn_reputation);
  ValueLineChart mCubicValueLineChart=(ValueLineChart)findViewById(R.id.cubiclinechart);
  ValueLineSeries series=getSeriesFromDB(NodeReaderContract.NodeResponseTimeEntry.TABLE_NAME,mSelectedNode.getNodeID().getValue());
  if (series != null && series.getSeries().size() > 2) {
    mCubicValueLineChart.addSeries(series);
    mCubicValueLineChart.startAnimation();
  }
  text_SimpleName.setText(getString(R.string.details_SimpleName,mSelectedNode.getSimpleName().getValue()));
  if (mSelectedNode.getAddress().isSet()) {
    SimpleDateFormat simpleDate=new SimpleDateFormat(""String_Node_Str"");
    int gmtOffset=TimeZone.getDefault().getRawOffset();
    text_NodeID.setTitle(getString(R.string.details_NodeID));
    text_NodeID.setValue(mSelectedNode.getNodeID().getValue());
    text_NodeID.setStatus(DetailsLineView.Status.NoStatus);
    text_Address.setTitle(getString(R.string.details_Address));
    if (mSelectedNode.getAddress().isSet() && mSelectedNode.getPort().isSet()) {
      String address=mSelectedNode.getAddress().getValue() + ""String_Node_Str"" + Integer.toString(mSelectedNode.getPort().getValue());
      text_Address.setValue(address);
      text_Address.setStatus(DetailsLineView.Status.NoStatus);
    }
 else {
      text_Address.setValue(getString(R.string.unknown));
      text_Address.setStatus(DetailsLineView.Status.NOK);
    }
    text_UserAgent.setTitle(getString(R.string.details_UserAgent));
    if (mSelectedNode.isOutdated()) {
      text_UserAgent.setValue(getString(R.string.userAgent_outdated,mSelectedNode.getUserAgent().getValue().toString()));
      text_UserAgent.setStatus(DetailsLineView.Status.NOK);
    }
 else {
      if (mSelectedNode.getUserAgent().isSet()) {
        text_UserAgent.setValue(mSelectedNode.getUserAgent().getValue().toString());
        text_UserAgent.setStatus(DetailsLineView.Status.OK);
      }
 else {
        text_UserAgent.setValue(getString(R.string.unknown));
        text_UserAgent.setStatus(DetailsLineView.Status.NOK);
      }
    }
    text_LastSeen.setTitle(getString(R.string.details_LastSeen));
    if (mSelectedNode.getLastSeen().isSet()) {
      if (mSelectedNode.getResponseTime().getValue() != mSelectedNode.getResponseTime().getDefault()) {
        text_LastSeen.setValue(simpleDate.format(mSelectedNode.getLastSeen().getValue().getTime() + gmtOffset));
        text_LastSeen.setStatus(DetailsLineView.Status.OK);
      }
 else {
        text_LastSeen.setValue(simpleDate.format(mSelectedNode.getLastSeen().getValue().getTime() + gmtOffset));
        text_LastSeen.setStatus(DetailsLineView.Status.NOK);
      }
    }
 else {
      text_LastSeen.setValue(getString(R.string.unknown));
      text_LastSeen.setStatus(DetailsLineView.Status.NOK);
    }
    text_UserAgent.setTitle(getString(R.string.details_UserAgent));
    if (mSelectedNode.getUserAgent().isSet()) {
      text_UserAgent.setValue(mSelectedNode.getUserAgent().getValue().toString());
      text_UserAgent.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_UserAgent.setValue(getString(R.string.unknown));
      text_UserAgent.setStatus(DetailsLineView.Status.OK);
    }
    text_Protocol.setTitle(getString(R.string.details_Protocol));
    if (mSelectedNode.getProtocol().isSet()) {
      text_Protocol.setValue(mSelectedNode.getProtocol().getValue().toString());
      text_Protocol.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_Protocol.setValue(getString(R.string.unknown));
      text_Protocol.setStatus(DetailsLineView.Status.OK);
    }
    text_LastTimeout.setTitle(getString(R.string.details_LastTimeout));
    if (mSelectedNode.getLastTimeout().isSet()) {
      text_LastTimeout.setValue(simpleDate.format(mSelectedNode.getLastTimeout().getValue().getTime() + gmtOffset));
      text_LastTimeout.setStatus(DetailsLineView.Status.NoStatus);
    }
 else {
      text_LastTimeout.setValue(getString(R.string.details_No_Timeout));
      text_LastTimeout.setStatus(DetailsLineView.Status.OK);
    }
    text_TimeoutRate.setTitle(getString(R.string.details_TimeoutRate));
    if (mSelectedNode.getTimeoutRate().isSet()) {
      text_TimeoutRate.setValue(String.format(""String_Node_Str"",mSelectedNode.getTimeoutRate().getValue()));
      text_TimeoutRate.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_TimeoutRate.setValue(""String_Node_Str"");
      text_TimeoutRate.setStatus(DetailsLineView.Status.OK);
    }
    text_LastContractSent.setTitle(getString(R.string.details_LastContractSent));
    if (mSelectedNode.getLastContractSent().isSet()) {
      text_LastContractSent.setValue(Long.toString(mSelectedNode.getLastContractSent().getValue()));
      text_LastContractSent.setStatus(DetailsLineView.Status.NoStatus);
    }
 else {
      text_LastContractSent.setValue(getString(R.string.unknown));
      text_LastContractSent.setStatus(DetailsLineView.Status.NOK);
    }
    text_SpaceAvailable.setTitle(getString(R.string.details_SpaceAvailable));
    if (mSelectedNode.isSpaceAvailable().isSet()) {
      text_SpaceAvailable.setValue(Boolean.toString(mSelectedNode.isSpaceAvailable().getValue()));
      text_SpaceAvailable.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_SpaceAvailable.setValue(getString(R.string.unknown));
      text_SpaceAvailable.setStatus(DetailsLineView.Status.NOK);
    }
    text_onlineSince.setTitle(getString(R.string.details_OnlineSince));
    if (mSelectedNode.getOnlineSince() != null && mSelectedNode.getResponseTime().getValue() != -1) {
      String onlineSinceString=TimestampConverter.getFormatedTimediff(mSelectedNode.getOnlineSince(),Calendar.getInstance().getTime());
      text_onlineSince.setValue(onlineSinceString);
      text_onlineSince.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_onlineSince.setValue(getString(R.string.details_OnlineSince_offline));
      text_onlineSince.setStatus(DetailsLineView.Status.NOK);
    }
    text_LastContractSentUpdated.setTitle(getString(R.string.details_LastContractSentUpdated));
    if (mSelectedNode.getLastContractSentUpdated() != null && mSelectedNode.getLastContractSent().isSet()) {
      String lastUpdatedString=TimestampConverter.getFormatedTimediff(mSelectedNode.getLastContractSentUpdated(),Calendar.getInstance().getTime());
      text_LastContractSentUpdated.setValue(lastUpdatedString + ""String_Node_Str"");
      text_LastContractSentUpdated.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_LastContractSentUpdated.setVisibility(View.GONE);
    }
    text_Error.setVisibility(View.GONE);
  }
 else {
    text_Error.setText(getString(R.string.details_Error,mSelectedNode.getNodeID().getValue()));
    text_NodeID.setVisibility(View.GONE);
    text_Address.setVisibility(View.GONE);
    text_UserAgent.setVisibility(View.GONE);
    text_LastSeen.setVisibility(View.GONE);
    text_Protocol.setVisibility(View.GONE);
    text_LastTimeout.setVisibility(View.GONE);
    text_TimeoutRate.setVisibility(View.GONE);
    text_LastContractSent.setVisibility(View.GONE);
    text_onlineSince.setVisibility(View.GONE);
    text_LastContractSentUpdated.setVisibility(View.GONE);
  }
  if (mSelectedNode.getResponseTime().getValue() == mSelectedNode.getResponseTime().getDefault()) {
    text_Status.setText(getString(R.string.details_offline));
    text_Status.setTextColor(getResources().getColor(R.color.red));
  }
 else {
    text_Status.setText(getString(R.string.details_online));
    text_Status.setTextColor(getResources().getColor(R.color.storj_color_green));
  }
  btn_ResponseTime.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ValueLineChart mCubicValueLineChart=(ValueLineChart)findViewById(R.id.cubiclinechart);
      AppCompatButton btn_ResponseTime=(AppCompatButton)findViewById(R.id.btn_responseTime);
      AppCompatButton btn_Reputation=(AppCompatButton)findViewById(R.id.btn_reputation);
      mCubicValueLineChart.clearChart();
      ValueLineSeries valueLineSeries=getSeriesFromDB(NodeReaderContract.NodeResponseTimeEntry.TABLE_NAME,mSelectedNode.getNodeID().getValue());
      if (valueLineSeries != null && valueLineSeries.getSeries().size() > 2) {
        mCubicValueLineChart.addSeries(valueLineSeries);
        mCubicValueLineChart.startAnimation();
      }
      btn_ResponseTime.setTextColor(getResources().getColor(R.color.storj_color_blue));
      btn_Reputation.setTextColor(getResources().getColor(R.color.grey));
    }
  }
);
  btn_Reputation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ValueLineChart mCubicValueLineChart=(ValueLineChart)findViewById(R.id.cubiclinechart);
      AppCompatButton btn_ResponseTime=(AppCompatButton)findViewById(R.id.btn_responseTime);
      AppCompatButton btn_Reputation=(AppCompatButton)findViewById(R.id.btn_reputation);
      mCubicValueLineChart.clearChart();
      ValueLineSeries valueLineSeries=getSeriesFromDB(NodeReaderContract.NodeReputationEntry.TABLE_NAME,mSelectedNode.getNodeID().getValue());
      if (valueLineSeries != null && valueLineSeries.getSeries().size() > 2) {
        mCubicValueLineChart.addSeries(valueLineSeries);
        mCubicValueLineChart.startAnimation();
      }
      btn_Reputation.setTextColor(getResources().getColor(R.color.storj_color_green));
      btn_ResponseTime.setTextColor(getResources().getColor(R.color.dark_grey));
    }
  }
);
  btn_ResponseTime.setTextColor(getResources().getColor(R.color.storj_color_blue));
  btn_Reputation.setTextColor(getResources().getColor(R.color.grey));
}"
40376,"@Override protected StorjNode doInBackground(List<StorjNode>... lists){
  StorjNode node=null;
  ListViewHolder holder=ListViewHolder.getInstance();
  int nodePostion=0;
  if (hasActiveInternetConnection()) {
    for (    StorjNode storjNode : lists[0]) {
      try {
        holder.showLoadingBar(nodePostion,true);
        JSONObject storjApiReponse=getJSONObjectFromURL(STORJ_API_URL + ""String_Node_Str"" + storjNode.getNodeID().getValue());
        Log.d(TAG,""String_Node_Str"" + storjApiReponse.toString());
        DatabaseManager db=DatabaseManager.getInstance(mContext);
        node=new StorjNode(storjApiReponse);
        node.setLastChecked(Calendar.getInstance().getTime());
        JSONObject releaseInfoJson=getJSONObjectFromURL(""String_Node_Str"");
        Version newestGithubVersion=null;
        if (releaseInfoJson == null) {
          Version savedStorjCoreVersion=getSavedActualStorjCoreVersion();
          if (savedStorjCoreVersion != null) {
            newestGithubVersion=getSavedActualStorjCoreVersion();
          }
        }
 else {
          newestGithubVersion=new Version(releaseInfoJson.getString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
        }
        if (newestGithubVersion != null && node.getUserAgent().isSet()) {
          node.setIsOutdated(!node.getUserAgent().getValue().isEqualTo(newestGithubVersion));
        }
 else {
          node.setIsOutdated(false);
        }
        if (getSavedActualStorjCoreVersion() == null && newestGithubVersion != null) {
          saveNewUserAgentVersion(newestGithubVersion);
        }
 else         if (newestGithubVersion != null && getSavedActualStorjCoreVersion().isLowerThan(newestGithubVersion)) {
          saveNewUserAgentVersion(newestGithubVersion);
          sendNewUserAgentVersionNotification();
        }
        Cursor cursor=db.getNode(node.getNodeID().getValue());
        if (cursor.getCount() > 0) {
          StorjNode previusNode=new StorjNode(cursor);
          node.setSimpleName(previusNode.getSimpleName().getValue());
          if (previusNode.getResponseTime().getValue() != previusNode.getResponseTime().getDefault())           node.setOnlineSince(previusNode.getOnlineSince());
          if (node.getLastContractSent().getValue() != previusNode.getLastContractSent().getValue()) {
            node.setLastContractSentUpdated(Calendar.getInstance().getTime());
          }
 else {
            node.setLastContractSentUpdated(previusNode.getLastContractSentUpdated());
          }
          if (isNodeOffline(node)) {
            node.setResponseTime(node.getResponseTime().getDefault());
            node.setShouldSendNotification(false);
            if (previusNode.getShouldSendNotification())             sendNodeOfflineNotification(node);
          }
 else {
            db.insertNodeResponseTimeEntry(node);
            db.insertNodeReputationEntry(node);
            if (previusNode.getResponseTime().getValue() == previusNode.getResponseTime().getDefault()) {
              node.setShouldSendNotification(true);
            }
          }
          db.updateNode(node);
          publishProgress(node.getNodeID().getValue());
        }
        holder.showLoadingBar(nodePostion,false);
      }
 catch (      IOException e) {
        e.printStackTrace();
        holder.showLoadingBar(nodePostion,false);
        Log.i(TAG,""String_Node_Str"" + storjNode.getNodeID().getValue() + ""String_Node_Str"");
      }
catch (      JSONException e) {
        holder.showLoadingBar(nodePostion,false);
        e.printStackTrace();
      }
      nodePostion++;
    }
  }
  return node;
}","@Override protected StorjNode doInBackground(List<StorjNode>... lists){
  StorjNode node=null;
  ListViewHolder holder=ListViewHolder.getInstance();
  if (hasActiveInternetConnection()) {
    for (    StorjNode storjNode : lists[0]) {
      try {
        holder.showLoadingBar(storjNode.getNodeID().getValue(),true);
        JSONObject storjApiReponse=getJSONObjectFromURL(STORJ_API_URL + ""String_Node_Str"" + storjNode.getNodeID().getValue());
        Log.d(TAG,""String_Node_Str"" + storjApiReponse.toString());
        DatabaseManager db=DatabaseManager.getInstance(mContext);
        node=new StorjNode(storjApiReponse);
        node.setLastChecked(Calendar.getInstance().getTime());
        JSONObject releaseInfoJson=getJSONObjectFromURL(""String_Node_Str"");
        Version newestGithubVersion=null;
        if (releaseInfoJson == null) {
          Version savedStorjCoreVersion=getSavedActualStorjCoreVersion();
          if (savedStorjCoreVersion != null) {
            newestGithubVersion=getSavedActualStorjCoreVersion();
          }
        }
 else {
          newestGithubVersion=new Version(releaseInfoJson.getString(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
        }
        if (newestGithubVersion != null && node.getUserAgent().isSet()) {
          node.setIsOutdated(!node.getUserAgent().getValue().isEqualTo(newestGithubVersion));
        }
 else {
          node.setIsOutdated(false);
        }
        if (getSavedActualStorjCoreVersion() == null && newestGithubVersion != null) {
          saveNewUserAgentVersion(newestGithubVersion);
        }
 else         if (newestGithubVersion != null && getSavedActualStorjCoreVersion().isLowerThan(newestGithubVersion)) {
          saveNewUserAgentVersion(newestGithubVersion);
          sendNewUserAgentVersionNotification();
        }
        Cursor cursor=db.getNode(node.getNodeID().getValue());
        if (cursor.getCount() > 0) {
          StorjNode previusNode=new StorjNode(cursor);
          node.setSimpleName(previusNode.getSimpleName().getValue());
          if (previusNode.getResponseTime().getValue() != previusNode.getResponseTime().getDefault())           node.setOnlineSince(previusNode.getOnlineSince());
          if (node.getLastContractSent().getValue() != previusNode.getLastContractSent().getValue()) {
            node.setLastContractSentUpdated(Calendar.getInstance().getTime());
          }
 else {
            node.setLastContractSentUpdated(previusNode.getLastContractSentUpdated());
          }
          if (isNodeOffline(node)) {
            node.setResponseTime(node.getResponseTime().getDefault());
            node.setShouldSendNotification(false);
            if (previusNode.getShouldSendNotification())             sendNodeOfflineNotification(node);
          }
 else {
            db.insertNodeResponseTimeEntry(node);
            db.insertNodeReputationEntry(node);
            if (previusNode.getResponseTime().getValue() == previusNode.getResponseTime().getDefault()) {
              node.setShouldSendNotification(true);
            }
          }
          db.updateNode(node);
          publishProgress(node.getNodeID().getValue());
        }
        holder.showLoadingBar(storjNode.getNodeID().getValue(),false);
      }
 catch (      IOException e) {
        e.printStackTrace();
        holder.showLoadingBar(storjNode.getNodeID().getValue(),false);
        Log.i(TAG,""String_Node_Str"" + storjNode.getNodeID().getValue() + ""String_Node_Str"");
      }
catch (      JSONException e) {
        holder.showLoadingBar(storjNode.getNodeID().getValue(),false);
        e.printStackTrace();
      }
    }
  }
  return node;
}"
40377,"public void showLoadingBar(int position,final boolean visible){
  final View parentView=mListView.getChildAt(position);
  if (parentView != null) {
    runOnUiThread(new Runnable(){
      @Override public void run(){
        if (visible) {
          parentView.findViewById(R.id.progressBar).setVisibility(View.VISIBLE);
          parentView.findViewById(R.id.responseTimeView).setVisibility(View.GONE);
        }
 else {
          parentView.findViewById(R.id.progressBar).setVisibility(View.GONE);
          parentView.findViewById(R.id.responseTimeView).setVisibility(View.VISIBLE);
        }
      }
    }
);
  }
}","public void showLoadingBar(final String nodeID,final boolean visible){
  final View nodeView=getNodeView(nodeID);
  if (nodeView != null) {
    runOnUiThread(new Runnable(){
      @Override public void run(){
        if (visible) {
          mCurrentLoadingNode=nodeID;
          nodeView.findViewById(R.id.progressBar).setVisibility(View.VISIBLE);
          nodeView.findViewById(R.id.responseTimeView).setVisibility(View.GONE);
        }
 else {
          mCurrentLoadingNode=null;
          nodeView.findViewById(R.id.progressBar).setVisibility(View.GONE);
          nodeView.findViewById(R.id.responseTimeView).setVisibility(View.VISIBLE);
        }
      }
    }
);
  }
}"
40378,"@Override public void run(){
  if (visible) {
    parentView.findViewById(R.id.progressBar).setVisibility(View.VISIBLE);
    parentView.findViewById(R.id.responseTimeView).setVisibility(View.GONE);
  }
 else {
    parentView.findViewById(R.id.progressBar).setVisibility(View.GONE);
    parentView.findViewById(R.id.responseTimeView).setVisibility(View.VISIBLE);
  }
}","@Override public void run(){
  if (visible) {
    mCurrentLoadingNode=nodeID;
    nodeView.findViewById(R.id.progressBar).setVisibility(View.VISIBLE);
    nodeView.findViewById(R.id.responseTimeView).setVisibility(View.GONE);
  }
 else {
    mCurrentLoadingNode=null;
    nodeView.findViewById(R.id.progressBar).setVisibility(View.GONE);
    nodeView.findViewById(R.id.responseTimeView).setVisibility(View.VISIBLE);
  }
}"
40379,"private void switchSortOrder(){
  String newSortOrder=""String_Node_Str"";
  SharedPreferences.Editor prefsEditor=mContext.getSharedPreferences(Parameters.SHARED_PREF,MODE_PRIVATE).edit();
  if (getSavedSortOrder().equals(Parameters.SHARED_PREF_SORT_ORDER_RESPONSE_ASC)) {
    newSortOrder=Parameters.SHARED_PREF_SORT_ORDER_NAME_ASC;
  }
 else {
    newSortOrder=Parameters.SHARED_PREF_SORT_ORDER_RESPONSE_ASC;
  }
  prefsEditor.putString(Parameters.SHARED_PREF_SORT_ORDER,newSortOrder);
  prefsEditor.commit();
  redrawList();
}","private void switchSortOrder(){
  ListViewHolder holder=ListViewHolder.getInstance();
  String currentLoadingNode=holder.getCurrentLoadingNode();
  if (currentLoadingNode != null) {
    holder.showLoadingBar(currentLoadingNode,false);
  }
  String newSortOrder=""String_Node_Str"";
  SharedPreferences.Editor prefsEditor=mContext.getSharedPreferences(Parameters.SHARED_PREF,MODE_PRIVATE).edit();
  if (getSavedSortOrder().equals(Parameters.SHARED_PREF_SORT_ORDER_RESPONSE_ASC)) {
    newSortOrder=Parameters.SHARED_PREF_SORT_ORDER_NAME_ASC;
  }
 else {
    newSortOrder=Parameters.SHARED_PREF_SORT_ORDER_RESPONSE_ASC;
  }
  prefsEditor.putString(Parameters.SHARED_PREF_SORT_ORDER,newSortOrder);
  prefsEditor.commit();
  redrawList();
  if (currentLoadingNode != null) {
    holder.showLoadingBar(currentLoadingNode,true);
  }
}"
40380,"public void showLoadingBar(int position,final boolean visible){
  final View parentView=mListView.getChildAt(position);
  runOnUiThread(new Runnable(){
    @Override public void run(){
      if (visible) {
        parentView.findViewById(R.id.progressBar).setVisibility(View.VISIBLE);
        parentView.findViewById(R.id.responseTimeView).setVisibility(View.GONE);
      }
 else {
        parentView.findViewById(R.id.progressBar).setVisibility(View.GONE);
        parentView.findViewById(R.id.responseTimeView).setVisibility(View.VISIBLE);
      }
    }
  }
);
}","public void showLoadingBar(int position,final boolean visible){
  final View parentView=mListView.getChildAt(position);
  if (parentView != null) {
    runOnUiThread(new Runnable(){
      @Override public void run(){
        if (visible) {
          parentView.findViewById(R.id.progressBar).setVisibility(View.VISIBLE);
          parentView.findViewById(R.id.responseTimeView).setVisibility(View.GONE);
        }
 else {
          parentView.findViewById(R.id.progressBar).setVisibility(View.GONE);
          parentView.findViewById(R.id.responseTimeView).setVisibility(View.VISIBLE);
        }
      }
    }
);
  }
}"
40381,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_storj_node_detail);
  Toolbar toolbar=(Toolbar)findViewById(R.id.my_toolbar);
  setSupportActionBar(toolbar);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  mContext=getApplicationContext();
  if (!getIntent().hasExtra(EXTRA_NODEID))   finish();
  DatabaseManager db=DatabaseManager.getInstance(mContext);
  Cursor selectedNode=db.getNode(getIntent().getStringExtra(EXTRA_NODEID));
  if (selectedNode.getColumnIndex(NodeReaderContract.NodeEntry.NODE_ID) == -1)   finish();
  try {
    mSelectedNode=new StorjNode(selectedNode);
  }
 catch (  CursorIndexOutOfBoundsException e) {
    e.printStackTrace();
    finish();
  }
  if (mSelectedNode.getNodeID().getValue() == null) {
    finish();
  }
  AppCompatTextView text_Error=(AppCompatTextView)findViewById(R.id.storjNode_details_Error);
  AppCompatTextView text_SimpleName=(AppCompatTextView)findViewById(R.id.storjNode_details_SimpleName);
  DetailsLineView text_NodeID=(DetailsLineView)findViewById(R.id.storjNode_details_NodeID);
  DetailsLineView text_Address=(DetailsLineView)findViewById(R.id.storjNode_details_Address);
  DetailsLineView text_LastSeen=(DetailsLineView)findViewById(R.id.storjNode_details_LastSeen);
  DetailsLineView text_UserAgent=(DetailsLineView)findViewById(R.id.storjNode_details_UserAgent);
  DetailsLineView text_Protocol=(DetailsLineView)findViewById(R.id.storjNode_details_Protocol);
  DetailsLineView text_LastTimeout=(DetailsLineView)findViewById(R.id.storjNode_details_LastTimeout);
  DetailsLineView text_TimeoutRate=(DetailsLineView)findViewById(R.id.storjNode_details_TimeoutRate);
  AppCompatTextView text_Status=(AppCompatTextView)findViewById(R.id.storjNode_details_Status);
  DetailsLineView text_LastContractSent=(DetailsLineView)findViewById(R.id.storjNode_details_LastContractSent);
  DetailsLineView text_SpaceAvailable=(DetailsLineView)findViewById(R.id.storjNode_details_SpaceAvailable);
  DetailsLineView text_onlineSince=(DetailsLineView)findViewById(R.id.storjNode_details_OnlineSince);
  DetailsLineView text_LastContractSentUpdated=(DetailsLineView)findViewById(R.id.storjNode_details_LastContractSentUpdated);
  AppCompatButton btn_ResponseTime=(AppCompatButton)findViewById(R.id.btn_responseTime);
  AppCompatButton btn_Reputation=(AppCompatButton)findViewById(R.id.btn_reputation);
  ValueLineChart mCubicValueLineChart=(ValueLineChart)findViewById(R.id.cubiclinechart);
  ValueLineSeries series=getSeriesFromDB(NodeReaderContract.NodeResponseTimeEntry.TABLE_NAME,mSelectedNode.getNodeID().getValue());
  if (series != null && series.getSeries().size() > 2) {
    mCubicValueLineChart.addSeries(series);
    mCubicValueLineChart.startAnimation();
  }
  text_SimpleName.setText(getString(R.string.details_SimpleName,mSelectedNode.getSimpleName().getValue()));
  if (mSelectedNode.getAddress().isSet()) {
    SimpleDateFormat simpleDate=new SimpleDateFormat(""String_Node_Str"");
    int gmtOffset=TimeZone.getDefault().getRawOffset();
    text_NodeID.setTitle(getString(R.string.details_NodeID));
    text_NodeID.setValue(mSelectedNode.getNodeID().getValue());
    text_NodeID.setStatus(DetailsLineView.Status.NoStatus);
    text_Address.setTitle(getString(R.string.details_Address));
    if (mSelectedNode.getAddress().isSet() && mSelectedNode.getPort().isSet()) {
      String address=mSelectedNode.getAddress().getValue() + ""String_Node_Str"" + Integer.toString(mSelectedNode.getPort().getValue());
      text_Address.setValue(address);
      text_Address.setStatus(DetailsLineView.Status.NoStatus);
    }
 else {
      text_Address.setValue(getString(R.string.unknown));
      text_Address.setStatus(DetailsLineView.Status.NOK);
    }
    text_UserAgent.setTitle(getString(R.string.details_UserAgent));
    if (mSelectedNode.isOutdated()) {
      text_UserAgent.setValue(getString(R.string.userAgent_outdated,mSelectedNode.getUserAgent().getValue().toString()));
      text_UserAgent.setStatus(DetailsLineView.Status.NOK);
    }
 else {
      if (mSelectedNode.getUserAgent().isSet()) {
        text_UserAgent.setValue(mSelectedNode.getUserAgent().getValue().toString());
        text_UserAgent.setStatus(DetailsLineView.Status.OK);
      }
 else {
        text_UserAgent.setValue(getString(R.string.unknown));
        text_UserAgent.setStatus(DetailsLineView.Status.NOK);
      }
    }
    text_LastSeen.setTitle(getString(R.string.details_LastSeen));
    if (mSelectedNode.getLastSeen().isSet()) {
      if (mSelectedNode.getResponseTime().getValue() != mSelectedNode.getResponseTime().getDefault()) {
        text_LastSeen.setValue(simpleDate.format(mSelectedNode.getLastSeen().getValue().getTime() + gmtOffset));
        text_LastSeen.setStatus(DetailsLineView.Status.OK);
      }
 else {
        text_LastSeen.setValue(simpleDate.format(mSelectedNode.getLastSeen().getValue().getTime() + gmtOffset));
        text_LastSeen.setStatus(DetailsLineView.Status.NOK);
      }
    }
 else {
      text_LastSeen.setValue(getString(R.string.unknown));
      text_LastSeen.setStatus(DetailsLineView.Status.NOK);
    }
    text_UserAgent.setTitle(getString(R.string.details_UserAgent));
    if (mSelectedNode.getUserAgent().isSet()) {
      text_UserAgent.setValue(mSelectedNode.getUserAgent().getValue().toString());
      text_UserAgent.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_UserAgent.setValue(getString(R.string.unknown));
      text_UserAgent.setStatus(DetailsLineView.Status.OK);
    }
    text_Protocol.setTitle(getString(R.string.details_Protocol));
    if (mSelectedNode.getProtocol().isSet()) {
      text_Protocol.setValue(mSelectedNode.getProtocol().getValue().toString());
      text_Protocol.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_Protocol.setValue(getString(R.string.unknown));
      text_Protocol.setStatus(DetailsLineView.Status.OK);
    }
    text_LastTimeout.setTitle(getString(R.string.details_LastTimeout));
    if (mSelectedNode.getLastTimeout().isSet()) {
      text_LastTimeout.setValue(simpleDate.format(mSelectedNode.getLastTimeout().getValue().getTime() + gmtOffset));
      text_LastTimeout.setStatus(DetailsLineView.Status.NoStatus);
    }
 else {
      text_LastTimeout.setValue(getString(R.string.details_No_Timeout));
      text_LastTimeout.setStatus(DetailsLineView.Status.NoStatus);
    }
    text_TimeoutRate.setTitle(getString(R.string.details_TimeoutRate));
    if (mSelectedNode.getTimeoutRate().isSet()) {
      text_TimeoutRate.setValue(String.format(""String_Node_Str"",mSelectedNode.getTimeoutRate().getValue()));
      text_TimeoutRate.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_TimeoutRate.setValue(""String_Node_Str"");
      text_TimeoutRate.setStatus(DetailsLineView.Status.OK);
    }
    text_LastContractSent.setTitle(getString(R.string.details_LastContractSent));
    if (mSelectedNode.getLastContractSent().isSet()) {
      text_LastContractSent.setValue(Long.toString(mSelectedNode.getLastContractSent().getValue()));
      text_LastContractSent.setStatus(DetailsLineView.Status.NoStatus);
    }
 else {
      text_LastContractSent.setValue(getString(R.string.unknown));
      text_LastContractSent.setStatus(DetailsLineView.Status.NOK);
    }
    text_SpaceAvailable.setTitle(getString(R.string.details_SpaceAvailable));
    if (mSelectedNode.isSpaceAvailable().isSet()) {
      text_SpaceAvailable.setValue(Boolean.toString(mSelectedNode.isSpaceAvailable().getValue()));
      text_SpaceAvailable.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_SpaceAvailable.setValue(getString(R.string.unknown));
      text_SpaceAvailable.setStatus(DetailsLineView.Status.NOK);
    }
    text_onlineSince.setTitle(getString(R.string.details_OnlineSince));
    if (mSelectedNode.getOnlineSince() != null && mSelectedNode.getResponseTime().getValue() != -1) {
      String onlineSinceString=TimestampConverter.getFormatedTimediff(mSelectedNode.getOnlineSince(),Calendar.getInstance().getTime());
      text_onlineSince.setValue(onlineSinceString);
      text_onlineSince.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_onlineSince.setValue(getString(R.string.details_OnlineSince_offline));
      text_onlineSince.setStatus(DetailsLineView.Status.NOK);
    }
    text_LastContractSentUpdated.setTitle(getString(R.string.details_LastContractSentUpdated) + ""String_Node_Str"");
    if (mSelectedNode.getLastContractSentUpdated() != null) {
      String lastUpdatedString=TimestampConverter.getFormatedTimediff(mSelectedNode.getLastContractSentUpdated(),Calendar.getInstance().getTime());
      text_LastContractSentUpdated.setValue(lastUpdatedString);
      text_LastContractSentUpdated.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_LastContractSentUpdated.setVisibility(View.GONE);
    }
    text_Error.setVisibility(View.GONE);
  }
 else {
    text_Error.setText(getString(R.string.details_Error,mSelectedNode.getNodeID().getValue()));
    text_NodeID.setVisibility(View.GONE);
    text_Address.setVisibility(View.GONE);
    text_UserAgent.setVisibility(View.GONE);
    text_LastSeen.setVisibility(View.GONE);
    text_Protocol.setVisibility(View.GONE);
    text_LastTimeout.setVisibility(View.GONE);
    text_TimeoutRate.setVisibility(View.GONE);
    text_LastContractSent.setVisibility(View.GONE);
    text_onlineSince.setVisibility(View.GONE);
    text_LastContractSentUpdated.setVisibility(View.GONE);
  }
  if (mSelectedNode.getResponseTime().getValue() == mSelectedNode.getResponseTime().getDefault()) {
    text_Status.setText(getString(R.string.details_offline));
    text_Status.setTextColor(getResources().getColor(R.color.red));
  }
 else {
    text_Status.setText(getString(R.string.details_online));
    text_Status.setTextColor(getResources().getColor(R.color.storj_color_green));
  }
  btn_ResponseTime.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ValueLineChart mCubicValueLineChart=(ValueLineChart)findViewById(R.id.cubiclinechart);
      AppCompatButton btn_ResponseTime=(AppCompatButton)findViewById(R.id.btn_responseTime);
      AppCompatButton btn_Reputation=(AppCompatButton)findViewById(R.id.btn_reputation);
      mCubicValueLineChart.clearChart();
      ValueLineSeries valueLineSeries=getSeriesFromDB(NodeReaderContract.NodeResponseTimeEntry.TABLE_NAME,mSelectedNode.getNodeID().getValue());
      if (valueLineSeries != null && valueLineSeries.getSeries().size() > 2) {
        mCubicValueLineChart.addSeries(valueLineSeries);
        mCubicValueLineChart.startAnimation();
      }
      btn_ResponseTime.setTextColor(getResources().getColor(R.color.storj_color_blue));
      btn_Reputation.setTextColor(getResources().getColor(R.color.grey));
    }
  }
);
  btn_Reputation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ValueLineChart mCubicValueLineChart=(ValueLineChart)findViewById(R.id.cubiclinechart);
      AppCompatButton btn_ResponseTime=(AppCompatButton)findViewById(R.id.btn_responseTime);
      AppCompatButton btn_Reputation=(AppCompatButton)findViewById(R.id.btn_reputation);
      mCubicValueLineChart.clearChart();
      ValueLineSeries valueLineSeries=getSeriesFromDB(NodeReaderContract.NodeReputationEntry.TABLE_NAME,mSelectedNode.getNodeID().getValue());
      if (valueLineSeries != null && valueLineSeries.getSeries().size() > 2) {
        mCubicValueLineChart.addSeries(valueLineSeries);
        mCubicValueLineChart.startAnimation();
      }
      btn_Reputation.setTextColor(getResources().getColor(R.color.storj_color_green));
      btn_ResponseTime.setTextColor(getResources().getColor(R.color.dark_grey));
    }
  }
);
  btn_ResponseTime.setTextColor(getResources().getColor(R.color.storj_color_blue));
  btn_Reputation.setTextColor(getResources().getColor(R.color.grey));
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_storj_node_detail);
  Toolbar toolbar=(Toolbar)findViewById(R.id.my_toolbar);
  setSupportActionBar(toolbar);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  mContext=getApplicationContext();
  if (!getIntent().hasExtra(EXTRA_NODEID))   finish();
  DatabaseManager db=DatabaseManager.getInstance(mContext);
  Cursor selectedNode=db.getNode(getIntent().getStringExtra(EXTRA_NODEID));
  if (selectedNode.getColumnIndex(NodeReaderContract.NodeEntry.NODE_ID) == -1)   finish();
  try {
    mSelectedNode=new StorjNode(selectedNode);
  }
 catch (  CursorIndexOutOfBoundsException e) {
    e.printStackTrace();
    finish();
  }
  if (mSelectedNode.getNodeID().getValue() == null) {
    finish();
  }
  AppCompatTextView text_Error=(AppCompatTextView)findViewById(R.id.storjNode_details_Error);
  AppCompatTextView text_SimpleName=(AppCompatTextView)findViewById(R.id.storjNode_details_SimpleName);
  DetailsLineView text_NodeID=(DetailsLineView)findViewById(R.id.storjNode_details_NodeID);
  DetailsLineView text_Address=(DetailsLineView)findViewById(R.id.storjNode_details_Address);
  DetailsLineView text_LastSeen=(DetailsLineView)findViewById(R.id.storjNode_details_LastSeen);
  DetailsLineView text_UserAgent=(DetailsLineView)findViewById(R.id.storjNode_details_UserAgent);
  DetailsLineView text_Protocol=(DetailsLineView)findViewById(R.id.storjNode_details_Protocol);
  DetailsLineView text_LastTimeout=(DetailsLineView)findViewById(R.id.storjNode_details_LastTimeout);
  DetailsLineView text_TimeoutRate=(DetailsLineView)findViewById(R.id.storjNode_details_TimeoutRate);
  AppCompatTextView text_Status=(AppCompatTextView)findViewById(R.id.storjNode_details_Status);
  DetailsLineView text_LastContractSent=(DetailsLineView)findViewById(R.id.storjNode_details_LastContractSent);
  DetailsLineView text_SpaceAvailable=(DetailsLineView)findViewById(R.id.storjNode_details_SpaceAvailable);
  DetailsLineView text_onlineSince=(DetailsLineView)findViewById(R.id.storjNode_details_OnlineSince);
  DetailsLineView text_LastContractSentUpdated=(DetailsLineView)findViewById(R.id.storjNode_details_LastContractSentUpdated);
  AppCompatButton btn_ResponseTime=(AppCompatButton)findViewById(R.id.btn_responseTime);
  AppCompatButton btn_Reputation=(AppCompatButton)findViewById(R.id.btn_reputation);
  ValueLineChart mCubicValueLineChart=(ValueLineChart)findViewById(R.id.cubiclinechart);
  ValueLineSeries series=getSeriesFromDB(NodeReaderContract.NodeResponseTimeEntry.TABLE_NAME,mSelectedNode.getNodeID().getValue());
  if (series != null && series.getSeries().size() > 2) {
    mCubicValueLineChart.addSeries(series);
    mCubicValueLineChart.startAnimation();
  }
  text_SimpleName.setText(getString(R.string.details_SimpleName,mSelectedNode.getSimpleName().getValue()));
  if (mSelectedNode.getAddress().isSet()) {
    SimpleDateFormat simpleDate=new SimpleDateFormat(""String_Node_Str"");
    int gmtOffset=TimeZone.getDefault().getRawOffset();
    text_NodeID.setTitle(getString(R.string.details_NodeID));
    text_NodeID.setValue(mSelectedNode.getNodeID().getValue());
    text_NodeID.setStatus(DetailsLineView.Status.NoStatus);
    text_Address.setTitle(getString(R.string.details_Address));
    if (mSelectedNode.getAddress().isSet() && mSelectedNode.getPort().isSet()) {
      String address=mSelectedNode.getAddress().getValue() + ""String_Node_Str"" + Integer.toString(mSelectedNode.getPort().getValue());
      text_Address.setValue(address);
      text_Address.setStatus(DetailsLineView.Status.NoStatus);
    }
 else {
      text_Address.setValue(getString(R.string.unknown));
      text_Address.setStatus(DetailsLineView.Status.NOK);
    }
    text_UserAgent.setTitle(getString(R.string.details_UserAgent));
    if (mSelectedNode.isOutdated()) {
      text_UserAgent.setValue(getString(R.string.userAgent_outdated,mSelectedNode.getUserAgent().getValue().toString()));
      text_UserAgent.setStatus(DetailsLineView.Status.NOK);
    }
 else {
      if (mSelectedNode.getUserAgent().isSet()) {
        text_UserAgent.setValue(mSelectedNode.getUserAgent().getValue().toString());
        text_UserAgent.setStatus(DetailsLineView.Status.OK);
      }
 else {
        text_UserAgent.setValue(getString(R.string.unknown));
        text_UserAgent.setStatus(DetailsLineView.Status.NOK);
      }
    }
    text_LastSeen.setTitle(getString(R.string.details_LastSeen));
    if (mSelectedNode.getLastSeen().isSet()) {
      if (mSelectedNode.getResponseTime().getValue() != mSelectedNode.getResponseTime().getDefault()) {
        text_LastSeen.setValue(simpleDate.format(mSelectedNode.getLastSeen().getValue().getTime() + gmtOffset));
        text_LastSeen.setStatus(DetailsLineView.Status.OK);
      }
 else {
        text_LastSeen.setValue(simpleDate.format(mSelectedNode.getLastSeen().getValue().getTime() + gmtOffset));
        text_LastSeen.setStatus(DetailsLineView.Status.NOK);
      }
    }
 else {
      text_LastSeen.setValue(getString(R.string.unknown));
      text_LastSeen.setStatus(DetailsLineView.Status.NOK);
    }
    text_UserAgent.setTitle(getString(R.string.details_UserAgent));
    if (mSelectedNode.getUserAgent().isSet()) {
      text_UserAgent.setValue(mSelectedNode.getUserAgent().getValue().toString());
      text_UserAgent.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_UserAgent.setValue(getString(R.string.unknown));
      text_UserAgent.setStatus(DetailsLineView.Status.OK);
    }
    text_Protocol.setTitle(getString(R.string.details_Protocol));
    if (mSelectedNode.getProtocol().isSet()) {
      text_Protocol.setValue(mSelectedNode.getProtocol().getValue().toString());
      text_Protocol.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_Protocol.setValue(getString(R.string.unknown));
      text_Protocol.setStatus(DetailsLineView.Status.OK);
    }
    text_LastTimeout.setTitle(getString(R.string.details_LastTimeout));
    if (mSelectedNode.getLastTimeout().isSet()) {
      text_LastTimeout.setValue(simpleDate.format(mSelectedNode.getLastTimeout().getValue().getTime() + gmtOffset));
      text_LastTimeout.setStatus(DetailsLineView.Status.NoStatus);
    }
 else {
      text_LastTimeout.setValue(getString(R.string.details_No_Timeout));
      text_LastTimeout.setStatus(DetailsLineView.Status.OK);
    }
    text_TimeoutRate.setTitle(getString(R.string.details_TimeoutRate));
    if (mSelectedNode.getTimeoutRate().isSet()) {
      text_TimeoutRate.setValue(String.format(""String_Node_Str"",mSelectedNode.getTimeoutRate().getValue()));
      text_TimeoutRate.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_TimeoutRate.setValue(""String_Node_Str"");
      text_TimeoutRate.setStatus(DetailsLineView.Status.OK);
    }
    text_LastContractSent.setTitle(getString(R.string.details_LastContractSent));
    if (mSelectedNode.getLastContractSent().isSet()) {
      text_LastContractSent.setValue(Long.toString(mSelectedNode.getLastContractSent().getValue()));
      text_LastContractSent.setStatus(DetailsLineView.Status.NoStatus);
    }
 else {
      text_LastContractSent.setValue(getString(R.string.unknown));
      text_LastContractSent.setStatus(DetailsLineView.Status.NOK);
    }
    text_SpaceAvailable.setTitle(getString(R.string.details_SpaceAvailable));
    if (mSelectedNode.isSpaceAvailable().isSet()) {
      text_SpaceAvailable.setValue(Boolean.toString(mSelectedNode.isSpaceAvailable().getValue()));
      text_SpaceAvailable.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_SpaceAvailable.setValue(getString(R.string.unknown));
      text_SpaceAvailable.setStatus(DetailsLineView.Status.NOK);
    }
    text_onlineSince.setTitle(getString(R.string.details_OnlineSince));
    if (mSelectedNode.getOnlineSince() != null && mSelectedNode.getResponseTime().getValue() != -1) {
      String onlineSinceString=TimestampConverter.getFormatedTimediff(mSelectedNode.getOnlineSince(),Calendar.getInstance().getTime());
      text_onlineSince.setValue(onlineSinceString);
      text_onlineSince.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_onlineSince.setValue(getString(R.string.details_OnlineSince_offline));
      text_onlineSince.setStatus(DetailsLineView.Status.NOK);
    }
    text_LastContractSentUpdated.setTitle(getString(R.string.details_LastContractSentUpdated) + ""String_Node_Str"");
    if (mSelectedNode.getLastContractSentUpdated() != null) {
      String lastUpdatedString=TimestampConverter.getFormatedTimediff(mSelectedNode.getLastContractSentUpdated(),Calendar.getInstance().getTime());
      text_LastContractSentUpdated.setValue(lastUpdatedString);
      text_LastContractSentUpdated.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_LastContractSentUpdated.setVisibility(View.GONE);
    }
    text_Error.setVisibility(View.GONE);
  }
 else {
    text_Error.setText(getString(R.string.details_Error,mSelectedNode.getNodeID().getValue()));
    text_NodeID.setVisibility(View.GONE);
    text_Address.setVisibility(View.GONE);
    text_UserAgent.setVisibility(View.GONE);
    text_LastSeen.setVisibility(View.GONE);
    text_Protocol.setVisibility(View.GONE);
    text_LastTimeout.setVisibility(View.GONE);
    text_TimeoutRate.setVisibility(View.GONE);
    text_LastContractSent.setVisibility(View.GONE);
    text_onlineSince.setVisibility(View.GONE);
    text_LastContractSentUpdated.setVisibility(View.GONE);
  }
  if (mSelectedNode.getResponseTime().getValue() == mSelectedNode.getResponseTime().getDefault()) {
    text_Status.setText(getString(R.string.details_offline));
    text_Status.setTextColor(getResources().getColor(R.color.red));
  }
 else {
    text_Status.setText(getString(R.string.details_online));
    text_Status.setTextColor(getResources().getColor(R.color.storj_color_green));
  }
  btn_ResponseTime.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ValueLineChart mCubicValueLineChart=(ValueLineChart)findViewById(R.id.cubiclinechart);
      AppCompatButton btn_ResponseTime=(AppCompatButton)findViewById(R.id.btn_responseTime);
      AppCompatButton btn_Reputation=(AppCompatButton)findViewById(R.id.btn_reputation);
      mCubicValueLineChart.clearChart();
      ValueLineSeries valueLineSeries=getSeriesFromDB(NodeReaderContract.NodeResponseTimeEntry.TABLE_NAME,mSelectedNode.getNodeID().getValue());
      if (valueLineSeries != null && valueLineSeries.getSeries().size() > 2) {
        mCubicValueLineChart.addSeries(valueLineSeries);
        mCubicValueLineChart.startAnimation();
      }
      btn_ResponseTime.setTextColor(getResources().getColor(R.color.storj_color_blue));
      btn_Reputation.setTextColor(getResources().getColor(R.color.grey));
    }
  }
);
  btn_Reputation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ValueLineChart mCubicValueLineChart=(ValueLineChart)findViewById(R.id.cubiclinechart);
      AppCompatButton btn_ResponseTime=(AppCompatButton)findViewById(R.id.btn_responseTime);
      AppCompatButton btn_Reputation=(AppCompatButton)findViewById(R.id.btn_reputation);
      mCubicValueLineChart.clearChart();
      ValueLineSeries valueLineSeries=getSeriesFromDB(NodeReaderContract.NodeReputationEntry.TABLE_NAME,mSelectedNode.getNodeID().getValue());
      if (valueLineSeries != null && valueLineSeries.getSeries().size() > 2) {
        mCubicValueLineChart.addSeries(valueLineSeries);
        mCubicValueLineChart.startAnimation();
      }
      btn_Reputation.setTextColor(getResources().getColor(R.color.storj_color_green));
      btn_ResponseTime.setTextColor(getResources().getColor(R.color.dark_grey));
    }
  }
);
  btn_ResponseTime.setTextColor(getResources().getColor(R.color.storj_color_blue));
  btn_Reputation.setTextColor(getResources().getColor(R.color.grey));
}"
40382,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_storj_node_detail);
  Toolbar toolbar=(Toolbar)findViewById(R.id.my_toolbar);
  setSupportActionBar(toolbar);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  mContext=getApplicationContext();
  if (!getIntent().hasExtra(EXTRA_NODEID))   finish();
  DatabaseManager db=DatabaseManager.getInstance(mContext);
  Cursor selectedNode=db.getNode(getIntent().getStringExtra(EXTRA_NODEID));
  if (selectedNode.getColumnIndex(NodeReaderContract.NodeEntry.NODE_ID) == -1)   finish();
  try {
    mSelectedNode=new StorjNode(selectedNode);
  }
 catch (  CursorIndexOutOfBoundsException e) {
    e.printStackTrace();
    finish();
  }
  if (mSelectedNode.getNodeID().getValue() == null) {
    finish();
  }
  AppCompatTextView text_Error=(AppCompatTextView)findViewById(R.id.storjNode_details_Error);
  AppCompatTextView text_SimpleName=(AppCompatTextView)findViewById(R.id.storjNode_details_SimpleName);
  DetailsLineView text_NodeID=(DetailsLineView)findViewById(R.id.storjNode_details_NodeID);
  DetailsLineView text_Address=(DetailsLineView)findViewById(R.id.storjNode_details_Address);
  DetailsLineView text_LastSeen=(DetailsLineView)findViewById(R.id.storjNode_details_LastSeen);
  DetailsLineView text_UserAgent=(DetailsLineView)findViewById(R.id.storjNode_details_UserAgent);
  DetailsLineView text_Protocol=(DetailsLineView)findViewById(R.id.storjNode_details_Protocol);
  DetailsLineView text_LastTimeout=(DetailsLineView)findViewById(R.id.storjNode_details_LastTimeout);
  DetailsLineView text_TimeoutRate=(DetailsLineView)findViewById(R.id.storjNode_details_TimeoutRate);
  AppCompatTextView text_Status=(AppCompatTextView)findViewById(R.id.storjNode_details_Status);
  DetailsLineView text_LastContractSent=(DetailsLineView)findViewById(R.id.storjNode_details_LastContractSent);
  DetailsLineView text_SpaceAvailable=(DetailsLineView)findViewById(R.id.storjNode_details_SpaceAvailable);
  DetailsLineView text_onlineSince=(DetailsLineView)findViewById(R.id.storjNode_details_OnlineSince);
  DetailsLineView text_LastContractSentUpdated=(DetailsLineView)findViewById(R.id.storjNode_details_LastContractSentUpdated);
  AppCompatButton btn_ResponseTime=(AppCompatButton)findViewById(R.id.btn_responseTime);
  AppCompatButton btn_Reputation=(AppCompatButton)findViewById(R.id.btn_reputation);
  ValueLineChart mCubicValueLineChart=(ValueLineChart)findViewById(R.id.cubiclinechart);
  ValueLineSeries series=getSeriesFromDB(NodeReaderContract.NodeResponseTimeEntry.TABLE_NAME,mSelectedNode.getNodeID().getValue());
  if (series != null && series.getSeries().size() > 2) {
    mCubicValueLineChart.addSeries(series);
    mCubicValueLineChart.startAnimation();
  }
  text_SimpleName.setText(getString(R.string.details_SimpleName,mSelectedNode.getSimpleName().getValue()));
  if (mSelectedNode.getAddress().isSet()) {
    SimpleDateFormat simpleDate=new SimpleDateFormat(""String_Node_Str"");
    int gmtOffset=TimeZone.getDefault().getRawOffset();
    text_NodeID.setTitle(getString(R.string.details_NodeID));
    text_NodeID.setValue(mSelectedNode.getNodeID().getValue());
    text_NodeID.setStatus(DetailsLineView.Status.NoStatus);
    text_Address.setTitle(getString(R.string.details_Address));
    if (mSelectedNode.getAddress().isSet() && mSelectedNode.getPort().isSet()) {
      String address=mSelectedNode.getAddress().getValue() + ""String_Node_Str"" + Integer.toString(mSelectedNode.getPort().getValue());
      text_Address.setValue(address);
      text_Address.setStatus(DetailsLineView.Status.NoStatus);
    }
 else {
      text_Address.setValue(getString(R.string.unknown));
      text_Address.setStatus(DetailsLineView.Status.NOK);
    }
    text_UserAgent.setTitle(getString(R.string.details_UserAgent));
    if (mSelectedNode.isOutdated()) {
      text_UserAgent.setValue(getString(R.string.userAgent_outdated,mSelectedNode.getUserAgent().getValue().toString()));
      text_UserAgent.setStatus(DetailsLineView.Status.NOK);
    }
 else {
      if (mSelectedNode.getUserAgent().isSet()) {
        text_UserAgent.setValue(mSelectedNode.getUserAgent().getValue().toString());
        text_UserAgent.setStatus(DetailsLineView.Status.OK);
      }
 else {
        text_UserAgent.setValue(getString(R.string.unknown));
        text_UserAgent.setStatus(DetailsLineView.Status.NOK);
      }
    }
    text_LastSeen.setTitle(getString(R.string.details_LastSeen));
    if (mSelectedNode.getLastSeen().isSet()) {
      if (mSelectedNode.getResponseTime().getValue() != mSelectedNode.getResponseTime().getDefault()) {
        text_LastSeen.setValue(simpleDate.format(mSelectedNode.getLastSeen().getValue().getTime() + gmtOffset));
        text_LastSeen.setStatus(DetailsLineView.Status.OK);
      }
 else {
        text_LastSeen.setValue(simpleDate.format(mSelectedNode.getLastSeen().getValue().getTime() + gmtOffset));
        text_LastSeen.setStatus(DetailsLineView.Status.NOK);
      }
    }
 else {
      text_LastSeen.setValue(getString(R.string.unknown));
      text_LastSeen.setStatus(DetailsLineView.Status.NOK);
    }
    text_UserAgent.setTitle(getString(R.string.details_UserAgent));
    if (mSelectedNode.getUserAgent().isSet()) {
      text_UserAgent.setValue(mSelectedNode.getUserAgent().getValue().toString());
      text_UserAgent.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_UserAgent.setValue(getString(R.string.unknown));
      text_UserAgent.setStatus(DetailsLineView.Status.OK);
    }
    text_Protocol.setTitle(getString(R.string.details_Protocol));
    if (mSelectedNode.getProtocol().isSet()) {
      text_Protocol.setValue(mSelectedNode.getProtocol().getValue().toString());
      text_Protocol.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_Protocol.setValue(getString(R.string.unknown));
      text_Protocol.setStatus(DetailsLineView.Status.OK);
    }
    text_LastTimeout.setTitle(getString(R.string.details_LastTimeout));
    if (mSelectedNode.getLastTimeout().isSet()) {
      text_LastTimeout.setValue(simpleDate.format(mSelectedNode.getLastTimeout().getValue().getTime() + gmtOffset));
      text_LastTimeout.setStatus(DetailsLineView.Status.NoStatus);
    }
 else {
      text_LastTimeout.setValue(getString(R.string.details_No_Timeout));
      text_LastTimeout.setStatus(DetailsLineView.Status.OK);
    }
    text_TimeoutRate.setTitle(getString(R.string.details_TimeoutRate));
    if (mSelectedNode.getTimeoutRate().isSet()) {
      text_TimeoutRate.setValue(String.format(""String_Node_Str"",mSelectedNode.getTimeoutRate().getValue()));
      text_TimeoutRate.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_TimeoutRate.setValue(""String_Node_Str"");
      text_TimeoutRate.setStatus(DetailsLineView.Status.OK);
    }
    text_LastContractSent.setTitle(getString(R.string.details_LastContractSent));
    if (mSelectedNode.getLastContractSent().isSet()) {
      text_LastContractSent.setValue(Long.toString(mSelectedNode.getLastContractSent().getValue()));
      text_LastContractSent.setStatus(DetailsLineView.Status.NoStatus);
    }
 else {
      text_LastContractSent.setValue(getString(R.string.unknown));
      text_LastContractSent.setStatus(DetailsLineView.Status.NOK);
    }
    text_SpaceAvailable.setTitle(getString(R.string.details_SpaceAvailable));
    if (mSelectedNode.isSpaceAvailable().isSet()) {
      text_SpaceAvailable.setValue(Boolean.toString(mSelectedNode.isSpaceAvailable().getValue()));
      text_SpaceAvailable.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_SpaceAvailable.setValue(getString(R.string.unknown));
      text_SpaceAvailable.setStatus(DetailsLineView.Status.NOK);
    }
    text_onlineSince.setTitle(getString(R.string.details_OnlineSince));
    if (mSelectedNode.getOnlineSince() != null && mSelectedNode.getResponseTime().getValue() != -1) {
      String onlineSinceString=TimestampConverter.getFormatedTimediff(mSelectedNode.getOnlineSince(),Calendar.getInstance().getTime());
      text_onlineSince.setValue(onlineSinceString);
      text_onlineSince.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_onlineSince.setValue(getString(R.string.details_OnlineSince_offline));
      text_onlineSince.setStatus(DetailsLineView.Status.NOK);
    }
    text_LastContractSentUpdated.setTitle(getString(R.string.details_LastContractSentUpdated) + ""String_Node_Str"");
    if (mSelectedNode.getLastContractSentUpdated() != null) {
      String lastUpdatedString=TimestampConverter.getFormatedTimediff(mSelectedNode.getLastContractSentUpdated(),Calendar.getInstance().getTime());
      text_LastContractSentUpdated.setValue(lastUpdatedString);
      text_LastContractSentUpdated.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_LastContractSentUpdated.setVisibility(View.GONE);
    }
    text_Error.setVisibility(View.GONE);
  }
 else {
    text_Error.setText(getString(R.string.details_Error,mSelectedNode.getNodeID().getValue()));
    text_NodeID.setVisibility(View.GONE);
    text_Address.setVisibility(View.GONE);
    text_UserAgent.setVisibility(View.GONE);
    text_LastSeen.setVisibility(View.GONE);
    text_Protocol.setVisibility(View.GONE);
    text_LastTimeout.setVisibility(View.GONE);
    text_TimeoutRate.setVisibility(View.GONE);
    text_LastContractSent.setVisibility(View.GONE);
    text_onlineSince.setVisibility(View.GONE);
    text_LastContractSentUpdated.setVisibility(View.GONE);
  }
  if (mSelectedNode.getResponseTime().getValue() == mSelectedNode.getResponseTime().getDefault()) {
    text_Status.setText(getString(R.string.details_offline));
    text_Status.setTextColor(getResources().getColor(R.color.red));
  }
 else {
    text_Status.setText(getString(R.string.details_online));
    text_Status.setTextColor(getResources().getColor(R.color.storj_color_green));
  }
  btn_ResponseTime.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ValueLineChart mCubicValueLineChart=(ValueLineChart)findViewById(R.id.cubiclinechart);
      AppCompatButton btn_ResponseTime=(AppCompatButton)findViewById(R.id.btn_responseTime);
      AppCompatButton btn_Reputation=(AppCompatButton)findViewById(R.id.btn_reputation);
      mCubicValueLineChart.clearChart();
      ValueLineSeries valueLineSeries=getSeriesFromDB(NodeReaderContract.NodeResponseTimeEntry.TABLE_NAME,mSelectedNode.getNodeID().getValue());
      if (valueLineSeries != null && valueLineSeries.getSeries().size() > 2) {
        mCubicValueLineChart.addSeries(valueLineSeries);
        mCubicValueLineChart.startAnimation();
      }
      btn_ResponseTime.setTextColor(getResources().getColor(R.color.storj_color_blue));
      btn_Reputation.setTextColor(getResources().getColor(R.color.grey));
    }
  }
);
  btn_Reputation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ValueLineChart mCubicValueLineChart=(ValueLineChart)findViewById(R.id.cubiclinechart);
      AppCompatButton btn_ResponseTime=(AppCompatButton)findViewById(R.id.btn_responseTime);
      AppCompatButton btn_Reputation=(AppCompatButton)findViewById(R.id.btn_reputation);
      mCubicValueLineChart.clearChart();
      ValueLineSeries valueLineSeries=getSeriesFromDB(NodeReaderContract.NodeReputationEntry.TABLE_NAME,mSelectedNode.getNodeID().getValue());
      if (valueLineSeries != null && valueLineSeries.getSeries().size() > 2) {
        mCubicValueLineChart.addSeries(valueLineSeries);
        mCubicValueLineChart.startAnimation();
      }
      btn_Reputation.setTextColor(getResources().getColor(R.color.storj_color_green));
      btn_ResponseTime.setTextColor(getResources().getColor(R.color.dark_grey));
    }
  }
);
  btn_ResponseTime.setTextColor(getResources().getColor(R.color.storj_color_blue));
  btn_Reputation.setTextColor(getResources().getColor(R.color.grey));
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_storj_node_detail);
  Toolbar toolbar=(Toolbar)findViewById(R.id.my_toolbar);
  setSupportActionBar(toolbar);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  mContext=getApplicationContext();
  if (!getIntent().hasExtra(EXTRA_NODEID))   finish();
  DatabaseManager db=DatabaseManager.getInstance(mContext);
  Cursor selectedNode=db.getNode(getIntent().getStringExtra(EXTRA_NODEID));
  if (selectedNode.getColumnIndex(NodeReaderContract.NodeEntry.NODE_ID) == -1)   finish();
  try {
    mSelectedNode=new StorjNode(selectedNode);
  }
 catch (  CursorIndexOutOfBoundsException e) {
    e.printStackTrace();
    finish();
  }
  if (mSelectedNode.getNodeID().getValue() == null) {
    finish();
  }
  AppCompatTextView text_Error=(AppCompatTextView)findViewById(R.id.storjNode_details_Error);
  AppCompatTextView text_SimpleName=(AppCompatTextView)findViewById(R.id.storjNode_details_SimpleName);
  DetailsLineView text_NodeID=(DetailsLineView)findViewById(R.id.storjNode_details_NodeID);
  DetailsLineView text_Address=(DetailsLineView)findViewById(R.id.storjNode_details_Address);
  DetailsLineView text_LastSeen=(DetailsLineView)findViewById(R.id.storjNode_details_LastSeen);
  DetailsLineView text_UserAgent=(DetailsLineView)findViewById(R.id.storjNode_details_UserAgent);
  DetailsLineView text_Protocol=(DetailsLineView)findViewById(R.id.storjNode_details_Protocol);
  DetailsLineView text_LastTimeout=(DetailsLineView)findViewById(R.id.storjNode_details_LastTimeout);
  DetailsLineView text_TimeoutRate=(DetailsLineView)findViewById(R.id.storjNode_details_TimeoutRate);
  AppCompatTextView text_Status=(AppCompatTextView)findViewById(R.id.storjNode_details_Status);
  DetailsLineView text_LastContractSent=(DetailsLineView)findViewById(R.id.storjNode_details_LastContractSent);
  DetailsLineView text_SpaceAvailable=(DetailsLineView)findViewById(R.id.storjNode_details_SpaceAvailable);
  DetailsLineView text_onlineSince=(DetailsLineView)findViewById(R.id.storjNode_details_OnlineSince);
  DetailsLineView text_LastContractSentUpdated=(DetailsLineView)findViewById(R.id.storjNode_details_LastContractSentUpdated);
  AppCompatButton btn_ResponseTime=(AppCompatButton)findViewById(R.id.btn_responseTime);
  AppCompatButton btn_Reputation=(AppCompatButton)findViewById(R.id.btn_reputation);
  ValueLineChart mCubicValueLineChart=(ValueLineChart)findViewById(R.id.cubiclinechart);
  ValueLineSeries series=getSeriesFromDB(NodeReaderContract.NodeResponseTimeEntry.TABLE_NAME,mSelectedNode.getNodeID().getValue());
  if (series != null && series.getSeries().size() > 2) {
    mCubicValueLineChart.addSeries(series);
    mCubicValueLineChart.startAnimation();
  }
  text_SimpleName.setText(getString(R.string.details_SimpleName,mSelectedNode.getSimpleName().getValue()));
  if (mSelectedNode.getAddress().isSet()) {
    SimpleDateFormat simpleDate=new SimpleDateFormat(""String_Node_Str"");
    int gmtOffset=TimeZone.getDefault().getRawOffset();
    text_NodeID.setTitle(getString(R.string.details_NodeID));
    text_NodeID.setValue(mSelectedNode.getNodeID().getValue());
    text_NodeID.setStatus(DetailsLineView.Status.NoStatus);
    text_Address.setTitle(getString(R.string.details_Address));
    if (mSelectedNode.getAddress().isSet() && mSelectedNode.getPort().isSet()) {
      String address=mSelectedNode.getAddress().getValue() + ""String_Node_Str"" + Integer.toString(mSelectedNode.getPort().getValue());
      text_Address.setValue(address);
      text_Address.setStatus(DetailsLineView.Status.NoStatus);
    }
 else {
      text_Address.setValue(getString(R.string.unknown));
      text_Address.setStatus(DetailsLineView.Status.NOK);
    }
    text_UserAgent.setTitle(getString(R.string.details_UserAgent));
    if (mSelectedNode.isOutdated()) {
      text_UserAgent.setValue(getString(R.string.userAgent_outdated,mSelectedNode.getUserAgent().getValue().toString()));
      text_UserAgent.setStatus(DetailsLineView.Status.NOK);
    }
 else {
      if (mSelectedNode.getUserAgent().isSet()) {
        text_UserAgent.setValue(mSelectedNode.getUserAgent().getValue().toString());
        text_UserAgent.setStatus(DetailsLineView.Status.OK);
      }
 else {
        text_UserAgent.setValue(getString(R.string.unknown));
        text_UserAgent.setStatus(DetailsLineView.Status.NOK);
      }
    }
    text_LastSeen.setTitle(getString(R.string.details_LastSeen));
    if (mSelectedNode.getLastSeen().isSet()) {
      if (mSelectedNode.getResponseTime().getValue() != mSelectedNode.getResponseTime().getDefault()) {
        text_LastSeen.setValue(simpleDate.format(mSelectedNode.getLastSeen().getValue().getTime() + gmtOffset));
        text_LastSeen.setStatus(DetailsLineView.Status.OK);
      }
 else {
        text_LastSeen.setValue(simpleDate.format(mSelectedNode.getLastSeen().getValue().getTime() + gmtOffset));
        text_LastSeen.setStatus(DetailsLineView.Status.NOK);
      }
    }
 else {
      text_LastSeen.setValue(getString(R.string.unknown));
      text_LastSeen.setStatus(DetailsLineView.Status.NOK);
    }
    text_UserAgent.setTitle(getString(R.string.details_UserAgent));
    if (mSelectedNode.getUserAgent().isSet()) {
      text_UserAgent.setValue(mSelectedNode.getUserAgent().getValue().toString());
      text_UserAgent.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_UserAgent.setValue(getString(R.string.unknown));
      text_UserAgent.setStatus(DetailsLineView.Status.OK);
    }
    text_Protocol.setTitle(getString(R.string.details_Protocol));
    if (mSelectedNode.getProtocol().isSet()) {
      text_Protocol.setValue(mSelectedNode.getProtocol().getValue().toString());
      text_Protocol.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_Protocol.setValue(getString(R.string.unknown));
      text_Protocol.setStatus(DetailsLineView.Status.OK);
    }
    text_LastTimeout.setTitle(getString(R.string.details_LastTimeout));
    if (mSelectedNode.getLastTimeout().isSet()) {
      text_LastTimeout.setValue(simpleDate.format(mSelectedNode.getLastTimeout().getValue().getTime() + gmtOffset));
      text_LastTimeout.setStatus(DetailsLineView.Status.NoStatus);
    }
 else {
      text_LastTimeout.setValue(getString(R.string.details_No_Timeout));
      text_LastTimeout.setStatus(DetailsLineView.Status.OK);
    }
    text_TimeoutRate.setTitle(getString(R.string.details_TimeoutRate));
    if (mSelectedNode.getTimeoutRate().isSet()) {
      text_TimeoutRate.setValue(String.format(""String_Node_Str"",mSelectedNode.getTimeoutRate().getValue()));
      text_TimeoutRate.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_TimeoutRate.setValue(""String_Node_Str"");
      text_TimeoutRate.setStatus(DetailsLineView.Status.OK);
    }
    text_LastContractSent.setTitle(getString(R.string.details_LastContractSent));
    if (mSelectedNode.getLastContractSent().isSet()) {
      text_LastContractSent.setValue(Long.toString(mSelectedNode.getLastContractSent().getValue()));
      text_LastContractSent.setStatus(DetailsLineView.Status.NoStatus);
    }
 else {
      text_LastContractSent.setValue(getString(R.string.unknown));
      text_LastContractSent.setStatus(DetailsLineView.Status.NOK);
    }
    text_SpaceAvailable.setTitle(getString(R.string.details_SpaceAvailable));
    if (mSelectedNode.isSpaceAvailable().isSet()) {
      text_SpaceAvailable.setValue(Boolean.toString(mSelectedNode.isSpaceAvailable().getValue()));
      text_SpaceAvailable.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_SpaceAvailable.setValue(getString(R.string.unknown));
      text_SpaceAvailable.setStatus(DetailsLineView.Status.NOK);
    }
    text_onlineSince.setTitle(getString(R.string.details_OnlineSince));
    if (mSelectedNode.getOnlineSince() != null && mSelectedNode.getResponseTime().getValue() != -1) {
      String onlineSinceString=TimestampConverter.getFormatedTimediff(mSelectedNode.getOnlineSince(),Calendar.getInstance().getTime());
      text_onlineSince.setValue(onlineSinceString);
      text_onlineSince.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_onlineSince.setValue(getString(R.string.details_OnlineSince_offline));
      text_onlineSince.setStatus(DetailsLineView.Status.NOK);
    }
    text_LastContractSentUpdated.setTitle(getString(R.string.details_LastContractSentUpdated));
    if (mSelectedNode.getLastContractSentUpdated() != null) {
      String lastUpdatedString=TimestampConverter.getFormatedTimediff(mSelectedNode.getLastContractSentUpdated(),Calendar.getInstance().getTime());
      text_LastContractSentUpdated.setValue(lastUpdatedString + ""String_Node_Str"");
      text_LastContractSentUpdated.setStatus(DetailsLineView.Status.OK);
    }
 else {
      text_LastContractSentUpdated.setVisibility(View.GONE);
    }
    text_Error.setVisibility(View.GONE);
  }
 else {
    text_Error.setText(getString(R.string.details_Error,mSelectedNode.getNodeID().getValue()));
    text_NodeID.setVisibility(View.GONE);
    text_Address.setVisibility(View.GONE);
    text_UserAgent.setVisibility(View.GONE);
    text_LastSeen.setVisibility(View.GONE);
    text_Protocol.setVisibility(View.GONE);
    text_LastTimeout.setVisibility(View.GONE);
    text_TimeoutRate.setVisibility(View.GONE);
    text_LastContractSent.setVisibility(View.GONE);
    text_onlineSince.setVisibility(View.GONE);
    text_LastContractSentUpdated.setVisibility(View.GONE);
  }
  if (mSelectedNode.getResponseTime().getValue() == mSelectedNode.getResponseTime().getDefault()) {
    text_Status.setText(getString(R.string.details_offline));
    text_Status.setTextColor(getResources().getColor(R.color.red));
  }
 else {
    text_Status.setText(getString(R.string.details_online));
    text_Status.setTextColor(getResources().getColor(R.color.storj_color_green));
  }
  btn_ResponseTime.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ValueLineChart mCubicValueLineChart=(ValueLineChart)findViewById(R.id.cubiclinechart);
      AppCompatButton btn_ResponseTime=(AppCompatButton)findViewById(R.id.btn_responseTime);
      AppCompatButton btn_Reputation=(AppCompatButton)findViewById(R.id.btn_reputation);
      mCubicValueLineChart.clearChart();
      ValueLineSeries valueLineSeries=getSeriesFromDB(NodeReaderContract.NodeResponseTimeEntry.TABLE_NAME,mSelectedNode.getNodeID().getValue());
      if (valueLineSeries != null && valueLineSeries.getSeries().size() > 2) {
        mCubicValueLineChart.addSeries(valueLineSeries);
        mCubicValueLineChart.startAnimation();
      }
      btn_ResponseTime.setTextColor(getResources().getColor(R.color.storj_color_blue));
      btn_Reputation.setTextColor(getResources().getColor(R.color.grey));
    }
  }
);
  btn_Reputation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ValueLineChart mCubicValueLineChart=(ValueLineChart)findViewById(R.id.cubiclinechart);
      AppCompatButton btn_ResponseTime=(AppCompatButton)findViewById(R.id.btn_responseTime);
      AppCompatButton btn_Reputation=(AppCompatButton)findViewById(R.id.btn_reputation);
      mCubicValueLineChart.clearChart();
      ValueLineSeries valueLineSeries=getSeriesFromDB(NodeReaderContract.NodeReputationEntry.TABLE_NAME,mSelectedNode.getNodeID().getValue());
      if (valueLineSeries != null && valueLineSeries.getSeries().size() > 2) {
        mCubicValueLineChart.addSeries(valueLineSeries);
        mCubicValueLineChart.startAnimation();
      }
      btn_Reputation.setTextColor(getResources().getColor(R.color.storj_color_green));
      btn_ResponseTime.setTextColor(getResources().getColor(R.color.dark_grey));
    }
  }
);
  btn_ResponseTime.setTextColor(getResources().getColor(R.color.storj_color_blue));
  btn_Reputation.setTextColor(getResources().getColor(R.color.grey));
}"
40383,"@Override public View getView(final int position,View convertView,final ViewGroup parent){
  View view=convertView;
  if (view == null) {
    LayoutInflater vi=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    view=vi.inflate(R.layout.activity_main_row,null);
  }
  final StorjNode selectedNode=mItems.get(position);
  TextView txtNodeSimpleName=(TextView)view.findViewById(R.id.textView_node_simpleName);
  TextView txtAddress=(TextView)view.findViewById(R.id.textView_address);
  final TextView txtUserAgent=(TextView)view.findViewById(R.id.textView_userAgent);
  ResponseTimeView responseTimeView=(ResponseTimeView)view.findViewById(R.id.responseTimeView);
  TextView txtOnlineSince=(TextView)view.findViewById(R.id.textView_onlineSince);
  txtNodeSimpleName.setText(selectedNode.getSimpleName().getValue());
  view.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      StorjNode selectedNode=mItems.get(position);
      Intent storjNodeDetailIntent=new Intent(mContext,StorjNodeDetailActivity.class);
      storjNodeDetailIntent.putExtra(StorjNodeDetailActivity.EXTRA_NODEID,selectedNode.getNodeID().getValue());
      storjNodeDetailIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      mContext.startActivity(storjNodeDetailIntent);
    }
  }
);
  view.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      StorjNode selectedNode=mItems.get(position);
      showEditNowDialog(selectedNode,position);
      return true;
    }
  }
);
  if (selectedNode.getLastChecked().getValue() == selectedNode.getLastChecked().getDefault() || selectedNode.getResponseTime().getValue() == selectedNode.getResponseTime().getDefault()) {
    responseTimeView.setResponseTime(-1);
    if (selectedNode.getAddress().isSet())     txtAddress.setText(mContext.getString(R.string.address,selectedNode.getAddress().getValue() + ""String_Node_Str"" + selectedNode.getPort().getValue()));
 else     txtAddress.setText(""String_Node_Str"");
    if (selectedNode.getUserAgent().isSet()) {
      if (selectedNode.isOutdated()) {
        txtUserAgent.setText(mContext.getString(R.string.userAgent_outdated,selectedNode.getUserAgent().getValue().toString()));
        txtUserAgent.setTextColor(mContext.getResources().getColor(R.color.textColor));
      }
 else {
        txtUserAgent.setText(mContext.getString(R.string.userAgent,selectedNode.getUserAgent().getValue().toString()));
        txtUserAgent.setTextColor(mContext.getResources().getColor(R.color.textColor));
      }
    }
 else {
      txtUserAgent.setText(""String_Node_Str"");
    }
    if (selectedNode.getUserAgent().isSet() && selectedNode.getAddress().isSet()) {
      txtOnlineSince.setText(mContext.getString(R.string.details_OnlineSince,mContext.getString(R.string.details_OnlineSince_offline)));
    }
 else {
      txtOnlineSince.setText(""String_Node_Str"");
    }
    return view;
  }
  responseTimeView.setResponseTime(selectedNode.getResponseTime().getValue());
  txtAddress.setText(mContext.getString(R.string.address,selectedNode.getAddress().getValue() + ""String_Node_Str"" + selectedNode.getPort().getValue()));
  if (selectedNode.getUserAgent().isSet())   if (selectedNode.isOutdated()) {
    txtUserAgent.setText(mContext.getString(R.string.userAgent_outdated,selectedNode.getUserAgent().getValue().toString()));
    txtUserAgent.setTextColor(mContext.getResources().getColor(R.color.textColor));
  }
 else {
    txtUserAgent.setText(mContext.getString(R.string.userAgent,selectedNode.getUserAgent().getValue().toString()));
    txtUserAgent.setTextColor(mContext.getResources().getColor(R.color.textColor));
  }
  String onlineSinceString=TimestampConverter.getFormatedTimediff(selectedNode.getOnlineSince(),Calendar.getInstance().getTime());
  txtOnlineSince.setText(mContext.getString(R.string.details_OnlineSince,onlineSinceString));
  return view;
}","@Override public View getView(final int position,View convertView,final ViewGroup parent){
  View view=convertView;
  if (view == null) {
    LayoutInflater vi=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    view=vi.inflate(R.layout.activity_main_row,null);
  }
  final StorjNode selectedNode=mItems.get(position);
  TextView txtNodeSimpleName=(TextView)view.findViewById(R.id.textView_node_simpleName);
  TextView txtAddress=(TextView)view.findViewById(R.id.textView_address);
  final TextView txtUserAgent=(TextView)view.findViewById(R.id.textView_userAgent);
  ResponseTimeView responseTimeView=(ResponseTimeView)view.findViewById(R.id.responseTimeView);
  TextView txtOnlineSince=(TextView)view.findViewById(R.id.textView_onlineSince);
  txtNodeSimpleName.setText(selectedNode.getSimpleName().getValue());
  view.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      StorjNode selectedNode=mItems.get(position);
      Intent storjNodeDetailIntent=new Intent(mContext,StorjNodeDetailActivity.class);
      storjNodeDetailIntent.putExtra(StorjNodeDetailActivity.EXTRA_NODEID,selectedNode.getNodeID().getValue());
      storjNodeDetailIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      mContext.startActivity(storjNodeDetailIntent);
    }
  }
);
  view.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      StorjNode selectedNode=mItems.get(position);
      showEditNowDialog(selectedNode,position);
      return true;
    }
  }
);
  if (selectedNode.getResponseTime().getValue() == selectedNode.getResponseTime().getDefault()) {
    responseTimeView.setResponseTime(-1);
    if (selectedNode.getAddress().isSet())     txtAddress.setText(mContext.getString(R.string.address,selectedNode.getAddress().getValue() + ""String_Node_Str"" + selectedNode.getPort().getValue()));
 else     txtAddress.setText(""String_Node_Str"");
    if (selectedNode.getUserAgent().isSet()) {
      if (selectedNode.isOutdated()) {
        txtUserAgent.setText(mContext.getString(R.string.userAgent_outdated,selectedNode.getUserAgent().getValue().toString()));
        txtUserAgent.setTextColor(mContext.getResources().getColor(R.color.textColor));
      }
 else {
        txtUserAgent.setText(mContext.getString(R.string.userAgent,selectedNode.getUserAgent().getValue().toString()));
        txtUserAgent.setTextColor(mContext.getResources().getColor(R.color.textColor));
      }
    }
 else {
      txtUserAgent.setText(""String_Node_Str"");
    }
    if (selectedNode.getUserAgent().isSet() && selectedNode.getAddress().isSet()) {
      txtOnlineSince.setText(mContext.getString(R.string.onlineSince,mContext.getString(R.string.details_OnlineSince_offline)));
    }
 else {
      txtOnlineSince.setText(""String_Node_Str"");
    }
    return view;
  }
  responseTimeView.setResponseTime(selectedNode.getResponseTime().getValue());
  txtAddress.setText(mContext.getString(R.string.address,selectedNode.getAddress().getValue() + ""String_Node_Str"" + selectedNode.getPort().getValue()));
  if (selectedNode.getUserAgent().isSet())   if (selectedNode.isOutdated()) {
    txtUserAgent.setText(mContext.getString(R.string.userAgent_outdated,selectedNode.getUserAgent().getValue().toString()));
    txtUserAgent.setTextColor(mContext.getResources().getColor(R.color.textColor));
  }
 else {
    txtUserAgent.setText(mContext.getString(R.string.userAgent,selectedNode.getUserAgent().getValue().toString()));
    txtUserAgent.setTextColor(mContext.getResources().getColor(R.color.textColor));
  }
  String onlineSinceString=TimestampConverter.getFormatedTimediff(selectedNode.getOnlineSince(),Calendar.getInstance().getTime());
  txtOnlineSince.setText(mContext.getString(R.string.onlineSince,onlineSinceString));
  return view;
}"
40384,"public StorjNode(Cursor cursor){
  mNodeID=cursor.getString(cursor.getColumnIndex(NodeReaderContract.NodeEntry.NODE_ID));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.LAST_SEEN) != -1)   mLastSeen=parseDateString(cursor.getString(cursor.getColumnIndex(NodeReaderContract.NodeEntry.LAST_SEEN)));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.PORT) != -1)   mPort=Integer.parseInt(cursor.getString(cursor.getColumnIndex(NodeReaderContract.NodeEntry.PORT)));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.ADDRESS) != -1)   mAddress=cursor.getString(cursor.getColumnIndex(NodeReaderContract.NodeEntry.ADDRESS));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.USER_AGENT) != -1)   mUserAgent=new Version(cursor.getString(cursor.getColumnIndex(NodeReaderContract.NodeEntry.USER_AGENT)));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.PROTOCOL) != -1)   mProtocol=new Version(cursor.getString(cursor.getColumnIndex(NodeReaderContract.NodeEntry.PROTOCOL)));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.RESPONSE_TIME) != -1)   mResponseTime=Integer.parseInt(cursor.getString(cursor.getColumnIndex(NodeReaderContract.NodeEntry.RESPONSE_TIME)));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.LAST_TIMEOUT) != -1)   mLastTimeout=parseDateString(cursor.getString(cursor.getColumnIndex(NodeReaderContract.NodeEntry.LAST_TIMEOUT)));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.TIMEOUT_RATE) != -1)   mTimeoutRate=Float.parseFloat(cursor.getString(cursor.getColumnIndex(NodeReaderContract.NodeEntry.TIMEOUT_RATE)));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.LAST_CHECKED) != -1)   mLastChecked=parseDateString(cursor.getString(cursor.getColumnIndex(NodeReaderContract.NodeEntry.LAST_CHECKED)));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.FRIENDLY_NAME) != -1)   mSimpleName=cursor.getString(cursor.getColumnIndex(NodeReaderContract.NodeEntry.FRIENDLY_NAME));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.SHOULD_SEND_NOTIFICATION) != -1)   mShouldSendNotification=cursor.getInt(cursor.getColumnIndex(NodeReaderContract.NodeEntry.SHOULD_SEND_NOTIFICATION)) == 1;
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.LAST_CONTRACT_SENT) != -1)   mLastContractSent=cursor.getLong(cursor.getColumnIndex(NodeReaderContract.NodeEntry.LAST_CONTRACT_SENT));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.REPUTATION) != -1)   mReputation=cursor.getInt(cursor.getColumnIndex(NodeReaderContract.NodeEntry.REPUTATION));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.IS_OUTDATED) != -1)   mIsOutdated=cursor.getInt(cursor.getColumnIndex(NodeReaderContract.NodeEntry.IS_OUTDATED)) == 1;
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.SPACE_AVAILABLE) != -1)   mSpaceAvailable=cursor.getInt(cursor.getColumnIndex(NodeReaderContract.NodeEntry.SPACE_AVAILABLE)) == 1;
}","public StorjNode(Cursor cursor){
  mNodeID=cursor.getString(cursor.getColumnIndex(NodeReaderContract.NodeEntry.NODE_ID));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.LAST_SEEN) != -1)   mLastSeen=parseDateString(cursor.getString(cursor.getColumnIndex(NodeReaderContract.NodeEntry.LAST_SEEN)));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.PORT) != -1)   mPort=cursor.getInt(cursor.getColumnIndex(NodeReaderContract.NodeEntry.PORT));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.ADDRESS) != -1)   mAddress=cursor.getString(cursor.getColumnIndex(NodeReaderContract.NodeEntry.ADDRESS));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.USER_AGENT) != -1)   mUserAgent=new Version(cursor.getString(cursor.getColumnIndex(NodeReaderContract.NodeEntry.USER_AGENT)));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.PROTOCOL) != -1)   mProtocol=new Version(cursor.getString(cursor.getColumnIndex(NodeReaderContract.NodeEntry.PROTOCOL)));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.RESPONSE_TIME) != -1)   mResponseTime=cursor.getInt(cursor.getColumnIndex(NodeReaderContract.NodeEntry.RESPONSE_TIME));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.LAST_TIMEOUT) != -1)   mLastTimeout=parseDateString(cursor.getString(cursor.getColumnIndex(NodeReaderContract.NodeEntry.LAST_TIMEOUT)));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.TIMEOUT_RATE) != -1)   mTimeoutRate=cursor.getFloat(cursor.getColumnIndex(NodeReaderContract.NodeEntry.TIMEOUT_RATE));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.LAST_CHECKED) != -1)   mLastChecked=parseDateString(cursor.getString(cursor.getColumnIndex(NodeReaderContract.NodeEntry.LAST_CHECKED)));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.FRIENDLY_NAME) != -1)   mSimpleName=cursor.getString(cursor.getColumnIndex(NodeReaderContract.NodeEntry.FRIENDLY_NAME));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.SHOULD_SEND_NOTIFICATION) != -1)   mShouldSendNotification=cursor.getInt(cursor.getColumnIndex(NodeReaderContract.NodeEntry.SHOULD_SEND_NOTIFICATION)) == 1;
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.LAST_CONTRACT_SENT) != -1)   mLastContractSent=cursor.getLong(cursor.getColumnIndex(NodeReaderContract.NodeEntry.LAST_CONTRACT_SENT));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.REPUTATION) != -1)   mReputation=cursor.getInt(cursor.getColumnIndex(NodeReaderContract.NodeEntry.REPUTATION));
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.IS_OUTDATED) != -1)   mIsOutdated=cursor.getInt(cursor.getColumnIndex(NodeReaderContract.NodeEntry.IS_OUTDATED)) == 1;
  if (cursor.getColumnIndex(NodeReaderContract.NodeEntry.SPACE_AVAILABLE) != -1)   mSpaceAvailable=cursor.getInt(cursor.getColumnIndex(NodeReaderContract.NodeEntry.SPACE_AVAILABLE)) == 1;
}"
40385,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_storj_node_detail);
  Toolbar toolbar=(Toolbar)findViewById(R.id.my_toolbar);
  setSupportActionBar(toolbar);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  mContext=getApplicationContext();
  DatabaseManager db=DatabaseManager.getInstance(mContext);
  mSelectedNode=new StorjNode(db.getNode(getIntent().getStringExtra(EXTRA_NODEID)));
  AppCompatTextView text_SimpleName=(AppCompatTextView)findViewById(R.id.storjNode_details_SimpleName);
  AppCompatTextView text_NodeID=(AppCompatTextView)findViewById(R.id.storjNode_details_NodeID);
  AppCompatTextView text_Address=(AppCompatTextView)findViewById(R.id.storjNode_details_Address);
  AppCompatTextView text_LastSeen=(AppCompatTextView)findViewById(R.id.storjNode_details_LastSeen);
  AppCompatTextView text_UserAgent=(AppCompatTextView)findViewById(R.id.storjNode_details_UserAgent);
  AppCompatTextView text_Protocol=(AppCompatTextView)findViewById(R.id.storjNode_details_Protocol);
  AppCompatTextView text_LastTimeout=(AppCompatTextView)findViewById(R.id.storjNode_details_LastTimeout);
  AppCompatTextView text_TimeoutRate=(AppCompatTextView)findViewById(R.id.storjNode_details_TimeoutRate);
  AppCompatTextView text_Status=(AppCompatTextView)findViewById(R.id.storjNode_details_Status);
  AppCompatTextView text_Error=(AppCompatTextView)findViewById(R.id.storjNode_details_Error);
  AppCompatTextView text_LastContractSent=(AppCompatTextView)findViewById(R.id.storjNode_details_LastContractSent);
  AppCompatTextView text_SpaceAvailable=(AppCompatTextView)findViewById(R.id.storjNode_details_SpaceAvailable);
  AppCompatButton btn_ResponseTime=(AppCompatButton)findViewById(R.id.btn_responseTime);
  AppCompatButton btn_Reputation=(AppCompatButton)findViewById(R.id.btn_reputation);
  ValueLineChart mCubicValueLineChart=(ValueLineChart)findViewById(R.id.cubiclinechart);
  mCubicValueLineChart.addSeries(getSeriesFromDB(NodeReaderContract.NodeResponseTimeEntry.TABLE_NAME,mSelectedNode.getNodeID().getValue()));
  mCubicValueLineChart.startAnimation();
  text_SimpleName.setText(getString(R.string.details_SimpleName,mSelectedNode.getSimpleName().getValue()));
  if (mSelectedNode.getAddress().isSet()) {
    SimpleDateFormat simpleDate=new SimpleDateFormat(""String_Node_Str"");
    text_NodeID.setText(getString(R.string.details_NodeID,mSelectedNode.getNodeID().getValue()));
    String address=mSelectedNode.getAddress().getValue() + ""String_Node_Str"" + Integer.toString(mSelectedNode.getPort().getValue());
    text_Address.setText(getString(R.string.details_Address,address));
    if (mSelectedNode.isOutdated()) {
      text_UserAgent.setText(getString(R.string.userAgent_outdated,mSelectedNode.getUserAgent().getValue().toString()));
      text_UserAgent.setTextColor(getResources().getColor(R.color.textColor));
    }
 else {
      text_UserAgent.setText(getString(R.string.userAgent,mSelectedNode.getUserAgent().getValue().toString()));
      text_UserAgent.setTextColor(getResources().getColor(R.color.textColor));
    }
    text_LastSeen.setText(getString(R.string.details_LastSeen,simpleDate.format(mSelectedNode.getLastSeen().getValue())));
    text_Protocol.setText(getString(R.string.details_Protocol,mSelectedNode.getProtocol().getValue()));
    if (mSelectedNode.getLastTimeout().isSet())     text_LastTimeout.setText(getString(R.string.details_LastTimeout,getString(R.string.details_No_Timeout)));
 else     text_LastTimeout.setText(getString(R.string.details_LastTimeout,simpleDate.format(mSelectedNode.getLastTimeout().getValue())));
    text_TimeoutRate.setText(getString(R.string.details_TimeoutRate,Float.toString(mSelectedNode.getTimeoutRate().getValue())));
    if (mSelectedNode.getLastContractSent().isSet())     text_LastContractSent.setText(getString(R.string.details_LastContractSent,""String_Node_Str""));
 else     text_LastContractSent.setText(getString(R.string.details_LastContractSent,Long.toString(mSelectedNode.getLastContractSent().getValue())));
    text_SpaceAvailable.setText(getString(R.string.details_SpaceAvailable,Boolean.toString(mSelectedNode.isSpaceAvailable().getValue())));
    text_Error.setVisibility(View.GONE);
  }
 else {
    text_Error.setText(getString(R.string.details_Error,mSelectedNode.getNodeID().getValue()));
    text_NodeID.setVisibility(View.GONE);
    text_Address.setVisibility(View.GONE);
    text_UserAgent.setVisibility(View.GONE);
    text_LastSeen.setVisibility(View.GONE);
    text_Protocol.setVisibility(View.GONE);
    text_LastTimeout.setVisibility(View.GONE);
    text_TimeoutRate.setVisibility(View.GONE);
    text_LastContractSent.setVisibility(View.GONE);
  }
  if (mSelectedNode.getResponseTime().getValue() == mSelectedNode.getResponseTime().getDefault()) {
    text_Status.setText(getString(R.string.details_offline));
    text_Status.setTextColor(getResources().getColor(R.color.red));
  }
 else {
    text_Status.setText(getString(R.string.details_online));
    text_Status.setTextColor(getResources().getColor(R.color.storj_color_green));
  }
  btn_ResponseTime.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ValueLineChart mCubicValueLineChart=(ValueLineChart)findViewById(R.id.cubiclinechart);
      AppCompatButton btn_ResponseTime=(AppCompatButton)findViewById(R.id.btn_responseTime);
      AppCompatButton btn_Reputation=(AppCompatButton)findViewById(R.id.btn_reputation);
      mCubicValueLineChart.clearChart();
      mCubicValueLineChart.addSeries(getSeriesFromDB(NodeReaderContract.NodeResponseTimeEntry.TABLE_NAME,mSelectedNode.getNodeID().getValue()));
      mCubicValueLineChart.startAnimation();
      btn_ResponseTime.setTextColor(getResources().getColor(R.color.storj_color_blue));
      btn_Reputation.setTextColor(getResources().getColor(R.color.grey));
    }
  }
);
  btn_Reputation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ValueLineChart mCubicValueLineChart=(ValueLineChart)findViewById(R.id.cubiclinechart);
      AppCompatButton btn_ResponseTime=(AppCompatButton)findViewById(R.id.btn_responseTime);
      AppCompatButton btn_Reputation=(AppCompatButton)findViewById(R.id.btn_reputation);
      mCubicValueLineChart.clearChart();
      mCubicValueLineChart.addSeries(getSeriesFromDB(NodeReaderContract.NodeReputationEntry.TABLE_NAME,mSelectedNode.getNodeID().getValue()));
      mCubicValueLineChart.startAnimation();
      btn_Reputation.setTextColor(getResources().getColor(R.color.storj_color_green));
      btn_ResponseTime.setTextColor(getResources().getColor(R.color.dark_grey));
    }
  }
);
  btn_ResponseTime.setTextColor(getResources().getColor(R.color.storj_color_blue));
  btn_Reputation.setTextColor(getResources().getColor(R.color.grey));
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_storj_node_detail);
  Toolbar toolbar=(Toolbar)findViewById(R.id.my_toolbar);
  setSupportActionBar(toolbar);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  mContext=getApplicationContext();
  DatabaseManager db=DatabaseManager.getInstance(mContext);
  mSelectedNode=new StorjNode(db.getNode(getIntent().getStringExtra(EXTRA_NODEID)));
  AppCompatTextView text_SimpleName=(AppCompatTextView)findViewById(R.id.storjNode_details_SimpleName);
  AppCompatTextView text_NodeID=(AppCompatTextView)findViewById(R.id.storjNode_details_NodeID);
  AppCompatTextView text_Address=(AppCompatTextView)findViewById(R.id.storjNode_details_Address);
  AppCompatTextView text_LastSeen=(AppCompatTextView)findViewById(R.id.storjNode_details_LastSeen);
  AppCompatTextView text_UserAgent=(AppCompatTextView)findViewById(R.id.storjNode_details_UserAgent);
  AppCompatTextView text_Protocol=(AppCompatTextView)findViewById(R.id.storjNode_details_Protocol);
  AppCompatTextView text_LastTimeout=(AppCompatTextView)findViewById(R.id.storjNode_details_LastTimeout);
  AppCompatTextView text_TimeoutRate=(AppCompatTextView)findViewById(R.id.storjNode_details_TimeoutRate);
  AppCompatTextView text_Status=(AppCompatTextView)findViewById(R.id.storjNode_details_Status);
  AppCompatTextView text_Error=(AppCompatTextView)findViewById(R.id.storjNode_details_Error);
  AppCompatTextView text_LastContractSent=(AppCompatTextView)findViewById(R.id.storjNode_details_LastContractSent);
  AppCompatTextView text_SpaceAvailable=(AppCompatTextView)findViewById(R.id.storjNode_details_SpaceAvailable);
  AppCompatButton btn_ResponseTime=(AppCompatButton)findViewById(R.id.btn_responseTime);
  AppCompatButton btn_Reputation=(AppCompatButton)findViewById(R.id.btn_reputation);
  ValueLineChart mCubicValueLineChart=(ValueLineChart)findViewById(R.id.cubiclinechart);
  mCubicValueLineChart.addSeries(getSeriesFromDB(NodeReaderContract.NodeResponseTimeEntry.TABLE_NAME,mSelectedNode.getNodeID().getValue()));
  mCubicValueLineChart.startAnimation();
  text_SimpleName.setText(getString(R.string.details_SimpleName,mSelectedNode.getSimpleName().getValue()));
  if (mSelectedNode.getAddress().isSet()) {
    SimpleDateFormat simpleDate=new SimpleDateFormat(""String_Node_Str"");
    text_NodeID.setText(getString(R.string.details_NodeID,mSelectedNode.getNodeID().getValue()));
    String address=mSelectedNode.getAddress().getValue() + ""String_Node_Str"" + Integer.toString(mSelectedNode.getPort().getValue());
    text_Address.setText(getString(R.string.details_Address,address));
    if (mSelectedNode.isOutdated()) {
      text_UserAgent.setText(getString(R.string.userAgent_outdated,mSelectedNode.getUserAgent().getValue().toString()));
      text_UserAgent.setTextColor(getResources().getColor(R.color.textColor));
    }
 else {
      text_UserAgent.setText(getString(R.string.userAgent,mSelectedNode.getUserAgent().getValue().toString()));
      text_UserAgent.setTextColor(getResources().getColor(R.color.textColor));
    }
    text_LastSeen.setText(getString(R.string.details_LastSeen,simpleDate.format(mSelectedNode.getLastSeen().getValue())));
    text_Protocol.setText(getString(R.string.details_Protocol,mSelectedNode.getProtocol().getValue()));
    if (mSelectedNode.getLastTimeout().isSet())     text_LastTimeout.setText(getString(R.string.details_LastTimeout,simpleDate.format(mSelectedNode.getLastTimeout().getValue())));
 else     text_LastTimeout.setText(getString(R.string.details_LastTimeout,getString(R.string.details_No_Timeout)));
    text_TimeoutRate.setText(getString(R.string.details_TimeoutRate,String.format(""String_Node_Str"",mSelectedNode.getTimeoutRate().getValue())));
    if (mSelectedNode.getLastContractSent().isSet())     text_LastContractSent.setText(getString(R.string.details_LastContractSent,Long.toString(mSelectedNode.getLastContractSent().getValue())));
 else     text_LastContractSent.setText(getString(R.string.details_LastContractSent,""String_Node_Str""));
    text_SpaceAvailable.setText(getString(R.string.details_SpaceAvailable,Boolean.toString(mSelectedNode.isSpaceAvailable().getValue())));
    text_Error.setVisibility(View.GONE);
  }
 else {
    text_Error.setText(getString(R.string.details_Error,mSelectedNode.getNodeID().getValue()));
    text_NodeID.setVisibility(View.GONE);
    text_Address.setVisibility(View.GONE);
    text_UserAgent.setVisibility(View.GONE);
    text_LastSeen.setVisibility(View.GONE);
    text_Protocol.setVisibility(View.GONE);
    text_LastTimeout.setVisibility(View.GONE);
    text_TimeoutRate.setVisibility(View.GONE);
    text_LastContractSent.setVisibility(View.GONE);
  }
  if (mSelectedNode.getResponseTime().getValue() == mSelectedNode.getResponseTime().getDefault()) {
    text_Status.setText(getString(R.string.details_offline));
    text_Status.setTextColor(getResources().getColor(R.color.red));
  }
 else {
    text_Status.setText(getString(R.string.details_online));
    text_Status.setTextColor(getResources().getColor(R.color.storj_color_green));
  }
  btn_ResponseTime.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ValueLineChart mCubicValueLineChart=(ValueLineChart)findViewById(R.id.cubiclinechart);
      AppCompatButton btn_ResponseTime=(AppCompatButton)findViewById(R.id.btn_responseTime);
      AppCompatButton btn_Reputation=(AppCompatButton)findViewById(R.id.btn_reputation);
      mCubicValueLineChart.clearChart();
      mCubicValueLineChart.addSeries(getSeriesFromDB(NodeReaderContract.NodeResponseTimeEntry.TABLE_NAME,mSelectedNode.getNodeID().getValue()));
      mCubicValueLineChart.startAnimation();
      btn_ResponseTime.setTextColor(getResources().getColor(R.color.storj_color_blue));
      btn_Reputation.setTextColor(getResources().getColor(R.color.grey));
    }
  }
);
  btn_Reputation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      ValueLineChart mCubicValueLineChart=(ValueLineChart)findViewById(R.id.cubiclinechart);
      AppCompatButton btn_ResponseTime=(AppCompatButton)findViewById(R.id.btn_responseTime);
      AppCompatButton btn_Reputation=(AppCompatButton)findViewById(R.id.btn_reputation);
      mCubicValueLineChart.clearChart();
      mCubicValueLineChart.addSeries(getSeriesFromDB(NodeReaderContract.NodeReputationEntry.TABLE_NAME,mSelectedNode.getNodeID().getValue()));
      mCubicValueLineChart.startAnimation();
      btn_Reputation.setTextColor(getResources().getColor(R.color.storj_color_green));
      btn_ResponseTime.setTextColor(getResources().getColor(R.color.dark_grey));
    }
  }
);
  btn_ResponseTime.setTextColor(getResources().getColor(R.color.storj_color_blue));
  btn_Reputation.setTextColor(getResources().getColor(R.color.grey));
}"
40386,"private boolean isPortOpen(StorjNode storjNode){
  try {
    ArrayList<Integer> openPorts=PortScan.onAddress(storjNode.getAddress().getValue()).setTimeOutMillis(1000).setPort(storjNode.getPort().getValue()).doScan();
    if (openPorts.size() > 1 && openPorts.get(0) == storjNode.getPort().getValue())     return true;
 else     return false;
  }
 catch (  UnknownHostException e) {
    e.printStackTrace();
  }
  return false;
}","private boolean isPortOpen(StorjNode storjNode){
  try {
    ArrayList<Integer> openPorts=PortScan.onAddress(storjNode.getAddress().getValue()).setTimeOutMillis(1000).setPort(storjNode.getPort().getValue()).doScan();
    if (openPorts.size() >= 1 && (openPorts.get(0) == storjNode.getPort().getValue()))     return true;
 else     return false;
  }
 catch (  UnknownHostException e) {
    e.printStackTrace();
  }
  return false;
}"
40387,"public boolean hasActiveInternetConnection(){
  if (isNetworkAvailable()) {
    try {
      HttpURLConnection urlc=(HttpURLConnection)(new URL(""String_Node_Str"").openConnection());
      urlc.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      urlc.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      urlc.setConnectTimeout(1500);
      urlc.connect();
      return (urlc.getResponseCode() == 200);
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"",e);
    }
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
  return false;
}","public boolean hasActiveInternetConnection(){
  if (isNetworkAvailable()) {
    try {
      HttpURLConnection urlc=(HttpURLConnection)(new URL(""String_Node_Str"").openConnection());
      urlc.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      urlc.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
      urlc.setConnectTimeout(1500);
      urlc.connect();
      int responseCode=urlc.getResponseCode();
      urlc.disconnect();
      return (responseCode == 200);
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"",e);
    }
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
  return false;
}"
40388,"private boolean isNodeOffline(StorjNode storjNode){
  Date currentTime=Calendar.getInstance().getTime();
  return (currentTime.getTime() - storjNode.getLastSeen().getTime()) >= getNodeOfflineAfter();
}","private boolean isNodeOffline(StorjNode storjNode){
  Date currentTime=Calendar.getInstance().getTime();
  int gmtOffset=TimeZone.getDefault().getRawOffset() + TimeZone.getDefault().getDSTSavings();
  return (currentTime.getTime() - (storjNode.getLastSeen().getTime() + gmtOffset)) >= getNodeOfflineAfter();
}"
40389,"private void showEditNowDialog(StorjNode storjNode,int position){
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(getString(R.string.edit_node));
  View layout=getLayoutInflater().inflate(R.layout.activity_main_edit_node_popup,null);
  AppCompatEditText textView_nodeSimpleName=(AppCompatEditText)layout.findViewById(R.id.textView_edit_simpleName);
  AppCompatEditText textView_nodeId=(AppCompatEditText)layout.findViewById(R.id.textView_edit_nodeID);
  textView_nodeId.setText(storjNode.getNodeID());
  textView_nodeSimpleName.setText(storjNode.getSimpleName());
  builder.setView(layout);
  final AlertDialog alertDialog=builder.create();
  TintImageView deleteButton=(TintImageView)layout.findViewById(R.id.button_edit_delete_node);
  deleteButton.setTag(position);
  deleteButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      int position=(Integer)v.getTag();
      StorjNode selectedNode=(StorjNode)mListView.getAdapter().getItem(position);
      alertDialog.cancel();
      deleteNode(selectedNode);
      AlarmReceiver alarm=new AlarmReceiver();
      alarm.pullStorjNodesStats(mContext);
    }
  }
);
  TintImageView saveButton=(TintImageView)layout.findViewById(R.id.button_edit_save_node);
  saveButton.setTag(position);
  saveButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      int position=(Integer)v.getTag();
      boolean error=false;
      StorjNode selectedNode=(StorjNode)mListView.getAdapter().getItem(position);
      TextView textView_nodeId=(TextView)v.getRootView().findViewById(R.id.textView_edit_nodeID);
      TextView textView_simpleName=(TextView)v.getRootView().findViewById(R.id.textView_edit_simpleName);
      if (textView_nodeId.getText().toString().matches(""String_Node_Str"")) {
        Toast.makeText(mContext,getString(R.string.add_error_missing_nodeID),Toast.LENGTH_SHORT).show();
        error=true;
      }
 else       if (textView_simpleName.getText().toString().matches(""String_Node_Str"")) {
        Toast.makeText(mContext,getString(R.string.add_error_missing_SimpleName),Toast.LENGTH_SHORT).show();
        error=true;
      }
      DatabaseManager databaseManager=DatabaseManager.getInstance(mContext);
      Cursor cursor=databaseManager.getNode(textView_nodeId.getText().toString());
      if (cursor.getCount() >= 1) {
        Toast.makeText(mContext,getString(R.string.add_error_node_exists),Toast.LENGTH_SHORT).show();
        error=true;
      }
      if (!error) {
        StorjNode updatedNode=new StorjNode(textView_nodeId.getText().toString());
        updatedNode.setSimpleName(textView_simpleName.getText().toString());
        updateNode(selectedNode,updatedNode);
        AlarmReceiver alarm=new AlarmReceiver();
        alarm.pullStorjNodesStats(mContext);
      }
      alertDialog.cancel();
    }
  }
);
  alertDialog.show();
}","private void showEditNowDialog(StorjNode storjNode,int position){
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(getString(R.string.edit_node));
  View layout=getLayoutInflater().inflate(R.layout.activity_main_edit_node_popup,null);
  AppCompatEditText textView_nodeSimpleName=(AppCompatEditText)layout.findViewById(R.id.textView_edit_simpleName);
  AppCompatEditText textView_nodeId=(AppCompatEditText)layout.findViewById(R.id.textView_edit_nodeID);
  textView_nodeId.setText(storjNode.getNodeID());
  textView_nodeSimpleName.setText(storjNode.getSimpleName());
  builder.setView(layout);
  final AlertDialog alertDialog=builder.create();
  TintImageView deleteButton=(TintImageView)layout.findViewById(R.id.button_edit_delete_node);
  deleteButton.setTag(position);
  deleteButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      int position=(Integer)v.getTag();
      StorjNode selectedNode=(StorjNode)mListView.getAdapter().getItem(position);
      alertDialog.cancel();
      deleteNode(selectedNode);
      AlarmReceiver alarm=new AlarmReceiver();
      alarm.pullStorjNodesStats(mContext);
    }
  }
);
  TintImageView saveButton=(TintImageView)layout.findViewById(R.id.button_edit_save_node);
  saveButton.setTag(position);
  saveButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      int position=(Integer)v.getTag();
      boolean error=false;
      StorjNode selectedNode=(StorjNode)mListView.getAdapter().getItem(position);
      TextView textView_nodeId=(TextView)v.getRootView().findViewById(R.id.textView_edit_nodeID);
      TextView textView_simpleName=(TextView)v.getRootView().findViewById(R.id.textView_edit_simpleName);
      if (textView_nodeId.getText().toString().matches(""String_Node_Str"")) {
        Toast.makeText(mContext,getString(R.string.add_error_missing_nodeID),Toast.LENGTH_SHORT).show();
        error=true;
      }
 else       if (textView_simpleName.getText().toString().matches(""String_Node_Str"")) {
        Toast.makeText(mContext,getString(R.string.add_error_missing_SimpleName),Toast.LENGTH_SHORT).show();
        error=true;
      }
      DatabaseManager databaseManager=DatabaseManager.getInstance(mContext);
      Cursor cursor=databaseManager.getNode(textView_nodeId.getText().toString());
      if (cursor.getCount() >= 1 && !(textView_nodeId.getText().toString().equals(selectedNode.getNodeID()))) {
        Toast.makeText(mContext,getString(R.string.add_error_node_exists),Toast.LENGTH_SHORT).show();
        error=true;
      }
      if (!error) {
        StorjNode updatedNode=new StorjNode(textView_nodeId.getText().toString());
        updatedNode.setSimpleName(textView_simpleName.getText().toString());
        updateNode(selectedNode,updatedNode);
        AlarmReceiver alarm=new AlarmReceiver();
        alarm.pullStorjNodesStats(mContext);
      }
      alertDialog.cancel();
    }
  }
);
  alertDialog.show();
}"
40390,"@Override public void onClick(View v){
  Log.i(TAG,""String_Node_Str"");
  StorjNode selectedNode=(StorjNode)mListView.getAdapter().getItem(position);
  Intent storjNodeDetailIntent=new Intent(MainActivity.this,StorjNodeDetailActivity.class);
  storjNodeDetailIntent.putExtra(StorjNodeDetailActivity.EXTRA_NODEID,selectedNode.getNodeID());
  mContext.startActivity(storjNodeDetailIntent);
}","@Override public void onClick(View v){
  StorjNode selectedNode=(StorjNode)mListView.getAdapter().getItem(position);
  Intent storjNodeDetailIntent=new Intent(MainActivity.this,StorjNodeDetailActivity.class);
  storjNodeDetailIntent.putExtra(StorjNodeDetailActivity.EXTRA_NODEID,selectedNode.getNodeID());
  mContext.startActivity(storjNodeDetailIntent);
}"
40391,"@Override public View getView(final int position,View convertView,final ViewGroup parent){
  View view=convertView;
  if (view == null) {
    LayoutInflater vi=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    view=vi.inflate(R.layout.activity_main_row,null);
  }
  final StorjNode selectedNode=mItems.get(position);
  TextView txtNodeSimpleName=(TextView)view.findViewById(R.id.textView_node_simpleName);
  TextView txtAddress=(TextView)view.findViewById(R.id.textView_address);
  final TextView txtUserAgent=(TextView)view.findViewById(R.id.textView_userAgent);
  ResponseTimeView responseTimeView=(ResponseTimeView)view.findViewById(R.id.responseTimeView);
  txtNodeSimpleName.setText(selectedNode.getSimpleName());
  TintImageView edit_image=(TintImageView)view.findViewById(R.id.edit_imageview);
  edit_image.setTag(position);
  edit_image.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      int position=(Integer)v.getTag();
      StorjNode selectedNode=(StorjNode)mListView.getAdapter().getItem(position);
      Log.i(TAG,""String_Node_Str"" + position);
      showEditNowDialog(selectedNode,position);
    }
  }
);
  view.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Log.i(TAG,""String_Node_Str"");
      StorjNode selectedNode=(StorjNode)mListView.getAdapter().getItem(position);
      Intent storjNodeDetailIntent=new Intent(MainActivity.this,StorjNodeDetailActivity.class);
      storjNodeDetailIntent.putExtra(StorjNodeDetailActivity.EXTRA_NODEID,selectedNode.getNodeID());
      mContext.startActivity(storjNodeDetailIntent);
    }
  }
);
  if (selectedNode.getLastChecked() == null || selectedNode.getResponseTime() == -1) {
    responseTimeView.setResponseTime(0);
    if (selectedNode.getAddress() != null)     txtAddress.setText(getString(R.string.address,selectedNode.getAddress() + ""String_Node_Str"" + selectedNode.getPort()));
    if (selectedNode.getUserAgent() != null)     txtUserAgent.setText(getString(R.string.userAgent,selectedNode.getUserAgent().toString()));
    return view;
  }
  responseTimeView.setResponseTime(selectedNode.getResponseTime());
  txtAddress.setText(getString(R.string.address,selectedNode.getAddress() + ""String_Node_Str"" + selectedNode.getPort()));
  if (selectedNode.getUserAgent() != null)   txtUserAgent.setText(getString(R.string.userAgent,selectedNode.getUserAgent().toString()));
  return view;
}","@Override public View getView(final int position,View convertView,final ViewGroup parent){
  View view=convertView;
  if (view == null) {
    LayoutInflater vi=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    view=vi.inflate(R.layout.activity_main_row,null);
  }
  final StorjNode selectedNode=mItems.get(position);
  TextView txtNodeSimpleName=(TextView)view.findViewById(R.id.textView_node_simpleName);
  TextView txtAddress=(TextView)view.findViewById(R.id.textView_address);
  final TextView txtUserAgent=(TextView)view.findViewById(R.id.textView_userAgent);
  ResponseTimeView responseTimeView=(ResponseTimeView)view.findViewById(R.id.responseTimeView);
  txtNodeSimpleName.setText(selectedNode.getSimpleName());
  TintImageView edit_image=(TintImageView)view.findViewById(R.id.edit_imageview);
  edit_image.setTag(position);
  edit_image.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      int position=(Integer)v.getTag();
      StorjNode selectedNode=(StorjNode)mListView.getAdapter().getItem(position);
      showEditNowDialog(selectedNode,position);
    }
  }
);
  view.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      StorjNode selectedNode=(StorjNode)mListView.getAdapter().getItem(position);
      Intent storjNodeDetailIntent=new Intent(MainActivity.this,StorjNodeDetailActivity.class);
      storjNodeDetailIntent.putExtra(StorjNodeDetailActivity.EXTRA_NODEID,selectedNode.getNodeID());
      mContext.startActivity(storjNodeDetailIntent);
    }
  }
);
  if (selectedNode.getLastChecked() == null || selectedNode.getResponseTime() == -1) {
    responseTimeView.setResponseTime(0);
    if (selectedNode.getAddress() != null)     txtAddress.setText(getString(R.string.address,selectedNode.getAddress() + ""String_Node_Str"" + selectedNode.getPort()));
    if (selectedNode.getUserAgent() != null)     txtUserAgent.setText(getString(R.string.userAgent,selectedNode.getUserAgent().toString()));
    return view;
  }
  responseTimeView.setResponseTime(selectedNode.getResponseTime());
  txtAddress.setText(getString(R.string.address,selectedNode.getAddress() + ""String_Node_Str"" + selectedNode.getPort()));
  if (selectedNode.getUserAgent() != null)   txtUserAgent.setText(getString(R.string.userAgent,selectedNode.getUserAgent().toString()));
  return view;
}"
40392,"@Override protected StorjNode doInBackground(List<StorjNode>... lists){
  StorjNode node=null;
  for (  StorjNode storjNode : lists[0]) {
    try {
      JSONObject jsonObject=getJSONObjectFromURL(STORJ_API_URL + ""String_Node_Str"" + storjNode.getNodeID());
      Log.d(TAG,""String_Node_Str"" + jsonObject.toString());
      node=new StorjNode(jsonObject);
      StorjNodeHolder nodeHolder=StorjNodeHolder.getInstance();
      List<StorjNode> storjNodes=nodeHolder.get();
      for (int i=0; i < storjNodes.size(); i++) {
        if (storjNodes.get(i).getNodeID().equals(node.getNodeID())) {
          storjNodes.get(i).copyStorjNode(node);
          storjNodes.get(i).setLastChecked(Calendar.getInstance().getTime());
          Log.i(TAG,""String_Node_Str"" + storjNodes.get(i).getResponseTime());
          if (isNodeOffline(storjNodes.get(i)))           sendNodeOfflineNotification(i,storjNodes.get(i));
          break;
        }
      }
      nodeHolder.saveToSharedPreferences(mContext);
      publishProgress(node.getNodeID());
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
catch (    JSONException e) {
      e.printStackTrace();
    }
  }
  return node;
}","@Override protected StorjNode doInBackground(List<StorjNode>... lists){
  StorjNode node=null;
  for (  StorjNode storjNode : lists[0]) {
    try {
      JSONObject jsonObject=getJSONObjectFromURL(STORJ_API_URL + ""String_Node_Str"" + storjNode.getNodeID());
      Log.d(TAG,""String_Node_Str"" + jsonObject.toString());
      node=new StorjNode(jsonObject);
      StorjNodeHolder nodeHolder=StorjNodeHolder.getInstance();
      List<StorjNode> storjNodes=nodeHolder.get();
      for (int i=0; i < storjNodes.size(); i++) {
        if (storjNodes.get(i).getNodeID().equals(node.getNodeID())) {
          storjNodes.get(i).copyStorjNode(node);
          storjNodes.get(i).setLastChecked(Calendar.getInstance().getTime());
          Log.i(TAG,""String_Node_Str"" + storjNodes.get(i).getResponseTime());
          if (isNodeOffline(storjNodes.get(i)))           sendNodeOfflineNotification(i,storjNodes.get(i));
          break;
        }
      }
      nodeHolder.saveToSharedPreferences(mContext);
      publishProgress(node.getNodeID());
    }
 catch (    IOException e) {
      Log.i(TAG,""String_Node_Str"" + storjNode.getNodeID() + ""String_Node_Str"");
      resetNode(storjNode);
    }
catch (    JSONException e) {
      e.printStackTrace();
    }
  }
  return node;
}"
40393,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  mContext=getApplicationContext();
  mListView=(ListView)findViewById(R.id.main_list_view);
  FloatingActionButton addNodeButton=(FloatingActionButton)findViewById(R.id.button_addNewNode);
  addNodeButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showAddNewNodeDialog();
    }
  }
);
  StorjNodeHolder nodeHolder=StorjNodeHolder.getInstance();
  nodeHolder.getFromSharedPreferences(mContext);
  StorjNode testnode_1=new StorjNode(""String_Node_Str"");
  StorjNode testnode_2=new StorjNode(""String_Node_Str"");
  StorjNodeAdapter adapter=new StorjNodeAdapter(this,R.layout.activity_main_row,nodeHolder.get());
  mListView.setAdapter(adapter);
  AlarmManager manager=(AlarmManager)getSystemService(Context.ALARM_SERVICE);
  int interval=1;
  Intent alarmIntent=new Intent(mContext,AlarmReceiver.class);
  PendingIntent pendingIntent=PendingIntent.getBroadcast(mContext,0,alarmIntent,0);
  manager.setInexactRepeating(AlarmManager.RTC_WAKEUP,System.currentTimeMillis(),interval,pendingIntent);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  mContext=getApplicationContext();
  mListView=(ListView)findViewById(R.id.main_list_view);
  FloatingActionButton addNodeButton=(FloatingActionButton)findViewById(R.id.button_addNewNode);
  addNodeButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showAddNewNodeDialog();
    }
  }
);
  StorjNodeHolder nodeHolder=StorjNodeHolder.getInstance();
  nodeHolder.getFromSharedPreferences(mContext);
  StorjNode testnode_1=new StorjNode(""String_Node_Str"");
  nodeHolder.add(testnode_1);
  StorjNode testnode_2=new StorjNode(""String_Node_Str"");
  nodeHolder.add(testnode_2);
  StorjNodeAdapter adapter=new StorjNodeAdapter(this,R.layout.activity_main_row,nodeHolder.get());
  mListView.setAdapter(adapter);
  AlarmManager manager=(AlarmManager)getSystemService(Context.ALARM_SERVICE);
  int interval=1;
  Intent alarmIntent=new Intent(mContext,AlarmReceiver.class);
  PendingIntent pendingIntent=PendingIntent.getBroadcast(mContext,0,alarmIntent,0);
  manager.setInexactRepeating(AlarmManager.RTC_WAKEUP,System.currentTimeMillis(),interval,pendingIntent);
}"
40394,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  findViewById(R.id.button).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      download();
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  findViewById(R.id.btn_start).setOnClickListener(this);
  findViewById(R.id.btn_pause).setOnClickListener(this);
  progressBar=(ProgressBar)findViewById(R.id.pb_download);
}"
40395,"@Override public void onClick(View view){
  download();
}","@Override public void onClick(View view){
  String name=""String_Node_Str"";
  String url=""String_Node_Str"";
  String tag=String.valueOf(url.hashCode());
switch (view.getId()) {
case R.id.btn_start:
    start(name,url,tag);
  break;
case R.id.btn_pause:
pause(tag);
break;
default :
break;
}
}"
40396,"@Override public void onStart(){
  System.out.println(""String_Node_Str"");
}","@Override public void onStart(){
  L.d(""String_Node_Str"");
}"
40397,"@Override public void onDownloadCompleted(Object o){
  System.out.println(""String_Node_Str"");
}","@Override public void onDownloadCompleted(File file){
  L.d(""String_Node_Str"" + file.getAbsolutePath());
}"
40398,"@Override public void onDownloadFailed(DownloadException e){
  System.out.println(""String_Node_Str"" + e);
}","@Override public void onDownloadFailed(DownloadException e){
  e.printStackTrace();
  L.d(""String_Node_Str"" + e.getErrorMessage());
}"
40399,"@Override public void onDownloadProgress(long finished,long totalLength,int percent){
  System.out.println(""String_Node_Str"" + finished + ""String_Node_Str""+ totalLength+ ""String_Node_Str""+ percent);
}","@Override public void onDownloadProgress(long finished,long totalLength,int percent){
  L.d(""String_Node_Str"" + percent);
  progressBar.setProgress(percent);
}"
40400,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  String url=""String_Node_Str"";
  new GetBuilder().mName(""String_Node_Str"").folder(new File(""String_Node_Str"")).uri(url).build().execute(this,new FileCallBack(){
    @Override public void onStart(){
    }
    @Override public void onDownloadProgress(    long finished,    long totalLength,    int percent){
    }
    @Override public void onDownloadFailed(    DownloadException e){
    }
    @Override public void onDownloadCompleted(    File file){
    }
  }
);
  RequestCall call=new GetBuilder().mName(""String_Node_Str"").folder(new File(""String_Node_Str"")).uri(""String_Node_Str"").build();
  DownloadManager.getInstance(this).execute(call,new StringCallback(){
    @Override public void onStart(){
    }
    @Override public void onDownloadFailed(    DownloadException e){
    }
    @Override public void onDownloadCompleted(    String s){
    }
  }
);
  String tag=String.valueOf(url.hashCode());
  DownloadManager.getInstance(this).pause(tag);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  findViewById(R.id.button).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      download();
    }
  }
);
}"
40401,"@Override public void onStart(){
}","@Override public void onStart(){
  System.out.println(""String_Node_Str"");
}"
40402,"@Override public void onDownloadCompleted(String s){
}","@Override public void onDownloadCompleted(Object o){
  System.out.println(""String_Node_Str"");
}"
40403,"@Override public void onDownloadFailed(DownloadException e){
}","@Override public void onDownloadFailed(DownloadException e){
  System.out.println(""String_Node_Str"" + e);
}"
40404,"@Override public void onDownloadProgress(long finished,long totalLength,int percent){
}","@Override public void onDownloadProgress(long finished,long totalLength,int percent){
  System.out.println(""String_Node_Str"" + finished + ""String_Node_Str""+ totalLength+ ""String_Node_Str""+ percent);
}"
40405,"/** 
 * 当downloader onConnectCanceled, onConnectFailed, onDownloadCompleted, onDownloadPaused, onDownloadCanceled, onDownloadFailed 等操作时候执行removeDownloader 
 */
public void removeDownloader(String key){
  if (mDownloaderMap.containsKey(key)) {
    mDownloaderMap.remove(key);
  }
}","/** 
 * 当downloader onConnectCanceled, onConnectFailed, onDownloadCompleted, onDownloadPaused, onDownloadCanceled, onDownloadFailed 等操作时候执行removeDownloader 
 */
public void removeDownloader(String tag){
  if (mDownloaderMap.containsKey(tag)) {
    mDownloaderMap.remove(tag);
  }
}"
40406,"@Override public void onDownloadProgress(final long finished,final long length){
  final int percent=(int)(finished * 100 / length);
  mPlatform.execute(new Runnable(){
    @Override public void run(){
      mCallback.onDownloadProgress(finished,length,percent);
    }
  }
);
}","@Override public void onDownloadProgress(final long finished,final long length){
  final int percent=(int)(finished * 100 / length);
  if (percent != tempPercent) {
    mPlatform.execute(new Runnable(){
      @Override public void run(){
        mCallback.onDownloadProgress(finished,length,percent);
      }
    }
);
  }
  tempPercent=percent;
}"
40407,"private void initDownloadTasks(long length,boolean acceptRanges){
  mDownloadTasks.clear();
  if (acceptRanges) {
    List<ThreadInfo> threadInfos=getMultiThreadInfos(length);
    int finished=0;
    for (    ThreadInfo threadInfo : threadInfos) {
      finished+=threadInfo.getFinished();
    }
    mDownloadInfo.setFinished(finished);
    for (    ThreadInfo info : threadInfos) {
      mDownloadTasks.add(new MultiDownloadTask(mDownloadInfo,info,mDBManager,this));
    }
  }
 else {
    ThreadInfo info=getSingleThreadInfo();
    mDownloadTasks.add(new SingleDownloadTask(mDownloadInfo,info,this));
  }
}","private void initDownloadTasks(long length,boolean acceptRanges){
  String log=acceptRanges == true ? ""String_Node_Str"" : ""String_Node_Str"";
  L.d(""String_Node_Str"" + log);
  mDownloadTasks.clear();
  if (acceptRanges) {
    List<ThreadInfo> threadInfos=getMultiThreadInfos(length);
    int finished=0;
    for (    ThreadInfo threadInfo : threadInfos) {
      finished+=threadInfo.getFinished();
    }
    mDownloadInfo.setFinished(finished);
    for (    ThreadInfo info : threadInfos) {
      mDownloadTasks.add(new MultiDownloadTask(mDownloadInfo,info,mDBManager,this));
    }
  }
 else {
    ThreadInfo info=getSingleThreadInfo();
    mDownloadTasks.add(new SingleDownloadTask(mDownloadInfo,info,this));
  }
}"
40408,"public DownloaderImpl(RequestCall call,Platform platform,Callback callback,ExecutorService executorService,DatabaseManager databaseManager,String tag){
  this.mCall=call;
  this.mPlatform=platform;
  this.mCallback=callback;
  this.mExecutor=executorService;
  this.mDBManager=databaseManager;
  this.mTag=tag;
  mDownloadInfo=new DownloadInfo(call.getRequest.mName,call.getRequest.mUri,call.getRequest.mFolder);
  mDownloadTasks=new LinkedList<>();
}","public DownloaderImpl(RequestCall call,Platform platform,Callback callback,ExecutorService executorService,DatabaseManager databaseManager,String tag){
  this.mCall=call;
  this.mPlatform=platform;
  this.mCallback=callback;
  this.mExecutor=executorService;
  this.mDBManager=databaseManager;
  this.mTag=tag;
  mDownloadInfo=new DownloadInfo(call.getRequest.mName,call.getRequest.mUri,call.getRequest.mFolder);
  mDownloadTasks=new LinkedList<>();
  if (mCallback == null)   mCallback=Callback.CALLBACK_DEFAULT;
}"
40409,"public List<ThreadInfo> getThreadInfos(String tag){
  return threadInfoDao.find(tag);
}","public synchronized List<ThreadInfo> getThreadInfos(String tag){
  return threadInfoDao.find(tag);
}"
40410,"/** 
 * 使用2个条件找到 相应的ThreadInfo,因为每个文件下载所对应的线程数组(字段threadId 【非主键】都是1,2,3,4,5等), 而字段tag标识url,准确找到某个ThreadInfo
 */
public boolean exists(String tag,int threadId){
  return threadInfoDao.exists(tag,threadId);
}","/** 
 * 使用2个条件找到 相应的ThreadInfo,因为每个文件下载所对应的线程数组(字段threadId 【非主键】都是1,2,3,4,5等), 而字段tag标识url,准确找到某个ThreadInfo
 */
public synchronized boolean exists(String tag,int threadId){
  return threadInfoDao.exists(tag,threadId);
}"
40411,"public static DatabaseManager getInstance(Context context){
  if (sDataBaseManager == null) {
synchronized (sDataBaseManager) {
      if (sDataBaseManager == null) {
        sDataBaseManager=new DatabaseManager(context);
      }
    }
  }
  return sDataBaseManager;
}","public static DatabaseManager getInstance(Context context){
  if (sDataBaseManager == null) {
synchronized (DatabaseManager.class) {
      if (sDataBaseManager == null) {
        sDataBaseManager=new DatabaseManager(context);
      }
    }
  }
  return sDataBaseManager;
}"
40412,"@Override public RequestCall build(){
  return new GetRequest(mUri,mFolder,mName).build();
}","@Override public RequestCall build(){
  return new GetRequest(mUri,mFolder,mName,mTag).build();
}"
40413,"public GetRequest(String uri,File folder,String name){
  this.mUri=uri;
  this.mFolder=folder;
  this.mName=name;
}","public GetRequest(String uri,File folder,String name,String tag){
  this.mUri=uri;
  this.mFolder=folder;
  this.mName=name;
  this.mTag=tag;
}"
40414,"public void execute(Context context,Callback callback){
  DownloadManager.getInstance(context).execute(this,callback);
}","public void execute(Context context,Callback callback){
  DownloadManager.getInstance(context).start(this,callback);
}"
40415,"@Override protected void updateDB(ThreadInfo info){
  mDBManager.update(info.getTag(),info.getId(),info.getFinished());
}","@Override protected void updateDB(ThreadInfo info){
  L.d(""String_Node_Str"" + info.getId() + ""String_Node_Str""+ info.getTag());
  mDBManager.update(info.getTag(),info.getId(),info.getFinished());
}"
40416,"@Override protected void insertIntoDB(ThreadInfo info){
  if (!mDBManager.exists(info.getTag(),info.getId())) {
    mDBManager.add(info);
  }
}","@Override protected void insertIntoDB(ThreadInfo info){
  if (!mDBManager.exists(info.getTag(),info.getId())) {
    L.d(""String_Node_Str"" + info.getId() + ""String_Node_Str""+ info.getTag());
    mDBManager.add(info);
  }
}"
40417,"@Override protected void insertIntoDB(ThreadInfo info){
}","@Override protected void insertIntoDB(ThreadInfo info){
  L.d(""String_Node_Str"");
}"
40418,"public void scrobble(Scrobble scrobble){
  String apiSig=HelperMethods.generateSig(Constants.ARTIST,scrobble.getArtistName(),Constants.TRACK,scrobble.getTrackName(),Constants.TIMESTAMP,String.valueOf(scrobble.getTimestamp()),Constants.METHOD,Constants.TRACK_SCROBBLE_METHOD);
  lastFmApiClient.getLastFmApiService().scrobbleTrack(Constants.TRACK_SCROBBLE_METHOD,scrobble.getArtistName(),scrobble.getTrackName(),Config.API_KEY,apiSig,scrobble.getTimestamp(),App.getSharedPreferences().getString(Constants.USER_SESSION_KEY,""String_Node_Str""),Config.FORMAT).observeOn(AndroidSchedulers.mainThread()).subscribeOn(Schedulers.newThread()).subscribe(new Observer<Response>(){
    @Override public void onSubscribe(    Disposable d){
      compositeDisposable.add(d);
    }
    @Override public void onNext(    Response response){
      if (response != null) {
        if (response.getError() == null) {
          AppLog.log(TAG,String.format(""String_Node_Str"",scrobble.getArtistName(),scrobble.getTrackName()));
        }
 else {
          handleErrorResponse(response,scrobble);
        }
      }
    }
    @Override public void onError(    Throwable e){
      storeInDb(scrobble);
      AppLog.log(TAG,e.getMessage());
    }
    @Override public void onComplete(){
      resetPenalty();
      if (nowPlaying != null) {
        nowPlaying.setTrackStartTime(System.currentTimeMillis());
      }
      compositeDisposable.clear();
    }
  }
);
}","public void scrobble(Scrobble scrobble){
  String apiSig=HelperMethods.generateSig(Constants.ARTIST,scrobble.getArtistName(),Constants.TRACK,scrobble.getTrackName(),Constants.TIMESTAMP,String.valueOf(scrobble.getTimestamp()),Constants.METHOD,Constants.TRACK_SCROBBLE_METHOD);
  lastFmApiClient.getLastFmApiService().scrobbleTrack(Constants.TRACK_SCROBBLE_METHOD,scrobble.getArtistName(),scrobble.getTrackName(),Config.API_KEY,apiSig,scrobble.getTimestamp(),App.getSharedPreferences().getString(Constants.USER_SESSION_KEY,""String_Node_Str""),Config.FORMAT).observeOn(AndroidSchedulers.mainThread()).subscribeOn(Schedulers.io()).subscribe(new Observer<Response>(){
    @Override public void onSubscribe(    Disposable d){
      compositeDisposable.add(d);
    }
    @Override public void onNext(    Response response){
      if (response != null) {
        if (response.getError() == null) {
          AppLog.log(TAG,String.format(""String_Node_Str"",scrobble.getArtistName(),scrobble.getTrackName()));
        }
 else {
          handleErrorResponse(response,scrobble);
        }
      }
    }
    @Override public void onError(    Throwable e){
      storeInDb(scrobble);
      AppLog.log(TAG,e.getMessage());
    }
    @Override public void onComplete(){
      resetPenalty();
      if (nowPlaying != null) {
        nowPlaying.setTrackStartTime(System.currentTimeMillis());
      }
      compositeDisposable.clear();
    }
  }
);
}"
40419,"@Override public void loadArtistTopTracks(ArtistSpecificsTopTracksContract.View view){
  lastFmApiClient.getLastFmApiService().getArtistTopTracks(artist.getName(),LIMIT).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<ArtistTopTracks>(){
    @Override public void onSubscribe(    Disposable d){
      detailView.showProgressBar();
      compositeDisposable.add(d);
    }
    @Override public void onNext(    ArtistTopTracks artistTopTracks){
      List<BarEntry> entries=new ArrayList<>();
      List<String> labels=new ArrayList<>();
      List<Track> tracks=artistTopTracks.getToptracks().getTrack();
      if (tracks == null || tracks.isEmpty())       return;
      Collections.sort(tracks,(o1,o2) -> Integer.valueOf(o2.getPlaycount()).compareTo(Integer.valueOf(o1.getPlaycount())));
      int counter=0;
      for (int i=tracks.size() - 1; i >= 0; i--) {
        Track track=tracks.get(i);
        float playcount=Float.parseFloat(track.getPlaycount());
        entries.add(new BarEntry(counter,playcount >= 0 ? playcount : 0f,track.getName()));
        labels.add(track.getName());
        counter++;
      }
      BarDataSet barDataSet=new BarDataSet(entries,BAR_CHART_TITLE);
      BarData barData=new BarData(barDataSet);
      HorizontalBarChart barChart=view.getHorizontalBarChart();
      configureBarChart(labels,barDataSet,barData,barChart);
    }
    @Override public void onError(    Throwable e){
      AppLog.log(TAG,e.getMessage());
      compositeDisposable.clear();
      detailView.hideProgressBar();
    }
    @Override public void onComplete(){
      compositeDisposable.clear();
      detailView.hideProgressBar();
    }
  }
);
}","@Override public void loadArtistTopTracks(ArtistSpecificsTopTracksContract.View view){
  if (artist == null && artist.getName() == null) {
    return;
  }
  lastFmApiClient.getLastFmApiService().getArtistTopTracks(artist.getName(),LIMIT).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<ArtistTopTracks>(){
    @Override public void onSubscribe(    Disposable d){
      detailView.showProgressBar();
      compositeDisposable.add(d);
    }
    @Override public void onNext(    ArtistTopTracks artistTopTracks){
      List<BarEntry> entries=new ArrayList<>();
      List<String> labels=new ArrayList<>();
      List<Track> tracks=artistTopTracks.getToptracks().getTrack();
      if (tracks == null || tracks.isEmpty())       return;
      Collections.sort(tracks,(o1,o2) -> Integer.valueOf(o2.getPlaycount()).compareTo(Integer.valueOf(o1.getPlaycount())));
      int counter=0;
      for (int i=tracks.size() - 1; i >= 0; i--) {
        Track track=tracks.get(i);
        float playcount=Float.parseFloat(track.getPlaycount());
        entries.add(new BarEntry(counter,playcount >= 0 ? playcount : 0f,track.getName()));
        labels.add(track.getName());
        counter++;
      }
      BarDataSet barDataSet=new BarDataSet(entries,BAR_CHART_TITLE);
      BarData barData=new BarData(barDataSet);
      HorizontalBarChart barChart=view.getHorizontalBarChart();
      configureBarChart(labels,barDataSet,barData,barChart);
    }
    @Override public void onError(    Throwable e){
      AppLog.log(TAG,e.getMessage());
      compositeDisposable.clear();
      detailView.hideProgressBar();
    }
    @Override public void onComplete(){
      compositeDisposable.clear();
      detailView.hideProgressBar();
    }
  }
);
}"
40420,"@Override public void onNotificationRemoved(StatusBarNotification sbn){
  if (sbn.getPackageName().equals(currentPlayingControllerPackageName)) {
    Notificator.cancelNotification(this);
  }
}","@Override public void onNotificationRemoved(StatusBarNotification sbn){
  if (currentPlayingControllerPackageName == null) {
    return;
  }
  if (sbn.getPackageName().equals(currentPlayingControllerPackageName)) {
    Notificator.cancelNotification(this);
  }
}"
40421,"private void openProfile(){
  String username=App.getSharedPreferences().getString(Constants.USERNAME,""String_Node_Str"");
  if (username.isEmpty() || username == ""String_Node_Str"") {
    alertDialogBuilder.setCancelable(true);
    alertDialogBuilder.setTitle(activity.getString(R.string.note)).setMessage(activity.getString(R.string.log_in_to_use_feature)).setNeutralButton(activity.getString(R.string.dialog_action_dismiss),(dialog,which) -> {
      dialog.dismiss();
    }
);
    alertDialogBuilder.create().show();
    return;
  }
  activity.startActivity(new Intent(activity,Profile.class));
}","private void openProfile(){
  String username=App.getSharedPreferences().getString(Constants.USERNAME,""String_Node_Str"");
  if (username.isEmpty() || username == ""String_Node_Str"") {
    alertDialogBuilder.setCancelable(true);
    alertDialogBuilder.setTitle(activity.getString(R.string.note)).setMessage(activity.getString(R.string.log_in_to_use_feature)).setNeutralButton(activity.getString(R.string.dialog_action_dismiss),(dialog,which) -> {
      dialog.dismiss();
    }
);
    if (!activity.isFinishing()) {
      alertDialogBuilder.create().show();
    }
    return;
  }
  activity.startActivity(new Intent(activity,Profile.class));
}"
40422,"private void openAbout(){
  View layout=activity.getLayoutInflater().inflate(R.layout.about_layout,null);
  TextView aboutMessage=layout.findViewById(R.id.about_message);
  SpannableString s=new SpannableString(String.format(activity.getString(R.string.about_message),Constants.APP_VESRION));
  Linkify.addLinks(s,Linkify.WEB_URLS);
  aboutMessage.setMovementMethod(LinkMovementMethod.getInstance());
  aboutMessage.setText(s);
  alertDialogBuilder.setTitle(R.string.about);
  alertDialogBuilder.setView(layout).setCancelable(true).setIcon(android.R.drawable.ic_dialog_info).setPositiveButton(R.string.dialog_action_dismiss,null).create().show();
}","private void openAbout(){
  View layout=activity.getLayoutInflater().inflate(R.layout.about_layout,null);
  TextView aboutMessage=layout.findViewById(R.id.about_message);
  SpannableString s=new SpannableString(String.format(activity.getString(R.string.about_message),Constants.APP_VESRION));
  Linkify.addLinks(s,Linkify.WEB_URLS);
  aboutMessage.setMovementMethod(LinkMovementMethod.getInstance());
  aboutMessage.setText(s);
  alertDialogBuilder.setTitle(R.string.about);
  if (!activity.isFinishing()) {
    alertDialogBuilder.setView(layout).setCancelable(true).setIcon(android.R.drawable.ic_dialog_info).setPositiveButton(R.string.dialog_action_dismiss,null).create().show();
  }
}"
40423,"@Provides @Singleton GsonConverterFactory provideGsonConverterFactory(){
  Gson gson=new GsonBuilder().registerTypeAdapter(Album.class,new Album.DataStateDeserializer()).create();
  return GsonConverterFactory.create(gson);
}","@Provides @Singleton GsonConverterFactory provideGsonConverterFactory(){
  Gson gson=new GsonBuilder().registerTypeAdapter(Album.class,new Album.DataStateDeserializer()).registerTypeAdapter(Track.class,new Track.TrackDataStateDeserializer()).create();
  return GsonConverterFactory.create(gson);
}"
40424,"public void setStreamable(Streamable streamable){
  this.streamable=streamable;
}","public void setStreamable(Object streamable){
  this.streamable=streamable;
}"
40425,"public Streamable getStreamable(){
  return streamable;
}","public Object getStreamable(){
  return streamable;
}"
40426,"@Nullable @Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.now_playing_fragment,container,false);
  ButterKnife.bind(this,view);
  nowPlayingFragmentPresenter.takeView(this);
  Scrobble nowPlaying=scrobbler.getNowPlaying();
  if (nowPlaying == null) {
    nowPlayingNothing.setVisibility(View.VISIBLE);
    HelperMethods.setLayoutChildrenVisibility(View.GONE,nowPlayingLayout);
  }
 else {
    HelperMethods.setLayoutChildrenVisibility(View.VISIBLE,nowPlayingLayout);
    nowPlayingNothing.setVisibility(View.INVISIBLE);
    if (nowPlaying.getAlbumArt() != null) {
      Glide.with(nowPlayingArtistImage.getContext()).load(HelperMethods.bitmapToByte(nowPlaying.getAlbumArt())).asBitmap().into(nowPlayingArtistImage);
    }
 else {
      Glide.with(nowPlayingArtistImage.getContext()).load(getResources().getIdentifier(""String_Node_Str"",""String_Node_Str"",this.getContext().getPackageName())).into(nowPlayingArtistImage);
    }
    nowPlayingArtist.setText(nowPlaying.getArtistName());
    nowPlayingTitle.setText(nowPlaying.getTrackName());
    nowPlayingAlbum.setText(nowPlaying.getAlbumName());
  }
  return view;
}","@Nullable @Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.now_playing_fragment,container,false);
  ButterKnife.bind(this,view);
  nowPlayingFragmentPresenter.takeView(this);
  Scrobble nowPlaying=scrobbler.getNowPlaying();
  if (nowPlaying == null) {
    HelperMethods.setLayoutChildrenVisibility(View.GONE,nowPlayingLayout);
  }
 else {
    HelperMethods.setLayoutChildrenVisibility(View.VISIBLE,nowPlayingLayout);
    if (nowPlaying.getAlbumArt() != null) {
      Glide.with(nowPlayingArtistImage.getContext()).load(HelperMethods.bitmapToByte(nowPlaying.getAlbumArt())).asBitmap().into(nowPlayingArtistImage);
    }
 else {
      Glide.with(nowPlayingArtistImage.getContext()).load(getResources().getIdentifier(""String_Node_Str"",""String_Node_Str"",this.getContext().getPackageName())).into(nowPlayingArtistImage);
    }
    nowPlayingArtist.setText(nowPlaying.getArtistName());
    nowPlayingTitle.setText(nowPlaying.getTrackName());
    nowPlayingAlbum.setText(nowPlaying.getAlbumName());
  }
  nowPlayingFragmentPresenter.loadRecentScrobbles(recentTracks);
  return view;
}"
40427,"@Override public void onError(Throwable e){
  Log.d(NowPlayingFragmentPresenter.class.getSimpleName(),e.getMessage());
}","@Override public void onError(Throwable e){
  Log.d(TAG,e.getMessage());
}"
40428,"@Override public void onNext(Response response){
  Toast.makeText(nowPlayingFragment.getContext(),R.string.track_loved,Toast.LENGTH_SHORT).show();
}","@Override public void onNext(RecentTracksWrapper recentTracksWrapper){
  List<Track> result=recentTracksWrapper.getRecenttracks().getTrack();
  String[] trackNames=new String[result.size()];
  for (int i=0; i < result.size(); i++) {
    trackNames[i]=result.get(i).toString();
  }
  ArrayAdapter<String> arrayAdapter=new ArrayAdapter<>(nowPlayingFragment.getContext(),android.R.layout.simple_list_item_1,trackNames);
  listView.setAdapter(arrayAdapter);
}"
40429,"@Override public void onBindViewHolder(AbstractViewHolder holder,int position){
  if (artistList.isEmpty()) {
    return;
  }
  Artist artist=artistList.get(position);
  holder.getTitle().setText(artist.getName().toLowerCase());
  holder.getCount().setText(Constants.formatNumberWithSeperator(artist.getListeners()) + ""String_Node_Str"");
  Glide.with(mainActivity).load(artist.getImage().get(Constants.IMAGE_LARGE).getText()).into(holder.getThumbnail());
  ((ArtistViewHolder)holder).getOverflow().setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      holder.showPopupMenu(mainActivity,((ArtistViewHolder)holder).getOverflow());
    }
  }
);
  this.specificArtistSearchable.addOnArtistResultClickedListener(holder,artist.getName());
}","@Override public void onBindViewHolder(AbstractViewHolder holder,int position){
  if (artistList.isEmpty()) {
    return;
  }
  Artist artist=artistList.get(position);
  holder.getTitle().setText(artist.getName().toLowerCase());
  if (artist.getListeners() != null) {
    holder.getCount().setText(Constants.formatNumberWithSeperator(artist.getListeners()) + ""String_Node_Str"");
  }
  Glide.with(mainActivity).load(artist.getImage().get(Constants.IMAGE_LARGE).getText()).into(holder.getThumbnail());
  ((ArtistViewHolder)holder).getOverflow().setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      holder.showPopupMenu(mainActivity,((ArtistViewHolder)holder).getOverflow());
    }
  }
);
  this.specificArtistSearchable.addOnArtistResultClickedListener(holder,artist.getName());
  this.setIsFavorited(holder,Constants.FAVORITE_ARTISTS_KEY);
}"
40430,"@Override public boolean onMenuItemClick(MenuItem item){
  Set<String> stringSet=App.getSharedPreferences().getStringSet(key,new HashSet<>());
switch (item.getItemId()) {
case (R.id.action_add_favourite):
    stringSet.add(stringValue);
  App.getSharedPreferences().edit().putStringSet(key,stringSet).apply();
viewHolder.setIsFavorited(true);
return true;
case (R.id.action_remove_favorite):
stringSet.remove(stringValue);
App.getSharedPreferences().edit().putStringSet(key,stringSet).apply();
viewHolder.setIsFavorited(false);
return true;
default :
break;
}
return false;
}","@Override public boolean onMenuItemClick(MenuItem item){
  Set<String> stringSet=App.getSharedPreferences().getStringSet(key,new HashSet<>());
switch (item.getItemId()) {
case (R.id.action_add_favourite):
    stringSet.add(stringValue);
  App.getSharedPreferences().edit().putStringSet(key,stringSet).apply();
viewHolder.setIsFavorited(true);
return true;
case (R.id.action_remove_favorite):
Iterator<String> it=stringSet.iterator();
while (it.hasNext()) {
String entry=it.next();
if (entry.equals(stringValue)) {
it.remove();
break;
}
}
App.getSharedPreferences().edit().putStringSet(key,stringSet).apply();
viewHolder.setIsFavorited(false);
return true;
default :
break;
}
return false;
}"
40431,"private void initRecyclerView(){
  RecyclerView.LayoutManager layoutManager=null;
  if (Constants.isTablet(mainActivity)) {
    layoutManager=new GridLayoutManager(mainActivity,3);
    recyclerView.addItemDecoration(new FavoriteArtistFragment.GridSpacingItemDecoration(3,Constants.dpToPx(10,mainActivity),true));
  }
 else {
    layoutManager=new GridLayoutManager(mainActivity,2);
    recyclerView.addItemDecoration(new FavoriteArtistFragment.GridSpacingItemDecoration(2,Constants.dpToPx(10,mainActivity),true));
  }
  if (layoutManager == null) {
    return;
  }
  recyclerView.setItemAnimator(new DefaultItemAnimator());
  recyclerView.setLayoutManager(layoutManager);
}","private void initRecyclerView(){
  RecyclerView.LayoutManager layoutManager=null;
  if (Constants.isTablet(mainActivity)) {
    layoutManager=new GridLayoutManager(mainActivity,3);
    recyclerView.addItemDecoration(new FavoriteArtistFragment.GridSpacingItemDecoration(3,Constants.dpToPx(10,mainActivity),true));
  }
 else {
    layoutManager=new GridLayoutManager(mainActivity,2);
    recyclerView.addItemDecoration(new FavoriteArtistFragment.GridSpacingItemDecoration(2,Constants.dpToPx(10,mainActivity),true));
  }
  if (layoutManager == null) {
    return;
  }
  recyclerView.setItemAnimator(new DefaultItemAnimator());
  recyclerView.setLayoutManager(layoutManager);
  recyclerView.setAdapter(new ArtistAdapter(mainActivity,new ArrayList<>(),favoriteFragmentPresenter));
}"
40432,"@Nullable @Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.artist_search_fragment,container,false);
  ButterKnife.bind(this,view);
  setHasOptionsMenu(true);
  initRecyclerView();
  this.favoriteFragmentPresenter.takeView(this);
  return view;
}","@Nullable @Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.artist_search_fragment,container,false);
  ButterKnife.bind(this,view);
  setHasOptionsMenu(true);
  initRecyclerView();
  this.favoriteFragmentPresenter.takeView(this);
  this.favoriteFragmentPresenter.loadFavoriteArtists(App.getSharedPreferences().getStringSet(Constants.FAVORITE_ARTISTS_KEY,new HashSet<>()),mainActivity,recyclerView);
  return view;
}"
40433,void loadFavoriteArtists(Set<String> favorites);,"void loadFavoriteArtists(Set<String> favorites,MainViewFunctionable mainViewFunctionable,RecyclerView recyclerView);"
40434,"@Override public void addOnArtistResultClickedListener(ClickableArtistViewHolder viewHolder,String artistName){
  RxView.clicks(viewHolder.getThumbnail()).debounce(500,TimeUnit.MILLISECONDS).observeOn(AndroidSchedulers.mainThread()).subscribe(click -> {
    this.showArtistDetailsIntent(artistName,mainActivity);
  }
);
}","@Override public void addOnArtistResultClickedListener(ClickableArtistViewHolder viewHolder,String artistName){
  RxView.clicks(viewHolder.getThumbnail()).debounce(DELAY_IN_MILLIS,TimeUnit.MILLISECONDS).observeOn(AndroidSchedulers.mainThread()).subscribe(click -> {
    this.showArtistDetailsIntent(artistName,mainActivity);
  }
);
}"
40435,"@Override public void loadFavoriteArtists(Set<String> favorites){
}","@Override public void loadFavoriteArtists(Set<String> favorites,MainViewFunctionable mainViewFunctionable,RecyclerView recyclerView){
  recyclerView.setAdapter(new ArtistAdapter((Context)this.mainActivity,new ArrayList<>(),FavoriteArtistsFragmentPresenter.this));
  List<Observable<SpecificArtist>> observables=new ArrayList<>();
  for (  String favorite : favorites) {
    observables.add(lastFmApiClient.getLastFmApiService().getSpecificArtistInfo(favorite).subscribeOn(Schedulers.io()));
  }
  Observable.zip(observables,objects -> {
    List<Artist> result=new ArrayList<>();
    for (    Object object : objects) {
      result.add(((SpecificArtist)object).getArtist());
    }
    return result;
  }
).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<List<Artist>>(){
    @Override public void onSubscribe(    Disposable d){
      mainActivity.showProgressBar();
      compositeDisposable.add(d);
    }
    @Override public void onNext(    List<Artist> generalArtistSearch){
      for (      Artist artistSearch : generalArtistSearch) {
        ((ArtistAdapter)recyclerView.getAdapter()).addArtist(artistSearch);
      }
      recyclerView.getAdapter().notifyDataSetChanged();
    }
    @Override public void onError(    Throwable e){
      Log.e(this.getClass().getSimpleName(),e.getMessage());
    }
    @Override public void onComplete(){
      mainActivity.hideProgressBar();
      compositeDisposable.clear();
    }
  }
);
}"
40436,"private void showAlbumDetails(Album album){
  CoordinatorLayout mainLayout=(CoordinatorLayout)artistDetailsActivity.findViewById(R.id.detail_content);
  LayoutInflater inflater=LayoutInflater.from(artistDetailsActivity);
  View albumDetails=inflater.inflate(R.layout.album_popup_info,null);
  TextView tracks=albumDetails.findViewById(R.id.album_popup_tracks);
  TextView title=albumDetails.findViewById(R.id.album_popup_title);
  ImageView cover=albumDetails.findViewById(R.id.album_popup_thumbnail);
  StringBuilder sb=new StringBuilder();
  for (  Track track : album.getTracks().getTrack()) {
    sb.append(String.format(""String_Node_Str"",track.getName(),track.getDuration()));
  }
  tracks.setText(sb.toString());
  title.setText(album.getName());
  Glide.with(artistDetailsActivity).load(album.getImage().get(Constants.IMAGE_LARGE).getText()).into(cover);
  int width=LinearLayout.LayoutParams.WRAP_CONTENT;
  int height=LinearLayout.LayoutParams.WRAP_CONTENT;
  boolean focusable=true;
  final PopupWindow popupWindow=new PopupWindow(albumDetails,width,height,focusable);
  popupWindow.setAnimationStyle(android.R.style.Animation_Dialog);
  popupWindow.showAtLocation(mainLayout,Gravity.CENTER,0,0);
  albumDetails.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View view,    MotionEvent motionEvent){
      popupWindow.dismiss();
      return true;
    }
  }
);
}","private void showAlbumDetails(Album album){
  CoordinatorLayout mainLayout=(CoordinatorLayout)artistDetailsActivity.findViewById(R.id.detail_content);
  LayoutInflater inflater=LayoutInflater.from(artistDetailsActivity);
  View albumDetails=inflater.inflate(R.layout.album_popup_info,null);
  TextView tracks=albumDetails.findViewById(R.id.album_popup_tracks);
  TextView title=albumDetails.findViewById(R.id.album_popup_title);
  ImageView cover=albumDetails.findViewById(R.id.album_popup_thumbnail);
  StringBuilder sb=new StringBuilder();
  for (  Track track : album.getTracks().getTrack()) {
    long millis=Long.parseLong(track.getDuration());
    String duration=String.format(""String_Node_Str"",TimeUnit.SECONDS.toMinutes(millis),TimeUnit.SECONDS.toSeconds(millis) - TimeUnit.MINUTES.toSeconds(TimeUnit.SECONDS.toMinutes(millis)));
    sb.append(String.format(""String_Node_Str"",track.getName(),duration));
  }
  tracks.setText(sb.toString());
  title.setText(album.getName());
  Glide.with(artistDetailsActivity).load(album.getImage().get(Constants.IMAGE_LARGE).getText()).into(cover);
  int width=LinearLayout.LayoutParams.WRAP_CONTENT;
  int height=LinearLayout.LayoutParams.WRAP_CONTENT;
  boolean focusable=true;
  final PopupWindow popupWindow=new PopupWindow(albumDetails,width,height,focusable);
  popupWindow.setAnimationStyle(android.R.style.Animation_Dialog);
  popupWindow.showAtLocation(mainLayout,Gravity.CENTER,0,0);
  albumDetails.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View view,    MotionEvent motionEvent){
      popupWindow.dismiss();
      return true;
    }
  }
);
}"
40437,"@Override public void setClickListenerFetchEntireAlbumInfo(Album album,ArtistDetailsAlbumAdapter.MyViewHolder myViewHolder){
  final Album[] loadedAlbum=new Album[1];
  RxView.clicks(myViewHolder.thumbnail).debounce(DELAY_IN_MILLIS,TimeUnit.MILLISECONDS).observeOn(AndroidSchedulers.mainThread()).subscribe(click -> {
    lastFmApiClient.getLastFmApiService().searchForSpecificAlbum(album.getName(),((Artist)album.getArtist()).getName()).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).map(specificAlbum -> specificAlbum).subscribe(new Observer<SpecificAlbum>(){
      @Override public void onSubscribe(      Disposable d){
        artistDetailsActivity.showProgressBar();
        Constants.showTooltip(artistDetailsActivity,artistDetailsActivity.getBirdIcon(),FETCHING_ALBUM_TOOLTIP);
      }
      @Override public void onNext(      SpecificAlbum specificAlbum){
        Album fullAlbum=specificAlbum.getAlbum();
        loadedAlbum[0]=fullAlbum;
      }
      @Override public void onError(      Throwable e){
        Log.e(this.getClass().toString(),e.getMessage());
      }
      @Override public void onComplete(){
        artistDetailsActivity.hideProgressbar();
        showAlbumDetails(loadedAlbum[0]);
      }
    }
);
  }
);
}","@Override public void setClickListenerFetchEntireAlbumInfo(Album album,ArtistDetailsAlbumAdapter.MyViewHolder myViewHolder){
  final Album[] loadedAlbum=new Album[1];
  RxView.clicks(myViewHolder.thumbnail).debounce(DELAY_IN_MILLIS,TimeUnit.MILLISECONDS).observeOn(AndroidSchedulers.mainThread()).subscribe(click -> {
    lastFmApiClient.getLastFmApiService().searchForSpecificAlbum(((Artist)album.getArtist()).getName(),album.getName()).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).map(specificAlbum -> specificAlbum).subscribe(new Observer<SpecificAlbum>(){
      @Override public void onSubscribe(      Disposable d){
        artistDetailsActivity.showProgressBar();
        Constants.showTooltip(artistDetailsActivity,artistDetailsActivity.getBirdIcon(),FETCHING_ALBUM_TOOLTIP);
      }
      @Override public void onNext(      SpecificAlbum specificAlbum){
        Album fullAlbum=specificAlbum.getAlbum();
        loadedAlbum[0]=fullAlbum;
      }
      @Override public void onError(      Throwable e){
        Log.e(this.getClass().toString(),e.getMessage());
      }
      @Override public void onComplete(){
        artistDetailsActivity.hideProgressbar();
        showAlbumDetails(loadedAlbum[0]);
      }
    }
);
  }
);
}"
40438,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_image_detail);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  ImageView imageView=findViewById(R.id.imv);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    imageView.setTransitionName(TRANSITION_NAME_IMAGE);
  }
  GlideLoader loader=new TransitionGlideLoader(this);
  loader.loadImage(URL,imageView);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_image_detail);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  ImageView imageView=findViewById(R.id.imv);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    imageView.setTransitionName(TRANSITION_NAME_IMAGE);
  }
}"
40439,"@Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position){
  int type=holder.getItemViewType();
  if (type == TYPE_HEADER) {
    View v=headers.get(position);
    bindHeaderFooter((HeaderFooterViewHolder)holder,v);
  }
 else   if (type == TYPE_FOOTER) {
    View v=footers.get(position - headers.size() - getItemCountExceptHeaderFooter());
    bindHeaderFooter((HeaderFooterViewHolder)holder,v);
  }
}","@Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position){
  int type=holder.getItemViewType();
  if (type == TYPE_HEADER) {
    View v=headers.get(position);
    bindHeaderFooter((HeaderFooterViewHolder)holder,v);
  }
 else   if (type == TYPE_FOOTER) {
    View v=footers.get(position - headers.size() - getItemCountExceptHeaderFooter());
    bindHeaderFooter((HeaderFooterViewHolder)holder,v);
  }
 else {
    bindHolder(holder,position);
  }
}"
40440,"@Override public void onCompleted(boolean success){
  if (listener != null) {
    listener.onCompleted(success);
  }
  if (!success) {
    TransitionGlideLoader.super.loadImage(source,imageView);
  }
}","@Override public void onCompleted(boolean success){
  if (success && listener != null) {
    listener.onCompleted(true);
  }
  if (!success) {
    createThumbnail(source).listener(listener).into(imageView);
  }
}"
40441,"/** 
 * Support better for loading image at detail page Firstly, we load the image from cache only, if image is'nt cached, perform normal loading with thumbnail place holder
 * @param source image source
 * @param imageView destination image view
 * @param listener complete listener
 */
@Override public <T>void loadImage(T source,ImageView imageView,GlideOnCompleteListener<T,GlideDrawable> listener){
  GlideUtils.createFullNoNetworkRequestBuilder(mRequestManager,source).listener(new GlideOnCompleteListener<T,GlideDrawable>(){
    @Override public void onCompleted(    boolean success){
      if (listener != null) {
        listener.onCompleted(success);
      }
      if (!success) {
        TransitionGlideLoader.super.loadImage(source,imageView);
      }
    }
  }
).into(imageView);
}","/** 
 * Support better for loading image at detail page Firstly, we load the image from cache only, if image is'nt cached, perform normal loading with thumbnail place holder
 * @param source image source
 * @param imageView destination image view
 * @param listener complete listener
 */
@Override public <T>void loadImage(T source,ImageView imageView,GlideOnCompleteListener<T,GlideDrawable> listener){
  GlideUtils.createFullNoNetworkRequestBuilder(mRequestManager,source).listener(new GlideOnCompleteListener<T,GlideDrawable>(){
    @Override public void onCompleted(    boolean success){
      if (success && listener != null) {
        listener.onCompleted(true);
      }
      if (!success) {
        createThumbnail(source).listener(listener).into(imageView);
      }
    }
  }
).into(imageView);
}"
40442,"private void sendPrivateMessage(User user,String content){
  user.openPrivateChannel().queue((channel) -> {
    try {
      channel.sendMessage(content).queue();
    }
 catch (    Throwable t) {
      LOGGER.warn(""String_Node_Str"" + this + ""String_Node_Str""+ t.getMessage());
    }
  }
);
}","private void sendPrivateMessage(User user,String content){
  user.openPrivateChannel().queue((channel) -> {
    try {
      channel.sendMessage(content).queue(m -> {
      }
,m -> {
        LOGGER.warn(""String_Node_Str"" + this + ""String_Node_Str""+ m.getMessage());
      }
);
    }
 catch (    Throwable t) {
      LOGGER.warn(""String_Node_Str"" + this + ""String_Node_Str""+ t.getMessage());
    }
  }
);
}"
40443,"@Override public boolean canHandle(Config config,User user,Raid raid){
  if (user.isBot()) {
    return false;
  }
  if (user.getId().equals(userId)) {
    return false;
  }
  boolean raidIsForPokemon=StringUtils.containsIgnoreCase(raid.getPokemon().getName(),pokemon.getName());
  return raidIsForPokemon;
}","@Override public boolean canHandle(Config config,User user,Raid raid){
  if (config == null || user == null || raid == null) {
    LOGGER.debug(""String_Node_Str"" + config + ""String_Node_Str""+ (user == null ? ""String_Node_Str"" : user.getName())+ ""String_Node_Str""+ raid);
    return false;
  }
  if (!config.useBotIntegration() && user.isBot()) {
    return false;
  }
  if (user.getId().equals(userId)) {
    return false;
  }
  boolean raidIsForPokemon=StringUtils.containsIgnoreCase(raid.getPokemon().getName(),pokemon.getName());
  return raidIsForPokemon;
}"
40444,"private void sendFeedbackThenCleanUp(Raid createdRaid,MessageChannel channel,MessageEmbed messageEmbed){
  LOGGER.info(""String_Node_Str"" + createdRaid);
  try {
    channel.sendMessage(messageEmbed).queue(m -> {
      try {
        channel.deleteMessageById(m.getId()).queueAfter(BotServerMain.timeToRemoveFeedbackInSeconds,TimeUnit.SECONDS);
      }
 catch (      Throwable t) {
        LOGGER.warn(""String_Node_Str"" + t.getMessage());
      }
    }
);
  }
 catch (  Throwable t) {
    LOGGER.debug(""String_Node_Str"" + t.getMessage());
  }
}","private void sendFeedbackThenCleanUp(Raid createdRaid,MessageChannel channel,MessageEmbed messageEmbed){
  LOGGER.info(""String_Node_Str"" + createdRaid.getRegion() + ""String_Node_Str""+ createdRaid);
  try {
    channel.sendMessage(messageEmbed).queue(m -> {
      try {
        channel.deleteMessageById(m.getId()).queueAfter(BotServerMain.timeToRemoveFeedbackInSeconds,TimeUnit.SECONDS);
      }
 catch (      Throwable t) {
        LOGGER.warn(""String_Node_Str"" + t.getMessage());
      }
    }
);
  }
 catch (  Throwable t) {
    LOGGER.debug(""String_Node_Str"" + t.getMessage());
  }
}"
40445,"public BotService(LocaleService localeService,GymRepository gymRepository,RaidRepository raidRepository,PokemonRepository pokemonRepository,PokemonRaidStrategyService raidInfoService,ServerConfigRepository serverConfigRepository,UserConfigRepository userConfigRepository,ExecutorService executorService,ClockService clockService,TrackingService trackingService,String ownerId,String token){
  this.gymRepository=gymRepository;
  this.serverConfigRepository=serverConfigRepository;
  this.userConfigRepository=userConfigRepository;
  this.trackingService=trackingService;
  this.ownerId=ownerId;
  this.token=token;
  if (!System.getProperty(""String_Node_Str"").equals(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"");
    System.exit(-1);
  }
  initializeConfig();
  EventWaiter waiter=new EventWaiter();
  EventLoggingListener eventLoggingListener=new EventLoggingListener();
  GymHuntrRaidEventListener gymHuntrRaidEventListener=new GymHuntrRaidEventListener(serverConfigRepository,raidRepository,gymRepository,pokemonRepository,localeService,executorService,clockService,this,raidInfoService);
  StartUpEventListener startUpEventListener=new StartUpEventListener(serverConfigRepository,raidRepository,localeService,clockService,executorService,this,gymRepository,pokemonRepository,raidInfoService);
  SignupWithPlusCommandListener plusCommandEventListener=new SignupWithPlusCommandListener(raidRepository,pokemonRepository,serverConfigRepository,this,localeService);
  UnsignWithMinusCommandListener minusCommandEventListener=new UnsignWithMinusCommandListener(raidRepository,pokemonRepository,serverConfigRepository,this,localeService);
  aggregateCommandListener=new AggregateCommandListener(Arrays.asList());
  CommandClientBuilder client=new CommandClientBuilder();
  client.setOwnerId(this.ownerId);
  client.setEmojis(Emotes.OK,""String_Node_Str"",Emotes.ERROR);
  client.setPrefix(""String_Node_Str"");
  client.setAlternativePrefix(""String_Node_Str"");
  client.setGame(Game.of(""String_Node_Str""));
  client.addCommands(new WhatsNewCommand(serverConfigRepository,aggregateCommandListener,localeService),new HelpManualCommand(localeService,serverConfigRepository,aggregateCommandListener),new AboutCommand(Color.BLUE,localeService.getMessageFor(LocaleService.AT_YOUR_SERVICE,LocaleService.DEFAULT),new String[]{LocaleService.featuresString_SV},Permission.ADMINISTRATOR),new PingCommand(),new UsageCommand(localeService,serverConfigRepository,aggregateCommandListener),new GettingStartedCommand(localeService,serverConfigRepository,aggregateCommandListener),new AdminCommands(userConfigRepository,serverConfigRepository,gymRepository,this,trackingService),new NewRaidCommand(gymRepository,raidRepository,pokemonRepository,localeService,serverConfigRepository,aggregateCommandListener),new NewRaidStartsAtCommand(gymRepository,raidRepository,pokemonRepository,localeService,serverConfigRepository,aggregateCommandListener),new NewRaidExCommand(gymRepository,raidRepository,pokemonRepository,localeService,serverConfigRepository,aggregateCommandListener),new UserConfigCommand(serverConfigRepository,aggregateCommandListener,localeService,userConfigRepository),new RaidStatusCommand(gymRepository,raidRepository,localeService,serverConfigRepository,this,aggregateCommandListener,pokemonRepository),new RaidListCommand(raidRepository,localeService,serverConfigRepository,pokemonRepository,aggregateCommandListener),new SignUpCommand(gymRepository,raidRepository,localeService,serverConfigRepository,aggregateCommandListener),new WhereIsGymCommand(gymRepository,localeService,serverConfigRepository,aggregateCommandListener),new WhereIsGymInChatCommand(gymRepository,localeService,serverConfigRepository,aggregateCommandListener),new RemoveSignUpCommand(gymRepository,raidRepository,localeService,serverConfigRepository,aggregateCommandListener),new PokemonVsCommand(pokemonRepository,raidInfoService,localeService,serverConfigRepository,aggregateCommandListener),new ServerInfoCommand(serverConfigRepository,localeService,aggregateCommandListener,clockService),new DonateCommand(localeService,serverConfigRepository,aggregateCommandListener),new TrackPokemonCommand(serverConfigRepository,localeService,pokemonRepository,trackingService,aggregateCommandListener),new UnTrackPokemonCommand(serverConfigRepository,localeService,pokemonRepository,aggregateCommandListener,trackingService),new InstallCommand(serverConfigRepository,gymRepository),new InstallEmotesCommand(localeService),new AlterRaidCommand(gymRepository,raidRepository,pokemonRepository,localeService,serverConfigRepository,aggregateCommandListener,this),new NewRaidGroupCommand(gymRepository,raidRepository,pokemonRepository,localeService,serverConfigRepository,aggregateCommandListener,this,clockService,executorService,raidInfoService),new EggHatchedCommand(gymRepository,raidRepository,pokemonRepository,localeService,serverConfigRepository,aggregateCommandListener,this,raidInfoService),new RaidOverviewCommand(raidRepository,localeService,serverConfigRepository,pokemonRepository,aggregateCommandListener,clockService,executorService));
  try {
    commandClient=client.build();
    botInstance=new JDABuilder(AccountType.BOT).setToken(this.token).setStatus(OnlineStatus.DO_NOT_DISTURB).setGame(Game.of(""String_Node_Str"")).addEventListener(waiter).addEventListener(commandClient).addEventListener(startUpEventListener).addEventListener(plusCommandEventListener).addEventListener(minusCommandEventListener).addEventListener(gymHuntrRaidEventListener).buildBlocking();
    for (    EventListener extraListener : extraListeners) {
      botInstance.addEventListener(extraListener);
      LOGGER.info(""String_Node_Str"" + extraListener);
    }
  }
 catch (  LoginException|RateLimitedException|InterruptedException e) {
    throw new RuntimeException(e);
  }
}","public BotService(LocaleService localeService,GymRepository gymRepository,RaidRepository raidRepository,PokemonRepository pokemonRepository,PokemonRaidStrategyService raidInfoService,ServerConfigRepository serverConfigRepository,UserConfigRepository userConfigRepository,ExecutorService executorService,ClockService clockService,TrackingService trackingService,String ownerId,String token){
  this.gymRepository=gymRepository;
  this.serverConfigRepository=serverConfigRepository;
  this.userConfigRepository=userConfigRepository;
  this.trackingService=trackingService;
  this.ownerId=ownerId;
  this.token=token;
  if (!System.getProperty(""String_Node_Str"").equals(""String_Node_Str"")) {
    System.err.println(""String_Node_Str"");
    System.exit(-1);
  }
  initializeConfig();
  EventWaiter waiter=new EventWaiter();
  EventLoggingListener eventLoggingListener=new EventLoggingListener();
  GymHuntrRaidEventListener gymHuntrRaidEventListener=new GymHuntrRaidEventListener(serverConfigRepository,raidRepository,gymRepository,pokemonRepository,localeService,executorService,clockService,this,raidInfoService);
  StartUpEventListener startUpEventListener=new StartUpEventListener(serverConfigRepository,raidRepository,localeService,clockService,executorService,this,gymRepository,pokemonRepository,raidInfoService);
  SignupWithPlusCommandListener plusCommandEventListener=new SignupWithPlusCommandListener(raidRepository,pokemonRepository,serverConfigRepository,this,localeService);
  UnsignWithMinusCommandListener minusCommandEventListener=new UnsignWithMinusCommandListener(raidRepository,pokemonRepository,serverConfigRepository,this,localeService);
  aggregateCommandListener=new AggregateCommandListener(Arrays.asList());
  CommandClientBuilder client=new CommandClientBuilder();
  client.setOwnerId(this.ownerId);
  client.setEmojis(Emotes.OK,""String_Node_Str"",Emotes.ERROR);
  client.setPrefix(""String_Node_Str"");
  client.setAlternativePrefix(""String_Node_Str"");
  client.setGame(Game.of(""String_Node_Str""));
  client.addCommands(new WhatsNewCommand(serverConfigRepository,aggregateCommandListener,localeService),new HelpManualCommand(localeService,serverConfigRepository,aggregateCommandListener),new AboutCommand(Color.BLUE,localeService.getMessageFor(LocaleService.AT_YOUR_SERVICE,LocaleService.DEFAULT),new String[]{LocaleService.featuresString_SV},Permission.ADMINISTRATOR),new PingCommand(),new UsageCommand(localeService,serverConfigRepository,aggregateCommandListener),new GettingStartedCommand(localeService,serverConfigRepository,aggregateCommandListener),new AdminCommands(userConfigRepository,serverConfigRepository,gymRepository,this,trackingService,localeService,pokemonRepository,raidRepository),new NewRaidCommand(gymRepository,raidRepository,pokemonRepository,localeService,serverConfigRepository,aggregateCommandListener),new NewRaidStartsAtCommand(gymRepository,raidRepository,pokemonRepository,localeService,serverConfigRepository,aggregateCommandListener),new NewRaidExCommand(gymRepository,raidRepository,pokemonRepository,localeService,serverConfigRepository,aggregateCommandListener),new UserConfigCommand(serverConfigRepository,aggregateCommandListener,localeService,userConfigRepository),new RaidStatusCommand(gymRepository,raidRepository,localeService,serverConfigRepository,this,aggregateCommandListener,pokemonRepository),new RaidListCommand(raidRepository,localeService,serverConfigRepository,pokemonRepository,aggregateCommandListener),new SignUpCommand(gymRepository,raidRepository,localeService,serverConfigRepository,aggregateCommandListener),new WhereIsGymCommand(gymRepository,localeService,serverConfigRepository,aggregateCommandListener),new WhereIsGymInChatCommand(gymRepository,localeService,serverConfigRepository,aggregateCommandListener),new RemoveSignUpCommand(gymRepository,raidRepository,localeService,serverConfigRepository,aggregateCommandListener),new PokemonVsCommand(pokemonRepository,raidInfoService,localeService,serverConfigRepository,aggregateCommandListener),new ServerInfoCommand(serverConfigRepository,localeService,aggregateCommandListener,clockService),new DonateCommand(localeService,serverConfigRepository,aggregateCommandListener),new TrackPokemonCommand(serverConfigRepository,localeService,pokemonRepository,trackingService,aggregateCommandListener),new UnTrackPokemonCommand(serverConfigRepository,localeService,pokemonRepository,aggregateCommandListener,trackingService),new InstallCommand(serverConfigRepository,gymRepository),new InstallEmotesCommand(localeService),new AlterRaidCommand(gymRepository,raidRepository,pokemonRepository,localeService,serverConfigRepository,aggregateCommandListener,this),new NewRaidGroupCommand(gymRepository,raidRepository,pokemonRepository,localeService,serverConfigRepository,aggregateCommandListener,this,clockService,executorService,raidInfoService),new EggHatchedCommand(gymRepository,raidRepository,pokemonRepository,localeService,serverConfigRepository,aggregateCommandListener,this,raidInfoService),new RaidOverviewCommand(raidRepository,localeService,serverConfigRepository,pokemonRepository,aggregateCommandListener,clockService,executorService));
  try {
    commandClient=client.build();
    botInstance=new JDABuilder(AccountType.BOT).setToken(this.token).setStatus(OnlineStatus.DO_NOT_DISTURB).setGame(Game.of(""String_Node_Str"")).addEventListener(waiter).addEventListener(commandClient).addEventListener(startUpEventListener).addEventListener(plusCommandEventListener).addEventListener(minusCommandEventListener).addEventListener(gymHuntrRaidEventListener).buildBlocking();
    for (    EventListener extraListener : extraListeners) {
      botInstance.addEventListener(extraListener);
      LOGGER.info(""String_Node_Str"" + extraListener);
    }
  }
 catch (  LoginException|RateLimitedException|InterruptedException e) {
    throw new RuntimeException(e);
  }
}"
40446,"public AdminCommands(UserConfigRepository userConfigRepository,ServerConfigRepository serverConfigRepository,GymRepository gymRepository,BotService botService,TrackingService trackingCommandListener){
  this.userConfigRepository=userConfigRepository;
  this.serverConfigRepository=serverConfigRepository;
  this.gymRepository=gymRepository;
  this.botService=botService;
  this.trackingCommandListener=trackingCommandListener;
  this.guildOnly=false;
  this.name=""String_Node_Str"";
  this.help=""String_Node_Str"";
}","public AdminCommands(UserConfigRepository userConfigRepository,ServerConfigRepository serverConfigRepository,GymRepository gymRepository,BotService botService,TrackingService trackingCommandListener,LocaleService localeService,PokemonRepository pokemonRepository,RaidRepository raidRepository){
  this.userConfigRepository=userConfigRepository;
  this.serverConfigRepository=serverConfigRepository;
  this.gymRepository=gymRepository;
  this.botService=botService;
  this.trackingCommandListener=trackingCommandListener;
  this.localeService=localeService;
  this.pokemonRepository=pokemonRepository;
  this.raidRepository=raidRepository;
  this.guildOnly=false;
  this.name=""String_Node_Str"";
  this.help=""String_Node_Str"";
}"
40447,"@Override protected void execute(CommandEvent event){
  final User author=event.getAuthor();
  if (author == null || author.getId() == null || (!author.getId().equals(BotServerMain.BOT_CREATOR_USERID))) {
    event.replyInDM(""String_Node_Str"" + String.valueOf(author.getId()));
    return;
  }
 else {
    if (event.getArgs().startsWith(""String_Node_Str"")) {
      String userId=event.getArgs().replaceAll(""String_Node_Str"",""String_Node_Str"");
      final UserConfig userConfig=userConfigRepository.findOne(userId);
      if (userConfig == null) {
        event.replyInDM(""String_Node_Str"" + userId);
        return;
      }
 else {
        userConfigRepository.delete(userConfig);
        event.replyInDM(""String_Node_Str"" + userId);
        return;
      }
    }
 else     if (event.getArgs().startsWith(""String_Node_Str"")) {
      final JDA bot=botService.getBot();
      final List<Guild> guilds=bot.getGuilds();
      StringBuilder sb=new StringBuilder();
      sb.append(""String_Node_Str"");
      for (      Guild guild : guilds) {
        final Member member=guild.getMember(bot.getSelfUser());
        if (member == null) {
          event.replyInDM(""String_Node_Str"");
          return;
        }
        sb.append(""String_Node_Str"").append(guild.getName()).append(""String_Node_Str"");
        for (        Permission p : member.getPermissions()) {
          sb.append(p.getName()).append(""String_Node_Str"").append(p.isGuild()).append(""String_Node_Str"").append(p.isChannel()).append(""String_Node_Str"");
        }
        sb.append(""String_Node_Str"");
      }
      event.replyInDM(sb.toString());
      return;
    }
 else     if (event.getArgs().startsWith(""String_Node_Str"")) {
      trackingCommandListener.clearCache();
      event.replyInDM(""String_Node_Str"");
      return;
    }
 else     if (event.getArgs().startsWith(""String_Node_Str"")) {
      final JDA bot=botService.getBot();
      final List<Guild> guilds=bot.getGuilds();
      StringBuilder sb=new StringBuilder();
      for (      Guild guild : guilds) {
        try {
          guild.getDefaultChannel().sendMessage(event.getArgs().replaceAll(""String_Node_Str"",""String_Node_Str"")).queue();
          sb.append(""String_Node_Str"").append(guild.getName()).append(""String_Node_Str"");
        }
 catch (        Throwable t) {
          sb.append(""String_Node_Str"").append(guild.getName()).append(""String_Node_Str"").append(t.getMessage()).append(""String_Node_Str"");
        }
      }
      event.replyInDM(sb.toString());
      return;
    }
 else     if (event.getArgs().startsWith(""String_Node_Str"")) {
      String userIdAndGuildName=event.getArgs().replaceAll(""String_Node_Str"",""String_Node_Str"");
      String[] args=userIdAndGuildName.split(""String_Node_Str"");
      if (args.length < 2) {
        event.reply(""String_Node_Str"");
        return;
      }
 else {
        final JDA bot=botService.getBot();
        Guild guild=null;
        final List<Guild> guilds=bot.getGuilds();
        String guildName=StringUtils.join(ArrayUtils.remove(args,0),""String_Node_Str"");
        for (        Guild guildToCheck : guilds) {
          if (guildToCheck.getName().equalsIgnoreCase(guildName)) {
            guild=guildToCheck;
          }
        }
        if (guild != null) {
          final Member memberById=guild.getMemberById(args[0]);
          if (memberById != null) {
            event.reply(""String_Node_Str"" + guild.getName());
          }
 else {
            event.reply(""String_Node_Str"" + guild.getName());
          }
        }
 else {
          event.reply(""String_Node_Str"");
        }
        return;
      }
    }
 else     if (event.getArgs().startsWith(""String_Node_Str"")) {
      String userIdAndGuildName=event.getArgs().replaceAll(""String_Node_Str"",""String_Node_Str"");
      String[] args=userIdAndGuildName.split(""String_Node_Str"");
      if (args.length < 1 || args.length > 2) {
        event.reply(""String_Node_Str"");
        return;
      }
 else {
        final JDA bot=botService.getBot();
        final List<Guild> guilds=bot.getGuilds();
        for (        Guild guild : guilds) {
          final Member memberById=guild.getMemberById(args[0]);
          if (memberById != null) {
            event.reply(""String_Node_Str"" + guild.getName());
          }
 else {
            event.reply(""String_Node_Str"" + guild.getName());
          }
        }
        return;
      }
    }
 else     if (event.getArgs().startsWith(""String_Node_Str"")) {
      final JDA bot=botService.getBot();
      final List<Guild> guilds=bot.getGuilds();
      StringBuilder sb=new StringBuilder();
      for (      Guild guildToCheck : guilds) {
        sb.append(guildToCheck.getName().toLowerCase()).append(""String_Node_Str"");
      }
      event.reply(sb.toString());
      return;
    }
  }
  event.reply(""String_Node_Str"" + ""String_Node_Str"");
}","@Override protected void execute(CommandEvent event){
  final User user=event.getAuthor();
  if (user == null || user.getId() == null || (!user.getId().equals(BotServerMain.BOT_CREATOR_USERID))) {
    event.replyInDM(""String_Node_Str"" + String.valueOf(user.getId()));
    return;
  }
 else {
    if (event.getArgs().startsWith(""String_Node_Str"")) {
      String userId=event.getArgs().replaceAll(""String_Node_Str"",""String_Node_Str"");
      final UserConfig userConfig=userConfigRepository.findOne(userId);
      if (userConfig == null) {
        event.replyInDM(""String_Node_Str"" + userId);
        return;
      }
 else {
        userConfigRepository.delete(userConfig);
        event.replyInDM(""String_Node_Str"" + userId);
        return;
      }
    }
 else     if (event.getArgs().startsWith(""String_Node_Str"")) {
      final JDA bot=botService.getBot();
      final List<Guild> guilds=bot.getGuilds();
      StringBuilder sb=new StringBuilder();
      sb.append(""String_Node_Str"");
      for (      Guild guild : guilds) {
        final Member member=guild.getMember(bot.getSelfUser());
        if (member == null) {
          event.replyInDM(""String_Node_Str"");
          return;
        }
        sb.append(""String_Node_Str"").append(guild.getName()).append(""String_Node_Str"");
        for (        Permission p : member.getPermissions()) {
          sb.append(p.getName()).append(""String_Node_Str"").append(p.isGuild()).append(""String_Node_Str"").append(p.isChannel()).append(""String_Node_Str"");
        }
        sb.append(""String_Node_Str"");
      }
      event.replyInDM(sb.toString());
      return;
    }
 else     if (event.getArgs().startsWith(""String_Node_Str"")) {
      trackingCommandListener.clearCache();
      event.replyInDM(""String_Node_Str"");
      return;
    }
 else     if (event.getArgs().startsWith(""String_Node_Str"")) {
      final JDA bot=botService.getBot();
      final List<Guild> guilds=bot.getGuilds();
      StringBuilder sb=new StringBuilder();
      for (      Guild guild : guilds) {
        try {
          guild.getDefaultChannel().sendMessage(event.getArgs().replaceAll(""String_Node_Str"",""String_Node_Str"")).queue();
          sb.append(""String_Node_Str"").append(guild.getName()).append(""String_Node_Str"");
        }
 catch (        Throwable t) {
          sb.append(""String_Node_Str"").append(guild.getName()).append(""String_Node_Str"").append(t.getMessage()).append(""String_Node_Str"");
        }
      }
      event.replyInDM(sb.toString());
      return;
    }
 else     if (event.getArgs().startsWith(""String_Node_Str"")) {
      String userIdAndGuildName=event.getArgs().replaceAll(""String_Node_Str"",""String_Node_Str"");
      String[] args=userIdAndGuildName.split(""String_Node_Str"");
      if (args.length < 2) {
        event.reply(""String_Node_Str"");
        return;
      }
 else {
        final JDA bot=botService.getBot();
        Guild guild=null;
        final List<Guild> guilds=bot.getGuilds();
        String guildName=StringUtils.join(ArrayUtils.remove(args,0),""String_Node_Str"");
        for (        Guild guildToCheck : guilds) {
          if (guildToCheck.getName().equalsIgnoreCase(guildName)) {
            guild=guildToCheck;
          }
        }
        if (guild != null) {
          final Member memberById=guild.getMemberById(args[0]);
          if (memberById != null) {
            event.reply(""String_Node_Str"" + guild.getName());
          }
 else {
            event.reply(""String_Node_Str"" + guild.getName());
          }
        }
 else {
          event.reply(""String_Node_Str"");
        }
        return;
      }
    }
 else     if (event.getArgs().startsWith(""String_Node_Str"")) {
      String userIdAndGuildName=event.getArgs().replaceAll(""String_Node_Str"",""String_Node_Str"");
      String[] args=userIdAndGuildName.split(""String_Node_Str"");
      if (args.length < 1 || args.length > 2) {
        event.reply(""String_Node_Str"");
        return;
      }
 else {
        final JDA bot=botService.getBot();
        final List<Guild> guilds=bot.getGuilds();
        for (        Guild guild : guilds) {
          final Member memberById=guild.getMemberById(args[0]);
          if (memberById != null) {
            event.reply(""String_Node_Str"" + guild.getName());
          }
 else {
            event.reply(""String_Node_Str"" + guild.getName());
          }
        }
        return;
      }
    }
 else     if (event.getArgs().startsWith(""String_Node_Str"")) {
      final JDA bot=botService.getBot();
      final List<Guild> guilds=bot.getGuilds();
      StringBuilder sb=new StringBuilder();
      for (      Guild guildToCheck : guilds) {
        sb.append(guildToCheck.getName().toLowerCase()).append(""String_Node_Str"");
      }
      event.reply(sb.toString());
      return;
    }
 else     if (event.getArgs().startsWith(""String_Node_Str"")) {
      final Config configForServer=serverConfigRepository.getConfigForServer(event.getGuild().getName().toLowerCase());
      String[] args=event.getArgs().replaceAll(""String_Node_Str"",""String_Node_Str"").trim().split(""String_Node_Str"");
      String pokemon=args[0];
      LocalDateTime startsAt=LocalDateTime.of(LocalDate.now(),Utils.parseTime(user,args[1],localeService));
      String gymName=StringUtils.join(ArrayUtils.removeElements(args,0,1),""String_Node_Str"").trim();
      final String region=configForServer.getRegion();
      Raid raid=new Raid(pokemonRepository.search(pokemon,user),startsAt.plusMinutes(Utils.RAID_DURATION_IN_MINUTES),gymRepository.search(user,gymName,region),localeService,region);
      final Raid createdRaid=raidRepository.newRaid(botService.getBot().getSelfUser(),raid,event.getGuild(),configForServer,event.getMessage().getRawContent());
      event.reply(""String_Node_Str"" + createdRaid);
      return;
    }
  }
  event.reply(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
}"
40448,"public static void assertTimeInRaidTimespan(User user,LocalDateTime dateTimeToCheck,Raid raid,LocaleService localeService){
  final LocalDateTime startOfRaid=getStartOfRaid(raid.getEndOfRaid(),raid.isExRaid());
  if (!(dateTimeToCheck.isBefore(raid.getEndOfRaid()) && dateTimeToCheck.isAfter(startOfRaid))) {
    throw new UserMessedUpException(user,localeService.getMessageFor(LocaleService.TIME_NOT_IN_RAID_TIMESPAN,localeService.getLocaleForUser(user),printDateTime(dateTimeToCheck),printDateTime(startOfRaid),printTimeIfSameDay(raid.getEndOfRaid())));
  }
}","public static void assertTimeInRaidTimespan(User user,LocalDateTime dateTimeToCheck,Raid raid,LocaleService localeService){
  final LocalDateTime startOfRaid=getStartOfRaid(raid.getEndOfRaid(),raid.isExRaid());
  final boolean timeIsSameOrBeforeEnd=raid.getEndOfRaid().isAfter(dateTimeToCheck) || raid.getEndOfRaid().equals(dateTimeToCheck);
  final boolean timeIsSameOrAfterStart=startOfRaid.isBefore(dateTimeToCheck) || startOfRaid.equals(dateTimeToCheck);
  if (!(timeIsSameOrBeforeEnd && timeIsSameOrAfterStart)) {
    throw new UserMessedUpException(user,localeService.getMessageFor(LocaleService.TIME_NOT_IN_RAID_TIMESPAN,localeService.getLocaleForUser(user),printDateTime(dateTimeToCheck),printDateTime(startOfRaid),printTimeIfSameDay(raid.getEndOfRaid())));
  }
}"
40449,"private boolean changeGroup(CommandEvent commandEvent,Config config,User user,String userName,String[] args){
  String whatToChangeTo;
  StringBuilder gymNameBuilder;
  String gymName;
  Gym gym;
  Raid raid;
  whatToChangeTo=args[1].trim().toLowerCase();
  gymNameBuilder=new StringBuilder();
  for (int i=2; i < args.length; i++) {
    gymNameBuilder.append(args[i]).append(""String_Node_Str"");
  }
  gymName=gymNameBuilder.toString().trim();
  gym=gymRepository.search(user,gymName,config.getRegion());
  raid=raidRepository.getActiveRaidOrFallbackToExRaid(gym,config.getRegion(),user);
  verifyGroupPermission(commandEvent,user,raid,config);
  LocalTime newTime=parseTime(user,whatToChangeTo,localeService);
  LocalDateTime newDateTime=LocalDateTime.of(raid.getEndOfRaid().toLocalDate(),newTime);
  assertTimeInRaidTimespan(user,newDateTime,raid,localeService);
  assertGroupTimeNotBeforeNow(user,newDateTime,localeService);
  if (raidRepository.existsGroupForRaidAt(raid,newDateTime)) {
    throw new UserMessedUpException(user,localeService.getMessageFor(LocaleService.GROUP_NOT_ADDED,localeService.getLocaleForUser(user),String.valueOf(raid)));
  }
  if (raidRepository.hasManyGroupsForRaid(user,raid)) {
    throw new UserMessedUpException(user,localeService.getMessageFor(LocaleService.MANY_GROUPS_FOR_RAID,localeService.getLocaleForUser(user),String.valueOf(raid)));
  }
  int counter=0;
  boolean groupChanged=false;
  final Set<EmoticonSignUpMessageListener> listenersToCheck=new HashSet<>();
  for (  Object o : botService.getBot().getRegisteredListeners()) {
    if (o instanceof EmoticonSignUpMessageListener) {
      EmoticonSignUpMessageListener listener=(EmoticonSignUpMessageListener)o;
      final String raidId=raid.getId();
      final boolean isCorrectRaid=raidId.equals(listener.getRaidId());
      final boolean isUsersGroup=user.getId().equals(listener.getUserId());
      if (isCorrectRaid && isUsersGroup) {
        listenersToCheck.add(listener);
        break;
      }
      if (isCorrectRaid && (isUserAdministrator(commandEvent) || isUserServerMod(commandEvent,config))) {
        listenersToCheck.add(listener);
      }
    }
  }
  if (listenersToCheck.size() > 1) {
    throw new UserMessedUpException(user,localeService.getMessageFor(LocaleService.MANY_GROUPS_FOR_RAID,localeService.getLocaleForUser(user),String.valueOf(raid)));
  }
 else   if (listenersToCheck.size() == 0) {
    throw new UserMessedUpException(user,localeService.getMessageFor(LocaleService.NO_PERMISSION,localeService.getLocaleForUser(user)));
  }
  for (  EmoticonSignUpMessageListener listener : listenersToCheck) {
    final String raidId=raid.getId();
    final LocalDateTime currentStartAt=listener.getStartAt();
    if (currentStartAt != null && currentStartAt.equals(newDateTime)) {
    }
 else     if (currentStartAt != null) {
      LOGGER.info(""String_Node_Str"" + currentStartAt + ""String_Node_Str""+ newDateTime);
      RaidGroup raidGroup=raidRepository.changeGroup(user,raidId,listener.getUserId(),currentStartAt,newDateTime);
      raidRepository.moveAllSignUpsForTimeToNewTime(raidId,currentStartAt,newDateTime,user);
      listener.setStartAt(newDateTime);
      groupChanged=true;
      replyBasedOnConfigAndRemoveAfter(config,commandEvent,localeService.getMessageFor(LocaleService.MOVED_GROUP,localeService.getLocaleForUser(user),printTimeIfSameDay(currentStartAt),printTimeIfSameDay(newDateTime),raid.getGym().getName()),30);
      LOGGER.info(""String_Node_Str"" + raidGroup);
    }
 else {
      replyBasedOnConfigAndRemoveAfter(config,commandEvent,localeService.getMessageFor(LocaleService.GROUP_CLEANING_UP,localeService.getLocaleForUser(user)),BotServerMain.timeToRemoveFeedbackInSeconds);
      commandEvent.getMessage().delete().queueAfter(50,TimeUnit.MILLISECONDS);
      return true;
    }
  }
  if (!groupChanged) {
    throw new UserMessedUpException(userName,localeService.getMessageFor(LocaleService.BAD_SYNTAX,localeService.getLocaleForUser(user)));
  }
  return false;
}","private boolean changeGroup(CommandEvent commandEvent,Config config,User user,String userName,String[] args){
  String whatToChangeTo;
  StringBuilder gymNameBuilder;
  String gymName;
  Gym gym;
  Raid raid;
  whatToChangeTo=args[1].trim().toLowerCase();
  gymNameBuilder=new StringBuilder();
  for (int i=2; i < args.length; i++) {
    gymNameBuilder.append(args[i]).append(""String_Node_Str"");
  }
  gymName=gymNameBuilder.toString().trim();
  gym=gymRepository.search(user,gymName,config.getRegion());
  raid=raidRepository.getActiveRaidOrFallbackToExRaid(gym,config.getRegion(),user);
  verifyGroupPermission(commandEvent,user,raid,config);
  LocalTime newTime=parseTime(user,whatToChangeTo,localeService);
  LocalDateTime newDateTime=LocalDateTime.of(raid.getEndOfRaid().toLocalDate(),newTime);
  assertTimeInRaidTimespan(user,newDateTime,raid,localeService);
  assertGroupTimeNotBeforeNow(user,newDateTime,localeService);
  if (raidRepository.existsGroupForRaidAt(raid,newDateTime)) {
    throw new UserMessedUpException(user,localeService.getMessageFor(LocaleService.GROUP_NOT_ADDED,localeService.getLocaleForUser(user),String.valueOf(raid)));
  }
  if (raidRepository.hasManyGroupsForRaid(user,raid)) {
    throw new UserMessedUpException(user,localeService.getMessageFor(LocaleService.MANY_GROUPS_FOR_RAID,localeService.getLocaleForUser(user),String.valueOf(raid)));
  }
  boolean groupChanged=false;
  final Set<EmoticonSignUpMessageListener> listenersToCheck=new HashSet<>();
  for (  Object o : botService.getBot().getRegisteredListeners()) {
    if (o instanceof EmoticonSignUpMessageListener) {
      EmoticonSignUpMessageListener listener=(EmoticonSignUpMessageListener)o;
      final String raidId=raid.getId();
      final boolean isCorrectRaid=raidId.equals(listener.getRaidId());
      final boolean isUsersGroup=user.getId().equals(listener.getUserId());
      if (isCorrectRaid && isUsersGroup) {
        listenersToCheck.add(listener);
        break;
      }
    }
  }
  if (listenersToCheck.size() == 0) {
    for (    Object o : botService.getBot().getRegisteredListeners()) {
      if (o instanceof EmoticonSignUpMessageListener) {
        EmoticonSignUpMessageListener listener=(EmoticonSignUpMessageListener)o;
        final String raidId=raid.getId();
        final boolean isCorrectRaid=raidId.equals(listener.getRaidId());
        if (isCorrectRaid && (isUserAdministrator(commandEvent) || isUserServerMod(commandEvent,config))) {
          listenersToCheck.add(listener);
        }
      }
    }
  }
  if (listenersToCheck.size() > 1) {
    throw new UserMessedUpException(user,localeService.getMessageFor(LocaleService.MANY_GROUPS_FOR_RAID,localeService.getLocaleForUser(user),String.valueOf(raid)));
  }
 else   if (listenersToCheck.size() == 0) {
    throw new UserMessedUpException(user,localeService.getMessageFor(LocaleService.NO_PERMISSION,localeService.getLocaleForUser(user)));
  }
  for (  EmoticonSignUpMessageListener listener : listenersToCheck) {
    final String raidId=raid.getId();
    final LocalDateTime currentStartAt=listener.getStartAt();
    if (currentStartAt != null && currentStartAt.equals(newDateTime)) {
    }
 else     if (currentStartAt != null) {
      LOGGER.info(""String_Node_Str"" + currentStartAt + ""String_Node_Str""+ newDateTime);
      RaidGroup raidGroup=raidRepository.changeGroup(user,raidId,listener.getUserId(),currentStartAt,newDateTime);
      raidRepository.moveAllSignUpsForTimeToNewTime(raidId,currentStartAt,newDateTime,user);
      listener.setStartAt(newDateTime);
      groupChanged=true;
      replyBasedOnConfigAndRemoveAfter(config,commandEvent,localeService.getMessageFor(LocaleService.MOVED_GROUP,localeService.getLocaleForUser(user),printTimeIfSameDay(currentStartAt),printTimeIfSameDay(newDateTime),raid.getGym().getName()),30);
      LOGGER.info(""String_Node_Str"" + raidGroup);
    }
 else {
      replyBasedOnConfigAndRemoveAfter(config,commandEvent,localeService.getMessageFor(LocaleService.GROUP_CLEANING_UP,localeService.getLocaleForUser(user)),BotServerMain.timeToRemoveFeedbackInSeconds);
      commandEvent.getMessage().delete().queueAfter(50,TimeUnit.MILLISECONDS);
      return true;
    }
  }
  if (!groupChanged) {
    throw new UserMessedUpException(userName,localeService.getMessageFor(LocaleService.BAD_SYNTAX,localeService.getLocaleForUser(user)));
  }
  return false;
}"
40450,"public static Callable<Boolean> getMessageRefreshingTaskToSchedule(User user,String server,String messageId,LocaleService localeService,Locale locale,ServerConfigRepository serverConfigRepository,RaidRepository raidRepository,ClockService clockService,MessageChannel messageChannel,final ExecutorService executorService){
  final Callable<Boolean> refreshEditThreadTask=() -> {
    final Callable<Boolean> editTask=() -> {
      TimeUnit.SECONDS.sleep(60);
      Config config=serverConfigRepository.getConfigForServer(server);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(""String_Node_Str"" + Thread.currentThread().getId() + ""String_Node_Str""+ config.getServer()+ ""String_Node_Str""+ messageId);
      }
      final String messageString=getOverviewMessage(config,localeService,raidRepository,clockService,locale);
      messageChannel.editMessageById(messageId,messageString).queue(m -> {
      }
,m -> {
        LOGGER.warn(m.getClass().getSimpleName() + ""String_Node_Str"" + m.getMessage());
        if (!(m instanceof SocketTimeoutException)) {
          Config savedConfig=serverConfigRepository.save(config);
          cleanUp(savedConfig,user,messageId,serverConfigRepository,localeService,messageChannel,locale);
        }
 else {
          LOGGER.debug(""String_Node_Str"" + ""String_Node_Str"");
        }
      }
);
      return true;
    }
;
    do {
      try {
        executorService.submit(editTask).get();
      }
 catch (      InterruptedException|ExecutionException e) {
        LOGGER.warn(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
        return false;
      }
    }
 while (true);
  }
;
  return refreshEditThreadTask;
}","public static Callable<Boolean> getMessageRefreshingTaskToSchedule(User user,String server,String messageId,LocaleService localeService,Locale locale,ServerConfigRepository serverConfigRepository,RaidRepository raidRepository,ClockService clockService,MessageChannel messageChannel,final ExecutorService executorService){
  final Callable<Boolean> refreshEditThreadTask=() -> {
    final Callable<Boolean> editTask=() -> {
      TimeUnit.SECONDS.sleep(60);
      Config config=serverConfigRepository.getConfigForServer(server);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(""String_Node_Str"" + Thread.currentThread().getId() + ""String_Node_Str""+ config.getServer()+ ""String_Node_Str""+ messageId);
      }
      final String messageString=getOverviewMessage(config,localeService,raidRepository,clockService,locale);
      messageChannel.editMessageById(messageId,messageString).queue(m -> {
      }
,m -> {
        LOGGER.warn(m.getClass().getSimpleName() + ""String_Node_Str"" + m.getMessage());
        if (!(m instanceof SocketTimeoutException)) {
          Config savedConfig=serverConfigRepository.save(config);
          cleanUp(savedConfig,messageId,serverConfigRepository,messageChannel);
          throw new OverviewException(m.getMessage());
        }
 else {
          LOGGER.debug(""String_Node_Str"" + ""String_Node_Str"");
        }
      }
);
      return true;
    }
;
    do {
      try {
        executorService.submit(editTask).get();
      }
 catch (      InterruptedException|ExecutionException|OverviewException e) {
        LOGGER.warn(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
        return false;
      }
    }
 while (true);
  }
;
  return refreshEditThreadTask;
}"
40451,"private static void cleanUp(Config config,User user,String messageId,ServerConfigRepository serverConfigRepository,LocaleService localeService,MessageChannel messageChannel,Locale locale){
  try {
    if (!StringUtils.isEmpty(messageId)) {
      messageChannel.deleteMessageById(messageId).queue(m -> {
        LOGGER.info(""String_Node_Str"" + messageId);
      }
,m -> {
        LOGGER.info(""String_Node_Str"" + messageId);
      }
);
    }
  }
 catch (  Throwable t) {
    LOGGER.warn(""String_Node_Str"" + t.getMessage());
  }
 finally {
    try {
      LOGGER.debug(""String_Node_Str"" + config.getServer());
      serverConfigRepository.setOverviewMessageIdForServer(config.getServer(),null);
    }
 catch (    Throwable t) {
      LOGGER.warn(t.getClass().getSimpleName() + ""String_Node_Str"" + config.getServer()+ ""String_Node_Str""+ t.getMessage());
    }
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug(""String_Node_Str"");
    }
  }
}","private static void cleanUp(Config config,String messageId,ServerConfigRepository serverConfigRepository,MessageChannel messageChannel){
  try {
    if (!StringUtils.isEmpty(messageId)) {
      messageChannel.deleteMessageById(messageId).queue(m -> {
        LOGGER.info(""String_Node_Str"" + messageId);
      }
,m -> {
        LOGGER.info(""String_Node_Str"" + messageId);
      }
);
    }
  }
 catch (  Throwable t) {
    LOGGER.warn(""String_Node_Str"" + t.getMessage());
  }
 finally {
    try {
      LOGGER.debug(""String_Node_Str"" + config.getServer());
      serverConfigRepository.setOverviewMessageIdForServer(config.getServer(),null);
    }
 catch (    Throwable t) {
      LOGGER.warn(t.getClass().getSimpleName() + ""String_Node_Str"" + config.getServer()+ ""String_Node_Str""+ t.getMessage());
    }
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug(""String_Node_Str"");
    }
  }
}"
40452,"private static String getOverviewMessage(Config config,LocaleService localeService,RaidRepository raidRepository,ClockService clockService,Locale locale){
  Set<Raid> raids=raidRepository.getAllRaidsForRegion(config.getRegion());
  final String messageString;
  StringBuilder stringBuilder=new StringBuilder();
  if (raids.size() == 0) {
    stringBuilder.append(localeService.getMessageFor(LocaleService.LIST_NO_RAIDS,locale));
  }
 else {
    StringBuilder exRaids=new StringBuilder();
    stringBuilder.append(""String_Node_Str"").append(localeService.getMessageFor(LocaleService.CURRENT_RAIDS,locale));
    stringBuilder.append(""String_Node_Str"");
    stringBuilder.append(""String_Node_Str"").append(localeService.getMessageFor(LocaleService.RAID_DETAILS,locale)).append(""String_Node_Str"");
    Pokemon currentPokemon=null;
    for (    Raid raid : raids) {
      final Pokemon raidBoss=raid.getPokemon();
      if (!raid.isExRaid() && (currentPokemon == null || (!currentPokemon.equals(raidBoss)))) {
        currentPokemon=raid.getPokemon();
        stringBuilder.append(""String_Node_Str"").append(currentPokemon.getName()).append(""String_Node_Str"");
      }
      final int numberOfPeople=raid.getNumberOfPeopleSignedUp();
      final Gym raidGym=raid.getGym();
      if (!raid.isExRaid()) {
        stringBuilder.append(""String_Node_Str"").append(raidGym.getName()).append(""String_Node_Str"");
        stringBuilder.append(""String_Node_Str"").append(printTimeIfSameDay(getStartOfRaid(raid.getEndOfRaid(),false))).append(""String_Node_Str"").append(printTime(raid.getEndOfRaid().toLocalTime())).append(""String_Node_Str"").append(numberOfPeople).append(""String_Node_Str"").append(localeService.getMessageFor(LocaleService.SIGNED_UP,locale)).append(raid.getNextEta(localeService,locale,LocalTime.now())).append(""String_Node_Str"");
      }
 else {
        exRaids.append(""String_Node_Str"").append(raidGym.getName()).append(""String_Node_Str"").append(raidBoss.getName()).append(""String_Node_Str"").append(localeService.getMessageFor(LocaleService.RAID_BETWEEN,locale,printTimeIfSameDay(getStartOfRaid(raid.getEndOfRaid(),true)),printTime(raid.getEndOfRaid().toLocalTime()))).append(""String_Node_Str"").append(numberOfPeople).append(""String_Node_Str"").append(localeService.getMessageFor(LocaleService.SIGNED_UP,locale)).append(""String_Node_Str"");
      }
    }
    final String exRaidList=exRaids.toString();
    if (exRaidList.length() > 1) {
      stringBuilder.append(""String_Node_Str"").append(exRaidList);
    }
  }
  stringBuilder.append(""String_Node_Str"").append(localeService.getMessageFor(LocaleService.UPDATED_EVERY_X,locale,LocaleService.asString(TimeUnit.SECONDS,locale),String.valueOf(60))).append(""String_Node_Str"").append(localeService.getMessageFor(LocaleService.LAST_UPDATE,locale,printTime(clockService.getCurrentTime())));
  final String message=stringBuilder.toString();
  return message;
}","private static String getOverviewMessage(Config config,LocaleService localeService,RaidRepository raidRepository,ClockService clockService,Locale locale){
  Set<Raid> raids=raidRepository.getAllRaidsForRegion(config.getRegion());
  StringBuilder stringBuilder=new StringBuilder();
  if (raids.size() == 0) {
    stringBuilder.append(localeService.getMessageFor(LocaleService.LIST_NO_RAIDS,locale));
  }
 else {
    StringBuilder exRaids=new StringBuilder();
    stringBuilder.append(""String_Node_Str"").append(localeService.getMessageFor(LocaleService.CURRENT_RAIDS,locale));
    stringBuilder.append(""String_Node_Str"");
    stringBuilder.append(""String_Node_Str"").append(localeService.getMessageFor(LocaleService.RAID_DETAILS,locale)).append(""String_Node_Str"");
    Pokemon currentPokemon=null;
    for (    Raid raid : raids) {
      final Pokemon raidBoss=raid.getPokemon();
      if (!raid.isExRaid() && (currentPokemon == null || (!currentPokemon.equals(raidBoss)))) {
        currentPokemon=raid.getPokemon();
        stringBuilder.append(""String_Node_Str"").append(currentPokemon.getName()).append(""String_Node_Str"");
      }
      final int numberOfPeople=raid.getNumberOfPeopleSignedUp();
      final Gym raidGym=raid.getGym();
      if (!raid.isExRaid()) {
        stringBuilder.append(""String_Node_Str"").append(raidGym.getName()).append(""String_Node_Str"");
        stringBuilder.append(""String_Node_Str"").append(printTimeIfSameDay(getStartOfRaid(raid.getEndOfRaid(),false))).append(""String_Node_Str"").append(printTime(raid.getEndOfRaid().toLocalTime())).append(""String_Node_Str"").append(numberOfPeople).append(""String_Node_Str"").append(localeService.getMessageFor(LocaleService.SIGNED_UP,locale)).append(raid.getNextEta(localeService,locale,LocalTime.now())).append(""String_Node_Str"");
      }
 else {
        exRaids.append(""String_Node_Str"").append(raidGym.getName()).append(""String_Node_Str"").append(raidBoss.getName()).append(""String_Node_Str"").append(localeService.getMessageFor(LocaleService.RAID_BETWEEN,locale,printTimeIfSameDay(getStartOfRaid(raid.getEndOfRaid(),true)),printTime(raid.getEndOfRaid().toLocalTime()))).append(""String_Node_Str"").append(numberOfPeople).append(""String_Node_Str"").append(localeService.getMessageFor(LocaleService.SIGNED_UP,locale)).append(""String_Node_Str"");
      }
    }
    final String exRaidList=exRaids.toString();
    if (exRaidList.length() > 1) {
      stringBuilder.append(""String_Node_Str"").append(exRaidList);
    }
  }
  stringBuilder.append(""String_Node_Str"").append(localeService.getMessageFor(LocaleService.UPDATED_EVERY_X,locale,LocaleService.asString(TimeUnit.SECONDS,locale),String.valueOf(60))).append(""String_Node_Str"").append(localeService.getMessageFor(LocaleService.LAST_UPDATE,locale,printTime(clockService.getCurrentTime())));
  final String message=stringBuilder.toString();
  return message;
}"
40453,"@Override protected void executeWithConfig(CommandEvent commandEvent,Config config){
  String gymName=commandEvent.getArgs();
  final Gym gym=gymRepository.search(commandEvent.getAuthor(),gymName,config.getRegion());
  String staticUrl=Utils.getStaticMapUrl(gym);
  String nonStaticUrl=Utils.getNonStaticMapUrl(gym);
  commandEvent.reply(new EmbedBuilder().setImage(staticUrl).setTitle(gym.getName(),nonStaticUrl).build());
  removeOriginMessageIfConfigSaysSo(config,commandEvent);
}","@Override protected void executeWithConfig(CommandEvent commandEvent,Config config){
  String gymName=commandEvent.getArgs();
  final Gym gym=gymRepository.search(commandEvent.getAuthor(),gymName,config.getRegion());
  String staticUrl=Utils.getStaticMapUrl(gym);
  String nonStaticUrl=Utils.getNonStaticMapUrl(gym);
  final MessageEmbed messageEmbed=new EmbedBuilder().setImage(staticUrl).setTitle(gym.getName(),nonStaticUrl).build();
  replyMapBasedOnConfig(config,commandEvent,messageEmbed);
}"
40454,"public String executeUnsignCommand(Config config,User user,Locale localeForUser,String[] args,String help){
  String people=args[0];
  String userName=user.getName();
  if (args.length < 2 || args.length > 10) {
    throw new WrongNumberOfArgumentsException(user,localeService,2,args.length,help);
  }
  Integer numberOfPeople=Utils.assertNotTooManyOrNoNumber(user,localeService,people);
  StringBuilder gymNameBuilder=new StringBuilder();
  for (int i=1; i < args.length; i++) {
    gymNameBuilder.append(args[i]).append(""String_Node_Str"");
  }
  String gymName=gymNameBuilder.toString().trim();
  final Gym gym=gymRepository.search(user,gymName,config.getRegion());
  Raid raid=getActiveRaidOrFallbackToExRaid(gym,config.getRegion(),user);
  final RaidEntitySignUp signUp=findEntityByRaidId(raid.getId()).getSignUp(user.getName());
  raid=removeFromSignUp(raid.getId(),user,0,0,0,numberOfPeople,LocalDateTime.of(raid.getEndOfRaid().toLocalDate(),signUp.getArrivalTime()));
  final String currentSignupText=localeService.getMessageFor(LocaleService.CURRENT_SIGNUPS,localeForUser);
  final Set<SignUp> signUps=raid.getSignUps();
  Set<String> signUpNames=Utils.getNamesOfThoseWithSignUps(signUps,true);
  final String allSignUpNames=StringUtils.join(signUpNames,""String_Node_Str"");
  final String signUpText=raid.getSignUps().size() > 1 ? currentSignupText + ""String_Node_Str"" + allSignUpNames : ""String_Node_Str"";
  return localeService.getMessageFor(LocaleService.UNSIGN,localeForUser,userName,gym.getName(),signUpText);
}","public String executeUnsignCommand(Config config,User user,Locale localeForUser,String[] args,String help){
  String people=args[0];
  String userName=user.getName();
  if (args.length < 2 || args.length > 10) {
    throw new WrongNumberOfArgumentsException(user,localeService,2,args.length,help);
  }
  Integer numberOfPeople=Utils.assertNotTooManyOrNoNumber(user,localeService,people);
  StringBuilder gymNameBuilder=new StringBuilder();
  for (int i=1; i < args.length; i++) {
    gymNameBuilder.append(args[i]).append(""String_Node_Str"");
  }
  String gymName=gymNameBuilder.toString().trim();
  final Gym gym=gymRepository.search(user,gymName,config.getRegion());
  Raid raid=getActiveRaidOrFallbackToExRaid(gym,config.getRegion(),user);
  final RaidEntitySignUp signUp=findEntityByRaidId(raid.getId()).getSignUp(user.getName());
  if (signUp == null) {
    throw new UserMessedUpException(user,localeService.getMessageFor(LocaleService.NO_SIGNUP_AT_GYM,localeForUser,user.getName(),gym.getName()));
  }
  raid=removeFromSignUp(raid.getId(),user,0,0,0,numberOfPeople,LocalDateTime.of(raid.getEndOfRaid().toLocalDate(),signUp.getArrivalTime()));
  final String currentSignupText=localeService.getMessageFor(LocaleService.CURRENT_SIGNUPS,localeForUser);
  final Set<SignUp> signUps=raid.getSignUps();
  Set<String> signUpNames=Utils.getNamesOfThoseWithSignUps(signUps,true);
  final String allSignUpNames=StringUtils.join(signUpNames,""String_Node_Str"");
  final String signUpText=raid.getSignUps().size() > 1 ? currentSignupText + ""String_Node_Str"" + allSignUpNames : ""String_Node_Str"";
  return localeService.getMessageFor(LocaleService.UNSIGN,localeForUser,userName,gym.getName(),signUpText);
}"
40455,"@Test public void testDoubleWeaknesses() throws Exception {
  PokemonRepository pokemonRepository=new PokemonRepository(""String_Node_Str"",new LocaleService(""String_Node_Str"",userConfigRepository));
  Pokemon pokemon;
  String typeToCheck;
  pokemon=pokemonRepository.search(""String_Node_Str"",null);
  typeToCheck=""String_Node_Str"";
  assertPokemonIsDoubleWeakAgainst(pokemon,typeToCheck);
  pokemon=pokemonRepository.search(""String_Node_Str"",null);
  typeToCheck=""String_Node_Str"";
  assertPokemonIsDoubleWeakAgainst(pokemon,typeToCheck);
}","@Test public void testDoubleWeaknesses() throws Exception {
  Pokemon pokemon;
  String typeToCheck;
  pokemon=pokemonRepository.search(""String_Node_Str"",null);
  typeToCheck=""String_Node_Str"";
  assertPokemonIsDoubleWeakAgainst(pokemon,typeToCheck);
  pokemon=pokemonRepository.search(""String_Node_Str"",null);
  typeToCheck=""String_Node_Str"";
  assertPokemonIsDoubleWeakAgainst(pokemon,typeToCheck);
}"
40456,"@Override protected void executeWithConfig(CommandEvent commandEvent,Config config){
  final User user=commandEvent.getAuthor();
  final String userName=user.getName();
  final String[] args=commandEvent.getArgs().split(""String_Node_Str"");
  String whatToChange=args[0].trim().toLowerCase();
  String whatToChangeTo;
  StringBuilder gymNameBuilder;
  String gymName;
  Gym gym;
  Raid raid;
  LocalTime endsAtTime;
  LocalDateTime endsAt;
switch (whatToChange) {
case ""String_Node_Str"":
    whatToChangeTo=args[1].trim().toLowerCase();
  gymNameBuilder=new StringBuilder();
for (int i=2; i < args.length; i++) {
  gymNameBuilder.append(args[i]).append(""String_Node_Str"");
}
gymName=gymNameBuilder.toString().trim();
gym=gymRepository.search(user,gymName,config.getRegion());
raid=raidRepository.getActiveRaidOrFallbackToExRaid(gym,config.getRegion(),user);
verifyPermission(commandEvent,user,raid);
endsAtTime=parseTime(user,whatToChangeTo,localeService);
endsAt=LocalDateTime.of(LocalDate.now(),endsAtTime);
assertTimeNotInNoRaidTimespan(user,endsAtTime,localeService);
assertTimeNotMoreThanXHoursFromNow(user,endsAtTime,localeService,2);
assertCreateRaidTimeNotBeforeNow(user,endsAt,localeService);
raid=raidRepository.changeEndOfRaid(raid.getId(),endsAt,user);
break;
case ""String_Node_Str"":
whatToChangeTo=args[1].trim().toLowerCase();
gymNameBuilder=new StringBuilder();
for (int i=2; i < args.length; i++) {
gymNameBuilder.append(args[i]).append(""String_Node_Str"");
}
gymName=gymNameBuilder.toString().trim();
gym=gymRepository.search(user,gymName,config.getRegion());
raid=raidRepository.getActiveRaidOrFallbackToExRaid(gym,config.getRegion(),user);
final Pokemon pokemon=pokemonRepository.search(whatToChangeTo,user);
if (Utils.isRaidExPokemon(raid.getPokemon().getName())) {
throw new UserMessedUpException(userName,localeService.getMessageFor(LocaleService.EX_NO_CHANGE_POKEMON,localeService.getLocaleForUser(user)));
}
verifyPermission(commandEvent,user,raid);
if (pokemon.getName().equalsIgnoreCase(""String_Node_Str"")) {
throw new UserMessedUpException(userName,localeService.getMessageFor(LocaleService.EX_CANT_CHANGE_RAID_TYPE,localeService.getLocaleForUser(user)));
}
raid=raidRepository.changePokemon(raid,pokemon);
break;
case ""String_Node_Str"":
gymNameBuilder=new StringBuilder();
for (int i=1; i < args.length; i++) {
gymNameBuilder.append(args[i]).append(""String_Node_Str"");
}
gymName=gymNameBuilder.toString().trim();
gym=gymRepository.search(user,gymName,config.getRegion());
raid=raidRepository.getActiveRaidOrFallbackToExRaid(gym,config.getRegion(),user);
verifyPermission(commandEvent,user,raid);
final boolean userIsNotAdministrator=!isUserAdministrator(commandEvent);
if (userIsNotAdministrator && raid.getSignUps().size() > 0) {
throw new UserMessedUpException(userName,localeService.getMessageFor(LocaleService.ONLY_ADMINS_REMOVE_RAID,localeService.getLocaleForUser(user)));
}
if (raidRepository.delete(raid)) {
raid=null;
}
 else {
throw new UserMessedUpException(userName,localeService.getMessageFor(LocaleService.RAID_NOT_EXISTS,localeService.getLocaleForUser(user)));
}
break;
case ""String_Node_Str"":
whatToChangeTo=args[1].trim().toLowerCase();
gymNameBuilder=new StringBuilder();
for (int i=2; i < args.length; i++) {
gymNameBuilder.append(args[i]).append(""String_Node_Str"");
}
gymName=gymNameBuilder.toString().trim();
gym=gymRepository.search(user,gymName,config.getRegion());
raid=raidRepository.getActiveRaidOrFallbackToExRaid(gym,config.getRegion(),user);
verifyPermission(commandEvent,user,raid);
LocalTime newTime=parseTime(user,whatToChangeTo,localeService);
LocalDateTime newDateTime=LocalDateTime.of(LocalDate.now(),newTime);
assertTimeNotInNoRaidTimespan(user,newTime,localeService);
assertTimeNotMoreThanXHoursFromNow(user,newTime,localeService,2);
assertCreateRaidTimeNotBeforeNow(user,newDateTime,localeService);
boolean groupChanged=false;
for (Object o : botService.getBot().getRegisteredListeners()) {
if (o instanceof EmoticonSignUpMessageListener) {
EmoticonSignUpMessageListener listener=(EmoticonSignUpMessageListener)o;
final String raidId=raid.getId();
final boolean isCorrectRaid=raidId.equals(listener.getRaidId());
final boolean isUsersGroup=user.getId().equals(listener.getUserId());
if (isCorrectRaid && (isUsersGroup || isUserAdministrator(commandEvent))) {
final LocalDateTime currentStartAt=listener.getStartAt();
raidRepository.moveAllSignUpsForTimeToNewTime(raidId,currentStartAt,newDateTime,user);
listener.setStartAt(newDateTime);
groupChanged=true;
replyBasedOnConfigAndRemoveAfter(config,commandEvent,localeService.getMessageFor(LocaleService.MOVED_GROUP,localeService.getLocaleForUser(user),printTimeIfSameDay(currentStartAt),printTimeIfSameDay(newDateTime),raid.getGym().getName()),30);
}
}
}
if (!groupChanged) {
throw new UserMessedUpException(userName,localeService.getMessageFor(LocaleService.BAD_SYNTAX,localeService.getLocaleForUser(user)));
}
break;
default :
throw new UserMessedUpException(userName,localeService.getMessageFor(LocaleService.BAD_SYNTAX,localeService.getLocaleForUser(user)));
}
commandEvent.reactSuccess();
}","@Override protected void executeWithConfig(CommandEvent commandEvent,Config config){
  final User user=commandEvent.getAuthor();
  final String userName=user.getName();
  final String[] args=commandEvent.getArgs().split(""String_Node_Str"");
  String whatToChange=args[0].trim().toLowerCase();
  String whatToChangeTo;
  StringBuilder gymNameBuilder;
  String gymName;
  Gym gym;
  Raid raid;
  LocalTime endsAtTime;
  LocalDateTime endsAt;
switch (whatToChange) {
case ""String_Node_Str"":
    whatToChangeTo=args[1].trim().toLowerCase();
  gymNameBuilder=new StringBuilder();
for (int i=2; i < args.length; i++) {
  gymNameBuilder.append(args[i]).append(""String_Node_Str"");
}
gymName=gymNameBuilder.toString().trim();
gym=gymRepository.search(user,gymName,config.getRegion());
raid=raidRepository.getActiveRaidOrFallbackToExRaid(gym,config.getRegion(),user);
verifyPermission(commandEvent,user,raid);
endsAtTime=parseTime(user,whatToChangeTo,localeService);
endsAt=LocalDateTime.of(LocalDate.now(),endsAtTime);
assertTimeNotInNoRaidTimespan(user,endsAtTime,localeService);
assertTimeNotMoreThanXHoursFromNow(user,endsAtTime,localeService,2);
assertCreateRaidTimeNotBeforeNow(user,endsAt,localeService);
raid=raidRepository.changeEndOfRaid(raid.getId(),endsAt);
break;
case ""String_Node_Str"":
whatToChangeTo=args[1].trim().toLowerCase();
gymNameBuilder=new StringBuilder();
for (int i=2; i < args.length; i++) {
gymNameBuilder.append(args[i]).append(""String_Node_Str"");
}
gymName=gymNameBuilder.toString().trim();
gym=gymRepository.search(user,gymName,config.getRegion());
raid=raidRepository.getActiveRaidOrFallbackToExRaid(gym,config.getRegion(),user);
final Pokemon pokemon=pokemonRepository.search(whatToChangeTo,user);
if (Utils.isRaidExPokemon(raid.getPokemon().getName())) {
throw new UserMessedUpException(userName,localeService.getMessageFor(LocaleService.EX_NO_CHANGE_POKEMON,localeService.getLocaleForUser(user)));
}
verifyPermission(commandEvent,user,raid);
if (pokemon.getName().equalsIgnoreCase(""String_Node_Str"")) {
throw new UserMessedUpException(userName,localeService.getMessageFor(LocaleService.EX_CANT_CHANGE_RAID_TYPE,localeService.getLocaleForUser(user)));
}
raid=raidRepository.changePokemon(raid,pokemon);
break;
case ""String_Node_Str"":
gymNameBuilder=new StringBuilder();
for (int i=1; i < args.length; i++) {
gymNameBuilder.append(args[i]).append(""String_Node_Str"");
}
gymName=gymNameBuilder.toString().trim();
gym=gymRepository.search(user,gymName,config.getRegion());
raid=raidRepository.getActiveRaidOrFallbackToExRaid(gym,config.getRegion(),user);
verifyPermission(commandEvent,user,raid);
final boolean userIsNotAdministrator=!isUserAdministrator(commandEvent);
if (userIsNotAdministrator && raid.getSignUps().size() > 0) {
throw new UserMessedUpException(userName,localeService.getMessageFor(LocaleService.ONLY_ADMINS_REMOVE_RAID,localeService.getLocaleForUser(user)));
}
if (raidRepository.delete(raid)) {
raid=null;
}
 else {
throw new UserMessedUpException(userName,localeService.getMessageFor(LocaleService.RAID_NOT_EXISTS,localeService.getLocaleForUser(user)));
}
break;
case ""String_Node_Str"":
whatToChangeTo=args[1].trim().toLowerCase();
gymNameBuilder=new StringBuilder();
for (int i=2; i < args.length; i++) {
gymNameBuilder.append(args[i]).append(""String_Node_Str"");
}
gymName=gymNameBuilder.toString().trim();
gym=gymRepository.search(user,gymName,config.getRegion());
raid=raidRepository.getActiveRaidOrFallbackToExRaid(gym,config.getRegion(),user);
verifyPermission(commandEvent,user,raid);
LocalTime newTime=parseTime(user,whatToChangeTo,localeService);
LocalDateTime newDateTime=LocalDateTime.of(LocalDate.now(),newTime);
assertTimeNotInNoRaidTimespan(user,newTime,localeService);
assertTimeNotMoreThanXHoursFromNow(user,newTime,localeService,2);
assertCreateRaidTimeNotBeforeNow(user,newDateTime,localeService);
boolean groupChanged=false;
for (Object o : botService.getBot().getRegisteredListeners()) {
if (o instanceof EmoticonSignUpMessageListener) {
EmoticonSignUpMessageListener listener=(EmoticonSignUpMessageListener)o;
final String raidId=raid.getId();
final boolean isCorrectRaid=raidId.equals(listener.getRaidId());
final boolean isUsersGroup=user.getId().equals(listener.getUserId());
if (isCorrectRaid && (isUsersGroup || isUserAdministrator(commandEvent))) {
final LocalDateTime currentStartAt=listener.getStartAt();
if (currentStartAt != null) {
raidRepository.moveAllSignUpsForTimeToNewTime(raidId,currentStartAt,newDateTime,user);
listener.setStartAt(newDateTime);
groupChanged=true;
replyBasedOnConfigAndRemoveAfter(config,commandEvent,localeService.getMessageFor(LocaleService.MOVED_GROUP,localeService.getLocaleForUser(user),printTimeIfSameDay(currentStartAt),printTimeIfSameDay(newDateTime),raid.getGym().getName()),30);
}
 else {
replyBasedOnConfigAndRemoveAfter(config,commandEvent,""String_Node_Str"" + ""String_Node_Str"",15);
}
}
}
}
if (!groupChanged) {
throw new UserMessedUpException(userName,localeService.getMessageFor(LocaleService.BAD_SYNTAX,localeService.getLocaleForUser(user)));
}
break;
default :
throw new UserMessedUpException(userName,localeService.getMessageFor(LocaleService.BAD_SYNTAX,localeService.getLocaleForUser(user)));
}
commandEvent.reactSuccess();
}"
40457,"private Callable<Boolean> getMessageRefreshingTaskToSchedule(CommandEvent commandEvent,User user,Raid raid,EmoticonSignUpMessageListener emoticonSignUpMessageListener,Message embed){
  final MessageChannel channel=commandEvent.getTextChannel();
  Callable<Boolean> refreshEditThreadTask=() -> {
    final Callable<Boolean> editTask=() -> {
      TimeUnit.SECONDS.sleep(15);
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""String_Node_Str"" + Thread.currentThread().getId() + ""String_Node_Str""+ embed.getId());
      }
      LocalDateTime start=emoticonSignUpMessageListener.getStartAt();
      final MessageEmbed newContent=getRaidGroupMessageEmbed(user,start,raidRepository.getById(raid.getId()),localeService);
      embed.getChannel().editMessageById(embed.getId(),newContent).queue(m -> {
      }
,m -> {
        emoticonSignUpMessageListener.setStartAt(null);
      }
);
      return true;
    }
;
    while (raidIsActiveAndRaidGroupNotExpired(raid.getEndOfRaid(),emoticonSignUpMessageListener.getStartAt())) {
      try {
        executorService.submit(editTask).get();
      }
 catch (      InterruptedException|ExecutionException e) {
        throw new RuntimeException(e);
      }
    }
    LOGGER.info(""String_Node_Str"" + emoticonSignUpMessageListener.getRaidId() + ""String_Node_Str""+ emoticonSignUpMessageListener.getUserId());
    cleanUp(commandEvent,emoticonSignUpMessageListener.getStartAt(),raid.getId(),emoticonSignUpMessageListener);
    return true;
  }
;
  return refreshEditThreadTask;
}","private Callable<Boolean> getMessageRefreshingTaskToSchedule(CommandEvent commandEvent,User user,Raid raid,EmoticonSignUpMessageListener emoticonSignUpMessageListener,Message embed){
  final MessageChannel channel=commandEvent.getTextChannel();
  Callable<Boolean> refreshEditThreadTask=() -> {
    final Callable<Boolean> editTask=() -> {
      TimeUnit.SECONDS.sleep(15);
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""String_Node_Str"" + Thread.currentThread().getId() + ""String_Node_Str""+ embed.getId());
      }
      LocalDateTime start=emoticonSignUpMessageListener.getStartAt();
      final MessageEmbed newContent=getRaidGroupMessageEmbed(user,start,raidRepository.getById(raid.getId()),localeService);
      embed.getChannel().editMessageById(embed.getId(),newContent).queue(m -> {
      }
,m -> {
        LOGGER.warn(m.getClass().getName() + ""String_Node_Str"" + m.getMessage());
        emoticonSignUpMessageListener.setStartAt(null);
      }
);
      return true;
    }
;
    while (raidIsActiveAndRaidGroupNotExpired(raid.getEndOfRaid(),emoticonSignUpMessageListener.getStartAt())) {
      try {
        executorService.submit(editTask).get();
      }
 catch (      InterruptedException|ExecutionException e) {
        throw new RuntimeException(e);
      }
    }
    LOGGER.info(""String_Node_Str"" + emoticonSignUpMessageListener.getRaidId() + ""String_Node_Str""+ emoticonSignUpMessageListener.getUserId());
    cleanUp(commandEvent,emoticonSignUpMessageListener.getStartAt(),raid.getId(),emoticonSignUpMessageListener);
    return true;
  }
;
  return refreshEditThreadTask;
}"
40458,"public Raid modifySignUp(String raidId,User user,int mystic,int instinct,int valor,int plebs,LocalDateTime startAt){
  RaidEntity raidEntity=findEntityByRaidId(raidId,user);
  RaidEntitySignUp signUp=raidEntity.getSignUp(user.getName());
  final String startAtTime=Utils.printTime(startAt.toLocalTime());
  if (signUp == null) {
    final int sum=mystic + instinct + valor+ plebs;
    assertSumNotLessThanOne(user,sum);
    raidEntity.addSignUp(new RaidEntitySignUp(user.getName(),sum,startAtTime));
  }
 else {
    int sum=signUp.getNumberOfPeople();
    if (startAt.toLocalTime().equals(Utils.parseTime(user,signUp.getEta(),localeService))) {
      sum=sum + mystic + instinct+ valor+ plebs;
    }
 else {
      signUp.setEta(startAtTime);
      sum=mystic + instinct + valor+ plebs;
    }
    assertSumNotLessThanOne(user,sum);
    signUp.setNumberOfPeople(sum,localeService,user);
  }
  raidEntity=raidEntityRepository.save(raidEntity);
  return getRaidInstance(raidEntity);
}","public Raid modifySignUp(String raidId,User user,int mystic,int instinct,int valor,int plebs,LocalDateTime startAt){
  RaidEntity raidEntity=findEntityByRaidId(raidId);
  RaidEntitySignUp signUp=raidEntity.getSignUp(user.getName());
  final String startAtTime=Utils.printTime(startAt.toLocalTime());
  if (signUp == null) {
    final int sum=mystic + instinct + valor+ plebs;
    assertSumNotLessThanOne(user,sum);
    raidEntity.addSignUp(new RaidEntitySignUp(user.getName(),sum,startAtTime));
  }
 else {
    int sum=signUp.getNumberOfPeople();
    if (startAt.toLocalTime().equals(Utils.parseTime(user,signUp.getEta(),localeService))) {
      sum=sum + mystic + instinct+ valor+ plebs;
    }
 else {
      signUp.setEta(startAtTime);
      sum=mystic + instinct + valor+ plebs;
    }
    assertSumNotLessThanOne(user,sum);
    signUp.setNumberOfPeople(sum,localeService,user);
  }
  raidEntity=raidEntityRepository.save(raidEntity);
  return getRaidInstance(raidEntity);
}"
40459,"public Raid removeAllSignUpsAt(String raidId,LocalDateTime startAt){
  Validate.notNull(raidId,""String_Node_Str"");
  Validate.notNull(startAt,""String_Node_Str"");
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"" + raidId + ""String_Node_Str""+ printTimeIfSameDay(startAt));
  }
  RaidEntity entity=findEntityByRaidId(raidId,null);
  if (entity != null) {
    for (    RaidEntitySignUp signUp : entity.getSignUpsAsSet()) {
      if (signUp.getArrivalTime().equals(startAt.toLocalTime())) {
        RaidEntitySignUp removed=entity.removeSignUp(signUp);
        if (LOGGER.isDebugEnabled()) {
          LOGGER.debug(""String_Node_Str"" + removed);
        }
      }
    }
    entity=raidEntityRepository.save(entity);
  }
  return getRaidInstance(entity);
}","public Raid removeAllSignUpsAt(String raidId,LocalDateTime startAt){
  Validate.notNull(raidId,""String_Node_Str"");
  Validate.notNull(startAt,""String_Node_Str"");
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"" + raidId + ""String_Node_Str""+ printTimeIfSameDay(startAt));
  }
  RaidEntity entity=findEntityByRaidId(raidId);
  if (entity != null) {
    for (    RaidEntitySignUp signUp : entity.getSignUpsAsSet()) {
      if (signUp.getArrivalTime().equals(startAt.toLocalTime())) {
        RaidEntitySignUp removed=entity.removeSignUp(signUp);
        if (LOGGER.isDebugEnabled()) {
          LOGGER.debug(""String_Node_Str"" + removed);
        }
      }
    }
    entity=raidEntityRepository.save(entity);
  }
  return getRaidInstance(entity);
}"
40460,"public Raid changeEndOfRaid(String raidId,LocalDateTime newEndOfRaid,User user){
  RaidEntity raidEntity=findEntityByRaidId(raidId,user);
  raidEntity.setEndOfRaid(newEndOfRaid);
  raidEntity=raidEntityRepository.save(raidEntity);
  return getRaidInstance(raidEntity);
}","public Raid changeEndOfRaid(String raidId,LocalDateTime newEndOfRaid){
  RaidEntity raidEntity=findEntityByRaidId(raidId);
  raidEntity.setEndOfRaid(newEndOfRaid);
  raidEntity=raidEntityRepository.save(raidEntity);
  return getRaidInstance(raidEntity);
}"
40461,"public void newRaid(User raidCreator,Raid raid){
  RaidEntity raidEntity=findEntityByRaidId(raid,raidCreator);
  final String pokemonName=raid.getPokemon().getName();
  if (raidEntity != null) {
    final String existingEntityPokemon=raidEntity.getPokemon();
    final boolean oneRaidIsEx=Utils.isRaidExPokemon(pokemonName) || Utils.isRaidExPokemon(existingEntityPokemon);
    if ((!oneRaidIsEx) || Utils.raidsCollide(raid.getEndOfRaid(),raidEntity.getEndOfRaid())) {
      throw new RaidExistsException(raidCreator,getRaidInstance(raidEntity),localeService,localeService.getLocaleForUser(raidCreator));
    }
  }
  saveRaid(raidCreator,raid);
}","public void newRaid(User raidCreator,Raid raid){
  RaidEntity raidEntity=getActiveOrFallbackToExRaidEntity(raid.getGym(),raid.getRegion());
  final String pokemonName=raid.getPokemon().getName();
  if (raidEntity != null) {
    final String existingEntityPokemon=raidEntity.getPokemon();
    final boolean oneRaidIsEx=Utils.isRaidExPokemon(pokemonName) || Utils.isRaidExPokemon(existingEntityPokemon);
    if ((!oneRaidIsEx) || Utils.raidsCollide(raid.getEndOfRaid(),raidEntity.getEndOfRaid())) {
      throw new RaidExistsException(raidCreator,getRaidInstance(raidEntity),localeService,localeService.getLocaleForUser(raidCreator));
    }
  }
  saveRaid(raidCreator,raid);
}"
40462,"public void addSignUp(User user,Raid raid,SignUp theSignUp){
  RaidEntity entity=findEntityByRaidId(raid.getId(),user);
  RaidEntitySignUp entitySignUp=entity.getSignUp(user.getName());
  if (entitySignUp == null) {
    entity.addSignUp(new RaidEntitySignUp(user.getName(),theSignUp.getHowManyPeople(),Utils.printTime(theSignUp.getArrivalTime())));
  }
 else {
    entitySignUp.setNumberOfPeople(theSignUp.getHowManyPeople(),localeService,user);
    entitySignUp.setEta(Utils.printTime(theSignUp.getArrivalTime()));
  }
  raidEntityRepository.save(entity);
}","public void addSignUp(User user,Raid raid,SignUp theSignUp){
  RaidEntity entity=findEntityByRaidId(raid.getId());
  RaidEntitySignUp entitySignUp=entity.getSignUp(user.getName());
  if (entitySignUp == null) {
    entity.addSignUp(new RaidEntitySignUp(user.getName(),theSignUp.getHowManyPeople(),Utils.printTime(theSignUp.getArrivalTime())));
  }
 else {
    entitySignUp.setNumberOfPeople(theSignUp.getHowManyPeople(),localeService,user);
    entitySignUp.setEta(Utils.printTime(theSignUp.getArrivalTime()));
  }
  raidEntityRepository.save(entity);
}"
40463,"public Raid removeFromSignUp(String raidId,User user,int mystic,int instinct,int valor,int plebs,LocalDateTime startAt){
  RaidEntity raidEntity=findEntityByRaidId(raidId,user);
  if (raidEntity == null) {
    throw new UserMessedUpException(user,localeService.getMessageFor(LocaleService.NO_RAID_AT_GYM,localeService.getLocaleForUser(user)));
  }
  RaidEntitySignUp signUp=raidEntity.getSignUp(user.getName());
  final String startAtTime=Utils.printTime(startAt.toLocalTime());
  if (signUp == null) {
  }
 else   if (startAtTime.equals(signUp.getEta())) {
    final int sum=signUp.getNumberOfPeople() - mystic - instinct- valor- plebs;
    if (sum <= 0) {
      raidEntity.removeSignUp(signUp);
    }
 else {
      signUp.setNumberOfPeople(sum,localeService,user);
    }
    raidEntity=raidEntityRepository.save(raidEntity);
  }
 else {
  }
  return getRaidInstance(raidEntity);
}","public Raid removeFromSignUp(String raidId,User user,int mystic,int instinct,int valor,int plebs,LocalDateTime startAt){
  RaidEntity raidEntity=findEntityByRaidId(raidId);
  if (raidEntity == null) {
    throw new UserMessedUpException(user,localeService.getMessageFor(LocaleService.NO_RAID_AT_GYM,localeService.getLocaleForUser(user)));
  }
  RaidEntitySignUp signUp=raidEntity.getSignUp(user.getName());
  final String startAtTime=Utils.printTime(startAt.toLocalTime());
  if (signUp == null) {
  }
 else   if (startAtTime.equals(signUp.getEta())) {
    final int sum=signUp.getNumberOfPeople() - mystic - instinct- valor- plebs;
    if (sum <= 0) {
      raidEntity.removeSignUp(signUp);
    }
 else {
      signUp.setNumberOfPeople(sum,localeService,user);
    }
    raidEntity=raidEntityRepository.save(raidEntity);
  }
 else {
  }
  return getRaidInstance(raidEntity);
}"
40464,"private RaidEntity findEntityByRaidId(String raidId,User user){
  final RaidEntity raidEntity=raidId == null ? null : raidEntityRepository.findOne(raidId);
  removeRaidIfExpired(raidEntity);
  return raidEntity;
}","private RaidEntity findEntityByRaidId(String raidId){
  final RaidEntity raidEntity=raidId == null ? null : raidEntityRepository.findOne(raidId);
  removeRaidIfExpired(raidEntity);
  return raidEntity;
}"
40465,"public void removeSignUp(User user,Raid raid,SignUp theSignUp){
  RaidEntity entity=findEntityByRaidId(raid.getId(),user);
  entity.removeSignUp(new RaidEntitySignUp(user.getName(),theSignUp.getHowManyPeople(),Utils.printTime(theSignUp.getArrivalTime())));
  raidEntityRepository.save(entity);
}","public void removeSignUp(User user,Raid raid,SignUp theSignUp){
  RaidEntity entity=findEntityByRaidId(raid.getId());
  entity.removeSignUp(new RaidEntitySignUp(user.getName(),theSignUp.getHowManyPeople(),Utils.printTime(theSignUp.getArrivalTime())));
  raidEntityRepository.save(entity);
}"
40466,"@Test public void changeEndOfRaidWorks() throws Exception {
  clockService.setMockTime(LocalTime.of(10,0));
  final LocalDateTime now=clockService.getCurrentDateTime();
  final LocalTime nowTime=now.toLocalTime();
  LocalDateTime endOfRaid=now.plusMinutes(45);
  final Gym gym=gymRepository.findByName(""String_Node_Str"",uppsalaRegion);
  Raid enteiRaid=new Raid(pokemonRepository.search(""String_Node_Str"",null),endOfRaid,gym,localeService,uppsalaRegion);
  String raidCreatorName=""String_Node_Str"";
  User user=mock(User.class);
  when(user.getName()).thenReturn(raidCreatorName);
  try {
    repo.newRaid(user,enteiRaid);
  }
 catch (  RuntimeException e) {
    System.err.println(e.getMessage());
    fail(""String_Node_Str"" + e.getMessage());
  }
  Raid raid=repo.getActiveRaidOrFallbackToExRaid(gym,uppsalaRegion,user);
  Raid changedRaid=repo.changeEndOfRaid(raid.getId(),endOfRaid.plusMinutes(5),user);
  assertThat(raid.getEndOfRaid(),not(changedRaid.getEndOfRaid()));
  assertThat(changedRaid.getEndOfRaid(),is(raid.getEndOfRaid().plusMinutes(5)));
  assertThat(raid.getGym(),is(changedRaid.getGym()));
  assertThat(raid.getSignUps(),is(changedRaid.getSignUps()));
  assertThat(raid.getRegion(),is(changedRaid.getRegion()));
  assertThat(raid.getPokemon().getName(),is(changedRaid.getPokemon().getName()));
}","@Test public void changeEndOfRaidWorks() throws Exception {
  clockService.setMockTime(LocalTime.of(10,0));
  final LocalDateTime now=clockService.getCurrentDateTime();
  final LocalTime nowTime=now.toLocalTime();
  LocalDateTime endOfRaid=now.plusMinutes(45);
  final Gym gym=gymRepository.findByName(""String_Node_Str"",uppsalaRegion);
  Raid enteiRaid=new Raid(pokemonRepository.search(""String_Node_Str"",null),endOfRaid,gym,localeService,uppsalaRegion);
  String raidCreatorName=""String_Node_Str"";
  User user=mock(User.class);
  when(user.getName()).thenReturn(raidCreatorName);
  try {
    repo.newRaid(user,enteiRaid);
  }
 catch (  RuntimeException e) {
    System.err.println(e.getMessage());
    fail(""String_Node_Str"" + e.getMessage());
  }
  Raid raid=repo.getActiveRaidOrFallbackToExRaid(gym,uppsalaRegion,user);
  Raid changedRaid=repo.changeEndOfRaid(raid.getId(),endOfRaid.plusMinutes(5));
  assertThat(raid.getEndOfRaid(),not(changedRaid.getEndOfRaid()));
  assertThat(changedRaid.getEndOfRaid(),is(raid.getEndOfRaid().plusMinutes(5)));
  assertThat(raid.getGym(),is(changedRaid.getGym()));
  assertThat(raid.getSignUps(),is(changedRaid.getSignUps()));
  assertThat(raid.getRegion(),is(changedRaid.getRegion()));
  assertThat(raid.getPokemon().getName(),is(changedRaid.getPokemon().getName()));
}"
40467,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + region + '\''+ ""String_Node_Str""+ pokemonName+ '\''+ '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + region + '\''+ ""String_Node_Str""+ userId+ '\''+ ""String_Node_Str""+ pokemonName+ '\''+ '}';
}"
40468,"public void newRaid(String raidCreatorName,Raid raid){
}","public void newRaid(String raidCreatorName,Raid raid){
  RaidEntity raidEntity=getActiveOrFallbackToExRaidEntity(raid.getGym(),raid.getRegion());
  final String pokemonName=raid.getPokemon().getName();
  if (raidEntity != null) {
    final String existingEntityPokemon=raidEntity.getPokemon();
    final boolean oneRaidIsEx=Utils.isRaidExPokemon(pokemonName) || Utils.isRaidExPokemon(existingEntityPokemon);
    if ((!oneRaidIsEx) || Utils.raidsCollide(raid.getEndOfRaid(),raidEntity.getEndOfRaid())) {
      throw new RaidExistsException(raidCreatorName,getRaidInstance(raidEntity),localeService,LocaleService.DEFAULT);
    }
  }
  saveRaid(raidCreatorName,raid);
}"
40469,"private RaidEntity getActiveOrFallbackToExRaidEntity(Gym gym,String region){
  RaidEntity raidEntity=null;
  List<RaidEntity> raidEntities=raidEntityRepository.findByGymAndRegion(gym.getName(),region);
  RaidEntity exEntity=null;
  for (  RaidEntity entity : raidEntities) {
    if (entity.isActive(clockService)) {
      raidEntity=entity;
    }
 else     if (entity.isExpired(clockService)) {
      raidEntityRepository.delete(entity);
      throw new RaidNotFoundException(gym,localeService);
    }
 else     if (Utils.isRaidExPokemon(entity.getPokemon())) {
      exEntity=entity;
    }
  }
  if (raidEntity == null) {
    if (exEntity != null) {
      raidEntity=exEntity;
    }
 else {
      throw new RaidNotFoundException(gym,localeService);
    }
  }
  return raidEntity;
}","private RaidEntity getActiveOrFallbackToExRaidEntity(Gym gym,String region){
  RaidEntity raidEntity=null;
  List<RaidEntity> raidEntities=raidEntityRepository.findByGymAndRegion(gym.getName(),region);
  RaidEntity exEntity=null;
  for (  RaidEntity entity : raidEntities) {
    if (entity.isExpired(clockService)) {
      raidEntityRepository.delete(entity);
    }
 else     if (Utils.isRaidExPokemon(entity.getPokemon())) {
      exEntity=entity;
    }
 else     if (!entity.isExpired(clockService)) {
      if (raidEntity != null) {
        throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + raidEntity);
      }
      raidEntity=entity;
    }
  }
  if (raidEntity == null) {
    if (exEntity != null) {
      raidEntity=exEntity;
    }
  }
  return raidEntity;
}"
40470,"@Autowired public RaidRepository(ClockService clockService,LocaleService localeService,RaidEntityRepository raidEntityRepository,PokemonRepository pokemonRepository,GymRepository gymRepository){
  this.clockService=clockService;
  this.localeService=localeService;
  this.raidEntityRepository=raidEntityRepository;
  this.pokemonRepository=pokemonRepository;
  this.gymRepository=gymRepository;
  clockService.setMockTime(LocalTime.of(10,30));
  Utils.setClockService(clockService);
}","@Autowired public RaidRepository(ClockService clockService,LocaleService localeService,RaidEntityRepository raidEntityRepository,PokemonRepository pokemonRepository,GymRepository gymRepository){
  this.clockService=clockService;
  this.localeService=localeService;
  this.raidEntityRepository=raidEntityRepository;
  this.pokemonRepository=pokemonRepository;
  this.gymRepository=gymRepository;
  clockService.setMockTime(LocalTime.of(10,30));
  Utils.setClockService(clockService);
  removeExpiredRaids();
}"
40471,"public Raid getActiveRaidOrFallbackToExRaid(Gym gym,String region){
  RaidEntity raidEntity=getActiveOrFallbackToExRaidEntity(gym,region);
  final Raid raid=getRaidInstance(raidEntity);
  return raid;
}","public Raid getActiveRaidOrFallbackToExRaid(Gym gym,String region){
  RaidEntity raidEntity=getActiveOrFallbackToExRaidEntity(gym,region);
  if (raidEntity == null) {
    throw new RaidNotFoundException(gym,localeService);
  }
  final Raid raid=getRaidInstance(raidEntity);
  return raid;
}"
40472,"@Test public void testSignUp() throws Exception {
  clockService.setMockTime(LocalTime.of(10,0));
  final LocalDateTime now=clockService.getCurrentDateTime();
  final LocalTime nowTime=now.toLocalTime();
  LocalDateTime endOfRaid=now.plusHours(1);
  final Gym gym=gymRepository.findByName(""String_Node_Str"",uppsalaRegion);
  Raid enteiRaid=new Raid(pokemonRepository.getByName(""String_Node_Str""),endOfRaid,gym,new LocaleService(),uppsalaRegion);
  String raidCreatorName=""String_Node_Str"";
  try {
    repo.newRaid(raidCreatorName,enteiRaid);
  }
 catch (  RuntimeException e) {
    System.err.println(e.getMessage());
  }
  Raid raid=repo.getActiveRaidOrFallbackToExRaid(gym,uppsalaRegion);
  assertThat(raid,is(enteiRaid));
  String userName=""String_Node_Str"";
  int howManyPeople=3;
  LocalTime arrivalTime=nowTime.plusMinutes(30);
  raid.signUp(userName,howManyPeople,arrivalTime,repo);
  assertThat(raid.getSignUps().size(),is(1));
  assertThat(raid.getNumberOfPeopleSignedUp(),is(howManyPeople));
  final Raid raidFromDb=repo.getActiveRaidOrFallbackToExRaid(gym,uppsalaRegion);
  assertThat(raidFromDb,is(raid));
  assertThat(raidFromDb.getSignUps().size(),is(1));
}","@Test public void testSignUp() throws Exception {
  clockService.setMockTime(LocalTime.of(10,0));
  final LocalDateTime now=clockService.getCurrentDateTime();
  final LocalTime nowTime=now.toLocalTime();
  LocalDateTime endOfRaid=now.plusMinutes(45);
  final Gym gym=gymRepository.findByName(""String_Node_Str"",uppsalaRegion);
  Raid enteiRaid=new Raid(pokemonRepository.getByName(""String_Node_Str""),endOfRaid,gym,new LocaleService(),uppsalaRegion);
  String raidCreatorName=""String_Node_Str"";
  try {
    repo.newRaid(raidCreatorName,enteiRaid);
  }
 catch (  RuntimeException e) {
    System.err.println(e.getMessage());
    fail(""String_Node_Str"" + e.getMessage());
  }
  Raid raid=repo.getActiveRaidOrFallbackToExRaid(gym,uppsalaRegion);
  assertThat(raid,is(enteiRaid));
  String userName=""String_Node_Str"";
  int howManyPeople=3;
  LocalTime arrivalTime=nowTime.plusMinutes(30);
  raid.signUp(userName,howManyPeople,arrivalTime,repo);
  assertThat(raid.getSignUps().size(),is(1));
  assertThat(raid.getNumberOfPeopleSignedUp(),is(howManyPeople));
  final Raid raidFromDb=repo.getActiveRaidOrFallbackToExRaid(gym,uppsalaRegion);
  assertThat(raidFromDb,is(raid));
  assertThat(raidFromDb.getSignUps().size(),is(1));
}"
40473,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + region + '\''+ ""String_Node_Str""+ pokemonName+ '\''+ '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + region + '\''+ ""String_Node_Str""+ userId+ '\''+ ""String_Node_Str""+ pokemonName+ '\''+ '}';
}"
40474,"public void newRaid(String raidCreatorName,Raid raid){
  final Pair<String,Raid> pair=raids.get(raid.getGym());
  if (pair != null && (raid.equals(pair.getRight()) || raid.getGym().equals(pair.getRight().getGym()))) {
    throw new RaidExistsException(raidCreatorName,raid);
  }
 else   if (pair == null) {
    raids.put(raid.getGym(),Pair.of(raidCreatorName,raid));
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + raid);
  }
}","public void newRaid(String raidCreatorName,Raid raid){
  final Pair<String,Raid> pair=raids.get(raid.getGym());
  if (pair != null && (raid.equals(pair.getRight()) || raid.getGym().equals(pair.getRight().getGym()))) {
    throw new RaidExistsException(raidCreatorName,pair.getRight());
  }
 else   if (pair == null) {
    raids.put(raid.getGym(),Pair.of(raidCreatorName,raid));
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + raid);
  }
}"
40475,"public static String printTime(LocalTime time){
  return time.format(dateTimeFormatter);
}","public static String printTime(LocalTime time){
  return time.format(dateTimePrintFormatter);
}"
40476,"@Override protected void execute(CommandEvent commandEvent){
  try {
    final String userName=commandEvent.getAuthor().getName();
    final String[] args=commandEvent.getArgs().split(""String_Node_Str"");
    String pokemonName=args[0];
    final Pokemon pokemon=pokemonRepository.getByName(pokemonName);
    String timeString=args[1];
    LocalTime endsAt=LocalTime.parse(timeString,Utils.dateTimeFormatter);
    assertGivenTimeNotBeforeNow(userName,endsAt);
    StringBuilder gymNameBuilder=new StringBuilder();
    for (int i=2; i < args.length; i++) {
      gymNameBuilder.append(args[i]).append(""String_Node_Str"");
    }
    String gymName=gymNameBuilder.toString().trim();
    final Raid raid=new Raid(pokemon,endsAt,gymRepository.search(userName,gymName));
    raidRepository.newRaid(userName,raid);
    commandEvent.reply(""String_Node_Str"" + raid);
  }
 catch (  Throwable t) {
    commandEvent.reply(t.getMessage());
  }
}","@Override protected void execute(CommandEvent commandEvent){
  try {
    final String userName=commandEvent.getAuthor().getName();
    final String[] args=commandEvent.getArgs().split(""String_Node_Str"");
    String pokemonName=args[0];
    final Pokemon pokemon=pokemonRepository.getByName(pokemonName);
    String timeString=args[1];
    LocalTime endsAt=LocalTime.parse(timeString,Utils.dateTimeParseFormatter);
    assertTimeNotMoreThanTwoHoursFromNow(userName,endsAt);
    assertTimeNotInNoRaidTimespan(userName,endsAt);
    assertGivenTimeNotBeforeNow(userName,endsAt);
    StringBuilder gymNameBuilder=new StringBuilder();
    for (int i=2; i < args.length; i++) {
      gymNameBuilder.append(args[i]).append(""String_Node_Str"");
    }
    String gymName=gymNameBuilder.toString().trim();
    final Raid raid=new Raid(pokemon,endsAt,gymRepository.search(userName,gymName));
    raidRepository.newRaid(userName,raid);
    commandEvent.reply(""String_Node_Str"" + raid);
  }
 catch (  Throwable t) {
    commandEvent.reply(t.getMessage());
  }
}"
40477,"@Override protected void execute(CommandEvent commandEvent){
  try {
    final String userName=commandEvent.getAuthor().getName();
    final String[] args=commandEvent.getArgs().split(""String_Node_Str"");
    String people=args[0];
    Integer numberOfPeople;
    try {
      numberOfPeople=new Integer(people);
      if (numberOfPeople < 1 || numberOfPeople > highLimitForSignUps) {
        throw new RuntimeException();
      }
    }
 catch (    RuntimeException e) {
      throw new UserMessedUpException(userName,""String_Node_Str"" + people + ""String_Node_Str""+ highLimitForSignUps+ ""String_Node_Str"");
    }
    String timeString=args[1];
    StringBuilder gymNameBuilder=new StringBuilder();
    for (int i=2; i < args.length; i++) {
      gymNameBuilder.append(args[i]).append(""String_Node_Str"");
    }
    String gymName=gymNameBuilder.toString().trim();
    final Gym gym=gymRepository.findByName(gymName);
    final Raid raid=raidRepository.getRaid(gym);
    LocalTime eta=LocalTime.parse(timeString,Utils.dateTimeFormatter);
    assertEtaNotAfterRaidEnd(userName,raid,eta);
    assertGivenTimeNotBeforeNow(userName,eta);
    raid.signUp(userName,numberOfPeople,eta);
    commandEvent.reply(userName + ""String_Node_Str"" + gym.getName()+ ""String_Node_Str""+ (raid.getSignUps().size() > 1 ? ""String_Node_Str"" + raid.getSignUps() : ""String_Node_Str""));
  }
 catch (  Throwable t) {
    commandEvent.reply(t.getMessage());
  }
}","@Override protected void execute(CommandEvent commandEvent){
  try {
    final String userName=commandEvent.getAuthor().getName();
    final String[] args=commandEvent.getArgs().split(""String_Node_Str"");
    String people=args[0];
    Integer numberOfPeople;
    try {
      numberOfPeople=new Integer(people);
      if (numberOfPeople < 1 || numberOfPeople > highLimitForSignUps) {
        throw new RuntimeException();
      }
    }
 catch (    RuntimeException e) {
      throw new UserMessedUpException(userName,""String_Node_Str"" + people + ""String_Node_Str""+ highLimitForSignUps+ ""String_Node_Str"");
    }
    String timeString=args[1];
    StringBuilder gymNameBuilder=new StringBuilder();
    for (int i=2; i < args.length; i++) {
      gymNameBuilder.append(args[i]).append(""String_Node_Str"");
    }
    String gymName=gymNameBuilder.toString().trim();
    final Gym gym=gymRepository.findByName(gymName);
    final Raid raid=raidRepository.getRaid(gym);
    LocalTime eta=LocalTime.parse(timeString,Utils.dateTimeParseFormatter);
    assertEtaNotAfterRaidEnd(userName,raid,eta);
    assertGivenTimeNotBeforeNow(userName,eta);
    raid.signUp(userName,numberOfPeople,eta);
    commandEvent.reply(userName + ""String_Node_Str"" + gym.getName()+ ""String_Node_Str""+ (raid.getSignUps().size() > 1 ? ""String_Node_Str"" + raid.getSignUps() : ""String_Node_Str""));
  }
 catch (  Throwable t) {
    commandEvent.reply(t.getMessage());
  }
}"
40478,"@Override protected void execute(CommandEvent commandEvent){
  try {
    String gymName=commandEvent.getArgs();
    final Gym gym=gymRepository.search(commandEvent.getAuthor().getName(),gymName);
    String url=Utils.getMapUrl(gym);
    commandEvent.reply(new EmbedBuilder().setImage(url).setTitle(gym.getName(),url).build());
  }
 catch (  Throwable t) {
    commandEvent.reply(t.getMessage());
  }
}","@Override protected void execute(CommandEvent commandEvent){
  try {
    String gymName=commandEvent.getArgs();
    final Gym gym=gymRepository.search(commandEvent.getAuthor().getName(),gymName);
    String staticUrl=Utils.getStaticMapUrl(gym);
    String nonStaticUrl=Utils.getNonStaticMapUrl(gym);
    commandEvent.reply(new EmbedBuilder().setImage(staticUrl).setTitle(gym.getName(),nonStaticUrl).build());
  }
 catch (  Throwable t) {
    commandEvent.reply(t.getMessage());
  }
}"
40479,"public RaidExistsException(String raidCreatorName,Raid raid){
  super(""String_Node_Str"" + raidCreatorName + ""String_Node_Str""+ raid.getGym().getName()+ ""String_Node_Str""+ raid.getPokemon().getName()+ ""String_Node_Str"");
}","public RaidExistsException(String raidCreatorName,Raid existingRaid){
  super(""String_Node_Str"" + raidCreatorName + ""String_Node_Str""+ existingRaid.getGym().getName()+ ""String_Node_Str""+ existingRaid.getPokemon().getName()+ ""String_Node_Str"");
}"
40480,"@Override protected void execute(CommandEvent commandEvent){
  try {
    String pokemonName=commandEvent.getArgs();
    final Pokemon pokemon=repo.getByName(pokemonName);
    final RaidBossCounters counters=raidInfoService.getCounters(pokemon);
    final String maxCp=raidInfoService.getMaxCp(pokemon);
    StringBuilder builder=new StringBuilder();
    builder.append(""String_Node_Str"").append(pokemon).append(""String_Node_Str"").append(""String_Node_Str"").append(pokemon.getWeaknesses()).append(""String_Node_Str"").append(""String_Node_Str"").append(pokemon.getResistant()).append(""String_Node_Str"");
    if (counters != null && counters.getSupremeCounters().size() > 0) {
      builder.append(""String_Node_Str"");
      final Optional<CounterPokemon> bestCounterPokemon=counters.getSupremeCounters().stream().findFirst();
      builder.append(bestCounterPokemon.get());
      if (counters.getSupremeCounters().size() > 1 || counters.getGoodCounters().size() > 0) {
        final LinkedList<CounterPokemon> totalCounters=new LinkedList<>(counters.getSupremeCounters());
        totalCounters.addAll(counters.getGoodCounters());
        List<String> otherCounters=totalCounters.stream().skip(1).map(CounterPokemon::getCounterPokemonName).collect(Collectors.toList());
        builder.append(""String_Node_Str"");
        builder.append(StringUtils.join(otherCounters.toArray(),""String_Node_Str""));
        builder.append(""String_Node_Str"");
      }
    }
    if (maxCp != null) {
      builder.append(""String_Node_Str"").append(maxCp).append(""String_Node_Str"");
    }
    commandEvent.reply(builder.toString());
  }
 catch (  Throwable t) {
    commandEvent.reply(t.getMessage());
  }
}","@Override protected void execute(CommandEvent commandEvent){
  try {
    String pokemonName=commandEvent.getArgs();
    final Pokemon pokemon=repo.getByName(pokemonName);
    final RaidBossCounters counters=raidInfoService.getCounters(pokemon);
    final String maxCp=raidInfoService.getMaxCp(pokemon);
    StringBuilder builder=new StringBuilder();
    builder.append(""String_Node_Str"").append(pokemon).append(""String_Node_Str"").append(""String_Node_Str"").append(pokemon.getWeaknesses()).append(""String_Node_Str"").append(""String_Node_Str"").append(pokemon.getResistant()).append(""String_Node_Str"");
    appendBestCounters(counters,builder);
    if (maxCp != null) {
      builder.append(""String_Node_Str"").append(maxCp).append(""String_Node_Str"");
    }
    commandEvent.reply(builder.toString());
  }
 catch (  Throwable t) {
    commandEvent.reply(t.getMessage());
  }
}"
40481,"public CounterTextFileParser(String path,String pokemonName,PokemonRepository pokemonRepository){
  try {
    final InputStream inputStream=CounterTextFileParser.class.getResourceAsStream(path + ""String_Node_Str"" + pokemonName.toLowerCase()+ ""String_Node_Str"");
    final InputStreamReader inputStreamReader=new InputStreamReader(inputStream);
    BufferedReader br=new BufferedReader(inputStreamReader);
    String line=br.readLine();
    if (!line.contains(""String_Node_Str"")) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    boolean supreme=true;
    br.readLine();
    while (line != null) {
      line=br.readLine();
      if (line == null) {
        break;
      }
      line=br.readLine();
      if (line == null) {
        break;
      }
      String counterPokemonName=line.trim();
      if (counterPokemonName != null && counterPokemonName.length() > 0) {
        Set<String> moves=new HashSet<>();
        while (((line=br.readLine()) != null) && !(line.equals(""String_Node_Str""))) {
          final String trimmedLine=line.trim();
          final Pokemon pokemon=pokemonRepository.getPokemon(trimmedLine);
          if (pokemon != null) {
            break;
          }
          if ((!trimmedLine.contains(""String_Node_Str"")) && (!trimmedLine.contains(""String_Node_Str""))) {
            moves.add(trimmedLine);
          }
          if (trimmedLine.contains(""String_Node_Str"")) {
            line=br.readLine();
            supreme=false;
            break;
          }
        }
        CounterPokemon counterPokemon=new CounterPokemon(counterPokemonName,moves);
        if (supreme) {
          bestCounters.add(counterPokemon);
        }
 else {
          goodCounters.add(counterPokemon);
        }
      }
    }
  }
 catch (  Throwable e) {
    throw new RuntimeException(e.getMessage());
  }
}","public CounterTextFileParser(String path,String pokemonName,PokemonRepository pokemonRepository){
  try {
    System.out.println(""String_Node_Str"" + pokemonName + ""String_Node_Str"");
    final InputStream inputStream=CounterTextFileParser.class.getResourceAsStream(path + ""String_Node_Str"" + pokemonName.toLowerCase()+ ""String_Node_Str"");
    final InputStreamReader inputStreamReader=new InputStreamReader(inputStream);
    BufferedReader br=new BufferedReader(inputStreamReader);
    String line=br.readLine();
    if (!line.contains(""String_Node_Str"")) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    boolean supreme=true;
    br.readLine();
    while (line != null) {
      line=br.readLine();
      if (line == null) {
        break;
      }
      line=br.readLine();
      if (line == null) {
        break;
      }
      String counterPokemonName=line.trim();
      if (counterPokemonName != null && counterPokemonName.length() > 0) {
        Set<String> moves=new HashSet<>();
        while (((line=br.readLine()) != null) && !(line.equals(""String_Node_Str""))) {
          final String trimmedLine=line.trim();
          final Pokemon pokemon=pokemonRepository.getPokemon(trimmedLine);
          if (pokemon != null) {
            break;
          }
          if ((!trimmedLine.contains(""String_Node_Str"")) && (!trimmedLine.contains(""String_Node_Str""))) {
            moves.add(trimmedLine);
          }
          if (trimmedLine.contains(""String_Node_Str"")) {
            line=br.readLine();
            supreme=false;
            break;
          }
        }
        CounterPokemon counterPokemon=new CounterPokemon(counterPokemonName,moves);
        if (supreme) {
          System.out.println(""String_Node_Str"" + counterPokemon);
          bestCounters.add(counterPokemon);
        }
 else {
          System.out.println(""String_Node_Str"" + counterPokemon);
          goodCounters.add(counterPokemon);
        }
      }
    }
  }
 catch (  Throwable e) {
    throw new RuntimeException(e.getMessage());
  }
}"
40482,"public CounterTextFileParser(String path,String pokemonName,PokemonRepository pokemonRepository){
  try {
    System.out.println(""String_Node_Str"" + pokemonName + ""String_Node_Str"");
    final InputStream inputStream=CounterTextFileParser.class.getResourceAsStream(path + ""String_Node_Str"" + pokemonName.toLowerCase()+ ""String_Node_Str"");
    final InputStreamReader inputStreamReader=new InputStreamReader(inputStream);
    BufferedReader br=new BufferedReader(inputStreamReader);
    String line=br.readLine();
    if (!line.contains(""String_Node_Str"")) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    boolean supreme=true;
    br.readLine();
    while (line != null) {
      line=br.readLine();
      if (line == null) {
        break;
      }
      line=br.readLine();
      if (line == null) {
        break;
      }
      String counterPokemonName=line.trim();
      if (counterPokemonName != null && counterPokemonName.length() > 0) {
        Set<String> moves=new HashSet<>();
        while (((line=br.readLine()) != null) && !(line.equals(""String_Node_Str""))) {
          final String trimmedLine=line.trim();
          final Pokemon pokemon=pokemonRepository.getPokemon(trimmedLine);
          if (pokemon != null) {
            break;
          }
          if ((!trimmedLine.contains(""String_Node_Str"")) && (!trimmedLine.contains(""String_Node_Str""))) {
            moves.add(trimmedLine);
          }
          if (trimmedLine.contains(""String_Node_Str"")) {
            line=br.readLine();
            supreme=false;
            break;
          }
        }
        CounterPokemon counterPokemon=new CounterPokemon(counterPokemonName,moves);
        if (supreme) {
          System.out.println(""String_Node_Str"" + counterPokemon);
          bestCounters.add(counterPokemon);
        }
 else {
          System.out.println(""String_Node_Str"" + counterPokemon);
          goodCounters.add(counterPokemon);
        }
      }
    }
  }
 catch (  Throwable e) {
    throw new RuntimeException(e.getMessage());
  }
}","public CounterTextFileParser(String path,String pokemonName,PokemonRepository pokemonRepository){
  try {
    System.out.println(""String_Node_Str"" + pokemonName + ""String_Node_Str"");
    final InputStream inputStream=CounterTextFileParser.class.getResourceAsStream(path + ""String_Node_Str"" + pokemonName.toLowerCase()+ ""String_Node_Str"");
    final InputStreamReader inputStreamReader=new InputStreamReader(inputStream);
    BufferedReader br=new BufferedReader(inputStreamReader);
    String line=br.readLine();
    if (!line.contains(""String_Node_Str"")) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    boolean supreme=true;
    boolean supremeDone=false;
    br.readLine();
    while (line != null) {
      line=br.readLine();
      if (line == null) {
        break;
      }
      line=br.readLine();
      if (line == null) {
        break;
      }
      String counterPokemonName=line.trim();
      final Pokemon p=pokemonRepository.getByName(counterPokemonName);
      if (p == null) {
        throw new IllegalStateException(""String_Node_Str"" + counterPokemonName);
      }
      if (counterPokemonName != null && counterPokemonName.length() > 0) {
        Set<String> moves=new HashSet<>();
        while (((line=br.readLine()) != null) && !(line.equals(""String_Node_Str""))) {
          final String trimmedLine=line.trim();
          final Pokemon pokemon=pokemonRepository.getPokemon(trimmedLine);
          if (pokemon != null) {
            break;
          }
          if ((!trimmedLine.contains(""String_Node_Str"")) && (!trimmedLine.contains(""String_Node_Str"")) && (!trimmedLine.contains(""String_Node_Str""))) {
            moves.add(trimmedLine);
          }
          if (trimmedLine.contains(""String_Node_Str"")) {
            line=br.readLine();
            supremeDone=true;
            break;
          }
        }
        CounterPokemon counterPokemon=new CounterPokemon(counterPokemonName,moves);
        if (supreme) {
          System.out.println(""String_Node_Str"" + counterPokemon);
          bestCounters.add(counterPokemon);
        }
 else {
          System.out.println(""String_Node_Str"" + counterPokemon);
          goodCounters.add(counterPokemon);
        }
        if (supremeDone) {
          supreme=false;
        }
      }
    }
  }
 catch (  Throwable e) {
    throw new RuntimeException(e.getMessage());
  }
}"
40483,"private static ValiWapper getFieldsFromCache(Class c){
  ValiWapper wapper=cache.get(c);
  if (wapper == null) {
    wapper=new ValiWapper();
    Field[] cFields=c.getDeclaredFields();
    NotNull notNull;
    Reg reg;
    for (    Field field : cFields) {
      notNull=field.getAnnotation(NotNull.class);
      reg=field.getAnnotation(Reg.class);
      if (notNull != null || reg != null) {
        if (notNull != null) {
          ValiModel valiModel=new ValiModel(notNull.order(),notNull.error(),null,field);
          wapper.addValiModel(valiModel);
        }
        if (reg != null) {
          ValiModel valiModel=new ValiModel(reg.order(),reg.error(),reg.reg(),field);
          wapper.addValiModel(valiModel);
        }
      }
    }
    Method[] methods=c.getMethods();
    for (    Method method : methods) {
      ValiSuccess valiSuccess=method.getAnnotation(ValiSuccess.class);
      if (valiSuccess != null) {
        wapper.setMethod(method);
      }
    }
    cache.put(c,wapper);
  }
  return wapper;
}","private static ValiWapper getFieldsFromCache(Class c){
  ValiWapper wapper=cache.get(c);
  if (wapper == null) {
    wapper=new ValiWapper();
    Field[] cFields=c.getDeclaredFields();
    NotNull notNull;
    Reg reg;
    for (    Field field : cFields) {
      field.setAccessible(true);
      notNull=field.getAnnotation(NotNull.class);
      reg=field.getAnnotation(Reg.class);
      if (notNull != null || reg != null) {
        if (notNull != null) {
          ValiModel valiModel=new ValiModel(notNull.order(),notNull.error(),null,field);
          wapper.addValiModel(valiModel);
        }
        if (reg != null) {
          ValiModel valiModel=new ValiModel(reg.order(),reg.error(),reg.reg(),field);
          wapper.addValiModel(valiModel);
        }
      }
    }
    Method[] methods=c.getMethods();
    for (    Method method : methods) {
      ValiSuccess valiSuccess=method.getAnnotation(ValiSuccess.class);
      if (valiSuccess != null) {
        wapper.setMethod(method);
      }
    }
    cache.put(c,wapper);
  }
  return wapper;
}"
40484,"public static void vali(Object target){
  ValiWapper wapper=getFieldsFromCache(target.getClass());
  if (wapper.getValiModel() == null)   return;
  Class textInputLayout=null;
  try {
    textInputLayout=Class.forName(""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
  if (textInputLayout == null)   return;
  List<ValiModel> models=wapper.getValiModel();
  Collections.sort(models,new Comparator<ValiModel>(){
    @Override public int compare(    ValiModel o1,    ValiModel o2){
      return o1.getOrder() - o2.getOrder();
    }
  }
);
  for (  ValiModel model : models) {
    try {
      Class fieldType=model.getField().getType();
      if (textInputLayout.isAssignableFrom(fieldType)) {
        TextInputLayout targetField=(TextInputLayout)model.getField().get(target);
        String result=targetField.getEditText().getText().toString();
        if (TextUtils.isEmpty(model.getReg())) {
          if (TextUtils.isEmpty(result)) {
            targetField.setError(targetField.getContext().getString(model.getError()));
            return;
          }
 else {
            targetField.setError(""String_Node_Str"");
          }
        }
 else         if (!result.matches(model.getReg())) {
          targetField.setError(targetField.getContext().getString(model.getError()));
          return;
        }
 else {
          targetField.setError(""String_Node_Str"");
        }
      }
    }
 catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
  }
  if (wapper.getMethod() != null) {
    try {
      wapper.getMethod().invoke(target);
    }
 catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
  }
}","public static void vali(Object target){
  ValiWapper wapper=getFieldsFromCache(target.getClass());
  if (wapper.getValiModel() == null)   return;
  Class textInputLayout=null;
  try {
    textInputLayout=Class.forName(""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
  if (textInputLayout == null)   return;
  List<ValiModel> models=wapper.getValiModel();
  Collections.sort(models,new Comparator<ValiModel>(){
    @Override public int compare(    ValiModel o1,    ValiModel o2){
      return o1.getOrder() - o2.getOrder();
    }
  }
);
  for (  ValiModel model : models) {
    try {
      Class fieldType=model.getField().getType();
      if (textInputLayout.isAssignableFrom(fieldType)) {
        Field field=model.getField();
        field.setAccessible(true);
        TextInputLayout targetField=(TextInputLayout)model.getField().get(target);
        String result=targetField.getEditText().getText().toString();
        if (TextUtils.isEmpty(model.getReg())) {
          if (TextUtils.isEmpty(result)) {
            targetField.setError(targetField.getContext().getString(model.getError()));
            return;
          }
 else {
            targetField.setError(""String_Node_Str"");
          }
        }
 else         if (!result.matches(model.getReg())) {
          targetField.setError(targetField.getContext().getString(model.getError()));
          return;
        }
 else {
          targetField.setError(""String_Node_Str"");
        }
      }
    }
 catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
  }
  if (wapper.getMethod() != null) {
    try {
      wapper.getMethod().invoke(target);
    }
 catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
  }
}"
40485,"@PostMapping(""String_Node_Str"") public EthTransferContractView createEthTransaction(@RequestParam(""String_Node_Str"") String returnArkAddress,@RequestParam(""String_Node_Str"") String recipientEthAddress,@RequestParam(""String_Node_Str"") String ethAmountStr){
  BigDecimal ethAmount=new BigDecimal(ethAmountStr).setScale(8,BigDecimal.ROUND_HALF_UP);
  BigDecimal arkPerEthExchangeRate=exchangeRateService.getRate(""String_Node_Str"",""String_Node_Str"");
  BigDecimal baseArkCost=ethAmount.multiply(arkPerEthExchangeRate);
  BigDecimal arkFeeTotal=baseArkCost.multiply(arkFeePercent.divide(new BigDecimal(""String_Node_Str""),BigDecimal.ROUND_UP).add(arkFlatFee)).add(arkTransactionFee);
  BigDecimal requiredArkCost=baseArkCost.add(arkFeeTotal);
  EthTransferContractEntity entity=new EthTransferContractEntity();
  entity.setToken(UUID.randomUUID().toString());
  entity.setCreatedAt(ZonedDateTime.from(Instant.now().atOffset(ZoneOffset.UTC)));
  entity.setStatus(EthTransferContractEntity.STATUS_PENDING);
  entity.setServiceArkAddress(serviceArkAddress);
  entity.setArkFlatFee(arkFlatFee);
  entity.setArkFeePercent(arkFeePercent);
  entity.setArkFeeTotal(arkFeeTotal);
  entity.setRequiredArkAmount(requiredArkCost.setScale(8,BigDecimal.ROUND_UP));
  entity.setReturnArkAddress(returnArkAddress);
  entity.setRecipientEthAddress(recipientEthAddress);
  entity.setEthAmount(ethAmount);
  entity.setArkPerEthExchangeRate(arkPerEthExchangeRate.setScale(8,BigDecimal.ROUND_UP));
  ethTransferContractRepository.save(entity);
  CreateMessageRequest createMessageRequest=new CreateMessageRequest();
  createMessageRequest.setCallbackUrl(""String_Node_Str"");
  createMessageRequest.setToken(entity.getToken());
  listenerRestTemplate.postForObject(""String_Node_Str"",createMessageRequest,Void.class);
  return ethTransferContractViewMapper.map(entity);
}","@PostMapping(""String_Node_Str"") public EthTransferContractView createEthTransaction(@RequestParam(""String_Node_Str"") String returnArkAddress,@RequestParam(""String_Node_Str"") String recipientEthAddress,@RequestParam(""String_Node_Str"") String ethAmountStr){
  BigDecimal ethAmount=new BigDecimal(ethAmountStr).setScale(8,BigDecimal.ROUND_HALF_UP);
  BigDecimal arkPerEthExchangeRate=exchangeRateService.getRate(""String_Node_Str"",""String_Node_Str"");
  BigDecimal baseArkCost=ethAmount.multiply(arkPerEthExchangeRate);
  BigDecimal arkFeeTotal=baseArkCost.multiply(arkFeePercent.divide(new BigDecimal(""String_Node_Str""),BigDecimal.ROUND_UP)).add(arkFlatFee).add(arkTransactionFee);
  BigDecimal requiredArkCost=baseArkCost.add(arkFeeTotal);
  EthTransferContractEntity entity=new EthTransferContractEntity();
  entity.setToken(UUID.randomUUID().toString());
  entity.setCreatedAt(ZonedDateTime.from(Instant.now().atOffset(ZoneOffset.UTC)));
  entity.setStatus(EthTransferContractEntity.STATUS_PENDING);
  entity.setServiceArkAddress(serviceArkAddress);
  entity.setArkFlatFee(arkFlatFee);
  entity.setArkFeePercent(arkFeePercent);
  entity.setArkFeeTotal(arkFeeTotal);
  entity.setRequiredArkAmount(requiredArkCost.setScale(8,BigDecimal.ROUND_UP));
  entity.setReturnArkAddress(returnArkAddress);
  entity.setRecipientEthAddress(recipientEthAddress);
  entity.setEthAmount(ethAmount);
  entity.setArkPerEthExchangeRate(arkPerEthExchangeRate.setScale(8,BigDecimal.ROUND_UP));
  ethTransferContractRepository.save(entity);
  CreateMessageRequest createMessageRequest=new CreateMessageRequest();
  createMessageRequest.setCallbackUrl(""String_Node_Str"");
  createMessageRequest.setToken(entity.getToken());
  listenerRestTemplate.postForObject(""String_Node_Str"",createMessageRequest,Void.class);
  return ethTransferContractViewMapper.map(entity);
}"
40486,"/** 
 * Run every scan in the background, with 10 seconds between scans.
 */
@Scheduled(fixedDelay=1000) public void scanTransactions(){
  try {
    Integer limit=50;
    for (Integer offset=0; offset < scanDepthTransactions; offset+=limit) {
      arkClient.getTransactions(offset).stream().forEach(transaction -> {
        if (StringUtils.isEmpty(transaction.getVendorField())) {
          return;
        }
        Message message=messageRepository.findOneByToken(transaction.getVendorField());
        if (message != null) {
          TransactionMatch transactionMatch=new TransactionMatch(transaction.getId(),message.getToken());
          try {
            log.info(""String_Node_Str"" + message.getCallbackUrl() + ""String_Node_Str""+ message);
            callbackRestTemplate.postForEntity(message.getCallbackUrl(),transactionMatch,Void.class);
          }
 catch (          RestClientResponseException e) {
            log.error(""String_Node_Str"" + message.getCallbackUrl(),e);
            throw e;
          }
        }
      }
);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}","/** 
 * Run every scan in the background, with 10 seconds between scans.
 */
@Scheduled(fixedDelay=1000) public void scanTransactions(){
  try {
    Integer limit=50;
    for (Integer offset=0; offset < scanDepthTransactions; offset+=limit) {
      arkClient.getTransactions(offset).stream().forEach(transaction -> {
        if (StringUtils.isEmpty(transaction.getVendorField())) {
          return;
        }
        Message message=messageRepository.findOneByToken(transaction.getVendorField());
        if (message != null) {
          TransactionMatch transactionMatch=new TransactionMatch(transaction.getId(),message.getToken());
          try {
            callbackRestTemplate.postForEntity(message.getCallbackUrl(),transactionMatch,Void.class);
          }
 catch (          RestClientResponseException e) {
            log.error(""String_Node_Str"" + message.getCallbackUrl(),e);
            throw e;
          }
        }
      }
);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}"
40487,"private static ValiWapper getFieldsFromCache(Class c){
  ValiWapper wapper=cache.get(c);
  if (wapper == null) {
    wapper=new ValiWapper();
    Field[] cFields=c.getDeclaredFields();
    NotNull notNull;
    Reg reg;
    for (    Field field : cFields) {
      notNull=field.getAnnotation(NotNull.class);
      reg=field.getAnnotation(Reg.class);
      if (notNull != null || reg != null) {
        if (notNull != null) {
          ValiModel valiModel=new ValiModel(notNull.order(),notNull.error(),null,field);
          wapper.addValiModel(valiModel);
        }
        if (reg != null) {
          ValiModel valiModel=new ValiModel(reg.order(),reg.error(),reg.reg(),field);
          wapper.addValiModel(valiModel);
        }
      }
    }
    Method[] methods=c.getMethods();
    for (    Method method : methods) {
      ValiSuccess valiSuccess=method.getAnnotation(ValiSuccess.class);
      if (valiSuccess != null) {
        wapper.setMethod(method);
      }
    }
    cache.put(c,wapper);
  }
  return wapper;
}","private static ValiWapper getFieldsFromCache(Class c){
  ValiWapper wapper=cache.get(c);
  if (wapper == null) {
    wapper=new ValiWapper();
    Field[] cFields=c.getDeclaredFields();
    NotNull notNull;
    Reg reg;
    for (    Field field : cFields) {
      field.setAccessible(true);
      notNull=field.getAnnotation(NotNull.class);
      reg=field.getAnnotation(Reg.class);
      if (notNull != null || reg != null) {
        if (notNull != null) {
          ValiModel valiModel=new ValiModel(notNull.order(),notNull.error(),null,field);
          wapper.addValiModel(valiModel);
        }
        if (reg != null) {
          ValiModel valiModel=new ValiModel(reg.order(),reg.error(),reg.reg(),field);
          wapper.addValiModel(valiModel);
        }
      }
    }
    Method[] methods=c.getMethods();
    for (    Method method : methods) {
      ValiSuccess valiSuccess=method.getAnnotation(ValiSuccess.class);
      if (valiSuccess != null) {
        wapper.setMethod(method);
      }
    }
    cache.put(c,wapper);
  }
  return wapper;
}"
40488,"public static void vali(Object target){
  ValiWapper wapper=getFieldsFromCache(target.getClass());
  if (wapper.getValiModel() == null)   return;
  Class textInputLayout=null;
  try {
    textInputLayout=Class.forName(""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
  if (textInputLayout == null)   return;
  List<ValiModel> models=wapper.getValiModel();
  Collections.sort(models,new Comparator<ValiModel>(){
    @Override public int compare(    ValiModel o1,    ValiModel o2){
      return o1.getOrder() - o2.getOrder();
    }
  }
);
  for (  ValiModel model : models) {
    try {
      Class fieldType=model.getField().getType();
      if (textInputLayout.isAssignableFrom(fieldType)) {
        TextInputLayout targetField=(TextInputLayout)model.getField().get(target);
        String result=targetField.getEditText().getText().toString();
        if (TextUtils.isEmpty(model.getReg())) {
          if (TextUtils.isEmpty(result)) {
            targetField.setError(targetField.getContext().getString(model.getError()));
            return;
          }
 else {
            targetField.setError(""String_Node_Str"");
          }
        }
 else         if (!result.matches(model.getReg())) {
          targetField.setError(targetField.getContext().getString(model.getError()));
          return;
        }
 else {
          targetField.setError(""String_Node_Str"");
        }
      }
    }
 catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
  }
  if (wapper.getMethod() != null) {
    try {
      wapper.getMethod().invoke(target);
    }
 catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
  }
}","public static void vali(Object target){
  ValiWapper wapper=getFieldsFromCache(target.getClass());
  if (wapper.getValiModel() == null)   return;
  Class textInputLayout=null;
  try {
    textInputLayout=Class.forName(""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
  if (textInputLayout == null)   return;
  List<ValiModel> models=wapper.getValiModel();
  Collections.sort(models,new Comparator<ValiModel>(){
    @Override public int compare(    ValiModel o1,    ValiModel o2){
      return o1.getOrder() - o2.getOrder();
    }
  }
);
  for (  ValiModel model : models) {
    try {
      Class fieldType=model.getField().getType();
      if (textInputLayout.isAssignableFrom(fieldType)) {
        Field field=model.getField();
        field.setAccessible(true);
        TextInputLayout targetField=(TextInputLayout)model.getField().get(target);
        String result=targetField.getEditText().getText().toString();
        if (TextUtils.isEmpty(model.getReg())) {
          if (TextUtils.isEmpty(result)) {
            targetField.setError(targetField.getContext().getString(model.getError()));
            return;
          }
 else {
            targetField.setError(""String_Node_Str"");
          }
        }
 else         if (!result.matches(model.getReg())) {
          targetField.setError(targetField.getContext().getString(model.getError()));
          return;
        }
 else {
          targetField.setError(""String_Node_Str"");
        }
      }
    }
 catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
  }
  if (wapper.getMethod() != null) {
    try {
      wapper.getMethod().invoke(target);
    }
 catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
  }
}"
40489,"public void generateCPUScript(){
  String difficulty=""String_Node_Str"";
  this.cpuCommands=new ArrayList<>();
  boolean choose=getRandomBoolean();
switch (difficulty) {
case ""String_Node_Str"":
{
      if (choose) {
        ArrayList<Check> checksForApproach=new ArrayList<>();
        ArrayList<Check> checksForAttack=new ArrayList<>();
        ArrayList<Check> checksForHeal=new ArrayList<>();
        checksForApproach.add(new Check(Data.DISTANCE_FROM_OPPONENT.text(),""String_Node_Str"",Operator.GREATER_THAN));
        ScriptCommand approach=new ScriptCommand(checksForApproach,Command.APPROACH);
        this.cpuCommands.add(approach);
        checksForAttack.add(new Check(Data.OPPONENT_HEALTH.text(),""String_Node_Str"",Operator.GREATER_THAN));
        checksForAttack.add(new Check(Data.USER_HEALTH.text(),""String_Node_Str"",Operator.GREATER_THAN));
        ScriptCommand attack=new ScriptCommand(checksForAttack,Command.ATTACK);
        this.cpuCommands.add(attack);
        checksForHeal.add(new Check(Data.OPPONENT_HEALTH.text(),""String_Node_Str"",Operator.LESS_THAN));
        ScriptCommand heal=new ScriptCommand(checksForAttack,Command.HEAL);
        this.cpuCommands.add(heal);
      }
 else {
        ArrayList<Check> checksForApproach=new ArrayList<>();
        ArrayList<Check> checksForAttack=new ArrayList<>();
        checksForApproach.add(new Check(Data.DISTANCE_FROM_OPPONENT.text(),""String_Node_Str"",Operator.GREATER_THAN));
        ScriptCommand approach=new ScriptCommand(checksForApproach,Command.APPROACH);
        this.cpuCommands.add(approach);
        checksForAttack.add(new Check(Data.DISTANCE_FROM_OPPONENT.text(),Data.DISTANCE_FROM_OPPONENT.text(),Operator.EQUALS));
        ScriptCommand attack=new ScriptCommand(checksForAttack,Command.ATTACK);
        this.cpuCommands.add(attack);
      }
    }
case ""String_Node_Str"":
{
    if (choose) {
      ArrayList<Check> checksForApproach=new ArrayList<>();
      ArrayList<Check> checksForAttack=new ArrayList<>();
      ArrayList<Check> checksForEvade=new ArrayList<>();
      checksForApproach.add(new Check(Data.DISTANCE_FROM_OPPONENT.text(),""String_Node_Str"",Operator.GREATER_THAN));
      checksForApproach.add(new Check(Data.OPPONENT_HEALTH.text(),""String_Node_Str"",Operator.GREATER_THAN));
      ScriptCommand approach=new ScriptCommand(checksForApproach,Command.APPROACH);
      this.cpuCommands.add(approach);
      checksForAttack.add(new Check(Data.OPPONENT_HEALTH.text(),""String_Node_Str"",Operator.GREATER_THAN));
      ScriptCommand attack=new ScriptCommand(checksForAttack,Command.ATTACK);
      this.cpuCommands.add(attack);
      checksForEvade.add(new Check(Data.DISTANCE_FROM_OPPONENT.text(),""String_Node_Str"",Operator.LESS_THAN));
      ScriptCommand evade=new ScriptCommand(checksForEvade,Command.EVADE);
      this.cpuCommands.add(evade);
    }
 else {
      ArrayList<Check> checksForAttack=new ArrayList<>();
      ArrayList<Check> checksForEvade=new ArrayList<>();
      checksForAttack.add(new Check(Data.DISTANCE_FROM_OPPONENT.text(),""String_Node_Str"",Operator.EQUALS));
      ScriptCommand attack=new ScriptCommand(checksForAttack,Command.ATTACK);
      this.cpuCommands.add(attack);
      checksForEvade.add(new Check(""String_Node_Str"",""String_Node_Str"",Operator.EQUALS));
      ScriptCommand evade=new ScriptCommand(checksForEvade,Command.EVADE);
      this.cpuCommands.add(evade);
    }
  }
case ""String_Node_Str"":
{
  if (choose) {
    ArrayList<Check> checksForEvade1=new ArrayList<>();
    ArrayList<Check> checksForApproach=new ArrayList<>();
    ArrayList<Check> checksForAttack=new ArrayList<>();
    ArrayList<Check> checksForEvade2=new ArrayList<>();
    ArrayList<Check> checksForHeal=new ArrayList<>();
    checksForEvade1.add(new Check(Data.DISTANCE_FROM_OPPONENT.text(),""String_Node_Str"",Operator.GREATER_THAN));
    checksForEvade1.add(new Check(Data.OPPONENT_HEALTH.text(),""String_Node_Str"",Operator.GREATER_THAN));
    ScriptCommand evade=new ScriptCommand(checksForEvade1,Command.EVADE);
    this.cpuCommands.add(evade);
    checksForApproach.add(new Check(Data.DISTANCE_FROM_OPPONENT.text(),""String_Node_Str"",Operator.GREATER_THAN));
    checksForApproach.add(new Check(Data.OPPONENT_HEALTH.text(),""String_Node_Str"",Operator.GREATER_THAN));
    ScriptCommand approach=new ScriptCommand(checksForApproach,Command.APPROACH);
    this.cpuCommands.add(approach);
    checksForAttack.add(new Check(Data.OPPONENT_HEALTH.text(),""String_Node_Str"",Operator.GREATER_THAN));
    ScriptCommand attack=new ScriptCommand(checksForAttack,Command.ATTACK);
    this.cpuCommands.add(attack);
    checksForEvade2.add(new Check(Data.DISTANCE_FROM_OPPONENT.text(),""String_Node_Str"",Operator.LESS_THAN));
    ScriptCommand evade2=new ScriptCommand(checksForEvade2,Command.EVADE);
    this.cpuCommands.add(evade2);
    checksForHeal.add(new Check(""String_Node_Str"",""String_Node_Str"",Operator.EQUALS));
    ScriptCommand heal=new ScriptCommand(checksForHeal,Command.HEAL);
    this.cpuCommands.add(heal);
  }
 else {
    ArrayList<Check> checksForApproach=new ArrayList<>();
    ArrayList<Check> checksForEvade=new ArrayList<>();
    ArrayList<Check> checksForHeal=new ArrayList<>();
    ArrayList<Check> checksForAttack=new ArrayList<>();
    checksForApproach.add(new Check(Data.DISTANCE_FROM_OPPONENT.text(),""String_Node_Str"",Operator.GREATER_THAN));
    ScriptCommand approach=new ScriptCommand(checksForApproach,Command.APPROACH);
    this.cpuCommands.add(approach);
    checksForEvade.add(new Check(Data.DISTANCE_FROM_OPPONENT.text(),""String_Node_Str"",Operator.GREATER_THAN));
    ScriptCommand evade=new ScriptCommand(checksForEvade,Command.EVADE);
    this.cpuCommands.add(evade);
    checksForHeal.add(new Check(Data.OPPONENT_HEALTH.text(),""String_Node_Str"",Operator.LESS_THAN));
    ScriptCommand heal=new ScriptCommand(checksForAttack,Command.HEAL);
    this.cpuCommands.add(heal);
    checksForAttack.add(new Check(""String_Node_Str"",""String_Node_Str"",Operator.EQUALS));
    ScriptCommand attack=new ScriptCommand(checksForAttack,Command.ATTACK);
    this.cpuCommands.add(attack);
  }
}
}
}","public void generateCPUScript(){
  String difficulty=engineContext.getDifficulty();
  this.cpuCommands=new ArrayList<>();
  boolean choose=getRandomBoolean();
switch (difficulty) {
case ""String_Node_Str"":
{
      if (choose) {
        ArrayList<Check> checksForApproach=new ArrayList<>();
        ArrayList<Check> checksForAttack=new ArrayList<>();
        ArrayList<Check> checksForHeal=new ArrayList<>();
        checksForApproach.add(new Check(Data.DISTANCE_FROM_OPPONENT.text(),""String_Node_Str"",Operator.GREATER_THAN));
        ScriptCommand approach=new ScriptCommand(checksForApproach,Command.APPROACH);
        this.cpuCommands.add(approach);
        checksForAttack.add(new Check(Data.USER_HEALTH.text(),""String_Node_Str"",Operator.GREATER_THAN));
        checksForAttack.add(new Check(Data.OPPONENT_HEALTH.text(),""String_Node_Str"",Operator.GREATER_THAN));
        ScriptCommand attack=new ScriptCommand(checksForAttack,Command.ATTACK);
        this.cpuCommands.add(attack);
        checksForHeal.add(new Check(Data.USER_HEALTH.text(),""String_Node_Str"",Operator.LESS_THAN));
        ScriptCommand heal=new ScriptCommand(checksForAttack,Command.HEAL);
        this.cpuCommands.add(heal);
      }
 else {
        ArrayList<Check> checksForApproach=new ArrayList<>();
        ArrayList<Check> checksForAttack=new ArrayList<>();
        checksForApproach.add(new Check(Data.DISTANCE_FROM_OPPONENT.text(),""String_Node_Str"",Operator.GREATER_THAN));
        ScriptCommand approach=new ScriptCommand(checksForApproach,Command.APPROACH);
        this.cpuCommands.add(approach);
        checksForAttack.add(new Check(Data.DISTANCE_FROM_OPPONENT.text(),Data.DISTANCE_FROM_OPPONENT.text(),Operator.EQUALS));
        ScriptCommand attack=new ScriptCommand(checksForAttack,Command.ATTACK);
        this.cpuCommands.add(attack);
      }
    }
case ""String_Node_Str"":
{
    if (choose) {
      ArrayList<Check> checksForApproach=new ArrayList<>();
      ArrayList<Check> checksForAttack=new ArrayList<>();
      ArrayList<Check> checksForEvade=new ArrayList<>();
      checksForApproach.add(new Check(Data.DISTANCE_FROM_OPPONENT.text(),""String_Node_Str"",Operator.GREATER_THAN));
      checksForApproach.add(new Check(Data.USER_HEALTH.text(),""String_Node_Str"",Operator.GREATER_THAN));
      ScriptCommand approach=new ScriptCommand(checksForApproach,Command.APPROACH);
      this.cpuCommands.add(approach);
      checksForAttack.add(new Check(Data.USER_HEALTH.text(),""String_Node_Str"",Operator.GREATER_THAN));
      ScriptCommand attack=new ScriptCommand(checksForAttack,Command.ATTACK);
      this.cpuCommands.add(attack);
      checksForEvade.add(new Check(Data.DISTANCE_FROM_OPPONENT.text(),""String_Node_Str"",Operator.LESS_THAN));
      ScriptCommand evade=new ScriptCommand(checksForEvade,Command.EVADE);
      this.cpuCommands.add(evade);
    }
 else {
      ArrayList<Check> checksForAttack=new ArrayList<>();
      ArrayList<Check> checksForEvade=new ArrayList<>();
      checksForAttack.add(new Check(Data.DISTANCE_FROM_OPPONENT.text(),""String_Node_Str"",Operator.EQUALS));
      ScriptCommand attack=new ScriptCommand(checksForAttack,Command.ATTACK);
      this.cpuCommands.add(attack);
      checksForEvade.add(new Check(""String_Node_Str"",""String_Node_Str"",Operator.EQUALS));
      ScriptCommand evade=new ScriptCommand(checksForEvade,Command.EVADE);
      this.cpuCommands.add(evade);
    }
  }
case ""String_Node_Str"":
{
  if (choose) {
    ArrayList<Check> checksForEvade1=new ArrayList<>();
    ArrayList<Check> checksForApproach=new ArrayList<>();
    ArrayList<Check> checksForAttack=new ArrayList<>();
    ArrayList<Check> checksForEvade2=new ArrayList<>();
    ArrayList<Check> checksForHeal=new ArrayList<>();
    checksForEvade1.add(new Check(Data.DISTANCE_FROM_OPPONENT.text(),""String_Node_Str"",Operator.GREATER_THAN));
    checksForEvade1.add(new Check(Data.USER_HEALTH.text(),""String_Node_Str"",Operator.GREATER_THAN));
    ScriptCommand evade=new ScriptCommand(checksForEvade1,Command.EVADE);
    this.cpuCommands.add(evade);
    checksForApproach.add(new Check(Data.DISTANCE_FROM_OPPONENT.text(),""String_Node_Str"",Operator.GREATER_THAN));
    checksForApproach.add(new Check(Data.USER_HEALTH.text(),""String_Node_Str"",Operator.GREATER_THAN));
    ScriptCommand approach=new ScriptCommand(checksForApproach,Command.APPROACH);
    this.cpuCommands.add(approach);
    checksForAttack.add(new Check(Data.USER_HEALTH.text(),""String_Node_Str"",Operator.GREATER_THAN));
    ScriptCommand attack=new ScriptCommand(checksForAttack,Command.ATTACK);
    this.cpuCommands.add(attack);
    checksForEvade2.add(new Check(Data.DISTANCE_FROM_OPPONENT.text(),""String_Node_Str"",Operator.LESS_THAN));
    ScriptCommand evade2=new ScriptCommand(checksForEvade2,Command.EVADE);
    this.cpuCommands.add(evade2);
    checksForHeal.add(new Check(""String_Node_Str"",""String_Node_Str"",Operator.EQUALS));
    ScriptCommand heal=new ScriptCommand(checksForHeal,Command.HEAL);
    this.cpuCommands.add(heal);
  }
 else {
    ArrayList<Check> checksForApproach=new ArrayList<>();
    ArrayList<Check> checksForEvade=new ArrayList<>();
    ArrayList<Check> checksForHeal=new ArrayList<>();
    ArrayList<Check> checksForAttack=new ArrayList<>();
    checksForApproach.add(new Check(Data.DISTANCE_FROM_OPPONENT.text(),""String_Node_Str"",Operator.GREATER_THAN));
    ScriptCommand approach=new ScriptCommand(checksForApproach,Command.APPROACH);
    this.cpuCommands.add(approach);
    checksForEvade.add(new Check(Data.DISTANCE_FROM_OPPONENT.text(),""String_Node_Str"",Operator.GREATER_THAN));
    ScriptCommand evade=new ScriptCommand(checksForEvade,Command.EVADE);
    this.cpuCommands.add(evade);
    checksForHeal.add(new Check(Data.USER_HEALTH.text(),""String_Node_Str"",Operator.LESS_THAN));
    ScriptCommand heal=new ScriptCommand(checksForAttack,Command.HEAL);
    this.cpuCommands.add(heal);
    checksForAttack.add(new Check(""String_Node_Str"",""String_Node_Str"",Operator.EQUALS));
    ScriptCommand attack=new ScriptCommand(checksForAttack,Command.ATTACK);
    this.cpuCommands.add(attack);
  }
}
}
}"
40490,"/** 
 * Initializes the Engine and performs the main ticking loop.
 */
public Engine(GameGUI gameGUI,EngineContext engineContext) throws LoadMapFailedException {
  generateCPUScript();
  this.engineContext=engineContext;
  this.gameGUI=gameGUI;
  Map mp;
  try {
    mp=loadGameMap();
  }
 catch (  ResourceAlreadyLoadedException rale) {
    if (CACHEDMAP == null) {
      throw rale;
    }
    mp=CACHEDMAP;
    ENGINE_LOGGER.info(""String_Node_Str"");
  }
  this.gameGUI._map=mp;
  if (mp == null) {
    throw new LoadMapFailedException(""String_Node_Str"");
  }
  EntityMap em=parseEntityMap(mp);
  this.game=new Game(em);
  ENGINE_LOGGER.info(""String_Node_Str"");
}","/** 
 * Initializes the Engine and performs the main ticking loop.
 */
public Engine(GameGUI gameGUI,EngineContext engineContext) throws LoadMapFailedException {
  this.engineContext=engineContext;
  generateCPUScript();
  this.gameGUI=gameGUI;
  Map mp;
  try {
    mp=loadGameMap();
  }
 catch (  ResourceAlreadyLoadedException rale) {
    if (CACHEDMAP == null) {
      throw rale;
    }
    mp=CACHEDMAP;
    ENGINE_LOGGER.info(""String_Node_Str"");
  }
  this.gameGUI._map=mp;
  if (mp == null) {
    throw new LoadMapFailedException(""String_Node_Str"");
  }
  EntityMap em=parseEntityMap(mp);
  this.game=new Game(em);
  ENGINE_LOGGER.info(""String_Node_Str"");
}"
40491,"public EngineContext(String difficulty){
switch (difficulty.toLowerCase()) {
case ""String_Node_Str"":
    MAP_URL=ALL_MAP_URL[0];
  break;
case ""String_Node_Str"":
MAP_URL=ALL_MAP_URL[2];
break;
case ""String_Node_Str"":
default :
MAP_URL=ALL_MAP_URL[1];
}
}","public EngineContext(String difficulty){
switch (difficulty.toLowerCase()) {
case ""String_Node_Str"":
    MAP_URL=ALL_MAP_URL[0];
  this.difficulty=""String_Node_Str"";
break;
case ""String_Node_Str"":
MAP_URL=ALL_MAP_URL[2];
this.difficulty=""String_Node_Str"";
break;
case ""String_Node_Str"":
default :
MAP_URL=ALL_MAP_URL[1];
this.difficulty=""String_Node_Str"";
}
}"
40492,"/** 
 * Gets player tiles from Player layer Will need to refactor.  Basically first two objects found are added to list. 0 being player, 1 being opponent
 * @param map
 * @return
 */
private ArrayList<EntityTile> getPlayerTiles(Map map){
  ArrayList<Tile> playerTiles=new ArrayList<>();
  TileLayer playerLayer=(TileLayer)map.getLayer(2);
  int height;
  int width;
  try {
    height=playerLayer.getBounds().height;
    width=playerLayer.getBounds().width;
  }
 catch (  NullPointerException npe) {
    playerLayer.setOffset(0,0);
    height=playerLayer.getBounds().height;
    width=playerLayer.getBounds().width;
  }
  Point playerLocation=null;
  Point opponentLocation=null;
  Tile tile;
  for (int y=0; y < height; y++) {
    for (int x=0; x < width; x++) {
      tile=playerLayer.getTileAt(x,y);
      if (tile == null) {
        continue;
      }
 else {
        if (playerTiles.size() == 0) {
          playerLocation=new Point(x,y);
        }
 else {
          opponentLocation=new Point(x,y);
        }
        playerTiles.add(tile);
      }
    }
  }
  Tile playerTile=playerTiles.get(0);
  Tile opponentTile=playerTiles.get(1);
  EntityTile playerEntityTile=new EntityTile(playerLocation,new Player(0,playerLocation),playerTile);
  EntityTile opponentEntityTile=new EntityTile(opponentLocation,new Player(1,opponentLocation),opponentTile);
  ArrayList<EntityTile> playerEntityTiles=new ArrayList<>();
  playerEntityTiles.add(playerEntityTile);
  playerEntityTiles.add(opponentEntityTile);
  return playerEntityTiles;
}","/** 
 * Gets player tiles from Player layer Will need to refactor.  Basically first two objects found are added to list. 0 being player, 1 being opponent
 * @param map
 * @return
 */
private ArrayList<EntityTile> getPlayerTiles(Map map){
  TileLayer playerLayer=(TileLayer)map.getLayer(PLAYER_LAYER);
  int height;
  int width;
  try {
    height=playerLayer.getBounds().height;
    width=playerLayer.getBounds().width;
  }
 catch (  NullPointerException npe) {
    playerLayer.setOffset(0,0);
    height=playerLayer.getBounds().height;
    width=playerLayer.getBounds().width;
  }
  ArrayList<Tile> playerTiles=new ArrayList<>();
  Point playerLocation=null;
  Point opponentLocation=null;
  Tile tile;
  for (int y=0; y < height; y++) {
    for (int x=0; x < width; x++) {
      tile=playerLayer.getTileAt(x,y);
      if (tile == null) {
        continue;
      }
 else {
        if (playerTiles.size() == 0) {
          playerLocation=new Point(x,y);
        }
 else {
          opponentLocation=new Point(x,y);
        }
        playerTiles.add(tile);
      }
    }
  }
  Tile playerTile=playerTiles.get(0);
  Tile opponentTile=playerTiles.get(1);
  EntityTile playerEntityTile=new EntityTile(playerLocation,new Player(0,playerLocation),playerTile);
  EntityTile opponentEntityTile=new EntityTile(opponentLocation,new Player(1,opponentLocation),opponentTile);
  ArrayList<EntityTile> playerEntityTiles=new ArrayList<>();
  playerEntityTiles.add(playerEntityTile);
  playerEntityTiles.add(opponentEntityTile);
  return playerEntityTiles;
}"
40493,"public void removeTile(Point location){
  EntityTile entityTile=this._entityTiles[location.x][location.y];
  getPlayerLayer().removeTile(entityTile.getTile());
  this._entityTiles[location.x][location.y]=new EntityTile(location,new Empty(location),getPlayerLayer().getTileAt(location.x,location.y));
}","/** 
 * Removes tile at specified location from map
 * @param location
 */
public void removeTile(Point location){
  EntityTile entityTile=this._entityTiles[location.x][location.y];
  getPlayerLayer().removeTile(entityTile.getTile());
  this._entityTiles[location.x][location.y]=new EntityTile(location,new Empty(location),getPlayerLayer().getTileAt(location.x,location.y));
}"
40494,"public boolean isInsideMap(Point point){
  if (point.x >= this._numberOfColumns || point.x < 0 || point.y >= this._numberOfRows || point.y < 0) {
    return false;
  }
  return true;
}","/** 
 * Determines whether a point is inside the bounds of the game map
 * @param point
 * @return
 */
public boolean isInsideMap(Point point){
  if (point.x >= this._numberOfColumns || point.x < 0 || point.y >= this._numberOfRows || point.y < 0) {
    return false;
  }
  return true;
}"
40495,"/** 
 * Initializes a 2D representation of the game map
 * @param columns Number of columns
 * @param rows    Number of rows
 */
private void initializeMap(int columns,int rows){
  for (int x=0; x < columns; x++) {
    for (int y=0; y < rows; y++) {
      Point currentLocation=new Point(x,y);
      if (_playerTile.getLocation().equals(currentLocation)) {
        _entityTiles[x][y]=_playerTile;
      }
 else       if (_opponentTile.getLocation().equals(currentLocation)) {
        _entityTiles[x][y]=_opponentTile;
      }
 else {
        TileLayer playerLayer=(TileLayer)this._gameMap.getLayer(2);
        _entityTiles[x][y]=new EntityTile(currentLocation,new Empty(currentLocation),playerLayer.getTileAt(currentLocation.x,currentLocation.y));
      }
    }
  }
}","/** 
 * Initializes a 2D representation of the game map
 * @param columns Number of columns
 * @param rows    Number of rows
 */
private void initializeMap(int columns,int rows){
  for (int x=0; x < columns; x++) {
    for (int y=0; y < rows; y++) {
      Point currentLocation=new Point(x,y);
      if (_playerTile.getLocation().equals(currentLocation)) {
        _entityTiles[x][y]=_playerTile;
      }
 else       if (_opponentTile.getLocation().equals(currentLocation)) {
        _entityTiles[x][y]=_opponentTile;
      }
 else {
        TileLayer playerLayer=(TileLayer)this._gameMap.getLayer(PLAYER_LAYER);
        _entityTiles[x][y]=new EntityTile(currentLocation,new Empty(currentLocation),playerLayer.getTileAt(currentLocation.x,currentLocation.y));
      }
    }
  }
}"
40496,"/** 
 * Command to do nothing
 */
public void doNothing(int playerId){
  getPlayer(playerId).setShielding(false);
  return;
}","/** 
 * Command to do nothing
 */
public void doNothing(int playerId){
  getPlayer(playerId).setShielding(false);
}"
40497,"/** 
 * Evades from opposing player.  Will move in direction that is one space away from player.  Will only evade 87.5% of time
 * @param playerId
 * @param opponentId
 * @return
 */
public boolean evade(int playerId,int opponentId){
  stopDefending(playerId);
  if (getRandomBoolean()) {
    if (getRandomBoolean()) {
      if (getRandomBoolean()) {
        return false;
      }
    }
  }
  Player player=getPlayer(playerId);
  Player opponent=getPlayer(opponentId);
  int currentDistance=pathDistanceToLocation(player.getLocation(),opponent.getLocation());
  ArrayList<Point> potentialMoveLocations=getAllPossibleMoves(getPlayer(playerId).getLocation());
  Point playerCurrentLocation=getPlayer(playerId).getLocation();
  double longestDistance=-1;
  int longestMoveIndex=-1;
  for (int i=0; i < potentialMoveLocations.size(); i++) {
    Point moveLocation=getNewLocation(playerCurrentLocation,potentialMoveLocations.get(i));
    int distanceCandidate=pathDistanceToLocation(moveLocation,opponent.getLocation());
    if (distanceCandidate > longestDistance) {
      longestDistance=distanceCandidate;
      longestMoveIndex=i;
    }
    if (distanceCandidate == longestDistance) {
      if (getRandomBoolean()) {
        longestDistance=distanceCandidate;
        longestMoveIndex=i;
      }
    }
  }
  if (longestDistance > currentDistance) {
    return move(playerId,potentialMoveLocations.get(longestMoveIndex).x,potentialMoveLocations.get(longestMoveIndex).y);
  }
  return false;
}","/** 
 * Evades from opposing player.  Will move in direction that is one space away from player.  Will evade 87.5% of time
 * @param playerId
 * @param opponentId
 * @return
 */
public boolean evade(int playerId,int opponentId){
  stopDefending(playerId);
  if (getRandomBoolean()) {
    if (getRandomBoolean()) {
      if (getRandomBoolean()) {
        return false;
      }
    }
  }
  Player player=getPlayer(playerId);
  Player opponent=getPlayer(opponentId);
  int currentDistance=pathDistanceToLocation(player.getLocation(),opponent.getLocation());
  ArrayList<Point> potentialMoveLocations=getAllPossibleMoves(getPlayer(playerId).getLocation());
  Point playerCurrentLocation=getPlayer(playerId).getLocation();
  double longestDistance=-1;
  int longestMoveIndex=-1;
  for (int i=0; i < potentialMoveLocations.size(); i++) {
    Point moveLocation=getNewLocation(playerCurrentLocation,potentialMoveLocations.get(i));
    int distanceCandidate=pathDistanceToLocation(moveLocation,opponent.getLocation());
    if (distanceCandidate > longestDistance) {
      longestDistance=distanceCandidate;
      longestMoveIndex=i;
    }
    if (distanceCandidate == longestDistance) {
      if (getRandomBoolean()) {
        longestDistance=distanceCandidate;
        longestMoveIndex=i;
      }
    }
  }
  if (longestDistance > currentDistance) {
    return move(playerId,potentialMoveLocations.get(longestMoveIndex).x,potentialMoveLocations.get(longestMoveIndex).y);
  }
  return false;
}"
40498,"/** 
 * @param entityMap
 */
public Game(EntityMap entityMap){
  this._entityMap=entityMap;
  _previousLocations.add(getPlayer(PLAYER_ID).getLocation());
  _previousLocations.add(getPlayer(OPPONENT_ID).getLocation());
  _numberOfStalemateTurns.add(1);
  _numberOfStalemateTurns.add(1);
  _previousHealth.add(getPlayer(PLAYER_ID).getHealth());
  _previousHealth.add(getPlayer(OPPONENT_ID).getHealth());
}","/** 
 * Constructor for Game Object.  Need to pass in a reference to an EntityMap Object. Initialization of Tiled Map must occur before beginning game
 * @param entityMap Fully initialized entity map
 */
public Game(EntityMap entityMap){
  this._entityMap=entityMap;
  _previousLocations.add(getPlayer(PLAYER_ID).getLocation());
  _previousLocations.add(getPlayer(OPPONENT_ID).getLocation());
  _previousHealth.add(getPlayer(PLAYER_ID).getHealth());
  _previousHealth.add(getPlayer(OPPONENT_ID).getHealth());
  _numberOfStalemateTurns.add(1);
  _numberOfStalemateTurns.add(1);
}"
40499,"public int pathDistanceToLocation(Point location1,Point location2){
  int distanceX=location1.x - location2.x;
  int distanceY=location1.y - location2.y;
  return (Math.abs(distanceX) + Math.abs(distanceY)) - 1;
}","/** 
 * Number of tiles to get to target location using only horizontal and vertical movement
 * @param location1
 * @param location2
 * @return
 */
public int pathDistanceToLocation(Point location1,Point location2){
  int distanceX=location1.x - location2.x;
  int distanceY=location1.y - location2.y;
  return (Math.abs(distanceX) + Math.abs(distanceY)) - 1;
}"
40500,"/** 
 * Builds the set of Check objects from the present enumerators
 * @param scriptingObjects List of Scripting Enumerators to be parsed
 * @return Returns all check objects extracted from scriptingObjects
 */
private static ArrayList<Check> constructChecks(ArrayList<String> scriptingObjects){
  ArrayList<Check> checks=new ArrayList<>();
  for (int i=0; i < scriptingObjects.size(); i++) {
    String object=scriptingObjects.get(i);
    if (ScriptingTypes.DATA.list().contains(object)) {
      Operator op;
      try {
        op=getOperator(scriptingObjects.get(i + 1));
      }
 catch (      InstanceNotFoundException e) {
        e.printStackTrace();
        return null;
      }
      Check check=new Check(scriptingObjects.get(i),scriptingObjects.get(i + 2),op);
      checks.add(check);
      i=i + 2;
    }
  }
  return checks;
}","/** 
 * Builds the set of Check objects from the present enumerators
 * @param scriptingObjects List of Scripting Enumerators to be parsed
 * @return Returns all check objects extracted from scriptingObjects
 */
private static ArrayList<Check> constructChecks(ArrayList<String> scriptingObjects){
  ArrayList<Check> checks=new ArrayList<>();
  for (int i=0; i < scriptingObjects.size(); i++) {
    String object=scriptingObjects.get(i);
    if (ScriptingTypes.DATA.list().contains(object) || object.matches(""String_Node_Str"")) {
      Operator op;
      try {
        op=getOperator(scriptingObjects.get(i + 1));
      }
 catch (      InstanceNotFoundException e) {
        e.printStackTrace();
        return null;
      }
      Check check=new Check(scriptingObjects.get(i),scriptingObjects.get(i + 2),op);
      checks.add(check);
      i=i + 2;
    }
  }
  return checks;
}"
40501,"/** 
 * @return The current state of the game (inactive, running, won, lost, stalemate)
 */
public GameStatus getGameState(){
  System.out.println(game.getState());
  return game.getState();
}","/** 
 * @return The current state of the game (inactive, running, won, lost, stalemate)
 */
public GameStatus getGameState(){
  return game.getState();
}"
40502,"/** 
 * Updates the GUI based on data read from Map Some child code derived from http://discourse.mapeditor.org/t/loading-tmx-map-and-displaying-with-javafx/1189
 */
private void updateGameGUI(){
  if (_map == null) {
    LOGGER.fatal(""String_Node_Str"");
    return;
  }
  String overlay=null;
switch (_engine.getGameState()) {
case INACTIVE:
    return;
case WON:
  if (this._endGameConditionTicks < 3) {
    this._endGameConditionTicks++;
  }
 else {
    overlay=""String_Node_Str"";
  }
break;
case LOST:
if (this._endGameConditionTicks < 3) {
this._endGameConditionTicks++;
}
 else {
overlay=""String_Node_Str"";
}
break;
case STALEMATE:
if (this._endGameConditionTicks < 3) {
this._endGameConditionTicks++;
}
 else {
overlay=""String_Node_Str"";
}
break;
}
if (overlay != null) {
if (!hasDisplayedResultScreen) {
URL img=getClass().getResource(overlay);
displayResultScreen(img);
}
Alert endGame=new Alert(Alert.AlertType.CONFIRMATION,""String_Node_Str"",ButtonType.YES,ButtonType.NO);
endGame.initModality(Modality.APPLICATION_MODAL);
endGame.setHeaderText(null);
endGame.setTitle(""String_Node_Str"");
Optional<ButtonType> result=endGame.showAndWait();
if (result.isPresent()) {
_engine.shutdown(true);
if (result.get().equals(ButtonType.YES)) {
try {
MenuGUI m=new MenuGUI();
_stage.getScene().getWindow().hide();
return;
}
 catch (Exception ex) {
System.exit(1);
}
}
 else {
System.exit(0);
}
}
return;
}
ArrayList<MapLayer> layerList=new ArrayList<>(this._map.getLayers());
redrawCoords=new ArrayList<>();
Collections.reverse(layerList);
identifyDeltas(layerList);
Collections.reverse(layerList);
updateDeltas(layerList);
if (this.userHealth == null) {
this.userHealth=new ProgressBar();
this.opponentHealth=new ProgressBar();
this.opponentHealth.setTranslateX(700);
}
 else {
_imagePane.getChildren().remove(this.userHealth);
_imagePane.getChildren().remove(this.opponentHealth);
}
double userHealth=_engine.game.getPlayer(Game.PLAYER_ID).getHealth();
double opponentHealth=_engine.game.getPlayer(Game.OPPONENT_ID).getHealth();
double max=Game.HEALTH_MAX;
double userRatio=userHealth / max;
this.userHealth.setProgress(userRatio);
double opponentRatio=opponentHealth / max;
System.out.println(""String_Node_Str"" + opponentHealth);
System.out.println(""String_Node_Str"" + Double.toString(opponentRatio));
this.opponentHealth.setProgress(opponentHealth / max);
_imagePane.getChildren().add(this.opponentHealth);
_imagePane.getChildren().add(this.userHealth);
}","/** 
 * Updates the GUI based on data read from Map Some child code derived from http://discourse.mapeditor.org/t/loading-tmx-map-and-displaying-with-javafx/1189
 */
private void updateGameGUI(){
  if (_map == null) {
    LOGGER.fatal(""String_Node_Str"");
    return;
  }
  String overlay=null;
switch (_engine.getGameState()) {
case INACTIVE:
    return;
case WON:
  if (this._endGameConditionTicks < 3) {
    this._endGameConditionTicks++;
  }
 else {
    overlay=""String_Node_Str"";
  }
break;
case LOST:
if (this._endGameConditionTicks < 3) {
this._endGameConditionTicks++;
}
 else {
overlay=""String_Node_Str"";
}
break;
case STALEMATE:
if (this._endGameConditionTicks < 3) {
this._endGameConditionTicks++;
}
 else {
overlay=""String_Node_Str"";
}
break;
}
if (overlay != null) {
if (!hasDisplayedResultScreen) {
URL img=getClass().getResource(overlay);
displayResultScreen(img);
}
Alert endGame=new Alert(Alert.AlertType.CONFIRMATION,""String_Node_Str"",ButtonType.YES,ButtonType.NO);
endGame.initModality(Modality.APPLICATION_MODAL);
endGame.setHeaderText(null);
endGame.setTitle(""String_Node_Str"");
Optional<ButtonType> result=endGame.showAndWait();
if (result.isPresent()) {
_engine.shutdown(true);
if (result.get().equals(ButtonType.YES)) {
try {
MenuGUI m=new MenuGUI();
_stage.getScene().getWindow().hide();
return;
}
 catch (Exception ex) {
System.exit(1);
}
}
 else {
System.exit(0);
}
}
return;
}
ArrayList<MapLayer> layerList=new ArrayList<>(this._map.getLayers());
redrawCoords=new ArrayList<>();
Collections.reverse(layerList);
identifyDeltas(layerList);
Collections.reverse(layerList);
updateDeltas(layerList);
if (this.userHealth == null) {
this.userHealth=new ProgressBar();
this.opponentHealth=new ProgressBar();
this.opponentHealth.setTranslateX(700);
}
 else {
_imagePane.getChildren().remove(this.userHealth);
_imagePane.getChildren().remove(this.opponentHealth);
}
double userHealth=_engine.game.getPlayer(Game.PLAYER_ID).getHealth();
double opponentHealth=_engine.game.getPlayer(Game.OPPONENT_ID).getHealth();
double max=Game.HEALTH_MAX;
double userRatio=userHealth / max;
this.userHealth.setProgress(userRatio);
double opponentRatio=opponentHealth / max;
this.opponentHealth.setProgress(opponentHealth / max);
_imagePane.getChildren().add(this.opponentHealth);
_imagePane.getChildren().add(this.userHealth);
}"
40503,"/** 
 * Based on the current game state data, returns if condition is true.
 * @param game takes in the model
 * @return if defined condition is true
 */
boolean conditionIsTrue(Game game){
  int data1=getData(this.data1,game);
  int data2=getData(this.data2,game);
switch (this.operator) {
case LESS_THAN:
    return data1 < data2;
case GREATER_THAN:
  return data1 > data2;
case LESS_THAN_OR_EQUAL_TO:
return data1 <= data2;
case GREATER_THAN_OR_EQUAL_TO:
return data1 >= data2;
case EQUALS:
return data1 == data2;
default :
return false;
}
}","/** 
 * Based on the current game state data, returns if condition is true.
 * @param game takes in the model
 * @return if defined condition is true
 */
boolean conditionIsTrue(Game game,int id){
  int data1=getData(this.data1,game,id);
  int data2=getData(this.data2,game,id);
switch (this.operator) {
case LESS_THAN:
    return data1 < data2;
case GREATER_THAN:
  return data1 > data2;
case LESS_THAN_OR_EQUAL_TO:
return data1 <= data2;
case GREATER_THAN_OR_EQUAL_TO:
return data1 >= data2;
case EQUALS:
return data1 == data2;
default :
return false;
}
}"
40504,"/** 
 * Based on the current game state data, returns if condition is true.
 * @param data takes in the data to be returned
 * @param game is the pointer to the game model
 * @return the integer value of the game data that has been looked up
 */
private int getData(String data,Game game){
  if (data.equals(Data.USER_HEALTH.text())) {
    return game.getPlayer(Game.PLAYER_ID).getHealth();
  }
 else   if (data.equals(Data.OPPONENT_HEALTH.text())) {
    return game.getPlayer(Game.OPPONENT_ID).getHealth();
  }
 else   if (data.equals(Data.DISTANCE_FROM_OPPONENT.text())) {
    return game.pathDistanceToPlayer(Game.PLAYER_ID,Game.OPPONENT_ID);
  }
 else {
    try {
      return Integer.parseInt(data);
    }
 catch (    Exception ex) {
      System.out.println(""String_Node_Str"" + data + ""String_Node_Str"");
      return -1;
    }
  }
}","/** 
 * Based on the current game state data, returns if condition is true.
 * @param data takes in the data to be returned
 * @param game is the pointer to the game model
 * @return the integer value of the game data that has been looked up
 */
private int getData(String data,Game game,int id){
  int otherId;
  if (id == 0) {
    otherId=1;
  }
 else {
    otherId=0;
  }
  if (data.equals(Data.USER_HEALTH.text())) {
    return game.getPlayer(id).getHealth();
  }
 else   if (data.equals(Data.OPPONENT_HEALTH.text())) {
    return game.getPlayer(otherId).getHealth();
  }
 else   if (data.equals(Data.DISTANCE_FROM_OPPONENT.text())) {
    return game.pathDistanceToPlayer(id,otherId);
  }
 else {
    try {
      return Integer.parseInt(data);
    }
 catch (    Exception ex) {
      LOGGER.critical(""String_Node_Str"" + data + ""String_Node_Str"");
      return -1;
    }
  }
}"
40505,"/** 
 * Method called to excecute a 'line' of the interpreter.
 * @param game the instance of the game class passed in
 * @param id the id of the player excecuting this script
 * @return true if the command excecuted
 */
public boolean doCommand(Game game,int id){
  for (  Check c : this.checks) {
    if (!c.conditionIsTrue(game)) {
      return false;
    }
  }
  executeFunction(game,id);
  return true;
}","/** 
 * Method called to excecute a 'line' of the interpreter.
 * @param game the instance of the game class passed in
 * @param id the id of the player excecuting this script
 * @return true if the command excecuted
 */
public boolean doCommand(Game game,int id){
  for (  Check c : this.checks) {
    if (!c.conditionIsTrue(game,id)) {
      return false;
    }
  }
  executeFunction(game,id);
  return true;
}"
40506,"/** 
 * Called by doCommand to actually modify the game data with built-in functions
 * @param game the instance of the game class passed in
 * @param id the id of the player executing this script
 */
private void executeFunction(Game game,int id){
  int otherId;
  if (id == 0) {
    otherId=1;
  }
 else {
    otherId=0;
  }
  if (id == 1) {
    System.out.println(""String_Node_Str"" + id + ""String_Node_Str""+ this.command);
  }
switch (this.command) {
case APPROACH:
    game.approach(id,otherId);
  break;
case ATTACK:
game.attack(id);
break;
case HEAL:
game.heal(id,9);
break;
case EVADE:
game.evade(id,otherId);
case DO_NOTHING:
game.doNothing(id);
break;
case DEFEND:
game.defend(id);
break;
default :
game.doNothing(id);
break;
}
}","/** 
 * Called by doCommand to actually modify the game data with built-in functions
 * @param game the instance of the game class passed in
 * @param id the id of the player executing this script
 */
private void executeFunction(Game game,int id){
  int otherId;
  if (id == 0) {
    otherId=1;
  }
 else {
    otherId=0;
  }
  if (id == 1) {
    LOGGER.debug(""String_Node_Str"" + id + ""String_Node_Str""+ this.command);
  }
switch (this.command) {
case APPROACH:
    game.approach(id,otherId);
  break;
case ATTACK:
game.attack(id);
break;
case HEAL:
game.heal(id,9);
break;
case EVADE:
game.evade(id,otherId);
case DO_NOTHING:
game.doNothing(id);
break;
case DEFEND:
game.defend(id);
break;
default :
game.doNothing(id);
break;
}
}"
40507,"/** 
 * @return Random Movement Value
 */
public int pickRandomElement(int listSize){
  int seed=ThreadLocalRandom.current().nextInt(0,listSize);
  System.out.println(seed);
  System.out.println(listSize);
  return seed;
}","/** 
 * @return Random Movement Value
 */
public int pickRandomElement(int listSize){
  int seed=ThreadLocalRandom.current().nextInt(0,listSize);
  return seed;
}"
40508,"/** 
 * If opponent is within one tile horizontally or vertically, player will attack that tile.  If not, returns false
 * @param playerId Player
 * @return If player was able to attack
 */
public boolean attack(int playerId){
  stopDefending(playerId);
  System.out.println(""String_Node_Str"" + playerId);
  if (attackLocation(playerId,0,1)) {
    return true;
  }
 else   if (attackLocation(playerId,0,-1)) {
    return true;
  }
 else   if (attackLocation(playerId,1,0)) {
    return true;
  }
 else   if (attackLocation(playerId,-1,0)) {
    return true;
  }
 else {
    return false;
  }
}","/** 
 * If opponent is within one tile horizontally or vertically, player will attack that tile.  If not, returns false
 * @param playerId Player
 * @return If player was able to attack
 */
public boolean attack(int playerId){
  stopDefending(playerId);
  LOGGER.debug(""String_Node_Str"" + playerId);
  if (attackLocation(playerId,0,1)) {
    return true;
  }
 else   if (attackLocation(playerId,0,-1)) {
    return true;
  }
 else   if (attackLocation(playerId,1,0)) {
    return true;
  }
 else   if (attackLocation(playerId,-1,0)) {
    return true;
  }
 else {
    return false;
  }
}"
40509,"/** 
 * Used by external classes to acquire game state.
 * @return The GameStatus pertaining to the current state of the game.
 */
public GameStatus getState(){
  if (!isGameOver()) {
    return GameStatus.RUNNING;
  }
  if (isStalemate()) {
    return GameStatus.STALEMATE;
  }
  LOGGER.warning(""String_Node_Str"");
  if (isDead(0)) {
    return GameStatus.LOST;
  }
 else   if (isDead(1)) {
    System.out.println(getPlayer(1).getHealth());
    return GameStatus.WON;
  }
  throw new RuntimeException(""String_Node_Str"");
}","/** 
 * Used by external classes to acquire game state.
 * @return The GameStatus pertaining to the current state of the game.
 */
public GameStatus getState(){
  if (!isGameOver()) {
    return GameStatus.RUNNING;
  }
  if (isStalemate()) {
    return GameStatus.STALEMATE;
  }
  LOGGER.warning(""String_Node_Str"");
  if (isDead(0)) {
    return GameStatus.LOST;
  }
 else   if (isDead(1)) {
    LOGGER.debug(""String_Node_Str"" + getPlayer(1).getHealth());
    return GameStatus.WON;
  }
  throw new RuntimeException(""String_Node_Str"");
}"
40510,"/** 
 * Based on the current game state data, returns if condition is true.
 * @param data takes in the data to be returned
 * @param game is the pointer to the game model
 * @return the integer value of the game data that has been looked up
 */
private int getData(String data,Game game){
  if (data.equals(Data.USER_HEALTH.text())) {
    return game.getPlayer(Game.PLAYER_ID).getHealth();
  }
 else   if (data.equals(Data.OPPONENT_HEALTH.text())) {
    return game.getPlayer(Game.OPPONENT_ID).getHealth();
  }
 else   if (data.equals(Data.DISTANCE_FROM_OPPONENT.text())) {
    return (int)Math.round(game.distanceToOpponent(Game.PLAYER_ID,Game.OPPONENT_ID));
  }
 else {
    try {
      return Integer.parseInt(data);
    }
 catch (    Exception ex) {
      System.out.println(""String_Node_Str"" + data + ""String_Node_Str"");
      return -1;
    }
  }
}","/** 
 * Based on the current game state data, returns if condition is true.
 * @param data takes in the data to be returned
 * @param game is the pointer to the game model
 * @return the integer value of the game data that has been looked up
 */
private int getData(String data,Game game){
  if (data.equals(Data.USER_HEALTH.text())) {
    return game.getPlayer(Game.PLAYER_ID).getHealth();
  }
 else   if (data.equals(Data.OPPONENT_HEALTH.text())) {
    return game.getPlayer(Game.OPPONENT_ID).getHealth();
  }
 else   if (data.equals(Data.DISTANCE_FROM_OPPONENT.text())) {
    return game.pathDistanceToPlayer(Game.PLAYER_ID,Game.OPPONENT_ID);
  }
 else {
    try {
      return Integer.parseInt(data);
    }
 catch (    Exception ex) {
      System.out.println(""String_Node_Str"" + data + ""String_Node_Str"");
      return -1;
    }
  }
}"
40511,"/** 
 * Called by doCommand to actually modify the game data with built-in functions
 * @param game the instance of the game class passed in
 * @param id the id of the player executing this script
 */
private void executeFunction(Game game,int id){
  int otherId;
  if (id == 0) {
    otherId=1;
  }
 else {
    otherId=0;
  }
  if (id == 1) {
    System.out.println(""String_Node_Str"" + id + ""String_Node_Str""+ this.command);
  }
switch (this.command) {
case APPROACH:
    game.approach(id,otherId);
  break;
case ATTACK:
game.attack(id);
break;
case HEAL:
game.heal(id,20);
break;
case EVADE:
game.evade(id,otherId);
case DO_NOTHING:
game.doNothing(id);
break;
case DEFEND:
game.defend(id);
break;
default :
game.doNothing(id);
break;
}
}","/** 
 * Called by doCommand to actually modify the game data with built-in functions
 * @param game the instance of the game class passed in
 * @param id the id of the player executing this script
 */
private void executeFunction(Game game,int id){
  int otherId;
  if (id == 0) {
    otherId=1;
  }
 else {
    otherId=0;
  }
  if (id == 1) {
    System.out.println(""String_Node_Str"" + id + ""String_Node_Str""+ this.command);
  }
switch (this.command) {
case APPROACH:
    game.approach(id,otherId);
  break;
case ATTACK:
game.attack(id);
break;
case HEAL:
game.heal(id,9);
break;
case EVADE:
game.evade(id,otherId);
case DO_NOTHING:
game.doNothing(id);
break;
case DEFEND:
game.defend(id);
break;
default :
game.doNothing(id);
break;
}
}"
40512,"public double distance(Point location1,Point location2){
  return Math.hypot(location1.x - location2.x,location1.y - location2.y);
}","/** 
 * Returns a double of the distance between two points on graph.  This includes diagonal distance
 * @param location1
 * @param location2
 * @return
 */
public double distance(Point location1,Point location2){
  return Math.hypot(location1.x - location2.x,location1.y - location2.y);
}"
40513,"/** 
 * Evades from opposing player.  Will move in direction that is one space away from player.  Will only evade 50% of time
 * @param playerId
 * @param opponentId
 * @return
 */
public boolean evade(int playerId,int opponentId){
  stopDefending(playerId);
  if (getRandomBoolean()) {
    return false;
  }
  Player player=getPlayer(playerId);
  Player opponent=getPlayer(opponentId);
  int currentDistance=pathDistanceToLocation(player.getLocation(),opponent.getLocation());
  ArrayList<Point> potentialMoveLocations=getAllPossibleMoves(getPlayer(playerId).getLocation());
  Point playerCurrentLocation=getPlayer(playerId).getLocation();
  double longestDistance=-1;
  int longestMoveIndex=-1;
  for (int i=0; i < potentialMoveLocations.size(); i++) {
    Point moveLocation=getNewLocation(playerCurrentLocation,potentialMoveLocations.get(i));
    int distanceCandidate=pathDistanceToLocation(moveLocation,opponent.getLocation());
    if (distanceCandidate > longestDistance) {
      longestDistance=distanceCandidate;
      longestMoveIndex=i;
    }
  }
  if (longestDistance > currentDistance) {
    return move(playerId,potentialMoveLocations.get(longestMoveIndex).x,potentialMoveLocations.get(longestMoveIndex).y);
  }
  return false;
}","/** 
 * Evades from opposing player.  Will move in direction that is one space away from player.  Will only evade 87.5% of time
 * @param playerId
 * @param opponentId
 * @return
 */
public boolean evade(int playerId,int opponentId){
  stopDefending(playerId);
  if (getRandomBoolean()) {
    if (getRandomBoolean()) {
      if (getRandomBoolean()) {
        return false;
      }
    }
  }
  Player player=getPlayer(playerId);
  Player opponent=getPlayer(opponentId);
  int currentDistance=pathDistanceToLocation(player.getLocation(),opponent.getLocation());
  ArrayList<Point> potentialMoveLocations=getAllPossibleMoves(getPlayer(playerId).getLocation());
  Point playerCurrentLocation=getPlayer(playerId).getLocation();
  double longestDistance=-1;
  int longestMoveIndex=-1;
  for (int i=0; i < potentialMoveLocations.size(); i++) {
    Point moveLocation=getNewLocation(playerCurrentLocation,potentialMoveLocations.get(i));
    int distanceCandidate=pathDistanceToLocation(moveLocation,opponent.getLocation());
    if (distanceCandidate > longestDistance) {
      longestDistance=distanceCandidate;
      longestMoveIndex=i;
    }
    if (distanceCandidate == longestDistance) {
      if (getRandomBoolean()) {
        longestDistance=distanceCandidate;
        longestMoveIndex=i;
      }
    }
  }
  if (longestDistance > currentDistance) {
    return move(playerId,potentialMoveLocations.get(longestMoveIndex).x,potentialMoveLocations.get(longestMoveIndex).y);
  }
  return false;
}"
40514,"/** 
 * Number of tiles to get to opponent using only horizontal and vertical movement
 * @param playerId
 * @param opponentId
 * @return
 */
public int pathDistanceToPlayer(int playerId,int opponentId){
  Point distances=getDeltaDistances(playerId,opponentId);
  return (Math.abs(distances.x) + Math.abs(distances.y)) - 1;
}","/** 
 * Number of tiles to get to opponent using only horizontal and vertical movement
 * @param playerId
 * @param opponentId
 * @return
 */
public int pathDistanceToPlayer(int playerId,int opponentId){
  Point distances=getDeltaDistances(playerId,opponentId);
  return Math.abs(distances.x) + Math.abs(distances.y);
}"
40515,"/** 
 * Attacks location x and y away from players current location
 * @param playerId Player
 * @param x        Units away from players current location
 * @param y        Units away from players current location
 * @return If player was able to attack
 */
private boolean attackLocation(int playerId,int x,int y){
  EntityTile playerTile=this._entityMap.getPlayers().get(playerId);
  Point location=playerTile.getLocation();
  if (!_entityMap.isInsideMap(new Point(location.x + x,location.y + y))) {
    return false;
  }
  Entity entity=getEntityAtLocation(new Point(location.x + x,location.y + y));
  Player player=(Player)playerTile.getEntity();
  player.setShielding(false);
  if (entity.getEntityType() == Entity.EntityType.EMPTY) {
    return false;
  }
 else {
    Player playerToAttack=(Player)entity;
    int damageToBeDone=player.getDamage();
    if (playerToAttack.isShielding()) {
      damageToBeDone=player.getDamage() - playerToAttack.getShieldStrength();
    }
    playerToAttack.setHealth(playerToAttack.getHealth() - damageToBeDone);
    if (playerToAttack.getHealth() <= HEALTH_DEAD) {
      playerToAttack.setHealth(0);
      this._isGameOver=true;
    }
    return true;
  }
}","/** 
 * Attacks location x and y away from players current location
 * @param playerId Player
 * @param x        Units away from players current location
 * @param y        Units away from players current location
 * @return If player was able to attack
 */
private boolean attackLocation(int playerId,int x,int y){
  EntityTile playerTile=this._entityMap.getPlayers().get(playerId);
  Point location=playerTile.getLocation();
  stopDefending(playerId);
  if (!_entityMap.isInsideMap(new Point(location.x + x,location.y + y))) {
    return false;
  }
  Entity entity=getEntityAtLocation(new Point(location.x + x,location.y + y));
  Player player=(Player)playerTile.getEntity();
  if (entity.getEntityType() == Entity.EntityType.EMPTY) {
    return false;
  }
 else {
    Player playerToAttack=(Player)entity;
    int damageToBeDone=player.getDamage();
    if (playerToAttack.isShielding()) {
      damageToBeDone=player.getDamage() - playerToAttack.getShieldStrength();
    }
    playerToAttack.setHealth(playerToAttack.getHealth() - damageToBeDone);
    if (playerToAttack.getHealth() <= HEALTH_DEAD) {
      playerToAttack.setHealth(0);
      this._isGameOver=true;
    }
    return true;
  }
}"
40516,"/** 
 * Checks to see whether or not the current player has been in their location for NUMBER_OF_TURNS_TO_STALEMATE
 * @param playerId
 * @return If the users has not moved in NUMBER_OF_TURNS_TO_STALEMATE
 */
private boolean isStalemateTurnForPlayer(int playerId){
  if (_previousLocations.get(playerId).x == getPlayer(playerId).getLocation().x && _previousLocations.get(playerId).y == getPlayer(playerId).getLocation().y) {
    _numberOfTimesAtCurrentLocation.set(playerId,_numberOfTimesAtCurrentLocation.get(playerId) + 1);
    if (_numberOfTimesAtCurrentLocation.get(playerId) > NUMBER_OF_TURNS_TO_STALEMATE) {
      return true;
    }
 else {
      _previousLocations.set(playerId,new Point(getPlayer(playerId).getLocation()));
    }
  }
 else {
    _previousLocations.set(playerId,new Point(getPlayer(playerId).getLocation()));
    _numberOfTimesAtCurrentLocation.set(playerId,1);
  }
  return false;
}","/** 
 * Checks to see whether or not the current player has been in their location and not taken damage for NUMBER_OF_TURNS_TO_STALEMATE
 * @param playerId
 * @return If the users has not moved in NUMBER_OF_TURNS_TO_STALEMATE
 */
private boolean isStalemateTurnForPlayer(int playerId){
  if (_previousLocations.get(playerId).x == getPlayer(playerId).getLocation().x && _previousLocations.get(playerId).y == getPlayer(playerId).getLocation().y && _previousHealth.get(playerId) == getPlayer(playerId).getHealth()) {
    _numberOfStalemateTurns.set(playerId,_numberOfStalemateTurns.get(playerId) + 1);
    if (_numberOfStalemateTurns.get(playerId) > NUMBER_OF_TURNS_TO_STALEMATE) {
      return true;
    }
 else {
      _previousLocations.set(playerId,new Point(getPlayer(playerId).getLocation()));
      _previousHealth.set(playerId,getPlayer(playerId).getHealth());
    }
  }
 else {
    _previousLocations.set(playerId,new Point(getPlayer(playerId).getLocation()));
    _previousHealth.set(playerId,getPlayer(playerId).getHealth());
    _numberOfStalemateTurns.set(playerId,1);
  }
  return false;
}"
40517,"/** 
 * @param entityMap
 */
public Game(EntityMap entityMap){
  this._entityMap=entityMap;
  _previousLocations.add(getPlayer(PLAYER_ID).getLocation());
  _previousLocations.add(getPlayer(OPPONENT_ID).getLocation());
  _numberOfTimesAtCurrentLocation.add(1);
  _numberOfTimesAtCurrentLocation.add(1);
}","/** 
 * @param entityMap
 */
public Game(EntityMap entityMap){
  this._entityMap=entityMap;
  _previousLocations.add(getPlayer(PLAYER_ID).getLocation());
  _previousLocations.add(getPlayer(OPPONENT_ID).getLocation());
  _numberOfStalemateTurns.add(1);
  _numberOfStalemateTurns.add(1);
  _previousHealth.add(getPlayer(PLAYER_ID).getHealth());
  _previousHealth.add(getPlayer(OPPONENT_ID).getHealth());
}"
40518,"/** 
 * Returns updated entityMap.
 * @return Updated EntityMap
 */
public Map nextTurn(){
  if (!isGameOver()) {
    boolean isStalemateForPlayer=isStalemateTurnForPlayer(PLAYER_ID);
    boolean isStalemateForOpponent=isStalemateTurnForPlayer(OPPONENT_ID);
    if (isStalemateForPlayer && isStalemateForOpponent) {
      _isStalemate=true;
      this._isGameOver=true;
    }
 else     if (this._numberOfTurnsCompleted > MAX_TURN_LIMIT) {
      _isStalemate=true;
      this._isGameOver=true;
    }
    this._numberOfTurnsCompleted++;
  }
  return this._entityMap.getMap();
}","/** 
 * Returns updated entityMap.
 * @return Updated EntityMap
 */
public Map nextTurn(){
  if (!isGameOver()) {
    boolean isStalemateForPlayer=isStalemateTurnForPlayer(PLAYER_ID);
    boolean isStalemateForOpponent=isStalemateTurnForPlayer(OPPONENT_ID);
    if (isStalemateForPlayer || isStalemateForOpponent) {
      _isStalemate=true;
      this._isGameOver=true;
    }
 else     if (this._numberOfTurnsCompleted > MAX_TURN_LIMIT) {
      _isStalemate=true;
      this._isGameOver=true;
    }
    this._numberOfTurnsCompleted++;
  }
  return this._entityMap.getMap();
}"
40519,"/** 
 * Based on the current game state data, returns if condition is true.
 * @param data takes in the data to be returned
 * @param game is the pointer to the game model
 * @return the integer value of the game data that has been looked up
 */
private int getData(String data,Game game,int id){
  int otherId;
  if (id == 0) {
    otherId=1;
  }
 else {
    otherId=0;
  }
  if (data.equals(Data.USER_HEALTH.text())) {
    return game.getPlayer(id).getHealth();
  }
 else   if (data.equals(Data.OPPONENT_HEALTH.text())) {
    return game.getPlayer(otherId).getHealth();
  }
 else   if (data.equals(Data.DISTANCE_FROM_OPPONENT.text())) {
    return (int)Math.round(game.distanceToOpponent(id,otherId));
  }
 else {
    try {
      return Integer.parseInt(data);
    }
 catch (    Exception ex) {
      System.out.println(""String_Node_Str"" + data + ""String_Node_Str"");
      return -1;
    }
  }
}","/** 
 * Based on the current game state data, returns if condition is true.
 * @param data takes in the data to be returned
 * @param game is the pointer to the game model
 * @return the integer value of the game data that has been looked up
 */
private int getData(String data,Game game,int id){
  int otherId;
  if (id == 0) {
    otherId=1;
  }
 else {
    otherId=0;
  }
  if (data.equals(Data.USER_HEALTH.text())) {
    return game.getPlayer(id).getHealth();
  }
 else   if (data.equals(Data.OPPONENT_HEALTH.text())) {
    return game.getPlayer(otherId).getHealth();
  }
 else   if (data.equals(Data.DISTANCE_FROM_OPPONENT.text())) {
    return game.pathDistanceToPlayer(id,otherId);
  }
 else {
    try {
      return Integer.parseInt(data);
    }
 catch (    Exception ex) {
      System.out.println(""String_Node_Str"" + data + ""String_Node_Str"");
      return -1;
    }
  }
}"
40520,"/** 
 * Called by doCommand to actually modify the game data with built-in functions
 * @param game the instance of the game class passed in
 * @param id the id of the player executing this script
 */
private void executeFunction(Game game,int id){
  int otherId;
  if (id == 0) {
    otherId=1;
  }
 else {
    otherId=0;
  }
  if (id == 1) {
    System.out.println(""String_Node_Str"" + id + ""String_Node_Str""+ this.command);
  }
switch (this.command) {
case APPROACH:
    game.approach(id,otherId);
  break;
case ATTACK:
game.attack(id);
break;
case HEAL:
game.heal(id,20);
break;
case EVADE:
game.evade(id,otherId);
case DO_NOTHING:
game.doNothing(id);
break;
case DEFEND:
game.defend(id);
break;
default :
game.doNothing(id);
break;
}
}","/** 
 * Called by doCommand to actually modify the game data with built-in functions
 * @param game the instance of the game class passed in
 * @param id the id of the player executing this script
 */
private void executeFunction(Game game,int id){
  int otherId;
  if (id == 0) {
    otherId=1;
  }
 else {
    otherId=0;
  }
  if (id == 1) {
    System.out.println(""String_Node_Str"" + id + ""String_Node_Str""+ this.command);
  }
switch (this.command) {
case APPROACH:
    game.approach(id,otherId);
  break;
case ATTACK:
game.attack(id);
break;
case HEAL:
game.heal(id,9);
break;
case EVADE:
game.evade(id,otherId);
case DO_NOTHING:
game.doNothing(id);
break;
case DEFEND:
game.defend(id);
break;
default :
game.doNothing(id);
break;
}
}"
40521,"public double distance(Point location1,Point location2){
  return Math.hypot(location1.x - location2.x,location1.y - location2.y);
}","/** 
 * Returns a double of the distance between two points on graph.  This includes diagonal distance
 * @param location1
 * @param location2
 * @return
 */
public double distance(Point location1,Point location2){
  return Math.hypot(location1.x - location2.x,location1.y - location2.y);
}"
40522,"/** 
 * Evades from opposing player.  Will move in direction that is one space away from player.  Will only evade 50% of time
 * @param playerId
 * @param opponentId
 * @return
 */
public boolean evade(int playerId,int opponentId){
  stopDefending(playerId);
  if (getRandomBoolean()) {
    return false;
  }
  Player player=getPlayer(playerId);
  Player opponent=getPlayer(opponentId);
  int currentDistance=pathDistanceToLocation(player.getLocation(),opponent.getLocation());
  ArrayList<Point> potentialMoveLocations=getAllPossibleMoves(getPlayer(playerId).getLocation());
  Point playerCurrentLocation=getPlayer(playerId).getLocation();
  double longestDistance=-1;
  int longestMoveIndex=-1;
  for (int i=0; i < potentialMoveLocations.size(); i++) {
    Point moveLocation=getNewLocation(playerCurrentLocation,potentialMoveLocations.get(i));
    int distanceCandidate=pathDistanceToLocation(moveLocation,opponent.getLocation());
    if (distanceCandidate > longestDistance) {
      longestDistance=distanceCandidate;
      longestMoveIndex=i;
    }
  }
  if (longestDistance > currentDistance) {
    return move(playerId,potentialMoveLocations.get(longestMoveIndex).x,potentialMoveLocations.get(longestMoveIndex).y);
  }
  return false;
}","/** 
 * Evades from opposing player.  Will move in direction that is one space away from player.  Will only evade 87.5% of time
 * @param playerId
 * @param opponentId
 * @return
 */
public boolean evade(int playerId,int opponentId){
  stopDefending(playerId);
  if (getRandomBoolean()) {
    if (getRandomBoolean()) {
      if (getRandomBoolean()) {
        return false;
      }
    }
  }
  Player player=getPlayer(playerId);
  Player opponent=getPlayer(opponentId);
  int currentDistance=pathDistanceToLocation(player.getLocation(),opponent.getLocation());
  ArrayList<Point> potentialMoveLocations=getAllPossibleMoves(getPlayer(playerId).getLocation());
  Point playerCurrentLocation=getPlayer(playerId).getLocation();
  double longestDistance=-1;
  int longestMoveIndex=-1;
  for (int i=0; i < potentialMoveLocations.size(); i++) {
    Point moveLocation=getNewLocation(playerCurrentLocation,potentialMoveLocations.get(i));
    int distanceCandidate=pathDistanceToLocation(moveLocation,opponent.getLocation());
    if (distanceCandidate > longestDistance) {
      longestDistance=distanceCandidate;
      longestMoveIndex=i;
    }
    if (distanceCandidate == longestDistance) {
      if (getRandomBoolean()) {
        longestDistance=distanceCandidate;
        longestMoveIndex=i;
      }
    }
  }
  if (longestDistance > currentDistance) {
    return move(playerId,potentialMoveLocations.get(longestMoveIndex).x,potentialMoveLocations.get(longestMoveIndex).y);
  }
  return false;
}"
40523,"/** 
 * Number of tiles to get to opponent using only horizontal and vertical movement
 * @param playerId
 * @param opponentId
 * @return
 */
public int pathDistanceToPlayer(int playerId,int opponentId){
  Point distances=getDeltaDistances(playerId,opponentId);
  return (Math.abs(distances.x) + Math.abs(distances.y)) - 1;
}","/** 
 * Number of tiles to get to opponent using only horizontal and vertical movement
 * @param playerId
 * @param opponentId
 * @return
 */
public int pathDistanceToPlayer(int playerId,int opponentId){
  Point distances=getDeltaDistances(playerId,opponentId);
  return Math.abs(distances.x) + Math.abs(distances.y);
}"
40524,"/** 
 * Attacks location x and y away from players current location
 * @param playerId Player
 * @param x        Units away from players current location
 * @param y        Units away from players current location
 * @return If player was able to attack
 */
private boolean attackLocation(int playerId,int x,int y){
  EntityTile playerTile=this._entityMap.getPlayers().get(playerId);
  Point location=playerTile.getLocation();
  if (!_entityMap.isInsideMap(new Point(location.x + x,location.y + y))) {
    return false;
  }
  Entity entity=getEntityAtLocation(new Point(location.x + x,location.y + y));
  Player player=(Player)playerTile.getEntity();
  player.setShielding(false);
  if (entity.getEntityType() == Entity.EntityType.EMPTY) {
    return false;
  }
 else {
    Player playerToAttack=(Player)entity;
    int damageToBeDone=player.getDamage();
    if (playerToAttack.isShielding()) {
      damageToBeDone=player.getDamage() - playerToAttack.getShieldStrength();
    }
    playerToAttack.setHealth(playerToAttack.getHealth() - damageToBeDone);
    if (playerToAttack.getHealth() <= HEALTH_DEAD) {
      playerToAttack.setHealth(0);
      this._isGameOver=true;
    }
    return true;
  }
}","/** 
 * Attacks location x and y away from players current location
 * @param playerId Player
 * @param x        Units away from players current location
 * @param y        Units away from players current location
 * @return If player was able to attack
 */
private boolean attackLocation(int playerId,int x,int y){
  EntityTile playerTile=this._entityMap.getPlayers().get(playerId);
  Point location=playerTile.getLocation();
  stopDefending(playerId);
  if (!_entityMap.isInsideMap(new Point(location.x + x,location.y + y))) {
    return false;
  }
  Entity entity=getEntityAtLocation(new Point(location.x + x,location.y + y));
  Player player=(Player)playerTile.getEntity();
  if (entity.getEntityType() == Entity.EntityType.EMPTY) {
    return false;
  }
 else {
    Player playerToAttack=(Player)entity;
    int damageToBeDone=player.getDamage();
    if (playerToAttack.isShielding()) {
      damageToBeDone=player.getDamage() - playerToAttack.getShieldStrength();
    }
    playerToAttack.setHealth(playerToAttack.getHealth() - damageToBeDone);
    if (playerToAttack.getHealth() <= HEALTH_DEAD) {
      playerToAttack.setHealth(0);
      this._isGameOver=true;
    }
    return true;
  }
}"
40525,"/** 
 * Checks to see whether or not the current player has been in their location for NUMBER_OF_TURNS_TO_STALEMATE
 * @param playerId
 * @return If the users has not moved in NUMBER_OF_TURNS_TO_STALEMATE
 */
private boolean isStalemateTurnForPlayer(int playerId){
  if (_previousLocations.get(playerId).x == getPlayer(playerId).getLocation().x && _previousLocations.get(playerId).y == getPlayer(playerId).getLocation().y) {
    _numberOfTimesAtCurrentLocation.set(playerId,_numberOfTimesAtCurrentLocation.get(playerId) + 1);
    if (_numberOfTimesAtCurrentLocation.get(playerId) > NUMBER_OF_TURNS_TO_STALEMATE) {
      return true;
    }
 else {
      _previousLocations.set(playerId,new Point(getPlayer(playerId).getLocation()));
    }
  }
 else {
    _previousLocations.set(playerId,new Point(getPlayer(playerId).getLocation()));
    _numberOfTimesAtCurrentLocation.set(playerId,1);
  }
  return false;
}","/** 
 * Checks to see whether or not the current player has been in their location and not taken damage for NUMBER_OF_TURNS_TO_STALEMATE
 * @param playerId
 * @return If the users has not moved in NUMBER_OF_TURNS_TO_STALEMATE
 */
private boolean isStalemateTurnForPlayer(int playerId){
  if (_previousLocations.get(playerId).x == getPlayer(playerId).getLocation().x && _previousLocations.get(playerId).y == getPlayer(playerId).getLocation().y && _previousHealth.get(playerId) == getPlayer(playerId).getHealth()) {
    _numberOfStalemateTurns.set(playerId,_numberOfStalemateTurns.get(playerId) + 1);
    if (_numberOfStalemateTurns.get(playerId) > NUMBER_OF_TURNS_TO_STALEMATE) {
      return true;
    }
 else {
      _previousLocations.set(playerId,new Point(getPlayer(playerId).getLocation()));
      _previousHealth.set(playerId,getPlayer(playerId).getHealth());
    }
  }
 else {
    _previousLocations.set(playerId,new Point(getPlayer(playerId).getLocation()));
    _previousHealth.set(playerId,getPlayer(playerId).getHealth());
    _numberOfStalemateTurns.set(playerId,1);
  }
  return false;
}"
40526,"/** 
 * @param entityMap
 */
public Game(EntityMap entityMap){
  this._entityMap=entityMap;
  _previousLocations.add(getPlayer(PLAYER_ID).getLocation());
  _previousLocations.add(getPlayer(OPPONENT_ID).getLocation());
  _numberOfTimesAtCurrentLocation.add(1);
  _numberOfTimesAtCurrentLocation.add(1);
}","/** 
 * @param entityMap
 */
public Game(EntityMap entityMap){
  this._entityMap=entityMap;
  _previousLocations.add(getPlayer(PLAYER_ID).getLocation());
  _previousLocations.add(getPlayer(OPPONENT_ID).getLocation());
  _numberOfStalemateTurns.add(1);
  _numberOfStalemateTurns.add(1);
  _previousHealth.add(getPlayer(PLAYER_ID).getHealth());
  _previousHealth.add(getPlayer(OPPONENT_ID).getHealth());
}"
40527,"/** 
 * Returns updated entityMap.
 * @return Updated EntityMap
 */
public Map nextTurn(){
  if (!isGameOver()) {
    boolean isStalemateForPlayer=isStalemateTurnForPlayer(PLAYER_ID);
    boolean isStalemateForOpponent=isStalemateTurnForPlayer(OPPONENT_ID);
    if (isStalemateForPlayer && isStalemateForOpponent) {
      _isStalemate=true;
      this._isGameOver=true;
    }
 else     if (this._numberOfTurnsCompleted > MAX_TURN_LIMIT) {
      _isStalemate=true;
      this._isGameOver=true;
    }
    this._numberOfTurnsCompleted++;
  }
  return this._entityMap.getMap();
}","/** 
 * Returns updated entityMap.
 * @return Updated EntityMap
 */
public Map nextTurn(){
  if (!isGameOver()) {
    boolean isStalemateForPlayer=isStalemateTurnForPlayer(PLAYER_ID);
    boolean isStalemateForOpponent=isStalemateTurnForPlayer(OPPONENT_ID);
    if (isStalemateForPlayer || isStalemateForOpponent) {
      _isStalemate=true;
      this._isGameOver=true;
    }
 else     if (this._numberOfTurnsCompleted > MAX_TURN_LIMIT) {
      _isStalemate=true;
      this._isGameOver=true;
    }
    this._numberOfTurnsCompleted++;
  }
  return this._entityMap.getMap();
}"
40528,"/** 
 * Performs all of the necessary game logic for one tick, or turn, if currently in-game.
 */
public Map tick(){
  if (game == null) {
    ENGINE_LOGGER.critical(""String_Node_Str"");
    return null;
  }
  if (_isPlayerTurn) {
    List<ScriptCommand> playerCommands=this.gameGUI.getCommandObjects();
    boolean playerCommandExecuted=false;
    for (    ScriptCommand pc : playerCommands) {
      boolean executed=pc.doCommand(this.game,0);
      if (executed) {
        playerCommandExecuted=true;
        break;
      }
    }
    if (!playerCommandExecuted)     this.game.doNothing(0);
  }
 else {
    boolean computerCommandExecuted=false;
    for (    ScriptCommand cc : this.cpuCommands) {
      boolean executed=cc.doCommand(this.game,1);
      if (executed) {
        computerCommandExecuted=true;
        break;
      }
    }
    if (!computerCommandExecuted)     this.game.doNothing(1);
  }
  this._isPlayerTurn=!_isPlayerTurn;
  return game.nextTurn();
}","/** 
 * Performs all of the necessary game logic for one tick, or turn, if currently in-game.
 */
public Map tick(){
  if (game == null) {
    ENGINE_LOGGER.critical(""String_Node_Str"");
    return null;
  }
  if (!game.isGameOver()) {
    if (_isPlayerTurn) {
      List<ScriptCommand> playerCommands=this.gameGUI.getCommandObjects();
      boolean playerCommandExecuted=false;
      for (      ScriptCommand pc : playerCommands) {
        boolean executed=pc.doCommand(this.game,0);
        if (executed) {
          playerCommandExecuted=true;
          break;
        }
      }
      if (!playerCommandExecuted)       this.game.doNothing(0);
    }
 else {
      boolean computerCommandExecuted=false;
      for (      ScriptCommand cc : this.cpuCommands) {
        boolean executed=cc.doCommand(this.game,1);
        if (executed) {
          computerCommandExecuted=true;
          break;
        }
      }
      if (!computerCommandExecuted)       this.game.doNothing(1);
    }
    this._isPlayerTurn=!_isPlayerTurn;
  }
  return game.nextTurn();
}"
40529,"public void generateCPUScript(){
  this.cpuCommands=new ArrayList<>();
  ArrayList<Check> checks=new ArrayList<>();
}","public void generateCPUScript(){
  this.cpuCommands=new ArrayList<>();
  ArrayList<Check> checks=new ArrayList<>();
  ArrayList<Check> checksForAttack=new ArrayList<>();
  checks.add(new Check(Data.DISTANCE_FROM_OPPONENT.text(),""String_Node_Str"",Operator.GREATER_THAN));
  ScriptCommand approach=new ScriptCommand(checks,Command.APPROACH);
  this.cpuCommands.add(approach);
  checksForAttack.add(new Check(Data.DISTANCE_FROM_OPPONENT.text(),Data.DISTANCE_FROM_OPPONENT.text(),Operator.EQUALS));
  ScriptCommand attack=new ScriptCommand(checksForAttack,Command.ATTACK);
  this.cpuCommands.add(attack);
}"
40530,"/** 
 * Updates the GUI based on data read from Map Some child code derived from http://discourse.mapeditor.org/t/loading-tmx-map-and-displaying-with-javafx/1189
 */
private void updateGameGUI(){
  if (_map == null) {
    LOGGER.fatal(""String_Node_Str"");
    return;
  }
  String overlay=null;
switch (_engine.getGameState()) {
case INACTIVE:
    return;
case WON:
  overlay=""String_Node_Str"";
break;
case LOST:
overlay=""String_Node_Str"";
break;
case STALEMATE:
overlay=""String_Node_Str"";
break;
}
if (overlay != null) {
if (!hasDisplayedResultScreen) {
URL img=getClass().getResource(overlay);
displayResultScreen(img);
}
return;
}
ArrayList<MapLayer> layerList=new ArrayList<>(this._map.getLayers());
redrawCoords=new ArrayList<>();
Collections.reverse(layerList);
identifyDeltas(layerList);
Collections.reverse(layerList);
updateDeltas(layerList);
if (this.userHealth == null) {
this.userHealth=new ProgressBar();
this.opponentHealth=new ProgressBar();
this.opponentHealth.setTranslateX(700);
}
 else {
_imagePane.getChildren().remove(this.userHealth);
_imagePane.getChildren().remove(this.opponentHealth);
}
double userHealth=_engine.game.getPlayer(Game.PLAYER_ID).getHealth();
double opponentHealth=_engine.game.getPlayer(Game.OPPONENT_ID).getHealth();
double max=Game.HEALTH_MAX;
double userRatio=userHealth / max;
this.userHealth.setProgress(userRatio);
double opponentRatio=opponentHealth / max;
System.out.println(""String_Node_Str"" + opponentHealth);
System.out.println(""String_Node_Str"" + Double.toString(opponentRatio));
this.opponentHealth.setProgress(opponentHealth / max);
_imagePane.getChildren().add(this.opponentHealth);
_imagePane.getChildren().add(this.userHealth);
}","/** 
 * Updates the GUI based on data read from Map Some child code derived from http://discourse.mapeditor.org/t/loading-tmx-map-and-displaying-with-javafx/1189
 */
private void updateGameGUI(){
  if (_map == null) {
    LOGGER.fatal(""String_Node_Str"");
    return;
  }
  String overlay=null;
switch (_engine.getGameState()) {
case INACTIVE:
    return;
case WON:
  if (this._victoryConditionTickCounter < 3) {
    this._victoryConditionTickCounter++;
  }
 else {
    overlay=""String_Node_Str"";
  }
break;
case LOST:
if (this._victoryConditionTickCounter < 3) {
this._victoryConditionTickCounter++;
}
 else {
overlay=""String_Node_Str"";
}
break;
case STALEMATE:
if (this._victoryConditionTickCounter < 3) {
this._victoryConditionTickCounter++;
}
 else {
overlay=""String_Node_Str"";
}
break;
}
if (overlay != null) {
if (!hasDisplayedResultScreen) {
URL img=getClass().getResource(overlay);
displayResultScreen(img);
}
return;
}
ArrayList<MapLayer> layerList=new ArrayList<>(this._map.getLayers());
redrawCoords=new ArrayList<>();
Collections.reverse(layerList);
identifyDeltas(layerList);
Collections.reverse(layerList);
updateDeltas(layerList);
if (this.userHealth == null) {
this.userHealth=new ProgressBar();
this.opponentHealth=new ProgressBar();
this.opponentHealth.setTranslateX(700);
}
 else {
_imagePane.getChildren().remove(this.userHealth);
_imagePane.getChildren().remove(this.opponentHealth);
}
double userHealth=_engine.game.getPlayer(Game.PLAYER_ID).getHealth();
double opponentHealth=_engine.game.getPlayer(Game.OPPONENT_ID).getHealth();
double max=Game.HEALTH_MAX;
double userRatio=userHealth / max;
this.userHealth.setProgress(userRatio);
double opponentRatio=opponentHealth / max;
System.out.println(""String_Node_Str"" + opponentHealth);
System.out.println(""String_Node_Str"" + Double.toString(opponentRatio));
this.opponentHealth.setProgress(opponentHealth / max);
_imagePane.getChildren().add(this.opponentHealth);
_imagePane.getChildren().add(this.userHealth);
}"
40531,"/** 
 * Called by doCommand to actually modify the game data with built-in functions
 * @param game the instance of the game class passed in
 * @param id the id of the player excecuting this script
 */
private void executeFunction(Game game,int id){
  int otherId;
  if (id == 0) {
    otherId=1;
  }
 else {
    otherId=0;
  }
switch (this.command) {
case APPROACH:
    game.approach(id,otherId);
  break;
case ATTACK:
game.attack(id);
case HEAL:
game.heal(id,20);
break;
case EVADE:
game.evade(id,otherId);
case DO_NOTHING:
game.doNothing(id);
break;
case DEFEND:
game.defend(id);
break;
default :
game.doNothing(id);
break;
}
}","/** 
 * Called by doCommand to actually modify the game data with built-in functions
 * @param game the instance of the game class passed in
 * @param id the id of the player executing this script
 */
private void executeFunction(Game game,int id){
  int otherId;
  if (id == 0) {
    otherId=1;
  }
 else {
    otherId=0;
  }
  if (id == 1) {
    System.out.println(""String_Node_Str"" + id + ""String_Node_Str""+ this.command);
  }
switch (this.command) {
case APPROACH:
    game.approach(id,otherId);
  break;
case ATTACK:
game.attack(id);
break;
case HEAL:
game.heal(id,20);
break;
case EVADE:
game.evade(id,otherId);
case DO_NOTHING:
game.doNothing(id);
break;
case DEFEND:
game.defend(id);
break;
default :
game.doNothing(id);
break;
}
}"
40532,"/** 
 * If opponent is within one tile horizontally or vertically, player will attack that tile.  If not, returns false
 * @param playerId Player
 * @return If player was able to attack
 */
public boolean attack(int playerId){
  stopDefending(playerId);
  if (attackLocation(0,0,1)) {
    return true;
  }
 else   if (attackLocation(0,0,-1)) {
    return true;
  }
 else   if (attackLocation(0,1,0)) {
    return true;
  }
 else   if (attackLocation(0,-1,0)) {
    return true;
  }
 else {
    return false;
  }
}","/** 
 * If opponent is within one tile horizontally or vertically, player will attack that tile.  If not, returns false
 * @param playerId Player
 * @return If player was able to attack
 */
public boolean attack(int playerId){
  stopDefending(playerId);
  System.out.println(""String_Node_Str"" + playerId);
  if (attackLocation(playerId,0,1)) {
    return true;
  }
 else   if (attackLocation(playerId,0,-1)) {
    return true;
  }
 else   if (attackLocation(playerId,1,0)) {
    return true;
  }
 else   if (attackLocation(playerId,-1,0)) {
    return true;
  }
 else {
    return false;
  }
}"
40533,"/** 
 * Checks to see whether or not the current player has been in their location for NUMBER_OF_TURNS_TO_STALEMATE
 * @param playerId
 * @return
 */
private boolean isStalemateTurnForPlayer(int playerId){
  if (playerId == 0) {
    System.out.println(1);
  }
  if (_previousLocations.get(playerId).x == getPlayer(playerId).getLocation().x && _previousLocations.get(playerId).y == getPlayer(playerId).getLocation().y) {
    _numberOfTimesAtCurrentLocation.set(playerId,_numberOfTimesAtCurrentLocation.get(playerId) + 1);
    if (_numberOfTimesAtCurrentLocation.get(playerId) > NUMBER_OF_TURNS_TO_STALEMATE) {
      return true;
    }
 else {
      _previousLocations.set(playerId,new Point(getPlayer(playerId).getLocation()));
    }
  }
 else {
    _previousLocations.set(playerId,new Point(getPlayer(playerId).getLocation()));
    _numberOfTimesAtCurrentLocation.set(playerId,1);
  }
  return false;
}","/** 
 * Checks to see whether or not the current player has been in their location for NUMBER_OF_TURNS_TO_STALEMATE
 * @param playerId
 * @return If the users has not moved in NUMBER_OF_TURNS_TO_STALEMATE
 */
private boolean isStalemateTurnForPlayer(int playerId){
  if (_previousLocations.get(playerId).x == getPlayer(playerId).getLocation().x && _previousLocations.get(playerId).y == getPlayer(playerId).getLocation().y) {
    _numberOfTimesAtCurrentLocation.set(playerId,_numberOfTimesAtCurrentLocation.get(playerId) + 1);
    if (_numberOfTimesAtCurrentLocation.get(playerId) > NUMBER_OF_TURNS_TO_STALEMATE) {
      return true;
    }
 else {
      _previousLocations.set(playerId,new Point(getPlayer(playerId).getLocation()));
    }
  }
 else {
    _previousLocations.set(playerId,new Point(getPlayer(playerId).getLocation()));
    _numberOfTimesAtCurrentLocation.set(playerId,1);
  }
  return false;
}"
40534,"/** 
 * Used by external classes to acquire game state.
 * @return The GameStatus pertaining to the current state of the game.
 */
public GameStatus getState(){
  if (!isGameOver()) {
    return GameStatus.RUNNING;
  }
  if (isStalemate()) {
    return GameStatus.STALEMATE;
  }
  LOGGER.warning(""String_Node_Str"");
  if (isDead(0)) {
    return GameStatus.LOST;
  }
 else   if (isDead(1)) {
    System.out.println(""String_Node_Str"");
    return GameStatus.WON;
  }
  throw new RuntimeException(""String_Node_Str"");
}","/** 
 * Used by external classes to acquire game state.
 * @return The GameStatus pertaining to the current state of the game.
 */
public GameStatus getState(){
  if (!isGameOver()) {
    return GameStatus.RUNNING;
  }
  if (isStalemate()) {
    return GameStatus.STALEMATE;
  }
  LOGGER.warning(""String_Node_Str"");
  if (isDead(0)) {
    return GameStatus.LOST;
  }
 else   if (isDead(1)) {
    System.out.println(getPlayer(1).getHealth());
    return GameStatus.WON;
  }
  throw new RuntimeException(""String_Node_Str"");
}"
40535,"/** 
 * Returns updated entityMap.
 * @return Updated EntityMap
 */
public Map nextTurn(){
  boolean isStalemateForPlayer=isStalemateTurnForPlayer(PLAYER_ID);
  boolean isStalemateForOpponent=isStalemateTurnForPlayer(OPPONENT_ID);
  if (isStalemateForPlayer && isStalemateForOpponent) {
    _isStalemate=true;
    this._isGameOver=true;
  }
 else   if (this._numberOfTurnsCompleted > MAX_TURN_LIMIT) {
    _isStalemate=true;
    this._isGameOver=true;
  }
  this._numberOfTurnsCompleted++;
  return this._entityMap.getMap();
}","/** 
 * Returns updated entityMap.
 * @return Updated EntityMap
 */
public Map nextTurn(){
  if (!isGameOver()) {
    boolean isStalemateForPlayer=isStalemateTurnForPlayer(PLAYER_ID);
    boolean isStalemateForOpponent=isStalemateTurnForPlayer(OPPONENT_ID);
    if (isStalemateForPlayer && isStalemateForOpponent) {
      _isStalemate=true;
      this._isGameOver=true;
    }
 else     if (this._numberOfTurnsCompleted > MAX_TURN_LIMIT) {
      _isStalemate=true;
      this._isGameOver=true;
    }
    this._numberOfTurnsCompleted++;
  }
  return this._entityMap.getMap();
}"
40536,"/** 
 * Performs all of the required actions for the UI to tick.
 * @param ts The ticking service to be used for engine tick calls.
 */
private void uiTick(TickingService ts){
  if (!_engine.isRunning()) {
    LOGGER.info(""String_Node_Str"");
    if (!_engine.cleanup()) {
      LOGGER.critical(""String_Node_Str"");
      System.exit(1);
    }
    System.exit(0);
  }
  updateGameGUI();
  ts.restart();
}","/** 
 * Performs all of the required actions for the UI to tick.
 * @param ts The ticking service to be used for engine tick calls.
 */
private void uiTick(TickingService ts){
  if (!_engine.isRunning()) {
    LOGGER.info(""String_Node_Str"");
    if (!_engine.cleanup()) {
      LOGGER.critical(""String_Node_Str"");
      System.exit(1);
    }
    return;
  }
  updateGameGUI();
  ts.restart();
}"
40537,"@Override public void start(Stage primaryStage) throws Exception {
  FXMLLoader loader=new FXMLLoader(getClass().getResource(""String_Node_Str""));
  Parent root=loader.load();
  ObservableMap namespace=loader.getNamespace();
  AnchorPane pane=(AnchorPane)namespace.get(""String_Node_Str"");
  Group group=new Group();
  _imagePane=new Pane();
  _imagePane.setPrefSize(800,480);
  pane.getChildren().add(group);
  group.getChildren().add(_imagePane);
  primaryStage.setTitle(""String_Node_Str"");
  primaryStage.setScene(new Scene(root,800,480));
  primaryStage.setResizable(false);
  primaryStage.show();
  startUIUpdateThread();
}","@Override public void start(Stage primaryStage) throws Exception {
  FXMLLoader loader=new FXMLLoader(getClass().getResource(""String_Node_Str""));
  Parent root=loader.load();
  ObservableMap namespace=loader.getNamespace();
  AnchorPane pane=(AnchorPane)namespace.get(""String_Node_Str"");
  Group group=new Group();
  _imagePane=new Pane();
  _imagePane.setPrefSize(800,480);
  pane.getChildren().add(group);
  group.getChildren().add(_imagePane);
  this._stage=primaryStage;
  primaryStage.setTitle(""String_Node_Str"");
  primaryStage.setScene(new Scene(root,800,480));
  primaryStage.setResizable(false);
  primaryStage.show();
  startUIUpdateThread();
}"
40538,"/** 
 * Updates the GUI based on data read from Map Some child code derived from http://discourse.mapeditor.org/t/loading-tmx-map-and-displaying-with-javafx/1189
 */
private void updateGameGUI(){
  if (_map == null) {
    LOGGER.fatal(""String_Node_Str"");
    return;
  }
  String overlay=null;
switch (_engine.getGameState()) {
case INACTIVE:
    return;
case WON:
  overlay=""String_Node_Str"";
break;
case LOST:
overlay=""String_Node_Str"";
break;
case STALEMATE:
overlay=""String_Node_Str"";
break;
}
if (overlay != null) {
if (!hasDisplayedResultScreen) {
URL img=getClass().getResource(overlay);
displayResultScreen(img);
}
return;
}
ArrayList<MapLayer> layerList=new ArrayList<>(this._map.getLayers());
redrawCoords=new ArrayList<>();
Collections.reverse(layerList);
identifyDeltas(layerList);
Collections.reverse(layerList);
updateDeltas(layerList);
if (this.userHealth == null) {
this.userHealth=new ProgressBar();
this.opponentHealth=new ProgressBar();
this.opponentHealth.setTranslateX(700);
}
 else {
_imagePane.getChildren().remove(this.userHealth);
_imagePane.getChildren().remove(this.opponentHealth);
}
double userHealth=_engine.game.getPlayer(Game.PLAYER_ID).getHealth();
double opponentHealth=_engine.game.getPlayer(Game.OPPONENT_ID).getHealth();
double max=Game.HEALTH_MAX;
double userRatio=userHealth / max;
this.userHealth.setProgress(userRatio);
double opponentRatio=opponentHealth / max;
System.out.println(""String_Node_Str"" + opponentHealth);
System.out.println(""String_Node_Str"" + Double.toString(opponentRatio));
this.opponentHealth.setProgress(opponentHealth / max);
_imagePane.getChildren().add(this.opponentHealth);
_imagePane.getChildren().add(this.userHealth);
}","/** 
 * Updates the GUI based on data read from Map Some child code derived from http://discourse.mapeditor.org/t/loading-tmx-map-and-displaying-with-javafx/1189
 */
private void updateGameGUI(){
  if (_map == null) {
    LOGGER.fatal(""String_Node_Str"");
    return;
  }
  String overlay=null;
switch (_engine.getGameState()) {
case INACTIVE:
    return;
case WON:
  overlay=""String_Node_Str"";
break;
case LOST:
overlay=""String_Node_Str"";
break;
case STALEMATE:
overlay=""String_Node_Str"";
break;
}
if (overlay != null) {
if (!hasDisplayedResultScreen) {
URL img=getClass().getResource(overlay);
displayResultScreen(img);
}
Alert endGame=new Alert(Alert.AlertType.CONFIRMATION,""String_Node_Str"",ButtonType.YES,ButtonType.NO);
endGame.initModality(Modality.APPLICATION_MODAL);
endGame.setHeaderText(null);
endGame.setTitle(""String_Node_Str"");
Optional<ButtonType> result=endGame.showAndWait();
if (result.isPresent()) {
_engine.shutdown(true);
if (result.get().equals(ButtonType.YES)) {
try {
MenuGUI m=new MenuGUI();
_stage.getScene().getWindow().hide();
return;
}
 catch (Exception ex) {
System.exit(1);
}
}
 else {
System.exit(0);
}
}
return;
}
ArrayList<MapLayer> layerList=new ArrayList<>(this._map.getLayers());
redrawCoords=new ArrayList<>();
Collections.reverse(layerList);
identifyDeltas(layerList);
Collections.reverse(layerList);
updateDeltas(layerList);
if (this.userHealth == null) {
this.userHealth=new ProgressBar();
this.opponentHealth=new ProgressBar();
this.opponentHealth.setTranslateX(700);
}
 else {
_imagePane.getChildren().remove(this.userHealth);
_imagePane.getChildren().remove(this.opponentHealth);
}
double userHealth=_engine.game.getPlayer(Game.PLAYER_ID).getHealth();
double opponentHealth=_engine.game.getPlayer(Game.OPPONENT_ID).getHealth();
double max=Game.HEALTH_MAX;
double userRatio=userHealth / max;
this.userHealth.setProgress(userRatio);
double opponentRatio=opponentHealth / max;
System.out.println(""String_Node_Str"" + opponentHealth);
System.out.println(""String_Node_Str"" + Double.toString(opponentRatio));
this.opponentHealth.setProgress(opponentHealth / max);
_imagePane.getChildren().add(this.opponentHealth);
_imagePane.getChildren().add(this.userHealth);
}"
40539,"/** 
 * Performs all of the necessary game logic for one tick, or turn, if currently in-game.
 */
public Map tick(){
  if (game == null) {
    ENGINE_LOGGER.critical(""String_Node_Str"");
    return null;
  }
  if (game.getNumberOfTurnsCompleted() > 30) {
    this.shutdown();
  }
  List<ScriptCommand> playerCommands=this.gameGUI.getCommandObjects();
  boolean playerCommandExecuted=false;
  for (  ScriptCommand pc : playerCommands) {
    boolean executed=pc.doCommand(this.game,0);
    if (executed) {
      playerCommandExecuted=true;
      break;
    }
  }
  if (!playerCommandExecuted)   this.game.doNothing(0);
  boolean computerCommandExecuted=false;
  for (  ScriptCommand cc : this.cpuCommands) {
    boolean executed=cc.doCommand(this.game,1);
    if (executed) {
      computerCommandExecuted=true;
      break;
    }
  }
  if (!computerCommandExecuted)   this.game.doNothing(1);
  return game.nextTurn();
}","/** 
 * Performs all of the necessary game logic for one tick, or turn, if currently in-game.
 */
public Map tick(){
  if (game == null) {
    ENGINE_LOGGER.critical(""String_Node_Str"");
    return null;
  }
  List<ScriptCommand> playerCommands=this.gameGUI.getCommandObjects();
  boolean playerCommandExecuted=false;
  for (  ScriptCommand pc : playerCommands) {
    boolean executed=pc.doCommand(this.game,0);
    if (executed) {
      playerCommandExecuted=true;
      break;
    }
  }
  if (!playerCommandExecuted)   this.game.doNothing(0);
  boolean computerCommandExecuted=false;
  for (  ScriptCommand cc : this.cpuCommands) {
    boolean executed=cc.doCommand(this.game,1);
    if (executed) {
      computerCommandExecuted=true;
      break;
    }
  }
  if (!computerCommandExecuted)   this.game.doNothing(1);
  return game.nextTurn();
}"
40540,"/** 
 * Called by doCommand to actually modify the game data with built-in functions
 * @param game the instance of the game class passed in
 * @param id the id of the player excecuting this script
 */
private void executeFunction(Game game,int id){
  int otherId;
  if (id == 0) {
    otherId=1;
  }
 else {
    otherId=0;
  }
switch (this.command) {
case APPROACH:
    game.approach(id,otherId);
  break;
case ATTACK:
if (!game.approach(id,otherId)) {
  game.attack(id);
}
case HEAL:
game.heal(id,20);
break;
case DO_NOTHING:
game.doNothing(id);
break;
case DEFEND:
game.defend(id);
break;
default :
game.doNothing(id);
break;
}
}","/** 
 * Called by doCommand to actually modify the game data with built-in functions
 * @param game the instance of the game class passed in
 * @param id the id of the player excecuting this script
 */
private void executeFunction(Game game,int id){
  int otherId;
  if (id == 0) {
    otherId=1;
  }
 else {
    otherId=0;
  }
switch (this.command) {
case APPROACH:
    game.approach(id,otherId);
  break;
case ATTACK:
if (!game.approach(id,otherId)) {
  game.attack(id);
}
case HEAL:
game.heal(id,20);
break;
case EVADE:
game.evade(id,otherId);
case DO_NOTHING:
game.doNothing(id);
break;
case DEFEND:
game.defend(id);
break;
default :
game.doNothing(id);
break;
}
}"
40541,"/** 
 * Used by external classes to acquire game state.
 * @return The GameStatus pertaining to the current state of the game.
 */
public GameStatus getState(){
  if (!isGameOver()) {
    return GameStatus.RUNNING;
  }
  if (isStalemate()) {
    return GameStatus.STALEMATE;
  }
  LOGGER.warning(""String_Node_Str"");
  if (isDead(0)) {
    System.out.println(""String_Node_Str"");
    return GameStatus.LOST;
  }
 else   if (isDead(1)) {
    System.out.println(""String_Node_Str"");
    return GameStatus.WON;
  }
  throw new RuntimeException(""String_Node_Str"");
}","/** 
 * Used by external classes to acquire game state.
 * @return The GameStatus pertaining to the current state of the game.
 */
public GameStatus getState(){
  if (!isGameOver()) {
    return GameStatus.RUNNING;
  }
  if (isStalemate()) {
    return GameStatus.STALEMATE;
  }
  LOGGER.warning(""String_Node_Str"");
  if (isDead(0)) {
    return GameStatus.LOST;
  }
 else   if (isDead(1)) {
    System.out.println(""String_Node_Str"");
    return GameStatus.WON;
  }
  throw new RuntimeException(""String_Node_Str"");
}"
40542,"/** 
 * Performs all of the required actions for the UI to tick.
 * @param ts The ticking service to be used for engine tick calls.
 */
private void uiTick(TickingService ts){
  if (!_engine.isRunning()) {
    LOGGER.info(""String_Node_Str"");
    if (!_engine.cleanup()) {
      LOGGER.critical(""String_Node_Str"");
      System.exit(1);
    }
    System.exit(0);
  }
  updateGameGUI();
  ts.restart();
}","/** 
 * Performs all of the required actions for the UI to tick.
 * @param ts The ticking service to be used for engine tick calls.
 */
private void uiTick(TickingService ts){
  if (!_engine.isRunning()) {
    LOGGER.info(""String_Node_Str"");
    if (!_engine.cleanup()) {
      LOGGER.critical(""String_Node_Str"");
      System.exit(1);
    }
    return;
  }
  updateGameGUI();
  ts.restart();
}"
40543,"@Override public void start(Stage primaryStage) throws Exception {
  FXMLLoader loader=new FXMLLoader(getClass().getResource(""String_Node_Str""));
  Parent root=loader.load();
  ObservableMap namespace=loader.getNamespace();
  AnchorPane pane=(AnchorPane)namespace.get(""String_Node_Str"");
  Group group=new Group();
  _imagePane=new Pane();
  _imagePane.setPrefSize(800,480);
  pane.getChildren().add(group);
  group.getChildren().add(_imagePane);
  primaryStage.setTitle(""String_Node_Str"");
  primaryStage.setScene(new Scene(root,800,480));
  primaryStage.setResizable(false);
  primaryStage.show();
  startUIUpdateThread();
}","@Override public void start(Stage primaryStage) throws Exception {
  FXMLLoader loader=new FXMLLoader(getClass().getResource(""String_Node_Str""));
  Parent root=loader.load();
  ObservableMap namespace=loader.getNamespace();
  AnchorPane pane=(AnchorPane)namespace.get(""String_Node_Str"");
  Group group=new Group();
  _imagePane=new Pane();
  _imagePane.setPrefSize(800,480);
  pane.getChildren().add(group);
  group.getChildren().add(_imagePane);
  this._stage=primaryStage;
  primaryStage.setTitle(""String_Node_Str"");
  primaryStage.setScene(new Scene(root,800,480));
  primaryStage.setResizable(false);
  primaryStage.show();
  startUIUpdateThread();
}"
40544,"/** 
 * Updates the GUI based on data read from Map Some child code derived from http://discourse.mapeditor.org/t/loading-tmx-map-and-displaying-with-javafx/1189
 */
private void updateGameGUI(){
  if (_map == null) {
    LOGGER.fatal(""String_Node_Str"");
    return;
  }
  String overlay=null;
switch (_engine.getGameState()) {
case INACTIVE:
    return;
case WON:
  overlay=""String_Node_Str"";
break;
case LOST:
overlay=""String_Node_Str"";
break;
case STALEMATE:
overlay=""String_Node_Str"";
break;
}
if (overlay != null) {
if (!hasDisplayedResultScreen) {
URL img=getClass().getResource(overlay);
displayResultScreen(img);
}
return;
}
ArrayList<MapLayer> layerList=new ArrayList<>(this._map.getLayers());
redrawCoords=new ArrayList<>();
Collections.reverse(layerList);
identifyDeltas(layerList);
Collections.reverse(layerList);
updateDeltas(layerList);
if (this.userHealth == null) {
this.userHealth=new ProgressBar();
this.opponentHealth=new ProgressBar();
this.opponentHealth.setTranslateX(700);
}
 else {
_imagePane.getChildren().remove(this.userHealth);
_imagePane.getChildren().remove(this.opponentHealth);
}
double userHealth=_engine.game.getPlayer(Game.PLAYER_ID).getHealth();
double opponentHealth=_engine.game.getPlayer(Game.OPPONENT_ID).getHealth();
double max=Game.HEALTH_MAX;
double userRatio=userHealth / max;
this.userHealth.setProgress(userRatio);
double opponentRatio=opponentHealth / max;
System.out.println(""String_Node_Str"" + opponentHealth);
System.out.println(""String_Node_Str"" + Double.toString(opponentRatio));
this.opponentHealth.setProgress(opponentHealth / max);
_imagePane.getChildren().add(this.opponentHealth);
_imagePane.getChildren().add(this.userHealth);
}","/** 
 * Updates the GUI based on data read from Map Some child code derived from http://discourse.mapeditor.org/t/loading-tmx-map-and-displaying-with-javafx/1189
 */
private void updateGameGUI(){
  if (_map == null) {
    LOGGER.fatal(""String_Node_Str"");
    return;
  }
  String overlay=null;
switch (_engine.getGameState()) {
case INACTIVE:
    return;
case WON:
  overlay=""String_Node_Str"";
break;
case LOST:
overlay=""String_Node_Str"";
break;
case STALEMATE:
overlay=""String_Node_Str"";
break;
}
if (overlay != null) {
if (!hasDisplayedResultScreen) {
URL img=getClass().getResource(overlay);
displayResultScreen(img);
}
Alert endGame=new Alert(Alert.AlertType.CONFIRMATION,""String_Node_Str"",ButtonType.YES,ButtonType.NO);
endGame.setHeaderText(null);
endGame.setTitle(""String_Node_Str"");
Optional<ButtonType> result=endGame.showAndWait();
if (result.isPresent()) {
_engine.shutdown(true);
if (result.get().equals(ButtonType.YES)) {
try {
MenuGUI m=new MenuGUI();
_stage.getScene().getWindow().hide();
return;
}
 catch (Exception ex) {
System.exit(1);
}
}
 else {
System.exit(0);
}
}
return;
}
ArrayList<MapLayer> layerList=new ArrayList<>(this._map.getLayers());
redrawCoords=new ArrayList<>();
Collections.reverse(layerList);
identifyDeltas(layerList);
Collections.reverse(layerList);
updateDeltas(layerList);
if (this.userHealth == null) {
this.userHealth=new ProgressBar();
this.opponentHealth=new ProgressBar();
this.opponentHealth.setTranslateX(700);
}
 else {
_imagePane.getChildren().remove(this.userHealth);
_imagePane.getChildren().remove(this.opponentHealth);
}
double userHealth=_engine.game.getPlayer(Game.PLAYER_ID).getHealth();
double opponentHealth=_engine.game.getPlayer(Game.OPPONENT_ID).getHealth();
double max=Game.HEALTH_MAX;
double userRatio=userHealth / max;
this.userHealth.setProgress(userRatio);
double opponentRatio=opponentHealth / max;
System.out.println(""String_Node_Str"" + opponentHealth);
System.out.println(""String_Node_Str"" + Double.toString(opponentRatio));
this.opponentHealth.setProgress(opponentHealth / max);
_imagePane.getChildren().add(this.opponentHealth);
_imagePane.getChildren().add(this.userHealth);
}"
40545,"/** 
 * Based on the current game state data, returns if condition is true.
 * @param game takes in the model
 * @return if defined condition is true
 */
boolean conditionIsTrue(Game game){
  int data1=getData(this.data1,game);
  int data2=getData(this.data2,game);
switch (this.operator) {
case LESS_THAN:
    return data1 < data2;
case GREATER_THAN:
  return data1 > data2;
case LESS_THAN_OR_EQUAL_TO:
return data1 <= data2;
case GREATER_THAN_OR_EQUAL_TO:
return data1 >= data2;
case EQUALS:
return data1 == data2;
default :
return false;
}
}","/** 
 * Based on the current game state data, returns if condition is true.
 * @param game takes in the model
 * @return if defined condition is true
 */
boolean conditionIsTrue(Game game,int id){
  int data1=getData(this.data1,game,id);
  int data2=getData(this.data2,game,id);
switch (this.operator) {
case LESS_THAN:
    return data1 < data2;
case GREATER_THAN:
  return data1 > data2;
case LESS_THAN_OR_EQUAL_TO:
return data1 <= data2;
case GREATER_THAN_OR_EQUAL_TO:
return data1 >= data2;
case EQUALS:
return data1 == data2;
default :
return false;
}
}"
40546,"/** 
 * Based on the current game state data, returns if condition is true.
 * @param data takes in the data to be returned
 * @param game is the pointer to the game model
 * @return the integer value of the game data that has been looked up
 */
private int getData(String data,Game game){
  if (data.equals(Data.USER_HEALTH.text())) {
    return game.getPlayer(Game.PLAYER_ID).getHealth();
  }
 else   if (data.equals(Data.OPPONENT_HEALTH.text())) {
    return game.getPlayer(Game.OPPONENT_ID).getHealth();
  }
 else   if (data.equals(Data.DISTANCE_FROM_OPPONENT.text())) {
    return (int)Math.round(game.distanceToOpponent(Game.PLAYER_ID,Game.OPPONENT_ID));
  }
 else {
    try {
      return Integer.parseInt(data);
    }
 catch (    Exception ex) {
      System.out.println(""String_Node_Str"" + data + ""String_Node_Str"");
      return -1;
    }
  }
}","/** 
 * Based on the current game state data, returns if condition is true.
 * @param data takes in the data to be returned
 * @param game is the pointer to the game model
 * @return the integer value of the game data that has been looked up
 */
private int getData(String data,Game game,int id){
  int otherId;
  if (id == 0) {
    otherId=1;
  }
 else {
    otherId=0;
  }
  if (data.equals(Data.USER_HEALTH.text())) {
    return game.getPlayer(id).getHealth();
  }
 else   if (data.equals(Data.OPPONENT_HEALTH.text())) {
    return game.getPlayer(otherId).getHealth();
  }
 else   if (data.equals(Data.DISTANCE_FROM_OPPONENT.text())) {
    return (int)Math.round(game.distanceToOpponent(id,otherId));
  }
 else {
    try {
      return Integer.parseInt(data);
    }
 catch (    Exception ex) {
      System.out.println(""String_Node_Str"" + data + ""String_Node_Str"");
      return -1;
    }
  }
}"
40547,"/** 
 * Method called to excecute a 'line' of the interpreter.
 * @param game the instance of the game class passed in
 * @param id the id of the player excecuting this script
 * @return true if the command excecuted
 */
public boolean doCommand(Game game,int id){
  for (  Check c : this.checks) {
    if (!c.conditionIsTrue(game)) {
      return false;
    }
  }
  executeFunction(game,id);
  return true;
}","/** 
 * Method called to excecute a 'line' of the interpreter.
 * @param game the instance of the game class passed in
 * @param id the id of the player excecuting this script
 * @return true if the command excecuted
 */
public boolean doCommand(Game game,int id){
  for (  Check c : this.checks) {
    if (!c.conditionIsTrue(game,id)) {
      return false;
    }
  }
  executeFunction(game,id);
  return true;
}"
40548,"/** 
 * Based on the current game state data, returns if condition is true.
 * @param data takes in the data to be returned
 * @param game is the pointer to the game model
 * @return the integer value of the game data that has been looked up
 */
private int getData(String data,Game game){
  if (data.equals(Data.USER_HEALTH.text())) {
    return game.getPlayer(Game.PLAYER_ID).getHealth();
  }
 else   if (data.equals(Data.OPPONENT_HEALTH.text())) {
    return game.getPlayer(Game.OPPONENT_ID).getHealth();
  }
 else   if (data.equals(Data.DISTANCE_FROM_OPPONENT.text())) {
    return (int)Math.round(game.distanceToOpponent(Game.PLAYER_ID,Game.OPPONENT_ID));
  }
 else {
    try {
      return Integer.parseInt(data);
    }
 catch (    Exception ex) {
      System.out.println(""String_Node_Str"" + data + ""String_Node_Str"");
      return -1;
    }
  }
}","/** 
 * Based on the current game state data, returns if condition is true.
 * @param data takes in the data to be returned
 * @param game is the pointer to the game model
 * @return the integer value of the game data that has been looked up
 */
private int getData(String data,Game game){
  if (data.equals(Data.USER_HEALTH.text())) {
    return game.getPlayer(Game.PLAYER_ID).getHealth();
  }
 else   if (data.equals(Data.OPPONENT_HEALTH.text())) {
    return game.getPlayer(Game.OPPONENT_ID).getHealth();
  }
 else   if (data.equals(Data.DISTANCE_FROM_OPPONENT.text())) {
    return game.pathDistanceToPlayer(Game.PLAYER_ID,Game.OPPONENT_ID);
  }
 else {
    try {
      return Integer.parseInt(data);
    }
 catch (    Exception ex) {
      System.out.println(""String_Node_Str"" + data + ""String_Node_Str"");
      return -1;
    }
  }
}"
40549,"/** 
 * Called by doCommand to actually modify the game data with built-in functions
 * @param game the instance of the game class passed in
 * @param id the id of the player executing this script
 */
private void executeFunction(Game game,int id){
  int otherId;
  if (id == 0) {
    otherId=1;
  }
 else {
    otherId=0;
  }
  if (id == 1) {
    System.out.println(""String_Node_Str"" + id + ""String_Node_Str""+ this.command);
  }
switch (this.command) {
case APPROACH:
    game.approach(id,otherId);
  break;
case ATTACK:
game.attack(id);
break;
case HEAL:
game.heal(id,20);
break;
case EVADE:
game.evade(id,otherId);
case DO_NOTHING:
game.doNothing(id);
break;
case DEFEND:
game.defend(id);
break;
default :
game.doNothing(id);
break;
}
}","/** 
 * Called by doCommand to actually modify the game data with built-in functions
 * @param game the instance of the game class passed in
 * @param id the id of the player executing this script
 */
private void executeFunction(Game game,int id){
  int otherId;
  if (id == 0) {
    otherId=1;
  }
 else {
    otherId=0;
  }
  if (id == 1) {
    System.out.println(""String_Node_Str"" + id + ""String_Node_Str""+ this.command);
  }
switch (this.command) {
case APPROACH:
    game.approach(id,otherId);
  break;
case ATTACK:
game.attack(id);
break;
case HEAL:
game.heal(id,9);
break;
case EVADE:
game.evade(id,otherId);
case DO_NOTHING:
game.doNothing(id);
break;
case DEFEND:
game.defend(id);
break;
default :
game.doNothing(id);
break;
}
}"
40550,"/** 
 * Evades from opposing player.  Will move in direction that is one space away from player.  Will only evade 50% of time
 * @param playerId
 * @param opponentId
 * @return
 */
public boolean evade(int playerId,int opponentId){
  stopDefending(playerId);
  if (getRandomBoolean()) {
    return false;
  }
  Player player=getPlayer(playerId);
  Player opponent=getPlayer(opponentId);
  int currentDistance=pathDistanceToLocation(player.getLocation(),opponent.getLocation());
  ArrayList<Point> potentialMoveLocations=getAllPossibleMoves(getPlayer(playerId).getLocation());
  Point playerCurrentLocation=getPlayer(playerId).getLocation();
  double longestDistance=-1;
  int longestMoveIndex=-1;
  for (int i=0; i < potentialMoveLocations.size(); i++) {
    Point moveLocation=getNewLocation(playerCurrentLocation,potentialMoveLocations.get(i));
    int distanceCandidate=pathDistanceToLocation(moveLocation,opponent.getLocation());
    if (distanceCandidate > longestDistance) {
      longestDistance=distanceCandidate;
      longestMoveIndex=i;
    }
  }
  if (longestDistance > currentDistance) {
    return move(playerId,potentialMoveLocations.get(longestMoveIndex).x,potentialMoveLocations.get(longestMoveIndex).y);
  }
  return false;
}","/** 
 * Evades from opposing player.  Will move in direction that is one space away from player.  Will only evade 50% of time
 * @param playerId
 * @param opponentId
 * @return
 */
public boolean evade(int playerId,int opponentId){
  stopDefending(playerId);
  if (getRandomBoolean()) {
    return false;
  }
  Player player=getPlayer(playerId);
  Player opponent=getPlayer(opponentId);
  int currentDistance=pathDistanceToLocation(player.getLocation(),opponent.getLocation());
  ArrayList<Point> potentialMoveLocations=getAllPossibleMoves(getPlayer(playerId).getLocation());
  Point playerCurrentLocation=getPlayer(playerId).getLocation();
  double longestDistance=-1;
  int longestMoveIndex=-1;
  for (int i=0; i < potentialMoveLocations.size(); i++) {
    Point moveLocation=getNewLocation(playerCurrentLocation,potentialMoveLocations.get(i));
    int distanceCandidate=pathDistanceToLocation(moveLocation,opponent.getLocation());
    if (distanceCandidate > longestDistance) {
      longestDistance=distanceCandidate;
      longestMoveIndex=i;
    }
    if (distanceCandidate == longestDistance) {
      if (getRandomBoolean()) {
        longestDistance=distanceCandidate;
        longestMoveIndex=i;
      }
    }
  }
  if (longestDistance > currentDistance) {
    return move(playerId,potentialMoveLocations.get(longestMoveIndex).x,potentialMoveLocations.get(longestMoveIndex).y);
  }
  return false;
}"
40551,"/** 
 * Number of tiles to get to opponent using only horizontal and vertical movement
 * @param playerId
 * @param opponentId
 * @return
 */
public int pathDistanceToPlayer(int playerId,int opponentId){
  Point distances=getDeltaDistances(playerId,opponentId);
  return (Math.abs(distances.x) + Math.abs(distances.y)) - 1;
}","/** 
 * Number of tiles to get to opponent using only horizontal and vertical movement
 * @param playerId
 * @param opponentId
 * @return
 */
public int pathDistanceToPlayer(int playerId,int opponentId){
  Point distances=getDeltaDistances(playerId,opponentId);
  return Math.abs(distances.x) + Math.abs(distances.y);
}"
40552,"/** 
 * Moves one tile closer to opponent.
 * @param playerId
 * @param opponentId
 * @return
 */
public boolean approach(int playerId,int opponentId){
  getPlayer(playerId).setShielding(false);
  Point distances=getDeltaDistances(playerId,opponentId);
  if (distances.y == 0) {
    if (distances.x < 0) {
      return move(playerId,DIRECTION_LEFT,DIRECTION_CONSTANT);
    }
 else {
      return move(playerId,DIRECTION_RIGHT,DIRECTION_CONSTANT);
    }
  }
  double slope=(double)distances.x / distances.y;
  if (Math.abs(slope) < .5) {
    if (distances.y < 0) {
      return move(playerId,DIRECTION_CONSTANT,DIRECTION_DOWN);
    }
 else {
      return move(playerId,DIRECTION_CONSTANT,DIRECTION_UP);
    }
  }
 else {
    if (distances.x < 0) {
      return move(playerId,DIRECTION_LEFT,DIRECTION_CONSTANT);
    }
 else {
      return move(playerId,DIRECTION_RIGHT,DIRECTION_CONSTANT);
    }
  }
}","/** 
 * Moves one tile closer to opponent.
 * @param playerId
 * @param opponentId
 * @return
 */
public boolean approach(int playerId,int opponentId){
  stopDefending(playerId);
  Point distances=getDeltaDistances(playerId,opponentId);
  if (distances.y == 0) {
    if (distances.x < 0) {
      return move(playerId,DIRECTION_LEFT,DIRECTION_CONSTANT);
    }
 else {
      return move(playerId,DIRECTION_RIGHT,DIRECTION_CONSTANT);
    }
  }
  double slope=(double)distances.x / distances.y;
  if (Math.abs(slope) < .5) {
    if (distances.y < 0) {
      return move(playerId,DIRECTION_CONSTANT,DIRECTION_DOWN);
    }
 else {
      return move(playerId,DIRECTION_CONSTANT,DIRECTION_UP);
    }
  }
 else {
    if (distances.x < 0) {
      return move(playerId,DIRECTION_LEFT,DIRECTION_CONSTANT);
    }
 else {
      return move(playerId,DIRECTION_RIGHT,DIRECTION_CONSTANT);
    }
  }
}"
40553,"/** 
 * If opponent is within one tile horizontally or vertically, player will attack that tile.  If not, returns false
 * @param playerId Player
 * @return If player was able to attack
 */
public boolean attack(int playerId){
  if (attackLocation(0,0,1)) {
    return true;
  }
 else   if (attackLocation(0,0,-1)) {
    return true;
  }
 else   if (attackLocation(0,1,0)) {
    return true;
  }
 else   if (attackLocation(0,-1,0)) {
    return true;
  }
 else {
    return false;
  }
}","/** 
 * If opponent is within one tile horizontally or vertically, player will attack that tile.  If not, returns false
 * @param playerId Player
 * @return If player was able to attack
 */
public boolean attack(int playerId){
  stopDefending(playerId);
  if (attackLocation(0,0,1)) {
    return true;
  }
 else   if (attackLocation(0,0,-1)) {
    return true;
  }
 else   if (attackLocation(0,1,0)) {
    return true;
  }
 else   if (attackLocation(0,-1,0)) {
    return true;
  }
 else {
    return false;
  }
}"
40554,"/** 
 * Evades from opposing player.  Will move in random direction away from player
 * @param playerId
 * @param opponentId
 * @return
 */
public boolean dodge(int playerId,int opponentId){
  return false;
}","/** 
 * Dodges from opposing player.  Currently not implemented
 * @param playerId
 * @param opponentId
 * @return
 */
public boolean dodge(int playerId,int opponentId){
  stopDefending(playerId);
  return false;
}"
40555,"/** 
 * Attacks location x and y away from players current location
 * @param playerId Player
 * @param x        Units away from players current location
 * @param y        Units away from players current location
 * @return If player was able to attack
 */
private boolean attackLocation(int playerId,int x,int y){
  EntityTile playerTile=this._entityMap.getPlayers().get(playerId);
  Point location=playerTile.getLocation();
  if (!_entityMap.isInsideMap(new Point(location.x + x,location.y + y))) {
    return false;
  }
  Entity entity=getEntityAtLocation(new Point(location.x + x,location.y + y));
  Player player=(Player)playerTile.getEntity();
  player.setShielding(false);
  if (entity.getEntityType() == Entity.EntityType.EMPTY) {
    return false;
  }
 else {
    Player playerToAttack=(Player)entity;
    int damageToBeDone=player.getDamage();
    if (playerToAttack.isShielding()) {
      damageToBeDone=player.getDamage() - playerToAttack.getShieldStrength();
    }
    playerToAttack.setHealth(playerToAttack.getHealth() - damageToBeDone);
    if (playerToAttack.getHealth() <= HEALTH_DEAD) {
      this._isGameOver=false;
    }
    return true;
  }
}","/** 
 * Attacks location x and y away from players current location
 * @param playerId Player
 * @param x        Units away from players current location
 * @param y        Units away from players current location
 * @return If player was able to attack
 */
private boolean attackLocation(int playerId,int x,int y){
  EntityTile playerTile=this._entityMap.getPlayers().get(playerId);
  Point location=playerTile.getLocation();
  if (!_entityMap.isInsideMap(new Point(location.x + x,location.y + y))) {
    return false;
  }
  Entity entity=getEntityAtLocation(new Point(location.x + x,location.y + y));
  Player player=(Player)playerTile.getEntity();
  player.setShielding(false);
  if (entity.getEntityType() == Entity.EntityType.EMPTY) {
    return false;
  }
 else {
    Player playerToAttack=(Player)entity;
    int damageToBeDone=player.getDamage();
    if (playerToAttack.isShielding()) {
      damageToBeDone=player.getDamage() - playerToAttack.getShieldStrength();
    }
    playerToAttack.setHealth(playerToAttack.getHealth() - damageToBeDone);
    if (playerToAttack.getHealth() <= HEALTH_DEAD) {
      playerToAttack.setHealth(0);
      this._isGameOver=false;
    }
    return true;
  }
}"
40556,"/** 
 * Used by external classes to acquire game state.
 * @return The GameStatus pertaining to the current state of the game.
 */
public GameStatus getState(){
  if (!isGameOver()) {
    LOGGER.critical(""String_Node_Str"");
    return GameStatus.RUNNING;
  }
  if (_isStalemate) {
    return GameStatus.STALEMATE;
  }
  LOGGER.warning(""String_Node_Str"");
  if (isDead(0)) {
    return GameStatus.LOST;
  }
 else   if (isDead(1)) {
    return GameStatus.WON;
  }
  throw new RuntimeException(""String_Node_Str"");
}","/** 
 * Used by external classes to acquire game state.
 * @return The GameStatus pertaining to the current state of the game.
 */
public GameStatus getState(){
  if (!isGameOver()) {
    return GameStatus.RUNNING;
  }
  if (_isStalemate) {
    return GameStatus.STALEMATE;
  }
  LOGGER.warning(""String_Node_Str"");
  if (isDead(0)) {
    return GameStatus.LOST;
  }
 else   if (isDead(1)) {
    return GameStatus.WON;
  }
  throw new RuntimeException(""String_Node_Str"");
}"
40557,"@Override public void start(Stage primaryStage) throws Exception {
  Parent root=FXMLLoader.load(getClass().getResource(""String_Node_Str""));
  primaryStage.setTitle(""String_Node_Str"");
  primaryStage.setScene(new Scene(root));
  primaryStage.getScene().getStylesheets().add(""String_Node_Str"");
  primaryStage.setResizable(false);
  primaryStage.show();
}","@Override public void start(Stage primaryStage) throws Exception {
  FXMLLoader loader=new FXMLLoader(getClass().getResource(""String_Node_Str""));
  Parent root=loader.load();
  primaryStage.setTitle(""String_Node_Str"");
  primaryStage.setScene(new Scene(root));
  primaryStage.setResizable(false);
  primaryStage.show();
}"
40558,"private String unixTimeToDays(long unixTimeSec){
  long days=0;
  long hours=0;
  long min=0;
  long sec=0;
  String daysStr=""String_Node_Str"";
  String hoursStr=""String_Node_Str"";
  String minStr=""String_Node_Str"";
  String secStr=""String_Node_Str"";
  if (unixTimeSec > 86400000) {
    days=unixTimeSec / 86400000;
    days=(int)days;
    daysStr=((days <= 9) ? ""String_Node_Str"" + String.valueOf(days) : String.valueOf(days));
  }
  if (unixTimeSec % 86400000 > 3600000) {
    hours=(unixTimeSec % 86400000) / 3600000;
    hours=(int)hours;
    hoursStr=((hours <= 9) ? ""String_Node_Str"" + String.valueOf(hours) : String.valueOf(hours));
  }
  if (((unixTimeSec % 86400000) % 3600000) > 60000) {
    min=((unixTimeSec % 86400000) % 3600000) / 60000;
    min=(int)min;
    minStr=((min <= 9) ? ""String_Node_Str"" + String.valueOf(min) : String.valueOf(min));
  }
  if ((((unixTimeSec % 86400000) % 3600000) % 60000) > 1000) {
    sec=(((unixTimeSec % 86400000) % 3600000) % 60000) / 1000;
    sec=(int)sec;
    secStr=((sec <= 9) ? ""String_Node_Str"" + String.valueOf(sec) : String.valueOf(sec));
  }
  return daysStr + ""String_Node_Str"" + hoursStr+ ""String_Node_Str""+ minStr+ ""String_Node_Str""+ secStr;
}","private String unixTimeToDays(long unixTimeSec){
  long divReminder=unixTimeSec;
  String result=""String_Node_Str"";
  int[] dimensionArr={86400000,3600000,60000,1000};
  for (  int dimension : dimensionArr) {
    if (divReminder > dimension) {
      long timeValue=divReminder / dimension;
      timeValue=(int)timeValue;
      String timeValueStr=((timeValue <= 9) ? ""String_Node_Str"" + String.valueOf(timeValue) : String.valueOf(timeValue));
      result=result + ((dimension == dimensionArr[0]) ? timeValueStr + ""String_Node_Str"" : (dimension == dimensionArr[3]) ? timeValueStr : timeValueStr + ':');
      divReminder=unixTimeSec % dimension;
    }
 else {
      result=result + ((dimension == dimensionArr[0]) ? ""String_Node_Str"" : (dimension == dimensionArr[3]) ? ""String_Node_Str"" : ""String_Node_Str"");
    }
  }
  return result;
}"
40559,"public InvestMainItem(String name,String description,String earnedMin,String earnedMax,int stageCurrent,int stageMax,long totalTime,String devAddr,String adrIco,String iconUrl,String icoSymbol){
  this.name=name;
  this.description=description;
  this.earnedMin=earnedMin;
  this.earnedMax=earnedMax;
  this.stageCurrent=stageCurrent;
  this.stageMax=stageMax;
  this.totalTime=totalTime;
  this.devAddr=devAddr;
  this.adrIco=adrIco;
  this.iconUrl=iconUrl;
  this.icoSymbol=icoSymbol;
}","public InvestMainItem(String name,String description,String soldTokens,String icoTotalSupply,int stageCurrent,int stageMax,long totalTime,String devAddr,String adrIco,String iconUrl,String icoSymbol){
  this.name=name;
  this.description=description;
  this.soldTokens=soldTokens;
  this.icoTotalSupply=icoTotalSupply;
  this.stageCurrent=stageCurrent;
  this.stageMax=stageMax;
  this.totalTime=totalTime;
  this.devAddr=devAddr;
  this.adrIco=adrIco;
  this.iconUrl=iconUrl;
  this.icoSymbol=icoSymbol;
}"
40560,"public InvestTempPojo(AppInfo app){
  int currentPeriod=Integer.valueOf(app.currentInfo.currentPeriod);
  String tokenSold=app.currentInfo.currentPeriod;
  String totalTokens=String.valueOf(Long.parseLong(app.icoTotalSupply) / (long)Math.pow(10,8));
  long endIcoUnixDate=Long.parseLong(app.icoStages.get(currentPeriod).time);
  long totalTimeFromUnix=(endIcoUnixDate - (System.currentTimeMillis() / 1000));
  objects.add(new InvestMainItem(app.nameApp,""String_Node_Str"",tokenSold,totalTokens,1,3,totalTimeFromUnix,""String_Node_Str"",app.adrICO,app.getIconUrl(),app.icoSymbol));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_MAIN);
  objects.add(new InvestYoutube(app.infoICO.youtubeID));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_YOUTUBE);
  objects.add(new InvestTitle(""String_Node_Str""));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_TITLE);
  objects.add(new InvestBody(app.infoICO.description));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_BODY);
  objects.add(new InvestTitle(""String_Node_Str""));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_TITLE);
  objects.add(new InvestBody(app.infoICO.advantages));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_BODY);
  objects.add(new InvestTitle(""String_Node_Str""));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_TITLE);
  objects.add(new ScreenShotBody(app.getImages()));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWETYPE_IMAGE_GALLERY);
  if (app.infoICO.advisors != null && !app.infoICO.advisors.isEmpty()) {
    objects.add(new InvestTitle(""String_Node_Str""));
    objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_TITLE);
    for (    IcoTeam advisor : app.infoICO.advisors) {
      objects.add(new InvestMember(advisor.name,advisor.description,app.getImageByPath(advisor.photo),advisor.social));
      objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_MEMBER);
    }
  }
  if (app.infoICO.team != null && !app.infoICO.team.isEmpty()) {
    objects.add(new InvestTitle(""String_Node_Str""));
    objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_TITLE);
    for (    IcoTeam team : app.infoICO.team) {
      objects.add(new InvestMember(team.name,team.description,app.getImageByPath(team.photo),team.social));
      objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_MEMBER);
    }
  }
}","public InvestTempPojo(AppInfo app){
  int currentPeriod=Integer.valueOf(app.currentInfo.currentPeriod);
  String tokenSold=String.valueOf(Double.parseDouble(app.currentInfo.tokensSold) / (double)Math.pow(10,Double.parseDouble(app.icoDecimals)));
  tokenSold=String.valueOf((double)Math.round(Double.parseDouble(tokenSold) * 1000d) / 1000d);
  String totalTokens=String.valueOf(Long.parseLong(app.icoTotalSupply) / (long)Math.pow(10,Long.parseLong(app.icoDecimals)) * 45 / 100);
  long endIcoUnixDate=Long.parseLong(app.icoStages.get(currentPeriod).time);
  long totalTimeFromUnix=(endIcoUnixDate - (System.currentTimeMillis() / 1000));
  objects.add(new InvestMainItem(app.nameApp,""String_Node_Str"",tokenSold,totalTokens,currentPeriod + 1,3,totalTimeFromUnix,""String_Node_Str"",app.adrICO,app.getIconUrl(),app.icoSymbol));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_MAIN);
  objects.add(new InvestYoutube(app.infoICO.youtubeID));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_YOUTUBE);
  objects.add(new InvestTitle(""String_Node_Str""));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_TITLE);
  objects.add(new InvestBody(app.infoICO.description));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_BODY);
  objects.add(new InvestTitle(""String_Node_Str""));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_TITLE);
  objects.add(new InvestBody(app.infoICO.advantages));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_BODY);
  objects.add(new InvestTitle(""String_Node_Str""));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_TITLE);
  objects.add(new ScreenShotBody(app.getImages()));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWETYPE_IMAGE_GALLERY);
  if (app.infoICO.advisors != null && !app.infoICO.advisors.isEmpty()) {
    objects.add(new InvestTitle(""String_Node_Str""));
    objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_TITLE);
    for (    IcoTeam advisor : app.infoICO.advisors) {
      objects.add(new InvestMember(advisor.name,advisor.description,app.getImageByPath(advisor.photo),advisor.social));
      objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_MEMBER);
    }
  }
  if (app.infoICO.team != null && !app.infoICO.team.isEmpty()) {
    objects.add(new InvestTitle(""String_Node_Str""));
    objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_TITLE);
    for (    IcoTeam team : app.infoICO.team) {
      objects.add(new InvestMember(team.name,team.description,app.getImageByPath(team.photo),team.social));
      objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_MEMBER);
    }
  }
}"
40561,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_ico,container,false);
  bindViews(view);
  attachPresenter();
  getIcoApps();
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_ico,container,false);
  bindViews(view);
  icoRefrashLayout.setOnRefreshListener(this);
  attachPresenter();
  getIcoApps();
  return view;
}"
40562,"private void bindViews(View view){
  recyclerView=view.findViewById(R.id.recyclerView);
  errorHolder=view.findViewById(R.id.error_holder);
  errorRepeatButton=view.findViewById(R.id.error_view_repeat_btn);
  progressBar=view.findViewById(R.id.progress_bar);
  emptyView=view.findViewById(R.id.empty_view);
  errorRepeatButton.setOnClickListener(v -> presenter.getIcoApps());
}","private void bindViews(View view){
  recyclerView=view.findViewById(R.id.recyclerView);
  errorHolder=view.findViewById(R.id.error_holder);
  errorRepeatButton=view.findViewById(R.id.error_view_repeat_btn);
  progressBar=view.findViewById(R.id.progress_bar);
  emptyView=view.findViewById(R.id.empty_view);
  icoRefrashLayout=view.findViewById(R.id.ico_refresh_layout);
  errorRepeatButton.setOnClickListener(v -> presenter.getIcoApps());
}"
40563,"@Override public void requestUserLocation(Context context){
  view.setStatusText(R.string.network_status_location_search);
  if (isEmulator()) {
    Location location=new Location(""String_Node_Str"");
    location.setLongitude(56.476181);
    location.setLatitude(84.950168);
    getNearestNode(location);
    view.onLocationReady();
  }
 else {
    locationManager.getLocation(context,this);
  }
}","@Override public void requestUserLocation(Context context){
  view.setStatusText(R.string.network_status_location_search);
  if (isEmulator()) {
    Location location=new Location(""String_Node_Str"");
    location.setLongitude(56.476181);
    location.setLatitude(84.950168);
    getNearestNode(location);
  }
 else {
    locationManager.getLocation(context,this);
  }
}"
40564,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main_menu);
  ButterKnife.bind(this);
  refreshLayout.setOnRefreshListener(this);
  attachPresenter();
  initViews();
  attachFragment();
  setSearchViewDebounce();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main_menu);
  ButterKnife.bind(this);
  attachPresenter();
  initViews();
  attachFragment();
  setSearchViewDebounce();
}"
40565,"private String unixTimeToDays(long unixTimeSec){
  long days=0;
  long hours=0;
  long min=0;
  String daysStr=""String_Node_Str"";
  String hoursStr=""String_Node_Str"";
  String minStr=""String_Node_Str"";
  if (unixTimeSec > 86400000) {
    days=unixTimeSec / 86400000;
    days=(int)days;
    daysStr=((days <= 9) ? ""String_Node_Str"" + String.valueOf(days) : String.valueOf(days));
  }
  if (unixTimeSec > 3600000) {
    hours=(unixTimeSec % 86400000) / 3600000;
    hours=(int)hours;
    hoursStr=((hours <= 9) ? ""String_Node_Str"" + String.valueOf(hours) : String.valueOf(hours));
  }
  if (unixTimeSec > 60000) {
    min=((unixTimeSec % 86400000) % 3600000) / 60000;
    min=(int)min;
    minStr=((min <= 9) ? ""String_Node_Str"" + String.valueOf(min) : String.valueOf(min));
  }
  long sec=(((unixTimeSec % 86400000) % 3600000) % 60000) / 1000;
  sec=(int)sec;
  String secStr=((sec <= 9) ? ""String_Node_Str"" + String.valueOf(sec) : String.valueOf(sec));
  return daysStr + ""String_Node_Str"" + hoursStr+ ""String_Node_Str""+ minStr+ ""String_Node_Str""+ secStr;
}","private String unixTimeToDays(long unixTimeSec){
  long days=0;
  long hours=0;
  long min=0;
  long sec=0;
  String daysStr=""String_Node_Str"";
  String hoursStr=""String_Node_Str"";
  String minStr=""String_Node_Str"";
  String secStr=""String_Node_Str"";
  if (unixTimeSec > 86400000) {
    days=unixTimeSec / 86400000;
    days=(int)days;
    daysStr=((days <= 9) ? ""String_Node_Str"" + String.valueOf(days) : String.valueOf(days));
  }
  if (unixTimeSec % 86400000 > 3600000) {
    hours=(unixTimeSec % 86400000) / 3600000;
    hours=(int)hours;
    hoursStr=((hours <= 9) ? ""String_Node_Str"" + String.valueOf(hours) : String.valueOf(hours));
  }
  if (((unixTimeSec % 86400000) % 3600000) > 60000) {
    min=((unixTimeSec % 86400000) % 3600000) / 60000;
    min=(int)min;
    minStr=((min <= 9) ? ""String_Node_Str"" + String.valueOf(min) : String.valueOf(min));
  }
  if ((((unixTimeSec % 86400000) % 3600000) % 60000) > 1000) {
    sec=(((unixTimeSec % 86400000) % 3600000) % 60000) / 1000;
    sec=(int)sec;
    secStr=((sec <= 9) ? ""String_Node_Str"" + String.valueOf(sec) : String.valueOf(sec));
  }
  return daysStr + ""String_Node_Str"" + hoursStr+ ""String_Node_Str""+ minStr+ ""String_Node_Str""+ secStr;
}"
40566,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main_menu);
  ButterKnife.bind(this);
  attachPresenter();
  initViews();
  attachFragment();
  setSearchViewDebounce();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main_menu);
  ButterKnife.bind(this);
  refreshLayout.setOnRefreshListener(this);
  attachPresenter();
  initViews();
  attachFragment();
  setSearchViewDebounce();
}"
40567,"private static void setupWithCustomUrl(String url){
  Log.d(TAG,""String_Node_Str"" + BASE_URL);
  HttpLoggingInterceptor interceptor=new HttpLoggingInterceptor();
  interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);
  OkHttpClient client=new OkHttpClient.Builder().addInterceptor(interceptor).hostnameVerifier((hostname,session) -> true).sslSocketFactory(getSllSocketFactory()).build();
  Gson gson=new GsonBuilder().registerTypeAdapterFactory(new ResultAdapterFactory()).create();
  Retrofit retrofit=new Retrofit.Builder().baseUrl(url).addConverterFactory(GsonConverterFactory.create(gson)).addCallAdapterFactory(RxJavaCallAdapterFactory.create()).client(client).build();
  customApi=retrofit.create(ServerApi.class);
}","private static void setupWithCustomUrl(String url){
  Log.d(TAG,""String_Node_Str"" + BASE_URL);
  HttpLoggingInterceptor interceptor=new HttpLoggingInterceptor();
  interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);
  OkHttpClient client=new OkHttpClient.Builder().addInterceptor(interceptor).hostnameVerifier((hostname,session) -> true).sslSocketFactory(getSllSocketFactory()).build();
  Gson gson=new GsonBuilder().registerTypeAdapterFactory(new ResultAdapterFactory()).setLenient().create();
  Retrofit retrofit=new Retrofit.Builder().baseUrl(url).addConverterFactory(GsonConverterFactory.create(gson)).addCallAdapterFactory(RxJavaCallAdapterFactory.create()).client(client).build();
  customApi=retrofit.create(ServerApi.class);
}"
40568,"private static void setupWithRest(){
  Log.d(TAG,""String_Node_Str"" + BASE_URL);
  HttpLoggingInterceptor interceptor=new HttpLoggingInterceptor();
  interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);
  OkHttpClient client=new OkHttpClient.Builder().addInterceptor(interceptor).hostnameVerifier((hostname,session) -> true).sslSocketFactory(getSllSocketFactory()).build();
  Gson gson=new GsonBuilder().registerTypeAdapterFactory(new ResultAdapterFactory()).create();
  Retrofit retrofit=new Retrofit.Builder().baseUrl(BASE_URL).addConverterFactory(GsonConverterFactory.create(gson)).addCallAdapterFactory(RxJavaCallAdapterFactory.create()).client(client).build();
  restApi=retrofit.create(ServerApi.class);
}","private static void setupWithRest(){
  Log.d(TAG,""String_Node_Str"" + BASE_URL);
  HttpLoggingInterceptor interceptor=new HttpLoggingInterceptor();
  interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);
  OkHttpClient client=new OkHttpClient.Builder().addInterceptor(interceptor).hostnameVerifier((hostname,session) -> true).sslSocketFactory(getSllSocketFactory()).build();
  Gson gson=new GsonBuilder().registerTypeAdapterFactory(new ResultAdapterFactory()).setLenient().create();
  Retrofit retrofit=new Retrofit.Builder().baseUrl(BASE_URL).addConverterFactory(GsonConverterFactory.create(gson)).addCallAdapterFactory(RxJavaCallAdapterFactory.create()).client(client).build();
  restApi=retrofit.create(ServerApi.class);
}"
40569,"@Override public T read(JsonReader in) throws IOException {
  JsonElement jsonElement=elementAdapter.read(in);
  if (jsonElement.isJsonObject()) {
    JsonObject jsonObject=jsonElement.getAsJsonObject();
    if (jsonObject.has(""String_Node_Str"") && jsonObject.get(""String_Node_Str"").getAsInt() == 200) {
      jsonElement=jsonObject.get(""String_Node_Str"");
    }
 else     if (jsonObject.has(""String_Node_Str"") && jsonObject.get(""String_Node_Str"").getAsInt() != 200) {
      throw new IOException(jsonObject.get(""String_Node_Str"").getAsString());
    }
  }
  return delegate.fromJsonTree(jsonElement);
}","@Override public T read(JsonReader in) throws IOException {
  JsonElement jsonElement=elementAdapter.read(in);
  if (jsonElement.isJsonObject()) {
    JsonObject jsonObject=jsonElement.getAsJsonObject();
    if (jsonObject.has(""String_Node_Str"") && jsonObject.get(""String_Node_Str"").getAsInt() == 200) {
      jsonElement=jsonObject.get(""String_Node_Str"");
    }
 else     if (jsonObject.has(""String_Node_Str"") && jsonObject.get(""String_Node_Str"").getAsInt() != 200) {
      throw new IOException(jsonObject.get(""String_Node_Str"").getAsString());
    }
  }
  try {
    if (jsonElement.getAsString().isEmpty()) {
      return (T)new IcoTeam();
    }
  }
 catch (  Exception e) {
  }
  return delegate.fromJsonTree(jsonElement);
}"
40570,"@Override public <T>TypeAdapter<T> create(Gson gson,TypeToken<T> type){
  final TypeAdapter<T> delegate=gson.getDelegateAdapter(this,type);
  final TypeAdapter<JsonElement> elementAdapter=gson.getAdapter(JsonElement.class);
  return new TypeAdapter<T>(){
    @Override public void write(    JsonWriter out,    T value) throws IOException {
      delegate.write(out,value);
    }
    @Override public T read(    JsonReader in) throws IOException {
      JsonElement jsonElement=elementAdapter.read(in);
      if (jsonElement.isJsonObject()) {
        JsonObject jsonObject=jsonElement.getAsJsonObject();
        if (jsonObject.has(""String_Node_Str"") && jsonObject.get(""String_Node_Str"").getAsInt() == 200) {
          jsonElement=jsonObject.get(""String_Node_Str"");
        }
 else         if (jsonObject.has(""String_Node_Str"") && jsonObject.get(""String_Node_Str"").getAsInt() != 200) {
          throw new IOException(jsonObject.get(""String_Node_Str"").getAsString());
        }
      }
      return delegate.fromJsonTree(jsonElement);
    }
  }
.nullSafe();
}","@Override public <T>TypeAdapter<T> create(Gson gson,TypeToken<T> type){
  final TypeAdapter<T> delegate=gson.getDelegateAdapter(this,type);
  final TypeAdapter<JsonElement> elementAdapter=gson.getAdapter(JsonElement.class);
  return new TypeAdapter<T>(){
    @Override public void write(    JsonWriter out,    T value) throws IOException {
      delegate.write(out,value);
    }
    @Override public T read(    JsonReader in) throws IOException {
      JsonElement jsonElement=elementAdapter.read(in);
      if (jsonElement.isJsonObject()) {
        JsonObject jsonObject=jsonElement.getAsJsonObject();
        if (jsonObject.has(""String_Node_Str"") && jsonObject.get(""String_Node_Str"").getAsInt() == 200) {
          jsonElement=jsonObject.get(""String_Node_Str"");
        }
 else         if (jsonObject.has(""String_Node_Str"") && jsonObject.get(""String_Node_Str"").getAsInt() != 200) {
          throw new IOException(jsonObject.get(""String_Node_Str"").getAsString());
        }
      }
      try {
        if (jsonElement.getAsString().isEmpty()) {
          return (T)new IcoTeam();
        }
      }
 catch (      Exception e) {
      }
      return delegate.fromJsonTree(jsonElement);
    }
  }
.nullSafe();
}"
40571,"public ArrayList<String> getIcoScreenShotsUrl(){
  ArrayList<String> images=new ArrayList<>();
  for (  String picture : icoInfo.pictures) {
    images.add(RestApi.ICON_URL + app.hashTagICO + ""String_Node_Str""+ app.hashICO+ ""String_Node_Str""+ picture);
  }
  return images;
}","public ArrayList<String> getIcoScreenShotsUrl(){
  ArrayList<String> images=new ArrayList<>();
  for (  String picture : infoICO.pictures) {
    images.add(RestApi.ICON_URL + app.hashTagICO + ""String_Node_Str""+ app.hashICO+ ""String_Node_Str""+ picture);
  }
  return images;
}"
40572,"public String getIcoIcon(){
  return RestApi.ICON_URL + app.hashTagICO + ""String_Node_Str""+ app.hashICO+ ""String_Node_Str""+ icoInfo.iconUrl;
}","public String getIcoIcon(){
  return RestApi.ICON_URL + app.hashTagICO + ""String_Node_Str""+ app.hashICO+ ""String_Node_Str""+ infoICO.iconUrl;
}"
40573,"@Override public void writeToParcel(Parcel dest,int flags){
  dest.writeParcelable(this.app,flags);
  dest.writeString(this.description);
  dest.writeParcelable(this.pictures,flags);
  dest.writeParcelable(this.icoInfo,flags);
}","@Override public void writeToParcel(Parcel dest,int flags){
  dest.writeParcelable(this.app,flags);
  dest.writeString(this.description);
  dest.writeParcelable(this.pictures,flags);
  dest.writeParcelable(this.infoICO,flags);
}"
40574,"protected AppInfo(Parcel in){
  this.app=in.readParcelable(App.class.getClassLoader());
  this.description=in.readString();
  this.pictures=in.readParcelable(PicturesResponse.class.getClassLoader());
  this.icoInfo=in.readParcelable(IcoInfo.class.getClassLoader());
}","protected AppInfo(Parcel in){
  this.app=in.readParcelable(App.class.getClassLoader());
  this.description=in.readString();
  this.pictures=in.readParcelable(PicturesResponse.class.getClassLoader());
  this.infoICO=in.readParcelable(IcoInfo.class.getClassLoader());
}"
40575,"public InvestTempPojo(AppInfo appInfo){
  String tokenSold=String.valueOf(Long.parseLong(appInfo.icoInfo.tokenSold) / (long)Math.pow(10,Long.parseLong(appInfo.app.icoDecimals)));
  String totalTokens=String.valueOf(Long.parseLong(appInfo.app.icoTotalSupply) / (long)Math.pow(10,Long.parseLong(appInfo.app.icoDecimals)));
  objects.add(new InvestMainItem(appInfo.app.nameApp,""String_Node_Str"",tokenSold,totalTokens,Integer.parseInt(appInfo.icoInfo.currentStage),3,appInfo.app.icoStages.get(Integer.parseInt(appInfo.icoInfo.currentStage) - 1).time,appInfo.app.adrDev,appInfo.getIcoIcon(),appInfo.app.icoSymbol));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_MAIN);
  objects.add(new InvestYoutube(appInfo.icoInfo.youtubeID));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_YOUTUBE);
  objects.add(new InvestTitle(""String_Node_Str""));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_TITLE);
  objects.add(new InvestBody(appInfo.description));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_BODY);
  objects.add(new InvestTitle(""String_Node_Str""));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_TITLE);
  objects.add(new ScreenShotBody(appInfo.getIcoScreenShotsUrl()));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWETYPE_IMAGE_GALLERY);
  if (appInfo.icoInfo.advisors != null && !appInfo.icoInfo.advisors.isEmpty()) {
    objects.add(new InvestTitle(""String_Node_Str""));
    objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_TITLE);
    for (    IcoTeam advisor : appInfo.icoInfo.advisors) {
      objects.add(new InvestMember(advisor.name,advisor.description,appInfo.getIcoAdvisorsUrl(advisor.photo),advisor.socialLinks));
      objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_MEMBER);
    }
  }
  if (appInfo.icoInfo.team != null && !appInfo.icoInfo.team.isEmpty()) {
    objects.add(new InvestTitle(""String_Node_Str""));
    objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_TITLE);
    for (    IcoTeam team : appInfo.icoInfo.team) {
      objects.add(new InvestMember(team.name,team.description,appInfo.getIcoTeamUrl(team.photo),team.socialLinks));
      objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_MEMBER);
    }
  }
}","public InvestTempPojo(AppInfo appInfo){
  String tokenSold=String.valueOf(Long.parseLong(appInfo.infoICO.tokenSold) / (long)Math.pow(10,Long.parseLong(appInfo.app.icoDecimals)));
  String totalTokens=String.valueOf(Long.parseLong(appInfo.app.icoTotalSupply) / (long)Math.pow(10,Long.parseLong(appInfo.app.icoDecimals)));
  objects.add(new InvestMainItem(appInfo.app.nameApp,""String_Node_Str"",tokenSold,totalTokens,Integer.parseInt(appInfo.infoICO.currentStage),3,appInfo.app.icoStages.get(Integer.parseInt(appInfo.infoICO.currentStage) - 1).time,appInfo.app.adrDev,appInfo.getIcoIcon(),appInfo.app.icoSymbol));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_MAIN);
  objects.add(new InvestYoutube(appInfo.infoICO.youtubeID));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_YOUTUBE);
  objects.add(new InvestTitle(""String_Node_Str""));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_TITLE);
  objects.add(new InvestBody(appInfo.description));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_BODY);
  objects.add(new InvestTitle(""String_Node_Str""));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_TITLE);
  objects.add(new ScreenShotBody(appInfo.getIcoScreenShotsUrl()));
  objectViewType.add(InvestScreenAdapter.INVEST_VIEWETYPE_IMAGE_GALLERY);
  if (appInfo.infoICO.advisors != null && !appInfo.infoICO.advisors.isEmpty()) {
    objects.add(new InvestTitle(""String_Node_Str""));
    objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_TITLE);
    for (    IcoTeam advisor : appInfo.infoICO.advisors) {
      objects.add(new InvestMember(advisor.name,advisor.description,appInfo.getIcoAdvisorsUrl(advisor.photo),advisor.socialLinks));
      objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_MEMBER);
    }
  }
  if (appInfo.infoICO.team != null && !appInfo.infoICO.team.isEmpty()) {
    objects.add(new InvestTitle(""String_Node_Str""));
    objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_TITLE);
    for (    IcoTeam team : appInfo.infoICO.team) {
      objects.add(new InvestMember(team.name,team.description,appInfo.getIcoTeamUrl(team.photo),team.socialLinks));
      objectViewType.add(InvestScreenAdapter.INVEST_VIEWTYPE_MEMBER);
    }
  }
}"
40576,"@OnClick(R.id.cancel_transfer_button) void cancelButtonClicked(){
  setContinueButtonVisibility(View.VISIBLE);
  back();
}","@OnClick(R.id.cancel_transfer_button) void cancelButtonClicked(){
  back();
}"
40577,"private void back(){
  if (transferViewPager.getCurrentItem() == 1) {
    goToTransferInfo();
  }
 else {
    this.finish();
  }
}","private void back(){
  if (transferViewPager.getCurrentItem() == 1) {
    TransferConfirmFragment transferConfirmFragment=(TransferConfirmFragment)transferAdapter.getItem(1);
    transferConfirmFragment.disposedFingerprint();
    setContinueButtonVisibility(View.VISIBLE);
    goToTransferInfo();
  }
 else {
    this.finish();
  }
}"
40578,"public void showError(){
  senderPasswordEditText.setError(getResources().getString(R.string.wrong_password));
  senderPasswordEditText.requestFocus();
}","public void showError(){
  passwordTextInputLayout.setPasswordVisibilityToggleTintList(AppCompatResources.getColorStateList(getContext(),R.color.red_error_color));
  passwordTextInputLayout.setError(getResources().getString(R.string.wrong_password));
}"
40579,"public void initFingerprint(){
  fingerprintLayout.setVisibility(View.VISIBLE);
  passwordLayout.setVisibility(View.GONE);
  enableFingerprint();
}","public void initFingerprint(){
  fingerprintLayout.setVisibility(View.VISIBLE);
  usePasswordButton.setVisibility(View.VISIBLE);
  passwordLayout.setVisibility(View.GONE);
  enableFingerprint();
}"
40580,"public void initPassword(){
  fingerprintLayout.setVisibility(View.GONE);
  passwordLayout.setVisibility(View.VISIBLE);
  fingerprintDisposable.dispose();
  ((TransferActivity)getActivity()).setContinueButtonVisibility(View.VISIBLE);
}","public void initPassword(){
  fingerprintLayout.setVisibility(View.GONE);
  passwordLayout.setVisibility(View.VISIBLE);
  usePasswordButton.setVisibility(View.GONE);
  disposedFingerprint();
  ((TransferActivity)getActivity()).setContinueButtonVisibility(View.VISIBLE);
}"
40581,"private void ethSelect(){
  ethTextView.setBackgroundResource(R.drawable.transfer_selected_button);
  ethTextView.setTextColor(Color.parseColor(""String_Node_Str""));
  weiTextView.setBackgroundResource(R.drawable.transfer_unselected_button);
  weiTextView.setTextColor(Color.parseColor(""String_Node_Str""));
  amountInfoTextView.setText(amountEditText.getText().toString() + ""String_Node_Str"" + ""String_Node_Str"");
  transferViewModel.transferAmount.setValue(amountEditText.getText().toString());
  isEth=true;
  transferViewModel.isEth.setValue(isEth);
  transferViewModel.dimension.setValue(ETH);
}","private void ethSelect(){
  ethTextView.setBackgroundResource(R.drawable.transfer_selected_button);
  ethTextView.setTextColor(getResources().getColor(R.color.white));
  weiTextView.setBackgroundResource(R.drawable.transfer_unselected_button);
  weiTextView.setTextColor(getResources().getColor(R.color.green_color));
  amountTextView.setText(amountEditText.getText());
  dimensionTextView.setText(ETH);
  transferViewModel.transferAmount.setValue(amountEditText.getText().toString());
  isEth=true;
  transferViewModel.isEth.setValue(isEth);
  transferViewModel.dimension.setValue(ETH);
}"
40582,"private void weiSelect(){
  weiTextView.setBackgroundResource(R.drawable.transfer_selected_button);
  weiTextView.setTextColor(Color.parseColor(""String_Node_Str""));
  ethTextView.setBackgroundResource(R.drawable.transfer_unselected_button);
  ethTextView.setTextColor(Color.parseColor(""String_Node_Str""));
  amountInfoTextView.setText(amountEditText.getText().toString() + ""String_Node_Str"" + ""String_Node_Str"");
  transferViewModel.transferAmount.setValue(amountEditText.getText().toString());
  isEth=false;
  transferViewModel.isEth.setValue(isEth);
  transferViewModel.dimension.setValue(WEI);
}","private void weiSelect(){
  weiTextView.setBackgroundResource(R.drawable.transfer_selected_button);
  weiTextView.setTextColor(getResources().getColor(R.color.white));
  ethTextView.setBackgroundResource(R.drawable.transfer_unselected_button);
  ethTextView.setTextColor(getResources().getColor(R.color.green_color));
  amountTextView.setText(amountEditText.getText());
  dimensionTextView.setText(WEI);
  transferViewModel.transferAmount.setValue(amountEditText.getText().toString());
  isEth=false;
  transferViewModel.isEth.setValue(isEth);
  transferViewModel.dimension.setValue(WEI);
}"
40583,"@OnTextChanged(value=R.id.amount_editText,callback=OnTextChanged.Callback.AFTER_TEXT_CHANGED) void onAmountChanged(Editable editable){
  String dimension;
  if (isEth)   dimension=""String_Node_Str"";
 else   (dimension)=""String_Node_Str"";
  amountInfoTextView.setText(editable.toString() + ""String_Node_Str"" + dimension);
  transferViewModel.transferAmount.setValue(editable.toString());
}","@OnTextChanged(value=R.id.amount_editText,callback=OnTextChanged.Callback.AFTER_TEXT_CHANGED) void onAmountChanged(Editable editable){
  amountTextView.setText(editable);
  transferViewModel.transferAmount.setValue(editable.toString());
}"
40584,"public boolean isHasNoError(){
  if (errorViewHolder.getVisibility() == View.VISIBLE)   return false;
  boolean emptyAmountCheck=true;
  boolean isHasNoError=true;
  if (recipientAddressEditText.getText().length() == 0) {
    recipientAddressEditText.setError(getResources().getString(R.string.empty_field));
    recipientAddressEditText.requestFocus();
    isHasNoError=false;
  }
 else   if (recipientAddressEditText.getText().length() > 1 && recipientAddressEditText.getText().length() < 42) {
    recipientAddressEditText.setError(getResources().getString(R.string.short_account));
    recipientAddressEditText.requestFocus();
    isHasNoError=false;
  }
  if (amountEditText.getText().length() == 0) {
    amountEditText.setError(getResources().getString(R.string.empty_field));
    amountEditText.requestFocus();
    emptyAmountCheck=false;
    isHasNoError=false;
  }
  if (emptyAmountCheck) {
    String transferAmount=amountEditText.getText().toString();
    String balanceAmountInEther=accountBalanceInEther.toString();
    transferAmount=new EthereumPrice(transferAmount,isEth ? EthereumPrice.Currency.ETHER : EthereumPrice.Currency.WEI).inLongToString();
    balanceAmountInEther=new EthereumPrice(balanceAmountInEther,EthereumPrice.Currency.ETHER).inLongToString();
    BigDecimal transferAmountBigDecimal=new BigDecimal(transferAmount);
    BigDecimal balanceBigDecimal=new BigDecimal(balanceAmountInEther);
    if (transferAmountBigDecimal.doubleValue() > balanceBigDecimal.doubleValue()) {
      amountEditText.setError(getResources().getString(R.string.insufficient_funds));
      amountEditText.requestFocus();
      isHasNoError=false;
    }
  }
  return isHasNoError;
}","public boolean isHasNoError(){
  if (errorViewHolder.getVisibility() == View.VISIBLE)   return false;
  boolean emptyAmountCheck=true;
  boolean isHasNoError=true;
  if (recipientAddressEditText.getText().length() == 0) {
    recipientAddressTextInputLayout.setError(getResources().getString(R.string.empty_field));
    isHasNoError=false;
  }
 else   if (recipientAddressEditText.getText().length() > 1 && recipientAddressEditText.getText().length() < 42) {
    recipientAddressTextInputLayout.setError(getResources().getString(R.string.short_account));
    isHasNoError=false;
  }
 else   recipientAddressTextInputLayout.setError(""String_Node_Str"");
  if (amountEditText.getText().length() == 0) {
    amountTextInputLayout.setError(getResources().getString(R.string.empty_field));
    emptyAmountCheck=false;
    isHasNoError=false;
  }
 else   amountTextInputLayout.setError(""String_Node_Str"");
  if (emptyAmountCheck) {
    String transferAmount=amountEditText.getText().toString();
    String balanceAmountInEther=accountBalanceInEther.toString();
    transferAmount=new EthereumPrice(transferAmount,isEth ? EthereumPrice.Currency.ETHER : EthereumPrice.Currency.WEI).inLongToString();
    balanceAmountInEther=new EthereumPrice(balanceAmountInEther,EthereumPrice.Currency.ETHER).inLongToString();
    BigDecimal transferAmountBigDecimal=new BigDecimal(transferAmount);
    BigDecimal balanceBigDecimal=new BigDecimal(balanceAmountInEther);
    if (transferAmountBigDecimal.doubleValue() > balanceBigDecimal.doubleValue()) {
      amountTextInputLayout.setError(getResources().getString(R.string.insufficient_funds));
      isHasNoError=false;
    }
 else     amountTextInputLayout.setError(""String_Node_Str"");
  }
  return isHasNoError;
}"
40585,"@Before public void setUp() throws Exception {
  loginPage=new LoginPage();
  activityStreamPage=loginPage.login(adminUsername,adminPassword);
}","@Before public void setUp() throws Exception {
  loginPage=new LoginPage();
  activityStreamPage=loginPage.login(adminUsername,adminPassword);
  activityStreamPage.getActivityStreamPage();
}"
40586,"@Before public void setUp() throws Exception {
  loginPage=new LoginPage();
  activityStreamPage=loginPage.login(portalAdminUsername,portalAdminPassword);
}","@Before public void setUp() throws Exception {
  loginPage=new LoginPage();
  activityStreamPage=loginPage.login(portalAdminUsername,portalAdminPassword);
  activityStreamPage.getActivityStreamPage();
}"
40587,"@Before public void setUp() throws Exception {
  loginPage=new LoginPage();
  activityStreamPage=loginPage.login(username,password);
}","@Before public void setUp() throws Exception {
  loginPage=new LoginPage();
  activityStreamPage=loginPage.login(username,password);
  activityStreamPage.getActivityStreamPage();
}"
40588,"@Override public void delete(E entity){
  em.remove(entity);
}","@Override public void delete(E entity){
  if (!em.contains(entity)) {
    entity=em.merge(entity);
  }
  em.remove(entity);
}"
40589,"public void deleteFile(File file){
  LOG.info(""String_Node_Str"" + file);
  communityService.deleteFile(file);
}","public void deleteFile(File file){
  LOG.info(""String_Node_Str"" + file);
  try {
    communityService.deleteFile(file);
    try {
      context.redirect(""String_Node_Str"");
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"");
    }
  }
 catch (  ServiceException e) {
    errorMsg=""String_Node_Str"";
    LOG.error(errorMsg);
    setErrorMsg(errorMsg);
  }
}"
40590,"public void uploadFile(FileUploadEvent event){
  UploadedFile uploadedFile=event.getFile();
  try {
    communityService.uploadFile(user,uploadedFile);
  }
 catch (  ServiceException e) {
    errorMsg=""String_Node_Str"";
    LOG.error(errorMsg);
    setErrorMsg(errorMsg);
  }
}","public void uploadFile(FileUploadEvent event){
  UploadedFile uploadedFile=event.getFile();
  try {
    communityService.uploadFile(user,uploadedFile);
    try {
      context.redirect(""String_Node_Str"");
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"");
    }
  }
 catch (  ServiceException e) {
    errorMsg=""String_Node_Str"";
    LOG.error(errorMsg);
    setErrorMsg(errorMsg);
  }
}"
40591,"@Override public User login(String username,String password){
  LOG.debug(""String_Node_Str"" + username);
  ArgumentChecker.assertNotNullAndEmpty(username,""String_Node_Str"");
  ArgumentChecker.assertNotNullAndEmpty(password,""String_Node_Str"");
  User user=loadUserByUsername(username);
  ArgumentChecker.assertNotNull(user,""String_Node_Str"");
  return pwEncoder.checkPassword(password,user.getPassword()) ? user : null;
}","@Override public User login(String username,String password){
  LOG.debug(""String_Node_Str"" + username);
  ArgumentChecker.assertNotNullAndEmpty(username,""String_Node_Str"");
  ArgumentChecker.assertNotNullAndEmpty(password,""String_Node_Str"");
  User user=loadUserByUsername(username);
  return pwEncoder.checkPassword(password,user.getPassword()) ? user : null;
}"
40592,"private User loadUserByUsername(String username){
  ArgumentChecker.assertNotNullAndEmpty(username,""String_Node_Str"");
  try {
    return userDAO.findByUsername(username);
  }
 catch (  IllegalArgumentException e) {
    String msg=""String_Node_Str"";
    LOG.error(msg,e);
    throw new ServiceException(msg);
  }
catch (  Exception e) {
    String msg=""String_Node_Str"";
    LOG.error(msg,e);
    throw new ServiceException(msg);
  }
}","private User loadUserByUsername(String username){
  ArgumentChecker.assertNotNullAndEmpty(username,""String_Node_Str"");
  try {
    return userDAO.findByUsername(username);
  }
 catch (  NoResultException e) {
    String msg=""String_Node_Str"" + username;
    LOG.warn(msg,e);
    throw new ServiceException(msg);
  }
catch (  IllegalArgumentException e) {
    String msg=""String_Node_Str"";
    LOG.error(msg,e);
    throw new ServiceException(msg);
  }
catch (  Exception e) {
    String msg=""String_Node_Str"";
    LOG.error(msg,e);
    throw new ServiceException(msg);
  }
}"
40593,"public void doLogin(){
  try {
    user=service.login(getUsername(),getPassword());
  }
 catch (  ServiceException e) {
    String erroMsg=""String_Node_Str"";
    LOG.error(erroMsg,e);
    setErrorMsg(erroMsg);
  }
  if (user == null) {
    setErrorMsg(""String_Node_Str"");
  }
 else {
    context=FacesContext.getCurrentInstance().getExternalContext();
    context.getSessionMap().put(""String_Node_Str"",user.getId());
    RedirectHelper.redirect(""String_Node_Str"");
  }
}","public void doLogin(){
  try {
    user=service.login(getUsername(),getPassword());
    context=FacesContext.getCurrentInstance().getExternalContext();
    context.getSessionMap().put(""String_Node_Str"",user.getId());
    RedirectHelper.redirect(""String_Node_Str"");
  }
 catch (  ServiceException e) {
    String erroMsg=""String_Node_Str"";
    LOG.error(erroMsg,e);
    setErrorMsg(erroMsg);
  }
catch (  Exception e) {
    String msg=""String_Node_Str"";
    LOG.error(msg,e);
    setErrorMsg(msg);
  }
}"
40594,"private void handleButton(Map<String,Object> session){
  if (id == null) {
    id=String.valueOf(flash.get(""String_Node_Str""));
  }
  if (id != null) {
    flash.put(""String_Node_Str"",id);
    if (id.equals(String.valueOf(session.get(""String_Node_Str"")))) {
      setOwnProfile(true);
    }
 else {
      setOwnProfile(false);
    }
  }
  hideAddRemove=context.getRequestParameterMap().get(""String_Node_Str"");
  fromHeader=context.getRequestParameterMap().get(""String_Node_Str"");
  flash.put(""String_Node_Str"",id);
  flash.put(""String_Node_Str"",hideAddRemove);
  flash.put(""String_Node_Str"",fromHeader);
  hideAddRemoveCheck=String.valueOf(context.getFlash().get(""String_Node_Str""));
  if (""String_Node_Str"".equals(hideAddRemoveCheck)) {
    setOwnProfile(true);
  }
}","private void handleButton(Map<String,Object> session){
  if (id == null) {
    id=String.valueOf(flash.get(""String_Node_Str""));
  }
  if (id != null) {
    flash.put(""String_Node_Str"",id);
    if (id.equals(String.valueOf(session.get(""String_Node_Str"")))) {
      setOwnProfile(true);
    }
 else {
      setOwnProfile(false);
    }
  }
  hideAddRemove=context.getRequestParameterMap().get(""String_Node_Str"");
  flash.put(""String_Node_Str"",id);
  flash.put(""String_Node_Str"",hideAddRemove);
  hideAddRemoveCheck=String.valueOf(context.getFlash().get(""String_Node_Str""));
  if (""String_Node_Str"".equals(hideAddRemoveCheck)) {
    setOwnProfile(true);
  }
}"
40595,"@PostConstruct public void init(){
  context=FacesContext.getCurrentInstance().getExternalContext();
  Map<String,Object> session=context.getSessionMap();
  if (session.size() != 0 && session.get(""String_Node_Str"") != null) {
    flash=context.getFlash();
    id=context.getRequestParameterMap().get(""String_Node_Str"");
    handleButton(session);
    userId=(int)session.get(""String_Node_Str"");
    userProfId=String.valueOf(context.getFlash().get(""String_Node_Str""));
    fromHeaderCheck=String.valueOf(context.getFlash().get(""String_Node_Str""));
    if (fromHeaderCheck != null && fromHeaderCheck.equals(""String_Node_Str"")) {
      userProfId=null;
    }
    this.initializeProfile(userId,userProfId);
    try {
      loadContactsCommunitiesAndUserprofile();
      validateUserPriviles(loggedInUser);
    }
 catch (    ServiceException e) {
      errorMsg=""String_Node_Str"";
      LOG.error(errorMsg);
      setErrorMsg(errorMsg);
    }
  }
 else {
    RedirectHelper.redirect(""String_Node_Str"");
  }
}","@PostConstruct public void init(){
  context=FacesContext.getCurrentInstance().getExternalContext();
  Map<String,Object> session=context.getSessionMap();
  if (session.size() != 0 && session.get(""String_Node_Str"") != null) {
    flash=context.getFlash();
    id=context.getRequestParameterMap().get(""String_Node_Str"");
    handleButton(session);
    userId=(int)session.get(""String_Node_Str"");
    userProfId=String.valueOf(context.getFlash().get(""String_Node_Str""));
    this.initializeProfile(userId,userProfId);
    try {
      loadContactsCommunitiesAndUserprofile();
      validateUserPriviles(loggedInUser);
    }
 catch (    ServiceException e) {
      errorMsg=""String_Node_Str"";
      LOG.error(errorMsg);
      setErrorMsg(errorMsg);
    }
  }
}"
40596,"@Override public void insert(Post post,Community community){
  LOG.debug(""String_Node_Str"" + post);
  ArgumentChecker.assertNotNull(post,""String_Node_Str"");
  try {
    if (community == null) {
      dao.insert(post);
    }
 else {
      dao.insert(post,community);
    }
  }
 catch (  Exception e) {
    String message=""String_Node_Str"";
    LOG.error(message,e);
    throw new ServiceException(message + post);
  }
}","@Override public void insert(Post post,Community community){
  LOG.debug(""String_Node_Str"" + post);
  ArgumentChecker.assertNotNull(post,""String_Node_Str"");
  try {
    if (community == null) {
      dao.insert(post);
    }
 else {
      dao.insert(post,community);
    }
  }
 catch (  IllegalArgumentException e) {
    String msg=""String_Node_Str"";
    LOG.error(msg,e);
    throw new ServiceException(msg);
  }
catch (  Exception e) {
    String message=""String_Node_Str"";
    LOG.error(message,e);
    throw new ServiceException(message + post);
  }
}"
40597,"@Override public File findById(int id){
  return super.findById(id);
}","@Override public File findById(int id){
  LOG.debug(""String_Node_Str"" + id + ""String_Node_Str"");
  return super.findById(id);
}"
40598,"@Override public File insert(File entity){
  return super.insert(entity);
}","@Override public File insert(File entity){
  LOG.debug(""String_Node_Str"" + entity + ""String_Node_Str"");
  return super.insert(entity);
}"
40599,"@Override public File update(File entity){
  return super.update(entity);
}","@Override public File update(File entity){
  LOG.debug(""String_Node_Str"" + entity + ""String_Node_Str"");
  return super.update(entity);
}"
40600,"@Override public void delete(File entity){
  em.remove(em.contains(entity) ? entity : em.merge(entity));
}","@Override public void delete(File entity){
  LOG.debug(""String_Node_Str"" + entity + ""String_Node_Str"");
  em.remove(em.contains(entity) ? entity : em.merge(entity));
}"
40601,"@Override public List<File> findAll(){
  return super.findAll();
}","@Override public List<File> findAll(){
  LOG.debug(""String_Node_Str"");
  return super.findAll();
}"
40602,"public void setCreated(Date created){
  LOG.debug(""String_Node_Str"" + created + ""String_Node_Str"");
  ArgumentChecker.assertNotNull(created,""String_Node_Str"");
  this.created=new Date(created.getTime());
  ;
}","public void setCreated(Date created){
  LOG.debug(""String_Node_Str"" + created + ""String_Node_Str"");
  ArgumentChecker.assertNotNull(created,""String_Node_Str"");
  this.created=new Date(created.getTime());
}"
40603,"public void setPicture(byte[] picture){
  this.picture=picture;
}","public void setPicture(byte[] picture){
  this.picture=Arrays.copyOf(picture,picture.length);
}"
40604,"public byte[] getPicture(){
  return picture;
}","public byte[] getPicture(){
  return Arrays.copyOf(picture,picture.length);
}"
40605,"public void setData(byte[] file){
  this.data=file;
}","public void setData(byte[] file){
  this.data=Arrays.copyOf(file,file.length);
}"
40606,"public byte[] getData(){
  return data;
}","public byte[] getData(){
  return Arrays.copyOf(data,data.length);
}"
40607,"public Date getCreated(){
  LOG.debug(""String_Node_Str"" + created);
  return created;
}","public Date getCreated(){
  LOG.debug(""String_Node_Str"" + created);
  return new Date(created.getTime());
}"
40608,"public void setCreated(Date created){
  LOG.debug(""String_Node_Str"" + created + ""String_Node_Str"");
  ArgumentChecker.assertNotNull(created,""String_Node_Str"");
  this.created=created;
}","public void setCreated(Date created){
  LOG.debug(""String_Node_Str"" + created + ""String_Node_Str"");
  ArgumentChecker.assertNotNull(created,""String_Node_Str"");
  this.created=new Date(created.getTime());
  ;
}"
40609,"public byte[] getPicture(){
  return picture;
}","public byte[] getPicture(){
  return Arrays.copyOf(picture,picture.length);
}"
40610,"public void setPicture(byte[] picture){
  this.picture=picture;
}","public void setPicture(byte[] picture){
  this.picture=Arrays.copyOf(picture,picture.length);
}"
40611,"public List<Post> getChildPosts(Post post){
  postChildren=new ArrayList<Post>();
  postChildren=post.getChildPosts();
  return postChildren;
}","public List<Post> getChildPosts(Post post){
  postChildren=post.getChildPosts();
  return postChildren;
}"
40612,"public void doLogin(){
  try {
    user=service.login(getUsername(),getPassword());
  }
 catch (  Exception e) {
    String erroMsg=""String_Node_Str"";
    LOG.error(erroMsg);
    setErrorMsg(erroMsg);
  }
  if (user == null) {
    setErrorMsg(""String_Node_Str"");
  }
  if (user != null) {
    FacesContext context=FacesContext.getCurrentInstance();
    context.getExternalContext().getSessionMap().put(""String_Node_Str"",user.getId());
    Map<String,Object> session=context.getExternalContext().getSessionMap();
    for (    String key : session.keySet()) {
      LOG.info(key + ""String_Node_Str"" + session.get(key));
    }
    try {
      context.getExternalContext().redirect(""String_Node_Str"");
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"");
    }
  }
}","public void doLogin(){
  try {
    user=service.login(getUsername(),getPassword());
  }
 catch (  Exception e) {
    String erroMsg=""String_Node_Str"";
    LOG.error(erroMsg);
    setErrorMsg(erroMsg);
  }
  if (user == null) {
    setErrorMsg(""String_Node_Str"");
  }
  if (user != null) {
    FacesContext context=FacesContext.getCurrentInstance();
    context.getExternalContext().getSessionMap().put(""String_Node_Str"",user.getId());
    Map<String,Object> session=context.getExternalContext().getSessionMap();
    for (    Map.Entry<String,Object> e : session.entrySet()) {
      LOG.info(e.getKey() + ""String_Node_Str"" + e.getValue());
    }
    try {
      context.getExternalContext().redirect(""String_Node_Str"");
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"");
    }
  }
}"
40613,"public boolean isImageExists(){
  if (user != null) {
    return user.getUserProfile().getPicture() != null;
  }
 else {
    return false;
  }
}","public boolean isImageExists(){
  if (user == null) {
    return false;
  }
 else {
    return user.getUserProfile().getPicture() != null;
  }
}"
40614,"public StreamedContent getImage(){
  if (user.getUserProfile().getPicture() != null) {
    return new DefaultStreamedContent(new ByteArrayInputStream(user.getUserProfile().getPicture()));
  }
  return null;
}","public StreamedContent getImage(){
  return new DefaultStreamedContent(new ByteArrayInputStream(user.getUserProfile().getPicture()));
}"
40615,"@Test public void testProfilepicture(){
  byte[] bytearray=""String_Node_Str"".getBytes();
  up.setPicture(bytearray);
  Assert.assertEquals(bytearray,up.getPicture());
}","@Test public void testProfilepicture(){
  byte[] bytearray=""String_Node_Str"".getBytes();
  bytearray=Arrays.copyOf(bytearray,bytearray.length);
  up.setPicture(bytearray);
  Assert.assertArrayEquals(bytearray,up.getPicture());
}"
40616,"public void removeLike(User user,Post post){
  if (likedby.contains(user))   likedby.remove(user);
  if (liked.contains(post))   ;
  liked.remove(post);
  user.getLikes().remove(this);
  post.getLikes().remove(this);
}","public void removeLike(User user,Post post){
  if (likedby.contains(user))   likedby.remove(user);
  if (liked.contains(post))   liked.remove(post);
  user.getLikes().remove(this);
  post.getLikes().remove(this);
}"
40617,"@Override public void insert(Post post,Community community){
  LOG.debug(""String_Node_Str"" + post);
  try {
    if (community == null) {
      dao.insert(post);
    }
 else {
      dao.insert(post,community);
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + post,e);
    throw new ServiceException(""String_Node_Str"" + post);
  }
}","@Override public void insert(Post post,Community community){
  LOG.debug(""String_Node_Str"" + post);
  if (post == null) {
    throw new ServiceException(""String_Node_Str"");
  }
  try {
    if (community == null) {
      dao.insert(post);
    }
 else {
      dao.insert(post,community);
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + post,e);
    throw new ServiceException(""String_Node_Str"" + post,e);
  }
}"
40618,"public void newPost(Post parentpost){
  if (parentpost == null) {
    flash.put(""String_Node_Str"",inputText);
    try {
      post=pservice.createPost(getLoggedInUser(),inputText,new Date());
    }
 catch (    DatabaseException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
 else {
    flash.put(""String_Node_Str"",inputTextChild);
    try {
      post=pservice.createPost(parentpost,parentpost.getCommunity(),getLoggedInUser(),inputTextChild,new Date());
    }
 catch (    DatabaseException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
  flash.put(""String_Node_Str"",post);
  LOG.info(""String_Node_Str"" + flash.toString());
  service.insert(post);
  refreshPage();
}","public void newPost(Post parentpost){
  if (parentpost == null) {
    flash.put(""String_Node_Str"",inputText);
    try {
      post=pservice.createPost(getLoggedInUser(),inputText,new Date());
    }
 catch (    DatabaseException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
 else {
    flash.put(""String_Node_Str"",inputTextChild);
    try {
      post=pservice.createPost(parentpost,parentpost.getCommunity(),getLoggedInUser(),inputTextChild,new Date());
    }
 catch (    DatabaseException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
  flash.put(""String_Node_Str"",post);
  LOG.info(""String_Node_Str"" + flash.toString());
  refreshPage();
}"
40619,"@Ignore @Test public void addContact_Succesful(){
  expect(userDAO.findByUsername(USERNAME)).andReturn(user1);
  replay(userDAO);
  expect(userContactDAO.doesContactExist(user1.getId())).andReturn(false);
  expect(userContactDAO.insert(userContact2)).andReturn(userContact2);
  replay(userContactDAO);
  userService.addContact(user2,user1.getUsername());
}","@Test public void addContact_Succesful(){
  expect(userDAO.findByUsername(USERNAME)).andReturn(user1);
  replay(userDAO);
  expect(userContactDAO.doesContactExistForUserId(user1.getId(),user2.getId())).andReturn(false);
  expect(userContactDAO.insert(userContact2)).andReturn(userContact2);
  replay(userContactDAO);
  userService.addContact(user2,user1.getUsername());
}"
40620,"@Ignore @Test(expected=ServiceException.class) public void addContact_Fail(){
  expect(userDAO.findByUsername(USERNAME)).andReturn(user1);
  replay(userDAO);
  expect(userContactDAO.doesContactExist(user1.getId())).andReturn(true);
  replay(userContactDAO);
  userService.addContact(user2,user1.getUsername());
}","@Test(expected=ServiceException.class) public void addContact_Fail(){
  expect(userDAO.findByUsername(USERNAME)).andReturn(user1);
  replay(userDAO);
  expect(userContactDAO.doesContactExistForUserId(user1.getId(),user2.getId())).andReturn(true);
  replay(userContactDAO);
  userService.addContact(user2,user1.getUsername());
}"
40621,"@Ignore @Test public void removeContact_Succesfull(){
  expect(userDAO.findByUsername(user1.getUsername())).andReturn(user1);
  replay(userDAO);
  expect(userContactDAO.doesContactExist(user1.getId())).andReturn(true);
  expect(userContactDAO.findById(user1.getId())).andReturn(userContact2);
  userContactDAO.delete(userContact2);
  replay(userContactDAO);
  userService.removeContact(user1,user1.getUsername());
}","@Test public void removeContact_Succesfull(){
  expect(userDAO.findByUsername(user1.getUsername())).andReturn(user1);
  replay(userDAO);
  expect(userContactDAO.doesContactExistForUserId(user1.getId(),user2.getId())).andReturn(true);
  expect(userContactDAO.findById(user1.getId())).andReturn(userContact2);
  userContactDAO.delete(userContact2);
  replay(userContactDAO);
  userService.removeContact(user2,user1.getUsername());
}"
40622,"@Ignore @Test(expected=ServiceException.class) public void removeContact_Fail(){
  expect(userDAO.findByUsername(user1.getUsername())).andReturn(user1);
  replay(userDAO);
  expect(userContactDAO.doesContactExist(user1.getId())).andReturn(false);
  replay(userContactDAO);
  userService.removeContact(user1,user1.getUsername());
}","@Test(expected=ServiceException.class) public void removeContact_Fail(){
  expect(userDAO.findByUsername(user1.getUsername())).andReturn(user1);
  replay(userDAO);
  expect(userContactDAO.doesContactExistForUserId(user1.getId(),user2.getId())).andReturn(false);
  replay(userContactDAO);
  userService.removeContact(user2,user1.getUsername());
}"
40623,void insert(UserContact contact);,UserContact insert(UserContact contact);
40624,void update(UserContact contact);,UserContact update(UserContact contact);
40625,"@Override public void insert(UserContact contact){
  LOG.info(""String_Node_Str"" + contact + ""String_Node_Str"");
  em.persist(contact);
}","@Override public UserContact insert(UserContact contact){
  LOG.info(""String_Node_Str"" + contact + ""String_Node_Str"");
  em.persist(contact);
  return contact;
}"
40626,"@Override public void update(UserContact contact){
  LOG.info(""String_Node_Str"" + contact + ""String_Node_Str"");
  em.merge(contact);
}","@Override public UserContact update(UserContact contact){
  LOG.info(""String_Node_Str"" + contact + ""String_Node_Str"");
  em.merge(contact);
  return contact;
}"
40627,"@Override public List<UserContact> findAll(){
  LOG.info(""String_Node_Str"");
  final String hql=""String_Node_Str"" + UserProfile.class.getName() + ""String_Node_Str"";
  return em.createQuery(hql).getResultList();
}","@Override public List<UserContact> findAll(){
  LOG.info(""String_Node_Str"");
  final String hql=""String_Node_Str"" + UserContact.class.getName() + ""String_Node_Str"";
  return em.createQuery(hql).getResultList();
}"
40628,void insert(UserProfile up);,UserProfile insert(UserProfile up);
40629,void update(UserProfile up);,UserProfile update(UserProfile up);
40630,"@Override public void insert(UserProfile up){
  LOG.info(""String_Node_Str"" + up + ""String_Node_Str"");
  em.persist(up);
}","@Override public UserProfile insert(UserProfile up){
  LOG.info(""String_Node_Str"" + up + ""String_Node_Str"");
  em.persist(up);
  return up;
}"
40631,"@Override public void update(UserProfile up){
  LOG.info(""String_Node_Str"" + up + ""String_Node_Str"");
  em.merge(up);
}","@Override public UserProfile update(UserProfile up){
  LOG.info(""String_Node_Str"" + up + ""String_Node_Str"");
  em.merge(up);
  return up;
}"
40632,"@Bean public SpringVertx vertx(ObjectProvider<VertxOptions> optionsProvider,ObjectProvider<ClusterManager> clusterManagerProvider,ObjectProvider<List<VertxListener>> listenersProvider,ObjectProvider<List<VertxConfigurer>> configurersProvider){
  SpringVertx.Builder builder=SpringVertx.builder();
  VertxOptions options=optionsProvider.getIfAvailable();
  if (options != null) {
    builder.options(options);
  }
  ClusterManager clusterManager=clusterManagerProvider.getIfAvailable();
  if (clusterManager != null) {
    builder.clusterManager(clusterManager);
  }
  List<VertxListener> listeners=listenersProvider.getIfAvailable();
  if (listeners != null) {
    for (    VertxListener listener : listeners) {
      builder.listener(listener);
    }
  }
  List<VertxConfigurer> configurers=configurersProvider.getIfAvailable();
  if (configurers != null) {
    List<VertxConfigurer> sortedConfigurers=new ArrayList<>(configurers);
    AnnotationAwareOrderComparator.sort(sortedConfigurers);
    for (    VertxConfigurer configurer : sortedConfigurers) {
      logger.debug(""String_Node_Str"",configurer);
      configurer.configure(builder);
    }
  }
  return builder.build();
}","@Bean public SpringVertx vertx(ObjectProvider<VertxOptions> optionsProvider,ObjectProvider<ClusterManager> clusterManagerProvider,ObjectProvider<List<VertxListener>> listenersProvider,ObjectProvider<List<VertxConfigurer>> configurersProvider){
  SpringVertx.Builder builder=SpringVertx.builder();
  List<VertxConfigurer> configurers=new ArrayList<>();
  ClusterManager clusterManager=clusterManagerProvider.getIfAvailable();
  if (clusterManager != null) {
    configurers.add(new ClusterManagerConfigurer(clusterManager));
  }
  List<VertxListener> listeners=listenersProvider.getIfAvailable();
  if (listeners != null) {
    for (    VertxListener listener : listeners) {
      builder.listener(listener);
    }
  }
  List<VertxConfigurer> injectedConfigurers=configurersProvider.getIfAvailable();
  if (injectedConfigurers != null) {
    configurers.addAll(injectedConfigurers);
  }
  if (!configurers.isEmpty()) {
    List<VertxConfigurer> sortedConfigurers=new ArrayList<>(configurers);
    AnnotationAwareOrderComparator.sort(sortedConfigurers);
    for (    VertxConfigurer configurer : sortedConfigurers) {
      logger.debug(""String_Node_Str"",configurer);
      configurer.configure(builder);
    }
  }
  VertxOptions options=optionsProvider.getIfAvailable();
  if (options != null) {
    builder.options(options);
  }
  return builder.build();
}"
40633,"static void vi(String message){
  if (!verboseInternal && message != null && !message.isEmpty())   return;
  Log.d(""String_Node_Str"",message);
}","static void vi(String message){
  if (!verboseInternal && message != null && !message.isEmpty())   return;
  Log.d(""String_Node_Str"",""String_Node_Str"" + message);
}"
40634,"static void d(String message){
  if (!debug && message != null && !message.isEmpty())   return;
  Log.d(""String_Node_Str"",message);
}","static void d(String message){
  if (!debug && message != null && !message.isEmpty())   return;
  Log.d(""String_Node_Str"",""String_Node_Str"" + message);
}"
40635,"static void e(String message){
  if (!error && message != null && !message.isEmpty())   return;
  Log.d(""String_Node_Str"",message);
}","static void e(String message){
  if (!error && message != null && !message.isEmpty())   return;
  Log.d(""String_Node_Str"",""String_Node_Str"" + message);
}"
40636,"static void v(String message){
  if (!verbose && message != null && !message.isEmpty())   return;
  Log.d(""String_Node_Str"",message);
}","static void v(String message){
  if (!verbose && message != null && !message.isEmpty())   return;
  Log.d(""String_Node_Str"",""String_Node_Str"" + message);
}"
40637,"static void w(String message){
  if (!warning && message != null && !message.isEmpty())   return;
  Log.d(""String_Node_Str"",message);
}","static void w(String message){
  if (!warning && message != null && !message.isEmpty())   return;
  Log.d(""String_Node_Str"",""String_Node_Str"" + message);
}"
40638,"static void vi(String message){
  if (!verboseInternal && message != null && !message.isEmpty())   return;
  Log.d(""String_Node_Str"",""String_Node_Str"" + message);
}","static void vi(String message){
  if (!verboseInternal || message == null || message.isEmpty())   return;
  Log.d(""String_Node_Str"",""String_Node_Str"" + message);
}"
40639,"static void d(String message){
  if (!debug && message != null && !message.isEmpty())   return;
  Log.d(""String_Node_Str"",""String_Node_Str"" + message);
}","static void d(String message){
  if (!debug || message == null || message.isEmpty())   return;
  Log.d(""String_Node_Str"",""String_Node_Str"" + message);
}"
40640,"static void e(String message){
  if (!error && message != null && !message.isEmpty())   return;
  Log.d(""String_Node_Str"",""String_Node_Str"" + message);
}","static void e(String message){
  if (!error || message == null || message.isEmpty())   return;
  Log.d(""String_Node_Str"",""String_Node_Str"" + message);
}"
40641,"static void v(String message){
  if (!verbose && message != null && !message.isEmpty())   return;
  Log.d(""String_Node_Str"",""String_Node_Str"" + message);
}","static void v(String message){
  if (!verbose || message == null || message.isEmpty())   return;
  Log.d(""String_Node_Str"",""String_Node_Str"" + message);
}"
40642,"static void w(String message){
  if (!warning && message != null && !message.isEmpty())   return;
  Log.d(""String_Node_Str"",""String_Node_Str"" + message);
}","static void w(String message){
  if (!warning || message == null || message.isEmpty())   return;
  Log.d(""String_Node_Str"",""String_Node_Str"" + message);
}"
40643,"/** 
 */
public static void main(String[] args){
  Node<String> first=new Node<String>();
  Node<String> second=new Node<String>();
  Node<String> third=new Node<String>();
  Node<String> forth=new Node<String>();
  Node<String> fifth=new Node<String>();
  first.item=""String_Node_Str"";
  first.next=second;
  second.item=""String_Node_Str"";
  second.next=third;
  third.item=""String_Node_Str"";
  third.next=forth;
  forth.item=""String_Node_Str"";
  forth.next=fifth;
  fifth.item=""String_Node_Str"";
  fifth.next=null;
  LinkedListExecise4<String> linkedListExercise4=new LinkedListExecise4<String>();
  Node targetNode=first;
  System.out.println(""String_Node_Str"" + targetNode + ""String_Node_Str"");
  Node resultNode=linkedListExercise4.removeAfter(targetNode,first);
  System.out.println(""String_Node_Str"");
  Node current2=resultNode;
  while (current2.next != null) {
    System.out.println(current2.item);
    current2=current2.next;
  }
  System.out.println(current2.item);
  System.out.println(""String_Node_Str"");
}","/** 
 */
public static void main(String[] args){
  Node<String> first=new Node<String>();
  Node<String> second=new Node<String>();
  Node<String> third=new Node<String>();
  Node<String> forth=new Node<String>();
  Node<String> fifth=new Node<String>();
  first.item=""String_Node_Str"";
  first.next=second;
  second.item=""String_Node_Str"";
  second.next=third;
  third.item=""String_Node_Str"";
  third.next=forth;
  forth.item=""String_Node_Str"";
  forth.next=fifth;
  fifth.item=""String_Node_Str"";
  fifth.next=null;
  LinkedListExecise4<String> linkedListExercise4=new LinkedListExecise4<String>();
  Node targetNode=first;
  System.out.println(""String_Node_Str"" + targetNode + ""String_Node_Str"");
  Node resultNode=linkedListExercise4.removeAfter(targetNode,first);
  System.out.println(""String_Node_Str"");
  Node current2=resultNode;
  while (current2 != null) {
    System.out.println(current2.item);
    current2=current2.next;
  }
  System.out.println(current2);
  System.out.println(""String_Node_Str"");
}"
40644,"public Node<Item> removeAfter(Node node,Node first){
  if (first == null) {
    return null;
  }
  Node current=first;
  while (current != null) {
    if (current.item.equals(node.item)) {
      if (current.next != null) {
        current.next=current.next.next;
        return first;
      }
 else {
        return first;
      }
    }
    current=current.next;
  }
  return null;
}","public Node<Item> removeAfter(Node node,Node first){
  if (first == null) {
    return null;
  }
  Node current=first;
  while (current != null) {
    if (current.equals(node)) {
      if (current.next != null) {
        current.next=current.next.next;
        return first;
      }
 else {
        return first;
      }
    }
    current=current.next;
  }
  return null;
}"
40645,"/** 
 * @param args
 */
public static void main(String[] args){
  Node first=new Node();
  Node second=new Node();
  Node third=new Node();
  Node forth=new Node();
  Node fifth=new Node();
  first.item=1;
  first.next=second;
  second.item=3;
  second.next=third;
  third.item=999;
  third.next=forth;
  forth.item=33;
  forth.next=fifth;
  fifth.item=21;
  fifth.next=null;
  System.out.println(""String_Node_Str"");
  Node current1=first;
  while (current1.next != null) {
    System.out.println(current1.item);
    current1=current1.next;
  }
  System.out.println(current1.item);
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  LinkedListExecise7 linkedListExercise7=new LinkedListExecise7();
  Integer result=linkedListExercise7.max(first);
  System.out.println(""String_Node_Str"" + result);
}","/** 
 * @param args
 */
public static void main(String[] args){
  Node first=new Node();
  Node second=new Node();
  Node third=new Node();
  Node forth=new Node();
  Node fifth=new Node();
  first.item=1;
  second.item=3;
  third.item=999;
  forth.item=33;
  fifth.item=21;
  first.next=second;
  second.next=third;
  third.next=forth;
  forth.next=fifth;
  fifth.next=null;
  System.out.println(""String_Node_Str"");
  Node current1=first;
  while (current1.next != null) {
    System.out.println(current1.item);
    current1=current1.next;
  }
  System.out.println(current1.item);
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  LinkedListExecise7 linkedListExercise7=new LinkedListExecise7();
  Integer result=linkedListExercise7.max(first);
  System.out.println(""String_Node_Str"" + result);
}"
40646,"@Override public boolean isBeaconBase(IBlockAccess worldObj,BlockPos pos,BlockPos beacon){
  return rule.fromBlock.isBeaconBase(new UCWBlockAccess(worldObj),pos,beacon);
}","@Override public boolean isBeaconBase(IBlockAccess world,BlockPos pos,BlockPos beacon){
  return rule.fromBlock.isBeaconBase(new UCWBlockAccess(world,false),pos,beacon);
}"
40647,"@Override public boolean canHarvestBlock(IBlockAccess world,BlockPos pos,EntityPlayer player){
  return rule.fromBlock.canHarvestBlock(new UCWBlockAccess(world),pos,player);
}","@Override public boolean canHarvestBlock(IBlockAccess world,BlockPos pos,EntityPlayer player){
  return rule.fromBlock.canHarvestBlock(new UCWBlockAccess(world,false),pos,player);
}"
40648,"@Override public int getLightOpacity(IBlockState state,IBlockAccess world,BlockPos pos){
  return base.getLightOpacity(new UCWBlockAccess(world),pos);
}","@Override public int getLightOpacity(IBlockState state,IBlockAccess world,BlockPos pos){
  return base.getLightOpacity(new UCWBlockAccess(world,false),pos);
}"
40649,"@Override public boolean isLeaves(IBlockState state,IBlockAccess world,BlockPos pos){
  return base.getBlock().isLeaves(base,new UCWBlockAccess(world),pos);
}","@Override public boolean isLeaves(IBlockState state,IBlockAccess world,BlockPos pos){
  return base.getBlock().isLeaves(base,new UCWBlockAccess(world,false),pos);
}"
40650,"@Override public boolean isFoliage(IBlockAccess world,BlockPos pos){
  return base.getBlock().isFoliage(new UCWBlockAccess(world),pos);
}","@Override public boolean isFoliage(IBlockAccess world,BlockPos pos){
  return base.getBlock().isFoliage(new UCWBlockAccess(world,false),pos);
}"
40651,"@Override public boolean isReplaceable(IBlockAccess worldIn,BlockPos pos){
  return base.getBlock().isReplaceable(new UCWBlockAccess(worldIn),pos);
}","@Override public boolean isReplaceable(IBlockAccess worldIn,BlockPos pos){
  return base.getBlock().isReplaceable(new UCWBlockAccess(worldIn,false),pos);
}"
40652,"@Override public boolean isWood(IBlockAccess world,BlockPos pos){
  return base.getBlock().isWood(new UCWBlockAccess(world),pos);
}","@Override public boolean isWood(IBlockAccess world,BlockPos pos){
  return base.getBlock().isWood(new UCWBlockAccess(world,false),pos);
}"
40653,"@Override public float getSlipperiness(IBlockState state,IBlockAccess world,BlockPos pos,@Nullable Entity entity){
  return base.getBlock().getSlipperiness(base,new UCWBlockAccess(world),pos,entity);
}","@Override public float getSlipperiness(IBlockState state,IBlockAccess world,BlockPos pos,@Nullable Entity entity){
  return base.getBlock().getSlipperiness(base,new UCWBlockAccess(world,false),pos,entity);
}"
40654,"@Override public boolean isFlammable(IBlockAccess world,BlockPos pos,EnumFacing face){
  return rule.fromBlock.isFlammable(new UCWBlockAccess(world),pos,face);
}","@Override public boolean isFlammable(IBlockAccess world,BlockPos pos,EnumFacing face){
  return rule.fromBlock.isFlammable(new UCWBlockAccess(world,false),pos,face);
}"
40655,"@Override public MapColor getMapColor(IBlockState state,IBlockAccess worldIn,BlockPos pos){
  return base.getMapColor(new UCWBlockAccess(worldIn),pos);
}","@Override public MapColor getMapColor(IBlockState state,IBlockAccess worldIn,BlockPos pos){
  return base.getMapColor(new UCWBlockAccess(worldIn,false),pos);
}"
40656,"@Override public int getLightValue(IBlockState state,IBlockAccess world,BlockPos pos){
  return base.getLightValue(new UCWBlockAccess(world),pos);
}","@Override public int getLightValue(IBlockState state,IBlockAccess world,BlockPos pos){
  return base.getLightValue(new UCWBlockAccess(world,false),pos);
}"
40657,"@Override public int getFlammability(IBlockAccess world,BlockPos pos,EnumFacing face){
  return rule.fromBlock.getFlammability(new UCWBlockAccess(world),pos,face);
}","@Override public int getFlammability(IBlockAccess world,BlockPos pos,EnumFacing face){
  return rule.fromBlock.getFlammability(new UCWBlockAccess(world,false),pos,face);
}"
40658,"@Override public int getFireSpreadSpeed(IBlockAccess world,BlockPos pos,EnumFacing face){
  return rule.fromBlock.getFireSpreadSpeed(new UCWBlockAccess(world),pos,face);
}","@Override public int getFireSpreadSpeed(IBlockAccess world,BlockPos pos,EnumFacing face){
  return rule.fromBlock.getFireSpreadSpeed(new UCWBlockAccess(world,false),pos,face);
}"
40659,"@Override public IBlockState getBlockState(BlockPos pos){
  IBlockState state=parent.getBlockState(pos);
  if (state.getBlock() instanceof IUCWBlock) {
    return ((IUCWBlock)state.getBlock()).getBaseState();
  }
 else {
    return state;
  }
}","@Override public IBlockState getBlockState(BlockPos pos){
  IBlockState state=parent.getBlockState(pos);
  if (state.getBlock() instanceof IUCWBlock) {
    if (isThrough) {
      return ((IUCWBlock)state.getBlock()).getThroughState(state);
    }
 else {
      return ((IUCWBlock)state.getBlock()).getBaseState();
    }
  }
 else {
    return state;
  }
}"
40660,"public UCWBlockAccess(IBlockAccess parent){
  this.parent=parent;
}","public UCWBlockAccess(IBlockAccess parent,boolean isThrough){
  this.parent=parent;
  this.isThrough=isThrough;
}"
40661,"@Override public void onResourceManagerReload(IResourceManager resourceManager){
  data.clear();
  jsonCache.clear();
}","@Override public void onResourceManagerReload(IResourceManager resourceManager){
  invalidate();
}"
40662,"@Override public InputStream getInputStream(ResourceLocation location) throws IOException {
  if (!data.containsKey(location)) {
    ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
    String[] str=getStr(location);
    JsonElement element;
    ResourceLocation nonProxiedLoc=new ResourceLocation(str[1],str[2]);
    if (jsonCache.containsKey(nonProxiedLoc)) {
      element=jsonCache.get(nonProxiedLoc);
    }
 else {
      InputStream nonProxied=Minecraft.getMinecraft().getResourceManager().getResource(nonProxiedLoc).getInputStream();
      Reader reader=new InputStreamReader(nonProxied);
      try {
        element=JsonUtils.fromJson(UnlimitedChiselWorks.GSON,reader,JsonElement.class);
      }
 catch (      Exception e) {
        element=null;
        reader.close();
        nonProxied.close();
      }
    }
    if (element != null) {
      JsonElement newElement=parseJsonElement(str,element);
      byte[] b=UnlimitedChiselWorks.GSON.toJson(newElement).getBytes(Charsets.UTF_8);
      byteArrayOutputStream.write(b);
    }
 else {
      InputStream nonProxied=Minecraft.getMinecraft().getResourceManager().getResource(new ResourceLocation(str[1],str[2])).getInputStream();
      while (nonProxied.available() > 0)       byteArrayOutputStream.write(nonProxied.read());
      nonProxied.close();
    }
    byteArrayOutputStream.close();
    byte[] out=byteArrayOutputStream.toByteArray();
    data.put(location,out);
    return new ByteArrayInputStream(out);
  }
 else {
    return new ByteArrayInputStream(data.get(location));
  }
}","@Override public InputStream getInputStream(ResourceLocation location) throws IOException {
  if (!data.containsKey(location)) {
    String[] str=getStr(location);
    JsonElement element;
    ResourceLocation nonProxiedLoc=new ResourceLocation(str[1],str[2]);
    if (jsonCache.containsKey(nonProxiedLoc)) {
      element=jsonCache.get(nonProxiedLoc);
    }
 else {
      InputStream nonProxied=Minecraft.getMinecraft().getResourceManager().getResource(nonProxiedLoc).getInputStream();
      Reader reader=new InputStreamReader(nonProxied);
      try {
        element=JsonUtils.fromJson(UnlimitedChiselWorks.GSON,reader,JsonElement.class);
      }
 catch (      Exception e) {
        element=null;
        reader.close();
        nonProxied.close();
      }
    }
    byte[] out;
    if (element != null) {
      JsonElement newElement=parseJsonElement(str,element);
      out=UnlimitedChiselWorks.GSON.toJson(newElement).getBytes(Charsets.UTF_8);
    }
 else {
      if (data.containsKey(nonProxiedLoc)) {
        out=data.get(nonProxiedLoc);
      }
 else {
        InputStream nonProxied=Minecraft.getMinecraft().getResourceManager().getResource(nonProxiedLoc).getInputStream();
        out=ByteStreams.toByteArray(nonProxied);
        nonProxied.close();
        data.put(nonProxiedLoc,out);
      }
    }
    data.put(location,out);
    return new ByteArrayInputStream(out);
  }
 else {
    return new ByteArrayInputStream(data.get(location));
  }
}"
40663,"@SubscribeEvent @SuppressWarnings(""String_Node_Str"") public void onTextureStitchPre(TextureStitchEvent.Pre event){
  ModelLoader loader;
  Map<ModelResourceLocation,IModel> secretSauce=null;
  BlockModelShapes blockModelShapes=null;
  try {
    Class c=Class.forName(""String_Node_Str"");
    Field f=c.getDeclaredField(""String_Node_Str"");
    f.setAccessible(true);
    Object o=f.get(null);
    f=c.getDeclaredField(""String_Node_Str"");
    f.setAccessible(true);
    loader=(ModelLoader)f.get(o);
    f=ModelLoader.class.getDeclaredField(""String_Node_Str"");
    f.setAccessible(true);
    secretSauce=(Map<ModelResourceLocation,IModel>)f.get(loader);
    f=ReflectionHelper.findField(ModelBakery.class,""String_Node_Str"",""String_Node_Str"");
    f.setAccessible(true);
    blockModelShapes=(BlockModelShapes)f.get(loader);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  UnlimitedChiselWorks.proxy.progressPush(""String_Node_Str"",UnlimitedChiselWorks.BLOCK_RULES.size());
  int cc=0;
  for (  UCWBlockRule rule : UnlimitedChiselWorks.BLOCK_RULES) {
    UnlimitedChiselWorks.proxy.progressStep(String.format(""String_Node_Str"",(++cc) * 100 / UnlimitedChiselWorks.BLOCK_RULES.size()));
    Map<IBlockState,ModelResourceLocation> fromVariants=blockModelShapes.getBlockStateMapper().getVariants(rule.fromBlock);
    Map<IBlockState,ModelResourceLocation> overlayVariants=blockModelShapes.getBlockStateMapper().getVariants(rule.overlayBlock);
    Map<IBlockState,ModelResourceLocation> throughVariants=blockModelShapes.getBlockStateMapper().getVariants(rule.throughBlock);
    Map<IBlockState,ModelResourceLocation> basedUponVariants=blockModelShapes.getBlockStateMapper().getVariants(rule.basedUponBlock);
    for (int i=0; i < rule.from.size(); i++) {
      if (rule.from.get(i) != null) {
        IBlockState state=rule.from.get(i);
        String s2=rule.fromBlock.getRegistryName().toString().trim().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + state.getBlock().getMetaFromState(state);
        IBlockState stateOverlay=rule.overlay.get(i);
        IModel modelFrom=secretSauce.get(fromVariants.get(state));
        IModel modelOverlay=secretSauce.get(overlayVariants.get(stateOverlay));
        IBlockState stateBasedUpon=rule.basedUpon.size() == 1 ? rule.basedUpon.get(0) : rule.basedUpon.get(i);
        IModel modelBasedUpon=secretSauce.get(basedUponVariants.get(stateBasedUpon));
        ResourceLocation textureFrom=UCWMagic.getLocation(state,fromVariants.get(state),modelFrom);
        ResourceLocation textureOverlay=UCWMagic.getLocation(stateOverlay,overlayVariants.get(stateOverlay),modelOverlay);
        ResourceLocation textureBasedUpon=UCWMagic.getLocation(stateBasedUpon,basedUponVariants.get(stateBasedUpon),modelBasedUpon);
        for (int j=0; j < 16; j++) {
          IBlockState throughState=rule.through.get(j);
          if (throughState == null)           continue;
          ModelResourceLocation throughLoc=throughVariants.get(throughState);
          IModel modelThrough=secretSauce.get(throughLoc);
          ImmutableMap.Builder<String,String> textureRemapMap=ImmutableMap.builder();
          for (          ResourceLocation oldLocation : modelThrough.getTextures()) {
            ResourceLocation newLocation=new ResourceLocation(""String_Node_Str"",""String_Node_Str"" + s2 + ""String_Node_Str""+ oldLocation.getResourceDomain()+ ""String_Node_Str""+ oldLocation.getResourcePath().substring(7));
            textureRemapMap.put(oldLocation.toString(),newLocation.toString());
            event.getMap().setTextureEntry(new TextureAtlasSprite(newLocation.toString()){
              @Override public boolean hasCustomLoader(              IResourceManager manager,              ResourceLocation location){
                return true;
              }
              @Override public boolean load(              IResourceManager manager,              ResourceLocation location,              Function<ResourceLocation,TextureAtlasSprite> textureGetter){
                TextureAtlasSprite fromTex=textureGetter.apply(textureFrom);
                TextureAtlasSprite overlayTex=textureGetter.apply(textureOverlay);
                TextureAtlasSprite basedUponTex=textureGetter.apply(textureBasedUpon);
                TextureAtlasSprite locationTex=textureGetter.apply(oldLocation);
                setIconWidth(locationTex.getIconWidth());
                setIconHeight(locationTex.getIconHeight());
                clearFramesTextureData();
                for (int i=0; i < locationTex.getFrameCount(); i++) {
                  int[][] pixels=new int[Minecraft.getMinecraft().gameSettings.mipmapLevels + 1][];
                  pixels[0]=UCWMagic.transform(locationTex,i,fromTex,overlayTex,basedUponTex,rule.mode);
                  framesTextureData.add(pixels);
                }
                return false;
              }
              @Override public java.util.Collection<ResourceLocation> getDependencies(){
                return ImmutableList.of(textureFrom,textureBasedUpon,oldLocation,textureOverlay);
              }
            }
);
          }
          UCWObjectFactory factory=rule.objectFactories.get(i);
          List<String> propertyNames=new ArrayList<>();
          for (          IProperty property : factory.block.getBlockState().getProperties()) {
            propertyNames.add(property.getName());
          }
          IBlockState targetState=factory.block.getStateFromMeta(j);
          Collections.sort(propertyNames);
          String variant=""String_Node_Str"";
          for (          String s : propertyNames) {
            if (variant.length() > 0)             variant+=""String_Node_Str"";
            IProperty property=factory.block.getBlockState().getProperty(s);
            variant+=s + ""String_Node_Str"" + property.getName(targetState.getValue(property));
          }
          ModelResourceLocation targetLoc=new ModelResourceLocation(factory.block.getRegistryName(),variant);
          ModelLoader.setCustomModelResourceLocation(factory.item,j,targetLoc);
          if (throughLoc.getResourceDomain().equals(""String_Node_Str"")) {
            try {
              if (chiselCache == null) {
                InputStream stream=Minecraft.getMinecraft().getResourceManager().getResource(new ResourceLocation(""String_Node_Str"",""String_Node_Str"")).getInputStream();
                InputStreamReader reader=new InputStreamReader(stream);
                chiselCache=JsonUtils.fromJson(UnlimitedChiselWorks.GSON,reader,JsonObject.class);
                reader.close();
                stream.close();
              }
              JsonObject variants=chiselCache.get(""String_Node_Str"").getAsJsonObject();
              if (variants.has(throughLoc.getVariant())) {
                String modelPath=variants.get(throughLoc.getVariant()).getAsJsonObject().get(""String_Node_Str"").getAsString();
                modelPath=modelPath.replaceFirst(""String_Node_Str"",""String_Node_Str"" + s2 + ""String_Node_Str"");
                secretSauce.put(targetLoc,ModelLoaderRegistry.getModel(new ModelResourceLocation(modelPath)));
              }
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
 else {
            secretSauce.put(targetLoc,modelThrough.retexture(textureRemapMap.build()));
          }
        }
      }
    }
  }
  UnlimitedChiselWorks.proxy.progressPop();
}","@SubscribeEvent @SuppressWarnings(""String_Node_Str"") public void onTextureStitchPre(TextureStitchEvent.Pre event){
  ModelLoader loader;
  Map<ModelResourceLocation,IModel> secretSauce=null;
  BlockModelShapes blockModelShapes=null;
  try {
    Class c=Class.forName(""String_Node_Str"");
    Field f=c.getDeclaredField(""String_Node_Str"");
    f.setAccessible(true);
    Object o=f.get(null);
    f=c.getDeclaredField(""String_Node_Str"");
    f.setAccessible(true);
    loader=(ModelLoader)f.get(o);
    f=ModelLoader.class.getDeclaredField(""String_Node_Str"");
    f.setAccessible(true);
    secretSauce=(Map<ModelResourceLocation,IModel>)f.get(loader);
    f=ReflectionHelper.findField(ModelBakery.class,""String_Node_Str"",""String_Node_Str"");
    f.setAccessible(true);
    blockModelShapes=(BlockModelShapes)f.get(loader);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  UnlimitedChiselWorks.proxy.progressPush(""String_Node_Str"",UnlimitedChiselWorks.BLOCK_RULES.size());
  int cc=0;
  for (  UCWBlockRule rule : UnlimitedChiselWorks.BLOCK_RULES) {
    UnlimitedChiselWorks.proxy.progressStep(String.format(""String_Node_Str"",(++cc) * 100 / UnlimitedChiselWorks.BLOCK_RULES.size()));
    Map<IBlockState,ModelResourceLocation> fromVariants=blockModelShapes.getBlockStateMapper().getVariants(rule.fromBlock);
    Map<IBlockState,ModelResourceLocation> overlayVariants=blockModelShapes.getBlockStateMapper().getVariants(rule.overlayBlock);
    Map<IBlockState,ModelResourceLocation> throughVariants=blockModelShapes.getBlockStateMapper().getVariants(rule.throughBlock);
    Map<IBlockState,ModelResourceLocation> basedUponVariants=blockModelShapes.getBlockStateMapper().getVariants(rule.basedUponBlock);
    for (int i=0; i < rule.from.size(); i++) {
      if (rule.from.get(i) != null) {
        IBlockState state=rule.from.get(i);
        String s2=rule.fromBlock.getRegistryName().toString().trim().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + state.getBlock().getMetaFromState(state);
        IBlockState stateOverlay=rule.overlay.get(i);
        IModel modelFrom=secretSauce.get(fromVariants.get(state));
        IModel modelOverlay=secretSauce.get(overlayVariants.get(stateOverlay));
        IBlockState stateBasedUpon=rule.basedUpon.size() == 1 ? rule.basedUpon.get(0) : rule.basedUpon.get(i);
        IModel modelBasedUpon=secretSauce.get(basedUponVariants.get(stateBasedUpon));
        ResourceLocation textureFrom=UCWMagic.getLocation(state,fromVariants.get(state),modelFrom);
        ResourceLocation textureOverlay=UCWMagic.getLocation(stateOverlay,overlayVariants.get(stateOverlay),modelOverlay);
        ResourceLocation textureBasedUpon=UCWMagic.getLocation(stateBasedUpon,basedUponVariants.get(stateBasedUpon),modelBasedUpon);
        for (int j=0; j < 16; j++) {
          IBlockState throughState=rule.through.get(j);
          if (throughState == null)           continue;
          ModelResourceLocation throughLoc=throughVariants.get(throughState);
          IModel modelThrough=secretSauce.get(throughLoc);
          ImmutableMap.Builder<String,String> textureRemapMap=ImmutableMap.builder();
          for (          ResourceLocation oldLocation : modelThrough.getTextures()) {
            ResourceLocation newLocation=new ResourceLocation(""String_Node_Str"",""String_Node_Str"" + s2 + ""String_Node_Str""+ oldLocation.getResourceDomain()+ ""String_Node_Str""+ oldLocation.getResourcePath().substring(7));
            textureRemapMap.put(oldLocation.toString(),newLocation.toString());
            event.getMap().setTextureEntry(new TextureAtlasSprite(newLocation.toString()){
              @Override public boolean hasCustomLoader(              IResourceManager manager,              ResourceLocation location){
                return true;
              }
              @Override public boolean load(              IResourceManager manager,              ResourceLocation location,              Function<ResourceLocation,TextureAtlasSprite> textureGetter){
                TextureAtlasSprite fromTex=textureGetter.apply(textureFrom);
                TextureAtlasSprite overlayTex=textureGetter.apply(textureOverlay);
                TextureAtlasSprite basedUponTex=textureGetter.apply(textureBasedUpon);
                TextureAtlasSprite locationTex=textureGetter.apply(oldLocation);
                setIconWidth(locationTex.getIconWidth());
                setIconHeight(locationTex.getIconHeight());
                clearFramesTextureData();
                for (int i=0; i < locationTex.getFrameCount(); i++) {
                  int[][] pixels=new int[Minecraft.getMinecraft().gameSettings.mipmapLevels + 1][];
                  pixels[0]=UCWMagic.transform(locationTex,i,fromTex,overlayTex,basedUponTex,rule.mode);
                  framesTextureData.add(pixels);
                }
                return false;
              }
              @Override public java.util.Collection<ResourceLocation> getDependencies(){
                return ImmutableList.of(textureFrom,textureBasedUpon,oldLocation,textureOverlay);
              }
            }
);
          }
          UCWObjectFactory factory=rule.objectFactories.get(i);
          List<String> propertyNames=new ArrayList<>();
          for (          IProperty property : factory.block.getBlockState().getProperties()) {
            propertyNames.add(property.getName());
          }
          IBlockState targetState=factory.block.getStateFromMeta(j);
          Collections.sort(propertyNames);
          StringBuilder variant=new StringBuilder();
          for (          String s : propertyNames) {
            if (variant.length() > 0)             variant.append(""String_Node_Str"");
            IProperty property=factory.block.getBlockState().getProperty(s);
            variant.append(s).append(""String_Node_Str"").append(property.getName(targetState.getValue(property)));
          }
          ModelResourceLocation targetLoc=new ModelResourceLocation(factory.block.getRegistryName(),variant.toString());
          ModelLoader.setCustomModelResourceLocation(factory.item,j,targetLoc);
          if (throughLoc.getResourceDomain().equals(""String_Node_Str"")) {
            try {
              if (chiselCache == null) {
                InputStream stream=Minecraft.getMinecraft().getResourceManager().getResource(new ResourceLocation(""String_Node_Str"",""String_Node_Str"")).getInputStream();
                InputStreamReader reader=new InputStreamReader(stream);
                chiselCache=JsonUtils.fromJson(UnlimitedChiselWorks.GSON,reader,JsonObject.class);
                reader.close();
                stream.close();
              }
              JsonObject variants=chiselCache.get(""String_Node_Str"").getAsJsonObject();
              if (variants.has(throughLoc.getVariant())) {
                String modelPath=variants.get(throughLoc.getVariant()).getAsJsonObject().get(""String_Node_Str"").getAsString();
                modelPath=modelPath.replaceFirst(""String_Node_Str"",""String_Node_Str"" + s2 + ""String_Node_Str"");
                secretSauce.put(targetLoc,ModelLoaderRegistry.getModel(new ModelResourceLocation(modelPath)));
              }
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
 else {
            secretSauce.put(targetLoc,modelThrough.retexture(textureRemapMap.build()));
          }
        }
      }
    }
  }
  UnlimitedChiselWorks.proxy.progressPop();
}"
40664,"private void proposeRule(Path p) throws IOException {
  if (Files.isDirectory(p)) {
    for (    Path pp : Files.newDirectoryStream(p)) {
      try {
        proposeRule(pp);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
 else {
    BufferedReader reader=Files.newBufferedReader(p,Charsets.UTF_8);
    try {
      JsonObject json=JsonUtils.fromJson(GSON,reader,JsonObject.class);
      if (json != null) {
        if (json.has(""String_Node_Str"")) {
          for (          JsonElement element : json.get(""String_Node_Str"").getAsJsonArray()) {
            if (element.isJsonObject()) {
              try {
                UCWBlockRule rule=new UCWBlockRule(element.getAsJsonObject());
                if (rule.isValid()) {
                  String fbName=rule.fromBlock.getRegistryName().toString();
                  if (!C_ENABLED.containsKey(fbName)) {
                    Property prop=new Property(fbName,""String_Node_Str"",Property.Type.BOOLEAN);
                    C_ENABLED.put(fbName,prop);
                  }
                  if (C_ENABLED.get(fbName).getBoolean()) {
                    if (BLOCK_RULES.contains(rule)) {
                      LOGGER.warn(""String_Node_Str"" + rule);
                    }
 else {
                      BLOCK_RULES.add(rule);
                    }
                  }
                }
              }
 catch (              Exception e) {
                e.printStackTrace();
              }
            }
          }
        }
        if (json.has(""String_Node_Str"")) {
          for (          JsonElement element : json.get(""String_Node_Str"").getAsJsonArray()) {
            if (element.isJsonObject()) {
              try {
                UCWGroupRule rule=new UCWGroupRule(element.getAsJsonObject());
                String fbName=rule.groupName;
                if (GROUP_RULE_NAMES.contains(fbName)) {
                  LOGGER.warn(""String_Node_Str"" + fbName + ""String_Node_Str"");
                }
 else {
                  GROUP_RULE_NAMES.add(fbName);
                }
                if (!C_ENABLED_GROUPS.containsKey(fbName)) {
                  Property prop=new Property(fbName,""String_Node_Str"",Property.Type.BOOLEAN);
                  C_ENABLED_GROUPS.put(fbName,prop);
                }
                if (C_ENABLED_GROUPS.get(fbName).getBoolean()) {
                  GROUP_RULES.add(rule);
                }
              }
 catch (              Exception e) {
                e.printStackTrace();
              }
            }
          }
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","private void proposeRule(Path p) throws IOException {
  if (Files.isDirectory(p)) {
    for (    Path pp : Files.newDirectoryStream(p)) {
      try {
        proposeRule(pp);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
 else {
    BufferedReader reader=Files.newBufferedReader(p,Charsets.UTF_8);
    try {
      JsonObject json=JsonUtils.fromJson(GSON,reader,JsonObject.class);
      if (json != null) {
        if (json.has(""String_Node_Str"")) {
          for (          JsonElement element : json.get(""String_Node_Str"").getAsJsonArray()) {
            if (element.isJsonObject()) {
              try {
                UCWBlockRule rule=new UCWBlockRule(element.getAsJsonObject());
                if (rule.isValid()) {
                  String fbName=rule.fromBlock.getRegistryName().toString();
                  if (!C_ENABLED.containsKey(fbName)) {
                    Property prop=new Property(fbName,""String_Node_Str"",Property.Type.BOOLEAN);
                    C_ENABLED.put(fbName,prop);
                  }
                  if (C_ENABLED.get(fbName).getBoolean()) {
                    if (BLOCK_RULES.contains(rule)) {
                      LOGGER.warn(""String_Node_Str"" + rule);
                    }
 else {
                      BLOCK_RULES.add(rule);
                    }
                  }
                }
              }
 catch (              Exception e) {
                e.printStackTrace();
              }
            }
          }
        }
        if (json.has(""String_Node_Str"")) {
          for (          JsonElement element : json.get(""String_Node_Str"").getAsJsonArray()) {
            if (element.isJsonObject()) {
              try {
                UCWGroupRule rule=new UCWGroupRule(element.getAsJsonObject());
                String fbName=rule.groupName;
                if (GROUP_RULE_NAMES.contains(fbName)) {
                  LOGGER.warn(""String_Node_Str"" + fbName + ""String_Node_Str"");
                }
 else {
                  GROUP_RULE_NAMES.add(fbName);
                }
                if (!C_ENABLED_GROUPS.containsKey(fbName)) {
                  Property prop=new Property(fbName,""String_Node_Str"",Property.Type.BOOLEAN);
                  C_ENABLED_GROUPS.put(fbName,prop);
                }
                if (C_ENABLED_GROUPS.get(fbName).getBoolean()) {
                  GROUP_RULES.add(rule);
                }
              }
 catch (              Exception e) {
                e.printStackTrace();
              }
            }
          }
        }
      }
    }
 catch (    Exception e) {
      UnlimitedChiselWorks.LOGGER.error(""String_Node_Str"" + p.toString(),e);
    }
  }
}"
40665,"@SubscribeEvent @SuppressWarnings(""String_Node_Str"") public void onTextureStitchPre(TextureStitchEvent.Pre event){
  ModelLoader loader;
  Map<ModelResourceLocation,IModel> secretSauce=null;
  BlockModelShapes blockModelShapes=null;
  try {
    Class c=Class.forName(""String_Node_Str"");
    Field f=c.getDeclaredField(""String_Node_Str"");
    f.setAccessible(true);
    Object o=f.get(null);
    f=c.getDeclaredField(""String_Node_Str"");
    f.setAccessible(true);
    loader=(ModelLoader)f.get(o);
    f=ModelLoader.class.getDeclaredField(""String_Node_Str"");
    f.setAccessible(true);
    secretSauce=(Map<ModelResourceLocation,IModel>)f.get(loader);
    f=ReflectionHelper.findField(ModelBakery.class,""String_Node_Str"",""String_Node_Str"");
    f.setAccessible(true);
    blockModelShapes=(BlockModelShapes)f.get(loader);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  UnlimitedChiselWorks.proxy.progressPush(""String_Node_Str"",UnlimitedChiselWorks.BLOCK_RULES.size());
  int cc=0;
  for (  UCWBlockRule rule : UnlimitedChiselWorks.BLOCK_RULES) {
    UnlimitedChiselWorks.proxy.progressStep(String.format(""String_Node_Str"",(++cc) * 100 / UnlimitedChiselWorks.BLOCK_RULES.size()));
    Map<IBlockState,ModelResourceLocation> fromVariants=blockModelShapes.getBlockStateMapper().getVariants(rule.fromBlock);
    Map<IBlockState,ModelResourceLocation> overlayVariants=blockModelShapes.getBlockStateMapper().getVariants(rule.overlayBlock);
    Map<IBlockState,ModelResourceLocation> throughVariants=blockModelShapes.getBlockStateMapper().getVariants(rule.throughBlock);
    Map<IBlockState,ModelResourceLocation> basedUponVariants=blockModelShapes.getBlockStateMapper().getVariants(rule.basedUponBlock);
    for (int i=0; i < rule.from.size(); i++) {
      if (rule.from.get(i) != null) {
        IBlockState state=rule.from.get(i);
        String s2=rule.fromBlock.getRegistryName().toString().trim().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + i;
        IBlockState stateOverlay=rule.overlay.get(i);
        IModel modelFrom=secretSauce.get(fromVariants.get(state));
        IModel modelOverlay=secretSauce.get(overlayVariants.get(stateOverlay));
        IBlockState stateBasedUpon=rule.basedUpon.size() == 1 ? rule.basedUpon.get(0) : rule.basedUpon.get(i);
        IModel modelBasedUpon=secretSauce.get(basedUponVariants.get(stateBasedUpon));
        ResourceLocation textureFrom=UCWMagic.getLocation(state,fromVariants.get(state),modelFrom);
        ResourceLocation textureOverlay=UCWMagic.getLocation(stateOverlay,overlayVariants.get(stateOverlay),modelOverlay);
        ResourceLocation textureBasedUpon=UCWMagic.getLocation(stateBasedUpon,basedUponVariants.get(stateBasedUpon),modelBasedUpon);
        for (int j=0; j < 16; j++) {
          IBlockState throughState=rule.through.get(j);
          if (throughState == null)           continue;
          ModelResourceLocation throughLoc=throughVariants.get(throughState);
          IModel modelThrough=secretSauce.get(throughLoc);
          ImmutableMap.Builder<String,String> textureRemapMap=ImmutableMap.builder();
          for (          ResourceLocation oldLocation : modelThrough.getTextures()) {
            ResourceLocation newLocation=new ResourceLocation(""String_Node_Str"",""String_Node_Str"" + s2 + ""String_Node_Str""+ oldLocation.getResourceDomain()+ ""String_Node_Str""+ oldLocation.getResourcePath().substring(7));
            textureRemapMap.put(oldLocation.toString(),newLocation.toString());
            event.getMap().setTextureEntry(new TextureAtlasSprite(newLocation.toString()){
              @Override public boolean hasCustomLoader(              IResourceManager manager,              ResourceLocation location){
                return true;
              }
              @Override public boolean load(              IResourceManager manager,              ResourceLocation location,              Function<ResourceLocation,TextureAtlasSprite> textureGetter){
                TextureAtlasSprite fromTex=textureGetter.apply(textureFrom);
                TextureAtlasSprite overlayTex=textureGetter.apply(textureOverlay);
                TextureAtlasSprite basedUponTex=textureGetter.apply(textureBasedUpon);
                TextureAtlasSprite locationTex=textureGetter.apply(oldLocation);
                setIconWidth(locationTex.getIconWidth());
                setIconHeight(locationTex.getIconHeight());
                clearFramesTextureData();
                for (int i=0; i < locationTex.getFrameCount(); i++) {
                  int[][] pixels=new int[Minecraft.getMinecraft().gameSettings.mipmapLevels + 1][];
                  pixels[0]=UCWMagic.transform(locationTex,i,fromTex,overlayTex,basedUponTex,rule.mode);
                  framesTextureData.add(pixels);
                }
                return false;
              }
              @Override public java.util.Collection<ResourceLocation> getDependencies(){
                return ImmutableList.of(textureFrom,textureBasedUpon,oldLocation,textureOverlay);
              }
            }
);
          }
          UCWObjectFactory factory=rule.objectFactories.get(i);
          List<String> propertyNames=new ArrayList<>();
          for (          IProperty property : factory.block.getBlockState().getProperties()) {
            propertyNames.add(property.getName());
          }
          IBlockState targetState=factory.block.getStateFromMeta(j);
          Collections.sort(propertyNames);
          String variant=""String_Node_Str"";
          for (          String s : propertyNames) {
            if (variant.length() > 0)             variant+=""String_Node_Str"";
            IProperty property=factory.block.getBlockState().getProperty(s);
            variant+=s + ""String_Node_Str"" + property.getName(targetState.getValue(property));
          }
          ModelResourceLocation targetLoc=new ModelResourceLocation(factory.block.getRegistryName(),variant);
          ModelLoader.setCustomModelResourceLocation(factory.item,j,targetLoc);
          if (throughLoc.getResourceDomain().equals(""String_Node_Str"")) {
            try {
              if (chiselCache == null) {
                InputStream stream=Minecraft.getMinecraft().getResourceManager().getResource(new ResourceLocation(""String_Node_Str"",""String_Node_Str"")).getInputStream();
                InputStreamReader reader=new InputStreamReader(stream);
                chiselCache=JsonUtils.fromJson(UnlimitedChiselWorks.GSON,reader,JsonObject.class);
                reader.close();
                stream.close();
              }
              JsonObject variants=chiselCache.get(""String_Node_Str"").getAsJsonObject();
              if (variants.has(throughLoc.getVariant())) {
                String modelPath=variants.get(throughLoc.getVariant()).getAsJsonObject().get(""String_Node_Str"").getAsString();
                modelPath=modelPath.replaceFirst(""String_Node_Str"",""String_Node_Str"" + s2 + ""String_Node_Str"");
                secretSauce.put(targetLoc,ModelLoaderRegistry.getModel(new ModelResourceLocation(modelPath)));
              }
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
 else {
            secretSauce.put(targetLoc,modelThrough.retexture(textureRemapMap.build()));
          }
        }
      }
    }
  }
  UnlimitedChiselWorks.proxy.progressPop();
}","@SubscribeEvent @SuppressWarnings(""String_Node_Str"") public void onTextureStitchPre(TextureStitchEvent.Pre event){
  ModelLoader loader;
  Map<ModelResourceLocation,IModel> secretSauce=null;
  BlockModelShapes blockModelShapes=null;
  try {
    Class c=Class.forName(""String_Node_Str"");
    Field f=c.getDeclaredField(""String_Node_Str"");
    f.setAccessible(true);
    Object o=f.get(null);
    f=c.getDeclaredField(""String_Node_Str"");
    f.setAccessible(true);
    loader=(ModelLoader)f.get(o);
    f=ModelLoader.class.getDeclaredField(""String_Node_Str"");
    f.setAccessible(true);
    secretSauce=(Map<ModelResourceLocation,IModel>)f.get(loader);
    f=ReflectionHelper.findField(ModelBakery.class,""String_Node_Str"",""String_Node_Str"");
    f.setAccessible(true);
    blockModelShapes=(BlockModelShapes)f.get(loader);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  UnlimitedChiselWorks.proxy.progressPush(""String_Node_Str"",UnlimitedChiselWorks.BLOCK_RULES.size());
  int cc=0;
  for (  UCWBlockRule rule : UnlimitedChiselWorks.BLOCK_RULES) {
    UnlimitedChiselWorks.proxy.progressStep(String.format(""String_Node_Str"",(++cc) * 100 / UnlimitedChiselWorks.BLOCK_RULES.size()));
    Map<IBlockState,ModelResourceLocation> fromVariants=blockModelShapes.getBlockStateMapper().getVariants(rule.fromBlock);
    Map<IBlockState,ModelResourceLocation> overlayVariants=blockModelShapes.getBlockStateMapper().getVariants(rule.overlayBlock);
    Map<IBlockState,ModelResourceLocation> throughVariants=blockModelShapes.getBlockStateMapper().getVariants(rule.throughBlock);
    Map<IBlockState,ModelResourceLocation> basedUponVariants=blockModelShapes.getBlockStateMapper().getVariants(rule.basedUponBlock);
    for (int i=0; i < rule.from.size(); i++) {
      if (rule.from.get(i) != null) {
        IBlockState state=rule.from.get(i);
        String s2=rule.fromBlock.getRegistryName().toString().trim().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + state.getBlock().getMetaFromState(state);
        IBlockState stateOverlay=rule.overlay.get(i);
        IModel modelFrom=secretSauce.get(fromVariants.get(state));
        IModel modelOverlay=secretSauce.get(overlayVariants.get(stateOverlay));
        IBlockState stateBasedUpon=rule.basedUpon.size() == 1 ? rule.basedUpon.get(0) : rule.basedUpon.get(i);
        IModel modelBasedUpon=secretSauce.get(basedUponVariants.get(stateBasedUpon));
        ResourceLocation textureFrom=UCWMagic.getLocation(state,fromVariants.get(state),modelFrom);
        ResourceLocation textureOverlay=UCWMagic.getLocation(stateOverlay,overlayVariants.get(stateOverlay),modelOverlay);
        ResourceLocation textureBasedUpon=UCWMagic.getLocation(stateBasedUpon,basedUponVariants.get(stateBasedUpon),modelBasedUpon);
        for (int j=0; j < 16; j++) {
          IBlockState throughState=rule.through.get(j);
          if (throughState == null)           continue;
          ModelResourceLocation throughLoc=throughVariants.get(throughState);
          IModel modelThrough=secretSauce.get(throughLoc);
          ImmutableMap.Builder<String,String> textureRemapMap=ImmutableMap.builder();
          for (          ResourceLocation oldLocation : modelThrough.getTextures()) {
            ResourceLocation newLocation=new ResourceLocation(""String_Node_Str"",""String_Node_Str"" + s2 + ""String_Node_Str""+ oldLocation.getResourceDomain()+ ""String_Node_Str""+ oldLocation.getResourcePath().substring(7));
            textureRemapMap.put(oldLocation.toString(),newLocation.toString());
            event.getMap().setTextureEntry(new TextureAtlasSprite(newLocation.toString()){
              @Override public boolean hasCustomLoader(              IResourceManager manager,              ResourceLocation location){
                return true;
              }
              @Override public boolean load(              IResourceManager manager,              ResourceLocation location,              Function<ResourceLocation,TextureAtlasSprite> textureGetter){
                TextureAtlasSprite fromTex=textureGetter.apply(textureFrom);
                TextureAtlasSprite overlayTex=textureGetter.apply(textureOverlay);
                TextureAtlasSprite basedUponTex=textureGetter.apply(textureBasedUpon);
                TextureAtlasSprite locationTex=textureGetter.apply(oldLocation);
                setIconWidth(locationTex.getIconWidth());
                setIconHeight(locationTex.getIconHeight());
                clearFramesTextureData();
                for (int i=0; i < locationTex.getFrameCount(); i++) {
                  int[][] pixels=new int[Minecraft.getMinecraft().gameSettings.mipmapLevels + 1][];
                  pixels[0]=UCWMagic.transform(locationTex,i,fromTex,overlayTex,basedUponTex,rule.mode);
                  framesTextureData.add(pixels);
                }
                return false;
              }
              @Override public java.util.Collection<ResourceLocation> getDependencies(){
                return ImmutableList.of(textureFrom,textureBasedUpon,oldLocation,textureOverlay);
              }
            }
);
          }
          UCWObjectFactory factory=rule.objectFactories.get(i);
          List<String> propertyNames=new ArrayList<>();
          for (          IProperty property : factory.block.getBlockState().getProperties()) {
            propertyNames.add(property.getName());
          }
          IBlockState targetState=factory.block.getStateFromMeta(j);
          Collections.sort(propertyNames);
          String variant=""String_Node_Str"";
          for (          String s : propertyNames) {
            if (variant.length() > 0)             variant+=""String_Node_Str"";
            IProperty property=factory.block.getBlockState().getProperty(s);
            variant+=s + ""String_Node_Str"" + property.getName(targetState.getValue(property));
          }
          ModelResourceLocation targetLoc=new ModelResourceLocation(factory.block.getRegistryName(),variant);
          ModelLoader.setCustomModelResourceLocation(factory.item,j,targetLoc);
          if (throughLoc.getResourceDomain().equals(""String_Node_Str"")) {
            try {
              if (chiselCache == null) {
                InputStream stream=Minecraft.getMinecraft().getResourceManager().getResource(new ResourceLocation(""String_Node_Str"",""String_Node_Str"")).getInputStream();
                InputStreamReader reader=new InputStreamReader(stream);
                chiselCache=JsonUtils.fromJson(UnlimitedChiselWorks.GSON,reader,JsonObject.class);
                reader.close();
                stream.close();
              }
              JsonObject variants=chiselCache.get(""String_Node_Str"").getAsJsonObject();
              if (variants.has(throughLoc.getVariant())) {
                String modelPath=variants.get(throughLoc.getVariant()).getAsJsonObject().get(""String_Node_Str"").getAsString();
                modelPath=modelPath.replaceFirst(""String_Node_Str"",""String_Node_Str"" + s2 + ""String_Node_Str"");
                secretSauce.put(targetLoc,ModelLoaderRegistry.getModel(new ModelResourceLocation(modelPath)));
              }
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
 else {
            secretSauce.put(targetLoc,modelThrough.retexture(textureRemapMap.build()));
          }
        }
      }
    }
  }
  UnlimitedChiselWorks.proxy.progressPop();
}"
40666,"@Override public void execute(MinecraftServer server,ICommandSender sender,String[] args) throws CommandException {
  if (sender instanceof EntityPlayerMP) {
    World world=sender.getEntityWorld();
    BlockPos pos=sender.getPosition();
    for (    UCWBlockRule rule : UnlimitedChiselWorks.BLOCK_RULES) {
      if (args.length >= 1 && !rule.fromBlock.getRegistryName().toString().toLowerCase().startsWith(args[0].toLowerCase())) {
        continue;
      }
      for (      UCWObjectFactory factory : rule.objectFactories.valueCollection()) {
        BlockPos.MutableBlockPos posCopy=new BlockPos.MutableBlockPos(pos);
        NonNullList<ItemStack> stackList=NonNullList.create();
        factory.item.getSubItems(CreativeTabs.SEARCH,stackList);
        world.setBlockState(posCopy,factory.base);
        posCopy.move(EnumFacing.EAST);
        for (        ItemStack stack : stackList) {
          try {
            world.setBlockState(posCopy,factory.block.getStateFromMeta(stack.getMetadata()));
            posCopy.move(EnumFacing.EAST);
          }
 catch (          Exception e) {
          }
        }
        pos=pos.south();
      }
    }
  }
}","@Override public void execute(MinecraftServer server,ICommandSender sender,String[] args) throws CommandException {
  if (sender instanceof EntityPlayerMP) {
    World world=sender.getEntityWorld();
    BlockPos pos=sender.getPosition();
    for (    UCWBlockRule rule : UnlimitedChiselWorks.BLOCK_RULES) {
      if (args.length >= 1 && !rule.fromBlock.getRegistryName().toString().toLowerCase().startsWith(args[0].toLowerCase())) {
        continue;
      }
      for (      UCWObjectFactory factory : rule.objectFactories.valueCollection()) {
        NonNullList<ItemStack> stackList=NonNullList.create();
        factory.item.getSubItems(CreativeTabs.SEARCH,stackList);
        world.setBlockState(pos,factory.base);
        BlockPos posCopy=pos.offset(EnumFacing.EAST);
        for (        ItemStack stack : stackList) {
          try {
            world.setBlockState(posCopy,factory.block.getStateFromMeta(stack.getMetadata()));
            posCopy=posCopy.offset(EnumFacing.EAST);
          }
 catch (          Exception e) {
          }
        }
        pos=pos.south();
      }
    }
  }
}"
40667,"public static ResourceLocation getLocation(IBlockState state,ModelResourceLocation location,IModel model){
  String domain=location.getResourceDomain();
  if (""String_Node_Str"".equals(domain)) {
    String[] name=state.getBlock().getRegistryName().getResourcePath().split(""String_Node_Str"",2);
    IProperty variantProp=state.getBlock().getBlockState().getProperty(""String_Node_Str"");
    if (variantProp != null) {
      String variant=variantProp.getName(state.getValue(variantProp));
      if (name.length == 2 && (""String_Node_Str"".equals(name[0]))) {
        return new ResourceLocation(""String_Node_Str"",""String_Node_Str"" + name[0] + ""String_Node_Str""+ variant);
      }
    }
  }
 else   if (""String_Node_Str"".equals(domain)) {
    String[] name=state.getBlock().getRegistryName().getResourcePath().split(""String_Node_Str"",2);
    IProperty variantProp=state.getBlock().getBlockState().getProperty(""String_Node_Str"");
    if (variantProp != null) {
      String variant=variantProp.getName(state.getValue(variantProp));
      if (name.length == 2 && (""String_Node_Str"".equals(name[0]))) {
        return new ResourceLocation(""String_Node_Str"",""String_Node_Str"" + variant);
      }
    }
  }
  return model.getTextures().iterator().next();
}","public static ResourceLocation getLocation(IBlockState state,ModelResourceLocation location,IModel model){
  String domain=location.getResourceDomain();
  if (""String_Node_Str"".equals(domain)) {
    String[] name=state.getBlock().getRegistryName().getResourcePath().split(""String_Node_Str"",2);
    IProperty variantProp=state.getBlock().getBlockState().getProperty(""String_Node_Str"");
    if (variantProp != null) {
      String variant=variantProp.getName(state.getValue(variantProp));
      if (name.length == 2 && (""String_Node_Str"".equals(name[0]))) {
        return new ResourceLocation(""String_Node_Str"",""String_Node_Str"" + name[0] + ""String_Node_Str""+ variant);
      }
    }
  }
 else   if (""String_Node_Str"".equals(domain)) {
    String[] name=state.getBlock().getRegistryName().getResourcePath().split(""String_Node_Str"",2);
    IProperty variantProp=state.getBlock().getBlockState().getProperty(""String_Node_Str"");
    if (variantProp != null) {
      String variant=variantProp.getName(state.getValue(variantProp));
      if (name.length == 2 && (""String_Node_Str"".equals(name[0]))) {
        return new ResourceLocation(""String_Node_Str"",""String_Node_Str"" + variant);
      }
    }
  }
  if (model.getTextures().size() == 1) {
    return model.getTextures().iterator().next();
  }
 else {
    try {
      IBakedModel bakedModel=model.bake(TRSRTransformation.identity(),DefaultVertexFormats.ITEM,FakeSprite::new);
      Collection<BakedQuad> quadList=bakedModel.getQuads(state,EnumFacing.NORTH,0);
      if (quadList.size() > 0) {
        return new ResourceLocation(quadList.iterator().next().getSprite().getIconName());
      }
    }
 catch (    Exception e) {
    }
    return model.getTextures().iterator().next();
  }
}"
40668,"public boolean isValid(){
  return from.size() > 0 && through.size() > 0 && (basedUpon.size() == 1 || basedUpon.size() == through.size());
}","public boolean isValid(){
  return from.size() > 0 && through.size() > 0 && (basedUpon.size() == 1 || basedUpon.size() == through.size()) && fromBlock != Blocks.AIR && throughBlock != Blocks.AIR && basedUponBlock != Blocks.AIR;
}"
40669,"@EventHandler public void postInit(FMLInitializationEvent event){
  for (  UCWBlockRule rule : BLOCK_RULES) {
    ItemStack stack=new ItemStack(rule.fromBlock,1,OreDictionary.WILDCARD_VALUE);
    int[] ids=OreDictionary.getOreIDs(stack);
    if (ids.length > 0) {
      for (      UCWObjectFactory factory : rule.objectFactories.valueCollection()) {
        for (        int i : ids) {
          OreDictionary.registerOre(OreDictionary.getOreName(i),factory.block);
        }
      }
    }
  }
}","@EventHandler public void postInit(FMLInitializationEvent event){
  for (  UCWBlockRule rule : BLOCK_RULES) {
    ItemStack stack=new ItemStack(rule.fromBlock,1,OreDictionary.WILDCARD_VALUE);
    if (!stack.isEmpty()) {
      int[] ids=OreDictionary.getOreIDs(stack);
      if (ids.length > 0) {
        for (        UCWObjectFactory factory : rule.objectFactories.valueCollection()) {
          for (          int i : ids) {
            OreDictionary.registerOre(OreDictionary.getOreName(i),factory.block);
          }
        }
      }
    }
  }
}"
40670,"public boolean isValid(){
  return from.size() > 0 && through.size() > 0 && (basedUpon.size() == 1 || basedUpon.size() == through.size()) && fromBlock != Blocks.AIR && throughBlock != Blocks.AIR && basedUponBlock != Blocks.AIR;
}","public boolean isValid(){
  return !from.isEmpty() && !overlay.isEmpty() && !through.isEmpty()&& (basedUpon.size() == 1 || basedUpon.size() == through.size())&& fromBlock != Blocks.AIR && overlayBlock != Blocks.AIR && throughBlock != Blocks.AIR && basedUponBlock != Blocks.AIR;
}"
40671,"@Override @SideOnly(Side.CLIENT) public void addInformation(ItemStack stack,@Nullable World worldIn,List<String> tooltip,ITooltipFlag flagIn){
  getItemThrough().addInformation(UCWMagic.copyChangeItem(stack,getItemThrough()),worldIn,tooltip,flagIn);
}","@Override @SideOnly(Side.CLIENT) public void addInformation(ItemStack stack,@Nullable World worldIn,List<String> tooltip,ITooltipFlag flagIn){
  getItemThrough().addInformation(UCWUtils.copyChangeItem(stack,getItemThrough()),worldIn,tooltip,flagIn);
}"
40672,"@Override public void getSubItems(CreativeTabs tab,NonNullList<ItemStack> items){
  Item origItem=getItemThrough();
  NonNullList<ItemStack> proxyList=NonNullList.create();
  origItem.getSubItems(tab,proxyList);
  for (  ItemStack stack : proxyList) {
    if (stack.getItem() == origItem) {
      if (rule.throughBlock.getRegistryName().toString().equals(""String_Node_Str"") && stack.getItemDamage() == 9) {
        continue;
      }
      items.add(UCWMagic.copyChangeItem(stack,this));
    }
  }
}","@Override public void getSubItems(CreativeTabs tab,NonNullList<ItemStack> items){
  Item origItem=getItemThrough();
  NonNullList<ItemStack> proxyList=NonNullList.create();
  origItem.getSubItems(tab,proxyList);
  for (  ItemStack stack : proxyList) {
    if (stack.getItem() == origItem) {
      if (rule.throughBlock.getRegistryName().toString().equals(""String_Node_Str"") && stack.getItemDamage() == 9) {
        continue;
      }
      items.add(UCWUtils.copyChangeItem(stack,this));
    }
  }
}"
40673,"@SubscribeEvent @SuppressWarnings(""String_Node_Str"") public void onTextureStitchPre(TextureStitchEvent.Pre event){
  ModelLoader loader;
  Map<ModelResourceLocation,IModel> secretSauce=null;
  BlockModelShapes blockModelShapes=null;
  try {
    Class c=Class.forName(""String_Node_Str"");
    Field f=c.getDeclaredField(""String_Node_Str"");
    f.setAccessible(true);
    Object o=f.get(null);
    f=c.getDeclaredField(""String_Node_Str"");
    f.setAccessible(true);
    loader=(ModelLoader)f.get(o);
    f=ModelLoader.class.getDeclaredField(""String_Node_Str"");
    f.setAccessible(true);
    secretSauce=(Map<ModelResourceLocation,IModel>)f.get(loader);
    f=ReflectionHelper.findField(ModelBakery.class,""String_Node_Str"",""String_Node_Str"");
    f.setAccessible(true);
    blockModelShapes=(BlockModelShapes)f.get(loader);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  UnlimitedChiselWorks.proxy.progressPush(""String_Node_Str"",UnlimitedChiselWorks.BLOCK_RULES.size());
  int cc=0;
  for (  UCWBlockRule rule : UnlimitedChiselWorks.BLOCK_RULES) {
    UnlimitedChiselWorks.proxy.progressStep(String.format(""String_Node_Str"",(++cc) * 100 / UnlimitedChiselWorks.BLOCK_RULES.size()));
    Map<IBlockState,ModelResourceLocation> fromVariants=blockModelShapes.getBlockStateMapper().getVariants(rule.fromBlock);
    Map<IBlockState,ModelResourceLocation> overlayVariants=blockModelShapes.getBlockStateMapper().getVariants(rule.overlayBlock);
    Map<IBlockState,ModelResourceLocation> throughVariants=blockModelShapes.getBlockStateMapper().getVariants(rule.throughBlock);
    Map<IBlockState,ModelResourceLocation> basedUponVariants=blockModelShapes.getBlockStateMapper().getVariants(rule.basedUponBlock);
    for (int i=0; i < rule.from.size(); i++) {
      if (rule.from.get(i) != null) {
        IBlockState state=rule.from.get(i);
        String s2=rule.fromBlock.getRegistryName().toString().trim().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + i;
        IBlockState stateOverlay=rule.overlay.get(i);
        IModel modelFrom=secretSauce.get(fromVariants.get(state));
        IModel modelOverlay=secretSauce.get(overlayVariants.get(stateOverlay));
        IBlockState stateBasedUpon=rule.basedUpon.size() == 1 ? rule.basedUpon.get(0) : rule.basedUpon.get(i);
        IModel modelBasedUpon=secretSauce.get(basedUponVariants.get(stateBasedUpon));
        ResourceLocation textureFrom=UCWMagic.getLocation(state,fromVariants.get(state),modelFrom);
        ResourceLocation textureOverlay=UCWMagic.getLocation(stateOverlay,overlayVariants.get(stateOverlay),modelOverlay);
        ResourceLocation textureBasedUpon=UCWMagic.getLocation(stateBasedUpon,basedUponVariants.get(stateBasedUpon),modelBasedUpon);
        for (int j=0; j < 16; j++) {
          IBlockState throughState=null;
          try {
            throughState=rule.throughBlock.getStateFromMeta(j);
          }
 catch (          Exception e) {
            continue;
          }
          ModelResourceLocation throughLoc=throughVariants.get(throughState);
          IModel modelThrough=secretSauce.get(throughLoc);
          ImmutableMap.Builder<String,String> textureRemapMap=ImmutableMap.builder();
          for (          ResourceLocation oldLocation : modelThrough.getTextures()) {
            ResourceLocation newLocation=new ResourceLocation(""String_Node_Str"",""String_Node_Str"" + s2 + ""String_Node_Str""+ oldLocation.getResourceDomain()+ ""String_Node_Str""+ oldLocation.getResourcePath().substring(7));
            textureRemapMap.put(oldLocation.toString(),newLocation.toString());
            event.getMap().setTextureEntry(new TextureAtlasSprite(newLocation.toString()){
              @Override public boolean hasCustomLoader(              IResourceManager manager,              ResourceLocation location){
                return true;
              }
              @Override public boolean load(              IResourceManager manager,              ResourceLocation location,              Function<ResourceLocation,TextureAtlasSprite> textureGetter){
                TextureAtlasSprite fromTex=textureGetter.apply(textureFrom);
                TextureAtlasSprite overlayTex=textureGetter.apply(textureOverlay);
                TextureAtlasSprite basedUponTex=textureGetter.apply(textureBasedUpon);
                TextureAtlasSprite locationTex=textureGetter.apply(oldLocation);
                setIconWidth(locationTex.getIconWidth());
                setIconHeight(locationTex.getIconHeight());
                clearFramesTextureData();
                for (int i=0; i < locationTex.getFrameCount(); i++) {
                  int[][] pixels=new int[Minecraft.getMinecraft().gameSettings.mipmapLevels + 1][];
                  pixels[0]=UCWMagic.transform(locationTex,i,fromTex,overlayTex,basedUponTex,rule.mode);
                  framesTextureData.add(pixels);
                }
                return false;
              }
              @Override public java.util.Collection<ResourceLocation> getDependencies(){
                return ImmutableList.of(textureFrom,textureBasedUpon,oldLocation,textureOverlay);
              }
            }
);
          }
          UCWObjectFactory factory=rule.objectFactories.get(i);
          List<String> propertyNames=new ArrayList<>();
          for (          IProperty property : factory.block.getBlockState().getProperties()) {
            propertyNames.add(property.getName());
          }
          IBlockState targetState=factory.block.getStateFromMeta(j);
          Collections.sort(propertyNames);
          String variant=""String_Node_Str"";
          for (          String s : propertyNames) {
            if (variant.length() > 0)             variant+=""String_Node_Str"";
            IProperty property=factory.block.getBlockState().getProperty(s);
            variant+=s + ""String_Node_Str"" + property.getName(targetState.getValue(property));
          }
          ModelResourceLocation targetLoc=new ModelResourceLocation(factory.block.getRegistryName(),variant);
          ModelLoader.setCustomModelResourceLocation(factory.item,j,targetLoc);
          if (throughLoc.getResourceDomain().equals(""String_Node_Str"")) {
            try {
              if (chiselCache == null) {
                InputStream stream=Minecraft.getMinecraft().getResourceManager().getResource(new ResourceLocation(""String_Node_Str"",""String_Node_Str"")).getInputStream();
                InputStreamReader reader=new InputStreamReader(stream);
                chiselCache=JsonUtils.fromJson(UnlimitedChiselWorks.GSON,reader,JsonObject.class);
                reader.close();
                stream.close();
              }
              JsonObject variants=chiselCache.get(""String_Node_Str"").getAsJsonObject();
              if (variants.has(throughLoc.getVariant())) {
                String modelPath=variants.get(throughLoc.getVariant()).getAsJsonObject().get(""String_Node_Str"").getAsString();
                modelPath=modelPath.replaceFirst(""String_Node_Str"",""String_Node_Str"" + s2 + ""String_Node_Str"");
                secretSauce.put(targetLoc,ModelLoaderRegistry.getModel(new ModelResourceLocation(modelPath)));
              }
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
 else {
            secretSauce.put(targetLoc,modelThrough.retexture(textureRemapMap.build()));
          }
        }
      }
    }
  }
  UnlimitedChiselWorks.proxy.progressPop();
}","@SubscribeEvent @SuppressWarnings(""String_Node_Str"") public void onTextureStitchPre(TextureStitchEvent.Pre event){
  ModelLoader loader;
  Map<ModelResourceLocation,IModel> secretSauce=null;
  BlockModelShapes blockModelShapes=null;
  try {
    Class c=Class.forName(""String_Node_Str"");
    Field f=c.getDeclaredField(""String_Node_Str"");
    f.setAccessible(true);
    Object o=f.get(null);
    f=c.getDeclaredField(""String_Node_Str"");
    f.setAccessible(true);
    loader=(ModelLoader)f.get(o);
    f=ModelLoader.class.getDeclaredField(""String_Node_Str"");
    f.setAccessible(true);
    secretSauce=(Map<ModelResourceLocation,IModel>)f.get(loader);
    f=ReflectionHelper.findField(ModelBakery.class,""String_Node_Str"",""String_Node_Str"");
    f.setAccessible(true);
    blockModelShapes=(BlockModelShapes)f.get(loader);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  UnlimitedChiselWorks.proxy.progressPush(""String_Node_Str"",UnlimitedChiselWorks.BLOCK_RULES.size());
  int cc=0;
  for (  UCWBlockRule rule : UnlimitedChiselWorks.BLOCK_RULES) {
    UnlimitedChiselWorks.proxy.progressStep(String.format(""String_Node_Str"",(++cc) * 100 / UnlimitedChiselWorks.BLOCK_RULES.size()));
    Map<IBlockState,ModelResourceLocation> fromVariants=blockModelShapes.getBlockStateMapper().getVariants(rule.fromBlock);
    Map<IBlockState,ModelResourceLocation> overlayVariants=blockModelShapes.getBlockStateMapper().getVariants(rule.overlayBlock);
    Map<IBlockState,ModelResourceLocation> throughVariants=blockModelShapes.getBlockStateMapper().getVariants(rule.throughBlock);
    Map<IBlockState,ModelResourceLocation> basedUponVariants=blockModelShapes.getBlockStateMapper().getVariants(rule.basedUponBlock);
    for (int i=0; i < rule.from.size(); i++) {
      if (rule.from.get(i) != null) {
        IBlockState state=rule.from.get(i);
        String s2=rule.fromBlock.getRegistryName().toString().trim().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + i;
        IBlockState stateOverlay=rule.overlay.get(i);
        IModel modelFrom=secretSauce.get(fromVariants.get(state));
        IModel modelOverlay=secretSauce.get(overlayVariants.get(stateOverlay));
        IBlockState stateBasedUpon=rule.basedUpon.size() == 1 ? rule.basedUpon.get(0) : rule.basedUpon.get(i);
        IModel modelBasedUpon=secretSauce.get(basedUponVariants.get(stateBasedUpon));
        ResourceLocation textureFrom=UCWMagic.getLocation(state,fromVariants.get(state),modelFrom);
        ResourceLocation textureOverlay=UCWMagic.getLocation(stateOverlay,overlayVariants.get(stateOverlay),modelOverlay);
        ResourceLocation textureBasedUpon=UCWMagic.getLocation(stateBasedUpon,basedUponVariants.get(stateBasedUpon),modelBasedUpon);
        for (int j=0; j < 16; j++) {
          IBlockState throughState=rule.through.get(j);
          if (throughState == null)           continue;
          ModelResourceLocation throughLoc=throughVariants.get(throughState);
          IModel modelThrough=secretSauce.get(throughLoc);
          ImmutableMap.Builder<String,String> textureRemapMap=ImmutableMap.builder();
          for (          ResourceLocation oldLocation : modelThrough.getTextures()) {
            ResourceLocation newLocation=new ResourceLocation(""String_Node_Str"",""String_Node_Str"" + s2 + ""String_Node_Str""+ oldLocation.getResourceDomain()+ ""String_Node_Str""+ oldLocation.getResourcePath().substring(7));
            textureRemapMap.put(oldLocation.toString(),newLocation.toString());
            event.getMap().setTextureEntry(new TextureAtlasSprite(newLocation.toString()){
              @Override public boolean hasCustomLoader(              IResourceManager manager,              ResourceLocation location){
                return true;
              }
              @Override public boolean load(              IResourceManager manager,              ResourceLocation location,              Function<ResourceLocation,TextureAtlasSprite> textureGetter){
                TextureAtlasSprite fromTex=textureGetter.apply(textureFrom);
                TextureAtlasSprite overlayTex=textureGetter.apply(textureOverlay);
                TextureAtlasSprite basedUponTex=textureGetter.apply(textureBasedUpon);
                TextureAtlasSprite locationTex=textureGetter.apply(oldLocation);
                setIconWidth(locationTex.getIconWidth());
                setIconHeight(locationTex.getIconHeight());
                clearFramesTextureData();
                for (int i=0; i < locationTex.getFrameCount(); i++) {
                  int[][] pixels=new int[Minecraft.getMinecraft().gameSettings.mipmapLevels + 1][];
                  pixels[0]=UCWMagic.transform(locationTex,i,fromTex,overlayTex,basedUponTex,rule.mode);
                  framesTextureData.add(pixels);
                }
                return false;
              }
              @Override public java.util.Collection<ResourceLocation> getDependencies(){
                return ImmutableList.of(textureFrom,textureBasedUpon,oldLocation,textureOverlay);
              }
            }
);
          }
          UCWObjectFactory factory=rule.objectFactories.get(i);
          List<String> propertyNames=new ArrayList<>();
          for (          IProperty property : factory.block.getBlockState().getProperties()) {
            propertyNames.add(property.getName());
          }
          IBlockState targetState=factory.block.getStateFromMeta(j);
          Collections.sort(propertyNames);
          String variant=""String_Node_Str"";
          for (          String s : propertyNames) {
            if (variant.length() > 0)             variant+=""String_Node_Str"";
            IProperty property=factory.block.getBlockState().getProperty(s);
            variant+=s + ""String_Node_Str"" + property.getName(targetState.getValue(property));
          }
          ModelResourceLocation targetLoc=new ModelResourceLocation(factory.block.getRegistryName(),variant);
          ModelLoader.setCustomModelResourceLocation(factory.item,j,targetLoc);
          if (throughLoc.getResourceDomain().equals(""String_Node_Str"")) {
            try {
              if (chiselCache == null) {
                InputStream stream=Minecraft.getMinecraft().getResourceManager().getResource(new ResourceLocation(""String_Node_Str"",""String_Node_Str"")).getInputStream();
                InputStreamReader reader=new InputStreamReader(stream);
                chiselCache=JsonUtils.fromJson(UnlimitedChiselWorks.GSON,reader,JsonObject.class);
                reader.close();
                stream.close();
              }
              JsonObject variants=chiselCache.get(""String_Node_Str"").getAsJsonObject();
              if (variants.has(throughLoc.getVariant())) {
                String modelPath=variants.get(throughLoc.getVariant()).getAsJsonObject().get(""String_Node_Str"").getAsString();
                modelPath=modelPath.replaceFirst(""String_Node_Str"",""String_Node_Str"" + s2 + ""String_Node_Str"");
                secretSauce.put(targetLoc,ModelLoaderRegistry.getModel(new ModelResourceLocation(modelPath)));
              }
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
 else {
            secretSauce.put(targetLoc,modelThrough.retexture(textureRemapMap.build()));
          }
        }
      }
    }
  }
  UnlimitedChiselWorks.proxy.progressPop();
}"
40674,"/** 
 * 计算出指定股票指定日期范围的指数平滑异同移动平均线值序列。
 * @param stockPrice 股价序列
 * @param paramSHORT 短期
 * @param paramLONG 长期
 * @param paramM DEA周期paramLONG+paramM-1后数据才有效
 * @return 指数平滑异同移动平均线值序列
 */
private List<Map<String,Double>> calcStkDailyMACD(List<Double> stockPrice,int paramSHORT,int paramLONG,int paramM){
  List<Map<String,Double>> result=new ArrayList<>();
  double shortEMA=getMa(stockPrice,paramLONG - paramSHORT,paramSHORT);
  double longEMA=getMa(stockPrice,0,paramLONG);
  double diffValue=getDIFFValue(shortEMA,longEMA);
  double deaValue=diffValue;
  double close;
  int i=paramLONG;
  double shortSmoth=2 / (paramSHORT + 1);
  double longSmoth=2 / (paramLONG + 1);
  do {
    close=stockPrice.get(i);
    Map<String,Double> indicatorValue=new HashMap<String,Double>();
    shortEMA=shortSmoth * close + (paramSHORT - 1) / (paramSHORT + 1) * shortEMA;
    longEMA=longSmoth * close + (paramLONG - 1) / (paramLONG + 1) * longEMA;
    diffValue=getDIFFValue(shortEMA,longEMA);
    indicatorValue.put(VALUE_DIFF,diffValue);
    deaValue=2 / (paramM + 1) * diffValue + (paramM - 1) / (paramM + 1) * deaValue;
    indicatorValue.put(VALUE_DEA,deaValue);
    double macdValue=2 * (diffValue - deaValue);
    if (macdValue >= 0) {
      indicatorValue.put(VALUE_RMACD,macdValue);
    }
 else {
      indicatorValue.put(VALUE_FMACD,macdValue);
    }
    result.add(indicatorValue);
    i++;
  }
 while (i < stockPrice.size());
  return result;
}","/** 
 * 计算出指定股票指定日期范围的指数平滑异同移动平均线值序列。
 * @param stockPrice 股价序列
 * @param paramSHORT 短期
 * @param paramLONG 长期
 * @param paramM DEA周期paramLONG+paramM-1后数据才有效
 * @return 指数平滑异同移动平均线值序列
 */
private List<Map<String,Double>> calcStkDailyMACD(List<Double> stockPrice,int paramSHORT,int paramLONG,int paramM){
  List<Map<String,Double>> result=new ArrayList<Map<String,Double>>();
  double shortEMA=getMa(stockPrice,paramLONG - paramSHORT,paramSHORT);
  double longEMA=getMa(stockPrice,0,paramLONG);
  double diffValue=getDIFFValue(shortEMA,longEMA);
  double deaValue=diffValue;
  double close;
  int i=paramLONG;
  double shortSmoth=2 / (paramSHORT + 1);
  double longSmoth=2 / (paramLONG + 1);
  do {
    close=stockPrice.get(i);
    Map<String,Double> indicatorValue=new HashMap<String,Double>();
    shortEMA=shortSmoth * close + (paramSHORT - 1) / (paramSHORT + 1) * shortEMA;
    longEMA=longSmoth * close + (paramLONG - 1) / (paramLONG + 1) * longEMA;
    diffValue=getDIFFValue(shortEMA,longEMA);
    indicatorValue.put(VALUE_DIFF,diffValue);
    deaValue=2 / (paramM + 1) * diffValue + (paramM - 1) / (paramM + 1) * deaValue;
    indicatorValue.put(VALUE_DEA,deaValue);
    double macdValue=2 * (diffValue - deaValue);
    if (macdValue >= 0) {
      indicatorValue.put(VALUE_RMACD,macdValue);
    }
 else {
      indicatorValue.put(VALUE_FMACD,macdValue);
    }
    result.add(indicatorValue);
    i++;
  }
 while (i < stockPrice.size());
  return result;
}"
40675,"@Test public void testUserUpdateDefaultSerdes() throws Exception {
  final User user=new User();
  final User.UserUpdate userUpdate=User.UserUpdate.buildFrom(user);
  assertEquals(null,userUpdate.getNewSession());
  assertEquals(null,userUpdate.getUnsubscribedFromEmails());
  assertEquals(null,userUpdate.getUnsubscribedFromEmails());
  assertEquals(null,userUpdate.isNewSession());
  assertEquals(null,userUpdate.isUpdateLastRequestAt());
  assertEquals(null,userUpdate.getType());
  final String json=mapper.writeValueAsString(userUpdate);
  assertFalse(json.contains(""String_Node_Str""));
  assertFalse(json.contains(""String_Node_Str""));
  assertFalse(json.contains(""String_Node_Str""));
  assertFalse(json.contains(""String_Node_Str""));
  final Map map=mapper.readValue(json,Map.class);
  assertFalse(map.containsKey(""String_Node_Str""));
  assertFalse(map.containsKey(""String_Node_Str""));
  assertFalse(map.containsKey(""String_Node_Str""));
  assertFalse(map.containsKey(""String_Node_Str""));
}","@Test public void testUserUpdateDefaultSerdes() throws Exception {
  final User user=new User();
  final User.UserUpdate userUpdate=User.UserUpdate.buildFrom(user);
  assertEquals(null,userUpdate.getUnsubscribedFromEmails());
  assertEquals(null,userUpdate.isNewSession());
  assertEquals(null,userUpdate.isUpdateLastRequestAt());
  assertEquals(null,userUpdate.getType());
  final String json=mapper.writeValueAsString(userUpdate);
  assertFalse(json.contains(""String_Node_Str""));
  assertFalse(json.contains(""String_Node_Str""));
  assertFalse(json.contains(""String_Node_Str""));
  assertFalse(json.contains(""String_Node_Str""));
  final Map map=mapper.readValue(json,Map.class);
  assertFalse(map.containsKey(""String_Node_Str""));
  assertFalse(map.containsKey(""String_Node_Str""));
  assertFalse(map.containsKey(""String_Node_Str""));
  assertFalse(map.containsKey(""String_Node_Str""));
}"
40676,"@Test public void testUserUpdateDefaultModifiedSerdes() throws Exception {
  final User user=new User();
  user.setNewSession(true);
  user.setUnsubscribedFromEmails(true);
  user.setUpdateLastRequestAt(true);
  final User.UserUpdate userUpdate=User.UserUpdate.buildFrom(user);
  assertEquals(true,userUpdate.getNewSession());
  assertEquals(true,userUpdate.getUnsubscribedFromEmails());
  assertEquals(true,userUpdate.getUnsubscribedFromEmails());
  assertEquals(true,userUpdate.isNewSession());
  assertEquals(true,userUpdate.isUpdateLastRequestAt());
  final String json=mapper.writeValueAsString(userUpdate);
  assertTrue(json.contains(""String_Node_Str""));
  assertTrue(json.contains(""String_Node_Str""));
  assertTrue(json.contains(""String_Node_Str""));
  final Map map=mapper.readValue(json,Map.class);
  assertTrue(map.containsKey(""String_Node_Str""));
  assertTrue(map.containsKey(""String_Node_Str""));
  assertTrue(map.containsKey(""String_Node_Str""));
}","@Test public void testUserUpdateDefaultModifiedSerdes() throws Exception {
  final User user=new User();
  user.setNewSession(true);
  user.setUnsubscribedFromEmails(true);
  user.setUpdateLastRequestAt(true);
  final User.UserUpdate userUpdate=User.UserUpdate.buildFrom(user);
  assertEquals(true,userUpdate.getUnsubscribedFromEmails());
  assertEquals(true,userUpdate.isNewSession());
  assertEquals(true,userUpdate.isUpdateLastRequestAt());
  final String json=mapper.writeValueAsString(userUpdate);
  assertTrue(json.contains(""String_Node_Str""));
  assertTrue(json.contains(""String_Node_Str""));
  assertTrue(json.contains(""String_Node_Str""));
  final Map map=mapper.readValue(json,Map.class);
  assertTrue(map.containsKey(""String_Node_Str""));
  assertTrue(map.containsKey(""String_Node_Str""));
  assertTrue(map.containsKey(""String_Node_Str""));
}"
40677,"@Override public MumblerNode convert(){
  if (this.list.size() == 0) {
    return new LiteralListNode(MumblerList.EMPTY);
  }
 else   if (this.list.get(0) instanceof SymbolConvertible && this.isSpecialForm((SymbolConvertible)this.list.get(0))) {
    return this.toSpecialForm();
  }
  return new InvokeNode(this.list.get(0).convert(),this.list.subList(1,this.list.size()).toArray(new MumblerNode[]{}));
}","@Override public MumblerNode convert(){
  if (this.list.size() == 0) {
    return new LiteralListNode(MumblerList.EMPTY);
  }
 else   if (this.list.get(0) instanceof SymbolConvertible && this.isSpecialForm((SymbolConvertible)this.list.get(0))) {
    return this.toSpecialForm();
  }
  return new InvokeNode(this.list.get(0).convert(),this.list.subList(1,this.list.size()).stream().map(Convertible::convert).toArray(size -> new MumblerNode[size]));
}"
40678,"private MumblerNode toSpecialForm(){
  SymbolConvertible symbol=(SymbolConvertible)this.list.get(0);
switch (symbol.name) {
case ""String_Node_Str"":
    return quote(this.list.get(1));
case ""String_Node_Str"":
  return new IfNode(this.list.get(1).convert(),this.list.get(2).convert(),this.list.get(3).convert());
case ""String_Node_Str"":
return DefineNodeFactory.create(this.list.get(2).convert(),frameDescriptors.peek().findOrAddFrameSlot(((SymbolConvertible)this.list.get(1)).name));
case ""String_Node_Str"":
frameDescriptors.push(new FrameDescriptor());
List<FrameSlot> formalParameters=new ArrayList<>();
for (Convertible arg : ((ListConvertible)this.list.get(1)).list) {
formalParameters.add(((SymbolNode)arg.convert()).getSlot());
}
List<MumblerNode> bodyNodes=new ArrayList<>();
for (Convertible bodyConv : this.list.subList(2,this.list.size())) {
bodyNodes.add(bodyConv.convert());
}
frameDescriptors.pop();
MumblerFunction function=MumblerFunction.create(formalParameters.toArray(new FrameSlot[]{}),bodyNodes.toArray(new MumblerNode[]{}));
return LambdaNodeFactory.create(function);
default :
throw new IllegalStateException(""String_Node_Str"");
}
}","private MumblerNode toSpecialForm(){
  SymbolConvertible symbol=(SymbolConvertible)this.list.get(0);
switch (symbol.name) {
case ""String_Node_Str"":
    return quote(this.list.get(1));
case ""String_Node_Str"":
  return new IfNode(this.list.get(1).convert(),this.list.get(2).convert(),this.list.get(3).convert());
case ""String_Node_Str"":
return DefineNodeFactory.create(this.list.get(2).convert(),frameDescriptors.peek().findOrAddFrameSlot(((SymbolConvertible)this.list.get(1)).name));
case ""String_Node_Str"":
frameDescriptors.push(new FrameDescriptor());
List<FrameSlot> formalParameters=new ArrayList<>();
for (Convertible arg : ((ListConvertible)this.list.get(1)).list) {
formalParameters.add(((SymbolNode)arg.convert()).getSlot());
}
List<MumblerNode> bodyNodes=new ArrayList<>();
for (Convertible bodyConv : this.list.subList(2,this.list.size())) {
bodyNodes.add(bodyConv.convert());
}
frameDescriptors.pop();
MumblerFunction function=MumblerFunction.create(formalParameters.toArray(new FrameSlot[]{}),bodyNodes.toArray(new MumblerNode[]{}),frameDescriptors.peek());
return LambdaNodeFactory.create(function);
default :
throw new IllegalStateException(""String_Node_Str"");
}
}"
40679,"private static void runMumbler(String filename) throws IOException {
  MumblerList<MumblerNode> nodes=Reader.read(new FileInputStream(filename));
  execute(nodes);
}","private static void runMumbler(String filename) throws IOException {
  VirtualFrame topFrame=createTopFrame(Reader.frameDescriptors.peek());
  MumblerList<MumblerNode> nodes=Reader.read(new FileInputStream(filename));
  execute(nodes,topFrame);
}"
40680,"private static VirtualFrame createTopFrame(FrameDescriptor frameDescriptor){
  VirtualFrame virtualFrame=Truffle.getRuntime().createVirtualFrame(new Object[]{},frameDescriptor);
  virtualFrame.setObject(frameDescriptor.addFrameSlot(""String_Node_Str""),createBuiltinFunction(AddBuiltinNodeFactory.getInstance()));
  virtualFrame.setObject(frameDescriptor.addFrameSlot(""String_Node_Str""),createBuiltinFunction(PrintlnBuiltinNodeFactory.getInstance()));
  virtualFrame.setObject(frameDescriptor.addFrameSlot(""String_Node_Str""),createBuiltinFunction(NowBuiltinNodeFactory.getInstance()));
  return virtualFrame;
}","private static VirtualFrame createTopFrame(FrameDescriptor frameDescriptor){
  VirtualFrame virtualFrame=Truffle.getRuntime().createVirtualFrame(new Object[]{},frameDescriptor);
  virtualFrame.setObject(frameDescriptor.addFrameSlot(""String_Node_Str""),createBuiltinFunction(AddBuiltinNodeFactory.getInstance(),frameDescriptor));
  virtualFrame.setObject(frameDescriptor.addFrameSlot(""String_Node_Str""),createBuiltinFunction(PrintlnBuiltinNodeFactory.getInstance(),frameDescriptor));
  virtualFrame.setObject(frameDescriptor.addFrameSlot(""String_Node_Str""),createBuiltinFunction(NowBuiltinNodeFactory.getInstance(),frameDescriptor));
  return virtualFrame;
}"
40681,"private static void startREPL() throws IOException {
  Console console=System.console();
  while (true) {
    String data=console.readLine(""String_Node_Str"");
    if (data == null) {
      break;
    }
    MumblerList<MumblerNode> nodes=Reader.read(new ByteArrayInputStream(data.getBytes()));
    Object result=execute(nodes);
    if (result != MumblerList.EMPTY) {
      System.out.println(result);
    }
  }
}","private static void startREPL() throws IOException {
  VirtualFrame topFrame=createTopFrame(Reader.frameDescriptors.peek());
  Console console=System.console();
  while (true) {
    String data=console.readLine(""String_Node_Str"");
    if (data == null) {
      break;
    }
    MumblerList<MumblerNode> nodes=Reader.read(new ByteArrayInputStream(data.getBytes()));
    Object result=execute(nodes,topFrame);
    if (result != MumblerList.EMPTY) {
      System.out.println(result);
    }
  }
}"
40682,"private static Object execute(MumblerList<MumblerNode> nodes){
  MumblerFunction function=MumblerFunction.create(new FrameSlot[]{},StreamSupport.stream(nodes.spliterator(),false).toArray(size -> new MumblerNode[size]));
  DirectCallNode directCallNode=Truffle.getRuntime().createDirectCallNode(function.callTarget);
  return directCallNode.call(createTopFrame(Reader.frameDescriptors.peek()),new Object[]{});
}","private static Object execute(MumblerList<MumblerNode> nodes,VirtualFrame topFrame){
  FrameDescriptor frameDescriptor=topFrame.getFrameDescriptor();
  MumblerFunction function=MumblerFunction.create(new FrameSlot[]{},StreamSupport.stream(nodes.spliterator(),false).toArray(size -> new MumblerNode[size]),frameDescriptor);
  DirectCallNode directCallNode=Truffle.getRuntime().createDirectCallNode(function.callTarget);
  return directCallNode.call(topFrame,new Object[]{topFrame.materialize()});
}"
40683,"public static MumblerRootNode create(FrameSlot[] argumentNames,MumblerNode[] bodyNodes){
  MumblerNode[] allNodes=new MumblerNode[argumentNames.length + bodyNodes.length];
  for (int i=0; i < argumentNames.length; i++) {
    allNodes[i]=DefineNodeFactory.create(new ReadArgumentNode(i),argumentNames[i]);
  }
  System.arraycopy(bodyNodes,bodyNodes.length,allNodes,argumentNames.length,bodyNodes.length);
  return new MumblerRootNode(bodyNodes);
}","public static MumblerRootNode create(FrameSlot[] argumentNames,MumblerNode[] bodyNodes,FrameDescriptor frameDescriptor){
  MumblerNode[] allNodes=new MumblerNode[argumentNames.length + bodyNodes.length];
  for (int i=0; i < argumentNames.length; i++) {
    allNodes[i]=DefineNodeFactory.create(new ReadArgumentNode(i),argumentNames[i]);
  }
  System.arraycopy(bodyNodes,0,allNodes,argumentNames.length,bodyNodes.length);
  return new MumblerRootNode(allNodes,frameDescriptor);
}"
40684,"public MumblerRootNode(MumblerNode[] bodyNodes){
  this.bodyNodes=bodyNodes;
}","public MumblerRootNode(MumblerNode[] bodyNodes,FrameDescriptor frameDescriptor){
  super(null,frameDescriptor);
  this.bodyNodes=bodyNodes;
}"
40685,"public <T>T readUpStack(FrameGet<T> getter,Frame frame) throws FrameSlotTypeException {
  T value=getter.get(frame,this.getSlot());
  while (value == null) {
    frame=this.getLexicalScope(frame);
    if (frame == null) {
      throw new RuntimeException(""String_Node_Str"" + this.getSlot().getIdentifier());
    }
    value=getter.get(frame,this.getSlot());
  }
  return value;
}","public <T>T readUpStack(FrameGet<T> getter,Frame frame) throws FrameSlotTypeException {
  FrameSlot slot=this.getSlot();
  Object identifier=slot.getIdentifier();
  T value=getter.get(frame,slot);
  while (value == null) {
    frame=this.getLexicalScope(frame);
    if (frame == null) {
      throw new RuntimeException(""String_Node_Str"" + this.getSlot().getIdentifier());
    }
    FrameDescriptor desc=frame.getFrameDescriptor();
    slot=desc.findFrameSlot(identifier);
    if (slot != null) {
      value=getter.get(frame,slot);
    }
  }
  return value;
}"
40686,"protected Frame getLexicalScope(Frame frame){
  return (Frame)frame.getArguments()[0];
}","protected Frame getLexicalScope(Frame frame){
  Object[] args=frame.getArguments();
  if (args.length > 0) {
    return (Frame)frame.getArguments()[0];
  }
 else {
    return null;
  }
}"
40687,"public static MumblerFunction createBuiltinFunction(NodeFactory<? extends BuiltinNode> factory){
  int argumentCount=factory.getExecutionSignature().size();
  MumblerNode[] argumentNodes=new MumblerNode[argumentCount];
  for (int i=0; i < argumentCount; i++) {
    argumentNodes[i]=new ReadArgumentNode(i);
  }
  BuiltinNode node=factory.createNode((Object)argumentNodes);
  return new MumblerFunction(Truffle.getRuntime().createCallTarget(new MumblerRootNode(new MumblerNode[]{node})));
}","public static MumblerFunction createBuiltinFunction(NodeFactory<? extends BuiltinNode> factory,FrameDescriptor frameDescriptor){
  int argumentCount=factory.getExecutionSignature().size();
  MumblerNode[] argumentNodes=new MumblerNode[argumentCount];
  for (int i=0; i < argumentCount; i++) {
    argumentNodes[i]=new ReadArgumentNode(i);
  }
  BuiltinNode node=factory.createNode((Object)argumentNodes);
  return new MumblerFunction(Truffle.getRuntime().createCallTarget(new MumblerRootNode(new MumblerNode[]{node},frameDescriptor)));
}"
40688,"public InvokeNode(MumblerNode functionNode,MumblerNode[] argumentNodes){
  this.functionNode=functionNode;
  this.argumentNodes=argumentNodes;
  this.dispatchNode=new DispatchNode();
}","public InvokeNode(MumblerNode functionNode,MumblerNode[] argumentNodes){
  this.functionNode=functionNode;
  this.argumentNodes=argumentNodes;
  this.callNode=Truffle.getRuntime().createIndirectCallNode();
}"
40689,"@Override @ExplodeLoop public Object execute(VirtualFrame virtualFrame){
  MumblerFunction function=this.evaluateFunction(virtualFrame);
  CompilerAsserts.compilationConstant(this.argumentNodes.length);
  Object[] argumentValues=new Object[this.argumentNodes.length + 1];
  argumentValues[0]=function.getLexicalScope();
  for (int i=1; i <= argumentValues.length; i++) {
    argumentValues[i]=this.argumentNodes[i - 1].execute(virtualFrame);
  }
  return this.dispatchNode.executeDispatch(virtualFrame,function,argumentValues);
}","@Override @ExplodeLoop public Object execute(VirtualFrame virtualFrame){
  MumblerFunction function=this.evaluateFunction(virtualFrame);
  Object[] argumentValues=new Object[this.argumentNodes.length + 1];
  argumentValues[0]=function.getLexicalScope();
  for (int i=0; i < this.argumentNodes.length; i++) {
    argumentValues[i + 1]=this.argumentNodes[i].execute(virtualFrame);
  }
  return this.callNode.call(virtualFrame,function.callTarget,argumentValues);
}"
40690,"public static MumblerFunction create(FrameSlot[] arguments,MumblerNode[] bodyNodes){
  return new MumblerFunction(Truffle.getRuntime().createCallTarget(MumblerRootNode.create(arguments,bodyNodes)));
}","public static MumblerFunction create(FrameSlot[] arguments,MumblerNode[] bodyNodes,FrameDescriptor frameDescriptor){
  return new MumblerFunction(Truffle.getRuntime().createCallTarget(MumblerRootNode.create(arguments,bodyNodes,frameDescriptor)));
}"
40691,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_add_item);
  mContext=this;
  ((ListApplication)getApplication()).getTracker(ListApplication.TrackerName.GLOBAL_TRACKER);
  mCurrentUser=new ListUser(mContext);
  mMessageHelper=new MessageHelper(mContext);
  mRequestMethods=new RequestMethods(mContext);
  mMakerItemProgressBar=(RelativeLayout)findViewById(R.id.makerItemProgressBar);
  mItemNameField=(EditText)findViewById(R.id.add_item_title);
  mDescriptionField=(EditText)findViewById(R.id.add_item_description);
  mDescription=null;
  mCategorySpinner=(Spinner)findViewById(R.id.category_spinner);
  mAddImage=(ImageButton)findViewById(R.id.add_item_example_image);
  mStickyFooter=(RelativeLayout)findViewById(R.id.add_item_sticky_footer);
  mStickyFooterContainer=(RelativeLayout)findViewById(R.id.sticky_footer_container);
  mDoneButton=(Button)findViewById(R.id.add_item_button);
  ArrayList<EditText> editList=new ArrayList<>();
  editList.add(mItemNameField);
  editList.add(mDescriptionField);
  mPhotoAdded=false;
  mRequestMethods.getCategories(new RequestMethods.ResponseCallback(){
    @Override public void onSuccess(    JSONArray response){
      Log.v(TAG,""String_Node_Str"" + response);
      mSpinnerList.clear();
      if (response.length() > 0) {
        mSpinnerList.add(new SpinnerObject(""String_Node_Str"",""String_Node_Str""));
        for (int i=0; i < response.length(); i++) {
          try {
            JSONObject jsonSingleCategory=response.getJSONObject(i);
            String name=jsonSingleCategory.getString(ApiConstants.CATEGORY_NAME);
            String id=jsonSingleCategory.getString(ApiConstants.CATEGORY_ID);
            mSpinnerList.add(new SpinnerObject(name,id));
          }
 catch (          JSONException e) {
            Log.e(TAG,e.getMessage());
          }
        }
        ArrayAdapter<SpinnerObject> adapter=new ArrayAdapter<SpinnerObject>(mContext,android.R.layout.simple_spinner_item,mSpinnerList);
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        mCategorySpinner.setAdapter(adapter);
      }
    }
    @Override public void onFail(    VolleyError error){
      Log.v(TAG,""String_Node_Str"" + error.getMessage());
      mMessageHelper.showDialog(mContext,getString(R.string.error_title),getString(R.string.error_message));
    }
  }
);
  mCategorySpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      SpinnerObject catObject=(SpinnerObject)mCategorySpinner.getSelectedItem();
      catId=catObject.getTag().toString();
      Log.v(TAG,""String_Node_Str"" + catId);
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  mDoneButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      final String itemName=mItemNameField.getText().toString().trim();
      final String itemDescription=mDescriptionField.getText().toString().trim();
      if (itemDescription.length() > 1) {
        mDescription=itemDescription;
      }
      if (itemName.isEmpty()) {
        mMessageHelper.showDialog(mContext,mContext.getString(R.string.oops_label),mContext.getString(R.string.dialog_missing_item_name));
      }
 else       if (catId.equals(""String_Node_Str"")) {
        mMessageHelper.showDialog(mContext,mContext.getString(R.string.oops_label),mContext.getString(R.string.dialog_missing_item_cat));
      }
 else {
        startItemUpload(itemName,mDescription);
      }
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_add_item);
  mContext=this;
  ((ListApplication)getApplication()).getTracker(ListApplication.TrackerName.GLOBAL_TRACKER);
  mMessageHelper=new MessageHelper(mContext);
  mRequestMethods=new RequestMethods(mContext);
  mMakerItemProgressBar=(RelativeLayout)findViewById(R.id.makerItemProgressBar);
  mItemNameField=(EditText)findViewById(R.id.add_item_title);
  mDescriptionField=(EditText)findViewById(R.id.add_item_description);
  mDescription=null;
  mCategorySpinner=(Spinner)findViewById(R.id.category_spinner);
  mAddImage=(ImageButton)findViewById(R.id.add_item_example_image);
  mStickyFooterContainer=(RelativeLayout)findViewById(R.id.sticky_footer_container);
  mDoneButton=(Button)findViewById(R.id.add_item_button);
  ArrayList<EditText> editList=new ArrayList<>();
  editList.add(mItemNameField);
  editList.add(mDescriptionField);
  mPhotoAdded=false;
  mRequestMethods.getCategories(new RequestMethods.ResponseCallback(){
    @Override public void onSuccess(    JSONArray response){
      Log.v(TAG,""String_Node_Str"" + response);
      mSpinnerList.clear();
      if (response.length() > 0) {
        mSpinnerList.add(new SpinnerObject(""String_Node_Str"",""String_Node_Str""));
        for (int i=0; i < response.length(); i++) {
          try {
            JSONObject jsonSingleCategory=response.getJSONObject(i);
            String name=jsonSingleCategory.getString(ApiConstants.CATEGORY_NAME);
            String id=jsonSingleCategory.getString(ApiConstants.CATEGORY_ID);
            mSpinnerList.add(new SpinnerObject(name,id));
          }
 catch (          JSONException e) {
            Log.e(TAG,e.getMessage());
          }
        }
        ArrayAdapter<SpinnerObject> adapter=new ArrayAdapter<SpinnerObject>(mContext,android.R.layout.simple_spinner_item,mSpinnerList);
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        mCategorySpinner.setAdapter(adapter);
      }
    }
    @Override public void onFail(    VolleyError error){
      Log.v(TAG,""String_Node_Str"" + error.getMessage());
      mMessageHelper.showDialog(mContext,getString(R.string.error_title),getString(R.string.error_message));
    }
  }
);
  mCategorySpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      SpinnerObject catObject=(SpinnerObject)mCategorySpinner.getSelectedItem();
      catId=catObject.getTag().toString();
      Log.v(TAG,""String_Node_Str"" + catId);
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  mDoneButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      final String itemName=mItemNameField.getText().toString().trim();
      final String itemDescription=mDescriptionField.getText().toString().trim();
      if (itemDescription.length() > 1) {
        mDescription=itemDescription;
      }
      if (itemName.isEmpty()) {
        mMessageHelper.showDialog(mContext,mContext.getString(R.string.oops_label),mContext.getString(R.string.dialog_missing_item_name));
      }
 else       if (catId.equals(""String_Node_Str"")) {
        mMessageHelper.showDialog(mContext,mContext.getString(R.string.oops_label),mContext.getString(R.string.dialog_missing_item_cat));
      }
 else {
        startItemUpload(itemName,mDescription);
      }
    }
  }
);
}"
40692,"@Override public void onFail(){
  mMessageHelper.notifyUploadFail(title);
  mMakerItemProgressBar.setVisibility(View.INVISIBLE);
}","@Override public void onFail(){
  Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_LONG).show();
  mMakerItemProgressBar.setVisibility(View.INVISIBLE);
}"
40693,"public void startItemUpload(final String title,final String description){
  mMakerItemProgressBar.setVisibility(View.VISIBLE);
  mStickyFooterContainer.setVisibility(View.INVISIBLE);
  mRequestMethods.addMakerItem(title,catId,description,mMediaUri,new RequestMethods.RequestCallback(){
    @Override public void onSuccess(){
      mMessageHelper.notifyUploadSuccess(title);
      mMakerItemProgressBar.setVisibility(View.INVISIBLE);
      finish();
    }
    @Override public void onFail(){
      mMessageHelper.notifyUploadFail(title);
      mMakerItemProgressBar.setVisibility(View.INVISIBLE);
    }
  }
);
}","public void startItemUpload(final String title,final String description){
  mMakerItemProgressBar.setVisibility(View.VISIBLE);
  mDoneButton.setEnabled(false);
  mDoneButton.setTextColor(getResources().getColor(R.color.hint_disabled_text_material_light));
  mRequestMethods.addMakerItem(title,catId,description,mMediaUri,new RequestMethods.RequestCallback(){
    @Override public void onSuccess(){
      new android.os.Handler().postDelayed(new Runnable(){
        @Override public void run(){
          Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_LONG).show();
          mMakerItemProgressBar.setVisibility(View.INVISIBLE);
          Intent intent=new Intent(AddItemActivity.this,MainActivity.class);
          startActivity(intent);
        }
      }
,1000);
    }
    @Override public void onFail(){
      Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_LONG).show();
      mMakerItemProgressBar.setVisibility(View.INVISIBLE);
    }
  }
);
}"
40694,"@Override public void onSuccess(){
  mMessageHelper.notifyUploadSuccess(title);
  mMakerItemProgressBar.setVisibility(View.INVISIBLE);
  finish();
}","@Override public void onSuccess(){
  new android.os.Handler().postDelayed(new Runnable(){
    @Override public void run(){
      Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_LONG).show();
      mMakerItemProgressBar.setVisibility(View.INVISIBLE);
      Intent intent=new Intent(AddItemActivity.this,MainActivity.class);
      startActivity(intent);
    }
  }
,1000);
}"
40695,"@Override public void onDrawerClicked(int position){
  Fragment fragment=null;
  Tracker t=((ListApplication)getApplication()).getTracker(ListApplication.TrackerName.GLOBAL_TRACKER);
switch (position) {
case 0:
    fragment=new MyListFragment();
  t.setScreenName(""String_Node_Str"");
t.send(new HitBuilders.ScreenViewBuilder().build());
break;
case 1:
fragment=new GalleryFragment();
t.setScreenName(""String_Node_Str"");
t.send(new HitBuilders.ScreenViewBuilder().build());
break;
case 2:
if (!mRequestMethods.isNetworkAvailable()) {
mMessageHelper.toastNeedInternet();
return;
}
Intent catIntent=new Intent(MainActivity.this,CategoryListActivity.class);
startActivity(catIntent);
break;
case 3:
if (!mRequestMethods.isNetworkAvailable()) {
mMessageHelper.toastNeedInternet();
return;
}
Intent reqIntent=new Intent(MainActivity.this,AddItemActivity.class);
startActivity(reqIntent);
break;
case 4:
Intent aboutIntent=new Intent(MainActivity.this,AboutActivity.class);
startActivity(aboutIntent);
break;
case 5:
mSharedPref.setSurveyTaken(true);
t.setScreenName(""String_Node_Str"");
t.send(new HitBuilders.ScreenViewBuilder().build());
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(getString(R.string.dialog_survey_link)));
startActivity(browserIntent);
break;
default :
break;
}
if (fragment != null) {
FragmentManager fragmentManager=getSupportFragmentManager();
fragmentManager.beginTransaction().replace(R.id.main_content_container,fragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN).commit();
getSupportActionBar().setTitle(mDrawerTitles[position]);
mDrawerLayout.closeDrawer(mDrawerView);
}
 else {
Log.e(TAG,""String_Node_Str"");
}
}","@Override public void onDrawerClicked(int position){
  Fragment fragment=null;
  Tracker t=((ListApplication)getApplication()).getTracker(ListApplication.TrackerName.GLOBAL_TRACKER);
switch (position) {
case 0:
    fragment=new MyListFragment();
  t.setScreenName(""String_Node_Str"");
t.send(new HitBuilders.ScreenViewBuilder().build());
break;
case 1:
if (!mRequestMethods.isNetworkAvailable()) {
mMessageHelper.toastNeedInternet();
return;
}
fragment=new GalleryFragment();
t.setScreenName(""String_Node_Str"");
t.send(new HitBuilders.ScreenViewBuilder().build());
break;
case 2:
if (!mRequestMethods.isNetworkAvailable()) {
mMessageHelper.toastNeedInternet();
return;
}
Intent catIntent=new Intent(MainActivity.this,CategoryListActivity.class);
startActivity(catIntent);
break;
case 3:
if (!mRequestMethods.isNetworkAvailable()) {
mMessageHelper.toastNeedInternet();
return;
}
Intent reqIntent=new Intent(MainActivity.this,AddItemActivity.class);
startActivity(reqIntent);
break;
case 4:
Intent aboutIntent=new Intent(MainActivity.this,AboutActivity.class);
startActivity(aboutIntent);
break;
case 5:
mSharedPref.setSurveyTaken(true);
Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(getString(R.string.dialog_survey_link)));
startActivity(browserIntent);
break;
default :
break;
}
if (fragment != null) {
mDrawerLayout.closeDrawer(mDrawerView);
FragmentManager fragmentManager=getSupportFragmentManager();
fragmentManager.beginTransaction().replace(R.id.main_content_container,fragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN).commit();
getSupportActionBar().setTitle(mDrawerTitles[position]);
}
 else {
Log.e(TAG,""String_Node_Str"");
}
}"
40696,"@Override public Object instantiateItem(ViewGroup container,int position){
  inflater=(LayoutInflater)activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View viewLayout=inflater.inflate(R.layout.layout_fullscreen_image,container,false);
  mImgDisplay=(PhotoView)viewLayout.findViewById(R.id.imgDisplay);
  mAttacher=new PhotoViewAttacher(mImgDisplay);
  final android.support.v7.widget.Toolbar galleryImage;
  galleryImage=(android.support.v7.widget.Toolbar)viewLayout.findViewById(R.id.gallery_image_container);
  mAttacher.setOnViewTapListener(new PhotoViewAttacher.OnViewTapListener(){
    @Override public void onViewTap(    View view,    float x,    float y){
      Log.v(TAG,""String_Node_Str"");
      if (galleryImage.getVisibility() == View.INVISIBLE) {
        galleryImage.setVisibility(View.VISIBLE);
      }
 else {
        galleryImage.setVisibility(View.INVISIBLE);
      }
    }
  }
);
  GalleryItem g=photoObjects.get(position);
  String photoUrl=g.getUrl() + ""String_Node_Str"";
  TextView itemName=(TextView)viewLayout.findViewById(R.id.gallery_item_name);
  TextView makerName=(TextView)viewLayout.findViewById(R.id.gallery_maker_name);
  itemName.setText(g.getItemName());
  makerName.setText(""String_Node_Str"" + g.getMakerName());
  Log.v(TAG,g.getItemName() + ""String_Node_Str"" + photoUrl+ ""String_Node_Str""+ g.getMakerName());
  Picasso.with(activity).load(photoUrl).placeholder(R.drawable.progress_view_large).error(R.drawable.progress_view_large).into(mImgDisplay,new com.squareup.picasso.Callback(){
    @Override public void onSuccess(){
      Log.v(TAG,""String_Node_Str"");
      if (mAttacher != null) {
        Log.v(TAG,""String_Node_Str"");
        mAttacher.update();
      }
 else {
        Log.v(TAG,""String_Node_Str"");
        mAttacher=new PhotoViewAttacher(mImgDisplay);
        mAttacher.setOnViewTapListener(new PhotoViewAttacher.OnViewTapListener(){
          @Override public void onViewTap(          View view,          float x,          float y){
            Log.v(TAG,""String_Node_Str"");
            if (galleryImage.getVisibility() == View.INVISIBLE) {
              galleryImage.setVisibility(View.VISIBLE);
            }
 else {
              galleryImage.setVisibility(View.INVISIBLE);
            }
          }
        }
);
        Log.v(TAG,""String_Node_Str"");
      }
    }
    @Override public void onError(){
      Log.v(TAG,""String_Node_Str"");
    }
  }
);
  ((ViewPager)container).addView(viewLayout);
  return viewLayout;
}","@Override public Object instantiateItem(ViewGroup container,int position){
  inflater=(LayoutInflater)activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  View viewLayout=inflater.inflate(R.layout.layout_fullscreen_image,container,false);
  final PhotoView mImgDisplay=(PhotoView)viewLayout.findViewById(R.id.imgDisplay);
  final android.support.v7.widget.Toolbar galleryCaption=(android.support.v7.widget.Toolbar)viewLayout.findViewById(R.id.gallery_caption_container);
  GalleryItem g=photoObjects.get(position);
  String photoUrl=g.getUrl() + ""String_Node_Str"";
  TextView itemName=(TextView)viewLayout.findViewById(R.id.gallery_item_name);
  TextView makerName=(TextView)viewLayout.findViewById(R.id.gallery_maker_name);
  itemName.setText(g.getItemName());
  makerName.setText(""String_Node_Str"" + g.getMakerName());
  Log.v(TAG,g.getItemName() + ""String_Node_Str"" + photoUrl+ ""String_Node_Str""+ g.getMakerName());
  Picasso.with(activity).load(photoUrl).placeholder(R.drawable.progress_view_large).error(R.drawable.progress_view_large).into(mImgDisplay,new com.squareup.picasso.Callback(){
    @Override public void onSuccess(){
      Log.v(TAG,""String_Node_Str"");
      mAttacher=new PhotoViewAttacher(mImgDisplay);
      mAttacher.setOnViewTapListener(new PhotoViewAttacher.OnViewTapListener(){
        @Override public void onViewTap(        View view,        float x,        float y){
          Log.v(TAG,""String_Node_Str"");
          if (galleryCaption.getVisibility() == View.INVISIBLE) {
            galleryCaption.setVisibility(View.VISIBLE);
          }
 else {
            galleryCaption.setVisibility(View.INVISIBLE);
          }
        }
      }
);
      Log.v(TAG,""String_Node_Str"");
    }
    @Override public void onError(){
      Log.v(TAG,""String_Node_Str"");
    }
  }
);
  ((ViewPager)container).addView(viewLayout);
  return viewLayout;
}"
40697,"@Override public void onViewTap(View view,float x,float y){
  Log.v(TAG,""String_Node_Str"");
  if (galleryImage.getVisibility() == View.INVISIBLE) {
    galleryImage.setVisibility(View.VISIBLE);
  }
 else {
    galleryImage.setVisibility(View.INVISIBLE);
  }
}","@Override public void onViewTap(View view,float x,float y){
  Log.v(TAG,""String_Node_Str"");
  if (galleryCaption.getVisibility() == View.INVISIBLE) {
    galleryCaption.setVisibility(View.VISIBLE);
  }
 else {
    galleryCaption.setVisibility(View.INVISIBLE);
  }
}"
40698,"@Override public void onSuccess(){
  Log.v(TAG,""String_Node_Str"");
  if (mAttacher != null) {
    Log.v(TAG,""String_Node_Str"");
    mAttacher.update();
  }
 else {
    Log.v(TAG,""String_Node_Str"");
    mAttacher=new PhotoViewAttacher(mImgDisplay);
    mAttacher.setOnViewTapListener(new PhotoViewAttacher.OnViewTapListener(){
      @Override public void onViewTap(      View view,      float x,      float y){
        Log.v(TAG,""String_Node_Str"");
        if (galleryImage.getVisibility() == View.INVISIBLE) {
          galleryImage.setVisibility(View.VISIBLE);
        }
 else {
          galleryImage.setVisibility(View.INVISIBLE);
        }
      }
    }
);
    Log.v(TAG,""String_Node_Str"");
  }
}","@Override public void onSuccess(){
  Log.v(TAG,""String_Node_Str"");
  mAttacher=new PhotoViewAttacher(mImgDisplay);
  mAttacher.setOnViewTapListener(new PhotoViewAttacher.OnViewTapListener(){
    @Override public void onViewTap(    View view,    float x,    float y){
      Log.v(TAG,""String_Node_Str"");
      if (galleryCaption.getVisibility() == View.INVISIBLE) {
        galleryCaption.setVisibility(View.VISIBLE);
      }
 else {
        galleryCaption.setVisibility(View.INVISIBLE);
      }
    }
  }
);
  Log.v(TAG,""String_Node_Str"");
}"
40699,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.switch_accounts:
    handleUserAccount();
  return true;
case R.id.pick_categories:
Intent pickCategoriesIntent=new Intent(MainActivity.this,CategoryListActivity.class);
startActivity(pickCategoriesIntent);
return true;
case R.id.about_theapp:
Intent aboutAppIntent=new Intent(MainActivity.this,AboutActivity.class);
startActivity(aboutAppIntent);
return true;
case R.id.remove_accounts:
if (mCurrentUser.isTempUser()) {
mSharedPref.ClearAllSharedPreferences();
Intent startIntent=new Intent(MainActivity.this,StartActivity.class);
startActivity(startIntent);
}
 else {
mCurrentUser.removeAccounts(new ListUser.AuthCallback(){
@Override public void onSuccess(String authtoken){
Intent startIntent=new Intent(MainActivity.this,StartActivity.class);
startActivity(startIntent);
}
}
);
}
return true;
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.switch_accounts:
    handleUserAccount();
  return true;
case R.id.pick_categories:
Intent pickCategoriesIntent=new Intent(MainActivity.this,CategoryListActivity.class);
startActivity(pickCategoriesIntent);
return true;
case R.id.about_theapp:
Intent aboutAppIntent=new Intent(MainActivity.this,AboutActivity.class);
startActivity(aboutAppIntent);
return true;
case R.id.remove_accounts:
if (mCurrentUser.isTempUser()) {
mSharedPref.ClearAllSharedPreferences();
Intent startIntent=new Intent(MainActivity.this,StartActivity.class);
startActivity(startIntent);
}
 else {
mCurrentUser.removeAccounts(new ListUser.AuthCallback(){
@Override public void onSuccess(String authtoken){
mSharedPref.ClearAllSharedPreferences();
Intent startIntent=new Intent(MainActivity.this,StartActivity.class);
startActivity(startIntent);
}
}
);
}
return true;
default :
return super.onOptionsItemSelected(item);
}
}"
40700,"@Override public void onSuccess(String authtoken){
  Intent startIntent=new Intent(MainActivity.this,StartActivity.class);
  startActivity(startIntent);
}","@Override public void onSuccess(String authtoken){
  mSharedPref.ClearAllSharedPreferences();
  Intent startIntent=new Intent(MainActivity.this,StartActivity.class);
  startActivity(startIntent);
}"
40701,"@Override public void onFail(){
  Log.d(TAG,""String_Node_Str"");
  displayUserListItems();
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      mUploadProgressBar.setVisibility(View.GONE);
    }
  }
,500);
}","@Override public void onFail(){
  mItemToBeUploaded.setError(true);
  Log.d(TAG,""String_Node_Str"");
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      mUploadProgressBar.setVisibility(View.GONE);
      displayUserListItems();
    }
  }
,500);
}"
40702,"@Override public void run(){
  mUploadProgressBar.setVisibility(View.GONE);
}","@Override public void run(){
  mUploadProgressBar.setVisibility(View.GONE);
  displayUserListItems();
}"
40703,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
switch (requestCode) {
case PhotoConstants.PICK_PHOTO_REQUEST:
case PhotoConstants.TAKE_PHOTO_REQUEST:
    if (resultCode == RESULT_OK) {
      if (data == null) {
        Toast.makeText(this,getString(R.string.general_error),Toast.LENGTH_LONG).show();
      }
 else {
        mMediaUri=data.getData();
      }
      Log.i(TAG,""String_Node_Str"" + mMediaUri);
      Intent mediaScanIntent=new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
      mediaScanIntent.setData(mMediaUri);
      sendBroadcast(mediaScanIntent);
      startPhotoUpload();
    }
 else     if (resultCode != RESULT_CANCELED) {
      Toast.makeText(this,R.string.general_error,Toast.LENGTH_SHORT).show();
    }
  break;
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
switch (requestCode) {
case PhotoConstants.PICK_PHOTO_REQUEST:
case PhotoConstants.TAKE_PHOTO_REQUEST:
    if (resultCode == RESULT_OK) {
      mItemToBeUploaded=mCurrentItem;
      uploadItemPosition=activeItemPosition;
      mItemToBeUploaded.setProgress(true);
      mFeedAdapter.notifyDataSetChanged();
      if (data == null) {
        Toast.makeText(this,getString(R.string.general_error),Toast.LENGTH_LONG).show();
      }
 else {
        mMediaUri=data.getData();
      }
      Log.i(TAG,""String_Node_Str"" + mMediaUri);
      Intent mediaScanIntent=new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
      mediaScanIntent.setData(mMediaUri);
      sendBroadcast(mediaScanIntent);
      startPhotoUpload();
    }
 else     if (resultCode != RESULT_CANCELED) {
      Toast.makeText(this,R.string.general_error,Toast.LENGTH_SHORT).show();
    }
  break;
}
}"
40704,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.switch_accounts:
    handleUserAccount();
  return true;
case R.id.pick_categories:
Intent pickCategoriesIntent=new Intent(MainActivity.this,CategoryListActivity.class);
startActivity(pickCategoriesIntent);
return true;
case R.id.about_theapp:
Intent aboutAppIntent=new Intent(MainActivity.this,AboutActivity.class);
startActivity(aboutAppIntent);
return true;
case R.id.remove_accounts:
Intent startIntent=new Intent(Settings.ACTION_SETTINGS);
mSharedPref.ClearAllSharedPreferences();
mCurrentUser.removeAccounts(new ListUser.AuthCallback(){
@Override public void onSuccess(String authtoken){
Intent startIntent=new Intent(MainActivity.this,StartActivity.class);
startActivity(startIntent);
}
}
);
return true;
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.switch_accounts:
    handleUserAccount();
  return true;
case R.id.pick_categories:
Intent pickCategoriesIntent=new Intent(MainActivity.this,CategoryListActivity.class);
startActivity(pickCategoriesIntent);
return true;
case R.id.about_theapp:
Intent aboutAppIntent=new Intent(MainActivity.this,AboutActivity.class);
startActivity(aboutAppIntent);
return true;
case R.id.remove_accounts:
mSharedPref.ClearAllSharedPreferences();
mCurrentUser.removeAccounts(new ListUser.AuthCallback(){
@Override public void onSuccess(String authtoken){
Intent startIntent=new Intent(MainActivity.this,StartActivity.class);
startActivity(startIntent);
}
}
);
return true;
default :
return super.onOptionsItemSelected(item);
}
}"
40705,"public void performUpload(){
  mRequestMethods.uploadPhoto(mCurrentItem.getItemID(),mMediaUri,new RequestMethods.RequestCallback(){
    @Override public void onSuccess(){
      Log.d(TAG,""String_Node_Str"");
      displayUserListItems();
      new Handler().postDelayed(new Runnable(){
        @Override public void run(){
          mUploadProgressBar.setVisibility(View.GONE);
        }
      }
,500);
    }
    @Override public void onFail(){
      Log.d(TAG,""String_Node_Str"");
      displayUserListItems();
      new Handler().postDelayed(new Runnable(){
        @Override public void run(){
          mUploadProgressBar.setVisibility(View.GONE);
        }
      }
,500);
    }
  }
);
}","public void performUpload(){
  mRequestMethods.uploadPhoto(mItemToBeUploaded.getItemID(),mMediaUri,new RequestMethods.RequestCallback(){
    @Override public void onSuccess(){
      Log.d(TAG,""String_Node_Str"");
      mItemToBeUploaded=null;
      displayUserListItems();
      new Handler().postDelayed(new Runnable(){
        @Override public void run(){
          mUploadProgressBar.setVisibility(View.GONE);
        }
      }
,500);
    }
    @Override public void onFail(){
      mItemToBeUploaded.setError(true);
      Log.d(TAG,""String_Node_Str"");
      new Handler().postDelayed(new Runnable(){
        @Override public void run(){
          mUploadProgressBar.setVisibility(View.GONE);
          displayUserListItems();
        }
      }
,500);
    }
  }
);
}"
40706,"@Override public void onResume(){
  super.onResume();
  invalidateOptionsMenu();
  if (!mFab.isVisible()) {
    mFab.show();
  }
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      mFab.setEnabled(true);
    }
  }
,500);
  if (!(mCurrentUser.isTempUser())) {
    displayUserListItems();
    Log.v(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    Log.v(""String_Node_Str"",""String_Node_Str"");
    if (mItemList.size() == 0) {
      Log.v(""String_Node_Str"",""String_Node_Str"");
      mRecyclerView.setVisibility(View.INVISIBLE);
      displayUserListItems();
    }
 else {
      Log.v(""String_Node_Str"",""String_Node_Str"");
      mFeedAdapter.notifyDataSetChanged();
      mRecyclerView.setVisibility(View.VISIBLE);
    }
  }
}","@Override public void onResume(){
  super.onResume();
  invalidateOptionsMenu();
  if (mItemToBeUploaded != null) {
    mItemList.remove(uploadItemPosition);
    mFeedAdapter.notifyDataSetChanged();
  }
  if (!mFab.isVisible()) {
    mFab.show();
  }
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      mFab.setEnabled(true);
    }
  }
,500);
  if (!(mCurrentUser.isTempUser())) {
    displayUserListItems();
    Log.v(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    Log.v(""String_Node_Str"",""String_Node_Str"");
    if (mItemList.size() == 0) {
      Log.v(""String_Node_Str"",""String_Node_Str"");
      mRecyclerView.setVisibility(View.INVISIBLE);
      displayUserListItems();
    }
 else {
      Log.v(""String_Node_Str"",""String_Node_Str"");
      mFeedAdapter.notifyDataSetChanged();
      mRecyclerView.setVisibility(View.VISIBLE);
    }
  }
}"
40707,"@Override public void onBindViewHolder(FeedViewholder holder,int position){
  MainListItem l=listItems.get(position);
  holder.itemView.setVisibility(View.VISIBLE);
  holder.nameLabel.setText(l.getItemName());
  holder.makerLabel.setText(""String_Node_Str"" + l.getMakerName());
switch (getItemViewType(position)) {
case DEFAULT_VIEW:
    holder.iconImageView.setImageResource(R.drawable.ic_camera_alt_grey600_24dp);
  break;
case ERROR_VIEW:
holder.iconImageView.setImageResource(R.drawable.ic_error_red_24dp);
break;
}
holder.itemView.setTag(l);
}","@Override public void onBindViewHolder(FeedViewholder holder,int position){
  MainListItem l=listItems.get(position);
  holder.itemView.setVisibility(View.VISIBLE);
  holder.nameLabel.setText(l.getItemName());
  holder.makerLabel.setText(""String_Node_Str"" + l.getMakerName());
switch (getItemViewType(position)) {
case ERROR_VIEW:
    holder.iconImageView.setImageResource(R.drawable.ic_error_red_24dp);
  break;
case DEFAULT_VIEW:
holder.iconImageView.setImageResource(R.drawable.ic_camera_alt_grey600_24dp);
break;
}
holder.itemView.setTag(l);
}"
40708,"public MainListItem(String id,String name,String maker){
  this.itemID=itemID;
  this.itemName=name;
  this.makerName=maker;
  this.error=false;
}","public MainListItem(String id,String name,String maker){
  this.itemID=itemID;
  this.itemName=name;
  this.makerName=maker;
  this.error=false;
  this.progress=false;
}"
40709,"public void RemoveUserItemPreference(String itemID){
  SharedPreferences sharedPref=mContext.getSharedPreferences(APP_PREFERENCES_KEY,Context.MODE_PRIVATE);
  String listOfValues=sharedPref.getString(LIST_ITEM_PREFERENCE_KEY,null);
  Log.v(""String_Node_Str"",itemID);
  JsonParser parser=new JsonParser();
  JsonElement element=parser.parse(listOfValues);
  JsonArray array=element.getAsJsonArray();
  Log.v(""String_Node_Str"",array.toString());
  for (int i=0; i < array.size(); i++) {
    String singleItem=array.get(i).getAsString();
    if (singleItem.equals(itemID)) {
      Log.v(""String_Node_Str"",singleItem);
      array.remove(i);
    }
  }
  SharedPreferences.Editor editor=sharedPref.edit();
  editor.putString(LIST_ITEM_PREFERENCE_KEY,array.toString());
  editor.apply();
}","public void RemoveUserItemPreference(String itemID){
  SharedPreferences sharedPref=mContext.getSharedPreferences(APP_PREFERENCES_KEY,Context.MODE_PRIVATE);
  String listOfValues=sharedPref.getString(LIST_ITEM_PREFERENCE_KEY,null);
  if (listOfValues == null) {
    return;
  }
  Log.v(""String_Node_Str"",itemID);
  JsonParser parser=new JsonParser();
  JsonElement element=parser.parse(listOfValues);
  JsonArray array=element.getAsJsonArray();
  Log.v(""String_Node_Str"",array.toString());
  for (int i=0; i < array.size(); i++) {
    String singleItem=array.get(i).getAsString();
    if (singleItem.equals(itemID)) {
      Log.v(""String_Node_Str"",singleItem);
      array.remove(i);
    }
  }
  SharedPreferences.Editor editor=sharedPref.edit();
  editor.putString(LIST_ITEM_PREFERENCE_KEY,array.toString());
  editor.apply();
}"
40710,"@Override public void onResponse(JSONObject response){
  try {
    mPutResponse=response.getJSONObject(ApiConstants.RESPONSE_CONTENT);
    Log.v(TAG,mPutResponse.toString());
    mProgressBar.setVisibility(View.INVISIBLE);
  }
 catch (  JSONException e) {
    Log.e(TAG,e.getMessage());
  }
}","@Override public void onResponse(JSONObject response){
  try {
    mPutResponse=response.getJSONObject(ApiConstants.RESPONSE_CONTENT);
    mProgressBar.setVisibility(View.INVISIBLE);
  }
 catch (  JSONException e) {
    Log.e(TAG,e.getMessage());
  }
}"
40711,"private void storeCategoriesRequest(){
  RequestQueue queue=Volley.newRequestQueue(this);
  String userID=mCurrentUser.getUserID();
  String url=ApiConstants.UPDATE_USER + userID;
  JSONObject UserCategoriesObject=sharedPreferencesMethods.createCategoryListObject(ApiConstants.USER_CATEGORIES,mContext);
  Log.v(TAG,UserCategoriesObject.toString());
  JsonObjectRequest putCategoriesRequest=new JsonObjectRequest(Request.Method.PUT,url,UserCategoriesObject,new Response.Listener<JSONObject>(){
    @Override public void onResponse(    JSONObject response){
      try {
        mPutResponse=response.getJSONObject(ApiConstants.RESPONSE_CONTENT);
        Log.v(TAG,mPutResponse.toString());
        mProgressBar.setVisibility(View.INVISIBLE);
      }
 catch (      JSONException e) {
        Log.e(TAG,e.getMessage());
      }
    }
  }
,new Response.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      requestMethods.updateDisplayForError();
    }
  }
);
  queue.add(putCategoriesRequest);
}","private void storeCategoriesRequest(){
  RequestQueue queue=Volley.newRequestQueue(this);
  String userID=mCurrentUser.getUserID();
  String url=ApiConstants.UPDATE_USER + userID;
  JSONObject UserCategoriesObject=sharedPreferencesMethods.createCategoryListObject(ApiConstants.USER_CATEGORIES,mContext);
  JsonObjectRequest putCategoriesRequest=new JsonObjectRequest(Request.Method.PUT,url,UserCategoriesObject,new Response.Listener<JSONObject>(){
    @Override public void onResponse(    JSONObject response){
      try {
        mPutResponse=response.getJSONObject(ApiConstants.RESPONSE_CONTENT);
        mProgressBar.setVisibility(View.INVISIBLE);
      }
 catch (      JSONException e) {
        Log.e(TAG,e.getMessage());
      }
    }
  }
,new Response.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      requestMethods.updateDisplayForError();
    }
  }
);
  queue.add(putCategoriesRequest);
}"
40712,"@Override public void onResume(){
  super.onResume();
  Bundle b=getArguments();
  STATUS status=(STATUS)b.getSerializable(""String_Node_Str"");
  mTitle=(TextView)getView().findViewById(R.id.confirm_title);
  mText=(TextView)getView().findViewById(R.id.confirm_text);
switch (status) {
case CANCEL:
    addConfirmText(getString(R.string.upload_cancelled_title),getString(R.string.upload_cancelled_text));
  break;
case SUCCESS:
addConfirmText(getString(R.string.upload_success_title),getString(R.string.upload_success_text));
break;
case FAILURE:
addConfirmText(getString(R.string.upload_failed_title),getString(R.string.upload_failed_text));
break;
}
mCallback.onConfirmFinish();
}","@Override public void onResume(){
  super.onResume();
  Bundle b=getArguments();
  STATUS status=(STATUS)b.getSerializable(""String_Node_Str"");
  mTitle=(TextView)getView().findViewById(R.id.confirm_title);
  mText=(TextView)getView().findViewById(R.id.confirm_text);
  mIcon=(ImageView)getView().findViewById(R.id.confirm_icon);
switch (status) {
case CANCEL:
    addConfirmText(getString(R.string.upload_cancelled_title),getString(R.string.upload_cancelled_text));
  break;
case SUCCESS:
addConfirmText(getString(R.string.upload_success_title),getString(R.string.upload_success_text));
break;
case FAILURE:
addConfirmText(getString(R.string.upload_failed_title),getString(R.string.upload_failed_text));
break;
}
mCallback.onConfirmFinish();
}"
40713,"@Override public void onResponse(JSONObject response){
  try {
    mUserData=response.getJSONObject(ApiConstants.RESPONSE_CONTENT);
    Log.v(""String_Node_Str"",mUserData.toString());
    JSONObject data=response.getJSONObject(ApiConstants.RESPONSE_CONTENT);
    mCallback.UserCreated(mUserData.toString());
  }
 catch (  JSONException e) {
    Log.e(TAG,e.getMessage());
  }
}","@Override public void onResponse(JSONObject response){
  try {
    mUserData=response.getJSONObject(ApiConstants.RESPONSE_CONTENT);
    JSONObject data=response.getJSONObject(ApiConstants.RESPONSE_CONTENT);
    mCallback.UserCreated(mUserData.toString());
  }
 catch (  JSONException e) {
    Log.e(TAG,e.getMessage());
  }
}"
40714,"private void createNewUser(){
  RequestQueue queue=Volley.newRequestQueue(getActivity());
  String url=ApiConstants.CREATE_NEW_USER;
  JSONObject categoryListObject=sharedPreferencesMethods.createCategoryListObject(ApiConstants.USER_CATEGORIES,getActivity());
  JSONObject userItemObject=sharedPreferencesMethods.createUserItemsObject(ApiConstants.USER_ITEMS,getActivity());
  final JSONObject userObject=new JSONObject();
  try {
    userObject.put(ApiConstants.USER_EMAIL,mEmail);
    userObject.put(ApiConstants.USER_PASSWORD,mPassword);
    userObject.put(ApiConstants.USER_NAME,mUsername);
    userObject.put(ApiConstants.USER_CATEGORIES,categoryListObject.getJSONArray(ApiConstants.USER_CATEGORIES));
    userObject.put(ApiConstants.USER_ITEMS,userItemObject.getJSONArray(ApiConstants.USER_ITEMS));
  }
 catch (  JSONException e) {
    Log.v(TAG,e.getMessage());
  }
  Log.v(TAG,userObject.toString());
  JsonObjectRequest newUserRequest=new JsonObjectRequest(Request.Method.POST,url,userObject,new Response.Listener<JSONObject>(){
    @Override public void onResponse(    JSONObject response){
      try {
        mUserData=response.getJSONObject(ApiConstants.RESPONSE_CONTENT);
        Log.v(""String_Node_Str"",mUserData.toString());
        JSONObject data=response.getJSONObject(ApiConstants.RESPONSE_CONTENT);
        mCallback.UserCreated(mUserData.toString());
      }
 catch (      JSONException e) {
        Log.e(TAG,e.getMessage());
      }
    }
  }
,new Response.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
    }
  }
);
  queue.add(newUserRequest);
}","private void createNewUser(){
  RequestQueue queue=Volley.newRequestQueue(getActivity());
  String url=ApiConstants.CREATE_NEW_USER;
  JSONObject categoryListObject=sharedPreferencesMethods.createCategoryListObject(ApiConstants.USER_CATEGORIES,getActivity());
  JSONObject userItemObject=sharedPreferencesMethods.createUserItemsObject(ApiConstants.USER_ITEMS,getActivity());
  final JSONObject userObject=new JSONObject();
  try {
    userObject.put(ApiConstants.USER_EMAIL,mEmail);
    userObject.put(ApiConstants.USER_PASSWORD,mPassword);
    userObject.put(ApiConstants.USER_NAME,mUsername);
    userObject.put(ApiConstants.USER_CATEGORIES,categoryListObject.getJSONArray(ApiConstants.USER_CATEGORIES));
    userObject.put(ApiConstants.USER_ITEMS,userItemObject.getJSONArray(ApiConstants.USER_ITEMS));
  }
 catch (  JSONException e) {
    Log.v(TAG,e.getMessage());
  }
  JsonObjectRequest newUserRequest=new JsonObjectRequest(Request.Method.POST,url,userObject,new Response.Listener<JSONObject>(){
    @Override public void onResponse(    JSONObject response){
      try {
        mUserData=response.getJSONObject(ApiConstants.RESPONSE_CONTENT);
        JSONObject data=response.getJSONObject(ApiConstants.RESPONSE_CONTENT);
        mCallback.UserCreated(mUserData.toString());
      }
 catch (      JSONException e) {
        Log.e(TAG,e.getMessage());
      }
    }
  }
,new Response.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
    }
  }
);
  queue.add(newUserRequest);
}"
40715,"@Override public void onResume(){
  super.onResume();
  mContext=getActivity();
  mSignUpFields=(RelativeLayout)getView().findViewById(R.id.signup_fields);
  mLoginFields=(RelativeLayout)getView().findViewById(R.id.login_fields);
  mCancelButton=(TextView)getView().findViewById(R.id.cancelButton);
  mUsernameField=(EditText)getView().findViewById(R.id.nameField);
  mUsernameField.requestFocus();
  mEmailField=(EditText)getView().findViewById(R.id.emailField);
  mPasswordField=(EditText)getView().findViewById(R.id.passwordField);
  mPasswordField.setTypeface(Typeface.DEFAULT);
  mSignUpButton=(Button)getView().findViewById(R.id.signUpButton);
  mExistingAccount=(TextView)getView().findViewById(R.id.existingAccount);
  mEmailLoginField=(EditText)getView().findViewById(R.id.emailLoginField);
  mEmailLoginField.requestFocus();
  mPasswordLoginField=(EditText)getView().findViewById(R.id.passwordLoginField);
  mPasswordLoginField.setTypeface(Typeface.DEFAULT);
  mLoginButton=(Button)getView().findViewById(R.id.loginButton);
  mNewAccount=(TextView)getView().findViewById(R.id.newAccount);
  mSignUpButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mUsername=mUsernameField.getText().toString().trim();
      mPassword=mPasswordField.getText().toString().trim();
      mEmail=mEmailField.getText().toString().trim();
      if (mUsername.isEmpty() || mPassword.isEmpty() || mEmail.isEmpty()) {
        requestMethods.showErrorDialog(mContext,mContext.getString(R.string.login_error_title),mContext.getString(R.string.login_error_message));
      }
 else {
        Log.v(TAG,""String_Node_Str"");
        createNewUser();
      }
    }
  }
);
  mLoginButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mLoginEmail=mEmailLoginField.getText().toString().trim();
      mLoginPassword=mPasswordLoginField.getText().toString().trim();
      if (mLoginEmail.isEmpty() || mLoginPassword.isEmpty()) {
        requestMethods.showErrorDialog(mContext,mContext.getString(R.string.login_error_title),mContext.getString(R.string.login_error_message));
      }
 else {
        mCallback.UserLoggedIn(""String_Node_Str"");
      }
    }
  }
);
  mExistingAccount.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mSignUpFields.setVisibility(View.GONE);
      mLoginFields.setVisibility(View.VISIBLE);
    }
  }
);
  mNewAccount.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mSignUpFields.setVisibility(View.VISIBLE);
      mLoginFields.setVisibility(View.GONE);
    }
  }
);
  mCancelButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mCallback.CancelUpload();
    }
  }
);
}","@Override public void onResume(){
  super.onResume();
  mContext=getActivity();
  mSignUpFields=(RelativeLayout)getView().findViewById(R.id.signup_fields);
  mLoginFields=(RelativeLayout)getView().findViewById(R.id.login_fields);
  mCancelButton=(TextView)getView().findViewById(R.id.cancelButton);
  mUsernameField=(EditText)getView().findViewById(R.id.nameField);
  mUsernameField.requestFocus();
  mEmailField=(EditText)getView().findViewById(R.id.emailField);
  mPasswordField=(EditText)getView().findViewById(R.id.passwordField);
  mPasswordField.setTypeface(Typeface.DEFAULT);
  mSignUpButton=(Button)getView().findViewById(R.id.signUpButton);
  mExistingAccount=(TextView)getView().findViewById(R.id.existingAccount);
  mEmailLoginField=(EditText)getView().findViewById(R.id.emailLoginField);
  mEmailLoginField.requestFocus();
  mPasswordLoginField=(EditText)getView().findViewById(R.id.passwordLoginField);
  mPasswordLoginField.setTypeface(Typeface.DEFAULT);
  mLoginButton=(Button)getView().findViewById(R.id.loginButton);
  mNewAccount=(TextView)getView().findViewById(R.id.newAccount);
  mSignUpButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mUsername=mUsernameField.getText().toString().trim();
      mPassword=mPasswordField.getText().toString().trim();
      mEmail=mEmailField.getText().toString().trim();
      if (mUsername.isEmpty() || mPassword.isEmpty() || mEmail.isEmpty()) {
        requestMethods.showErrorDialog(mContext,mContext.getString(R.string.login_error_title),mContext.getString(R.string.login_error_message));
      }
 else {
        createNewUser();
      }
    }
  }
);
  mLoginButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mLoginEmail=mEmailLoginField.getText().toString().trim();
      mLoginPassword=mPasswordLoginField.getText().toString().trim();
      if (mLoginEmail.isEmpty() || mLoginPassword.isEmpty()) {
        requestMethods.showErrorDialog(mContext,mContext.getString(R.string.login_error_title),mContext.getString(R.string.login_error_message));
      }
 else {
        mCallback.UserLoggedIn(""String_Node_Str"");
      }
    }
  }
);
  mExistingAccount.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mSignUpFields.setVisibility(View.GONE);
      mLoginFields.setVisibility(View.VISIBLE);
    }
  }
);
  mNewAccount.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mSignUpFields.setVisibility(View.VISIBLE);
      mLoginFields.setVisibility(View.GONE);
    }
  }
);
  mCancelButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mCallback.CancelUpload();
    }
  }
);
}"
40716,"@Override public void onConfirmFinish(){
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      getSupportFragmentManager().beginTransaction().setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).remove(confirmFragment).commit();
    }
  }
,20000);
  mFrameLayout.setClickable(false);
  getSupportActionBar().show();
}","@Override public void onConfirmFinish(){
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      getSupportFragmentManager().beginTransaction().setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).remove(confirmFragment).commit();
    }
  }
,3000);
  mFrameLayout.setClickable(false);
  getSupportActionBar().show();
}"
40717,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_random);
  mContext=this;
  mTextView=(TextView)findViewById(R.id.confirm_text);
  mProgressBar=(ProgressBar)findViewById(R.id.progressBar);
  Button YesButton=(Button)findViewById(R.id.YesButton);
  Button NoButton=(Button)findViewById(R.id.NoButton);
  Button CameraButton=(Button)findViewById(R.id.CameraButton);
  if (requestMethods.isNetworkAvailable(mContext)) {
    mProgressBar.setVisibility(View.VISIBLE);
    count=1;
    getRandomItemRequest();
    YesButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        Toast.makeText(RandomActivity.this,""String_Node_Str"",Toast.LENGTH_LONG).show();
        MainListItem listItem=new MainListItem();
        listItem.setItemID(mItemID);
        listItem.setItemName(mItemName);
        listItem.setMakerName(mMakerName);
        mItemList.add(listItem);
        if (count < 3) {
          count++;
          getRandomItemRequest();
        }
 else {
          if (mCurrentUser.isLoggedIn()) {
            putRandomItemsRequest();
          }
 else {
            List<Integer> userItemList=requestMethods.getItemIds(mItemList);
            Log.v(TAG,mItemList.toString());
            sharedPreferencesMethods.SaveSharedPreference(sharedPreferencesMethods.LIST_ITEM_PREFERENCE,sharedPreferencesMethods.LIST_ITEM_PREFERENCE_KEY,userItemList.toString(),mContext);
          }
          Intent intent=new Intent(mContext,MainActivity.class);
          startActivity(intent);
        }
      }
    }
);
    NoButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        getRandomItemRequest();
      }
    }
);
    CameraButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
      }
    }
);
  }
 else {
    requestMethods.updateDisplayForError();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_random);
  mContext=this;
  mTextView=(TextView)findViewById(R.id.confirm_text);
  mProgressBar=(ProgressBar)findViewById(R.id.progressBar);
  Button YesButton=(Button)findViewById(R.id.YesButton);
  Button NoButton=(Button)findViewById(R.id.NoButton);
  Button CameraButton=(Button)findViewById(R.id.CameraButton);
  if (requestMethods.isNetworkAvailable(mContext)) {
    mProgressBar.setVisibility(View.VISIBLE);
    count=1;
    getRandomItemRequest();
    YesButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        Toast.makeText(RandomActivity.this,""String_Node_Str"",Toast.LENGTH_LONG).show();
        MainListItem listItem=new MainListItem();
        listItem.setItemID(mItemID);
        listItem.setItemName(mItemName);
        listItem.setMakerName(mMakerName);
        mItemList.add(listItem);
        if (count < 3) {
          count++;
          getRandomItemRequest();
        }
 else {
          if (mCurrentUser.isLoggedIn()) {
            putRandomItemsRequest();
          }
 else {
            List<Integer> userItemList=requestMethods.getItemIds(mItemList);
            sharedPreferencesMethods.SaveSharedPreference(sharedPreferencesMethods.LIST_ITEM_PREFERENCE,sharedPreferencesMethods.LIST_ITEM_PREFERENCE_KEY,userItemList.toString(),mContext);
          }
          Intent intent=new Intent(mContext,MainActivity.class);
          startActivity(intent);
        }
      }
    }
);
    NoButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        getRandomItemRequest();
      }
    }
);
    CameraButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
      }
    }
);
  }
 else {
    requestMethods.updateDisplayForError();
  }
}"
40718,"private void putRandomItemsRequest(){
  RequestQueue queue=Volley.newRequestQueue(this);
  String userID=mCurrentUser.getUserID();
  String url=""String_Node_Str"" + userID;
  JSONArray userPreferences=sharedPreferencesMethods.RetrieveSharedPreference(sharedPreferencesMethods.LIST_ITEM_PREFERENCE,sharedPreferencesMethods.LIST_ITEM_PREFERENCE_KEY,this);
  JSONObject jso=new JSONObject();
  try {
    jso.put(ApiConstants.USER_ITEMS,userPreferences);
  }
 catch (  JSONException e) {
    Log.e(TAG,e.getMessage());
  }
  Log.v(TAG,jso.toString());
  JsonObjectRequest putItemsRequest=new JsonObjectRequest(Request.Method.PUT,url,jso,new Response.Listener<JSONObject>(){
    @Override public void onResponse(    JSONObject response){
      mPutResponse=response;
    }
  }
,new Response.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      requestMethods.updateDisplayForError();
    }
  }
);
  queue.add(putItemsRequest);
}","private void putRandomItemsRequest(){
  RequestQueue queue=Volley.newRequestQueue(this);
  String userID=mCurrentUser.getUserID();
  String url=""String_Node_Str"" + userID;
  JSONArray userPreferences=sharedPreferencesMethods.RetrieveSharedPreference(sharedPreferencesMethods.LIST_ITEM_PREFERENCE,sharedPreferencesMethods.LIST_ITEM_PREFERENCE_KEY,this);
  JSONObject jso=new JSONObject();
  try {
    jso.put(ApiConstants.USER_ITEMS,userPreferences);
  }
 catch (  JSONException e) {
    Log.e(TAG,e.getMessage());
  }
  JsonObjectRequest putItemsRequest=new JsonObjectRequest(Request.Method.PUT,url,jso,new Response.Listener<JSONObject>(){
    @Override public void onResponse(    JSONObject response){
      mPutResponse=response;
    }
  }
,new Response.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
      requestMethods.updateDisplayForError();
    }
  }
);
  queue.add(putItemsRequest);
}"
40719,"@Override public void onResume(){
  super.onResume();
  mCheckBox=(CheckBox)getView().findViewById(R.id.checkBox);
  mNextButton=(Button)getView().findViewById(R.id.nextButton);
  mCancelButton=(Button)getView().findViewById(R.id.cancelButton);
  mCheckBox.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mCheckBox.isChecked()) {
        mNextButton.setVisibility(View.VISIBLE);
      }
 else {
        mNextButton.setVisibility(View.INVISIBLE);
      }
    }
  }
);
  mNextButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mCallback.onTermsClicked();
    }
  }
);
  mCancelButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mCallback.onTermsCancelled();
    }
  }
);
}","@Override public void onResume(){
  super.onResume();
  mCheckBox=(CheckBox)getView().findViewById(R.id.checkBox);
  mNextButton=(Button)getView().findViewById(R.id.nextButton);
  mCancelButton=(TextView)getView().findViewById(R.id.cancelButton);
  mLearnMoreButton=(TextView)getView().findViewById(R.id.learnMoreButton);
  mCheckBox.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mCheckBox.isChecked()) {
        mNextButton.setVisibility(View.VISIBLE);
      }
 else {
        mNextButton.setVisibility(View.INVISIBLE);
      }
    }
  }
);
  mNextButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mCallback.onTermsClicked();
    }
  }
);
  mCancelButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mCallback.onTermsCancelled();
    }
  }
);
  if (mLearnMoreButton != null) {
    mLearnMoreButton.setMovementMethod(LinkMovementMethod.getInstance());
  }
}"
40720,"@SubscribeEvent public void onServerTick(TickEvent.ServerTickEvent event){
  final MinecraftServer server=FMLCommonHandler.instance().getMinecraftServerInstance();
  final World world=server.getEntityWorld();
  if (Reference.pauseForPlayers && world.playerEntities.size() > 0)   return;
  if (Reference.maxChunksLoaded <= getChunksLoaded(server))   return;
  if (!Reference.toGenerate.isEmpty()) {
    chunkQueue+=Reference.numChunksPerTick;
    while (chunkQueue > 1) {
      chunkQueue--;
      chunksGenerated++;
      ChunkPosition cp=Reference.toGenerate.poll();
      if (cp != null) {
        Utilities.generateChunk(server,cp.getX(),cp.getZ(),cp.getDimensionID());
        if (chunksGenerated % Reference.updateDelay == 0) {
          float completedPercentage=1 - (float)Reference.toGenerate.size() / (float)Reference.startingSize;
          Reference.logger.info(String.format(""String_Node_Str"",completedPercentage));
          cp.getICommandSender().addChatMessage(new TextComponentTranslation(""String_Node_Str"",completedPercentage * 100));
          ConfigurationHandler.UpdateSkipChunks();
        }
        if (cp.logToChat()) {
          cp.getICommandSender().addChatMessage(new TextComponentTranslation(""String_Node_Str"",cp.getX(),cp.getZ(),DimensionManager.getProviderType(cp.getDimensionID()) != null ? DimensionManager.getProviderType(cp.getDimensionID()).getName() : cp.getDimensionID()));
        }
        if (Reference.toGenerate.peek() == null) {
          TextComponentTranslation chatTranslation=new TextComponentTranslation(""String_Node_Str"");
          server.addChatMessage(chatTranslation);
          cp.getICommandSender().addChatMessage(new TextComponentString(chatTranslation.getUnformattedComponentText()));
        }
      }
      Reference.skipChunks++;
    }
  }
}","@SubscribeEvent public void onServerTick(TickEvent.ServerTickEvent event){
  final MinecraftServer server=FMLCommonHandler.instance().getMinecraftServerInstance();
  final World world=server.getEntityWorld();
  if (Reference.pauseForPlayers && world.playerEntities.size() > 0)   return;
  if (Reference.maxChunksLoaded <= getChunksLoaded(server))   return;
  if (!Reference.toGenerate.isEmpty()) {
    chunkQueue+=Reference.numChunksPerTick;
    while (chunkQueue > 1) {
      chunkQueue--;
      chunksGenerated++;
      ChunkPosition cp=Reference.toGenerate.poll();
      if (cp != null) {
        Utilities.generateChunk(server,cp.getX(),cp.getZ(),cp.getDimensionID());
        if (chunksGenerated % Reference.updateDelay == 0) {
          double completedPercentage=1 - (double)Reference.toGenerate.size() / (double)Reference.startingSize;
          Reference.logger.info(String.format(""String_Node_Str"",completedPercentage));
          cp.getICommandSender().addChatMessage(new TextComponentString(String.format(""String_Node_Str"",completedPercentage)));
          ConfigurationHandler.UpdateSkipChunks();
        }
        if (cp.logToChat()) {
          cp.getICommandSender().addChatMessage(new TextComponentTranslation(""String_Node_Str"",cp.getX(),cp.getZ(),DimensionManager.getProviderType(cp.getDimensionID()) != null ? DimensionManager.getProviderType(cp.getDimensionID()).getName() : cp.getDimensionID()));
        }
        if (Reference.toGenerate.peek() == null) {
          TextComponentTranslation chatTranslation=new TextComponentTranslation(""String_Node_Str"");
          server.addChatMessage(chatTranslation);
          cp.getICommandSender().addChatMessage(new TextComponentString(chatTranslation.getUnformattedComponentText()));
        }
      }
      Reference.skipChunks++;
    }
  }
}"
40721,"public static void generateChunk(MinecraftServer server,int x,int z,int dimensionID){
  ChunkProviderServer cps=server.worldServerForDimension(dimensionID).getChunkProvider();
  if (!chunkPrepared(cps,x,z,dimensionID)) {
    cps.loadChunk(x,z);
    cps.loadChunk(x,z + 1);
    cps.loadChunk(x + 1,z);
    cps.loadChunk(x + 1,z + 1);
  }
}","public static void generateChunk(MinecraftServer server,int x,int z,int dimensionID){
  ChunkProviderServer cps=server.worldServerForDimension(dimensionID).getChunkProvider();
  if (!chunkPrepared(cps,x,z,dimensionID)) {
    cps.provideChunk(x,z).needsSaving(true);
    cps.provideChunk(x,z + 1).needsSaving(true);
    cps.provideChunk(x + 1,z).needsSaving(true);
    cps.provideChunk(x + 1,z + 1).needsSaving(true);
  }
}"
40722,"public static TestSuite suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(AttributionTest.class);
  suite.addTestSuite(CollectionTest.class);
  suite.addTestSuite(FeatureTest.class);
  suite.addTestSuite(GraticuleTest.class);
  suite.addTestSuite(MapTest.class);
  suite.addTestSuite(OverlayTest.class);
  suite.addTestSuite(SphereTest.class);
  suite.addTestSuite(ViewTest.class);
  suite.addTestSuite(ol.control.AttributionTest.class);
  suite.addTestSuite(FullScreenTest.class);
  suite.addTestSuite(MousePositionTest.class);
  suite.addTestSuite(OverviewMapTest.class);
  suite.addTestSuite(RotateTest.class);
  suite.addTestSuite(ScaleLineTest.class);
  suite.addTestSuite(ZoomSliderTest.class);
  suite.addTestSuite(ZoomToExtentTest.class);
  suite.addTestSuite(ConditionTest.class);
  suite.addTestSuite(GeoJSONTest.class);
  suite.addTestSuite(CircleTest.class);
  suite.addTestSuite(GeometryCollectionTest.class);
  suite.addTestSuite(PointTest.class);
  suite.addTestSuite(DoubleClickZoomTest.class);
  suite.addTestSuite(DragAndDropTest.class);
  suite.addTestSuite(DragBoxTest.class);
  suite.addTestSuite(DragPanTest.class);
  suite.addTestSuite(DragRotateAndZoomTest.class);
  suite.addTestSuite(DragRotateTest.class);
  suite.addTestSuite(DragZoomTest.class);
  suite.addTestSuite(DrawTest.class);
  suite.addTestSuite(ExtentTest.class);
  suite.addTestSuite(KeyboardPanTest.class);
  suite.addTestSuite(KeyboardZoomTest.class);
  suite.addTestSuite(ModifyTest.class);
  suite.addTestSuite(MouseWheelZoomTest.class);
  suite.addTestSuite(PinchRotateTest.class);
  suite.addTestSuite(PinchZoomTest.class);
  suite.addTestSuite(SelectTest.class);
  suite.addTestSuite(SnapTest.class);
  suite.addTestSuite(TranslateTest.class);
  suite.addTestSuite(ol.layer.ImageTest.class);
  suite.addTestSuite(LayerGroupTest.class);
  suite.addTestSuite(ol.layer.TileTest.class);
  suite.addTestSuite(ol.layer.VectorTest.class);
  suite.addTestSuite(ImageArcGISRestTest.class);
  suite.addTestSuite(TileWMSTest.class);
  suite.addTestSuite(ProjectionTest.class);
  suite.addTestSuite(RegularShapeTest.class);
  return suite;
}","public static TestSuite suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(AttributionTest.class);
  suite.addTestSuite(CollectionTest.class);
  suite.addTestSuite(FeatureTest.class);
  suite.addTestSuite(GraticuleTest.class);
  suite.addTestSuite(MapTest.class);
  suite.addTestSuite(OverlayTest.class);
  suite.addTestSuite(SphereTest.class);
  suite.addTestSuite(ViewTest.class);
  suite.addTestSuite(ol.color.ColorTest.class);
  suite.addTestSuite(ol.control.AttributionTest.class);
  suite.addTestSuite(FullScreenTest.class);
  suite.addTestSuite(MousePositionTest.class);
  suite.addTestSuite(OverviewMapTest.class);
  suite.addTestSuite(RotateTest.class);
  suite.addTestSuite(ScaleLineTest.class);
  suite.addTestSuite(ZoomSliderTest.class);
  suite.addTestSuite(ZoomToExtentTest.class);
  suite.addTestSuite(ConditionTest.class);
  suite.addTestSuite(GeoJSONTest.class);
  suite.addTestSuite(CircleTest.class);
  suite.addTestSuite(GeometryCollectionTest.class);
  suite.addTestSuite(PointTest.class);
  suite.addTestSuite(DoubleClickZoomTest.class);
  suite.addTestSuite(DragAndDropTest.class);
  suite.addTestSuite(DragBoxTest.class);
  suite.addTestSuite(DragPanTest.class);
  suite.addTestSuite(DragRotateAndZoomTest.class);
  suite.addTestSuite(DragRotateTest.class);
  suite.addTestSuite(DragZoomTest.class);
  suite.addTestSuite(DrawTest.class);
  suite.addTestSuite(ExtentTest.class);
  suite.addTestSuite(KeyboardPanTest.class);
  suite.addTestSuite(KeyboardZoomTest.class);
  suite.addTestSuite(ModifyTest.class);
  suite.addTestSuite(MouseWheelZoomTest.class);
  suite.addTestSuite(PinchRotateTest.class);
  suite.addTestSuite(PinchZoomTest.class);
  suite.addTestSuite(SelectTest.class);
  suite.addTestSuite(SnapTest.class);
  suite.addTestSuite(TranslateTest.class);
  suite.addTestSuite(ol.layer.ImageTest.class);
  suite.addTestSuite(LayerGroupTest.class);
  suite.addTestSuite(ol.layer.TileTest.class);
  suite.addTestSuite(ol.layer.VectorTest.class);
  suite.addTestSuite(ImageArcGISRestTest.class);
  suite.addTestSuite(TileWMSTest.class);
  suite.addTestSuite(ProjectionTest.class);
  suite.addTestSuite(RegularShapeTest.class);
  return suite;
}"
40723,"@Test public void testFilterVariantCallsFn(){
  Map<String,ListValue> passingFilter=new HashMap<String,ListValue>();
  passingFilter.put(TransformNonVariantSegmentData.FILTER_FIELD,ListValue.newBuilder().addValues(Value.newBuilder().setStringValue(TransformNonVariantSegmentData.PASSING_FILTER).build()).build());
  VariantCall call1=VariantCall.newBuilder().putAllInfo(passingFilter).build();
  Map<String,ListValue> failingFilter=new HashMap<String,ListValue>();
  failingFilter.put(TransformNonVariantSegmentData.FILTER_FIELD,ListValue.newBuilder().addValues(Value.newBuilder().setStringValue(""String_Node_Str"").build()).build());
  VariantCall call2=VariantCall.newBuilder().putAllInfo(failingFilter).build();
  Map<String,ListValue> ambiguousFilter=new HashMap<String,ListValue>();
  ambiguousFilter.put(TransformNonVariantSegmentData.FILTER_FIELD,ListValue.newBuilder().addValues(Value.newBuilder().setStringValue(""String_Node_Str"").build()).addValues(Value.newBuilder().setStringValue(TransformNonVariantSegmentData.PASSING_FILTER).build()).build());
  VariantCall call3=VariantCall.newBuilder().putAllInfo(ambiguousFilter).build();
  Variant inputVariant=Variant.newBuilder().addAllCalls(Arrays.asList(call1,call2,call3)).build();
  Variant expectedVariant=Variant.newBuilder().addAllCalls(Arrays.asList(call1,call3)).build();
  DoFnTester<Variant,Variant> filterCallsFn=DoFnTester.of(new FilterCallsFn());
  Assert.assertThat(filterCallsFn.processBatch(inputVariant),CoreMatchers.allOf(CoreMatchers.hasItems(expectedVariant)));
}","@Test public void testFilterVariantCallsFn(){
  DoFnTester<Variant,Variant> filterCallsFn=DoFnTester.of(new FilterCallsFn());
  Map<String,ListValue> passingFilter=new HashMap<String,ListValue>();
  passingFilter.put(TransformNonVariantSegmentData.FILTER_FIELD,ListValue.newBuilder().addValues(Value.newBuilder().setStringValue(TransformNonVariantSegmentData.PASSING_FILTER).build()).build());
  VariantCall call1=VariantCall.newBuilder().putAllInfo(passingFilter).build();
  Map<String,ListValue> failingFilter=new HashMap<String,ListValue>();
  failingFilter.put(TransformNonVariantSegmentData.FILTER_FIELD,ListValue.newBuilder().addValues(Value.newBuilder().setStringValue(""String_Node_Str"").build()).build());
  VariantCall call2=VariantCall.newBuilder().putAllInfo(failingFilter).build();
  Map<String,ListValue> ambiguousFilter=new HashMap<String,ListValue>();
  ambiguousFilter.put(TransformNonVariantSegmentData.FILTER_FIELD,ListValue.newBuilder().addValues(Value.newBuilder().setStringValue(""String_Node_Str"").build()).addValues(Value.newBuilder().setStringValue(TransformNonVariantSegmentData.PASSING_FILTER).build()).build());
  VariantCall call3=VariantCall.newBuilder().putAllInfo(ambiguousFilter).build();
  Variant inputVariant=Variant.newBuilder().setReferenceBases(""String_Node_Str"").addAlternateBases(""String_Node_Str"").addAllCalls(Arrays.asList(call1,call2,call3)).build();
  Variant expectedVariant=Variant.newBuilder().setReferenceBases(""String_Node_Str"").addAlternateBases(""String_Node_Str"").addAllCalls(Arrays.asList(call1,call3)).build();
  Iterator<Variant> filtered1=filterCallsFn.processBatch(inputVariant).iterator();
  assertEquals(filtered1.next(),expectedVariant);
  assertFalse(filtered1.hasNext());
  Variant inputBlockRecord=Variant.newBuilder().setReferenceBases(""String_Node_Str"").addAllCalls(Arrays.asList(call1,call2,call3)).build();
  Variant expectedBlockRecord=Variant.newBuilder().setReferenceBases(""String_Node_Str"").addAllCalls(Arrays.asList(call1,call2,call3)).build();
  Iterator<Variant> filtered2=filterCallsFn.processBatch(inputBlockRecord).iterator();
  assertEquals(filtered2.next(),expectedBlockRecord);
  assertFalse(filtered2.hasNext());
}"
40724,"public static void main(String[] args) throws IOException, GeneralSecurityException {
  PipelineOptionsFactory.register(TransformNonVariantSegmentData.Options.class);
  TransformNonVariantSegmentData.Options options=PipelineOptionsFactory.fromArgs(args).withValidation().as(TransformNonVariantSegmentData.Options.class);
  Preconditions.checkState(options.getHasNonVariantSegments(),""String_Node_Str"" + ""String_Node_Str"");
  OfflineAuth auth=GenomicsOptions.Methods.getGenomicsAuth(options);
  List<StreamVariantsRequest> requests=options.isAllReferences() ? ShardUtils.getVariantRequests(options.getVariantSetId(),ShardUtils.SexChromosomeFilter.EXCLUDE_XY,options.getBasesPerShard(),auth) : ShardUtils.getVariantRequests(options.getVariantSetId(),options.getReferences(),options.getBasesPerShard());
  Pipeline p=Pipeline.create(options);
  PCollection<Variant> variants=p.begin().apply(Create.of(requests)).apply(new VariantStreamer(auth,ShardBoundary.Requirement.STRICT,null));
  PCollection<Variant> filteredVariants=options.getOmitLowQualityCalls() ? variants.apply(ParDo.of(new FilterCallsFn())) : variants;
  JoinNonVariantSegmentsWithVariants.joinVariantsTransform(filteredVariants).apply(ParDo.of(new FlagVariantsWithAmbiguousCallsFn())).apply(ParDo.of(new FormatVariantsFn())).apply(BigQueryIO.Write.to(options.getOutputTable()).withSchema(getTableSchema()).withCreateDisposition(BigQueryIO.Write.CreateDisposition.CREATE_IF_NEEDED).withWriteDisposition(BigQueryIO.Write.WriteDisposition.WRITE_TRUNCATE));
  p.run();
}","public static void main(String[] args) throws IOException, GeneralSecurityException {
  PipelineOptionsFactory.register(TransformNonVariantSegmentData.Options.class);
  TransformNonVariantSegmentData.Options options=PipelineOptionsFactory.fromArgs(args).withValidation().as(TransformNonVariantSegmentData.Options.class);
  Preconditions.checkState(options.getHasNonVariantSegments(),""String_Node_Str"" + ""String_Node_Str"");
  OfflineAuth auth=GenomicsOptions.Methods.getGenomicsAuth(options);
  List<StreamVariantsRequest> requests=options.isAllReferences() ? ShardUtils.getVariantRequests(options.getVariantSetId(),ShardUtils.SexChromosomeFilter.INCLUDE_XY,options.getBasesPerShard(),auth) : ShardUtils.getVariantRequests(options.getVariantSetId(),options.getReferences(),options.getBasesPerShard());
  Pipeline p=Pipeline.create(options);
  PCollection<Variant> variants=p.begin().apply(Create.of(requests)).apply(new VariantStreamer(auth,ShardBoundary.Requirement.STRICT,null));
  PCollection<Variant> filteredVariants=options.getOmitLowQualityCalls() ? variants.apply(ParDo.of(new FilterCallsFn())) : variants;
  JoinNonVariantSegmentsWithVariants.joinVariantsTransform(filteredVariants).apply(ParDo.of(new FlagVariantsWithAmbiguousCallsFn())).apply(ParDo.of(new FormatVariantsFn())).apply(BigQueryIO.Write.to(options.getOutputTable()).withSchema(getTableSchema()).withCreateDisposition(BigQueryIO.Write.CreateDisposition.CREATE_IF_NEEDED).withWriteDisposition(BigQueryIO.Write.WriteDisposition.WRITE_TRUNCATE));
  p.run();
}"
40725,"@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  if (!config.modEnabled) {
    return;
  }
  debug(String.valueOf(config.disableProximity));
  if (!config.disableProximity) {
    return;
  }
  int device_type=(int)param.args[0];
  if (device_type == 8) {
    param.setResult(null);
  }
  return;
}","@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  if (!config.modEnabled) {
    return;
  }
  debug(String.valueOf(config.disableProximity));
  if (!config.disableProximity) {
    return;
  }
  int sensorType=(int)param.args[0];
  if (sensorType == Sensor.TYPE_PROXIMITY) {
    param.setResult(null);
  }
  return;
}"
40726,"@Override public void handleLoadPackage(final XC_LoadPackage.LoadPackageParam lpp) throws Throwable {
  if (lpp.packageName.equals(BuildConfig.APPLICATION_ID)) {
    findAndHookMethod(XApp.class,""String_Node_Str"",XC_MethodReplacement.returnConstant(true));
  }
  if (!lpp.packageName.equals(HANGOUTS_PKG_NAME)) {
    return;
  }
  Object activityThread=callStaticMethod(ACTIVITY_THREAD,ACTIVITY_THREAD_CURRENTACTHREAD);
  Context systemCtx=(Context)callMethod(activityThread,ACTIVITY_THREAD_GETSYSCTX);
  config.reload(systemCtx);
  if (!config.modEnabled) {
    return;
  }
  debug(""String_Node_Str"",false);
  debug(String.format(""String_Node_Str"",BuildConfig.VERSION_NAME,BuildConfig.VERSION_CODE),false);
  final PackageInfo pi=systemCtx.getPackageManager().getPackageInfo(HANGOUTS_PKG_NAME,0);
  debug(String.format(""String_Node_Str"",pi.versionName,pi.versionCode),false);
  if (pi.versionCode > TESTED_VERSION_INT + VERSION_TOLERANCE || pi.versionCode < TESTED_VERSION_INT - VERSION_TOLERANCE) {
    log(String.format(""String_Node_Str"",TESTED_VERSION_STR,TESTED_VERSION_INT),false);
  }
  for (  Module mod : modules) {
    try {
      mod.hook(lpp.classLoader);
    }
 catch (    ClassNotFoundError|InvocationTargetError|NoSuchMethodError ex) {
      log(""String_Node_Str"" + ex.getClass().getSimpleName() + ""String_Node_Str""+ mod.getClass().getSimpleName()+ ""String_Node_Str"",false);
      debug(ex);
    }
  }
  debug(""String_Node_Str"",false);
}","@Override public void handleLoadPackage(final XC_LoadPackage.LoadPackageParam lpp) throws Throwable {
  if (lpp.packageName.equals(BuildConfig.APPLICATION_ID)) {
    findAndHookMethod(XApp.class.getName(),lpp.classLoader,""String_Node_Str"",XC_MethodReplacement.returnConstant(true));
    return;
  }
  if (!lpp.packageName.equals(HANGOUTS_PKG_NAME)) {
    return;
  }
  Object activityThread=callStaticMethod(ACTIVITY_THREAD,ACTIVITY_THREAD_CURRENTACTHREAD);
  Context systemCtx=(Context)callMethod(activityThread,ACTIVITY_THREAD_GETSYSCTX);
  config.reload(systemCtx);
  if (!config.modEnabled) {
    return;
  }
  debug(""String_Node_Str"",false);
  debug(String.format(""String_Node_Str"",BuildConfig.VERSION_NAME,BuildConfig.VERSION_CODE),false);
  final PackageInfo pi=systemCtx.getPackageManager().getPackageInfo(HANGOUTS_PKG_NAME,0);
  debug(String.format(""String_Node_Str"",pi.versionName,pi.versionCode),false);
  if (pi.versionCode > TESTED_VERSION_INT + VERSION_TOLERANCE || pi.versionCode < TESTED_VERSION_INT - VERSION_TOLERANCE) {
    log(String.format(""String_Node_Str"",TESTED_VERSION_STR,TESTED_VERSION_INT),false);
  }
  for (  Module mod : modules) {
    try {
      mod.hook(lpp.classLoader);
    }
 catch (    ClassNotFoundError|InvocationTargetError|NoSuchMethodError ex) {
      log(""String_Node_Str"" + ex.getClass().getSimpleName() + ""String_Node_Str""+ mod.getClass().getSimpleName()+ ""String_Node_Str"",false);
      debug(ex);
    }
  }
  debug(""String_Node_Str"",false);
}"
40727,"public void reload(Context ctx){
  if (lastReload + RELOAD_INTERVAL > SystemClock.elapsedRealtime()) {
    return;
  }
  Cursor prefs=ctx.getContentResolver().query(ALL_PREFS_URI,null,null,null,null);
  if (prefs == null) {
    XposedBridge.log(""String_Node_Str"");
    return;
  }
  while (prefs.moveToNext()) {
switch (Setting.fromString(prefs.getString(SettingsProvider.QUERY_ALL_KEY))) {
case MOD_ENABLED:
      modEnabled=prefs.getInt(SettingsProvider.QUERY_ALL_VALUE) == SettingsProvider.TRUE;
    continue;
case MMS_RESIZE_ENABLED:
  resizing=prefs.getInt(SettingsProvider.QUERY_ALL_VALUE) == SettingsProvider.TRUE;
continue;
case MMS_ROTATE_ENABLED:
rotation=prefs.getInt(SettingsProvider.QUERY_ALL_VALUE) == SettingsProvider.TRUE;
continue;
case MMS_ROTATE_MODE:
rotateMode=prefs.getInt(SettingsProvider.QUERY_ALL_VALUE);
continue;
case MMS_SCALE_WIDTH:
imageWidth=prefs.getInt(SettingsProvider.QUERY_ALL_VALUE);
continue;
case MMS_SCALE_HEIGHT:
imageHeight=prefs.getInt(SettingsProvider.QUERY_ALL_VALUE);
continue;
case MMS_IMAGE_TYPE:
imageFormat=Setting.ImageFormat.fromInt(prefs.getInt(SettingsProvider.QUERY_ALL_VALUE));
continue;
case MMS_IMAGE_QUALITY:
imageQuality=prefs.getInt(SettingsProvider.QUERY_ALL_VALUE);
continue;
case MMS_APN_SPLICING_ENABLED:
apnSplicing=prefs.getInt(SettingsProvider.QUERY_ALL_VALUE) == SettingsProvider.TRUE;
continue;
case MMS_APN_SPLICING_APN_CONFIG_PRESET:
apnPreset=Setting.ApnPreset.fromInt(prefs.getInt(SettingsProvider.QUERY_ALL_VALUE));
continue;
case MMS_APN_SPLICING_APN_CONFIG_MMSC:
mmsc=prefs.getString(SettingsProvider.QUERY_ALL_VALUE);
continue;
case MMS_APN_SPLICING_APN_CONFIG_PROXY_HOSTNAME:
proxyHost=prefs.getString(SettingsProvider.QUERY_ALL_VALUE);
continue;
case MMS_APN_SPLICING_APN_CONFIG_PROXY_PORT:
proxyPort=prefs.getInt(SettingsProvider.QUERY_ALL_VALUE);
continue;
case UI_ENTER_KEY:
enterKey=Setting.UiEnterKey.fromInt(prefs.getInt(SettingsProvider.QUERY_ALL_VALUE));
continue;
case UI_ATTACH_ANYTIME:
attachAnytime=prefs.getInt(SettingsProvider.QUERY_ALL_VALUE) == SettingsProvider.TRUE;
continue;
case UI_HIDE_CALL_BUTTONS:
hideCallButtons=prefs.getInt(SettingsProvider.QUERY_ALL_VALUE) == SettingsProvider.TRUE;
continue;
case UI_APP_COLOR:
appColor=Setting.AppColor.fromInt(prefs.getInt(SettingsProvider.QUERY_ALL_VALUE));
continue;
case DEBUG:
debug=prefs.getInt(SettingsProvider.QUERY_ALL_VALUE) == SettingsProvider.TRUE;
}
}
prefs.close();
}","public void reload(Context ctx){
  if (lastReload + RELOAD_INTERVAL > SystemClock.elapsedRealtime()) {
    return;
  }
  Cursor prefs=ctx.getContentResolver().query(ALL_PREFS_URI,null,null,null,null);
  if (prefs == null) {
    XposedBridge.log(""String_Node_Str"");
    return;
  }
  while (prefs.moveToNext()) {
switch (Setting.fromString(prefs.getString(SettingsProvider.QUERY_ALL_KEY))) {
case MOD_ENABLED:
      modEnabled=prefs.getInt(SettingsProvider.QUERY_ALL_VALUE) == SettingsProvider.TRUE;
    continue;
case MMS_RESIZE_ENABLED:
  resizing=prefs.getInt(SettingsProvider.QUERY_ALL_VALUE) == SettingsProvider.TRUE;
continue;
case MMS_ROTATE_ENABLED:
rotation=prefs.getInt(SettingsProvider.QUERY_ALL_VALUE) == SettingsProvider.TRUE;
continue;
case MMS_ROTATE_MODE:
rotateMode=prefs.getInt(SettingsProvider.QUERY_ALL_VALUE);
continue;
case MMS_SCALE_WIDTH:
imageWidth=prefs.getInt(SettingsProvider.QUERY_ALL_VALUE);
continue;
case MMS_SCALE_HEIGHT:
imageHeight=prefs.getInt(SettingsProvider.QUERY_ALL_VALUE);
continue;
case MMS_IMAGE_TYPE:
imageFormat=Setting.ImageFormat.fromInt(prefs.getInt(SettingsProvider.QUERY_ALL_VALUE));
continue;
case MMS_IMAGE_QUALITY:
imageQuality=prefs.getInt(SettingsProvider.QUERY_ALL_VALUE);
continue;
case MMS_APN_SPLICING_ENABLED:
apnSplicing=prefs.getInt(SettingsProvider.QUERY_ALL_VALUE) == SettingsProvider.TRUE;
continue;
case MMS_APN_SPLICING_APN_CONFIG_PRESET:
apnPreset=Setting.ApnPreset.fromInt(prefs.getInt(SettingsProvider.QUERY_ALL_VALUE));
continue;
case MMS_APN_SPLICING_APN_CONFIG_MMSC:
mmsc=prefs.getString(SettingsProvider.QUERY_ALL_VALUE);
continue;
case MMS_APN_SPLICING_APN_CONFIG_PROXY_HOSTNAME:
proxyHost=prefs.getString(SettingsProvider.QUERY_ALL_VALUE);
continue;
case MMS_APN_SPLICING_APN_CONFIG_PROXY_PORT:
proxyPort=prefs.getInt(SettingsProvider.QUERY_ALL_VALUE);
continue;
case UI_ENTER_KEY:
enterKey=Setting.UiEnterKey.fromInt(prefs.getInt(SettingsProvider.QUERY_ALL_VALUE));
continue;
case UI_ATTACH_ANYTIME:
attachAnytime=prefs.getInt(SettingsProvider.QUERY_ALL_VALUE) == SettingsProvider.TRUE;
continue;
case UI_HIDE_CALL_BUTTONS:
hideCallButtons=prefs.getInt(SettingsProvider.QUERY_ALL_VALUE) == SettingsProvider.TRUE;
continue;
case UI_APP_COLOR:
appColor=Setting.AppColor.fromInt(prefs.getInt(SettingsProvider.QUERY_ALL_VALUE));
continue;
case DEBUG:
debug=prefs.getInt(SettingsProvider.QUERY_ALL_VALUE) == SettingsProvider.TRUE;
}
}
prefs.close();
lastReload=SystemClock.elapsedRealtime();
}"
40728,"@Override public void handleLoadPackage(final XC_LoadPackage.LoadPackageParam loadPackageParam) throws Throwable {
  if (loadPackageParam.packageName.equals(BuildConfig.PACKAGE_NAME)) {
    XposedHelpers.findAndHookMethod(XApp.class.getCanonicalName(),loadPackageParam.classLoader,""String_Node_Str"",XC_MethodReplacement.returnConstant(true));
  }
  if (!loadPackageParam.packageName.equals(HANGOUTS_PKG_NAME)) {
    return;
  }
  Object activityThread=XposedHelpers.callStaticMethod(XposedHelpers.findClass(ACTIVITY_THREAD_CLASS,null),ACTIVITY_THREAD_CURRENTACTHREAD);
  final Context systemCtx=(Context)XposedHelpers.callMethod(activityThread,ACTIVITY_THREAD_GETSYSCTX);
  Config.reload(systemCtx);
  if (!Config.modEnabled) {
    return;
  }
  debug(""String_Node_Str"",false);
  debug(String.format(""String_Node_Str"",BuildConfig.VERSION_NAME,BuildConfig.VERSION_CODE),false);
  PackageInfo pi=systemCtx.getPackageManager().getPackageInfo(HANGOUTS_PKG_NAME,0);
  debug(String.format(""String_Node_Str"",pi.versionName,pi.versionCode),false);
  if (pi.versionCode != TESTED_VERSION_INT) {
    log(String.format(""String_Node_Str"",TESTED_VERSION_STR,TESTED_VERSION_INT));
  }
  XposedHelpers.findAndHookMethod(HANGOUTS_ESAPP_CLASS,loadPackageParam.classLoader,HANGOUTS_ESAPP_ONCREATE,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      debug(""String_Node_Str"");
      hangoutsCtx=new WeakReference<Context>((Context)param.thisObject);
    }
  }
);
  XposedHelpers.findAndHookMethod(HANGOUTS_PROCESS_MMS_IMG_CLASS,loadPackageParam.classLoader,HANGOUTS_PROCESS_MMS_IMG_METHOD,int.class,int.class,int.class,int.class,Uri.class,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      Config.reload(systemCtx);
      if (!Config.modEnabled || !Config.resizing) {
        return;
      }
      final int maxWidth=(Integer)param.args[1];
      final int maxHeight=(Integer)param.args[2];
      final Uri imgUri=(Uri)param.args[4];
      debug(String.format(""String_Node_Str"",maxWidth,maxHeight,imgUri,param.args[0],param.args[3]));
      ContentResolver esAppResolver=hangoutsCtx.get().getContentResolver();
      InputStream imgStream=esAppResolver.openInputStream(imgUri);
      BitmapFactory.Options options=new BitmapFactory.Options();
      options.inJustDecodeBounds=true;
      BitmapFactory.decodeStream(imgStream,null,options);
      imgStream.close();
      int srcW=options.outWidth;
      int srcH=options.outHeight;
      debug(String.format(""String_Node_Str"",srcW,srcH));
      int rotation=0;
      if (Config.rotation) {
        rotation=Config.rotateMode;
        if (rotation == -1) {
          String scratchId=imgUri.getPathSegments().get(1);
          String filePath=(String)XposedHelpers.callStaticMethod(XposedHelpers.findClass(HANGOUTS_ESPROVIDER_CLASS,loadPackageParam.classLoader),HANGOUTS_ESPROVIDER_GET_SCRATCH_FILE,scratchId);
          debug(String.format(""String_Node_Str"",filePath));
          ExifInterface exif=new ExifInterface(filePath);
switch (exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,ExifInterface.ORIENTATION_NORMAL)) {
case ExifInterface.ORIENTATION_ROTATE_90:
            rotation=90;
          break;
case ExifInterface.ORIENTATION_ROTATE_180:
        rotation=180;
      break;
case ExifInterface.ORIENTATION_ROTATE_270:
    rotation=270;
  break;
default :
rotation=0;
}
}
if (rotation != 0) {
Matrix imgMatrix=new Matrix();
imgMatrix.postRotate(rotation);
RectF imgRect=new RectF();
imgMatrix.mapRect(imgRect,new RectF(0,0,srcW,srcH));
srcW=Math.round(imgRect.width());
srcH=Math.round(imgRect.height());
debug(String.format(""String_Node_Str"",srcW,srcH,rotation));
}
}
int inSS=1;
while ((srcW / 2 > maxWidth) || (srcH / 2 > maxHeight)) {
srcW/=2;
srcH/=2;
inSS*=2;
}
float scale=((float)(srcW > srcH ? maxWidth : maxHeight)) / (srcW > srcH ? srcW : srcH);
debug(String.format(""String_Node_Str"",srcW,srcH,inSS,scale));
options.inJustDecodeBounds=false;
options.inDither=false;
options.inSampleSize=inSS;
options.inScaled=false;
options.inPreferredConfig=Bitmap.Config.ARGB_8888;
imgStream=esAppResolver.openInputStream(imgUri);
Bitmap sampled=BitmapFactory.decodeStream(imgStream,null,options);
imgStream.close();
debug(String.format(""String_Node_Str"",sampled.getWidth(),sampled.getHeight()));
Matrix m=new Matrix();
m.postScale(scale,scale);
m.postRotate(rotation);
Bitmap scaled=Bitmap.createBitmap(sampled,0,0,sampled.getWidth(),sampled.getHeight(),m,true);
sampled.recycle();
debug(String.format(""String_Node_Str"",scaled.getWidth(),scaled.getHeight()));
ByteArrayOutputStream output=new ByteArrayOutputStream();
scaled.compress(Bitmap.CompressFormat.PNG,0,output);
scaled.recycle();
param.setResult(output.toByteArray());
output.close();
debug(""String_Node_Str"");
}
}
);
Class<?> ComposeMessageView=XposedHelpers.findClass(HANGOUTS_VIEWS_COMPOSEMSGVIEW,loadPackageParam.classLoader);
XposedHelpers.findAndHookConstructor(ComposeMessageView,Context.class,AttributeSet.class,new XC_MethodHook(){
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
Config.reload((Context)param.args[0]);
if (Config.modEnabled) {
Setting.UiEnterKey enterKey=Setting.UiEnterKey.fromInt(Config.enterKey);
debug(String.format(""String_Node_Str"",enterKey.name()));
if (enterKey != Setting.UiEnterKey.EMOJI_SELECTOR) {
EditText et=(EditText)XposedHelpers.getObjectField(param.thisObject,HANGOUTS_VIEWS_COMPOSEMSGVIEW_EDITTEXT);
et.setInputType(et.getInputType() ^ InputType.TYPE_TEXT_VARIATION_SHORT_MESSAGE);
}
}
}
}
);
XposedHelpers.findAndHookMethod(ComposeMessageView,HANGOUTS_VIEWS_COMEPOSEMSGVIEW_ONEDITORACTION,TextView.class,int.class,KeyEvent.class,new XC_MethodHook(){
@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
int actionId=(Integer)param.args[1];
if (Config.modEnabled && actionId == EditorInfo.IME_NULL && Config.enterKey == Setting.UiEnterKey.NEWLINE.toInt()) {
param.setResult(false);
}
}
}
);
debug(""String_Node_Str"",false);
}","@Override public void handleLoadPackage(final XC_LoadPackage.LoadPackageParam loadPackageParam) throws Throwable {
  if (loadPackageParam.packageName.equals(BuildConfig.PACKAGE_NAME)) {
    XposedHelpers.findAndHookMethod(XApp.class.getCanonicalName(),loadPackageParam.classLoader,""String_Node_Str"",XC_MethodReplacement.returnConstant(true));
  }
  if (!loadPackageParam.packageName.equals(HANGOUTS_PKG_NAME)) {
    return;
  }
  Object activityThread=XposedHelpers.callStaticMethod(XposedHelpers.findClass(ACTIVITY_THREAD_CLASS,null),ACTIVITY_THREAD_CURRENTACTHREAD);
  final Context systemCtx=(Context)XposedHelpers.callMethod(activityThread,ACTIVITY_THREAD_GETSYSCTX);
  Config.reload(systemCtx);
  if (!Config.modEnabled) {
    return;
  }
  debug(""String_Node_Str"",false);
  debug(String.format(""String_Node_Str"",BuildConfig.VERSION_NAME,BuildConfig.VERSION_CODE),false);
  PackageInfo pi=systemCtx.getPackageManager().getPackageInfo(HANGOUTS_PKG_NAME,0);
  debug(String.format(""String_Node_Str"",pi.versionName,pi.versionCode),false);
  if (pi.versionCode != TESTED_VERSION_INT) {
    log(String.format(""String_Node_Str"",TESTED_VERSION_STR,TESTED_VERSION_INT));
  }
  XposedHelpers.findAndHookMethod(HANGOUTS_ESAPP_CLASS,loadPackageParam.classLoader,HANGOUTS_ESAPP_ONCREATE,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      debug(""String_Node_Str"");
      hangoutsCtx=new WeakReference<Context>((Context)param.thisObject);
    }
  }
);
  XposedHelpers.findAndHookMethod(HANGOUTS_PROCESS_MMS_IMG_CLASS,loadPackageParam.classLoader,HANGOUTS_PROCESS_MMS_IMG_METHOD,int.class,int.class,int.class,int.class,Uri.class,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      Config.reload(systemCtx);
      if (!Config.modEnabled || !Config.resizing) {
        return;
      }
      final int maxWidth=(Integer)param.args[1];
      final int maxHeight=(Integer)param.args[2];
      final Uri imgUri=(Uri)param.args[4];
      debug(String.format(""String_Node_Str"",maxWidth,maxHeight,imgUri,param.args[0],param.args[3]));
      ContentResolver esAppResolver=hangoutsCtx.get().getContentResolver();
      InputStream imgStream=esAppResolver.openInputStream(imgUri);
      BitmapFactory.Options options=new BitmapFactory.Options();
      options.inJustDecodeBounds=true;
      BitmapFactory.decodeStream(imgStream,null,options);
      imgStream.close();
      int srcW=options.outWidth;
      int srcH=options.outHeight;
      debug(String.format(""String_Node_Str"",srcW,srcH));
      int rotation=0;
      if (Config.rotation) {
        rotation=Config.rotateMode;
        if (rotation == -1) {
          String scratchId=imgUri.getPathSegments().get(1);
          String filePath=(String)XposedHelpers.callStaticMethod(XposedHelpers.findClass(HANGOUTS_ESPROVIDER_CLASS,loadPackageParam.classLoader),HANGOUTS_ESPROVIDER_GET_SCRATCH_FILE,scratchId);
          debug(String.format(""String_Node_Str"",filePath));
          ExifInterface exif=new ExifInterface(filePath);
switch (exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,ExifInterface.ORIENTATION_NORMAL)) {
case ExifInterface.ORIENTATION_ROTATE_90:
            rotation=90;
          break;
case ExifInterface.ORIENTATION_ROTATE_180:
        rotation=180;
      break;
case ExifInterface.ORIENTATION_ROTATE_270:
    rotation=270;
  break;
default :
rotation=0;
}
}
if (rotation != 0) {
Matrix imgMatrix=new Matrix();
imgMatrix.postRotate(rotation);
RectF imgRect=new RectF();
imgMatrix.mapRect(imgRect,new RectF(0,0,srcW,srcH));
srcW=Math.round(imgRect.width());
srcH=Math.round(imgRect.height());
debug(String.format(""String_Node_Str"",srcW,srcH,rotation));
}
}
int inSS=1;
while ((srcW / 2 > maxWidth) || (srcH / 2 > maxHeight)) {
srcW/=2;
srcH/=2;
inSS*=2;
}
float scale=((float)(srcW > srcH ? maxWidth : maxHeight)) / (srcW > srcH ? srcW : srcH);
debug(String.format(""String_Node_Str"",srcW,srcH,inSS,scale));
options.inJustDecodeBounds=false;
options.inDither=false;
options.inSampleSize=inSS;
options.inScaled=false;
options.inPreferredConfig=Bitmap.Config.ARGB_8888;
imgStream=esAppResolver.openInputStream(imgUri);
Bitmap sampled=BitmapFactory.decodeStream(imgStream,null,options);
imgStream.close();
debug(String.format(""String_Node_Str"",sampled.getWidth(),sampled.getHeight()));
Matrix m=new Matrix();
m.postScale(scale,scale);
m.postRotate(rotation);
Bitmap scaled=Bitmap.createBitmap(sampled,0,0,sampled.getWidth(),sampled.getHeight(),m,true);
sampled.recycle();
debug(String.format(""String_Node_Str"",scaled.getWidth(),scaled.getHeight()));
ByteArrayOutputStream output=new ByteArrayOutputStream();
scaled.compress(Bitmap.CompressFormat.PNG,0,output);
scaled.recycle();
param.setResult(output.toByteArray());
output.close();
debug(""String_Node_Str"");
}
}
);
Class<?> ComposeMessageView=XposedHelpers.findClass(HANGOUTS_VIEWS_COMPOSEMSGVIEW,loadPackageParam.classLoader);
XposedHelpers.findAndHookConstructor(ComposeMessageView,Context.class,AttributeSet.class,new XC_MethodHook(){
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
Config.reload((Context)param.args[0]);
if (Config.modEnabled) {
Setting.UiEnterKey enterKey=Setting.UiEnterKey.fromInt(Config.enterKey);
debug(String.format(""String_Node_Str"",enterKey.name()));
if (enterKey != Setting.UiEnterKey.EMOJI_SELECTOR) {
EditText et=(EditText)XposedHelpers.getObjectField(param.thisObject,HANGOUTS_VIEWS_COMPOSEMSGVIEW_EDITTEXT);
int inputType=et.getInputType() ^ InputType.TYPE_TEXT_VARIATION_SHORT_MESSAGE;
if (enterKey == Setting.UiEnterKey.SEND) {
inputType^=InputType.TYPE_TEXT_FLAG_MULTI_LINE;
}
et.setInputType(inputType);
}
}
}
}
);
XposedHelpers.findAndHookMethod(ComposeMessageView,HANGOUTS_VIEWS_COMEPOSEMSGVIEW_ONEDITORACTION,TextView.class,int.class,KeyEvent.class,new XC_MethodHook(){
@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
int actionId=(Integer)param.args[1];
if (Config.modEnabled && actionId == EditorInfo.IME_NULL && Config.enterKey == Setting.UiEnterKey.NEWLINE.toInt()) {
param.setResult(false);
}
}
}
);
debug(""String_Node_Str"",false);
}"
40729,"@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  Config.reload((Context)param.args[0]);
  if (Config.modEnabled) {
    Setting.UiEnterKey enterKey=Setting.UiEnterKey.fromInt(Config.enterKey);
    debug(String.format(""String_Node_Str"",enterKey.name()));
    if (enterKey != Setting.UiEnterKey.EMOJI_SELECTOR) {
      EditText et=(EditText)XposedHelpers.getObjectField(param.thisObject,HANGOUTS_VIEWS_COMPOSEMSGVIEW_EDITTEXT);
      et.setInputType(et.getInputType() ^ InputType.TYPE_TEXT_VARIATION_SHORT_MESSAGE);
    }
  }
}","@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  Config.reload((Context)param.args[0]);
  if (Config.modEnabled) {
    Setting.UiEnterKey enterKey=Setting.UiEnterKey.fromInt(Config.enterKey);
    debug(String.format(""String_Node_Str"",enterKey.name()));
    if (enterKey != Setting.UiEnterKey.EMOJI_SELECTOR) {
      EditText et=(EditText)XposedHelpers.getObjectField(param.thisObject,HANGOUTS_VIEWS_COMPOSEMSGVIEW_EDITTEXT);
      int inputType=et.getInputType() ^ InputType.TYPE_TEXT_VARIATION_SHORT_MESSAGE;
      if (enterKey == Setting.UiEnterKey.SEND) {
        inputType^=InputType.TYPE_TEXT_FLAG_MULTI_LINE;
      }
      et.setInputType(inputType);
    }
  }
}"
40730,"private String errorMessage(Object request,List<Object> recordedRequests){
  StringBuilder msg=new StringBuilder();
  msg.append(""String_Node_Str"").append(request).append(""String_Node_Str"").append(""String_Node_Str"");
  for (  Object r : recordedRequests) {
    msg.append(""String_Node_Str"").append(r.toString()).append(""String_Node_Str"").append(""String_Node_Str"");
  }
  msg.append(""String_Node_Str"").append(request).append(""String_Node_Str"");
  return msg.toString();
}","private String errorMessage(Object request,List<Object> recordedRequests){
  StringBuilder msg=new StringBuilder();
  msg.append(""String_Node_Str"").append(request).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  for (  Object r : recordedRequests) {
    msg.append(""String_Node_Str"").append(r.toString()).append(""String_Node_Str"").append(""String_Node_Str"");
  }
  msg.append(""String_Node_Str"").append(request).append(""String_Node_Str"");
  return msg.toString();
}"
40731,"@Override public Object create(Object request,SpecimenContext context){
  if (!(request instanceof SpecimenType)) {
    return new NoSpecimen();
  }
  SpecimenType type=(SpecimenType)request;
  if (!BaseDateTime.class.isAssignableFrom(type.getRawType())) {
    return new NoSpecimen();
  }
  try {
    Date date=(Date)context.resolve(Date.class);
    long instant=date.getTime();
    return type.getRawType().getDeclaredConstructor(long.class).newInstance(instant);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return new NoSpecimen();
  }
}","@Override public Object create(Object request,SpecimenContext context){
  if (!(request instanceof SpecimenType)) {
    return new NoSpecimen();
  }
  SpecimenType type=(SpecimenType)request;
  if (!BaseDateTime.class.isAssignableFrom(type.getRawType())) {
    return new NoSpecimen();
  }
  try {
    Date date=(Date)context.resolve(Date.class);
    long instant=date.getTime();
    DateTimeZone timeZone=(DateTimeZone)context.resolve(DateTimeZone.class);
    return type.getRawType().getDeclaredConstructor(long.class,DateTimeZone.class).newInstance(instant,timeZone);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return new NoSpecimen();
  }
}"
40732,"@Override public Object create(Object request,SpecimenContext context){
  if (!(request.equals(ReadablePeriod.class) || request.equals(ReadWritablePeriod.class)))   return new NoSpecimen();
  Duration duration=(Duration)context.resolve(Duration.class);
  return new MutablePeriod(duration);
}","@Override public Object create(Object request,SpecimenContext context){
  if (!(request.equals(ReadablePeriod.class) || request.equals(ReadWritablePeriod.class)))   return new NoSpecimen();
  DateTime dateA=(DateTime)context.resolve(DateTime.class);
  DateTime dateB=(DateTime)context.resolve(DateTime.class);
  if (dateA.isBefore(dateB))   return new MutablePeriod(dateA,dateB);
 else   return new MutablePeriod(dateB,dateA);
}"
40733,"@Test @Ignore(""String_Node_Str"") public void creates_instance_of_ReadablePeriod() throws ParseException {
  ReadablePeriod period=fixture.create(ReadablePeriod.class);
  assertThat(period,notNullValue());
  assertThat(period,Matchers.<ReadablePeriod>is(new MutablePeriod(8760,0,0,0)));
}","@Test public void creates_instance_of_ReadablePeriod() throws ParseException {
  ReadablePeriod period=fixture.create(ReadablePeriod.class);
  assertThat(period,notNullValue());
  assertThat(period,Matchers.<ReadablePeriod>is(new MutablePeriod(1,0,0,0,0,0,0,0)));
}"
40734,"@Test @Ignore(""String_Node_Str"") public void creates_instance_of_ReadWritablePeriod() throws ParseException {
  ReadWritablePeriod period=fixture.create(ReadWritablePeriod.class);
  assertThat(period,notNullValue());
  assertThat(period,Matchers.<ReadablePeriod>is(Period.hours(8760)));
}","@Test public void creates_instance_of_ReadWritablePeriod() throws ParseException {
  ReadWritablePeriod period=fixture.create(ReadWritablePeriod.class);
  assertThat(period,notNullValue());
  assertThat(period,Matchers.<ReadablePeriod>is(new MutablePeriod(1,0,0,0,0,0,0,0)));
}"
40735,"protected void reduce(NullWritable key,Iterable<AdmmReducerContextWritable> values,Context context) throws IOException, InterruptedException {
  for (  AdmmReducerContextWritable reducerContextWritable : values) {
    AdmmReducerContext reducerContext=reducerContextWritable.get();
    if (null == this.zUpdated) {
      this.zUpdated=reducerContext.getZUpdated();
      this.rho=reducerContext.getRho();
      this.lambda=reducerContext.getLambdaValue();
      this.count=reducerContext.getCount();
    }
 else {
      double[] zUpdated=reducerContext.getZUpdated();
      for (int i=0; i < zUpdated.length; i++) {
        this.zUpdated[i]+=zUpdated[i];
      }
      this.count+=reducerContext.getCount();
    }
  }
}","protected void reduce(NullWritable key,Iterable<AdmmReducerContextWritable> values,Context context) throws IOException, InterruptedException {
  for (  AdmmReducerContextWritable reducerContextWritable : values) {
    AdmmReducerContext reducerContext=reducerContextWritable.get();
    if (null == this.xUpdated) {
      this.xUpdated=reducerContext.getXUpdated();
      this.uInital=reducerContext.getUInitial();
      this.rho=reducerContext.getRho();
      this.lambda=reducerContext.getLambdaValue();
      this.count=reducerContext.getCount();
    }
 else {
      double[] xUpdated=reducerContext.getXUpdated();
      LOG.info(xUpdated.toString());
      for (int i=0; i < xUpdated.length; i++) {
        this.xUpdated[i]+=xUpdated[i];
      }
      double[] uInital=reducerContext.getUInitial();
      LOG.info(uInital.toString());
      for (int i=0; i < uInital.length; i++) {
        this.uInital[i]+=uInital[i];
      }
      this.count+=reducerContext.getCount();
    }
  }
}"
40736,"protected void cleanup(Context context) throws IOException, InterruptedException {
  this.zMultiplier=this.rho * this.count / (this.rho * this.count + 2 * this.lambda);
  for (int i=0; i < zUpdated.length; i++) {
    this.zUpdated[i]/=this.count;
    if (i == 0 && !regularizeIntercept) {
    }
 else {
      this.zUpdated[i]*=this.zMultiplier;
    }
  }
  Configuration conf=context.getConfiguration();
  Path outputPath=FileOutputFormat.getOutputPath(context);
  Path previousOutput=new Path(conf.get(""String_Node_Str""));
  FileSystem fs=previousOutput.getFileSystem(conf);
  double sNorm=calculateSNorm(previousOutput,zUpdated,fs,conf);
  double rNorm=calculateRNorm(outputPath,zUpdated,fs,conf);
  if (rNorm > THRESHOLD || sNorm > THRESHOLD) {
    context.getCounter(IterationCounter.ITERATION).increment(1);
  }
  double rhoMultiplier=0;
  if (rNorm > RHO_UPDATE_THRESHOLD * sNorm) {
    rhoMultiplier=RHO_INCREMENT_MULTIPLIER;
  }
 else   if (sNorm > RHO_UPDATE_THRESHOLD * rNorm) {
    rhoMultiplier=1.0 / RHO_DECREMENT_MULTIPLIER;
  }
 else {
    rhoMultiplier=1.0;
  }
  AdmmReducerContext reducerContext=new AdmmReducerContext(null,null,null,zUpdated,0.0,rho * rhoMultiplier,lambda,(long)0);
  context.write(NullWritable.get(),new AdmmReducerContextWritable(reducerContext));
}","protected void cleanup(Context context) throws IOException, InterruptedException {
  for (int i=0; i < xUpdated.length; i++) {
    xUpdated[i]/=count;
  }
  for (int i=0; i < uInital.length; i++) {
    uInital[i]/=count;
  }
  this.zMultiplier=this.rho * this.count / (this.rho * this.count + 2 * this.lambda);
  double[] zUpdated=new double[xUpdated.length];
  for (int i=0; i < zUpdated.length; i++) {
    zUpdated[i]/=this.count;
    if (i == 0 && !regularizeIntercept) {
      zUpdated[i]=xUpdated[i] + uInital[i];
    }
 else {
      zUpdated[i]=(xUpdated[i] + uInital[i]) * this.zMultiplier;
    }
  }
  Configuration conf=context.getConfiguration();
  Path outputPath=FileOutputFormat.getOutputPath(context);
  FileSystem fs=outputPath.getFileSystem(conf);
  LOG.info(""String_Node_Str"");
  double sNorm=calculateSNorm(uInital,xUpdated);
  double rNorm=calculateRNorm(outputPath,xUpdated,fs,conf);
  LOG.info(""String_Node_Str"",rNorm,sNorm);
  if (rNorm > THRESHOLD || sNorm > THRESHOLD) {
    context.getCounter(IterationCounter.ITERATION).increment(1);
    LOG.info(""String_Node_Str"",context.getCounter(IterationCounter.ITERATION).getValue());
  }
  double rhoMultiplier=0;
  if (rNorm > RHO_UPDATE_THRESHOLD * sNorm) {
    rhoMultiplier=RHO_INCREMENT_MULTIPLIER;
  }
 else   if (sNorm > RHO_UPDATE_THRESHOLD * rNorm) {
    rhoMultiplier=1.0 / RHO_DECREMENT_MULTIPLIER;
  }
 else {
    rhoMultiplier=1.0;
  }
  AdmmReducerContext reducerContext=new AdmmReducerContext(null,null,null,zUpdated,0.0,rho * rhoMultiplier,lambda,(long)0);
  context.write(NullWritable.get(),new AdmmReducerContextWritable(reducerContext));
}"
40737,"private double calculateSNorm(Path previousOutput,double[] xUpdated,FileSystem fs,Configuration conf) throws IOException {
  LOG.info(""String_Node_Str"");
  double result=calculateS(previousOutput,fs,conf,xUpdated);
  result*=Math.pow(rho,2);
  result*=this.count;
  result=Math.pow(result,SQUARE_ROOT_POWER);
  LOG.info(""String_Node_Str"",result);
  return result;
}","private double calculateSNorm(double[] xInitial,double[] xUpdated){
  double result=0.0;
  for (int i=0; i < xUpdated.length; i++) {
    result+=Math.pow(xUpdated[i] - xInitial[i],2);
  }
  result*=Math.pow(rho,2);
  result*=this.count;
  result=Math.pow(result,SQUARE_ROOT_POWER);
  return result;
}"
40738,"@Override protected void setup(Context context) throws IOException, InterruptedException {
  Configuration conf=context.getConfiguration();
  regularizeIntercept=conf.getBoolean(""String_Node_Str"",false);
  zUpdated=null;
  count=0;
}","@Override protected void setup(Context context) throws IOException, InterruptedException {
  Configuration conf=context.getConfiguration();
  regularizeIntercept=conf.getBoolean(""String_Node_Str"",false);
  xUpdated=null;
  uInital=null;
  count=0;
}"
40739,"private double calculateRNorm(Path outputPath,double[] xUpdated,FileSystem fs,Configuration conf){
  LOG.info(""String_Node_Str"");
  double result=0.0;
  try {
    result=calculateR(outputPath,fs,conf,xUpdated);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  result=Math.pow(result,SQUARE_ROOT_POWER);
  LOG.info(""String_Node_Str"",result);
  return result;
}","private double calculateRNorm(Path outputPath,double[] xUpdated,FileSystem fs,Configuration conf){
  double result=0.0;
  try {
    result=calculateR(outputPath,fs,conf,xUpdated);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  result=Math.pow(result,SQUARE_ROOT_POWER);
  return result;
}"
40740,"@SuppressWarnings(""String_Node_Str"") public static int run(Path signalData,Path output,Float regularizationFactor,Boolean addIntercept,Boolean regularizeIntercept,Integer iterationsMaximum,Configuration baseConf) throws IOException, ClassNotFoundException, InterruptedException {
  Configuration conf=new Configuration(baseConf);
  float thisRegularizationFactor=null == regularizationFactor ? DEFAULT_REGULARIZATION_FACTOR : regularizationFactor;
  boolean thisAddIntercept=null == addIntercept ? true : addIntercept;
  boolean thisRegularizeIntercept=null == regularizeIntercept ? false : regularizeIntercept;
  int thisIterationsMaximum=null == iterationsMaximum ? DEFAULT_ADMM_ITERATIONS_MAX : iterationsMaximum;
  int iterationNumber=0;
  boolean isFinalIteration=false;
  conf.set(""String_Node_Str"",""String_Node_Str"");
  conf.setInt(""String_Node_Str"",6000000);
  conf.setInt(""String_Node_Str"",4096);
  conf.setInt(""String_Node_Str"",4096);
  FileSystem fs=output.getFileSystem(conf);
  HadoopUtil.delete(conf,output);
  String intermediateHdfsBaseString=output.toString() + ""String_Node_Str"";
  while (!isFinalIteration) {
    long preStatus=0;
    Path previousHdfsResultsPath=new Path(intermediateHdfsBaseString + ITERATION_FOLDER_NAME + (iterationNumber - 1));
    Path currentHdfsResultsPath=new Path(intermediateHdfsBaseString + ITERATION_FOLDER_NAME + iterationNumber);
    long curStatus=doAdmmIteration(conf,previousHdfsResultsPath,currentHdfsResultsPath,signalData,iterationNumber,thisAddIntercept,thisRegularizeIntercept,thisRegularizationFactor);
    isFinalIteration=convergedOrMaxed(curStatus,preStatus,iterationNumber,thisIterationsMaximum);
    if (isFinalIteration) {
      Path finalOutput=new Path(output,ITERATION_FOLDER_NAME_FINAL);
      fs.delete(finalOutput);
      fs.rename(currentHdfsResultsPath,finalOutput);
    }
    iterationNumber++;
  }
  return 0;
}","public static int run(Path signalData,Path output,Float regularizationFactor,Boolean addIntercept,Boolean regularizeIntercept,Integer iterationsMaximum,Configuration baseConf) throws IOException, ClassNotFoundException, InterruptedException {
  Configuration conf=new Configuration(baseConf);
  float thisRegularizationFactor=null == regularizationFactor ? DEFAULT_REGULARIZATION_FACTOR : regularizationFactor;
  boolean thisAddIntercept=null == addIntercept ? true : addIntercept;
  boolean thisRegularizeIntercept=null == regularizeIntercept ? false : regularizeIntercept;
  int thisIterationsMaximum=null == iterationsMaximum ? DEFAULT_ADMM_ITERATIONS_MAX : iterationsMaximum;
  int iterationNumber=0;
  boolean isFinalIteration=false;
  conf.set(""String_Node_Str"",""String_Node_Str"");
  conf.setInt(""String_Node_Str"",6000000);
  conf.setInt(""String_Node_Str"",4096);
  conf.setInt(""String_Node_Str"",4096);
  FileSystem fs=output.getFileSystem(conf);
  HadoopUtil.delete(conf,output);
  String intermediateHdfsBaseString=output.toString() + ""String_Node_Str"";
  while (!isFinalIteration) {
    long preStatus=0;
    Path previousHdfsResultsPath=new Path(intermediateHdfsBaseString + ITERATION_FOLDER_NAME + (iterationNumber - 1));
    Path currentHdfsResultsPath=new Path(intermediateHdfsBaseString + ITERATION_FOLDER_NAME + iterationNumber);
    long curStatus=doAdmmIteration(conf,previousHdfsResultsPath,currentHdfsResultsPath,signalData,iterationNumber,thisAddIntercept,thisRegularizeIntercept,thisRegularizationFactor);
    Log.info(""String_Node_Str"",curStatus);
    isFinalIteration=convergedOrMaxed(curStatus,preStatus,iterationNumber,thisIterationsMaximum);
    if (isFinalIteration) {
      Path finalOutput=new Path(output,FINAL_MODEL);
      fs.delete(finalOutput,true);
      fs.rename(new Path(currentHdfsResultsPath,""String_Node_Str""),finalOutput);
    }
    iterationNumber++;
  }
  return 0;
}"
40741,"public void readFields(DataInput in) throws IOException {
  writer.readFields(in);
  double[] zUpdated=writer.get();
  DoubleWritable rho=new DoubleWritable();
  rho.readFields(in);
  DoubleWritable lambda=new DoubleWritable();
  lambda.readFields(in);
  DoubleWritable primalObjectiveValue=new DoubleWritable();
  primalObjectiveValue.readFields(in);
  LongWritable count=new LongWritable();
  count.readFields(in);
  context=new AdmmReducerContext(null,null,null,zUpdated,primalObjectiveValue.get(),rho.get(),lambda.get(),count.get());
}","public void readFields(DataInput in) throws IOException {
  BooleanWritable flag=new BooleanWritable(false);
  flag.readFields(in);
  double[] xUpdated=null;
  if (flag.get()) {
    DoubleArrayWritable reader=new DoubleArrayWritable();
    reader.readFields(in);
    xUpdated=reader.get();
  }
  flag.set(false);
  double[] uInitial=null;
  flag.readFields(in);
  if (flag.get()) {
    DoubleArrayWritable reader=new DoubleArrayWritable();
    reader.readFields(in);
    uInitial=reader.get();
  }
  flag.set(false);
  double[] zUpdated=null;
  flag.readFields(in);
  if (flag.get()) {
    DoubleArrayWritable reader=new DoubleArrayWritable();
    reader.readFields(in);
    zUpdated=reader.get();
  }
  flag.set(false);
  DoubleWritable rho=new DoubleWritable();
  rho.readFields(in);
  DoubleWritable lambda=new DoubleWritable();
  lambda.readFields(in);
  DoubleWritable primalObjectiveValue=new DoubleWritable();
  primalObjectiveValue.readFields(in);
  LongWritable count=new LongWritable();
  count.readFields(in);
  context=new AdmmReducerContext(null,uInitial,xUpdated,zUpdated,primalObjectiveValue.get(),rho.get(),lambda.get(),count.get());
}"
40742,"public void write(DataOutput out) throws IOException {
  writer.set(context.getZUpdated());
  writer.write(out);
  new DoubleWritable(context.getRho()).write(out);
  new DoubleWritable(context.getLambdaValue()).write(out);
  new DoubleWritable(context.getPrimalObjectiveValue()).write(out);
  new LongWritable(context.getCount()).write(out);
}","public void write(DataOutput out) throws IOException {
  new BooleanWritable(null != context.getXUpdated()).write(out);
  if (null != context.getXUpdated()) {
    writer.set(context.getXUpdated());
    writer.write(out);
  }
  new BooleanWritable(null != context.getUInitial()).write(out);
  if (null != context.getUInitial()) {
    writer.set(context.getUInitial());
    writer.write(out);
  }
  new BooleanWritable(null != context.getZUpdated()).write(out);
  if (null != context.getZUpdated()) {
    writer.set(context.getZUpdated());
    writer.write(out);
  }
  new DoubleWritable(context.getRho()).write(out);
  new DoubleWritable(context.getLambdaValue()).write(out);
  new DoubleWritable(context.getPrimalObjectiveValue()).write(out);
  new LongWritable(context.getCount()).write(out);
}"
40743,"public LogisticL2DiffFunction(Vector[] a,double[] b,double rho,double[] u,double[] z){
  LOG.info(""String_Node_Str"");
  this.a=a;
  this.b=b;
  this.rho=rho;
  this.m=a.length;
  if (this.m > 0) {
    this.n=this.a[0].size() - 1;
  }
 else {
    this.n=0;
  }
  Long bytes=(long)0;
  for (int row=0; row < this.m; row++) {
    Vector v=this.a[row];
    double ax=0.0;
    for (    Element e : v.nonZeroes()) {
      bytes+=Integer.SIZE + Double.SIZE;
    }
  }
  LOG.info(""String_Node_Str"",bytes);
  this.u=u;
  this.z=z;
  LOG.info(""String_Node_Str"");
}","public LogisticL2DiffFunction(Vector[] a,double[] b,double rho,double[] u,double[] z){
  LOG.info(""String_Node_Str"");
  this.a=a;
  this.b=b;
  this.rho=rho;
  this.m=a.length;
  if (this.m > 0) {
    this.n=this.a[0].size() - 1;
  }
 else {
    this.n=0;
  }
  this.u=u;
  this.z=z;
  LOG.info(""String_Node_Str"");
}"
40744,"public static int run(Path input,Path output,Configuration baseConf) throws IOException, ClassNotFoundException, InterruptedException {
  LOG.info(""String_Node_Str"");
  Configuration conf=new Configuration(baseConf);
  Job job=Job.getInstance(conf);
  job.setJarByClass(OfflineFeatureDriver.class);
  job.setJobName(""String_Node_Str"");
  FileInputFormat.setInputPaths(job,input);
  FileOutputFormat.setOutputPath(job,output);
  job.setInputFormatClass(SequenceFileInputFormat.class);
  job.setOutputFormatClass(SequenceFileOutputFormat.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(VectorWritable.class);
  job.setMapperClass(OfflineFeatureMapper.class);
  job.setReducerClass(Reducer.class);
  job.setNumReduceTasks(10);
  HadoopUtil.delete(conf,output);
  boolean succeeded=job.waitForCompletion(true);
  if (!succeeded) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  LOG.info(""String_Node_Str"",input);
  HDFSHelper.deleteFiles(input.getParent(),input.getName(),input.getFileSystem(conf));
  return 0;
}","public static int run(Path input,Path output,Configuration baseConf) throws IOException, ClassNotFoundException, InterruptedException {
  LOG.info(""String_Node_Str"");
  Configuration conf=new Configuration(baseConf);
  Job job=Job.getInstance(conf);
  job.setJarByClass(OfflineFeatureDriver.class);
  job.setJobName(""String_Node_Str"");
  FileInputFormat.setInputPaths(job,input);
  FileOutputFormat.setOutputPath(job,output);
  job.setInputFormatClass(SequenceFileInputFormat.class);
  job.setOutputFormatClass(SequenceFileOutputFormat.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(VectorWritable.class);
  job.setMapperClass(OfflineFeatureMapper.class);
  job.setReducerClass(Reducer.class);
  job.setNumReduceTasks(10);
  HadoopUtil.delete(conf,output);
  boolean succeeded=job.waitForCompletion(true);
  if (!succeeded) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return 0;
}"
40745,"@SuppressWarnings(""String_Node_Str"") protected void cleanup(Context context) throws IOException, InterruptedException {
  LOG.info(""String_Node_Str"",inputSplitData.size(),inputSplitData.get(0).size());
  Vector[] vecArray=new Vector[inputSplitData.size()];
  Iterator<Vector> iterator=inputSplitData.iterator();
  int row=0;
  while (iterator.hasNext()) {
    vecArray[row]=iterator.next();
    row++;
  }
  AdmmMapperContext mapperContext;
  if (iteration == 0) {
    mapperContext=new AdmmMapperContext(splitId,vecArray,rho);
  }
 else {
    mapperContext=assembleMapperContextFromCache(vecArray,splitId);
  }
  AdmmReducerContext reducerContext=localMapperOptimization(mapperContext);
  LOG.info(""String_Node_Str"" + iteration + ""String_Node_Str""+ splitId);
  context.write(NullWritable.get(),new AdmmReducerContextWritable(reducerContext));
  Configuration conf=context.getConfiguration();
  RecordWriter<NullWritable,DoubleArrayWritable> writer=null;
  try {
    conf.setClass(""String_Node_Str"",DoubleArrayWritable.class,Writable.class);
    conf.set(""String_Node_Str"",""String_Node_Str"" + this.splitId);
    writer=(RecordWriter<NullWritable,DoubleArrayWritable>)context.getOutputFormatClass().newInstance().getRecordWriter(context);
    writer.write(NullWritable.get(),new DoubleArrayWritable(reducerContext.getXUpdated()));
    writer.close(context);
    conf.set(""String_Node_Str"",""String_Node_Str"" + this.splitId);
    writer=(RecordWriter<NullWritable,DoubleArrayWritable>)context.getOutputFormatClass().newInstance().getRecordWriter(context);
    writer.write(NullWritable.get(),new DoubleArrayWritable(reducerContext.getUInitial()));
    writer.close(context);
  }
 catch (  Exception e) {
    LOG.error(e.getMessage());
    throw new IOException(e.getMessage());
  }
}","@SuppressWarnings(""String_Node_Str"") protected void cleanup(Context context) throws IOException, InterruptedException {
  if (inputSplitData.size() <= 0) {
    return;
  }
  LOG.info(""String_Node_Str"",inputSplitData.size(),inputSplitData.get(0).size());
  Vector[] vecArray=new Vector[inputSplitData.size()];
  Iterator<Vector> iterator=inputSplitData.iterator();
  int row=0;
  while (iterator.hasNext()) {
    vecArray[row]=iterator.next();
    row++;
  }
  AdmmMapperContext mapperContext;
  if (iteration == 0) {
    mapperContext=new AdmmMapperContext(splitId,vecArray,rho);
  }
 else {
    mapperContext=assembleMapperContextFromCache(vecArray,splitId);
  }
  AdmmReducerContext reducerContext=localMapperOptimization(mapperContext);
  LOG.info(""String_Node_Str"" + iteration + ""String_Node_Str""+ splitId);
  context.write(NullWritable.get(),new AdmmReducerContextWritable(reducerContext));
  Configuration conf=context.getConfiguration();
  RecordWriter<NullWritable,DoubleArrayWritable> writer=null;
  try {
    conf.setClass(""String_Node_Str"",DoubleArrayWritable.class,Writable.class);
    conf.set(""String_Node_Str"",""String_Node_Str"" + this.splitId);
    writer=(RecordWriter<NullWritable,DoubleArrayWritable>)context.getOutputFormatClass().newInstance().getRecordWriter(context);
    writer.write(NullWritable.get(),new DoubleArrayWritable(reducerContext.getXUpdated()));
    writer.close(context);
    conf.set(""String_Node_Str"",""String_Node_Str"" + this.splitId);
    writer=(RecordWriter<NullWritable,DoubleArrayWritable>)context.getOutputFormatClass().newInstance().getRecordWriter(context);
    writer.write(NullWritable.get(),new DoubleArrayWritable(reducerContext.getUInitial()));
    writer.close(context);
  }
 catch (  Exception e) {
    LOG.error(e.getMessage());
    throw new IOException(e.getMessage());
  }
}"
40746,"private AdmmReducerContext localMapperOptimization(AdmmMapperContext context){
  LogisticL2DiffFunction myFunction=new LogisticL2DiffFunction(context.getA(),context.getB(),context.getRho(),context.getUInitial(),context.getZInitial());
  Ctx optimizationContext=new Ctx(context.getXInitial());
  LOG.info(""String_Node_Str"");
  double[] optimum=lbfgs.minimize((DiffFunction)myFunction,1e-10,context.getXInitial());
  for (int d=0; d < optimum.length; ++d) {
    optimizationContext.m_optimumX[d]=optimum[d];
  }
  double primalObjectiveValue=myFunction.evaluatePrimalObjective(optimizationContext.m_optimumX);
  return new AdmmReducerContext(context.getSplitId(),context.getUInitial(),optimizationContext.m_optimumX,null,primalObjectiveValue,context.getRho(),regularizationFactor,1);
}","private AdmmReducerContext localMapperOptimization(AdmmMapperContext context){
  LogisticL2DiffFunction myFunction=new LogisticL2DiffFunction(context.getA(),context.getB(),context.getRho(),context.getUInitial(),context.getZInitial());
  LOG.info(""String_Node_Str"");
  double[] optimum=lbfgs.minimize((DiffFunction)myFunction,1e-10,context.getXInitial());
  double primalObjectiveValue=myFunction.evaluatePrimalObjective(optimum);
  return new AdmmReducerContext(context.getSplitId(),context.getUInitial(),optimum,null,primalObjectiveValue,context.getRho(),regularizationFactor,1);
}"
40747,"public static int run(String[] args) throws IOException, CmdLineException, ClassNotFoundException, InterruptedException {
  AdmmOptimizerDriverArguments admmOptimizerDriverArguments=new AdmmOptimizerDriverArguments();
  parseArgs(args,admmOptimizerDriverArguments);
  String signalDataLocation=admmOptimizerDriverArguments.getSignalPath();
  Path finalOutputBasePath=new Path(admmOptimizerDriverArguments.getOutputPath());
  String intermediateHdfsBaseString=finalOutputBasePath.toString() + ""String_Node_Str"";
  int iterationsMaximum=Optional.fromNullable(admmOptimizerDriverArguments.getIterationsMaximum()).or(DEFAULT_ADMM_ITERATIONS_MAX);
  float regularizationFactor=Optional.fromNullable(admmOptimizerDriverArguments.getRegularizationFactor()).or(DEFAULT_REGULARIZATION_FACTOR);
  boolean addIntercept=Optional.fromNullable(admmOptimizerDriverArguments.getAddIntercept()).or(false);
  boolean regularizeIntercept=Optional.fromNullable(admmOptimizerDriverArguments.getRegularizeIntercept()).or(false);
  int iterationNumber=0;
  boolean isFinalIteration=false;
  Configuration conf=new Configuration();
  conf.set(""String_Node_Str"",""String_Node_Str"");
  conf.setInt(""String_Node_Str"",6000000);
  conf.setInt(""String_Node_Str"",4096);
  conf.setInt(""String_Node_Str"",4096);
  FileSystem fs=finalOutputBasePath.getFileSystem(conf);
  HadoopUtil.delete(conf,finalOutputBasePath);
  while (!isFinalIteration) {
    long preStatus=0;
    Path previousHdfsResultsPath=new Path(intermediateHdfsBaseString + ITERATION_FOLDER_NAME + (iterationNumber - 1));
    Path currentHdfsResultsPath=new Path(intermediateHdfsBaseString + ITERATION_FOLDER_NAME + iterationNumber);
    long curStatus=doAdmmIteration(conf,previousHdfsResultsPath,currentHdfsResultsPath,new Path(signalDataLocation),iterationNumber,addIntercept,regularizeIntercept,regularizationFactor);
    isFinalIteration=convergedOrMaxed(curStatus,preStatus,iterationNumber,iterationsMaximum);
    if (isFinalIteration) {
      Path finalOutput=new Path(finalOutputBasePath,ITERATION_FOLDER_NAME_FINAL);
      fs.delete(finalOutput,true);
      fs.rename(currentHdfsResultsPath,finalOutput);
      Path finalOutputBetas=new Path(finalOutputBasePath,BETAS_FOLDER_NAME);
      AdmmResultWriter writer=new AdmmResultWriterBetas();
      writer.write(conf,fs,finalOutput,finalOutputBetas);
    }
    iterationNumber++;
  }
  return 0;
}","@SuppressWarnings(""String_Node_Str"") public static int run(Path signalData,Path output,Float regularizationFactor,Boolean addIntercept,Boolean regularizeIntercept,Integer iterationsMaximum,Configuration baseConf) throws IOException, ClassNotFoundException, InterruptedException {
  Configuration conf=new Configuration(baseConf);
  float thisRegularizationFactor=null == regularizationFactor ? DEFAULT_REGULARIZATION_FACTOR : regularizationFactor;
  boolean thisAddIntercept=null == addIntercept ? true : addIntercept;
  boolean thisRegularizeIntercept=null == regularizeIntercept ? false : regularizeIntercept;
  int thisIterationsMaximum=null == iterationsMaximum ? DEFAULT_ADMM_ITERATIONS_MAX : iterationsMaximum;
  int iterationNumber=0;
  boolean isFinalIteration=false;
  conf.set(""String_Node_Str"",""String_Node_Str"");
  conf.setInt(""String_Node_Str"",6000000);
  conf.setInt(""String_Node_Str"",4096);
  conf.setInt(""String_Node_Str"",4096);
  FileSystem fs=output.getFileSystem(conf);
  HadoopUtil.delete(conf,output);
  String intermediateHdfsBaseString=output.toString() + ""String_Node_Str"";
  while (!isFinalIteration) {
    long preStatus=0;
    Path previousHdfsResultsPath=new Path(intermediateHdfsBaseString + ITERATION_FOLDER_NAME + (iterationNumber - 1));
    Path currentHdfsResultsPath=new Path(intermediateHdfsBaseString + ITERATION_FOLDER_NAME + iterationNumber);
    long curStatus=doAdmmIteration(conf,previousHdfsResultsPath,currentHdfsResultsPath,signalData,iterationNumber,thisAddIntercept,thisRegularizeIntercept,thisRegularizationFactor);
    isFinalIteration=convergedOrMaxed(curStatus,preStatus,iterationNumber,thisIterationsMaximum);
    if (isFinalIteration) {
      Path finalOutput=new Path(output,ITERATION_FOLDER_NAME_FINAL);
      fs.delete(finalOutput);
      fs.rename(currentHdfsResultsPath,finalOutput);
    }
    iterationNumber++;
  }
  return 0;
}"
40748,"public static long doAdmmIteration(Configuration baseConf,Path previousHdfsPath,Path currentHdfsPath,Path signalDataLocation,int iterationNumber,boolean addIntercept,boolean regularizeIntercept,float regularizationFactor) throws IOException, ClassNotFoundException, InterruptedException {
  Configuration conf=new Configuration(baseConf);
  conf.set(""String_Node_Str"",previousHdfsPath.toString());
  conf.setInt(""String_Node_Str"",iterationNumber);
  conf.setBoolean(""String_Node_Str"",addIntercept);
  conf.setBoolean(""String_Node_Str"",regularizeIntercept);
  conf.setFloat(""String_Node_Str"",regularizationFactor);
  Job job=new Job(conf);
  job.setJarByClass(AdmmOptimizerDriver.class);
  job.setJobName(""String_Node_Str"" + iterationNumber);
  AdmmIterationInputFormat.setNumMapTasks(job,240);
  FileInputFormat.setInputPaths(job,signalDataLocation);
  FileOutputFormat.setOutputPath(job,currentHdfsPath);
  job.setInputFormatClass(AdmmIterationInputFormat.class);
  job.setOutputFormatClass(AdmmIterationOutputFormat.class);
  job.setMapOutputKeyClass(NullWritable.class);
  job.setMapOutputValueClass(AdmmReducerContextWritable.class);
  job.setOutputKeyClass(NullWritable.class);
  job.setOutputValueClass(AdmmReducerContextWritable.class);
  job.setMapperClass(AdmmIterationMapper.class);
  job.setCombinerClass(AdmmIterationCombiner.class);
  job.setReducerClass(AdmmIterationReducer.class);
  HadoopUtil.delete(conf,currentHdfsPath);
  boolean succeeded=job.waitForCompletion(true);
  if (!succeeded) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return job.getCounters().findCounter(AdmmIterationReducer.IterationCounter.ITERATION).getValue();
}","public static long doAdmmIteration(Configuration baseConf,Path previousHdfsPath,Path currentHdfsPath,Path signalDataLocation,int iterationNumber,boolean addIntercept,boolean regularizeIntercept,float regularizationFactor) throws IOException, ClassNotFoundException, InterruptedException {
  Configuration conf=new Configuration(baseConf);
  conf.set(""String_Node_Str"",previousHdfsPath.toString());
  conf.setInt(""String_Node_Str"",iterationNumber);
  conf.setBoolean(""String_Node_Str"",addIntercept);
  conf.setBoolean(""String_Node_Str"",regularizeIntercept);
  conf.setFloat(""String_Node_Str"",regularizationFactor);
  Job job=Job.getInstance(conf);
  job.setJarByClass(AdmmOptimizerDriver.class);
  job.setJobName(""String_Node_Str"" + iterationNumber);
  AdmmIterationInputFormat.setNumMapTasks(job,240);
  FileInputFormat.setInputPaths(job,signalDataLocation);
  FileOutputFormat.setOutputPath(job,currentHdfsPath);
  job.setInputFormatClass(AdmmIterationInputFormat.class);
  job.setOutputFormatClass(AdmmIterationOutputFormat.class);
  job.setMapOutputKeyClass(NullWritable.class);
  job.setMapOutputValueClass(AdmmReducerContextWritable.class);
  job.setOutputKeyClass(NullWritable.class);
  job.setOutputValueClass(AdmmReducerContextWritable.class);
  job.setMapperClass(AdmmIterationMapper.class);
  job.setReducerClass(AdmmIterationReducer.class);
  HadoopUtil.delete(conf,currentHdfsPath);
  boolean succeeded=job.waitForCompletion(true);
  if (!succeeded) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return job.getCounters().findCounter(AdmmIterationReducer.IterationCounter.ITERATION).getValue();
}"
40749,"public LogisticL2DiffFunction(Vector[] a,double[] b,double rho,double[] u,double[] z){
  LOG.info(""String_Node_Str"");
  this.a=a;
  this.b=b;
  this.rho=rho;
  this.m=a.length;
  if (this.m > 0) {
    this.n=this.a[0].size() - 1;
  }
 else {
    this.n=0;
  }
  this.u=u;
  this.z=z;
  LOG.info(""String_Node_Str"");
}","public LogisticL2DiffFunction(Vector[] a,double[] b,double rho,double[] u,double[] z){
  LOG.info(""String_Node_Str"");
  this.a=a;
  this.b=b;
  this.rho=rho;
  this.m=a.length;
  if (this.m > 0) {
    this.n=this.a[0].size() - 1;
  }
 else {
    this.n=0;
  }
  Long bytes=(long)0;
  for (int row=0; row < this.m; row++) {
    Vector v=this.a[row];
    double ax=0.0;
    for (    Element e : v.nonZeroes()) {
      bytes+=Integer.SIZE + Double.SIZE;
    }
  }
  LOG.info(""String_Node_Str"",bytes);
  this.u=u;
  this.z=z;
  LOG.info(""String_Node_Str"");
}"
40750,"public LaserFeatureListenser(String url,String bucket,String passwd,Path output,FileSystem fs,Configuration conf,int itemDimension,int userDimension) throws IOException, URISyntaxException {
  this.output=output;
  this.fs=fs;
  this.conf=conf;
  this.itemDimension=itemDimension;
  this.userDimension=userDimension;
  Path serializePath=com.b5m.conf.Configuration.getInstance().getUserFeatureSerializePath();
  if (fs.exists(serializePath)) {
    DataInputStream in=fs.open(serializePath);
    try {
      this.helper=UserProfileHelper.read(in);
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
      this.helper=UserProfileHelper.getInstance();
    }
    in.close();
  }
 else {
    this.helper=UserProfileHelper.getInstance();
  }
  initSequenceWriter();
  List<URI> hosts=Arrays.asList(new URI(url));
  couchbaseClient=new CouchbaseClient(hosts,bucket,passwd);
}","public LaserFeatureListenser(String url,String bucket,String passwd,Path output,FileSystem fs,Configuration conf,int itemDimension,int userDimension) throws IOException, URISyntaxException {
  this.output=output;
  this.fs=fs;
  this.conf=conf;
  this.itemDimension=itemDimension;
  this.userDimension=userDimension;
  Path serializePath=com.b5m.conf.Configuration.getInstance().getUserFeatureSerializePath();
  if (fs.exists(serializePath)) {
    DataInputStream in=fs.open(serializePath);
    try {
      this.helper=UserProfileHelper.read(in);
      LOG.debug(""String_Node_Str"",this.helper.size());
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
      this.helper=UserProfileHelper.getInstance();
    }
    in.close();
  }
 else {
    this.helper=UserProfileHelper.getInstance();
  }
  initSequenceWriter();
  List<URI> hosts=Arrays.asList(new URI(url));
  couchbaseClient=new CouchbaseClient(hosts,bucket,passwd);
}"
40751,"public void setUserFeature(Vector userFeature,final UserProfileHelper helper,Boolean add){
  Set<Map.Entry<String,Double>> entrySet=page_categories.entrySet();
  Iterator<Map.Entry<String,Double>> iterator=entrySet.iterator();
  while (iterator.hasNext()) {
    Map.Entry<String,Double> entry=iterator.next();
    String key=""String_Node_Str"" + entry.getKey();
    Integer id=helper.map(key,add);
    if (null != id) {
      userFeature.set(id,entry.getValue());
    }
  }
  entrySet=product_categories.entrySet();
  iterator=entrySet.iterator();
  while (iterator.hasNext()) {
    Map.Entry<String,Double> entry=iterator.next();
    String key=""String_Node_Str"" + entry.getKey();
    Integer id=helper.map(key,add);
    if (null != id) {
      userFeature.set(id,entry.getValue());
    }
  }
  entrySet=product_price.entrySet();
  iterator=entrySet.iterator();
  while (iterator.hasNext()) {
    Map.Entry<String,Double> entry=iterator.next();
    String key=""String_Node_Str"" + entry.getKey();
    Integer id=helper.map(key,add);
    if (null != id) {
      userFeature.set(id,entry.getValue());
    }
  }
  entrySet=product_source.entrySet();
  iterator=entrySet.iterator();
  while (iterator.hasNext()) {
    Map.Entry<String,Double> entry=iterator.next();
    String key=""String_Node_Str"" + entry.getKey();
    Integer id=helper.map(key,add);
    if (null != id) {
      userFeature.set(id,entry.getValue());
    }
  }
}","public void setUserFeature(Vector userFeature,final UserProfileHelper helper,Boolean add){
  Set<Map.Entry<String,Double>> entrySet=page_categories.entrySet();
  Iterator<Map.Entry<String,Double>> iterator=entrySet.iterator();
  while (iterator.hasNext()) {
    Map.Entry<String,Double> entry=iterator.next();
    String key=""String_Node_Str"" + entry.getKey();
    Integer id=helper.map(key,add);
    if (null != id) {
      userFeature.set(id,entry.getValue());
    }
  }
  entrySet=product_categories.entrySet();
  iterator=entrySet.iterator();
  while (iterator.hasNext()) {
    Map.Entry<String,Double> entry=iterator.next();
    String key=""String_Node_Str"" + entry.getKey();
    Integer id=helper.map(key,add);
    if (null != id) {
      userFeature.set(id,entry.getValue());
    }
  }
  entrySet=product_source.entrySet();
  iterator=entrySet.iterator();
  while (iterator.hasNext()) {
    Map.Entry<String,Double> entry=iterator.next();
    String key=""String_Node_Str"" + entry.getKey();
    Integer id=helper.map(key,add);
    if (null != id) {
      userFeature.set(id,entry.getValue());
    }
  }
}"
40752,"protected void map(Text key,RequestWritable value,Context context) throws IOException, InterruptedException {
  Vector userFeature=value.getUserFeature();
  Vector itemFeature=value.getItemFeature();
  double firstOrder=userFeature.dot(alpha) + itemFeature.dot(beta);
  for (int row=0; row < A.numRows(); row++) {
    ACj.set(row,A.viewRow(row).dot(itemFeature));
  }
  double secondOrder=userFeature.dot(ACj);
  Vector onlineFeature=new SequentialAccessSparseVector(userFeature.size() + 2);
  for (  Element e : userFeature.nonZeroes()) {
    onlineFeature.set(e.index() + 2,e.get());
  }
  onlineFeature.set(0,firstOrder + secondOrder);
  onlineFeature.set(1,1.0);
  LOG.info(""String_Node_Str"");
  context.write(key,new VectorWritable(onlineFeature));
}","protected void map(Text key,RequestWritable value,Context context) throws IOException, InterruptedException {
  Vector userFeature=value.getUserFeature();
  Vector itemFeature=value.getItemFeature();
  double firstOrder=userFeature.dot(alpha) + itemFeature.dot(beta);
  for (int row=0; row < A.numRows(); row++) {
    ACj.set(row,A.viewRow(row).dot(itemFeature));
  }
  double secondOrder=userFeature.dot(ACj);
  Vector onlineFeature=new SequentialAccessSparseVector(userFeature.size() + 2);
  for (  Element e : userFeature.nonZeroes()) {
    onlineFeature.set(e.index() + 2,e.get());
  }
  onlineFeature.set(0,firstOrder + secondOrder);
  onlineFeature.set(1,1.0);
  context.write(key,new VectorWritable(onlineFeature));
}"
40753,"private void write(B5MEvent b5mEvent) throws IOException {
  LOG.debug(b5mEvent.toString());
  Map<CharSequence,CharSequence> args=b5mEvent.getArgs();
  CharSequence logType=args.get(LOG_TYPE_LABEL);
  if (null == logType) {
    return;
  }
  CharSequence actionId=args.get(ACTION_ID_LABEL);
  if (null == actionId) {
    return;
  }
  CharSequence uuid=args.get(UUID_LABEL);
  if (null == uuid) {
    return;
  }
  String user=uuid.toString();
  String item=null;
  CharSequence title=args.get(ITEM_LABEL);
  if (null == title) {
    return;
  }
 else {
    item=title.toString();
  }
  Integer action=1;
  if (108 == Integer.valueOf(actionId.toString())) {
    action=-1;
  }
 else   if (103 == Integer.valueOf(actionId.toString())) {
    action=1;
  }
 else {
    return;
  }
  Vector userFeature=new SequentialAccessSparseVector(userDimension);
  setUserFeature(user,userFeature);
  Vector itemFeature=new SequentialAccessSparseVector(itemDimension);
  setItemFeature(item,itemFeature);
  writer.append(new Text(user),new RequestWritable(userFeature,itemFeature,action));
}","private void write(B5MEvent b5mEvent) throws IOException {
  LOG.debug(b5mEvent.toString());
  Map<CharSequence,CharSequence> args=b5mEvent.getArgs();
  CharSequence logType=args.get(LOG_TYPE_LABEL);
  if (null == logType) {
    return;
  }
  CharSequence actionId=args.get(ACTION_ID_LABEL);
  if (null == actionId) {
    return;
  }
  CharSequence uuid=args.get(UUID_LABEL);
  if (null == uuid) {
    return;
  }
  String user=uuid.toString();
  String item=null;
  CharSequence title=args.get(ITEM_LABEL);
  if (null == title) {
    return;
  }
 else {
    item=title.toString();
  }
  Integer action=1;
  if (108 == Integer.valueOf(actionId.toString())) {
    action=-1;
  }
 else   if (103 == Integer.valueOf(actionId.toString())) {
    action=1;
  }
 else {
    return;
  }
  Vector userFeature=new SequentialAccessSparseVector(userDimension);
  setUserFeature(user,userFeature);
  Vector itemFeature=new SequentialAccessSparseVector(itemDimension);
  setItemFeature(item,itemFeature);
  if (itemFeature.norm(2) < 1e-6) {
    return;
  }
  writer.append(new Text(user),new RequestWritable(userFeature,itemFeature,action));
}"
40754,"protected void map(Text key,RequestWritable value,Context context) throws IOException, InterruptedException {
  Vector itemFeature=value.getItemFeature();
  Vector onlineFeature=new SequentialAccessSparseVector(itemFeature.size() + 1);
  for (  Element e : itemFeature.nonZeroes()) {
    onlineFeature.set(e.index() + 1,e.get());
  }
  onlineFeature.set(0,1);
  context.write(key,new VectorWritable(onlineFeature));
}","protected void map(Text key,RequestWritable value,Context context) throws IOException, InterruptedException {
  Vector itemFeature=value.getItemFeature();
  Vector onlineFeature=new SequentialAccessSparseVector(itemFeature.size() + 1);
  for (  Element e : itemFeature.nonZeroes()) {
    onlineFeature.set(e.index() + 1,e.get());
  }
  onlineFeature.set(0,1);
  onlineFeature.set(itemFeature.size(),value.getAction());
  context.write(key,new VectorWritable(onlineFeature));
}"
40755,"/** 
 * An expectation for checking that an element is either invisible or not present on the DOM.
 * @param locator used to find the element
 */
public static ExpectedCondition<Boolean> invisibilityOfElementLocated(final By locator){
  return new ExpectedCondition<Boolean>(){
    public Boolean apply(    @Nonnull WebDriver driver){
      try {
        return driver.findElements(locator).isEmpty();
      }
 catch (      NoSuchElementException e) {
        LOGGER.error(e);
        return true;
      }
catch (      StaleElementReferenceException e) {
        LOGGER.error(e);
        return true;
      }
    }
    @Override public String toString(){
      return ""String_Node_Str"";
    }
  }
;
}","/** 
 * An expectation for checking that an element is either invisible or not present on the DOM.
 * @param locator used to find the element
 * @return boolean
 */
public static ExpectedCondition<Boolean> invisibilityOfElementLocated(final By locator){
  return new ExpectedCondition<Boolean>(){
    public Boolean apply(    @Nonnull WebDriver driver){
      try {
        return driver.findElements(locator).isEmpty();
      }
 catch (      NoSuchElementException e) {
        LOGGER.error(e);
        return true;
      }
catch (      StaleElementReferenceException e) {
        LOGGER.error(e);
        return true;
      }
    }
    @Override public String toString(){
      return ""String_Node_Str"";
    }
  }
;
}"
40756,"/** 
 * Check clikability for the list of WebElement
 * @param elements
 * @return
 */
public static ExpectedCondition<Boolean> elementToBeClickable(final List<WebElement> elements){
  final List<Boolean> statusList=new ArrayList<Boolean>();
  return new ExpectedCondition<Boolean>(){
    public Boolean apply(    WebDriver driver){
      if (elements.isEmpty()) {
        return false;
      }
      statusList.clear();
      for (      WebElement w : elements) {
        try {
          if (w != null && w.isEnabled() && w.isDisplayed()) {
            statusList.add(true);
          }
 else {
            return false;
          }
        }
 catch (        StaleElementReferenceException e) {
          LOGGER.error(e);
          return false;
        }
      }
      LOGGER.debug(""String_Node_Str"" + elements.size() + ""String_Node_Str""+ statusList.size());
      return statusList.size() == elements.size();
    }
    @Override public String toString(){
      return ""String_Node_Str"";
    }
  }
;
}","/** 
 * Check clikability for the list of WebElement
 * @param elements list of WebElements
 * @return boolean
 */
public static ExpectedCondition<Boolean> elementToBeClickable(final List<WebElement> elements){
  final List<Boolean> statusList=new ArrayList<Boolean>();
  return new ExpectedCondition<Boolean>(){
    public Boolean apply(    WebDriver driver){
      if (elements.isEmpty()) {
        return false;
      }
      statusList.clear();
      for (      WebElement w : elements) {
        try {
          if (w != null && w.isEnabled() && w.isDisplayed()) {
            statusList.add(true);
          }
 else {
            return false;
          }
        }
 catch (        StaleElementReferenceException e) {
          LOGGER.error(e);
          return false;
        }
      }
      LOGGER.debug(""String_Node_Str"" + elements.size() + ""String_Node_Str""+ statusList.size());
      return statusList.size() == elements.size();
    }
    @Override public String toString(){
      return ""String_Node_Str"";
    }
  }
;
}"
40757,"/** 
 * wait for the Element to be Disabled
 * @param element
 * @return
 */
public static ExpectedCondition<Boolean> elementToBeDisabled(final WebElement element){
  return new ExpectedCondition<Boolean>(){
    public ExpectedCondition<WebElement> visibilityOfElement=ExpectedConditions.visibilityOf(element);
    public Boolean apply(    WebDriver driver){
      boolean isDisabled=false;
      WebElement element=visibilityOfElement.apply(driver);
      try {
        if (element != null && !(element.isEnabled())) {
          isDisabled=true;
        }
        return isDisabled;
      }
 catch (      StaleElementReferenceException e) {
        LOGGER.warn(""String_Node_Str"" + element.toString());
        return isDisabled;
      }
    }
    @Override public String toString(){
      return ""String_Node_Str"" + element;
    }
  }
;
}","/** 
 * wait for the Element to be Disabled
 * @param element : WebElement
 * @return boolean
 */
public static ExpectedCondition<Boolean> elementToBeDisabled(final WebElement element){
  return new ExpectedCondition<Boolean>(){
    public ExpectedCondition<WebElement> visibilityOfElement=ExpectedConditions.visibilityOf(element);
    public Boolean apply(    WebDriver driver){
      boolean isDisabled=false;
      WebElement element=visibilityOfElement.apply(driver);
      try {
        if (element != null && !(element.isEnabled())) {
          isDisabled=true;
        }
        return isDisabled;
      }
 catch (      StaleElementReferenceException e) {
        LOGGER.warn(""String_Node_Str"" + element.toString());
        return isDisabled;
      }
    }
    @Override public String toString(){
      return ""String_Node_Str"" + element;
    }
  }
;
}"
40758,"/** 
 * This method accepts n number of WebElements and check for click ability if any of the WebElement is not click able will return false
 * @param elements
 * @return
 */
public static ExpectedCondition<Boolean> elementsToBeClickable(final WebElement... elements){
  final List<Boolean> statusList=new ArrayList<Boolean>();
  return new ExpectedCondition<Boolean>(){
    final StringBuilder sb=new StringBuilder();
    public Boolean apply(    WebDriver driver){
      for (      WebElement w : elements) {
        try {
          if (w.isDisplayed() && w.isEnabled()) {
            statusList.add(true);
          }
 else {
            statusList.add(false);
          }
        }
 catch (        StaleElementReferenceException e) {
          LOGGER.error(e);
          statusList.add(false);
        }
      }
      if (statusList.contains(false)) {
        statusList.clear();
        return false;
      }
      return true;
    }
    @Override public String toString(){
      return ""String_Node_Str"" + sb;
    }
  }
;
}","/** 
 * This method accepts n number of WebElements and check for click ability if any of the WebElement is not click able will return false
 * @param elements list of WebElements
 * @return boolean
 */
public static ExpectedCondition<Boolean> elementsToBeClickable(final WebElement... elements){
  final List<Boolean> statusList=new ArrayList<Boolean>();
  return new ExpectedCondition<Boolean>(){
    final StringBuilder sb=new StringBuilder();
    public Boolean apply(    WebDriver driver){
      for (      WebElement w : elements) {
        try {
          if (w.isDisplayed() && w.isEnabled()) {
            statusList.add(true);
          }
 else {
            statusList.add(false);
          }
        }
 catch (        StaleElementReferenceException e) {
          LOGGER.error(e);
          statusList.add(false);
        }
      }
      if (statusList.contains(false)) {
        statusList.clear();
        return false;
      }
      return true;
    }
    @Override public String toString(){
      return ""String_Node_Str"" + sb;
    }
  }
;
}"
40759,"/** 
 * Check if all the element in the List are displayed
 * @param elements
 * @return
 */
public static ExpectedCondition<Boolean> elementToBeDisplayed(final List<WebElement> elements){
  final List<Boolean> statusList=new ArrayList<Boolean>();
  return new ExpectedCondition<Boolean>(){
    public Boolean apply(    WebDriver driver){
      for (      WebElement w : elements) {
        try {
          if (w != null && w.isDisplayed()) {
            statusList.add(true);
          }
 else {
            return null;
          }
        }
 catch (        StaleElementReferenceException e) {
          LOGGER.error(e);
          return null;
        }
      }
      return statusList.size() == elements.size();
    }
    @Override public String toString(){
      return ""String_Node_Str"";
    }
  }
;
}","/** 
 * Check if all the element in the List are displayed
 * @param elements list of WebElements
 * @return boolean
 */
public static ExpectedCondition<Boolean> elementToBeDisplayed(final List<WebElement> elements){
  final List<Boolean> statusList=new ArrayList<Boolean>();
  return new ExpectedCondition<Boolean>(){
    public Boolean apply(    WebDriver driver){
      for (      WebElement w : elements) {
        try {
          if (w != null && w.isDisplayed()) {
            statusList.add(true);
          }
 else {
            return null;
          }
        }
 catch (        StaleElementReferenceException e) {
          LOGGER.error(e);
          return null;
        }
      }
      return statusList.size() == elements.size();
    }
    @Override public String toString(){
      return ""String_Node_Str"";
    }
  }
;
}"
40760,"/** 
 * Return   {@link IBrowserConf} depending on if {@link CustomBrowserConf} isused or Default values set configured
 * @param browserConf
 */
public static IBrowserConf get(){
  if (browserConf == null) {
synchronized (DefaultBrowserConf.class) {
      if (browserConf == null) {
        setEscapePropertyForReportNG();
        if (customProp == null) {
          browserConf=new PrepareDriverConf().refineBrowserValues().checkForRules().get();
        }
 else {
          browserConf=new PrepareDriverConf(getKeyValue()).refineBrowserValues().checkForRules().get();
        }
      }
    }
  }
  return browserConf;
}","/** 
 * Return   {@link IBrowserConf} depending on if {@link CustomBrowserConf} isused or Default values set configured
 */
public static IBrowserConf get(){
  if (browserConf == null) {
synchronized (DefaultBrowserConf.class) {
      if (browserConf == null) {
        setEscapePropertyForReportNG();
        if (customProp == null) {
          browserConf=new PrepareDriverConf().refineBrowserValues().checkForRules().get();
        }
 else {
          browserConf=new PrepareDriverConf(getKeyValue()).refineBrowserValues().checkForRules().get();
        }
      }
    }
  }
  return browserConf;
}"
40761,"/** 
 * Check if custom properties file present or not if, present initialize customProp to prop file
 * @return : true or false
 */
protected static void loadCustomPropertiesFile(IProperty prop){
  browserConf=null;
  customProp=prop;
}","/** 
 * Check if custom properties file present or not if, present initialize customProp to prop file
 */
protected static void loadCustomPropertiesFile(IProperty prop){
  browserConf=null;
  customProp=prop;
}"
40762,"@org.testng.annotations.DataProvider(name=""String_Node_Str"",parallel=true) public static Object[][] googleSheetDataProvider(Method m){
  String testMethodName=Utils.getFullMethodName(m);
  return getData(testMethodName);
}","/** 
 * @param m method
 * @return list of objects
 */
@org.testng.annotations.DataProvider(name=""String_Node_Str"",parallel=true) public static Object[][] googleSheetDataProvider(Method m){
  String testMethodName=Utils.getFullMethodName(m);
  return getData(testMethodName);
}"
40763,"@org.testng.annotations.DataProvider(name=""String_Node_Str"",parallel=true) public static Object[][] xmlDataProvider(Method m){
  String methodName=Utils.getFullMethodName(m);
  return getData(methodName);
}","/** 
 * @param m method
 * @return list of objects
 */
@org.testng.annotations.DataProvider(name=""String_Node_Str"",parallel=true) public static Object[][] xmlDataProvider(Method m){
  String methodName=Utils.getFullMethodName(m);
  return getData(methodName);
}"
40764,"/** 
 * get the map with key as methodName and List of   {@link IProperty}
 * @param environment : which should be System.getProperty() it can be null or empty as well
 * @param data
 * @return
 * @throws IOException
 * @throws ServiceException
 */
public List<IProperty> getMethodData(String environment,IMappingData data){
  if (!dataBucket.containsKey(data.getTestData())) {
    URL testDataSheetURL;
    ListFeed testDataFeed=null;
    LOGGER.debug(""String_Node_Str"" + data.getTestData());
    try {
      testDataSheetURL=getWorkSheet(data.getTestData()).getListFeedUrl();
      testDataFeed=service.getFeed(testDataSheetURL,ListFeed.class);
    }
 catch (    IOException e) {
      LOGGER.error(e);
    }
catch (    ServiceException e) {
      LOGGER.error(e);
    }
    dataBucket.put(data.getTestData(),getSingleMethodtData(environment,testDataFeed));
  }
  return dataBucket.get(data.getTestData());
}","/** 
 * get the map with key as methodName and List of   {@link IProperty}
 * @param environment : which should be System.getProperty() it can be null or empty as well
 * @param data
 * @return list
 */
public List<IProperty> getMethodData(String environment,IMappingData data){
  if (!dataBucket.containsKey(data.getTestData())) {
    URL testDataSheetURL;
    ListFeed testDataFeed=null;
    LOGGER.debug(""String_Node_Str"" + data.getTestData());
    try {
      testDataSheetURL=getWorkSheet(data.getTestData()).getListFeedUrl();
      testDataFeed=service.getFeed(testDataSheetURL,ListFeed.class);
    }
 catch (    IOException e) {
      LOGGER.error(e);
    }
catch (    ServiceException e) {
      LOGGER.error(e);
    }
    dataBucket.put(data.getTestData(),getSingleMethodtData(environment,testDataFeed));
  }
  return dataBucket.get(data.getTestData());
}"
40765,"/** 
 * Get the map having key as methodName of   {@link IBrowserConf} for therefined data
 * @param data
 * @return
 * @throws IOException
 * @throws ServiceException
 */
public List<IBrowserConf> getBrowserListForSheet(IMappingData data){
  List<IBrowserConf> returnList=new ArrayList<IBrowserConf>();
  URL browserSheetURL;
  String sheetNameHolder;
  ListFeed browserFeed;
  for (  String browserSheet : data.getClientEnvironment()) {
    sheetNameHolder=browserSheet;
    if (!browserBucket.containsKey(browserSheet)) {
      try {
        List<IBrowserConf> browserConfLForSingleSheet=new ArrayList<IBrowserConf>();
        browserSheetURL=getWorkSheet(browserSheet).getListFeedUrl();
        browserFeed=service.getFeed(browserSheetURL,ListFeed.class);
        for (        ListEntry row : browserFeed.getEntries()) {
          browserConfLForSingleSheet.add(getBrowserConfFromRow(row));
        }
        browserBucket.put(browserSheet,browserConfLForSingleSheet);
      }
 catch (      NullPointerException ex) {
        LOGGER.error(""String_Node_Str"" + sheetNameHolder);
        LOGGER.error(ex);
      }
catch (      IOException e) {
        LOGGER.error(e);
      }
catch (      ServiceException e) {
        LOGGER.error(e);
      }
    }
    returnList.addAll(browserBucket.get(browserSheet));
  }
  return returnList;
}","/** 
 * Get the map having key as methodName of   {@link IBrowserConf} for therefined data
 * @param data IMappingData
 * @return list
 */
public List<IBrowserConf> getBrowserListForSheet(IMappingData data){
  List<IBrowserConf> returnList=new ArrayList<IBrowserConf>();
  URL browserSheetURL;
  String sheetNameHolder;
  ListFeed browserFeed;
  for (  String browserSheet : data.getClientEnvironment()) {
    sheetNameHolder=browserSheet;
    if (!browserBucket.containsKey(browserSheet)) {
      try {
        List<IBrowserConf> browserConfLForSingleSheet=new ArrayList<IBrowserConf>();
        browserSheetURL=getWorkSheet(browserSheet).getListFeedUrl();
        browserFeed=service.getFeed(browserSheetURL,ListFeed.class);
        for (        ListEntry row : browserFeed.getEntries()) {
          browserConfLForSingleSheet.add(getBrowserConfFromRow(row));
        }
        browserBucket.put(browserSheet,browserConfLForSingleSheet);
      }
 catch (      NullPointerException ex) {
        LOGGER.error(""String_Node_Str"" + sheetNameHolder);
        LOGGER.error(ex);
      }
catch (      IOException e) {
        LOGGER.error(e);
      }
catch (      ServiceException e) {
        LOGGER.error(e);
      }
    }
    returnList.addAll(browserBucket.get(browserSheet));
  }
  return returnList;
}"
40766,"/** 
 * This method checks if driver present yes then quit else ignore
 */
public static void tearDown(){
  if (driver.get() != null) {
    driver.get().quit();
    driver.remove();
  }
  if (null != browserConf.get()) {
    browserConf.remove();
  }
}","/** 
 * This method checks if driver present yes then quit else ignore
 */
public static void tearDown(){
  if (driver.get() != null) {
    driver.get().quit();
  }
  if (null != browserConf.get()) {
    browserConf.set(null);
  }
}"
40767,"/** 
 * Forcefully check/uncheck checkbox irrespective of the state(Element should be visible)
 * @param webElement :Check box element
 * @param CHECK_UNCHECK enum
 */
public static void checkUncheckCheckBox(WebElement webElement,CHECK_UNCHECK checkUnCheck){
  boolean checked=webElement.isSelected();
  if (checked) {
    if (checkUnCheck.toString().equalsIgnoreCase(""String_Node_Str"")) {
      webElement.click();
    }
  }
 else {
    if (checkUnCheck.toString().equalsIgnoreCase(""String_Node_Str"")) {
      webElement.click();
    }
  }
}","/** 
 * Forcefully check/uncheck checkbox irrespective of the state(Element should be visible)
 * @param webElement :Check box element
 * @param checkUnCheck enum
 */
public static void checkUncheckCheckBox(WebElement webElement,CHECK_UNCHECK checkUnCheck){
  boolean checked=webElement.isSelected();
  if (checked) {
    if (checkUnCheck.toString().equalsIgnoreCase(""String_Node_Str"")) {
      webElement.click();
    }
  }
 else {
    if (checkUnCheck.toString().equalsIgnoreCase(""String_Node_Str"")) {
      webElement.click();
    }
  }
}"
40768,"/** 
 * Generic waitFor Function which waits for condition to be successful else return null
 * @param expectedCondition :ExpectedCondition<T>
 * @param driver :WebDriver
 * @param timeout in seconds
 * @return <T> or null
 */
public static <T>T waitFor(ExpectedCondition<T> expectedCondition,WebDriver driver,int timeOutInSeconds){
  Stopwatch stopwatch=new Stopwatch();
  stopwatch.start();
  driver.manage().timeouts().implicitlyWait(0,TimeUnit.SECONDS);
  try {
    return new WebDriverWait(driver,timeOutInSeconds).pollingEvery(500,TimeUnit.MILLISECONDS).until(expectedCondition);
  }
 catch (  TimeoutException e) {
    LOGGER.error(e);
    return null;
  }
 finally {
    driver.manage().timeouts().implicitlyWait(Driver.getBrowserConf().getDriverTimeOut(),TimeUnit.SECONDS);
    stopwatch.stop();
    LOGGER.debug(""String_Node_Str"" + stopwatch.elapsedTime(TimeUnit.SECONDS));
  }
}","/** 
 * Generic waitFor Function which waits for condition to be successful else return null
 * @param expectedCondition :ExpectedCondition
 * @param driver :WebDriver
 * @param timeOutInSeconds in seconds
 * @return T or null
 */
public static <T>T waitFor(ExpectedCondition<T> expectedCondition,WebDriver driver,int timeOutInSeconds){
  Stopwatch stopwatch=new Stopwatch();
  stopwatch.start();
  driver.manage().timeouts().implicitlyWait(0,TimeUnit.SECONDS);
  try {
    return new WebDriverWait(driver,timeOutInSeconds).pollingEvery(500,TimeUnit.MILLISECONDS).until(expectedCondition);
  }
 catch (  TimeoutException e) {
    LOGGER.error(e);
    return null;
  }
 finally {
    driver.manage().timeouts().implicitlyWait(Driver.getBrowserConf().getDriverTimeOut(),TimeUnit.SECONDS);
    stopwatch.stop();
    LOGGER.debug(""String_Node_Str"" + stopwatch.elapsedTime(TimeUnit.SECONDS));
  }
}"
40769,"void LocalEnvironmentConfig(String defaultValue){
  if (defaultValue.contains(""String_Node_Str"")) {
    if (OSName.get().equals(OSN.WIN)) {
      this.defaultValue=defaultValue.replace(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      this.defaultValue=defaultValue;
    }
  }
  this.defaultValue=defaultValue;
}","void LocalEnvironmentConfig(String defaultValue){
  if (defaultValue.contains(""String_Node_Str"")) {
    if (OSName.get().equals(OSN.WIN)) {
      this.defaultValue=defaultValue.replace(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      this.defaultValue=defaultValue;
    }
  }
 else {
    this.defaultValue=defaultValue;
  }
}"
40770,"@Test(description=""String_Node_Str"",enabled=true,dataProvider=""String_Node_Str"") public void verifySeleniumTitleXML(IBrowserConf browserConf,IProperty prop){
  System.out.println(browserConf.getCapabilities().getPlatform());
  GooglePage gp=new GooglePage(Driver.getDriver(browserConf),prop);
  gp.loadFromProperty().isLoaded().search(""String_Node_Str"").clickOnLink(""String_Node_Str"");
  SeleniumPage sp=new SeleniumPage(Driver.getDriver());
  sassert.assertEquals(sp.isLoaded().getTitle(),prop.getValue(""String_Node_Str""),""String_Node_Str"");
  sassert.assertAll();
}","public void verifySeleniumTitleXML(IBrowserConf browserConf,IProperty prop){
  System.out.println(browserConf.getCapabilities().getPlatform());
  GooglePage gp=new GooglePage(Driver.getDriver(browserConf),prop);
  gp.loadFromProperty().isLoaded().search(""String_Node_Str"").clickOnLink(""String_Node_Str"");
  SeleniumPage sp=new SeleniumPage(Driver.getDriver());
  sassert.assertEquals(sp.isLoaded().getTitle(),prop.getValue(""String_Node_Str""),""String_Node_Str"");
  sassert.assertAll();
}"
40771,"private String getRefinedTestData(Method method){
  IMappingData methodVal=primaryDataMap.get(Utils.getFullMethodName(method));
  IMappingData classVal=primaryDataMap.get(method.getDeclaringClass().getName().toString());
  IMappingData packageVal=primaryDataMap.get(method.getDeclaringClass().getPackage().getName().toString());
  if (methodVal != null && StringUtils.isNotBlank(methodVal.getTestData())) {
    return methodVal.getTestData();
  }
 else   if (classVal != null && StringUtils.isNotBlank(classVal.getTestData())) {
    return classVal.getTestData();
  }
 else   if (packageVal != null && StringUtils.isNotBlank(packageVal.getTestData())) {
    return packageVal.getTestData();
  }
  LOGGER.error(""String_Node_Str"");
  throw new FrameworkException(""String_Node_Str"");
}","private String getRefinedTestData(Method method){
  IMappingData methodVal=primaryDataMap.get(Utils.getFullMethodName(method));
  IMappingData classVal=primaryDataMap.get(method.getDeclaringClass().getName().toString());
  IMappingData packageVal=primaryDataMap.get(method.getDeclaringClass().getPackage().getName().toString());
  if (methodVal != null && StringUtils.isNotBlank(methodVal.getTestData())) {
    return methodVal.getTestData();
  }
 else   if (classVal != null && StringUtils.isNotBlank(classVal.getTestData())) {
    return classVal.getTestData();
  }
 else   if (packageVal != null && StringUtils.isNotBlank(packageVal.getTestData())) {
    return packageVal.getTestData();
  }
  LOGGER.error(""String_Node_Str"" + method.getName() + ""String_Node_Str"");
  throw new FrameworkException(""String_Node_Str"" + method.getName() + ""String_Node_Str"");
}"
40772,"private List<String> getRefinedClientEnvironment(Method method){
  IMappingData methodClientData=primaryDataMap.get(Utils.getFullMethodName(method));
  IMappingData classClientData=primaryDataMap.get(method.getDeclaringClass().getName().toString());
  IMappingData packageClientData=primaryDataMap.get(method.getDeclaringClass().getPackage().getName().toString());
  if (methodClientData != null && !methodClientData.getClientEnvironment().isEmpty() && StringUtils.isNotBlank(methodClientData.getClientEnvironment().get(0))) {
    return methodClientData.getClientEnvironment();
  }
 else   if (classClientData != null && !classClientData.getClientEnvironment().isEmpty() && StringUtils.isNotBlank(classClientData.getClientEnvironment().get(0))) {
    return classClientData.getClientEnvironment();
  }
 else   if (packageClientData != null && !packageClientData.getClientEnvironment().isEmpty() && StringUtils.isNotBlank(packageClientData.getClientEnvironment().get(0))) {
    return packageClientData.getClientEnvironment();
  }
  LOGGER.error(""String_Node_Str"");
  throw new FrameworkException(""String_Node_Str"");
}","private List<String> getRefinedClientEnvironment(Method method){
  IMappingData methodClientData=primaryDataMap.get(Utils.getFullMethodName(method));
  IMappingData classClientData=primaryDataMap.get(method.getDeclaringClass().getName().toString());
  IMappingData packageClientData=primaryDataMap.get(method.getDeclaringClass().getPackage().getName().toString());
  if (methodClientData != null && !methodClientData.getClientEnvironment().isEmpty() && StringUtils.isNotBlank(methodClientData.getClientEnvironment().get(0))) {
    return methodClientData.getClientEnvironment();
  }
 else   if (classClientData != null && !classClientData.getClientEnvironment().isEmpty() && StringUtils.isNotBlank(classClientData.getClientEnvironment().get(0))) {
    return classClientData.getClientEnvironment();
  }
 else   if (packageClientData != null && !packageClientData.getClientEnvironment().isEmpty() && StringUtils.isNotBlank(packageClientData.getClientEnvironment().get(0))) {
    return packageClientData.getClientEnvironment();
  }
  LOGGER.error(""String_Node_Str"" + method.getName() + ""String_Node_Str"");
  throw new FrameworkException(""String_Node_Str"" + method.getName() + ""String_Node_Str"");
}"
40773,"/** 
 * get the map with key as methodName and List of   {@link IProperty}
 * @param environment : which should be System.getProperty() it can be null or empty as well
 * @param data
 * @return
 * @throws IOException
 * @throws ServiceException
 */
public List<IProperty> getMethodData(String environment,IMappingData data){
  IMappingData mData=data;
  URL testDataSheetURL;
  ListFeed testDataFeed=null;
  try {
    testDataSheetURL=getWorkSheet(mData.getTestData()).getListFeedUrl();
    testDataFeed=service.getFeed(testDataSheetURL,ListFeed.class);
  }
 catch (  IOException e) {
    LOGGER.error(e);
  }
catch (  ServiceException e) {
    LOGGER.error(e);
  }
  return getSingleMethodtData(environment,testDataFeed);
}","/** 
 * get the map with key as methodName and List of   {@link IProperty}
 * @param environment : which should be System.getProperty() it can be null or empty as well
 * @param data
 * @return
 * @throws IOException
 * @throws ServiceException
 */
public List<IProperty> getMethodData(String environment,IMappingData data){
  IMappingData mData=data;
  URL testDataSheetURL;
  ListFeed testDataFeed=null;
  LOGGER.debug(""String_Node_Str"" + mData.getTestData());
  try {
    testDataSheetURL=getWorkSheet(mData.getTestData()).getListFeedUrl();
    testDataFeed=service.getFeed(testDataSheetURL,ListFeed.class);
  }
 catch (  IOException e) {
    LOGGER.error(e);
  }
catch (  ServiceException e) {
    LOGGER.error(e);
  }
  return getSingleMethodtData(environment,testDataFeed);
}"
40774,"public DataPerEnvironment(String environmentName){
  this.environmentName=environmentName;
}","public DataPerEnvironment(String environmentName){
  LOGGER.debug(""String_Node_Str"" + environmentName);
  LOGGER.debug(""String_Node_Str"" + prop.getValue(""String_Node_Str""));
  this.environmentName=environmentName;
}"
40775,"/** 
 * return the property list for single methods
 * @param env
 * @param rows
 * @return
 */
private List<IProperty> getSingleMethodtData(String env,ListFeed rows){
  List<DataPerEnvironment> testEnvironmentMap=new ArrayList<ReadGoogle.DataPerEnvironment>();
  Map<String,String> keyValuePair=new HashMap<String,String>();
  DataPerEnvironment testEnvHolder=null;
  for (  ListEntry row : rows.getEntries()) {
    if (row.getCustomElements().getValue(""String_Node_Str"").contains(""String_Node_Str"")) {
      if (testEnvHolder != null) {
        testEnvironmentMap.add(testEnvHolder);
      }
      testEnvHolder=new DataPerEnvironment(row.getCustomElements().getValue(""String_Node_Str""));
    }
 else {
      testEnvHolder.setTestData(row.getCustomElements().getValue(""String_Node_Str""),row.getCustomElements().getValue(""String_Node_Str""));
      keyValuePair.put(row.getCustomElements().getValue(""String_Node_Str""),row.getCustomElements().getValue(""String_Node_Str""));
    }
  }
  testEnvironmentMap.add(testEnvHolder);
  if (StringUtils.isNotBlank(env)) {
    return getConcatentedDataList(env,testEnvironmentMap);
  }
 else {
    return getConcatentedDataList(testEnvironmentMap);
  }
}","/** 
 * return the property list for single methods
 * @param env
 * @param rows
 * @return
 */
private List<IProperty> getSingleMethodtData(String env,ListFeed rows){
  List<DataPerEnvironment> testEnvironmentMap=new ArrayList<ReadGoogle.DataPerEnvironment>();
  Map<String,String> keyValuePair=new HashMap<String,String>();
  DataPerEnvironment testEnvHolder=null;
  for (  ListEntry row : rows.getEntries()) {
    LOGGER.debug(""String_Node_Str"" + row.getCustomElements().getValue(""String_Node_Str"") + ""String_Node_Str""+ row.getCustomElements().getValue(""String_Node_Str""));
    if (row.getCustomElements().getValue(""String_Node_Str"").contains(""String_Node_Str"")) {
      if (testEnvHolder != null) {
        testEnvironmentMap.add(testEnvHolder);
      }
      testEnvHolder=new DataPerEnvironment(row.getCustomElements().getValue(""String_Node_Str""));
    }
 else {
      testEnvHolder.setTestData(row.getCustomElements().getValue(""String_Node_Str""),row.getCustomElements().getValue(""String_Node_Str""));
      keyValuePair.put(row.getCustomElements().getValue(""String_Node_Str""),row.getCustomElements().getValue(""String_Node_Str""));
    }
  }
  testEnvironmentMap.add(testEnvHolder);
  if (StringUtils.isNotBlank(env)) {
    return getConcatentedDataList(env,testEnvironmentMap);
  }
 else {
    return getConcatentedDataList(testEnvironmentMap);
  }
}"
40776,"/** 
 * get ImplementMap frmo the Mapping sheet for single row
 * @param row
 * @return
 */
private ImplementIMap getMap(ListEntry row){
  return new ImplementIMap.Builder().withClientEnvironment(getList(row.getCustomElements().getValue(""String_Node_Str""))).withTestData(row.getCustomElements().getValue(""String_Node_Str"")).withRunStartegy(row.getCustomElements().getValue(""String_Node_Str"")).build();
}","/** 
 * get ImplementMap frmo the Mapping sheet for single row
 * @param row
 * @return
 */
private ImplementIMap getMap(ListEntry row){
  LOGGER.debug(""String_Node_Str"");
  return new ImplementIMap.Builder().withClientEnvironment(getList(row.getCustomElements().getValue(""String_Node_Str""))).withTestData(row.getCustomElements().getValue(""String_Node_Str"")).withRunStartegy(row.getCustomElements().getValue(""String_Node_Str"")).build();
}"
40777,"private SpreadsheetEntry connect(){
  service=new SpreadsheetService(""String_Node_Str"");
  try {
    service.setUserCredentials(googleUserName,googlePasswd);
    SPREADSHEET_FEED_URL=new URL(""String_Node_Str"");
    SpreadsheetFeed feed=service.getFeed(SPREADSHEET_FEED_URL,SpreadsheetFeed.class);
    List<com.google.gdata.data.spreadsheet.SpreadsheetEntry> spreadsheets=feed.getEntries();
    for (    SpreadsheetEntry sheet : spreadsheets) {
      if (sheet.getTitle().getPlainText().equalsIgnoreCase(sheetName)) {
        return sheet;
      }
    }
  }
 catch (  AuthenticationException e) {
    LOGGER.error(e);
  }
catch (  MalformedURLException e) {
    LOGGER.error(e);
  }
catch (  IOException e) {
    LOGGER.error(e);
  }
catch (  ServiceException e) {
    LOGGER.error(e);
  }
  return null;
}","private SpreadsheetEntry connect(){
  service=new SpreadsheetService(""String_Node_Str"");
  try {
    service.setUserCredentials(googleUserName,googlePasswd);
    spreadSheetFeedUrl=new URL(""String_Node_Str"");
    SpreadsheetFeed feed=service.getFeed(spreadSheetFeedUrl,SpreadsheetFeed.class);
    List<com.google.gdata.data.spreadsheet.SpreadsheetEntry> spreadsheets=feed.getEntries();
    for (    SpreadsheetEntry sheet : spreadsheets) {
      LOGGER.debug(""String_Node_Str"" + sheet.getTitle().getPlainText());
      if (sheet.getTitle().getPlainText().equalsIgnoreCase(sheetName)) {
        return sheet;
      }
    }
  }
 catch (  AuthenticationException e) {
    LOGGER.error(e);
  }
catch (  MalformedURLException e) {
    LOGGER.error(e);
  }
catch (  IOException e) {
    LOGGER.error(e);
  }
catch (  ServiceException e) {
    LOGGER.error(e);
  }
  return null;
}"
40778,"public boolean retry(ITestResult result){
  maxCount=Driver.getBrowserConf().getRetryFailedTestCaseCount();
  LOGGER.debug(""String_Node_Str"" + maxCount);
  if (count < maxCount) {
    LOGGER.info(""String_Node_Str"" + result.getName() + ""String_Node_Str""+ result.getStatus()+ ""String_Node_Str""+ count+ ""String_Node_Str"");
    count++;
    return true;
  }
  return false;
}","public boolean retry(ITestResult result){
  IBrowserConf browserConf=Driver.getBrowserConf();
  if (null == browserConf)   browserConf=DefaultBrowserConf.get();
  maxCount=browserConf.getRetryFailedTestCaseCount();
  LOGGER.debug(""String_Node_Str"" + maxCount);
  if (count < maxCount) {
    LOGGER.info(""String_Node_Str"" + result.getName() + ""String_Node_Str""+ result.getStatus()+ ""String_Node_Str""+ count+ ""String_Node_Str"");
    count++;
    return true;
  }
  return false;
}"
40779,"private void updateGoogleSheet(String environment){
  checkGoogleUserNameAndPassword();
  ReadGoogle readGoogle=new ReadGoogle(System.getProperty(GoogleSheetConstant.GOOGLEUSERNAME),System.getProperty(GoogleSheetConstant.GOOGLEPASSWD),System.getProperty(GoogleSheetConstant.GOOGLESHEETNAME));
  RefineMappedData refinedData=new RefineMappedData(readGoogle);
  IMappingData mapData=refinedData.getMethodData(method);
  this.browserConfig=readGoogle.getBrowserListForSheet(mapData);
  this.testData=readGoogle.getMethodData(environment,mapData);
  this.runStrategy=mapData.getRunStartegy();
}","private void updateGoogleSheet(String environment){
  checkGoogleUserNameAndPassword();
  ReadGoogle readGoogle=ReadGoogle.getInstance();
  readGoogle.connect(System.getProperty(GoogleSheetConstant.GOOGLEUSERNAME),System.getProperty(GoogleSheetConstant.GOOGLEPASSWD),System.getProperty(GoogleSheetConstant.GOOGLESHEETNAME));
  RefineMappedData refinedData=new RefineMappedData(readGoogle);
  IMappingData mapData=refinedData.getMethodData(method);
  this.browserConfig=readGoogle.getBrowserListForSheet(mapData);
  this.testData=readGoogle.getMethodData(environment,mapData);
  this.runStrategy=mapData.getRunStartegy();
}"
40780,"/** 
 * get the map with key as methodName and List of   {@link IProperty}
 * @param environment : which should be System.getProperty() it can be null or empty as well
 * @param data
 * @return
 * @throws IOException
 * @throws ServiceException
 */
public List<IProperty> getMethodData(String environment,IMappingData data){
  IMappingData mData=data;
  URL testDataSheetURL;
  ListFeed testDataFeed=null;
  LOGGER.debug(""String_Node_Str"" + mData.getTestData());
  try {
    testDataSheetURL=getWorkSheet(mData.getTestData()).getListFeedUrl();
    testDataFeed=service.getFeed(testDataSheetURL,ListFeed.class);
  }
 catch (  IOException e) {
    LOGGER.error(e);
  }
catch (  ServiceException e) {
    LOGGER.error(e);
  }
  return getSingleMethodtData(environment,testDataFeed);
}","/** 
 * get the map with key as methodName and List of   {@link IProperty}
 * @param environment : which should be System.getProperty() it can be null or empty as well
 * @param data
 * @return
 * @throws IOException
 * @throws ServiceException
 */
public List<IProperty> getMethodData(String environment,IMappingData data){
  if (!dataBucket.containsKey(data.getTestData())) {
    IMappingData mData=data;
    URL testDataSheetURL;
    ListFeed testDataFeed=null;
    LOGGER.debug(""String_Node_Str"" + mData.getTestData());
    try {
      testDataSheetURL=getWorkSheet(mData.getTestData()).getListFeedUrl();
      testDataFeed=service.getFeed(testDataSheetURL,ListFeed.class);
    }
 catch (    IOException e) {
      LOGGER.error(e);
    }
catch (    ServiceException e) {
      LOGGER.error(e);
    }
    dataBucket.put(data.getTestData(),getSingleMethodtData(environment,testDataFeed));
  }
  return dataBucket.get(data.getTestData());
}"
40781,"public DataPerEnvironment(String environmentName){
  LOGGER.debug(""String_Node_Str"" + environmentName);
  LOGGER.debug(""String_Node_Str"" + prop.getValue(""String_Node_Str""));
  this.environmentName=environmentName;
}","public DataPerEnvironment(String environmentName){
  LOGGER.debug(""String_Node_Str"" + environmentName);
  this.environmentName=environmentName;
}"
40782,"/** 
 * return the property list for single methods
 * @param env
 * @param rows
 * @return
 */
private List<IProperty> getSingleMethodtData(String env,ListFeed rows){
  List<DataPerEnvironment> testEnvironmentMap=new ArrayList<ReadGoogle.DataPerEnvironment>();
  Map<String,String> keyValuePair=new HashMap<String,String>();
  DataPerEnvironment testEnvHolder=null;
  for (  ListEntry row : rows.getEntries()) {
    LOGGER.debug(""String_Node_Str"" + row.getCustomElements().getValue(""String_Node_Str"") + ""String_Node_Str""+ row.getCustomElements().getValue(""String_Node_Str""));
    if (row.getCustomElements().getValue(""String_Node_Str"").contains(""String_Node_Str"")) {
      if (testEnvHolder != null) {
        testEnvironmentMap.add(testEnvHolder);
      }
      testEnvHolder=new DataPerEnvironment(row.getCustomElements().getValue(""String_Node_Str""));
    }
 else {
      testEnvHolder.setTestData(row.getCustomElements().getValue(""String_Node_Str""),row.getCustomElements().getValue(""String_Node_Str""));
      keyValuePair.put(row.getCustomElements().getValue(""String_Node_Str""),row.getCustomElements().getValue(""String_Node_Str""));
    }
  }
  testEnvironmentMap.add(testEnvHolder);
  if (StringUtils.isNotBlank(env)) {
    return getConcatentedDataList(env,testEnvironmentMap);
  }
 else {
    return getConcatentedDataList(testEnvironmentMap);
  }
}","/** 
 * return the property list for single methods
 * @param env
 * @param rows
 * @return
 */
private List<IProperty> getSingleMethodtData(String env,ListFeed rows){
  List<DataPerEnvironment> testEnvironmentMap=new ArrayList<ReadGoogle.DataPerEnvironment>();
  Map<String,String> keyValuePair=new HashMap<String,String>();
  DataPerEnvironment testEnvHolder=null;
  for (  ListEntry row : rows.getEntries()) {
    LOGGER.debug(""String_Node_Str"" + row.getCustomElements().getValue(""String_Node_Str"") + ""String_Node_Str""+ row.getCustomElements().getValue(""String_Node_Str""));
    if (row.getCustomElements().getValue(""String_Node_Str"").contains(""String_Node_Str"")) {
      if (testEnvHolder != null) {
        testEnvironmentMap.add(testEnvHolder);
      }
      testEnvHolder=new DataPerEnvironment(row.getCustomElements().getValue(""String_Node_Str""));
    }
 else {
      testEnvHolder.setTestData(row.getCustomElements().getValue(""String_Node_Str""),row.getCustomElements().getValue(""String_Node_Str""));
      keyValuePair.put(row.getCustomElements().getValue(""String_Node_Str""),row.getCustomElements().getValue(""String_Node_Str""));
    }
  }
  testEnvironmentMap.add(testEnvHolder);
  if (StringUtils.isNotBlank(env)) {
    return getConcatenatedDataList(env,testEnvironmentMap);
  }
 else {
    return getConcatentedDataList(testEnvironmentMap);
  }
}"
40783,"/** 
 * Get the primary data from the Mapping sheet in Google sheet, This would be fed to MappedValue for refinement
 */
@Override public Map<String,IMappingData> getPrimaryData(){
  Map<String,IMappingData> primaryData=new HashMap<String,IMappingData>();
  URL listFeedURL;
  try {
    listFeedURL=getWorkSheet(GoogleSheetConstant.GOOGLE_MAP_SHEET_NAME).getListFeedUrl();
    ListFeed listFeed=service.getFeed(listFeedURL,ListFeed.class);
    for (    ListEntry row : listFeed.getEntries()) {
      primaryData.put(row.getCustomElements().getValue(""String_Node_Str""),getMap(row));
    }
  }
 catch (  IOException e) {
    LOGGER.error(e);
  }
catch (  ServiceException e) {
    LOGGER.error(e);
  }
  return primaryData;
}","/** 
 * Get the primary data from the Mapping sheet in Google sheet, This would be fed to MappedValue for refinement
 */
@Override public Map<String,IMappingData> getPrimaryData(){
  if (mappingBucket.isEmpty()) {
    URL listFeedURL;
    try {
      listFeedURL=getWorkSheet(GoogleSheetConstant.GOOGLE_MAP_SHEET_NAME).getListFeedUrl();
      ListFeed listFeed=service.getFeed(listFeedURL,ListFeed.class);
      for (      ListEntry row : listFeed.getEntries()) {
        mappingBucket.put(row.getCustomElements().getValue(""String_Node_Str""),getMap(row));
      }
    }
 catch (    IOException e) {
      LOGGER.error(e);
    }
catch (    ServiceException e) {
      LOGGER.error(e);
    }
  }
  return mappingBucket;
}"
40784,"public ReadGoogle(String googleUserName,String googlePasswd,String sheetName){
  this.googleUserName=googleUserName;
  this.googlePasswd=googlePasswd;
  this.sheetName=sheetName;
  spreadSheet=connect();
}","private ReadGoogle(){
}"
40785,"/** 
 * Get the map having key as methodName of   {@link IBrowserConf} for therefined data
 * @param data
 * @return
 * @throws IOException
 * @throws ServiceException
 */
public List<IBrowserConf> getBrowserListForSheet(IMappingData data){
  IMappingData methodData=data;
  List<IBrowserConf> browserConfList=new ArrayList<IBrowserConf>();
  URL browserSheetURL;
  String sheetNameHolder=null;
  ListFeed browserFeed;
  for (  String browserSheet : methodData.getClientEnvironment()) {
    sheetNameHolder=browserSheet;
    try {
      browserSheetURL=getWorkSheet(browserSheet).getListFeedUrl();
      browserFeed=service.getFeed(browserSheetURL,ListFeed.class);
      for (      ListEntry row : browserFeed.getEntries()) {
        browserConfList.add(getBrowserConfFromRow(row));
      }
    }
 catch (    NullPointerException ex) {
      LOGGER.error(""String_Node_Str"" + sheetNameHolder);
      LOGGER.error(ex);
    }
catch (    IOException e) {
      LOGGER.error(e);
    }
catch (    ServiceException e) {
      LOGGER.error(e);
    }
  }
  return browserConfList;
}","/** 
 * Get the map having key as methodName of   {@link IBrowserConf} for therefined data
 * @param data
 * @return
 * @throws IOException
 * @throws ServiceException
 */
public List<IBrowserConf> getBrowserListForSheet(IMappingData data){
  List<IBrowserConf> returnList=new ArrayList<IBrowserConf>();
  IMappingData methodData=data;
  URL browserSheetURL;
  String sheetNameHolder=null;
  ListFeed browserFeed;
  for (  String browserSheet : methodData.getClientEnvironment()) {
    sheetNameHolder=browserSheet;
    if (!browserBucket.containsKey(browserSheet)) {
      try {
        List<IBrowserConf> browserConfLForSingleSheet=new ArrayList<IBrowserConf>();
        browserSheetURL=getWorkSheet(browserSheet).getListFeedUrl();
        browserFeed=service.getFeed(browserSheetURL,ListFeed.class);
        for (        ListEntry row : browserFeed.getEntries()) {
          browserConfLForSingleSheet.add(getBrowserConfFromRow(row));
        }
        browserBucket.put(browserSheet,browserConfLForSingleSheet);
      }
 catch (      NullPointerException ex) {
        LOGGER.error(""String_Node_Str"" + sheetNameHolder);
        LOGGER.error(ex);
      }
catch (      IOException e) {
        LOGGER.error(e);
      }
catch (      ServiceException e) {
        LOGGER.error(e);
      }
    }
    returnList.addAll(browserBucket.get(browserSheet));
  }
  return returnList;
}"
40786,"private XmlApplicationData(){
  try {
    builder=factory.newDocumentBuilder();
  }
 catch (  ParserConfigurationException e) {
    e.printStackTrace();
  }
}","private XmlApplicationData(){
  try {
    builder=factory.newDocumentBuilder();
  }
 catch (  ParserConfigurationException e) {
    LOGGER.error(e);
  }
}"
40787,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null || (obj.getClass() != this.getClass()))   return false;
  BrowserConfR secondObj=(BrowserConfR)obj;
  if (this.isRemoteFlag() == secondObj.isRemoteFlag()) {
    if (this.isRemoteFlag() == true) {
      if (this.isBrowserStackSwitch() == secondObj.isBrowserStackSwitch()) {
        if (this.isBrowserStackSwitch() == true) {
          return (this.getBrowser() == secondObj.getBrowser() && this.getBrowserVersion() == secondObj.getBrowserVersion() && this.getOsName() == secondObj.getOsName() && this.getOsVersion() == secondObj.getOsVersion());
        }
 else {
          return (this.getBrowser() == secondObj.getBrowser());
        }
      }
 else {
        return false;
      }
    }
 else {
      return this.getBrowser() == secondObj.getBrowser();
    }
  }
  return false;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null || (obj.getClass() != this.getClass()))   return false;
  BrowserConfR secondObj=(BrowserConfR)obj;
  if (this.isRemoteFlag() == secondObj.isRemoteFlag()) {
    if (this.isRemoteFlag() == true) {
      if (this.isBrowserStackSwitch() == secondObj.isBrowserStackSwitch()) {
        if (this.isBrowserStackSwitch() == true) {
          return (this.getBrowser().equals(secondObj.getBrowser()) && this.getBrowserVersion().equals(secondObj.getBrowserVersion()) && this.getOsName().equals(secondObj.getOsName())&& this.getOsVersion().equals(secondObj.getOsVersion()));
        }
 else {
          return (this.getBrowser().equals(secondObj.getBrowser()));
        }
      }
 else {
        return false;
      }
    }
 else {
      return this.getBrowser().equals(secondObj.getBrowser());
    }
  }
  return false;
}"
40788,"@Test(enabled=true,description=""String_Node_Str"") public void checkBrowserConfEquality_RemoteFlagOFF(){
  browserConfValues1.clear();
  browserConfValues2.clear();
  browserConfValues1.put(DriverConfigurations.LocalEnvironmentConfig.browserName.toString(),""String_Node_Str"");
  browserConfValues1.put(DriverConfigurations.FrameworkConfig.remoteFlag.toString(),""String_Node_Str"");
  browserConfValues2.put(DriverConfigurations.LocalEnvironmentConfig.browserName.toString(),""String_Node_Str"");
  browserConfValues2.put(DriverConfigurations.FrameworkConfig.remoteFlag.toString(),""String_Node_Str"");
  BrowserConfR obj1=new BrowserConfR(browserConfValues1);
  BrowserConfR obj2=new BrowserConfR(browserConfValues2);
  browserConfList.add(obj1);
  browserConfList.add(obj2);
  Assert.assertEquals(browserConfList.size(),2);
  Set<IBrowserConf> s=new HashSet<IBrowserConf>(browserConfList);
  List<IBrowserConf> newList=new ArrayList<IBrowserConf>(s);
  Assert.assertEquals(obj1,obj2);
  Assert.assertEquals(s.size(),1);
  Assert.assertEquals(newList.size(),1);
}","@Test(enabled=true,description=""String_Node_Str"") public void checkBrowserConfEquality_RemoteFlagOFF(){
  browserConfValues1.put(DriverConfigurations.LocalEnvironmentConfig.browserName.toString(),new String(""String_Node_Str""));
  browserConfValues1.put(DriverConfigurations.FrameworkConfig.remoteFlag.toString(),""String_Node_Str"");
  browserConfValues2.put(DriverConfigurations.LocalEnvironmentConfig.browserName.toString(),new String(""String_Node_Str""));
  browserConfValues2.put(DriverConfigurations.FrameworkConfig.remoteFlag.toString(),""String_Node_Str"");
  IBrowserConf obj1=new BrowserConfR(browserConfValues1);
  IBrowserConf obj2=new BrowserConfR(browserConfValues2);
  browserConfList.add(obj1);
  browserConfList.add(obj2);
  Assert.assertEquals(browserConfList.size(),2);
  Set<IBrowserConf> s=new HashSet<IBrowserConf>(browserConfList);
  List<IBrowserConf> newList=new ArrayList<IBrowserConf>(s);
  Assert.assertEquals(obj1,obj2);
  Assert.assertEquals(s.size(),1);
  Assert.assertEquals(newList.size(),1);
}"
40789,"/** 
 * wait for tunnel to be up
 * @param waitForMessage
 * @throws IOException
 * @throws InterruptedException
 */
private void waitforTunnelTobeUp(String waitForMessage) throws IOException, InterruptedException {
  is=tunnelProcess.getInputStream();
  br=new BufferedReader(new InputStreamReader(is));
  String t=""String_Node_Str"";
  while (!waitForMessage.equalsIgnoreCase(t) && t != null)   try {
    t=br.readLine();
    LOGGER.info(""String_Node_Str"" + t);
  }
 catch (  IOException e) {
    LOGGER.error(e);
  }
}","/** 
 * wait for tunnel to be up
 * @param waitForMessage
 * @throws IOException
 * @throws InterruptedException
 */
private void waitforTunnelTobeUp(String waitForMessage) throws IOException, InterruptedException {
  is=tunnelProcess.getInputStream();
  br=new BufferedReader(new InputStreamReader(is));
  String t=""String_Node_Str"";
  while (!waitForMessage.equalsIgnoreCase(t) && t != null) {
    try {
      t=br.readLine();
      LOGGER.info(""String_Node_Str"" + t);
    }
 catch (    IOException e) {
      LOGGER.error(e);
    }
  }
}"
40790,"/** 
 * Kills the tunnel
 */
public void kill(){
  Process killProcess=null;
  ProcessBuilder killpb=new ProcessBuilder();
  killpb.command(getKillCommand());
  try {
    killProcess=killpb.start();
    killProcess.waitFor();
  }
 catch (  IOException e) {
    LOGGER.error(e);
  }
catch (  InterruptedException e) {
    LOGGER.error(e);
  }
 finally {
    if (killProcess != null)     killProcess.destroy();
  }
}","/** 
 * Kills the tunnel
 */
public void kill(){
  Process killProcess=null;
  ProcessBuilder killpb=new ProcessBuilder();
  killpb.command(getKillCommand());
  try {
    killProcess=killpb.start();
    killProcess.waitFor();
  }
 catch (  IOException e) {
    LOGGER.error(""String_Node_Str"" + browserStackKey + ""String_Node_Str""+ e);
  }
catch (  InterruptedException e) {
    LOGGER.error(""String_Node_Str"" + browserStackKey + ""String_Node_Str""+ e);
  }
 finally {
    if (killProcess != null) {
      killProcess.destroy();
    }
  }
}"
40791,"public static OSN get(){
  LOGGER.debug(""String_Node_Str"" + OS);
  if (OS.indexOf(""String_Node_Str"") >= 0)   return OSN.WIN;
 else   if (OS.indexOf(""String_Node_Str"") >= 0)   return OSN.MAC;
 else   if (OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") > 0)   return OSN.UNIX;
 else   throw new FrameworkException(""String_Node_Str"" + OS);
}","public static OSN get(){
  LOGGER.debug(""String_Node_Str"" + OS);
  if (OS.indexOf(""String_Node_Str"") >= 0) {
    return OSN.WIN;
  }
 else   if (OS.indexOf(""String_Node_Str"") >= 0) {
    return OSN.MAC;
  }
 else   if (OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") >= 0 || OS.indexOf(""String_Node_Str"") > 0) {
    return OSN.UNIX;
  }
 else {
    throw new FrameworkException(""String_Node_Str"" + OS);
  }
}"
40792,"@org.testng.annotations.DataProvider(name=""String_Node_Str"",parallel=true) public static Object[][] googleSheetDataProvider(Method m){
  String methodName=getFullMethodName(m);
  return getData(methodName);
}","@org.testng.annotations.DataProvider(name=""String_Node_Str"",parallel=true) public static Object[][] googleSheetDataProvider(Method m){
  String testMethodName=getFullMethodName(m);
  return getData(testMethodName);
}"
40793,"/** 
 * Removes duplicate browsers and prepare data based on the MapStrategy
 * @param methodName
 * @return
 */
public static Object[][] getData(String methodName){
  Object[][] returnObject=null;
  List<IBrowserConf> n_browserConf=RetryIAnnotationTransformer.methodBrowser.get(methodName);
  Set<IBrowserConf> browserConfSet=new HashSet<IBrowserConf>(n_browserConf);
  List<IBrowserConf> browserConf=new ArrayList<IBrowserConf>(browserConfSet);
  List<IProperty> prop=RetryIAnnotationTransformer.methodData.get(methodName);
  mapStrategy strategy=RetryIAnnotationTransformer.runStrategy.get(methodName);
  int browserConfsize=browserConf.size();
  int propSize=prop.size();
  int loopCombination;
  int k=0;
switch (strategy) {
case Full:
    loopCombination=browserConfsize * propSize;
  returnObject=new Object[loopCombination][2];
for (int i=0; i < browserConfsize; i++) {
  for (int j=0; j < propSize; j++) {
    returnObject[k][0]=browserConf.get(i);
    returnObject[k][1]=prop.get(j);
    k++;
  }
}
break;
case Optimal:
if (browserConfsize >= propSize) loopCombination=browserConfsize;
 else loopCombination=propSize;
returnObject=new Object[loopCombination][2];
for (int i=0; i < loopCombination; i++) {
Random r=new Random();
if (i >= browserConfsize) {
returnObject[i][0]=browserConf.get(r.nextInt(browserConfsize));
}
 else {
returnObject[i][0]=browserConf.get(i);
}
if (i >= propSize) {
returnObject[i][1]=prop.get(r.nextInt(propSize));
}
 else {
returnObject[i][1]=prop.get(i);
}
}
break;
default :
break;
}
return returnObject;
}","/** 
 * Removes duplicate browsers and prepare data based on the MapStrategy
 * @param methodName
 * @return
 */
public static Object[][] getData(String methodName){
  Object[][] testMethodData=null;
  List<IBrowserConf> browserConfFullList=RetryIAnnotationTransformer.methodBrowser.get(methodName);
  Set<IBrowserConf> browserConfSet=new HashSet<IBrowserConf>(browserConfFullList);
  List<IBrowserConf> browserConfFilteredList=new ArrayList<IBrowserConf>(browserConfSet);
  List<IProperty> testMData=RetryIAnnotationTransformer.methodData.get(methodName);
  mapStrategy strategy=RetryIAnnotationTransformer.runStrategy.get(methodName);
  int browserConfCount=browserConfFilteredList.size();
  int testDataCount=testMData.size();
  int loopCombination;
  int k=0;
switch (strategy) {
case Full:
    loopCombination=browserConfCount * testDataCount;
  testMethodData=new Object[loopCombination][2];
for (int i=0; i < browserConfCount; i++) {
  for (int j=0; j < testDataCount; j++) {
    testMethodData[k][0]=browserConfFilteredList.get(i);
    testMethodData[k][1]=testMData.get(j);
    k++;
  }
}
break;
case Optimal:
if (browserConfCount >= testDataCount) loopCombination=browserConfCount;
 else loopCombination=testDataCount;
testMethodData=new Object[loopCombination][2];
for (int i=0; i < loopCombination; i++) {
Random r=new Random();
if (i >= browserConfCount) {
testMethodData[i][0]=browserConfFilteredList.get(r.nextInt(browserConfCount));
}
 else {
testMethodData[i][0]=browserConfFilteredList.get(i);
}
if (i >= testDataCount) {
testMethodData[i][1]=testMData.get(r.nextInt(testDataCount));
}
 else {
testMethodData[i][1]=testMData.get(i);
}
}
break;
default :
break;
}
return testMethodData;
}"
40794,"public Builder withRunStartegy(String runStrategy){
  if (""String_Node_Str"".equalsIgnoreCase(runStrategy))   this.runStrat=mapStrategy.Full;
 else   if (""String_Node_Str"".equalsIgnoreCase(runStrategy))   this.runStrat=mapStrategy.Optimal;
 else   this.runStrat=mapStrategy.Optimal;
  return this;
}","public Builder withRunStartegy(String runStrategy){
  if (""String_Node_Str"".equalsIgnoreCase(runStrategy))   this.runStrat=mapStrategy.Full;
 else   if (""String_Node_Str"".equalsIgnoreCase(runStrategy))   this.runStrat=mapStrategy.Optimal;
 else   this.runStrat=null;
  return this;
}"
40795,"private mapStrategy getRunStrategy(Method method){
  IMappingData methodRunStartegy=primaryDataMap.get(method.getName().toString());
  IMappingData classRunStartegy=primaryDataMap.get(method.getDeclaringClass().getName().toString());
  IMappingData packageRunStartegy=primaryDataMap.get(method.getDeclaringClass().getPackage().getName().toString());
  if (methodRunStartegy != null && methodRunStartegy.getRunStartegy() != null) {
    return methodRunStartegy.getRunStartegy();
  }
 else   if (classRunStartegy != null && classRunStartegy.getRunStartegy() != null) {
    return classRunStartegy.getRunStartegy();
  }
 else   if (packageRunStartegy != null && packageRunStartegy.getRunStartegy() != null) {
    return packageRunStartegy.getRunStartegy();
  }
  return mapStrategy.Optimal;
}","private mapStrategy getRunStrategy(Method method){
  IMappingData methodRunStartegy=primaryDataMap.get(method.getName().toString());
  IMappingData classRunStartegy=primaryDataMap.get(method.getDeclaringClass().getName().toString());
  IMappingData packageRunStartegy=primaryDataMap.get(method.getDeclaringClass().getPackage().getName().toString());
  System.out.println(classRunStartegy.getRunStartegy());
  if (methodRunStartegy != null && methodRunStartegy.getRunStartegy() != null) {
    return methodRunStartegy.getRunStartegy();
  }
 else   if (classRunStartegy != null && classRunStartegy.getRunStartegy() != null) {
    return classRunStartegy.getRunStartegy();
  }
 else   if (packageRunStartegy != null && packageRunStartegy.getRunStartegy() != null) {
    return packageRunStartegy.getRunStartegy();
  }
  return mapStrategy.Optimal;
}"
40796,"public RefineMappedData(IDataSource dataSource){
  primaryDataMap=dataSource.getPrimaryData();
}","public RefineMappedData(IDataSource dataSource){
  primaryDataMap=dataSource.getPrimaryData();
  for (  String s : primaryDataMap.keySet()) {
    System.out.println(""String_Node_Str"" + s + ""String_Node_Str""+ primaryDataMap.get(s).getRunStartegy());
  }
}"
40797,"public MappingParserRevisit(String xmlName){
  this.xmlName=xmlName;
  try {
    builder=factory.newDocumentBuilder();
    document=builder.parse(""String_Node_Str"");
  }
 catch (  ParserConfigurationException e) {
  }
catch (  SAXException e) {
  }
catch (  IOException e) {
  }
}","public MappingParserRevisit(String xmlName){
  this.xmlName=xmlName;
  try {
    builder=factory.newDocumentBuilder();
    document=builder.parse(Utils.getResources(this,xmlName));
  }
 catch (  ParserConfigurationException e) {
  }
catch (  SAXException e) {
  }
catch (  IOException e) {
  }
}"
40798,"/** 
 * An expectation for checking that an element is either invisible or not present on the DOM.
 * @param locator used to find the element
 */
public static ExpectedCondition<Boolean> invisibilityOfElementLocated(final By locator){
  return new ExpectedCondition<Boolean>(){
    public Boolean apply(    WebDriver driver){
      try {
        return driver.findElements(locator).size() == 0;
      }
 catch (      NoSuchElementException e) {
        return true;
      }
catch (      StaleElementReferenceException e) {
        return true;
      }
    }
    @Override public String toString(){
      return ""String_Node_Str"";
    }
  }
;
}","/** 
 * An expectation for checking that an element is either invisible or not present on the DOM.
 * @param locator used to find the element
 */
public static ExpectedCondition<Boolean> invisibilityOfElementLocated(final By locator){
  return new ExpectedCondition<Boolean>(){
    public Boolean apply(    WebDriver driver){
      try {
        return driver.findElements(locator).size() == 0;
      }
 catch (      NoSuchElementException e) {
        LOGGER.error(e);
        return true;
      }
catch (      StaleElementReferenceException e) {
        LOGGER.error(e);
        return true;
      }
    }
    @Override public String toString(){
      return ""String_Node_Str"";
    }
  }
;
}"
40799,"/** 
 * Check clikability for the list of WebElement
 * @param elements
 * @return
 */
public static ExpectedCondition<Boolean> elementToBeClickable(final List<WebElement> elements){
  final List<Boolean> statusList=new ArrayList<Boolean>();
  return new ExpectedCondition<Boolean>(){
    public Boolean apply(    WebDriver driver){
      if (elements.size() == 0)       return false;
      statusList.clear();
      for (      WebElement w : elements) {
        try {
          if (w != null && w.isEnabled() && w.isDisplayed()) {
            statusList.add(true);
          }
 else {
            return false;
          }
        }
 catch (        StaleElementReferenceException e) {
          return false;
        }
      }
      LOGGER.debug(""String_Node_Str"" + elements.size() + ""String_Node_Str""+ statusList.size());
      return statusList.size() == elements.size() ? true : false;
    }
    @Override public String toString(){
      return ""String_Node_Str"";
    }
  }
;
}","/** 
 * Check clikability for the list of WebElement
 * @param elements
 * @return
 */
public static ExpectedCondition<Boolean> elementToBeClickable(final List<WebElement> elements){
  final List<Boolean> statusList=new ArrayList<Boolean>();
  return new ExpectedCondition<Boolean>(){
    public Boolean apply(    WebDriver driver){
      if (elements.size() == 0)       return false;
      statusList.clear();
      for (      WebElement w : elements) {
        try {
          if (w != null && w.isEnabled() && w.isDisplayed()) {
            statusList.add(true);
          }
 else {
            return false;
          }
        }
 catch (        StaleElementReferenceException e) {
          LOGGER.error(e);
          return false;
        }
      }
      LOGGER.debug(""String_Node_Str"" + elements.size() + ""String_Node_Str""+ statusList.size());
      return statusList.size() == elements.size() ? true : false;
    }
    @Override public String toString(){
      return ""String_Node_Str"";
    }
  }
;
}"
40800,"public Boolean apply(WebDriver driver){
  for (  WebElement w : elements) {
    try {
      if (w != null && w.isDisplayed()) {
        statusList.add(true);
      }
 else {
        return null;
      }
    }
 catch (    StaleElementReferenceException e) {
      return null;
    }
  }
  return statusList.size() == elements.size() ? true : false;
}","public Boolean apply(WebDriver driver){
  for (  WebElement w : elements) {
    try {
      if (w != null && w.isDisplayed()) {
        statusList.add(true);
      }
 else {
        return null;
      }
    }
 catch (    StaleElementReferenceException e) {
      LOGGER.error(e);
      return null;
    }
  }
  return statusList.size() == elements.size() ? true : false;
}"
40801,"/** 
 * This method accepts n number of WebElements and check for click ability if any of the WebElement is not click able will return false
 * @param elements
 * @return
 */
public static ExpectedCondition<Boolean> elementsToBeClickable(final WebElement... elements){
  final List<Boolean> statusList=new ArrayList<Boolean>();
  return new ExpectedCondition<Boolean>(){
    final StringBuilder sb=new StringBuilder();
    public Boolean apply(    WebDriver driver){
      for (      WebElement w : elements) {
        try {
          if (w.isDisplayed() && w.isEnabled()) {
            statusList.add(true);
          }
 else {
            statusList.add(false);
          }
        }
 catch (        StaleElementReferenceException e) {
          statusList.add(false);
        }
      }
      if (statusList.contains(false)) {
        statusList.clear();
        return false;
      }
      return true;
    }
    @Override public String toString(){
      return ""String_Node_Str"" + sb;
    }
  }
;
}","/** 
 * This method accepts n number of WebElements and check for click ability if any of the WebElement is not click able will return false
 * @param elements
 * @return
 */
public static ExpectedCondition<Boolean> elementsToBeClickable(final WebElement... elements){
  final List<Boolean> statusList=new ArrayList<Boolean>();
  return new ExpectedCondition<Boolean>(){
    final StringBuilder sb=new StringBuilder();
    public Boolean apply(    WebDriver driver){
      for (      WebElement w : elements) {
        try {
          if (w.isDisplayed() && w.isEnabled()) {
            statusList.add(true);
          }
 else {
            statusList.add(false);
          }
        }
 catch (        StaleElementReferenceException e) {
          LOGGER.error(e);
          statusList.add(false);
        }
      }
      if (statusList.contains(false)) {
        statusList.clear();
        return false;
      }
      return true;
    }
    @Override public String toString(){
      return ""String_Node_Str"" + sb;
    }
  }
;
}"
40802,"/** 
 * Check if all the element in the List are displayed
 * @param elements
 * @return
 */
public static ExpectedCondition<Boolean> elementToBeDisplayed(final List<WebElement> elements){
  final List<Boolean> statusList=new ArrayList<Boolean>();
  return new ExpectedCondition<Boolean>(){
    public Boolean apply(    WebDriver driver){
      for (      WebElement w : elements) {
        try {
          if (w != null && w.isDisplayed()) {
            statusList.add(true);
          }
 else {
            return null;
          }
        }
 catch (        StaleElementReferenceException e) {
          return null;
        }
      }
      return statusList.size() == elements.size() ? true : false;
    }
    @Override public String toString(){
      return ""String_Node_Str"";
    }
  }
;
}","/** 
 * Check if all the element in the List are displayed
 * @param elements
 * @return
 */
public static ExpectedCondition<Boolean> elementToBeDisplayed(final List<WebElement> elements){
  final List<Boolean> statusList=new ArrayList<Boolean>();
  return new ExpectedCondition<Boolean>(){
    public Boolean apply(    WebDriver driver){
      for (      WebElement w : elements) {
        try {
          if (w != null && w.isDisplayed()) {
            statusList.add(true);
          }
 else {
            return null;
          }
        }
 catch (        StaleElementReferenceException e) {
          LOGGER.error(e);
          return null;
        }
      }
      return statusList.size() == elements.size() ? true : false;
    }
    @Override public String toString(){
      return ""String_Node_Str"";
    }
  }
;
}"
40803,"/** 
 * This method return full path of the resource file name using class loader Can be used to upload files on website
 * @param className : Class which is calling this method
 * @param fileName
 * @return
 */
public static String getResources(Object className,String fileName){
  LOGGER.debug(""String_Node_Str"" + fileName);
  String returFilePath=null;
  try {
switch (OSName.get()) {
case UNIX:
      returFilePath=className.getClass().getResource(""String_Node_Str"" + fileName).getPath();
    break;
case WIN:
  returFilePath=className.getClass().getResource(""String_Node_Str"" + fileName).getPath().substring(1).replace(""String_Node_Str"",""String_Node_Str"");
break;
case MAC:
returFilePath=className.getClass().getResource(""String_Node_Str"" + fileName).getPath();
break;
default :
break;
}
if (LOGGER.isDebugEnabled()) LOGGER.debug(""String_Node_Str"" + returFilePath);
return returFilePath;
}
 catch (NullPointerException e) {
LOGGER.error(""String_Node_Str"" + fileName + ""String_Node_Str""+ className.toString()+ ""String_Node_Str"");
return null;
}
}","/** 
 * This method return full path of the resource file name using class loader Can be used to upload files on website
 * @param className : Class which is calling this method
 * @param fileName
 * @return
 */
public static String getResources(Object className,String fileName){
  LOGGER.debug(""String_Node_Str"" + fileName);
  String returFilePath=null;
  try {
switch (OSName.get()) {
case UNIX:
      returFilePath=className.getClass().getResource(""String_Node_Str"" + fileName).getPath();
    break;
case WIN:
  returFilePath=className.getClass().getResource(""String_Node_Str"" + fileName).getPath().substring(1).replace(""String_Node_Str"",""String_Node_Str"");
break;
case MAC:
returFilePath=className.getClass().getResource(""String_Node_Str"" + fileName).getPath();
break;
default :
break;
}
if (LOGGER.isDebugEnabled()) LOGGER.debug(""String_Node_Str"" + returFilePath);
return returFilePath;
}
 catch (NullPointerException e) {
LOGGER.error(""String_Node_Str"" + fileName + ""String_Node_Str""+ className.toString()+ ""String_Node_Str"");
LOGGER.error(e);
return null;
}
}"
40804,"/** 
 * return the value of the key passed for the properties file passed in constructor of the class
 */
public String getValue(String key){
  String value;
  try {
    value=propertiesValue.get(key);
    if (value == null)     throw new NullPointerException();
    return value;
  }
 catch (  NullPointerException e) {
    throw new FrameworkException(""String_Node_Str"" + key + ""String_Node_Str"");
  }
}","/** 
 * return the value of the key passed for the properties file passed in constructor of the class
 */
public String getValue(String key){
  String value;
  try {
    value=propertiesValue.get(key);
    if (value == null)     throw new NullPointerException();
    return value;
  }
 catch (  NullPointerException e) {
    LOGGER.error(e);
    throw new FrameworkException(""String_Node_Str"" + key + ""String_Node_Str"");
  }
}"
40805,"/** 
 * Get the map having key as methodName of   {@link IBrowserConf} for therefined data
 * @param data
 * @return
 * @throws IOException
 * @throws ServiceException
 */
public List<IBrowserConf> getBrowserListForSheet(IMappingData data){
  IMappingData methodData=data;
  List<IBrowserConf> browserConfList=new ArrayList<IBrowserConf>();
  URL browserSheetURL;
  String sheetNameHolder=null;
  ListFeed browserFeed;
  for (  String browserSheet : methodData.getClientEnvironment()) {
    sheetNameHolder=browserSheet;
    try {
      browserSheetURL=getWorkSheet(browserSheet).getListFeedUrl();
      browserFeed=service.getFeed(browserSheetURL,ListFeed.class);
      for (      ListEntry row : browserFeed.getEntries()) {
        browserConfList.add(getBrowserConfFromRow(row));
      }
    }
 catch (    NullPointerException ex) {
      System.out.println(""String_Node_Str"" + sheetNameHolder);
      LOGGER.error(ex);
    }
catch (    IOException e) {
      LOGGER.error(e);
    }
catch (    ServiceException e) {
      LOGGER.error(e);
    }
  }
  return browserConfList;
}","/** 
 * Get the map having key as methodName of   {@link IBrowserConf} for therefined data
 * @param data
 * @return
 * @throws IOException
 * @throws ServiceException
 */
public List<IBrowserConf> getBrowserListForSheet(IMappingData data){
  IMappingData methodData=data;
  List<IBrowserConf> browserConfList=new ArrayList<IBrowserConf>();
  URL browserSheetURL;
  String sheetNameHolder=null;
  ListFeed browserFeed;
  for (  String browserSheet : methodData.getClientEnvironment()) {
    sheetNameHolder=browserSheet;
    try {
      browserSheetURL=getWorkSheet(browserSheet).getListFeedUrl();
      browserFeed=service.getFeed(browserSheetURL,ListFeed.class);
      for (      ListEntry row : browserFeed.getEntries()) {
        browserConfList.add(getBrowserConfFromRow(row));
      }
    }
 catch (    NullPointerException ex) {
      LOGGER.error(""String_Node_Str"" + sheetNameHolder);
      LOGGER.error(ex);
    }
catch (    IOException e) {
      LOGGER.error(e);
    }
catch (    ServiceException e) {
      LOGGER.error(e);
    }
  }
  return browserConfList;
}"
40806,"public MappingParserRevisit(String xmlName){
  this.xmlName=xmlName;
  try {
    builder=factory.newDocumentBuilder();
    document=builder.parse(Utils.getResources(this,xmlName));
  }
 catch (  ParserConfigurationException e) {
  }
catch (  SAXException e) {
  }
catch (  IOException e) {
  }
}","public MappingParserRevisit(String xmlName){
  this.xmlName=xmlName;
  try {
    builder=factory.newDocumentBuilder();
    document=builder.parse(Utils.getResources(this,xmlName));
  }
 catch (  ParserConfigurationException e) {
    LOGGER.error(e);
  }
catch (  SAXException e) {
    LOGGER.error(e);
  }
catch (  IOException e) {
    LOGGER.error(e);
  }
}"
40807,"/** 
 * Generic waitFor Function which waits for condition to be successful else return null
 * @param expectedCondition:ExpectedCondition<T>
 * @param driver:WebDriver
 * @param timeout in seconds
 * @return <T> or null
 */
public static <T>T waitFor(ExpectedCondition<T> expectedCondition,WebDriver driver,int timeOutInSeconds){
  Stopwatch stopwatch=new Stopwatch();
  stopwatch.start();
  driver.manage().timeouts().implicitlyWait(0,TimeUnit.SECONDS);
  try {
    T returnValue=new WebDriverWait(driver,timeOutInSeconds).pollingEvery(500,TimeUnit.MILLISECONDS).until(expectedCondition);
    return returnValue;
  }
 catch (  TimeoutException e) {
    return null;
  }
 finally {
    driver.manage().timeouts().implicitlyWait(Driver.getBrowserConf().getDriverTimeOut(),TimeUnit.SECONDS);
    stopwatch.stop();
    LOGGER.debug(""String_Node_Str"" + stopwatch.elapsedTime(TimeUnit.SECONDS));
  }
}","/** 
 * Generic waitFor Function which waits for condition to be successful else return null
 * @param expectedCondition:ExpectedCondition<T>
 * @param driver:WebDriver
 * @param timeout in seconds
 * @return <T> or null
 */
public static <T>T waitFor(ExpectedCondition<T> expectedCondition,WebDriver driver,int timeOutInSeconds){
  Stopwatch stopwatch=new Stopwatch();
  stopwatch.start();
  driver.manage().timeouts().implicitlyWait(0,TimeUnit.SECONDS);
  try {
    T returnValue=new WebDriverWait(driver,timeOutInSeconds).pollingEvery(500,TimeUnit.MILLISECONDS).until(expectedCondition);
    return returnValue;
  }
 catch (  TimeoutException e) {
    LOGGER.error(e);
    return null;
  }
 finally {
    driver.manage().timeouts().implicitlyWait(Driver.getBrowserConf().getDriverTimeOut(),TimeUnit.SECONDS);
    stopwatch.stop();
    LOGGER.debug(""String_Node_Str"" + stopwatch.elapsedTime(TimeUnit.SECONDS));
  }
}"
40808,"/** 
 * Select Value from Drop Down with visible Text ,if no Such Element Found <br> Select default index
 * @param webElement :Select WebElement
 * @param visibleText :String to be Selected
 * @param defaultIndex :index to be selected by if value with string is not found
 * @author kapilA
 */
public static void selectDropDown(WebElement webElement,String visibleText,Integer defaultIndex){
  checkArgument(visibleText != null && !visibleText.isEmpty(),""String_Node_Str"");
  Select s=new Select(webElement);
  try {
    s.selectByVisibleText(visibleText);
  }
 catch (  NoSuchElementException e) {
    s.selectByIndex(defaultIndex);
  }
}","/** 
 * Select Value from Drop Down with visible Text ,if no Such Element Found <br> Select default index
 * @param webElement :Select WebElement
 * @param visibleText :String to be Selected
 * @param defaultIndex :index to be selected by if value with string is not found
 * @author kapilA
 */
public static void selectDropDown(WebElement webElement,String visibleText,Integer defaultIndex){
  checkArgument(visibleText != null && !visibleText.isEmpty(),""String_Node_Str"");
  Select s=new Select(webElement);
  try {
    s.selectByVisibleText(visibleText);
  }
 catch (  NoSuchElementException e) {
    LOGGER.error(e);
    s.selectByIndex(defaultIndex);
  }
}"
40809,"/** 
 * Return key values pair for the the tag ClientEnvironment of the Browser Xml
 * @param keyElement
 * @return
 */
private HashMap<String,String> getKeyValue(Element keyElement){
  HashMap<String,String> browserData=new HashMap<String,String>();
  Element element=keyElement;
  HashMap<String,String> f_map=new HashMap<String,String>();
  for (  DriverConfigurations.LocalEnvironmentConfig localConfig : DriverConfigurations.LocalEnvironmentConfig.values()) {
    browserData.put(localConfig.toString(),element.getAttribute(localConfig.toString()));
  }
  for (  DriverConfigurations.BrowserStackConfig bsConfig : DriverConfigurations.BrowserStackConfig.values()) {
    browserData.put(bsConfig.toString(),element.getAttribute(bsConfig.toString()));
  }
  for (  DriverConfigurations.HubConfig hubConfig : DriverConfigurations.HubConfig.values()) {
    browserData.put(hubConfig.toString(),element.getAttribute(hubConfig.toString()));
  }
  for (  DriverConfigurations.FrameworkConfig frameworkConfig : DriverConfigurations.FrameworkConfig.values()) {
    browserData.put(frameworkConfig.toString(),element.getAttribute(frameworkConfig.toString()));
  }
  return browserData;
}","/** 
 * Return key values pair for the the tag ClientEnvironment of the Browser Xml
 * @param keyElement
 * @return
 */
private HashMap<String,String> getKeyValue(Element keyElement){
  HashMap<String,String> browserData=new HashMap<String,String>();
  Element element=keyElement;
  for (  DriverConfigurations.LocalEnvironmentConfig localConfig : DriverConfigurations.LocalEnvironmentConfig.values()) {
    browserData.put(localConfig.toString(),element.getAttribute(localConfig.toString()));
  }
  for (  DriverConfigurations.BrowserStackConfig bsConfig : DriverConfigurations.BrowserStackConfig.values()) {
    browserData.put(bsConfig.toString(),element.getAttribute(bsConfig.toString()));
  }
  for (  DriverConfigurations.HubConfig hubConfig : DriverConfigurations.HubConfig.values()) {
    browserData.put(hubConfig.toString(),element.getAttribute(hubConfig.toString()));
  }
  for (  DriverConfigurations.FrameworkConfig frameworkConfig : DriverConfigurations.FrameworkConfig.values()) {
    browserData.put(frameworkConfig.toString(),element.getAttribute(frameworkConfig.toString()));
  }
  return browserData;
}"
40810,"/** 
 * Get the Body of the Email message
 */
@Override public String getEmailBody(Message message){
  String line;
  StringBuffer messageBody=new StringBuffer();
  try {
    folder.open(Folder.READ_ONLY);
    BufferedReader br=new BufferedReader(new InputStreamReader(message.getInputStream()));
    while ((line=br.readLine()) != null) {
      messageBody.append(line);
    }
    folder.close(true);
  }
 catch (  IOException e) {
    LOGGER.error(e);
  }
catch (  MessagingException e) {
    LOGGER.error(e);
  }
  return messageBody.toString();
}","/** 
 * Get the Body of the Email message
 */
@Override public String getEmailBody(Message message){
  String line;
  StringBuffer messageBody=new StringBuffer();
  BufferedReader br=null;
  try {
    folder.open(Folder.READ_ONLY);
    br=new BufferedReader(new InputStreamReader(message.getInputStream()));
    while ((line=br.readLine()) != null) {
      messageBody.append(line);
    }
    br.close();
    folder.close(true);
  }
 catch (  IOException e) {
    LOGGER.error(e);
  }
catch (  MessagingException e) {
    LOGGER.error(e);
  }
  return messageBody.toString();
}"
40811,"@Override public List<IMethodInstance> intercept(List<IMethodInstance> methods,ITestContext context){
  if (!testDataPrepared) {
    PrettyMessage prettyMessage=new PrettyMessage();
    Thread t=new Thread(prettyMessage);
    t.start();
    String evironment=System.getProperty(""String_Node_Str"");
    for (    IMethodInstance method : methods) {
      String dataProviderName=method.getMethod().getConstructorOrMethod().getMethod().getAnnotation(org.testng.annotations.Test.class).dataProvider();
      Method methodReflect=method.getMethod().getConstructorOrMethod().getMethod();
      if (dataProviderName.equals(""String_Node_Str"")) {
        updateGooglSheet(methodReflect,evironment);
      }
 else       if (dataProviderName.equals(""String_Node_Str"")) {
        updateXml(methodReflect,evironment);
      }
    }
    prettyMessage.swtichOffLogging();
    try {
      t.join();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    testDataPrepared=true;
  }
  return methods;
}","@Override public List<IMethodInstance> intercept(List<IMethodInstance> methods,ITestContext context){
  if (!testDataPrepared) {
    PrettyMessage prettyMessage=new PrettyMessage();
    Thread t=new Thread(prettyMessage);
    t.start();
    String evironment=System.getProperty(""String_Node_Str"");
    for (    IMethodInstance method : methods) {
      String dataProviderName=method.getMethod().getConstructorOrMethod().getMethod().getAnnotation(org.testng.annotations.Test.class).dataProvider();
      Method methodReflect=method.getMethod().getConstructorOrMethod().getMethod();
      if (dataProviderName.equals(""String_Node_Str"")) {
        updateGooglSheet(methodReflect,evironment);
      }
 else       if (dataProviderName.equals(""String_Node_Str"")) {
        updateXml(methodReflect,evironment);
      }
    }
    prettyMessage.swtichOffLogging();
    try {
      t.join();
    }
 catch (    InterruptedException e) {
      LOGGER.error(e);
    }
    testDataPrepared=true;
  }
  return methods;
}"
40812,"/** 
 * wait for tunnel to be up
 * @param waitForMessage
 * @throws IOException
 * @throws InterruptedException
 */
private void waitforTunnelTobeUp(String waitForMessage) throws IOException, InterruptedException {
  is=tunnelProcess.getInputStream();
  br=new BufferedReader(new InputStreamReader(is));
  String t=""String_Node_Str"";
  while (!t.equalsIgnoreCase(waitForMessage) && t != null)   try {
    t=br.readLine();
    LOGGER.info(""String_Node_Str"" + t);
  }
 catch (  IOException e) {
    LOGGER.error(e);
  }
}","/** 
 * wait for tunnel to be up
 * @param waitForMessage
 * @throws IOException
 * @throws InterruptedException
 */
private void waitforTunnelTobeUp(String waitForMessage) throws IOException, InterruptedException {
  is=tunnelProcess.getInputStream();
  br=new BufferedReader(new InputStreamReader(is));
  String t=""String_Node_Str"";
  while (!waitForMessage.equalsIgnoreCase(t) && t != null)   try {
    t=br.readLine();
    LOGGER.info(""String_Node_Str"" + t);
  }
 catch (  IOException e) {
    LOGGER.error(e);
  }
}"
40813,"/** 
 * Set ups the tunnel for the Keys
 * @param browserStackKey
 * @param browserStackURLS
 */
public void createTunnel(String browserStackKey,List<String> browserStackURLS){
  if (!activeTunnels.contains(browserStackKey)) {
synchronized (browserStackTunnel) {
      if (!activeTunnels.contains(browserStackKey)) {
        LOGGER.info(""String_Node_Str"" + browserStackKey);
        pb=new ProcessBuilder();
        pb.command(getSetUpCommand(browserStackKey,browserStackURLS));
        try {
          tunnelProcess=pb.start();
          waitforTunnelTobeUp(""String_Node_Str"");
          activeTunnels.add(browserStackKey);
        }
 catch (        IOException e) {
          LOGGER.error(e);
        }
catch (        InterruptedException e) {
          LOGGER.error(e);
        }
      }
 else {
        LOGGER.info(""String_Node_Str"" + browserStackKey);
      }
    }
  }
 else {
    LOGGER.info(""String_Node_Str"" + browserStackKey);
  }
}","/** 
 * Set ups the tunnel for the Keys
 * @param browserStackKey
 * @param browserStackURLS
 */
public void createTunnel(String browserStackKey,List<String> browserStackURLS){
  this.browserStackKey=browserStackKey;
  this.browserStackURLS=browserStackURLS;
  if (!activeTunnels.contains(browserStackKey)) {
synchronized (browserStackTunnel) {
      if (!activeTunnels.contains(browserStackKey)) {
        LOGGER.info(""String_Node_Str"" + browserStackKey);
        pb=new ProcessBuilder();
        pb.command(getSetUpCommand(browserStackKey,browserStackURLS));
        try {
          tunnelProcess=pb.start();
          waitforTunnelTobeUp(""String_Node_Str"");
          activeTunnels.add(browserStackKey);
        }
 catch (        IOException e) {
          LOGGER.error(e);
        }
catch (        InterruptedException e) {
          LOGGER.error(e);
        }
      }
 else {
        LOGGER.info(""String_Node_Str"" + browserStackKey);
      }
    }
  }
 else {
    LOGGER.info(""String_Node_Str"" + browserStackKey);
  }
}"
40814,"private String defaultBrowserVersion(){
  if (""String_Node_Str"".equals(browserConfMapValues.get(BrowserConstant.remoteFlag)) && ""String_Node_Str"".equals(browserConfMapValues.get(BrowserConstant.bsSwitch))) {
    throw new FrameworkException(""String_Node_Str"");
  }
  return browserVersion;
}","private String defaultBrowserVersion(){
  if (""String_Node_Str"".equals(browserConfMapValues.get(BrowserConstant.remoteFlag)) && ""String_Node_Str"".equals(browserConfMapValues.get(BrowserConstant.bsSwitch)) && ""String_Node_Str"".equals(browserConfMapValues.get(BrowserConstant.mobileTest))) {
    throw new FrameworkException(""String_Node_Str"");
  }
  return browserVersion;
}"
40815,"public Zhihu(String url){
  question=""String_Node_Str"";
  questionDescription=""String_Node_Str"";
  zhihuUrl=""String_Node_Str"";
  answers=new ArrayList<String>();
  if (getRealUrl(url)) {
    String content=Spider.SendGet(zhihuUrl);
    if (content != null) {
      Document doc=Jsoup.parse(content);
      question=doc.title();
      Element despElement=doc.getElementById(""String_Node_Str"");
      if (despElement != null) {
        questionDescription=despElement.text();
      }
      Elements ansItems=doc.getElementsByClass(""String_Node_Str"");
      for (      Element ansItem : ansItems) {
        if (ansItem.hasClass(""String_Node_Str"")) {
          Element textElement=ansItem.getElementsByClass(""String_Node_Str"").first();
          if (despElement != null) {
            answers.add(textElement.text());
          }
        }
      }
    }
 else {
      System.out.println(""String_Node_Str"");
    }
  }
}","public Zhihu(String url){
  question=""String_Node_Str"";
  questionDescription=""String_Node_Str"";
  zhihuUrl=""String_Node_Str"";
  answers=new ArrayList<String>();
  if (getRealUrl(url)) {
    String content=Spider.SendGet(zhihuUrl);
    if (content != null) {
      Document doc=Jsoup.parse(content);
      question=doc.title();
      Element despElement=doc.getElementById(""String_Node_Str"");
      if (despElement != null) {
        questionDescription=despElement.text();
      }
      Elements ansItems=doc.getElementsByClass(""String_Node_Str"");
      for (      Element ansItem : ansItems) {
        Element textElement=ansItem.getElementsByClass(""String_Node_Str"").first();
        if (despElement != null) {
          answers.add(textElement.text());
        }
      }
    }
 else {
      System.out.println(""String_Node_Str"");
    }
  }
}"
40816,"@Override public void actionPerformed(ActionEvent e){
  if (mBlaubotKingdom != null) {
    IBlaubotChannel chan=mBlaubotKingdom.getChannelManager().createOrGetChannel(channelId);
    chan.unsubscribe();
  }
}","@Override public void actionPerformed(ActionEvent e){
  if (mBlaubotChannelManager != null) {
    IBlaubotChannel chan=mBlaubotChannelManager.createOrGetChannel(channelId);
    chan.unsubscribe();
  }
}"
40817,"@Override public void unregisterBlaubotInstance(){
  if (this.mBlaubot != null) {
    this.mBlaubot.getChannelManager().removeAdminMessageListener(mChannelSubscriptionListener);
    this.mBlaubot.removeLifecycleListener(mChannelSubscriptionListener);
  }
  this.mBlaubot=null;
}","@Override public void unregisterBlaubotInstance(){
  if (this.mBlaubot != null) {
    this.mBlaubot.getChannelManager().removeAdminMessageListener(mChannelSubscriptionListener);
    this.mBlaubot.removeLifecycleListener(mChannelSubscriptionListener);
  }
  this.mBlaubot=null;
  this.mBlaubotChannelManager=null;
}"
40818,"@Override public void unregisterBlaubotKingdomInstance(){
  if (this.mBlaubotKingdom != null) {
    mBlaubotKingdom.getChannelManager().removeAdminMessageListener(mChannelSubscriptionListener);
    mBlaubotKingdom.removeLifecycleListener(mChannelSubscriptionListener);
  }
  this.mBlaubotKingdom=null;
}","@Override public void unregisterBlaubotKingdomInstance(){
  if (this.mBlaubotKingdom != null) {
    mBlaubotKingdom.getChannelManager().removeAdminMessageListener(mChannelSubscriptionListener);
    mBlaubotKingdom.removeLifecycleListener(mChannelSubscriptionListener);
  }
  this.mBlaubotKingdom=null;
  this.mBlaubotChannelManager=null;
}"
40819,"@Override public void registerBlaubotKingdomInstance(BlaubotKingdom blaubotKingdom){
  if (this.mBlaubotKingdom != null) {
    unregisterBlaubotKingdomInstance();
  }
  this.mBlaubotKingdom=blaubotKingdom;
  blaubotKingdom.getChannelManager().addAdminMessageListener(mChannelSubscriptionListener);
  blaubotKingdom.addLifecycleListener(mChannelSubscriptionListener);
}","@Override public void registerBlaubotKingdomInstance(BlaubotKingdom blaubotKingdom){
  if (this.mBlaubotKingdom != null) {
    unregisterBlaubotKingdomInstance();
  }
  this.mBlaubotKingdom=blaubotKingdom;
  this.mBlaubotChannelManager=blaubotKingdom.getChannelManager();
  blaubotKingdom.getChannelManager().addAdminMessageListener(mChannelSubscriptionListener);
  blaubotKingdom.addLifecycleListener(mChannelSubscriptionListener);
}"
40820,"@Override public void registerBlaubotInstance(Blaubot blaubot){
  if (this.mBlaubot != null) {
    unregisterBlaubotInstance();
  }
  this.mBlaubot=blaubot;
  blaubot.getChannelManager().addAdminMessageListener(mChannelSubscriptionListener);
  blaubot.addLifecycleListener(mChannelSubscriptionListener);
}","@Override public void registerBlaubotInstance(Blaubot blaubot){
  if (this.mBlaubot != null) {
    unregisterBlaubotInstance();
  }
  this.mBlaubot=blaubot;
  this.mBlaubotChannelManager=blaubot.getChannelManager();
  this.mBlaubotChannelManager.addAdminMessageListener(mChannelSubscriptionListener);
  blaubot.addLifecycleListener(mChannelSubscriptionListener);
}"
40821,"@Override public void run(){
  removeAll();
  mContentContainer.removeAll();
  add(new JLabel(""String_Node_Str""));
  if (channels.isEmpty()) {
    add(new JLabel(""String_Node_Str""));
  }
  add(Box.createRigidArea(new Dimension(0,5)));
  add(mContentContainer);
  for (  final short channelId : channels) {
    Set<String> subscribers=mChannelSubscriptionListener.getSubscribersOfChannel(channelId);
    JLabel comp=new JLabel(""String_Node_Str"" + channelId + ""String_Node_Str""+ subscribers.size()+ ""String_Node_Str"");
    JButton subscribeButton=new JButton(""String_Node_Str"");
    subscribeButton.setBorder(BorderFactory.createRaisedBevelBorder());
    subscribeButton.setToolTipText(""String_Node_Str"");
    subscribeButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        if (mBlaubotKingdom != null) {
          IBlaubotChannel chan=mBlaubotKingdom.getChannelManager().createOrGetChannel(channelId);
          chan.subscribe();
        }
      }
    }
);
    JButton unsubscribeButton=new JButton(""String_Node_Str"");
    unsubscribeButton.setToolTipText(""String_Node_Str"");
    unsubscribeButton.setBorder(BorderFactory.createRaisedBevelBorder());
    unsubscribeButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        if (mBlaubotKingdom != null) {
          IBlaubotChannel chan=mBlaubotKingdom.getChannelManager().createOrGetChannel(channelId);
          chan.unsubscribe();
        }
      }
    }
);
    JPanel buttonPanel=new JPanel();
    buttonPanel.setLayout(new FlowLayout());
    subscribeButton.setMargin(new java.awt.Insets(1,1,1,1));
    unsubscribeButton.setMargin(new java.awt.Insets(1,1,1,1));
    buttonPanel.add(subscribeButton);
    buttonPanel.add(unsubscribeButton);
    JPanel panel=new JPanel();
    panel.setAlignmentX(Component.LEFT_ALIGNMENT);
    panel.setLayout(new BoxLayout(panel,BoxLayout.Y_AXIS));
    panel.add(Box.createRigidArea(new Dimension(5,0)));
    panel.add(comp);
    panel.add(buttonPanel);
    panel.setToolTipText(""String_Node_Str"" + subscribers);
    mContentContainer.add(panel);
  }
  updateUI();
}","@Override public void run(){
  removeAll();
  mContentContainer.removeAll();
  add(new JLabel(""String_Node_Str""));
  if (channels.isEmpty()) {
    add(new JLabel(""String_Node_Str""));
  }
  add(Box.createRigidArea(new Dimension(0,5)));
  add(mContentContainer);
  for (  final short channelId : channels) {
    Set<String> subscribers=mChannelSubscriptionListener.getSubscribersOfChannel(channelId);
    JLabel comp=new JLabel(""String_Node_Str"" + channelId + ""String_Node_Str""+ subscribers.size()+ ""String_Node_Str"");
    JButton subscribeButton=new JButton(""String_Node_Str"");
    subscribeButton.setBorder(BorderFactory.createRaisedBevelBorder());
    subscribeButton.setToolTipText(""String_Node_Str"");
    subscribeButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        if (mBlaubotChannelManager != null) {
          IBlaubotChannel chan=mBlaubotChannelManager.createOrGetChannel(channelId);
          chan.subscribe();
        }
      }
    }
);
    JButton unsubscribeButton=new JButton(""String_Node_Str"");
    unsubscribeButton.setToolTipText(""String_Node_Str"");
    unsubscribeButton.setBorder(BorderFactory.createRaisedBevelBorder());
    unsubscribeButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        if (mBlaubotChannelManager != null) {
          IBlaubotChannel chan=mBlaubotChannelManager.createOrGetChannel(channelId);
          chan.unsubscribe();
        }
      }
    }
);
    JPanel buttonPanel=new JPanel();
    buttonPanel.setLayout(new FlowLayout());
    subscribeButton.setMargin(new java.awt.Insets(1,1,1,1));
    unsubscribeButton.setMargin(new java.awt.Insets(1,1,1,1));
    buttonPanel.add(subscribeButton);
    buttonPanel.add(unsubscribeButton);
    JPanel panel=new JPanel();
    panel.setAlignmentX(Component.LEFT_ALIGNMENT);
    panel.setLayout(new BoxLayout(panel,BoxLayout.Y_AXIS));
    panel.add(Box.createRigidArea(new Dimension(5,0)));
    panel.add(comp);
    panel.add(buttonPanel);
    panel.setToolTipText(""String_Node_Str"" + subscribers);
    mContentContainer.add(panel);
  }
  updateUI();
}"
40822,"private void updateViews(){
  final Set<Short> channels=mChannelSubscriptionListener.getChannels();
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      removeAll();
      mContentContainer.removeAll();
      add(new JLabel(""String_Node_Str""));
      if (channels.isEmpty()) {
        add(new JLabel(""String_Node_Str""));
      }
      add(Box.createRigidArea(new Dimension(0,5)));
      add(mContentContainer);
      for (      final short channelId : channels) {
        Set<String> subscribers=mChannelSubscriptionListener.getSubscribersOfChannel(channelId);
        JLabel comp=new JLabel(""String_Node_Str"" + channelId + ""String_Node_Str""+ subscribers.size()+ ""String_Node_Str"");
        JButton subscribeButton=new JButton(""String_Node_Str"");
        subscribeButton.setBorder(BorderFactory.createRaisedBevelBorder());
        subscribeButton.setToolTipText(""String_Node_Str"");
        subscribeButton.addActionListener(new ActionListener(){
          @Override public void actionPerformed(          ActionEvent e){
            if (mBlaubotKingdom != null) {
              IBlaubotChannel chan=mBlaubotKingdom.getChannelManager().createOrGetChannel(channelId);
              chan.subscribe();
            }
          }
        }
);
        JButton unsubscribeButton=new JButton(""String_Node_Str"");
        unsubscribeButton.setToolTipText(""String_Node_Str"");
        unsubscribeButton.setBorder(BorderFactory.createRaisedBevelBorder());
        unsubscribeButton.addActionListener(new ActionListener(){
          @Override public void actionPerformed(          ActionEvent e){
            if (mBlaubotKingdom != null) {
              IBlaubotChannel chan=mBlaubotKingdom.getChannelManager().createOrGetChannel(channelId);
              chan.unsubscribe();
            }
          }
        }
);
        JPanel buttonPanel=new JPanel();
        buttonPanel.setLayout(new FlowLayout());
        subscribeButton.setMargin(new java.awt.Insets(1,1,1,1));
        unsubscribeButton.setMargin(new java.awt.Insets(1,1,1,1));
        buttonPanel.add(subscribeButton);
        buttonPanel.add(unsubscribeButton);
        JPanel panel=new JPanel();
        panel.setAlignmentX(Component.LEFT_ALIGNMENT);
        panel.setLayout(new BoxLayout(panel,BoxLayout.Y_AXIS));
        panel.add(Box.createRigidArea(new Dimension(5,0)));
        panel.add(comp);
        panel.add(buttonPanel);
        panel.setToolTipText(""String_Node_Str"" + subscribers);
        mContentContainer.add(panel);
      }
      updateUI();
    }
  }
);
}","private void updateViews(){
  final Set<Short> channels=mChannelSubscriptionListener.getChannels();
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      removeAll();
      mContentContainer.removeAll();
      add(new JLabel(""String_Node_Str""));
      if (channels.isEmpty()) {
        add(new JLabel(""String_Node_Str""));
      }
      add(Box.createRigidArea(new Dimension(0,5)));
      add(mContentContainer);
      for (      final short channelId : channels) {
        Set<String> subscribers=mChannelSubscriptionListener.getSubscribersOfChannel(channelId);
        JLabel comp=new JLabel(""String_Node_Str"" + channelId + ""String_Node_Str""+ subscribers.size()+ ""String_Node_Str"");
        JButton subscribeButton=new JButton(""String_Node_Str"");
        subscribeButton.setBorder(BorderFactory.createRaisedBevelBorder());
        subscribeButton.setToolTipText(""String_Node_Str"");
        subscribeButton.addActionListener(new ActionListener(){
          @Override public void actionPerformed(          ActionEvent e){
            if (mBlaubotChannelManager != null) {
              IBlaubotChannel chan=mBlaubotChannelManager.createOrGetChannel(channelId);
              chan.subscribe();
            }
          }
        }
);
        JButton unsubscribeButton=new JButton(""String_Node_Str"");
        unsubscribeButton.setToolTipText(""String_Node_Str"");
        unsubscribeButton.setBorder(BorderFactory.createRaisedBevelBorder());
        unsubscribeButton.addActionListener(new ActionListener(){
          @Override public void actionPerformed(          ActionEvent e){
            if (mBlaubotChannelManager != null) {
              IBlaubotChannel chan=mBlaubotChannelManager.createOrGetChannel(channelId);
              chan.unsubscribe();
            }
          }
        }
);
        JPanel buttonPanel=new JPanel();
        buttonPanel.setLayout(new FlowLayout());
        subscribeButton.setMargin(new java.awt.Insets(1,1,1,1));
        unsubscribeButton.setMargin(new java.awt.Insets(1,1,1,1));
        buttonPanel.add(subscribeButton);
        buttonPanel.add(unsubscribeButton);
        JPanel panel=new JPanel();
        panel.setAlignmentX(Component.LEFT_ALIGNMENT);
        panel.setLayout(new BoxLayout(panel,BoxLayout.Y_AXIS));
        panel.add(Box.createRigidArea(new Dimension(5,0)));
        panel.add(comp);
        panel.add(buttonPanel);
        panel.setToolTipText(""String_Node_Str"" + subscribers);
        mContentContainer.add(panel);
      }
      updateUI();
    }
  }
);
}"
40823,"public RotationData(long timestamp,float x,float y,float z,float cos,float headingAccuracy){
  super(timestamp);
  this.x=x;
  this.y=y;
  this.z=z;
  this.cos=cos;
  this.headingAccuracy=headingAccuracy;
}","public RotationData(long timestamp,float x,float y,float z){
  this(timestamp,x,y,z,0,0);
}"
40824,"@Override protected AbstractData buildData(SensorEvent event){
  return new RotationData(System.currentTimeMillis(),event.values[0],event.values[1],event.values[2],event.values[3],event.values[4]);
}","@Override protected AbstractData buildData(SensorEvent event){
  if (event.values.length >= 6) {
    return new RotationData(System.currentTimeMillis(),event.values[0],event.values[1],event.values[2],event.values[3],event.values[4]);
  }
 else {
    return new RotationData(System.currentTimeMillis(),event.values[0],event.values[1],event.values[2]);
  }
}"
40825,"/** 
 * This function decodes a half-decoded Mode S reply to its deepest possible specialization. Use getType() to check its actual type afterwards.
 * @param modes the incompletely decoded Mode S message
 * @return an instance of the most specialized ModeSReply possible
 * @throws UnspecifiedFormatError if format is not specified
 * @throws BadFormatException if format contains error
 */
public static ModeSReply genericDecoder(ModeSReply modes) throws BadFormatException, UnspecifiedFormatError {
switch (modes.getDownlinkFormat()) {
case 0:
    return new ShortACAS(modes);
case 4:
  return new AltitudeReply(modes);
case 5:
return new IdentifyReply(modes);
case 11:
return new AllCallReply(modes);
case 16:
return new LongACAS(modes);
case 17:
case 18:
case 19:
if (modes.getDownlinkFormat() == 17 || modes.getDownlinkFormat() == 18 && modes.getFirstField() < 2 || modes.getDownlinkFormat() == 19 && modes.getFirstField() == 0) {
ExtendedSquitter es1090=new ExtendedSquitter(modes);
byte ftc=es1090.getFormatTypeCode();
if (ftc >= 1 && ftc <= 4) return new IdentificationMsg(es1090);
if (ftc >= 5 && ftc <= 8) return new SurfacePositionMsg(es1090);
if ((ftc >= 9 && ftc <= 18) || (ftc >= 20 && ftc <= 22)) return new AirbornePositionMsg(es1090);
if (ftc == 19) {
int subtype=es1090.getMessage()[0] & 0x7;
if (subtype == 1 || subtype == 2) return new VelocityOverGroundMsg(es1090);
 else if (subtype == 3 || subtype == 4) return new AirspeedHeadingMsg(es1090);
}
if (ftc == 28) {
int subtype=es1090.getMessage()[0] & 0x7;
if (subtype == 1) return new EmergencyOrPriorityStatusMsg(es1090);
if (subtype == 2) return new TCASResolutionAdvisoryMsg(es1090);
}
if (ftc == 31) {
int subtype=es1090.getMessage()[0] & 0x7;
if (subtype == 0 || subtype == 1) return new OperationalStatusMsg(es1090);
}
return es1090;
}
 else if (modes.getDownlinkFormat() == 18 && modes.getFirstField() == 6) {
return modes;
}
 else if (modes.getDownlinkFormat() == 18 && modes.getFirstField() < 4 | modes.getDownlinkFormat() == 18 && modes.getFirstField() == 5) {
return modes;
}
 else if (modes.getDownlinkFormat() == 18 && modes.getFirstField() == 4) {
return modes;
}
 else if (modes.getDownlinkFormat() == 19) {
return new MilitaryExtendedSquitter(modes);
}
return modes;
case 20:
return new CommBAltitudeReply(modes);
case 21:
return new CommBIdentifyReply(modes);
default :
if (modes.getDownlinkFormat() >= 24) return new CommDExtendedLengthMsg(modes);
 else return modes;
}
}","/** 
 * This function decodes a half-decoded Mode S reply to its deepest possible specialization. Use getType() to check its actual type afterwards.
 * @param modes the incompletely decoded Mode S message
 * @return an instance of the most specialized ModeSReply possible
 * @throws UnspecifiedFormatError if format is not specified
 * @throws BadFormatException if format contains error
 */
public static ModeSReply genericDecoder(ModeSReply modes) throws BadFormatException, UnspecifiedFormatError {
switch (modes.getDownlinkFormat()) {
case 0:
    return new ShortACAS(modes);
case 4:
  return new AltitudeReply(modes);
case 5:
return new IdentifyReply(modes);
case 11:
return new AllCallReply(modes);
case 16:
return new LongACAS(modes);
case 17:
case 18:
case 19:
if (modes.getDownlinkFormat() == 17 || modes.getDownlinkFormat() == 18 && modes.getFirstField() < 2 || modes.getDownlinkFormat() == 19 && modes.getFirstField() == 0) {
ExtendedSquitter es1090=new ExtendedSquitter(modes);
byte ftc=es1090.getFormatTypeCode();
if (ftc >= 1 && ftc <= 4) return new IdentificationMsg(es1090);
if (ftc >= 5 && ftc <= 8) return new SurfacePositionMsg(es1090);
if ((ftc >= 9 && ftc <= 18) || (ftc >= 20 && ftc <= 22)) return new AirbornePositionMsg(es1090);
if (ftc == 19) {
int subtype=es1090.getMessage()[0] & 0x7;
if (subtype == 1 || subtype == 2) return new VelocityOverGroundMsg(es1090);
 else if (subtype == 3 || subtype == 4) return new AirspeedHeadingMsg(es1090);
}
if (ftc == 28) {
int subtype=es1090.getMessage()[0] & 0x7;
if (subtype == 1) return new EmergencyOrPriorityStatusMsg(es1090);
if (subtype == 2) return new TCASResolutionAdvisoryMsg(es1090);
}
if (ftc == 31) {
int subtype=es1090.getMessage()[0] & 0x7;
if (subtype == 0 || subtype == 1) return new OperationalStatusMsg(es1090);
}
return es1090;
}
 else if (modes.getDownlinkFormat() == 18 && modes.getFirstField() == 6) {
return modes;
}
 else if (modes.getDownlinkFormat() == 18 && modes.getFirstField() < 4 || modes.getDownlinkFormat() == 18 && modes.getFirstField() == 5) {
return modes;
}
 else if (modes.getDownlinkFormat() == 18 && modes.getFirstField() == 4) {
return modes;
}
 else if (modes.getDownlinkFormat() == 19) {
return new MilitaryExtendedSquitter(modes);
}
return modes;
case 20:
return new CommBAltitudeReply(modes);
case 21:
return new CommBIdentifyReply(modes);
default :
if (modes.getDownlinkFormat() >= 24) return new CommDExtendedLengthMsg(modes);
 else return modes;
}
}"
40826,"/** 
 * This function decodes a half-decoded Mode S reply to its deepest possible specialization. Use getType() to check its actual type afterwards.
 * @param modes the incompletely decoded Mode S message
 * @return an instance of the most specialized ModeSReply possible
 * @throws UnspecifiedFormatError if format is not specified
 * @throws BadFormatException if format contains error
 */
public static ModeSReply genericDecoder(ModeSReply modes) throws BadFormatException, UnspecifiedFormatError {
switch (modes.getDownlinkFormat()) {
case 0:
    return new ShortACAS(modes);
case 4:
  return new AltitudeReply(modes);
case 5:
return new IdentifyReply(modes);
case 11:
return new AllCallReply(modes);
case 16:
return new LongACAS(modes);
case 17:
case 18:
case 19:
if (modes.getDownlinkFormat() == 17 | modes.getDownlinkFormat() == 18 && modes.getFirstField() < 2 | modes.getDownlinkFormat() == 19 && modes.getFirstField() == 0) {
ExtendedSquitter es1090=new ExtendedSquitter(modes);
byte ftc=es1090.getFormatTypeCode();
if (ftc >= 1 && ftc <= 4) return new IdentificationMsg(es1090);
if (ftc >= 5 && ftc <= 8) return new SurfacePositionMsg(es1090);
if ((ftc >= 9 && ftc <= 18) || (ftc >= 20 && ftc <= 22)) return new AirbornePositionMsg(es1090);
if (ftc == 19) {
int subtype=es1090.getMessage()[0] & 0x7;
if (subtype == 1 || subtype == 2) return new VelocityOverGroundMsg(es1090);
 else if (subtype == 3 || subtype == 4) return new AirspeedHeadingMsg(es1090);
}
if (ftc == 28) {
int subtype=es1090.getMessage()[0] & 0x7;
if (subtype == 1) return new EmergencyOrPriorityStatusMsg(es1090);
if (subtype == 2) return new TCASResolutionAdvisoryMsg(es1090);
}
if (ftc == 31) {
int subtype=es1090.getMessage()[0] & 0x7;
if (subtype == 0 || subtype == 1) return new OperationalStatusMsg(es1090);
}
return es1090;
}
 else if (modes.getDownlinkFormat() == 18 && modes.getFirstField() == 6) {
return modes;
}
 else if (modes.getDownlinkFormat() == 18 && modes.getFirstField() < 4 | modes.getDownlinkFormat() == 18 && modes.getFirstField() == 5) {
return modes;
}
 else if (modes.getDownlinkFormat() == 18 && modes.getFirstField() == 4) {
return modes;
}
 else if (modes.getDownlinkFormat() == 19) {
return new MilitaryExtendedSquitter(modes);
}
case 20:
return new CommBAltitudeReply(modes);
case 21:
return new CommBIdentifyReply(modes);
default :
if (modes.getDownlinkFormat() >= 24) return new CommDExtendedLengthMsg(modes);
 else return modes;
}
}","/** 
 * This function decodes a half-decoded Mode S reply to its deepest possible specialization. Use getType() to check its actual type afterwards.
 * @param modes the incompletely decoded Mode S message
 * @return an instance of the most specialized ModeSReply possible
 * @throws UnspecifiedFormatError if format is not specified
 * @throws BadFormatException if format contains error
 */
public static ModeSReply genericDecoder(ModeSReply modes) throws BadFormatException, UnspecifiedFormatError {
switch (modes.getDownlinkFormat()) {
case 0:
    return new ShortACAS(modes);
case 4:
  return new AltitudeReply(modes);
case 5:
return new IdentifyReply(modes);
case 11:
return new AllCallReply(modes);
case 16:
return new LongACAS(modes);
case 17:
case 18:
case 19:
if (modes.getDownlinkFormat() == 17 || modes.getDownlinkFormat() == 18 && modes.getFirstField() < 2 || modes.getDownlinkFormat() == 19 && modes.getFirstField() == 0) {
ExtendedSquitter es1090=new ExtendedSquitter(modes);
byte ftc=es1090.getFormatTypeCode();
if (ftc >= 1 && ftc <= 4) return new IdentificationMsg(es1090);
if (ftc >= 5 && ftc <= 8) return new SurfacePositionMsg(es1090);
if ((ftc >= 9 && ftc <= 18) || (ftc >= 20 && ftc <= 22)) return new AirbornePositionMsg(es1090);
if (ftc == 19) {
int subtype=es1090.getMessage()[0] & 0x7;
if (subtype == 1 || subtype == 2) return new VelocityOverGroundMsg(es1090);
 else if (subtype == 3 || subtype == 4) return new AirspeedHeadingMsg(es1090);
}
if (ftc == 28) {
int subtype=es1090.getMessage()[0] & 0x7;
if (subtype == 1) return new EmergencyOrPriorityStatusMsg(es1090);
if (subtype == 2) return new TCASResolutionAdvisoryMsg(es1090);
}
if (ftc == 31) {
int subtype=es1090.getMessage()[0] & 0x7;
if (subtype == 0 || subtype == 1) return new OperationalStatusMsg(es1090);
}
return es1090;
}
 else if (modes.getDownlinkFormat() == 18 && modes.getFirstField() == 6) {
return modes;
}
 else if (modes.getDownlinkFormat() == 18 && modes.getFirstField() < 4 | modes.getDownlinkFormat() == 18 && modes.getFirstField() == 5) {
return modes;
}
 else if (modes.getDownlinkFormat() == 18 && modes.getFirstField() == 4) {
return modes;
}
 else if (modes.getDownlinkFormat() == 19) {
return new MilitaryExtendedSquitter(modes);
}
return modes;
case 20:
return new CommBAltitudeReply(modes);
case 21:
return new CommBIdentifyReply(modes);
default :
if (modes.getDownlinkFormat() >= 24) return new CommDExtendedLengthMsg(modes);
 else return modes;
}
}"
40827,"/** 
 * @param squitter extended squitter which contains this TCAS resolution advisory msg
 * @throws BadFormatException if message has wrong format
 */
public TCASResolutionAdvisoryMsg(ExtendedSquitter squitter) throws BadFormatException {
  super(squitter);
  setType(subtype.ADSB_TCAS);
  if (this.getFormatTypeCode() != 28)   throw new BadFormatException(""String_Node_Str"");
  byte[] msg=this.getMessage();
  msg_subtype=(byte)(msg[0] & 0x7);
  if (msg_subtype != 2)   throw new BadFormatException(""String_Node_Str"");
  active_ra=(short)(((msg[2] >>> 2) | (msg[1] << 6)) & 0x3FFF);
  racs_record=(byte)((((msg[2] & 0x3) << 2) | (msg[3] >>> 6)) & 0xF);
  ra_terminated=(msg[3] & 0x20) > 0;
  multi_threat_encounter=(msg[3] & 0x10) > 0;
  threat_type=(byte)((msg[3] >>> 2) & 0x3);
  threat_identity=(msg[6] | (msg[5] << 8) | (msg[4] << 16)| ((msg[4] & 0x3) << 24)) & 0x3FFFFFF;
}","/** 
 * @param squitter extended squitter which contains this TCAS resolution advisory msg
 * @throws BadFormatException if message has wrong format
 */
public TCASResolutionAdvisoryMsg(ExtendedSquitter squitter) throws BadFormatException {
  super(squitter);
  setType(subtype.ADSB_TCAS);
  if (this.getFormatTypeCode() != 28)   throw new BadFormatException(""String_Node_Str"");
  byte[] msg=this.getMessage();
  msg_subtype=(byte)(msg[0] & 0x7);
  if (msg_subtype != 2)   throw new BadFormatException(""String_Node_Str"");
  active_ra=(short)(((msg[2] >>> 2) & 0x3f | (msg[1] << 6)) & 0x3FFF);
  racs_record=(byte)((((msg[2] & 0x3) << 2) | (msg[3] >>> 6) & 0x3) & 0xF);
  ra_terminated=(msg[3] & 0x20) > 0;
  multi_threat_encounter=(msg[3] & 0x10) > 0;
  threat_type=(byte)((msg[3] >>> 2) & 0x3);
  threat_identity=(msg[6] | (msg[5] << 8) | (msg[4] << 16)| ((msg[4] & 0x3) << 24)) & 0x3FFFFFF;
}"
40828,"/** 
 * @param squitter extended squitter which contains this velocity over ground msg
 * @throws BadFormatException if message has wrong format
 */
public VelocityOverGroundMsg(ExtendedSquitter squitter) throws BadFormatException {
  super(squitter);
  setType(subtype.ADSB_VELOCITY);
  if (this.getFormatTypeCode() != 19) {
    throw new BadFormatException(""String_Node_Str"");
  }
  byte[] msg=this.getMessage();
  msg_subtype=(byte)(msg[0] & 0x7);
  if (msg_subtype != 1 && msg_subtype != 2) {
    throw new BadFormatException(""String_Node_Str"");
  }
  intent_change=(msg[1] & 0x80) > 0;
  ifr_capability=(msg[1] & 0x40) > 0;
  navigation_accuracy_category=(byte)((msg[1] >>> 3) & 0x7);
  velocity_info_available=true;
  vertical_rate_info_available=true;
  geo_minus_baro_available=true;
  direction_west=(msg[1] & 0x4) > 0;
  east_west_velocity=(short)(((msg[1] & 0x3) << 8 | msg[2] & 0xFF) - 1);
  if (east_west_velocity == -1)   velocity_info_available=false;
  if (msg_subtype == 2)   east_west_velocity<<=2;
  direction_south=(msg[3] & 0x80) > 0;
  north_south_velocity=(short)(((msg[3] & 0x7F) << 3 | msg[4] >>> 5 & 0x07) - 1);
  if (north_south_velocity == -1)   velocity_info_available=false;
  if (msg_subtype == 2)   north_south_velocity<<=2;
  vertical_source=(msg[4] & 0x10) > 0;
  vertical_rate_down=(msg[4] & 0x08) > 0;
  vertical_rate=(short)((((msg[4] & 0x07) << 6 | msg[5] >>> 2 & 0x3F) - 1) << 6);
  if (vertical_rate == -1)   vertical_rate_info_available=false;
  geo_minus_baro=(short)(((msg[6] & 0x7F) - 1) * 25);
  if (geo_minus_baro == -1)   geo_minus_baro_available=false;
  if ((msg[6] & 0x80) > 0)   geo_minus_baro*=-1;
}","/** 
 * @param squitter extended squitter which contains this velocity over ground msg
 * @throws BadFormatException if message has wrong format
 */
public VelocityOverGroundMsg(ExtendedSquitter squitter) throws BadFormatException {
  super(squitter);
  setType(subtype.ADSB_VELOCITY);
  if (this.getFormatTypeCode() != 19) {
    throw new BadFormatException(""String_Node_Str"");
  }
  byte[] msg=this.getMessage();
  msg_subtype=(byte)(msg[0] & 0x7);
  if (msg_subtype != 1 && msg_subtype != 2) {
    throw new BadFormatException(""String_Node_Str"");
  }
  intent_change=(msg[1] & 0x80) > 0;
  ifr_capability=(msg[1] & 0x40) > 0;
  navigation_accuracy_category=(byte)((msg[1] >>> 3) & 0x7);
  velocity_info_available=true;
  vertical_rate_info_available=true;
  geo_minus_baro_available=true;
  direction_west=(msg[1] & 0x4) > 0;
  east_west_velocity=(short)(((msg[1] & 0x3) << 8 | msg[2] & 0xFF) - 1);
  if (east_west_velocity == -1)   velocity_info_available=false;
  if (msg_subtype == 2)   east_west_velocity<<=2;
  direction_south=(msg[3] & 0x80) > 0;
  north_south_velocity=(short)(((msg[3] & 0x7F) << 3 | msg[4] >>> 5 & 0x07) - 1);
  if (north_south_velocity == -1)   velocity_info_available=false;
  if (msg_subtype == 2)   north_south_velocity<<=2;
  vertical_source=(msg[4] & 0x10) > 0;
  vertical_rate_down=(msg[4] & 0x08) > 0;
  vertical_rate=(short)((((msg[4] & 0x07) << 6 | msg[5] >>> 2 & 0x3F) - 1) << 6);
  if (vertical_rate == -1)   vertical_rate_info_available=false;
  geo_minus_baro=msg[6] & 0x7F;
  if (geo_minus_baro == 0)   geo_minus_baro_available=false;
 else   geo_minus_baro=(geo_minus_baro - 1) * 25;
  if ((msg[6] & 0x80) > 0)   geo_minus_baro*=-1;
}"
40829,"/** 
 * @param reply Mode S reply which contains this comm-b identify reply
 * @throws BadFormatException if message is not comm-b identify reply or contains wrong values.
 */
public CommBIdentifyReply(ModeSReply reply) throws BadFormatException {
  super(reply);
  setType(subtype.COMM_B_IDENTIFY_REPLY);
  if (getDownlinkFormat() != 21) {
    throw new BadFormatException(""String_Node_Str"");
  }
  byte[] payload=getPayload();
  flight_status=getFirstField();
  downlink_request=(byte)((payload[0] >>> 3) & 0x1F);
  utility_msg=(byte)((payload[0] & 0x7) << 3 | (payload[1] >>> 5) & 0x7);
  identity=(short)((payload[1] << 8 | payload[2]) & 0x1FFF);
  message=new byte[7];
  for (int i=0; i < 7; i++)   message[i]=payload[i + 3];
}","/** 
 * @param reply Mode S reply which contains this comm-b identify reply
 * @throws BadFormatException if message is not comm-b identify reply or contains wrong values.
 */
public CommBIdentifyReply(ModeSReply reply) throws BadFormatException {
  super(reply);
  setType(subtype.COMM_B_IDENTIFY_REPLY);
  if (getDownlinkFormat() != 21) {
    throw new BadFormatException(""String_Node_Str"");
  }
  byte[] payload=getPayload();
  flight_status=getFirstField();
  downlink_request=(byte)((payload[0] >>> 3) & 0x1F);
  utility_msg=(byte)((payload[0] & 0x7) << 3 | (payload[1] >>> 5) & 0x7);
  identity=(short)((payload[1] << 8 | (payload[2] & 0xFF)) & 0x1FFF);
  message=new byte[7];
  for (int i=0; i < 7; i++)   message[i]=payload[i + 3];
}"
40830,"/** 
 * @param reply Mode S reply which contains this identify reply
 * @throws BadFormatException if message is not identify reply or contains wrong values.
 */
public IdentifyReply(ModeSReply reply) throws BadFormatException {
  super(reply);
  setType(subtype.IDENTIFY_REPLY);
  if (getDownlinkFormat() != 5) {
    throw new BadFormatException(""String_Node_Str"");
  }
  byte[] payload=getPayload();
  flight_status=getFirstField();
  downlink_request=(byte)((payload[0] >>> 3) & 0x1F);
  utility_msg=(byte)((payload[0] & 0x7) << 3 | (payload[1] >>> 5) & 0x7);
  identity=(short)((payload[1] << 8 | payload[2]) & 0x1FFF);
}","/** 
 * @param reply Mode S reply which contains this identify reply
 * @throws BadFormatException if message is not identify reply or contains wrong values.
 */
public IdentifyReply(ModeSReply reply) throws BadFormatException {
  super(reply);
  setType(subtype.IDENTIFY_REPLY);
  if (getDownlinkFormat() != 5) {
    throw new BadFormatException(""String_Node_Str"");
  }
  byte[] payload=getPayload();
  flight_status=getFirstField();
  downlink_request=(byte)((payload[0] >>> 3) & 0x1F);
  utility_msg=(byte)((payload[0] & 0x7) << 3 | (payload[1] >>> 5) & 0x7);
  identity=(short)((payload[1] << 8 | (payload[2] & 0xFF)) & 0x1FFF);
}"
40831,"/** 
 * @param squitter extended squitter containing the airspeed and heading msg
 * @throws BadFormatException if message has wrong format
 */
public AirspeedHeadingMsg(ExtendedSquitter squitter) throws BadFormatException {
  super(squitter);
  setType(subtype.ADSB_AIRSPEED);
  if (this.getFormatTypeCode() != 19) {
    throw new BadFormatException(""String_Node_Str"");
  }
  byte[] msg=this.getMessage();
  msg_subtype=(byte)(msg[0] & 0x7);
  if (msg_subtype != 3 && msg_subtype != 4) {
    throw new BadFormatException(""String_Node_Str"");
  }
  intent_change=(msg[1] & 0x80) > 0;
  ifr_capability=(msg[1] & 0x40) > 0;
  navigation_accuracy_category=(byte)((msg[1] >>> 3) & 0x7);
  vertical_rate_info_available=true;
  geo_minus_baro_available=true;
  heading_available=(msg[1] & 0x4) > 0;
  heading=((msg[1] & 0x3) << 8 | msg[2] & 0xFF) * 360 / 1024;
  true_airspeed=(msg[3] & 0x80) > 0;
  airspeed=(short)(((msg[3] & 0x7F) << 3 | msg[4] >>> 5 & 0x07) - 1);
  if (airspeed == -1)   airspeed_available=false;
  if (msg_subtype == 2)   airspeed<<=2;
  vertical_source=(msg[4] & 0x10) > 0;
  vertical_rate_down=(msg[4] & 0x08) > 0;
  vertical_rate=(short)((((msg[4] & 0x07) << 6 | msg[5] >>> 2 & 0x3F) - 1) << 6);
  if (vertical_rate == -1)   vertical_rate_info_available=false;
  geo_minus_baro=(short)(((msg[6] & 0x7F) - 1) * 25);
  if (geo_minus_baro == -1)   geo_minus_baro_available=false;
  if ((msg[6] & 0x80) > 0)   geo_minus_baro*=-1;
}","/** 
 * @param squitter extended squitter containing the airspeed and heading msg
 * @throws BadFormatException if message has wrong format
 */
public AirspeedHeadingMsg(ExtendedSquitter squitter) throws BadFormatException {
  super(squitter);
  setType(subtype.ADSB_AIRSPEED);
  if (this.getFormatTypeCode() != 19) {
    throw new BadFormatException(""String_Node_Str"");
  }
  byte[] msg=this.getMessage();
  msg_subtype=(byte)(msg[0] & 0x7);
  if (msg_subtype != 3 && msg_subtype != 4) {
    throw new BadFormatException(""String_Node_Str"");
  }
  intent_change=(msg[1] & 0x80) > 0;
  ifr_capability=(msg[1] & 0x40) > 0;
  navigation_accuracy_category=(byte)((msg[1] >>> 3) & 0x7);
  vertical_rate_info_available=true;
  geo_minus_baro_available=true;
  heading_available=(msg[1] & 0x4) > 0;
  heading=((msg[1] & 0x3) << 8 | msg[2] & 0xFF) * 360 / 1024;
  true_airspeed=(msg[3] & 0x80) > 0;
  airspeed=(short)(((msg[3] & 0x7F) << 3 | msg[4] >>> 5 & 0x07) - 1);
  if (airspeed == -1)   airspeed_available=false;
  if (msg_subtype == 4)   airspeed<<=2;
  vertical_source=(msg[4] & 0x10) > 0;
  vertical_rate_down=(msg[4] & 0x08) > 0;
  vertical_rate=(short)((((msg[4] & 0x07) << 6 | msg[5] >>> 2 & 0x3F) - 1) << 6);
  if (vertical_rate == -1)   vertical_rate_info_available=false;
  geo_minus_baro=(short)(((msg[6] & 0x7F) - 1) * 25);
  if (geo_minus_baro == -1)   geo_minus_baro_available=false;
  if ((msg[6] & 0x80) > 0)   geo_minus_baro*=-1;
}"
40832,"/** 
 * @param squitter extended squitter which contains this message
 * @throws BadFormatException  if message has the wrong typecode
 * @throws UnspecifiedFormatError if message has the wrong subtype
 */
public OperationalStatusMsg(ExtendedSquitter squitter) throws BadFormatException, UnspecifiedFormatError {
  super(squitter);
  setType(subtype.ADSB_STATUS);
  if (getFormatTypeCode() != 31) {
    throw new BadFormatException(""String_Node_Str"");
  }
  byte[] msg=this.getMessage();
  byte subtype_code=(byte)(msg[0] & 0x7);
  if (subtype_code > 1)   throw new UnspecifiedFormatError(""String_Node_Str"" + subtype_code + ""String_Node_Str"");
  if (subtype_code == 0) {
    capability_class_code=(msg[1] << 8) | msg[2];
  }
 else {
    capability_class_code=(msg[1] << 4) | (msg[2] & 0xF0);
    airplane_len_width=(byte)(msg[2] & 0xF);
  }
  operational_mode_code=(msg[3] << 8) | msg[4];
  version=(byte)(msg[5] >>> 5);
  nic_suppl=((msg[5] & 0x10) != 0);
  nac_pos=(byte)(msg[5] & 0xF);
  geometric_vertical_accuracy=(byte)(msg[6] >>> 6);
  sil=(byte)((msg[6] >>> 4) & 0x3);
  nic_trk_hdg=((msg[6] & 0x8) != 0);
  hrd=((msg[6] & 0x4) != 0);
}","/** 
 * @param squitter extended squitter which contains this message
 * @throws BadFormatException  if message has the wrong typecode
 * @throws UnspecifiedFormatError if message has the wrong subtype
 */
public OperationalStatusMsg(ExtendedSquitter squitter) throws BadFormatException, UnspecifiedFormatError {
  super(squitter);
  setType(subtype.ADSB_STATUS);
  if (getFormatTypeCode() != 31) {
    throw new BadFormatException(""String_Node_Str"");
  }
  byte[] msg=this.getMessage();
  byte subtype_code=(byte)(msg[0] & 0x7);
  if (subtype_code > 1)   throw new UnspecifiedFormatError(""String_Node_Str"" + subtype_code + ""String_Node_Str"");
  if (subtype_code == 0) {
    capability_class_code=(msg[1] << 8) | msg[2];
  }
 else {
    capability_class_code=(msg[1] << 4) | (msg[2] & 0xF0) >>> 4;
    airplane_len_width=(byte)(msg[2] & 0xF);
  }
  operational_mode_code=(msg[3] << 8) | msg[4];
  version=(byte)(msg[5] >>> 5);
  nic_suppl=((msg[5] & 0x10) != 0);
  nac_pos=(byte)(msg[5] & 0xF);
  geometric_vertical_accuracy=(byte)(msg[6] >>> 6);
  sil=(byte)((msg[6] >>> 4) & 0x3);
  nic_trk_hdg=((msg[6] & 0x8) != 0);
  hrd=((msg[6] & 0x4) != 0);
}"
40833,"/** 
 * @return horizontal containment radius limit in meters. A return value of -1 means ""unkown"".Set NIC supplement A from Operational Status Message for better precision. Otherwise, we'll be pessimistic. Note: For ADS-B versions &lt; 2, this is inaccurate for NIC class 6, since there was no NIC supplement B in earlier versions.
 */
public double getHorizontalContainmentRadiusLimit(){
switch (getFormatTypeCode()) {
case 0:
case 18:
case 22:
    return -1;
case 9:
case 20:
  return 7.5;
case 10:
case 21:
return 25;
case 11:
if (nic_suppl_a) return 75;
 else return 185.2;
case 12:
return 370.4;
case 13:
if (!nic_suppl_b) return 926;
 else if (nic_suppl_a) return 1111.2;
 else return 555.6;
case 14:
return 1852;
case 15:
return 3704;
case 16:
if (nic_suppl_a) return 7408;
 else return 14816;
case 17:
return 37040;
default :
return 0;
}
}","/** 
 * @return horizontal containment radius limit in meters. A return value of -1 means ""unkown"".Set NIC supplement A from Operational Status Message for better precision. Otherwise, we'll be pessimistic. Note: For ADS-B versions &lt; 2, this is inaccurate for NIC class 6, since there was no NIC supplement B in earlier versions.
 */
public double getHorizontalContainmentRadiusLimit(){
switch (getFormatTypeCode()) {
case 0:
case 18:
case 22:
    return -1;
case 9:
case 20:
  return 7.5;
case 10:
case 21:
return 25;
case 11:
return nic_suppl_b ? 75 : 185.2;
case 12:
return 370.4;
case 13:
if (!nic_suppl_b) return 926;
 else return nic_suppl_a ? 1111.2 : 555.6;
case 14:
return 1852;
case 15:
return 3704;
case 16:
return nic_suppl_b ? 7408 : 14816;
case 17:
return 37040;
default :
return -1;
}
}"
40834,"/** 
 * @return Navigation integrity category. A NIC of 0 means ""unkown"".If NIC supplement is set before, the return value is exactly according to DO-260B. Otherwise it might be a little worse than it actually is.
 */
public byte getNavigationIntegrityCategory(){
switch (getFormatTypeCode()) {
case 0:
case 18:
case 22:
    return 0;
case 9:
case 20:
  return 11;
case 10:
case 21:
return 10;
case 11:
if (nic_suppl_a) return 9;
 else return 8;
case 12:
return 7;
case 13:
return 6;
case 14:
return 5;
case 15:
return 4;
case 16:
if (nic_suppl_a) return 3;
 else return 2;
case 17:
return 1;
default :
return 0;
}
}","/** 
 * @return Navigation integrity category. A NIC of 0 means ""unkown"".If NIC supplement is set before, the return value is exactly according to DO-260B. Otherwise it might be a little worse than it actually is.
 */
public byte getNavigationIntegrityCategory(){
switch (getFormatTypeCode()) {
case 0:
case 18:
case 22:
    return 0;
case 9:
case 20:
  return 11;
case 10:
case 21:
return 10;
case 11:
return (byte)(nic_suppl_b ? 9 : 8);
case 12:
return 7;
case 13:
return 6;
case 14:
return 5;
case 15:
return 4;
case 16:
return (byte)(nic_suppl_b ? 3 : 2);
case 17:
return 1;
default :
return 0;
}
}"
40835,"public void decodeMsg(double timestamp,String raw) throws Exception {
  ModeSReply msg;
  try {
    msg=Decoder.genericDecoder(raw);
  }
 catch (  BadFormatException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    return;
  }
catch (  UnspecifiedFormatError e) {
    System.out.println(""String_Node_Str"");
    return;
  }
  String icao24=tools.toHexString(msg.getIcao24());
  if (tools.isZero(msg.getParity()) || msg.checkParity()) {
    List<String> to_remove=new ArrayList<String>();
    for (    String key : decs.keySet())     if (decs.get(key).getLastUsedTime() < timestamp - 3600)     to_remove.add(key);
    for (    String key : to_remove)     decs.remove(key);
switch (msg.getType()) {
case ADSB_AIRBORN_POSITION:
      AirbornePositionMsg airpos=(AirbornePositionMsg)msg;
    System.out.print(""String_Node_Str"" + icao24 + ""String_Node_Str"");
  if (decs.containsKey(icao24)) {
    dec=decs.get(icao24);
    airpos.setNICSupplementA(dec.getNICSupplementA());
    Position current=dec.decodePosition(timestamp,airpos);
    if (current == null)     System.out.println(""String_Node_Str"");
 else     System.out.println(""String_Node_Str"" + current.getLatitude() + ""String_Node_Str""+ current.getLongitude()+ ""String_Node_Str"");
  }
 else {
    dec=new PositionDecoder();
    dec.decodePosition(timestamp,airpos);
    decs.put(icao24,dec);
    System.out.println(""String_Node_Str"");
  }
System.out.println(""String_Node_Str"" + airpos.getHorizontalContainmentRadiusLimit() + ""String_Node_Str"");
System.out.println(""String_Node_Str"" + (airpos.hasAltitude() ? airpos.getAltitude() : ""String_Node_Str"") + ""String_Node_Str"");
break;
case ADSB_SURFACE_POSITION:
SurfacePositionMsg surfpos=(SurfacePositionMsg)msg;
System.out.print(""String_Node_Str"" + icao24 + ""String_Node_Str"");
if (decs.containsKey(icao24)) {
dec=decs.get(icao24);
Position current=dec.decodePosition(timestamp,surfpos);
if (current == null) System.out.println(""String_Node_Str"");
 else System.out.println(""String_Node_Str"" + current.getLatitude() + ""String_Node_Str""+ current.getLongitude()+ ""String_Node_Str"");
}
 else {
dec=new PositionDecoder();
dec.decodePosition(timestamp,surfpos);
decs.put(icao24,dec);
System.out.println(""String_Node_Str"");
}
System.out.println(""String_Node_Str"" + surfpos.getHorizontalContainmentRadiusLimit() + ""String_Node_Str"");
if (surfpos.hasValidHeading()) System.out.println(""String_Node_Str"" + surfpos.getHeading() + ""String_Node_Str"");
System.out.println(""String_Node_Str"");
break;
case ADSB_EMERGENCY:
EmergencyOrPriorityStatusMsg status=(EmergencyOrPriorityStatusMsg)msg;
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ status.getEmergencyStateText());
System.out.println(""String_Node_Str"" + status.getModeACode()[0] + status.getModeACode()[1]+ status.getModeACode()[2]+ status.getModeACode()[3]);
break;
case ADSB_AIRSPEED:
AirspeedHeadingMsg airspeed=(AirspeedHeadingMsg)msg;
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ (airspeed.hasAirspeedInfo() ? airspeed.getAirspeed() + ""String_Node_Str"" : ""String_Node_Str""));
if (airspeed.hasHeadingInfo()) System.out.println(""String_Node_Str"" + (airspeed.hasHeadingInfo() ? airspeed.getHeading() + ""String_Node_Str"" : ""String_Node_Str""));
if (airspeed.hasVerticalRateInfo()) System.out.println(""String_Node_Str"" + (airspeed.hasVerticalRateInfo() ? airspeed.getVerticalRate() + ""String_Node_Str"" : ""String_Node_Str""));
break;
case ADSB_IDENTIFICATION:
IdentificationMsg ident=(IdentificationMsg)msg;
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ new String(ident.getIdentity()));
System.out.println(""String_Node_Str"" + ident.getCategoryDescription());
break;
case ADSB_STATUS:
OperationalStatusMsg opstat=(OperationalStatusMsg)msg;
PositionDecoder dec;
if (decs.containsKey(icao24)) dec=decs.get(icao24);
 else {
dec=new PositionDecoder();
decs.put(icao24,dec);
}
dec.setNICSupplementA(opstat.getNICSupplementA());
if (opstat.getSubtypeCode() == 1) dec.setNICSupplementC(opstat.getNICSupplementC());
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ opstat.getVersion());
System.out.println(""String_Node_Str"" + opstat.has1090ESIn());
break;
case ADSB_TCAS:
TCASResolutionAdvisoryMsg tcas=(TCASResolutionAdvisoryMsg)msg;
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ tcas.hasRATerminated());
System.out.println(""String_Node_Str"" + tcas.getThreatType());
if (tcas.getThreatType() == 1) System.out.println(""String_Node_Str"" + String.format(""String_Node_Str"",tcas.getThreatIdentity()));
break;
case ADSB_VELOCITY:
VelocityOverGroundMsg veloc=(VelocityOverGroundMsg)msg;
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ (veloc.hasVelocityInfo() ? veloc.getVelocity() : ""String_Node_Str"")+ ""String_Node_Str"");
System.out.println(""String_Node_Str"" + (veloc.hasVelocityInfo() ? veloc.getHeading() : ""String_Node_Str"") + ""String_Node_Str"");
System.out.println(""String_Node_Str"" + (veloc.hasVerticalRateInfo() ? veloc.getVerticalRate() : ""String_Node_Str"") + ""String_Node_Str"");
break;
case EXTENDED_SQUITTER:
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ ((ExtendedSquitter)msg).getFormatTypeCode()+ ""String_Node_Str"");
break;
default :
}
}
 else if (msg.getDownlinkFormat() != 17) {
switch (msg.getType()) {
case MODES_REPLY:
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ msg.getDownlinkFormat());
break;
case SHORT_ACAS:
ShortACAS acas=(ShortACAS)msg;
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ acas.getAltitude()+ ""String_Node_Str""+ (acas.hasOperatingACAS() ? ""String_Node_Str"" : ""String_Node_Str""));
System.out.println(""String_Node_Str"" + (acas.isAirborne() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ acas.getSensitivityLevel());
break;
case ALTITUDE_REPLY:
AltitudeReply alti=(AltitudeReply)msg;
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ alti.getAltitude()+ ""String_Node_Str"");
break;
case IDENTIFY_REPLY:
IdentifyReply identify=(IdentifyReply)msg;
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ identify.getIdentity());
break;
case ALL_CALL_REPLY:
AllCallReply allcall=(AllCallReply)msg;
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ tools.toHexString(allcall.getInterrogatorID())+ ""String_Node_Str""+ (allcall.hasValidInterrogatorID() ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
break;
case LONG_ACAS:
LongACAS long_acas=(LongACAS)msg;
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ long_acas.getAltitude()+ ""String_Node_Str""+ (long_acas.hasOperatingACAS() ? ""String_Node_Str"" : ""String_Node_Str""));
System.out.println(""String_Node_Str"" + (long_acas.isAirborne() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ long_acas.getSensitivityLevel());
System.out.println(""String_Node_Str"" + (long_acas.hasValidRAC() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ long_acas.getResolutionAdvisoryComplement()+ ""String_Node_Str""+ long_acas.hasMultipleThreats()+ ""String_Node_Str"");
break;
case MILITARY_EXTENDED_SQUITTER:
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str"");
break;
case COMM_B_ALTITUDE_REPLY:
CommBAltitudeReply commBaltitude=(CommBAltitudeReply)msg;
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ commBaltitude.getAltitude()+ ""String_Node_Str"");
break;
case COMM_B_IDENTIFY_REPLY:
CommBIdentifyReply commBidentify=(CommBIdentifyReply)msg;
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ commBidentify.getIdentity());
break;
case COMM_D_ELM:
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str"");
break;
default :
}
}
 else {
System.out.println(""String_Node_Str"");
}
}","public void decodeMsg(double timestamp,String raw,String icao) throws Exception {
  ModeSReply msg;
  try {
    msg=Decoder.genericDecoder(raw);
  }
 catch (  BadFormatException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    return;
  }
catch (  UnspecifiedFormatError e) {
    System.out.println(""String_Node_Str"");
    return;
  }
  String icao24=tools.toHexString(msg.getIcao24());
  if (icao != null && !icao.toLowerCase().equals(icao24))   return;
  if (tools.isZero(msg.getParity()) || msg.checkParity()) {
    List<String> to_remove=new ArrayList<String>();
    for (    String key : decs.keySet())     if (decs.get(key).getLastUsedTime() < timestamp - 3600)     to_remove.add(key);
    for (    String key : to_remove)     decs.remove(key);
switch (msg.getType()) {
case ADSB_AIRBORN_POSITION:
      AirbornePositionMsg airpos=(AirbornePositionMsg)msg;
    System.out.print(""String_Node_Str"" + icao24 + ""String_Node_Str"");
  if (decs.containsKey(icao24)) {
    dec=decs.get(icao24);
    airpos.setNICSupplementA(dec.getNICSupplementA());
    Position current=dec.decodePosition(timestamp,airpos);
    if (current == null)     System.out.println(""String_Node_Str"");
 else     System.out.println(""String_Node_Str"" + current.getLatitude() + ""String_Node_Str""+ current.getLongitude()+ ""String_Node_Str"");
  }
 else {
    dec=new PositionDecoder();
    dec.decodePosition(timestamp,airpos);
    decs.put(icao24,dec);
    System.out.println(""String_Node_Str"");
  }
System.out.println(""String_Node_Str"" + airpos.getHorizontalContainmentRadiusLimit() + ""String_Node_Str"");
System.out.println(""String_Node_Str"" + (airpos.hasAltitude() ? airpos.getAltitude() : ""String_Node_Str"") + ""String_Node_Str"");
break;
case ADSB_SURFACE_POSITION:
SurfacePositionMsg surfpos=(SurfacePositionMsg)msg;
System.out.print(""String_Node_Str"" + icao24 + ""String_Node_Str"");
if (decs.containsKey(icao24)) {
dec=decs.get(icao24);
Position current=dec.decodePosition(timestamp,surfpos);
if (current == null) System.out.println(""String_Node_Str"");
 else System.out.println(""String_Node_Str"" + current.getLatitude() + ""String_Node_Str""+ current.getLongitude()+ ""String_Node_Str"");
}
 else {
dec=new PositionDecoder();
dec.decodePosition(timestamp,surfpos);
decs.put(icao24,dec);
System.out.println(""String_Node_Str"");
}
System.out.println(""String_Node_Str"" + surfpos.getHorizontalContainmentRadiusLimit() + ""String_Node_Str"");
if (surfpos.hasValidHeading()) System.out.println(""String_Node_Str"" + surfpos.getHeading() + ""String_Node_Str"");
System.out.println(""String_Node_Str"");
break;
case ADSB_EMERGENCY:
EmergencyOrPriorityStatusMsg status=(EmergencyOrPriorityStatusMsg)msg;
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ status.getEmergencyStateText());
System.out.println(""String_Node_Str"" + status.getModeACode()[0] + status.getModeACode()[1]+ status.getModeACode()[2]+ status.getModeACode()[3]);
break;
case ADSB_AIRSPEED:
AirspeedHeadingMsg airspeed=(AirspeedHeadingMsg)msg;
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ (airspeed.hasAirspeedInfo() ? airspeed.getAirspeed() + ""String_Node_Str"" : ""String_Node_Str""));
if (airspeed.hasHeadingInfo()) System.out.println(""String_Node_Str"" + (airspeed.hasHeadingInfo() ? airspeed.getHeading() + ""String_Node_Str"" : ""String_Node_Str""));
if (airspeed.hasVerticalRateInfo()) System.out.println(""String_Node_Str"" + (airspeed.hasVerticalRateInfo() ? airspeed.getVerticalRate() + ""String_Node_Str"" : ""String_Node_Str""));
break;
case ADSB_IDENTIFICATION:
IdentificationMsg ident=(IdentificationMsg)msg;
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ new String(ident.getIdentity()));
System.out.println(""String_Node_Str"" + ident.getCategoryDescription());
break;
case ADSB_STATUS:
OperationalStatusMsg opstat=(OperationalStatusMsg)msg;
PositionDecoder dec;
if (decs.containsKey(icao24)) dec=decs.get(icao24);
 else {
dec=new PositionDecoder();
decs.put(icao24,dec);
}
dec.setNICSupplementA(opstat.getNICSupplementA());
if (opstat.getSubtypeCode() == 1) dec.setNICSupplementC(opstat.getNICSupplementC());
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ opstat.getVersion());
System.out.println(""String_Node_Str"" + opstat.has1090ESIn());
break;
case ADSB_TCAS:
TCASResolutionAdvisoryMsg tcas=(TCASResolutionAdvisoryMsg)msg;
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ tcas.hasRATerminated());
System.out.println(""String_Node_Str"" + tcas.getThreatType());
if (tcas.getThreatType() == 1) System.out.println(""String_Node_Str"" + String.format(""String_Node_Str"",tcas.getThreatIdentity()));
break;
case ADSB_VELOCITY:
VelocityOverGroundMsg veloc=(VelocityOverGroundMsg)msg;
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ (veloc.hasVelocityInfo() ? veloc.getVelocity() : ""String_Node_Str"")+ ""String_Node_Str"");
System.out.println(""String_Node_Str"" + (veloc.hasVelocityInfo() ? veloc.getHeading() : ""String_Node_Str"") + ""String_Node_Str"");
System.out.println(""String_Node_Str"" + (veloc.hasVerticalRateInfo() ? veloc.getVerticalRate() : ""String_Node_Str"") + ""String_Node_Str"");
break;
case EXTENDED_SQUITTER:
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ ((ExtendedSquitter)msg).getFormatTypeCode()+ ""String_Node_Str"");
break;
default :
}
}
 else if (msg.getDownlinkFormat() != 17) {
switch (msg.getType()) {
case MODES_REPLY:
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ msg.getDownlinkFormat());
break;
case SHORT_ACAS:
ShortACAS acas=(ShortACAS)msg;
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ acas.getAltitude()+ ""String_Node_Str""+ (acas.hasOperatingACAS() ? ""String_Node_Str"" : ""String_Node_Str""));
System.out.println(""String_Node_Str"" + (acas.isAirborne() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ acas.getSensitivityLevel());
break;
case ALTITUDE_REPLY:
AltitudeReply alti=(AltitudeReply)msg;
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ alti.getAltitude()+ ""String_Node_Str"");
break;
case IDENTIFY_REPLY:
IdentifyReply identify=(IdentifyReply)msg;
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ identify.getIdentity());
break;
case ALL_CALL_REPLY:
AllCallReply allcall=(AllCallReply)msg;
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ tools.toHexString(allcall.getInterrogatorID())+ ""String_Node_Str""+ (allcall.hasValidInterrogatorID() ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
break;
case LONG_ACAS:
LongACAS long_acas=(LongACAS)msg;
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ long_acas.getAltitude()+ ""String_Node_Str""+ (long_acas.hasOperatingACAS() ? ""String_Node_Str"" : ""String_Node_Str""));
System.out.println(""String_Node_Str"" + (long_acas.isAirborne() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ long_acas.getSensitivityLevel());
System.out.println(""String_Node_Str"" + (long_acas.hasValidRAC() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ long_acas.getResolutionAdvisoryComplement()+ ""String_Node_Str""+ long_acas.hasMultipleThreats()+ ""String_Node_Str"");
break;
case MILITARY_EXTENDED_SQUITTER:
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str"");
break;
case COMM_B_ALTITUDE_REPLY:
CommBAltitudeReply commBaltitude=(CommBAltitudeReply)msg;
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ commBaltitude.getAltitude()+ ""String_Node_Str"");
break;
case COMM_B_IDENTIFY_REPLY:
CommBIdentifyReply commBidentify=(CommBIdentifyReply)msg;
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str""+ commBidentify.getIdentity());
break;
case COMM_D_ELM:
System.out.println(""String_Node_Str"" + icao24 + ""String_Node_Str"");
break;
default :
}
}
 else {
System.out.println(""String_Node_Str"");
}
}"
40836,"public static void main(String[] args) throws Exception {
  Scanner sc=new Scanner(System.in,""String_Node_Str"");
  ExampleDecoder dec=new ExampleDecoder();
  while (sc.hasNext()) {
    String[] values=sc.nextLine().split(""String_Node_Str"");
    dec.decodeMsg(Double.parseDouble(values[0]),values[1]);
  }
  sc.close();
}","public static void main(String[] args) throws Exception {
  String icao=null;
  if (args.length > 0) {
    icao=args[0];
    System.err.println(""String_Node_Str"" + icao + ""String_Node_Str"");
  }
  Scanner sc=new Scanner(System.in,""String_Node_Str"");
  ExampleDecoder dec=new ExampleDecoder();
  while (sc.hasNext()) {
    String[] values=sc.nextLine().split(""String_Node_Str"");
    dec.decodeMsg(Double.parseDouble(values[0]),values[1],icao);
  }
  sc.close();
}"
40837,"public static void main(String[] args) throws Exception {
  if (args.length < 2) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  String filename=args[0];
  int numRead=Integer.parseInt(args[1]);
  File f=new File(filename);
  DatumReader<ModeSEncodedMessage> datumReader=new SpecificDatumReader<ModeSEncodedMessage>(ModeSEncodedMessage.class);
  DataFileReader<ModeSEncodedMessage> fileReader=new DataFileReader<ModeSEncodedMessage>(f,datumReader);
  ExampleDecoder decoder=new ExampleDecoder();
  ModeSEncodedMessage record=new ModeSEncodedMessage();
  int minTime=Integer.MAX_VALUE;
  int maxTime=0;
  long msgCount=0;
  Set<Integer> serials=new HashSet<Integer>();
  while (fileReader.hasNext()) {
    record=fileReader.next(record);
    msgCount++;
    serials.add(record.getSensorSerialNumber());
    maxTime=Math.max(record.getTimeAtServer().intValue(),maxTime);
    minTime=Math.min(record.getTimeAtServer().intValue(),minTime);
    if (--numRead >= 0) {
      System.out.println(""String_Node_Str"" + msgCount + ""String_Node_Str"");
      for (      Field field : record.getSchema().getFields()) {
        if (record.get(field.name()) != null)         System.out.printf(""String_Node_Str"",field.name() + ""String_Node_Str"",record.get(field.name()));
      }
      System.out.println(""String_Node_Str"" + msgCount + ""String_Node_Str"");
      decoder.decodeMsg(record.getTimeAtServer(),record.getRawMessage().toString());
    }
  }
  fileReader.close();
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.printf(""String_Node_Str"",""String_Node_Str"",new Date(((long)minTime) * 1000l).toString());
  System.out.printf(""String_Node_Str"",""String_Node_Str"",new Date(((long)maxTime) * 1000l).toString());
  System.out.printf(""String_Node_Str"",""String_Node_Str"",msgCount);
  System.out.printf(""String_Node_Str"",""String_Node_Str"",serials.size());
}","public static void main(String[] args) throws Exception {
  if (args.length < 2) {
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
  String filename=args[0];
  int numRead=Integer.parseInt(args[1]);
  File f=new File(filename);
  DatumReader<ModeSEncodedMessage> datumReader=new SpecificDatumReader<ModeSEncodedMessage>(ModeSEncodedMessage.class);
  DataFileReader<ModeSEncodedMessage> fileReader=new DataFileReader<ModeSEncodedMessage>(f,datumReader);
  ExampleDecoder decoder=new ExampleDecoder();
  ModeSEncodedMessage record=new ModeSEncodedMessage();
  int minTime=Integer.MAX_VALUE;
  int maxTime=0;
  long msgCount=0;
  Set<Integer> serials=new HashSet<Integer>();
  while (fileReader.hasNext()) {
    record=fileReader.next(record);
    msgCount++;
    serials.add(record.getSensorSerialNumber());
    maxTime=Math.max(record.getTimeAtServer().intValue(),maxTime);
    minTime=Math.min(record.getTimeAtServer().intValue(),minTime);
    if (--numRead >= 0) {
      System.out.println(""String_Node_Str"" + msgCount + ""String_Node_Str"");
      for (      Field field : record.getSchema().getFields()) {
        if (record.get(field.name()) != null)         System.out.printf(""String_Node_Str"",field.name() + ""String_Node_Str"",record.get(field.name()));
      }
      System.out.println(""String_Node_Str"" + msgCount + ""String_Node_Str"");
      decoder.decodeMsg(record.getTimeAtServer(),record.getRawMessage().toString(),null);
    }
  }
  fileReader.close();
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.printf(""String_Node_Str"",""String_Node_Str"",new Date(((long)minTime) * 1000l).toString());
  System.out.printf(""String_Node_Str"",""String_Node_Str"",new Date(((long)maxTime) * 1000l).toString());
  System.out.printf(""String_Node_Str"",""String_Node_Str"",msgCount);
  System.out.printf(""String_Node_Str"",""String_Node_Str"",serials.size());
}"
40838,"/** 
 * @return the decoded altitude in meters
 */
public double getAltitude(){
  boolean Mbit=(altitude_code & 0x40) != 0;
  boolean Qbit=(altitude_code & 0x10) != 0;
  int N;
  if (!Mbit && Qbit) {
    N=(altitude_code & 0x0F) | ((altitude_code & 0x20) >>> 1) | ((altitude_code & 0x1F80) >>> 2);
    return (25 * N - 1000) * 0.3048;
  }
 else {
    int C1=(0x1000 & altitude_code) >>> 12;
    int A1=(0x0800 & altitude_code) >>> 11;
    int C2=(0x0400 & altitude_code) >>> 10;
    int A2=(0x0200 & altitude_code) >>> 9;
    int C4=(0x0100 & altitude_code) >>> 8;
    int A4=(0x0080 & altitude_code) >>> 7;
    int B1=(0x0020 & altitude_code) >>> 5;
    int B2=(0x0008 & altitude_code) >>> 3;
    int D2=(0x0004 & altitude_code) >>> 2;
    int B4=(0x0002 & altitude_code) >>> 1;
    int D4=(0x0001 & altitude_code);
    int N500=grayToBin(D2 << 7 | D4 << 6 | A1 << 5 | A2 << 4 | A4 << 3 | B1 << 2 | B2 << 1 | B4,8);
    int N100=grayToBin(C1 << 2 | C2 << 1 | C4,3) - 1;
    if (N100 == 6)     N100=4;
    if (N500 % 2 != 0)     N100=4 - N100;
    return (-1200 + N500 * 500 + N100 * 100) * 0.3048;
  }
}","/** 
 * @return the decoded altitude in meters
 */
public Double getAltitude(){
  if (altitude_code == 0)   return null;
  boolean Mbit=(altitude_code & 0x40) != 0;
  if (!Mbit) {
    boolean Qbit=(altitude_code & 0x10) != 0;
    if (Qbit) {
      int N=(altitude_code & 0x0F) | ((altitude_code & 0x20) >>> 1) | ((altitude_code & 0x1F80) >>> 2);
      return (25 * N - 1000) * 0.3048;
    }
 else {
      int C1=(0x1000 & altitude_code) >>> 12;
      int A1=(0x0800 & altitude_code) >>> 11;
      int C2=(0x0400 & altitude_code) >>> 10;
      int A2=(0x0200 & altitude_code) >>> 9;
      int C4=(0x0100 & altitude_code) >>> 8;
      int A4=(0x0080 & altitude_code) >>> 7;
      int B1=(0x0020 & altitude_code) >>> 5;
      int B2=(0x0008 & altitude_code) >>> 3;
      int D2=(0x0004 & altitude_code) >>> 2;
      int B4=(0x0002 & altitude_code) >>> 1;
      int D4=(0x0001 & altitude_code);
      int N500=grayToBin(D2 << 7 | D4 << 6 | A1 << 5 | A2 << 4 | A4 << 3 | B1 << 2 | B2 << 1 | B4,8);
      int N100=grayToBin(C1 << 2 | C2 << 1 | C4,3) - 1;
      if (N100 == 6)       N100=4;
      if (N500 % 2 != 0)       N100=4 - N100;
      return (-1200 + N500 * 500 + N100 * 100) * 0.3048;
    }
  }
 else   return null;
}"
40839,"/** 
 * @param reply Mode S reply containing this altitude reply
 * @throws BadFormatException if message is not altitude reply or contains wrong values.
 */
public AltitudeReply(ModeSReply reply) throws BadFormatException {
  super(reply);
  setType(subtype.ALTITUDE_REPLY);
  if (getDownlinkFormat() != 4) {
    throw new BadFormatException(""String_Node_Str"");
  }
  byte[] payload=getPayload();
  flight_status=getFirstField();
  downlink_request=(byte)((payload[0] >>> 3) & 0x1F);
  utility_msg=(byte)((payload[0] & 0x7) << 3 | (payload[1] >>> 5) & 0x7);
  altitude_code=(short)((payload[1] << 8 | payload[2]) & 0x1FFF);
}","/** 
 * @param reply Mode S reply containing this altitude reply
 * @throws BadFormatException if message is not altitude reply or contains wrong values.
 */
public AltitudeReply(ModeSReply reply) throws BadFormatException {
  super(reply);
  setType(subtype.ALTITUDE_REPLY);
  if (getDownlinkFormat() != 4) {
    throw new BadFormatException(""String_Node_Str"");
  }
  byte[] payload=getPayload();
  flight_status=getFirstField();
  downlink_request=(byte)((payload[0] >>> 3) & 0x1F);
  utility_msg=(byte)((payload[0] & 0x7) << 3 | (payload[1] >>> 5) & 0x7);
  altitude_code=(short)((payload[1] << 8 | payload[2] & 0xFF) & 0x1FFF);
}"
40840,"/** 
 * @return the decoded altitude in meters
 */
public double getAltitude(){
  boolean Mbit=(altitude_code & 0x40) != 0;
  boolean Qbit=(altitude_code & 0x10) != 0;
  int N;
  if (!Mbit && Qbit) {
    N=(altitude_code & 0xF) | ((altitude_code & 0x20) >>> 1) | ((altitude_code & 0x1F80) >>> 2);
    return (25 * N - 1000) * 0.3048;
  }
 else {
    int C1=(0x1000 & altitude_code) >>> 12;
    int A1=(0x800 & altitude_code) >>> 11;
    int C2=(0x400 & altitude_code) >>> 10;
    int A2=(0x200 & altitude_code) >>> 9;
    int C4=(0x100 & altitude_code) >>> 8;
    int A4=(0x080 & altitude_code) >>> 7;
    int B1=(0x020 & altitude_code) >>> 5;
    int B2=(0x008 & altitude_code) >>> 3;
    int D2=(0x004 & altitude_code) >>> 2;
    int B4=(0x002 & altitude_code) >>> 1;
    int D4=(0x001 & altitude_code);
    int N500=grayToBin(D2 << 7 | D4 << 6 | A1 << 5 | A2 << 4 | A4 << 3 | B1 << 2 | B2 << 1 | B4,8);
    int N100=grayToBin(C1 << 2 | C2 << 1 | C4,3) - 1;
    if (N100 == 6)     N100=4;
    if (N500 % 2 != 0)     N100=4 - N100;
    return (-1200 + N500 * 500 + N100 * 100) * 0.3048;
  }
}","/** 
 * @return the decoded altitude in meters
 */
public Double getAltitude(){
  if (altitude_code == 0)   return null;
  boolean Mbit=(altitude_code & 0x40) != 0;
  if (!Mbit) {
    boolean Qbit=(altitude_code & 0x10) != 0;
    if (Qbit) {
      int N=(altitude_code & 0x0F) | ((altitude_code & 0x20) >>> 1) | ((altitude_code & 0x1F80) >>> 2);
      return (25 * N - 1000) * 0.3048;
    }
 else {
      int C1=(0x1000 & altitude_code) >>> 12;
      int A1=(0x0800 & altitude_code) >>> 11;
      int C2=(0x0400 & altitude_code) >>> 10;
      int A2=(0x0200 & altitude_code) >>> 9;
      int C4=(0x0100 & altitude_code) >>> 8;
      int A4=(0x0080 & altitude_code) >>> 7;
      int B1=(0x0020 & altitude_code) >>> 5;
      int B2=(0x0008 & altitude_code) >>> 3;
      int D2=(0x0004 & altitude_code) >>> 2;
      int B4=(0x0002 & altitude_code) >>> 1;
      int D4=(0x0001 & altitude_code);
      int N500=grayToBin(D2 << 7 | D4 << 6 | A1 << 5 | A2 << 4 | A4 << 3 | B1 << 2 | B2 << 1 | B4,8);
      int N100=grayToBin(C1 << 2 | C2 << 1 | C4,3) - 1;
      if (N100 == 6)       N100=4;
      if (N500 % 2 != 0)       N100=4 - N100;
      return (-1200 + N500 * 500 + N100 * 100) * 0.3048;
    }
  }
 else   return null;
}"
40841,"/** 
 * @param reply Mode S reply which contains this comm-b altitude reply
 * @throws BadFormatException if message is not comm-b altitude reply or contains wrong values.
 */
public CommBAltitudeReply(ModeSReply reply) throws BadFormatException {
  super(reply);
  setType(subtype.COMM_B_ALTITUDE_REPLY);
  if (getDownlinkFormat() != 20) {
    throw new BadFormatException(""String_Node_Str"");
  }
  byte[] payload=getPayload();
  flight_status=getFirstField();
  downlink_request=(byte)((payload[0] >>> 3) & 0x1F);
  utility_msg=(byte)((payload[0] & 0x7) << 3 | (payload[1] >>> 5) & 0x7);
  altitude_code=(short)((payload[1] << 8 | payload[2]) & 0x1FFF);
  message=new byte[7];
  for (int i=0; i < 7; i++)   message[i]=payload[i + 3];
}","/** 
 * @param reply Mode S reply which contains this comm-b altitude reply
 * @throws BadFormatException if message is not comm-b altitude reply or contains wrong values.
 */
public CommBAltitudeReply(ModeSReply reply) throws BadFormatException {
  super(reply);
  setType(subtype.COMM_B_ALTITUDE_REPLY);
  if (getDownlinkFormat() != 20) {
    throw new BadFormatException(""String_Node_Str"");
  }
  byte[] payload=getPayload();
  flight_status=getFirstField();
  downlink_request=(byte)((payload[0] >>> 3) & 0x1F);
  utility_msg=(byte)((payload[0] & 0x7) << 3 | (payload[1] >>> 5) & 0x7);
  altitude_code=(short)((payload[1] << 8 | payload[2] & 0xFF) & 0x1FFF);
  message=new byte[7];
  for (int i=0; i < 7; i++)   message[i]=payload[i + 3];
}"
40842,"/** 
 * @return the decoded altitude in meters
 */
public double getAltitude(){
  boolean Mbit=(altitude_code & 0x40) != 0;
  boolean Qbit=(altitude_code & 0x10) != 0;
  int N;
  if (!Mbit && Qbit) {
    N=(altitude_code & 0xF) | ((altitude_code & 0x20) >>> 1) | ((altitude_code & 0x1F80) >>> 2);
    return (25 * N - 1000) * 0.3048;
  }
 else {
    int C1=(0x1000 & altitude_code) >>> 12;
    int A1=(0x800 & altitude_code) >>> 11;
    int C2=(0x400 & altitude_code) >>> 10;
    int A2=(0x200 & altitude_code) >>> 9;
    int C4=(0x100 & altitude_code) >>> 8;
    int A4=(0x080 & altitude_code) >>> 7;
    int B1=(0x020 & altitude_code) >>> 5;
    int B2=(0x008 & altitude_code) >>> 3;
    int D2=(0x004 & altitude_code) >>> 2;
    int B4=(0x002 & altitude_code) >>> 1;
    int D4=(0x001 & altitude_code);
    int N500=grayToBin(D2 << 7 | D4 << 6 | A1 << 5 | A2 << 4 | A4 << 3 | B1 << 2 | B2 << 1 | B4,8);
    int N100=grayToBin(C1 << 2 | C2 << 1 | C4,3) - 1;
    if (N100 == 6)     N100=4;
    if (N500 % 2 != 0)     N100=4 - N100;
    return (-1200 + N500 * 500 + N100 * 100) * 0.3048;
  }
}","/** 
 * @return the decoded altitude in meters
 */
public Double getAltitude(){
  if (altitude_code == 0)   return null;
  boolean Mbit=(altitude_code & 0x40) != 0;
  if (!Mbit) {
    boolean Qbit=(altitude_code & 0x10) != 0;
    if (Qbit) {
      int N=(altitude_code & 0x0F) | ((altitude_code & 0x20) >>> 1) | ((altitude_code & 0x1F80) >>> 2);
      return (25 * N - 1000) * 0.3048;
    }
 else {
      int C1=(0x1000 & altitude_code) >>> 12;
      int A1=(0x0800 & altitude_code) >>> 11;
      int C2=(0x0400 & altitude_code) >>> 10;
      int A2=(0x0200 & altitude_code) >>> 9;
      int C4=(0x0100 & altitude_code) >>> 8;
      int A4=(0x0080 & altitude_code) >>> 7;
      int B1=(0x0020 & altitude_code) >>> 5;
      int B2=(0x0008 & altitude_code) >>> 3;
      int D2=(0x0004 & altitude_code) >>> 2;
      int B4=(0x0002 & altitude_code) >>> 1;
      int D4=(0x0001 & altitude_code);
      int N500=grayToBin(D2 << 7 | D4 << 6 | A1 << 5 | A2 << 4 | A4 << 3 | B1 << 2 | B2 << 1 | B4,8);
      int N100=grayToBin(C1 << 2 | C2 << 1 | C4,3) - 1;
      if (N100 == 6)       N100=4;
      if (N500 % 2 != 0)       N100=4 - N100;
      return (-1200 + N500 * 500 + N100 * 100) * 0.3048;
    }
  }
 else   return null;
}"
40843,"/** 
 * @param reply Mode S reply containing this long air-to-air ACAS reply
 * @throws BadFormatException if message is not long air-to-air ACAS reply or contains wrong values.
 */
public LongACAS(ModeSReply reply) throws BadFormatException {
  super(reply);
  setType(subtype.LONG_ACAS);
  if (getDownlinkFormat() != 16) {
    throw new BadFormatException(""String_Node_Str"");
  }
  byte[] payload=getPayload();
  airborne=(getFirstField() & 0x4) == 0;
  sensitivity_level=(byte)((payload[0] >>> 5) & 0x7);
  reply_information=(byte)((payload[0] & 0x7) << 1 | (payload[1] >>> 7) & 0x1);
  altitude_code=(short)((payload[1] << 8 | payload[2]) & 0x1FFF);
  valid_rac=payload[3] != 0x30;
  active_resolution_advisories=(short)((payload[4] << 6 | (payload[5] >>> 2) & 0x3) & 0x3FFF);
  racs_record=(byte)((payload[5] << 2 | (payload[6] >>> 6) & 0x3) & 0xF);
  ra_terminated=(payload[6] >>> 5 & 0x1) == 1;
  multiple_threat_encounter=(payload[6] >>> 4 & 0x1) == 1;
}","/** 
 * @param reply Mode S reply containing this long air-to-air ACAS reply
 * @throws BadFormatException if message is not long air-to-air ACAS reply or contains wrong values.
 */
public LongACAS(ModeSReply reply) throws BadFormatException {
  super(reply);
  setType(subtype.LONG_ACAS);
  if (getDownlinkFormat() != 16) {
    throw new BadFormatException(""String_Node_Str"");
  }
  byte[] payload=getPayload();
  airborne=(getFirstField() & 0x4) == 0;
  sensitivity_level=(byte)((payload[0] >>> 5) & 0x7);
  reply_information=(byte)((payload[0] & 0x7) << 1 | (payload[1] >>> 7) & 0x1);
  altitude_code=(short)((payload[1] << 8 | payload[2] & 0xFF) & 0x1FFF);
  valid_rac=payload[3] != 0x30;
  active_resolution_advisories=(short)((payload[4] << 6 | (payload[5] >>> 2) & 0x3) & 0x3FFF);
  racs_record=(byte)((payload[5] << 2 | (payload[6] >>> 6) & 0x3) & 0xF);
  ra_terminated=(payload[6] >>> 5 & 0x1) == 1;
  multiple_threat_encounter=(payload[6] >>> 4 & 0x1) == 1;
}"
40844,"/** 
 * @return the decoded altitude in meters
 */
public double getAltitude(){
  boolean Mbit=(altitude_code & 0x40) != 0;
  boolean Qbit=(altitude_code & 0x10) != 0;
  int N;
  if (!Mbit && Qbit) {
    N=(altitude_code & 0xF) | ((altitude_code & 0x20) >>> 1) | ((altitude_code & 0x1F80) >>> 2);
    return (25 * N - 1000) * 0.3048;
  }
 else {
    int C1=(0x1000 & altitude_code) >>> 12;
    int A1=(0x800 & altitude_code) >>> 11;
    int C2=(0x400 & altitude_code) >>> 10;
    int A2=(0x200 & altitude_code) >>> 9;
    int C4=(0x100 & altitude_code) >>> 8;
    int A4=(0x080 & altitude_code) >>> 7;
    int B1=(0x020 & altitude_code) >>> 5;
    int B2=(0x008 & altitude_code) >>> 3;
    int D2=(0x004 & altitude_code) >>> 2;
    int B4=(0x002 & altitude_code) >>> 1;
    int D4=(0x001 & altitude_code);
    int N500=grayToBin(D2 << 7 | D4 << 6 | A1 << 5 | A2 << 4 | A4 << 3 | B1 << 2 | B2 << 1 | B4,8);
    int N100=grayToBin(C1 << 2 | C2 << 1 | C4,3) - 1;
    if (N100 == 6)     N100=4;
    if (N500 % 2 != 0)     N100=4 - N100;
    return (-1200 + N500 * 500 + N100 * 100) * 0.3048;
  }
}","/** 
 * @return the decoded altitude in meters
 */
public Double getAltitude(){
  if (altitude_code == 0)   return null;
  boolean Mbit=(altitude_code & 0x40) != 0;
  if (!Mbit) {
    boolean Qbit=(altitude_code & 0x10) != 0;
    if (Qbit) {
      int N=(altitude_code & 0x0F) | ((altitude_code & 0x20) >>> 1) | ((altitude_code & 0x1F80) >>> 2);
      return (25 * N - 1000) * 0.3048;
    }
 else {
      int C1=(0x1000 & altitude_code) >>> 12;
      int A1=(0x0800 & altitude_code) >>> 11;
      int C2=(0x0400 & altitude_code) >>> 10;
      int A2=(0x0200 & altitude_code) >>> 9;
      int C4=(0x0100 & altitude_code) >>> 8;
      int A4=(0x0080 & altitude_code) >>> 7;
      int B1=(0x0020 & altitude_code) >>> 5;
      int B2=(0x0008 & altitude_code) >>> 3;
      int D2=(0x0004 & altitude_code) >>> 2;
      int B4=(0x0002 & altitude_code) >>> 1;
      int D4=(0x0001 & altitude_code);
      int N500=grayToBin(D2 << 7 | D4 << 6 | A1 << 5 | A2 << 4 | A4 << 3 | B1 << 2 | B2 << 1 | B4,8);
      int N100=grayToBin(C1 << 2 | C2 << 1 | C4,3) - 1;
      if (N100 == 6)       N100=4;
      if (N500 % 2 != 0)       N100=4 - N100;
      return (-1200 + N500 * 500 + N100 * 100) * 0.3048;
    }
  }
 else   return null;
}"
40845,"/** 
 * @param reply Mode S reply containing this short air-air acas reply
 * @throws BadFormatException if message is not short air-air acas reply or contains wrong values.
 */
public ShortACAS(ModeSReply reply) throws BadFormatException {
  super(reply);
  setType(subtype.SHORT_ACAS);
  if (getDownlinkFormat() != 0) {
    throw new BadFormatException(""String_Node_Str"");
  }
  byte[] payload=getPayload();
  airborne=(getFirstField() & 0x4) == 0;
  cross_link_capability=(getFirstField() & 0x2) != 0;
  sensitivity_level=(byte)((payload[0] >>> 5) & 0x7);
  reply_information=(byte)((payload[0] & 0x7) << 1 | (payload[1] >>> 7) & 0x1);
  altitude_code=(short)((payload[1] << 8 | payload[2]) & 0x1FFF);
}","/** 
 * @param reply Mode S reply containing this short air-air acas reply
 * @throws BadFormatException if message is not short air-air acas reply or contains wrong values.
 */
public ShortACAS(ModeSReply reply) throws BadFormatException {
  super(reply);
  setType(subtype.SHORT_ACAS);
  if (getDownlinkFormat() != 0) {
    throw new BadFormatException(""String_Node_Str"");
  }
  byte[] payload=getPayload();
  airborne=(getFirstField() & 0x4) == 0;
  cross_link_capability=(getFirstField() & 0x2) != 0;
  sensitivity_level=(byte)((payload[0] >>> 5) & 0x7);
  reply_information=(byte)((payload[0] & 0x7) << 1 | (payload[1] >>> 7) & 0x1);
  altitude_code=(short)((payload[1] << 8 | payload[2] & 0xFF) & 0x1FFF);
}"
40846,"/** 
 * @param raw_message raw extended squitter as hex string
 * @throws BadFormatException if message is not extended squitter or contains wrong values.
 */
public ExtendedSquitter(String raw_message) throws BadFormatException {
  super(raw_message);
  setType(subtype.EXTENDED_SQUITTER);
  if (getDownlinkFormat() != 17 && getDownlinkFormat() != 18) {
    throw new BadFormatException(""String_Node_Str"",raw_message);
  }
  byte[] payload=getPayload();
  capabilities=(byte)(payload[0] & 0x7);
  message=new byte[7];
  for (int i=0; i < 7; i++)   message[i]=payload[i + 3];
  format_type_code=(byte)((message[0] >>> 3) & 0x1F);
}","/** 
 * @param raw_message raw extended squitter as hex string
 * @throws BadFormatException if message is not extended squitter or contains wrong values.
 */
public ExtendedSquitter(String raw_message) throws BadFormatException {
  super(raw_message);
  setType(subtype.EXTENDED_SQUITTER);
  if (getDownlinkFormat() != 17 && getDownlinkFormat() != 18) {
    throw new BadFormatException(""String_Node_Str"",raw_message);
  }
  byte[] payload=getPayload();
  capabilities=getFirstField();
  message=new byte[7];
  for (int i=0; i < 7; i++)   message[i]=payload[i + 3];
  format_type_code=(byte)((message[0] >>> 3) & 0x1F);
}"
40847,"/** 
 * @return true if parity in message matched recalculated parity
 */
public boolean checkParity(){
  return tools.areEqual(calcParity(),getParity());
}","/** 
 * @return true if parity in message matched calculated parity
 */
public boolean checkParity(){
  return tools.areEqual(calcParity(),getParity());
}"
40848,"/** 
 * We assume the following message format: | DF | CA | Payload | PI/AP | 5    3    3/10      3
 * @param raw_message Mode S message in hex representation
 * @throws BadFormatException if message has invalid length or payload doesnot match specification or parity has invalid length
 */
public ModeSReply(String raw_message) throws BadFormatException {
  int length=raw_message.length();
  if (length != 14 && length != 28)   throw new BadFormatException(""String_Node_Str"",raw_message);
  downlink_format=(byte)(Short.parseShort(raw_message.substring(0,2),16));
  capabilities=(byte)(downlink_format & 0x7);
  downlink_format=(byte)(downlink_format >>> 3 & 0x1F);
  byte[] payload=new byte[(length - 8) / 2];
  byte[] icao24=new byte[3];
  byte[] parity=new byte[3];
switch (downlink_format) {
case 0:
case 4:
case 5:
case 16:
case 20:
case 21:
case 24:
    for (int i=length - 6; i < length; i+=2)     icao24[(i - length + 6) / 2]=(byte)Short.parseShort(raw_message.substring(i,i + 2),16);
  for (int i=2; i < length - 6; i+=2)   payload[(i - 2) / 2]=(byte)Short.parseShort(raw_message.substring(i,i + 2),16);
break;
case 11:
case 17:
case 18:
for (int i=2; i < length - 6; i+=2) payload[(i - 2) / 2]=(byte)Short.parseShort(raw_message.substring(i,i + 2),16);
for (int i=0; i < 3; i++) icao24[i]=payload[i];
for (int i=length - 6; i < length; i+=2) parity[(i - length + 6) / 2]=(byte)Short.parseShort(raw_message.substring(i,i + 2),16);
break;
default :
}
if (icao24.length != 3) throw new BadFormatException(""String_Node_Str"",raw_message);
if (payload.length != 3 && payload.length != 10) throw new BadFormatException(""String_Node_Str"",raw_message);
if (parity.length != 3) throw new BadFormatException(""String_Node_Str"",raw_message);
this.icao24=icao24;
this.payload=payload;
this.parity=parity;
setType(subtype.MODES_REPLY);
}","/** 
 * We assume the following message format: | DF | FF | Payload | PI/AP | 5    3    24/80      24
 * @param raw_message Mode S message in hex representation
 * @throws BadFormatException if message has invalid length or payload doesnot match specification or parity has invalid length
 */
public ModeSReply(String raw_message) throws BadFormatException {
  int length=raw_message.length();
  if (length != 14 && length != 28)   throw new BadFormatException(""String_Node_Str"",raw_message);
  downlink_format=(byte)(Short.parseShort(raw_message.substring(0,2),16));
  first_field=(byte)(downlink_format & 0x7);
  downlink_format=(byte)(downlink_format >>> 3 & 0x1F);
  byte[] payload=new byte[(length - 8) / 2];
  byte[] icao24=new byte[3];
  byte[] parity=new byte[3];
  for (int i=2; i < length - 6; i+=2)   payload[(i - 2) / 2]=(byte)Short.parseShort(raw_message.substring(i,i + 2),16);
  for (int i=length - 6; i < length; i+=2)   parity[(i - length + 6) / 2]=(byte)Short.parseShort(raw_message.substring(i,i + 2),16);
switch (downlink_format) {
case 0:
case 4:
case 5:
case 16:
case 20:
case 21:
case 24:
    break;
case 11:
case 17:
case 18:
  for (int i=0; i < 3; i++)   icao24[i]=payload[i];
break;
default :
}
if (icao24.length != 3) throw new BadFormatException(""String_Node_Str"",raw_message);
if (payload.length != 3 && payload.length != 10) throw new BadFormatException(""String_Node_Str"",raw_message);
if (parity.length != 3) throw new BadFormatException(""String_Node_Str"",raw_message);
this.icao24=icao24;
this.payload=payload;
this.parity=parity;
setType(subtype.MODES_REPLY);
}"
40849,"public String toString(){
  return super.toString() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ getDownlinkFormat()+ ""String_Node_Str""+ ""String_Node_Str""+ getCapabilities()+ ""String_Node_Str""+ ""String_Node_Str""+ tools.toHexString(getIcao24())+ ""String_Node_Str""+ ""String_Node_Str""+ tools.toHexString(getPayload())+ ""String_Node_Str""+ ""String_Node_Str""+ tools.toHexString(getParity())+ ""String_Node_Str""+ ""String_Node_Str""+ tools.toHexString(calcParity());
}","public String toString(){
  return super.toString() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ getDownlinkFormat()+ ""String_Node_Str""+ ""String_Node_Str""+ tools.toHexString(getIcao24())+ ""String_Node_Str""+ ""String_Node_Str""+ tools.toHexString(getPayload())+ ""String_Node_Str""+ ""String_Node_Str""+ tools.toHexString(getParity())+ ""String_Node_Str""+ ""String_Node_Str""+ tools.toHexString(calcParity());
}"
40850,"/** 
 * @return recalculated parity as 3-byte array
 */
public byte[] calcParity(){
  byte[] message=new byte[payload.length + 1];
  message[0]=(byte)(downlink_format << 3 | capabilities);
  for (byte b=0; b < payload.length; ++b)   message[b + 1]=payload[b];
  return calcParity(message);
}","/** 
 * @return calculates Mode S parity as 3-byte array
 */
public byte[] calcParity(){
  byte[] message=new byte[payload.length + 1];
  message[0]=(byte)(downlink_format << 3 | first_field);
  for (byte b=0; b < payload.length; ++b)   message[b + 1]=payload[b];
  return calcParity(message);
}"
40851,"public String toString(){
  return super.toString() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ (isOddFormat() ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ (hasPosition() ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ (hasAltitude() ? ""String_Node_Str"" : ""String_Node_Str"");
}","public String toString(){
  try {
    return super.toString() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ (isOddFormat() ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ (hasPosition() ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ (hasAltitude() ? getAltitude() : ""String_Node_Str"");
  }
 catch (  MissingInformationException e) {
    return ""String_Node_Str"";
  }
}"
40852,"/** 
 * Note:<br> 7700 indicates emergency<br> 7600 indicates radiocommunication failure<br> 7500 indicates unlawful interference<br> 2000 indicates that transponder is not yet operated<br>
 * @return The identity (Mode A code; see ICAO Annex 10 V4)
 */
public String getIdentity(){
  int C1=(0x1000 & identity) >>> 12;
  int A1=(0x800 & identity) >>> 11;
  int C2=(0x400 & identity) >>> 10;
  int A2=(0x200 & identity) >>> 9;
  int C4=(0x100 & identity) >>> 8;
  int A4=(0x080 & identity) >>> 7;
  int B1=(0x020 & identity) >>> 5;
  int D1=(0x010 & identity) >>> 4;
  int B2=(0x008 & identity) >>> 3;
  int D2=(0x004 & identity) >>> 2;
  int B4=(0x002 & identity) >>> 1;
  int D4=(0x001 & identity);
  String A=Integer.toString(A4 << 2 + A2 << 1 + A1);
  String B=Integer.toString(B4 << 2 + B2 << 1 + B1);
  String C=Integer.toString(C4 << 2 + C2 << 1 + C1);
  String D=Integer.toString(D4 << 2 + D2 << 1 + D1);
  return A + B + C+ D;
}","/** 
 * Note:<br> 7700 indicates emergency<br> 7600 indicates radiocommunication failure<br> 7500 indicates unlawful interference<br> 2000 indicates that transponder is not yet operated<br>
 * @return The identity (Mode A code; see ICAO Annex 10 V4)
 */
public String getIdentity(){
  int C1=(0x1000 & identity) >>> 12;
  int A1=(0x800 & identity) >>> 11;
  int C2=(0x400 & identity) >>> 10;
  int A2=(0x200 & identity) >>> 9;
  int C4=(0x100 & identity) >>> 8;
  int A4=(0x080 & identity) >>> 7;
  int B1=(0x020 & identity) >>> 5;
  int D1=(0x010 & identity) >>> 4;
  int B2=(0x008 & identity) >>> 3;
  int D2=(0x004 & identity) >>> 2;
  int B4=(0x002 & identity) >>> 1;
  int D4=(0x001 & identity);
  String A=Integer.toString((A4 << 2) + (A2 << 1) + A1);
  String B=Integer.toString((B4 << 2) + (B2 << 1) + B1);
  String C=Integer.toString((C4 << 2) + (C2 << 1) + C1);
  String D=Integer.toString((D4 << 2) + (D2 << 1) + D1);
  return A + B + C+ D;
}"
40853,"/** 
 * @param raw_message raw altitude reply as hex string
 * @throws BadFormatException if message is not altitude reply or contains wrong values.
 */
public IdentifyReply(String raw_message) throws BadFormatException {
  super(raw_message);
  setType(subtype.IDENTIFY_REPLY);
  if (getDownlinkFormat() != 4) {
    throw new BadFormatException(""String_Node_Str"",raw_message);
  }
  byte[] payload=getPayload();
  flight_status=getFirstField();
  downlink_request=(byte)((payload[0] >>> 3) & 0x1F);
  utility_msg=(byte)((payload[0] & 0x7) << 3 | (payload[1] >>> 5) & 0x7);
  identity=(short)((payload[1] << 8 | payload[2]) & 0x1FFF);
}","/** 
 * @param raw_message raw altitude reply as hex string
 * @throws BadFormatException if message is not altitude reply or contains wrong values.
 */
public IdentifyReply(String raw_message) throws BadFormatException {
  super(raw_message);
  setType(subtype.IDENTIFY_REPLY);
  if (getDownlinkFormat() != 5) {
    throw new BadFormatException(""String_Node_Str"",raw_message);
  }
  byte[] payload=getPayload();
  flight_status=getFirstField();
  downlink_request=(byte)((payload[0] >>> 3) & 0x1F);
  utility_msg=(byte)((payload[0] & 0x7) << 3 | (payload[1] >>> 5) & 0x7);
  identity=(short)((payload[1] << 8 | payload[2]) & 0x1FFF);
}"
40854,"public String toString(){
  return super.toString() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ getDownlinkFormat()+ ""String_Node_Str""+ ""String_Node_Str""+ tools.toHexString(getIcao24())+ ""String_Node_Str""+ ""String_Node_Str""+ tools.toHexString(getPayload())+ ""String_Node_Str""+ ""String_Node_Str""+ tools.toHexString(getParity())+ ""String_Node_Str""+ ""String_Node_Str""+ tools.toHexString(calcParity());
}","public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + getDownlinkFormat() + ""String_Node_Str""+ ""String_Node_Str""+ tools.toHexString(getIcao24())+ ""String_Node_Str""+ ""String_Node_Str""+ tools.toHexString(getPayload())+ ""String_Node_Str""+ ""String_Node_Str""+ tools.toHexString(getParity())+ ""String_Node_Str""+ ""String_Node_Str""+ tools.toHexString(calcParity());
}"
40855,"public static void main(String[] args){
  Options opts=new Options();
  opts.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  opts.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  opts.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  opts.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  opts.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  CommandLineParser parser=new DefaultParser();
  CommandLine cmd;
  File avro=null, kmlfile=null;
  String filter_icao24=null;
  Long filter_max=null;
  Double filter_start=null, filter_end=null;
  String file=null, out=null;
  try {
    cmd=parser.parse(opts,args);
    try {
      if (cmd.hasOption(""String_Node_Str""))       filter_icao24=cmd.getOptionValue(""String_Node_Str"");
      if (cmd.hasOption(""String_Node_Str""))       filter_start=Double.parseDouble(cmd.getOptionValue(""String_Node_Str""));
      if (cmd.hasOption(""String_Node_Str""))       filter_end=Double.parseDouble(cmd.getOptionValue(""String_Node_Str""));
      if (cmd.hasOption(""String_Node_Str""))       filter_max=Long.parseLong(cmd.getOptionValue(""String_Node_Str""));
    }
 catch (    NumberFormatException e) {
      throw new ParseException(""String_Node_Str"" + e.getMessage());
    }
    if (cmd.hasOption(""String_Node_Str"")) {
      printHelp(opts);
      System.exit(0);
    }
    if (cmd.getArgList().size() != 2)     throw new ParseException(""String_Node_Str"");
    file=cmd.getArgList().get(0);
    out=cmd.getArgList().get(1);
  }
 catch (  ParseException e) {
    System.err.println(e.getMessage() + ""String_Node_Str"");
    printHelp(opts);
    System.exit(1);
  }
  System.out.println(""String_Node_Str"");
  try {
    avro=new File(file);
    if (!avro.exists() || avro.isDirectory() || !avro.canRead()) {
      throw new FileNotFoundException(""String_Node_Str"");
    }
    kmlfile=new File(out);
    if (kmlfile.exists() || kmlfile.isDirectory())     throw new java.io.IOException(""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    System.err.println(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
    System.exit(1);
  }
catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
    System.exit(1);
  }
  DatumReader<ModeSEncodedMessage> datumReader=new SpecificDatumReader<ModeSEncodedMessage>(ModeSEncodedMessage.class);
  long msgCount=0, good_pos_cnt=0, bad_pos_cnt=0, flights_cnt=0, err_pos_cnt=0;
  try {
    DataFileReader<ModeSEncodedMessage> fileReader=new DataFileReader<ModeSEncodedMessage>(avro,datumReader);
    System.err.println(""String_Node_Str"" + ""String_Node_Str"" + file + ""String_Node_Str""+ ""String_Node_Str""+ filter_icao24+ ""String_Node_Str""+ ""String_Node_Str""+ filter_start+ ""String_Node_Str""+ ""String_Node_Str""+ filter_end+ ""String_Node_Str""+ ""String_Node_Str""+ filter_max+ ""String_Node_Str"");
    ModeSEncodedMessage record=new ModeSEncodedMessage();
    HashMap<String,Flight> flights=new HashMap<String,Flight>();
    Flight flight;
    String icao24;
    ModeSReply msg;
    AirbornePositionMsg airpos;
    SurfacePositionMsg surfacepos;
    IdentificationMsg ident;
    Avro2Kml a2k=new Avro2Kml();
    OskyKml kml=a2k.new OskyKml();
    mainloop:     while (fileReader.hasNext()) {
      record=fileReader.next(record);
      if (record.getTimeAtServer() < filter_start)       continue;
      if (record.getTimeAtServer() > filter_end)       continue;
      List<String> to_remove=new ArrayList<String>();
      for (      String key : flights.keySet()) {
        if (flights.get(key).last < record.getTimeAtServer() - 3600) {
          to_remove.add(key);
        }
      }
      for (      String key : to_remove) {
        if (filter_max != null && kml.getNumberOfFlights() >= filter_max)         break mainloop;
        kml.addFlight(flights.get(key));
        flights.remove(key);
      }
      msgCount++;
      try {
        msg=Decoder.genericDecoder(record.getRawMessage().toString());
      }
 catch (      BadFormatException e) {
        continue;
      }
      icao24=tools.toHexString(msg.getIcao24());
      if (filter_icao24 != null && !icao24.equals(filter_icao24))       continue;
      if (flights.containsKey(icao24))       flight=flights.get(icao24);
 else {
        flight=a2k.new Flight();
        flight.icao24=icao24;
        flight.first=record.getTimeAtServer();
        flights.put(icao24,flight);
        ++flights_cnt;
      }
      flight.last=record.getTimeAtServer();
      if (!flight.serials.contains(record.getSensorSerialNumber()))       flight.serials.add(record.getSensorSerialNumber());
      if (msg instanceof AirbornePositionMsg) {
        airpos=(AirbornePositionMsg)msg;
        Position rec=record.getSensorLatitude() != null ? new Position(record.getSensorLongitude(),record.getSensorLatitude(),record.getSensorAltitude()) : null;
        airpos.setNICSupplementA(flight.dec.getNICSupplementA());
        Position pos=flight.dec.decodePosition(record.getTimeAtServer(),rec,airpos);
        if (pos == null)         ++err_pos_cnt;
 else {
          if (pos.isReasonable()) {
            Coordinate coord=new Coordinate(pos.getLongitude(),pos.getLatitude(),pos.getAltitude() != null && pos.getAltitude() > 0 ? pos.getAltitude() : 0);
            if (!flight.coords.contains(coord)) {
              flight.coords.add(coord);
              ++good_pos_cnt;
            }
          }
 else {
            flight.contains_unreasonable=true;
            ++bad_pos_cnt;
          }
        }
      }
 else       if (msg instanceof SurfacePositionMsg) {
        surfacepos=(SurfacePositionMsg)msg;
        Position rec=record.getSensorLatitude() != null ? new Position(record.getSensorLongitude(),record.getSensorLatitude(),record.getSensorAltitude()) : null;
        Position pos=flight.dec.decodePosition(record.getTimeAtServer(),rec,surfacepos);
        if (pos == null)         ++err_pos_cnt;
 else {
          if (pos.isReasonable()) {
            Coordinate coord=new Coordinate(pos.getLongitude(),pos.getLatitude(),0);
            if (!flight.coords.contains(coord)) {
              flight.coords.add(coord);
              ++good_pos_cnt;
            }
          }
 else {
            flight.contains_unreasonable=true;
            ++bad_pos_cnt;
          }
        }
      }
 else       if (msg instanceof IdentificationMsg) {
        ident=(IdentificationMsg)msg;
        flight.callsign=ident.getIdentity();
      }
    }
    for (    String key : flights.keySet()) {
      if (filter_max != null && kml.getNumberOfFlights() >= filter_max)       break;
      kml.addFlight(flights.get(key));
    }
    fileReader.close();
    kml.writeToFile(kmlfile);
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    System.exit(1);
  }
catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    System.exit(1);
  }
  System.err.println(""String_Node_Str"" + msgCount + ""String_Node_Str"");
  System.err.println(""String_Node_Str"" + good_pos_cnt);
  System.err.println(""String_Node_Str"" + bad_pos_cnt);
  System.err.println(""String_Node_Str"" + err_pos_cnt);
  System.err.println(""String_Node_Str"" + flights_cnt);
}","public static void main(String[] args){
  Options opts=new Options();
  opts.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  opts.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  opts.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  opts.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  opts.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  CommandLineParser parser=new DefaultParser();
  CommandLine cmd;
  File avro=null, kmlfile=null;
  String filter_icao24=null;
  Long filter_max=null;
  Double filter_start=null, filter_end=null;
  String file=null, out=null;
  try {
    cmd=parser.parse(opts,args);
    try {
      if (cmd.hasOption(""String_Node_Str""))       filter_icao24=cmd.getOptionValue(""String_Node_Str"");
      if (cmd.hasOption(""String_Node_Str""))       filter_start=Double.parseDouble(cmd.getOptionValue(""String_Node_Str""));
      if (cmd.hasOption(""String_Node_Str""))       filter_end=Double.parseDouble(cmd.getOptionValue(""String_Node_Str""));
      if (cmd.hasOption(""String_Node_Str""))       filter_max=Long.parseLong(cmd.getOptionValue(""String_Node_Str""));
    }
 catch (    NumberFormatException e) {
      throw new ParseException(""String_Node_Str"" + e.getMessage());
    }
    if (cmd.hasOption(""String_Node_Str"")) {
      printHelp(opts);
      System.exit(0);
    }
    if (cmd.getArgList().size() != 2)     throw new ParseException(""String_Node_Str"");
    file=cmd.getArgList().get(0);
    out=cmd.getArgList().get(1);
  }
 catch (  ParseException e) {
    System.err.println(e.getMessage() + ""String_Node_Str"");
    printHelp(opts);
    System.exit(1);
  }
  System.out.println(""String_Node_Str"");
  try {
    avro=new File(file);
    if (!avro.exists() || avro.isDirectory() || !avro.canRead()) {
      throw new FileNotFoundException(""String_Node_Str"");
    }
    kmlfile=new File(out);
    if (kmlfile.exists() || kmlfile.isDirectory())     throw new java.io.IOException(""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    System.err.println(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
    System.exit(1);
  }
catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
    System.exit(1);
  }
  DatumReader<ModeSEncodedMessage> datumReader=new SpecificDatumReader<ModeSEncodedMessage>(ModeSEncodedMessage.class);
  long msgCount=0, good_pos_cnt=0, bad_pos_cnt=0, flights_cnt=0, err_pos_cnt=0;
  try {
    DataFileReader<ModeSEncodedMessage> fileReader=new DataFileReader<ModeSEncodedMessage>(avro,datumReader);
    System.err.println(""String_Node_Str"" + ""String_Node_Str"" + file + ""String_Node_Str""+ ""String_Node_Str""+ filter_icao24+ ""String_Node_Str""+ ""String_Node_Str""+ filter_start+ ""String_Node_Str""+ ""String_Node_Str""+ filter_end+ ""String_Node_Str""+ ""String_Node_Str""+ filter_max+ ""String_Node_Str"");
    ModeSEncodedMessage record=new ModeSEncodedMessage();
    HashMap<String,Flight> flights=new HashMap<String,Flight>();
    Flight flight;
    String icao24;
    ModeSReply msg;
    AirbornePositionMsg airpos;
    SurfacePositionMsg surfacepos;
    IdentificationMsg ident;
    Avro2Kml a2k=new Avro2Kml();
    OskyKml kml=a2k.new OskyKml();
    mainloop:     while (fileReader.hasNext()) {
      record=fileReader.next(record);
      if (filter_start != null && record.getTimeAtServer() < filter_start)       continue;
      if (filter_end != null && record.getTimeAtServer() > filter_end)       continue;
      List<String> to_remove=new ArrayList<String>();
      for (      String key : flights.keySet()) {
        if (flights.get(key).last < record.getTimeAtServer() - 3600) {
          to_remove.add(key);
        }
      }
      for (      String key : to_remove) {
        if (filter_max != null && kml.getNumberOfFlights() >= filter_max)         break mainloop;
        kml.addFlight(flights.get(key));
        flights.remove(key);
      }
      msgCount++;
      try {
        msg=Decoder.genericDecoder(record.getRawMessage().toString());
      }
 catch (      BadFormatException e) {
        continue;
      }
      icao24=tools.toHexString(msg.getIcao24());
      if (filter_icao24 != null && !icao24.equals(filter_icao24))       continue;
      if (flights.containsKey(icao24))       flight=flights.get(icao24);
 else {
        flight=a2k.new Flight();
        flight.icao24=icao24;
        flight.first=record.getTimeAtServer();
        flights.put(icao24,flight);
        ++flights_cnt;
      }
      flight.last=record.getTimeAtServer();
      if (!flight.serials.contains(record.getSensorSerialNumber()))       flight.serials.add(record.getSensorSerialNumber());
      if (msg instanceof AirbornePositionMsg) {
        airpos=(AirbornePositionMsg)msg;
        Position rec=record.getSensorLatitude() != null ? new Position(record.getSensorLongitude(),record.getSensorLatitude(),record.getSensorAltitude()) : null;
        airpos.setNICSupplementA(flight.dec.getNICSupplementA());
        Position pos=flight.dec.decodePosition(record.getTimeAtServer(),rec,airpos);
        if (pos == null)         ++err_pos_cnt;
 else {
          if (pos.isReasonable()) {
            Coordinate coord=new Coordinate(pos.getLongitude(),pos.getLatitude(),pos.getAltitude() != null && pos.getAltitude() > 0 ? pos.getAltitude() : 0);
            if (!flight.coords.contains(coord)) {
              flight.coords.add(coord);
              ++good_pos_cnt;
            }
          }
 else {
            flight.contains_unreasonable=true;
            ++bad_pos_cnt;
          }
        }
      }
 else       if (msg instanceof SurfacePositionMsg) {
        surfacepos=(SurfacePositionMsg)msg;
        Position rec=record.getSensorLatitude() != null ? new Position(record.getSensorLongitude(),record.getSensorLatitude(),record.getSensorAltitude()) : null;
        Position pos=flight.dec.decodePosition(record.getTimeAtServer(),rec,surfacepos);
        if (pos == null)         ++err_pos_cnt;
 else {
          if (pos.isReasonable()) {
            Coordinate coord=new Coordinate(pos.getLongitude(),pos.getLatitude(),0);
            if (!flight.coords.contains(coord)) {
              flight.coords.add(coord);
              ++good_pos_cnt;
            }
          }
 else {
            flight.contains_unreasonable=true;
            ++bad_pos_cnt;
          }
        }
      }
 else       if (msg instanceof IdentificationMsg) {
        ident=(IdentificationMsg)msg;
        flight.callsign=ident.getIdentity();
      }
    }
    for (    String key : flights.keySet()) {
      if (filter_max != null && kml.getNumberOfFlights() >= filter_max)       break;
      kml.addFlight(flights.get(key));
    }
    fileReader.close();
    kml.writeToFile(kmlfile);
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    System.exit(1);
  }
catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    System.exit(1);
  }
  System.err.println(""String_Node_Str"" + msgCount + ""String_Node_Str"");
  System.err.println(""String_Node_Str"" + good_pos_cnt);
  System.err.println(""String_Node_Str"" + bad_pos_cnt);
  System.err.println(""String_Node_Str"" + err_pos_cnt);
  System.err.println(""String_Node_Str"" + flights_cnt);
}"
40856,"public void addFlight(Flight flight){
  Date begin=new Date((long)(flight.first * 1000));
  Date end=new Date((long)(flight.last * 1000));
  Folder which;
  if (flight.coords.size() > 0)   which=flight.contains_unreasonable ? unreasonable : reasonable;
 else   which=empty;
  String description=""String_Node_Str"" + flight.icao24 + ""String_Node_Str""+ ""String_Node_Str""+ new String(flight.callsign)+ ""String_Node_Str""+ ""String_Node_Str""+ begin.toString()+ ""String_Node_Str""+ ""String_Node_Str""+ end.toString()+ ""String_Node_Str""+ ""String_Node_Str""+ StringUtils.join(flight.serials,""String_Node_Str"");
  Placemark placemark=which.createAndAddPlacemark().withName(flight.icao24).withTimePrimitive(new TimeSpan().withBegin(date_formatter.format(begin)).withEnd(date_formatter.format(end))).withDescription(description).withStyleUrl(flight.contains_unreasonable ? ""String_Node_Str"" : ""String_Node_Str"");
  placemark.createAndSetLineString().withCoordinates(flight.coords).withAltitudeMode(AltitudeMode.fromValue(AltitudeMode.ABSOLUTE.value())).withId(flight.icao24).withExtrude(false);
  num_flights++;
}","public void addFlight(Flight flight){
  Date begin=new Date((long)(flight.first * 1000));
  Date end=new Date((long)(flight.last * 1000));
  Folder which;
  if (flight.coords.size() > 0)   which=flight.contains_unreasonable ? unreasonable : reasonable;
 else   which=empty;
  String description=""String_Node_Str"" + flight.icao24 + ""String_Node_Str""+ ""String_Node_Str""+ new String(flight.callsign)+ ""String_Node_Str""+ ""String_Node_Str""+ begin.toString()+ ""String_Node_Str""+ ""String_Node_Str""+ end.toString()+ ""String_Node_Str""+ ""String_Node_Str""+ StringUtils.join(flight.serials,""String_Node_Str"");
  Placemark placemark=which.createAndAddPlacemark().withName(flight.icao24).withTimePrimitive(new TimeSpan().withBegin(date_formatter.format(begin)).withEnd(date_formatter.format(end))).withDescription(description).withStyleUrl(flight.contains_unreasonable ? ""String_Node_Str"" : ""String_Node_Str"");
  placemark.createAndSetLineString().withCoordinates(flight.coords).withAltitudeMode(AltitudeMode.fromValue(AltitudeMode.RELATIVE_TO_GROUND.value())).withId(flight.icao24).withExtrude(false);
  num_flights++;
}"
40857,"public static void main(String[] args){
  Options opts=new Options();
  opts.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  opts.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  opts.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  opts.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  opts.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  CommandLineParser parser=new DefaultParser();
  CommandLine cmd;
  File avro=null, kmlfile=null;
  String filter_icao24=null;
  Long filter_max=null;
  Double filter_start=null, filter_end=null;
  String file=null, out=null;
  try {
    cmd=parser.parse(opts,args);
    try {
      if (cmd.hasOption(""String_Node_Str""))       filter_icao24=cmd.getOptionValue(""String_Node_Str"");
      if (cmd.hasOption(""String_Node_Str""))       filter_start=Double.parseDouble(cmd.getOptionValue(""String_Node_Str""));
      if (cmd.hasOption(""String_Node_Str""))       filter_end=Double.parseDouble(cmd.getOptionValue(""String_Node_Str""));
      if (cmd.hasOption(""String_Node_Str""))       filter_max=Long.parseLong(cmd.getOptionValue(""String_Node_Str""));
    }
 catch (    NumberFormatException e) {
      throw new ParseException(""String_Node_Str"" + e.getMessage());
    }
    if (cmd.getArgList().size() != 2)     throw new ParseException(""String_Node_Str"");
    file=cmd.getArgList().get(0);
    out=cmd.getArgList().get(1);
    if (cmd.hasOption(""String_Node_Str"")) {
      printHelp(opts);
      System.exit(0);
    }
  }
 catch (  ParseException e) {
    System.err.println(e.getMessage() + ""String_Node_Str"");
    printHelp(opts);
    System.exit(1);
  }
  System.out.println(""String_Node_Str"");
  try {
    avro=new File(file);
    if (!avro.exists() || avro.isDirectory() || !avro.canRead()) {
      throw new FileNotFoundException(""String_Node_Str"");
    }
    kmlfile=new File(out);
    if (kmlfile.exists() || kmlfile.isDirectory())     throw new java.io.IOException(""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    System.err.println(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
    System.exit(1);
  }
catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
    System.exit(1);
  }
  DatumReader<ModeSEncodedMessage> datumReader=new SpecificDatumReader<ModeSEncodedMessage>(ModeSEncodedMessage.class);
  long msgCount=0, good_pos_cnt=0, bad_pos_cnt=0, flights_cnt=0, err_pos_cnt=0;
  try {
    DataFileReader<ModeSEncodedMessage> fileReader=new DataFileReader<ModeSEncodedMessage>(avro,datumReader);
    System.err.println(""String_Node_Str"" + ""String_Node_Str"" + file + ""String_Node_Str""+ ""String_Node_Str""+ filter_icao24+ ""String_Node_Str""+ ""String_Node_Str""+ filter_start+ ""String_Node_Str""+ ""String_Node_Str""+ filter_end+ ""String_Node_Str""+ ""String_Node_Str""+ filter_max+ ""String_Node_Str"");
    ModeSEncodedMessage record=new ModeSEncodedMessage();
    HashMap<String,Flight> flights=new HashMap<String,Flight>();
    Flight flight;
    String icao24;
    ModeSReply msg;
    AirbornePositionMsg airpos;
    SurfacePositionMsg surfacepos;
    IdentificationMsg ident;
    Avro2Kml a2k=new Avro2Kml();
    OskyKml kml=a2k.new OskyKml();
    mainloop:     while (fileReader.hasNext()) {
      record=fileReader.next(record);
      List<String> to_remove=new ArrayList<String>();
      for (      String key : flights.keySet()) {
        if (flights.get(key).last < record.getTimeAtServer() - 3600) {
          to_remove.add(key);
        }
      }
      for (      String key : to_remove) {
        kml.addFlight(flights.get(key));
        flights.remove(key);
        if (filter_max != null && kml.getNumberOfFlights() >= filter_max)         break mainloop;
      }
      msgCount++;
      try {
        msg=Decoder.genericDecoder(record.getRawMessage().toString());
      }
 catch (      BadFormatException e) {
        continue;
      }
      icao24=tools.toHexString(msg.getIcao24());
      if (filter_icao24 != null && !icao24.equals(filter_icao24))       continue;
      if (flights.containsKey(icao24))       flight=flights.get(icao24);
 else {
        flight=a2k.new Flight();
        flight.icao24=icao24;
        flight.first=record.getTimeAtServer();
        flights.put(icao24,flight);
        ++flights_cnt;
      }
      flight.last=record.getTimeAtServer();
      if (!flight.serials.contains(record.getSensorSerialNumber()))       flight.serials.add(record.getSensorSerialNumber());
      if (msg instanceof AirbornePositionMsg) {
        airpos=(AirbornePositionMsg)msg;
        Position rec=record.getSensorLatitude() != null ? new Position(record.getSensorLongitude(),record.getSensorLatitude(),record.getSensorAltitude()) : null;
        airpos.setNICSupplementA(flight.dec.getNICSupplementA());
        Position pos=flight.dec.decodePosition(record.getTimeAtServer(),rec,airpos);
        if (pos == null)         ++err_pos_cnt;
 else {
          if (pos.isReasonable()) {
            Coordinate coord=new Coordinate(pos.getLongitude(),pos.getLatitude(),pos.getAltitude() != null ? pos.getAltitude() : 0);
            flight.coords.add(coord);
            ++good_pos_cnt;
          }
 else {
            flight.contains_unreasonable=true;
            ++bad_pos_cnt;
          }
        }
      }
 else       if (msg instanceof SurfacePositionMsg) {
        surfacepos=(SurfacePositionMsg)msg;
        Position rec=record.getSensorLatitude() != null ? new Position(record.getSensorLongitude(),record.getSensorLatitude(),record.getSensorAltitude()) : null;
        Position pos=flight.dec.decodePosition(record.getTimeAtServer(),rec,surfacepos);
        if (pos == null)         ++err_pos_cnt;
 else {
          if (pos.isReasonable()) {
            Coordinate coord=new Coordinate(pos.getLongitude(),pos.getLatitude(),pos.getAltitude() != null ? pos.getAltitude() : 0);
            flight.coords.add(coord);
            ++good_pos_cnt;
          }
 else {
            flight.contains_unreasonable=true;
            ++bad_pos_cnt;
          }
        }
      }
 else       if (msg instanceof IdentificationMsg) {
        ident=(IdentificationMsg)msg;
        flight.callsign=ident.getIdentity();
      }
    }
    for (    String key : flights.keySet()) {
      kml.addFlight(flights.get(key));
      if (filter_max != null && kml.getNumberOfFlights() >= filter_max)       break;
    }
    fileReader.close();
    kml.writeToFile(kmlfile);
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    System.exit(1);
  }
catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    System.exit(1);
  }
  System.err.println(""String_Node_Str"" + msgCount + ""String_Node_Str"");
  System.err.println(""String_Node_Str"" + good_pos_cnt);
  System.err.println(""String_Node_Str"" + bad_pos_cnt);
  System.err.println(""String_Node_Str"" + err_pos_cnt);
  System.err.println(""String_Node_Str"" + flights_cnt);
}","public static void main(String[] args){
  Options opts=new Options();
  opts.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  opts.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  opts.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  opts.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  opts.addOption(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
  CommandLineParser parser=new DefaultParser();
  CommandLine cmd;
  File avro=null, kmlfile=null;
  String filter_icao24=null;
  Long filter_max=null;
  Double filter_start=null, filter_end=null;
  String file=null, out=null;
  try {
    cmd=parser.parse(opts,args);
    try {
      if (cmd.hasOption(""String_Node_Str""))       filter_icao24=cmd.getOptionValue(""String_Node_Str"");
      if (cmd.hasOption(""String_Node_Str""))       filter_start=Double.parseDouble(cmd.getOptionValue(""String_Node_Str""));
      if (cmd.hasOption(""String_Node_Str""))       filter_end=Double.parseDouble(cmd.getOptionValue(""String_Node_Str""));
      if (cmd.hasOption(""String_Node_Str""))       filter_max=Long.parseLong(cmd.getOptionValue(""String_Node_Str""));
    }
 catch (    NumberFormatException e) {
      throw new ParseException(""String_Node_Str"" + e.getMessage());
    }
    if (cmd.hasOption(""String_Node_Str"")) {
      printHelp(opts);
      System.exit(0);
    }
    if (cmd.getArgList().size() != 2)     throw new ParseException(""String_Node_Str"");
    file=cmd.getArgList().get(0);
    out=cmd.getArgList().get(1);
  }
 catch (  ParseException e) {
    System.err.println(e.getMessage() + ""String_Node_Str"");
    printHelp(opts);
    System.exit(1);
  }
  System.out.println(""String_Node_Str"");
  try {
    avro=new File(file);
    if (!avro.exists() || avro.isDirectory() || !avro.canRead()) {
      throw new FileNotFoundException(""String_Node_Str"");
    }
    kmlfile=new File(out);
    if (kmlfile.exists() || kmlfile.isDirectory())     throw new java.io.IOException(""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    System.err.println(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
    System.exit(1);
  }
catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
    System.exit(1);
  }
  DatumReader<ModeSEncodedMessage> datumReader=new SpecificDatumReader<ModeSEncodedMessage>(ModeSEncodedMessage.class);
  long msgCount=0, good_pos_cnt=0, bad_pos_cnt=0, flights_cnt=0, err_pos_cnt=0;
  try {
    DataFileReader<ModeSEncodedMessage> fileReader=new DataFileReader<ModeSEncodedMessage>(avro,datumReader);
    System.err.println(""String_Node_Str"" + ""String_Node_Str"" + file + ""String_Node_Str""+ ""String_Node_Str""+ filter_icao24+ ""String_Node_Str""+ ""String_Node_Str""+ filter_start+ ""String_Node_Str""+ ""String_Node_Str""+ filter_end+ ""String_Node_Str""+ ""String_Node_Str""+ filter_max+ ""String_Node_Str"");
    ModeSEncodedMessage record=new ModeSEncodedMessage();
    HashMap<String,Flight> flights=new HashMap<String,Flight>();
    Flight flight;
    String icao24;
    ModeSReply msg;
    AirbornePositionMsg airpos;
    SurfacePositionMsg surfacepos;
    IdentificationMsg ident;
    Avro2Kml a2k=new Avro2Kml();
    OskyKml kml=a2k.new OskyKml();
    mainloop:     while (fileReader.hasNext()) {
      record=fileReader.next(record);
      List<String> to_remove=new ArrayList<String>();
      for (      String key : flights.keySet()) {
        if (flights.get(key).last < record.getTimeAtServer() - 3600) {
          to_remove.add(key);
        }
      }
      for (      String key : to_remove) {
        kml.addFlight(flights.get(key));
        flights.remove(key);
        if (filter_max != null && kml.getNumberOfFlights() >= filter_max)         break mainloop;
      }
      msgCount++;
      try {
        msg=Decoder.genericDecoder(record.getRawMessage().toString());
      }
 catch (      BadFormatException e) {
        continue;
      }
      icao24=tools.toHexString(msg.getIcao24());
      if (filter_icao24 != null && !icao24.equals(filter_icao24))       continue;
      if (flights.containsKey(icao24))       flight=flights.get(icao24);
 else {
        flight=a2k.new Flight();
        flight.icao24=icao24;
        flight.first=record.getTimeAtServer();
        flights.put(icao24,flight);
        ++flights_cnt;
      }
      flight.last=record.getTimeAtServer();
      if (!flight.serials.contains(record.getSensorSerialNumber()))       flight.serials.add(record.getSensorSerialNumber());
      if (msg instanceof AirbornePositionMsg) {
        airpos=(AirbornePositionMsg)msg;
        Position rec=record.getSensorLatitude() != null ? new Position(record.getSensorLongitude(),record.getSensorLatitude(),record.getSensorAltitude()) : null;
        airpos.setNICSupplementA(flight.dec.getNICSupplementA());
        Position pos=flight.dec.decodePosition(record.getTimeAtServer(),rec,airpos);
        if (pos == null)         ++err_pos_cnt;
 else {
          if (pos.isReasonable()) {
            Coordinate coord=new Coordinate(pos.getLongitude(),pos.getLatitude(),pos.getAltitude() != null && pos.getAltitude() > 0 ? pos.getAltitude() : 0);
            if (!flight.coords.contains(coord)) {
              flight.coords.add(coord);
              ++good_pos_cnt;
            }
          }
 else {
            flight.contains_unreasonable=true;
            ++bad_pos_cnt;
          }
        }
      }
 else       if (msg instanceof SurfacePositionMsg) {
        surfacepos=(SurfacePositionMsg)msg;
        Position rec=record.getSensorLatitude() != null ? new Position(record.getSensorLongitude(),record.getSensorLatitude(),record.getSensorAltitude()) : null;
        Position pos=flight.dec.decodePosition(record.getTimeAtServer(),rec,surfacepos);
        if (pos == null)         ++err_pos_cnt;
 else {
          if (pos.isReasonable()) {
            Coordinate coord=new Coordinate(pos.getLongitude(),pos.getLatitude(),0);
            if (!flight.coords.contains(coord)) {
              flight.coords.add(coord);
              ++good_pos_cnt;
            }
          }
 else {
            flight.contains_unreasonable=true;
            ++bad_pos_cnt;
          }
        }
      }
 else       if (msg instanceof IdentificationMsg) {
        ident=(IdentificationMsg)msg;
        flight.callsign=ident.getIdentity();
      }
    }
    for (    String key : flights.keySet()) {
      kml.addFlight(flights.get(key));
      if (filter_max != null && kml.getNumberOfFlights() >= filter_max)       break;
    }
    fileReader.close();
    kml.writeToFile(kmlfile);
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    System.exit(1);
  }
catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    System.exit(1);
  }
  System.err.println(""String_Node_Str"" + msgCount + ""String_Node_Str"");
  System.err.println(""String_Node_Str"" + good_pos_cnt);
  System.err.println(""String_Node_Str"" + bad_pos_cnt);
  System.err.println(""String_Node_Str"" + err_pos_cnt);
  System.err.println(""String_Node_Str"" + flights_cnt);
}"
40858,"public static void main(String[] args){
  long start_time=System.currentTimeMillis();
  Options opts=new Options();
  opts.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  CommandLineParser parser=new DefaultParser();
  CommandLine cmd;
  File avro=null;
  String file=null;
  try {
    cmd=parser.parse(opts,args);
    if (cmd.getArgList().size() != 1)     throw new ParseException(""String_Node_Str"");
    file=cmd.getArgList().get(0);
    if (cmd.hasOption(""String_Node_Str"")) {
      printHelp(opts);
      System.exit(0);
    }
  }
 catch (  ParseException e) {
    System.err.println(e.getMessage() + ""String_Node_Str"");
    printHelp(opts);
    System.exit(1);
  }
  try {
    avro=new File(file);
    if (!avro.exists() || avro.isDirectory()) {
      throw new FileNotFoundException(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + avro.getCanonicalPath());
    System.out.println(""String_Node_Str"" + avro.length() / Math.pow(1024,2) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + avro.canRead());
    System.out.println(""String_Node_Str"" + new Date(avro.lastModified()).toString());
  }
 catch (  FileNotFoundException e) {
    System.err.println(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
    e.printStackTrace();
    System.exit(1);
  }
catch (  IOException e) {
    e.printStackTrace();
    System.exit(1);
  }
  DatumReader<ModeSEncodedMessage> datumReader=new SpecificDatumReader<ModeSEncodedMessage>(ModeSEncodedMessage.class);
  long msgCount=0;
  try {
    DataFileReader<ModeSEncodedMessage> fileReader=new DataFileReader<ModeSEncodedMessage>(avro,datumReader);
    Schema schema=fileReader.getSchema();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + schema.getType());
    System.out.println(""String_Node_Str"" + schema.getName());
    System.out.println(""String_Node_Str"" + schema.getNamespace());
    System.out.println(""String_Node_Str"" + schema.getFields().size() + ""String_Node_Str"");
    for (    Field field : schema.getFields())     System.out.println(""String_Node_Str"" + field);
    System.out.print(""String_Node_Str"");
    ModeSEncodedMessage record=new ModeSEncodedMessage();
    double min_time=Double.MAX_VALUE, max_time=Double.MIN_VALUE;
    HashMap<Integer,Long> sensors=new HashMap<Integer,Long>();
    int serial;
    Long serial_cnt;
    while (fileReader.hasNext()) {
      record=fileReader.next(record);
      msgCount++;
      if (record.getTimeAtServer() < min_time)       min_time=record.getTimeAtServer();
      if (record.getTimeAtServer() > max_time)       max_time=record.getTimeAtServer();
      serial=record.getSensorSerialNumber();
      serial_cnt=sensors.get(serial);
      sensors.put(serial,serial_cnt != null ? serial_cnt + 1 : 0L);
    }
    System.out.println(msgCount);
    System.out.println(""String_Node_Str"" + new Date((long)(min_time * 1000)).toString());
    System.out.println(""String_Node_Str"" + new Date((long)(max_time * 1000)).toString());
    System.out.println(""String_Node_Str"");
    for (    int key : sensors.keySet())     System.out.println(""String_Node_Str"" + key + ""String_Node_Str""+ sensors.get(key));
    fileReader.close();
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    System.exit(1);
  }
catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    System.exit(1);
  }
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - start_time) / 1000.0 + ""String_Node_Str"");
}","public static void main(String[] args){
  long start_time=System.currentTimeMillis();
  Options opts=new Options();
  opts.addOption(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
  CommandLineParser parser=new DefaultParser();
  CommandLine cmd;
  File avro=null;
  String file=null;
  try {
    cmd=parser.parse(opts,args);
    if (cmd.hasOption(""String_Node_Str"")) {
      printHelp(opts);
      System.exit(0);
    }
    if (cmd.getArgList().size() != 1)     throw new ParseException(""String_Node_Str"");
    file=cmd.getArgList().get(0);
  }
 catch (  ParseException e) {
    System.err.println(e.getMessage() + ""String_Node_Str"");
    printHelp(opts);
    System.exit(1);
  }
  try {
    avro=new File(file);
    if (!avro.exists() || avro.isDirectory()) {
      throw new FileNotFoundException(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + avro.getCanonicalPath());
    System.out.println(""String_Node_Str"" + avro.length() / Math.pow(1024,2) + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + avro.canRead());
    System.out.println(""String_Node_Str"" + new Date(avro.lastModified()).toString());
  }
 catch (  FileNotFoundException e) {
    System.err.println(""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
    e.printStackTrace();
    System.exit(1);
  }
catch (  IOException e) {
    e.printStackTrace();
    System.exit(1);
  }
  DatumReader<ModeSEncodedMessage> datumReader=new SpecificDatumReader<ModeSEncodedMessage>(ModeSEncodedMessage.class);
  long msgCount=0;
  try {
    DataFileReader<ModeSEncodedMessage> fileReader=new DataFileReader<ModeSEncodedMessage>(avro,datumReader);
    Schema schema=fileReader.getSchema();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + schema.getType());
    System.out.println(""String_Node_Str"" + schema.getName());
    System.out.println(""String_Node_Str"" + schema.getNamespace());
    System.out.println(""String_Node_Str"" + schema.getFields().size() + ""String_Node_Str"");
    for (    Field field : schema.getFields())     System.out.println(""String_Node_Str"" + field);
    System.out.print(""String_Node_Str"");
    ModeSEncodedMessage record=new ModeSEncodedMessage();
    double min_time=Double.MAX_VALUE, max_time=Double.MIN_VALUE;
    HashMap<Integer,Long> sensors=new HashMap<Integer,Long>();
    int serial;
    Long serial_cnt;
    while (fileReader.hasNext()) {
      record=fileReader.next(record);
      msgCount++;
      if (record.getTimeAtServer() < min_time)       min_time=record.getTimeAtServer();
      if (record.getTimeAtServer() > max_time)       max_time=record.getTimeAtServer();
      serial=record.getSensorSerialNumber();
      serial_cnt=sensors.get(serial);
      sensors.put(serial,serial_cnt != null ? serial_cnt + 1 : 0L);
    }
    System.out.println(msgCount);
    System.out.println(""String_Node_Str"" + new Date((long)(min_time * 1000)).toString());
    System.out.println(""String_Node_Str"" + new Date((long)(max_time * 1000)).toString());
    System.out.println(""String_Node_Str"");
    for (    int key : sensors.keySet())     System.out.println(""String_Node_Str"" + key + ""String_Node_Str""+ sensors.get(key));
    fileReader.close();
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    System.exit(1);
  }
catch (  Exception e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    System.exit(1);
  }
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - start_time) / 1000.0 + ""String_Node_Str"");
}"
40859,"/** 
 * @return the decription of the emitter's category according tothe ADS-B message format specification
 */
public String getCategoryDescription(){
  String[][] categories={{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}};
  return categories[4 - getFormatTypeCode()][emitter_category];
}","/** 
 * @return the decription of the emitter's category according tothe ADS-B message format specification
 */
public String getCategoryDescription(){
  String[][] categories={{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}};
  return categories[4 - getFormatTypeCode()][emitter_category];
}"
40860,"public String toString(){
  String retstr;
  if (subtype_code == 0) {
    retstr=""String_Node_Str"";
    retstr+=""String_Node_Str"";
    try {
      retstr+=(hasOperationalTCAS() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
    }
 catch (    MissingInformationException e) {
      retstr+=""String_Node_Str"";
    }
    retstr+=""String_Node_Str"";
    try {
      retstr+=(supportsAirReferencedVelocity() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
    }
 catch (    MissingInformationException e) {
      retstr+=""String_Node_Str"";
    }
    retstr+=""String_Node_Str"";
    try {
      retstr+=(supportsTargetStateReport() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
    }
 catch (    MissingInformationException e) {
      retstr+=""String_Node_Str"";
    }
    retstr+=""String_Node_Str"";
    try {
      retstr+=(supportsTargetChangeReport() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
    }
 catch (    MissingInformationException e) {
      retstr+=""String_Node_Str"";
    }
    retstr+=""String_Node_Str"";
    try {
      retstr+=(getBarometricAltitudeIntegrityCode() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
    }
 catch (    MissingInformationException e) {
      retstr+=""String_Node_Str"";
    }
  }
 else   if (subtype_code == 1) {
    retstr=""String_Node_Str"";
    retstr+=""String_Node_Str"";
    try {
      retstr+=(hasLowTxPower() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
    }
 catch (    MissingInformationException e) {
      retstr+=""String_Node_Str"";
    }
    retstr+=""String_Node_Str"";
    try {
      retstr+=getNACV() + ""String_Node_Str"";
    }
 catch (    MissingInformationException e) {
      retstr+=""String_Node_Str"";
    }
    retstr+=""String_Node_Str"";
    try {
      retstr+=getGPSAntennaOffset() + ""String_Node_Str"";
    }
 catch (    MissingInformationException e) {
      retstr+=""String_Node_Str"";
    }
    retstr+=""String_Node_Str"";
    try {
      retstr+=getAirplaneLength() + ""String_Node_Str"" + getAirplaneWidth()+ ""String_Node_Str"";
    }
 catch (    MissingInformationException e) {
      retstr+=""String_Node_Str"";
    }
    retstr+=""String_Node_Str"";
    try {
      retstr+=(hasLowTxPower() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
    }
 catch (    MissingInformationException e) {
      retstr+=""String_Node_Str"";
    }
  }
 else   return super.toString() + ""String_Node_Str"";
  retstr+=""String_Node_Str"";
  try {
    retstr+=(has1090ESIn() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
  }
 catch (  MissingInformationException e) {
    retstr+=""String_Node_Str"";
  }
  retstr+=""String_Node_Str"";
  try {
    retstr+=(hasUATIn() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
  }
 catch (  MissingInformationException e) {
    retstr+=""String_Node_Str"";
  }
  retstr+=""String_Node_Str"";
  try {
    retstr+=(hasTCASResolutionAdvisory() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
  }
 catch (  MissingInformationException e) {
    retstr+=""String_Node_Str"";
  }
  retstr+=""String_Node_Str"";
  try {
    retstr+=(hasActiveIDENTSwitch() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
  }
 catch (  MissingInformationException e) {
    retstr+=""String_Node_Str"";
  }
  retstr+=""String_Node_Str"";
  try {
    retstr+=(usesSingleAntenna() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
  }
 catch (  MissingInformationException e) {
    retstr+=""String_Node_Str"";
  }
  retstr+=""String_Node_Str"";
  try {
    retstr+=getSystemDesignAssurance() + ""String_Node_Str"";
  }
 catch (  MissingInformationException e) {
    retstr+=""String_Node_Str"";
  }
  retstr+=""String_Node_Str"" + getVersion() + ""String_Node_Str"";
  retstr+=""String_Node_Str"";
  try {
    retstr+=(usesSingleAntenna() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
  }
 catch (  MissingInformationException e) {
    retstr+=""String_Node_Str"";
  }
  retstr+=""String_Node_Str"" + getPositionNAC() + ""String_Node_Str"";
  retstr+=""String_Node_Str"" + getGeometricVerticalAccuracy() + ""String_Node_Str"";
  retstr+=""String_Node_Str"" + getSourceIntegrityLevel() + ""String_Node_Str"";
  retstr+=""String_Node_Str"" + getHorizontalReferenceDirection();
  return super.toString() + ""String_Node_Str"" + retstr;
}","public String toString(){
  String retstr;
  if (subtype_code == 0) {
    retstr=""String_Node_Str"";
    retstr+=""String_Node_Str"";
    try {
      retstr+=(hasOperationalTCAS() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
    }
 catch (    MissingInformationException e) {
      retstr+=""String_Node_Str"";
    }
    retstr+=""String_Node_Str"";
    try {
      retstr+=(supportsAirReferencedVelocity() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
    }
 catch (    MissingInformationException e) {
      retstr+=""String_Node_Str"";
    }
    retstr+=""String_Node_Str"";
    try {
      retstr+=(supportsTargetStateReport() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
    }
 catch (    MissingInformationException e) {
      retstr+=""String_Node_Str"";
    }
    retstr+=""String_Node_Str"";
    try {
      retstr+=(supportsTargetChangeReport() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
    }
 catch (    MissingInformationException e) {
      retstr+=""String_Node_Str"";
    }
    retstr+=""String_Node_Str"";
    try {
      retstr+=(getBarometricAltitudeIntegrityCode() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
    }
 catch (    MissingInformationException e) {
      retstr+=""String_Node_Str"";
    }
  }
 else   if (subtype_code == 1) {
    retstr=""String_Node_Str"";
    retstr+=""String_Node_Str"";
    try {
      retstr+=(hasLowTxPower() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
    }
 catch (    MissingInformationException e) {
      retstr+=""String_Node_Str"";
    }
    retstr+=""String_Node_Str"";
    try {
      retstr+=getNACV() + ""String_Node_Str"";
    }
 catch (    MissingInformationException e) {
      retstr+=""String_Node_Str"";
    }
    retstr+=""String_Node_Str"";
    try {
      retstr+=getGPSAntennaOffset() + ""String_Node_Str"";
    }
 catch (    MissingInformationException e) {
      retstr+=""String_Node_Str"";
    }
    retstr+=""String_Node_Str"";
    try {
      retstr+=getAirplaneLength() + ""String_Node_Str"" + getAirplaneWidth()+ ""String_Node_Str"";
    }
 catch (    MissingInformationException e) {
      retstr+=""String_Node_Str"";
    }
    retstr+=""String_Node_Str"";
    try {
      retstr+=(hasLowTxPower() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
    }
 catch (    MissingInformationException e) {
      retstr+=""String_Node_Str"";
    }
  }
 else   return super.toString() + ""String_Node_Str"";
  retstr+=""String_Node_Str"";
  try {
    retstr+=(has1090ESIn() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
  }
 catch (  MissingInformationException e) {
    retstr+=""String_Node_Str"";
  }
  retstr+=""String_Node_Str"";
  try {
    retstr+=(hasUATIn() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
  }
 catch (  MissingInformationException e) {
    retstr+=""String_Node_Str"";
  }
  retstr+=""String_Node_Str"";
  try {
    retstr+=(hasTCASResolutionAdvisory() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
  }
 catch (  MissingInformationException e) {
    retstr+=""String_Node_Str"";
  }
  retstr+=""String_Node_Str"";
  try {
    retstr+=(hasActiveIDENTSwitch() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
  }
 catch (  MissingInformationException e) {
    retstr+=""String_Node_Str"";
  }
  retstr+=""String_Node_Str"";
  try {
    retstr+=(usesSingleAntenna() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
  }
 catch (  MissingInformationException e) {
    retstr+=""String_Node_Str"";
  }
  retstr+=""String_Node_Str"";
  try {
    retstr+=getSystemDesignAssurance() + ""String_Node_Str"";
  }
 catch (  MissingInformationException e) {
    retstr+=""String_Node_Str"";
  }
  retstr+=""String_Node_Str"" + getVersion() + ""String_Node_Str"";
  retstr+=""String_Node_Str"";
  retstr+=(getNICSupplementA() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
  retstr+=""String_Node_Str"" + getPositionNAC() + ""String_Node_Str"";
  retstr+=""String_Node_Str"" + getGeometricVerticalAccuracy() + ""String_Node_Str"";
  retstr+=""String_Node_Str"" + getSourceIntegrityLevel() + ""String_Node_Str"";
  retstr+=""String_Node_Str"" + getHorizontalReferenceDirection();
  return super.toString() + ""String_Node_Str"" + retstr;
}"
40861,"private final int[] decode(final GifFrame fr,final int[] activeColTbl){
  final CodeTable codes=new CodeTable(fr,activeColTbl);
  in.init(fr.data);
  final int clearCode=fr.clearCode, endCode=fr.endOfInfoCode;
  final int numPixels=fr.width * fr.height;
  final int[] out=new int[numPixels];
  final int[][] tbl=codes.tbl;
  int pixelPos=0;
  int currCodeSize=codes.clear();
  in.read(currCodeSize);
  int code=in.read(currCodeSize);
  int[] pixels=tbl[code];
  System.arraycopy(pixels,0,out,pixelPos,pixels.length);
  pixelPos+=pixels.length;
  while (pixelPos < numPixels) {
    final int prevCode=code;
    try {
      code=in.read(currCodeSize);
    }
 catch (    final ArrayIndexOutOfBoundsException e) {
      break;
    }
    if (code == clearCode) {
      currCodeSize=codes.clear();
      code=in.read(currCodeSize);
      pixels=tbl[code];
      System.arraycopy(pixels,0,out,pixelPos,pixels.length);
      pixelPos+=pixels.length;
      continue;
    }
 else     if (code == endCode) {
      break;
    }
    final int[] prevVals=tbl[prevCode];
    final int[] prevValsAndK=new int[prevVals.length + 1];
    System.arraycopy(prevVals,0,prevValsAndK,0,prevVals.length);
    if (code < codes.nextCode) {
      pixels=tbl[code];
      System.arraycopy(pixels,0,out,pixelPos,pixels.length);
      pixelPos+=pixels.length;
      prevValsAndK[prevVals.length]=tbl[code][0];
    }
 else {
      prevValsAndK[prevVals.length]=prevVals[0];
      System.arraycopy(prevValsAndK,0,out,pixelPos,prevValsAndK.length);
      pixelPos+=prevValsAndK.length;
    }
    currCodeSize=codes.add(prevValsAndK);
  }
  return out;
}","private final int[] decode(final GifFrame fr,final int[] activeColTbl){
  final CodeTable codes=codeTable;
  codes.init(fr,activeColTbl);
  in.init(fr.data);
  final int clearCode=fr.clearCode, endCode=fr.endOfInfoCode;
  final int numPixels=fr.width * fr.height;
  final int[] out=new int[numPixels];
  final int[][] tbl=codes.tbl;
  int pixelPos=0;
  int currCodeSize=codes.clear();
  in.read(currCodeSize);
  int code=in.read(currCodeSize);
  int[] pixels=tbl[code];
  System.arraycopy(pixels,0,out,pixelPos,pixels.length);
  pixelPos+=pixels.length;
  while (pixelPos < numPixels) {
    final int prevCode=code;
    try {
      code=in.read(currCodeSize);
    }
 catch (    final ArrayIndexOutOfBoundsException e) {
      break;
    }
    if (code == clearCode) {
      currCodeSize=codes.clear();
      code=in.read(currCodeSize);
      pixels=tbl[code];
      System.arraycopy(pixels,0,out,pixelPos,pixels.length);
      pixelPos+=pixels.length;
      continue;
    }
 else     if (code == endCode) {
      break;
    }
    final int[] prevVals=tbl[prevCode];
    final int[] prevValsAndK=new int[prevVals.length + 1];
    System.arraycopy(prevVals,0,prevValsAndK,0,prevVals.length);
    if (code < codes.nextCode) {
      pixels=tbl[code];
      System.arraycopy(pixels,0,out,pixelPos,pixels.length);
      pixelPos+=pixels.length;
      prevValsAndK[prevVals.length]=tbl[code][0];
    }
 else {
      prevValsAndK[prevVals.length]=prevVals[0];
      System.arraycopy(prevValsAndK,0,out,pixelPos,prevValsAndK.length);
      pixelPos+=prevValsAndK.length;
    }
    currCodeSize=codes.add(prevValsAndK);
  }
  return out;
}"
40862,"/** 
 * @param in Raw data
 * @param img The GifImage object that is currently read
 * @return Index of the first byte after this block
 * @throws ParseException If the GIF header/trailer is missing, incomplete or unknown
 */
static final int readHeader(final byte[] in,final GifImage img) throws ParseException {
  if (in.length < 6) {
    throw new ParseException(""String_Node_Str"",0);
  }
  img.header=new String(in,0,6);
  if (!img.header.equals(""String_Node_Str"") && !img.header.equals(""String_Node_Str"")) {
    throw new ParseException(""String_Node_Str"",0);
  }
  return 6;
}","/** 
 * @param in Raw data
 * @param img The GifImage object that is currently read
 * @return Index of the first byte after this block
 * @throws IOException If the GIF header/trailer is missing, incomplete or unknown
 */
static final int readHeader(final byte[] in,final GifImage img) throws IOException {
  if (in.length < 6) {
    throw new IOException(""String_Node_Str"");
  }
  img.header=new String(in,0,6);
  if (!img.header.equals(""String_Node_Str"") && !img.header.equals(""String_Node_Str"")) {
    throw new IOException(""String_Node_Str"");
  }
  return 6;
}"
40863,"private final void drawFrame(final GifFrame fr){
  int bgCol=0;
  final int[] activeColTbl;
  if (fr.hasLocColTbl) {
    activeColTbl=fr.localColTbl;
  }
 else {
    activeColTbl=globalColTbl;
    if (!fr.transpColFlag) {
      bgCol=globalColTbl[bgColIndex];
    }
  }
  if (prevDisposal <= 1) {
    setPixels(getPixels(img),prevImg);
  }
 else   if (prevDisposal == 2) {
    prevImg=img;
    img=new BufferedImage(width,height,img.getType());
    final int[] px=getPixels(img);
    Arrays.fill(px,bgCol);
  }
 else   if (prevDisposal == 3) {
    setPixels(getPixels(prevImg),img);
  }
  int[] pixels=decode(fr,activeColTbl);
  if (fr.interlaceFlag) {
    pixels=deinterlace(pixels,fr);
  }
  final int w=fr.width, h=fr.height;
  final BufferedImage layer=new BufferedImage(w,h,img.getType());
  setPixels(pixels,layer);
  final Graphics2D g=img.createGraphics();
  g.drawImage(layer,fr.left,fr.top,null);
  g.dispose();
}","private final void drawFrame(final GifFrame fr){
  int bgCol=0;
  final int[] activeColTbl;
  if (fr.hasLocColTbl) {
    activeColTbl=fr.localColTbl;
  }
 else {
    activeColTbl=globalColTbl;
    if (!fr.transpColFlag) {
      bgCol=globalColTbl[bgColIndex];
    }
  }
switch (prevDisposal) {
case 0:
    setPixels(getPixels(img),prevImg);
  break;
case 1:
setPixels(getPixels(img),prevImg);
break;
case 2:
final BufferedImage bgImage=prevImg;
final int[] px=getPixels(bgImage);
Arrays.fill(px,bgCol);
prevImg=img;
img=bgImage;
break;
case 3:
setPixels(getPixels(prevImg),img);
break;
default :
setPixels(getPixels(img),prevImg);
break;
}
int[] pixels=decode(fr,activeColTbl);
if (fr.interlaceFlag) {
pixels=deinterlace(pixels,fr);
}
final int w=fr.width, h=fr.height;
final BufferedImage layer=new BufferedImage(w,h,img.getType());
setPixels(pixels,layer);
final Graphics2D g=img.createGraphics();
g.drawImage(layer,fr.left,fr.top,null);
g.dispose();
}"
40864,"CodeTable(final GifFrame fr,final int[] activeColTbl){
  final int numColors=activeColTbl.length;
  initCodeSize=fr.firstCodeSize;
  initCodeLimit=MASK[initCodeSize];
  initTableSize=fr.endOfInfoCode + 1;
  nextCode=initTableSize;
  tbl=new int[4096][];
  for (int c=0; c < numColors; c++) {
    tbl[c]=new int[]{activeColTbl[c]};
  }
  tbl[fr.clearCode]=new int[]{fr.clearCode};
  tbl[fr.endOfInfoCode]=new int[]{fr.endOfInfoCode};
  if (fr.transpColFlag && fr.transpColIndex < numColors) {
    tbl[fr.transpColIndex][0]=0;
  }
}","public CodeTable(){
  tbl=new int[4096][];
  for (int i=0; i < 256; i++) {
    tbl[i]=new int[1];
  }
}"
40865,"private final void init(final byte[] in){
  this.in=in;
  bitPos=0;
}","private final void init(final GifFrame fr,final int[] activeColTbl){
  final int numColors=activeColTbl.length;
  initCodeSize=fr.firstCodeSize;
  initCodeLimit=MASK[initCodeSize];
  initTableSize=fr.endOfInfoCode + 1;
  nextCode=initTableSize;
  for (int c=0; c < numColors; c++) {
    tbl[c][0]=activeColTbl[c];
  }
  tbl[fr.clearCode]=new int[]{fr.clearCode};
  tbl[fr.endOfInfoCode]=new int[]{fr.endOfInfoCode};
  if (fr.transpColFlag && fr.transpColIndex < numColors) {
    tbl[fr.transpColIndex][0]=0;
  }
}"
40866,"/** 
 * @param is Image data as input stream. This method will read from the input stream's current position. It will not reset the position before reading and won't reset or close the stream afterwards. Call these methods before and after calling this method as needed.
 * @return A GifImage object exposing the properties of the GIF image.
 * @throws ParseException If the image violates the GIF specification or is truncated.
 * @throws IOException
 */
public static final GifImage read(final InputStream is) throws ParseException, IOException {
  final int numBytes=is.available();
  final byte[] data=new byte[numBytes];
  is.read(data,0,numBytes);
  return read(data);
}","/** 
 * @param is Image data as input stream. This method will read from the input stream's current position. It will not reset the position before reading and won't reset or close the stream afterwards. Call these methods before and after calling this method as needed.
 * @return A GifImage object exposing the properties of the GIF image.
 * @throws IOException If an I/O error occurs, the image violates the GIF specification or the GIF is truncated.
 */
public static final GifImage read(final InputStream is) throws IOException {
  final int numBytes=is.available();
  final byte[] data=new byte[numBytes];
  is.read(data,0,numBytes);
  return read(data);
}"
40867,"/** 
 * @param fr The GIF frame to whom this image descriptor belongs
 * @param in Raw data
 * @param i Index of the first byte of this block, i.e. the minCodeSize
 * @return
 */
static final int readImgData(final GifFrame fr,final byte[] in,int i){
  final int fileSize=in.length;
  fr.minCodeSize=in[i++] & 0xFF;
  fr.firstCodeSize=fr.minCodeSize + 1;
  fr.clearCode=1 << fr.minCodeSize;
  fr.endOfInfoCode=fr.clearCode + 1;
  final int imgDataSize=readImgDataSize(in,i);
  final byte[] imgData=new byte[imgDataSize + 2];
  int imgDataPos=0;
  int subBlockSize=in[i] & 0xFF;
  while (subBlockSize > 0) {
    try {
      final int nextSubBlockSize=in[i + subBlockSize + 1] & 0xFF;
      System.arraycopy(in,i + 1,imgData,imgDataPos,subBlockSize);
      imgDataPos+=subBlockSize;
      i+=subBlockSize + 1;
      subBlockSize=nextSubBlockSize;
    }
 catch (    final Exception e) {
      subBlockSize=fileSize - i - 1;
      System.arraycopy(in,i + 1,imgData,imgDataPos,subBlockSize);
      imgDataPos+=subBlockSize;
      i+=subBlockSize + 1;
      break;
    }
  }
  fr.data=imgData;
  i++;
  return i;
}","/** 
 * @param fr The GIF frame to whom this image descriptor belongs
 * @param in Raw data
 * @param i Index of the first byte of this block, i.e. the minCodeSize
 * @return
 */
static final int readImgData(final GifFrame fr,final byte[] in,int i){
  final int fileSize=in.length;
  final int minCodeSize=in[i++] & 0xFF;
  final int clearCode=1 << minCodeSize;
  fr.firstCodeSize=minCodeSize + 1;
  fr.clearCode=clearCode;
  fr.endOfInfoCode=clearCode + 1;
  final int imgDataSize=readImgDataSize(in,i);
  final byte[] imgData=new byte[imgDataSize + 2];
  int imgDataPos=0;
  int subBlockSize=in[i] & 0xFF;
  while (subBlockSize > 0) {
    try {
      final int nextSubBlockSizePos=i + subBlockSize + 1;
      final int nextSubBlockSize=in[nextSubBlockSizePos] & 0xFF;
      System.arraycopy(in,i + 1,imgData,imgDataPos,subBlockSize);
      imgDataPos+=subBlockSize;
      i=nextSubBlockSizePos;
      subBlockSize=nextSubBlockSize;
    }
 catch (    final Exception e) {
      subBlockSize=fileSize - i - 1;
      System.arraycopy(in,i + 1,imgData,imgDataPos,subBlockSize);
      imgDataPos+=subBlockSize;
      i+=subBlockSize + 1;
      break;
    }
  }
  fr.data=imgData;
  i++;
  return i;
}"
40868,"static final int readImgDataSize(final byte[] in,int i){
  final int fileSize=in.length;
  int imgDataPos=0;
  int subBlockSize=in[i] & 0xFF;
  while (subBlockSize > 0) {
    try {
      final int nextSubBlockSize=in[i + subBlockSize + 1] & 0xFF;
      imgDataPos+=subBlockSize;
      i+=subBlockSize + 1;
      subBlockSize=nextSubBlockSize;
    }
 catch (    final Exception e) {
      subBlockSize=fileSize - i - 1;
      imgDataPos+=subBlockSize;
      i+=subBlockSize + 1;
      break;
    }
  }
  return imgDataPos;
}","static final int readImgDataSize(final byte[] in,int i){
  final int fileSize=in.length;
  int imgDataPos=0;
  int subBlockSize=in[i] & 0xFF;
  while (subBlockSize > 0) {
    try {
      final int nextSubBlockSizePos=i + subBlockSize + 1;
      final int nextSubBlockSize=in[nextSubBlockSizePos] & 0xFF;
      imgDataPos+=subBlockSize;
      i=nextSubBlockSizePos;
      subBlockSize=nextSubBlockSize;
    }
 catch (    final Exception e) {
      subBlockSize=fileSize - i - 1;
      imgDataPos+=subBlockSize;
      break;
    }
  }
  return imgDataPos;
}"
40869,"@Override protected void doStop(){
  fiber.execute(() -> {
    final AtomicInteger countDown=new AtomicInteger(1);
    GenericFutureListener<? extends Future<? super Void>> listener=future -> {
      if (countDown.decrementAndGet() == 0) {
        notifyStopped();
      }
    }
;
    if (listenChannel != null) {
      countDown.incrementAndGet();
      listenChannel.close().addListener(listener);
    }
    allChannels.close().addListener(listener);
    replicatorInstances.values().forEach(ReplicatorInstance::dispose);
    replicatorInstances.clear();
    fiber.dispose();
    fiber=null;
  }
);
}","@Override protected void doStop(){
  fiber.execute(() -> {
    final AtomicInteger countDown=new AtomicInteger(1);
    GenericFutureListener<? extends Future<? super Void>> listener=future -> {
      if (countDown.decrementAndGet() == 0) {
        fiber.dispose();
        fiber=null;
        notifyStopped();
      }
    }
;
    if (listenChannel != null) {
      countDown.incrementAndGet();
      listenChannel.close().addListener(listener);
    }
    allChannels.close().addListener(listener);
    replicatorInstances.values().forEach(ReplicatorInstance::dispose);
    replicatorInstances.clear();
  }
);
}"
40870,"public QuorumConfiguration getTransitionalConfiguration(Collection<Long> newPeerCollection){
}","public QuorumConfiguration getTransitionalConfiguration(Collection<Long> newPeerCollection){
  if (isTransitional) {
    return new QuorumConfiguration(prevPeers,newPeerCollection);
  }
 else {
    return new QuorumConfiguration(allPeers,newPeerCollection);
  }
}"
40871,"@Test public void aQuorumChangeCanCompleteEvenIfARemovedPeerTimesOutDuringIt() throws Exception {
  final Set<Long> newPeerIds=smallerPeerSetWithNoneInCommonWithInitialSet();
  final QuorumConfiguration transitionalConfig=QuorumConfiguration.of(initialPeerSet()).getTransitionalConfiguration(newPeerIds);
  final QuorumConfiguration finalConfig=transitionalConfig.getCompletedConfiguration();
  havingElectedALeaderAtOrAfter(term(1));
  final long firstLeaderTerm=currentTerm();
  final long leaderId=currentLeader();
  dropAllAppendsWithThisConfigurationUntilAPreElectionPollTakesPlace(finalConfig);
  leader().changeQuorum(newPeerIds);
  sim.createAndStartReplicators(newPeerIds);
  allPeersExceptLeader((peer) -> assertThat(leader(),willSend(anAppendRequest().containingQuorumConfig(transitionalConfig).to(peer.id))));
  peers(newPeerIds).forEach((peer) -> assertThat(peer,willCommitConfiguration(transitionalConfig)));
  peersBeingRemoved(transitionalConfig).forEach(PeerController::allowToTimeout);
  waitForAnElectionTimeout();
  peersBeingRemoved(transitionalConfig).forEach((peer) -> {
    if (peer.id != leaderId) {
      assertThat(peer,willSend(aPreElectionPoll()));
    }
  }
);
  waitForALeaderWithId(isIn(newPeerIds));
  peers(newPeerIds).forEach((peer) -> assertThat(peer,willCommitConfiguration(finalConfig)));
  peersBeingRemoved(transitionalConfig).forEach((peer) -> assertThat(peer,not(wonAnElectionWithTerm(greaterThan(firstLeaderTerm)))));
}","@Test public void aQuorumChangeCanCompleteEvenIfARemovedPeerTimesOutDuringIt() throws Exception {
  final Set<Long> newPeerIds=smallerPeerSetWithNoneInCommonWithInitialSet();
  final QuorumConfiguration transitionalConfig=QuorumConfiguration.of(initialPeerSet()).getTransitionalConfiguration(newPeerIds);
  final QuorumConfiguration finalConfig=transitionalConfig.getCompletedConfiguration();
  havingElectedALeaderAtOrAfter(term(1));
  final long firstLeaderTerm=currentTerm();
  final long leaderId=currentLeader();
  dropAllAppendsWithThisConfigurationUntilAPreElectionPollTakesPlace(finalConfig);
  leader().changeQuorum(newPeerIds);
  sim.createAndStartReplicators(newPeerIds);
  allPeersExceptLeader((peer) -> assertThat(leader(),willSend(anAppendRequest().containingQuorumConfig(transitionalConfig).to(peer.id))));
  peers(newPeerIds).forEach((peer) -> assertThat(peer,willCommitConfiguration(transitionalConfig)));
  peersBeingRemoved(transitionalConfig).forEach(PeerController::allowToTimeout);
  waitForAnElectionTimeout();
  peersBeingRemoved(transitionalConfig).forEach((peer) -> {
    if (peer.id != leaderId) {
      assertThat(peer,willSend(aPreElectionPoll()));
    }
  }
);
  waitForALeaderWithId(isIn(newPeerIds));
  leader().log(someData());
  peers(newPeerIds).forEach((peer) -> assertThat(peer,willCommitConfiguration(finalConfig)));
  peersBeingRemoved(transitionalConfig).forEach((peer) -> assertThat(peer,not(wonAnElectionWithTerm(greaterThan(firstLeaderTerm)))));
}"
40872,"@Test public void aSecondQuorumChangeWillOverrideTheFirst() throws Exception {
  final Set<Long> firstPeerSet=smallerPeerSetWithOneInCommonWithInitialSet();
  final Set<Long> secondPeerSet=largerPeerSetWithSomeInCommonWithInitialSet();
  havingElectedALeaderAtOrAfter(term(1));
  leader().changeQuorum(firstPeerSet);
  sim.createAndStartReplicators(firstPeerSet);
  leader().changeQuorum(secondPeerSet);
  sim.createAndStartReplicators(secondPeerSet);
  peers(secondPeerSet).forEach((peer) -> assertThat(peer,willCommitConfiguration(QuorumConfiguration.of(secondPeerSet))));
  waitForALeaderWithId(isIn(secondPeerSet));
}","@Test public void aSecondQuorumChangeWillOverrideTheFirst() throws Exception {
  final Set<Long> firstPeerSet=smallerPeerSetWithOneInCommonWithInitialSet();
  final Set<Long> secondPeerSet=largerPeerSetWithSomeInCommonWithInitialSet();
  havingElectedALeaderAtOrAfter(term(1));
  leader().changeQuorum(firstPeerSet);
  sim.createAndStartReplicators(firstPeerSet);
  leader().changeQuorum(secondPeerSet);
  sim.createAndStartReplicators(secondPeerSet);
  waitForALeaderWithId(isIn(secondPeerSet));
  leader().log(someData());
  peers(secondPeerSet).forEach((peer) -> assertThat(peer,willCommitConfiguration(QuorumConfiguration.of(secondPeerSet))));
}"
40873,"public boolean hasAny(Matcher<? super T> matcher){
  for (  T element : messageLog) {
    if (matcher.matches(element)) {
      return true;
    }
  }
  return false;
}","public boolean hasAny(Matcher<? super T> matcher){
synchronized (messageLog) {
    for (    T element : messageLog) {
      if (matcher.matches(element)) {
        return true;
      }
    }
  }
  return false;
}"
40874,"private ListenableFuture<T> future(Matcher<? super T> matcher){
  SettableFuture<T> finished=SettableFuture.create();
  fiber.execute(() -> {
    for (    T element : messageLog) {
      if (matcher.matches(element)) {
        finished.set(element);
        return;
      }
    }
    waitingToMatch.put(matcher,finished);
  }
);
  return finished;
}","private ListenableFuture<T> future(Matcher<? super T> matcher){
  SettableFuture<T> finished=SettableFuture.create();
  fiber.execute(() -> {
synchronized (messageLog) {
      for (      T element : messageLog) {
        if (matcher.matches(element)) {
          finished.set(element);
          return;
        }
      }
    }
    waitingToMatch.put(matcher,finished);
  }
);
  return finished;
}"
40875,"private void calculateLastVisible(long majority,long lastIndexSent){
  if (lastIndexSent == lastCommittedIndex) {
    return;
  }
  HashMap<Long,Integer> bucket=new HashMap<>();
  for (  long lastAcked : peersLastAckedIndex.values()) {
    Integer p=bucket.get(lastAcked);
    if (p == null) {
      bucket.put(lastAcked,1);
    }
 else {
      bucket.put(lastAcked,p + 1);
    }
  }
  long mostAcked=0;
  for (  Map.Entry<Long,Integer> e : bucket.entrySet()) {
    if (e.getValue() >= majority) {
      if (mostAcked != 0) {
        LOG.warn(""String_Node_Str"",myId,mostAcked,e.getKey());
      }
      mostAcked=e.getKey();
    }
  }
  if (mostAcked == 0) {
    return;
  }
  if (myFirstIndexAsLeader == 0) {
    return;
  }
  if (mostAcked < myFirstIndexAsLeader) {
    LOG.warn(""String_Node_Str"",myId,mostAcked,myFirstIndexAsLeader);
    return;
  }
  if (mostAcked < lastCommittedIndex) {
    LOG.warn(""String_Node_Str"",myId,mostAcked,lastCommittedIndex);
    return;
  }
  if (mostAcked == lastCommittedIndex) {
    return;
  }
  setLastCommittedIndex(mostAcked);
  LOG.trace(""String_Node_Str"",myId,lastCommittedIndex);
}","@FiberOnly private void calculateLastVisible(int majority,long lastIndexSent){
  if (lastIndexSent == lastCommittedIndex) {
    return;
  }
  if (myFirstIndexAsLeader == 0) {
    return;
  }
  SortedMultiset<Long> committedIndexs=TreeMultiset.create(peersLastAckedIndex.values());
  committedIndexs.add(0L,peers.size() - peersLastAckedIndex.size());
  final long greatestIndexCommittedByMajority=Iterables.get(committedIndexs.descendingMultiset(),majority - 1);
  if (greatestIndexCommittedByMajority < myFirstIndexAsLeader) {
    LOG.warn(""String_Node_Str"",myId,greatestIndexCommittedByMajority,myFirstIndexAsLeader);
    return;
  }
  if (greatestIndexCommittedByMajority < lastCommittedIndex) {
    LOG.warn(""String_Node_Str"",myId,greatestIndexCommittedByMajority,lastCommittedIndex);
    return;
  }
  if (greatestIndexCommittedByMajority == lastCommittedIndex) {
    return;
  }
  setLastCommittedIndex(greatestIndexCommittedByMajority);
  LOG.trace(""String_Node_Str"",myId,lastCommittedIndex);
}"
40876,"@FiberOnly private void sendAppendEntries(long peer,long peerNextIdx,long lastIndexSent,long majority,final List<LogEntry> entries){
}","@FiberOnly private void sendAppendEntries(long peer,long peerNextIdx,long lastIndexSent,int majority,final List<LogEntry> entries){
}"
40877,"@Override public long currentTimeMillis(){
  return stopWatch.getTime() + offset;
}","@Override public synchronized long currentTimeMillis(){
  if (suspended) {
    return lastTimeMillis + offset;
  }
 else {
    return stopWatch.getTime() + offset;
  }
}"
40878,"@Override public ListenableFuture<Boolean> logEntries(List<LogEntry> entries){
  List<Log.OLogEntry> oLogEntries=new ArrayList<>();
  for (  LogEntry entry : entries) {
    long idx=getNextIdxGreaterThan(0);
    oLogEntries.add(Log.OLogEntry.newBuilder().setTombStone(false).setTerm(entry.getTerm()).setIndex(idx).setQuorumId(quorumId).setValue(ByteString.copyFrom(entry.getData())).build());
  }
  return this.log.logEntry(oLogEntries,quorumId);
}","@Override public ListenableFuture<Boolean> logEntries(List<LogEntry> entries){
  List<Log.OLogEntry> oLogEntries=new ArrayList<>();
  for (  LogEntry entry : entries) {
    long idx=getNextIdxGreaterThan(0);
    oLogEntries.add(Log.OLogEntry.newBuilder().setTombStone(false).setTerm(entry.getTerm()).setIndex(idx).setQuorumId(quorumId).setValue(ByteString.copyFrom(entry.getData())).build());
  }
  if (oLogEntries.size() > 0) {
    currentTerm=oLogEntries.get(oLogEntries.size() - 1).getTerm();
  }
  return this.log.logEntry(oLogEntries,quorumId);
}"
40879,"private void becomeLeader(){
  LOG.warn(""String_Node_Str"",myId,currentTerm);
  myState=State.LEADER;
  long myNextLog=log.getLastIndex() + 1;
  peersLastAckedIndex=new HashMap<>(peers.size());
  peersNextIndex=new HashMap<>(peers.size() - 1);
  for (  long peer : peers) {
    if (peer == myId)     continue;
    peersNextIndex.put(peer,myNextLog);
  }
  myFirstIndexAsLeader=0;
  lastCommittedIndex=0;
  stateChangeChannel.publish(new ReplicatorInstanceEvent(ReplicatorInstanceEvent.EventType.LEADER_ELECTED,this,myId,info.currentTimeMillis(),null));
  startQueueConsumer();
}","private void becomeLeader(){
  LOG.warn(""String_Node_Str"",myId,currentTerm);
  myState=State.LEADER;
  long myNextLog=log.getLastIndex() + 1;
  peersLastAckedIndex=new HashMap<>(peers.size());
  peersNextIndex=new HashMap<>(peers.size() - 1);
  for (  long peer : peers) {
    if (peer == myId)     continue;
    peersNextIndex.put(peer,myNextLog);
  }
  myFirstIndexAsLeader=0;
  stateChangeChannel.publish(new ReplicatorInstanceEvent(ReplicatorInstanceEvent.EventType.LEADER_ELECTED,this,myId,info.currentTimeMillis(),null));
  startQueueConsumer();
}"
40880,"private void calculateLastVisible(long majority,long lastIndexSent){
  if (lastIndexSent == lastCommittedIndex)   return;
  HashMap<Long,Integer> bucket=new HashMap<>();
  for (  long lastAcked : peersLastAckedIndex.values()) {
    Integer p=bucket.get(lastAcked);
    if (p == null)     bucket.put(lastAcked,1);
 else     bucket.put(lastAcked,p + 1);
  }
  long mostAcked=0;
  for (  Map.Entry<Long,Integer> e : bucket.entrySet()) {
    if (e.getValue() >= majority) {
      if (mostAcked != 0) {
        LOG.warn(""String_Node_Str"",myId,mostAcked,e.getKey());
      }
      mostAcked=e.getKey();
    }
  }
  if (mostAcked == 0)   return;
  if (myFirstIndexAsLeader == 0)   return;
  if (mostAcked < myFirstIndexAsLeader) {
    LOG.warn(""String_Node_Str"",myId,mostAcked,myFirstIndexAsLeader);
    return;
  }
  if (mostAcked < lastCommittedIndex) {
    LOG.warn(""String_Node_Str"",myId,mostAcked,lastCommittedIndex);
    return;
  }
  if (mostAcked == lastCommittedIndex) {
    return;
  }
  this.lastCommittedIndex=mostAcked;
  notifyLastCommitted();
  LOG.trace(""String_Node_Str"",myId,lastCommittedIndex);
}","private void calculateLastVisible(long majority,long lastIndexSent){
  if (lastIndexSent == lastCommittedIndex)   return;
  HashMap<Long,Integer> bucket=new HashMap<>();
  for (  long lastAcked : peersLastAckedIndex.values()) {
    Integer p=bucket.get(lastAcked);
    if (p == null)     bucket.put(lastAcked,1);
 else     bucket.put(lastAcked,p + 1);
  }
  long mostAcked=0;
  for (  Map.Entry<Long,Integer> e : bucket.entrySet()) {
    if (e.getValue() >= majority) {
      if (mostAcked != 0) {
        LOG.warn(""String_Node_Str"",myId,mostAcked,e.getKey());
      }
      mostAcked=e.getKey();
    }
  }
  if (mostAcked == 0)   return;
  if (myFirstIndexAsLeader == 0)   return;
  if (mostAcked < myFirstIndexAsLeader) {
    LOG.warn(""String_Node_Str"",myId,mostAcked,myFirstIndexAsLeader);
    return;
  }
  if (mostAcked < lastCommittedIndex) {
    LOG.warn(""String_Node_Str"",myId,mostAcked,lastCommittedIndex);
    return;
  }
  if (mostAcked == lastCommittedIndex) {
    return;
  }
  setLastCommittedIndex(mostAcked);
  LOG.trace(""String_Node_Str"",myId,lastCommittedIndex);
}"
40881,"@FiberOnly private void doAppendMessage(final Request<RpcWireRequest,RpcReply> request){
  final AppendEntries appendMessage=request.getRequest().getAppendMessage();
  if (appendMessage.getTerm() < currentTerm) {
    AppendEntriesReply m=new AppendEntriesReply(currentTerm,false,0);
    RpcReply reply=new RpcReply(m);
    request.reply(reply);
    return;
  }
  if (appendMessage.getTerm() > currentTerm) {
    setCurrentTerm(appendMessage.getTerm());
  }
  if (myState != State.FOLLOWER) {
    haltLeader();
  }
  lastRPC=info.currentTimeMillis();
  long theLeader=appendMessage.getLeaderId();
  if (whosLeader != theLeader) {
    LOG.debug(""String_Node_Str"",myId,theLeader);
    whosLeader=theLeader;
    stateChangeChannel.publish(new ReplicatorInstanceEvent(ReplicatorInstanceEvent.EventType.LEADER_ELECTED,this,whosLeader,info.currentTimeMillis(),null));
  }
  long msgPrevLogIndex=appendMessage.getPrevLogIndex();
  long msgPrevLogTerm=appendMessage.getPrevLogTerm();
  if (msgPrevLogIndex != 0 && log.getLogTerm(msgPrevLogIndex) != msgPrevLogTerm) {
    AppendEntriesReply m=new AppendEntriesReply(currentTerm,false,log.getLastIndex());
    RpcReply reply=new RpcReply(m);
    request.reply(reply);
    return;
  }
  if (appendMessage.getEntriesList().isEmpty()) {
    AppendEntriesReply m=new AppendEntriesReply(currentTerm,true,0);
    RpcReply reply=new RpcReply(m);
    request.reply(reply);
    long newCommitIndex=Math.min(appendMessage.getCommitIndex(),log.getLastIndex());
    if (newCommitIndex > lastCommittedIndex) {
      lastCommittedIndex=newCommitIndex;
      notifyLastCommitted();
    }
    return;
  }
  ListenableFuture<ArrayList<LogEntry>> entriesToCommitFuture=validateAndFixLocalLog(request,appendMessage);
  Futures.addCallback(entriesToCommitFuture,new FutureCallback<ArrayList<LogEntry>>(){
    @Override public void onSuccess(    ArrayList<LogEntry> entriesToCommit){
      ListenableFuture<Boolean> logCommitNotification=log.logEntries(entriesToCommit);
      Futures.addCallback(logCommitNotification,new FutureCallback<Boolean>(){
        @Override public void onSuccess(        Boolean result){
          AppendEntriesReply m=new AppendEntriesReply(currentTerm,true,0);
          RpcReply reply=new RpcReply(m);
          request.reply(reply);
          lastCommittedIndex=Math.min(appendMessage.getCommitIndex(),log.getLastIndex());
          notifyLastCommitted();
        }
        @Override public void onFailure(        Throwable t){
          AppendEntriesReply m=new AppendEntriesReply(currentTerm,false,0);
          RpcReply reply=new RpcReply(m);
          request.reply(reply);
        }
      }
,fiber);
    }
    @Override public void onFailure(    Throwable t){
      AppendEntriesReply m=new AppendEntriesReply(currentTerm,false,0);
      RpcReply reply=new RpcReply(m);
      request.reply(reply);
    }
  }
,fiber);
}","@FiberOnly private void doAppendMessage(final Request<RpcWireRequest,RpcReply> request){
  final AppendEntries appendMessage=request.getRequest().getAppendMessage();
  if (appendMessage.getTerm() < currentTerm) {
    AppendEntriesReply m=new AppendEntriesReply(currentTerm,false,0);
    RpcReply reply=new RpcReply(m);
    request.reply(reply);
    return;
  }
  if (appendMessage.getTerm() > currentTerm) {
    setCurrentTerm(appendMessage.getTerm());
  }
  if (myState != State.FOLLOWER) {
    haltLeader();
  }
  lastRPC=info.currentTimeMillis();
  long theLeader=appendMessage.getLeaderId();
  if (whosLeader != theLeader) {
    LOG.debug(""String_Node_Str"",myId,theLeader);
    whosLeader=theLeader;
    stateChangeChannel.publish(new ReplicatorInstanceEvent(ReplicatorInstanceEvent.EventType.LEADER_ELECTED,this,whosLeader,info.currentTimeMillis(),null));
  }
  long msgPrevLogIndex=appendMessage.getPrevLogIndex();
  long msgPrevLogTerm=appendMessage.getPrevLogTerm();
  if (msgPrevLogIndex != 0 && log.getLogTerm(msgPrevLogIndex) != msgPrevLogTerm) {
    AppendEntriesReply m=new AppendEntriesReply(currentTerm,false,log.getLastIndex());
    RpcReply reply=new RpcReply(m);
    request.reply(reply);
    return;
  }
  if (appendMessage.getEntriesList().isEmpty()) {
    AppendEntriesReply m=new AppendEntriesReply(currentTerm,true,0);
    RpcReply reply=new RpcReply(m);
    request.reply(reply);
    long newCommitIndex=Math.min(appendMessage.getCommitIndex(),log.getLastIndex());
    setLastCommittedIndex(newCommitIndex);
    return;
  }
  ListenableFuture<ArrayList<LogEntry>> entriesToCommitFuture=validateAndFixLocalLog(request,appendMessage);
  Futures.addCallback(entriesToCommitFuture,new FutureCallback<ArrayList<LogEntry>>(){
    @Override public void onSuccess(    ArrayList<LogEntry> entriesToCommit){
      ListenableFuture<Boolean> logCommitNotification=log.logEntries(entriesToCommit);
      Futures.addCallback(logCommitNotification,new FutureCallback<Boolean>(){
        @Override public void onSuccess(        Boolean result){
          AppendEntriesReply m=new AppendEntriesReply(currentTerm,true,0);
          RpcReply reply=new RpcReply(m);
          request.reply(reply);
          long newCommitIndex=Math.min(appendMessage.getCommitIndex(),log.getLastIndex());
          setLastCommittedIndex(newCommitIndex);
        }
        @Override public void onFailure(        Throwable t){
          AppendEntriesReply m=new AppendEntriesReply(currentTerm,false,0);
          RpcReply reply=new RpcReply(m);
          request.reply(reply);
        }
      }
,fiber);
    }
    @Override public void onFailure(    Throwable t){
      AppendEntriesReply m=new AppendEntriesReply(currentTerm,false,0);
      RpcReply reply=new RpcReply(m);
      request.reply(reply);
    }
  }
,fiber);
}"
40882,"@Override public void onSuccess(Boolean result){
  AppendEntriesReply m=new AppendEntriesReply(currentTerm,true,0);
  RpcReply reply=new RpcReply(m);
  request.reply(reply);
  lastCommittedIndex=Math.min(appendMessage.getCommitIndex(),log.getLastIndex());
  notifyLastCommitted();
}","@Override public void onSuccess(Boolean result){
  AppendEntriesReply m=new AppendEntriesReply(currentTerm,true,0);
  RpcReply reply=new RpcReply(m);
  request.reply(reply);
  long newCommitIndex=Math.min(appendMessage.getCommitIndex(),log.getLastIndex());
  setLastCommittedIndex(newCommitIndex);
}"
40883,"private void becomeLeader(){
  LOG.warn(""String_Node_Str"",myId);
  myState=State.LEADER;
  long myNextLog=log.getLastIndex() + 1;
  peersLastAckedIndex=new HashMap<>(peers.size());
  peersNextIndex=new HashMap<>(peers.size() - 1);
  for (  long peer : peers) {
    if (peer == myId)     continue;
    peersNextIndex.put(peer,myNextLog);
  }
  myFirstIndexAsLeader=0;
  lastCommittedIndex=0;
  startQueueConsumer();
}","private void becomeLeader(){
  LOG.warn(""String_Node_Str"",myId,currentTerm);
  myState=State.LEADER;
  long myNextLog=log.getLastIndex() + 1;
  peersLastAckedIndex=new HashMap<>(peers.size());
  peersNextIndex=new HashMap<>(peers.size() - 1);
  for (  long peer : peers) {
    if (peer == myId)     continue;
    peersNextIndex.put(peer,myNextLog);
  }
  myFirstIndexAsLeader=0;
  lastCommittedIndex=0;
  startQueueConsumer();
}"
40884,"@Override public void run(){
  consumeQueue();
}","@Override public void run(){
  try {
    consumeQueue();
  }
 catch (  Throwable t) {
    failReplicatorInstance(t);
  }
}"
40885,"@FiberOnly private void startQueueConsumer(){
  queueConsumer=fiber.scheduleAtFixedRate(new Runnable(){
    @Override public void run(){
      consumeQueue();
    }
  }
,0,info.groupCommitDelay(),TimeUnit.MILLISECONDS);
}","@FiberOnly private void startQueueConsumer(){
  queueConsumer=fiber.scheduleAtFixedRate(new Runnable(){
    @Override public void run(){
      try {
        consumeQueue();
      }
 catch (      Throwable t) {
        failReplicatorInstance(t);
      }
    }
  }
,0,info.groupCommitDelay(),TimeUnit.MILLISECONDS);
}"
40886,"@FiberOnly private void handleOutgoingMessage(final Request<RpcRequest,RpcWireReply> message){
  final RpcRequest request=message.getRequest();
  final long to=request.to;
  if (to == server.getNodeId()) {
    handleLoopBackMessage(message);
    return;
  }
  DiscoveryModule.NodeInfoRequest nodeInfoRequest=new DiscoveryModule.NodeInfoRequest(to,ModuleType.Replication);
  AsyncRequest.withOneReply(fiber,discoveryModule.getNodeInfo(),nodeInfoRequest,new Callback<DiscoveryModule.NodeInfoReply>(){
    @FiberOnly @Override public void onMessage(    DiscoveryModule.NodeInfoReply nodeInfoReply){
      if (!nodeInfoReply.found) {
        LOG.debug(""String_Node_Str"",to);
        return;
      }
      ChannelFuture channelFuture=connections.get(to);
      if (channelFuture == null) {
        LOG.trace(""String_Node_Str"",to,nodeInfoReply.addresses.get(0),nodeInfoReply.port);
        channelFuture=outgoingBootstrap.connect(nodeInfoReply.addresses.get(0),nodeInfoReply.port);
        connections.put(to,channelFuture);
      }
      channelFuture.addListener(new ChannelFutureListener(){
        @Override public void operationComplete(        ChannelFuture future) throws Exception {
          if (future.isSuccess()) {
            sendMessage0(message,future.channel());
          }
 else {
            fiber.execute(new Runnable(){
              @Override public void run(){
                ChannelFuture cf=connections.get(to);
                if (cf != null) {
                  if (cf.isDone()) {
                    LOG.trace(""String_Node_Str"",to);
                    connections.remove(to);
                  }
                }
              }
            }
);
          }
        }
      }
);
    }
  }
);
}","@FiberOnly private void handleOutgoingMessage(final Request<RpcRequest,RpcWireReply> message){
  final RpcRequest request=message.getRequest();
  final long to=request.to;
  if (to == server.getNodeId()) {
    handleLoopBackMessage(message);
    return;
  }
  Channel channel=connections.get(to);
  if (channel != null && channel.isOpen()) {
    sendMessage0(message,channel);
    return;
  }
 else   if (channel != null) {
    LOG.debug(""String_Node_Str"",to);
    connections.remove(to);
  }
  DiscoveryModule.NodeInfoRequest nodeInfoRequest=new DiscoveryModule.NodeInfoRequest(to,ModuleType.Replication);
  AsyncRequest.withOneReply(fiber,discoveryModule.getNodeInfo(),nodeInfoRequest,new Callback<DiscoveryModule.NodeInfoReply>(){
    @FiberOnly @Override public void onMessage(    DiscoveryModule.NodeInfoReply nodeInfoReply){
      if (!nodeInfoReply.found) {
        LOG.debug(""String_Node_Str"",to);
        return;
      }
      Channel channel=connections.get(to);
      if (channel != null && channel.isOpen()) {
        sendMessage0(message,channel);
        return;
      }
 else       if (channel != null) {
        LOG.debug(""String_Node_Str"",to);
        connections.remove(to);
      }
      ChannelFuture channelFuture=outgoingBootstrap.connect(nodeInfoReply.addresses.get(0),nodeInfoReply.port);
      LOG.trace(""String_Node_Str"",to,nodeInfoReply.addresses.get(0),nodeInfoReply.port);
      connections.put(to,channelFuture.channel());
      channelFuture.channel().closeFuture().addListener(new ChannelFutureListener(){
        @Override public void operationComplete(        ChannelFuture future) throws Exception {
          fiber.execute(() -> {
            connections.remove(to,future.channel());
          }
);
        }
      }
);
      channelFuture.addListener(new ChannelFutureListener(){
        @Override public void operationComplete(        ChannelFuture future) throws Exception {
          if (future.isSuccess()) {
            sendMessage0(message,future.channel());
          }
        }
      }
);
    }
  }
);
}"
40887,"@Override protected void channelRead0(final ChannelHandlerContext ctx,final RaftWireMessage msg) throws Exception {
  fiber.execute(new Runnable(){
    @Override public void run(){
      handleWireInboundMessage(ctx.channel(),msg);
    }
  }
);
}","@Override protected void channelRead0(final ChannelHandlerContext ctx,final RaftWireMessage msg) throws Exception {
  fiber.execute(() -> {
    handleWireInboundMessage(ctx.channel(),msg);
  }
);
}"
40888,"/** 
 * Uses idToken to retrieve the user account information from GITkit service.
 * @param idToken
 */
public JSONObject getAccountInfo(String idToken) throws GitkitClientException, GitkitServerException {
  try {
    JSONObject params=new JSONObject().put(""String_Node_Str"",idToken);
    return invokeGitkitApi(""String_Node_Str"",params,null);
  }
 catch (  JSONException e) {
    throw new GitkitServerException(""String_Node_Str"");
  }
}","/** 
 * Uses idToken to retrieve the user account information from GITkit service.
 * @param idToken
 */
public JSONObject getAccountInfo(String idToken) throws GitkitClientException, GitkitServerException {
  try {
    JSONObject params=new JSONObject().put(""String_Node_Str"",idToken);
    return invokeGoogle2LegOauthApi(""String_Node_Str"",params);
  }
 catch (  JSONException e) {
    throw new GitkitServerException(""String_Node_Str"");
  }
}"
40889,"/** 
 * <p> Use Hazelcast's   {@code ReflectionHelper} to extract a field in an entry, and use this is in the comparison.</P>
 * @param o1 An entry in a map
 * @param o2 Another entry in the map
 * @return Comparison result
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public int compare(Entry<?,?> o1,Entry<?,?> o2){
  try {
    Object o1Field=ReflectionHelper.extractValue(o1.getValue(),this.attributeName);
    Object o2Field=ReflectionHelper.extractValue(o2.getValue(),this.attributeName);
    if (o1Field == null) {
      return this.direction;
    }
    if (o2Field == null) {
      return -1 * this.direction;
    }
    if (o1Field instanceof Comparable && o2Field instanceof Comparable) {
      return this.direction * ((Comparable)o1Field).compareTo((Comparable)o2Field);
    }
  }
 catch (  Exception ignore) {
    return 0;
  }
  return 0;
}","/** 
 * <p> Use Hazelcast's   {@code ReflectionHelper} to extract a field in an entry, and use this is in the comparison.</P>
 * @param o1 An entry in a map
 * @param o2 Another entry in the map
 * @return Comparison result
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public int compare(Entry<?,?> o1,Entry<?,?> o2){
  try {
    Object o1Field=ReflectionHelper.extractValue(o1.getValue(),this.attributeName);
    Object o2Field=ReflectionHelper.extractValue(o2.getValue(),this.attributeName);
    if (o1Field == o2Field) {
      return 0;
    }
    if (o1Field == null) {
      return this.direction;
    }
    if (o2Field == null) {
      return -1 * this.direction;
    }
    if (o1Field instanceof Comparable && o2Field instanceof Comparable) {
      return this.direction * ((Comparable)o1Field).compareTo(o2Field);
    }
  }
 catch (  Exception ignore) {
    return 0;
  }
  return 0;
}"
40890,"/** 
 * <P> Execute   {@code countBy*()} queries against a Hazelcast map.</P>
 * @param criteria Predicate to use, not null
 * @param keyspace The map name
 * @return Results from Hazelcast
 */
@Override public long count(final Predicate<?,?> criteria,final String keyspace){
  return this.getAdapter().getMap(keyspace).keySet(criteria).size();
}","/** 
 * <P> Execute   {@code countBy*()} queries against a Hazelcast map.</P>
 * @param criteria Predicate to use, not null
 * @param keyspace The map name
 * @return Results from Hazelcast
 */
@Override public long count(final Predicate<?,?> criteria,final String keyspace){
  final HazelcastKeyValueAdapter adapter=getAdapter();
  Assert.notNull(adapter,""String_Node_Str"");
  return adapter.getMap(keyspace).keySet(criteria).size();
}"
40891,"/** 
 * <P> Construct the final query predicate for Hazelcast to execute, from the base query plus any paging and sorting. </P> <P> Variations here allow the base query predicate to be omitted, sorting to be omitted, and paging to be omitted. </P>
 * @param criteria Search criteria, null means match everything
 * @param sort Possibly null collation
 * @param offset Start point of returned page, -1 if not used
 * @param rows Size of page, -1 if not used
 * @param keyspace The map name
 * @return Results from Hazelcast
 */
@Override public Collection<?> execute(final Predicate<?,?> criteria,final Comparator<Entry<?,?>> sort,final long offset,final int rows,final String keyspace){
  Predicate<?,?> predicateToUse=criteria;
  @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) Comparator<Entry> sortToUse=((Comparator<Entry>)(Comparator)sort);
  if (rows > 0) {
    PagingPredicate pp=new PagingPredicate(predicateToUse,sortToUse,rows);
    long x=offset / rows;
    while (x > 0) {
      pp.nextPage();
      x--;
    }
    predicateToUse=pp;
  }
 else {
    if (sortToUse != null) {
      predicateToUse=new PagingPredicate(predicateToUse,sortToUse,Integer.MAX_VALUE);
    }
  }
  if (predicateToUse == null) {
    return this.getAdapter().getMap(keyspace).values();
  }
 else {
    return this.getAdapter().getMap(keyspace).values(predicateToUse);
  }
}","/** 
 * <P> Construct the final query predicate for Hazelcast to execute, from the base query plus any paging and sorting. </P> <P> Variations here allow the base query predicate to be omitted, sorting to be omitted, and paging to be omitted. </P>
 * @param criteria Search criteria, null means match everything
 * @param sort Possibly null collation
 * @param offset Start point of returned page, -1 if not used
 * @param rows Size of page, -1 if not used
 * @param keyspace The map name
 * @return Results from Hazelcast
 */
@Override public Collection<?> execute(final Predicate<?,?> criteria,final Comparator<Entry<?,?>> sort,final long offset,final int rows,final String keyspace){
  final HazelcastKeyValueAdapter adapter=getAdapter();
  Assert.notNull(adapter,""String_Node_Str"");
  Predicate<?,?> predicateToUse=criteria;
  @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) Comparator<Entry> sortToUse=((Comparator<Entry>)(Comparator)sort);
  if (rows > 0) {
    PagingPredicate pp=new PagingPredicate(predicateToUse,sortToUse,rows);
    long x=offset / rows;
    while (x > 0) {
      pp.nextPage();
      x--;
    }
    predicateToUse=pp;
  }
 else {
    if (sortToUse != null) {
      predicateToUse=new PagingPredicate(predicateToUse,sortToUse,Integer.MAX_VALUE);
    }
  }
  if (predicateToUse == null) {
    return adapter.getMap(keyspace).values();
  }
 else {
    return adapter.getMap(keyspace).values(predicateToUse);
  }
}"
40892,"/** 
 * @param A query in Spring form
 * @return The same in Hazelcast form
 */
public Predicate<?,?> resolve(KeyValueQuery<?> query){
  if (query == null || query.getCriteria() == null) {
    return null;
  }
  if (query.getCriteria() instanceof PagingPredicate) {
    PagingPredicate pagingPredicate=(PagingPredicate)query.getCriteria();
    query.limit(pagingPredicate.getPageSize());
    return pagingPredicate.getPredicate();
  }
  if (query.getCriteria() instanceof Predicate) {
    return (Predicate<?,?>)query.getCriteria();
  }
  throw new UnsupportedOperationException(query.toString());
}","/** 
 * @param A query in Spring form
 * @return The same in Hazelcast form
 */
public Predicate<?,?> resolve(KeyValueQuery<?> query){
  if (query == null) {
    return null;
  }
  final Object criteria=query.getCriteria();
  if (criteria == null) {
    return null;
  }
  if (criteria instanceof PagingPredicate) {
    PagingPredicate pagingPredicate=(PagingPredicate)criteria;
    query.limit(pagingPredicate.getPageSize());
    return pagingPredicate.getPredicate();
  }
  if (criteria instanceof Predicate) {
    return (Predicate<?,?>)criteria;
  }
  throw new UnsupportedOperationException(query.toString());
}"
40893,"/** 
 * <P> Create the query from the bind parameters. </P>
 * @param parameters Possibly empty list of query parameters
 * @return A ready-to-use query
 */
protected KeyValueQuery<?> prepareQuery(Object[] parameters){
  PartTree tree=null;
  if (this.queryMethod.getParameters().getNumberOfParameters() > 0) {
    tree=new PartTree(getQueryMethod().getName(),getQueryMethod().getEntityInformation().getJavaType());
    this.isCount=tree.isCountProjection();
    this.isDelete=tree.isDelete();
    this.isDistinct=tree.isDistinct();
  }
 else {
    this.isCount=false;
    this.isDelete=false;
    this.isDistinct=false;
  }
  ParametersParameterAccessor accessor=this.prepareAccessor(parameters,tree);
  KeyValueQuery<?> query=createQuery(accessor);
  if (accessor.getPageable() != null) {
    query.setOffset(accessor.getPageable().getOffset());
    query.setRows(accessor.getPageable().getPageSize());
  }
 else {
    query.setOffset(-1);
    query.setRows(-1);
  }
  if (accessor.getSort() != null) {
    query.setSort(accessor.getSort());
  }
  return query;
}","/** 
 * <P> Create the query from the bind parameters. </P>
 * @param parameters Possibly empty list of query parameters
 * @return A ready-to-use query
 */
protected KeyValueQuery<?> prepareQuery(Object[] parameters){
  PartTree tree=null;
  if (this.queryMethod.getParameters().getNumberOfParameters() > 0) {
    tree=new PartTree(getQueryMethod().getName(),getQueryMethod().getEntityInformation().getJavaType());
    this.isCount=tree.isCountProjection();
    this.isDelete=tree.isDelete();
    this.isDistinct=tree.isDistinct();
  }
 else {
    this.isCount=false;
    this.isDelete=false;
    this.isDistinct=false;
  }
  ParametersParameterAccessor accessor=this.prepareAccessor(parameters,tree);
  KeyValueQuery<?> query=createQuery(accessor);
  if (accessor.getPageable() != Pageable.unpaged()) {
    query.setOffset(accessor.getPageable().getOffset());
    query.setRows(accessor.getPageable().getPageSize());
  }
 else {
    query.setOffset(-1);
    query.setRows(-1);
  }
  if (accessor.getSort() != Sort.unsorted()) {
    query.setSort(accessor.getSort());
  }
  return query;
}"
40894,"/** 
 * <P> Handle   {@code @Param}. </P> <OL> <LI><B>Without   {@code @Param}</B> <P> Arguments to the call are assumed to follow the same sequence as cited in the method name. </P> <P> Eg. <pre> findBy<U>One</U>And<U>Two</U>(String <U>one</U>, String <U>two</U>); </pre> </P> </LI> <LI><B>With   {@code @Param}</B> <P> Arguments to the call are use the   {@code @Param} to match them against the fields.<P> Eg. <pre> findBy<U>One</U>And<U>Two</U>(@Param(""two"") String <U>two</U>, @Param(""one"") String <U>one</U>); </pre> </P> </LI> </OL>
 * @param parameters Possibly empty
 * @param partTree Query tree to traverse
 * @return Paremeters in correct order
 */
private ParametersParameterAccessor prepareAccessor(final Object[] originalParameters,final PartTree partTree){
  if (!this.isRearrangeKnown) {
    this.prepareRearrange(partTree,this.queryMethod.getParameters().getBindableParameters());
    this.isRearrangeKnown=true;
  }
  Object[] parameters=originalParameters;
  if (parameters != null && this.isRearrangeRequired) {
    parameters=new Object[originalParameters.length];
    for (int i=0; i < parameters.length; i++) {
      int index=rearrangeIndex[i];
      parameters[i]=originalParameters[index];
    }
  }
  return new ParametersParameterAccessor(this.queryMethod.getParameters(),parameters);
}","/** 
 * <P> Handle   {@code @Param}. </P> <OL> <LI><B>Without   {@code @Param}</B> <P> Arguments to the call are assumed to follow the same sequence as cited in the method name. </P> <P> Eg. <pre> findBy<U>One</U>And<U>Two</U>(String <U>one</U>, String <U>two</U>); </pre> </P> </LI> <LI><B>With   {@code @Param}</B> <P> Arguments to the call are use the   {@code @Param} to match them against the fields.<P> Eg. <pre> findBy<U>One</U>And<U>Two</U>(@Param(""two"") String <U>two</U>, @Param(""one"") String <U>one</U>); </pre> </P> </LI> </OL>
 * @param originalParameters Possibly empty
 * @param partTree Query tree to traverse
 * @return Parameters in correct order
 */
private ParametersParameterAccessor prepareAccessor(final Object[] originalParameters,final PartTree partTree){
  if (!this.isRearrangeKnown) {
    this.prepareRearrange(partTree,this.queryMethod.getParameters().getBindableParameters());
    this.isRearrangeKnown=true;
  }
  Object[] parameters=originalParameters;
  Assert.notNull(parameters,""String_Node_Str"");
  if (this.isRearrangeRequired) {
    parameters=new Object[originalParameters.length];
    for (int i=0; i < parameters.length; i++) {
      int index=rearrangeIndex[i];
      parameters[i]=originalParameters[index];
    }
  }
  return new ParametersParameterAccessor(this.queryMethod.getParameters(),parameters);
}"
40895,"/** 
 * Creates a new   {@link HazelcastQueryCreator} for the given {@link PartTree} and {@link ParameterAccessor}. The latter is used to hand actual parameter values into the callback methods as well as to apply dynamic sorting via a  {@link Sort} parameter.
 * @param tree must not be {@literal null}.
 * @param parameters can be {@literal null}.
 */
public HazelcastQueryCreator(PartTree tree,ParameterAccessor parameters){
  super(tree,parameters);
  if (tree.isLimiting() && tree.getMaxResults() > 0) {
    this.limit=tree.getMaxResults();
  }
 else {
    this.limit=0;
  }
}","/** 
 * Creates a new   {@link HazelcastQueryCreator} for the given {@link PartTree} and {@link ParameterAccessor}. The latter is used to hand actual parameter values into the callback methods as well as to apply dynamic sorting via a  {@link Sort} parameter.
 * @param tree must not be {@literal null}.
 * @param parameters can be {@literal null}.
 */
public HazelcastQueryCreator(PartTree tree,ParameterAccessor parameters){
  super(tree,parameters);
  final Integer maxResults=tree.getMaxResults();
  if (tree.isLimiting() && maxResults != null && maxResults > 0) {
    this.limit=maxResults;
  }
 else {
    this.limit=0;
  }
}"
40896,"/** 
 * <P> Sort on a sequence of fields, possibly none. </P>
 * @param query If not null, will contain one of more {@link Sort.Order} objects.
 * @return A sequence of comparators or {@code null}
 */
public Comparator<Entry<?,?>> resolve(KeyValueQuery<?> query){
  if (query == null || query.getSort() == null) {
    return null;
  }
  CompoundComparator<Entry<?,?>> compoundComparator=new CompoundComparator<>();
  for (  Order order : query.getSort()) {
    if (order.getProperty().indexOf('.') > -1) {
      throw new UnsupportedOperationException(""String_Node_Str"" + order);
    }
    if (order.isIgnoreCase()) {
      throw new UnsupportedOperationException(""String_Node_Str"" + order);
    }
    if (NullHandling.NATIVE != order.getNullHandling()) {
      throw new UnsupportedOperationException(""String_Node_Str"" + order);
    }
    HazelcastPropertyComparator hazelcastPropertyComparator=new HazelcastPropertyComparator(order.getProperty(),order.isAscending());
    compoundComparator.addComparator(hazelcastPropertyComparator);
  }
  return compoundComparator;
}","/** 
 * <P> Sort on a sequence of fields, possibly none. </P>
 * @param query If not null, will contain one of more {@link Sort.Order} objects.
 * @return A sequence of comparators or {@code null}
 */
public Comparator<Entry<?,?>> resolve(KeyValueQuery<?> query){
  if (query == null || query.getSort() == Sort.unsorted()) {
    return null;
  }
  CompoundComparator<Entry<?,?>> compoundComparator=new CompoundComparator<>();
  for (  Order order : query.getSort()) {
    if (order.getProperty().indexOf('.') > -1) {
      throw new UnsupportedOperationException(""String_Node_Str"" + order);
    }
    if (order.isIgnoreCase()) {
      throw new UnsupportedOperationException(""String_Node_Str"" + order);
    }
    if (NullHandling.NATIVE != order.getNullHandling()) {
      throw new UnsupportedOperationException(""String_Node_Str"" + order);
    }
    HazelcastPropertyComparator hazelcastPropertyComparator=new HazelcastPropertyComparator(order.getProperty(),order.isAscending());
    compoundComparator.addComparator(hazelcastPropertyComparator);
  }
  return compoundComparator;
}"
40897,"@Test public void deleteShouldRemoveObjectCorrectly(){
  operations.insert(""String_Node_Str"",FOO_ONE);
  operations.delete(""String_Node_Str"",Foo.class);
  assertThat(operations.findById(""String_Node_Str"",Foo.class),nullValue());
}","@Test public void deleteShouldRemoveObjectCorrectly(){
  operations.insert(""String_Node_Str"",FOO_ONE);
  operations.delete(""String_Node_Str"",Foo.class);
  assertFalse(operations.findById(""String_Node_Str"",Foo.class).isPresent());
}"
40898,"@Test public void updateShouldReplaceExistingObject(){
  operations.insert(""String_Node_Str"",FOO_ONE);
  operations.update(""String_Node_Str"",FOO_TWO);
  assertThat(operations.findById(""String_Node_Str"",Foo.class),is(FOO_TWO));
}","@Test public void updateShouldReplaceExistingObject(){
  operations.insert(""String_Node_Str"",FOO_ONE);
  operations.update(""String_Node_Str"",FOO_TWO);
  assertThat(operations.findById(""String_Node_Str"",Foo.class),is(Optional.of(FOO_TWO)));
}"
40899,"@Test public void createShouldRespectExistingId(){
  ClassWithStringId source=new ClassWithStringId();
  source.id=""String_Node_Str"";
  operations.insert(source);
  assertThat(operations.findById(""String_Node_Str"",ClassWithStringId.class),is(source));
}","@Test public void createShouldRespectExistingId(){
  ClassWithStringId source=new ClassWithStringId();
  source.id=""String_Node_Str"";
  operations.insert(source);
  assertThat(operations.findById(""String_Node_Str"",ClassWithStringId.class),is(Optional.of(source)));
}"
40900,"@Test public void updateShouldRespectTypeInformation(){
  operations.insert(""String_Node_Str"",FOO_ONE);
  operations.update(""String_Node_Str"",BAR_ONE);
  assertThat(operations.findById(""String_Node_Str"",Foo.class),is(FOO_ONE));
}","@Test public void updateShouldRespectTypeInformation(){
  operations.insert(""String_Node_Str"",FOO_ONE);
  operations.update(""String_Node_Str"",BAR_ONE);
  assertThat(operations.findById(""String_Node_Str"",Foo.class),is(Optional.of(FOO_ONE)));
}"
40901,"@Test public void findByIdShouldReturnObjectWithMatchingIdAndType(){
  operations.insert(""String_Node_Str"",FOO_ONE);
  assertThat(operations.findById(""String_Node_Str"",Foo.class),is(FOO_ONE));
}","@Test public void findByIdShouldReturnObjectWithMatchingIdAndType(){
  operations.insert(""String_Node_Str"",FOO_ONE);
  assertThat(operations.findById(""String_Node_Str"",Foo.class),is(Optional.of(FOO_ONE)));
}"
40902,"/** 
 * Changes the endpoints of all WSDL files used by the given WS-BPEL 2.0 Process
 * @param processFiles a list of files containing the complete content of a Apache ODE WS-BPEL 2.0zip file
 * @param csarId the identifier of the CSAR where this process/plan is declared
 * @return true if every WSDL file used by the process was updated (if needed) with endpoints fromthe openTOSCA Core, else false
 */
public boolean changeEndpoints(final List<File> processFiles,final CSARID csarId){
  this.csarId=csarId;
  Map<QName,List<File>> unchangedFiles=null;
  final File deployXml=getDeployXML(processFiles);
  if (deployXml == null) {
    ODEEndpointUpdater.LOG.error(""String_Node_Str"");
    return false;
  }
  try {
    final List<QName> portsInDeployXml=getInvokedDeployXMLPorts(deployXml);
    if (!portsInDeployXml.isEmpty()) {
      for (      final QName portType : portsInDeployXml) {
        ODEEndpointUpdater.LOG.debug(""String_Node_Str"",portType);
      }
    }
 else {
      ODEEndpointUpdater.LOG.debug(""String_Node_Str"");
      return true;
    }
    final Map<QName,List<File>> changeMap=getWSDLtoChange(portsInDeployXml,getAllWSDLFiles(processFiles));
    unchangedFiles=this.updateInvokedWSDLAddresses(changeMap);
  }
 catch (  final JAXBException e) {
    ODEEndpointUpdater.LOG.error(""String_Node_Str"",e);
  }
catch (  final WSDLException e) {
    ODEEndpointUpdater.LOG.error(""String_Node_Str"",e);
  }
  try {
    final List<QName> portsInDeployXml=getProvidedDeployXMLPorts(deployXml);
    final Map<QName,List<File>> changeMap=getWSDLtoChange(portsInDeployXml,getAllWSDLFiles(processFiles));
    unchangedFiles.putAll(this.updateProvidedWSDLAddresses(changeMap));
  }
 catch (  final JAXBException e) {
    e.printStackTrace();
  }
catch (  final WSDLException e) {
    e.printStackTrace();
  }
  for (  final QName portType : unchangedFiles.keySet()) {
    ODEEndpointUpdater.LOG.warn(""String_Node_Str"",portType.toString());
    for (    final File file : unchangedFiles.get(portType)) {
      ODEEndpointUpdater.LOG.warn(""String_Node_Str"",file.toPath().toString(),portType.toString());
    }
  }
  return true;
}","/** 
 * Changes the endpoints of all WSDL files used by the given WS-BPEL 2.0 Process
 * @param processFiles a list of files containing the complete content of a Apache ODE WS-BPEL 2.0zip file
 * @param csarId the identifier of the CSAR where this process/plan is declared
 * @return true if every WSDL file used by the process was updated (if needed) with endpoints fromthe openTOSCA Core, else false
 */
public boolean changeEndpoints(final List<File> processFiles,final CSARID csarId){
  this.csarId=csarId;
  final Map<QName,List<File>> unchangedFiles=new HashMap<>();
  final File deployXml=getDeployXML(processFiles);
  if (deployXml == null) {
    ODEEndpointUpdater.LOG.error(""String_Node_Str"");
    return false;
  }
  try {
    final List<QName> portsInDeployXml=getInvokedDeployXMLPorts(deployXml);
    if (!portsInDeployXml.isEmpty()) {
      for (      final QName portType : portsInDeployXml) {
        ODEEndpointUpdater.LOG.debug(""String_Node_Str"",portType);
      }
      final Map<QName,List<File>> changeMap=getWSDLtoChange(portsInDeployXml,getAllWSDLFiles(processFiles));
      unchangedFiles.putAll(this.updateInvokedWSDLAddresses(changeMap));
    }
 else {
      ODEEndpointUpdater.LOG.debug(""String_Node_Str"");
    }
  }
 catch (  final JAXBException e) {
    ODEEndpointUpdater.LOG.error(""String_Node_Str"",e);
  }
catch (  final WSDLException e) {
    ODEEndpointUpdater.LOG.error(""String_Node_Str"",e);
  }
  try {
    final List<QName> portsInDeployXml=getProvidedDeployXMLPorts(deployXml);
    final Map<QName,List<File>> changeMap=getWSDLtoChange(portsInDeployXml,getAllWSDLFiles(processFiles));
    unchangedFiles.putAll(this.updateProvidedWSDLAddresses(changeMap));
  }
 catch (  final JAXBException e) {
    e.printStackTrace();
  }
catch (  final WSDLException e) {
    e.printStackTrace();
  }
  for (  final QName portType : unchangedFiles.keySet()) {
    ODEEndpointUpdater.LOG.warn(""String_Node_Str"",portType.toString());
    for (    final File file : unchangedFiles.get(portType)) {
      ODEEndpointUpdater.LOG.warn(""String_Node_Str"",file.toPath().toString(),portType.toString());
    }
  }
  return true;
}"
40903,"@Override public BPELPlan buildPlan(final String csarName,final AbstractDefinitions definitions,final QName serviceTemplateId){
  for (  final AbstractServiceTemplate serviceTemplate : definitions.getServiceTemplates()) {
    String namespace;
    if (serviceTemplate.getTargetNamespace() != null) {
      namespace=serviceTemplate.getTargetNamespace();
    }
 else {
      namespace=definitions.getTargetNamespace();
    }
    if (namespace.equals(serviceTemplateId.getNamespaceURI()) && serviceTemplate.getId().equals(serviceTemplateId.getLocalPart())) {
      final String processName=serviceTemplate.getId() + ""String_Node_Str"";
      final String processNamespace=serviceTemplate.getTargetNamespace() + ""String_Node_Str"";
      final AbstractPlan buildPlan=this.generatePOG(new QName(processNamespace,processName).toString(),definitions,serviceTemplate);
      LOG.debug(""String_Node_Str"");
      LOG.debug(buildPlan.toString());
      final BPELPlan newBuildPlan=this.planHandler.createEmptyBPELPlan(processNamespace,processName,buildPlan,""String_Node_Str"");
      newBuildPlan.setTOSCAInterfaceName(""String_Node_Str"");
      newBuildPlan.setTOSCAOperationname(""String_Node_Str"");
      this.planHandler.initializeBPELSkeleton(newBuildPlan,csarName);
      this.instanceInit.addInstanceURLVarToTemplatePlans(newBuildPlan);
      this.instanceInit.addInstanceIDVarToTemplatePlans(newBuildPlan);
      this.planHandler.registerExtension(""String_Node_Str"",true,newBuildPlan);
      final PropertyMap propMap=this.propertyInitializer.initializePropertiesAsVariables(newBuildPlan);
      this.propertyOutputInitializer.initializeBuildPlanOutput(definitions,newBuildPlan,propMap);
      this.serviceInstanceInitializer.initializeInstanceDataFromInput(newBuildPlan);
      this.emptyPropInit.initializeEmptyPropertiesAsInputParam(newBuildPlan,propMap);
      runPlugins(newBuildPlan,propMap);
      this.serviceInstanceInitializer.addCorrellationID(newBuildPlan);
      this.serviceInstanceInitializer.appendSetServiceInstanceState(newBuildPlan,newBuildPlan.getBpelMainFlowElement(),""String_Node_Str"");
      this.serviceInstanceInitializer.appendSetServiceInstanceState(newBuildPlan,newBuildPlan.getBpelMainSequenceOutputAssignElement(),""String_Node_Str"");
      this.finalizer.finalize(newBuildPlan);
      BPELBuildProcessBuilder.LOG.debug(""String_Node_Str"");
      BPELBuildProcessBuilder.LOG.debug(ModelUtils.getStringFromDoc(newBuildPlan.getBpelDocument()));
      return newBuildPlan;
    }
  }
  BPELBuildProcessBuilder.LOG.warn(""String_Node_Str"",serviceTemplateId.toString(),definitions.getId(),csarName);
  return null;
}","@Override public BPELPlan buildPlan(final String csarName,final AbstractDefinitions definitions,final QName serviceTemplateId){
  for (  final AbstractServiceTemplate serviceTemplate : definitions.getServiceTemplates()) {
    String namespace;
    if (serviceTemplate.getTargetNamespace() != null) {
      namespace=serviceTemplate.getTargetNamespace();
    }
 else {
      namespace=definitions.getTargetNamespace();
    }
    if (namespace.equals(serviceTemplateId.getNamespaceURI()) && serviceTemplate.getId().equals(serviceTemplateId.getLocalPart())) {
      final String processName=ModelUtils.makeValidNCName(serviceTemplate.getId() + ""String_Node_Str"");
      final String processNamespace=serviceTemplate.getTargetNamespace() + ""String_Node_Str"";
      final AbstractPlan buildPlan=this.generatePOG(new QName(processNamespace,processName).toString(),definitions,serviceTemplate);
      LOG.debug(""String_Node_Str"");
      LOG.debug(buildPlan.toString());
      final BPELPlan newBuildPlan=this.planHandler.createEmptyBPELPlan(processNamespace,processName,buildPlan,""String_Node_Str"");
      newBuildPlan.setTOSCAInterfaceName(""String_Node_Str"");
      newBuildPlan.setTOSCAOperationname(""String_Node_Str"");
      this.planHandler.initializeBPELSkeleton(newBuildPlan,csarName);
      this.instanceInit.addInstanceURLVarToTemplatePlans(newBuildPlan);
      this.instanceInit.addInstanceIDVarToTemplatePlans(newBuildPlan);
      this.planHandler.registerExtension(""String_Node_Str"",true,newBuildPlan);
      final PropertyMap propMap=this.propertyInitializer.initializePropertiesAsVariables(newBuildPlan);
      this.propertyOutputInitializer.initializeBuildPlanOutput(definitions,newBuildPlan,propMap);
      this.serviceInstanceInitializer.initializeInstanceDataFromInput(newBuildPlan);
      this.emptyPropInit.initializeEmptyPropertiesAsInputParam(newBuildPlan,propMap);
      runPlugins(newBuildPlan,propMap);
      this.serviceInstanceInitializer.addCorrellationID(newBuildPlan);
      this.serviceInstanceInitializer.appendSetServiceInstanceState(newBuildPlan,newBuildPlan.getBpelMainFlowElement(),""String_Node_Str"");
      this.serviceInstanceInitializer.appendSetServiceInstanceState(newBuildPlan,newBuildPlan.getBpelMainSequenceOutputAssignElement(),""String_Node_Str"");
      this.finalizer.finalize(newBuildPlan);
      BPELBuildProcessBuilder.LOG.debug(""String_Node_Str"");
      BPELBuildProcessBuilder.LOG.debug(ModelUtils.getStringFromDoc(newBuildPlan.getBpelDocument()));
      return newBuildPlan;
    }
  }
  BPELBuildProcessBuilder.LOG.warn(""String_Node_Str"",serviceTemplateId.toString(),definitions.getId(),csarName);
  return null;
}"
40904,"public List<BPELPlan> buildScalingPlans(final String csarName,final AbstractDefinitions definitions,final QName serviceTemplateId){
  final List<BPELPlan> scalingPlans=new ArrayList<>();
  final AbstractServiceTemplate serviceTemplate=getServiceTemplate(definitions,serviceTemplateId);
  if (serviceTemplate == null) {
    return scalingPlans;
  }
  final Map<String,String> tags=serviceTemplate.getTags();
  if (!tags.containsKey(""String_Node_Str"")) {
    return scalingPlans;
  }
  final List<ScalingPlanDefinition> scalingPlanDefinitions=fetchScalingPlansDefinitions(serviceTemplate.getTopologyTemplate(),tags);
  for (  final ScalingPlanDefinition scalingPlanDefinition : scalingPlanDefinitions) {
    final String processName=serviceTemplate.getId() + ""String_Node_Str"" + scalingPlanDefinition.name;
    final String processNamespace=serviceTemplate.getTargetNamespace() + ""String_Node_Str"";
    final AbstractPlan abstractScaleOutPlan=generateSOG(new QName(processNamespace,processName).toString(),definitions,serviceTemplate,scalingPlanDefinition);
    printGraph(abstractScaleOutPlan);
    final BPELPlan bpelScaleOutProcess=this.planHandler.createEmptyBPELPlan(processNamespace,processName,abstractScaleOutPlan,""String_Node_Str"");
    bpelScaleOutProcess.setTOSCAInterfaceName(scalingPlanDefinition.name);
    bpelScaleOutProcess.setTOSCAOperationname(""String_Node_Str"");
    this.planHandler.initializeBPELSkeleton(bpelScaleOutProcess,csarName);
    final PropertyMap propMap=this.propertyInitializer.initializePropertiesAsVariables(bpelScaleOutProcess);
    this.planHandler.registerExtension(""String_Node_Str"",true,bpelScaleOutProcess);
    this.serviceInstanceInitializer.addManagementPlanServiceInstanceVarHandlingFromInput(bpelScaleOutProcess);
    this.instanceInitializer.addInstanceURLVarToTemplatePlans(bpelScaleOutProcess);
    this.instanceInitializer.addInstanceIDVarToTemplatePlans(bpelScaleOutProcess);
    this.serviceInstanceInitializer.addCorrellationID(bpelScaleOutProcess);
    final List<BPELScopeActivity> provScopeActivities=new ArrayList<>();
    for (    final BPELScopeActivity act : bpelScaleOutProcess.getAbstract2BPEL().values()) {
      if (act.getNodeTemplate() != null && scalingPlanDefinition.nodeTemplates.contains(act.getNodeTemplate())) {
        provScopeActivities.add(act);
      }
 else       if (act.getRelationshipTemplate() != null && scalingPlanDefinition.relationshipTemplates.contains(act.getRelationshipTemplate())) {
        provScopeActivities.add(act);
      }
    }
    this.emptyPropInit.initializeEmptyPropertiesAsInputParam(provScopeActivities,bpelScaleOutProcess,propMap);
    this.runProvisioningLogicGeneration(bpelScaleOutProcess,propMap,scalingPlanDefinition.nodeTemplates,scalingPlanDefinition.relationshipTemplates);
    for (    final AbstractRelationshipTemplate relationshipTemplate : scalingPlanDefinition.relationshipTemplatesRecursiveSelection) {
      this.addRecursiveInstanceSelection(bpelScaleOutProcess,propMap,relationshipTemplate);
    }
    for (    final AbstractNodeTemplate nodeTemplate : scalingPlanDefinition.nodeTemplatesRecursiveSelection) {
      this.addRecursiveInstanceSelection(bpelScaleOutProcess,propMap,nodeTemplate);
    }
    for (    final AnnotatedAbstractNodeTemplate stratNodeTemplate : scalingPlanDefinition.selectionStrategy2BorderNodes) {
      final IScalingPlanBuilderSelectionPlugin selectionPlugin=findSelectionPlugin(stratNodeTemplate);
      if (selectionPlugin != null) {
        final BPELScopeActivity scope=this.planHandler.getTemplateBuildPlanById(stratNodeTemplate.getId(),bpelScaleOutProcess);
        selectionPlugin.handle(new BPELPlanContext(scope,propMap,serviceTemplate),stratNodeTemplate,new ArrayList<>(stratNodeTemplate.getAnnotations()));
      }
    }
    for (    final AbstractActivity activ : bpelScaleOutProcess.getActivites()) {
      if (activ.getType().equals(ActivityType.PROVISIONING)) {
        addInstanceIdToOutput(bpelScaleOutProcess.getAbstract2BPEL().get(activ));
      }
    }
    this.finalizer.finalize(bpelScaleOutProcess);
    scalingPlans.add(bpelScaleOutProcess);
  }
  return scalingPlans;
}","public List<BPELPlan> buildScalingPlans(final String csarName,final AbstractDefinitions definitions,final QName serviceTemplateId){
  final List<BPELPlan> scalingPlans=new ArrayList<>();
  final AbstractServiceTemplate serviceTemplate=getServiceTemplate(definitions,serviceTemplateId);
  if (serviceTemplate == null) {
    return scalingPlans;
  }
  final Map<String,String> tags=serviceTemplate.getTags();
  if (!tags.containsKey(""String_Node_Str"")) {
    return scalingPlans;
  }
  final List<ScalingPlanDefinition> scalingPlanDefinitions=fetchScalingPlansDefinitions(serviceTemplate.getTopologyTemplate(),tags);
  for (  final ScalingPlanDefinition scalingPlanDefinition : scalingPlanDefinitions) {
    final String processName=ModelUtils.makeValidNCName(serviceTemplate.getId() + ""String_Node_Str"" + scalingPlanDefinition.name);
    final String processNamespace=serviceTemplate.getTargetNamespace() + ""String_Node_Str"";
    final AbstractPlan abstractScaleOutPlan=generateSOG(new QName(processNamespace,processName).toString(),definitions,serviceTemplate,scalingPlanDefinition);
    printGraph(abstractScaleOutPlan);
    final BPELPlan bpelScaleOutProcess=this.planHandler.createEmptyBPELPlan(processNamespace,processName,abstractScaleOutPlan,""String_Node_Str"");
    bpelScaleOutProcess.setTOSCAInterfaceName(scalingPlanDefinition.name);
    bpelScaleOutProcess.setTOSCAOperationname(""String_Node_Str"");
    this.planHandler.initializeBPELSkeleton(bpelScaleOutProcess,csarName);
    final PropertyMap propMap=this.propertyInitializer.initializePropertiesAsVariables(bpelScaleOutProcess);
    this.planHandler.registerExtension(""String_Node_Str"",true,bpelScaleOutProcess);
    this.serviceInstanceInitializer.addManagementPlanServiceInstanceVarHandlingFromInput(bpelScaleOutProcess);
    this.instanceInitializer.addInstanceURLVarToTemplatePlans(bpelScaleOutProcess);
    this.instanceInitializer.addInstanceIDVarToTemplatePlans(bpelScaleOutProcess);
    this.serviceInstanceInitializer.addCorrellationID(bpelScaleOutProcess);
    final List<BPELScopeActivity> provScopeActivities=new ArrayList<>();
    for (    final BPELScopeActivity act : bpelScaleOutProcess.getAbstract2BPEL().values()) {
      if (act.getNodeTemplate() != null && scalingPlanDefinition.nodeTemplates.contains(act.getNodeTemplate())) {
        provScopeActivities.add(act);
      }
 else       if (act.getRelationshipTemplate() != null && scalingPlanDefinition.relationshipTemplates.contains(act.getRelationshipTemplate())) {
        provScopeActivities.add(act);
      }
    }
    this.emptyPropInit.initializeEmptyPropertiesAsInputParam(provScopeActivities,bpelScaleOutProcess,propMap);
    this.runProvisioningLogicGeneration(bpelScaleOutProcess,propMap,scalingPlanDefinition.nodeTemplates,scalingPlanDefinition.relationshipTemplates);
    for (    final AbstractRelationshipTemplate relationshipTemplate : scalingPlanDefinition.relationshipTemplatesRecursiveSelection) {
      this.addRecursiveInstanceSelection(bpelScaleOutProcess,propMap,relationshipTemplate);
    }
    for (    final AbstractNodeTemplate nodeTemplate : scalingPlanDefinition.nodeTemplatesRecursiveSelection) {
      this.addRecursiveInstanceSelection(bpelScaleOutProcess,propMap,nodeTemplate);
    }
    for (    final AnnotatedAbstractNodeTemplate stratNodeTemplate : scalingPlanDefinition.selectionStrategy2BorderNodes) {
      final IScalingPlanBuilderSelectionPlugin selectionPlugin=findSelectionPlugin(stratNodeTemplate);
      if (selectionPlugin != null) {
        final BPELScopeActivity scope=this.planHandler.getTemplateBuildPlanById(stratNodeTemplate.getId(),bpelScaleOutProcess);
        selectionPlugin.handle(new BPELPlanContext(scope,propMap,serviceTemplate),stratNodeTemplate,new ArrayList<>(stratNodeTemplate.getAnnotations()));
      }
    }
    for (    final AbstractActivity activ : bpelScaleOutProcess.getActivites()) {
      if (activ.getType().equals(ActivityType.PROVISIONING)) {
        addInstanceIdToOutput(bpelScaleOutProcess.getAbstract2BPEL().get(activ));
      }
    }
    this.finalizer.finalize(bpelScaleOutProcess);
    scalingPlans.add(bpelScaleOutProcess);
  }
  return scalingPlans;
}"
40905,"@Override public BPELPlan buildPlan(final String csarName,final AbstractDefinitions definitions,final QName serviceTemplateId){
  for (  final AbstractServiceTemplate serviceTemplate : definitions.getServiceTemplates()) {
    String namespace;
    if (serviceTemplate.getTargetNamespace() != null) {
      namespace=serviceTemplate.getTargetNamespace();
    }
 else {
      namespace=definitions.getTargetNamespace();
    }
    if (namespace.equals(serviceTemplateId.getNamespaceURI()) && serviceTemplate.getId().equals(serviceTemplateId.getLocalPart())) {
      final String processName=serviceTemplate.getId() + ""String_Node_Str"";
      final String processNamespace=serviceTemplate.getTargetNamespace() + ""String_Node_Str"";
      final AbstractPlan newAbstractTerminationPlan=generateTOG(new QName(processNamespace,processName).toString(),definitions,serviceTemplate);
      final BPELPlan newTerminationPlan=this.planHandler.createEmptyBPELPlan(processNamespace,processName,newAbstractTerminationPlan,""String_Node_Str"");
      newTerminationPlan.setTOSCAInterfaceName(""String_Node_Str"");
      newTerminationPlan.setTOSCAOperationname(""String_Node_Str"");
      this.planHandler.initializeBPELSkeleton(newTerminationPlan,csarName);
      this.instanceVarsHandler.addInstanceURLVarToTemplatePlans(newTerminationPlan);
      this.instanceVarsHandler.addInstanceIDVarToTemplatePlans(newTerminationPlan);
      final PropertyMap propMap=this.propertyInitializer.initializePropertiesAsVariables(newTerminationPlan);
      this.planHandler.registerExtension(""String_Node_Str"",true,newTerminationPlan);
      this.serviceInstanceVarsHandler.addManagementPlanServiceInstanceVarHandlingFromInput(newTerminationPlan);
      this.serviceInstanceVarsHandler.initPropertyVariablesFromInstanceData(newTerminationPlan,propMap);
      this.instanceVarsHandler.addNodeInstanceFindLogic(newTerminationPlan,""String_Node_Str"");
      this.instanceVarsHandler.addPropertyVariableUpdateBasedOnNodeInstanceID(newTerminationPlan,propMap);
      final List<BPELScopeActivity> changedActivities=runPlugins(newTerminationPlan,propMap);
      this.serviceInstanceVarsHandler.appendSetServiceInstanceState(newTerminationPlan,newTerminationPlan.getBpelMainSequenceOutputAssignElement(),""String_Node_Str"");
      this.serviceInstanceVarsHandler.addCorrellationID(newTerminationPlan);
      this.finalizer.finalize(newTerminationPlan);
      for (      final BPELScopeActivity activ : changedActivities) {
        if (activ.getNodeTemplate() != null) {
          final BPELPlanContext context=new BPELPlanContext(activ,propMap,newTerminationPlan.getServiceTemplate());
          this.instanceVarsHandler.appendCountInstancesLogic(context,activ.getNodeTemplate(),""String_Node_Str"");
        }
      }
      BPELTerminationProcessBuilder.LOG.debug(""String_Node_Str"");
      BPELTerminationProcessBuilder.LOG.debug(ModelUtils.getStringFromDoc(newTerminationPlan.getBpelDocument()));
      return newTerminationPlan;
    }
  }
  BPELTerminationProcessBuilder.LOG.warn(""String_Node_Str"",serviceTemplateId.toString(),definitions.getId(),csarName);
  return null;
}","@Override public BPELPlan buildPlan(final String csarName,final AbstractDefinitions definitions,final QName serviceTemplateId){
  for (  final AbstractServiceTemplate serviceTemplate : definitions.getServiceTemplates()) {
    String namespace;
    if (serviceTemplate.getTargetNamespace() != null) {
      namespace=serviceTemplate.getTargetNamespace();
    }
 else {
      namespace=definitions.getTargetNamespace();
    }
    if (namespace.equals(serviceTemplateId.getNamespaceURI()) && serviceTemplate.getId().equals(serviceTemplateId.getLocalPart())) {
      final String processName=ModelUtils.makeValidNCName(serviceTemplate.getId() + ""String_Node_Str"");
      final String processNamespace=serviceTemplate.getTargetNamespace() + ""String_Node_Str"";
      final AbstractPlan newAbstractTerminationPlan=generateTOG(new QName(processNamespace,processName).toString(),definitions,serviceTemplate);
      final BPELPlan newTerminationPlan=this.planHandler.createEmptyBPELPlan(processNamespace,processName,newAbstractTerminationPlan,""String_Node_Str"");
      newTerminationPlan.setTOSCAInterfaceName(""String_Node_Str"");
      newTerminationPlan.setTOSCAOperationname(""String_Node_Str"");
      this.planHandler.initializeBPELSkeleton(newTerminationPlan,csarName);
      this.instanceVarsHandler.addInstanceURLVarToTemplatePlans(newTerminationPlan);
      this.instanceVarsHandler.addInstanceIDVarToTemplatePlans(newTerminationPlan);
      final PropertyMap propMap=this.propertyInitializer.initializePropertiesAsVariables(newTerminationPlan);
      this.planHandler.registerExtension(""String_Node_Str"",true,newTerminationPlan);
      this.serviceInstanceVarsHandler.addManagementPlanServiceInstanceVarHandlingFromInput(newTerminationPlan);
      this.serviceInstanceVarsHandler.initPropertyVariablesFromInstanceData(newTerminationPlan,propMap);
      this.instanceVarsHandler.addNodeInstanceFindLogic(newTerminationPlan,""String_Node_Str"");
      this.instanceVarsHandler.addPropertyVariableUpdateBasedOnNodeInstanceID(newTerminationPlan,propMap);
      final List<BPELScopeActivity> changedActivities=runPlugins(newTerminationPlan,propMap);
      this.serviceInstanceVarsHandler.appendSetServiceInstanceState(newTerminationPlan,newTerminationPlan.getBpelMainSequenceOutputAssignElement(),""String_Node_Str"");
      this.serviceInstanceVarsHandler.addCorrellationID(newTerminationPlan);
      this.finalizer.finalize(newTerminationPlan);
      for (      final BPELScopeActivity activ : changedActivities) {
        if (activ.getNodeTemplate() != null) {
          final BPELPlanContext context=new BPELPlanContext(activ,propMap,newTerminationPlan.getServiceTemplate());
          this.instanceVarsHandler.appendCountInstancesLogic(context,activ.getNodeTemplate(),""String_Node_Str"");
        }
      }
      BPELTerminationProcessBuilder.LOG.debug(""String_Node_Str"");
      BPELTerminationProcessBuilder.LOG.debug(ModelUtils.getStringFromDoc(newTerminationPlan.getBpelDocument()));
      return newTerminationPlan;
    }
  }
  BPELTerminationProcessBuilder.LOG.warn(""String_Node_Str"",serviceTemplateId.toString(),definitions.getId(),csarName);
  return null;
}"
40906,"public String findInstanceIDVar(final String templateId,final boolean isNode){
  final String instanceURLVarName=(isNode ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + templateId.replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
  final List<String> varNames=getMainVariableNames();
  for (  final String varName : varNames) {
    if (varName.contains(instanceURLVarName)) {
      return varName;
    }
  }
  return null;
}","public String findInstanceIDVar(final String templateId,final boolean isNode){
  final String instanceURLVarName=(isNode ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + ModelUtils.makeValidNCName(templateId)+ ""String_Node_Str"";
  final List<String> varNames=getMainVariableNames();
  for (  final String varName : varNames) {
    if (varName.contains(instanceURLVarName)) {
      return varName;
    }
  }
  return null;
}"
40907,"public String findInstanceURLVar(final String templateId,final boolean isNode){
  final String instanceURLVarName=(isNode ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + templateId.replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
  for (  final String varName : getMainVariableNames()) {
    if (varName.contains(instanceURLVarName)) {
      return varName;
    }
  }
  return null;
}","public String findInstanceURLVar(final String templateId,final boolean isNode){
  final String instanceURLVarName=(isNode ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + ModelUtils.makeValidNCName(templateId)+ ""String_Node_Str"";
  for (  final String varName : getMainVariableNames()) {
    if (varName.contains(instanceURLVarName)) {
      return varName;
    }
  }
  return null;
}"
40908,"public boolean addInstanceIDVarToTemplatePlan(final BPELScopeActivity templatePlan){
  final String xsdPrefix=""String_Node_Str"" + System.currentTimeMillis();
  final String xsdNamespace=""String_Node_Str"";
  this.bpelProcessHandler.addNamespaceToBPELDoc(xsdPrefix,xsdNamespace,templatePlan.getBuildPlan());
  String templateId=""String_Node_Str"";
  String prefix=""String_Node_Str"";
  if (templatePlan.getNodeTemplate() != null) {
    templateId=templatePlan.getNodeTemplate().getId();
    prefix=""String_Node_Str"";
  }
 else {
    templateId=templatePlan.getRelationshipTemplate().getId();
    prefix=""String_Node_Str"";
  }
  final String instanceIdVarName=prefix + InstanceIDVarKeyword + ""String_Node_Str""+ templateId.replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ System.currentTimeMillis();
  return this.bpelProcessHandler.addVariable(instanceIdVarName,VariableType.TYPE,new QName(xsdNamespace,""String_Node_Str"",xsdPrefix),templatePlan.getBuildPlan());
}","public boolean addInstanceIDVarToTemplatePlan(final BPELScopeActivity templatePlan){
  final String xsdPrefix=""String_Node_Str"" + System.currentTimeMillis();
  final String xsdNamespace=""String_Node_Str"";
  this.bpelProcessHandler.addNamespaceToBPELDoc(xsdPrefix,xsdNamespace,templatePlan.getBuildPlan());
  String templateId=""String_Node_Str"";
  String prefix=""String_Node_Str"";
  if (templatePlan.getNodeTemplate() != null) {
    templateId=templatePlan.getNodeTemplate().getId();
    prefix=""String_Node_Str"";
  }
 else {
    templateId=templatePlan.getRelationshipTemplate().getId();
    prefix=""String_Node_Str"";
  }
  final String instanceIdVarName=prefix + InstanceIDVarKeyword + ""String_Node_Str""+ ModelUtils.makeValidNCName(templateId)+ ""String_Node_Str""+ System.currentTimeMillis();
  return this.bpelProcessHandler.addVariable(instanceIdVarName,VariableType.TYPE,new QName(xsdNamespace,""String_Node_Str"",xsdPrefix),templatePlan.getBuildPlan());
}"
40909,"private String findInstanceIdVarName(final List<String> varNames,final String templateId,final boolean isNode){
  final String instanceURLVarName=(isNode ? ""String_Node_Str"" : ""String_Node_Str"") + InstanceURLVarKeyword + ""String_Node_Str""+ templateId.replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
  for (  final String varName : varNames) {
    if (varName.contains(instanceURLVarName)) {
      return varName;
    }
  }
  return null;
}","private String findInstanceIdVarName(final List<String> varNames,final String templateId,final boolean isNode){
  final String instanceURLVarName=(isNode ? ""String_Node_Str"" : ""String_Node_Str"") + InstanceURLVarKeyword + ""String_Node_Str""+ ModelUtils.makeValidNCName(templateId)+ ""String_Node_Str"";
  for (  final String varName : varNames) {
    if (varName.contains(instanceURLVarName)) {
      return varName;
    }
  }
  return null;
}"
40910,"/** 
 * Adds a NodeInstanceID Variable to the given TemplatePlan
 * @param templatePlan a TemplatePlan
 * @return true iff adding a NodeInstanceID Var was successful
 */
public boolean addInstanceURLVarToTemplatePlan(final BPELScopeActivity templatePlan){
  final String xsdPrefix=""String_Node_Str"" + System.currentTimeMillis();
  final String xsdNamespace=""String_Node_Str"";
  this.bpelProcessHandler.addNamespaceToBPELDoc(xsdPrefix,xsdNamespace,templatePlan.getBuildPlan());
  String templateId=""String_Node_Str"";
  String prefix=""String_Node_Str"";
  if (templatePlan.getNodeTemplate() != null) {
    templateId=templatePlan.getNodeTemplate().getId();
    prefix=""String_Node_Str"";
  }
 else {
    templateId=templatePlan.getRelationshipTemplate().getId();
    prefix=""String_Node_Str"";
  }
  final String instanceIdVarName=prefix + InstanceURLVarKeyword + ""String_Node_Str""+ templateId.replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ System.currentTimeMillis();
  return this.bpelProcessHandler.addVariable(instanceIdVarName,VariableType.TYPE,new QName(xsdNamespace,""String_Node_Str"",xsdPrefix),templatePlan.getBuildPlan());
}","/** 
 * Adds a NodeInstanceID Variable to the given TemplatePlan
 * @param templatePlan a TemplatePlan
 * @return true iff adding a NodeInstanceID Var was successful
 */
public boolean addInstanceURLVarToTemplatePlan(final BPELScopeActivity templatePlan){
  final String xsdPrefix=""String_Node_Str"" + System.currentTimeMillis();
  final String xsdNamespace=""String_Node_Str"";
  this.bpelProcessHandler.addNamespaceToBPELDoc(xsdPrefix,xsdNamespace,templatePlan.getBuildPlan());
  String templateId=""String_Node_Str"";
  String prefix=""String_Node_Str"";
  if (templatePlan.getNodeTemplate() != null) {
    templateId=templatePlan.getNodeTemplate().getId();
    prefix=""String_Node_Str"";
  }
 else {
    templateId=templatePlan.getRelationshipTemplate().getId();
    prefix=""String_Node_Str"";
  }
  final String instanceIdVarName=prefix + InstanceURLVarKeyword + ""String_Node_Str""+ ModelUtils.makeValidNCName(templateId)+ ""String_Node_Str""+ System.currentTimeMillis();
  return this.bpelProcessHandler.addVariable(instanceIdVarName,VariableType.TYPE,new QName(xsdNamespace,""String_Node_Str"",xsdPrefix),templatePlan.getBuildPlan());
}"
40911,"/** 
 * Initializes Property variables and mappings for a TemplateBuildPlan which handles a RelationshipTemplate
 * @param map the PropertyMap to save the result to
 * @param templatePlan a TemplateBuildPlan which handles a RelationshipTemplate
 */
private void initPropsAsVarsInRelationship(final PropertyMap map,final BPELScopeActivity templatePlan){
  final AbstractRelationshipTemplate relationshipTemplate=templatePlan.getRelationshipTemplate();
  if (relationshipTemplate.getProperties() != null) {
    final Element propertyElement=relationshipTemplate.getProperties().getDOMElement();
    for (int i=0; i < propertyElement.getChildNodes().getLength(); i++) {
      if (propertyElement.getChildNodes().item(i).getNodeType() == Node.TEXT_NODE) {
        continue;
      }
      final String propName=propertyElement.getChildNodes().item(i).getLocalName();
      final String propVarName=relationshipTemplate.getId().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + propertyElement.getChildNodes().item(i).getLocalName();
      map.addPropertyMapping(relationshipTemplate.getId(),propName,""String_Node_Str"" + propVarName);
      String value=""String_Node_Str"";
      for (int j=0; j < propertyElement.getChildNodes().item(i).getChildNodes().getLength(); j++) {
        if (propertyElement.getChildNodes().item(i).getChildNodes().item(j).getNodeType() == Node.TEXT_NODE) {
          value+=propertyElement.getChildNodes().item(i).getChildNodes().item(j).getNodeValue();
        }
      }
      PropertyVariableInitializer.LOG.debug(""String_Node_Str"" + propVarName);
      PropertyVariableInitializer.LOG.debug(""String_Node_Str"" + value);
      this.planHandler.addPropertyVariable(propVarName,templatePlan.getBuildPlan());
      if (!value.trim().isEmpty() && !value.trim().equals(""String_Node_Str"")) {
        this.planHandler.initializePropertyVariable(propVarName,value,templatePlan.getBuildPlan());
      }
    }
  }
}","/** 
 * Initializes Property variables and mappings for a TemplateBuildPlan which handles a RelationshipTemplate
 * @param map the PropertyMap to save the result to
 * @param templatePlan a TemplateBuildPlan which handles a RelationshipTemplate
 */
private void initPropsAsVarsInRelationship(final PropertyMap map,final BPELScopeActivity templatePlan){
  final AbstractRelationshipTemplate relationshipTemplate=templatePlan.getRelationshipTemplate();
  if (relationshipTemplate.getProperties() != null) {
    final Element propertyElement=relationshipTemplate.getProperties().getDOMElement();
    for (int i=0; i < propertyElement.getChildNodes().getLength(); i++) {
      if (propertyElement.getChildNodes().item(i).getNodeType() == Node.TEXT_NODE) {
        continue;
      }
      final String propName=propertyElement.getChildNodes().item(i).getLocalName();
      final String propVarName=ModelUtils.makeValidNCName(relationshipTemplate.getId()) + ""String_Node_Str"" + propertyElement.getChildNodes().item(i).getLocalName();
      map.addPropertyMapping(relationshipTemplate.getId(),propName,""String_Node_Str"" + propVarName);
      String value=""String_Node_Str"";
      for (int j=0; j < propertyElement.getChildNodes().item(i).getChildNodes().getLength(); j++) {
        if (propertyElement.getChildNodes().item(i).getChildNodes().item(j).getNodeType() == Node.TEXT_NODE) {
          value+=propertyElement.getChildNodes().item(i).getChildNodes().item(j).getNodeValue();
        }
      }
      PropertyVariableInitializer.LOG.debug(""String_Node_Str"" + propVarName);
      PropertyVariableInitializer.LOG.debug(""String_Node_Str"" + value);
      this.planHandler.addPropertyVariable(propVarName,templatePlan.getBuildPlan());
      if (!value.trim().isEmpty() && !value.trim().equals(""String_Node_Str"")) {
        this.planHandler.initializePropertyVariable(propVarName,value,templatePlan.getBuildPlan());
      }
    }
  }
}"
40912,"/** 
 * Initializes Property variables for the given TemplateBuildPlan which handles a NodeTemplate
 * @param map a PropertyMap to save the result/mappings to
 * @param templatePlan a TemplateBuildPlan which handles a NodeTemplate
 */
private void initPropsAsVarsInNode(final PropertyMap map,final BPELScopeActivity templatePlan){
  final AbstractNodeTemplate nodeTemplate=templatePlan.getNodeTemplate();
  if (nodeTemplate.getProperties() != null) {
    final Element propertyElement=nodeTemplate.getProperties().getDOMElement();
    for (int i=0; i < propertyElement.getChildNodes().getLength(); i++) {
      if (propertyElement.getChildNodes().item(i).getNodeType() == Node.TEXT_NODE) {
        continue;
      }
      final String propName=propertyElement.getChildNodes().item(i).getLocalName();
      final String propVarName=nodeTemplate.getId().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + propertyElement.getChildNodes().item(i).getLocalName();
      map.addPropertyMapping(nodeTemplate.getId(),propName,""String_Node_Str"" + propVarName);
      String value=""String_Node_Str"";
      for (int j=0; j < propertyElement.getChildNodes().item(i).getChildNodes().getLength(); j++) {
        if (propertyElement.getChildNodes().item(i).getChildNodes().item(j).getNodeType() == Node.TEXT_NODE) {
          value+=propertyElement.getChildNodes().item(i).getChildNodes().item(j).getNodeValue();
        }
      }
      PropertyVariableInitializer.LOG.debug(""String_Node_Str"" + propVarName);
      PropertyVariableInitializer.LOG.debug(""String_Node_Str"" + value);
      this.planHandler.addPropertyVariable(propVarName,templatePlan.getBuildPlan());
      this.planHandler.initializePropertyVariable(propVarName,value,templatePlan.getBuildPlan());
    }
  }
}","/** 
 * Initializes Property variables for the given TemplateBuildPlan which handles a NodeTemplate
 * @param map a PropertyMap to save the result/mappings to
 * @param templatePlan a TemplateBuildPlan which handles a NodeTemplate
 */
private void initPropsAsVarsInNode(final PropertyMap map,final BPELScopeActivity templatePlan){
  final AbstractNodeTemplate nodeTemplate=templatePlan.getNodeTemplate();
  if (nodeTemplate.getProperties() != null) {
    final Element propertyElement=nodeTemplate.getProperties().getDOMElement();
    for (int i=0; i < propertyElement.getChildNodes().getLength(); i++) {
      if (propertyElement.getChildNodes().item(i).getNodeType() == Node.TEXT_NODE) {
        continue;
      }
      final String propName=propertyElement.getChildNodes().item(i).getLocalName();
      final String propVarName=ModelUtils.makeValidNCName(nodeTemplate.getId()) + ""String_Node_Str"" + propertyElement.getChildNodes().item(i).getLocalName();
      map.addPropertyMapping(nodeTemplate.getId(),propName,""String_Node_Str"" + propVarName);
      String value=""String_Node_Str"";
      for (int j=0; j < propertyElement.getChildNodes().item(i).getChildNodes().getLength(); j++) {
        if (propertyElement.getChildNodes().item(i).getChildNodes().item(j).getNodeType() == Node.TEXT_NODE) {
          value+=propertyElement.getChildNodes().item(i).getChildNodes().item(j).getNodeValue();
        }
      }
      PropertyVariableInitializer.LOG.debug(""String_Node_Str"" + propVarName);
      PropertyVariableInitializer.LOG.debug(""String_Node_Str"" + value);
      this.planHandler.addPropertyVariable(propVarName,templatePlan.getBuildPlan());
      this.planHandler.initializePropertyVariable(propVarName,value,templatePlan.getBuildPlan());
    }
  }
}"
40913,"public String createInstanceIDVar(final BPELPlanContext context,final String templateId){
  final String instanceURLVarName=(context.getRelationshipTemplate() == null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + templateId.replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ context.getIdForNames();
  final QName stringTypeDeclId=context.importQName(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  if (!context.addGlobalVariable(instanceURLVarName,BPELPlan.VariableType.TYPE,stringTypeDeclId)) {
    return null;
  }
  return instanceURLVarName;
}","public String createInstanceIDVar(final BPELPlanContext context,final String templateId){
  final String instanceURLVarName=(context.getRelationshipTemplate() == null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + ModelUtils.makeValidNCName(templateId)+ ""String_Node_Str""+ context.getIdForNames();
  final QName stringTypeDeclId=context.importQName(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  if (!context.addGlobalVariable(instanceURLVarName,BPELPlan.VariableType.TYPE,stringTypeDeclId)) {
    return null;
  }
  return instanceURLVarName;
}"
40914,"public String createInstanceURLVar(final BPELPlanContext context,final String templateId){
  final String instanceURLVarName=(context.getRelationshipTemplate() == null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + templateId.replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ context.getIdForNames();
  final QName stringTypeDeclId=context.importQName(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  if (!context.addGlobalVariable(instanceURLVarName,BPELPlan.VariableType.TYPE,stringTypeDeclId)) {
    return null;
  }
  return instanceURLVarName;
}","public String createInstanceURLVar(final BPELPlanContext context,final String templateId){
  final String instanceURLVarName=(context.getRelationshipTemplate() == null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + ModelUtils.makeValidNCName(templateId)+ ""String_Node_Str""+ context.getIdForNames();
  final QName stringTypeDeclId=context.importQName(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  if (!context.addGlobalVariable(instanceURLVarName,BPELPlan.VariableType.TYPE,stringTypeDeclId)) {
    return null;
  }
  return instanceURLVarName;
}"
40915,"private String createStateVar(final BPELPlanContext context,final String templateId){
  final String stateVarName=templateId.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + context.getIdForNames();
  final QName stringTypeDeclId=context.importQName(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  if (!context.addGlobalVariable(stateVarName,BPELPlan.VariableType.TYPE,stringTypeDeclId)) {
    return null;
  }
  return stateVarName;
}","private String createStateVar(final BPELPlanContext context,final String templateId){
  final String stateVarName=ModelUtils.makeValidNCName(templateId) + ""String_Node_Str"" + context.getIdForNames();
  final QName stringTypeDeclId=context.importQName(new QName(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  if (!context.addGlobalVariable(stateVarName,BPELPlan.VariableType.TYPE,stringTypeDeclId)) {
    return null;
  }
  return stateVarName;
}"
40916,"@Override public void run(){
  LOG.debug(""String_Node_Str"");
  this.state.currentState=PlanGenerationState.PlanGenerationStates.CSARDOWNLOADING;
  final IHTTPService openToscaHttpService=ServiceRegistry.getHTTPService();
  if (openToscaHttpService == null) {
    this.state.currentState=PlanGenerationStates.CSARDOWNLOADFAILED;
    this.state.currentMessage=""String_Node_Str"";
    LOG.error(""String_Node_Str"");
    return;
  }
  CSARID csarId=null;
  InputStream csarInputStream=null;
  try {
    LOG.debug(""String_Node_Str"" + this.state.getCsarUrl());
    final Map<String,String> headers=new HashMap<>();
    headers.put(""String_Node_Str"",""String_Node_Str"");
    final HttpResponse csarResponse=openToscaHttpService.Get(this.state.getCsarUrl().toString(),headers);
    csarInputStream=csarResponse.getEntity().getContent();
    String fileName=null;
    for (    final org.apache.http.Header header : csarResponse.getAllHeaders()) {
      if (header.getName().contains(""String_Node_Str"")) {
        for (        final HeaderElement elem : header.getElements()) {
          if (elem.getName().equals(""String_Node_Str"")) {
            for (            final NameValuePair nameValuePair : elem.getParameters()) {
              if (nameValuePair.getName().equals(""String_Node_Str"")) {
                fileName=nameValuePair.getValue();
              }
            }
          }
        }
      }
    }
    if (fileName == null) {
      fileName=this.state.getCsarUrl().toString().replace(""String_Node_Str"",""String_Node_Str"");
      if (fileName.endsWith(""String_Node_Str"")) {
        fileName=fileName.substring(0,fileName.length() - 1);
      }
      fileName=fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
    }
    this.state.currentState=PlanGenerationStates.CSARDOWNLOADED;
    this.state.currentMessage=""String_Node_Str"";
    LOG.debug(""String_Node_Str"");
    if (fileName == null) {
      LOG.debug(""String_Node_Str"");
      this.state.currentState=PlanGenerationStates.CSARDOWNLOADFAILED;
      this.state.currentMessage=""String_Node_Str"";
      return;
    }
    fileName=fileName.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + System.currentTimeMillis()+ ""String_Node_Str"";
    LOG.debug(""String_Node_Str"");
    csarId=Util.storeCSAR(fileName,csarInputStream);
  }
 catch (  final ClientProtocolException e) {
    this.state.currentState=PlanGenerationStates.CSARDOWNLOADFAILED;
    this.state.currentMessage=""String_Node_Str"";
    LOG.error(""String_Node_Str"");
    return;
  }
catch (  final IOException e) {
    this.state.currentState=PlanGenerationStates.CSARDOWNLOADFAILED;
    this.state.currentMessage=""String_Node_Str"";
    LOG.error(""String_Node_Str"");
    return;
  }
  if (csarInputStream == null) {
    this.state.currentState=PlanGenerationStates.CSARDOWNLOADFAILED;
    this.state.currentMessage=""String_Node_Str"";
    LOG.error(""String_Node_Str"");
    return;
  }
  if (csarId != null) {
    this.state.currentState=PlanGenerationStates.PLANGENERATING;
    this.state.currentMessage=""String_Node_Str"";
    LOG.debug(""String_Node_Str"");
  }
 else {
    this.state.currentState=PlanGenerationStates.CSARDOWNLOADFAILED;
    this.state.currentMessage=""String_Node_Str"";
    LOG.error(""String_Node_Str"");
    Util.deleteCSAR(csarId);
    return;
  }
  final List<AbstractPlan> buildPlans=Util.startPlanBuilder(csarId);
  if (buildPlans.size() <= 0) {
    this.state.currentState=PlanGenerationStates.PLANGENERATIONFAILED;
    this.state.currentMessage=""String_Node_Str"";
    Util.deleteCSAR(csarId);
    LOG.error(""String_Node_Str"");
    return;
  }
  this.state.currentState=PlanGenerationStates.PLANSGENERATED;
  this.state.currentMessage=""String_Node_Str"";
  LOG.debug(""String_Node_Str"");
  final Map<BPELPlan,File> plansToUpload=new HashMap<>();
  for (  final AbstractPlan buildPlan : buildPlans) {
    final File planTmpFile=Util.writePlan2TmpFolder((BPELPlan)buildPlan);
    plansToUpload.put((BPELPlan)buildPlan,planTmpFile);
  }
  LOG.debug(""String_Node_Str"" + buildPlans.size());
  for (  final AbstractPlan buildPlan : plansToUpload.keySet()) {
    final File planTmpFile=plansToUpload.get(buildPlan);
    final List<String> inputParameters=((BPELPlan)buildPlan).getWsdl().getInputMessageLocalNames();
    final List<String> outputParameters=((BPELPlan)buildPlan).getWsdl().getOuputMessageLocalNames();
    final JSONObject obj=new JSONObject();
    obj.put(""String_Node_Str"",buildPlan.getId());
    obj.put(""String_Node_Str"",buildPlan.getType().getString());
    obj.put(""String_Node_Str"",((BPELPlan)buildPlan).bpelNamespace);
    final HttpEntity ent=EntityBuilder.create().setText(obj.toJSONString()).setContentType(ContentType.APPLICATION_JSON).build();
    HttpResponse createPlanResponse=null;
    try {
      createPlanResponse=openToscaHttpService.Post(getState().getPostUrl().toString(),ent);
    }
 catch (    final ClientProtocolException e2) {
      this.state.currentState=PlanGenerationStates.PLANSENDINGFAILED;
      this.state.currentMessage=""String_Node_Str"" + createPlanResponse.getStatusLine().getStatusCode();
      Util.deleteCSAR(csarId);
      LOG.error(""String_Node_Str"" + createPlanResponse.getStatusLine().getStatusCode());
      return;
    }
catch (    final IOException e2) {
      this.state.currentState=PlanGenerationStates.PLANSENDINGFAILED;
      this.state.currentMessage=""String_Node_Str"" + createPlanResponse.getStatusLine().getStatusCode();
      Util.deleteCSAR(csarId);
      LOG.error(""String_Node_Str"" + createPlanResponse.getStatusLine().getStatusCode());
      return;
    }
    final org.apache.http.Header planLocationHeader=createPlanResponse.getHeaders(""String_Node_Str"")[0];
    final String planLocation=planLocationHeader.getValue();
    try {
      this.state.currentState=PlanGenerationStates.PLANSENDING;
      this.state.currentMessage=""String_Node_Str"";
      LOG.debug(""String_Node_Str"");
      for (      final String inputParam : inputParameters) {
        final String inputParamPostUrl=planLocation + ""String_Node_Str"";
        final List<NameValuePair> params=new ArrayList<>();
        params.add(Util.createNameValuePair(""String_Node_Str"",inputParam));
        params.add(Util.createNameValuePair(""String_Node_Str"",""String_Node_Str""));
        params.add(Util.createNameValuePair(""String_Node_Str"",""String_Node_Str""));
        final UrlEncodedFormEntity encodedForm=new UrlEncodedFormEntity(params);
        final HttpResponse inputParamPostResponse=openToscaHttpService.Post(inputParamPostUrl,encodedForm);
        if (inputParamPostResponse.getStatusLine().getStatusCode() >= 300) {
          this.state.currentState=PlanGenerationStates.PLANSENDINGFAILED;
          this.state.currentMessage=""String_Node_Str"" + inputParamPostUrl + ""String_Node_Str""+ inputParam+ ""String_Node_Str""+ inputParamPostResponse.getStatusLine().getStatusCode();
          Util.deleteCSAR(csarId);
          LOG.error(""String_Node_Str"" + inputParamPostUrl + ""String_Node_Str""+ inputParam+ ""String_Node_Str""+ inputParamPostResponse.getStatusLine().getStatusCode());
          return;
        }
        LOG.debug(""String_Node_Str"" + inputParam);
      }
      for (      final String outputParam : outputParameters) {
        final String outputParamPostUrl=planLocation + ""String_Node_Str"";
        final List<NameValuePair> params=new ArrayList<>();
        params.add(Util.createNameValuePair(""String_Node_Str"",outputParam));
        params.add(Util.createNameValuePair(""String_Node_Str"",""String_Node_Str""));
        params.add(Util.createNameValuePair(""String_Node_Str"",""String_Node_Str""));
        final UrlEncodedFormEntity encodedForm=new UrlEncodedFormEntity(params);
        final HttpResponse outputParamPostResponse=openToscaHttpService.Post(outputParamPostUrl,encodedForm);
        if (outputParamPostResponse.getStatusLine().getStatusCode() >= 300) {
          this.state.currentState=PlanGenerationStates.PLANSENDINGFAILED;
          this.state.currentMessage=""String_Node_Str"" + outputParamPostUrl + ""String_Node_Str""+ outputParam+ ""String_Node_Str""+ outputParamPostResponse.getStatusLine().getStatusCode();
          Util.deleteCSAR(csarId);
          LOG.error(""String_Node_Str"" + outputParamPostUrl + ""String_Node_Str""+ outputParam+ ""String_Node_Str""+ outputParamPostResponse.getStatusLine().getStatusCode());
          return;
        }
        LOG.debug(""String_Node_Str"" + outputParam);
      }
      final MultipartEntity mpEntity=new MultipartEntity();
      final FileBody bin=new FileBody(planTmpFile);
      final ContentBody cb=bin;
      mpEntity.addPart(""String_Node_Str"",cb);
      final HttpResponse uploadResponse=openToscaHttpService.Put(planLocation + ""String_Node_Str"",mpEntity);
      if (uploadResponse.getStatusLine().getStatusCode() >= 300) {
        this.state.currentState=PlanGenerationStates.PLANSENDINGFAILED;
        this.state.currentMessage=""String_Node_Str"" + uploadResponse.getStatusLine().getStatusCode();
        Util.deleteCSAR(csarId);
        LOG.error(""String_Node_Str"" + uploadResponse.getStatusLine().getStatusCode());
        return;
      }
      try {
        LOG.debug(""String_Node_Str"");
        this.state.currentState=PlanGenerationStates.OPTIONSENDING;
        this.state.currentMessage=""String_Node_Str"";
        final URL optionsUrl=new URL(this.state.getCsarUrl(),""String_Node_Str"");
        LOG.debug(""String_Node_Str"" + optionsUrl.toString());
        final SelfServiceOptionWrapper option=Util.generateSelfServiceOption((BPELPlan)buildPlan);
        LOG.debug(""String_Node_Str"" + option.toString());
        final MultipartEntity mpOptionEntity=new MultipartEntity();
        try {
          mpOptionEntity.addPart(""String_Node_Str"",new StringBody(option.option.getName()));
          mpOptionEntity.addPart(""String_Node_Str"",new StringBody(option.option.getDescription()));
          mpOptionEntity.addPart(""String_Node_Str"",new StringBody(option.option.getPlanServiceName()));
          mpOptionEntity.addPart(""String_Node_Str"",new StringBody(FileUtils.readFileToString(option.planInputMessageFile)));
        }
 catch (        final UnsupportedEncodingException e1) {
          this.state.currentState=PlanGenerationStates.OPTIONSENDINGFAILED;
          this.state.currentMessage=""String_Node_Str"";
          Util.deleteCSAR(csarId);
          LOG.error(""String_Node_Str"" + optionsUrl.toString());
          return;
        }
        final FileBody fileBody=new FileBody(option.planInputMessageFile);
        final ContentBody contentBody=fileBody;
        mpOptionEntity.addPart(""String_Node_Str"",contentBody);
        final HttpResponse optionsResponse=openToscaHttpService.Post(optionsUrl.toString(),mpOptionEntity);
        if (optionsResponse.getStatusLine().getStatusCode() >= 300) {
          this.state.currentState=PlanGenerationStates.OPTIONSENDINGFAILED;
          this.state.currentMessage=""String_Node_Str"" + optionsResponse.getStatusLine().getStatusCode() + ""String_Node_Str""+ optionsResponse.getStatusLine().getReasonPhrase();
          Util.deleteCSAR(csarId);
          return;
        }
 else {
          this.state.currentState=PlanGenerationStates.OPTIONSENT;
          this.state.currentMessage=""String_Node_Str"";
        }
      }
 catch (      final MalformedURLException e) {
        this.state.currentState=PlanGenerationStates.OPTIONSENDINGFAILED;
        this.state.currentMessage=""String_Node_Str"";
        Util.deleteCSAR(csarId);
        return;
      }
catch (      final IOException e) {
        this.state.currentState=PlanGenerationStates.OPTIONSENDINGFAILED;
        this.state.currentMessage=""String_Node_Str"";
        Util.deleteCSAR(csarId);
        return;
      }
      this.state.currentState=PlanGenerationStates.PLANSSENT;
      this.state.currentMessage=""String_Node_Str"";
      LOG.debug(""String_Node_Str"");
    }
 catch (    final ClientProtocolException e) {
      this.state.currentState=PlanGenerationStates.PLANSENDINGFAILED;
      this.state.currentMessage=""String_Node_Str"";
      Util.deleteCSAR(csarId);
      LOG.error(""String_Node_Str"");
      return;
    }
catch (    final IOException e) {
      this.state.currentState=PlanGenerationStates.PLANSENDINGFAILED;
      this.state.currentMessage=""String_Node_Str"";
      Util.deleteCSAR(csarId);
      LOG.error(""String_Node_Str"");
      return;
    }
    this.state.currentState=PlanGenerationStates.FINISHED;
    this.state.currentMessage=""String_Node_Str"";
    Util.deleteCSAR(csarId);
  }
}","@Override public void run(){
  LOG.debug(""String_Node_Str"");
  this.state.currentState=PlanGenerationState.PlanGenerationStates.CSARDOWNLOADING;
  final IHTTPService openToscaHttpService=ServiceRegistry.getHTTPService();
  if (openToscaHttpService == null) {
    this.state.currentState=PlanGenerationStates.CSARDOWNLOADFAILED;
    this.state.currentMessage=""String_Node_Str"";
    LOG.error(""String_Node_Str"");
    return;
  }
  CSARID csarId=null;
  InputStream csarInputStream=null;
  try {
    LOG.debug(""String_Node_Str"" + this.state.getCsarUrl());
    final Map<String,String> headers=new HashMap<>();
    headers.put(""String_Node_Str"",""String_Node_Str"");
    final HttpResponse csarResponse=openToscaHttpService.Get(this.state.getCsarUrl().toString(),headers);
    csarInputStream=csarResponse.getEntity().getContent();
    String fileName=null;
    for (    final org.apache.http.Header header : csarResponse.getAllHeaders()) {
      if (header.getName().contains(""String_Node_Str"")) {
        for (        final HeaderElement elem : header.getElements()) {
          if (elem.getName().equals(""String_Node_Str"")) {
            for (            final NameValuePair nameValuePair : elem.getParameters()) {
              if (nameValuePair.getName().equals(""String_Node_Str"")) {
                fileName=nameValuePair.getValue();
              }
            }
          }
        }
      }
    }
    if (fileName == null) {
      fileName=this.state.getCsarUrl().toString().replace(""String_Node_Str"",""String_Node_Str"");
      if (fileName.endsWith(""String_Node_Str"")) {
        fileName=fileName.substring(0,fileName.length() - 1);
      }
      fileName=fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
    }
    this.state.currentState=PlanGenerationStates.CSARDOWNLOADED;
    this.state.currentMessage=""String_Node_Str"";
    LOG.debug(""String_Node_Str"");
    if (fileName == null) {
      LOG.debug(""String_Node_Str"");
      this.state.currentState=PlanGenerationStates.CSARDOWNLOADFAILED;
      this.state.currentMessage=""String_Node_Str"";
      return;
    }
    fileName=fileName.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + System.currentTimeMillis()+ ""String_Node_Str"";
    LOG.debug(""String_Node_Str"");
    csarId=Util.storeCSAR(fileName,csarInputStream);
  }
 catch (  final ClientProtocolException e) {
    this.state.currentState=PlanGenerationStates.CSARDOWNLOADFAILED;
    this.state.currentMessage=""String_Node_Str"";
    LOG.error(""String_Node_Str"");
    return;
  }
catch (  final IOException e) {
    this.state.currentState=PlanGenerationStates.CSARDOWNLOADFAILED;
    this.state.currentMessage=""String_Node_Str"";
    LOG.error(""String_Node_Str"");
    return;
  }
  if (csarInputStream == null) {
    this.state.currentState=PlanGenerationStates.CSARDOWNLOADFAILED;
    this.state.currentMessage=""String_Node_Str"";
    LOG.error(""String_Node_Str"");
    return;
  }
  if (csarId != null) {
    this.state.currentState=PlanGenerationStates.PLANGENERATING;
    this.state.currentMessage=""String_Node_Str"";
    LOG.debug(""String_Node_Str"");
  }
 else {
    this.state.currentState=PlanGenerationStates.CSARDOWNLOADFAILED;
    this.state.currentMessage=""String_Node_Str"";
    LOG.error(""String_Node_Str"");
    Util.deleteCSAR(csarId);
    return;
  }
  final List<AbstractPlan> buildPlans=Util.startPlanBuilder(csarId);
  if (buildPlans.size() <= 0) {
    this.state.currentState=PlanGenerationStates.PLANGENERATIONFAILED;
    this.state.currentMessage=""String_Node_Str"";
    Util.deleteCSAR(csarId);
    LOG.error(""String_Node_Str"");
    return;
  }
  this.state.currentState=PlanGenerationStates.PLANSGENERATED;
  this.state.currentMessage=""String_Node_Str"";
  LOG.debug(""String_Node_Str"");
  final Map<BPELPlan,File> plansToUpload=new HashMap<>();
  for (  final AbstractPlan buildPlan : buildPlans) {
    final File planTmpFile=Util.writePlan2TmpFolder((BPELPlan)buildPlan);
    plansToUpload.put((BPELPlan)buildPlan,planTmpFile);
  }
  LOG.debug(""String_Node_Str"" + buildPlans.size());
  for (  final AbstractPlan buildPlan : plansToUpload.keySet()) {
    final File planTmpFile=plansToUpload.get(buildPlan);
    final List<String> inputParameters=((BPELPlan)buildPlan).getWsdl().getInputMessageLocalNames();
    final List<String> outputParameters=((BPELPlan)buildPlan).getWsdl().getOuputMessageLocalNames();
    final JSONObject obj=new JSONObject();
    obj.put(""String_Node_Str"",buildPlan.getId());
    obj.put(""String_Node_Str"",buildPlan.getType().getString());
    obj.put(""String_Node_Str"",((BPELPlan)buildPlan).bpelNamespace);
    final HttpEntity ent=EntityBuilder.create().setText(obj.toJSONString()).setContentType(ContentType.APPLICATION_JSON).build();
    HttpResponse createPlanResponse=null;
    try {
      createPlanResponse=openToscaHttpService.Post(getState().getPostUrl().toString(),ent);
    }
 catch (    final ClientProtocolException e2) {
      this.state.currentState=PlanGenerationStates.PLANSENDINGFAILED;
      this.state.currentMessage=""String_Node_Str"" + createPlanResponse.getStatusLine().getStatusCode();
      Util.deleteCSAR(csarId);
      LOG.error(""String_Node_Str"" + createPlanResponse.getStatusLine().getStatusCode());
      return;
    }
catch (    final IOException e2) {
      this.state.currentState=PlanGenerationStates.PLANSENDINGFAILED;
      this.state.currentMessage=""String_Node_Str"" + createPlanResponse.getStatusLine().getStatusCode();
      Util.deleteCSAR(csarId);
      LOG.error(""String_Node_Str"" + createPlanResponse.getStatusLine().getStatusCode());
      return;
    }
    final org.apache.http.Header planLocationHeader=createPlanResponse.getHeaders(""String_Node_Str"")[0];
    final String planLocation=planLocationHeader.getValue();
    try {
      this.state.currentState=PlanGenerationStates.PLANSENDING;
      this.state.currentMessage=""String_Node_Str"";
      LOG.debug(""String_Node_Str"");
      for (      final String inputParam : inputParameters) {
        final String inputParamPostUrl=planLocation + ""String_Node_Str"";
        final List<NameValuePair> params=new ArrayList<>();
        params.add(Util.createNameValuePair(""String_Node_Str"",inputParam));
        params.add(Util.createNameValuePair(""String_Node_Str"",""String_Node_Str""));
        params.add(Util.createNameValuePair(""String_Node_Str"",""String_Node_Str""));
        final UrlEncodedFormEntity encodedForm=new UrlEncodedFormEntity(params);
        final HttpResponse inputParamPostResponse=openToscaHttpService.Post(inputParamPostUrl,encodedForm);
        if (inputParamPostResponse.getStatusLine().getStatusCode() >= 300) {
          this.state.currentState=PlanGenerationStates.PLANSENDINGFAILED;
          this.state.currentMessage=""String_Node_Str"" + inputParamPostUrl + ""String_Node_Str""+ inputParam+ ""String_Node_Str""+ inputParamPostResponse.getStatusLine().getStatusCode();
          Util.deleteCSAR(csarId);
          LOG.error(""String_Node_Str"" + inputParamPostUrl + ""String_Node_Str""+ inputParam+ ""String_Node_Str""+ inputParamPostResponse.getStatusLine().getStatusCode());
          return;
        }
        LOG.debug(""String_Node_Str"" + inputParam);
      }
      for (      final String outputParam : outputParameters) {
        final String outputParamPostUrl=planLocation + ""String_Node_Str"";
        final List<NameValuePair> params=new ArrayList<>();
        params.add(Util.createNameValuePair(""String_Node_Str"",outputParam));
        params.add(Util.createNameValuePair(""String_Node_Str"",""String_Node_Str""));
        params.add(Util.createNameValuePair(""String_Node_Str"",""String_Node_Str""));
        final UrlEncodedFormEntity encodedForm=new UrlEncodedFormEntity(params);
        final HttpResponse outputParamPostResponse=openToscaHttpService.Post(outputParamPostUrl,encodedForm);
        if (outputParamPostResponse.getStatusLine().getStatusCode() >= 300) {
          this.state.currentState=PlanGenerationStates.PLANSENDINGFAILED;
          this.state.currentMessage=""String_Node_Str"" + outputParamPostUrl + ""String_Node_Str""+ outputParam+ ""String_Node_Str""+ outputParamPostResponse.getStatusLine().getStatusCode();
          Util.deleteCSAR(csarId);
          LOG.error(""String_Node_Str"" + outputParamPostUrl + ""String_Node_Str""+ outputParam+ ""String_Node_Str""+ outputParamPostResponse.getStatusLine().getStatusCode());
          return;
        }
        LOG.debug(""String_Node_Str"" + outputParam);
      }
      final MultipartEntity mpEntity=new MultipartEntity();
      final FileBody bin=new FileBody(planTmpFile);
      final ContentBody cb=bin;
      mpEntity.addPart(""String_Node_Str"",cb);
      final HttpResponse uploadResponse=openToscaHttpService.Put(planLocation + ""String_Node_Str"",mpEntity);
      if (uploadResponse.getStatusLine().getStatusCode() >= 300) {
        this.state.currentState=PlanGenerationStates.PLANSENDINGFAILED;
        this.state.currentMessage=""String_Node_Str"" + uploadResponse.getStatusLine().getStatusCode();
        Util.deleteCSAR(csarId);
        LOG.error(""String_Node_Str"" + uploadResponse.getStatusLine().getStatusCode());
        return;
      }
      try {
        LOG.debug(""String_Node_Str"");
        this.state.currentState=PlanGenerationStates.OPTIONSENDING;
        this.state.currentMessage=""String_Node_Str"";
        final URL optionsUrl=new URL(this.state.getCsarUrl(),""String_Node_Str"");
        LOG.debug(""String_Node_Str"" + optionsUrl.toString());
        final SelfServiceOptionWrapper option=Util.generateSelfServiceOption((BPELPlan)buildPlan);
        LOG.debug(""String_Node_Str"" + option.toString());
        final MultipartEntity mpOptionEntity=new MultipartEntity();
        try {
          mpOptionEntity.addPart(""String_Node_Str"",new StringBody(option.option.getName()));
          mpOptionEntity.addPart(""String_Node_Str"",new StringBody(option.option.getDescription()));
          mpOptionEntity.addPart(""String_Node_Str"",new StringBody(option.option.getPlanServiceName()));
          mpOptionEntity.addPart(""String_Node_Str"",new StringBody(FileUtils.readFileToString(option.planInputMessageFile)));
        }
 catch (        final UnsupportedEncodingException e1) {
          this.state.currentState=PlanGenerationStates.OPTIONSENDINGFAILED;
          this.state.currentMessage=""String_Node_Str"";
          Util.deleteCSAR(csarId);
          LOG.error(""String_Node_Str"" + optionsUrl.toString());
          return;
        }
        final FileBody fileBody=new FileBody(option.planInputMessageFile);
        final ContentBody contentBody=fileBody;
        mpOptionEntity.addPart(""String_Node_Str"",contentBody);
        final HttpResponse optionsResponse=openToscaHttpService.Post(optionsUrl.toString(),mpOptionEntity);
        if (optionsResponse.getStatusLine().getStatusCode() >= 300) {
          this.state.currentState=PlanGenerationStates.OPTIONSENDINGFAILED;
          this.state.currentMessage=""String_Node_Str"" + optionsResponse.getStatusLine().getStatusCode() + ""String_Node_Str""+ optionsResponse.getStatusLine().getReasonPhrase();
          Util.deleteCSAR(csarId);
          return;
        }
 else {
          this.state.currentState=PlanGenerationStates.OPTIONSENT;
          this.state.currentMessage=""String_Node_Str"";
        }
      }
 catch (      final MalformedURLException e) {
        this.state.currentState=PlanGenerationStates.OPTIONSENDINGFAILED;
        this.state.currentMessage=""String_Node_Str"";
        Util.deleteCSAR(csarId);
        return;
      }
catch (      final IOException e) {
        this.state.currentState=PlanGenerationStates.OPTIONSENDINGFAILED;
        this.state.currentMessage=""String_Node_Str"";
        Util.deleteCSAR(csarId);
        return;
      }
      this.state.currentState=PlanGenerationStates.PLANSSENT;
      this.state.currentMessage=""String_Node_Str"";
      LOG.debug(""String_Node_Str"");
    }
 catch (    final ClientProtocolException e) {
      this.state.currentState=PlanGenerationStates.PLANSENDINGFAILED;
      this.state.currentMessage=""String_Node_Str"";
      Util.deleteCSAR(csarId);
      LOG.error(""String_Node_Str"");
      return;
    }
catch (    final IOException e) {
      this.state.currentState=PlanGenerationStates.PLANSENDINGFAILED;
      this.state.currentMessage=""String_Node_Str"";
      Util.deleteCSAR(csarId);
      LOG.error(""String_Node_Str"");
      return;
    }
  }
  this.state.currentState=PlanGenerationStates.FINISHED;
  this.state.currentMessage=""String_Node_Str"";
  Util.deleteCSAR(csarId);
}"
40917,"public static SelfServiceOptionWrapper generateSelfServiceOption(final BPELPlan buildPlan) throws IOException {
  final String id=String.valueOf(System.currentTimeMillis());
  final ApplicationOption option=new ApplicationOption();
  final File tmpDir=new File(System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"") + Long.toString(System.currentTimeMillis()));
  tmpDir.mkdir();
  final File planInputMessageFile=new File(tmpDir,""String_Node_Str"" + id + ""String_Node_Str"");
  option.setName(""String_Node_Str"");
  option.setId(id);
  option.setIconUrl(""String_Node_Str"");
  option.setDescription(""String_Node_Str"");
  option.setPlanServiceName(Util.getBuildPlanServiceName(buildPlan.getDeploymentDeskriptor()).getLocalPart());
  option.setPlanInputMessageUrl(""String_Node_Str"" + id + ""String_Node_Str"");
  Util.writePlanInputMessageInstance(buildPlan,planInputMessageFile);
  return new SelfServiceOptionWrapper(option,planInputMessageFile);
}","public static SelfServiceOptionWrapper generateSelfServiceOption(final BPELPlan buildPlan) throws IOException {
  final String id=String.valueOf(System.currentTimeMillis());
  final ApplicationOption option=new ApplicationOption();
  final File tmpDir=new File(System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"") + Long.toString(System.currentTimeMillis()));
  tmpDir.mkdir();
  final File planInputMessageFile=new File(tmpDir,""String_Node_Str"" + id + ""String_Node_Str"");
  option.setName(Util.getBuildPlanServiceName(buildPlan.getDeploymentDeskriptor()).getLocalPart());
  option.setId(id);
  option.setIconUrl(""String_Node_Str"");
  option.setDescription(""String_Node_Str"");
  option.setPlanServiceName(Util.getBuildPlanServiceName(buildPlan.getDeploymentDeskriptor()).getLocalPart());
  option.setPlanInputMessageUrl(""String_Node_Str"" + id + ""String_Node_Str"");
  Util.writePlanInputMessageInstance(buildPlan,planInputMessageFile);
  return new SelfServiceOptionWrapper(option,planInputMessageFile);
}"
40918,"@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getDeploymentTests(@PathParam(""String_Node_Str"") final String csar,@PathParam(""String_Node_Str"") final String servicetemplate,@PathParam(""String_Node_Str"") final Integer id){
  final CSARContent csarContent=this.csarService.findById(csar);
  if (!this.csarService.hasServiceTemplate(csarContent.getCSARID(),servicetemplate)) {
    logger.info(""String_Node_Str"" + servicetemplate + ""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"" + servicetemplate + ""String_Node_Str"");
  }
  final ServiceTemplateInstance sti=new ServiceTemplateInstanceRepository().find(Long.valueOf(id)).orElse(null);
  if (sti == null) {
    logger.info(""String_Node_Str"" + id + ""String_Node_Str""+ servicetemplate+ ""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"" + id + ""String_Node_Str""+ servicetemplate+ ""String_Node_Str"");
  }
  final List<ResourceDecorator> items=sti.getDeploymentTests().stream().map(v -> {
    final ResourceDecorator decorator=new ResourceDecorator();
    decorator.setObject(v);
    decorator.add(Link.fromUri(UriUtil.encode(this.uriInfo.getAbsolutePathBuilder().path(String.valueOf(v.getId())).build())).rel(""String_Node_Str"").build());
    return decorator;
  }
).collect(Collectors.toList());
  final ResourceDecorator response=new ResourceDecorator();
  response.setObject(items);
  response.add(Link.fromUri(UriUtil.encode(this.uriInfo.getAbsolutePath())).rel(""String_Node_Str"").build());
  return Response.ok(response).build();
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getDeploymentTests(@PathParam(""String_Node_Str"") final Integer id){
  final CSARContent csarContent=this.csarService.findById(this.csarId);
  if (!this.csarService.hasServiceTemplate(csarContent.getCSARID(),this.serviceTemplateId)) {
    logger.info(""String_Node_Str"" + this.serviceTemplateId + ""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"" + this.serviceTemplateId + ""String_Node_Str"");
  }
  final ServiceTemplateInstance sti=new ServiceTemplateInstanceRepository().find(Long.valueOf(id)).orElse(null);
  if (sti == null) {
    logger.info(""String_Node_Str"" + id + ""String_Node_Str""+ this.serviceTemplateId+ ""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"" + id + ""String_Node_Str""+ this.serviceTemplateId+ ""String_Node_Str"");
  }
  final List<ResourceDecorator> items=sti.getDeploymentTests().stream().map(v -> {
    final ResourceDecorator decorator=new ResourceDecorator();
    decorator.setObject(v);
    decorator.add(Link.fromUri(UriUtil.encode(this.uriInfo.getAbsolutePathBuilder().path(String.valueOf(v.getId())).build())).rel(""String_Node_Str"").build());
    return decorator;
  }
).collect(Collectors.toList());
  final ResourceDecorator response=new ResourceDecorator();
  response.setObject(items);
  response.add(Link.fromUri(UriUtil.encode(this.uriInfo.getAbsolutePath())).rel(""String_Node_Str"").build());
  return Response.ok(response).build();
}"
40919,"@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getDeploymentTest(@PathParam(""String_Node_Str"") final String csar,@PathParam(""String_Node_Str"") final String servicetemplate,@PathParam(""String_Node_Str"") final Integer id,@PathParam(""String_Node_Str"") final Integer deploymenttest){
  final CSARContent csarContent=this.csarService.findById(csar);
  if (!this.csarService.hasServiceTemplate(csarContent.getCSARID(),servicetemplate)) {
    logger.info(""String_Node_Str"" + servicetemplate + ""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"" + servicetemplate + ""String_Node_Str"");
  }
  final ServiceTemplateInstance sti=new ServiceTemplateInstanceRepository().find(Long.valueOf(id)).orElse(null);
  if (sti == null) {
    logger.info(""String_Node_Str"" + id + ""String_Node_Str""+ servicetemplate+ ""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"" + id + ""String_Node_Str""+ servicetemplate+ ""String_Node_Str"");
  }
  final DeploymentTest object=new DeploymentTestRepository().find(Long.valueOf(deploymenttest)).orElse(null);
  if (object == null) {
    throw new NotFoundException();
  }
  final ResourceDecorator response=new ResourceDecorator();
  response.setObject(object);
  response.add(Link.fromUri(UriUtil.encode(this.uriInfo.getAbsolutePath())).rel(""String_Node_Str"").build());
  return Response.ok(response).build();
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response getDeploymentTest(@PathParam(""String_Node_Str"") final Integer id,@PathParam(""String_Node_Str"") final Integer deploymenttest){
  final CSARContent csarContent=this.csarService.findById(this.csarId);
  if (!this.csarService.hasServiceTemplate(csarContent.getCSARID(),this.serviceTemplateId)) {
    logger.info(""String_Node_Str"" + this.serviceTemplateId + ""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"" + this.serviceTemplateId + ""String_Node_Str"");
  }
  final ServiceTemplateInstance sti=new ServiceTemplateInstanceRepository().find(Long.valueOf(id)).orElse(null);
  if (sti == null) {
    logger.info(""String_Node_Str"" + id + ""String_Node_Str""+ this.serviceTemplateId+ ""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"" + id + ""String_Node_Str""+ this.serviceTemplateId+ ""String_Node_Str"");
  }
  final DeploymentTest object=new DeploymentTestRepository().find(Long.valueOf(deploymenttest)).orElse(null);
  if (object == null) {
    throw new NotFoundException();
  }
  final ResourceDecorator response=new ResourceDecorator();
  response.setObject(object);
  response.add(Link.fromUri(UriUtil.encode(this.uriInfo.getAbsolutePath())).rel(""String_Node_Str"").build());
  return Response.ok(response).build();
}"
40920,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response createDeploymentTest(@PathParam(""String_Node_Str"") final String csar,@PathParam(""String_Node_Str"") final String servicetemplate,@PathParam(""String_Node_Str"") final Integer id){
  final CSARContent csarContent=this.csarService.findById(csar);
  if (!this.csarService.hasServiceTemplate(csarContent.getCSARID(),servicetemplate)) {
    logger.info(""String_Node_Str"" + servicetemplate + ""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"" + servicetemplate + ""String_Node_Str"");
  }
  final ServiceTemplateInstance sti=new ServiceTemplateInstanceRepository().find(Long.valueOf(id)).orElse(null);
  if (sti == null) {
    logger.info(""String_Node_Str"" + id + ""String_Node_Str""+ servicetemplate+ ""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"" + id + ""String_Node_Str""+ servicetemplate+ ""String_Node_Str"");
  }
  final DeploymentTest result=this.deploymentTestService.run(csarContent.getCSARID(),sti);
  final URI location=this.uriInfo.getAbsolutePathBuilder().path(String.valueOf(result.getId())).build();
  return Response.created(UriUtil.encode(location)).build();
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public Response createDeploymentTest(@PathParam(""String_Node_Str"") final Integer id){
  final CSARContent csarContent=this.csarService.findById(this.csarId);
  if (!this.csarService.hasServiceTemplate(csarContent.getCSARID(),this.serviceTemplateId)) {
    logger.info(""String_Node_Str"" + this.serviceTemplateId + ""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"" + this.serviceTemplateId + ""String_Node_Str"");
  }
  final ServiceTemplateInstance sti=new ServiceTemplateInstanceRepository().find(Long.valueOf(id)).orElse(null);
  if (sti == null) {
    logger.info(""String_Node_Str"" + id + ""String_Node_Str""+ this.serviceTemplateId+ ""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"" + id + ""String_Node_Str""+ this.serviceTemplateId+ ""String_Node_Str"");
  }
  final DeploymentTest result=this.deploymentTestService.run(csarContent.getCSARID(),sti);
  final URI location=this.uriInfo.getAbsolutePathBuilder().path(String.valueOf(result.getId())).build();
  return Response.created(UriUtil.encode(location)).build();
}"
40921,"/** 
 * Appends BPEL Code that updates InstanceData for the given NodeTemplate. Needs initialization code on the global level in the plan. This will be checked and appended if needed.
 * @param context the TemplateContext of the NodeTemplate
 * @param nodeTemplate the NodeTemplate to handle
 * @return true iff appending all BPEL code was successful
 */
public boolean handleBuild(final BPELPlanContext context,final AbstractNodeTemplate nodeTemplate){
  final boolean hasProps=checkProperties(nodeTemplate.getProperties());
  final String serviceInstanceVarName=context.getServiceInstanceURLVarName();
  if (serviceInstanceVarName == null) {
    return false;
  }
  final String serviceInstanceIDVarName=context.getServiceInstanceIDVarName();
  if (serviceInstanceIDVarName == null) {
    return false;
  }
  final String instanceDataAPIVarName=context.getServiceTemplateURLVar();
  if (instanceDataAPIVarName == null) {
    return false;
  }
  final String restCallResponseVarName=createRESTResponseVar(context);
  if (restCallResponseVarName == null) {
    return false;
  }
  final String stateVarName=createStateVar(context,context.getNodeTemplate().getId());
  if (stateVarName == null) {
    return false;
  }
  try {
    final String bpelString=this.fragments.generateBPEL4RESTLightNodeInstancePOST(instanceDataAPIVarName,serviceInstanceIDVarName,context.getNodeTemplate().getId(),restCallResponseVarName);
    Node createNodeInstanceExActiv=ModelUtils.string2dom(bpelString);
    createNodeInstanceExActiv=context.importNode(createNodeInstanceExActiv);
    context.getPrePhaseElement().appendChild(createNodeInstanceExActiv);
  }
 catch (  final IOException e2) {
    e2.printStackTrace();
  }
catch (  final SAXException e) {
    e.printStackTrace();
  }
catch (  final ParserConfigurationException e) {
    e.printStackTrace();
  }
  String nodeInstanceURLVarName=""String_Node_Str"";
  if (context.findInstanceURLVar(context.getNodeTemplate().getId(),true) == null) {
    nodeInstanceURLVarName=createInstanceURLVar(context,context.getNodeTemplate().getId());
  }
 else {
    nodeInstanceURLVarName=context.findInstanceURLVar(context.getNodeTemplate().getId(),true);
  }
  if (nodeInstanceURLVarName == null) {
    return false;
  }
  String nodeInstanceIDVarName=""String_Node_Str"";
  if (context.findInstanceIDVar(context.getNodeTemplate().getId(),true) == null) {
    nodeInstanceIDVarName=createInstanceIDVar(context,context.getNodeTemplate().getId());
  }
 else {
    nodeInstanceIDVarName=context.findInstanceIDVar(context.getNodeTemplate().getId(),true);
  }
  if (nodeInstanceIDVarName == null) {
    return false;
  }
  try {
    final String bpelString=this.fragments.generateAssignFromNodeInstancePOSTResponseToStringVar(nodeInstanceURLVarName,nodeInstanceIDVarName,restCallResponseVarName);
    Node assignNodeInstanceUrl=ModelUtils.string2dom(bpelString);
    assignNodeInstanceUrl=context.importNode(assignNodeInstanceUrl);
    context.getPrePhaseElement().appendChild(assignNodeInstanceUrl);
  }
 catch (  final IOException e2) {
    e2.printStackTrace();
  }
catch (  final SAXException e) {
    e.printStackTrace();
  }
catch (  final ParserConfigurationException e) {
    e.printStackTrace();
  }
  try {
    final BPELProcessFragments frag=new BPELProcessFragments();
    Node assignNode=frag.createAssignXpathQueryToStringVarFragmentAsNode(""String_Node_Str"" + System.currentTimeMillis(),""String_Node_Str"",stateVarName);
    assignNode=context.importNode(assignNode);
    context.getPrePhaseElement().appendChild(assignNode);
    final String bpelString=this.fragments.generateBPEL4RESTLightPUTInstanceState(nodeInstanceURLVarName,stateVarName);
    Node extActiv=ModelUtils.string2dom(bpelString);
    extActiv=context.importNode(extActiv);
    context.getPrePhaseElement().appendChild(extActiv);
  }
 catch (  final IOException e2) {
    e2.printStackTrace();
  }
catch (  final SAXException e) {
    e.printStackTrace();
  }
catch (  final ParserConfigurationException e) {
    e.printStackTrace();
  }
  String lastSetState=""String_Node_Str"";
  final Element provisioningPhaseElement=context.getProvisioningPhaseElement();
  final List<Element> assignContentElements=fetchInvokerCallAssigns(provisioningPhaseElement);
  final List<String> operationNames=new ArrayList<>();
  for (  final Element assignContentElement : assignContentElements) {
    final String operationName=fetchOperationName(assignContentElement);
    operationNames.add(operationName);
    final String preState=InstanceStates.getOperationPreState(operationName);
    final String postState=InstanceStates.getOperationPostState(operationName);
    if (preState != null) {
      try {
        final BPELProcessFragments frag=new BPELProcessFragments();
        Node assignNode=frag.createAssignXpathQueryToStringVarFragmentAsNode(""String_Node_Str"" + operationName + ""String_Node_Str""+ System.currentTimeMillis(),""String_Node_Str"" + preState + ""String_Node_Str"",stateVarName);
        assignNode=context.importNode(assignNode);
        lastSetState=preState;
        final Node bpelAssignNode=assignContentElement.getParentNode().getParentNode().getParentNode().getParentNode();
        bpelAssignNode.getParentNode().insertBefore(assignNode,bpelAssignNode);
        final String bpelString=this.fragments.generateBPEL4RESTLightPUTInstanceState(nodeInstanceURLVarName,stateVarName);
        Node extActiv=ModelUtils.string2dom(bpelString);
        extActiv=context.importNode(extActiv);
        bpelAssignNode.getParentNode().insertBefore(extActiv,bpelAssignNode);
      }
 catch (      final IOException e2) {
        e2.printStackTrace();
      }
catch (      final SAXException e) {
        e.printStackTrace();
      }
catch (      final ParserConfigurationException e) {
        e.printStackTrace();
      }
    }
    if (postState != null) {
      try {
        final BPELProcessFragments frag=new BPELProcessFragments();
        Node assignNode=frag.createAssignXpathQueryToStringVarFragmentAsNode(""String_Node_Str"" + operationName + ""String_Node_Str""+ System.currentTimeMillis(),""String_Node_Str"" + postState + ""String_Node_Str"",stateVarName);
        assignNode=context.importNode(assignNode);
        lastSetState=postState;
        final Node bpelAssignNode=assignContentElement.getParentNode().getParentNode().getParentNode().getParentNode();
        final String reqVarName=fetchRequestVarNameFromInvokerAssign(assignContentElement);
        final Element invokerReceiveElement=fetchInvokerReceive((Element)bpelAssignNode,reqVarName);
        assignNode=invokerReceiveElement.getParentNode().insertBefore(assignNode,invokerReceiveElement.getNextSibling());
        final String bpelString=this.fragments.generateBPEL4RESTLightPUTInstanceState(nodeInstanceURLVarName,stateVarName);
        Node extActiv=ModelUtils.string2dom(bpelString);
        extActiv=context.importNode(extActiv);
        final Element afterElement=(Element)invokerReceiveElement.getParentNode().insertBefore(extActiv,assignNode.getNextSibling());
        appendUpdateProperties(context,nodeTemplate,nodeInstanceURLVarName,restCallResponseVarName,afterElement.getParentNode());
      }
 catch (      final IOException e2) {
        e2.printStackTrace();
      }
catch (      final SAXException e) {
        e.printStackTrace();
      }
catch (      final ParserConfigurationException e) {
        e.printStackTrace();
      }
    }
  }
  if (lastSetState.equals(""String_Node_Str"")) {
    try {
      String nextState=InstanceStates.getNextStableOperationState(lastSetState);
      if (operationNames.isEmpty()) {
        nextState=""String_Node_Str"";
      }
      final BPELProcessFragments frag=new BPELProcessFragments();
      Node assignNode=frag.createAssignXpathQueryToStringVarFragmentAsNode(""String_Node_Str"" + System.currentTimeMillis(),""String_Node_Str"" + nextState + ""String_Node_Str"",stateVarName);
      assignNode=context.importNode(assignNode);
      final String bpelString=this.fragments.generateBPEL4RESTLightPUTInstanceState(nodeInstanceURLVarName,stateVarName);
      Node extActiv=ModelUtils.string2dom(bpelString);
      extActiv=context.importNode(extActiv);
      context.getPostPhaseElement().appendChild(assignNode);
      context.getPostPhaseElement().appendChild(extActiv);
    }
 catch (    final IOException e2) {
      e2.printStackTrace();
    }
catch (    final SAXException e) {
      e.printStackTrace();
    }
catch (    final ParserConfigurationException e) {
      e.printStackTrace();
    }
  }
  if (hasProps) {
    final Element postPhaseElement=context.getPostPhaseElement();
    appendUpdateProperties(context,nodeTemplate,nodeInstanceURLVarName,restCallResponseVarName,postPhaseElement);
  }
  return true;
}","/** 
 * Appends BPEL Code that updates InstanceData for the given NodeTemplate. Needs initialization code on the global level in the plan. This will be checked and appended if needed.
 * @param context the TemplateContext of the NodeTemplate
 * @param nodeTemplate the NodeTemplate to handle
 * @return true iff appending all BPEL code was successful
 */
public boolean handleBuild(final BPELPlanContext context,final AbstractNodeTemplate nodeTemplate){
  final boolean hasProps=checkProperties(nodeTemplate.getProperties());
  final String serviceInstanceVarName=context.getServiceInstanceURLVarName();
  if (serviceInstanceVarName == null) {
    return false;
  }
  final String serviceInstanceIDVarName=context.getServiceInstanceIDVarName();
  if (serviceInstanceIDVarName == null) {
    return false;
  }
  final String instanceDataAPIVarName=context.getServiceTemplateURLVar();
  if (instanceDataAPIVarName == null) {
    return false;
  }
  final String restCallResponseVarName=createRESTResponseVar(context);
  if (restCallResponseVarName == null) {
    return false;
  }
  final String stateVarName=createStateVar(context,context.getNodeTemplate().getId());
  if (stateVarName == null) {
    return false;
  }
  try {
    final String bpelString=this.fragments.generateBPEL4RESTLightNodeInstancePOST(instanceDataAPIVarName,serviceInstanceIDVarName,context.getNodeTemplate().getId(),restCallResponseVarName);
    Node createNodeInstanceExActiv=ModelUtils.string2dom(bpelString);
    createNodeInstanceExActiv=context.importNode(createNodeInstanceExActiv);
    context.getPrePhaseElement().appendChild(createNodeInstanceExActiv);
  }
 catch (  final IOException e2) {
    e2.printStackTrace();
  }
catch (  final SAXException e) {
    e.printStackTrace();
  }
catch (  final ParserConfigurationException e) {
    e.printStackTrace();
  }
  String nodeInstanceURLVarName=""String_Node_Str"";
  if (context.findInstanceURLVar(context.getNodeTemplate().getId(),true) == null) {
    nodeInstanceURLVarName=createInstanceURLVar(context,context.getNodeTemplate().getId());
  }
 else {
    nodeInstanceURLVarName=context.findInstanceURLVar(context.getNodeTemplate().getId(),true);
  }
  if (nodeInstanceURLVarName == null) {
    return false;
  }
  String nodeInstanceIDVarName=""String_Node_Str"";
  if (context.findInstanceIDVar(context.getNodeTemplate().getId(),true) == null) {
    nodeInstanceIDVarName=createInstanceIDVar(context,context.getNodeTemplate().getId());
  }
 else {
    nodeInstanceIDVarName=context.findInstanceIDVar(context.getNodeTemplate().getId(),true);
  }
  if (nodeInstanceIDVarName == null) {
    return false;
  }
  try {
    final String bpelString=this.fragments.generateAssignFromNodeInstancePOSTResponseToStringVar(nodeInstanceURLVarName,nodeInstanceIDVarName,restCallResponseVarName);
    Node assignNodeInstanceUrl=ModelUtils.string2dom(bpelString);
    assignNodeInstanceUrl=context.importNode(assignNodeInstanceUrl);
    context.getPrePhaseElement().appendChild(assignNodeInstanceUrl);
  }
 catch (  final IOException e2) {
    e2.printStackTrace();
  }
catch (  final SAXException e) {
    e.printStackTrace();
  }
catch (  final ParserConfigurationException e) {
    e.printStackTrace();
  }
  try {
    final BPELProcessFragments frag=new BPELProcessFragments();
    Node assignNode=frag.createAssignXpathQueryToStringVarFragmentAsNode(""String_Node_Str"" + System.currentTimeMillis(),""String_Node_Str"",stateVarName);
    assignNode=context.importNode(assignNode);
    context.getPrePhaseElement().appendChild(assignNode);
    final String bpelString=this.fragments.generateBPEL4RESTLightPUTInstanceState(nodeInstanceURLVarName,stateVarName);
    Node extActiv=ModelUtils.string2dom(bpelString);
    extActiv=context.importNode(extActiv);
    context.getPrePhaseElement().appendChild(extActiv);
  }
 catch (  final IOException e2) {
    e2.printStackTrace();
  }
catch (  final SAXException e) {
    e.printStackTrace();
  }
catch (  final ParserConfigurationException e) {
    e.printStackTrace();
  }
  String lastSetState=""String_Node_Str"";
  final Element provisioningPhaseElement=context.getProvisioningPhaseElement();
  final List<Element> assignContentElements=fetchInvokerCallAssigns(provisioningPhaseElement);
  final List<String> operationNames=new ArrayList<>();
  for (  final Element assignContentElement : assignContentElements) {
    final String operationName=fetchOperationName(assignContentElement);
    operationNames.add(operationName);
    final String preState=InstanceStates.getOperationPreState(operationName);
    final String postState=InstanceStates.getOperationPostState(operationName);
    if (preState != null) {
      try {
        final BPELProcessFragments frag=new BPELProcessFragments();
        Node assignNode=frag.createAssignXpathQueryToStringVarFragmentAsNode(""String_Node_Str"" + operationName + ""String_Node_Str""+ System.currentTimeMillis(),""String_Node_Str"" + preState + ""String_Node_Str"",stateVarName);
        assignNode=context.importNode(assignNode);
        lastSetState=preState;
        final Node bpelAssignNode=assignContentElement.getParentNode().getParentNode().getParentNode().getParentNode();
        bpelAssignNode.getParentNode().insertBefore(assignNode,bpelAssignNode);
        final String bpelString=this.fragments.generateBPEL4RESTLightPUTInstanceState(nodeInstanceURLVarName,stateVarName);
        Node extActiv=ModelUtils.string2dom(bpelString);
        extActiv=context.importNode(extActiv);
        bpelAssignNode.getParentNode().insertBefore(extActiv,bpelAssignNode);
      }
 catch (      final IOException e2) {
        e2.printStackTrace();
      }
catch (      final SAXException e) {
        e.printStackTrace();
      }
catch (      final ParserConfigurationException e) {
        e.printStackTrace();
      }
    }
    if (postState != null) {
      try {
        final BPELProcessFragments frag=new BPELProcessFragments();
        Node assignNode=frag.createAssignXpathQueryToStringVarFragmentAsNode(""String_Node_Str"" + operationName + ""String_Node_Str""+ System.currentTimeMillis(),""String_Node_Str"" + postState + ""String_Node_Str"",stateVarName);
        assignNode=context.importNode(assignNode);
        lastSetState=postState;
        final Node bpelAssignNode=assignContentElement.getParentNode().getParentNode().getParentNode().getParentNode();
        final String reqVarName=fetchRequestVarNameFromInvokerAssign(assignContentElement);
        final Element invokerReceiveElement=fetchInvokerReceive((Element)bpelAssignNode,reqVarName);
        assignNode=invokerReceiveElement.getParentNode().insertBefore(assignNode,invokerReceiveElement.getNextSibling());
        final String bpelString=this.fragments.generateBPEL4RESTLightPUTInstanceState(nodeInstanceURLVarName,stateVarName);
        Node extActiv=ModelUtils.string2dom(bpelString);
        extActiv=context.importNode(extActiv);
        final Element afterElement=(Element)invokerReceiveElement.getParentNode().insertBefore(extActiv,assignNode.getNextSibling());
        if (hasProps) {
          appendUpdateProperties(context,nodeTemplate,nodeInstanceURLVarName,restCallResponseVarName,afterElement.getParentNode());
        }
      }
 catch (      final IOException e2) {
        e2.printStackTrace();
      }
catch (      final SAXException e) {
        e.printStackTrace();
      }
catch (      final ParserConfigurationException e) {
        e.printStackTrace();
      }
    }
  }
  if (lastSetState.equals(""String_Node_Str"")) {
    try {
      String nextState=InstanceStates.getNextStableOperationState(lastSetState);
      if (operationNames.isEmpty()) {
        nextState=""String_Node_Str"";
      }
      final BPELProcessFragments frag=new BPELProcessFragments();
      Node assignNode=frag.createAssignXpathQueryToStringVarFragmentAsNode(""String_Node_Str"" + System.currentTimeMillis(),""String_Node_Str"" + nextState + ""String_Node_Str"",stateVarName);
      assignNode=context.importNode(assignNode);
      final String bpelString=this.fragments.generateBPEL4RESTLightPUTInstanceState(nodeInstanceURLVarName,stateVarName);
      Node extActiv=ModelUtils.string2dom(bpelString);
      extActiv=context.importNode(extActiv);
      context.getPostPhaseElement().appendChild(assignNode);
      context.getPostPhaseElement().appendChild(extActiv);
    }
 catch (    final IOException e2) {
      e2.printStackTrace();
    }
catch (    final SAXException e) {
      e.printStackTrace();
    }
catch (    final ParserConfigurationException e) {
      e.printStackTrace();
    }
  }
  if (hasProps) {
    final Element postPhaseElement=context.getPostPhaseElement();
    appendUpdateProperties(context,nodeTemplate,nodeInstanceURLVarName,restCallResponseVarName,postPhaseElement);
  }
  return true;
}"
40922,"private boolean isRunning(final BPELPlanContext context,final AbstractNodeTemplate nodeTemplate){
  final Variable state=context.getPropertyVariable(nodeTemplate,""String_Node_Str"");
  if (BPELPlanContext.getVariableContent(state,context).equals(""String_Node_Str"")) {
    return true;
  }
 else {
    return false;
  }
}","private boolean isRunning(final BPELPlanContext context,final AbstractNodeTemplate nodeTemplate){
  final Variable state=context.getPropertyVariable(nodeTemplate,""String_Node_Str"");
  if (state != null) {
    if (BPELPlanContext.getVariableContent(state,context).equals(""String_Node_Str"")) {
      return true;
    }
  }
  return false;
}"
40923,"/** 
 * Constructor
 * @param nodeTemplate a JAXB TNodeTemplate
 * @param definitions a DefinitionsImpl
 */
public NodeTemplateImpl(final TNodeTemplate nodeTemplate,final DefinitionsImpl definitions){
  this.nodeTemplate=nodeTemplate;
  this.definitions=definitions;
  this.ingoingRelations=new ArrayList<>();
  this.outgoingRelations=new ArrayList<>();
  this.requirements=new ArrayList<>();
  this.capabilities=new ArrayList<>();
  this.das=new ArrayList<>();
  this.policies=new ArrayList<>();
  if (this.nodeTemplate.getProperties() != null) {
    this.properties=new PropertiesImpl(this.nodeTemplate.getProperties().getAny());
  }
  setUpCapabilities();
  setUpRequirements();
  setUpDeploymentArtifacts();
  setUpPolicies();
}","/** 
 * Constructor
 * @param nodeTemplate a JAXB TNodeTemplate
 * @param definitions a DefinitionsImpl
 */
public NodeTemplateImpl(final TNodeTemplate nodeTemplate,final DefinitionsImpl definitions){
  this.nodeTemplate=nodeTemplate;
  this.definitions=definitions;
  this.ingoingRelations=new ArrayList<>();
  this.outgoingRelations=new ArrayList<>();
  this.requirements=new ArrayList<>();
  this.capabilities=new ArrayList<>();
  this.das=new ArrayList<>();
  this.policies=new ArrayList<>();
  if (this.nodeTemplate.getProperties() != null && this.nodeTemplate.getProperties().getAny() != null) {
    this.properties=new PropertiesImpl(this.nodeTemplate.getProperties().getAny());
  }
  setUpCapabilities();
  setUpRequirements();
  setUpDeploymentArtifacts();
  setUpPolicies();
}"
40924,"/** 
 * Constructor
 * @param properties an Object of class ElementNSImpl
 */
public PropertiesImpl(final Object properties){
  this.props=properties;
  if (properties.getClass().getName().equals(""String_Node_Str"")) {
    this.isDOM=true;
  }
}","/** 
 * Constructor
 * @param properties an Object of class ElementNSImpl
 */
public PropertiesImpl(final Object properties){
  if (properties == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  this.props=properties;
  if (properties.getClass().getName().equals(""String_Node_Str"")) {
    this.isDOM=true;
  }
}"
40925,"/** 
 * <p> This method assigns plugins to the already initialized BuildPlan and its TemplateBuildPlans. First there will be checked if any generic plugin can handle a template of the TopologyTemplate </p>
 * @param buildPlan a BuildPlan which is alread initialized
 * @param map a PropertyMap which contains mappings from Template to Property and to variable nameof inside the BuidlPlan
 */
private void runPlugins(final BPELPlan buildPlan,final PropertyMap map){
  for (  final BPELScopeActivity templatePlan : buildPlan.getTemplateBuildPlans()) {
    final BPELPlanContext context=new BPELPlanContext(templatePlan,map,buildPlan.getServiceTemplate());
    if (templatePlan.getNodeTemplate() != null && !isRunning(context,templatePlan.getNodeTemplate())) {
      final AbstractNodeTemplate nodeTemplate=templatePlan.getNodeTemplate();
      BPELBuildProcessBuilder.LOG.debug(""String_Node_Str"" + nodeTemplate.getId());
      final IPlanBuilderTypePlugin plugin=this.findTypePlugin(nodeTemplate);
      if (plugin == null) {
        BPELBuildProcessBuilder.LOG.debug(""String_Node_Str"",nodeTemplate.getId());
        final OperationChain chain=BPELScopeBuilder.createOperationChain(nodeTemplate);
        if (chain == null) {
          BPELBuildProcessBuilder.LOG.warn(""String_Node_Str"",nodeTemplate.getId());
        }
 else {
          BPELBuildProcessBuilder.LOG.debug(""String_Node_Str"",nodeTemplate.getId());
          chain.executeIAProvisioning(context);
          chain.executeDAProvisioning(context);
          chain.executeOperationProvisioning(context,this.opNames);
        }
      }
 else {
        BPELBuildProcessBuilder.LOG.info(""String_Node_Str"",nodeTemplate.getId());
        plugin.handle(context);
      }
      for (      final IPlanBuilderPostPhasePlugin postPhasePlugin : this.pluginRegistry.getPostPlugins()) {
        if (postPhasePlugin.canHandle(nodeTemplate)) {
          postPhasePlugin.handle(context,nodeTemplate);
        }
      }
    }
 else {
      final AbstractRelationshipTemplate relationshipTemplate=templatePlan.getRelationshipTemplate();
      if (!canGenericPluginHandle(relationshipTemplate)) {
        BPELBuildProcessBuilder.LOG.debug(""String_Node_Str"",relationshipTemplate.getId());
        final OperationChain sourceChain=BPELScopeBuilder.createOperationChain(relationshipTemplate,true);
        final OperationChain targetChain=BPELScopeBuilder.createOperationChain(relationshipTemplate,false);
        if (targetChain != null) {
          BPELBuildProcessBuilder.LOG.warn(""String_Node_Str"",relationshipTemplate.getId());
          targetChain.executeIAProvisioning(context);
          targetChain.executeOperationProvisioning(context,this.opNames);
        }
        if (sourceChain != null) {
          BPELBuildProcessBuilder.LOG.warn(""String_Node_Str"",relationshipTemplate.getId());
          sourceChain.executeIAProvisioning(context);
          sourceChain.executeOperationProvisioning(context,this.opNames);
        }
      }
 else {
        BPELBuildProcessBuilder.LOG.info(""String_Node_Str"",relationshipTemplate.getId());
        handleWithTypePlugin(context,relationshipTemplate);
      }
      for (      final IPlanBuilderPostPhasePlugin postPhasePlugin : this.pluginRegistry.getPostPlugins()) {
        if (postPhasePlugin.canHandle(relationshipTemplate)) {
          postPhasePlugin.handle(context,relationshipTemplate);
        }
      }
    }
  }
}","/** 
 * <p> This method assigns plugins to the already initialized BuildPlan and its TemplateBuildPlans. First there will be checked if any generic plugin can handle a template of the TopologyTemplate </p>
 * @param buildPlan a BuildPlan which is alread initialized
 * @param map a PropertyMap which contains mappings from Template to Property and to variable nameof inside the BuidlPlan
 */
private void runPlugins(final BPELPlan buildPlan,final PropertyMap map){
  for (  final BPELScopeActivity templatePlan : buildPlan.getTemplateBuildPlans()) {
    final BPELPlanContext context=new BPELPlanContext(templatePlan,map,buildPlan.getServiceTemplate());
    if (templatePlan.getNodeTemplate() != null) {
      if (isRunning(context,templatePlan.getNodeTemplate())) {
        BPELBuildProcessBuilder.LOG.debug(""String_Node_Str"" + templatePlan.getNodeTemplate().getId() + ""String_Node_Str"");
        for (        final IPlanBuilderPostPhasePlugin postPhasePlugin : this.pluginRegistry.getPostPlugins()) {
          if (postPhasePlugin.canHandle(templatePlan.getNodeTemplate())) {
            postPhasePlugin.handle(context,templatePlan.getNodeTemplate());
          }
        }
        continue;
      }
      final AbstractNodeTemplate nodeTemplate=templatePlan.getNodeTemplate();
      BPELBuildProcessBuilder.LOG.debug(""String_Node_Str"" + nodeTemplate.getId());
      final IPlanBuilderTypePlugin plugin=this.findTypePlugin(nodeTemplate);
      if (plugin == null) {
        BPELBuildProcessBuilder.LOG.debug(""String_Node_Str"",nodeTemplate.getId());
        final OperationChain chain=BPELScopeBuilder.createOperationChain(nodeTemplate);
        if (chain == null) {
          BPELBuildProcessBuilder.LOG.warn(""String_Node_Str"",nodeTemplate.getId());
        }
 else {
          BPELBuildProcessBuilder.LOG.debug(""String_Node_Str"",nodeTemplate.getId());
          chain.executeIAProvisioning(context);
          chain.executeDAProvisioning(context);
          chain.executeOperationProvisioning(context,this.opNames);
        }
      }
 else {
        BPELBuildProcessBuilder.LOG.info(""String_Node_Str"",nodeTemplate.getId());
        plugin.handle(context);
      }
      for (      final IPlanBuilderPostPhasePlugin postPhasePlugin : this.pluginRegistry.getPostPlugins()) {
        if (postPhasePlugin.canHandle(templatePlan.getNodeTemplate())) {
          postPhasePlugin.handle(context,templatePlan.getNodeTemplate());
        }
      }
    }
 else     if (templatePlan.getRelationshipTemplate() != null) {
      final AbstractRelationshipTemplate relationshipTemplate=templatePlan.getRelationshipTemplate();
      if (!canGenericPluginHandle(relationshipTemplate)) {
        BPELBuildProcessBuilder.LOG.debug(""String_Node_Str"",relationshipTemplate.getId());
        final OperationChain sourceChain=BPELScopeBuilder.createOperationChain(relationshipTemplate,true);
        final OperationChain targetChain=BPELScopeBuilder.createOperationChain(relationshipTemplate,false);
        if (targetChain != null) {
          BPELBuildProcessBuilder.LOG.warn(""String_Node_Str"",relationshipTemplate.getId());
          targetChain.executeIAProvisioning(context);
          targetChain.executeOperationProvisioning(context,this.opNames);
        }
        if (sourceChain != null) {
          BPELBuildProcessBuilder.LOG.warn(""String_Node_Str"",relationshipTemplate.getId());
          sourceChain.executeIAProvisioning(context);
          sourceChain.executeOperationProvisioning(context,this.opNames);
        }
      }
 else {
        BPELBuildProcessBuilder.LOG.info(""String_Node_Str"",relationshipTemplate.getId());
        handleWithTypePlugin(context,relationshipTemplate);
      }
      for (      final IPlanBuilderPostPhasePlugin postPhasePlugin : this.pluginRegistry.getPostPlugins()) {
        if (postPhasePlugin.canHandle(templatePlan.getRelationshipTemplate())) {
          postPhasePlugin.handle(context,templatePlan.getRelationshipTemplate());
        }
      }
    }
  }
}"
40926,"public boolean addInstanceIDVarToTemplatePlan(final BPELScopeActivity templatePlan){
  final String xsdPrefix=""String_Node_Str"" + System.currentTimeMillis();
  final String xsdNamespace=""String_Node_Str"";
  this.bpelProcessHandler.addNamespaceToBPELDoc(xsdPrefix,xsdNamespace,templatePlan.getBuildPlan());
  String templateId=""String_Node_Str"";
  String prefix=""String_Node_Str"";
  if (templatePlan.getNodeTemplate() != null) {
    templateId=templatePlan.getNodeTemplate().getId();
    prefix=""String_Node_Str"";
  }
 else {
    templateId=templatePlan.getRelationshipTemplate().getId();
    prefix=""String_Node_Str"";
  }
  final String instanceIdVarName=prefix + InstanceIDVarKeyword + ""String_Node_Str""+ templateId+ ""String_Node_Str""+ System.currentTimeMillis();
  return this.bpelProcessHandler.addVariable(instanceIdVarName,VariableType.TYPE,new QName(xsdNamespace,""String_Node_Str"",xsdPrefix),templatePlan.getBuildPlan());
}","public boolean addInstanceIDVarToTemplatePlan(final BPELScopeActivity templatePlan){
  final String xsdPrefix=""String_Node_Str"" + System.currentTimeMillis();
  final String xsdNamespace=""String_Node_Str"";
  this.bpelProcessHandler.addNamespaceToBPELDoc(xsdPrefix,xsdNamespace,templatePlan.getBuildPlan());
  String templateId=""String_Node_Str"";
  String prefix=""String_Node_Str"";
  if (templatePlan.getNodeTemplate() != null) {
    templateId=templatePlan.getNodeTemplate().getId();
    prefix=""String_Node_Str"";
  }
 else {
    templateId=templatePlan.getRelationshipTemplate().getId();
    prefix=""String_Node_Str"";
  }
  final String instanceIdVarName=prefix + InstanceIDVarKeyword + ""String_Node_Str""+ templateId.replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ System.currentTimeMillis();
  return this.bpelProcessHandler.addVariable(instanceIdVarName,VariableType.TYPE,new QName(xsdNamespace,""String_Node_Str"",xsdPrefix),templatePlan.getBuildPlan());
}"
40927,"private String findInstanceIdVarName(final List<String> varNames,final String templateId,final boolean isNode){
  final String instanceURLVarName=(isNode ? ""String_Node_Str"" : ""String_Node_Str"") + InstanceURLVarKeyword + ""String_Node_Str""+ templateId+ ""String_Node_Str"";
  for (  final String varName : varNames) {
    if (varName.contains(instanceURLVarName)) {
      return varName;
    }
  }
  return null;
}","private String findInstanceIdVarName(final List<String> varNames,final String templateId,final boolean isNode){
  final String instanceURLVarName=(isNode ? ""String_Node_Str"" : ""String_Node_Str"") + InstanceURLVarKeyword + ""String_Node_Str""+ templateId.replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str"";
  for (  final String varName : varNames) {
    if (varName.contains(instanceURLVarName)) {
      return varName;
    }
  }
  return null;
}"
40928,"/** 
 * Adds a NodeInstanceID Variable to the given TemplatePlan
 * @param templatePlan a TemplatePlan
 * @return true iff adding a NodeInstanceID Var was successful
 */
public boolean addInstanceURLVarToTemplatePlan(final BPELScopeActivity templatePlan){
  final String xsdPrefix=""String_Node_Str"" + System.currentTimeMillis();
  final String xsdNamespace=""String_Node_Str"";
  this.bpelProcessHandler.addNamespaceToBPELDoc(xsdPrefix,xsdNamespace,templatePlan.getBuildPlan());
  String templateId=""String_Node_Str"";
  String prefix=""String_Node_Str"";
  if (templatePlan.getNodeTemplate() != null) {
    templateId=templatePlan.getNodeTemplate().getId();
    prefix=""String_Node_Str"";
  }
 else {
    templateId=templatePlan.getRelationshipTemplate().getId();
    prefix=""String_Node_Str"";
  }
  final String instanceIdVarName=prefix + InstanceURLVarKeyword + ""String_Node_Str""+ templateId+ ""String_Node_Str""+ System.currentTimeMillis();
  return this.bpelProcessHandler.addVariable(instanceIdVarName,VariableType.TYPE,new QName(xsdNamespace,""String_Node_Str"",xsdPrefix),templatePlan.getBuildPlan());
}","/** 
 * Adds a NodeInstanceID Variable to the given TemplatePlan
 * @param templatePlan a TemplatePlan
 * @return true iff adding a NodeInstanceID Var was successful
 */
public boolean addInstanceURLVarToTemplatePlan(final BPELScopeActivity templatePlan){
  final String xsdPrefix=""String_Node_Str"" + System.currentTimeMillis();
  final String xsdNamespace=""String_Node_Str"";
  this.bpelProcessHandler.addNamespaceToBPELDoc(xsdPrefix,xsdNamespace,templatePlan.getBuildPlan());
  String templateId=""String_Node_Str"";
  String prefix=""String_Node_Str"";
  if (templatePlan.getNodeTemplate() != null) {
    templateId=templatePlan.getNodeTemplate().getId();
    prefix=""String_Node_Str"";
  }
 else {
    templateId=templatePlan.getRelationshipTemplate().getId();
    prefix=""String_Node_Str"";
  }
  final String instanceIdVarName=prefix + InstanceURLVarKeyword + ""String_Node_Str""+ templateId.replace(""String_Node_Str"",""String_Node_Str"")+ ""String_Node_Str""+ System.currentTimeMillis();
  return this.bpelProcessHandler.addVariable(instanceIdVarName,VariableType.TYPE,new QName(xsdNamespace,""String_Node_Str"",xsdPrefix),templatePlan.getBuildPlan());
}"
40929,"/** 
 * Initializes Property variables and mappings for a TemplateBuildPlan which handles a RelationshipTemplate
 * @param map the PropertyMap to save the result to
 * @param templatePlan a TemplateBuildPlan which handles a RelationshipTemplate
 */
private void initPropsAsVarsInRelationship(final PropertyMap map,final BPELScopeActivity templatePlan){
  final AbstractRelationshipTemplate relationshipTemplate=templatePlan.getRelationshipTemplate();
  if (relationshipTemplate.getProperties() != null) {
    final Element propertyElement=relationshipTemplate.getProperties().getDOMElement();
    for (int i=0; i < propertyElement.getChildNodes().getLength(); i++) {
      if (propertyElement.getChildNodes().item(i).getNodeType() == Node.TEXT_NODE) {
        continue;
      }
      final String propName=propertyElement.getChildNodes().item(i).getLocalName();
      final String propVarName=relationshipTemplate.getId() + ""String_Node_Str"" + propertyElement.getChildNodes().item(i).getLocalName();
      map.addPropertyMapping(relationshipTemplate.getId(),propName,""String_Node_Str"" + propVarName);
      String value=""String_Node_Str"";
      for (int j=0; j < propertyElement.getChildNodes().item(i).getChildNodes().getLength(); j++) {
        if (propertyElement.getChildNodes().item(i).getChildNodes().item(j).getNodeType() == Node.TEXT_NODE) {
          value+=propertyElement.getChildNodes().item(i).getChildNodes().item(j).getNodeValue();
        }
      }
      PropertyVariableInitializer.LOG.debug(""String_Node_Str"" + propVarName);
      PropertyVariableInitializer.LOG.debug(""String_Node_Str"" + value);
      this.planHandler.addPropertyVariable(propVarName,templatePlan.getBuildPlan());
      if (!value.trim().isEmpty() && !value.trim().equals(""String_Node_Str"")) {
        this.planHandler.initializePropertyVariable(propVarName,value,templatePlan.getBuildPlan());
      }
    }
  }
}","/** 
 * Initializes Property variables and mappings for a TemplateBuildPlan which handles a RelationshipTemplate
 * @param map the PropertyMap to save the result to
 * @param templatePlan a TemplateBuildPlan which handles a RelationshipTemplate
 */
private void initPropsAsVarsInRelationship(final PropertyMap map,final BPELScopeActivity templatePlan){
  final AbstractRelationshipTemplate relationshipTemplate=templatePlan.getRelationshipTemplate();
  if (relationshipTemplate.getProperties() != null) {
    final Element propertyElement=relationshipTemplate.getProperties().getDOMElement();
    for (int i=0; i < propertyElement.getChildNodes().getLength(); i++) {
      if (propertyElement.getChildNodes().item(i).getNodeType() == Node.TEXT_NODE) {
        continue;
      }
      final String propName=propertyElement.getChildNodes().item(i).getLocalName();
      final String propVarName=relationshipTemplate.getId().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + propertyElement.getChildNodes().item(i).getLocalName();
      map.addPropertyMapping(relationshipTemplate.getId(),propName,""String_Node_Str"" + propVarName);
      String value=""String_Node_Str"";
      for (int j=0; j < propertyElement.getChildNodes().item(i).getChildNodes().getLength(); j++) {
        if (propertyElement.getChildNodes().item(i).getChildNodes().item(j).getNodeType() == Node.TEXT_NODE) {
          value+=propertyElement.getChildNodes().item(i).getChildNodes().item(j).getNodeValue();
        }
      }
      PropertyVariableInitializer.LOG.debug(""String_Node_Str"" + propVarName);
      PropertyVariableInitializer.LOG.debug(""String_Node_Str"" + value);
      this.planHandler.addPropertyVariable(propVarName,templatePlan.getBuildPlan());
      if (!value.trim().isEmpty() && !value.trim().equals(""String_Node_Str"")) {
        this.planHandler.initializePropertyVariable(propVarName,value,templatePlan.getBuildPlan());
      }
    }
  }
}"
40930,"/** 
 * Initializes Property variables for the given TemplateBuildPlan which handles a NodeTemplate
 * @param map a PropertyMap to save the result/mappings to
 * @param templatePlan a TemplateBuildPlan which handles a NodeTemplate
 */
private void initPropsAsVarsInNode(final PropertyMap map,final BPELScopeActivity templatePlan){
  final AbstractNodeTemplate nodeTemplate=templatePlan.getNodeTemplate();
  if (nodeTemplate.getProperties() != null) {
    final Element propertyElement=nodeTemplate.getProperties().getDOMElement();
    for (int i=0; i < propertyElement.getChildNodes().getLength(); i++) {
      if (propertyElement.getChildNodes().item(i).getNodeType() == Node.TEXT_NODE) {
        continue;
      }
      final String propName=propertyElement.getChildNodes().item(i).getLocalName();
      final String propVarName=nodeTemplate.getId() + ""String_Node_Str"" + propertyElement.getChildNodes().item(i).getLocalName();
      map.addPropertyMapping(nodeTemplate.getId(),propName,""String_Node_Str"" + propVarName);
      String value=""String_Node_Str"";
      for (int j=0; j < propertyElement.getChildNodes().item(i).getChildNodes().getLength(); j++) {
        if (propertyElement.getChildNodes().item(i).getChildNodes().item(j).getNodeType() == Node.TEXT_NODE) {
          value+=propertyElement.getChildNodes().item(i).getChildNodes().item(j).getNodeValue();
        }
      }
      PropertyVariableInitializer.LOG.debug(""String_Node_Str"" + propVarName);
      PropertyVariableInitializer.LOG.debug(""String_Node_Str"" + value);
      this.planHandler.addPropertyVariable(propVarName,templatePlan.getBuildPlan());
      this.planHandler.initializePropertyVariable(propVarName,value,templatePlan.getBuildPlan());
    }
  }
}","/** 
 * Initializes Property variables for the given TemplateBuildPlan which handles a NodeTemplate
 * @param map a PropertyMap to save the result/mappings to
 * @param templatePlan a TemplateBuildPlan which handles a NodeTemplate
 */
private void initPropsAsVarsInNode(final PropertyMap map,final BPELScopeActivity templatePlan){
  final AbstractNodeTemplate nodeTemplate=templatePlan.getNodeTemplate();
  if (nodeTemplate.getProperties() != null) {
    final Element propertyElement=nodeTemplate.getProperties().getDOMElement();
    for (int i=0; i < propertyElement.getChildNodes().getLength(); i++) {
      if (propertyElement.getChildNodes().item(i).getNodeType() == Node.TEXT_NODE) {
        continue;
      }
      final String propName=propertyElement.getChildNodes().item(i).getLocalName();
      final String propVarName=nodeTemplate.getId().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + propertyElement.getChildNodes().item(i).getLocalName();
      map.addPropertyMapping(nodeTemplate.getId(),propName,""String_Node_Str"" + propVarName);
      String value=""String_Node_Str"";
      for (int j=0; j < propertyElement.getChildNodes().item(i).getChildNodes().getLength(); j++) {
        if (propertyElement.getChildNodes().item(i).getChildNodes().item(j).getNodeType() == Node.TEXT_NODE) {
          value+=propertyElement.getChildNodes().item(i).getChildNodes().item(j).getNodeValue();
        }
      }
      PropertyVariableInitializer.LOG.debug(""String_Node_Str"" + propVarName);
      PropertyVariableInitializer.LOG.debug(""String_Node_Str"" + value);
      this.planHandler.addPropertyVariable(propVarName,templatePlan.getBuildPlan());
      this.planHandler.initializePropertyVariable(propVarName,value,templatePlan.getBuildPlan());
    }
  }
}"
40931,"/** 
 * Initializes Properties inside the given PropertyMap of the given TemplateBuildPlan
 * @param map a PropertyMap to save the mappings to
 * @param templatePlan the TemplateBuildPlan to initialize its properties
 */
public void initializePropertiesAsVariables(final PropertyMap map,final BPELScopeActivity templatePlan){
  if (templatePlan.getRelationshipTemplate() != null) {
    this.initPropsAsVarsInRelationship(map,templatePlan);
  }
 else {
    this.initPropsAsVarsInNode(map,templatePlan);
  }
}","/** 
 * Initializes Properties inside the given PropertyMap of the given TemplateBuildPlan
 * @param map a PropertyMap to save the mappings to
 * @param templatePlan the TemplateBuildPlan to initialize its properties
 */
public void initializePropertiesAsVariables(final PropertyMap map,final BPELScopeActivity templatePlan){
  if (templatePlan.getRelationshipTemplate() != null) {
    initPropsAsVarsInRelationship(map,templatePlan);
  }
 else {
    initPropsAsVarsInNode(map,templatePlan);
  }
}"
40932,"@Override public void start(final BundleContext bundleContext) throws Exception {
  logger.info(""String_Node_Str"",bundleContext.getBundle().getSymbolicName(),bundleContext.getBundle().getVersion());
  context=bundleContext;
  this.services.add(bundleContext.registerService(RootController.class,new RootController(),null));
  configurator(bundleContext);
  this.services.add(bundleContext.registerService(ApplicationConfiguration.class,this,null));
  this.services.add(bundleContext.registerService(CorsFilter.class,new CorsFilter(),null));
  this.services.add(bundleContext.registerService(PlainTextMessageBodyWriter.class,new PlainTextMessageBodyWriter(),null));
  this.services.add(bundleContext.registerService(ObjectMapperProvider.class,new ObjectMapperProvider(),null));
  this.services.add(bundleContext.registerService(JacksonFeature.class,new JacksonFeature(),null));
  this.services.add(bundleContext.registerService(MultiPartFeature.class,new MultiPartFeature(),null));
  this.services.add(bundleContext.registerService(JAXBContextProvider.class,new JAXBContextProvider(),null));
}","@Override public void start(final BundleContext bundleContext) throws Exception {
  logger.info(""String_Node_Str"",bundleContext.getBundle().getSymbolicName(),bundleContext.getBundle().getVersion());
  context=bundleContext;
  this.services.add(bundleContext.registerService(RootController.class,new RootController(),null));
  configurator(bundleContext);
  this.services.add(bundleContext.registerService(ApplicationConfiguration.class,this,null));
  this.services.add(bundleContext.registerService(CorsFilter.class,new CorsFilter(),null));
  this.services.add(bundleContext.registerService(PlainTextMessageBodyWriter.class,new PlainTextMessageBodyWriter(),null));
  this.services.add(bundleContext.registerService(URI2XMLMessageBodyWriter.class,new URI2XMLMessageBodyWriter(),null));
  this.services.add(bundleContext.registerService(ObjectMapperProvider.class,new ObjectMapperProvider(),null));
  this.services.add(bundleContext.registerService(JacksonFeature.class,new JacksonFeature(),null));
  this.services.add(bundleContext.registerService(MultiPartFeature.class,new MultiPartFeature(),null));
  this.services.add(bundleContext.registerService(JAXBContextProvider.class,new JAXBContextProvider(),null));
}"
40933,"public Response invokePlan(final String plan,final UriInfo uriInfo,final List<TParameter> parameters,final CSARID csarId,final QName serviceTemplate,final Long serviceTemplateInstanceId,final PlanTypes... planTypes){
  if (parameters == null) {
    return Response.status(Status.BAD_REQUEST).build();
  }
  if (!hasPlan(csarId,planTypes,plan)) {
    logger.info(""String_Node_Str"" + plan + ""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"" + plan + ""String_Node_Str"");
  }
  logger.info(""String_Node_Str"",plan,serviceTemplate,csarId);
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",JsonUtil.writeValueAsString(parameters));
  }
  if (serviceTemplateInstanceId != null) {
    String url=Settings.CONTAINER_INSTANCEDATA_API + serviceTemplateInstanceId;
    url=url.replace(""String_Node_Str"",csarId.getFileName());
    url=url.replace(""String_Node_Str"",UriComponent.encode(serviceTemplate.toString(),UriComponent.Type.PATH_SEGMENT));
    final URI uri=UriUtil.encode(URI.create(url));
    final TParameter param=new TParameter();
    param.setName(""String_Node_Str"");
    param.setRequired(TBoolean.fromValue(""String_Node_Str""));
    param.setType(""String_Node_Str"");
    param.setValue(uri.toString());
    parameters.add(param);
  }
  final TPlan p=getPlan(plan,csarId);
  final String correlationId=invokePlan(csarId,serviceTemplate,serviceTemplateInstanceId,p,parameters);
  final URI location=UriUtil.encode(uriInfo.getAbsolutePathBuilder().path(correlationId).build());
  return Response.created(location).build();
}","public Response invokePlan(final String plan,final UriInfo uriInfo,final List<TParameter> parameters,final CSARID csarId,final QName serviceTemplate,final Long serviceTemplateInstanceId,final PlanTypes... planTypes){
  if (parameters == null) {
    return Response.status(Status.BAD_REQUEST).build();
  }
  if (!hasPlan(csarId,planTypes,plan)) {
    logger.info(""String_Node_Str"" + plan + ""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"" + plan + ""String_Node_Str"");
  }
  logger.info(""String_Node_Str"",plan,serviceTemplate,csarId);
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",JsonUtil.writeValueAsString(parameters));
  }
  if (serviceTemplateInstanceId != null) {
    String url=Settings.CONTAINER_INSTANCEDATA_API + ""String_Node_Str"" + serviceTemplateInstanceId;
    url=url.replace(""String_Node_Str"",csarId.getFileName());
    url=url.replace(""String_Node_Str"",UriComponent.encode(serviceTemplate.toString(),UriComponent.Type.PATH_SEGMENT));
    final URI uri=UriUtil.encode(URI.create(url));
    final TParameter param=new TParameter();
    param.setName(""String_Node_Str"");
    param.setRequired(TBoolean.fromValue(""String_Node_Str""));
    param.setType(""String_Node_Str"");
    param.setValue(uri.toString());
    parameters.add(param);
  }
  final TPlan p=getPlan(plan,csarId);
  final String correlationId=invokePlan(csarId,serviceTemplate,serviceTemplateInstanceId,p,parameters);
  final URI location=UriUtil.encode(uriInfo.getAbsolutePathBuilder().path(correlationId).build());
  return Response.created(location).build();
}"
40934,"@Path(""String_Node_Str"") public NodeTemplateInstanceController getInstances(@ApiParam(hidden=true) @PathParam(""String_Node_Str"") final String nodeTemplateId){
  if (!this.nodeTemplateService.hasNodeTemplate(csarId,serviceTemplateId,nodeTemplateId)) {
    logger.info(""String_Node_Str"" + nodeTemplateId + ""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"" + nodeTemplateId + ""String_Node_Str"");
  }
  NodeTemplateInstanceController child=new NodeTemplateInstanceController(instanceService);
  this.resourceContext.initResource(child);
  return child;
}","@Path(""String_Node_Str"") public NodeTemplateInstanceController getInstances(@ApiParam(hidden=true) @PathParam(""String_Node_Str"") final String nodeTemplateId){
  if (!this.nodeTemplateService.hasNodeTemplate(csarId,QName.valueOf(serviceTemplateId),QName.valueOf(nodeTemplateId))) {
    logger.info(""String_Node_Str"" + nodeTemplateId + ""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"" + nodeTemplateId + ""String_Node_Str"");
  }
  NodeTemplateInstanceController child=new NodeTemplateInstanceController(instanceService);
  this.resourceContext.initResource(child);
  return child;
}"
40935,"@GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @ApiOperation(value=""String_Node_Str"",response=NodeTemplateDTO.class) public Response getNodeTemplate(@PathParam(""String_Node_Str"") final String nodeTemplateId) throws NotFoundException {
  final NodeTemplateDTO result=this.nodeTemplateService.getNodeTemplateById(csarId,serviceTemplateId,nodeTemplateId);
  result.add(UriUtils.generateSubResourceLink(uriInfo,""String_Node_Str"",false,""String_Node_Str""));
  result.add(UriUtils.generateSelfLink(uriInfo));
  return Response.ok(result).build();
}","@GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @ApiOperation(value=""String_Node_Str"",response=NodeTemplateDTO.class) public Response getNodeTemplate(@PathParam(""String_Node_Str"") final String nodeTemplateId) throws NotFoundException {
  final NodeTemplateDTO result=this.nodeTemplateService.getNodeTemplateById(csarId,QName.valueOf(serviceTemplateId),QName.valueOf(nodeTemplateId));
  result.add(UriUtils.generateSubResourceLink(uriInfo,""String_Node_Str"",false,""String_Node_Str""));
  result.add(UriUtils.generateSelfLink(uriInfo));
  return Response.ok(result).build();
}"
40936,"public Collection<NodeTemplateInstance> getNodeTemplateInstances(final QName nodeTemplate){
  logger.debug(""String_Node_Str"",nodeTemplate);
  return this.nodeTemplateInstanceRepository.findByTemplateId(nodeTemplate);
}","public Collection<NodeTemplateInstance> getNodeTemplateInstances(final QName nodeTemplateQName){
  logger.debug(""String_Node_Str"",nodeTemplateQName);
  return this.nodeTemplateInstanceRepository.findByTemplateId(nodeTemplateQName);
}"
40937,"/** 
 * Gets the node template specified by its id
 * @param csarId The id of the CSAR
 * @param serviceTemplateId The id of the service template within the given CSAR
 * @param nodeTemplateId The id of the node template we want to get and that belongs to the specified service template
 * @return The node template specified by the given id
 * @throws NotFoundException If the service template does not contain the specified node template
 */
public NodeTemplateDTO getNodeTemplateById(String csarId,String serviceTemplateId,String nodeTemplateId) throws NotFoundException {
  final CSARContent csarContent=this.csarService.findById(csarId);
  final CSARID idOfCsar=csarContent.getCSARID();
  final QName serviceTemplateQName=QName.valueOf(serviceTemplateId);
  if (!this.toscaEngineService.getNodeTemplatesOfServiceTemplate(idOfCsar,serviceTemplateQName).contains(nodeTemplateId)) {
    logger.info(""String_Node_Str"" + nodeTemplateId + ""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"" + nodeTemplateId + ""String_Node_Str"");
  }
  return createNodeTemplate(idOfCsar,serviceTemplateQName,nodeTemplateId);
}","/** 
 * Gets the node template specified by its id
 * @param csarId The id of the CSAR
 * @param serviceTemplateQName The QName of the service template within the given CSAR
 * @param nodeTemplateQName The QName of the node template we want to get and that belongs to the specified service template
 * @return The node template specified by the given id
 * @throws NotFoundException If the service template does not contain the specified node template
 */
public NodeTemplateDTO getNodeTemplateById(String csarId,QName serviceTemplateQName,QName nodeTemplateQName) throws NotFoundException {
  final CSARContent csarContent=this.csarService.findById(csarId);
  final CSARID idOfCsar=csarContent.getCSARID();
  if (!this.toscaEngineService.getNodeTemplatesOfServiceTemplate(idOfCsar,serviceTemplateQName).contains(nodeTemplateQName.getLocalPart())) {
    logger.info(""String_Node_Str"" + nodeTemplateQName + ""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"" + nodeTemplateQName + ""String_Node_Str"");
  }
  return createNodeTemplate(idOfCsar,serviceTemplateQName,nodeTemplateQName);
}"
40938,"/** 
 * Gets a collection of node templates associated to a given service template.
 * @param csarId The id of the CSAR
 * @param serviceTemplateId The id of the service template within the given CSAR
 * @return A collection of node templates stored within the given servicetemplate.
 */
public List<NodeTemplateDTO> getNodeTemplatesOfServiceTemplate(String csarId,String serviceTemplateId){
  final CSARContent csarContent=this.csarService.findById(csarId);
  final List<String> nodeTemplateIds=toscaEngineService.getNodeTemplatesOfServiceTemplate(csarContent.getCSARID(),QName.valueOf(serviceTemplateId));
  final List<NodeTemplateDTO> nodeTemplates=Lists.newArrayList();
  NodeTemplateDTO currentNodeTemplate;
  for (  final String id : nodeTemplateIds) {
    currentNodeTemplate=createNodeTemplate(csarContent.getCSARID(),QName.valueOf(serviceTemplateId),id);
    nodeTemplates.add(currentNodeTemplate);
  }
  return nodeTemplates;
}","/** 
 * Gets a collection of node templates associated to a given service template.
 * @param csarId The id of the CSAR
 * @param serviceTemplateQName The QName of the service template within the given CSAR
 * @return A collection of node templates stored within the given servicetemplate.
 */
public List<NodeTemplateDTO> getNodeTemplatesOfServiceTemplate(String csarId,String serviceTemplateQName){
  final CSARContent csarContent=this.csarService.findById(csarId);
  final List<String> nodeTemplateIds=toscaEngineService.getNodeTemplatesOfServiceTemplate(csarContent.getCSARID(),QName.valueOf(serviceTemplateQName));
  final List<NodeTemplateDTO> nodeTemplates=Lists.newArrayList();
  NodeTemplateDTO currentNodeTemplate;
  for (  final String id : nodeTemplateIds) {
    currentNodeTemplate=createNodeTemplate(csarContent.getCSARID(),QName.valueOf(serviceTemplateQName),id);
    nodeTemplates.add(currentNodeTemplate);
  }
  return nodeTemplates;
}"
40939,"/** 
 * Checks whether the specified service template contains a given node template.
 * @param csarId The id of the CSAR
 * @param serviceTemplateId the id of the service template
 * @param nodeTemplateId the id of the node template to check for
 * @return <code>true</code> when the CSAR contains the service template and theservice template contains the node template, otherwise <code>false</code>
 */
public boolean hasNodeTemplate(String csarId,String serviceTemplateId,String nodeTemplateId){
  return this.getNodeTemplateIdsOfServiceTemplate(csarId,serviceTemplateId).contains(nodeTemplateId);
}","/** 
 * Checks whether the specified service template contains a given node template.
 * @param csarId The id of the CSAR
 * @param serviceTemplateQName the QName of the service template
 * @param nodeTemplateId the QName of the node template to check for
 * @return <code>true</code> when the CSAR contains the service template and theservice template contains the node template, otherwise <code>false</code>
 */
public boolean hasNodeTemplate(String csarId,QName serviceTemplateQName,QName nodeTemplateQName){
  return this.getNodeTemplateIdsOfServiceTemplate(csarId,serviceTemplateQName.toString()).contains(nodeTemplateQName.getLocalPart());
}"
40940,"private NodeTemplateDTO createNodeTemplate(CSARID csarId,QName serviceTemplateId,String nodeTemplateId){
  final NodeTemplateDTO currentNodeTemplate=new NodeTemplateDTO();
  currentNodeTemplate.setId(nodeTemplateId);
  currentNodeTemplate.setName(nodeTemplateId);
  currentNodeTemplate.setNodeType(this.toscaEngineService.getNodeTypeOfNodeTemplate(csarId,serviceTemplateId,nodeTemplateId).toString());
  return currentNodeTemplate;
}","/** 
 * Creates a new instance of the NodeTemplateDTO class. It fetches the qualified name of node type of the node template.
 * @param csarId
 * @param serviceTemplateQName
 * @param nodeTemplateQName
 * @return
 */
private NodeTemplateDTO createNodeTemplate(CSARID csarId,QName serviceTemplateQName,QName nodeTemplateQName){
  final NodeTemplateDTO currentNodeTemplate=new NodeTemplateDTO();
  currentNodeTemplate.setId(nodeTemplateQName.toString());
  currentNodeTemplate.setName(nodeTemplateQName.toString());
  currentNodeTemplate.setNodeType(this.toscaEngineService.getNodeTypeOfNodeTemplate(csarId,serviceTemplateQName,nodeTemplateQName.getLocalPart()).toString());
  return currentNodeTemplate;
}"
40941,"/** 
 * Gets a collection of node template ids associated to a given service template.
 * @param csarId The id of the CSAR
 * @param serviceTemplateId the id of the service template within the given CSAR
 * @return A collection of node template ids stored within the given servicetemplate.
 */
private List<String> getNodeTemplateIdsOfServiceTemplate(String csarId,String serviceTemplateId){
  final CSARContent csarContent=this.csarService.findById(csarId);
  return toscaEngineService.getNodeTemplatesOfServiceTemplate(csarContent.getCSARID(),QName.valueOf(serviceTemplateId));
}","/** 
 * Gets a collection of node template ids associated to a given service template.
 * @param csarId The id of the CSAR
 * @param serviceTemplateQName the QName of the service template within the given CSAR
 * @return A collection of node template ids stored within the given servicetemplate.
 */
private List<String> getNodeTemplateIdsOfServiceTemplate(String csarId,String serviceTemplateQName){
  final CSARContent csarContent=this.csarService.findById(csarId);
  return toscaEngineService.getNodeTemplatesOfServiceTemplate(csarContent.getCSARID(),QName.valueOf(serviceTemplateQName));
}"
40942,"@Override public void start(final BundleContext bundleContext) throws Exception {
  logger.info(""String_Node_Str"",bundleContext.getBundle().getSymbolicName(),bundleContext.getBundle().getVersion());
  context=bundleContext;
  this.services.add(bundleContext.registerService(RootController.class,new RootController(),null));
  this.configurator(bundleContext);
  this.configureSwagger(bundleContext);
  this.services.add(bundleContext.registerService(ApplicationConfiguration.class,this,null));
  this.services.add(bundleContext.registerService(CorsFilter.class,new CorsFilter(),null));
  this.services.add(bundleContext.registerService(PlainTextMessageBodyWriter.class,new PlainTextMessageBodyWriter(),null));
  this.services.add(bundleContext.registerService(ObjectMapperProvider.class,new ObjectMapperProvider(),null));
  this.services.add(bundleContext.registerService(JacksonFeature.class,new JacksonFeature(),null));
  this.services.add(bundleContext.registerService(MultiPartFeature.class,new MultiPartFeature(),null));
  this.services.add(bundleContext.registerService(JAXBContextProvider.class,new JAXBContextProvider(),null));
}","@Override public void start(final BundleContext bundleContext) throws Exception {
  logger.info(""String_Node_Str"",bundleContext.getBundle().getSymbolicName(),bundleContext.getBundle().getVersion());
  context=bundleContext;
  this.services.add(bundleContext.registerService(RootController.class,new RootController(),null));
  this.configurator(bundleContext);
  this.services.add(bundleContext.registerService(ApplicationConfiguration.class,this,null));
  this.services.add(bundleContext.registerService(CorsFilter.class,new CorsFilter(),null));
  this.services.add(bundleContext.registerService(PlainTextMessageBodyWriter.class,new PlainTextMessageBodyWriter(),null));
  this.services.add(bundleContext.registerService(ObjectMapperProvider.class,new ObjectMapperProvider(),null));
  this.services.add(bundleContext.registerService(JacksonFeature.class,new JacksonFeature(),null));
  this.services.add(bundleContext.registerService(MultiPartFeature.class,new MultiPartFeature(),null));
  this.services.add(bundleContext.registerService(JAXBContextProvider.class,new JAXBContextProvider(),null));
}"
40943,"@GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @ApiOperation(value=""String_Node_Str"",response=PlanInstanceEventDTO.class,responseContainer=""String_Node_Str"") @ApiResponses(@ApiResponse(code=404,message=""String_Node_Str"")) public Response getBuildPlanInstanceLogs(@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String plan,@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String instance,@Context final UriInfo uriInfo){
  return this.planService.getPlanInstanceLogs(plan,instance,uriInfo,csarId,serviceTemplate,serviceTemplateInstanceId,PLAN_TYPE);
}","@GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @ApiOperation(value=""String_Node_Str"",response=PlanInstanceEventDTO.class,responseContainer=""String_Node_Str"") @ApiResponses(@ApiResponse(code=404,message=""String_Node_Str"")) public Response getBuildPlanInstanceLogs(@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String plan,@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String instance,@Context final UriInfo uriInfo){
  return this.planService.getPlanInstanceLogs(plan,instance,uriInfo,csarId,serviceTemplate,null,PLAN_TYPE);
}"
40944,"@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) @ApiOperation(value=""String_Node_Str"") @ApiResponses({@ApiResponse(code=400,message=""String_Node_Str""),@ApiResponse(code=200,message=""String_Node_Str"",response=URI.class)}) public Response invokeBuildPlan(@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String plan,@Context final UriInfo uriInfo,@ApiParam(required=true,value=""String_Node_Str"") final List<TParameter> parameters){
  return this.planService.invokePlan(plan,uriInfo,parameters,csarId,serviceTemplate,serviceTemplateInstanceId,PLAN_TYPE);
}","@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) @ApiOperation(value=""String_Node_Str"") @ApiResponses({@ApiResponse(code=400,message=""String_Node_Str""),@ApiResponse(code=200,message=""String_Node_Str"",response=URI.class)}) public Response invokeBuildPlan(@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String plan,@Context final UriInfo uriInfo,@ApiParam(required=true,value=""String_Node_Str"") final List<TParameter> parameters){
  return this.planService.invokePlan(plan,uriInfo,parameters,csarId,serviceTemplate,-1L,PLAN_TYPE);
}"
40945,"@GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @ApiOperation(value=""String_Node_Str"",response=PlanInstanceDTO.class,responseContainer=""String_Node_Str"") @ApiResponses(@ApiResponse(code=404,message=""String_Node_Str"")) public Response getBuildPlanInstance(@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String plan,@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String instance,@Context final UriInfo uriInfo){
  return this.planService.getPlanInstance(plan,instance,uriInfo,csarId,serviceTemplate,serviceTemplateInstanceId,PLAN_TYPE);
}","@GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @ApiOperation(value=""String_Node_Str"",response=PlanInstanceDTO.class,responseContainer=""String_Node_Str"") @ApiResponses(@ApiResponse(code=404,message=""String_Node_Str"")) public Response getBuildPlanInstance(@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String plan,@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String instance,@Context final UriInfo uriInfo){
  return this.planService.getPlanInstance(plan,instance,uriInfo,csarId,serviceTemplate,null,PLAN_TYPE);
}"
40946,"@GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @ApiOperation(value=""String_Node_Str"",response=PlanInstanceDTO.class,responseContainer=""String_Node_Str"") public Response getBuildPlanInstances(@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String plan,@Context final UriInfo uriInfo){
  return this.planService.getPlanInstances(plan,uriInfo,csarId,serviceTemplate,serviceTemplateInstanceId,PLAN_TYPE);
}","@GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @ApiOperation(value=""String_Node_Str"",response=PlanInstanceDTO.class,responseContainer=""String_Node_Str"") public Response getBuildPlanInstances(@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String plan,@Context final UriInfo uriInfo){
  return this.planService.getPlanInstances(plan,uriInfo,csarId,serviceTemplate,null,PLAN_TYPE);
}"
40947,"@PUT @Path(""String_Node_Str"") @Consumes({MediaType.TEXT_PLAIN}) @ApiOperation(value=""String_Node_Str"") @ApiResponses({@ApiResponse(code=404,message=""String_Node_Str""),@ApiResponse(code=400,message=""String_Node_Str""),@ApiResponse(code=200,message=""String_Node_Str"")}) public Response changeBuildPlanInstanceState(@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String plan,@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String instance,@Context final UriInfo uriInfo,@ApiParam(required=true,value=""String_Node_Str"") String request){
  return this.planService.changePlanInstanceState(request,plan,instance,uriInfo,csarId,serviceTemplate,serviceTemplateInstanceId,PLAN_TYPE);
}","@PUT @Path(""String_Node_Str"") @Consumes({MediaType.TEXT_PLAIN}) @ApiOperation(value=""String_Node_Str"") @ApiResponses({@ApiResponse(code=404,message=""String_Node_Str""),@ApiResponse(code=400,message=""String_Node_Str""),@ApiResponse(code=200,message=""String_Node_Str"")}) public Response changeBuildPlanInstanceState(@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String plan,@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String instance,@Context final UriInfo uriInfo,@ApiParam(required=true,value=""String_Node_Str"") String request){
  return this.planService.changePlanInstanceState(request,plan,instance,uriInfo,csarId,serviceTemplate,null,PLAN_TYPE);
}"
40948,"public BuildPlanController(final CSARID csarId,final QName serviceTemplate,final Long serviceTemplateInstanceId,final PlanService planService){
  this.csarId=csarId;
  this.serviceTemplate=serviceTemplate;
  this.serviceTemplateInstanceId=serviceTemplateInstanceId;
  this.planService=planService;
}","public BuildPlanController(final CSARID csarId,final QName serviceTemplate,final PlanService planService){
  this.csarId=csarId;
  this.serviceTemplate=serviceTemplate;
  this.planService=planService;
}"
40949,"@GET @Path(""String_Node_Str"") @Produces({MediaType.TEXT_PLAIN}) @ApiOperation(value=""String_Node_Str"",response=String.class) @ApiResponses(@ApiResponse(code=404,message=""String_Node_Str"")) public Response getBuildPlanInstanceState(@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String plan,@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String instance,@Context final UriInfo uriInfo){
  return this.planService.getPlanInstanceState(plan,instance,uriInfo,csarId,serviceTemplate,serviceTemplateInstanceId,PLAN_TYPE);
}","@GET @Path(""String_Node_Str"") @Produces({MediaType.TEXT_PLAIN}) @ApiOperation(value=""String_Node_Str"",response=String.class) @ApiResponses(@ApiResponse(code=404,message=""String_Node_Str"")) public Response getBuildPlanInstanceState(@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String plan,@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String instance,@Context final UriInfo uriInfo){
  return this.planService.getPlanInstanceState(plan,instance,uriInfo,csarId,serviceTemplate,null,PLAN_TYPE);
}"
40950,"@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @ApiOperation(value=""String_Node_Str"") @ApiResponses({@ApiResponse(code=400,message=""String_Node_Str""),@ApiResponse(code=404,message=""String_Node_Str""),@ApiResponse(code=200,message=""String_Node_Str"",response=URI.class)}) public Response addBuildPlanLogEntry(@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String plan,@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String instance,@Context final UriInfo uriInfo,@ApiParam(required=true,value=""String_Node_Str"") final CreatePlanInstanceLogEntryRequest logEntry){
  return this.planService.addLogToPlanInstance(logEntry,plan,instance,uriInfo,csarId,serviceTemplate,serviceTemplateInstanceId,PLAN_TYPE);
}","@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @ApiOperation(value=""String_Node_Str"") @ApiResponses({@ApiResponse(code=400,message=""String_Node_Str""),@ApiResponse(code=404,message=""String_Node_Str""),@ApiResponse(code=200,message=""String_Node_Str"",response=URI.class)}) public Response addBuildPlanLogEntry(@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String plan,@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String instance,@Context final UriInfo uriInfo,@ApiParam(required=true,value=""String_Node_Str"") final CreatePlanInstanceLogEntryRequest logEntry){
  return this.planService.addLogToPlanInstance(logEntry,plan,instance,uriInfo,csarId,serviceTemplate,null,PLAN_TYPE);
}"
40951,"@Path(""String_Node_Str"") public BuildPlanController getBuildPlans(@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String csar,@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String serviceTemplateId){
  final CSARID csarId=this.serviceTemplateService.checkServiceTemplateExistence(csar,serviceTemplateId);
  return new BuildPlanController(csarId,QName.valueOf(serviceTemplateId),null,this.planService);
}","@Path(""String_Node_Str"") public BuildPlanController getBuildPlans(@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String csar,@ApiParam(""String_Node_Str"") @PathParam(""String_Node_Str"") final String serviceTemplateId){
  final CSARID csarId=this.serviceTemplateService.checkServiceTemplateExistence(csar,serviceTemplateId);
  return new BuildPlanController(csarId,QName.valueOf(serviceTemplateId),this.planService);
}"
40952,"public Response invokePlan(final String plan,final UriInfo uriInfo,final List<TParameter> parameters,final CSARID csarId,final QName serviceTemplate,final Long serviceTemplateInstanceId,final PlanTypes... planTypes){
  if (parameters == null) {
    return Response.status(Status.BAD_REQUEST).build();
  }
  if (!hasPlan(csarId,planTypes,plan)) {
    logger.info(""String_Node_Str"" + plan + ""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"" + plan + ""String_Node_Str"");
  }
  logger.info(""String_Node_Str"",plan,serviceTemplate,csarId);
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",JsonUtil.writeValueAsString(parameters));
  }
  if (serviceTemplateInstanceId != null) {
    String url=Settings.CONTAINER_INSTANCEDATA_API + serviceTemplateInstanceId;
    url=url.replace(""String_Node_Str"",csarId.getFileName());
    url=url.replace(""String_Node_Str"",UriComponent.encode(serviceTemplate.toString(),UriComponent.Type.PATH_SEGMENT));
    final URI uri=UriUtil.encode(URI.create(url));
    final TParameter param=new TParameter();
    param.setName(""String_Node_Str"");
    param.setRequired(TBoolean.fromValue(""String_Node_Str""));
    param.setType(""String_Node_Str"");
    param.setValue(uri.toString());
    parameters.add(param);
  }
  final TPlan p=getPlan(plan,csarId);
  final String correlationId=invokePlan(csarId,serviceTemplate,p,parameters);
  final URI location=UriUtil.encode(uriInfo.getAbsolutePathBuilder().path(correlationId).build());
  return Response.created(location).build();
}","public Response invokePlan(final String plan,final UriInfo uriInfo,final List<TParameter> parameters,final CSARID csarId,final QName serviceTemplate,final Long serviceTemplateInstanceId,final PlanTypes... planTypes){
  if (parameters == null) {
    return Response.status(Status.BAD_REQUEST).build();
  }
  if (!hasPlan(csarId,planTypes,plan)) {
    logger.info(""String_Node_Str"" + plan + ""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"" + plan + ""String_Node_Str"");
  }
  logger.info(""String_Node_Str"",plan,serviceTemplate,csarId);
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"",JsonUtil.writeValueAsString(parameters));
  }
  if (serviceTemplateInstanceId != null) {
    String url=Settings.CONTAINER_INSTANCEDATA_API + serviceTemplateInstanceId;
    url=url.replace(""String_Node_Str"",csarId.getFileName());
    url=url.replace(""String_Node_Str"",UriComponent.encode(serviceTemplate.toString(),UriComponent.Type.PATH_SEGMENT));
    final URI uri=UriUtil.encode(URI.create(url));
    final TParameter param=new TParameter();
    param.setName(""String_Node_Str"");
    param.setRequired(TBoolean.fromValue(""String_Node_Str""));
    param.setType(""String_Node_Str"");
    param.setValue(uri.toString());
    parameters.add(param);
  }
  final TPlan p=getPlan(plan,csarId);
  final String correlationId=invokePlan(csarId,serviceTemplate,serviceTemplateInstanceId,p,parameters);
  final URI location=UriUtil.encode(uriInfo.getAbsolutePathBuilder().path(correlationId).build());
  return Response.created(location).build();
}"
40953,"/** 
 */
public Response getPlanInstances(final String plan,final UriInfo uriInfo,final CSARID csarId,final QName serviceTemplate,final Long serviceTemplateInstanceId,final PlanTypes... planTypes){
  if (!hasPlan(csarId,planTypes,plan)) {
    logger.info(""String_Node_Str"" + plan + ""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"" + plan + ""String_Node_Str"");
  }
  ServiceTemplateInstanceRepository repo=new ServiceTemplateInstanceRepository();
  final Collection<ServiceTemplateInstance> serviceInstances;
  if (serviceTemplateInstanceId != null) {
    serviceInstances=Lists.newArrayList();
    serviceInstances.add(repo.find(serviceTemplateInstanceId).get());
  }
 else {
    serviceInstances=repo.findByCsarId(csarId);
  }
  final List<PlanInstanceDTO> planInstances=Lists.newArrayList();
  for (  ServiceTemplateInstance sti : serviceInstances) {
    List<PlanInstanceDTO> foo=sti.getPlanInstances().stream().filter(p -> Arrays.asList(planTypes).contains(PlanTypes.isPlanTypeURI(p.getType().toString()))).map(p -> PlanInstanceDTO.Converter.convert(p)).collect(Collectors.toList());
    planInstances.addAll(foo);
  }
  for (  final PlanInstanceDTO pi : planInstances) {
    final Long id=pi.getServiceTemplateInstanceId();
    if (id != null) {
      final URI uri=uriInfo.getBaseUriBuilder().path(""String_Node_Str"").build(csarId.toString(),serviceTemplate.toString(),String.valueOf(id));
      pi.add(Link.fromUri(UriUtil.encode(uri)).rel(""String_Node_Str"").build());
    }
    pi.add(UriUtil.generateSubResourceLink(uriInfo,pi.getCorrelationId(),true,""String_Node_Str""));
  }
  final PlanInstanceListDTO list=new PlanInstanceListDTO();
  list.add(planInstances);
  list.add(UriUtil.generateSelfLink(uriInfo));
  return Response.ok(list).build();
}","/** 
 */
public Response getPlanInstances(final String plan,final UriInfo uriInfo,final CSARID csarId,final QName serviceTemplate,final Long serviceTemplateInstanceId,final PlanTypes... planTypes){
  if (!hasPlan(csarId,planTypes,plan)) {
    logger.info(""String_Node_Str"" + plan + ""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"" + plan + ""String_Node_Str"");
  }
  ServiceTemplateInstanceRepository repo=new ServiceTemplateInstanceRepository();
  final Collection<ServiceTemplateInstance> serviceInstances;
  if (serviceTemplateInstanceId != null) {
    serviceInstances=Lists.newArrayList();
    serviceInstances.add(repo.find(serviceTemplateInstanceId).get());
  }
 else {
    serviceInstances=repo.findByCsarId(csarId);
  }
  final List<PlanInstanceDTO> planInstances=Lists.newArrayList();
  for (  ServiceTemplateInstance sti : serviceInstances) {
    List<PlanInstanceDTO> foo=sti.getPlanInstances().stream().filter(p -> {
      PlanTypes currType=PlanTypes.isPlanTypeURI(p.getType().toString());
      return Arrays.asList(planTypes).contains(currType);
    }
).map(p -> PlanInstanceDTO.Converter.convert(p)).collect(Collectors.toList());
    planInstances.addAll(foo);
  }
  for (  final PlanInstanceDTO pi : planInstances) {
    final Long id=pi.getServiceTemplateInstanceId();
    if (id != null) {
      final URI uri=uriInfo.getBaseUriBuilder().path(""String_Node_Str"").build(csarId.toString(),serviceTemplate.toString(),String.valueOf(id));
      pi.add(Link.fromUri(UriUtil.encode(uri)).rel(""String_Node_Str"").build());
    }
    pi.add(UriUtil.generateSubResourceLink(uriInfo,pi.getCorrelationId(),true,""String_Node_Str""));
  }
  final PlanInstanceListDTO list=new PlanInstanceListDTO();
  list.add(planInstances);
  list.add(UriUtil.generateSelfLink(uriInfo));
  return Response.ok(list).build();
}"
40954,"/** 
 * Invokes the a process described due the parameter PublicPlan for the given CSAR.
 * @param csarID the ID of the CSAR
 * @param csarInstanceID the instance id, or -1 if the plan is a build plan
 * @param plan which containes the data which with the process is invoked(including the message values).
 * @return
 * @throws UnsupportedEncodingException
 */
public String invokePlanInvocation(CSARID csarID,QName serviceTemplateId,int csarInstanceID,TPlanDTO plan) throws UnsupportedEncodingException ;","/** 
 * Invokes the a process described due the parameter PublicPlan for the given CSAR.
 * @param csarID the ID of the CSAR
 * @param serviceTemplateInstanceID the instance id, or -1 if the plan is a build plan
 * @param plan which containes the data which with the process is invoked(including the message values).
 * @return
 * @throws UnsupportedEncodingException
 */
public String invokePlanInvocation(CSARID csarID,QName serviceTemplateId,long serviceTemplateInstanceID,TPlanDTO plan) throws UnsupportedEncodingException ;"
40955,"/** 
 * {@inheritDoc}
 * @throws UnsupportedEncodingException
 */
@Override public String invokePlanInvocation(final CSARID csarID,final QName serviceTemplateId,final int csarInstanceID,final TPlanDTO plan) throws UnsupportedEncodingException {
  this.LOG.info(""String_Node_Str"");
  final String correlationID=OpenToscaControlServiceImpl.planInvocationEngine.invokePlan(csarID,serviceTemplateId,csarInstanceID,plan);
  if (null != correlationID) {
    this.LOG.info(""String_Node_Str"");
  }
 else {
    this.LOG.error(""String_Node_Str"");
  }
  return correlationID;
}","/** 
 * {@inheritDoc}
 * @throws UnsupportedEncodingException
 */
@Override public String invokePlanInvocation(final CSARID csarID,final QName serviceTemplateId,final long csarInstanceID,final TPlanDTO plan) throws UnsupportedEncodingException {
  this.LOG.info(""String_Node_Str"");
  final String correlationID=OpenToscaControlServiceImpl.planInvocationEngine.invokePlan(csarID,serviceTemplateId,csarInstanceID,plan);
  if (null != correlationID) {
    this.LOG.info(""String_Node_Str"");
  }
 else {
    this.LOG.error(""String_Node_Str"");
  }
  return correlationID;
}"
40956,"/** 
 * {@inheritDoc}
 * @throws UnsupportedEncodingException
 */
@Override public String invokePlan(final CSARID csarID,final QName serviceTemplateId,int serviceTemplateInstanceID,final TPlanDTO givenPlan) throws UnsupportedEncodingException {
  final TPlan storedPlan=ServiceProxy.toscaReferenceMapper.getPlanForCSARIDAndPlanID(csarID,givenPlan.getId());
  if ((null == storedPlan)) {
    this.LOG.error(""String_Node_Str"" + givenPlan.getId() + ""String_Node_Str""+ givenPlan.getName()+ ""String_Node_Str"");
    return null;
  }
  if (!storedPlan.getId().equals(givenPlan.getId().getLocalPart())) {
    this.LOG.error(""String_Node_Str"" + givenPlan.getId() + ""String_Node_Str""+ givenPlan.getName()+ ""String_Node_Str""+ storedPlan.getId()+ ""String_Node_Str"");
    return null;
  }
  givenPlan.setName(storedPlan.getName());
  givenPlan.setPlanLanguage(storedPlan.getPlanLanguage());
  givenPlan.setPlanType(storedPlan.getPlanType());
  givenPlan.setOutputParameters(storedPlan.getOutputParameters());
  final PlanInvocationEvent planEvent=new PlanInvocationEvent();
  this.LOG.info(""String_Node_Str"" + givenPlan.getId() + ""String_Node_Str""+ givenPlan.getPlanType()+ ""String_Node_Str""+ csarID+ ""String_Node_Str"");
  final Map<QName,TPlan> publicPlanMap=ServiceProxy.toscaReferenceMapper.getCSARIDToPlans(csarID).get(PlanTypes.isPlanTypeURI(givenPlan.getPlanType()));
  if (null == publicPlanMap) {
    this.LOG.error(""String_Node_Str"" + givenPlan.getPlanType() + ""String_Node_Str"");
    return null;
  }
  planEvent.setCSARID(csarID.toString());
  planEvent.setInputMessageID(ServiceProxy.toscaReferenceMapper.getPlanInputMessageID(csarID,givenPlan.getId()));
  planEvent.setInterfaceName(ServiceProxy.toscaReferenceMapper.getIntferaceNameOfPlan(csarID,givenPlan.getId()));
  planEvent.setOperationName(ServiceProxy.toscaReferenceMapper.getOperationNameOfPlan(csarID,givenPlan.getId()));
  planEvent.setPlanLanguage(storedPlan.getPlanLanguage());
  planEvent.setPlanType(storedPlan.getPlanType());
  planEvent.setPlanID(givenPlan.getId());
  planEvent.setIsActive(true);
  planEvent.setHasFailed(false);
  for (  final TParameter temp : storedPlan.getInputParameters().getInputParameter()) {
    boolean found=false;
    this.LOG.trace(""String_Node_Str"",temp.getName());
    final List<TParameterDTO> params=givenPlan.getInputParameters().getInputParameter();
    for (    final TParameterDTO param : params) {
      if (param.getName().equals(temp.getName())) {
        final TParameterDTO dto=param;
        found=true;
        planEvent.getInputParameter().add(dto);
        String value=dto.getValue();
        if (value == null) {
          value=""String_Node_Str"";
        }
        value=value.replace(""String_Node_Str"",""String_Node_Str"");
        value=value.replace(""String_Node_Str"",""String_Node_Str"");
        value=value.replace(""String_Node_Str"",""String_Node_Str"");
        dto.setValue(value);
        this.LOG.trace(""String_Node_Str"",param.getName(),param.getValue());
      }
    }
    if (!found) {
      this.LOG.trace(""String_Node_Str"",temp.getName());
      final TParameterDTO newParam=new TParameterDTO();
      newParam.setName(temp.getName());
      newParam.setType(temp.getType());
      newParam.setRequired(temp.getRequired());
      planEvent.getInputParameter().add(newParam);
    }
  }
  for (  final TParameter temp : storedPlan.getOutputParameters().getOutputParameter()) {
    final TParameterDTO param=new TParameterDTO();
    param.setName(temp.getName());
    param.setRequired(temp.getRequired());
    param.setType(temp.getType());
    planEvent.getOutputParameter().add(param);
  }
  String correlationID;
  if (serviceTemplateInstanceID == -1) {
    serviceTemplateInstanceID=1000 + (int)(Math.random() * (Integer.MAX_VALUE - 1000));
    correlationID=ServiceProxy.correlationHandler.getNewCorrelationID(csarID,serviceTemplateId,serviceTemplateInstanceID,planEvent,true);
  }
 else {
    correlationID=ServiceProxy.correlationHandler.getNewCorrelationID(csarID,serviceTemplateId,serviceTemplateInstanceID,planEvent,false);
  }
  ServiceTemplateInstanceID instanceID;
  if (PlanTypes.isPlanTypeURI(planEvent.getPlanType()).equals(PlanTypes.BUILD)) {
    instanceID=ServiceProxy.csarInstanceManagement.createNewInstance(csarID,serviceTemplateId);
    planEvent.setCSARInstanceID(instanceID.getInstanceID());
  }
 else {
    instanceID=new ServiceTemplateInstanceID(csarID,serviceTemplateId,serviceTemplateInstanceID);
  }
  ServiceProxy.csarInstanceManagement.correlateCSARInstanceWithPlanInstance(instanceID,correlationID);
  ServiceProxy.csarInstanceManagement.setCorrelationAsActive(csarID,correlationID);
  ServiceProxy.csarInstanceManagement.correlateCorrelationIdToPlan(correlationID,planEvent);
  final Map<String,Object> eventValues=new Hashtable<>();
  eventValues.put(""String_Node_Str"",csarID);
  eventValues.put(""String_Node_Str"",planEvent.getPlanID());
  eventValues.put(""String_Node_Str"",planEvent.getPlanLanguage());
  eventValues.put(""String_Node_Str"",planEvent.getOperationName());
  this.LOG.debug(""String_Node_Str"",givenPlan.getId());
  final Map<String,String> message=this.createRequest(csarID,serviceTemplateId,ServiceProxy.toscaReferenceMapper.getPlanInputMessageID(csarID,givenPlan.getId()),planEvent.getInputParameter(),correlationID);
  if (null == message) {
    this.LOG.error(""String_Node_Str"",givenPlan.getId(),givenPlan.getPlanLanguage());
    return null;
  }
  final StringBuilder builder=new StringBuilder(""String_Node_Str"");
  for (  final String key : message.keySet()) {
    builder.append(""String_Node_Str"" + key + ""String_Node_Str""+ message.get(key)+ ""String_Node_Str"");
  }
  this.LOG.trace(builder.toString());
  eventValues.put(""String_Node_Str"",message);
  if (null == ServiceProxy.toscaReferenceMapper.isPlanAsynchronous(csarID,givenPlan.getId())) {
    this.LOG.warn(""String_Node_Str"");
    eventValues.put(""String_Node_Str"",true);
  }
 else   if (ServiceProxy.toscaReferenceMapper.isPlanAsynchronous(csarID,givenPlan.getId())) {
    eventValues.put(""String_Node_Str"",true);
  }
 else {
    eventValues.put(""String_Node_Str"",false);
  }
  eventValues.put(""String_Node_Str"",correlationID);
  ServiceProxy.csarInstanceManagement.storePublicPlanToHistory(correlationID,planEvent);
  PlanInstanceRepository repository=new PlanInstanceRepository();
  PlanInstance pi=new PlanInstance();
  pi.setCorrelationId(correlationID);
  LOG.debug(""String_Node_Str"",storedPlan.getPlanLanguage());
  pi.setLanguage(PlanLanguage.fromString(storedPlan.getPlanLanguage()));
  LOG.debug(""String_Node_Str"",storedPlan.getPlanType());
  pi.setType(PlanType.fromString(storedPlan.getPlanType()));
  pi.setState(PlanInstanceState.RUNNING);
  pi.setTemplateId(givenPlan.getId());
  stiRepo.find(Long.valueOf(serviceTemplateInstanceID)).ifPresent(serviceTemplateInstance -> pi.setServiceTemplateInstance(serviceTemplateInstance));
  planEvent.getInputParameter().stream().forEach(p -> {
    new PlanInstanceInput(p.getName(),p.getValue(),p.getType()).setPlanInstance(pi);
  }
);
  repository.add(pi);
  final Event event=new Event(""String_Node_Str"",eventValues);
  this.LOG.debug(""String_Node_Str"",correlationID);
  ServiceProxy.eventAdmin.sendEvent(event);
  return correlationID;
}","/** 
 * {@inheritDoc}
 * @throws UnsupportedEncodingException
 */
@Override public String invokePlan(final CSARID csarID,final QName serviceTemplateId,long serviceTemplateInstanceID,final TPlanDTO givenPlan) throws UnsupportedEncodingException {
  final TPlan storedPlan=ServiceProxy.toscaReferenceMapper.getPlanForCSARIDAndPlanID(csarID,givenPlan.getId());
  if ((null == storedPlan)) {
    this.LOG.error(""String_Node_Str"" + givenPlan.getId() + ""String_Node_Str""+ givenPlan.getName()+ ""String_Node_Str"");
    return null;
  }
  if (!storedPlan.getId().equals(givenPlan.getId().getLocalPart())) {
    this.LOG.error(""String_Node_Str"" + givenPlan.getId() + ""String_Node_Str""+ givenPlan.getName()+ ""String_Node_Str""+ storedPlan.getId()+ ""String_Node_Str"");
    return null;
  }
  givenPlan.setName(storedPlan.getName());
  givenPlan.setPlanLanguage(storedPlan.getPlanLanguage());
  givenPlan.setPlanType(storedPlan.getPlanType());
  givenPlan.setOutputParameters(storedPlan.getOutputParameters());
  final PlanInvocationEvent planEvent=new PlanInvocationEvent();
  this.LOG.info(""String_Node_Str"" + givenPlan.getId() + ""String_Node_Str""+ givenPlan.getPlanType()+ ""String_Node_Str""+ csarID+ ""String_Node_Str"");
  final Map<QName,TPlan> publicPlanMap=ServiceProxy.toscaReferenceMapper.getCSARIDToPlans(csarID).get(PlanTypes.isPlanTypeURI(givenPlan.getPlanType()));
  if (null == publicPlanMap) {
    this.LOG.error(""String_Node_Str"" + givenPlan.getPlanType() + ""String_Node_Str"");
    return null;
  }
  planEvent.setCSARID(csarID.toString());
  planEvent.setInputMessageID(ServiceProxy.toscaReferenceMapper.getPlanInputMessageID(csarID,givenPlan.getId()));
  planEvent.setInterfaceName(ServiceProxy.toscaReferenceMapper.getIntferaceNameOfPlan(csarID,givenPlan.getId()));
  planEvent.setOperationName(ServiceProxy.toscaReferenceMapper.getOperationNameOfPlan(csarID,givenPlan.getId()));
  planEvent.setPlanLanguage(storedPlan.getPlanLanguage());
  planEvent.setPlanType(storedPlan.getPlanType());
  planEvent.setPlanID(givenPlan.getId());
  planEvent.setIsActive(true);
  planEvent.setHasFailed(false);
  for (  final TParameter temp : storedPlan.getInputParameters().getInputParameter()) {
    boolean found=false;
    this.LOG.trace(""String_Node_Str"",temp.getName());
    final List<TParameterDTO> params=givenPlan.getInputParameters().getInputParameter();
    for (    final TParameterDTO param : params) {
      if (param.getName().equals(temp.getName())) {
        final TParameterDTO dto=param;
        found=true;
        planEvent.getInputParameter().add(dto);
        String value=dto.getValue();
        if (value == null) {
          value=""String_Node_Str"";
        }
        value=value.replace(""String_Node_Str"",""String_Node_Str"");
        value=value.replace(""String_Node_Str"",""String_Node_Str"");
        value=value.replace(""String_Node_Str"",""String_Node_Str"");
        dto.setValue(value);
        this.LOG.trace(""String_Node_Str"",param.getName(),param.getValue());
      }
    }
    if (!found) {
      this.LOG.trace(""String_Node_Str"",temp.getName());
      final TParameterDTO newParam=new TParameterDTO();
      newParam.setName(temp.getName());
      newParam.setType(temp.getType());
      newParam.setRequired(temp.getRequired());
      planEvent.getInputParameter().add(newParam);
    }
  }
  for (  final TParameter temp : storedPlan.getOutputParameters().getOutputParameter()) {
    final TParameterDTO param=new TParameterDTO();
    param.setName(temp.getName());
    param.setRequired(temp.getRequired());
    param.setType(temp.getType());
    planEvent.getOutputParameter().add(param);
  }
  String correlationID;
  if (serviceTemplateInstanceID == -1) {
    serviceTemplateInstanceID=1000 + (int)(Math.random() * (Integer.MAX_VALUE - 1000));
    correlationID=ServiceProxy.correlationHandler.getNewCorrelationID(csarID,serviceTemplateId,(int)serviceTemplateInstanceID,planEvent,true);
  }
 else {
    correlationID=ServiceProxy.correlationHandler.getNewCorrelationID(csarID,serviceTemplateId,(int)serviceTemplateInstanceID,planEvent,false);
  }
  ServiceTemplateInstanceID instanceID;
  if (PlanTypes.isPlanTypeURI(planEvent.getPlanType()).equals(PlanTypes.BUILD)) {
    instanceID=ServiceProxy.csarInstanceManagement.createNewInstance(csarID,serviceTemplateId);
    planEvent.setCSARInstanceID(instanceID.getInstanceID());
  }
 else {
    instanceID=new ServiceTemplateInstanceID(csarID,serviceTemplateId,(int)serviceTemplateInstanceID);
  }
  ServiceProxy.csarInstanceManagement.correlateCSARInstanceWithPlanInstance(instanceID,correlationID);
  ServiceProxy.csarInstanceManagement.setCorrelationAsActive(csarID,correlationID);
  ServiceProxy.csarInstanceManagement.correlateCorrelationIdToPlan(correlationID,planEvent);
  final Map<String,Object> eventValues=new Hashtable<>();
  eventValues.put(""String_Node_Str"",csarID);
  eventValues.put(""String_Node_Str"",planEvent.getPlanID());
  eventValues.put(""String_Node_Str"",planEvent.getPlanLanguage());
  eventValues.put(""String_Node_Str"",planEvent.getOperationName());
  this.LOG.debug(""String_Node_Str"",givenPlan.getId());
  final Map<String,String> message=this.createRequest(csarID,serviceTemplateId,ServiceProxy.toscaReferenceMapper.getPlanInputMessageID(csarID,givenPlan.getId()),planEvent.getInputParameter(),correlationID);
  if (null == message) {
    this.LOG.error(""String_Node_Str"",givenPlan.getId(),givenPlan.getPlanLanguage());
    return null;
  }
  final StringBuilder builder=new StringBuilder(""String_Node_Str"");
  for (  final String key : message.keySet()) {
    builder.append(""String_Node_Str"" + key + ""String_Node_Str""+ message.get(key)+ ""String_Node_Str"");
  }
  this.LOG.trace(builder.toString());
  eventValues.put(""String_Node_Str"",message);
  if (null == ServiceProxy.toscaReferenceMapper.isPlanAsynchronous(csarID,givenPlan.getId())) {
    this.LOG.warn(""String_Node_Str"");
    eventValues.put(""String_Node_Str"",true);
  }
 else   if (ServiceProxy.toscaReferenceMapper.isPlanAsynchronous(csarID,givenPlan.getId())) {
    eventValues.put(""String_Node_Str"",true);
  }
 else {
    eventValues.put(""String_Node_Str"",false);
  }
  eventValues.put(""String_Node_Str"",correlationID);
  ServiceProxy.csarInstanceManagement.storePublicPlanToHistory(correlationID,planEvent);
  PlanInstanceRepository repository=new PlanInstanceRepository();
  PlanInstance pi=new PlanInstance();
  pi.setCorrelationId(correlationID);
  LOG.debug(""String_Node_Str"",storedPlan.getPlanLanguage());
  pi.setLanguage(PlanLanguage.fromString(storedPlan.getPlanLanguage()));
  LOG.debug(""String_Node_Str"",storedPlan.getPlanType());
  pi.setType(PlanType.fromString(storedPlan.getPlanType()));
  pi.setState(PlanInstanceState.RUNNING);
  pi.setTemplateId(givenPlan.getId());
  stiRepo.find(serviceTemplateInstanceID).ifPresent(serviceTemplateInstance -> pi.setServiceTemplateInstance(serviceTemplateInstance));
  planEvent.getInputParameter().stream().forEach(p -> {
    new PlanInstanceInput(p.getName(),p.getValue(),p.getType()).setPlanInstance(pi);
  }
);
  repository.add(pi);
  final Event event=new Event(""String_Node_Str"",eventValues);
  this.LOG.debug(""String_Node_Str"",correlationID);
  ServiceProxy.eventAdmin.sendEvent(event);
  return correlationID;
}"
40957,"/** 
 * Invoke a PublicPlan for a CSAR. If this PublicPlan is of Type OTHERMANAGEMENT or TERMINATION, the information about the CSARInstance is stored inside the PublicPlan.
 * @param csarID
 * @param instance ID of a CSAR instance
 * @param publicPlan
 * @return boolean about success
 * @throws UnsupportedEncodingException
 */
public String invokePlan(CSARID csarID,QName serviceTemplateId,int csarInstanceID,TPlanDTO plan) throws UnsupportedEncodingException ;","/** 
 * Invoke a PublicPlan for a CSAR. If this PublicPlan is of Type OTHERMANAGEMENT or TERMINATION, the information about the CSARInstance is stored inside the PublicPlan.
 * @param csarID
 * @param instance ID of a CSAR instance
 * @param publicPlan
 * @return boolean about success
 * @throws UnsupportedEncodingException
 */
public String invokePlan(CSARID csarID,QName serviceTemplateId,long serviceTemplateInstanceID,TPlanDTO plan) throws UnsupportedEncodingException ;"
40958,"@Override public void start(BundleContext bundleContext) throws Exception {
  Activator.context=bundleContext;
  this.plugin=new Plugin();
  this.registration=Activator.context.registerService(IPlanBuilderPostPhasePlugin.class.getName(),this.plugin,null);
  this.registration2=Activator.context.registerService(IPlanBuilderPolicyAwarePrePhasePlugin.class.getName(),this.plugin,null);
}","@Override public void start(BundleContext bundleContext) throws Exception {
  Activator.context=bundleContext;
  this.plugin=new BPELInstanceDataPlugin();
  this.registration=Activator.context.registerService(IPlanBuilderPostPhasePlugin.class.getName(),this.plugin,null);
  this.registration2=Activator.context.registerService(IPlanBuilderPolicyAwarePrePhasePlugin.class.getName(),this.plugin,null);
}"
40959,"@Override public boolean handle(BPELPlanContext context,AbstractRelationshipTemplate relationshipTemplate){
  return this.handler.handle(context,relationshipTemplate);
}","@Override public boolean handle(BPELPlanContext context,AbstractNodeTemplate nodeTemplate,AbstractPolicy policy){
  return this.handler.handlePasswordCheck(context,nodeTemplate);
}"
40960,"@Override public boolean handle(TemplatePlanContext context,AbstractNodeTemplate nodeTemplate,List<String> selectionStrategies){
  String inputFieldName=nodeTemplate.getId() + ""String_Node_Str"";
  context.addStringValueToPlanRequest(inputFieldName);
  String nodeInstanceVarName=this.findInstanceVar(context,nodeTemplate.getId(),true);
  try {
    Node assignFromInputToNodeInstanceIdVar=new BPELProcessFragments().generateAssignFromInputMessageToStringVariableAsNode(inputFieldName,nodeInstanceVarName);
    assignFromInputToNodeInstanceIdVar=context.importNode(assignFromInputToNodeInstanceIdVar);
    context.getPrePhaseElement().appendChild(assignFromInputToNodeInstanceIdVar);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ParserConfigurationException e) {
    e.printStackTrace();
  }
catch (  SAXException e) {
    e.printStackTrace();
  }
  return false;
}","@Override public boolean handle(TemplatePlanContext context,AbstractNodeTemplate nodeTemplate,List<String> selectionStrategies){
  String inputFieldName=nodeTemplate.getId() + ""String_Node_Str"";
  context.addStringValueToPlanRequest(inputFieldName);
  String nodeInstanceVarName=this.findInstanceVar(context,nodeTemplate.getId(),true);
  try {
    Node assignFromInputToNodeInstanceIdVar=new BPELProcessFragments().generateAssignFromInputMessageToStringVariableAsNode(inputFieldName,nodeInstanceVarName);
    assignFromInputToNodeInstanceIdVar=context.importNode(assignFromInputToNodeInstanceIdVar);
    context.getPrePhaseElement().appendChild(assignFromInputToNodeInstanceIdVar);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  ParserConfigurationException e) {
    e.printStackTrace();
  }
catch (  SAXException e) {
    e.printStackTrace();
  }
  try {
    new NodeInstanceInitializer(new BPELPlanHandler()).addPropertyVariableUpdateBasedOnNodeInstanceID(context,nodeTemplate);
  }
 catch (  ParserConfigurationException e) {
    e.printStackTrace();
  }
  return true;
}"
40961,"private void rewriteServices(Map<QName,QName> servicesToRewrite,WSDLWriter writer,WSDLReader reader,final List<File> referencedFiles) throws WSDLException, FileNotFoundException {
  LOG.debug(""String_Node_Str"");
  LOG.debug(""String_Node_Str"" + referencedFiles);
  LOG.debug(""String_Node_Str"" + servicesToRewrite);
  for (  final QName serviceName : servicesToRewrite.keySet()) {
    for (    final File file : referencedFiles) {
      if (!file.getAbsolutePath().endsWith(""String_Node_Str"")) {
        continue;
      }
      final Definition def=reader.readWSDL(file.getAbsolutePath());
      final List<QName> servicesToRemove=new ArrayList<>();
      for (      final Object obj : def.getAllServices().values()) {
        final Service service=(Service)obj;
        if (serviceName.equals(service.getQName())) {
          servicesToRemove.add(service.getQName());
          final Service newService=new ServiceImpl();
          for (          final Object o : service.getPorts().values()) {
            final Port port=(Port)o;
            newService.addPort(port);
          }
          newService.setQName(servicesToRewrite.get(serviceName));
          def.addService(newService);
        }
      }
      for (      final QName serviceToRemove : servicesToRemove) {
        def.removeService(serviceToRemove);
      }
      writer.writeWSDL(def,new FileOutputStream(file));
    }
  }
}","private void rewriteServices(Set<Mapping> servicesToRewrite,WSDLWriter writer,WSDLReader reader,final List<File> referencedFiles) throws WSDLException, FileNotFoundException {
  LOG.debug(""String_Node_Str"");
  LOG.debug(""String_Node_Str"" + referencedFiles);
  LOG.debug(""String_Node_Str"" + servicesToRewrite);
  for (  final Mapping service : servicesToRewrite) {
    final QName serviceName=service.key;
    for (    final File file : referencedFiles) {
      if (!file.getAbsolutePath().endsWith(""String_Node_Str"")) {
        continue;
      }
      final Definition def=reader.readWSDL(file.getAbsolutePath());
      final List<QName> servicesToRemove=new ArrayList<>();
      boolean foundMatch=false;
      for (      final Object obj : def.getAllServices().values()) {
        final Service serviceA=(Service)obj;
        if (serviceName.equals(serviceA.getQName())) {
          servicesToRemove.add(serviceA.getQName());
          final Service newService=new ServiceImpl();
          for (          final Object o : serviceA.getPorts().values()) {
            final Port port=(Port)o;
            newService.addPort(port);
          }
          newService.setQName(service.val);
          def.addService(newService);
          foundMatch=true;
        }
      }
      if (foundMatch) {
        for (        final QName serviceToRemove : servicesToRemove) {
          def.removeService(serviceToRemove);
        }
        writer.writeWSDL(def,new FileOutputStream(file));
        break;
      }
    }
  }
}"
40962,"/** 
 * Writes the given DOM Document to the location denoted by the given File
 * @param destination a File denoting the location to export to
 * @param doc the Document to export
 * @throws TransformerException is thrown when initializing aTransformerFactory or writing the Document fails
 * @throws FileNotFoundException is thrown when the File denoted by the FileObject doesn't exist
 */
private void writeBPELDocToFile(final File destination,final Document doc) throws TransformerException, FileNotFoundException {
  final TransformerFactory tFactory=TransformerFactory.newInstance();
  final Transformer transformer=tFactory.newTransformer();
  transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,""String_Node_Str"");
  transformer.setOutputProperty(OutputKeys.METHOD,""String_Node_Str"");
  transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
  transformer.setOutputProperty(OutputKeys.ENCODING,""String_Node_Str"");
  transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
  final DOMSource source=new DOMSource(doc);
  final StreamResult result=new StreamResult(new FileOutputStream(destination));
  transformer.transform(source,result);
}","/** 
 * Writes the given DOM Document to the location denoted by the given File
 * @param destination a File denoting the location to export to
 * @param doc the Document to export
 * @throws TransformerException is thrown when initializing a TransformerFactory or writing the Document fails
 * @throws FileNotFoundException is thrown when the File denoted by the File Object doesn't exist
 */
private void writeBPELDocToFile(final File destination,final Document doc) throws TransformerException, FileNotFoundException {
  final TransformerFactory tFactory=TransformerFactory.newInstance();
  final Transformer transformer=tFactory.newTransformer();
  transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,""String_Node_Str"");
  transformer.setOutputProperty(OutputKeys.METHOD,""String_Node_Str"");
  transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
  transformer.setOutputProperty(OutputKeys.ENCODING,""String_Node_Str"");
  transformer.setOutputProperty(""String_Node_Str"",""String_Node_Str"");
  final DOMSource source=new DOMSource(doc);
  final StreamResult result=new StreamResult(new FileOutputStream(destination));
  transformer.transform(source,result);
}"
40963,"private void rewriteServiceNames(final Deploy deploy,final List<File> referencedFiles,final String csarName) throws WSDLException, FileNotFoundException {
  final WSDLFactory factory=WSDLFactory.newInstance();
  final WSDLReader reader=factory.newWSDLReader();
  final WSDLWriter writer=factory.newWSDLWriter();
  final List<TInvoke> invokes=deploy.getProcess().get(0).getInvoke();
  final List<TProvide> provides=deploy.getProcess().get(0).getProvide();
  final Map<QName,QName> invokedServicesToRewrite=new HashMap<>();
  final Map<QName,QName> providedServicesToRewrite=new HashMap<>();
  LOG.debug(""String_Node_Str"");
  LOG.debug(""String_Node_Str"");
  for (  final TInvoke invoke : invokes) {
    if (invoke.getPartnerLink().equals(""String_Node_Str"")) {
      continue;
    }
    final TService service=invoke.getService();
    final QName serviceName=service.getName();
    final QName renamedServiceName=new QName(serviceName.getNamespaceURI(),csarName + serviceName.getLocalPart() + System.currentTimeMillis());
    LOG.debug(""String_Node_Str"" + serviceName + ""String_Node_Str""+ renamedServiceName);
    invokedServicesToRewrite.put(serviceName,renamedServiceName);
    service.setName(renamedServiceName);
    invoke.setService(service);
  }
  LOG.debug(""String_Node_Str"");
  for (  final TProvide provide : provides) {
    if (provide.getPartnerLink().equals(""String_Node_Str"")) {
      continue;
    }
    final TService service=provide.getService();
    final QName serviceName=service.getName();
    final QName renamedServiceName=new QName(serviceName.getNamespaceURI(),csarName + serviceName.getLocalPart() + System.currentTimeMillis());
    LOG.debug(""String_Node_Str"" + serviceName + ""String_Node_Str""+ renamedServiceName);
    providedServicesToRewrite.put(serviceName,renamedServiceName);
    service.setName(renamedServiceName);
    provide.setService(service);
  }
  this.rewriteServices(invokedServicesToRewrite,writer,reader,referencedFiles);
  this.rewriteServices(providedServicesToRewrite,writer,reader,referencedFiles);
}","private void rewriteServiceNames(final Deploy deploy,final List<File> referencedFiles,final String csarName) throws WSDLException, FileNotFoundException {
  final WSDLFactory factory=WSDLFactory.newInstance();
  final WSDLReader reader=factory.newWSDLReader();
  final WSDLWriter writer=factory.newWSDLWriter();
  final List<TInvoke> invokes=deploy.getProcess().get(0).getInvoke();
  final List<TProvide> provides=deploy.getProcess().get(0).getProvide();
  final Set<Mapping> invokedServicesToRewrite=new HashSet<>();
  final Set<Mapping> providedServicesToRewrite=new HashSet<>();
  LOG.debug(""String_Node_Str"");
  LOG.debug(""String_Node_Str"");
  for (  final TInvoke invoke : invokes) {
    if (invoke.getPartnerLink().equals(""String_Node_Str"")) {
      continue;
    }
    final TService service=invoke.getService();
    final QName serviceName=service.getName();
    final QName renamedServiceName=new QName(serviceName.getNamespaceURI(),csarName + serviceName.getLocalPart() + System.currentTimeMillis());
    LOG.debug(""String_Node_Str"" + serviceName + ""String_Node_Str""+ renamedServiceName);
    invokedServicesToRewrite.add(new Mapping(serviceName,renamedServiceName));
    service.setName(renamedServiceName);
    invoke.setService(service);
  }
  LOG.debug(""String_Node_Str"");
  for (  final TProvide provide : provides) {
    if (provide.getPartnerLink().equals(""String_Node_Str"")) {
      continue;
    }
    final TService service=provide.getService();
    final QName serviceName=service.getName();
    final QName renamedServiceName=new QName(serviceName.getNamespaceURI(),csarName + serviceName.getLocalPart() + System.currentTimeMillis());
    LOG.debug(""String_Node_Str"" + serviceName + ""String_Node_Str""+ renamedServiceName);
    providedServicesToRewrite.add(new Mapping(serviceName,renamedServiceName));
    service.setName(renamedServiceName);
    provide.setService(service);
  }
  this.rewriteServices(invokedServicesToRewrite,writer,reader,referencedFiles);
  this.rewriteServices(providedServicesToRewrite,writer,reader,referencedFiles);
}"
40964,"public References getRefs(final UriInfo uriInfo,String state){
  final References refs=new References();
  final IInstanceDataService service=InstanceDataServiceHandler.getInstanceDataService();
  final URI serviceInstanceIDtoURI=IdConverter.serviceInstanceIDtoURI(this.serviceTemplateInstanceId);
  try {
    final List<SimpleXLink> serviceInstanceLinks=new LinkedList<>();
    serviceInstanceLinks.add(LinkBuilder.selfLink(uriInfo));
    final List<ServiceInstance> serviceInstances=service.getServiceInstances(serviceInstanceIDtoURI,null,null);
    final ServiceInstance serviceInstance=serviceInstances.get(0);
    final List<NodeInstance> nodeInstances=service.getNodeInstances(null,null,null,serviceInstanceIDtoURI);
    final List<SimpleXLink> nodeInstanceLinks=new LinkedList<>();
    for (    final NodeInstance nodeInstance : nodeInstances) {
      if (state != null && !nodeInstance.getState().equals(State.Node.valueOf(state))) {
        continue;
      }
      final QName nodeId=nodeInstance.getNodeTemplateID();
      final int nodeInstanceId=nodeInstance.getId();
      if (this.nodeTemplateID.toString().equalsIgnoreCase(nodeId.toString()) || this.nodeTemplateID.toString().equalsIgnoreCase(nodeId.getLocalPart())) {
        final Reference ref=new Reference(Utilities.buildURI(uriInfo,String.valueOf(nodeInstanceId)),XLinkConstants.SIMPLE,String.valueOf(nodeInstanceId));
        refs.getReference().add(ref);
        this.log.debug(""String_Node_Str"",ref.getXhref());
      }
 else {
        this.log.debug(""String_Node_Str"",nodeInstanceId,nodeId);
      }
    }
    final NodeInstanceList nil=new NodeInstanceList(null,nodeInstanceLinks);
    final ServiceInstanceEntry sie=new ServiceInstanceEntry(serviceInstance,serviceInstanceLinks,nil);
    refs.getReference().add(new Reference(uriInfo.getAbsolutePath().toString(),XLinkConstants.SIMPLE,XLinkConstants.SELF));
    return refs;
  }
 catch (  final Exception e) {
    e.printStackTrace();
    return null;
  }
}","public References getRefs(final UriInfo uriInfo,String state){
  final References refs=new References();
  final IInstanceDataService service=InstanceDataServiceHandler.getInstanceDataService();
  final URI serviceInstanceIDtoURI=IdConverter.serviceInstanceIDtoURI(this.serviceTemplateInstanceId);
  List<String> states=new ArrayList<>();
  if (state != null && !state.isEmpty()) {
    if (state.contains(""String_Node_Str"")) {
      for (      String split : state.split(""String_Node_Str"")) {
        if (!split.trim().isEmpty()) {
          states.add(split.trim());
        }
      }
    }
 else     if (!state.isEmpty()) {
      states.add(state);
    }
  }
  try {
    final List<SimpleXLink> serviceInstanceLinks=new LinkedList<>();
    serviceInstanceLinks.add(LinkBuilder.selfLink(uriInfo));
    final List<ServiceInstance> serviceInstances=service.getServiceInstances(serviceInstanceIDtoURI,null,null);
    final ServiceInstance serviceInstance=serviceInstances.get(0);
    final List<NodeInstance> nodeInstances=service.getNodeInstances(null,null,null,serviceInstanceIDtoURI);
    final List<SimpleXLink> nodeInstanceLinks=new LinkedList<>();
    for (    final NodeInstance nodeInstance : nodeInstances) {
      if (!states.isEmpty() && !states.contains(nodeInstance.getState().toString())) {
        continue;
      }
      final QName nodeId=nodeInstance.getNodeTemplateID();
      final int nodeInstanceId=nodeInstance.getId();
      if (this.nodeTemplateID.toString().equalsIgnoreCase(nodeId.toString()) || this.nodeTemplateID.toString().equalsIgnoreCase(nodeId.getLocalPart())) {
        final Reference ref=new Reference(Utilities.buildURI(uriInfo,String.valueOf(nodeInstanceId)),XLinkConstants.SIMPLE,String.valueOf(nodeInstanceId));
        refs.getReference().add(ref);
        this.log.debug(""String_Node_Str"",ref.getXhref());
      }
 else {
        this.log.debug(""String_Node_Str"",nodeInstanceId,nodeId);
      }
    }
    final NodeInstanceList nil=new NodeInstanceList(null,nodeInstanceLinks);
    final ServiceInstanceEntry sie=new ServiceInstanceEntry(serviceInstance,serviceInstanceLinks,nil);
    refs.getReference().add(new Reference(uriInfo.getAbsolutePath().toString(),XLinkConstants.SIMPLE,XLinkConstants.SELF));
    return refs;
  }
 catch (  final Exception e) {
    e.printStackTrace();
    return null;
  }
}"
40965,"/** 
 * Checks whether the given Node is an infrastructure nodeType that can be handled by the set of plugins used by the PlanBuilder.
 * @param nodeType a QName denoting some nodeType
 * @return a boolean. True if the given nodeType is an infrastructurenodeType
 */
public static boolean isSupportedInfrastructureNodeType(final QName nodeType){
  if (nodeType.equals(Types.ubuntuNodeType)) {
    return true;
  }
  final String nodeTypeNS=nodeType.getNamespaceURI();
  final String nodeTypeLN=nodeType.getLocalPart();
  if (nodeTypeNS.equals(""String_Node_Str"") && Utils.isProperUbuntuLocalName(nodeTypeLN)) {
    return true;
  }
  if (nodeType.equals(Types.ubuntu1404ServerVmNodeType) || nodeType.equals(Types.ubuntu1404ServerVmNodeType2)) {
    return true;
  }
  if (nodeType.equals(Types.raspbianJessieOSNodeType)) {
    return true;
  }
  if (nodeType.equals(Types.dockerContainerNodeType)) {
    return true;
  }
  return false;
}","/** 
 * Checks whether the given Node is an infrastructure nodeType that can be handled by the set of plugins used by the PlanBuilder.
 * @param nodeType a QName denoting some nodeType
 * @return a boolean. True if the given nodeType is an infrastructurenodeType
 */
public static boolean isSupportedInfrastructureNodeType(final QName nodeType){
  if (nodeType.equals(Types.ubuntuNodeType)) {
    return true;
  }
  final String nodeTypeNS=nodeType.getNamespaceURI();
  final String nodeTypeLN=nodeType.getLocalPart();
  if (nodeTypeNS.equals(""String_Node_Str"") && Utils.isProperUbuntuLocalName(nodeTypeLN)) {
    return true;
  }
  if (nodeType.equals(Types.ubuntu1404ServerVmNodeType) || nodeType.equals(Types.ubuntu1404ServerVmNodeType2)) {
    return true;
  }
  if (nodeType.equals(Types.raspbianJessieOSNodeType)) {
    return true;
  }
  if (nodeType.equals(Types.dockerContainerNodeType)) {
    return true;
  }
  if (nodeType.equals(Types.dockerEngineNodeType)) {
    return true;
  }
  return false;
}"
40966,"public Map<AbstractActivity,AbstractActivity> getLinks(){
  return links;
}","public Set<Link> getLinks(){
  return links;
}"
40967,"public AbstractPlan(final String id,final PlanType type,final AbstractDefinitions definitions,final AbstractServiceTemplate serviceTemplate,final Collection<AbstractActivity> activities,final Map<AbstractActivity,AbstractActivity> links){
  this.id=id;
  this.type=type;
  this.definitions=definitions;
  this.serviceTemplate=serviceTemplate;
  this.activites=activities;
  this.links=links;
}","public AbstractPlan(final String id,final PlanType type,final AbstractDefinitions definitions,final AbstractServiceTemplate serviceTemplate,final Collection<AbstractActivity> activities,final Set<Link> links){
  this.id=id;
  this.type=type;
  this.definitions=definitions;
  this.serviceTemplate=serviceTemplate;
  this.activites=activities;
  this.links=links;
}"
40968,"public BPELPlan(String id,PlanType type,AbstractDefinitions definitions,AbstractServiceTemplate serviceTemplate,Collection<AbstractActivity> activities,Map<AbstractActivity,AbstractActivity> links){
  super(id,type,definitions,serviceTemplate,activities,links);
}","public BPELPlan(String id,PlanType type,AbstractDefinitions definitions,AbstractServiceTemplate serviceTemplate,Collection<AbstractActivity> activities,Set<Link> links){
  super(id,type,definitions,serviceTemplate,activities,links);
}"
40969,"/** 
 * Executes the connectTo operation on the given connectToNode NodeTemplate, the parameters for the operation will be searched starting from the given parametersRootNode Node Template E.g.: For a MQTT Client to connect to a MQTT topic it uses the properties from the topology stack given by the topic itself. These properties are then mapped to the parameters of the MQTT client connectTo operation.
 * @param templateContext the context of this operation call
 * @param connectToNode a Node Template with a connectTo operation
 * @param parametersRootNode a Node Template, which should be used as thestarting node for parameter search
 */
private boolean executeConnectsTo(final TemplatePlanContext templateContext,final AbstractNodeTemplate connectToNode,final AbstractNodeTemplate parametersRootNode){
  AbstractInterface connectsToIface=null;
  AbstractOperation connectsToOp=null;
  for (  final AbstractInterface iface : connectToNode.getType().getInterfaces()) {
    for (    final AbstractOperation op : iface.getOperations()) {
      if (op.getName().equals(""String_Node_Str"")) {
        connectsToIface=iface;
        connectsToOp=op;
        break;
      }
    }
    if (connectsToOp != null) {
      break;
    }
  }
  final Map<AbstractParameter,Variable> param2propertyMapping=new HashMap<>();
  for (  final AbstractParameter param : connectsToOp.getInputParameters()) {
    boolean ambiParam=false;
    Variable var=templateContext.getPropertyVariable(templateContext.getRelationshipTemplate(),param.getName());
    if (var != null) {
      param2propertyMapping.put(param,var);
    }
    if (org.opentosca.container.core.tosca.convention.Utils.isSupportedVirtualMachineIPProperty(param.getName())) {
      ambiParam=true;
    }
    if (!ambiParam) {
      AbstractNodeTemplate currentNode=parametersRootNode;
      while (currentNode != null) {
        final Variable property=templateContext.getPropertyVariable(currentNode,param.getName());
        if (property != null) {
          param2propertyMapping.put(param,property);
          break;
        }
 else {
          currentNode=this.fetchNodeConnectedWithHostedOn(currentNode);
        }
      }
    }
 else {
      for (      final String paramName : org.opentosca.container.core.tosca.convention.Utils.getSupportedVirtualMachineIPPropertyNames()) {
        boolean found=false;
        AbstractNodeTemplate currentNode=parametersRootNode;
        while (currentNode != null) {
          final Variable property=templateContext.getPropertyVariable(currentNode,paramName);
          if (property != null) {
            param2propertyMapping.put(param,property);
            found=true;
            break;
          }
 else {
            currentNode=this.fetchNodeConnectedWithHostedOn(currentNode);
          }
        }
        if (found) {
          break;
        }
      }
    }
  }
  if (param2propertyMapping.size() != connectsToOp.getInputParameters().size()) {
    Handler.LOG.error(""String_Node_Str"");
    return false;
  }
  for (  final AbstractNodeTypeImplementation nodeImpl : connectToNode.getImplementations()) {
    for (    final AbstractImplementationArtifact ia : nodeImpl.getImplementationArtifacts()) {
      if (ia.getInterfaceName().equals(connectsToIface.getName()) && (ia.getOperationName() != null) && ia.getOperationName().equals(connectsToOp.getName())) {
        templateContext.executeOperation(connectToNode,connectsToIface.getName(),connectsToOp.getName(),param2propertyMapping);
      }
    }
  }
  return true;
}","/** 
 * Executes the connectTo operation on the given connectToNode NodeTemplate, the parameters for the operation will be searched starting from the given parametersRootNode Node Template E.g.: For a MQTT Client to connect to a MQTT topic it uses the properties from the topology stack given by the topic itself. These properties are then mapped to the parameters of the MQTT client connectTo operation.
 * @param templateContext the context of this operation call
 * @param connectToNode a Node Template with a connectTo operation
 * @param parametersRootNode a Node Template, which should be used as thestarting node for parameter search
 */
private boolean executeConnectsTo(final TemplatePlanContext templateContext,final AbstractNodeTemplate connectToNode,final AbstractNodeTemplate parametersRootNode){
  AbstractInterface connectsToIface=null;
  AbstractOperation connectsToOp=null;
  for (  final AbstractInterface iface : connectToNode.getType().getInterfaces()) {
    for (    final AbstractOperation op : iface.getOperations()) {
      if (op.getName().equals(""String_Node_Str"")) {
        connectsToIface=iface;
        connectsToOp=op;
        break;
      }
    }
    if (connectsToOp != null) {
      break;
    }
  }
  final Map<AbstractParameter,Variable> param2propertyMapping=new HashMap<>();
  for (  final AbstractParameter param : connectsToOp.getInputParameters()) {
    boolean ambiParam=false;
    Variable var=templateContext.getPropertyVariable(templateContext.getRelationshipTemplate(),param.getName());
    if (var != null) {
      param2propertyMapping.put(param,var);
    }
    if (org.opentosca.container.core.tosca.convention.Utils.isSupportedVirtualMachineIPProperty(param.getName())) {
      ambiParam=true;
    }
    if (!ambiParam) {
      AbstractNodeTemplate currentNode=parametersRootNode;
      while (currentNode != null) {
        final Variable property=templateContext.getPropertyVariable(currentNode,param.getName());
        if (property != null) {
          param2propertyMapping.put(param,property);
          break;
        }
 else {
          currentNode=this.fetchNodeConnectedWithHostedOn(currentNode);
        }
      }
    }
 else {
      for (      final String paramName : org.opentosca.container.core.tosca.convention.Utils.getSupportedVirtualMachineIPPropertyNames()) {
        boolean found=false;
        AbstractNodeTemplate currentNode=parametersRootNode;
        while (currentNode != null) {
          final Variable property=templateContext.getPropertyVariable(currentNode,paramName);
          if (property != null) {
            param2propertyMapping.put(param,property);
            found=true;
            break;
          }
 else {
            currentNode=this.fetchNodeConnectedWithHostedOn(currentNode);
          }
        }
        if (found) {
          break;
        }
      }
    }
  }
  if (param2propertyMapping.size() != connectsToOp.getInputParameters().size()) {
    Handler.LOG.error(""String_Node_Str"");
    return false;
  }
  templateContext.executeOperation(connectToNode,connectsToIface.getName(),connectsToOp.getName(),param2propertyMapping);
  return true;
}"
40970,"public Response handleCSAR(final String fileName,final InputStream uploadedInputStream) throws IOException, URISyntaxException, UserException, SystemException {
  File uploadFile=this.storeTemporaryFile(fileName,uploadedInputStream);
  CSARID csarID=this.fileHandler.storeCSAR(uploadFile.toPath());
  this.control.invokeTOSCAProcessing(csarID);
  if (ModelUtils.hasOpenRequirements(csarID)) {
    WineryConnector winCon=new WineryConnector();
    if (winCon.isWineryRepositoryAvailable()) {
      QName serviceTemplate=winCon.uploadCSAR(uploadFile);
      this.control.deleteCSAR(csarID);
      return Response.status(Response.Status.NOT_ACCEPTABLE).entity(""String_Node_Str"" + winCon.getServiceTemplateURI(serviceTemplate).toString() + ""String_Node_Str"").build();
    }
 else {
      this.fileHandler.deleteCSAR(csarID);
      return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
    }
  }
  if (!ModelUtils.hasBuildPlan(csarID) | !ModelUtils.hasTerminationPlan(csarID)) {
    this.control.deleteCSAR(csarID);
    csarID=this.fileHandler.storeCSAR(uploadFile.toPath());
    csarID=this.startPlanBuilder(csarID);
  }
  this.processTOSCA(csarID,true);
  if (csarID != null) {
    CSARsResource.LOG.info(""String_Node_Str"",csarID.toString());
    final String path=Utilities.buildURI(this.uriInfo.getAbsolutePath().toString(),csarID.toString());
    final JsonObject retObj=new JsonObject();
    retObj.addProperty(""String_Node_Str"",path);
    return Response.created(URI.create(path)).entity(retObj.toString()).build();
  }
 else {
    return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
  }
}","public Response handleCSAR(final String fileName,final InputStream uploadedInputStream) throws IOException, URISyntaxException, UserException, SystemException {
  File uploadFile=this.storeTemporaryFile(fileName,uploadedInputStream);
  CSARID csarID=this.fileHandler.storeCSAR(uploadFile.toPath());
  this.control.invokeTOSCAProcessing(csarID);
  boolean toscaProcessed=true;
  if (ModelUtils.hasOpenRequirements(csarID)) {
    WineryConnector winCon=new WineryConnector();
    if (winCon.isWineryRepositoryAvailable()) {
      QName serviceTemplate=winCon.uploadCSAR(uploadFile);
      this.control.deleteCSAR(csarID);
      return Response.status(Response.Status.NOT_ACCEPTABLE).entity(""String_Node_Str"" + winCon.getServiceTemplateURI(serviceTemplate).toString() + ""String_Node_Str"").build();
    }
 else {
      this.fileHandler.deleteCSAR(csarID);
      return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
    }
  }
  if (!ModelUtils.hasBuildPlan(csarID) | !ModelUtils.hasTerminationPlan(csarID)) {
    this.control.deleteCSAR(csarID);
    csarID=this.fileHandler.storeCSAR(uploadFile.toPath());
    csarID=this.startPlanBuilder(csarID);
    toscaProcessed=false;
  }
  this.processTOSCA(csarID,toscaProcessed);
  if (csarID != null) {
    CSARsResource.LOG.info(""String_Node_Str"",csarID.toString());
    final String path=Utilities.buildURI(this.uriInfo.getAbsolutePath().toString(),csarID.toString());
    final JsonObject retObj=new JsonObject();
    retObj.addProperty(""String_Node_Str"",path);
    return Response.created(URI.create(path)).entity(retObj.toString()).build();
  }
 else {
    return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
  }
}"
40971,"public static boolean hasTerminationPlan(CSARID csarId) throws UserException, SystemException {
  QName serviceTemplateId=ModelUtils.getEntryServiceTemplate(csarId);
  Map<PlanTypes,LinkedHashMap<QName,TPlan>> plans=ToscaServiceHandler.getToscaEngineService().getToscaReferenceMapper().getCSARIDToPlans(csarId);
  return plans.containsKey(PlanTypes.TERMINATION);
}","public static boolean hasTerminationPlan(CSARID csarId) throws UserException, SystemException {
  Map<PlanTypes,LinkedHashMap<QName,TPlan>> plans=ToscaServiceHandler.getToscaEngineService().getToscaReferenceMapper().getCSARIDToPlans(csarId);
  if (plans == null)   return false;
  return (plans.containsKey(PlanTypes.TERMINATION) & !plans.get(PlanTypes.TERMINATION).isEmpty()) ? true : false;
}"
40972,"public static boolean hasBuildPlan(CSARID csarId) throws UserException, SystemException {
  QName serviceTemplateId=ModelUtils.getEntryServiceTemplate(csarId);
  Map<PlanTypes,LinkedHashMap<QName,TPlan>> plans=ToscaServiceHandler.getToscaEngineService().getToscaReferenceMapper().getCSARIDToPlans(csarId);
  if (plans == null)   return false;
  return plans.containsKey(PlanTypes.BUILD);
}","public static boolean hasBuildPlan(CSARID csarId) throws UserException, SystemException {
  Map<PlanTypes,LinkedHashMap<QName,TPlan>> plans=ToscaServiceHandler.getToscaEngineService().getToscaReferenceMapper().getCSARIDToPlans(csarId);
  if (plans == null)   return false;
  return (plans.containsKey(PlanTypes.BUILD) & !plans.get(PlanTypes.BUILD).isEmpty()) ? true : false;
}"
40973,"/** 
 * Updates the input parameters. If instance data are available the provided input parameters will be overwritten with them.
 * @param inputParams
 * @param csarID
 * @param serviceTemplateID
 * @param nodeTypeID
 * @param nodeTemplateID
 * @param neededInterface
 * @param neededOperation
 * @param serviceInstanceID
 * @return the updated input parameters.
 */
private HashMap<String,String> updateInputParams(final HashMap<String,String> inputParams,final CSARID csarID,final QName serviceTemplateID,QName nodeTypeID,final String nodeTemplateID,final String neededInterface,final String neededOperation,final URI serviceInstanceID){
  ManagementBusServiceImpl.LOG.debug(""String_Node_Str"",inputParams.size(),neededOperation,inputParams.toString());
  nodeTypeID=ServiceHandler.toscaEngineService.getNodeTypeOfNodeTemplate(csarID,serviceTemplateID,nodeTemplateID);
  final List<String> expectedParams=this.getExpectedInputParams(csarID,nodeTypeID,neededInterface,neededOperation);
  ManagementBusServiceImpl.LOG.debug(""String_Node_Str"",neededOperation,expectedParams.size(),expectedParams.toString());
  if (!expectedParams.isEmpty()) {
    if ((serviceInstanceID != null) && (!serviceInstanceID.toString().equals(""String_Node_Str""))) {
      ManagementBusServiceImpl.LOG.debug(""String_Node_Str"",serviceInstanceID);
      final HashMap<String,String> propertiesMap=MBUtils.getInstanceDataProperties(csarID,serviceTemplateID,nodeTemplateID.trim(),serviceInstanceID);
      ManagementBusServiceImpl.LOG.debug(""String_Node_Str"");
      for (      final String key : propertiesMap.keySet()) {
        ManagementBusServiceImpl.LOG.debug(""String_Node_Str"" + key + ""String_Node_Str""+ propertiesMap.get(key));
      }
      if (propertiesMap != null) {
        final List<String> supportedIPPropertyNames=Utils.getSupportedVirtualMachineIPPropertyNames();
        final List<String> supportedInstanceIdPropertyNames=Utils.getSupportedVirtualMachineInstanceIdPropertyNames();
        final List<String> supportedPasswordPropertyNames=Utils.getSupportedVirtualMachineLoginPasswordPropertyNames();
        final List<String> supportedUsernamePropertyNames=Utils.getSupportedVirtualMachineLoginUserNamePropertyNames();
        ManagementBusServiceImpl.LOG.debug(""String_Node_Str"",serviceInstanceID,nodeTemplateID,propertiesMap.toString());
        String prop;
        for (        final String expectedParam : expectedParams) {
          if (supportedIPPropertyNames.contains(expectedParam)) {
            ManagementBusServiceImpl.LOG.debug(""String_Node_Str"");
            prop=this.getSupportedProperty(supportedIPPropertyNames,propertiesMap);
            if (prop != null) {
              inputParams.put(expectedParam,prop);
            }
          }
 else           if (supportedInstanceIdPropertyNames.contains(expectedParam)) {
            ManagementBusServiceImpl.LOG.debug(""String_Node_Str"");
            prop=this.getSupportedProperty(supportedInstanceIdPropertyNames,propertiesMap);
            if (prop != null) {
              inputParams.put(expectedParam,prop);
            }
          }
 else           if (supportedPasswordPropertyNames.contains(expectedParam)) {
            ManagementBusServiceImpl.LOG.debug(""String_Node_Str"");
            prop=this.getSupportedProperty(supportedPasswordPropertyNames,propertiesMap);
            if (prop != null) {
              inputParams.put(expectedParam,prop);
            }
          }
 else           if (supportedUsernamePropertyNames.contains(expectedParam)) {
            ManagementBusServiceImpl.LOG.debug(""String_Node_Str"");
            prop=this.getSupportedProperty(supportedUsernamePropertyNames,propertiesMap);
            if (prop != null) {
              inputParams.put(expectedParam,prop);
            }
          }
 else {
            for (            final String propName : propertiesMap.keySet()) {
              if (expectedParam.equals(propName)) {
                inputParams.put(expectedParam,propertiesMap.get(propName));
              }
            }
          }
        }
        ManagementBusServiceImpl.LOG.debug(""String_Node_Str"",inputParams.size(),neededOperation,inputParams.toString());
      }
 else {
        ManagementBusServiceImpl.LOG.debug(""String_Node_Str"");
      }
    }
 else {
      ManagementBusServiceImpl.LOG.debug(""String_Node_Str"");
    }
  }
  return inputParams;
}","/** 
 * Updates the input parameters. If instance data are available the provided input parameters will be overwritten with them.
 * @param inputParams
 * @param csarID
 * @param serviceTemplateID
 * @param nodeTypeID
 * @param nodeTemplateID
 * @param neededInterface
 * @param neededOperation
 * @param serviceInstanceID
 * @return the updated input parameters.
 */
private HashMap<String,String> updateInputParams(final HashMap<String,String> inputParams,final CSARID csarID,final QName serviceTemplateID,QName nodeTypeID,final String nodeTemplateID,final String neededInterface,final String neededOperation,final URI serviceInstanceID){
  ManagementBusServiceImpl.LOG.debug(""String_Node_Str"",inputParams.size(),neededOperation,inputParams.toString());
  nodeTypeID=ServiceHandler.toscaEngineService.getNodeTypeOfNodeTemplate(csarID,serviceTemplateID,nodeTemplateID);
  final List<String> expectedParams=this.getExpectedInputParams(csarID,nodeTypeID,neededInterface,neededOperation);
  ManagementBusServiceImpl.LOG.debug(""String_Node_Str"",neededOperation,expectedParams.size(),expectedParams.toString());
  if (!expectedParams.isEmpty()) {
    if ((serviceInstanceID != null) && (!serviceInstanceID.toString().equals(""String_Node_Str""))) {
      ManagementBusServiceImpl.LOG.debug(""String_Node_Str"",serviceInstanceID);
      final HashMap<String,String> propertiesMap=MBUtils.getInstanceDataProperties(csarID,serviceTemplateID,nodeTemplateID.trim(),serviceInstanceID);
      ManagementBusServiceImpl.LOG.debug(""String_Node_Str"");
      for (      final String key : propertiesMap.keySet()) {
        ManagementBusServiceImpl.LOG.debug(""String_Node_Str"" + key + ""String_Node_Str""+ propertiesMap.get(key));
      }
      if (propertiesMap != null) {
        final List<String> supportedIPPropertyNames=Utils.getSupportedVirtualMachineIPPropertyNames();
        final List<String> supportedInstanceIdPropertyNames=Utils.getSupportedVirtualMachineInstanceIdPropertyNames();
        final List<String> supportedPasswordPropertyNames=Utils.getSupportedVirtualMachineLoginPasswordPropertyNames();
        final List<String> supportedUsernamePropertyNames=Utils.getSupportedVirtualMachineLoginUserNamePropertyNames();
        ManagementBusServiceImpl.LOG.debug(""String_Node_Str"",serviceInstanceID,nodeTemplateID,propertiesMap.toString());
        String prop;
        for (        final String expectedParam : expectedParams) {
          if (supportedIPPropertyNames.contains(expectedParam)) {
            ManagementBusServiceImpl.LOG.debug(""String_Node_Str"");
            prop=this.getSupportedProperty(supportedIPPropertyNames,propertiesMap);
            if (prop != null) {
              this.putOnlyIfNotSet(inputParams,expectedParam,prop);
            }
          }
 else           if (supportedInstanceIdPropertyNames.contains(expectedParam)) {
            ManagementBusServiceImpl.LOG.debug(""String_Node_Str"");
            prop=this.getSupportedProperty(supportedInstanceIdPropertyNames,propertiesMap);
            if (prop != null) {
              this.putOnlyIfNotSet(inputParams,expectedParam,prop);
            }
          }
 else           if (supportedPasswordPropertyNames.contains(expectedParam)) {
            ManagementBusServiceImpl.LOG.debug(""String_Node_Str"");
            prop=this.getSupportedProperty(supportedPasswordPropertyNames,propertiesMap);
            if (prop != null) {
              this.putOnlyIfNotSet(inputParams,expectedParam,prop);
            }
          }
 else           if (supportedUsernamePropertyNames.contains(expectedParam)) {
            ManagementBusServiceImpl.LOG.debug(""String_Node_Str"");
            prop=this.getSupportedProperty(supportedUsernamePropertyNames,propertiesMap);
            if (prop != null) {
              this.putOnlyIfNotSet(inputParams,expectedParam,prop);
            }
          }
 else {
            for (            final String propName : propertiesMap.keySet()) {
              if (expectedParam.equals(propName)) {
                this.putOnlyIfNotSet(inputParams,expectedParam,propertiesMap.get(propName));
              }
            }
          }
        }
        ManagementBusServiceImpl.LOG.debug(""String_Node_Str"",inputParams.size(),neededOperation,inputParams.toString());
      }
 else {
        ManagementBusServiceImpl.LOG.debug(""String_Node_Str"");
      }
    }
 else {
      ManagementBusServiceImpl.LOG.debug(""String_Node_Str"");
    }
  }
  return inputParams;
}"
40974,"/** 
 * This function deletes all stored references of a certain CSAR.
 * @param csarID
 * @return true for success, false for an error
 */
public boolean clearCSARContent(final CSARID csarID){
  this.LOG.debug(""String_Node_Str"" + csarID + ""String_Node_Str"");
  this.setup();
  this.referenceMap.remove(csarID);
  this.documentMap.remove(csarID);
  this.mapCSARIDToDefinitions.remove(csarID);
  this.mapCSARIDToServiceTemplateIDs.remove(csarID);
  this.csarIDToPlanTypeToIntegerToPlan.remove(csarID);
  this.csarIDToWSDLDocuments.remove(csarID);
  this.csarIDToServiceTemplateIDToPlanID.remove(csarID);
  this.csarIDToPlanIDToSynchronousBoolean.remove(csarID);
  this.csarIDToExportedInterface.remove(csarID);
  this.csarIDToPolicies.remove(csarID);
  this.mapDefinitionsIDToLocationString.remove(csarID);
  this.mapElementIDToDefinitionsID.remove(csarID);
  if (this.containsCSARData(csarID)) {
    return false;
  }
  return true;
}","/** 
 * This function deletes all stored references of a certain CSAR.
 * @param csarID
 * @return true for success, false for an error
 */
public boolean clearCSARContent(final CSARID csarID){
  this.LOG.debug(""String_Node_Str"" + csarID + ""String_Node_Str"");
  this.setup();
  this.referenceMap.remove(csarID);
  this.documentMap.remove(csarID);
  this.mapCSARIDToDefinitions.remove(csarID);
  this.mapCSARIDToServiceTemplateIDs.remove(csarID);
  this.csarIDToPlanTypeToIntegerToPlan.remove(csarID);
  this.csarIDToWSDLDocuments.remove(csarID);
  this.csarIDToServiceTemplateIDToPlanID.remove(csarID);
  this.csarIDToPlanIDToSynchronousBoolean.remove(csarID);
  this.csarIDToExportedInterface.remove(csarID);
  this.csarIDToPolicies.remove(csarID);
  this.mapDefinitionsIDToLocationString.remove(csarID);
  this.mapElementIDToDefinitionsID.remove(csarID);
  this.mapCSARIDToServiceTemplateIdToInterfaceToOperationToPlan.remove(csarID);
  this.mapCSARIDToServiceTemplateQNameToNodeTemplateID.remove(csarID);
  this.mapCSARIDToServiceTemplateQNameToRelationshipTemplateID.remove(csarID);
  this.serviceTemplatePropertiesContent.remove(csarID);
  this.serviceTemplatePropertyMappings.remove(csarID);
  if (this.containsCSARData(csarID)) {
    return false;
  }
  return true;
}"
40975,"/** 
 * Adds BPEL code to the given TemplateContext which installs an PhpModule to an Apache HTTP Server
 * @param templateContext the TemplateContext the code should be added to
 * @return true iff appending all BPEL code was successful
 */
public boolean handle(final TemplatePlanContext templateContext){
  if (templateContext.getNodeTemplate() == null) {
    Handler.LOG.warn(""String_Node_Str"");
    return false;
  }
  final AbstractNodeTemplate nodeTemplate=templateContext.getNodeTemplate();
  final Variable containerPortVar=templateContext.getPropertyVariable(nodeTemplate,""String_Node_Str"");
  final Variable portVar=templateContext.getPropertyVariable(nodeTemplate,""String_Node_Str"");
  if ((containerPortVar == null) | (portVar == null)) {
    Handler.LOG.error(""String_Node_Str"");
    return false;
  }
  final String containerPortVal=this.fetchValueFromProperty(nodeTemplate,""String_Node_Str"");
  final String portVal=this.fetchValueFromProperty(nodeTemplate,""String_Node_Str"");
  final String portMapping=containerPortVal + ""String_Node_Str"" + portVal;
  final Variable portMappingVar=templateContext.createGlobalStringVariable(""String_Node_Str"" + System.currentTimeMillis(),portMapping);
  final Variable sshPortVar=templateContext.getPropertyVariable(nodeTemplate,""String_Node_Str"");
  final Variable containerIpVar=templateContext.getPropertyVariable(nodeTemplate,""String_Node_Str"");
  Variable containerIdVar=templateContext.getPropertyVariable(nodeTemplate,""String_Node_Str"");
  final AbstractNodeTemplate dockerEngineNode=this.getDockerEngineNode(nodeTemplate);
  if (dockerEngineNode == null) {
    Handler.LOG.error(""String_Node_Str"");
    return false;
  }
  final Variable dockerEngineUrlVar=templateContext.getPropertyVariable(dockerEngineNode,""String_Node_Str"");
  final Variable containerImageVar=templateContext.getPropertyVariable(nodeTemplate,""String_Node_Str"");
  if ((containerImageVar == null) || Utils.isVariableValueEmpty(containerImageVar,templateContext)) {
    final AbstractDeploymentArtifact da=this.fetchFirstDockerContainerDA(nodeTemplate);
    this.handleWithDA(templateContext,dockerEngineNode,da,portMappingVar,dockerEngineUrlVar,sshPortVar,containerIpVar,containerIdVar);
  }
 else {
    return this.handleWithImageId(templateContext,dockerEngineNode,containerImageVar,portMappingVar,dockerEngineUrlVar,sshPortVar,containerIpVar,containerIdVar);
  }
  return true;
}","/** 
 * Adds BPEL code to the given TemplateContext which installs an PhpModule to an Apache HTTP Server
 * @param templateContext the TemplateContext the code should be added to
 * @return true iff appending all BPEL code was successful
 */
public boolean handle(final TemplatePlanContext templateContext){
  if (templateContext.getNodeTemplate() == null) {
    Handler.LOG.warn(""String_Node_Str"");
    return false;
  }
  final AbstractNodeTemplate nodeTemplate=templateContext.getNodeTemplate();
  final Variable containerPortVar=templateContext.getPropertyVariable(nodeTemplate,""String_Node_Str"");
  final Variable portVar=templateContext.getPropertyVariable(nodeTemplate,""String_Node_Str"");
  if ((containerPortVar == null) | (portVar == null)) {
    Handler.LOG.error(""String_Node_Str"");
    return false;
  }
  final Variable portMappingVar=templateContext.createGlobalStringVariable(""String_Node_Str"" + System.currentTimeMillis(),""String_Node_Str"");
  try {
    Node assignContainerPortsNode=this.planBuilderFragments.createAssignXpathQueryToStringVarFragmentAsNode(""String_Node_Str"",""String_Node_Str"" + containerPortVar.getName() + ""String_Node_Str""+ portVar.getName()+ ""String_Node_Str"",portMappingVar.getName());
    assignContainerPortsNode=templateContext.importNode(assignContainerPortsNode);
    templateContext.getProvisioningPhaseElement().appendChild(assignContainerPortsNode);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  SAXException e) {
    e.printStackTrace();
  }
  final Variable sshPortVar=templateContext.getPropertyVariable(nodeTemplate,""String_Node_Str"");
  final Variable containerIpVar=templateContext.getPropertyVariable(nodeTemplate,""String_Node_Str"");
  Variable containerIdVar=templateContext.getPropertyVariable(nodeTemplate,""String_Node_Str"");
  final AbstractNodeTemplate dockerEngineNode=this.getDockerEngineNode(nodeTemplate);
  if (dockerEngineNode == null) {
    Handler.LOG.error(""String_Node_Str"");
    return false;
  }
  final Variable dockerEngineUrlVar=templateContext.getPropertyVariable(dockerEngineNode,""String_Node_Str"");
  final Variable containerImageVar=templateContext.getPropertyVariable(nodeTemplate,""String_Node_Str"");
  if ((containerImageVar == null) || Utils.isVariableValueEmpty(containerImageVar,templateContext)) {
    final AbstractDeploymentArtifact da=this.fetchFirstDockerContainerDA(nodeTemplate);
    this.handleWithDA(templateContext,dockerEngineNode,da,portMappingVar,dockerEngineUrlVar,sshPortVar,containerIpVar,containerIdVar);
  }
 else {
    return this.handleWithImageId(templateContext,dockerEngineNode,containerImageVar,portMappingVar,dockerEngineUrlVar,sshPortVar,containerIpVar,containerIdVar);
  }
  return true;
}"
40976,"public Response handleCSAR(final String fileName,final InputStream uploadedInputStream) throws IOException, URISyntaxException, UserException, SystemException {
  File uploadFile=this.storeTemporaryFile(fileName,uploadedInputStream);
  CSARID csarID=this.fileHandler.storeCSAR(uploadFile.toPath());
  this.control.invokeTOSCAProcessing(csarID);
  if (ModelUtils.hasOpenRequirements(csarID)) {
    WineryConnector winCon=new WineryConnector();
    if (winCon.isWineryRepositoryAvailable()) {
      QName serviceTemplate=winCon.uploadCSAR(uploadFile);
      this.fileHandler.deleteCSAR(csarID);
      return Response.status(Response.Status.NOT_ACCEPTABLE).entity(""String_Node_Str"" + winCon.getServiceTemplateURI(serviceTemplate).toString() + ""String_Node_Str"").build();
    }
 else {
      this.fileHandler.deleteCSAR(csarID);
      return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
    }
  }
  ToscaServiceHandler.getToscaEngineService().clearCSARContent(csarID);
  csarID=this.startPlanBuilder(csarID);
  this.processTOSCA(csarID);
  if (csarID != null) {
    CSARsResource.LOG.info(""String_Node_Str"",csarID.toString());
    final String path=Utilities.buildURI(this.uriInfo.getAbsolutePath().toString(),csarID.toString());
    final JsonObject retObj=new JsonObject();
    retObj.addProperty(""String_Node_Str"",path);
    return Response.created(URI.create(path)).entity(retObj.toString()).build();
  }
 else {
    return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
  }
}","public Response handleCSAR(final String fileName,final InputStream uploadedInputStream) throws IOException, URISyntaxException, UserException, SystemException {
  File uploadFile=this.storeTemporaryFile(fileName,uploadedInputStream);
  CSARID csarID=this.fileHandler.storeCSAR(uploadFile.toPath());
  this.control.invokeTOSCAProcessing(csarID);
  if (ModelUtils.hasOpenRequirements(csarID)) {
    WineryConnector winCon=new WineryConnector();
    if (winCon.isWineryRepositoryAvailable()) {
      QName serviceTemplate=winCon.uploadCSAR(uploadFile);
      this.control.deleteCSAR(csarID);
      return Response.status(Response.Status.NOT_ACCEPTABLE).entity(""String_Node_Str"" + winCon.getServiceTemplateURI(serviceTemplate).toString() + ""String_Node_Str"").build();
    }
 else {
      this.fileHandler.deleteCSAR(csarID);
      return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
    }
  }
  this.control.deleteCSAR(csarID);
  csarID=this.fileHandler.storeCSAR(uploadFile.toPath());
  csarID=this.startPlanBuilder(csarID);
  this.processTOSCA(csarID);
  if (csarID != null) {
    CSARsResource.LOG.info(""String_Node_Str"",csarID.toString());
    final String path=Utilities.buildURI(this.uriInfo.getAbsolutePath().toString(),csarID.toString());
    final JsonObject retObj=new JsonObject();
    retObj.addProperty(""String_Node_Str"",path);
    return Response.created(URI.create(path)).entity(retObj.toString()).build();
  }
 else {
    return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
  }
}"
40977,"private String generatePropertyValueFromConcatQuery(String targetPropertyRef,List<NodeInstance> nodeInstance){
  String testQuery=targetPropertyRef.trim();
  if (!testQuery.endsWith(""String_Node_Str"")) {
    return null;
  }
  int functionOpeningBracket=testQuery.indexOf(""String_Node_Str"");
  String functionString=testQuery.substring(0,functionOpeningBracket);
  if (!functionString.equals(""String_Node_Str"")) {
    return null;
  }
  String functionContent=testQuery.substring(functionOpeningBracket + 1,testQuery.lastIndexOf(""String_Node_Str"")).trim();
  String[] functionParts=functionContent.split(""String_Node_Str"");
  List<String> augmentedFunctionParts=new ArrayList<String>();
  for (  String functionPart : functionParts) {
    if (functionPart.trim().startsWith(""String_Node_Str"")) {
      augmentedFunctionParts.add(functionPart.trim());
    }
 else     if (functionPart.trim().split(""String_Node_Str"").length == 3) {
      String[] queryParts=functionPart.trim().split(""String_Node_Str"");
      if (!queryParts[1].equals(""String_Node_Str"")) {
        return null;
      }
      String nodeTemplateName=queryParts[0];
      String propertyName=queryParts[2];
      String propValue=fetchPropertyValueFromNodeInstance(getNodeInstanceWithName(nodeInstance,nodeTemplateName),propertyName);
      augmentedFunctionParts.add(""String_Node_Str"" + propValue + ""String_Node_Str"");
    }
  }
  String resultString=""String_Node_Str"";
  for (  String functionPart : augmentedFunctionParts) {
    resultString+=functionPart.replace(""String_Node_Str"",""String_Node_Str"");
  }
  return resultString;
}","private String generatePropertyValueFromConcatQuery(String targetPropertyRef,List<NodeInstance> nodeInstance){
  String testQuery=targetPropertyRef.trim();
  if (!testQuery.endsWith(""String_Node_Str"")) {
    return null;
  }
  int functionOpeningBracket=testQuery.indexOf(""String_Node_Str"");
  String functionString=testQuery.substring(0,functionOpeningBracket);
  if (!functionString.equals(""String_Node_Str"")) {
    return null;
  }
  String functionContent=testQuery.substring(functionOpeningBracket + 1,testQuery.lastIndexOf(""String_Node_Str"")).trim();
  String[] functionParts=functionContent.split(""String_Node_Str"");
  List<String> augmentedFunctionParts=new ArrayList<String>();
  for (  String functionPart : functionParts) {
    if (functionPart.trim().startsWith(""String_Node_Str"")) {
      augmentedFunctionParts.add(functionPart.trim());
    }
 else     if (functionPart.trim().split(""String_Node_Str"").length == 3) {
      String[] queryParts=functionPart.trim().split(""String_Node_Str"");
      if (!queryParts[1].equals(""String_Node_Str"")) {
        return null;
      }
      String nodeTemplateName=queryParts[0];
      String propertyName=queryParts[2];
      if (getNodeInstanceWithName(nodeInstance,nodeTemplateName) != null) {
        String propValue=fetchPropertyValueFromNodeInstance(getNodeInstanceWithName(nodeInstance,nodeTemplateName),propertyName);
        augmentedFunctionParts.add(""String_Node_Str"" + propValue + ""String_Node_Str"");
      }
    }
  }
  String resultString=""String_Node_Str"";
  for (  String functionPart : augmentedFunctionParts) {
    resultString+=functionPart.replace(""String_Node_Str"",""String_Node_Str"");
  }
  return resultString;
}"
40978,"private String fetchPropertyValueFromNodeInstance(NodeInstance nodeInstance,String propertyLocalName){
  NodeList childNodes=nodeInstance.getProperties().getFirstChild().getChildNodes();
  for (int index=0; index < childNodes.getLength(); index++) {
    Node childNode=childNodes.item(index);
    if ((childNode.getNodeType() == Node.ELEMENT_NODE) && childNode.getLocalName().equals(propertyLocalName)) {
      return childNode.getTextContent();
    }
  }
  return null;
}","private String fetchPropertyValueFromNodeInstance(NodeInstance nodeInstance,String propertyLocalName){
  if (nodeInstance.getProperties() == null) {
    return null;
  }
  NodeList childNodes=nodeInstance.getProperties().getFirstChild().getChildNodes();
  for (int index=0; index < childNodes.getLength(); index++) {
    Node childNode=childNodes.item(index);
    if ((childNode.getNodeType() == Node.ELEMENT_NODE) && childNode.getLocalName().equals(propertyLocalName)) {
      return childNode.getTextContent();
    }
  }
  return null;
}"
40979,"@POST @Consumes(MediaType.APPLICATION_XML) @Produces({MediaType.APPLICATION_XML,MediaType.TEXT_XML}) public Response createServiceInstance(@Context UriInfo uriInfo,String xml){
  log.debug(""String_Node_Str"",csarId,serviceTemplateID);
  IInstanceDataService service=InstanceDataServiceHandler.getInstanceDataService();
  try {
    ServiceInstance createdServiceInstance=service.createServiceInstance(csarId,serviceTemplateID);
    String corr=xml.substring(xml.indexOf(""String_Node_Str"") + 1,xml.indexOf(""String_Node_Str""));
    int serviceTemplateInstanceId=createdServiceInstance.getDBId();
    String instanceURL=createdServiceInstance.getServiceInstanceID().toString();
    log.debug(corr + ""String_Node_Str"" + corr+ ""String_Node_Str""+ instanceURL);
{
      BuildCorrelationToInstanceMapping.instance.correlateCorrelationIdToServiceTemplateInstanceId(corr,serviceTemplateInstanceId);
      PlanInvocationEngineHandler.planInvocationEngine.correctCorrelationToServiceTemplateInstanceIdMapping(csarId,serviceTemplateID,corr,serviceTemplateInstanceId);
    }
    SimpleXLink response=new SimpleXLink(uriInfo.getAbsolutePath().toString() + ""String_Node_Str"" + serviceTemplateInstanceId,""String_Node_Str"");
    log.debug(""String_Node_Str"" + response.getHref());
    return Response.ok(response).build();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new GenericRestException(Status.INTERNAL_SERVER_ERROR,e.getMessage());
  }
}","@POST @Consumes(MediaType.APPLICATION_XML) @Produces({MediaType.APPLICATION_XML,MediaType.TEXT_XML}) public Response createServiceInstance(@Context UriInfo uriInfo,String xml){
  log.debug(""String_Node_Str"",csarId,serviceTemplateID);
  IInstanceDataService service=InstanceDataServiceHandler.getInstanceDataService();
  try {
    ServiceInstance createdServiceInstance=service.createServiceInstance(csarId,serviceTemplateID);
    String corr=xml.substring(xml.indexOf(""String_Node_Str"") + 1,xml.indexOf(""String_Node_Str""));
    int serviceTemplateInstanceId=createdServiceInstance.getDBId();
    String instanceURL=createdServiceInstance.getServiceInstanceID().toString();
    log.debug(corr + ""String_Node_Str"" + corr+ ""String_Node_Str""+ instanceURL);
{
      BuildCorrelationToInstanceMapping.instance.correlateCorrelationIdToServiceTemplateInstanceId(corr,serviceTemplateInstanceId);
      PlanInvocationEngineHandler.planInvocationEngine.correctCorrelationToServiceTemplateInstanceIdMapping(csarId,serviceTemplateID,corr,serviceTemplateInstanceId);
    }
    SimpleXLink response=new SimpleXLink(uriInfo.getAbsolutePath().toString() + serviceTemplateInstanceId,""String_Node_Str"");
    log.debug(""String_Node_Str"" + response.getHref());
    return Response.ok(response).build();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new GenericRestException(Status.INTERNAL_SERVER_ERROR,e.getMessage());
  }
}"
40980,"@POST @Consumes(MediaType.MULTIPART_FORM_DATA) public Response createFromArtefact(@FormDataParam(""String_Node_Str"") InputStream uploadedInputStream,@FormDataParam(""String_Node_Str"") FormDataContentDisposition fileDetail,@FormDataParam(""String_Node_Str"") FormDataBodyPart body,@FormDataParam(""String_Node_Str"") QName artifactType,@FormDataParam(""String_Node_Str"") Set<QName> nodeTypes,@FormDataParam(""String_Node_Str"") QName infrastructureNodeType,@FormDataParam(""String_Node_Str"") Set<String> tags,@Context UriInfo uriInfo) throws IllegalArgumentException, JAXBException, IOException {
  if (this.connector.isWineryRepositoryAvailable()) {
    return Response.status(Status.SERVICE_UNAVAILABLE).build();
  }
  File tempFile=this.inputStream2File(uploadedInputStream,fileDetail.getFileName());
  try {
    QName xaasServiceTemplate=this.connector.createServiceTemplateFromXaaSPackage(tempFile,artifactType,nodeTypes,infrastructureNodeType,this.createTagMapFromTagSet(tags));
    String redirectUrl=Utilities.buildURI(this.uriInfo.getAbsolutePath().toString(),""String_Node_Str"" + Utilities.URLencode(xaasServiceTemplate.toString())).replace(""String_Node_Str"",""String_Node_Str"");
    return Response.created(URI.create(redirectUrl)).build();
  }
 catch (  URISyntaxException e) {
    e.printStackTrace();
  }
  return Response.serverError().build();
}","@POST @Consumes(MediaType.MULTIPART_FORM_DATA) public Response createFromArtefact(@FormDataParam(""String_Node_Str"") InputStream uploadedInputStream,@FormDataParam(""String_Node_Str"") FormDataContentDisposition fileDetail,@FormDataParam(""String_Node_Str"") FormDataBodyPart body,@FormDataParam(""String_Node_Str"") QName artifactType,@FormDataParam(""String_Node_Str"") Set<QName> nodeTypes,@FormDataParam(""String_Node_Str"") QName infrastructureNodeType,@FormDataParam(""String_Node_Str"") Set<String> tags,@Context UriInfo uriInfo) throws IllegalArgumentException, JAXBException, IOException {
  if (!this.connector.isWineryRepositoryAvailable()) {
    return Response.status(Status.SERVICE_UNAVAILABLE).build();
  }
  File tempFile=this.inputStream2File(uploadedInputStream,fileDetail.getFileName());
  try {
    QName xaasServiceTemplate=this.connector.createServiceTemplateFromXaaSPackage(tempFile,artifactType,nodeTypes,infrastructureNodeType,this.createTagMapFromTagSet(tags));
    String redirectUrl=Utilities.buildURI(this.uriInfo.getAbsolutePath().toString(),""String_Node_Str"" + Utilities.URLencode(xaasServiceTemplate.toString())).replace(""String_Node_Str"",""String_Node_Str"");
    return Response.created(URI.create(redirectUrl)).build();
  }
 catch (  URISyntaxException e) {
    e.printStackTrace();
  }
  return Response.serverError().build();
}"
40981,"public boolean isWineryRepositoryAvailable(){
  HttpGet get=new HttpGet();
  get.setHeader(""String_Node_Str"",""String_Node_Str"");
  try {
    get.setURI(new URI(this.wineryPath + ""String_Node_Str""));
    HttpResponse resp=this.client.execute(get);
    if (resp.getStatusLine().getStatusCode() < 400) {
      return true;
    }
  }
 catch (  URISyntaxException e) {
    e.printStackTrace();
  }
catch (  ClientProtocolException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return false;
}","public boolean isWineryRepositoryAvailable(){
  HttpGet get=new HttpGet();
  get.setHeader(""String_Node_Str"",""String_Node_Str"");
  try {
    get.setURI(new URI(this.wineryPath + ""String_Node_Str""));
    HttpResponse resp=this.client.execute(get);
    EntityUtils.consume(resp.getEntity());
    if (resp.getStatusLine().getStatusCode() < 400) {
      return true;
    }
  }
 catch (  URISyntaxException e) {
    e.printStackTrace();
  }
catch (  ClientProtocolException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return false;
}"
40982,"@POST @Consumes(MediaType.APPLICATION_XML) @Produces({MediaType.APPLICATION_XML,MediaType.TEXT_XML}) public Response createServiceInstance(@Context UriInfo uriInfo,String xml){
  log.debug(""String_Node_Str"",csarId,serviceTemplateID);
  IInstanceDataService service=InstanceDataServiceHandler.getInstanceDataService();
  try {
    ServiceInstance createdServiceInstance=service.createServiceInstance(csarId,serviceTemplateID);
    String corr=xml.substring(xml.indexOf(""String_Node_Str"") + 1,xml.indexOf(""String_Node_Str""));
    int serviceTemplateInstanceId=createdServiceInstance.getDBId();
    String instanceURL=createdServiceInstance.getServiceInstanceID().toString();
    log.debug(corr + ""String_Node_Str"" + corr+ ""String_Node_Str""+ instanceURL);
{
      BuildCorrelationToInstanceMapping.instance.correlateCorrelationIdToServiceTemplateInstanceId(corr,serviceTemplateInstanceId);
      PlanInvocationEngineHandler.planInvocationEngine.correctCorrelationToServiceTemplateInstanceIdMapping(csarId,serviceTemplateID,corr,serviceTemplateInstanceId);
    }
    SimpleXLink response=new SimpleXLink(uriInfo.getAbsolutePath().toString() + ""String_Node_Str"" + serviceTemplateInstanceId,""String_Node_Str"");
    log.debug(""String_Node_Str"" + response.getHref());
    return Response.ok(response).build();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new GenericRestException(Status.INTERNAL_SERVER_ERROR,e.getMessage());
  }
}","@POST @Consumes(MediaType.APPLICATION_XML) @Produces({MediaType.APPLICATION_XML,MediaType.TEXT_XML}) public Response createServiceInstance(@Context UriInfo uriInfo,String xml){
}"
40983,"/** 
 * <p> This method assigns plugins to the already initialized BuildPlan and its TemplateBuildPlans. First there will be checked if any generic plugin can handle a template of the TopologyTemplate </p>
 * @param buildPlan a BuildPlan which is alread initialized
 * @param serviceTemplateName the name of the ServiceTemplate the BuildPlanbelongs to
 * @param map a PropertyMap which contains mappings from Template toProperty and to variable name of inside the BuidlPlan
 */
private void runPlugins(BuildPlan buildPlan,QName serviceTemplateId,PropertyMap map){
  for (  TemplateBuildPlan templatePlan : buildPlan.getTemplateBuildPlans()) {
    if (templatePlan.getNodeTemplate() != null) {
      AbstractNodeTemplate nodeTemplate=templatePlan.getNodeTemplate();
      PlanBuilder.LOG.debug(""String_Node_Str"" + nodeTemplate.getId());
      TemplatePlanContext context=new TemplatePlanContext(templatePlan,map,serviceTemplateId);
      IPlanBuilderTypePlugin plugin=this.canGenericPluginHandle(nodeTemplate);
      if (plugin == null) {
        PlanBuilder.LOG.debug(""String_Node_Str"",nodeTemplate.getId());
        ProvisioningChain chain=TemplatePlanBuilder.createProvisioningChain(nodeTemplate);
        if (chain == null) {
          PlanBuilder.LOG.warn(""String_Node_Str"",nodeTemplate.getId());
          continue;
        }
        chain.executeIAProvisioning(context);
        chain.executeDAProvisioning(context);
        chain.executeOperationProvisioning(context,this.opNames);
      }
 else {
        PlanBuilder.LOG.info(""String_Node_Str"",nodeTemplate.getId());
        plugin.handle(context);
      }
      for (      IPlanBuilderPostPhasePlugin postPhasePlugin : PluginRegistry.getPostPlugins()) {
        if (postPhasePlugin.canHandle(nodeTemplate)) {
          postPhasePlugin.handle(context,nodeTemplate);
        }
      }
    }
 else {
      AbstractRelationshipTemplate relationshipTemplate=templatePlan.getRelationshipTemplate();
      TemplatePlanContext context=new TemplatePlanContext(templatePlan,map,serviceTemplateId);
      if (!this.canGenericPluginHandle(relationshipTemplate)) {
        PlanBuilder.LOG.debug(""String_Node_Str"",relationshipTemplate.getId());
        ProvisioningChain sourceChain=TemplatePlanBuilder.createProvisioningChain(relationshipTemplate,true);
        ProvisioningChain targetChain=TemplatePlanBuilder.createProvisioningChain(relationshipTemplate,false);
        if (targetChain != null) {
          PlanBuilder.LOG.warn(""String_Node_Str"",relationshipTemplate.getId());
          targetChain.executeIAProvisioning(context);
          targetChain.executeOperationProvisioning(context,this.opNames);
        }
        if (sourceChain != null) {
          PlanBuilder.LOG.warn(""String_Node_Str"",relationshipTemplate.getId());
          sourceChain.executeIAProvisioning(context);
          sourceChain.executeOperationProvisioning(context,this.opNames);
        }
      }
 else {
        PlanBuilder.LOG.info(""String_Node_Str"",relationshipTemplate.getId());
        this.handleWithGenericPlugin(context,relationshipTemplate);
      }
      for (      IPlanBuilderPostPhasePlugin postPhasePlugin : PluginRegistry.getPostPlugins()) {
        if (postPhasePlugin.canHandle(relationshipTemplate)) {
          postPhasePlugin.handle(context,relationshipTemplate);
        }
      }
    }
  }
}","/** 
 * <p> This method assigns plugins to the already initialized BuildPlan and its TemplateBuildPlans. First there will be checked if any generic plugin can handle a template of the TopologyTemplate </p>
 * @param buildPlan a BuildPlan which is alread initialized
 * @param serviceTemplateName the name of the ServiceTemplate the BuildPlanbelongs to
 * @param map a PropertyMap which contains mappings from Template toProperty and to variable name of inside the BuidlPlan
 */
private void runPlugins(BuildPlan buildPlan,QName serviceTemplateId,PropertyMap map){
  for (  TemplateBuildPlan templatePlan : buildPlan.getTemplateBuildPlans()) {
    if (templatePlan.getNodeTemplate() != null) {
      AbstractNodeTemplate nodeTemplate=templatePlan.getNodeTemplate();
      PlanBuilder.LOG.debug(""String_Node_Str"" + nodeTemplate.getId());
      TemplatePlanContext context=new TemplatePlanContext(templatePlan,map,serviceTemplateId);
      IPlanBuilderTypePlugin plugin=this.canGenericPluginHandle(nodeTemplate);
      if (plugin == null) {
        PlanBuilder.LOG.debug(""String_Node_Str"",nodeTemplate.getId());
        ProvisioningChain chain=TemplatePlanBuilder.createProvisioningChain(nodeTemplate);
        if (chain == null) {
          PlanBuilder.LOG.warn(""String_Node_Str"",nodeTemplate.getId());
        }
 else {
          PlanBuilder.LOG.debug(""String_Node_Str"",nodeTemplate.getId());
          chain.executeIAProvisioning(context);
          chain.executeDAProvisioning(context);
          chain.executeOperationProvisioning(context,this.opNames);
        }
      }
 else {
        PlanBuilder.LOG.info(""String_Node_Str"",nodeTemplate.getId());
        plugin.handle(context);
      }
      for (      IPlanBuilderPostPhasePlugin postPhasePlugin : PluginRegistry.getPostPlugins()) {
        if (postPhasePlugin.canHandle(nodeTemplate)) {
          postPhasePlugin.handle(context,nodeTemplate);
        }
      }
    }
 else {
      AbstractRelationshipTemplate relationshipTemplate=templatePlan.getRelationshipTemplate();
      TemplatePlanContext context=new TemplatePlanContext(templatePlan,map,serviceTemplateId);
      if (!this.canGenericPluginHandle(relationshipTemplate)) {
        PlanBuilder.LOG.debug(""String_Node_Str"",relationshipTemplate.getId());
        ProvisioningChain sourceChain=TemplatePlanBuilder.createProvisioningChain(relationshipTemplate,true);
        ProvisioningChain targetChain=TemplatePlanBuilder.createProvisioningChain(relationshipTemplate,false);
        if (targetChain != null) {
          PlanBuilder.LOG.warn(""String_Node_Str"",relationshipTemplate.getId());
          targetChain.executeIAProvisioning(context);
          targetChain.executeOperationProvisioning(context,this.opNames);
        }
        if (sourceChain != null) {
          PlanBuilder.LOG.warn(""String_Node_Str"",relationshipTemplate.getId());
          sourceChain.executeIAProvisioning(context);
          sourceChain.executeOperationProvisioning(context,this.opNames);
        }
      }
 else {
        PlanBuilder.LOG.info(""String_Node_Str"",relationshipTemplate.getId());
        this.handleWithGenericPlugin(context,relationshipTemplate);
      }
      for (      IPlanBuilderPostPhasePlugin postPhasePlugin : PluginRegistry.getPostPlugins()) {
        if (postPhasePlugin.canHandle(relationshipTemplate)) {
          postPhasePlugin.handle(context,relationshipTemplate);
        }
      }
    }
  }
}"
40984,"@Override @WebMethod(exclude=true) public Document getServiceInstanceProperties(URI serviceInstanceID,List<QName> propertiesList) throws ReferenceNotFoundException {
  List<ServiceInstance> serviceInstances=this.getServiceInstances(serviceInstanceID,null,null);
  if ((serviceInstances == null) || (serviceInstances.size() != 1)) {
    String msg=String.format(""String_Node_Str"",serviceInstanceID);
    InstanceDataServiceImpl.LOG.warn(msg);
    throw new ReferenceNotFoundException(msg);
  }
  ServiceInstance serviceInstance=serviceInstances.get(0);
  return serviceInstance.getProperties();
}","@Override @WebMethod(exclude=true) public Document getServiceInstanceProperties(URI serviceInstanceID,List<QName> propertiesList) throws ReferenceNotFoundException {
  List<ServiceInstance> serviceInstances=this.getServiceInstances(serviceInstanceID,null,null);
  if ((serviceInstances == null) || (serviceInstances.size() != 1)) {
    String msg=String.format(""String_Node_Str"",serviceInstanceID);
    InstanceDataServiceImpl.LOG.warn(msg);
    throw new ReferenceNotFoundException(msg);
  }
  ServiceInstance serviceInstance=serviceInstances.get(0);
  this.updateServiceInstanceProperties(serviceInstance);
  return serviceInstance.getProperties();
}"
40985,"private NodeInstance getNodeInstanceFromMappingObject(ServiceInstance serviceInstance,Object obj){
  if (obj instanceof TNodeTemplate) {
    TNodeTemplate template=(TNodeTemplate)obj;
    List<NodeInstance> nodeInstances=serviceInstance.getNodeInstances();
    for (    NodeInstance nodeInstance : nodeInstances) {
      if (nodeInstance.getNodeTemplateID().getLocalPart().equals(template.getId())) {
        return nodeInstance;
      }
    }
  }
  return null;
}","private NodeInstance getNodeInstanceFromMappingObject(ServiceInstance serviceInstance,Object obj){
  if (obj instanceof TNodeTemplate) {
    TNodeTemplate template=(TNodeTemplate)obj;
    List<NodeInstance> nodeInstances=this.getNodeInstances(null,null,null,serviceInstance.getServiceInstanceID());
    if (nodeInstances == null) {
      return null;
    }
    for (    NodeInstance nodeInstance : nodeInstances) {
      if (nodeInstance.getNodeTemplateID().getLocalPart().equals(template.getId())) {
        return nodeInstance;
      }
    }
  }
  return null;
}"
40986,"@WebMethod(exclude=true) private void updateServiceInstanceProperties(ServiceInstance serviceInstance){
  if (serviceInstance.getProperties() == null) {
    return;
  }
  TBoundaryDefinitions boundaryDefs=InstanceDataServiceImpl.toscaEngineService.getBoundaryDefinitionsOfServiceTemplate(serviceInstance.getCSAR_ID(),serviceInstance.getServiceTemplateID());
  if ((boundaryDefs == null) || (boundaryDefs.getProperties() == null) || (boundaryDefs.getProperties().getPropertyMappings() == null)) {
    return;
  }
  Element properties=(Element)serviceInstance.getProperties().getFirstChild();
  for (  TPropertyMapping mapping : boundaryDefs.getProperties().getPropertyMappings().getPropertyMapping()) {
    String serviceTemplatePropertyQuery=mapping.getServiceTemplatePropertyRef();
    List<Element> serviceTemplatePropertyElements=this.queryElementList(properties,serviceTemplatePropertyQuery);
    if (serviceTemplatePropertyElements.size() != 1) {
      continue;
    }
    if (this.isConcatQuery(mapping.getTargetPropertyRef())) {
      String propertyValue=this.generatePropertyValueFromConcatQuery(mapping.getTargetPropertyRef(),this.getNodeInstances(null,null,null,serviceInstance.getServiceInstanceID()));
      serviceTemplatePropertyElements.get(0).setTextContent(propertyValue);
    }
 else {
      NodeInstance nodeInstance=this.getNodeInstanceFromMappingObject(serviceInstance,mapping.getTargetObjectRef());
      Document nodeProperties=nodeInstance.getProperties();
      if (nodeProperties == null) {
        continue;
      }
      Element nodePropertiesRoot=(Element)nodeProperties.getFirstChild();
      String nodeTemplatePropertyQuery=mapping.getTargetPropertyRef();
      List<Element> nodePropertyElements=this.queryElementList(nodePropertiesRoot,nodeTemplatePropertyQuery);
      if (nodePropertyElements.size() != 1) {
        continue;
      }
      serviceTemplatePropertyElements.get(0).setTextContent(nodePropertyElements.get(0).getTextContent());
    }
  }
  serviceInstance.setProperties(properties.getOwnerDocument());
  this.siDAO.storeServiceInstance(serviceInstance);
}","@WebMethod(exclude=true) private void updateServiceInstanceProperties(ServiceInstance serviceInstance){
  if (serviceInstance.getProperties() == null) {
    return;
  }
  TBoundaryDefinitions boundaryDefs=InstanceDataServiceImpl.toscaEngineService.getBoundaryDefinitionsOfServiceTemplate(serviceInstance.getCSAR_ID(),serviceInstance.getServiceTemplateID());
  if ((boundaryDefs == null) || (boundaryDefs.getProperties() == null) || (boundaryDefs.getProperties().getPropertyMappings() == null)) {
    return;
  }
  Element properties=(Element)serviceInstance.getProperties().getFirstChild();
  for (  TPropertyMapping mapping : boundaryDefs.getProperties().getPropertyMappings().getPropertyMapping()) {
    String serviceTemplatePropertyQuery=mapping.getServiceTemplatePropertyRef();
    List<Element> serviceTemplatePropertyElements=this.queryElementList(properties,serviceTemplatePropertyQuery);
    if (serviceTemplatePropertyElements.size() != 1) {
      continue;
    }
    if (this.isConcatQuery(mapping.getTargetPropertyRef())) {
      String propertyValue=this.generatePropertyValueFromConcatQuery(mapping.getTargetPropertyRef(),this.getNodeInstances(null,null,null,serviceInstance.getServiceInstanceID()));
      serviceTemplatePropertyElements.get(0).setTextContent(propertyValue);
    }
 else {
      NodeInstance nodeInstance=this.getNodeInstanceFromMappingObject(serviceInstance,mapping.getTargetObjectRef());
      if (nodeInstance == null) {
        continue;
      }
      Document nodeProperties=nodeInstance.getProperties();
      if (nodeProperties == null) {
        continue;
      }
      Element nodePropertiesRoot=(Element)nodeProperties.getFirstChild();
      String nodeTemplatePropertyQuery=mapping.getTargetPropertyRef();
      List<Element> nodePropertyElements=this.queryElementList(nodePropertiesRoot,nodeTemplatePropertyQuery);
      if (nodePropertyElements.size() != 1) {
        continue;
      }
      serviceTemplatePropertyElements.get(0).setTextContent(nodePropertyElements.get(0).getTextContent());
    }
  }
  serviceInstance.setProperties(properties.getOwnerDocument());
  this.siDAO.storeServiceInstance(serviceInstance);
}"
40987,"@Override public void process(Exchange exchange) throws Exception {
  Set<String> messageIDs=ManagementBusPluginSoapHttpServiceImpl.getMessageIDs();
  CallbackProcessor.LOG.debug(""String_Node_Str"",messageIDs.toString());
  @SuppressWarnings(""String_Node_Str"") List<SoapHeader> soapHeaders=(List<SoapHeader>)exchange.getIn().getHeader(Header.HEADER_LIST);
  Element element;
  if (soapHeaders != null) {
    for (    SoapHeader header : soapHeaders) {
      element=(Element)header.getObject();
      exchange.getIn().setHeader(element.getLocalName(),element.getTextContent());
    }
  }
  String message=exchange.getIn().getBody(String.class);
  Map<String,Object> headers=exchange.getIn().getHeaders();
  CallbackProcessor.LOG.debug(""String_Node_Str"");
  for (  String messageID : messageIDs) {
    if (message.contains(messageID) || headers.containsValue(messageID)) {
      CallbackProcessor.LOG.debug(""String_Node_Str"",messageID);
      MessageFactory messageFactory=MessageFactory.newInstance();
      InputStream inputStream=new ByteArrayInputStream(message.getBytes(""String_Node_Str""));
      SOAPMessage soapMessage=messageFactory.createMessage(null,inputStream);
      exchange.getIn().setHeader(""String_Node_Str"",messageID);
      exchange.getIn().setHeader(""String_Node_Str"",""String_Node_Str"");
      Document doc;
      try {
        doc=soapMessage.getSOAPBody().extractContentAsDocument();
        exchange.getIn().setBody(doc);
      }
 catch (      SOAPException e) {
        doc=soapMessage.getSOAPPart().getEnvelope().getOwnerDocument();
        CallbackProcessor.LOG.warn(""String_Node_Str"");
        exchange.getIn().setBody(doc);
      }
      break;
    }
  }
}","@Override public void process(Exchange exchange) throws Exception {
  Set<String> messageIDs=ManagementBusPluginSoapHttpServiceImpl.getMessageIDs();
  CallbackProcessor.LOG.debug(""String_Node_Str"",messageIDs.toString());
  @SuppressWarnings(""String_Node_Str"") List<SoapHeader> soapHeaders=(List<SoapHeader>)exchange.getIn().getHeader(Header.HEADER_LIST);
  Element element;
  if (soapHeaders != null) {
    for (    SoapHeader header : soapHeaders) {
      element=(Element)header.getObject();
      exchange.getIn().setHeader(element.getLocalName(),element.getTextContent());
    }
  }
  String message=exchange.getIn().getBody(String.class);
  Map<String,Object> headers=exchange.getIn().getHeaders();
  CallbackProcessor.LOG.debug(""String_Node_Str"");
  for (  String messageID : messageIDs) {
    if (message.contains(""String_Node_Str"" + messageID + ""String_Node_Str"") || headers.containsValue(messageID)) {
      CallbackProcessor.LOG.debug(""String_Node_Str"",messageID);
      MessageFactory messageFactory=MessageFactory.newInstance();
      InputStream inputStream=new ByteArrayInputStream(message.getBytes(""String_Node_Str""));
      SOAPMessage soapMessage=messageFactory.createMessage(null,inputStream);
      exchange.getIn().setHeader(""String_Node_Str"",messageID);
      exchange.getIn().setHeader(""String_Node_Str"",""String_Node_Str"");
      Document doc;
      try {
        doc=soapMessage.getSOAPBody().extractContentAsDocument();
        exchange.getIn().setBody(doc);
      }
 catch (      SOAPException e) {
        doc=soapMessage.getSOAPPart().getEnvelope().getOwnerDocument();
        CallbackProcessor.LOG.warn(""String_Node_Str"");
        exchange.getIn().setBody(doc);
      }
      break;
    }
  }
}"
40988,"private Response storeCSAR(String fileName,InputStream uploadedInputStream){
  File tmpDir=new File(System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"") + Long.toString(System.currentTimeMillis()));
  tmpDir.mkdir();
  File uploadFile=new File(tmpDir.getAbsoluteFile() + System.getProperty(""String_Node_Str"") + fileName);
  OutputStream out;
  try {
    out=new FileOutputStream(uploadFile);
    int read=0;
    byte[] bytes=new byte[1024];
    while ((read=uploadedInputStream.read(bytes)) != -1) {
      out.write(bytes,0,read);
    }
    uploadedInputStream.close();
    CSARsResource.LOG.debug(""String_Node_Str"" + uploadFile.getAbsolutePath() + ""String_Node_Str""+ uploadFile.getTotalSpace());
    out.flush();
    out.close();
    CSARID csarID=null;
    csarID=fileHandler.storeCSAR(uploadFile.toPath());
    csarID=startPlanBuilder(csarID);
    if (csarID != null) {
      CSARsResource.LOG.info(""String_Node_Str"",csarID.toString());
      CSARsResource.LOG.trace(""String_Node_Str"" + (null != control));
      control.setDeploymentProcessStateStored(csarID);
      if (control.invokeTOSCAProcessing(csarID)) {
        List<QName> serviceTemplates=ToscaServiceHandler.getToscaEngineService().getToscaReferenceMapper().getServiceTemplateIDsContainedInCSAR(csarID);
        for (        QName serviceTemplate : serviceTemplates) {
          CSARsResource.LOG.debug(""String_Node_Str"" + serviceTemplate + ""String_Node_Str""+ csarID+ ""String_Node_Str"");
          if (!control.invokeIADeployment(csarID,serviceTemplate)) {
            break;
          }
          CSARsResource.LOG.debug(""String_Node_Str"" + serviceTemplate + ""String_Node_Str""+ csarID+ ""String_Node_Str"");
          CSARsResource.LOG.debug(""String_Node_Str"");
          if (!control.invokePlanDeployment(csarID,serviceTemplate)) {
            break;
          }
        }
        return Response.created(URI.create(Utilities.buildURI(uriInfo.getAbsolutePath().toString(),csarID.toString()))).build();
      }
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  UserException e) {
    e.printStackTrace();
  }
catch (  SystemException e) {
    e.printStackTrace();
  }
  CSARsResource.LOG.error(""String_Node_Str"",uploadFile.getAbsolutePath());
  return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
}","private Response storeCSAR(String fileName,InputStream uploadedInputStream){
  File tmpDir=FileAccessServiceHandler.getFileAccessService().getTemp();
  tmpDir.mkdir();
  File uploadFile=new File(tmpDir.getAbsoluteFile() + System.getProperty(""String_Node_Str"") + fileName);
  OutputStream out;
  try {
    out=new FileOutputStream(uploadFile);
    int read=0;
    byte[] bytes=new byte[1024];
    while ((read=uploadedInputStream.read(bytes)) != -1) {
      out.write(bytes,0,read);
    }
    uploadedInputStream.close();
    CSARsResource.LOG.debug(""String_Node_Str"" + uploadFile.getAbsolutePath() + ""String_Node_Str""+ uploadFile.getTotalSpace());
    out.flush();
    out.close();
    CSARID csarID=null;
    csarID=fileHandler.storeCSAR(uploadFile.toPath());
    csarID=startPlanBuilder(csarID);
    if (csarID != null) {
      CSARsResource.LOG.info(""String_Node_Str"",csarID.toString());
      CSARsResource.LOG.trace(""String_Node_Str"" + (null != control));
      control.setDeploymentProcessStateStored(csarID);
      if (control.invokeTOSCAProcessing(csarID)) {
        List<QName> serviceTemplates=ToscaServiceHandler.getToscaEngineService().getToscaReferenceMapper().getServiceTemplateIDsContainedInCSAR(csarID);
        for (        QName serviceTemplate : serviceTemplates) {
          CSARsResource.LOG.debug(""String_Node_Str"" + serviceTemplate + ""String_Node_Str""+ csarID+ ""String_Node_Str"");
          if (!control.invokeIADeployment(csarID,serviceTemplate)) {
            break;
          }
          CSARsResource.LOG.debug(""String_Node_Str"" + serviceTemplate + ""String_Node_Str""+ csarID+ ""String_Node_Str"");
          CSARsResource.LOG.debug(""String_Node_Str"");
          if (!control.invokePlanDeployment(csarID,serviceTemplate)) {
            break;
          }
        }
        return Response.created(URI.create(Utilities.buildURI(uriInfo.getAbsolutePath().toString(),csarID.toString()))).build();
      }
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  UserException e) {
    e.printStackTrace();
  }
catch (  SystemException e) {
    e.printStackTrace();
  }
  CSARsResource.LOG.error(""String_Node_Str"",uploadFile.getAbsolutePath());
  return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
}"
40989,"/** 
 * Exports the given BuildPlan to the given URI location
 * @param destination the URI to export to
 * @param buildPlan the BuildPlan to export
 * @return true iff exporting the BuildPlan was successful
 * @throws IOException is thrown when reading/writing the file fails
 * @throws JAXBException is thrown when writing with JAXB fails
 */
public boolean export(URI destination,BuildPlan buildPlan) throws IOException, JAXBException {
  if (!new File(destination).getName().contains(""String_Node_Str"")) {
    return false;
  }
  List<File> importedFiles=buildPlan.getImportedFiles();
  SimpleFileExporter.LOG.debug(""String_Node_Str"");
  for (  File file : importedFiles) {
    SimpleFileExporter.LOG.debug(file.getAbsolutePath());
  }
  List<Element> importElements=buildPlan.getBpelImportElements();
  SimpleFileExporter.LOG.debug(""String_Node_Str"");
  for (  Element element : importElements) {
    SimpleFileExporter.LOG.debug(""String_Node_Str"" + element.getLocalName());
    SimpleFileExporter.LOG.debug(""String_Node_Str"" + element.getAttribute(""String_Node_Str""));
  }
  GenericWsdlWrapper wsdl=buildPlan.getWsdl();
  File tempDir=FileUtils.getTempDirectory();
  SimpleFileExporter.LOG.debug(""String_Node_Str"" + tempDir.getAbsolutePath());
  File tempFolder=new File(tempDir,Long.toString(System.currentTimeMillis()));
  tempFolder.mkdir();
  SimpleFileExporter.LOG.debug(""String_Node_Str"" + tempFolder.getAbsolutePath());
  List<File> exportedFiles=new ArrayList<File>();
  for (  File importedFile : importedFiles) {
    for (    Element importElement : importElements) {
      String filePath=importedFile.getAbsolutePath();
      String locationPath=importElement.getAttribute(""String_Node_Str"");
      SimpleFileExporter.LOG.debug(""String_Node_Str"");
      SimpleFileExporter.LOG.debug(filePath);
      SimpleFileExporter.LOG.debug(""String_Node_Str"");
      SimpleFileExporter.LOG.debug(locationPath);
      if (importedFile.getAbsolutePath().trim().equals(importElement.getAttribute(""String_Node_Str"").trim())) {
        String fileName=importedFile.getName();
        SimpleFileExporter.LOG.debug(""String_Node_Str"" + fileName);
        importElement.setAttribute(""String_Node_Str"",fileName);
        File fileLocationInDir=new File(tempFolder,fileName);
        FileUtils.copyFile(importedFile,fileLocationInDir);
        exportedFiles.add(fileLocationInDir);
      }
    }
  }
  SimpleFileExporter.LOG.debug(""String_Node_Str"");
  Deploy deployment=buildPlan.getDeploymentDeskriptor();
  try {
    this.rewriteServiceNames(deployment,exportedFiles,buildPlan.getCsarName());
  }
 catch (  WSDLException e) {
    LOG.warn(""String_Node_Str"",e);
  }
catch (  FileNotFoundException e) {
    LOG.warn(""String_Node_Str"",e);
  }
  File deployXmlFile=new File(tempFolder,""String_Node_Str"");
  deployXmlFile.createNewFile();
  JAXBContext jaxbContext=JAXBContext.newInstance(Deploy.class);
  Marshaller m=jaxbContext.createMarshaller();
  m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
  m.marshal(deployment,deployXmlFile);
  File wsdlFile=new File(tempFolder,wsdl.getFileName());
  FileUtils.writeStringToFile(wsdlFile,wsdl.getFinalizedWsdlAsString());
  File bpelFile=new File(tempFolder,wsdl.getFileName().replace(""String_Node_Str"",""String_Node_Str""));
  try {
    this.writeBPELDocToFile(bpelFile,buildPlan.getBpelDocument());
  }
 catch (  TransformerException e) {
    SimpleFileExporter.LOG.error(""String_Node_Str"",e);
    return false;
  }
  ServiceReference<?> servRef=FrameworkUtil.getBundle(this.getClass()).getBundleContext().getServiceReference(IFileAccessService.class.getName());
  IFileAccessService service=(IFileAccessService)FrameworkUtil.getBundle(this.getClass()).getBundleContext().getService(servRef);
  service.zip(tempFolder,new File(destination));
  return true;
}","/** 
 * Exports the given BuildPlan to the given URI location
 * @param destination the URI to export to
 * @param buildPlan the BuildPlan to export
 * @return true iff exporting the BuildPlan was successful
 * @throws IOException is thrown when reading/writing the file fails
 * @throws JAXBException is thrown when writing with JAXB fails
 */
public boolean export(URI destination,BuildPlan buildPlan) throws IOException, JAXBException {
  if (!new File(destination).getName().contains(""String_Node_Str"")) {
    return false;
  }
  List<File> importedFiles=buildPlan.getImportedFiles();
  SimpleFileExporter.LOG.debug(""String_Node_Str"");
  for (  File file : importedFiles) {
    SimpleFileExporter.LOG.debug(file.getAbsolutePath());
  }
  List<Element> importElements=buildPlan.getBpelImportElements();
  SimpleFileExporter.LOG.debug(""String_Node_Str"");
  for (  Element element : importElements) {
    SimpleFileExporter.LOG.debug(""String_Node_Str"" + element.getLocalName());
    SimpleFileExporter.LOG.debug(""String_Node_Str"" + element.getAttribute(""String_Node_Str""));
  }
  GenericWsdlWrapper wsdl=buildPlan.getWsdl();
  File tempDir=this.getFileAccessService().getTemp();
  SimpleFileExporter.LOG.debug(""String_Node_Str"" + tempDir.getAbsolutePath());
  File tempFolder=new File(tempDir,Long.toString(System.currentTimeMillis()));
  tempFolder.mkdir();
  SimpleFileExporter.LOG.debug(""String_Node_Str"" + tempFolder.getAbsolutePath());
  List<File> exportedFiles=new ArrayList<File>();
  for (  File importedFile : importedFiles) {
    for (    Element importElement : importElements) {
      String filePath=importedFile.getAbsolutePath();
      String locationPath=importElement.getAttribute(""String_Node_Str"");
      SimpleFileExporter.LOG.debug(""String_Node_Str"");
      SimpleFileExporter.LOG.debug(filePath);
      SimpleFileExporter.LOG.debug(""String_Node_Str"");
      SimpleFileExporter.LOG.debug(locationPath);
      if (importedFile.getAbsolutePath().trim().equals(importElement.getAttribute(""String_Node_Str"").trim())) {
        String fileName=importedFile.getName();
        SimpleFileExporter.LOG.debug(""String_Node_Str"" + fileName);
        importElement.setAttribute(""String_Node_Str"",fileName);
        File fileLocationInDir=new File(tempFolder,fileName);
        FileUtils.copyFile(importedFile,fileLocationInDir);
        exportedFiles.add(fileLocationInDir);
      }
    }
  }
  SimpleFileExporter.LOG.debug(""String_Node_Str"");
  Deploy deployment=buildPlan.getDeploymentDeskriptor();
  try {
    this.rewriteServiceNames(deployment,exportedFiles,buildPlan.getCsarName());
  }
 catch (  WSDLException e) {
    LOG.warn(""String_Node_Str"",e);
  }
catch (  FileNotFoundException e) {
    LOG.warn(""String_Node_Str"",e);
  }
  File deployXmlFile=new File(tempFolder,""String_Node_Str"");
  deployXmlFile.createNewFile();
  JAXBContext jaxbContext=JAXBContext.newInstance(Deploy.class);
  Marshaller m=jaxbContext.createMarshaller();
  m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
  m.marshal(deployment,deployXmlFile);
  File wsdlFile=new File(tempFolder,wsdl.getFileName());
  FileUtils.writeStringToFile(wsdlFile,wsdl.getFinalizedWsdlAsString());
  File bpelFile=new File(tempFolder,wsdl.getFileName().replace(""String_Node_Str"",""String_Node_Str""));
  try {
    this.writeBPELDocToFile(bpelFile,buildPlan.getBpelDocument());
  }
 catch (  TransformerException e) {
    SimpleFileExporter.LOG.error(""String_Node_Str"",e);
    return false;
  }
  ServiceReference<?> servRef=FrameworkUtil.getBundle(this.getClass()).getBundleContext().getServiceReference(IFileAccessService.class.getName());
  IFileAccessService service=(IFileAccessService)FrameworkUtil.getBundle(this.getClass()).getBundleContext().getService(servRef);
  service.zip(tempFolder,new File(destination));
  return true;
}"
40990,"private String injectBPELVariables(String targetPropertyRef,PropertyMap propMap){
  String testQuery=targetPropertyRef.trim();
  if (!testQuery.endsWith(""String_Node_Str"")) {
    return null;
  }
  int functionOpeningBracket=testQuery.indexOf(""String_Node_Str"");
  String functionString=testQuery.substring(0,functionOpeningBracket);
  if (!functionString.equals(""String_Node_Str"")) {
    return null;
  }
  String functionContent=testQuery.substring(functionOpeningBracket + 1,testQuery.lastIndexOf(""String_Node_Str"")).trim();
  String[] functionParts=functionContent.split(""String_Node_Str"");
  List<String> augmentedFunctionParts=new ArrayList<String>();
  for (  String functionPart : functionParts) {
    if (functionPart.startsWith(""String_Node_Str"")) {
      augmentedFunctionParts.add(functionPart);
    }
 else     if (functionPart.split(""String_Node_Str"").length == 3) {
      String[] queryParts=functionPart.split(""String_Node_Str"");
      if (!queryParts[1].equals(""String_Node_Str"")) {
        return null;
      }
      String nodeTemplateName=queryParts[0];
      String propertyName=queryParts[2];
      Map<String,String> propertyName2BPELVarMap=propMap.getPropertyMappingMap(nodeTemplateName);
      if (propertyName2BPELVarMap == null) {
        return null;
      }
 else       if (propertyName2BPELVarMap.isEmpty()) {
        return null;
      }
      String bpelVarName=propertyName2BPELVarMap.get(propertyName);
      if (bpelVarName == null) {
        return null;
      }
      augmentedFunctionParts.add(""String_Node_Str"" + bpelVarName);
    }
  }
  String resultString=functionString + ""String_Node_Str"";
  for (  String functionPart : augmentedFunctionParts) {
    resultString+=functionPart + ""String_Node_Str"";
  }
  resultString=resultString.substring(0,resultString.length() - 1) + ""String_Node_Str"";
  return resultString;
}","private String injectBPELVariables(String targetPropertyRef,PropertyMap propMap){
  String testQuery=targetPropertyRef.trim();
  if (!testQuery.endsWith(""String_Node_Str"")) {
    return null;
  }
  int functionOpeningBracket=testQuery.indexOf(""String_Node_Str"");
  String functionString=testQuery.substring(0,functionOpeningBracket);
  if (!functionString.equals(""String_Node_Str"")) {
    return null;
  }
  String functionContent=testQuery.substring(functionOpeningBracket + 1,testQuery.lastIndexOf(""String_Node_Str"")).trim();
  String[] functionParts=functionContent.split(""String_Node_Str"");
  List<String> augmentedFunctionParts=new ArrayList<String>();
  for (  String functionPart : functionParts) {
    if (functionPart.trim().startsWith(""String_Node_Str"")) {
      augmentedFunctionParts.add(functionPart);
    }
 else     if (functionPart.trim().split(""String_Node_Str"").length == 3) {
      String[] queryParts=functionPart.trim().split(""String_Node_Str"");
      if (!queryParts[1].equals(""String_Node_Str"")) {
        return null;
      }
      String nodeTemplateName=queryParts[0];
      String propertyName=queryParts[2];
      Map<String,String> propertyName2BPELVarMap=propMap.getPropertyMappingMap(nodeTemplateName);
      if (propertyName2BPELVarMap == null) {
        return null;
      }
 else       if (propertyName2BPELVarMap.isEmpty()) {
        return null;
      }
      String bpelVarName=propertyName2BPELVarMap.get(propertyName);
      if (bpelVarName == null) {
        return null;
      }
      augmentedFunctionParts.add(""String_Node_Str"" + bpelVarName);
    }
  }
  String resultString=functionString + ""String_Node_Str"";
  for (  String functionPart : augmentedFunctionParts) {
    resultString+=functionPart + ""String_Node_Str"";
  }
  resultString=resultString.substring(0,resultString.length() - 1) + ""String_Node_Str"";
  return resultString;
}"
40991,"private Variable appendBPELAssignOperationShScript(TemplatePlanContext templateContext,AbstractOperation operation,AbstractArtifactReference reference,AbstractImplementationArtifact ia){
  Map<String,Variable> inputMappings=new HashMap<String,Variable>();
  String runShScriptString=""String_Node_Str"" + templateContext.getCSARFileName() + ""String_Node_Str""+ templateContext.getCSARFileName()+ ""String_Node_Str""+ reference.getReference()+ ""String_Node_Str""+ this.createDANamePathMapEnvVar(templateContext,ia);
  String runShScriptStringVarName=""String_Node_Str"" + templateContext.getIdForNames();
  String xpathQueryPrefix=""String_Node_Str"";
  String xpathQuerySuffix=""String_Node_Str"";
  for (  AbstractParameter parameter : operation.getInputParameters()) {
    Variable var=templateContext.getPropertyVariable(parameter.getName());
    if (var == null) {
      var=templateContext.getPropertyVariable(parameter.getName(),true);
      if (var == null) {
        var=templateContext.getPropertyVariable(parameter.getName(),false);
      }
    }
    inputMappings.put(parameter.getName(),var);
    runShScriptString+=parameter.getName() + ""String_Node_Str"" + parameter.getName()+ ""String_Node_Str"";
    xpathQueryPrefix+=""String_Node_Str"";
    xpathQuerySuffix+=""String_Node_Str"" + parameter.getName() + ""String_Node_Str"";
    if (var == null) {
      xpathQuerySuffix+=""String_Node_Str"" + templateContext.getPlanRequestMessageName() + ""String_Node_Str""+ parameter.getName()+ ""String_Node_Str"";
    }
 else {
      xpathQuerySuffix+=""String_Node_Str"" + var.getName() + ""String_Node_Str"";
    }
  }
  runShScriptString+=""String_Node_Str"" + templateContext.getCSARFileName() + ""String_Node_Str""+ reference.getReference();
  String logFilePath=""String_Node_Str"" + templateContext.getCSARFileName() + ""String_Node_Str""+ templateContext.getTemplateBuildPlanName()+ ""String_Node_Str"";
  runShScriptString+=""String_Node_Str"" + logFilePath;
  runShScriptString+=""String_Node_Str"" + logFilePath;
  Variable runShScriptStringVar=templateContext.createGlobalStringVariable(runShScriptStringVarName,runShScriptString);
  try {
    String xpathQuery=xpathQueryPrefix + ""String_Node_Str"" + runShScriptStringVar.getName()+ xpathQuerySuffix;
    Node assignNode=this.loadAssignXpathQueryToStringVarFragmentAsNode(""String_Node_Str"",xpathQuery,runShScriptStringVar.getName());
    assignNode=templateContext.importNode(assignNode);
    templateContext.getProvisioningPhaseElement().appendChild(assignNode);
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
catch (  SAXException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return runShScriptStringVar;
}","private Variable appendBPELAssignOperationShScript(TemplatePlanContext templateContext,AbstractOperation operation,AbstractArtifactReference reference,AbstractImplementationArtifact ia,Map<AbstractParameter,Variable> inputMappings){
  String runShScriptString=""String_Node_Str"" + templateContext.getCSARFileName() + ""String_Node_Str""+ templateContext.getCSARFileName()+ ""String_Node_Str""+ reference.getReference()+ ""String_Node_Str""+ this.createDANamePathMapEnvVar(templateContext,ia);
  String runShScriptStringVarName=""String_Node_Str"" + templateContext.getIdForNames();
  String xpathQueryPrefix=""String_Node_Str"";
  String xpathQuerySuffix=""String_Node_Str"";
  for (  AbstractParameter parameter : operation.getInputParameters()) {
    Variable var=inputMappings.get(parameter);
    runShScriptString+=parameter.getName() + ""String_Node_Str"" + parameter.getName()+ ""String_Node_Str"";
    xpathQueryPrefix+=""String_Node_Str"";
    xpathQuerySuffix+=""String_Node_Str"" + parameter.getName() + ""String_Node_Str"";
    if (var == null) {
      xpathQuerySuffix+=""String_Node_Str"" + templateContext.getPlanRequestMessageName() + ""String_Node_Str""+ parameter.getName()+ ""String_Node_Str"";
    }
 else {
      xpathQuerySuffix+=""String_Node_Str"" + var.getName() + ""String_Node_Str"";
    }
  }
  runShScriptString+=""String_Node_Str"" + templateContext.getCSARFileName() + ""String_Node_Str""+ reference.getReference();
  String logFilePath=""String_Node_Str"" + templateContext.getCSARFileName() + ""String_Node_Str""+ templateContext.getTemplateBuildPlanName()+ ""String_Node_Str"";
  runShScriptString+=""String_Node_Str"" + logFilePath;
  runShScriptString+=""String_Node_Str"" + logFilePath;
  Variable runShScriptStringVar=templateContext.createGlobalStringVariable(runShScriptStringVarName,runShScriptString);
  try {
    String xpathQuery=xpathQueryPrefix + ""String_Node_Str"" + runShScriptStringVar.getName()+ xpathQuerySuffix;
    Node assignNode=this.loadAssignXpathQueryToStringVarFragmentAsNode(""String_Node_Str"",xpathQuery,runShScriptStringVar.getName());
    assignNode=templateContext.importNode(assignNode);
    templateContext.getProvisioningPhaseElement().appendChild(assignNode);
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
catch (  SAXException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return runShScriptStringVar;
}"
40992,"public boolean handle(TemplatePlanContext templateContext,AbstractOperation operation,AbstractImplementationArtifact ia,Map<AbstractParameter,Variable> param2propertyMapping){
  AbstractNodeTemplate infrastructureNodeTemplate=this.findInfrastructureNode(templateContext.getInfrastructureNodes());
  if (infrastructureNodeTemplate == null) {
    return false;
  }
  Variable runShScriptStringVar=null;
  AbstractArtifactReference scriptRef=this.fetchScriptRefFromIA(ia);
  if (scriptRef == null) {
    return false;
  }
  runShScriptStringVar=this.appendBPELAssignOperationShScript(templateContext,operation,scriptRef,ia);
  Variable ipStringVariable=null;
  for (  String serverIp : org.opentosca.model.tosca.conventions.Utils.getSupportedVirtualMachineIPPropertyNames()) {
    ipStringVariable=templateContext.getPropertyVariable(infrastructureNodeTemplate,serverIp);
    if (ipStringVariable == null) {
      ipStringVariable=templateContext.getPropertyVariable(serverIp,true);
      if (ipStringVariable == null) {
        ipStringVariable=templateContext.getPropertyVariable(serverIp,false);
      }
 else {
        break;
      }
    }
 else {
      break;
    }
  }
  Variable userStringVariable=null;
  for (  String vmUserName : org.opentosca.model.tosca.conventions.Utils.getSupportedVirtualMachineLoginUserNamePropertyNames()) {
    userStringVariable=templateContext.getPropertyVariable(infrastructureNodeTemplate,vmUserName);
    if (userStringVariable == null) {
      userStringVariable=templateContext.getPropertyVariable(vmUserName,true);
      if (userStringVariable == null) {
        userStringVariable=templateContext.getPropertyVariable(vmUserName,false);
      }
 else {
        break;
      }
    }
 else {
      break;
    }
  }
  Variable passwdStringVariable=null;
  for (  String vmUserPassword : org.opentosca.model.tosca.conventions.Utils.getSupportedVirtualMachineLoginPasswordPropertyNames()) {
    passwdStringVariable=templateContext.getPropertyVariable(infrastructureNodeTemplate,vmUserPassword);
    if (passwdStringVariable == null) {
      passwdStringVariable=templateContext.getPropertyVariable(vmUserPassword,true);
      if (passwdStringVariable == null) {
        passwdStringVariable=templateContext.getPropertyVariable(vmUserPassword,false);
      }
 else {
        break;
      }
    }
 else {
      break;
    }
  }
  if (this.isNull(runShScriptStringVar,ipStringVariable,userStringVariable,passwdStringVariable)) {
    return false;
  }
  Map<String,Variable> payloadVariableMapping=new HashMap<String,Variable>();
  for (  AbstractParameter param : param2propertyMapping.keySet()) {
    payloadVariableMapping.put(param.getName(),param2propertyMapping.get(param));
  }
  return this.appendExecuteScript(templateContext,infrastructureNodeTemplate.getId(),runShScriptStringVar,userStringVariable,passwdStringVariable,ipStringVariable,payloadVariableMapping);
}","public boolean handle(TemplatePlanContext templateContext,AbstractOperation operation,AbstractImplementationArtifact ia,Map<AbstractParameter,Variable> param2propertyMapping){
  if (operation.getInputParameters().size() != param2propertyMapping.size()) {
    return false;
  }
  AbstractNodeTemplate infrastructureNodeTemplate=this.findInfrastructureNode(templateContext.getInfrastructureNodes());
  if (infrastructureNodeTemplate == null) {
    return false;
  }
  Variable runShScriptStringVar=null;
  AbstractArtifactReference scriptRef=this.fetchScriptRefFromIA(ia);
  if (scriptRef == null) {
    return false;
  }
  runShScriptStringVar=this.appendBPELAssignOperationShScript(templateContext,operation,scriptRef,ia,param2propertyMapping);
  Variable ipStringVariable=null;
  for (  String serverIp : org.opentosca.model.tosca.conventions.Utils.getSupportedVirtualMachineIPPropertyNames()) {
    ipStringVariable=templateContext.getPropertyVariable(infrastructureNodeTemplate,serverIp);
    if (ipStringVariable == null) {
      ipStringVariable=templateContext.getPropertyVariable(serverIp,true);
      if (ipStringVariable == null) {
        ipStringVariable=templateContext.getPropertyVariable(serverIp,false);
      }
 else {
        break;
      }
    }
 else {
      break;
    }
  }
  Variable userStringVariable=null;
  for (  String vmUserName : org.opentosca.model.tosca.conventions.Utils.getSupportedVirtualMachineLoginUserNamePropertyNames()) {
    userStringVariable=templateContext.getPropertyVariable(infrastructureNodeTemplate,vmUserName);
    if (userStringVariable == null) {
      userStringVariable=templateContext.getPropertyVariable(vmUserName,true);
      if (userStringVariable == null) {
        userStringVariable=templateContext.getPropertyVariable(vmUserName,false);
      }
 else {
        break;
      }
    }
 else {
      break;
    }
  }
  Variable passwdStringVariable=null;
  for (  String vmUserPassword : org.opentosca.model.tosca.conventions.Utils.getSupportedVirtualMachineLoginPasswordPropertyNames()) {
    passwdStringVariable=templateContext.getPropertyVariable(infrastructureNodeTemplate,vmUserPassword);
    if (passwdStringVariable == null) {
      passwdStringVariable=templateContext.getPropertyVariable(vmUserPassword,true);
      if (passwdStringVariable == null) {
        passwdStringVariable=templateContext.getPropertyVariable(vmUserPassword,false);
      }
 else {
        break;
      }
    }
 else {
      break;
    }
  }
  if (this.isNull(runShScriptStringVar,ipStringVariable,userStringVariable,passwdStringVariable)) {
    return false;
  }
  return this.appendExecuteScript(templateContext,infrastructureNodeTemplate.getId(),runShScriptStringVar,userStringVariable,passwdStringVariable,ipStringVariable);
}"
40993,"/** 
 * Append logic for executing a script on a remote machine with the invoker plugin
 * @param templateContext the context with a bpel templateBuildPlan
 * @param templateId the id of the template inside the context
 * @param runShScriptStringVar the bpel variable containing the script call
 * @param sshUserVariable the user name for the remote machine as a bpel variable
 * @param sshKeyVariable the pass for the remote machine as a bpel variable
 * @param serverIpPropWrapper the ip of the remote machine as a bpel variable
 * @param runScriptRequestInputParams a mapping from parameter names to bpel variables
 * @return true if appending the bpel logic was successful else false
 */
private boolean appendExecuteScript(TemplatePlanContext templateContext,String templateId,Variable runShScriptStringVar,Variable sshUserVariable,Variable sshKeyVariable,Variable serverIpPropWrapper,Map<String,Variable> runScriptRequestInputParams){
  String cleanPropName=serverIpPropWrapper.getName().substring(serverIpPropWrapper.getName().lastIndexOf(""String_Node_Str"") + 1);
switch (cleanPropName) {
case Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_SERVERIP:
    runScriptRequestInputParams.put(""String_Node_Str"",serverIpPropWrapper);
  runScriptRequestInputParams.put(""String_Node_Str"",sshKeyVariable);
runScriptRequestInputParams.put(""String_Node_Str"",sshUserVariable);
runScriptRequestInputParams.put(""String_Node_Str"",runShScriptStringVar);
this.invokerPlugin.handle(templateContext,templateId,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runScriptRequestInputParams,new HashMap<String,Variable>(),false);
break;
case Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_VMIP:
case Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_RASPBIANIP:
runScriptRequestInputParams.put(""String_Node_Str"",serverIpPropWrapper);
runScriptRequestInputParams.put(""String_Node_Str"",sshKeyVariable);
runScriptRequestInputParams.put(""String_Node_Str"",sshUserVariable);
runScriptRequestInputParams.put(""String_Node_Str"",runShScriptStringVar);
this.invokerPlugin.handle(templateContext,templateId,true,""String_Node_Str"",Interfaces.OPENTOSCA_DECLARATIVE_INTERFACE_OPERATINGSYSTEM,""String_Node_Str"",runScriptRequestInputParams,new HashMap<String,Variable>(),false);
break;
default :
return false;
}
return true;
}","/** 
 * Append logic for executing a script on a remote machine with the invoker plugin
 * @param templateContext the context with a bpel templateBuildPlan
 * @param templateId the id of the template inside the context
 * @param runShScriptStringVar the bpel variable containing the script call
 * @param sshUserVariable the user name for the remote machine as a bpel variable
 * @param sshKeyVariable the pass for the remote machine as a bpel variable
 * @param serverIpPropWrapper the ip of the remote machine as a bpel variable
 * @return true if appending the bpel logic was successful else false
 */
private boolean appendExecuteScript(TemplatePlanContext templateContext,String templateId,Variable runShScriptStringVar,Variable sshUserVariable,Variable sshKeyVariable,Variable serverIpPropWrapper){
  Map<String,Variable> runScriptRequestInputParams=new HashMap<String,Variable>();
  String cleanPropName=serverIpPropWrapper.getName().substring(serverIpPropWrapper.getName().lastIndexOf(""String_Node_Str"") + 1);
switch (cleanPropName) {
case Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_SERVERIP:
    runScriptRequestInputParams.put(""String_Node_Str"",serverIpPropWrapper);
  runScriptRequestInputParams.put(""String_Node_Str"",sshKeyVariable);
runScriptRequestInputParams.put(""String_Node_Str"",sshUserVariable);
runScriptRequestInputParams.put(""String_Node_Str"",runShScriptStringVar);
this.invokerPlugin.handle(templateContext,templateId,true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",runScriptRequestInputParams,new HashMap<String,Variable>(),false);
break;
case Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_VMIP:
case Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_RASPBIANIP:
runScriptRequestInputParams.put(""String_Node_Str"",serverIpPropWrapper);
runScriptRequestInputParams.put(""String_Node_Str"",sshKeyVariable);
runScriptRequestInputParams.put(""String_Node_Str"",sshUserVariable);
runScriptRequestInputParams.put(""String_Node_Str"",runShScriptStringVar);
this.invokerPlugin.handle(templateContext,templateId,true,""String_Node_Str"",Interfaces.OPENTOSCA_DECLARATIVE_INTERFACE_OPERATINGSYSTEM,""String_Node_Str"",runScriptRequestInputParams,new HashMap<String,Variable>(),false);
break;
default :
return false;
}
return true;
}"
40994,"/** 
 * {@inheritDoc}
 */
@Override public boolean handle(TemplatePlanContext templateContext){
  AbstractNodeTemplate nodeTemplate=templateContext.getNodeTemplate();
  if (nodeTemplate == null) {
    return false;
  }
  if (Utils.isSupportedVMNodeType(nodeTemplate.getType().getId())) {
    return true;
  }
  if (Utils.isSupportedInfrastructureNodeType(nodeTemplate.getType().getId())) {
    return true;
  }
  if (Utils.isSupportedCloudProviderNodeType(nodeTemplate.getType().getId())) {
    if (nodeTemplate.getType().getId().equals(Types.openStackLiberty12NodeType) | nodeTemplate.getType().getId().equals(Types.vmWareVsphere55NodeType)) {
      return this.handler.handleWithCloudProviderInterface(templateContext,nodeTemplate);
    }
 else {
      return this.handler.handle(templateContext,nodeTemplate);
    }
  }
 else {
    return false;
  }
}","/** 
 * {@inheritDoc}
 */
@Override public boolean handle(TemplatePlanContext templateContext){
  AbstractNodeTemplate nodeTemplate=templateContext.getNodeTemplate();
  if (nodeTemplate == null) {
    return false;
  }
  LOG.debug(""String_Node_Str"" + nodeTemplate.getId() + ""String_Node_Str"");
  if (Utils.isSupportedCloudProviderNodeType(nodeTemplate.getType().getId())) {
    return true;
  }
  if (Utils.isSupportedVMNodeType(nodeTemplate.getType().getId()) | Utils.isSupportedInfrastructureNodeType(nodeTemplate.getType().getId())) {
    for (    AbstractRelationshipTemplate relation : nodeTemplate.getOutgoingRelations()) {
      if (Utils.isSupportedCloudProviderNodeType(relation.getTarget().getType().getId())) {
        if (relation.getTarget().getType().getId().equals(Types.openStackLiberty12NodeType) | relation.getTarget().getType().getId().equals(Types.vmWareVsphere55NodeType)) {
          return this.handler.handleWithCloudProviderInterface(templateContext,nodeTemplate);
        }
 else {
          return this.handler.handle(templateContext,nodeTemplate);
        }
      }
    }
    return true;
  }
  return false;
}"
40995,"public boolean handleWithCloudProviderInterface(TemplatePlanContext context,AbstractNodeTemplate nodeTemplate){
  AbstractNodeTemplate ubuntuNodeTemplate=this.findUbuntuNode(nodeTemplate);
  Variable ubuntuAMIIdVar=null;
  if (ubuntuNodeTemplate == null) {
    LOG.error(""String_Node_Str"");
    return false;
  }
  if (this.isUbuntuNodeTypeWithImplicitImage(ubuntuNodeTemplate.getType().getId())) {
    ubuntuAMIIdVar=context.createGlobalStringVariable(""String_Node_Str"",this.createUbuntuImageStringFromNodeType(ubuntuNodeTemplate.getType().getId()));
  }
  LOG.debug(""String_Node_Str"" + ubuntuNodeTemplate.getId() + ""String_Node_Str""+ ubuntuNodeTemplate.getType().getId().toString());
  Variable instanceIdPropWrapper=null;
  for (  String instanceIdName : org.opentosca.model.tosca.conventions.Utils.getSupportedVirtualMachineInstanceIdPropertyNames()) {
    instanceIdPropWrapper=context.getPropertyVariable(ubuntuNodeTemplate,instanceIdName);
    if (instanceIdPropWrapper == null) {
      instanceIdPropWrapper=context.getPropertyVariable(instanceIdName,true);
    }
 else {
      break;
    }
  }
  if (instanceIdPropWrapper == null) {
    Handler.LOG.warn(""String_Node_Str"");
    return false;
  }
  Variable serverIpPropWrapper=null;
  for (  String vmIpName : org.opentosca.model.tosca.conventions.Utils.getSupportedVirtualMachineIPPropertyNames()) {
    serverIpPropWrapper=context.getPropertyVariable(ubuntuNodeTemplate,vmIpName);
    if (serverIpPropWrapper == null) {
      serverIpPropWrapper=context.getPropertyVariable(vmIpName,true);
    }
 else {
      break;
    }
  }
  if (serverIpPropWrapper == null) {
    Handler.LOG.warn(""String_Node_Str"");
    return false;
  }
  Variable sshUserVariable=null;
  for (  String userName : org.opentosca.model.tosca.conventions.Utils.getSupportedVirtualMachineLoginUserNamePropertyNames()) {
    sshUserVariable=context.getPropertyVariable(ubuntuNodeTemplate,userName);
    if (sshUserVariable == null) {
      sshUserVariable=context.getPropertyVariable(userName,true);
    }
 else {
      break;
    }
  }
  if (sshUserVariable == null) {
    return false;
  }
 else {
    if (Utils.isVariableValueEmpty(sshUserVariable,context)) {
      LOG.debug(""String_Node_Str"");
      context.addStringValueToPlanRequest(Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_VMLOGINNAME);
      context.addAssignFromInput2VariableToMainAssign(Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_VMLOGINNAME,sshUserVariable);
      sshUserVariable=null;
    }
  }
  Variable sshKeyVariable=null;
  for (  String passwordName : org.opentosca.model.tosca.conventions.Utils.getSupportedVirtualMachineLoginPasswordPropertyNames()) {
    sshKeyVariable=context.getPropertyVariable(ubuntuNodeTemplate,passwordName);
    if (sshKeyVariable == null) {
      sshKeyVariable=context.getPropertyVariable(passwordName,true);
    }
 else {
      break;
    }
  }
  if (sshKeyVariable == null) {
    return false;
  }
 else {
    if (Utils.isVariableValueEmpty(sshKeyVariable,context)) {
      LOG.debug(""String_Node_Str"");
      context.addStringValueToPlanRequest(Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_VMLOGINPASSWORD);
      context.addAssignFromInput2VariableToMainAssign(Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_VMLOGINPASSWORD,sshKeyVariable);
      sshKeyVariable=null;
    }
  }
  LOG.debug(""String_Node_Str"");
  context.addStringValueToPlanRequest(""String_Node_Str"");
  LOG.debug(""String_Node_Str"");
  context.addStringValueToPlanRequest(""String_Node_Str"");
  Map<String,Variable> createEC2InternalExternalPropsInput=new HashMap<String,Variable>();
  for (  String externalParameter : Handler.createVMInstanceExternalInputParams) {
    Variable variable=context.getPropertyVariable(ubuntuNodeTemplate,externalParameter);
    if (variable == null) {
      variable=context.getPropertyVariable(externalParameter,true);
    }
    if (externalParameter.equals(""String_Node_Str"") && ubuntuAMIIdVar != null) {
      createEC2InternalExternalPropsInput.put(externalParameter,ubuntuAMIIdVar);
      continue;
    }
    if (variable == null) {
      Handler.LOG.warn(""String_Node_Str"" + externalParameter);
      return false;
    }
 else {
      Handler.LOG.debug(""String_Node_Str"" + externalParameter);
    }
    if (Utils.isVariableValueEmpty(variable,context)) {
      Handler.LOG.debug(""String_Node_Str"");
      createEC2InternalExternalPropsInput.put(externalParameter,null);
    }
 else {
      createEC2InternalExternalPropsInput.put(externalParameter,variable);
    }
  }
  Map<String,Variable> createEC2InternalExternalPropsOutput=new HashMap<String,Variable>();
  createEC2InternalExternalPropsOutput.put(Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_VMINSTANCEID,instanceIdPropWrapper);
  createEC2InternalExternalPropsOutput.put(Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_VMIP,serverIpPropWrapper);
  context.addStringValueToPlanRequest(""String_Node_Str"");
  this.invokerOpPlugin.handle(context,Interfaces.OPENTOSCA_DECLARATIVE_INTERFACE_CLOUDPROVIDER_CREATEVM,Interfaces.OPENTOSCA_DECLARATIVE_INTERFACE_CLOUDPROVIDER,""String_Node_Str"",createEC2InternalExternalPropsInput,createEC2InternalExternalPropsOutput);
  Map<String,Variable> startRequestInputParams=new HashMap<String,Variable>();
  Map<String,Variable> startRequestOutputParams=new HashMap<String,Variable>();
  startRequestInputParams.put(""String_Node_Str"",serverIpPropWrapper);
  startRequestInputParams.put(""String_Node_Str"",sshUserVariable);
  startRequestInputParams.put(""String_Node_Str"",sshKeyVariable);
  startRequestOutputParams.put(""String_Node_Str"",context.createGlobalStringVariable(""String_Node_Str"",""String_Node_Str""));
  this.invokerOpPlugin.handle(context,ubuntuNodeTemplate.getId(),true,Interfaces.OPENTOSCA_DECLARATIVE_INTERFACE_OPERATINGSYSTEM_WAITFORAVAIL,Interfaces.OPENTOSCA_DECLARATIVE_INTERFACE_OPERATINGSYSTEM,""String_Node_Str"",startRequestInputParams,startRequestOutputParams,false);
  return true;
}","public boolean handleWithCloudProviderInterface(TemplatePlanContext context,AbstractNodeTemplate nodeTemplate){
  AbstractNodeTemplate cloudProviderNodeTemplate=this.findCloudProviderNode(nodeTemplate);
  if (cloudProviderNodeTemplate == null) {
    return false;
  }
  AbstractNodeTemplate ubuntuNodeTemplate=this.findUbuntuNode(nodeTemplate);
  Variable ubuntuAMIIdVar=null;
  if (ubuntuNodeTemplate == null) {
    LOG.error(""String_Node_Str"");
    return false;
  }
  if (this.isUbuntuNodeTypeWithImplicitImage(ubuntuNodeTemplate.getType().getId())) {
    ubuntuAMIIdVar=context.createGlobalStringVariable(""String_Node_Str"",this.createUbuntuImageStringFromNodeType(ubuntuNodeTemplate.getType().getId()));
  }
  LOG.debug(""String_Node_Str"" + ubuntuNodeTemplate.getId() + ""String_Node_Str""+ ubuntuNodeTemplate.getType().getId().toString());
  Variable instanceIdPropWrapper=null;
  for (  String instanceIdName : org.opentosca.model.tosca.conventions.Utils.getSupportedVirtualMachineInstanceIdPropertyNames()) {
    instanceIdPropWrapper=context.getPropertyVariable(ubuntuNodeTemplate,instanceIdName);
    if (instanceIdPropWrapper == null) {
      instanceIdPropWrapper=context.getPropertyVariable(instanceIdName,true);
    }
 else {
      break;
    }
  }
  if (instanceIdPropWrapper == null) {
    Handler.LOG.warn(""String_Node_Str"");
    return false;
  }
  Variable serverIpPropWrapper=null;
  for (  String vmIpName : org.opentosca.model.tosca.conventions.Utils.getSupportedVirtualMachineIPPropertyNames()) {
    serverIpPropWrapper=context.getPropertyVariable(ubuntuNodeTemplate,vmIpName);
    if (serverIpPropWrapper == null) {
      serverIpPropWrapper=context.getPropertyVariable(vmIpName,true);
    }
 else {
      break;
    }
  }
  if (serverIpPropWrapper == null) {
    Handler.LOG.warn(""String_Node_Str"");
    return false;
  }
  Variable sshUserVariable=null;
  for (  String userName : org.opentosca.model.tosca.conventions.Utils.getSupportedVirtualMachineLoginUserNamePropertyNames()) {
    sshUserVariable=context.getPropertyVariable(ubuntuNodeTemplate,userName);
    if (sshUserVariable == null) {
      sshUserVariable=context.getPropertyVariable(userName,true);
    }
 else {
      break;
    }
  }
  if (sshUserVariable == null) {
    return false;
  }
 else {
    if (Utils.isVariableValueEmpty(sshUserVariable,context)) {
      LOG.debug(""String_Node_Str"");
      context.addStringValueToPlanRequest(Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_VMLOGINNAME);
      context.addAssignFromInput2VariableToMainAssign(Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_VMLOGINNAME,sshUserVariable);
      sshUserVariable=null;
    }
  }
  Variable sshKeyVariable=null;
  for (  String passwordName : org.opentosca.model.tosca.conventions.Utils.getSupportedVirtualMachineLoginPasswordPropertyNames()) {
    sshKeyVariable=context.getPropertyVariable(ubuntuNodeTemplate,passwordName);
    if (sshKeyVariable == null) {
      sshKeyVariable=context.getPropertyVariable(passwordName,true);
    }
 else {
      break;
    }
  }
  if (sshKeyVariable == null) {
    return false;
  }
 else {
    if (Utils.isVariableValueEmpty(sshKeyVariable,context)) {
      LOG.debug(""String_Node_Str"");
      context.addStringValueToPlanRequest(Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_VMLOGINPASSWORD);
      context.addAssignFromInput2VariableToMainAssign(Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_VMLOGINPASSWORD,sshKeyVariable);
      sshKeyVariable=null;
    }
  }
  LOG.debug(""String_Node_Str"");
  context.addStringValueToPlanRequest(""String_Node_Str"");
  LOG.debug(""String_Node_Str"");
  context.addStringValueToPlanRequest(""String_Node_Str"");
  Map<String,Variable> createEC2InternalExternalPropsInput=new HashMap<String,Variable>();
  for (  String externalParameter : Handler.createVMInstanceExternalInputParams) {
    Variable variable=context.getPropertyVariable(ubuntuNodeTemplate,externalParameter);
    if (variable == null) {
      variable=context.getPropertyVariable(externalParameter,true);
    }
    if (externalParameter.equals(""String_Node_Str"") && ubuntuAMIIdVar != null) {
      createEC2InternalExternalPropsInput.put(externalParameter,ubuntuAMIIdVar);
      continue;
    }
    if (variable == null) {
      Handler.LOG.warn(""String_Node_Str"" + externalParameter);
      return false;
    }
 else {
      Handler.LOG.debug(""String_Node_Str"" + externalParameter);
    }
    if (Utils.isVariableValueEmpty(variable,context)) {
      Handler.LOG.debug(""String_Node_Str"");
      createEC2InternalExternalPropsInput.put(externalParameter,null);
    }
 else {
      createEC2InternalExternalPropsInput.put(externalParameter,variable);
    }
  }
  Map<String,Variable> createEC2InternalExternalPropsOutput=new HashMap<String,Variable>();
  createEC2InternalExternalPropsOutput.put(Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_VMINSTANCEID,instanceIdPropWrapper);
  createEC2InternalExternalPropsOutput.put(Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_VMIP,serverIpPropWrapper);
  context.addStringValueToPlanRequest(""String_Node_Str"");
  this.invokerOpPlugin.handle(context,cloudProviderNodeTemplate.getId(),true,Interfaces.OPENTOSCA_DECLARATIVE_INTERFACE_CLOUDPROVIDER_CREATEVM,Interfaces.OPENTOSCA_DECLARATIVE_INTERFACE_CLOUDPROVIDER,""String_Node_Str"",createEC2InternalExternalPropsInput,createEC2InternalExternalPropsOutput,false);
  Map<String,Variable> startRequestInputParams=new HashMap<String,Variable>();
  Map<String,Variable> startRequestOutputParams=new HashMap<String,Variable>();
  startRequestInputParams.put(""String_Node_Str"",serverIpPropWrapper);
  startRequestInputParams.put(""String_Node_Str"",sshUserVariable);
  startRequestInputParams.put(""String_Node_Str"",sshKeyVariable);
  startRequestOutputParams.put(""String_Node_Str"",context.createGlobalStringVariable(""String_Node_Str"",""String_Node_Str""));
  this.invokerOpPlugin.handle(context,ubuntuNodeTemplate.getId(),true,Interfaces.OPENTOSCA_DECLARATIVE_INTERFACE_OPERATINGSYSTEM_WAITFORAVAIL,Interfaces.OPENTOSCA_DECLARATIVE_INTERFACE_OPERATINGSYSTEM,""String_Node_Str"",startRequestInputParams,startRequestOutputParams,false);
  return true;
}"
40996,"/** 
 * Search from the given NodeTemplate for an Ubuntu NodeTemplate
 * @param nodeTemplate an AbstractNodeTemplate
 * @return an Ubuntu NodeTemplate, may be null
 */
private AbstractNodeTemplate findUbuntuNode(AbstractNodeTemplate nodeTemplate){
  for (  AbstractRelationshipTemplate relationTemplate : nodeTemplate.getIngoingRelations()) {
    if (org.opentosca.model.tosca.conventions.Utils.isSupportedInfrastructureNodeType(relationTemplate.getSource().getType().getId())) {
      return relationTemplate.getSource();
    }
    for (    AbstractRelationshipTemplate relationTemplate2 : relationTemplate.getSource().getIngoingRelations()) {
      if (org.opentosca.model.tosca.conventions.Utils.isSupportedInfrastructureNodeType(relationTemplate2.getSource().getType().getId())) {
        return relationTemplate2.getSource();
      }
    }
  }
  return null;
}","/** 
 * Search from the given NodeTemplate for an Ubuntu NodeTemplate
 * @param nodeTemplate an AbstractNodeTemplate
 * @return an Ubuntu NodeTemplate, may be null
 */
private AbstractNodeTemplate findUbuntuNode(AbstractNodeTemplate nodeTemplate){
  if (org.opentosca.model.tosca.conventions.Utils.isSupportedInfrastructureNodeType(nodeTemplate.getType().getId())) {
    return nodeTemplate;
  }
  for (  AbstractRelationshipTemplate relationTemplate : nodeTemplate.getIngoingRelations()) {
    if (org.opentosca.model.tosca.conventions.Utils.isSupportedInfrastructureNodeType(relationTemplate.getSource().getType().getId())) {
      return relationTemplate.getSource();
    }
    for (    AbstractRelationshipTemplate relationTemplate2 : relationTemplate.getSource().getIngoingRelations()) {
      if (org.opentosca.model.tosca.conventions.Utils.isSupportedInfrastructureNodeType(relationTemplate2.getSource().getType().getId())) {
        return relationTemplate2.getSource();
      }
    }
  }
  return null;
}"
40997,"/** 
 * Creates a string representing an ubuntu image id on a cloud provider
 * @param nodeType a QName of an Ubuntu ImplicitImage NodeType
 * @return a String containing an ubuntuImageId, if given QName is notpresenting an Ubuntu image then null
 */
private String createUbuntuImageStringFromNodeType(QName nodeType){
  if (!PluginUtils.isSupportedUbuntuVMNodeType(nodeType)) {
    return null;
  }
  String localName=nodeType.getLocalPart();
  String[] dotSplit=localName.split(""String_Node_Str"");
  if (dotSplit.length != 2) {
    return null;
  }
  String[] leftDashSplit=dotSplit[0].split(""String_Node_Str"");
  String[] rightDashSplit=dotSplit[1].split(""String_Node_Str"");
  if (leftDashSplit.length != 2 && rightDashSplit.length != 2) {
    return null;
  }
  if (!leftDashSplit[0].equals(""String_Node_Str"")) {
    return null;
  }
  int majorVers;
  try {
    majorVers=Integer.parseInt(leftDashSplit[1]);
  }
 catch (  NumberFormatException e) {
    return null;
  }
  if (!rightDashSplit[1].equals(""String_Node_Str"")) {
    return null;
  }
  int minorVers;
  try {
    minorVers=Integer.parseInt(rightDashSplit[0]);
  }
 catch (  NumberFormatException e) {
    return null;
  }
  String ubuntuAMIId=""String_Node_Str"" + majorVers + ""String_Node_Str""+ minorVers+ ""String_Node_Str"";
  return ubuntuAMIId;
}","/** 
 * Creates a string representing an ubuntu image id on a cloud provider
 * @param nodeType a QName of an Ubuntu ImplicitImage NodeType
 * @return a String containing an ubuntuImageId, if given QName is notpresenting an Ubuntu image then null
 */
private String createUbuntuImageStringFromNodeType(QName nodeType){
  if (!PluginUtils.isSupportedUbuntuVMNodeType(nodeType)) {
    return null;
  }
  String localName=nodeType.getLocalPart();
  String[] dotSplit=localName.split(""String_Node_Str"");
  if (dotSplit.length != 2) {
    return null;
  }
  String[] leftDashSplit=dotSplit[0].split(""String_Node_Str"");
  String[] rightDashSplit=dotSplit[1].split(""String_Node_Str"");
  if (leftDashSplit.length != 2 && rightDashSplit.length != 2) {
    return null;
  }
  if (!leftDashSplit[0].equals(""String_Node_Str"")) {
    return null;
  }
  int majorVers;
  try {
    majorVers=Integer.parseInt(leftDashSplit[1]);
  }
 catch (  NumberFormatException e) {
    return null;
  }
  if (!rightDashSplit[1].equals(""String_Node_Str"")) {
    return null;
  }
  int minorVers;
  String minorVersString;
  try {
    minorVers=Integer.parseInt(rightDashSplit[0]);
    minorVersString=String.valueOf(minorVers).trim();
    if (minorVersString.length() != 2) {
      minorVersString=""String_Node_Str"" + minorVersString;
    }
  }
 catch (  NumberFormatException e) {
    return null;
  }
  String ubuntuAMIId=""String_Node_Str"" + majorVers + ""String_Node_Str""+ minorVersString+ ""String_Node_Str"";
  return ubuntuAMIId;
}"
40998,"/** 
 * {@inheritDoc}
 */
@Override public boolean handle(TemplatePlanContext templateContext){
  AbstractNodeTemplate nodeTemplate=templateContext.getNodeTemplate();
  if (nodeTemplate == null) {
    return false;
  }
  if (PluginUtils.isSupportedVMNodeType(nodeTemplate.getType().getId())) {
    return true;
  }
  if (PluginUtils.isSupportedUbuntuVMNodeType(nodeTemplate.getType().getId())) {
    return true;
  }
  if (PluginUtils.isSupportedCloudProviderNodeType(nodeTemplate.getType().getId())) {
    return this.handler.handle(templateContext,nodeTemplate);
  }
 else {
    return false;
  }
}","/** 
 * {@inheritDoc}
 */
@Override public boolean handle(TemplatePlanContext templateContext){
  AbstractNodeTemplate nodeTemplate=templateContext.getNodeTemplate();
  if (nodeTemplate == null) {
    return false;
  }
  if (PluginUtils.isSupportedVMNodeType(nodeTemplate.getType().getId())) {
    return true;
  }
  if (PluginUtils.isSupportedUbuntuVMNodeType(nodeTemplate.getType().getId())) {
    return true;
  }
  if (PluginUtils.isSupportedCloudProviderNodeType(nodeTemplate.getType().getId())) {
    if (nodeTemplate.getType().getId().equals(Types.openStackLiberty12NodeType)) {
      return this.handler.handleOpenStackLiberty12WithUbuntu1404(templateContext,nodeTemplate);
    }
 else {
      return this.handler.handle(templateContext,nodeTemplate);
    }
  }
 else {
    return false;
  }
}"
40999,"/** 
 * Creates a string representing an ubuntu image id on a cloud provider
 * @param nodeType a QName of an Ubuntu ImplicitImage NodeType
 * @return a String containing an ubuntuImageId, if given QName is notpresenting an Ubuntu image then null
 */
private String createUbuntuImageStringFromNodeType(QName nodeType){
  if (!PluginUtils.isSupportedUbuntuVMNodeType(nodeType)) {
    return null;
  }
  String localName=nodeType.getLocalPart();
  String[] dotSplit=localName.split(""String_Node_Str"");
  if (dotSplit.length != 2) {
    return null;
  }
  String[] leftDashSplit=dotSplit[0].split(""String_Node_Str"");
  String[] rightDashSplit=dotSplit[1].split(""String_Node_Str"");
  if (leftDashSplit.length != 2 && rightDashSplit.length != 2) {
    return null;
  }
  if (!leftDashSplit[0].equals(""String_Node_Str"")) {
    return null;
  }
  int majorVers;
  try {
    majorVers=Integer.parseInt(leftDashSplit[1]);
  }
 catch (  NumberFormatException e) {
    return null;
  }
  if (!rightDashSplit[1].equals(""String_Node_Str"")) {
    return null;
  }
  int minorVers;
  String minorVersString;
  try {
    minorVers=Integer.parseInt(rightDashSplit[0]);
    minorVersString=String.valueOf(minorVers).trim();
    if (minorVersString.length() != 2) {
      minorVersString=""String_Node_Str"" + minorVersString;
    }
  }
 catch (  NumberFormatException e) {
    return null;
  }
  String ubuntuAMIId=""String_Node_Str"" + majorVers + ""String_Node_Str""+ minorVersString+ ""String_Node_Str"";
  return ubuntuAMIId;
}","/** 
 * Creates a string representing an ubuntu image id on a cloud provider
 * @param nodeType a QName of an Ubuntu ImplicitImage NodeType
 * @return a String containing an ubuntuImageId, if given QName is notpresenting an Ubuntu image then null
 */
private String createUbuntuImageStringFromNodeType(QName nodeType){
  if (!PluginUtils.isSupportedUbuntuVMNodeType(nodeType)) {
    return null;
  }
  String localName=nodeType.getLocalPart();
  String[] dotSplit=localName.split(""String_Node_Str"");
  if (dotSplit.length != 2) {
    return null;
  }
  String[] leftDashSplit=dotSplit[0].split(""String_Node_Str"");
  String[] rightDashSplit=dotSplit[1].split(""String_Node_Str"");
  if (leftDashSplit.length != 2 && rightDashSplit.length != 2) {
    return null;
  }
  if (!leftDashSplit[0].equals(""String_Node_Str"")) {
    return null;
  }
  int majorVers;
  try {
    majorVers=Integer.parseInt(leftDashSplit[1]);
  }
 catch (  NumberFormatException e) {
    return null;
  }
  if (!rightDashSplit[1].equals(""String_Node_Str"") & !rightDashSplit[1].equals(""String_Node_Str"")) {
    return null;
  }
  int minorVers;
  String minorVersString;
  try {
    minorVers=Integer.parseInt(rightDashSplit[0]);
    minorVersString=String.valueOf(minorVers).trim();
    if (minorVersString.length() != 2) {
      minorVersString=""String_Node_Str"" + minorVersString;
    }
  }
 catch (  NumberFormatException e) {
    return null;
  }
  String ubuntuAMIId=""String_Node_Str"" + majorVers + ""String_Node_Str""+ minorVersString+ ""String_Node_Str"";
  return ubuntuAMIId;
}"
41000,"/** 
 * Adds necessary BPEL logic through the given Context, to deploy the given ArtifactReferences unto the specified InfrastructureNode
 * @param context a TemplateContext
 * @param refs the ArtifactReferences to deploy
 * @param artifactName the name of the artifact, where the references originate from
 * @param nodeTemplate a NodeTemplate which is a InfrastructureNode to deploy the AbstractReferences on
 * @return true iff adding the logic was successful
 */
private boolean handle(TemplatePlanContext templateContext,List<AbstractArtifactReference> refs,String artifactName,AbstractNodeTemplate nodeTemplate){
  Variable serverIpPropWrapper=null;
  for (  String serverIpName : PluginUtils.getSupportedVirtualMachineIPPropertyNames()) {
    serverIpPropWrapper=templateContext.getPropertyVariable(serverIpName);
    if (serverIpPropWrapper == null) {
      serverIpPropWrapper=templateContext.getPropertyVariable(serverIpName,true);
      if (serverIpPropWrapper == null) {
        serverIpPropWrapper=templateContext.getPropertyVariable(serverIpName,false);
      }
    }
  }
  if (serverIpPropWrapper == null) {
    Handler.LOG.warn(""String_Node_Str"");
    return false;
  }
  Variable sshUserVariable=null;
  for (  String vmLoginName : PluginUtils.getSupportedVirtualMachineLoginUserNamePropertyNames()) {
    sshUserVariable=templateContext.getPropertyVariable(vmLoginName);
    if (sshUserVariable == null) {
      sshUserVariable=templateContext.getPropertyVariable(vmLoginName,true);
      if (sshUserVariable == null) {
        sshUserVariable=templateContext.getPropertyVariable(vmLoginName,false);
      }
    }
  }
  if (sshUserVariable == null) {
    return false;
  }
 else {
    if (Utils.isVariableValueEmpty(sshUserVariable,templateContext)) {
      sshUserVariable=null;
    }
  }
  Variable sshKeyVariable=null;
  for (  String vmLoginPassword : PluginUtils.getSupportedVirtualMachineLoginPasswordPropertyNames()) {
    sshKeyVariable=templateContext.getPropertyVariable(vmLoginPassword);
    if (sshKeyVariable == null) {
      sshKeyVariable=templateContext.getPropertyVariable(vmLoginPassword,true);
      if (sshKeyVariable == null) {
        sshKeyVariable=templateContext.getPropertyVariable(vmLoginPassword,false);
      }
    }
  }
  if (sshKeyVariable == null) {
    return false;
  }
 else {
    if (Utils.isVariableValueEmpty(sshKeyVariable,templateContext)) {
      sshKeyVariable=null;
    }
  }
  if (sshUserVariable == null) {
    String cleanName=serverIpPropWrapper.getName().substring(serverIpPropWrapper.getName().lastIndexOf(""String_Node_Str"") + 1);
switch (cleanName) {
case Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_SERVERIP:
      LOG.debug(""String_Node_Str"");
    templateContext.addStringValueToPlanRequest(""String_Node_Str"");
  break;
case Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_VMIP:
LOG.debug(""String_Node_Str"");
templateContext.addStringValueToPlanRequest(Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_VMLOGINNAME);
break;
default :
return false;
}
}
if (sshKeyVariable == null) {
LOG.debug(""String_Node_Str"");
String cleanName=serverIpPropWrapper.getName().substring(serverIpPropWrapper.getName().lastIndexOf(""String_Node_Str"") + 1);
switch (cleanName) {
case Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_SERVERIP:
LOG.debug(""String_Node_Str"");
templateContext.addStringValueToPlanRequest(""String_Node_Str"");
break;
case Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_VMIP:
templateContext.addStringValueToPlanRequest(Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_VMLOGINPASSWORD);
break;
default :
return false;
}
}
String templateId=nodeTemplate.getId();
if (templateId.equals(""String_Node_Str"")) {
Handler.LOG.warn(""String_Node_Str"");
return false;
}
LOG.debug(""String_Node_Str"");
templateContext.addStringValueToPlanRequest(""String_Node_Str"");
LOG.debug(""String_Node_Str"");
templateContext.addStringValueToPlanRequest(""String_Node_Str"");
LOG.debug(""String_Node_Str"");
for (AbstractArtifactReference ref : refs) {
this.invokerPlugin.handleArtifactReferenceUpload(ref,templateContext,serverIpPropWrapper,sshUserVariable,sshKeyVariable,templateId);
}
return true;
}","/** 
 * Adds necessary BPEL logic through the given Context, to deploy the given ArtifactReferences unto the specified InfrastructureNode
 * @param context a TemplateContext
 * @param refs the ArtifactReferences to deploy
 * @param artifactName the name of the artifact, where the references originate from
 * @param nodeTemplate a NodeTemplate which is a InfrastructureNode to deploy the AbstractReferences on
 * @return true iff adding the logic was successful
 */
private boolean handle(TemplatePlanContext templateContext,List<AbstractArtifactReference> refs,String artifactName,AbstractNodeTemplate nodeTemplate){
  Variable serverIpPropWrapper=null;
  for (  String serverIpName : PluginUtils.getSupportedVirtualMachineIPPropertyNames()) {
    serverIpPropWrapper=templateContext.getPropertyVariable(nodeTemplate,serverIpName);
    if (serverIpPropWrapper == null) {
      serverIpPropWrapper=templateContext.getPropertyVariable(serverIpName,true);
      if (serverIpPropWrapper == null) {
        serverIpPropWrapper=templateContext.getPropertyVariable(serverIpName,false);
      }
    }
  }
  if (serverIpPropWrapper == null) {
    Handler.LOG.warn(""String_Node_Str"");
    return false;
  }
  Variable sshUserVariable=null;
  for (  String vmLoginName : PluginUtils.getSupportedVirtualMachineLoginUserNamePropertyNames()) {
    sshUserVariable=templateContext.getPropertyVariable(nodeTemplate,vmLoginName);
    if (sshUserVariable == null) {
      sshUserVariable=templateContext.getPropertyVariable(vmLoginName,true);
      if (sshUserVariable == null) {
        sshUserVariable=templateContext.getPropertyVariable(vmLoginName,false);
      }
    }
  }
  if (sshUserVariable == null) {
    return false;
  }
 else {
    if (Utils.isVariableValueEmpty(sshUserVariable,templateContext)) {
      sshUserVariable=null;
    }
  }
  Variable sshKeyVariable=null;
  for (  String vmLoginPassword : PluginUtils.getSupportedVirtualMachineLoginPasswordPropertyNames()) {
    sshKeyVariable=templateContext.getPropertyVariable(nodeTemplate,vmLoginPassword);
    if (sshKeyVariable == null) {
      sshKeyVariable=templateContext.getPropertyVariable(vmLoginPassword,true);
      if (sshKeyVariable == null) {
        sshKeyVariable=templateContext.getPropertyVariable(vmLoginPassword,false);
      }
    }
  }
  if (sshKeyVariable == null) {
    return false;
  }
 else {
    if (Utils.isVariableValueEmpty(sshKeyVariable,templateContext)) {
      sshKeyVariable=null;
    }
  }
  if (sshUserVariable == null) {
    String cleanName=serverIpPropWrapper.getName().substring(serverIpPropWrapper.getName().lastIndexOf(""String_Node_Str"") + 1);
switch (cleanName) {
case Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_SERVERIP:
      LOG.debug(""String_Node_Str"");
    templateContext.addStringValueToPlanRequest(""String_Node_Str"");
  break;
case Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_VMIP:
LOG.debug(""String_Node_Str"");
templateContext.addStringValueToPlanRequest(Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_VMLOGINNAME);
break;
default :
return false;
}
}
if (sshKeyVariable == null) {
LOG.debug(""String_Node_Str"");
String cleanName=serverIpPropWrapper.getName().substring(serverIpPropWrapper.getName().lastIndexOf(""String_Node_Str"") + 1);
switch (cleanName) {
case Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_SERVERIP:
LOG.debug(""String_Node_Str"");
templateContext.addStringValueToPlanRequest(""String_Node_Str"");
break;
case Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_VMIP:
templateContext.addStringValueToPlanRequest(Properties.OPENTOSCA_DECLARATIVE_PROPERTYNAME_VMLOGINPASSWORD);
break;
default :
return false;
}
}
String templateId=nodeTemplate.getId();
if (templateId.equals(""String_Node_Str"")) {
Handler.LOG.warn(""String_Node_Str"");
return false;
}
LOG.debug(""String_Node_Str"");
templateContext.addStringValueToPlanRequest(""String_Node_Str"");
LOG.debug(""String_Node_Str"");
templateContext.addStringValueToPlanRequest(""String_Node_Str"");
LOG.debug(""String_Node_Str"");
for (AbstractArtifactReference ref : refs) {
this.invokerPlugin.handleArtifactReferenceUpload(ref,templateContext,serverIpPropWrapper,sshUserVariable,sshKeyVariable,templateId);
}
return true;
}"
