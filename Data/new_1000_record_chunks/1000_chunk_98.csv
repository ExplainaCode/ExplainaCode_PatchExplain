record_number,buggy_code,fixed_code
97001,"/** 
 * Prepares this Entity2D for a new frame. This method is not meant to be called by the user and is called by the SceneGraph.
 * @param delta The delta time.
 */
public void preUpdate(float delta){
  update(delta);
  if (velocity == Vector2.ZERO)   return;
  position=position.add(velocity);
  polygon.setPosition(position);
  getLocalTransform().reset().rotate(Vector3.AXIS_Z,polygon.getRotation()).translate(position);
}","/** 
 * Prepares this Entity2D for a new frame. This method is not meant to be called by the user and is called by the SceneGraph.
 * @param delta The delta time.
 */
public void preUpdate(float delta){
  update(delta);
  if (velocity == Vector2.ZERO)   return;
  position=position.add(velocity);
  polygon.setPosition(position);
  getLocalTransform().reset().translate(getPosition().subtract(getCenter())).rotate(Vector3.AXIS_Z,polygon.getRotation()).translate(getCenter());
}"
97002,"public void drawTexture2d(Texture texture,Vector2 p,Color color){
  Texture current=Texture.CURRENT;
  flush();
  texture.bind();
{
    vertex(p.getX(),p.getY(),0,1);
    color(color);
    texCoord(texture.getMinU(),texture.getMinV());
    vertex(p.getX() + texture.getWidth(),p.getY(),0,1);
    color(color);
    texCoord(texture.getMaxU(),texture.getMinV());
    vertex(p.getX(),p.getY() + texture.getHeight(),0,1);
    color(color);
    texCoord(texture.getMinU(),texture.getMaxV());
  }
{
    vertex(p.getX() + texture.getWidth(),p.getY(),0,1);
    color(color);
    texCoord(texture.getMaxU(),texture.getMinV());
    vertex(p.getX(),p.getY() + texture.getHeight(),0,1);
    color(color);
    texCoord(texture.getMinU(),texture.getMaxV());
    vertex(p.getX() + texture.getWidth(),p.getY() + texture.getHeight(),0,1);
    color(color);
    texCoord(texture.getMaxU(),texture.getMaxV());
  }
  flush();
  current.bind();
}","public void drawTexture2d(Texture texture,Vector2 p,Color color){
  Texture current=Texture.CURRENT;
  texture.bind();
  begin();
{
    vertex(p.getX(),p.getY(),0,1);
    color(color);
    texCoord(texture.getMinU(),texture.getMinV());
    vertex(p.getX() + texture.getWidth(),p.getY(),0,1);
    color(color);
    texCoord(texture.getMaxU(),texture.getMinV());
    vertex(p.getX(),p.getY() + texture.getHeight(),0,1);
    color(color);
    texCoord(texture.getMinU(),texture.getMaxV());
  }
{
    vertex(p.getX() + texture.getWidth(),p.getY(),0,1);
    color(color);
    texCoord(texture.getMaxU(),texture.getMinV());
    vertex(p.getX(),p.getY() + texture.getHeight(),0,1);
    color(color);
    texCoord(texture.getMinU(),texture.getMaxV());
    vertex(p.getX() + texture.getWidth(),p.getY() + texture.getHeight(),0,1);
    color(color);
    texCoord(texture.getMaxU(),texture.getMaxV());
  }
  end();
  current.bind();
}"
97003,"/** 
 * A private method to handle the creation of GLFW windows. Takes care of creating the window with windowing hints, a size, a title, fullscreen or not, parent window to share the context, and whether initially visible or not.
 * @param width     The width of the window
 * @param height    The height of the window
 * @param title     The title of the window
 * @param monitor   The monitor to create the window on
 * @param parent    The parent window, if the context needs to be shared
 * @param visible   Is the window visible upon creation?
 * @param resizable Is the window resizable?
 * @return A window handle. (GLFWWindow* as in C++, but this is Java, so a long)
 */
private static long createWindow(int width,int height,String title,long monitor,long parent,boolean visible,boolean resizable){
  glfwWindowHint(GLFW_SAMPLES,4);
  glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR,3);
  glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR,2);
  glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT,GL_TRUE);
  glfwWindowHint(GLFW_OPENGL_PROFILE,GLFW_OPENGL_CORE_PROFILE);
  glfwWindowHint(GLFW_VISIBLE,visible ? GL_TRUE : GL_FALSE);
  glfwWindowHint(GLFW_RESIZABLE,resizable ? GL_TRUE : GL_FALSE);
  long window=glfwCreateWindow(width,height,title,monitor,parent);
  if (window == NULL)   throw new SilenceException(""String_Node_Str"");
  glfwMakeContextCurrent(window);
  glfwSwapInterval(1);
  GLContext.createFromCurrent();
  GL3Context.enable(GL_BLEND);
  GL3Context.blendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);
  GL3Context.viewport(0,0,width,height);
  if (Game.getBatcher() == null)   Game.setBatcher(new Batcher());
  if (Program.DEFAULT == null)   Program.loadDefaultProgram();
  if (Texture.EMPTY == null)   Texture.loadNullTexture();
  releaseCallbacks();
  glfwSetWindowSizeCallback(window,winSizeCallback=GLFWWindowSizeCallback((win,w,h) -> {
    Display.width=w;
    Display.height=h;
    resized=true;
  }
));
  glfwSetKeyCallback(window,winKeyCallback=GLFWKeyCallback(Keyboard::glfwKeyCallback));
  glfwSetWindowPosCallback(window,winPosCallback=GLFWWindowPosCallback((win,xPos,yPos) -> {
    Display.posX=xPos;
    Display.posY=yPos;
  }
));
  glfwSetCursorPosCallback(window,winCurPosCallback=GLFWCursorPosCallback(Mouse::glfwCursorCallback));
  glfwSetScrollCallback(window,winScrollCallback=GLFWScrollCallback(Mouse::glfwScrollCallback));
  glfwSetMouseButtonCallback(window,winMouseButtonCallback=GLFWMouseButtonCallback(Mouse::glfwMouseButtonCallback));
  return window;
}","/** 
 * A private method to handle the creation of GLFW windows. Takes care of creating the window with windowing hints, a size, a title, fullscreen or not, parent window to share the context, and whether initially visible or not.
 * @param width     The width of the window
 * @param height    The height of the window
 * @param title     The title of the window
 * @param monitor   The monitor to create the window on
 * @param parent    The parent window, if the context needs to be shared
 * @param visible   Is the window visible upon creation?
 * @param resizable Is the window resizable?
 * @return A window handle. (GLFWWindow* as in C++, but this is Java, so a long)
 */
private static long createWindow(int width,int height,String title,long monitor,long parent,boolean visible,boolean resizable){
  if (Game.getBatcher() != null)   Game.getBatcher().dispose();
  glfwWindowHint(GLFW_SAMPLES,4);
  if (System.getProperty(""String_Node_Str"").toLowerCase().contains(""String_Node_Str"")) {
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR,3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR,2);
  }
 else {
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR,3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR,3);
  }
  glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT,GL_TRUE);
  glfwWindowHint(GLFW_OPENGL_PROFILE,GLFW_OPENGL_CORE_PROFILE);
  glfwWindowHint(GLFW_VISIBLE,visible ? GL_TRUE : GL_FALSE);
  glfwWindowHint(GLFW_RESIZABLE,resizable ? GL_TRUE : GL_FALSE);
  if (Game.development) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
    glfwWindowHint(GLFW_OPENGL_DEBUG_CONTEXT,GL_TRUE);
  }
  long window=glfwCreateWindow(width,height,title,monitor,parent);
  if (window == NULL)   throw new SilenceException(""String_Node_Str"");
  glfwMakeContextCurrent(window);
  glfwSwapInterval(1);
  GLContext.createFromCurrent();
  GL3Context.enable(GL_BLEND);
  GL3Context.blendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);
  GL3Context.viewport(0,0,width,height);
  Game.setBatcher(new Batcher());
  if (Program.DEFAULT == null)   Program.loadDefaultProgram();
  if (Texture.EMPTY == null)   Texture.loadNullTexture();
  releaseCallbacks();
  glfwSetWindowSizeCallback(window,winSizeCallback=GLFWWindowSizeCallback((win,w,h) -> {
    Display.width=w;
    Display.height=h;
    resized=true;
  }
));
  glfwSetKeyCallback(window,winKeyCallback=GLFWKeyCallback(Keyboard::glfwKeyCallback));
  glfwSetWindowPosCallback(window,winPosCallback=GLFWWindowPosCallback((win,xPos,yPos) -> {
    Display.posX=xPos;
    Display.posY=yPos;
  }
));
  glfwSetCursorPosCallback(window,winCurPosCallback=GLFWCursorPosCallback(Mouse::glfwCursorCallback));
  glfwSetScrollCallback(window,winScrollCallback=GLFWScrollCallback(Mouse::glfwScrollCallback));
  glfwSetMouseButtonCallback(window,winMouseButtonCallback=GLFWMouseButtonCallback(Mouse::glfwMouseButtonCallback));
  return window;
}"
97004,"/** 
 * Starts the game. Initiates the game life-cycle and starts the main game-loop.
 */
public void start(){
  running=true;
  Display.create();
  Display.show();
  init();
  final double frameTime=1.0 / targetUPS;
  double currentTime;
  double previousTime;
  double elapsed;
  double lag=0;
  double lastUPSUpdate=0;
  double lastFPSUpdate=0;
  int updatesProcessed=0;
  int framesProcessed=0;
  previousTime=TimeUtils.currentSeconds();
  while (true) {
    if (Display.isCloseRequested() || !isRunning())     break;
    if (Display.wasResized()) {
      GL3Context.viewport(0,0,Display.getWidth(),Display.getHeight());
      resize();
    }
    currentTime=TimeUtils.currentSeconds();
    elapsed=currentTime - previousTime;
    lag+=elapsed;
    while (lag > frameTime) {
      Keyboard.startEventFrame();
      Mouse.startEventFrame();
      update((float)elapsed);
      GameTimer.updateTimers((float)elapsed);
      Keyboard.clearEventFrame();
      Mouse.clearEventFrame();
      updatesProcessed++;
      lag-=frameTime;
      if (currentTime - lastUPSUpdate >= 1000) {
        ups=updatesProcessed;
        updatesProcessed=0;
        lastUPSUpdate=currentTime;
      }
    }
    float lagOffset=(float)(lag / frameTime);
    GL3Context.clear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    Texture.setActiveUnit(0);
    render(lagOffset,batcher);
    framesProcessed++;
    if (currentTime - lastFPSUpdate >= 1000) {
      fps=framesProcessed;
      framesProcessed=0;
      lastFPSUpdate=currentTime;
    }
    Display.update();
    previousTime=currentTime;
  }
  batcher.dispose();
  dispose();
  Display.destroy();
}","/** 
 * Starts the game. Initiates the game life-cycle and starts the main game-loop.
 */
public void start(){
  running=true;
  Display.create();
  Display.show();
  System.out.println(glGetString(GL_VERSION));
  init();
  final double frameTime=1.0 / targetUPS;
  double currentTime;
  double previousTime;
  double elapsed;
  double lag=0;
  double lastUPSUpdate=0;
  double lastFPSUpdate=0;
  int updatesProcessed=0;
  int framesProcessed=0;
  previousTime=TimeUtils.currentSeconds();
  while (true) {
    if (Display.isCloseRequested() || !isRunning())     break;
    if (Display.wasResized()) {
      GL3Context.viewport(0,0,Display.getWidth(),Display.getHeight());
      resize();
    }
    currentTime=TimeUtils.currentSeconds();
    elapsed=currentTime - previousTime;
    lag+=elapsed;
    while (lag > frameTime) {
      Keyboard.startEventFrame();
      Mouse.startEventFrame();
      update((float)elapsed);
      GameTimer.updateTimers((float)elapsed);
      Keyboard.clearEventFrame();
      Mouse.clearEventFrame();
      updatesProcessed++;
      lag-=frameTime;
      if (currentTime - lastUPSUpdate >= 1000) {
        ups=updatesProcessed;
        updatesProcessed=0;
        lastUPSUpdate=currentTime;
      }
    }
    float lagOffset=(float)(lag / frameTime);
    GL3Context.clear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    Texture.setActiveUnit(0);
    render(lagOffset,batcher);
    framesProcessed++;
    if (currentTime - lastFPSUpdate >= 1000) {
      fps=framesProcessed;
      framesProcessed=0;
      lastFPSUpdate=currentTime;
    }
    Display.update();
    previousTime=currentTime;
  }
  batcher.dispose();
  dispose();
  Display.destroy();
}"
97005,"/** 
 * Loads the natives from the JAR resources
 */
public static void load(){
  if (System.getProperty(""String_Node_Str"",""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))   return;
  try {
    File tmp=Files.createTempDirectory(""String_Node_Str"").toFile();
    tmp.deleteOnExit();
    if (OS.contains(""String_Node_Str"")) {
      if (ARCH.contains(""String_Node_Str"")) {
        extractLibrary(tmp,""String_Node_Str"");
        extractLibrary(tmp,""String_Node_Str"");
      }
 else {
        extractLibrary(tmp,""String_Node_Str"");
        extractLibrary(tmp,""String_Node_Str"");
      }
    }
 else     if (OS.contains(""String_Node_Str"")) {
      extractLibrary(tmp,""String_Node_Str"");
      extractLibrary(tmp,""String_Node_Str"");
    }
 else     if (OS.contains(""String_Node_Str"")) {
      if (ARCH.contains(""String_Node_Str"")) {
        extractLibrary(tmp,""String_Node_Str"");
        extractLibrary(tmp,""String_Node_Str"");
      }
 else {
        extractLibrary(tmp,""String_Node_Str"");
        extractLibrary(tmp,""String_Node_Str"");
      }
    }
    System.setProperty(""String_Node_Str"",tmp.getAbsolutePath());
  }
 catch (  Exception e) {
    throw new SilenceException(e.getMessage());
  }
}","/** 
 * Loads the natives from the JAR resources
 */
public static void load(){
  if (System.getProperty(""String_Node_Str"",""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))   return;
  try {
    File tmp=Files.createTempDirectory(""String_Node_Str"").toFile();
    tmp.deleteOnExit();
    if (isWindows) {
      if (!is64Bit) {
        extractLibrary(tmp,""String_Node_Str"");
        extractLibrary(tmp,""String_Node_Str"");
      }
 else {
        extractLibrary(tmp,""String_Node_Str"");
        extractLibrary(tmp,""String_Node_Str"");
      }
    }
 else     if (isMac) {
      extractLibrary(tmp,""String_Node_Str"");
      extractLibrary(tmp,""String_Node_Str"");
    }
 else     if (isLinux) {
      if (!is64Bit) {
        extractLibrary(tmp,""String_Node_Str"");
        extractLibrary(tmp,""String_Node_Str"");
      }
 else {
        extractLibrary(tmp,""String_Node_Str"");
        extractLibrary(tmp,""String_Node_Str"");
      }
    }
    System.setProperty(""String_Node_Str"",tmp.getAbsolutePath());
  }
 catch (  Exception e) {
    SilenceException.reThrow(e);
  }
}"
97006,"private static void releaseCallbacks(){
  if (winSizeCallback != null)   winSizeCallback.release();
  if (winKeyCallback != null)   winKeyCallback.release();
  if (winPosCallback != null)   winPosCallback.release();
  if (winCurPosCallback != null)   winCurPosCallback.release();
  if (winScrollCallback != null)   winScrollCallback.release();
  if (winMouseButtonCallback != null)   winMouseButtonCallback.release();
}","/** 
 * Used to release GLFW callbacks. This is necessary to prevent segmentation fault errors in native code.
 */
private static void releaseCallbacks(){
  if (winSizeCallback != null)   winSizeCallback.release();
  if (winKeyCallback != null)   winKeyCallback.release();
  if (winPosCallback != null)   winPosCallback.release();
  if (winCurPosCallback != null)   winCurPosCallback.release();
  if (winScrollCallback != null)   winScrollCallback.release();
  if (winMouseButtonCallback != null)   winMouseButtonCallback.release();
}"
97007,"/** 
 * Starts the game. Initiates the game life-cycle and starts the main game-loop.
 */
public void start(){
  running=true;
  Display.create();
  Display.show();
  init();
  final double frameTime=1.0 / targetUPS;
  double currentTime;
  double previousTime;
  double elapsed;
  double lag=0;
  double lastUPSUpdate=0;
  double lastFPSUpdate=0;
  int updatesProcessed=0;
  int framesProcessed=0;
  previousTime=0;
  while (true) {
    if (Display.isCloseRequested() || !isRunning())     break;
    if (Display.wasResized()) {
      GL3Context.viewport(0,0,Display.getWidth(),Display.getHeight());
      resize();
    }
    currentTime=TimeUtils.currentSeconds();
    elapsed=currentTime - previousTime;
    lag+=elapsed;
    while (lag > frameTime) {
      Keyboard.startEventFrame();
      Mouse.startEventFrame();
      update((float)elapsed);
      Keyboard.clearEventFrame();
      Mouse.clearEventFrame();
      updatesProcessed++;
      lag-=frameTime;
      if (currentTime - lastUPSUpdate >= 1000) {
        ups=updatesProcessed;
        updatesProcessed=0;
        lastUPSUpdate=currentTime;
      }
    }
    GL3Context.clear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    Texture.setActiveUnit(0);
    render((float)elapsed,batcher);
    framesProcessed++;
    if (currentTime - lastFPSUpdate >= 1000) {
      fps=framesProcessed;
      framesProcessed=0;
      lastFPSUpdate=currentTime;
    }
    Display.update();
    previousTime=currentTime;
  }
  batcher.dispose();
  dispose();
  Display.destroy();
}","/** 
 * Starts the game. Initiates the game life-cycle and starts the main game-loop.
 */
public void start(){
  running=true;
  Display.create();
  Display.show();
  init();
  final double frameTime=1.0 / targetUPS;
  double currentTime;
  double previousTime;
  double elapsed;
  double lag=0;
  double lastUPSUpdate=0;
  double lastFPSUpdate=0;
  int updatesProcessed=0;
  int framesProcessed=0;
  previousTime=0;
  while (true) {
    if (Display.isCloseRequested() || !isRunning())     break;
    if (Display.wasResized()) {
      GL3Context.viewport(0,0,Display.getWidth(),Display.getHeight());
      resize();
    }
    currentTime=TimeUtils.currentSeconds();
    elapsed=currentTime - previousTime;
    lag+=elapsed;
    while (lag > frameTime) {
      Keyboard.startEventFrame();
      Mouse.startEventFrame();
      update((float)elapsed);
      Keyboard.clearEventFrame();
      Mouse.clearEventFrame();
      updatesProcessed++;
      lag-=frameTime;
      if (currentTime - lastUPSUpdate >= 1000) {
        ups=updatesProcessed;
        updatesProcessed=0;
        lastUPSUpdate=currentTime;
      }
    }
    float lagOffset=(float)(lag / frameTime);
    GL3Context.clear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    Texture.setActiveUnit(0);
    render(lagOffset,batcher);
    framesProcessed++;
    if (currentTime - lastFPSUpdate >= 1000) {
      fps=framesProcessed;
      framesProcessed=0;
      lastFPSUpdate=currentTime;
    }
    Display.update();
    previousTime=currentTime;
  }
  batcher.dispose();
  dispose();
  Display.destroy();
}"
97008,"/** 
 * A private method to handle the creation of GLFW windows. Takes care of creating the window with windowing hints, a size, a title, fullscreen or not, parent window to share the context, and whether initially visible or not.
 * @param width    The width of the window
 * @param height   The height of the window
 * @param title    The title of the window
 * @param monitor  The monitor to create the window on
 * @param parent   The parent window, if the context needs to be shared
 * @param visible  Is the window visible upon creation?
 * @return A window handle. (GLFWWindow* as in C++, but this is Java, so a long)
 */
private static long createWindow(int width,int height,String title,long monitor,long parent,boolean visible){
  glfwWindowHint(GLFW_SAMPLES,4);
  glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR,3);
  glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR,2);
  glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT,GL_TRUE);
  glfwWindowHint(GLFW_OPENGL_PROFILE,GLFW_OPENGL_CORE_PROFILE);
  glfwWindowHint(GLFW_VISIBLE,visible ? GL_TRUE : GL_FALSE);
  long window=glfwCreateWindow(width,height,title,monitor,parent);
  if (window == NULL)   throw new SilenceException(""String_Node_Str"");
  glfwMakeContextCurrent(window);
  glfwSwapInterval(1);
  GLContext.createFromCurrent();
  glEnable(GL_BLEND);
  glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);
  glEnable(GL_DEPTH_TEST);
  GLError.check();
  if (Game.getBatcher() == null)   Game.setBatcher(new Batcher());
  if (Program.DEFAULT == null)   Program.loadDefaultProgram();
  if (Texture.EMPTY == null)   Texture.loadNullTexture();
  Program.DEFAULT.use();
  Texture.EMPTY.bind();
  if (winSizeCallback != null)   winSizeCallback.release();
  if (winKeyCallback != null)   winKeyCallback.release();
  if (winPosCallback != null)   winPosCallback.release();
  if (winCurPosCallback != null)   winCurPosCallback.release();
  glfwSetWindowSizeCallback(window,winSizeCallback=GLFWWindowSizeCallback((win,w,h) -> {
    Display.width=width;
    Display.height=height;
    resized=true;
  }
));
  glfwSetKeyCallback(window,winKeyCallback=GLFWKeyCallback((win,key,scanCode,action,mods) -> Keyboard.setKey(key,action != GLFW_RELEASE)));
  glfwSetWindowPosCallback(window,winPosCallback=GLFWWindowPosCallback((win,xPos,yPos) -> {
    Display.posX=xPos;
    Display.posY=yPos;
  }
));
  glfwSetCursorPosCallback(window,winCurPosCallback=GLFWCursorPosCallback((win,xPos,yPos) -> {
    mouseX=(int)xPos;
    mouseY=(int)yPos;
  }
));
  return window;
}","/** 
 * A private method to handle the creation of GLFW windows. Takes care of creating the window with windowing hints, a size, a title, fullscreen or not, parent window to share the context, and whether initially visible or not.
 * @param width    The width of the window
 * @param height   The height of the window
 * @param title    The title of the window
 * @param monitor  The monitor to create the window on
 * @param parent   The parent window, if the context needs to be shared
 * @param visible  Is the window visible upon creation?
 * @return A window handle. (GLFWWindow* as in C++, but this is Java, so a long)
 */
private static long createWindow(int width,int height,String title,long monitor,long parent,boolean visible){
  glfwWindowHint(GLFW_SAMPLES,4);
  glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR,3);
  glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR,2);
  glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT,GL_TRUE);
  glfwWindowHint(GLFW_OPENGL_PROFILE,GLFW_OPENGL_CORE_PROFILE);
  glfwWindowHint(GLFW_VISIBLE,visible ? GL_TRUE : GL_FALSE);
  long window=glfwCreateWindow(width,height,title,monitor,parent);
  if (window == NULL)   throw new SilenceException(""String_Node_Str"");
  glfwMakeContextCurrent(window);
  glfwSwapInterval(1);
  GLContext.createFromCurrent();
  glEnable(GL_BLEND);
  glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);
  glEnable(GL_DEPTH_TEST);
  GLError.check();
  if (Game.getBatcher() == null)   Game.setBatcher(new Batcher());
  if (Program.DEFAULT == null)   Program.loadDefaultProgram();
  if (Texture.EMPTY == null)   Texture.loadNullTexture();
  Program.CURRENT=null;
  Texture.CURRENT=null;
  Program.DEFAULT.use();
  Texture.EMPTY.bind();
  if (winSizeCallback != null)   winSizeCallback.release();
  if (winKeyCallback != null)   winKeyCallback.release();
  if (winPosCallback != null)   winPosCallback.release();
  if (winCurPosCallback != null)   winCurPosCallback.release();
  glfwSetWindowSizeCallback(window,winSizeCallback=GLFWWindowSizeCallback((win,w,h) -> {
    Display.width=width;
    Display.height=height;
    resized=true;
  }
));
  glfwSetKeyCallback(window,winKeyCallback=GLFWKeyCallback((win,key,scanCode,action,mods) -> Keyboard.setKey(key,action != GLFW_RELEASE)));
  glfwSetWindowPosCallback(window,winPosCallback=GLFWWindowPosCallback((win,xPos,yPos) -> {
    Display.posX=xPos;
    Display.posY=yPos;
  }
));
  glfwSetCursorPosCallback(window,winCurPosCallback=GLFWCursorPosCallback((win,xPos,yPos) -> {
    mouseX=(int)xPos;
    mouseY=(int)yPos;
  }
));
  return window;
}"
97009,"/** 
 * Initialises VAOs and VBOs and creates the data store to store the entire batch.
 */
private void initGLHandles(){
  vao=new VertexArrayObject();
  vao.bind();
  vboVert=new VertexBufferObject(GL_ARRAY_BUFFER);
  vboCol=new VertexBufferObject(GL_ARRAY_BUFFER);
  vboTex=new VertexBufferObject(GL_ARRAY_BUFFER);
  vboVert.bind();
  vboVert.uploadData(SIZE_OF_VERTEX * MAX_VERTICES_IN_BATCH,GL_STREAM_DRAW);
  vboCol.bind();
  vboCol.uploadData(SIZE_OF_COLOR * MAX_VERTICES_IN_BATCH,GL_STREAM_DRAW);
  vboTex.bind();
  vboTex.uploadData(SIZE_OF_TEXCOORD * MAX_VERTICES_IN_BATCH,GL_STREAM_DRAW);
}","/** 
 * Initialises VAOs and VBOs and creates the data store to store the entire batch.
 */
private void initGLHandles(){
  vao=new VertexArrayObject();
  vao.bind();
  vboVert=new VertexBufferObject(GL_ARRAY_BUFFER);
  vboCol=new VertexBufferObject(GL_ARRAY_BUFFER);
  vboTex=new VertexBufferObject(GL_ARRAY_BUFFER);
  vboNorm=new VertexBufferObject(GL_ARRAY_BUFFER);
  vboVert.bind();
  vboVert.uploadData(SIZE_OF_VERTEX * MAX_VERTICES_IN_BATCH,GL_STREAM_DRAW);
  vboCol.bind();
  vboCol.uploadData(SIZE_OF_COLOR * MAX_VERTICES_IN_BATCH,GL_STREAM_DRAW);
  vboTex.bind();
  vboTex.uploadData(SIZE_OF_TEXCOORD * MAX_VERTICES_IN_BATCH,GL_STREAM_DRAW);
  vboNorm.bind();
  vboNorm.uploadData(SIZE_OF_NORMAL * MAX_VERTICES_IN_BATCH,GL_STREAM_DRAW);
}"
97010,"/** 
 * Uploads the data collected to the OpenGL buffers.
 */
private void uploadData(){
  vboVert.bind();
  vboVert.uploadSubData(vBuffer,0);
  vao.pointAttribute(0,4,GL_FLOAT,vboVert);
  vboCol.bind();
  vboCol.uploadSubData(cBuffer,0);
  vao.pointAttribute(1,4,GL_FLOAT,vboCol);
  vboTex.bind();
  vboTex.uploadSubData(tBuffer,0);
  vao.pointAttribute(2,2,GL_FLOAT,vboTex);
}","/** 
 * Uploads the data collected to the OpenGL buffers.
 */
private void uploadData(){
  vboVert.bind();
  vboVert.uploadSubData(vBuffer,0);
  vao.pointAttribute(vertexLocation,4,GL_FLOAT,vboVert);
  vboCol.bind();
  vboCol.uploadSubData(cBuffer,0);
  vao.pointAttribute(colorLocation,4,GL_FLOAT,vboCol);
  vboTex.bind();
  vboTex.uploadSubData(tBuffer,0);
  vao.pointAttribute(texCoordLocation,2,GL_FLOAT,vboTex);
  vboNorm.bind();
  vboNorm.uploadSubData(nBuffer,0);
  vao.pointAttribute(normalLocation,4,GL_FLOAT,vboNorm);
}"
97011,"/** 
 * Flushes the data collected to the GPU.
 */
public void flush(){
  if (vertexCount == 0)   return;
  fillBuffers();
  Program.CURRENT.setupUniforms();
  vBuffer.flip();
  cBuffer.flip();
  tBuffer.flip();
  vao.bind();
  vao.enableAttributeArray(0);
  vao.enableAttributeArray(1);
  vao.enableAttributeArray(2);
  uploadData();
  glDrawArrays(beginMode.getGlPrimitive(),0,vertexCount);
  GLError.check();
  vao.disableAttributeArray(0);
  vao.disableAttributeArray(1);
  vao.disableAttributeArray(2);
  glBindVertexArray(0);
  GLError.check();
  vBuffer.clear();
  cBuffer.clear();
  tBuffer.clear();
  vertexCount=0;
  colorCount=0;
  texCoordCount=0;
}","/** 
 * Flushes the data collected to the GPU.
 */
public void flush(){
  if (vertexCount == 0)   return;
  fillBuffers();
  Program.CURRENT.prepareFrame();
  vBuffer.flip();
  cBuffer.flip();
  tBuffer.flip();
  nBuffer.flip();
  vao.bind();
  vao.enableAttributeArray(vertexLocation);
  vao.enableAttributeArray(colorLocation);
  vao.enableAttributeArray(texCoordLocation);
  vao.enableAttributeArray(normalLocation);
  uploadData();
  glDrawArrays(beginMode.getGlPrimitive(),0,vertexCount);
  GLError.check();
  vao.disableAttributeArray(vertexLocation);
  vao.disableAttributeArray(colorLocation);
  vao.disableAttributeArray(texCoordLocation);
  vao.disableAttributeArray(normalLocation);
  glBindVertexArray(0);
  GLError.check();
  vBuffer.clear();
  cBuffer.clear();
  tBuffer.clear();
  nBuffer.clear();
  vertexCount=0;
  colorCount=0;
  texCoordCount=0;
  normalCount=0;
}"
97012,"/** 
 * Creates the Batcher, and initialises OpenGL
 */
public Batcher(){
  vBuffer=BufferUtils.createFloatBuffer(SIZE_OF_VERTEX * MAX_VERTICES_IN_BATCH);
  cBuffer=BufferUtils.createFloatBuffer(SIZE_OF_COLOR * MAX_VERTICES_IN_BATCH);
  tBuffer=BufferUtils.createFloatBuffer(SIZE_OF_TEXCOORD * MAX_VERTICES_IN_BATCH);
  transform=new Transform();
  initGLHandles();
}","/** 
 * Creates the Batcher, and initialises OpenGL
 */
public Batcher(){
  vBuffer=BufferUtils.createFloatBuffer(SIZE_OF_VERTEX * MAX_VERTICES_IN_BATCH);
  cBuffer=BufferUtils.createFloatBuffer(SIZE_OF_COLOR * MAX_VERTICES_IN_BATCH);
  tBuffer=BufferUtils.createFloatBuffer(SIZE_OF_TEXCOORD * MAX_VERTICES_IN_BATCH);
  nBuffer=BufferUtils.createFloatBuffer(SIZE_OF_NORMAL * MAX_VERTICES_IN_BATCH);
  transform=new Transform();
  initGLHandles();
}"
97013,"private void fillBuffers(){
  Color col=texCoordCount == vertexCount ? Color.TRANSPARENT : Color.WHITE;
  while (colorCount < vertexCount) {
    cBuffer.put(col.getR()).put(col.getG()).put(col.getB()).put(col.getA());
    colorCount++;
  }
  while (texCoordCount < vertexCount) {
    tBuffer.put(0).put(0);
    texCoordCount++;
  }
}","private void fillBuffers(){
  Color col=texCoordCount == vertexCount ? Color.TRANSPARENT : Color.WHITE;
  while (colorCount < vertexCount) {
    cBuffer.put(col.getR()).put(col.getG()).put(col.getB()).put(col.getA());
    colorCount++;
  }
  while (texCoordCount < vertexCount) {
    tBuffer.put(0).put(0);
    texCoordCount++;
  }
  while (normalCount < vertexCount) {
    nBuffer.put(0).put(0).put(0).put(0);
    normalCount++;
  }
}"
97014,"public void drawString(Batcher b,String text,float x,float y,Color col){
  Texture current=Texture.CURRENT;
  b.begin();
{
    fontTexture.bind();
    float startX=x;
    for (    char ch : text.toCharArray()) {
      FontChar c=chars[(int)ch];
      if (ch == '\n') {
        y+=fontMetrics.getHeight();
        x=startX;
        continue;
      }
      float minU=c.x / fontTexture.getWidth();
      float maxU=(c.x + c.w + 2) / fontTexture.getWidth();
      float minV=c.y / fontTexture.getHeight();
      float maxV=(c.y + c.h) / fontTexture.getHeight();
      b.drawTexture2d(fontTexture.getSubTexture(minU,minV,maxU,maxV),new Vector2(x,y),col);
      x+=c.w;
    }
  }
  b.end();
  current.bind();
}","public void drawString(Batcher b,String text,float x,float y,Color col){
  Texture current=Texture.CURRENT;
  b.begin();
{
    fontTexture.bind();
    float startX=x;
    for (    char ch : text.toCharArray()) {
      FontChar c=chars[(int)ch];
      if (ch == '\n') {
        y+=fontMetrics.getHeight();
        x=startX;
        continue;
      }
      float minU=c.x / fontTexture.getWidth();
      float maxU=(c.x + c.w) / fontTexture.getWidth();
      float minV=c.y / fontTexture.getHeight();
      float maxV=(c.y + c.h) / fontTexture.getHeight();
      b.drawTexture2d(fontTexture.getSubTexture(minU,minV,maxU,maxV),new Vector2(x,y),col);
      x+=c.w;
    }
  }
  b.end();
  current.bind();
}"
97015,"public void use(){
  if (CURRENT == this)   return;
  if (disposed)   throw new GLException(""String_Node_Str"");
  glUseProgram(id);
  GLError.check();
  CURRENT=this;
  setupUniforms();
}","public void use(){
  if (CURRENT == this)   return;
  if (disposed)   throw new GLException(""String_Node_Str"");
  glUseProgram(id);
  GLError.check();
  CURRENT=this;
  prepareFrame();
}"
97016,"public static void init(){
  transform=new Transform();
  children=new ArrayList<>();
}","public static void init(){
  transform=new Transform();
  children=new ArrayList<>();
  Program.CURRENT=null;
  Texture.CURRENT=null;
  Program.DEFAULT.use();
  Texture.EMPTY.bind();
}"
97017,"public Circle(float x,float y,float radius){
  this.x=x;
  this.y=y;
  this.radius=radius;
}","public Circle(float x,float y,float radius){
  this.x=x;
  this.y=y;
  this.radius=radius;
  setPosition(new Vector2(x,y));
  updateVertices();
}"
97018,"public void setY(float y){
  this.y=y;
}","public void setY(float y){
  this.y=y;
  setPosition(new Vector2(x,y));
}"
97019,"public void setX(float x){
  this.x=x;
}","public void setX(float x){
  this.x=x;
  setPosition(new Vector2(x,y));
}"
97020,"public boolean intersects(Circle c){
  return (x * c.x + y * c.y) <= (radius + c.radius) * (radius + c.radius);
}","public boolean intersects(Polygon p){
  if (p instanceof Circle) {
    Circle c=(Circle)p;
    return (((x - c.x) * (x - c.x)) + ((y - c.y) * (y - c.y))) < (radius + c.radius) * (radius + c.radius);
  }
 else   return super.intersects(p);
}"
97021,"public void setRadius(float radius){
  this.radius=radius;
}","public void setRadius(float radius){
  this.radius=radius;
  updateVertices();
}"
97022,"public void setY(float y){
  this.y=y;
}","public void setY(float y){
  this.y=y;
  setPosition(new Vector2(x,y));
}"
97023,"public void setX(float x){
  this.x=x;
}","public void setX(float x){
  this.x=x;
  setPosition(new Vector2(x,y));
}"
97024,"public boolean intersects(Rectangle r){
  return (x < r.x + r.width) && (r.x < x + width) && (y < r.y + r.height)&& (r.y < y + height);
}","public boolean intersects(Polygon p){
  if (p instanceof Rectangle) {
    Rectangle r=(Rectangle)p;
    return (x < r.x + r.width) && (r.x < x + width) && (y < r.y + r.height)&& (r.y < y + height);
  }
 else   return super.intersects(p);
}"
97025,"public Rectangle(float x,float y,float width,float height){
  this.x=x;
  this.y=y;
  this.width=width;
  this.height=height;
}","public Rectangle(float x,float y,float width,float height){
  this.x=x;
  this.y=y;
  this.width=width;
  this.height=height;
  setPosition(new Vector2(x,y));
  updateVertices();
}"
97026,"public void setWidth(float width){
  this.width=width;
}","public void setWidth(float width){
  this.width=width;
  updateVertices();
}"
97027,"public void setHeight(float height){
  this.height=height;
}","public void setHeight(float height){
  this.height=height;
  updateVertices();
}"
97028,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Entity2D entity2D=(Entity2D)o;
  if (!polygon.equals(entity2D.polygon))   return false;
  if (!position.equals(entity2D.position))   return false;
  if (!velocity.equals(entity2D.velocity))   return false;
  return true;
}","@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Entity2D entity2D=(Entity2D)o;
  return polygon.equals(entity2D.polygon) && position.equals(entity2D.position) && velocity.equals(entity2D.velocity);
}"
97029,"public Circle(float x,float y,float radius){
  this.radius=radius;
  setCenter(new Vector2(x,y));
  updateVertices();
}","public Circle(float x,float y,float radius){
  this.radius=radius;
  updateVertices();
  setCenter(new Vector2(x,y));
}"
