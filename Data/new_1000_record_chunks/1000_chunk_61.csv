record_number,buggy_code,fixed_code
60001,"public void onSlotChanged(){
  ItemStack item=player.inventory.mainInventory[containerIndex];
  if (valid && (item == null || item.getItem() != containerWrapper.getContainerStack().getItem())) {
    player.inventory.mainInventory[containerIndex]=containerWrapper.getContainerStack();
  }
}","public void onSlotChanged(){
  ItemStack item=player.inventory.mainInventory[containerIndex];
  if (valid && item != null && item.getItem() == containerWrapper.getContainerStack().getItem()) {
    player.inventory.mainInventory[containerIndex]=containerWrapper.getContainerStack();
  }
}"
60002,"@Override public void drawForeground(int mouseX,int mouseY){
  if (enableStencil) {
    glEnable(GL_STENCIL_TEST);
    glClear(GL_STENCIL_BUFFER_BIT);
    drawStencil(posX + 1,posY + 1,posX + sizeX - 1,posY + sizeY - 1,1);
  }
  FontRenderer font=getFontRenderer();
  char[] text=this.text;
  int startX=posX + 1, endX=sizeX - 1, startY=posY + 1, endY=startY + font.FONT_HEIGHT;
  for (int i=renderStart, width=0; i <= textLength; ++i) {
    boolean end=i == textLength;
    int charW=2;
    if (!end) {
      charW=font.getCharWidth(text[i]);
      if (!enableStencil && (width + charW) > endX)       break;
    }
    boolean drawCaret=i == caret && (caretCounter%=24) < 12 && isFocused();
    if (drawCaret) {
      int caretEnd=width + 2;
      if (caretInsert)       caretEnd=width + charW;
      drawModalRect(startX + width,startY - 1,startX + caretEnd,endY,(0xFF000000 & defaultCaretColor) | ~(defaultCaretColor & 0xFFFFFF));
    }
    if (!end) {
      boolean selected=i >= selectionStart & i < selectionEnd;
      if (selected)       drawModalRect(startX + width,startY,startX + width + charW,endY,selectedLineColor);
      font.drawString(String.valueOf(text[i]),startX + width,startY,selected ? selectedTextColor : textColor);
    }
    if (drawCaret) {
      int caretEnd=width + 2;
      if (caretInsert)       caretEnd=width + charW;
      GL11.glEnable(GL11.GL_BLEND);
      GL11.glBlendFunc(GL11.GL_ONE_MINUS_DST_COLOR,GL11.GL_ZERO);
      gui.drawSizedRect(startX + width,startY - 1,startX + caretEnd,endY,-1);
      GL11.glDisable(GL11.GL_BLEND);
    }
    width+=charW;
    if (width > endX)     break;
  }
  if (enableStencil)   glDisable(GL_STENCIL_TEST);
}","@Override public void drawForeground(int mouseX,int mouseY){
  if (enableStencil) {
    glEnable(GL_STENCIL_TEST);
    glClear(GL_STENCIL_BUFFER_BIT);
    drawStencil(posX + 1,posY + 1,posX + sizeX - 1,posY + sizeY - 1,1);
  }
  FontRenderer font=getFontRenderer();
  char[] text=this.text;
  int startX=posX + 1, endX=sizeX - 1, startY=posY + 1, endY=startY + font.FONT_HEIGHT;
  for (int i=renderStart, width=0; i <= textLength; ++i) {
    boolean end=i == textLength;
    int charW=2;
    if (!end) {
      charW=font.getCharWidth(text[i]);
      if (!enableStencil && (width + charW) > endX)       break;
    }
    boolean drawCaret=i == caret && (caretCounter%=24) < 12 && isFocused();
    if (drawCaret) {
      int caretEnd=width + 2;
      if (caretInsert)       caretEnd=width + charW;
      drawModalRect(startX + width,startY - 1,startX + caretEnd,endY,(0xFF000000 & defaultCaretColor) | (~defaultCaretColor & 0xFFFFFF));
    }
    if (!end) {
      boolean selected=i >= selectionStart & i < selectionEnd;
      if (selected)       drawModalRect(startX + width,startY,startX + width + charW,endY,selectedLineColor);
      font.drawString(String.valueOf(text[i]),startX + width,startY,selected ? selectedTextColor : textColor);
    }
    if (drawCaret) {
      int caretEnd=width + 2;
      if (caretInsert)       caretEnd=width + charW;
      GL11.glEnable(GL11.GL_BLEND);
      GL11.glBlendFunc(GL11.GL_ONE_MINUS_DST_COLOR,GL11.GL_ZERO);
      gui.drawSizedRect(startX + width,startY - 1,startX + caretEnd,endY,-1);
      GL11.glDisable(GL11.GL_BLEND);
    }
    width+=charW;
    if (width > endX)     break;
  }
  if (enableStencil)   glDisable(GL_STENCIL_TEST);
}"
60003,"@Override public boolean generate(World world,Random rand,int x,int y,int z){
  int treeHeight=(heightVariance <= 1 ? 0 : rand.nextInt(heightVariance)) + minHeight;
  int worldHeight=world.getHeight();
  Block block;
  if (y + treeHeight + 1 <= worldHeight) {
    int xOffset;
    int yOffset;
    int zOffset;
    if (genSurface != null && !canGenerateInBlock(world,x,y - 1,z,genSurface))     return false;
    if (y < worldHeight - treeHeight - 1) {
      if (treeChecks) {
        for (yOffset=y; yOffset <= y + 1 + treeHeight; ++yOffset) {
          int radius;
          if (yOffset >= y + 1 + treeHeight - 2) {
            radius=2;
          }
 else {
            radius=relaxedGrowth ? 0 : 1;
          }
          if (yOffset >= 0 & yOffset < worldHeight) {
            if (radius == 0) {
              block=world.getBlock(x,yOffset,z);
              if (!(block.isLeaves(world,x,yOffset,z) || block.isAir(world,x,yOffset,z) || block.isReplaceable(world,x,yOffset,z)|| block.canBeReplacedByLeaves(world,x,yOffset,z))) {
                return false;
              }
              if (!waterLoving && yOffset >= y + 1) {
                radius=1;
                for (xOffset=x - radius; xOffset <= x + radius; ++xOffset) {
                  for (zOffset=z - radius; zOffset <= z + radius; ++zOffset) {
                    block=world.getBlock(xOffset,yOffset,zOffset);
                    if (block.getMaterial().isLiquid()) {
                      return false;
                    }
                  }
                }
              }
            }
 else             for (xOffset=x - radius; xOffset <= x + radius; ++xOffset) {
              for (zOffset=z - radius; zOffset <= z + radius; ++zOffset) {
                block=world.getBlock(xOffset,yOffset,zOffset);
                if (!(block.isLeaves(world,xOffset,yOffset,zOffset) || block.isAir(world,xOffset,yOffset,zOffset) || block.canBeReplacedByLeaves(world,xOffset,yOffset,zOffset))) {
                  return false;
                }
              }
            }
          }
 else {
            return false;
          }
        }
        if (genSurface != null && !canGenerateInBlock(world,x,y - 1,z,genSurface))         return false;
        block=world.getBlock(x,y - 1,z);
        block.onPlantGrow(world,x,y - 1,z,x,y,z);
      }
      boolean r=false;
      for (yOffset=y - 3 + treeHeight; yOffset <= y + treeHeight; ++yOffset) {
        int var12=yOffset - (y + treeHeight), center=1 - var12 / 2;
        for (xOffset=x - center; xOffset <= x + center; ++xOffset) {
          int xPos=xOffset - x, t;
          xPos=(xPos + (t=xPos >> 31)) ^ t;
          for (zOffset=z - center; zOffset <= z + center; ++zOffset) {
            int zPos=zOffset - z;
            zPos=(zPos + (t=zPos >> 31)) ^ t;
            block=world.getBlock(xOffset,yOffset,zOffset);
            if (((xPos != center | zPos != center) || rand.nextInt(2) != 0 && var12 != 0) && (!treeChecks || block.isLeaves(world,xOffset,yOffset,zOffset) || block.isAir(world,xOffset,yOffset,zOffset)|| block.canBeReplacedByLeaves(world,xOffset,yOffset,zOffset))) {
              r|=generateBlock(world,xOffset + x,yOffset + y,zOffset + z,genBlock,leaves);
            }
          }
        }
      }
      for (yOffset=0; yOffset < treeHeight; ++yOffset) {
        block=world.getBlock(x,y + yOffset,z);
        if (!treeChecks || block.isAir(world,x,y + yOffset,z) || block.isLeaves(world,x,y + yOffset,z)|| block.isReplaceable(world,x,y + yOffset,z)) {
          r|=generateBlock(world,x,yOffset + y,z,genBlock,trunk);
        }
      }
      return r;
    }
  }
  return false;
}","@Override public boolean generate(World world,Random rand,int x,int y,int z){
  int treeHeight=(heightVariance <= 1 ? 0 : rand.nextInt(heightVariance)) + minHeight;
  int worldHeight=world.getHeight();
  Block block;
  if (y + treeHeight + 1 <= worldHeight) {
    int xOffset;
    int yOffset;
    int zOffset;
    if (genSurface != null && !canGenerateInBlock(world,x,y - 1,z,genSurface))     return false;
    if (y < worldHeight - treeHeight - 1) {
      if (treeChecks) {
        for (yOffset=y; yOffset <= y + 1 + treeHeight; ++yOffset) {
          int radius;
          if (yOffset >= y + 1 + treeHeight - 2) {
            radius=2;
          }
 else {
            radius=relaxedGrowth ? 0 : 1;
          }
          if (yOffset >= 0 & yOffset < worldHeight) {
            if (radius == 0) {
              block=world.getBlock(x,yOffset,z);
              if (!(block.isLeaves(world,x,yOffset,z) || block.isAir(world,x,yOffset,z) || block.isReplaceable(world,x,yOffset,z)|| block.canBeReplacedByLeaves(world,x,yOffset,z))) {
                return false;
              }
              if (!waterLoving && yOffset >= y + 1) {
                radius=1;
                for (xOffset=x - radius; xOffset <= x + radius; ++xOffset) {
                  for (zOffset=z - radius; zOffset <= z + radius; ++zOffset) {
                    block=world.getBlock(xOffset,yOffset,zOffset);
                    if (block.getMaterial().isLiquid()) {
                      return false;
                    }
                  }
                }
              }
            }
 else             for (xOffset=x - radius; xOffset <= x + radius; ++xOffset) {
              for (zOffset=z - radius; zOffset <= z + radius; ++zOffset) {
                block=world.getBlock(xOffset,yOffset,zOffset);
                if (!(block.isLeaves(world,xOffset,yOffset,zOffset) || block.isAir(world,xOffset,yOffset,zOffset) || block.canBeReplacedByLeaves(world,xOffset,yOffset,zOffset))) {
                  return false;
                }
              }
            }
          }
 else {
            return false;
          }
        }
        if (genSurface != null && !canGenerateInBlock(world,x,y - 1,z,genSurface))         return false;
        block=world.getBlock(x,y - 1,z);
        block.onPlantGrow(world,x,y - 1,z,x,y,z);
      }
      boolean r=false;
      for (yOffset=y - 3 + treeHeight; yOffset <= y + treeHeight; ++yOffset) {
        int var12=yOffset - (y + treeHeight), center=1 - var12 / 2;
        for (xOffset=x - center; xOffset <= x + center; ++xOffset) {
          int xPos=xOffset - x, t;
          xPos=(xPos + (t=xPos >> 31)) ^ t;
          for (zOffset=z - center; zOffset <= z + center; ++zOffset) {
            int zPos=zOffset - z;
            zPos=(zPos + (t=zPos >> 31)) ^ t;
            block=world.getBlock(xOffset,yOffset,zOffset);
            if (((xPos != center | zPos != center) || rand.nextInt(2) != 0 && var12 != 0) && (!treeChecks || block.isLeaves(world,xOffset,yOffset,zOffset) || block.isAir(world,xOffset,yOffset,zOffset)|| block.canBeReplacedByLeaves(world,xOffset,yOffset,zOffset))) {
              r|=generateBlock(world,xOffset,yOffset,zOffset,genBlock,leaves);
            }
          }
        }
      }
      for (yOffset=0; yOffset < treeHeight; ++yOffset) {
        block=world.getBlock(x,y + yOffset,z);
        if (!treeChecks || block.isAir(world,x,y + yOffset,z) || block.isLeaves(world,x,y + yOffset,z)|| block.isReplaceable(world,x,y + yOffset,z)) {
          r|=generateBlock(world,x,yOffset + y,z,genBlock,trunk);
        }
      }
      return r;
    }
  }
  return false;
}"
60004,"protected Entry index(int index){
  Entry x;
  if (index < (size >> 1)) {
    x=head;
    for (int i=index; i-- > 0; )     x=x.next;
  }
 else {
    x=tail;
    for (int i=size; i-- > index; )     x=x.prev;
  }
  return x;
}","protected Entry index(int index){
  Entry x;
  if (index < (size >> 1)) {
    x=head;
    for (int i=index; i-- > 0; )     x=x.next;
  }
 else {
    x=tail;
    for (int i=size - 1; i-- > index; )     x=x.prev;
  }
  return x;
}"
60005,"@Override public boolean generate(World world,Random rand,int x,int y,int z){
  final int veinSize=genVeinSize;
  final int branchSize=1 + (veinSize / 30);
  final int subBranchSize=1 + (branchSize / 5);
  boolean r=false;
  for (int blocksVein=0; blocksVein <= veinSize; ) {
    int posX=x;
    int posY=y;
    int posZ=z;
    int directionChange=rand.nextInt(6);
    int directionX=rand.nextInt(2);
    int directionY=rand.nextInt(2);
    int directionZ=rand.nextInt(2);
{
      directionX+=~directionX >>> 31;
      directionX+=~directionY >>> 31;
      directionX+=~directionZ >>> 31;
    }
    for (int blocksBranch=0; blocksBranch <= branchSize; ) {
      if (directionChange != 1) {
        posX+=rand.nextInt(2) * directionX;
      }
      if (directionChange != 2) {
        posY+=rand.nextInt(2) * directionY;
      }
      if (directionChange != 3) {
        posZ+=rand.nextInt(2) * directionZ;
      }
      if (rand.nextInt(3) == 0) {
        int posX2=posX;
        int posY2=posY;
        int posZ2=posZ;
        int directionChange2=rand.nextInt(6);
        int directionX2=-rand.nextInt(2);
        int directionY2=-rand.nextInt(2);
        int directionZ2=-rand.nextInt(2);
{
          directionX2+=~directionX2 >>> 31;
          directionX2+=~directionY2 >>> 31;
          directionX2+=~directionZ2 >>> 31;
        }
        for (int blocksSubBranch=0; blocksSubBranch <= subBranchSize; ) {
          if (directionChange2 != 0) {
            posX2+=rand.nextInt(2) * directionX2;
          }
          if (directionChange2 != 1) {
            posY2+=rand.nextInt(2) * directionY2;
          }
          if (directionChange2 != 2) {
            posZ2+=rand.nextInt(2) * directionZ2;
          }
          r|=generateBlock(world,posX2,posY2,posZ2,genBlock,cluster);
          if (sparse) {
            blocksVein++;
            blocksBranch++;
          }
          blocksSubBranch++;
        }
      }
      r|=generateBlock(world,posX,posY,posZ,genBlock,cluster);
      blocksBranch++;
    }
    x=x + (rand.nextInt(3) - 1);
    y=y + (rand.nextInt(3) - 1);
    z=z + (rand.nextInt(3) - 1);
    blocksVein++;
  }
  return r;
}","@Override public boolean generate(World world,Random rand,int x,int y,int z){
  final int veinSize=genVeinSize;
  final int branchSize=1 + (veinSize / 30);
  final int subBranchSize=1 + (branchSize / 5);
  boolean r=false;
  for (int blocksVein=0; blocksVein <= veinSize; ) {
    int posX=x;
    int posY=y;
    int posZ=z;
    int directionChange=rand.nextInt(6);
    int directionX=-rand.nextInt(2);
    int directionY=-rand.nextInt(2);
    int directionZ=-rand.nextInt(2);
{
      directionX+=~directionX >>> 31;
      directionX+=~directionY >>> 31;
      directionX+=~directionZ >>> 31;
    }
    for (int blocksBranch=0; blocksBranch <= branchSize; ) {
      if (directionChange != 1) {
        posX+=rand.nextInt(2) * directionX;
      }
      if (directionChange != 2) {
        posY+=rand.nextInt(2) * directionY;
      }
      if (directionChange != 3) {
        posZ+=rand.nextInt(2) * directionZ;
      }
      if (rand.nextInt(3) == 0) {
        int posX2=posX;
        int posY2=posY;
        int posZ2=posZ;
        int directionChange2=rand.nextInt(6);
        int directionX2=-rand.nextInt(2);
        int directionY2=-rand.nextInt(2);
        int directionZ2=-rand.nextInt(2);
{
          directionX2+=~directionX2 >>> 31;
          directionX2+=~directionY2 >>> 31;
          directionX2+=~directionZ2 >>> 31;
        }
        for (int blocksSubBranch=0; blocksSubBranch <= subBranchSize; ) {
          if (directionChange2 != 0) {
            posX2+=rand.nextInt(2) * directionX2;
          }
          if (directionChange2 != 1) {
            posY2+=rand.nextInt(2) * directionY2;
          }
          if (directionChange2 != 2) {
            posZ2+=rand.nextInt(2) * directionZ2;
          }
          r|=generateBlock(world,posX2,posY2,posZ2,genBlock,cluster);
          if (sparse) {
            blocksVein++;
            blocksBranch++;
          }
          blocksSubBranch++;
        }
      }
      r|=generateBlock(world,posX,posY,posZ,genBlock,cluster);
      blocksBranch++;
    }
    x=x + (rand.nextInt(3) - 1);
    y=y + (rand.nextInt(3) - 1);
    z=z + (rand.nextInt(3) - 1);
    blocksVein++;
  }
  return r;
}"
60006,"public boolean isEqual(ItemWrapper other){
  if (other == null) {
    return false;
  }
  if (metadata == other.metadata) {
    if (item == other.item) {
      return true;
    }
    if (item != null && other.item != null) {
      return item.delegate.get() == item.delegate.get();
    }
  }
  return false;
}","public boolean isEqual(ItemWrapper other){
  if (other == null) {
    return false;
  }
  if (metadata == other.metadata) {
    if (item == other.item) {
      return true;
    }
    if (item != null && other.item != null) {
      return item.delegate.get() == other.item.delegate.get();
    }
  }
  return false;
}"
60007,"@Override public boolean generate(World world,Random rand,int x,int y,int z){
  int blocks=genClusterSize;
  if (blocks < 4) {
    return generateTiny(world,rand,x,y,z);
  }
  float f=rand.nextFloat() * (float)Math.PI;
  float xMin=x + 8 + (MathHelper.sin(f) * blocks) / 8F;
  float xMax=x + 8 - (MathHelper.sin(f) * blocks) / 8F;
  float zMin=z + 8 + (MathHelper.cos(f) * blocks) / 8F;
  float zMax=z + 8 - (MathHelper.cos(f) * blocks) / 8F;
  float yMin=(y + rand.nextInt(3)) - 2;
  float yMax=(y + rand.nextInt(3)) - 2;
  xMax-=xMin;
  yMax-=yMin;
  zMax-=zMin;
  boolean r=false;
  for (int i=0; i <= blocks; i++) {
    float xCenter=xMin + (xMax * i) / blocks;
    float yCenter=yMin + (yMax * i) / blocks;
    float zCenter=zMin + (zMax * i) / blocks;
    float size=((float)rand.nextDouble() * blocks) / 16f;
    float hMod=((MathHelper.sin((i * (float)Math.PI) / blocks) + 1f) * size + 1f) * .5f;
    float vMod=((MathHelper.sin((i * (float)Math.PI) / blocks) + 1f) * size + 1f) * .5f;
    int xStart=MathHelper.floor_float(xCenter - hMod);
    int yStart=MathHelper.floor_float(yCenter - vMod);
    int zStart=MathHelper.floor_float(zCenter - hMod);
    int xStop=MathHelper.floor_float(xCenter + hMod);
    int yStop=MathHelper.floor_float(yCenter + vMod);
    int zStop=MathHelper.floor_float(zCenter + hMod);
    for (int blockX=xStart; blockX <= xStop; blockX++) {
      float xDistSq=((blockX + .5f) - xCenter) / hMod;
      xDistSq*=xDistSq;
      if (xDistSq >= 1f) {
        continue;
      }
      for (int blockY=yStart; blockY <= yStop; blockY++) {
        float yDistSq=((blockY + .5f) - yCenter) / vMod;
        yDistSq*=yDistSq;
        float xyDistSq=yDistSq + xDistSq;
        if (xyDistSq >= 1f) {
          continue;
        }
        for (int blockZ=zStart; blockZ <= zStop; blockZ++) {
          float zDistSq=((blockZ + .5f) - zCenter) / hMod;
          xDistSq*=zDistSq;
          if (zDistSq + xyDistSq >= 1f) {
            continue;
          }
          r|=generateBlock(world,blockX,blockY,blockZ,genBlock,cluster);
        }
      }
    }
  }
  return r;
}","@Override public boolean generate(World world,Random rand,int x,int y,int z){
  int blocks=genClusterSize;
  if (blocks < 4) {
    return generateTiny(world,rand,x,y,z);
  }
  float f=rand.nextFloat() * (float)Math.PI;
  float xMin=x + 8 + (MathHelper.sin(f) * blocks) / 8F;
  float xMax=x + 8 - (MathHelper.sin(f) * blocks) / 8F;
  float zMin=z + 8 + (MathHelper.cos(f) * blocks) / 8F;
  float zMax=z + 8 - (MathHelper.cos(f) * blocks) / 8F;
  float yMin=(y + rand.nextInt(3)) - 2;
  float yMax=(y + rand.nextInt(3)) - 2;
  xMax-=xMin;
  yMax-=yMin;
  zMax-=zMin;
  boolean r=false;
  for (int i=0; i <= blocks; i++) {
    float xCenter=xMin + (xMax * i) / blocks;
    float yCenter=yMin + (yMax * i) / blocks;
    float zCenter=zMin + (zMax * i) / blocks;
    float size=((float)rand.nextDouble() * blocks) / 16f;
    float hMod=((MathHelper.sin((i * (float)Math.PI) / blocks) + 1f) * size + 1f) * .5f;
    float vMod=((MathHelper.sin((i * (float)Math.PI) / blocks) + 1f) * size + 1f) * .5f;
    int xStart=MathHelper.floor_float(xCenter - hMod);
    int yStart=MathHelper.floor_float(yCenter - vMod);
    int zStart=MathHelper.floor_float(zCenter - hMod);
    int xStop=MathHelper.floor_float(xCenter + hMod);
    int yStop=MathHelper.floor_float(yCenter + vMod);
    int zStop=MathHelper.floor_float(zCenter + hMod);
    for (int blockX=xStart; blockX <= xStop; blockX++) {
      float xDistSq=((blockX + .5f) - xCenter) / hMod;
      xDistSq*=xDistSq;
      if (xDistSq >= 1f) {
        continue;
      }
      for (int blockY=yStart; blockY <= yStop; blockY++) {
        float yDistSq=((blockY + .5f) - yCenter) / vMod;
        yDistSq*=yDistSq;
        float xyDistSq=yDistSq + xDistSq;
        if (xyDistSq >= 1f) {
          continue;
        }
        for (int blockZ=zStart; blockZ <= zStop; blockZ++) {
          float zDistSq=((blockZ + .5f) - zCenter) / hMod;
          zDistSq*=zDistSq;
          if (zDistSq + xyDistSq >= 1f) {
            continue;
          }
          r|=generateBlock(world,blockX,blockY,blockZ,genBlock,cluster);
        }
      }
    }
  }
  return r;
}"
60008,"@Override public boolean generate(World world,Random rand,int x,int y,int z){
  int blocks=genClusterSize;
  float f=rand.nextFloat() * (float)Math.PI;
  float yMin=(y + rand.nextInt(3)) - 2;
  float yMax=(y + rand.nextInt(3)) - 2;
  if (blocks == 1 && yMin > yMax) {
    ++blocks;
  }
  if (blocks == 2 && f > (float)Math.PI * 0.5f) {
    ++blocks;
  }
  float xMin=x + 8 + (MathHelper.sin(f) * blocks) / 8F;
  float xMax=x + 8 - (MathHelper.sin(f) * blocks) / 8F;
  float zMin=z + 8 + (MathHelper.cos(f) * blocks) / 8F;
  float zMax=z + 8 - (MathHelper.cos(f) * blocks) / 8F;
  xMax-=xMin;
  yMax-=yMin;
  zMax-=zMin;
  boolean r=false;
  for (int i=0; i <= blocks; i++) {
    float xCenter=xMin + (xMax * i) / blocks;
    float yCenter=yMin + (yMax * i) / blocks;
    float zCenter=zMin + (zMax * i) / blocks;
    float size=((float)rand.nextDouble() * blocks) / 16f;
    float hMod=((MathHelper.sin((i * (float)Math.PI) / blocks) + 1f) * size + 1f) * .5f;
    float vMod=((MathHelper.sin((i * (float)Math.PI) / blocks) + 1f) * size + 1f) * .5f;
    int xStart=MathHelper.floor_float(xCenter - hMod);
    int yStart=MathHelper.floor_float(yCenter - vMod);
    int zStart=MathHelper.floor_float(zCenter - hMod);
    int xStop=MathHelper.floor_float(xCenter + hMod);
    int yStop=MathHelper.floor_float(yCenter + vMod);
    int zStop=MathHelper.floor_float(zCenter + hMod);
    for (int blockX=xStart; blockX <= xStop; blockX++) {
      float xDistSq=((blockX + .5f) - xCenter) / hMod;
      xDistSq*=xDistSq;
      if (xDistSq >= 1f) {
        continue;
      }
      for (int blockY=yStart; blockY <= yStop; blockY++) {
        float yDistSq=((blockY + .5f) - yCenter) / vMod;
        yDistSq*=yDistSq;
        float xyDistSq=yDistSq + xDistSq;
        if (xyDistSq >= 1f) {
          continue;
        }
        for (int blockZ=zStart; blockZ <= zStop; blockZ++) {
          float zDistSq=((blockZ + .5f) - zCenter) / hMod;
          xDistSq*=zDistSq;
          if (zDistSq + xyDistSq >= 1f) {
            continue;
          }
          r|=generateBlock(world,blockX,blockY,blockZ,genBlock,cluster);
        }
      }
    }
  }
  return r;
}","@Override public boolean generate(World world,Random rand,int x,int y,int z){
  int blocks=genClusterSize;
  float f=rand.nextFloat() * (float)Math.PI;
  float yMin=(y + rand.nextInt(3)) - 2;
  float yMax=(y + rand.nextInt(3)) - 2;
  if (blocks == 1 && yMin > yMax) {
    ++blocks;
  }
  if (blocks == 2 && f > (float)Math.PI * 0.5f) {
    ++blocks;
  }
  float xMin=x + 8 + (MathHelper.sin(f) * blocks) / 8F;
  float xMax=x + 8 - (MathHelper.sin(f) * blocks) / 8F;
  float zMin=z + 8 + (MathHelper.cos(f) * blocks) / 8F;
  float zMax=z + 8 - (MathHelper.cos(f) * blocks) / 8F;
  xMax-=xMin;
  yMax-=yMin;
  zMax-=zMin;
  boolean r=false;
  for (int i=0; i <= blocks; i++) {
    float xCenter=xMin + (xMax * i) / blocks;
    float yCenter=yMin + (yMax * i) / blocks;
    float zCenter=zMin + (zMax * i) / blocks;
    float size=((float)rand.nextDouble() * blocks) / 16f;
    float hMod=((MathHelper.sin((i * (float)Math.PI) / blocks) + 1f) * size + 1f) * .5f;
    float vMod=((MathHelper.sin((i * (float)Math.PI) / blocks) + 1f) * size + 1f) * .5f;
    int xStart=MathHelper.floor_float(xCenter - hMod);
    int yStart=MathHelper.floor_float(yCenter - vMod);
    int zStart=MathHelper.floor_float(zCenter - hMod);
    int xStop=MathHelper.floor_float(xCenter + hMod);
    int yStop=MathHelper.floor_float(yCenter + vMod);
    int zStop=MathHelper.floor_float(zCenter + hMod);
    for (int blockX=xStart; blockX <= xStop; blockX++) {
      float xDistSq=((blockX + .5f) - xCenter) / hMod;
      xDistSq*=xDistSq;
      if (xDistSq >= 1f) {
        continue;
      }
      for (int blockY=yStart; blockY <= yStop; blockY++) {
        float yDistSq=((blockY + .5f) - yCenter) / vMod;
        yDistSq*=yDistSq;
        float xyDistSq=yDistSq + xDistSq;
        if (xyDistSq >= 1f) {
          continue;
        }
        for (int blockZ=zStart; blockZ <= zStop; blockZ++) {
          float zDistSq=((blockZ + .5f) - zCenter) / hMod;
          zDistSq*=zDistSq;
          if (zDistSq + xyDistSq >= 1f) {
            continue;
          }
          r|=generateBlock(world,blockX,blockY,blockZ,genBlock,cluster);
        }
      }
    }
  }
  return r;
}"
60009,"@Override public void set(E e){
  if (lastReturned == null)   throw new IllegalStateException();
  checkForComodification();
  linkBefore(e,lastReturned);
  delete(lastReturned);
  expectedModCount+=2;
}","@Override public void set(E e){
  checkForComodification();
  if (lastReturned == null)   throw new IllegalStateException();
  linkBefore(e,lastReturned);
  unlink(lastReturned);
  lastReturned=(next == null) ? tail : next.prev;
  expectedModCount+=2;
}"
60010,"public static void clearClientNames(){
  clientFrequencyNames=new LinkedHashMap<String,String>();
  clientFrequencyNamesReversed=new LinkedHashMap<String,String>();
}","public static void clearClientNames(){
  clientFrequencyNames.clear();
  clientFrequencyNamesReversed.clear();
}"
60011,"@Override public void handleMouseInput(){
  mouseX=Mouse.getEventX() * width / mc.displayWidth - guiLeft;
  mouseY=height - Mouse.getEventY() * height / mc.displayHeight - 1 - guiTop;
  int wheelMovement=Mouse.getEventDWheel();
  if (wheelMovement != 0) {
    for (int i=elements.size(); i-- > 0; ) {
      ElementBase c=elements.get(i);
      if (!c.isVisible() || !c.isEnabled() || !c.intersectsWith(mouseX,mouseY)) {
        continue;
      }
      if (c.onMouseWheel(mouseX,mouseY,wheelMovement)) {
        return;
      }
    }
  }
  super.handleMouseInput();
}","@Override public void handleMouseInput(){
  int x=Mouse.getEventX() * width / mc.displayWidth - guiLeft;
  int y=height - Mouse.getEventY() * height / mc.displayHeight - 1 - guiTop;
  mouseX=x - guiLeft;
  mouseY=y - guiTop;
  int wheelMovement=Mouse.getEventDWheel();
  if (wheelMovement != 0) {
    for (int i=elements.size(); i-- > 0; ) {
      ElementBase c=elements.get(i);
      if (!c.isVisible() || !c.isEnabled() || !c.intersectsWith(mouseX,mouseY)) {
        continue;
      }
      if (c.onMouseWheel(mouseX,mouseY,wheelMovement)) {
        return;
      }
    }
  }
  super.handleMouseInput();
}"
60012,"public void drawTooltip(List<String> list){
  drawTooltipHoveringText(list,mouseX,mouseY,fontRendererObj);
  tooltip.clear();
}","public void drawTooltip(List<String> list){
  drawTooltipHoveringText(list,mouseX + guiLeft,mouseY + guiTop,fontRendererObj);
  tooltip.clear();
}"
60013,"protected void updateElements(){
  for (int i=elements.size(); i-- > 0; ) {
    ElementBase c=elements.get(i);
    if (c.isVisible() && c.isEnabled()) {
      c.update(mouseX,mouseY);
    }
  }
}","protected final void updateElements(){
  for (int i=elements.size(); i-- > 0; ) {
    ElementBase c=elements.get(i);
    if (c.isVisible() && c.isEnabled()) {
      c.update(mouseX,mouseY);
    }
  }
}"
60014,"protected void doRenderItem(ItemRenderType type,ItemStack item,Item iconItem,FluidStack liquid){
  IIcon icon=iconItem.getIcon(item,0);
  IIcon mask=iconItem.getIcon(item,1);
  boolean hasLiquid=liquid != null;
  IIcon fluid=hasLiquid ? liquid != null ? liquid.getFluid().getIcon(liquid) : null : mask;
  int liquidSheet=hasLiquid & liquid != null ? liquid.getFluid().getSpriteNumber() : 0;
  int colorMult=hasLiquid & liquid != null ? liquid.getFluid().getColor(liquid) : 0xFFFFFF;
  boolean isFloaty=hasLiquid & liquid != null ? liquid.getFluid().getDensity(liquid) < 0 : false;
  if (fluid == null) {
    fluid=Blocks.flowing_lava.getIcon(2,0);
    liquidSheet=0;
    colorMult=0x3F3F3F;
  }
  TextureManager renderEngine=Minecraft.getMinecraft().renderEngine;
  GL11.glPushMatrix();
  Tessellator tessellator=Tessellator.instance;
  float iconMinX=icon.getMinU();
  float iconMaxX=icon.getMaxU();
  float iconMinY=icon.getMinV();
  float iconMaxY=icon.getMaxV();
  float maskMinX=mask.getMinU();
  float maskMaxX=mask.getMaxU();
  float maskMinY=mask.getMinV();
  float maskMaxY=mask.getMaxV();
  float fluidMinX=fluid.getMinU();
  float fluidMaxX=fluid.getMaxU();
  float fluidMinY=fluid.getMinV();
  float fluidMaxY=fluid.getMaxV();
  if (isFloaty && canFlip) {
    iconMaxY=icon.getMinV();
    iconMinY=icon.getMaxV();
    maskMaxY=mask.getMinV();
    maskMinY=mask.getMaxV();
    fluidMaxY=fluid.getMinV();
    fluidMinY=fluid.getMaxV();
  }
  TextureUtil.func_147950_a(false,false);
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glEnable(GL11.GL_ALPHA_TEST);
  OpenGlHelper.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA,GL11.GL_ONE,GL11.GL_ZERO);
  if (type == ItemRenderType.INVENTORY) {
    GL11.glDisable(GL11.GL_LIGHTING);
    tessellator.startDrawingQuads();
    tessellator.addVertexWithUV(0,16,0,iconMinX,iconMaxY);
    tessellator.addVertexWithUV(16,16,0,iconMaxX,iconMaxY);
    tessellator.addVertexWithUV(16,0,0,iconMaxX,iconMinY);
    tessellator.addVertexWithUV(0,0,0,iconMinX,iconMinY);
    tessellator.draw();
    if (hasLiquid) {
      tessellator.startDrawingQuads();
      tessellator.addVertexWithUV(0,16,0.001,maskMinX,maskMaxY);
      tessellator.addVertexWithUV(16,16,0.001,maskMaxX,maskMaxY);
      tessellator.addVertexWithUV(16,0,0.001,maskMaxX,maskMinY);
      tessellator.addVertexWithUV(0,0,0.001,maskMinX,maskMinY);
      tessellator.draw();
      GL11.glEnable(GL11.GL_CULL_FACE);
      GL11.glDepthFunc(GL11.GL_EQUAL);
      GL11.glDepthMask(false);
      GL11.glMatrixMode(GL11.GL_TEXTURE);
      bindTexture(renderEngine,liquidSheet);
      OpenGlHelper.glBlendFunc(GL11.GL_ONE,GL11.GL_ZERO,GL11.GL_ONE,GL11.GL_ZERO);
      tessellator.startDrawingQuads();
      tessellator.setColorOpaque_I(colorMult);
      tessellator.addVertexWithUV(0,16,0.001,fluidMinX,fluidMaxY);
      tessellator.addVertexWithUV(16,16,0.001,fluidMaxX,fluidMaxY);
      tessellator.addVertexWithUV(16,0,0.001,fluidMaxX,fluidMinY);
      tessellator.addVertexWithUV(0,0,0.001,fluidMinX,fluidMinY);
      tessellator.draw();
      GL11.glMatrixMode(GL11.GL_MODELVIEW);
      GL11.glDepthMask(true);
      GL11.glDepthFunc(GL11.GL_LEQUAL);
    }
    GL11.glEnable(GL11.GL_LIGHTING);
  }
 else {
    GL11.glEnable(GL12.GL_RESCALE_NORMAL);
    if (type == ItemRenderType.ENTITY) {
      GL11.glTranslatef(0.5f,4 / -16f,0);
      GL11.glRotatef(180,0,1,0);
    }
    ItemRenderer.renderItemIn2D(tessellator,iconMaxX,iconMinY,iconMinX,iconMaxY,icon.getIconWidth(),icon.getIconHeight(),0.0625F);
    if (hasLiquid) {
      tessellator.startDrawingQuads();
      tessellator.setNormal(0,0,1);
      tessellator.addVertexWithUV(0,0,0.001,maskMaxX,maskMaxY);
      tessellator.addVertexWithUV(1,0,0.001,maskMinX,maskMaxY);
      tessellator.addVertexWithUV(1,1,0.001,maskMinX,maskMinY);
      tessellator.addVertexWithUV(0,1,0.001,maskMaxX,maskMinY);
      tessellator.draw();
      tessellator.startDrawingQuads();
      tessellator.setNormal(0,0,-1);
      tessellator.addVertexWithUV(0,1,-0.0635,maskMinX,maskMinY);
      tessellator.addVertexWithUV(1,1,-0.0635,maskMaxX,maskMinY);
      tessellator.addVertexWithUV(1,0,-0.0635,maskMaxX,maskMaxY);
      tessellator.addVertexWithUV(0,0,-0.0635,maskMinX,maskMaxY);
      tessellator.draw();
      GL11.glEnable(GL11.GL_CULL_FACE);
      GL11.glDepthFunc(GL11.GL_EQUAL);
      GL11.glDepthMask(false);
      bindTexture(renderEngine,liquidSheet);
      OpenGlHelper.glBlendFunc(GL11.GL_ONE,GL11.GL_ZERO,GL11.GL_ONE,GL11.GL_ZERO);
      tessellator.startDrawingQuads();
      tessellator.setNormal(0,0,1);
      tessellator.setColorOpaque_I(colorMult);
      tessellator.addVertexWithUV(0,0,0.001,fluidMaxX,fluidMaxY);
      tessellator.addVertexWithUV(1,0,0.001,fluidMinX,fluidMaxY);
      tessellator.addVertexWithUV(1,1,0.001,fluidMinX,fluidMinY);
      tessellator.addVertexWithUV(0,1,0.001,fluidMaxX,fluidMinY);
      tessellator.draw();
      tessellator.startDrawingQuads();
      tessellator.setNormal(0,0,-1);
      tessellator.setColorOpaque_I(colorMult);
      tessellator.addVertexWithUV(0,1,-0.0635,fluidMinX,fluidMinY);
      tessellator.addVertexWithUV(1,1,-0.0635,fluidMaxX,fluidMinY);
      tessellator.addVertexWithUV(1,0,-0.0635,fluidMaxX,fluidMaxY);
      tessellator.addVertexWithUV(0,0,-0.0635,fluidMinX,fluidMaxY);
      tessellator.draw();
      GL11.glDepthMask(true);
      GL11.glDepthFunc(GL11.GL_LEQUAL);
    }
    OpenGlHelper.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA,GL11.GL_ONE,GL11.GL_ZERO);
    GL11.glDisable(GL12.GL_RESCALE_NORMAL);
    GL11.glDisable(GL11.GL_ALPHA_TEST);
    TextureUtil.func_147945_b();
  }
  GL11.glPopMatrix();
}","protected void doRenderItem(ItemRenderType type,ItemStack item,Item iconItem,FluidStack liquid){
  IIcon icon=iconItem.getIcon(item,0);
  IIcon mask=iconItem.getIcon(item,1);
  boolean hasLiquid=liquid != null;
  IIcon fluid=hasLiquid ? liquid != null ? liquid.getFluid().getIcon(liquid) : null : mask;
  int liquidSheet=hasLiquid & liquid != null ? liquid.getFluid().getSpriteNumber() : 0;
  int colorMult=hasLiquid & liquid != null ? liquid.getFluid().getColor(liquid) : 0xFFFFFF;
  boolean isFloaty=hasLiquid & liquid != null ? liquid.getFluid().getDensity(liquid) < 0 : false;
  if (fluid == null) {
    fluid=Blocks.flowing_lava.getIcon(2,0);
    liquidSheet=0;
    colorMult=0x3F3F3F;
  }
  TextureManager renderEngine=Minecraft.getMinecraft().renderEngine;
  GL11.glPushMatrix();
  Tessellator tessellator=Tessellator.instance;
  float iconMinX=icon.getMinU();
  float iconMaxX=icon.getMaxU();
  float iconMinY=icon.getMinV();
  float iconMaxY=icon.getMaxV();
  float maskMinX=mask.getMinU();
  float maskMaxX=mask.getMaxU();
  float maskMinY=mask.getMinV();
  float maskMaxY=mask.getMaxV();
  float fluidMinX=fluid.getMinU();
  float fluidMaxX=fluid.getMaxU();
  float fluidMinY=fluid.getMinV();
  float fluidMaxY=fluid.getMaxV();
  if (isFloaty && canFlip) {
    iconMaxY=icon.getMinV();
    iconMinY=icon.getMaxV();
    maskMaxY=mask.getMinV();
    maskMinY=mask.getMaxV();
    fluidMaxY=fluid.getMinV();
    fluidMinY=fluid.getMaxV();
  }
  TextureUtil.func_147950_a(false,false);
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glEnable(GL11.GL_ALPHA_TEST);
  OpenGlHelper.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA,GL11.GL_ONE,GL11.GL_ZERO);
  if (type == ItemRenderType.INVENTORY) {
    GL11.glDisable(GL11.GL_LIGHTING);
    tessellator.startDrawingQuads();
    tessellator.addVertexWithUV(0,16,0,iconMinX,iconMaxY);
    tessellator.addVertexWithUV(16,16,0,iconMaxX,iconMaxY);
    tessellator.addVertexWithUV(16,0,0,iconMaxX,iconMinY);
    tessellator.addVertexWithUV(0,0,0,iconMinX,iconMinY);
    tessellator.draw();
    if (hasLiquid) {
      tessellator.startDrawingQuads();
      tessellator.addVertexWithUV(0,16,0.001,maskMinX,maskMaxY);
      tessellator.addVertexWithUV(16,16,0.001,maskMaxX,maskMaxY);
      tessellator.addVertexWithUV(16,0,0.001,maskMaxX,maskMinY);
      tessellator.addVertexWithUV(0,0,0.001,maskMinX,maskMinY);
      tessellator.draw();
      GL11.glEnable(GL11.GL_CULL_FACE);
      GL11.glDepthFunc(GL11.GL_EQUAL);
      GL11.glDepthMask(false);
      GL11.glMatrixMode(GL11.GL_TEXTURE);
      bindTexture(renderEngine,liquidSheet);
      OpenGlHelper.glBlendFunc(GL11.GL_ONE,GL11.GL_ZERO,GL11.GL_ONE,GL11.GL_ZERO);
      tessellator.startDrawingQuads();
      tessellator.setColorOpaque_I(colorMult);
      tessellator.addVertexWithUV(0,16,0.001,fluidMinX,fluidMaxY);
      tessellator.addVertexWithUV(16,16,0.001,fluidMaxX,fluidMaxY);
      tessellator.addVertexWithUV(16,0,0.001,fluidMaxX,fluidMinY);
      tessellator.addVertexWithUV(0,0,0.001,fluidMinX,fluidMinY);
      tessellator.draw();
      GL11.glMatrixMode(GL11.GL_MODELVIEW);
      GL11.glDepthMask(true);
      GL11.glDepthFunc(GL11.GL_LEQUAL);
    }
    GL11.glEnable(GL11.GL_LIGHTING);
  }
 else {
    GL11.glEnable(GL12.GL_RESCALE_NORMAL);
    if (type == ItemRenderType.ENTITY) {
      GL11.glTranslatef(0.5f,4 / -16f,0);
      GL11.glRotatef(180,0,1,0);
    }
    ItemRenderer.renderItemIn2D(tessellator,iconMaxX,iconMinY,iconMinX,iconMaxY,icon.getIconWidth(),icon.getIconHeight(),0.0625F);
    if (hasLiquid) {
      tessellator.startDrawingQuads();
      tessellator.setNormal(0,0,1);
      tessellator.addVertexWithUV(0,0,0.001,maskMaxX,maskMaxY);
      tessellator.addVertexWithUV(1,0,0.001,maskMinX,maskMaxY);
      tessellator.addVertexWithUV(1,1,0.001,maskMinX,maskMinY);
      tessellator.addVertexWithUV(0,1,0.001,maskMaxX,maskMinY);
      tessellator.draw();
      tessellator.startDrawingQuads();
      tessellator.setNormal(0,0,-1);
      tessellator.addVertexWithUV(0,1,-0.0635,maskMinX,maskMinY);
      tessellator.addVertexWithUV(1,1,-0.0635,maskMaxX,maskMinY);
      tessellator.addVertexWithUV(1,0,-0.0635,maskMaxX,maskMaxY);
      tessellator.addVertexWithUV(0,0,-0.0635,maskMinX,maskMaxY);
      tessellator.draw();
      GL11.glEnable(GL11.GL_CULL_FACE);
      GL11.glDepthFunc(GL11.GL_EQUAL);
      GL11.glDepthMask(false);
      bindTexture(renderEngine,liquidSheet);
      OpenGlHelper.glBlendFunc(GL11.GL_ONE,GL11.GL_ZERO,GL11.GL_ONE,GL11.GL_ZERO);
      tessellator.startDrawingQuads();
      tessellator.setNormal(0,0,1);
      tessellator.setColorOpaque_I(colorMult);
      tessellator.addVertexWithUV(0,0,0.001,fluidMaxX,fluidMaxY);
      tessellator.addVertexWithUV(1,0,0.001,fluidMinX,fluidMaxY);
      tessellator.addVertexWithUV(1,1,0.001,fluidMinX,fluidMinY);
      tessellator.addVertexWithUV(0,1,0.001,fluidMaxX,fluidMinY);
      tessellator.draw();
      tessellator.startDrawingQuads();
      tessellator.setNormal(0,0,-1);
      tessellator.setColorOpaque_I(colorMult);
      tessellator.addVertexWithUV(0,1,-0.0635,fluidMinX,fluidMinY);
      tessellator.addVertexWithUV(1,1,-0.0635,fluidMaxX,fluidMinY);
      tessellator.addVertexWithUV(1,0,-0.0635,fluidMaxX,fluidMaxY);
      tessellator.addVertexWithUV(0,0,-0.0635,fluidMinX,fluidMaxY);
      tessellator.draw();
      GL11.glDepthMask(true);
      GL11.glDepthFunc(GL11.GL_LEQUAL);
    }
    GL11.glDisable(GL12.GL_RESCALE_NORMAL);
  }
  OpenGlHelper.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA,GL11.GL_ONE,GL11.GL_ZERO);
  GL11.glDisable(GL11.GL_ALPHA_TEST);
  TextureUtil.func_147945_b();
  GL11.glPopMatrix();
}"
60015,"/** 
 * Draws the tabs for this GUI. Handles Tab open/close animation.
 */
protected void drawTabs(float partialTick,boolean foreground){
  if (foreground) {
    return;
  }
  int yPosRight=4;
  int yPosLeft=4;
  for (int i=tabs.size(); i-- > 0; ) {
    TabBase tab=tabs.get(i);
    tab.update();
    if (!tab.isVisible()) {
      continue;
    }
    if (tab.side == 0) {
      tab.draw(guiLeft,guiTop + yPosLeft);
      yPosLeft+=tab.currentHeight;
    }
 else {
      tab.draw(guiLeft + xSize,guiTop + yPosRight);
      yPosRight+=tab.currentHeight;
    }
  }
}","/** 
 * Draws the tabs for this GUI. Handles Tab open/close animation.
 */
protected void drawTabs(float partialTick,boolean foreground){
  if (foreground) {
    return;
  }
  int yPosRight=4;
  int yPosLeft=4;
  for (int i=0; i < tabs.size(); i++) {
    TabBase tab=tabs.get(i);
    tab.update();
    if (!tab.isVisible()) {
      continue;
    }
    if (tab.side == 0) {
      tab.draw(guiLeft,guiTop + yPosLeft);
      yPosLeft+=tab.currentHeight;
    }
 else {
      tab.draw(guiLeft + xSize,guiTop + yPosRight);
      yPosRight+=tab.currentHeight;
    }
  }
}"
60016,"protected TabBase getTabAtPosition(int mX,int mY){
  int xShift=0;
  int yShift=4;
  for (int i=tabs.size(); i-- > 0; ) {
    TabBase tab=tabs.get(i);
    if (!tab.isVisible() || tab.side == 1) {
      continue;
    }
    tab.currentShiftX=xShift;
    tab.currentShiftY=yShift;
    if (tab.intersectsWith(mX,mY,xShift,yShift)) {
      return tab;
    }
    yShift+=tab.currentHeight;
  }
  xShift=xSize;
  yShift=4;
  for (int i=tabs.size(); i-- > 0; ) {
    TabBase tab=tabs.get(i);
    if (!tab.isVisible() || tab.side == 0) {
      continue;
    }
    tab.currentShiftX=xShift;
    tab.currentShiftY=yShift;
    if (tab.intersectsWith(mX,mY,xShift,yShift)) {
      return tab;
    }
    yShift+=tab.currentHeight;
  }
  return null;
}","protected TabBase getTabAtPosition(int mX,int mY){
  int xShift=0;
  int yShift=4;
  for (int i=0; i < tabs.size(); i++) {
    TabBase tab=tabs.get(i);
    if (!tab.isVisible() || tab.side == 1) {
      continue;
    }
    tab.currentShiftX=xShift;
    tab.currentShiftY=yShift;
    if (tab.intersectsWith(mX,mY,xShift,yShift)) {
      return tab;
    }
    yShift+=tab.currentHeight;
  }
  xShift=xSize;
  yShift=4;
  for (int i=0; i < tabs.size(); i++) {
    TabBase tab=tabs.get(i);
    if (!tab.isVisible() || tab.side == 0) {
      continue;
    }
    tab.currentShiftX=xShift;
    tab.currentShiftY=yShift;
    if (tab.intersectsWith(mX,mY,xShift,yShift)) {
      return tab;
    }
    yShift+=tab.currentHeight;
  }
  return null;
}"
60017,"@Override public void handleMouseInput(){
  int x=Mouse.getEventX() * width / mc.displayWidth - guiLeft;
  int y=height - Mouse.getEventY() * height / mc.displayHeight - 1 - guiTop;
  mouseX=x - guiLeft;
  mouseY=y - guiTop;
  int wheelMovement=Mouse.getEventDWheel();
  if (wheelMovement != 0) {
    for (int i=elements.size(); i-- > 0; ) {
      ElementBase c=elements.get(i);
      if (!c.isVisible() || !c.isEnabled() || !c.intersectsWith(mouseX,mouseY)) {
        continue;
      }
      if (c.onMouseWheel(mouseX,mouseY,wheelMovement)) {
        return;
      }
    }
  }
  super.handleMouseInput();
}","@Override public void handleMouseInput(){
  int x=Mouse.getEventX() * width / mc.displayWidth;
  int y=height - Mouse.getEventY() * height / mc.displayHeight - 1;
  mouseX=x - guiLeft;
  mouseY=y - guiTop;
  int wheelMovement=Mouse.getEventDWheel();
  if (wheelMovement != 0) {
    for (int i=elements.size(); i-- > 0; ) {
      ElementBase c=elements.get(i);
      if (!c.isVisible() || !c.isEnabled() || !c.intersectsWith(mouseX,mouseY)) {
        continue;
      }
      if (c.onMouseWheel(mouseX,mouseY,wheelMovement)) {
        return;
      }
    }
  }
  super.handleMouseInput();
}"
60018,"/** 
 * Draws the elements for this GUI.
 */
protected void drawElements(float partialTick,boolean foreground){
  if (foreground) {
    for (int i=elements.size(); i-- > 0; ) {
      ElementBase element=elements.get(i);
      if (element.isVisible()) {
        element.drawForeground(mouseX,mouseY);
      }
    }
  }
 else {
    for (int i=elements.size(); i-- > 0; ) {
      ElementBase element=elements.get(i);
      if (element.isVisible()) {
        element.drawBackground(mouseX,mouseY,partialTick);
      }
    }
  }
}","/** 
 * Draws the elements for this GUI.
 */
protected void drawElements(float partialTick,boolean foreground){
  if (foreground) {
    for (int i=0; i < elements.size(); i++) {
      ElementBase element=elements.get(i);
      if (element.isVisible()) {
        element.drawForeground(mouseX,mouseY);
      }
    }
  }
 else {
    for (int i=0; i < elements.size(); i++) {
      ElementBase element=elements.get(i);
      if (element.isVisible()) {
        element.drawBackground(mouseX,mouseY,partialTick);
      }
    }
  }
}"
60019,"public BlockWrapper(Block block,int metadata){
  this.block=block;
  this.metadata=metadata;
  this.hashcode=block.hashCode() * 31 + metadata;
}","public BlockWrapper(Block block,int metadata){
  this.block=block;
  this.metadata=metadata;
}"
60020,"public static int getHashCode(Block block,int metadata){
  return block.hashCode() * 31 + metadata;
}","public static int getHashCode(Block block,int metadata){
  return metadata | Block.getIdFromBlock(block) << 16;
}"
60021,"@Override public int hashCode(){
  return hashcode;
}","@Override public int hashCode(){
  return metadata | Block.getIdFromBlock(block) << 16;
}"
60022,"private void removeFromParent(View view){
  ViewGroup parent=(ViewGroup)view.getParent();
  parent.removeView(view);
}","private void removeFromParent(final View view){
  final ViewGroup parent=(ViewGroup)view.getParent();
  parent.post(new Runnable(){
    @Override public void run(){
      parent.removeView(view);
    }
  }
);
}"
60023,"@Override public void go(Backstack nextBackstack,Flow.Direction direction,Flow.Callback callback){
  screenState=SceneState.TRANSITIONING;
  Scene incomingScene=(Scene)nextBackstack.current().getScreen();
  SceneCut sceneCut=new SceneCut.Builder().setDirection(direction).setIncomingScene(incomingScene).setOutgoingScene(outgoingScene).setCallback(callback).build();
  if (incomingScene == outgoingScene) {
    callback.onComplete();
  }
  if (incomingScene.getView() == null) {
    incomingScene.setUp(director.getActivity(),director.getContainer());
  }
  if (direction == Flow.Direction.FORWARD || direction == Flow.Direction.REPLACE) {
    incomingScene.getRigger().layoutIncoming(director.getContainer(),incomingScene.getView(),direction);
    incomingScene.getTransformer().applyAnimations(sceneCut,this);
  }
 else   if (outgoingScene != null) {
    outgoingScene.getRigger().layoutIncoming(director.getContainer(),outgoingScene.getView(),direction);
    outgoingScene.getTransformer().applyAnimations(sceneCut,this);
  }
 else {
    callback.onComplete();
  }
  outgoingScene=incomingScene;
}","@Override public void go(Backstack nextBackstack,Flow.Direction direction,Flow.Callback callback){
  screenState=SceneState.TRANSITIONING;
  Scene incomingScene=(Scene)nextBackstack.current().getScreen();
  SceneCut sceneCut=new SceneCut.Builder().setDirection(direction).setIncomingScene(incomingScene).setOutgoingScene(outgoingScene).setCallback(callback).build();
  if (incomingScene == outgoingScene) {
    callback.onComplete();
  }
  if (incomingScene.getView() == null) {
    incomingScene.setUp(director.getActivity(),director.getContainer());
  }
  if (direction == Flow.Direction.FORWARD || direction == Flow.Direction.REPLACE) {
    incomingScene.getRigger().layoutIncoming(director.getContainer(),incomingScene.getView(),direction);
    incomingScene.getTransformer().applyAnimations(sceneCut,this);
  }
 else   if (outgoingScene != null) {
    outgoingScene.getRigger().layoutIncoming(director.getContainer(),incomingScene.getView(),direction);
    outgoingScene.getTransformer().applyAnimations(sceneCut,this);
  }
 else {
    callback.onComplete();
  }
  outgoingScene=incomingScene;
}"
60024,"@Override public Transformer getTransformer(){
  return new CrossfadeTransformer(SampleApplication.getInstance());
}","@Override public Transformer getTransformer(){
  return transformer;
}"
60025,"public WelcomeScene(){
  super(WelcomeScene.class.getName());
}","public WelcomeScene(){
  this(SampleApplication.getInstance());
}"
60026,"@Override public Rigger getRigger(){
  return new PageRigger();
}","@Override public Rigger getRigger(){
  return rigger;
}"
60027,"public NavigationMenuView(Context context,AttributeSet attrs){
  super(context,attrs);
  this.flow=SampleApplication.getMainFlow();
  this.drawerHelper=SampleApplication.getDrawerHelper();
  this.welcomeScene=new WelcomeScene();
}","public NavigationMenuView(Context context,AttributeSet attrs){
  super(context,attrs);
  this.flow=SampleApplication.getMainFlow();
  this.drawerHelper=SampleApplication.getDrawerHelper();
  this.welcomeScene=new WelcomeScene();
  this.pagedScene=new PagedScene1();
}"
60028,"@Override public View setUp(Context context,ViewGroup parent){
  lockable.setLocked(false);
  return super.setUp(context,parent);
}","@Override public View setUp(Context context,ViewGroup parent){
  lockable.setLocked(true);
  return super.setUp(context,parent);
}"
60029,"@Override public View tearDown(Context context,ViewGroup parent){
  lockable.setLocked(true);
  return super.tearDown(context,parent);
}","@Override public View tearDown(Context context,ViewGroup parent){
  lockable.setLocked(false);
  return super.tearDown(context,parent);
}"
60030,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  MortarScope parentScope=Mortar.getScope(getApplication());
  activityScope=Mortar.requireActivityScope(parentScope,this);
  activityScope.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  Mortar.inject(this,this);
  getActionBar().setHomeButtonEnabled(true);
  ButterKnife.inject(this,this);
  navigationDrawer=(DrawerLayout)findViewById(R.id.drawer_parent);
  activityPresenter.takeView(this);
  drawerPresenter.takeView(navigationDrawer);
  getLayoutInflater().inflate(R.layout.navigation_drawer,navigationDrawer);
  navigationDrawer.invalidate();
  screenplay.enter(flow);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  MortarScope parentScope=Mortar.getScope(getApplication());
  activityScope=Mortar.requireActivityScope(parentScope,this);
  activityScope.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  Mortar.inject(this,this);
  getActionBar().setHomeButtonEnabled(true);
  ButterKnife.inject(this,this);
  navigationDrawer=(DrawerLayout)findViewById(R.id.drawer_parent);
  activityPresenter.takeView(this);
  drawerPresenter.takeView(navigationDrawer);
  screenplay.enter(flow);
}"
60031,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
    if (navigationDrawer.isDrawerVisible(Gravity.LEFT)) {
      navigationDrawer.closeDrawer(Gravity.LEFT);
    }
 else {
      navigationDrawer.openDrawer(Gravity.LEFT);
    }
  return true;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
    if (drawerPresenter.isDrawerVisible() && !drawerPresenter.isLockedOpen()) {
      drawerPresenter.close();
    }
 else     if (!drawerPresenter.isLockedShut()) {
      drawerPresenter.open();
    }
  return true;
}
return super.onOptionsItemSelected(item);
}"
60032,"@Override public final void go(Backstack entries,Flow.Direction direction,Flow.Callback callback){
  Screen nextScreen=(Screen)entries.current().getScreen();
  if (direction == Flow.Direction.FORWARD) {
    if (entries.reverseIterator().hasNext()) {
      previousScreen=(Screen)entries.reverseIterator().next().getScreen();
    }
    View newChild=nextScreen.getDirector().create(context,nextScreen,container);
    container.addView(newChild);
  }
  if (previousScreen != null) {
    ScreenTransformations.start(direction,callback,nextScreen,previousScreen);
  }
 else {
    callback.onComplete();
  }
  if (direction == Flow.Direction.BACKWARD) {
    View oldChild=nextScreen.getDirector().destroy(context,previousScreen,container);
    container.removeView(oldChild);
  }
  previousScreen=nextScreen;
}","@Override public final void go(Backstack entries,Flow.Direction direction,Flow.Callback callback){
  Screen nextScreen=(Screen)entries.current().getScreen();
  if (direction == Flow.Direction.FORWARD) {
    if (entries.reverseIterator().hasNext()) {
      previousScreen=(Screen)entries.reverseIterator().next().getScreen();
    }
    View newChild=nextScreen.getDirector().create(context,nextScreen,container);
    container.addView(newChild);
  }
  if (previousScreen != null) {
    ScreenTransformations.start(direction,callback,nextScreen,previousScreen);
  }
 else {
    callback.onComplete();
  }
  if (direction == Flow.Direction.BACKWARD) {
    View oldChild=previousScreen.getDirector().destroy(context,previousScreen,container);
    container.removeView(oldChild);
  }
  previousScreen=nextScreen;
}"
60033,"/** 
 * Returns vectors as a list for specified range of indexes (from the <code>startIndex</code> to <code>stopIndex</code>)
 * @return List of the generated objects/vectors
 */
public List<ICombinatoricsVector<T>> generateObjectsRange(int startIndex,int stopIndex){
  assert(startIndex <= stopIndex);
  List<ICombinatoricsVector<T>> list=new ArrayList<>();
  Iterator<ICombinatoricsVector<T>> iterator=this.iterator();
  int index=1;
  while (iterator.hasNext()) {
    if (index >= startIndex && index <= stopIndex) {
      list.add(iterator.next());
    }
 else     if (index > stopIndex) {
      return list;
    }
 else {
      iterator.next();
    }
    index++;
  }
  return list;
}","/** 
 * Returns vectors as a list for specified range of indexes (from the <code>startIndex</code> to <code>stopIndex</code>)
 * @return List of the generated objects/vectors
 */
public List<ICombinatoricsVector<T>> generateObjectsRange(long startIndex,long stopIndex){
  assert(startIndex <= stopIndex);
  List<ICombinatoricsVector<T>> list=new ArrayList<>();
  Iterator<ICombinatoricsVector<T>> iterator=this.iterator();
  long index=1;
  while (iterator.hasNext()) {
    if (index >= startIndex && index <= stopIndex) {
      list.add(iterator.next());
    }
 else     if (index > stopIndex) {
      return list;
    }
 else {
      iterator.next();
    }
    index++;
  }
  return list;
}"
60034,"/** 
 * Returns vectors as a list for specified range of indexes (from the <code>startIndex</code> to <code>stopIndex</code>)
 * @return List of the generated objects/vectors
 */
List<T> generateObjectsRange(int startIndex,int stopIndex);","/** 
 * Returns vectors as a list for specified range of indexes (from the <code>startIndex</code> to <code>stopIndex</code>)
 * @return List of the generated objects/vectors
 */
List<T> generateObjectsRange(long startIndex,long stopIndex);"
60035,"/** 
 * @param args
 */
public static void main(String[] args){
  permutationWithoutRepetitions();
  permutationWithRepetitions();
  simpleCombinations();
  multiCombinations();
  simpleSubSets();
  duplicateSubSets();
  integerPartition();
  integerComposition();
  complexCombinationIndexesExample();
  complexCombinationExample();
}","/** 
 * @param args
 */
public static void main(String[] args){
  permutationWithoutRepetitions();
  permutationWithRepetitions();
  simpleCombinations();
  multiCombinations();
  simpleSubSets();
  duplicateSubSets();
  integerPartition();
  integerComposition();
  complexCombinationIndexesExample();
  complexCombinationExample();
  simpleWithEqualElementsPermutation();
}"
60036,"/** 
 * Creates an iterator
 * @see org.paukov.combinatorics.Generator#iterator()
 */
@Override public Iterator<ICombinatoricsVector<T>> iterator(){
  return new PermutationIterator<T>(this);
}","/** 
 * Creates an iterator
 * @see org.paukov.combinatorics.Generator#iterator()
 */
@Override public Iterator<ICombinatoricsVector<T>> iterator(){
  if (_originalVector.hasDuplicates())   return new DuplicatedPermutationIterator<T>(this);
 else   return new PermutationIterator<T>(this);
}"
60037,"/** 
 * Returns the number of all generated permutations
 * @see org.paukov.combinatorics.Generator#getNumberOfGeneratedObjects()
 */
public long getNumberOfGeneratedObjects(){
  if (_originalVector.getSize() == 0)   return 0;
  return Util.factorial(_originalVector.getSize());
}","/** 
 * Returns the number of all generated permutations
 * @see org.paukov.combinatorics.Generator#getNumberOfGeneratedObjects()
 */
public long getNumberOfGeneratedObjects(){
  if (_originalVector.getSize() == 0)   return 0;
  if (_originalVector.hasDuplicates())   throw new RuntimeException(""String_Node_Str"" + _originalVector);
  return Util.factorial(_originalVector.getSize());
}"
60038,"public Pair<Integer,JSONObject> execute(String method,URL url,String requestBody,boolean skipError) throws OCSyncException {
  Pair<Integer,JSONObject> response;
  HttpURLConnection urlConnection=null;
  try {
    urlConnection=(HttpURLConnection)url.openConnection();
  }
 catch (  IOException e) {
    Log.e(OCHttpClient.TAG,""String_Node_Str"" + e);
    throw new OCSyncException(R.string.err_sync_http_request_ioexception,OCSyncErrorType.IO);
  }
 finally {
    if (urlConnection != null) {
      urlConnection.disconnect();
    }
  }
  if (urlConnection == null) {
    Log.e(OCHttpClient.TAG,""String_Node_Str"");
    throw new OCSyncException(R.string.err_sync_http_request_ioexception,OCSyncErrorType.IO);
  }
  try {
    urlConnection.setRequestMethod(method);
  }
 catch (  ProtocolException e) {
    Log.e(OCHttpClient.TAG,""String_Node_Str"" + e);
    throw new OCSyncException(R.string.err_sync_http_request_ioexception,OCSyncErrorType.IO);
  }
  urlConnection.setRequestProperty(""String_Node_Str"",_userAgent);
  urlConnection.setInstanceFollowRedirects(true);
  if (!""String_Node_Str"".equals(method)) {
    urlConnection.setDoOutput(true);
  }
  urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  String basicAuth=""String_Node_Str"" + Base64.encodeToString((_username + ""String_Node_Str"" + _password).getBytes(),Base64.NO_WRAP);
  urlConnection.setRequestProperty(""String_Node_Str"",basicAuth);
  urlConnection.setChunkedStreamingMode(0);
  if (!""String_Node_Str"".equals(method)) {
    try {
      OutputStream out=new BufferedOutputStream(urlConnection.getOutputStream());
      out.write(requestBody.getBytes(Charset.forName(""String_Node_Str"")));
      out.close();
    }
 catch (    IOException e) {
      Log.e(OCHttpClient.TAG,""String_Node_Str"" + e);
      throw new OCSyncException(R.string.err_sync_http_write_failed,OCSyncErrorType.IO);
    }
  }
  response=handleHTTPResponse(urlConnection,skipError);
  return response;
}","public Pair<Integer,JSONObject> execute(String method,URL url,String requestBody,boolean skipError) throws OCSyncException {
  Pair<Integer,JSONObject> response;
  HttpURLConnection urlConnection=null;
  try {
    urlConnection=(HttpURLConnection)url.openConnection();
  }
 catch (  IOException e) {
    Log.e(OCHttpClient.TAG,""String_Node_Str"" + e);
    throw new OCSyncException(R.string.err_sync_http_request_ioexception,OCSyncErrorType.IO);
  }
 finally {
    if (urlConnection != null) {
      urlConnection.disconnect();
    }
  }
  if (urlConnection == null) {
    Log.e(OCHttpClient.TAG,""String_Node_Str"");
    throw new OCSyncException(R.string.err_sync_http_request_ioexception,OCSyncErrorType.IO);
  }
  try {
    urlConnection.setRequestMethod(method);
  }
 catch (  ProtocolException e) {
    Log.e(OCHttpClient.TAG,""String_Node_Str"" + e);
    throw new OCSyncException(R.string.err_sync_http_request_protocol_exception,OCSyncErrorType.IO);
  }
  urlConnection.setRequestProperty(""String_Node_Str"",_userAgent);
  urlConnection.setInstanceFollowRedirects(true);
  if (!""String_Node_Str"".equals(method)) {
    urlConnection.setDoOutput(true);
  }
  urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  if (!""String_Node_Str"".equals(method)) {
    urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  }
  String basicAuth=""String_Node_Str"" + Base64.encodeToString((_username + ""String_Node_Str"" + _password).getBytes(),Base64.NO_WRAP);
  urlConnection.setRequestProperty(""String_Node_Str"",basicAuth);
  urlConnection.setChunkedStreamingMode(0);
  if (!""String_Node_Str"".equals(method)) {
    try {
      OutputStream out=new BufferedOutputStream(urlConnection.getOutputStream());
      out.write(requestBody.getBytes(Charset.forName(""String_Node_Str"")));
      out.close();
    }
 catch (    IOException e) {
      Log.e(OCHttpClient.TAG,""String_Node_Str"" + e);
      throw new OCSyncException(R.string.err_sync_http_write_failed,OCSyncErrorType.IO);
    }
  }
  response=handleHTTPResponse(urlConnection,skipError);
  return response;
}"
60039,"private Pair<Integer,JSONObject> handleHTTPResponse(HttpURLConnection connection,Boolean skipError) throws OCSyncException {
  BufferedReader reader;
  String response;
  try {
    reader=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    StringBuilder stringBuilder=new StringBuilder();
    String line;
    while ((line=reader.readLine()) != null) {
      stringBuilder.append(line).append(""String_Node_Str"");
    }
    response=stringBuilder.toString();
    int status=connection.getResponseCode();
switch (status) {
case 200:
{
        try {
          JSONObject jsonResponse=new JSONObject(response);
          return new Pair<>(status,jsonResponse);
        }
 catch (        JSONException e) {
          if (!skipError) {
            if (response.contains(""String_Node_Str"") && response.contains(""String_Node_Str"")) {
              Log.e(OCHttpClient.TAG,""String_Node_Str"");
              throw new OCSyncException(R.string.err_sync_ocsms_not_installed_or_oc_upgrade_required,OCSyncErrorType.SERVER_ERROR);
            }
 else {
              Log.e(OCHttpClient.TAG,""String_Node_Str"",e);
              throw new OCSyncException(R.string.err_sync_http_request_parse_resp,OCSyncErrorType.PARSE);
            }
          }
        }
        break;
      }
case 403:
{
      throw new OCSyncException(R.string.err_sync_auth_failed,OCSyncErrorType.AUTH);
    }
default :
{
    Log.e(OCHttpClient.TAG,""String_Node_Str"" + status);
    Log.e(OCHttpClient.TAG,""String_Node_Str"" + status + ""String_Node_Str""+ response);
    throw new OCSyncException(R.string.err_sync_http_request_returncode_unhandled,OCSyncErrorType.SERVER_ERROR);
  }
}
}
 catch (IOException e) {
throw new OCSyncException(R.string.err_sync_http_request_ioexception,OCSyncErrorType.IO);
}
return new Pair<>(0,null);
}","private Pair<Integer,JSONObject> handleHTTPResponse(HttpURLConnection connection,Boolean skipError) throws OCSyncException {
  try {
    BufferedReader reader=new BufferedReader(new InputStreamReader(connection.getInputStream()));
    StringBuilder stringBuilder=new StringBuilder();
    String line;
    while ((line=reader.readLine()) != null) {
      stringBuilder.append(line).append(""String_Node_Str"");
    }
    String response=stringBuilder.toString();
    int status=connection.getResponseCode();
switch (status) {
case 200:
{
        try {
          JSONObject jsonResponse=new JSONObject(response);
          return new Pair<>(status,jsonResponse);
        }
 catch (        JSONException e) {
          if (!skipError) {
            if (response.contains(""String_Node_Str"") && response.contains(""String_Node_Str"")) {
              Log.e(OCHttpClient.TAG,""String_Node_Str"");
              throw new OCSyncException(R.string.err_sync_ocsms_not_installed_or_oc_upgrade_required,OCSyncErrorType.SERVER_ERROR);
            }
 else {
              Log.e(OCHttpClient.TAG,""String_Node_Str"",e);
              throw new OCSyncException(R.string.err_sync_http_request_parse_resp,OCSyncErrorType.PARSE);
            }
          }
        }
        break;
      }
case 403:
{
      throw new OCSyncException(R.string.err_sync_auth_failed,OCSyncErrorType.AUTH);
    }
default :
{
    Log.e(OCHttpClient.TAG,""String_Node_Str"" + status);
    Log.e(OCHttpClient.TAG,""String_Node_Str"" + status + ""String_Node_Str""+ response);
    throw new OCSyncException(R.string.err_sync_http_request_returncode_unhandled,OCSyncErrorType.SERVER_ERROR);
  }
}
reader.close();
}
 catch (IOException e) {
throw new OCSyncException(R.string.err_sync_http_request_ioexception,OCSyncErrorType.IO);
}
return new Pair<>(0,null);
}"
60040,"public Pair<Integer,JSONObject> execute(String method,URL url,String requestBody,boolean skipError) throws OCSyncException {
  Pair<Integer,JSONObject> response;
  HttpURLConnection urlConnection=null;
  try {
    urlConnection=(HttpURLConnection)url.openConnection();
    urlConnection.setRequestMethod(method);
    urlConnection.setRequestProperty(""String_Node_Str"",_userAgent);
    urlConnection.setInstanceFollowRedirects(true);
    urlConnection.setDoOutput(true);
    urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    String basicAuth=""String_Node_Str"" + Base64.encodeToString((_username + ""String_Node_Str"" + _password).getBytes(),Base64.NO_WRAP);
    urlConnection.setRequestProperty(""String_Node_Str"",basicAuth);
    urlConnection.setChunkedStreamingMode(0);
    OutputStream out=new BufferedOutputStream(urlConnection.getOutputStream());
    out.write(requestBody.getBytes(Charset.forName(""String_Node_Str"")));
    response=handleHTTPResponse(urlConnection,skipError);
  }
 catch (  IOException e) {
    throw new OCSyncException(R.string.err_sync_http_request_ioexception,OCSyncErrorType.IO);
  }
 finally {
    if (urlConnection != null) {
      urlConnection.disconnect();
    }
  }
  return response;
}","public Pair<Integer,JSONObject> execute(String method,URL url,String requestBody,boolean skipError) throws OCSyncException {
  Pair<Integer,JSONObject> response;
  HttpURLConnection urlConnection=null;
  try {
    urlConnection=(HttpURLConnection)url.openConnection();
    urlConnection.setRequestMethod(method);
    urlConnection.setRequestProperty(""String_Node_Str"",_userAgent);
    urlConnection.setInstanceFollowRedirects(true);
    urlConnection.setDoOutput(true);
    urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    String basicAuth=""String_Node_Str"" + Base64.encodeToString((_username + ""String_Node_Str"" + _password).getBytes(),Base64.NO_WRAP);
    urlConnection.setRequestProperty(""String_Node_Str"",basicAuth);
    urlConnection.setChunkedStreamingMode(0);
    OutputStream out=new BufferedOutputStream(urlConnection.getOutputStream());
    out.write(requestBody.getBytes(Charset.forName(""String_Node_Str"")));
    out.close();
    response=handleHTTPResponse(urlConnection,skipError);
  }
 catch (  IOException e) {
    throw new OCSyncException(R.string.err_sync_http_request_ioexception,OCSyncErrorType.IO);
  }
 finally {
    if (urlConnection != null) {
      urlConnection.disconnect();
    }
  }
  return response;
}"
60041,"private boolean addLatestIndexedNote(Client client,String commitHash){
  try {
    client.prepareIndex(ES_UPDATEALIAS,""String_Node_Str"",toString()).setSource(jsonBuilder().startObject().field(""String_Node_Str"",repository.getProject().getKey()).field(""String_Node_Str"",repository.getSlug()).field(""String_Node_Str"",ref).field(""String_Node_Str"",commitHash).endObject()).get();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",toString(),commitHash,e);
    return false;
  }
  return true;
}","private boolean addLatestIndexedNote(Client client,String commitHash){
  try {
    client.prepareIndex(ES_UPDATEALIAS,""String_Node_Str"",toString()).setSource(jsonBuilder().startObject().field(""String_Node_Str"",repository.getProject().getKey()).field(""String_Node_Str"",repository.getSlug()).field(""String_Node_Str"",ref).field(""String_Node_Str"",commitHash).endObject()).setRouting(getRepoDesc()).get();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",toString(),commitHash,e);
    return false;
  }
  return true;
}"
60042,"/** 
 * For incremental updates, we store the hashes of each ref's latest indexed commit in ES_UPDATEALIAS. The following three methods provide note reading, adding, and deleting functionality.
 */
private String getLatestIndexedHash(Client client){
  try {
    String hash=client.prepareGet(ES_UPDATEALIAS,""String_Node_Str"",toString()).get().getSourceAsMap().get(""String_Node_Str"").toString();
    if (hash != null && hash.length() == 40) {
      return hash;
    }
  }
 catch (  Exception e) {
    log.info(""String_Node_Str"",toString(),e);
  }
  return EMPTY_TREE;
}","/** 
 * For incremental updates, we store the hashes of each ref's latest indexed commit in ES_UPDATEALIAS. The following three methods provide note reading, adding, and deleting functionality.
 */
private String getLatestIndexedHash(Client client){
  try {
    String hash=client.prepareGet(ES_UPDATEALIAS,""String_Node_Str"",toString()).setRouting(getRepoDesc()).get().getSourceAsMap().get(""String_Node_Str"").toString();
    if (hash != null && hash.length() == 40) {
      return hash;
    }
  }
 catch (  Exception e) {
    log.info(""String_Node_Str"",toString(),e);
  }
  return EMPTY_TREE;
}"
60043,"private boolean deleteLatestIndexedNote(Client client){
  try {
    client.prepareDelete(ES_UPDATEALIAS,""String_Node_Str"",toString()).get();
  }
 catch (  Exception e) {
    log.warn(""String_Node_Str"",toString(),e);
    return false;
  }
  return true;
}","private boolean deleteLatestIndexedNote(Client client){
  try {
    client.prepareDelete(ES_UPDATEALIAS,""String_Node_Str"",toString()).setRouting(getRepoDesc()).get();
  }
 catch (  Exception e) {
    log.warn(""String_Node_Str"",toString(),e);
    return false;
  }
  return true;
}"
60044,"@Override public boolean reindexRepository(final String projectKey,final String repositorySlug){
  GlobalSettings globalSettings=settingsManager.getGlobalSettings();
  if (!globalSettings.getIndexingEnabled()) {
    log.warn(""String_Node_Str"");
    return false;
  }
  log.warn(""String_Node_Str"",projectKey,repositorySlug);
  runWithBlockedJobPool(new Runnable(){
    @Override public void run(){
      log.warn(""String_Node_Str"",projectKey,repositorySlug);
      es.getClient().prepareDeleteByQuery(ES_UPDATEALIAS).setRouting(projectKey + '^' + repositorySlug).setQuery(QueryBuilders.filteredQuery(QueryBuilders.matchAllQuery(),SearchFilters.projectRepositoryFilter(projectKey,repositorySlug))).get();
      log.warn(""String_Node_Str"",projectKey,repositorySlug);
    }
  }
);
  Repository repository=repositoryServiceManager.getRepositoryService().findBySlug(projectKey,repositorySlug);
  if (repository == null) {
    log.warn(""String_Node_Str"",projectKey,repositorySlug);
    return false;
  }
  List<Future> futures=new ArrayList<Future>();
  for (  Branch branch : repositoryServiceManager.getBranchMap(repository).values()) {
    futures.add(submitAsyncUpdate(repository,branch.getId(),0));
  }
  for (  Future future : futures) {
    waitForFuture(future);
  }
  log.warn(""String_Node_Str"",projectKey,repositorySlug);
  return true;
}","@Override public boolean reindexRepository(final String projectKey,final String repositorySlug){
  GlobalSettings globalSettings=settingsManager.getGlobalSettings();
  if (!globalSettings.getIndexingEnabled()) {
    log.warn(""String_Node_Str"");
    return false;
  }
  log.warn(""String_Node_Str"",projectKey,repositorySlug);
  log.warn(""String_Node_Str"",projectKey,repositorySlug);
  for (int i=0; i < 5; ++i) {
    es.getClient().prepareDeleteByQuery(ES_UPDATEALIAS).setRouting(projectKey + '^' + repositorySlug).setQuery(QueryBuilders.filteredQuery(QueryBuilders.matchAllQuery(),SearchFilters.projectRepositoryFilter(projectKey,repositorySlug))).get();
    try {
      Thread.sleep(200);
    }
 catch (    InterruptedException e) {
      log.warn(""String_Node_Str"",e);
    }
  }
  log.warn(""String_Node_Str"",projectKey,repositorySlug);
  Repository repository=repositoryServiceManager.getRepositoryService().findBySlug(projectKey,repositorySlug);
  if (repository == null) {
    log.warn(""String_Node_Str"",projectKey,repositorySlug);
    return false;
  }
  List<Future> futures=new ArrayList<Future>();
  for (  Branch branch : repositoryServiceManager.getBranchMap(repository).values()) {
    futures.add(submitAsyncUpdate(repository,branch.getId(),0));
  }
  for (  Future future : futures) {
    waitForFuture(future);
  }
  log.warn(""String_Node_Str"",projectKey,repositorySlug);
  return true;
}"
60045,"@Override public void run(){
  acquireLock(job);
  semaphore.acquireUninterruptibly();
  final GlobalSettings globalSettings=settingsManager.getGlobalSettings();
  if (!globalSettings.getIndexingEnabled()) {
    log.warn(""String_Node_Str"",job.toString());
    return;
  }
  try {
    if (reindex) {
      job.doReindex(gitScm,globalSettings);
    }
 else {
      job.doUpdate(gitScm,globalSettings);
    }
  }
 catch (  Throwable e) {
    log.error(""String_Node_Str"",job.toString(),e);
  }
 finally {
    releaseLock(job);
    semaphore.release();
  }
}","@Override public void run(){
  acquireLock(job);
  semaphore.acquireUninterruptibly();
  try {
    final GlobalSettings globalSettings=settingsManager.getGlobalSettings();
    if (!globalSettings.getIndexingEnabled()) {
      log.warn(""String_Node_Str"",job.toString());
      return;
    }
    if (reindex) {
      job.doReindex(gitScm,globalSettings);
    }
 else {
      job.doUpdate(gitScm,globalSettings);
    }
  }
 catch (  Throwable e) {
    log.error(""String_Node_Str"",job.toString(),e);
  }
 finally {
    releaseLock(job);
    semaphore.release();
  }
}"
60046,"/** 
 * Returns a new runnable that executes a search updater job.
 */
private Runnable getJobRunnable(final SearchUpdateJob job,final boolean reindex){
  return new Runnable(){
    @Override public void run(){
      acquireLock(job);
      semaphore.acquireUninterruptibly();
      final GlobalSettings globalSettings=settingsManager.getGlobalSettings();
      if (!globalSettings.getIndexingEnabled()) {
        log.warn(""String_Node_Str"",job.toString());
        return;
      }
      try {
        if (reindex) {
          job.doReindex(gitScm,globalSettings);
        }
 else {
          job.doUpdate(gitScm,globalSettings);
        }
      }
 catch (      Throwable e) {
        log.error(""String_Node_Str"",job.toString(),e);
      }
 finally {
        releaseLock(job);
        semaphore.release();
      }
    }
  }
;
}","/** 
 * Returns a new runnable that executes a search updater job.
 */
private Runnable getJobRunnable(final SearchUpdateJob job,final boolean reindex){
  return new Runnable(){
    @Override public void run(){
      acquireLock(job);
      semaphore.acquireUninterruptibly();
      try {
        final GlobalSettings globalSettings=settingsManager.getGlobalSettings();
        if (!globalSettings.getIndexingEnabled()) {
          log.warn(""String_Node_Str"",job.toString());
          return;
        }
        if (reindex) {
          job.doReindex(gitScm,globalSettings);
        }
 else {
          job.doUpdate(gitScm,globalSettings);
        }
      }
 catch (      Throwable e) {
        log.error(""String_Node_Str"",job.toString(),e);
      }
 finally {
        releaseLock(job);
        semaphore.release();
      }
    }
  }
;
}"
60047,"boolean handle(HttpServerExchange exchange,Route fn,Renderer<?> renderer) throws Exception {
  Request request=exchange.getAttachment(Core.REQUEST);
  Response response=exchange.getAttachment(Core.RESPONSE);
  Object model=fn.handle(request,response);
  if (model != null) {
    if (model instanceof Optional) {
      @SuppressWarnings(""String_Node_Str"") Optional<Object> opt=(Optional<Object>)model;
      model=opt.map(v -> v).orElse(null);
    }
    if (model instanceof Integer) {
      return handle((Integer)model,exchange);
    }
    if (contains(model.getClass()) == false) {
      resolve(renderer,exchange).render(model,exchange);
      return true;
    }
  }
  return handle(exchange.getResponseCode(),exchange);
}","boolean handle(HttpServerExchange exchange,Route fn,Renderer<?> renderer) throws Exception {
  Request request=exchange.getAttachment(Core.REQUEST);
  Response response=exchange.getAttachment(Core.RESPONSE);
  Object model=fn.handle(request,response);
  if (model != null) {
    if (model instanceof Optional) {
      @SuppressWarnings(""String_Node_Str"") Optional<Object> opt=(Optional<Object>)model;
      model=opt.map(v -> v).orElse(null);
    }
    if (model instanceof Integer) {
      return handle((Integer)model,exchange);
    }
    if (model instanceof ExchangeState) {
      return true;
    }
    if (contains(model.getClass()) == false) {
      resolve(renderer,exchange).render(model,exchange);
      return true;
    }
  }
  return handle(exchange.getResponseCode(),exchange);
}"
60048,"public static List<String> getStartupURLs(){
  List<String> urls=new ArrayList<String>();
  try (Connection conn=DriverManager.getConnection(SQLiteCommon.getSettingsDirectory());PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"")){
    ResultSet rs=pstmt.executeQuery();
    while (rs != null && rs.next()) {
      urls.add(rs.getString(1));
    }
  }
 catch (  Exception e) {
    logger.error(e.getMessage());
  }
  return urls;
}","public static List<String> getStartupURLs(){
  List<String> urls=new ArrayList<String>();
  try (Connection conn=DriverManager.getConnection(SQLiteCommon.getSettingsDirectory());PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"")){
    ResultSet rs=pstmt.executeQuery();
    while (rs != null && rs.next()) {
      urls.add(rs.getString(1));
    }
  }
 catch (  Exception e) {
    logger.error(e.getMessage());
  }
  if (urls.isEmpty()) {
    urls.add(""String_Node_Str"");
  }
  return urls;
}"
60049,"public static Rectangle getInitialWindowBounds(){
  Rectangle bounds=new Rectangle(100,100);
  return bounds;
}","public static Rectangle getInitialWindowBounds(){
  Rectangle bounds=GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds();
  return bounds;
}"
60050,"public static void insertUserAgent(String msie,String mozilla,boolean incluedeMsie){
  try (Connection conn=DriverManager.getConnection(SQLiteCommon.getSettingsDirectory());PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"")){
    pstmt.setString(2,msie);
    pstmt.setString(2,mozilla);
    pstmt.setInt(3,incluedeMsie ? 1 : 0);
    pstmt.executeUpdate();
  }
 catch (  Exception e) {
    logger.error(e.getMessage());
  }
}","public static void insertUserAgent(String msie,String mozilla,boolean incluedeMsie){
  try (Connection conn=DriverManager.getConnection(SQLiteCommon.getSettingsDirectory());PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"")){
    pstmt.setString(1,msie);
    pstmt.setString(2,mozilla);
    pstmt.setInt(3,incluedeMsie ? 1 : 0);
    pstmt.executeUpdate();
  }
 catch (  Exception e) {
    logger.error(e.getMessage());
  }
}"
60051,"public void createDatabase(){
  String urlDatabase=SQLiteCommon.getSettingsDirectory();
  File f=new File(SQLiteCommon.getDirectory());
  if (!f.exists()) {
    try (Connection conn=DriverManager.getConnection(urlDatabase);Statement stmt=conn.createStatement()){
      createTable(urlDatabase,LOOK_AND_FEEL);
      createTable(urlDatabase,SEARCH);
      createTable(urlDatabase,COLOR);
      createTable(urlDatabase,FONT);
      createTable(urlDatabase,FONT_SIZE);
      createTable(urlDatabase,BOOKMARKS);
      createTable(urlDatabase,CONNECTION);
      createTable(urlDatabase,HOST);
      createTable(urlDatabase,COOKIE);
    }
 catch (    Exception e) {
      logger.error(e.getMessage());
    }
  }
}","public void createDatabase(){
  String urlDatabase=SQLiteCommon.getSettingsDirectory();
  File f=new File(SQLiteCommon.getDirectory());
  if (!f.exists()) {
    try (Connection conn=DriverManager.getConnection(urlDatabase);Statement stmt=conn.createStatement()){
      createTable(urlDatabase,LOOK_AND_FEEL);
      createTable(urlDatabase,SEARCH);
      createTable(urlDatabase,COLOR);
      createTable(urlDatabase,FONT);
      createTable(urlDatabase,FONT_SIZE);
      createTable(urlDatabase,BOOKMARKS);
      createTable(urlDatabase,CONNECTION);
      createTable(urlDatabase,HOST);
      createTable(urlDatabase,COOKIE);
      createTable(urlDatabase,STARTUP);
      createTable(urlDatabase,USER_AGENT);
      createTable(urlDatabase,NETWORK);
      createTable(urlDatabase,SIZE);
      populateColorTable(urlDatabase);
      populateFontTable(urlDatabase);
      populateFontSizeTable(urlDatabase);
      populateSearchEngine(urlDatabase);
      populateUserAgent(urlDatabase);
      populateColorNetwork(urlDatabase);
    }
 catch (    Exception e) {
      logger.error(e.getMessage());
    }
  }
}"
60052,"@Override public void windowClosing(NavigatorWindow wcontext){
  NavigationHistory.addAsRecent(wcontext.getCurrentNavigationEntry().getUrl());
}","@Override public void windowClosing(NavigatorWindow wcontext){
  if (wcontext != null && wcontext.getCurrentNavigationEntry() != null) {
    URL url=wcontext.getCurrentNavigationEntry().getUrl();
    if (url != null)     NavigationHistory.addAsRecent(wcontext.getCurrentNavigationEntry().getUrl());
  }
}"
60053,"/** 
 * Sets the strings from text.
 * @param text the String.valueOfs from text
 */
public void setStringsFromText(String text){
  try {
    BufferedReader reader=new BufferedReader(new StringReader(text));
    String line;
    ArrayList<String> stringsAL=new ArrayList<String>();
    while ((line=reader.readLine()) != null) {
      stringsAL.add(line);
    }
    this.setStrings(stringsAL.toArray(new String[0]));
  }
 catch (  IOException ioe) {
    throw new IllegalStateException(""String_Node_Str"",ioe);
  }
}","/** 
 * Sets the strings from text.
 * @param text the String.valueOfs from text
 */
public void setStringsFromText(String text){
  try {
    BufferedReader reader=new BufferedReader(new StringReader(text));
    String line;
    ArrayList<String> stringsAL=new ArrayList<String>();
    while ((line=reader.readLine()) != null) {
      stringsAL.add(line);
    }
    this.setStrings(stringsAL);
  }
 catch (  IOException ioe) {
    throw new IllegalStateException(""String_Node_Str"",ioe);
  }
}"
60054,"/** 
 * Sets the strings.
 * @param strings the String.valueOfs
 */
public void setStrings(String[] strings){
  this.strings=strings;
  JComboBox<String> comboBox=this.comboBox;
  comboBox.removeAllItems();
  for (  String string : strings) {
    comboBox.addItem(string);
  }
}","/** 
 * Sets the strings.
 * @param strings the String.valueOfs
 */
public void setStrings(List<String> strings){
  this.strings=strings;
  JComboBox<String> comboBox=this.comboBox;
  comboBox.removeAllItems();
  for (  String string : strings) {
    comboBox.addItem(string);
  }
}"
60055,"/** 
 * Gets the strings as text.
 * @return the strings as text
 */
public String getStringsAsText(){
  String lineSeparator=System.getProperty(""String_Node_Str"");
  String[] strings=this.strings;
  if (strings == null) {
    return null;
  }
  StringBuilder buffer=new StringBuilder();
  for (  String string : strings) {
    buffer.append(string);
    buffer.append(lineSeparator);
  }
  return buffer.toString();
}","/** 
 * Gets the strings as text.
 * @return the strings as text
 */
public String getStringsAsText(){
  String lineSeparator=System.getProperty(""String_Node_Str"");
  List<String> strings=this.strings;
  if (strings == null) {
    return null;
  }
  StringBuilder buffer=new StringBuilder();
  for (  String string : strings) {
    buffer.append(string);
    buffer.append(lineSeparator);
  }
  return buffer.toString();
}"
60056,"/** 
 * Gets the strings.
 * @return the strings
 */
public String[] getStrings(){
  return this.strings;
}","/** 
 * Gets the strings.
 * @return the strings
 */
public List<String> getStrings(){
  return this.strings;
}"
60057,"/** 
 * Gets the network box.
 * @return the network box
 */
private Component getNetworkBox(){
  JPanel groupBox=new JPanel();
  groupBox.setPreferredSize(new Dimension(400,100));
  groupBox.setLayout(new BoxLayout(groupBox,BoxLayout.Y_AXIS));
  groupBox.setBorder(new TitledBorder(new EtchedBorder(),""String_Node_Str""));
  groupBox.add(this.getJSCheckBoxPanel());
  groupBox.add(this.getCSSCheckBoxPanel());
  return groupBox;
}","/** 
 * Gets the network box.
 * @return the network box
 */
private Component getNetworkBox(){
  JPanel groupBox=new JPanel();
  groupBox.setPreferredSize(new Dimension(400,100));
  groupBox.setLayout(new BoxLayout(groupBox,BoxLayout.Y_AXIS));
  groupBox.setBorder(new TitledBorder(new EtchedBorder(),""String_Node_Str""));
  groupBox.add(this.getJSCheckBoxPanel());
  groupBox.add(this.getCSSCheckBoxPanel());
  groupBox.add(this.getCookiePanel());
  groupBox.add(this.getCachePanel());
  groupBox.add(this.getNavigationPanel());
  return groupBox;
}"
60058,"/** 
 * Load settings.
 */
private void loadSettings(){
  GeneralSettings network=GeneralSettings.getNetwork();
  this.javscriptPanel.setSelected(network.isJs());
  this.cssPanel.setSelected(network.isCss());
  this.cookiePanel.setSelected(network.isCookie());
  this.cachePanel.setSelected(network.isCache());
  this.navigationPanel.setSelected(network.isNavigation());
  GeneralSettings userAgent=GeneralSettings.getUserAgent();
  this.ieSpoofPanel.setSelected(userAgent.isIncludeIE());
  this.ieVersionField.setValue(userAgent.getIeVersion());
  this.mozillaVersionField.setValue(userAgent.getMozVersion());
  this.ieSpoofPanel.revalidate();
  this.javscriptPanel.revalidate();
  this.cssPanel.revalidate();
  this.cookiePanel.revalidate();
  this.cachePanel.revalidate();
  this.navigationPanel.revalidate();
  this.networkPanel.revalidate();
}","/** 
 * Load settings.
 */
private void loadSettings(){
  GeneralSettings network=GeneralSettings.getNetwork();
  this.javscriptPanel.setSelected(network.isJs());
  this.cssPanel.setSelected(network.isCss());
  this.cookiePanel.setSelected(network.isCookie());
  this.cachePanel.setSelected(network.isCache());
  this.navigationPanel.setSelected(network.isNavigation());
  GeneralSettings userAgent=GeneralSettings.getUserAgent();
  this.ieSpoofPanel.setSelected(userAgent.isIncludeIE());
  this.ieVersionField.setValue(userAgent.getIeVersion());
  this.mozillaVersionField.setValue(userAgent.getMozVersion());
  this.ieSpoofPanel.revalidate();
  this.javscriptPanel.revalidate();
  this.cssPanel.revalidate();
  this.cookiePanel.revalidate();
  this.cachePanel.revalidate();
  this.navigationPanel.revalidate();
  this.networkPanel.revalidate();
  this.startupPagesStringListControl.setStrings(GeneralSettings.getStartupURLs());
}"
60059,"/** 
 * Layout text.
 * @param textNode the text node
 */
private void layoutText(DOMNodeImpl textNode){
  RenderState renderState=textNode.getRenderState();
  if (renderState == null) {
    throw new IllegalStateException(""String_Node_Str"" + textNode + ""String_Node_Str""+ textNode.getParentNode());
  }
  FontMetrics fm=renderState.getFontMetrics();
  int descent=fm.getDescent();
  int ascentPlusLeading=fm.getAscent() + fm.getLeading();
  int wordHeight=fm.getHeight();
  int blankWidth=fm.charWidth(' ');
  int whiteSpace=this.overrideNoWrap ? RenderState.WS_NOWRAP : renderState.getWhiteSpace();
  int textTransform=renderState.getTextTransform();
  String text=textNode.getNodeValue();
  if (whiteSpace != RenderState.WS_PRE) {
    boolean prevAllowOverflow=this.currentLine.isAllowOverflow();
    boolean allowOverflow=whiteSpace == RenderState.WS_NOWRAP;
    this.currentLine.setAllowOverflow(allowOverflow);
    try {
      int length=text.length();
      StringBuilder word=new StringBuilder(12);
      for (int i=0; i < length; i++) {
        char ch=text.charAt(i);
        if (Character.isWhitespace(ch)) {
          int wlen=word.length();
          if (wlen > 0) {
            RWord rword=new RWord(textNode,word.toString(),container,fm,descent,ascentPlusLeading,wordHeight,textTransform);
            this.addWordToLine(rword);
            word.delete(0,wlen);
          }
          RLine line=this.currentLine;
          if (line.width > 0) {
            RBlank rblank=new RBlank(textNode,fm,container,ascentPlusLeading,blankWidth,wordHeight);
            line.addBlank(rblank);
          }
          for (i++; i < length; i++) {
            ch=text.charAt(i);
            if (!Character.isWhitespace(ch)) {
              word.append(ch);
              break;
            }
          }
        }
 else {
          word.append(ch);
        }
      }
      if (word.length() > 0) {
        RWord rword=new RWord(textNode,word.toString(),container,fm,descent,ascentPlusLeading,wordHeight,textTransform);
        this.addWordToLine(rword);
      }
    }
  finally {
      this.currentLine.setAllowOverflow(prevAllowOverflow);
    }
  }
 else {
    int length=text.length();
    boolean lastCharSlashR=false;
    StringBuilder line=new StringBuilder();
    for (int i=0; i < length; i++) {
      char ch=text.charAt(i);
switch (ch) {
case '\r':
        lastCharSlashR=true;
      break;
case '\n':
    int llen=line.length();
  if (llen > 0) {
    RWord rword=new RWord(textNode,line.toString(),container,fm,descent,ascentPlusLeading,wordHeight,textTransform);
    this.addWordToLine(rword);
    line.delete(0,line.length());
  }
RLine prevLine=this.currentLine;
prevLine.setLineBreak(new LineBreak(LineBreak.NONE,textNode));
this.addLine(textNode,prevLine,prevLine.y + prevLine.height);
break;
default :
if (lastCharSlashR) {
line.append('\r');
lastCharSlashR=false;
}
line.append(ch);
break;
}
}
if (line.length() > 0) {
RWord rword=new RWord(textNode,line.toString(),container,fm,descent,ascentPlusLeading,wordHeight,textTransform);
this.addWordToLine(rword);
}
}
}","/** 
 * Layout text.
 * @param textNode the text node
 */
private void layoutText(DOMNodeImpl textNode){
  RenderState renderState=textNode.getRenderState();
  if (renderState == null) {
    throw new IllegalStateException(""String_Node_Str"" + textNode + ""String_Node_Str""+ textNode.getParentNode());
  }
  FontMetrics fm=renderState.getFontMetrics();
  int descent=fm.getDescent();
  int ascentPlusLeading=fm.getAscent() + fm.getLeading();
  int wordHeight=fm.getHeight();
  int blankWidth=fm.charWidth(' ');
  int whiteSpace=this.overrideNoWrap ? RenderState.WS_NOWRAP : renderState.getWhiteSpace();
  int textTransform=renderState.getTextTransform();
  String text=textNode.getNodeValue();
  if (whiteSpace != RenderState.WS_PRE) {
    boolean prevAllowOverflow=this.currentLine.isAllowOverflow();
    boolean allowOverflow=whiteSpace == RenderState.WS_NOWRAP;
    this.currentLine.setAllowOverflow(allowOverflow);
    try {
      int length=text.length();
      StringBuilder word=new StringBuilder(12);
      for (int i=0; i < length; i++) {
        char ch=text.charAt(i);
        if (Character.isWhitespace(ch)) {
          int wlen=word.length();
          if (wlen > 0) {
            RWord rword=new RWord(textNode,word.toString(),container,fm,descent,ascentPlusLeading,wordHeight,textTransform);
            this.addWordToLine(rword);
            word.delete(0,wlen);
          }
          RLine line=this.currentLine;
          if (line.width > 0) {
            RBlank rblank=new RBlank(textNode,fm,container,ascentPlusLeading,blankWidth,wordHeight);
            line.addBlank(rblank);
          }
          for (i++; i < length; i++) {
            ch=text.charAt(i);
            if (!Character.isWhitespace(ch)) {
              word.append(ch);
              break;
            }
          }
        }
 else {
          word.append(ch);
        }
      }
      if (word.length() > 0) {
        RWord rword=new RWord(textNode,word.toString(),container,fm,descent,ascentPlusLeading,wordHeight,textTransform);
        this.addWordToLine(rword);
        if (!Strings.isBlank(renderState.getlineHeight())) {
          addLineBreak(this.modelNode,0);
        }
      }
    }
  finally {
      this.currentLine.setAllowOverflow(prevAllowOverflow);
    }
  }
 else {
    int length=text.length();
    boolean lastCharSlashR=false;
    StringBuilder line=new StringBuilder();
    for (int i=0; i < length; i++) {
      char ch=text.charAt(i);
switch (ch) {
case '\r':
        lastCharSlashR=true;
      break;
case '\n':
    int llen=line.length();
  if (llen > 0) {
    RWord rword=new RWord(textNode,line.toString(),container,fm,descent,ascentPlusLeading,wordHeight,textTransform);
    this.addWordToLine(rword);
    line.delete(0,line.length());
  }
RLine prevLine=this.currentLine;
prevLine.setLineBreak(new LineBreak(LineBreak.NONE,textNode));
this.addLine(textNode,prevLine,prevLine.y + prevLine.height);
break;
default :
if (lastCharSlashR) {
line.append('\r');
lastCharSlashR=false;
}
line.append(ch);
break;
}
}
if (line.length() > 0) {
RWord rword=new RWord(textNode,line.toString(),container,fm,descent,ascentPlusLeading,wordHeight,textTransform);
this.addWordToLine(rword);
}
}
}"
60060,"@Override public String getlineHeight(){
  AbstractCSSProperties props=this.getCssProperties();
  RenderState prs=this.prevRenderState;
  String lh=props == null ? null : props.getLineHeight();
  if (this.iLineHeight != null) {
    return this.iLineHeight;
  }
  if (lh == null) {
    if (prs != null) {
      this.iLineHeight=prs.getlineHeight();
      return this.iLineHeight;
    }
    this.iLineHeight=DEFAULT_LINE_HEIGHT;
    return DEFAULT_LINE_HEIGHT;
  }
switch (lh) {
case INHERIT:
    return this.getPreviousRenderState().getlineHeight();
case NORMAL:
  return String.valueOf(1.2f * LAFSettings.getInstance().getFontSize());
case INITIAL:
return String.valueOf(prs.getFontMetrics().getHeight());
default :
int ilh=HtmlValues.getPixelSize(lh,this,1);
return String.valueOf(ilh * LAFSettings.getInstance().getFontSize());
}
}","@Override public String getlineHeight(){
  AbstractCSSProperties props=this.getCssProperties();
  RenderState prs=this.prevRenderState;
  String token=props == null ? null : props.getLineHeight();
  if (this.iLineHeight != null) {
    return this.iLineHeight;
  }
  if (token == null) {
    if (prs != null) {
      this.iLineHeight=prs.getlineHeight();
      return this.iLineHeight;
    }
    this.iLineHeight=DEFAULT_LINE_HEIGHT;
    return DEFAULT_LINE_HEIGHT;
  }
switch (token) {
case INHERIT:
    return this.getPreviousRenderState().getlineHeight();
case NORMAL:
  return String.valueOf(1.2f * LAFSettings.getInstance().getFontSize());
case INITIAL:
return String.valueOf(prs.getFontMetrics().getHeight());
default :
if (token.endsWith(""String_Node_Str"") || token.endsWith(""String_Node_Str"") || token.endsWith(""String_Node_Str"")|| token.endsWith(""String_Node_Str"")|| token.endsWith(""String_Node_Str"")|| token.endsWith(""String_Node_Str"")|| token.endsWith(""String_Node_Str"")) {
return String.valueOf(HtmlValues.getPixelSize(token,this,1));
}
 else {
return String.valueOf(HtmlValues.getPixelSize(token,this,1) * this.iFont.getSize());
}
}
}"
60061,"@Override public void reset(int availWidth,int availHeight){
}","@Override public void reset(int availWidth,int availHeight){
  this.availWidth=availWidth;
  this.availHeight=availHeight;
  RUIControl ruiControl=this.ruiControl;
  if (ruiControl != null) {
    ModelNode node=ruiControl.getModelNode();
    HTMLElement element=(HTMLElement)node;
    RenderState renderState=node.getRenderState();
    HtmlInsets insets=null;
    String marginwidth=element.getAttribute(MARGINWIDTH);
    String marginheight=element.getAttribute(MARGINHEIGHT);
    if (!Strings.isBlank(marginwidth)) {
      if (insets == null) {
        insets=new HtmlInsets();
      }
      marginwidth=marginwidth.trim();
      if (marginwidth.endsWith(""String_Node_Str"")) {
        int value;
        try {
          value=Integer.parseInt(marginwidth.substring(0,marginwidth.length() - 1));
        }
 catch (        NumberFormatException nfe) {
          value=0;
        }
        insets.left=value;
        insets.right=value;
        insets.leftType=HtmlInsets.TYPE_PERCENT;
        insets.rightType=HtmlInsets.TYPE_PERCENT;
      }
 else {
        int value;
        try {
          value=Integer.parseInt(marginwidth);
        }
 catch (        NumberFormatException nfe) {
          value=0;
        }
        insets.left=value;
        insets.right=value;
        insets.leftType=HtmlInsets.TYPE_PIXELS;
        insets.rightType=HtmlInsets.TYPE_PIXELS;
      }
    }
    if (!Strings.isBlank(marginheight)) {
      if (insets == null) {
        insets=new HtmlInsets();
      }
      marginheight=marginheight.trim();
      if (marginheight.endsWith(""String_Node_Str"")) {
        int value;
        try {
          value=Integer.parseInt(marginheight.substring(0,marginheight.length() - 1));
        }
 catch (        NumberFormatException nfe) {
          value=0;
        }
        insets.top=value;
        insets.bottom=value;
        insets.topType=HtmlInsets.TYPE_PERCENT;
        insets.bottomType=HtmlInsets.TYPE_PERCENT;
      }
 else {
        int value;
        try {
          value=Integer.parseInt(marginheight);
        }
 catch (        NumberFormatException nfe) {
          value=0;
        }
        insets.top=value;
        insets.bottom=value;
        insets.topType=HtmlInsets.TYPE_PIXELS;
        insets.bottomType=HtmlInsets.TYPE_PIXELS;
      }
    }
    Insets awtMarginInsets=insets == null ? null : insets.getSimpleAWTInsets(availWidth,availHeight);
    int overflowX=renderState.getOverflowX();
    int overflowY=renderState.getOverflowY();
    if (awtMarginInsets != null) {
      this.browserFrame.setDefaultMarginInsets(awtMarginInsets);
    }
    if (overflowX != RenderState.OVERFLOW_NONE) {
      this.browserFrame.setDefaultOverflowX(overflowX);
    }
    if (overflowY != RenderState.OVERFLOW_NONE) {
      this.browserFrame.setDefaultOverflowY(overflowY);
    }
  }
}"
60062,"@Override public int getAlignYPercent(){
}","@Override public int getAlignYPercent(){
  int ayp=this.alignYPercent;
  if (ayp != -1) {
    return ayp;
  }
  CSS3Properties props=this.getCssProperties();
  if (props != null) {
    String textAlign=props.getVerticalAlign();
    if (textAlign != null && textAlign.length() != 0) {
      return super.getAlignYPercent();
    }
  }
  String valign=this.element.getAttribute(VALIGN);
  HTMLElement element=this.element;
  HTMLElement rowElement=null;
  Object parent=element.getParentNode();
  if (parent instanceof HTMLElement) {
    rowElement=(HTMLElement)parent;
  }
  if (Strings.isBlank(valign)) {
    if (rowElement != null) {
      valign=rowElement.getAttribute(VALIGN);
      if (Strings.isBlank(valign)) {
        valign=null;
      }
    }
 else {
      valign=null;
    }
  }
  if (valign == null) {
    ayp=50;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(valign)) {
    ayp=0;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(valign) || ""String_Node_Str"".equalsIgnoreCase(valign)) {
    ayp=50;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(valign)) {
    ayp=100;
  }
 else {
    ayp=50;
  }
  this.alignYPercent=ayp;
  return ayp;
}"
60063,"/** 
 * Instantiates a new text viewer window.
 */
public InfoPageWindow(List<MetaInfo> infoList,List<MetaInfo> mediaList,List<MetaInfo> cssList,List<MetaInfo> jsList){
  super(""String_Node_Str"");
  setResizable(true);
  setLocationRelativeTo(null);
  JTabbedPane tabbedPane=new JTabbedPane();
  tabbedPane.addTab(""String_Node_Str"",infoContent(infoList));
  tabbedPane.addTab(""String_Node_Str"",mediaContent(mediaList));
  tabbedPane.addTab(""String_Node_Str"",content(cssList,SyntaxConstants.SYNTAX_STYLE_CSS));
  tabbedPane.addTab(""String_Node_Str"",content(jsList,SyntaxConstants.SYNTAX_STYLE_JAVASCRIPT));
  add(tabbedPane,BorderLayout.CENTER);
}","/** 
 * Instantiates a new text viewer window.
 */
public InfoPageWindow(List<MetaInfo> infoList,List<MetaInfo> mediaList,List<MetaInfo> cssList,List<MetaInfo> jsList){
  super(""String_Node_Str"");
  setResizable(true);
  setLocationRelativeTo(null);
  ImageIcon info=new ImageIcon(getClass().getResource(""String_Node_Str""));
  ImageIcon media=new ImageIcon(getClass().getResource(""String_Node_Str""));
  ImageIcon css=new ImageIcon(getClass().getResource(""String_Node_Str""));
  ImageIcon js=new ImageIcon(getClass().getResource(""String_Node_Str""));
  Image img=info.getImage();
  Image newimg=img.getScaledInstance(30,30,Image.SCALE_SMOOTH);
  info=new ImageIcon(newimg);
  img=media.getImage();
  newimg=img.getScaledInstance(30,30,Image.SCALE_SMOOTH);
  media=new ImageIcon(newimg);
  img=css.getImage();
  newimg=img.getScaledInstance(30,30,Image.SCALE_SMOOTH);
  css=new ImageIcon(newimg);
  img=js.getImage();
  newimg=img.getScaledInstance(30,30,Image.SCALE_SMOOTH);
  js=new ImageIcon(newimg);
  JTabbedPane tabbedPane=new JTabbedPane();
  tabbedPane.setPreferredSize(new Dimension(30,30));
  tabbedPane.addTab(""String_Node_Str"",info,infoContent(infoList));
  tabbedPane.addTab(""String_Node_Str"",media,mediaContent(mediaList));
  tabbedPane.addTab(""String_Node_Str"",css,content(cssList,SyntaxConstants.SYNTAX_STYLE_CSS));
  tabbedPane.addTab(""String_Node_Str"",js,jsContent(jsList,SyntaxConstants.SYNTAX_STYLE_JAVASCRIPT));
  add(tabbedPane,BorderLayout.CENTER);
}"
60064,"private Component mediaContent(List<MetaInfo> mediaList){
  try {
    Object columnNames[]={""String_Node_Str""};
    List<String[]> values=new ArrayList<String[]>();
    for (    MetaInfo info : mediaList) {
      if (!Strings.isBlank(info.getName())) {
        values.add(new String[]{info.getName()});
      }
    }
    DefaultTableModel model=new DefaultTableModel(values.toArray(new Object[][]{}),columnNames);
    JTable jtable=new JTable(model);
    jtable.setPreferredScrollableViewportSize(jtable.getPreferredSize());
    jtable.setTableHeader(null);
    jtable.setShowGrid(false);
    jtable.setColumnSelectionAllowed(true);
    jtable.setCellSelectionEnabled(true);
    JPanel jPanelImg=new JPanel();
    ListSelectionModel cellSelectionModel=jtable.getSelectionModel();
    cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    cellSelectionModel.addListSelectionListener(new ListSelectionListener(){
      public void valueChanged(      ListSelectionEvent e){
        jPanelImg.removeAll();
        int[] selectedRow=jtable.getSelectedRows();
        int[] selectedColumns=jtable.getSelectedColumns();
        for (int i=0; i < selectedRow.length; i++) {
          for (int j=0; j < selectedColumns.length; j++) {
            String href=(String)jtable.getValueAt(selectedRow[i],selectedColumns[j]);
            jPanelImg.add(new JLabel(new ImageIcon(getImage(href))));
            jPanelImg.repaint();
          }
        }
      }
    }
);
    JPanel tablePanel=new JPanel();
    tablePanel.setLayout(new BoxLayout(tablePanel,BoxLayout.Y_AXIS));
    tablePanel.add(jtable);
    tablePanel.add(jPanelImg);
    return new JScrollPane(tablePanel);
  }
 catch (  Exception e) {
    logger.error(e);
  }
  return null;
}","private Component mediaContent(List<MetaInfo> mediaList){
  try {
    Object columnNames[]={""String_Node_Str""};
    List<String[]> values=new ArrayList<String[]>();
    for (    MetaInfo info : mediaList) {
      if (!Strings.isBlank(info.getName())) {
        values.add(new String[]{info.getName()});
      }
    }
    DefaultTableModel model=new DefaultTableModel(values.toArray(new Object[][]{}),columnNames);
    JTable jtable=new JTable(model);
    jtable.setPreferredScrollableViewportSize(jtable.getPreferredSize());
    jtable.setTableHeader(null);
    jtable.setShowGrid(false);
    jtable.setColumnSelectionAllowed(true);
    jtable.setCellSelectionEnabled(true);
    JPanel jPanelImg=new JPanel();
    ListSelectionModel cellSelectionModel=jtable.getSelectionModel();
    cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    cellSelectionModel.addListSelectionListener(new ListSelectionListener(){
      public void valueChanged(      ListSelectionEvent e){
        jPanelImg.removeAll();
        int[] selectedRow=jtable.getSelectedRows();
        int[] selectedColumns=jtable.getSelectedColumns();
        for (int i=0; i < selectedRow.length; i++) {
          for (int j=0; j < selectedColumns.length; j++) {
            String href=(String)jtable.getValueAt(selectedRow[i],selectedColumns[j]);
            jPanelImg.add(new JLabel(new ImageIcon(getImage(href))));
            jPanelImg.repaint();
          }
        }
      }
    }
);
    JPanel tablePanel=new JPanel();
    tablePanel.setLayout(new BoxLayout(tablePanel,BoxLayout.Y_AXIS));
    tablePanel.add(jtable);
    tablePanel.add(jPanelImg);
    return new JScrollPane(tablePanel);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
  return null;
}"
60065,"private String getSourceCode(String href,String syntax){
  SSLCertificate.setCertificate();
  String source=""String_Node_Str"";
  URL url;
  try {
    url=new URL(href);
    URLConnection connection=url.openConnection();
    connection.setRequestProperty(""String_Node_Str"",UserAgentContext.DEFAULT_USER_AGENT);
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    InputStream in=connection.getInputStream();
    byte[] content;
    try {
      content=IORoutines.load(in,8192);
      source=new String(content,""String_Node_Str"");
      if (SyntaxConstants.SYNTAX_STYLE_CSS.equals(syntax)) {
        source=source.replace(""String_Node_Str"",""String_Node_Str"");
      }
    }
  finally {
      in.close();
    }
  }
 catch (  Exception e) {
    logger.error(e);
  }
  return source;
}","private String getSourceCode(String href,String syntax){
  SSLCertificate.setCertificate();
  String source=""String_Node_Str"";
  URL url;
  try {
    url=new URL(href);
    URLConnection connection=url.openConnection();
    connection.setRequestProperty(""String_Node_Str"",UserAgentContext.DEFAULT_USER_AGENT);
    connection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    InputStream in=connection.getInputStream();
    byte[] content;
    try {
      content=IORoutines.load(in,8192);
      source=new String(content,""String_Node_Str"");
      if (SyntaxConstants.SYNTAX_STYLE_CSS.equals(syntax)) {
        source=source.replace(""String_Node_Str"",""String_Node_Str"");
      }
    }
  finally {
      in.close();
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
  return source;
}"
60066,"private JScrollPane infoContent(List<MetaInfo> infoList){
  try {
    Object columnNames[]={""String_Node_Str"",""String_Node_Str""};
    List<String[]> values=new ArrayList<String[]>();
    for (    MetaInfo info : infoList) {
      if (!Strings.isBlank(info.getName())) {
        values.add(new String[]{info.getName(),info.getContent()});
      }
 else       if (!Strings.isBlank(info.getItemprop())) {
        values.add(new String[]{info.getItemprop(),info.getContent()});
      }
 else       if (!Strings.isBlank(info.getProperty())) {
        values.add(new String[]{info.getProperty(),info.getContent()});
      }
 else       if (!Strings.isBlank(info.getHttpEqui())) {
        values.add(new String[]{info.getHttpEqui(),info.getContent()});
      }
    }
    DefaultTableModel model=new DefaultTableModel(values.toArray(new Object[][]{}),columnNames);
    JTable jtable=new JTable(model);
    jtable.setPreferredScrollableViewportSize(jtable.getPreferredSize());
    jtable.setTableHeader(null);
    jtable.setShowGrid(false);
    return new JScrollPane(jtable);
  }
 catch (  Exception e) {
    logger.error(e);
  }
  return null;
}","private JScrollPane infoContent(List<MetaInfo> infoList){
  try {
    Object columnNames[]={""String_Node_Str"",""String_Node_Str""};
    List<String[]> values=new ArrayList<String[]>();
    for (    MetaInfo info : infoList) {
      if (!Strings.isBlank(info.getName())) {
        values.add(new String[]{info.getName(),info.getContent()});
      }
 else       if (!Strings.isBlank(info.getItemprop())) {
        values.add(new String[]{info.getItemprop(),info.getContent()});
      }
 else       if (!Strings.isBlank(info.getProperty())) {
        values.add(new String[]{info.getProperty(),info.getContent()});
      }
 else       if (!Strings.isBlank(info.getHttpEqui())) {
        values.add(new String[]{info.getHttpEqui(),info.getContent()});
      }
    }
    DefaultTableModel model=new DefaultTableModel(values.toArray(new Object[][]{}),columnNames);
    JTable jtable=new JTable(model);
    jtable.setPreferredScrollableViewportSize(jtable.getPreferredSize());
    jtable.setTableHeader(null);
    jtable.setShowGrid(false);
    return new JScrollPane(jtable);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
  return null;
}"
60067,"private Image getImage(String href){
  try {
    URL u=new URL(href);
    URLConnection con=u.openConnection();
    con.setRequestProperty(""String_Node_Str"",UserAgentContext.DEFAULT_USER_AGENT);
    if (href.endsWith(""String_Node_Str"")) {
      SVGRasterizer r=new SVGRasterizer(u);
      return r.bufferedImageToImage();
    }
 else     if (href.startsWith(""String_Node_Str"")) {
      return Toolkit.getDefaultToolkit().createImage(ImageIO.read(con.getInputStream()).getSource());
    }
 else     if (href.endsWith(""String_Node_Str"")) {
      try {
        return new ImageIcon(u).getImage();
      }
 catch (      Exception e) {
        return ImageIO.read(con.getInputStream());
      }
    }
 else     if (href.endsWith(""String_Node_Str"")) {
      try {
        return ImageIO.read(con.getInputStream());
      }
 catch (      IOException e) {
        logger.error(""String_Node_Str"" + e);
      }
    }
 else {
      return ImageIO.read(con.getInputStream());
    }
  }
 catch (  Exception e) {
    logger.error(e);
  }
  return null;
}","private Image getImage(String href){
  try {
    URL u=new URL(href);
    URLConnection con=u.openConnection();
    con.setRequestProperty(""String_Node_Str"",UserAgentContext.DEFAULT_USER_AGENT);
    if (href.endsWith(""String_Node_Str"")) {
      SVGRasterizer r=new SVGRasterizer(u);
      return r.bufferedImageToImage();
    }
 else     if (href.startsWith(""String_Node_Str"")) {
      return Toolkit.getDefaultToolkit().createImage(ImageIO.read(con.getInputStream()).getSource());
    }
 else     if (href.endsWith(""String_Node_Str"")) {
      try {
        return new ImageIcon(u).getImage();
      }
 catch (      Exception e) {
        return ImageIO.read(con.getInputStream());
      }
    }
 else     if (href.endsWith(""String_Node_Str"")) {
      try {
        return ImageIO.read(con.getInputStream());
      }
 catch (      IOException e) {
        logger.error(""String_Node_Str"" + e);
      }
    }
 else {
      return ImageIO.read(con.getInputStream());
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
  return null;
}"
60068,"private JScrollPane content(List<MetaInfo> infoList,String syntax){
  try {
    Object columnNames[]={""String_Node_Str""};
    List<String[]> values=new ArrayList<String[]>();
    for (    MetaInfo info : infoList) {
      if (!Strings.isBlank(info.getName())) {
        values.add(new String[]{info.getName()});
      }
    }
    DefaultTableModel model=new DefaultTableModel(values.toArray(new Object[][]{}),columnNames);
    JTable jtable=new JTable(model);
    jtable.setPreferredScrollableViewportSize(jtable.getPreferredSize());
    jtable.setTableHeader(null);
    jtable.setShowGrid(false);
    jtable.setColumnSelectionAllowed(true);
    jtable.setCellSelectionEnabled(true);
    textArea=new RSyntaxTextArea();
    textArea.setHighlightCurrentLine(true);
    textArea.setAnimateBracketMatching(true);
    textArea.setAntiAliasingEnabled(true);
    textArea.setEditable(false);
    textArea.setSyntaxEditingStyle(syntax);
    ListSelectionModel cellSelectionModel=jtable.getSelectionModel();
    cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    cellSelectionModel.addListSelectionListener(new ListSelectionListener(){
      public void valueChanged(      ListSelectionEvent e){
        int[] selectedRow=jtable.getSelectedRows();
        int[] selectedColumns=jtable.getSelectedColumns();
        for (int i=0; i < selectedRow.length; i++) {
          for (int j=0; j < selectedColumns.length; j++) {
            String href=(String)jtable.getValueAt(selectedRow[i],selectedColumns[j]);
            textArea.setText(getSourceCode(href,syntax));
            textArea.repaint();
          }
        }
      }
    }
);
    JPanel tablePanel=new JPanel();
    tablePanel.setLayout(new BoxLayout(tablePanel,BoxLayout.Y_AXIS));
    tablePanel.add(jtable);
    tablePanel.add(textArea);
    return new JScrollPane(tablePanel);
  }
 catch (  Exception e) {
    logger.error(e);
  }
  return null;
}","private JScrollPane content(List<MetaInfo> infoList,String syntax){
  try {
    Object columnNames[]={""String_Node_Str""};
    List<String[]> values=new ArrayList<String[]>();
    for (    MetaInfo info : infoList) {
      if (!Strings.isBlank(info.getName())) {
        values.add(new String[]{info.getName()});
      }
    }
    DefaultTableModel model=new DefaultTableModel(values.toArray(new Object[][]{}),columnNames);
    JTable jtable=new JTable(model);
    jtable.setPreferredScrollableViewportSize(jtable.getPreferredSize());
    jtable.setTableHeader(null);
    jtable.setShowGrid(false);
    jtable.setColumnSelectionAllowed(true);
    jtable.setCellSelectionEnabled(true);
    RSyntaxTextArea textArea=new RSyntaxTextArea();
    textArea.setHighlightCurrentLine(true);
    textArea.setAnimateBracketMatching(true);
    textArea.setAntiAliasingEnabled(true);
    textArea.setEditable(false);
    textArea.setSyntaxEditingStyle(syntax);
    ListSelectionModel cellSelectionModel=jtable.getSelectionModel();
    cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    cellSelectionModel.addListSelectionListener(new ListSelectionListener(){
      public void valueChanged(      ListSelectionEvent e){
        int[] selectedRow=jtable.getSelectedRows();
        int[] selectedColumns=jtable.getSelectedColumns();
        for (int i=0; i < selectedRow.length; i++) {
          for (int j=0; j < selectedColumns.length; j++) {
            String href=(String)jtable.getValueAt(selectedRow[i],selectedColumns[j]);
            textArea.setText(getSourceCode(href,syntax));
            textArea.repaint();
          }
        }
      }
    }
);
    JPanel tablePanel=new JPanel();
    tablePanel.setLayout(new BoxLayout(tablePanel,BoxLayout.Y_AXIS));
    tablePanel.add(jtable);
    tablePanel.add(textArea);
    return new JScrollPane(tablePanel);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
  return null;
}"
60069,"/** 
 * Gets the child at index.
 * @param index the index
 * @return the child at index
 */
public Node getChildAtIndex(int index){
synchronized (this.getTreeLock()) {
    ArrayList<Node> nl=this.nodeList;
    try {
      return nl == null ? null : nl.get(index);
    }
 catch (    IndexOutOfBoundsException iob) {
      logger.error(iob);
      return null;
    }
  }
}","/** 
 * Gets the child at index.
 * @param index the index
 * @return the child at index
 */
public Node getChildAtIndex(int index){
synchronized (this.getTreeLock()) {
    ArrayList<Node> nl=this.nodeList;
    try {
      return nl == null ? null : nl.get(index);
    }
 catch (    IndexOutOfBoundsException iob) {
      return null;
    }
  }
}"
60070,"/** 
 * Gets the next to.
 * @param node the node
 * @return the next to
 */
private Node getNextTo(Node node){
synchronized (this.getTreeLock()) {
    ArrayList<Node> nl=this.nodeList;
    int idx=nl == null ? -1 : nl.indexOf(node);
    if (idx == -1) {
      throw new DOMException(DOMException.NOT_FOUND_ERR,""String_Node_Str"");
    }
    try {
      return nl.get(idx + 1);
    }
 catch (    IndexOutOfBoundsException iob) {
      logger.error(iob);
      return null;
    }
  }
}","/** 
 * Gets the next to.
 * @param node the node
 * @return the next to
 */
private Node getNextTo(Node node){
synchronized (this.getTreeLock()) {
    ArrayList<Node> nl=this.nodeList;
    int idx=nl == null ? -1 : nl.indexOf(node);
    if (idx == -1) {
      throw new DOMException(DOMException.NOT_FOUND_ERR,""String_Node_Str"");
    }
    try {
      return nl.get(idx + 1);
    }
 catch (    IndexOutOfBoundsException iob) {
      return null;
    }
  }
}"
60071,"@Override public Node getFirstChild(){
synchronized (this.getTreeLock()) {
    ArrayList<Node> nl=this.nodeList;
    try {
      return nl == null ? null : nl.get(0);
    }
 catch (    IndexOutOfBoundsException iob) {
      logger.error(iob);
      return null;
    }
  }
}","@Override public Node getFirstChild(){
synchronized (this.getTreeLock()) {
    ArrayList<Node> nl=this.nodeList;
    try {
      return nl == null ? null : nl.get(0);
    }
 catch (    IndexOutOfBoundsException iob) {
      return null;
    }
  }
}"
60072,"/** 
 * Gets the previous to.
 * @param node the node
 * @return the previous to
 */
private Node getPreviousTo(Node node){
synchronized (this.getTreeLock()) {
    ArrayList<Node> nl=this.nodeList;
    int idx=nl == null ? -1 : nl.indexOf(node);
    if (idx == -1) {
      throw new DOMException(DOMException.NOT_FOUND_ERR,""String_Node_Str"");
    }
    try {
      return nl.get(idx - 1);
    }
 catch (    IndexOutOfBoundsException iob) {
      logger.error(iob);
      return null;
    }
  }
}","/** 
 * Gets the previous to.
 * @param node the node
 * @return the previous to
 */
private Node getPreviousTo(Node node){
synchronized (this.getTreeLock()) {
    ArrayList<Node> nl=this.nodeList;
    int idx=nl == null ? -1 : nl.indexOf(node);
    if (idx == -1) {
      throw new DOMException(DOMException.NOT_FOUND_ERR,""String_Node_Str"");
    }
    try {
      return nl.get(idx - 1);
    }
 catch (    IndexOutOfBoundsException iob) {
      return null;
    }
  }
}"
60073,"@Override public Node getLastChild(){
synchronized (this.getTreeLock()) {
    ArrayList<Node> nl=this.nodeList;
    try {
      return nl == null ? null : nl.get(nl.size() - 1);
    }
 catch (    IndexOutOfBoundsException iob) {
      logger.error(iob);
      return null;
    }
  }
}","@Override public Node getLastChild(){
synchronized (this.getTreeLock()) {
    ArrayList<Node> nl=this.nodeList;
    try {
      return nl == null ? null : nl.get(nl.size() - 1);
    }
 catch (    IndexOutOfBoundsException iob) {
      return null;
    }
  }
}"
60074,"/** 
 * Checks if is float limit impl.
 * @return the boolean
 */
private Boolean isFloatLimitImpl(){
  Boolean fl=this.isFloatLimit;
  if (fl == null) {
    Object parent=this.getOriginalOrCurrentParent();
    if (!(parent instanceof RBlock)) {
      fl=Boolean.TRUE;
      this.isFloatLimit=Boolean.TRUE;
    }
    RBlock blockParent=(RBlock)parent;
    Object grandParent=blockParent.getOriginalOrCurrentParent();
    if (!(grandParent instanceof RBlockViewport)) {
      fl=Boolean.TRUE;
      this.isFloatLimit=Boolean.TRUE;
    }
    ModelNode node=this.modelNode;
    if (!(node instanceof HTMLElementImpl)) {
      fl=Boolean.TRUE;
      this.isFloatLimit=Boolean.TRUE;
    }
    HTMLElementImpl element=(HTMLElementImpl)node;
    int position=getPosition(element);
    if (position == RenderState.POSITION_ABSOLUTE || position == RenderState.POSITION_FIXED) {
      fl=Boolean.TRUE;
      this.isFloatLimit=Boolean.TRUE;
    }
    element.getCurrentStyle();
    RenderState rs=element.getRenderState();
    int floatValue=rs == null ? RenderState.FLOAT_NONE : rs.getFloat();
    if (floatValue != RenderState.FLOAT_NONE) {
      fl=Boolean.TRUE;
      this.isFloatLimit=Boolean.TRUE;
    }
    int overflowX=rs == null ? RenderState.OVERFLOW_NONE : rs.getOverflowX();
    int overflowY=rs == null ? RenderState.OVERFLOW_NONE : rs.getOverflowY();
    if (overflowX == RenderState.OVERFLOW_AUTO || overflowX == RenderState.OVERFLOW_SCROLL || overflowY == RenderState.OVERFLOW_AUTO || overflowY == RenderState.OVERFLOW_SCROLL) {
      fl=Boolean.TRUE;
      this.isFloatLimit=Boolean.TRUE;
    }
    fl=Boolean.TRUE;
    this.isFloatLimit=Boolean.TRUE;
  }
  return fl.booleanValue();
}","/** 
 * Checks if is float limit impl.
 * @return the boolean
 */
private Boolean isFloatLimitImpl(){
  Boolean fl=this.isFloatLimit;
  if (fl == null) {
    Object parent=this.getOriginalOrCurrentParent();
    if (!(parent instanceof RBlock)) {
      fl=Boolean.TRUE;
      this.isFloatLimit=Boolean.TRUE;
    }
    RBlock blockParent=(RBlock)parent;
    Object grandParent=blockParent.getOriginalOrCurrentParent();
    if (!(grandParent instanceof RBlockViewport)) {
      fl=Boolean.TRUE;
      this.isFloatLimit=Boolean.TRUE;
    }
    ModelNode node=this.modelNode;
    if (!(node instanceof HTMLElementImpl)) {
      fl=Boolean.TRUE;
      this.isFloatLimit=Boolean.TRUE;
    }
 else {
      HTMLElementImpl element=(HTMLElementImpl)node;
      int position=getPosition(element);
      if (position == RenderState.POSITION_ABSOLUTE || position == RenderState.POSITION_FIXED) {
        fl=Boolean.TRUE;
        this.isFloatLimit=Boolean.TRUE;
      }
      element.getCurrentStyle();
      RenderState rs=element.getRenderState();
      int floatValue=rs == null ? RenderState.FLOAT_NONE : rs.getFloat();
      if (floatValue != RenderState.FLOAT_NONE) {
        fl=Boolean.TRUE;
        this.isFloatLimit=Boolean.TRUE;
      }
      int overflowX=rs == null ? RenderState.OVERFLOW_NONE : rs.getOverflowX();
      int overflowY=rs == null ? RenderState.OVERFLOW_NONE : rs.getOverflowY();
      if (overflowX == RenderState.OVERFLOW_AUTO || overflowX == RenderState.OVERFLOW_SCROLL || overflowY == RenderState.OVERFLOW_AUTO || overflowY == RenderState.OVERFLOW_SCROLL) {
        fl=Boolean.TRUE;
        this.isFloatLimit=Boolean.TRUE;
      }
      fl=Boolean.TRUE;
      this.isFloatLimit=Boolean.TRUE;
    }
  }
  return fl.booleanValue();
}"
60075,"/** 
 * Adds the line.
 * @param startNode the start node
 * @param prevLine the prev line
 * @param newLineY the new line y
 * @return the r line
 */
private RLine addLine(ModelNode startNode,RLine prevLine,int newLineY){
  this.lineDone(prevLine);
  this.checkY(newLineY);
  int leftOffset=this.fetchLeftOffset(newLineY);
  int newX=leftOffset;
  int newMaxWidth=this.desiredWidth - this.fetchRightOffset(newLineY) - leftOffset;
  RLine rline;
  boolean initialAllowOverflow;
  if (prevLine == null) {
    RenderState rs=this.modelNode.getRenderState();
    initialAllowOverflow=rs == null ? false : rs.getWhiteSpace() == RenderState.WS_NOWRAP;
    int textIndent=rs == null ? 0 : rs.getTextIndent(this.availContentWidth);
    if (textIndent != 0) {
      newX+=textIndent;
      newMaxWidth+=leftOffset - newX;
    }
  }
 else {
    int prevLineHeight=prevLine.getHeight();
    if (prevLineHeight > 0) {
      this.currentCollapsibleMargin=0;
    }
    initialAllowOverflow=prevLine.isAllowOverflow();
    if (prevLine.x + prevLine.width > this.maxX) {
      this.maxX=prevLine.x + prevLine.width;
    }
  }
  rline=new RLine(startNode,this.container,newX,newLineY,newMaxWidth,0,initialAllowOverflow);
  rline.setParent(this);
  RenderState rs=startNode.getRenderState();
  if (!Strings.isBlank(rs.getlineHeight())) {
    if (Strings.isNumeric(rs.getlineHeight())) {
      float flh=Float.parseFloat(rs.getlineHeight()) * LAFSettings.getInstance().getFontSize();
      rline.setHeight(HtmlValues.getPixelSize(String.valueOf(flh),null,0));
    }
 else {
      rline.setHeight(HtmlValues.getPixelSize(rs.getlineHeight(),null,0));
    }
  }
  ArrayList<RLine> sr=this.seqRenderables;
  if (sr == null) {
    sr=new ArrayList(1);
    this.seqRenderables=sr;
  }
  sr.add(rline);
  this.currentLine=rline;
  return rline;
}","/** 
 * Adds the line.
 * @param startNode the start node
 * @param prevLine the prev line
 * @param newLineY the new line y
 * @return the r line
 */
private RLine addLine(ModelNode startNode,RLine prevLine,int newLineY){
  this.lineDone(prevLine);
  this.checkY(newLineY);
  int leftOffset=this.fetchLeftOffset(newLineY);
  int newX=leftOffset;
  int newMaxWidth=this.desiredWidth - this.fetchRightOffset(newLineY) - leftOffset;
  RLine rline;
  boolean initialAllowOverflow;
  if (prevLine == null) {
    RenderState rs=this.modelNode.getRenderState();
    initialAllowOverflow=rs == null ? false : rs.getWhiteSpace() == RenderState.WS_NOWRAP;
    int textIndent=rs == null ? 0 : rs.getTextIndent(this.availContentWidth);
    if (textIndent != 0) {
      newX+=textIndent;
      newMaxWidth+=leftOffset - newX;
    }
  }
 else {
    int prevLineHeight=prevLine.getHeight();
    if (prevLineHeight > 0) {
      this.currentCollapsibleMargin=0;
    }
    initialAllowOverflow=prevLine.isAllowOverflow();
    if (prevLine.x + prevLine.width > this.maxX) {
      this.maxX=prevLine.x + prevLine.width;
    }
  }
  rline=new RLine(startNode,this.container,newX,newLineY,newMaxWidth,0,initialAllowOverflow);
  rline.setParent(this);
  RenderState rs=startNode.getRenderState();
  if (!Strings.isBlank(rs.getlineHeight())) {
    Float f=Float.parseFloat(rs.getlineHeight());
    rline.setHeight(f.intValue());
  }
  ArrayList<RLine> sr=this.seqRenderables;
  if (sr == null) {
    sr=new ArrayList(1);
    this.seqRenderables=sr;
  }
  sr.add(rline);
  this.currentLine=rline;
  return rline;
}"
60076,"/** 
 * Adds the line break.
 * @param startNode the start node
 * @param breakType the break type
 */
public void addLineBreak(ModelNode startNode,int breakType){
  RLine line=this.currentLine;
  RenderState rs=startNode.getRenderState();
  if (line == null) {
    Insets insets=this.paddingInsets;
    this.addLine(startNode,null,insets.top);
    line=this.currentLine;
  }
  if (!Strings.isBlank(rs.getlineHeight())) {
    if (Strings.isNumeric(rs.getlineHeight())) {
      float flh=Float.parseFloat(rs.getlineHeight()) * LAFSettings.getInstance().getFontSize();
      line.setHeight(HtmlValues.getPixelSize(String.valueOf(flh),null,0));
    }
 else {
      line.setHeight(HtmlValues.getPixelSize(rs.getlineHeight(),null,0));
    }
  }
  if (line.getHeight() == 0) {
    int fontHeight=rs.getFontMetrics().getHeight();
    line.setHeight(fontHeight);
  }
  line.setLineBreak(new LineBreak(breakType,startNode));
  int newLineY;
  FloatingBounds fb=this.floatBounds;
  if (breakType == LineBreak.NONE || fb == null) {
    newLineY=line == null ? this.paddingInsets.top : line.y + line.height;
  }
 else {
    int prevY=line == null ? this.paddingInsets.top : line.y + line.height;
switch (breakType) {
case LineBreak.LEFT:
      newLineY=fb.getLeftClearY(prevY);
    break;
case LineBreak.RIGHT:
  newLineY=fb.getRightClearY(prevY);
break;
default :
newLineY=fb.getClearY(prevY);
break;
}
}
this.currentLine=this.addLine(startNode,line,newLineY);
}","/** 
 * Adds the line break.
 * @param startNode the start node
 * @param breakType the break type
 */
public void addLineBreak(ModelNode startNode,int breakType){
  RLine line=this.currentLine;
  RenderState rs=startNode.getRenderState();
  if (line == null) {
    Insets insets=this.paddingInsets;
    this.addLine(startNode,null,insets.top);
    line=this.currentLine;
  }
  if (!Strings.isBlank(rs.getlineHeight())) {
    Float f=Float.parseFloat(rs.getlineHeight());
    line.setHeight(f.intValue());
  }
  if (line.getHeight() == 0) {
    int fontHeight=rs.getFontMetrics().getHeight();
    line.setHeight(fontHeight);
  }
  line.setLineBreak(new LineBreak(breakType,startNode));
  int newLineY;
  FloatingBounds fb=this.floatBounds;
  if (breakType == LineBreak.NONE || fb == null) {
    newLineY=line == null ? this.paddingInsets.top : line.y + line.height;
  }
 else {
    int prevY=line == null ? this.paddingInsets.top : line.y + line.height;
switch (breakType) {
case LineBreak.LEFT:
      newLineY=fb.getLeftClearY(prevY);
    break;
case LineBreak.RIGHT:
  newLineY=fb.getRightClearY(prevY);
break;
default :
newLineY=fb.getClearY(prevY);
break;
}
}
this.currentLine=this.addLine(startNode,line,newLineY);
}"
60077,"@Override public String getlineHeight(){
  AbstractCSSProperties props=this.getCssProperties();
  String lh=props == null ? null : props.getLineHeight();
  RenderState prs=this.prevRenderState;
  if (lh == null && prs != null)   lh=prs.getlineHeight();
  if (lh == null)   return null;
switch (lh) {
case INHERIT:
    return this.getPreviousRenderState().getlineHeight();
case NORMAL:
  return String.valueOf(1.2f * LAFSettings.getInstance().getFontSize());
case INITIAL:
return String.valueOf(prs.getFontMetrics().getHeight());
default :
return lh;
}
}","@Override public String getlineHeight(){
  AbstractCSSProperties props=this.getCssProperties();
  RenderState prs=this.prevRenderState;
  String lh=props == null ? null : props.getLineHeight();
  if (this.iLineHeight != null) {
    return this.iLineHeight;
  }
  if (lh == null) {
    if (prs != null) {
      this.iLineHeight=prs.getlineHeight();
      return this.iLineHeight;
    }
    this.iLineHeight=DEFAULT_LINE_HEIGHT;
    return DEFAULT_LINE_HEIGHT;
  }
switch (lh) {
case INHERIT:
    return this.getPreviousRenderState().getlineHeight();
case NORMAL:
  return String.valueOf(1.2f * LAFSettings.getInstance().getFontSize());
case INITIAL:
return String.valueOf(prs.getFontMetrics().getHeight());
default :
int ilh=HtmlValues.getPixelSize(lh,this,1);
return String.valueOf(ilh * LAFSettings.getInstance().getFontSize());
}
}"
60078,"@Override public void invalidate(){
  Map<String,WordInfo> map=this.iWordInfoMap;
  if (map != null) {
    map.clear();
  }
  this.iFont=null;
  this.iFontMetrics=null;
  this.iColor=null;
  this.iTextDecoration=-1;
  this.iBlankWidth=-1;
  this.alignXPercent=-1;
  this.iBackgroundColor=INVALID_COLOR;
  this.iTextBackgroundColor=INVALID_COLOR;
  this.iOverlayColor=INVALID_COLOR;
  this.iBackgroundInfo=INVALID_BACKGROUND_INFO;
  this.iDisplay=null;
  this.iTextIndentText=null;
  this.iWhiteSpace=null;
  this.marginInsets=MarginRenderState.INVALID_INSETS;
  this.paddingInsets=PaddingRenderState.INVALID_INSETS;
  this.overflowX=-1;
  this.overflowY=-1;
  this.borderInfo=BorderRenderState.INVALID_BORDER_INFO;
}","@Override public void invalidate(){
  Map<String,WordInfo> map=this.iWordInfoMap;
  if (map != null) {
    map.clear();
  }
  this.iFont=null;
  this.iFontMetrics=null;
  this.iColor=null;
  this.iTextDecoration=-1;
  this.iBlankWidth=-1;
  this.alignXPercent=-1;
  this.iBackgroundColor=INVALID_COLOR;
  this.iTextBackgroundColor=INVALID_COLOR;
  this.iOverlayColor=INVALID_COLOR;
  this.iBackgroundInfo=INVALID_BACKGROUND_INFO;
  this.iDisplay=null;
  this.iTextIndentText=null;
  this.iWhiteSpace=null;
  this.iLineHeight=String.valueOf(1.6f * LAFSettings.getInstance().getFontSize());
  this.marginInsets=MarginRenderState.INVALID_INSETS;
  this.paddingInsets=PaddingRenderState.INVALID_INSETS;
  this.overflowX=-1;
  this.overflowY=-1;
  this.borderInfo=BorderRenderState.INVALID_BORDER_INFO;
}"
60079,"@Override public void changeValue(AbstractCSSProperties properties,String newValue,CSSStyleDeclaration declaration,boolean important){
  properties.setPropertyValueLCAlt(FONT,newValue,important);
  if (!Strings.isBlank(newValue)) {
    String fontSpecTL=newValue.toLowerCase();
    FontInfo fontInfo=FontValues.SYSTEM_FONTS.get(fontSpecTL);
    if (fontInfo != null) {
      if (fontInfo.getFontFamily() != null) {
        properties.setPropertyValueLCAlt(FONT_FAMILY,fontInfo.getFontFamily(),important);
      }
      if (fontInfo.getFontSize() != null) {
        properties.setPropertyValueLCAlt(FONT_SIZE,fontInfo.getFontSize(),important);
      }
      if (fontInfo.getFontStyle() != null) {
        properties.setPropertyValueLCAlt(FONT_STYLE,fontInfo.getFontStyle(),important);
      }
      if (fontInfo.getFontVariant() != null) {
        properties.setPropertyValueLCAlt(FONT_VARIANT,fontInfo.getFontVariant(),important);
      }
      if (fontInfo.getFontWeight() != null) {
        properties.setPropertyValueLCAlt(FONT_WEIGHT,fontInfo.getFontWeight(),important);
      }
      return;
    }
    String[] tokens=HtmlValues.splitCssValue(fontSpecTL);
    String token=null;
    int length=tokens.length;
    int i;
    for (i=0; i < length; i++) {
      token=tokens[i];
      if (FontValues.isFontStyle(token)) {
        properties.setPropertyValueLCAlt(FONT_STYLE,token,important);
        continue;
      }
      if (FontValues.isFontVariant(token)) {
        properties.setPropertyValueLCAlt(FONT_VARIANT,token,important);
        continue;
      }
      if (FontValues.isFontWeight(token)) {
        properties.setPropertyValueLCAlt(FONT_WEIGHT,token,important);
        continue;
      }
      break;
    }
    if (token != null) {
      int slashIdx=token.indexOf('/');
      String fontSizeText=slashIdx == -1 ? token : token.substring(0,slashIdx);
      properties.setPropertyValueLCAlt(FONT_SIZE,fontSizeText,important);
      String lineHeightText=slashIdx == -1 ? null : token.substring(slashIdx + 1);
      if (lineHeightText != null) {
        properties.setPropertyValueLCAlt(LINE_HEIGHT,lineHeightText,important);
      }
      if (++i < length) {
        StringBuilder fontFamilyBuff=new StringBuilder();
        do {
          token=tokens[i];
          fontFamilyBuff.append(token);
          fontFamilyBuff.append(' ');
        }
 while (++i < length);
        properties.setPropertyValueLCAlt(FONT_FAMILY,fontFamilyBuff.toString(),important);
      }
    }
  }
}","@Override public void changeValue(AbstractCSSProperties properties,String newValue,CSSStyleDeclaration declaration,boolean important){
  properties.setPropertyValueLCAlt(FONT,newValue,important);
  if (!Strings.isBlank(newValue)) {
    String fontSpecTL=newValue.toLowerCase();
    String[] tokens=HtmlValues.splitCssValue(fontSpecTL);
    String token=null;
    int length=tokens.length;
    int i;
    for (i=0; i < length; i++) {
      token=tokens[i];
      if (FontValues.isFontStyle(token)) {
        properties.setPropertyValueLCAlt(FONT_STYLE,token,important);
        continue;
      }
      if (FontValues.isFontVariant(token)) {
        properties.setPropertyValueLCAlt(FONT_VARIANT,token,important);
        continue;
      }
      if (FontValues.isFontWeight(token)) {
        properties.setPropertyValueLCAlt(FONT_WEIGHT,token,important);
        continue;
      }
      break;
    }
    if (token != null) {
      int slashIdx=token.indexOf('/');
      String fontSizeText=slashIdx == -1 ? token : token.substring(0,slashIdx);
      properties.setPropertyValueLCAlt(FONT_SIZE,fontSizeText,important);
      String lineHeightText=slashIdx == -1 ? null : token.substring(slashIdx + 1);
      if (lineHeightText != null) {
        properties.setPropertyValueLCAlt(LINE_HEIGHT,lineHeightText,important);
      }
      if (++i < length) {
        StringBuilder fontFamilyBuff=new StringBuilder();
        do {
          token=tokens[i];
          fontFamilyBuff.append(token);
          fontFamilyBuff.append(' ');
        }
 while (++i < length);
        properties.setPropertyValueLCAlt(FONT_FAMILY,fontFamilyBuff.toString(),important);
      }
    }
  }
}"
60080,"public SelectorInfo getSelector(String str,String selector){
  SelectorInfo si=new SelectorInfo();
  if (!selector.equals(SelectorMatcher.OP_ALL)) {
    Pattern SPACE=Pattern.compile(""String_Node_Str"" + selector);
    String[] arr=SPACE.split(str);
    si.setAttribute(arr[0]);
    si.setAttributeValue(arr[1]);
  }
 else {
    si.setAttribute(str);
    si.setAttributeValue(""String_Node_Str"");
  }
  return si;
}","public SelectorInfo getSelector(String str,String selector){
  SelectorInfo si=new SelectorInfo();
  if (!selector.equals(SelectorMatcher.OP_ALL)) {
    Pattern SPACE=Pattern.compile(""String_Node_Str"" + selector);
    String[] arr=SPACE.split(str);
    for (int i=0; i < arr.length; i++) {
      if (i == 0)       si.setAttribute(arr[0]);
      if (i == 1)       si.setAttributeValue(arr[1]);
    }
  }
 else {
    si.setAttribute(str);
    si.setAttributeValue(""String_Node_Str"");
  }
  return si;
}"
60081,"/** 
 * Builds the layout/renderer tree from scratch. Note: Returned dimension needs to be actual size needed for rendered content, not the available container size. This is relied upon by table layout.
 * @param desiredWidth the desired width
 * @param desiredHeight the desired height
 * @param paddingInsets the padding insets
 * @param yLimit If other than -1, <code>layout</code> will throw <code>SizeExceededException</code> in the event that the layout goes beyond this y-coordinate point.
 * @param floatBounds the float bounds
 * @param sizeOnly the size only
 */
public void layout(int desiredWidth,int desiredHeight,Insets paddingInsets,int yLimit,FloatingBounds floatBounds,boolean sizeOnly){
  if (!SwingUtilities.isEventDispatchThread() && logger.isEnabled(Level.INFO)) {
    logger.warn(""String_Node_Str"");
  }
  RenderableContainer container=this.container;
  this.paddingInsets=paddingInsets;
  this.yLimit=yLimit;
  this.desiredHeight=desiredHeight;
  this.desiredWidth=desiredWidth;
  this.floatBounds=floatBounds;
  this.isFloatLimit=null;
  this.pendingFloats=null;
  this.sizeOnly=sizeOnly;
  this.lastSeqBlock=null;
  this.currentCollapsibleMargin=this.initCollapsibleMargin();
  this.maxX=paddingInsets.left;
  this.maxY=paddingInsets.top;
  int availw=desiredWidth - paddingInsets.left - paddingInsets.right;
  if (availw < 0) {
    availw=0;
  }
  int availh=desiredHeight - paddingInsets.top - paddingInsets.bottom;
  if (availh == 0) {
    availh=0;
  }
  this.availContentHeight=availh;
  this.availContentWidth=availw;
  this.layoutPass((DOMNodeImpl)this.modelNode);
  Collection delayedPairs=container.getDelayedPairs();
  if (delayedPairs != null && delayedPairs.size() > 0) {
    Iterator i=delayedPairs.iterator();
    while (i.hasNext()) {
      DelayedPair pair=(DelayedPair)i.next();
      if (pair.containingBlock == container) {
        this.importDelayedPair(pair);
      }
    }
  }
  int maxY=this.maxY;
  int maxYWholeBlock=maxY;
  BoundableRenderable lastSeqBlock=this.lastSeqBlock;
  if (lastSeqBlock != null) {
    int effBlockHeight=this.getEffectiveBlockHeight(lastSeqBlock);
    if (lastSeqBlock.getY() + effBlockHeight > maxY) {
      this.maxY=maxY=lastSeqBlock.getY() + effBlockHeight;
      maxYWholeBlock=lastSeqBlock.getY() + lastSeqBlock.getHeight();
    }
  }
  RLine lastLine=this.currentLine;
  Rectangle lastBounds=lastLine.getBounds();
  if (lastBounds.height > 0 || lastBounds.y > maxYWholeBlock) {
    int lastTopX=lastBounds.x + lastBounds.width;
    if (lastTopX > this.maxX) {
      this.maxX=lastTopX;
    }
    int lastTopY=lastBounds.y + lastBounds.height;
    if (lastTopY > maxY) {
      this.maxY=maxY=lastTopY;
    }
  }
  SortedSet<PositionedRenderable> posRenderables=this.positionedRenderables;
  if (posRenderables != null) {
    boolean isFloatLimit=this.isFloatLimit();
    Iterator<PositionedRenderable> i=posRenderables.iterator();
    while (i.hasNext()) {
      PositionedRenderable pr=i.next();
      BoundableRenderable br=pr.getRenderable();
      if (br.getX() + br.getWidth() > this.maxX) {
        this.maxX=br.getX() + br.getWidth();
      }
      if (isFloatLimit || !pr.isFloat()) {
        if (br.getY() + br.getHeight() > maxY) {
          this.maxY=maxY=br.getY() + br.getHeight();
        }
      }
    }
  }
  this.width=paddingInsets.right + this.maxX;
  this.height=paddingInsets.bottom + maxY;
}","/** 
 * Builds the layout/renderer tree from scratch. Note: Returned dimension needs to be actual size needed for rendered content, not the available container size. This is relied upon by table layout.
 * @param desiredWidth the desired width
 * @param desiredHeight the desired height
 * @param paddingInsets the padding insets
 * @param yLimit If other than -1, <code>layout</code> will throw <code>SizeExceededException</code> in the event that the layout goes beyond this y-coordinate point.
 * @param floatBounds the float bounds
 * @param sizeOnly the size only
 */
public void layout(int desiredWidth,int desiredHeight,Insets paddingInsets,int yLimit,FloatingBounds floatBounds,boolean sizeOnly){
  if (!SwingUtilities.isEventDispatchThread() && logger.isEnabled(Level.INFO)) {
    logger.warn(""String_Node_Str"");
  }
  RenderableContainer container=this.container;
  this.paddingInsets=paddingInsets;
  this.yLimit=yLimit;
  this.desiredHeight=desiredHeight;
  this.desiredWidth=desiredWidth;
  this.floatBounds=floatBounds;
  this.isFloatLimit=null;
  this.pendingFloats=null;
  this.sizeOnly=sizeOnly;
  this.lastSeqBlock=null;
  this.currentCollapsibleMargin=this.initCollapsibleMargin();
  this.maxX=paddingInsets.left;
  this.maxY=paddingInsets.top;
  int availw=desiredWidth - paddingInsets.left - paddingInsets.right;
  if (availw < 0) {
    availw=0;
  }
  int availh=desiredHeight - paddingInsets.top - paddingInsets.bottom;
  if (availh < 0) {
    availh=0;
  }
  this.availContentHeight=availh;
  this.availContentWidth=availw;
  this.layoutPass((DOMNodeImpl)this.modelNode);
  Collection delayedPairs=container.getDelayedPairs();
  if (delayedPairs != null && delayedPairs.size() > 0) {
    Iterator i=delayedPairs.iterator();
    while (i.hasNext()) {
      DelayedPair pair=(DelayedPair)i.next();
      if (pair.containingBlock == container) {
        this.importDelayedPair(pair);
      }
    }
  }
  int maxY=this.maxY;
  int maxYWholeBlock=maxY;
  BoundableRenderable lastSeqBlock=this.lastSeqBlock;
  if (lastSeqBlock != null) {
    int effBlockHeight=this.getEffectiveBlockHeight(lastSeqBlock);
    if (lastSeqBlock.getY() + effBlockHeight > maxY) {
      this.maxY=maxY=lastSeqBlock.getY() + effBlockHeight;
      maxYWholeBlock=lastSeqBlock.getY() + lastSeqBlock.getHeight();
    }
  }
  RLine lastLine=this.currentLine;
  Rectangle lastBounds=lastLine.getBounds();
  if (lastBounds.height > 0 || lastBounds.y > maxYWholeBlock) {
    int lastTopX=lastBounds.x + lastBounds.width;
    if (lastTopX > this.maxX) {
      this.maxX=lastTopX;
    }
    int lastTopY=lastBounds.y + lastBounds.height;
    if (lastTopY > maxY) {
      this.maxY=maxY=lastTopY;
    }
  }
  SortedSet<PositionedRenderable> posRenderables=this.positionedRenderables;
  if (posRenderables != null) {
    boolean isFloatLimit=this.isFloatLimit();
    Iterator<PositionedRenderable> i=posRenderables.iterator();
    while (i.hasNext()) {
      PositionedRenderable pr=i.next();
      BoundableRenderable br=pr.getRenderable();
      if (br.getX() + br.getWidth() > this.maxX) {
        this.maxX=br.getX() + br.getWidth();
      }
      if (isFloatLimit || !pr.isFloat()) {
        if (br.getY() + br.getHeight() > maxY) {
          this.maxY=maxY=br.getY() + br.getHeight();
        }
      }
    }
  }
  this.width=paddingInsets.right + this.maxX;
  this.height=paddingInsets.bottom + maxY;
}"
60082,"private void animateY(){
  if (this.animate.getRepeatDur() <= (System.currentTimeMillis() - repeatDuration)) {
    stopAnimation();
  }
  if (info.getY() >= to_xml) {
    if (this.animate.getRepeatCount() == count) {
      stopAnimation();
    }
 else {
      count++;
      from_xml=Float.parseFloat(this.animate.getFrom());
      info.setY(from_xml);
    }
  }
 else {
    from_xml++;
    info.setY(from_xml);
    ruicontrol.relayout();
  }
}","private void animateY(){
  if (this.animate.getRepeatDur() <= (System.currentTimeMillis() - repeatDuration)) {
    stopAnimation();
  }
  if (from_xml >= to_xml) {
    if (this.animate.getRepeatCount() == count) {
      stopAnimation();
    }
 else {
      count++;
      from_xml=Float.parseFloat(this.animate.getFrom());
      info.setY(from_xml);
    }
  }
 else {
    from_xml++;
    info.setY(from_xml);
    ruicontrol.relayout();
  }
}"
60083,"private void animateR(){
  if (this.animate.getRepeatDur() <= (System.currentTimeMillis() - repeatDuration)) {
    stopAnimation();
  }
  if (info.getR() >= to_xml) {
    if (this.animate.getRepeatCount() == count) {
      stopAnimation();
    }
 else {
      count++;
      from_xml=Float.parseFloat(this.animate.getFrom());
      info.setR(from_xml);
    }
  }
 else {
    from_xml++;
    info.setR(from_xml);
    ruicontrol.relayout();
  }
}","private void animateR(){
  if (this.animate.getRepeatDur() <= (System.currentTimeMillis() - repeatDuration)) {
    stopAnimation();
  }
  if (from_xml >= to_xml) {
    if (this.animate.getRepeatCount() == count) {
      stopAnimation();
    }
 else {
      count++;
      from_xml=Float.parseFloat(this.animate.getFrom());
      info.setR(from_xml);
    }
  }
 else {
    from_xml++;
    info.setR(from_xml);
    ruicontrol.relayout();
  }
}"
60084,"private void animateX(){
  if (this.animate.getRepeatDur() <= (System.currentTimeMillis() - repeatDuration)) {
    stopAnimation();
  }
  if (info.getX() >= to_xml) {
    if (this.animate.getRepeatCount() == count) {
      stopAnimation();
    }
 else {
      count++;
      from_xml=Float.parseFloat(this.animate.getFrom());
      info.setX(from_xml);
    }
  }
 else {
    from_xml++;
    info.setX(from_xml);
    ruicontrol.relayout();
  }
}","private void animateX(){
  if (this.animate.getRepeatDur() <= (System.currentTimeMillis() - repeatDuration)) {
    stopAnimation();
  }
  if (from_xml >= to_xml) {
    if (this.animate.getRepeatCount() == count) {
      stopAnimation();
    }
 else {
      count++;
      from_xml=Float.parseFloat(this.animate.getFrom());
      info.setX(from_xml);
    }
  }
 else {
    from_xml++;
    info.setX(from_xml);
    ruicontrol.relayout();
  }
}"
60085,"private void animateX2(){
  if (this.animate.getRepeatDur() <= (System.currentTimeMillis() - repeatDuration)) {
    stopAnimation();
  }
  if (info.getX2() >= to_xml) {
    if (this.animate.getRepeatCount() == count) {
      stopAnimation();
    }
 else {
      count++;
      from_xml=Float.parseFloat(this.animate.getFrom());
      info.setX2(from_xml);
    }
  }
 else {
    from_xml++;
    info.setX2(from_xml);
    ruicontrol.relayout();
  }
}","private void animateX2(){
  if (this.animate.getRepeatDur() <= (System.currentTimeMillis() - repeatDuration)) {
    stopAnimation();
  }
  if (from_xml >= to_xml) {
    if (this.animate.getRepeatCount() == count) {
      stopAnimation();
    }
 else {
      count++;
      from_xml=Float.parseFloat(this.animate.getFrom());
      info.setX2(from_xml);
    }
  }
 else {
    from_xml++;
    info.setX2(from_xml);
    ruicontrol.relayout();
  }
}"
60086,"private void animateX1(){
  if (this.animate.getRepeatDur() <= (System.currentTimeMillis() - repeatDuration)) {
    stopAnimation();
  }
  if (info.getX1() >= to_xml) {
    if (this.animate.getRepeatCount() == count) {
      stopAnimation();
    }
 else {
      count++;
      from_xml=Float.parseFloat(this.animate.getFrom());
      info.setX1(from_xml);
    }
  }
 else {
    from_xml++;
    info.setX1(from_xml);
    ruicontrol.relayout();
  }
}","private void animateX1(){
  if (this.animate.getRepeatDur() <= (System.currentTimeMillis() - repeatDuration)) {
    stopAnimation();
  }
  if (from_xml >= to_xml) {
    if (this.animate.getRepeatCount() == count) {
      stopAnimation();
    }
 else {
      count++;
      from_xml=Float.parseFloat(this.animate.getFrom());
      info.setX1(from_xml);
    }
  }
 else {
    from_xml++;
    info.setX1(from_xml);
    ruicontrol.relayout();
  }
}"
60087,"private void animateY2(){
  if (this.animate.getRepeatDur() <= (System.currentTimeMillis() - repeatDuration)) {
    stopAnimation();
  }
  if (info.getY2() >= to_xml) {
    if (this.animate.getRepeatCount() == count) {
      stopAnimation();
    }
 else {
      count++;
      from_xml=Float.parseFloat(this.animate.getFrom());
      info.setY2(from_xml);
    }
  }
 else {
    from_xml++;
    info.setY2(from_xml);
    ruicontrol.relayout();
  }
}","private void animateY2(){
  if (this.animate.getRepeatDur() <= (System.currentTimeMillis() - repeatDuration)) {
    stopAnimation();
  }
  if (from_xml >= to_xml) {
    if (this.animate.getRepeatCount() == count) {
      stopAnimation();
    }
 else {
      count++;
      from_xml=Float.parseFloat(this.animate.getFrom());
      info.setY2(from_xml);
    }
  }
 else {
    from_xml++;
    info.setY2(from_xml);
    ruicontrol.relayout();
  }
}"
60088,"private void animateY1(){
  if (this.animate.getRepeatDur() <= (System.currentTimeMillis() - repeatDuration)) {
    stopAnimation();
  }
  if (info.getY1() >= to_xml) {
    if (this.animate.getRepeatCount() == count) {
      stopAnimation();
    }
 else {
      count++;
      from_xml=Float.parseFloat(this.animate.getFrom());
      info.setY1(from_xml);
    }
  }
 else {
    from_xml++;
    info.setY1(from_xml);
    ruicontrol.relayout();
  }
}","private void animateY1(){
  if (this.animate.getRepeatDur() <= (System.currentTimeMillis() - repeatDuration)) {
    stopAnimation();
  }
  if (from_xml >= to_xml) {
    if (this.animate.getRepeatCount() == count) {
      stopAnimation();
    }
 else {
      count++;
      from_xml=Float.parseFloat(this.animate.getFrom());
      info.setY1(from_xml);
    }
  }
 else {
    from_xml++;
    info.setY1(from_xml);
    ruicontrol.relayout();
  }
}"
60089,"private void animateWidth(){
  if (this.animate.getRepeatDur() <= (System.currentTimeMillis() - repeatDuration)) {
    stopAnimation();
  }
  if (info.getWidth() >= to_xml) {
    if (this.animate.getRepeatCount() == count) {
      stopAnimation();
    }
 else {
      count++;
      from_xml=Float.parseFloat(this.animate.getFrom());
      info.setWidth(from_xml);
    }
  }
 else {
    from_xml++;
    info.setWidth(from_xml);
    ruicontrol.relayout();
  }
}","private void animateWidth(){
  if (this.animate.getRepeatDur() <= (System.currentTimeMillis() - repeatDuration)) {
    stopAnimation();
  }
  if (from_xml >= to_xml) {
    if (this.animate.getRepeatCount() == count) {
      stopAnimation();
    }
 else {
      count++;
      from_xml=Float.parseFloat(this.animate.getFrom());
      info.setWidth(from_xml);
    }
  }
 else {
    from_xml++;
    info.setWidth(from_xml);
    ruicontrol.relayout();
  }
}"
60090,"private void animateHeight(){
  if (this.animate.getRepeatDur() <= (System.currentTimeMillis() - repeatDuration)) {
    stopAnimation();
  }
  if (info.getHeight() >= to_xml) {
    if (this.animate.getRepeatCount() == count) {
      stopAnimation();
    }
 else {
      count++;
      from_xml=Float.parseFloat(this.animate.getFrom());
      info.setHeight(from_xml);
    }
  }
 else {
    from_xml++;
    info.setHeight(from_xml);
    ruicontrol.relayout();
  }
}","private void animateHeight(){
  if (this.animate.getRepeatDur() <= (System.currentTimeMillis() - repeatDuration)) {
    stopAnimation();
  }
  if (from_xml >= to_xml) {
    if (this.animate.getRepeatCount() == count) {
      stopAnimation();
    }
 else {
      count++;
      from_xml=Float.parseFloat(this.animate.getFrom());
      info.setHeight(from_xml);
    }
  }
 else {
    from_xml++;
    info.setHeight(from_xml);
    ruicontrol.relayout();
  }
}"
60091,"private void svgChildren(Node n){
  if (n instanceof SVGCircleElementImpl) {
    SVGCircleElementImpl svgcircle=(SVGCircleElementImpl)n;
    AbstractCSS2Properties style=svgcircle.getStyle();
    SVGInfo svgi=new SVGInfo();
    svgi.setMethod(CIRCLE);
    svgi.setX(svgcircle.getCx().getBaseVal().getValue());
    svgi.setY(svgcircle.getCy().getBaseVal().getValue());
    svgi.setR(svgcircle.getR().getBaseVal().getValue());
    if (svgcircle.getFill() != null) {
      style.setFill(svgcircle.getFill());
    }
    if (svgcircle.getStroke() != null) {
      style.setStroke(svgcircle.getStroke());
    }
    if (svgcircle.getStrokeDashArray() != null) {
      style.setStrokeDashArray(svgcircle.getStrokeDashArray());
    }
    if (svgcircle.getStrokeLineCap() != null) {
      style.setStrokeLineCap(svgcircle.getStrokeLineCap());
    }
    if (svgcircle.getStrokeMiterLimit() != null) {
      style.setStrokeMiterLimit(svgcircle.getStrokeMiterLimit());
    }
    if (svgcircle.getStrokeOpacity() != null) {
      style.setStrokeOpacity(svgcircle.getStrokeOpacity());
    }
    if (svgcircle.getStrokeWidth() != null) {
      style.setStrokeWidth(svgcircle.getStrokeWidth());
    }
    svgi.setTransformList(svgcircle.getTransform().getBaseVal());
    svgi.setStyle(style);
    svgList.add(svgi);
  }
  if (n instanceof SVGRectElementImpl) {
    SVGRectElementImpl svgrect=(SVGRectElementImpl)n;
    AbstractCSS2Properties style=svgrect.getStyle();
    SVGInfo svgi=new SVGInfo();
    svgi.setMethod(RECT);
    svgi.setX(svgrect.getX().getBaseVal().getValue());
    svgi.setY(svgrect.getY().getBaseVal().getValue());
    svgi.setWidth(svgrect.getWidth().getBaseVal().getValue());
    svgi.setHeight(svgrect.getHeight().getBaseVal().getValue());
    svgi.setRx(svgrect.getRx().getBaseVal().getValue());
    svgi.setRy(svgrect.getRy().getBaseVal().getValue());
    if (svgrect.getFill() != null) {
      style.setFill(svgrect.getFill());
    }
    if (svgrect.getStroke() != null) {
      style.setStroke(svgrect.getStroke());
    }
    if (svgrect.getStrokeDashArray() != null) {
      style.setStrokeDashArray(svgrect.getStrokeDashArray());
    }
    if (svgrect.getStrokeLineCap() != null) {
      style.setStrokeLineCap(svgrect.getStrokeLineCap());
    }
    if (svgrect.getStrokeMiterLimit() != null) {
      style.setStrokeMiterLimit(svgrect.getStrokeMiterLimit());
    }
    if (svgrect.getStrokeOpacity() != null) {
      style.setStrokeOpacity(svgrect.getStrokeOpacity());
    }
    if (svgrect.getStrokeWidth() != null) {
      style.setStrokeWidth(svgrect.getStrokeWidth());
    }
    svgi.setTransformList(svgrect.getTransform().getBaseVal());
    svgi.setStyle(style);
    svgList.add(svgi);
  }
  if (n instanceof SVGEllipseElementImpl) {
    SVGEllipseElementImpl svgellipse=(SVGEllipseElementImpl)n;
    AbstractCSS2Properties style=svgellipse.getStyle();
    SVGInfo svgi=new SVGInfo();
    svgi.setMethod(ELLIPSE);
    svgi.setX(svgellipse.getCx().getBaseVal().getValue());
    svgi.setY(svgellipse.getCy().getBaseVal().getValue());
    svgi.setRx(svgellipse.getRx().getBaseVal().getValue());
    svgi.setRy(svgellipse.getRy().getBaseVal().getValue());
    if (svgellipse.getFill() != null) {
      style.setFill(svgellipse.getFill());
    }
    if (svgellipse.getStroke() != null) {
      style.setStroke(svgellipse.getStroke());
    }
    if (svgellipse.getStrokeDashArray() != null) {
      style.setStrokeDashArray(svgellipse.getStrokeDashArray());
    }
    if (svgellipse.getStrokeLineCap() != null) {
      style.setStrokeLineCap(svgellipse.getStrokeLineCap());
    }
    if (svgellipse.getStrokeMiterLimit() != null) {
      style.setStrokeMiterLimit(svgellipse.getStrokeMiterLimit());
    }
    if (svgellipse.getStrokeOpacity() != null) {
      style.setStrokeOpacity(svgellipse.getStrokeOpacity());
    }
    if (svgellipse.getStrokeWidth() != null) {
      style.setStrokeWidth(svgellipse.getStrokeWidth());
    }
    svgi.setTransformList(svgellipse.getTransform().getBaseVal());
    svgi.setStyle(svgellipse.getStyle());
    svgList.add(svgi);
  }
  if (n instanceof SVGLineElementImpl) {
    SVGLineElementImpl svgline=(SVGLineElementImpl)n;
    AbstractCSS2Properties style=svgline.getStyle();
    SVGInfo svgi=new SVGInfo();
    svgi.setMethod(LINE);
    svgi.setX1(svgline.getX1().getBaseVal().getValue());
    svgi.setY1(svgline.getY1().getBaseVal().getValue());
    svgi.setX2(svgline.getX2().getBaseVal().getValue());
    svgi.setY2(svgline.getY2().getBaseVal().getValue());
    if (svgline.getFill() != null) {
      style.setFill(svgline.getFill());
    }
    if (svgline.getStroke() != null) {
      style.setStroke(svgline.getStroke());
    }
    if (svgline.getStrokeDashArray() != null) {
      style.setStrokeDashArray(svgline.getStrokeDashArray());
    }
    if (svgline.getStrokeLineCap() != null) {
      style.setStrokeLineCap(svgline.getStrokeLineCap());
    }
    if (svgline.getStrokeMiterLimit() != null) {
      style.setStrokeMiterLimit(svgline.getStrokeMiterLimit());
    }
    if (svgline.getStrokeOpacity() != null) {
      style.setStrokeOpacity(svgline.getStrokeOpacity());
    }
    if (svgline.getStrokeWidth() != null) {
      style.setStrokeWidth(svgline.getStrokeWidth());
    }
    svgi.setTransformList(svgline.getTransform().getBaseVal());
    svgi.setStyle(svgline.getStyle());
    svgList.add(svgi);
  }
  if (n instanceof SVGPolylineElementImpl) {
    SVGPolylineElementImpl svgline=(SVGPolylineElementImpl)n;
    AbstractCSS2Properties style=svgline.getStyle();
    SVGInfo svgi=new SVGInfo();
    svgi.setMethod(POLYLINE);
    svgi.setPoilist(svgline.getPoints());
    if (svgline.getFill() != null) {
      style.setFill(svgline.getFill());
    }
    if (svgline.getStroke() != null) {
      style.setStroke(svgline.getStroke());
    }
    if (svgline.getStrokeDashArray() != null) {
      style.setStrokeDashArray(svgline.getStrokeDashArray());
    }
    if (svgline.getStrokeLineCap() != null) {
      style.setStrokeLineCap(svgline.getStrokeLineCap());
    }
    if (svgline.getStrokeMiterLimit() != null) {
      style.setStrokeMiterLimit(svgline.getStrokeMiterLimit());
    }
    if (svgline.getStrokeOpacity() != null) {
      style.setStrokeOpacity(svgline.getStrokeOpacity());
    }
    if (svgline.getStrokeWidth() != null) {
      style.setStrokeWidth(svgline.getStrokeWidth());
    }
    svgi.setTransformList(svgline.getTransform().getBaseVal());
    svgi.setStyle(svgline.getStyle());
    svgList.add(svgi);
  }
  if (n instanceof SVGPolygonElementImpl) {
    SVGPolygonElementImpl svgline=(SVGPolygonElementImpl)n;
    AbstractCSS2Properties style=svgline.getStyle();
    SVGInfo svgi=new SVGInfo();
    svgi.setMethod(POLYGON);
    svgi.setPoilist(svgline.getPoints());
    if (svgline.getFill() != null) {
      style.setFill(svgline.getFill());
    }
    if (svgline.getStroke() != null) {
      style.setStroke(svgline.getStroke());
    }
    if (svgline.getStrokeDashArray() != null) {
      style.setStrokeDashArray(svgline.getStrokeDashArray());
    }
    if (svgline.getStrokeLineCap() != null) {
      style.setStrokeLineCap(svgline.getStrokeLineCap());
    }
    if (svgline.getStrokeMiterLimit() != null) {
      style.setStrokeMiterLimit(svgline.getStrokeMiterLimit());
    }
    if (svgline.getStrokeOpacity() != null) {
      style.setStrokeOpacity(svgline.getStrokeOpacity());
    }
    if (svgline.getStrokeWidth() != null) {
      style.setStrokeWidth(svgline.getStrokeWidth());
    }
    svgi.setTransformList(svgline.getTransform().getBaseVal());
    svgi.setStyle(svgline.getStyle());
    svgList.add(svgi);
  }
  if (n instanceof SVGPathElementImpl) {
    SVGPathElementImpl svgpath=(SVGPathElementImpl)n;
    AbstractCSS2Properties style=svgpath.getStyle();
    SVGInfo svgi=new SVGInfo();
    svgi.setMethod(PATH);
    if (svgpath.getFill() != null) {
      style.setFill(svgpath.getFill());
    }
    if (svgpath.getStroke() != null) {
      style.setStroke(svgpath.getStroke());
    }
    if (svgpath.getStrokeDashArray() != null) {
      style.setStrokeDashArray(svgpath.getStrokeDashArray());
    }
    if (svgpath.getStrokeLineCap() != null) {
      style.setStrokeLineCap(svgpath.getStrokeLineCap());
    }
    if (svgpath.getStrokeMiterLimit() != null) {
      style.setStrokeMiterLimit(svgpath.getStrokeMiterLimit());
    }
    if (svgpath.getStrokeOpacity() != null) {
      style.setStrokeOpacity(svgpath.getStrokeOpacity());
    }
    if (svgpath.getStrokeWidth() != null) {
      style.setStrokeWidth(svgpath.getStrokeWidth());
    }
    svgi.setPathSegList(svgpath.getPathSegList());
    svgi.setStyle(svgpath.getStyle());
    svgList.add(svgi);
  }
}","private void svgChildren(Node n){
  if (n instanceof SVGCircleElementImpl) {
    SVGCircleElementImpl svgcircle=(SVGCircleElementImpl)n;
    AbstractCSS2Properties style=svgcircle.getStyle();
    SVGInfo svgi=new SVGInfo();
    svgi.setMethod(CIRCLE);
    svgi.setX(svgcircle.getCx().getBaseVal().getValue());
    svgi.setY(svgcircle.getCy().getBaseVal().getValue());
    svgi.setR(svgcircle.getR().getBaseVal().getValue());
    if (svgcircle.getFill() != null) {
      style.setFill(svgcircle.getFill());
    }
    if (svgcircle.getStroke() != null) {
      style.setStroke(svgcircle.getStroke());
    }
    if (svgcircle.getStrokeDashArray() != null) {
      style.setStrokeDashArray(svgcircle.getStrokeDashArray());
    }
    if (svgcircle.getStrokeLineCap() != null) {
      style.setStrokeLineCap(svgcircle.getStrokeLineCap());
    }
    if (svgcircle.getStrokeMiterLimit() != null) {
      style.setStrokeMiterLimit(svgcircle.getStrokeMiterLimit());
    }
    if (svgcircle.getStrokeOpacity() != null) {
      style.setStrokeOpacity(svgcircle.getStrokeOpacity());
    }
    if (svgcircle.getStrokeWidth() != null) {
      style.setStrokeWidth(svgcircle.getStrokeWidth());
    }
    svgi.setTransformList(svgcircle.getTransform().getBaseVal());
    svgi.setStyle(style);
    svgList.add(svgi);
  }
  if (n instanceof SVGRectElementImpl) {
    SVGRectElementImpl svgrect=(SVGRectElementImpl)n;
    AbstractCSS2Properties style=svgrect.getStyle();
    SVGInfo svgi=new SVGInfo();
    svgi.setMethod(RECT);
    svgi.setX(svgrect.getX().getBaseVal().getValue());
    svgi.setY(svgrect.getY().getBaseVal().getValue());
    svgi.setWidth(svgrect.getWidth().getBaseVal().getValue());
    svgi.setHeight(svgrect.getHeight().getBaseVal().getValue());
    svgi.setRx(svgrect.getRx().getBaseVal().getValue());
    svgi.setRy(svgrect.getRy().getBaseVal().getValue());
    if (svgrect.getFill() != null) {
      style.setFill(svgrect.getFill());
    }
    if (svgrect.getStroke() != null) {
      style.setStroke(svgrect.getStroke());
    }
    if (svgrect.getStrokeDashArray() != null) {
      style.setStrokeDashArray(svgrect.getStrokeDashArray());
    }
    if (svgrect.getStrokeLineCap() != null) {
      style.setStrokeLineCap(svgrect.getStrokeLineCap());
    }
    if (svgrect.getStrokeMiterLimit() != null) {
      style.setStrokeMiterLimit(svgrect.getStrokeMiterLimit());
    }
    if (svgrect.getStrokeOpacity() != null) {
      style.setStrokeOpacity(svgrect.getStrokeOpacity());
    }
    if (svgrect.getStrokeWidth() != null) {
      style.setStrokeWidth(svgrect.getStrokeWidth());
    }
    svgi.setTransformList(svgrect.getTransform().getBaseVal());
    svgi.setStyle(style);
    svgList.add(svgi);
  }
  if (n instanceof SVGEllipseElementImpl) {
    SVGEllipseElementImpl svgellipse=(SVGEllipseElementImpl)n;
    AbstractCSS2Properties style=svgellipse.getStyle();
    SVGInfo svgi=new SVGInfo();
    svgi.setMethod(ELLIPSE);
    svgi.setX(svgellipse.getCx().getBaseVal().getValue());
    svgi.setY(svgellipse.getCy().getBaseVal().getValue());
    svgi.setRx(svgellipse.getRx().getBaseVal().getValue());
    svgi.setRy(svgellipse.getRy().getBaseVal().getValue());
    if (svgellipse.getFill() != null) {
      style.setFill(svgellipse.getFill());
    }
    if (svgellipse.getStroke() != null) {
      style.setStroke(svgellipse.getStroke());
    }
    if (svgellipse.getStrokeDashArray() != null) {
      style.setStrokeDashArray(svgellipse.getStrokeDashArray());
    }
    if (svgellipse.getStrokeLineCap() != null) {
      style.setStrokeLineCap(svgellipse.getStrokeLineCap());
    }
    if (svgellipse.getStrokeMiterLimit() != null) {
      style.setStrokeMiterLimit(svgellipse.getStrokeMiterLimit());
    }
    if (svgellipse.getStrokeOpacity() != null) {
      style.setStrokeOpacity(svgellipse.getStrokeOpacity());
    }
    if (svgellipse.getStrokeWidth() != null) {
      style.setStrokeWidth(svgellipse.getStrokeWidth());
    }
    svgi.setTransformList(svgellipse.getTransform().getBaseVal());
    svgi.setStyle(svgellipse.getStyle());
    svgList.add(svgi);
  }
  if (n instanceof SVGLineElementImpl) {
    SVGLineElementImpl svgline=(SVGLineElementImpl)n;
    AbstractCSS2Properties style=svgline.getStyle();
    SVGInfo svgi=new SVGInfo();
    svgi.setMethod(LINE);
    svgi.setX1(svgline.getX1().getBaseVal().getValue());
    svgi.setY1(svgline.getY1().getBaseVal().getValue());
    svgi.setX2(svgline.getX2().getBaseVal().getValue());
    svgi.setY2(svgline.getY2().getBaseVal().getValue());
    if (svgline.getFill() != null) {
      style.setFill(svgline.getFill());
    }
    if (svgline.getStroke() != null) {
      style.setStroke(svgline.getStroke());
    }
    if (svgline.getStrokeDashArray() != null) {
      style.setStrokeDashArray(svgline.getStrokeDashArray());
    }
    if (svgline.getStrokeLineCap() != null) {
      style.setStrokeLineCap(svgline.getStrokeLineCap());
    }
    if (svgline.getStrokeMiterLimit() != null) {
      style.setStrokeMiterLimit(svgline.getStrokeMiterLimit());
    }
    if (svgline.getStrokeOpacity() != null) {
      style.setStrokeOpacity(svgline.getStrokeOpacity());
    }
    if (svgline.getStrokeWidth() != null) {
      style.setStrokeWidth(svgline.getStrokeWidth());
    }
    svgi.setTransformList(svgline.getTransform().getBaseVal());
    svgi.setStyle(svgline.getStyle());
    svgList.add(svgi);
  }
  if (n instanceof SVGPolylineElementImpl) {
    SVGPolylineElementImpl svgline=(SVGPolylineElementImpl)n;
    AbstractCSS2Properties style=svgline.getStyle();
    SVGInfo svgi=new SVGInfo();
    svgi.setMethod(POLYLINE);
    svgi.setPoilist(svgline.getPoints());
    if (svgline.getFill() != null) {
      style.setFill(svgline.getFill());
    }
    if (svgline.getStroke() != null) {
      style.setStroke(svgline.getStroke());
    }
    if (svgline.getStrokeDashArray() != null) {
      style.setStrokeDashArray(svgline.getStrokeDashArray());
    }
    if (svgline.getStrokeLineCap() != null) {
      style.setStrokeLineCap(svgline.getStrokeLineCap());
    }
    if (svgline.getStrokeMiterLimit() != null) {
      style.setStrokeMiterLimit(svgline.getStrokeMiterLimit());
    }
    if (svgline.getStrokeOpacity() != null) {
      style.setStrokeOpacity(svgline.getStrokeOpacity());
    }
    if (svgline.getStrokeWidth() != null) {
      style.setStrokeWidth(svgline.getStrokeWidth());
    }
    svgi.setTransformList(svgline.getTransform().getBaseVal());
    svgi.setStyle(svgline.getStyle());
    svgList.add(svgi);
  }
  if (n instanceof SVGPolygonElementImpl) {
    SVGPolygonElementImpl svgline=(SVGPolygonElementImpl)n;
    AbstractCSS2Properties style=svgline.getStyle();
    SVGInfo svgi=new SVGInfo();
    svgi.setMethod(POLYGON);
    svgi.setPoilist(svgline.getPoints());
    if (svgline.getFill() != null) {
      style.setFill(svgline.getFill());
    }
    if (svgline.getStroke() != null) {
      style.setStroke(svgline.getStroke());
    }
    if (svgline.getStrokeDashArray() != null) {
      style.setStrokeDashArray(svgline.getStrokeDashArray());
    }
    if (svgline.getStrokeLineCap() != null) {
      style.setStrokeLineCap(svgline.getStrokeLineCap());
    }
    if (svgline.getStrokeMiterLimit() != null) {
      style.setStrokeMiterLimit(svgline.getStrokeMiterLimit());
    }
    if (svgline.getStrokeOpacity() != null) {
      style.setStrokeOpacity(svgline.getStrokeOpacity());
    }
    if (svgline.getStrokeWidth() != null) {
      style.setStrokeWidth(svgline.getStrokeWidth());
    }
    svgi.setTransformList(svgline.getTransform().getBaseVal());
    svgi.setStyle(svgline.getStyle());
    svgList.add(svgi);
  }
  if (n instanceof SVGPathElementImpl) {
    SVGPathElementImpl svgpath=(SVGPathElementImpl)n;
    AbstractCSS2Properties style=svgpath.getStyle();
    SVGInfo svgi=new SVGInfo();
    svgi.setMethod(PATH);
    if (svgpath.getFill() != null) {
      style.setFill(svgpath.getFill());
    }
    if (svgpath.getStroke() != null) {
      style.setStroke(svgpath.getStroke());
    }
    if (svgpath.getStrokeDashArray() != null) {
      style.setStrokeDashArray(svgpath.getStrokeDashArray());
    }
    if (svgpath.getStrokeLineCap() != null) {
      style.setStrokeLineCap(svgpath.getStrokeLineCap());
    }
    if (svgpath.getStrokeMiterLimit() != null) {
      style.setStrokeMiterLimit(svgpath.getStrokeMiterLimit());
    }
    if (svgpath.getStrokeOpacity() != null) {
      style.setStrokeOpacity(svgpath.getStrokeOpacity());
    }
    if (svgpath.getStrokeWidth() != null) {
      style.setStrokeWidth(svgpath.getStrokeWidth());
    }
    svgi.setPathSegList(svgpath.getPathSegList());
    svgi.setStyle(svgpath.getStyle());
    svgList.add(svgi);
  }
  if (n instanceof SVGGElementImpl) {
    SVGGElementImpl svgGroup=(SVGGElementImpl)n;
    AbstractCSS2Properties style=svgGroup.getStyle();
    if (svgGroup.getFill() != null) {
      style.setFill(svgGroup.getFill());
    }
    if (svgGroup.getStroke() != null) {
      style.setStroke(svgGroup.getStroke());
    }
    if (svgGroup.getStrokeDashArray() != null) {
      style.setStrokeDashArray(svgGroup.getStrokeDashArray());
    }
    if (svgGroup.getStrokeLineCap() != null) {
      style.setStrokeLineCap(svgGroup.getStrokeLineCap());
    }
    if (svgGroup.getStrokeMiterLimit() != null) {
      style.setStrokeMiterLimit(svgGroup.getStrokeMiterLimit());
    }
    if (svgGroup.getStrokeOpacity() != null) {
      style.setStrokeOpacity(svgGroup.getStrokeOpacity());
    }
    if (svgGroup.getStrokeWidth() != null) {
      style.setStrokeWidth(svgGroup.getStrokeWidth());
    }
    SVGInfo svgiGroup=new SVGInfo();
    svgiGroup.setTransformList(svgGroup.getTransform().getBaseVal());
    svgiGroup.setStyle(svgGroup.getStyle());
    setSvgiGroup(svgiGroup);
    NodeList gChildNodes=svgGroup.getChildNodes();
    logger.error(""String_Node_Str"" + gChildNodes.getLength());
    for (int g=0; g < gChildNodes.getLength(); g++) {
      Node n1=(Node)gChildNodes.item(g);
      logger.error(n1.getClass().getName());
      svgChildren(n1);
    }
  }
}"
60092,"public String getD(){
  return this.getAttribute(D);
}","public String getD(){
  String d=this.getAttribute(D);
  if (d != null) {
    d.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  return d;
}"
60093,"@Override public Object setUserData(String key,Object data,UserDataHandler handler){
  if (HtmlParser.MODIFYING_KEY.equals(key)) {
    boolean ns=(boolean)data;
    this.notificationsSuspended=ns;
    if (!ns) {
      this.informNodeLoaded();
    }
  }
synchronized (this) {
    if (handler != null) {
      if (this.userDataHandlers == null) {
        this.userDataHandlers=new HashMap<String,UserDataHandler>();
      }
 else {
        this.userDataHandlers.put(key,handler);
      }
    }
    Map<String,Object> userData=this.userData;
    if (data != null) {
      if (userData == null) {
        userData=new HashMap<String,Object>();
        this.userData=userData;
      }
      return userData.put(key,data);
    }
 else     if (userData != null) {
      return userData.remove(key);
    }
 else {
      return null;
    }
  }
}","@Override public Object setUserData(String key,Object data,UserDataHandler handler){
  if (HtmlParser.MODIFYING_KEY.equals(key) && data instanceof Boolean) {
    boolean ns=(boolean)data;
    this.notificationsSuspended=ns;
    if (!ns) {
      this.informNodeLoaded();
    }
  }
synchronized (this) {
    if (handler != null) {
      if (this.userDataHandlers == null) {
        this.userDataHandlers=new HashMap<String,UserDataHandler>();
      }
 else {
        this.userDataHandlers.put(key,handler);
      }
    }
    Map<String,Object> userData=this.userData;
    if (data != null) {
      if (userData == null) {
        userData=new HashMap<String,Object>();
        this.userData=userData;
      }
      return userData.put(key,data);
    }
 else     if (userData != null) {
      return userData.remove(key);
    }
 else {
      return null;
    }
  }
}"
60094,"@Override public Object setUserData(String key,Object data,UserDataHandler handler){
  boolean dataBool=(boolean)data;
  if (HtmlParser.MODIFYING_KEY.equals(key) && !dataBool) {
    this.processBaseTag();
  }
  return super.setUserData(key,data,handler);
}","@Override public Object setUserData(String key,Object data,UserDataHandler handler){
  if (HtmlParser.MODIFYING_KEY.equals(key) && data instanceof Boolean && !(boolean)data) {
    this.processBaseTag();
  }
  return super.setUserData(key,data,handler);
}"
60095,"@Override public Object setUserData(String key,Object data,UserDataHandler handler){
  Function onloadHandler=this.onloadHandler;
  if (onloadHandler != null) {
    boolean dataBool=(boolean)data;
    if (HtmlParser.MODIFYING_KEY.equals(key) && !dataBool) {
      Executor.executeFunction(this,onloadHandler,null);
    }
  }
  return super.setUserData(key,data,handler);
}","@Override public Object setUserData(String key,Object data,UserDataHandler handler){
  Function onloadHandler=this.onloadHandler;
  if (onloadHandler != null && data instanceof Boolean) {
    boolean dataBool=(boolean)data;
    if (HtmlParser.MODIFYING_KEY.equals(key) && !dataBool) {
      Executor.executeFunction(this,onloadHandler,null);
    }
  }
  return super.setUserData(key,data,handler);
}"
60096,"@Override public Object setUserData(String key,Object data,UserDataHandler handler){
  boolean dataBool=(boolean)data;
  if (HtmlParser.MODIFYING_KEY.equals(key) && !dataBool) {
    this.processLink();
  }
 else   if (""String_Node_Str"".equals(key)) {
    this.informDocumentInvalid();
  }
  return super.setUserData(key,data,handler);
}","@Override public Object setUserData(String key,Object data,UserDataHandler handler){
  if (HtmlParser.MODIFYING_KEY.equals(key) && data instanceof Boolean && !(boolean)data) {
    this.processLink();
  }
 else   if (""String_Node_Str"".equals(key)) {
    this.informDocumentInvalid();
  }
  return super.setUserData(key,data,handler);
}"
60097,"@Override public Object setUserData(String key,Object data,UserDataHandler handler){
  boolean dataBool=(boolean)data;
  if (HtmlParser.MODIFYING_KEY.equals(key) && !dataBool) {
    this.processScript();
  }
  return super.setUserData(key,data,handler);
}","@Override public Object setUserData(String key,Object data,UserDataHandler handler){
  if (HtmlParser.MODIFYING_KEY.equals(key) && data instanceof Boolean && !(boolean)data) {
    this.processScript();
  }
  return super.setUserData(key,data,handler);
}"
60098,"@Override public Object setUserData(String key,Object data,UserDataHandler handler){
  boolean dataBool=(boolean)data;
  if (HtmlParser.MODIFYING_KEY.equals(key) && !dataBool) {
    Document document=this.document;
    if (document instanceof HTMLDocumentImpl) {
      String textContent=this.getTextContent();
      String title=textContent == null ? null : textContent.trim();
      ((HTMLDocumentImpl)document).setTitle(title);
    }
  }
  return super.setUserData(key,data,handler);
}","@Override public Object setUserData(String key,Object data,UserDataHandler handler){
  if (HtmlParser.MODIFYING_KEY.equals(key) && data instanceof Boolean && !(boolean)data) {
    Document document=this.document;
    if (document instanceof HTMLDocumentImpl) {
      String textContent=this.getTextContent();
      String title=textContent == null ? null : textContent.trim();
      ((HTMLDocumentImpl)document).setTitle(title);
    }
  }
  return super.setUserData(key,data,handler);
}"
60099,"/** 
 * Load background image.
 * @param imageURL the image url
 */
protected void loadBackgroundImage(final URL imageURL){
  Image image=null;
  String url=imageURL.toString();
  try {
    SSLCertificate.setCertificate();
    URLConnection con=imageURL.openConnection();
    con.setRequestProperty(""String_Node_Str"",UserAgentContext.DEFAULT_USER_AGENT);
    if (url.endsWith(""String_Node_Str"")) {
      SVGRasterizer r=new SVGRasterizer(imageURL);
      image=r.bufferedImageToImage();
    }
 else     if (url.startsWith(""String_Node_Str"")) {
      image=Toolkit.getDefaultToolkit().createImage(ImageIO.read(con.getInputStream()).getSource());
    }
 else     if (url.endsWith(""String_Node_Str"")) {
      try {
        image=new ImageIcon(imageURL).getImage();
      }
 catch (      Exception e) {
        image=ImageIO.read(con.getInputStream());
      }
    }
 else     if (url.endsWith(""String_Node_Str"")) {
      image=ImageIO.read(con.getInputStream());
    }
 else {
      image=ImageIO.read(con.getInputStream());
    }
    BaseElementRenderable.this.backgroundImage=image;
    int w=-1;
    int h=-1;
    if (image != null) {
      w=image.getWidth(BaseElementRenderable.this);
      h=image.getHeight(BaseElementRenderable.this);
    }
    if (w != -1 && h != -1) {
      BaseElementRenderable.this.repaint();
    }
  }
 catch (  FileNotFoundException|IIOException ex) {
    logger.error(""String_Node_Str"" + url);
  }
catch (  IOException|TranscoderException thrown) {
    logger.error(""String_Node_Str"",thrown);
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}","/** 
 * Load background image.
 * @param imageURL the image url
 */
protected void loadBackgroundImage(final URL imageURL){
  Image image=null;
  String url=imageURL.toString();
  try {
    SSLCertificate.setCertificate();
    URLConnection con=imageURL.openConnection();
    con.setRequestProperty(""String_Node_Str"",UserAgentContext.DEFAULT_USER_AGENT);
    if (url.endsWith(""String_Node_Str"")) {
      SVGRasterizer r=new SVGRasterizer(imageURL);
      image=r.bufferedImageToImage();
    }
 else     if (url.startsWith(""String_Node_Str"")) {
      BufferedImage bi=ImageIO.read(con.getInputStream());
      if (bi != null)       image=Toolkit.getDefaultToolkit().createImage(bi.getSource());
    }
 else     if (url.endsWith(""String_Node_Str"")) {
      try {
        image=new ImageIcon(imageURL).getImage();
      }
 catch (      Exception e) {
        image=ImageIO.read(con.getInputStream());
      }
    }
 else     if (url.endsWith(""String_Node_Str"")) {
      image=ImageIO.read(con.getInputStream());
    }
 else {
      image=ImageIO.read(con.getInputStream());
    }
    BaseElementRenderable.this.backgroundImage=image;
    int w=-1;
    int h=-1;
    if (image != null) {
      w=image.getWidth(BaseElementRenderable.this);
      h=image.getHeight(BaseElementRenderable.this);
    }
    if (w != -1 && h != -1) {
      BaseElementRenderable.this.repaint();
    }
  }
 catch (  FileNotFoundException|IIOException ex) {
    logger.error(""String_Node_Str"" + url);
  }
catch (  IOException|TranscoderException thrown) {
    logger.error(""String_Node_Str"",thrown);
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}"
60100,"@Override public boolean equals(final Object other){
  if (other == this) {
    return true;
  }
  FontKey ors;
  try {
    ors=(FontKey)other;
  }
 catch (  ClassCastException cce) {
    return false;
  }
  return (this.fontSize == ors.fontSize) && (this.fontFamily.equals(ors.fontFamily)) && (this.fontStyle.equals(ors.fontStyle))&& (this.fontWeight.equals(ors.fontWeight))&& (this.fontVariant.equals(ors.fontVariant))&& (this.superscript.intValue() == ors.superscript.intValue())&& Objects.equals(this.locales,ors.locales);
}","@Override public boolean equals(final Object other){
  if (other == this) {
    return true;
  }
  FontKey ors;
  try {
    ors=(FontKey)other;
  }
 catch (  ClassCastException cce) {
    return false;
  }
  return (this.fontSize == ors.fontSize) && (this.fontFamily != null && this.fontFamily.equals(ors.fontFamily)) && (this.fontStyle != null && this.fontStyle.equals(ors.fontStyle))&& (this.fontWeight != null && this.fontWeight.equals(ors.fontWeight))&& (this.fontWeight != null && this.fontWeight.equals(ors.fontVariant))&& (this.superscript != null && this.superscript.intValue() == ors.superscript.intValue())&& Objects.equals(this.locales,ors.locales);
}"
60101,"@Override public final void paintTranslated(Graphics g){
  int x=this.x;
  int y=this.y;
  logger.error(y + ""String_Node_Str"" + x);
  g.translate(x,y);
  try {
    this.paint(g);
  }
  finally {
    g.translate(-x,-y);
  }
}","@Override public final void paintTranslated(Graphics g){
  int x=this.x;
  int y=this.y;
  g.translate(x,y);
  try {
    this.paint(g);
  }
  finally {
    g.translate(-x,-y);
  }
}"
60102,"/** 
 * Checks for declared width.
 * @return true, if successful
 */
public final boolean hasDeclaredWidth(){
  Integer dw=this.declaredWidth;
  if (dw.intValue() == INVALID_SIZE.intValue()) {
    Object rootNode=this.modelNode;
    if (rootNode instanceof HTMLElementImpl) {
      HTMLElementImpl element=(HTMLElementImpl)rootNode;
      CSS2Properties props=element.getCurrentStyle();
      if (props == null) {
        return false;
      }
      return !Strings.isBlank(props.getWidth());
    }
    return false;
  }
  return dw != null;
}","/** 
 * Checks for declared width.
 * @return true, if successful
 */
public final boolean hasDeclaredWidth(){
  Integer dw=this.declaredWidth == null ? 0 : this.declaredWidth;
  if (dw.intValue() == INVALID_SIZE.intValue()) {
    Object rootNode=this.modelNode;
    if (rootNode instanceof HTMLElementImpl) {
      HTMLElementImpl element=(HTMLElementImpl)rootNode;
      CSS2Properties props=element.getCurrentStyle();
      if (props == null) {
        return false;
      }
      return !Strings.isBlank(props.getWidth());
    }
    return false;
  }
  return dw != null;
}"
60103,"/** 
 * Gets the declared height.
 * @param renderState the render state
 * @param actualAvailHeight the actual avail height
 * @return the declared height
 */
protected Integer getDeclaredHeight(RenderState renderState,int actualAvailHeight){
  Integer dh=this.declaredHeight;
  if ((dh.intValue() == INVALID_SIZE.intValue()) || (actualAvailHeight != this.lastAvailHeightForDeclared)) {
    this.lastAvailHeightForDeclared=actualAvailHeight;
    int dhInt=this.getDeclaredHeightImpl(renderState,actualAvailHeight);
    dh=dhInt == -1 ? null : Integer.valueOf(dhInt);
    this.declaredHeight=dh;
  }
  return dh;
}","/** 
 * Gets the declared height.
 * @param renderState the render state
 * @param actualAvailHeight the actual avail height
 * @return the declared height
 */
protected Integer getDeclaredHeight(RenderState renderState,int actualAvailHeight){
  Integer dh=this.declaredHeight == null ? 0 : this.declaredHeight;
  if ((dh.intValue() == INVALID_SIZE.intValue()) || (actualAvailHeight != this.lastAvailHeightForDeclared)) {
    this.lastAvailHeightForDeclared=actualAvailHeight;
    int dhInt=this.getDeclaredHeightImpl(renderState,actualAvailHeight);
    dh=dhInt == -1 ? null : Integer.valueOf(dhInt);
    this.declaredHeight=dh;
  }
  return dh;
}"
60104,"/** 
 * Apply style.
 * @param availWidth the avail width
 * @param availHeight the avail height
 */
protected void applyStyle(int availWidth,int availHeight){
  Object rootNode=this.modelNode;
  HTMLElementImpl rootElement;
  boolean isRootBlock;
  if (rootNode instanceof HTMLDocumentImpl) {
    isRootBlock=true;
    HTMLDocumentImpl doc=(HTMLDocumentImpl)rootNode;
    rootElement=(HTMLElementImpl)doc.getBody();
  }
 else {
    isRootBlock=false;
    rootElement=(HTMLElementImpl)rootNode;
  }
  if (rootElement == null) {
    this.clearStyle(isRootBlock);
    return;
  }
  RenderState rs=rootElement.getRenderState();
  if (rs == null) {
    throw new IllegalStateException(""String_Node_Str"" + rootElement + ""String_Node_Str""+ rootElement.getParentNode());
  }
  BackgroundInfo binfo=rs.getBackgroundInfo();
  this.backgroundColor=binfo == null ? null : binfo.getBackgroundColor();
  URL backgroundImage=binfo == null ? null : binfo.getBackgroundImage();
  if (backgroundImage == null) {
    this.backgroundImage=null;
    this.lastBackgroundImageUri=null;
  }
 else {
    if (!backgroundImage.equals(this.lastBackgroundImageUri)) {
      this.lastBackgroundImageUri=backgroundImage;
      this.loadBackgroundImage(backgroundImage);
    }
  }
  AbstractCSS2Properties props=rootElement.getCurrentStyle();
  if (props == null) {
    this.clearStyle(isRootBlock);
  }
 else {
    BorderInfo borderInfo=rs.getBorderInfo();
    this.borderInfo=borderInfo;
    HtmlInsets binsets=borderInfo == null ? null : borderInfo.getInsets();
    HtmlInsets minsets=rs.getMarginInsets();
    HtmlInsets pinsets=rs.getPaddingInsets();
    Insets defaultMarginInsets=this.defaultMarginInsets;
    int dmleft=0, dmright=0, dmtop=0, dmbottom=0;
    if (defaultMarginInsets != null) {
      dmleft=defaultMarginInsets.left;
      dmright=defaultMarginInsets.right;
      dmtop=defaultMarginInsets.top;
      dmbottom=defaultMarginInsets.bottom;
    }
    Insets defaultPaddingInsets=this.defaultPaddingInsets;
    int dpleft=0, dpright=0, dptop=0, dpbottom=0;
    if (defaultPaddingInsets != null) {
      dpleft=defaultPaddingInsets.left;
      dpright=defaultPaddingInsets.right;
      dptop=defaultPaddingInsets.top;
      dpbottom=defaultPaddingInsets.bottom;
    }
    Insets borderInsets=binsets == null ? null : binsets.getAWTInsets(0,0,0,0,availWidth,availHeight,0,0);
    if (borderInsets == null) {
      borderInsets=RBlockViewport.ZERO_INSETS;
    }
    Insets paddingInsets=pinsets == null ? defaultPaddingInsets : pinsets.getAWTInsets(dptop,dpleft,dpbottom,dpright,availWidth,availHeight,0,0);
    if (paddingInsets == null) {
      paddingInsets=RBlockViewport.ZERO_INSETS;
    }
    Insets tentativeMarginInsets=minsets == null ? defaultMarginInsets : minsets.getAWTInsets(dmtop,dmleft,dmbottom,dmright,availWidth,availHeight,0,0);
    if (tentativeMarginInsets == null) {
      tentativeMarginInsets=RBlockViewport.ZERO_INSETS;
    }
    int actualAvailWidth=availWidth - paddingInsets.left - paddingInsets.right- borderInsets.left- borderInsets.right- tentativeMarginInsets.left- tentativeMarginInsets.right;
    int actualAvailHeight=availHeight - paddingInsets.top - paddingInsets.bottom- borderInsets.top- borderInsets.bottom- tentativeMarginInsets.top- tentativeMarginInsets.bottom;
    Integer declaredWidth=this.getDeclaredWidth(rs,actualAvailWidth);
    Integer declaredHeight=this.getDeclaredHeight(rs,actualAvailHeight);
    int autoMarginX=0, autoMarginY=0;
    autoMarginX=(availWidth - declaredWidth.intValue() - (borderInsets == null ? 0 : borderInsets.left - borderInsets.right)- (paddingInsets == null ? 0 : paddingInsets.left - paddingInsets.right)) / 2;
    autoMarginY=(availHeight - declaredHeight.intValue() - (borderInsets == null ? 0 : borderInsets.top - borderInsets.bottom)- (paddingInsets == null ? 0 : paddingInsets.top - paddingInsets.bottom)) / 2;
    this.borderInsets=borderInsets;
    if (isRootBlock) {
      Insets regularMarginInsets=((autoMarginX == 0) && (autoMarginY == 0)) ? tentativeMarginInsets : (minsets == null ? defaultMarginInsets : minsets.getAWTInsets(dmtop,dmleft,dmbottom,dmright,availWidth,availHeight,autoMarginX,autoMarginY));
      if (regularMarginInsets == null) {
        regularMarginInsets=RBlockViewport.ZERO_INSETS;
      }
      this.marginInsets=null;
      this.paddingInsets=new Insets(paddingInsets.top + regularMarginInsets.top,paddingInsets.left + regularMarginInsets.left,paddingInsets.bottom + regularMarginInsets.bottom,paddingInsets.right + regularMarginInsets.right);
    }
 else {
      this.paddingInsets=paddingInsets;
      this.marginInsets=((autoMarginX == 0) && (autoMarginY == 0)) ? tentativeMarginInsets : (minsets == null ? defaultMarginInsets : minsets.getAWTInsets(dmtop,dmleft,dmbottom,dmright,availWidth,availHeight,autoMarginX,autoMarginY));
    }
    if (borderInfo != null) {
      this.borderTopColor=borderInfo.getTopColor();
      this.borderLeftColor=borderInfo.getLeftColor();
      this.borderBottomColor=borderInfo.getBottomColor();
      this.borderRightColor=borderInfo.getRightColor();
    }
 else {
      this.borderTopColor=null;
      this.borderLeftColor=null;
      this.borderBottomColor=null;
      this.borderRightColor=null;
    }
    String zIndex=props.getZIndex();
    if (zIndex != null) {
      try {
        this.zIndex=Integer.parseInt(zIndex);
      }
 catch (      NumberFormatException err) {
        logger.error(""String_Node_Str"" + zIndex + ""String_Node_Str""+ this.modelNode+ ""String_Node_Str"",err);
        this.zIndex=0;
      }
    }
 else {
      this.zIndex=0;
    }
    this.overflowX=rs.getOverflowX();
    this.overflowY=rs.getOverflowY();
  }
}","/** 
 * Apply style.
 * @param availWidth the avail width
 * @param availHeight the avail height
 */
protected void applyStyle(int availWidth,int availHeight){
  Object rootNode=this.modelNode;
  HTMLElementImpl rootElement;
  boolean isRootBlock;
  if (rootNode instanceof HTMLDocumentImpl) {
    isRootBlock=true;
    HTMLDocumentImpl doc=(HTMLDocumentImpl)rootNode;
    rootElement=(HTMLElementImpl)doc.getBody();
  }
 else {
    isRootBlock=false;
    rootElement=(HTMLElementImpl)rootNode;
  }
  if (rootElement == null) {
    this.clearStyle(isRootBlock);
    return;
  }
  RenderState rs=rootElement.getRenderState();
  if (rs == null) {
    throw new IllegalStateException(""String_Node_Str"" + rootElement + ""String_Node_Str""+ rootElement.getParentNode());
  }
  BackgroundInfo binfo=rs.getBackgroundInfo();
  this.backgroundColor=binfo == null ? null : binfo.getBackgroundColor();
  URL backgroundImage=binfo == null ? null : binfo.getBackgroundImage();
  if (backgroundImage == null) {
    this.backgroundImage=null;
    this.lastBackgroundImageUri=null;
  }
 else {
    if (!backgroundImage.equals(this.lastBackgroundImageUri)) {
      this.lastBackgroundImageUri=backgroundImage;
      this.loadBackgroundImage(backgroundImage);
    }
  }
  AbstractCSS2Properties props=rootElement.getCurrentStyle();
  if (props == null) {
    this.clearStyle(isRootBlock);
  }
 else {
    BorderInfo borderInfo=rs.getBorderInfo();
    this.borderInfo=borderInfo;
    HtmlInsets binsets=borderInfo == null ? null : borderInfo.getInsets();
    HtmlInsets minsets=rs.getMarginInsets();
    HtmlInsets pinsets=rs.getPaddingInsets();
    Insets defaultMarginInsets=this.defaultMarginInsets;
    int dmleft=0, dmright=0, dmtop=0, dmbottom=0;
    if (defaultMarginInsets != null) {
      dmleft=defaultMarginInsets.left;
      dmright=defaultMarginInsets.right;
      dmtop=defaultMarginInsets.top;
      dmbottom=defaultMarginInsets.bottom;
    }
    Insets defaultPaddingInsets=this.defaultPaddingInsets;
    int dpleft=0, dpright=0, dptop=0, dpbottom=0;
    if (defaultPaddingInsets != null) {
      dpleft=defaultPaddingInsets.left;
      dpright=defaultPaddingInsets.right;
      dptop=defaultPaddingInsets.top;
      dpbottom=defaultPaddingInsets.bottom;
    }
    Insets borderInsets=binsets == null ? null : binsets.getAWTInsets(0,0,0,0,availWidth,availHeight,0,0);
    if (borderInsets == null) {
      borderInsets=RBlockViewport.ZERO_INSETS;
    }
    Insets paddingInsets=pinsets == null ? defaultPaddingInsets : pinsets.getAWTInsets(dptop,dpleft,dpbottom,dpright,availWidth,availHeight,0,0);
    if (paddingInsets == null) {
      paddingInsets=RBlockViewport.ZERO_INSETS;
    }
    Insets tentativeMarginInsets=minsets == null ? defaultMarginInsets : minsets.getAWTInsets(dmtop,dmleft,dmbottom,dmright,availWidth,availHeight,0,0);
    if (tentativeMarginInsets == null) {
      tentativeMarginInsets=RBlockViewport.ZERO_INSETS;
    }
    int actualAvailWidth=availWidth - paddingInsets.left - paddingInsets.right- borderInsets.left- borderInsets.right- tentativeMarginInsets.left- tentativeMarginInsets.right;
    int actualAvailHeight=availHeight - paddingInsets.top - paddingInsets.bottom- borderInsets.top- borderInsets.bottom- tentativeMarginInsets.top- tentativeMarginInsets.bottom;
    Integer declaredWidth=this.getDeclaredWidth(rs,actualAvailWidth);
    Integer declaredHeight=this.getDeclaredHeight(rs,actualAvailHeight);
    int autoMarginX=0, autoMarginY=0;
    if (declaredWidth != null) {
      autoMarginX=(availWidth - declaredWidth.intValue() - (borderInsets == null ? 0 : borderInsets.left - borderInsets.right)- (paddingInsets == null ? 0 : paddingInsets.left - paddingInsets.right)) / 2;
    }
    if (declaredHeight != null) {
      autoMarginY=(availHeight - declaredHeight.intValue() - (borderInsets == null ? 0 : borderInsets.top - borderInsets.bottom)- (paddingInsets == null ? 0 : paddingInsets.top - paddingInsets.bottom)) / 2;
    }
    this.borderInsets=borderInsets;
    if (isRootBlock) {
      Insets regularMarginInsets=((autoMarginX == 0) && (autoMarginY == 0)) ? tentativeMarginInsets : (minsets == null ? defaultMarginInsets : minsets.getAWTInsets(dmtop,dmleft,dmbottom,dmright,availWidth,availHeight,autoMarginX,autoMarginY));
      if (regularMarginInsets == null) {
        regularMarginInsets=RBlockViewport.ZERO_INSETS;
      }
      this.marginInsets=null;
      this.paddingInsets=new Insets(paddingInsets.top + regularMarginInsets.top,paddingInsets.left + regularMarginInsets.left,paddingInsets.bottom + regularMarginInsets.bottom,paddingInsets.right + regularMarginInsets.right);
    }
 else {
      this.paddingInsets=paddingInsets;
      this.marginInsets=((autoMarginX == 0) && (autoMarginY == 0)) ? tentativeMarginInsets : (minsets == null ? defaultMarginInsets : minsets.getAWTInsets(dmtop,dmleft,dmbottom,dmright,availWidth,availHeight,autoMarginX,autoMarginY));
    }
    if (borderInfo != null) {
      this.borderTopColor=borderInfo.getTopColor();
      this.borderLeftColor=borderInfo.getLeftColor();
      this.borderBottomColor=borderInfo.getBottomColor();
      this.borderRightColor=borderInfo.getRightColor();
    }
 else {
      this.borderTopColor=null;
      this.borderLeftColor=null;
      this.borderBottomColor=null;
      this.borderRightColor=null;
    }
    String zIndex=props.getZIndex();
    if (zIndex != null) {
      try {
        this.zIndex=Integer.parseInt(zIndex);
      }
 catch (      NumberFormatException err) {
        logger.error(""String_Node_Str"" + zIndex + ""String_Node_Str""+ this.modelNode+ ""String_Node_Str"",err);
        this.zIndex=0;
      }
    }
 else {
      this.zIndex=0;
    }
    this.overflowX=rs.getOverflowX();
    this.overflowY=rs.getOverflowY();
  }
}"
60105,"/** 
 * Gets the declared width.
 * @param renderState the render state
 * @param actualAvailWidth the actual avail width
 * @return the declared width
 */
protected Integer getDeclaredWidth(RenderState renderState,int actualAvailWidth){
  Integer dw=this.declaredWidth;
  if ((dw.intValue() == INVALID_SIZE.intValue()) || (actualAvailWidth != this.lastAvailWidthForDeclared)) {
    this.lastAvailWidthForDeclared=actualAvailWidth;
    int dwInt=this.getDeclaredWidthImpl(renderState,actualAvailWidth);
    dw=dwInt == -1 ? null : Integer.valueOf(dwInt);
    this.declaredWidth=dw;
  }
  return dw;
}","/** 
 * Gets the declared width.
 * @param renderState the render state
 * @param actualAvailWidth the actual avail width
 * @return the declared width
 */
protected Integer getDeclaredWidth(RenderState renderState,int actualAvailWidth){
  Integer dw=this.declaredWidth == null ? 0 : this.declaredWidth;
  if ((dw.intValue() == INVALID_SIZE.intValue()) || (actualAvailWidth != this.lastAvailWidthForDeclared)) {
    this.lastAvailWidthForDeclared=actualAvailWidth;
    int dwInt=this.getDeclaredWidthImpl(renderState,actualAvailWidth);
    dw=dwInt == -1 ? null : Integer.valueOf(dwInt);
    this.declaredWidth=dw;
  }
  return dw;
}"
60106,"/** 
 * Layout text.
 * @param textNode the text node
 */
private void layoutText(DOMNodeImpl textNode){
  RenderState renderState=textNode.getRenderState();
  if (renderState == null) {
    throw new IllegalStateException(""String_Node_Str"" + textNode + ""String_Node_Str""+ textNode.getParentNode());
  }
  FontMetrics fm=renderState.getFontMetrics();
  int descent=fm.getDescent();
  int ascentPlusLeading=fm.getAscent() + fm.getLeading();
  int wordHeight=fm.getHeight();
  int blankWidth=fm.charWidth(' ');
  int whiteSpace=this.overrideNoWrap ? RenderState.WS_NOWRAP : renderState.getWhiteSpace();
  int textTransform=renderState.getTextTransform();
  String text=textNode.getNodeValue();
  if (whiteSpace != RenderState.WS_PRE) {
    boolean prevAllowOverflow=this.currentLine.isAllowOverflow();
    boolean allowOverflow=whiteSpace == RenderState.WS_NOWRAP;
    this.currentLine.setAllowOverflow(allowOverflow);
    try {
      int length=text.length();
      StringBuffer word=new StringBuffer(12);
      for (int i=0; i < length; i++) {
        char ch=text.charAt(i);
        if (Character.isWhitespace(ch)) {
          int wlen=word.length();
          if (wlen > 0) {
            RWord rword=new RWord(textNode,word.toString(),container,fm,descent,ascentPlusLeading,wordHeight,textTransform);
            this.addWordToLine(rword);
            word.delete(0,wlen);
          }
          RLine line=this.currentLine;
          if (line.width > 0) {
            logger.error(""String_Node_Str"" + textNode.getTextContent());
            RBlank rblank=new RBlank(textNode,fm,container,ascentPlusLeading,blankWidth,wordHeight);
            line.addBlank(rblank);
          }
          for (i++; i < length; i++) {
            ch=text.charAt(i);
            if (!Character.isWhitespace(ch)) {
              word.append(ch);
              break;
            }
          }
        }
 else {
          word.append(ch);
        }
      }
      if (word.length() > 0) {
        RWord rword=new RWord(textNode,word.toString(),container,fm,descent,ascentPlusLeading,wordHeight,textTransform);
        this.addWordToLine(rword);
      }
    }
  finally {
      this.currentLine.setAllowOverflow(prevAllowOverflow);
    }
  }
 else {
    int length=text.length();
    boolean lastCharSlashR=false;
    StringBuffer line=new StringBuffer();
    for (int i=0; i < length; i++) {
      char ch=text.charAt(i);
switch (ch) {
case '\r':
        lastCharSlashR=true;
      break;
case '\n':
    int llen=line.length();
  if (llen > 0) {
    RWord rword=new RWord(textNode,line.toString(),container,fm,descent,ascentPlusLeading,wordHeight,textTransform);
    this.addWordToLine(rword);
    line.delete(0,line.length());
  }
RLine prevLine=this.currentLine;
prevLine.setLineBreak(new LineBreak(LineBreak.NONE,textNode));
this.addLine(textNode,prevLine,prevLine.y + prevLine.height);
break;
default :
if (lastCharSlashR) {
line.append('\r');
lastCharSlashR=false;
}
line.append(ch);
break;
}
}
if (line.length() > 0) {
RWord rword=new RWord(textNode,line.toString(),container,fm,descent,ascentPlusLeading,wordHeight,textTransform);
this.addWordToLine(rword);
}
}
}","/** 
 * Layout text.
 * @param textNode the text node
 */
private void layoutText(DOMNodeImpl textNode){
  RenderState renderState=textNode.getRenderState();
  if (renderState == null) {
    throw new IllegalStateException(""String_Node_Str"" + textNode + ""String_Node_Str""+ textNode.getParentNode());
  }
  FontMetrics fm=renderState.getFontMetrics();
  int descent=fm.getDescent();
  int ascentPlusLeading=fm.getAscent() + fm.getLeading();
  int wordHeight=fm.getHeight();
  int blankWidth=fm.charWidth(' ');
  int whiteSpace=this.overrideNoWrap ? RenderState.WS_NOWRAP : renderState.getWhiteSpace();
  int textTransform=renderState.getTextTransform();
  String text=textNode.getNodeValue();
  if (whiteSpace != RenderState.WS_PRE) {
    boolean prevAllowOverflow=this.currentLine.isAllowOverflow();
    boolean allowOverflow=whiteSpace == RenderState.WS_NOWRAP;
    this.currentLine.setAllowOverflow(allowOverflow);
    try {
      int length=text.length();
      StringBuffer word=new StringBuffer(12);
      for (int i=0; i < length; i++) {
        char ch=text.charAt(i);
        if (Character.isWhitespace(ch)) {
          int wlen=word.length();
          if (wlen > 0) {
            RWord rword=new RWord(textNode,word.toString(),container,fm,descent,ascentPlusLeading,wordHeight,textTransform);
            this.addWordToLine(rword);
            word.delete(0,wlen);
          }
          RLine line=this.currentLine;
          if (line.width > 0) {
            RBlank rblank=new RBlank(textNode,fm,container,ascentPlusLeading,blankWidth,wordHeight);
            line.addBlank(rblank);
          }
          for (i++; i < length; i++) {
            ch=text.charAt(i);
            if (!Character.isWhitespace(ch)) {
              word.append(ch);
              break;
            }
          }
        }
 else {
          word.append(ch);
        }
      }
      if (word.length() > 0) {
        RWord rword=new RWord(textNode,word.toString(),container,fm,descent,ascentPlusLeading,wordHeight,textTransform);
        this.addWordToLine(rword);
      }
    }
  finally {
      this.currentLine.setAllowOverflow(prevAllowOverflow);
    }
  }
 else {
    int length=text.length();
    boolean lastCharSlashR=false;
    StringBuffer line=new StringBuffer();
    for (int i=0; i < length; i++) {
      char ch=text.charAt(i);
switch (ch) {
case '\r':
        lastCharSlashR=true;
      break;
case '\n':
    int llen=line.length();
  if (llen > 0) {
    RWord rword=new RWord(textNode,line.toString(),container,fm,descent,ascentPlusLeading,wordHeight,textTransform);
    this.addWordToLine(rword);
    line.delete(0,line.length());
  }
RLine prevLine=this.currentLine;
prevLine.setLineBreak(new LineBreak(LineBreak.NONE,textNode));
this.addLine(textNode,prevLine,prevLine.y + prevLine.height);
break;
default :
if (lastCharSlashR) {
line.append('\r');
lastCharSlashR=false;
}
line.append(ch);
break;
}
}
if (line.length() > 0) {
RWord rword=new RWord(textNode,line.toString(),container,fm,descent,ascentPlusLeading,wordHeight,textTransform);
this.addWordToLine(rword);
}
}
}"
60107,"@Override public void paint(Graphics g){
  logger.error(""String_Node_Str"");
  RenderState rs=this.modelNode.getRenderState();
  if (rs != null) {
    Color textColor=rs.getColor();
    g.setColor(textColor);
    Font font=rs.getFont();
    g.setFont(font);
  }
  Iterator<Renderable> i=this.renderables.iterator();
  if (i != null) {
    while (i.hasNext()) {
      Object r=i.next();
      if (r instanceof RElement) {
        RElement relement=(RElement)r;
        Graphics newG=g.create(relement.getX(),relement.getY(),relement.getWidth(),relement.getHeight());
        try {
          relement.paint(newG);
        }
  finally {
          newG.dispose();
        }
      }
 else       if (r instanceof BoundableRenderable) {
        BoundableRenderable br=(BoundableRenderable)r;
        br.paintTranslated(g);
      }
 else {
        ((Renderable)r).paint(g);
      }
    }
  }
}","@Override public void paint(Graphics g){
  RenderState rs=this.modelNode.getRenderState();
  if (rs != null) {
    Color textColor=rs.getColor();
    g.setColor(textColor);
    Font font=rs.getFont();
    g.setFont(font);
  }
  Iterator<Renderable> i=this.renderables.iterator();
  if (i != null) {
    while (i.hasNext()) {
      Object r=i.next();
      if (r instanceof RElement) {
        RElement relement=(RElement)r;
        Graphics newG=g.create(relement.getX(),relement.getY(),relement.getWidth(),relement.getHeight());
        try {
          relement.paint(newG);
        }
  finally {
          newG.dispose();
        }
      }
 else       if (r instanceof BoundableRenderable) {
        BoundableRenderable br=(BoundableRenderable)r;
        br.paintTranslated(g);
      }
 else {
        ((Renderable)r).paint(g);
      }
    }
  }
}"
60108,"/** 
 * @inheritDoc
 */
@Override public String toString(){
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"").append(statusCode).append(""String_Node_Str"");
  for (  Header h : getHeaders()) {
    buffer.append(""String_Node_Str"").append(h.getName()).append(""String_Node_Str"").append(h.getValue());
    buffer.append(""String_Node_Str"");
  }
  buffer.append(getBody());
  return buffer.toString();
}","@Override public String toString(){
  StringBuffer buffer=new StringBuffer();
  buffer.append(""String_Node_Str"").append(statusCode).append(""String_Node_Str"");
  for (  Header h : getHeaders()) {
    buffer.append(""String_Node_Str"").append(h.getName()).append(""String_Node_Str"").append(h.getValue());
    buffer.append(""String_Node_Str"");
  }
  buffer.append(getBody());
  return buffer.toString();
}"
60109,"/** 
 * Instantiates a new img control.
 * @param modelNode the model node
 * @throws MalformedURLException
 * @throws TranscoderException
 * @throws IOException
 */
public ImgControl(HTMLImageElementImpl modelNode){
  super(modelNode);
  align=modelNode.getAlign();
  alt=modelNode.getAlt() != null ? modelNode.getAlt() : ""String_Node_Str"";
  bufferImage=null;
  modelNode.addImageListener(this);
  this.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      mouseBeingPressed=true;
      repaint();
    }
    @Override public void mouseReleased(    MouseEvent e){
      mouseBeingPressed=false;
      repaint();
      HtmlController.getInstance().onPressed(modelNode,e,e.getX(),e.getY());
    }
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getButton() == MouseEvent.BUTTON3) {
        HtmlController.getInstance().onContextMenu(modelNode,e,e.getX(),e.getY());
      }
    }
  }
);
  if (modelNode.getSrc() != null) {
    URL u=null;
    try {
      SSLCertificate.setCertificate();
      URL baseURL=new URL(modelNode.getOwnerDocument().getBaseURI());
      URL scriptURL=Urls.createURL(baseURL,modelNode.getSrc());
      String scriptURI=scriptURL == null ? modelNode.getSrc() : scriptURL.toExternalForm();
      u=new URL(scriptURI.replace(""String_Node_Str"",""String_Node_Str""));
      URLConnection con=u.openConnection();
      con.setRequestProperty(""String_Node_Str"",UserAgentContext.DEFAULT_USER_AGENT);
      if (scriptURI.endsWith(""String_Node_Str"")) {
        SVGRasterizer r=new SVGRasterizer(u);
        image=r.bufferedImageToImage();
      }
 else       if (scriptURI.startsWith(""String_Node_Str"")) {
        image=Toolkit.getDefaultToolkit().createImage(ImageIO.read(con.getInputStream()).getSource());
      }
 else       if (scriptURI.endsWith(""String_Node_Str"")) {
        try {
          image=new ImageIcon(u).getImage();
        }
 catch (        Exception e) {
          image=ImageIO.read(con.getInputStream());
        }
      }
 else       if (scriptURI.endsWith(""String_Node_Str"")) {
        try {
          image=ImageIO.read(con.getInputStream());
        }
 catch (        IOException e) {
          logger.error(""String_Node_Str"" + e.getMessage());
        }
      }
 else {
        image=ImageIO.read(con.getInputStream());
      }
    }
 catch (    FileNotFoundException|IIOException ex) {
      logger.error(""String_Node_Str"" + modelNode.getSrc());
    }
catch (    TranscoderException|IOException e1) {
      logger.error(e1.getMessage());
    }
catch (    Exception e1) {
      logger.error(""String_Node_Str"" + modelNode.getSrc());
    }
  }
  if (modelNode.getHeight() > 0) {
    imageHeight=modelNode.getHeight();
  }
 else {
    if (image != null) {
      imageHeight=image.getHeight(this);
    }
  }
  if (modelNode.getWidth() > 0) {
    imageWidth=modelNode.getWidth();
  }
 else {
    if (image != null) {
      imageWidth=image.getWidth(this);
    }
  }
}","/** 
 * Instantiates a new img control.
 * @param modelNode the model node
 */
public ImgControl(HTMLImageElementImpl modelNode){
  super(modelNode);
  align=modelNode.getAlign();
  alt=modelNode.getAlt() != null ? modelNode.getAlt() : ""String_Node_Str"";
  bufferImage=null;
  modelNode.addImageListener(this);
  this.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      mouseBeingPressed=true;
      repaint();
    }
    @Override public void mouseReleased(    MouseEvent e){
      mouseBeingPressed=false;
      repaint();
      HtmlController.getInstance().onPressed(modelNode,e,e.getX(),e.getY());
    }
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getButton() == MouseEvent.BUTTON3) {
        HtmlController.getInstance().onContextMenu(modelNode,e,e.getX(),e.getY());
      }
    }
  }
);
  if (modelNode.getSrc() != null) {
    URL u=null;
    try {
      SSLCertificate.setCertificate();
      URL baseURL=new URL(modelNode.getOwnerDocument().getBaseURI());
      URL scriptURL=Urls.createURL(baseURL,modelNode.getSrc());
      String scriptURI=scriptURL == null ? modelNode.getSrc() : scriptURL.toExternalForm();
      u=new URL(scriptURI.replace(""String_Node_Str"",""String_Node_Str""));
      URLConnection con=u.openConnection();
      con.setRequestProperty(""String_Node_Str"",UserAgentContext.DEFAULT_USER_AGENT);
      if (scriptURI.endsWith(""String_Node_Str"")) {
        SVGRasterizer r=new SVGRasterizer(u);
        image=r.bufferedImageToImage();
      }
 else       if (scriptURI.startsWith(""String_Node_Str"")) {
        image=Toolkit.getDefaultToolkit().createImage(ImageIO.read(con.getInputStream()).getSource());
      }
 else       if (scriptURI.endsWith(""String_Node_Str"")) {
        try {
          image=new ImageIcon(u).getImage();
        }
 catch (        Exception e) {
          image=ImageIO.read(con.getInputStream());
        }
      }
 else       if (scriptURI.endsWith(""String_Node_Str"")) {
        try {
          image=ImageIO.read(con.getInputStream());
        }
 catch (        IOException e) {
          logger.error(""String_Node_Str"" + e.getMessage());
        }
      }
 else {
        image=ImageIO.read(con.getInputStream());
      }
    }
 catch (    FileNotFoundException|IIOException ex) {
      logger.error(""String_Node_Str"" + modelNode.getSrc());
    }
catch (    TranscoderException|IOException e1) {
      logger.error(e1.getMessage());
    }
catch (    Exception e1) {
      logger.error(""String_Node_Str"" + modelNode.getSrc());
    }
  }
  if (modelNode.getHeight() > 0) {
    imageHeight=modelNode.getHeight();
  }
 else {
    if (image != null) {
      imageHeight=image.getHeight(this);
    }
  }
  if (modelNode.getWidth() > 0) {
    imageWidth=modelNode.getWidth();
  }
 else {
    if (image != null) {
      imageWidth=image.getWidth(this);
    }
  }
}"
60110,"/** 
 * This method provides an implementation XPathResult.evaluate according to the DOM L3 XPath Specification, Working Group Note 26 February 2004. <p> See also the <a href= 'http://www.w3.org/TR/2004/NOTE-DOM-Level-3-XPath-20040226'>Document Object Model (DOM) Level 3 XPath Specification</a>. </p> <p> Evaluates this XPath expression and returns a result. </p>
 * @param contextNode The <code>context</code> is context node for the evaluation of this XPath expression.If the XPathEvaluator was obtained by casting the <code>Document</code> then this must be owned by the same document and must be a <code>Document</code>, <code>Element</code>, <code>Attribute</code>, <code>Text</code>, <code>CDATASection</code>, <code>Comment</code>, <code>ProcessingInstruction</code>, or <code>XPathNamespace</code> node.If the context node is a <code>Text</code> or a <code>CDATASection</code>, then the context is interpreted as the whole logical text node as seen by XPath, unless the node is empty in which case it may not serve as the XPath context.
 * @param type If a specific <code>type</code> is specified, then the result will be coerced to return the specified type relying on XPath conversions and fail if the desired coercion is not possible. This must be one of the type codes of <code>XPathResult</code> .
 * @param result The <code>result</code> specifies a specific result object which may be reused and returned by this method. If this is specified as <code>null</code>or the implementation does not reuse the specified result, a new result object will be constructed and returned.For XPath 1.0 results, this object will be of type <code>XPathResult</code>.
 * @return The result of the evaluation of the XPath expression.For XPath1.0 results, this object will be of type <code>XPathResult</code> .
 * @exception XPathException TYPE_ERR: Raised if the result cannot be converted to return the specified type.
 * @exception DOMException WRONG_DOCUMENT_ERR: The Node is from a document that is not supported by the XPathEvaluator that created this <code>XPathExpression</code>. <br> NOT_SUPPORTED_ERR: The Node is not a type permitted as an XPath context node.
 * @see org.w3c.dom.xpath.XPathExpression#evaluate(Node,short,XPathResult)
 * @xsl.usage internal
 */
@Override public Object evaluate(Node contextNode,short type,Object result) throws XPathException, DOMException {
  if (m_doc != null) {
    if ((contextNode != m_doc) && (!contextNode.getOwnerDocument().equals(m_doc))) {
      String fmsg=XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_WRONG_DOCUMENT,null);
      throw new DOMException(DOMException.WRONG_DOCUMENT_ERR,fmsg);
    }
    short nodeType=contextNode.getNodeType();
    if ((nodeType != Node.DOCUMENT_NODE) && (nodeType != Node.ELEMENT_NODE) && (nodeType != Node.ATTRIBUTE_NODE)&& (nodeType != Node.TEXT_NODE)&& (nodeType != Node.CDATA_SECTION_NODE)&& (nodeType != Node.COMMENT_NODE)&& (nodeType != Node.PROCESSING_INSTRUCTION_NODE)&& (nodeType != XPathNamespace.XPATH_NAMESPACE_NODE)) {
      String fmsg=XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_WRONG_NODETYPE,null);
      throw new DOMException(DOMException.NOT_SUPPORTED_ERR,fmsg);
    }
  }
  if (!XPathResultImpl.isValidType(type)) {
    String fmsg=XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_INVALID_XPATH_TYPE,new Object[]{new Integer(type)});
    throw new XPathException(XPathException.TYPE_ERR,fmsg);
  }
  XPathContext xpathSupport=new XPathContext(false);
  if (null != m_doc) {
    xpathSupport.getDTMHandleFromNode(m_doc);
  }
  XObject xobj=null;
  try {
    xobj=m_xpath.execute(xpathSupport,contextNode,null);
  }
 catch (  TransformerException te) {
    throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,te.getMessageAndLocation());
  }
  return new XPathResultImpl(type,xobj,contextNode,m_xpath);
}","/** 
 * This method provides an implementation XPathResult.evaluate according to the DOM L3 XPath Specification, Working Group Note 26 February 2004. <p> See also the <a href= 'http://www.w3.org/TR/2004/NOTE-DOM-Level-3-XPath-20040226'>Document Object Model (DOM) Level 3 XPath Specification</a>. </p> <p> Evaluates this XPath expression and returns a result. </p>
 * @param contextNode The <code>context</code> is context node for the evaluation of this XPath expression.If the XPathEvaluator was obtained by casting the <code>Document</code> then this must be owned by the same document and must be a <code>Document</code>, <code>Element</code>, <code>Attribute</code>, <code>Text</code>, <code>CDATASection</code>, <code>Comment</code>, <code>ProcessingInstruction</code>, or <code>XPathNamespace</code> node.If the context node is a <code>Text</code> or a <code>CDATASection</code>, then the context is interpreted as the whole logical text node as seen by XPath, unless the node is empty in which case it may not serve as the XPath context.
 * @param type If a specific <code>type</code> is specified, then the result will be coerced to return the specified type relying on XPath conversions and fail if the desired coercion is not possible. This must be one of the type codes of <code>XPathResult</code> .
 * @param result The <code>result</code> specifies a specific result object which may be reused and returned by this method. If this is specified as <code>null</code>or the implementation does not reuse the specified result, a new result object will be constructed and returned.For XPath 1.0 results, this object will be of type <code>XPathResult</code>.
 * @return The result of the evaluation of the XPath expression.For XPath1.0 results, this object will be of type <code>XPathResult</code> .
 * @exception XPathException TYPE_ERR: Raised if the result cannot be converted to return the specified type.
 * @exception DOMException WRONG_DOCUMENT_ERR: The Node is from a document that is not supported by the XPathEvaluator that created this <code>XPathExpression</code>. <br> NOT_SUPPORTED_ERR: The Node is not a type permitted as an XPath context node.
 * @see org.w3c.dom.xpath.XPathExpression#evaluate(Node,short,Object)
 */
@Override public Object evaluate(Node contextNode,short type,Object result) throws XPathException, DOMException {
  if (m_doc != null) {
    if ((contextNode != m_doc) && (!contextNode.getOwnerDocument().equals(m_doc))) {
      String fmsg=XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_WRONG_DOCUMENT,null);
      throw new DOMException(DOMException.WRONG_DOCUMENT_ERR,fmsg);
    }
    short nodeType=contextNode.getNodeType();
    if ((nodeType != Node.DOCUMENT_NODE) && (nodeType != Node.ELEMENT_NODE) && (nodeType != Node.ATTRIBUTE_NODE)&& (nodeType != Node.TEXT_NODE)&& (nodeType != Node.CDATA_SECTION_NODE)&& (nodeType != Node.COMMENT_NODE)&& (nodeType != Node.PROCESSING_INSTRUCTION_NODE)&& (nodeType != XPathNamespace.XPATH_NAMESPACE_NODE)) {
      String fmsg=XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_WRONG_NODETYPE,null);
      throw new DOMException(DOMException.NOT_SUPPORTED_ERR,fmsg);
    }
  }
  if (!XPathResultImpl.isValidType(type)) {
    String fmsg=XPATHMessages.createXPATHMessage(XPATHErrorResources.ER_INVALID_XPATH_TYPE,new Object[]{new Integer(type)});
    throw new XPathException(XPathException.TYPE_ERR,fmsg);
  }
  XPathContext xpathSupport=new XPathContext(false);
  if (null != m_doc) {
    xpathSupport.getDTMHandleFromNode(m_doc);
  }
  XObject xobj=null;
  try {
    xobj=m_xpath.execute(xpathSupport,contextNode,null);
  }
 catch (  TransformerException te) {
    throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,te.getMessageAndLocation());
  }
  return new XPathResultImpl(type,xobj,contextNode,m_xpath);
}"
60111,"/** 
 * Intializes security by installing a security policy and a security manager. Programs that use the browser API should invoke this method (or  {@link #init(boolean,boolean) init }) to prevent web content from having full access to the user's computer.
 * @see #addPrivilegedPermission(Permission)
 */
public void initSecurity(){
  Policy.setPolicy(LocalSecurityPolicy.getInstance());
  System.setSecurityManager(new LocalSecurityManager());
}","/** 
 * Intializes security by installing a security policy and a security manager. Programs that use the browser API should invoke this method (or  {@link #init(boolean) init }) to prevent web content from having full access to the user's computer.
 * @see #addPrivilegedPermission(Permission)
 */
public void initSecurity(){
  Policy.setPolicy(LocalSecurityPolicy.getInstance());
  System.setSecurityManager(new LocalSecurityManager());
}"
60112,"/** 
 * Initializes some Java properties required by the browser. <p> This method is called by   {@link #init(boolean,boolean)}.
 */
public void initOtherProperties(){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Initializes some Java properties required by the browser. <p> This method is called by   {@link #init(boolean)}.
 */
public void initOtherProperties(){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
}"
60113,"/** 
 * Initializes security, protocols, look feel, console, the default window factory, extensions and <code>java.library.path</code>. This method should be invoked before using other functionality in the browser API. If this method is not called, at the very least  {@link #initOtherProperties()},   {@link #initProtocols()} and{@link #initExtensions()} should be called.<p> Applications that need to install their own security manager and policy should not call this method.
 * @param exitWhenAllWindowsAreClosed Whether the JVM should exit when all windows created by the default window factory are closed.
 * @param initConsole If this parameter is <code>true</code>, standard output is redirected to a browser console. See {@link org.lobobrowser.gui.ConsoleModel}.
 * @throws Exception the exception
 * @see #initSecurity()
 * @see #initProtocols()
 * @see #initExtensions()
 */
public void init(boolean exitWhenAllWindowsAreClosed) throws Exception {
  initOtherProperties();
  initNative(NATIVE_DIR_NAME);
  initSecurity();
  initProtocols();
  initHTTP();
  initLookAndFeel();
  initWindowFactory(exitWhenAllWindowsAreClosed);
  initExtensions();
}","/** 
 * Initializes security, protocols, look feel, console, the default window factory, extensions and <code>java.library.path</code>. This method should be invoked before using other functionality in the browser API. If this method is not called, at the very least  {@link #initOtherProperties()},   {@link #initProtocols()} and{@link #initExtensions()} should be called.<p> Applications that need to install their own security manager and policy should not call this method.
 * @param exitWhenAllWindowsAreClosed Whether the JVM should exit when all windows created by the default window factory are closed.
 * @throws Exception the exception
 * @see #initSecurity()
 * @see #initProtocols()
 * @see #initExtensions()
 */
public void init(boolean exitWhenAllWindowsAreClosed) throws Exception {
  initOtherProperties();
  initNative(NATIVE_DIR_NAME);
  initSecurity();
  initProtocols();
  initHTTP();
  initLookAndFeel();
  initWindowFactory(exitWhenAllWindowsAreClosed);
  initExtensions();
}"
60114,"/** 
 * Initializes the HTTP authenticator and the cookie handler. This is essential for the browser to work properly. <p> This method is invoked by   {@link #init(boolean,boolean)}.
 */
public void initHTTP(){
  Authenticator.setDefault(new AuthenticatorImpl());
  CookieHandler.setDefault(new CookieManager());
}","/** 
 * Initializes the HTTP authenticator and the cookie handler. This is essential for the browser to work properly. <p> This method is invoked by   {@link #init(boolean)}.
 */
public void initHTTP(){
  Authenticator.setDefault(new AuthenticatorImpl());
  CookieHandler.setDefault(new CookieManager());
}"
60115,"/** 
 * Initializes the global URLStreamHandlerFactory. <p> This method is invoked by   {@link #init(boolean,boolean)}.
 */
public void initProtocols(){
  PlatformStreamHandlerFactory factory=PlatformStreamHandlerFactory.getInstance();
  URL.setURLStreamHandlerFactory(factory);
  factory.addFactory(new LocalStreamHandlerFactory());
}","/** 
 * Initializes the global URLStreamHandlerFactory. <p> This method is invoked by   {@link #init(boolean)}.
 */
public void initProtocols(){
  PlatformStreamHandlerFactory factory=PlatformStreamHandlerFactory.getInstance();
  URL.setURLStreamHandlerFactory(factory);
  factory.addFactory(new LocalStreamHandlerFactory());
}"
60116,"/** 
 * Initializes platform logging. Note that this method is not implicitly called by   {@link #init(boolean,boolean)}.
 * @param debugOn Debugging mode. This determines which one of two different logging configurations is used.
 * @throws Exception the exception
 */
public void initLogging() throws Exception {
  Logger logger=LogManager.getLogger(PlatformInit.class);
  if (logger.isInfoEnabled()) {
    logger.warn(""String_Node_Str"");
    Properties properties=System.getProperties();
    Iterator i=properties.entrySet().iterator();
    while (i.hasNext()) {
      Map.Entry entry=(Map.Entry)i.next();
      logger.info(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue());
    }
  }
}","/** 
 * Initializes platform logging. Note that this method is not implicitly called by   {@link #init(boolean)}.
 * @throws Exception the exception
 */
public void initLogging() throws Exception {
  Logger logger=LogManager.getLogger(PlatformInit.class);
  if (logger.isInfoEnabled()) {
    logger.warn(""String_Node_Str"");
    Properties properties=System.getProperties();
    Iterator i=properties.entrySet().iterator();
    while (i.hasNext()) {
      Map.Entry entry=(Map.Entry)i.next();
      logger.info(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue());
    }
  }
}"
60117,"/** 
 * Initializers the <code>java.library.path</code> property. <p> This method is called by   {@link #init(boolean,boolean)}.
 * @param dirName A directory name relative to the browser application directory.
 */
public void initNative(String dirName){
  File appDir=this.getApplicationDirectory();
  File nativeDir=new File(appDir,dirName);
  System.setProperty(""String_Node_Str"",nativeDir.getAbsolutePath());
}","/** 
 * Initializers the <code>java.library.path</code> property. <p> This method is called by   {@link #init(boolean)}.
 * @param dirName A directory name relative to the browser application directory.
 */
public void initNative(String dirName){
  File appDir=this.getApplicationDirectory();
  File nativeDir=new File(appDir,dirName);
  System.setProperty(""String_Node_Str"",nativeDir.getAbsolutePath());
}"
60118,"/** 
 * Initializes browser extensions. Invoking this method is essential to enable the primary extension and all basic browser functionality. This method is invoked by   {@link #init(boolean,boolean)}.
 */
public void initExtensions(){
  ExtensionManager.getInstance().initExtensions();
}","/** 
 * Initializes browser extensions. Invoking this method is essential to enable the primary extension and all basic browser functionality. This method is invoked by   {@link #init(boolean)}.
 */
public void initExtensions(){
  ExtensionManager.getInstance().initExtensions();
}"
60119,"/** 
 * Adds one permission to the base set of permissions assigned to privileged code, i.e. code loaded from the local system rather than a remote location. This method must be called before a security manager has been set, that is, before   {@link #init(boolean,boolean)} or{@link #initSecurity()} are invoked. The purpose of the method is to addpermissions otherwise missing from the security policy installed by this facility.
 * @param permission A <code>Permission</code> instance.
 */
public void addPrivilegedPermission(Permission permission){
  LocalSecurityPolicy.addPrivilegedPermission(permission);
}","/** 
 * Adds one permission to the base set of permissions assigned to privileged code, i.e. code loaded from the local system rather than a remote location. This method must be called before a security manager has been set, that is, before   {@link #init(boolean)} or{@link #initSecurity()} are invoked. The purpose of the method is to addpermissions otherwise missing from the security policy installed by this facility.
 * @param permission A <code>Permission</code> instance.
 */
public void addPrivilegedPermission(Permission permission){
  LocalSecurityPolicy.addPrivilegedPermission(permission);
}"
60120,"/** 
 * Instantiates a new cloned window action.
 * @param componentSource the component source
 * @param window the window
 * @param action the action
 */
public ScreenShotAction(NavigatorWindow window){
  this.window=window;
}","/** 
 * Instantiates a new cloned window action.
 * @param window the window
 */
public ScreenShotAction(NavigatorWindow window){
  this.window=window;
}"
60121,"/** 
 * Gets the head match items.
 * @param itemPrefix the item prefix
 * @param maxNumItems the max num items
 * @return the head match items
 */
public Collection<String> getHeadMatchItems(String itemPrefix){
synchronized (this) {
    Object[] array=this.historySortedSet.toArray();
    Collection<String> items=new ArrayList<String>();
    for (int i=0; i < array.length; i++) {
      String potentialItem=(String)array[i];
      if (potentialItem.contains(itemPrefix)) {
        items.add(potentialItem);
      }
    }
    return items;
  }
}","/** 
 * Gets the head match items.
 * @param itemPrefix the item prefix
 * @return the head match items
 */
public Collection<String> getHeadMatchItems(String itemPrefix){
synchronized (this) {
    Object[] array=this.historySortedSet.toArray();
    Collection<String> items=new ArrayList<String>();
    for (int i=0; i < array.length; i++) {
      String potentialItem=(String)array[i];
      if (potentialItem.contains(itemPrefix)) {
        items.add(potentialItem);
      }
    }
    return items;
  }
}"
60122,"/** 
 * Gets the potential matches.
 * @param urlPrefix the url prefix
 * @param max the max
 * @return the potential matches
 */
public Collection<String> getPotentialMatches(String urlPrefix){
  return NavigationHistory.getInstance().getHeadMatchItems(urlPrefix);
}","/** 
 * Gets the potential matches.
 * @param urlPrefix the url prefix
 * @return the potential matches
 */
public Collection<String> getPotentialMatches(String urlPrefix){
  return NavigationHistory.getInstance().getHeadMatchItems(urlPrefix);
}"
60123,"/** 
 * Sends POST content, if any, and causes the request to proceed. <p> In the case of asynchronous requests, a new thread is created.
 * @param content POST content or <code>null</code> if there's no such content.
 * @throws IOException Signals that an I/O exception has occurred.
 */
public void send(final String content){
  try {
    final URL url=new URL(req.getUrl());
    if (this.isAsync) {
      new Thread(""String_Node_Str"" + url.getHost()){
        @Override public void run(){
          try {
            sendSync(content);
          }
 catch (          Throwable thrown) {
            logger.error(""String_Node_Str"" + url,thrown);
          }
        }
      }
.start();
    }
 else {
      sendSync(content);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","/** 
 * Sends POST content, if any, and causes the request to proceed. <p> In the case of asynchronous requests, a new thread is created.
 * @param content POST content or <code>null</code> if there's no such content.
 */
public void send(final String content){
  try {
    final URL url=new URL(req.getUrl());
    if (this.isAsync) {
      new Thread(""String_Node_Str"" + url.getHost()){
        @Override public void run(){
          try {
            sendSync(content);
          }
 catch (          Throwable thrown) {
            logger.error(""String_Node_Str"" + url,thrown);
          }
        }
      }
.start();
    }
 else {
      sendSync(content);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}"
60124,"/** 
 * Opens the request. Call   {@link #send(String)} to complete it.
 * @param method The request method.
 * @param url The request URL.
 * @param asyncFlag Whether the request should be asynchronous.
 * @param userName The user name of the request (not supported.)
 * @param password The password of the request (not supported.)
 * @throws IOException Signals that an I/O exception has occurred.
 */
public void open(final Method method,final URL url,boolean asyncFlag,final String userName,final String password){
  this.abort();
  Proxy proxy=this.proxy;
  SSLCertificate.setCertificate();
  URLConnection c;
  try {
    c=(proxy == null) || (proxy == Proxy.NO_PROXY) ? url.openConnection() : url.openConnection(proxy);
synchronized (this) {
      this.connection=c;
      this.isAsync=asyncFlag;
      req.setUsername(userName);
      req.setPassword(password);
      req.setUrl(url.toString());
      if (method.equals(Method.GET)) {
        req.setMethod(Method.GET);
      }
 else {
        req.setMethod(Method.POST);
      }
    }
    this.changeState(ReadyState.LOADING,0,null,null);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","/** 
 * Opens the request. Call   {@link #send(String)} to complete it.
 * @param method The request method.
 * @param url The request URL.
 * @param asyncFlag Whether the request should be asynchronous.
 * @param userName The user name of the request (not supported.)
 * @param password The password of the request (not supported.)
 */
public void open(final Method method,final URL url,boolean asyncFlag,final String userName,final String password){
  this.abort();
  Proxy proxy=this.proxy;
  SSLCertificate.setCertificate();
  URLConnection c;
  try {
    c=(proxy == null) || (proxy == Proxy.NO_PROXY) ? url.openConnection() : url.openConnection(proxy);
synchronized (this) {
      this.connection=c;
      this.isAsync=asyncFlag;
      req.setUsername(userName);
      req.setPassword(password);
      req.setUrl(url.toString());
      if (method.equals(Method.GET)) {
        req.setMethod(Method.GET);
      }
 else {
        req.setMethod(Method.POST);
      }
    }
    this.changeState(ReadyState.LOADING,0,null,null);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}"
60125,"/** 
 * Gets the value class.
 * @return the value class
 */
public Class<?> getValueClass(){
  return valueClass;
}","/** 
 * Gets the value class.
 * @return the value class
 */
public Class<?> getValueClass(){
  return this.valueClass;
}"
60126,"/** 
 * Gets the approximate size.
 * @return the approximate size
 */
public int getApproximateSize(){
  return approximateSize;
}","/** 
 * Gets the approximate size.
 * @return the approximate size
 */
public int getApproximateSize(){
  return this.approximateSize;
}"
60127,"/** 
 * Gets the instance.
 * @return the instance
 */
public static final ColorFactory getInstance(){
  if (instance == null) {
synchronized (ColorFactory.class) {
      instance=new ColorFactory();
    }
  }
  return instance;
}","/** 
 * Gets the instance.
 * @return the instance
 */
public synchronized static final ColorFactory getInstance(){
  if (instance == null) {
    instance=new ColorFactory();
  }
  return instance;
}"
60128,"@Override public boolean equals(final Object other){
  if (other == this) {
    return true;
  }
  FontKey ors;
  try {
    ors=(FontKey)other;
  }
 catch (  ClassCastException cce) {
    return false;
  }
  return (this.fontSize == ors.fontSize) && (this.fontFamily == ors.fontFamily) && (this.fontStyle == ors.fontStyle)&& (this.fontWeight == ors.fontWeight)&& (this.fontVariant == ors.fontVariant)&& (this.superscript == ors.superscript)&& Objects.equals(this.locales,ors.locales);
}","@Override public boolean equals(final Object other){
  if (other == this) {
    return true;
  }
  FontKey ors;
  try {
    ors=(FontKey)other;
  }
 catch (  ClassCastException cce) {
    return false;
  }
  return (this.fontSize == ors.fontSize) && (this.fontFamily.equals(ors.fontFamily)) && (this.fontStyle.equals(ors.fontStyle))&& (this.fontWeight.equals(ors.fontWeight))&& (this.fontVariant.equals(ors.fontVariant))&& (this.superscript.intValue() == ors.superscript.intValue())&& Objects.equals(this.locales,ors.locales);
}"
60129,"/** 
 * Ensure populated impl.
 */
private void ensurePopulatedImpl(){
  if (this.itemsByName == null) {
    ArrayList<DOMNodeImpl> descendents=this.rootNode.getDescendents(this.nodeFilter,this.nestIntoMatchingNodes);
    this.itemsByIndex=descendents == null ? Collections.emptyList() : descendents;
    int size=descendents == null ? 0 : descendents.size();
    Map<String,DOMElementImpl> itemsByName=new HashMap<String,DOMElementImpl>((size * 3) / 2);
    this.itemsByName=itemsByName;
    for (int i=0; i < size; i++) {
      Object descNode=descendents.get(i);
      if (descNode instanceof DOMElementImpl) {
        DOMElementImpl element=(DOMElementImpl)descNode;
        String id=element.getId();
        if ((id != null) && (id.length() != 0)) {
          itemsByName.put(id,element);
        }
        String name=element.getAttribute(HtmlAttributeProperties.NAME);
        if ((name != null) && (name.length() != 0) && !name.equals(id)) {
          itemsByName.put(name,element);
        }
      }
    }
  }
}","/** 
 * Ensure populated impl.
 */
private void ensurePopulatedImpl(){
  if (this.itemsByName == null) {
    ArrayList<DOMNodeImpl> descendents=this.rootNode.getDescendents(this.nodeFilter,this.nestIntoMatchingNodes);
    this.itemsByIndex=descendents;
    int size=descendents.size();
    Map<String,DOMElementImpl> itemsByName=new HashMap<String,DOMElementImpl>((size * 3) / 2);
    this.itemsByName=itemsByName;
    for (int i=0; i < size; i++) {
      Object descNode=descendents.get(i);
      if (descNode instanceof DOMElementImpl) {
        DOMElementImpl element=(DOMElementImpl)descNode;
        String id=element.getId();
        if ((id != null) && (id.length() != 0)) {
          itemsByName.put(id,element);
        }
        String name=element.getAttribute(HtmlAttributeProperties.NAME);
        if ((name != null) && (name.length() != 0) && !name.equals(id)) {
          itemsByName.put(name,element);
        }
      }
    }
  }
}"
60130,"@Override public String toString(){
  String someText=this.text;
  int length=someText.length();
  if ((someText != null) && (someText.length() > 32)) {
    someText=someText.substring(0,29) + ""String_Node_Str"";
  }
  return this.getNodeName() + ""String_Node_Str"" + length+ ""String_Node_Str""+ someText+ ""String_Node_Str"";
}","@Override public String toString(){
  String someText=this.text;
  int length=someText.length();
  if (someText.length() > 32) {
    someText=someText.substring(0,29) + ""String_Node_Str"";
  }
  return this.getNodeName() + ""String_Node_Str"" + length+ ""String_Node_Str""+ someText+ ""String_Node_Str"";
}"
60131,"@Override public final String getAttribute(String name){
  String normalName=this.normalizeAttributeName(name);
synchronized (this) {
    Map<String,String> attributes=this.attributes;
    return attributes == null ? null : (String)attributes.get(normalName);
  }
}","@Override public final String getAttribute(String name){
  String normalName=this.normalizeAttributeName(name);
  if (normalName != null && normalName.length() > 0) {
synchronized (this) {
      Map<String,String> attributes=this.attributes;
      return attributes == null ? null : (String)attributes.get(normalName);
    }
  }
  return null;
}"
60132,"/** 
 * Gets the text content of this node and its descendents.
 * @return the text content
 * @throws DOMException the DOM exception
 */
@Override public String getTextContent() throws DOMException {
  StringBuffer sb=new StringBuffer();
synchronized (this.getTreeLock()) {
    ArrayList<Node> nl=this.nodeList;
    if (nl != null) {
      Iterator<Node> i=nl.iterator();
      while (i.hasNext()) {
        Node node=i.next();
        short type=node.getNodeType();
switch (type) {
case Node.CDATA_SECTION_NODE:
case Node.TEXT_NODE:
case Node.ELEMENT_NODE:
          String textContent=node.getTextContent();
        if (textContent != null) {
          sb.append(textContent);
        }
      break;
default :
    break;
}
}
}
}
return sb.toString();
}","/** 
 * Gets the text content of this node and its descendents.
 * @return the text content
 * @throws DOMException the DOM exception
 */
@Override public String getTextContent() throws DOMException {
  StringBuffer sb=new StringBuffer();
synchronized (this.getTreeLock()) {
    ArrayList<Node> nl=this.nodeList;
    if (nl != null) {
      Iterator<Node> i=nl.iterator();
      while (i.hasNext()) {
        Node node=i.next();
        short type=node.getNodeType();
switch (type) {
case Node.CDATA_SECTION_NODE:
case Node.TEXT_NODE:
case Node.ELEMENT_NODE:
          String textContent=node.getTextContent();
        if (textContent != null) {
          sb.append(textContent);
        }
      break;
default :
    break;
}
}
}
}
return sb.toString().trim();
}"
60133,"/** 
 * Removes the all children.
 */
protected void removeAllChildren(){
synchronized (this.getTreeLock()) {
    this.removeAllChildrenImpl();
  }
}","/** 
 * Removes the all children.
 */
public void removeAllChildren(){
synchronized (this.getTreeLock()) {
    this.removeAllChildrenImpl();
  }
}"
60134,"/** 
 * Removes the image listener.
 * @param listener the listener
 */
public void removeImageListener(ImageListener listener){
  ArrayList<ImageListener> l=this.imageListeners;
synchronized (l) {
    l.remove(l);
  }
}","/** 
 * Removes the image listener.
 * @param listener the listener
 */
public void removeImageListener(ImageListener listener){
  this.imageListeners=new ArrayList<ImageListener>();
}"
60135,"/** 
 * Removes the image listener.
 * @param listener the listener
 */
public void removeImageListener(ImageListener listener){
  ArrayList<ImageListener> l=this.listeners;
synchronized (l) {
    l.remove(l);
  }
}","/** 
 * Removes the image listener.
 * @param listener the listener
 */
public void removeImageListener(ImageListener listener){
  this.listeners=new ArrayList<ImageListener>();
}"
60136,"/** 
 * Gets the pseudo names.
 * @return the pseudo names
 */
public Set<String> getPseudoNames(){
  Set<String> pnset=new HashSet<String>();
  pnset.add(""String_Node_Str"");
  pnset.add(""String_Node_Str"");
  pnset.add(""String_Node_Str"");
  pnset.add(""String_Node_Str"");
  pnset.add(""String_Node_Str"");
  pnset.add(""String_Node_Str"");
  pnset.add(""String_Node_Str"");
  pnset.add(""String_Node_Str"");
  pnset.add(""String_Node_Str"");
  pnset.add(""String_Node_Str"");
  pnset.add(""String_Node_Str"");
  pnset.add(""String_Node_Str"");
  pnset.add(""String_Node_Str"");
  return pnset;
}","/** 
 * Gets the pseudo names.
 * @return the pseudo names
 */
public Set<String> getPseudoNames(){
  Set<String> pnset=new HashSet<String>();
  pnset.add(SelectorMatcher.LAST_CHILD);
  pnset.add(SelectorMatcher.LAST_OF_TYPE);
  pnset.add(SelectorMatcher.FIRST_CHILD);
  pnset.add(SelectorMatcher.FIRST_OF_TYPE);
  pnset.add(SelectorMatcher.ONLY_CHILD);
  pnset.add(SelectorMatcher.ONLY_OF_TYPE);
  pnset.add(SelectorMatcher.NTH_CHILD);
  pnset.add(SelectorMatcher.NTH_LAST_CHILD);
  pnset.add(SelectorMatcher.NTH_OF_TYPE);
  pnset.add(SelectorMatcher.NTH_LAST_OF_TYPE);
  pnset.add(SelectorMatcher.HOVER);
  pnset.add(SelectorMatcher.ROOT);
  pnset.add(SelectorMatcher.EMPTY);
  return pnset;
}"
60137,"/** 
 * Gets the active style declarations.
 * @param element the element
 * @param elementName the element name
 * @param elementId the element id
 * @param className the class name
 * @param pseudoNames the pseudo names
 * @return the active style declarations
 */
public final Collection<CSSStyleDeclaration> getActiveStyleDeclarations(HTMLElementImpl element,String elementName,String elementId,String className,Set pseudoNames,NamedNodeMap attributes){
  Collection<CSSStyleDeclaration> styleDeclarations=null;
  String elementTL=elementName.toLowerCase();
  Collection<StyleRuleInfo> elementRules=this.rulesByElement.get(elementTL);
  if (elementRules != null) {
    SelectorMatcher sm=new SelectorMatcher();
    if (sm.matchesPseudoClassSelector(pseudoElement,element) && element.getPseudoNames().contains(pseudoElement)) {
      styleDeclarations=putStyleDeclarations(elementRules,styleDeclarations,element,pseudoNames);
    }
 else     if (!sm.matchesPseudoClassSelector(pseudoElement,element) && !element.getPseudoNames().contains(pseudoElement)) {
      styleDeclarations=putStyleDeclarations(elementRules,styleDeclarations,element,pseudoNames);
    }
  }
  elementRules=this.rulesByElement.get(""String_Node_Str"");
  if (elementRules != null) {
    styleDeclarations=putStyleDeclarations(elementRules,styleDeclarations,element,pseudoNames);
  }
  if (className != null) {
    String classNameTL=className.toLowerCase();
    Map<String,Collection<StyleRuleInfo>> classMaps=this.classMapsByElement.get(elementTL);
    if (classMaps != null) {
      Collection<StyleRuleInfo> classRules=classMaps.get(classNameTL);
      if (classRules != null) {
        styleDeclarations=putStyleDeclarations(classRules,styleDeclarations,element,pseudoNames);
      }
    }
    classMaps=this.classMapsByElement.get(""String_Node_Str"");
    if (classMaps != null) {
      Collection<StyleRuleInfo> classRules=classMaps.get(classNameTL);
      if (classRules != null) {
        styleDeclarations=putStyleDeclarations(classRules,styleDeclarations,element,pseudoNames);
      }
    }
  }
  if (elementId != null) {
    Map<String,Collection<StyleRuleInfo>> idMaps=this.idMapsByElement.get(elementTL);
    if (idMaps != null) {
      String elementIdTL=elementId.toLowerCase();
      Collection<StyleRuleInfo> idRules=idMaps.get(elementIdTL);
      if (idRules != null) {
        styleDeclarations=putStyleDeclarations(idRules,styleDeclarations,element,pseudoNames);
      }
    }
    idMaps=this.idMapsByElement.get(""String_Node_Str"");
    if (idMaps != null) {
      String elementIdTL=elementId.toLowerCase();
      Collection<StyleRuleInfo> idRules=idMaps.get(elementIdTL);
      if (idRules != null) {
        styleDeclarations=putStyleDeclarations(idRules,styleDeclarations,element,pseudoNames);
      }
    }
  }
  if (attributes != null && attributes.getLength() > 0) {
    for (int i=0; i < attributes.getLength(); i++) {
      Attr attr=(Attr)attributes.item(i);
      if (isAttributeOperator(attr,element)) {
        Map<String,Collection<StyleRuleInfo>> classMaps=this.attrMapsByElement.get(htmlElement);
        if (classMaps != null) {
          Collection<StyleRuleInfo> attrRules=classMaps.get(attributeValue);
          if (attrRules != null) {
            styleDeclarations=putStyleDeclarations(attrRules,styleDeclarations,element,pseudoNames);
          }
        }
      }
    }
  }
  return styleDeclarations;
}","/** 
 * Gets the active style declarations.
 * @param element the element
 * @param elementName the element name
 * @param elementId the element id
 * @param className the class name
 * @param pseudoNames the pseudo names
 * @return the active style declarations
 */
public final Collection<CSSStyleDeclaration> getActiveStyleDeclarations(HTMLElementImpl element,String elementName,String elementId,String className,Set pseudoNames,NamedNodeMap attributes){
  Collection<CSSStyleDeclaration> styleDeclarations=null;
  String elementTL=elementName.toLowerCase();
  Collection<StyleRuleInfo> elementRules=this.rulesByElement.get(elementTL);
  if (elementRules != null) {
    SelectorMatcher sm=new SelectorMatcher();
    String psElement=pseudoElement;
    if (psElement != null && psElement.contains(""String_Node_Str"")) {
      psElement=psElement.substring(0,psElement.indexOf(""String_Node_Str""));
    }
    if (sm.matchesPseudoClassSelector(pseudoElement,element) && element.getPseudoNames().contains(psElement)) {
      styleDeclarations=putStyleDeclarations(elementRules,styleDeclarations,element,pseudoNames);
    }
 else     if (!sm.matchesPseudoClassSelector(pseudoElement,element) && !element.getPseudoNames().contains(psElement)) {
      styleDeclarations=putStyleDeclarations(elementRules,styleDeclarations,element,pseudoNames);
    }
  }
  elementRules=this.rulesByElement.get(""String_Node_Str"");
  if (elementRules != null) {
    styleDeclarations=putStyleDeclarations(elementRules,styleDeclarations,element,pseudoNames);
  }
  if (className != null) {
    String classNameTL=className.toLowerCase();
    Map<String,Collection<StyleRuleInfo>> classMaps=this.classMapsByElement.get(elementTL);
    if (classMaps != null) {
      Collection<StyleRuleInfo> classRules=classMaps.get(classNameTL);
      if (classRules != null) {
        styleDeclarations=putStyleDeclarations(classRules,styleDeclarations,element,pseudoNames);
      }
    }
    classMaps=this.classMapsByElement.get(""String_Node_Str"");
    if (classMaps != null) {
      Collection<StyleRuleInfo> classRules=classMaps.get(classNameTL);
      if (classRules != null) {
        styleDeclarations=putStyleDeclarations(classRules,styleDeclarations,element,pseudoNames);
      }
    }
  }
  if (elementId != null) {
    Map<String,Collection<StyleRuleInfo>> idMaps=this.idMapsByElement.get(elementTL);
    if (idMaps != null) {
      String elementIdTL=elementId.toLowerCase();
      Collection<StyleRuleInfo> idRules=idMaps.get(elementIdTL);
      if (idRules != null) {
        styleDeclarations=putStyleDeclarations(idRules,styleDeclarations,element,pseudoNames);
      }
    }
    idMaps=this.idMapsByElement.get(""String_Node_Str"");
    if (idMaps != null) {
      String elementIdTL=elementId.toLowerCase();
      Collection<StyleRuleInfo> idRules=idMaps.get(elementIdTL);
      if (idRules != null) {
        styleDeclarations=putStyleDeclarations(idRules,styleDeclarations,element,pseudoNames);
      }
    }
  }
  if (attributes != null && attributes.getLength() > 0) {
    for (int i=0; i < attributes.getLength(); i++) {
      Attr attr=(Attr)attributes.item(i);
      if (isAttributeOperator(attr,element)) {
        Map<String,Collection<StyleRuleInfo>> classMaps=this.attrMapsByElement.get(htmlElement);
        if (classMaps != null) {
          Collection<StyleRuleInfo> attrRules=classMaps.get(attributeValue);
          if (attrRules != null) {
            styleDeclarations=putStyleDeclarations(attrRules,styleDeclarations,element,pseudoNames);
          }
        }
      }
    }
  }
  return styleDeclarations;
}"
60138,"/** 
 * is attribute operator
 * @param attr
 * @return
 */
private boolean isAttributeOperator(Attr attr,HTMLElementImpl element){
switch (attributeOperator) {
case OP_EQUAL:
    if (attr.getName().equals(attribute) && attr.getValue().equals(attributeValue) && ""String_Node_Str"".equals(htmlElement)) {
      return true;
    }
 else     if (attr.getName().equals(attribute) && attr.getValue().equals(attributeValue) && element.getNodeName().equals(htmlElement)) {
      return true;
    }
  break;
case OP_TILDE_EQUAL:
case OP_STAR_EQUAL:
if (attr.getName().equals(attribute) && attr.getValue().contains(attributeValue) && ""String_Node_Str"".equals(htmlElement)) {
  return true;
}
 else if (attr.getName().equals(attribute) && attr.getValue().contains(attributeValue) && element.getNodeName().equals(htmlElement)) {
  return true;
}
break;
case OP_PIPE_EQUAL:
case OP_CIRCUMFLEX_EQUAL:
if (attr.getName().equals(attribute) && attr.getValue().startsWith(attributeValue) && ""String_Node_Str"".equals(htmlElement)) {
return true;
}
 else if (attr.getName().equals(attribute) && attr.getValue().startsWith(attributeValue) && element.getNodeName().equals(htmlElement)) {
return true;
}
break;
case OP_DOLLAR_EQUAL:
if (attr.getName().equals(attribute) && attr.getValue().endsWith(attributeValue) && ""String_Node_Str"".equals(htmlElement)) {
return true;
}
 else if (attr.getName().equals(attribute) && attr.getValue().endsWith(attributeValue) && element.getNodeName().equals(htmlElement)) {
return true;
}
break;
case OP_ALL:
if (attr.getName().equals(attribute) && ""String_Node_Str"".equals(htmlElement)) {
return true;
}
 else if (attr.getName().equals(attribute) && element.getNodeName().equals(htmlElement)) {
return true;
}
break;
default :
break;
}
return false;
}","/** 
 * is attribute operator
 * @param attr
 * @return
 */
private boolean isAttributeOperator(Attr attr,HTMLElementImpl element){
switch (attributeOperator) {
case SelectorMatcher.OP_EQUAL:
    if (attr.getName().equals(attribute) && attr.getValue().equals(attributeValue) && ""String_Node_Str"".equals(htmlElement)) {
      return true;
    }
 else     if (attr.getName().equals(attribute) && attr.getValue().equals(attributeValue) && element.getNodeName().equals(htmlElement)) {
      return true;
    }
  break;
case SelectorMatcher.OP_TILDE_EQUAL:
case SelectorMatcher.OP_STAR_EQUAL:
if (attr.getName().equals(attribute) && attr.getValue().contains(attributeValue) && ""String_Node_Str"".equals(htmlElement)) {
  return true;
}
 else if (attr.getName().equals(attribute) && attr.getValue().contains(attributeValue) && element.getNodeName().equals(htmlElement)) {
  return true;
}
break;
case SelectorMatcher.OP_PIPE_EQUAL:
case SelectorMatcher.OP_CIRCUMFLEX_EQUAL:
if (attr.getName().equals(attribute) && attr.getValue().startsWith(attributeValue) && ""String_Node_Str"".equals(htmlElement)) {
return true;
}
 else if (attr.getName().equals(attribute) && attr.getValue().startsWith(attributeValue) && element.getNodeName().equals(htmlElement)) {
return true;
}
break;
case SelectorMatcher.OP_DOLLAR_EQUAL:
if (attr.getName().equals(attribute) && attr.getValue().endsWith(attributeValue) && ""String_Node_Str"".equals(htmlElement)) {
return true;
}
 else if (attr.getName().equals(attribute) && attr.getValue().endsWith(attributeValue) && element.getNodeName().equals(htmlElement)) {
return true;
}
break;
case SelectorMatcher.OP_ALL:
if (attr.getName().equals(attribute) && ""String_Node_Str"".equals(htmlElement)) {
return true;
}
 else if (attr.getName().equals(attribute) && element.getNodeName().equals(htmlElement)) {
return true;
}
break;
default :
break;
}
return false;
}"
60139,"/** 
 * Adds the rule.
 * @param styleSheet the style sheet
 * @param rule the rule
 * @throws MalformedURLException the malformed url exception
 * @throws UnsupportedEncodingException
 */
private final void addRule(CSSStyleSheet styleSheet,CSSRule rule) throws MalformedURLException, UnsupportedEncodingException {
  HTMLDocumentImpl document=this.document;
  if (rule instanceof CSSStyleRule) {
    CSSStyleRule sr=(CSSStyleRule)rule;
    String selectorList=sr.getSelectorText();
    StringTokenizer commaTok=new StringTokenizer(selectorList,""String_Node_Str"");
    while (commaTok.hasMoreTokens()) {
      String selectorPart=commaTok.nextToken().toLowerCase();
      ArrayList<SimpleSelector> simpleSelectors=null;
      String lastSelectorText=null;
      StringTokenizer tok=new StringTokenizer(selectorPart,""String_Node_Str"");
      if (tok.hasMoreTokens()) {
        simpleSelectors=new ArrayList<SimpleSelector>();
        SimpleSelector prevSelector=null;
        SELECTOR_FOR:         for (; ; ) {
          String token=tok.nextToken();
          if (""String_Node_Str"".equals(token)) {
            if (prevSelector != null) {
              prevSelector.setSelectorType(SimpleSelector.PARENT);
            }
            continue SELECTOR_FOR;
          }
 else           if (""String_Node_Str"".equals(token)) {
            if (prevSelector != null) {
              prevSelector.setSelectorType(SimpleSelector.PRECEEDING_SIBLING);
            }
            continue SELECTOR_FOR;
          }
          int colonIdx=token.indexOf(':');
          String simpleSelectorText=colonIdx == -1 ? token : token.substring(0,colonIdx);
          pseudoElement=colonIdx == -1 ? null : token.substring(colonIdx + 1);
          prevSelector=new SimpleSelector(simpleSelectorText,pseudoElement);
          simpleSelectors.add(prevSelector);
          if (!tok.hasMoreTokens()) {
            lastSelectorText=simpleSelectorText;
            break;
          }
        }
      }
      if (lastSelectorText != null) {
        int dotIdx=lastSelectorText.indexOf('.');
        if (dotIdx != -1) {
          String elemtl=lastSelectorText.substring(0,dotIdx);
          String classtl=lastSelectorText.substring(dotIdx + 1);
          this.addClassRule(elemtl,classtl,sr,simpleSelectors);
        }
 else {
          int poundIdx=lastSelectorText.indexOf('#');
          if (poundIdx != -1) {
            String elemtl=lastSelectorText.substring(0,poundIdx);
            String idtl=lastSelectorText.substring(poundIdx + 1);
            this.addIdRule(elemtl,idtl,sr,simpleSelectors);
          }
 else {
            String elemtl=lastSelectorText;
            this.addElementRule(elemtl,sr,simpleSelectors);
          }
        }
      }
    }
    if (selectorList.contains(""String_Node_Str"") && selectorList.endsWith(""String_Node_Str"")) {
      String selector=selectorList.replace(""String_Node_Str"",""String_Node_Str"");
      int quadIdx=selector.indexOf(""String_Node_Str"") + 1;
      htmlElement=selector.substring(0,selector.indexOf(""String_Node_Str""));
      if (selectorList.contains(OP_PIPE_EQUAL)) {
        int eqIdx=selector.indexOf(OP_PIPE_EQUAL);
        attribute=selector.substring(quadIdx,eqIdx);
        attributeValue=selector.substring(eqIdx + 2,selector.length() - 1);
        attributeOperator=OP_PIPE_EQUAL;
      }
 else       if (selectorList.contains(OP_CIRCUMFLEX_EQUAL)) {
        int eqIdx=selector.indexOf(OP_CIRCUMFLEX_EQUAL);
        attribute=selector.substring(quadIdx,eqIdx);
        attributeValue=selector.substring(eqIdx + 2,selector.length() - 1);
        attributeOperator=OP_CIRCUMFLEX_EQUAL;
      }
 else       if (selectorList.contains(OP_TILDE_EQUAL)) {
        int eqIdx=selector.indexOf(OP_TILDE_EQUAL);
        attribute=selector.substring(quadIdx,eqIdx);
        attributeValue=selector.substring(eqIdx + 2,selector.length() - 1);
        attributeOperator=OP_TILDE_EQUAL;
      }
 else       if (selectorList.contains(OP_DOLLAR_EQUAL)) {
        int eqIdx=selector.indexOf(OP_DOLLAR_EQUAL);
        attribute=selector.substring(quadIdx,eqIdx);
        attributeValue=selector.substring(eqIdx + 2,selector.length() - 1);
        attributeOperator=OP_DOLLAR_EQUAL;
      }
 else       if (selectorList.contains(OP_STAR_EQUAL)) {
        int eqIdx=selector.indexOf(OP_STAR_EQUAL);
        attribute=selector.substring(quadIdx,eqIdx);
        attributeValue=selector.substring(eqIdx + 2,selector.length() - 1);
        attributeOperator=OP_STAR_EQUAL;
      }
 else       if (selectorList.contains(OP_EQUAL)) {
        int eqIdx=selector.indexOf(OP_EQUAL);
        attribute=selector.substring(quadIdx,eqIdx);
        attributeValue=selector.substring(eqIdx + 1,selector.length() - 1);
        attributeOperator=OP_EQUAL;
      }
 else {
        attribute=selector.substring(quadIdx,selector.length() - 1);
        attributeValue=""String_Node_Str"";
        attributeOperator=OP_ALL;
      }
      this.addAttributeRule(htmlElement,attributeValue,sr,new ArrayList<SimpleSelector>());
    }
  }
 else   if (rule instanceof CSSImportRule) {
    UserAgentContext uacontext=document.getUserAgentContext();
    if (uacontext.isExternalCSSEnabled()) {
      CSSImportRule importRule=(CSSImportRule)rule;
      if (CSSUtilities.matchesMedia(importRule.getMedia(),uacontext)) {
        String href=importRule.getHref();
        try {
          CSSStyleSheet sheet=CSSUtilities.parse(href,document);
          if (sheet != null) {
            this.addStyleSheet(sheet);
          }
        }
 catch (        Exception err) {
          logger.error(""String_Node_Str"" + href + ""String_Node_Str""+ err);
        }
      }
    }
  }
 else   if (rule instanceof CSSMediaRule) {
    CSSMediaRule mrule=(CSSMediaRule)rule;
    MediaList mediaList=mrule.getMedia();
    if (CSSUtilities.matchesMedia(mediaList,document.getUserAgentContext())) {
      CSSRuleList ruleList=mrule.getCssRules();
      int length=ruleList.getLength();
      for (int i=0; i < length; i++) {
        CSSRule subRule=ruleList.item(i);
        this.addRule(styleSheet,subRule);
      }
    }
  }
}","/** 
 * Adds the rule.
 * @param styleSheet the style sheet
 * @param rule the rule
 * @throws MalformedURLException the malformed url exception
 * @throws UnsupportedEncodingException
 */
private final void addRule(CSSStyleSheet styleSheet,CSSRule rule) throws MalformedURLException, UnsupportedEncodingException {
  HTMLDocumentImpl document=this.document;
  if (rule instanceof CSSStyleRule) {
    CSSStyleRule sr=(CSSStyleRule)rule;
    String selectorList=sr.getSelectorText();
    StringTokenizer commaTok=new StringTokenizer(selectorList,""String_Node_Str"");
    while (commaTok.hasMoreTokens()) {
      String selectorPart=commaTok.nextToken().toLowerCase();
      ArrayList<SimpleSelector> simpleSelectors=null;
      String lastSelectorText=null;
      StringTokenizer tok=new StringTokenizer(selectorPart,""String_Node_Str"");
      if (tok.hasMoreTokens()) {
        simpleSelectors=new ArrayList<SimpleSelector>();
        SimpleSelector prevSelector=null;
        SELECTOR_FOR:         for (; ; ) {
          String token=tok.nextToken();
          if (""String_Node_Str"".equals(token)) {
            if (prevSelector != null) {
              prevSelector.setSelectorType(SimpleSelector.PARENT);
            }
            continue SELECTOR_FOR;
          }
 else           if (""String_Node_Str"".equals(token)) {
            if (prevSelector != null) {
              prevSelector.setSelectorType(SimpleSelector.PRECEEDING_SIBLING);
            }
            continue SELECTOR_FOR;
          }
          int colonIdx=token.indexOf(':');
          String simpleSelectorText=colonIdx == -1 ? token : token.substring(0,colonIdx);
          pseudoElement=colonIdx == -1 ? null : token.substring(colonIdx + 1);
          prevSelector=new SimpleSelector(simpleSelectorText,pseudoElement);
          simpleSelectors.add(prevSelector);
          if (!tok.hasMoreTokens()) {
            lastSelectorText=simpleSelectorText;
            break;
          }
        }
      }
      if (lastSelectorText != null) {
        int dotIdx=lastSelectorText.indexOf('.');
        if (dotIdx != -1) {
          String elemtl=lastSelectorText.substring(0,dotIdx);
          String classtl=lastSelectorText.substring(dotIdx + 1);
          this.addClassRule(elemtl,classtl,sr,simpleSelectors);
        }
 else {
          int poundIdx=lastSelectorText.indexOf('#');
          if (poundIdx != -1) {
            String elemtl=lastSelectorText.substring(0,poundIdx);
            String idtl=lastSelectorText.substring(poundIdx + 1);
            this.addIdRule(elemtl,idtl,sr,simpleSelectors);
          }
 else {
            String elemtl=lastSelectorText;
            this.addElementRule(elemtl,sr,simpleSelectors);
          }
        }
      }
    }
    if (selectorList.contains(""String_Node_Str"") && selectorList.endsWith(""String_Node_Str"")) {
      String selector=selectorList.replace(""String_Node_Str"",""String_Node_Str"");
      int quadIdx=selector.indexOf(""String_Node_Str"") + 1;
      htmlElement=selector.substring(0,selector.indexOf(""String_Node_Str""));
      if (selectorList.contains(SelectorMatcher.OP_PIPE_EQUAL)) {
        int eqIdx=selector.indexOf(SelectorMatcher.OP_PIPE_EQUAL);
        attribute=selector.substring(quadIdx,eqIdx);
        attributeValue=selector.substring(eqIdx + 2,selector.length() - 1);
        attributeOperator=SelectorMatcher.OP_PIPE_EQUAL;
      }
 else       if (selectorList.contains(SelectorMatcher.OP_CIRCUMFLEX_EQUAL)) {
        int eqIdx=selector.indexOf(SelectorMatcher.OP_CIRCUMFLEX_EQUAL);
        attribute=selector.substring(quadIdx,eqIdx);
        attributeValue=selector.substring(eqIdx + 2,selector.length() - 1);
        attributeOperator=SelectorMatcher.OP_CIRCUMFLEX_EQUAL;
      }
 else       if (selectorList.contains(SelectorMatcher.OP_TILDE_EQUAL)) {
        int eqIdx=selector.indexOf(SelectorMatcher.OP_TILDE_EQUAL);
        attribute=selector.substring(quadIdx,eqIdx);
        attributeValue=selector.substring(eqIdx + 2,selector.length() - 1);
        attributeOperator=SelectorMatcher.OP_TILDE_EQUAL;
      }
 else       if (selectorList.contains(SelectorMatcher.OP_DOLLAR_EQUAL)) {
        int eqIdx=selector.indexOf(SelectorMatcher.OP_DOLLAR_EQUAL);
        attribute=selector.substring(quadIdx,eqIdx);
        attributeValue=selector.substring(eqIdx + 2,selector.length() - 1);
        attributeOperator=SelectorMatcher.OP_DOLLAR_EQUAL;
      }
 else       if (selectorList.contains(SelectorMatcher.OP_STAR_EQUAL)) {
        int eqIdx=selector.indexOf(SelectorMatcher.OP_STAR_EQUAL);
        attribute=selector.substring(quadIdx,eqIdx);
        attributeValue=selector.substring(eqIdx + 2,selector.length() - 1);
        attributeOperator=SelectorMatcher.OP_STAR_EQUAL;
      }
 else       if (selectorList.contains(SelectorMatcher.OP_EQUAL)) {
        int eqIdx=selector.indexOf(SelectorMatcher.OP_EQUAL);
        attribute=selector.substring(quadIdx,eqIdx);
        attributeValue=selector.substring(eqIdx + 1,selector.length() - 1);
        attributeOperator=SelectorMatcher.OP_EQUAL;
      }
 else {
        attribute=selector.substring(quadIdx,selector.length() - 1);
        attributeValue=""String_Node_Str"";
        attributeOperator=SelectorMatcher.OP_ALL;
      }
      this.addAttributeRule(htmlElement,attributeValue,sr,new ArrayList<SimpleSelector>());
    }
  }
 else   if (rule instanceof CSSImportRule) {
    UserAgentContext uacontext=document.getUserAgentContext();
    if (uacontext.isExternalCSSEnabled()) {
      CSSImportRule importRule=(CSSImportRule)rule;
      if (CSSUtilities.matchesMedia(importRule.getMedia(),uacontext)) {
        String href=importRule.getHref();
        try {
          CSSStyleSheet sheet=CSSUtilities.parse(href,document);
          if (sheet != null) {
            this.addStyleSheet(sheet);
          }
        }
 catch (        Exception err) {
          logger.error(""String_Node_Str"" + href + ""String_Node_Str""+ err);
        }
      }
    }
  }
 else   if (rule instanceof CSSMediaRule) {
    CSSMediaRule mrule=(CSSMediaRule)rule;
    MediaList mediaList=mrule.getMedia();
    if (CSSUtilities.matchesMedia(mediaList,document.getUserAgentContext())) {
      CSSRuleList ruleList=mrule.getCssRules();
      int length=ruleList.getLength();
      for (int i=0; i < length; i++) {
        CSSRule subRule=ruleList.item(i);
        this.addRule(styleSheet,subRule);
      }
    }
  }
}"
60140,"/** 
 * Matches the given pseudo class selector against the given node.
 * @param selector The pseudo class selector.
 * @param node The root node.
 * @return {@code true} or {@code false}
 */
public boolean matchesPseudoClassSelector(String selector,DOMNodeImpl node){
  if (selector != null && selector.contains(""String_Node_Str"")) {
    selector=selector.substring(0,selector.indexOf(""String_Node_Str""));
  }
 else   if (selector == null) {
    return false;
  }
switch (selector) {
case ""String_Node_Str"":
    return matchesFirstOrLastChild(node,true);
case ""String_Node_Str"":
  return matchesFirstOrLastChild(node,false);
case ""String_Node_Str"":
return matchesFirstOrLastChild(node,true) && matchesFirstOrLastChild(node,false);
case ""String_Node_Str"":
return matchesNthChild(node,0,1,true,false);
case ""String_Node_Str"":
return matchesNthChild(node,0,1,true,true);
case ""String_Node_Str"":
return matchesNthChild(node,0,1,true,false) && matchesNthChild(node,0,1,true,true);
case ""String_Node_Str"":
DOMNodeImpl parentDOMNodeImpl=(DOMNodeImpl)node.getParentNode();
return parentDOMNodeImpl != null && parentDOMNodeImpl.getNodeType() == DOMNodeImpl.DOCUMENT_TYPE_NODE;
case ""String_Node_Str"":
for (DOMNodeImpl child=(DOMNodeImpl)node.getFirstChild(); child != null; child=(DOMNodeImpl)child.getNextSibling()) {
switch (child.getNodeType()) {
case DOMNodeImpl.ELEMENT_NODE:
return false;
case DOMNodeImpl.TEXT_NODE:
String data=child.getNodeName();
if (data != null && !data.isEmpty()) {
return false;
}
}
}
return true;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
return false;
default :
return false;
}
}","/** 
 * Matches the given pseudo class selector against the given node.
 * @param selector The pseudo class selector.
 * @param node The root node.
 * @return {@code true} or {@code false}
 */
public boolean matchesPseudoClassSelector(String selector,DOMNodeImpl node){
  if (selector != null && selector.contains(""String_Node_Str"")) {
    selector=selector.substring(0,selector.indexOf(""String_Node_Str""));
  }
 else   if (selector == null) {
    return false;
  }
switch (selector) {
case FIRST_CHILD:
    return matchesFirstOrLastChild(node,true);
case LAST_CHILD:
  return matchesFirstOrLastChild(node,false);
case ONLY_CHILD:
return matchesFirstOrLastChild(node,true) && matchesFirstOrLastChild(node,false);
case FIRST_OF_TYPE:
return matchesChild(node,0,1,true,false);
case LAST_OF_TYPE:
return matchesChild(node,0,1,true,true);
case ONLY_OF_TYPE:
return matchesChild(node,0,1,true,false) && matchesChild(node,0,1,true,true);
case ROOT:
DOMNodeImpl parentDOMNodeImpl=(DOMNodeImpl)node.getParentNode();
return parentDOMNodeImpl != null && parentDOMNodeImpl.getNodeType() == DOMNodeImpl.DOCUMENT_TYPE_NODE;
case EMPTY:
return isEmpty(node);
case NTH_CHILD:
case NTH_LAST_CHILD:
case NTH_OF_TYPE:
case NTH_LAST_OF_TYPE:
return false;
default :
return false;
}
}"
60141,"/** 
 * Creates an absolute URL in a manner equivalent to major browsers.
 * @param baseUrl the base url
 * @param relativeUrl the relative url
 * @return the url
 * @throws MalformedURLException the malformed url exception
 * @throws UnsupportedEncodingException
 */
public static URL createURL(URL baseUrl,String relativeUrl) throws MalformedURLException, UnsupportedEncodingException {
  if (relativeUrl.contains(""String_Node_Str"")) {
    relativeUrl=new String(Base64.getEncoder().encode(relativeUrl.getBytes(StandardCharsets.UTF_8)));
  }
  if (relativeUrl.contains(""String_Node_Str"")) {
    return null;
  }
  if (relativeUrl.contains(""String_Node_Str"")) {
    relativeUrl=relativeUrl.replace(""String_Node_Str"",""String_Node_Str"");
  }
  return new URL(baseUrl,relativeUrl);
}","/** 
 * Creates an absolute URL in a manner equivalent to major browsers.
 * @param baseUrl the base url
 * @param relativeUrl the relative url
 * @return the url
 * @throws MalformedURLException the malformed url exception
 * @throws UnsupportedEncodingException
 */
public static URL createURL(URL baseUrl,String relativeUrl) throws MalformedURLException, UnsupportedEncodingException {
  if (relativeUrl.contains(""String_Node_Str"")) {
    relativeUrl=new String(Base64.getEncoder().encode(relativeUrl.getBytes(StandardCharsets.UTF_8)));
  }
  if (relativeUrl.contains(""String_Node_Str"")) {
    return null;
  }
  if (relativeUrl.contains(""String_Node_Str"")) {
    relativeUrl=relativeUrl.replace(""String_Node_Str"",""String_Node_Str"");
    return new URL(baseUrl.toExternalForm() + relativeUrl);
  }
  return new URL(baseUrl,relativeUrl);
}"
60142,"@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
  assertTrue(BASEFONT.equals(doc.getElementById(""String_Node_Str"").getNodeName()));
}","@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
  assertTrue(BASEFONT.equals(doc.getElementById(""String_Node_Str"").getNodeName()));
}"
60143,"@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
  assertTrue(BODY.equals(doc.getElementById(""String_Node_Str"").getNodeName()));
}","@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
  assertTrue(BODY.equals(doc.getElementById(""String_Node_Str"").getNodeName()));
}"
60144,"@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
  assertTrue(BR.equals(doc.getElementById(""String_Node_Str"").getNodeName()));
}","@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
  assertTrue(BR.equals(doc.getElementById(""String_Node_Str"").getNodeName()));
}"
60145,"@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
  assertTrue(BUTTON.equals(doc.getElementById(""String_Node_Str"").getNodeName()));
}","@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
  assertTrue(BUTTON.equals(doc.getElementById(""String_Node_Str"").getNodeName()));
}"
60146,"@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
  assertTrue(CANVAS.equals(doc.getElementById(""String_Node_Str"").getNodeName()));
}","@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
  assertTrue(CANVAS.equals(doc.getElementById(""String_Node_Str"").getNodeName()));
}"
60147,"@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
  assertTrue(CAPTION.equals(doc.getElementById(""String_Node_Str"").getNodeName()));
}","@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
  assertTrue(CAPTION.equals(doc.getElementById(""String_Node_Str"").getNodeName()));
}"
60148,"@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
}","@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
}"
60149,"@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
  assertTrue(DIV.equals(doc.getElementById(""String_Node_Str"").getNodeName()));
}","@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
  assertTrue(DIV.equals(doc.getElementById(""String_Node_Str"").getNodeName()));
}"
60150,"@Test public void setAttributeNSNone() throws Exception {
  String htmlSource=""String_Node_Str"";
  HTMLDocumentImpl page=loadPage(htmlSource);
  Element node=page.getElementById(""String_Node_Str"");
  node.setAttributeNS(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",""String_Node_Str"",node.getAttributeNS(""String_Node_Str"",""String_Node_Str""));
}","@Test public void setAttributeNSNone() throws Exception {
  String htmlSource=""String_Node_Str"";
  HTMLDocumentImpl page=loadPage(htmlSource);
  Element node=page.getElementById(""String_Node_Str"");
}"
60151,"@Test public void getAttributeNone() throws Exception {
  String htmlSource=""String_Node_Str"";
  HTMLDocumentImpl page=loadPage(htmlSource);
  Element node=page.getElementById(""String_Node_Str"");
  assertEquals(""String_Node_Str"",""String_Node_Str"",node.getAttribute(""String_Node_Str""));
}","@Test public void getAttributeNone() throws Exception {
  String htmlSource=""String_Node_Str"";
  HTMLDocumentImpl page=loadPage(htmlSource);
  Element node=page.getElementById(""String_Node_Str"");
  assertEquals(null,node.getAttribute(""String_Node_Str""));
}"
60152,"@Test public void hasAttributeNSNone() throws Exception {
  String htmlSource=""String_Node_Str"";
  HTMLDocumentImpl page=loadPage(htmlSource);
  Element node=page.getElementById(""String_Node_Str"");
  assertFalse(""String_Node_Str"",node.hasAttributeNS(""String_Node_Str"",""String_Node_Str""));
}","@Test public void hasAttributeNSNone() throws Exception {
  String htmlSource=""String_Node_Str"";
  HTMLDocumentImpl page=loadPage(htmlSource);
  Element node=page.getElementById(""String_Node_Str"");
}"
60153,"@Test public void removeAttributeNSWith() throws Exception {
  String htmlSource=""String_Node_Str"";
  HTMLDocumentImpl page=loadPage(htmlSource);
  Element node=page.getElementById(""String_Node_Str"");
  node.removeAttributeNS(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",""String_Node_Str"",node.getAttributeNS(""String_Node_Str"",""String_Node_Str""));
}","@Test public void removeAttributeNSWith() throws Exception {
  String htmlSource=""String_Node_Str"";
  HTMLDocumentImpl page=loadPage(htmlSource);
  Element node=page.getElementById(""String_Node_Str"");
}"
60154,"@Test public void getAttributeNSNone() throws Exception {
  String htmlSource=""String_Node_Str"";
  HTMLDocumentImpl page=loadPage(htmlSource);
  Element node=page.getElementById(""String_Node_Str"");
  assertEquals(""String_Node_Str"",""String_Node_Str"",node.getAttributeNS(""String_Node_Str"",""String_Node_Str""));
}","@Test public void getAttributeNSNone() throws Exception {
  String htmlSource=""String_Node_Str"";
  HTMLDocumentImpl page=loadPage(htmlSource);
  Element node=page.getElementById(""String_Node_Str"");
}"
60155,"@Test public void getElementsByTagName2() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl page=loadPage(htmlSource);
  Element body=page.getBody();
  NodeList inputs=body.getElementsByTagName(""String_Node_Str"");
  assertEquals(1,inputs.getLength());
  assertEquals(""String_Node_Str"",inputs.item(0).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
  final NodeList divs=body.getElementsByTagName(""String_Node_Str"");
  assertEquals(3,divs.getLength());
  inputs=page.getElementsByTagName(""String_Node_Str"");
  assertEquals(1,inputs.getLength());
  inputs=page.getElementsByTagName(""String_Node_Str"");
  assertEquals(0,inputs.getLength());
  inputs=page.getElementsByTagName(null);
  assertEquals(0,inputs.getLength());
}","@Test public void getElementsByTagName2() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl page=loadPage(htmlSource);
  Element body=page.getBody();
  NodeList inputs=body.getElementsByTagName(""String_Node_Str"");
  assertEquals(1,inputs.getLength());
  assertEquals(""String_Node_Str"",inputs.item(0).getAttributes().getNamedItem(""String_Node_Str"").getNodeValue());
  final NodeList divs=body.getElementsByTagName(""String_Node_Str"");
  assertEquals(3,divs.getLength());
  inputs=page.getElementsByTagName(""String_Node_Str"");
  assertEquals(1,inputs.getLength());
  inputs=page.getElementsByTagName(""String_Node_Str"");
  assertEquals(0,inputs.getLength());
}"
60156,"@Test public void getAttributeNSWith() throws Exception {
  String htmlSource=""String_Node_Str"";
  HTMLDocumentImpl page=loadPage(htmlSource);
  Element node=page.getElementById(""String_Node_Str"");
  assertEquals(""String_Node_Str"",""String_Node_Str"",node.getAttributeNS(""String_Node_Str"",""String_Node_Str""));
}","@Test public void getAttributeNSWith() throws Exception {
  String htmlSource=""String_Node_Str"";
  HTMLDocumentImpl page=loadPage(htmlSource);
  Element node=page.getElementById(""String_Node_Str"");
}"
60157,"@Test public void hasAttributeNSWith() throws Exception {
  String htmlSource=""String_Node_Str"";
  HTMLDocumentImpl page=loadPage(htmlSource);
  Element node=page.getElementById(""String_Node_Str"");
  assertTrue(""String_Node_Str"",node.hasAttributeNS(""String_Node_Str"",""String_Node_Str""));
}","@Test public void hasAttributeNSWith() throws Exception {
  String htmlSource=""String_Node_Str"";
  HTMLDocumentImpl page=loadPage(htmlSource);
  Element node=page.getElementById(""String_Node_Str"");
}"
60158,"@Test public void removeAttributeNSNone() throws Exception {
  String htmlSource=""String_Node_Str"";
  HTMLDocumentImpl page=loadPage(htmlSource);
  Element node=page.getElementById(""String_Node_Str"");
  node.removeAttributeNS(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",""String_Node_Str"",node.getAttributeNS(""String_Node_Str"",""String_Node_Str""));
}","@Test public void removeAttributeNSNone() throws Exception {
  String htmlSource=""String_Node_Str"";
  HTMLDocumentImpl page=loadPage(htmlSource);
  Element node=page.getElementById(""String_Node_Str"");
}"
60159,"@Test public void setAttributeNSWith() throws Exception {
  String htmlSource=""String_Node_Str"";
  HTMLDocumentImpl page=loadPage(htmlSource);
  Element node=page.getElementById(""String_Node_Str"");
  node.setAttributeNS(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",""String_Node_Str"",node.getAttributeNS(""String_Node_Str"",""String_Node_Str""));
}","@Test public void setAttributeNSWith() throws Exception {
  String htmlSource=""String_Node_Str"";
  HTMLDocumentImpl page=loadPage(htmlSource);
  Element node=page.getElementById(""String_Node_Str"");
}"
60160,"@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
  assertTrue(FONT.equals(doc.getElementById(""String_Node_Str"").getNodeName()));
}","@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
  assertTrue(FONT.equals(doc.getElementById(""String_Node_Str"").getNodeName()));
}"
60161,"@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
  assertTrue(HEAD.equals(doc.getElementById(""String_Node_Str"").getNodeName()));
}","@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
  assertTrue(HEAD.equals(doc.getElementById(""String_Node_Str"").getNodeName()));
}"
60162,"@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
  assertTrue(IFRAME.equals(doc.getElementById(""String_Node_Str"").getNodeName()));
}","@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
  assertTrue(IFRAME.equals(doc.getElementById(""String_Node_Str"").getNodeName()));
}"
60163,"@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
  assertTrue(LABEL.equals(doc.getElementById(""String_Node_Str"").getNodeName()));
}","@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
  assertTrue(LABEL.equals(doc.getElementById(""String_Node_Str"").getNodeName()));
}"
60164,"@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
}","@Test public void basicTest() throws Exception {
  String htmlSource=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  HTMLDocumentImpl doc=loadPage(htmlSource);
}"
60165,"/** 
 * Determine SimpleDateFormat pattern matching with the given date string. Returns null if format is unknown. You can simply extend DateUtil with more formats if needed.
 * @param dateString The date string to determine the SimpleDateFormat pattern for.
 * @return The matching SimpleDateFormat pattern, or null if format is unknown.
 * @see SimpleDateFormat
 */
public Date determineDateFormat(String dateString,Locale loc){
  ArrayList<String> DATE_FORMAT=formatList();
  for (  String regexp : DATE_FORMAT) {
    try {
      return parse(dateString,regexp,loc);
    }
 catch (    ParseException e) {
      logger.error(e);
    }
  }
  return null;
}","/** 
 * Determine SimpleDateFormat pattern matching with the given date string. Returns null if format is unknown. You can simply extend DateUtil with more formats if needed.
 * @param dateString The date string to determine the SimpleDateFormat pattern for.
 * @return The matching SimpleDateFormat pattern, or null if format is unknown.
 * @see SimpleDateFormat
 */
public Date determineDateFormat(String dateString,Locale loc){
  ArrayList<String> DATE_FORMAT=formatList();
  for (  String regexp : DATE_FORMAT) {
    try {
      return parse(dateString,regexp,loc);
    }
 catch (    ParseException e) {
      continue;
    }
  }
  return null;
}"
60166,"@Override public int getDisplay(){
  Integer d=this.iDisplay;
  if (d != null) {
    return d.intValue();
  }
  CSS2Properties props=this.getCssProperties();
  String displayText=props == null ? null : props.getDisplay();
  int displayInt=0;
  if (displayText != null) {
    String displayTextTL=displayText.toLowerCase();
switch (displayTextTL) {
case BLOCK:
      displayInt=DISPLAY_BLOCK;
    break;
case NONE:
  displayInt=DISPLAY_NONE;
break;
case LIST_ITEM:
displayInt=DISPLAY_LIST_ITEM;
break;
case TABLE:
displayInt=DISPLAY_TABLE;
break;
case TABLE_CELL:
displayInt=DISPLAY_TABLE_CELL;
break;
case TABLE_ROW:
displayInt=DISPLAY_TABLE_ROW;
break;
case INLINE_BLOCK:
displayInt=DISPLAY_INLINE_BLOCK;
break;
case INHERIT:
displayInt=this.getPreviousRenderState().getDisplay();
break;
case INITIAL:
displayInt=this.getDefaultDisplay();
break;
default :
displayInt=this.getDefaultDisplay();
break;
}
}
 else {
displayInt=this.getDefaultDisplay();
}
d=new Integer(displayInt);
this.iDisplay=d;
return displayInt;
}","@Override public int getDisplay(){
  Integer d=this.iDisplay;
  if (d != null) {
    return d.intValue();
  }
  CSS2Properties props=this.getCssProperties();
  String displayText=props == null ? null : props.getDisplay();
  int displayInt=0;
  if (displayText != null) {
    String displayTextTL=displayText.toLowerCase();
switch (displayTextTL) {
case BLOCK:
      displayInt=DISPLAY_BLOCK;
    break;
case NONE:
  displayInt=DISPLAY_NONE;
break;
case LIST_ITEM:
displayInt=DISPLAY_LIST_ITEM;
break;
case TABLE:
displayInt=DISPLAY_TABLE;
break;
case TABLE_CELL:
displayInt=DISPLAY_TABLE_CELL;
break;
case TABLE_ROW:
displayInt=DISPLAY_TABLE_ROW;
break;
case INLINE:
displayInt=DISPLAY_INLINE;
break;
case INLINE_BLOCK:
displayInt=DISPLAY_INLINE_BLOCK;
break;
case INHERIT:
displayInt=this.getPreviousRenderState().getDisplay();
break;
case INITIAL:
displayInt=this.getDefaultDisplay();
break;
default :
displayInt=this.getDefaultDisplay();
break;
}
}
 else {
displayInt=this.getDefaultDisplay();
}
d=new Integer(displayInt);
this.iDisplay=d;
return displayInt;
}"
60167,"@Override public BackgroundInfo getBackgroundInfo(){
  BackgroundInfo binfo=this.iBackgroundInfo;
  if (binfo != INVALID_BACKGROUND_INFO) {
    return binfo;
  }
  if (element != null && !""String_Node_Str"".equals(element.getNodeName())) {
    binfo=null;
  }
  AbstractCSS2Properties props=this.getCssProperties();
  if (props != null) {
    String backgroundText=props.getBackground();
    if (backgroundText != null) {
      if (binfo == null) {
        binfo=new BackgroundInfo();
      }
      String[] backList=backgroundText.split(""String_Node_Str"");
      for (int i=0; i < backList.length; i++) {
        String back=backList[i];
        if (back.contains(""String_Node_Str"")) {
          binfo.setBackgroundImage(this.document.getFullURL(back));
        }
        if (ColorFactory.getInstance().getColor(back) != null) {
          binfo.setBackgroundColor(ColorFactory.getInstance().getColor(back));
        }
 else         if (CSSValuesProperties.INHERIT.equalsIgnoreCase(back)) {
          binfo.setBackgroundColor(this.getPreviousRenderState().getBackgroundColor());
        }
        this.applyBackgroundPosition(binfo,back);
        this.applyBackgroundRepeat(binfo,back);
      }
    }
 else {
      String background=this.element.getAttribute(HtmlAttributeProperties.BACKGROUND);
      if ((background != null) && !""String_Node_Str"".equals(background)) {
        if (binfo == null) {
          binfo=new BackgroundInfo();
        }
        binfo.setBackgroundImage(this.document.getFullURL(background));
      }
      String backgroundColorText=props.getBackgroundColor();
      if (backgroundColorText != null) {
        if (binfo == null) {
          binfo=new BackgroundInfo();
        }
        if (CSSValuesProperties.INHERIT.equalsIgnoreCase(backgroundColorText)) {
          binfo.setBackgroundColor(this.getPreviousRenderState().getBackgroundColor());
        }
 else {
          binfo.setBackgroundColor(ColorFactory.getInstance().getColor(backgroundColorText));
        }
      }
      String backgroundImageText=props.getBackgroundImage();
      if ((backgroundImageText != null) && (backgroundImageText.length() > 0)) {
        URL backgroundImage=HtmlValues.getURIFromStyleValue(backgroundImageText);
        if (backgroundImage != null) {
          if (binfo == null) {
            binfo=new BackgroundInfo();
          }
          binfo.setBackgroundImage(backgroundImage);
        }
      }
      String backgroundRepeatText=props.getBackgroundRepeat();
      if (backgroundRepeatText != null) {
        if (binfo == null) {
          binfo=new BackgroundInfo();
        }
        this.applyBackgroundRepeat(binfo,backgroundRepeatText);
      }
      String backgroundPositionText=props.getBackgroundPosition();
      if (backgroundPositionText != null) {
        if (binfo == null) {
          binfo=new BackgroundInfo();
        }
        this.applyBackgroundPosition(binfo,backgroundPositionText);
      }
    }
  }
  this.iBackgroundInfo=binfo;
  return binfo;
}","@Override public BackgroundInfo getBackgroundInfo(){
  BackgroundInfo binfo=this.iBackgroundInfo;
  if (binfo != INVALID_BACKGROUND_INFO) {
    return binfo;
  }
  if (element != null && !""String_Node_Str"".equals(element.getNodeName())) {
    binfo=null;
  }
  AbstractCSS2Properties props=this.getCssProperties();
  if (props != null) {
    String backgroundText=props.getBackground();
    if (backgroundText != null) {
      if (binfo == null) {
        binfo=new BackgroundInfo();
      }
      if ((backgroundText.startsWith(ColorFactory.RGB_START) || backgroundText.startsWith(ColorFactory.RGB_START)) && backgroundText.endsWith(""String_Node_Str"")) {
        binfo.setBackgroundColor(ColorFactory.getInstance().getColor(backgroundText));
      }
 else {
        String[] backList=backgroundText.split(""String_Node_Str"");
        for (int i=0; i < backList.length; i++) {
          String back=backList[i];
          if (back.contains(""String_Node_Str"")) {
            String start=""String_Node_Str"";
            int startIdx=start.length();
            int closingIdx=back.lastIndexOf(')');
            String quotedUri=back.substring(startIdx,closingIdx);
            binfo.setBackgroundImage(this.document.getFullURL(quotedUri));
          }
          if (ColorFactory.getInstance().getColor(back) != null) {
            binfo.setBackgroundColor(ColorFactory.getInstance().getColor(back));
          }
 else           if (CSSValuesProperties.INHERIT.equalsIgnoreCase(back)) {
            binfo.setBackgroundColor(this.getPreviousRenderState().getBackgroundColor());
          }
          this.applyBackgroundPosition(binfo,back);
          this.applyBackgroundRepeat(binfo,back);
        }
      }
    }
 else {
      String background=this.element.getAttribute(HtmlAttributeProperties.BACKGROUND);
      if ((background != null) && !""String_Node_Str"".equals(background)) {
        if (binfo == null) {
          binfo=new BackgroundInfo();
        }
        binfo.setBackgroundImage(this.document.getFullURL(background));
      }
      String backgroundColorText=props.getBackgroundColor();
      if (backgroundColorText != null) {
        if (binfo == null) {
          binfo=new BackgroundInfo();
        }
        if (CSSValuesProperties.INHERIT.equalsIgnoreCase(backgroundColorText)) {
          binfo.setBackgroundColor(this.getPreviousRenderState().getBackgroundColor());
        }
 else {
          binfo.setBackgroundColor(ColorFactory.getInstance().getColor(backgroundColorText));
        }
      }
      String backgroundImageText=props.getBackgroundImage();
      if ((backgroundImageText != null) && (backgroundImageText.length() > 0)) {
        URL backgroundImage=HtmlValues.getURIFromStyleValue(backgroundImageText);
        if (backgroundImage != null) {
          if (binfo == null) {
            binfo=new BackgroundInfo();
          }
          binfo.setBackgroundImage(backgroundImage);
        }
      }
      String backgroundRepeatText=props.getBackgroundRepeat();
      if (backgroundRepeatText != null) {
        if (binfo == null) {
          binfo=new BackgroundInfo();
        }
        this.applyBackgroundRepeat(binfo,backgroundRepeatText);
      }
      String backgroundPositionText=props.getBackgroundPosition();
      if (backgroundPositionText != null) {
        if (binfo == null) {
          binfo=new BackgroundInfo();
        }
        this.applyBackgroundPosition(binfo,backgroundPositionText);
      }
    }
  }
  this.iBackgroundInfo=binfo;
  return binfo;
}"
60168,"@Override public BackgroundInfo getBackgroundInfo(){
  BackgroundInfo binfo=this.iBackgroundInfo;
  if (binfo != INVALID_BACKGROUND_INFO) {
    return binfo;
  }
  binfo=null;
  AbstractCSS2Properties props=this.getCssProperties();
  if (props != null) {
    String backgroundColorText=props.getBackgroundColor();
    if (backgroundColorText != null) {
      if (binfo == null) {
        binfo=new BackgroundInfo();
      }
      binfo.setBackgroundColor(ColorFactory.getInstance().getColor(backgroundColorText));
    }
    String backgroundImageText=props.getBackgroundImage();
    if ((backgroundImageText != null) && (backgroundImageText.length() > 0)) {
      URL backgroundImage=HtmlValues.getURIFromStyleValue(backgroundImageText);
      if (backgroundImage != null) {
        if (binfo == null) {
          binfo=new BackgroundInfo();
        }
        binfo.setBackgroundImage(backgroundImage);
      }
    }
    String backgroundRepeatText=props.getBackgroundRepeat();
    if (backgroundRepeatText != null) {
      if (binfo == null) {
        binfo=new BackgroundInfo();
      }
      this.applyBackgroundRepeat(binfo,backgroundRepeatText);
    }
    String backgroundPositionText=props.getBackgroundPosition();
    if (backgroundPositionText != null) {
      if (binfo == null) {
        binfo=new BackgroundInfo();
      }
      this.applyBackgroundPosition(binfo,backgroundPositionText);
    }
  }
  this.iBackgroundInfo=binfo;
  return binfo;
}","@Override public BackgroundInfo getBackgroundInfo(){
  BackgroundInfo binfo=this.iBackgroundInfo;
  if (binfo != INVALID_BACKGROUND_INFO) {
    return binfo;
  }
  AbstractCSS2Properties props=this.getCssProperties();
  if (props != null) {
    String backgroundColorText=props.getBackgroundColor();
    if (backgroundColorText != null) {
      if (binfo == null) {
        binfo=new BackgroundInfo();
      }
      binfo.setBackgroundColor(ColorFactory.getInstance().getColor(backgroundColorText));
    }
    String backgroundImageText=props.getBackgroundImage();
    if ((backgroundImageText != null) && (backgroundImageText.length() > 0)) {
      URL backgroundImage=HtmlValues.getURIFromStyleValue(backgroundImageText);
      if (backgroundImage != null) {
        if (binfo == null) {
          binfo=new BackgroundInfo();
        }
        binfo.setBackgroundImage(backgroundImage);
      }
    }
    String backgroundRepeatText=props.getBackgroundRepeat();
    if (backgroundRepeatText != null) {
      if (binfo == null) {
        binfo=new BackgroundInfo();
      }
      this.applyBackgroundRepeat(binfo,backgroundRepeatText);
    }
    String backgroundPositionText=props.getBackgroundPosition();
    if (backgroundPositionText != null) {
      if (binfo == null) {
        binfo=new BackgroundInfo();
      }
      this.applyBackgroundPosition(binfo,backgroundPositionText);
    }
  }
  this.iBackgroundInfo=binfo;
  return binfo;
}"
60169,"/** 
 * Load background image.
 * @param imageURL the image url
 */
protected void loadBackgroundImage(final URL imageURL){
  Image image=null;
  String url=imageURL.toString();
  try {
    SSLCertificate.setCertificate();
    URLConnection con=imageURL.openConnection();
    con.setRequestProperty(""String_Node_Str"",UserAgentContext.DEFAULT_USER_AGENT);
    if (url.endsWith(""String_Node_Str"")) {
      SVGRasterizer r=new SVGRasterizer(imageURL);
      image=r.bufferedImageToImage();
    }
 else     if (url.startsWith(""String_Node_Str"")) {
      image=Toolkit.getDefaultToolkit().createImage(ImageIO.read(con.getInputStream()).getSource());
    }
 else     if (url.endsWith(""String_Node_Str"")) {
      try {
        image=new ImageIcon(imageURL).getImage();
      }
 catch (      Exception e) {
        image=ImageIO.read(con.getInputStream());
      }
    }
 else     if (url.endsWith(""String_Node_Str"")) {
      image=ImageIO.read(con.getInputStream());
    }
 else {
      image=ImageIO.read(con.getInputStream());
    }
    BaseElementRenderable.this.backgroundImage=image;
    int w=image.getWidth(BaseElementRenderable.this);
    int h=image.getHeight(BaseElementRenderable.this);
    if ((w != -1) && (h != -1)) {
      BaseElementRenderable.this.repaint();
    }
  }
 catch (  FileNotFoundException|IIOException ex) {
    logger.error(""String_Node_Str"" + url);
  }
catch (  IOException|TranscoderException thrown) {
    logger.error(""String_Node_Str"",thrown);
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}","/** 
 * Load background image.
 * @param imageURL the image url
 */
protected void loadBackgroundImage(final URL imageURL){
  Image image=null;
  String url=imageURL.toString();
  try {
    SSLCertificate.setCertificate();
    URLConnection con=imageURL.openConnection();
    con.setRequestProperty(""String_Node_Str"",UserAgentContext.DEFAULT_USER_AGENT);
    if (url.endsWith(""String_Node_Str"")) {
      SVGRasterizer r=new SVGRasterizer(imageURL);
      image=r.bufferedImageToImage();
    }
 else     if (url.startsWith(""String_Node_Str"")) {
      image=Toolkit.getDefaultToolkit().createImage(ImageIO.read(con.getInputStream()).getSource());
    }
 else     if (url.endsWith(""String_Node_Str"")) {
      try {
        image=new ImageIcon(imageURL).getImage();
      }
 catch (      Exception e) {
        image=ImageIO.read(con.getInputStream());
      }
    }
 else     if (url.endsWith(""String_Node_Str"")) {
      image=ImageIO.read(con.getInputStream());
    }
 else {
      image=ImageIO.read(con.getInputStream());
    }
    BaseElementRenderable.this.backgroundImage=image;
    int w=-1;
    int h=-1;
    if (image != null) {
      w=image.getWidth(BaseElementRenderable.this);
      h=image.getHeight(BaseElementRenderable.this);
    }
    if (w != -1 && h != -1) {
      BaseElementRenderable.this.repaint();
    }
  }
 catch (  FileNotFoundException|IIOException ex) {
    logger.error(""String_Node_Str"" + url);
  }
catch (  IOException|TranscoderException thrown) {
    logger.error(""String_Node_Str"",thrown);
  }
catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
  }
}"
60170,"/** 
 * Apply background vertical position.
 * @param binfo the binfo
 * @param yposition the yposition
 */
private void applyBackgroundVerticalPosition(BackgroundInfo binfo,String yposition){
  if (yposition.endsWith(""String_Node_Str"")) {
    binfo.setBackgroundYPositionAbsolute(false);
    try {
      binfo.setBackgroundYPosition((int)Double.parseDouble(yposition.substring(0,yposition.length() - 1).trim()));
    }
 catch (    NumberFormatException nfe) {
      binfo.setBackgroundYPosition(0);
    }
  }
 else {
switch (yposition) {
case CENTER:
      binfo.setBackgroundYPositionAbsolute(false);
    binfo.setBackgroundYPosition(50);
case RIGHT:
  binfo.setBackgroundYPositionAbsolute(false);
binfo.setBackgroundYPosition(100);
case LEFT:
binfo.setBackgroundYPositionAbsolute(false);
binfo.setBackgroundYPosition(0);
case BOTTOM:
binfo.setBackgroundYPositionAbsolute(false);
binfo.setBackgroundYPosition(100);
case TOP:
binfo.setBackgroundYPositionAbsolute(false);
binfo.setBackgroundYPosition(0);
case INHERIT:
BackgroundInfo bi=this.getPreviousRenderState().getBackgroundInfo();
binfo.setBackgroundYPositionAbsolute(bi.isBackgroundYPositionAbsolute());
binfo.setBackgroundYPosition(bi.getBackgroundYPosition());
case INITIAL:
binfo.setBackgroundYPositionAbsolute(true);
binfo.setBackgroundYPosition(HtmlValues.getPixelSize(yposition,this,0));
default :
binfo.setBackgroundYPositionAbsolute(true);
binfo.setBackgroundYPosition(HtmlValues.getPixelSize(yposition,this,0));
}
}
}","/** 
 * Apply background vertical position.
 * @param binfo the binfo
 * @param yposition the yposition
 */
private void applyBackgroundVerticalPosition(BackgroundInfo binfo,String yposition){
  if (yposition.endsWith(""String_Node_Str"")) {
    binfo.setBackgroundYPositionAbsolute(false);
    try {
      binfo.setBackgroundYPosition((int)Double.parseDouble(yposition.substring(0,yposition.length() - 1).trim()));
    }
 catch (    NumberFormatException nfe) {
      binfo.setBackgroundYPosition(0);
    }
  }
 else {
switch (yposition) {
case CENTER:
      binfo.setBackgroundYPositionAbsolute(false);
    binfo.setBackgroundYPosition(50);
case RIGHT:
  binfo.setBackgroundYPositionAbsolute(false);
binfo.setBackgroundYPosition(100);
case LEFT:
binfo.setBackgroundYPositionAbsolute(false);
binfo.setBackgroundYPosition(0);
case BOTTOM:
binfo.setBackgroundYPositionAbsolute(false);
binfo.setBackgroundYPosition(100);
case TOP:
binfo.setBackgroundYPositionAbsolute(false);
binfo.setBackgroundYPosition(0);
case INHERIT:
BackgroundInfo bi=this.getPreviousRenderState().getBackgroundInfo();
if (bi != null) {
binfo.setBackgroundYPositionAbsolute(bi.isBackgroundYPositionAbsolute());
binfo.setBackgroundYPosition(bi.getBackgroundYPosition());
}
case INITIAL:
binfo.setBackgroundYPositionAbsolute(true);
binfo.setBackgroundYPosition(HtmlValues.getPixelSize(yposition,this,0));
default :
binfo.setBackgroundYPositionAbsolute(true);
binfo.setBackgroundYPosition(HtmlValues.getPixelSize(yposition,this,0));
}
}
}"
60171,"@Override public Color getColor(){
  Color c=this.iColor;
  if (c != null) {
    return c;
  }
  AbstractCSS2Properties props=this.getCssProperties();
  String colorValue=props == null ? null : props.getColor();
  if (INHERIT.equals(colorValue) && this.getPreviousRenderState() != null) {
    return this.getPreviousRenderState().getColor();
  }
 else   if (INITIAL.equals(colorValue)) {
    return getDefaultColor();
  }
 else   if ((colorValue == null) || ""String_Node_Str"".equals(colorValue)) {
    RenderState prs=this.prevRenderState;
    if (prs != null) {
      c=prs.getColor();
      this.iColor=c;
      return c;
    }
 else {
      this.iColor=getDefaultColor();
      return getDefaultColor();
    }
  }
  return c;
}","@Override public Color getColor(){
  Color c=this.iColor;
  if (c != null) {
    return c;
  }
  AbstractCSS2Properties props=this.getCssProperties();
  String colorValue=props == null ? null : props.getColor();
  if (INHERIT.equals(colorValue) && this.getPreviousRenderState() != null) {
    return this.getPreviousRenderState().getColor();
  }
 else   if (INITIAL.equals(colorValue)) {
    return getDefaultColor();
  }
 else   if ((colorValue == null) || ""String_Node_Str"".equals(colorValue)) {
    RenderState prs=this.prevRenderState;
    if (prs != null) {
      c=prs.getColor();
      this.iColor=c;
      return c;
    }
 else {
      this.iColor=getDefaultColor();
      return getDefaultColor();
    }
  }
 else {
    c=colorValue == null ? null : ColorFactory.getInstance().getColor(colorValue);
    this.iColor=c;
  }
  return c;
}"
60172,"/** 
 * Apply background horizontal positon.
 * @param binfo the binfo
 * @param xposition the xposition
 */
private void applyBackgroundHorizontalPositon(BackgroundInfo binfo,String xposition){
  if (xposition.endsWith(""String_Node_Str"")) {
    binfo.setBackgroundXPositionAbsolute(false);
    try {
      binfo.setBackgroundXPosition((int)Double.parseDouble(xposition.substring(0,xposition.length() - 1).trim()));
    }
 catch (    NumberFormatException nfe) {
      binfo.setBackgroundXPosition(0);
    }
  }
 else {
switch (xposition) {
case CENTER:
      binfo.setBackgroundXPositionAbsolute(false);
    binfo.setBackgroundXPosition(50);
case RIGHT:
  binfo.setBackgroundXPositionAbsolute(false);
binfo.setBackgroundXPosition(100);
case LEFT:
binfo.setBackgroundXPositionAbsolute(false);
binfo.setBackgroundXPosition(0);
case BOTTOM:
binfo.setBackgroundYPositionAbsolute(false);
binfo.setBackgroundYPosition(100);
case TOP:
binfo.setBackgroundYPositionAbsolute(false);
binfo.setBackgroundYPosition(0);
case INHERIT:
BackgroundInfo bi=this.getPreviousRenderState().getBackgroundInfo();
binfo.setBackgroundYPositionAbsolute(bi.isBackgroundYPositionAbsolute());
binfo.setBackgroundYPosition(bi.getBackgroundYPosition());
case INITIAL:
binfo.setBackgroundXPositionAbsolute(true);
binfo.setBackgroundXPosition(HtmlValues.getPixelSize(xposition,this,0));
default :
binfo.setBackgroundXPositionAbsolute(true);
binfo.setBackgroundXPosition(HtmlValues.getPixelSize(xposition,this,0));
}
}
}","/** 
 * Apply background horizontal positon.
 * @param binfo the binfo
 * @param xposition the xposition
 */
private void applyBackgroundHorizontalPositon(BackgroundInfo binfo,String xposition){
  if (xposition.endsWith(""String_Node_Str"")) {
    binfo.setBackgroundXPositionAbsolute(false);
    try {
      binfo.setBackgroundXPosition((int)Double.parseDouble(xposition.substring(0,xposition.length() - 1).trim()));
    }
 catch (    NumberFormatException nfe) {
      binfo.setBackgroundXPosition(0);
    }
  }
 else {
switch (xposition) {
case CENTER:
      binfo.setBackgroundXPositionAbsolute(false);
    binfo.setBackgroundXPosition(50);
case RIGHT:
  binfo.setBackgroundXPositionAbsolute(false);
binfo.setBackgroundXPosition(100);
case LEFT:
binfo.setBackgroundXPositionAbsolute(false);
binfo.setBackgroundXPosition(0);
case BOTTOM:
binfo.setBackgroundYPositionAbsolute(false);
binfo.setBackgroundYPosition(100);
case TOP:
binfo.setBackgroundYPositionAbsolute(false);
binfo.setBackgroundYPosition(0);
case INHERIT:
BackgroundInfo bi=this.getPreviousRenderState().getBackgroundInfo();
if (bi != null) {
binfo.setBackgroundXPositionAbsolute(bi.isBackgroundXPositionAbsolute());
binfo.setBackgroundXPosition(bi.getBackgroundXPosition());
}
case INITIAL:
binfo.setBackgroundXPositionAbsolute(true);
binfo.setBackgroundXPosition(HtmlValues.getPixelSize(xposition,this,0));
default :
binfo.setBackgroundXPositionAbsolute(true);
binfo.setBackgroundXPosition(HtmlValues.getPixelSize(xposition,this,0));
}
}
}"
60173,"@Override public BackgroundInfo getBackgroundInfo(){
  BackgroundInfo binfo=this.iBackgroundInfo;
  if (binfo != INVALID_BACKGROUND_INFO) {
    return binfo;
  }
  AbstractCSS2Properties props=this.getCssProperties();
  if (props != null) {
    String backgroundColorText=props.getBackgroundColor();
    if (backgroundColorText != null) {
      if (binfo == null) {
        binfo=new BackgroundInfo();
      }
      binfo.setBackgroundColor(ColorFactory.getInstance().getColor(backgroundColorText));
    }
    String backgroundImageText=props.getBackgroundImage();
    if ((backgroundImageText != null) && (backgroundImageText.length() > 0)) {
      URL backgroundImage=HtmlValues.getURIFromStyleValue(backgroundImageText);
      if (backgroundImage != null) {
        if (binfo == null) {
          binfo=new BackgroundInfo();
        }
        binfo.setBackgroundImage(backgroundImage);
      }
    }
    String backgroundRepeatText=props.getBackgroundRepeat();
    if (backgroundRepeatText != null) {
      if (binfo == null) {
        binfo=new BackgroundInfo();
      }
      this.applyBackgroundRepeat(binfo,backgroundRepeatText);
    }
    String backgroundPositionText=props.getBackgroundPosition();
    if (backgroundPositionText != null) {
      if (binfo == null) {
        binfo=new BackgroundInfo();
      }
      this.applyBackgroundPosition(binfo,backgroundPositionText);
    }
  }
  this.iBackgroundInfo=binfo;
  return binfo;
}","@Override public BackgroundInfo getBackgroundInfo(){
  BackgroundInfo binfo=this.iBackgroundInfo;
  if (binfo != INVALID_BACKGROUND_INFO) {
    return binfo;
  }
  if (element != null && !""String_Node_Str"".equals(element.getNodeName())) {
    binfo=null;
  }
  AbstractCSS2Properties props=this.getCssProperties();
  if (props != null) {
    String backgroundColorText=props.getBackgroundColor();
    if (backgroundColorText != null) {
      if (binfo == null) {
        binfo=new BackgroundInfo();
      }
      binfo.setBackgroundColor(ColorFactory.getInstance().getColor(backgroundColorText));
    }
    String backgroundImageText=props.getBackgroundImage();
    if ((backgroundImageText != null) && (backgroundImageText.length() > 0)) {
      URL backgroundImage=HtmlValues.getURIFromStyleValue(backgroundImageText);
      if (backgroundImage != null) {
        if (binfo == null) {
          binfo=new BackgroundInfo();
        }
        binfo.setBackgroundImage(backgroundImage);
      }
    }
    String backgroundRepeatText=props.getBackgroundRepeat();
    if (backgroundRepeatText != null) {
      if (binfo == null) {
        binfo=new BackgroundInfo();
      }
      this.applyBackgroundRepeat(binfo,backgroundRepeatText);
    }
    String backgroundPositionText=props.getBackgroundPosition();
    if (backgroundPositionText != null) {
      if (binfo == null) {
        binfo=new BackgroundInfo();
      }
      this.applyBackgroundPosition(binfo,backgroundPositionText);
    }
  }
  this.iBackgroundInfo=binfo;
  return binfo;
}"
60174,"/** 
 * Layout children.
 * @param node the node
 */
public void layoutChildren(DOMNodeImpl node){
  DOMNodeImpl[] childrenArray=node.getChildrenArray();
  if (childrenArray != null) {
    int length=childrenArray.length;
    for (int i=0; i < length; i++) {
      DOMNodeImpl child=childrenArray[i];
      short nodeType=child.getNodeType();
      if (nodeType == Node.TEXT_NODE) {
        this.layoutText(child);
      }
 else       if (nodeType == Node.ELEMENT_NODE) {
        this.currentLine.addStyleChanger(new RStyleChanger(child));
        String nodeName=child.getNodeName().toUpperCase();
        MarkupLayout ml=(MarkupLayout)elementLayout.get(nodeName);
        if (ml == null) {
          ml=miscLayout;
        }
        ml.layoutMarkup(this,(HTMLElementImpl)child);
        this.currentLine.addStyleChanger(new RStyleChanger(node));
      }
 else       if ((nodeType == Node.COMMENT_NODE) || (nodeType == Node.PROCESSING_INSTRUCTION_NODE)) {
      }
 else {
        throw new IllegalStateException(""String_Node_Str"" + child);
      }
    }
  }
}","/** 
 * Layout children.
 * @param node the node
 */
public void layoutChildren(DOMNodeImpl node){
  DOMNodeImpl[] childrenArray=node.getChildrenArray();
  if (childrenArray != null) {
    int length=childrenArray.length;
    for (int i=0; i < length; i++) {
      DOMNodeImpl child=childrenArray[i];
      short nodeType=child.getNodeType();
      if (nodeType == Node.TEXT_NODE) {
        this.layoutText(child);
      }
 else       if (nodeType == Node.ELEMENT_NODE) {
        this.currentLine.addStyleChanger(new RStyleChanger(child));
        String nodeName=child.getNodeName().toUpperCase();
        MarkupLayout ml=(MarkupLayout)elementLayout.get(nodeName);
        if (ml == null) {
          ml=miscLayout;
        }
        ml.layoutMarkup(this,(HTMLElementImpl)child);
        this.currentLine.addStyleChanger(new RStyleChanger(node));
      }
    }
  }
}"
60175,"/** 
 * Perform file actions.
 */
private void performFileActions(){
  try {
    File userHome=new File(System.getProperty(""String_Node_Str""));
    File loboHome=new File(userHome,""String_Node_Str"");
    File cacheHome=new File(loboHome,""String_Node_Str"");
    this.deleteDecorationFiles(cacheHome);
  }
 catch (  Exception err) {
    logger.log(Level.ERROR,""String_Node_Str"",err);
  }
}","/** 
 * Perform file actions.
 */
private void performFileActions(){
  try {
    File userHome=new File(System.getProperty(""String_Node_Str""));
    File loboHome=new File(userHome,""String_Node_Str"");
    File cacheHome=new File(loboHome,""String_Node_Str"");
    this.deleteDecorationFiles(cacheHome);
  }
 catch (  Exception err) {
    err.printStackTrace();
  }
}"
60176,"/** 
 * Gets cookies belonging exactly to the host name given, not to a broader domain.
 * @param hostName the host name
 * @param path the path
 * @return the cookies strict
 */
private Collection<Cookie> getCookiesStrict(String hostName,String path){
  if ((path == null) || (path.length() == 0)) {
    path=""String_Node_Str"";
  }
  boolean liflag=logger.isLoggable(Level.INFO);
  Collection<Cookie> cookies=new LinkedList<Cookie>();
  Set<String> transientCookieNames=new HashSet<String>();
synchronized (this) {
    Map<String,CookieValue> hostMap=this.transientMapByHost.get(hostName);
    if (hostMap != null) {
      Iterator<Map.Entry<String,CookieValue>> i=hostMap.entrySet().iterator();
      while (i.hasNext()) {
        Map.Entry<String,CookieValue> entry=i.next();
        CookieValue cookieValue=entry.getValue();
        if (cookieValue.isExpired()) {
          if (liflag) {
            logger.info(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ hostName+ ""String_Node_Str""+ cookieValue.getExpires());
          }
        }
 else {
          if (path.startsWith(cookieValue.getPath())) {
            String cookieName=entry.getKey();
            transientCookieNames.add(cookieName);
            Cookie cookie=new Cookie();
            cookie.setName(cookieName);
            cookie.setValue(cookieValue.getValue());
            cookie.setPath(cookieValue.getPath());
            cookie.setDomain(cookieValue.getDomain());
            cookies.add(cookie);
          }
 else {
            if (liflag) {
              logger.info(""String_Node_Str"" + cookieValue + ""String_Node_Str""+ path);
            }
          }
        }
      }
    }
  }
  try {
    RestrictedStore store=StorageManager.getInstance().getRestrictedStore(hostName,false);
    if (store != null) {
      Collection paths;
      paths=store.getPaths(COOKIE_PATH_PATTERN);
      Iterator pathsIterator=paths.iterator();
      while (pathsIterator.hasNext()) {
        String filePath=(String)pathsIterator.next();
        String cookieName=this.getCookieNameFromPath(filePath);
        if (!transientCookieNames.contains(cookieName)) {
          CookieValue cookieValue=(CookieValue)store.retrieveObject(filePath);
          if (cookieValue != null) {
            if (cookieValue.isExpired()) {
              if (logger.isLoggable(Level.INFO)) {
                logger.info(""String_Node_Str"" + cookieName + ""String_Node_Str""+ hostName+ ""String_Node_Str""+ cookieValue.getExpires());
              }
              store.removeObject(filePath);
            }
 else {
              if (path.startsWith(cookieValue.getPath())) {
synchronized (this) {
                  Map<String,CookieValue> hostMap=this.transientMapByHost.get(hostName);
                  if (hostMap == null) {
                    hostMap=new HashMap<String,CookieValue>();
                    this.transientMapByHost.put(hostName,hostMap);
                  }
                  hostMap.put(cookieName,cookieValue);
                }
                cookie.setName(cookieName);
                cookie.setValue(cookieValue.getValue());
                cookie.setPath(cookieValue.getPath());
                cookie.setDomain(cookieValue.getDomain());
                cookies.add(cookie);
              }
 else {
                if (logger.isLoggable(Level.INFO)) {
                  logger.info(""String_Node_Str"" + cookieValue + ""String_Node_Str""+ path);
                }
              }
            }
          }
 else {
            logger.warning(""String_Node_Str"" + cookieName + ""String_Node_Str"");
          }
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.SEVERE,""String_Node_Str"",ioe);
  }
catch (  ClassNotFoundException cnf) {
    logger.log(Level.SEVERE,""String_Node_Str"",cnf);
  }
  return cookies;
}","/** 
 * Gets cookies belonging exactly to the host name given, not to a broader domain.
 * @param hostName the host name
 * @param path the path
 * @return the cookies strict
 */
private Collection<Cookie> getCookiesStrict(String hostName,String path){
  if ((path == null) || (path.length() == 0)) {
    path=""String_Node_Str"";
  }
  boolean liflag=logger.isLoggable(Level.INFO);
  Collection<Cookie> cookies=new LinkedList<Cookie>();
  Set<String> transientCookieNames=new HashSet<String>();
synchronized (this) {
    Map<String,CookieValue> hostMap=this.transientMapByHost.get(hostName);
    if (hostMap != null) {
      Iterator<Map.Entry<String,CookieValue>> i=hostMap.entrySet().iterator();
      while (i.hasNext()) {
        Map.Entry<String,CookieValue> entry=i.next();
        CookieValue cookieValue=entry.getValue();
        if (cookieValue.isExpired()) {
          if (liflag) {
            logger.info(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ hostName+ ""String_Node_Str""+ cookieValue.getExpires());
          }
        }
 else {
          if (path.startsWith(cookieValue.getPath())) {
            String cookieName=entry.getKey();
            transientCookieNames.add(cookieName);
            Cookie cookie=new Cookie();
            cookie.setName(cookieName);
            cookie.setValue(cookieValue.getValue());
            cookie.setPath(cookieValue.getPath());
            cookie.setDomain(cookieValue.getDomain());
            cookies.add(cookie);
          }
 else {
            if (liflag) {
              logger.info(""String_Node_Str"" + cookieValue + ""String_Node_Str""+ path);
            }
          }
        }
      }
    }
  }
  try {
    RestrictedStore store=StorageManager.getInstance().getRestrictedStore(hostName,false);
    if (store != null) {
      Collection paths;
      paths=store.getPaths(COOKIE_PATH_PATTERN);
      Iterator pathsIterator=paths.iterator();
      while (pathsIterator.hasNext()) {
        String filePath=(String)pathsIterator.next();
        String cookieName=this.getCookieNameFromPath(filePath);
        if (!transientCookieNames.contains(cookieName)) {
          CookieValue cookieValue=(CookieValue)store.retrieveObject(filePath);
          if (cookieValue != null) {
            if (cookieValue.isExpired()) {
              if (logger.isLoggable(Level.INFO)) {
                logger.info(""String_Node_Str"" + cookieName + ""String_Node_Str""+ hostName+ ""String_Node_Str""+ cookieValue.getExpires());
              }
              store.removeObject(filePath);
            }
 else {
              if (path.startsWith(cookieValue.getPath())) {
synchronized (this) {
                  Map<String,CookieValue> hostMap=this.transientMapByHost.get(hostName);
                  if (hostMap == null) {
                    hostMap=new HashMap<String,CookieValue>();
                    this.transientMapByHost.put(hostName,hostMap);
                  }
                  hostMap.put(cookieName,cookieValue);
                }
                Cookie cookie=new Cookie();
                cookie.setName(cookieName);
                cookie.setValue(cookieValue.getValue());
                cookie.setPath(cookieValue.getPath());
                cookie.setDomain(cookieValue.getDomain());
                cookies.add(cookie);
              }
 else {
                if (logger.isLoggable(Level.INFO)) {
                  logger.info(""String_Node_Str"" + cookieValue + ""String_Node_Str""+ path);
                }
              }
            }
          }
 else {
            logger.warning(""String_Node_Str"" + cookieName + ""String_Node_Str"");
          }
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.SEVERE,""String_Node_Str"",ioe);
  }
catch (  ClassNotFoundException cnf) {
    logger.log(Level.SEVERE,""String_Node_Str"",cnf);
  }
  return cookies;
}"
60177,"/** 
 * Gets cookies belonging exactly to the host name given, not to a broader domain.
 * @param hostName the host name
 * @param path the path
 * @return the cookies strict
 */
private Collection<Cookie> getCookiesStrict(String hostName,String path){
  if ((path == null) || (path.length() == 0)) {
    path=""String_Node_Str"";
  }
  boolean liflag=logger.isLoggable(Level.INFO);
  Collection<Cookie> cookies=new LinkedList<Cookie>();
  Cookie cookie=new Cookie();
  Set<String> transientCookieNames=new HashSet<String>();
synchronized (this) {
    Map<String,CookieValue> hostMap=this.transientMapByHost.get(hostName);
    if (hostMap != null) {
      Iterator<Map.Entry<String,CookieValue>> i=hostMap.entrySet().iterator();
      while (i.hasNext()) {
        Map.Entry<String,CookieValue> entry=i.next();
        CookieValue cookieValue=entry.getValue();
        if (cookieValue.isExpired()) {
          if (liflag) {
            logger.info(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ hostName+ ""String_Node_Str""+ cookieValue.getExpires());
          }
        }
 else {
          if (path.startsWith(cookieValue.getPath())) {
            String cookieName=entry.getKey();
            transientCookieNames.add(cookieName);
            cookie.setName(cookieName);
            cookie.setValue(cookieValue.getValue());
            cookie.setPath(cookieValue.getPath());
            cookie.setDomain(cookieValue.getDomain());
            cookies.add(cookie);
          }
 else {
            if (liflag) {
              logger.info(""String_Node_Str"" + cookieValue + ""String_Node_Str""+ path);
            }
          }
        }
      }
    }
  }
  try {
    RestrictedStore store=StorageManager.getInstance().getRestrictedStore(hostName,false);
    if (store != null) {
      Collection paths;
      paths=store.getPaths(COOKIE_PATH_PATTERN);
      Iterator pathsIterator=paths.iterator();
      while (pathsIterator.hasNext()) {
        String filePath=(String)pathsIterator.next();
        String cookieName=this.getCookieNameFromPath(filePath);
        if (!transientCookieNames.contains(cookieName)) {
          CookieValue cookieValue=(CookieValue)store.retrieveObject(filePath);
          if (cookieValue != null) {
            if (cookieValue.isExpired()) {
              if (logger.isLoggable(Level.INFO)) {
                logger.info(""String_Node_Str"" + cookieName + ""String_Node_Str""+ hostName+ ""String_Node_Str""+ cookieValue.getExpires());
              }
              store.removeObject(filePath);
            }
 else {
              if (path.startsWith(cookieValue.getPath())) {
synchronized (this) {
                  Map<String,CookieValue> hostMap=this.transientMapByHost.get(hostName);
                  if (hostMap == null) {
                    hostMap=new HashMap<String,CookieValue>();
                    this.transientMapByHost.put(hostName,hostMap);
                  }
                  hostMap.put(cookieName,cookieValue);
                }
                cookie.setName(cookieName);
                cookie.setValue(cookieValue.getValue());
                cookie.setPath(cookieValue.getPath());
                cookie.setDomain(cookieValue.getDomain());
                cookies.add(cookie);
              }
 else {
                if (logger.isLoggable(Level.INFO)) {
                  logger.info(""String_Node_Str"" + cookieValue + ""String_Node_Str""+ path);
                }
              }
            }
          }
 else {
            logger.warning(""String_Node_Str"" + cookieName + ""String_Node_Str"");
          }
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.SEVERE,""String_Node_Str"",ioe);
  }
catch (  ClassNotFoundException cnf) {
    logger.log(Level.SEVERE,""String_Node_Str"",cnf);
  }
  return cookies;
}","/** 
 * Gets cookies belonging exactly to the host name given, not to a broader domain.
 * @param hostName the host name
 * @param path the path
 * @return the cookies strict
 */
private Collection<Cookie> getCookiesStrict(String hostName,String path){
  if ((path == null) || (path.length() == 0)) {
    path=""String_Node_Str"";
  }
  boolean liflag=logger.isLoggable(Level.INFO);
  Collection<Cookie> cookies=new LinkedList<Cookie>();
  Set<String> transientCookieNames=new HashSet<String>();
synchronized (this) {
    Map<String,CookieValue> hostMap=this.transientMapByHost.get(hostName);
    if (hostMap != null) {
      Iterator<Map.Entry<String,CookieValue>> i=hostMap.entrySet().iterator();
      while (i.hasNext()) {
        Map.Entry<String,CookieValue> entry=i.next();
        CookieValue cookieValue=entry.getValue();
        if (cookieValue.isExpired()) {
          if (liflag) {
            logger.info(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ hostName+ ""String_Node_Str""+ cookieValue.getExpires());
          }
        }
 else {
          if (path.startsWith(cookieValue.getPath())) {
            String cookieName=entry.getKey();
            transientCookieNames.add(cookieName);
            Cookie cookie=new Cookie();
            cookie.setName(cookieName);
            cookie.setValue(cookieValue.getValue());
            cookie.setPath(cookieValue.getPath());
            cookie.setDomain(cookieValue.getDomain());
            cookies.add(cookie);
          }
 else {
            if (liflag) {
              logger.info(""String_Node_Str"" + cookieValue + ""String_Node_Str""+ path);
            }
          }
        }
      }
    }
  }
  try {
    RestrictedStore store=StorageManager.getInstance().getRestrictedStore(hostName,false);
    if (store != null) {
      Collection paths;
      paths=store.getPaths(COOKIE_PATH_PATTERN);
      Iterator pathsIterator=paths.iterator();
      while (pathsIterator.hasNext()) {
        String filePath=(String)pathsIterator.next();
        String cookieName=this.getCookieNameFromPath(filePath);
        if (!transientCookieNames.contains(cookieName)) {
          CookieValue cookieValue=(CookieValue)store.retrieveObject(filePath);
          if (cookieValue != null) {
            if (cookieValue.isExpired()) {
              if (logger.isLoggable(Level.INFO)) {
                logger.info(""String_Node_Str"" + cookieName + ""String_Node_Str""+ hostName+ ""String_Node_Str""+ cookieValue.getExpires());
              }
              store.removeObject(filePath);
            }
 else {
              if (path.startsWith(cookieValue.getPath())) {
synchronized (this) {
                  Map<String,CookieValue> hostMap=this.transientMapByHost.get(hostName);
                  if (hostMap == null) {
                    hostMap=new HashMap<String,CookieValue>();
                    this.transientMapByHost.put(hostName,hostMap);
                  }
                  hostMap.put(cookieName,cookieValue);
                }
                cookie.setName(cookieName);
                cookie.setValue(cookieValue.getValue());
                cookie.setPath(cookieValue.getPath());
                cookie.setDomain(cookieValue.getDomain());
                cookies.add(cookie);
              }
 else {
                if (logger.isLoggable(Level.INFO)) {
                  logger.info(""String_Node_Str"" + cookieValue + ""String_Node_Str""+ path);
                }
              }
            }
          }
 else {
            logger.warning(""String_Node_Str"" + cookieName + ""String_Node_Str"");
          }
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.SEVERE,""String_Node_Str"",ioe);
  }
catch (  ClassNotFoundException cnf) {
    logger.log(Level.SEVERE,""String_Node_Str"",cnf);
  }
  return cookies;
}"
60178,"private boolean match(String value,String strPattern){
  if (value != null && value.length() > 0) {
    Pattern pattern=Pattern.compile(strPattern);
    Matcher matcher=pattern.matcher(value);
    return matcher.matches();
  }
 else {
    return true;
  }
}","private boolean match(String value,String strPattern){
  if (value != null && value.length() > 0 && strPattern != null && strPattern.length() > 0) {
    Pattern pattern=Pattern.compile(strPattern);
    Matcher matcher=pattern.matcher(value);
    return matcher.matches();
  }
 else {
    return true;
  }
}"
60179,"/** 
 * Load background image.
 * @param imageURL the image url
 */
protected void loadBackgroundImage(final URL imageURL){
  Image image=null;
  String url=imageURL.toString();
  try {
    SSLCertificate.setCertificate();
    if (url.endsWith(""String_Node_Str"")) {
      SVGRasterizer r=new SVGRasterizer(imageURL);
      image=r.bufferedImageToImage();
    }
 else     if (url.startsWith(""String_Node_Str"")) {
      image=Toolkit.getDefaultToolkit().createImage(ImageIO.read(imageURL).getSource());
    }
 else     if (url.endsWith(""String_Node_Str"")) {
      image=new ImageIcon(imageURL).getImage();
    }
 else     if (url.endsWith(""String_Node_Str"")) {
      image=ImageIO.read(imageURL);
    }
    BaseElementRenderable.this.backgroundImage=image;
    int w=image.getWidth(BaseElementRenderable.this);
    int h=image.getHeight(BaseElementRenderable.this);
    if ((w != -1) && (h != -1)) {
      BaseElementRenderable.this.repaint();
    }
  }
 catch (  IOException|TranscoderException thrown) {
    logger.log(Level.WARNING,""String_Node_Str"",thrown);
  }
}","/** 
 * Load background image.
 * @param imageURL the image url
 */
protected void loadBackgroundImage(final URL imageURL){
  Image image=null;
  String url=imageURL.toString();
  try {
    SSLCertificate.setCertificate();
    if (url.endsWith(""String_Node_Str"")) {
      SVGRasterizer r=new SVGRasterizer(imageURL);
      image=r.bufferedImageToImage();
    }
 else     if (url.startsWith(""String_Node_Str"")) {
      image=Toolkit.getDefaultToolkit().createImage(ImageIO.read(imageURL).getSource());
    }
 else     if (url.endsWith(""String_Node_Str"")) {
      image=new ImageIcon(imageURL).getImage();
    }
 else     if (url.endsWith(""String_Node_Str"")) {
      image=ImageIO.read(imageURL);
    }
 else {
      image=ImageIO.read(imageURL);
    }
    BaseElementRenderable.this.backgroundImage=image;
    int w=image.getWidth(BaseElementRenderable.this);
    int h=image.getHeight(BaseElementRenderable.this);
    if ((w != -1) && (h != -1)) {
      BaseElementRenderable.this.repaint();
    }
  }
 catch (  IOException|TranscoderException thrown) {
    logger.log(Level.WARNING,""String_Node_Str"",thrown);
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}"
60180,"/** 
 * @return the lineWidth
 */
public int getLineWidth(){
  return lineWidth;
}","/** 
 * @return the lineWidth
 */
public int getLineWidth(){
  return canvasInfo.getLineWidth();
}"
60181,"/** 
 * Instantiates a new HTML canvas element impl.
 * @param name the name
 */
public HTMLCanvasElementImpl(String name){
  super(name);
  lineWidth=1;
  globalAlpha=1.0;
  rotate=0.0;
  scaleX=1;
  scaleY=1;
  translateX=0;
  translateY=0;
  color=Color.BLACK;
  font=DEFAULT_FONT;
  if (listRectValues == null) {
    listRectValues=new ArrayList<CanvasInfo>();
  }
  if (listStrokeRectValues == null) {
    listStrokeRectValues=new ArrayList<CanvasInfo>();
  }
  if (listTextValues == null) {
    listTextValues=new ArrayList<CanvasInfo>();
  }
  if (listStrokeTextValues == null) {
    listStrokeTextValues=new ArrayList<CanvasInfo>();
  }
  if (linearValues == null) {
    linearValues=new CanvasInfo();
  }
  if (canvasInfo == null) {
    canvasInfo=new CanvasInfo();
  }
  if (path == null) {
    path=new GeneralPath();
  }
  if (fractions == null) {
    fractions=new ArrayList<Float>();
  }
  if (colors == null) {
    colors=new ArrayList<Color>();
  }
}","/** 
 * Instantiates a new HTML canvas element impl.
 * @param name the name
 */
public HTMLCanvasElementImpl(String name){
  super(name);
  globalAlpha=1.0;
  rotate=0.0;
  scaleX=1;
  scaleY=1;
  translateX=0;
  translateY=0;
  color=Color.BLACK;
  font=DEFAULT_FONT;
  if (listRectValues == null) {
    listRectValues=new ArrayList<CanvasInfo>();
  }
  if (listStrokeRectValues == null) {
    listStrokeRectValues=new ArrayList<CanvasInfo>();
  }
  if (listTextValues == null) {
    listTextValues=new ArrayList<CanvasInfo>();
  }
  if (listStrokeTextValues == null) {
    listStrokeTextValues=new ArrayList<CanvasInfo>();
  }
  if (linearValues == null) {
    linearValues=new CanvasInfo();
  }
  if (canvasInfo == null) {
    canvasInfo=new CanvasInfo();
  }
  if (path == null) {
    path=new GeneralPath();
  }
  if (fractions == null) {
    fractions=new ArrayList<Float>();
  }
  if (colors == null) {
    colors=new ArrayList<Color>();
  }
}"
60182,"/** 
 * @param lineWidth the lineWidth to set
 */
public void setLineWidth(int lineWidth){
  this.lineWidth=lineWidth;
}","/** 
 * @param lineWidth the lineWidth to set
 */
public void setLineWidth(int lineWidth){
  canvasInfo.setLineWidth(lineWidth);
}"
60183,"@Override public void fillText(String text,int x,int y,int maxWidth){
  CanvasInfo ci=new CanvasInfo();
  ci.setText(text);
  ci.setX(x);
  ci.setY(y);
  ci.setMaxWidth(maxWidth);
  ci.setFillStyle(getFillStyle());
  ci.setScaleX(scaleX);
  ci.setScaleY(scaleY);
  ci.setTranslateX(translateX);
  ci.setTranslateY(translateY);
  ci.setFont(font);
  listTextValues.add(ci);
  setMethod(HTMLCanvasElement.FILL_TEXT);
}","@Override public void fillText(String text,int x,int y,int maxWidth){
  CanvasInfo ci=new CanvasInfo();
  ci.setText(text);
  ci.setX(x);
  ci.setY(y);
  ci.setMaxWidth(maxWidth);
  ci.setFillStyle(getFillStyle());
  ci.setRotate(rotate);
  ci.setScaleX(scaleX);
  ci.setScaleY(scaleY);
  ci.setTranslateX(translateX);
  ci.setTranslateY(translateY);
  ci.setFont(font);
  listTextValues.add(ci);
  setMethod(HTMLCanvasElement.FILL_TEXT);
}"
60184,"/** 
 * Gets the event function.
 * @param varValue the var value
 * @param attributeName the attribute name
 * @return the event function
 */
public Function getEventFunction(Function varValue,String attributeName){
  if (varValue != null) {
    return varValue;
  }
  String normalAttributeName=this.normalizeAttributeName(attributeName);
synchronized (this) {
    Map<String,Function> fba=this.functionByAttribute;
    Function f=fba == null ? null : (Function)fba.get(normalAttributeName);
    if (f != null) {
      return f;
    }
    UserAgentContext uac=this.getUserAgentContext();
    if (uac == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    if (uac.isScriptingEnabled()) {
      String attributeValue=this.getAttribute(attributeName);
      if ((attributeValue == null) || (attributeValue.length() == 0)) {
        f=null;
      }
 else {
        String functionCode=""String_Node_Str"" + normalAttributeName + ""String_Node_Str""+ System.identityHashCode(this)+ ""String_Node_Str""+ attributeValue+ ""String_Node_Str"";
        Document doc=this.document;
        if (doc == null) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        Context ctx=Executor.createContext(this.getDocumentURL(),uac);
        try {
          Scriptable scope=(Scriptable)doc.getUserData(Executor.SCOPE_KEY);
          if (scope == null) {
            throw new IllegalStateException(""String_Node_Str"" + Executor.SCOPE_KEY);
          }
          Scriptable thisScope=(Scriptable)JavaScript.getInstance().getJavascriptObject(this,scope);
          try {
            f=ctx.compileFunction(thisScope,functionCode,this.getTagName() + ""String_Node_Str"" + this.getId()+ ""String_Node_Str""+ attributeName,1,null);
          }
 catch (          EcmaError ecmaError) {
            logger.log(Level.WARNING,""String_Node_Str"" + ecmaError.sourceName() + ""String_Node_Str""+ ecmaError.lineNumber()+ ""String_Node_Str""+ ecmaError.getMessage(),ecmaError);
            f=null;
          }
catch (          Throwable err) {
            logger.log(Level.WARNING,""String_Node_Str"",err);
            f=null;
          }
        }
  finally {
          Context.exit();
        }
      }
      if (fba == null) {
        fba=new HashMap<String,Function>(1);
        this.functionByAttribute=fba;
      }
      fba.put(normalAttributeName,f);
    }
    return f;
  }
}","/** 
 * Gets the event function.
 * @param varValue the var value
 * @param attributeName the attribute name
 * @return the event function
 */
public Function getEventFunction(Function varValue,String attributeName){
  if (varValue != null) {
    return varValue;
  }
  String normalAttributeName=this.normalizeAttributeName(attributeName);
synchronized (this) {
    Map<String,Function> fba=this.functionByAttribute;
    Function f=fba == null ? null : (Function)fba.get(normalAttributeName);
    if (f != null) {
      return f;
    }
    UserAgentContext uac=this.getUserAgentContext();
    if (uac == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    if (uac.isScriptingEnabled()) {
      String attributeValue=this.getAttribute(attributeName);
      if ((attributeValue == null) || (attributeValue.length() == 0)) {
        f=null;
      }
 else {
        String functionCode=""String_Node_Str"" + normalAttributeName + ""String_Node_Str""+ System.identityHashCode(this)+ ""String_Node_Str""+ attributeValue+ ""String_Node_Str"";
        Document doc=this.document;
        if (doc == null) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        Context ctx=Executor.createContext(this.getDocumentURL(),uac);
        try {
          Scriptable scope=(Scriptable)doc.getUserData(Executor.SCOPE_KEY);
          if (scope == null) {
            throw new IllegalStateException(""String_Node_Str"" + Executor.SCOPE_KEY);
          }
          Scriptable thisScope=(Scriptable)JavaScript.getInstance().getJavascriptObject(this,scope);
          try {
            f=ctx.compileFunction(thisScope,functionCode,this.getTagName() + ""String_Node_Str"" + this.getId()+ ""String_Node_Str""+ attributeName,1,null);
          }
 catch (          EcmaError ecmaError) {
            logger.log(Level.WARNING,""String_Node_Str"" + ecmaError.sourceName() + ""String_Node_Str""+ ecmaError.lineNumber()+ ""String_Node_Str""+ ecmaError.getMessage(),ecmaError);
            f=null;
          }
catch (          Exception err) {
            logger.log(Level.WARNING,""String_Node_Str"",err);
            f=null;
          }
        }
  finally {
          Context.exit();
        }
      }
      if (fba == null) {
        fba=new HashMap<String,Function>(1);
        this.functionByAttribute=fba;
      }
      fba.put(normalAttributeName,f);
    }
    return f;
  }
}"
60185,"/** 
 * Process script.
 */
protected final void processScript(){
  UserAgentContext bcontext=this.getUserAgentContext();
  if (bcontext == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (bcontext.isScriptingEnabled()) {
    String text;
    final String scriptURI;
    int baseLineNumber;
    String src=this.getSrc();
    Document doc=this.document;
    if (!(doc instanceof HTMLDocumentImpl)) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    boolean liflag=loggableInfo;
    if (src == null) {
      text=this.getText();
      scriptURI=doc.getBaseURI();
      baseLineNumber=1;
    }
 else {
      this.informExternalScriptLoading();
      URL scriptURL=((HTMLDocumentImpl)doc).getFullURL(src);
      scriptURI=scriptURL == null ? src : scriptURL.toExternalForm();
      long time1=liflag ? System.currentTimeMillis() : 0;
      try {
        final HttpRequest request=bcontext.createHttpRequest();
        SecurityManager sm=System.getSecurityManager();
        if (sm == null) {
          try {
            request.open(""String_Node_Str"",scriptURI,false);
            request.send(null);
          }
 catch (          IOException thrown) {
            logger.log(Level.WARNING,""String_Node_Str"",thrown);
          }
        }
 else {
          AccessController.doPrivileged(new PrivilegedAction<Object>(){
            @Override public Object run(){
              try {
                request.open(""String_Node_Str"",scriptURI,false);
                request.send(null);
              }
 catch (              IOException thrown) {
                logger.log(Level.WARNING,""String_Node_Str"",thrown);
              }
              return null;
            }
          }
);
        }
        int status=request.getStatus();
        if ((status != 200) && (status != 0)) {
          text=httpURLConnection(scriptURI);
        }
 else {
          text=request.getResponseText();
        }
      }
  finally {
        if (liflag) {
          long time2=System.currentTimeMillis();
          logger.info(""String_Node_Str"" + scriptURI + ""String_Node_Str""+ (time2 - time1)+ ""String_Node_Str"");
        }
      }
      baseLineNumber=1;
    }
    Context ctx=Executor.createContext(this.getDocumentURL(),bcontext);
    try {
      Scriptable scope=(Scriptable)doc.getUserData(Executor.SCOPE_KEY);
      if (scope == null) {
        throw new IllegalStateException(""String_Node_Str"" + Executor.SCOPE_KEY);
      }
      try {
        long time1=liflag ? System.currentTimeMillis() : 0;
        if (text == null) {
          throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str"");
        }
        ctx.evaluateString(scope,text,scriptURI,baseLineNumber,null);
        if (liflag) {
          long time2=System.currentTimeMillis();
          logger.info(""String_Node_Str"" + (time2 - time1) + ""String_Node_Str"");
        }
      }
 catch (      EcmaError ecmaError) {
        logger.log(Level.WARNING,""String_Node_Str"" + ecmaError.sourceName() + ""String_Node_Str""+ ecmaError.columnNumber()+ ""String_Node_Str""+ ecmaError.getMessage(),ecmaError);
      }
catch (      MissingResourceException err) {
        logger.log(Level.WARNING,""String_Node_Str"");
      }
catch (      Throwable err) {
        logger.log(Level.WARNING,""String_Node_Str"",err);
      }
    }
  finally {
      Context.exit();
    }
  }
}","/** 
 * Process script.
 */
protected final void processScript(){
  UserAgentContext bcontext=this.getUserAgentContext();
  if (bcontext != null && bcontext.isScriptingEnabled()) {
    String text;
    final String scriptURI;
    int baseLineNumber;
    String src=this.getSrc();
    Document doc=this.document;
    if (doc instanceof HTMLDocumentImpl) {
      boolean liflag=loggableInfo;
      if (src == null) {
        text=this.getText();
        scriptURI=doc.getBaseURI();
        baseLineNumber=1;
      }
 else {
        this.informExternalScriptLoading();
        URL scriptURL=((HTMLDocumentImpl)doc).getFullURL(src);
        scriptURI=scriptURL == null ? src : scriptURL.toExternalForm();
        long time1=liflag ? System.currentTimeMillis() : 0;
        try {
          final HttpRequest request=bcontext.createHttpRequest();
          SecurityManager sm=System.getSecurityManager();
          if (sm == null) {
            try {
              request.open(""String_Node_Str"",scriptURI,false);
              request.send(null);
            }
 catch (            IOException thrown) {
              logger.log(Level.WARNING,""String_Node_Str"",thrown);
            }
          }
 else {
            AccessController.doPrivileged(new PrivilegedAction<Object>(){
              @Override public Object run(){
                try {
                  request.open(""String_Node_Str"",scriptURI,false);
                  request.send(null);
                }
 catch (                IOException thrown) {
                  logger.log(Level.WARNING,""String_Node_Str"",thrown);
                }
                return null;
              }
            }
);
          }
          int status=request.getStatus();
          if ((status != 200) && (status != 0)) {
            text=httpURLConnection(scriptURI);
          }
 else {
            text=request.getResponseText();
          }
        }
  finally {
          if (liflag) {
            long time2=System.currentTimeMillis();
            logger.info(""String_Node_Str"" + scriptURI + ""String_Node_Str""+ (time2 - time1)+ ""String_Node_Str"");
          }
        }
        baseLineNumber=1;
      }
      Context ctx=Executor.createContext(this.getDocumentURL(),bcontext);
      try {
        Scriptable scope=(Scriptable)doc.getUserData(Executor.SCOPE_KEY);
        if (scope != null) {
          long time1=liflag ? System.currentTimeMillis() : 0;
          if (text != null) {
            ctx.evaluateString(scope,text,scriptURI,baseLineNumber,null);
            if (liflag) {
              long time2=System.currentTimeMillis();
              logger.info(""String_Node_Str"" + (time2 - time1) + ""String_Node_Str"");
            }
          }
 else {
            logger.severe(""String_Node_Str"" + scriptURI);
          }
        }
 else {
          logger.severe(""String_Node_Str"");
        }
      }
 catch (      EcmaError ecmaError) {
        logger.log(Level.WARNING,""String_Node_Str"" + ecmaError.sourceName() + ""String_Node_Str""+ ecmaError.columnNumber()+ ""String_Node_Str""+ ecmaError.getMessage(),ecmaError);
      }
catch (      MissingResourceException err) {
        logger.log(Level.WARNING,""String_Node_Str"");
      }
catch (      Exception err) {
        logger.severe(""String_Node_Str"" + scriptURI);
        logger.log(Level.WARNING,""String_Node_Str"",err);
      }
 finally {
        Context.exit();
      }
    }
  }
 else {
    logger.severe(""String_Node_Str"");
  }
}"
60186,"/** 
 * Process script.
 */
protected final void processScript(){
  UserAgentContext bcontext=this.getUserAgentContext();
  if (bcontext == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (bcontext.isScriptingEnabled()) {
    String text;
    final String scriptURI;
    int baseLineNumber;
    String src=this.getSrc();
    Document doc=this.document;
    if (!(doc instanceof HTMLDocumentImpl)) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    boolean liflag=loggableInfo;
    if (src == null) {
      text=this.getText();
      scriptURI=doc.getBaseURI();
      baseLineNumber=1;
    }
 else {
      this.informExternalScriptLoading();
      URL scriptURL=((HTMLDocumentImpl)doc).getFullURL(src);
      scriptURI=scriptURL == null ? src : scriptURL.toExternalForm();
      long time1=liflag ? System.currentTimeMillis() : 0;
      try {
        final HttpRequest request=bcontext.createHttpRequest();
        SecurityManager sm=System.getSecurityManager();
        if (sm == null) {
          try {
            request.open(""String_Node_Str"",scriptURI,false);
            request.send(null);
          }
 catch (          IOException thrown) {
            logger.log(Level.WARNING,""String_Node_Str"",thrown);
          }
        }
 else {
          AccessController.doPrivileged(new PrivilegedAction<Object>(){
            @Override public Object run(){
              try {
                request.open(""String_Node_Str"",scriptURI,false);
                request.send(null);
              }
 catch (              IOException thrown) {
                logger.log(Level.WARNING,""String_Node_Str"",thrown);
              }
              return null;
            }
          }
);
        }
        int status=request.getStatus();
        if ((status != 200) && (status != 0)) {
          this.warn(""String_Node_Str"" + scriptURI + ""String_Node_Str""+ status+ ""String_Node_Str"");
          return;
        }
        text=request.getResponseText();
      }
  finally {
        if (liflag) {
          long time2=System.currentTimeMillis();
          logger.info(""String_Node_Str"" + scriptURI + ""String_Node_Str""+ (time2 - time1)+ ""String_Node_Str"");
        }
      }
      baseLineNumber=1;
    }
    Context ctx=Executor.createContext(this.getDocumentURL(),bcontext);
    try {
      Scriptable scope=(Scriptable)doc.getUserData(Executor.SCOPE_KEY);
      if (scope == null) {
        throw new IllegalStateException(""String_Node_Str"" + Executor.SCOPE_KEY);
      }
      try {
        long time1=liflag ? System.currentTimeMillis() : 0;
        if (text == null) {
          throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str"");
        }
        ctx.evaluateString(scope,text,scriptURI,baseLineNumber,null);
        if (liflag) {
          long time2=System.currentTimeMillis();
          logger.info(""String_Node_Str"" + (time2 - time1) + ""String_Node_Str"");
        }
      }
 catch (      EcmaError ecmaError) {
        logger.log(Level.WARNING,""String_Node_Str"" + ecmaError.sourceName() + ""String_Node_Str""+ ecmaError.columnNumber()+ ""String_Node_Str""+ ecmaError.getMessage(),ecmaError);
      }
catch (      MissingResourceException err) {
        logger.log(Level.WARNING,""String_Node_Str"");
      }
catch (      Throwable err) {
        logger.log(Level.WARNING,""String_Node_Str"",err);
      }
    }
  finally {
      Context.exit();
    }
  }
}","/** 
 * Process script.
 */
protected final void processScript(){
  UserAgentContext bcontext=this.getUserAgentContext();
  if (bcontext == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (bcontext.isScriptingEnabled()) {
    String text;
    final String scriptURI;
    int baseLineNumber;
    String src=this.getSrc();
    Document doc=this.document;
    if (!(doc instanceof HTMLDocumentImpl)) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    boolean liflag=loggableInfo;
    if (src == null) {
      text=this.getText();
      scriptURI=doc.getBaseURI();
      baseLineNumber=1;
    }
 else {
      this.informExternalScriptLoading();
      URL scriptURL=((HTMLDocumentImpl)doc).getFullURL(src);
      scriptURI=scriptURL == null ? src : scriptURL.toExternalForm();
      long time1=liflag ? System.currentTimeMillis() : 0;
      try {
        final HttpRequest request=bcontext.createHttpRequest();
        SecurityManager sm=System.getSecurityManager();
        if (sm == null) {
          try {
            request.open(""String_Node_Str"",scriptURI,false);
            request.send(null);
          }
 catch (          IOException thrown) {
            logger.log(Level.WARNING,""String_Node_Str"",thrown);
          }
        }
 else {
          AccessController.doPrivileged(new PrivilegedAction<Object>(){
            @Override public Object run(){
              try {
                request.open(""String_Node_Str"",scriptURI,false);
                request.send(null);
              }
 catch (              IOException thrown) {
                logger.log(Level.WARNING,""String_Node_Str"",thrown);
              }
              return null;
            }
          }
);
        }
        int status=request.getStatus();
        if ((status != 200) && (status != 0)) {
          text=httpURLConnection(scriptURI);
        }
 else {
          text=request.getResponseText();
        }
      }
  finally {
        if (liflag) {
          long time2=System.currentTimeMillis();
          logger.info(""String_Node_Str"" + scriptURI + ""String_Node_Str""+ (time2 - time1)+ ""String_Node_Str"");
        }
      }
      baseLineNumber=1;
    }
    Context ctx=Executor.createContext(this.getDocumentURL(),bcontext);
    try {
      Scriptable scope=(Scriptable)doc.getUserData(Executor.SCOPE_KEY);
      if (scope == null) {
        throw new IllegalStateException(""String_Node_Str"" + Executor.SCOPE_KEY);
      }
      try {
        long time1=liflag ? System.currentTimeMillis() : 0;
        if (text == null) {
          throw new IllegalStateException(""String_Node_Str"" + this + ""String_Node_Str"");
        }
        ctx.evaluateString(scope,text,scriptURI,baseLineNumber,null);
        if (liflag) {
          long time2=System.currentTimeMillis();
          logger.info(""String_Node_Str"" + (time2 - time1) + ""String_Node_Str"");
        }
      }
 catch (      EcmaError ecmaError) {
        logger.log(Level.WARNING,""String_Node_Str"" + ecmaError.sourceName() + ""String_Node_Str""+ ecmaError.columnNumber()+ ""String_Node_Str""+ ecmaError.getMessage(),ecmaError);
      }
catch (      MissingResourceException err) {
        logger.log(Level.WARNING,""String_Node_Str"");
      }
catch (      Throwable err) {
        logger.log(Level.WARNING,""String_Node_Str"",err);
      }
    }
  finally {
      Context.exit();
    }
  }
}"
60187,"@Override public Object get(String name,Scriptable start){
  PropertyInfo pinfo=this.classWrapper.getProperty(name);
  if (pinfo != null) {
    Method getter=pinfo.getGetter();
    if (getter == null) {
      throw new EvaluatorException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
    try {
      Object javaObject=this.getJavaObject();
      if (javaObject == null) {
        throw new IllegalStateException(""String_Node_Str"" + this.classWrapper + ""String_Node_Str"");
      }
      Object val=getter.invoke(javaObject,(Object[])null);
      return JavaScript.getInstance().getJavascriptObject(val,start.getParentScope());
    }
 catch (    Exception err) {
      throw new WrappedException(err);
    }
  }
 else {
    Function f=this.classWrapper.getFunction(name);
    if (f != null) {
      return f;
    }
 else {
      Object result=super.get(name,start);
      if (result != Scriptable.NOT_FOUND) {
        return result;
      }
      PropertyInfo ni=this.classWrapper.getNameIndexer();
      if (ni != null) {
        Method getter=ni.getGetter();
        if (getter != null) {
          Object javaObject=this.getJavaObject();
          if (javaObject == null) {
            throw new IllegalStateException(""String_Node_Str"" + this.classWrapper + ""String_Node_Str"");
          }
          try {
            Object val=getter.invoke(javaObject,new Object[]{name});
            if (val == null) {
              return super.get(name,start);
            }
 else {
              return JavaScript.getInstance().getJavascriptObject(val,start.getParentScope());
            }
          }
 catch (          Exception err) {
            throw new WrappedException(err);
          }
        }
      }
      return Scriptable.NOT_FOUND;
    }
  }
}","@Override public Object get(String name,Scriptable start){
  PropertyInfo pinfo=this.classWrapper.getProperty(name);
  if (pinfo != null) {
    Method getter=pinfo.getGetter();
    if (getter == null) {
      throw new EvaluatorException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
    try {
      Object javaObject=this.getJavaObject();
      if (javaObject == null) {
        throw new IllegalStateException(""String_Node_Str"" + this.classWrapper + ""String_Node_Str"");
      }
      Object val=getter.invoke(javaObject,(Object[])null);
      return JavaScript.getInstance().getJavascriptObject(val,start.getParentScope());
    }
 catch (    Exception err) {
      err.printStackTrace();
      return new Object();
    }
  }
 else {
    Function f=this.classWrapper.getFunction(name);
    if (f != null) {
      return f;
    }
 else {
      Object result=super.get(name,start);
      if (result != Scriptable.NOT_FOUND) {
        return result;
      }
      PropertyInfo ni=this.classWrapper.getNameIndexer();
      if (ni != null) {
        Method getter=ni.getGetter();
        if (getter != null) {
          Object javaObject=this.getJavaObject();
          if (javaObject == null) {
            throw new IllegalStateException(""String_Node_Str"" + this.classWrapper + ""String_Node_Str"");
          }
          try {
            Object val=getter.invoke(javaObject,new Object[]{name});
            if (val == null) {
              return super.get(name,start);
            }
 else {
              return JavaScript.getInstance().getJavascriptObject(val,start.getParentScope());
            }
          }
 catch (          Exception err) {
            throw new WrappedException(err);
          }
        }
      }
      return Scriptable.NOT_FOUND;
    }
  }
}"
60188,"/** 
 * Gets the actual response object.
 * @param context the context
 * @param clazz the clazz
 * @param tentative the tentative
 * @return the actual response object
 * @throws ClientletException the clientlet exception
 * @throws IllegalAccessException the illegal access exception
 * @throws InvocationTargetException the invocation target exception
 * @throws NoSuchMethodException the no such method exception
 */
private static ResponseObject getActualResponseObject(ClientletContext context,Class<? extends Object> clazz,Object tentative) throws ClientletException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {
  ClientletStageDelegate csd=new ClientletStageDelegate(context);
synchronized (STAGE_DELEGATE_MONITOR) {
    Stage.$appletDelegate.set(csd);
    Stage.$stages.setDefault();
    try {
      for (int level=0; level < 3; level++) {
        if (logger.isLoggable(Level.INFO)) {
          logger.info(""String_Node_Str"" + level + ""String_Node_Str""+ clazz);
        }
        if (tentative instanceof Stage) {
          Stage stage=(Stage)tentative;
          csd.get$stage().setFromLiteral(stage);
          csd.initialize$();
          return new ResponseObject(csd.createComponent(),stage.get$title().get(),stage);
        }
 else         if ((tentative instanceof Scene) || (tentative instanceof Node)) {
          break;
        }
 else         if (tentative instanceof FXObject) {
          Method runMethod=clazz.getMethod(Entry.entryMethodName(),new Class[]{Sequence.class});
          if (runMethod == null) {
            throw new ClientletException(""String_Node_Str"");
          }
          Sequence<String> sequence=Sequences.emptySequence(String.class);
          tentative=runMethod.invoke(tentative,new Object[]{sequence});
          if (tentative == null) {
            tentative=new javax.swing.JPanel();
            break;
          }
          clazz=tentative.getClass();
        }
 else {
          break;
        }
      }
    }
  finally {
      Stage.$appletDelegate.set(null);
    }
  }
  return new ResponseObject(tentative,null,null);
}","/** 
 * Gets the actual response object.
 * @param context the context
 * @param clazz the clazz
 * @param tentative the tentative
 * @return the actual response object
 * @throws ClientletException the clientlet exception
 * @throws IllegalAccessException the illegal access exception
 * @throws InvocationTargetException the invocation target exception
 * @throws NoSuchMethodException the no such method exception
 */
private static ResponseObject getActualResponseObject(ClientletContext context,Class<? extends Object> clazz,Object tentative) throws ClientletException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {
  ClientletStageDelegate csd=new ClientletStageDelegate(context);
synchronized (STAGE_DELEGATE_MONITOR) {
    try {
      for (int level=0; level < 3; level++) {
        if (logger.isLoggable(Level.INFO)) {
          logger.info(""String_Node_Str"" + level + ""String_Node_Str""+ clazz);
        }
        if (tentative instanceof Stage) {
          Stage stage=(Stage)tentative;
          csd.get$stage().setFromLiteral(csd.$stage.get());
          csd.initialize$();
          return new ResponseObject(csd.createComponent(),stage.getTitle(),stage);
        }
 else         if ((tentative instanceof Scene) || (tentative instanceof Node)) {
          break;
        }
 else         if (tentative instanceof FXObject) {
          Method runMethod=clazz.getMethod(Entry.entryMethodName(),new Class[]{Sequence.class});
          if (runMethod == null) {
            throw new ClientletException(""String_Node_Str"");
          }
          Sequence<String> sequence=Sequences.emptySequence(String.class);
          tentative=runMethod.invoke(tentative,new Object[]{sequence});
          if (tentative == null) {
            tentative=new javax.swing.JPanel();
            break;
          }
          clazz=tentative.getClass();
        }
 else {
          break;
        }
      }
    }
  finally {
      csd.$stage.set(null);
    }
  }
  return new ResponseObject(tentative,null,null);
}"
60189,"/** 
 * Instantiates a new img control.
 * @param modelNode the model node
 * @throws IOException
 */
public ImgControl(HTMLImageElementImpl modelNode){
  super(modelNode);
  align=modelNode.getAlign();
  alt=modelNode.getAlt() != null ? modelNode.getAlt() : ""String_Node_Str"";
  modelNode.addImageListener(this);
  this.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      mouseBeingPressed=true;
      repaint();
    }
    @Override public void mouseReleased(    MouseEvent e){
      mouseBeingPressed=false;
      repaint();
      HtmlController.getInstance().onPressed(modelNode,e,e.getX(),e.getY());
    }
  }
);
  try {
    URL url=new URL(modelNode.getSrc());
    image=ImageIO.read(url);
    if (modelNode.getHeight() > 0) {
      imageHeight=modelNode.getHeight();
    }
 else {
      imageHeight=image.getHeight(this);
    }
    if (modelNode.getWidth() > 0) {
      imageWidth=modelNode.getWidth();
    }
 else {
      imageWidth=image.getWidth(this);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","/** 
 * Instantiates a new img control.
 * @param modelNode the model node
 * @throws IOException
 */
public ImgControl(HTMLImageElementImpl modelNode){
  super(modelNode);
  align=modelNode.getAlign();
  alt=modelNode.getAlt() != null ? modelNode.getAlt() : ""String_Node_Str"";
  modelNode.addImageListener(this);
  this.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      mouseBeingPressed=true;
      repaint();
    }
    @Override public void mouseReleased(    MouseEvent e){
      mouseBeingPressed=false;
      repaint();
      HtmlController.getInstance().onPressed(modelNode,e,e.getX(),e.getY());
    }
  }
);
  if (modelNode.getHeight() > 0) {
    imageHeight=modelNode.getHeight();
  }
 else {
    imageHeight=image.getHeight(this);
  }
  if (modelNode.getWidth() > 0) {
    imageWidth=modelNode.getWidth();
  }
 else {
    imageWidth=image.getWidth(this);
  }
}"
60190,"/** 
 * Instantiates a new back action.
 * @param componentSource the component source
 * @param window the window
 */
public BackAction(ComponentSource componentSource,NavigatorWindow window,ActionPool action){
  this.window=window;
  this.action=action;
}","/** 
 * Instantiates a new back action.
 * @param componentSource the component source
 * @param window the window
 * @param action the action
 */
public BackAction(ComponentSource componentSource,NavigatorWindow window,ActionPool action){
  this.window=window;
  this.action=action;
}"
60191,"/** 
 * Instantiates a new back more action.
 * @param componentSource the component source
 * @param window the window
 */
public BackMoreAction(ComponentSource componentSource,NavigatorWindow window,ActionPool action){
  this.action=action;
  this.window=window;
}","/** 
 * Instantiates a new back more action.
 * @param componentSource the component source
 * @param window the window
 * @param action the action
 */
public BackMoreAction(ComponentSource componentSource,NavigatorWindow window,ActionPool action){
  this.action=action;
  this.window=window;
}"
60192,"/** 
 * Creates a new instance of EndsWith 
 */
public Abs(){
  super(""String_Node_Str"",1);
}","/** 
 * Creates a new instance of EndsWith.
 */
public Abs(){
  super(""String_Node_Str"",1);
}"
60193,"protected String getStringParam(Object o) throws XPathFunctionException {
  String output=null;
  if (o instanceof String)   output=(String)o;
 else   if (o instanceof Boolean)   output=o.toString();
 else   if (o instanceof Double)   output=o.toString();
 else   if (o instanceof NodeList) {
    NodeList list=(NodeList)o;
    Node node=list.item(0);
    output=node.getTextContent();
  }
 else {
    throw new XPathFunctionException(""String_Node_Str"");
  }
  return output;
}","/** 
 * Gets the string param.
 * @param o the o
 * @return the string param
 * @throws XPathFunctionException the x path function exception
 */
protected String getStringParam(Object o) throws XPathFunctionException {
  String output=null;
  if (o instanceof String)   output=(String)o;
 else   if (o instanceof Boolean)   output=o.toString();
 else   if (o instanceof Double)   output=o.toString();
 else   if (o instanceof NodeList) {
    NodeList list=(NodeList)o;
    Node node=list.item(0);
    output=node.getTextContent();
  }
 else {
    throw new XPathFunctionException(""String_Node_Str"");
  }
  return output;
}"
60194,"public final String getName(){
  return name;
}","/** 
 * Gets the name.
 * @return the name
 */
public final String getName(){
  return name;
}"
60195,"protected AbstractFunction(String name,int arity){
  if (name == null) {
    throw new NullPointerException();
  }
  if (arity < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.arity=arity;
  this.name=name;
}","/** 
 * Instantiates a new abstract function.
 * @param name the name
 * @param arity the arity
 */
protected AbstractFunction(String name,int arity){
  if (name == null) {
    throw new NullPointerException();
  }
  if (arity < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.arity=arity;
  this.name=name;
}"
60196,"protected Number getNumberParam(Object o) throws XPathFunctionException {
  Number output=null;
  try {
    if (o instanceof String)     output=Double.parseDouble((String)o);
 else     if (o instanceof Double)     output=(Double)o;
 else     if (o instanceof NodeList) {
      NodeList list=(NodeList)o;
      Node node=list.item(0);
      output=Double.parseDouble(node.getTextContent());
    }
 else {
      throw new XPathFunctionException(""String_Node_Str"");
    }
  }
 catch (  NumberFormatException ex) {
    throw new XPathFunctionException(ex);
  }
  return output;
}","/** 
 * Gets the number param.
 * @param o the o
 * @return the number param
 * @throws XPathFunctionException the x path function exception
 */
protected Number getNumberParam(Object o) throws XPathFunctionException {
  Number output=null;
  try {
    if (o instanceof String)     output=Double.parseDouble((String)o);
 else     if (o instanceof Double)     output=(Double)o;
 else     if (o instanceof NodeList) {
      NodeList list=(NodeList)o;
      Node node=list.item(0);
      output=Double.parseDouble(node.getTextContent());
    }
 else {
      throw new XPathFunctionException(""String_Node_Str"");
    }
  }
 catch (  NumberFormatException ex) {
    throw new XPathFunctionException(ex);
  }
  return output;
}"
60197,"public final int getArity(){
  return arity;
}","/** 
 * Gets the arity.
 * @return the arity
 */
public final int getArity(){
  return arity;
}"
60198,"/** 
 * Creates a new instance of EndsWith 
 */
public EndsWith(){
  super(""String_Node_Str"",2);
}","/** 
 * Creates a new instance of EndsWith.
 */
public EndsWith(){
  super(""String_Node_Str"",2);
}"
60199,"/** 
 * Creates a new instance of EndsWith 
 */
public EqualsIgnoreCase(){
  super(""String_Node_Str"",2);
}","/** 
 * Creates a new instance of EndsWith.
 */
public EqualsIgnoreCase(){
  super(""String_Node_Str"",2);
}"
60200,"/** 
 * Creates a new instance of EndsWith 
 */
public EscapeUri(){
  super(""String_Node_Str"",2);
}","/** 
 * Creates a new instance of EndsWith.
 */
public EscapeUri(){
  super(""String_Node_Str"",2);
}"
60201,"/** 
 * Creates a new instance of EndsWith 
 */
public LowerCase(){
  super(""String_Node_Str"",1);
}","/** 
 * Creates a new instance of EndsWith.
 */
public LowerCase(){
  super(""String_Node_Str"",1);
}"
60202,"/** 
 * Creates a new instance of EndsWith 
 */
public Matches(){
  super(""String_Node_Str"",2);
}","/** 
 * Creates a new instance of EndsWith.
 */
public Matches(){
  super(""String_Node_Str"",2);
}"
60203,"/** 
 * Creates a new instance of EndsWith 
 */
public Replace(){
  super(""String_Node_Str"",3);
}","/** 
 * Creates a new instance of EndsWith.
 */
public Replace(){
  super(""String_Node_Str"",3);
}"
60204,"@Override public void updateEnabling(){
  this.setEnabled(window.canBack());
}","@Override public void updateEnabling(){
  action.setEnabled(window.canBack());
}"
60205,"/** 
 * Instantiates a new back action.
 * @param componentSource the component source
 * @param window the window
 */
public BackAction(ComponentSource componentSource,NavigatorWindow window){
  super(componentSource,window);
  this.window=window;
}","/** 
 * Instantiates a new back action.
 * @param componentSource the component source
 * @param window the window
 */
public BackAction(ComponentSource componentSource,NavigatorWindow window,ActionPool action){
  this.window=window;
  this.action=action;
}"
60206,"/** 
 * Instantiates a new back more action.
 * @param componentSource the component source
 * @param window the window
 */
public BackMoreAction(ComponentSource componentSource,NavigatorWindow window){
  super(componentSource,window);
  this.window=window;
}","/** 
 * Instantiates a new back more action.
 * @param componentSource the component source
 * @param window the window
 */
public BackMoreAction(ComponentSource componentSource,NavigatorWindow window,ActionPool action){
  this.action=action;
  this.window=window;
}"
60207,"@Override public void updateEnabling(){
  this.setEnabled(window.canBack());
}","@Override public void updateEnabling(){
  action.setEnabled(window.canBack());
}"
60208,"@Override public void updateEnabling(){
  NavigationEntry entry=window.getCurrentNavigationEntry();
  this.setEnabled(entry != null && entry.getMethod().equals(""String_Node_Str""));
}","@Override public void updateEnabling(){
  NavigationEntry entry=window.getCurrentNavigationEntry();
  action.setEnabled(entry != null && entry.getMethod().equals(""String_Node_Str""));
}"
60209,"/** 
 * Instantiates a new cloned window action.
 * @param componentSource the component source
 * @param window the window
 */
public ClonedWindowAction(ComponentSource componentSource,NavigatorWindow window){
  super(componentSource,window);
  this.window=window;
}","/** 
 * Instantiates a new cloned window action.
 * @param componentSource the component source
 * @param window the window
 */
public ClonedWindowAction(ComponentSource componentSource,NavigatorWindow window,ActionPool action){
  this.action=action;
  this.window=window;
}"
60210,"/** 
 * Instantiates a new copy action.
 * @param componentSource the component source
 * @param window the window
 */
public CopyAction(ComponentSource componentSource,NavigatorWindow window){
  super(componentSource,window);
  this.window=window;
}","/** 
 * Instantiates a new copy action.
 * @param componentSource the component source
 * @param window the window
 */
public CopyAction(ComponentSource componentSource,NavigatorWindow window,ActionPool action){
  this.action=action;
  this.window=window;
}"
60211,"@Override public void updateEnabling(){
  this.setEnabled(window.canCopy());
}","@Override public void updateEnabling(){
  action.setEnabled(window.canCopy());
}"
60212,"/** 
 * Instantiates a new forward action.
 * @param componentSource the component source
 * @param window the window
 */
public ForwardAction(ComponentSource componentSource,NavigatorWindow window){
  super(componentSource,window);
  this.window=window;
}","/** 
 * Instantiates a new forward action.
 * @param componentSource the component source
 * @param window the window
 */
public ForwardAction(ComponentSource componentSource,NavigatorWindow window,ActionPool action){
  this.window=window;
  this.action=action;
}"
60213,"@Override public void updateEnabling(){
  this.setEnabled(window.canForward());
}","@Override public void updateEnabling(){
  action.setEnabled(window.canForward());
}"
60214,"/** 
 * Pre paint.
 * @param g the g
 */
protected void prePaint(java.awt.Graphics g){
  int startWidth=getWidthElement();
  int startHeight=getHeightElement();
  int totalWidth=startWidth;
  int totalHeight=startHeight;
  int startX=getStartX();
  int startY=getStartY();
  ModelNode node=this.modelNode;
  RenderState rs=node.getRenderState();
  Insets marginInsets=this.marginInsets;
  if (marginInsets != null) {
    totalWidth-=(marginInsets.left + marginInsets.right);
    totalHeight-=(marginInsets.top + marginInsets.bottom);
    startX+=marginInsets.left;
    startY+=marginInsets.top;
  }
  Insets borderInsets=this.borderInsets;
  if (borderInsets != null) {
    int btop=borderInsets.top;
    int bleft=borderInsets.left;
    int bright=borderInsets.right;
    int bbottom=borderInsets.bottom;
    int newTotalWidth=totalWidth - (bleft + bright);
    int newTotalHeight=totalHeight - (btop + bbottom);
    int newStartX=startX + bleft;
    int newStartY=startY + btop;
    Rectangle clientRegion=new Rectangle(newStartX,newStartY,newTotalWidth,newTotalHeight);
    Rectangle clipBounds=g.getClipBounds();
    if (!clientRegion.contains(clipBounds)) {
      BorderInfo borderInfo=this.borderInfo;
      if (btop > 0) {
        g.setColor(this.getBorderTopColor());
        int borderStyle=borderInfo == null ? HtmlValues.BORDER_STYLE_SOLID : borderInfo.topStyle;
        for (int i=0; i < btop; i++) {
          int leftOffset=(i * bleft) / btop;
          int rightOffset=(i * bright) / btop;
          if (borderStyle == HtmlValues.BORDER_STYLE_DASHED) {
            GUITasks.drawDashed(g,startX + leftOffset,startY + i,startX + totalWidth - rightOffset - 1,startY + i,10 + btop,6);
          }
 else {
            g.drawLine(startX + leftOffset,startY + i,startX + totalWidth - rightOffset - 1,startY + i);
          }
        }
      }
      if (bright > 0) {
        int borderStyle=borderInfo == null ? HtmlValues.BORDER_STYLE_SOLID : borderInfo.rightStyle;
        g.setColor(this.getBorderRightColor());
        int lastX=startX + totalWidth - 1;
        for (int i=0; i < bright; i++) {
          int topOffset=(i * btop) / bright;
          int bottomOffset=(i * bbottom) / bright;
          if (borderStyle == HtmlValues.BORDER_STYLE_DASHED) {
            GUITasks.drawDashed(g,lastX - i,startY + topOffset,lastX - i,startY + totalHeight - bottomOffset - 1,10 + bright,6);
          }
 else {
            g.drawLine(lastX - i,startY + topOffset,lastX - i,startY + totalHeight - bottomOffset - 1);
          }
        }
      }
      if (bbottom > 0) {
        int borderStyle=borderInfo == null ? HtmlValues.BORDER_STYLE_SOLID : borderInfo.bottomStyle;
        g.setColor(this.getBorderBottomColor());
        int lastY=startY + totalHeight - 1;
        for (int i=0; i < bbottom; i++) {
          int leftOffset=(i * bleft) / bbottom;
          int rightOffset=(i * bright) / bbottom;
          if (borderStyle == HtmlValues.BORDER_STYLE_DASHED) {
            GUITasks.drawDashed(g,startX + leftOffset,lastY - i,startX + totalWidth - rightOffset - 1,lastY - i,10 + bbottom,6);
          }
 else {
            g.drawLine(startX + leftOffset,lastY - i,startX + totalWidth - rightOffset - 1,lastY - i);
          }
        }
      }
      if (bleft > 0) {
        int borderStyle=borderInfo == null ? HtmlValues.BORDER_STYLE_SOLID : borderInfo.leftStyle;
        g.setColor(this.getBorderLeftColor());
        for (int i=0; i < bleft; i++) {
          int topOffset=(i * btop) / bleft;
          int bottomOffset=(i * bbottom) / bleft;
          if (borderStyle == HtmlValues.BORDER_STYLE_DASHED) {
            GUITasks.drawDashed(g,startX + i,startY + topOffset,startX + i,startY + totalHeight - bottomOffset - 1,10 + bleft,6);
          }
 else {
            g.drawLine(startX + i,startY + topOffset,startX + i,startY + totalHeight - bottomOffset - 1);
          }
        }
      }
    }
    totalWidth=newTotalWidth;
    totalHeight=newTotalHeight;
    startX=newStartX;
    startY=newStartY;
  }
  Graphics clientG=g.create(startX,startY,totalWidth,totalHeight);
  try {
    Rectangle bkgBounds=null;
    if (node != null) {
      Color bkg=this.backgroundColor;
      if (bkg != null && bkg.getAlpha() > 0) {
        clientG.setColor(bkg);
        bkgBounds=clientG.getClipBounds();
        clientG.fillRect(bkgBounds.x,bkgBounds.y,bkgBounds.width,bkgBounds.height);
      }
      BackgroundInfo binfo=rs == null ? null : rs.getBackgroundInfo();
      Image image=this.backgroundImage;
      if (image != null) {
        if (bkgBounds == null) {
          bkgBounds=clientG.getClipBounds();
        }
        int w=image.getWidth(this);
        int h=image.getHeight(this);
        if (w != -1 && h != -1) {
switch (binfo == null ? BackgroundInfo.BR_REPEAT : binfo.backgroundRepeat) {
case BackgroundInfo.BR_NO_REPEAT:
{
              int imageX;
              if (binfo.backgroundXPositionAbsolute) {
                imageX=binfo.backgroundXPosition;
              }
 else {
                imageX=(binfo.backgroundXPosition * (totalWidth - w)) / 100;
              }
              int imageY;
              if (binfo.backgroundYPositionAbsolute) {
                imageY=binfo.backgroundYPosition;
              }
 else {
                imageY=(binfo.backgroundYPosition * (totalHeight - h)) / 100;
              }
              clientG.drawImage(image,imageX,imageY,w,h,this);
              break;
            }
case BackgroundInfo.BR_REPEAT_X:
{
            int imageY;
            if (binfo.backgroundYPositionAbsolute) {
              imageY=binfo.backgroundYPosition;
            }
 else {
              imageY=(binfo.backgroundYPosition * (totalHeight - h)) / 100;
            }
            int x=(bkgBounds.x / w) * w;
            int topX=bkgBounds.x + bkgBounds.width;
            for (; x < topX; x+=w) {
              clientG.drawImage(image,x,imageY,w,h,this);
            }
            break;
          }
case BackgroundInfo.BR_REPEAT_Y:
{
          int imageX;
          if (binfo.backgroundXPositionAbsolute) {
            imageX=binfo.backgroundXPosition;
          }
 else {
            imageX=(binfo.backgroundXPosition * (totalWidth - w)) / 100;
          }
          int y=(bkgBounds.y / h) * h;
          int topY=bkgBounds.y + bkgBounds.height;
          for (; y < topY; y+=h) {
            clientG.drawImage(image,imageX,y,w,h,this);
          }
          break;
        }
default :
{
        int baseX=(bkgBounds.x / w) * w;
        int baseY=(bkgBounds.y / h) * h;
        int topX=bkgBounds.x + bkgBounds.width;
        int topY=bkgBounds.y + bkgBounds.height;
        for (int x=baseX; x < topX; x+=w) {
          for (int y=baseY; y < topY; y+=h) {
            clientG.drawImage(image,x,y,w,h,this);
          }
        }
        break;
      }
  }
}
}
}
}
  finally {
clientG.dispose();
}
}","/** 
 * Pre paint.
 * @param g the g
 */
protected void prePaint(java.awt.Graphics g){
  int startWidth=getWidthElement();
  int startHeight=getHeightElement();
  int totalWidth=startWidth;
  int totalHeight=startHeight;
  int startX=getStartX();
  int startY=getStartY();
  ModelNode node=this.modelNode;
  RenderState rs=node.getRenderState();
  Insets marginInsets=this.marginInsets;
  if (marginInsets != null) {
    totalWidth-=(marginInsets.left + marginInsets.right);
    totalHeight-=(marginInsets.top + marginInsets.bottom);
    startX+=marginInsets.left;
    startY+=marginInsets.top;
  }
  Insets borderInsets=this.borderInsets;
  if (borderInsets != null) {
    int btop=borderInsets.top;
    int bleft=borderInsets.left;
    int bright=borderInsets.right;
    int bbottom=borderInsets.bottom;
    int newTotalWidth=totalWidth - (bleft + bright);
    int newTotalHeight=totalHeight - (btop + bbottom);
    int newStartX=startX + bleft;
    int newStartY=startY + btop;
    Rectangle clientRegion=new Rectangle(newStartX,newStartY,newTotalWidth,newTotalHeight);
    Rectangle clipBounds=g.getClipBounds();
    if (!clientRegion.contains(clipBounds)) {
      BorderInfo borderInfo=this.borderInfo;
      if (btop > 0) {
        g.setColor(this.getBorderTopColor());
        int borderStyle=borderInfo == null ? HtmlValues.BORDER_STYLE_SOLID : borderInfo.getTopStyle();
        for (int i=0; i < btop; i++) {
          int leftOffset=(i * bleft) / btop;
          int rightOffset=(i * bright) / btop;
          if (borderStyle == HtmlValues.BORDER_STYLE_DASHED) {
            GUITasks.drawDashed(g,startX + leftOffset,startY + i,startX + totalWidth - rightOffset - 1,startY + i,10 + btop,6);
          }
 else {
            g.drawLine(startX + leftOffset,startY + i,startX + totalWidth - rightOffset - 1,startY + i);
          }
        }
      }
      if (bright > 0) {
        int borderStyle=borderInfo == null ? HtmlValues.BORDER_STYLE_SOLID : borderInfo.getRightStyle();
        g.setColor(this.getBorderRightColor());
        int lastX=startX + totalWidth - 1;
        for (int i=0; i < bright; i++) {
          int topOffset=(i * btop) / bright;
          int bottomOffset=(i * bbottom) / bright;
          if (borderStyle == HtmlValues.BORDER_STYLE_DASHED) {
            GUITasks.drawDashed(g,lastX - i,startY + topOffset,lastX - i,startY + totalHeight - bottomOffset - 1,10 + bright,6);
          }
 else {
            g.drawLine(lastX - i,startY + topOffset,lastX - i,startY + totalHeight - bottomOffset - 1);
          }
        }
      }
      if (bbottom > 0) {
        int borderStyle=borderInfo == null ? HtmlValues.BORDER_STYLE_SOLID : borderInfo.getBottomStyle();
        g.setColor(this.getBorderBottomColor());
        int lastY=startY + totalHeight - 1;
        for (int i=0; i < bbottom; i++) {
          int leftOffset=(i * bleft) / bbottom;
          int rightOffset=(i * bright) / bbottom;
          if (borderStyle == HtmlValues.BORDER_STYLE_DASHED) {
            GUITasks.drawDashed(g,startX + leftOffset,lastY - i,startX + totalWidth - rightOffset - 1,lastY - i,10 + bbottom,6);
          }
 else {
            g.drawLine(startX + leftOffset,lastY - i,startX + totalWidth - rightOffset - 1,lastY - i);
          }
        }
      }
      if (bleft > 0) {
        int borderStyle=borderInfo == null ? HtmlValues.BORDER_STYLE_SOLID : borderInfo.getLeftStyle();
        g.setColor(this.getBorderLeftColor());
        for (int i=0; i < bleft; i++) {
          int topOffset=(i * btop) / bleft;
          int bottomOffset=(i * bbottom) / bleft;
          if (borderStyle == HtmlValues.BORDER_STYLE_DASHED) {
            GUITasks.drawDashed(g,startX + i,startY + topOffset,startX + i,startY + totalHeight - bottomOffset - 1,10 + bleft,6);
          }
 else {
            g.drawLine(startX + i,startY + topOffset,startX + i,startY + totalHeight - bottomOffset - 1);
          }
        }
      }
    }
    totalWidth=newTotalWidth;
    totalHeight=newTotalHeight;
    startX=newStartX;
    startY=newStartY;
  }
  Graphics clientG=g.create(startX,startY,totalWidth,totalHeight);
  try {
    Rectangle bkgBounds=null;
    if (node != null) {
      Color bkg=this.backgroundColor;
      if (bkg != null && bkg.getAlpha() > 0) {
        clientG.setColor(bkg);
        bkgBounds=clientG.getClipBounds();
        clientG.fillRect(bkgBounds.x,bkgBounds.y,bkgBounds.width,bkgBounds.height);
      }
      BackgroundInfo binfo=rs == null ? null : rs.getBackgroundInfo();
      Image image=this.backgroundImage;
      if (image != null) {
        if (bkgBounds == null) {
          bkgBounds=clientG.getClipBounds();
        }
        int w=image.getWidth(this);
        int h=image.getHeight(this);
        if (w != -1 && h != -1) {
switch (binfo == null ? BackgroundInfo.BR_REPEAT : binfo.backgroundRepeat) {
case BackgroundInfo.BR_NO_REPEAT:
{
              int imageX;
              if (binfo.backgroundXPositionAbsolute) {
                imageX=binfo.backgroundXPosition;
              }
 else {
                imageX=(binfo.backgroundXPosition * (totalWidth - w)) / 100;
              }
              int imageY;
              if (binfo.backgroundYPositionAbsolute) {
                imageY=binfo.backgroundYPosition;
              }
 else {
                imageY=(binfo.backgroundYPosition * (totalHeight - h)) / 100;
              }
              clientG.drawImage(image,imageX,imageY,w,h,this);
              break;
            }
case BackgroundInfo.BR_REPEAT_X:
{
            int imageY;
            if (binfo.backgroundYPositionAbsolute) {
              imageY=binfo.backgroundYPosition;
            }
 else {
              imageY=(binfo.backgroundYPosition * (totalHeight - h)) / 100;
            }
            int x=(bkgBounds.x / w) * w;
            int topX=bkgBounds.x + bkgBounds.width;
            for (; x < topX; x+=w) {
              clientG.drawImage(image,x,imageY,w,h,this);
            }
            break;
          }
case BackgroundInfo.BR_REPEAT_Y:
{
          int imageX;
          if (binfo.backgroundXPositionAbsolute) {
            imageX=binfo.backgroundXPosition;
          }
 else {
            imageX=(binfo.backgroundXPosition * (totalWidth - w)) / 100;
          }
          int y=(bkgBounds.y / h) * h;
          int topY=bkgBounds.y + bkgBounds.height;
          for (; y < topY; y+=h) {
            clientG.drawImage(image,imageX,y,w,h,this);
          }
          break;
        }
default :
{
        int baseX=(bkgBounds.x / w) * w;
        int baseY=(bkgBounds.y / h) * h;
        int topX=bkgBounds.x + bkgBounds.width;
        int topY=bkgBounds.y + bkgBounds.height;
        for (int x=baseX; x < topX; x+=w) {
          for (int y=baseY; y < topY; y+=h) {
            clientG.drawImage(image,x,y,w,h,this);
          }
        }
        break;
      }
  }
}
}
}
}
  finally {
clientG.dispose();
}
}"
60215,"public void addDelayedPair(DelayedPair pair){
  Collection<DelayedPair> gc=this.delayedPairs;
  if (gc == null) {
    gc=new java.util.LinkedList();
    this.delayedPairs=gc;
  }
  gc.add(pair);
}","public void addDelayedPair(DelayedPair pair){
  Collection<DelayedPair> gc=this.delayedPairs;
  if (gc == null) {
    gc=new LinkedList();
    this.delayedPairs=gc;
  }
  gc.add(pair);
}"
60216,"/** 
 * Apply style.
 * @param availWidth the avail width
 * @param availHeight the avail height
 */
protected void applyStyle(int availWidth,int availHeight){
  Object rootNode=this.modelNode;
  HTMLElementImpl rootElement;
  boolean isRootBlock;
  if (rootNode instanceof HTMLDocumentImpl) {
    isRootBlock=true;
    HTMLDocumentImpl doc=(HTMLDocumentImpl)rootNode;
    rootElement=(HTMLElementImpl)doc.getBody();
  }
 else {
    isRootBlock=false;
    rootElement=(HTMLElementImpl)rootNode;
  }
  if (rootElement == null) {
    this.clearStyle(isRootBlock);
    return;
  }
  RenderState rs=rootElement.getRenderState();
  if (rs == null) {
    throw new IllegalStateException(""String_Node_Str"" + rootElement + ""String_Node_Str""+ rootElement.getParentNode());
  }
  BackgroundInfo binfo=rs.getBackgroundInfo();
  this.backgroundColor=binfo == null ? null : binfo.backgroundColor;
  URL backgroundImageUri=binfo == null ? null : binfo.backgroundImage;
  if (backgroundImageUri == null) {
    this.backgroundImage=null;
    this.lastBackgroundImageUri=null;
  }
 else   if (!backgroundImageUri.equals(this.lastBackgroundImageUri)) {
    this.lastBackgroundImageUri=backgroundImageUri;
    this.loadBackgroundImage(backgroundImageUri);
  }
  AbstractCSS2Properties props=rootElement.getCurrentStyle();
  if (props == null) {
    this.clearStyle(isRootBlock);
  }
 else {
    BorderInfo borderInfo=rs.getBorderInfo();
    this.borderInfo=borderInfo;
    HtmlInsets binsets=borderInfo == null ? null : borderInfo.insets;
    HtmlInsets minsets=rs.getMarginInsets();
    HtmlInsets pinsets=rs.getPaddingInsets();
    Insets defaultMarginInsets=this.defaultMarginInsets;
    int dmleft=0, dmright=0, dmtop=0, dmbottom=0;
    if (defaultMarginInsets != null) {
      dmleft=defaultMarginInsets.left;
      dmright=defaultMarginInsets.right;
      dmtop=defaultMarginInsets.top;
      dmbottom=defaultMarginInsets.bottom;
    }
    Insets defaultPaddingInsets=this.defaultPaddingInsets;
    int dpleft=0, dpright=0, dptop=0, dpbottom=0;
    if (defaultPaddingInsets != null) {
      dpleft=defaultPaddingInsets.left;
      dpright=defaultPaddingInsets.right;
      dptop=defaultPaddingInsets.top;
      dpbottom=defaultPaddingInsets.bottom;
    }
    Insets borderInsets=binsets == null ? null : binsets.getAWTInsets(0,0,0,0,availWidth,availHeight,0,0);
    if (borderInsets == null) {
      borderInsets=RBlockViewport.ZERO_INSETS;
    }
    Insets paddingInsets=pinsets == null ? defaultPaddingInsets : pinsets.getAWTInsets(dptop,dpleft,dpbottom,dpright,availWidth,availHeight,0,0);
    if (paddingInsets == null) {
      paddingInsets=RBlockViewport.ZERO_INSETS;
    }
    Insets tentativeMarginInsets=minsets == null ? defaultMarginInsets : minsets.getAWTInsets(dmtop,dmleft,dmbottom,dmright,availWidth,availHeight,0,0);
    if (tentativeMarginInsets == null) {
      tentativeMarginInsets=RBlockViewport.ZERO_INSETS;
    }
    int actualAvailWidth=availWidth - paddingInsets.left - paddingInsets.right- borderInsets.left- borderInsets.right- tentativeMarginInsets.left- tentativeMarginInsets.right;
    int actualAvailHeight=availHeight - paddingInsets.top - paddingInsets.bottom- borderInsets.top- borderInsets.bottom- tentativeMarginInsets.top- tentativeMarginInsets.bottom;
    Integer declaredWidth=this.getDeclaredWidth(rs,actualAvailWidth);
    Integer declaredHeight=this.getDeclaredHeight(rs,actualAvailHeight);
    int autoMarginX=0, autoMarginY=0;
    if (declaredWidth != null) {
      autoMarginX=(availWidth - declaredWidth.intValue() - (borderInsets == null ? 0 : borderInsets.left - borderInsets.right)- (paddingInsets == null ? 0 : paddingInsets.left - paddingInsets.right)) / 2;
    }
    if (declaredHeight != null) {
      autoMarginY=(availHeight - declaredHeight.intValue() - (borderInsets == null ? 0 : borderInsets.top - borderInsets.bottom)- (paddingInsets == null ? 0 : paddingInsets.top - paddingInsets.bottom)) / 2;
    }
    this.borderInsets=borderInsets;
    if (isRootBlock) {
      Insets regularMarginInsets=(autoMarginX == 0 && autoMarginY == 0) ? tentativeMarginInsets : (minsets == null ? defaultMarginInsets : minsets.getAWTInsets(dmtop,dmleft,dmbottom,dmright,availWidth,availHeight,autoMarginX,autoMarginY));
      if (regularMarginInsets == null) {
        regularMarginInsets=RBlockViewport.ZERO_INSETS;
      }
      this.marginInsets=null;
      this.paddingInsets=new Insets(paddingInsets.top + regularMarginInsets.top,paddingInsets.left + regularMarginInsets.left,paddingInsets.bottom + regularMarginInsets.bottom,paddingInsets.right + regularMarginInsets.right);
    }
 else {
      this.paddingInsets=paddingInsets;
      this.marginInsets=(autoMarginX == 0 && autoMarginY == 0) ? tentativeMarginInsets : (minsets == null ? defaultMarginInsets : minsets.getAWTInsets(dmtop,dmleft,dmbottom,dmright,availWidth,availHeight,autoMarginX,autoMarginY));
    }
    if (borderInfo != null) {
      this.borderTopColor=borderInfo.topColor;
      this.borderLeftColor=borderInfo.leftColor;
      this.borderBottomColor=borderInfo.bottomColor;
      this.borderRightColor=borderInfo.rightColor;
    }
 else {
      this.borderTopColor=null;
      this.borderLeftColor=null;
      this.borderBottomColor=null;
      this.borderRightColor=null;
    }
    String zIndex=props.getZIndex();
    if (zIndex != null) {
      try {
        this.zIndex=Integer.parseInt(zIndex);
      }
 catch (      NumberFormatException err) {
        logger.log(Level.WARNING,""String_Node_Str"" + zIndex + ""String_Node_Str""+ this.modelNode+ ""String_Node_Str"",err);
        this.zIndex=0;
      }
    }
 else {
      this.zIndex=0;
    }
    this.overflowX=rs.getOverflowX();
    this.overflowY=rs.getOverflowY();
  }
}","/** 
 * Apply style.
 * @param availWidth the avail width
 * @param availHeight the avail height
 */
protected void applyStyle(int availWidth,int availHeight){
  Object rootNode=this.modelNode;
  HTMLElementImpl rootElement;
  boolean isRootBlock;
  if (rootNode instanceof HTMLDocumentImpl) {
    isRootBlock=true;
    HTMLDocumentImpl doc=(HTMLDocumentImpl)rootNode;
    rootElement=(HTMLElementImpl)doc.getBody();
  }
 else {
    isRootBlock=false;
    rootElement=(HTMLElementImpl)rootNode;
  }
  if (rootElement == null) {
    this.clearStyle(isRootBlock);
    return;
  }
  RenderState rs=rootElement.getRenderState();
  if (rs == null) {
    throw new IllegalStateException(""String_Node_Str"" + rootElement + ""String_Node_Str""+ rootElement.getParentNode());
  }
  BackgroundInfo binfo=rs.getBackgroundInfo();
  this.backgroundColor=binfo == null ? null : binfo.backgroundColor;
  URL backgroundImageUri=binfo == null ? null : binfo.backgroundImage;
  if (backgroundImageUri == null) {
    this.backgroundImage=null;
    this.lastBackgroundImageUri=null;
  }
 else   if (!backgroundImageUri.equals(this.lastBackgroundImageUri)) {
    this.lastBackgroundImageUri=backgroundImageUri;
    this.loadBackgroundImage(backgroundImageUri);
  }
  AbstractCSS2Properties props=rootElement.getCurrentStyle();
  if (props == null) {
    this.clearStyle(isRootBlock);
  }
 else {
    BorderInfo borderInfo=rs.getBorderInfo();
    this.borderInfo=borderInfo;
    HtmlInsets binsets=borderInfo == null ? null : borderInfo.getInsets();
    HtmlInsets minsets=rs.getMarginInsets();
    HtmlInsets pinsets=rs.getPaddingInsets();
    Insets defaultMarginInsets=this.defaultMarginInsets;
    int dmleft=0, dmright=0, dmtop=0, dmbottom=0;
    if (defaultMarginInsets != null) {
      dmleft=defaultMarginInsets.left;
      dmright=defaultMarginInsets.right;
      dmtop=defaultMarginInsets.top;
      dmbottom=defaultMarginInsets.bottom;
    }
    Insets defaultPaddingInsets=this.defaultPaddingInsets;
    int dpleft=0, dpright=0, dptop=0, dpbottom=0;
    if (defaultPaddingInsets != null) {
      dpleft=defaultPaddingInsets.left;
      dpright=defaultPaddingInsets.right;
      dptop=defaultPaddingInsets.top;
      dpbottom=defaultPaddingInsets.bottom;
    }
    Insets borderInsets=binsets == null ? null : binsets.getAWTInsets(0,0,0,0,availWidth,availHeight,0,0);
    if (borderInsets == null) {
      borderInsets=RBlockViewport.ZERO_INSETS;
    }
    Insets paddingInsets=pinsets == null ? defaultPaddingInsets : pinsets.getAWTInsets(dptop,dpleft,dpbottom,dpright,availWidth,availHeight,0,0);
    if (paddingInsets == null) {
      paddingInsets=RBlockViewport.ZERO_INSETS;
    }
    Insets tentativeMarginInsets=minsets == null ? defaultMarginInsets : minsets.getAWTInsets(dmtop,dmleft,dmbottom,dmright,availWidth,availHeight,0,0);
    if (tentativeMarginInsets == null) {
      tentativeMarginInsets=RBlockViewport.ZERO_INSETS;
    }
    int actualAvailWidth=availWidth - paddingInsets.left - paddingInsets.right- borderInsets.left- borderInsets.right- tentativeMarginInsets.left- tentativeMarginInsets.right;
    int actualAvailHeight=availHeight - paddingInsets.top - paddingInsets.bottom- borderInsets.top- borderInsets.bottom- tentativeMarginInsets.top- tentativeMarginInsets.bottom;
    Integer declaredWidth=this.getDeclaredWidth(rs,actualAvailWidth);
    Integer declaredHeight=this.getDeclaredHeight(rs,actualAvailHeight);
    int autoMarginX=0, autoMarginY=0;
    if (declaredWidth != null) {
      autoMarginX=(availWidth - declaredWidth.intValue() - (borderInsets == null ? 0 : borderInsets.left - borderInsets.right)- (paddingInsets == null ? 0 : paddingInsets.left - paddingInsets.right)) / 2;
    }
    if (declaredHeight != null) {
      autoMarginY=(availHeight - declaredHeight.intValue() - (borderInsets == null ? 0 : borderInsets.top - borderInsets.bottom)- (paddingInsets == null ? 0 : paddingInsets.top - paddingInsets.bottom)) / 2;
    }
    this.borderInsets=borderInsets;
    if (isRootBlock) {
      Insets regularMarginInsets=(autoMarginX == 0 && autoMarginY == 0) ? tentativeMarginInsets : (minsets == null ? defaultMarginInsets : minsets.getAWTInsets(dmtop,dmleft,dmbottom,dmright,availWidth,availHeight,autoMarginX,autoMarginY));
      if (regularMarginInsets == null) {
        regularMarginInsets=RBlockViewport.ZERO_INSETS;
      }
      this.marginInsets=null;
      this.paddingInsets=new Insets(paddingInsets.top + regularMarginInsets.top,paddingInsets.left + regularMarginInsets.left,paddingInsets.bottom + regularMarginInsets.bottom,paddingInsets.right + regularMarginInsets.right);
    }
 else {
      this.paddingInsets=paddingInsets;
      this.marginInsets=(autoMarginX == 0 && autoMarginY == 0) ? tentativeMarginInsets : (minsets == null ? defaultMarginInsets : minsets.getAWTInsets(dmtop,dmleft,dmbottom,dmright,availWidth,availHeight,autoMarginX,autoMarginY));
    }
    if (borderInfo != null) {
      this.borderTopColor=borderInfo.getTopColor();
      this.borderLeftColor=borderInfo.getLeftColor();
      this.borderBottomColor=borderInfo.getBottomColor();
      this.borderRightColor=borderInfo.getRightColor();
    }
 else {
      this.borderTopColor=null;
      this.borderLeftColor=null;
      this.borderBottomColor=null;
      this.borderRightColor=null;
    }
    String zIndex=props.getZIndex();
    if (zIndex != null) {
      try {
        this.zIndex=Integer.parseInt(zIndex);
      }
 catch (      NumberFormatException err) {
        logger.log(Level.WARNING,""String_Node_Str"" + zIndex + ""String_Node_Str""+ this.modelNode+ ""String_Node_Str"",err);
        this.zIndex=0;
      }
    }
 else {
      this.zIndex=0;
    }
    this.overflowX=rs.getOverflowX();
    this.overflowY=rs.getOverflowY();
  }
}"
60217,"public final WordInfo getWordInfo(String word){
  Map<String,WordInfo> map=this.iWordInfoMap;
  if (map == null) {
    map=new HashMap<String,WordInfo>(1);
    this.iWordInfoMap=map;
  }
  WordInfo wi=(WordInfo)map.get(word);
  if (wi != null) {
    return wi;
  }
  wi=new WordInfo();
  FontMetrics fm=this.getFontMetrics();
  wi.fontMetrics=fm;
  wi.ascentPlusLeading=fm.getAscent() + fm.getLeading();
  wi.descent=fm.getDescent();
  wi.height=fm.getHeight();
  wi.width=fm.stringWidth(word);
  map.put(word,wi);
  return wi;
}","public final WordInfo getWordInfo(String word){
  Map<String,WordInfo> map=this.iWordInfoMap;
  if (map == null) {
    map=new HashMap<String,WordInfo>(1);
    this.iWordInfoMap=map;
  }
  WordInfo wi=(WordInfo)map.get(word);
  if (wi != null) {
    return wi;
  }
  wi=new WordInfo();
  FontMetrics fm=this.getFontMetrics();
  wi.setFontMetrics(fm);
  wi.setAscentPlusLeading(fm.getAscent() + fm.getLeading());
  wi.setDescent(fm.getDescent());
  wi.setHeight(fm.getHeight());
  wi.setWidth(fm.stringWidth(word));
  map.put(word,wi);
  return wi;
}"
60218,"public final WordInfo getWordInfo(String word){
  Map<String,WordInfo> map=this.iWordInfoMap;
  if (map == null) {
    map=new HashMap<String,WordInfo>(1);
    this.iWordInfoMap=map;
  }
  WordInfo wi=(WordInfo)map.get(word);
  if (wi != null) {
    return wi;
  }
  wi=new WordInfo();
  FontMetrics fm=this.getFontMetrics();
  wi.fontMetrics=fm;
  wi.ascentPlusLeading=fm.getAscent() + fm.getLeading();
  wi.descent=fm.getDescent();
  wi.height=fm.getHeight();
  wi.width=fm.stringWidth(word);
  map.put(word,wi);
  return wi;
}","public final WordInfo getWordInfo(String word){
  Map<String,WordInfo> map=this.iWordInfoMap;
  if (map == null) {
    map=new HashMap<String,WordInfo>(1);
    this.iWordInfoMap=map;
  }
  WordInfo wi=(WordInfo)map.get(word);
  if (wi != null) {
    return wi;
  }
  wi=new WordInfo();
  FontMetrics fm=this.getFontMetrics();
  wi.setFontMetrics(fm);
  wi.setAscentPlusLeading(fm.getAscent() + fm.getLeading());
  wi.setDescent(fm.getDescent());
  wi.setHeight(fm.getHeight());
  wi.setWidth(fm.stringWidth(word));
  map.put(word,wi);
  return wi;
}"
60219,"public BorderInfo getBorderInfo(){
  BorderInfo binfo=this.borderInfo;
  if (binfo != INVALID_BORDER_INFO) {
    return binfo;
  }
  binfo=super.getBorderInfo();
  if (binfo == null || (binfo.topStyle == HtmlValues.BORDER_STYLE_NONE && binfo.bottomStyle == HtmlValues.BORDER_STYLE_NONE && binfo.leftStyle == HtmlValues.BORDER_STYLE_NONE && binfo.rightStyle == HtmlValues.BORDER_STYLE_NONE)) {
    if (binfo == null) {
      binfo=new BorderInfo();
    }
    HTMLElementImpl element=this.element;
    if (element != null) {
      String border=element.getAttribute(HtmlAttributeProperties.FRAMEBORDER);
      if (border != null) {
        border=border.trim();
      }
      int value;
      if (border != null) {
        try {
          value=Integer.parseInt(border);
        }
 catch (        NumberFormatException nfe) {
          value=0;
        }
      }
 else {
        value=1;
      }
      HtmlInsets borderInsets=new HtmlInsets();
      borderInsets.top=borderInsets.left=borderInsets.right=borderInsets.bottom=(value != 0 ? 1 : 0);
      borderInsets.topType=borderInsets.leftType=borderInsets.rightType=borderInsets.bottomType=HtmlInsets.TYPE_PIXELS;
      binfo.insets=borderInsets;
      if (binfo.topColor == null) {
        binfo.topColor=Color.DARK_GRAY;
      }
      if (binfo.leftColor == null) {
        binfo.leftColor=Color.DARK_GRAY;
      }
      if (binfo.rightColor == null) {
        binfo.rightColor=Color.LIGHT_GRAY;
      }
      if (binfo.bottomColor == null) {
        binfo.bottomColor=Color.LIGHT_GRAY;
      }
      if (value != 0) {
        binfo.topStyle=binfo.leftStyle=binfo.rightStyle=binfo.bottomStyle=HtmlValues.BORDER_STYLE_SOLID;
      }
    }
  }
  this.borderInfo=binfo;
  return binfo;
}","public BorderInfo getBorderInfo(){
  BorderInfo binfo=this.borderInfo;
  if (binfo != INVALID_BORDER_INFO) {
    return binfo;
  }
  binfo=super.getBorderInfo();
  if (binfo == null || (binfo.getTopStyle() == HtmlValues.BORDER_STYLE_NONE && binfo.getBottomStyle() == HtmlValues.BORDER_STYLE_NONE && binfo.getLeftStyle() == HtmlValues.BORDER_STYLE_NONE && binfo.getRightStyle() == HtmlValues.BORDER_STYLE_NONE)) {
    if (binfo == null) {
      binfo=new BorderInfo();
    }
    HTMLElementImpl element=this.element;
    if (element != null) {
      String border=element.getAttribute(HtmlAttributeProperties.FRAMEBORDER);
      if (border != null) {
        border=border.trim();
      }
      int value;
      if (border != null) {
        try {
          value=Integer.parseInt(border);
        }
 catch (        NumberFormatException nfe) {
          value=0;
        }
      }
 else {
        value=1;
      }
      HtmlInsets borderInsets=new HtmlInsets();
      borderInsets.top=borderInsets.left=borderInsets.right=borderInsets.bottom=(value != 0 ? 1 : 0);
      borderInsets.topType=borderInsets.leftType=borderInsets.rightType=borderInsets.bottomType=HtmlInsets.TYPE_PIXELS;
      binfo.setInsets(borderInsets);
      if (binfo.getTopColor() == null) {
        binfo.setTopColor(Color.DARK_GRAY);
      }
      if (binfo.getLeftColor() == null) {
        binfo.setLeftColor(Color.DARK_GRAY);
      }
      if (binfo.getRightColor() == null) {
        binfo.setRightColor(Color.LIGHT_GRAY);
      }
      if (binfo.getBottomColor() == null) {
        binfo.setBottomColor(Color.LIGHT_GRAY);
      }
      if (value != 0) {
        binfo.setTopStyle(HtmlValues.BORDER_STYLE_SOLID);
        binfo.setLeftStyle(HtmlValues.BORDER_STYLE_SOLID);
        binfo.setRightStyle(HtmlValues.BORDER_STYLE_SOLID);
        binfo.setBottomStyle(HtmlValues.BORDER_STYLE_SOLID);
      }
    }
  }
  this.borderInfo=binfo;
  return binfo;
}"
60220,"public BorderInfo getBorderInfo(){
  BorderInfo binfo=this.borderInfo;
  if (binfo != INVALID_BORDER_INFO) {
    return binfo;
  }
  binfo=super.getBorderInfo();
  if (binfo == null || (binfo.topStyle == HtmlValues.BORDER_STYLE_NONE && binfo.bottomStyle == HtmlValues.BORDER_STYLE_NONE && binfo.leftStyle == HtmlValues.BORDER_STYLE_NONE && binfo.rightStyle == HtmlValues.BORDER_STYLE_NONE)) {
    if (binfo == null) {
      binfo=new BorderInfo();
    }
    HTMLElementImpl element=this.element;
    if (element != null) {
      String border=element.getAttribute(HtmlAttributeProperties.BORDER);
      if (border != null) {
        border=border.trim();
        int value;
        int valueType;
        if (border.endsWith(""String_Node_Str"")) {
          valueType=HtmlInsets.TYPE_PERCENT;
          try {
            value=Integer.parseInt(border.substring(0,border.length() - 1));
          }
 catch (          NumberFormatException nfe) {
            value=0;
          }
        }
 else {
          valueType=HtmlInsets.TYPE_PIXELS;
          try {
            value=Integer.parseInt(border);
          }
 catch (          NumberFormatException nfe) {
            value=0;
          }
        }
        HtmlInsets borderInsets=new HtmlInsets();
        borderInsets.top=borderInsets.left=borderInsets.right=borderInsets.bottom=value;
        borderInsets.topType=borderInsets.leftType=borderInsets.rightType=borderInsets.bottomType=valueType;
        binfo.insets=borderInsets;
        if (binfo.topColor == null) {
          binfo.topColor=Color.BLACK;
        }
        if (binfo.leftColor == null) {
          binfo.leftColor=Color.BLACK;
        }
        if (binfo.rightColor == null) {
          binfo.rightColor=Color.BLACK;
        }
        if (binfo.bottomColor == null) {
          binfo.bottomColor=Color.BLACK;
        }
        if (value != 0) {
          binfo.topStyle=binfo.leftStyle=binfo.rightStyle=binfo.bottomStyle=HtmlValues.BORDER_STYLE_SOLID;
        }
      }
    }
  }
  this.borderInfo=binfo;
  return binfo;
}","public BorderInfo getBorderInfo(){
  BorderInfo binfo=this.borderInfo;
  if (binfo != INVALID_BORDER_INFO) {
    return binfo;
  }
  binfo=super.getBorderInfo();
  if (binfo == null || (binfo.getTopStyle() == HtmlValues.BORDER_STYLE_NONE && binfo.getBottomStyle() == HtmlValues.BORDER_STYLE_NONE && binfo.getLeftStyle() == HtmlValues.BORDER_STYLE_NONE && binfo.getRightStyle() == HtmlValues.BORDER_STYLE_NONE)) {
    if (binfo == null) {
      binfo=new BorderInfo();
    }
    HTMLElementImpl element=this.element;
    if (element != null) {
      String border=element.getAttribute(HtmlAttributeProperties.BORDER);
      if (border != null) {
        border=border.trim();
        int value;
        int valueType;
        if (border.endsWith(""String_Node_Str"")) {
          valueType=HtmlInsets.TYPE_PERCENT;
          try {
            value=Integer.parseInt(border.substring(0,border.length() - 1));
          }
 catch (          NumberFormatException nfe) {
            value=0;
          }
        }
 else {
          valueType=HtmlInsets.TYPE_PIXELS;
          try {
            value=Integer.parseInt(border);
          }
 catch (          NumberFormatException nfe) {
            value=0;
          }
        }
        HtmlInsets borderInsets=new HtmlInsets();
        borderInsets.top=borderInsets.left=borderInsets.right=borderInsets.bottom=value;
        borderInsets.topType=borderInsets.leftType=borderInsets.rightType=borderInsets.bottomType=valueType;
        binfo.setInsets(borderInsets);
        if (binfo.getTopColor() == null) {
          binfo.setTopColor(Color.BLACK);
        }
        if (binfo.getLeftColor() == null) {
          binfo.setLeftColor(Color.BLACK);
        }
        if (binfo.getRightColor() == null) {
          binfo.setRightColor(Color.BLACK);
        }
        if (binfo.getBottomColor() == null) {
          binfo.setBottomColor(Color.BLACK);
        }
        if (value != 0) {
          binfo.setTopStyle(HtmlValues.BORDER_STYLE_SOLID);
          binfo.setLeftStyle(HtmlValues.BORDER_STYLE_SOLID);
          binfo.setRightStyle(HtmlValues.BORDER_STYLE_SOLID);
          binfo.setBottomStyle(HtmlValues.BORDER_STYLE_SOLID);
        }
      }
    }
  }
  this.borderInfo=binfo;
  return binfo;
}"
60221,"public final WordInfo getWordInfo(String word){
  Map<String,WordInfo> map=this.iWordInfoMap;
  if (map == null) {
    map=new HashMap<String,WordInfo>(1);
    this.iWordInfoMap=map;
  }
  WordInfo wi=(WordInfo)map.get(word);
  if (wi != null) {
    return wi;
  }
  wi=new WordInfo();
  FontMetrics fm=this.getFontMetrics();
  wi.fontMetrics=fm;
  wi.ascentPlusLeading=fm.getAscent() + fm.getLeading();
  wi.descent=fm.getDescent();
  wi.height=fm.getHeight();
  wi.width=fm.stringWidth(word);
  map.put(word,wi);
  return wi;
}","public final WordInfo getWordInfo(String word){
  Map<String,WordInfo> map=this.iWordInfoMap;
  if (map == null) {
    map=new HashMap<String,WordInfo>(1);
    this.iWordInfoMap=map;
  }
  WordInfo wi=(WordInfo)map.get(word);
  if (wi != null) {
    return wi;
  }
  wi=new WordInfo();
  FontMetrics fm=this.getFontMetrics();
  wi.setFontMetrics(fm);
  wi.setAscentPlusLeading(fm.getAscent() + fm.getLeading());
  wi.setDescent(fm.getDescent());
  wi.setHeight(fm.getHeight());
  wi.setWidth(fm.stringWidth(word));
  map.put(word,wi);
  return wi;
}"
60222,"public BorderInfo getBorderInfo(){
  BorderInfo binfo=this.borderInfo;
  if (binfo != INVALID_BORDER_INFO) {
    return binfo;
  }
  binfo=super.getBorderInfo();
  if (binfo == null || (binfo.topStyle == HtmlValues.BORDER_STYLE_NONE && binfo.bottomStyle == HtmlValues.BORDER_STYLE_NONE && binfo.leftStyle == HtmlValues.BORDER_STYLE_NONE && binfo.rightStyle == HtmlValues.BORDER_STYLE_NONE)) {
    if (binfo == null) {
      binfo=new BorderInfo();
    }
    HTMLElementImpl element=this.element;
    if (element != null) {
      String border=element.getAttribute(HtmlAttributeProperties.BORDER);
      if (border != null) {
        border=border.trim();
        int value;
        int valueType;
        if (border.endsWith(""String_Node_Str"")) {
          valueType=HtmlInsets.TYPE_PERCENT;
          try {
            value=Integer.parseInt(border.substring(0,border.length() - 1));
          }
 catch (          NumberFormatException nfe) {
            value=0;
          }
        }
 else {
          valueType=HtmlInsets.TYPE_PIXELS;
          try {
            value=Integer.parseInt(border);
          }
 catch (          NumberFormatException nfe) {
            value=0;
          }
        }
        HtmlInsets borderInsets=new HtmlInsets();
        borderInsets.top=borderInsets.left=borderInsets.right=borderInsets.bottom=value;
        borderInsets.topType=borderInsets.leftType=borderInsets.rightType=borderInsets.bottomType=valueType;
        binfo.insets=borderInsets;
        if (binfo.topColor == null) {
          binfo.topColor=Color.LIGHT_GRAY;
        }
        if (binfo.leftColor == null) {
          binfo.leftColor=Color.LIGHT_GRAY;
        }
        if (binfo.rightColor == null) {
          binfo.rightColor=Color.GRAY;
        }
        if (binfo.bottomColor == null) {
          binfo.bottomColor=Color.GRAY;
        }
        if (value != 0) {
          binfo.topStyle=binfo.leftStyle=binfo.rightStyle=binfo.bottomStyle=HtmlValues.BORDER_STYLE_SOLID;
        }
      }
    }
  }
  this.borderInfo=binfo;
  return binfo;
}","public BorderInfo getBorderInfo(){
  BorderInfo binfo=this.borderInfo;
  if (binfo != INVALID_BORDER_INFO) {
    return binfo;
  }
  binfo=super.getBorderInfo();
  if (binfo == null || (binfo.getTopStyle() == HtmlValues.BORDER_STYLE_NONE && binfo.getBottomStyle() == HtmlValues.BORDER_STYLE_NONE && binfo.getLeftStyle() == HtmlValues.BORDER_STYLE_NONE && binfo.getRightStyle() == HtmlValues.BORDER_STYLE_NONE)) {
    if (binfo == null) {
      binfo=new BorderInfo();
    }
    HTMLElementImpl element=this.element;
    if (element != null) {
      String border=element.getAttribute(HtmlAttributeProperties.BORDER);
      if (border != null) {
        border=border.trim();
        int value;
        int valueType;
        if (border.endsWith(""String_Node_Str"")) {
          valueType=HtmlInsets.TYPE_PERCENT;
          try {
            value=Integer.parseInt(border.substring(0,border.length() - 1));
          }
 catch (          NumberFormatException nfe) {
            value=0;
          }
        }
 else {
          valueType=HtmlInsets.TYPE_PIXELS;
          try {
            value=Integer.parseInt(border);
          }
 catch (          NumberFormatException nfe) {
            value=0;
          }
        }
        HtmlInsets borderInsets=new HtmlInsets();
        borderInsets.top=borderInsets.left=borderInsets.right=borderInsets.bottom=value;
        borderInsets.topType=borderInsets.leftType=borderInsets.rightType=borderInsets.bottomType=valueType;
        binfo.setInsets(borderInsets);
        if (binfo.getTopColor() == null) {
          binfo.setTopColor(Color.LIGHT_GRAY);
        }
        if (binfo.getLeftColor() == null) {
          binfo.setLeftColor(Color.LIGHT_GRAY);
        }
        if (binfo.getRightColor() == null) {
          binfo.setRightColor(Color.GRAY);
        }
        if (binfo.getBottomColor() == null) {
          binfo.setBottomColor(Color.GRAY);
        }
        if (value != 0) {
          binfo.setTopStyle(HtmlValues.BORDER_STYLE_SOLID);
          binfo.setLeftStyle(HtmlValues.BORDER_STYLE_SOLID);
          binfo.setRightStyle(HtmlValues.BORDER_STYLE_SOLID);
          binfo.setBottomStyle(HtmlValues.BORDER_STYLE_SOLID);
        }
      }
    }
  }
  this.borderInfo=binfo;
  return binfo;
}"
60223,"public void changeValue(AbstractCSS2Properties properties,String newValue,CSSStyleDeclaration declaration,boolean important){
  properties.setPropertyValueLCAlt(FONT,newValue,important);
  if (newValue != null && newValue.length() > 0) {
    String fontSpecTL=newValue.toLowerCase();
    FontInfo fontInfo=(FontInfo)HtmlValues.SYSTEM_FONTS.get(fontSpecTL);
    if (fontInfo != null) {
      if (fontInfo.fontFamily != null) {
        properties.setPropertyValueLCAlt(FONT_FAMILY,fontInfo.fontFamily,important);
      }
      if (fontInfo.fontSize != null) {
        properties.setPropertyValueLCAlt(FONT_SIZE,fontInfo.fontSize,important);
      }
      if (fontInfo.fontStyle != null) {
        properties.setPropertyValueLCAlt(FONT_STYLE,fontInfo.fontStyle,important);
      }
      if (fontInfo.fontVariant != null) {
        properties.setPropertyValueLCAlt(FONT_VARIANT,fontInfo.fontVariant,important);
      }
      if (fontInfo.fontWeight != null) {
        properties.setPropertyValueLCAlt(FONT_WEIGHT,fontInfo.fontWeight,important);
      }
      return;
    }
    String[] tokens=HtmlValues.splitCssValue(fontSpecTL);
    String token=null;
    int length=tokens.length;
    int i;
    for (i=0; i < length; i++) {
      token=tokens[i];
      if (HtmlValues.isFontStyle(token)) {
        properties.setPropertyValueLCAlt(FONT_STYLE,token,important);
        continue;
      }
      if (HtmlValues.isFontVariant(token)) {
        properties.setPropertyValueLCAlt(FONT_VARIANT,token,important);
        continue;
      }
      if (HtmlValues.isFontWeight(token)) {
        properties.setPropertyValueLCAlt(FONT_WEIGHT,token,important);
        continue;
      }
      break;
    }
    if (token != null) {
      int slashIdx=token.indexOf('/');
      String fontSizeText=slashIdx == -1 ? token : token.substring(0,slashIdx);
      properties.setPropertyValueLCAlt(FONT_SIZE,fontSizeText,important);
      String lineHeightText=slashIdx == -1 ? null : token.substring(slashIdx + 1);
      if (lineHeightText != null) {
        properties.setPropertyValueLCAlt(LINE_HEIGHT,lineHeightText,important);
      }
      if (++i < length) {
        StringBuffer fontFamilyBuff=new StringBuffer();
        do {
          token=tokens[i];
          fontFamilyBuff.append(token);
          fontFamilyBuff.append(' ');
        }
 while (++i < length);
        properties.setPropertyValueLCAlt(FONT_FAMILY,fontFamilyBuff.toString(),important);
      }
    }
  }
}","public void changeValue(AbstractCSS2Properties properties,String newValue,CSSStyleDeclaration declaration,boolean important){
  properties.setPropertyValueLCAlt(FONT,newValue,important);
  if (newValue != null && newValue.length() > 0) {
    String fontSpecTL=newValue.toLowerCase();
    FontInfo fontInfo=(FontInfo)HtmlValues.SYSTEM_FONTS.get(fontSpecTL);
    if (fontInfo != null) {
      if (fontInfo.getFontFamily() != null) {
        properties.setPropertyValueLCAlt(FONT_FAMILY,fontInfo.getFontFamily(),important);
      }
      if (fontInfo.getFontSize() != null) {
        properties.setPropertyValueLCAlt(FONT_SIZE,fontInfo.getFontSize(),important);
      }
      if (fontInfo.getFontStyle() != null) {
        properties.setPropertyValueLCAlt(FONT_STYLE,fontInfo.getFontStyle(),important);
      }
      if (fontInfo.getFontVariant() != null) {
        properties.setPropertyValueLCAlt(FONT_VARIANT,fontInfo.getFontVariant(),important);
      }
      if (fontInfo.getFontWeight() != null) {
        properties.setPropertyValueLCAlt(FONT_WEIGHT,fontInfo.getFontWeight(),important);
      }
      return;
    }
    String[] tokens=HtmlValues.splitCssValue(fontSpecTL);
    String token=null;
    int length=tokens.length;
    int i;
    for (i=0; i < length; i++) {
      token=tokens[i];
      if (HtmlValues.isFontStyle(token)) {
        properties.setPropertyValueLCAlt(FONT_STYLE,token,important);
        continue;
      }
      if (HtmlValues.isFontVariant(token)) {
        properties.setPropertyValueLCAlt(FONT_VARIANT,token,important);
        continue;
      }
      if (HtmlValues.isFontWeight(token)) {
        properties.setPropertyValueLCAlt(FONT_WEIGHT,token,important);
        continue;
      }
      break;
    }
    if (token != null) {
      int slashIdx=token.indexOf('/');
      String fontSizeText=slashIdx == -1 ? token : token.substring(0,slashIdx);
      properties.setPropertyValueLCAlt(FONT_SIZE,fontSizeText,important);
      String lineHeightText=slashIdx == -1 ? null : token.substring(slashIdx + 1);
      if (lineHeightText != null) {
        properties.setPropertyValueLCAlt(LINE_HEIGHT,lineHeightText,important);
      }
      if (++i < length) {
        StringBuffer fontFamilyBuff=new StringBuffer();
        do {
          token=tokens[i];
          fontFamilyBuff.append(token);
          fontFamilyBuff.append(' ');
        }
 while (++i < length);
        properties.setPropertyValueLCAlt(FONT_FAMILY,fontFamilyBuff.toString(),important);
      }
    }
  }
}"
60224,"/** 
 * Adds the given parameter to the set of parameters.
 * @param parem the Parameter to add. This must not be null.
 */
public void setParameter(Parameter param){
  if (param == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (param.getName() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  params.put(param.getName(),param);
}","/** 
 * Adds the given parameter to the set of parameters.
 * @param param the Parameter to add. This must not be null.
 */
public void setParameter(Parameter param){
  if (param == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (param.getName() == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  params.put(param.getName(),param);
}"
60225,"/** 
 * @inheritDoc
 */
public Object clone() throws CloneNotSupportedException {
  AbstractBean result=(AbstractBean)super.clone();
  result.pcs=new PropertyChangeSupport(result);
  result.vcs=new VetoableChangeSupport(result);
  return result;
}","/** 
 * @exception CloneNotSupportedException
 */
public Object clone() throws CloneNotSupportedException {
  AbstractBean result=(AbstractBean)super.clone();
  result.pcs=new PropertyChangeSupport(result);
  result.vcs=new VetoableChangeSupport(result);
  return result;
}"
60226,"/** 
 * @param parent
 */
public MultiplexClassLoader(Collection classLoaders){
  super(null);
  this.parentLoaders=(BaseClassLoader[])classLoaders.toArray(EMPTY_CLASS_LOADERS);
}","/** 
 * @param classLoaders
 */
public MultiplexClassLoader(Collection classLoaders){
  super(null);
  this.parentLoaders=(BaseClassLoader[])classLoaders.toArray(EMPTY_CLASS_LOADERS);
}"
60227,"/** 
 * Converts the given URL into a valid URL by removing control characters (ASCII code < 32).
 * @param the URL to convert
 * @return the encoded URL
 */
public static String removeControlCharacters(String url){
  StringBuilder sb=new StringBuilder(url.length());
  for (int i=0; i < url.length(); i++) {
    char c=url.charAt(i);
    if (c >= 32)     sb.append(c);
  }
  return sb.toString();
}","/** 
 * Converts the given URL into a valid URL by removing control characters <code>(ASCII code &lt; 32)</code>.
 * @param url URL to convert
 * @return the encoded URL
 */
public static String removeControlCharacters(String url){
  StringBuilder sb=new StringBuilder(url.length());
  for (int i=0; i < url.length(); i++) {
    char c=url.charAt(i);
    if (c >= 32)     sb.append(c);
  }
  return sb.toString();
}"
60228,"/** 
 * Converts the given URL into a valid URL by encoding illegal characters. Right now it is implemented like in IE7: only spaces are replaced with ""%20"". (Firefox 3 also encodes other non-ASCII and some ASCII characters).
 * @param the URL to convert
 * @return the encoded URL
 */
public static String encodeIllegalCharacters(String url){
  return url.replace(""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Converts the given URL into a valid URL by encoding illegal characters. Right now it is implemented like in IE7: only spaces are replaced with ""%20"". (Firefox 3 also encodes other non-ASCII and some ASCII characters).
 * @param url URL to convert
 * @return the encoded URL
 */
public static String encodeIllegalCharacters(String url){
  return url.replace(""String_Node_Str"",""String_Node_Str"");
}"
60229,"public String[] getValues(){
  if (this.state == STATE_COMBO) {
    OptionItem item=(OptionItem)this.comboBox.getSelectedItem();
    return item == null ? null : new String[]{item.getValue()};
  }
 else {
    Object[] values=this.list.getSelectedValues();
    if (values == null) {
      return null;
    }
    ArrayList<String> al=new ArrayList<String>();
    for (int i=0; i < values.length; i++) {
      OptionItem item=(OptionItem)values[i];
      al.add(item.getValue());
    }
    return (String[])al.toArray(new String[0]);
  }
}","public String[] getValues(){
  if (this.state == STATE_COMBO) {
    OptionItem item=(OptionItem)this.comboBox.getSelectedItem();
    return item == null ? null : new String[]{item.getValue()};
  }
 else {
    List<OptionItem> values=this.list.getSelectedValuesList();
    if (values == null) {
      return null;
    }
    ArrayList<String> al=new ArrayList<String>();
    for (int i=0; i < values.size(); i++) {
      OptionItem item=(OptionItem)values.get(i);
      al.add(item.getValue());
    }
    return (String[])al.toArray(new String[0]);
  }
}"
60230,"public final void paint(Graphics g){
  RenderState rs=this.modelNode.getRenderState();
  if (rs != null && rs.getVisibility() != RenderState.VISIBILITY_VISIBLE) {
    return;
  }
  this.prePaint(g);
  Insets insets=this.getInsets(false,false);
  g.translate(insets.left,insets.top);
  try {
    this.widget.paint(g);
  }
  finally {
    g.translate(-insets.left,-insets.top);
  }
}","public final void paint(Graphics g){
  RenderState rs=this.modelNode.getRenderState();
  System.out.println(""String_Node_Str"" + rs.getVisibility());
  if (rs != null && rs.getVisibility() != RenderState.VISIBILITY_VISIBLE) {
    return;
  }
  this.prePaint(g);
  Insets insets=this.getInsets(false,false);
  g.translate(insets.left,insets.top);
  try {
    this.widget.paint(g);
  }
  finally {
    g.translate(-insets.left,-insets.top);
  }
}"
60231,"/** 
 * @param context
 */
public LocalErrorHandler(){
}","public LocalErrorHandler(){
}"
60232,"/** 
 * Allows   {@link #getPreferredSize()} to render the HTML block in order todetermine the preferred size of this component. Note that <code>getPreferredSize()<code> is a potentially time-consuming operation if the preferred width is set.
 * @param width The preferred blocked width. Use <code>-1</code> to unset.
 */
public void setPreferredWidth(int width){
  this.preferredWidth=width;
}","/** 
 * Allows   {@link #getPreferredSize()} to render the HTML block in order todetermine the preferred size of this component. Note that <code>getPreferredSize()</code> is a potentially time-consuming operation if the preferred width is set.
 * @param width The preferred blocked width. Use <code>-1</code> to unset.
 */
public void setPreferredWidth(int width){
  this.preferredWidth=width;
}"
60233,"public String mapFunction(String script){
  ArrayList<String> list=new ArrayList<String>();
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  for (int i=0; i < list.size(); i++) {
    if (script.equals(list.get(0))) {
      script=""String_Node_Str"" + script;
      break;
    }
  }
  return script;
}","public String mapFunction(String script){
  ArrayList<String> list=new ArrayList<String>();
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  for (int i=0; i < list.size(); i++) {
    if (script.equals(list.get(i))) {
      script=""String_Node_Str"" + script;
      break;
    }
  }
  return script;
}"
60234,"@Override public void addEventListener(String script,String function){
  JavascriptCommon ut=new JavascriptCommon();
  System.out.println(""String_Node_Str"" + ut.mapFunction(script));
  ElementAttributeFilter attr=new ElementAttributeFilter(ut.mapFunction(script));
  String[] split=function.split(""String_Node_Str"");
  function=split[1].replace(""String_Node_Str"",""String_Node_Str"").trim();
  attr.setAttribute(this,function);
}","@Override public void addEventListener(String script,String function){
  JavascriptCommon ut=new JavascriptCommon();
  ElementAttributeFilter attr=new ElementAttributeFilter(ut.mapFunction(script));
  String[] split=function.split(""String_Node_Str"");
  function=split[1].replace(""String_Node_Str"",""String_Node_Str"").trim();
  attr.setAttribute(this,function);
}"
60235,"/** 
 * Gets the state of the request, a value between 0 and 4.
 * @return A value corresponding to one of the STATE* constants in thisclass.
 */
public ReadyState getReadyState();","/** 
 * Gets the state of the request, a value between 0 and 4.
 * @return A value corresponding to one of the STATE* constants in thisclass.
 */
public int getReadyState();"
60236,"@Override public void setRequestHeader(String header,String value){
  if (getReadyState() != ReadyState.OPEN) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  if (header == null || value == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (header.equalsIgnoreCase(""String_Node_Str"") || header.equalsIgnoreCase(""String_Node_Str"") || header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")) {
  }
  if (header.equalsIgnoreCase(""String_Node_Str"") || header.equalsIgnoreCase(""String_Node_Str"") || header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")) {
    for (    Header h : req.getHeaders()) {
      if (h.getName().equalsIgnoreCase(header)) {
        req.removeHeader(h);
        req.setHeader(new Header(header,value));
        break;
      }
    }
  }
 else {
    boolean appended=false;
    for (    Header h : req.getHeaders()) {
      if (h.getName().equalsIgnoreCase(header)) {
        req.removeHeader(h);
        req.setHeader(new Header(header,h.getValue() + ""String_Node_Str"" + value));
        appended=true;
        break;
      }
    }
    if (!appended) {
      req.setHeader(new Header(header,value));
    }
  }
}","@Override public void setRequestHeader(String header,String value){
  if (getReadyState() != HttpRequest.STATE_LOADING) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  if (header == null || value == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (header.equalsIgnoreCase(""String_Node_Str"") || header.equalsIgnoreCase(""String_Node_Str"") || header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")) {
    return;
  }
  if (header.equalsIgnoreCase(""String_Node_Str"") || header.equalsIgnoreCase(""String_Node_Str"") || header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")|| header.equalsIgnoreCase(""String_Node_Str"")) {
    for (    Header h : req.getHeaders()) {
      if (h.getName().equalsIgnoreCase(header)) {
        req.removeHeader(h);
        req.setHeader(new Header(header,value));
        break;
      }
    }
  }
 else {
    boolean appended=false;
    for (    Header h : req.getHeaders()) {
      if (h.getName().equalsIgnoreCase(header)) {
        req.removeHeader(h);
        req.setHeader(new Header(header,h.getValue() + ""String_Node_Str"" + value));
        appended=true;
        break;
      }
    }
    if (!appended) {
      req.setHeader(new Header(header,value));
    }
  }
}"
60237,"public synchronized ReadyState getReadyState(){
  return this.readyState;
}","public synchronized int getReadyState(){
  return this.readyState;
}"
60238,"public InputFileControl(HTMLBaseInputElement modelNode){
  super(modelNode);
  this.setLayout(new BoxLayout(this,BoxLayout.X_AXIS));
  JButton browseButton=this.browseButton;
  browseButton.setAction(new BrowseAction());
  browseButton.setText(""String_Node_Str"");
  java.awt.Dimension ps=this.textField.getPreferredSize();
  this.textField.setPreferredSize(new java.awt.Dimension(128,ps.height));
  this.textField.setEditable(false);
  if (modelNode.getTitle() != null)   this.textField.setToolTipText(modelNode.getTitle());
  textField.setVisible(modelNode.getHidden());
  textField.applyComponentOrientation(direction(modelNode.getDir()));
  textField.setEditable(new Boolean(modelNode.getContentEditable()));
  textField.setEnabled(!modelNode.getDisabled());
  this.add(this.textField);
  this.add(Box.createHorizontalStrut(4));
  this.add(browseButton);
}","public InputFileControl(HTMLBaseInputElement modelNode){
  super(modelNode);
  this.setLayout(new BoxLayout(this,BoxLayout.X_AXIS));
  JButton browseButton=this.browseButton;
  browseButton.setAction(new BrowseAction());
  browseButton.setText(""String_Node_Str"");
  java.awt.Dimension ps=this.textField.getPreferredSize();
  this.textField.setPreferredSize(new java.awt.Dimension(128,ps.height));
  this.textField.setEditable(false);
  if (modelNode.getTitle() != null)   this.textField.setToolTipText(modelNode.getTitle());
  textField.setVisible(modelNode.getHidden());
  textField.applyComponentOrientation(direction(modelNode.getDir()));
  textField.setEditable(new Boolean(modelNode.getContentEditable() == null ? ""String_Node_Str"" : modelNode.getContentEditable()));
  textField.setEnabled(!modelNode.getDisabled());
  this.add(this.textField);
  this.add(Box.createHorizontalStrut(4));
  this.add(browseButton);
}"
60239,"public InputPasswordControl(final HTMLBaseInputElement modelNode){
  super(modelNode);
}","public InputPasswordControl(final HTMLBaseInputElement modelNode){
  super(modelNode);
  JPasswordField pwd=(JPasswordField)this.widget;
  if (modelNode.getTitle() != null)   pwd.setToolTipText(modelNode.getTitle());
  pwd.setVisible(modelNode.getHidden());
  pwd.applyComponentOrientation(direction(modelNode.getDir()));
  pwd.setEditable(new Boolean(modelNode.getContentEditable() == null ? ""String_Node_Str"" : modelNode.getContentEditable()));
  pwd.setEnabled(!modelNode.getDisabled());
  pwd.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      HtmlController.getInstance().onEnterPressed(modelNode,null);
    }
  }
);
}"
60240,"public InputSelectControl(final HTMLBaseInputElement modelNode){
  super(modelNode);
  this.setLayout(WrapperLayout.getInstance());
  final JComboBox<OptionItem> comboBox=new JComboBox<OptionItem>();
  comboBox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      OptionItem item=(OptionItem)e.getItem();
      if (item != null) {
switch (e.getStateChange()) {
case ItemEvent.SELECTED:
          if (!suspendSelections) {
            inSelectionEvent=true;
            try {
              int selectedIndex=comboBox.getSelectedIndex();
              HTMLSelectElementImpl selectElement=(HTMLSelectElementImpl)modelNode;
              selectElement.setSelectedIndex(selectedIndex);
            }
  finally {
              inSelectionEvent=false;
            }
            HtmlController.getInstance().onChange(modelNode);
          }
        break;
case ItemEvent.DESELECTED:
      break;
  }
}
}
}
);
final DefaultListModel<OptionItem> listModel=new DefaultListModel<OptionItem>();
final JList<OptionItem> list=new JList<OptionItem>(listModel);
this.listModel=listModel;
list.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
list.addListSelectionListener(new javax.swing.event.ListSelectionListener(){
public void valueChanged(ListSelectionEvent e){
if (!e.getValueIsAdjusting() && !suspendSelections) {
  boolean changed=false;
  inSelectionEvent=true;
  try {
    int modelSize=listModel.getSize();
    for (int i=0; i < modelSize; i++) {
      OptionItem item=(OptionItem)listModel.get(i);
      if (item != null) {
        boolean oldIsSelected=item.isSelected();
        boolean newIsSelected=list.isSelectedIndex(i);
        if (oldIsSelected != newIsSelected) {
          changed=true;
          item.setSelected(newIsSelected);
        }
      }
    }
  }
  finally {
    inSelectionEvent=false;
  }
  if (changed) {
    HtmlController.getInstance().onChange(modelNode);
  }
}
}
}
);
this.comboBox=comboBox;
if (modelNode.getTitle() != null) comboBox.setToolTipText(modelNode.getTitle());
comboBox.setVisible(modelNode.getHidden());
comboBox.applyComponentOrientation(direction(modelNode.getDir()));
comboBox.setEditable(new Boolean(modelNode.getContentEditable()));
comboBox.setEnabled(!modelNode.getDisabled());
this.list=list;
this.resetItemList();
}","public InputSelectControl(final HTMLBaseInputElement modelNode){
  super(modelNode);
  this.setLayout(WrapperLayout.getInstance());
  final JComboBox<OptionItem> comboBox=new JComboBox<OptionItem>();
  comboBox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      OptionItem item=(OptionItem)e.getItem();
      if (item != null) {
switch (e.getStateChange()) {
case ItemEvent.SELECTED:
          if (!suspendSelections) {
            inSelectionEvent=true;
            try {
              int selectedIndex=comboBox.getSelectedIndex();
              HTMLSelectElementImpl selectElement=(HTMLSelectElementImpl)modelNode;
              selectElement.setSelectedIndex(selectedIndex);
            }
  finally {
              inSelectionEvent=false;
            }
            HtmlController.getInstance().onChange(modelNode);
          }
        break;
case ItemEvent.DESELECTED:
      break;
  }
}
}
}
);
final DefaultListModel<OptionItem> listModel=new DefaultListModel<OptionItem>();
final JList<OptionItem> list=new JList<OptionItem>(listModel);
this.listModel=listModel;
list.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
list.addListSelectionListener(new javax.swing.event.ListSelectionListener(){
public void valueChanged(ListSelectionEvent e){
if (!e.getValueIsAdjusting() && !suspendSelections) {
  boolean changed=false;
  inSelectionEvent=true;
  try {
    int modelSize=listModel.getSize();
    for (int i=0; i < modelSize; i++) {
      OptionItem item=(OptionItem)listModel.get(i);
      if (item != null) {
        boolean oldIsSelected=item.isSelected();
        boolean newIsSelected=list.isSelectedIndex(i);
        if (oldIsSelected != newIsSelected) {
          changed=true;
          item.setSelected(newIsSelected);
        }
      }
    }
  }
  finally {
    inSelectionEvent=false;
  }
  if (changed) {
    HtmlController.getInstance().onChange(modelNode);
  }
}
}
}
);
this.comboBox=comboBox;
if (modelNode.getTitle() != null) comboBox.setToolTipText(modelNode.getTitle());
comboBox.setVisible(modelNode.getHidden());
comboBox.applyComponentOrientation(direction(modelNode.getDir()));
comboBox.setEditable(new Boolean(modelNode.getContentEditable() == null ? ""String_Node_Str"" : modelNode.getContentEditable()));
comboBox.setEnabled(!modelNode.getDisabled());
this.list=list;
this.resetItemList();
}"
60241,"public InputTextAreaControl(HTMLBaseInputElement modelNode){
  super(modelNode);
  this.setLayout(WrapperLayout.getInstance());
  JTextAreaImpl widget=(JTextAreaImpl)this.createTextField();
  this.widget=widget;
  this.add(new JScrollPane(widget));
  ElementImpl element=this.controlElement;
  String value=element.getTextContent();
  ((JTextAreaImpl)widget).setLineWrap(true);
  if (modelNode.getTitle() != null)   widget.setToolTipText(modelNode.getTitle());
  widget.setVisible(modelNode.getHidden());
  widget.applyComponentOrientation(direction(modelNode.getDir()));
  widget.setEditable(new Boolean(modelNode.getContentEditable()));
  widget.setEnabled(!modelNode.getDisabled());
  widget.setPlaceholder(modelNode.getPlaceholder());
  widget.setText(value);
}","public InputTextAreaControl(HTMLBaseInputElement modelNode){
  super(modelNode);
  this.setLayout(WrapperLayout.getInstance());
  JTextAreaImpl widget=(JTextAreaImpl)this.createTextField();
  this.widget=widget;
  this.add(new JScrollPane(widget));
  ElementImpl element=this.controlElement;
  String value=element.getTextContent();
  ((JTextAreaImpl)widget).setLineWrap(true);
  if (modelNode.getTitle() != null)   widget.setToolTipText(modelNode.getTitle());
  widget.setVisible(modelNode.getHidden());
  widget.applyComponentOrientation(direction(modelNode.getDir()));
  widget.setEditable(new Boolean(modelNode.getContentEditable() == null ? ""String_Node_Str"" : modelNode.getContentEditable()));
  widget.setEnabled(!modelNode.getDisabled());
  widget.setPlaceholder(modelNode.getPlaceholder());
  widget.setText(value);
}"
60242,"public InputTextControl(final HTMLBaseInputElement modelNode){
  super(modelNode);
  JTextFieldImpl text=(JTextFieldImpl)this.widget;
  if (modelNode.getTitle() != null)   text.setToolTipText(modelNode.getTitle());
  text.setVisible(modelNode.getHidden());
  text.applyComponentOrientation(direction(modelNode.getDir()));
  text.setEditable(new Boolean(modelNode.getContentEditable()));
  text.setEnabled(!modelNode.getDisabled());
  text.setPlaceholder(modelNode.getPlaceholder());
  text.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      HtmlController.getInstance().onEnterPressed(modelNode,null);
    }
  }
);
}","public InputTextControl(final HTMLBaseInputElement modelNode){
  super(modelNode);
  JTextFieldImpl text=(JTextFieldImpl)this.widget;
  if (modelNode.getTitle() != null)   text.setToolTipText(modelNode.getTitle());
  text.setVisible(modelNode.getHidden());
  text.applyComponentOrientation(direction(modelNode.getDir()));
  text.setEditable(new Boolean(modelNode.getContentEditable() == null ? ""String_Node_Str"" : modelNode.getContentEditable()));
  text.setEnabled(!modelNode.getDisabled());
  text.setPlaceholder(modelNode.getPlaceholder());
  text.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      HtmlController.getInstance().onEnterPressed(modelNode,null);
    }
  }
);
}"
60243,"@Override public List<purejavahidapi.HidDeviceInfo> enumerateDevices(){
  try {
    List<purejavahidapi.HidDeviceInfo> list=new LinkedList<purejavahidapi.HidDeviceInfo>();
    GUID InterfaceClassGuid=new GUID(0x4d1e55b2,0xf16f,0x11cf,0x88,0xcb,0x00,0x11,0x11,0x00,0x00,0x30);
    SP_DEVINFO_DATA devinfo_data=new SP_DEVINFO_DATA();
    SP_DEVICE_INTERFACE_DATA device_interface_data=new SP_DEVICE_INTERFACE_DATA();
    SP_DEVICE_INTERFACE_DETAIL_DATA_A device_interface_detail_data=null;
    HDEVINFO device_info_set=null;
    int deviceIndex=0;
    int i;
    devinfo_data.cbSize=devinfo_data.size();
    device_interface_data.cbSize=device_interface_data.size();
    device_info_set=SetupDiGetClassDevs(InterfaceClassGuid,null,null,DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);
    for (; ; ) {
      HANDLE devHandle=INVALID_HANDLE_VALUE;
      if (!SetupDiEnumDeviceInterfaces(device_info_set,null,InterfaceClassGuid,deviceIndex,device_interface_data)) {
        if (GetLastError() == ERROR_NO_MORE_ITEMS)         break;
        reportLastError();
      }
      ;
      int[] required_size={0};
      if (!SetupDiGetDeviceInterfaceDetail(device_info_set,device_interface_data,null,0,required_size,null)) {
        if (GetLastError() != ERROR_INSUFFICIENT_BUFFER)         reportLastError();
      }
      device_interface_detail_data=new SP_DEVICE_INTERFACE_DETAIL_DATA_A(required_size[0]);
      if (!SetupDiGetDeviceInterfaceDetail(device_info_set,device_interface_data,device_interface_detail_data,required_size[0],null,null))       reportLastError();
      char[] driverNameChars=new char[256];
      if (!SetupDiEnumDeviceInfo(device_info_set,deviceIndex,devinfo_data)) {
        reportLastError();
        continue;
      }
      if (!SetupDiGetDeviceRegistryProperty(device_info_set,devinfo_data,SPDRP_CLASS,null,driverNameChars,driverNameChars.length,null)) {
        reportLastError();
        continue;
      }
      int driverNameLen=0;
      while (driverNameChars[driverNameLen++] != 0)       ;
      String drivername=new String(driverNameChars,0,driverNameLen - 1);
      if (""String_Node_Str"".equals(drivername)) {
        if (!SetupDiGetDeviceRegistryProperty(device_info_set,devinfo_data,SPDRP_DRIVER,null,driverNameChars,driverNameChars.length,null)) {
          if (GetLastError() != ERROR_INVALID_DATA)           reportLastError();
          continue;
        }
        char[] deviceIdChars=new char[256];
        int[] deviceIdLen={0};
        if (!SetupDiGetDeviceInstanceId(device_info_set,devinfo_data,deviceIdChars,deviceIdChars.length,deviceIdLen))         reportLastError();
        String deviceId=new String(deviceIdChars);
        int[] parent={devinfo_data.DevInst};
        while (CM_Get_Parent(parent,parent[0],0) == 0) {
          int[] parentIdLen={0};
          if (CM_Get_Device_ID_Size(parentIdLen,parent[0],0) != CR_SUCCESS)           reportLastError();
          parentIdLen[0]++;
          char[] parentIdChars=new char[parentIdLen[0]];
          if (CM_Get_Device_ID(parent[0],parentIdChars,parentIdLen[0],0) != CR_SUCCESS)           reportLastError();
          String parentId=new String(parentIdChars,0,parentIdLen[0] - 1);
          if (parentId.startsWith(""String_Node_Str"")) {
            deviceId=parentId;
            break;
          }
        }
        String path=new String(device_interface_detail_data.DevicePath);
        devHandle=openDeviceHandle(path,true);
        if (devHandle == INVALID_HANDLE_VALUE)         break;
        HIDD_ATTRIBUTES attrib=new HIDD_ATTRIBUTES();
        attrib.Size=new NativeLong(attrib.size());
        HidD_GetAttributes(devHandle,attrib);
        list.add(new HidDeviceInfo(path,deviceId,devHandle,attrib));
        CloseHandle(devHandle);
      }
      deviceIndex++;
    }
    SetupDiDestroyDeviceInfoList(device_info_set);
    return list;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}","@Override public List<purejavahidapi.HidDeviceInfo> enumerateDevices(){
  try {
    List<purejavahidapi.HidDeviceInfo> list=new LinkedList<purejavahidapi.HidDeviceInfo>();
    GUID InterfaceClassGuid=new GUID(0x4d1e55b2,0xf16f,0x11cf,0x88,0xcb,0x00,0x11,0x11,0x00,0x00,0x30);
    SP_DEVINFO_DATA devinfo_data=new SP_DEVINFO_DATA();
    SP_DEVICE_INTERFACE_DATA device_interface_data=new SP_DEVICE_INTERFACE_DATA();
    SP_DEVICE_INTERFACE_DETAIL_DATA_A device_interface_detail_data=null;
    HDEVINFO device_info_set=null;
    devinfo_data.cbSize=devinfo_data.size();
    device_interface_data.cbSize=device_interface_data.size();
    device_info_set=SetupDiGetClassDevs(InterfaceClassGuid,null,null,DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);
    for (int deviceIndex=0; ; deviceIndex++) {
      HANDLE devHandle=INVALID_HANDLE_VALUE;
      if (!SetupDiEnumDeviceInterfaces(device_info_set,null,InterfaceClassGuid,deviceIndex,device_interface_data)) {
        if (GetLastError() == ERROR_NO_MORE_ITEMS)         break;
        reportLastError();
      }
      int[] required_size={0};
      if (!SetupDiGetDeviceInterfaceDetail(device_info_set,device_interface_data,null,0,required_size,null)) {
        if (GetLastError() != ERROR_INSUFFICIENT_BUFFER)         reportLastError();
      }
      int[] cbSize={8,6,5};
      for (int i=0; i < cbSize.length; i++) {
        device_interface_detail_data=new SP_DEVICE_INTERFACE_DETAIL_DATA_A(cbSize[i],required_size[0]);
        if (SetupDiGetDeviceInterfaceDetail(device_info_set,device_interface_data,device_interface_detail_data,required_size[0],null,null))         break;
        device_interface_detail_data=null;
        if (GetLastError() == ERROR_INVALID_USER_BUFFER)         continue;
        reportLastError();
      }
      if (device_interface_detail_data == null)       continue;
      char[] driverNameChars=new char[256];
      if (!SetupDiEnumDeviceInfo(device_info_set,deviceIndex,devinfo_data)) {
        reportLastError();
        continue;
      }
      if (!SetupDiGetDeviceRegistryProperty(device_info_set,devinfo_data,SPDRP_CLASS,null,driverNameChars,driverNameChars.length,null)) {
        reportLastError();
        continue;
      }
      int driverNameLen=0;
      while (driverNameChars[driverNameLen++] != 0)       ;
      String drivername=new String(driverNameChars,0,driverNameLen - 1);
      if (""String_Node_Str"".equals(drivername)) {
        if (!SetupDiGetDeviceRegistryProperty(device_info_set,devinfo_data,SPDRP_DRIVER,null,driverNameChars,driverNameChars.length,null)) {
          if (GetLastError() != ERROR_INVALID_DATA)           reportLastError();
          continue;
        }
        char[] deviceIdChars=new char[256];
        int[] deviceIdLen={0};
        if (!SetupDiGetDeviceInstanceId(device_info_set,devinfo_data,deviceIdChars,deviceIdChars.length,deviceIdLen))         reportLastError();
        String deviceId=new String(deviceIdChars);
        int[] parent={devinfo_data.DevInst};
        while (CM_Get_Parent(parent,parent[0],0) == 0) {
          int[] parentIdLen={0};
          if (CM_Get_Device_ID_Size(parentIdLen,parent[0],0) != CR_SUCCESS)           reportLastError();
          parentIdLen[0]++;
          char[] parentIdChars=new char[parentIdLen[0]];
          if (CM_Get_Device_ID(parent[0],parentIdChars,parentIdLen[0],0) != CR_SUCCESS)           reportLastError();
          String parentId=new String(parentIdChars,0,parentIdLen[0] - 1);
          if (parentId.startsWith(""String_Node_Str"")) {
            deviceId=parentId;
            break;
          }
        }
        String path=new String(device_interface_detail_data.DevicePath);
        devHandle=openDeviceHandle(path,true);
        if (devHandle == INVALID_HANDLE_VALUE)         break;
        HIDD_ATTRIBUTES attrib=new HIDD_ATTRIBUTES();
        attrib.Size=new NativeLong(attrib.size());
        HidD_GetAttributes(devHandle,attrib);
        list.add(new HidDeviceInfo(path,deviceId,devHandle,attrib));
        CloseHandle(devHandle);
      }
    }
    SetupDiDestroyDeviceInfoList(device_info_set);
    return list;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}"
60244,"@Override synchronized public int getFeatureReport(byte[] data,int length){
  if (!m_Open)   throw new IllegalStateException(""String_Node_Str"");
  if (false) {
    if (!HidD_GetFeature(m_Handle,data,length)) {
      System.out.println(GetLastError());
      return -1;
    }
  }
 else {
    int[] bytes={0};
    OVERLAPPED ol=new OVERLAPPED();
    Pointer buffer=new Memory(data.length);
    if (!DeviceIoControl(m_Handle,IOCTL_HID_GET_FEATURE,buffer,length,buffer,length,bytes,ol)) {
      if (GetLastError() != ERROR_IO_PENDING)       return -1;
    }
    if (!GetOverlappedResult(m_Handle,ol,bytes,true))     return -1;
    int n=bytes[0];
    byte[] t=buffer.getByteArray(0,n);
    System.arraycopy(t,0,data,0,n);
    return n;
  }
  return -1;
}","@Override synchronized public int getFeatureReport(byte[] data,int length){
  if (!m_Open)   throw new IllegalStateException(""String_Node_Str"");
  if (false) {
    if (!HidD_GetFeature(m_Handle,data,length)) {
      System.out.println(GetLastError());
      return -1;
    }
  }
 else {
    int[] bytes={0};
    OVERLAPPED ol=new OVERLAPPED();
    Pointer buffer=new Memory(data.length);
    if (!DeviceIoControl(m_Handle,IOCTL_HID_GET_FEATURE,buffer,length,buffer,length,bytes,ol)) {
      if (GetLastError() != ERROR_IO_PENDING)       return -1;
    }
    if (!GetOverlappedResult(m_Handle,ol,bytes,true))     return -1;
    int n=bytes[0] + 1;
    byte[] t=buffer.getByteArray(0,n);
    System.arraycopy(t,0,data,0,n);
    return n;
  }
  return -1;
}"
60245,"@Override synchronized public void close(){
  if (!m_Open)   throw new IllegalStateException(""String_Node_Str"");
  m_StopThread=true;
  if (m_InputReportLength > 0) {
    m_Thread.interrupt();
    m_SyncShutdown.waitAndSync();
  }
  CloseHandle(m_Handle);
  m_Backend.removeDevice(m_HidDeviceInfo.getDeviceId());
  m_Open=false;
}","@Override synchronized public void close(){
  if (!m_Open)   throw new IllegalStateException(""String_Node_Str"");
  m_StopThread=true;
  if (m_InputReportLength > 0) {
    CancelIoEx(m_Handle,null);
    m_Thread.interrupt();
    m_SyncShutdown.waitAndSync();
  }
  CloseHandle(m_Handle);
  m_Backend.removeDevice(m_HidDeviceInfo.getDeviceId());
  m_Open=false;
}"
60246,"@Override public List<purejavahidapi.HidDeviceInfo> enumerateDevices(){
  try {
    List<purejavahidapi.HidDeviceInfo> list=new LinkedList<purejavahidapi.HidDeviceInfo>();
    GUID InterfaceClassGuid=new GUID(0x4d1e55b2,0xf16f,0x11cf,0x88,0xcb,0x00,0x11,0x11,0x00,0x00,0x30);
    SP_DEVINFO_DATA devinfo_data=new SP_DEVINFO_DATA();
    SP_DEVICE_INTERFACE_DATA device_interface_data=new SP_DEVICE_INTERFACE_DATA();
    SP_DEVICE_INTERFACE_DETAIL_DATA_A device_interface_detail_data=null;
    HDEVINFO device_info_set=null;
    int deviceIndex=0;
    int i;
    devinfo_data.cbSize=devinfo_data.size();
    device_interface_data.cbSize=device_interface_data.size();
    device_info_set=SetupDiGetClassDevs(InterfaceClassGuid,null,null,DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);
    for (; ; ) {
      HANDLE devHandle=INVALID_HANDLE_VALUE;
      if (!SetupDiEnumDeviceInterfaces(device_info_set,null,InterfaceClassGuid,deviceIndex,device_interface_data)) {
        if (GetLastError() == ERROR_NO_MORE_ITEMS)         break;
        reportLastError();
      }
      ;
      int[] required_size={0};
      if (!SetupDiGetDeviceInterfaceDetail(device_info_set,device_interface_data,null,0,required_size,null)) {
        if (GetLastError() != ERROR_INSUFFICIENT_BUFFER)         reportLastError();
      }
      device_interface_detail_data=new SP_DEVICE_INTERFACE_DETAIL_DATA_A(required_size[0]);
      if (!SetupDiGetDeviceInterfaceDetail(device_info_set,device_interface_data,device_interface_detail_data,required_size[0],null,null))       reportLastError();
      boolean dfound=false;
      for (i=0; ; i++) {
        char[] driverNameChars=new char[256];
        if (!SetupDiEnumDeviceInfo(device_info_set,i,devinfo_data)) {
          if (GetLastError() == ERROR_NO_MORE_ITEMS)           break;
          reportLastError();
        }
        if (!SetupDiGetDeviceRegistryProperty(device_info_set,devinfo_data,SPDRP_CLASS,null,driverNameChars,driverNameChars.length,null)) {
          if (GetLastError() == ERROR_INVALID_DATA)           continue;
          reportLastError();
        }
        int driverNameLen=0;
        while (driverNameChars[driverNameLen++] != 0)         ;
        String drivername=new String(driverNameChars,0,driverNameLen - 1);
        if (""String_Node_Str"".equals(drivername)) {
          if (SetupDiGetDeviceRegistryProperty(device_info_set,devinfo_data,SPDRP_DRIVER,null,driverNameChars,driverNameChars.length,null)) {
            dfound=true;
            break;
          }
          if (GetLastError() != ERROR_INVALID_DATA)           reportLastError();
        }
      }
      if (dfound) {
        char[] deviceIdChars=new char[256];
        int[] deviceIdLen={0};
        if (SetupDiGetDeviceInstanceId(device_info_set,devinfo_data,deviceIdChars,deviceIdChars.length,deviceIdLen))         reportLastError();
        String deviceId=new String(deviceIdChars);
        int[] parent={devinfo_data.DevInst};
        while (CM_Get_Parent(parent,parent[0],0) == 0) {
          int[] parentIdLen={0};
          if (CM_Get_Device_ID_Size(parentIdLen,parent[0],0) != CR_SUCCESS)           reportLastError();
          parentIdLen[0]++;
          char[] parentIdChars=new char[parentIdLen[0]];
          if (CM_Get_Device_ID(parent[0],parentIdChars,parentIdLen[0],0) != CR_SUCCESS)           reportLastError();
          String parentId=new String(parentIdChars,0,parentIdLen[0] - 1);
          if (parentId.startsWith(""String_Node_Str"")) {
            deviceId=parentId;
            break;
          }
        }
        String path=new String(device_interface_detail_data.DevicePath);
        path+=DEVICE_ID_SEPARATOR + deviceId;
        devHandle=openDeviceHandle(path,true);
        if (devHandle == INVALID_HANDLE_VALUE)         break;
        HIDD_ATTRIBUTES attrib=new HIDD_ATTRIBUTES();
        attrib.Size=new NativeLong(attrib.size());
        HidD_GetAttributes(devHandle,attrib);
        list.add(new HidDeviceInfo(path,devHandle,attrib));
        CloseHandle(devHandle);
      }
      deviceIndex++;
    }
    SetupDiDestroyDeviceInfoList(device_info_set);
    return list;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}","@Override public List<purejavahidapi.HidDeviceInfo> enumerateDevices(){
  try {
    List<purejavahidapi.HidDeviceInfo> list=new LinkedList<purejavahidapi.HidDeviceInfo>();
    GUID InterfaceClassGuid=new GUID(0x4d1e55b2,0xf16f,0x11cf,0x88,0xcb,0x00,0x11,0x11,0x00,0x00,0x30);
    SP_DEVINFO_DATA devinfo_data=new SP_DEVINFO_DATA();
    SP_DEVICE_INTERFACE_DATA device_interface_data=new SP_DEVICE_INTERFACE_DATA();
    SP_DEVICE_INTERFACE_DETAIL_DATA_A device_interface_detail_data=null;
    HDEVINFO device_info_set=null;
    int deviceIndex=0;
    int i;
    devinfo_data.cbSize=devinfo_data.size();
    device_interface_data.cbSize=device_interface_data.size();
    device_info_set=SetupDiGetClassDevs(InterfaceClassGuid,null,null,DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);
    for (; ; ) {
      HANDLE devHandle=INVALID_HANDLE_VALUE;
      if (!SetupDiEnumDeviceInterfaces(device_info_set,null,InterfaceClassGuid,deviceIndex,device_interface_data)) {
        if (GetLastError() == ERROR_NO_MORE_ITEMS)         break;
        reportLastError();
      }
      ;
      int[] required_size={0};
      if (!SetupDiGetDeviceInterfaceDetail(device_info_set,device_interface_data,null,0,required_size,null)) {
        if (GetLastError() != ERROR_INSUFFICIENT_BUFFER)         reportLastError();
      }
      device_interface_detail_data=new SP_DEVICE_INTERFACE_DETAIL_DATA_A(required_size[0]);
      if (!SetupDiGetDeviceInterfaceDetail(device_info_set,device_interface_data,device_interface_detail_data,required_size[0],null,null))       reportLastError();
      char[] driverNameChars=new char[256];
      if (!SetupDiEnumDeviceInfo(device_info_set,deviceIndex,devinfo_data)) {
        reportLastError();
        continue;
      }
      if (!SetupDiGetDeviceRegistryProperty(device_info_set,devinfo_data,SPDRP_CLASS,null,driverNameChars,driverNameChars.length,null)) {
        reportLastError();
        continue;
      }
      int driverNameLen=0;
      while (driverNameChars[driverNameLen++] != 0)       ;
      String drivername=new String(driverNameChars,0,driverNameLen - 1);
      if (""String_Node_Str"".equals(drivername)) {
        if (!SetupDiGetDeviceRegistryProperty(device_info_set,devinfo_data,SPDRP_DRIVER,null,driverNameChars,driverNameChars.length,null)) {
          if (GetLastError() != ERROR_INVALID_DATA)           reportLastError();
          continue;
        }
        char[] deviceIdChars=new char[256];
        int[] deviceIdLen={0};
        if (!SetupDiGetDeviceInstanceId(device_info_set,devinfo_data,deviceIdChars,deviceIdChars.length,deviceIdLen))         reportLastError();
        String deviceId=new String(deviceIdChars);
        int[] parent={devinfo_data.DevInst};
        while (CM_Get_Parent(parent,parent[0],0) == 0) {
          int[] parentIdLen={0};
          if (CM_Get_Device_ID_Size(parentIdLen,parent[0],0) != CR_SUCCESS)           reportLastError();
          parentIdLen[0]++;
          char[] parentIdChars=new char[parentIdLen[0]];
          if (CM_Get_Device_ID(parent[0],parentIdChars,parentIdLen[0],0) != CR_SUCCESS)           reportLastError();
          String parentId=new String(parentIdChars,0,parentIdLen[0] - 1);
          if (parentId.startsWith(""String_Node_Str"")) {
            deviceId=parentId;
            break;
          }
        }
        String path=new String(device_interface_detail_data.DevicePath);
        path+=DEVICE_ID_SEPARATOR + deviceId;
        devHandle=openDeviceHandle(path,true);
        if (devHandle == INVALID_HANDLE_VALUE)         break;
        HIDD_ATTRIBUTES attrib=new HIDD_ATTRIBUTES();
        attrib.Size=new NativeLong(attrib.size());
        HidD_GetAttributes(devHandle,attrib);
        list.add(new HidDeviceInfo(path,devHandle,attrib));
        CloseHandle(devHandle);
      }
      deviceIndex++;
    }
    SetupDiDestroyDeviceInfoList(device_info_set);
    return list;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}"
60247,"static public HidDevice openFromPath(String path,Frontend frontend){
  HidDevice.processPendingEvents();
  CFSetRef device_set=IOHIDManagerCopyDevices(m_HidManager);
  int num_devices=(int)CFSetGetCount(device_set);
  Pointer[] device_array=new Pointer[(int)num_devices];
  CFSetGetValues(device_set,device_array);
  for (int i=0; i < num_devices; i++) {
    IOHIDDeviceRef os_dev=new IOHIDDeviceRef(device_array[i]);
    if (path.equals(HidDevice.createPathForDevide(os_dev))) {
      int ret=IOHIDDeviceOpen(os_dev,kIOHIDOptionsTypeNone);
      if (ret == kIOReturnSuccess) {
        CFRetain(os_dev);
        final HidDevice dev=new HidDevice(os_dev,frontend);
        CFRelease(device_set);
        return dev;
      }
    }
  }
  CFRelease(device_set);
  return null;
}","static public HidDevice openFromPath(String path,Frontend frontend){
  HidDevice.processPendingEvents();
  CFSetRef device_set=IOHIDManagerCopyDevices(m_HidManager);
  int num_devices=(int)CFSetGetCount(device_set);
  Pointer[] device_array=new Pointer[(int)num_devices];
  CFSetGetValues(device_set,device_array);
  for (int i=0; i < num_devices; i++) {
    IOHIDDeviceRef os_dev=new IOHIDDeviceRef(device_array[i]);
    String x=HidDevice.createPathForDevide(os_dev);
    if (path.equals(x)) {
      int ret=IOHIDDeviceOpen(os_dev,kIOHIDOptionsTypeNone);
      if (ret == kIOReturnSuccess) {
        CFRetain(os_dev);
        CFRelease(device_set);
        final HidDevice dev=new HidDevice(os_dev,frontend);
        return dev;
      }
 else {
        System.out.printf(""String_Node_Str"",(ret >> (32 - 6)) & 0x3f,(ret >> (32 - 6 - 12)) & 0xFFF,ret & 0x3FFF);
      }
    }
  }
  CFRelease(device_set);
  return null;
}"
60248,"@Override synchronized public int setOutputReport(byte reportID,byte[] data,int length){
  if (!m_Open)   throw new IllegalStateException(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  int wlen=length;
  int offs=0;
  if (reportID != 0) {
    wlen++;
    offs=1;
    m_OutputReportBytes[0]=reportID;
  }
  System.arraycopy(data,0,m_OutputReportBytes,offs,length);
  int len=write(m_DeviceHandle,m_OutputReportBytes,wlen);
  if (len < 0)   return len;
  return len - offs;
}","@Override synchronized public int setOutputReport(byte reportID,byte[] data,int length){
  if (!m_Open)   throw new IllegalStateException(""String_Node_Str"");
  if (m_UsesNumberedReports)   m_OutputReportBytes[0]=reportID;
 else   m_OutputReportBytes[0]=0;
  System.arraycopy(data,0,m_OutputReportBytes,1,length);
  int len=write(m_DeviceHandle,m_OutputReportBytes,length + 1);
  if (len < 0)   return len;
  return len - 1;
}"
60249,"@TargetApi(Build.VERSION_CODES.L) @Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_anime_details);
  toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  mActionBar=getSupportActionBar();
  api=new HummingbirdApi(this);
  prefMan=new PrefManager(this);
  mActionBar.setDisplayHomeAsUpEnabled(true);
  anime=(Anime)getIntent().getSerializableExtra(ARG_ANIME_OBJ);
  ANIME_ID=getIntent().getStringExtra(ARG_ID);
  if (savedInstanceState != null) {
    Anime savedAnime=(Anime)savedInstanceState.getSerializable(STATE_ANIME);
    if (savedAnime != null)     anime=savedAnime;
    LibraryEntry savedLibraryEntry=(LibraryEntry)savedInstanceState.getSerializable(STATE_LIBRARY_ENTRY);
    if (savedLibraryEntry != null)     libraryEntry=savedLibraryEntry;
  }
  mActionBarBackgroundDrawable=new ColorDrawable(darkMutedColor != 0 ? darkMutedColor : getResources().getColor(R.color.neutral_darker));
  mActionBarBackgroundDrawable.setAlpha(0);
  toolbar.setBackgroundDrawable(mActionBarBackgroundDrawable);
  mActionButton=(FloatingActionButton)findViewById(R.id.fab);
  mQuickReturnView=toolbar;
  mPlaceholderView=findViewById(R.id.placeholder);
  mObservableScrollView=(ObservableScrollView)findViewById(R.id.anime_details_scroll_view);
  mObservableScrollView.setCallbacks(this);
  mObservableScrollView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      onScrollChanged(mObservableScrollView.getScrollY());
      mMaxScrollY=mObservableScrollView.computeVerticalScrollRange() - mObservableScrollView.getHeight();
      mQuickReturnHeight=mQuickReturnView.getHeight();
      int headerHeight=mHeaderImage.getHeight();
      if (!firstGlobalLayoutPerformed && headerHeight != 0) {
        updateHeaderHeight(headerHeight);
        firstGlobalLayoutPerformed=true;
      }
    }
  }
);
  mContentsHolder=(LinearLayout)findViewById(R.id.anime_details_content_holder);
  mInfoHolder=(FrameLayout)findViewById(R.id.anime_details_info_holder);
  mMoreInfoHolder=(LinearLayout)findViewById(R.id.anime_details_more_info_holder);
  mLibraryInfoHolder=(FrameLayout)findViewById(R.id.anime_details_library_info_holder);
  mHeaderHolder=(FrameLayout)findViewById(R.id.anime_details_header_holder);
  mHeaderImage=(ImageView)findViewById(R.id.anime_details_header);
  mCoverHolder=(FrameLayout)findViewById(R.id.anime_details_cover_image_holder);
  mCoverImage=(ImageView)findViewById(R.id.anime_details_cover_image);
  mTitle=(TextView)findViewById(R.id.anime_details_title);
  mType=(TextView)findViewById(R.id.anime_details_type);
  mGenre=(TextView)findViewById(R.id.anime_details_genres);
  mEpisodeCount=(TextView)findViewById(R.id.anime_details_episode_count);
  mEpisodeLength=(TextView)findViewById(R.id.anime_details_episode_duration);
  mAgeRating=(TextView)findViewById(R.id.anime_details_age_rating);
  mAired=(TextView)findViewById(R.id.anime_details_aired);
  mCommunityRating=(TextView)findViewById(R.id.anime_details_community_rating);
  mSynopsisHolder=(LinearLayout)findViewById(R.id.anime_details_synopsis_holder);
  mSynopsis=(TextView)findViewById(R.id.anime_details_synopsis);
  mMoreSimilarAnime=(LinearLayout)findViewById(R.id.anime_details_more_similar_anime);
  mLibraryProgressBar=(ProgressBar)findViewById(R.id.anime_details_library_progress_bar);
  mStatusSpinner=(Spinner)findViewById(R.id.anime_details_status_spinner);
  mEpisodesHolder=(LinearLayout)findViewById(R.id.anime_details_library_episodes_holder);
  mEpisodes=(TextView)findViewById(R.id.anime_details_library_episodes);
  mRewatching=(SwitchCompat)findViewById(R.id.anime_details_library_rewatching);
  mRewatchedTimesHolder=(LinearLayout)findViewById(R.id.anime_details_library_rewatched_holder);
  mRewatchedTimes=(TextView)findViewById(R.id.anime_details_library_rewatched);
  mPrivate=(SwitchCompat)findViewById(R.id.anime_details_library_private);
  mRatingBar=(RatingBar)findViewById(R.id.anime_details_library_rating_advanced);
  mSimpleRatingView=(SimpleRatingView)findViewById(R.id.anime_details_library_rating_simple);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    ViewOutlineProvider infoOutlineProvider=new ViewOutlineProvider(){
      @Override public void getOutline(      View view,      Outline outline){
        outline.setRect(0,Utils.dpToPx(AnimeDetailsActivity.this,getResources().getDimension(R.dimen.offset_details_info_card)),view.getWidth(),view.getHeight());
      }
    }
;
    mInfoHolder.setOutlineProvider(infoOutlineProvider);
  }
  ViewCompat.setElevation(mInfoHolder,Utils.dpToPx(this,2));
  ViewCompat.setElevation(mMoreInfoHolder,Utils.dpToPx(this,2));
  ViewCompat.setElevation(mLibraryInfoHolder,Utils.dpToPx(this,2));
  if (anime != null) {
    displayAnimeInfo();
    if (libraryEntry == null)     new LibraryEntryTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
 else     displayLibraryElements();
  }
 else   new AnimeInfoTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,true);
}","@TargetApi(Build.VERSION_CODES.L) @Override protected void onCreate(Bundle savedInstanceState){
  getWindow().requestFeature(Window.FEATURE_CONTENT_TRANSITIONS);
  Transition sharedElem=TransitionInflater.from(this).inflateTransition(R.transition.move_scale_transition);
  getWindow().setSharedElementEnterTransition(sharedElem);
  getWindow().setSharedElementExitTransition(sharedElem);
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_anime_details);
  toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  mActionBar=getSupportActionBar();
  api=new HummingbirdApi(this);
  prefMan=new PrefManager(this);
  mActionBar.setDisplayHomeAsUpEnabled(true);
  anime=(Anime)getIntent().getSerializableExtra(ARG_ANIME_OBJ);
  ANIME_ID=getIntent().getStringExtra(ARG_ID);
  if (savedInstanceState != null) {
    Anime savedAnime=(Anime)savedInstanceState.getSerializable(STATE_ANIME);
    if (savedAnime != null)     anime=savedAnime;
    LibraryEntry savedLibraryEntry=(LibraryEntry)savedInstanceState.getSerializable(STATE_LIBRARY_ENTRY);
    if (savedLibraryEntry != null)     libraryEntry=savedLibraryEntry;
  }
  mActionBarBackgroundDrawable=new ColorDrawable(darkMutedColor != 0 ? darkMutedColor : getResources().getColor(R.color.neutral_darker));
  mActionBarBackgroundDrawable.setAlpha(0);
  toolbar.setBackgroundDrawable(mActionBarBackgroundDrawable);
  mActionButton=(FloatingActionButton)findViewById(R.id.fab);
  mQuickReturnView=toolbar;
  mPlaceholderView=findViewById(R.id.placeholder);
  mObservableScrollView=(ObservableScrollView)findViewById(R.id.anime_details_scroll_view);
  mObservableScrollView.setCallbacks(this);
  mObservableScrollView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      onScrollChanged(mObservableScrollView.getScrollY());
      mMaxScrollY=mObservableScrollView.computeVerticalScrollRange() - mObservableScrollView.getHeight();
      mQuickReturnHeight=mQuickReturnView.getHeight();
      int headerHeight=mHeaderImage.getHeight();
      if (!firstGlobalLayoutPerformed && headerHeight != 0) {
        updateHeaderHeight(headerHeight);
        firstGlobalLayoutPerformed=true;
      }
    }
  }
);
  mContentsHolder=(LinearLayout)findViewById(R.id.anime_details_content_holder);
  mInfoHolder=(FrameLayout)findViewById(R.id.anime_details_info_holder);
  mMoreInfoHolder=(LinearLayout)findViewById(R.id.anime_details_more_info_holder);
  mLibraryInfoHolder=(FrameLayout)findViewById(R.id.anime_details_library_info_holder);
  mHeaderHolder=(FrameLayout)findViewById(R.id.anime_details_header_holder);
  mHeaderImage=(ImageView)findViewById(R.id.anime_details_header);
  mCoverHolder=(FrameLayout)findViewById(R.id.anime_details_cover_image_holder);
  mCoverImage=(ImageView)findViewById(R.id.anime_details_cover_image);
  mTitle=(TextView)findViewById(R.id.anime_details_title);
  mType=(TextView)findViewById(R.id.anime_details_type);
  mGenre=(TextView)findViewById(R.id.anime_details_genres);
  mEpisodeCount=(TextView)findViewById(R.id.anime_details_episode_count);
  mEpisodeLength=(TextView)findViewById(R.id.anime_details_episode_duration);
  mAgeRating=(TextView)findViewById(R.id.anime_details_age_rating);
  mAired=(TextView)findViewById(R.id.anime_details_aired);
  mCommunityRating=(TextView)findViewById(R.id.anime_details_community_rating);
  mSynopsisHolder=(LinearLayout)findViewById(R.id.anime_details_synopsis_holder);
  mSynopsis=(TextView)findViewById(R.id.anime_details_synopsis);
  mMoreSimilarAnime=(LinearLayout)findViewById(R.id.anime_details_more_similar_anime);
  mLibraryProgressBar=(ProgressBar)findViewById(R.id.anime_details_library_progress_bar);
  mStatusSpinner=(Spinner)findViewById(R.id.anime_details_status_spinner);
  mEpisodesHolder=(LinearLayout)findViewById(R.id.anime_details_library_episodes_holder);
  mEpisodes=(TextView)findViewById(R.id.anime_details_library_episodes);
  mRewatching=(SwitchCompat)findViewById(R.id.anime_details_library_rewatching);
  mRewatchedTimesHolder=(LinearLayout)findViewById(R.id.anime_details_library_rewatched_holder);
  mRewatchedTimes=(TextView)findViewById(R.id.anime_details_library_rewatched);
  mPrivate=(SwitchCompat)findViewById(R.id.anime_details_library_private);
  mRatingBar=(RatingBar)findViewById(R.id.anime_details_library_rating_advanced);
  mSimpleRatingView=(SimpleRatingView)findViewById(R.id.anime_details_library_rating_simple);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    ViewOutlineProvider infoOutlineProvider=new ViewOutlineProvider(){
      @Override public void getOutline(      View view,      Outline outline){
        outline.setRect(0,Utils.dpToPx(AnimeDetailsActivity.this,getResources().getDimension(R.dimen.offset_details_info_card)),view.getWidth(),view.getHeight());
      }
    }
;
    mInfoHolder.setOutlineProvider(infoOutlineProvider);
  }
  ViewCompat.setElevation(mInfoHolder,Utils.dpToPx(this,2));
  ViewCompat.setElevation(mMoreInfoHolder,Utils.dpToPx(this,2));
  ViewCompat.setElevation(mLibraryInfoHolder,Utils.dpToPx(this,2));
  if (anime != null) {
    displayAnimeInfo();
    if (libraryEntry == null)     new LibraryEntryTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
 else     displayLibraryElements();
  }
 else   new AnimeInfoTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,true);
}"
60250,"@Override protected void onPostExecute(Integer result){
  super.onPostExecute(result);
  if (result == Results.CODE_OK) {
    mGrid.setAdapter(new LibraryAdapter(context,R.layout.item_library,mLibrary));
    mGrid.setOnItemClickListener(new AdapterView.OnItemClickListener(){
      @Override public void onItemClick(      AdapterView<?> adapterView,      View view,      int position,      long l){
        Intent intent=new Intent(context,AnimeDetailsActivity.class);
        intent.putExtra(AnimeDetailsActivity.ARG_ID,mLibrary.get(position).getAnime().getId());
        intent.putExtra(AnimeDetailsActivity.ARG_ANIME_OBJ,mLibrary.get(position).getAnime());
        ActivityOptionsCompat transition=ActivityOptionsCompat.makeSceneTransitionAnimation((Activity)context,Pair.create(view,""String_Node_Str""),Pair.create((View)parent.getFab(),""String_Node_Str""),Pair.create(view.findViewById(R.id.item_library_paper),""String_Node_Str""));
        Utils.startActivityWithTransition(context,intent,transition);
      }
    }
);
    if (mFlipper.getDisplayedChild() == 0)     mFlipper.showNext();
  }
 else {
    if (errorKind == RetrofitError.Kind.HTTP)     mErrorView.setError(result);
 else     if (errorKind == RetrofitError.Kind.NETWORK)     mErrorView.setErrorDetail(R.string.error_connection);
 else     mErrorView.setErrorDetail(R.string.error_unknown);
    if (mFlipper.getDisplayedChild() == 0) {
      mFlipper.showNext();
      mFlipper.showNext();
    }
 else     if (mFlipper.getDisplayedChild() == 1)     mFlipper.showNext();
  }
}","@Override protected void onPostExecute(Integer result){
  super.onPostExecute(result);
  if (result == Results.CODE_OK) {
    mGrid.setAdapter(new LibraryAdapter(context,R.layout.item_library,mLibrary));
    mGrid.setOnItemClickListener(new AdapterView.OnItemClickListener(){
      @Override public void onItemClick(      AdapterView<?> adapterView,      View view,      int position,      long l){
        Intent intent=new Intent(context,AnimeDetailsActivity.class);
        intent.putExtra(AnimeDetailsActivity.ARG_ID,mLibrary.get(position).getAnime().getId());
        intent.putExtra(AnimeDetailsActivity.ARG_ANIME_OBJ,mLibrary.get(position).getAnime());
        ActivityOptionsCompat transition=ActivityOptionsCompat.makeSceneTransitionAnimation((Activity)context,Pair.create(view.findViewById(R.id.item_library_cover),""String_Node_Str""),Pair.create((View)parent.getFab(),""String_Node_Str""),Pair.create(view,""String_Node_Str""));
        Utils.startActivityWithTransition(context,intent,transition);
      }
    }
);
    if (mFlipper.getDisplayedChild() == 0)     mFlipper.showNext();
  }
 else {
    if (errorKind == RetrofitError.Kind.HTTP)     mErrorView.setError(result);
 else     if (errorKind == RetrofitError.Kind.NETWORK)     mErrorView.setErrorDetail(R.string.error_connection);
 else     mErrorView.setErrorDetail(R.string.error_unknown);
    if (mFlipper.getDisplayedChild() == 0) {
      mFlipper.showNext();
      mFlipper.showNext();
    }
 else     if (mFlipper.getDisplayedChild() == 1)     mFlipper.showNext();
  }
}"
60251,"@Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long l){
  Intent intent=new Intent(context,AnimeDetailsActivity.class);
  intent.putExtra(AnimeDetailsActivity.ARG_ID,mLibrary.get(position).getAnime().getId());
  intent.putExtra(AnimeDetailsActivity.ARG_ANIME_OBJ,mLibrary.get(position).getAnime());
  ActivityOptionsCompat transition=ActivityOptionsCompat.makeSceneTransitionAnimation((Activity)context,Pair.create(view,""String_Node_Str""),Pair.create((View)parent.getFab(),""String_Node_Str""),Pair.create(view.findViewById(R.id.item_library_paper),""String_Node_Str""));
  Utils.startActivityWithTransition(context,intent,transition);
}","@Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long l){
  Intent intent=new Intent(context,AnimeDetailsActivity.class);
  intent.putExtra(AnimeDetailsActivity.ARG_ID,mLibrary.get(position).getAnime().getId());
  intent.putExtra(AnimeDetailsActivity.ARG_ANIME_OBJ,mLibrary.get(position).getAnime());
  ActivityOptionsCompat transition=ActivityOptionsCompat.makeSceneTransitionAnimation((Activity)context,Pair.create(view.findViewById(R.id.item_library_cover),""String_Node_Str""),Pair.create((View)parent.getFab(),""String_Node_Str""),Pair.create(view,""String_Node_Str""));
  Utils.startActivityWithTransition(context,intent,transition);
}"
60252,"public LibraryEntry getLibraryEntryIfAnimeExists(String animeId){
  Map<String,String> params=new HashMap<String,String>();
  if (prefMan.getAuthToken() != null)   params.put(""String_Node_Str"",prefMan.getAuthToken());
  for (  LibraryEntry entry : getLibrary(prefMan.getUsername(),params)) {
    if (entry.getAnime().getId().equals(animeId))     return entry;
  }
  return null;
}","public LibraryEntry getLibraryEntryIfAnimeExists(String animeId){
  Map<String,String> params=new HashMap<String,String>();
  if (prefMan.getAuthToken() != null)   params.put(""String_Node_Str"",prefMan.getAuthToken());
  LibraryEntry libEntry=null;
  for (  LibraryEntry entry : getLibrary(prefMan.getUsername(),params)) {
    if (entry.getAnime().getId().equals(animeId))     libEntry=entry;
  }
  return libEntry;
}"
60253,"@Override protected void onPostExecute(String result){
  super.onPostExecute(result);
  if (result.equals(Results.RESULT_SUCCESS)) {
    Picasso.with(context).load(user.getAvatar()).transform(new CircleTransformation()).into(mAvatar);
    Picasso.with(context).load(user.getCoverImage()).into(mCoverImage);
  }
 else {
  }
}","@Override protected void onPostExecute(String result){
  super.onPostExecute(result);
  if (result.equals(Results.RESULT_SUCCESS)) {
    Picasso.with(context).load(user.getAvatar()).transform(new CircleTransformation()).into(mAvatar);
    Picasso.with(context).load(user.getCoverImage()).transform(new UserCoverTransformation()).into(mCoverImage);
  }
 else {
  }
}"
60254,"@Override protected Integer doInBackground(Void... voids){
  try {
    user=api.getUser(username);
    coverBitmap=Picasso.with(context).load(user.getCoverImage()).get();
    darkMutedColor=Palette.generate(coverBitmap).getDarkMutedColor(R.color.apptheme_primary);
    return Results.CODE_OK;
  }
 catch (  RetrofitError e) {
    errorKind=e.getKind();
    if (e.getKind() == RetrofitError.Kind.NETWORK) {
      Log.e(TAG,e.getMessage());
      return Results.CODE_NETWORK_ERROR;
    }
 else     if (e.getKind() == RetrofitError.Kind.HTTP) {
      Log.e(TAG,e.getMessage());
      return e.getResponse().getStatus();
    }
 else {
      Log.e(TAG,e.getMessage());
      return Results.CODE_UNKNOWN;
    }
  }
catch (  Exception e) {
    e.printStackTrace();
    return Results.CODE_UNKNOWN;
  }
}","@Override protected Integer doInBackground(Void... voids){
  try {
    user=api.getUser(username);
    coverBitmap=Picasso.with(context).load(user.getCoverImage()).transform(new UserCoverTransformation()).get();
    darkMutedColor=Palette.generate(coverBitmap).getDarkMutedColor(R.color.apptheme_primary);
    return Results.CODE_OK;
  }
 catch (  RetrofitError e) {
    errorKind=e.getKind();
    if (e.getKind() == RetrofitError.Kind.NETWORK) {
      Log.e(TAG,e.getMessage());
      return Results.CODE_NETWORK_ERROR;
    }
 else     if (e.getKind() == RetrofitError.Kind.HTTP) {
      Log.e(TAG,e.getMessage());
      return e.getResponse().getStatus();
    }
 else {
      Log.e(TAG,e.getMessage());
      return Results.CODE_UNKNOWN;
    }
  }
catch (  Exception e) {
    e.printStackTrace();
    return Results.CODE_UNKNOWN;
  }
}"
60255,"public void displayLibraryElements(){
  if (libraryEntry != null) {
    mRemove.setVisibility(View.VISIBLE);
    mRemove.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        CustomDialog.Builder builder=new CustomDialog.Builder(AnimeDetailsActivity.this,R.string.title_remove,R.string.yes);
        builder.negativeText(R.string.no);
        builder.positiveColor(getResources().getColor(R.color.apptheme_primary));
        String contentText=getString(R.string.content_remove_are_you_sure);
        contentText=contentText.replace(""String_Node_Str"",anime.getCanonicalTitle());
        builder.content(contentText);
        CustomDialog dialog=builder.build();
        dialog.setClickListener(new CustomDialog.ClickListener(){
          @Override public void onConfirmClick(){
            new RemoveTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
          }
          @Override public void onCancelClick(){
          }
        }
);
        dialog.show();
      }
    }
);
    for (    Favorite fav : user.getFavorites())     if (fav.getItemId().equals(ANIME_ID))     mFavoritedHolder.setVisibility(View.VISIBLE);
    mLibraryHolder.setVisibility(View.VISIBLE);
    mLibraryHolder.setBackgroundDrawable(new ColorDrawable(vibrantColor));
    mEpisodes.setText(libraryEntry.getEpisodesWatched() + ""String_Node_Str"" + anime.getEpisodeCount());
    mRewatching.setChecked(libraryEntry.isRewatching());
    mRewatchedTimes.setText(libraryEntry.getNumberOfRewatches() + ""String_Node_Str"");
    mPrivate.setChecked(libraryEntry.isPrivate());
    Rating rating=libraryEntry.getRating();
    if (rating.isAdvanced()) {
      if (rating.getAdvancedRating() != null)       mRatingBar.setRating(Float.parseFloat(rating.getAdvancedRating()));
 else       mRatingBar.setRating(0);
      mRatingBar.setVisibility(View.VISIBLE);
      mRatingSimple.setVisibility(View.GONE);
    }
 else {
      if (rating.getSimpleRating() != null)       mRatingSimple.setText(rating.getSimpleRating());
 else       mRatingSimple.setText(Rating.RATING_SIMPLE_NEUTRAL);
      mRatingBar.setVisibility(View.GONE);
      mRatingSimple.setVisibility(View.VISIBLE);
    }
    newWatchStatus=libraryEntry.getStatus();
    newEpisodesWatched=libraryEntry.getEpisodesWatched();
    newIsRewatching=libraryEntry.isRewatching();
    newRewatchedTimes=libraryEntry.getNumberOfRewatches();
    newRating=libraryEntry.getRating().getAdvancedRating() != null ? libraryEntry.getRating().getAdvancedRating() : ""String_Node_Str"";
    ArrayAdapter<CharSequence> adapter=ArrayAdapter.createFromResource(AnimeDetailsActivity.this,R.array.library_watch_status_items,R.layout.item_spinner_library_status);
    adapter.setDropDownViewResource(R.layout.item_spinner_item_library_status);
    mStatusSpinner.setAdapter(adapter);
    String watchStatus=libraryEntry.getStatus();
    if (watchStatus.equals(""String_Node_Str""))     mStatusSpinner.setSelection(0);
    if (watchStatus.equals(""String_Node_Str""))     mStatusSpinner.setSelection(1);
    if (watchStatus.equals(""String_Node_Str""))     mStatusSpinner.setSelection(2);
    if (watchStatus.equals(""String_Node_Str""))     mStatusSpinner.setSelection(3);
    if (watchStatus.equals(""String_Node_Str""))     mStatusSpinner.setSelection(4);
    mEpisodesHolder.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        CustomDialog.Builder builder=new CustomDialog.Builder(AnimeDetailsActivity.this,R.string.content_episodes,R.string.ok);
        builder.negativeText(R.string.cancel);
        builder.positiveColor(getResources().getColor(R.color.apptheme_primary));
        CustomDialog dialog=builder.build();
        View dialogView=getLayoutInflater().inflate(R.layout.number_picker,null);
        final NumberPicker mNumberPicker=(NumberPicker)dialogView.findViewById(R.id.number_picker);
        dialog.setCustomView(dialogView);
        mNumberPicker.setMaxValue(anime.getEpisodeCount());
        mNumberPicker.setValue(newEpisodesWatched);
        mNumberPicker.setWrapSelectorWheel(false);
        dialog.setClickListener(new CustomDialog.ClickListener(){
          @Override public void onConfirmClick(){
            newEpisodesWatched=mNumberPicker.getValue();
            mEpisodes.setText(newEpisodesWatched + ""String_Node_Str"" + anime.getEpisodeCount());
            if (newEpisodesWatched == anime.getEpisodeCount())             mStatusSpinner.setSelection(2);
            updateUpdateButtonStatus(libraryEntry);
          }
          @Override public void onCancelClick(){
          }
        }
);
        dialog.show();
      }
    }
);
    mRewatching.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
      @Override public void onCheckedChanged(      CompoundButton compoundButton,      boolean isChecked){
        newIsRewatching=isChecked;
        updateUpdateButtonStatus(libraryEntry);
      }
    }
);
    mRewatchedTimesHolder.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        CustomDialog.Builder builder=new CustomDialog.Builder(AnimeDetailsActivity.this,R.string.content_rewatched,R.string.ok);
        builder.negativeText(R.string.cancel);
        builder.positiveColor(getResources().getColor(R.color.apptheme_primary));
        CustomDialog dialog=builder.build();
        View dialogView=getLayoutInflater().inflate(R.layout.number_picker,null);
        final NumberPicker mNumberPicker=(NumberPicker)dialogView.findViewById(R.id.number_picker);
        dialog.setCustomView(dialogView);
        mNumberPicker.setMaxValue(200);
        mNumberPicker.setValue(newRewatchedTimes);
        mNumberPicker.setWrapSelectorWheel(false);
        dialog.setClickListener(new CustomDialog.ClickListener(){
          @Override public void onConfirmClick(){
            newRewatchedTimes=mNumberPicker.getValue();
            mRewatchedTimes.setText(newRewatchedTimes + ""String_Node_Str"");
            updateUpdateButtonStatus(libraryEntry);
          }
          @Override public void onCancelClick(){
          }
        }
);
        dialog.show();
      }
    }
);
    mPrivate.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
      @Override public void onCheckedChanged(      CompoundButton compoundButton,      boolean b){
      }
    }
);
    mStatusSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
      @Override public void onItemSelected(      AdapterView<?> adapterView,      View view,      int position,      long l){
switch (position) {
case 0:
          newWatchStatus=""String_Node_Str"";
        break;
case 1:
      newWatchStatus=""String_Node_Str"";
    break;
case 2:
  newWatchStatus=""String_Node_Str"";
break;
case 3:
newWatchStatus=""String_Node_Str"";
break;
case 4:
newWatchStatus=""String_Node_Str"";
break;
}
updateUpdateButtonStatus(libraryEntry);
}
@Override public void onNothingSelected(AdapterView<?> adapterView){
}
}
);
mRatingBar.setOnRatingBarChangeListener(new RatingBar.OnRatingBarChangeListener(){
@Override public void onRatingChanged(RatingBar ratingBar,float rating,boolean fromUser){
newRating=rating + ""String_Node_Str"";
updateUpdateButtonStatus(libraryEntry);
}
}
);
mRatingSimple.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View view){
String rating=mRatingSimple.getText().toString();
if (rating.equals(Rating.RATING_SIMPLE_POSITIVE)) {
mRatingSimple.setText(Rating.RATING_SIMPLE_NEGATIVE);
newRating=""String_Node_Str"";
}
if (rating.equals(Rating.RATING_SIMPLE_NEGATIVE)) {
mRatingSimple.setText(Rating.RATING_SIMPLE_NEUTRAL);
newRating=""String_Node_Str"";
}
if (rating.equals(Rating.RATING_SIMPLE_NEUTRAL)) {
mRatingSimple.setText(Rating.RATING_SIMPLE_POSITIVE);
newRating=""String_Node_Str"";
}
updateUpdateButtonStatus(libraryEntry);
}
}
);
mAddToLibrary.setText(R.string.content_update);
mAddToLibrary.setEnabled(false);
mAddToLibrary.setOnClickListener(new OnLibraryUpdateClickListener());
}
 else {
mRemove.setVisibility(View.GONE);
mLibraryHolder.setVisibility(View.GONE);
}
}","public void displayLibraryElements(){
  if (libraryEntry != null) {
    mRemove.setVisibility(View.VISIBLE);
    mRemove.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        CustomDialog.Builder builder=new CustomDialog.Builder(AnimeDetailsActivity.this,R.string.title_remove,R.string.yes);
        builder.negativeText(R.string.no);
        builder.positiveColor(getResources().getColor(R.color.apptheme_primary));
        String contentText=getString(R.string.content_remove_are_you_sure);
        contentText=contentText.replace(""String_Node_Str"",anime.getCanonicalTitle());
        builder.content(contentText);
        CustomDialog dialog=builder.build();
        dialog.setClickListener(new CustomDialog.ClickListener(){
          @Override public void onConfirmClick(){
            new RemoveTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
          }
          @Override public void onCancelClick(){
          }
        }
);
        dialog.show();
      }
    }
);
    for (    Favorite fav : user.getFavorites())     if (fav.getItemId().equals(ANIME_ID))     mFavoritedHolder.setVisibility(View.VISIBLE);
    mLibraryHolder.setVisibility(View.VISIBLE);
    mLibraryHolder.setBackgroundDrawable(new ColorDrawable(vibrantColor));
    mEpisodes.setText(libraryEntry.getEpisodesWatched() + ""String_Node_Str"" + anime.getEpisodeCount());
    mRewatching.setChecked(libraryEntry.isRewatching());
    mRewatchedTimes.setText(libraryEntry.getNumberOfRewatches() + ""String_Node_Str"");
    mPrivate.setChecked(libraryEntry.isPrivate());
    Rating rating=libraryEntry.getRating();
    if (rating.isAdvanced()) {
      if (rating.getAdvancedRating() != null)       mRatingBar.setRating(Float.parseFloat(rating.getAdvancedRating()));
 else       mRatingBar.setRating(0);
      mRatingBar.setVisibility(View.VISIBLE);
      mRatingSimple.setVisibility(View.GONE);
    }
 else {
      if (rating.getSimpleRating() != null)       mRatingSimple.setText(rating.getSimpleRating());
 else       mRatingSimple.setText(Rating.RATING_SIMPLE_NEUTRAL);
      mRatingBar.setVisibility(View.GONE);
      mRatingSimple.setVisibility(View.VISIBLE);
    }
    newWatchStatus=libraryEntry.getStatus();
    newEpisodesWatched=libraryEntry.getEpisodesWatched();
    newIsRewatching=libraryEntry.isRewatching();
    newRewatchedTimes=libraryEntry.getNumberOfRewatches();
    newRating=libraryEntry.getRating().getAdvancedRating() != null ? libraryEntry.getRating().getAdvancedRating() : ""String_Node_Str"";
    ArrayAdapter<CharSequence> adapter=ArrayAdapter.createFromResource(AnimeDetailsActivity.this,R.array.library_watch_status_items,R.layout.item_spinner_library_status);
    adapter.setDropDownViewResource(R.layout.item_spinner_item_library_status);
    mStatusSpinner.setAdapter(adapter);
    String watchStatus=libraryEntry.getStatus();
    if (watchStatus.equals(""String_Node_Str""))     mStatusSpinner.setSelection(0);
    if (watchStatus.equals(""String_Node_Str""))     mStatusSpinner.setSelection(1);
    if (watchStatus.equals(""String_Node_Str""))     mStatusSpinner.setSelection(2);
    if (watchStatus.equals(""String_Node_Str""))     mStatusSpinner.setSelection(3);
    if (watchStatus.equals(""String_Node_Str""))     mStatusSpinner.setSelection(4);
    mEpisodesHolder.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        CustomDialog.Builder builder=new CustomDialog.Builder(AnimeDetailsActivity.this,R.string.content_episodes,R.string.ok);
        builder.negativeText(R.string.cancel);
        builder.positiveColor(getResources().getColor(R.color.apptheme_primary));
        CustomDialog dialog=builder.build();
        View dialogView=getLayoutInflater().inflate(R.layout.number_picker,null);
        final NumberPicker mNumberPicker=(NumberPicker)dialogView.findViewById(R.id.number_picker);
        dialog.setCustomView(dialogView);
        mNumberPicker.setMaxValue(anime.getEpisodeCount() != 0 ? anime.getEpisodeCount() : 1000);
        mNumberPicker.setValue(newEpisodesWatched);
        mNumberPicker.setWrapSelectorWheel(false);
        dialog.setClickListener(new CustomDialog.ClickListener(){
          @Override public void onConfirmClick(){
            newEpisodesWatched=mNumberPicker.getValue();
            mEpisodes.setText(newEpisodesWatched + ""String_Node_Str"" + anime.getEpisodeCount());
            if (newEpisodesWatched == anime.getEpisodeCount())             mStatusSpinner.setSelection(2);
            updateUpdateButtonStatus(libraryEntry);
          }
          @Override public void onCancelClick(){
          }
        }
);
        dialog.show();
      }
    }
);
    mRewatching.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
      @Override public void onCheckedChanged(      CompoundButton compoundButton,      boolean isChecked){
        newIsRewatching=isChecked;
        updateUpdateButtonStatus(libraryEntry);
      }
    }
);
    mRewatchedTimesHolder.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        CustomDialog.Builder builder=new CustomDialog.Builder(AnimeDetailsActivity.this,R.string.content_rewatched,R.string.ok);
        builder.negativeText(R.string.cancel);
        builder.positiveColor(getResources().getColor(R.color.apptheme_primary));
        CustomDialog dialog=builder.build();
        View dialogView=getLayoutInflater().inflate(R.layout.number_picker,null);
        final NumberPicker mNumberPicker=(NumberPicker)dialogView.findViewById(R.id.number_picker);
        dialog.setCustomView(dialogView);
        mNumberPicker.setMaxValue(200);
        mNumberPicker.setValue(newRewatchedTimes);
        mNumberPicker.setWrapSelectorWheel(false);
        dialog.setClickListener(new CustomDialog.ClickListener(){
          @Override public void onConfirmClick(){
            newRewatchedTimes=mNumberPicker.getValue();
            mRewatchedTimes.setText(newRewatchedTimes + ""String_Node_Str"");
            updateUpdateButtonStatus(libraryEntry);
          }
          @Override public void onCancelClick(){
          }
        }
);
        dialog.show();
      }
    }
);
    mPrivate.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
      @Override public void onCheckedChanged(      CompoundButton compoundButton,      boolean b){
      }
    }
);
    mStatusSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
      @Override public void onItemSelected(      AdapterView<?> adapterView,      View view,      int position,      long l){
switch (position) {
case 0:
          newWatchStatus=""String_Node_Str"";
        break;
case 1:
      newWatchStatus=""String_Node_Str"";
    break;
case 2:
  newWatchStatus=""String_Node_Str"";
break;
case 3:
newWatchStatus=""String_Node_Str"";
break;
case 4:
newWatchStatus=""String_Node_Str"";
break;
}
updateUpdateButtonStatus(libraryEntry);
}
@Override public void onNothingSelected(AdapterView<?> adapterView){
}
}
);
mRatingBar.setOnRatingBarChangeListener(new RatingBar.OnRatingBarChangeListener(){
@Override public void onRatingChanged(RatingBar ratingBar,float rating,boolean fromUser){
newRating=rating + ""String_Node_Str"";
updateUpdateButtonStatus(libraryEntry);
}
}
);
mRatingSimple.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View view){
String rating=mRatingSimple.getText().toString();
if (rating.equals(Rating.RATING_SIMPLE_POSITIVE)) {
mRatingSimple.setText(Rating.RATING_SIMPLE_NEGATIVE);
newRating=""String_Node_Str"";
}
if (rating.equals(Rating.RATING_SIMPLE_NEGATIVE)) {
mRatingSimple.setText(Rating.RATING_SIMPLE_NEUTRAL);
newRating=""String_Node_Str"";
}
if (rating.equals(Rating.RATING_SIMPLE_NEUTRAL)) {
mRatingSimple.setText(Rating.RATING_SIMPLE_POSITIVE);
newRating=""String_Node_Str"";
}
updateUpdateButtonStatus(libraryEntry);
}
}
);
mAddToLibrary.setText(R.string.content_update);
mAddToLibrary.setEnabled(false);
mAddToLibrary.setOnClickListener(new OnLibraryUpdateClickListener());
}
 else {
mRemove.setVisibility(View.GONE);
mLibraryHolder.setVisibility(View.GONE);
}
}"
60256,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  prefMan=new PrefManager(this);
  if (!prefMan.isAuthenticated()) {
    startActivity(new Intent(this,LoginActivity.class));
    finish();
  }
  setContentView(R.layout.activity_main);
  mNavigationDrawerFragment=(NavigationDrawerFragment)getFragmentManager().findFragmentById(R.id.navigation_drawer);
  mTitle=getTitle();
  mNavigationDrawerFragment.setUp(R.id.navigation_drawer,(DrawerLayout)findViewById(R.id.drawer_layout));
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  prefMan=new PrefManager(this);
  if (!prefMan.isAuthenticated()) {
    startActivity(new Intent(this,LoginActivity.class));
    finish();
  }
  setContentView(R.layout.activity_main);
  mNavigationDrawerFragment=(NavigationDrawerFragment)getFragmentManager().findFragmentById(R.id.navigation_drawer);
  mTitle=getTitle();
  mNavigationDrawerFragment.setUp(R.id.navigation_drawer,(DrawerLayout)findViewById(R.id.drawer_layout));
  onNavigationDrawerItemSelected(0);
}"
60257,"@Override public void onNavigationDrawerItemSelected(int position){
  FragmentManager fragmentManager=getFragmentManager();
  fragmentManager.beginTransaction().replace(R.id.container,new FeedFragment()).commit();
}","@Override public void onNavigationDrawerItemSelected(int position){
  FragmentManager fragmentManager=getFragmentManager();
  Fragment fragment=null;
switch (position) {
case 1000:
    fragment=new ProfileFragment();
  mTitle=getString(R.string.title_profile);
break;
case 0:
fragment=new FeedFragment();
mTitle=getString(R.string.title_feed);
break;
}
if (fragment != null) fragmentManager.beginTransaction().replace(R.id.container,fragment).commit();
getActionBar().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.apptheme_primary)));
}"
60258,"@Override public View onCreateView(LayoutInflater inflater,@Nullable ViewGroup container,@Nullable Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_main,null);
  final EditText mId=(EditText)rootView.findViewById(R.id.anime_id);
  Button mGo=(Button)rootView.findViewById(R.id.load_by_id);
  mGo.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Intent intent=new Intent(getActivity(),AnimeDetailsActivity.class);
      intent.putExtra(AnimeDetailsActivity.ARG_ID,Integer.parseInt(mId.getText().toString()));
      startActivity(intent);
    }
  }
);
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_main,null);
  final EditText mId=(EditText)rootView.findViewById(R.id.anime_id);
  Button mGo=(Button)rootView.findViewById(R.id.load_by_id);
  mGo.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Intent intent=new Intent(getActivity(),AnimeDetailsActivity.class);
      intent.putExtra(AnimeDetailsActivity.ARG_ID,Integer.parseInt(mId.getText().toString()));
      startActivity(intent);
    }
  }
);
  return rootView;
}"
60259,"@Override public void onClick(View view){
  getFragmentManager().beginTransaction().replace(R.id.container,new ProfileFragment()).commit();
  mDrawerLayout.closeDrawer(mFragmentContainerView);
}","@Override public void onClick(View view){
  getFragmentManager().beginTransaction().replace(R.id.container,new ProfileFragment()).commit();
  mDrawerLayout.closeDrawer(mFragmentContainerView);
  selectItem(ITEM_POSITION_PROFILE);
}"
60260,"@Override public void onItemClick(AdapterView<?> adapterView,View view,int i,long l){
  prefMan.setAuthToken(null);
  prefMan.setUsername(null);
  startActivity(new Intent(getActivity(),LoginActivity.class));
}","@Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long l){
switch (position) {
case 0:
    Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
  break;
case 1:
prefMan.logout();
startActivity(new Intent(getActivity(),LoginActivity.class));
getActivity().finish();
break;
}
}"
60261,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_navigation_drawer,null);
  String[] ArrayMain=getResources().getStringArray(R.array.list_main_strings);
  String[] ArraySecond=getResources().getStringArray(R.array.list_secondary_strings);
  ListView mListMain=(ListView)rootView.findViewById(R.id.nav_list_main);
  ListView mListSecondary=(ListView)rootView.findViewById(R.id.nav_list_second);
  mUsername=(TextView)rootView.findViewById(R.id.navigation_drawer_username);
  mAvatar=(ImageView)rootView.findViewById(R.id.navigation_drawer_avatar);
  mCoverImage=(ImageView)rootView.findViewById(R.id.navigation_drawer_cover);
  mProfile=(FrameLayout)rootView.findViewById(R.id.navigation_drawer_profile);
  mProfile.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      getFragmentManager().beginTransaction().replace(R.id.container,new ProfileFragment()).commit();
      mDrawerLayout.closeDrawer(mFragmentContainerView);
    }
  }
);
  username=prefMan.getUsername();
  mUsername.setText(username);
  new LoadTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  mListMain.setAdapter(new ArrayAdapter<String>(getActivity(),R.layout.nav_list_item_main,ArrayMain));
  mListSecondary.setAdapter(new ArrayAdapter<String>(getActivity(),R.layout.nav_list_item_secondary,ArraySecond));
  mListMain.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int i,    long l){
    }
  }
);
  mListSecondary.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int i,    long l){
      prefMan.setAuthToken(null);
      prefMan.setUsername(null);
      startActivity(new Intent(getActivity(),LoginActivity.class));
    }
  }
);
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_navigation_drawer,null);
  String[] ArrayMain=getResources().getStringArray(R.array.list_main_strings);
  String[] ArraySecond=getResources().getStringArray(R.array.list_secondary_strings);
  ListView mListMain=(ListView)rootView.findViewById(R.id.nav_list_main);
  ListView mListSecondary=(ListView)rootView.findViewById(R.id.nav_list_second);
  mUsername=(TextView)rootView.findViewById(R.id.navigation_drawer_username);
  mAvatar=(ImageView)rootView.findViewById(R.id.navigation_drawer_avatar);
  mCoverImage=(ImageView)rootView.findViewById(R.id.navigation_drawer_cover);
  mProfile=(FrameLayout)rootView.findViewById(R.id.navigation_drawer_profile);
  mProfile.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      getFragmentManager().beginTransaction().replace(R.id.container,new ProfileFragment()).commit();
      mDrawerLayout.closeDrawer(mFragmentContainerView);
      selectItem(ITEM_POSITION_PROFILE);
    }
  }
);
  username=prefMan.getUsername();
  mUsername.setText(username);
  new LoadTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
  mListMain.setAdapter(new ArrayAdapter<String>(getActivity(),R.layout.item_nav_main,ArrayMain));
  mListSecondary.setAdapter(new ArrayAdapter<String>(getActivity(),R.layout.item_nav_secondary,ArraySecond));
  mListMain.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long l){
      selectItem(position);
    }
  }
);
  mListSecondary.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long l){
switch (position) {
case 0:
        Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
      break;
case 1:
    prefMan.logout();
  startActivity(new Intent(getActivity(),LoginActivity.class));
getActivity().finish();
break;
}
}
}
);
return rootView;
}"
60262,"@Override public void reset() throws IOException {
  super.reset();
  jieba.reset();
}","@Override public void reset() throws IOException {
  super.reset();
  jieba.reset(this.input);
}"
60263,"@Override public Tokenizer create(AttributeFactory arg0,Reader in){
  System.out.println(""String_Node_Str"");
  return new JiebaTokenizer(in,segMode);
}","@Override public Tokenizer create(AttributeFactory arg0,Reader in){
  return new JiebaTokenizer(in,segMode);
}"
60264,"@Override protected TokenStreamComponents createComponents(String arg0,Reader in){
  return new TokenStreamComponents(new JiebaTokenizer(in,this.segMode));
}","@Override protected TokenStreamComponents createComponents(String field,Reader in){
  return new TokenStreamComponents(new JiebaTokenizer(in,this.segMode));
}"
60265,"protected JiebaTokenizer(Reader input,String segModeName){
  super(input);
  this.offsetAtt=addAttribute(OffsetAttribute.class);
  this.termAtt=addAttribute(CharTermAttribute.class);
  this.typeAtt=addAttribute(TypeAttribute.class);
  this.jiebaTagger=new JiebaSegmenter();
  if (null == segModeName) {
    segMode=SegMode.SEARCH;
  }
 else {
    segMode=SegMode.valueOf(segModeName);
  }
  StringBuilder bdr=new StringBuilder();
  try {
    BufferedReader reader=new BufferedReader(input);
    String line=null;
    while (null != (line=reader.readLine())) {
      bdr.append(line).append(""String_Node_Str"");
    }
    reader.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  List<SegToken> list=jiebaTagger.process(bdr.toString().trim(),segMode);
  tokens=list.iterator();
}","protected JiebaTokenizer(Reader input,String segModeName){
  super(input);
  this.offsetAtt=addAttribute(OffsetAttribute.class);
  this.termAtt=addAttribute(CharTermAttribute.class);
  this.typeAtt=addAttribute(TypeAttribute.class);
  jieba=new JiebaAdapter(input,segModeName);
}"
60266,"@Override public void reset() throws IOException {
  super.reset();
  jiebaTagger=new JiebaSegmenter();
}","@Override public void reset() throws IOException {
  super.reset();
  jieba.reset();
}"
60267,"@Override public boolean incrementToken() throws IOException {
  clearAttributes();
  if (tokens.hasNext()) {
    SegToken token=tokens.next();
    termAtt.append(token.word.getToken());
    termAtt.setLength(token.word.length());
    offsetAtt.setOffset(token.startOffset,token.endOffset);
    endPosition=token.endOffset;
    typeAtt.setType(token.word.getTokenType());
    return true;
  }
  return false;
}","@Override public boolean incrementToken() throws IOException {
  clearAttributes();
  if (jieba.hasNext()) {
    SegToken token=jieba.next();
    termAtt.append(token.word.getToken());
    termAtt.setLength(token.word.length());
    offsetAtt.setOffset(token.startOffset,token.endOffset);
    endPosition=token.endOffset;
    typeAtt.setType(token.word.getTokenType());
    return true;
  }
  return false;
}"
60268,"@Override public Tokenizer create(AttributeFactory arg0,Reader in){
  return new JiebaTokenizer(in,segMode);
}","@Override public Tokenizer create(AttributeFactory arg0,Reader in){
  System.out.println(""String_Node_Str"");
  return new JiebaTokenizer(in,segMode);
}"
60269,"private void appendEquals(String key,String op,Object value){
  Class<T> clazz=dao.getEntityClass();
  if (key.equals(Operator.ID)) {
    Object dbId=IdUtil.toDbId(clazz,(String)value);
    append(Operator.ID,op,dbId);
  }
 else   if (key.indexOf(""String_Node_Str"") != -1) {
    append(key,op,value);
  }
 else {
    Field f=null;
    try {
      f=FieldsCache.getInstance().getField(clazz,key);
    }
 catch (    FieldException ex) {
      logger.error(ex.getMessage(),ex);
    }
    if (f.getAnnotation(Id.class) != null) {
      Object dbId=IdUtil.toDbId(clazz,(String)value);
      append(Operator.ID,op,dbId);
    }
 else     if (value instanceof BuguEntity) {
      BuguEntity ent=(BuguEntity)value;
      Object refObj=ReferenceUtil.toDbReference(clazz,key,ent.getClass(),ent.getId());
      append(key,op,refObj);
    }
 else     if (f.getType().isEnum()) {
      append(key,op,value.toString());
    }
 else {
      append(key,op,value);
    }
  }
}","private void appendEquals(String key,String op,Object value){
  Class<T> clazz=dao.getEntityClass();
  if (key.equals(Operator.ID)) {
    Object dbId=IdUtil.toDbId(clazz,(String)value);
    append(Operator.ID,op,dbId);
  }
 else   if (key.indexOf(""String_Node_Str"") != -1) {
    append(key,op,value);
  }
 else {
    Field f=null;
    try {
      f=FieldsCache.getInstance().getField(clazz,key);
    }
 catch (    FieldException ex) {
      logger.error(ex.getMessage(),ex);
    }
    if (f.getAnnotation(Id.class) != null) {
      Object dbId=IdUtil.toDbId(clazz,(String)value);
      append(Operator.ID,op,dbId);
    }
 else     if (value instanceof BuguEntity) {
      BuguEntity ent=(BuguEntity)value;
      Object refObj=ReferenceUtil.toDbReference(clazz,key,ent.getClass(),ent.getId());
      append(key,op,refObj);
    }
 else     if (f.getType().isEnum()) {
      if (value != null) {
        append(key,op,value.toString());
      }
 else {
        append(key,op,null);
      }
    }
 else {
      append(key,op,value);
    }
  }
}"
60270,"private WriteResult doSave(BuguEntity ent){
  if (hasCustomListener) {
    notifyUpdated(ent);
  }
  return getCollection().save(MapperUtil.toDBObject(ent));
}","private WriteResult doSave(BuguEntity ent){
  WriteResult wr=getCollection().save(MapperUtil.toDBObject(ent));
  if (hasCustomListener) {
    notifyUpdated(ent);
  }
  return wr;
}"
60271,"/** 
 * Drop the collection.  It will automatically drop all indexes from this collection.
 */
public void drop(){
  if (!listenerList.isEmpty()) {
    List<T> list=findAll();
    for (    T t : list) {
      remove(t);
    }
  }
 else {
    getCollection().drop();
    getCollection().dropIndexes();
  }
}","/** 
 * Drop the collection.  It will automatically drop all indexes from this collection.
 */
public void drop(){
  if (!listenerList.isEmpty()) {
    List<T> list=findAll();
    for (    T t : list) {
      remove(t);
    }
  }
  getCollection().drop();
  getCollection().dropIndexes();
}"
60272,"private WriteResult removeMulti(DBObject condition){
  if (!listenerList.isEmpty()) {
    DBCursor cursor=getCollection().find(condition);
    List<T> list=MapperUtil.toList(clazz,cursor);
    for (    T t : list) {
      notifyDeleted((BuguEntity)t);
    }
  }
  return getCollection().remove(condition);
}","private WriteResult removeMulti(DBObject condition){
  List<T> list=null;
  if (!listenerList.isEmpty()) {
    DBCursor cursor=getCollection().find(condition);
    list=MapperUtil.toList(clazz,cursor);
  }
  WriteResult wr=getCollection().remove(condition);
  if (!listenerList.isEmpty() && list != null) {
    for (    T t : list) {
      notifyDeleted((BuguEntity)t);
    }
  }
  return wr;
}"
60273,"public BuguDao(Class<T> clazz){
  this.clazz=clazz;
  Entity entity=clazz.getAnnotation(Entity.class);
  SplitType st=entity.split();
  if (st == SplitType.NONE) {
    split=false;
    String name=MapperUtil.getEntityName(clazz);
    initCollection(name);
  }
 else {
    split=true;
  }
  keys=getLazyFields();
  if (hasCascadeDelete()) {
    listenerList.add(new CascadeDeleteListener(clazz));
  }
}","public BuguDao(Class<T> clazz){
  this.clazz=clazz;
  Entity entity=clazz.getAnnotation(Entity.class);
  SplitType st=entity.split();
  if (st == SplitType.NONE) {
    String name=MapperUtil.getEntityName(clazz);
    initCollection(name);
  }
  keys=getLazyFields();
  if (hasCascadeDelete()) {
    listenerList.add(new CascadeDeleteListener(clazz));
  }
}"
60274,"public DBCollection getCollection(){
  if (split) {
    return local.get();
  }
 else {
    return coll;
  }
}","public DBCollection getCollection(){
  return local.get();
}"
60275,"protected void setCollection(DBCollection coll){
  if (split) {
    local.set(coll);
  }
 else {
    this.coll=coll;
  }
}","protected void setCollection(DBCollection coll){
  local.set(coll);
}"
60276,"public BuguFS createWithConnection(String connectionName){
  return create(Default.NAME,GridFS.DEFAULT_BUCKET,GridFS.DEFAULT_CHUNKSIZE);
}","public BuguFS createWithConnection(String connectionName){
  return create(connectionName,GridFS.DEFAULT_BUCKET,GridFS.DEFAULT_CHUNKSIZE);
}"
60277,"private WriteResult execute(DBObject condition){
  List ids=null;
  if (!dao.getListenerList().isEmpty()) {
    ids=dao.getCollection().distinct(Operator.ID,condition);
  }
  WriteResult wr=dao.getCollection().update(condition,modifier,false,true);
  if (!dao.getListenerList().isEmpty() && ids != null) {
    DBObject in=new BasicDBObject(Operator.IN,ids);
    DBCursor cursor=dao.getCollection().find(new BasicDBObject(Operator.ID,in));
    List<T> list=MapperUtil.toList(dao.getEntityClass(),cursor);
    for (    T t : list) {
      dao.notifyUpdated((BuguEntity)t);
    }
  }
  return wr;
}","private WriteResult execute(DBObject condition){
  List ids=null;
  if (dao.hasUserListener) {
    ids=dao.getCollection().distinct(Operator.ID,condition);
  }
  WriteResult wr=dao.getCollection().update(condition,modifier,false,true);
  if (dao.hasUserListener && ids != null) {
    DBObject in=new BasicDBObject(Operator.IN,ids);
    DBCursor cursor=dao.getCollection().find(new BasicDBObject(Operator.ID,in));
    List<T> list=MapperUtil.toList(dao.getEntityClass(),cursor);
    for (    T t : list) {
      dao.notifyUpdated((BuguEntity)t);
    }
  }
  return wr;
}"
60278,"/** 
 * Adds a value to an array unless the value is already present,  in which case does nothing to that array.
 * @param key
 * @param value
 * @return 
 */
public BuguUpdater<T> addToSet(String key,Object value){
  append(Operator.ADD_TO_SET,key,value);
  return this;
}","/** 
 * Adds a value to an array unless the value is already present,  in which case does nothing to that array.
 * @param key
 * @param value
 * @return 
 */
public BuguUpdater<T> addToSet(String key,Object value){
  value=checkArrayValue(key,value);
  append(Operator.ADD_TO_SET,key,value);
  return this;
}"
60279,"@Override public void init(ServletConfig config) throws ServletException {
  super.init(config);
  String p=config.getInitParameter(""String_Node_Str"");
  password=StringUtil.encodeMD5(p);
  allowBucket=config.getInitParameter(""String_Node_Str"");
  forbidBucket=config.getInitParameter(""String_Node_Str"");
  if (!StringUtil.isEmpty(allowBucket) && !StringUtil.isEmpty(forbidBucket)) {
    throw new ServletException(""String_Node_Str"");
  }
  String md5=config.getInitParameter(""String_Node_Str"");
  contentMD5=Boolean.getBoolean(md5);
}","@Override public void init(ServletConfig config) throws ServletException {
  super.init(config);
  String p=config.getInitParameter(""String_Node_Str"");
  password=StringUtil.encodeMD5(p);
  allowBucket=config.getInitParameter(""String_Node_Str"");
  forbidBucket=config.getInitParameter(""String_Node_Str"");
  if (!StringUtil.isEmpty(allowBucket) && !StringUtil.isEmpty(forbidBucket)) {
    throw new ServletException(""String_Node_Str"");
  }
  String md5=config.getInitParameter(""String_Node_Str"");
  if (!StringUtil.isEmpty(md5)) {
    contentMD5=Boolean.getBoolean(md5);
  }
}"
60280,"private double sum(String key,DBObject query){
  double result=0;
  BuguAggregation agg=this.aggregate();
  agg.match(query);
  String json=""String_Node_Str"" + key + ""String_Node_Str"";
  agg.group(json);
  Iterator it=agg.results().iterator();
  if (it.hasNext()) {
    DBObject dbo=(DBObject)it.next();
    result=(Double)dbo.get(""String_Node_Str"");
  }
  return result;
}","private double sum(String key,DBObject query){
  double result=0;
  BuguAggregation agg=this.aggregate();
  agg.match(query);
  String json=""String_Node_Str"" + key + ""String_Node_Str"";
  agg.group(json);
  Iterator it=agg.results().iterator();
  if (it.hasNext()) {
    DBObject dbo=(DBObject)it.next();
    String s=dbo.get(""String_Node_Str"").toString();
    result=Double.parseDouble(s);
  }
  return result;
}"
60281,"private double min(String key,DBObject query){
  double result=0;
  BuguAggregation agg=this.aggregate();
  agg.match(query);
  String json=""String_Node_Str"" + key + ""String_Node_Str"";
  agg.group(json);
  Iterator it=agg.results().iterator();
  if (it.hasNext()) {
    DBObject dbo=(DBObject)it.next();
    result=(Double)dbo.get(""String_Node_Str"");
  }
  return result;
}","private double min(String key,DBObject query){
  double result=0;
  BuguAggregation agg=this.aggregate();
  agg.match(query);
  String json=""String_Node_Str"" + key + ""String_Node_Str"";
  agg.group(json);
  Iterator it=agg.results().iterator();
  if (it.hasNext()) {
    DBObject dbo=(DBObject)it.next();
    String s=dbo.get(""String_Node_Str"").toString();
    result=Double.parseDouble(s);
  }
  return result;
}"
60282,"private double max(String key,DBObject query){
  double result=0;
  BuguAggregation agg=this.aggregate();
  agg.match(query);
  String json=""String_Node_Str"" + key + ""String_Node_Str"";
  agg.group(json);
  Iterator it=agg.results().iterator();
  if (it.hasNext()) {
    DBObject dbo=(DBObject)it.next();
    result=(Double)dbo.get(""String_Node_Str"");
  }
  return result;
}","private double max(String key,DBObject query){
  double result=0;
  BuguAggregation agg=this.aggregate();
  agg.match(query);
  String json=""String_Node_Str"" + key + ""String_Node_Str"";
  agg.group(json);
  Iterator it=agg.results().iterator();
  if (it.hasNext()) {
    DBObject dbo=(DBObject)it.next();
    String s=dbo.get(""String_Node_Str"").toString();
    result=Double.parseDouble(s);
  }
  return result;
}"
60283,"/** 
 * Convert to JSON string.
 * @param obj
 * @return 
 */
public static String toJsonString(Object obj){
  if (obj == null) {
    return null;
  }
  BasicDBObject bdbo;
  if (obj instanceof DBObject) {
    bdbo=(BasicDBObject)obj;
  }
 else {
    DBObject dbo=MapperUtil.toDBObject(obj);
    bdbo=(BasicDBObject)dbo;
  }
  return bdbo.toString();
}","/** 
 * Convert to JSON string.
 * @param obj
 * @return 
 */
public static String toJsonString(Object obj){
  if (obj == null) {
    return null;
  }
  BasicDBObject bdbo;
  if (obj instanceof DBObject) {
    bdbo=(BasicDBObject)obj;
  }
 else {
    DBObject dbo=MapperUtil.toDBObject(obj,true);
    bdbo=(BasicDBObject)dbo;
  }
  return bdbo.toString();
}"
60284,"public T result(){
  try {
    checkSingle();
  }
 catch (  DBQueryException ex) {
    logger.error(ex.getMessage(),ex);
  }
  DBCollection coll=dao.getCollection();
  DBObject dbo;
  if (fieldsSpecified) {
    dbo=coll.findOne(condition,fields);
  }
 else   if (slices != null) {
    dbo=coll.findOne(condition,slices);
  }
 else {
    dbo=coll.findOne(condition);
  }
  return MapperUtil.fromDBObject(dao.getEntityClass(),dbo);
}","public T result(){
  try {
    checkSingle();
  }
 catch (  DBQueryException ex) {
    logger.error(ex.getMessage(),ex);
  }
  DBCollection coll=dao.getCollection();
  DBObject dbo;
  if (fieldsSpecified) {
    dbo=coll.findOne(condition,fields);
  }
 else   if (slices != null) {
    dbo=coll.findOne(condition,slices);
  }
 else {
    dbo=coll.findOne(condition);
  }
  return MapperUtil.fromDBObject(dao.getEntityClass(),dbo,withoutCascade);
}"
60285,"@Override public List<T> results(){
  DBCollection coll=dao.getCollection();
  DBCursor cursor;
  if (fieldsSpecified) {
    cursor=coll.find(condition,fields);
  }
 else {
    cursor=coll.find(condition,dao.getKeyFields());
  }
  if (orderBy != null) {
    cursor.sort(SortUtil.getSort(orderBy));
  }
  if (pageNumber > 0 && pageSize > 0) {
    cursor.skip((pageNumber - 1) * pageSize).limit(pageSize);
  }
  return MapperUtil.toList(dao.getEntityClass(),cursor);
}","@Override public List<T> results(){
  DBCollection coll=dao.getCollection();
  DBCursor cursor;
  if (fieldsSpecified) {
    cursor=coll.find(condition,fields);
  }
 else {
    cursor=coll.find(condition,dao.getKeyFields());
  }
  if (orderBy != null) {
    cursor.sort(SortUtil.getSort(orderBy));
  }
  if (pageNumber > 0 && pageSize > 0) {
    cursor.skip((pageNumber - 1) * pageSize).limit(pageSize);
  }
  return MapperUtil.toList(dao.getEntityClass(),cursor,withoutCascade);
}"
60286,"public DBObject toDBObject(){
  DBObject dbo=new BasicDBObject();
  dbo.put(SPHERICAL,spherical);
  if (limit != 0) {
    dbo.put(LIMIT,limit);
  }
  if (num != 0) {
    dbo.put(NUM,num);
  }
  if (maxDistance != 0) {
    dbo.put(MAX_DISTANCE,maxDistance);
  }
  if (minDistance != 0) {
    dbo.put(MIN_DISTANCE,minDistance);
  }
  if (query != null) {
    dbo.put(QUERY,(DBObject)JSON.parse(query));
  }
  if (near != null) {
    dbo.put(NEAR,MapperUtil.toDBObject(near));
  }
  if (distanceField != null) {
    dbo.put(DISTANCE_FIELD,distanceField);
  }
  if (includeLocs != null) {
    dbo.put(INCLUDE_LOCS,includeLocs);
  }
  return dbo;
}","public DBObject toDBObject(){
  DBObject dbo=new BasicDBObject();
  dbo.put(SPHERICAL,spherical);
  if (limit != 0) {
    dbo.put(LIMIT,limit);
  }
  if (num != 0) {
    dbo.put(NUM,num);
  }
  if (maxDistance != 0) {
    dbo.put(MAX_DISTANCE,maxDistance);
  }
  if (minDistance != 0) {
    dbo.put(MIN_DISTANCE,minDistance);
  }
  if (query != null) {
    dbo.put(QUERY,(DBObject)JSON.parse(query));
  }
  if (near != null) {
    dbo.put(NEAR,MapperUtil.toDBObject(near,true));
  }
  if (distanceField != null) {
    dbo.put(DISTANCE_FIELD,distanceField);
  }
  if (includeLocs != null) {
    dbo.put(INCLUDE_LOCS,includeLocs);
  }
  return dbo;
}"
60287,"@Override public void decode(Object obj){
  String refId=ReferenceUtil.fromDbReference(ref,value);
  Class<?> clazz=FieldUtil.getRealType(field);
  BuguEntity refObj;
  if (ref.cascade().toUpperCase().indexOf(Default.CASCADE_READ) == -1) {
    refObj=(BuguEntity)ConstructorCache.getInstance().create(clazz);
    refObj.setId(refId);
  }
 else {
    InternalDao dao=DaoCache.getInstance().get(clazz);
    refObj=(BuguEntity)dao.findOneLazily(refId);
  }
  FieldUtil.set(obj,field,refObj);
}","@Override public void decode(Object obj){
  String refId=ReferenceUtil.fromDbReference(ref,value);
  Class<?> clazz=FieldUtil.getRealType(field);
  BuguEntity refObj=null;
  if (ref.cascade().toUpperCase().indexOf(Default.CASCADE_READ) == -1 || withoutCascade) {
    refObj=(BuguEntity)ConstructorCache.getInstance().create(clazz);
    refObj.setId(refId);
  }
 else {
    InternalDao dao=DaoCache.getInstance().get(clazz);
    refObj=(BuguEntity)dao.findOneLazily(refId,true);
  }
  FieldUtil.set(obj,field,refObj);
}"
60288,"private Object decodeArray(Object val,Class elementClass){
  elementClass=FieldUtil.getRealType(elementClass,field);
  List list=(ArrayList)val;
  int size=list.size();
  if (size <= 0) {
    return null;
  }
  Object arr=Array.newInstance(elementClass,size);
  if (refList.cascade().toUpperCase().indexOf(Default.CASCADE_READ) == -1) {
    for (int i=0; i < size; i++) {
      Object item=list.get(i);
      if (item != null) {
        String refId=ReferenceUtil.fromDbReference(refList,item);
        BuguEntity refObj=(BuguEntity)ConstructorCache.getInstance().create(elementClass);
        refObj.setId(refId);
        Array.set(arr,i,refObj);
      }
 else {
        Array.set(arr,i,null);
      }
    }
  }
 else {
    List<String> idList=new ArrayList<String>();
    for (int i=0; i < size; i++) {
      Object item=list.get(i);
      if (item != null) {
        String refId=ReferenceUtil.fromDbReference(refList,item);
        idList.add(refId);
      }
    }
    InternalDao dao=DaoCache.getInstance().get(elementClass);
    BuguQuery query=dao.query().in(Operator.ID,idList);
    String sort=refList.sort();
    if (!sort.equals(Default.SORT)) {
      query.sort(sort);
    }
    List<BuguEntity> entityList=query.results();
    if (entityList.size() != size) {
      size=entityList.size();
      arr=Array.newInstance(elementClass,size);
    }
    for (int i=0; i < size; i++) {
      Array.set(arr,i,entityList.get(i));
    }
  }
  return arr;
}","private Object decodeArray(Object val,Class elementClass){
  elementClass=FieldUtil.getRealType(elementClass,field);
  List list=(ArrayList)val;
  int size=list.size();
  if (size <= 0) {
    return null;
  }
  Object arr=Array.newInstance(elementClass,size);
  if (refList.cascade().toUpperCase().indexOf(Default.CASCADE_READ) == -1 || withoutCascade) {
    for (int i=0; i < size; i++) {
      Object item=list.get(i);
      if (item != null) {
        String refId=ReferenceUtil.fromDbReference(refList,item);
        BuguEntity refObj=(BuguEntity)ConstructorCache.getInstance().create(elementClass);
        refObj.setId(refId);
        Array.set(arr,i,refObj);
      }
 else {
        Array.set(arr,i,null);
      }
    }
  }
 else {
    List<String> idList=new ArrayList<String>();
    for (int i=0; i < size; i++) {
      Object item=list.get(i);
      if (item != null) {
        String refId=ReferenceUtil.fromDbReference(refList,item);
        idList.add(refId);
      }
    }
    InternalDao dao=DaoCache.getInstance().get(elementClass);
    BuguQuery query=dao.query().in(Operator.ID,idList);
    query.setWithoutCascade(true);
    String sort=refList.sort();
    if (!sort.equals(Default.SORT)) {
      query.sort(sort);
    }
    List<BuguEntity> entityList=query.results();
    if (entityList.size() != size) {
      size=entityList.size();
      arr=Array.newInstance(elementClass,size);
    }
    for (int i=0; i < size; i++) {
      Array.set(arr,i,entityList.get(i));
    }
  }
  return arr;
}"
60289,"private List decodeCollection(Object val,Class elementClass){
  elementClass=FieldUtil.getRealType(elementClass,field);
  Collection collection=(Collection)val;
  List<BuguEntity> result=new ArrayList<BuguEntity>();
  if (refList.cascade().toUpperCase().indexOf(Default.CASCADE_READ) == -1) {
    for (    Object item : collection) {
      if (item != null) {
        String refId=ReferenceUtil.fromDbReference(refList,item);
        BuguEntity refObj=(BuguEntity)ConstructorCache.getInstance().create(elementClass);
        refObj.setId(refId);
        result.add(refObj);
      }
    }
  }
 else {
    List<String> idList=new ArrayList<String>();
    for (    Object item : collection) {
      if (item != null) {
        String refId=ReferenceUtil.fromDbReference(refList,item);
        idList.add(refId);
      }
    }
    InternalDao dao=DaoCache.getInstance().get(elementClass);
    BuguQuery query=dao.query().in(Operator.ID,idList);
    String sort=refList.sort();
    if (!sort.equals(Default.SORT)) {
      query.sort(sort);
    }
    result=query.results();
  }
  return result;
}","private List decodeCollection(Object val,Class elementClass){
  elementClass=FieldUtil.getRealType(elementClass,field);
  Collection collection=(Collection)val;
  List<BuguEntity> result=new ArrayList<BuguEntity>();
  if (refList.cascade().toUpperCase().indexOf(Default.CASCADE_READ) == -1 || withoutCascade) {
    for (    Object item : collection) {
      if (item != null) {
        String refId=ReferenceUtil.fromDbReference(refList,item);
        BuguEntity refObj=(BuguEntity)ConstructorCache.getInstance().create(elementClass);
        refObj.setId(refId);
        result.add(refObj);
      }
    }
  }
 else {
    List<String> idList=new ArrayList<String>();
    for (    Object item : collection) {
      if (item != null) {
        String refId=ReferenceUtil.fromDbReference(refList,item);
        idList.add(refId);
      }
    }
    InternalDao dao=DaoCache.getInstance().get(elementClass);
    BuguQuery query=dao.query().in(Operator.ID,idList);
    query.setWithoutCascade(true);
    String sort=refList.sort();
    if (!sort.equals(Default.SORT)) {
      query.sort(sort);
    }
    result=query.results();
  }
  return result;
}"
60290,"private Map decodeMap(){
  ParameterizedType paramType=(ParameterizedType)field.getGenericType();
  Type[] types=paramType.getActualTypeArguments();
  boolean isArray=false;
  boolean isCollection=false;
  boolean isSingle=false;
  Class vType=null;
  Class elementType=null;
  if (types[1] instanceof GenericArrayType) {
    isArray=true;
    GenericArrayType g=(GenericArrayType)types[1];
    elementType=(Class)g.getGenericComponentType();
  }
 else   if (types[1] instanceof ParameterizedType) {
    isCollection=true;
    ParameterizedType p=(ParameterizedType)types[1];
    vType=(Class)p.getRawType();
    elementType=(Class)p.getActualTypeArguments()[0];
  }
 else {
    Class<?> actualType=FieldUtil.getClassOfType(types[1]);
    if (actualType.isArray()) {
      isArray=true;
      elementType=actualType.getComponentType();
    }
 else {
      isSingle=true;
    }
  }
  Map map=(Map)value;
  Map result=new HashMap();
  boolean cascadeRead=false;
  Class<?> cls=null;
  InternalDao dao=null;
  if (isSingle) {
    cls=FieldUtil.getRealType((Class)types[1],field);
    cascadeRead=(refList.cascade().toUpperCase().indexOf(Default.CASCADE_READ) != -1);
    if (cascadeRead) {
      dao=DaoCache.getInstance().get(cls);
    }
  }
  for (  Object key : map.keySet()) {
    Object entryValue=map.get(key);
    if (entryValue == null) {
      result.put(key,null);
      continue;
    }
    if (isSingle) {
      String refId=ReferenceUtil.fromDbReference(refList,entryValue);
      BuguEntity refObj=null;
      if (cascadeRead) {
        refObj=(BuguEntity)dao.findOneLazily(refId);
      }
 else {
        refObj=(BuguEntity)ConstructorCache.getInstance().create(cls);
        refObj.setId(refId);
      }
      result.put(key,refObj);
    }
 else     if (isArray) {
      Object arr=decodeArray(entryValue,elementType);
      result.put(key,arr);
    }
 else     if (isCollection) {
      List list=decodeCollection(entryValue,elementType);
      if (DataType.isListType(vType) || DataType.isCollectionType(vType)) {
        result.put(key,list);
      }
 else       if (DataType.isSetType(vType)) {
        result.put(key,new HashSet(list));
      }
 else       if (DataType.isQueueType(vType)) {
        result.put(key,new LinkedList(list));
      }
    }
  }
  return result;
}","private Map decodeMap(){
  ParameterizedType paramType=(ParameterizedType)field.getGenericType();
  Type[] types=paramType.getActualTypeArguments();
  boolean isArray=false;
  boolean isCollection=false;
  boolean isSingle=false;
  Class vType=null;
  Class elementType=null;
  if (types[1] instanceof GenericArrayType) {
    isArray=true;
    GenericArrayType g=(GenericArrayType)types[1];
    elementType=(Class)g.getGenericComponentType();
  }
 else   if (types[1] instanceof ParameterizedType) {
    isCollection=true;
    ParameterizedType p=(ParameterizedType)types[1];
    vType=(Class)p.getRawType();
    elementType=(Class)p.getActualTypeArguments()[0];
  }
 else {
    Class<?> actualType=FieldUtil.getClassOfType(types[1]);
    if (actualType.isArray()) {
      isArray=true;
      elementType=actualType.getComponentType();
    }
 else {
      isSingle=true;
    }
  }
  Map map=(Map)value;
  Map result=new HashMap();
  boolean cascadeRead=false;
  Class<?> cls=null;
  InternalDao dao=null;
  if (isSingle) {
    cls=FieldUtil.getRealType((Class)types[1],field);
    cascadeRead=(refList.cascade().toUpperCase().indexOf(Default.CASCADE_READ) != -1);
    if (!withoutCascade && cascadeRead) {
      dao=DaoCache.getInstance().get(cls);
    }
  }
  for (  Object key : map.keySet()) {
    Object entryValue=map.get(key);
    if (entryValue == null) {
      result.put(key,null);
      continue;
    }
    if (isSingle) {
      String refId=ReferenceUtil.fromDbReference(refList,entryValue);
      BuguEntity refObj=null;
      if (!withoutCascade && cascadeRead) {
        refObj=(BuguEntity)dao.findOneLazily(refId,true);
      }
 else {
        refObj=(BuguEntity)ConstructorCache.getInstance().create(cls);
        refObj.setId(refId);
      }
      result.put(key,refObj);
    }
 else     if (isArray) {
      Object arr=decodeArray(entryValue,elementType);
      result.put(key,arr);
    }
 else     if (isCollection) {
      List list=decodeCollection(entryValue,elementType);
      if (DataType.isListType(vType) || DataType.isCollectionType(vType)) {
        result.put(key,list);
      }
 else       if (DataType.isSetType(vType)) {
        result.put(key,new HashSet(list));
      }
 else       if (DataType.isQueueType(vType)) {
        result.put(key,new LinkedList(list));
      }
    }
  }
  return result;
}"
60291,"@Override public Object encode(){
  BuguEntity entity=(BuguEntity)value;
  if (ref.cascade().toUpperCase().indexOf(Default.CASCADE_CREATE) != -1 || ref.cascade().toUpperCase().indexOf(Default.CASCADE_UPDATE) != -1) {
    Class<?> cls=FieldUtil.getRealType(field);
    InternalDao dao=DaoCache.getInstance().get(cls);
    dao.save(entity);
  }
  return ReferenceUtil.toDbReference(ref,entity.getClass(),entity.getId());
}","@Override public Object encode(){
  BuguEntity entity=(BuguEntity)value;
  if (!withoutCascade) {
    if (ref.cascade().toUpperCase().indexOf(Default.CASCADE_CREATE) != -1 || ref.cascade().toUpperCase().indexOf(Default.CASCADE_UPDATE) != -1) {
      Class<?> cls=FieldUtil.getRealType(field);
      InternalDao dao=DaoCache.getInstance().get(cls);
      dao.saveWithoutCascade(entity,true);
    }
  }
  return ReferenceUtil.toDbReference(ref,entity.getClass(),entity.getId());
}"
60292,"private Object encodeMap(){
  ParameterizedType paramType=(ParameterizedType)field.getGenericType();
  Type[] types=paramType.getActualTypeArguments();
  boolean isArray=false;
  boolean isCollection=false;
  boolean isSingle=false;
  Class elementType=null;
  if (types[1] instanceof GenericArrayType) {
    isArray=true;
    GenericArrayType g=(GenericArrayType)types[1];
    elementType=(Class)g.getGenericComponentType();
  }
 else   if (types[1] instanceof ParameterizedType) {
    isCollection=true;
    ParameterizedType p=(ParameterizedType)types[1];
    elementType=(Class)p.getActualTypeArguments()[0];
  }
 else {
    Class<?> actualType=FieldUtil.getClassOfType(types[1]);
    if (actualType.isArray()) {
      isArray=true;
      elementType=actualType.getComponentType();
    }
 else {
      isSingle=true;
    }
  }
  Map result=new HashMap();
  InternalDao dao=null;
  if (isSingle) {
    Class<?> cls=FieldUtil.getRealType((Class)types[1],field);
    dao=DaoCache.getInstance().get(cls);
  }
  Map map=(Map)value;
  for (  Object key : map.keySet()) {
    Object entryValue=map.get(key);
    if (isSingle) {
      BuguEntity entity=(BuguEntity)entryValue;
      if (entity != null) {
        if (cascadeCU) {
          dao.save(entity);
        }
        result.put(key,ReferenceUtil.toDbReference(refList,entity.getClass(),entity.getId()));
      }
 else {
        result.put(key,null);
      }
    }
 else     if (isArray) {
      Object arr=encodeArray(elementType,entryValue);
      result.put(key,arr);
    }
 else     if (isCollection) {
      Object arr=encodeCollection(elementType,entryValue);
      result.put(key,arr);
    }
  }
  return result;
}","private Object encodeMap(){
  ParameterizedType paramType=(ParameterizedType)field.getGenericType();
  Type[] types=paramType.getActualTypeArguments();
  boolean isArray=false;
  boolean isCollection=false;
  boolean isSingle=false;
  Class elementType=null;
  if (types[1] instanceof GenericArrayType) {
    isArray=true;
    GenericArrayType g=(GenericArrayType)types[1];
    elementType=(Class)g.getGenericComponentType();
  }
 else   if (types[1] instanceof ParameterizedType) {
    isCollection=true;
    ParameterizedType p=(ParameterizedType)types[1];
    elementType=(Class)p.getActualTypeArguments()[0];
  }
 else {
    Class<?> actualType=FieldUtil.getClassOfType(types[1]);
    if (actualType.isArray()) {
      isArray=true;
      elementType=actualType.getComponentType();
    }
 else {
      isSingle=true;
    }
  }
  Map result=new HashMap();
  InternalDao dao=null;
  if (isSingle) {
    Class<?> cls=FieldUtil.getRealType((Class)types[1],field);
    dao=DaoCache.getInstance().get(cls);
  }
  Map map=(Map)value;
  for (  Object key : map.keySet()) {
    Object entryValue=map.get(key);
    if (isSingle) {
      BuguEntity entity=(BuguEntity)entryValue;
      if (entity != null) {
        if (!withoutCascade && cascadeCU) {
          dao.saveWithoutCascade(entity,true);
        }
        result.put(key,ReferenceUtil.toDbReference(refList,entity.getClass(),entity.getId()));
      }
 else {
        result.put(key,null);
      }
    }
 else     if (isArray) {
      Object arr=encodeArray(elementType,entryValue);
      result.put(key,arr);
    }
 else     if (isCollection) {
      Object arr=encodeCollection(elementType,entryValue);
      result.put(key,arr);
    }
  }
  return result;
}"
60293,"private Object encodeArray(Class type,Object val){
  Class<?> cls=FieldUtil.getRealType(type,field);
  InternalDao dao=DaoCache.getInstance().get(cls);
  int len=Array.getLength(val);
  List<Object> result=new ArrayList<Object>();
  for (int i=0; i < len; i++) {
    BuguEntity entity=(BuguEntity)Array.get(val,i);
    if (entity != null) {
      if (cascadeCU) {
        dao.save(entity);
      }
      result.add(ReferenceUtil.toDbReference(refList,entity.getClass(),entity.getId()));
    }
  }
  return result;
}","private Object encodeArray(Class type,Object val){
  Class<?> cls=FieldUtil.getRealType(type,field);
  InternalDao dao=DaoCache.getInstance().get(cls);
  int len=Array.getLength(val);
  List<Object> result=new ArrayList<Object>();
  for (int i=0; i < len; i++) {
    BuguEntity entity=(BuguEntity)Array.get(val,i);
    if (entity != null) {
      if (!withoutCascade && cascadeCU) {
        dao.saveWithoutCascade(entity,true);
      }
      result.add(ReferenceUtil.toDbReference(refList,entity.getClass(),entity.getId()));
    }
  }
  return result;
}"
60294,"private Object encodeCollection(Class type,Object val){
  Collection<BuguEntity> collection=(Collection<BuguEntity>)val;
  List<Object> result=new ArrayList<Object>();
  Class<?> cls=FieldUtil.getRealType(type,field);
  InternalDao dao=DaoCache.getInstance().get(cls);
  for (  BuguEntity entity : collection) {
    if (entity != null) {
      if (cascadeCU) {
        dao.save(entity);
      }
      result.add(ReferenceUtil.toDbReference(refList,entity.getClass(),entity.getId()));
    }
  }
  return result;
}","private Object encodeCollection(Class type,Object val){
  Collection<BuguEntity> collection=(Collection<BuguEntity>)val;
  List<Object> result=new ArrayList<Object>();
  Class<?> cls=FieldUtil.getRealType(type,field);
  InternalDao dao=DaoCache.getInstance().get(cls);
  for (  BuguEntity entity : collection) {
    if (entity != null) {
      if (!withoutCascade && cascadeCU) {
        dao.saveWithoutCascade(entity,true);
      }
      result.add(ReferenceUtil.toDbReference(refList,entity.getClass(),entity.getId()));
    }
  }
  return result;
}"
60295,"/** 
 * @param key
 * @param point
 * @param maxDistance maximum meters
 * @param minDistance minimum meters
 * @return 
 */
public GeoQuery<T> nearSphere(String key,Point point,double maxDistance,double minDistance){
  DBObject geometry=new BasicDBObject();
  geometry.put(Operator.GEOMETRY,MapperUtil.toDBObject(point));
  geometry.put(Operator.MAX_DISTANCE,maxDistance);
  geometry.put(Operator.MIN_DISTANCE,minDistance);
  append(key,Operator.NEAR_SPHERE,geometry);
  return this;
}","/** 
 * @param key
 * @param point
 * @param maxDistance maximum meters
 * @param minDistance minimum meters
 * @return 
 */
public GeoQuery<T> nearSphere(String key,Point point,double maxDistance,double minDistance){
  DBObject geometry=new BasicDBObject();
  geometry.put(Operator.GEOMETRY,MapperUtil.toDBObject(point,true));
  geometry.put(Operator.MAX_DISTANCE,maxDistance);
  geometry.put(Operator.MIN_DISTANCE,minDistance);
  append(key,Operator.NEAR_SPHERE,geometry);
  return this;
}"
60296,"public GeoQuery<T> geoWithin(String key,Polygon polygon){
  DBObject geometry=new BasicDBObject();
  geometry.put(Operator.GEOMETRY,MapperUtil.toDBObject(polygon));
  append(key,Operator.GEO_WITHIN,geometry);
  return this;
}","public GeoQuery<T> geoWithin(String key,Polygon polygon){
  DBObject geometry=new BasicDBObject();
  geometry.put(Operator.GEOMETRY,MapperUtil.toDBObject(polygon,true));
  append(key,Operator.GEO_WITHIN,geometry);
  return this;
}"
60297,"@Override public void init(ServletConfig config) throws ServletException {
  super.init(config);
  String p=config.getInitParameter(""String_Node_Str"");
  password=StringUtil.encodeMD5(p);
  allowBucket=config.getInitParameter(""String_Node_Str"");
  forbidBucket=config.getInitParameter(""String_Node_Str"");
  if (!StringUtil.isEmpty(allowBucket) && !StringUtil.isEmpty(forbidBucket)) {
    throw new ServletException(""String_Node_Str"");
  }
  String md5=config.getInitParameter(""String_Node_Str"");
  if (!StringUtil.isEmpty(md5)) {
    contentMD5=Boolean.getBoolean(md5);
  }
}","@Override public void init(ServletConfig config) throws ServletException {
  super.init(config);
  String p=config.getInitParameter(""String_Node_Str"");
  password=StringUtil.encodeMD5(p);
  allowBucket=config.getInitParameter(""String_Node_Str"");
  forbidBucket=config.getInitParameter(""String_Node_Str"");
  if (!StringUtil.isEmpty(allowBucket) && !StringUtil.isEmpty(forbidBucket)) {
    throw new ServletException(""String_Node_Str"");
  }
  String md5=config.getInitParameter(""String_Node_Str"");
  if (!StringUtil.isEmpty(md5)) {
    contentMD5=Boolean.valueOf(md5);
  }
}"
60298,"protected void processRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  if (!StringUtil.isEmpty(password)) {
    String p=request.getParameter(""String_Node_Str"");
    if (StringUtil.isEmpty(p) || !p.equals(password)) {
      return;
    }
  }
  String uri=request.getRequestURI();
  uri=uri.replaceAll(""String_Node_Str"",SLASH);
  String servlet=request.getServletPath();
  int start=uri.indexOf(servlet);
  uri=uri.substring(start + servlet.length());
  if (uri.length() < 2) {
    return;
  }
  int last=uri.lastIndexOf(SLASH);
  String filename=uri.substring(last + 1);
  DBObject query=new BasicDBObject(BuguFS.FILENAME,filename);
  query.put(ImageUploader.DIMENSION,null);
  String bucket=GridFS.DEFAULT_BUCKET;
  int first=uri.indexOf(SLASH);
  if (first != last) {
    String sub=uri.substring(first + 1,last);
    String[] arr=sub.split(SLASH);
    for (int i=0; i < arr.length; i+=2) {
      if (arr[i].equals(BuguFS.BUCKET)) {
        bucket=arr[i + 1];
      }
 else {
        query.put(arr[i],arr[i + 1]);
      }
    }
  }
  if (!StringUtil.isEmpty(allowBucket) && !allowBucket.equalsIgnoreCase(bucket)) {
    return;
  }
  if (!StringUtil.isEmpty(forbidBucket) && forbidBucket.equalsIgnoreCase(bucket)) {
    return;
  }
  BuguFS fs=BuguFSFactory.getInstance().create(bucket);
  GridFSDBFile f=fs.findOne(query);
  if (f == null) {
    return;
  }
  InputStream is=f.getInputStream();
  OutputStream os=response.getOutputStream();
  try {
    int fileLength=(int)f.getLength();
    String ext=StringUtil.getExtention(filename);
    response.setContentType(getContentType(ext));
    String range=request.getHeader(""String_Node_Str"");
    if (StringUtil.isEmpty(range)) {
      response.setStatus(HttpServletResponse.SC_OK);
      response.setContentLength(fileLength);
      if (contentMD5) {
        response.setHeader(""String_Node_Str"",f.getMD5());
      }
      if (needCache(ext)) {
        String modifiedSince=request.getHeader(""String_Node_Str"");
        DateFormat df=new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH);
        df.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
        Date uploadDate=f.getUploadDate();
        String lastModified=df.format(uploadDate);
        if (modifiedSince != null) {
          Date modifiedDate=null;
          Date sinceDate=null;
          try {
            modifiedDate=df.parse(lastModified);
            sinceDate=df.parse(modifiedSince);
          }
 catch (          ParseException ex) {
            logger.error(""String_Node_Str"",ex);
          }
          if (modifiedDate != null && sinceDate != null && modifiedDate.compareTo(sinceDate) <= 0) {
            response.setStatus(304);
            return;
          }
        }
        response.setHeader(""String_Node_Str"",""String_Node_Str"" + ONE_YEAR_SECONDS);
        response.setHeader(""String_Node_Str"",lastModified);
        response.setDateHeader(""String_Node_Str"",uploadDate.getTime() + ONE_YEAR_MILLISECONDS);
      }
 else {
        response.setHeader(""String_Node_Str"",""String_Node_Str"");
        response.setHeader(""String_Node_Str"",""String_Node_Str"");
        response.setDateHeader(""String_Node_Str"",0);
      }
      f.writeTo(os);
    }
 else {
      range=range.substring(""String_Node_Str"".length());
      if (StringUtil.isEmpty(range)) {
        return;
      }
      int begin=0;
      int end=fileLength - 1;
      boolean onlyLast=range.startsWith(""String_Node_Str"");
      String[] rangeArray=range.split(""String_Node_Str"");
      if (rangeArray.length == 1) {
        if (onlyLast) {
          begin=fileLength - Integer.parseInt(rangeArray[0]);
        }
 else {
          begin=Integer.parseInt(rangeArray[0]);
        }
      }
 else       if (rangeArray.length == 2) {
        begin=Integer.parseInt(rangeArray[0]);
        end=Integer.parseInt(rangeArray[1]);
      }
      response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT);
      int contentLength=end - begin + 1;
      response.setContentLength(contentLength);
      response.setHeader(""String_Node_Str"",""String_Node_Str"" + begin + ""String_Node_Str""+ end+ ""String_Node_Str""+ contentLength);
      is.skip(begin);
      int read=-1;
      int bufferSize=(int)f.getChunkSize();
      byte[] buffer=new byte[bufferSize];
      int remain=contentLength;
      int readSize=Math.min(bufferSize,remain);
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      while ((read=is.read(buffer,0,readSize)) != -1) {
        baos.write(buffer,0,read);
        remain-=read;
        if (remain <= 0) {
          break;
        }
        readSize=Math.min(bufferSize,remain);
      }
      byte[] bytes=baos.toByteArray();
      if (contentMD5) {
        String md5=StringUtil.encodeMD5(bytes);
        response.setHeader(""String_Node_Str"",md5);
      }
      os.write(bytes);
      os.flush();
    }
  }
  finally {
    StreamUtil.safeClose(is);
    StreamUtil.safeClose(os);
  }
}","protected void processRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  if (!StringUtil.isEmpty(password)) {
    String p=request.getParameter(""String_Node_Str"");
    if (StringUtil.isEmpty(p) || !p.equals(password)) {
      return;
    }
  }
  String uri=request.getRequestURI();
  uri=uri.replaceAll(""String_Node_Str"",SLASH);
  String servlet=request.getServletPath();
  int start=uri.indexOf(servlet);
  uri=uri.substring(start + servlet.length());
  if (uri.length() < 2) {
    return;
  }
  int last=uri.lastIndexOf(SLASH);
  String filename=uri.substring(last + 1);
  DBObject query=new BasicDBObject(BuguFS.FILENAME,filename);
  query.put(ImageUploader.DIMENSION,null);
  String bucket=GridFS.DEFAULT_BUCKET;
  int first=uri.indexOf(SLASH);
  if (first != last) {
    String sub=uri.substring(first + 1,last);
    String[] arr=sub.split(SLASH);
    for (int i=0; i < arr.length; i+=2) {
      if (arr[i].equals(BuguFS.BUCKET)) {
        bucket=arr[i + 1];
      }
 else {
        query.put(arr[i],arr[i + 1]);
      }
    }
  }
  if (!StringUtil.isEmpty(allowBucket) && !allowBucket.equalsIgnoreCase(bucket)) {
    return;
  }
  if (!StringUtil.isEmpty(forbidBucket) && forbidBucket.equalsIgnoreCase(bucket)) {
    return;
  }
  BuguFS fs=BuguFSFactory.getInstance().create(bucket);
  GridFSDBFile f=fs.findOne(query);
  if (f == null) {
    return;
  }
  InputStream is=f.getInputStream();
  OutputStream os=response.getOutputStream();
  try {
    int fileLength=(int)f.getLength();
    String ext=StringUtil.getExtention(filename);
    response.setContentType(getContentType(ext));
    String range=request.getHeader(""String_Node_Str"");
    if (StringUtil.isEmpty(range)) {
      response.setStatus(HttpServletResponse.SC_OK);
      response.setContentLength(fileLength);
      if (contentMD5) {
        response.setHeader(""String_Node_Str"",f.getMD5());
      }
      if (needCache(ext)) {
        String modifiedSince=request.getHeader(""String_Node_Str"");
        DateFormat df=new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH);
        df.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
        Date uploadDate=f.getUploadDate();
        String lastModified=df.format(uploadDate);
        if (modifiedSince != null) {
          Date modifiedDate=null;
          Date sinceDate=null;
          try {
            modifiedDate=df.parse(lastModified);
            sinceDate=df.parse(modifiedSince);
          }
 catch (          ParseException ex) {
            logger.error(""String_Node_Str"",ex);
          }
          if (modifiedDate != null && sinceDate != null && modifiedDate.compareTo(sinceDate) <= 0) {
            response.setStatus(304);
            return;
          }
        }
        response.setHeader(""String_Node_Str"",""String_Node_Str"" + ONE_YEAR_SECONDS);
        response.setHeader(""String_Node_Str"",lastModified);
        response.setDateHeader(""String_Node_Str"",uploadDate.getTime() + ONE_YEAR_MILLISECONDS);
      }
 else {
        response.setHeader(""String_Node_Str"",""String_Node_Str"");
        response.setHeader(""String_Node_Str"",""String_Node_Str"");
        response.setDateHeader(""String_Node_Str"",0);
      }
      f.writeTo(os);
    }
 else {
      range=range.substring(""String_Node_Str"".length());
      if (StringUtil.isEmpty(range)) {
        return;
      }
      int begin=0;
      int end=fileLength - 1;
      boolean onlyLast=range.startsWith(""String_Node_Str"");
      String[] rangeArray=range.split(""String_Node_Str"");
      if (rangeArray.length == 1) {
        if (onlyLast) {
          begin=fileLength - Integer.parseInt(rangeArray[0]);
        }
 else {
          begin=Integer.parseInt(rangeArray[0]);
        }
      }
 else       if (rangeArray.length == 2) {
        begin=Integer.parseInt(rangeArray[0]);
        end=Integer.parseInt(rangeArray[1]);
      }
      response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT);
      int contentLength=end - begin + 1;
      response.setContentLength(contentLength);
      response.setHeader(""String_Node_Str"",""String_Node_Str"" + begin + ""String_Node_Str""+ end+ ""String_Node_Str""+ fileLength);
      is.skip(begin);
      int read=-1;
      int bufferSize=(int)f.getChunkSize();
      byte[] buffer=new byte[bufferSize];
      int remain=contentLength;
      int readSize=Math.min(bufferSize,remain);
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      while ((read=is.read(buffer,0,readSize)) != -1) {
        baos.write(buffer,0,read);
        remain-=read;
        if (remain <= 0) {
          break;
        }
        readSize=Math.min(bufferSize,remain);
      }
      byte[] bytes=baos.toByteArray();
      if (contentMD5) {
        String md5=StringUtil.encodeMD5(bytes);
        if (!StringUtil.isEmpty(md5)) {
          response.setHeader(""String_Node_Str"",md5.toLowerCase());
        }
      }
      os.write(bytes);
      os.flush();
    }
  }
  finally {
    StreamUtil.safeClose(is);
    StreamUtil.safeClose(os);
  }
}"
60299,"protected void processRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  if (!StringUtil.isEmpty(password)) {
    String p=request.getParameter(""String_Node_Str"");
    if (StringUtil.isEmpty(p) || !p.equals(password)) {
      return;
    }
  }
  String uri=request.getRequestURI();
  uri=uri.replaceAll(""String_Node_Str"",SLASH);
  int second=uri.indexOf(SLASH,1);
  uri=uri.substring(second);
  int last=uri.lastIndexOf(SLASH);
  String filename=uri.substring(last + 1);
  DBObject query=new BasicDBObject(BuguFS.FILENAME,filename);
  query.put(ImageUploader.DIMENSION,null);
  String bucket=GridFS.DEFAULT_BUCKET;
  int first=uri.indexOf(SLASH);
  if (first != last) {
    String sub=uri.substring(first + 1,last);
    String[] arr=sub.split(SLASH);
    for (int i=0; i < arr.length; i+=2) {
      if (arr[i].equals(BuguFS.BUCKET)) {
        bucket=arr[i + 1];
      }
 else {
        query.put(arr[i],arr[i + 1]);
      }
    }
  }
  if (!StringUtil.isEmpty(allowBucket) && !allowBucket.equalsIgnoreCase(bucket)) {
    return;
  }
  if (!StringUtil.isEmpty(forbidBucket) && forbidBucket.equalsIgnoreCase(bucket)) {
    return;
  }
  BuguFS fs=BuguFSFactory.getInstance().create(bucket);
  GridFSDBFile f=fs.findOne(query);
  if (f == null) {
    return;
  }
  OutputStream os=response.getOutputStream();
  int fileLength=(int)f.getLength();
  String ext=StringUtil.getExtention(filename);
  response.setContentType(getContentType(ext));
  String range=request.getHeader(""String_Node_Str"");
  if (StringUtil.isEmpty(range)) {
    response.setStatus(HttpServletResponse.SC_OK);
    response.setContentLength(fileLength);
    if (needCache(ext)) {
      String modifiedSince=request.getHeader(""String_Node_Str"");
      DateFormat df=new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH);
      df.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
      Date uploadDate=f.getUploadDate();
      String lastModified=df.format(uploadDate);
      if (modifiedSince != null) {
        Date modifiedDate=null;
        Date sinceDate=null;
        try {
          modifiedDate=df.parse(lastModified);
          sinceDate=df.parse(modifiedSince);
        }
 catch (        ParseException ex) {
          logger.error(""String_Node_Str"",ex);
        }
        if (modifiedDate.compareTo(sinceDate) <= 0) {
          response.setStatus(304);
          return;
        }
      }
      response.setHeader(""String_Node_Str"",""String_Node_Str"" + ONE_YEAR_SECONDS);
      response.setHeader(""String_Node_Str"",lastModified);
      response.setDateHeader(""String_Node_Str"",uploadDate.getTime() + ONE_YEAR_MILLISECONDS);
    }
 else {
      response.setHeader(""String_Node_Str"",""String_Node_Str"");
      response.setHeader(""String_Node_Str"",""String_Node_Str"");
      response.setDateHeader(""String_Node_Str"",0);
    }
    f.writeTo(os);
  }
 else {
    range=range.substring(""String_Node_Str"".length());
    if (StringUtil.isEmpty(range)) {
      return;
    }
    int begin=0;
    int end=fileLength - 1;
    boolean onlyLast=range.startsWith(""String_Node_Str"");
    String[] rangeArray=range.split(""String_Node_Str"");
    if (rangeArray.length == 1) {
      if (onlyLast) {
        begin=fileLength - Integer.parseInt(rangeArray[0]);
      }
 else {
        begin=Integer.parseInt(rangeArray[0]);
      }
    }
 else     if (rangeArray.length == 2) {
      begin=Integer.parseInt(rangeArray[0]);
      end=Integer.parseInt(rangeArray[1]);
    }
    response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT);
    int contentLength=end - begin + 1;
    response.setContentLength(contentLength);
    response.setHeader(""String_Node_Str"",""String_Node_Str"" + begin + ""String_Node_Str""+ end+ ""String_Node_Str""+ contentLength);
    InputStream is=f.getInputStream();
    is.skip(begin);
    int read=-1;
    int bufferSize=(int)f.getChunkSize();
    byte[] buffer=new byte[bufferSize];
    int remain=contentLength;
    int readSize=Math.min(bufferSize,remain);
    while ((read=is.read(buffer,0,readSize)) != -1) {
      os.write(buffer,0,read);
      remain-=read;
      if (remain <= 0) {
        break;
      }
      readSize=Math.min(bufferSize,remain);
    }
    StreamUtil.safeClose(is);
  }
}","protected void processRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  if (!StringUtil.isEmpty(password)) {
    String p=request.getParameter(""String_Node_Str"");
    if (StringUtil.isEmpty(p) || !p.equals(password)) {
      return;
    }
  }
  String uri=request.getRequestURI();
  uri=uri.replaceAll(""String_Node_Str"",SLASH);
  String servlet=request.getServletPath();
  int start=uri.indexOf(servlet);
  uri=uri.substring(start + servlet.length());
  int last=uri.lastIndexOf(SLASH);
  String filename=uri.substring(last + 1);
  DBObject query=new BasicDBObject(BuguFS.FILENAME,filename);
  query.put(ImageUploader.DIMENSION,null);
  String bucket=GridFS.DEFAULT_BUCKET;
  int first=uri.indexOf(SLASH);
  if (first != last) {
    String sub=uri.substring(first + 1,last);
    String[] arr=sub.split(SLASH);
    for (int i=0; i < arr.length; i+=2) {
      if (arr[i].equals(BuguFS.BUCKET)) {
        bucket=arr[i + 1];
      }
 else {
        query.put(arr[i],arr[i + 1]);
      }
    }
  }
  if (!StringUtil.isEmpty(allowBucket) && !allowBucket.equalsIgnoreCase(bucket)) {
    return;
  }
  if (!StringUtil.isEmpty(forbidBucket) && forbidBucket.equalsIgnoreCase(bucket)) {
    return;
  }
  BuguFS fs=BuguFSFactory.getInstance().create(bucket);
  GridFSDBFile f=fs.findOne(query);
  if (f == null) {
    return;
  }
  OutputStream os=response.getOutputStream();
  int fileLength=(int)f.getLength();
  String ext=StringUtil.getExtention(filename);
  response.setContentType(getContentType(ext));
  String range=request.getHeader(""String_Node_Str"");
  if (StringUtil.isEmpty(range)) {
    response.setStatus(HttpServletResponse.SC_OK);
    response.setContentLength(fileLength);
    if (needCache(ext)) {
      String modifiedSince=request.getHeader(""String_Node_Str"");
      DateFormat df=new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH);
      df.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
      Date uploadDate=f.getUploadDate();
      String lastModified=df.format(uploadDate);
      if (modifiedSince != null) {
        Date modifiedDate=null;
        Date sinceDate=null;
        try {
          modifiedDate=df.parse(lastModified);
          sinceDate=df.parse(modifiedSince);
        }
 catch (        ParseException ex) {
          logger.error(""String_Node_Str"",ex);
        }
        if (modifiedDate != null && sinceDate != null && modifiedDate.compareTo(sinceDate) <= 0) {
          response.setStatus(304);
          return;
        }
      }
      response.setHeader(""String_Node_Str"",""String_Node_Str"" + ONE_YEAR_SECONDS);
      response.setHeader(""String_Node_Str"",lastModified);
      response.setDateHeader(""String_Node_Str"",uploadDate.getTime() + ONE_YEAR_MILLISECONDS);
    }
 else {
      response.setHeader(""String_Node_Str"",""String_Node_Str"");
      response.setHeader(""String_Node_Str"",""String_Node_Str"");
      response.setDateHeader(""String_Node_Str"",0);
    }
    f.writeTo(os);
  }
 else {
    range=range.substring(""String_Node_Str"".length());
    if (StringUtil.isEmpty(range)) {
      return;
    }
    int begin=0;
    int end=fileLength - 1;
    boolean onlyLast=range.startsWith(""String_Node_Str"");
    String[] rangeArray=range.split(""String_Node_Str"");
    if (rangeArray.length == 1) {
      if (onlyLast) {
        begin=fileLength - Integer.parseInt(rangeArray[0]);
      }
 else {
        begin=Integer.parseInt(rangeArray[0]);
      }
    }
 else     if (rangeArray.length == 2) {
      begin=Integer.parseInt(rangeArray[0]);
      end=Integer.parseInt(rangeArray[1]);
    }
    response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT);
    int contentLength=end - begin + 1;
    response.setContentLength(contentLength);
    response.setHeader(""String_Node_Str"",""String_Node_Str"" + begin + ""String_Node_Str""+ end+ ""String_Node_Str""+ contentLength);
    InputStream is=f.getInputStream();
    try {
      is.skip(begin);
      int read=-1;
      int bufferSize=(int)f.getChunkSize();
      byte[] buffer=new byte[bufferSize];
      int remain=contentLength;
      int readSize=Math.min(bufferSize,remain);
      while ((read=is.read(buffer,0,readSize)) != -1) {
        os.write(buffer,0,read);
        remain-=read;
        if (remain <= 0) {
          break;
        }
        readSize=Math.min(bufferSize,remain);
      }
    }
  finally {
      StreamUtil.safeClose(is);
    }
  }
}"
60300,"private void processMapType(Object obj) throws IllegalArgumentException, IllegalAccessException {
  ParameterizedType paramType=(ParameterizedType)field.getGenericType();
  Type[] types=paramType.getActualTypeArguments();
  boolean isArray=false;
  boolean isCollection=false;
  boolean isPrimitive=false;
  Class vType=null;
  Class elementType=null;
  if (types[1] instanceof GenericArrayType) {
    isArray=true;
    GenericArrayType g=(GenericArrayType)types[1];
    elementType=(Class)g.getGenericComponentType();
  }
 else   if (types[1] instanceof ParameterizedType) {
    isCollection=true;
    ParameterizedType p=(ParameterizedType)types[1];
    vType=(Class)p.getRawType();
    elementType=(Class)p.getActualTypeArguments()[0];
  }
 else {
    isPrimitive=true;
  }
  if (isArray) {
    Map src=(Map)value;
    Map map=new HashMap();
    Set<Entry> entrySet=src.entrySet();
    for (    Entry entry : entrySet) {
      Object k=entry.getKey();
      List v=(ArrayList)entry.getValue();
      Object arr=convertToArrayValue(elementType,v);
      map.put(k,arr);
    }
    field.set(obj,map);
  }
 else   if (isCollection) {
    if (DataType.isListType(vType)) {
      Map src=(Map)value;
      Map map=new HashMap();
      Set<Entry> entrySet=src.entrySet();
      for (      Entry entry : entrySet) {
        Object k=entry.getKey();
        List v=(ArrayList)entry.getValue();
        List list=new ArrayList();
        moveCollectionElement(elementType,v,list);
        map.put(k,list);
      }
      field.set(obj,map);
    }
 else     if (DataType.isSetType(vType)) {
      Map src=(Map)value;
      Map map=new HashMap();
      Set<Entry> entrySet=src.entrySet();
      for (      Entry entry : entrySet) {
        Object k=entry.getKey();
        List v=(ArrayList)entry.getValue();
        Set set=new HashSet();
        moveCollectionElement(elementType,v,set);
        map.put(k,set);
      }
      field.set(obj,map);
    }
 else     if (DataType.isQueueType(vType)) {
      Map src=(Map)value;
      Map map=new HashMap();
      Set<Entry> entrySet=src.entrySet();
      for (      Entry entry : entrySet) {
        Object k=entry.getKey();
        List v=(ArrayList)entry.getValue();
        Queue queue=new LinkedList();
        moveCollectionElement(elementType,v,queue);
        map.put(k,queue);
      }
      field.set(obj,map);
    }
  }
 else   if (isPrimitive) {
    field.set(obj,value);
  }
}","private void processMapType(Object obj) throws IllegalArgumentException, IllegalAccessException {
  ParameterizedType paramType=(ParameterizedType)field.getGenericType();
  Type[] types=paramType.getActualTypeArguments();
  boolean isArray=false;
  boolean isCollection=false;
  boolean isPrimitive=false;
  Class vType=null;
  Class elementType=null;
  if (types[1] instanceof GenericArrayType) {
    isArray=true;
    GenericArrayType g=(GenericArrayType)types[1];
    elementType=(Class)g.getGenericComponentType();
  }
 else   if (types[1] instanceof ParameterizedType) {
    isCollection=true;
    ParameterizedType p=(ParameterizedType)types[1];
    vType=(Class)p.getRawType();
    elementType=(Class)p.getActualTypeArguments()[0];
  }
 else {
    Class<?> actualType=FieldUtil.getClassOfType(types[1]);
    if (actualType.isArray()) {
      isArray=true;
      elementType=actualType.getComponentType();
    }
 else {
      isPrimitive=true;
    }
  }
  if (isArray) {
    Map src=(Map)value;
    Map map=new HashMap();
    Set<Entry> entrySet=src.entrySet();
    for (    Entry entry : entrySet) {
      Object k=entry.getKey();
      List v=(ArrayList)entry.getValue();
      Object arr=convertToArrayValue(elementType,v);
      map.put(k,arr);
    }
    field.set(obj,map);
  }
 else   if (isCollection) {
    if (DataType.isListType(vType)) {
      Map src=(Map)value;
      Map map=new HashMap();
      Set<Entry> entrySet=src.entrySet();
      for (      Entry entry : entrySet) {
        Object k=entry.getKey();
        List v=(ArrayList)entry.getValue();
        List list=new ArrayList();
        moveCollectionElement(elementType,v,list);
        map.put(k,list);
      }
      field.set(obj,map);
    }
 else     if (DataType.isSetType(vType)) {
      Map src=(Map)value;
      Map map=new HashMap();
      Set<Entry> entrySet=src.entrySet();
      for (      Entry entry : entrySet) {
        Object k=entry.getKey();
        List v=(ArrayList)entry.getValue();
        Set set=new HashSet();
        moveCollectionElement(elementType,v,set);
        map.put(k,set);
      }
      field.set(obj,map);
    }
 else     if (DataType.isQueueType(vType)) {
      Map src=(Map)value;
      Map map=new HashMap();
      Set<Entry> entrySet=src.entrySet();
      for (      Entry entry : entrySet) {
        Object k=entry.getKey();
        List v=(ArrayList)entry.getValue();
        Queue queue=new LinkedList();
        moveCollectionElement(elementType,v,queue);
        map.put(k,queue);
      }
      field.set(obj,map);
    }
  }
 else   if (isPrimitive) {
    field.set(obj,value);
  }
}"
60301,"/** 
 * Update the value of the field to a specified value if the specified value is less than the current value of the field. If the field does not exists, this operation sets the field to the specified value. 
 * @param key the field's name
 * @param value the specified value
 * @return 
 */
public BuguUpdater<T> min(String id,String key,Object value){
  append(Operator.MIN,key,value);
  return this;
}","/** 
 * Update the value of the field to a specified value if the specified value is less than the current value of the field. If the field does not exists, this operation sets the field to the specified value. 
 * @param key the field's name
 * @param value the specified value
 * @return 
 */
public BuguUpdater<T> min(String key,Object value){
  append(Operator.MIN,key,value);
  return this;
}"
60302,"/** 
 * Remove the last element from the array/list/set field
 * @param key the field's name
 * @return 
 */
public BuguUpdater<T> popLast(String id,String key){
  append(Operator.POP,key,1);
  return this;
}","/** 
 * Remove the last element from the array/list/set field
 * @param key the field's name
 * @return 
 */
public BuguUpdater<T> popLast(String key){
  append(Operator.POP,key,1);
  return this;
}"
60303,"/** 
 * Performs a bitwise update of a field
 * @param key the field's name
 * @param value the bitwise value
 * @param bitwise the enum type of bitwise operation: AND,OR,XOR
 * @return 
 */
public BuguUpdater<T> bitwise(String id,String key,int value,Bitwise bitwise){
  DBObject logic=new BasicDBObject(checkBitwise(bitwise),value);
  append(Operator.BIT,key,logic);
  return this;
}","/** 
 * Performs a bitwise update of a field
 * @param key the field's name
 * @param value the bitwise value
 * @param bitwise the enum type of bitwise operation: AND,OR,XOR
 * @return 
 */
public BuguUpdater<T> bitwise(String key,int value,Bitwise bitwise){
  DBObject logic=new BasicDBObject(checkBitwise(bitwise),value);
  append(Operator.BIT,key,logic);
  return this;
}"
60304,"/** 
 * Remove the first element from the array/list/set field
 * @param key the field's name
 * @return 
 */
public BuguUpdater<T> popFirst(String id,String key){
  append(Operator.POP,key,-1);
  return this;
}","/** 
 * Remove the first element from the array/list/set field
 * @param key the field's name
 * @return 
 */
public BuguUpdater<T> popFirst(String key){
  append(Operator.POP,key,-1);
  return this;
}"
60305,"private void decodeArray(Object obj,Class comType) throws IllegalArgumentException, IllegalAccessException {
  List list=(ArrayList)value;
  int size=list.size();
  if (DataType.isString(comType)) {
    String[] arr=new String[size];
    for (int i=0; i < size; i++) {
      arr[i]=list.get(i).toString();
    }
    field.set(obj,arr);
  }
 else   if (DataType.isInteger(comType)) {
    int[] arr=new int[size];
    for (int i=0; i < size; i++) {
      arr[i]=Integer.parseInt(list.get(i).toString());
    }
    field.set(obj,arr);
  }
 else   if (DataType.isIntegerObject(comType)) {
    Integer[] arr=new Integer[size];
    for (int i=0; i < size; i++) {
      arr[i]=Integer.valueOf(list.get(i).toString());
    }
    field.set(obj,arr);
  }
 else   if (DataType.isLong(comType)) {
    long[] arr=new long[size];
    for (int i=0; i < size; i++) {
      arr[i]=Long.parseLong(list.get(i).toString());
    }
    field.set(obj,arr);
  }
 else   if (DataType.isLongObject(comType)) {
    Long[] arr=new Long[size];
    for (int i=0; i < size; i++) {
      arr[i]=Long.valueOf(list.get(i).toString());
    }
    field.set(obj,arr);
  }
 else   if (DataType.isShort(comType)) {
    short[] arr=new short[size];
    for (int i=0; i < size; i++) {
      arr[i]=Short.parseShort(list.get(i).toString());
    }
    field.set(obj,arr);
  }
 else   if (DataType.isShortObject(comType)) {
    Short[] arr=new Short[size];
    for (int i=0; i < size; i++) {
      arr[i]=Short.valueOf(list.get(i).toString());
    }
    field.set(obj,arr);
  }
 else   if (DataType.isByteObject(comType)) {
    Byte[] arr=new Byte[size];
    for (int i=0; i < size; i++) {
      arr[i]=Byte.valueOf(list.get(i).toString());
    }
    field.set(obj,arr);
  }
 else   if (DataType.isFloat(comType)) {
    float[] arr=new float[size];
    for (int i=0; i < size; i++) {
      arr[i]=Float.parseFloat(list.get(i).toString());
    }
    field.set(obj,arr);
  }
 else   if (DataType.isFloatObject(comType)) {
    Float[] arr=new Float[size];
    for (int i=0; i < size; i++) {
      arr[i]=Float.valueOf(list.get(i).toString());
    }
    field.set(obj,arr);
  }
 else   if (DataType.isDouble(comType)) {
    double[] arr=new double[size];
    for (int i=0; i < size; i++) {
      arr[i]=Double.parseDouble(list.get(i).toString());
    }
    field.set(obj,arr);
  }
 else   if (DataType.isDoubleObject(comType)) {
    Double[] arr=new Double[size];
    for (int i=0; i < size; i++) {
      arr[i]=Double.valueOf(list.get(i).toString());
    }
    field.set(obj,arr);
  }
 else   if (DataType.isBoolean(comType)) {
    boolean[] arr=new boolean[size];
    for (int i=0; i < size; i++) {
      arr[i]=Boolean.parseBoolean(list.get(i).toString());
    }
    field.set(obj,arr);
  }
 else   if (DataType.isBooleanObject(comType)) {
    Boolean[] arr=new Boolean[size];
    for (int i=0; i < size; i++) {
      arr[i]=Boolean.valueOf(list.get(i).toString());
    }
    field.set(obj,arr);
  }
 else   if (DataType.isChar(comType)) {
    char[] arr=new char[size];
    for (int i=0; i < size; i++) {
      arr[i]=list.get(i).toString().charAt(0);
    }
    field.set(obj,arr);
  }
 else   if (DataType.isCharObject(comType)) {
    Character[] arr=new Character[size];
    for (int i=0; i < size; i++) {
      arr[i]=list.get(i).toString().charAt(0);
    }
    field.set(obj,arr);
  }
 else   if (DataType.isDate(comType)) {
    Date[] arr=new Date[size];
    for (int i=0; i < size; i++) {
      arr[i]=(Date)list.get(i);
    }
    field.set(obj,arr);
  }
 else   if (DataType.isTimestamp(comType)) {
    Timestamp[] arr=new Timestamp[size];
    for (int i=0; i < size; i++) {
      arr[i]=(Timestamp)list.get(i);
    }
    field.set(obj,arr);
  }
}","private void decodeArray(Object obj,Class comType) throws IllegalArgumentException, IllegalAccessException {
  List list=(ArrayList)value;
  Object arr=convertToArrayValue(comType,list);
  field.set(obj,arr);
}"
60306,"private void decodePrimitive(Object obj,Class type) throws IllegalArgumentException, IllegalAccessException {
  if (DataType.isFloat(type)) {
    field.setFloat(obj,Float.parseFloat(value.toString()));
  }
 else   if (DataType.isFloatObject(type)) {
    field.set(obj,Float.valueOf(value.toString()));
  }
 else   if (DataType.isShort(type)) {
    field.setShort(obj,Short.parseShort(value.toString()));
  }
 else   if (DataType.isShortObject(type)) {
    field.set(obj,Short.valueOf(value.toString()));
  }
 else   if (DataType.isByte(type)) {
    field.setByte(obj,Byte.parseByte(value.toString()));
  }
 else   if (DataType.isByteObject(type)) {
    field.setByte(obj,Byte.valueOf(value.toString()));
  }
 else   if (DataType.isListType(type)) {
    List src=(ArrayList)value;
    List list=new ArrayList();
    moveCollectionElement(src,list);
    field.set(obj,list);
  }
 else   if (DataType.isSetType(type)) {
    List src=(ArrayList)value;
    Set set=new HashSet();
    moveCollectionElement(src,set);
    field.set(obj,set);
  }
 else   if (DataType.isQueueType(type)) {
    List src=(ArrayList)value;
    Queue queue=new LinkedList();
    moveCollectionElement(src,queue);
    field.set(obj,queue);
  }
 else   if (DataType.isChar(type)) {
    field.setChar(obj,value.toString().charAt(0));
  }
 else   if (DataType.isTimestamp(type)) {
    Date date=(Date)value;
    Timestamp ts=new Timestamp(date.getTime());
    field.set(obj,ts);
  }
 else {
    field.set(obj,value);
  }
}","private void decodePrimitive(Object obj,Class type) throws IllegalArgumentException, IllegalAccessException {
  if (DataType.isFloat(type)) {
    field.setFloat(obj,Float.parseFloat(value.toString()));
  }
 else   if (DataType.isFloatObject(type)) {
    field.set(obj,Float.valueOf(value.toString()));
  }
 else   if (DataType.isShort(type)) {
    field.setShort(obj,Short.parseShort(value.toString()));
  }
 else   if (DataType.isShortObject(type)) {
    field.set(obj,Short.valueOf(value.toString()));
  }
 else   if (DataType.isByte(type)) {
    field.setByte(obj,Byte.parseByte(value.toString()));
  }
 else   if (DataType.isByteObject(type)) {
    field.setByte(obj,Byte.valueOf(value.toString()));
  }
 else   if (DataType.isListType(type)) {
    List src=(ArrayList)value;
    List list=new ArrayList();
    moveCollectionElement(src,list);
    field.set(obj,list);
  }
 else   if (DataType.isSetType(type)) {
    List src=(ArrayList)value;
    Set set=new HashSet();
    moveCollectionElement(src,set);
    field.set(obj,set);
  }
 else   if (DataType.isQueueType(type)) {
    List src=(ArrayList)value;
    Queue queue=new LinkedList();
    moveCollectionElement(src,queue);
    field.set(obj,queue);
  }
 else   if (DataType.isMapType(type)) {
    ParameterizedType paramType=(ParameterizedType)field.getGenericType();
    Type[] types=paramType.getActualTypeArguments();
    boolean isArray=false;
    boolean isCollection=false;
    boolean isPrimitive=false;
    Class vType=null;
    Class elementType=null;
    if (types[1] instanceof GenericArrayType) {
      isArray=true;
      GenericArrayType g=(GenericArrayType)types[1];
      elementType=(Class)g.getGenericComponentType();
    }
 else     if (types[1] instanceof ParameterizedType) {
      isCollection=true;
      ParameterizedType p=(ParameterizedType)types[1];
      vType=(Class)p.getRawType();
      elementType=(Class)p.getActualTypeArguments()[0];
    }
 else {
      isPrimitive=true;
    }
    if (isArray) {
      Map src=(Map)value;
      Map map=new HashMap();
      Set<Entry> entrySet=src.entrySet();
      for (      Entry entry : entrySet) {
        Object k=entry.getKey();
        List v=(ArrayList)entry.getValue();
        Object arr=convertToArrayValue(elementType,v);
        map.put(k,arr);
      }
      field.set(obj,map);
    }
 else     if (isCollection) {
      if (DataType.isListType(vType)) {
        Map src=(Map)value;
        Map map=new HashMap();
        Set<Entry> entrySet=src.entrySet();
        for (        Entry entry : entrySet) {
          Object k=entry.getKey();
          List v=(ArrayList)entry.getValue();
          List list=new ArrayList();
          moveCollectionElement(elementType,v,list);
          map.put(k,list);
        }
        field.set(obj,map);
      }
 else       if (DataType.isSetType(vType)) {
        Map src=(Map)value;
        Map map=new HashMap();
        Set<Entry> entrySet=src.entrySet();
        for (        Entry entry : entrySet) {
          Object k=entry.getKey();
          List v=(ArrayList)entry.getValue();
          Set set=new HashSet();
          moveCollectionElement(elementType,v,set);
          map.put(k,set);
        }
        field.set(obj,map);
      }
 else       if (DataType.isQueueType(type)) {
        Map src=(Map)value;
        Map map=new HashMap();
        Set<Entry> entrySet=src.entrySet();
        for (        Entry entry : entrySet) {
          Object k=entry.getKey();
          List v=(ArrayList)entry.getValue();
          Queue queue=new LinkedList();
          moveCollectionElement(elementType,v,queue);
          map.put(k,queue);
        }
        field.set(obj,map);
      }
    }
 else     if (isPrimitive) {
      field.set(obj,value);
    }
  }
 else   if (DataType.isChar(type)) {
    field.setChar(obj,value.toString().charAt(0));
  }
 else   if (DataType.isTimestamp(type)) {
    Date date=(Date)value;
    Timestamp ts=new Timestamp(date.getTime());
    field.set(obj,ts);
  }
 else {
    field.set(obj,value);
  }
}"
60307,"private void moveCollectionElement(List list,Collection collection){
  ParameterizedType paramType=(ParameterizedType)field.getGenericType();
  Type[] types=paramType.getActualTypeArguments();
  Class actualType=(Class)types[0];
  if (DataType.isShortObject(actualType)) {
    for (    Object o : list) {
      collection.add(Short.valueOf(o.toString()));
    }
  }
 else   if (DataType.isByteObject(actualType)) {
    for (    Object o : list) {
      collection.add(Byte.valueOf(o.toString()));
    }
  }
 else   if (DataType.isFloatObject(actualType)) {
    for (    Object o : list) {
      collection.add(Float.valueOf(o.toString()));
    }
  }
 else   if (DataType.isCharObject(actualType)) {
    for (    Object o : list) {
      collection.add(o.toString().charAt(0));
    }
  }
 else {
    for (    Object o : list) {
      collection.add(o);
    }
  }
}","private void moveCollectionElement(Class actualType,List list,Collection collection){
  if (DataType.isShortObject(actualType)) {
    for (    Object o : list) {
      collection.add(Short.valueOf(o.toString()));
    }
  }
 else   if (DataType.isByteObject(actualType)) {
    for (    Object o : list) {
      collection.add(Byte.valueOf(o.toString()));
    }
  }
 else   if (DataType.isFloatObject(actualType)) {
    for (    Object o : list) {
      collection.add(Float.valueOf(o.toString()));
    }
  }
 else   if (DataType.isCharObject(actualType)) {
    for (    Object o : list) {
      collection.add(o.toString().charAt(0));
    }
  }
 else {
    for (    Object o : list) {
      collection.add(o);
    }
  }
}"
60308,"private void parseInlineTemplate(Snippet body){
  List<SnippetPart> parts=body.getParts();
  int bodyEnd=parts.size();
  for (int i=bodyEnd - 1; i >= 0; i--) {
    SnippetPart part=parts.get(i);
    if (part.isTag()) {
      SnippetTag tag=(SnippetTag)part;
      if (tag.getTag().equals(""String_Node_Str"")) {
        bodyEnd=i;
      }
 else       if (tag.getTag().startsWith(""String_Node_Str"")) {
        bodyEnd=i;
      }
 else       if (tag.getTag().equals(""String_Node_Str"")) {
        Snippet inlineSnippet=new Snippet(parts,i + 1,bodyEnd);
        inlineSnippet.setOrigin(body.getOrigin());
        List<SnippetPart> inlineParts=inlineSnippet.getParts();
        LoopTag.smartTrimSnippetParts(inlineParts,false);
        this.template=inlineSnippet;
        for (int j=bodyEnd - 1; j >= i; j--) {
          parts.remove(j);
        }
        return;
      }
    }
  }
}","private void parseInlineTemplate(Snippet body){
  List<SnippetPart> parts=body.getParts();
  int bodyEnd=parts.size();
  int eatUntil=bodyEnd;
  for (int i=bodyEnd - 1; i >= 0; i--) {
    SnippetPart part=parts.get(i);
    if (part.isTag()) {
      SnippetTag tag=(SnippetTag)part;
      if (tag.getTag().equals(""String_Node_Str"")) {
        bodyEnd=i;
        eatUntil=i + 1;
      }
 else       if (tag.getTag().startsWith(""String_Node_Str"")) {
        bodyEnd=i;
        eatUntil=i;
      }
 else       if (tag.getTag().equals(""String_Node_Str"")) {
        Snippet inlineSnippet=new Snippet(parts,i + 1,bodyEnd);
        inlineSnippet.setOrigin(body.getOrigin());
        List<SnippetPart> inlineParts=inlineSnippet.getParts();
        LoopTag.smartTrimSnippetParts(inlineParts,false);
        this.template=inlineSnippet;
        for (int j=eatUntil - 1; j >= i; j--) {
          parts.remove(j);
        }
        return;
      }
    }
  }
}"
60309,"private String parseCond(String params){
  if (params == null)   return null;
  int exprPos=params.indexOf(""String_Node_Str"") + 1;
  int openParenPos=params.indexOf(""String_Node_Str"",exprPos);
  if (openParenPos > -1 && params.substring(exprPos,openParenPos).trim().length() == 0) {
    int closeParenPos=params.lastIndexOf(""String_Node_Str"");
    if (closeParenPos > openParenPos) {
      String test=params.substring(openParenPos + 1,closeParenPos);
      return test;
    }
  }
  return params.substring(exprPos);
}","private String parseCond(String params){
  if (params == null)   return null;
  int exprPos=params.indexOf(""String_Node_Str"") + 1;
  int openParenPos=params.indexOf(""String_Node_Str"",exprPos);
  if (openParenPos > -1 && params.substring(exprPos,openParenPos).trim().length() == 0) {
    int closeParenPos=params.lastIndexOf(""String_Node_Str"");
    if (closeParenPos > openParenPos) {
      String test=params.substring(openParenPos + 1,closeParenPos);
      return test;
    }
 else {
      String test=params.substring(openParenPos + 1);
      return test;
    }
  }
  return params.substring(exprPos);
}"
60310,"private int skipModifiers(String test){
  char[] chars=test.toCharArray();
  int i=0;
  for (; i < chars.length; i++) {
    char c=chars[i];
    if (Character.isJavaIdentifierPart(c))     continue;
    if (c == '|' || c == ':' || c == '.')     continue;
    if (c == '(') {
      i=FilterArgs.nextUnescapedDelim(""String_Node_Str"",test,i + 1);
      continue;
    }
    if (c == '/') {
      i=RegexFilter.nextRegexDelim(test,i + 1);
      continue;
    }
    break;
  }
  return i;
}","private int skipModifiers(String test){
  char[] chars=test.toCharArray();
  int i=0;
  for (; i < chars.length; i++) {
    char c=chars[i];
    if (Character.isJavaIdentifierPart(c))     continue;
    if (c == '|' || c == ':' || c == '.')     continue;
    if (c == '(') {
      i=FilterArgs.nextUnescapedDelim(""String_Node_Str"",test,i + 1);
      if (i < 0) {
        return chars.length;
      }
      continue;
    }
    if (c == '/') {
      i=RegexFilter.nextRegexDelim(test,i + 1);
      if (i < 0) {
        return chars.length;
      }
      continue;
    }
    break;
  }
  return i;
}"
60311,"public String toString(){
  if (simpleText != null)   return simpleText;
  if (parts == null)   return null;
  StringBuilder sb=new StringBuilder();
  if (origin != null) {
    sb.append(""String_Node_Str"");
    sb.append(origin);
    sb.append(""String_Node_Str"");
  }
  for (  SnippetPart part : parts) {
    sb.append(part.toString());
  }
  return sb.toString();
}","public String toString(){
  return _toString(true);
}"
60312,"public Object applyFilter(Chunk chunk,Object object,String[] args){
  String stringifiedObject=(object == null) ? null : object.toString();
  return transformText(chunk,stringifiedObject,args);
}","public Object applyFilter(Chunk chunk,Object object,String[] args){
  String stringifiedObject=null;
  if (object != null) {
    if (object instanceof com.x5.template.Snippet) {
      stringifiedObject=((com.x5.template.Snippet)object).toSimpleString();
    }
 else {
      stringifiedObject=object.toString();
    }
  }
  return transformText(chunk,stringifiedObject,args);
}"
60313,"private void parseAttributes(String params){
  Map<String,Object> opts=_parseAttributes(params);
  if (opts == null)   return;
  this.options=opts;
  String dataVar=(String)opts.get(""String_Node_Str"");
  fetchData(dataVar);
  this.rowTemplate=(String)opts.get(""String_Node_Str"");
  this.emptyTemplate=(String)opts.get(""String_Node_Str"");
}","private void parseAttributes(String params){
  Map<String,Object> opts=_parseAttributes(params);
  if (opts == null)   return;
  this.options=opts;
  this.rowTemplate=(String)opts.get(""String_Node_Str"");
  this.emptyTemplate=(String)opts.get(""String_Node_Str"");
}"
60314,"private void parseFnParams(String params){
  int endOfParams=params.length();
  if (params.endsWith(""String_Node_Str""))   endOfParams--;
  params=params.substring(""String_Node_Str"".length(),endOfParams);
  String[] args=params.split(""String_Node_Str"");
  if (args != null && args.length >= 2) {
    String dataVar=args[0];
    fetchData(dataVar);
    this.rowTemplate=args[1];
    if (args.length > 2) {
      this.emptyTemplate=args[2];
    }
 else {
      this.emptyTemplate=null;
    }
  }
}","private void parseFnParams(String params){
  int endOfParams=params.length();
  if (params.endsWith(""String_Node_Str""))   endOfParams--;
  params=params.substring(""String_Node_Str"".length(),endOfParams);
  String[] args=params.split(""String_Node_Str"");
  if (args != null && args.length >= 2) {
    String dataVar=args[0];
    if (options == null)     options=new HashMap<String,Object>();
    options.put(""String_Node_Str"",dataVar);
    this.rowTemplate=args[1];
    if (args.length > 2) {
      this.emptyTemplate=args[2];
    }
 else {
      this.emptyTemplate=null;
    }
  }
}"
60315,"private void parseEZParams(String paramString){
  String[] params=paramString.split(""String_Node_Str"");
  String dataVar=params[2];
  fetchData(dataVar);
  this.options=_parseAttributes(paramString);
  if (options == null)   options=new HashMap<String,Object>();
  options.put(""String_Node_Str"",dataVar);
  if (params.length > 3) {
    if (params[3].equals(""String_Node_Str"")) {
      String loopVarPrefix=params[4];
      if (loopVarPrefix != null) {
        if (loopVarPrefix.startsWith(""String_Node_Str"") || loopVarPrefix.startsWith(""String_Node_Str"")) {
          loopVarPrefix=loopVarPrefix.substring(1);
        }
        if (loopVarPrefix.contains(""String_Node_Str"")) {
          String[] labels=loopVarPrefix.split(""String_Node_Str"");
          String valuePrefix=labels[1];
          if (valuePrefix.startsWith(""String_Node_Str"") || valuePrefix.startsWith(""String_Node_Str"")) {
            valuePrefix=valuePrefix.substring(1);
          }
          options.put(""String_Node_Str"",labels[0]);
          options.put(""String_Node_Str"",valuePrefix);
        }
        options.put(""String_Node_Str"",loopVarPrefix);
      }
    }
  }
}","private void parseEZParams(String paramString){
  String[] params=paramString.split(""String_Node_Str"");
  String dataVar=params[2];
  this.options=_parseAttributes(paramString);
  if (options == null)   options=new HashMap<String,Object>();
  options.put(""String_Node_Str"",dataVar);
  if (params.length > 3) {
    if (params[3].equals(""String_Node_Str"")) {
      String loopVarPrefix=params[4];
      if (loopVarPrefix != null) {
        if (loopVarPrefix.startsWith(""String_Node_Str"") || loopVarPrefix.startsWith(""String_Node_Str"")) {
          loopVarPrefix=loopVarPrefix.substring(1);
        }
        if (loopVarPrefix.contains(""String_Node_Str"")) {
          String[] labels=loopVarPrefix.split(""String_Node_Str"");
          String valuePrefix=labels[1];
          if (valuePrefix.startsWith(""String_Node_Str"") || valuePrefix.startsWith(""String_Node_Str"")) {
            valuePrefix=valuePrefix.substring(1);
          }
          options.put(""String_Node_Str"",labels[0]);
          options.put(""String_Node_Str"",valuePrefix);
        }
        options.put(""String_Node_Str"",loopVarPrefix);
      }
    }
  }
}"
60316,"@SuppressWarnings(""String_Node_Str"") private TableData fetchData(String dataVar){
  TableData data=null;
  if (dataVar != null) {
    int rangeMarker=dataVar.indexOf(""String_Node_Str"");
    if (rangeMarker > 0) {
      int rangeMarker2=dataVar.indexOf(""String_Node_Str"",rangeMarker);
      if (rangeMarker2 < 0)       rangeMarker2=dataVar.length();
      String range=dataVar.substring(rangeMarker + 1,rangeMarker2);
      dataVar=dataVar.substring(0,rangeMarker);
      registerOption(""String_Node_Str"",range);
    }
    char c0=dataVar.charAt(0);
    boolean isDirective=false;
    if (c0 == '^' || c0 == '.') {
      dataVar=RegexFilter.applyRegex(dataVar,""String_Node_Str"");
      isDirective=true;
    }
    if (isDirective || c0 == '~' || c0 == '$') {
      dataVar=dataVar.substring(1);
      if (chunk != null) {
        Object dataStore=chunk.get(dataVar);
        int depth=0;
        while (dataStore != null && depth < 10) {
          if (dataStore instanceof TableData) {
            data=(TableData)dataStore;
          }
 else           if (dataStore instanceof String) {
            data=InlineTable.parseTable((String)dataStore);
          }
 else           if (dataStore instanceof Snippet) {
            Snippet snippetData=(Snippet)dataStore;
            if (snippetData.isSimplePointer()) {
              dataStore=chunk.get(snippetData.getPointer());
              depth++;
              continue;
            }
 else {
              data=InlineTable.parseTable(snippetData.toString());
            }
          }
 else           if (dataStore instanceof String[]) {
            data=new SimpleTable((String[])dataStore);
          }
 else           if (dataStore instanceof List) {
            List list=(List)dataStore;
            if (list.size() > 0) {
              Object a=list.get(0);
              if (a instanceof String) {
                data=new SimpleTable(list);
              }
 else               if (a instanceof Map) {
                data=new TableOfMaps(list);
              }
 else {
                data=TableOfMaps.boxObjectList((List)dataStore);
              }
            }
          }
 else           if (dataStore instanceof Object[]) {
            data=DataCapsuleTable.extractData((Object[])dataStore);
            if (data == null) {
              data=TableOfMaps.boxObjectArray((Object[])dataStore);
            }
          }
 else           if (dataStore instanceof Map) {
            Map object=(Map)dataStore;
            data=new ObjectTable(object);
          }
          break;
        }
      }
    }
 else {
      if (chunk != null) {
        String tableAsString=chunk.getTemplateSet().fetch(dataVar);
        if (tableAsString != null) {
          data=InlineTable.parseTable(tableAsString);
        }
      }
    }
  }
  return data;
}","@SuppressWarnings(""String_Node_Str"") private TableData fetchData(String dataVar,String origin){
  TableData data=null;
  if (dataVar != null) {
    int rangeMarker=dataVar.indexOf(""String_Node_Str"");
    if (rangeMarker > 0) {
      int rangeMarker2=dataVar.indexOf(""String_Node_Str"",rangeMarker);
      if (rangeMarker2 < 0)       rangeMarker2=dataVar.length();
      String range=dataVar.substring(rangeMarker + 1,rangeMarker2);
      dataVar=dataVar.substring(0,rangeMarker);
      registerOption(""String_Node_Str"",range);
    }
    char c0=dataVar.charAt(0);
    boolean isDirective=false;
    if (c0 == '^' || c0 == '.') {
      dataVar=RegexFilter.applyRegex(dataVar,""String_Node_Str"");
      isDirective=true;
    }
    if (isDirective || c0 == '~' || c0 == '$') {
      dataVar=dataVar.substring(1);
      if (chunk != null) {
        Object dataStore=chunk.get(dataVar);
        int depth=0;
        while (dataStore != null && depth < 10) {
          if (dataStore instanceof TableData) {
            data=(TableData)dataStore;
          }
 else           if (dataStore instanceof String) {
            data=InlineTable.parseTable((String)dataStore);
          }
 else           if (dataStore instanceof Snippet) {
            Snippet snippetData=(Snippet)dataStore;
            if (snippetData.isSimplePointer()) {
              dataStore=chunk.get(snippetData.getPointer());
              depth++;
              continue;
            }
 else {
              data=InlineTable.parseTable(snippetData.toString());
            }
          }
 else           if (dataStore instanceof String[]) {
            data=new SimpleTable((String[])dataStore);
          }
 else           if (dataStore instanceof List) {
            List list=(List)dataStore;
            if (list.size() > 0) {
              Object a=list.get(0);
              if (a instanceof String) {
                data=new SimpleTable(list);
              }
 else               if (a instanceof Map) {
                data=new TableOfMaps(list);
              }
 else {
                data=TableOfMaps.boxObjectList((List)dataStore);
              }
            }
          }
 else           if (dataStore instanceof Object[]) {
            data=DataCapsuleTable.extractData((Object[])dataStore);
            if (data == null) {
              data=TableOfMaps.boxObjectArray((Object[])dataStore);
            }
          }
 else           if (dataStore instanceof Map) {
            Map object=(Map)dataStore;
            data=new ObjectTable(object);
          }
          break;
        }
      }
    }
 else {
      if (chunk != null) {
        dataVar=qualifyTemplateRef(origin,dataVar);
        String tableAsString=chunk.getTemplateSet().fetch(dataVar);
        if (tableAsString != null) {
          data=InlineTable.parseTable(tableAsString);
        }
      }
    }
  }
  return data;
}"
60317,"@Override public void renderBlock(Writer out,Chunk context,String origin,int depth) throws IOException {
  if (dividerSnippet != null && !options.containsKey(""String_Node_Str"")) {
    options.put(""String_Node_Str"",dividerSnippet);
  }
  this.chunk=context;
  TableData data=null;
  if (options != null) {
    data=fetchData((String)options.get(""String_Node_Str""));
  }
  cookLoopToPrinter(out,context,origin,true,depth,data);
}","@Override public void renderBlock(Writer out,Chunk context,String origin,int depth) throws IOException {
  if (dividerSnippet != null && !options.containsKey(""String_Node_Str"")) {
    options.put(""String_Node_Str"",dividerSnippet);
  }
  this.chunk=context;
  TableData data=null;
  if (options != null) {
    data=fetchData((String)options.get(""String_Node_Str""),origin);
  }
  cookLoopToPrinter(out,context,origin,true,depth,data);
}"
60318,"private boolean isLiteralClose(String template,char magicChar,int tagStart,int i){
  if (magicChar == '^') {
    if (tagStart == i - 2) {
      return true;
    }
  }
 else   if (magicChar == '~') {
    if (tagStart == i - 3 && template.charAt(i - 1) == '.') {
      return true;
    }
 else     if (tagStart == i - 11 && template.substring(tagStart + 3,i).equals(""String_Node_Str"")) {
      return true;
    }
  }
 else   if (tagStart == i - 9 && magicChar == '/') {
    if (template.substring(tagStart + 1,i).equals(""String_Node_Str"")) {
      return true;
    }
  }
  return false;
}","private boolean isLiteralClose(String template,char magicChar,int tagStart,int i){
  if (magicChar == '.' && i - tagStart > 8) {
    if (template.charAt(tagStart + 1) == '%') {
      int exprEnd=i - 1;
      if (template.charAt(exprEnd) == '%')       exprEnd--;
      String expr=template.substring(tagStart + 2,exprEnd).trim();
      if (expr.equals(""String_Node_Str"") || expr.equals(""String_Node_Str"")) {
        return true;
      }
    }
  }
 else   if (magicChar == '^') {
    if (tagStart == i - 2) {
      return true;
    }
  }
 else   if (magicChar == '~') {
    if (tagStart == i - 3 && template.charAt(i - 1) == '.') {
      return true;
    }
 else     if (tagStart == i - 11 && template.substring(tagStart + 3,i).equals(""String_Node_Str"")) {
      return true;
    }
  }
 else   if (tagStart == i - 9 && magicChar == '/') {
    if (template.substring(tagStart + 1,i).equals(""String_Node_Str"")) {
      return true;
    }
  }
  return false;
}"
60319,"public void render(Writer out,Chunk rules,String origin,int depth) throws IOException {
  if (depthCheckFails(depth,out))   return;
  Object tagValue=null;
  if (path == null)   init();
  tagValue=rules.resolveTagValue(this,depth,origin);
  if (tagValue == null) {
    out.append(super.snippetText);
  }
 else   if (tagValue instanceof Snippet) {
    ((Snippet)tagValue).render(out,rules,depth);
  }
 else   if (tagValue instanceof String) {
    Snippet compiled=Snippet.getSnippet((String)tagValue);
    compiled.render(out,rules,depth + 1);
  }
 else {
    rules.explodeToPrinter(out,tagValue,depth + 1);
  }
}","public void render(Writer out,Chunk rules,String origin,int depth) throws IOException {
  if (depthCheckFails(depth,out))   return;
  Object tagValue=null;
  if (path == null)   init();
  tagValue=rules.resolveTagValue(this,depth,origin);
  if (tagValue == null) {
    out.append(super.snippetText);
  }
 else   if (tagValue instanceof Snippet) {
    ((Snippet)tagValue).render(out,rules,depth);
  }
 else   if (tagValue instanceof String) {
    Snippet compiled=Snippet.getSnippet((String)tagValue,origin);
    compiled.render(out,rules,depth + 1);
  }
 else {
    rules.explodeToPrinter(out,tagValue,depth + 1);
  }
}"
60320,"public static StringBuilder expandShorthand(String name,StringBuilder template){
  if (template.indexOf(""String_Node_Str"") > -1 || template.indexOf(""String_Node_Str"") > -1)   return null;
  Matcher m=SUPER_TAG.matcher(template);
  if (m.find())   return null;
  String fullRef=name;
  if (fullRef != null) {
    int dotPos=fullRef.indexOf('.');
    if (dotPos > 0)     fullRef=name.substring(0,dotPos);
  }
  int cursor=template.indexOf(""String_Node_Str"");
  while (cursor > -1) {
    if (template.length() == cursor + 1)     return template;
    char afterBrace=template.charAt(cursor + 1);
    if (afterBrace == '%') {
      cursor++;
      while (cursor + 1 < template.length() && Character.isWhitespace(template.charAt(cursor + 1))) {
        cursor++;
      }
      afterBrace=template.charAt(cursor + 1);
      if (Snippet.MAGIC_CHARS.indexOf(afterBrace) < 0) {
        template.replace(cursor + 1,cursor + 1,""String_Node_Str"");
        afterBrace='~';
      }
    }
    if (afterBrace == '^' || afterBrace == '.') {
      int afterLiteralBlock=skipLiterals(template,cursor);
      if (afterLiteralBlock == cursor) {
        template.replace(cursor + 1,cursor + 2,""String_Node_Str"");
      }
 else {
        cursor=afterLiteralBlock;
      }
    }
 else     if (afterBrace == '/') {
      template.replace(cursor + 1,cursor + 2,""String_Node_Str"");
    }
 else     if (afterBrace == '*') {
      cursor=expandShorthandMacro(template,fullRef,cursor);
    }
 else {
      cursor+=2;
    }
    if (cursor > -1)     cursor=template.indexOf(""String_Node_Str"",cursor);
  }
  return template;
}","public static StringBuilder expandShorthand(String name,StringBuilder template){
  if (template.indexOf(""String_Node_Str"") > -1 || template.indexOf(""String_Node_Str"") > -1)   return null;
  Matcher m=SUPER_TAG.matcher(template);
  if (m.find())   return null;
  int cursor=template.indexOf(""String_Node_Str"");
  while (cursor > -1) {
    if (template.length() == cursor + 1)     return template;
    char afterBrace=template.charAt(cursor + 1);
    if (afterBrace == '^' || afterBrace == '.' || afterBrace == '%') {
      int afterLiteralBlock=skipLiterals(template,cursor);
      if (afterLiteralBlock != cursor) {
        cursor=afterLiteralBlock;
      }
 else {
        if (afterBrace != '%') {
          template.replace(cursor + 1,cursor + 2,""String_Node_Str"");
        }
 else {
          int exprStart=cursor + 2;
          while (exprStart < template.length() && Character.isWhitespace(template.charAt(exprStart))) {
            exprStart++;
          }
          afterBrace=template.charAt(exprStart);
          if (Snippet.MAGIC_CHARS.indexOf(afterBrace) < 0) {
            template.replace(exprStart,exprStart,""String_Node_Str"");
            afterBrace='~';
          }
        }
        cursor+=2;
      }
    }
 else     if (afterBrace == '/') {
      template.replace(cursor + 1,cursor + 2,""String_Node_Str"");
    }
 else {
      cursor+=2;
    }
    if (cursor > -1)     cursor=template.indexOf(""String_Node_Str"",cursor);
  }
  return template;
}"
60321,"private String getLiteralLines(int litBegin,String firstLine,BufferedReader brTemp,StringBuilder sbTemp) throws IOException {
  int litEnd=firstLine.indexOf(LITERAL_END,litBegin + 2);
  int endMarkerLen=LITERAL_END.length();
  int litEndLong=firstLine.indexOf(LITERAL_END_LONGHAND,litBegin + 2);
  if (litEndLong > -1 && (litEnd < 0 || litEndLong < litEnd)) {
    litEnd=litEndLong;
    endMarkerLen=LITERAL_END_LONGHAND.length();
  }
  if (litEnd > -1) {
    litEnd+=endMarkerLen;
    sbTemp.append(firstLine.substring(0,litEnd));
    return firstLine.substring(litEnd);
  }
 else {
    sbTemp.append(firstLine);
    sbTemp.append(""String_Node_Str"");
    String line=null;
    while (brTemp.ready()) {
      line=brTemp.readLine();
      if (line == null)       break;
      litEnd=line.indexOf(LITERAL_END);
      litEndLong=line.indexOf(LITERAL_END_LONGHAND);
      if (litEndLong > -1 && (litEnd < 0 || litEndLong < litEnd)) {
        litEnd=litEndLong;
        endMarkerLen=LITERAL_END_LONGHAND.length();
      }
      if (litEnd > -1) {
        litEnd+=endMarkerLen;
        sbTemp.append(line.substring(0,litEnd));
        return line.substring(litEnd);
      }
      sbTemp.append(line);
      sbTemp.append(""String_Node_Str"");
    }
    return ""String_Node_Str"";
  }
}","private String getLiteralLines(int litBegin,String firstLine,BufferedReader brTemp,StringBuilder sbTemp) throws IOException {
  Matcher m=LITERAL_CLOSE.matcher(firstLine);
  if (m.find(litBegin + 2)) {
    int litEnd=m.end();
    sbTemp.append(firstLine.substring(0,litEnd));
    return firstLine.substring(litEnd);
  }
 else {
    sbTemp.append(firstLine);
    sbTemp.append(""String_Node_Str"");
    String line=null;
    while (brTemp.ready()) {
      line=brTemp.readLine();
      if (line == null)       break;
      m.reset(line);
      if (m.find()) {
        int litEnd=m.end();
        sbTemp.append(line.substring(0,litEnd));
        return line.substring(litEnd);
      }
      sbTemp.append(line);
      sbTemp.append(""String_Node_Str"");
    }
    return ""String_Node_Str"";
  }
}"
60322,"private static int skipLiterals(StringBuilder template,int cursor){
  int wall=template.length();
  int shortLen=LITERAL_SHORTHAND.length();
  int scanStart=cursor;
  if (cursor + shortLen <= wall && template.substring(cursor,cursor + shortLen).equals(LITERAL_SHORTHAND)) {
    scanStart=cursor + shortLen;
  }
 else {
    int longLen=LITERAL_START2.length();
    if (cursor + longLen <= wall && template.substring(cursor,cursor + longLen).equals(LITERAL_START2)) {
      scanStart=cursor + longLen;
    }
 else {
      longLen=LITERAL_START.length();
      if (cursor + longLen <= wall && template.substring(cursor,cursor + longLen).equals(LITERAL_START)) {
        scanStart=cursor + longLen;
      }
    }
  }
  if (scanStart > cursor) {
    int tail=template.indexOf(LITERAL_END,scanStart);
    int longTail=template.indexOf(LITERAL_END_LONGHAND,scanStart);
    tail=(tail < 0) ? longTail : (longTail < 0) ? tail : Math.min(tail,longTail);
    if (tail < 0) {
      return wall;
    }
 else {
      return tail + (tail == longTail ? LITERAL_END_LONGHAND.length() : LITERAL_END.length());
    }
  }
 else {
    return cursor;
  }
}","private static int skipLiterals(StringBuilder template,int cursor){
  int scanStart=cursor;
  Matcher m=LITERAL_OPEN_HERE.matcher(template);
  if (m.find(scanStart)) {
    scanStart=m.end();
  }
  if (scanStart > cursor) {
    m=LITERAL_CLOSE.matcher(template);
    if (m.find(scanStart)) {
      return m.end();
    }
 else {
      return template.length();
    }
  }
 else {
    return cursor;
  }
}"
60323,"public static int findLiteralMarker(String text,int startAt){
  int literalPos=text.indexOf(LITERAL_START,startAt);
  int literal2Pos=text.indexOf(LITERAL_START2,startAt);
  int litPos=text.indexOf(LITERAL_SHORTHAND,startAt);
  int[] pos=new int[]{literalPos,literal2Pos,litPos};
  int firstEncounter=-1;
  for (int i=0; i < 3; i++) {
    int p=pos[i];
    if (p > -1) {
      if (firstEncounter < 0) {
        firstEncounter=p;
      }
 else {
        firstEncounter=Math.min(firstEncounter,p);
      }
    }
  }
  return firstEncounter;
}","public static int findLiteralMarker(String text,int startAt){
  Matcher m=LITERAL_OPEN_ANYWHERE.matcher(text);
  if (m.find(startAt)) {
    return m.start();
  }
 else {
    return -1;
  }
}"
60324,"public String transformText(Chunk chunk,String text,String[] args){
  String templateName;
  if (args != null && args.length > 0) {
    templateName=args[0];
    templateName=BlockTag.qualifyTemplateRef(chunk.getTemplateOrigin(),templateName);
  }
 else {
    return null;
  }
  if (chunk == null)   return null;
  ContentSource theme=chunk.getTemplateSet();
  if (theme == null)   return null;
  Snippet filterBody=theme.getSnippet(templateName);
  if (filterBody == null) {
    return null;
  }
  Chunk miniMacro=new Chunk();
  miniMacro.append(filterBody);
  miniMacro.setOrDelete(""String_Node_Str"",text);
  return miniMacro.toString();
}","public String transformText(Chunk chunk,String text,String[] args){
  String templateName;
  if (args != null && args.length > 0) {
    templateName=args[0];
    if (chunk != null) {
      templateName=BlockTag.qualifyTemplateRef(chunk.getTemplateOrigin(),templateName);
    }
  }
 else {
    return null;
  }
  if (chunk == null)   return null;
  ContentSource theme=chunk.getTemplateSet();
  if (theme == null)   return null;
  Snippet filterBody=theme.getSnippet(templateName);
  if (filterBody == null) {
    return null;
  }
  Chunk miniMacro=new Chunk();
  miniMacro.append(filterBody);
  miniMacro.setOrDelete(""String_Node_Str"",text);
  return miniMacro.toString();
}"
60325,"protected Object _resolveTagValue(String tagName,int depth,boolean ignoreParentContext){
  if (isInvalidTag(tagName))   return null;
  if (tagName.indexOf('`') > -1) {
    tagName=resolveBackticks(tagName,depth);
  }
  String lookupName=tagName;
  int colonPos=tagName.indexOf(':');
  int pipePos=tagName.indexOf('|');
  if (pipePos > -1)   pipePos=confirmPipe(tagName,pipePos);
  if (colonPos > 0 || pipePos > 0) {
    int firstMod=(colonPos > 0) ? colonPos : pipePos;
    if (pipePos > 0 && pipePos < colonPos)     firstMod=pipePos;
    lookupName=tagName.substring(0,firstMod);
  }
  Object tagValue=null;
  if (lookupName.charAt(0) == '.') {
    tagValue=altFetch(tagName,depth);
  }
 else   if (hasValue(lookupName)) {
    tagValue=getTag(lookupName);
  }
 else {
    Vector<Chunk> parentContext=getCurrentParentContext();
    if (parentContext != null) {
      for (      Chunk ancestor : parentContext) {
        tagValue=ancestor._resolveTagValue(lookupName,depth,true);
        if (tagValue != null)         break;
      }
    }
  }
  if (tagValue != null) {
    if (pipePos > 0) {
      Chunk filterMeLater=makeChildChunk();
      String filter=parseTagTokens(tagName,pipePos,colonPos)[0];
      String[] filters=TextFilter.splitFilters(filter);
      filterMeLater.set(""String_Node_Str"",tagValue,filter);
      filterMeLater.append(""String_Node_Str"");
      filterMeLater.delayedFilter=filters[0];
      return makeFilterOnion(tagValue,filterMeLater,filters);
    }
 else {
      return tagValue;
    }
  }
  if (colonPos > 0) {
    String defValue=null;
    String filter=null;
    String order=TextFilter.FILTER_LAST;
    if (pipePos > 0) {
      String[] tokens=parseTagTokens(tagName,pipePos,colonPos);
      filter=tokens[0];
      defValue=tokens[1];
      order=tokens[2];
    }
 else {
      defValue=tagName.substring(colonPos + 1);
    }
    if (defValue != null && defValue.length() > 0) {
      char firstChar=defValue.charAt(0);
      if (firstChar == '~' || firstChar == '+' || firstChar == '^') {
        if (filter == null) {
          return '{' + defValue + '}';
        }
 else         if (order.equals(TextFilter.FILTER_FIRST)) {
          String filtered=TextFilter.applyTextFilter(this,filter,null);
          if (filtered != null) {
            return filtered;
          }
 else {
            return '{' + defValue + '}';
          }
        }
 else {
          return '{' + defValue + '|'+ filter+ '}';
        }
      }
    }
    if (filter != null) {
      if (order.equals(TextFilter.FILTER_FIRST)) {
        String filtered=TextFilter.applyTextFilter(this,filter,null);
        return (filtered != null) ? filtered : defValue;
      }
 else {
        return TextFilter.applyTextFilter(this,filter,defValue);
      }
    }
 else {
      return defValue;
    }
  }
 else {
    if (pipePos > 0) {
      String filter=tagName.substring(pipePos + 1);
      return TextFilter.applyTextFilter(this,filter,null);
    }
 else {
      return null;
    }
  }
}","protected Object _resolveTagValue(String tagName,int depth,boolean ignoreParentContext){
  if (isInvalidTag(tagName))   return null;
  if (tagName.indexOf('`') > -1) {
    tagName=resolveBackticks(tagName,depth);
  }
  String lookupName=tagName;
  int colonPos=tagName.indexOf(':');
  int pipePos=tagName.indexOf('|');
  if (pipePos > -1)   pipePos=confirmPipe(tagName,pipePos);
  if (colonPos > 0 || pipePos > 0) {
    int firstMod=(colonPos > 0) ? colonPos : pipePos;
    if (pipePos > 0 && pipePos < colonPos)     firstMod=pipePos;
    lookupName=tagName.substring(0,firstMod);
  }
  Object tagValue=null;
  if (lookupName.charAt(0) == '.') {
    tagValue=altFetch(tagName,depth);
  }
 else   if (hasValue(lookupName)) {
    tagValue=getTag(lookupName);
  }
 else {
    Vector<Chunk> parentContext=getCurrentParentContext();
    if (parentContext != null) {
      for (      Chunk ancestor : parentContext) {
        tagValue=ancestor._resolveTagValue(lookupName,depth,true);
        if (tagValue != null)         break;
      }
    }
  }
  if (tagValue != null) {
    if (pipePos > 0) {
      Chunk filterMeLater=makeChildChunk();
      String filter=parseTagTokens(tagName,pipePos,colonPos)[0];
      String[] filters=TextFilter.splitFilters(filter);
      filterMeLater.set(""String_Node_Str"",tagValue,filter);
      filterMeLater.append(""String_Node_Str"");
      filterMeLater.delayedFilter=filters[0];
      return makeFilterOnion(tagValue,filterMeLater,filters);
    }
 else {
      return tagValue;
    }
  }
  if (colonPos > 0) {
    String defValue=null;
    String filter=null;
    String order=TextFilter.FILTER_LAST;
    if (pipePos > 0) {
      String[] tokens=parseTagTokens(tagName,pipePos,colonPos);
      filter=tokens[0];
      defValue=tokens[1];
      order=tokens[2];
    }
 else {
      defValue=tagName.substring(colonPos + 1);
    }
    if (defValue != null && defValue.length() > 0) {
      char firstChar=defValue.charAt(0);
      if (firstChar == '~' || firstChar == '$' || firstChar == '+' || firstChar == '^' || firstChar == '.') {
        if (filter == null) {
          return '{' + defValue + '}';
        }
 else         if (order.equals(TextFilter.FILTER_FIRST)) {
          String filtered=TextFilter.applyTextFilter(this,filter,null);
          if (filtered != null) {
            return filtered;
          }
 else {
            return '{' + defValue + '}';
          }
        }
 else {
          return '{' + defValue + '|'+ filter+ '}';
        }
      }
    }
    if (filter != null) {
      if (order.equals(TextFilter.FILTER_FIRST)) {
        String filtered=TextFilter.applyTextFilter(this,filter,null);
        return (filtered != null) ? filtered : defValue;
      }
 else {
        return TextFilter.applyTextFilter(this,filter,defValue);
      }
    }
 else {
      return defValue;
    }
  }
 else {
    if (pipePos > 0) {
      String filter=tagName.substring(pipePos + 1);
      return TextFilter.applyTextFilter(this,filter,null);
    }
 else {
      return null;
    }
  }
}"
60326,"private boolean isTrueExpr(String test,Chunk context){
  if (test == null)   return false;
  test=test.trim();
  if (test.length() == 0)   return false;
  char firstChar=test.charAt(0);
  if (firstChar == '!' || firstChar == '~' || firstChar == '$') {
    test=test.substring(1);
  }
  if (firstChar == '!' && (test.charAt(0) == '~' || test.charAt(0) == '$')) {
    test=test.substring(1);
  }
  if (test.indexOf('=') < 0 && test.indexOf(""String_Node_Str"") < 0) {
    Object tagValue=context.get(test);
    if (firstChar == '~' || firstChar == '$') {
      return (tagValue != null) ? true : false;
    }
 else     if (firstChar == '!') {
      return (tagValue == null) ? true : false;
    }
 else {
      return (test.equalsIgnoreCase(""String_Node_Str"")) ? true : false;
    }
  }
  boolean isNeg=false;
  if (test.indexOf(""String_Node_Str"") > 0 || (isNeg=test.indexOf(""String_Node_Str"") > 0)) {
    String[] parts=test.split(""String_Node_Str"");
    if (parts.length == 2) {
      String tagA=parts[0].trim();
      String tagB=parts[1].trim();
      Object tagValue=context.get(tagA);
      String tagValueA=tagValue == null ? ""String_Node_Str"" : tagValue.toString();
      if (tagB.charAt(0) == '~' || tagB.charAt(0) == '$') {
        tagValue=context.get(tagB.substring(1));
        String tagValueB=tagValue == null ? ""String_Node_Str"" : tagValue.toString();
        if (isNeg) {
          return (tagValueA.equals(tagValueB)) ? false : true;
        }
 else {
          return (tagValueA.equals(tagValueB)) ? true : false;
        }
      }
 else {
        String match=tagB;
        if (tagB.charAt(0) == '""' && tagB.charAt(match.length() - 1) == '""') {
          match=tagB.substring(1,tagB.length() - 1);
        }
        if (isNeg) {
          return (tagValueA.equals(match)) ? false : true;
        }
 else {
          return (tagValueA.equals(match)) ? true : false;
        }
      }
    }
  }
  String[] parts=test.split(""String_Node_Str"");
  boolean neg=false;
  if (parts.length != 2) {
    parts=test.split(""String_Node_Str"");
    neg=true;
    if (parts.length != 2) {
      return false;
    }
  }
  String var=parts[0].trim();
  String regex=parts[1].trim();
  Object tagValue=context.get(var);
  boolean isMatch=isMatch(tagValue == null ? null : tagValue.toString(),regex);
  if (neg) {
    return isMatch ? false : true;
  }
 else {
    return isMatch ? true : false;
  }
}","private boolean isTrueExpr(String test,Chunk context){
  if (test == null)   return false;
  test=test.trim();
  if (test.length() == 0)   return false;
  char firstChar=test.charAt(0);
  if (firstChar == '!' || firstChar == '~' || firstChar == '$') {
    test=test.substring(1);
  }
  if (firstChar == '!' && (test.charAt(0) == '~' || test.charAt(0) == '$')) {
    test=test.substring(1);
  }
  if (test.indexOf('=') < 0 && test.indexOf(""String_Node_Str"") < 0) {
    Object tagValue=context.get(test);
    if (firstChar == '~' || firstChar == '$') {
      return (tagValue != null) ? true : false;
    }
 else     if (firstChar == '!') {
      return (tagValue == null) ? true : false;
    }
 else {
      return (test.equalsIgnoreCase(""String_Node_Str"")) ? true : false;
    }
  }
  boolean isNeg=false;
  if (test.indexOf(""String_Node_Str"") > 0 || (isNeg=test.indexOf(""String_Node_Str"") > 0)) {
    String[] parts=test.split(""String_Node_Str"");
    if (parts.length == 2) {
      String tagA=parts[0].trim();
      String tagB=parts[1].trim();
      Object tagValue=context.get(tagA);
      String tagValueA=tagValue == null ? ""String_Node_Str"" : tagValue.toString();
      if (tagB.charAt(0) == '~' || tagB.charAt(0) == '$') {
        tagValue=context.get(tagB.substring(1));
        String tagValueB=tagValue == null ? ""String_Node_Str"" : tagValue.toString();
        if (isNeg) {
          return (tagValueA.equals(tagValueB)) ? false : true;
        }
 else {
          return (tagValueA.equals(tagValueB)) ? true : false;
        }
      }
 else {
        String match=tagB;
        if (tagB.charAt(0) == '""' && tagB.charAt(match.length() - 1) == '""') {
          match=tagB.substring(1,tagB.length() - 1);
          match=unescape(match);
        }
 else         if (tagB.charAt(0) == '\'' && tagB.charAt(match.length() - 1) == '\'') {
          match=tagB.substring(1,tagB.length() - 1);
          match=unescape(match);
        }
        if (isNeg) {
          return (tagValueA.equals(match)) ? false : true;
        }
 else {
          return (tagValueA.equals(match)) ? true : false;
        }
      }
    }
  }
  String[] parts=test.split(""String_Node_Str"");
  boolean neg=false;
  if (parts.length != 2) {
    parts=test.split(""String_Node_Str"");
    neg=true;
    if (parts.length != 2) {
      return false;
    }
  }
  String var=parts[0].trim();
  String regex=parts[1].trim();
  Object tagValue=context.get(var);
  boolean isMatch=isMatch(tagValue == null ? null : tagValue.toString(),regex);
  if (neg) {
    return isMatch ? false : true;
  }
 else {
    return isMatch ? true : false;
  }
}"
60327,"private static String parseRegexEscapes(String str){
  if (str == null)   return str;
  char[] strArr=str.toCharArray();
  boolean escape=false;
  StringBuilder buf=new StringBuilder();
  for (int i=0; i < strArr.length; ++i) {
    if (escape) {
      if (strArr[i] == 'b') {
        buf.append('\b');
      }
 else       if (strArr[i] == 't') {
        buf.append('\t');
      }
 else       if (strArr[i] == 'n') {
        buf.append('\n');
      }
 else       if (strArr[i] == 'r') {
        buf.append('\r');
      }
 else       if (strArr[i] == 'f') {
        buf.append('\f');
      }
 else       if (strArr[i] == 'U') {
        buf.append(""String_Node_Str"");
      }
 else       if (strArr[i] == 'L') {
        buf.append(""String_Node_Str"");
      }
 else       if (strArr[i] == 'u') {
        int utf=Integer.parseInt(str.substring(i + 1,i + 5),16);
        buf.append((char)utf);
        i+=4;
      }
 else       if (Character.isDigit(strArr[i])) {
        int j=0;
        for (j=1; (j < 2) && (i + j < strArr.length); ++j) {
          if (!Character.isDigit(strArr[i + j]))           break;
        }
        int octal=Integer.parseInt(str.substring(i,i + j),8);
        buf.append((char)octal);
        i+=j - 1;
      }
 else {
        buf.append(strArr[i]);
      }
      escape=false;
    }
 else     if (strArr[i] == '\\') {
      escape=true;
    }
 else {
      buf.append(strArr[i]);
    }
  }
  return buf.toString();
}","public static String parseRegexEscapes(String str){
  if (str == null)   return str;
  char[] strArr=str.toCharArray();
  boolean escape=false;
  StringBuilder buf=new StringBuilder();
  for (int i=0; i < strArr.length; ++i) {
    if (escape) {
      if (strArr[i] == 'b') {
        buf.append('\b');
      }
 else       if (strArr[i] == 't') {
        buf.append('\t');
      }
 else       if (strArr[i] == 'n') {
        buf.append('\n');
      }
 else       if (strArr[i] == 'r') {
        buf.append('\r');
      }
 else       if (strArr[i] == 'f') {
        buf.append('\f');
      }
 else       if (strArr[i] == 'U') {
        buf.append(""String_Node_Str"");
      }
 else       if (strArr[i] == 'L') {
        buf.append(""String_Node_Str"");
      }
 else       if (strArr[i] == 'u') {
        if (i + 4 < strArr.length) {
          int utf=Integer.parseInt(str.substring(i + 1,i + 5),16);
          buf.append((char)utf);
          i+=4;
        }
 else {
          buf.append('\\');
          buf.append(strArr[i]);
        }
      }
 else       if (Character.isDigit(strArr[i])) {
        int j=0;
        for (j=1; (j < 2) && (i + j < strArr.length); ++j) {
          if (!Character.isDigit(strArr[i + j]))           break;
        }
        int octal=Integer.parseInt(str.substring(i,i + j),8);
        buf.append((char)octal);
        i+=j - 1;
      }
 else {
        buf.append(strArr[i]);
      }
      escape=false;
    }
 else     if (strArr[i] == '\\') {
      escape=true;
    }
 else {
      buf.append(strArr[i]);
    }
  }
  return buf.toString();
}"
60328,"private Chunk makeChildChunk(){
  if (chunkFactory == null) {
    Chunk child=new Chunk();
    child.setLocale(this.localeCode);
    return child;
  }
 else {
    return chunkFactory.makeChunk();
  }
}","private Chunk makeChildChunk(){
  Chunk child=chunkFactory == null ? new Chunk() : chunkFactory.makeChunk();
  child.setLocale(this.localeCode);
  return child;
}"
60329,"public static String processFormatString(String string,String[] args,Chunk context,HashMap<String,String> translations){
  if (string == null)   return null;
  String xlated=string;
  if (translations != null && translations.containsKey(string)) {
    xlated=translations.get(string);
  }
  if (!xlated.contains(""String_Node_Str"") || args == null || context == null) {
    return xlated;
  }
  Object[] values=new String[args.length];
  for (int i=0; i < args.length; i++) {
    String tagName=args[i];
    if (tagName.startsWith(""String_Node_Str"") || tagName.startsWith(""String_Node_Str"")) {
      Object val=context.get(tagName.substring(1));
      String valString=(val == null ? ""String_Node_Str"" : val.toString());
      values[i]=valString;
    }
 else {
      values[i]=tagName;
    }
  }
  try {
    return String.format(xlated,values);
  }
 catch (  IllegalFormatException e) {
    return xlated;
  }
}","public static String processFormatString(String string,String[] args,Chunk context,HashMap<String,String> translations){
  if (string == null)   return null;
  String xlated=string;
  if (translations != null && translations.containsKey(string)) {
    xlated=translations.get(string);
  }
  if (args == null || context == null || !xlated.contains(""String_Node_Str"")) {
    return xlated;
  }
  Object[] values=new String[args.length];
  for (int i=0; i < args.length; i++) {
    String tagName=args[i];
    if (tagName.startsWith(""String_Node_Str"") || tagName.startsWith(""String_Node_Str"")) {
      Object val=context.get(tagName.substring(1));
      String valString=(val == null ? ""String_Node_Str"" : val.toString());
      values[i]=valString;
    }
 else {
      values[i]=tagName;
    }
  }
  try {
    return String.format(xlated,values);
  }
 catch (  IllegalFormatException e) {
    return xlated;
  }
}"
60330,"public void cookLoopToPrinter(Writer out,Chunk context,boolean isBlock,int depth) throws IOException {
  if (data == null || !data.hasNext()) {
    if (emptySnippet == null) {
      if (isBlock) {
        out.append(""String_Node_Str"");
      }
 else {
        out.append(""String_Node_Str"");
      }
    }
 else {
      emptySnippet.render(out,context,depth);
    }
    return;
  }
  Snippet dividerSnippet=null;
  boolean createArrayTags=false;
  boolean counterTags=false;
  String counterTag=null;
  String firstRunTag=null;
  String lastRunTag=null;
  if (options != null) {
    if (options.containsKey(""String_Node_Str"")) {
      dividerSnippet=(Snippet)options.get(""String_Node_Str"");
    }
 else     if (options.containsKey(""String_Node_Str"")) {
      String dividerTemplate=(String)options.get(""String_Node_Str"");
      ContentSource templates=context.getTemplateSet();
      if (templates != null && templates.provides(dividerTemplate)) {
        dividerSnippet=templates.getSnippet(dividerTemplate);
      }
 else {
        dividerSnippet=Snippet.getSnippet(dividerTemplate);
      }
      options.put(""String_Node_Str"",dividerSnippet);
    }
    if (options.containsKey(""String_Node_Str"")) {
      createArrayTags=true;
    }
    if (options.containsKey(""String_Node_Str"")) {
      counterTags=true;
    }
    if (options.containsKey(""String_Node_Str"")) {
      counterTag=(String)options.get(""String_Node_Str"");
      counterTag=eatTagSymbol(counterTag);
    }
    if (options.containsKey(""String_Node_Str"")) {
      String tagNames=(String)options.get(""String_Node_Str"");
      if (tagNames.indexOf(""String_Node_Str"") > 0) {
        String[] userFirstLast=tagNames.split(""String_Node_Str"");
        firstRunTag=eatTagSymbol(userFirstLast[0]);
        lastRunTag=eatTagSymbol(userFirstLast[1]);
      }
      if (firstRunTag == null || firstRunTag.length() == 0) {
        firstRunTag=FIRST_MARKER;
      }
      if (lastRunTag == null || lastRunTag.length() == 0) {
        lastRunTag=LAST_MARKER;
      }
    }
  }
  ChunkFactory factory=context.getChunkFactory();
  if (rowX == null) {
    rowX=(factory == null) ? new Chunk() : factory.makeChunk();
    rowX.append(rowSnippet);
  }
  String prefix=null;
  if (options != null && options.containsKey(""String_Node_Str"")) {
    String name=(String)options.get(""String_Node_Str"");
    prefix=name;
  }
  String[] columnLabels=data.getColumnLabels();
  if (createArrayTags && columnLabels == null) {
    createArrayTags=false;
  }
  String[] prefixedLabels=null;
  String[] prefixedIndices=null;
  String[] anonIndices=null;
  if (prefix != null && columnLabels != null) {
    prefixedLabels=new String[columnLabels.length];
    for (int i=columnLabels.length - 1; i > -1; i--) {
      prefixedLabels[i]=prefix + ""String_Node_Str"" + columnLabels[i];
    }
    if (createArrayTags) {
      prefixedIndices=new String[columnLabels.length];
      for (int i=0; i < prefixedIndices.length; i++) {
        prefixedIndices[i]=prefix + ""String_Node_Str"" + i+ ""String_Node_Str"";
      }
    }
  }
  if (createArrayTags) {
    anonIndices=new String[columnLabels.length];
    for (int i=0; i < anonIndices.length; i++) {
      anonIndices[i]=""String_Node_Str"" + i + ""String_Node_Str"";
    }
  }
  int counter=0;
  while (data.hasNext()) {
    if (counterTags) {
      rowX.set(""String_Node_Str"",counter);
      rowX.set(""String_Node_Str"",counter + 1);
    }
    if (counterTag != null) {
      rowX.set(counterTag,counter);
    }
    if (dividerSnippet != null && counter > 0) {
      dividerSnippet.render(out,context,depth);
    }
    Map<String,Object> record=data.nextRecord();
    if (columnLabels != null) {
      for (int i=columnLabels.length - 1; i > -1; i--) {
        String field=columnLabels[i];
        Object value=record.get(field);
        String fieldName=prefix == null ? field : prefixedLabels[i];
        rowX.setOrDelete(fieldName,value);
        if (createArrayTags) {
          rowX.setOrDelete(anonIndices[i],value);
          if (prefix != null) {
            rowX.setOrDelete(prefixedIndices[i],value);
          }
        }
      }
    }
 else {
      for (      String key : record.keySet()) {
        Object value=record.get(key);
        String fieldName=prefix == null ? key : prefix + ""String_Node_Str"" + key;
        rowX.setOrDelete(fieldName,value);
      }
    }
    if (prefix != null && columnLabels != null) {
      if (columnLabels.length == 1 && columnLabels[0].equals(SimpleTable.ANON_ARRAY_LABEL)) {
        rowX.setOrDelete(prefix,record.get(SimpleTable.ANON_ARRAY_LABEL));
      }
    }
    if (firstRunTag != null) {
      if (counter == 0) {
        rowX.set(firstRunTag,""String_Node_Str"");
        if (prefix != null)         rowX.set(prefix + ""String_Node_Str"" + firstRunTag,""String_Node_Str"");
      }
 else       if (counter == 1) {
        rowX.unset(firstRunTag);
        if (prefix != null)         rowX.unset(prefix + ""String_Node_Str"" + firstRunTag);
      }
    }
    if (lastRunTag != null) {
      if (!data.hasNext()) {
        rowX.set(lastRunTag,""String_Node_Str"");
        if (prefix != null)         rowX.set(prefix + ""String_Node_Str"" + lastRunTag,""String_Node_Str"");
      }
    }
    rowX.render(out,context);
    counter++;
  }
  data.reset();
  rowX.resetTags();
}","public void cookLoopToPrinter(Writer out,Chunk context,boolean isBlock,int depth) throws IOException {
  if (data == null || !data.hasNext()) {
    if (emptySnippet == null) {
      if (isBlock) {
        out.append(""String_Node_Str"");
      }
 else {
        out.append(""String_Node_Str"");
      }
    }
 else {
      emptySnippet.render(out,context,depth);
    }
    return;
  }
  Snippet dividerSnippet=null;
  boolean createArrayTags=false;
  boolean counterTags=false;
  String counterTag=null;
  String firstRunTag=null;
  String lastRunTag=null;
  if (options != null) {
    if (options.containsKey(""String_Node_Str"")) {
      dividerSnippet=(Snippet)options.get(""String_Node_Str"");
    }
 else     if (options.containsKey(""String_Node_Str"")) {
      String dividerTemplate=(String)options.get(""String_Node_Str"");
      ContentSource templates=context.getTemplateSet();
      if (templates != null && templates.provides(dividerTemplate)) {
        dividerSnippet=templates.getSnippet(dividerTemplate);
      }
 else {
        dividerSnippet=Snippet.getSnippet(dividerTemplate);
      }
      options.put(""String_Node_Str"",dividerSnippet);
    }
    if (options.containsKey(""String_Node_Str"")) {
      createArrayTags=true;
    }
    if (options.containsKey(""String_Node_Str"")) {
      counterTags=true;
    }
    if (options.containsKey(""String_Node_Str"")) {
      counterTag=(String)options.get(""String_Node_Str"");
      counterTag=eatTagSymbol(counterTag);
    }
    if (options.containsKey(""String_Node_Str"")) {
      String tagNames=(String)options.get(""String_Node_Str"");
      if (tagNames.indexOf(""String_Node_Str"") > 0) {
        String[] userFirstLast=tagNames.split(""String_Node_Str"");
        firstRunTag=eatTagSymbol(userFirstLast[0]);
        lastRunTag=eatTagSymbol(userFirstLast[1]);
      }
      if (firstRunTag == null || firstRunTag.length() == 0) {
        firstRunTag=FIRST_MARKER;
      }
      if (lastRunTag == null || lastRunTag.length() == 0) {
        lastRunTag=LAST_MARKER;
      }
    }
  }
  ChunkFactory factory=context.getChunkFactory();
  if (this.rowX == null) {
    this.rowX=(factory == null) ? new Chunk() : factory.makeChunk();
    this.rowX.append(rowSnippet);
  }
  if (context.getLocale() == null) {
    if (rowX.getLocale() != null)     rowX.setLocale(null);
  }
 else {
    if (rowX.getLocale() == null || rowX.getLocale() != context.getLocale()) {
      rowX.setLocale(context.getLocale().toString());
    }
  }
  String prefix=null;
  if (options != null && options.containsKey(""String_Node_Str"")) {
    String name=(String)options.get(""String_Node_Str"");
    prefix=name;
  }
  String[] columnLabels=data.getColumnLabels();
  if (createArrayTags && columnLabels == null) {
    createArrayTags=false;
  }
  String[] prefixedLabels=null;
  String[] prefixedIndices=null;
  String[] anonIndices=null;
  if (prefix != null && columnLabels != null) {
    prefixedLabels=new String[columnLabels.length];
    for (int i=columnLabels.length - 1; i > -1; i--) {
      prefixedLabels[i]=prefix + ""String_Node_Str"" + columnLabels[i];
    }
    if (createArrayTags) {
      prefixedIndices=new String[columnLabels.length];
      for (int i=0; i < prefixedIndices.length; i++) {
        prefixedIndices[i]=prefix + ""String_Node_Str"" + i+ ""String_Node_Str"";
      }
    }
  }
  if (createArrayTags) {
    anonIndices=new String[columnLabels.length];
    for (int i=0; i < anonIndices.length; i++) {
      anonIndices[i]=""String_Node_Str"" + i + ""String_Node_Str"";
    }
  }
  int counter=0;
  while (data.hasNext()) {
    if (counterTags) {
      rowX.set(""String_Node_Str"",counter);
      rowX.set(""String_Node_Str"",counter + 1);
    }
    if (counterTag != null) {
      rowX.set(counterTag,counter);
    }
    if (dividerSnippet != null && counter > 0) {
      dividerSnippet.render(out,context,depth);
    }
    Map<String,Object> record=data.nextRecord();
    if (columnLabels != null) {
      for (int i=columnLabels.length - 1; i > -1; i--) {
        String field=columnLabels[i];
        Object value=record.get(field);
        String fieldName=prefix == null ? field : prefixedLabels[i];
        rowX.setOrDelete(fieldName,value);
        if (createArrayTags) {
          rowX.setOrDelete(anonIndices[i],value);
          if (prefix != null) {
            rowX.setOrDelete(prefixedIndices[i],value);
          }
        }
      }
    }
 else {
      for (      String key : record.keySet()) {
        Object value=record.get(key);
        String fieldName=prefix == null ? key : prefix + ""String_Node_Str"" + key;
        rowX.setOrDelete(fieldName,value);
      }
    }
    if (prefix != null && columnLabels != null) {
      if (columnLabels.length == 1 && columnLabels[0].equals(SimpleTable.ANON_ARRAY_LABEL)) {
        rowX.setOrDelete(prefix,record.get(SimpleTable.ANON_ARRAY_LABEL));
      }
    }
    if (firstRunTag != null) {
      if (counter == 0) {
        rowX.set(firstRunTag,""String_Node_Str"");
        if (prefix != null)         rowX.set(prefix + ""String_Node_Str"" + firstRunTag,""String_Node_Str"");
      }
 else       if (counter == 1) {
        rowX.unset(firstRunTag);
        if (prefix != null)         rowX.unset(prefix + ""String_Node_Str"" + firstRunTag);
      }
    }
    if (lastRunTag != null) {
      if (!data.hasNext()) {
        rowX.set(lastRunTag,""String_Node_Str"");
        if (prefix != null)         rowX.set(prefix + ""String_Node_Str"" + lastRunTag,""String_Node_Str"");
      }
    }
    rowX.render(out,context);
    counter++;
  }
  data.reset();
  rowX.resetTags();
}"
60331,"public static Snippet getSnippet(String template){
  long timestamp=System.currentTimeMillis();
  if (++gcCounter % gcInterval == 0) {
    pruneCache(timestamp);
  }
  Snippet s=snippetCache.get(template);
  if (s != null) {
    cacheAge.put(template,timestamp);
    return s;
  }
 else {
    s=new Snippet(template);
    snippetCache.put(template,s);
    cacheAge.put(template,timestamp);
    return s;
  }
}","public static Snippet getSnippet(String template){
  if (Snippet.useCache) {
    return getSnippetFromCache(template);
  }
 else {
    return new Snippet(template);
  }
}"
60332,"@Override public String transformText(Chunk chunk,String text,String[] args){
  return markForTranslation(text);
}","@Override public String transformText(Chunk context,String text,String[] args){
  if (text == null)   return null;
  if (context == null)   return text;
  ChunkLocale translator=context.getLocale();
  if (translator == null)   return text;
  return translator.translate(text,null,context);
}"
60333,"public static String magicBraces(Chunk context,String output){
  char firstChar=output.charAt(0);
  if (firstChar == '~' || firstChar == '+') {
    if (context == null || context.isConforming()) {
      return ""String_Node_Str"" + output + ""String_Node_Str"";
    }
 else {
      String tagOpen=context.makeTag(""String_Node_Str"");
      tagOpen=RegexFilter.applyRegex(tagOpen,""String_Node_Str"");
      String tag=context.makeTag(output);
      tag=Chunk.findAndReplace(tag,tagOpen + '~',tagOpen);
      tag=Chunk.findAndReplace(tag,tagOpen + '+',TemplateSet.INCLUDE_SHORTHAND);
      return tag;
    }
  }
 else   if (firstChar == '^') {
    if (context == null) {
      return TemplateSet.DEFAULT_TAG_START + '.' + output.substring(1)+ TemplateSet.DEFAULT_TAG_END;
    }
 else {
      return context.makeTag('.' + output.substring(1));
    }
  }
 else {
    return output;
  }
}","public static String magicBraces(Chunk context,String output){
  if (output == null || output.length() == 0)   return output;
  char firstChar=output.charAt(0);
  if (firstChar == '~' || firstChar == '+') {
    if (context == null || context.isConforming()) {
      return ""String_Node_Str"" + output + ""String_Node_Str"";
    }
 else {
      String tagOpen=context.makeTag(""String_Node_Str"");
      tagOpen=RegexFilter.applyRegex(tagOpen,""String_Node_Str"");
      String tag=context.makeTag(output);
      tag=Chunk.findAndReplace(tag,tagOpen + '~',tagOpen);
      tag=Chunk.findAndReplace(tag,tagOpen + '+',TemplateSet.INCLUDE_SHORTHAND);
      return tag;
    }
  }
 else   if (firstChar == '^') {
    if (context == null) {
      return TemplateSet.DEFAULT_TAG_START + '.' + output.substring(1)+ TemplateSet.DEFAULT_TAG_END;
    }
 else {
      return context.makeTag('.' + output.substring(1));
    }
  }
 else {
    return output;
  }
}"
60334,"private static String applyMatchTransform(Chunk context,String text,String[] args){
  if (args == null)   return text;
  if (args.length == 1 && args[0] != null && args[0].length() == 0) {
    return text;
  }
  for (int i=1; i < args.length; i+=2) {
    if (i + 1 >= args.length)     return text;
    String test=args[i];
    String value=args[i + 1];
    if (test.equals(""String_Node_Str"")) {
      return TextFilter.magicBraces(context,value);
    }
    int patternStart=test.indexOf('/') + 1;
    int patternEnd=test.lastIndexOf('/');
    if (patternStart < 0 || patternStart == patternEnd)     return text;
    boolean ignoreCase=false;
    boolean multiLine=false;
    boolean dotAll=false;
    String pattern=test.substring(patternStart,patternEnd);
    for (int c=test.length() - 1; c > patternEnd; c--) {
      char option=test.charAt(c);
      if (option == 'i')       ignoreCase=true;
      if (option == 'm')       multiLine=true;
      if (option == 's')       dotAll=true;
    }
    if (multiLine)     pattern=""String_Node_Str"" + pattern;
    if (ignoreCase)     pattern=""String_Node_Str"" + pattern;
    if (dotAll)     pattern=""String_Node_Str"" + pattern;
    Pattern p=Pattern.compile(pattern);
    Matcher m=p.matcher(text);
    if (m.find()) {
      return TextFilter.magicBraces(context,value);
    }
  }
  return ""String_Node_Str"";
}","private static String applyMatchTransform(Chunk context,String text,String[] args){
  if (args == null)   return text;
  if (args.length == 1 && args[0] != null && args[0].length() == 0) {
    return text;
  }
  for (int i=1; i < args.length; i+=2) {
    if (i + 1 >= args.length)     return text;
    String test=args[i];
    String value=args[i + 1];
    if (test.equals(""String_Node_Str"")) {
      return TextFilter.magicBraces(context,value);
    }
    if (text == null)     continue;
    int patternStart=test.indexOf('/') + 1;
    int patternEnd=test.lastIndexOf('/');
    if (patternStart < 0 || patternStart == patternEnd)     return text;
    boolean ignoreCase=false;
    boolean multiLine=false;
    boolean dotAll=false;
    String pattern=test.substring(patternStart,patternEnd);
    for (int c=test.length() - 1; c > patternEnd; c--) {
      char option=test.charAt(c);
      if (option == 'i')       ignoreCase=true;
      if (option == 'm')       multiLine=true;
      if (option == 's')       dotAll=true;
    }
    if (multiLine)     pattern=""String_Node_Str"" + pattern;
    if (ignoreCase)     pattern=""String_Node_Str"" + pattern;
    if (dotAll)     pattern=""String_Node_Str"" + pattern;
    Pattern p=Pattern.compile(pattern);
    Matcher m=p.matcher(text);
    if (m.find()) {
      return TextFilter.magicBraces(context,value);
    }
  }
  return ""String_Node_Str"";
}"
60335,"private static String[] parseArgs(String filter,boolean splitOnComma){
  int quote1=filter.indexOf(""String_Node_Str"");
  int quote2;
  boolean isQuoted=true;
  if (quote1 < 0) {
    quote2=filter.lastIndexOf(""String_Node_Str"");
    if (quote2 < 0)     return null;
    isQuoted=false;
  }
 else {
    quote2=filter.indexOf(""String_Node_Str"",quote1 + 1);
    if (quote2 < 0)     quote2=filter.length();
  }
  String arg0=filter.substring(quote1 + 1,quote2);
  String arg1=null;
  if (isQuoted) {
    int quote3=filter.indexOf(""String_Node_Str"",quote2 + 1);
    if (quote3 > 0) {
      int quote4=filter.indexOf(""String_Node_Str"",quote3 + 1);
      if (quote4 > 0) {
        arg1=filter.substring(quote3 + 1,quote4);
      }
    }
  }
  if (arg1 != null) {
    return new String[]{filter,arg0,arg1};
  }
 else   if (isQuoted || !splitOnComma || arg0.indexOf(""String_Node_Str"") < 0) {
    return new String[]{arg0};
  }
 else {
    return parseCommaDelimitedArgs(arg0);
  }
}","private static String[] parseArgs(String filter,boolean splitOnComma){
  int quote1=filter.indexOf(""String_Node_Str"");
  int quote2;
  boolean isQuoted=true;
  if (quote1 < 0 || filter.substring(0,quote1).trim().length() > 0) {
    quote1=-1;
    quote2=filter.lastIndexOf(""String_Node_Str"");
    if (quote2 < 0)     return null;
    isQuoted=false;
  }
 else {
    quote2=filter.indexOf(""String_Node_Str"",quote1 + 1);
    if (quote2 < 0)     quote2=filter.length();
  }
  String arg0=filter.substring(quote1 + 1,quote2);
  String arg1=null;
  if (isQuoted) {
    int quote3=filter.indexOf(""String_Node_Str"",quote2 + 1);
    if (quote3 > 0) {
      int quote4=filter.indexOf(""String_Node_Str"",quote3 + 1);
      if (quote4 > 0) {
        arg1=filter.substring(quote3 + 1,quote4);
      }
    }
  }
  if (arg1 != null) {
    return new String[]{filter,arg0,arg1};
  }
 else   if (isQuoted || !splitOnComma || arg0.indexOf(""String_Node_Str"") < 0) {
    return new String[]{arg0};
  }
 else {
    return parseCommaDelimitedArgs(arg0);
  }
}"
60336,"private static String selected(Chunk context,String text,String[] args,String token){
  if (args == null)   return token;
  String testValue=args[1];
  if (args.length > 2 && args[2] != null) {
    token=args[2];
  }
  if (testValue.charAt(0) == '~') {
    String xlation=testValue + ""String_Node_Str"" + RegexFilter.escapeRegex(text)+ ""String_Node_Str""+ token+ ""String_Node_Str"";
    return TextFilter.magicBraces(context,xlation);
  }
  if (text.equals(testValue)) {
    return token;
  }
 else {
    return ""String_Node_Str"";
  }
}","private static String selected(Chunk context,String text,String[] args,String token){
  if (args == null)   return token;
  String testValue=args[0];
  if (args.length > 1)   testValue=args[1];
  if (args.length > 2)   token=args[2];
  if (testValue.charAt(0) == '~') {
    String xlation=testValue + ""String_Node_Str"" + RegexFilter.escapeRegex(text)+ ""String_Node_Str""+ token+ ""String_Node_Str"";
    return TextFilter.magicBraces(context,xlation);
  }
  if (text.equals(testValue)) {
    return token;
  }
 else {
    return ""String_Node_Str"";
  }
}"
60337,"private int findMatchingDefEnd(List<SnippetPart> parts,int startAt){
  int allTheRest=parts.size();
  for (int i=startAt; i < allTheRest; i++) {
    SnippetPart part=parts.get(i);
    if (part.isTag()) {
      String tagText=((SnippetTag)part).getTag();
      int eqPos=tagText.indexOf('=');
      if (eqPos < 0)       continue;
      if (tagText.length() == 1)       return i;
      if (tagText.contains(""String_Node_Str"")) {
        char[] tagChars=tagText.toCharArray();
        for (int x=0; x < eqPos; x++) {
          char c=tagChars[x];
          if (c == '.' || c == '|' || c == ':' || c == '(') {
            continue;
          }
        }
        return i;
      }
    }
  }
  return allTheRest;
}","private int findMatchingDefEnd(List<SnippetPart> parts,int startAt){
  int allTheRest=parts.size();
  for (int i=startAt; i < allTheRest; i++) {
    SnippetPart part=parts.get(i);
    if (part.isTag()) {
      String tagText=((SnippetTag)part).getTag();
      int eqPos=tagText.indexOf('=');
      if (eqPos < 0)       continue;
      if (tagText.length() == 1)       return i;
      char[] tagChars=tagText.toCharArray();
      char c='=';
      for (int x=0; x < eqPos; x++) {
        c=tagChars[x];
        if (c == '.' || c == '|' || c == ':' || c == '(') {
          c=0;
          break;
        }
      }
      if (c == 0) {
        continue;
      }
 else {
        return i;
      }
    }
  }
  return allTheRest;
}"
60338,"private void parseDefs(Snippet body){
  List<SnippetPart> parts=body.getParts();
  for (int i=0; i < parts.size(); i++) {
    SnippetPart part=parts.get(i);
    if (part.isTag()) {
      String tagText=((SnippetTag)part).getTag();
      if (tagText.trim().endsWith(""String_Node_Str"")) {
        int j=findMatchingDefEnd(parts,i + 1);
        Snippet def=new Snippet(parts,i + 1,j);
        String varName=tagText.substring(0,tagText.length() - 1);
        saveDef(varName,def);
        SnippetPart partJ=parts.get(j);
        if (partJ.getText().equals(""String_Node_Str"")) {
          i=j + 1;
        }
 else {
          i=j;
        }
      }
 else {
        String[] simpleDef=getSimpleDef(tagText);
        if (simpleDef != null) {
          saveDef(simpleDef[0],simpleDef[1]);
        }
      }
    }
  }
}","private void parseDefs(Snippet body){
  List<SnippetPart> parts=body.getParts();
  for (int i=0; i < parts.size(); i++) {
    SnippetPart part=parts.get(i);
    if (part.isTag()) {
      String tagText=((SnippetTag)part).getTag();
      if (tagText.trim().endsWith(""String_Node_Str"")) {
        int j=findMatchingDefEnd(parts,i + 1);
        Snippet def=new Snippet(parts,i + 1,j);
        String varName=tagText.substring(0,tagText.length() - 1);
        saveDef(varName,def);
        i=j;
        if (j < parts.size()) {
          SnippetPart partJ=parts.get(j);
          if (partJ.getText().equals(""String_Node_Str"")) {
            i=j + 1;
          }
        }
      }
 else {
        String[] simpleDef=getSimpleDef(tagText);
        if (simpleDef != null) {
          saveDef(simpleDef[0],simpleDef[1]);
        }
      }
    }
  }
}"
60339,"private void extractTag(char magicChar,String template,char[] chars,int marker,int tagStart,int i){
  if (parts == null)   parts=new ArrayList<SnippetPart>();
  if (marker < tagStart) {
    SnippetPart literal=new SnippetPart(template.substring(marker,tagStart));
    literal.setLiteral(true);
    parts.add(literal);
  }
  String wholeTag=template.substring(tagStart,i + 1);
  if (magicChar == '~') {
    String gooeyCenter=template.substring(tagStart + 2,i);
    SnippetTag tag=new SnippetTag(wholeTag,gooeyCenter);
    parts.add(tag);
  }
 else   if (magicChar == '^') {
    String gooeyCenter=template.substring(tagStart + 2,i);
    SnippetTag tag=new SnippetTag(wholeTag,""String_Node_Str"" + gooeyCenter);
    parts.add(tag);
  }
 else   if (magicChar == '/') {
    String gooeyCenter=template.substring(tagStart + 1,i);
    SnippetTag tag=new SnippetTag(wholeTag,""String_Node_Str"" + gooeyCenter);
    parts.add(tag);
  }
 else   if (magicChar == '*') {
    if (wholeTag.length() == 3) {
      SnippetTag tag=new SnippetTag(wholeTag,""String_Node_Str"" + MacroTag.MACRO_END_MARKER);
      parts.add(tag);
    }
 else {
      int refEnd=i;
      if (chars[i - 1] == '*')       refEnd--;
      String macroTemplate=template.substring(tagStart + 2,refEnd).trim();
      SnippetTag macroHead=new SnippetTag(wholeTag,""String_Node_Str"" + MacroTag.MACRO_MARKER + ""String_Node_Str""+ macroTemplate);
      parts.add(macroHead);
    }
  }
 else   if (magicChar == '=') {
    if (wholeTag.length() == 3) {
      SnippetTag tag=new SnippetTag(wholeTag,""String_Node_Str"");
      parts.add(tag);
    }
  }
 else   if (magicChar == '_') {
    SnippetToken token=SnippetToken.parseTokenWithArgs(wholeTag);
    parts.add(token);
  }
 else {
    SnippetPart wackyTag=new SnippetPart(wholeTag);
    parts.add(wackyTag);
  }
}","private void extractTag(char magicChar,String template,char[] chars,int marker,int tagStart,int i){
  if (parts == null)   parts=new ArrayList<SnippetPart>();
  if (marker < tagStart) {
    SnippetPart literal=new SnippetPart(template.substring(marker,tagStart));
    literal.setLiteral(true);
    parts.add(literal);
  }
  String wholeTag=template.substring(tagStart,i + 1);
  if (magicChar == '~') {
    String gooeyCenter=template.substring(tagStart + 2,i);
    SnippetTag tag=new SnippetTag(wholeTag,gooeyCenter);
    parts.add(tag);
  }
 else   if (magicChar == '^') {
    String gooeyCenter=template.substring(tagStart + 2,i);
    SnippetTag tag=new SnippetTag(wholeTag,""String_Node_Str"" + gooeyCenter);
    parts.add(tag);
  }
 else   if (magicChar == '/') {
    String gooeyCenter=template.substring(tagStart + 1,i);
    SnippetTag tag=new SnippetTag(wholeTag,""String_Node_Str"" + gooeyCenter);
    parts.add(tag);
  }
 else   if (magicChar == '*') {
    if (wholeTag.length() == 3) {
      SnippetTag tag=new SnippetTag(wholeTag,""String_Node_Str"" + MacroTag.MACRO_END_MARKER);
      parts.add(tag);
    }
 else {
      int refEnd=i;
      if (chars[i - 1] == '*')       refEnd--;
      String macroTemplate=template.substring(tagStart + 2,refEnd).trim();
      SnippetTag macroHead=new SnippetTag(wholeTag,""String_Node_Str"" + MacroTag.MACRO_MARKER + ""String_Node_Str""+ macroTemplate);
      parts.add(macroHead);
    }
  }
 else   if (magicChar == '=') {
    if (wholeTag.length() == 3) {
      SnippetTag tag=new SnippetTag(wholeTag,""String_Node_Str"");
      parts.add(tag);
    }
  }
 else   if (magicChar == '_') {
    SnippetToken token=SnippetToken.parseTokenWithArgs(wholeTag);
    parts.add(token);
  }
 else   if (magicChar == '+') {
    if (wholeTag.startsWith(""String_Node_Str"")) {
      String includeIfTag=""String_Node_Str"" + template.substring(tagStart + 3,i);
      SnippetTag condInclude=new SnippetTag(wholeTag,includeIfTag);
      parts.add(condInclude);
    }
 else {
      String includeTag=""String_Node_Str"" + template.substring(tagStart + 2,i);
      SnippetTag include=new SnippetTag(wholeTag,includeTag);
      parts.add(include);
    }
  }
 else {
    SnippetPart wackyTag=new SnippetPart(wholeTag);
    parts.add(wackyTag);
  }
}"
60340,"public String toString(){
  if (simpleText != null)   return simpleText;
  if (parts == null)   return null;
  StringBuilder sb=new StringBuilder();
  for (  SnippetPart part : parts) {
    sb.append(part.getText());
  }
  return sb.toString();
}","public String toString(){
  if (simpleText != null)   return simpleText;
  if (parts == null)   return null;
  StringBuilder sb=new StringBuilder();
  for (  SnippetPart part : parts) {
    sb.append(part.toString());
  }
  return sb.toString();
}"
60341,"/** 
 * Makes a template ""factory"" which reads in template files from the file system in the templatePath folder.  Caches for refreshMins. Uses ""extensions"" for the default file extension (do not include dot).
 * @param templatePath folder where template files are located.
 * @param extensions appends dot plus this String to a template name stub to find template files.
 * @param refreshMins returns template from cache unless this many minutes have passed.
 */
public TemplateSet(String templatePath,String extension,int refreshMins){
  if (templatePath != null) {
    char lastChar=templatePath.charAt(templatePath.length() - 1);
    char fs=System.getProperty(""String_Node_Str"").charAt(0);
    if (lastChar != '\\' && lastChar != '/' && lastChar != fs) {
      templatePath+=fs;
    }
    this.templatePath=templatePath;
  }
  this.dirtyInterval=refreshMins;
  this.defaultExtension=extension;
}","/** 
 * Makes a template ""factory"" which reads in template files from the file system in the templatePath folder.  Caches for refreshMins. Uses ""extensions"" for the default file extension (do not include dot).
 * @param templatePath folder where template files are located.
 * @param extensions appends dot plus this String to a template name stub to find template files.
 * @param refreshMins returns template from cache unless this many minutes have passed.
 */
public TemplateSet(String templatePath,String extension,int refreshMins){
  if (templatePath != null) {
    char lastChar=templatePath.charAt(templatePath.length() - 1);
    char fs=System.getProperty(""String_Node_Str"").charAt(0);
    if (lastChar != '\\' && lastChar != '/' && lastChar != fs) {
      templatePath+=fs;
    }
    this.templatePath=templatePath;
  }
  this.dirtyInterval=refreshMins;
  this.defaultExtension=(extension == null ? DEFAULT_EXTENSION : extension);
}"
60342,"public void setJarContext(Class<?> classInSameJar){
  this.classInJar=classInSameJar;
}","public void setJarContext(Object ctx){
  this.resourceContext=ctx;
}"
60343,"private InputStream fishForTemplate(String resourcePath){
  String cp=System.getProperty(""String_Node_Str"");
  if (cp == null)   return null;
  String[] jars=cp.split(""String_Node_Str"");
  if (jars == null)   return null;
  for (  String jar : jars) {
    if (jar.endsWith(""String_Node_Str"")) {
      String resourceURL=""String_Node_Str"" + jar + ""String_Node_Str""+ resourcePath;
      try {
        URL url=new URL(resourceURL);
        InputStream in=url.openStream();
        if (in != null)         return in;
      }
 catch (      MalformedURLException e) {
      }
catch (      IOException e) {
      }
    }
  }
  return null;
}","private InputStream fishForTemplate(String resourcePath){
  if (resourceContext != null) {
    InputStream in=fishForTemplateInContext(resourcePath);
    if (in != null)     return in;
  }
  String cp=System.getProperty(""String_Node_Str"");
  if (cp == null)   return null;
  String[] jars=cp.split(""String_Node_Str"");
  if (jars == null)   return null;
  for (  String jar : jars) {
    if (jar.endsWith(""String_Node_Str"")) {
      InputStream in=peekInsideJar(""String_Node_Str"" + jar,resourcePath);
      if (in != null)       return in;
    }
  }
  return null;
}"
60344,"private Snippet _get(String name,String extension,boolean prettyFail){
  Snippet template=getFromCache(name,extension);
  String filename=null;
  if (template == null) {
    String stub=truncateNameToStub(name);
    filename=getTemplatePath(name,extension);
    char fs=System.getProperty(""String_Node_Str"").charAt(0);
    filename=filename.replace('\\',fs);
    filename=filename.replace('/',fs);
    try {
      File templateFile=new File(filename);
      if (templateFile.exists()) {
        FileReader in=new FileReader(templateFile);
        BufferedReader brTemp=new BufferedReader(in);
        readAndCacheTemplate(stub,extension,brTemp);
        in.close();
        template=getFromCache(name,extension);
      }
 else {
        String resourcePath=filename;
        if (resourcePath.charAt(0) != '/') {
          resourcePath='/' + resourcePath;
        }
        InputStream inJar=null;
        if (classInJar != null)         inJar=classInJar.getResourceAsStream(resourcePath);
        if (inJar == null)         inJar=fishForTemplate(resourcePath);
        if (inJar != null) {
          BufferedReader brTemp=new BufferedReader(new InputStreamReader(inJar));
          readAndCacheTemplate(stub,extension,brTemp);
          inJar.close();
          template=getFromCache(name,extension);
        }
      }
    }
 catch (    java.io.IOException e) {
      if (!prettyFail)       return null;
      StringBuilder errmsg=new StringBuilder(""String_Node_Str"");
      errmsg.append(extension);
      errmsg.append(""String_Node_Str"");
      errmsg.append(name);
      errmsg.append(""String_Node_Str"");
      StringWriter w=new StringWriter();
      e.printStackTrace(new PrintWriter(w));
      errmsg.append(w.toString());
      errmsg.append(""String_Node_Str"");
      template=new Snippet(errmsg.toString());
    }
  }
  if (template == null) {
    if (prettyFail) {
      StringBuilder errmsg=new StringBuilder();
      errmsg.append(""String_Node_Str"");
      errmsg.append(extension);
      errmsg.append(""String_Node_Str"");
      errmsg.append(name);
      errmsg.append(""String_Node_Str"");
      errmsg.append(filename);
      errmsg.append(""String_Node_Str"");
      template=new Snippet(errmsg.toString());
    }
 else {
      return null;
    }
  }
  return template;
}","private Snippet _get(String name,String extension,boolean prettyFail){
  Snippet template=getFromCache(name,extension);
  String filename=null;
  if (template == null) {
    String stub=truncateNameToStub(name);
    filename=getTemplatePath(name,extension);
    char fs=System.getProperty(""String_Node_Str"").charAt(0);
    filename=filename.replace('\\',fs);
    filename=filename.replace('/',fs);
    try {
      File templateFile=new File(filename);
      if (templateFile.exists()) {
        FileReader in=new FileReader(templateFile);
        BufferedReader brTemp=new BufferedReader(in);
        readAndCacheTemplate(stub,extension,brTemp);
        in.close();
        template=getFromCache(name,extension);
      }
 else {
        String resourcePath=getResourcePath(name,extension);
        InputStream inJar=null;
        if (classInJar != null)         inJar=classInJar.getResourceAsStream(resourcePath);
        if (inJar == null)         inJar=fishForTemplate(resourcePath);
        if (inJar != null) {
          BufferedReader brTemp=new BufferedReader(new InputStreamReader(inJar));
          readAndCacheTemplate(stub,extension,brTemp);
          inJar.close();
          template=getFromCache(name,extension);
        }
      }
    }
 catch (    java.io.IOException e) {
      if (!prettyFail)       return null;
      StringBuilder errmsg=new StringBuilder(""String_Node_Str"");
      errmsg.append(extension);
      errmsg.append(""String_Node_Str"");
      errmsg.append(name);
      errmsg.append(""String_Node_Str"");
      StringWriter w=new StringWriter();
      e.printStackTrace(new PrintWriter(w));
      errmsg.append(w.toString());
      errmsg.append(""String_Node_Str"");
      template=new Snippet(errmsg.toString());
    }
  }
  if (template == null) {
    if (prettyFail) {
      StringBuilder errmsg=new StringBuilder();
      errmsg.append(""String_Node_Str"");
      errmsg.append(extension);
      errmsg.append(""String_Node_Str"");
      errmsg.append(name);
      errmsg.append(""String_Node_Str"");
      errmsg.append(filename);
      errmsg.append(""String_Node_Str"");
      template=new Snippet(errmsg.toString());
    }
 else {
      return null;
    }
  }
  return template;
}"
60345,"/** 
 * If your templates are packaged into a jar with your application code, then you should use this method to tell chunk where your templates are. Chunk might still be able to find your templates but it will work a lot harder.  Without this info, it has to peek into every jar in the classpath every time.
 * @param classInSameJar
 */
public void setJarContext(Class<?> classInSameJar){
  if (themeLayers != null) {
    for (    TemplateSet layer : themeLayers) {
      layer.setJarContext(classInSameJar);
    }
  }
}","public void setJarContext(Object ctx){
  if (themeLayers != null) {
    for (    TemplateSet layer : themeLayers) {
      layer.setJarContext(ctx);
    }
  }
}"
60346,"public Theme(String themesFolder,String themeLayerNames,String ext){
  char lastChar=themesFolder.charAt(themesFolder.length() - 1);
  char fs=System.getProperty(""String_Node_Str"").charAt(0);
  if (lastChar != '\\' && lastChar != '/' && lastChar != fs) {
    themesFolder+=fs;
  }
  this.themesFolder=themesFolder;
  String[] layerNames=parseLayerNames(themeLayerNames);
  if (layerNames == null) {
    TemplateSet simple=new TemplateSet(themesFolder,ext,0);
    themeLayers.add(simple);
  }
 else {
    for (int i=0; i < layerNames.length; i++) {
      TemplateSet x=new TemplateSet(this.themesFolder + layerNames[i],ext,0);
      x.signalFailureWithNull();
      themeLayers.add(x);
    }
  }
}","public Theme(String themesFolder,String themeLayerNames,String ext){
  char lastChar=themesFolder.charAt(themesFolder.length() - 1);
  char fs=System.getProperty(""String_Node_Str"").charAt(0);
  if (lastChar != '\\' && lastChar != '/' && lastChar != fs) {
    themesFolder+=fs;
  }
  this.themesFolder=themesFolder;
  String[] layerNames=parseLayerNames(themeLayerNames);
  if (layerNames == null) {
    TemplateSet simple=new TemplateSet(themesFolder,ext,0);
    themeLayers.add(simple);
  }
 else {
    for (int i=0; i < layerNames.length; i++) {
      TemplateSet x=new TemplateSet(this.themesFolder + layerNames[i],ext,0);
      x.setLayerName(layerNames[i]);
      x.signalFailureWithNull();
      themeLayers.add(x);
    }
  }
}"
60347,"public void search(){
  setListShown(false);
  searchThread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        final List<File> results=searchDir(showHidden,mDirectory);
        runOnUiThread(new Runnable(){
          @Override public void run(){
            if (searchThread.isInterrupted())             return;
            Collections.sort(results,getComparator());
            mAdapter.set(results);
            setListShown(true);
          }
        }
);
      }
 catch (      final Exception e) {
        e.printStackTrace();
        runOnUiThread(new Runnable(){
          @Override public void run(){
            if (mDirectory.isRemote()) {
              ((DrawerActivity)getActivity()).disableFab(false);
            }
            try {
              String message=e.getMessage();
              if (message.trim().isEmpty())               message=getString(R.string.error);
              setEmptyText(message);
              setListShown(true);
            }
 catch (            IllegalStateException e) {
              e.printStackTrace();
            }
          }
        }
);
      }
    }
  }
);
}","public void search(){
  setListShown(false);
  searchThread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        final List<File> results=searchDir(showHidden,mDirectory);
        runOnUiThread(new Runnable(){
          @Override public void run(){
            if (searchThread.isInterrupted())             return;
            Collections.sort(results,getComparator());
            mAdapter.set(results);
            setListShown(true);
          }
        }
);
      }
 catch (      final Exception e) {
        e.printStackTrace();
        runOnUiThread(new Runnable(){
          @Override public void run(){
            if (mDirectory.isRemote()) {
              ((DrawerActivity)getActivity()).disableFab(false);
            }
            try {
              String message=e.getMessage();
              if (message.trim().isEmpty())               message=getString(R.string.error);
              setEmptyText(message);
              setListShown(true);
            }
 catch (            IllegalStateException e) {
              e.printStackTrace();
            }
          }
        }
);
      }
    }
  }
);
  searchThread.start();
}"
60348,"@Override public void onPause(){
  super.onPause();
  searchThread.interrupt();
  try {
    getActivity().unregisterReceiver(mReceiver);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override public void onPause(){
  super.onPause();
  if (searchThread != null)   searchThread.interrupt();
  try {
    getActivity().unregisterReceiver(mReceiver);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
60349,"@Override public void onItemClicked(int index,File file){
  if (file.isDirectory()) {
    ((DrawerActivity)getActivity()).switchDirectory(file,false);
  }
 else {
    if (((DrawerActivity)getActivity()).pickMode) {
      Activity act=getActivity();
      Intent intent=act.getIntent().setData(Uri.fromFile(file.toJavaFile()));
      act.setResult(Activity.RESULT_OK,intent);
      act.finish();
    }
 else {
      Utils.openFile((DrawerActivity)getActivity(),file,false);
    }
  }
}","@Override public void onItemClicked(int index,File file){
  if (file.isDirectory()) {
    ((DrawerActivity)getActivity()).switchDirectory(file,false);
  }
 else {
    if (((DrawerActivity)getActivity()).pickMode) {
      Activity act=getActivity();
      Intent intent=act.getIntent().setData(Uri.fromFile(file.toJavaFile()));
      act.setResult(Activity.RESULT_OK,intent);
      act.finish();
    }
 else {
      if (file.getExtension().equals(""String_Node_Str"")) {
        final File fFile=file;
        CustomDialog.create(getActivity(),R.string.unzip,getString(R.string.auto_unzip_prompt),android.R.string.ok,0,android.R.string.cancel,new CustomDialog.ClickListener(){
          @Override public void onPositive(          int which,          View view){
            List<File> files=new ArrayList<File>();
            files.add(fFile);
            Unzipper.unzip(DirectoryFragment.this,files,null);
          }
          @Override public void onNeutral(){
          }
          @Override public void onNegative(){
            Utils.openFile((DrawerActivity)getActivity(),fFile,false);
          }
        }
).show(getFragmentManager(),""String_Node_Str"");
      }
 else {
        Utils.openFile((DrawerActivity)getActivity(),file,false);
      }
    }
  }
}"
60350,"public NavigationDrawerAdapter(Activity context,ClickListener listener){
  mContext=context;
  mItems=new ArrayList<Shortcuts.Item>();
  mListener=listener;
  if (Shortcuts.getAll(context).size() == 0) {
    LocalFile item=new LocalFile(context);
    Shortcuts.add(context,new Shortcuts.Item(item));
    item=new LocalFile(context,Environment.getExternalStorageDirectory());
    Shortcuts.add(context,new Shortcuts.Item(item));
    item=new LocalFile(context,new java.io.File(Environment.getExternalStorageDirectory(),""String_Node_Str""));
    if (item.existsSync())     Shortcuts.add(context,new Shortcuts.Item(item));
    item=new LocalFile(context,new java.io.File(Environment.getExternalStorageDirectory(),""String_Node_Str""));
    if (item.existsSync())     Shortcuts.add(context,new Shortcuts.Item(item));
    item=new LocalFile(context,new java.io.File(Environment.getExternalStorageDirectory(),""String_Node_Str""));
    if (item.existsSync())     Shortcuts.add(context,new Shortcuts.Item(item));
    item=new LocalFile(context,new java.io.File(Environment.getExternalStorageDirectory(),""String_Node_Str""));
    if (item.existsSync())     Shortcuts.add(context,new Shortcuts.Item(item));
  }
  reload(context);
}","public NavigationDrawerAdapter(Activity context,ClickListener listener){
  mContext=context;
  mItems=new ArrayList<Shortcuts.Item>();
  mListener=listener;
  if (Shortcuts.getAll(context).size() == 0) {
    LocalFile item=new LocalFile(context);
    Shortcuts.add(context,new Shortcuts.Item(item));
    item=new LocalFile(context,Environment.getExternalStorageDirectory());
    Shortcuts.add(context,new Shortcuts.Item(item));
    try {
      item=new LocalFile(context,new java.io.File(Environment.getExternalStorageDirectory(),""String_Node_Str""));
      if (item.existsSync())       Shortcuts.add(context,new Shortcuts.Item(item));
      item=new LocalFile(context,new java.io.File(Environment.getExternalStorageDirectory(),""String_Node_Str""));
      if (item.existsSync())       Shortcuts.add(context,new Shortcuts.Item(item));
      item=new LocalFile(context,new java.io.File(Environment.getExternalStorageDirectory(),""String_Node_Str""));
      if (item.existsSync())       Shortcuts.add(context,new Shortcuts.Item(item));
      item=new LocalFile(context,new java.io.File(Environment.getExternalStorageDirectory(),""String_Node_Str""));
      if (item.existsSync())       Shortcuts.add(context,new Shortcuts.Item(item));
    }
 catch (    Exception e) {
      Toast.makeText(context,e.getLocalizedMessage(),Toast.LENGTH_SHORT).show();
    }
  }
  reload(context);
}"
60351,"@Override public void run(){
  Utils.showErrorDialog(getContext(),R.string.failed_delete_file,e);
  if (callback != null)   callback.onError(null);
}","@Override public void run(){
  callback.onError(e);
}"
60352,"public boolean deleteSync(){
  boolean val=new java.io.File(getPath()).delete();
  notifyMediaScannerService(this);
  return val;
}","@Override public boolean deleteSync(){
  boolean val=new java.io.File(getPath()).delete();
  notifyMediaScannerService(this);
  return val;
}"
60353,"@Override public void delete(final SftpClient.CompletionCallback callback){
  if (requiresRoot()) {
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          runAsRoot(""String_Node_Str"" + getPath() + ""String_Node_Str"");
          getContext().runOnUiThread(new Runnable(){
            @Override public void run(){
              if (callback != null)               callback.onComplete();
            }
          }
);
        }
 catch (        final Exception e) {
          e.printStackTrace();
          getContext().runOnUiThread(new Runnable(){
            @Override public void run(){
              Utils.showErrorDialog(getContext(),R.string.failed_delete_file,e);
              if (callback != null)               callback.onError(null);
            }
          }
);
        }
      }
    }
).start();
  }
 else {
    java.io.File mFile=new java.io.File(getPath());
    if (mFile.isDirectory()) {
      try {
        wipeDirectory(this,callback);
      }
 catch (      Exception e) {
      }
    }
 else     if (mFile.delete()) {
      if (callback != null)       callback.onComplete();
    }
 else {
      Utils.showErrorDialog(getContext(),R.string.failed_delete_file,new Exception(""String_Node_Str""));
      if (callback != null)       callback.onError(null);
    }
  }
}","@Override public void delete(final SftpClient.CompletionCallback callback){
  if (requiresRoot()) {
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          RootFile.runAsRoot(""String_Node_Str"" + getPath() + ""String_Node_Str"");
          getContext().runOnUiThread(new Runnable(){
            @Override public void run(){
              if (callback != null)               callback.onComplete();
            }
          }
);
        }
 catch (        final Exception e) {
          e.printStackTrace();
          getContext().runOnUiThread(new Runnable(){
            @Override public void run(){
              Utils.showErrorDialog(getContext(),R.string.failed_delete_file,e);
              if (callback != null)               callback.onError(null);
            }
          }
);
        }
      }
    }
).start();
  }
 else {
    java.io.File mFile=new java.io.File(getPath());
    if (mFile.isDirectory()) {
      try {
        wipeDirectory(this,callback);
      }
 catch (      Exception e) {
      }
    }
 else     if (mFile.delete()) {
      if (callback != null)       callback.onComplete();
    }
 else {
      Utils.showErrorDialog(getContext(),R.string.failed_delete_file,new Exception(""String_Node_Str""));
      if (callback != null)       callback.onError(null);
    }
  }
}"
60354,"@Override public void createFile(final SftpClient.CompletionCallback callback){
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        if (requiresRoot()) {
          runAsRoot(""String_Node_Str"" + getPath() + ""String_Node_Str"");
        }
 else         if (!toJavaFile().createNewFile())         throw new Exception(""String_Node_Str"");
        callback.onComplete();
      }
 catch (      Exception e) {
        e.printStackTrace();
        callback.onError(e);
      }
    }
  }
).start();
}","@Override public void createFile(final SftpClient.CompletionCallback callback){
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        if (requiresRoot()) {
          RootFile.runAsRoot(""String_Node_Str"" + getPath() + ""String_Node_Str"");
        }
 else         if (!toJavaFile().createNewFile())         throw new Exception(""String_Node_Str"");
        callback.onComplete();
      }
 catch (      Exception e) {
        e.printStackTrace();
        callback.onError(e);
      }
    }
  }
).start();
}"
60355,"@Override public boolean existsSync(){
  java.io.File mFile=new java.io.File(getPath());
  return mFile.exists() && isDirectory() == mFile.isDirectory();
}","@Override public boolean existsSync() throws Exception {
  if (requiresRoot()) {
    String cmd;
    if (isDirectory()) {
      cmd=""String_Node_Str"" + getPath() + ""String_Node_Str"";
    }
 else {
      cmd=""String_Node_Str"" + getPath() + ""String_Node_Str"";
    }
    return Integer.parseInt(RootFile.runAsRoot(cmd).get(0)) == 1;
  }
  java.io.File mFile=new java.io.File(getPath());
  return mFile.exists() && isDirectory() == mFile.isDirectory();
}"
60356,"public List<File> listFilesSync(boolean includeHidden,FileFilter filter){
  java.io.File[] list;
  if (filter != null)   list=new java.io.File(getPath()).listFiles(filter);
 else   list=new java.io.File(getPath()).listFiles();
  if (list == null || list.length == 0)   return new ArrayList<File>();
  List<File> results=new ArrayList<File>();
  for (  java.io.File local : list) {
    if (!includeHidden && (local.isHidden() || local.getName().startsWith(""String_Node_Str"")))     continue;
    LocalFile file=new LocalFile(getContext(),local);
    if (filter != null)     file.isSearchResult=true;
    results.add(file);
  }
  return results;
}","public List<File> listFilesSync(boolean includeHidden,FileFilter filter) throws Exception {
  List<File> results=new ArrayList<File>();
  if (requiresRoot()) {
    List<String> response=RootFile.runAsRoot(""String_Node_Str"" + getPath() + ""String_Node_Str"");
    return LsParser.parse(getContext(),getPath(),response,filter,includeHidden).getFiles();
  }
 else {
    java.io.File[] list;
    if (filter != null)     list=new java.io.File(getPath()).listFiles();
 else     list=new java.io.File(getPath()).listFiles();
    if (list == null || list.length == 0)     return new ArrayList<File>();
    for (    java.io.File local : list) {
      if (!includeHidden && (local.isHidden() || local.getName().startsWith(""String_Node_Str"")))       continue;
      LocalFile file=new LocalFile(getContext(),local);
      if (filter != null) {
        if (filter.accept(file)) {
          file.isSearchResult=true;
          results.add(file);
        }
      }
 else       results.add(file);
    }
  }
  return results;
}"
60357,"@Override public void listFiles(boolean includeHidden,final ArrayCallback callback){
  List<File> results=listFilesSync(includeHidden);
  callback.onComplete(results != null ? results.toArray(new File[results.size()]) : null);
}","@Override public void listFiles(final boolean includeHidden,final ArrayCallback callback){
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        final List<File> results=listFilesSync(includeHidden);
        getContext().runOnUiThread(new Runnable(){
          @Override public void run(){
            callback.onComplete(results != null ? results.toArray(new File[results.size()]) : null);
          }
        }
);
      }
 catch (      final Exception e) {
        e.printStackTrace();
        getContext().runOnUiThread(new Runnable(){
          @Override public void run(){
            callback.onError(e);
          }
        }
);
      }
    }
  }
).start();
}"
60358,"public void mkdirSync() throws Exception {
  if (requiresRoot()) {
    runAsRoot(""String_Node_Str"" + getPath() + ""String_Node_Str"");
  }
 else {
    new java.io.File(getPath()).mkdirs();
  }
  if (!new java.io.File(getPath()).exists())   throw new Exception(""String_Node_Str"");
}","public void mkdirSync() throws Exception {
  if (requiresRoot()) {
    RootFile.runAsRoot(""String_Node_Str"" + getPath() + ""String_Node_Str"");
  }
 else {
    new java.io.File(getPath()).mkdirs();
  }
  if (!new java.io.File(getPath()).exists())   throw new Exception(""String_Node_Str"");
}"
60359,"private LocalFile copySync(java.io.File file,java.io.File newFile) throws Exception {
  LocalFile dest=(LocalFile)Utils.checkDuplicatesSync(getContext(),new LocalFile(getContext(),newFile));
  if (requiresRoot()) {
    runAsRoot(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str""+ dest.getPath()+ ""String_Node_Str"");
    return dest;
  }
  InputStream in=new FileInputStream(file);
  OutputStream out=new FileOutputStream(dest.toJavaFile());
  byte[] buf=new byte[1024];
  int len;
  while ((len=in.read(buf)) > 0) {
    out.write(buf,0,len);
  }
  in.close();
  out.close();
  File scanFile=new LocalFile(getContext(),newFile);
  notifyMediaScannerService(scanFile);
  return dest;
}","private LocalFile copySync(java.io.File file,java.io.File newFile) throws Exception {
  LocalFile dest=(LocalFile)Utils.checkDuplicatesSync(getContext(),new LocalFile(getContext(),newFile));
  if (requiresRoot()) {
    RootFile.runAsRoot(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str""+ dest.getPath()+ ""String_Node_Str"");
    return dest;
  }
  InputStream in=new FileInputStream(file);
  OutputStream out=new FileOutputStream(dest.toJavaFile());
  byte[] buf=new byte[1024];
  int len;
  while ((len=in.read(buf)) > 0) {
    out.write(buf,0,len);
  }
  in.close();
  out.close();
  File scanFile=new LocalFile(getContext(),newFile);
  notifyMediaScannerService(scanFile);
  return dest;
}"
60360,"public List<File> searchRecursive(boolean includeHidden,FileFilter filter){
  java.io.File mFile=new java.io.File(getPath());
  Log.v(""String_Node_Str"",""String_Node_Str"" + mFile.getAbsolutePath());
  List<File> all=listFilesSync(includeHidden);
  if (all == null || all.size() == 0) {
    Log.v(""String_Node_Str"",""String_Node_Str"" + mFile.getAbsolutePath());
    return null;
  }
  List<File> matches=new ArrayList<File>();
  matches.addAll(listFilesSync(includeHidden,filter));
  for (  File fi : all) {
    List<File> subResults=((LocalFile)fi).searchRecursive(includeHidden,filter);
    if (subResults != null && subResults.size() > 0)     matches.addAll(subResults);
  }
  return matches;
}","public List<File> searchRecursive(boolean includeHidden,FileFilter filter) throws Exception {
  java.io.File mFile=new java.io.File(getPath());
  Log.v(""String_Node_Str"",""String_Node_Str"" + mFile.getAbsolutePath());
  List<File> all=listFilesSync(includeHidden);
  if (all == null || all.size() == 0) {
    Log.v(""String_Node_Str"",""String_Node_Str"" + mFile.getAbsolutePath());
    return null;
  }
  List<File> matches=new ArrayList<File>();
  matches.addAll(listFilesSync(includeHidden,filter));
  for (  File fi : all) {
    List<File> subResults=((LocalFile)fi).searchRecursive(includeHidden,filter);
    if (subResults != null && subResults.size() > 0)     matches.addAll(subResults);
  }
  return matches;
}"
60361,"@Override public void rename(final File newFile,final SftpClient.CompletionCallback callback){
  if (newFile.isRemote()) {
    final ProgressDialog connectProgress=Utils.showProgressDialog(getContext(),R.string.connecting);
    getContext().getNetworkService().getSftpClient(new NetworkService.SftpGetCallback(){
      @Override public void onSftpClient(      final SftpClient client){
        connectProgress.dismiss();
        final ProgressDialog uploadProgress=Utils.showProgressDialog(getContext(),R.string.uploading);
        new Thread(new Runnable(){
          @Override public void run(){
            try {
              uploadRecursive(client,LocalFile.this,(CloudFile)newFile,true);
              getContext().runOnUiThread(new Runnable(){
                @Override public void run(){
                  setPath(newFile.getPath());
                  uploadProgress.dismiss();
                  callback.onComplete();
                }
              }
);
            }
 catch (            final Exception e) {
              e.printStackTrace();
              getContext().runOnUiThread(new Runnable(){
                @Override public void run(){
                  uploadProgress.dismiss();
                  callback.onError(null);
                  Utils.showErrorDialog(getContext(),R.string.failed_upload_file,e);
                }
              }
);
            }
          }
        }
).start();
      }
      @Override public void onError(      final Exception e){
        getContext().runOnUiThread(new Runnable(){
          @Override public void run(){
            connectProgress.dismiss();
            callback.onError(null);
            Utils.showErrorDialog(getContext(),R.string.failed_connect_server,e);
          }
        }
);
      }
    }
,(CloudFile)newFile);
  }
 else {
    Utils.checkDuplicates(getContext(),newFile,new Utils.DuplicateCheckResult(){
      @Override public void onResult(      final File newFile){
        if (requiresRoot()) {
          new Thread(new Runnable(){
            @Override public void run(){
              try {
                runAsRoot(""String_Node_Str"" + getPath() + ""String_Node_Str""+ newFile.getPath()+ ""String_Node_Str"");
                getContext().runOnUiThread(new Runnable(){
                  @Override public void run(){
                    setPath(newFile.getPath());
                    callback.onComplete();
                    notifyMediaScannerService(newFile);
                  }
                }
);
              }
 catch (              final Exception e) {
                e.printStackTrace();
                getContext().runOnUiThread(new Runnable(){
                  @Override public void run(){
                    Utils.showErrorDialog(getContext(),R.string.failed_rename_file,e);
                    callback.onError(null);
                  }
                }
);
              }
            }
          }
).start();
        }
 else         if (new java.io.File(getPath()).renameTo(newFile.toJavaFile())) {
          getContext().runOnUiThread(new Runnable(){
            @Override public void run(){
              setPath(newFile.getPath());
              callback.onComplete();
              notifyMediaScannerService(newFile);
            }
          }
);
        }
 else {
          getContext().runOnUiThread(new Runnable(){
            @Override public void run(){
              Utils.showErrorDialog(getContext(),R.string.failed_rename_file,new Exception(""String_Node_Str""));
              callback.onError(null);
            }
          }
);
        }
      }
    }
);
  }
}","@Override public void rename(final File newFile,final SftpClient.CompletionCallback callback){
  if (newFile.isRemote()) {
    final ProgressDialog connectProgress=Utils.showProgressDialog(getContext(),R.string.connecting);
    getContext().getNetworkService().getSftpClient(new NetworkService.SftpGetCallback(){
      @Override public void onSftpClient(      final SftpClient client){
        connectProgress.dismiss();
        final ProgressDialog uploadProgress=Utils.showProgressDialog(getContext(),R.string.uploading);
        new Thread(new Runnable(){
          @Override public void run(){
            try {
              uploadRecursive(client,LocalFile.this,(CloudFile)newFile,true);
              getContext().runOnUiThread(new Runnable(){
                @Override public void run(){
                  setPath(newFile.getPath());
                  uploadProgress.dismiss();
                  callback.onComplete();
                }
              }
);
            }
 catch (            final Exception e) {
              e.printStackTrace();
              getContext().runOnUiThread(new Runnable(){
                @Override public void run(){
                  uploadProgress.dismiss();
                  callback.onError(null);
                  Utils.showErrorDialog(getContext(),R.string.failed_upload_file,e);
                }
              }
);
            }
          }
        }
).start();
      }
      @Override public void onError(      final Exception e){
        getContext().runOnUiThread(new Runnable(){
          @Override public void run(){
            connectProgress.dismiss();
            callback.onError(null);
            Utils.showErrorDialog(getContext(),R.string.failed_connect_server,e);
          }
        }
);
      }
    }
,(CloudFile)newFile);
  }
 else {
    Utils.checkDuplicates(getContext(),newFile,new Utils.DuplicateCheckResult(){
      @Override public void onResult(      final File newFile){
        if (requiresRoot()) {
          new Thread(new Runnable(){
            @Override public void run(){
              try {
                RootFile.runAsRoot(""String_Node_Str"" + getPath() + ""String_Node_Str""+ newFile.getPath()+ ""String_Node_Str"");
                getContext().runOnUiThread(new Runnable(){
                  @Override public void run(){
                    setPath(newFile.getPath());
                    callback.onComplete();
                    notifyMediaScannerService(newFile);
                  }
                }
);
              }
 catch (              final Exception e) {
                e.printStackTrace();
                getContext().runOnUiThread(new Runnable(){
                  @Override public void run(){
                    Utils.showErrorDialog(getContext(),R.string.failed_rename_file,e);
                    callback.onError(null);
                  }
                }
);
              }
            }
          }
).start();
        }
 else         if (new java.io.File(getPath()).renameTo(newFile.toJavaFile())) {
          getContext().runOnUiThread(new Runnable(){
            @Override public void run(){
              setPath(newFile.getPath());
              callback.onComplete();
              notifyMediaScannerService(newFile);
            }
          }
);
        }
 else {
          getContext().runOnUiThread(new Runnable(){
            @Override public void run(){
              Utils.showErrorDialog(getContext(),R.string.failed_rename_file,new Exception(""String_Node_Str""));
              callback.onError(null);
            }
          }
);
        }
      }
    }
);
  }
}"
60362,"@Override public void exists(BooleanCallback callback){
  callback.onComplete(existsSync());
}","@Override public void exists(final BooleanCallback callback){
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        final boolean exists=existsSync();
        getContext().runOnUiThread(new Runnable(){
          @Override public void run(){
            if (callback != null)             callback.onComplete(exists);
          }
        }
);
      }
 catch (      final Exception e) {
        e.printStackTrace();
        getContext().runOnUiThread(new Runnable(){
          @Override public void run(){
            Utils.showErrorDialog(getContext(),R.string.error,e);
            if (callback != null)             callback.onError(null);
          }
        }
);
      }
    }
  }
).start();
}"
60363,"public BaseFileCab invalidateFab(){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  boolean hide=false;
  Log.v(""String_Node_Str"",""String_Node_Str"" + canPaste());
  getContext().fabPasteMode=canPaste();
  if (canPaste() != PasteMode.NOT_AVAILABLE) {
    if (isActive() && canPaste() == PasteMode.DISABLED) {
      Log.v(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      if (getFiles().size() == 0)       Log.v(""String_Node_Str"",""String_Node_Str"");
      if (!canPasteIntoSameDir()) {
        for (        File fi : getFiles()) {
          Log.v(""String_Node_Str"",""String_Node_Str"" + fi.getParent().getPath() + ""String_Node_Str""+ getDirectory().getPath());
          if (fi.getParent().equals(getDirectory())) {
            Log.v(""String_Node_Str"",""String_Node_Str"");
            hide=true;
            break;
          }
        }
      }
    }
    if (hide)     Log.v(""String_Node_Str"",""String_Node_Str"");
 else     Log.v(""String_Node_Str"",""String_Node_Str"");
  }
 else   Log.v(""String_Node_Str"",""String_Node_Str"");
  getContext().disableFab(hide);
  getContext().fab.setDrawable(getContext().getResources().getDrawable(canPaste() == BaseFileCab.PasteMode.ENABLED ? R.drawable.ic_paste : R.drawable.ic_add));
  return this;
}","public BaseFileCab invalidateFab(){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  boolean hide=false;
  if (!canShowFab()) {
    Log.v(""String_Node_Str"",""String_Node_Str"");
    hide=true;
  }
 else {
    Log.v(""String_Node_Str"",""String_Node_Str"" + canPaste());
    getContext().fabPasteMode=canPaste();
    if (canPaste() != PasteMode.NOT_AVAILABLE) {
      if (isActive() && canPaste() == PasteMode.DISABLED) {
        Log.v(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        if (getFiles().size() == 0)         Log.v(""String_Node_Str"",""String_Node_Str"");
        if (!canPasteIntoSameDir()) {
          for (          File fi : getFiles()) {
            Log.v(""String_Node_Str"",""String_Node_Str"" + fi.getParent().getPath() + ""String_Node_Str""+ getDirectory().getPath());
            if (fi.getParent().equals(getDirectory())) {
              Log.v(""String_Node_Str"",""String_Node_Str"");
              hide=true;
              break;
            }
          }
        }
      }
      if (hide)       Log.v(""String_Node_Str"",""String_Node_Str"");
 else       Log.v(""String_Node_Str"",""String_Node_Str"");
    }
 else     Log.v(""String_Node_Str"",""String_Node_Str"");
  }
  getContext().disableFab(hide);
  getContext().fab.setDrawable(getContext().getResources().getDrawable(canPaste() == BaseFileCab.PasteMode.ENABLED ? R.drawable.ic_paste : R.drawable.ic_add));
  return this;
}"
60364,"private void showNewFileDialog(final Activity context){
  Utils.showInputDialog(context,R.string.new_file,R.string.untitled,null,new Utils.InputCallback(){
    @Override public void onInput(    String newName){
      if (newName.isEmpty())       newName=getString(R.string.untitled);
      final File dir=mDirectory.isRemote() ? new CloudFile(context,(CloudFile)mDirectory,newName,false) : new LocalFile(context,mDirectory,newName);
      dir.exists(new File.BooleanCallback(){
        @Override public void onComplete(        boolean result){
          if (!result) {
            runOnUiThread(new Runnable(){
              @Override public void run(){
                dir.createFile(new SftpClient.CompletionCallback(){
                  @Override public void onComplete(){
                    runOnUiThread(new Runnable(){
                      @Override public void run(){
                        reload();
                      }
                    }
);
                  }
                  @Override public void onError(                  Exception e){
                    Utils.showErrorDialog(context,e.getMessage());
                  }
                }
);
              }
            }
);
          }
 else {
            CustomDialog.create(getActivity(),R.string.file_already_exists,getString(R.string.file_already_exists_warning),null);
          }
        }
        @Override public void onError(        Exception e){
          Utils.showErrorDialog(context,e.getMessage());
        }
      }
);
    }
  }
);
}","private void showNewFileDialog(final Activity context){
  Utils.showInputDialog(context,R.string.new_file,R.string.untitled,null,new Utils.InputCallback(){
    @Override public void onInput(    String newName){
      if (newName.isEmpty())       newName=getString(R.string.untitled);
      final File newFile=mDirectory.isRemote() ? new CloudFile(context,(CloudFile)mDirectory,newName,false) : new LocalFile(context,mDirectory,newName);
      newFile.exists(new File.BooleanCallback(){
        @Override public void onComplete(        boolean result){
          if (!result) {
            runOnUiThread(new Runnable(){
              @Override public void run(){
                newFile.createFile(new SftpClient.CompletionCallback(){
                  @Override public void onComplete(){
                    runOnUiThread(new Runnable(){
                      @Override public void run(){
                        reload();
                      }
                    }
);
                  }
                  @Override public void onError(                  final Exception e){
                    runOnUiThread(new Runnable(){
                      @Override public void run(){
                        Utils.showErrorDialog(context,e.getMessage());
                      }
                    }
);
                  }
                }
);
              }
            }
);
          }
 else {
            runOnUiThread(new Runnable(){
              @Override public void run(){
                CustomDialog.create(getActivity(),R.string.file_already_exists,getString(R.string.file_already_exists_warning),android.R.string.ok,0,android.R.string.cancel,new CustomDialog.SimpleClickListener(){
                  @Override public void onPositive(                  int which,                  View view){
                    createNewFileDuplicate(context,newFile);
                  }
                }
).show(getFragmentManager(),""String_Node_Str"");
              }
            }
);
          }
        }
        @Override public void onError(        Exception e){
          Utils.showErrorDialog(context,e.getMessage());
        }
      }
);
    }
  }
);
}"
60365,"@Override public void onPositive(int which,View view){
  file.delete(new SftpClient.CompletionCallback(){
    @Override public void onComplete(){
      if (Shortcuts.remove(getActivity(),file))       ((DrawerActivity)getActivity()).reloadNavDrawer();
      mAdapter.remove(file);
    }
    @Override public void onError(    Exception e){
    }
  }
);
}","@Override public void onPositive(int which,View view){
  file.delete(new SftpClient.CompletionCallback(){
    @Override public void onComplete(){
      if (Shortcuts.remove(getActivity(),file))       ((DrawerActivity)getActivity()).reloadNavDrawer();
      DrawerActivity act=(DrawerActivity)getActivity();
      if (act.getCab() != null && act.getCab() instanceof BaseFileCab) {
        ((BaseFileCab)act.getCab()).removeFile(file);
      }
      mAdapter.remove(file);
    }
    @Override public void onError(    Exception e){
    }
  }
);
}"
60366,"@Override public void onComplete(){
  if (Shortcuts.remove(getActivity(),file))   ((DrawerActivity)getActivity()).reloadNavDrawer();
  mAdapter.remove(file);
}","@Override public void onComplete(){
  if (Shortcuts.remove(getActivity(),file))   ((DrawerActivity)getActivity()).reloadNavDrawer();
  DrawerActivity act=(DrawerActivity)getActivity();
  if (act.getCab() != null && act.getCab() instanceof BaseFileCab) {
    ((BaseFileCab)act.getCab()).removeFile(file);
  }
  mAdapter.remove(file);
}"
60367,"@Override public void onMenuItemClick(final File file,MenuItem item){
switch (item.getItemId()) {
case R.id.pin:
    Shortcuts.add(getActivity(),new Shortcuts.Item(file));
  ((DrawerActivity)getActivity()).reloadNavDrawer(true);
break;
case R.id.openAs:
Utils.openFile((DrawerActivity)getActivity(),file,true);
break;
case R.id.copy:
{
BaseCab cab=((DrawerActivity)getActivity()).getCab();
boolean shouldCreateCopy=cab == null || !cab.isActive() || !(cab instanceof CopyCab);
if (shouldCreateCopy) {
if (cab != null && cab instanceof BaseFileCab) {
((BaseFileCab)cab).overrideDestroy=true;
}
((DrawerActivity)getActivity()).setCab(new CopyCab().setFragment(this).setFile(file).start());
}
 else ((BaseFileCab)cab).setFragment(this).addFile(file);
break;
}
case R.id.cut:
{
BaseCab cab=((DrawerActivity)getActivity()).getCab();
boolean shouldCreateCut=cab == null || !cab.isActive() || !(cab instanceof CutCab);
if (shouldCreateCut) {
if (cab != null && cab instanceof BaseFileCab) {
((BaseFileCab)cab).overrideDestroy=true;
}
((DrawerActivity)getActivity()).setCab(new CutCab().setFragment(this).setFile(file).start());
}
 else ((BaseFileCab)cab).setFragment(this).addFile(file);
break;
}
case R.id.rename:
Utils.showInputDialog(getActivity(),R.string.rename,0,file.getName(),new Utils.InputCallback(){
@Override public void onInput(String text){
if (!text.contains(""String_Node_Str"")) text+=file.getExtension();
final File newFile=file.isRemote() ? new CloudFile(getActivity(),(CloudFile)file.getParent(),text,file.isDirectory()) : new LocalFile(getActivity(),file.getParent(),text);
file.rename(newFile,new SftpClient.CompletionCallback(){
@Override public void onComplete(){
reload();
if (((DrawerActivity)getActivity()).getCab() != null && ((DrawerActivity)getActivity()).getCab() instanceof BaseFileCab) {
int cabIndex=((BaseFileCab)((DrawerActivity)getActivity()).getCab()).findFile(file);
if (cabIndex > -1) ((BaseFileCab)((DrawerActivity)getActivity()).getCab()).setFile(cabIndex,newFile);
Toast.makeText(getActivity(),getString(R.string.renamed_to,newFile.getPath()),Toast.LENGTH_SHORT).show();
}
}
@Override public void onError(Exception e){
}
}
);
}
}
);
break;
case R.id.zip:
final List<File> files=new ArrayList<File>();
files.add(file);
if (file.getExtension().equals(""String_Node_Str"")) {
Unzipper.unzip(this,files,null);
}
 else {
Zipper.zip(this,files,null);
}
break;
case R.id.share:
try {
getActivity().startActivity(new Intent(Intent.ACTION_SEND).setType(file.getMimeType()).putExtra(Intent.EXTRA_STREAM,Uri.fromFile(file.toJavaFile())));
}
 catch (ActivityNotFoundException e) {
Toast.makeText(getActivity(),R.string.no_apps_for_sharing,Toast.LENGTH_SHORT).show();
}
break;
case R.id.delete:
Utils.showConfirmDialog(getActivity(),R.string.delete,R.string.confirm_delete,file.getName(),new CustomDialog.SimpleClickListener(){
@Override public void onPositive(int which,View view){
file.delete(new SftpClient.CompletionCallback(){
@Override public void onComplete(){
if (Shortcuts.remove(getActivity(),file)) ((DrawerActivity)getActivity()).reloadNavDrawer();
mAdapter.remove(file);
}
@Override public void onError(Exception e){
}
}
);
}
}
);
break;
case R.id.details:
DetailsDialog.create(file).show(getActivity().getFragmentManager(),""String_Node_Str"");
break;
}
}","@Override public void onMenuItemClick(final File file,MenuItem item){
switch (item.getItemId()) {
case R.id.pin:
    Shortcuts.add(getActivity(),new Shortcuts.Item(file));
  ((DrawerActivity)getActivity()).reloadNavDrawer(true);
break;
case R.id.openAs:
Utils.openFile((DrawerActivity)getActivity(),file,true);
break;
case R.id.copy:
{
BaseCab cab=((DrawerActivity)getActivity()).getCab();
boolean shouldCreateCopy=cab == null || !cab.isActive() || !(cab instanceof CopyCab);
if (shouldCreateCopy) {
if (cab != null && cab instanceof BaseFileCab) {
((BaseFileCab)cab).overrideDestroy=true;
}
((DrawerActivity)getActivity()).setCab(new CopyCab().setFragment(this).setFile(file).start());
}
 else ((BaseFileCab)cab).setFragment(this).addFile(file);
break;
}
case R.id.cut:
{
BaseCab cab=((DrawerActivity)getActivity()).getCab();
boolean shouldCreateCut=cab == null || !cab.isActive() || !(cab instanceof CutCab);
if (shouldCreateCut) {
if (cab != null && cab instanceof BaseFileCab) {
((BaseFileCab)cab).overrideDestroy=true;
}
((DrawerActivity)getActivity()).setCab(new CutCab().setFragment(this).setFile(file).start());
}
 else ((BaseFileCab)cab).setFragment(this).addFile(file);
break;
}
case R.id.rename:
Utils.showInputDialog(getActivity(),R.string.rename,0,file.getName(),new Utils.InputCallback(){
@Override public void onInput(String text){
if (!text.contains(""String_Node_Str"")) text+=file.getExtension();
final File newFile=file.isRemote() ? new CloudFile(getActivity(),(CloudFile)file.getParent(),text,file.isDirectory()) : new LocalFile(getActivity(),file.getParent(),text);
file.rename(newFile,new SftpClient.CompletionCallback(){
@Override public void onComplete(){
reload();
if (((DrawerActivity)getActivity()).getCab() != null && ((DrawerActivity)getActivity()).getCab() instanceof BaseFileCab) {
int cabIndex=((BaseFileCab)((DrawerActivity)getActivity()).getCab()).findFile(file);
if (cabIndex > -1) ((BaseFileCab)((DrawerActivity)getActivity()).getCab()).setFile(cabIndex,newFile);
Toast.makeText(getActivity(),getString(R.string.renamed_to,newFile.getPath()),Toast.LENGTH_SHORT).show();
}
}
@Override public void onError(Exception e){
}
}
);
}
}
);
break;
case R.id.zip:
final List<File> files=new ArrayList<File>();
files.add(file);
if (file.getExtension().equals(""String_Node_Str"")) {
Unzipper.unzip(this,files,null);
}
 else {
Zipper.zip(this,files,null);
}
break;
case R.id.share:
try {
getActivity().startActivity(new Intent(Intent.ACTION_SEND).setType(file.getMimeType()).putExtra(Intent.EXTRA_STREAM,Uri.fromFile(file.toJavaFile())));
}
 catch (ActivityNotFoundException e) {
Toast.makeText(getActivity(),R.string.no_apps_for_sharing,Toast.LENGTH_SHORT).show();
}
break;
case R.id.delete:
Utils.showConfirmDialog(getActivity(),R.string.delete,R.string.confirm_delete,file.getName(),new CustomDialog.SimpleClickListener(){
@Override public void onPositive(int which,View view){
file.delete(new SftpClient.CompletionCallback(){
@Override public void onComplete(){
if (Shortcuts.remove(getActivity(),file)) ((DrawerActivity)getActivity()).reloadNavDrawer();
DrawerActivity act=(DrawerActivity)getActivity();
if (act.getCab() != null && act.getCab() instanceof BaseFileCab) {
((BaseFileCab)act.getCab()).removeFile(file);
}
mAdapter.remove(file);
}
@Override public void onError(Exception e){
}
}
);
}
}
);
break;
case R.id.details:
DetailsDialog.create(file).show(getActivity().getFragmentManager(),""String_Node_Str"");
break;
}
}"
60368,"public void remove(File file){
  for (int i=0; i < mFiles.size(); i++) {
    if (mFiles.get(i).getPath().equals(file.getPath())) {
      mFiles.remove(i);
      break;
    }
  }
  notifyDataSetChanged();
}","public void remove(File file,boolean notify){
  for (int i=0; i < mFiles.size(); i++) {
    if (mFiles.get(i).getPath().equals(file.getPath())) {
      Log.v(""String_Node_Str"",""String_Node_Str"" + mFiles.get(i).getPath());
      mFiles.remove(i);
      break;
    }
  }
  if (notify)   notifyDataSetChanged();
}"
60369,"@Override public void onComplete(){
  getFragment().mAdapter.remove(getFiles().get(0));
  getFiles().remove(0);
  deleteNextFile();
}","@Override public void onComplete(){
  getFragment().mAdapter.remove(getFiles().get(0),false);
  getFiles().remove(0);
  deleteNextFile();
}"
60370,"@Override public void onPositive(int which,View view){
  deleteNextFile();
  finish();
}","@Override public void onPositive(int which,View view){
  deleteNextFile();
}"
60371,"private void deleteNextFile(){
  if (getFiles().size() == 0) {
    getFragment().setListShown(true);
    invalidate();
    return;
  }
  getFiles().get(0).delete(new SftpClient.CompletionCallback(){
    @Override public void onComplete(){
      getFragment().mAdapter.remove(getFiles().get(0));
      getFiles().remove(0);
      deleteNextFile();
    }
    @Override public void onError(    Exception e){
    }
  }
);
}","private void deleteNextFile(){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  if (getFiles().size() == 0) {
    Log.v(""String_Node_Str"",""String_Node_Str"");
    getFragment().setListShown(true);
    invalidate();
    return;
  }
  Log.v(""String_Node_Str"",""String_Node_Str"" + getFiles().get(0));
  getFiles().get(0).delete(new SftpClient.CompletionCallback(){
    @Override public void onComplete(){
      getFragment().mAdapter.remove(getFiles().get(0),false);
      getFiles().remove(0);
      deleteNextFile();
    }
    @Override public void onError(    Exception e){
    }
  }
);
}"
60372,"@Override public boolean onActionItemClicked(final ActionMode actionMode,final MenuItem menuItem){
  if (menuItem.getItemId() == R.id.copy) {
    if (getContext().getCab() instanceof BaseFileCab)     ((BaseFileCab)getContext().getCab()).overrideDestroy=true;
    getContext().setCab(new CopyCab().setFragment(getFragment()).setFiles(getFiles()).start());
    return super.onActionItemClicked(actionMode,menuItem);
  }
 else   if (menuItem.getItemId() == R.id.cut) {
    if (getContext().getCab() instanceof BaseFileCab)     ((BaseFileCab)getContext().getCab()).overrideDestroy=true;
    getContext().setCab(new CutCab().setFragment(getFragment()).setFiles(getFiles()).start());
    return super.onActionItemClicked(actionMode,menuItem);
  }
 else   if (menuItem.getItemId() == R.id.delete) {
    CustomDialog.create(getContext(),R.string.delete,getFiles().size() == 1 ? getContext().getString(R.string.confirm_delete,getFiles().get(0).getName()) : getContext().getString(R.string.confirm_delete_xfiles,getFiles().size()),R.string.yes,0,R.string.no,new CustomDialog.SimpleClickListener(){
      @Override public void onPositive(      int which,      View view){
        deleteNextFile();
        finish();
      }
    }
).show(getContext().getFragmentManager(),""String_Node_Str"");
    return false;
  }
 else   if (menuItem.getItemId() == R.id.selectAll) {
    List<File> newSelected=getFragment().mAdapter.checkAll();
    addFiles(newSelected);
    invalidate();
    return true;
  }
 else   if (menuItem.getItemId() == R.id.share) {
    Intent intent=new Intent().setAction(Intent.ACTION_SEND_MULTIPLE);
    String mime=null;
    for (    File fi : getFiles()) {
      if (mime == null)       mime=fi.getMimeType();
 else       if (!fi.getMimeType().equals(mime)) {
        mime=""String_Node_Str"";
        break;
      }
    }
    intent.setType(mime);
    ArrayList<Uri> files=new ArrayList<Uri>();
    for (    File fi : getFiles())     files.add(Uri.fromFile(fi.toJavaFile()));
    intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,files);
    try {
      getContext().startActivity(intent);
    }
 catch (    ActivityNotFoundException e) {
      Toast.makeText(getContext(),R.string.no_apps_for_sharing,Toast.LENGTH_SHORT).show();
    }
  }
 else   if (menuItem.getItemId() == R.id.zip) {
    if (menuItem.getTitle().toString().equals(getContext().getString(R.string.unzip))) {
      Unzipper.unzip(getFragment(),getFiles(),new Zipper.ZipCallback(){
        @Override public void onComplete(){
          MainCab.super.onActionItemClicked(actionMode,menuItem);
        }
      }
);
    }
 else {
      Zipper.zip(getFragment(),getFiles(),new Zipper.ZipCallback(){
        @Override public void onComplete(){
          MainCab.super.onActionItemClicked(actionMode,menuItem);
        }
      }
);
    }
    return true;
  }
  return false;
}","@Override public boolean onActionItemClicked(final ActionMode actionMode,final MenuItem menuItem){
  if (menuItem.getItemId() == R.id.copy) {
    if (getContext().getCab() instanceof BaseFileCab)     ((BaseFileCab)getContext().getCab()).overrideDestroy=true;
    getContext().setCab(new CopyCab().setFragment(getFragment()).setFiles(getFiles()).start());
    return super.onActionItemClicked(actionMode,menuItem);
  }
 else   if (menuItem.getItemId() == R.id.cut) {
    if (getContext().getCab() instanceof BaseFileCab)     ((BaseFileCab)getContext().getCab()).overrideDestroy=true;
    getContext().setCab(new CutCab().setFragment(getFragment()).setFiles(getFiles()).start());
    return super.onActionItemClicked(actionMode,menuItem);
  }
 else   if (menuItem.getItemId() == R.id.delete) {
    CustomDialog.create(getContext(),R.string.delete,getFiles().size() == 1 ? getContext().getString(R.string.confirm_delete,getFiles().get(0).getName()) : getContext().getString(R.string.confirm_delete_xfiles,getFiles().size()),R.string.yes,0,R.string.no,new CustomDialog.SimpleClickListener(){
      @Override public void onPositive(      int which,      View view){
        deleteNextFile();
      }
    }
).show(getContext().getFragmentManager(),""String_Node_Str"");
    return false;
  }
 else   if (menuItem.getItemId() == R.id.selectAll) {
    List<File> newSelected=getFragment().mAdapter.checkAll();
    addFiles(newSelected);
    invalidate();
    return true;
  }
 else   if (menuItem.getItemId() == R.id.share) {
    Intent intent=new Intent().setAction(Intent.ACTION_SEND_MULTIPLE);
    String mime=null;
    for (    File fi : getFiles()) {
      if (mime == null)       mime=fi.getMimeType();
 else       if (!fi.getMimeType().equals(mime)) {
        mime=""String_Node_Str"";
        break;
      }
    }
    intent.setType(mime);
    ArrayList<Uri> files=new ArrayList<Uri>();
    for (    File fi : getFiles())     files.add(Uri.fromFile(fi.toJavaFile()));
    intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,files);
    try {
      getContext().startActivity(intent);
    }
 catch (    ActivityNotFoundException e) {
      Toast.makeText(getContext(),R.string.no_apps_for_sharing,Toast.LENGTH_SHORT).show();
    }
  }
 else   if (menuItem.getItemId() == R.id.zip) {
    if (menuItem.getTitle().toString().equals(getContext().getString(R.string.unzip))) {
      Unzipper.unzip(getFragment(),getFiles(),new Zipper.ZipCallback(){
        @Override public void onComplete(){
          MainCab.super.onActionItemClicked(actionMode,menuItem);
        }
      }
);
    }
 else {
      Zipper.zip(getFragment(),getFiles(),new Zipper.ZipCallback(){
        @Override public void onComplete(){
          MainCab.super.onActionItemClicked(actionMode,menuItem);
        }
      }
);
    }
    return true;
  }
  return false;
}"
60373,"protected final void setEmptyText(final String text){
  runOnUiThread(new Runnable(){
    @Override public void run(){
      View v=getView();
      if (v != null) {
        ((TextView)v.findViewById(android.R.id.empty)).setText(text);
      }
    }
  }
);
}","protected final void setEmptyText(final String text){
  runOnUiThread(new Runnable(){
    @Override public void run(){
      View v=getView();
      if (v != null) {
        ((TextView)v.findViewById(R.id.emptyText)).setText(text);
      }
    }
  }
);
}"
60374,"public final void setListShown(boolean shown){
  View v=getView();
  if (v != null) {
    if (shown) {
      v.findViewById(R.id.listFrame).setVisibility(View.VISIBLE);
      v.findViewById(android.R.id.progress).setVisibility(View.GONE);
      boolean showEmpty=mAdapter.getItemCount() == 0;
      v.findViewById(android.R.id.empty).setVisibility(showEmpty ? View.VISIBLE : View.GONE);
      v.findViewById(android.R.id.list).setVisibility(showEmpty ? View.GONE : View.VISIBLE);
    }
 else {
      v.findViewById(R.id.listFrame).setVisibility(View.GONE);
      v.findViewById(android.R.id.progress).setVisibility(View.VISIBLE);
    }
  }
}","public final void setListShown(boolean shown){
  View v=getView();
  if (v != null) {
    if (shown) {
      v.findViewById(R.id.listFrame).setVisibility(View.VISIBLE);
      v.findViewById(android.R.id.progress).setVisibility(View.GONE);
      boolean showEmpty=mAdapter.getItemCount() == 0;
      v.findViewById(android.R.id.empty).setVisibility(showEmpty ? View.VISIBLE : View.GONE);
      ((RecyclerView)v.findViewById(android.R.id.list)).setAdapter(mAdapter);
    }
 else {
      v.findViewById(R.id.listFrame).setVisibility(View.GONE);
      v.findViewById(android.R.id.progress).setVisibility(View.VISIBLE);
    }
  }
}"
60375,"@Override public void onPositive(int which,View view){
  file.delete(new SftpClient.CompletionCallback(){
    @Override public void onComplete(){
      if (Shortcuts.remove(getActivity(),file))       ((DrawerActivity)getActivity()).reloadNavDrawer();
      DrawerActivity act=(DrawerActivity)getActivity();
      if (act.getCab() != null && act.getCab() instanceof BaseFileCab) {
        ((BaseFileCab)act.getCab()).removeFile(file);
      }
      mAdapter.remove(file);
    }
    @Override public void onError(    Exception e){
    }
  }
);
}","@Override public void onPositive(int which,View view){
  file.delete(new SftpClient.CompletionCallback(){
    @Override public void onComplete(){
      if (Shortcuts.remove(getActivity(),file))       ((DrawerActivity)getActivity()).reloadNavDrawer();
      DrawerActivity act=(DrawerActivity)getActivity();
      if (act.getCab() != null && act.getCab() instanceof BaseFileCab) {
        ((BaseFileCab)act.getCab()).removeFile(file);
      }
      mAdapter.remove(file,true);
    }
    @Override public void onError(    Exception e){
    }
  }
);
}"
60376,"@Override public void onComplete(){
  if (Shortcuts.remove(getActivity(),file))   ((DrawerActivity)getActivity()).reloadNavDrawer();
  DrawerActivity act=(DrawerActivity)getActivity();
  if (act.getCab() != null && act.getCab() instanceof BaseFileCab) {
    ((BaseFileCab)act.getCab()).removeFile(file);
  }
  mAdapter.remove(file);
}","@Override public void onComplete(){
  if (Shortcuts.remove(getActivity(),file))   ((DrawerActivity)getActivity()).reloadNavDrawer();
  DrawerActivity act=(DrawerActivity)getActivity();
  if (act.getCab() != null && act.getCab() instanceof BaseFileCab) {
    ((BaseFileCab)act.getCab()).removeFile(file);
  }
  mAdapter.remove(file,true);
}"
60377,"@Override public void onMenuItemClick(final File file,MenuItem item){
switch (item.getItemId()) {
case R.id.pin:
    Shortcuts.add(getActivity(),new Shortcuts.Item(file));
  ((DrawerActivity)getActivity()).reloadNavDrawer(true);
break;
case R.id.openAs:
Utils.openFile((DrawerActivity)getActivity(),file,true);
break;
case R.id.copy:
{
BaseCab cab=((DrawerActivity)getActivity()).getCab();
boolean shouldCreateCopy=cab == null || !cab.isActive() || !(cab instanceof CopyCab);
if (shouldCreateCopy) {
if (cab != null && cab instanceof BaseFileCab) {
((BaseFileCab)cab).overrideDestroy=true;
}
((DrawerActivity)getActivity()).setCab(new CopyCab().setFragment(this).setFile(file).start());
}
 else ((BaseFileCab)cab).setFragment(this).addFile(file);
break;
}
case R.id.cut:
{
BaseCab cab=((DrawerActivity)getActivity()).getCab();
boolean shouldCreateCut=cab == null || !cab.isActive() || !(cab instanceof CutCab);
if (shouldCreateCut) {
if (cab != null && cab instanceof BaseFileCab) {
((BaseFileCab)cab).overrideDestroy=true;
}
((DrawerActivity)getActivity()).setCab(new CutCab().setFragment(this).setFile(file).start());
}
 else ((BaseFileCab)cab).setFragment(this).addFile(file);
break;
}
case R.id.rename:
Utils.showInputDialog(getActivity(),R.string.rename,0,file.getName(),new Utils.InputCallback(){
@Override public void onInput(String text){
if (!text.contains(""String_Node_Str"")) text+=file.getExtension();
final File newFile=file.isRemote() ? new CloudFile(getActivity(),(CloudFile)file.getParent(),text,file.isDirectory()) : new LocalFile(getActivity(),file.getParent(),text);
file.rename(newFile,new SftpClient.CompletionCallback(){
@Override public void onComplete(){
reload();
if (((DrawerActivity)getActivity()).getCab() != null && ((DrawerActivity)getActivity()).getCab() instanceof BaseFileCab) {
int cabIndex=((BaseFileCab)((DrawerActivity)getActivity()).getCab()).findFile(file);
if (cabIndex > -1) ((BaseFileCab)((DrawerActivity)getActivity()).getCab()).setFile(cabIndex,newFile);
Toast.makeText(getActivity(),getString(R.string.renamed_to,newFile.getPath()),Toast.LENGTH_SHORT).show();
}
}
@Override public void onError(Exception e){
}
}
);
}
}
);
break;
case R.id.zip:
final List<File> files=new ArrayList<File>();
files.add(file);
if (file.getExtension().equals(""String_Node_Str"")) {
Unzipper.unzip(this,files,null);
}
 else {
Zipper.zip(this,files,null);
}
break;
case R.id.share:
try {
getActivity().startActivity(new Intent(Intent.ACTION_SEND).setType(file.getMimeType()).putExtra(Intent.EXTRA_STREAM,Uri.fromFile(file.toJavaFile())));
}
 catch (ActivityNotFoundException e) {
Toast.makeText(getActivity(),R.string.no_apps_for_sharing,Toast.LENGTH_SHORT).show();
}
break;
case R.id.delete:
Utils.showConfirmDialog(getActivity(),R.string.delete,R.string.confirm_delete,file.getName(),new CustomDialog.SimpleClickListener(){
@Override public void onPositive(int which,View view){
file.delete(new SftpClient.CompletionCallback(){
@Override public void onComplete(){
if (Shortcuts.remove(getActivity(),file)) ((DrawerActivity)getActivity()).reloadNavDrawer();
DrawerActivity act=(DrawerActivity)getActivity();
if (act.getCab() != null && act.getCab() instanceof BaseFileCab) {
((BaseFileCab)act.getCab()).removeFile(file);
}
mAdapter.remove(file);
}
@Override public void onError(Exception e){
}
}
);
}
}
);
break;
case R.id.details:
DetailsDialog.create(file).show(getActivity().getFragmentManager(),""String_Node_Str"");
break;
}
}","@Override public void onMenuItemClick(final File file,MenuItem item){
switch (item.getItemId()) {
case R.id.pin:
    Shortcuts.add(getActivity(),new Shortcuts.Item(file));
  ((DrawerActivity)getActivity()).reloadNavDrawer(true);
break;
case R.id.openAs:
Utils.openFile((DrawerActivity)getActivity(),file,true);
break;
case R.id.copy:
{
BaseCab cab=((DrawerActivity)getActivity()).getCab();
boolean shouldCreateCopy=cab == null || !cab.isActive() || !(cab instanceof CopyCab);
if (shouldCreateCopy) {
if (cab != null && cab instanceof BaseFileCab) {
((BaseFileCab)cab).overrideDestroy=true;
}
((DrawerActivity)getActivity()).setCab(new CopyCab().setFragment(this).setFile(file).start());
}
 else ((BaseFileCab)cab).setFragment(this).addFile(file);
break;
}
case R.id.cut:
{
BaseCab cab=((DrawerActivity)getActivity()).getCab();
boolean shouldCreateCut=cab == null || !cab.isActive() || !(cab instanceof CutCab);
if (shouldCreateCut) {
if (cab != null && cab instanceof BaseFileCab) {
((BaseFileCab)cab).overrideDestroy=true;
}
((DrawerActivity)getActivity()).setCab(new CutCab().setFragment(this).setFile(file).start());
}
 else ((BaseFileCab)cab).setFragment(this).addFile(file);
break;
}
case R.id.rename:
Utils.showInputDialog(getActivity(),R.string.rename,0,file.getName(),new Utils.InputCallback(){
@Override public void onInput(String text){
if (!text.contains(""String_Node_Str"")) text+=file.getExtension();
final File newFile=file.isRemote() ? new CloudFile(getActivity(),(CloudFile)file.getParent(),text,file.isDirectory()) : new LocalFile(getActivity(),file.getParent(),text);
file.rename(newFile,new SftpClient.CompletionCallback(){
@Override public void onComplete(){
reload();
if (((DrawerActivity)getActivity()).getCab() != null && ((DrawerActivity)getActivity()).getCab() instanceof BaseFileCab) {
int cabIndex=((BaseFileCab)((DrawerActivity)getActivity()).getCab()).findFile(file);
if (cabIndex > -1) ((BaseFileCab)((DrawerActivity)getActivity()).getCab()).setFile(cabIndex,newFile);
Toast.makeText(getActivity(),getString(R.string.renamed_to,newFile.getPath()),Toast.LENGTH_SHORT).show();
}
}
@Override public void onError(Exception e){
}
}
);
}
}
);
break;
case R.id.zip:
final List<File> files=new ArrayList<File>();
files.add(file);
if (file.getExtension().equals(""String_Node_Str"")) {
Unzipper.unzip(this,files,null);
}
 else {
Zipper.zip(this,files,null);
}
break;
case R.id.share:
try {
getActivity().startActivity(new Intent(Intent.ACTION_SEND).setType(file.getMimeType()).putExtra(Intent.EXTRA_STREAM,Uri.fromFile(file.toJavaFile())));
}
 catch (ActivityNotFoundException e) {
Toast.makeText(getActivity(),R.string.no_apps_for_sharing,Toast.LENGTH_SHORT).show();
}
break;
case R.id.delete:
Utils.showConfirmDialog(getActivity(),R.string.delete,R.string.confirm_delete,file.getName(),new CustomDialog.SimpleClickListener(){
@Override public void onPositive(int which,View view){
file.delete(new SftpClient.CompletionCallback(){
@Override public void onComplete(){
if (Shortcuts.remove(getActivity(),file)) ((DrawerActivity)getActivity()).reloadNavDrawer();
DrawerActivity act=(DrawerActivity)getActivity();
if (act.getCab() != null && act.getCab() instanceof BaseFileCab) {
((BaseFileCab)act.getCab()).removeFile(file);
}
mAdapter.remove(file,true);
}
@Override public void onError(Exception e){
}
}
);
}
}
);
break;
case R.id.details:
DetailsDialog.create(file).show(getActivity().getFragmentManager(),""String_Node_Str"");
break;
}
}"
60378,"@Override public boolean onPrepareActionMode(ActionMode actionMode,Menu menu){
  boolean showUnzip=true;
  boolean showShare=true;
  for (  File fi : getFiles()) {
    if (fi.isDirectory())     showShare=false;
 else     if (!fi.getExtension().equals(""String_Node_Str"")) {
      showUnzip=false;
    }
  }
  menu.findItem(R.id.zip).setTitle(showUnzip ? R.string.unzip : R.string.zip);
  menu.findItem(R.id.share).setVisible(showShare);
  return super.onPrepareActionMode(actionMode,menu);
}","@Override public boolean onPrepareActionMode(ActionMode actionMode,Menu menu){
  boolean showUnzip=true;
  boolean showShare=true;
  for (  File fi : getFiles()) {
    if (fi.isDirectory()) {
      showShare=false;
      showUnzip=false;
    }
 else     if (!fi.getExtension().equals(""String_Node_Str"")) {
      showUnzip=false;
    }
  }
  menu.findItem(R.id.zip).setTitle(showUnzip ? R.string.unzip : R.string.zip);
  menu.findItem(R.id.share).setVisible(showShare);
  return super.onPrepareActionMode(actionMode,menu);
}"
60379,"public APKIconDownloader(Context context,int connectTimeout,int readTimeout){
  super(context,connectTimeout,readTimeout);
  mContext=context;
}","public APKIconDownloader(Context context){
  super(context);
  mContext=context;
}"
60380,"@Override public void onCreate(Bundle savedInstanceState){
  mDirectory=(File)getArguments().getSerializable(""String_Node_Str"");
  mQuery=getArguments().getString(""String_Node_Str"");
  super.onCreate(savedInstanceState);
  setHasOptionsMenu(true);
  if (mQuery != null)   mQuery=mQuery.trim();
  showHidden=Utils.getShowHidden(getActivity());
  sorter=Utils.getSorter(getActivity());
}","@Override public void onCreate(Bundle savedInstanceState){
  mDirectory=(File)getArguments().getSerializable(""String_Node_Str"");
  mQuery=getArguments().getString(""String_Node_Str"");
  super.onCreate(savedInstanceState);
  if (mQuery != null)   mQuery=mQuery.trim();
  showHidden=Utils.getShowHidden(getActivity());
  sorter=Utils.getSorter(getActivity());
}"
60381,"public void setUp(int fragmentId,DrawerLayout drawerLayout){
  mFragmentContainerView=getActivity().findViewById(fragmentId);
  mDrawerLayout=drawerLayout;
  mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayHomeAsUpEnabled(true);
  actionBar.setHomeButtonEnabled(true);
  mDrawerToggle=new ActionBarDrawerToggle(getActivity(),mDrawerLayout,R.drawable.ic_navigation_drawer,R.string.navigation_drawer_open,R.string.navigation_drawer_close){
    @Override public void onDrawerClosed(    View drawerView){
      super.onDrawerClosed(drawerView);
      if (!isAdded()) {
        return;
      }
      getActivity().setTitle(mTitle);
      getActivity().invalidateOptionsMenu();
    }
    @Override public void onDrawerOpened(    View drawerView){
      super.onDrawerOpened(drawerView);
      if (!isAdded()) {
        return;
      }
      mTitle=getActivity().getTitle();
      getActivity().setTitle(R.string.app_name);
      if (!mUserLearnedDrawer) {
        Toast.makeText(getActivity(),R.string.drawer_longpress_hint,Toast.LENGTH_LONG).show();
        mUserLearnedDrawer=true;
        SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
        sp.edit().putBoolean(PREF_USER_LEARNED_DRAWER,true).apply();
      }
      getActivity().invalidateOptionsMenu();
    }
  }
;
  if (!mUserLearnedDrawer && !mFromSavedInstanceState) {
    mDrawerLayout.openDrawer(mFragmentContainerView);
  }
  mDrawerLayout.post(new Runnable(){
    @Override public void run(){
      mDrawerToggle.syncState();
    }
  }
);
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  selectItem(mCurrentSelectedPosition);
}","public void setUp(int fragmentId,DrawerLayout drawerLayout,boolean selectDefault){
  mFragmentContainerView=getActivity().findViewById(fragmentId);
  mDrawerLayout=drawerLayout;
  mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,GravityCompat.START);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayHomeAsUpEnabled(true);
  actionBar.setHomeButtonEnabled(true);
  mDrawerToggle=new ActionBarDrawerToggle(getActivity(),mDrawerLayout,R.drawable.ic_navigation_drawer,R.string.navigation_drawer_open,R.string.navigation_drawer_close){
    @Override public void onDrawerClosed(    View drawerView){
      super.onDrawerClosed(drawerView);
      if (!isAdded()) {
        return;
      }
      getActivity().setTitle(mTitle);
      getActivity().invalidateOptionsMenu();
    }
    @Override public void onDrawerOpened(    View drawerView){
      super.onDrawerOpened(drawerView);
      if (!isAdded()) {
        return;
      }
      mTitle=getActivity().getTitle();
      getActivity().setTitle(R.string.app_name);
      if (!mUserLearnedDrawer) {
        Toast.makeText(getActivity(),R.string.drawer_longpress_hint,Toast.LENGTH_LONG).show();
        mUserLearnedDrawer=true;
        SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
        sp.edit().putBoolean(PREF_USER_LEARNED_DRAWER,true).apply();
      }
      getActivity().invalidateOptionsMenu();
    }
  }
;
  if (!mUserLearnedDrawer && !mFromSavedInstanceState) {
    mDrawerLayout.openDrawer(mFragmentContainerView);
  }
  mDrawerLayout.post(new Runnable(){
    @Override public void run(){
      mDrawerToggle.syncState();
    }
  }
);
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  if (selectDefault)   selectItem(mCurrentSelectedPosition);
}"
60382,"private void processIntent(Intent intent){
  if (intent.hasExtra(""String_Node_Str"")) {
    mRemoteSwitch=(CloudFile)intent.getSerializableExtra(""String_Node_Str"");
    if (mNetworkService != null) {
      switchDirectory(mRemoteSwitch,true);
      displayDisconnectPrompt();
      mRemoteSwitch=null;
    }
  }
 else {
    if (!PreferenceManager.getDefaultSharedPreferences(this).getBoolean(""String_Node_Str"",false)) {
      getFragmentManager().beginTransaction().replace(R.id.container,new WelcomeFragment()).commit();
    }
 else {
      switchDirectory(null,true);
    }
  }
}","private void processIntent(Intent intent,Bundle savedInstanceState){
  if (intent.hasExtra(""String_Node_Str"")) {
    mRemoteSwitch=(CloudFile)intent.getSerializableExtra(""String_Node_Str"");
    if (mNetworkService != null) {
      switchDirectory(mRemoteSwitch,true);
      displayDisconnectPrompt();
      mRemoteSwitch=null;
    }
  }
 else   if (savedInstanceState == null) {
    if (!PreferenceManager.getDefaultSharedPreferences(this).getBoolean(""String_Node_Str"",false)) {
      getFragmentManager().beginTransaction().replace(R.id.container,new WelcomeFragment()).commit();
    }
 else {
      switchDirectory(null,true);
    }
  }
}"
60383,"@Override protected void onCreate(Bundle savedInstanceState){
  mThemeUtils=new ThemeUtils(this);
  setTheme(mThemeUtils.getCurrent());
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_drawer);
  if (savedInstanceState != null) {
    if (savedInstanceState.containsKey(""String_Node_Str"")) {
      mFileCab=(BaseFileCab)savedInstanceState.getSerializable(""String_Node_Str"");
      shouldAttachFab=true;
    }
    fabPasteMode=(BaseFileCab.PasteMode)savedInstanceState.getSerializable(""String_Node_Str"");
    fabDisabled=savedInstanceState.getBoolean(""String_Node_Str"");
  }
  NavigationDrawerFragment mNavigationDrawerFragment=(NavigationDrawerFragment)getFragmentManager().findFragmentById(R.id.navigation_drawer);
  mNavigationDrawerFragment.setUp(R.id.navigation_drawer,(DrawerLayout)findViewById(R.id.drawer_layout));
  fab=(FloatingActionButton)findViewById(R.id.fab);
  fab.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (mFabListener != null)       mFabListener.onFabPressed(fabPasteMode);
    }
  }
);
  fab.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View view){
      Toast.makeText(DrawerActivity.this,fabPasteMode == BaseFileCab.PasteMode.ENABLED ? R.string.paste : R.string.newStr,Toast.LENGTH_SHORT).show();
      return false;
    }
  }
);
  setupTranslucentBottomMargin(this,fab);
  setupTransparentTints(this);
  mBP=new BillingProcessor(this,""String_Node_Str"",this);
  processIntent(getIntent());
}","@Override protected void onCreate(Bundle savedInstanceState){
  mThemeUtils=new ThemeUtils(this);
  setTheme(mThemeUtils.getCurrent());
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_drawer);
  if (savedInstanceState != null) {
    if (savedInstanceState.containsKey(""String_Node_Str"")) {
      mFileCab=(BaseFileCab)savedInstanceState.getSerializable(""String_Node_Str"");
      shouldAttachFab=true;
    }
    fabPasteMode=(BaseFileCab.PasteMode)savedInstanceState.getSerializable(""String_Node_Str"");
    fabDisabled=savedInstanceState.getBoolean(""String_Node_Str"");
  }
  NavigationDrawerFragment mNavigationDrawerFragment=(NavigationDrawerFragment)getFragmentManager().findFragmentById(R.id.navigation_drawer);
  mNavigationDrawerFragment.setUp(R.id.navigation_drawer,(DrawerLayout)findViewById(R.id.drawer_layout),savedInstanceState == null);
  fab=(FloatingActionButton)findViewById(R.id.fab);
  fab.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (mFabListener != null)       mFabListener.onFabPressed(fabPasteMode);
    }
  }
);
  fab.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View view){
      Toast.makeText(DrawerActivity.this,fabPasteMode == BaseFileCab.PasteMode.ENABLED ? R.string.paste : R.string.newStr,Toast.LENGTH_SHORT).show();
      return false;
    }
  }
);
  setupTranslucentBottomMargin(this,fab);
  setupTransparentTints(this);
  mBP=new BillingProcessor(this,""String_Node_Str"",this);
  processIntent(getIntent(),savedInstanceState);
}"
60384,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  processIntent(intent);
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  processIntent(intent,null);
}"
60385,"public ClVariable getCenterY(){
  if (centerY == null) {
    centerY=new ClVariable();
    solver.addConstraint(new ClLinearEquation(centerY,new ClLinearExpression(getWidth()).divide(2).plus(getY()),ClStrength.required));
  }
  return centerY;
}","public ClVariable getCenterY(){
  if (centerY == null) {
    centerY=new ClVariable();
    solver.addConstraint(new ClLinearEquation(centerY,new ClLinearExpression(getHeight()).divide(2).plus(getY()),ClStrength.required));
  }
  return centerY;
}"
60386,"public TileData loadTile(MapTile tile){
  TileData tileData1=dataSource1.loadTile(tile);
  TileData tileData2=dataSource2.loadTile(tile);
  if (tileData1 == null) {
    return tileData2;
  }
  if (tileData2 == null) {
    return tileData1;
  }
  com.nutiteq.graphics.Bitmap tileBitmap1=new com.nutiteq.graphics.Bitmap(tileData1.getData(),false);
  com.nutiteq.graphics.Bitmap tileBitmap2=new com.nutiteq.graphics.Bitmap(tileData2.getData(),false);
  Bitmap bitmap1=BitmapUtils.createAndroidBitmapFromBitmap(tileBitmap1);
  Bitmap bitmap2=BitmapUtils.createAndroidBitmapFromBitmap(tileBitmap2);
  if (paint == null) {
    paint=new Paint(Paint.FILTER_BITMAP_FLAG);
  }
  Canvas canvas=new Canvas(bitmap1);
  canvas.drawBitmap(bitmap2,null,new Rect(0,0,bitmap1.getWidth(),bitmap1.getHeight()),paint);
  return new TileData(BitmapUtils.createBitmapFromAndroidBitmap(bitmap1).compressToInternal());
}","public TileData loadTile(MapTile tile){
  TileData tileData1=dataSource1.loadTile(tile);
  TileData tileData2=dataSource2.loadTile(tile);
  if (tileData1 == null) {
    return tileData2;
  }
  if (tileData2 == null) {
    return tileData1;
  }
  com.nutiteq.graphics.Bitmap tileBitmap1=com.nutiteq.graphics.Bitmap.createFromCompressed(tileData1.getData(),false);
  com.nutiteq.graphics.Bitmap tileBitmap2=com.nutiteq.graphics.Bitmap.createFromCompressed(tileData2.getData(),false);
  Bitmap bitmap1=BitmapUtils.createAndroidBitmapFromBitmap(tileBitmap1);
  Bitmap bitmap2=BitmapUtils.createAndroidBitmapFromBitmap(tileBitmap2);
  if (paint == null) {
    paint=new Paint(Paint.FILTER_BITMAP_FLAG);
  }
  Canvas canvas=new Canvas(bitmap1);
  canvas.drawBitmap(bitmap2,null,new Rect(0,0,bitmap1.getWidth(),bitmap1.getHeight()),paint);
  return new TileData(BitmapUtils.createBitmapFromAndroidBitmap(bitmap1).compressToInternal());
}"
60387,"private void updateBaseLayer(){
  String styleAssetName=vectorStyleName + ""String_Node_Str"";
  boolean styleBuildings3D=false;
  if (vectorStyleName.equals(""String_Node_Str"")) {
    styleAssetName=""String_Node_Str"";
    styleBuildings3D=true;
  }
  UnsignedCharVector styleBytes=AssetUtils.loadBytes(styleAssetName);
  if (styleBytes != null) {
    MBVectorTileStyleSet vectorTileStyleSet=new MBVectorTileStyleSet(styleBytes);
    vectorTileDecoder=new MBVectorTileDecoder(vectorTileStyleSet);
    vectorTileDecoder.setStyleParameter(""String_Node_Str"",vectorStyleLang);
    if (styleAssetName.equals(""String_Node_Str"")) {
      vectorTileDecoder.setStyleParameter(""String_Node_Str"",styleBuildings3D);
    }
    TileDataSource vectorTileDataSource=createTileDataSource();
    if (baseLayer != null) {
      mapView.getLayers().remove(baseLayer);
    }
    baseLayer=new VectorTileLayer(vectorTileDataSource,vectorTileDecoder);
    mapView.getLayers().insert(0,baseLayer);
  }
 else {
    Log.e(Const.LOG_TAG,""String_Node_Str"" + vectorStyleName);
  }
}","private void updateBaseLayer(){
  String styleAssetName=vectorStyleName + ""String_Node_Str"";
  boolean styleBuildings3D=false;
  if (vectorStyleName.equals(""String_Node_Str"")) {
    styleAssetName=""String_Node_Str"";
    styleBuildings3D=true;
  }
  UnsignedCharVector styleBytes=AssetUtils.loadBytes(styleAssetName);
  if (styleBytes != null) {
    MBVectorTileStyleSet vectorTileStyleSet=new MBVectorTileStyleSet(styleBytes);
    vectorTileDecoder=new MBVectorTileDecoder(vectorTileStyleSet);
    vectorTileDecoder.setStyleParameter(""String_Node_Str"",vectorStyleLang);
    if (styleAssetName.equals(""String_Node_Str"")) {
      vectorTileDecoder.setStyleParameter(""String_Node_Str"",styleBuildings3D);
    }
    if (vectorTileDataSource == null) {
      vectorTileDataSource=createTileDataSource();
    }
    if (baseLayer != null) {
      mapView.getLayers().remove(baseLayer);
    }
    baseLayer=new VectorTileLayer(vectorTileDataSource,vectorTileDecoder);
    mapView.getLayers().insert(0,baseLayer);
  }
 else {
    Log.e(Const.LOG_TAG,""String_Node_Str"" + vectorStyleName);
  }
}"
60388,"@Override public IRequestHandler onException(final RequestCycle cycle,final Exception e){
  LOG.error(""String_Node_Str"",e);
  PageParameters errorParameters=new PageParameters();
  IRequestablePage errorPage=null;
  if (instanceOf(e,UnauthorizedInstantiationException.class) != null) {
    errorParameters.add(""String_Node_Str"",MISSING_AUTHORIZATION);
    errorPage=new Login(errorParameters);
  }
 else   if (instanceOf(e,AccessControlException.class) != null) {
    if (instanceOf(e,AccessControlException.class).getMessage().contains(""String_Node_Str"")) {
      errorParameters.add(""String_Node_Str"",PAGE_EXPIRED);
    }
 else {
      errorParameters.add(""String_Node_Str"",MISSING_AUTHORIZATION_CORE);
    }
    errorPage=new Login(errorParameters);
  }
 else   if (instanceOf(e,PageExpiredException.class) != null || !SyncopeConsoleSession.get().isSignedIn()) {
    errorParameters.add(""String_Node_Str"",PAGE_EXPIRED);
    errorPage=new Login(errorParameters);
  }
 else   if (instanceOf(e,BadRequestException.class) != null || instanceOf(e,WebServiceException.class) != null || instanceOf(e,SyncopeClientException.class) != null) {
    errorParameters.add(""String_Node_Str"",REST);
    errorPage=new Login(errorParameters);
  }
 else {
    Throwable cause=instanceOf(e,ForbiddenException.class);
    if (cause == null) {
      errorPage=new ExceptionErrorPage(e,null);
    }
 else {
      errorParameters.add(""String_Node_Str"",cause.getMessage());
      errorPage=new Login(errorParameters);
    }
  }
  if (errorPage instanceof Login) {
    try {
      SyncopeConsoleSession.get().cleanup();
      SyncopeConsoleSession.get().invalidateNow();
    }
 catch (    Throwable t) {
      LOG.debug(""String_Node_Str"",t);
    }
  }
  return new RenderPageRequestHandler(new PageProvider(errorPage));
}","@Override public IRequestHandler onException(final RequestCycle cycle,final Exception e){
  LOG.error(""String_Node_Str"",e);
  PageParameters errorParameters=new PageParameters();
  IRequestablePage errorPage=null;
  if (instanceOf(e,UnauthorizedInstantiationException.class) != null) {
    errorParameters.add(""String_Node_Str"",MISSING_AUTHORIZATION);
    errorPage=new Login(errorParameters);
  }
 else   if (instanceOf(e,AccessControlException.class) != null) {
    if (instanceOf(e,AccessControlException.class).getMessage().contains(""String_Node_Str"")) {
      errorParameters.add(""String_Node_Str"",PAGE_EXPIRED);
    }
 else {
      errorParameters.add(""String_Node_Str"",MISSING_AUTHORIZATION_CORE);
    }
    errorPage=new Login(errorParameters);
  }
 else   if (instanceOf(e,PageExpiredException.class) != null || !SyncopeConsoleSession.get().isSignedIn()) {
    errorParameters.add(""String_Node_Str"",PAGE_EXPIRED);
    errorPage=new Login(errorParameters);
  }
 else   if (instanceOf(e,BadRequestException.class) != null || instanceOf(e,WebServiceException.class) != null || instanceOf(e,SyncopeClientException.class) != null) {
    errorParameters.add(""String_Node_Str"",REST);
    errorPage=new Login(errorParameters);
  }
 else {
    Throwable cause=instanceOf(e,ForbiddenException.class);
    if (cause == null) {
      errorPage=new ExceptionErrorPage(e,null);
    }
 else {
      errorParameters.add(""String_Node_Str"",cause.getMessage());
      errorPage=new Login(errorParameters);
    }
  }
  if (errorPage instanceof Login) {
    try {
      SyncopeConsoleSession.get().invalidate();
    }
 catch (    Throwable t) {
      LOG.debug(""String_Node_Str"",t);
    }
  }
  return new RenderPageRequestHandler(new PageProvider(errorPage));
}"
60389,"public Builder resource(final String resource){
switch (getInstance().getType()) {
case PROPAGATION:
case PULL:
case PUSH:
    getInstance().setResource(resource);
  return this;
default :
throw new IllegalArgumentException(""String_Node_Str"" + getInstance().getType());
}
}","public Builder resource(final String resource){
  getInstance().setResource(resource);
  return this;
}"
60390,"public Builder entityKey(final String entityKey){
switch (getInstance().getType()) {
case PROPAGATION:
case NOTIFICATION:
    getInstance().setEntityKey(entityKey);
  return this;
default :
throw new IllegalArgumentException(""String_Node_Str"" + getInstance().getType());
}
}","public Builder entityKey(final String entityKey){
  getInstance().setEntityKey(entityKey);
  return this;
}"
60391,"public Builder anyTypeKind(final AnyTypeKind anyTypeKind){
switch (getInstance().getType()) {
case PROPAGATION:
case NOTIFICATION:
    getInstance().setAnyTypeKind(anyTypeKind);
  return this;
default :
throw new IllegalArgumentException(""String_Node_Str"" + getInstance().getType());
}
}","public Builder anyTypeKind(final AnyTypeKind anyTypeKind){
  getInstance().setAnyTypeKind(anyTypeKind);
  return this;
}"
60392,"public Builder notification(final String notification){
switch (getInstance().getType()) {
case NOTIFICATION:
    getInstance().setNotification(notification);
  return this;
default :
throw new IllegalArgumentException(""String_Node_Str"" + getInstance().getType());
}
}","public Builder notification(final String notification){
  getInstance().setNotification(notification);
  return this;
}"
60393,"/** 
 * Invalidates the access token of the requesting user.
 * @return an empty response if operation was successful
 */
@ApiOperation(value=""String_Node_Str"",authorizations={@Authorization(value=""String_Node_Str"")}) @POST @Path(""String_Node_Str"") Response logout();","/** 
 * Invalidates the access token of the requesting user.
 * @return an empty response if operation was successful
 */
@ApiOperation(value=""String_Node_Str"",authorizations={@Authorization(value=""String_Node_Str"")}) @POST @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response logout();"
60394,"/** 
 * Returns an empty response bearing the X-Syncope-Token header value, with extended lifetime. The provided value is a signed JSON Web Token.
 * @return an empty response bearing the X-Syncope-Token header value, with extended lifetime
 */
@ApiOperation(value=""String_Node_Str"",authorizations={@Authorization(value=""String_Node_Str"")}) @POST @Path(""String_Node_Str"") Response refresh();","/** 
 * Returns an empty response bearing the X-Syncope-Token header value, with extended lifetime. The provided value is a signed JSON Web Token.
 * @return an empty response bearing the X-Syncope-Token header value, with extended lifetime
 */
@ApiOperation(value=""String_Node_Str"",authorizations={@Authorization(value=""String_Node_Str"")}) @POST @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response refresh();"
60395,"/** 
 * Returns an empty response bearing the X-Syncope-Token header value, in case of successful authentication. The provided value is a signed JSON Web Token.
 * @return empty response bearing the X-Syncope-Token header value, in case of successful authentication
 */
@ApiOperation(value=""String_Node_Str"",authorizations={@Authorization(value=""String_Node_Str"")}) @POST @Path(""String_Node_Str"") Response login();","/** 
 * Returns an empty response bearing the X-Syncope-Token header value, in case of successful authentication. The provided value is a signed JSON Web Token.
 * @return empty response bearing the X-Syncope-Token header value, in case of successful authentication
 */
@ApiOperation(value=""String_Node_Str"",authorizations={@Authorization(value=""String_Node_Str"")}) @POST @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response login();"
60396,"/** 
 * Returns a paged list of existing access tokens matching the given query.
 * @param query query conditions
 * @return paged list of existing access tokens matching the given query
 */
@ApiOperation(value=""String_Node_Str"",authorizations={@Authorization(value=""String_Node_Str""),@Authorization(value=""String_Node_Str"")}) @GET PagedResult<AccessTokenTO> list(@BeanParam AccessTokenQuery query);","/** 
 * Returns a paged list of existing access tokens matching the given query.
 * @param query query conditions
 * @return paged list of existing access tokens matching the given query
 */
@ApiOperation(value=""String_Node_Str"",authorizations={@Authorization(value=""String_Node_Str""),@Authorization(value=""String_Node_Str"")}) @GET @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) PagedResult<AccessTokenTO> list(@BeanParam AccessTokenQuery query);"
60397,"/** 
 * Invalidates the access token matching the provided key.
 * @param key access token key
 * @return an empty response if operation was successful
 */
@ApiOperation(value=""String_Node_Str"",authorizations={@Authorization(value=""String_Node_Str""),@Authorization(value=""String_Node_Str"")}) @DELETE @Path(""String_Node_Str"") Response delete(@PathParam(""String_Node_Str"") String key);","/** 
 * Invalidates the access token matching the provided key.
 * @param key access token key
 * @return an empty response if operation was successful
 */
@ApiOperation(value=""String_Node_Str"",authorizations={@Authorization(value=""String_Node_Str""),@Authorization(value=""String_Node_Str"")}) @DELETE @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response delete(@PathParam(""String_Node_Str"") String key);"
60398,"/** 
 * Deletes any object matching provided key.
 * @param key any object key or name
 * @return Response object featuring the deleted any object enriched with propagation status information- ProvisioningResult as Entity
 */
@DELETE @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response delete(@NotNull @PathParam(""String_Node_Str"") String key);","/** 
 * Deletes any object matching provided key.
 * @param key any object key or name
 * @return Response object featuring the deleted any object enriched with propagation status information- ProvisioningResult as Entity
 */
@DELETE @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response delete(@NotNull @PathParam(""String_Node_Str"") String key);"
60399,"/** 
 * Creates a new anyTypeClass.
 * @param anyTypeClassTO anyTypeClass to be created
 * @return Response object featuring Location header of created anyTypeClass
 */
@POST @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response create(@NotNull AnyTypeClassTO anyTypeClassTO);","/** 
 * Creates a new anyTypeClass.
 * @param anyTypeClassTO anyTypeClass to be created
 * @return Response object featuring Location header of created anyTypeClass
 */
@POST @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response create(@NotNull AnyTypeClassTO anyTypeClassTO);"
60400,"/** 
 * Updates the anyTypeClass matching the provided key.
 * @param anyTypeClassTO anyTypeClass to be stored
 * @return an empty response if operation was successful
 */
@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response update(@NotNull AnyTypeClassTO anyTypeClassTO);","/** 
 * Updates the anyTypeClass matching the provided key.
 * @param anyTypeClassTO anyTypeClass to be stored
 * @return an empty response if operation was successful
 */
@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response update(@NotNull AnyTypeClassTO anyTypeClassTO);"
60401,"/** 
 * Deletes the anyTypeClass matching the provided key.
 * @param key anyTypeClass key to be deleted
 * @return an empty response if operation was successful
 */
@DELETE @Path(""String_Node_Str"") Response delete(@NotNull @PathParam(""String_Node_Str"") String key);","/** 
 * Deletes the anyTypeClass matching the provided key.
 * @param key anyTypeClass key to be deleted
 * @return an empty response if operation was successful
 */
@DELETE @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response delete(@NotNull @PathParam(""String_Node_Str"") String key);"
60402,"/** 
 * Deletes the anyType matching the provided key.
 * @param key anyType key to be deleted
 * @return an empty response if operation was successful
 */
@DELETE @Path(""String_Node_Str"") Response delete(@NotNull @PathParam(""String_Node_Str"") String key);","/** 
 * Deletes the anyType matching the provided key.
 * @param key anyType key to be deleted
 * @return an empty response if operation was successful
 */
@DELETE @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response delete(@NotNull @PathParam(""String_Node_Str"") String key);"
60403,"/** 
 * Creates / updates the configuration parameter with the given schema.
 * @param value parameter value
 * @return an empty response if operation was successful
 */
@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response set(@NotNull AttrTO value);","/** 
 * Creates / updates the configuration parameter with the given schema.
 * @param value parameter value
 * @return an empty response if operation was successful
 */
@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response set(@NotNull AttrTO value);"
60404,"/** 
 * Deletes the configuration parameter with matching schema.
 * @param schema configuration parameter schema
 * @return an empty response if operation was successful
 */
@DELETE @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response delete(@NotNull @PathParam(""String_Node_Str"") String schema);","/** 
 * Deletes the configuration parameter with matching schema.
 * @param schema configuration parameter schema
 * @return an empty response if operation was successful
 */
@DELETE @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response delete(@NotNull @PathParam(""String_Node_Str"") String schema);"
60405,"/** 
 * Restores the connector configuration history instance matching the provided key.
 * @param key connector configuration history instance key to be restored
 * @return an empty response if operation was successful
 */
@POST @Path(""String_Node_Str"") Response restore(@NotNull @PathParam(""String_Node_Str"") String key);","/** 
 * Restores the connector configuration history instance matching the provided key.
 * @param key connector configuration history instance key to be restored
 * @return an empty response if operation was successful
 */
@POST @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response restore(@NotNull @PathParam(""String_Node_Str"") String key);"
60406,"/** 
 * Deletes the connector configuration history instance matching the provided key.
 * @param key connector configuration history instance key to be deleted
 * @return an empty response if operation was successful
 */
@DELETE @Path(""String_Node_Str"") Response delete(@NotNull @PathParam(""String_Node_Str"") String key);","/** 
 * Deletes the connector configuration history instance matching the provided key.
 * @param key connector configuration history instance key to be deleted
 * @return an empty response if operation was successful
 */
@DELETE @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response delete(@NotNull @PathParam(""String_Node_Str"") String key);"
60407,"/** 
 * Reload all connector bundles and instances.
 * @return an empty response if operation was successful
 */
@POST @Path(""String_Node_Str"") Response reload();","/** 
 * Reload all connector bundles and instances.
 * @return an empty response if operation was successful
 */
@POST @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response reload();"
60408,"/** 
 * Creates a new connector instance.
 * @param connInstanceTO connector instance to be created
 * @return Response object featuring Location header of created connector instance
 */
@POST @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response create(@NotNull ConnInstanceTO connInstanceTO);","/** 
 * Creates a new connector instance.
 * @param connInstanceTO connector instance to be created
 * @return Response object featuring Location header of created connector instance
 */
@POST @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response create(@NotNull ConnInstanceTO connInstanceTO);"
60409,"/** 
 * Updates the connector instance matching the provided key.
 * @param connInstanceTO connector instance to be stored
 * @return an empty response if operation was successful
 */
@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response update(@NotNull ConnInstanceTO connInstanceTO);","/** 
 * Updates the connector instance matching the provided key.
 * @param connInstanceTO connector instance to be stored
 * @return an empty response if operation was successful
 */
@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response update(@NotNull ConnInstanceTO connInstanceTO);"
60410,"/** 
 * Checks whether the connection to resource could be established.
 * @param connInstanceTO connector instance to be used for connection check
 * @return an empty response if operation was successful
 */
@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response check(@NotNull ConnInstanceTO connInstanceTO);","/** 
 * Checks whether the connection to resource could be established.
 * @param connInstanceTO connector instance to be used for connection check
 * @return an empty response if operation was successful
 */
@POST @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response check(@NotNull ConnInstanceTO connInstanceTO);"
60411,"/** 
 * Deletes the connector instance matching the provided key.
 * @param key connector instance key to be deleted
 * @return an empty response if operation was successful
 */
@DELETE @Path(""String_Node_Str"") Response delete(@NotNull @PathParam(""String_Node_Str"") String key);","/** 
 * Deletes the connector instance matching the provided key.
 * @param key connector instance key to be deleted
 * @return an empty response if operation was successful
 */
@DELETE @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response delete(@NotNull @PathParam(""String_Node_Str"") String key);"
60412,"/** 
 * Creates a new domain.
 * @param domainTO domain to be created
 * @return Response object featuring Location header of created domain
 */
@POST @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response create(@NotNull DomainTO domainTO);","/** 
 * Creates a new domain.
 * @param domainTO domain to be created
 * @return Response object featuring Location header of created domain
 */
@POST @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response create(@NotNull DomainTO domainTO);"
60413,"/** 
 * Updates the domain matching the provided key.
 * @param domainTO domain to be stored
 * @return an empty response if operation was successful
 */
@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response update(@NotNull DomainTO domainTO);","/** 
 * Updates the domain matching the provided key.
 * @param domainTO domain to be stored
 * @return an empty response if operation was successful
 */
@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response update(@NotNull DomainTO domainTO);"
60414,"/** 
 * Deletes the domain matching the provided key.
 * @param key domain key to be deleted
 * @return an empty response if operation was successful
 */
@DELETE @Path(""String_Node_Str"") Response delete(@NotNull @PathParam(""String_Node_Str"") String key);","/** 
 * Deletes the domain matching the provided key.
 * @param key domain key to be deleted
 * @return an empty response if operation was successful
 */
@DELETE @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response delete(@NotNull @PathParam(""String_Node_Str"") String key);"
60415,"/** 
 * Creates a new dynamic realm.
 * @param dynDynRealmTO dynamic realm to be created
 * @return Response object featuring Location header of created dynamic realm
 */
@POST @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response create(@NotNull DynRealmTO dynDynRealmTO);","/** 
 * Creates a new dynamic realm.
 * @param dynDynRealmTO dynamic realm to be created
 * @return Response object featuring Location header of created dynamic realm
 */
@POST @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response create(@NotNull DynRealmTO dynDynRealmTO);"
60416,"/** 
 * Updates the dynamic realm matching the provided key.
 * @param dynDynRealmTO dynamic realm to be stored
 * @return an empty response if operation was successful
 */
@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response update(@NotNull DynRealmTO dynDynRealmTO);","/** 
 * Updates the dynamic realm matching the provided key.
 * @param dynDynRealmTO dynamic realm to be stored
 * @return an empty response if operation was successful
 */
@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response update(@NotNull DynRealmTO dynDynRealmTO);"
60417,"/** 
 * Deletes the dynamic realm matching the provided key.
 * @param key dynamic realm key to be deleted
 * @return an empty response if operation was successful
 */
@DELETE @Path(""String_Node_Str"") Response delete(@NotNull @PathParam(""String_Node_Str"") String key);","/** 
 * Deletes the dynamic realm matching the provided key.
 * @param key dynamic realm key to be deleted
 * @return an empty response if operation was successful
 */
@DELETE @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response delete(@NotNull @PathParam(""String_Node_Str"") String key);"
60418,"/** 
 * Deletes the executable execution matching the provided key.
 * @param executionKey key of executable execution to be deleted
 * @return an empty response if operation was successful
 */
@DELETE @Path(""String_Node_Str"") Response deleteExecution(@NotNull @PathParam(""String_Node_Str"") String executionKey);","/** 
 * Deletes the executable execution matching the provided key.
 * @param executionKey key of executable execution to be deleted
 * @return an empty response if operation was successful
 */
@DELETE @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response deleteExecution(@NotNull @PathParam(""String_Node_Str"") String executionKey);"
60419,"/** 
 * Deletes the executions belonging matching the given query.
 * @param query query conditions
 * @return bulk action result
 */
@DELETE @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) BulkActionResult deleteExecutions(@BeanParam BulkExecDeleteQuery query);","/** 
 * Deletes the executions belonging matching the given query.
 * @param query query conditions
 * @return bulk action result
 */
@DELETE @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) BulkActionResult deleteExecutions(@BeanParam BulkExecDeleteQuery query);"
60420,"/** 
 * (De)provision all members of the given group from / onto all the resources associated to it.
 * @param key group key
 * @param actionType action type to perform on all group members
 * @return execution report for the task generated on purpose
 */
@POST @Path(""String_Node_Str"") ExecTO bulkMembersAction(@NotNull @PathParam(""String_Node_Str"") String key,@NotNull @PathParam(""String_Node_Str"") BulkMembersActionType actionType);","/** 
 * (De)provision all members of the given group from / onto all the resources associated to it.
 * @param key group key
 * @param actionType action type to perform on all group members
 * @return execution report for the task generated on purpose
 */
@POST @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) ExecTO bulkMembersAction(@NotNull @PathParam(""String_Node_Str"") String key,@NotNull @PathParam(""String_Node_Str"") BulkMembersActionType actionType);"
60421,"/** 
 * Creates or updates (if existing) the logger with matching name.
 * @param type LoggerType to be selected
 * @param logger Logger to be created or updated
 * @return an empty response if operation was successful
 */
@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response update(@NotNull @PathParam(""String_Node_Str"") LoggerType type,@NotNull LoggerTO logger);","/** 
 * Creates or updates (if existing) the logger with matching name.
 * @param type LoggerType to be selected
 * @param logger Logger to be created or updated
 * @return an empty response if operation was successful
 */
@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response update(@NotNull @PathParam(""String_Node_Str"") LoggerType type,@NotNull LoggerTO logger);"
60422,"/** 
 * Deletes the logger with matching name.
 * @param type LoggerType to be selected
 * @param name Logger name to be deleted
 * @return an empty response if operation was successful
 */
@DELETE @Path(""String_Node_Str"") Response delete(@NotNull @PathParam(""String_Node_Str"") LoggerType type,@NotNull @PathParam(""String_Node_Str"") String name);","/** 
 * Deletes the logger with matching name.
 * @param type LoggerType to be selected
 * @param name Logger name to be deleted
 * @return an empty response if operation was successful
 */
@DELETE @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response delete(@NotNull @PathParam(""String_Node_Str"") LoggerType type,@NotNull @PathParam(""String_Node_Str"") String name);"
60423,"/** 
 * Sets the template for the given key and format, if available.
 * @param key mail template
 * @param format template format
 * @param templateIn template to be set
 * @return an empty response if operation was successful
 */
@PUT @Path(""String_Node_Str"") Response setFormat(@NotNull @PathParam(""String_Node_Str"") String key,@NotNull @PathParam(""String_Node_Str"") MailTemplateFormat format,InputStream templateIn);","/** 
 * Sets the template for the given key and format, if available.
 * @param key mail template
 * @param format template format
 * @param templateIn template to be set
 * @return an empty response if operation was successful
 */
@PUT @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response setFormat(@NotNull @PathParam(""String_Node_Str"") String key,@NotNull @PathParam(""String_Node_Str"") MailTemplateFormat format,InputStream templateIn);"
60424,"/** 
 * Removes the template for the given key and format, if available.
 * @param key mail template
 * @param format template format
 * @return an empty response if operation was successful
 */
@DELETE @Path(""String_Node_Str"") Response removeFormat(@NotNull @PathParam(""String_Node_Str"") String key,@NotNull @PathParam(""String_Node_Str"") MailTemplateFormat format);","/** 
 * Removes the template for the given key and format, if available.
 * @param key mail template
 * @param format template format
 * @return an empty response if operation was successful
 */
@DELETE @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response removeFormat(@NotNull @PathParam(""String_Node_Str"") String key,@NotNull @PathParam(""String_Node_Str"") MailTemplateFormat format);"
60425,"/** 
 * Creates a new mail template.
 * @param mailTemplateTO Creates a new mail template.
 * @return Response object featuring Location header of created mail template
 */
@POST @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response create(@NotNull MailTemplateTO mailTemplateTO);","/** 
 * Creates a new mail template.
 * @param mailTemplateTO Creates a new mail template.
 * @return Response object featuring Location header of created mail template
 */
@POST @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response create(@NotNull MailTemplateTO mailTemplateTO);"
60426,"/** 
 * Deletes the mail template matching the given key.
 * @param key key for mail template to be deleted
 * @return an empty response if operation was successful
 */
@DELETE @Path(""String_Node_Str"") Response delete(@NotNull @PathParam(""String_Node_Str"") String key);","/** 
 * Deletes the mail template matching the given key.
 * @param key key for mail template to be deleted
 * @return an empty response if operation was successful
 */
@DELETE @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) Response delete(@NotNull @PathParam(""String_Node_Str"") String key);"
60427,"@Override public long size(){
  return restClient.count(TaskType.NOTIFICATION);
}","@Override public long size(){
  return restClient.listNotificationTasks(notification,anyTypeKind,entityKey,1,-1,getSort()).size();
}"
60428,"private void claimForm(final String taskId){
  try {
    restClient.claimForm(taskId);
    SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));
  }
 catch (  SyncopeClientException scee) {
    SyncopeConsoleSession.get().error(getString(Constants.ERROR) + ""String_Node_Str"" + scee.getMessage());
  }
}","private void claimForm(final String taskId){
  try {
    restClient.claimForm(taskId);
  }
 catch (  SyncopeClientException scee) {
    SyncopeConsoleSession.get().error(getString(Constants.ERROR) + ""String_Node_Str"" + scee.getMessage());
  }
}"
60429,"@Override public void onClick(final AjaxRequestTarget target,final WorkflowFormTO ignore){
  final IModel<WorkflowFormTO> formModel=new CompoundPropertyModel<>(model.getObject());
  modal.setFormModel(formModel);
  final WorkflowFormTO formTO=formModel.getObject();
  final UserTO newUserTO;
  final UserTO previousUserTO;
  if (formTO.getUserPatch() == null) {
    newUserTO=formTO.getUserTO();
    previousUserTO=null;
  }
 else   if (formTO.getUserTO() == null) {
    previousUserTO=new UserTO();
    previousUserTO.setKey(formTO.getUserPatch().getKey());
    newUserTO=AnyOperations.patch(previousUserTO,formTO.getUserPatch());
  }
 else {
    formTO.getUserTO().setKey(formTO.getUserPatch().getKey());
    newUserTO=AnyOperations.patch(formTO.getUserTO(),formTO.getUserPatch());
    previousUserTO=formTO.getUserTO();
  }
  AjaxWizard.EditItemActionEvent<UserTO> editItemActionEvent=new AjaxWizard.EditItemActionEvent<>(newUserTO,target);
  editItemActionEvent.forceModalPanel(new ApprovalUserWizardBuilder(target,formModel.getObject(),previousUserTO,newUserTO,new AnyTypeRestClient().read(AnyTypeKind.USER.name()).getClasses(),FormLayoutInfoUtils.fetch(Collections.singletonList(AnyTypeKind.USER.name())).getLeft(),pageRef).build(BaseModal.CONTENT_ID,AjaxWizard.Mode.EDIT));
  send(ApprovalDirectoryPanel.this,Broadcast.EXACT,editItemActionEvent);
}","@Override public void onClick(final AjaxRequestTarget target,final WorkflowFormTO ignore){
  final IModel<WorkflowFormTO> formModel=new CompoundPropertyModel<>(model.getObject());
  modal.setFormModel(formModel);
  final WorkflowFormTO formTO=formModel.getObject();
  final UserTO newUserTO;
  final UserTO previousUserTO;
  if (formTO.getUserPatch() == null) {
    newUserTO=formTO.getUserTO();
    previousUserTO=null;
  }
 else   if (formTO.getUserTO() == null) {
    previousUserTO=new UserTO();
    previousUserTO.setKey(formTO.getUserPatch().getKey());
    newUserTO=AnyOperations.patch(previousUserTO,formTO.getUserPatch());
  }
 else {
    formTO.getUserTO().setKey(formTO.getUserPatch().getKey());
    newUserTO=AnyOperations.patch(formTO.getUserTO(),formTO.getUserPatch());
    previousUserTO=formTO.getUserTO();
  }
  AjaxWizard.EditItemActionEvent<UserTO> editItemActionEvent=new AjaxWizard.EditItemActionEvent<>(newUserTO,target);
  editItemActionEvent.forceModalPanel(new ApprovalUserWizardBuilder(formModel.getObject(),previousUserTO,newUserTO,new AnyTypeRestClient().read(AnyTypeKind.USER.name()).getClasses(),FormLayoutInfoUtils.fetch(Collections.singletonList(AnyTypeKind.USER.name())).getLeft(),pageRef).build(BaseModal.CONTENT_ID,AjaxWizard.Mode.EDIT));
  send(ApprovalDirectoryPanel.this,Broadcast.EXACT,editItemActionEvent);
}"
60430,"@Override protected Serializable onApplyInternal(final AnyWrapper<UserTO> modelObject){
  UserTO inner=modelObject.getInnerObject();
  ProvisioningResult<UserTO> actual;
  if (formTO.getUserPatch() == null) {
    actual=new ProvisioningResult<>();
    UserTO user=new UserWorkflowRestClient().executeTask(""String_Node_Str"",inner);
    actual.setEntity(user);
    claimForm(restClient.getFormForUser(actual.getEntity().getKey()).getTaskId());
    ((BasePage)pageRef.getPage()).getNotificationPanel().refresh(target);
  }
 else {
    UserPatch patch=AnyOperations.diff(inner,formTO.getUserTO(),false);
    if (StringUtils.isNotBlank(inner.getPassword())) {
      PasswordPatch passwordPatch=new PasswordPatch.Builder().value(inner.getPassword()).onSyncope(true).resources(inner.getResources()).build();
      patch.setPassword(passwordPatch);
    }
    if (patch.isEmpty()) {
      actual=new ProvisioningResult<>();
      actual.setEntity(inner);
    }
 else {
      actual=userRestClient.update(getOriginalItem().getInnerObject().getETagValue(),patch);
      claimForm(restClient.getFormForUser(actual.getEntity().getKey()).getTaskId());
      ((BasePage)pageRef.getPage()).getNotificationPanel().refresh(target);
    }
  }
  return actual;
}","@Override protected Serializable onApplyInternal(final AnyWrapper<UserTO> modelObject){
  UserTO inner=modelObject.getInnerObject();
  ProvisioningResult<UserTO> actual;
  if (formTO.getUserPatch() == null) {
    actual=new ProvisioningResult<>();
    UserTO user=new UserWorkflowRestClient().executeTask(""String_Node_Str"",inner);
    actual.setEntity(user);
    claimForm(restClient.getFormForUser(actual.getEntity().getKey()).getTaskId());
  }
 else {
    UserPatch patch=AnyOperations.diff(inner,formTO.getUserTO(),false);
    if (StringUtils.isNotBlank(inner.getPassword())) {
      PasswordPatch passwordPatch=new PasswordPatch.Builder().value(inner.getPassword()).onSyncope(true).resources(inner.getResources()).build();
      patch.setPassword(passwordPatch);
    }
    if (patch.isEmpty()) {
      actual=new ProvisioningResult<>();
      actual.setEntity(inner);
    }
 else {
      actual=userRestClient.update(getOriginalItem().getInnerObject().getETagValue(),patch);
      claimForm(restClient.getFormForUser(actual.getEntity().getKey()).getTaskId());
    }
  }
  return actual;
}"
60431,"@Override public ActionsPanel<WorkflowFormTO> getActions(final IModel<WorkflowFormTO> model){
  final ActionsPanel<WorkflowFormTO> panel=super.getActions(model);
  panel.add(new ActionLink<WorkflowFormTO>(){
    private static final long serialVersionUID=-3722207913631435501L;
    @Override public void onClick(    final AjaxRequestTarget target,    final WorkflowFormTO ignore){
      claimForm(model.getObject().getTaskId());
      ((BasePage)pageRef.getPage()).getNotificationPanel().refresh(target);
      target.add(container);
    }
  }
,ActionLink.ActionType.CLAIM,StandardEntitlement.WORKFLOW_FORM_CLAIM);
  panel.add(new ActionLink<WorkflowFormTO>(){
    private static final long serialVersionUID=-3722207913631435501L;
    @Override public void onClick(    final AjaxRequestTarget target,    final WorkflowFormTO ignore){
      final IModel<WorkflowFormTO> formModel=new CompoundPropertyModel<>(model.getObject());
      manageApprovalModal.setFormModel(formModel);
      target.add(manageApprovalModal.setContent(new ApprovalModal(manageApprovalModal,pageRef,model.getObject()){
        private static final long serialVersionUID=5546519445061007248L;
        @Override public void onSubmit(        final AjaxRequestTarget target,        final Form<?> form){
          try {
            super.onSubmit(target,form);
            ApprovalDirectoryPanel.this.getTogglePanel().close(target);
          }
 catch (          SyncopeClientException e) {
            SyncopeConsoleSession.get().error(getString(Constants.ERROR) + ""String_Node_Str"" + e.getMessage());
          }
          ((BasePage)pageRef.getPage()).getNotificationPanel().refresh(target);
        }
      }
));
      manageApprovalModal.header(new Model<>(getString(""String_Node_Str"",new Model<>(model.getObject()))));
      manageApprovalModal.show(true);
    }
    @Override protected boolean statusCondition(    final WorkflowFormTO modelObject){
      return SyncopeConsoleSession.get().getSelfTO().getUsername().equals(model.getObject().getOwner());
    }
  }
,ActionLink.ActionType.MANAGE_APPROVAL,StandardEntitlement.WORKFLOW_FORM_READ);
  panel.add(new ActionLink<WorkflowFormTO>(){
    private static final long serialVersionUID=-3722207913631435501L;
    @Override public void onClick(    final AjaxRequestTarget target,    final WorkflowFormTO ignore){
      final IModel<WorkflowFormTO> formModel=new CompoundPropertyModel<>(model.getObject());
      modal.setFormModel(formModel);
      final WorkflowFormTO formTO=formModel.getObject();
      final UserTO newUserTO;
      final UserTO previousUserTO;
      if (formTO.getUserPatch() == null) {
        newUserTO=formTO.getUserTO();
        previousUserTO=null;
      }
 else       if (formTO.getUserTO() == null) {
        previousUserTO=new UserTO();
        previousUserTO.setKey(formTO.getUserPatch().getKey());
        newUserTO=AnyOperations.patch(previousUserTO,formTO.getUserPatch());
      }
 else {
        formTO.getUserTO().setKey(formTO.getUserPatch().getKey());
        newUserTO=AnyOperations.patch(formTO.getUserTO(),formTO.getUserPatch());
        previousUserTO=formTO.getUserTO();
      }
      AjaxWizard.EditItemActionEvent<UserTO> editItemActionEvent=new AjaxWizard.EditItemActionEvent<>(newUserTO,target);
      editItemActionEvent.forceModalPanel(new ApprovalUserWizardBuilder(target,formModel.getObject(),previousUserTO,newUserTO,new AnyTypeRestClient().read(AnyTypeKind.USER.name()).getClasses(),FormLayoutInfoUtils.fetch(Collections.singletonList(AnyTypeKind.USER.name())).getLeft(),pageRef).build(BaseModal.CONTENT_ID,AjaxWizard.Mode.EDIT));
      send(ApprovalDirectoryPanel.this,Broadcast.EXACT,editItemActionEvent);
    }
    @Override protected boolean statusCondition(    final WorkflowFormTO modelObject){
      return SyncopeConsoleSession.get().getSelfTO().getUsername().equals(model.getObject().getOwner());
    }
  }
,ActionLink.ActionType.EDIT_APPROVAL,StandardEntitlement.WORKFLOW_FORM_SUBMIT);
  return panel;
}","@Override public ActionsPanel<WorkflowFormTO> getActions(final IModel<WorkflowFormTO> model){
  final ActionsPanel<WorkflowFormTO> panel=super.getActions(model);
  panel.add(new ActionLink<WorkflowFormTO>(){
    private static final long serialVersionUID=-3722207913631435501L;
    @Override public void onClick(    final AjaxRequestTarget target,    final WorkflowFormTO ignore){
      claimForm(model.getObject().getTaskId());
      SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));
      ((BasePage)pageRef.getPage()).getNotificationPanel().refresh(target);
      target.add(container);
    }
  }
,ActionLink.ActionType.CLAIM,StandardEntitlement.WORKFLOW_FORM_CLAIM);
  panel.add(new ActionLink<WorkflowFormTO>(){
    private static final long serialVersionUID=-3722207913631435501L;
    @Override public void onClick(    final AjaxRequestTarget target,    final WorkflowFormTO ignore){
      final IModel<WorkflowFormTO> formModel=new CompoundPropertyModel<>(model.getObject());
      manageApprovalModal.setFormModel(formModel);
      target.add(manageApprovalModal.setContent(new ApprovalModal(manageApprovalModal,pageRef,model.getObject()){
        private static final long serialVersionUID=5546519445061007248L;
        @Override public void onSubmit(        final AjaxRequestTarget target,        final Form<?> form){
          try {
            super.onSubmit(target,form);
            ApprovalDirectoryPanel.this.getTogglePanel().close(target);
          }
 catch (          SyncopeClientException e) {
            SyncopeConsoleSession.get().error(getString(Constants.ERROR) + ""String_Node_Str"" + e.getMessage());
          }
          ((BasePage)pageRef.getPage()).getNotificationPanel().refresh(target);
        }
      }
));
      manageApprovalModal.header(new Model<>(getString(""String_Node_Str"",new Model<>(model.getObject()))));
      manageApprovalModal.show(true);
    }
    @Override protected boolean statusCondition(    final WorkflowFormTO modelObject){
      return SyncopeConsoleSession.get().getSelfTO().getUsername().equals(model.getObject().getOwner());
    }
  }
,ActionLink.ActionType.MANAGE_APPROVAL,StandardEntitlement.WORKFLOW_FORM_READ);
  panel.add(new ActionLink<WorkflowFormTO>(){
    private static final long serialVersionUID=-3722207913631435501L;
    @Override public void onClick(    final AjaxRequestTarget target,    final WorkflowFormTO ignore){
      final IModel<WorkflowFormTO> formModel=new CompoundPropertyModel<>(model.getObject());
      modal.setFormModel(formModel);
      final WorkflowFormTO formTO=formModel.getObject();
      final UserTO newUserTO;
      final UserTO previousUserTO;
      if (formTO.getUserPatch() == null) {
        newUserTO=formTO.getUserTO();
        previousUserTO=null;
      }
 else       if (formTO.getUserTO() == null) {
        previousUserTO=new UserTO();
        previousUserTO.setKey(formTO.getUserPatch().getKey());
        newUserTO=AnyOperations.patch(previousUserTO,formTO.getUserPatch());
      }
 else {
        formTO.getUserTO().setKey(formTO.getUserPatch().getKey());
        newUserTO=AnyOperations.patch(formTO.getUserTO(),formTO.getUserPatch());
        previousUserTO=formTO.getUserTO();
      }
      AjaxWizard.EditItemActionEvent<UserTO> editItemActionEvent=new AjaxWizard.EditItemActionEvent<>(newUserTO,target);
      editItemActionEvent.forceModalPanel(new ApprovalUserWizardBuilder(formModel.getObject(),previousUserTO,newUserTO,new AnyTypeRestClient().read(AnyTypeKind.USER.name()).getClasses(),FormLayoutInfoUtils.fetch(Collections.singletonList(AnyTypeKind.USER.name())).getLeft(),pageRef).build(BaseModal.CONTENT_ID,AjaxWizard.Mode.EDIT));
      send(ApprovalDirectoryPanel.this,Broadcast.EXACT,editItemActionEvent);
    }
    @Override protected boolean statusCondition(    final WorkflowFormTO modelObject){
      return SyncopeConsoleSession.get().getSelfTO().getUsername().equals(model.getObject().getOwner());
    }
  }
,ActionLink.ActionType.EDIT_APPROVAL,StandardEntitlement.WORKFLOW_FORM_SUBMIT);
  return panel;
}"
60432,"ApprovalUserWizardBuilder(final AjaxRequestTarget target,final WorkflowFormTO formTO,final UserTO previousUserTO,final UserTO userTO,final List<String> anyTypeClasses,final UserFormLayoutInfo formLayoutInfo,final PageReference pageRef){
  super(previousUserTO,userTO,anyTypeClasses,formLayoutInfo,pageRef);
  this.formTO=formTO;
  this.target=target;
}","ApprovalUserWizardBuilder(final WorkflowFormTO formTO,final UserTO previousUserTO,final UserTO userTO,final List<String> anyTypeClasses,final UserFormLayoutInfo formLayoutInfo,final PageReference pageRef){
  super(previousUserTO,userTO,anyTypeClasses,formLayoutInfo,pageRef);
  this.formTO=formTO;
}"
60433,"@Transactional @Override public void refreshDynMemberships(final Any<?> any){
  findAll().forEach(dynRealm -> {
    Optional<? extends DynRealmMembership> memb=dynRealm.getDynMembership(any.getType());
    if (memb.isPresent()) {
      Query delete=entityManager().createNativeQuery(""String_Node_Str"" + DYNMEMB_TABLE + ""String_Node_Str"");
      delete.setParameter(1,dynRealm.getKey());
      delete.setParameter(2,any.getKey());
      delete.executeUpdate();
      if (searchDAO().matches(any,SearchCondConverter.convert(memb.get().getFIQLCond()))) {
        Query insert=entityManager().createNativeQuery(""String_Node_Str"" + DYNMEMB_TABLE + ""String_Node_Str"");
        insert.setParameter(1,any.getKey());
        insert.setParameter(2,dynRealm.getKey());
        insert.executeUpdate();
      }
    }
  }
);
}","@Transactional @Override public void refreshDynMemberships(final Any<?> any){
  findAll().forEach(dynRealm -> {
    Optional<? extends DynRealmMembership> memb=dynRealm.getDynMembership(any.getType());
    if (memb.isPresent()) {
      Query delete=entityManager().createNativeQuery(""String_Node_Str"" + DYNMEMB_TABLE + ""String_Node_Str"");
      delete.setParameter(1,dynRealm.getKey());
      delete.setParameter(2,any.getKey());
      delete.executeUpdate();
      if (jpaAnySearchDAO().matches(any,SearchCondConverter.convert(memb.get().getFIQLCond()))) {
        Query insert=entityManager().createNativeQuery(""String_Node_Str"" + DYNMEMB_TABLE + ""String_Node_Str"");
        insert.setParameter(1,any.getKey());
        insert.setParameter(2,dynRealm.getKey());
        insert.executeUpdate();
      }
    }
  }
);
}"
60434,"@Override public DynRealm save(final DynRealm dynRealm){
  DynRealm merged=entityManager().merge(dynRealm);
  clearDynMembers(merged);
  merged.getDynMemberships().stream().map(memb -> searchDAO().search(SearchCondConverter.convert(memb.getFIQLCond()),memb.getAnyType().getKind())).forEachOrdered(matching -> {
    matching.forEach(any -> {
      Query insert=entityManager().createNativeQuery(""String_Node_Str"" + DYNMEMB_TABLE + ""String_Node_Str"");
      insert.setParameter(1,any.getKey());
      insert.setParameter(2,merged.getKey());
      insert.executeUpdate();
      publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this,any,AuthContextUtils.getDomain()));
    }
);
  }
);
  return merged;
}","@Override public DynRealm save(final DynRealm dynRealm){
  DynRealm merged=entityManager().merge(dynRealm);
  clearDynMembers(merged);
  merged.getDynMemberships().stream().map(memb -> jpaAnySearchDAO().search(SearchCondConverter.convert(memb.getFIQLCond()),memb.getAnyType().getKind())).forEachOrdered(matching -> {
    matching.forEach(any -> {
      Query insert=entityManager().createNativeQuery(""String_Node_Str"" + DYNMEMB_TABLE + ""String_Node_Str"");
      insert.setParameter(1,any.getKey());
      insert.setParameter(2,merged.getKey());
      insert.executeUpdate();
      publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this,any,AuthContextUtils.getDomain()));
    }
);
  }
);
  return merged;
}"
60435,"@Test public void delegatedAdmin(){
  DynRealmTO dynRealm=null;
  RoleTO role=null;
  try {
    dynRealm=new DynRealmTO();
    dynRealm.setKey(""String_Node_Str"" + getUUIDString());
    dynRealm.getDynMembershipConds().put(AnyTypeKind.USER.name(),""String_Node_Str"");
    dynRealm.getDynMembershipConds().put(AnyTypeKind.GROUP.name(),""String_Node_Str"");
    Response response=dynRealmService.create(dynRealm);
    dynRealm=getObject(response.getLocation(),DynRealmService.class,DynRealmTO.class);
    assertNotNull(dynRealm);
    role=new RoleTO();
    role.setKey(""String_Node_Str"" + getUUIDString());
    role.getEntitlements().add(StandardEntitlement.USER_SEARCH);
    role.getEntitlements().add(StandardEntitlement.USER_READ);
    role.getEntitlements().add(StandardEntitlement.USER_UPDATE);
    role.getEntitlements().add(StandardEntitlement.GROUP_READ);
    role.getEntitlements().add(StandardEntitlement.GROUP_UPDATE);
    role.getDynRealms().add(dynRealm.getKey());
    role=createRole(role);
    assertNotNull(role);
    UserTO dynRealmAdmin=UserITCase.getUniqueSampleTO(""String_Node_Str"");
    dynRealmAdmin.setPassword(""String_Node_Str"");
    dynRealmAdmin.getRoles().add(role.getKey());
    dynRealmAdmin=createUser(dynRealmAdmin).getEntity();
    assertNotNull(dynRealmAdmin);
    UserTO user=UserITCase.getUniqueSampleTO(""String_Node_Str"");
    user.setRealm(""String_Node_Str"");
    user.getResources().clear();
    user.getResources().add(RESOURCE_NAME_LDAP);
    user=createUser(user).getEntity();
    assertNotNull(user);
    final String userKey=user.getKey();
    GroupTO group=GroupITCase.getSampleTO(""String_Node_Str"");
    group.setRealm(""String_Node_Str"");
    group.getResources().clear();
    group.getResources().add(RESOURCE_NAME_LDAP);
    group=createGroup(group).getEntity();
    assertNotNull(group);
    final String groupKey=group.getKey();
    PagedResult<UserTO> matchingUsers=userService.search(new AnyQuery.Builder().realm(""String_Node_Str"").fiql(SyncopeClient.getUserSearchConditionBuilder().inDynRealms(dynRealm.getKey()).query()).build());
    assertTrue(matchingUsers.getResult().stream().anyMatch(object -> object.getKey().equals(userKey)));
    PagedResult<GroupTO> matchingGroups=groupService.search(new AnyQuery.Builder().realm(""String_Node_Str"").fiql(SyncopeClient.getGroupSearchConditionBuilder().inDynRealms(dynRealm.getKey()).query()).build());
    assertTrue(matchingGroups.getResult().stream().anyMatch(object -> object.getKey().equals(groupKey)));
    SyncopeClient delegatedClient=clientFactory.create(dynRealmAdmin.getUsername(),""String_Node_Str"");
    UserService delegatedUserService=delegatedClient.getService(UserService.class);
    GroupService delegatedGroupService=delegatedClient.getService(GroupService.class);
    assertNotNull(delegatedUserService.read(userKey));
    assertNotNull(delegatedGroupService.read(groupKey));
    matchingUsers=delegatedUserService.search(new AnyQuery.Builder().realm(""String_Node_Str"").build());
    assertTrue(matchingUsers.getResult().stream().anyMatch(object -> object.getKey().equals(userKey)));
    UserPatch userPatch=new UserPatch();
    userPatch.setKey(userKey);
    userPatch.getResources().add(new StringPatchItem.Builder().value(RESOURCE_NAME_LDAP).operation(PatchOperation.DELETE).build());
    try {
      delegatedUserService.update(userPatch);
      fail();
    }
 catch (    SyncopeClientException e) {
      assertEquals(ClientExceptionType.DelegatedAdministration,e.getType());
    }
    userPatch.getResources().clear();
    userPatch.getResources().add(new StringPatchItem.Builder().value(RESOURCE_NAME_NOPROPAGATION).build());
    user=delegatedUserService.update(userPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>(){
    }
).getEntity();
    assertNotNull(user);
    assertTrue(user.getResources().contains(RESOURCE_NAME_NOPROPAGATION));
    GroupPatch groupPatch=new GroupPatch();
    groupPatch.setKey(groupKey);
    groupPatch.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(""String_Node_Str"",""String_Node_Str"")).build());
    group=delegatedGroupService.update(groupPatch).readEntity(new GenericType<ProvisioningResult<GroupTO>>(){
    }
).getEntity();
    assertNotNull(group);
    assertEquals(""String_Node_Str"",group.getPlainAttr(""String_Node_Str"").get().getValues().get(0));
  }
  finally {
    if (role != null) {
      roleService.delete(role.getKey());
    }
    if (dynRealm != null) {
      dynRealmService.delete(dynRealm.getKey());
    }
  }
}","@Test public void delegatedAdmin(){
  DynRealmTO dynRealm=null;
  RoleTO role=null;
  try {
    dynRealm=new DynRealmTO();
    dynRealm.setKey(""String_Node_Str"" + getUUIDString());
    dynRealm.getDynMembershipConds().put(AnyTypeKind.USER.name(),""String_Node_Str"");
    dynRealm.getDynMembershipConds().put(AnyTypeKind.GROUP.name(),""String_Node_Str"");
    Response response=dynRealmService.create(dynRealm);
    dynRealm=getObject(response.getLocation(),DynRealmService.class,DynRealmTO.class);
    assertNotNull(dynRealm);
    role=new RoleTO();
    role.setKey(""String_Node_Str"" + getUUIDString());
    role.getEntitlements().add(StandardEntitlement.USER_SEARCH);
    role.getEntitlements().add(StandardEntitlement.USER_READ);
    role.getEntitlements().add(StandardEntitlement.USER_UPDATE);
    role.getEntitlements().add(StandardEntitlement.GROUP_READ);
    role.getEntitlements().add(StandardEntitlement.GROUP_UPDATE);
    role.getDynRealms().add(dynRealm.getKey());
    role=createRole(role);
    assertNotNull(role);
    UserTO dynRealmAdmin=UserITCase.getUniqueSampleTO(""String_Node_Str"");
    dynRealmAdmin.setPassword(""String_Node_Str"");
    dynRealmAdmin.getRoles().add(role.getKey());
    dynRealmAdmin=createUser(dynRealmAdmin).getEntity();
    assertNotNull(dynRealmAdmin);
    UserTO user=UserITCase.getUniqueSampleTO(""String_Node_Str"");
    user.setRealm(""String_Node_Str"");
    user.getResources().clear();
    user.getResources().add(RESOURCE_NAME_LDAP);
    user=createUser(user).getEntity();
    assertNotNull(user);
    final String userKey=user.getKey();
    GroupTO group=GroupITCase.getSampleTO(""String_Node_Str"");
    group.setRealm(""String_Node_Str"");
    group.getResources().clear();
    group.getResources().add(RESOURCE_NAME_LDAP);
    group=createGroup(group).getEntity();
    assertNotNull(group);
    final String groupKey=group.getKey();
    if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {
      try {
        Thread.sleep(2000);
      }
 catch (      InterruptedException ex) {
      }
    }
    PagedResult<UserTO> matchingUsers=userService.search(new AnyQuery.Builder().realm(""String_Node_Str"").fiql(SyncopeClient.getUserSearchConditionBuilder().inDynRealms(dynRealm.getKey()).query()).build());
    assertTrue(matchingUsers.getResult().stream().anyMatch(object -> object.getKey().equals(userKey)));
    PagedResult<GroupTO> matchingGroups=groupService.search(new AnyQuery.Builder().realm(""String_Node_Str"").fiql(SyncopeClient.getGroupSearchConditionBuilder().inDynRealms(dynRealm.getKey()).query()).build());
    assertTrue(matchingGroups.getResult().stream().anyMatch(object -> object.getKey().equals(groupKey)));
    SyncopeClient delegatedClient=clientFactory.create(dynRealmAdmin.getUsername(),""String_Node_Str"");
    UserService delegatedUserService=delegatedClient.getService(UserService.class);
    GroupService delegatedGroupService=delegatedClient.getService(GroupService.class);
    assertNotNull(delegatedUserService.read(userKey));
    assertNotNull(delegatedGroupService.read(groupKey));
    matchingUsers=delegatedUserService.search(new AnyQuery.Builder().realm(""String_Node_Str"").build());
    assertTrue(matchingUsers.getResult().stream().anyMatch(object -> object.getKey().equals(userKey)));
    UserPatch userPatch=new UserPatch();
    userPatch.setKey(userKey);
    userPatch.getResources().add(new StringPatchItem.Builder().value(RESOURCE_NAME_LDAP).operation(PatchOperation.DELETE).build());
    try {
      delegatedUserService.update(userPatch);
      fail();
    }
 catch (    SyncopeClientException e) {
      assertEquals(ClientExceptionType.DelegatedAdministration,e.getType());
    }
    userPatch.getResources().clear();
    userPatch.getResources().add(new StringPatchItem.Builder().value(RESOURCE_NAME_NOPROPAGATION).build());
    user=delegatedUserService.update(userPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>(){
    }
).getEntity();
    assertNotNull(user);
    assertTrue(user.getResources().contains(RESOURCE_NAME_NOPROPAGATION));
    GroupPatch groupPatch=new GroupPatch();
    groupPatch.setKey(groupKey);
    groupPatch.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(""String_Node_Str"",""String_Node_Str"")).build());
    group=delegatedGroupService.update(groupPatch).readEntity(new GenericType<ProvisioningResult<GroupTO>>(){
    }
).getEntity();
    assertNotNull(group);
    assertEquals(""String_Node_Str"",group.getPlainAttr(""String_Node_Str"").get().getValues().get(0));
  }
  finally {
    if (role != null) {
      roleService.delete(role.getKey());
    }
    if (dynRealm != null) {
      dynRealmService.delete(dynRealm.getKey());
    }
  }
}"
60436,"public ApprovalDetails(final PageReference pageRef,final WorkflowFormTO formTO){
  super(MultilevelPanel.SECOND_LEVEL_ID);
  final UserTO newUserTO;
  final UserTO previousUserTO;
  if (formTO.getUserPatch() == null) {
    newUserTO=formTO.getUserTO();
    previousUserTO=null;
  }
 else {
    formTO.getUserTO().setKey(formTO.getUserPatch().getKey());
    newUserTO=AnyOperations.patch(formTO.getUserTO(),formTO.getUserPatch());
    previousUserTO=formTO.getUserTO();
  }
  add(new UserWizardBuilder(previousUserTO,newUserTO,new AnyTypeRestClient().read(AnyTypeKind.USER.name()).getClasses(),new UserFormLayoutInfo(),pageRef).build(AjaxWizard.Mode.READONLY));
}","public ApprovalDetails(final PageReference pageRef,final WorkflowFormTO formTO){
  super(MultilevelPanel.SECOND_LEVEL_ID);
  final UserTO newUserTO;
  final UserTO previousUserTO;
  if (formTO.getUserPatch() == null) {
    newUserTO=formTO.getUserTO();
    previousUserTO=null;
  }
 else   if (formTO.getUserTO() == null) {
    previousUserTO=new UserTO();
    previousUserTO.setKey(formTO.getUserPatch().getKey());
    newUserTO=AnyOperations.patch(previousUserTO,formTO.getUserPatch());
  }
 else {
    formTO.getUserTO().setKey(formTO.getUserPatch().getKey());
    newUserTO=AnyOperations.patch(formTO.getUserTO(),formTO.getUserPatch());
    previousUserTO=formTO.getUserTO();
  }
  add(new UserWizardBuilder(previousUserTO,newUserTO,new AnyTypeRestClient().read(AnyTypeKind.USER.name()).getClasses(),new UserFormLayoutInfo(),pageRef).build(AjaxWizard.Mode.READONLY));
}"
60437,"@Override public void onClose(final AjaxRequestTarget target){
  target.add(realmChoicePanel.reloadRealmTree(target));
  if (modal.getContent() instanceof ResultPage) {
    updateRealmContent(RealmTO.class.cast(ResultPage.class.cast(modal.getContent()).getItem()),selectedIndex);
    target.add(content);
  }
  modal.show(false);
}","@Override public void onClose(final AjaxRequestTarget target){
  target.add(realmChoicePanel.reloadRealmTree(target));
  if (modal.getContent() instanceof ResultPage) {
    Serializable result=ResultPage.class.cast(modal.getContent()).getResult();
    updateRealmContent(RealmTO.class.cast(ProvisioningResult.class.cast(result).getEntity()),selectedIndex);
    target.add(content);
  }
  modal.show(false);
}"
60438,"@Override protected void setWindowClosedReloadCallback(final BaseModal<?> modal){
  modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      target.add(realmChoicePanel.reloadRealmTree(target));
      if (modal.getContent() instanceof ResultPage) {
        updateRealmContent(RealmTO.class.cast(ResultPage.class.cast(modal.getContent()).getItem()),selectedIndex);
        target.add(content);
      }
      modal.show(false);
    }
  }
);
}","@Override protected void setWindowClosedReloadCallback(final BaseModal<?> modal){
  modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      target.add(realmChoicePanel.reloadRealmTree(target));
      if (modal.getContent() instanceof ResultPage) {
        Serializable result=ResultPage.class.cast(modal.getContent()).getResult();
        updateRealmContent(RealmTO.class.cast(ProvisioningResult.class.cast(result).getEntity()),selectedIndex);
        target.add(content);
      }
      modal.show(false);
    }
  }
);
}"
60439,"private WebMarkupContainer updateRealmContent(final RealmTO realmTO,final int selectedIndex){
  if (realmTO == null) {
    return content;
  }
  content.addOrReplace(new Realm(""String_Node_Str"",realmTO,Realms.this.getPageReference(),selectedIndex){
    private static final long serialVersionUID=8221398624379357183L;
    @Override protected void onClickTemplate(    final AjaxRequestTarget target){
      templates.setTargetObject(realmTO);
      templates.toggle(target,true);
    }
    @Override protected void setWindowClosedReloadCallback(    final BaseModal<?> modal){
      modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
        private static final long serialVersionUID=8804221891699487139L;
        @Override public void onClose(        final AjaxRequestTarget target){
          target.add(realmChoicePanel.reloadRealmTree(target));
          if (modal.getContent() instanceof ResultPage) {
            updateRealmContent(RealmTO.class.cast(ResultPage.class.cast(modal.getContent()).getItem()),selectedIndex);
            target.add(content);
          }
          modal.show(false);
        }
      }
);
    }
    @Override protected void onClickCreate(    final AjaxRequestTarget target){
      this.wizardBuilder.setParentPath(realmChoicePanel.getCurrentRealm().getFullPath());
      send(this,Broadcast.EXACT,new AjaxWizard.NewItemActionEvent<RealmTO>(new RealmTO(),target){
        @Override public String getEventDescription(){
          return ""String_Node_Str"";
        }
      }
);
    }
    @Override protected void onClickEdit(    final AjaxRequestTarget target,    final RealmTO realmTO){
      this.wizardBuilder.setParentPath(realmTO.getFullPath());
      send(this,Broadcast.EXACT,new AjaxWizard.EditItemActionEvent<RealmTO>(realmTO,target){
        @Override public String getEventDescription(){
          return ""String_Node_Str"";
        }
      }
);
    }
    @Override protected void onClickDelete(    final AjaxRequestTarget target,    final RealmTO realmTO){
      try {
        if (realmTO.getKey() == null) {
          throw new Exception(""String_Node_Str"");
        }
        realmRestClient.delete(realmTO.getFullPath());
        RealmTO parent=realmChoicePanel.moveToParentRealm(realmTO.getKey());
        target.add(realmChoicePanel.reloadRealmTree(target));
        SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));
        updateRealmContent(parent,selectedIndex);
        target.add(content);
      }
 catch (      Exception e) {
        LOG.error(""String_Node_Str"",e);
        SyncopeConsoleSession.get().error(e.getMessage().replace(""String_Node_Str"",""String_Node_Str""));
      }
      ((BasePage)Realms.this.getPage()).getNotificationPanel().refresh(target);
    }
  }
);
  return content;
}","private WebMarkupContainer updateRealmContent(final RealmTO realmTO,final int selectedIndex){
  if (realmTO == null) {
    return content;
  }
  content.addOrReplace(new Realm(""String_Node_Str"",realmTO,Realms.this.getPageReference(),selectedIndex){
    private static final long serialVersionUID=8221398624379357183L;
    @Override protected void onClickTemplate(    final AjaxRequestTarget target){
      templates.setTargetObject(realmTO);
      templates.toggle(target,true);
    }
    @Override protected void setWindowClosedReloadCallback(    final BaseModal<?> modal){
      modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
        private static final long serialVersionUID=8804221891699487139L;
        @Override public void onClose(        final AjaxRequestTarget target){
          target.add(realmChoicePanel.reloadRealmTree(target));
          if (modal.getContent() instanceof ResultPage) {
            Serializable result=ResultPage.class.cast(modal.getContent()).getResult();
            updateRealmContent(RealmTO.class.cast(ProvisioningResult.class.cast(result).getEntity()),selectedIndex);
            target.add(content);
          }
          modal.show(false);
        }
      }
);
    }
    @Override protected void onClickCreate(    final AjaxRequestTarget target){
      this.wizardBuilder.setParentPath(realmChoicePanel.getCurrentRealm().getFullPath());
      send(this,Broadcast.EXACT,new AjaxWizard.NewItemActionEvent<RealmTO>(new RealmTO(),target){
        @Override public String getEventDescription(){
          return ""String_Node_Str"";
        }
      }
);
    }
    @Override protected void onClickEdit(    final AjaxRequestTarget target,    final RealmTO realmTO){
      this.wizardBuilder.setParentPath(realmTO.getFullPath());
      send(this,Broadcast.EXACT,new AjaxWizard.EditItemActionEvent<RealmTO>(realmTO,target){
        @Override public String getEventDescription(){
          return ""String_Node_Str"";
        }
      }
);
    }
    @Override protected void onClickDelete(    final AjaxRequestTarget target,    final RealmTO realmTO){
      try {
        if (realmTO.getKey() == null) {
          throw new Exception(""String_Node_Str"");
        }
        realmRestClient.delete(realmTO.getFullPath());
        RealmTO parent=realmChoicePanel.moveToParentRealm(realmTO.getKey());
        target.add(realmChoicePanel.reloadRealmTree(target));
        SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));
        updateRealmContent(parent,selectedIndex);
        target.add(content);
      }
 catch (      Exception e) {
        LOG.error(""String_Node_Str"",e);
        SyncopeConsoleSession.get().error(e.getMessage().replace(""String_Node_Str"",""String_Node_Str""));
      }
      ((BasePage)Realms.this.getPage()).getNotificationPanel().refresh(target);
    }
  }
);
  return content;
}"
60440,"public ResultPage(final T item,final Serializable result){
  super(BaseModal.CONTENT_ID);
  setOutputMarkupId(true);
  this.item=item;
  add(customResultBody(""String_Node_Str"",item,result));
  final ActionsPanel<T> panel=new ActionsPanel<>(""String_Node_Str"",null);
  add(panel);
  panel.add(new ActionLink<T>(){
    private static final long serialVersionUID=3257738274365467945L;
    @Override public void onClick(    final AjaxRequestTarget target,    final T ignore){
      closeAction(target);
    }
  }
,ActionLink.ActionType.CLOSE,StringUtils.EMPTY).hideLabel();
  panel.setRenderBodyOnly(true);
}","public ResultPage(final T item,final Serializable result){
  super(BaseModal.CONTENT_ID);
  setOutputMarkupId(true);
  this.item=item;
  this.result=result;
  add(customResultBody(""String_Node_Str"",item,result));
  final ActionsPanel<T> panel=new ActionsPanel<>(""String_Node_Str"",null);
  add(panel);
  panel.add(new ActionLink<T>(){
    private static final long serialVersionUID=3257738274365467945L;
    @Override public void onClick(    final AjaxRequestTarget target,    final T ignore){
      closeAction(target);
    }
  }
,ActionLink.ActionType.CLOSE,StringUtils.EMPTY).hideLabel();
  panel.setRenderBodyOnly(true);
}"
60441,"@Override public void onEvent(final IEvent<?> event){
  if (event.getPayload() instanceof SearchClausePanel.SearchEvent) {
    final AjaxRequestTarget target=SearchClausePanel.SearchEvent.class.cast(event.getPayload()).getTarget();
    final String precond;
    if (realmTO.getFullPath().startsWith(SyncopeConstants.ROOT_REALM)) {
      precond=StringUtils.EMPTY;
    }
 else {
      precond=String.format(""String_Node_Str"",realmTO.getKey());
    }
switch (anyTypeTO.getKind()) {
case USER:
      UserDirectoryPanel.class.cast(AnyPanel.this.directoryPanel).search(precond + SearchUtils.buildFIQL(AnyPanel.this.searchPanel.getModel().getObject(),SyncopeClient.getUserSearchConditionBuilder(),AnyPanel.this.searchPanel.getAvailableSchemaTypes()),target);
    break;
case GROUP:
  GroupDirectoryPanel.class.cast(AnyPanel.this.directoryPanel).search(precond + SearchUtils.buildFIQL(AnyPanel.this.searchPanel.getModel().getObject(),SyncopeClient.getGroupSearchConditionBuilder(),AnyPanel.this.searchPanel.getAvailableSchemaTypes()),target);
break;
case ANY_OBJECT:
AnyObjectDirectoryPanel.class.cast(AnyPanel.this.directoryPanel).search(precond + SearchUtils.buildFIQL(AnyPanel.this.searchPanel.getModel().getObject(),SyncopeClient.getAnyObjectSearchConditionBuilder(anyTypeTO.getKey()),AnyPanel.this.searchPanel.getAvailableSchemaTypes()),target);
break;
default :
}
target.add(directoryPanel);
}
 else {
super.onEvent(event);
}
}","@Override public void onEvent(final IEvent<?> event){
  if (event.getPayload() instanceof SearchClausePanel.SearchEvent) {
    final AjaxRequestTarget target=SearchClausePanel.SearchEvent.class.cast(event.getPayload()).getTarget();
    final String precond;
    if (realmTO.getFullPath().startsWith(SyncopeConstants.ROOT_REALM)) {
      precond=StringUtils.EMPTY;
    }
 else {
      precond=String.format(""String_Node_Str"",realmTO.getKey());
    }
switch (anyTypeTO.getKind()) {
case USER:
      UserDirectoryPanel.class.cast(AnyPanel.this.directoryPanel).search(precond + SearchUtils.buildFIQL(AnyPanel.this.searchPanel.getModel().getObject(),SyncopeClient.getUserSearchConditionBuilder(),AnyPanel.this.searchPanel.getAvailableSchemaTypes()),target);
    break;
case GROUP:
  GroupDirectoryPanel.class.cast(AnyPanel.this.directoryPanel).search(precond + SearchUtils.buildFIQL(AnyPanel.this.searchPanel.getModel().getObject(),SyncopeClient.getGroupSearchConditionBuilder(),AnyPanel.this.searchPanel.getAvailableSchemaTypes()),target);
break;
case ANY_OBJECT:
AnyObjectDirectoryPanel.class.cast(AnyPanel.this.directoryPanel).search(precond + SearchUtils.buildFIQL(AnyPanel.this.searchPanel.getModel().getObject(),SyncopeClient.getAnyObjectSearchConditionBuilder(anyTypeTO.getKey()),AnyPanel.this.searchPanel.getAvailableSchemaTypes()),target);
break;
default :
}
}
 else {
super.onEvent(event);
}
}"
60442,"public DisplayAttributesModalPanel(final BaseModal<T> modal,final PageReference pageRef,final List<String> pSchemaNames,final List<String> dSchemaNames,final String type){
  super(modal,pageRef);
  this.type=type;
  final List<String> detailslList=SearchableFields.get(getTOClass());
  Collections.sort(detailslList);
  Collections.sort(pSchemaNames);
  Collections.sort(dSchemaNames);
  final IModel<List<String>> fnames=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      return detailslList;
    }
  }
;
  final IModel<List<String>> psnames=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      return pSchemaNames;
    }
  }
;
  final IModel<List<String>> dsnames=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      return dSchemaNames;
    }
  }
;
  selectedDetails=prefMan.getList(getRequest(),getPrefDetailView());
  selectedPlainSchemas=prefMan.getList(getRequest(),getPrefPlainAttributeView());
  selectedDerSchemas=prefMan.getList(getRequest(),getPrefDerivedAttributeView());
  final WebMarkupContainer container=new WebMarkupContainer(""String_Node_Str"");
  container.setOutputMarkupId(true);
  add(container);
  AjaxPalettePanel<String> details=new AjaxPalettePanel.Builder<String>().setAllowOrder(true).setAllowMoveAll(true).build(""String_Node_Str"",new PropertyModel<List<String>>(this,""String_Node_Str""),new ListModel<>(fnames.getObject()));
  details.hideLabel();
  details.setOutputMarkupId(true);
  container.add(details);
  AjaxPalettePanel<String> plainSchemas=new AjaxPalettePanel.Builder<String>().setAllowOrder(true).setAllowMoveAll(true).build(""String_Node_Str"",new PropertyModel<List<String>>(this,""String_Node_Str""),new ListModel<>(psnames.getObject()));
  plainSchemas.hideLabel();
  plainSchemas.setOutputMarkupId(true);
  container.add(plainSchemas);
  AjaxPalettePanel<String> derSchemas=new AjaxPalettePanel.Builder<String>().setAllowOrder(true).setAllowMoveAll(true).build(""String_Node_Str"",new PropertyModel<List<String>>(this,""String_Node_Str""),new ListModel<>(dsnames.getObject()));
  derSchemas.hideLabel();
  derSchemas.setOutputMarkupId(true);
  container.add(derSchemas);
}","public DisplayAttributesModalPanel(final BaseModal<T> modal,final PageReference pageRef,final List<String> pSchemaNames,final List<String> dSchemaNames,final String type){
  super(modal,pageRef);
  this.type=type;
  final List<String> detailslList=SearchableFields.get(DisplayAttributesModalPanel.getTOClass(type));
  Collections.sort(detailslList);
  Collections.sort(pSchemaNames);
  Collections.sort(dSchemaNames);
  final IModel<List<String>> fnames=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      return detailslList;
    }
  }
;
  final IModel<List<String>> psnames=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      return pSchemaNames;
    }
  }
;
  final IModel<List<String>> dsnames=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      return dSchemaNames;
    }
  }
;
  selectedDetails=prefMan.getList(getRequest(),DisplayAttributesModalPanel.getPrefDetailView(type));
  selectedPlainSchemas=prefMan.getList(getRequest(),DisplayAttributesModalPanel.getPrefPlainAttributeView(type));
  selectedDerSchemas=prefMan.getList(getRequest(),DisplayAttributesModalPanel.getPrefDerivedAttributeView(type));
  final WebMarkupContainer container=new WebMarkupContainer(""String_Node_Str"");
  container.setOutputMarkupId(true);
  add(container);
  AjaxPalettePanel<String> details=new AjaxPalettePanel.Builder<String>().setAllowOrder(true).setAllowMoveAll(true).build(""String_Node_Str"",new PropertyModel<List<String>>(this,""String_Node_Str""),new ListModel<>(fnames.getObject()));
  details.hideLabel();
  details.setOutputMarkupId(true);
  container.add(details);
  AjaxPalettePanel<String> plainSchemas=new AjaxPalettePanel.Builder<String>().setAllowOrder(true).setAllowMoveAll(true).build(""String_Node_Str"",new PropertyModel<List<String>>(this,""String_Node_Str""),new ListModel<>(psnames.getObject()));
  plainSchemas.hideLabel();
  plainSchemas.setOutputMarkupId(true);
  container.add(plainSchemas);
  AjaxPalettePanel<String> derSchemas=new AjaxPalettePanel.Builder<String>().setAllowOrder(true).setAllowMoveAll(true).build(""String_Node_Str"",new PropertyModel<List<String>>(this,""String_Node_Str""),new ListModel<>(dsnames.getObject()));
  derSchemas.hideLabel();
  derSchemas.setOutputMarkupId(true);
  container.add(derSchemas);
}"
60443,protected abstract String getPrefDetailView();,"protected static final String getPrefDetailView(final String type){
  return String.format(Constants.PREF_ANY_DETAILS_VIEW,type);
}"
60444,protected abstract String getPrefDerivedAttributeView();,"protected static final String getPrefDerivedAttributeView(final String type){
  return String.format(Constants.PREF_ANY_DER_ATTRS_VIEW,type);
}"
60445,"@Override public void onSubmit(final AjaxRequestTarget target,final Form<?> form){
  if (selectedDetails.size() + selectedPlainSchemas.size() + selectedDerSchemas.size() > MAX_SELECTIONS) {
    SyncopeConsoleSession.get().error(getString(""String_Node_Str""));
    onError(target,form);
  }
 else {
    final Map<String,List<String>> prefs=new HashMap<>();
    prefs.put(getPrefDetailView(),selectedDetails);
    prefs.put(getPrefPlainAttributeView(),selectedPlainSchemas);
    prefs.put(getPrefDerivedAttributeView(),selectedDerSchemas);
    prefMan.setList(getRequest(),getResponse(),prefs);
    SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));
    modal.close(target);
    ((BasePage)pageRef.getPage()).getNotificationPanel().refresh(target);
  }
}","@Override public void onSubmit(final AjaxRequestTarget target,final Form<?> form){
  if (selectedDetails.size() + selectedPlainSchemas.size() + selectedDerSchemas.size() > MAX_SELECTIONS) {
    SyncopeConsoleSession.get().error(getString(""String_Node_Str""));
    onError(target,form);
  }
 else {
    final Map<String,List<String>> prefs=new HashMap<>();
    prefs.put(DisplayAttributesModalPanel.getPrefDetailView(type),selectedDetails);
    prefs.put(DisplayAttributesModalPanel.getPrefPlainAttributeView(type),selectedPlainSchemas);
    prefs.put(DisplayAttributesModalPanel.getPrefDerivedAttributeView(type),selectedDerSchemas);
    prefMan.setList(getRequest(),getResponse(),prefs);
    SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));
    modal.close(target);
    ((BasePage)pageRef.getPage()).getNotificationPanel().refresh(target);
  }
}"
60446,protected abstract Class<? extends AnyTO> getTOClass();,"protected static final Class<? extends AnyTO> getTOClass(final String type){
  if (type.equalsIgnoreCase(AnyTypeKind.USER.name())) {
    return UserTO.class;
  }
 else   if (type.equalsIgnoreCase(AnyTypeKind.USER.name())) {
    return GroupTO.class;
  }
 else {
    return AnyObjectTO.class;
  }
}"
60447,protected abstract String getPrefPlainAttributeView();,"protected static final String getPrefPlainAttributeView(final String type){
  return String.format(Constants.PREF_ANY_PLAIN_ATTRS_VIEW,type);
}"
60448,"public void toggleWithContent(final AjaxRequestTarget target,final ActionsPanel<T> actionsPanel,final T modelObject){
  final String header;
  if (modelObject == null) {
    header=new ResourceModel(""String_Node_Str"",StringUtils.EMPTY).getObject();
  }
 else   if (modelObject instanceof UserTO) {
    header=((UserTO)modelObject).getUsername();
  }
 else   if (modelObject instanceof GroupTO) {
    header=((GroupTO)modelObject).getName();
  }
 else   if (modelObject instanceof ReportTO) {
    header=((ReportTO)modelObject).getName();
  }
 else   if (modelObject instanceof AnyObjectTO) {
    header=((AnyObjectTO)modelObject).getName();
  }
 else   if (modelObject instanceof AttrTO) {
    header=((AttrTO)modelObject).getSchema();
  }
 else   if (modelObject instanceof AbstractPolicyTO) {
    header=((AbstractPolicyTO)modelObject).getDescription();
  }
 else   if (modelObject instanceof SecurityQuestionTO) {
    header=((SecurityQuestionTO)modelObject).getContent();
  }
 else   if (modelObject instanceof AccessTokenTO) {
    header=((AccessTokenTO)modelObject).getOwner();
  }
 else   if (modelObject instanceof ExecTO) {
    header=((ExecTO)modelObject).getKey();
  }
 else   if (modelObject instanceof WorkflowDefinitionTO) {
    header=((WorkflowDefinitionTO)modelObject).getName();
  }
 else   if (modelObject instanceof EntityTO) {
    header=((EntityTO)modelObject).getKey();
  }
 else   if (modelObject instanceof StatusBean) {
    header=((StatusBean)modelObject).getResourceName();
  }
 else   if (modelObject instanceof PolicyRuleWrapper) {
    header=((PolicyRuleWrapper)modelObject).getName();
  }
 else   if (modelObject instanceof PolicyRuleWrapper) {
    header=((PolicyRuleWrapper)modelObject).getName();
  }
 else   if (modelObject instanceof ReportletWrapper) {
    header=((ReportletWrapper)modelObject).getName();
  }
 else   if (modelObject instanceof JobTO) {
    header=((JobTO)modelObject).getRefKey() == null ? ((JobTO)modelObject).getRefDesc() : ((JobTO)modelObject).getRefKey();
  }
 else {
    header=new ResourceModel(""String_Node_Str"",StringUtils.EMPTY).getObject();
  }
  setHeader(target,StringUtils.abbreviate(header,25));
  modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      modal.show(false);
    }
  }
);
  final Fragment frag=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
  frag.setOutputMarkupId(true);
  frag.add(actionsPanel);
  container.addOrReplace(frag);
  target.add(this.container);
  this.toggle(target,true);
}","public void toggleWithContent(final AjaxRequestTarget target,final ActionsPanel<T> actionsPanel,final T modelObject){
  final String header;
  if (modelObject == null) {
    header=new ResourceModel(""String_Node_Str"",StringUtils.EMPTY).getObject();
  }
 else   if (modelObject instanceof UserTO) {
    header=((UserTO)modelObject).getUsername();
  }
 else   if (modelObject instanceof GroupTO) {
    header=((GroupTO)modelObject).getName();
  }
 else   if (modelObject instanceof ReportTO) {
    header=((ReportTO)modelObject).getName();
  }
 else   if (modelObject instanceof AnyObjectTO) {
    header=((AnyObjectTO)modelObject).getName();
  }
 else   if (modelObject instanceof AttrTO) {
    header=((AttrTO)modelObject).getSchema();
  }
 else   if (modelObject instanceof AbstractPolicyTO) {
    header=((AbstractPolicyTO)modelObject).getDescription();
  }
 else   if (modelObject instanceof SecurityQuestionTO) {
    header=((SecurityQuestionTO)modelObject).getContent();
  }
 else   if (modelObject instanceof AccessTokenTO) {
    header=((AccessTokenTO)modelObject).getOwner();
  }
 else   if (modelObject instanceof ExecTO) {
    header=((ExecTO)modelObject).getKey();
  }
 else   if (modelObject instanceof WorkflowDefinitionTO) {
    header=((WorkflowDefinitionTO)modelObject).getName();
  }
 else   if (modelObject instanceof SchedTaskTO) {
    header=((SchedTaskTO)modelObject).getName();
  }
 else   if (modelObject instanceof WorkflowFormTO) {
    header=((WorkflowFormTO)modelObject).getKey();
  }
 else   if (modelObject instanceof EntityTO) {
    header=((EntityTO)modelObject).getKey();
  }
 else   if (modelObject instanceof StatusBean) {
    header=((StatusBean)modelObject).getResourceName();
  }
 else   if (modelObject instanceof PolicyRuleWrapper) {
    header=((PolicyRuleWrapper)modelObject).getName();
  }
 else   if (modelObject instanceof PolicyRuleWrapper) {
    header=((PolicyRuleWrapper)modelObject).getName();
  }
 else   if (modelObject instanceof ReportletWrapper) {
    header=((ReportletWrapper)modelObject).getName();
  }
 else   if (modelObject instanceof JobTO) {
    header=((JobTO)modelObject).getRefKey() == null ? ((JobTO)modelObject).getRefDesc() : ((JobTO)modelObject).getRefKey();
  }
 else {
    header=new ResourceModel(""String_Node_Str"",StringUtils.EMPTY).getObject();
  }
  setHeader(target,StringUtils.abbreviate(header,25));
  modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      modal.show(false);
    }
  }
);
  final Fragment frag=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
  frag.setOutputMarkupId(true);
  frag.add(actionsPanel);
  container.addOrReplace(frag);
  target.add(this.container);
  this.toggle(target,true);
}"
60449,"@Override public void onClick(final AjaxRequestTarget target){
  action.getLink().onClick(target,obj);
}","@Override public void onClick(final AjaxRequestTarget target){
  beforeOnClick(target);
  action.getLink().onClick(target,obj);
}"
60450,"public ActionPanel(final String componentId,final IModel<T> model,final Action<T> action){
  super(componentId);
  setOutputMarkupId(true);
  final T obj;
  if (model == null) {
    obj=null;
  }
 else {
    obj=model.getObject();
  }
  final boolean enabled;
  final AbstractLink actionLink;
  if (action.getLink() == null || action.getType() == ActionType.NOT_FOUND) {
    enabled=true;
    actionLink=new IndicatingAjaxLink<Void>(""String_Node_Str""){
      private static final long serialVersionUID=-7978723352517770644L;
      @Override public boolean isEnabled(){
        return false;
      }
      @Override public void onClick(      final AjaxRequestTarget target){
      }
    }
;
  }
 else   if (action.getType() == ActionType.WORKFLOW_MODELER) {
    enabled=action.getLink().isEnabled(obj);
    actionLink=new BookmarkablePageLink<>(""String_Node_Str"",action.getLink().getPageClass(),action.getLink().getPageParameters()).setPopupSettings(new VeilPopupSettings().setHeight(600).setWidth(800));
  }
 else {
    enabled=action.getLink().isEnabled(obj);
    actionLink=action.isOnConfirm() ? new IndicatingOnConfirmAjaxLink<Void>(""String_Node_Str"",enabled){
      private static final long serialVersionUID=-7978723352517770644L;
      @Override public void onClick(      final AjaxRequestTarget target){
        action.getLink().onClick(target,obj);
      }
      @Override public String getAjaxIndicatorMarkupId(){
        return disableIndicator || !action.getLink().isIndicatorEnabled() ? StringUtils.EMPTY : super.getAjaxIndicatorMarkupId();
      }
    }
 : new IndicatingAjaxLink<Void>(""String_Node_Str""){
      private static final long serialVersionUID=-7978723352517770644L;
      @Override public void onClick(      final AjaxRequestTarget target){
        action.getLink().onClick(target,obj);
      }
      @Override public String getAjaxIndicatorMarkupId(){
        return disableIndicator || !action.getLink().isIndicatorEnabled() ? StringUtils.EMPTY : super.getAjaxIndicatorMarkupId();
      }
    }
;
  }
  if (SyncopeConsoleSession.get().owns(action.getEntitlements(),action.getRealm())) {
    MetaDataRoleAuthorizationStrategy.authorizeAll(actionLink,RENDER);
  }
 else {
    MetaDataRoleAuthorizationStrategy.unauthorizeAll(actionLink,RENDER);
  }
  actionLink.setVisible(enabled);
  actionIcon=new Label(""String_Node_Str"",""String_Node_Str"");
  actionLink.add(actionIcon);
  final String clazz=action.getType().name().toLowerCase() + ""String_Node_Str"";
  actionIcon.add(new AttributeModifier(""String_Node_Str"",new ResourceModel(clazz,clazz)));
  final String title=action.getType().name().toLowerCase() + ""String_Node_Str"";
  final IModel<String> titleModel=new ResourceModel(title,title);
  actionIcon.add(new AttributeModifier(""String_Node_Str"",titleModel));
  final String alt=action.getType().name().toLowerCase() + ""String_Node_Str"";
  actionIcon.add(new AttributeModifier(""String_Node_Str"",new ResourceModel(alt,alt)));
  actionLabel=new Label(""String_Node_Str"",titleModel);
  actionLink.add(actionLabel);
  add(actionLink);
  actionLabel.setVisible(action.isVisibleLabel());
  if (action.getLabel() != null) {
    actionLabel.setDefaultModel(action.getLabel());
  }
  if (action.getTitle() != null) {
    actionIcon.add(new AttributeModifier(""String_Node_Str"",action.getTitle()));
  }
  if (action.getAlt() != null) {
    actionIcon.add(new AttributeModifier(""String_Node_Str"",action.getAlt()));
  }
  if (action.getIcon() != null) {
    actionIcon.add(new AttributeModifier(""String_Node_Str"",action.getIcon()));
  }
  this.disableIndicator=!action.hasIndicator();
}","public ActionPanel(final String componentId,final IModel<T> model,final Action<T> action){
  super(componentId);
  setOutputMarkupId(true);
  this.action=action;
  final T obj;
  if (model == null) {
    obj=null;
  }
 else {
    obj=model.getObject();
  }
  final boolean enabled;
  final AbstractLink actionLink;
  if (action.getLink() == null || action.getType() == ActionType.NOT_FOUND) {
    enabled=true;
    actionLink=new IndicatingAjaxLink<Void>(""String_Node_Str""){
      private static final long serialVersionUID=-7978723352517770644L;
      @Override public boolean isEnabled(){
        return false;
      }
      @Override public void onClick(      final AjaxRequestTarget target){
      }
    }
;
  }
 else   if (action.getType() == ActionType.WORKFLOW_MODELER) {
    enabled=action.getLink().isEnabled(obj);
    actionLink=new BookmarkablePageLink<>(""String_Node_Str"",action.getLink().getPageClass(),action.getLink().getPageParameters()).setPopupSettings(new VeilPopupSettings().setHeight(600).setWidth(800));
  }
 else {
    enabled=action.getLink().isEnabled(obj);
    actionLink=action.isOnConfirm() ? new IndicatingOnConfirmAjaxLink<Void>(""String_Node_Str"",enabled){
      private static final long serialVersionUID=-7978723352517770644L;
      @Override public void onClick(      final AjaxRequestTarget target){
        beforeOnClick(target);
        action.getLink().onClick(target,obj);
      }
      @Override public String getAjaxIndicatorMarkupId(){
        return disableIndicator || !action.getLink().isIndicatorEnabled() ? StringUtils.EMPTY : super.getAjaxIndicatorMarkupId();
      }
    }
 : new IndicatingAjaxLink<Void>(""String_Node_Str""){
      private static final long serialVersionUID=-7978723352517770644L;
      @Override public void onClick(      final AjaxRequestTarget target){
        beforeOnClick(target);
        action.getLink().onClick(target,obj);
      }
      @Override public String getAjaxIndicatorMarkupId(){
        return disableIndicator || !action.getLink().isIndicatorEnabled() ? StringUtils.EMPTY : super.getAjaxIndicatorMarkupId();
      }
    }
;
  }
  if (SyncopeConsoleSession.get().owns(action.getEntitlements(),action.getRealm())) {
    MetaDataRoleAuthorizationStrategy.authorizeAll(actionLink,RENDER);
  }
 else {
    MetaDataRoleAuthorizationStrategy.unauthorizeAll(actionLink,RENDER);
  }
  actionLink.setVisible(enabled);
  actionIcon=new Label(""String_Node_Str"",""String_Node_Str"");
  actionLink.add(actionIcon);
  final String clazz=action.getType().name().toLowerCase() + ""String_Node_Str"";
  actionIcon.add(new AttributeModifier(""String_Node_Str"",new ResourceModel(clazz,clazz)));
  final String title=action.getType().name().toLowerCase() + ""String_Node_Str"";
  final IModel<String> titleModel=new ResourceModel(title,title);
  actionIcon.add(new AttributeModifier(""String_Node_Str"",titleModel));
  final String alt=action.getType().name().toLowerCase() + ""String_Node_Str"";
  actionIcon.add(new AttributeModifier(""String_Node_Str"",new ResourceModel(alt,alt)));
  actionLabel=new Label(""String_Node_Str"",titleModel);
  actionLink.add(actionLabel);
  add(actionLink);
  actionLabel.setVisible(action.isVisibleLabel());
  if (action.getLabel() != null) {
    actionLabel.setDefaultModel(action.getLabel());
  }
  if (action.getTitle() != null) {
    actionIcon.add(new AttributeModifier(""String_Node_Str"",action.getTitle()));
  }
  if (action.getAlt() != null) {
    actionIcon.add(new AttributeModifier(""String_Node_Str"",action.getAlt()));
  }
  if (action.getIcon() != null) {
    actionIcon.add(new AttributeModifier(""String_Node_Str"",action.getIcon()));
  }
  this.disableIndicator=!action.hasIndicator();
}"
60451,"protected WizardMgtPanel(final String id,final boolean wizardInModal){
  super(id);
  setOutputMarkupId(true);
  this.actualId=wizardInModal ? BaseModal.CONTENT_ID : WIZARD_ID;
  this.wizardInModal=wizardInModal;
  outerObjects.add(modal);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.setOutputMarkupPlaceholderTag(true).setOutputMarkupId(true);
  add(container);
  initialFragment=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
  container.addOrReplace(initialFragment);
  addAjaxLink=new AjaxLink<T>(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      send(WizardMgtPanel.this,Broadcast.EXACT,new AjaxWizard.NewItemActionEvent<T>(null,target));
    }
  }
;
  addAjaxLink.setEnabled(false);
  addAjaxLink.setVisible(false);
  initialFragment.addOrReplace(addAjaxLink);
  exitAjaxLink=new AjaxLink<T>(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      send(WizardMgtPanel.this,Broadcast.EXACT,new ExitEvent(target));
    }
  }
;
  exitAjaxLink.setEnabled(false);
  exitAjaxLink.setVisible(false);
  initialFragment.addOrReplace(exitAjaxLink);
  add(new ListView<Component>(""String_Node_Str"",outerObjects){
    private static final long serialVersionUID=-9180479401817023838L;
    @Override protected void populateItem(    final ListItem<Component> item){
      item.add(item.getModelObject());
    }
  }
);
}","protected WizardMgtPanel(final String id,final boolean wizardInModal){
  super(id);
  setOutputMarkupId(true);
  this.actualId=wizardInModal ? BaseModal.CONTENT_ID : WIZARD_ID;
  this.wizardInModal=wizardInModal;
  outerObjects.add(modal);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.setOutputMarkupPlaceholderTag(true).setOutputMarkupId(true);
  add(container);
  initialFragment=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
  container.addOrReplace(initialFragment);
  addAjaxLink=new AjaxLink<T>(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      send(WizardMgtPanel.this,Broadcast.BREADTH,new ActionLinksTogglePanel.ActionLinkTogleCloseEventPayload(target));
      send(WizardMgtPanel.this,Broadcast.EXACT,new AjaxWizard.NewItemActionEvent<T>(null,target));
    }
  }
;
  addAjaxLink.setEnabled(false);
  addAjaxLink.setVisible(false);
  initialFragment.addOrReplace(addAjaxLink);
  exitAjaxLink=new AjaxLink<T>(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      send(WizardMgtPanel.this,Broadcast.EXACT,new ExitEvent(target));
    }
  }
;
  exitAjaxLink.setEnabled(false);
  exitAjaxLink.setVisible(false);
  initialFragment.addOrReplace(exitAjaxLink);
  add(new ListView<Component>(""String_Node_Str"",outerObjects){
    private static final long serialVersionUID=-9180479401817023838L;
    @Override protected void populateItem(    final ListItem<Component> item){
      item.add(item.getModelObject());
    }
  }
);
}"
60452,"public static MailTemplateManagerService getMailTemplateManagerService() throws IOException {
synchronized (MAIL_TEMPLATE_MONITOR) {
    if (MAIL_TEMPLATE_MANAGER_SERVICE == null) {
      ConnectionParams connParams=getConnectionParams();
      MAIL_TEMPLATE_MANAGER_SERVICE=new MailTemplateManagerService(connParams.getUrl(),connParams.getUsername(),connParams.getPassword());
    }
  }
  return MAIL_TEMPLATE_MANAGER_SERVICE;
}","public static MailTemplateManagerService getMailTemplateManagerService() throws IOException {
synchronized (MAIL_TEMPLATE_MONITOR) {
    ConnectionParams connParams=getConnectionParams();
    MAIL_TEMPLATE_MANAGER_SERVICE=new MailTemplateManagerService(connParams.getUrl(),connParams.getUsername(),connParams.getPassword());
  }
  return MAIL_TEMPLATE_MANAGER_SERVICE;
}"
60453,"public static ConnectionParams getConnectionParams(){
  Preferences prefs=NbPreferences.forModule(ResourceExplorerTopComponent.class);
  ConnectionParams connectionParams=ConnectionParams.builder().scheme(prefs.get(""String_Node_Str"",""String_Node_Str"")).host(prefs.get(""String_Node_Str"",""String_Node_Str"")).port(prefs.get(""String_Node_Str"",""String_Node_Str"")).username(prefs.get(""String_Node_Str"",StringUtils.EMPTY)).password(prefs.get(""String_Node_Str"",StringUtils.EMPTY)).build();
  return connectionParams;
}","public static ConnectionParams getConnectionParams(){
  Preferences prefs=NbPreferences.forModule(ResourceExplorerTopComponent.class);
  return ConnectionParams.builder().scheme(prefs.get(""String_Node_Str"",""String_Node_Str"")).host(prefs.get(""String_Node_Str"",""String_Node_Str"")).port(prefs.get(""String_Node_Str"",""String_Node_Str"")).username(prefs.get(""String_Node_Str"",StringUtils.EMPTY)).password(prefs.get(""String_Node_Str"",StringUtils.EMPTY)).build();
}"
60454,"public static ReportTemplateManagerService getReportTemplateManagerService() throws IOException {
synchronized (REPORT_TEMPLATE_MONITOR) {
    if (REPORT_TEMPLATE_MANAGER_SERVICE == null) {
      ConnectionParams connParams=getConnectionParams();
      REPORT_TEMPLATE_MANAGER_SERVICE=new ReportTemplateManagerService(connParams.getUrl(),connParams.getUsername(),connParams.getPassword());
    }
  }
  return REPORT_TEMPLATE_MANAGER_SERVICE;
}","public static ReportTemplateManagerService getReportTemplateManagerService() throws IOException {
synchronized (REPORT_TEMPLATE_MONITOR) {
    ConnectionParams connParams=getConnectionParams();
    REPORT_TEMPLATE_MANAGER_SERVICE=new ReportTemplateManagerService(connParams.getUrl(),connParams.getUsername(),connParams.getPassword());
  }
  return REPORT_TEMPLATE_MANAGER_SERVICE;
}"
60455,"public static MailTemplateManagerService getMailTemplateManagerService() throws IOException {
synchronized (MAIL_TEMPLATE_MONITOR) {
    if (MAIL_TEMPLATE_MANAGER_SERVICE == null) {
      UserProperties userProperties=getUserProperties();
      MAIL_TEMPLATE_MANAGER_SERVICE=new MailTemplateManagerService(userProperties.getUrl(),userProperties.getUserName(),userProperties.getPassword());
    }
  }
  return MAIL_TEMPLATE_MANAGER_SERVICE;
}","public static MailTemplateManagerService getMailTemplateManagerService() throws IOException {
synchronized (MAIL_TEMPLATE_MONITOR) {
    if (MAIL_TEMPLATE_MANAGER_SERVICE == null) {
      ConnectionParams connParams=getConnectionParams();
      MAIL_TEMPLATE_MANAGER_SERVICE=new MailTemplateManagerService(connParams.getUrl(),connParams.getUsername(),connParams.getPassword());
    }
  }
  return MAIL_TEMPLATE_MANAGER_SERVICE;
}"
60456,"public static ReportTemplateManagerService getReportTemplateManagerService() throws IOException {
synchronized (REPORT_TEMPLATE_MONITOR) {
    if (REPORT_TEMPLATE_MANAGER_SERVICE == null) {
      UserProperties userProperties=getUserProperties();
      REPORT_TEMPLATE_MANAGER_SERVICE=new ReportTemplateManagerService(userProperties.getUrl(),userProperties.getUserName(),userProperties.getPassword());
    }
  }
  return REPORT_TEMPLATE_MANAGER_SERVICE;
}","public static ReportTemplateManagerService getReportTemplateManagerService() throws IOException {
synchronized (REPORT_TEMPLATE_MONITOR) {
    if (REPORT_TEMPLATE_MANAGER_SERVICE == null) {
      ConnectionParams connParams=getConnectionParams();
      REPORT_TEMPLATE_MANAGER_SERVICE=new ReportTemplateManagerService(connParams.getUrl(),connParams.getUsername(),connParams.getPassword());
    }
  }
  return REPORT_TEMPLATE_MANAGER_SERVICE;
}"
60457,"/** 
 * Returns the line number of the next bracket after end.
 * @param document - the document being parsed
 * @param line - the line to start searching back from
 * @param end - the end position to search back from
 * @param closingBracketIncrease - the number of brackets to skip
 * @return the line number of the next matching bracket after end
 * @throws BadLocationException in case the line numbers are invalid in the document
 */
protected int findMatchingOpenBracket(final IDocument document,final int linearg,final int endarg,final int closingBracketIncrease) throws BadLocationException {
  int line=linearg;
  int end=endarg;
  int start=document.getLineOffset(line);
  int brackcount=getBracketCount(document,start,end,false) - closingBracketIncrease;
  while (brackcount < 0) {
    line--;
    if (line < 0) {
      return -1;
    }
    start=document.getLineOffset(line);
    end=start + document.getLineLength(line) - 1;
    brackcount+=getBracketCount(document,start,end,false);
  }
  return line;
}","/** 
 * Returns the line number of the next bracket after end.
 * @param document - the document being parsed
 * @param linearg - the line to start searching back from
 * @param endarg - the end position to search back from
 * @param closingBracketIncrease - the number of brackets to skip
 * @return the line number of the next matching bracket after end
 * @throws BadLocationException in case the line numbers are invalid in the document
 */
protected int findMatchingOpenBracket(final IDocument document,final int linearg,final int endarg,final int closingBracketIncrease) throws BadLocationException {
  int line=linearg;
  int end=endarg;
  int start=document.getLineOffset(line);
  int brackcount=getBracketCount(document,start,end,false) - closingBracketIncrease;
  while (brackcount < 0) {
    line--;
    if (line < 0) {
      return -1;
    }
    start=document.getLineOffset(line);
    end=start + document.getLineLength(line) - 1;
    brackcount+=getBracketCount(document,start,end,false);
  }
  return line;
}"
60458,"public Profile(final T policyTO,final BaseModal<T> modal,final PageReference pageRef){
  super(modal,pageRef);
  modal.setFormModel(policyTO);
  this.policyTO=policyTO;
  final List<Component> components=new ArrayList<>();
  components.add(new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(policyTO,""String_Node_Str""),false));
  if (policyTO instanceof AccountPolicyTO) {
    components.add(new AjaxSpinnerFieldPanel.Builder<Integer>().build(""String_Node_Str"",""String_Node_Str"",Integer.class,new PropertyModel<Integer>(policyTO,""String_Node_Str"")));
    components.add(new AjaxCheckBoxPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<Boolean>(policyTO,""String_Node_Str""),false));
    components.add(new AjaxPalettePanel.Builder<String>().setName(""String_Node_Str"").build(""String_Node_Str"",new PropertyModel<List<String>>(policyTO,""String_Node_Str""),new ListModel<String>(resources.getObject())));
  }
  if (policyTO instanceof PasswordPolicyTO) {
    components.add(new AjaxSpinnerFieldPanel.Builder<Integer>().build(""String_Node_Str"",""String_Node_Str"",Integer.class,new PropertyModel<Integer>(policyTO,""String_Node_Str"")));
    components.add(new AjaxCheckBoxPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<Boolean>(policyTO,""String_Node_Str""),false));
  }
  add(new ListView<Component>(""String_Node_Str"",components){
    private static final long serialVersionUID=-9180479401817023838L;
    @Override protected void populateItem(    final ListItem<Component> item){
      item.add(item.getModelObject());
    }
  }
);
}","public Profile(final T policyTO,final BaseModal<T> modal,final PageReference pageRef){
  super(modal,pageRef);
  modal.setFormModel(policyTO);
  this.policyTO=policyTO;
  final List<Component> components=new ArrayList<>();
  FieldPanel<String> description=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(policyTO,""String_Node_Str""),false);
  description.setRequired(true);
  components.add(description);
  if (policyTO instanceof AccountPolicyTO) {
    components.add(new AjaxSpinnerFieldPanel.Builder<Integer>().build(""String_Node_Str"",""String_Node_Str"",Integer.class,new PropertyModel<Integer>(policyTO,""String_Node_Str"")));
    components.add(new AjaxCheckBoxPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<Boolean>(policyTO,""String_Node_Str""),false));
    components.add(new AjaxPalettePanel.Builder<String>().setName(""String_Node_Str"").build(""String_Node_Str"",new PropertyModel<List<String>>(policyTO,""String_Node_Str""),new ListModel<String>(resources.getObject())));
  }
  if (policyTO instanceof PasswordPolicyTO) {
    components.add(new AjaxSpinnerFieldPanel.Builder<Integer>().build(""String_Node_Str"",""String_Node_Str"",Integer.class,new PropertyModel<Integer>(policyTO,""String_Node_Str"")));
    components.add(new AjaxCheckBoxPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<Boolean>(policyTO,""String_Node_Str""),false));
  }
  add(new ListView<Component>(""String_Node_Str"",components){
    private static final long serialVersionUID=-9180479401817023838L;
    @Override protected void populateItem(    final ListItem<Component> item){
      item.add(item.getModelObject());
    }
  }
);
}"
60459,"public <T extends AnyTO>DerAttrs(final T anyTO,final List<String> anyTypeClasses,final List<String> whichDerAttrs){
  super(anyTO,anyTypeClasses,whichDerAttrs);
  add(new ListView<AttrTO>(""String_Node_Str"",attrTOs){
    private static final long serialVersionUID=9101744072914090143L;
    @Override public void renderHead(    final IHeaderResponse response){
      super.renderHead(response);
      if (attrTOs.getObject().isEmpty()) {
        response.render(OnDomReadyHeaderItem.forScript(String.format(""String_Node_Str"",getString(""String_Node_Str""))));
      }
    }
    @Override public void onComponentTagBody(    final MarkupStream markupStream,    final ComponentTag openTag){
      super.onComponentTagBody(markupStream,openTag);
      openTag.put(""String_Node_Str"",""String_Node_Str"");
    }
    @Override protected void populateItem(    final ListItem<AttrTO> item){
      AttrTO attrTO=item.getModelObject();
      IModel<String> model;
      List<String> values=attrTO.getValues();
      if (values == null || values.isEmpty()) {
        model=new ResourceModel(""String_Node_Str"",StringUtils.EMPTY);
      }
 else {
        model=new Model<>(values.get(0));
      }
      AjaxTextFieldPanel panel=new AjaxTextFieldPanel(""String_Node_Str"",attrTO.getSchema(),model,false);
      panel.setEnabled(false);
      panel.setRequired(true);
      panel.setOutputMarkupId(true);
      item.add(panel);
    }
  }
);
}","public <T extends AnyTO>DerAttrs(final T anyTO,final List<String> anyTypeClasses,final List<String> whichDerAttrs){
  super(anyTO,anyTypeClasses,whichDerAttrs);
  setTitleModel(new ResourceModel(""String_Node_Str""));
  add(new ListView<AttrTO>(""String_Node_Str"",attrTOs){
    private static final long serialVersionUID=9101744072914090143L;
    @Override public void renderHead(    final IHeaderResponse response){
      super.renderHead(response);
      if (attrTOs.getObject().isEmpty()) {
        response.render(OnDomReadyHeaderItem.forScript(String.format(""String_Node_Str"",getString(""String_Node_Str""))));
      }
    }
    @Override public void onComponentTagBody(    final MarkupStream markupStream,    final ComponentTag openTag){
      super.onComponentTagBody(markupStream,openTag);
      openTag.put(""String_Node_Str"",""String_Node_Str"");
    }
    @Override protected void populateItem(    final ListItem<AttrTO> item){
      AttrTO attrTO=item.getModelObject();
      IModel<String> model;
      List<String> values=attrTO.getValues();
      if (values == null || values.isEmpty()) {
        model=new ResourceModel(""String_Node_Str"",StringUtils.EMPTY);
      }
 else {
        model=new Model<>(values.get(0));
      }
      AjaxTextFieldPanel panel=new AjaxTextFieldPanel(""String_Node_Str"",attrTO.getSchema(),model,false);
      panel.setEnabled(false);
      panel.setRequired(true);
      panel.setOutputMarkupId(true);
      item.add(panel);
    }
  }
);
}"
60460,"public Ownership(final GroupWrapper groupWrapper,final PageReference pageRef){
  super();
  this.wrapper=groupWrapper;
  isGroupOwnership=Model.of(groupWrapper.getInnerObject().getGroupOwner() != null);
  final BootstrapToggleConfig config=new BootstrapToggleConfig().withOnStyle(BootstrapToggleConfig.Style.info).withOffStyle(BootstrapToggleConfig.Style.warning).withSize(BootstrapToggleConfig.Size.mini);
  add(new BootstrapToggle(""String_Node_Str"",new Model<Boolean>(){
    private static final long serialVersionUID=6062041315055645807L;
    @Override public Boolean getObject(){
      return isGroupOwnership.getObject();
    }
  }
,config){
    private static final long serialVersionUID=2969634208049189343L;
    @Override protected IModel<String> getOffLabel(){
      return Model.of(""String_Node_Str"");
    }
    @Override protected IModel<String> getOnLabel(){
      return Model.of(""String_Node_Str"");
    }
    @Override protected CheckBox newCheckBox(    final String id,    final IModel<Boolean> model){
      final CheckBox checkBox=super.newCheckBox(id,model);
      checkBox.add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE){
        private static final long serialVersionUID=1L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          isGroupOwnership.setObject(!isGroupOwnership.getObject());
          if (isGroupOwnership.getObject()) {
            ownerContainer.addOrReplace(groupSearchFragment);
            groupDirectoryPanel.search(null,target);
          }
 else {
            ownerContainer.addOrReplace(userSearchFragment);
            userDirectoryPanel.search(null,target);
          }
          target.add(ownerContainer);
        }
      }
);
      return checkBox;
    }
  }
);
  ownerContainer=new WebMarkupContainer(""String_Node_Str"");
  ownerContainer.setOutputMarkupId(true);
  this.add(ownerContainer);
  groupSearchFragment=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
  groupSearchPanel=new GroupSearchPanel.Builder(new ListModel<>(new ArrayList<SearchClause>())).required(false).enableSearch().build(""String_Node_Str"");
  groupSearchFragment.add(groupSearchPanel.setRenderBodyOnly(true));
  AnyTypeTO anyTypeTO=anyTypeRestClient.read(AnyTypeKind.GROUP.name());
  groupDirectoryPanel=GroupSelectionDirectoryPanel.class.cast(new GroupSelectionDirectoryPanel.Builder(anyTypeClassRestClient.list(anyTypeTO.getClasses()),anyTypeTO.getKey(),pageRef).build(""String_Node_Str""));
  groupSearchFragment.add(groupDirectoryPanel);
  userSearchFragment=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
  userSearchPanel=UserSearchPanel.class.cast(new UserSearchPanel.Builder(new ListModel<>(new ArrayList<SearchClause>())).required(false).enableSearch().build(""String_Node_Str""));
  userSearchFragment.add(userSearchPanel.setRenderBodyOnly(true));
  anyTypeTO=anyTypeRestClient.read(AnyTypeKind.USER.name());
  userDirectoryPanel=UserSelectionDirectoryPanel.class.cast(new UserSelectionDirectoryPanel.Builder(anyTypeClassRestClient.list(anyTypeTO.getClasses()),anyTypeTO.getKey(),pageRef).build(""String_Node_Str""));
  userSearchFragment.add(userDirectoryPanel);
  if (isGroupOwnership.getObject()) {
    ownerContainer.add(groupSearchFragment);
  }
 else {
    ownerContainer.add(userSearchFragment);
  }
  final AjaxTextFieldPanel userOwner=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(groupWrapper.getInnerObject(),""String_Node_Str""){
    private static final long serialVersionUID=-3743432456095828573L;
    @Override public String getObject(){
      if (groupWrapper.getInnerObject().getUserOwner() == null) {
        return StringUtils.EMPTY;
      }
 else {
        UserTO userTO=userRestClient.read(groupWrapper.getInnerObject().getUserOwner());
        if (userTO == null) {
          return StringUtils.EMPTY;
        }
 else {
          return String.format(""String_Node_Str"",userTO.getKey(),userTO.getUsername());
        }
      }
    }
    @Override public void setObject(    final String object){
      if (StringUtils.isBlank(object)) {
        groupWrapper.getInnerObject().setUserOwner(null);
      }
 else {
        final Matcher matcher=owner.matcher(object);
        if (matcher.matches()) {
          groupWrapper.getInnerObject().setUserOwner(matcher.group(1));
        }
      }
    }
  }
,false);
  userOwner.setPlaceholder(""String_Node_Str"");
  userOwner.hideLabel();
  userOwner.setReadOnly(true).setOutputMarkupId(true);
  userSearchFragment.add(userOwner);
  final IndicatingAjaxLink<Void> userOwnerReset=new IndicatingAjaxLink<Void>(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      send(Ownership.this,Broadcast.EXACT,new GroupSelectionDirectoryPanel.ItemSelection<GroupTO>(target,null));
    }
  }
;
  userSearchFragment.add(userOwnerReset);
  final AjaxTextFieldPanel groupOwner=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(groupWrapper.getInnerObject(),""String_Node_Str""){
    private static final long serialVersionUID=-3743432456095828573L;
    @Override public String getObject(){
      if (groupWrapper.getInnerObject().getGroupOwner() == null) {
        return StringUtils.EMPTY;
      }
 else {
        GroupTO groupTO=groupRestClient.read(groupWrapper.getInnerObject().getGroupOwner());
        if (groupTO == null) {
          return StringUtils.EMPTY;
        }
 else {
          return String.format(""String_Node_Str"",groupTO.getKey(),groupTO.getName());
        }
      }
    }
    @Override public void setObject(    final String object){
      if (StringUtils.isBlank(object)) {
        groupWrapper.getInnerObject().setGroupOwner(null);
      }
 else {
        final Matcher matcher=owner.matcher(object);
        if (matcher.matches()) {
          groupWrapper.getInnerObject().setGroupOwner(matcher.group(1));
        }
      }
    }
  }
,false);
  groupOwner.setPlaceholder(""String_Node_Str"");
  groupOwner.hideLabel();
  groupOwner.setReadOnly(true).setOutputMarkupId(true);
  groupSearchFragment.add(groupOwner);
  final IndicatingAjaxLink<Void> groupOwnerReset=new IndicatingAjaxLink<Void>(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      send(Ownership.this,Broadcast.EXACT,new GroupSelectionDirectoryPanel.ItemSelection<GroupTO>(target,null));
    }
  }
;
  groupSearchFragment.add(groupOwnerReset);
}","public Ownership(final GroupWrapper groupWrapper,final PageReference pageRef){
  super();
  setTitleModel(new ResourceModel(""String_Node_Str""));
  this.wrapper=groupWrapper;
  isGroupOwnership=Model.of(groupWrapper.getInnerObject().getGroupOwner() != null);
  final BootstrapToggleConfig config=new BootstrapToggleConfig().withOnStyle(BootstrapToggleConfig.Style.info).withOffStyle(BootstrapToggleConfig.Style.warning).withSize(BootstrapToggleConfig.Size.mini);
  add(new BootstrapToggle(""String_Node_Str"",new Model<Boolean>(){
    private static final long serialVersionUID=6062041315055645807L;
    @Override public Boolean getObject(){
      return isGroupOwnership.getObject();
    }
  }
,config){
    private static final long serialVersionUID=2969634208049189343L;
    @Override protected IModel<String> getOffLabel(){
      return Model.of(""String_Node_Str"");
    }
    @Override protected IModel<String> getOnLabel(){
      return Model.of(""String_Node_Str"");
    }
    @Override protected CheckBox newCheckBox(    final String id,    final IModel<Boolean> model){
      final CheckBox checkBox=super.newCheckBox(id,model);
      checkBox.add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE){
        private static final long serialVersionUID=1L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          isGroupOwnership.setObject(!isGroupOwnership.getObject());
          if (isGroupOwnership.getObject()) {
            ownerContainer.addOrReplace(groupSearchFragment);
            groupDirectoryPanel.search(null,target);
          }
 else {
            ownerContainer.addOrReplace(userSearchFragment);
            userDirectoryPanel.search(null,target);
          }
          target.add(ownerContainer);
        }
      }
);
      return checkBox;
    }
  }
);
  ownerContainer=new WebMarkupContainer(""String_Node_Str"");
  ownerContainer.setOutputMarkupId(true);
  this.add(ownerContainer);
  groupSearchFragment=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
  groupSearchPanel=new GroupSearchPanel.Builder(new ListModel<>(new ArrayList<SearchClause>())).required(false).enableSearch().build(""String_Node_Str"");
  groupSearchFragment.add(groupSearchPanel.setRenderBodyOnly(true));
  AnyTypeTO anyTypeTO=anyTypeRestClient.read(AnyTypeKind.GROUP.name());
  groupDirectoryPanel=GroupSelectionDirectoryPanel.class.cast(new GroupSelectionDirectoryPanel.Builder(anyTypeClassRestClient.list(anyTypeTO.getClasses()),anyTypeTO.getKey(),pageRef).build(""String_Node_Str""));
  groupSearchFragment.add(groupDirectoryPanel);
  userSearchFragment=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
  userSearchPanel=UserSearchPanel.class.cast(new UserSearchPanel.Builder(new ListModel<>(new ArrayList<SearchClause>())).required(false).enableSearch().build(""String_Node_Str""));
  userSearchFragment.add(userSearchPanel.setRenderBodyOnly(true));
  anyTypeTO=anyTypeRestClient.read(AnyTypeKind.USER.name());
  userDirectoryPanel=UserSelectionDirectoryPanel.class.cast(new UserSelectionDirectoryPanel.Builder(anyTypeClassRestClient.list(anyTypeTO.getClasses()),anyTypeTO.getKey(),pageRef).build(""String_Node_Str""));
  userSearchFragment.add(userDirectoryPanel);
  if (isGroupOwnership.getObject()) {
    ownerContainer.add(groupSearchFragment);
  }
 else {
    ownerContainer.add(userSearchFragment);
  }
  final AjaxTextFieldPanel userOwner=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(groupWrapper.getInnerObject(),""String_Node_Str""){
    private static final long serialVersionUID=-3743432456095828573L;
    @Override public String getObject(){
      if (groupWrapper.getInnerObject().getUserOwner() == null) {
        return StringUtils.EMPTY;
      }
 else {
        UserTO userTO=userRestClient.read(groupWrapper.getInnerObject().getUserOwner());
        if (userTO == null) {
          return StringUtils.EMPTY;
        }
 else {
          return String.format(""String_Node_Str"",userTO.getKey(),userTO.getUsername());
        }
      }
    }
    @Override public void setObject(    final String object){
      if (StringUtils.isBlank(object)) {
        groupWrapper.getInnerObject().setUserOwner(null);
      }
 else {
        final Matcher matcher=owner.matcher(object);
        if (matcher.matches()) {
          groupWrapper.getInnerObject().setUserOwner(matcher.group(1));
        }
      }
    }
  }
,false);
  userOwner.setPlaceholder(""String_Node_Str"");
  userOwner.hideLabel();
  userOwner.setReadOnly(true).setOutputMarkupId(true);
  userSearchFragment.add(userOwner);
  final IndicatingAjaxLink<Void> userOwnerReset=new IndicatingAjaxLink<Void>(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      send(Ownership.this,Broadcast.EXACT,new GroupSelectionDirectoryPanel.ItemSelection<GroupTO>(target,null));
    }
  }
;
  userSearchFragment.add(userOwnerReset);
  final AjaxTextFieldPanel groupOwner=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(groupWrapper.getInnerObject(),""String_Node_Str""){
    private static final long serialVersionUID=-3743432456095828573L;
    @Override public String getObject(){
      if (groupWrapper.getInnerObject().getGroupOwner() == null) {
        return StringUtils.EMPTY;
      }
 else {
        GroupTO groupTO=groupRestClient.read(groupWrapper.getInnerObject().getGroupOwner());
        if (groupTO == null) {
          return StringUtils.EMPTY;
        }
 else {
          return String.format(""String_Node_Str"",groupTO.getKey(),groupTO.getName());
        }
      }
    }
    @Override public void setObject(    final String object){
      if (StringUtils.isBlank(object)) {
        groupWrapper.getInnerObject().setGroupOwner(null);
      }
 else {
        final Matcher matcher=owner.matcher(object);
        if (matcher.matches()) {
          groupWrapper.getInnerObject().setGroupOwner(matcher.group(1));
        }
      }
    }
  }
,false);
  groupOwner.setPlaceholder(""String_Node_Str"");
  groupOwner.hideLabel();
  groupOwner.setReadOnly(true).setOutputMarkupId(true);
  groupSearchFragment.add(groupOwner);
  final IndicatingAjaxLink<Void> groupOwnerReset=new IndicatingAjaxLink<Void>(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      send(Ownership.this,Broadcast.EXACT,new GroupSelectionDirectoryPanel.ItemSelection<GroupTO>(target,null));
    }
  }
;
  groupSearchFragment.add(groupOwnerReset);
}"
60461,"public <T extends AnyTO>PlainAttrs(final T anyTO,final Form<?> form,final AjaxWizard.Mode mode,final List<String> anyTypeClasses,final List<String> whichPlainAttrs){
  super(anyTO,anyTypeClasses,whichPlainAttrs);
  this.mode=mode;
  add(new ListView<AttrTO>(""String_Node_Str"",attrTOs){
    private static final long serialVersionUID=9101744072914090143L;
    @Override public void renderHead(    final IHeaderResponse response){
      super.renderHead(response);
      if (attrTOs.getObject().isEmpty()) {
        response.render(OnDomReadyHeaderItem.forScript(String.format(""String_Node_Str"",getString(""String_Node_Str""))));
      }
    }
    @Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected void populateItem(    final ListItem<AttrTO> item){
      AttrTO attrTO=item.getModelObject();
      FieldPanel panel=getFieldPanel(schemas.get(attrTO.getSchema()));
      if (mode == AjaxWizard.Mode.TEMPLATE || !schemas.get(attrTO.getSchema()).isMultivalue()) {
        item.add(panel);
        panel.setNewModel(attrTO.getValues());
      }
 else {
        item.add(new MultiFieldPanel.Builder<>(new PropertyModel<List<String>>(attrTO,""String_Node_Str"")).build(""String_Node_Str"",attrTO.getSchema(),panel));
      }
    }
  }
);
}","public <T extends AnyTO>PlainAttrs(final T anyTO,final Form<?> form,final AjaxWizard.Mode mode,final List<String> anyTypeClasses,final List<String> whichPlainAttrs){
  super(anyTO,anyTypeClasses,whichPlainAttrs);
  this.mode=mode;
  setTitleModel(new ResourceModel(""String_Node_Str""));
  add(new ListView<AttrTO>(""String_Node_Str"",attrTOs){
    private static final long serialVersionUID=9101744072914090143L;
    @Override public void renderHead(    final IHeaderResponse response){
      super.renderHead(response);
      if (attrTOs.getObject().isEmpty()) {
        response.render(OnDomReadyHeaderItem.forScript(String.format(""String_Node_Str"",getString(""String_Node_Str""))));
      }
    }
    @Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) protected void populateItem(    final ListItem<AttrTO> item){
      AttrTO attrTO=item.getModelObject();
      FieldPanel panel=getFieldPanel(schemas.get(attrTO.getSchema()));
      if (mode == AjaxWizard.Mode.TEMPLATE || !schemas.get(attrTO.getSchema()).isMultivalue()) {
        item.add(panel);
        panel.setNewModel(attrTO.getValues());
      }
 else {
        item.add(new MultiFieldPanel.Builder<>(new PropertyModel<List<String>>(attrTO,""String_Node_Str"")).build(""String_Node_Str"",attrTO.getSchema(),panel));
      }
    }
  }
);
}"
60462,"public Relationships(final AnyTO anyTO,final PageReference pageRef){
  super();
  this.anyTO=anyTO;
  this.pageRef=pageRef;
  add(getViewFragment().setRenderBodyOnly(true));
}","public Relationships(final AnyTO anyTO,final PageReference pageRef){
  super();
  setTitleModel(new ResourceModel(""String_Node_Str""));
  this.anyTO=anyTO;
  this.pageRef=pageRef;
  add(getViewFragment().setRenderBodyOnly(true));
}"
60463,"public <T extends AnyTO>VirAttrs(final T anyTO,final AjaxWizard.Mode mode,final List<String> anyTypeClasses,final List<String> whichVirAttrs){
  super(anyTO,anyTypeClasses,whichVirAttrs);
  add(new ListView<AttrTO>(""String_Node_Str"",attrTOs){
    private static final long serialVersionUID=9101744072914090143L;
    @Override public void renderHead(    final IHeaderResponse response){
      super.renderHead(response);
      if (attrTOs.getObject().isEmpty()) {
        response.render(OnDomReadyHeaderItem.forScript(String.format(""String_Node_Str"",getString(""String_Node_Str""))));
      }
    }
    @Override @SuppressWarnings(""String_Node_Str"") protected void populateItem(    final ListItem<AttrTO> item){
      AttrTO attrTO=item.getModelObject();
      attrTO.setReadonly(attrTO.isReadonly());
      final AjaxTextFieldPanel panel=new AjaxTextFieldPanel(""String_Node_Str"",attrTO.getSchema(),new Model<String>(),false);
      if (mode == AjaxWizard.Mode.TEMPLATE) {
        item.add(panel.enableJexlHelp().setEnabled(!attrTO.isReadonly()));
      }
 else {
        item.add(new MultiFieldPanel.Builder<>(new PropertyModel<List<String>>(attrTO,""String_Node_Str"")).build(""String_Node_Str"",attrTO.getSchema(),panel).setEnabled(!attrTO.isReadonly()));
      }
    }
  }
);
}","public <T extends AnyTO>VirAttrs(final T anyTO,final AjaxWizard.Mode mode,final List<String> anyTypeClasses,final List<String> whichVirAttrs){
  super(anyTO,anyTypeClasses,whichVirAttrs);
  setTitleModel(new ResourceModel(""String_Node_Str""));
  add(new ListView<AttrTO>(""String_Node_Str"",attrTOs){
    private static final long serialVersionUID=9101744072914090143L;
    @Override public void renderHead(    final IHeaderResponse response){
      super.renderHead(response);
      if (attrTOs.getObject().isEmpty()) {
        response.render(OnDomReadyHeaderItem.forScript(String.format(""String_Node_Str"",getString(""String_Node_Str""))));
      }
    }
    @Override @SuppressWarnings(""String_Node_Str"") protected void populateItem(    final ListItem<AttrTO> item){
      AttrTO attrTO=item.getModelObject();
      attrTO.setReadonly(attrTO.isReadonly());
      final AjaxTextFieldPanel panel=new AjaxTextFieldPanel(""String_Node_Str"",attrTO.getSchema(),new Model<String>(),false);
      if (mode == AjaxWizard.Mode.TEMPLATE) {
        item.add(panel.enableJexlHelp().setEnabled(!attrTO.isReadonly()));
      }
 else {
        item.add(new MultiFieldPanel.Builder<>(new PropertyModel<List<String>>(attrTO,""String_Node_Str"")).build(""String_Node_Str"",attrTO.getSchema(),panel).setEnabled(!attrTO.isReadonly()));
      }
    }
  }
);
}"
60464,"/** 
 * Split an attribute value recurring on provided literals/tokens.
 * @param attrValue value to be split
 * @param literals literals/tokens
 * @return split value
 */
private List<String> split(final String attrValue,final List<String> literals){
  final List<String> attrValues=new ArrayList<>();
  if (literals.isEmpty()) {
    attrValues.add(attrValue);
  }
 else {
    for (    String token : attrValue.split(Pattern.quote(literals.get(0)))) {
      attrValues.addAll(split(token,literals.subList(1,literals.size())));
    }
  }
  return attrValues;
}","/** 
 * Split an attribute value recurring on provided literals/tokens.
 * @param attrValue value to be split
 * @param literals literals/tokens
 * @return split value
 */
private List<String> split(final String attrValue,final List<String> literals){
  final List<String> attrValues=new ArrayList<>();
  if (literals.isEmpty()) {
    attrValues.add(attrValue);
  }
 else {
    for (    String token : attrValue.split(Pattern.quote(literals.get(0)))) {
      if (!token.isEmpty()) {
        attrValues.addAll(split(token,literals.subList(1,literals.size())));
      }
    }
  }
  return attrValues;
}"
60465,"/** 
 * Find any objects based on mapped uid value (or previous uid value, if updated).
 * @param uid for finding by connObjectKey
 * @param connObj for finding by attribute value
 * @param provision external resource
 * @param anyUtils any util
 * @return list of matching users / groups
 */
public List<Long> findExisting(final String uid,final ConnectorObject connObj,final Provision provision,final AnyUtils anyUtils){
  PullPolicySpec pullPolicySpec=null;
  if (provision.getResource().getPullPolicy() != null) {
    pullPolicySpec=provision.getResource().getPullPolicy().getSpecification();
  }
  PullCorrelationRule pullRule=null;
  if (pullPolicySpec != null) {
    pullRule=getCorrelationRule(provision,pullPolicySpec);
  }
  return pullRule == null ? findByConnObjectKeyItem(uid,provision,anyUtils) : findByCorrelationRule(connObj,pullRule,anyUtils.getAnyTypeKind());
}","/** 
 * Find any objects based on mapped uid value (or previous uid value, if updated).
 * @param uid for finding by connObjectKey
 * @param connObj for finding by attribute value
 * @param provision external resource
 * @param anyUtils any util
 * @return list of matching users / groups
 */
public List<Long> findExisting(final String uid,final ConnectorObject connObj,final Provision provision,final AnyUtils anyUtils){
  PullPolicySpec pullPolicySpec=null;
  if (provision.getResource().getPullPolicy() != null) {
    pullPolicySpec=provision.getResource().getPullPolicy().getSpecification();
  }
  PullCorrelationRule pullRule=null;
  if (pullPolicySpec != null) {
    pullRule=getCorrelationRule(provision,pullPolicySpec);
  }
  try {
    return pullRule == null ? findByConnObjectKeyItem(uid,provision,anyUtils) : findByCorrelationRule(connObj,pullRule,anyUtils.getAnyTypeKind());
  }
 catch (  RuntimeException e) {
    return Collections.<Long>emptyList();
  }
}"
60466,"protected AbstractSearchPanel(final String id,final AnyTypeKind kind,final String type,final Builder<?> builder){
  super(id);
  populate();
  this.model=builder.model;
  this.typeKind=kind;
  this.type=type;
  this.required=builder.required;
  this.enableSearch=builder.enableSearch;
  setOutputMarkupId(true);
  searchFormContainer=new WebMarkupContainer(""String_Node_Str"");
  searchFormContainer.setOutputMarkupId(true);
  add(searchFormContainer);
  final SearchClausePanel searchClausePanel=new SearchClausePanel(""String_Node_Str"",""String_Node_Str"",Model.of(new SearchClause()),required,types,anames,dnames,groupNames,resourceNames);
  if (enableSearch) {
    searchClausePanel.enableSearch();
  }
  final MultiFieldPanel.Builder<SearchClause> searchView=new MultiFieldPanel.Builder<SearchClause>(model){
    private static final long serialVersionUID=1L;
    @Override protected SearchClause newModelObject(){
      return new SearchClause();
    }
  }
;
  searchFormContainer.add(searchView.build(""String_Node_Str"",""String_Node_Str"",searchClausePanel).hideLabel());
}","protected AbstractSearchPanel(final String id,final AnyTypeKind kind,final String type,final Builder<?> builder){
  super(id);
  populate();
  this.model=builder.model;
  this.typeKind=kind;
  this.type=type;
  this.required=builder.required;
  this.enableSearch=builder.enableSearch;
  setOutputMarkupId(true);
  searchFormContainer=new WebMarkupContainer(""String_Node_Str"");
  searchFormContainer.setOutputMarkupId(true);
  add(searchFormContainer);
  final SearchClausePanel searchClausePanel=new SearchClausePanel(""String_Node_Str"",""String_Node_Str"",Model.of(new SearchClause()),required,types,anames,dnames,groupNames,roleNames,resourceNames);
  if (enableSearch) {
    searchClausePanel.enableSearch();
  }
  final MultiFieldPanel.Builder<SearchClause> searchView=new MultiFieldPanel.Builder<SearchClause>(model){
    private static final long serialVersionUID=1L;
    @Override protected SearchClause newModelObject(){
      return new SearchClause();
    }
  }
;
  searchFormContainer.add(searchView.build(""String_Node_Str"",""String_Node_Str"",searchClausePanel).hideLabel());
}"
60467,"@Override protected void populate(){
  super.populate();
  this.types=new LoadableDetachableModel<List<SearchClause.Type>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<SearchClause.Type> load(){
      List<SearchClause.Type> result=new ArrayList<SearchClause.Type>();
      result.add(SearchClause.Type.ATTRIBUTE);
      result.add(SearchClause.Type.MEMBERSHIP);
      result.add(SearchClause.Type.RESOURCE);
      return result;
    }
  }
;
  this.groupNames=new LoadableDetachableModel<List<Pair<Long,String>>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<Pair<Long,String>> load(){
      List<GroupTO> groupTOs=groupRestClient.list(""String_Node_Str"",-1,-1,new SortParam<>(""String_Node_Str"",true),null);
      List<Pair<Long,String>> result=new ArrayList<>(groupTOs.size());
      for (      GroupTO group : groupTOs) {
        result.add(Pair.of(group.getKey(),group.getName()));
      }
      return result;
    }
  }
;
}","@Override protected void populate(){
  super.populate();
  this.types=new LoadableDetachableModel<List<SearchClause.Type>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<SearchClause.Type> load(){
      return getAvailableTypes();
    }
  }
;
  this.groupNames=new LoadableDetachableModel<Map<Long,String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected Map<Long,String> load(){
      List<GroupTO> groupTOs=groupRestClient.list(""String_Node_Str"",-1,-1,new SortParam<>(""String_Node_Str"",true),null);
      final Map<Long,String> result=new HashMap<>(groupTOs.size());
      for (      GroupTO group : groupTOs) {
        result.put(group.getKey(),group.getName());
      }
      return result;
    }
  }
;
}"
60468,"@Override protected List<Pair<Long,String>> load(){
  List<GroupTO> groupTOs=groupRestClient.list(""String_Node_Str"",-1,-1,new SortParam<>(""String_Node_Str"",true),null);
  List<Pair<Long,String>> result=new ArrayList<>(groupTOs.size());
  for (  GroupTO group : groupTOs) {
    result.add(Pair.of(group.getKey(),group.getName()));
  }
  return result;
}","@Override protected Map<Long,String> load(){
  List<GroupTO> groupTOs=groupRestClient.list(""String_Node_Str"",-1,-1,new SortParam<>(""String_Node_Str"",true),null);
  final Map<Long,String> result=new HashMap<>(groupTOs.size());
  for (  GroupTO group : groupTOs) {
    result.put(group.getKey(),group.getName());
  }
  return result;
}"
60469,"@Override protected void populate(){
  super.populate();
  this.types=new LoadableDetachableModel<List<SearchClause.Type>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<SearchClause.Type> load(){
      final List<SearchClause.Type> result=new ArrayList<>();
      result.add(SearchClause.Type.ATTRIBUTE);
      result.add(SearchClause.Type.RESOURCE);
      return result;
    }
  }
;
  this.groupNames=new LoadableDetachableModel<List<Pair<Long,String>>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<Pair<Long,String>> load(){
      return Collections.<Pair<Long,String>>emptyList();
    }
  }
;
}","@Override protected void populate(){
  super.populate();
  this.types=new LoadableDetachableModel<List<SearchClause.Type>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<SearchClause.Type> load(){
      final List<SearchClause.Type> result=new ArrayList<>();
      result.add(SearchClause.Type.ATTRIBUTE);
      result.add(SearchClause.Type.RESOURCE);
      return result;
    }
  }
;
  this.groupNames=new LoadableDetachableModel<Map<Long,String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected Map<Long,String> load(){
      return Collections.<Long,String>emptyMap();
    }
  }
;
}"
60470,"@Override protected List<Pair<Long,String>> load(){
  return Collections.<Pair<Long,String>>emptyList();
}","@Override protected Map<Long,String> load(){
  return Collections.<Long,String>emptyMap();
}"
60471,"@Override protected WizardMgtPanel<T> newInstance(final String id){
  return new ListViewPanel<T>(id,items,reference,includes,actions,check,reuseItem,model){
    private static final long serialVersionUID=1L;
    @Override protected Component getValueComponent(    final String key,    final T bean){
      return Builder.this.getValueComponent(key,bean);
    }
  }
;
}","@Override protected WizardMgtPanel<T> newInstance(final String id){
  return new ListViewPanel<T>(id,items,reference,includes,actions,check,reuseItem,model){
    private static final long serialVersionUID=1L;
    @Override protected Component getValueComponent(    final String key,    final T bean){
      return Builder.this.getValueComponent(key,bean);
    }
    @Override protected T getActualItem(    final T item,    final List<T> list){
      return Builder.this.getActualItem(item,list);
    }
  }
;
}"
60472,"@Override @SuppressWarnings(""String_Node_Str"") public void onEvent(final IEvent<?> event){
  if (event.getPayload() instanceof AjaxWizard.NewItemEvent) {
    final T item=((AjaxWizard.NewItemEvent<T>)event.getPayload()).getItem();
    final AjaxRequestTarget target=((AjaxWizard.NewItemEvent<T>)event.getPayload()).getTarget();
    if (event.getPayload() instanceof AjaxWizard.NewItemFinishEvent) {
      if (item != null && !this.listOfItems.contains(item)) {
        this.listOfItems.add(item);
      }
    }
    target.add(ListViewPanel.this);
    super.onEvent(event);
  }
 else   if (event.getPayload() instanceof ListViewReload) {
    ((ListViewReload)event.getPayload()).getTarget().add(ListViewPanel.this);
  }
 else {
    super.onEvent(event);
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public void onEvent(final IEvent<?> event){
  if (event.getPayload() instanceof AjaxWizard.NewItemEvent) {
    final T item=((AjaxWizard.NewItemEvent<T>)event.getPayload()).getItem();
    final AjaxRequestTarget target=((AjaxWizard.NewItemEvent<T>)event.getPayload()).getTarget();
    if (event.getPayload() instanceof AjaxWizard.NewItemFinishEvent) {
      final T old=getActualItem(item,ListViewPanel.this.listOfItems);
      int indexOf=ListViewPanel.this.listOfItems.size();
      if (old != null) {
        indexOf=ListViewPanel.this.listOfItems.indexOf(old);
        ListViewPanel.this.listOfItems.remove(old);
      }
      ListViewPanel.this.listOfItems.add(indexOf,item);
    }
    target.add(ListViewPanel.this);
    super.onEvent(event);
  }
 else   if (event.getPayload() instanceof ListViewReload) {
    ((ListViewReload)event.getPayload()).getTarget().add(ListViewPanel.this);
  }
 else {
    super.onEvent(event);
  }
}"
60473,"/** 
 * Table view of a list of beans.
 * @param id id.
 * @param list list of item.
 * @param reference list item reference class.
 * @param includes Used to sort and restrict the set of bean's fields to be shown.
 * @param actions item actions.
 */
private ListViewPanel(final String id,final List<T> list,final Class<T> reference,final List<String> includes,final ActionLinksPanel.Builder<T> actions,final CheckAvailability check,final boolean reuseItem,final IModel<? extends Collection<T>> model){
  super(id);
  setOutputMarkupId(true);
  this.check=Model.of(check);
  addInnerObject(new Label(""String_Node_Str"",new ResourceModel(""String_Node_Str"",StringUtils.EMPTY)));
  final CheckGroup<T> checkGroup=new CheckGroup<>(""String_Node_Str"",model);
  checkGroup.setOutputMarkupId(true);
  checkGroup.add(new AjaxFormChoiceComponentUpdatingBehavior(){
    private static final long serialVersionUID=-151291731388673682L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
    }
  }
);
  addInnerObject(checkGroup);
  groupSelector=new CheckGroupSelector(""String_Node_Str"",checkGroup);
  addInnerObject(groupSelector.setOutputMarkupId(true).setOutputMarkupPlaceholderTag(true).setVisible(this.check.getObject() == CheckAvailability.AVAILABLE));
  final List<String> toBeIncluded;
  if (includes == null || includes.isEmpty()) {
    toBeIncluded=new ArrayList<>();
    for (    Field field : Arrays.asList(reference.getDeclaredFields())) {
      toBeIncluded.add(field.getName());
    }
  }
 else {
    toBeIncluded=includes;
  }
  if (toBeIncluded.isEmpty()) {
    LOG.warn(""String_Node_Str"",reference.getName());
    listOfItems=new ArrayList<>();
  }
 else   if (list == null || list.isEmpty()) {
    LOG.info(""String_Node_Str"");
    listOfItems=new ArrayList<>();
  }
 else {
    listOfItems=list;
    if (LOG.isDebugEnabled()) {
      for (      String field : toBeIncluded) {
        LOG.debug(""String_Node_Str"",field);
      }
    }
  }
  addInnerObject(header(toBeIncluded));
  final ListView<T> beans=new ListView<T>(""String_Node_Str"",listOfItems){
    private static final long serialVersionUID=1L;
    @Override protected void populateItem(    final ListItem<T> beanItem){
      beanItem.add(new Check<>(""String_Node_Str"",beanItem.getModel(),checkGroup).setOutputMarkupId(true).setOutputMarkupPlaceholderTag(true).setVisible(ListViewPanel.this.check.getObject() == CheckAvailability.AVAILABLE || ListViewPanel.this.check.getObject() == CheckAvailability.DISABLED).setEnabled(ListViewPanel.this.check.getObject() == CheckAvailability.AVAILABLE));
      final T bean=beanItem.getModelObject();
      final ListView<String> fields=new ListView<String>(""String_Node_Str"",toBeIncluded){
        private static final long serialVersionUID=1L;
        @Override protected void populateItem(        final ListItem<String> fieldItem){
          fieldItem.add(getValueComponent(fieldItem.getModelObject(),bean));
        }
      }
;
      beanItem.add(fields);
      beanItem.add(actions.build(""String_Node_Str"",bean));
    }
  }
;
  beans.setOutputMarkupId(true);
  beans.setReuseItems(reuseItem);
  beans.setRenderBodyOnly(true);
  checkGroup.add(beans);
}","/** 
 * Table view of a list of beans.
 * @param id id.
 * @param list list of item.
 * @param reference list item reference class.
 * @param includes Used to sort and restrict the set of bean's fields to be shown.
 * @param actions item actions.
 */
private ListViewPanel(final String id,final List<T> list,final Class<T> reference,final List<String> includes,final ActionLinksPanel.Builder<T> actions,final CheckAvailability check,final boolean reuseItem,final IModel<? extends Collection<T>> model){
  super(id);
  setOutputMarkupId(true);
  this.check=Model.of(check);
  addInnerObject(new Label(""String_Node_Str"",new ResourceModel(""String_Node_Str"",StringUtils.EMPTY)));
  final CheckGroup<T> checkGroup=new CheckGroup<>(""String_Node_Str"",model);
  checkGroup.setOutputMarkupId(true);
  checkGroup.add(new AjaxFormChoiceComponentUpdatingBehavior(){
    private static final long serialVersionUID=-151291731388673682L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
    }
  }
);
  addInnerObject(checkGroup);
  groupSelector=new CheckGroupSelector(""String_Node_Str"",checkGroup);
  addInnerObject(groupSelector.setOutputMarkupId(true).setOutputMarkupPlaceholderTag(true).setVisible(this.check.getObject() == CheckAvailability.AVAILABLE));
  final List<String> toBeIncluded;
  if (includes == null || includes.isEmpty()) {
    toBeIncluded=new ArrayList<>();
    for (    Field field : Arrays.asList(reference.getDeclaredFields())) {
      toBeIncluded.add(field.getName());
    }
  }
 else {
    toBeIncluded=includes;
  }
  if (toBeIncluded.isEmpty()) {
    LOG.warn(""String_Node_Str"",reference.getName());
    listOfItems=new ArrayList<>();
  }
 else   if (list == null || list.isEmpty()) {
    LOG.info(""String_Node_Str"");
    listOfItems=new ArrayList<>();
  }
 else {
    listOfItems=list;
    if (LOG.isDebugEnabled()) {
      for (      String field : toBeIncluded) {
        LOG.debug(""String_Node_Str"",field);
      }
    }
  }
  addInnerObject(header(toBeIncluded));
  beans=new ListView<T>(""String_Node_Str"",listOfItems){
    private static final long serialVersionUID=1L;
    @Override protected void populateItem(    final ListItem<T> beanItem){
      beanItem.add(new Check<>(""String_Node_Str"",beanItem.getModel(),checkGroup).setOutputMarkupId(true).setOutputMarkupPlaceholderTag(true).setVisible(ListViewPanel.this.check.getObject() == CheckAvailability.AVAILABLE || ListViewPanel.this.check.getObject() == CheckAvailability.DISABLED).setEnabled(ListViewPanel.this.check.getObject() == CheckAvailability.AVAILABLE));
      final T bean=beanItem.getModelObject();
      final ListView<String> fields=new ListView<String>(""String_Node_Str"",toBeIncluded){
        private static final long serialVersionUID=1L;
        @Override protected void populateItem(        final ListItem<String> fieldItem){
          fieldItem.add(getValueComponent(fieldItem.getModelObject(),bean));
        }
      }
;
      beanItem.add(fields);
      beanItem.add(actions.build(""String_Node_Str"",bean));
    }
  }
;
  beans.setOutputMarkupId(true);
  beans.setReuseItems(reuseItem);
  beans.setRenderBodyOnly(true);
  checkGroup.add(beans);
}"
60474,"public boolean authenticate(final String username,final String password){
  boolean authenticated=false;
  try {
    client=SyncopeEnduserApplication.get().getClientFactory().setDomain(SyncopeConstants.MASTER_DOMAIN).create(username,password);
    Pair<Map<String,Set<String>>,UserTO> self=client.self();
    selfTO=self.getValue();
    this.username=username;
    this.password=password;
    this.bind();
    authenticated=true;
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
  return authenticated;
}","public boolean authenticate(final String username,final String password){
  boolean authenticated=false;
  try {
    client=SyncopeEnduserApplication.get().getClientFactory().setDomain(SyncopeConstants.MASTER_DOMAIN).create(username,password);
    Pair<Map<String,Set<String>>,UserTO> self=client.self();
    selfTO=self.getValue();
    this.username=username;
    this.password=password;
    this.bind();
    authenticated=true;
    services.clear();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
  return authenticated;
}"
60475,"@Override protected ResourceResponse newResourceResponse(final IResource.Attributes attributes){
  ResourceResponse response=new ResourceResponse();
  try {
    final CookieUtils sessionCookieUtils=SyncopeEnduserSession.get().getCookieUtils();
    if (sessionCookieUtils.getCookie(SyncopeEnduserConstants.XSRF_COOKIE) == null || StringUtils.isBlank(sessionCookieUtils.getCookie(SyncopeEnduserConstants.XSRF_COOKIE).getValue())) {
      LOG.info(""String_Node_Str"");
      sessionCookieUtils.save(SyncopeEnduserConstants.XSRF_COOKIE,SaltGenerator.generate(SyncopeEnduserSession.get().getId()));
    }
    response.setWriteCallback(new WriteCallback(){
      @Override public void writeData(      final IResource.Attributes attributes) throws IOException {
        attributes.getResponse().write(POJOHelper.serialize(syncopeTOAdapter.toSyncopeTORequest(SyncopeEnduserSession.get().getSyncopeTO())));
      }
    }
);
    response.setStatusCode(Response.Status.OK.getStatusCode());
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    response.setError(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),new StringBuilder().append(""String_Node_Str"").append(e.getMessage()).append(""String_Node_Str"").toString());
  }
  return response;
}","@Override protected ResourceResponse newResourceResponse(final IResource.Attributes attributes){
  ResourceResponse response=new ResourceResponse();
  try {
    final CookieUtils sessionCookieUtils=SyncopeEnduserSession.get().getCookieUtils();
    if (!SyncopeEnduserSession.get().isXsrfTokenGenerated() && (sessionCookieUtils.getCookie(SyncopeEnduserConstants.XSRF_COOKIE) == null || StringUtils.isBlank(sessionCookieUtils.getCookie(SyncopeEnduserConstants.XSRF_COOKIE).getValue()))) {
      LOG.info(""String_Node_Str"");
      SyncopeEnduserSession.get().setXsrfTokenGenerated(true);
      sessionCookieUtils.save(SyncopeEnduserConstants.XSRF_COOKIE,SaltGenerator.generate(SyncopeEnduserSession.get().getId()));
    }
    response.setWriteCallback(new WriteCallback(){
      @Override public void writeData(      final IResource.Attributes attributes) throws IOException {
        attributes.getResponse().write(POJOHelper.serialize(syncopeTOAdapter.toSyncopeTORequest(SyncopeEnduserSession.get().getSyncopeTO())));
      }
    }
);
    response.setStatusCode(Response.Status.OK.getStatusCode());
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    response.setError(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),new StringBuilder().append(""String_Node_Str"").append(e.getMessage()).append(""String_Node_Str"").toString());
  }
  return response;
}"
60476,"public BasePage(final PageParameters parameters){
  super(parameters);
  add(new Label(""String_Node_Str"",SyncopeConsoleApplication.get().getVersion()));
  add(new Label(""String_Node_Str"",SyncopeConsoleSession.get().getSelfTO().getUsername()));
  final WebMarkupContainer todosContainer=new WebMarkupContainer(""String_Node_Str"");
  add(todosContainer);
  Label todos=new Label(""String_Node_Str"",""String_Node_Str"");
  todosContainer.add(todos);
  if (SyncopeConsoleSession.get().owns(StandardEntitlement.WORKFLOW_FORM_LIST)) {
    todos.setDefaultModelObject(userWorkflowRestClient.getForms().size());
  }
  MetaDataRoleAuthorizationStrategy.authorize(todosContainer,WebPage.RENDER,StandardEntitlement.WORKFLOW_FORM_LIST);
  WebMarkupContainer liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Dashboard.class));
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Realms.class));
  MetaDataRoleAuthorizationStrategy.authorize(liContainer,WebPage.RENDER,StandardEntitlement.REALM_LIST);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Topology.class));
  MetaDataRoleAuthorizationStrategy.authorize(liContainer,WebPage.RENDER,String.format(""String_Node_Str"",StandardEntitlement.CONNECTOR_LIST,StandardEntitlement.RESOURCE_LIST));
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Reports.class));
  MetaDataRoleAuthorizationStrategy.authorize(liContainer,WebPage.RENDER,StandardEntitlement.REPORT_LIST);
  WebMarkupContainer confLIContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  add(confLIContainer);
  WebMarkupContainer confULContainer=new WebMarkupContainer(getULContainerId(""String_Node_Str""));
  confLIContainer.add(confULContainer);
  MetaDataRoleAuthorizationStrategy.authorize(liContainer,WebPage.RENDER,StandardEntitlement.CONFIGURATION_LIST);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  final BookmarkablePageLink<Page> securityQuestionLink=new BookmarkablePageLink<>(""String_Node_Str"",SecurityQuestions.class);
  liContainer.add(securityQuestionLink);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  final BookmarkablePageLink<Page> workflowLink=new BookmarkablePageLink<>(""String_Node_Str"",Workflow.class);
  MetaDataRoleAuthorizationStrategy.authorize(workflowLink,WebPage.ENABLE,StandardEntitlement.WORKFLOW_DEF_READ);
  liContainer.add(workflowLink);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  final BookmarkablePageLink<Page> logsLink=new BookmarkablePageLink<>(""String_Node_Str"",Logs.class);
  MetaDataRoleAuthorizationStrategy.authorize(logsLink,WebPage.ENABLE,StandardEntitlement.LOG_LIST);
  liContainer.add(logsLink);
  MetaDataRoleAuthorizationStrategy.authorize(liContainer,WebPage.RENDER,StandardEntitlement.LOG_LIST);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  BookmarkablePageLink<Page> typesLink=new BookmarkablePageLink<>(""String_Node_Str"",Types.class);
  MetaDataRoleAuthorizationStrategy.authorize(typesLink,WebPage.ENABLE,StandardEntitlement.SCHEMA_LIST);
  liContainer.add(typesLink);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Policies.class));
  MetaDataRoleAuthorizationStrategy.authorize(liContainer,WebPage.RENDER,StandardEntitlement.POLICY_LIST);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Layouts.class));
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Notifications.class));
  MetaDataRoleAuthorizationStrategy.authorize(liContainer,WebPage.RENDER,StandardEntitlement.NOTIFICATION_LIST);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",CamelRoutes.class));
  add(new Label(""String_Node_Str"",SyncopeConsoleSession.get().getDomain()));
  add(new BookmarkablePageLink<Page>(""String_Node_Str"",Logout.class));
  Component containingLI=get(getLIContainerId(getClass().getSimpleName().toLowerCase()));
  if (containingLI == null) {
    containingLI=confULContainer.get(getLIContainerId(getClass().getSimpleName().toLowerCase()));
  }
  if (containingLI != null) {
    containingLI.add(new Behavior(){
      private static final long serialVersionUID=1469628524240283489L;
      @Override public void onComponentTag(      final Component component,      final ComponentTag tag){
        tag.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
);
    if (confULContainer.getId().equals(containingLI.getParent().getId())) {
      confULContainer.add(new Behavior(){
        private static final long serialVersionUID=3109256773218160485L;
        @Override public void onComponentTag(        final Component component,        final ComponentTag tag){
          tag.put(""String_Node_Str"",""String_Node_Str"");
          tag.put(""String_Node_Str"",""String_Node_Str"");
        }
      }
);
      confLIContainer.add(new Behavior(){
        private static final long serialVersionUID=3109256773218160485L;
        @Override public void onComponentTag(        final Component component,        final ComponentTag tag){
          tag.put(""String_Node_Str"",""String_Node_Str"");
        }
      }
);
    }
  }
}","public BasePage(final PageParameters parameters){
  super(parameters);
  add(new Label(""String_Node_Str"",SyncopeConsoleApplication.get().getVersion()));
  add(new Label(""String_Node_Str"",SyncopeConsoleSession.get().getSelfTO().getUsername()));
  final WebMarkupContainer todosContainer=new WebMarkupContainer(""String_Node_Str"");
  add(todosContainer);
  Label todos=new Label(""String_Node_Str"",""String_Node_Str"");
  todosContainer.add(todos);
  if (SyncopeConsoleSession.get().owns(StandardEntitlement.WORKFLOW_FORM_LIST)) {
    todos.setDefaultModelObject(userWorkflowRestClient.getForms().size());
  }
  MetaDataRoleAuthorizationStrategy.authorize(todosContainer,WebPage.RENDER,StandardEntitlement.WORKFLOW_FORM_LIST);
  WebMarkupContainer liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Dashboard.class));
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Realms.class));
  MetaDataRoleAuthorizationStrategy.authorize(liContainer,WebPage.RENDER,StandardEntitlement.REALM_LIST);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Topology.class));
  MetaDataRoleAuthorizationStrategy.authorize(liContainer,WebPage.RENDER,String.format(""String_Node_Str"",StandardEntitlement.CONNECTOR_LIST,StandardEntitlement.RESOURCE_LIST));
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Reports.class));
  MetaDataRoleAuthorizationStrategy.authorize(liContainer,WebPage.RENDER,StandardEntitlement.REPORT_LIST);
  WebMarkupContainer confLIContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  add(confLIContainer);
  WebMarkupContainer confULContainer=new WebMarkupContainer(getULContainerId(""String_Node_Str""));
  confLIContainer.add(confULContainer);
  MetaDataRoleAuthorizationStrategy.authorize(liContainer,WebPage.RENDER,StandardEntitlement.CONFIGURATION_LIST);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  final BookmarkablePageLink<Page> workflowLink=new BookmarkablePageLink<>(""String_Node_Str"",Workflow.class);
  MetaDataRoleAuthorizationStrategy.authorize(workflowLink,WebPage.ENABLE,StandardEntitlement.WORKFLOW_DEF_READ);
  liContainer.add(workflowLink);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  final BookmarkablePageLink<Page> logsLink=new BookmarkablePageLink<>(""String_Node_Str"",Logs.class);
  MetaDataRoleAuthorizationStrategy.authorize(logsLink,WebPage.ENABLE,StandardEntitlement.LOG_LIST);
  liContainer.add(logsLink);
  MetaDataRoleAuthorizationStrategy.authorize(liContainer,WebPage.RENDER,StandardEntitlement.LOG_LIST);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  final BookmarkablePageLink<Page> secuityQuestionsLink=new BookmarkablePageLink<>(""String_Node_Str"",SecurityQuestions.class);
  liContainer.add(secuityQuestionsLink);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  BookmarkablePageLink<Page> typesLink=new BookmarkablePageLink<>(""String_Node_Str"",Types.class);
  MetaDataRoleAuthorizationStrategy.authorize(typesLink,WebPage.ENABLE,StandardEntitlement.SCHEMA_LIST);
  liContainer.add(typesLink);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Policies.class));
  MetaDataRoleAuthorizationStrategy.authorize(liContainer,WebPage.RENDER,StandardEntitlement.POLICY_LIST);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Layouts.class));
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Notifications.class));
  MetaDataRoleAuthorizationStrategy.authorize(liContainer,WebPage.RENDER,StandardEntitlement.NOTIFICATION_LIST);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",CamelRoutes.class));
  add(new Label(""String_Node_Str"",SyncopeConsoleSession.get().getDomain()));
  add(new BookmarkablePageLink<Page>(""String_Node_Str"",Logout.class));
  Component containingLI=get(getLIContainerId(getClass().getSimpleName().toLowerCase()));
  if (containingLI == null) {
    containingLI=confULContainer.get(getLIContainerId(getClass().getSimpleName().toLowerCase()));
  }
  if (containingLI != null) {
    containingLI.add(new Behavior(){
      private static final long serialVersionUID=1469628524240283489L;
      @Override public void onComponentTag(      final Component component,      final ComponentTag tag){
        tag.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
);
    if (confULContainer.getId().equals(containingLI.getParent().getId())) {
      confULContainer.add(new Behavior(){
        private static final long serialVersionUID=3109256773218160485L;
        @Override public void onComponentTag(        final Component component,        final ComponentTag tag){
          tag.put(""String_Node_Str"",""String_Node_Str"");
          tag.put(""String_Node_Str"",""String_Node_Str"");
        }
      }
);
      confLIContainer.add(new Behavior(){
        private static final long serialVersionUID=3109256773218160485L;
        @Override public void onComponentTag(        final Component component,        final ComponentTag tag){
          tag.put(""String_Node_Str"",""String_Node_Str"");
        }
      }
);
    }
  }
}"
60477,"@Override protected void onClickInternal(final AjaxRequestTarget target){
  securityQuestionModal.header(new ResourceModel(""String_Node_Str""));
  target.add(securityQuestionModal.setContent(buildModalPanel()));
  securityQuestionModal.addSumbitButton();
  securityQuestionModal.show(true);
}","@Override protected void onClickInternal(final AjaxRequestTarget target){
  securityQuestionModal.header(new ResourceModel(""String_Node_Str""));
  securityQuestionModal.setFormModel(new SecurityQuestionTO());
  securityQuestionModal.size(Modal.Size.Large);
  target.add(securityQuestionModal.setContent(new SecurityQuestionModalPanel(securityQuestionModal,getPageReference(),true)));
  securityQuestionModal.addSumbitButton();
  securityQuestionModal.show(true);
}"
60478,"public SecurityQuestions(final PageParameters parameters){
  super(parameters);
  final WebMarkupContainer content=new WebMarkupContainer(""String_Node_Str"");
  content.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
  content.setOutputMarkupId(true);
  add(content);
  securityQuestionModal=new BaseModal<>(""String_Node_Str"");
  addWindowWindowClosedCallback(securityQuestionModal);
  add(securityQuestionModal);
  final AjaxLink<Void> createLink=new ClearIndicatingAjaxLink<Void>(""String_Node_Str"",getPageReference()){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override protected void onClickInternal(    final AjaxRequestTarget target){
      securityQuestionModal.header(new ResourceModel(""String_Node_Str""));
      target.add(securityQuestionModal.setContent(buildModalPanel()));
      securityQuestionModal.addSumbitButton();
      securityQuestionModal.show(true);
    }
  }
;
  content.add(createLink);
  if (SyncopeConsoleSession.get().owns(StandardEntitlement.SECURITY_QUESTION_CREATE)) {
    MetaDataRoleAuthorizationStrategy.authorize(createLink,ENABLE,StandardEntitlement.SECURITY_QUESTION_CREATE);
  }
  securityQuestionsPanel=new SecurityQuestionsPanel(""String_Node_Str"",getPageReference(),securityQuestionModal);
  securityQuestionsPanel.setOutputMarkupId(true);
  content.add(securityQuestionsPanel);
}","public SecurityQuestions(final PageParameters parameters){
  super(parameters);
  final WebMarkupContainer content=new WebMarkupContainer(""String_Node_Str"");
  content.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
  content.setOutputMarkupId(true);
  add(content);
  securityQuestionModal=new BaseModal<>(""String_Node_Str"");
  addWindowWindowClosedCallback(securityQuestionModal);
  add(securityQuestionModal);
  final AjaxLink<Void> createLink=new ClearIndicatingAjaxLink<Void>(""String_Node_Str"",getPageReference()){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override protected void onClickInternal(    final AjaxRequestTarget target){
      securityQuestionModal.header(new ResourceModel(""String_Node_Str""));
      securityQuestionModal.setFormModel(new SecurityQuestionTO());
      securityQuestionModal.size(Modal.Size.Large);
      target.add(securityQuestionModal.setContent(new SecurityQuestionModalPanel(securityQuestionModal,getPageReference(),true)));
      securityQuestionModal.addSumbitButton();
      securityQuestionModal.show(true);
    }
  }
;
  content.add(createLink);
  if (SyncopeConsoleSession.get().owns(StandardEntitlement.SECURITY_QUESTION_CREATE)) {
    MetaDataRoleAuthorizationStrategy.authorize(createLink,ENABLE,StandardEntitlement.SECURITY_QUESTION_CREATE);
  }
  securityQuestionsPanel=new SecurityQuestionsPanel(""String_Node_Str"",getPageReference(),securityQuestionModal);
  securityQuestionsPanel.setOutputMarkupId(true);
  content.add(securityQuestionsPanel);
}"
60479,"public BasePage(final PageParameters parameters){
  super(parameters);
  add(new Label(""String_Node_Str"",SyncopeConsoleApplication.get().getVersion()));
  add(new Label(""String_Node_Str"",SyncopeConsoleSession.get().getSelfTO().getUsername()));
  final WebMarkupContainer todosContainer=new WebMarkupContainer(""String_Node_Str"");
  add(todosContainer);
  Label todos=new Label(""String_Node_Str"",""String_Node_Str"");
  todosContainer.add(todos);
  if (SyncopeConsoleSession.get().owns(StandardEntitlement.WORKFLOW_FORM_LIST)) {
    todos.setDefaultModelObject(userWorkflowRestClient.getForms().size());
  }
  MetaDataRoleAuthorizationStrategy.authorize(todosContainer,WebPage.RENDER,StandardEntitlement.WORKFLOW_FORM_LIST);
  WebMarkupContainer liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Dashboard.class));
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Realms.class));
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Topology.class));
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Reports.class));
  WebMarkupContainer confLIContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  add(confLIContainer);
  WebMarkupContainer confULContainer=new WebMarkupContainer(getULContainerId(""String_Node_Str""));
  confLIContainer.add(confULContainer);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  final BookmarkablePageLink<Page> securityQuestionLink=new BookmarkablePageLink<>(""String_Node_Str"",SecurityQuestions.class);
  MetaDataRoleAuthorizationStrategy.authorize(securityQuestionLink,WebPage.ENABLE,StandardEntitlement.SECURITY_QUESTION_CREATE);
  liContainer.add(securityQuestionLink);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  final BookmarkablePageLink<Page> workflowLink=new BookmarkablePageLink<>(""String_Node_Str"",Workflow.class);
  MetaDataRoleAuthorizationStrategy.authorize(workflowLink,WebPage.ENABLE,StandardEntitlement.WORKFLOW_DEF_READ);
  liContainer.add(workflowLink);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  final BookmarkablePageLink<Page> logsLink=new BookmarkablePageLink<>(""String_Node_Str"",Logs.class);
  MetaDataRoleAuthorizationStrategy.authorize(logsLink,WebPage.ENABLE,StandardEntitlement.LOG_LIST);
  liContainer.add(logsLink);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  BookmarkablePageLink<Page> typesLink=new BookmarkablePageLink<>(""String_Node_Str"",Types.class);
  MetaDataRoleAuthorizationStrategy.authorize(typesLink,WebPage.ENABLE,StandardEntitlement.SCHEMA_LIST);
  liContainer.add(typesLink);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Policies.class));
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Layouts.class));
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Notifications.class));
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",CamelRoutes.class));
  add(new Label(""String_Node_Str"",SyncopeConsoleSession.get().getDomain()));
  add(new BookmarkablePageLink<Page>(""String_Node_Str"",Logout.class));
  Component containingLI=get(getLIContainerId(getClass().getSimpleName().toLowerCase()));
  if (containingLI == null) {
    containingLI=confULContainer.get(getLIContainerId(getClass().getSimpleName().toLowerCase()));
  }
  if (containingLI != null) {
    containingLI.add(new Behavior(){
      private static final long serialVersionUID=1469628524240283489L;
      @Override public void onComponentTag(      final Component component,      final ComponentTag tag){
        tag.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
);
    if (confULContainer.getId().equals(containingLI.getParent().getId())) {
      confULContainer.add(new Behavior(){
        private static final long serialVersionUID=3109256773218160485L;
        @Override public void onComponentTag(        final Component component,        final ComponentTag tag){
          tag.put(""String_Node_Str"",""String_Node_Str"");
          tag.put(""String_Node_Str"",""String_Node_Str"");
        }
      }
);
      confLIContainer.add(new Behavior(){
        private static final long serialVersionUID=3109256773218160485L;
        @Override public void onComponentTag(        final Component component,        final ComponentTag tag){
          tag.put(""String_Node_Str"",""String_Node_Str"");
        }
      }
);
    }
  }
}","public BasePage(final PageParameters parameters){
  super(parameters);
  add(new Label(""String_Node_Str"",SyncopeConsoleApplication.get().getVersion()));
  add(new Label(""String_Node_Str"",SyncopeConsoleSession.get().getSelfTO().getUsername()));
  final WebMarkupContainer todosContainer=new WebMarkupContainer(""String_Node_Str"");
  add(todosContainer);
  Label todos=new Label(""String_Node_Str"",""String_Node_Str"");
  todosContainer.add(todos);
  if (SyncopeConsoleSession.get().owns(StandardEntitlement.WORKFLOW_FORM_LIST)) {
    todos.setDefaultModelObject(userWorkflowRestClient.getForms().size());
  }
  MetaDataRoleAuthorizationStrategy.authorize(todosContainer,WebPage.RENDER,StandardEntitlement.WORKFLOW_FORM_LIST);
  WebMarkupContainer liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Dashboard.class));
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Realms.class));
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Topology.class));
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Reports.class));
  WebMarkupContainer confLIContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  add(confLIContainer);
  WebMarkupContainer confULContainer=new WebMarkupContainer(getULContainerId(""String_Node_Str""));
  confLIContainer.add(confULContainer);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  final BookmarkablePageLink<Page> securityQuestionLink=new BookmarkablePageLink<>(""String_Node_Str"",SecurityQuestions.class);
  liContainer.add(securityQuestionLink);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  final BookmarkablePageLink<Page> workflowLink=new BookmarkablePageLink<>(""String_Node_Str"",Workflow.class);
  MetaDataRoleAuthorizationStrategy.authorize(workflowLink,WebPage.ENABLE,StandardEntitlement.WORKFLOW_DEF_READ);
  liContainer.add(workflowLink);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  final BookmarkablePageLink<Page> logsLink=new BookmarkablePageLink<>(""String_Node_Str"",Logs.class);
  MetaDataRoleAuthorizationStrategy.authorize(logsLink,WebPage.ENABLE,StandardEntitlement.LOG_LIST);
  liContainer.add(logsLink);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  BookmarkablePageLink<Page> typesLink=new BookmarkablePageLink<>(""String_Node_Str"",Types.class);
  MetaDataRoleAuthorizationStrategy.authorize(typesLink,WebPage.ENABLE,StandardEntitlement.SCHEMA_LIST);
  liContainer.add(typesLink);
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Policies.class));
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Layouts.class));
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  confULContainer.add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",Notifications.class));
  liContainer=new WebMarkupContainer(getLIContainerId(""String_Node_Str""));
  add(liContainer);
  liContainer.add(new BookmarkablePageLink<>(""String_Node_Str"",CamelRoutes.class));
  add(new Label(""String_Node_Str"",SyncopeConsoleSession.get().getDomain()));
  add(new BookmarkablePageLink<Page>(""String_Node_Str"",Logout.class));
  Component containingLI=get(getLIContainerId(getClass().getSimpleName().toLowerCase()));
  if (containingLI == null) {
    containingLI=confULContainer.get(getLIContainerId(getClass().getSimpleName().toLowerCase()));
  }
  if (containingLI != null) {
    containingLI.add(new Behavior(){
      private static final long serialVersionUID=1469628524240283489L;
      @Override public void onComponentTag(      final Component component,      final ComponentTag tag){
        tag.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
);
    if (confULContainer.getId().equals(containingLI.getParent().getId())) {
      confULContainer.add(new Behavior(){
        private static final long serialVersionUID=3109256773218160485L;
        @Override public void onComponentTag(        final Component component,        final ComponentTag tag){
          tag.put(""String_Node_Str"",""String_Node_Str"");
          tag.put(""String_Node_Str"",""String_Node_Str"");
        }
      }
);
      confLIContainer.add(new Behavior(){
        private static final long serialVersionUID=3109256773218160485L;
        @Override public void onComponentTag(        final Component component,        final ComponentTag tag){
          tag.put(""String_Node_Str"",""String_Node_Str"");
        }
      }
);
    }
  }
}"
60480,"@Override protected void onClickInternal(final AjaxRequestTarget target){
  securityQuestionModal.header(new ResourceModel(""String_Node_Str""));
  target.add(securityQuestionModal.setContent(new SecurityQuestionModalPanel(securityQuestionModal,getPageReference(),true)));
  securityQuestionModal.addSumbitButton();
  securityQuestionModal.show(true);
}","@Override protected void onClickInternal(final AjaxRequestTarget target){
  securityQuestionModal.header(new ResourceModel(""String_Node_Str""));
  target.add(securityQuestionModal.setContent(buildModalPanel()));
  securityQuestionModal.addSumbitButton();
  securityQuestionModal.show(true);
}"
60481,"public SecurityQuestions(final PageParameters parameters){
  super(parameters);
  final WebMarkupContainer content=new WebMarkupContainer(""String_Node_Str"");
  content.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
  content.setOutputMarkupId(true);
  add(content);
  final BaseModal<SecurityQuestionTO> securityQuestionModal=new BaseModal<>(""String_Node_Str"");
  securityQuestionModal.setFormModel(new SecurityQuestionTO());
  securityQuestionModal.size(Modal.Size.Large);
  addWindowWindowClosedCallback(securityQuestionModal);
  add(securityQuestionModal);
  final AjaxLink<Void> createLink=new ClearIndicatingAjaxLink<Void>(""String_Node_Str"",getPageReference()){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override protected void onClickInternal(    final AjaxRequestTarget target){
      securityQuestionModal.header(new ResourceModel(""String_Node_Str""));
      target.add(securityQuestionModal.setContent(new SecurityQuestionModalPanel(securityQuestionModal,getPageReference(),true)));
      securityQuestionModal.addSumbitButton();
      securityQuestionModal.show(true);
    }
  }
;
  content.add(createLink);
  if (SyncopeConsoleSession.get().owns(StandardEntitlement.SECURITY_QUESTION_CREATE)) {
    MetaDataRoleAuthorizationStrategy.authorize(createLink,ENABLE,StandardEntitlement.SECURITY_QUESTION_CREATE);
  }
  securityQuestionsPanel=new SecurityQuestionsPanel(""String_Node_Str"",getPageReference(),securityQuestionModal);
  securityQuestionsPanel.setOutputMarkupId(true);
  content.add(securityQuestionsPanel);
}","public SecurityQuestions(final PageParameters parameters){
  super(parameters);
  final WebMarkupContainer content=new WebMarkupContainer(""String_Node_Str"");
  content.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
  content.setOutputMarkupId(true);
  add(content);
  securityQuestionModal=new BaseModal<>(""String_Node_Str"");
  addWindowWindowClosedCallback(securityQuestionModal);
  add(securityQuestionModal);
  final AjaxLink<Void> createLink=new ClearIndicatingAjaxLink<Void>(""String_Node_Str"",getPageReference()){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override protected void onClickInternal(    final AjaxRequestTarget target){
      securityQuestionModal.header(new ResourceModel(""String_Node_Str""));
      target.add(securityQuestionModal.setContent(buildModalPanel()));
      securityQuestionModal.addSumbitButton();
      securityQuestionModal.show(true);
    }
  }
;
  content.add(createLink);
  if (SyncopeConsoleSession.get().owns(StandardEntitlement.SECURITY_QUESTION_CREATE)) {
    MetaDataRoleAuthorizationStrategy.authorize(createLink,ENABLE,StandardEntitlement.SECURITY_QUESTION_CREATE);
  }
  securityQuestionsPanel=new SecurityQuestionsPanel(""String_Node_Str"",getPageReference(),securityQuestionModal);
  securityQuestionsPanel.setOutputMarkupId(true);
  content.add(securityQuestionsPanel);
}"
60482,"public SecurityQuestionDetailsPanel(final String id,final BaseModal<SecurityQuestionTO> modal){
  super(id);
  final WebMarkupContainer container=new WebMarkupContainer(""String_Node_Str"");
  container.setOutputMarkupId(true);
  add(container);
  final Form<SecurityQuestionTO> form=new Form<>(""String_Node_Str"");
  final SecurityQuestionTO securityQuestionTO=modal.getFormModel();
  form.setModel(new CompoundPropertyModel<>(securityQuestionTO));
  container.add(form);
  final AjaxTextFieldPanel key=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(securityQuestionTO,""String_Node_Str""));
  key.addRequiredLabel();
  final String keyModelObject=String.valueOf(key.getModelObject());
  key.setEnabled(keyModelObject == null || keyModelObject.isEmpty());
  form.add(key);
  final AjaxTextFieldPanel content=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(securityQuestionTO,""String_Node_Str""));
  content.addRequiredLabel();
  content.setEnabled(true);
  content.setVisible(true);
  form.add(content);
}","public SecurityQuestionDetailsPanel(final String id,final BaseModal<SecurityQuestionTO> modal){
  super(id);
  final WebMarkupContainer container=new WebMarkupContainer(""String_Node_Str"");
  container.setOutputMarkupId(true);
  add(container);
  final Form<SecurityQuestionTO> form=new Form<>(""String_Node_Str"");
  final SecurityQuestionTO securityQuestionTO=modal.getFormModel();
  form.setModel(new CompoundPropertyModel<>(securityQuestionTO));
  container.add(form);
  final AjaxTextFieldPanel key=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(securityQuestionTO,""String_Node_Str""));
  key.addRequiredLabel();
  final String keyModelObject=String.valueOf(key.getModelObject());
  key.setEnabled(keyModelObject == null || keyModelObject.isEmpty());
  form.add(key);
  final AjaxTextFieldPanel content=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(securityQuestionTO,""String_Node_Str""));
  content.addRequiredLabel();
  form.add(content);
}"
60483,"@Override public Group save(final Group group){
  if (group.getUDynMembership() != null) {
    List<User> matching=searchDAO.search(buildDynMembershipCond(group.getUDynMembership().getFIQLCond(),group.getRealm()),AnyTypeKind.USER);
    group.getUDynMembership().getMembers().clear();
    for (    User user : matching) {
      group.getUDynMembership().add(user);
    }
  }
  for (  ADynGroupMembership memb : group.getADynMemberships()) {
    List<AnyObject> matching=searchDAO.search(buildDynMembershipCond(memb.getFIQLCond(),group.getRealm()),AnyTypeKind.ANY_OBJECT);
    memb.getMembers().clear();
    for (    AnyObject anyObject : matching) {
      memb.add(anyObject);
    }
  }
  return super.save(group);
}","@Override public Group save(final Group group){
  Group merged=super.save(group);
  if (merged.getUDynMembership() != null) {
    List<User> matching=searchDAO.search(buildDynMembershipCond(merged.getUDynMembership().getFIQLCond(),merged.getRealm()),AnyTypeKind.USER);
    merged.getUDynMembership().getMembers().clear();
    for (    User user : matching) {
      merged.getUDynMembership().add(user);
    }
  }
  for (  ADynGroupMembership memb : merged.getADynMemberships()) {
    List<AnyObject> matching=searchDAO.search(buildDynMembershipCond(memb.getFIQLCond(),merged.getRealm()),AnyTypeKind.ANY_OBJECT);
    memb.getMembers().clear();
    for (    AnyObject anyObject : matching) {
      memb.add(anyObject);
    }
  }
  return merged;
}"
60484,"@Override public void run(final AbstractUIProcessHandler handler,final String[] args){
  final String installPath=args[0];
  final String mavenDir=args[1];
  final String groupId=args[2];
  final String artifactId=args[3];
  final String secretKey=args[4];
  final String anonymousKey=args[5];
  final String confDirectory=args[6];
  final String logsDirectory=args[7];
  final String bundlesDirectory=args[8];
  final String modelerDirectory=args[9];
  final String syncopeVersion=args[10];
  final String syncopeAdminPassword=args[11];
  final boolean isProxyEnabled=Boolean.valueOf(args[12]);
  final String proxyHost=args[13];
  final String proxyPort=args[14];
  final String proxyUser=args[15];
  final String proxyPwd=args[16];
  final boolean mavenProxyAutoconf=Boolean.valueOf(args[17]);
  setSyncopeInstallDir(installPath,artifactId);
  FileSystemUtils fileSystemUtils=new FileSystemUtils(handler);
  fileSystemUtils.createDirectory(installPath);
  InstallLog.initialize(installPath,handler);
  MavenUtils mavenUtils=new MavenUtils(mavenDir,handler);
  File customMavenProxySettings=null;
  try {
    if (isProxyEnabled && mavenProxyAutoconf) {
      customMavenProxySettings=MavenUtils.createSettingsWithProxy(installPath,proxyHost,proxyPort,proxyUser,proxyPwd);
    }
  }
 catch (  IOException e) {
    StringBuilder message=new StringBuilder(""String_Node_Str"");
    handler.emitError(message.toString(),e.getMessage());
    InstallLog.getInstance().error(message.append('\n').append(e.getMessage()).toString());
  }
catch (  ParserConfigurationException e) {
    StringBuilder message=new StringBuilder(""String_Node_Str"");
    handler.emitError(message.toString(),e.getMessage());
    InstallLog.getInstance().error(message.append('\n').append(e.getMessage()).toString());
  }
catch (  TransformerException e) {
    StringBuilder message=new StringBuilder(""String_Node_Str"");
    handler.emitError(message.toString(),e.getMessage());
    InstallLog.getInstance().error(message.append('\n').append(e.getMessage()).toString());
  }
catch (  SAXException e) {
    StringBuilder message=new StringBuilder(""String_Node_Str"");
    handler.emitError(message.toString(),e.getMessage());
    InstallLog.getInstance().error(message.append('\n').append(e.getMessage()).toString());
  }
  handler.logOutput(""String_Node_Str"",true);
  handler.logOutput(""String_Node_Str"" + InstallLog.getInstance().getFileAbsolutePath() + ""String_Node_Str"",true);
  handler.logOutput(""String_Node_Str"",true);
  mavenUtils.archetypeGenerate(syncopeVersion,groupId,artifactId,secretKey,anonymousKey,installPath,customMavenProxySettings);
  if (syncopeVersion.contains(""String_Node_Str"")) {
    final File pomFile=new File(syncopeInstallDir + PROPERTIES.getProperty(""String_Node_Str""));
    String contentPomFile=fileSystemUtils.readFile(pomFile);
    fileSystemUtils.writeToFile(pomFile,contentPomFile.replace(ParentPom.PLACEHOLDER,ParentPom.REPOSITORY));
  }
  fileSystemUtils.createDirectory(confDirectory);
  fileSystemUtils.createDirectory(logsDirectory);
  fileSystemUtils.createDirectory(bundlesDirectory);
  fileSystemUtils.createDirectory(modelerDirectory);
  fileSystemUtils.copyFileFromResources(File.separator + PROPERTIES.getProperty(""String_Node_Str""),modelerDirectory + File.separator + PROPERTIES.getProperty(""String_Node_Str""),handler);
  fileSystemUtils.copyFile(syncopeInstallDir + PROPERTIES.getProperty(""String_Node_Str"") + File.separator+ PROPERTIES.getProperty(""String_Node_Str""),modelerDirectory + File.separator + PROPERTIES.getProperty(""String_Node_Str""));
  fileSystemUtils.copyFile(syncopeInstallDir + PROPERTIES.getProperty(""String_Node_Str"") + File.separator+ PROPERTIES.getProperty(""String_Node_Str""),modelerDirectory + File.separator + PROPERTIES.getProperty(""String_Node_Str""));
  fileSystemUtils.copyFile(syncopeInstallDir + PROPERTIES.getProperty(""String_Node_Str"") + File.separator+ PROPERTIES.getProperty(""String_Node_Str""),modelerDirectory + File.separator + PROPERTIES.getProperty(""String_Node_Str""));
  fileSystemUtils.copyFile(syncopeInstallDir + PROPERTIES.getProperty(""String_Node_Str"") + File.separator+ PROPERTIES.getProperty(""String_Node_Str""),modelerDirectory + File.separator + PROPERTIES.getProperty(""String_Node_Str""));
  final Properties modelerProperties=new Properties();
  modelerProperties.setProperty(""String_Node_Str"",modelerDirectory);
  mavenUtils.mvnCleanPackageWithProperties(modelerDirectory,modelerProperties,customMavenProxySettings);
  final Properties syncopeProperties=new Properties();
  syncopeProperties.setProperty(""String_Node_Str"",confDirectory);
  syncopeProperties.setProperty(""String_Node_Str"",logsDirectory);
  syncopeProperties.setProperty(""String_Node_Str"",bundlesDirectory);
  mavenUtils.mvnCleanPackageWithProperties(installPath + File.separator + artifactId,syncopeProperties,customMavenProxySettings);
}","@Override public void run(final AbstractUIProcessHandler handler,final String[] args){
  final String installPath=args[0];
  final String mavenDir=args[1];
  final String groupId=args[2];
  final String artifactId=args[3];
  final String secretKey=args[4];
  final String anonymousKey=args[5];
  final String confDirectory=args[6];
  final String logsDirectory=args[7];
  final String bundlesDirectory=args[8];
  final String modelerDirectory=args[9];
  final String syncopeVersion=args[10];
  final String syncopeAdminPassword=args[11];
  final boolean isProxyEnabled=Boolean.valueOf(args[12]);
  final String proxyHost=args[13];
  final String proxyPort=args[14];
  final String proxyUser=args[15];
  final String proxyPwd=args[16];
  final boolean mavenProxyAutoconf=Boolean.valueOf(args[17]);
  setSyncopeInstallDir(installPath,artifactId);
  FileSystemUtils fileSystemUtils=new FileSystemUtils(handler);
  fileSystemUtils.createDirectory(installPath);
  InstallLog.initialize(installPath,handler);
  MavenUtils mavenUtils=new MavenUtils(mavenDir,handler);
  File customMavenProxySettings=null;
  try {
    if (isProxyEnabled && mavenProxyAutoconf) {
      customMavenProxySettings=MavenUtils.createSettingsWithProxy(installPath,proxyHost,proxyPort,proxyUser,proxyPwd);
    }
  }
 catch (  IOException e) {
    StringBuilder message=new StringBuilder(""String_Node_Str"");
    handler.emitError(message.toString(),e.getMessage());
    InstallLog.getInstance().error(message.append('\n').append(e.getMessage()).toString());
  }
catch (  ParserConfigurationException e) {
    StringBuilder message=new StringBuilder(""String_Node_Str"");
    handler.emitError(message.toString(),e.getMessage());
    InstallLog.getInstance().error(message.append('\n').append(e.getMessage()).toString());
  }
catch (  TransformerException e) {
    StringBuilder message=new StringBuilder(""String_Node_Str"");
    handler.emitError(message.toString(),e.getMessage());
    InstallLog.getInstance().error(message.append('\n').append(e.getMessage()).toString());
  }
catch (  SAXException e) {
    StringBuilder message=new StringBuilder(""String_Node_Str"");
    handler.emitError(message.toString(),e.getMessage());
    InstallLog.getInstance().error(message.append('\n').append(e.getMessage()).toString());
  }
  handler.logOutput(""String_Node_Str"",true);
  handler.logOutput(""String_Node_Str"" + InstallLog.getInstance().getFileAbsolutePath() + ""String_Node_Str"",true);
  handler.logOutput(""String_Node_Str"",true);
  mavenUtils.archetypeGenerate(syncopeVersion,groupId,artifactId,secretKey,anonymousKey,installPath,customMavenProxySettings);
  if (syncopeVersion.contains(""String_Node_Str"")) {
    final File pomFile=new File(syncopeInstallDir + PROPERTIES.getProperty(""String_Node_Str""));
    String contentPomFile=fileSystemUtils.readFile(pomFile);
    fileSystemUtils.writeToFile(pomFile,contentPomFile.replace(ParentPom.PLACEHOLDER,ParentPom.REPOSITORY));
  }
  fileSystemUtils.createDirectory(confDirectory);
  fileSystemUtils.createDirectory(logsDirectory);
  fileSystemUtils.createDirectory(bundlesDirectory);
  fileSystemUtils.createDirectory(modelerDirectory);
  fileSystemUtils.copyFileFromResources(File.separator + PROPERTIES.getProperty(""String_Node_Str""),modelerDirectory + File.separator + PROPERTIES.getProperty(""String_Node_Str""),handler);
  fileSystemUtils.copyFile(syncopeInstallDir + PROPERTIES.getProperty(""String_Node_Str"") + File.separator+ PROPERTIES.getProperty(""String_Node_Str""),modelerDirectory + File.separator + PROPERTIES.getProperty(""String_Node_Str""));
  fileSystemUtils.copyFile(syncopeInstallDir + PROPERTIES.getProperty(""String_Node_Str"") + File.separator+ PROPERTIES.getProperty(""String_Node_Str""),modelerDirectory + File.separator + PROPERTIES.getProperty(""String_Node_Str""));
  final Properties modelerProperties=new Properties();
  modelerProperties.setProperty(""String_Node_Str"",modelerDirectory);
  mavenUtils.mvnCleanPackageWithProperties(modelerDirectory,modelerProperties,customMavenProxySettings);
  final Properties syncopeProperties=new Properties();
  syncopeProperties.setProperty(""String_Node_Str"",confDirectory);
  syncopeProperties.setProperty(""String_Node_Str"",logsDirectory);
  syncopeProperties.setProperty(""String_Node_Str"",bundlesDirectory);
  mavenUtils.mvnCleanPackageWithProperties(installPath + File.separator + artifactId,syncopeProperties,customMavenProxySettings);
}"
60485,"private Properties archetypeProperties(final String archetypeVersion,final String groupId,final String artifactId,final String secretKey,final String anonymousKey){
  final Properties properties=new Properties();
  properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (archetypeVersion.contains(""String_Node_Str"")) {
    properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
  properties.setProperty(""String_Node_Str"",archetypeVersion);
  properties.setProperty(""String_Node_Str"",groupId);
  properties.setProperty(""String_Node_Str"",artifactId);
  properties.setProperty(""String_Node_Str"",secretKey);
  properties.setProperty(""String_Node_Str"",anonymousKey);
  return properties;
}","private Properties archetypeProperties(final String archetypeVersion,final String groupId,final String artifactId,final String secretKey,final String anonymousKey){
  final Properties properties=new Properties();
  properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (archetypeVersion.contains(""String_Node_Str"")) {
    properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
  properties.setProperty(""String_Node_Str"",archetypeVersion);
  properties.setProperty(""String_Node_Str"",groupId);
  properties.setProperty(""String_Node_Str"",artifactId);
  properties.setProperty(""String_Node_Str"",secretKey);
  properties.setProperty(""String_Node_Str"",anonymousKey);
  properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  return properties;
}"
60486,"@Override public long size(){
  long result;
  if (filtered) {
    result=fiql == null ? 0 : restClient.searchCount(realm,fiql,type);
  }
 else {
    result=restClient.count(type,realm);
  }
  return result;
}","@Override public long size(){
  long result;
  if (filtered) {
    result=fiql == null ? 0 : restClient.searchCount(realm,fiql,type);
  }
 else {
    result=restClient.count(realm,type);
  }
  return result;
}"
60487,"@Override public int count(final String type,final String realm){
  return getService(AnyObjectService.class).list(type,new AnyListQuery.Builder().realm(realm).page(1).size(1).build()).getTotalCount();
}","@Override public int count(final String realm,final String type){
  return getService(AnyObjectService.class).list(type,new AnyListQuery.Builder().realm(realm).page(1).size(1).build()).getTotalCount();
}"
60488,"@Override public void execute(final Input input){
  if (StringUtils.isBlank(input.getOption())) {
    input.setOption(Options.HELP.getOptionName());
  }
switch (Options.fromName(input.getOption())) {
case DETAILS:
    new TaskDetails(input).details();
  break;
case LIST:
new TaskList(input).list();
break;
case LIST_RUNNING_JOBS:
new TaskListRunningJobs(input).list();
break;
case LIST_SCHEDULED_JOBS:
new TaskListScheduledJobs(input).list();
break;
case READ:
new TaskRead(input).read();
break;
case READ_EXECUTION:
new TaskExecutionRead(input).read();
break;
case DELETE:
new TaskDelete(input).delete();
break;
case DELETE_EXECUTION:
new TaskExecutionDelete(input).delete();
break;
case EXECUTE:
new TaskExecute(input).execute();
break;
case HELP:
System.out.println(getHelpMessage());
break;
default :
taskResultManager.defaultOptionMessage(input.getOption(),getHelpMessage());
}
}","@Override public void execute(final Input input){
  if (StringUtils.isBlank(input.getOption())) {
    input.setOption(Options.HELP.getOptionName());
  }
switch (Options.fromName(input.getOption())) {
case DETAILS:
    new TaskDetails(input).details();
  break;
case LIST:
new TaskList(input).list();
break;
case LIST_RUNNING_JOBS:
new TaskListRunningJobs(input).list();
break;
case LIST_SCHEDULED_JOBS:
new TaskListScheduledJobs(input).list();
break;
case READ:
new TaskRead(input).read();
break;
case READ_EXECUTION:
new TaskExecutionRead(input).read();
break;
case DELETE:
new TaskDelete(input).delete();
break;
case DELETE_PROP_TASK:
new TaskDeleteAllProp(input).delete();
break;
case DELETE_EXECUTION:
new TaskExecutionDelete(input).delete();
break;
case EXECUTE:
new TaskExecute(input).execute();
break;
case HELP:
System.out.println(getHelpMessage());
break;
default :
taskResultManager.defaultOptionMessage(input.getOption(),getHelpMessage());
}
}"
60489,"public void delete(final String taskId){
  taskService.read(Long.valueOf(taskId));
}","public void delete(final String taskId){
  taskService.delete(Long.valueOf(taskId));
}"
60490,"public String printCommandFields(){
  final StringBuilder commandBuilder=new StringBuilder();
  for (  String commandField : commandFields) {
    commandBuilder.append(commandField).append(""String_Node_Str"");
  }
  return commandBuilder.toString();
}","public String printCommandFields(){
  final StringBuilder commandBuilder=new StringBuilder();
  for (  final String commandField : commandFields) {
    commandBuilder.append(commandField).append(""String_Node_Str"");
  }
  return commandBuilder.toString();
}"
60491,"public Input(final String[] args) throws InstantiationException, IllegalAccessException, IllegalArgumentException {
  command=CommandUtils.fromArgs(args[0]);
  commandFields.add(args[0]);
  if (args.length > 1) {
    option=args[1];
    commandFields.add(args[1]);
  }
  if (args.length > 2) {
    parameters=new String[args.length - 2];
    for (int i=0; i < parameters.length; i++) {
      parameters[i]=args[i + 2];
      commandFields.add(args[i + 2]);
    }
  }
 else {
    parameters=new String[0];
  }
}","public Input(final String[] args) throws InstantiationException, IllegalAccessException, IllegalArgumentException {
  command=CommandUtils.fromArgs(args[0]);
  commandFields.add(args[0]);
  if (args.length > 1) {
    option=args[1];
    commandFields.add(args[1]);
  }
  if (args.length > 2) {
    parameters=new String[args.length - 2];
    for (int i=0; i < parameters.length; i++) {
      parameters[i]=args[i + 2].replaceAll(""String_Node_Str"",""String_Node_Str"");
      commandFields.add(parameters[i]);
    }
  }
 else {
    parameters=new String[0];
  }
}"
60492,"public static void main(final String[] args){
  LOG.debug(""String_Node_Str"");
  try {
    ArgsManager.validator(args);
    final Input input=new Input(args);
    final AbstractCommand command=input.getCommand();
    LOG.debug(""String_Node_Str"",command.getClass().getAnnotation(Command.class).name());
    LOG.debug(""String_Node_Str"",input.getOption());
    LOG.debug(""String_Node_Str"");
    for (    final String parameter : input.getParameters()) {
      LOG.debug(""String_Node_Str"" + parameter);
    }
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + input.printCommandFields());
    command.execute(input);
  }
 catch (  final IllegalAccessException|InstantiationException e) {
    System.out.println(helpMessage());
  }
catch (  final IllegalArgumentException ex) {
    LOG.error(""String_Node_Str"",ex);
    RESULT_MANAGER.genericError(ex.getMessage());
    if (!ex.getMessage().startsWith(""String_Node_Str"")) {
      System.out.println(helpMessage());
    }
  }
catch (  final ProcessingException e) {
    LOG.error(""String_Node_Str"",e);
    RESULT_MANAGER.genericError(""String_Node_Str"");
    RESULT_MANAGER.genericError(e.getCause().getMessage());
  }
}","public static void main(final String[] args){
  LOG.debug(""String_Node_Str"");
  try {
    ArgsManager.validator(args);
    final Input input=new Input(args);
    final AbstractCommand command=input.getCommand();
    LOG.debug(""String_Node_Str"",command.getClass().getAnnotation(Command.class).name());
    LOG.debug(""String_Node_Str"",input.getOption());
    LOG.debug(""String_Node_Str"");
    for (    final String parameter : input.getParameters()) {
      LOG.debug(""String_Node_Str"" + parameter);
    }
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + input.printCommandFields());
    command.execute(input);
  }
 catch (  final IllegalAccessException|InstantiationException e) {
    System.out.println(helpMessage());
  }
catch (  final IllegalArgumentException ex) {
    LOG.error(""String_Node_Str"",ex);
    if (!ex.getMessage().startsWith(""String_Node_Str"")) {
      System.out.println(""String_Node_Str"");
      System.out.println(helpMessage());
    }
 else {
      RESULT_MANAGER.genericError(ex.getMessage());
    }
  }
catch (  final ProcessingException e) {
    LOG.error(""String_Node_Str"",e);
    RESULT_MANAGER.genericError(""String_Node_Str"");
    RESULT_MANAGER.genericError(e.getCause().getMessage());
  }
}"
60493,"@Override public void execute(final Input input){
  if (StringUtils.isBlank(input.getOption())) {
    input.setOption(Options.HELP.getOptionName());
  }
switch (Options.fromName(input.getOption())) {
case INSTALL:
    try {
      new InstallSetup().setup();
    }
 catch (    final FileNotFoundException|IllegalAccessException ex) {
      LOG.error(""String_Node_Str"",ex);
      installResultManager.genericError(ex.getMessage());
      break;
    }
  break;
case HELP:
System.out.println(HELP_MESSAGE);
break;
default :
installResultManager.defaultOptionMessage(input.getOption(),HELP_MESSAGE);
}
}","@Override public void execute(final Input input){
  if (StringUtils.isBlank(input.getOption())) {
    input.setOption(Options.HELP.getOptionName());
  }
switch (Options.fromName(input.getOption())) {
case SETUP:
    try {
      new InstallSetup().setup();
    }
 catch (    final FileNotFoundException|IllegalAccessException ex) {
      LOG.error(""String_Node_Str"",ex);
      installResultManager.genericError(ex.getMessage());
      break;
    }
  break;
case SETUP_DEBUG:
try {
  new InstallSetupForDebug().setup();
}
 catch (final FileNotFoundException|IllegalAccessException ex) {
  LOG.error(""String_Node_Str"",ex);
  installResultManager.genericError(ex.getMessage());
  break;
}
break;
case HELP:
System.out.println(HELP_MESSAGE);
break;
default :
installResultManager.defaultOptionMessage(input.getOption(),HELP_MESSAGE);
}
}"
60494,"@Override public void execute(final Input input){
  if (StringUtils.isBlank(input.getOption())) {
    input.setOption(UserOptions.HELP.getOptionName());
  }
switch (UserOptions.fromName(input.getOption())) {
case DETAILS:
    new UserDetails(input).details();
  break;
case LIST:
new UserList(input).list();
break;
case GET_BY_KEY:
new UserGetKey(input).get();
break;
case GET_BY_USERNAME:
new UserGetUsername(input).get();
break;
case READ:
new UserRead(input).read();
break;
case SEARCH_BY_ATTRIBUTE:
new UserSearchByAttribute(input).search();
break;
case SEARCH_BY_ROLE:
new UserSearchByRole(input).search();
break;
case SEARCH_BY_RESOURCE:
new UserSearchByResource(input).search();
break;
case DELETE:
new UserDelete(input).delete();
break;
case HELP:
System.out.println(getHelpMessage());
break;
default :
userResultManager.defaultOptionMessage(input.getOption(),getHelpMessage());
}
}","@Override public void execute(final Input input){
  if (StringUtils.isBlank(input.getOption())) {
    input.setOption(UserOptions.HELP.getOptionName());
  }
switch (UserOptions.fromName(input.getOption())) {
case DETAILS:
    new UserDetails(input).details();
  break;
case LIST:
new UserList(input).list();
break;
case GET_BY_KEY:
new UserGetKey(input).get();
break;
case GET_BY_USERNAME:
new UserGetUsername(input).get();
break;
case READ:
new UserRead(input).read();
break;
case SEARCH_BY_ATTRIBUTE:
new UserSearchByAttribute(input).search();
break;
case SEARCH_BY_ROLE:
new UserSearchByRole(input).search();
break;
case SEARCH_BY_RESOURCE:
new UserSearchByResource(input).search();
break;
case DELETE:
new UserDelete(input).delete();
break;
case DELETE_ALL:
new UserDeleteAll(input).delete();
break;
case DELETE_BY_ATTRIBUTE:
new UserDeleteByAttribute(input).delete();
break;
case HELP:
System.out.println(getHelpMessage());
break;
default :
userResultManager.defaultOptionMessage(input.getOption(),getHelpMessage());
}
}"
60495,"@Override public void execute(final Input input){
  if (StringUtils.isBlank(input.getOption())) {
    input.setOption(Options.HELP.getOptionName());
  }
switch (Options.fromName(input.getOption())) {
case DETAILS:
    new PolicyDetails(input).details();
  break;
case LIST_POLICY:
new PolicyList(input).list();
break;
case READ:
new PolicyRead(input).read();
break;
case DELETE:
new PolicyDelete(input).delete();
break;
case HELP:
System.out.println(HELP_MESSAGE);
break;
default :
new PolicyResultManager().defaultOptionMessage(input.getOption(),HELP_MESSAGE);
}
}","@Override public void execute(final Input input){
  if (StringUtils.isBlank(input.getOption())) {
    input.setOption(Options.HELP.getOptionName());
  }
switch (Options.fromName(input.getOption())) {
case DETAILS:
    new PolicyDetails(input).details();
  break;
case LIST:
new PolicyList(input).list();
break;
case READ:
new PolicyRead(input).read();
break;
case DELETE:
new PolicyDelete(input).delete();
break;
case HELP:
System.out.println(HELP_MESSAGE);
break;
default :
new PolicyResultManager().defaultOptionMessage(input.getOption(),HELP_MESSAGE);
}
}"
60496,"public void details(){
  if (input.parameterNumber() == 0) {
    try {
      final Map<String,String> details=new LinkedMap<>();
      final int accountPolicySize=policySyncopeOperations.list(PolicyType.ACCOUNT).size();
      final int passwordPolicySize=policySyncopeOperations.list(PolicyType.PASSWORD).size();
      final int syncPolicySize=policySyncopeOperations.list(PolicyType.SYNC).size();
      final int pushPolicySize=policySyncopeOperations.list(PolicyType.PUSH).size();
      details.put(""String_Node_Str"",String.valueOf(accountPolicySize + passwordPolicySize + syncPolicySize+ pushPolicySize));
      details.put(""String_Node_Str"",String.valueOf(accountPolicySize));
      details.put(""String_Node_Str"",String.valueOf(passwordPolicySize));
      details.put(""String_Node_Str"",String.valueOf(syncPolicySize));
      details.put(""String_Node_Str"",String.valueOf(pushPolicySize));
      policyResultManager.printDetails(details);
    }
 catch (    final Exception ex) {
      LOG.error(""String_Node_Str"",ex);
      policyResultManager.genericError(ex.getMessage());
    }
  }
 else {
    policyResultManager.commandOptionError(DETAILS_HELP_MESSAGE);
  }
}","public void details(){
  if (input.parameterNumber() == 0) {
    try {
      final Map<String,String> details=new LinkedMap<>();
      final int accountPolicySize=policySyncopeOperations.list(PolicyType.ACCOUNT.name()).size();
      final int passwordPolicySize=policySyncopeOperations.list(PolicyType.PASSWORD.name()).size();
      final int syncPolicySize=policySyncopeOperations.list(PolicyType.SYNC.name()).size();
      final int pushPolicySize=policySyncopeOperations.list(PolicyType.PUSH.name()).size();
      details.put(""String_Node_Str"",String.valueOf(accountPolicySize + passwordPolicySize + syncPolicySize+ pushPolicySize));
      details.put(""String_Node_Str"",String.valueOf(accountPolicySize));
      details.put(""String_Node_Str"",String.valueOf(passwordPolicySize));
      details.put(""String_Node_Str"",String.valueOf(syncPolicySize));
      details.put(""String_Node_Str"",String.valueOf(pushPolicySize));
      policyResultManager.printDetails(details);
    }
 catch (    final Exception ex) {
      LOG.error(""String_Node_Str"",ex);
      policyResultManager.genericError(ex.getMessage());
    }
  }
 else {
    policyResultManager.commandOptionError(DETAILS_HELP_MESSAGE);
  }
}"
60497,"public void list(){
  if (input.parameterNumber() == 1) {
    try {
      final PolicyType policyType=PolicyType.valueOf(input.firstParameter());
      final LinkedList<AbstractPolicyTO> policyTOs=new LinkedList<>();
      for (      final AbstractPolicyTO policyTO : policySyncopeOperations.list(policyType)) {
        policyTOs.add(policyTO);
      }
      policyResultManager.printPoliciesByType(policyType,policyTOs);
    }
 catch (    final SyncopeClientException ex) {
      LOG.error(""String_Node_Str"",ex);
      policyResultManager.genericError(ex.getMessage());
    }
catch (    final IllegalArgumentException ex) {
      LOG.error(""String_Node_Str"",ex);
      policyResultManager.typeNotValidError(""String_Node_Str"",input.firstParameter(),CommandUtils.fromEnumToArray(PolicyType.class));
    }
  }
 else {
    policyResultManager.commandOptionError(LIST_HELP_MESSAGE);
  }
}","public void list(){
  if (input.parameterNumber() == 1) {
    try {
      final LinkedList<AbstractPolicyTO> policyTOs=new LinkedList<>();
      for (      final AbstractPolicyTO policyTO : policySyncopeOperations.list(input.firstParameter())) {
        policyTOs.add(policyTO);
      }
      policyResultManager.printPoliciesByType(input.firstParameter(),policyTOs);
    }
 catch (    final SyncopeClientException ex) {
      LOG.error(""String_Node_Str"",ex);
      policyResultManager.genericError(ex.getMessage());
    }
catch (    final IllegalArgumentException ex) {
      LOG.error(""String_Node_Str"",ex);
      policyResultManager.typeNotValidError(""String_Node_Str"",input.firstParameter(),CommandUtils.fromEnumToArray(PolicyType.class));
    }
  }
 else {
    policyResultManager.commandOptionError(LIST_HELP_MESSAGE);
  }
}"
60498,"public void printPoliciesByType(final PolicyType policyType,final LinkedList<AbstractPolicyTO> policyTOs){
  System.out.println(""String_Node_Str"");
switch (policyType) {
case ACCOUNT:
    for (    final AbstractPolicyTO policyTO : policyTOs) {
      printAccountPolicy((AccountPolicyTO)policyTO);
    }
  break;
case PASSWORD:
for (final AbstractPolicyTO policyTO : policyTOs) {
  printPasswordPolicy((PasswordPolicyTO)policyTO);
}
break;
case PUSH:
for (final AbstractPolicyTO policyTO : policyTOs) {
System.out.println(policyTO);
}
break;
case SYNC:
for (final AbstractPolicyTO policyTO : policyTOs) {
printSyncPolicy((SyncPolicyTO)policyTO);
}
break;
default :
break;
}
}","public void printPoliciesByType(final String policyTypeString,final LinkedList<AbstractPolicyTO> policyTOs){
  System.out.println(""String_Node_Str"");
  final PolicyType policyType=PolicyType.valueOf(policyTypeString);
switch (policyType) {
case ACCOUNT:
    for (    final AbstractPolicyTO policyTO : policyTOs) {
      printAccountPolicy((AccountPolicyTO)policyTO);
    }
  break;
case PASSWORD:
for (final AbstractPolicyTO policyTO : policyTOs) {
  printPasswordPolicy((PasswordPolicyTO)policyTO);
}
break;
case PUSH:
for (final AbstractPolicyTO policyTO : policyTOs) {
System.out.println(policyTO);
}
break;
case SYNC:
for (final AbstractPolicyTO policyTO : policyTOs) {
printSyncPolicy((SyncPolicyTO)policyTO);
}
break;
default :
break;
}
}"
60499,"public <T extends AbstractPolicyTO>List<T> list(final PolicyType policyType){
  return policyService.list(policyType);
}","public <T extends AbstractPolicyTO>List<T> list(final String policyType){
  return policyService.list(PolicyType.valueOf(policyType));
}"
60500,"public void export(){
  if (input.parameterNumber() >= 2) {
    final String[] parameters=Arrays.copyOf(input.getParameters(),input.parameterNumber() - 1);
    for (    final String parameter : parameters) {
      try {
        final ReportExecExportFormat format=ReportExecExportFormat.valueOf(input.lastParameter());
        final SequenceInputStream report=(SequenceInputStream)reportSyncopeOperations.exportExecutionResult(parameter,format).getEntity();
switch (format) {
case XML:
          final String xmlFinalName=""String_Node_Str"" + parameter + ""String_Node_Str"";
        XMLUtils.createXMLFile(report,xmlFinalName);
      reportResultManager.genericMessage(xmlFinalName + ""String_Node_Str"");
    break;
case CSV:
  reportResultManager.genericError(format + ""String_Node_Str"");
break;
case PDF:
reportResultManager.genericError(format + ""String_Node_Str"");
break;
case HTML:
reportResultManager.genericError(format + ""String_Node_Str"");
break;
case RTF:
reportResultManager.genericError(format + ""String_Node_Str"");
break;
default :
reportResultManager.genericError(format + ""String_Node_Str"");
break;
}
}
 catch (final WebServiceException|SyncopeClientException ex) {
LOG.error(""String_Node_Str"",ex);
if (ex.getMessage().startsWith(""String_Node_Str"")) {
reportResultManager.notFoundError(""String_Node_Str"",parameter);
}
 else {
reportResultManager.genericError(ex.getMessage());
}
}
catch (final NumberFormatException ex) {
LOG.error(""String_Node_Str"",ex);
reportResultManager.numberFormatException(""String_Node_Str"",parameter);
}
catch (IOException|ParserConfigurationException|SAXException|TransformerException e) {
LOG.error(""String_Node_Str"",e);
reportResultManager.genericError(""String_Node_Str"" + ""String_Node_Str"" + parameter + ""String_Node_Str""+ e.getMessage());
}
catch (final IllegalArgumentException ex) {
LOG.error(""String_Node_Str"",ex);
reportResultManager.typeNotValidError(""String_Node_Str"",input.firstParameter(),CommandUtils.fromEnumToArray(ReportExecExportFormat.class));
}
break;
}
}
 else {
reportResultManager.commandOptionError(EXPORT_EXECUTION_HELP_MESSAGE);
}
}","public void export(){
  if (input.parameterNumber() >= 2) {
    final String[] parameters=Arrays.copyOf(input.getParameters(),input.parameterNumber() - 1);
    for (    final String parameter : parameters) {
      try {
        final String result=reportSyncopeOperations.exportExecutionResult(parameter,input.lastParameter());
        reportResultManager.genericMessage(result);
      }
 catch (      final WebServiceException|SyncopeClientException ex) {
        LOG.error(""String_Node_Str"",ex);
        if (ex.getMessage().startsWith(""String_Node_Str"")) {
          reportResultManager.notFoundError(""String_Node_Str"",parameter);
        }
 else {
          reportResultManager.genericError(ex.getMessage());
        }
      }
catch (      final NumberFormatException ex) {
        LOG.error(""String_Node_Str"",ex);
        reportResultManager.numberFormatException(""String_Node_Str"",parameter);
      }
catch (      IOException|ParserConfigurationException|SAXException|TransformerException e) {
        LOG.error(""String_Node_Str"",e);
        reportResultManager.genericError(""String_Node_Str"" + ""String_Node_Str"" + parameter + ""String_Node_Str""+ e.getMessage());
      }
catch (      final IllegalArgumentException ex) {
        LOG.error(""String_Node_Str"",ex);
        reportResultManager.typeNotValidError(""String_Node_Str"",input.firstParameter(),CommandUtils.fromEnumToArray(ReportExecExportFormat.class));
      }
      break;
    }
  }
 else {
    reportResultManager.commandOptionError(EXPORT_EXECUTION_HELP_MESSAGE);
  }
}"
60501,"public void list(){
  if (input.parameterNumber() == 0) {
    try {
      for (      final JobStatusType jobStatusType : JobStatusType.values()) {
        reportResultManager.printReportExecution(reportSyncopeOperations.listJobs(jobStatusType));
      }
    }
 catch (    final SyncopeClientException ex) {
      LOG.error(""String_Node_Str"",ex);
      reportResultManager.genericError(ex.getMessage());
    }
  }
 else {
    reportResultManager.unnecessaryParameters(input.listParameters(),LIST_HELP_MESSAGE);
  }
}","public void list(){
  if (input.parameterNumber() == 0) {
    try {
      for (      final JobStatusType jobStatusType : JobStatusType.values()) {
        reportResultManager.printReportExecution(reportSyncopeOperations.listJobs(jobStatusType.name()));
      }
    }
 catch (    final SyncopeClientException ex) {
      LOG.error(""String_Node_Str"",ex);
      reportResultManager.genericError(ex.getMessage());
    }
  }
 else {
    reportResultManager.unnecessaryParameters(input.listParameters(),LIST_HELP_MESSAGE);
  }
}"
60502,"public List<ReportExecTO> listJobs(final JobStatusType jobStatusType){
  return reportService.listJobs(jobStatusType);
}","public List<ReportExecTO> listJobs(final String jobStatusType){
  return reportService.listJobs(JobStatusType.valueOf(jobStatusType));
}"
60503,"public Response exportExecutionResult(final String executionKey,final ReportExecExportFormat fmt){
  return reportService.exportExecutionResult(Long.valueOf(executionKey),fmt);
}","public String exportExecutionResult(final String executionKey,final String reportExecExportFormat) throws TransformerException, SAXException, IOException, ParserConfigurationException {
  final ReportExecExportFormat format=ReportExecExportFormat.valueOf(reportExecExportFormat);
  final SequenceInputStream report=(SequenceInputStream)reportService.exportExecutionResult(Long.valueOf(executionKey),format).getEntity();
  final String xmlFinalName=""String_Node_Str"" + executionKey + ""String_Node_Str"";
switch (format) {
case XML:
    XMLUtils.createXMLFile(report,xmlFinalName);
  break;
case CSV:
return format + ""String_Node_Str"";
case PDF:
return format + ""String_Node_Str"";
case HTML:
return format + ""String_Node_Str"";
case RTF:
return format + ""String_Node_Str"";
default :
return format + ""String_Node_Str"";
}
return xmlFinalName;
}"
60504,"public void delete(){
  if (input.parameterNumber() >= 2) {
    final String[] parameters=Arrays.copyOfRange(input.getParameters(),1,input.parameterNumber());
    try {
      for (      final String parameter : parameters) {
        schemaSyncopeOperations.delete(SchemaType.valueOf(input.firstParameter()),parameter);
        schemaResultManager.deletedMessage(""String_Node_Str"",parameter);
      }
    }
 catch (    final SyncopeClientException|WebServiceException ex) {
      LOG.error(""String_Node_Str"",ex);
      if (ex.getMessage().startsWith(""String_Node_Str"")) {
        schemaResultManager.notFoundError(""String_Node_Str"",parameters[0]);
      }
 else       if (ex.getMessage().startsWith(""String_Node_Str"")) {
        schemaResultManager.genericError(""String_Node_Str"" + parameters[0]);
      }
 else {
        schemaResultManager.genericError(ex.getMessage());
      }
    }
catch (    final IllegalArgumentException ex) {
      LOG.error(""String_Node_Str"",ex);
      schemaResultManager.typeNotValidError(""String_Node_Str"",input.firstParameter(),CommandUtils.fromEnumToArray(SchemaType.class));
    }
  }
 else {
    schemaResultManager.commandOptionError(DELETE_HELP_MESSAGE);
  }
}","public void delete(){
  if (input.parameterNumber() >= 2) {
    final String[] parameters=Arrays.copyOfRange(input.getParameters(),1,input.parameterNumber());
    try {
      for (      final String parameter : parameters) {
        schemaSyncopeOperations.delete(input.firstParameter(),parameter);
        schemaResultManager.deletedMessage(""String_Node_Str"",parameter);
      }
    }
 catch (    final SyncopeClientException|WebServiceException ex) {
      LOG.error(""String_Node_Str"",ex);
      if (ex.getMessage().startsWith(""String_Node_Str"")) {
        schemaResultManager.notFoundError(""String_Node_Str"",parameters[0]);
      }
 else       if (ex.getMessage().startsWith(""String_Node_Str"")) {
        schemaResultManager.genericError(""String_Node_Str"" + parameters[0]);
      }
 else {
        schemaResultManager.genericError(ex.getMessage());
      }
    }
catch (    final IllegalArgumentException ex) {
      LOG.error(""String_Node_Str"",ex);
      schemaResultManager.typeNotValidError(""String_Node_Str"",input.firstParameter(),CommandUtils.fromEnumToArray(SchemaType.class));
    }
  }
 else {
    schemaResultManager.commandOptionError(DELETE_HELP_MESSAGE);
  }
}"
60505,"public void list(){
  if (input.parameterNumber() == 1) {
    try {
      final SchemaType schemaType=SchemaType.valueOf(input.firstParameter());
      final LinkedList<AbstractSchemaTO> schemaTOs=new LinkedList<>();
      for (      final AbstractSchemaTO schemaTO : schemaSyncopeOperations.list(schemaType)) {
        schemaTOs.add(schemaTO);
      }
switch (schemaType) {
case PLAIN:
        schemaResultManager.printSchemas(schemaTOs);
      break;
case DERIVED:
    schemaResultManager.fromListDerived(schemaTOs);
  break;
case VIRTUAL:
schemaResultManager.fromListVirtual(schemaTOs);
break;
default :
break;
}
}
 catch (final SyncopeClientException ex) {
LOG.error(""String_Node_Str"",ex);
schemaResultManager.genericError(ex.getMessage());
}
catch (final IllegalArgumentException ex) {
LOG.error(""String_Node_Str"",ex);
schemaResultManager.typeNotValidError(""String_Node_Str"",input.firstParameter(),CommandUtils.fromEnumToArray(SchemaType.class));
}
}
 else {
schemaResultManager.commandOptionError(LIST_HELP_MESSAGE);
}
}","public void list(){
  if (input.parameterNumber() == 1) {
    try {
      final LinkedList<AbstractSchemaTO> schemaTOs=new LinkedList<>();
      for (      final AbstractSchemaTO schemaTO : schemaSyncopeOperations.list(input.firstParameter())) {
        schemaTOs.add(schemaTO);
      }
      schemaResultManager.toView(input.firstParameter(),schemaTOs);
    }
 catch (    final SyncopeClientException ex) {
      LOG.error(""String_Node_Str"",ex);
      schemaResultManager.genericError(ex.getMessage());
    }
catch (    final IllegalArgumentException ex) {
      LOG.error(""String_Node_Str"",ex);
      schemaResultManager.typeNotValidError(""String_Node_Str"",input.firstParameter(),CommandUtils.fromEnumToArray(SchemaType.class));
    }
  }
 else {
    schemaResultManager.commandOptionError(LIST_HELP_MESSAGE);
  }
}"
60506,"public void listAll(){
  if (input.parameterNumber() == 0) {
    try {
      for (      final SchemaType schemaType : SchemaType.values()) {
        final LinkedList<AbstractSchemaTO> schemaTOs=new LinkedList<>();
        for (        final AbstractSchemaTO schemaTO : schemaSyncopeOperations.list(schemaType)) {
          schemaTOs.add(schemaTO);
        }
switch (schemaType) {
case PLAIN:
          schemaResultManager.printSchemas(schemaTOs);
        break;
case DERIVED:
      schemaResultManager.fromListDerived(schemaTOs);
    break;
case VIRTUAL:
  schemaResultManager.fromListVirtual(schemaTOs);
break;
default :
break;
}
}
}
 catch (final SyncopeClientException|WebServiceException ex) {
LOG.error(""String_Node_Str"",ex);
schemaResultManager.genericError(ex.getMessage());
}
}
 else {
schemaResultManager.unnecessaryParameters(input.listParameters(),LIST_HELP_MESSAGE);
}
}","public void listAll(){
  if (input.parameterNumber() == 0) {
    try {
      for (      final SchemaType schemaType : SchemaType.values()) {
        final LinkedList<AbstractSchemaTO> schemaTOs=new LinkedList<>();
        for (        final AbstractSchemaTO schemaTO : schemaSyncopeOperations.list(schemaType.name())) {
          schemaTOs.add(schemaTO);
        }
        schemaResultManager.toView(schemaType.name(),schemaTOs);
      }
    }
 catch (    final SyncopeClientException|WebServiceException ex) {
      LOG.error(""String_Node_Str"",ex);
      schemaResultManager.genericError(ex.getMessage());
    }
  }
 else {
    schemaResultManager.unnecessaryParameters(input.listParameters(),LIST_HELP_MESSAGE);
  }
}"
60507,"public void listPlain(){
  if (input.parameterNumber() == 0) {
    try {
      final LinkedList<AbstractSchemaTO> schemaTOs=new LinkedList<>();
      for (      final AbstractSchemaTO schemaTO : schemaSyncopeOperations.listPlain()) {
        schemaTOs.add(schemaTO);
      }
      schemaResultManager.printSchemas(schemaTOs);
    }
 catch (    final SyncopeClientException|WebServiceException ex) {
      LOG.error(""String_Node_Str"",ex);
      schemaResultManager.genericError(ex.getMessage());
    }
  }
 else {
    schemaResultManager.unnecessaryParameters(input.listParameters(),LIST_HELP_MESSAGE);
  }
}","public void listPlain(){
  if (input.parameterNumber() == 0) {
    try {
      final LinkedList<AbstractSchemaTO> schemaTOs=new LinkedList<>();
      for (      final AbstractSchemaTO schemaTO : schemaSyncopeOperations.listPlain()) {
        schemaTOs.add(schemaTO);
      }
      schemaResultManager.printPlainSchemas(schemaTOs);
    }
 catch (    final SyncopeClientException|WebServiceException ex) {
      LOG.error(""String_Node_Str"",ex);
      schemaResultManager.genericError(ex.getMessage());
    }
  }
 else {
    schemaResultManager.unnecessaryParameters(input.listParameters(),LIST_HELP_MESSAGE);
  }
}"
60508,"public void read(){
  if (input.parameterNumber() >= 2) {
    final String[] parameters=Arrays.copyOfRange(input.getParameters(),1,input.parameterNumber());
    try {
      final SchemaType schemaType=SchemaType.valueOf(input.firstParameter());
      final LinkedList<AbstractSchemaTO> schemaTOs=new LinkedList<>();
      for (      final String parameter : parameters) {
        schemaTOs.add(schemaSyncopeOperations.read(schemaType,parameter));
      }
switch (schemaType) {
case PLAIN:
        schemaResultManager.printSchemasWithDetails(schemaTOs);
      break;
case DERIVED:
    schemaResultManager.fromListDerived(schemaTOs);
  break;
case VIRTUAL:
schemaResultManager.fromListVirtual(schemaTOs);
break;
default :
break;
}
}
 catch (final SyncopeClientException|WebServiceException ex) {
LOG.error(""String_Node_Str"",ex);
if (ex.getMessage().startsWith(""String_Node_Str"")) {
schemaResultManager.notFoundError(""String_Node_Str"",parameters[0]);
}
 else {
schemaResultManager.genericError(ex.getMessage());
}
}
catch (final IllegalArgumentException ex) {
LOG.error(""String_Node_Str"",ex);
schemaResultManager.typeNotValidError(""String_Node_Str"",input.firstParameter(),CommandUtils.fromEnumToArray(SchemaType.class));
}
}
 else {
schemaResultManager.commandOptionError(READ_HELP_MESSAGE);
}
}","public void read(){
  if (input.parameterNumber() >= 2) {
    final String[] parameters=Arrays.copyOfRange(input.getParameters(),1,input.parameterNumber());
    try {
      final LinkedList<AbstractSchemaTO> schemaTOs=new LinkedList<>();
      for (      final String parameter : parameters) {
        schemaTOs.add(schemaSyncopeOperations.read(input.firstParameter(),parameter));
      }
      schemaResultManager.toView(input.firstParameter(),schemaTOs);
    }
 catch (    final SyncopeClientException|WebServiceException ex) {
      LOG.error(""String_Node_Str"",ex);
      if (ex.getMessage().startsWith(""String_Node_Str"")) {
        schemaResultManager.notFoundError(""String_Node_Str"",parameters[0]);
      }
 else {
        schemaResultManager.genericError(ex.getMessage());
      }
    }
catch (    final IllegalArgumentException ex) {
      LOG.error(""String_Node_Str"",ex);
      schemaResultManager.typeNotValidError(""String_Node_Str"",input.firstParameter(),CommandUtils.fromEnumToArray(SchemaType.class));
    }
  }
 else {
    schemaResultManager.commandOptionError(READ_HELP_MESSAGE);
  }
}"
60509,"public void details(){
  if (input.parameterNumber() == 0) {
    try {
      final Map<String,String> details=new LinkedMap<>();
      final List<UserTO> usersTOs=userSyncopeOperations.list().getResult();
      int withoutResource=0;
      int withoutRole=0;
      int activeStatus=0;
      int suspendedStatus=0;
      for (      final UserTO userTO : usersTOs) {
        if (!userTO.getResources().isEmpty()) {
          withoutResource++;
        }
        if (!userTO.getRoles().isEmpty()) {
          withoutRole++;
        }
        if (""String_Node_Str"".equalsIgnoreCase(userTO.getStatus())) {
          activeStatus++;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(userTO.getStatus())) {
          suspendedStatus++;
        }
      }
      details.put(""String_Node_Str"",String.valueOf(usersTOs.size()));
      details.put(""String_Node_Str"",String.valueOf(activeStatus));
      details.put(""String_Node_Str"",String.valueOf(suspendedStatus));
      details.put(""String_Node_Str"",String.valueOf(withoutResource));
      details.put(""String_Node_Str"",String.valueOf(withoutRole));
      userResultManager.printDetails(details);
    }
 catch (    final SyncopeClientException ex) {
      LOG.error(""String_Node_Str"",ex);
      userResultManager.genericError(ex.getMessage());
    }
  }
 else {
    userResultManager.unnecessaryParameters(input.listParameters(),COUNT_HELP_MESSAGE);
  }
}","public void details(){
  if (input.parameterNumber() == 0) {
    try {
      final Map<String,String> details=new LinkedMap<>();
      final List<UserTO> usersTOs=userSyncopeOperations.list().getResult();
      int withoutResource=0;
      int withoutRole=0;
      int activeStatus=0;
      int suspendedStatus=0;
      for (      final UserTO userTO : usersTOs) {
        if (userTO.getResources().isEmpty()) {
          withoutResource++;
        }
        if (userTO.getRoles().isEmpty()) {
          withoutRole++;
        }
        if (""String_Node_Str"".equalsIgnoreCase(userTO.getStatus())) {
          activeStatus++;
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(userTO.getStatus())) {
          suspendedStatus++;
        }
      }
      details.put(""String_Node_Str"",String.valueOf(usersTOs.size()));
      details.put(""String_Node_Str"",String.valueOf(activeStatus));
      details.put(""String_Node_Str"",String.valueOf(suspendedStatus));
      details.put(""String_Node_Str"",String.valueOf(withoutResource));
      details.put(""String_Node_Str"",String.valueOf(withoutRole));
      userResultManager.printDetails(details);
    }
 catch (    final SyncopeClientException ex) {
      LOG.error(""String_Node_Str"",ex);
      userResultManager.genericError(ex.getMessage());
    }
  }
 else {
    userResultManager.unnecessaryParameters(input.listParameters(),COUNT_HELP_MESSAGE);
  }
}"
60510,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private FieldPanel getFieldPanel(final SchemaTO schemaTO,final Form form,final AttributeTO attributeTO){
  final boolean required=mode == Mode.TEMPLATE ? false : schemaTO.getMandatoryCondition().equalsIgnoreCase(""String_Node_Str"");
  final boolean readOnly=mode == Mode.TEMPLATE ? false : schemaTO.isReadonly();
  final AttributeSchemaType type=mode == Mode.TEMPLATE ? AttributeSchemaType.String : schemaTO.getType();
  final FieldPanel panel;
switch (type) {
case Boolean:
    panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model<Boolean>());
  panel.setRequired(required);
break;
case Date:
final String dataPattern=schemaTO.getConversionPattern() == null ? SyncopeConstants.DEFAULT_DATE_PATTERN : schemaTO.getConversionPattern();
if (dataPattern.contains(""String_Node_Str"")) {
panel=new DateTimeFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model<Date>(),dataPattern);
if (required) {
panel.addRequiredLabel();
((DateTimeFieldPanel)panel).setFormValidator(form);
}
panel.setStyleSheet(""String_Node_Str"");
}
 else {
panel=new DateTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model<Date>(),dataPattern);
if (required) {
panel.addRequiredLabel();
}
}
break;
case Enum:
panel=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",schemaTO.getName(),new Model<String>());
((AjaxDropDownChoicePanel<String>)panel).setChoices(getEnumeratedValues(schemaTO));
if (StringUtils.isNotBlank(schemaTO.getEnumerationKeys())) {
((AjaxDropDownChoicePanel)panel).setChoiceRenderer(new IChoiceRenderer<String>(){
private static final long serialVersionUID=-3724971416312135885L;
private final Map<String,String> valueMap=getEnumeratedKeyValues(schemaTO);
@Override public String getDisplayValue(final String value){
return valueMap.get(value) == null ? value : valueMap.get(value);
}
@Override public String getIdValue(final String value,final int i){
return value;
}
}
);
}
if (required) {
panel.addRequiredLabel();
}
break;
case Long:
panel=new SpinnerFieldPanel<Long>(""String_Node_Str"",schemaTO.getName(),Long.class,new Model<Long>(),null,null);
if (required) {
panel.addRequiredLabel();
}
break;
case Double:
panel=new SpinnerFieldPanel<Double>(""String_Node_Str"",schemaTO.getName(),Double.class,new Model<Double>(),null,null);
if (required) {
panel.addRequiredLabel();
}
break;
case Binary:
panel=new BinaryFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model<String>(),schemas.containsKey(schemaTO.getName()) ? schemas.get(schemaTO.getName()).getMimeType() : null);
if (required) {
panel.addRequiredLabel();
}
break;
default :
panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model<String>());
if (required) {
panel.addRequiredLabel();
}
}
panel.setReadOnly(readOnly);
panel.setNewModel(attributeTO.getValues());
return panel;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private FieldPanel getFieldPanel(final SchemaTO schemaTO,final Form form,final AttributeTO attributeTO){
  final boolean required=mode == Mode.TEMPLATE ? false : schemaTO.getMandatoryCondition().equalsIgnoreCase(""String_Node_Str"");
  final boolean readOnly=mode == Mode.TEMPLATE ? false : schemaTO.isReadonly();
  final AttributeSchemaType type=mode == Mode.TEMPLATE ? AttributeSchemaType.String : schemaTO.getType();
  final FieldPanel panel;
switch (type) {
case Boolean:
    panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model<Boolean>());
  panel.setRequired(required);
break;
case Date:
final String dataPattern=schemaTO.getConversionPattern() == null ? SyncopeConstants.DEFAULT_DATE_PATTERN : schemaTO.getConversionPattern();
if (dataPattern.contains(""String_Node_Str"")) {
panel=new DateTimeFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model<Date>(),dataPattern);
if (required) {
panel.addRequiredLabel();
((DateTimeFieldPanel)panel).setFormValidator(form);
}
panel.setStyleSheet(""String_Node_Str"");
}
 else {
panel=new DateTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model<Date>(),dataPattern);
if (required) {
panel.addRequiredLabel();
}
}
break;
case Enum:
panel=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",schemaTO.getName(),new Model<String>());
((AjaxDropDownChoicePanel<String>)panel).setChoices(getEnumeratedValues(schemaTO));
if (StringUtils.isNotBlank(schemaTO.getEnumerationKeys())) {
((AjaxDropDownChoicePanel)panel).setChoiceRenderer(new IChoiceRenderer<String>(){
private static final long serialVersionUID=-3724971416312135885L;
private final Map<String,String> valueMap=getEnumeratedKeyValues(schemaTO);
@Override public String getDisplayValue(final String value){
return valueMap.get(value) == null ? value : valueMap.get(value);
}
@Override public String getIdValue(final String value,final int i){
return value;
}
}
);
}
if (required) {
panel.addRequiredLabel();
}
break;
case Long:
panel=new SpinnerFieldPanel<Long>(""String_Node_Str"",schemaTO.getName(),Long.class,new Model<Long>(),null,null);
if (required) {
panel.addRequiredLabel();
}
break;
case Double:
panel=new AjaxDoubleFieldPanel(""String_Node_Str"",schemaTO.getName(),schemaTO.getConversionPattern(),new Model<Double>());
if (required) {
panel.addRequiredLabel();
}
break;
case Binary:
panel=new BinaryFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model<String>(),schemas.containsKey(schemaTO.getName()) ? schemas.get(schemaTO.getName()).getMimeType() : null);
if (required) {
panel.addRequiredLabel();
}
break;
default :
panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model<String>());
if (required) {
panel.addRequiredLabel();
}
}
panel.setReadOnly(readOnly);
panel.setNewModel(attributeTO.getValues());
return panel;
}"
60511,"public T getModelObject(){
  return (T)field.getModelObject();
}","public T getModelObject(){
  return field.getModelObject();
}"
60512,"public void typeNotValidError(final String parameter){
  Messages.printTypeNotValidMessage(""String_Node_Str"",parameter,CommandUtils.fromEnumToArray(LoggerLevel.class));
}","public void typeNotValidError(final String what,final String parameter,final String[] options){
  Messages.printTypeNotValidMessage(what,parameter,options);
}"
60513,"public static void validator(final String[] args) throws IllegalArgumentException {
  if (args.length == 0) {
    throw new IllegalArgumentException();
  }
 else   if (!""String_Node_Str"".equalsIgnoreCase(args[0])) {
    final File configFile=new File(InstallConfigFileTemplate.FILE_PATH);
    if (!configFile.exists()) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
}","public static void validator(final String[] args) throws IllegalArgumentException {
  if (args.length == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (!""String_Node_Str"".equalsIgnoreCase(args[0])) {
    final File configFile=new File(InstallConfigFileTemplate.FILE_PATH);
    if (!configFile.exists()) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
}"
60514,"public Input(final String[] args) throws InstantiationException, IllegalAccessException, IllegalArgumentException {
  command=fromArgs(args[0]);
  if (args.length > 1) {
    option=args[1];
  }
  if (args.length > 2) {
    parameters=new String[args.length - 2];
    for (int i=0; i < parameters.length; i++) {
      parameters[i]=args[i + 2];
    }
  }
 else {
    parameters=new String[0];
  }
}","public Input(final String[] args) throws InstantiationException, IllegalAccessException, IllegalArgumentException {
  command=CommandUtils.fromArgs(args[0]);
  if (args.length > 1) {
    option=args[1];
  }
  if (args.length > 2) {
    parameters=new String[args.length - 2];
    for (int i=0; i < parameters.length; i++) {
      parameters[i]=args[i + 2];
    }
  }
 else {
    parameters=new String[0];
  }
}"
60515,"public static void main(final String[] args){
  LOG.debug(""String_Node_Str"");
  try {
    ArgsManager.validator(args);
    final Input input=new Input(args);
    final AbstractCommand command=input.getCommand();
    command.execute(input);
  }
 catch (  final IllegalAccessException|InstantiationException e) {
    LOG.error(""String_Node_Str"",e);
    e.printStackTrace();
    System.out.println(HELP_MESSAGE);
  }
catch (  final IllegalArgumentException ex) {
    LOG.error(""String_Node_Str"",ex);
    if (ex.getMessage().startsWith(""String_Node_Str"")) {
      System.out.println(ex.getMessage());
    }
 else {
      System.out.println(HELP_MESSAGE);
    }
  }
}","public static void main(final String[] args){
  LOG.debug(""String_Node_Str"");
  try {
    ArgsManager.validator(args);
    final Input input=new Input(args);
    final AbstractCommand command=input.getCommand();
    command.execute(input);
  }
 catch (  final IllegalAccessException|InstantiationException e) {
    System.out.println(HELP_MESSAGE);
  }
catch (  final IllegalArgumentException ex) {
    LOG.error(""String_Node_Str"",ex);
    Messages.printMessage(ex.getMessage());
    if (!ex.getMessage().startsWith(""String_Node_Str"")) {
      System.out.println(HELP_MESSAGE);
    }
  }
}"
60516,"@Override public void execute(final Input input){
  LOG.debug(""String_Node_Str"");
  LOG.debug(""String_Node_Str"",input.getOption());
  LOG.debug(""String_Node_Str"");
  for (  final String parameter : input.getParameters()) {
    LOG.debug(""String_Node_Str"" + parameter);
  }
  final String[] parameters=input.getParameters();
  if (StringUtils.isBlank(input.getOption())) {
    input.setOption(Options.HELP.getOptionName());
  }
  final ConfigurationService configurationService=SyncopeServices.get(ConfigurationService.class);
switch (Options.fromName(input.getOption())) {
case LIST:
    try {
      final ConfTO confTO=configurationService.list();
      System.out.println(""String_Node_Str"" + confTO.getKey());
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      for (      final AttrTO attrTO : confTO.getPlainAttrMap().values()) {
        System.out.println(""String_Node_Str"" + attrTO.getSchema());
        System.out.println(""String_Node_Str"" + attrTO.getValues());
        System.out.println(""String_Node_Str"" + attrTO.isReadonly());
      }
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      for (      final AttrTO attrTO : confTO.getDerAttrMap().values()) {
        System.out.println(""String_Node_Str"" + attrTO.getSchema());
        System.out.println(""String_Node_Str"" + attrTO.getValues());
        System.out.println(""String_Node_Str"" + attrTO.isReadonly());
      }
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      for (      final AttrTO attrTO : confTO.getVirAttrMap().values()) {
        System.out.println(""String_Node_Str"" + attrTO.getSchema());
        System.out.println(""String_Node_Str"" + attrTO.getValues());
        System.out.println(""String_Node_Str"" + attrTO.isReadonly());
      }
      System.out.println(""String_Node_Str"");
    }
 catch (    final Exception ex) {
      UsageMessages.printErrorMessage(ex.getMessage());
      break;
    }
  break;
case READ:
final String readErrorMessage=UsageMessages.optionCommandMessage(""String_Node_Str"");
if (parameters.length >= 1) {
AttrTO attrTO;
for (final String parameter : parameters) {
  try {
    attrTO=configurationService.get(parameter);
    System.out.println(""String_Node_Str"" + attrTO.getSchema());
    System.out.println(""String_Node_Str"" + attrTO.getValues());
    System.out.println(""String_Node_Str"" + attrTO.isReadonly());
    System.out.println(""String_Node_Str"");
  }
 catch (  final SyncopeClientException|WebServiceException ex) {
    if (ex.getMessage().startsWith(""String_Node_Str"")) {
      UsageMessages.printErrorMessage(""String_Node_Str"" + parameters[0] + ""String_Node_Str"");
    }
 else     if (ex.getMessage().startsWith(""String_Node_Str"")) {
      UsageMessages.printErrorMessage(""String_Node_Str"" + parameters[0]);
    }
 else {
      UsageMessages.printErrorMessage(ex.getMessage());
    }
    break;
  }
}
}
 else {
System.out.println(readErrorMessage);
}
break;
case UPDATE:
final String updateErrorMessage=UsageMessages.optionCommandMessage(""String_Node_Str"");
if (parameters.length >= 1) {
Input.PairParameter pairParameter=null;
AttrTO attrTO;
for (final String parameter : parameters) {
try {
pairParameter=input.toPairParameter(parameter);
attrTO=configurationService.get(pairParameter.getKey());
attrTO.getValues().clear();
attrTO.getValues().add(pairParameter.getValue());
configurationService.set(attrTO);
System.out.println(""String_Node_Str"" + attrTO.getSchema() + ""String_Node_Str"");
System.out.println(""String_Node_Str"" + attrTO.getValues());
System.out.println(""String_Node_Str"" + attrTO.isReadonly());
System.out.println(""String_Node_Str"");
}
 catch (final IllegalArgumentException ex) {
UsageMessages.printErrorMessage(ex.getMessage(),updateErrorMessage);
break;
}
catch (final SyncopeClientException|WebServiceException ex) {
if (ex.getMessage().startsWith(""String_Node_Str"")) {
UsageMessages.printErrorMessage(""String_Node_Str"" + pairParameter.getKey() + ""String_Node_Str"");
}
 else if (ex.getMessage().startsWith(""String_Node_Str"")) {
UsageMessages.printErrorMessage(pairParameter.getValue() + ""String_Node_Str"" + pairParameter.getKey());
}
 else if (ex.getMessage().startsWith(""String_Node_Str"")) {
UsageMessages.printErrorMessage(""String_Node_Str"" + parameters[0]);
}
 else {
UsageMessages.printErrorMessage(ex.getMessage());
}
break;
}
}
}
 else {
System.out.println(updateErrorMessage);
}
break;
case CREATE:
final String createErrorMessage=UsageMessages.optionCommandMessage(""String_Node_Str"");
if (parameters.length >= 1) {
Input.PairParameter pairParameter=null;
AttrTO attrTO;
for (final String parameter : parameters) {
try {
pairParameter=input.toPairParameter(parameter);
attrTO=new AttrTO();
attrTO.setSchema(pairParameter.getKey());
attrTO.getValues().add(pairParameter.getValue());
configurationService.set(attrTO);
System.out.println(""String_Node_Str"" + attrTO.getSchema() + ""String_Node_Str"");
System.out.println(""String_Node_Str"" + attrTO.getValues());
System.out.println(""String_Node_Str"" + attrTO.isReadonly());
System.out.println(""String_Node_Str"");
}
 catch (final IllegalArgumentException ex) {
UsageMessages.printErrorMessage(ex.getMessage(),createErrorMessage);
break;
}
catch (final SyncopeClientException|WebServiceException ex) {
if (ex.getMessage().startsWith(""String_Node_Str"")) {
UsageMessages.printErrorMessage(""String_Node_Str"" + pairParameter.getKey() + ""String_Node_Str"");
}
 else {
UsageMessages.printErrorMessage(ex.getMessage());
}
break;
}
}
}
 else {
System.out.println(createErrorMessage);
}
break;
case DELETE:
final String deleteErrorMessage=UsageMessages.optionCommandMessage(""String_Node_Str"");
if (parameters.length >= 1) {
for (final String parameter : parameters) {
try {
configurationService.delete(parameter);
System.out.println(""String_Node_Str"" + parameter + ""String_Node_Str"");
}
 catch (final SyncopeClientException|WebServiceException ex) {
if (ex.getMessage().startsWith(""String_Node_Str"")) {
UsageMessages.printErrorMessage(""String_Node_Str"" + parameter + ""String_Node_Str"");
}
 else if (ex.getMessage().startsWith(""String_Node_Str"")) {
UsageMessages.printErrorMessage(""String_Node_Str"",parameter);
}
 else {
UsageMessages.printErrorMessage(ex.getMessage());
}
break;
}
}
}
 else {
System.out.println(deleteErrorMessage);
}
break;
case EXPORT:
final String exportErrorMessage=UsageMessages.optionCommandMessage(""String_Node_Str"");
if (parameters.length == 1) {
try {
XMLUtils.createXMLFile((SequenceInputStream)configurationService.export().getEntity(),parameters[0] + EXPORT_FILE_NAME);
System.out.println(""String_Node_Str"" + parameters[0] + EXPORT_FILE_NAME+ ""String_Node_Str"");
}
 catch (final IOException ex) {
UsageMessages.printErrorMessage(ex.getMessage());
}
catch (ParserConfigurationException|SAXException|TransformerConfigurationException ex) {
LOG.error(""String_Node_Str"",parameters[0],ex);
UsageMessages.printErrorMessage(""String_Node_Str"" + parameters[0] + EXPORT_FILE_NAME+ ""String_Node_Str""+ ex.getMessage());
break;
}
catch (final TransformerException ex) {
LOG.error(""String_Node_Str"",parameters[0],ex);
if (ex.getCause() instanceof FileNotFoundException) {
UsageMessages.printErrorMessage(""String_Node_Str"" + parameters[0]);
}
 else {
UsageMessages.printErrorMessage(""String_Node_Str"" + parameters[0] + EXPORT_FILE_NAME+ ""String_Node_Str""+ ex.getMessage());
}
break;
}
catch (final SyncopeClientException ex) {
LOG.error(""String_Node_Str"",ex);
UsageMessages.printErrorMessage(""String_Node_Str"" + ex.getMessage());
break;
}
}
 else {
System.out.println(exportErrorMessage);
}
break;
case HELP:
System.out.println(HELP_MESSAGE);
break;
default :
System.out.println(input.getOption() + ""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(HELP_MESSAGE);
break;
}
}","@Override public void execute(final Input input){
  LOG.debug(""String_Node_Str"");
  LOG.debug(""String_Node_Str"",input.getOption());
  LOG.debug(""String_Node_Str"");
  for (  final String parameter : input.getParameters()) {
    LOG.debug(""String_Node_Str"" + parameter);
  }
  final String[] parameters=input.getParameters();
  if (StringUtils.isBlank(input.getOption())) {
    input.setOption(Options.HELP.getOptionName());
  }
  final ConfigurationService configurationService=SyncopeServices.get(ConfigurationService.class);
switch (Options.fromName(input.getOption())) {
case LIST:
    try {
      final ConfTO confTO=configurationService.list();
      System.out.println(""String_Node_Str"" + confTO.getKey());
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      for (      final AttrTO attrTO : confTO.getPlainAttrMap().values()) {
        System.out.println(""String_Node_Str"" + attrTO.getSchema());
        System.out.println(""String_Node_Str"" + attrTO.getValues());
        System.out.println(""String_Node_Str"" + attrTO.isReadonly());
      }
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      for (      final AttrTO attrTO : confTO.getDerAttrMap().values()) {
        System.out.println(""String_Node_Str"" + attrTO.getSchema());
        System.out.println(""String_Node_Str"" + attrTO.getValues());
        System.out.println(""String_Node_Str"" + attrTO.isReadonly());
      }
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      for (      final AttrTO attrTO : confTO.getVirAttrMap().values()) {
        System.out.println(""String_Node_Str"" + attrTO.getSchema());
        System.out.println(""String_Node_Str"" + attrTO.getValues());
        System.out.println(""String_Node_Str"" + attrTO.isReadonly());
      }
      System.out.println(""String_Node_Str"");
    }
 catch (    final Exception ex) {
      Messages.printMessage(ex.getMessage());
      break;
    }
  break;
case READ:
final String readErrorMessage=Messages.optionCommandMessage(""String_Node_Str"");
if (parameters.length >= 1) {
AttrTO attrTO;
for (final String parameter : parameters) {
  try {
    attrTO=configurationService.get(parameter);
    System.out.println(""String_Node_Str"" + attrTO.getSchema());
    System.out.println(""String_Node_Str"" + attrTO.getValues());
    System.out.println(""String_Node_Str"" + attrTO.isReadonly());
    System.out.println(""String_Node_Str"");
  }
 catch (  final SyncopeClientException|WebServiceException ex) {
    if (ex.getMessage().startsWith(""String_Node_Str"")) {
      Messages.printMessage(""String_Node_Str"" + parameters[0] + ""String_Node_Str"");
    }
 else     if (ex.getMessage().startsWith(""String_Node_Str"")) {
      Messages.printMessage(""String_Node_Str"" + parameters[0]);
    }
 else {
      Messages.printMessage(ex.getMessage());
    }
    break;
  }
}
}
 else {
System.out.println(readErrorMessage);
}
break;
case UPDATE:
final String updateErrorMessage=Messages.optionCommandMessage(""String_Node_Str"");
if (parameters.length >= 1) {
Input.PairParameter pairParameter=null;
AttrTO attrTO;
for (final String parameter : parameters) {
try {
pairParameter=input.toPairParameter(parameter);
attrTO=configurationService.get(pairParameter.getKey());
attrTO.getValues().clear();
attrTO.getValues().add(pairParameter.getValue());
configurationService.set(attrTO);
System.out.println(""String_Node_Str"" + attrTO.getSchema() + ""String_Node_Str"");
System.out.println(""String_Node_Str"" + attrTO.getValues());
System.out.println(""String_Node_Str"" + attrTO.isReadonly());
System.out.println(""String_Node_Str"");
}
 catch (final IllegalArgumentException ex) {
Messages.printMessage(ex.getMessage(),updateErrorMessage);
break;
}
catch (final SyncopeClientException|WebServiceException ex) {
if (ex.getMessage().startsWith(""String_Node_Str"")) {
Messages.printMessage(""String_Node_Str"" + pairParameter.getKey() + ""String_Node_Str"");
}
 else if (ex.getMessage().startsWith(""String_Node_Str"")) {
Messages.printMessage(pairParameter.getValue() + ""String_Node_Str"" + pairParameter.getKey());
}
 else if (ex.getMessage().startsWith(""String_Node_Str"")) {
Messages.printMessage(""String_Node_Str"" + parameters[0]);
}
 else {
Messages.printMessage(ex.getMessage());
}
break;
}
}
}
 else {
System.out.println(updateErrorMessage);
}
break;
case CREATE:
final String createErrorMessage=Messages.optionCommandMessage(""String_Node_Str"");
if (parameters.length >= 1) {
Input.PairParameter pairParameter=null;
AttrTO attrTO;
for (final String parameter : parameters) {
try {
pairParameter=input.toPairParameter(parameter);
attrTO=new AttrTO();
attrTO.setSchema(pairParameter.getKey());
attrTO.getValues().add(pairParameter.getValue());
configurationService.set(attrTO);
System.out.println(""String_Node_Str"" + attrTO.getSchema() + ""String_Node_Str"");
System.out.println(""String_Node_Str"" + attrTO.getValues());
System.out.println(""String_Node_Str"" + attrTO.isReadonly());
System.out.println(""String_Node_Str"");
}
 catch (final IllegalArgumentException ex) {
Messages.printMessage(ex.getMessage(),createErrorMessage);
break;
}
catch (final SyncopeClientException|WebServiceException ex) {
if (ex.getMessage().startsWith(""String_Node_Str"")) {
Messages.printMessage(""String_Node_Str"" + pairParameter.getKey() + ""String_Node_Str"");
}
 else {
Messages.printMessage(ex.getMessage());
}
break;
}
}
}
 else {
System.out.println(createErrorMessage);
}
break;
case DELETE:
final String deleteErrorMessage=Messages.optionCommandMessage(""String_Node_Str"");
if (parameters.length >= 1) {
for (final String parameter : parameters) {
try {
configurationService.delete(parameter);
System.out.println(""String_Node_Str"" + parameter + ""String_Node_Str"");
}
 catch (final SyncopeClientException|WebServiceException ex) {
if (ex.getMessage().startsWith(""String_Node_Str"")) {
Messages.printMessage(""String_Node_Str"" + parameter + ""String_Node_Str"");
}
 else if (ex.getMessage().startsWith(""String_Node_Str"")) {
Messages.printMessage(""String_Node_Str"",parameter);
}
 else {
Messages.printMessage(ex.getMessage());
}
break;
}
}
}
 else {
System.out.println(deleteErrorMessage);
}
break;
case EXPORT:
final String exportErrorMessage=Messages.optionCommandMessage(""String_Node_Str"");
if (parameters.length == 1) {
try {
XMLUtils.createXMLFile((SequenceInputStream)configurationService.export().getEntity(),parameters[0] + EXPORT_FILE_NAME);
System.out.println(""String_Node_Str"" + parameters[0] + EXPORT_FILE_NAME+ ""String_Node_Str"");
}
 catch (final IOException ex) {
Messages.printMessage(ex.getMessage());
}
catch (ParserConfigurationException|SAXException|TransformerConfigurationException ex) {
LOG.error(""String_Node_Str"",parameters[0],ex);
Messages.printMessage(""String_Node_Str"" + parameters[0] + EXPORT_FILE_NAME+ ""String_Node_Str""+ ex.getMessage());
break;
}
catch (final TransformerException ex) {
LOG.error(""String_Node_Str"",parameters[0],ex);
if (ex.getCause() instanceof FileNotFoundException) {
Messages.printMessage(""String_Node_Str"" + parameters[0]);
}
 else {
Messages.printMessage(""String_Node_Str"" + parameters[0] + EXPORT_FILE_NAME+ ""String_Node_Str""+ ex.getMessage());
}
break;
}
catch (final SyncopeClientException ex) {
LOG.error(""String_Node_Str"",ex);
Messages.printMessage(""String_Node_Str"" + ex.getMessage());
break;
}
}
 else {
System.out.println(exportErrorMessage);
}
break;
case HELP:
System.out.println(HELP_MESSAGE);
break;
default :
System.out.println(input.getOption() + ""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.println(HELP_MESSAGE);
break;
}
}"
60517,"public boolean isMultivalue(){
  return Boolean.TRUE;
}","@Override public boolean isMultivalue(){
  return Boolean.TRUE;
}"
60518,"public boolean isReadonly(){
  return Boolean.FALSE;
}","@Override public boolean isReadonly(){
  return Boolean.FALSE;
}"
60519,"public AttributeSchemaType getType(){
  return AttributeSchemaType.String;
}","@Override public AttributeSchemaType getType(){
  return AttributeSchemaType.String;
}"
60520,"public boolean isMultivalue(){
  return isBooleanAsInteger(multivalue);
}","@Override public boolean isMultivalue(){
  return isBooleanAsInteger(multivalue);
}"
60521,"public boolean isReadonly(){
  return isBooleanAsInteger(readonly);
}","@Override public boolean isReadonly(){
  return isBooleanAsInteger(readonly);
}"
60522,"public AttributeSchemaType getType(){
  return type;
}","@Override public AttributeSchemaType getType(){
  return type;
}"
60523,"public boolean isMultivalue(){
  return Boolean.TRUE;
}","@Override public boolean isMultivalue(){
  return Boolean.TRUE;
}"
60524,"public boolean isReadonly(){
  return isBooleanAsInteger(readonly);
}","@Override public boolean isReadonly(){
  return isBooleanAsInteger(readonly);
}"
60525,"public AttributeSchemaType getType(){
  return AttributeSchemaType.String;
}","@Override public AttributeSchemaType getType(){
  return AttributeSchemaType.String;
}"
60526,"/** 
 * Prepare an attribute to be sent to a connector instance.
 * @param resource target resource
 * @param < T > user / role
 * @param mapItem mapping item for the given attribute
 * @param subject given user
 * @param password clear-text password
 * @param passwordGenerator password generator
 * @param vAttrsToBeRemoved virtual attributes to be removed
 * @param vAttrsToBeUpdated virtual attributes to be added
 * @return account link + prepared attribute
 */
@SuppressWarnings(""String_Node_Str"") private static <T extends AbstractAttributable>Map.Entry<String,Attribute> prepareAttribute(final ExternalResource resource,final AbstractMappingItem mapItem,final T subject,final String password,final PasswordGenerator passwordGenerator,final Set<String> vAttrsToBeRemoved,final Map<String,AttributeMod> vAttrsToBeUpdated,final Set<String> membVAttrsToBeRemoved,final Map<String,AttributeMod> membVAttrsToBeUpdated){
  final List<AbstractAttributable> attributables=new ArrayList<AbstractAttributable>();
  final ConfigurableApplicationContext context=ApplicationContextProvider.getApplicationContext();
  final ConnObjectUtil connObjectUtil=context.getBean(ConnObjectUtil.class);
switch (mapItem.getIntMappingType().getAttributableType()) {
case USER:
    if (subject instanceof SyncopeUser) {
      attributables.add(subject);
    }
  break;
case ROLE:
if (subject instanceof SyncopeUser) {
  for (  SyncopeRole role : ((SyncopeUser)subject).getRoles()) {
    connObjectUtil.retrieveVirAttrValues(role,AttributableUtil.getInstance(role));
    attributables.add(role);
  }
}
if (subject instanceof SyncopeRole) {
attributables.add(subject);
}
break;
case MEMBERSHIP:
if (subject instanceof SyncopeUser) {
attributables.addAll(((SyncopeUser)subject).getMemberships());
}
break;
default :
}
List<AbstractAttrValue> values=getIntValues(resource,mapItem,attributables,vAttrsToBeRemoved,vAttrsToBeUpdated,membVAttrsToBeRemoved,membVAttrsToBeUpdated);
AbstractNormalSchema schema=null;
boolean readOnlyVirSchema=false;
AttributeSchemaType schemaType;
final Map.Entry<String,Attribute> result;
switch (mapItem.getIntMappingType()) {
case UserSchema:
case RoleSchema:
case MembershipSchema:
final SchemaDAO schemaDAO=context.getBean(SchemaDAO.class);
schema=schemaDAO.find(mapItem.getIntAttrName(),MappingUtil.getIntMappingTypeClass(mapItem.getIntMappingType()));
schemaType=schema == null ? AttributeSchemaType.String : schema.getType();
break;
case UserVirtualSchema:
case RoleVirtualSchema:
case MembershipVirtualSchema:
VirSchemaDAO virSchemaDAO=context.getBean(VirSchemaDAO.class);
AbstractVirSchema virSchema=virSchemaDAO.find(mapItem.getIntAttrName(),MappingUtil.getIntMappingTypeClass(mapItem.getIntMappingType()));
readOnlyVirSchema=(virSchema != null && virSchema.isReadonly());
schemaType=AttributeSchemaType.String;
break;
default :
schemaType=AttributeSchemaType.String;
}
final String extAttrName=mapItem.getExtAttrName();
LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + extAttrName + ""String_Node_Str""+ mapItem.isAccountid()+ ""String_Node_Str""+ (mapItem.isPassword() || mapItem.getIntMappingType() == IntMappingType.Password)+ ""String_Node_Str""+ mapItem.getMandatoryCondition()+ ""String_Node_Str""+ mapItem.getIntAttrName()+ ""String_Node_Str""+ mapItem.getIntMappingType().toString()+ ""String_Node_Str""+ schemaType.getType().getName()+ ""String_Node_Str""+ values);
if (readOnlyVirSchema) {
result=null;
}
 else {
final List<Object> objValues=new ArrayList<Object>();
for (AbstractAttrValue value : values) {
if (FrameworkUtil.isSupportedAttributeType(schemaType.getType())) {
objValues.add(value.getValue());
}
 else {
objValues.add(value.getValueAsString());
}
}
if (mapItem.isAccountid()) {
result=new AbstractMap.SimpleEntry<String,Attribute>(objValues.iterator().next().toString(),null);
}
 else if (mapItem.isPassword() && subject instanceof SyncopeUser) {
String passwordAttrValue=password;
if (StringUtils.isBlank(passwordAttrValue)) {
SyncopeUser user=(SyncopeUser)subject;
if (user.canDecodePassword()) {
try {
passwordAttrValue=ENCRYPTOR.decode(user.getPassword(),user.getCipherAlgorithm());
}
 catch (Exception e) {
LOG.error(""String_Node_Str"",user,e);
}
}
 else if (resource.isRandomPwdIfNotProvided()) {
try {
passwordAttrValue=passwordGenerator.generate(user);
}
 catch (InvalidPasswordPolicySpecException e) {
LOG.error(""String_Node_Str"",user,e);
}
}
}
if (passwordAttrValue == null) {
result=null;
}
 else {
result=new AbstractMap.SimpleEntry<String,Attribute>(null,AttributeBuilder.buildPassword(passwordAttrValue.toCharArray()));
}
}
 else {
if ((schema != null && schema.isMultivalue()) || AttributableUtil.getInstance(subject).getType() != mapItem.getIntMappingType().getAttributableType()) {
result=new AbstractMap.SimpleEntry<String,Attribute>(null,AttributeBuilder.build(extAttrName,objValues));
}
 else {
result=new AbstractMap.SimpleEntry<String,Attribute>(null,objValues.isEmpty() ? AttributeBuilder.build(extAttrName) : AttributeBuilder.build(extAttrName,objValues.iterator().next()));
}
}
}
return result;
}","/** 
 * Prepare an attribute to be sent to a connector instance.
 * @param resource target resource
 * @param < T > user / role
 * @param mapItem mapping item for the given attribute
 * @param subject given user
 * @param password clear-text password
 * @param passwordGenerator password generator
 * @param vAttrsToBeRemoved virtual attributes to be removed
 * @param vAttrsToBeUpdated virtual attributes to be added
 * @return account link + prepared attribute
 */
@SuppressWarnings(""String_Node_Str"") private static <T extends AbstractAttributable>Map.Entry<String,Attribute> prepareAttribute(final ExternalResource resource,final AbstractMappingItem mapItem,final T subject,final String password,final PasswordGenerator passwordGenerator,final Set<String> vAttrsToBeRemoved,final Map<String,AttributeMod> vAttrsToBeUpdated,final Set<String> membVAttrsToBeRemoved,final Map<String,AttributeMod> membVAttrsToBeUpdated){
  final List<AbstractAttributable> attributables=new ArrayList<AbstractAttributable>();
  final ConfigurableApplicationContext context=ApplicationContextProvider.getApplicationContext();
  final ConnObjectUtil connObjectUtil=context.getBean(ConnObjectUtil.class);
switch (mapItem.getIntMappingType().getAttributableType()) {
case USER:
    if (subject instanceof SyncopeUser) {
      attributables.add(subject);
    }
  break;
case ROLE:
if (subject instanceof SyncopeUser) {
  for (  SyncopeRole role : ((SyncopeUser)subject).getRoles()) {
    connObjectUtil.retrieveVirAttrValues(role,AttributableUtil.getInstance(role));
    attributables.add(role);
  }
}
if (subject instanceof SyncopeRole) {
attributables.add(subject);
}
break;
case MEMBERSHIP:
if (subject instanceof SyncopeUser) {
attributables.addAll(((SyncopeUser)subject).getMemberships());
}
break;
default :
}
List<AbstractAttrValue> values=getIntValues(resource,mapItem,attributables,vAttrsToBeRemoved,vAttrsToBeUpdated,membVAttrsToBeRemoved,membVAttrsToBeUpdated);
AbstractSchema schema=null;
boolean readOnlyVirSchema=false;
AttributeSchemaType schemaType;
final Map.Entry<String,Attribute> result;
switch (mapItem.getIntMappingType()) {
case UserSchema:
case RoleSchema:
case MembershipSchema:
final SchemaDAO schemaDAO=context.getBean(SchemaDAO.class);
schema=schemaDAO.find(mapItem.getIntAttrName(),MappingUtil.getIntMappingTypeClass(mapItem.getIntMappingType()));
schemaType=schema == null ? AttributeSchemaType.String : schema.getType();
break;
case UserVirtualSchema:
case RoleVirtualSchema:
case MembershipVirtualSchema:
VirSchemaDAO virSchemaDAO=context.getBean(VirSchemaDAO.class);
schema=virSchemaDAO.find(mapItem.getIntAttrName(),MappingUtil.getIntMappingTypeClass(mapItem.getIntMappingType()));
readOnlyVirSchema=(schema != null && schema.isReadonly());
schemaType=AttributeSchemaType.String;
break;
default :
schemaType=AttributeSchemaType.String;
}
final String extAttrName=mapItem.getExtAttrName();
LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + extAttrName + ""String_Node_Str""+ mapItem.isAccountid()+ ""String_Node_Str""+ (mapItem.isPassword() || mapItem.getIntMappingType() == IntMappingType.Password)+ ""String_Node_Str""+ mapItem.getMandatoryCondition()+ ""String_Node_Str""+ mapItem.getIntAttrName()+ ""String_Node_Str""+ mapItem.getIntMappingType().toString()+ ""String_Node_Str""+ schemaType.getType().getName()+ ""String_Node_Str""+ values);
if (readOnlyVirSchema) {
result=null;
}
 else {
final List<Object> objValues=new ArrayList<Object>();
for (AbstractAttrValue value : values) {
if (FrameworkUtil.isSupportedAttributeType(schemaType.getType())) {
objValues.add(value.getValue());
}
 else {
objValues.add(value.getValueAsString());
}
}
if (mapItem.isAccountid()) {
result=new AbstractMap.SimpleEntry<String,Attribute>(objValues.iterator().next().toString(),null);
}
 else if (mapItem.isPassword() && subject instanceof SyncopeUser) {
String passwordAttrValue=password;
if (StringUtils.isBlank(passwordAttrValue)) {
SyncopeUser user=(SyncopeUser)subject;
if (user.canDecodePassword()) {
try {
passwordAttrValue=ENCRYPTOR.decode(user.getPassword(),user.getCipherAlgorithm());
}
 catch (Exception e) {
LOG.error(""String_Node_Str"",user,e);
}
}
 else if (resource.isRandomPwdIfNotProvided()) {
try {
passwordAttrValue=passwordGenerator.generate(user);
}
 catch (InvalidPasswordPolicySpecException e) {
LOG.error(""String_Node_Str"",user,e);
}
}
}
if (passwordAttrValue == null) {
result=null;
}
 else {
result=new AbstractMap.SimpleEntry<String,Attribute>(null,AttributeBuilder.buildPassword(passwordAttrValue.toCharArray()));
}
}
 else {
if ((schema != null && schema.isMultivalue()) || AttributableUtil.getInstance(subject).getType() != mapItem.getIntMappingType().getAttributableType()) {
result=new AbstractMap.SimpleEntry<String,Attribute>(null,AttributeBuilder.build(extAttrName,objValues));
}
 else {
result=new AbstractMap.SimpleEntry<String,Attribute>(null,objValues.isEmpty() ? AttributeBuilder.build(extAttrName) : AttributeBuilder.build(extAttrName,objValues.iterator().next()));
}
}
}
return result;
}"
60527,"public Roles(final PageParameters parameters){
  super(parameters);
  roleTabsContainer=new WebMarkupContainer(""String_Node_Str"");
  roleTabsContainer.setOutputMarkupId(true);
  add(roleTabsContainer);
  editRoleWin=new ModalWindow(""String_Node_Str"");
  editRoleWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editRoleWin.setInitialHeight(WIN_HEIGHT);
  editRoleWin.setInitialWidth(WIN_WIDTH);
  editRoleWin.setCookieName(""String_Node_Str"");
  add(editRoleWin);
  final TreeRolePanel treePanel=new TreeRolePanel(""String_Node_Str"");
  treePanel.setOutputMarkupId(true);
  roleTabsContainer.add(treePanel);
  final RoleSummaryPanel summaryPanel=new RoleSummaryPanel.Builder(""String_Node_Str"").window(editRoleWin).callerPageRef(Roles.this.getPageReference()).build();
  roleTabsContainer.add(summaryPanel);
  editRoleWin.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      final RoleSummaryPanel summaryPanel=(RoleSummaryPanel)roleTabsContainer.get(""String_Node_Str"");
      final TreeNodeClickUpdate data=new TreeNodeClickUpdate(target,summaryPanel == null || summaryPanel.getSelectedNode() == null ? 0 : summaryPanel.getSelectedNode().getId());
      send(getPage(),Broadcast.BREADTH,data);
      if (modalResult) {
        getSession().info(getString(Constants.OPERATION_SUCCEEDED));
        feedbackPanel.refresh(target);
        modalResult=false;
      }
    }
  }
);
  final AbstractSearchResultPanel searchResult=new RoleSearchResultPanel(""String_Node_Str"",true,null,getPageReference(),restClient);
  add(searchResult);
  final Form searchForm=new Form(""String_Node_Str"");
  add(searchForm);
  final RoleSearchPanel searchPanel=new RoleSearchPanel.Builder(""String_Node_Str"").build();
  searchForm.add(searchPanel);
  searchForm.add(new ClearIndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str""),getPageReference()){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmitInternal(    final AjaxRequestTarget target,    final Form<?> form){
      final String fiql=searchPanel.buildFIQL();
      LOG.debug(""String_Node_Str"",fiql);
      doSearch(target,fiql,searchResult);
      Session.get().getFeedbackMessages().clear();
      searchPanel.getSearchFeedback().refresh(target);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form<?> form){
      searchPanel.getSearchFeedback().refresh(target);
    }
  }
);
}","public Roles(final PageParameters parameters){
  super(parameters);
  roleTabsContainer=new WebMarkupContainer(""String_Node_Str"");
  roleTabsContainer.setOutputMarkupId(true);
  add(roleTabsContainer);
  editRoleWin=new ModalWindow(""String_Node_Str"");
  editRoleWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editRoleWin.setInitialHeight(WIN_HEIGHT);
  editRoleWin.setInitialWidth(WIN_WIDTH);
  editRoleWin.setCookieName(""String_Node_Str"");
  add(editRoleWin);
  final TreeRolePanel treePanel=new TreeRolePanel(""String_Node_Str"");
  treePanel.setOutputMarkupId(true);
  roleTabsContainer.add(treePanel);
  final RoleSummaryPanel summaryPanel=new RoleSummaryPanel.Builder(""String_Node_Str"").window(editRoleWin).callerPageRef(Roles.this.getPageReference()).build();
  roleTabsContainer.add(summaryPanel);
  editRoleWin.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      final RoleSummaryPanel summaryPanel=(RoleSummaryPanel)roleTabsContainer.get(""String_Node_Str"");
      final TreeNodeClickUpdate data=new TreeNodeClickUpdate(target,summaryPanel == null || summaryPanel.getSelectedNode() == null ? 0 : summaryPanel.getSelectedNode().getId());
      send(getPage(),Broadcast.BREADTH,data);
      if (modalResult) {
        getSession().info(getString(Constants.OPERATION_SUCCEEDED));
        feedbackPanel.refresh(target);
        modalResult=false;
      }
    }
  }
);
  final AbstractSearchResultPanel searchResult=new RoleSearchResultPanel(""String_Node_Str"",true,null,getPageReference(),restClient);
  add(searchResult);
  final Form searchForm=new Form(""String_Node_Str"");
  add(searchForm);
  final RoleSearchPanel searchPanel=new RoleSearchPanel.Builder(""String_Node_Str"").build();
  searchForm.add(searchPanel);
  final ClearIndicatingAjaxButton searchButton=new ClearIndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str""),getPageReference()){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmitInternal(    final AjaxRequestTarget target,    final Form<?> form){
      final String fiql=searchPanel.buildFIQL();
      LOG.debug(""String_Node_Str"",fiql);
      doSearch(target,fiql,searchResult);
      Session.get().getFeedbackMessages().clear();
      searchPanel.getSearchFeedback().refresh(target);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form<?> form){
      searchPanel.getSearchFeedback().refresh(target);
    }
  }
;
  searchForm.add(searchButton);
  searchForm.setDefaultButton(searchButton);
}"
60528,"public Roles(final PageParameters parameters){
  super(parameters);
  editRoleWin=new ModalWindow(""String_Node_Str"");
  editRoleWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editRoleWin.setInitialHeight(WIN_HEIGHT);
  editRoleWin.setInitialWidth(WIN_WIDTH);
  editRoleWin.setCookieName(""String_Node_Str"");
  add(editRoleWin);
  final TreeRolePanel treePanel=new TreeRolePanel(""String_Node_Str"");
  treePanel.setOutputMarkupId(true);
  add(treePanel);
  final RoleSummaryPanel summaryPanel=new RoleSummaryPanel.Builder(""String_Node_Str"").window(editRoleWin).callerPageRef(Roles.this.getPageReference()).build();
  add(summaryPanel);
  editRoleWin.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      final RoleSummaryPanel summaryPanel=(RoleSummaryPanel)get(""String_Node_Str"");
      final TreeNodeClickUpdate data=new TreeNodeClickUpdate(target,summaryPanel == null || summaryPanel.getSelectedNode() == null ? 0 : summaryPanel.getSelectedNode().getId());
      send(getPage(),Broadcast.BREADTH,data);
      if (modalResult) {
        getSession().info(getString(Constants.OPERATION_SUCCEEDED));
        target.add(feedbackPanel);
        modalResult=false;
      }
    }
  }
);
  final AbstractSearchResultPanel searchResult=new RoleSearchResultPanel(""String_Node_Str"",true,null,getPageReference(),restClient);
  add(searchResult);
  final Form searchForm=new Form(""String_Node_Str"");
  add(searchForm);
  final RoleSearchPanel searchPanel=new RoleSearchPanel.Builder(""String_Node_Str"").build();
  searchForm.add(searchPanel);
  searchForm.add(new ClearIndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str""),getPageReference()){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmitInternal(    final AjaxRequestTarget target,    final Form<?> form){
      final NodeCond searchCond=searchPanel.buildSearchCond();
      LOG.debug(""String_Node_Str"",searchCond);
      doSearch(target,searchCond,searchResult);
      Session.get().getFeedbackMessages().clear();
      target.add(searchPanel.getSearchFeedback());
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form<?> form){
      target.add(searchPanel.getSearchFeedback());
    }
  }
);
}","public Roles(final PageParameters parameters){
  super(parameters);
  editRoleWin=new ModalWindow(""String_Node_Str"");
  editRoleWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editRoleWin.setInitialHeight(WIN_HEIGHT);
  editRoleWin.setInitialWidth(WIN_WIDTH);
  editRoleWin.setCookieName(""String_Node_Str"");
  add(editRoleWin);
  final TreeRolePanel treePanel=new TreeRolePanel(""String_Node_Str"");
  treePanel.setOutputMarkupId(true);
  add(treePanel);
  final RoleSummaryPanel summaryPanel=new RoleSummaryPanel.Builder(""String_Node_Str"").window(editRoleWin).callerPageRef(Roles.this.getPageReference()).build();
  add(summaryPanel);
  editRoleWin.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      final RoleSummaryPanel summaryPanel=(RoleSummaryPanel)get(""String_Node_Str"");
      final TreeNodeClickUpdate data=new TreeNodeClickUpdate(target,summaryPanel == null || summaryPanel.getSelectedNode() == null ? 0 : summaryPanel.getSelectedNode().getId());
      send(getPage(),Broadcast.BREADTH,data);
      if (modalResult) {
        getSession().info(getString(Constants.OPERATION_SUCCEEDED));
        target.add(feedbackPanel);
        modalResult=false;
      }
    }
  }
);
  final AbstractSearchResultPanel searchResult=new RoleSearchResultPanel(""String_Node_Str"",true,null,getPageReference(),restClient);
  add(searchResult);
  final Form searchForm=new Form(""String_Node_Str"");
  add(searchForm);
  final RoleSearchPanel searchPanel=new RoleSearchPanel.Builder(""String_Node_Str"").build();
  searchForm.add(searchPanel);
  final ClearIndicatingAjaxButton searchButton=new ClearIndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str""),getPageReference()){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmitInternal(    final AjaxRequestTarget target,    final Form<?> form){
      final NodeCond searchCond=searchPanel.buildSearchCond();
      LOG.debug(""String_Node_Str"",searchCond);
      doSearch(target,searchCond,searchResult);
      Session.get().getFeedbackMessages().clear();
      target.add(searchPanel.getSearchFeedback());
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form<?> form){
      target.add(searchPanel.getSearchFeedback());
    }
  }
;
  searchForm.add(searchButton);
  searchForm.setDefaultButton(searchButton);
}"
60529,"public static Object get(final Class claz){
  LOG.debug(""String_Node_Str"",claz.getName());
  return client.getService(claz);
}","public static Object get(final Class<?> claz){
  LOG.debug(""String_Node_Str"",claz.getName());
  return CLIENT.getService(claz);
}"
60530,"public CamelContext getContext(){
  return contextFactory.getContext(routeDAO);
}","public SpringCamelContext getContext(){
  return contextFactory.getContext(routeDAO);
}"
60531,"public CamelContext getContext(){
  return contextFactory.getContext(routeDAO);
}","public SpringCamelContext getContext(){
  return contextFactory.getContext(routeDAO);
}"
60532,"public CamelContext getContext(RouteDAO routeDAO){
  if (camelContext == null) {
    camelContext=new SpringCamelContext(ApplicationContextProvider.getApplicationContext());
  }
  if (camelContext.getRouteDefinitions().isEmpty()) {
    List<CamelRoute> crl=routeDAO.findAll();
    LOG.info(""String_Node_Str"",crl.size());
    loadContext(routeDAO,crl);
    try {
      camelContext.start();
    }
 catch (    Exception ex) {
      LOG.error(""String_Node_Str"",ex);
    }
  }
  return camelContext;
}","public SpringCamelContext getContext(RouteDAO routeDAO){
  if (camelContext == null) {
    camelContext=new SpringCamelContext(ApplicationContextProvider.getApplicationContext());
  }
  if (camelContext.getRouteDefinitions().isEmpty()) {
    List<CamelRoute> crl=routeDAO.findAll();
    LOG.info(""String_Node_Str"",crl.size());
    loadContext(routeDAO,crl);
    try {
      camelContext.start();
    }
 catch (    Exception ex) {
      LOG.error(""String_Node_Str"",ex);
    }
  }
  return camelContext;
}"
60533,"public Configuration(){
  super();
  setupSyncopeConf();
  add(new PoliciesPanel(""String_Node_Str"",getPageReference(),PolicyType.PASSWORD));
  add(new PoliciesPanel(""String_Node_Str"",getPageReference(),PolicyType.ACCOUNT));
  add(new PoliciesPanel(""String_Node_Str"",getPageReference(),PolicyType.SYNC));
  add(createNotificationWin=new ModalWindow(""String_Node_Str""));
  add(editNotificationWin=new ModalWindow(""String_Node_Str""));
  setupNotification();
  add(createSecurityQuestionWin=new ModalWindow(""String_Node_Str""));
  add(editSecurityQuestionWin=new ModalWindow(""String_Node_Str""));
  setupSecurityQuestion();
  WebMarkupContainer noActivitiEnabledForUsers=new WebMarkupContainer(""String_Node_Str"");
  noActivitiEnabledForUsers.setOutputMarkupPlaceholderTag(true);
  add(noActivitiEnabledForUsers);
  WebMarkupContainer workflowDefContainer=new WebMarkupContainer(""String_Node_Str"");
  workflowDefContainer.setOutputMarkupPlaceholderTag(true);
  if (wfRestClient.isActivitiEnabledForUsers()) {
    noActivitiEnabledForUsers.setVisible(false);
  }
 else {
    workflowDefContainer.setVisible(false);
  }
  BookmarkablePageLink<Void> activitiModeler=new BookmarkablePageLink<Void>(""String_Node_Str"",ActivitiModelerPopupPage.class);
  activitiModeler.setPopupSettings(new VeilPopupSettings().setHeight(600).setWidth(800));
  MetaDataRoleAuthorizationStrategy.authorize(activitiModeler,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  workflowDefContainer.add(activitiModeler);
  boolean activitiModelerEnabled=false;
  try {
    String activitiModelerDirectory=WebApplicationContextUtils.getWebApplicationContext(WebApplication.get().getServletContext()).getBean(""String_Node_Str"",String.class);
    File baseDir=new File(activitiModelerDirectory);
    activitiModelerEnabled=baseDir.exists() && baseDir.canRead() && baseDir.isDirectory();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
  activitiModeler.setEnabled(activitiModelerEnabled);
  BookmarkablePageLink<Void> xmlEditor=new BookmarkablePageLink<Void>(""String_Node_Str"",XMLEditorPopupPage.class);
  xmlEditor.setPopupSettings(new VeilPopupSettings().setHeight(480).setWidth(800));
  MetaDataRoleAuthorizationStrategy.authorize(xmlEditor,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  workflowDefContainer.add(xmlEditor);
  Image workflowDefDiagram=new Image(""String_Node_Str"",new Model()){
    private static final long serialVersionUID=-8457850449086490660L;
    @Override protected IResource getImageResource(){
      return new DynamicImageResource(){
        private static final long serialVersionUID=923201517955737928L;
        @Override protected byte[] getImageData(        final IResource.Attributes attributes){
          return wfRestClient.isActivitiEnabledForUsers() ? wfRestClient.getDiagram() : new byte[0];
        }
      }
;
    }
  }
;
  workflowDefContainer.add(workflowDefDiagram);
  MetaDataRoleAuthorizationStrategy.authorize(workflowDefContainer,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(workflowDefContainer);
  PropertyListView<LoggerTO> coreLoggerList=new LoggerPropertyList(null,""String_Node_Str"",loggerRestClient.listLogs());
  WebMarkupContainer coreLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  coreLoggerContainer.add(coreLoggerList);
  coreLoggerContainer.setOutputMarkupId(true);
  MetaDataRoleAuthorizationStrategy.authorize(coreLoggerContainer,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(coreLoggerContainer);
  ConsoleLoggerController consoleLoggerController=new ConsoleLoggerController();
  PropertyListView<LoggerTO> consoleLoggerList=new LoggerPropertyList(consoleLoggerController,""String_Node_Str"",consoleLoggerController.getLoggers());
  WebMarkupContainer consoleLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  consoleLoggerContainer.add(consoleLoggerList);
  consoleLoggerContainer.setOutputMarkupId(true);
  MetaDataRoleAuthorizationStrategy.authorize(consoleLoggerContainer,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(consoleLoggerContainer);
  add(new LayoutsPanel(""String_Node_Str"",LayoutType.ADMIN_USER,feedbackPanel));
  add(new LayoutsPanel(""String_Node_Str"",LayoutType.SELF_USER,feedbackPanel));
  add(new LayoutsPanel(""String_Node_Str"",LayoutType.ADMIN_ROLE,feedbackPanel));
  add(new LayoutsPanel(""String_Node_Str"",LayoutType.SELF_ROLE,feedbackPanel));
  add(new LayoutsPanel(""String_Node_Str"",LayoutType.ADMIN_MEMBERSHIP,feedbackPanel));
  add(new LayoutsPanel(""String_Node_Str"",LayoutType.SELF_MEMBERSHIP,feedbackPanel));
}","public Configuration(){
  super();
  setupSyncopeConf();
  add(new PoliciesPanel(""String_Node_Str"",getPageReference(),PolicyType.PASSWORD));
  add(new PoliciesPanel(""String_Node_Str"",getPageReference(),PolicyType.ACCOUNT));
  add(new PoliciesPanel(""String_Node_Str"",getPageReference(),PolicyType.SYNC));
  add(createNotificationWin=new ModalWindow(""String_Node_Str""));
  add(editNotificationWin=new ModalWindow(""String_Node_Str""));
  setupNotification();
  add(createSecurityQuestionWin=new ModalWindow(""String_Node_Str""));
  add(editSecurityQuestionWin=new ModalWindow(""String_Node_Str""));
  setupSecurityQuestion();
  WebMarkupContainer noActivitiEnabledForUsers=new WebMarkupContainer(""String_Node_Str"");
  noActivitiEnabledForUsers.setOutputMarkupPlaceholderTag(true);
  add(noActivitiEnabledForUsers);
  WebMarkupContainer workflowDefContainer=new WebMarkupContainer(""String_Node_Str"");
  workflowDefContainer.setOutputMarkupPlaceholderTag(true);
  if (wfRestClient.isActivitiEnabledForUsers()) {
    noActivitiEnabledForUsers.setVisible(false);
  }
 else {
    workflowDefContainer.setVisible(false);
  }
  BookmarkablePageLink<Void> activitiModeler=new BookmarkablePageLink<Void>(""String_Node_Str"",ActivitiModelerPopupPage.class);
  activitiModeler.setPopupSettings(new VeilPopupSettings().setHeight(600).setWidth(800));
  MetaDataRoleAuthorizationStrategy.authorize(activitiModeler,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  workflowDefContainer.add(activitiModeler);
  boolean activitiModelerEnabled=false;
  try {
    String activitiModelerDirectory=WebApplicationContextUtils.getWebApplicationContext(WebApplication.get().getServletContext()).getBean(""String_Node_Str"",String.class);
    File baseDir=new File(activitiModelerDirectory);
    activitiModelerEnabled=baseDir.exists() && baseDir.canRead() && baseDir.isDirectory();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
  activitiModeler.setEnabled(activitiModelerEnabled);
  BookmarkablePageLink<Void> xmlEditor=new BookmarkablePageLink<Void>(""String_Node_Str"",XMLEditorPopupPage.class);
  xmlEditor.setPopupSettings(new VeilPopupSettings().setHeight(480).setWidth(800));
  MetaDataRoleAuthorizationStrategy.authorize(xmlEditor,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  workflowDefContainer.add(xmlEditor);
  Image workflowDefDiagram=new Image(""String_Node_Str"",new Model()){
    private static final long serialVersionUID=-8457850449086490660L;
    @Override protected IResource getImageResource(){
      return new DynamicImageResource(){
        private static final long serialVersionUID=923201517955737928L;
        @Override protected byte[] getImageData(        final IResource.Attributes attributes){
          return wfRestClient.isActivitiEnabledForUsers() ? wfRestClient.getDiagram() : new byte[0];
        }
      }
;
    }
  }
;
  workflowDefContainer.add(workflowDefDiagram);
  MetaDataRoleAuthorizationStrategy.authorize(workflowDefContainer,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(workflowDefContainer);
  PropertyListView<LoggerTO> coreLoggerList=new LoggerPropertyList(null,""String_Node_Str"",loggerRestClient.listLogs());
  WebMarkupContainer coreLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  coreLoggerContainer.add(coreLoggerList);
  coreLoggerContainer.setOutputMarkupId(true);
  MetaDataRoleAuthorizationStrategy.authorize(coreLoggerContainer,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(coreLoggerContainer);
  ConsoleLoggerController consoleLoggerController=new ConsoleLoggerController();
  PropertyListView<LoggerTO> consoleLoggerList=new LoggerPropertyList(consoleLoggerController,""String_Node_Str"",consoleLoggerController.getLoggers());
  WebMarkupContainer consoleLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  consoleLoggerContainer.add(consoleLoggerList);
  consoleLoggerContainer.setOutputMarkupId(true);
  MetaDataRoleAuthorizationStrategy.authorize(consoleLoggerContainer,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(consoleLoggerContainer);
  add(new LayoutsPanel(""String_Node_Str"",AttrLayoutType.ADMIN_USER,feedbackPanel));
  add(new LayoutsPanel(""String_Node_Str"",AttrLayoutType.SELF_USER,feedbackPanel));
  add(new LayoutsPanel(""String_Node_Str"",AttrLayoutType.ADMIN_ROLE,feedbackPanel));
  add(new LayoutsPanel(""String_Node_Str"",AttrLayoutType.SELF_ROLE,feedbackPanel));
  add(new LayoutsPanel(""String_Node_Str"",AttrLayoutType.ADMIN_MEMBERSHIP,feedbackPanel));
  add(new LayoutsPanel(""String_Node_Str"",AttrLayoutType.SELF_MEMBERSHIP,feedbackPanel));
}"
60534,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void setupSyncopeConf(){
  WebMarkupContainer parameters=new WebMarkupContainer(""String_Node_Str"");
  add(parameters);
  MetaDataRoleAuthorizationStrategy.authorize(parameters,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  final ConfTO conf=confRestClient.list();
  for (Iterator<AttributeTO> it=conf.getAttrs().iterator(); it.hasNext(); ) {
    AttributeTO attr=it.next();
    for (    LayoutType type : LayoutType.values()) {
      if (type.getParameter().equals(attr.getSchema())) {
        it.remove();
      }
    }
  }
  final Form<?> form=new Form<Void>(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(conf));
  parameters.add(form);
  form.add(new AttributesPanel(""String_Node_Str"",conf,form,Mode.ADMIN));
  IndicatingAjaxLink<Void> save=new IndicatingAjaxLink<Void>(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      final ConfTO updatedConf=(ConfTO)form.getModelObject();
      try {
        for (        AttributeTO attr : updatedConf.getAttrs()) {
          if (attr.getValues().isEmpty() || attr.getValues().equals(Collections.singletonList(StringUtils.EMPTY))) {
            confRestClient.delete(attr.getSchema());
          }
 else {
            confRestClient.set(attr);
          }
        }
        info(getString(Constants.OPERATION_SUCCEEDED));
        feedbackPanel.refresh(target);
      }
 catch (      Exception e) {
        LOG.error(""String_Node_Str"",e);
        error(getString(Constants.ERROR) + ""String_Node_Str"" + e.getMessage());
        feedbackPanel.refresh(target);
      }
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(save,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  form.add(save);
  Link<Void> dbExportLink=new Link<Void>(""String_Node_Str""){
    private static final long serialVersionUID=-4331619903296515985L;
    @Override public void onClick(){
      try {
        HttpResourceStream stream=new HttpResourceStream(confRestClient.dbExport());
        ResourceStreamRequestHandler rsrh=new ResourceStreamRequestHandler(stream);
        rsrh.setFileName(stream.getFilename() == null ? ""String_Node_Str"" : stream.getFilename());
        rsrh.setContentDisposition(ContentDisposition.ATTACHMENT);
        getRequestCycle().scheduleRequestHandlerAfterCurrent(rsrh);
      }
 catch (      Exception e) {
        error(getString(Constants.ERROR) + ""String_Node_Str"" + e.getMessage());
      }
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(dbExportLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(dbExportLink);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void setupSyncopeConf(){
  WebMarkupContainer parameters=new WebMarkupContainer(""String_Node_Str"");
  add(parameters);
  MetaDataRoleAuthorizationStrategy.authorize(parameters,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  final ConfTO conf=confRestClient.list();
  for (Iterator<AttributeTO> it=conf.getAttrs().iterator(); it.hasNext(); ) {
    AttributeTO attr=it.next();
    for (    AttrLayoutType type : AttrLayoutType.values()) {
      if (type.getConfKey().equals(attr.getSchema())) {
        it.remove();
      }
    }
  }
  final Form<?> form=new Form<Void>(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(conf));
  parameters.add(form);
  form.add(new AttributesPanel(""String_Node_Str"",conf,form,Mode.ADMIN));
  IndicatingAjaxLink<Void> save=new IndicatingAjaxLink<Void>(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      final ConfTO updatedConf=(ConfTO)form.getModelObject();
      try {
        for (        AttributeTO attr : updatedConf.getAttrs()) {
          if (attr.getValues().isEmpty() || attr.getValues().equals(Collections.singletonList(StringUtils.EMPTY))) {
            confRestClient.delete(attr.getSchema());
          }
 else {
            confRestClient.set(attr);
          }
        }
        info(getString(Constants.OPERATION_SUCCEEDED));
        feedbackPanel.refresh(target);
      }
 catch (      Exception e) {
        LOG.error(""String_Node_Str"",e);
        error(getString(Constants.ERROR) + ""String_Node_Str"" + e.getMessage());
        feedbackPanel.refresh(target);
      }
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(save,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  form.add(save);
  Link<Void> dbExportLink=new Link<Void>(""String_Node_Str""){
    private static final long serialVersionUID=-4331619903296515985L;
    @Override public void onClick(){
      try {
        HttpResourceStream stream=new HttpResourceStream(confRestClient.dbExport());
        ResourceStreamRequestHandler rsrh=new ResourceStreamRequestHandler(stream);
        rsrh.setFileName(stream.getFilename() == null ? ""String_Node_Str"" : stream.getFilename());
        rsrh.setContentDisposition(ContentDisposition.ATTACHMENT);
        getRequestCycle().scheduleRequestHandlerAfterCurrent(rsrh);
      }
 catch (      Exception e) {
        error(getString(Constants.ERROR) + ""String_Node_Str"" + e.getMessage());
      }
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(dbExportLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(dbExportLink);
}"
60535,"private NonI18nPalette<String> buildPalette(final Type type,final List<String> allSchemas){
  if (allSchemas != null && !allSchemas.isEmpty()) {
    Collections.sort(allSchemas);
  }
  ListModel<String> availableSchemas=new ListModel<String>(allSchemas);
  return new NonI18nPalette<String>(type.name(),new PropertyModel<List<String>>(roleTO,type.name()),availableSchemas,new SelectChoiceRenderer<String>(),8,false){
    private static final long serialVersionUID=2295567122085510330L;
    @Override protected Recorder<String> newRecorderComponent(){
      final Recorder<String> recorder=super.newRecorderComponent();
switch (type) {
case rAttrTemplates:
case rDerAttrTemplates:
case rVirAttrTemplates:
        recorder.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE){
          private static final long serialVersionUID=-1107858522700306810L;
          @Override protected void onUpdate(          final AjaxRequestTarget target){
            send(getPage(),Broadcast.BREADTH,new RoleAttrTemplatesChange(type,target));
          }
        }
);
      break;
default :
  }
  return recorder;
}
}
;
}","private NonI18nPalette<String> buildPalette(final Type type,final List<String> allSchemas){
  if (allSchemas != null && !allSchemas.isEmpty()) {
    Collections.sort(allSchemas);
  }
  ListModel<String> availableSchemas=new ListModel<String>(allSchemas);
  return new NonI18nPalette<String>(type.name(),new PropertyModel<List<String>>(roleTO,type.name()),availableSchemas,new SelectChoiceRenderer<String>(),8,false,true){
    private static final long serialVersionUID=2295567122085510330L;
    @Override protected Recorder<String> newRecorderComponent(){
      final Recorder<String> recorder=super.newRecorderComponent();
switch (type) {
case rAttrTemplates:
case rDerAttrTemplates:
case rVirAttrTemplates:
        recorder.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE){
          private static final long serialVersionUID=-1107858522700306810L;
          @Override protected void onUpdate(          final AjaxRequestTarget target){
            send(getPage(),Broadcast.BREADTH,new RoleAttrTemplatesChange(type,target));
          }
        }
);
      break;
default :
  }
  return recorder;
}
}
;
}"
60536,"@Before public void setupSMTP() throws Exception {
  JavaMailSenderImpl sender=(JavaMailSenderImpl)mailSender;
  sender.setDefaultEncoding(SyncopeConstants.DEFAULT_ENCODING);
  sender.setHost(SMTP_HOST);
  sender.setPort(SMTP_PORT);
  sender.setUsername(MAIL_ADDRESS);
  sender.setPassword(MAIL_PASSWORD);
}","@Before public void setupSMTP() throws Exception {
  JavaMailSenderImpl sender=(JavaMailSenderImpl)mailSender;
  sender.setDefaultEncoding(SyncopeConstants.DEFAULT_ENCODING);
  sender.setHost(SMTP_HOST);
  sender.setPort(SMTP_PORT);
}"
60537,"public void run(final AbstractUIProcessHandler handler,final String[] args){
  final String installPath=args[0];
  final String mavenDir=args[1];
  final String groupId=args[2];
  final String artifactId=args[3];
  final String secretKey=args[4];
  final String anonymousKey=args[5];
  final String confDirectory=args[6];
  final String logsDirectory=args[7];
  final String bundlesDirectory=args[8];
  final String syncopeVersion=args[9];
  final String syncopeAdminPassword=args[10];
  final FileSystemUtils fileSystemUtils=new FileSystemUtils(handler);
  if (!new File(installPath).exists()) {
    fileSystemUtils.createDirectory(installPath,null);
    InstallLog.initialize(installPath,handler);
  }
  final MavenUtils mavenUtils=new MavenUtils(mavenDir,handler);
  mavenUtils.archetypeGenerate(syncopeVersion,groupId,artifactId,secretKey,anonymousKey,installPath);
  fileSystemUtils.writeToFile(new File(installPath + ""String_Node_Str"" + artifactId+ Pom.PATH),String.format(Pom.FILE,syncopeVersion,syncopeVersion,groupId,artifactId));
  fileSystemUtils.createDirectory(confDirectory,null);
  fileSystemUtils.createDirectory(logsDirectory,null);
  fileSystemUtils.createDirectory(bundlesDirectory,null);
  mavenUtils.createPackage(installPath + ""String_Node_Str"" + artifactId,confDirectory,logsDirectory,bundlesDirectory);
}","public void run(final AbstractUIProcessHandler handler,final String[] args){
  final String installPath=args[0];
  final String mavenDir=args[1];
  final String groupId=args[2];
  final String artifactId=args[3];
  final String secretKey=args[4];
  final String anonymousKey=args[5];
  final String confDirectory=args[6];
  final String logsDirectory=args[7];
  final String bundlesDirectory=args[8];
  final String syncopeVersion=args[9];
  final String syncopeAdminPassword=args[10];
  final FileSystemUtils fileSystemUtils=new FileSystemUtils(handler);
  if (!new File(installPath).exists()) {
    fileSystemUtils.createDirectory(installPath,null);
    InstallLog.initialize(installPath,handler);
  }
 else {
    InstallLog.initialize(installPath,handler);
  }
  final MavenUtils mavenUtils=new MavenUtils(mavenDir,handler);
  mavenUtils.archetypeGenerate(syncopeVersion,groupId,artifactId,secretKey,anonymousKey,installPath);
  fileSystemUtils.writeToFile(new File(installPath + ""String_Node_Str"" + artifactId+ Pom.PATH),String.format(Pom.FILE,syncopeVersion,syncopeVersion,groupId,artifactId));
  fileSystemUtils.createDirectory(confDirectory,null);
  fileSystemUtils.createDirectory(logsDirectory,null);
  fileSystemUtils.createDirectory(bundlesDirectory,null);
  mavenUtils.createPackage(installPath + ""String_Node_Str"" + artifactId,confDirectory,logsDirectory,bundlesDirectory);
}"
60538,"public void run(final AbstractUIProcessHandler handler,final String[] args){
  final String installPath=args[0];
  final String mavenDir=args[1];
  final String groupId=args[2];
  final String artifactId=args[3];
  final String secretKey=args[4];
  final String anonymousKey=args[5];
  final String logsDirectory=args[6];
  final String bundlesDirectory=args[7];
  final String syncopeVersion=args[8];
  final String syncopeAdminPassword=args[9];
  if (!new File(installPath).exists()) {
    FileSystemUtils.createDirectory(installPath,handler,null);
  }
  final MavenUtils mavenUtils=new MavenUtils(mavenDir);
  mavenUtils.archetypeGenerate(syncopeVersion,groupId,artifactId,secretKey,anonymousKey,installPath);
  FileSystemUtils.writeToFile(new File(installPath + ""String_Node_Str"" + artifactId+ Pom.PATH),String.format(Pom.FILE,syncopeVersion,syncopeVersion));
  FileSystemUtils.createDirectory(logsDirectory,handler,null);
  FileSystemUtils.createDirectory(bundlesDirectory,handler,null);
  mavenUtils.createPackage(installPath + ""String_Node_Str"" + artifactId,logsDirectory,bundlesDirectory);
}","public void run(final AbstractUIProcessHandler handler,final String[] args){
  final String installPath=args[0];
  final String mavenDir=args[1];
  final String groupId=args[2];
  final String artifactId=args[3];
  final String secretKey=args[4];
  final String anonymousKey=args[5];
  final String confDirectory=args[6];
  final String logsDirectory=args[7];
  final String bundlesDirectory=args[8];
  final String syncopeVersion=args[9];
  final String syncopeAdminPassword=args[10];
  if (!new File(installPath).exists()) {
    FileSystemUtils.createDirectory(installPath,handler,null);
  }
  final MavenUtils mavenUtils=new MavenUtils(mavenDir);
  mavenUtils.archetypeGenerate(syncopeVersion,groupId,artifactId,secretKey,anonymousKey,installPath);
  FileSystemUtils.writeToFile(new File(installPath + ""String_Node_Str"" + artifactId+ Pom.PATH),String.format(Pom.FILE,syncopeVersion,syncopeVersion,groupId,artifactId));
  FileSystemUtils.createDirectory(logsDirectory,handler,null);
  FileSystemUtils.createDirectory(bundlesDirectory,handler,null);
  mavenUtils.createPackage(installPath + ""String_Node_Str"" + artifactId,confDirectory,logsDirectory,bundlesDirectory);
}"
60539,"@XmlElementWrapper(name=""String_Node_Str"") @XmlElement(name=""String_Node_Str"") public List<Object> getValues(){
  return values;
}","@XmlElementWrapper(name=""String_Node_Str"") @XmlElement(name=""String_Node_Str"") @JsonProperty(""String_Node_Str"") public List<Object> getValues(){
  return values;
}"
60540,"private List<ConnConfProperty> fillProperties(final ConnBundleTO bundleTO,final ConnInstanceTO connInstanceTO){
  final List<ConnConfProperty> props=new ArrayList<ConnConfProperty>();
  if (bundleTO != null) {
    for (    ConnConfPropSchema key : bundleTO.getProperties()) {
      final ConnConfProperty property=new ConnConfProperty();
      property.setSchema(key);
      if (connInstanceTO.getId() != 0 && connInstanceTO.getConfigurationMap().containsKey(key.getName())) {
        property.getValues().addAll(connInstanceTO.getConfigurationMap().get(key.getName()).getValues());
        property.setOverridable(connInstanceTO.getConfigurationMap().get(key.getName()).isOverridable());
      }
      if (property.getValues() == null || property.getValues().isEmpty() && key.getDefaultValue() != null) {
        if (key.getDefaultValue().getClass().isArray()) {
          property.getValues().addAll(Arrays.asList((Object[])key.getDefaultValue()));
        }
 else         if (key.getDefaultValue() instanceof Collection<?>) {
          property.getValues().addAll((Collection<?>)key.getDefaultValue());
        }
 else {
          property.getValues().add(key.getDefaultValue());
        }
      }
      props.add(property);
    }
  }
  Collections.sort(props);
  return props;
}","private List<ConnConfProperty> fillProperties(final ConnBundleTO bundleTO,final ConnInstanceTO connInstanceTO){
  final List<ConnConfProperty> props=new ArrayList<ConnConfProperty>();
  if (bundleTO != null) {
    for (    ConnConfPropSchema key : bundleTO.getProperties()) {
      final ConnConfProperty property=new ConnConfProperty();
      property.setSchema(key);
      if (connInstanceTO.getId() != 0 && connInstanceTO.getConfigurationMap().containsKey(key.getName())) {
        property.getValues().addAll(connInstanceTO.getConfigurationMap().get(key.getName()).getValues());
        property.setOverridable(connInstanceTO.getConfigurationMap().get(key.getName()).isOverridable());
      }
      if (property.getValues().isEmpty() && !key.getDefaultValues().isEmpty()) {
        property.getValues().addAll(key.getDefaultValues());
      }
      props.add(property);
    }
  }
  Collections.sort(props);
  return props;
}"
60541,"private Set<ConnConfProperty> filterProperties(final Set<ConnConfProperty> properties){
  Set<ConnConfProperty> newProperties=new HashSet<ConnConfProperty>();
  for (  ConnConfProperty property : properties) {
    ConnConfProperty prop=new ConnConfProperty();
    prop.setSchema(property.getSchema());
    prop.setOverridable(property.isOverridable());
    final List<Object> parsed=new ArrayList<Object>();
    if (property.getValues() != null) {
      for (      Object obj : property.getValues()) {
        if (obj != null && !obj.toString().isEmpty()) {
          parsed.add(obj);
        }
      }
    }
    prop.setValues(parsed);
    newProperties.add(prop);
  }
  return newProperties;
}","private Set<ConnConfProperty> filterProperties(final Set<ConnConfProperty> properties){
  Set<ConnConfProperty> newProperties=new HashSet<ConnConfProperty>();
  for (  ConnConfProperty property : properties) {
    ConnConfProperty prop=new ConnConfProperty();
    prop.setSchema(property.getSchema());
    prop.setOverridable(property.isOverridable());
    final List<Object> parsed=new ArrayList<Object>();
    if (property.getValues() != null) {
      for (      Object obj : property.getValues()) {
        if (obj != null && !obj.toString().isEmpty()) {
          parsed.add(obj);
        }
      }
    }
    prop.getValues().clear();
    prop.getValues().addAll(parsed);
    newProperties.add(prop);
  }
  return newProperties;
}"
60542,"@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") @Transactional(readOnly=true) public List<ConnBundleTO> getBundles(@RequestParam(value=""String_Node_Str"",required=false) final String lang){
  if (StringUtils.isBlank(lang)) {
    CurrentLocale.set(Locale.ENGLISH);
  }
 else {
    CurrentLocale.set(new Locale(lang));
  }
  List<ConnBundleTO> connectorBundleTOs=new ArrayList<ConnBundleTO>();
  for (  Map.Entry<String,List<ConnectorInfo>> entry : ConnIdBundleManager.getConnectorInfos().entrySet()) {
    for (    ConnectorInfo bundle : entry.getValue()) {
      ConnBundleTO connBundleTO=new ConnBundleTO();
      connBundleTO.setDisplayName(bundle.getConnectorDisplayName());
      connBundleTO.setLocation(entry.getKey());
      ConnectorKey key=bundle.getConnectorKey();
      connBundleTO.setBundleName(key.getBundleName());
      connBundleTO.setConnectorName(key.getConnectorName());
      connBundleTO.setVersion(key.getBundleVersion());
      ConfigurationProperties properties=ConnIdBundleManager.getConfigurationProperties(bundle);
      for (      String propName : properties.getPropertyNames()) {
        ConfigurationProperty configurationProperty=properties.getProperty(propName);
        ConnConfPropSchema connConfPropSchema=new ConnConfPropSchema();
        connConfPropSchema.setName(configurationProperty.getName());
        connConfPropSchema.setDisplayName(configurationProperty.getDisplayName(propName));
        connConfPropSchema.setHelpMessage(configurationProperty.getHelpMessage(propName));
        connConfPropSchema.setRequired(configurationProperty.isRequired());
        connConfPropSchema.setType(configurationProperty.getType().getName());
        connConfPropSchema.setOrder(((ConfigurationPropertyImpl)configurationProperty).getOrder());
        connConfPropSchema.setConfidential(configurationProperty.isConfidential());
        connConfPropSchema.setDefaultValue(configurationProperty.getValue());
        connBundleTO.addProperty(connConfPropSchema);
      }
      LOG.debug(""String_Node_Str"",connBundleTO);
      connectorBundleTOs.add(connBundleTO);
    }
  }
  return connectorBundleTOs;
}","@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") @Transactional(readOnly=true) public List<ConnBundleTO> getBundles(@RequestParam(value=""String_Node_Str"",required=false) final String lang){
  if (StringUtils.isBlank(lang)) {
    CurrentLocale.set(Locale.ENGLISH);
  }
 else {
    CurrentLocale.set(new Locale(lang));
  }
  List<ConnBundleTO> connectorBundleTOs=new ArrayList<ConnBundleTO>();
  for (  Map.Entry<String,List<ConnectorInfo>> entry : ConnIdBundleManager.getConnectorInfos().entrySet()) {
    for (    ConnectorInfo bundle : entry.getValue()) {
      ConnBundleTO connBundleTO=new ConnBundleTO();
      connBundleTO.setDisplayName(bundle.getConnectorDisplayName());
      connBundleTO.setLocation(entry.getKey());
      ConnectorKey key=bundle.getConnectorKey();
      connBundleTO.setBundleName(key.getBundleName());
      connBundleTO.setConnectorName(key.getConnectorName());
      connBundleTO.setVersion(key.getBundleVersion());
      ConfigurationProperties properties=ConnIdBundleManager.getConfigurationProperties(bundle);
      for (      String propName : properties.getPropertyNames()) {
        connBundleTO.addProperty(binder.buildConnConfPropSchema(properties.getProperty(propName)));
      }
      LOG.debug(""String_Node_Str"",connBundleTO);
      connectorBundleTOs.add(connBundleTO);
    }
  }
  return connectorBundleTOs;
}"
60543,"public ConnInstance getConnInstance(final ConnInstanceTO connInstanceTO){
  SyncopeClientCompositeErrorException scee=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  SyncopeClientException requiredValuesMissing=new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);
  if (connInstanceTO.getLocation() == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  if (connInstanceTO.getBundleName() == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  if (connInstanceTO.getVersion() == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  if (connInstanceTO.getConnectorName() == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  if (connInstanceTO.getConfiguration() == null || connInstanceTO.getConfiguration().isEmpty()) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  ConnInstance connInstance=new ConnInstance();
  BeanUtils.copyProperties(connInstanceTO,connInstance,IGNORE_PROPERTIES);
  if (connInstanceTO.getLocation() != null) {
    connInstance.setLocation(connInstanceTO.getLocation().toString());
  }
  if (!requiredValuesMissing.isEmpty()) {
    scee.addException(requiredValuesMissing);
  }
  if (scee.hasExceptions()) {
    throw scee;
  }
  return connInstance;
}","public ConnInstance getConnInstance(final ConnInstanceTO connInstanceTO){
  SyncopeClientCompositeErrorException scee=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  SyncopeClientException requiredValuesMissing=new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);
  if (connInstanceTO.getLocation() == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  if (connInstanceTO.getBundleName() == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  if (connInstanceTO.getVersion() == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  if (connInstanceTO.getConnectorName() == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  if (connInstanceTO.getConfiguration() == null || connInstanceTO.getConfiguration().isEmpty()) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  ConnInstance connInstance=new ConnInstance();
  BeanUtils.copyProperties(connInstanceTO,connInstance,IGNORE_PROPERTIES);
  if (connInstanceTO.getLocation() != null) {
    connInstance.setLocation(connInstanceTO.getLocation());
  }
  if (!requiredValuesMissing.isEmpty()) {
    scee.addException(requiredValuesMissing);
  }
  if (scee.hasExceptions()) {
    throw scee;
  }
  return connInstance;
}"
60544,"public ConnInstance updateConnInstance(final long connInstanceId,final ConnInstanceTO connInstanceTO){
  SyncopeClientCompositeErrorException scce=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  SyncopeClientException requiredValuesMissing=new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);
  if (connInstanceId == 0) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  ConnInstance connInstance=connInstanceDAO.find(connInstanceId);
  if (connInstanceTO.getLocation() != null) {
    connInstance.setLocation(connInstanceTO.getLocation().toString());
  }
  if (connInstanceTO.getBundleName() != null) {
    connInstance.setBundleName(connInstanceTO.getBundleName());
  }
  if (connInstanceTO.getVersion() != null) {
    connInstance.setVersion(connInstanceTO.getVersion());
  }
  if (connInstanceTO.getConnectorName() != null) {
    connInstance.setConnectorName(connInstanceTO.getConnectorName());
  }
  if (connInstanceTO.getConfiguration() != null && !connInstanceTO.getConfiguration().isEmpty()) {
    connInstance.setConfiguration(connInstanceTO.getConfiguration());
  }
  if (connInstanceTO.getDisplayName() != null) {
    connInstance.setDisplayName(connInstanceTO.getDisplayName());
  }
  if (connInstanceTO.getConnRequestTimeout() != null) {
    connInstance.setConnRequestTimeout(connInstanceTO.getConnRequestTimeout());
  }
  connInstance.setCapabilities(connInstanceTO.getCapabilities());
  if (!requiredValuesMissing.isEmpty()) {
    scce.addException(requiredValuesMissing);
  }
  if (scce.hasExceptions()) {
    throw scce;
  }
  return connInstance;
}","public ConnInstance updateConnInstance(final long connInstanceId,final ConnInstanceTO connInstanceTO){
  SyncopeClientCompositeErrorException scce=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  SyncopeClientException requiredValuesMissing=new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);
  if (connInstanceId == 0) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  ConnInstance connInstance=connInstanceDAO.find(connInstanceId);
  if (connInstanceTO.getLocation() != null) {
    connInstance.setLocation(connInstanceTO.getLocation());
  }
  if (connInstanceTO.getBundleName() != null) {
    connInstance.setBundleName(connInstanceTO.getBundleName());
  }
  if (connInstanceTO.getVersion() != null) {
    connInstance.setVersion(connInstanceTO.getVersion());
  }
  if (connInstanceTO.getConnectorName() != null) {
    connInstance.setConnectorName(connInstanceTO.getConnectorName());
  }
  if (connInstanceTO.getConfiguration() != null && !connInstanceTO.getConfiguration().isEmpty()) {
    connInstance.setConfiguration(connInstanceTO.getConfiguration());
  }
  if (connInstanceTO.getDisplayName() != null) {
    connInstance.setDisplayName(connInstanceTO.getDisplayName());
  }
  if (connInstanceTO.getConnRequestTimeout() != null) {
    connInstance.setConnRequestTimeout(connInstanceTO.getConnRequestTimeout());
  }
  connInstance.setCapabilities(connInstanceTO.getCapabilities());
  if (!requiredValuesMissing.isEmpty()) {
    scce.addException(requiredValuesMissing);
  }
  if (scce.hasExceptions()) {
    throw scce;
  }
  return connInstance;
}"
60545,"public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance){
  ConnInstanceTO connInstanceTO=new ConnInstanceTO();
  connInstanceTO.setId(connInstance.getId() == null ? 0L : connInstance.getId().longValue());
  ConfigurationProperties properties=ConnIdBundleManager.getConfigurationProperties(ConnIdBundleManager.getConnectorInfo(connInstance.getLocation(),connInstance.getBundleName(),connInstance.getVersion(),connInstance.getConnectorName()));
  BeanUtils.copyProperties(connInstance,connInstanceTO,IGNORE_PROPERTIES);
  final Map<String,ConnConfProperty> connInstanceToConfMap=connInstanceTO.getConfigurationMap();
  for (  String propName : properties.getPropertyNames()) {
    ConfigurationProperty configurationProperty=properties.getProperty(propName);
    if (connInstanceToConfMap.containsKey(propName)) {
      connInstanceToConfMap.get(propName).getSchema().setDisplayName(configurationProperty.getDisplayName(propName));
    }
 else {
      ConnConfPropSchema connConfPropSchema=new ConnConfPropSchema();
      connConfPropSchema.setName(configurationProperty.getName());
      connConfPropSchema.setDisplayName(configurationProperty.getDisplayName(propName));
      connConfPropSchema.setHelpMessage(configurationProperty.getHelpMessage(propName));
      connConfPropSchema.setRequired(configurationProperty.isRequired());
      connConfPropSchema.setType(configurationProperty.getType().getName());
      connConfPropSchema.setOrder(((ConfigurationPropertyImpl)configurationProperty).getOrder());
      connConfPropSchema.setConfidential(configurationProperty.isConfidential());
      connConfPropSchema.setDefaultValue(configurationProperty.getValue());
      ConnConfProperty property=new ConnConfProperty();
      property.setSchema(connConfPropSchema);
      connInstanceTO.addConfiguration(property);
    }
  }
  return connInstanceTO;
}","public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance){
  ConnInstanceTO connInstanceTO=new ConnInstanceTO();
  connInstanceTO.setId(connInstance.getId() == null ? 0L : connInstance.getId().longValue());
  ConfigurationProperties properties=ConnIdBundleManager.getConfigurationProperties(ConnIdBundleManager.getConnectorInfo(connInstance.getLocation(),connInstance.getBundleName(),connInstance.getVersion(),connInstance.getConnectorName()));
  BeanUtils.copyProperties(connInstance,connInstanceTO,IGNORE_PROPERTIES);
  final Map<String,ConnConfProperty> connInstanceToConfMap=connInstanceTO.getConfigurationMap();
  for (  String propName : properties.getPropertyNames()) {
    ConnConfPropSchema schema=buildConnConfPropSchema(properties.getProperty(propName));
    ConnConfProperty property;
    if (connInstanceToConfMap.containsKey(propName)) {
      property=connInstanceToConfMap.get(propName);
    }
 else {
      property=new ConnConfProperty();
      connInstanceTO.addConfiguration(property);
    }
    property.setSchema(schema);
  }
  return connInstanceTO;
}"
60546,"private static <T>T getObjectCXF(final Response response,final Class<T> type,final Object serviceProxy){
  String location=response.getLocation().toString();
  WebClient webClient=WebClient.fromClient(WebClient.client(serviceProxy));
  webClient.to(location,false);
  return webClient.get(type);
}","private static <T>T getObjectCXF(final Response response,final Class<T> type,final Object serviceProxy){
  final String location=response.getLocation().toString();
  final Client client=WebClient.client(serviceProxy);
  final WebClient webClient=WebClient.fromClient(client);
  webClient.accept(client.getHeaders().getFirst(""String_Node_Str"")).to(location,false);
  webClient.to(location,false);
  return webClient.get(type);
}"
60547,"/** 
 * Propagation execution failure message setter.
 * @param failureReason
 */
public void setFailureReason(final String failureReason){
  this.failureReason=failureReason;
}","/** 
 * Propagation execution failure message setter.
 * @param failureReason describes why this propagation failed
 */
public void setFailureReason(final String failureReason){
  this.failureReason=failureReason;
}"
60548,"/** 
 * Copy the property values of the given source bean into the given target bean. <br/> Note: The source and target classes do not have to match or even be derived from each other, as long as the properties match. Any bean properties that the source bean exposes but the target bean does not will silently be ignored.
 * @param source the source bean
 * @param target the target bean
 * @param editable the class (or interface) to restrict property setting to
 * @param ignoreProperties array of property names to ignore
 * @throws BeansException if the copying failed
 * @see org.springframework.beans.BeanWrapper
 */
@SuppressWarnings(""String_Node_Str"") private static void copyProperties(final Object source,final Object target,final Class<?> editable,final String... ignoreProperties) throws BeansException {
  Assert.notNull(source,""String_Node_Str"");
  Assert.notNull(target,""String_Node_Str"");
  Class<?> actualEditable=target.getClass();
  if (editable != null) {
    if (!editable.isInstance(target)) {
      throw new IllegalArgumentException(""String_Node_Str"" + target.getClass().getName() + ""String_Node_Str""+ editable.getName()+ ""String_Node_Str"");
    }
    actualEditable=editable;
  }
  PropertyDescriptor[] targetPds=getPropertyDescriptors(actualEditable);
  List<String> ignoreList=(ignoreProperties == null) ? Collections.<String>emptyList() : Arrays.asList(ignoreProperties);
  for (  PropertyDescriptor targetPd : targetPds) {
    if (ignoreProperties == null || (!ignoreList.contains(targetPd.getName()))) {
      PropertyDescriptor sourcePd=getPropertyDescriptor(source.getClass(),targetPd.getName());
      if (sourcePd != null) {
        Method readMethod=sourcePd.getReadMethod();
        if (readMethod != null) {
          Method writeMethod=targetPd.getWriteMethod();
          try {
            if (writeMethod == null) {
              Object value=readMethod.invoke(source);
              Method targetReadMethod=targetPd.getReadMethod();
              if (targetReadMethod != null) {
                if (!Modifier.isPublic(targetReadMethod.getDeclaringClass().getModifiers())) {
                  targetReadMethod.setAccessible(true);
                }
                Object destValue=targetReadMethod.invoke(target);
                if (value instanceof Collection && destValue instanceof Collection) {
                  ((Collection)destValue).clear();
                  ((Collection)destValue).addAll((Collection)value);
                }
 else                 if (value instanceof Map && destValue instanceof Map) {
                  ((Map)destValue).clear();
                  ((Map)destValue).putAll((Map)value);
                }
              }
            }
 else             if (ClassUtils.isAssignable(writeMethod.getParameterTypes()[0],readMethod.getReturnType())) {
              if (!Modifier.isPublic(readMethod.getDeclaringClass().getModifiers())) {
                readMethod.setAccessible(true);
              }
              Object value=readMethod.invoke(source);
              if (!Modifier.isPublic(writeMethod.getDeclaringClass().getModifiers())) {
                writeMethod.setAccessible(true);
              }
              writeMethod.invoke(target,value);
            }
          }
 catch (          Throwable ex) {
            throw new FatalBeanException(""String_Node_Str"" + targetPd.getName() + ""String_Node_Str"",ex);
          }
        }
      }
    }
  }
}","/** 
 * Copy the property values of the given source bean into the given target bean. <p> Note: The source and target classes do not have to match or even be derived from each other, as long as the properties match. Any bean properties that the source bean exposes but the target bean does not will silently be ignored. </p>
 * @param source the source bean
 * @param target the target bean
 * @param editable the class (or interface) to restrict property setting to
 * @param ignoreProperties array of property names to ignore
 * @throws BeansException if the copying failed
 * @see org.springframework.beans.BeanWrapper
 */
@SuppressWarnings(""String_Node_Str"") private static void copyProperties(final Object source,final Object target,final Class<?> editable,final String... ignoreProperties) throws BeansException {
  Assert.notNull(source,""String_Node_Str"");
  Assert.notNull(target,""String_Node_Str"");
  Class<?> actualEditable=target.getClass();
  if (editable != null) {
    if (!editable.isInstance(target)) {
      throw new IllegalArgumentException(""String_Node_Str"" + target.getClass().getName() + ""String_Node_Str""+ editable.getName()+ ""String_Node_Str"");
    }
    actualEditable=editable;
  }
  PropertyDescriptor[] targetPds=getPropertyDescriptors(actualEditable);
  List<String> ignoreList=(ignoreProperties == null) ? Collections.<String>emptyList() : Arrays.asList(ignoreProperties);
  for (  PropertyDescriptor targetPd : targetPds) {
    if (ignoreProperties == null || (!ignoreList.contains(targetPd.getName()))) {
      PropertyDescriptor sourcePd=getPropertyDescriptor(source.getClass(),targetPd.getName());
      if (sourcePd != null) {
        Method readMethod=sourcePd.getReadMethod();
        if (readMethod != null) {
          Method writeMethod=targetPd.getWriteMethod();
          try {
            if (writeMethod == null) {
              Object value=readMethod.invoke(source);
              Method targetReadMethod=targetPd.getReadMethod();
              if (targetReadMethod != null) {
                if (!Modifier.isPublic(targetReadMethod.getDeclaringClass().getModifiers())) {
                  targetReadMethod.setAccessible(true);
                }
                Object destValue=targetReadMethod.invoke(target);
                if (value instanceof Collection && destValue instanceof Collection) {
                  ((Collection)destValue).clear();
                  ((Collection)destValue).addAll((Collection)value);
                }
 else                 if (value instanceof Map && destValue instanceof Map) {
                  ((Map)destValue).clear();
                  ((Map)destValue).putAll((Map)value);
                }
              }
            }
 else             if (ClassUtils.isAssignable(writeMethod.getParameterTypes()[0],readMethod.getReturnType())) {
              if (!Modifier.isPublic(readMethod.getDeclaringClass().getModifiers())) {
                readMethod.setAccessible(true);
              }
              Object value=readMethod.invoke(source);
              if (!Modifier.isPublic(writeMethod.getDeclaringClass().getModifiers())) {
                writeMethod.setAccessible(true);
              }
              writeMethod.invoke(target,value);
            }
          }
 catch (          Throwable ex) {
            throw new FatalBeanException(""String_Node_Str"" + targetPd.getName() + ""String_Node_Str"",ex);
          }
        }
      }
    }
  }
}"
60549,"/** 
 * Convenience method for removing entire attribute instead removing each value in an AttributeMod object.
 * @param attribute (schema) of attribute to be removed.
 * @return true on success.
 */
public boolean addAttributeToBeRemoved(String attribute){
  return attributesToBeRemoved.add(attribute);
}","/** 
 * Convenience method for removing entire attribute instead removing each value in an AttributeMod object
 * @param name (schema) of attribute to be removed.
 * @return true on success.
 */
public boolean addAttributeToBeRemoved(String attribute){
  return attributesToBeRemoved.add(attribute);
}"
60550,"/** 
 * Convenience method for removing entire attribute instead removing each value in an AttributeMod object.
 * @param attribute (schema) of attribute to be removed.
 * @return true on success.
 */
public boolean removeAttributeToBeRemoved(String attribute){
  return attributesToBeRemoved.remove(attribute);
}","/** 
 * Convenience method for removing entire attribute instead removing each value in an AttributeMod object
 * @param name (schema) of attribute to be removed.
 * @return true on success.
 */
public boolean removeAttributeToBeRemoved(String attribute){
  return attributesToBeRemoved.remove(attribute);
}"
60551,"public void setVirtualAttributes(final List<AttributeTO> virtualAttributes){
  this.virtualAttributes.clear();
  if (virtualAttributes != null && !virtualAttributes.isEmpty()) {
    this.virtualAttributes.addAll(virtualAttributes);
  }
}","public void setVirtualAttributes(final List<AttributeTO> virtualAttributes){
  this.virtualAttributes=virtualAttributes;
}"
60552,"public void setDerivedAttributes(final List<AttributeTO> derivedAttributes){
  this.derivedAttributes.clear();
  if (derivedAttributes != null && !derivedAttributes.isEmpty()) {
    this.derivedAttributes.addAll(derivedAttributes);
  }
}","public void setDerivedAttributes(final List<AttributeTO> derivedAttributes){
  this.derivedAttributes=derivedAttributes;
}"
60553,"@Override public void setSchemaModalPage(final PageReference pageRef,final ModalWindow window,AbstractBaseBean schemaTO,final boolean createFlag){
  final SchemaTO schema;
  if (schemaTO != null && schemaTO instanceof SchemaTO) {
    schema=(SchemaTO)schemaTO;
  }
 else {
    schema=new SchemaTO();
  }
  final Form schemaForm=new Form(""String_Node_Str"");
  schemaForm.setModel(new CompoundPropertyModel(schema));
  schemaForm.setOutputMarkupId(Boolean.TRUE);
  final AjaxTextFieldPanel name=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""));
  name.addRequiredLabel();
  name.setEnabled(createFlag);
  final AjaxTextFieldPanel conversionPattern=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""));
  final IModel<List<String>> validatorsList=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      return restClient.getAllValidatorClasses();
    }
  }
;
  final AjaxDropDownChoicePanel<String> validatorClass=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(schema,""String_Node_Str""));
  ((DropDownChoice)validatorClass.getField()).setNullValid(true);
  validatorClass.setChoices(validatorsList.getObject());
  final AjaxDropDownChoicePanel<AttributeSchemaType> type=new AjaxDropDownChoicePanel<AttributeSchemaType>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(schema,""String_Node_Str""));
  type.setChoices(Arrays.asList(AttributeSchemaType.values()));
  type.addRequiredLabel();
  final AjaxTextFieldPanel enumerationValuesPanel=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<String>(null));
  final MultiValueSelectorPanel<String> enumerationValues=new MultiValueSelectorPanel<String>(""String_Node_Str"",new Model(),enumerationValuesPanel);
  schemaForm.add(enumerationValues);
  enumerationValues.setModelObject((Serializable)getEnumValuesAsList(schema.getEnumerationValues()));
  final MultiValueSelectorPanel<String> enumerationKeys=new MultiValueSelectorPanel<String>(""String_Node_Str"",new Model(),new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<String>(null)));
  schemaForm.add(enumerationKeys);
  enumerationKeys.setModelObject((Serializable)getEnumValuesAsList(schema.getEnumerationKeys()));
  if (schema == null || AttributeSchemaType.Enum.equals(schema.getType())) {
    enumerationValues.setEnabled(Boolean.FALSE);
    enumerationKeys.setEnabled(Boolean.FALSE);
  }
 else {
    enumerationValues.setEnabled(Boolean.TRUE);
    enumerationKeys.setEnabled(Boolean.TRUE);
    enumerationValuesPanel.addRequiredLabel();
  }
  type.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      if (AttributeSchemaType.Enum.ordinal() == Integer.parseInt(type.getField().getValue())) {
        if (!enumerationValuesPanel.isRequired()) {
          enumerationValuesPanel.addRequiredLabel();
        }
        enumerationValues.setEnabled(Boolean.TRUE);
        enumerationValues.setModelObject((Serializable)getEnumValuesAsList(schema.getEnumerationValues()));
        enumerationKeys.setEnabled(Boolean.TRUE);
        enumerationKeys.setModelObject((Serializable)getEnumValuesAsList(schema.getEnumerationKeys()));
      }
 else {
        if (enumerationValuesPanel.isRequired()) {
          enumerationValuesPanel.removeRequiredLabel();
        }
        final List<String> values=new ArrayList<String>();
        values.add(""String_Node_Str"");
        enumerationValues.setEnabled(Boolean.FALSE);
        enumerationValues.setModelObject((Serializable)values);
        final List<String> keys=new ArrayList<String>();
        keys.add(""String_Node_Str"");
        enumerationKeys.setEnabled(Boolean.FALSE);
        enumerationKeys.setModelObject((Serializable)keys);
      }
      target.add(schemaForm);
    }
  }
);
  final AutoCompleteTextField mandatoryCondition=new AutoCompleteTextField(""String_Node_Str""){
    private static final long serialVersionUID=-2428903969518079100L;
    @Override protected Iterator<String> getChoices(    String input){
      List<String> choices=new ArrayList<String>();
      if (Strings.isEmpty(input)) {
        choices=Collections.emptyList();
        return choices.iterator();
      }
      if (""String_Node_Str"".startsWith(input.toLowerCase())) {
        choices.add(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".startsWith(input.toLowerCase())) {
        choices.add(""String_Node_Str"");
      }
      return choices.iterator();
    }
  }
;
  mandatoryCondition.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
    }
  }
);
  final WebMarkupContainer pwdJexlHelp=JexlHelpUtil.getJexlHelpWebContainer(""String_Node_Str"");
  schemaForm.add(pwdJexlHelp);
  final AjaxLink<Void> pwdQuestionMarkJexlHelp=JexlHelpUtil.getAjaxLink(pwdJexlHelp,""String_Node_Str"");
  schemaForm.add(pwdQuestionMarkJexlHelp);
  final AjaxCheckBoxPanel multivalue=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(schema,""String_Node_Str""));
  final AjaxCheckBoxPanel readonly=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(schema,""String_Node_Str""));
  final AjaxCheckBoxPanel uniqueConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(schema,""String_Node_Str""));
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form<?> form){
      final SchemaTO schemaTO=(SchemaTO)form.getDefaultModelObject();
      schemaTO.setEnumerationValues(getEnumValuesAsString(enumerationValues.getView().getModelObject()));
      schemaTO.setEnumerationKeys(getEnumValuesAsString(enumerationKeys.getView().getModelObject()));
      if (schemaTO.isMultivalue() && schemaTO.isUniqueConstraint()) {
        error(getString(""String_Node_Str""));
        target.add(feedbackPanel);
        return;
      }
      try {
        if (createFlag) {
          restClient.createSchema(kind,schemaTO);
        }
 else {
          restClient.updateSchema(kind,schemaTO);
        }
        if (pageRef.getPage() instanceof BasePage) {
          ((BasePage)pageRef.getPage()).setModalResult(true);
        }
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form<?> form){
      target.add(feedbackPanel);
    }
  }
;
  final AjaxButton cancel=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form<?> form){
      window.close(target);
    }
  }
;
  cancel.setDefaultFormProcessing(false);
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  schemaForm.add(name);
  schemaForm.add(conversionPattern);
  schemaForm.add(validatorClass);
  schemaForm.add(type);
  schemaForm.add(mandatoryCondition);
  schemaForm.add(multivalue);
  schemaForm.add(readonly);
  schemaForm.add(uniqueConstraint);
  schemaForm.add(submit);
  schemaForm.add(cancel);
  add(schemaForm);
}","@Override public void setSchemaModalPage(final PageReference pageRef,final ModalWindow window,AbstractBaseBean schemaTO,final boolean createFlag){
  final SchemaTO schema;
  if (schemaTO != null && schemaTO instanceof SchemaTO) {
    schema=(SchemaTO)schemaTO;
  }
 else {
    schema=new SchemaTO();
  }
  final Form schemaForm=new Form(""String_Node_Str"");
  schemaForm.setModel(new CompoundPropertyModel(schema));
  schemaForm.setOutputMarkupId(Boolean.TRUE);
  final AjaxTextFieldPanel name=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""));
  name.addRequiredLabel();
  name.setEnabled(createFlag);
  final AjaxTextFieldPanel conversionPattern=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""));
  final IModel<List<String>> validatorsList=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      return restClient.getAllValidatorClasses();
    }
  }
;
  final AjaxDropDownChoicePanel<String> validatorClass=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(schema,""String_Node_Str""));
  ((DropDownChoice)validatorClass.getField()).setNullValid(true);
  validatorClass.setChoices(validatorsList.getObject());
  final AjaxDropDownChoicePanel<AttributeSchemaType> type=new AjaxDropDownChoicePanel<AttributeSchemaType>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(schema,""String_Node_Str""));
  type.setChoices(Arrays.asList(AttributeSchemaType.values()));
  type.addRequiredLabel();
  final AjaxTextFieldPanel enumerationValuesPanel=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<String>(null));
  final MultiValueSelectorPanel<String> enumerationValues=new MultiValueSelectorPanel<String>(""String_Node_Str"",new Model(),enumerationValuesPanel);
  schemaForm.add(enumerationValues);
  enumerationValues.setModelObject((Serializable)getEnumValuesAsList(schema.getEnumerationValues()));
  final MultiValueSelectorPanel<String> enumerationKeys=new MultiValueSelectorPanel<String>(""String_Node_Str"",new Model(),new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<String>(null)));
  schemaForm.add(enumerationKeys);
  enumerationKeys.setModelObject((Serializable)getEnumValuesAsList(schema.getEnumerationKeys()));
  if (AttributeSchemaType.Enum == schema.getType()) {
    enumerationValues.setEnabled(Boolean.TRUE);
    enumerationKeys.setEnabled(Boolean.TRUE);
    enumerationValuesPanel.addRequiredLabel();
  }
 else {
    enumerationValues.setEnabled(Boolean.FALSE);
    enumerationKeys.setEnabled(Boolean.FALSE);
  }
  type.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      if (AttributeSchemaType.Enum.ordinal() == Integer.parseInt(type.getField().getValue())) {
        if (!enumerationValuesPanel.isRequired()) {
          enumerationValuesPanel.addRequiredLabel();
        }
        enumerationValues.setEnabled(Boolean.TRUE);
        enumerationValues.setModelObject((Serializable)getEnumValuesAsList(schema.getEnumerationValues()));
        enumerationKeys.setEnabled(Boolean.TRUE);
        enumerationKeys.setModelObject((Serializable)getEnumValuesAsList(schema.getEnumerationKeys()));
      }
 else {
        if (enumerationValuesPanel.isRequired()) {
          enumerationValuesPanel.removeRequiredLabel();
        }
        final List<String> values=new ArrayList<String>();
        values.add(""String_Node_Str"");
        enumerationValues.setEnabled(Boolean.FALSE);
        enumerationValues.setModelObject((Serializable)values);
        final List<String> keys=new ArrayList<String>();
        keys.add(""String_Node_Str"");
        enumerationKeys.setEnabled(Boolean.FALSE);
        enumerationKeys.setModelObject((Serializable)keys);
      }
      target.add(schemaForm);
    }
  }
);
  final AutoCompleteTextField mandatoryCondition=new AutoCompleteTextField(""String_Node_Str""){
    private static final long serialVersionUID=-2428903969518079100L;
    @Override protected Iterator<String> getChoices(    String input){
      List<String> choices=new ArrayList<String>();
      if (Strings.isEmpty(input)) {
        choices=Collections.emptyList();
        return choices.iterator();
      }
      if (""String_Node_Str"".startsWith(input.toLowerCase())) {
        choices.add(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".startsWith(input.toLowerCase())) {
        choices.add(""String_Node_Str"");
      }
      return choices.iterator();
    }
  }
;
  mandatoryCondition.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
    }
  }
);
  final WebMarkupContainer pwdJexlHelp=JexlHelpUtil.getJexlHelpWebContainer(""String_Node_Str"");
  schemaForm.add(pwdJexlHelp);
  final AjaxLink<Void> pwdQuestionMarkJexlHelp=JexlHelpUtil.getAjaxLink(pwdJexlHelp,""String_Node_Str"");
  schemaForm.add(pwdQuestionMarkJexlHelp);
  final AjaxCheckBoxPanel multivalue=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(schema,""String_Node_Str""));
  final AjaxCheckBoxPanel readonly=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(schema,""String_Node_Str""));
  final AjaxCheckBoxPanel uniqueConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(schema,""String_Node_Str""));
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form<?> form){
      final SchemaTO schemaTO=(SchemaTO)form.getDefaultModelObject();
      schemaTO.setEnumerationValues(getEnumValuesAsString(enumerationValues.getView().getModelObject()));
      schemaTO.setEnumerationKeys(getEnumValuesAsString(enumerationKeys.getView().getModelObject()));
      if (schemaTO.isMultivalue() && schemaTO.isUniqueConstraint()) {
        error(getString(""String_Node_Str""));
        target.add(feedbackPanel);
        return;
      }
      try {
        if (createFlag) {
          restClient.createSchema(kind,schemaTO);
        }
 else {
          restClient.updateSchema(kind,schemaTO);
        }
        if (pageRef.getPage() instanceof BasePage) {
          ((BasePage)pageRef.getPage()).setModalResult(true);
        }
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form<?> form){
      target.add(feedbackPanel);
    }
  }
;
  final AjaxButton cancel=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form<?> form){
      window.close(target);
    }
  }
;
  cancel.setDefaultFormProcessing(false);
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  schemaForm.add(name);
  schemaForm.add(conversionPattern);
  schemaForm.add(validatorClass);
  schemaForm.add(type);
  schemaForm.add(mandatoryCondition);
  schemaForm.add(multivalue);
  schemaForm.add(readonly);
  schemaForm.add(uniqueConstraint);
  schemaForm.add(submit);
  schemaForm.add(cancel);
  add(schemaForm);
}"
60554,"@Test public void delete(){
  selenium.click(""String_Node_Str"");
  selenium.waitForCondition(""String_Node_Str"",""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  assertTrue(selenium.getConfirmation().matches(""String_Node_Str""));
}","@Test public void delete(){
  selenium.click(""String_Node_Str"");
  selenium.waitForCondition(""String_Node_Str"",""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  assertTrue(selenium.getConfirmation().matches(""String_Node_Str""));
}"
60555,"@Test public void clickAround(){
  selenium.click(""String_Node_Str"");
  selenium.waitForCondition(""String_Node_Str"",""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.waitForCondition(""String_Node_Str"",""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.waitForCondition(""String_Node_Str"",""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.waitForPageToLoad(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.waitForPageToLoad(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.waitForPageToLoad(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.waitForPageToLoad(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.waitForPageToLoad(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.waitForCondition(""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.waitForCondition(""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.waitForCondition(""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
}","@Test public void clickAround(){
  selenium.click(""String_Node_Str"");
  selenium.waitForPageToLoad(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.waitForPageToLoad(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.waitForPageToLoad(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.waitForPageToLoad(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.waitForPageToLoad(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.waitForPageToLoad(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.waitForCondition(""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.waitForCondition(""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.waitForCondition(""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"");
  selenium.click(""String_Node_Str"");
  selenium.click(""String_Node_Str"");
}"
60556,"@Transactional(readOnly=true) @Override public void load(){
  CurrentLocale.set(Locale.ENGLISH);
  List<ConnectorInfo> connInfos=ConnIdBundleManager.getConnManager().getConnectorInfos();
  if (LOG.isDebugEnabled()) {
    for (    ConnectorInfo connInfo : connInfos) {
      LOG.debug(""String_Node_Str"",connInfo.getConnectorDisplayName());
    }
  }
  int connectors=0;
  for (  ExternalResource resource : resourceDAO.findAll()) {
    LOG.info(""String_Node_Str"",resource,resource.getConnector());
    try {
      registerConnector(resource);
      connectors++;
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",resource,resource.getConnector(),e);
    }
  }
  LOG.info(""String_Node_Str"",connectors);
}","@Transactional(readOnly=true) @Override public void load(){
  CurrentLocale.set(Locale.ENGLISH);
  if (LOG.isDebugEnabled()) {
    List<ConnectorInfo> connInfos=ConnIdBundleManager.getConnManager().getConnectorInfos();
    for (    ConnectorInfo connInfo : connInfos) {
      LOG.debug(""String_Node_Str"",connInfo.getConnectorDisplayName());
    }
  }
  int connectors=0;
  for (  ExternalResource resource : resourceDAO.findAll()) {
    LOG.info(""String_Node_Str"",resource,resource.getConnector());
    try {
      registerConnector(resource);
      connectors++;
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",resource,resource.getConnector(),e);
    }
  }
  LOG.info(""String_Node_Str"",connectors);
}"
60557,"protected Response handleStream(final String url){
  final AuthScope scope=((PreemptiveAuthHttpRequestFactory)getRestTemplate().getRequestFactory()).getAuthScope();
  final HttpHost targetHost=new HttpHost(scope.getHost(),scope.getPort(),scope.getScheme());
  final BasicHttpContext localcontext=new BasicHttpContext();
  final AuthCache authCache=new BasicAuthCache();
  authCache.put(targetHost,new BasicScheme());
  localcontext.setAttribute(ClientContext.AUTH_CACHE,authCache);
  final HttpGet getMethod=new HttpGet(url);
  try {
    final HttpResponse httpResponse=((PreemptiveAuthHttpRequestFactory)getRestTemplate().getRequestFactory()).getHttpClient().execute(targetHost,getMethod,localcontext);
    Response response;
    if (httpResponse.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
      HttpEntity entity=httpResponse.getEntity();
      response=Response.ok(entity.getContent(),entity.getContentType().getValue()).location(getMethod.getURI()).header(SyncopeConstants.CONTENT_DISPOSITION_HEADER,httpResponse.getLastHeader(SyncopeConstants.CONTENT_DISPOSITION_HEADER).getValue()).build();
    }
 else {
      response=Response.noContent().status(httpResponse.getStatusLine().getStatusCode()).location(getMethod.getURI()).build();
    }
    return response;
  }
 catch (  IOException e) {
    throw new InternalServerErrorException(e);
  }
}","protected Response handleStream(final String url){
  final AuthScope scope=((PreemptiveAuthHttpRequestFactory)getRestTemplate().getRequestFactory()).getAuthScope();
  final HttpHost targetHost=new HttpHost(scope.getHost(),scope.getPort(),scope.getScheme());
  final BasicHttpContext localcontext=new BasicHttpContext();
  final AuthCache authCache=new BasicAuthCache();
  authCache.put(targetHost,new BasicScheme());
  localcontext.setAttribute(ClientContext.AUTH_CACHE,authCache);
  final HttpGet getMethod=new HttpGet(url);
  try {
    final HttpResponse httpResponse=((PreemptiveAuthHttpRequestFactory)getRestTemplate().getRequestFactory()).getHttpClient().execute(targetHost,getMethod,localcontext);
    Response response;
    if (httpResponse.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
      HttpEntity entity=httpResponse.getEntity();
      response=Response.ok(entity.getContent(),entity.getContentType().getValue()).header(SyncopeConstants.CONTENT_DISPOSITION_HEADER,httpResponse.getLastHeader(SyncopeConstants.CONTENT_DISPOSITION_HEADER).getValue()).build();
    }
 else {
      response=Response.noContent().status(httpResponse.getStatusLine().getStatusCode()).build();
    }
    return response;
  }
 catch (  IOException e) {
    throw new InternalServerErrorException(e);
  }
}"
60558,"@Override public Response dbExport(){
  return Response.ok(new StreamingOutput(){
    @Override public void write(    final OutputStream os) throws IOException {
      configurationController.dbExportInternal(os);
    }
  }
).build();
}","@Override public Response dbExport(){
  StreamingOutput sout=new StreamingOutput(){
    @Override public void write(    final OutputStream os) throws IOException {
      PrintStream ps=new PrintStream(os);
      ps.println(""String_Node_Str"");
      configurationController.dbExportInternal(os);
    }
  }
;
  return Response.ok(sout).type(MediaType.TEXT_XML).header(SyncopeConstants.CONTENT_DISPOSITION_HEADER,""String_Node_Str"" + ImportExport.CONTENT_FILE).build();
}"
60559,"@Override public void write(final OutputStream os) throws IOException {
  configurationController.dbExportInternal(os);
}","@Override public void write(final OutputStream os) throws IOException {
  PrintStream ps=new PrintStream(os);
  ps.println(""String_Node_Str"");
  configurationController.dbExportInternal(os);
}"
60560,"@Override public Response exportExecutionResult(final Long executionId,final ReportExecExportFormat fmt){
  final ReportExecExportFormat format=(fmt == null) ? ReportExecExportFormat.XML : fmt;
  final ReportExec reportExec=reportController.getAndCheckReportExecInternal(executionId);
  return Response.ok(new StreamingOutput(){
    @Override public void write(    final OutputStream os) throws IOException {
      reportController.exportExecutionResultInternal(os,reportExec,format);
    }
  }
).build();
}","@Override public Response exportExecutionResult(final Long executionId,final ReportExecExportFormat fmt){
  final ReportExecExportFormat format=(fmt == null) ? ReportExecExportFormat.XML : fmt;
  final ReportExec reportExec=reportController.getAndCheckReportExecInternal(executionId);
  StreamingOutput sout=new StreamingOutput(){
    @Override public void write(    final OutputStream os) throws IOException {
      reportController.exportExecutionResultInternal(os,reportExec,format);
    }
  }
;
  String disposition=""String_Node_Str"" + reportExec.getReport().getName() + ""String_Node_Str""+ format.name().toLowerCase();
  return Response.ok(sout).header(SyncopeConstants.CONTENT_DISPOSITION_HEADER,disposition).build();
}"
60561,"@Test public void checkFailedLogins(){
  UserTO userTO=UserTestITCase.getUniqueSampleTO(""String_Node_Str"");
  MembershipTO membershipTO=new MembershipTO();
  membershipTO.setRoleId(7L);
  AttributeTO testAttributeTO=new AttributeTO();
  testAttributeTO.setSchema(""String_Node_Str"");
  testAttributeTO.addValue(""String_Node_Str"");
  membershipTO.addAttribute(testAttributeTO);
  userTO.addMembership(membershipTO);
  userTO=createUser(userTO);
  assertNotNull(userTO);
  long userId=userTO.getId();
  UserService userService2=setupCredentials(userService,UserService.class,userTO.getUsername(),""String_Node_Str"");
  assertEquals(0,getFailedLogins(userService2,userId));
  UserService userService3=setupCredentials(userService,UserService.class,userTO.getUsername(),""String_Node_Str"");
  assertReadFails(userService3,userId);
  assertReadFails(userService3,userId);
  super.resetRestTemplate();
  assertEquals(2,getFailedLogins(userService,userId));
  UserService userService4=setupCredentials(userService,UserService.class,userTO.getUsername(),""String_Node_Str"");
  assertEquals(0,getFailedLogins(userService4,userId));
}","@Test public void checkFailedLogins(){
  CXFAuthenticator.addAuthenticator();
  Authenticator.setDefault(new CXFPatchedAuthenticator());
  UserTO userTO=UserTestITCase.getUniqueSampleTO(""String_Node_Str"");
  MembershipTO membershipTO=new MembershipTO();
  membershipTO.setRoleId(7L);
  AttributeTO testAttributeTO=new AttributeTO();
  testAttributeTO.setSchema(""String_Node_Str"");
  testAttributeTO.addValue(""String_Node_Str"");
  membershipTO.addAttribute(testAttributeTO);
  userTO.addMembership(membershipTO);
  userTO=createUser(userTO);
  assertNotNull(userTO);
  long userId=userTO.getId();
  UserService userService2=setupCredentials(userService,UserService.class,userTO.getUsername(),""String_Node_Str"");
  assertEquals(0,getFailedLogins(userService2,userId));
  UserService userService3=setupCredentials(userService,UserService.class,userTO.getUsername(),""String_Node_Str"");
  assertReadFails(userService3,userId);
  assertReadFails(userService3,userId);
  super.resetRestTemplate();
  assertEquals(2,getFailedLogins(userService,userId));
  UserService userService4=setupCredentials(userService,UserService.class,userTO.getUsername(),""String_Node_Str"");
  assertEquals(0,getFailedLogins(userService4,userId));
}"
60562,"@Test public void dbExport() throws IOException {
  Response response=configurationService.dbExport();
  assertNotNull(response);
  assertEquals(HttpStatus.OK.value(),response.getStatus());
  assertNotNull(response.getLocation());
  assertTrue(response.getHeaderString(HttpHeaders.CONTENT_TYPE).startsWith(MediaType.TEXT_XML));
  assertNotNull(response.getHeaderString(SyncopeConstants.CONTENT_DISPOSITION_HEADER));
  Object entity=response.getEntity();
  assertTrue(entity instanceof InputStream);
  assertFalse(IOUtils.toString((InputStream)entity,""String_Node_Str"").isEmpty());
}","@Test public void dbExport() throws IOException {
  Response response=configurationService.dbExport();
  assertNotNull(response);
  assertEquals(HttpStatus.OK.value(),response.getStatus());
  String contentType=response.getHeaderString(HttpHeaders.CONTENT_TYPE);
  assertTrue(contentType.contains(""String_Node_Str""));
  String contentDisposition=response.getHeaderString(SyncopeConstants.CONTENT_DISPOSITION_HEADER);
  assertNotNull(contentDisposition);
  Object entity=response.getEntity();
  assertTrue(entity instanceof InputStream);
  String configExport=IOUtils.toString((InputStream)entity,""String_Node_Str"");
  assertFalse(configExport.isEmpty());
  assertTrue(configExport.length() > 1000);
}"
60563,"private void checkExport(final Long execId,final ReportExecExportFormat fmt) throws IOException {
  final Response response=reportService.exportExecutionResult(execId,fmt);
  assertNotNull(response);
  assertEquals(HttpStatus.OK.value(),response.getStatus());
  assertNotNull(response.getLocation());
  assertNotNull(response.getHeaderString(SyncopeConstants.CONTENT_DISPOSITION_HEADER));
  assertTrue(response.getHeaderString(SyncopeConstants.CONTENT_DISPOSITION_HEADER).endsWith(""String_Node_Str"" + fmt.name().toLowerCase()));
  Object entity=response.getEntity();
  assertTrue(entity instanceof InputStream);
  assertFalse(IOUtils.toString((InputStream)entity,""String_Node_Str"").isEmpty());
}","private void checkExport(final Long execId,final ReportExecExportFormat fmt) throws IOException {
  final Response response=reportService.exportExecutionResult(execId,fmt);
  assertNotNull(response);
  assertEquals(HttpStatus.OK.value(),response.getStatus());
  assertNotNull(response.getHeaderString(SyncopeConstants.CONTENT_DISPOSITION_HEADER));
  assertTrue(response.getHeaderString(SyncopeConstants.CONTENT_DISPOSITION_HEADER).endsWith(""String_Node_Str"" + fmt.name().toLowerCase()));
  Object entity=response.getEntity();
  assertTrue(entity instanceof InputStream);
  assertFalse(IOUtils.toString((InputStream)entity,""String_Node_Str"").isEmpty());
}"
60564,"public ConfigurationTestITCaseJAXRS(){
  super();
  setEnabledCXF(true);
}","public ConfigurationTestITCaseJAXRS(){
  super();
  setContentType(CONTENT_TYPE_XML);
  setEnabledCXF(true);
}"
60565,"@Override public Response create(final TaskTO taskTO){
  TaskTO createdTask;
  if (taskTO instanceof SyncTaskTO || taskTO instanceof SchedTaskTO) {
    createdTask=taskController.createSchedTaskInternal((SchedTaskTO)taskTO);
  }
 else {
    throw new BadRequestException();
  }
  URI location=uriInfo.getAbsolutePathBuilder().path(createdTask.getId() + ""String_Node_Str"").build();
  return Response.created(location).header(SyncopeConstants.REST_HEADER_ID,createdTask.getId()).build();
}","@Override public Response create(final TaskTO taskTO){
  TaskTO createdTask;
  if (taskTO instanceof SyncTaskTO || taskTO instanceof SchedTaskTO) {
    createdTask=taskController.createSchedTaskInternal((SchedTaskTO)taskTO);
  }
 else {
    throw new BadRequestException();
  }
  TaskType taskType=getTaskType(taskTO.getClass());
  URI location=uriInfo.getAbsolutePathBuilder().path(taskType.toString() + ""String_Node_Str"" + createdTask.getId()).build();
  return Response.created(location).header(SyncopeConstants.REST_HEADER_ID,createdTask.getId()).build();
}"
60566,"public UserTestITCaseJAXRS(){
  super();
  setEnabledCXF(true);
}","public UserTestITCaseJAXRS(){
  super();
  setEnabledCXF(true);
  setContentType(CONTENT_TYPE_XML);
}"
60567,"@Override public Set<String> getReportletConfClasses(){
  List<String> confClasses=Arrays.asList(getRestTemplate().getForObject(baseUrl + ""String_Node_Str"",String[].class));
  return new HashSet<String>(confClasses);
}","@Override public ReportletConfClasses getReportletConfClasses(){
  List<String> confClasses=Arrays.asList(getRestTemplate().getForObject(baseUrl + ""String_Node_Str"",String[].class));
  return new ReportletConfClasses(confClasses);
}"
60568,"/** 
 * @return Returns a list of all reportletConfClasses
 */
@GET @Path(""String_Node_Str"") Set<String> getReportletConfClasses();","/** 
 * @return Returns a list of all reportletConfClasses
 */
@GET @Path(""String_Node_Str"") ReportletConfClasses getReportletConfClasses();"
60569,"public List<String> getReportletConfClasses(){
  List<String> reportletClasses=null;
  try {
    Set<String> reportletClassesSet=getService(ReportService.class).getReportletConfClasses();
    reportletClasses=new LinkedList<String>(reportletClassesSet);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return reportletClasses;
}","public List<String> getReportletConfClasses(){
  try {
    ReportletConfClasses reportletConfClasses=getService(ReportService.class).getReportletConfClasses();
    return reportletConfClasses.getConfClasses();
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
    return new ArrayList<String>();
  }
}"
60570,"@Override public Set<String> getReportletConfClasses(){
  return reportController.getReportletConfClassesInternal();
}","@Override public ReportletConfClasses getReportletConfClasses(){
  return new ReportletConfClasses(reportController.getReportletConfClassesInternal());
}"
60571,"@Test public void getReportletClasses(){
  Set<String> reportletClasses=reportService.getReportletConfClasses();
  assertNotNull(reportletClasses);
  assertFalse(reportletClasses.isEmpty());
}","@Test public void getReportletClasses(){
  ReportletConfClasses reportletClasses=reportService.getReportletConfClasses();
  assertNotNull(reportletClasses);
  assertFalse(reportletClasses.getConfClasses().isEmpty());
}"
60572,"@GET @Path(""String_Node_Str"") UserTO read(@MatrixParam(""String_Node_Str"") String username);","@GET @Path(""String_Node_Str"") UserTO read(@PathParam(""String_Node_Str"") String username);"
60573,"@Test(expected=SyncopeClientCompositeErrorException.class) public void createWithoutExtAttr(){
  String resourceName=""String_Node_Str"";
  ResourceTO resourceTO=new ResourceTO();
  resourceTO.setName(resourceName);
  resourceTO.setConnectorId(102L);
  MappingTO mapping=new MappingTO();
  MappingItemTO item=new MappingItemTO();
  item.setIntMappingType(IntMappingType.UserId);
  item.setAccountid(true);
  mapping.setAccountIdItem(item);
  item=new MappingItemTO();
  item.setIntMappingType(IntMappingType.UserSchema);
  item.setIntAttrName(""String_Node_Str"");
  mapping.addItem(item);
  resourceTO.setUmapping(mapping);
  resourceService.create(resourceTO);
}","@Test(expected=SyncopeClientCompositeErrorException.class) public void createWithoutExtAttr(){
  String resourceName=""String_Node_Str"";
  ResourceTO resourceTO=new ResourceTO();
  resourceTO.setName(resourceName);
  resourceTO.setConnectorId(102L);
  MappingTO mapping=new MappingTO();
  MappingItemTO item=new MappingItemTO();
  item.setIntMappingType(IntMappingType.UserId);
  item.setAccountid(true);
  mapping.setAccountIdItem(item);
  item=new MappingItemTO();
  item.setIntMappingType(IntMappingType.UserSchema);
  item.setIntAttrName(""String_Node_Str"");
  mapping.addItem(item);
  resourceTO.setUmapping(mapping);
  createResource(resourceService,resourceTO);
}"
60574,"@Test public void createWithInvalidMapping(){
  String resourceName=""String_Node_Str"";
  ResourceTO resourceTO=new ResourceTO();
  resourceTO.setName(resourceName);
  resourceTO.setConnectorId(102L);
  MappingTO mapping=new MappingTO();
  MappingItemTO item=new MappingItemTO();
  item.setIntMappingType(IntMappingType.UserId);
  item.setAccountid(true);
  mapping.setAccountIdItem(item);
  item=new MappingItemTO();
  item.setIntMappingType(IntMappingType.UserSchema);
  item.setExtAttrName(""String_Node_Str"");
  mapping.addItem(item);
  resourceTO.setUmapping(mapping);
  Throwable t=null;
  try {
    resourceService.create(resourceTO);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    t=e;
    SyncopeClientException requiredValueMissing=e.getException(SyncopeClientExceptionType.RequiredValuesMissing);
    assertNotNull(requiredValueMissing);
    assertNotNull(requiredValueMissing.getElements());
    assertEquals(1,requiredValueMissing.getElements().size());
    assertEquals(""String_Node_Str"",requiredValueMissing.getElements().iterator().next());
  }
  assertNotNull(t);
}","@Test public void createWithInvalidMapping(){
  String resourceName=""String_Node_Str"";
  ResourceTO resourceTO=new ResourceTO();
  resourceTO.setName(resourceName);
  resourceTO.setConnectorId(102L);
  MappingTO mapping=new MappingTO();
  MappingItemTO item=new MappingItemTO();
  item.setIntMappingType(IntMappingType.UserId);
  item.setAccountid(true);
  mapping.setAccountIdItem(item);
  item=new MappingItemTO();
  item.setIntMappingType(IntMappingType.UserSchema);
  item.setExtAttrName(""String_Node_Str"");
  mapping.addItem(item);
  resourceTO.setUmapping(mapping);
  try {
    createResource(resourceService,resourceTO);
    fail(""String_Node_Str"");
  }
 catch (  SyncopeClientCompositeErrorException e) {
    SyncopeClientException requiredValueMissing=e.getException(SyncopeClientExceptionType.RequiredValuesMissing);
    assertNotNull(requiredValueMissing);
    assertNotNull(requiredValueMissing.getElements());
    assertEquals(1,requiredValueMissing.getElements().size());
    assertEquals(""String_Node_Str"",requiredValueMissing.getElements().iterator().next());
  }
}"
60575,"@SuppressWarnings(""String_Node_Str"") public <T>T setupCredentials(final T proxy,final String username,final String password){
  if (proxy instanceof SpringServiceProxy) {
    SpringServiceProxy service=(SpringServiceProxy)proxy;
    if (username == null && password == null) {
      service.setRestTemplate(getAnonymousRestTemplate());
    }
 else {
      setupRestTemplate(username,password);
    }
    return proxy;
  }
 else {
    restClientFactory.setUsername(username);
    restClientFactory.setPassword(password);
    restClientFactory.setServiceClass(proxy.getClass());
    T serviceProxy=(T)restClientFactory.create(proxy.getClass());
    setupContentType(WebClient.client(serviceProxy));
    return serviceProxy;
  }
}","@SuppressWarnings(""String_Node_Str"") public <T>T setupCredentials(final T proxy,final Class<?> serviceInterface,final String username,final String password){
  if (proxy instanceof SpringServiceProxy) {
    SpringServiceProxy service=(SpringServiceProxy)proxy;
    if (username == null && password == null) {
      service.setRestTemplate(getAnonymousRestTemplate());
    }
 else {
      setupRestTemplate(username,password);
    }
    return proxy;
  }
 else {
    restClientFactory.setUsername(username);
    restClientFactory.setPassword(password);
    restClientFactory.setServiceClass(serviceInterface);
    T serviceProxy=(T)restClientFactory.create(serviceInterface);
    setupContentType(WebClient.client(serviceProxy));
    return serviceProxy;
  }
}"
60576,"@Test public void testUserSchemaAuthorization(){
  RoleTO authRoleTO=new RoleTO();
  authRoleTO.setName(""String_Node_Str"" + getUUIDString());
  authRoleTO.setParent(8L);
  authRoleTO.addEntitlement(""String_Node_Str"");
  Response response=roleService.create(authRoleTO);
  authRoleTO=getObject(response,RoleTO.class,roleService);
  assertNotNull(authRoleTO);
  SchemaTO schemaTO=new SchemaTO();
  schemaTO.setName(""String_Node_Str"");
  schemaTO.setMandatoryCondition(""String_Node_Str"");
  schemaTO.setType(SchemaType.String);
  response=schemaService.create(AttributableType.USER,SchemaService.SchemaType.NORMAL,schemaTO);
  SchemaTO newSchemaTO=getObject(response,SchemaTO.class,entitlementService);
  assertEquals(schemaTO,newSchemaTO);
  UserTO userTO=UserTestITCase.getUniqueSampleTO(""String_Node_Str"");
  MembershipTO membershipTO=new MembershipTO();
  membershipTO.setRoleId(authRoleTO.getId());
  AttributeTO testAttributeTO=new AttributeTO();
  testAttributeTO.setSchema(""String_Node_Str"");
  testAttributeTO.addValue(""String_Node_Str"");
  membershipTO.addAttribute(testAttributeTO);
  userTO.addMembership(membershipTO);
  userTO=createUser(userTO);
  assertNotNull(userTO);
  schemaTO=schemaService.read(AttributableType.USER,SchemaService.SchemaType.NORMAL,""String_Node_Str"");
  assertNotNull(schemaTO);
  SchemaService schemaService2=setupCredentials(schemaService,userTO.getUsername(),""String_Node_Str"");
  schemaTO=schemaService2.read(AttributableType.USER,SchemaService.SchemaType.NORMAL,""String_Node_Str"");
  assertNotNull(schemaTO);
  HttpClientErrorException exception=null;
  try {
    schemaService2.update(AttributableType.ROLE,SchemaService.SchemaType.NORMAL,schemaTO.getName(),schemaTO);
  }
 catch (  HttpClientErrorException e) {
    exception=e;
  }
  assertNotNull(exception);
  assertEquals(HttpStatus.FORBIDDEN,exception.getStatusCode());
  super.resetRestTemplate();
  userTO=userService.read(userTO.getId());
  assertNotNull(userTO);
  assertNotNull(userTO.getLastLoginDate());
  assertEquals(Integer.valueOf(0),userTO.getFailedLogins());
}","@Test public void testUserSchemaAuthorization(){
  RoleTO authRoleTO=new RoleTO();
  authRoleTO.setName(""String_Node_Str"" + getUUIDString());
  authRoleTO.setParent(8L);
  authRoleTO.addEntitlement(""String_Node_Str"");
  Response response=roleService.create(authRoleTO);
  authRoleTO=getObject(response,RoleTO.class,roleService);
  assertNotNull(authRoleTO);
  SchemaTO schemaTO=new SchemaTO();
  schemaTO.setName(""String_Node_Str"");
  schemaTO.setMandatoryCondition(""String_Node_Str"");
  schemaTO.setType(SchemaType.String);
  response=schemaService.create(AttributableType.USER,SchemaService.SchemaType.NORMAL,schemaTO);
  SchemaTO newSchemaTO=getObject(response,SchemaTO.class,entitlementService);
  assertEquals(schemaTO,newSchemaTO);
  UserTO userTO=UserTestITCase.getUniqueSampleTO(""String_Node_Str"");
  MembershipTO membershipTO=new MembershipTO();
  membershipTO.setRoleId(authRoleTO.getId());
  AttributeTO testAttributeTO=new AttributeTO();
  testAttributeTO.setSchema(""String_Node_Str"");
  testAttributeTO.addValue(""String_Node_Str"");
  membershipTO.addAttribute(testAttributeTO);
  userTO.addMembership(membershipTO);
  userTO=createUser(userTO);
  assertNotNull(userTO);
  schemaTO=schemaService.read(AttributableType.USER,SchemaService.SchemaType.NORMAL,""String_Node_Str"");
  assertNotNull(schemaTO);
  SchemaService schemaService2=setupCredentials(schemaService,SchemaService.class,userTO.getUsername(),""String_Node_Str"");
  schemaTO=schemaService2.read(AttributableType.USER,SchemaService.SchemaType.NORMAL,""String_Node_Str"");
  assertNotNull(schemaTO);
  HttpClientErrorException exception=null;
  try {
    schemaService2.update(AttributableType.ROLE,SchemaService.SchemaType.NORMAL,schemaTO.getName(),schemaTO);
  }
 catch (  HttpClientErrorException e) {
    exception=e;
  }
  assertNotNull(exception);
  assertEquals(HttpStatus.FORBIDDEN,exception.getStatusCode());
  super.resetRestTemplate();
  userTO=userService.read(userTO.getId());
  assertNotNull(userTO);
  assertNotNull(userTO.getLastLoginDate());
  assertEquals(Integer.valueOf(0),userTO.getFailedLogins());
}"
60577,"@Test public void testUserRead(){
  UserTO userTO=UserTestITCase.getUniqueSampleTO(""String_Node_Str"");
  MembershipTO membershipTO=new MembershipTO();
  membershipTO.setRoleId(7L);
  AttributeTO testAttributeTO=new AttributeTO();
  testAttributeTO.setSchema(""String_Node_Str"");
  testAttributeTO.addValue(""String_Node_Str"");
  membershipTO.addAttribute(testAttributeTO);
  userTO.addMembership(membershipTO);
  userTO=createUser(userTO);
  assertNotNull(userTO);
  UserService userService2=setupCredentials(userService,userTO.getUsername(),""String_Node_Str"");
  UserTO readUserTO=userService2.read(1L);
  assertNotNull(readUserTO);
  UserService userService3=setupCredentials(userService,""String_Node_Str"",ADMIN_PWD);
  SyncopeClientException exception=null;
  try {
    userService3.read(1L);
    fail();
  }
 catch (  SyncopeClientCompositeErrorException e) {
    exception=e.getException(SyncopeClientExceptionType.UnauthorizedRole);
  }
  assertNotNull(exception);
  super.resetRestTemplate();
}","@Test public void testUserRead(){
  UserTO userTO=UserTestITCase.getUniqueSampleTO(""String_Node_Str"");
  MembershipTO membershipTO=new MembershipTO();
  membershipTO.setRoleId(7L);
  AttributeTO testAttributeTO=new AttributeTO();
  testAttributeTO.setSchema(""String_Node_Str"");
  testAttributeTO.addValue(""String_Node_Str"");
  membershipTO.addAttribute(testAttributeTO);
  userTO.addMembership(membershipTO);
  userTO=createUser(userTO);
  assertNotNull(userTO);
  UserService userService2=setupCredentials(userService,UserService.class,userTO.getUsername(),""String_Node_Str"");
  UserTO readUserTO=userService2.read(1L);
  assertNotNull(readUserTO);
  UserService userService3=setupCredentials(userService,UserService.class,""String_Node_Str"",ADMIN_PWD);
  SyncopeClientException exception=null;
  try {
    userService3.read(1L);
    fail();
  }
 catch (  SyncopeClientCompositeErrorException e) {
    exception=e.getException(SyncopeClientExceptionType.UnauthorizedRole);
  }
  assertNotNull(exception);
  super.resetRestTemplate();
}"
60578,"@Test public void issueSYNCOPE48(){
  RoleTO parentRole=new RoleTO();
  parentRole.setName(""String_Node_Str"" + getUUIDString());
  parentRole.addEntitlement(""String_Node_Str"");
  parentRole.addEntitlement(""String_Node_Str"");
  parentRole.setParent(1L);
  Response response=roleService.create(parentRole);
  parentRole=getObject(response,RoleTO.class,roleService);
  assertNotNull(parentRole);
  RoleTO childRole=new RoleTO();
  childRole.setName(""String_Node_Str"");
  childRole.setParent(parentRole.getId());
  response=roleService.create(childRole);
  childRole=getObject(response,RoleTO.class,roleService);
  assertNotNull(childRole);
  UserTO role1Admin=UserTestITCase.getUniqueSampleTO(""String_Node_Str"");
  role1Admin.setPassword(""String_Node_Str"");
  MembershipTO membershipTO=new MembershipTO();
  membershipTO.setRoleId(childRole.getId());
  role1Admin.addMembership(membershipTO);
  role1Admin=createUser(role1Admin);
  assertNotNull(role1Admin);
  UserService userService2=setupCredentials(userService,role1Admin.getUsername(),""String_Node_Str"");
  UserTO role1User=UserTestITCase.getUniqueSampleTO(""String_Node_Str"");
  membershipTO=new MembershipTO();
  membershipTO.setRoleId(1L);
  role1User.addMembership(membershipTO);
  response=userService2.create(role1User);
  assertNotNull(response);
  role1User=response.readEntity(UserTO.class);
  assertNotNull(role1User);
}","@Test public void issueSYNCOPE48(){
  RoleTO parentRole=new RoleTO();
  parentRole.setName(""String_Node_Str"" + getUUIDString());
  parentRole.addEntitlement(""String_Node_Str"");
  parentRole.addEntitlement(""String_Node_Str"");
  parentRole.setParent(1L);
  Response response=roleService.create(parentRole);
  parentRole=getObject(response,RoleTO.class,roleService);
  assertNotNull(parentRole);
  RoleTO childRole=new RoleTO();
  childRole.setName(""String_Node_Str"");
  childRole.setParent(parentRole.getId());
  response=roleService.create(childRole);
  childRole=getObject(response,RoleTO.class,roleService);
  assertNotNull(childRole);
  UserTO role1Admin=UserTestITCase.getUniqueSampleTO(""String_Node_Str"");
  role1Admin.setPassword(""String_Node_Str"");
  MembershipTO membershipTO=new MembershipTO();
  membershipTO.setRoleId(childRole.getId());
  role1Admin.addMembership(membershipTO);
  role1Admin=createUser(role1Admin);
  assertNotNull(role1Admin);
  UserService userService2=setupCredentials(userService,UserService.class,role1Admin.getUsername(),""String_Node_Str"");
  UserTO role1User=UserTestITCase.getUniqueSampleTO(""String_Node_Str"");
  membershipTO=new MembershipTO();
  membershipTO.setRoleId(1L);
  role1User.addMembership(membershipTO);
  response=userService2.create(role1User);
  assertNotNull(response);
  role1User=response.readEntity(UserTO.class);
  assertNotNull(role1User);
}"
60579,"@Test public void checkFailedLogins(){
  UserTO userTO=UserTestITCase.getUniqueSampleTO(""String_Node_Str"");
  MembershipTO membershipTO=new MembershipTO();
  membershipTO.setRoleId(7L);
  AttributeTO testAttributeTO=new AttributeTO();
  testAttributeTO.setSchema(""String_Node_Str"");
  testAttributeTO.addValue(""String_Node_Str"");
  membershipTO.addAttribute(testAttributeTO);
  userTO.addMembership(membershipTO);
  userTO=createUser(userTO);
  assertNotNull(userTO);
  UserService userService2=setupCredentials(userService,userTO.getUsername(),""String_Node_Str"");
  UserTO readUserTO=userService2.read(userTO.getId());
  assertNotNull(readUserTO);
  assertNotNull(readUserTO.getFailedLogins());
  assertEquals(Integer.valueOf(0),readUserTO.getFailedLogins());
  UserService userService3=setupCredentials(userService,userTO.getUsername(),""String_Node_Str"");
  Throwable t=null;
  try {
    userService3.read(userTO.getId());
    assertNotNull(readUserTO);
  }
 catch (  Exception e) {
    t=e;
  }
  assertNotNull(t);
  t=null;
  try {
    userService3.read(userTO.getId());
    assertNotNull(readUserTO);
  }
 catch (  Exception e) {
    t=e;
  }
  super.resetRestTemplate();
  readUserTO=userService.read(userTO.getId());
  assertNotNull(readUserTO);
  assertNotNull(readUserTO.getFailedLogins());
  assertEquals(Integer.valueOf(2),readUserTO.getFailedLogins());
  UserService userService4=setupCredentials(userService,userTO.getUsername(),""String_Node_Str"");
  readUserTO=userService4.read(userTO.getId());
  assertNotNull(readUserTO);
  assertNotNull(readUserTO.getFailedLogins());
  assertEquals(Integer.valueOf(0),readUserTO.getFailedLogins());
}","@Test public void checkFailedLogins(){
  UserTO userTO=UserTestITCase.getUniqueSampleTO(""String_Node_Str"");
  MembershipTO membershipTO=new MembershipTO();
  membershipTO.setRoleId(7L);
  AttributeTO testAttributeTO=new AttributeTO();
  testAttributeTO.setSchema(""String_Node_Str"");
  testAttributeTO.addValue(""String_Node_Str"");
  membershipTO.addAttribute(testAttributeTO);
  userTO.addMembership(membershipTO);
  userTO=createUser(userTO);
  assertNotNull(userTO);
  UserService userService2=setupCredentials(userService,UserService.class,userTO.getUsername(),""String_Node_Str"");
  UserTO readUserTO=userService2.read(userTO.getId());
  assertNotNull(readUserTO);
  assertNotNull(readUserTO.getFailedLogins());
  assertEquals(Integer.valueOf(0),readUserTO.getFailedLogins());
  UserService userService3=setupCredentials(userService,UserService.class,userTO.getUsername(),""String_Node_Str"");
  Throwable t=null;
  try {
    userService3.read(userTO.getId());
    assertNotNull(readUserTO);
  }
 catch (  Exception e) {
    t=e;
  }
  assertNotNull(t);
  t=null;
  try {
    userService3.read(userTO.getId());
    assertNotNull(readUserTO);
  }
 catch (  Exception e) {
    t=e;
  }
  super.resetRestTemplate();
  readUserTO=userService.read(userTO.getId());
  assertNotNull(readUserTO);
  assertNotNull(readUserTO.getFailedLogins());
  assertEquals(Integer.valueOf(2),readUserTO.getFailedLogins());
  UserService userService4=setupCredentials(userService,UserService.class,userTO.getUsername(),""String_Node_Str"");
  readUserTO=userService4.read(userTO.getId());
  assertNotNull(readUserTO);
  assertNotNull(readUserTO.getFailedLogins());
  assertEquals(Integer.valueOf(0),readUserTO.getFailedLogins());
}"
60580,"@Test public void testUserSearch(){
  UserTO userTO=UserTestITCase.getUniqueSampleTO(""String_Node_Str"");
  MembershipTO membershipTO=new MembershipTO();
  membershipTO.setRoleId(7L);
  AttributeTO testAttributeTO=new AttributeTO();
  testAttributeTO.setSchema(""String_Node_Str"");
  testAttributeTO.addValue(""String_Node_Str"");
  membershipTO.addAttribute(testAttributeTO);
  userTO.addMembership(membershipTO);
  userTO=createUser(userTO);
  assertNotNull(userTO);
  UserService userService2=setupCredentials(userService,userTO.getUsername(),""String_Node_Str"");
  AttributeCond isNullCond=new AttributeCond(AttributeCond.Type.ISNOTNULL);
  isNullCond.setSchema(""String_Node_Str"");
  NodeCond searchCondition=NodeCond.getLeafCond(isNullCond);
  List<UserTO> matchedUsers=userService2.search(searchCondition);
  assertNotNull(matchedUsers);
  assertFalse(matchedUsers.isEmpty());
  Set<Long> userIds=new HashSet<Long>(matchedUsers.size());
  for (  UserTO user : matchedUsers) {
    userIds.add(user.getId());
  }
  assertTrue(userIds.contains(1L));
  UserService userService3=setupCredentials(userService,""String_Node_Str"",""String_Node_Str"");
  matchedUsers=userService3.search(searchCondition);
  assertNotNull(matchedUsers);
  userIds=new HashSet<Long>(matchedUsers.size());
  for (  UserTO user : matchedUsers) {
    userIds.add(user.getId());
  }
  assertFalse(userIds.contains(1L));
  super.resetRestTemplate();
}","@Test public void testUserSearch() throws InvalidSearchConditionException {
  UserTO userTO=UserTestITCase.getUniqueSampleTO(""String_Node_Str"");
  MembershipTO membershipTO=new MembershipTO();
  membershipTO.setRoleId(7L);
  AttributeTO testAttributeTO=new AttributeTO();
  testAttributeTO.setSchema(""String_Node_Str"");
  testAttributeTO.addValue(""String_Node_Str"");
  membershipTO.addAttribute(testAttributeTO);
  userTO.addMembership(membershipTO);
  userTO=createUser(userTO);
  assertNotNull(userTO);
  UserService userService2=setupCredentials(userService,UserService.class,userTO.getUsername(),""String_Node_Str"");
  AttributeCond isNullCond=new AttributeCond(AttributeCond.Type.ISNOTNULL);
  isNullCond.setSchema(""String_Node_Str"");
  NodeCond searchCondition=NodeCond.getLeafCond(isNullCond);
  List<UserTO> matchedUsers=userService2.search(searchCondition);
  assertNotNull(matchedUsers);
  assertFalse(matchedUsers.isEmpty());
  Set<Long> userIds=new HashSet<Long>(matchedUsers.size());
  for (  UserTO user : matchedUsers) {
    userIds.add(user.getId());
  }
  assertTrue(userIds.contains(1L));
  UserService userService3=setupCredentials(userService,UserService.class,""String_Node_Str"",""String_Node_Str"");
  matchedUsers=userService3.search(searchCondition);
  assertNotNull(matchedUsers);
  userIds=new HashSet<Long>(matchedUsers.size());
  for (  UserTO user : matchedUsers) {
    userIds.add(user.getId());
  }
  assertFalse(userIds.contains(1L));
  super.resetRestTemplate();
}"
60581,"@Test public void checkUserSuspension(){
  UserTO userTO=UserTestITCase.getUniqueSampleTO(""String_Node_Str"");
  MembershipTO membershipTO=new MembershipTO();
  membershipTO.setRoleId(7L);
  AttributeTO testAttributeTO=new AttributeTO();
  testAttributeTO.setSchema(""String_Node_Str"");
  testAttributeTO.addValue(""String_Node_Str"");
  membershipTO.addAttribute(testAttributeTO);
  userTO.addMembership(membershipTO);
  userTO=createUser(userTO);
  assertNotNull(userTO);
  UserService userService2=setupCredentials(userService,userTO.getUsername(),""String_Node_Str"");
  userTO=userService2.read(userTO.getId());
  assertNotNull(userTO);
  assertNotNull(userTO.getFailedLogins());
  assertEquals(Integer.valueOf(0),userTO.getFailedLogins());
  UserService userService3=setupCredentials(userService,userTO.getUsername(),""String_Node_Str"");
  Throwable t=null;
  try {
    userService3.read(userTO.getId());
    fail();
  }
 catch (  Exception e) {
    t=e;
  }
  assertNotNull(t);
  t=null;
  try {
    userService3.read(userTO.getId());
  }
 catch (  Exception e) {
    t=e;
  }
  assertNotNull(t);
  t=null;
  try {
    userService3.read(userTO.getId());
  }
 catch (  Exception e) {
    t=e;
  }
  assertNotNull(t);
  t=null;
  super.resetRestTemplate();
  userTO=userService.read(userTO.getId());
  assertNotNull(userTO);
  assertNotNull(userTO.getFailedLogins());
  assertEquals(Integer.valueOf(3),userTO.getFailedLogins());
  userService3=setupCredentials(userService,userTO.getUsername(),""String_Node_Str"");
  try {
    userService3.read(userTO.getId());
  }
 catch (  Exception e) {
    t=e;
  }
  assertNotNull(t);
  t=null;
  super.resetRestTemplate();
  userTO=userService.read(userTO.getId());
  assertNotNull(userTO);
  assertNotNull(userTO.getFailedLogins());
  assertEquals(Integer.valueOf(3),userTO.getFailedLogins());
  assertEquals(""String_Node_Str"",userTO.getStatus());
  userService2=setupCredentials(userService,userTO.getUsername(),""String_Node_Str"");
  try {
    userService2.read(userTO.getId());
    assertNotNull(userTO);
  }
 catch (  Exception e) {
    t=e;
  }
  assertNotNull(t);
  t=null;
  super.resetRestTemplate();
  userTO=userService.reactivate(userTO.getId());
  assertNotNull(userTO);
  assertEquals(""String_Node_Str"",userTO.getStatus());
  userService2=setupCredentials(userService,userTO.getUsername(),""String_Node_Str"");
  userTO=userService2.read(userTO.getId());
  assertNotNull(userTO);
  assertEquals(Integer.valueOf(0),userTO.getFailedLogins());
}","@Test public void checkUserSuspension(){
  UserTO userTO=UserTestITCase.getUniqueSampleTO(""String_Node_Str"");
  MembershipTO membershipTO=new MembershipTO();
  membershipTO.setRoleId(7L);
  AttributeTO testAttributeTO=new AttributeTO();
  testAttributeTO.setSchema(""String_Node_Str"");
  testAttributeTO.addValue(""String_Node_Str"");
  membershipTO.addAttribute(testAttributeTO);
  userTO.addMembership(membershipTO);
  userTO=createUser(userTO);
  assertNotNull(userTO);
  UserService userService2=setupCredentials(userService,UserService.class,userTO.getUsername(),""String_Node_Str"");
  userTO=userService2.read(userTO.getId());
  assertNotNull(userTO);
  assertNotNull(userTO.getFailedLogins());
  assertEquals(Integer.valueOf(0),userTO.getFailedLogins());
  UserService userService3=setupCredentials(userService,UserService.class,userTO.getUsername(),""String_Node_Str"");
  Throwable t=null;
  try {
    userService3.read(userTO.getId());
    fail();
  }
 catch (  Exception e) {
    t=e;
  }
  assertNotNull(t);
  t=null;
  try {
    userService3.read(userTO.getId());
  }
 catch (  Exception e) {
    t=e;
  }
  assertNotNull(t);
  t=null;
  try {
    userService3.read(userTO.getId());
  }
 catch (  Exception e) {
    t=e;
  }
  assertNotNull(t);
  t=null;
  super.resetRestTemplate();
  userTO=userService.read(userTO.getId());
  assertNotNull(userTO);
  assertNotNull(userTO.getFailedLogins());
  assertEquals(Integer.valueOf(3),userTO.getFailedLogins());
  userService3=setupCredentials(userService,UserService.class,userTO.getUsername(),""String_Node_Str"");
  try {
    userService3.read(userTO.getId());
  }
 catch (  Exception e) {
    t=e;
  }
  assertNotNull(t);
  t=null;
  super.resetRestTemplate();
  userTO=userService.read(userTO.getId());
  assertNotNull(userTO);
  assertNotNull(userTO.getFailedLogins());
  assertEquals(Integer.valueOf(3),userTO.getFailedLogins());
  assertEquals(""String_Node_Str"",userTO.getStatus());
  userService2=setupCredentials(userService,UserService.class,userTO.getUsername(),""String_Node_Str"");
  try {
    userService2.read(userTO.getId());
    assertNotNull(userTO);
  }
 catch (  Exception e) {
    t=e;
  }
  assertNotNull(t);
  t=null;
  super.resetRestTemplate();
  userTO=userService.reactivate(userTO.getId());
  assertNotNull(userTO);
  assertEquals(""String_Node_Str"",userTO.getStatus());
  userService2=setupCredentials(userService,UserService.class,userTO.getUsername(),""String_Node_Str"");
  userTO=userService2.read(userTO.getId());
  assertNotNull(userTO);
  assertEquals(Integer.valueOf(0),userTO.getFailedLogins());
}"
60582,"@Test public void selfRead(){
  UserTO userTO=userService.read(1L);
  assertNotNull(userTO);
  assertTrue(userTO.getMembershipMap().containsKey(1L));
  assertFalse(userTO.getMembershipMap().containsKey(3L));
  RoleService roleService2=setupCredentials(roleService,""String_Node_Str"",ADMIN_PWD);
  SyncopeClientException exception=null;
  try {
    roleService2.selfRead(3L);
    fail();
  }
 catch (  SyncopeClientCompositeErrorException e) {
    exception=e.getException(SyncopeClientExceptionType.UnauthorizedRole);
  }
  assertNotNull(exception);
  RoleTO roleTO=roleService2.selfRead(1L);
  assertNotNull(roleTO);
  assertNotNull(roleTO.getAttributes());
  assertFalse(roleTO.getAttributes().isEmpty());
}","@Test public void selfRead(){
  UserTO userTO=userService.read(1L);
  assertNotNull(userTO);
  assertTrue(userTO.getMembershipMap().containsKey(1L));
  assertFalse(userTO.getMembershipMap().containsKey(3L));
  RoleService roleService2=setupCredentials(roleService,RoleService.class,""String_Node_Str"",ADMIN_PWD);
  SyncopeClientException exception=null;
  try {
    roleService2.selfRead(3L);
    fail();
  }
 catch (  SyncopeClientCompositeErrorException e) {
    exception=e.getException(SyncopeClientExceptionType.UnauthorizedRole);
  }
  assertNotNull(exception);
  RoleTO roleTO=roleService2.selfRead(1L);
  assertNotNull(roleTO);
  assertNotNull(roleTO.getAttributes());
  assertFalse(roleTO.getAttributes().isEmpty());
}"
60583,"@Test public void updateAsRoleOwner(){
  RoleTO roleTO=roleService.read(7L);
  RoleMod roleMod=new RoleMod();
  roleMod.setId(roleTO.getId());
  roleMod.setName(""String_Node_Str"");
  RoleService roleService2=setupCredentials(roleService,""String_Node_Str"",ADMIN_PWD);
  try {
    roleService2.update(roleMod.getId(),roleMod);
    fail();
  }
 catch (  HttpStatusCodeException e) {
    assertEquals(HttpStatus.FORBIDDEN,e.getStatusCode());
  }
  RoleService roleService3=setupCredentials(roleService,""String_Node_Str"",ADMIN_PWD);
  roleTO=roleService3.update(roleMod.getId(),roleMod);
  assertEquals(""String_Node_Str"",roleTO.getName());
}","@Test public void updateAsRoleOwner(){
  RoleTO roleTO=roleService.read(7L);
  RoleMod roleMod=new RoleMod();
  roleMod.setId(roleTO.getId());
  roleMod.setName(""String_Node_Str"");
  RoleService roleService2=setupCredentials(roleService,RoleService.class,""String_Node_Str"",ADMIN_PWD);
  try {
    roleService2.update(roleMod.getId(),roleMod);
    fail();
  }
 catch (  HttpStatusCodeException e) {
    assertEquals(HttpStatus.FORBIDDEN,e.getStatusCode());
  }
  RoleService roleService3=setupCredentials(roleService,RoleService.class,""String_Node_Str"",ADMIN_PWD);
  roleTO=roleService3.update(roleMod.getId(),roleMod);
  assertEquals(""String_Node_Str"",roleTO.getName());
}"
60584,"@Test public void searchByUsernameAndId(){
  final AttributableCond usernameLeafCond=new AttributableCond(AttributableCond.Type.EQ);
  usernameLeafCond.setSchema(""String_Node_Str"");
  usernameLeafCond.setExpression(""String_Node_Str"");
  final AttributableCond idRightCond=new AttributableCond(AttributableCond.Type.LT);
  idRightCond.setSchema(""String_Node_Str"");
  idRightCond.setExpression(""String_Node_Str"");
  final NodeCond searchCondition=NodeCond.getAndCond(NodeCond.getLeafCond(usernameLeafCond),NodeCond.getLeafCond(idRightCond));
  assertTrue(searchCondition.isValid());
  final List<UserTO> matchingUsers=userService.search(searchCondition);
  assertNotNull(matchingUsers);
  assertEquals(1,matchingUsers.size());
  assertEquals(""String_Node_Str"",matchingUsers.iterator().next().getUsername());
  assertEquals(1L,matchingUsers.iterator().next().getId());
}","@Test public void searchByUsernameAndId() throws InvalidSearchConditionException {
  final AttributableCond usernameLeafCond=new AttributableCond(AttributableCond.Type.EQ);
  usernameLeafCond.setSchema(""String_Node_Str"");
  usernameLeafCond.setExpression(""String_Node_Str"");
  final AttributableCond idRightCond=new AttributableCond(AttributableCond.Type.LT);
  idRightCond.setSchema(""String_Node_Str"");
  idRightCond.setExpression(""String_Node_Str"");
  final NodeCond searchCondition=NodeCond.getAndCond(NodeCond.getLeafCond(usernameLeafCond),NodeCond.getLeafCond(idRightCond));
  assertTrue(searchCondition.isValid());
  final List<UserTO> matchingUsers=userService.search(searchCondition);
  assertNotNull(matchingUsers);
  assertEquals(1,matchingUsers.size());
  assertEquals(""String_Node_Str"",matchingUsers.iterator().next().getUsername());
  assertEquals(1L,matchingUsers.iterator().next().getId());
}"
60585,"@Test public void searchByRolenameAndId(){
  final AttributableCond rolenameLeafCond=new AttributableCond(AttributableCond.Type.EQ);
  rolenameLeafCond.setSchema(""String_Node_Str"");
  rolenameLeafCond.setExpression(""String_Node_Str"");
  final AttributableCond idRightCond=new AttributableCond(AttributableCond.Type.LT);
  idRightCond.setSchema(""String_Node_Str"");
  idRightCond.setExpression(""String_Node_Str"");
  final NodeCond searchCondition=NodeCond.getAndCond(NodeCond.getLeafCond(rolenameLeafCond),NodeCond.getLeafCond(idRightCond));
  assertTrue(searchCondition.isValid());
  final List<RoleTO> matchingRoles=roleService.search(searchCondition);
  assertNotNull(matchingRoles);
  assertEquals(1,matchingRoles.size());
  assertEquals(""String_Node_Str"",matchingRoles.iterator().next().getName());
  assertEquals(1L,matchingRoles.iterator().next().getId());
}","@Test public void searchByRolenameAndId() throws InvalidSearchConditionException {
  final AttributableCond rolenameLeafCond=new AttributableCond(AttributableCond.Type.EQ);
  rolenameLeafCond.setSchema(""String_Node_Str"");
  rolenameLeafCond.setExpression(""String_Node_Str"");
  final AttributableCond idRightCond=new AttributableCond(AttributableCond.Type.LT);
  idRightCond.setSchema(""String_Node_Str"");
  idRightCond.setExpression(""String_Node_Str"");
  final NodeCond searchCondition=NodeCond.getAndCond(NodeCond.getLeafCond(rolenameLeafCond),NodeCond.getLeafCond(idRightCond));
  assertTrue(searchCondition.isValid());
  final List<RoleTO> matchingRoles=roleService.search(searchCondition);
  assertNotNull(matchingRoles);
  assertEquals(1,matchingRoles.size());
  assertEquals(""String_Node_Str"",matchingRoles.iterator().next().getName());
  assertEquals(1L,matchingRoles.iterator().next().getId());
}"
60586,"@Test public void searchByEntitlement(){
  final EntitlementCond userListCond=new EntitlementCond();
  userListCond.setExpression(""String_Node_Str"");
  final EntitlementCond userReadcond=new EntitlementCond();
  userReadcond.setExpression(""String_Node_Str"");
  final NodeCond searchCondition=NodeCond.getAndCond(NodeCond.getLeafCond(userListCond),NodeCond.getLeafCond(userReadcond));
  assertTrue(searchCondition.isValid());
  final List<RoleTO> matchingRoles=roleService.search(searchCondition);
  assertNotNull(matchingRoles);
  assertFalse(matchingRoles.isEmpty());
}","@Test public void searchByEntitlement() throws InvalidSearchConditionException {
  final EntitlementCond userListCond=new EntitlementCond();
  userListCond.setExpression(""String_Node_Str"");
  final EntitlementCond userReadcond=new EntitlementCond();
  userReadcond.setExpression(""String_Node_Str"");
  final NodeCond searchCondition=NodeCond.getAndCond(NodeCond.getLeafCond(userListCond),NodeCond.getLeafCond(userReadcond));
  assertTrue(searchCondition.isValid());
  final List<RoleTO> matchingRoles=roleService.search(searchCondition);
  assertNotNull(matchingRoles);
  assertFalse(matchingRoles.isEmpty());
}"
60587,"@Test public void searchByRelationshipAttributableCond(){
  final AttributableCond userOwnerCond=new AttributableCond(AttributableCond.Type.EQ);
  userOwnerCond.setSchema(""String_Node_Str"");
  userOwnerCond.setExpression(""String_Node_Str"");
  final AttributableCond ppolicyCond=new AttributableCond(AttributableCond.Type.ISNOTNULL);
  ppolicyCond.setSchema(""String_Node_Str"");
  final NodeCond searchCondition=NodeCond.getAndCond(NodeCond.getLeafCond(userOwnerCond),NodeCond.getLeafCond(ppolicyCond));
  assertTrue(searchCondition.isValid());
  final List<RoleTO> matchingRoles=roleService.search(searchCondition);
  assertNotNull(matchingRoles);
  assertEquals(1,matchingRoles.size());
  assertEquals(""String_Node_Str"",matchingRoles.iterator().next().getName());
  assertEquals(6L,matchingRoles.iterator().next().getId());
}","@Test public void searchByRelationshipAttributableCond() throws InvalidSearchConditionException {
  final AttributableCond userOwnerCond=new AttributableCond(AttributableCond.Type.EQ);
  userOwnerCond.setSchema(""String_Node_Str"");
  userOwnerCond.setExpression(""String_Node_Str"");
  final AttributableCond ppolicyCond=new AttributableCond(AttributableCond.Type.ISNOTNULL);
  ppolicyCond.setSchema(""String_Node_Str"");
  final NodeCond searchCondition=NodeCond.getAndCond(NodeCond.getLeafCond(userOwnerCond),NodeCond.getLeafCond(ppolicyCond));
  assertTrue(searchCondition.isValid());
  final List<RoleTO> matchingRoles=roleService.search(searchCondition);
  assertNotNull(matchingRoles);
  assertEquals(1,matchingRoles.size());
  assertEquals(""String_Node_Str"",matchingRoles.iterator().next().getName());
  assertEquals(6L,matchingRoles.iterator().next().getId());
}"
60588,"@Test public void searchUser(){
  AttributeCond fullnameLeafCond1=new AttributeCond(AttributeCond.Type.LIKE);
  fullnameLeafCond1.setSchema(""String_Node_Str"");
  fullnameLeafCond1.setExpression(""String_Node_Str"");
  AttributeCond fullnameLeafCond2=new AttributeCond(AttributeCond.Type.LIKE);
  fullnameLeafCond2.setSchema(""String_Node_Str"");
  fullnameLeafCond2.setExpression(""String_Node_Str"");
  NodeCond searchCondition=NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond1),NodeCond.getLeafCond(fullnameLeafCond2));
  assertTrue(searchCondition.isValid());
  List<UserTO> matchedUsers=userService.search(searchCondition);
  assertNotNull(matchedUsers);
  assertFalse(matchedUsers.isEmpty());
  for (  UserTO user : matchedUsers) {
    assertNotNull(user);
  }
  AttributeCond isNullCond=new AttributeCond(AttributeCond.Type.ISNULL);
  isNullCond.setSchema(""String_Node_Str"");
  searchCondition=NodeCond.getLeafCond(isNullCond);
  matchedUsers=userService.search(searchCondition);
  assertNotNull(matchedUsers);
  assertFalse(matchedUsers.isEmpty());
  Set<Long> userIds=new HashSet<Long>(matchedUsers.size());
  for (  UserTO user : matchedUsers) {
    userIds.add(user.getId());
  }
  assertTrue(userIds.contains(2L));
  assertTrue(userIds.contains(3L));
}","@Test public void searchUser() throws InvalidSearchConditionException {
  AttributeCond fullnameLeafCond1=new AttributeCond(AttributeCond.Type.LIKE);
  fullnameLeafCond1.setSchema(""String_Node_Str"");
  fullnameLeafCond1.setExpression(""String_Node_Str"");
  AttributeCond fullnameLeafCond2=new AttributeCond(AttributeCond.Type.LIKE);
  fullnameLeafCond2.setSchema(""String_Node_Str"");
  fullnameLeafCond2.setExpression(""String_Node_Str"");
  NodeCond searchCondition=NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond1),NodeCond.getLeafCond(fullnameLeafCond2));
  assertTrue(searchCondition.isValid());
  List<UserTO> matchedUsers=userService.search(searchCondition);
  assertNotNull(matchedUsers);
  assertFalse(matchedUsers.isEmpty());
  for (  UserTO user : matchedUsers) {
    assertNotNull(user);
  }
  AttributeCond isNullCond=new AttributeCond(AttributeCond.Type.ISNULL);
  isNullCond.setSchema(""String_Node_Str"");
  searchCondition=NodeCond.getLeafCond(isNullCond);
  matchedUsers=userService.search(searchCondition);
  assertNotNull(matchedUsers);
  assertFalse(matchedUsers.isEmpty());
  Set<Long> userIds=new HashSet<Long>(matchedUsers.size());
  for (  UserTO user : matchedUsers) {
    userIds.add(user.getId());
  }
  assertTrue(userIds.contains(2L));
  assertTrue(userIds.contains(3L));
}"
60589,"@Test public void searchUserByResourceName(){
  ResourceCond ws2=new ResourceCond();
  ws2.setResourceName(""String_Node_Str"");
  ResourceCond ws1=new ResourceCond();
  ws1.setResourceName(""String_Node_Str"");
  NodeCond searchCondition=NodeCond.getAndCond(NodeCond.getNotLeafCond(ws2),NodeCond.getLeafCond(ws1));
  assertTrue(searchCondition.isValid());
  List<UserTO> matchedUsers=userService.search(searchCondition);
  assertNotNull(matchedUsers);
  assertFalse(matchedUsers.isEmpty());
  Set<Long> userIds=new HashSet<Long>(matchedUsers.size());
  for (  UserTO user : matchedUsers) {
    userIds.add(user.getId());
  }
  assertEquals(1,userIds.size());
  assertTrue(userIds.contains(2L));
}","@Test public void searchUserByResourceName() throws InvalidSearchConditionException {
  ResourceCond ws2=new ResourceCond();
  ws2.setResourceName(""String_Node_Str"");
  ResourceCond ws1=new ResourceCond();
  ws1.setResourceName(""String_Node_Str"");
  NodeCond searchCondition=NodeCond.getAndCond(NodeCond.getNotLeafCond(ws2),NodeCond.getLeafCond(ws1));
  assertTrue(searchCondition.isValid());
  List<UserTO> matchedUsers=userService.search(searchCondition);
  assertNotNull(matchedUsers);
  assertFalse(matchedUsers.isEmpty());
  Set<Long> userIds=new HashSet<Long>(matchedUsers.size());
  for (  UserTO user : matchedUsers) {
    userIds.add(user.getId());
  }
  assertEquals(1,userIds.size());
  assertTrue(userIds.contains(2L));
}"
60590,"@Test public void searchCount(){
  AttributeCond isNullCond=new AttributeCond(AttributeCond.Type.ISNULL);
  isNullCond.setSchema(""String_Node_Str"");
  NodeCond searchCond=NodeCond.getLeafCond(isNullCond);
  Integer count=userService.searchCount(searchCond);
  assertNotNull(count);
  assertTrue(count > 0);
}","@Test public void searchCount() throws InvalidSearchConditionException {
  AttributeCond isNullCond=new AttributeCond(AttributeCond.Type.ISNULL);
  isNullCond.setSchema(""String_Node_Str"");
  NodeCond searchCond=NodeCond.getLeafCond(isNullCond);
  Integer count=userService.searchCount(searchCond);
  assertNotNull(count);
  assertTrue(count > 0);
}"
60591,"@Test public void paginatedSearch(){
  AttributeCond fullnameLeafCond1=new AttributeCond(AttributeCond.Type.LIKE);
  fullnameLeafCond1.setSchema(""String_Node_Str"");
  fullnameLeafCond1.setExpression(""String_Node_Str"");
  AttributeCond fullnameLeafCond2=new AttributeCond(AttributeCond.Type.LIKE);
  fullnameLeafCond2.setSchema(""String_Node_Str"");
  fullnameLeafCond2.setExpression(""String_Node_Str"");
  NodeCond searchCondition=NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond1),NodeCond.getLeafCond(fullnameLeafCond2));
  assertTrue(searchCondition.isValid());
  List<UserTO> matchedUsers=userService.search(searchCondition,1,2);
  assertNotNull(matchedUsers);
  assertFalse(matchedUsers.isEmpty());
  for (  UserTO user : matchedUsers) {
    assertNotNull(user);
  }
  AttributeCond isNullCond=new AttributeCond(AttributeCond.Type.ISNULL);
  isNullCond.setSchema(""String_Node_Str"");
  searchCondition=NodeCond.getLeafCond(isNullCond);
  matchedUsers=userService.search(searchCondition,1,2);
  assertNotNull(matchedUsers);
  assertFalse(matchedUsers.isEmpty());
  Set<Long> userIds=new HashSet<Long>(matchedUsers.size());
  for (  UserTO user : matchedUsers) {
    userIds.add(user.getId());
  }
  assertEquals(2,userIds.size());
}","@Test public void paginatedSearch() throws InvalidSearchConditionException {
  AttributeCond fullnameLeafCond1=new AttributeCond(AttributeCond.Type.LIKE);
  fullnameLeafCond1.setSchema(""String_Node_Str"");
  fullnameLeafCond1.setExpression(""String_Node_Str"");
  AttributeCond fullnameLeafCond2=new AttributeCond(AttributeCond.Type.LIKE);
  fullnameLeafCond2.setSchema(""String_Node_Str"");
  fullnameLeafCond2.setExpression(""String_Node_Str"");
  NodeCond searchCondition=NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond1),NodeCond.getLeafCond(fullnameLeafCond2));
  assertTrue(searchCondition.isValid());
  List<UserTO> matchedUsers=userService.search(searchCondition,1,2);
  assertNotNull(matchedUsers);
  assertFalse(matchedUsers.isEmpty());
  for (  UserTO user : matchedUsers) {
    assertNotNull(user);
  }
  AttributeCond isNullCond=new AttributeCond(AttributeCond.Type.ISNULL);
  isNullCond.setSchema(""String_Node_Str"");
  searchCondition=NodeCond.getLeafCond(isNullCond);
  matchedUsers=userService.search(searchCondition,1,2);
  assertNotNull(matchedUsers);
  assertFalse(matchedUsers.isEmpty());
  Set<Long> userIds=new HashSet<Long>(matchedUsers.size());
  for (  UserTO user : matchedUsers) {
    userIds.add(user.getId());
  }
  assertEquals(2,userIds.size());
}"
60592,"@Test public void searchByBooleanAttributableCond(){
  final AttributableCond cond=new AttributableCond(AttributableCond.Type.EQ);
  cond.setSchema(""String_Node_Str"");
  cond.setExpression(""String_Node_Str"");
  final NodeCond searchCondition=NodeCond.getLeafCond(cond);
  final List<RoleTO> matchingRoles=roleService.search(searchCondition);
  assertNotNull(matchingRoles);
  assertFalse(matchingRoles.isEmpty());
}","@Test public void searchByBooleanAttributableCond() throws InvalidSearchConditionException {
  final AttributableCond cond=new AttributableCond(AttributableCond.Type.EQ);
  cond.setSchema(""String_Node_Str"");
  cond.setExpression(""String_Node_Str"");
  final NodeCond searchCondition=NodeCond.getLeafCond(cond);
  final List<RoleTO> matchingRoles=roleService.search(searchCondition);
  assertNotNull(matchingRoles);
  assertFalse(matchingRoles.isEmpty());
}"
60593,"@Test public void reconcileFromLDAP(){
  SyncTaskTO task=taskService.read(TaskType.SYNCHRONIZATION,11L);
  assertNotNull(task);
  RoleTO template=new RoleTO();
  template.setParent(8L);
  template.addAttribute(attributeTO(""String_Node_Str"",""String_Node_Str""));
  task.setRoleTemplate(template);
  taskService.update(task.getId(),task);
  SyncTaskTO actual=taskService.read(TaskType.SYNCHRONIZATION,task.getId());
  assertNotNull(actual);
  assertEquals(task.getId(),actual.getId());
  assertEquals(template,actual.getRoleTemplate());
  assertEquals(new UserTO(),actual.getUserTemplate());
  TaskExecTO execution=execSyncTask(actual.getId(),20,false);
  final String status=execution.getStatus();
  assertNotNull(status);
  assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());
  final AttributableCond rolenameLeafCond=new AttributableCond(AttributableCond.Type.EQ);
  rolenameLeafCond.setSchema(""String_Node_Str"");
  rolenameLeafCond.setExpression(""String_Node_Str"");
  final List<RoleTO> matchingRoles=roleService.search(NodeCond.getLeafCond(rolenameLeafCond));
  assertNotNull(matchingRoles);
  assertEquals(1,matchingRoles.size());
  final AttributableCond usernameLeafCond=new AttributableCond(AttributeCond.Type.EQ);
  usernameLeafCond.setSchema(""String_Node_Str"");
  usernameLeafCond.setExpression(""String_Node_Str"");
  final List<UserTO> matchingUsers=userService.search(NodeCond.getLeafCond(usernameLeafCond));
  assertNotNull(matchingUsers);
  assertEquals(1,matchingUsers.size());
  final RoleTO roleTO=matchingRoles.iterator().next();
  assertNotNull(roleTO);
  assertEquals(""String_Node_Str"",roleTO.getName());
  assertEquals(8L,roleTO.getParent());
  assertEquals(""String_Node_Str"",roleTO.getAttributeMap().get(""String_Node_Str"").getValues().get(0));
  assertEquals(matchingUsers.iterator().next().getId(),(long)roleTO.getUserOwner());
  assertNull(roleTO.getRoleOwner());
  final MembershipCond membershipCond=new MembershipCond();
  membershipCond.setRoleId(roleTO.getId());
  final List<UserTO> members=userService.search(NodeCond.getLeafCond(membershipCond));
  assertNotNull(members);
  assertEquals(1,members.size());
}","@Test public void reconcileFromLDAP() throws InvalidSearchConditionException {
  SyncTaskTO task=taskService.read(TaskType.SYNCHRONIZATION,11L);
  assertNotNull(task);
  RoleTO template=new RoleTO();
  template.setParent(8L);
  template.addAttribute(attributeTO(""String_Node_Str"",""String_Node_Str""));
  task.setRoleTemplate(template);
  taskService.update(task.getId(),task);
  SyncTaskTO actual=taskService.read(TaskType.SYNCHRONIZATION,task.getId());
  assertNotNull(actual);
  assertEquals(task.getId(),actual.getId());
  assertEquals(template,actual.getRoleTemplate());
  assertEquals(new UserTO(),actual.getUserTemplate());
  TaskExecTO execution=execSyncTask(actual.getId(),20,false);
  final String status=execution.getStatus();
  assertNotNull(status);
  assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());
  final AttributableCond rolenameLeafCond=new AttributableCond(AttributableCond.Type.EQ);
  rolenameLeafCond.setSchema(""String_Node_Str"");
  rolenameLeafCond.setExpression(""String_Node_Str"");
  final List<RoleTO> matchingRoles=roleService.search(NodeCond.getLeafCond(rolenameLeafCond));
  assertNotNull(matchingRoles);
  assertEquals(1,matchingRoles.size());
  final AttributableCond usernameLeafCond=new AttributableCond(AttributeCond.Type.EQ);
  usernameLeafCond.setSchema(""String_Node_Str"");
  usernameLeafCond.setExpression(""String_Node_Str"");
  final List<UserTO> matchingUsers=userService.search(NodeCond.getLeafCond(usernameLeafCond));
  assertNotNull(matchingUsers);
  assertEquals(1,matchingUsers.size());
  final RoleTO roleTO=matchingRoles.iterator().next();
  assertNotNull(roleTO);
  assertEquals(""String_Node_Str"",roleTO.getName());
  assertEquals(8L,roleTO.getParent());
  assertEquals(""String_Node_Str"",roleTO.getAttributeMap().get(""String_Node_Str"").getValues().get(0));
  assertEquals(matchingUsers.iterator().next().getId(),(long)roleTO.getUserOwner());
  assertNull(roleTO.getRoleOwner());
  final MembershipCond membershipCond=new MembershipCond();
  membershipCond.setRoleId(roleTO.getId());
  final List<UserTO> members=userService.search(NodeCond.getLeafCond(membershipCond));
  assertNotNull(members);
  assertEquals(1,members.size());
}"
60594,"@Test public void create(){
  ConfigurationTO configurationTO=new ConfigurationTO();
  configurationTO.setKey(""String_Node_Str"");
  configurationTO.setValue(""String_Node_Str"");
  Response response=configurationService.create(configurationTO);
  assertNotNull(response);
  assertEquals(org.apache.http.HttpStatus.SC_CREATED,response.getStatus());
  configurationTO=getObject(response,ConfigurationTO.class,configurationService);
  assertNotNull(configurationTO);
  UserTO userTO=UserTestITCase.getUniqueSampleTO(""String_Node_Str"");
  try {
    createUserRequest(new UserRequestTO(userTO));
    fail();
  }
 catch (  SyncopeClientCompositeErrorException e) {
    assertNotNull(e.getException(SyncopeClientExceptionType.UnauthorizedRole));
  }
  configurationTO.setValue(""String_Node_Str"");
  response=configurationService.create(configurationTO);
  assertNotNull(response);
  assertEquals(org.apache.http.HttpStatus.SC_CREATED,response.getStatus());
  configurationTO=getObject(response,ConfigurationTO.class,configurationService);
  assertNotNull(configurationTO);
  UserRequestService userRequestService2=setupCredentials(userRequestService,null,null);
  response=userRequestService2.create(new UserRequestTO(userTO));
  UserRequestTO request=getObject(response,UserRequestTO.class,userRequestService2);
  super.resetRestTemplate();
  AttributeCond attrCond=new AttributeCond(AttributeCond.Type.EQ);
  attrCond.setSchema(""String_Node_Str"");
  attrCond.setExpression(userTO.getUsername());
  final List<UserTO> matchingUsers=userService.search(NodeCond.getLeafCond(attrCond));
  assertTrue(matchingUsers.isEmpty());
  userTO=createUser(request.getUserTO());
  assertNotNull(userTO);
}","@Test public void create() throws InvalidSearchConditionException {
  ConfigurationTO configurationTO=new ConfigurationTO();
  configurationTO.setKey(""String_Node_Str"");
  configurationTO.setValue(""String_Node_Str"");
  Response response=configurationService.create(configurationTO);
  assertNotNull(response);
  assertEquals(org.apache.http.HttpStatus.SC_CREATED,response.getStatus());
  configurationTO=getObject(response,ConfigurationTO.class,configurationService);
  assertNotNull(configurationTO);
  UserTO userTO=UserTestITCase.getUniqueSampleTO(""String_Node_Str"");
  try {
    createUserRequest(new UserRequestTO(userTO));
    fail();
  }
 catch (  SyncopeClientCompositeErrorException e) {
    assertNotNull(e.getException(SyncopeClientExceptionType.UnauthorizedRole));
  }
  configurationTO.setValue(""String_Node_Str"");
  response=configurationService.create(configurationTO);
  assertNotNull(response);
  assertEquals(org.apache.http.HttpStatus.SC_CREATED,response.getStatus());
  configurationTO=getObject(response,ConfigurationTO.class,configurationService);
  assertNotNull(configurationTO);
  UserRequestService userRequestService2=setupCredentials(userRequestService,UserRequestService.class,null,null);
  response=userRequestService2.create(new UserRequestTO(userTO));
  UserRequestTO request=getObject(response,UserRequestTO.class,userRequestService2);
  super.resetRestTemplate();
  AttributeCond attrCond=new AttributeCond(AttributeCond.Type.EQ);
  attrCond.setSchema(""String_Node_Str"");
  attrCond.setExpression(userTO.getUsername());
  final List<UserTO> matchingUsers=userService.search(NodeCond.getLeafCond(attrCond));
  assertTrue(matchingUsers.isEmpty());
  userTO=createUser(request.getUserTO());
  assertNotNull(userTO);
}"
60595,"@Test public void update(){
  UserTO userTO=UserTestITCase.getUniqueSampleTO(""String_Node_Str"");
  String initialPassword=userTO.getPassword();
  userTO=createUser(userTO);
  assertNotNull(userTO);
  UserMod userMod=new UserMod();
  userMod.setId(userTO.getId());
  userMod.setPassword(initialPassword);
  try {
    createUserRequest(new UserRequestTO(userMod));
    fail();
  }
 catch (  SyncopeClientCompositeErrorException e) {
    assertNotNull(e.getException(SyncopeClientExceptionType.UnauthorizedRole));
  }
  UserRequestService userRequestService2=setupCredentials(userRequestService,userTO.getUsername(),initialPassword);
  try {
    Response response=userRequestService2.create(new UserRequestTO(userMod));
    if (response.getStatus() != org.apache.http.HttpStatus.SC_CREATED) {
      throw (RuntimeException)clientExceptionMapper.fromResponse(response);
    }
    fail();
  }
 catch (  SyncopeClientCompositeErrorException scce) {
    assertNotNull(scce.getException(SyncopeClientExceptionType.InvalidSyncopeUser));
  }
  userMod.setPassword(""String_Node_Str"" + initialPassword);
  Response response=userRequestService.create(new UserRequestTO(userMod));
  assertEquals(org.apache.http.HttpStatus.SC_CREATED,response.getStatus());
  super.resetRestTemplate();
  Boolean verify=userService.verifyPassword(userTO.getUsername(),userMod.getPassword());
  assertFalse(verify);
  userTO=userService.update(userMod.getId(),userMod);
  assertNotNull(userTO);
  verify=userService.verifyPassword(userTO.getUsername(),userMod.getPassword());
  assertTrue(verify);
}","@Test public void update(){
  UserTO userTO=UserTestITCase.getUniqueSampleTO(""String_Node_Str"");
  String initialPassword=userTO.getPassword();
  userTO=createUser(userTO);
  assertNotNull(userTO);
  UserMod userMod=new UserMod();
  userMod.setId(userTO.getId());
  userMod.setPassword(initialPassword);
  try {
    createUserRequest(new UserRequestTO(userMod));
    fail();
  }
 catch (  SyncopeClientCompositeErrorException e) {
    assertNotNull(e.getException(SyncopeClientExceptionType.UnauthorizedRole));
  }
  UserRequestService userRequestService2=setupCredentials(userRequestService,UserRequestService.class,userTO.getUsername(),initialPassword);
  try {
    Response response=userRequestService2.create(new UserRequestTO(userMod));
    if (response.getStatus() != org.apache.http.HttpStatus.SC_CREATED) {
      throw (RuntimeException)clientExceptionMapper.fromResponse(response);
    }
    fail();
  }
 catch (  SyncopeClientCompositeErrorException scce) {
    assertNotNull(scce.getException(SyncopeClientExceptionType.InvalidSyncopeUser));
  }
  userMod.setPassword(""String_Node_Str"" + initialPassword);
  Response response=userRequestService.create(new UserRequestTO(userMod));
  assertEquals(org.apache.http.HttpStatus.SC_CREATED,response.getStatus());
  super.resetRestTemplate();
  Boolean verify=userService.verifyPassword(userTO.getUsername(),userMod.getPassword());
  assertFalse(verify);
  userTO=userService.update(userMod.getId(),userMod);
  assertNotNull(userTO);
  verify=userService.verifyPassword(userTO.getUsername(),userMod.getPassword());
  assertTrue(verify);
}"
60596,"@Test public void delete(){
  UserTO userTO=UserTestITCase.getUniqueSampleTO(""String_Node_Str"");
  String initialPassword=userTO.getPassword();
  userTO=createUser(userTO);
  assertNotNull(userTO);
  try {
    createUserRequest(new UserRequestTO(userTO.getId()));
    fail();
  }
 catch (  SyncopeClientCompositeErrorException e) {
    assertNotNull(e.getException(SyncopeClientExceptionType.UnauthorizedRole));
  }
  UserRequestService userRequestService2=setupCredentials(userRequestService,userTO.getUsername(),initialPassword);
  Response response=userRequestService2.create(new UserRequestTO(userTO.getId()));
  assertNotNull(response);
  assertEquals(org.apache.http.HttpStatus.SC_CREATED,response.getStatus());
  super.resetRestTemplate();
  UserTO actual=userService.read(userTO.getId());
  assertNotNull(actual);
  userService.delete(userTO.getId());
  try {
    userService.read(userTO.getId());
    fail();
  }
 catch (  HttpStatusCodeException e) {
    assertEquals(HttpStatus.NOT_FOUND,e.getStatusCode());
  }
}","@Test public void delete(){
  UserTO userTO=UserTestITCase.getUniqueSampleTO(""String_Node_Str"");
  String initialPassword=userTO.getPassword();
  userTO=createUser(userTO);
  assertNotNull(userTO);
  try {
    createUserRequest(new UserRequestTO(userTO.getId()));
    fail();
  }
 catch (  SyncopeClientCompositeErrorException e) {
    assertNotNull(e.getException(SyncopeClientExceptionType.UnauthorizedRole));
  }
  UserRequestService userRequestService2=setupCredentials(userRequestService,UserRequestService.class,userTO.getUsername(),initialPassword);
  Response response=userRequestService2.create(new UserRequestTO(userTO.getId()));
  assertNotNull(response);
  assertEquals(org.apache.http.HttpStatus.SC_CREATED,response.getStatus());
  super.resetRestTemplate();
  UserTO actual=userService.read(userTO.getId());
  assertNotNull(actual);
  userService.delete(userTO.getId());
  try {
    userService.read(userTO.getId());
    fail();
  }
 catch (  HttpStatusCodeException e) {
    assertEquals(HttpStatus.NOT_FOUND,e.getStatusCode());
  }
}"
60597,"@Test public void selfRead(){
  UserService userService2=setupCredentials(userService,""String_Node_Str"",ADMIN_PWD);
  try {
    userService2.read(1L);
    fail();
  }
 catch (  HttpClientErrorException e) {
    assertEquals(HttpStatus.FORBIDDEN,e.getStatusCode());
  }
  UserTO userTO=userService2.readSelf();
  assertEquals(""String_Node_Str"",userTO.getUsername());
}","@Test public void selfRead(){
  UserService userService2=setupCredentials(userService,UserService.class,""String_Node_Str"",ADMIN_PWD);
  try {
    userService2.read(1L);
    fail();
  }
 catch (  HttpClientErrorException e) {
    assertEquals(HttpStatus.FORBIDDEN,e.getStatusCode());
  }
  UserTO userTO=userService2.readSelf();
  assertEquals(""String_Node_Str"",userTO.getUsername());
}"
60598,"@Test public void createWithReject(){
  Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());
  UserTO userTO=getUniqueSampleTO(""String_Node_Str"");
  MembershipTO membershipTO=new MembershipTO();
  membershipTO.setRoleId(9L);
  userTO.addMembership(membershipTO);
  userTO=createUser(userTO);
  assertNotNull(userTO);
  assertEquals(1,userTO.getMemberships().size());
  assertEquals(9,userTO.getMemberships().get(0).getRoleId());
  assertEquals(""String_Node_Str"",userTO.getStatus());
  WorkflowFormTO form=userService.getFormForUser(userTO.getId());
  assertNotNull(form);
  assertNotNull(form.getTaskId());
  assertNull(form.getOwner());
  UserService userService2=setupCredentials(userService,""String_Node_Str"",ADMIN_PWD);
  try {
    userService2.claimForm(form.getTaskId());
    fail();
  }
 catch (  SyncopeClientCompositeErrorException scce) {
    assertNotNull(scce.getException(SyncopeClientExceptionType.Workflow));
  }
  UserService userService3=setupCredentials(userService,""String_Node_Str"",ADMIN_PWD);
  form=userService3.claimForm(form.getTaskId());
  assertNotNull(form);
  assertNotNull(form.getTaskId());
  assertNotNull(form.getOwner());
  Map<String,WorkflowFormPropertyTO> props=form.getPropertyMap();
  props.get(""String_Node_Str"").setValue(Boolean.FALSE.toString());
  props.get(""String_Node_Str"").setValue(""String_Node_Str"");
  form.setProperties(props.values());
  userTO=userService3.submitForm(form);
  assertNotNull(userTO);
  assertEquals(""String_Node_Str"",userTO.getStatus());
  super.resetRestTemplate();
}","@Test public void createWithReject(){
  Assume.assumeTrue(ActivitiDetector.isActivitiEnabledForUsers());
  UserTO userTO=getUniqueSampleTO(""String_Node_Str"");
  MembershipTO membershipTO=new MembershipTO();
  membershipTO.setRoleId(9L);
  userTO.addMembership(membershipTO);
  userTO=createUser(userTO);
  assertNotNull(userTO);
  assertEquals(1,userTO.getMemberships().size());
  assertEquals(9,userTO.getMemberships().get(0).getRoleId());
  assertEquals(""String_Node_Str"",userTO.getStatus());
  WorkflowFormTO form=userService.getFormForUser(userTO.getId());
  assertNotNull(form);
  assertNotNull(form.getTaskId());
  assertNull(form.getOwner());
  UserService userService2=setupCredentials(userService,UserService.class,""String_Node_Str"",ADMIN_PWD);
  try {
    userService2.claimForm(form.getTaskId());
    fail();
  }
 catch (  SyncopeClientCompositeErrorException scce) {
    assertNotNull(scce.getException(SyncopeClientExceptionType.Workflow));
  }
  UserService userService3=setupCredentials(userService,UserService.class,""String_Node_Str"",ADMIN_PWD);
  form=userService3.claimForm(form.getTaskId());
  assertNotNull(form);
  assertNotNull(form.getTaskId());
  assertNotNull(form.getOwner());
  Map<String,WorkflowFormPropertyTO> props=form.getPropertyMap();
  props.get(""String_Node_Str"").setValue(Boolean.FALSE.toString());
  props.get(""String_Node_Str"").setValue(""String_Node_Str"");
  form.setProperties(props.values());
  userTO=userService3.submitForm(form);
  assertNotNull(userTO);
  assertEquals(""String_Node_Str"",userTO.getStatus());
  super.resetRestTemplate();
}"
60599,"@Test public void createWithException(){
  PasswordPolicyTO policy=new PasswordPolicyTO(true);
  policy.setSpecification(new PasswordPolicySpec());
  policy.setDescription(""String_Node_Str"");
  System.out.println(policy.getType());
  Throwable t=null;
  try {
    policyService.create(PolicyType.PASSWORD,policy);
    fail();
  }
 catch (  SyncopeClientCompositeErrorException sccee) {
    t=sccee.getException(SyncopeClientExceptionType.InvalidPasswordPolicy);
  }
  assertNotNull(t);
}","@Test public void createWithException(){
  PasswordPolicyTO policy=new PasswordPolicyTO(true);
  policy.setSpecification(new PasswordPolicySpec());
  policy.setDescription(""String_Node_Str"");
  System.out.println(policy.getType());
  try {
    createPolicy(policyService,PolicyType.PASSWORD,policy);
    fail();
  }
 catch (  SyncopeClientCompositeErrorException sccee) {
    assertNotNull(sccee.getException(SyncopeClientExceptionType.InvalidPasswordPolicy));
  }
}"
60600,"@Test public void createMissingDescription(){
  SyncPolicyTO policy=new SyncPolicyTO();
  policy.setSpecification(new SyncPolicySpec());
  Throwable t=null;
  try {
    policyService.create(PolicyType.SYNC,policy);
    fail();
  }
 catch (  SyncopeClientCompositeErrorException sccee) {
    t=sccee.getException(SyncopeClientExceptionType.InvalidSyncPolicy);
  }
  assertNotNull(t);
}","@Test public void createMissingDescription(){
  SyncPolicyTO policy=new SyncPolicyTO();
  policy.setSpecification(new SyncPolicySpec());
  try {
    createPolicy(policyService,PolicyType.SYNC,policy);
    fail();
  }
 catch (  SyncopeClientCompositeErrorException sccee) {
    assertNotNull(sccee.getException(SyncopeClientExceptionType.InvalidSyncPolicy));
  }
}"
60601,"@Test public void create(){
  SyncPolicyTO policy=buildSyncPolicyTO();
  Response response=policyService.create(PolicyType.SYNC,policy);
  SyncPolicyTO policyTO=getObject(response,SyncPolicyTO.class,policyService);
  assertNotNull(policyTO);
  assertEquals(PolicyType.SYNC,policyTO.getType());
}","@Test public void create(){
  SyncPolicyTO policy=buildSyncPolicyTO();
  Response response=createPolicy(policyService,PolicyType.SYNC,policy);
  SyncPolicyTO policyTO=getObject(response,SyncPolicyTO.class,policyService);
  assertNotNull(policyTO);
  assertEquals(PolicyType.SYNC,policyTO.getType());
}"
60602,"@Test public void update(){
  PasswordPolicyTO globalPolicy=policyService.read(PolicyType.PASSWORD,2L);
  PasswordPolicyTO policy=new PasswordPolicyTO();
  policy.setDescription(""String_Node_Str"");
  policy.setSpecification(globalPolicy.getSpecification());
  Response response=policyService.create(PolicyType.PASSWORD,policy);
  policy=getObject(response,PasswordPolicyTO.class,policyService);
  policy=policyService.read(PolicyType.PASSWORD,policy.getId());
  assertNotNull(""String_Node_Str"",policy);
  PasswordPolicySpec policySpec=policy.getSpecification();
  policySpec.setMaxLength(22);
  policy.setSpecification(policySpec);
  policyService.update(PolicyType.PASSWORD,policy.getId(),policy);
  policy=policyService.read(PolicyType.PASSWORD,policy.getId());
  assertNotNull(policy);
  assertEquals(PolicyType.PASSWORD,policy.getType());
  assertEquals(22,policy.getSpecification().getMaxLength());
  assertEquals(8,policy.getSpecification().getMinLength());
}","@Test public void update(){
  PasswordPolicyTO globalPolicy=policyService.read(PolicyType.PASSWORD,2L);
  PasswordPolicyTO policy=new PasswordPolicyTO();
  policy.setDescription(""String_Node_Str"");
  policy.setSpecification(globalPolicy.getSpecification());
  Response response=createPolicy(policyService,PolicyType.PASSWORD,policy);
  policy=getObject(response,PasswordPolicyTO.class,policyService);
  policy=policyService.read(PolicyType.PASSWORD,policy.getId());
  assertNotNull(""String_Node_Str"",policy);
  PasswordPolicySpec policySpec=policy.getSpecification();
  policySpec.setMaxLength(22);
  policy.setSpecification(policySpec);
  policyService.update(PolicyType.PASSWORD,policy.getId(),policy);
  policy=policyService.read(PolicyType.PASSWORD,policy.getId());
  assertNotNull(policy);
  assertEquals(PolicyType.PASSWORD,policy.getType());
  assertEquals(22,policy.getSpecification().getMaxLength());
  assertEquals(8,policy.getSpecification().getMinLength());
}"
60603,"@Test public void delete(){
  SyncPolicyTO policy=buildSyncPolicyTO();
  Response response=policyService.create(PolicyType.SYNC,policy);
  SyncPolicyTO policyTO=getObject(response,SyncPolicyTO.class,policyService);
  assertNotNull(policyTO);
  policyService.delete(PolicyType.SYNC,policyTO.getId());
  Throwable t=null;
  try {
    policyService.read(PolicyType.SYNC,policyTO.getId());
  }
 catch (  SyncopeClientCompositeErrorException e) {
    t=e;
  }
  assertNotNull(t);
}","@Test public void delete(){
  SyncPolicyTO policy=buildSyncPolicyTO();
  Response response=createPolicy(policyService,PolicyType.SYNC,policy);
  SyncPolicyTO policyTO=getObject(response,SyncPolicyTO.class,policyService);
  assertNotNull(policyTO);
  policyService.delete(PolicyType.SYNC,policyTO.getId());
  Throwable t=null;
  try {
    policyService.read(PolicyType.SYNC,policyTO.getId());
  }
 catch (  SyncopeClientCompositeErrorException e) {
    t=e;
  }
  assertNotNull(t);
}"
60604,"@Test public void selfRead(){
  UserService userService2=setupCredentials(userService,UserService.class,""String_Node_Str"",ADMIN_PWD);
  try {
    userService2.read(1L);
    fail();
  }
 catch (  HttpClientErrorException e) {
    assertEquals(HttpStatus.FORBIDDEN,e.getStatusCode());
  }
  UserTO userTO=userService2.readSelf();
  assertEquals(""String_Node_Str"",userTO.getUsername());
}","@Test public void selfRead(){
  UserService userService2=setupCredentials(userService,UserService.class,""String_Node_Str"",ADMIN_PWD);
  try {
    userService2.read(1L);
    fail();
  }
 catch (  HttpClientErrorException e) {
    assertEquals(HttpStatus.FORBIDDEN,e.getStatusCode());
  }
catch (  AccessControlException e) {
    assertNotNull(e);
  }
  UserTO userTO=userService2.readSelf();
  assertEquals(""String_Node_Str"",userTO.getUsername());
}"
60605,"@Override public Response create(final UserRequestTO userRequestTO){
  UserRequestTO outUserRequestTO=null;
  if (userRequestTO.getType() == UserRequestType.CREATE) {
    outUserRequestTO=userRequestController.create(userRequestTO.getUserTO());
  }
 else   if (userRequestTO.getType() == UserRequestType.UPDATE) {
    outUserRequestTO=userRequestController.update(userRequestTO.getUserMod());
  }
 else   if (userRequestTO.getType() == UserRequestType.DELETE) {
    userRequestController.delete(userRequestTO.getUserId());
  }
  URI location=uriInfo.getAbsolutePathBuilder().path(""String_Node_Str"" + outUserRequestTO.getId()).build();
  return Response.created(location).header(SyncopeConstants.REST_HEADER_ID,outUserRequestTO.getId()).build();
}","@Override public Response create(final UserRequestTO userRequestTO){
  UserRequestTO outUserRequestTO=null;
  if (userRequestTO.getType() == UserRequestType.CREATE) {
    outUserRequestTO=userRequestController.create(userRequestTO.getUserTO());
  }
 else   if (userRequestTO.getType() == UserRequestType.UPDATE) {
    outUserRequestTO=userRequestController.update(userRequestTO.getUserMod());
  }
 else   if (userRequestTO.getType() == UserRequestType.DELETE) {
    outUserRequestTO=userRequestController.delete(userRequestTO.getUserId());
  }
  URI location=uriInfo.getAbsolutePathBuilder().path(""String_Node_Str"" + outUserRequestTO.getId()).build();
  return Response.created(location).header(SyncopeConstants.REST_HEADER_ID,outUserRequestTO.getId()).build();
}"
60606,"@Test public void issueSYNCOPE272(){
  UserTO userTO=UserTestITCase.getUniqueSampleTO(""String_Node_Str"");
  userTO.addResource(""String_Node_Str"");
  userTO=createUser(userTO);
  try {
    assertNotNull(userTO);
    assertEquals(1,userTO.getPropagationStatusTOs().size());
    assertTrue(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());
    SyncTaskTO task=taskService.read(TaskType.SYNCHRONIZATION,SYNC_TASK_ID);
    assertNotNull(task);
    AttributeTO newAttrTO=new AttributeTO();
    newAttrTO.setSchema(""String_Node_Str"");
    newAttrTO.setValues(Collections.singletonList(""String_Node_Str""));
    UserTO template=new UserTO();
    template.addAttribute(newAttrTO);
    template.addAttribute(attributeTO(""String_Node_Str"",""String_Node_Str""));
    template.addAttribute(attributeTO(""String_Node_Str"",""String_Node_Str""));
    template.addAttribute(attributeTO(""String_Node_Str"",""String_Node_Str""));
    template.addResource(""String_Node_Str"");
    task.setUserTemplate(template);
    taskService.update(task.getId(),task);
    SyncTaskTO actual=taskService.read(TaskType.SYNCHRONIZATION,task.getId());
    assertNotNull(actual);
    assertEquals(task.getId(),actual.getId());
    TaskExecTO taskExecTO=execSyncTask(SYNC_TASK_ID,50,false);
    assertNotNull(actual);
    assertEquals(task.getId(),actual.getId());
    assertNotNull(taskExecTO.getStatus());
    assertTrue(PropagationTaskExecStatus.valueOf(taskExecTO.getStatus()).isSuccessful());
    userTO=userService.read(userTO.getUsername());
    assertNotNull(userTO);
    assertNotNull(userTO.getAttributeMap().get(""String_Node_Str"").getValues().get(0));
  }
  finally {
    for (int i=0; i < 10; i++) {
      String cUserName=""String_Node_Str"" + i;
      UserTO cUserTO=userService.read(cUserName);
      userService.delete(cUserTO.getId());
    }
  }
}","@Test public void issueSYNCOPE272(){
  removeTestUsers();
  UserTO userTO=UserTestITCase.getUniqueSampleTO(""String_Node_Str"");
  userTO.addResource(""String_Node_Str"");
  userTO=createUser(userTO);
  try {
    assertNotNull(userTO);
    assertEquals(1,userTO.getPropagationStatusTOs().size());
    assertTrue(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());
    SyncTaskTO task=taskService.read(TaskType.SYNCHRONIZATION,SYNC_TASK_ID);
    assertNotNull(task);
    AttributeTO newAttrTO=new AttributeTO();
    newAttrTO.setSchema(""String_Node_Str"");
    newAttrTO.setValues(Collections.singletonList(""String_Node_Str""));
    UserTO template=new UserTO();
    template.addAttribute(newAttrTO);
    template.addAttribute(attributeTO(""String_Node_Str"",""String_Node_Str""));
    template.addAttribute(attributeTO(""String_Node_Str"",""String_Node_Str""));
    template.addAttribute(attributeTO(""String_Node_Str"",""String_Node_Str""));
    template.addResource(""String_Node_Str"");
    task.setUserTemplate(template);
    taskService.update(task.getId(),task);
    SyncTaskTO actual=taskService.read(TaskType.SYNCHRONIZATION,task.getId());
    assertNotNull(actual);
    assertEquals(task.getId(),actual.getId());
    TaskExecTO taskExecTO=execSyncTask(SYNC_TASK_ID,50,false);
    assertNotNull(actual);
    assertEquals(task.getId(),actual.getId());
    assertNotNull(taskExecTO.getStatus());
    assertTrue(PropagationTaskExecStatus.valueOf(taskExecTO.getStatus()).isSuccessful());
    userTO=userService.read(userTO.getUsername());
    assertNotNull(userTO);
    assertNotNull(userTO.getAttributeMap().get(""String_Node_Str"").getValues().get(0));
  }
  finally {
    removeTestUsers();
  }
}"
60607,"@Test public void sync(){
  UserTO inUserTO=new UserTO();
  inUserTO.setPassword(""String_Node_Str"");
  String userName=""String_Node_Str"";
  inUserTO.setUsername(userName);
  inUserTO.addAttribute(attributeTO(""String_Node_Str"",""String_Node_Str""));
  inUserTO.addAttribute(attributeTO(""String_Node_Str"",""String_Node_Str""));
  inUserTO.addAttribute(attributeTO(""String_Node_Str"",""String_Node_Str""));
  inUserTO.addAttribute(attributeTO(""String_Node_Str"",""String_Node_Str""));
  inUserTO.addAttribute(attributeTO(""String_Node_Str"",""String_Node_Str""));
  inUserTO.addAttribute(attributeTO(""String_Node_Str"",""String_Node_Str""));
  inUserTO.addDerivedAttribute(attributeTO(""String_Node_Str"",null));
  inUserTO=createUser(inUserTO);
  assertNotNull(inUserTO);
  try {
    int usersPre=userService.count();
    assertNotNull(usersPre);
    SyncTaskTO task=taskService.read(TaskType.SYNCHRONIZATION,SYNC_TASK_ID);
    assertNotNull(task);
    task.setActionsClassName(TestSyncActions.class.getName());
    UserTO template=new UserTO();
    template.addAttribute(attributeTO(""String_Node_Str"",""String_Node_Str""));
    template.addDerivedAttribute(attributeTO(""String_Node_Str"",null));
    template.addResource(""String_Node_Str"");
    MembershipTO membershipTO=new MembershipTO();
    membershipTO.setRoleId(8L);
    membershipTO.addAttribute(attributeTO(""String_Node_Str"",""String_Node_Str""));
    template.addMembership(membershipTO);
    task.setUserTemplate(template);
    taskService.update(task.getId(),task);
    SyncTaskTO actual=taskService.read(TaskType.SYNCHRONIZATION,task.getId());
    assertNotNull(actual);
    assertEquals(task.getId(),actual.getId());
    assertEquals(TestSyncActions.class.getName(),actual.getActionsClassName());
    execSyncTask(SYNC_TASK_ID,50,false);
    UserTO userTO=userService.read(inUserTO.getId());
    assertNotNull(userTO);
    assertEquals(""String_Node_Str"",userTO.getUsername());
    assertEquals(ActivitiDetector.isActivitiEnabledForUsers() ? ""String_Node_Str"" : ""String_Node_Str"",userTO.getStatus());
    assertEquals(""String_Node_Str"",userTO.getAttributeMap().get(""String_Node_Str"").getValues().get(0));
    assertEquals(""String_Node_Str"",userTO.getAttributeMap().get(""String_Node_Str"").getValues().get(0));
    assertTrue(Integer.valueOf(userTO.getAttributeMap().get(""String_Node_Str"").getValues().get(0)) <= 10);
    userTO=userService.read(""String_Node_Str"");
    assertNotNull(userTO);
    assertEquals(""String_Node_Str"",userTO.getAttributeMap().get(""String_Node_Str"").getValues().get(0));
    assertEquals(2,userTO.getResources().size());
    assertTrue(userTO.getResources().contains(""String_Node_Str""));
    assertTrue(userTO.getResources().contains(""String_Node_Str""));
    assertEquals(1,userTO.getMemberships().size());
    assertTrue(userTO.getMemberships().get(0).getAttributeMap().containsKey(""String_Node_Str""));
    userTO=userService.read(""String_Node_Str"");
    assertNotNull(userTO);
    assertEquals(""String_Node_Str"",userTO.getAttributeMap().get(""String_Node_Str"").getValues().get(0));
    int usersPost=userService.count();
    assertNotNull(usersPost);
    assertEquals(usersPre + 9,usersPost);
    userTO=userService.read(""String_Node_Str"");
    assertNotNull(userTO);
    assertEquals(""String_Node_Str"",userTO.getStatus());
    userTO=userService.read(""String_Node_Str"");
    assertNotNull(userTO);
    assertEquals(""String_Node_Str"",userTO.getStatus());
  }
  finally {
    for (int i=0; i < 10; i++) {
      String cUserName=""String_Node_Str"" + i;
      UserTO cUserTO=userService.read(cUserName);
      userService.delete(cUserTO.getId());
    }
  }
}","@Test public void sync(){
  removeTestUsers();
  UserTO inUserTO=new UserTO();
  inUserTO.setPassword(""String_Node_Str"");
  String userName=""String_Node_Str"";
  inUserTO.setUsername(userName);
  inUserTO.addAttribute(attributeTO(""String_Node_Str"",""String_Node_Str""));
  inUserTO.addAttribute(attributeTO(""String_Node_Str"",""String_Node_Str""));
  inUserTO.addAttribute(attributeTO(""String_Node_Str"",""String_Node_Str""));
  inUserTO.addAttribute(attributeTO(""String_Node_Str"",""String_Node_Str""));
  inUserTO.addAttribute(attributeTO(""String_Node_Str"",""String_Node_Str""));
  inUserTO.addAttribute(attributeTO(""String_Node_Str"",""String_Node_Str""));
  inUserTO.addDerivedAttribute(attributeTO(""String_Node_Str"",null));
  inUserTO=createUser(inUserTO);
  assertNotNull(inUserTO);
  try {
    int usersPre=userService.count();
    assertNotNull(usersPre);
    SyncTaskTO task=taskService.read(TaskType.SYNCHRONIZATION,SYNC_TASK_ID);
    assertNotNull(task);
    task.setActionsClassName(TestSyncActions.class.getName());
    UserTO template=new UserTO();
    template.addAttribute(attributeTO(""String_Node_Str"",""String_Node_Str""));
    template.addDerivedAttribute(attributeTO(""String_Node_Str"",null));
    template.addResource(""String_Node_Str"");
    MembershipTO membershipTO=new MembershipTO();
    membershipTO.setRoleId(8L);
    membershipTO.addAttribute(attributeTO(""String_Node_Str"",""String_Node_Str""));
    template.addMembership(membershipTO);
    task.setUserTemplate(template);
    taskService.update(task.getId(),task);
    SyncTaskTO actual=taskService.read(TaskType.SYNCHRONIZATION,task.getId());
    assertNotNull(actual);
    assertEquals(task.getId(),actual.getId());
    assertEquals(TestSyncActions.class.getName(),actual.getActionsClassName());
    execSyncTask(SYNC_TASK_ID,50,false);
    UserTO userTO=userService.read(inUserTO.getId());
    assertNotNull(userTO);
    assertEquals(""String_Node_Str"",userTO.getUsername());
    assertEquals(ActivitiDetector.isActivitiEnabledForUsers() ? ""String_Node_Str"" : ""String_Node_Str"",userTO.getStatus());
    assertEquals(""String_Node_Str"",userTO.getAttributeMap().get(""String_Node_Str"").getValues().get(0));
    assertEquals(""String_Node_Str"",userTO.getAttributeMap().get(""String_Node_Str"").getValues().get(0));
    assertTrue(Integer.valueOf(userTO.getAttributeMap().get(""String_Node_Str"").getValues().get(0)) <= 10);
    userTO=userService.read(""String_Node_Str"");
    assertNotNull(userTO);
    assertEquals(""String_Node_Str"",userTO.getAttributeMap().get(""String_Node_Str"").getValues().get(0));
    assertEquals(2,userTO.getResources().size());
    assertTrue(userTO.getResources().contains(""String_Node_Str""));
    assertTrue(userTO.getResources().contains(""String_Node_Str""));
    assertEquals(1,userTO.getMemberships().size());
    assertTrue(userTO.getMemberships().get(0).getAttributeMap().containsKey(""String_Node_Str""));
    userTO=userService.read(""String_Node_Str"");
    assertNotNull(userTO);
    assertEquals(""String_Node_Str"",userTO.getAttributeMap().get(""String_Node_Str"").getValues().get(0));
    int usersPost=userService.count();
    assertNotNull(usersPost);
    assertEquals(usersPre + 9,usersPost);
    userTO=userService.read(""String_Node_Str"");
    assertNotNull(userTO);
    assertEquals(""String_Node_Str"",userTO.getStatus());
    userTO=userService.read(""String_Node_Str"");
    assertNotNull(userTO);
    assertEquals(""String_Node_Str"",userTO.getStatus());
  }
  finally {
    removeTestUsers();
  }
}"
60608,"public ResourceModalPage(final PageReference pageref,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  super();
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(resourceTO));
  form.add(new ResourceDetailsPanel(""String_Node_Str"",resourceTO,restClient.getPropagationActionsClasses(),createFlag));
  form.add(new ResourceMappingPanel(""String_Node_Str"",resourceTO,AttributableType.USER));
  form.add(new ResourceMappingPanel(""String_Node_Str"",resourceTO,AttributableType.ROLE));
  form.add(new ResourceConnConfPanel(""String_Node_Str"",resourceTO,createFlag));
  form.add(new ResourceSecurityPanel(""String_Node_Str"",resourceTO));
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form<?> form){
      final ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
      boolean accountIdError=false;
      if (resourceTO.getUmapping().getItems().isEmpty()) {
        resourceTO.setUmapping(null);
      }
 else {
        int uAccountIdCount=0;
        for (        MappingItemTO item : resourceTO.getUmapping().getItems()) {
          if (item.isAccountid()) {
            uAccountIdCount++;
          }
        }
        accountIdError=uAccountIdCount != 1;
      }
      if (resourceTO.getRmapping().getItems().isEmpty()) {
        resourceTO.setRmapping(null);
      }
 else {
        int rAccountIdCount=0;
        for (        MappingItemTO item : resourceTO.getRmapping().getItems()) {
          if (item.isAccountid()) {
            rAccountIdCount++;
          }
        }
        accountIdError|=rAccountIdCount != 1;
      }
      if (accountIdError) {
        error(new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject());
        target.add(feedbackPanel);
      }
 else {
        try {
          if (createFlag) {
            restClient.create(resourceTO);
          }
 else {
            restClient.update(resourceTO);
          }
          ((Resources)pageref.getPage()).setModalResult(true);
          window.close(target);
        }
 catch (        Exception e) {
          LOG.error(""String_Node_Str"",resourceTO,e);
          error(new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject() + ""String_Node_Str"" + e.getMessage());
          target.add(feedbackPanel);
        }
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form<?> form){
      target.add(feedbackPanel);
    }
  }
;
  form.add(submit);
  final AjaxButton cancel=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form<?> form){
      window.close(target);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form<?> form){
    }
  }
;
  cancel.setDefaultFormProcessing(false);
  form.add(cancel);
  add(form);
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",createFlag ? ""String_Node_Str"" : ""String_Node_Str""));
}","public ResourceModalPage(final PageReference pageref,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  super();
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(resourceTO));
  form.add(new ResourceDetailsPanel(""String_Node_Str"",resourceTO,restClient.getPropagationActionsClasses(),createFlag));
  form.add(new ResourceMappingPanel(""String_Node_Str"",resourceTO,AttributableType.USER));
  form.add(new ResourceMappingPanel(""String_Node_Str"",resourceTO,AttributableType.ROLE));
  form.add(new ResourceConnConfPanel(""String_Node_Str"",resourceTO,createFlag));
  form.add(new ResourceSecurityPanel(""String_Node_Str"",resourceTO));
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form<?> form){
      final ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
      boolean accountIdError=false;
      if (resourceTO.getUmapping().getItems().isEmpty()) {
        resourceTO.setUmapping(null);
      }
 else {
        int uAccountIdCount=0;
        for (        MappingItemTO item : resourceTO.getUmapping().getItems()) {
          if (item.isAccountid()) {
            uAccountIdCount++;
          }
        }
        accountIdError=uAccountIdCount != 1;
      }
      if (resourceTO.getRmapping().getItems().isEmpty()) {
        resourceTO.setRmapping(null);
      }
 else {
        int rAccountIdCount=0;
        for (        MappingItemTO item : resourceTO.getRmapping().getItems()) {
          if (item.isAccountid()) {
            rAccountIdCount++;
          }
        }
        accountIdError|=rAccountIdCount != 1;
      }
      if (accountIdError) {
        error(getString(""String_Node_Str""));
        target.add(feedbackPanel);
      }
 else {
        try {
          if (createFlag) {
            restClient.create(resourceTO);
          }
 else {
            restClient.update(resourceTO);
          }
          ((Resources)pageref.getPage()).setModalResult(true);
          window.close(target);
        }
 catch (        Exception e) {
          LOG.error(""String_Node_Str"",resourceTO,e);
          error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
          target.add(feedbackPanel);
        }
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form<?> form){
      target.add(feedbackPanel);
    }
  }
;
  form.add(submit);
  final AjaxButton cancel=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form<?> form){
      window.close(target);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form<?> form){
    }
  }
;
  cancel.setDefaultFormProcessing(false);
  form.add(cancel);
  add(form);
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",createFlag ? ""String_Node_Str"" : ""String_Node_Str""));
}"
60609,"/** 
 * Check if the configured user workflow adapter is Activiti's.
 * @return whether Activiti is configured for workflow or not
 */
public static boolean isActivitiEnabledForUsers(){
  return uwfAdapterClassName != null && uwfAdapterClassName.equals(ActivitiUserWorkflowAdapter.class.getName());
}","/** 
 * Check if the configured user workflow adapter is Activiti's.
 * @return whether Activiti is configured for user workflow or not
 */
public static boolean isActivitiEnabledForUsers(){
  return uwfAdapterClassName != null && uwfAdapterClassName.equals(ActivitiUserWorkflowAdapter.class.getName());
}"
60610,"@Test public void testGetRoleTasks(){
  List<String> tasks=workflowService.getDefinedTasks(ROLE_TYPE);
  assertNotNull(tasks);
  assertTrue(tasks.size() > 0);
}","@Test public void testGetRoleTasks(){
  List<String> tasks=workflowService.getDefinedTasks(ROLE_TYPE);
  assertNotNull(tasks);
  assertFalse(tasks.isEmpty());
}"
60611,"@Test @Ignore public void testUpdateUserDefinition(){
  WorkflowDefinitionTO definition=workflowService.getDefinition(USER_TYPE);
  assertNotNull(definition);
  String newID=(definition.getId() != null) ? definition.getId() + ""String_Node_Str"" : ""String_Node_Str"";
  definition.setId(newID);
  workflowService.updateDefinition(USER_TYPE,definition);
  WorkflowDefinitionTO newDefinition=workflowService.getDefinition(USER_TYPE);
  assertEquals(newID,newDefinition.getId());
}","@Test public void testUpdateUserDefinition(){
  Assume.assumeTrue(SpringContextInitializer.isActivitiEnabledForUsers());
  WorkflowDefinitionTO definition=workflowService.getDefinition(USER_TYPE);
  assertNotNull(definition);
  workflowService.updateDefinition(USER_TYPE,definition);
  WorkflowDefinitionTO newDefinition=workflowService.getDefinition(USER_TYPE);
  assertNotNull(newDefinition);
}"
60612,"@Test public void testGetUserTasks(){
  List<String> tasks=workflowService.getDefinedTasks(USER_TYPE);
  assertNotNull(tasks);
  assertTrue(tasks.size() > 0);
}","@Test public void testGetUserTasks(){
  List<String> tasks=workflowService.getDefinedTasks(USER_TYPE);
  assertNotNull(tasks);
  assertFalse(tasks.isEmpty());
}"
60613,"@Test @Ignore public void testUpdateRoleDefinition(){
  WorkflowDefinitionTO definition=workflowService.getDefinition(ROLE_TYPE);
  assertNotNull(definition);
  String newID=(definition.getId() != null) ? definition.getId() + ""String_Node_Str"" : ""String_Node_Str"";
  definition.setId(newID);
  workflowService.updateDefinition(ROLE_TYPE,definition);
  WorkflowDefinitionTO newDefinition=workflowService.getDefinition(ROLE_TYPE);
  assertEquals(newID,newDefinition.getId());
}","@Test public void testUpdateRoleDefinition(){
  Assume.assumeTrue(SpringContextInitializer.isActivitiEnabledForRoles());
  WorkflowDefinitionTO definition=workflowService.getDefinition(ROLE_TYPE);
  assertNotNull(definition);
  workflowService.updateDefinition(ROLE_TYPE,definition);
  WorkflowDefinitionTO newDefinition=workflowService.getDefinition(ROLE_TYPE);
  assertNotNull(newDefinition);
}"
60614,"@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public RoleTO create(final HttpServletResponse response,@RequestBody final RoleTO roleTO) throws UnauthorizedRoleException, WorkflowException, NotFoundException, PropagationException {
  LOG.debug(""String_Node_Str"",roleTO);
  Set<Long> allowedRoleIds=EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());
  if (roleTO.getParent() != 0 && !allowedRoleIds.contains(roleTO.getParent())) {
    throw new UnauthorizedRoleException(roleTO.getParent());
  }
  WorkflowResult<Long> created=rwfAdapter.create(roleTO);
  Authentication auth=SecurityContextHolder.getContext().getAuthentication();
  List<GrantedAuthority> authorities=new ArrayList<GrantedAuthority>(auth.getAuthorities());
  authorities.add(new SimpleGrantedAuthority(EntitlementUtil.getEntitlementNameFromRoleId(created.getResult())));
  Authentication newAuth=new UsernamePasswordAuthenticationToken(auth.getPrincipal(),auth.getCredentials(),authorities);
  SecurityContextHolder.getContext().setAuthentication(newAuth);
  List<PropagationTask> tasks=propagationManager.getRoleCreateTaskIds(created,roleTO.getVirtualAttributes());
  final List<PropagationTO> propagations=new ArrayList<PropagationTO>();
  taskExecutor.execute(tasks,new DefaultPropagationHandler(connObjectUtil,propagations));
  final RoleTO savedTO=dataBinder.getRoleTO(created.getResult());
  savedTO.setPropagationTOs(propagations);
  LOG.debug(""String_Node_Str"",savedTO);
  auditManager.audit(Category.role,RoleSubCategory.create,Result.success,""String_Node_Str"" + savedTO.getId());
  response.setStatus(HttpServletResponse.SC_CREATED);
  return savedTO;
}","@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public RoleTO create(final HttpServletResponse response,@RequestBody final RoleTO roleTO) throws UnauthorizedRoleException, WorkflowException, NotFoundException, PropagationException {
  LOG.debug(""String_Node_Str"",roleTO);
  Set<Long> allowedRoleIds=EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());
  if (roleTO.getParent() != 0 && !allowedRoleIds.contains(roleTO.getParent())) {
    throw new UnauthorizedRoleException(roleTO.getParent());
  }
  WorkflowResult<Long> created=rwfAdapter.create(roleTO);
  EntitlementUtil.extendAuthContext(created.getResult());
  List<PropagationTask> tasks=propagationManager.getRoleCreateTaskIds(created,roleTO.getVirtualAttributes());
  final List<PropagationTO> propagations=new ArrayList<PropagationTO>();
  taskExecutor.execute(tasks,new DefaultPropagationHandler(connObjectUtil,propagations));
  final RoleTO savedTO=dataBinder.getRoleTO(created.getResult());
  savedTO.setPropagationTOs(propagations);
  LOG.debug(""String_Node_Str"",savedTO);
  auditManager.audit(Category.role,RoleSubCategory.create,Result.success,""String_Node_Str"" + savedTO.getId());
  response.setStatus(HttpServletResponse.SC_CREATED);
  return savedTO;
}"
60615,"protected List<SyncResult> create(SyncDelta delta,final AttributableUtil attrUtil,final boolean dryRun) throws JobExecutionException {
  if (!syncTask.isPerformCreate()) {
    LOG.debug(""String_Node_Str"");
    return Collections.EMPTY_LIST;
  }
  final SyncResult result=new SyncResult();
  result.setOperation(SyncResult.Operation.CREATE);
  AbstractAttributableTO subjectTO=connObjectUtil.getAttributableTO(delta.getObject(),syncTask,attrUtil);
  delta=actions.beforeCreate(delta,subjectTO);
  if (dryRun) {
    result.setId(0L);
    if (subjectTO instanceof UserTO) {
      result.setName(((UserTO)subjectTO).getUsername());
    }
    if (subjectTO instanceof RoleTO) {
      result.setName(((RoleTO)subjectTO).getName());
    }
    result.setStatus(AbstractTaskJob.Status.SUCCESS);
  }
 else {
    try {
      if (AttributableType.USER == attrUtil.getType()) {
        Boolean enabled=null;
        if (syncTask.isSyncStatus()) {
          Attribute status=AttributeUtil.find(OperationalAttributes.ENABLE_NAME,delta.getObject().getAttributes());
          if (status != null && status.getValue() != null && !status.getValue().isEmpty()) {
            enabled=(Boolean)status.getValue().get(0);
          }
        }
        WorkflowResult<Map.Entry<Long,Boolean>> created=uwfAdapter.create((UserTO)subjectTO,true,enabled);
        List<PropagationTask> tasks=propagationManager.getUserCreateTaskIds(created,((UserTO)subjectTO).getPassword(),subjectTO.getVirtualAttributes(),Collections.singleton(syncTask.getResource().getName()));
        taskExecutor.execute(tasks);
        notificationManager.createTasks(created.getResult().getKey(),created.getPerformedTasks());
        subjectTO=userDataBinder.getUserTO(created.getResult().getKey());
        result.setId(created.getResult().getKey());
      }
      if (AttributableType.ROLE == attrUtil.getType()) {
        WorkflowResult<Long> created=rwfAdapter.create((RoleTO)subjectTO);
        List<PropagationTask> tasks=propagationManager.getRoleCreateTaskIds(created,subjectTO.getVirtualAttributes(),Collections.singleton(syncTask.getResource().getName()));
        taskExecutor.execute(tasks);
        subjectTO=roleDataBinder.getRoleTO(created.getResult());
        result.setId(created.getResult());
      }
      if (subjectTO instanceof UserTO) {
        result.setName(((UserTO)subjectTO).getUsername());
      }
      if (subjectTO instanceof RoleTO) {
        result.setName(((RoleTO)subjectTO).getName());
      }
      result.setStatus(AbstractTaskJob.Status.SUCCESS);
    }
 catch (    PropagationException e) {
      LOG.error(""String_Node_Str"",attrUtil.getType(),delta.getUid().getUidValue(),e);
    }
catch (    Exception e) {
      result.setStatus(AbstractTaskJob.Status.FAILURE);
      result.setMessage(e.getMessage());
      LOG.error(""String_Node_Str"",attrUtil.getType(),delta.getUid().getUidValue(),e);
    }
  }
  actions.after(delta,subjectTO,result);
  return Collections.singletonList(result);
}","protected List<SyncResult> create(SyncDelta delta,final AttributableUtil attrUtil,final boolean dryRun) throws JobExecutionException {
  if (!syncTask.isPerformCreate()) {
    LOG.debug(""String_Node_Str"");
    return Collections.EMPTY_LIST;
  }
  final SyncResult result=new SyncResult();
  result.setOperation(SyncResult.Operation.CREATE);
  AbstractAttributableTO subjectTO=connObjectUtil.getAttributableTO(delta.getObject(),syncTask,attrUtil);
  delta=actions.beforeCreate(delta,subjectTO);
  if (dryRun) {
    result.setId(0L);
    if (subjectTO instanceof UserTO) {
      result.setName(((UserTO)subjectTO).getUsername());
    }
    if (subjectTO instanceof RoleTO) {
      result.setName(((RoleTO)subjectTO).getName());
    }
    result.setStatus(AbstractTaskJob.Status.SUCCESS);
  }
 else {
    try {
      if (AttributableType.USER == attrUtil.getType()) {
        Boolean enabled=null;
        if (syncTask.isSyncStatus()) {
          Attribute status=AttributeUtil.find(OperationalAttributes.ENABLE_NAME,delta.getObject().getAttributes());
          if (status != null && status.getValue() != null && !status.getValue().isEmpty()) {
            enabled=(Boolean)status.getValue().get(0);
          }
        }
        WorkflowResult<Map.Entry<Long,Boolean>> created=uwfAdapter.create((UserTO)subjectTO,true,enabled);
        List<PropagationTask> tasks=propagationManager.getUserCreateTaskIds(created,((UserTO)subjectTO).getPassword(),subjectTO.getVirtualAttributes(),Collections.singleton(syncTask.getResource().getName()));
        taskExecutor.execute(tasks);
        notificationManager.createTasks(created.getResult().getKey(),created.getPerformedTasks());
        subjectTO=userDataBinder.getUserTO(created.getResult().getKey());
        result.setId(created.getResult().getKey());
      }
      if (AttributableType.ROLE == attrUtil.getType()) {
        WorkflowResult<Long> created=rwfAdapter.create((RoleTO)subjectTO);
        EntitlementUtil.extendAuthContext(created.getResult());
        List<PropagationTask> tasks=propagationManager.getRoleCreateTaskIds(created,subjectTO.getVirtualAttributes(),Collections.singleton(syncTask.getResource().getName()));
        taskExecutor.execute(tasks);
        subjectTO=roleDataBinder.getRoleTO(created.getResult());
        result.setId(created.getResult());
      }
      if (subjectTO instanceof UserTO) {
        result.setName(((UserTO)subjectTO).getUsername());
      }
      if (subjectTO instanceof RoleTO) {
        result.setName(((RoleTO)subjectTO).getName());
      }
      result.setStatus(AbstractTaskJob.Status.SUCCESS);
    }
 catch (    PropagationException e) {
      LOG.error(""String_Node_Str"",attrUtil.getType(),delta.getUid().getUidValue(),e);
    }
catch (    Exception e) {
      result.setStatus(AbstractTaskJob.Status.FAILURE);
      result.setMessage(e.getMessage());
      LOG.error(""String_Node_Str"",attrUtil.getType(),delta.getUid().getUidValue(),e);
    }
  }
  actions.after(delta,subjectTO,result);
  return Collections.singletonList(result);
}"
60616,"@Test public void derAttrFromSpecialAttrs(){
  UDerSchema sderived=new UDerSchema();
  sderived.setName(""String_Node_Str"");
  sderived.setExpression(""String_Node_Str"");
  sderived=derSchemaDAO.save(sderived);
  derSchemaDAO.flush();
  UDerSchema actual=derSchemaDAO.find(""String_Node_Str"",UDerSchema.class);
  assertNotNull(""String_Node_Str"",actual);
  assertEquals(sderived,actual);
  SyncopeUser owner=userDAO.find(3L);
  assertNotNull(""String_Node_Str"",owner);
  UDerAttr derAttr=new UDerAttr();
  derAttr.setOwner(owner);
  derAttr.setDerivedSchema(sderived);
  derAttr=derAttrDAO.save(derAttr);
  derAttrDAO.flush();
  derAttr=derAttrDAO.find(derAttr.getId(),UDerAttr.class);
  assertNotNull(""String_Node_Str"",derAttr);
  String value=derAttr.getValue(owner.getAttributes());
  assertNotNull(value);
  assertFalse(value.isEmpty());
  assertTrue(value.startsWith(""String_Node_Str""));
  assertTrue(value.endsWith(""String_Node_Str""));
}","@Test public void derAttrFromSpecialAttrs(){
  UDerSchema sderived=new UDerSchema();
  sderived.setName(""String_Node_Str"");
  sderived.setExpression(""String_Node_Str"");
  sderived=derSchemaDAO.save(sderived);
  derSchemaDAO.flush();
  UDerSchema actual=derSchemaDAO.find(""String_Node_Str"",UDerSchema.class);
  assertNotNull(""String_Node_Str"",actual);
  assertEquals(sderived,actual);
  SyncopeUser owner=userDAO.find(3L);
  assertNotNull(""String_Node_Str"",owner);
  UDerAttr derAttr=new UDerAttr();
  derAttr.setOwner(owner);
  derAttr.setDerivedSchema(sderived);
  derAttr=derAttrDAO.save(derAttr);
  derAttrDAO.flush();
  derAttr=derAttrDAO.find(derAttr.getId(),UDerAttr.class);
  assertNotNull(""String_Node_Str"",derAttr);
  String value=derAttr.getValue(owner.getAttributes());
  assertNotNull(value);
  assertFalse(value.isEmpty());
  System.out.println(""String_Node_Str"" + value);
  assertTrue(value.startsWith(""String_Node_Str""));
  assertTrue(value.endsWith(""String_Node_Str""));
}"
60617,"public NotificationTasks(String id){
  super(id);
  add(window=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getWebRequest(),Constants.PREF_NOTIFICATION_TASKS_PAGINATOR_ROWS);
  List<IColumn<TaskTO>> columns=new ArrayList<IColumn<TaskTO>>();
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<TaskTO>(new ResourceModel(""String_Node_Str"",""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public String getCssClass(){
      return ""String_Node_Str"";
    }
    @Override public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      final ActionLinksPanel panel=new ActionLinksPanel(componentId,model);
      panel.add(new ActionLink(){
        private static final long serialVersionUID=-3722207913631435501L;
        @Override public void onClick(        final AjaxRequestTarget target){
          window.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new NotificationTaskModalPage(taskTO);
            }
          }
);
          window.show(target);
        }
      }
,ActionLink.ActionType.EDIT,""String_Node_Str"",""String_Node_Str"");
      panel.add(new ActionLink(){
        private static final long serialVersionUID=-3722207913631435501L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.startExecution(taskTO.getId(),false);
            getSession().info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(getPage().get(""String_Node_Str""));
          target.add(container);
        }
      }
,ActionLink.ActionType.EXECUTE,""String_Node_Str"",""String_Node_Str"");
      panel.add(new ActionLink(){
        private static final long serialVersionUID=-3722207913631435501L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.delete(taskTO.getId(),NotificationTaskTO.class);
            info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
,ActionLink.ActionType.DELETE,""String_Node_Str"",""String_Node_Str"");
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable<TaskTO> table=new AjaxFallbackDefaultDataTable<TaskTO>(""String_Node_Str"",columns,new TasksProvider(restClient,paginatorRows,getId(),NotificationTaskTO.class),paginatorRows);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(table);
  container.setOutputMarkupId(true);
  add(container);
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      target.add(container);
      if (operationResult) {
        info(getString(""String_Node_Str""));
        target.add(getPage().get(""String_Node_Str""));
        operationResult=false;
      }
    }
  }
);
  window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  window.setInitialHeight(WIN_HEIGHT);
  window.setInitialWidth(WIN_WIDTH);
  window.setCookieName(""String_Node_Str"");
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequest(),(WebResponse)getResponse(),Constants.PREF_NOTIFICATION_TASKS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table.setItemsPerPage(paginatorRows);
      target.add(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
}","public NotificationTasks(String id){
  super(id);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.setOutputMarkupId(true);
  add(container);
  add(window=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getWebRequest(),Constants.PREF_NOTIFICATION_TASKS_PAGINATOR_ROWS);
  columns=new ArrayList<IColumn<TaskTO>>();
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<TaskTO>(new ResourceModel(""String_Node_Str"",""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public String getCssClass(){
      return ""String_Node_Str"";
    }
    @Override public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      final ActionLinksPanel panel=new ActionLinksPanel(componentId,model);
      panel.add(new ActionLink(){
        private static final long serialVersionUID=-3722207913631435501L;
        @Override public void onClick(        final AjaxRequestTarget target){
          window.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new NotificationTaskModalPage(taskTO);
            }
          }
);
          window.show(target);
        }
      }
,ActionLink.ActionType.EDIT,""String_Node_Str"",""String_Node_Str"");
      panel.add(new ActionLink(){
        private static final long serialVersionUID=-3722207913631435501L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.startExecution(taskTO.getId(),false);
            getSession().info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(getPage().get(""String_Node_Str""));
          target.add(container);
        }
      }
,ActionLink.ActionType.EXECUTE,""String_Node_Str"",""String_Node_Str"");
      panel.add(new ActionLink(){
        private static final long serialVersionUID=-3722207913631435501L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.delete(taskTO.getId(),NotificationTaskTO.class);
            info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
,ActionLink.ActionType.DELETE,""String_Node_Str"",""String_Node_Str"");
      cellItem.add(panel);
    }
  }
);
  table=Tasks.updateTaskTable(columns,new TasksProvider(restClient,paginatorRows,getId(),NotificationTaskTO.class),container,0);
  container.add(table);
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      target.add(container);
      if (operationResult) {
        info(getString(""String_Node_Str""));
        target.add(getPage().get(""String_Node_Str""));
        operationResult=false;
      }
    }
  }
);
  window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  window.setInitialHeight(WIN_HEIGHT);
  window.setInitialWidth(WIN_WIDTH);
  window.setCookieName(""String_Node_Str"");
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequest(),(WebResponse)getResponse(),Constants.PREF_NOTIFICATION_TASKS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table=Tasks.updateTaskTable(columns,new TasksProvider(restClient,paginatorRows,getId(),NotificationTaskTO.class),container,table == null ? 0 : table.getCurrentPage());
      target.add(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
}"
60618,"@Override protected void onUpdate(final AjaxRequestTarget target){
  prefMan.set(getWebRequest(),(WebResponse)getResponse(),Constants.PREF_NOTIFICATION_TASKS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
  table.setItemsPerPage(paginatorRows);
  target.add(container);
}","@Override protected void onUpdate(final AjaxRequestTarget target){
  prefMan.set(getWebRequest(),(WebResponse)getResponse(),Constants.PREF_NOTIFICATION_TASKS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
  table=Tasks.updateTaskTable(columns,new TasksProvider(restClient,paginatorRows,getId(),NotificationTaskTO.class),container,table == null ? 0 : table.getCurrentPage());
  target.add(container);
}"
60619,"public PropagationTasks(final String id){
  super(id);
  add(window=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getWebRequest(),Constants.PREF_PROPAGATION_TASKS_PAGINATOR_ROWS);
  List<IColumn<TaskTO>> columns=new ArrayList<IColumn<TaskTO>>();
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<TaskTO>(new ResourceModel(""String_Node_Str"",""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public String getCssClass(){
      return ""String_Node_Str"";
    }
    @Override public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      final ActionLinksPanel panel=new ActionLinksPanel(componentId,model);
      panel.add(new ActionLink(){
        private static final long serialVersionUID=-3722207913631435501L;
        @Override public void onClick(        final AjaxRequestTarget target){
          window.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new PropagationTaskModalPage(taskTO);
            }
          }
);
          window.show(target);
        }
      }
,ActionLink.ActionType.EDIT,""String_Node_Str"",""String_Node_Str"");
      panel.add(new ActionLink(){
        private static final long serialVersionUID=-3722207913631435501L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.startExecution(taskTO.getId(),false);
            getSession().info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(getPage().get(""String_Node_Str""));
          target.add(container);
        }
      }
,ActionLink.ActionType.EXECUTE,""String_Node_Str"",""String_Node_Str"");
      panel.add(new ActionLink(){
        private static final long serialVersionUID=-3722207913631435501L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.delete(taskTO.getId(),PropagationTaskTO.class);
            info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
,ActionLink.ActionType.DELETE,""String_Node_Str"",""String_Node_Str"");
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable<TaskTO> table=new AjaxFallbackDefaultDataTable<TaskTO>(""String_Node_Str"",columns,new TasksProvider(restClient,paginatorRows,getId(),PropagationTaskTO.class),paginatorRows);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(table);
  container.setOutputMarkupId(true);
  add(container);
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      target.add(container);
      if (operationResult) {
        info(getString(""String_Node_Str""));
        target.add(getPage().get(""String_Node_Str""));
        operationResult=false;
      }
    }
  }
);
  window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  window.setInitialHeight(WIN_HEIGHT);
  window.setInitialWidth(WIN_WIDTH);
  window.setCookieName(""String_Node_Str"");
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequest(),(WebResponse)getResponse(),Constants.PREF_PROPAGATION_TASKS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table.setItemsPerPage(paginatorRows);
      target.add(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
}","public PropagationTasks(final String id){
  super(id);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.setOutputMarkupId(true);
  add(container);
  add(window=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getWebRequest(),Constants.PREF_PROPAGATION_TASKS_PAGINATOR_ROWS);
  columns=new ArrayList<IColumn<TaskTO>>();
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<TaskTO>(new ResourceModel(""String_Node_Str"",""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public String getCssClass(){
      return ""String_Node_Str"";
    }
    @Override public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      final ActionLinksPanel panel=new ActionLinksPanel(componentId,model);
      panel.add(new ActionLink(){
        private static final long serialVersionUID=-3722207913631435501L;
        @Override public void onClick(        final AjaxRequestTarget target){
          window.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new PropagationTaskModalPage(taskTO);
            }
          }
);
          window.show(target);
        }
      }
,ActionLink.ActionType.EDIT,""String_Node_Str"",""String_Node_Str"");
      panel.add(new ActionLink(){
        private static final long serialVersionUID=-3722207913631435501L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.startExecution(taskTO.getId(),false);
            getSession().info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(getPage().get(""String_Node_Str""));
          target.add(container);
        }
      }
,ActionLink.ActionType.EXECUTE,""String_Node_Str"",""String_Node_Str"");
      panel.add(new ActionLink(){
        private static final long serialVersionUID=-3722207913631435501L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.delete(taskTO.getId(),PropagationTaskTO.class);
            info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
,ActionLink.ActionType.DELETE,""String_Node_Str"",""String_Node_Str"");
      cellItem.add(panel);
    }
  }
);
  table=Tasks.updateTaskTable(columns,new TasksProvider(restClient,paginatorRows,getId(),PropagationTaskTO.class),container,0);
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      target.add(container);
      if (operationResult) {
        info(getString(""String_Node_Str""));
        target.add(getPage().get(""String_Node_Str""));
        operationResult=false;
      }
    }
  }
);
  window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  window.setInitialHeight(WIN_HEIGHT);
  window.setInitialWidth(WIN_WIDTH);
  window.setCookieName(""String_Node_Str"");
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequest(),(WebResponse)getResponse(),Constants.PREF_PROPAGATION_TASKS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table=Tasks.updateTaskTable(columns,new TasksProvider(restClient,paginatorRows,getId(),PropagationTaskTO.class),container,table == null ? 0 : table.getCurrentPage());
      target.add(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
}"
60620,"@Override protected void onUpdate(final AjaxRequestTarget target){
  prefMan.set(getWebRequest(),(WebResponse)getResponse(),Constants.PREF_PROPAGATION_TASKS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
  table.setItemsPerPage(paginatorRows);
  target.add(container);
}","@Override protected void onUpdate(final AjaxRequestTarget target){
  prefMan.set(getWebRequest(),(WebResponse)getResponse(),Constants.PREF_PROPAGATION_TASKS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
  table=Tasks.updateTaskTable(columns,new TasksProvider(restClient,paginatorRows,getId(),PropagationTaskTO.class),container,table == null ? 0 : table.getCurrentPage());
  target.add(container);
}"
60621,"private void updateResultTable(final boolean create){
  rows=preferences.getPaginatorRows(getRequest(),Constants.PREF_USERS_PAGINATOR_ROWS);
  dataProvider=new UserDataProvider(userRestClient,rows,filtered);
  dataProvider.setSearchCond(filter);
  final int currentPage=resultTable != null ? (create ? resultTable.getPageCount() - 1 : resultTable.getCurrentPage()) : 0;
  resultTable=new AjaxFallbackDefaultDataTable<UserTO>(""String_Node_Str"",getColumns(),dataProvider,rows);
  resultTable.setCurrentPage(currentPage);
  resultTable.setOutputMarkupId(true);
  container.addOrReplace(resultTable);
}","private void updateResultTable(final boolean create,final int rows){
  dataProvider=new UserDataProvider(userRestClient,rows,filtered);
  dataProvider.setSearchCond(filter);
  final int currentPage=resultTable != null ? (create ? resultTable.getPageCount() - 1 : resultTable.getCurrentPage()) : 0;
  resultTable=new AjaxFallbackDefaultDataTable<UserTO>(""String_Node_Str"",getColumns(),dataProvider,rows);
  resultTable.setCurrentPage(currentPage);
  resultTable.setOutputMarkupId(true);
  container.addOrReplace(resultTable);
}"
60622,"private void setWindowClosedReloadCallback(final ModalWindow window){
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      final EventDataWrapper data=new EventDataWrapper();
      data.setTarget(target);
      send(getParent(),Broadcast.BREADTH,data);
      if (page.isModalResult()) {
        page.setModalResult(false);
        getSession().info(getString(""String_Node_Str""));
        target.add(feedbackPanel);
      }
    }
  }
);
}","private void setWindowClosedReloadCallback(final ModalWindow window){
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      final EventDataWrapper data=new EventDataWrapper();
      data.setTarget(target);
      data.setRows(rows);
      send(getParent(),Broadcast.BREADTH,data);
      if (page.isModalResult()) {
        page.setModalResult(false);
        getSession().info(getString(""String_Node_Str""));
        target.add(feedbackPanel);
      }
    }
  }
);
}"
60623,"@Override public void onClose(final AjaxRequestTarget target){
  final EventDataWrapper data=new EventDataWrapper();
  data.setTarget(target);
  send(getParent(),Broadcast.BREADTH,data);
  if (page.isModalResult()) {
    page.setModalResult(false);
    getSession().info(getString(""String_Node_Str""));
    target.add(feedbackPanel);
  }
}","@Override public void onClose(final AjaxRequestTarget target){
  final EventDataWrapper data=new EventDataWrapper();
  data.setTarget(target);
  data.setRows(rows);
  send(getParent(),Broadcast.BREADTH,data);
  if (page.isModalResult()) {
    page.setModalResult(false);
    getSession().info(getString(""String_Node_Str""));
    target.add(feedbackPanel);
  }
}"
60624,"public <T extends AbstractAttributableTO>ResultSetPanel(final String id,final boolean filtered,final NodeCond searchCond,final PageReference callerRef){
  super(id);
  setOutputMarkupId(true);
  page=(BasePage)callerRef.getPage();
  this.filtered=filtered;
  this.filter=searchCond;
  this.feedbackPanel=page.getFeedbackPanel();
  editmodal.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editmodal.setInitialHeight(EDIT_MODAL_WIN_HEIGHT);
  editmodal.setInitialWidth(EDIT_MODAL_WIN_WIDTH);
  editmodal.setCookieName(""String_Node_Str"");
  add(editmodal);
  displaymodal.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  displaymodal.setInitialHeight(DISPLAYATTRS_MODAL_WIN_HEIGHT);
  displaymodal.setInitialWidth(DISPLAYATTRS_MODAL_WIN_WIDTH);
  displaymodal.setCookieName(""String_Node_Str"");
  add(displaymodal);
  statusmodal.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  statusmodal.setInitialHeight(STATUS_MODAL_WIN_HEIGHT);
  statusmodal.setInitialWidth(STATUS_MODAL_WIN_WIDTH);
  statusmodal.setCookieName(""String_Node_Str"");
  add(statusmodal);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.setOutputMarkupId(true);
  add(container);
  updateResultTable(false);
  AjaxLink displayAttrsLink=new IndicatingAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      displaymodal.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new DisplayAttributesModalPage(page.getPageReference(),displaymodal);
        }
      }
);
      displaymodal.show(target);
    }
  }
;
  displayAttrsLink.add(new Behavior(){
    private static final long serialVersionUID=1469628524240283489L;
    @Override public void onComponentTag(    final Component component,    final ComponentTag tag){
      if (resultTable.getRowCount() > rows) {
        tag.remove(""String_Node_Str"");
        tag.put(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        tag.remove(""String_Node_Str"");
        tag.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  MetaDataRoleAuthorizationStrategy.authorize(displayAttrsLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  container.add(displayAttrsLink);
  final Form paginatorForm=new Form(""String_Node_Str"");
  container.add(paginatorForm);
  final DropDownChoice<Integer> rowsChooser=new DropDownChoice<Integer>(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),preferences.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      preferences.set(getRequest(),getResponse(),Constants.PREF_USERS_PAGINATOR_ROWS,String.valueOf(rows));
      final EventDataWrapper data=new EventDataWrapper();
      data.setTarget(target);
      send(getParent(),Broadcast.BREADTH,data);
    }
  }
);
  paginatorForm.add(rowsChooser);
  setWindowClosedReloadCallback(statusmodal);
  setWindowClosedReloadCallback(editmodal);
  setWindowClosedReloadCallback(displaymodal);
}","public <T extends AbstractAttributableTO>ResultSetPanel(final String id,final boolean filtered,final NodeCond searchCond,final PageReference callerRef){
  super(id);
  setOutputMarkupId(true);
  page=(BasePage)callerRef.getPage();
  this.filtered=filtered;
  this.filter=searchCond;
  this.feedbackPanel=page.getFeedbackPanel();
  editmodal.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editmodal.setInitialHeight(EDIT_MODAL_WIN_HEIGHT);
  editmodal.setInitialWidth(EDIT_MODAL_WIN_WIDTH);
  editmodal.setCookieName(""String_Node_Str"");
  add(editmodal);
  displaymodal.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  displaymodal.setInitialHeight(DISPLAYATTRS_MODAL_WIN_HEIGHT);
  displaymodal.setInitialWidth(DISPLAYATTRS_MODAL_WIN_WIDTH);
  displaymodal.setCookieName(""String_Node_Str"");
  add(displaymodal);
  statusmodal.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  statusmodal.setInitialHeight(STATUS_MODAL_WIN_HEIGHT);
  statusmodal.setInitialWidth(STATUS_MODAL_WIN_WIDTH);
  statusmodal.setCookieName(""String_Node_Str"");
  add(statusmodal);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.setOutputMarkupId(true);
  add(container);
  rows=preferences.getPaginatorRows(getRequest(),Constants.PREF_USERS_PAGINATOR_ROWS);
  updateResultTable(false);
  final AjaxLink displayAttrsLink=new IndicatingAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      displaymodal.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new DisplayAttributesModalPage(page.getPageReference(),displaymodal);
        }
      }
);
      displaymodal.show(target);
    }
  }
;
  displayAttrsLink.add(new Behavior(){
    private static final long serialVersionUID=1469628524240283489L;
    @Override public void onComponentTag(    final Component component,    final ComponentTag tag){
      if (resultTable.getRowCount() > rows) {
        tag.remove(""String_Node_Str"");
        tag.put(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        tag.remove(""String_Node_Str"");
        tag.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  MetaDataRoleAuthorizationStrategy.authorize(displayAttrsLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  container.add(displayAttrsLink);
  final Form paginatorForm=new Form(""String_Node_Str"");
  container.add(paginatorForm);
  final DropDownChoice<Integer> rowsChooser=new DropDownChoice<Integer>(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),preferences.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      preferences.set(getRequest(),getResponse(),Constants.PREF_USERS_PAGINATOR_ROWS,String.valueOf(rows));
      final EventDataWrapper data=new EventDataWrapper();
      data.setTarget(target);
      data.setRows(rows);
      send(getParent(),Broadcast.BREADTH,data);
    }
  }
);
  paginatorForm.add(rowsChooser);
  setWindowClosedReloadCallback(statusmodal);
  setWindowClosedReloadCallback(editmodal);
  setWindowClosedReloadCallback(displaymodal);
}"
60625,"@Override public void onEvent(final IEvent<?> event){
  if (event.getPayload() instanceof EventDataWrapper) {
    final EventDataWrapper data=(EventDataWrapper)event.getPayload();
    final AjaxRequestTarget target=data.getTarget();
    updateResultTable(data.isCreate());
    target.add(container);
  }
}","@Override public void onEvent(final IEvent<?> event){
  if (event.getPayload() instanceof EventDataWrapper) {
    final EventDataWrapper data=(EventDataWrapper)event.getPayload();
    if (data.getRows() < 1) {
      updateResultTable(data.isCreate());
    }
 else {
      updateResultTable(data.isCreate(),data.getRows());
    }
    data.getTarget().add(container);
  }
}"
60626,"@Override protected void onUpdate(final AjaxRequestTarget target){
  preferences.set(getRequest(),getResponse(),Constants.PREF_USERS_PAGINATOR_ROWS,String.valueOf(rows));
  final EventDataWrapper data=new EventDataWrapper();
  data.setTarget(target);
  send(getParent(),Broadcast.BREADTH,data);
}","@Override protected void onUpdate(final AjaxRequestTarget target){
  preferences.set(getRequest(),getResponse(),Constants.PREF_USERS_PAGINATOR_ROWS,String.valueOf(rows));
  final EventDataWrapper data=new EventDataWrapper();
  data.setTarget(target);
  data.setRows(rows);
  send(getParent(),Broadcast.BREADTH,data);
}"
60627,"@Override protected List<String> load(){
  final List<String> resourceNames=new ArrayList<String>();
  for (  ResourceTO resourceTO : resourceRestClient.getAllResources()) {
    resourceNames.add(resourceTO.getName());
  }
  return resourceNames;
}","@Override protected Object load(){
  final List<String> resourceNames=new ArrayList<String>();
  for (  ResourceTO resourceTO : client.getAllResources()) {
    resourceNames.add(resourceTO.getName());
  }
  return resourceNames;
}"
60628,"public <T extends AbstractAttributableTO>ResourcesPanel(final String id,final T entityTO){
  super(id);
  final AjaxPalettePanel resourcesPalette=new AjaxPalettePanel(""String_Node_Str"",new PropertyModel(entityTO,""String_Node_Str""),new ListModel<String>(allResources.getObject()));
  add(resourcesPalette);
}","public <T extends AbstractAttributableTO>ResourcesPanel(final String id,final T entityTO){
  super(id);
  final IModel<List<String>> allResources=new allResourcesModel(resourceRestClient);
  final AjaxPalettePanel resourcesPalette=new AjaxPalettePanel(""String_Node_Str"",new PropertyModel(entityTO,""String_Node_Str""),new ListModel<String>(allResources.getObject()));
  add(resourcesPalette);
}"
60629,"@Test public void findAll(){
  List<TaskExec> list=taskExecDAO.findAll(PropagationTask.class);
  assertEquals(1,list.size());
  list=taskExecDAO.findAll(SchedTask.class);
  assertEquals(0,list.size());
  list=taskExecDAO.findAll(SyncTask.class);
  assertEquals(0,list.size());
  list=taskExecDAO.findAll(NotificationTask.class);
  assertEquals(0,list.size());
}","@Test public void findAll(){
  List<TaskExec> list=taskExecDAO.findAll(PropagationTask.class);
  assertEquals(1,list.size());
  list=taskExecDAO.findAll(SchedTask.class);
  assertEquals(0,list.size());
  list=taskExecDAO.findAll(SyncTask.class);
  assertEquals(0,list.size());
  list=taskExecDAO.findAll(NotificationTask.class);
  assertEquals(1,list.size());
}"
60630,"private Object getPropertyValue(final ConnConfProperty property){
  Object value=null;
  final List<Object> values=property.getValues();
  if (values != null && !values.isEmpty()) {
    try {
      final Class propertySchemaClass=ClassUtils.forName(property.getSchema().getType(),ClassUtils.getDefaultClassLoader());
      if (GuardedString.class.equals(propertySchemaClass)) {
        value=new GuardedString((values.get(0).toString()).toCharArray());
      }
 else       if (GuardedByteArray.class.equals(propertySchemaClass)) {
        value=new GuardedByteArray((byte[])values.get(0));
      }
 else       if (Character.class.equals(propertySchemaClass) || char.class.equals(propertySchemaClass)) {
        value=StringUtils.hasText((String)values.get(0)) ? values.get(0).toString().charAt(0) : null;
      }
 else       if (Integer.class.equals(propertySchemaClass) || int.class.equals(propertySchemaClass)) {
        value=Integer.parseInt(values.get(0).toString());
      }
 else       if (Long.class.equals(propertySchemaClass) || long.class.equals(propertySchemaClass)) {
        value=Long.parseLong(values.get(0).toString());
      }
 else       if (Float.class.equals(propertySchemaClass) || float.class.equals(propertySchemaClass)) {
        value=Float.parseFloat(values.get(0).toString());
      }
 else       if (Double.class.equals(propertySchemaClass) || double.class.equals(propertySchemaClass)) {
        value=Double.parseDouble(values.get(0).toString());
      }
 else       if (Boolean.class.equals(propertySchemaClass) || boolean.class.equals(propertySchemaClass)) {
        value=Boolean.parseBoolean(values.get(0).toString());
      }
 else       if (URI.class.equals(propertySchemaClass)) {
        value=URI.create(values.get(0).toString());
      }
 else       if (File.class.equals(propertySchemaClass)) {
        value=new File(values.get(0).toString());
      }
 else       if (String[].class.equals(propertySchemaClass)) {
        value=values.toArray(new String[]{});
      }
 else {
        value=values.get(0).toString();
      }
    }
 catch (    Throwable t) {
      LOG.error(""String_Node_Str"",property,t);
    }
  }
  return value;
}","private Object getPropertyValue(final ConnConfProperty property){
  Object value=null;
  final List<Object> values=property.getValues();
  if (values != null && !values.isEmpty()) {
    try {
      final Class propertySchemaClass=ClassUtils.forName(property.getSchema().getType(),ClassUtils.getDefaultClassLoader());
      if (GuardedString.class.equals(propertySchemaClass)) {
        value=new GuardedString((values.get(0).toString()).toCharArray());
      }
 else       if (GuardedByteArray.class.equals(propertySchemaClass)) {
        value=new GuardedByteArray((byte[])values.get(0));
      }
 else       if (Character.class.equals(propertySchemaClass) || Character.TYPE.equals(propertySchemaClass)) {
        value=values.get(0) != null && !values.get(0).toString().isEmpty() ? values.get(0).toString().charAt(0) : null;
      }
 else       if (Integer.class.equals(propertySchemaClass) || Integer.TYPE.equals(propertySchemaClass)) {
        value=Integer.parseInt(values.get(0).toString());
      }
 else       if (Long.class.equals(propertySchemaClass) || Long.TYPE.equals(propertySchemaClass)) {
        value=Long.parseLong(values.get(0).toString());
      }
 else       if (Float.class.equals(propertySchemaClass) || Float.TYPE.equals(propertySchemaClass)) {
        value=Float.parseFloat(values.get(0).toString());
      }
 else       if (Double.class.equals(propertySchemaClass) || Double.TYPE.equals(propertySchemaClass)) {
        value=Double.parseDouble(values.get(0).toString());
      }
 else       if (Boolean.class.equals(propertySchemaClass) || Boolean.TYPE.equals(propertySchemaClass)) {
        value=Boolean.parseBoolean(values.get(0).toString());
      }
 else       if (URI.class.equals(propertySchemaClass)) {
        value=URI.create(values.get(0).toString());
      }
 else       if (File.class.equals(propertySchemaClass)) {
        value=new File(values.get(0).toString());
      }
 else       if (String[].class.equals(propertySchemaClass)) {
        value=values.toArray(new String[]{});
      }
 else {
        value=values.get(0).toString();
      }
    }
 catch (    Throwable t) {
      LOG.error(""String_Node_Str"",property,t);
    }
  }
  return value;
}"
60631,"@Override protected void populateItem(final ListItem<SchemaMappingTO> item){
  final SchemaMappingTO mappingTO=item.getModelObject();
  final Entity entity=mappingTO.getIntMappingType() == null ? null : mappingTO.getIntMappingType().getEntity();
  attrTypes=getAttributeTypes(entity);
  item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
    private static final long serialVersionUID=7170946748485726506L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      int index=-1;
      for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
        if (mappingTO.equals(resourceTO.getMappings().get(i))) {
          index=i;
        }
      }
      if (index != -1) {
        resourceTO.getMappings().remove(index);
        item.getParent().removeAll();
        target.add(mappingContainer);
      }
    }
    @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
      return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
        private static final long serialVersionUID=-7927968187160354605L;
        @Override public CharSequence preDecorateScript(        final CharSequence script){
          return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
        }
      }
;
    }
  }
);
  final AjaxDropDownChoicePanel intAttrNames=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
  intAttrNames.setChoices(schemaNames);
  intAttrNames.setRequired(true);
  intAttrNames.setStyleShet(fieldStyle);
  setAttrNames(mappingTO.getIntMappingType(),intAttrNames);
  item.add(intAttrNames);
  final AjaxDropDownChoicePanel typesPanel=new AjaxDropDownChoicePanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel<IntMappingType>(mappingTO,""String_Node_Str""),false);
  typesPanel.getField().add(new AjaxFormComponentUpdatingBehavior(onchange){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      setAttrNames((IntMappingType)typesPanel.getModelObject(),intAttrNames);
      target.add(intAttrNames);
    }
  }
);
  typesPanel.setRequired(true);
  typesPanel.setChoices(attrTypes);
  typesPanel.setStyleShet(fieldStyle);
  item.add(typesPanel);
  final AjaxDropDownChoicePanel mappingTypesPanel=new AjaxDropDownChoicePanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new Model(entity),false);
  mappingTypesPanel.setChoices(Arrays.asList(Entity.values()));
  mappingTypesPanel.setStyleShet(defFieldStyle);
  item.add(mappingTypesPanel);
  mappingTypesPanel.getField().add(new AjaxFormComponentUpdatingBehavior(onchange){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      attrTypes=getAttributeTypes((Entity)mappingTypesPanel.getModelObject());
      typesPanel.setChoices(attrTypes);
      intAttrNames.setChoices(Collections.EMPTY_LIST);
      target.add(typesPanel.getField());
      target.add(intAttrNames.getField());
    }
  }
);
  final FieldPanel extAttrName;
  if (schemaNames.isEmpty()) {
    extAttrName=new AjaxTextFieldPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel<String>(mappingTO,""String_Node_Str""),true);
  }
 else {
    extAttrName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel(mappingTO,""String_Node_Str""),true);
    ((AjaxDropDownChoicePanel)extAttrName).setChoices(schemaNames);
  }
  boolean required=mappingTO != null && !mappingTO.isAccountid() && !mappingTO.isPassword();
  extAttrName.setRequired(required);
  extAttrName.setEnabled(required);
  extAttrName.setStyleShet(fieldStyle);
  item.add(extAttrName);
  final AjaxTextFieldPanel mandatory=new AjaxTextFieldPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel(mappingTO,""String_Node_Str""),true);
  mandatory.setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
  mandatory.setStyleShet(shortFieldStyle);
  item.add(mandatory);
  final AjaxCheckBoxPanel accountId=new AjaxCheckBoxPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel(mappingTO,""String_Node_Str""),false);
  accountId.getField().add(new AjaxFormComponentUpdatingBehavior(onchange){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      extAttrName.setEnabled(!accountId.getModelObject() && !mappingTO.isPassword());
      extAttrName.setModelObject(null);
      extAttrName.setRequired(!accountId.getModelObject());
      target.add(extAttrName);
    }
  }
);
  item.add(accountId);
  final AjaxCheckBoxPanel password=new AjaxCheckBoxPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel(mappingTO,""String_Node_Str""),true);
  password.getField().add(new AjaxFormComponentUpdatingBehavior(onchange){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      extAttrName.setEnabled(!mappingTO.isAccountid() && !password.getModelObject());
      extAttrName.setModelObject(null);
      extAttrName.setRequired(!password.getModelObject());
      target.add(extAttrName);
    }
  }
);
  item.add(password);
}","@Override protected void populateItem(final ListItem<SchemaMappingTO> item){
  final SchemaMappingTO mappingTO=item.getModelObject();
  final AttributableType entity=mappingTO.getIntMappingType() == null ? null : mappingTO.getIntMappingType().getAttributableType();
  attrTypes=getAttributeTypes(entity);
  item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
    private static final long serialVersionUID=7170946748485726506L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      int index=-1;
      for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
        if (mappingTO.equals(resourceTO.getMappings().get(i))) {
          index=i;
        }
      }
      if (index != -1) {
        resourceTO.getMappings().remove(index);
        item.getParent().removeAll();
        target.add(mappingContainer);
      }
    }
    @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
      return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
        private static final long serialVersionUID=-7927968187160354605L;
        @Override public CharSequence preDecorateScript(        final CharSequence script){
          return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
        }
      }
;
    }
  }
);
  final AjaxDropDownChoicePanel intAttrNames=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
  intAttrNames.setChoices(schemaNames);
  intAttrNames.setRequired(true);
  intAttrNames.setStyleShet(fieldStyle);
  setAttrNames(mappingTO.getIntMappingType(),intAttrNames);
  item.add(intAttrNames);
  final AjaxDropDownChoicePanel typesPanel=new AjaxDropDownChoicePanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel<IntMappingType>(mappingTO,""String_Node_Str""),false);
  typesPanel.getField().add(new AjaxFormComponentUpdatingBehavior(onchange){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      setAttrNames((IntMappingType)typesPanel.getModelObject(),intAttrNames);
      target.add(intAttrNames);
    }
  }
);
  typesPanel.setRequired(true);
  typesPanel.setChoices(attrTypes);
  typesPanel.setStyleShet(fieldStyle);
  item.add(typesPanel);
  final AjaxDropDownChoicePanel mappingTypesPanel=new AjaxDropDownChoicePanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new Model(entity),false);
  mappingTypesPanel.setChoices(Arrays.asList(AttributableType.values()));
  mappingTypesPanel.setStyleShet(defFieldStyle);
  item.add(mappingTypesPanel);
  mappingTypesPanel.getField().add(new AjaxFormComponentUpdatingBehavior(onchange){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      attrTypes=getAttributeTypes((AttributableType)mappingTypesPanel.getModelObject());
      typesPanel.setChoices(attrTypes);
      intAttrNames.setChoices(Collections.EMPTY_LIST);
      target.add(typesPanel.getField());
      target.add(intAttrNames.getField());
    }
  }
);
  final FieldPanel extAttrName;
  if (schemaNames.isEmpty()) {
    extAttrName=new AjaxTextFieldPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel<String>(mappingTO,""String_Node_Str""),true);
  }
 else {
    extAttrName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel(mappingTO,""String_Node_Str""),true);
    ((AjaxDropDownChoicePanel)extAttrName).setChoices(schemaNames);
  }
  boolean required=mappingTO != null && !mappingTO.isAccountid() && !mappingTO.isPassword();
  extAttrName.setRequired(required);
  extAttrName.setEnabled(required);
  extAttrName.setStyleShet(fieldStyle);
  item.add(extAttrName);
  final AjaxTextFieldPanel mandatory=new AjaxTextFieldPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel(mappingTO,""String_Node_Str""),true);
  mandatory.setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
  mandatory.setStyleShet(shortFieldStyle);
  item.add(mandatory);
  final AjaxCheckBoxPanel accountId=new AjaxCheckBoxPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel(mappingTO,""String_Node_Str""),false);
  accountId.getField().add(new AjaxFormComponentUpdatingBehavior(onchange){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      extAttrName.setEnabled(!accountId.getModelObject() && !mappingTO.isPassword());
      extAttrName.setModelObject(null);
      extAttrName.setRequired(!accountId.getModelObject());
      target.add(extAttrName);
    }
  }
);
  item.add(accountId);
  final AjaxCheckBoxPanel password=new AjaxCheckBoxPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel(mappingTO,""String_Node_Str""),true);
  password.getField().add(new AjaxFormComponentUpdatingBehavior(onchange){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      extAttrName.setEnabled(!mappingTO.isAccountid() && !password.getModelObject());
      extAttrName.setModelObject(null);
      extAttrName.setRequired(!password.getModelObject());
      target.add(extAttrName);
    }
  }
);
  item.add(password);
}"
60632,"/** 
 * Get all attribute types from a selected attribute type.
 * @param entity entity.
 * @return all attribute types.
 */
private List<IntMappingType> getAttributeTypes(final Entity entity){
  final List<IntMappingType> res=new ArrayList<IntMappingType>();
  if (entity != null) {
    final EnumSet types=IntMappingType.getAttributeTypes(Entity.valueOf(entity.toString()));
    for (    Object type : types) {
      res.add(IntMappingType.valueOf(type.toString()));
    }
  }
  return res;
}","/** 
 * Get all attribute types from a selected attribute type.
 * @param entity entity.
 * @return all attribute types.
 */
private List<IntMappingType> getAttributeTypes(final AttributableType entity){
  final List<IntMappingType> res=new ArrayList<IntMappingType>();
  if (entity != null) {
    final EnumSet types=IntMappingType.getAttributeTypes(AttributableType.valueOf(entity.toString()));
    for (    Object type : types) {
      res.add(IntMappingType.valueOf(type.toString()));
    }
  }
  return res;
}"
60633,"/** 
 * Attribute Mapping Panel.
 * @param panelid panel id.
 * @param resourceTO external resource.
 * @param createFlag create flag.
 */
public ResourceMappingPanel(final String panelid,final ResourceTO resourceTO,final boolean createFlag){
  super(panelid);
  setOutputMarkupId(true);
  this.resourceTO=resourceTO;
  this.createFlag=createFlag;
  initResourceSchemaNames();
  final AjaxTextFieldPanel accountLink=new AjaxTextFieldPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  add(accountLink);
  mappingContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingContainer.setOutputMarkupId(true);
  add(mappingContainer);
  mappings=new ListView<SchemaMappingTO>(""String_Node_Str"",resourceTO.getMappings()){
    /** 
 * Serial version UID.
 */
    private static final long serialVersionUID=4949588177564901031L;
    @Override protected void populateItem(    final ListItem<SchemaMappingTO> item){
      final SchemaMappingTO mappingTO=item.getModelObject();
      final Entity entity=mappingTO.getIntMappingType() == null ? null : mappingTO.getIntMappingType().getEntity();
      attrTypes=getAttributeTypes(entity);
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
        private static final long serialVersionUID=7170946748485726506L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int index=-1;
          for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
            if (mappingTO.equals(resourceTO.getMappings().get(i))) {
              index=i;
            }
          }
          if (index != -1) {
            resourceTO.getMappings().remove(index);
            item.getParent().removeAll();
            target.add(mappingContainer);
          }
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=-7927968187160354605L;
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      final AjaxDropDownChoicePanel intAttrNames=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
      intAttrNames.setChoices(schemaNames);
      intAttrNames.setRequired(true);
      intAttrNames.setStyleShet(fieldStyle);
      setAttrNames(mappingTO.getIntMappingType(),intAttrNames);
      item.add(intAttrNames);
      final AjaxDropDownChoicePanel typesPanel=new AjaxDropDownChoicePanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel<IntMappingType>(mappingTO,""String_Node_Str""),false);
      typesPanel.getField().add(new AjaxFormComponentUpdatingBehavior(onchange){
        private static final long serialVersionUID=-1107858522700306810L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          setAttrNames((IntMappingType)typesPanel.getModelObject(),intAttrNames);
          target.add(intAttrNames);
        }
      }
);
      typesPanel.setRequired(true);
      typesPanel.setChoices(attrTypes);
      typesPanel.setStyleShet(fieldStyle);
      item.add(typesPanel);
      final AjaxDropDownChoicePanel mappingTypesPanel=new AjaxDropDownChoicePanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new Model(entity),false);
      mappingTypesPanel.setChoices(Arrays.asList(Entity.values()));
      mappingTypesPanel.setStyleShet(defFieldStyle);
      item.add(mappingTypesPanel);
      mappingTypesPanel.getField().add(new AjaxFormComponentUpdatingBehavior(onchange){
        private static final long serialVersionUID=-1107858522700306810L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          attrTypes=getAttributeTypes((Entity)mappingTypesPanel.getModelObject());
          typesPanel.setChoices(attrTypes);
          intAttrNames.setChoices(Collections.EMPTY_LIST);
          target.add(typesPanel.getField());
          target.add(intAttrNames.getField());
        }
      }
);
      final FieldPanel extAttrName;
      if (schemaNames.isEmpty()) {
        extAttrName=new AjaxTextFieldPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel<String>(mappingTO,""String_Node_Str""),true);
      }
 else {
        extAttrName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel(mappingTO,""String_Node_Str""),true);
        ((AjaxDropDownChoicePanel)extAttrName).setChoices(schemaNames);
      }
      boolean required=mappingTO != null && !mappingTO.isAccountid() && !mappingTO.isPassword();
      extAttrName.setRequired(required);
      extAttrName.setEnabled(required);
      extAttrName.setStyleShet(fieldStyle);
      item.add(extAttrName);
      final AjaxTextFieldPanel mandatory=new AjaxTextFieldPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel(mappingTO,""String_Node_Str""),true);
      mandatory.setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
      mandatory.setStyleShet(shortFieldStyle);
      item.add(mandatory);
      final AjaxCheckBoxPanel accountId=new AjaxCheckBoxPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel(mappingTO,""String_Node_Str""),false);
      accountId.getField().add(new AjaxFormComponentUpdatingBehavior(onchange){
        private static final long serialVersionUID=-1107858522700306810L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          extAttrName.setEnabled(!accountId.getModelObject() && !mappingTO.isPassword());
          extAttrName.setModelObject(null);
          extAttrName.setRequired(!accountId.getModelObject());
          target.add(extAttrName);
        }
      }
);
      item.add(accountId);
      final AjaxCheckBoxPanel password=new AjaxCheckBoxPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel(mappingTO,""String_Node_Str""),true);
      password.getField().add(new AjaxFormComponentUpdatingBehavior(onchange){
        private static final long serialVersionUID=-1107858522700306810L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          extAttrName.setEnabled(!mappingTO.isAccountid() && !password.getModelObject());
          extAttrName.setModelObject(null);
          extAttrName.setRequired(!password.getModelObject());
          target.add(extAttrName);
        }
      }
);
      item.add(password);
    }
  }
;
  mappings.setReuseItems(true);
  mappingContainer.add(mappings);
  addMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-4804368561204623354L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      resourceTO.getMappings().add(new SchemaMappingTO());
      target.add(mappingContainer);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form<?> form){
    }
  }
;
  addMappingBtn.setDefaultFormProcessing(false);
  addMappingBtn.setEnabled(!createFlag);
  mappingContainer.add(addMappingBtn);
}","/** 
 * Attribute Mapping Panel.
 * @param panelid panel id.
 * @param resourceTO external resource.
 * @param createFlag create flag.
 */
public ResourceMappingPanel(final String panelid,final ResourceTO resourceTO,final boolean createFlag){
  super(panelid);
  setOutputMarkupId(true);
  this.resourceTO=resourceTO;
  this.createFlag=createFlag;
  initResourceSchemaNames();
  final AjaxTextFieldPanel accountLink=new AjaxTextFieldPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  add(accountLink);
  mappingContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingContainer.setOutputMarkupId(true);
  add(mappingContainer);
  mappings=new ListView<SchemaMappingTO>(""String_Node_Str"",resourceTO.getMappings()){
    /** 
 * Serial version UID.
 */
    private static final long serialVersionUID=4949588177564901031L;
    @Override protected void populateItem(    final ListItem<SchemaMappingTO> item){
      final SchemaMappingTO mappingTO=item.getModelObject();
      final AttributableType entity=mappingTO.getIntMappingType() == null ? null : mappingTO.getIntMappingType().getAttributableType();
      attrTypes=getAttributeTypes(entity);
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
        private static final long serialVersionUID=7170946748485726506L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int index=-1;
          for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
            if (mappingTO.equals(resourceTO.getMappings().get(i))) {
              index=i;
            }
          }
          if (index != -1) {
            resourceTO.getMappings().remove(index);
            item.getParent().removeAll();
            target.add(mappingContainer);
          }
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=-7927968187160354605L;
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      final AjaxDropDownChoicePanel intAttrNames=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
      intAttrNames.setChoices(schemaNames);
      intAttrNames.setRequired(true);
      intAttrNames.setStyleShet(fieldStyle);
      setAttrNames(mappingTO.getIntMappingType(),intAttrNames);
      item.add(intAttrNames);
      final AjaxDropDownChoicePanel typesPanel=new AjaxDropDownChoicePanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel<IntMappingType>(mappingTO,""String_Node_Str""),false);
      typesPanel.getField().add(new AjaxFormComponentUpdatingBehavior(onchange){
        private static final long serialVersionUID=-1107858522700306810L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          setAttrNames((IntMappingType)typesPanel.getModelObject(),intAttrNames);
          target.add(intAttrNames);
        }
      }
);
      typesPanel.setRequired(true);
      typesPanel.setChoices(attrTypes);
      typesPanel.setStyleShet(fieldStyle);
      item.add(typesPanel);
      final AjaxDropDownChoicePanel mappingTypesPanel=new AjaxDropDownChoicePanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new Model(entity),false);
      mappingTypesPanel.setChoices(Arrays.asList(AttributableType.values()));
      mappingTypesPanel.setStyleShet(defFieldStyle);
      item.add(mappingTypesPanel);
      mappingTypesPanel.getField().add(new AjaxFormComponentUpdatingBehavior(onchange){
        private static final long serialVersionUID=-1107858522700306810L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          attrTypes=getAttributeTypes((AttributableType)mappingTypesPanel.getModelObject());
          typesPanel.setChoices(attrTypes);
          intAttrNames.setChoices(Collections.EMPTY_LIST);
          target.add(typesPanel.getField());
          target.add(intAttrNames.getField());
        }
      }
);
      final FieldPanel extAttrName;
      if (schemaNames.isEmpty()) {
        extAttrName=new AjaxTextFieldPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel<String>(mappingTO,""String_Node_Str""),true);
      }
 else {
        extAttrName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel(mappingTO,""String_Node_Str""),true);
        ((AjaxDropDownChoicePanel)extAttrName).setChoices(schemaNames);
      }
      boolean required=mappingTO != null && !mappingTO.isAccountid() && !mappingTO.isPassword();
      extAttrName.setRequired(required);
      extAttrName.setEnabled(required);
      extAttrName.setStyleShet(fieldStyle);
      item.add(extAttrName);
      final AjaxTextFieldPanel mandatory=new AjaxTextFieldPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel(mappingTO,""String_Node_Str""),true);
      mandatory.setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
      mandatory.setStyleShet(shortFieldStyle);
      item.add(mandatory);
      final AjaxCheckBoxPanel accountId=new AjaxCheckBoxPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel(mappingTO,""String_Node_Str""),false);
      accountId.getField().add(new AjaxFormComponentUpdatingBehavior(onchange){
        private static final long serialVersionUID=-1107858522700306810L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          extAttrName.setEnabled(!accountId.getModelObject() && !mappingTO.isPassword());
          extAttrName.setModelObject(null);
          extAttrName.setRequired(!accountId.getModelObject());
          target.add(extAttrName);
        }
      }
);
      item.add(accountId);
      final AjaxCheckBoxPanel password=new AjaxCheckBoxPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str"",""String_Node_Str"").getObject(),new PropertyModel(mappingTO,""String_Node_Str""),true);
      password.getField().add(new AjaxFormComponentUpdatingBehavior(onchange){
        private static final long serialVersionUID=-1107858522700306810L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          extAttrName.setEnabled(!mappingTO.isAccountid() && !password.getModelObject());
          extAttrName.setModelObject(null);
          extAttrName.setRequired(!password.getModelObject());
          target.add(extAttrName);
        }
      }
);
      item.add(password);
    }
  }
;
  mappings.setReuseItems(true);
  mappingContainer.add(mappings);
  addMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-4804368561204623354L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      resourceTO.getMappings().add(new SchemaMappingTO());
      target.add(mappingContainer);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form<?> form){
    }
  }
;
  addMappingBtn.setDefaultFormProcessing(false);
  addMappingBtn.setEnabled(!createFlag);
  mappingContainer.add(addMappingBtn);
}"
60634,"/** 
 * Seta attribute names for a drop down chice list.
 * @param attrType attribute type.
 * @param toBeUpdated drop down choice to be updated.
 */
private void setAttrNames(final IntMappingType attrType,final AjaxDropDownChoicePanel toBeUpdated){
  toBeUpdated.setRequired(true);
  toBeUpdated.setEnabled(true);
  if (attrType == null || attrType.getEntity() == null) {
    toBeUpdated.setChoices(Collections.EMPTY_LIST);
  }
 else {
switch (attrType) {
case UserSchema:
case RoleSchema:
case MembershipSchema:
      toBeUpdated.setChoices(schemaRestClient.getSchemaNames(attrType.getEntity().toString().toLowerCase()));
    break;
case UserDerivedSchema:
case RoleDerivedSchema:
case MembershipDerivedSchema:
  toBeUpdated.setChoices(schemaRestClient.getDerivedSchemaNames(attrType.getEntity().toString().toLowerCase()));
break;
case UserVirtualSchema:
case RoleVirtualSchema:
case MembershipVirtualSchema:
toBeUpdated.setChoices(schemaRestClient.getVirtualSchemaNames(attrType.getEntity().toString().toLowerCase()));
break;
case SyncopeUserId:
toBeUpdated.setEnabled(false);
toBeUpdated.setRequired(false);
toBeUpdated.setChoices(Collections.EMPTY_LIST);
break;
case Password:
toBeUpdated.setEnabled(false);
toBeUpdated.setRequired(false);
toBeUpdated.setChoices(Collections.EMPTY_LIST);
break;
case Username:
toBeUpdated.setEnabled(false);
toBeUpdated.setRequired(false);
toBeUpdated.setChoices(Collections.EMPTY_LIST);
break;
default :
toBeUpdated.setRequired(false);
toBeUpdated.setEnabled(false);
toBeUpdated.setChoices(Collections.EMPTY_LIST);
}
}
}","/** 
 * Seta attribute names for a drop down chice list.
 * @param attrType attribute type.
 * @param toBeUpdated drop down choice to be updated.
 */
private void setAttrNames(final IntMappingType attrType,final AjaxDropDownChoicePanel toBeUpdated){
  toBeUpdated.setRequired(true);
  toBeUpdated.setEnabled(true);
  if (attrType == null || attrType.getAttributableType() == null) {
    toBeUpdated.setChoices(Collections.EMPTY_LIST);
  }
 else {
switch (attrType) {
case UserSchema:
case RoleSchema:
case MembershipSchema:
      toBeUpdated.setChoices(schemaRestClient.getSchemaNames(attrType.getAttributableType().toString().toLowerCase()));
    break;
case UserDerivedSchema:
case RoleDerivedSchema:
case MembershipDerivedSchema:
  toBeUpdated.setChoices(schemaRestClient.getDerivedSchemaNames(attrType.getAttributableType().toString().toLowerCase()));
break;
case UserVirtualSchema:
case RoleVirtualSchema:
case MembershipVirtualSchema:
toBeUpdated.setChoices(schemaRestClient.getVirtualSchemaNames(attrType.getAttributableType().toString().toLowerCase()));
break;
case SyncopeUserId:
toBeUpdated.setEnabled(false);
toBeUpdated.setRequired(false);
toBeUpdated.setChoices(Collections.EMPTY_LIST);
break;
case Password:
toBeUpdated.setEnabled(false);
toBeUpdated.setRequired(false);
toBeUpdated.setChoices(Collections.EMPTY_LIST);
break;
case Username:
toBeUpdated.setEnabled(false);
toBeUpdated.setRequired(false);
toBeUpdated.setChoices(Collections.EMPTY_LIST);
break;
default :
toBeUpdated.setRequired(false);
toBeUpdated.setEnabled(false);
toBeUpdated.setChoices(Collections.EMPTY_LIST);
}
}
}"
60635,"protected <T extends AbstractAttributable>List<Object> retrieveValues(final T attributable,final String attributeName,final IntMappingType intMappingType){
  LOG.debug(""String_Node_Str"",new Object[]{attributable,attributeName});
  ConfigurableApplicationContext context=ApplicationContextManager.getApplicationContext();
  ConnInstanceLoader connInstanceLoader=context.getBean(ConnInstanceLoader.class);
  if (connInstanceLoader == null) {
    LOG.error(""String_Node_Str"");
    return null;
  }
  List<Object> virAttrValues=new ArrayList<Object>();
  for (  ExternalResource resource : attributable.getResources()) {
    LOG.debug(""String_Node_Str"",resource);
    Set<String> attributeNames=new HashSet<String>();
    String accountId=null;
    for (    SchemaMapping mapping : resource.getMappings()) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + mapping.getId() + ""String_Node_Str""+ mapping.getIntAttrName()+ ""String_Node_Str""+ mapping.getExtAttrName()+ ""String_Node_Str""+ mapping.getIntMappingType()+ ""String_Node_Str""+ mapping.getMandatoryCondition()+ ""String_Node_Str""+ mapping.isAccountid()+ ""String_Node_Str""+ mapping.isPassword());
      }
      if (attributeName.equals(mapping.getIntAttrName()) && mapping.getIntMappingType() == intMappingType) {
        attributeNames.add(mapping.getExtAttrName());
      }
      if (mapping.isAccountid()) {
        try {
          accountId=attributable.getAttribute(mapping.getIntAttrName()).getValuesAsStrings().get(0);
        }
 catch (        NullPointerException e) {
          LOG.debug(""String_Node_Str"",e);
        }
      }
    }
    if (attributeNames != null && accountId != null) {
      LOG.debug(""String_Node_Str"",accountId);
      try {
        ConnectorFacadeProxy connector=connInstanceLoader.getConnector(resource);
        Set<Attribute> attributes=connector.getObjectAttributes(ObjectClass.ACCOUNT,new Uid(accountId),null,attributeNames);
        LOG.debug(""String_Node_Str"",attributes);
        for (        Attribute attribute : attributes) {
          virAttrValues.addAll(attribute.getValue());
        }
      }
 catch (      Exception e) {
        LOG.warn(""String_Node_Str"",resource.getName(),e);
      }
    }
  }
  return virAttrValues;
}","protected <T extends AbstractAttributable>List<Object> retrieveValues(final T attributable,final String attributeName,final IntMappingType intMappingType){
  LOG.debug(""String_Node_Str"",new Object[]{attributable,attributeName});
  List<Object> virAttrValues=new ArrayList<Object>();
  if (attributable == null) {
    return virAttrValues;
  }
  ConfigurableApplicationContext context=ApplicationContextManager.getApplicationContext();
  ConnInstanceLoader connInstanceLoader=context.getBean(ConnInstanceLoader.class);
  if (connInstanceLoader == null) {
    LOG.error(""String_Node_Str"");
    return null;
  }
  for (  ExternalResource resource : attributable.getResources()) {
    LOG.debug(""String_Node_Str"",resource);
    Set<String> attributeNames=new HashSet<String>();
    String accountId=null;
    for (    SchemaMapping mapping : resource.getMappings()) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + mapping.getId() + ""String_Node_Str""+ mapping.getIntAttrName()+ ""String_Node_Str""+ mapping.getExtAttrName()+ ""String_Node_Str""+ mapping.getIntMappingType()+ ""String_Node_Str""+ mapping.getMandatoryCondition()+ ""String_Node_Str""+ mapping.isAccountid()+ ""String_Node_Str""+ mapping.isPassword());
      }
      if (attributeName.equals(mapping.getIntAttrName()) && mapping.getIntMappingType() == intMappingType) {
        attributeNames.add(mapping.getExtAttrName());
      }
      if (mapping.isAccountid()) {
        try {
          accountId=attributable.getAttribute(mapping.getIntAttrName()).getValuesAsStrings().get(0);
        }
 catch (        NullPointerException e) {
          LOG.debug(""String_Node_Str"",e);
        }
      }
    }
    if (attributeNames != null && accountId != null) {
      LOG.debug(""String_Node_Str"",accountId);
      try {
        final OperationOptionsBuilder oob=new OperationOptionsBuilder();
        oob.setAttributesToGet(attributeNames);
        final ConnectorFacadeProxy connector=connInstanceLoader.getConnector(resource);
        Set<Attribute> attributes=connector.getObjectAttributes(ObjectClass.ACCOUNT,new Uid(accountId),oob.build(),attributeNames);
        LOG.debug(""String_Node_Str"",attributes);
        for (        Attribute attribute : attributes) {
          virAttrValues.addAll(attribute.getValue());
        }
      }
 catch (      Exception e) {
        LOG.warn(""String_Node_Str"",resource.getName(),e);
      }
    }
  }
  return virAttrValues;
}"
60636,"/** 
 * Find users by derived attribute value. This method could fail if one or more string literals contained into the derived attribute value provided derive from identifier (schema name) replacement. When you are going to specify a derived attribute expression you must be quite sure that string literals used to build the expression cannot be found into the attribute values used to replace attribute schema names used as identifiers.
 * @param schemaName derived schema name.
 * @param value derived attribute value.
 * @return list of users.
 * @throws InvalidSearchConditionException in case of errors retrievingschema names used to buid the derived schema expression.
 */
@Override public List<SyncopeUser> findByDerAttrValue(final String schemaName,final String value) throws InvalidSearchConditionException {
  UDerSchema schema=derSchemaDAO.find(schemaName,UDerSchema.class);
  if (schema == null) {
    LOG.error(""String_Node_Str"",schemaName);
    return Collections.EMPTY_LIST;
  }
  final StringBuilder querystring=new StringBuilder();
  boolean subquery=false;
  for (  String clause : getWhereClause(schema.getExpression(),value)) {
    if (querystring.length() > 0) {
      subquery=true;
      querystring.append(""String_Node_Str"");
    }
    querystring.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(clause);
    if (subquery) {
      querystring.append(')');
    }
  }
  LOG.debug(""String_Node_Str"",querystring);
  final Query query=entityManager.createNativeQuery(querystring.toString());
  final List<SyncopeUser> result=new ArrayList<SyncopeUser>();
  SyncopeUser user;
  for (  Object userId : query.getResultList()) {
    user=find(Long.parseLong(userId.toString()));
    if (!result.contains(user)) {
      result.add(user);
    }
  }
  return result;
}","/** 
 * Find users by derived attribute value. This method could fail if one or more string literals contained into the derived attribute value provided derive from identifier (schema name) replacement. When you are going to specify a derived attribute expression you must be quite sure that string literals used to build the expression cannot be found into the attribute values used to replace attribute schema names used as identifiers.
 * @param schemaName derived schema name.
 * @param value derived attribute value.
 * @return list of users.
 * @throws InvalidSearchConditionException in case of errors retrieving schema names used to buid the derived schemaexpression.
 */
@Override public List<SyncopeUser> findByDerAttrValue(final String schemaName,final String value) throws InvalidSearchConditionException {
  UDerSchema schema=derSchemaDAO.find(schemaName,UDerSchema.class);
  if (schema == null) {
    LOG.error(""String_Node_Str"",schemaName);
    return Collections.EMPTY_LIST;
  }
  final StringBuilder querystring=new StringBuilder();
  boolean subquery=false;
  for (  String clause : getWhereClause(schema.getExpression(),value)) {
    if (querystring.length() > 0) {
      subquery=true;
      querystring.append(""String_Node_Str"");
    }
    querystring.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(clause);
    if (subquery) {
      querystring.append(')');
    }
  }
  LOG.debug(""String_Node_Str"",querystring);
  final Query query=entityManager.createNativeQuery(querystring.toString());
  final List<SyncopeUser> result=new ArrayList<SyncopeUser>();
  SyncopeUser user;
  for (  Object userId : query.getResultList()) {
    user=find(Long.parseLong(userId.toString()));
    if (!result.contains(user)) {
      result.add(user);
    }
  }
  return result;
}"
60637,"/** 
 * Generate one where clause for each different attribute schema into the derived schema expression provided.
 * @param expression derived schema expression.
 * @param value derived attribute value.
 * @return where clauses to use to build the query.
 * @throws InvalidSearchConditionException in case of errors retrievingidentifiers.
 */
private Set<String> getWhereClause(final String expression,final String value) throws InvalidSearchConditionException {
  final Parser parser=new Parser(new StringReader(expression));
  final List<String> identifiers=new ArrayList<String>();
  final List<String> literals=new ArrayList<String>();
  Token token;
  while ((token=parser.getNextToken()) != null && StringUtils.hasText(token.toString())) {
    if (token.kind == ParserConstants.STRING_LITERAL) {
      literals.add(token.toString().substring(1,token.toString().length() - 1));
    }
    if (token.kind == ParserConstants.IDENTIFIER) {
      identifiers.add(token.toString());
    }
  }
  Collections.sort(literals,new Comparator<String>(){
    @Override public int compare(    String t,    String t1){
      if (t == null && t1 == null) {
        return 0;
      }
      if (t != null && t1 == null) {
        return -1;
      }
      if (t == null && t1 != null) {
        return 1;
      }
      if (t.length() == t1.length()) {
        return 0;
      }
      if (t.length() > t1.length()) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
);
  final List<String> attrValues=split(value,literals);
  if (attrValues.size() != identifiers.size()) {
    LOG.error(""String_Node_Str"");
    throw new InvalidSearchConditionException(""String_Node_Str"");
  }
  final Set<String> clauses=new HashSet<String>();
  final StringBuilder bld=new StringBuilder();
  final Set<String> used=new HashSet<String>();
  USchema schema;
  for (int i=0; i < identifiers.size(); i++) {
    if (!used.contains(identifiers.get(i))) {
      schema=schemaDAO.find(identifiers.get(i),USchema.class);
      if (schema == null) {
        LOG.error(""String_Node_Str"",identifiers.get(i));
        throw new InvalidSearchConditionException(""String_Node_Str"" + identifiers.get(i));
      }
      bld.delete(0,bld.length());
      bld.append(""String_Node_Str"");
      bld.append(""String_Node_Str"").append(identifiers.get(i)).append(""String_Node_Str"");
      bld.append(""String_Node_Str"");
      bld.append(""String_Node_Str"").append(""String_Node_Str"");
      bld.append(""String_Node_Str"");
      bld.append(""String_Node_Str"");
switch (schema.getType()) {
case Boolean:
        bld.append(""String_Node_Str"").append(attrValues.get(i)).append(""String_Node_Str"");
      break;
case Long:
    bld.append(""String_Node_Str"").append(attrValues.get(i));
  break;
case Double:
bld.append(""String_Node_Str"").append(attrValues.get(i));
break;
case Date:
bld.append(""String_Node_Str"").append(attrValues.get(i)).append(""String_Node_Str"");
break;
default :
bld.append(""String_Node_Str"").append(attrValues.get(i)).append(""String_Node_Str"");
}
bld.append(""String_Node_Str"");
used.add(identifiers.get(i));
clauses.add(bld.toString());
}
}
LOG.debug(""String_Node_Str"",clauses);
return clauses;
}","/** 
 * Generate one where clause for each different attribute schema into the derived schema expression provided.
 * @param expression derived schema expression.
 * @param value derived attribute value.
 * @return where clauses to use to build the query.
 * @throws InvalidSearchConditionException in case of errors retrieving identifiers.
 */
private Set<String> getWhereClause(final String expression,final String value) throws InvalidSearchConditionException {
  final Parser parser=new Parser(new StringReader(expression));
  final List<String> identifiers=new ArrayList<String>();
  final List<String> literals=new ArrayList<String>();
  Token token;
  while ((token=parser.getNextToken()) != null && StringUtils.hasText(token.toString())) {
    if (token.kind == ParserConstants.STRING_LITERAL) {
      literals.add(token.toString().substring(1,token.toString().length() - 1));
    }
    if (token.kind == ParserConstants.IDENTIFIER) {
      identifiers.add(token.toString());
    }
  }
  Collections.sort(literals,new Comparator<String>(){
    @Override public int compare(    String t,    String t1){
      if (t == null && t1 == null) {
        return 0;
      }
      if (t != null && t1 == null) {
        return -1;
      }
      if (t == null && t1 != null) {
        return 1;
      }
      if (t.length() == t1.length()) {
        return 0;
      }
      if (t.length() > t1.length()) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
);
  final List<String> attrValues=split(value,literals);
  if (attrValues.size() != identifiers.size()) {
    LOG.error(""String_Node_Str"");
    throw new InvalidSearchConditionException(""String_Node_Str"");
  }
  final Set<String> clauses=new HashSet<String>();
  final StringBuilder bld=new StringBuilder();
  final Set<String> used=new HashSet<String>();
  USchema schema;
  for (int i=0; i < identifiers.size(); i++) {
    if (!used.contains(identifiers.get(i))) {
      schema=schemaDAO.find(identifiers.get(i),USchema.class);
      if (schema == null) {
        LOG.error(""String_Node_Str"",identifiers.get(i));
        throw new InvalidSearchConditionException(""String_Node_Str"" + identifiers.get(i));
      }
      bld.delete(0,bld.length());
      bld.append(""String_Node_Str"");
      bld.append(""String_Node_Str"").append(identifiers.get(i)).append(""String_Node_Str"");
      bld.append(""String_Node_Str"");
      bld.append(""String_Node_Str"").append(""String_Node_Str"");
      bld.append(""String_Node_Str"");
      bld.append(""String_Node_Str"");
switch (schema.getType()) {
case Boolean:
        bld.append(""String_Node_Str"").append(attrValues.get(i)).append(""String_Node_Str"");
      break;
case Long:
    bld.append(""String_Node_Str"").append(attrValues.get(i));
  break;
case Double:
bld.append(""String_Node_Str"").append(attrValues.get(i));
break;
case Date:
bld.append(""String_Node_Str"").append(attrValues.get(i)).append(""String_Node_Str"");
break;
default :
bld.append(""String_Node_Str"").append(attrValues.get(i)).append(""String_Node_Str"");
}
bld.append(""String_Node_Str"");
used.add(identifiers.get(i));
clauses.add(bld.toString());
}
}
LOG.debug(""String_Node_Str"",clauses);
return clauses;
}"
60638,"public ConnectorModalPage(final PageReference callerPageRef,final ModalWindow window,final ConnInstanceTO connectorTO,final boolean createFlag){
  super();
  selectedCapabilities=new ArrayList(createFlag ? EnumSet.noneOf(ConnectorCapability.class) : connectorTO.getCapabilities());
  final IModel<List<ConnBundleTO>> bundles=new LoadableDetachableModel<List<ConnBundleTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnBundleTO> load(){
      return restClient.getAllBundles();
    }
  }
;
  IModel<List<ConnConfProperty>> selectedBundleProperties=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      List<ConnConfProperty> result;
      if (createFlag) {
        connectorTO.setConnectorName(selectedBundleTO.getConnectorName());
        connectorTO.setVersion(selectedBundleTO.getVersion());
        result=new ArrayList<ConnConfProperty>();
        ConnConfProperty propertyTO;
        for (        ConnConfPropSchema key : selectedBundleTO.getProperties()) {
          propertyTO=new ConnConfProperty();
          propertyTO.setSchema(key);
          result.add(propertyTO);
        }
      }
 else {
        BeanUtils.copyProperties(connectorTO,selectedBundleTO,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
        result=new ArrayList<ConnConfProperty>(connectorTO.getConfiguration());
      }
      if (result != null && !result.isEmpty()) {
        Collections.sort(result);
      }
      return result;
    }
  }
;
  final AjaxTextFieldPanel connectorName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  connectorName.setOutputMarkupId(true);
  connectorName.setEnabled(false);
  final AjaxTextFieldPanel displayName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  displayName.addRequiredLabel();
  final AjaxTextFieldPanel version=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  version.setEnabled(false);
  final AjaxDropDownChoicePanel<ConnBundleTO> bundle=new AjaxDropDownChoicePanel<ConnBundleTO>(""String_Node_Str"",""String_Node_Str"",new Model(null),false);
  bundle.setStyleShet(""String_Node_Str"");
  bundle.setChoices(bundles.getObject());
  bundle.setChoiceRenderer(new ChoiceRenderer<ConnBundleTO>(){
    private static final long serialVersionUID=-1945543182376191187L;
    @Override public Object getDisplayValue(    final ConnBundleTO object){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
    @Override public String getIdValue(    final ConnBundleTO object,    final int index){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
  }
);
  ((DropDownChoice)bundle.getField()).setNullValid(true);
  bundle.setRequired(true);
  bundle.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      connectorTO.setConfiguration(new HashSet<ConnConfProperty>());
      DropDownChoice bundleChoice=(DropDownChoice)bundle.getField();
      bundleChoice.setNullValid(false);
      target.add(bundle.getField());
      target.add(propertiesContainer);
      target.add(connectorName);
      target.add(version);
    }
  }
);
  bundle.getField().setModel(new IModel<ConnBundleTO>(){
    private static final long serialVersionUID=-3736598995576061229L;
    @Override public ConnBundleTO getObject(){
      return selectedBundleTO;
    }
    @Override public void setObject(    final ConnBundleTO object){
      selectedBundleTO=object;
    }
    @Override public void detach(){
    }
  }
);
  bundle.addRequiredLabel();
  bundle.setEnabled(createFlag);
  final ListView<ConnConfProperty> propView=new ListView<ConnConfProperty>(""String_Node_Str"",selectedBundleProperties){
    private static final long serialVersionUID=9101744072914090143L;
    @Override protected void populateItem(    final ListItem<ConnConfProperty> item){
      final ConnConfProperty property=item.getModelObject();
      final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
      item.add(label);
      final FieldPanel field;
      boolean required=false;
      boolean isArray=false;
      if (GUARDED_STRING.equalsIgnoreCase(property.getSchema().getType()) || GUARDED_BYTE_ARRAY.equalsIgnoreCase(property.getSchema().getType())) {
        field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
        ((PasswordTextField)field.getField()).setResetPassword(false);
        required=property.getSchema().isRequired();
      }
 else {
        Class propertySchemaClass;
        try {
          propertySchemaClass=ClassUtils.forName(property.getSchema().getType(),ClassUtils.getDefaultClassLoader());
        }
 catch (        Exception e) {
          LOG.error(""String_Node_Str"",e);
          propertySchemaClass=String.class;
        }
        if (NUMBER.contains(propertySchemaClass)) {
          field=new AjaxNumberFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),ClassUtils.resolvePrimitiveIfNecessary(propertySchemaClass),true);
          required=property.getSchema().isRequired();
        }
 else         if (Boolean.class.equals(propertySchemaClass) || boolean.class.equals(propertySchemaClass)) {
          field=new AjaxCheckBoxPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
        }
 else {
          field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
          required=property.getSchema().isRequired();
        }
        if (String[].class.equals(propertySchemaClass)) {
          isArray=true;
        }
      }
      field.setTitle(property.getSchema().getHelpMessage());
      if (isArray) {
        field.removeRequiredLabel();
        if (property.getValues().isEmpty()) {
          property.getValues().add(null);
        }
        item.add(new MultiValueSelectorPanel<String>(""String_Node_Str"",new PropertyModel<List<String>>(property,""String_Node_Str""),String.class,field));
      }
 else {
        if (required) {
          field.addRequiredLabel();
        }
        field.setNewModel(property.getValues());
        item.add(field);
      }
      final AjaxCheckBoxPanel overridable=new AjaxCheckBoxPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel(property,""String_Node_Str""),true);
      item.add(overridable);
      connectorTO.getConfiguration().add(property);
    }
  }
;
  propertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  propertiesContainer.setOutputMarkupId(true);
  propertiesContainer.add(propView);
  Form connectorForm=new Form(""String_Node_Str"");
  connectorForm.setModel(new CompoundPropertyModel(connectorTO));
  connectorForm.add(propertiesContainer);
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
      ConnBundleTO bundleTO=(ConnBundleTO)bundle.getModelObject();
      connector.setBundleName(bundleTO.getBundleName());
      if (!selectedCapabilities.isEmpty()) {
        connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
      }
 else {
        connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
      }
      try {
        if (createFlag) {
          restClient.create(connector);
        }
 else {
          restClient.update(connector);
        }
        ((Resources)callerPageRef.getPage()).setModalResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
        ((Resources)callerPageRef.getPage()).setModalResult(false);
        LOG.error(""String_Node_Str"" + connector);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=createFlag ? xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"") : xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  connectorForm.add(connectorName);
  connectorForm.add(displayName);
  connectorForm.add(bundle);
  connectorForm.add(version);
  final IModel<List<ConnectorCapability>> capabilities=new LoadableDetachableModel<List<ConnectorCapability>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnectorCapability> load(){
      return Arrays.asList(ConnectorCapability.values());
    }
  }
;
  capabilitiesPalette=new CheckBoxMultipleChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),capabilities);
  connectorForm.add(capabilitiesPalette);
  connectorForm.add(submit);
  add(connectorForm);
}","public ConnectorModalPage(final PageReference callerPageRef,final ModalWindow window,final ConnInstanceTO connectorTO,final boolean createFlag){
  super();
  selectedCapabilities=new ArrayList(createFlag ? EnumSet.noneOf(ConnectorCapability.class) : connectorTO.getCapabilities());
  final IModel<List<ConnBundleTO>> bundles=new LoadableDetachableModel<List<ConnBundleTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnBundleTO> load(){
      return restClient.getAllBundles();
    }
  }
;
  IModel<List<ConnConfProperty>> selectedBundleProperties=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      List<ConnConfProperty> result;
      if (createFlag) {
        connectorTO.setConnectorName(selectedBundleTO.getConnectorName());
        connectorTO.setVersion(selectedBundleTO.getVersion());
        result=new ArrayList<ConnConfProperty>();
        ConnConfProperty propertyTO;
        for (        ConnConfPropSchema key : selectedBundleTO.getProperties()) {
          propertyTO=new ConnConfProperty();
          propertyTO.setSchema(key);
          result.add(propertyTO);
        }
      }
 else {
        BeanUtils.copyProperties(connectorTO,selectedBundleTO,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
        result=new ArrayList<ConnConfProperty>(connectorTO.getConfiguration());
      }
      if (result != null && !result.isEmpty()) {
        Collections.sort(result);
      }
      return result;
    }
  }
;
  final AjaxTextFieldPanel connectorName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  connectorName.setOutputMarkupId(true);
  connectorName.setEnabled(false);
  final AjaxTextFieldPanel displayName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  displayName.addRequiredLabel();
  final AjaxTextFieldPanel version=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  version.setEnabled(false);
  final AjaxDropDownChoicePanel<ConnBundleTO> bundle=new AjaxDropDownChoicePanel<ConnBundleTO>(""String_Node_Str"",""String_Node_Str"",new Model(null),true);
  bundle.setStyleShet(""String_Node_Str"");
  bundle.setChoices(bundles.getObject());
  bundle.setChoiceRenderer(new ChoiceRenderer<ConnBundleTO>(){
    private static final long serialVersionUID=-1945543182376191187L;
    @Override public Object getDisplayValue(    final ConnBundleTO object){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
    @Override public String getIdValue(    final ConnBundleTO object,    final int index){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
  }
);
  ((DropDownChoice)bundle.getField()).setNullValid(true);
  bundle.setRequired(true);
  bundle.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      connectorTO.setConfiguration(new HashSet<ConnConfProperty>());
      DropDownChoice bundleChoice=(DropDownChoice)bundle.getField();
      bundleChoice.setNullValid(false);
      target.add(bundle.getField());
      target.add(propertiesContainer);
      target.add(connectorName);
      target.add(version);
    }
  }
);
  bundle.getField().setModel(new IModel<ConnBundleTO>(){
    private static final long serialVersionUID=-3736598995576061229L;
    @Override public ConnBundleTO getObject(){
      return selectedBundleTO;
    }
    @Override public void setObject(    final ConnBundleTO object){
      selectedBundleTO=object;
    }
    @Override public void detach(){
    }
  }
);
  bundle.addRequiredLabel();
  bundle.setEnabled(createFlag);
  final ListView<ConnConfProperty> propView=new ListView<ConnConfProperty>(""String_Node_Str"",selectedBundleProperties){
    private static final long serialVersionUID=9101744072914090143L;
    @Override protected void populateItem(    final ListItem<ConnConfProperty> item){
      final ConnConfProperty property=item.getModelObject();
      final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
      item.add(label);
      final FieldPanel field;
      boolean required=false;
      boolean isArray=false;
      if (GUARDED_STRING.equalsIgnoreCase(property.getSchema().getType()) || GUARDED_BYTE_ARRAY.equalsIgnoreCase(property.getSchema().getType())) {
        field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
        ((PasswordTextField)field.getField()).setResetPassword(false);
        required=property.getSchema().isRequired();
      }
 else {
        Class propertySchemaClass;
        try {
          propertySchemaClass=ClassUtils.forName(property.getSchema().getType(),ClassUtils.getDefaultClassLoader());
        }
 catch (        Exception e) {
          LOG.error(""String_Node_Str"",e);
          propertySchemaClass=String.class;
        }
        if (NUMBER.contains(propertySchemaClass)) {
          field=new AjaxNumberFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),ClassUtils.resolvePrimitiveIfNecessary(propertySchemaClass),true);
          required=property.getSchema().isRequired();
        }
 else         if (Boolean.class.equals(propertySchemaClass) || boolean.class.equals(propertySchemaClass)) {
          field=new AjaxCheckBoxPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
        }
 else {
          field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
          required=property.getSchema().isRequired();
        }
        if (String[].class.equals(propertySchemaClass)) {
          isArray=true;
        }
      }
      field.setTitle(property.getSchema().getHelpMessage());
      if (isArray) {
        field.removeRequiredLabel();
        if (property.getValues().isEmpty()) {
          property.getValues().add(null);
        }
        item.add(new MultiValueSelectorPanel<String>(""String_Node_Str"",new PropertyModel<List<String>>(property,""String_Node_Str""),String.class,field));
      }
 else {
        if (required) {
          field.addRequiredLabel();
        }
        field.setNewModel(property.getValues());
        item.add(field);
      }
      final AjaxCheckBoxPanel overridable=new AjaxCheckBoxPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel(property,""String_Node_Str""),true);
      item.add(overridable);
      connectorTO.getConfiguration().add(property);
    }
  }
;
  final Form connectorForm=new Form(""String_Node_Str"");
  connectorForm.setModel(new CompoundPropertyModel(connectorTO));
  final Form connectorPropForm=new Form(""String_Node_Str"");
  connectorPropForm.setModel(new CompoundPropertyModel(connectorTO));
  connectorPropForm.setOutputMarkupId(true);
  propertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  propertiesContainer.setOutputMarkupId(true);
  propertiesContainer.add(connectorPropForm);
  connectorForm.add(propertiesContainer);
  connectorPropForm.add(propView);
  final AjaxLink check=new IndicatingAjaxLink(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      connectorTO.setBundleName(selectedBundleTO.getBundleName());
      connectorTO.setVersion(selectedBundleTO.getVersion());
      if (restClient.check(connectorTO).booleanValue()) {
        info(getString(""String_Node_Str""));
      }
 else {
        error(getString(""String_Node_Str""));
      }
      target.add(feedbackPanel);
    }
  }
;
  connectorPropForm.add(check);
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
      ConnBundleTO bundleTO=(ConnBundleTO)bundle.getModelObject();
      connector.setBundleName(bundleTO.getBundleName());
      if (!selectedCapabilities.isEmpty()) {
        connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
      }
 else {
        connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
      }
      try {
        if (createFlag) {
          restClient.create(connector);
        }
 else {
          restClient.update(connector);
        }
        ((Resources)callerPageRef.getPage()).setModalResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
        ((Resources)callerPageRef.getPage()).setModalResult(false);
        LOG.error(""String_Node_Str"" + connector);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=createFlag ? xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"") : xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  connectorForm.add(connectorName);
  connectorForm.add(displayName);
  connectorForm.add(bundle);
  connectorForm.add(version);
  final IModel<List<ConnectorCapability>> capabilities=new LoadableDetachableModel<List<ConnectorCapability>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnectorCapability> load(){
      return Arrays.asList(ConnectorCapability.values());
    }
  }
;
  capabilitiesPalette=new CheckBoxMultipleChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),capabilities);
  connectorForm.add(capabilitiesPalette);
  connectorForm.add(submit);
  add(connectorForm);
}"
60639,"public ResourceModalPage(final PageReference callPageRef,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  super();
  this.resourceTO=resourceTO;
  uSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  uDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  uVirSchemaAttrNames=schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
  final IModel<List<ConnInstanceTO>> connectors=new LoadableDetachableModel<List<ConnInstanceTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnInstanceTO> load(){
      return connectorRestClient.getAllConnectors();
    }
  }
;
  final IModel<List<IntMappingType>> intMappingTypes=new LoadableDetachableModel<List<IntMappingType>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<IntMappingType> load(){
      return Arrays.asList(IntMappingType.values());
    }
  }
;
  final IModel<List<ConnConfProperty>> connectorPropertiesModel=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      Set<ConnConfProperty> props=resourceTO.getConnectorConfigurationProperties();
      if (props == null || props.isEmpty() || createFlag) {
        props=overridableConnectorProperties;
      }
      return new ArrayList<ConnConfProperty>(props);
    }
  }
;
  updateResourceSchemaNames(resourceTO);
  updateConnectorProperties(resourceTO.getConnectorId());
  final ConnInstanceTO connectorTO=new ConnInstanceTO();
  if (!createFlag) {
    connectorTO.setId(resourceTO.getConnectorId());
  }
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(resourceTO));
  final AjaxTextFieldPanel resourceName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  resourceName.setEnabled(createFlag);
  resourceName.addRequiredLabel();
  form.add(resourceName);
  final AjaxTextFieldPanel accountLink=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  form.add(accountLink);
  final AjaxCheckBoxPanel forceMandatoryConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(forceMandatoryConstraint);
  final AjaxCheckBoxPanel propagationPrimary=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(propagationPrimary);
  final AjaxNumberFieldPanel propagationPriority=new AjaxNumberFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Number>(resourceTO,""String_Node_Str""),Integer.class,false);
  form.add(propagationPriority);
  final AjaxDropDownChoicePanel<PropagationMode> propagationMode=new AjaxDropDownChoicePanel<PropagationMode>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  propagationMode.setChoices(Arrays.asList(PropagationMode.values()));
  form.add(propagationMode);
  final AjaxDropDownChoicePanel<TraceLevel> createTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  createTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(createTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> updateTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  updateTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(updateTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> deleteTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  deleteTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(deleteTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> syncTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  syncTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(syncTraceLevel);
  final AjaxCheckBoxPanel resetToken=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new Model(null),false);
  resetToken.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget art){
      if (resetToken.getModelObject()) {
        resourceTO.setSyncToken(null);
      }
    }
  }
);
  form.add(resetToken);
  mappingContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingContainer.setOutputMarkupId(true);
  form.add(mappingContainer);
  connectorPropertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  connectorPropertiesContainer.setOutputMarkupId(true);
  form.add(connectorPropertiesContainer);
  final AjaxDropDownChoicePanel<ConnInstanceTO> connector=new AjaxDropDownChoicePanel<ConnInstanceTO>(""String_Node_Str"",getString(""String_Node_Str""),new Model<ConnInstanceTO>(connectorTO),false);
  connector.setChoices(connectors.getObject());
  connector.setChoiceRenderer(new ChoiceRenderer(""String_Node_Str"",""String_Node_Str""));
  connector.getField().setModel(new IModel<ConnInstanceTO>(){
    private static final long serialVersionUID=-4202872830392400310L;
    @Override public ConnInstanceTO getObject(){
      return connectorTO;
    }
    @Override public void setObject(    final ConnInstanceTO connector){
      resourceTO.setConnectorId(connector.getId());
    }
    @Override public void detach(){
    }
  }
);
  connector.addRequiredLabel();
  connector.setEnabled(createFlag);
  form.add(connector);
  mappings=new ListView<SchemaMappingTO>(""String_Node_Str"",resourceTO.getMappings()){
    private static final long serialVersionUID=4949588177564901031L;
    @Override protected void populateItem(    final ListItem<SchemaMappingTO> item){
      final SchemaMappingTO mappingTO=item.getModelObject();
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
        private static final long serialVersionUID=7170946748485726506L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int index=-1;
          for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
            if (mappingTO.equals(resourceTO.getMappings().get(i))) {
              index=i;
            }
          }
          if (index != -1) {
            resourceTO.getMappings().remove(index);
            item.getParent().removeAll();
            target.add(mappingContainer);
          }
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=-7927968187160354605L;
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      final AjaxDropDownChoicePanel intAttrNames=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
      intAttrNames.setChoices(resourceSchemaNames);
      intAttrNames.setRequired(true);
      intAttrNames.setStyleShet(""String_Node_Str"");
      if (mappingTO.getIntMappingType() == null) {
        intAttrNames.setChoices(Collections.EMPTY_LIST);
      }
 else {
switch (mappingTO.getIntMappingType()) {
case UserSchema:
          intAttrNames.setChoices(uSchemaAttrNames);
        break;
case UserDerivedSchema:
      intAttrNames.setChoices(uDerSchemaAttrNames);
    break;
case UserVirtualSchema:
  intAttrNames.setChoices(uVirSchemaAttrNames);
break;
case SyncopeUserId:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
case Password:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
case Username:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
default :
intAttrNames.setChoices(Collections.EMPTY_LIST);
}
}
item.add(intAttrNames);
final IntMappingTypesDropDownChoice mappingTypesPanel=new IntMappingTypesDropDownChoice(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<IntMappingType>(mappingTO,""String_Node_Str""),intAttrNames);
mappingTypesPanel.setRequired(true);
mappingTypesPanel.setChoices(intMappingTypes.getObject());
mappingTypesPanel.setStyleShet(""String_Node_Str"");
item.add(mappingTypesPanel);
final FieldPanel extAttrName;
if (resourceSchemaNames.isEmpty()) {
extAttrName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(mappingTO,""String_Node_Str""),true);
}
 else {
extAttrName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
((AjaxDropDownChoicePanel)extAttrName).setChoices(resourceSchemaNames);
}
boolean required=mappingTO != null && !mappingTO.isAccountid() && !mappingTO.isPassword();
extAttrName.setRequired(required);
extAttrName.setEnabled(required);
extAttrName.setStyleShet(""String_Node_Str"");
item.add(extAttrName);
final AjaxTextFieldPanel mandatoryCondition=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
mandatoryCondition.setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
mandatoryCondition.setStyleShet(""String_Node_Str"");
item.add(mandatoryCondition);
final AjaxCheckBoxPanel accountId=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),false);
accountId.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!accountId.getModelObject() && !mappingTO.isPassword());
extAttrName.setModelObject(null);
extAttrName.setRequired(!accountId.getModelObject());
target.add(extAttrName);
}
}
);
item.add(accountId);
final AjaxCheckBoxPanel password=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
password.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!mappingTO.isAccountid() && !password.getModelObject());
extAttrName.setModelObject(null);
extAttrName.setRequired(!password.getModelObject());
target.add(extAttrName);
}
}
);
item.add(password);
}
}
;
mappings.setReuseItems(true);
mappingContainer.add(mappings);
addSchemaMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-4804368561204623354L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
resourceTO.getMappings().add(new SchemaMappingTO());
target.add(mappingContainer);
}
@Override protected void onError(AjaxRequestTarget target,Form<?> form){
}
}
;
addSchemaMappingBtn.setDefaultFormProcessing(false);
addSchemaMappingBtn.setEnabled(!createFlag);
mappingContainer.add(addSchemaMappingBtn);
connectorPropertiesContainer.add(new ListView<ConnConfProperty>(""String_Node_Str"",connectorPropertiesModel){
private static final long serialVersionUID=9101744072914090143L;
@Override protected void populateItem(final ListItem<ConnConfProperty> item){
final ConnConfProperty property=item.getModelObject();
final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
item.add(label);
final FieldPanel field;
boolean required=false;
boolean isArray=false;
if (GUARDED_STRING.equalsIgnoreCase(property.getSchema().getType()) || GUARDED_BYTE_ARRAY.equalsIgnoreCase(property.getSchema().getType())) {
field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
((PasswordTextField)field.getField()).setResetPassword(false);
required=property.getSchema().isRequired();
}
 else {
Class propertySchemaClass;
try {
propertySchemaClass=ClassUtils.forName(property.getSchema().getType(),ClassUtils.getDefaultClassLoader());
}
 catch (Exception e) {
LOG.error(""String_Node_Str"",e);
propertySchemaClass=String.class;
}
if (NUMBER.contains(propertySchemaClass)) {
field=new AjaxNumberFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),ClassUtils.resolvePrimitiveIfNecessary(propertySchemaClass),true);
required=property.getSchema().isRequired();
}
 else if (Boolean.class.equals(propertySchemaClass) || boolean.class.equals(propertySchemaClass)) {
field=new AjaxCheckBoxPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
}
 else {
field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
required=property.getSchema().isRequired();
}
if (String[].class.equals(propertySchemaClass)) {
isArray=true;
}
}
field.setTitle(property.getSchema().getHelpMessage());
if (isArray) {
field.removeRequiredLabel();
if (property.getValues().isEmpty()) {
property.getValues().add(null);
}
final MultiValueSelectorPanel multiFields=new MultiValueSelectorPanel<String>(""String_Node_Str"",new PropertyModel<List<String>>(property,""String_Node_Str""),String.class,field,true);
item.add(multiFields);
}
 else {
if (required) {
field.addRequiredLabel();
}
field.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(final AjaxRequestTarget target){
send(getPage(),Broadcast.BREADTH,new MultiValueSelectorEvent(target));
}
}
);
field.setNewModel(property.getValues());
item.add(field);
}
resourceTO.getConnectorConfigurationProperties().add(property);
}
}
);
connector.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
target.add(mappingContainer);
updateConnectorProperties(resourceTO.getConnectorId());
target.add(connectorPropertiesContainer);
}
}
);
form.add(new ResourceSecurityPanel(""String_Node_Str"",resourceTO));
AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
int accountIdCount=0;
for (SchemaMappingTO mapping : resourceTO.getMappings()) {
if (mapping.isAccountid()) {
accountIdCount++;
}
}
if (accountIdCount == 0 || accountIdCount > 1) {
error(getString(""String_Node_Str""));
target.add(feedbackPanel);
}
 else {
try {
if (createFlag) {
restClient.create(resourceTO);
}
 else {
restClient.update(resourceTO);
}
((Resources)callPageRef.getPage()).setModalResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
LOG.error(""String_Node_Str"",resourceTO);
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
target.add(feedbackPanel);
}
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.add(feedbackPanel);
}
}
;
form.add(submit);
add(form);
MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",createFlag ? ""String_Node_Str"" : ""String_Node_Str""));
}","public ResourceModalPage(final PageReference callPageRef,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  super();
  this.resourceTO=resourceTO;
  uSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  uDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  uVirSchemaAttrNames=schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
  final IModel<List<ConnInstanceTO>> connectors=new LoadableDetachableModel<List<ConnInstanceTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnInstanceTO> load(){
      return connectorRestClient.getAllConnectors();
    }
  }
;
  final IModel<List<IntMappingType>> intMappingTypes=new LoadableDetachableModel<List<IntMappingType>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<IntMappingType> load(){
      return Arrays.asList(IntMappingType.values());
    }
  }
;
  final IModel<List<ConnConfProperty>> connectorPropertiesModel=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      Set<ConnConfProperty> props=resourceTO.getConnectorConfigurationProperties();
      if (props == null || props.isEmpty() || createFlag) {
        props=overridableConnectorProperties;
      }
      return new ArrayList<ConnConfProperty>(props);
    }
  }
;
  updateResourceSchemaNames(resourceTO);
  updateConnectorProperties(resourceTO.getConnectorId());
  final ConnInstanceTO connectorTO=new ConnInstanceTO();
  if (!createFlag) {
    connectorTO.setId(resourceTO.getConnectorId());
  }
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(resourceTO));
  final AjaxTextFieldPanel resourceName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  resourceName.setEnabled(createFlag);
  resourceName.addRequiredLabel();
  form.add(resourceName);
  final AjaxTextFieldPanel accountLink=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  form.add(accountLink);
  final AjaxCheckBoxPanel forceMandatoryConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(forceMandatoryConstraint);
  final AjaxCheckBoxPanel propagationPrimary=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(propagationPrimary);
  final AjaxNumberFieldPanel propagationPriority=new AjaxNumberFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Number>(resourceTO,""String_Node_Str""),Integer.class,false);
  form.add(propagationPriority);
  final AjaxDropDownChoicePanel<PropagationMode> propagationMode=new AjaxDropDownChoicePanel<PropagationMode>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  propagationMode.setChoices(Arrays.asList(PropagationMode.values()));
  form.add(propagationMode);
  final AjaxDropDownChoicePanel<TraceLevel> createTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  createTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(createTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> updateTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  updateTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(updateTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> deleteTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  deleteTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(deleteTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> syncTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  syncTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(syncTraceLevel);
  final AjaxCheckBoxPanel resetToken=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new Model(null),false);
  resetToken.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget art){
      if (resetToken.getModelObject()) {
        resourceTO.setSyncToken(null);
      }
    }
  }
);
  form.add(resetToken);
  mappingContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingContainer.setOutputMarkupId(true);
  form.add(mappingContainer);
  connectorPropertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  connectorPropertiesContainer.setOutputMarkupId(true);
  form.add(connectorPropertiesContainer);
  final AjaxDropDownChoicePanel<ConnInstanceTO> connector=new AjaxDropDownChoicePanel<ConnInstanceTO>(""String_Node_Str"",getString(""String_Node_Str""),new Model<ConnInstanceTO>(connectorTO),false);
  connector.setChoices(connectors.getObject());
  connector.setChoiceRenderer(new ChoiceRenderer(""String_Node_Str"",""String_Node_Str""));
  connector.getField().setModel(new IModel<ConnInstanceTO>(){
    private static final long serialVersionUID=-4202872830392400310L;
    @Override public ConnInstanceTO getObject(){
      return connectorTO;
    }
    @Override public void setObject(    final ConnInstanceTO connector){
      resourceTO.setConnectorId(connector.getId());
    }
    @Override public void detach(){
    }
  }
);
  connector.addRequiredLabel();
  connector.setEnabled(createFlag);
  form.add(connector);
  mappings=new ListView<SchemaMappingTO>(""String_Node_Str"",resourceTO.getMappings()){
    private static final long serialVersionUID=4949588177564901031L;
    @Override protected void populateItem(    final ListItem<SchemaMappingTO> item){
      final SchemaMappingTO mappingTO=item.getModelObject();
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
        private static final long serialVersionUID=7170946748485726506L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int index=-1;
          for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
            if (mappingTO.equals(resourceTO.getMappings().get(i))) {
              index=i;
            }
          }
          if (index != -1) {
            resourceTO.getMappings().remove(index);
            item.getParent().removeAll();
            target.add(mappingContainer);
          }
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=-7927968187160354605L;
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      final AjaxDropDownChoicePanel intAttrNames=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
      intAttrNames.setChoices(resourceSchemaNames);
      intAttrNames.setRequired(true);
      intAttrNames.setStyleShet(""String_Node_Str"");
      if (mappingTO.getIntMappingType() == null) {
        intAttrNames.setChoices(Collections.EMPTY_LIST);
      }
 else {
switch (mappingTO.getIntMappingType()) {
case UserSchema:
          intAttrNames.setChoices(uSchemaAttrNames);
        break;
case UserDerivedSchema:
      intAttrNames.setChoices(uDerSchemaAttrNames);
    break;
case UserVirtualSchema:
  intAttrNames.setChoices(uVirSchemaAttrNames);
break;
case SyncopeUserId:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
case Password:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
case Username:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
default :
intAttrNames.setChoices(Collections.EMPTY_LIST);
}
}
item.add(intAttrNames);
final IntMappingTypesDropDownChoice mappingTypesPanel=new IntMappingTypesDropDownChoice(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<IntMappingType>(mappingTO,""String_Node_Str""),intAttrNames);
mappingTypesPanel.setRequired(true);
mappingTypesPanel.setChoices(intMappingTypes.getObject());
mappingTypesPanel.setStyleShet(""String_Node_Str"");
item.add(mappingTypesPanel);
final FieldPanel extAttrName;
if (resourceSchemaNames.isEmpty()) {
extAttrName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(mappingTO,""String_Node_Str""),true);
}
 else {
extAttrName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
((AjaxDropDownChoicePanel)extAttrName).setChoices(resourceSchemaNames);
}
boolean required=mappingTO != null && !mappingTO.isAccountid() && !mappingTO.isPassword();
extAttrName.setRequired(required);
extAttrName.setEnabled(required);
extAttrName.setStyleShet(""String_Node_Str"");
item.add(extAttrName);
final AjaxTextFieldPanel mandatoryCondition=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
mandatoryCondition.setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
mandatoryCondition.setStyleShet(""String_Node_Str"");
item.add(mandatoryCondition);
final AjaxCheckBoxPanel accountId=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),false);
accountId.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!accountId.getModelObject() && !mappingTO.isPassword());
extAttrName.setModelObject(null);
extAttrName.setRequired(!accountId.getModelObject());
target.add(extAttrName);
}
}
);
item.add(accountId);
final AjaxCheckBoxPanel password=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
password.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!mappingTO.isAccountid() && !password.getModelObject());
extAttrName.setModelObject(null);
extAttrName.setRequired(!password.getModelObject());
target.add(extAttrName);
}
}
);
item.add(password);
}
}
;
mappings.setReuseItems(true);
mappingContainer.add(mappings);
addSchemaMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-4804368561204623354L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
resourceTO.getMappings().add(new SchemaMappingTO());
target.add(mappingContainer);
}
@Override protected void onError(AjaxRequestTarget target,Form<?> form){
}
}
;
addSchemaMappingBtn.setDefaultFormProcessing(false);
addSchemaMappingBtn.setEnabled(!createFlag);
mappingContainer.add(addSchemaMappingBtn);
connectorPropertiesContainer.add(new ListView<ConnConfProperty>(""String_Node_Str"",connectorPropertiesModel){
private static final long serialVersionUID=9101744072914090143L;
@Override protected void populateItem(final ListItem<ConnConfProperty> item){
final ConnConfProperty property=item.getModelObject();
final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
item.add(label);
final FieldPanel field;
boolean required=false;
boolean isArray=false;
if (GUARDED_STRING.equalsIgnoreCase(property.getSchema().getType()) || GUARDED_BYTE_ARRAY.equalsIgnoreCase(property.getSchema().getType())) {
field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
((PasswordTextField)field.getField()).setResetPassword(false);
required=property.getSchema().isRequired();
}
 else {
Class propertySchemaClass;
try {
propertySchemaClass=ClassUtils.forName(property.getSchema().getType(),ClassUtils.getDefaultClassLoader());
}
 catch (Exception e) {
LOG.error(""String_Node_Str"",e);
propertySchemaClass=String.class;
}
if (NUMBER.contains(propertySchemaClass)) {
field=new AjaxNumberFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),ClassUtils.resolvePrimitiveIfNecessary(propertySchemaClass),true);
required=property.getSchema().isRequired();
}
 else if (Boolean.class.equals(propertySchemaClass) || boolean.class.equals(propertySchemaClass)) {
field=new AjaxCheckBoxPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
}
 else {
field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
required=property.getSchema().isRequired();
}
if (String[].class.equals(propertySchemaClass)) {
isArray=true;
}
}
field.setTitle(property.getSchema().getHelpMessage());
if (isArray) {
field.removeRequiredLabel();
if (property.getValues().isEmpty()) {
property.getValues().add(null);
}
final MultiValueSelectorPanel multiFields=new MultiValueSelectorPanel<String>(""String_Node_Str"",new PropertyModel<List<String>>(property,""String_Node_Str""),String.class,field,true);
item.add(multiFields);
}
 else {
if (required) {
field.addRequiredLabel();
}
field.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(final AjaxRequestTarget target){
send(getPage(),Broadcast.BREADTH,new MultiValueSelectorEvent(target));
}
}
);
field.setNewModel(property.getValues());
item.add(field);
}
resourceTO.getConnectorConfigurationProperties().add(property);
}
}
);
connector.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
target.add(mappingContainer);
updateConnectorProperties(resourceTO.getConnectorId());
target.add(connectorPropertiesContainer);
}
}
);
final AjaxLink check=new IndicatingAjaxLink(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-4199438518229098169L;
@Override public void onClick(final AjaxRequestTarget target){
ConnInstanceTO connectorTO=connectorRestClient.read(resourceTO.getConnectorId());
connectorTO.setConfiguration(ConnConfPropUtils.joinConnInstanceProperties(connectorTO.getConfigurationMap(),ConnConfPropUtils.getConnConfPropertyMap(resourceTO.getConnectorConfigurationProperties())));
if (connectorRestClient.check(connectorTO).booleanValue()) {
info(getString(""String_Node_Str""));
}
 else {
error(getString(""String_Node_Str""));
}
target.add(feedbackPanel);
}
}
;
check.setEnabled(!connectorPropertiesModel.getObject().isEmpty());
connectorPropertiesContainer.add(check);
form.add(new ResourceSecurityPanel(""String_Node_Str"",resourceTO));
AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
int accountIdCount=0;
for (SchemaMappingTO mapping : resourceTO.getMappings()) {
if (mapping.isAccountid()) {
accountIdCount++;
}
}
if (accountIdCount == 0 || accountIdCount > 1) {
error(getString(""String_Node_Str""));
target.add(feedbackPanel);
}
 else {
try {
if (createFlag) {
restClient.create(resourceTO);
}
 else {
restClient.update(resourceTO);
}
((Resources)callPageRef.getPage()).setModalResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
LOG.error(""String_Node_Str"",resourceTO);
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
target.add(feedbackPanel);
}
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.add(feedbackPanel);
}
}
;
form.add(submit);
add(form);
MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",createFlag ? ""String_Node_Str"" : ""String_Node_Str""));
}"
60640,"private void filterProperties(final Set<ConnConfProperty> properties){
  for (  ConnConfProperty property : properties) {
    final List parsed=new ArrayList();
    for (    Object obj : property.getValues()) {
      if (obj != null && !obj.toString().isEmpty()) {
        parsed.add(obj);
      }
    }
    property.setValues(parsed);
  }
}","private Set<ConnConfProperty> filterProperties(final Set<ConnConfProperty> properties){
  Set<ConnConfProperty> newProperties=new HashSet<ConnConfProperty>();
  for (  ConnConfProperty property : properties) {
    ConnConfProperty prop=new ConnConfProperty();
    prop.setSchema(property.getSchema());
    prop.setOverridable(property.isOverridable());
    final List parsed=new ArrayList();
    for (    Object obj : property.getValues()) {
      if (obj != null && !obj.toString().isEmpty()) {
        parsed.add(obj);
      }
    }
    prop.setValues(parsed);
    newProperties.add(prop);
  }
  return newProperties;
}"
60641,"public SyncTaskModalPage(final ModalWindow window,final SyncTaskTO taskTO,final PageReference callerPageRef){
  super(window,taskTO,callerPageRef);
  final IModel<List<String>> allResources=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      final List<String> resourceNames=new ArrayList<String>();
      for (      ResourceTO resourceTO : resourceRestClient.getAllResources()) {
        resourceNames.add(resourceTO.getName());
      }
      return resourceNames;
    }
  }
;
  final AjaxDropDownChoicePanel<String> resource=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(taskTO,""String_Node_Str""),false);
  resource.setChoices(allResources.getObject());
  resource.setChoiceRenderer(new SelectChoiceRenderer());
  resource.addRequiredLabel();
  resource.setEnabled(taskTO.getId() == 0);
  resource.setStyleShet(""String_Node_Str"");
  profile.add(resource);
  final IModel<List<String>> classNames=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      final List<String> classes=new ArrayList<String>(taskRestClient.getJobActionsClasses());
      return classes;
    }
  }
;
  final AjaxDropDownChoicePanel<String> actionsClassName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(taskTO,""String_Node_Str""),false);
  actionsClassName.setChoices(classNames.getObject());
  actionsClassName.setStyleShet(""String_Node_Str"");
  profile.add(actionsClassName);
  final AjaxCheckBoxPanel creates=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(taskTO,""String_Node_Str""),false);
  profile.add(creates);
  final AjaxCheckBoxPanel updates=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(taskTO,""String_Node_Str""),false);
  profile.add(updates);
  final AjaxCheckBoxPanel deletes=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(taskTO,""String_Node_Str""),false);
  profile.add(deletes);
}","public SyncTaskModalPage(final ModalWindow window,final SyncTaskTO taskTO,final PageReference callerPageRef){
  super(window,taskTO,callerPageRef);
  final IModel<List<String>> allResources=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      final List<String> resourceNames=new ArrayList<String>();
      for (      ResourceTO resourceTO : resourceRestClient.getAllResources()) {
        resourceNames.add(resourceTO.getName());
      }
      return resourceNames;
    }
  }
;
  final AjaxDropDownChoicePanel<String> resource=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(taskTO,""String_Node_Str""),false);
  resource.setChoices(allResources.getObject());
  resource.setChoiceRenderer(new SelectChoiceRenderer());
  resource.addRequiredLabel();
  resource.setEnabled(taskTO.getId() == 0);
  resource.setStyleShet(""String_Node_Str"");
  profile.add(resource);
  final IModel<List<String>> classNames=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      final List<String> classes=new ArrayList<String>(taskRestClient.getJobActionsClasses());
      return classes;
    }
  }
;
  final AjaxDropDownChoicePanel<String> actionsClassName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(taskTO,""String_Node_Str""),false);
  actionsClassName.setChoices(classNames.getObject());
  actionsClassName.setStyleShet(""String_Node_Str"");
  profile.add(actionsClassName);
  final AjaxCheckBoxPanel creates=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(taskTO,""String_Node_Str""),false);
  profile.add(creates);
  final AjaxCheckBoxPanel updates=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(taskTO,""String_Node_Str""),false);
  profile.add(updates);
  final AjaxCheckBoxPanel deletes=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(taskTO,""String_Node_Str""),false);
  profile.add(deletes);
  final AjaxCheckBoxPanel status=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(taskTO,""String_Node_Str""),false);
  profile.add(status);
}"
60642,"public void setName(String name){
  this.name=name;
}","public void setName(final String name){
  this.name=name;
}"
60643,"public String getLevel(){
  return level;
}","public LoggerLevel getLevel(){
  return level;
}"
60644,"public void setLevel(String level){
  this.level=level;
}","public void setLevel(final LoggerLevel level){
  this.level=level;
}"
60645,"@Override public LoggerLevel getObject(){
  return LoggerLevel.valueOf(item.getModelObject().getLevel());
}","@Override public LoggerLevel getObject(){
  return item.getModelObject().getLevel();
}"
60646,"@Override public void setObject(final LoggerLevel object){
  item.getModelObject().setLevel(object.toString());
}","@Override public void setObject(final LoggerLevel object){
  item.getModelObject().setLevel(object);
}"
60647,"@Override protected void populateItem(final ListItem<LoggerTO> item){
  item.add(new Label(""String_Node_Str""));
  DropDownChoice<LoggerLevel> level=new DropDownChoice<LoggerLevel>(""String_Node_Str"");
  level.setModel(new IModel<LoggerLevel>(){
    private static final long serialVersionUID=-2350428186089596562L;
    @Override public LoggerLevel getObject(){
      return LoggerLevel.valueOf(item.getModelObject().getLevel());
    }
    @Override public void setObject(    final LoggerLevel object){
      item.getModelObject().setLevel(object.toString());
    }
    @Override public void detach(){
    }
  }
);
  level.setChoices(Arrays.asList(LoggerLevel.values()));
  level.setOutputMarkupId(true);
  level.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      boolean result=getId().equals(""String_Node_Str"") ? confRestClient.setLoggerLevel(item.getModelObject().getName(),item.getModelObject().getLevel()) : consoleLoggerController.setLoggerLevel(item.getModelObject().getName(),item.getModelObject().getLevel());
      if (result) {
        info(getString(""String_Node_Str""));
      }
 else {
        info(getString(""String_Node_Str""));
      }
      target.add(feedbackPanel);
    }
  }
);
  item.add(level);
}","@Override protected void populateItem(final ListItem<LoggerTO> item){
  item.add(new Label(""String_Node_Str""));
  DropDownChoice<LoggerLevel> level=new DropDownChoice<LoggerLevel>(""String_Node_Str"");
  level.setModel(new IModel<LoggerLevel>(){
    private static final long serialVersionUID=-2350428186089596562L;
    @Override public LoggerLevel getObject(){
      return item.getModelObject().getLevel();
    }
    @Override public void setObject(    final LoggerLevel object){
      item.getModelObject().setLevel(object);
    }
    @Override public void detach(){
    }
  }
);
  level.setChoices(Arrays.asList(LoggerLevel.values()));
  level.setOutputMarkupId(true);
  level.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      boolean result=getId().equals(""String_Node_Str"") ? confRestClient.setLoggerLevel(item.getModelObject().getName(),item.getModelObject().getLevel()) : consoleLoggerController.setLoggerLevel(item.getModelObject().getName(),item.getModelObject().getLevel());
      if (result) {
        info(getString(""String_Node_Str""));
      }
 else {
        info(getString(""String_Node_Str""));
      }
      target.add(feedbackPanel);
    }
  }
);
  item.add(level);
}"
60648,"public List<LoggerTO> getLoggers(){
  LoggerContext lc=(LoggerContext)LoggerFactory.getILoggerFactory();
  List<LoggerTO> result=new ArrayList<LoggerTO>(lc.getLoggerList().size());
  LoggerTO loggerTO;
  for (  Logger logger : lc.getLoggerList()) {
    if (logger.getLevel() != null) {
      loggerTO=new LoggerTO();
      loggerTO.setName(logger.getName());
      loggerTO.setLevel(logger.getLevel().toString());
      result.add(loggerTO);
    }
  }
  return result;
}","public List<LoggerTO> getLoggers(){
  LoggerContext lc=(LoggerContext)LoggerFactory.getILoggerFactory();
  List<LoggerTO> result=new ArrayList<LoggerTO>(lc.getLoggerList().size());
  LoggerTO loggerTO;
  for (  Logger logger : lc.getLoggerList()) {
    if (logger.getLevel() != null) {
      loggerTO=new LoggerTO();
      loggerTO.setName(logger.getName());
      loggerTO.setLevel(LoggerLevel.fromLevel(logger.getLevel()));
      result.add(loggerTO);
    }
  }
  return result;
}"
60649,"public boolean setLoggerLevel(final String name,final String level){
  LoggerContext lc=(LoggerContext)LoggerFactory.getILoggerFactory();
  Logger logger=lc.getLogger(name);
  if (logger != null) {
    logger.setLevel(Level.valueOf(level));
  }
  return logger != null;
}","public boolean setLoggerLevel(final String name,final LoggerLevel level){
  LoggerContext lc=(LoggerContext)LoggerFactory.getILoggerFactory();
  Logger logger=lc.getLogger(name);
  if (logger != null) {
    logger.setLevel(level.getLevel());
  }
  return logger != null;
}"
60650,"/** 
 * Get all stored configurations.
 * @return ConfigurationTOs
 */
public List<ConfigurationTO> getAllConfigurations() throws SyncopeClientCompositeErrorException {
  List<ConfigurationTO> configurations=null;
  configurations=Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"",ConfigurationTO[].class));
  return configurations;
}","/** 
 * Get all stored configurations.
 * @return ConfigurationTOs
 */
public List<ConfigurationTO> getAllConfigurations(){
  return Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"",ConfigurationTO[].class));
}"
60651,"/** 
 * Load an existent configuration.
 * @return ConfigurationTO object if the configuration exists,null otherwise
 */
public ConfigurationTO readConfiguration(String key) throws SyncopeClientCompositeErrorException {
  ConfigurationTO configurationTO=restTemplate.getForObject(baseURL + ""String_Node_Str"",ConfigurationTO.class,key);
  return configurationTO;
}","public ConfigurationTO readConfiguration(String key){
  return restTemplate.getForObject(baseURL + ""String_Node_Str"",ConfigurationTO.class,key);
}"
60652,"/** 
 * Deelete a configuration by key.
 */
public void deleteConfiguration(String key) throws SyncopeClientCompositeErrorException {
  restTemplate.delete(baseURL + ""String_Node_Str"",key);
}","/** 
 * Deelete a configuration by key.
 */
public void deleteConfiguration(final String key){
  restTemplate.delete(baseURL + ""String_Node_Str"",key);
}"
60653,"/** 
 * Update an existent configuration.
 * @param configurationTO
 * @return true if the operation ends succesfully, false otherwise
 */
public boolean updateConfiguration(ConfigurationTO configurationTO){
  ConfigurationTO newConfigurationTO=null;
  try {
    newConfigurationTO=restTemplate.postForObject(baseURL + ""String_Node_Str"",configurationTO,ConfigurationTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
    return false;
  }
  return (configurationTO.equals(newConfigurationTO)) ? true : false;
}","/** 
 * Update an existent configuration.
 * @param configurationTO
 * @return true if the operation ends succesfully, false otherwise
 */
public boolean updateConfiguration(ConfigurationTO configurationTO){
  ConfigurationTO newConfigurationTO=null;
  try {
    newConfigurationTO=restTemplate.postForObject(baseURL + ""String_Node_Str"",configurationTO,ConfigurationTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
    return false;
  }
  return configurationTO.equals(newConfigurationTO);
}"
60654,"/** 
 * Get all loggers.
 * @return LoggerTOs
 */
public List<LoggerTO> getLoggers() throws SyncopeClientCompositeErrorException {
  List<LoggerTO> loggers=Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"",LoggerTO[].class));
  return loggers;
}","/** 
 * Get all loggers.
 * @return LoggerTOs
 */
public List<LoggerTO> getLoggers(){
  return Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"",LoggerTO[].class));
}"
60655,"public boolean setLoggerLevel(final String name,final String level){
  boolean result;
  try {
    restTemplate.postForObject(baseURL + ""String_Node_Str"",null,LoggerTO.class,name,level);
    result=true;
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
    result=false;
  }
  return result;
}","public boolean setLoggerLevel(final String name,final LoggerLevel level){
  boolean result;
  try {
    restTemplate.postForObject(baseURL + ""String_Node_Str"",null,LoggerTO.class,name,level);
    result=true;
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
    result=false;
  }
  return result;
}"
60656,"public final void updateResourceSchemaNames(final ResourceTO resourceTO){
  try {
    resourceSchemaNames=(resourceTO != null && resourceTO.getConnectorId() != null) ? connectorRestClient.getSchemaNames(resourceTO.getName()) : Collections.EMPTY_LIST;
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"",e);
    resourceSchemaNames=Collections.EMPTY_LIST;
  }
}","public final void updateResourceSchemaNames(final ResourceTO resourceTO){
  try {
    resourceSchemaNames=(resourceTO != null && resourceTO.getConnectorId() != null) ? restClient.getSchemaNames(resourceTO.getName()) : Collections.EMPTY_LIST;
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"",e);
    resourceSchemaNames=Collections.EMPTY_LIST;
  }
}"
60657,"/** 
 * Get all Connectors.
 * @return ResourceTOs
 */
public List<ResourceTO> getAllResources(){
  List<ResourceTO> resources=null;
  try {
    resources=Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"",ResourceTO[].class));
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return resources;
}","public List<ResourceTO> getAllResources(){
  List<ResourceTO> resources=null;
  try {
    resources=Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"",ResourceTO[].class));
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return resources;
}"
60658,"/** 
 * Load an already existent resource by its name.
 * @param name (e.g.:surname)
 * @return ResourceTO
 */
public ResourceTO read(final String name){
  ResourceTO resourceTO=null;
  try {
    resourceTO=restTemplate.getForObject(baseURL + ""String_Node_Str"" + name+ ""String_Node_Str"",ResourceTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return resourceTO;
}","public ResourceTO read(final String name){
  ResourceTO resourceTO=null;
  try {
    resourceTO=restTemplate.getForObject(baseURL + ""String_Node_Str"" + name+ ""String_Node_Str"",ResourceTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return resourceTO;
}"
60659,"/** 
 * Create new resource.
 * @param resourceTO
 */
public void create(final ResourceTO resourceTO){
  restTemplate.postForObject(baseURL + ""String_Node_Str"",resourceTO,ResourceTO.class);
}","public void create(final ResourceTO resourceTO){
  restTemplate.postForObject(baseURL + ""String_Node_Str"",resourceTO,ResourceTO.class);
}"
60660,"/** 
 * Update an already existent resource.
 * @param schemaTO updated
 */
public void update(final ResourceTO resourceTO){
  restTemplate.postForObject(baseURL + ""String_Node_Str"",resourceTO,ResourceTO.class);
}","public void update(final ResourceTO resourceTO){
  restTemplate.postForObject(baseURL + ""String_Node_Str"",resourceTO,ResourceTO.class);
}"
60661,"/** 
 * Delete an already existent resource by its name.
 * @param name
 */
public void delete(final String name){
  restTemplate.delete(baseURL + ""String_Node_Str"",name);
}","public void delete(final String name){
  restTemplate.delete(baseURL + ""String_Node_Str"",name);
}"
60662,"private final void setupNotification(){
  notificationPaginatorRows=prefMan.getPaginatorRows(getRequest(),Constants.PREF_NOTIFICATION_PAGINATOR_ROWS);
  List<IColumn> notificationCols=new ArrayList<IColumn>();
  notificationCols.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  notificationCols.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  notificationCols.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  notificationCols.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  notificationCols.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  notificationCols.add(new AbstractColumn<NotificationTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<NotificationTO>> cellItem,    final String componentId,    final IModel<NotificationTO> model){
      final NotificationTO notificationTO=model.getObject();
      AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          editNotificationWin.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new NotificationModalPage(Configuration.this.getPageReference(),editNotificationWin,notificationTO,false);
            }
          }
);
          editNotificationWin.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  notificationCols.add(new AbstractColumn<NotificationTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<NotificationTO>> cellItem,    final String componentId,    final IModel<NotificationTO> model){
      final NotificationTO notificationTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            notificationRestClient.deleteNotification(notificationTO.getId());
          }
 catch (          SyncopeClientCompositeErrorException e) {
            LOG.error(""String_Node_Str"",e);
            error(e.getMessage());
            return;
          }
          info(getString(""String_Node_Str""));
          target.add(feedbackPanel);
          target.add(notificationContainer);
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable notificationTable=new AjaxFallbackDefaultDataTable(""String_Node_Str"",notificationCols,new NotificationProvider(),notificationPaginatorRows);
  notificationContainer=new WebMarkupContainer(""String_Node_Str"");
  notificationContainer.add(notificationTable);
  notificationContainer.setOutputMarkupId(true);
  add(notificationContainer);
  createNotificationWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createNotificationWin.setInitialHeight(NOTIFICATION_WIN_HEIGHT);
  createNotificationWin.setInitialWidth(NOTIFICATION_WIN_WIDTH);
  createNotificationWin.setCookieName(""String_Node_Str"");
  editNotificationWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editNotificationWin.setInitialHeight(NOTIFICATION_WIN_HEIGHT);
  editNotificationWin.setInitialWidth(NOTIFICATION_WIN_WIDTH);
  editNotificationWin.setCookieName(""String_Node_Str"");
  setWindowClosedCallback(createNotificationWin,notificationContainer);
  setWindowClosedCallback(editNotificationWin,notificationContainer);
  AjaxLink createNotificationLink=new AjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      createNotificationWin.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new NotificationModalPage(Configuration.this.getPageReference(),createNotificationWin,new NotificationTO(),true);
        }
      }
);
      createNotificationWin.show(target);
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(createNotificationLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(createNotificationLink);
  Form notificationPaginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getRequest(),getResponse(),Constants.PREF_NOTIFICATION_PAGINATOR_ROWS,String.valueOf(notificationPaginatorRows));
      notificationTable.setItemsPerPage(notificationPaginatorRows);
      target.add(notificationContainer);
    }
  }
);
  notificationPaginatorForm.add(rowsChooser);
  add(notificationPaginatorForm);
}","private void setupNotification(){
  notificationPaginatorRows=prefMan.getPaginatorRows(getRequest(),Constants.PREF_NOTIFICATION_PAGINATOR_ROWS);
  List<IColumn> notificationCols=new ArrayList<IColumn>();
  notificationCols.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  notificationCols.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  notificationCols.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  notificationCols.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  notificationCols.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  notificationCols.add(new AbstractColumn<NotificationTO>(new ResourceModel(""String_Node_Str"",""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public String getCssClass(){
      return ""String_Node_Str"";
    }
    @Override public void populateItem(    final Item<ICellPopulator<NotificationTO>> cellItem,    final String componentId,    final IModel<NotificationTO> model){
      final NotificationTO notificationTO=model.getObject();
      final ActionLinksPanel panel=new ActionLinksPanel(componentId,model);
      panel.add(new ActionLink(){
        private static final long serialVersionUID=-3722207913631435501L;
        @Override public void onClick(        final AjaxRequestTarget target){
          editNotificationWin.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new NotificationModalPage(Configuration.this.getPageReference(),editNotificationWin,notificationTO,false);
            }
          }
);
          editNotificationWin.show(target);
        }
      }
,ActionLink.ActionType.EDIT,""String_Node_Str"",""String_Node_Str"");
      panel.add(new ActionLink(){
        private static final long serialVersionUID=-3722207913631435501L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            notificationRestClient.deleteNotification(notificationTO.getId());
          }
 catch (          SyncopeClientCompositeErrorException e) {
            LOG.error(""String_Node_Str"",e);
            error(e.getMessage());
            return;
          }
          info(getString(""String_Node_Str""));
          target.add(feedbackPanel);
          target.add(notificationContainer);
        }
      }
,ActionLink.ActionType.DELETE,""String_Node_Str"",""String_Node_Str"");
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable notificationTable=new AjaxFallbackDefaultDataTable(""String_Node_Str"",notificationCols,new NotificationProvider(),notificationPaginatorRows);
  notificationContainer=new WebMarkupContainer(""String_Node_Str"");
  notificationContainer.add(notificationTable);
  notificationContainer.setOutputMarkupId(true);
  add(notificationContainer);
  createNotificationWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createNotificationWin.setInitialHeight(NOTIFICATION_WIN_HEIGHT);
  createNotificationWin.setInitialWidth(NOTIFICATION_WIN_WIDTH);
  createNotificationWin.setCookieName(""String_Node_Str"");
  editNotificationWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editNotificationWin.setInitialHeight(NOTIFICATION_WIN_HEIGHT);
  editNotificationWin.setInitialWidth(NOTIFICATION_WIN_WIDTH);
  editNotificationWin.setCookieName(""String_Node_Str"");
  setWindowClosedCallback(createNotificationWin,notificationContainer);
  setWindowClosedCallback(editNotificationWin,notificationContainer);
  AjaxLink createNotificationLink=new AjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      createNotificationWin.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new NotificationModalPage(Configuration.this.getPageReference(),createNotificationWin,new NotificationTO(),true);
        }
      }
);
      createNotificationWin.show(target);
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(createNotificationLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(createNotificationLink);
  Form notificationPaginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getRequest(),getResponse(),Constants.PREF_NOTIFICATION_PAGINATOR_ROWS,String.valueOf(notificationPaginatorRows));
      notificationTable.setItemsPerPage(notificationPaginatorRows);
      target.add(notificationContainer);
    }
  }
);
  notificationPaginatorForm.add(rowsChooser);
  add(notificationPaginatorForm);
}"
60663,"private final void setupSyncopeConf(){
  confPaginatorRows=prefMan.getPaginatorRows(getRequest(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS);
  List<IColumn> confColumns=new ArrayList<IColumn>();
  confColumns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new AbstractColumn<ConfigurationTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    final IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          editConfigWin.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new ConfigurationModalPage(Configuration.this.getPageReference(),editConfigWin,configurationTO,false);
            }
          }
);
          editConfigWin.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  confColumns.add(new AbstractColumn<ConfigurationTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    final IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            confRestClient.deleteConfiguration(configurationTO.getKey());
          }
 catch (          SyncopeClientCompositeErrorException e) {
            LOG.error(""String_Node_Str"",e);
            error(e.getMessage());
            return;
          }
          info(getString(""String_Node_Str""));
          target.add(feedbackPanel);
          target.add(confContainer);
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable confTable=new AjaxFallbackDefaultDataTable(""String_Node_Str"",confColumns,new SyncopeConfProvider(),confPaginatorRows);
  confContainer=new WebMarkupContainer(""String_Node_Str"");
  confContainer.add(confTable);
  confContainer.setOutputMarkupId(true);
  add(confContainer);
  createConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createConfigWin.setInitialHeight(CONFIG_WIN_HEIGHT);
  createConfigWin.setInitialWidth(CONFIG_WIN_WIDTH);
  createConfigWin.setCookieName(""String_Node_Str"");
  editConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editConfigWin.setInitialHeight(CONFIG_WIN_HEIGHT);
  editConfigWin.setInitialWidth(CONFIG_WIN_WIDTH);
  editConfigWin.setCookieName(""String_Node_Str"");
  setWindowClosedCallback(createConfigWin,confContainer);
  setWindowClosedCallback(editConfigWin,confContainer);
  AjaxLink createConfigurationLink=new AjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      createConfigWin.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new ConfigurationModalPage(Configuration.this.getPageReference(),createConfigWin,new ConfigurationTO(),true);
        }
      }
);
      createConfigWin.show(target);
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(createConfigurationLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(createConfigurationLink);
  Link dbExportLink=new Link<Void>(""String_Node_Str""){
    private static final long serialVersionUID=-4331619903296515985L;
    @Override public void onClick(){
      StringResourceStream stream=new StringResourceStream(confRestClient.dbContentAsXml(),""String_Node_Str"");
      getRequestCycle().scheduleRequestHandlerAfterCurrent(new ResourceStreamRequestHandler(stream).setFileName(""String_Node_Str"").setContentDisposition(ContentDisposition.ATTACHMENT));
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(dbExportLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(dbExportLink);
  Form confPaginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getRequest(),getResponse(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS,String.valueOf(confPaginatorRows));
      confTable.setItemsPerPage(confPaginatorRows);
      target.add(confContainer);
    }
  }
);
  confPaginatorForm.add(rowsChooser);
  add(confPaginatorForm);
}","private void setupSyncopeConf(){
  confPaginatorRows=prefMan.getPaginatorRows(getRequest(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS);
  List<IColumn> confColumns=new ArrayList<IColumn>();
  confColumns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new AbstractColumn<ConfigurationTO>(new ResourceModel(""String_Node_Str"",""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public String getCssClass(){
      return ""String_Node_Str"";
    }
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    final IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      final ActionLinksPanel panel=new ActionLinksPanel(componentId,model);
      panel.add(new ActionLink(){
        private static final long serialVersionUID=-3722207913631435501L;
        @Override public void onClick(        final AjaxRequestTarget target){
          editConfigWin.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new ConfigurationModalPage(Configuration.this.getPageReference(),editConfigWin,configurationTO,false);
            }
          }
);
          editConfigWin.show(target);
        }
      }
,ActionLink.ActionType.EDIT,""String_Node_Str"",""String_Node_Str"");
      panel.add(new ActionLink(){
        private static final long serialVersionUID=-3722207913631435501L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            confRestClient.deleteConfiguration(configurationTO.getKey());
          }
 catch (          SyncopeClientCompositeErrorException e) {
            LOG.error(""String_Node_Str"",e);
            error(e.getMessage());
            return;
          }
          info(getString(""String_Node_Str""));
          target.add(feedbackPanel);
          target.add(confContainer);
        }
      }
,ActionLink.ActionType.DELETE,""String_Node_Str"",""String_Node_Str"");
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable confTable=new AjaxFallbackDefaultDataTable(""String_Node_Str"",confColumns,new SyncopeConfProvider(),confPaginatorRows);
  confContainer=new WebMarkupContainer(""String_Node_Str"");
  confContainer.add(confTable);
  confContainer.setOutputMarkupId(true);
  add(confContainer);
  createConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createConfigWin.setInitialHeight(CONFIG_WIN_HEIGHT);
  createConfigWin.setInitialWidth(CONFIG_WIN_WIDTH);
  createConfigWin.setCookieName(""String_Node_Str"");
  editConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editConfigWin.setInitialHeight(CONFIG_WIN_HEIGHT);
  editConfigWin.setInitialWidth(CONFIG_WIN_WIDTH);
  editConfigWin.setCookieName(""String_Node_Str"");
  setWindowClosedCallback(createConfigWin,confContainer);
  setWindowClosedCallback(editConfigWin,confContainer);
  AjaxLink createConfigurationLink=new AjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      createConfigWin.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new ConfigurationModalPage(Configuration.this.getPageReference(),createConfigWin,new ConfigurationTO(),true);
        }
      }
);
      createConfigWin.show(target);
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(createConfigurationLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(createConfigurationLink);
  Link dbExportLink=new Link<Void>(""String_Node_Str""){
    private static final long serialVersionUID=-4331619903296515985L;
    @Override public void onClick(){
      StringResourceStream stream=new StringResourceStream(confRestClient.dbContentAsXml(),""String_Node_Str"");
      getRequestCycle().scheduleRequestHandlerAfterCurrent(new ResourceStreamRequestHandler(stream).setFileName(""String_Node_Str"").setContentDisposition(ContentDisposition.ATTACHMENT));
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(dbExportLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(dbExportLink);
  Form confPaginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getRequest(),getResponse(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS,String.valueOf(confPaginatorRows));
      confTable.setItemsPerPage(confPaginatorRows);
      target.add(confContainer);
    }
  }
);
  confPaginatorForm.add(rowsChooser);
  add(confPaginatorForm);
}"
60664,"private static void populate(final Map<String,AttributeTO> updatedAttrs,final Map<String,AttributeTO> originalAttrs,final AbstractAttributableMod result){
  for (  Map.Entry<String,AttributeTO> entry : updatedAttrs.entrySet()) {
    AttributeMod attrMod=new AttributeMod();
    attrMod.setSchema(entry.getKey());
    Set<String> updatedValues=new HashSet<String>(entry.getValue().getValues());
    Set<String> originalValues=originalAttrs.containsKey(entry.getKey()) ? new HashSet<String>(originalAttrs.get(entry.getKey()).getValues()) : Collections.EMPTY_SET;
    updatedValues.removeAll(originalValues);
    updatedValues.remove(""String_Node_Str"");
    if (!entry.getValue().isReadonly()) {
      attrMod.setValuesToBeAdded(new ArrayList<String>(updatedValues));
      if (!attrMod.isEmpty()) {
        result.addAttributeToBeRemoved(attrMod.getSchema());
      }
    }
    originalValues.removeAll(entry.getValue().getValues());
    attrMod.setValuesToBeRemoved(new ArrayList<String>(originalValues));
    if (!attrMod.isEmpty()) {
      result.addAttributeToBeUpdated(attrMod);
    }
  }
}","private static void populate(final Map<String,AttributeTO> updatedAttrs,final Map<String,AttributeTO> originalAttrs,final AbstractAttributableMod result){
  for (  Map.Entry<String,AttributeTO> entry : updatedAttrs.entrySet()) {
    AttributeMod attrMod=new AttributeMod();
    attrMod.setSchema(entry.getKey());
    Set<String> updatedValues=new HashSet<String>(entry.getValue().getValues());
    Set<String> originalValues=originalAttrs.containsKey(entry.getKey()) ? new HashSet<String>(originalAttrs.get(entry.getKey()).getValues()) : Collections.EMPTY_SET;
    updatedValues.remove(""String_Node_Str"");
    if (!entry.getValue().isReadonly()) {
      attrMod.setValuesToBeAdded(new ArrayList<String>(updatedValues));
      if (!attrMod.isEmpty()) {
        result.addAttributeToBeRemoved(attrMod.getSchema());
      }
    }
    attrMod.setValuesToBeRemoved(new ArrayList<String>(originalValues));
    if (!attrMod.isEmpty()) {
      result.addAttributeToBeUpdated(attrMod);
    }
  }
}"
60665,"public void setValues(List values){
  this.values=values;
}","public void setValues(final List values){
  this.values=values;
}"
60666,"@Override protected void populateItem(final ListItem<WorkflowFormPropertyTO> item){
  final WorkflowFormPropertyTO prop=item.getModelObject();
  Label label=new Label(""String_Node_Str"",prop.getName() == null ? prop.getId() : prop.getName());
  item.add(label);
  FieldPanel field=null;
switch (prop.getType()) {
case Boolean:
    field=new AjaxDropDownChoicePanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(Boolean.valueOf(prop.getValue())),true).setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
  break;
case Date:
SimpleDateFormat df=StringUtils.isNotBlank(prop.getDatePattern()) ? new SimpleDateFormat(prop.getDatePattern()) : new SimpleDateFormat();
Date parsedDate=null;
if (StringUtils.isNotBlank(prop.getValue())) {
try {
parsedDate=df.parse(prop.getValue());
}
 catch (ParseException e) {
LOG.error(""String_Node_Str"",prop.getValue(),e);
}
}
field=new DateTimeFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(parsedDate),true,df.toLocalizedPattern());
break;
case Enum:
MapChoiceRenderer<String,String> enumCR=new MapChoiceRenderer<String,String>(prop.getEnumValues());
field=new AjaxDropDownChoicePanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(prop.getValue()),true).setChoiceRenderer(enumCR).setChoices(new Model(){
private static final long serialVersionUID=-858521070366432018L;
@Override public Serializable getObject(){
return new ArrayList(prop.getEnumValues().keySet());
}
}
);
break;
case Long:
field=new AjaxNumberFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(Long.valueOf(prop.getValue())),true);
break;
case String:
default :
field=new AjaxTextFieldPanel(""String_Node_Str"",PARENT_PATH,new Model(prop.getValue()),true);
break;
}
field.setReadOnly(!prop.isWritable());
if (prop.isRequired()) {
field.addRequiredLabel();
}
item.add(field);
}","@Override protected void populateItem(final ListItem<WorkflowFormPropertyTO> item){
  final WorkflowFormPropertyTO prop=item.getModelObject();
  Label label=new Label(""String_Node_Str"",prop.getName() == null ? prop.getId() : prop.getName());
  item.add(label);
  FieldPanel field=null;
switch (prop.getType()) {
case Boolean:
    field=new AjaxDropDownChoicePanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(Boolean.valueOf(prop.getValue())),true).setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
  break;
case Date:
SimpleDateFormat df=StringUtils.isNotBlank(prop.getDatePattern()) ? new SimpleDateFormat(prop.getDatePattern()) : new SimpleDateFormat();
Date parsedDate=null;
if (StringUtils.isNotBlank(prop.getValue())) {
try {
parsedDate=df.parse(prop.getValue());
}
 catch (ParseException e) {
LOG.error(""String_Node_Str"",prop.getValue(),e);
}
}
field=new DateTimeFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(parsedDate),true,df.toLocalizedPattern());
break;
case Enum:
MapChoiceRenderer<String,String> enumCR=new MapChoiceRenderer<String,String>(prop.getEnumValues());
field=new AjaxDropDownChoicePanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(prop.getValue()),true).setChoiceRenderer(enumCR).setChoices(new Model(){
private static final long serialVersionUID=-858521070366432018L;
@Override public Serializable getObject(){
return new ArrayList(prop.getEnumValues().keySet());
}
}
);
break;
case Long:
field=new AjaxNumberFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(Long.valueOf(prop.getValue())),Long.class,true);
break;
case String:
default :
field=new AjaxTextFieldPanel(""String_Node_Str"",PARENT_PATH,new Model(prop.getValue()),true);
break;
}
field.setReadOnly(!prop.isWritable());
if (prop.isRequired()) {
field.addRequiredLabel();
}
item.add(field);
}"
60667,"public ApprovalModalPage(final PageReference callerPageRef,final ModalWindow window,final WorkflowFormTO formTO){
  super();
  IModel<List<WorkflowFormPropertyTO>> formProps=new LoadableDetachableModel<List<WorkflowFormPropertyTO>>(){
    private static final long serialVersionUID=3169142472626817508L;
    @Override protected List<WorkflowFormPropertyTO> load(){
      return formTO.getProperties();
    }
  }
;
  final ListView<WorkflowFormPropertyTO> propView=new ListView<WorkflowFormPropertyTO>(""String_Node_Str"",formProps){
    private static final long serialVersionUID=9101744072914090143L;
    @Override protected void populateItem(    final ListItem<WorkflowFormPropertyTO> item){
      final WorkflowFormPropertyTO prop=item.getModelObject();
      Label label=new Label(""String_Node_Str"",prop.getName() == null ? prop.getId() : prop.getName());
      item.add(label);
      FieldPanel field=null;
switch (prop.getType()) {
case Boolean:
        field=new AjaxDropDownChoicePanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(Boolean.valueOf(prop.getValue())),true).setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
      break;
case Date:
    SimpleDateFormat df=StringUtils.isNotBlank(prop.getDatePattern()) ? new SimpleDateFormat(prop.getDatePattern()) : new SimpleDateFormat();
  Date parsedDate=null;
if (StringUtils.isNotBlank(prop.getValue())) {
  try {
    parsedDate=df.parse(prop.getValue());
  }
 catch (  ParseException e) {
    LOG.error(""String_Node_Str"",prop.getValue(),e);
  }
}
field=new DateTimeFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(parsedDate),true,df.toLocalizedPattern());
break;
case Enum:
MapChoiceRenderer<String,String> enumCR=new MapChoiceRenderer<String,String>(prop.getEnumValues());
field=new AjaxDropDownChoicePanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(prop.getValue()),true).setChoiceRenderer(enumCR).setChoices(new Model(){
private static final long serialVersionUID=-858521070366432018L;
@Override public Serializable getObject(){
return new ArrayList(prop.getEnumValues().keySet());
}
}
);
break;
case Long:
field=new AjaxNumberFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(Long.valueOf(prop.getValue())),true);
break;
case String:
default :
field=new AjaxTextFieldPanel(""String_Node_Str"",PARENT_PATH,new Model(prop.getValue()),true);
break;
}
field.setReadOnly(!prop.isWritable());
if (prop.isRequired()) {
field.addRequiredLabel();
}
item.add(field);
}
}
;
final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form<?> form){
Map<String,WorkflowFormPropertyTO> props=formTO.getPropertiesAsMap();
for (int i=0; i < propView.size(); i++) {
ListItem<WorkflowFormPropertyTO> item=(ListItem<WorkflowFormPropertyTO>)propView.get(i);
String input=((FieldPanel)item.get(""String_Node_Str"")).getField().getInput();
if (!props.containsKey(item.getModelObject().getId())) {
props.put(item.getModelObject().getId(),new WorkflowFormPropertyTO());
}
if (item.getModelObject().isWritable()) {
switch (item.getModelObject().getType()) {
case Boolean:
props.get(item.getModelObject().getId()).setValue(String.valueOf(input.equals(""String_Node_Str"")));
break;
case Date:
case Enum:
case String:
case Long:
default :
props.get(item.getModelObject().getId()).setValue(input);
break;
}
}
}
formTO.setProperties(props.values());
try {
restClient.submitForm(formTO);
((Todo)callerPageRef.getPage()).setModalResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
LOG.error(""String_Node_Str"",formTO,e);
target.add(feedbackPanel);
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form<?> form){
target.add(feedbackPanel);
}
}
;
Form form=new Form(""String_Node_Str"");
form.add(propView);
form.add(submit);
MetaDataRoleAuthorizationStrategy.authorize(form,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
add(form);
}","public ApprovalModalPage(final PageReference callerPageRef,final ModalWindow window,final WorkflowFormTO formTO){
  super();
  IModel<List<WorkflowFormPropertyTO>> formProps=new LoadableDetachableModel<List<WorkflowFormPropertyTO>>(){
    private static final long serialVersionUID=3169142472626817508L;
    @Override protected List<WorkflowFormPropertyTO> load(){
      return formTO.getProperties();
    }
  }
;
  final ListView<WorkflowFormPropertyTO> propView=new ListView<WorkflowFormPropertyTO>(""String_Node_Str"",formProps){
    private static final long serialVersionUID=9101744072914090143L;
    @Override protected void populateItem(    final ListItem<WorkflowFormPropertyTO> item){
      final WorkflowFormPropertyTO prop=item.getModelObject();
      Label label=new Label(""String_Node_Str"",prop.getName() == null ? prop.getId() : prop.getName());
      item.add(label);
      FieldPanel field=null;
switch (prop.getType()) {
case Boolean:
        field=new AjaxDropDownChoicePanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(Boolean.valueOf(prop.getValue())),true).setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
      break;
case Date:
    SimpleDateFormat df=StringUtils.isNotBlank(prop.getDatePattern()) ? new SimpleDateFormat(prop.getDatePattern()) : new SimpleDateFormat();
  Date parsedDate=null;
if (StringUtils.isNotBlank(prop.getValue())) {
  try {
    parsedDate=df.parse(prop.getValue());
  }
 catch (  ParseException e) {
    LOG.error(""String_Node_Str"",prop.getValue(),e);
  }
}
field=new DateTimeFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(parsedDate),true,df.toLocalizedPattern());
break;
case Enum:
MapChoiceRenderer<String,String> enumCR=new MapChoiceRenderer<String,String>(prop.getEnumValues());
field=new AjaxDropDownChoicePanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(prop.getValue()),true).setChoiceRenderer(enumCR).setChoices(new Model(){
private static final long serialVersionUID=-858521070366432018L;
@Override public Serializable getObject(){
return new ArrayList(prop.getEnumValues().keySet());
}
}
);
break;
case Long:
field=new AjaxNumberFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(Long.valueOf(prop.getValue())),Long.class,true);
break;
case String:
default :
field=new AjaxTextFieldPanel(""String_Node_Str"",PARENT_PATH,new Model(prop.getValue()),true);
break;
}
field.setReadOnly(!prop.isWritable());
if (prop.isRequired()) {
field.addRequiredLabel();
}
item.add(field);
}
}
;
final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form<?> form){
Map<String,WorkflowFormPropertyTO> props=formTO.getPropertiesAsMap();
for (int i=0; i < propView.size(); i++) {
ListItem<WorkflowFormPropertyTO> item=(ListItem<WorkflowFormPropertyTO>)propView.get(i);
String input=((FieldPanel)item.get(""String_Node_Str"")).getField().getInput();
if (!props.containsKey(item.getModelObject().getId())) {
props.put(item.getModelObject().getId(),new WorkflowFormPropertyTO());
}
if (item.getModelObject().isWritable()) {
switch (item.getModelObject().getType()) {
case Boolean:
props.get(item.getModelObject().getId()).setValue(String.valueOf(input.equals(""String_Node_Str"")));
break;
case Date:
case Enum:
case String:
case Long:
default :
props.get(item.getModelObject().getId()).setValue(input);
break;
}
}
}
formTO.setProperties(props.values());
try {
restClient.submitForm(formTO);
((Todo)callerPageRef.getPage()).setModalResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
LOG.error(""String_Node_Str"",formTO,e);
target.add(feedbackPanel);
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form<?> form){
target.add(feedbackPanel);
}
}
;
Form form=new Form(""String_Node_Str"");
form.add(propView);
form.add(submit);
MetaDataRoleAuthorizationStrategy.authorize(form,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
add(form);
}"
60668,"@Override protected void populateItem(final ListItem<ConnConfProperty> item){
  final ConnConfProperty property=item.getModelObject();
  final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
  item.add(label);
  final FieldPanel field;
  boolean required=false;
  if (GUARDED_STRING.equalsIgnoreCase(property.getSchema().getType())) {
    field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
    ((PasswordTextField)field.getField()).setResetPassword(false);
    required=property.getSchema().isRequired();
  }
 else   if (BOOLEAN.equalsIgnoreCase(property.getSchema().getType())) {
    field=new AjaxCheckBoxPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
  }
 else {
    field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
    required=property.getSchema().isRequired();
  }
  field.setTitle(property.getSchema().getHelpMessage());
  if (required) {
    field.addRequiredLabel();
  }
  if (STRING_ARRAY.equalsIgnoreCase(property.getSchema().getType())) {
    field.removeRequiredLabel();
    item.add(new MultiValueSelectorPanel<String>(""String_Node_Str"",new PropertyModel<List<String>>(property,""String_Node_Str""),String.class,field));
  }
 else {
    field.setNewModel(property.getValues());
    item.add(field);
  }
  final AjaxCheckBoxPanel overridable=new AjaxCheckBoxPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel(property,""String_Node_Str""),true);
  item.add(overridable);
  connectorTO.getConfiguration().add(property);
}","@Override protected void populateItem(final ListItem<ConnConfProperty> item){
  final ConnConfProperty property=item.getModelObject();
  final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
  item.add(label);
  final FieldPanel field;
  boolean required=false;
  boolean isArray=false;
  if (GUARDED_STRING.equalsIgnoreCase(property.getSchema().getType()) || GUARDED_BYTE_ARRAY.equalsIgnoreCase(property.getSchema().getType())) {
    field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
    ((PasswordTextField)field.getField()).setResetPassword(false);
    required=property.getSchema().isRequired();
  }
 else {
    Class propertySchemaClass;
    try {
      propertySchemaClass=ClassUtils.forName(property.getSchema().getType(),ClassUtils.getDefaultClassLoader());
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
      propertySchemaClass=String.class;
    }
    if (NUMBER.contains(propertySchemaClass)) {
      field=new AjaxNumberFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),ClassUtils.resolvePrimitiveIfNecessary(propertySchemaClass),true);
      required=property.getSchema().isRequired();
    }
 else     if (Boolean.class.equals(propertySchemaClass) || boolean.class.equals(propertySchemaClass)) {
      field=new AjaxCheckBoxPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
    }
 else {
      field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
      required=property.getSchema().isRequired();
    }
    if (String[].class.equals(propertySchemaClass)) {
      isArray=true;
    }
  }
  field.setTitle(property.getSchema().getHelpMessage());
  if (isArray) {
    field.removeRequiredLabel();
    if (property.getValues().isEmpty()) {
      property.getValues().add(null);
    }
    item.add(new MultiValueSelectorPanel<String>(""String_Node_Str"",new PropertyModel<List<String>>(property,""String_Node_Str""),String.class,field));
  }
 else {
    if (required) {
      field.addRequiredLabel();
    }
    field.setNewModel(property.getValues());
    item.add(field);
  }
  final AjaxCheckBoxPanel overridable=new AjaxCheckBoxPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel(property,""String_Node_Str""),true);
  item.add(overridable);
  connectorTO.getConfiguration().add(property);
}"
60669,"public ConnectorModalPage(final PageReference callerPageRef,final ModalWindow window,final ConnInstanceTO connectorTO,final boolean createFlag){
  super();
  selectedCapabilities=new ArrayList(createFlag ? EnumSet.noneOf(ConnectorCapability.class) : connectorTO.getCapabilities());
  IModel<List<ConnConfProperty>> selectedBundleProperties=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      List<ConnConfProperty> result;
      if (createFlag) {
        connectorTO.setConnectorName(selectedBundleTO.getConnectorName());
        connectorTO.setVersion(selectedBundleTO.getVersion());
        result=new ArrayList<ConnConfProperty>();
        ConnConfProperty propertyTO;
        for (        ConnConfPropSchema key : selectedBundleTO.getProperties()) {
          propertyTO=new ConnConfProperty();
          propertyTO.setSchema(key);
          result.add(propertyTO);
        }
      }
 else {
        selectedBundleTO.setBundleName(connectorTO.getBundleName());
        selectedBundleTO.setVersion(connectorTO.getVersion());
        result=new ArrayList<ConnConfProperty>(connectorTO.getConfiguration());
      }
      if (result != null && !result.isEmpty()) {
        Collections.sort(result);
      }
      return result;
    }
  }
;
  final AjaxTextFieldPanel connectorName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  connectorName.setOutputMarkupId(true);
  connectorName.setEnabled(false);
  final AjaxTextFieldPanel displayName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  displayName.addRequiredLabel();
  final AjaxTextFieldPanel version=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  version.setEnabled(false);
  final IModel<List<ConnBundleTO>> bundles=new LoadableDetachableModel<List<ConnBundleTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnBundleTO> load(){
      return restClient.getAllBundles();
    }
  }
;
  final AjaxDropDownChoicePanel<ConnBundleTO> bundle=new AjaxDropDownChoicePanel<ConnBundleTO>(""String_Node_Str"",""String_Node_Str"",new Model(null),false);
  bundle.setStyleShet(""String_Node_Str"");
  bundle.setChoices(bundles.getObject());
  bundle.setChoiceRenderer(new ChoiceRenderer<ConnBundleTO>(){
    private static final long serialVersionUID=-1945543182376191187L;
    @Override public Object getDisplayValue(    final ConnBundleTO object){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
    @Override public String getIdValue(    final ConnBundleTO object,    final int index){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
  }
);
  ((DropDownChoice)bundle.getField()).setNullValid(true);
  bundle.setRequired(true);
  bundle.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      connectorTO.setConfiguration(new HashSet<ConnConfProperty>());
      DropDownChoice bundleChoice=(DropDownChoice)bundle.getField();
      bundleChoice.setNullValid(false);
      target.add(bundle.getField());
      target.add(propertiesContainer);
      target.add(connectorName);
      target.add(version);
    }
  }
);
  bundle.getField().setModel(new IModel<ConnBundleTO>(){
    private static final long serialVersionUID=-3736598995576061229L;
    @Override public ConnBundleTO getObject(){
      return selectedBundleTO;
    }
    @Override public void setObject(    final ConnBundleTO object){
      selectedBundleTO=object;
    }
    @Override public void detach(){
    }
  }
);
  bundle.addRequiredLabel();
  bundle.setEnabled(createFlag);
  final ListView<ConnConfProperty> propView=new ListView<ConnConfProperty>(""String_Node_Str"",selectedBundleProperties){
    private static final long serialVersionUID=9101744072914090143L;
    @Override protected void populateItem(    final ListItem<ConnConfProperty> item){
      final ConnConfProperty property=item.getModelObject();
      final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
      item.add(label);
      final FieldPanel field;
      boolean required=false;
      if (GUARDED_STRING.equalsIgnoreCase(property.getSchema().getType())) {
        field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
        ((PasswordTextField)field.getField()).setResetPassword(false);
        required=property.getSchema().isRequired();
      }
 else       if (BOOLEAN.equalsIgnoreCase(property.getSchema().getType())) {
        field=new AjaxCheckBoxPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
      }
 else {
        field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
        required=property.getSchema().isRequired();
      }
      field.setTitle(property.getSchema().getHelpMessage());
      if (required) {
        field.addRequiredLabel();
      }
      if (STRING_ARRAY.equalsIgnoreCase(property.getSchema().getType())) {
        field.removeRequiredLabel();
        item.add(new MultiValueSelectorPanel<String>(""String_Node_Str"",new PropertyModel<List<String>>(property,""String_Node_Str""),String.class,field));
      }
 else {
        field.setNewModel(property.getValues());
        item.add(field);
      }
      final AjaxCheckBoxPanel overridable=new AjaxCheckBoxPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel(property,""String_Node_Str""),true);
      item.add(overridable);
      connectorTO.getConfiguration().add(property);
    }
  }
;
  propertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  propertiesContainer.setOutputMarkupId(true);
  propertiesContainer.add(propView);
  Form connectorForm=new Form(""String_Node_Str"");
  connectorForm.setModel(new CompoundPropertyModel(connectorTO));
  connectorForm.add(propertiesContainer);
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
      ConnBundleTO bundleTO=(ConnBundleTO)bundle.getModelObject();
      connector.setBundleName(bundleTO.getBundleName());
      if (!selectedCapabilities.isEmpty()) {
        connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
      }
 else {
        connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
      }
      try {
        if (createFlag) {
          restClient.create(connector);
        }
 else {
          restClient.update(connector);
        }
        ((Resources)callerPageRef.getPage()).setModalResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
        ((Resources)callerPageRef.getPage()).setModalResult(false);
        LOG.error(""String_Node_Str"" + connector);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=createFlag ? xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"") : xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  connectorForm.add(connectorName);
  connectorForm.add(displayName);
  connectorForm.add(bundle);
  connectorForm.add(version);
  final IModel<List<ConnectorCapability>> capabilities=new LoadableDetachableModel<List<ConnectorCapability>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnectorCapability> load(){
      return Arrays.asList(ConnectorCapability.values());
    }
  }
;
  capabilitiesPalette=new CheckBoxMultipleChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),capabilities);
  connectorForm.add(capabilitiesPalette);
  connectorForm.add(submit);
  add(connectorForm);
}","public ConnectorModalPage(final PageReference callerPageRef,final ModalWindow window,final ConnInstanceTO connectorTO,final boolean createFlag){
  super();
  selectedCapabilities=new ArrayList(createFlag ? EnumSet.noneOf(ConnectorCapability.class) : connectorTO.getCapabilities());
  IModel<List<ConnConfProperty>> selectedBundleProperties=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      List<ConnConfProperty> result;
      if (createFlag) {
        connectorTO.setConnectorName(selectedBundleTO.getConnectorName());
        connectorTO.setVersion(selectedBundleTO.getVersion());
        result=new ArrayList<ConnConfProperty>();
        ConnConfProperty propertyTO;
        for (        ConnConfPropSchema key : selectedBundleTO.getProperties()) {
          propertyTO=new ConnConfProperty();
          propertyTO.setSchema(key);
          result.add(propertyTO);
        }
      }
 else {
        selectedBundleTO.setBundleName(connectorTO.getBundleName());
        selectedBundleTO.setVersion(connectorTO.getVersion());
        result=new ArrayList<ConnConfProperty>(connectorTO.getConfiguration());
      }
      if (result != null && !result.isEmpty()) {
        Collections.sort(result);
      }
      return result;
    }
  }
;
  final AjaxTextFieldPanel connectorName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  connectorName.setOutputMarkupId(true);
  connectorName.setEnabled(false);
  final AjaxTextFieldPanel displayName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  displayName.addRequiredLabel();
  final AjaxTextFieldPanel version=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  version.setEnabled(false);
  final IModel<List<ConnBundleTO>> bundles=new LoadableDetachableModel<List<ConnBundleTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnBundleTO> load(){
      return restClient.getAllBundles();
    }
  }
;
  final AjaxDropDownChoicePanel<ConnBundleTO> bundle=new AjaxDropDownChoicePanel<ConnBundleTO>(""String_Node_Str"",""String_Node_Str"",new Model(null),false);
  bundle.setStyleShet(""String_Node_Str"");
  bundle.setChoices(bundles.getObject());
  bundle.setChoiceRenderer(new ChoiceRenderer<ConnBundleTO>(){
    private static final long serialVersionUID=-1945543182376191187L;
    @Override public Object getDisplayValue(    final ConnBundleTO object){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
    @Override public String getIdValue(    final ConnBundleTO object,    final int index){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
  }
);
  ((DropDownChoice)bundle.getField()).setNullValid(true);
  bundle.setRequired(true);
  bundle.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      connectorTO.setConfiguration(new HashSet<ConnConfProperty>());
      DropDownChoice bundleChoice=(DropDownChoice)bundle.getField();
      bundleChoice.setNullValid(false);
      target.add(bundle.getField());
      target.add(propertiesContainer);
      target.add(connectorName);
      target.add(version);
    }
  }
);
  bundle.getField().setModel(new IModel<ConnBundleTO>(){
    private static final long serialVersionUID=-3736598995576061229L;
    @Override public ConnBundleTO getObject(){
      return selectedBundleTO;
    }
    @Override public void setObject(    final ConnBundleTO object){
      selectedBundleTO=object;
    }
    @Override public void detach(){
    }
  }
);
  bundle.addRequiredLabel();
  bundle.setEnabled(createFlag);
  final ListView<ConnConfProperty> propView=new ListView<ConnConfProperty>(""String_Node_Str"",selectedBundleProperties){
    private static final long serialVersionUID=9101744072914090143L;
    @Override protected void populateItem(    final ListItem<ConnConfProperty> item){
      final ConnConfProperty property=item.getModelObject();
      final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
      item.add(label);
      final FieldPanel field;
      boolean required=false;
      boolean isArray=false;
      if (GUARDED_STRING.equalsIgnoreCase(property.getSchema().getType()) || GUARDED_BYTE_ARRAY.equalsIgnoreCase(property.getSchema().getType())) {
        field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
        ((PasswordTextField)field.getField()).setResetPassword(false);
        required=property.getSchema().isRequired();
      }
 else {
        Class propertySchemaClass;
        try {
          propertySchemaClass=ClassUtils.forName(property.getSchema().getType(),ClassUtils.getDefaultClassLoader());
        }
 catch (        Exception e) {
          LOG.error(""String_Node_Str"",e);
          propertySchemaClass=String.class;
        }
        if (NUMBER.contains(propertySchemaClass)) {
          field=new AjaxNumberFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),ClassUtils.resolvePrimitiveIfNecessary(propertySchemaClass),true);
          required=property.getSchema().isRequired();
        }
 else         if (Boolean.class.equals(propertySchemaClass) || boolean.class.equals(propertySchemaClass)) {
          field=new AjaxCheckBoxPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
        }
 else {
          field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
          required=property.getSchema().isRequired();
        }
        if (String[].class.equals(propertySchemaClass)) {
          isArray=true;
        }
      }
      field.setTitle(property.getSchema().getHelpMessage());
      if (isArray) {
        field.removeRequiredLabel();
        if (property.getValues().isEmpty()) {
          property.getValues().add(null);
        }
        item.add(new MultiValueSelectorPanel<String>(""String_Node_Str"",new PropertyModel<List<String>>(property,""String_Node_Str""),String.class,field));
      }
 else {
        if (required) {
          field.addRequiredLabel();
        }
        field.setNewModel(property.getValues());
        item.add(field);
      }
      final AjaxCheckBoxPanel overridable=new AjaxCheckBoxPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel(property,""String_Node_Str""),true);
      item.add(overridable);
      connectorTO.getConfiguration().add(property);
    }
  }
;
  propertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  propertiesContainer.setOutputMarkupId(true);
  propertiesContainer.add(propView);
  Form connectorForm=new Form(""String_Node_Str"");
  connectorForm.setModel(new CompoundPropertyModel(connectorTO));
  connectorForm.add(propertiesContainer);
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
      ConnBundleTO bundleTO=(ConnBundleTO)bundle.getModelObject();
      connector.setBundleName(bundleTO.getBundleName());
      if (!selectedCapabilities.isEmpty()) {
        connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
      }
 else {
        connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
      }
      try {
        if (createFlag) {
          restClient.create(connector);
        }
 else {
          restClient.update(connector);
        }
        ((Resources)callerPageRef.getPage()).setModalResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
        ((Resources)callerPageRef.getPage()).setModalResult(false);
        LOG.error(""String_Node_Str"" + connector);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=createFlag ? xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"") : xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  connectorForm.add(connectorName);
  connectorForm.add(displayName);
  connectorForm.add(bundle);
  connectorForm.add(version);
  final IModel<List<ConnectorCapability>> capabilities=new LoadableDetachableModel<List<ConnectorCapability>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnectorCapability> load(){
      return Arrays.asList(ConnectorCapability.values());
    }
  }
;
  capabilitiesPalette=new CheckBoxMultipleChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),capabilities);
  connectorForm.add(capabilitiesPalette);
  connectorForm.add(submit);
  add(connectorForm);
}"
60670,"public ResourceModalPage(final PageReference callPageRef,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  super();
  uSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  uDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  uVirSchemaAttrNames=schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
  final IModel<List<ConnInstanceTO>> connectors=new LoadableDetachableModel<List<ConnInstanceTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnInstanceTO> load(){
      return connectorRestClient.getAllConnectors();
    }
  }
;
  final IModel<List<IntMappingType>> intMappingTypes=new LoadableDetachableModel<List<IntMappingType>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<IntMappingType> load(){
      return Arrays.asList(IntMappingType.values());
    }
  }
;
  final IModel<List<ConnConfProperty>> connectorPropertiesModel=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      Set<ConnConfProperty> props=resourceTO.getConnectorConfigurationProperties();
      if (props == null || props.isEmpty() || createFlag) {
        props=overridableConnectorProperties;
      }
      return new ArrayList<ConnConfProperty>(props);
    }
  }
;
  updateResourceSchemaNames(resourceTO);
  updateConnectorProperties(resourceTO.getConnectorId());
  final ConnInstanceTO connectorTO=new ConnInstanceTO();
  if (!createFlag) {
    connectorTO.setId(resourceTO.getConnectorId());
  }
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(resourceTO));
  final AjaxTextFieldPanel resourceName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  resourceName.setEnabled(createFlag);
  resourceName.addRequiredLabel();
  form.add(resourceName);
  final AjaxTextFieldPanel accountLink=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  form.add(accountLink);
  final AjaxCheckBoxPanel forceMandatoryConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(forceMandatoryConstraint);
  final AjaxCheckBoxPanel propagationPrimary=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(propagationPrimary);
  final AjaxNumberFieldPanel propagationPriority=new AjaxNumberFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Number>(resourceTO,""String_Node_Str""),false);
  form.add(propagationPriority);
  final AjaxDropDownChoicePanel<PropagationMode> propagationMode=new AjaxDropDownChoicePanel<PropagationMode>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  propagationMode.setChoices(Arrays.asList(PropagationMode.values()));
  form.add(propagationMode);
  final AjaxDropDownChoicePanel<TraceLevel> createTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  createTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(createTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> updateTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  updateTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(updateTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> deleteTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  deleteTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(deleteTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> syncTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  syncTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(syncTraceLevel);
  final AjaxCheckBoxPanel resetToken=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new Model(null),false);
  resetToken.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget art){
      if (resetToken.getModelObject()) {
        resourceTO.setSyncToken(null);
      }
    }
  }
);
  form.add(resetToken);
  mappingContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingContainer.setOutputMarkupId(true);
  form.add(mappingContainer);
  connectorPropertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  connectorPropertiesContainer.setOutputMarkupId(true);
  form.add(connectorPropertiesContainer);
  final AjaxDropDownChoicePanel<ConnInstanceTO> connector=new AjaxDropDownChoicePanel<ConnInstanceTO>(""String_Node_Str"",getString(""String_Node_Str""),new Model<ConnInstanceTO>(connectorTO),false);
  connector.setChoices(connectors.getObject());
  connector.setChoiceRenderer(new ChoiceRenderer(""String_Node_Str"",""String_Node_Str""));
  connector.getField().setModel(new IModel<ConnInstanceTO>(){
    private static final long serialVersionUID=-4202872830392400310L;
    @Override public ConnInstanceTO getObject(){
      return connectorTO;
    }
    @Override public void setObject(    final ConnInstanceTO connector){
      resourceTO.setConnectorId(connector.getId());
    }
    @Override public void detach(){
    }
  }
);
  connector.addRequiredLabel();
  connector.setEnabled(createFlag);
  form.add(connector);
  final ListView<SchemaMappingTO> mappings=new ListView<SchemaMappingTO>(""String_Node_Str"",resourceTO.getMappings()){
    private static final long serialVersionUID=4949588177564901031L;
    @Override protected void populateItem(    final ListItem<SchemaMappingTO> item){
      final SchemaMappingTO mappingTO=item.getModelObject();
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
        private static final long serialVersionUID=7170946748485726506L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int index=-1;
          for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
            if (mappingTO.equals(resourceTO.getMappings().get(i))) {
              index=i;
            }
          }
          if (index != -1) {
            resourceTO.getMappings().remove(index);
            item.getParent().removeAll();
            target.add(mappingContainer);
          }
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=-7927968187160354605L;
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      final AjaxDropDownChoicePanel intAttrNames=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
      intAttrNames.setChoices(resourceSchemaNames);
      intAttrNames.setRequired(true);
      intAttrNames.setStyleShet(""String_Node_Str"");
      if (mappingTO.getIntMappingType() == null) {
        intAttrNames.setChoices(Collections.EMPTY_LIST);
      }
 else {
switch (mappingTO.getIntMappingType()) {
case UserSchema:
          intAttrNames.setChoices(uSchemaAttrNames);
        break;
case UserDerivedSchema:
      intAttrNames.setChoices(uDerSchemaAttrNames);
    break;
case UserVirtualSchema:
  intAttrNames.setChoices(uVirSchemaAttrNames);
break;
case SyncopeUserId:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
case Password:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
case Username:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
default :
intAttrNames.setChoices(Collections.EMPTY_LIST);
}
}
item.add(intAttrNames);
final IntMappingTypesDropDownChoice mappingTypesPanel=new IntMappingTypesDropDownChoice(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<IntMappingType>(mappingTO,""String_Node_Str""),intAttrNames);
mappingTypesPanel.setRequired(true);
mappingTypesPanel.setChoices(intMappingTypes.getObject());
mappingTypesPanel.setStyleShet(""String_Node_Str"");
item.add(mappingTypesPanel);
final FieldPanel extAttrName;
if (resourceSchemaNames.isEmpty()) {
extAttrName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(mappingTO,""String_Node_Str""),true);
}
 else {
extAttrName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
((AjaxDropDownChoicePanel)extAttrName).setChoices(resourceSchemaNames);
}
boolean required=mappingTO != null && !mappingTO.isAccountid() && !mappingTO.isPassword();
extAttrName.setRequired(required);
extAttrName.setEnabled(required);
extAttrName.setStyleShet(""String_Node_Str"");
item.add(extAttrName);
final AjaxTextFieldPanel mandatoryCondition=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
mandatoryCondition.setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
mandatoryCondition.setStyleShet(""String_Node_Str"");
item.add(mandatoryCondition);
final AjaxCheckBoxPanel accountId=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),false);
accountId.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!accountId.getModelObject() && !mappingTO.isPassword());
extAttrName.setModelObject(null);
extAttrName.setRequired(!accountId.getModelObject());
target.add(extAttrName);
}
}
);
item.add(accountId);
final AjaxCheckBoxPanel password=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
password.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!mappingTO.isAccountid() && !password.getModelObject());
extAttrName.setModelObject(null);
extAttrName.setRequired(!password.getModelObject());
target.add(extAttrName);
}
}
);
item.add(password);
}
}
;
mappings.setReuseItems(true);
mappingContainer.add(mappings);
final AjaxButton addSchemaMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-4804368561204623354L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
resourceTO.getMappings().add(new SchemaMappingTO());
target.add(mappingContainer);
}
@Override protected void onError(AjaxRequestTarget target,Form<?> form){
}
}
;
addSchemaMappingBtn.setDefaultFormProcessing(false);
addSchemaMappingBtn.setEnabled(!createFlag);
mappingContainer.add(addSchemaMappingBtn);
connectorPropertiesContainer.add(new ListView<ConnConfProperty>(""String_Node_Str"",connectorPropertiesModel){
private static final long serialVersionUID=9101744072914090143L;
@Override protected void populateItem(final ListItem<ConnConfProperty> item){
final ConnConfProperty property=item.getModelObject();
final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
item.add(label);
final FieldPanel field;
if (GUARDED_STRING.equals(property.getSchema().getType())) {
field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
}
 else {
field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),false).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
if (property.getSchema().isRequired()) {
field.addRequiredLabel();
}
}
field.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
target.add(mappingContainer);
}
}
);
item.add(field);
resourceTO.getConnectorConfigurationProperties().add(property);
}
}
);
connector.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
updateConnectorProperties(resourceTO.getConnectorId());
target.add(mappingContainer);
target.add(connectorPropertiesContainer);
}
}
);
form.add(new ResourceSecurityPanel(""String_Node_Str"",resourceTO));
AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
int accountIdCount=0;
for (SchemaMappingTO mapping : resourceTO.getMappings()) {
if (mapping.isAccountid()) {
accountIdCount++;
}
}
if (accountIdCount == 0 || accountIdCount > 1) {
error(getString(""String_Node_Str""));
target.add(feedbackPanel);
}
 else {
try {
if (createFlag) {
restClient.create(resourceTO);
}
 else {
restClient.update(resourceTO);
}
((Resources)callPageRef.getPage()).setModalResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
LOG.error(""String_Node_Str"",resourceTO);
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
target.add(feedbackPanel);
}
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.add(feedbackPanel);
}
}
;
form.add(submit);
add(form);
MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",createFlag ? ""String_Node_Str"" : ""String_Node_Str""));
}","public ResourceModalPage(final PageReference callPageRef,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  super();
  uSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  uDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  uVirSchemaAttrNames=schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
  final IModel<List<ConnInstanceTO>> connectors=new LoadableDetachableModel<List<ConnInstanceTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnInstanceTO> load(){
      return connectorRestClient.getAllConnectors();
    }
  }
;
  final IModel<List<IntMappingType>> intMappingTypes=new LoadableDetachableModel<List<IntMappingType>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<IntMappingType> load(){
      return Arrays.asList(IntMappingType.values());
    }
  }
;
  final IModel<List<ConnConfProperty>> connectorPropertiesModel=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      Set<ConnConfProperty> props=resourceTO.getConnectorConfigurationProperties();
      if (props == null || props.isEmpty() || createFlag) {
        props=overridableConnectorProperties;
      }
      return new ArrayList<ConnConfProperty>(props);
    }
  }
;
  updateResourceSchemaNames(resourceTO);
  updateConnectorProperties(resourceTO.getConnectorId());
  final ConnInstanceTO connectorTO=new ConnInstanceTO();
  if (!createFlag) {
    connectorTO.setId(resourceTO.getConnectorId());
  }
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(resourceTO));
  final AjaxTextFieldPanel resourceName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  resourceName.setEnabled(createFlag);
  resourceName.addRequiredLabel();
  form.add(resourceName);
  final AjaxTextFieldPanel accountLink=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  form.add(accountLink);
  final AjaxCheckBoxPanel forceMandatoryConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(forceMandatoryConstraint);
  final AjaxCheckBoxPanel propagationPrimary=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(propagationPrimary);
  final AjaxNumberFieldPanel propagationPriority=new AjaxNumberFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Number>(resourceTO,""String_Node_Str""),Integer.class,false);
  form.add(propagationPriority);
  final AjaxDropDownChoicePanel<PropagationMode> propagationMode=new AjaxDropDownChoicePanel<PropagationMode>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  propagationMode.setChoices(Arrays.asList(PropagationMode.values()));
  form.add(propagationMode);
  final AjaxDropDownChoicePanel<TraceLevel> createTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  createTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(createTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> updateTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  updateTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(updateTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> deleteTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  deleteTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(deleteTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> syncTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  syncTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(syncTraceLevel);
  final AjaxCheckBoxPanel resetToken=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new Model(null),false);
  resetToken.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget art){
      if (resetToken.getModelObject()) {
        resourceTO.setSyncToken(null);
      }
    }
  }
);
  form.add(resetToken);
  mappingContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingContainer.setOutputMarkupId(true);
  form.add(mappingContainer);
  connectorPropertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  connectorPropertiesContainer.setOutputMarkupId(true);
  form.add(connectorPropertiesContainer);
  final AjaxDropDownChoicePanel<ConnInstanceTO> connector=new AjaxDropDownChoicePanel<ConnInstanceTO>(""String_Node_Str"",getString(""String_Node_Str""),new Model<ConnInstanceTO>(connectorTO),false);
  connector.setChoices(connectors.getObject());
  connector.setChoiceRenderer(new ChoiceRenderer(""String_Node_Str"",""String_Node_Str""));
  connector.getField().setModel(new IModel<ConnInstanceTO>(){
    private static final long serialVersionUID=-4202872830392400310L;
    @Override public ConnInstanceTO getObject(){
      return connectorTO;
    }
    @Override public void setObject(    final ConnInstanceTO connector){
      resourceTO.setConnectorId(connector.getId());
    }
    @Override public void detach(){
    }
  }
);
  connector.addRequiredLabel();
  connector.setEnabled(createFlag);
  form.add(connector);
  final ListView<SchemaMappingTO> mappings=new ListView<SchemaMappingTO>(""String_Node_Str"",resourceTO.getMappings()){
    private static final long serialVersionUID=4949588177564901031L;
    @Override protected void populateItem(    final ListItem<SchemaMappingTO> item){
      final SchemaMappingTO mappingTO=item.getModelObject();
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
        private static final long serialVersionUID=7170946748485726506L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int index=-1;
          for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
            if (mappingTO.equals(resourceTO.getMappings().get(i))) {
              index=i;
            }
          }
          if (index != -1) {
            resourceTO.getMappings().remove(index);
            item.getParent().removeAll();
            target.add(mappingContainer);
          }
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=-7927968187160354605L;
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      final AjaxDropDownChoicePanel intAttrNames=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
      intAttrNames.setChoices(resourceSchemaNames);
      intAttrNames.setRequired(true);
      intAttrNames.setStyleShet(""String_Node_Str"");
      if (mappingTO.getIntMappingType() == null) {
        intAttrNames.setChoices(Collections.EMPTY_LIST);
      }
 else {
switch (mappingTO.getIntMappingType()) {
case UserSchema:
          intAttrNames.setChoices(uSchemaAttrNames);
        break;
case UserDerivedSchema:
      intAttrNames.setChoices(uDerSchemaAttrNames);
    break;
case UserVirtualSchema:
  intAttrNames.setChoices(uVirSchemaAttrNames);
break;
case SyncopeUserId:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
case Password:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
case Username:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
default :
intAttrNames.setChoices(Collections.EMPTY_LIST);
}
}
item.add(intAttrNames);
final IntMappingTypesDropDownChoice mappingTypesPanel=new IntMappingTypesDropDownChoice(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<IntMappingType>(mappingTO,""String_Node_Str""),intAttrNames);
mappingTypesPanel.setRequired(true);
mappingTypesPanel.setChoices(intMappingTypes.getObject());
mappingTypesPanel.setStyleShet(""String_Node_Str"");
item.add(mappingTypesPanel);
final FieldPanel extAttrName;
if (resourceSchemaNames.isEmpty()) {
extAttrName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(mappingTO,""String_Node_Str""),true);
}
 else {
extAttrName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
((AjaxDropDownChoicePanel)extAttrName).setChoices(resourceSchemaNames);
}
boolean required=mappingTO != null && !mappingTO.isAccountid() && !mappingTO.isPassword();
extAttrName.setRequired(required);
extAttrName.setEnabled(required);
extAttrName.setStyleShet(""String_Node_Str"");
item.add(extAttrName);
final AjaxTextFieldPanel mandatoryCondition=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
mandatoryCondition.setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
mandatoryCondition.setStyleShet(""String_Node_Str"");
item.add(mandatoryCondition);
final AjaxCheckBoxPanel accountId=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),false);
accountId.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!accountId.getModelObject() && !mappingTO.isPassword());
extAttrName.setModelObject(null);
extAttrName.setRequired(!accountId.getModelObject());
target.add(extAttrName);
}
}
);
item.add(accountId);
final AjaxCheckBoxPanel password=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
password.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!mappingTO.isAccountid() && !password.getModelObject());
extAttrName.setModelObject(null);
extAttrName.setRequired(!password.getModelObject());
target.add(extAttrName);
}
}
);
item.add(password);
}
}
;
mappings.setReuseItems(true);
mappingContainer.add(mappings);
final AjaxButton addSchemaMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-4804368561204623354L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
resourceTO.getMappings().add(new SchemaMappingTO());
target.add(mappingContainer);
}
@Override protected void onError(AjaxRequestTarget target,Form<?> form){
}
}
;
addSchemaMappingBtn.setDefaultFormProcessing(false);
addSchemaMappingBtn.setEnabled(!createFlag);
mappingContainer.add(addSchemaMappingBtn);
connectorPropertiesContainer.add(new ListView<ConnConfProperty>(""String_Node_Str"",connectorPropertiesModel){
private static final long serialVersionUID=9101744072914090143L;
@Override protected void populateItem(final ListItem<ConnConfProperty> item){
final ConnConfProperty property=item.getModelObject();
final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
item.add(label);
final FieldPanel field;
if (GUARDED_STRING.equals(property.getSchema().getType())) {
field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
}
 else {
field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),false).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
if (property.getSchema().isRequired()) {
field.addRequiredLabel();
}
}
field.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
target.add(mappingContainer);
}
}
);
item.add(field);
resourceTO.getConnectorConfigurationProperties().add(property);
}
}
);
connector.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
updateConnectorProperties(resourceTO.getConnectorId());
target.add(mappingContainer);
target.add(connectorPropertiesContainer);
}
}
);
form.add(new ResourceSecurityPanel(""String_Node_Str"",resourceTO));
AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
int accountIdCount=0;
for (SchemaMappingTO mapping : resourceTO.getMappings()) {
if (mapping.isAccountid()) {
accountIdCount++;
}
}
if (accountIdCount == 0 || accountIdCount > 1) {
error(getString(""String_Node_Str""));
target.add(feedbackPanel);
}
 else {
try {
if (createFlag) {
restClient.create(resourceTO);
}
 else {
restClient.update(resourceTO);
}
((Resources)callPageRef.getPage()).setModalResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
LOG.error(""String_Node_Str"",resourceTO);
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
target.add(feedbackPanel);
}
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.add(feedbackPanel);
}
}
;
form.add(submit);
add(form);
MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",createFlag ? ""String_Node_Str"" : ""String_Node_Str""));
}"
60671,"public <T extends AbstractAttributableTO>UserDetailsPanel(final String id,final UserTO userTO,final Form form,final boolean resetPassword,final boolean templateMode){
  super(id);
  final FieldPanel username=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(userTO,""String_Node_Str""),true);
  if (!templateMode) {
    username.addRequiredLabel();
  }
  add(username);
  final FieldPanel password;
  final Label confirmPasswordLabel=new Label(""String_Node_Str"",new ResourceModel(""String_Node_Str""));
  final FieldPanel confirmPassword;
  if (templateMode) {
    password=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(userTO,""String_Node_Str""),true);
    confirmPasswordLabel.setVisible(false);
    confirmPassword=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<String>(),false);
    confirmPassword.setEnabled(false);
    confirmPassword.setVisible(false);
  }
 else {
    password=new AjaxPasswordFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(userTO,""String_Node_Str""),true);
    password.setRequired(userTO.getId() == 0);
    ((PasswordTextField)password.getField()).setResetPassword(resetPassword);
    confirmPassword=new AjaxPasswordFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<String>(),true);
    if (!resetPassword) {
      confirmPassword.getField().setModelObject(userTO.getPassword());
    }
    confirmPassword.setRequired(userTO.getId() == 0);
    ((PasswordTextField)confirmPassword.getField()).setResetPassword(resetPassword);
    form.add(new EqualPasswordInputValidator(password.getField(),confirmPassword.getField()));
  }
  add(password);
  add(confirmPasswordLabel);
  add(confirmPassword);
  final WebMarkupContainer mandatoryPassword=new WebMarkupContainer(""String_Node_Str"");
  mandatoryPassword.add(new Behavior(){
    private static final long serialVersionUID=1469628524240283489L;
    @Override public void onComponentTag(    final Component component,    final ComponentTag tag){
      if (userTO.getId() > 0) {
        tag.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  add(mandatoryPassword);
  final AjaxTextFieldPanel status=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<String>(userTO.getStatus()),false);
  status.setReadOnly(true);
  add(status);
  final DateTimeFieldPanel creationDate=new DateTimeFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<Date>(userTO.getCreationDate()),false,SyncopeSession.get().getDateFormat().toLocalizedPattern());
  creationDate.setReadOnly(true);
  add(creationDate);
  final DateTimeFieldPanel changePwdDate=new DateTimeFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<Date>(userTO.getChangePwdDate()),false,SyncopeSession.get().getDateFormat().toLocalizedPattern());
  changePwdDate.setReadOnly(true);
  add(changePwdDate);
  final DateTimeFieldPanel lastLoginDate=new DateTimeFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<Date>(userTO.getLastLoginDate()),false,SyncopeSession.get().getDateFormat().toLocalizedPattern());
  lastLoginDate.setReadOnly(true);
  add(lastLoginDate);
  final AjaxNumberFieldPanel failedLogins=new AjaxNumberFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<Number>(userTO.getFailedLogins()),false);
  failedLogins.setReadOnly(true);
  add(failedLogins);
  final AjaxTextFieldPanel token=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<String>(userTO.getToken()),false);
  token.setReadOnly(true);
  add(token);
  final DateTimeFieldPanel tokenExpireTime=new DateTimeFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<Date>(userTO.getTokenExpireTime()),false,SyncopeSession.get().getDateFormat().toLocalizedPattern());
  tokenExpireTime.setReadOnly(true);
  add(tokenExpireTime);
}","public <T extends AbstractAttributableTO>UserDetailsPanel(final String id,final UserTO userTO,final Form form,final boolean resetPassword,final boolean templateMode){
  super(id);
  final FieldPanel username=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(userTO,""String_Node_Str""),true);
  if (!templateMode) {
    username.addRequiredLabel();
  }
  add(username);
  final FieldPanel password;
  final Label confirmPasswordLabel=new Label(""String_Node_Str"",new ResourceModel(""String_Node_Str""));
  final FieldPanel confirmPassword;
  if (templateMode) {
    password=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(userTO,""String_Node_Str""),true);
    confirmPasswordLabel.setVisible(false);
    confirmPassword=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<String>(),false);
    confirmPassword.setEnabled(false);
    confirmPassword.setVisible(false);
  }
 else {
    password=new AjaxPasswordFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(userTO,""String_Node_Str""),true);
    password.setRequired(userTO.getId() == 0);
    ((PasswordTextField)password.getField()).setResetPassword(resetPassword);
    confirmPassword=new AjaxPasswordFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<String>(),true);
    if (!resetPassword) {
      confirmPassword.getField().setModelObject(userTO.getPassword());
    }
    confirmPassword.setRequired(userTO.getId() == 0);
    ((PasswordTextField)confirmPassword.getField()).setResetPassword(resetPassword);
    form.add(new EqualPasswordInputValidator(password.getField(),confirmPassword.getField()));
  }
  add(password);
  add(confirmPasswordLabel);
  add(confirmPassword);
  final WebMarkupContainer mandatoryPassword=new WebMarkupContainer(""String_Node_Str"");
  mandatoryPassword.add(new Behavior(){
    private static final long serialVersionUID=1469628524240283489L;
    @Override public void onComponentTag(    final Component component,    final ComponentTag tag){
      if (userTO.getId() > 0) {
        tag.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  add(mandatoryPassword);
  final AjaxTextFieldPanel status=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<String>(userTO.getStatus()),false);
  status.setReadOnly(true);
  add(status);
  final DateTimeFieldPanel creationDate=new DateTimeFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<Date>(userTO.getCreationDate()),false,SyncopeSession.get().getDateFormat().toLocalizedPattern());
  creationDate.setReadOnly(true);
  add(creationDate);
  final DateTimeFieldPanel changePwdDate=new DateTimeFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<Date>(userTO.getChangePwdDate()),false,SyncopeSession.get().getDateFormat().toLocalizedPattern());
  changePwdDate.setReadOnly(true);
  add(changePwdDate);
  final DateTimeFieldPanel lastLoginDate=new DateTimeFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<Date>(userTO.getLastLoginDate()),false,SyncopeSession.get().getDateFormat().toLocalizedPattern());
  lastLoginDate.setReadOnly(true);
  add(lastLoginDate);
  final AjaxNumberFieldPanel failedLogins=new AjaxNumberFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<Number>(userTO.getFailedLogins()),Integer.class,false);
  failedLogins.setReadOnly(true);
  add(failedLogins);
  final AjaxTextFieldPanel token=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<String>(userTO.getToken()),false);
  token.setReadOnly(true);
  add(token);
  final DateTimeFieldPanel tokenExpireTime=new DateTimeFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<Date>(userTO.getTokenExpireTime()),false,SyncopeSession.get().getDateFormat().toLocalizedPattern());
  tokenExpireTime.setReadOnly(true);
  add(tokenExpireTime);
}"
60672,"/** 
 * Create new connector.
 * @param schemaTO
 */
public void create(ConnInstanceTO connectorTO){
  restTemplate.postForObject(baseURL + ""String_Node_Str"",connectorTO,ConnInstanceTO.class);
}","/** 
 * Create new connector.
 * @param schemaTO
 */
public void create(ConnInstanceTO connectorTO){
  filterProperties(connectorTO.getConfiguration());
  restTemplate.postForObject(baseURL + ""String_Node_Str"",connectorTO,ConnInstanceTO.class);
}"
60673,"public void update(ConnInstanceTO connectorTO){
  restTemplate.postForObject(baseURL + ""String_Node_Str"",connectorTO,ConnInstanceTO.class);
}","public void update(ConnInstanceTO connectorTO){
  filterProperties(connectorTO.getConfiguration());
  restTemplate.postForObject(baseURL + ""String_Node_Str"",connectorTO,ConnInstanceTO.class);
}"
60674,"public AjaxNumberFieldPanel(final String id,final String name,final IModel<Number> model,final boolean active){
  super(id,name,model,active);
  field=new TextField<Number>(""String_Node_Str"",model);
  add(field.setLabel(new Model(name)).setOutputMarkupId(true));
  if (active) {
    field.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
      private static final long serialVersionUID=-1107858522700306810L;
      @Override protected void onUpdate(      AjaxRequestTarget art){
      }
    }
);
  }
}","public AjaxNumberFieldPanel(final String id,final String name,final IModel<Number> model,final Class reference,final boolean active){
  super(id,name,model,active);
  field=new TextField<Number>(""String_Node_Str"",model,reference);
  add(field.setLabel(new Model(name)).setOutputMarkupId(true));
  if (active) {
    field.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
      private static final long serialVersionUID=-1107858522700306810L;
      @Override protected void onUpdate(      AjaxRequestTarget art){
      }
    }
);
  }
}"
60675,"public AjaxPasswordFieldPanel(final String id,final String name,final IModel<String> model,final boolean active){
  super(id,name,model,active);
  field=new PasswordTextField(""String_Node_Str"",model);
  add(field.setLabel(new Model(name)).setOutputMarkupId(true));
  if (active) {
    field.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
      private static final long serialVersionUID=-1107858522700306810L;
      @Override protected void onUpdate(      final AjaxRequestTarget art){
      }
    }
);
  }
}","public AjaxPasswordFieldPanel(final String id,final String name,final IModel<String> model,final boolean active){
  super(id,name,model,active);
  field=new PasswordTextField(""String_Node_Str"",model);
  field.setRequired(false);
  add(field.setLabel(new Model(name)).setOutputMarkupId(true));
  if (active) {
    field.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
      private static final long serialVersionUID=-1107858522700306810L;
      @Override protected void onUpdate(      final AjaxRequestTarget art){
      }
    }
);
  }
}"
60676,"private String getQuery(final SyncopeUserCond cond,final boolean not,final Map<Integer,Object> parameters){
  final String schema=cond.getSchema();
  Field field=null;
  Class<?> i=SyncopeUser.class;
  while (field == null && i != Object.class) {
    try {
      field=i.getDeclaredField(schema);
    }
 catch (    Exception ignore) {
      LOG.debug(""String_Node_Str"",new String[]{schema,i.getSimpleName()},ignore);
    }
 finally {
      i=i.getSuperclass();
    }
  }
  if (field == null) {
    LOG.warn(""String_Node_Str"",cond.getSchema());
    return EMPTY_ATTR_QUERY;
  }
  final StringBuilder query=new StringBuilder(""String_Node_Str"");
  Integer paramKey;
switch (cond.getType()) {
case ISNULL:
    query.append(schema).append(not ? ""String_Node_Str"" : ""String_Node_Str"");
  break;
case ISNOTNULL:
query.append(schema).append(not ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case LIKE:
if (field.getType() == String.class || field.getType() == Enum.class) {
query.append(schema);
if (not) {
query.append(""String_Node_Str"");
}
query.append(""String_Node_Str"").append(cond.getExpression()).append(""String_Node_Str"");
}
 else {
query.append(""String_Node_Str"");
LOG.error(""String_Node_Str"");
}
break;
case EQ:
paramKey=setParameter(parameters,cond.getExpression());
query.append(schema);
if (not) {
query.append(""String_Node_Str"");
}
 else {
query.append(""String_Node_Str"");
}
query.append(""String_Node_Str"").append(paramKey);
break;
case GE:
paramKey=setParameter(parameters,cond.getExpression());
query.append(schema);
if (not) {
query.append(""String_Node_Str"");
}
 else {
query.append(""String_Node_Str"");
}
query.append(""String_Node_Str"").append(paramKey);
break;
case GT:
paramKey=setParameter(parameters,cond.getExpression());
query.append(schema);
if (not) {
query.append(""String_Node_Str"");
}
 else {
query.append(""String_Node_Str"");
}
query.append(""String_Node_Str"").append(paramKey);
break;
case LE:
paramKey=setParameter(parameters,cond.getExpression());
query.append(schema);
if (not) {
query.append(""String_Node_Str"");
}
 else {
query.append(""String_Node_Str"");
}
query.append(""String_Node_Str"").append(paramKey);
break;
case LT:
paramKey=setParameter(parameters,cond.getExpression());
query.append(schema);
if (not) {
query.append(""String_Node_Str"");
}
 else {
query.append(""String_Node_Str"");
}
query.append(""String_Node_Str"").append(paramKey);
break;
default :
}
return query.toString();
}","private String getQuery(final SyncopeUserCond cond,final boolean not,final Map<Integer,Object> parameters){
  final String schema=cond.getSchema();
  Field field=null;
  for (Class<?> i=SyncopeUser.class; field == null && i != Object.class; ) {
    try {
      field=i.getDeclaredField(schema);
    }
 catch (    Exception ignore) {
      LOG.debug(""String_Node_Str"",new String[]{schema,i.getSimpleName()},ignore);
    }
 finally {
      i=i.getSuperclass();
    }
  }
  if (field == null) {
    LOG.warn(""String_Node_Str"",cond.getSchema());
    return EMPTY_ATTR_QUERY;
  }
  final StringBuilder query=new StringBuilder(""String_Node_Str"");
  Integer paramKey;
switch (cond.getType()) {
case ISNULL:
    query.append(schema).append(not ? ""String_Node_Str"" : ""String_Node_Str"");
  break;
case ISNOTNULL:
query.append(schema).append(not ? ""String_Node_Str"" : ""String_Node_Str"");
break;
case LIKE:
if (field.getType() == String.class || field.getType() == Enum.class) {
query.append(schema);
if (not) {
query.append(""String_Node_Str"");
}
query.append(""String_Node_Str"").append(cond.getExpression()).append(""String_Node_Str"");
}
 else {
query.append(""String_Node_Str"");
LOG.error(""String_Node_Str"");
}
break;
case EQ:
paramKey=setParameter(parameters,cond.getExpression());
query.append(schema);
if (not) {
query.append(""String_Node_Str"");
}
 else {
query.append(""String_Node_Str"");
}
query.append(""String_Node_Str"").append(paramKey);
break;
case GE:
paramKey=setParameter(parameters,cond.getExpression());
query.append(schema);
if (not) {
query.append(""String_Node_Str"");
}
 else {
query.append(""String_Node_Str"");
}
query.append(""String_Node_Str"").append(paramKey);
break;
case GT:
paramKey=setParameter(parameters,cond.getExpression());
query.append(schema);
if (not) {
query.append(""String_Node_Str"");
}
 else {
query.append(""String_Node_Str"");
}
query.append(""String_Node_Str"").append(paramKey);
break;
case LE:
paramKey=setParameter(parameters,cond.getExpression());
query.append(schema);
if (not) {
query.append(""String_Node_Str"");
}
 else {
query.append(""String_Node_Str"");
}
query.append(""String_Node_Str"").append(paramKey);
break;
case LT:
paramKey=setParameter(parameters,cond.getExpression());
query.append(schema);
if (not) {
query.append(""String_Node_Str"");
}
 else {
query.append(""String_Node_Str"");
}
query.append(""String_Node_Str"").append(paramKey);
break;
default :
}
return query.toString();
}"
60677,"public UserDataProvider(final UserRestClient restClient,final int rows,final boolean filtered){
  super();
  this.restClient=restClient;
  this.filtered=filtered;
  this.rows=rows;
  setSort(""String_Node_Str"",SortOrder.ASCENDING);
  comparator=new SortableUserProviderComparator(this);
}","public UserDataProvider(final UserRestClient restClient,final int paginatorRows,final boolean filtered){
  super();
  this.restClient=restClient;
  this.filtered=filtered;
  this.paginatorRows=paginatorRows;
  setSort(""String_Node_Str"",SortOrder.ASCENDING);
  comparator=new SortableUserProviderComparator(this);
}"
60678,"@Override public Iterator<UserTO> iterator(final int first,final int count){
  final List<UserTO> users;
  if (filtered) {
    users=filter == null ? Collections.EMPTY_LIST : restClient.search(filter,(first / rows) + 1,rows);
  }
 else {
    users=restClient.list((first / rows) + 1,rows);
  }
  Collections.sort(users,comparator);
  return users.iterator();
}","@Override public Iterator<UserTO> iterator(final int first,final int count){
  final List<UserTO> users;
  if (filtered) {
    users=filter == null ? Collections.EMPTY_LIST : restClient.search(filter,(first / paginatorRows) + 1,paginatorRows);
  }
 else {
    users=restClient.list((first / paginatorRows) + 1,paginatorRows);
  }
  Collections.sort(users,comparator);
  return users.iterator();
}"
60679,"@Override public Iterator<T> iterator(final int first,final int count){
  final List<T> tasks=new ArrayList<T>();
  for (  T task : (List<T>)restClient.listTasks(reference,(first / paginatorRows) + 1,count)) {
    if (task instanceof SchedTaskTO && ((SchedTaskTO)task).getLastExec() == null && task.getExecutions() != null && !task.getExecutions().isEmpty()) {
      Collections.sort(task.getExecutions(),new Comparator<TaskExecTO>(){
        @Override public int compare(        final TaskExecTO left,        final TaskExecTO right){
          return left.getStartDate().compareTo(right.getStartDate());
        }
      }
);
      ((SchedTaskTO)task).setLastExec(task.getExecutions().get(task.getExecutions().size() - 1).getStartDate());
    }
    tasks.add(task);
  }
  Collections.sort(tasks,comparator);
  return tasks.iterator();
}","@Override public Iterator<T> iterator(final int first,final int count){
  final List<T> tasks=new ArrayList<T>();
  for (  T task : (List<T>)restClient.listTasks(reference,(first / paginatorRows) + 1,paginatorRows)) {
    if (task instanceof SchedTaskTO && ((SchedTaskTO)task).getLastExec() == null && task.getExecutions() != null && !task.getExecutions().isEmpty()) {
      Collections.sort(task.getExecutions(),new Comparator<TaskExecTO>(){
        @Override public int compare(        final TaskExecTO left,        final TaskExecTO right){
          return left.getStartDate().compareTo(right.getStartDate());
        }
      }
);
      ((SchedTaskTO)task).setLastExec(task.getExecutions().get(task.getExecutions().size() - 1).getStartDate());
    }
    tasks.add(task);
  }
  Collections.sort(tasks,comparator);
  return tasks.iterator();
}"
60680,"public NotificationTasks(String id){
  super(id);
  add(window=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getWebRequest(),Constants.PREF_NOTIFICATION_TASKS_PAGINATOR_ROWS);
  List<IColumn<TaskTO>> columns=new ArrayList<IColumn<TaskTO>>();
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<TaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      AjaxLink viewLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          window.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new NotificationTaskModalPage(taskTO);
            }
          }
);
          window.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(viewLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<TaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      AjaxLink executeLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.startExecution(taskTO.getId(),false);
            getSession().info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(getPage().get(""String_Node_Str""));
          target.add(container);
        }
      }
;
      executeLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
      LinkPanel panel=new LinkPanel(componentId);
      panel.add(executeLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<TaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.delete(taskTO.getId());
            info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable<TaskTO> table=new AjaxFallbackDefaultDataTable<TaskTO>(""String_Node_Str"",columns,new TasksProvider(restClient,paginatorRows,getId(),NotificationTaskTO.class),paginatorRows);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(table);
  container.setOutputMarkupId(true);
  add(container);
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      target.add(container);
      if (operationResult) {
        info(getString(""String_Node_Str""));
        target.add(getPage().get(""String_Node_Str""));
        operationResult=false;
      }
    }
  }
);
  window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  window.setInitialHeight(WIN_HEIGHT);
  window.setInitialWidth(WIN_WIDTH);
  window.setCookieName(""String_Node_Str"");
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequest(),(WebResponse)getResponse(),Constants.PREF_NOTIFICATION_TASKS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table.setItemsPerPage(paginatorRows);
      target.add(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
}","public NotificationTasks(String id){
  super(id);
  add(window=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getWebRequest(),Constants.PREF_NOTIFICATION_TASKS_PAGINATOR_ROWS);
  List<IColumn<TaskTO>> columns=new ArrayList<IColumn<TaskTO>>();
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<TaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      AjaxLink viewLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          window.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new NotificationTaskModalPage(taskTO);
            }
          }
);
          window.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(viewLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<TaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      AjaxLink executeLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.startExecution(taskTO.getId(),false);
            getSession().info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(getPage().get(""String_Node_Str""));
          target.add(container);
        }
      }
;
      executeLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
      LinkPanel panel=new LinkPanel(componentId);
      panel.add(executeLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<TaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.delete(taskTO.getId());
            info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable<TaskTO> table=new AjaxFallbackDefaultDataTable<TaskTO>(""String_Node_Str"",columns,new TasksProvider(restClient,paginatorRows,getId(),NotificationTaskTO.class),paginatorRows);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(table);
  container.setOutputMarkupId(true);
  add(container);
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      target.add(container);
      if (operationResult) {
        info(getString(""String_Node_Str""));
        target.add(getPage().get(""String_Node_Str""));
        operationResult=false;
      }
    }
  }
);
  window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  window.setInitialHeight(WIN_HEIGHT);
  window.setInitialWidth(WIN_WIDTH);
  window.setCookieName(""String_Node_Str"");
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequest(),(WebResponse)getResponse(),Constants.PREF_NOTIFICATION_TASKS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table.setItemsPerPage(paginatorRows);
      target.add(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
}"
60681,"public PropagationTasks(final String id){
  super(id);
  add(window=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getWebRequest(),Constants.PREF_PROPAGATION_TASKS_PAGINATOR_ROWS);
  List<IColumn<TaskTO>> columns=new ArrayList<IColumn<TaskTO>>();
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<TaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      AjaxLink viewLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          window.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new PropagationTaskModalPage(taskTO);
            }
          }
);
          window.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(viewLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<TaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      AjaxLink executeLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.startExecution(taskTO.getId(),false);
            getSession().info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(getPage().get(""String_Node_Str""));
          target.add(container);
        }
      }
;
      executeLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
      LinkPanel panel=new LinkPanel(componentId);
      panel.add(executeLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<TaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.delete(taskTO.getId());
            info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable<TaskTO> table=new AjaxFallbackDefaultDataTable<TaskTO>(""String_Node_Str"",columns,new TasksProvider(restClient,paginatorRows,getId(),PropagationTaskTO.class),paginatorRows);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(table);
  container.setOutputMarkupId(true);
  add(container);
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      target.add(container);
      if (operationResult) {
        info(getString(""String_Node_Str""));
        target.add(getPage().get(""String_Node_Str""));
        operationResult=false;
      }
    }
  }
);
  window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  window.setInitialHeight(WIN_HEIGHT);
  window.setInitialWidth(WIN_WIDTH);
  window.setCookieName(""String_Node_Str"");
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequest(),(WebResponse)getResponse(),Constants.PREF_PROPAGATION_TASKS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table.setItemsPerPage(paginatorRows);
      target.add(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
}","public PropagationTasks(final String id){
  super(id);
  add(window=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getWebRequest(),Constants.PREF_PROPAGATION_TASKS_PAGINATOR_ROWS);
  List<IColumn<TaskTO>> columns=new ArrayList<IColumn<TaskTO>>();
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<TaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      AjaxLink viewLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          window.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new PropagationTaskModalPage(taskTO);
            }
          }
);
          window.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(viewLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<TaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      AjaxLink executeLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.startExecution(taskTO.getId(),false);
            getSession().info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(getPage().get(""String_Node_Str""));
          target.add(container);
        }
      }
;
      executeLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
      LinkPanel panel=new LinkPanel(componentId);
      panel.add(executeLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<TaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<TaskTO>> cellItem,    final String componentId,    final IModel<TaskTO> model){
      final TaskTO taskTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.delete(taskTO.getId());
            info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable<TaskTO> table=new AjaxFallbackDefaultDataTable<TaskTO>(""String_Node_Str"",columns,new TasksProvider(restClient,paginatorRows,getId(),PropagationTaskTO.class),paginatorRows);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(table);
  container.setOutputMarkupId(true);
  add(container);
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      target.add(container);
      if (operationResult) {
        info(getString(""String_Node_Str""));
        target.add(getPage().get(""String_Node_Str""));
        operationResult=false;
      }
    }
  }
);
  window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  window.setInitialHeight(WIN_HEIGHT);
  window.setInitialWidth(WIN_WIDTH);
  window.setCookieName(""String_Node_Str"");
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequest(),(WebResponse)getResponse(),Constants.PREF_PROPAGATION_TASKS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table.setItemsPerPage(paginatorRows);
      target.add(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
}"
60682,"private void updateResultTable(final boolean create){
  rows=preferences.getPaginatorRows(getRequest(),Constants.PREF_USERS_PAGINATOR_ROWS);
  dataProvider=new UserDataProvider(userRestClient,rows,filtered);
  dataProvider.setSearchCond(filter);
  final int page=resultTable != null ? (create ? resultTable.getPageCount() - 1 : resultTable.getCurrentPage()) : 0;
  resultTable=new AjaxFallbackDefaultDataTable<UserTO>(""String_Node_Str"",getColumns(),dataProvider,rows);
  resultTable.setCurrentPage(page);
  resultTable.setOutputMarkupId(true);
  container.addOrReplace(resultTable);
}","private void updateResultTable(final boolean create){
  rows=preferences.getPaginatorRows(getRequest(),Constants.PREF_USERS_PAGINATOR_ROWS);
  dataProvider=new UserDataProvider(userRestClient,rows,filtered);
  dataProvider.setSearchCond(filter);
  final int currentPage=resultTable != null ? (create ? resultTable.getPageCount() - 1 : resultTable.getCurrentPage()) : 0;
  resultTable=new AjaxFallbackDefaultDataTable<UserTO>(""String_Node_Str"",getColumns(),dataProvider,rows);
  resultTable.setCurrentPage(currentPage);
  resultTable.setOutputMarkupId(true);
  container.addOrReplace(resultTable);
}"
60683,"public <T extends AbstractAttributableTO>ResultSetPanel(final String id,final boolean filtered,final NodeCond searchCond,final PageReference callerRef){
  super(id);
  setOutputMarkupId(true);
  page=(BasePage)callerRef.getPage();
  this.filtered=filtered;
  this.filter=searchCond;
  this.feedbackPanel=page.getFeedbackPanel();
  editmodal.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editmodal.setInitialHeight(EDIT_MODAL_WIN_HEIGHT);
  editmodal.setInitialWidth(EDIT_MODAL_WIN_WIDTH);
  editmodal.setCookieName(""String_Node_Str"");
  add(editmodal);
  final ModalWindow displaymodal=new ModalWindow(""String_Node_Str"");
  displaymodal.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  displaymodal.setInitialHeight(DISPLAYATTRS_MODAL_WIN_HEIGHT);
  displaymodal.setInitialWidth(DISPLAYATTRS_MODAL_WIN_WIDTH);
  displaymodal.setCookieName(""String_Node_Str"");
  add(displaymodal);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.setOutputMarkupId(true);
  add(container);
  updateResultTable(false);
  AjaxLink displayAttrsLink=new IndicatingAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      displaymodal.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new DisplayAttributesModalPage(page.getPageReference(),displaymodal);
        }
      }
);
      displaymodal.show(target);
    }
  }
;
  displayAttrsLink.add(new Behavior(){
    @Override public void onComponentTag(    final Component component,    final ComponentTag tag){
      if (resultTable.getRowCount() > rows) {
        tag.remove(""String_Node_Str"");
        tag.put(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        tag.remove(""String_Node_Str"");
        tag.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  MetaDataRoleAuthorizationStrategy.authorize(displayAttrsLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  container.add(displayAttrsLink);
  final Form paginatorForm=new Form(""String_Node_Str"");
  container.add(paginatorForm);
  final DropDownChoice<Integer> rowsChooser=new DropDownChoice<Integer>(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),preferences.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      preferences.set(getRequest(),getResponse(),Constants.PREF_USERS_PAGINATOR_ROWS,String.valueOf(rows));
      final EventDataWrapper data=new EventDataWrapper();
      data.setTarget(target);
      send(getParent(),Broadcast.BREADTH,data);
    }
  }
);
  paginatorForm.add(rowsChooser);
  setWindowClosedReloadCallback(editmodal);
  setWindowClosedReloadCallback(displaymodal);
}","public <T extends AbstractAttributableTO>ResultSetPanel(final String id,final boolean filtered,final NodeCond searchCond,final PageReference callerRef){
  super(id);
  setOutputMarkupId(true);
  page=(BasePage)callerRef.getPage();
  this.filtered=filtered;
  this.filter=searchCond;
  this.feedbackPanel=page.getFeedbackPanel();
  editmodal.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editmodal.setInitialHeight(EDIT_MODAL_WIN_HEIGHT);
  editmodal.setInitialWidth(EDIT_MODAL_WIN_WIDTH);
  editmodal.setCookieName(""String_Node_Str"");
  add(editmodal);
  final ModalWindow displaymodal=new ModalWindow(""String_Node_Str"");
  displaymodal.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  displaymodal.setInitialHeight(DISPLAYATTRS_MODAL_WIN_HEIGHT);
  displaymodal.setInitialWidth(DISPLAYATTRS_MODAL_WIN_WIDTH);
  displaymodal.setCookieName(""String_Node_Str"");
  add(displaymodal);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.setOutputMarkupId(true);
  add(container);
  updateResultTable(false);
  AjaxLink displayAttrsLink=new IndicatingAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      displaymodal.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new DisplayAttributesModalPage(page.getPageReference(),displaymodal);
        }
      }
);
      displaymodal.show(target);
    }
  }
;
  displayAttrsLink.add(new Behavior(){
    private static final long serialVersionUID=1469628524240283489L;
    @Override public void onComponentTag(    final Component component,    final ComponentTag tag){
      if (resultTable.getRowCount() > rows) {
        tag.remove(""String_Node_Str"");
        tag.put(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        tag.remove(""String_Node_Str"");
        tag.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  MetaDataRoleAuthorizationStrategy.authorize(displayAttrsLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  container.add(displayAttrsLink);
  final Form paginatorForm=new Form(""String_Node_Str"");
  container.add(paginatorForm);
  final DropDownChoice<Integer> rowsChooser=new DropDownChoice<Integer>(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),preferences.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      preferences.set(getRequest(),getResponse(),Constants.PREF_USERS_PAGINATOR_ROWS,String.valueOf(rows));
      final EventDataWrapper data=new EventDataWrapper();
      data.setTarget(target);
      send(getParent(),Broadcast.BREADTH,data);
    }
  }
);
  paginatorForm.add(rowsChooser);
  setWindowClosedReloadCallback(editmodal);
  setWindowClosedReloadCallback(displaymodal);
}"
60684,"@Override public void onEvent(IEvent<?> event){
  if (event.getPayload() instanceof EventDataWrapper) {
    final EventDataWrapper data=(EventDataWrapper)event.getPayload();
    final AjaxRequestTarget target=data.getTarget();
    updateResultTable(data.isCreate());
    target.add(container);
  }
}","@Override public void onEvent(final IEvent<?> event){
  if (event.getPayload() instanceof EventDataWrapper) {
    final EventDataWrapper data=(EventDataWrapper)event.getPayload();
    final AjaxRequestTarget target=data.getTarget();
    updateResultTable(data.isCreate());
    target.add(container);
  }
}"
60685,"public SchedTasks(final String id,final PageReference callerPageRef){
  super(id);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.setOutputMarkupId(true);
  add(container);
  window=new ModalWindow(""String_Node_Str"");
  window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  window.setInitialHeight(WIN_HEIGHT);
  window.setInitialWidth(WIN_WIDTH);
  window.setCookieName(""String_Node_Str"");
  add(window);
  ((Tasks)callerPageRef.getPage()).setWindowClosedCallback(window,container);
  paginatorRows=prefMan.getPaginatorRows(getWebRequest(),Constants.PREF_SCHED_TASKS_PAGINATOR_ROWS);
  List<IColumn<SchedTaskTO>> columns=new ArrayList<IColumn<SchedTaskTO>>();
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new DatePropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new DatePropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<SchedTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SchedTaskTO>> cellItem,    final String componentId,    final IModel<SchedTaskTO> model){
      final SchedTaskTO taskTO=model.getObject();
      AjaxLink viewLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          window.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new SchedTaskModalPage(window,taskTO,callerPageRef);
            }
          }
);
          window.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(viewLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<SchedTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SchedTaskTO>> cellItem,    final String componentId,    final IModel<SchedTaskTO> model){
      final SchedTaskTO taskTO=model.getObject();
      AjaxLink executeLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.startExecution(taskTO.getId(),false);
            getSession().info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(getPage().get(""String_Node_Str""));
          target.add(container);
        }
      }
;
      executeLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
      LinkPanel panel=new LinkPanel(componentId);
      panel.add(executeLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<SchedTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SchedTaskTO>> cellItem,    final String componentId,    final IModel<SchedTaskTO> model){
      final SchedTaskTO taskTO=model.getObject();
      AjaxLink executeLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.startExecution(taskTO.getId(),true);
            getSession().info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(getPage().get(""String_Node_Str""));
          target.add(container);
        }
      }
;
      executeLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
      LinkPanel panel=new LinkPanel(componentId);
      panel.add(executeLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<SchedTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SchedTaskTO>> cellItem,    final String componentId,    final IModel<SchedTaskTO> model){
      final SchedTaskTO taskTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.delete(taskTO.getId());
            info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable<SchedTaskTO> table=new AjaxFallbackDefaultDataTable<SchedTaskTO>(""String_Node_Str"",columns,new TasksProvider(restClient,paginatorRows,getId(),SchedTaskTO.class),paginatorRows);
  container.add(table);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequest(),(WebResponse)getResponse(),Constants.PREF_SCHED_TASKS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table.setItemsPerPage(paginatorRows);
      target.add(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  AjaxLink createLink=new IndicatingAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      window.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new SchedTaskModalPage(window,new SchedTaskTO(),callerPageRef);
        }
      }
);
      window.show(target);
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(createLink,RENDER,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(createLink);
}","public SchedTasks(final String id,final PageReference callerPageRef){
  super(id);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.setOutputMarkupId(true);
  add(container);
  window=new ModalWindow(""String_Node_Str"");
  window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  window.setInitialHeight(WIN_HEIGHT);
  window.setInitialWidth(WIN_WIDTH);
  window.setCookieName(""String_Node_Str"");
  add(window);
  ((Tasks)callerPageRef.getPage()).setWindowClosedCallback(window,container);
  paginatorRows=prefMan.getPaginatorRows(getWebRequest(),Constants.PREF_SCHED_TASKS_PAGINATOR_ROWS);
  List<IColumn<SchedTaskTO>> columns=new ArrayList<IColumn<SchedTaskTO>>();
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new DatePropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new DatePropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<SchedTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SchedTaskTO>> cellItem,    final String componentId,    final IModel<SchedTaskTO> model){
      final SchedTaskTO taskTO=model.getObject();
      AjaxLink viewLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          window.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new SchedTaskModalPage(window,taskTO,callerPageRef);
            }
          }
);
          window.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(viewLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<SchedTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SchedTaskTO>> cellItem,    final String componentId,    final IModel<SchedTaskTO> model){
      final SchedTaskTO taskTO=model.getObject();
      AjaxLink executeLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.startExecution(taskTO.getId(),false);
            getSession().info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(getPage().get(""String_Node_Str""));
          target.add(container);
        }
      }
;
      executeLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
      LinkPanel panel=new LinkPanel(componentId);
      panel.add(executeLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<SchedTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SchedTaskTO>> cellItem,    final String componentId,    final IModel<SchedTaskTO> model){
      final SchedTaskTO taskTO=model.getObject();
      AjaxLink executeLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.startExecution(taskTO.getId(),true);
            getSession().info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(getPage().get(""String_Node_Str""));
          target.add(container);
        }
      }
;
      executeLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
      LinkPanel panel=new LinkPanel(componentId);
      panel.add(executeLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<SchedTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SchedTaskTO>> cellItem,    final String componentId,    final IModel<SchedTaskTO> model){
      final SchedTaskTO taskTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.delete(taskTO.getId());
            info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable<SchedTaskTO> table=new AjaxFallbackDefaultDataTable<SchedTaskTO>(""String_Node_Str"",columns,new TasksProvider(restClient,paginatorRows,getId(),SchedTaskTO.class),paginatorRows);
  container.add(table);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequest(),(WebResponse)getResponse(),Constants.PREF_SCHED_TASKS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table.setItemsPerPage(paginatorRows);
      target.add(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  AjaxLink createLink=new IndicatingAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      window.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new SchedTaskModalPage(window,new SchedTaskTO(),callerPageRef);
        }
      }
);
      window.show(target);
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(createLink,RENDER,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(createLink);
}"
60686,"public SyncTasks(String id,final PageReference callerPageRef){
  super(id);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.setOutputMarkupId(true);
  add(container);
  window=new ModalWindow(""String_Node_Str"");
  window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  window.setInitialHeight(WIN_HEIGHT);
  window.setInitialWidth(WIN_WIDTH);
  window.setCookieName(""String_Node_Str"");
  add(window);
  ((Tasks)callerPageRef.getPage()).setWindowClosedCallback(window,container);
  paginatorRows=prefMan.getPaginatorRows(getWebRequest(),Constants.PREF_SYNC_TASKS_PAGINATOR_ROWS);
  List<IColumn<SyncTaskTO>> columns=new ArrayList<IColumn<SyncTaskTO>>();
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new DatePropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new DatePropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<SyncTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SyncTaskTO>> cellItem,    final String componentId,    final IModel<SyncTaskTO> model){
      final SyncTaskTO taskTO=model.getObject();
      AjaxLink viewLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          window.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new SyncTaskModalPage(window,taskTO,callerPageRef);
            }
          }
);
          window.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(viewLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<SyncTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SyncTaskTO>> cellItem,    final String componentId,    final IModel<SyncTaskTO> model){
      final SyncTaskTO taskTO=model.getObject();
      AjaxLink viewLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          window.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new UserModalPage(callerPageRef,window,taskTO);
            }
          }
);
          window.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(viewLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<SyncTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SyncTaskTO>> cellItem,    final String componentId,    final IModel<SyncTaskTO> model){
      final SyncTaskTO taskTO=model.getObject();
      AjaxLink executeLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.startExecution(taskTO.getId(),false);
            getSession().info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
;
      executeLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
      LinkPanel panel=new LinkPanel(componentId);
      panel.add(executeLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<SyncTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SyncTaskTO>> cellItem,    final String componentId,    final IModel<SyncTaskTO> model){
      final SyncTaskTO taskTO=model.getObject();
      AjaxLink executeLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.startExecution(taskTO.getId(),true);
            getSession().info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
;
      executeLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
      LinkPanel panel=new LinkPanel(componentId);
      panel.add(executeLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<SyncTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SyncTaskTO>> cellItem,    final String componentId,    final IModel<SyncTaskTO> model){
      final SyncTaskTO taskTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.delete(taskTO.getId());
            info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable<SyncTaskTO> table=new AjaxFallbackDefaultDataTable<SyncTaskTO>(""String_Node_Str"",columns,new TasksProvider(restClient,paginatorRows,id,SyncTaskTO.class),paginatorRows);
  container.add(table);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequest(),(WebResponse)getResponse(),Constants.PREF_SYNC_TASKS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table.setItemsPerPage(paginatorRows);
      target.add(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  AjaxLink createLink=new IndicatingAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      window.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new SyncTaskModalPage(window,new SyncTaskTO(),callerPageRef);
        }
      }
);
      window.show(target);
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(createLink,RENDER,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(createLink);
}","public SyncTasks(String id,final PageReference callerPageRef){
  super(id);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.setOutputMarkupId(true);
  add(container);
  window=new ModalWindow(""String_Node_Str"");
  window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  window.setInitialHeight(WIN_HEIGHT);
  window.setInitialWidth(WIN_WIDTH);
  window.setCookieName(""String_Node_Str"");
  add(window);
  ((Tasks)callerPageRef.getPage()).setWindowClosedCallback(window,container);
  paginatorRows=prefMan.getPaginatorRows(getWebRequest(),Constants.PREF_SYNC_TASKS_PAGINATOR_ROWS);
  List<IColumn<SyncTaskTO>> columns=new ArrayList<IColumn<SyncTaskTO>>();
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new DatePropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new DatePropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<SyncTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SyncTaskTO>> cellItem,    final String componentId,    final IModel<SyncTaskTO> model){
      final SyncTaskTO taskTO=model.getObject();
      AjaxLink viewLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          window.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new SyncTaskModalPage(window,taskTO,callerPageRef);
            }
          }
);
          window.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(viewLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<SyncTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SyncTaskTO>> cellItem,    final String componentId,    final IModel<SyncTaskTO> model){
      final SyncTaskTO taskTO=model.getObject();
      AjaxLink viewLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          window.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new UserModalPage(callerPageRef,window,taskTO);
            }
          }
);
          window.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(viewLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<SyncTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SyncTaskTO>> cellItem,    final String componentId,    final IModel<SyncTaskTO> model){
      final SyncTaskTO taskTO=model.getObject();
      AjaxLink executeLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.startExecution(taskTO.getId(),false);
            getSession().info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
;
      executeLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
      LinkPanel panel=new LinkPanel(componentId);
      panel.add(executeLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<SyncTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SyncTaskTO>> cellItem,    final String componentId,    final IModel<SyncTaskTO> model){
      final SyncTaskTO taskTO=model.getObject();
      AjaxLink executeLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.startExecution(taskTO.getId(),true);
            getSession().info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
;
      executeLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
      LinkPanel panel=new LinkPanel(componentId);
      panel.add(executeLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<SyncTaskTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<SyncTaskTO>> cellItem,    final String componentId,    final IModel<SyncTaskTO> model){
      final SyncTaskTO taskTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.delete(taskTO.getId());
            info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable<SyncTaskTO> table=new AjaxFallbackDefaultDataTable<SyncTaskTO>(""String_Node_Str"",columns,new TasksProvider(restClient,paginatorRows,id,SyncTaskTO.class),paginatorRows);
  container.add(table);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequest(),(WebResponse)getResponse(),Constants.PREF_SYNC_TASKS_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table.setItemsPerPage(paginatorRows);
      target.add(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  AjaxLink createLink=new IndicatingAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      window.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new SyncTaskModalPage(window,new SyncTaskTO(),callerPageRef);
        }
      }
);
      window.show(target);
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(createLink,RENDER,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(createLink);
}"
60687,"@Override protected void populateItem(final ListItem<ConnConfProperty> item){
  final ConnConfProperty property=item.getModelObject();
  final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
  item.add(label);
  final FieldPanel field;
  if (GUARDED_STRING.equals(property.getSchema().getType())) {
    field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
    ((PasswordTextField)field.getField()).setResetPassword(false);
  }
 else {
    field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
    if (property.getSchema().isRequired()) {
      field.addRequiredLabel();
    }
  }
  item.add(field);
  final AjaxDropDownChoicePanel<Boolean> overridable=new AjaxDropDownChoicePanel<Boolean>(""String_Node_Str"",""String_Node_Str"",new PropertyModel(property,""String_Node_Str""),false);
  overridable.setChoiceRenderer(new OverridableRenderer());
  overridable.setChoices(Arrays.asList(new Boolean[]{ConnParameterType.NOT_OVERRIDABLE.getOverridable(),ConnParameterType.OVERRIDABLE.getOverridable()}));
  overridable.setStyleShet(""String_Node_Str"" + ""String_Node_Str"");
  item.add(overridable);
  connectorTO.getConfiguration().add(property);
}","@Override protected void populateItem(final ListItem<ConnConfProperty> item){
  final ConnConfProperty property=item.getModelObject();
  final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
  item.add(label);
  final FieldPanel field;
  boolean required=false;
  if (GUARDED_STRING.equalsIgnoreCase(property.getSchema().getType())) {
    field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
    ((PasswordTextField)field.getField()).setResetPassword(false);
    required=property.getSchema().isRequired();
  }
 else   if (BOOLEAN.equalsIgnoreCase(property.getSchema().getType())) {
    field=new AjaxCheckBoxPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
  }
 else {
    field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
    required=property.getSchema().isRequired();
  }
  field.setTitle(property.getSchema().getHelpMessage());
  if (required) {
    field.addRequiredLabel();
  }
  if (STRING_ARRAY.equalsIgnoreCase(property.getSchema().getType())) {
    field.removeRequiredLabel();
    item.add(new MultiValueSelectorPanel<String>(""String_Node_Str"",new PropertyModel<List<String>>(property,""String_Node_Str""),String.class,field));
  }
 else {
    field.setNewModel(property.getValues());
    item.add(field);
  }
  final AjaxCheckBoxPanel overridable=new AjaxCheckBoxPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel(property,""String_Node_Str""),true);
  item.add(overridable);
  connectorTO.getConfiguration().add(property);
}"
60688,"public ConnectorModalPage(final PageReference callerPageRef,final ModalWindow window,final ConnInstanceTO connectorTO,final boolean createFlag){
  super();
  selectedCapabilities=new ArrayList(createFlag ? EnumSet.noneOf(ConnectorCapability.class) : connectorTO.getCapabilities());
  IModel<List<ConnConfProperty>> selectedBundleProperties=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      List<ConnConfProperty> result;
      if (createFlag) {
        connectorTO.setConnectorName(selectedBundleTO.getConnectorName());
        connectorTO.setVersion(selectedBundleTO.getVersion());
        result=new ArrayList<ConnConfProperty>();
        ConnConfProperty propertyTO;
        for (        ConnConfPropSchema key : selectedBundleTO.getProperties()) {
          propertyTO=new ConnConfProperty();
          propertyTO.setSchema(key);
          result.add(propertyTO);
        }
      }
 else {
        selectedBundleTO.setBundleName(connectorTO.getBundleName());
        selectedBundleTO.setVersion(connectorTO.getVersion());
        result=new ArrayList<ConnConfProperty>(connectorTO.getConfiguration());
      }
      if (result != null && !result.isEmpty()) {
        Collections.sort(result);
      }
      return result;
    }
  }
;
  final AjaxTextFieldPanel connectorName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  connectorName.setOutputMarkupId(true);
  connectorName.setEnabled(false);
  final AjaxTextFieldPanel displayName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  displayName.addRequiredLabel();
  final AjaxTextFieldPanel version=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  version.setEnabled(false);
  final IModel<List<ConnBundleTO>> bundles=new LoadableDetachableModel<List<ConnBundleTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnBundleTO> load(){
      return restClient.getAllBundles();
    }
  }
;
  final AjaxDropDownChoicePanel<ConnBundleTO> bundle=new AjaxDropDownChoicePanel<ConnBundleTO>(""String_Node_Str"",""String_Node_Str"",new Model(null),false);
  bundle.setStyleShet(""String_Node_Str"");
  bundle.setChoices(bundles.getObject());
  bundle.setChoiceRenderer(new ChoiceRenderer<ConnBundleTO>(){
    private static final long serialVersionUID=-1945543182376191187L;
    @Override public Object getDisplayValue(    final ConnBundleTO object){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
    @Override public String getIdValue(    final ConnBundleTO object,    final int index){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
  }
);
  ((DropDownChoice)bundle.getField()).setNullValid(true);
  bundle.setRequired(true);
  bundle.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      connectorTO.setConfiguration(new HashSet<ConnConfProperty>());
      DropDownChoice bundleChoice=(DropDownChoice)bundle.getField();
      bundleChoice.setNullValid(false);
      target.add(bundle.getField());
      target.add(propertiesContainer);
      target.add(connectorName);
      target.add(version);
    }
  }
);
  bundle.getField().setModel(new IModel<ConnBundleTO>(){
    private static final long serialVersionUID=-3736598995576061229L;
    @Override public ConnBundleTO getObject(){
      return selectedBundleTO;
    }
    @Override public void setObject(    final ConnBundleTO object){
      selectedBundleTO=object;
    }
    @Override public void detach(){
    }
  }
);
  bundle.addRequiredLabel();
  bundle.setEnabled(createFlag);
  final ListView<ConnConfProperty> propView=new ListView<ConnConfProperty>(""String_Node_Str"",selectedBundleProperties){
    private static final long serialVersionUID=9101744072914090143L;
    @Override protected void populateItem(    final ListItem<ConnConfProperty> item){
      final ConnConfProperty property=item.getModelObject();
      final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
      item.add(label);
      final FieldPanel field;
      if (GUARDED_STRING.equals(property.getSchema().getType())) {
        field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
        ((PasswordTextField)field.getField()).setResetPassword(false);
      }
 else {
        field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
        if (property.getSchema().isRequired()) {
          field.addRequiredLabel();
        }
      }
      item.add(field);
      final AjaxDropDownChoicePanel<Boolean> overridable=new AjaxDropDownChoicePanel<Boolean>(""String_Node_Str"",""String_Node_Str"",new PropertyModel(property,""String_Node_Str""),false);
      overridable.setChoiceRenderer(new OverridableRenderer());
      overridable.setChoices(Arrays.asList(new Boolean[]{ConnParameterType.NOT_OVERRIDABLE.getOverridable(),ConnParameterType.OVERRIDABLE.getOverridable()}));
      overridable.setStyleShet(""String_Node_Str"" + ""String_Node_Str"");
      item.add(overridable);
      connectorTO.getConfiguration().add(property);
    }
  }
;
  propertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  propertiesContainer.setOutputMarkupId(true);
  propertiesContainer.add(propView);
  Form connectorForm=new Form(""String_Node_Str"");
  connectorForm.setModel(new CompoundPropertyModel(connectorTO));
  connectorForm.add(propertiesContainer);
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
      ConnBundleTO bundleTO=(ConnBundleTO)bundle.getModelObject();
      connector.setBundleName(bundleTO.getBundleName());
      if (!selectedCapabilities.isEmpty()) {
        connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
      }
 else {
        connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
      }
      try {
        if (createFlag) {
          restClient.create(connector);
        }
 else {
          restClient.update(connector);
        }
        ((Resources)callerPageRef.getPage()).setModalResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
        ((Resources)callerPageRef.getPage()).setModalResult(false);
        LOG.error(""String_Node_Str"" + connector);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=createFlag ? xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"") : xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  connectorForm.add(connectorName);
  connectorForm.add(displayName);
  connectorForm.add(bundle);
  connectorForm.add(version);
  final IModel<List<ConnectorCapability>> capabilities=new LoadableDetachableModel<List<ConnectorCapability>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnectorCapability> load(){
      return Arrays.asList(ConnectorCapability.values());
    }
  }
;
  capabilitiesPalette=new CheckBoxMultipleChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),capabilities);
  connectorForm.add(capabilitiesPalette);
  connectorForm.add(submit);
  add(connectorForm);
}","public ConnectorModalPage(final PageReference callerPageRef,final ModalWindow window,final ConnInstanceTO connectorTO,final boolean createFlag){
  super();
  selectedCapabilities=new ArrayList(createFlag ? EnumSet.noneOf(ConnectorCapability.class) : connectorTO.getCapabilities());
  IModel<List<ConnConfProperty>> selectedBundleProperties=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      List<ConnConfProperty> result;
      if (createFlag) {
        connectorTO.setConnectorName(selectedBundleTO.getConnectorName());
        connectorTO.setVersion(selectedBundleTO.getVersion());
        result=new ArrayList<ConnConfProperty>();
        ConnConfProperty propertyTO;
        for (        ConnConfPropSchema key : selectedBundleTO.getProperties()) {
          propertyTO=new ConnConfProperty();
          propertyTO.setSchema(key);
          result.add(propertyTO);
        }
      }
 else {
        selectedBundleTO.setBundleName(connectorTO.getBundleName());
        selectedBundleTO.setVersion(connectorTO.getVersion());
        result=new ArrayList<ConnConfProperty>(connectorTO.getConfiguration());
      }
      if (result != null && !result.isEmpty()) {
        Collections.sort(result);
      }
      return result;
    }
  }
;
  final AjaxTextFieldPanel connectorName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  connectorName.setOutputMarkupId(true);
  connectorName.setEnabled(false);
  final AjaxTextFieldPanel displayName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  displayName.addRequiredLabel();
  final AjaxTextFieldPanel version=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  version.setEnabled(false);
  final IModel<List<ConnBundleTO>> bundles=new LoadableDetachableModel<List<ConnBundleTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnBundleTO> load(){
      return restClient.getAllBundles();
    }
  }
;
  final AjaxDropDownChoicePanel<ConnBundleTO> bundle=new AjaxDropDownChoicePanel<ConnBundleTO>(""String_Node_Str"",""String_Node_Str"",new Model(null),false);
  bundle.setStyleShet(""String_Node_Str"");
  bundle.setChoices(bundles.getObject());
  bundle.setChoiceRenderer(new ChoiceRenderer<ConnBundleTO>(){
    private static final long serialVersionUID=-1945543182376191187L;
    @Override public Object getDisplayValue(    final ConnBundleTO object){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
    @Override public String getIdValue(    final ConnBundleTO object,    final int index){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
  }
);
  ((DropDownChoice)bundle.getField()).setNullValid(true);
  bundle.setRequired(true);
  bundle.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      connectorTO.setConfiguration(new HashSet<ConnConfProperty>());
      DropDownChoice bundleChoice=(DropDownChoice)bundle.getField();
      bundleChoice.setNullValid(false);
      target.add(bundle.getField());
      target.add(propertiesContainer);
      target.add(connectorName);
      target.add(version);
    }
  }
);
  bundle.getField().setModel(new IModel<ConnBundleTO>(){
    private static final long serialVersionUID=-3736598995576061229L;
    @Override public ConnBundleTO getObject(){
      return selectedBundleTO;
    }
    @Override public void setObject(    final ConnBundleTO object){
      selectedBundleTO=object;
    }
    @Override public void detach(){
    }
  }
);
  bundle.addRequiredLabel();
  bundle.setEnabled(createFlag);
  final ListView<ConnConfProperty> propView=new ListView<ConnConfProperty>(""String_Node_Str"",selectedBundleProperties){
    private static final long serialVersionUID=9101744072914090143L;
    @Override protected void populateItem(    final ListItem<ConnConfProperty> item){
      final ConnConfProperty property=item.getModelObject();
      final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
      item.add(label);
      final FieldPanel field;
      boolean required=false;
      if (GUARDED_STRING.equalsIgnoreCase(property.getSchema().getType())) {
        field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
        ((PasswordTextField)field.getField()).setResetPassword(false);
        required=property.getSchema().isRequired();
      }
 else       if (BOOLEAN.equalsIgnoreCase(property.getSchema().getType())) {
        field=new AjaxCheckBoxPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
      }
 else {
        field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(),true);
        required=property.getSchema().isRequired();
      }
      field.setTitle(property.getSchema().getHelpMessage());
      if (required) {
        field.addRequiredLabel();
      }
      if (STRING_ARRAY.equalsIgnoreCase(property.getSchema().getType())) {
        field.removeRequiredLabel();
        item.add(new MultiValueSelectorPanel<String>(""String_Node_Str"",new PropertyModel<List<String>>(property,""String_Node_Str""),String.class,field));
      }
 else {
        field.setNewModel(property.getValues());
        item.add(field);
      }
      final AjaxCheckBoxPanel overridable=new AjaxCheckBoxPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel(property,""String_Node_Str""),true);
      item.add(overridable);
      connectorTO.getConfiguration().add(property);
    }
  }
;
  propertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  propertiesContainer.setOutputMarkupId(true);
  propertiesContainer.add(propView);
  Form connectorForm=new Form(""String_Node_Str"");
  connectorForm.setModel(new CompoundPropertyModel(connectorTO));
  connectorForm.add(propertiesContainer);
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
      ConnBundleTO bundleTO=(ConnBundleTO)bundle.getModelObject();
      connector.setBundleName(bundleTO.getBundleName());
      if (!selectedCapabilities.isEmpty()) {
        connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
      }
 else {
        connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
      }
      try {
        if (createFlag) {
          restClient.create(connector);
        }
 else {
          restClient.update(connector);
        }
        ((Resources)callerPageRef.getPage()).setModalResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
        ((Resources)callerPageRef.getPage()).setModalResult(false);
        LOG.error(""String_Node_Str"" + connector);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=createFlag ? xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"") : xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  connectorForm.add(connectorName);
  connectorForm.add(displayName);
  connectorForm.add(bundle);
  connectorForm.add(version);
  final IModel<List<ConnectorCapability>> capabilities=new LoadableDetachableModel<List<ConnectorCapability>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnectorCapability> load(){
      return Arrays.asList(ConnectorCapability.values());
    }
  }
;
  capabilitiesPalette=new CheckBoxMultipleChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),capabilities);
  connectorForm.add(capabilitiesPalette);
  connectorForm.add(submit);
  add(connectorForm);
}"
60689,"@Override public Object getDisplayValue(final Boolean object){
  return object ? getString(ConnParameterType.OVERRIDABLE.name()) : getString(ConnParameterType.NOT_OVERRIDABLE.name());
}","@Override public Object getDisplayValue(final ConnBundleTO object){
  return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
}"
60690,"@Override public String getIdValue(final Boolean object,final int index){
  return String.valueOf(object);
}","@Override public String getIdValue(final ConnBundleTO object,final int index){
  return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
}"
60691,"@Override public FieldPanel setNewModel(final List<String> list){
  setNewModel(new Model(){
    private static final long serialVersionUID=527651414610325237L;
    final DateFormat formatter=new SimpleDateFormat(datePattern);
    @Override public Serializable getObject(){
      Date date=null;
      if (list != null && !list.isEmpty() && StringUtils.hasText(list.get(0))) {
        try {
          date=formatter.parse(list.get(0));
        }
 catch (        ParseException e) {
          LOG.error(""String_Node_Str"",e);
        }
      }
      return date;
    }
    @Override public void setObject(    Serializable object){
      if (object != null) {
        list.clear();
        list.add((String)formatter.format((Date)object));
      }
    }
  }
);
  return this;
}","@Override public FieldPanel setNewModel(final List<Serializable> list){
  setNewModel(new Model(){
    private static final long serialVersionUID=527651414610325237L;
    final DateFormat formatter=new SimpleDateFormat(datePattern);
    @Override public Serializable getObject(){
      Date date=null;
      if (list != null && !list.isEmpty() && StringUtils.hasText(list.get(0).toString())) {
        try {
          date=formatter.parse(list.get(0).toString());
        }
 catch (        ParseException e) {
          LOG.error(""String_Node_Str"",e);
        }
      }
      return date;
    }
    @Override public void setObject(    Serializable object){
      if (object != null) {
        list.clear();
        list.add((String)formatter.format((Date)object));
      }
    }
  }
);
  return this;
}"
60692,"@Override public Serializable getObject(){
  Date date=null;
  if (list != null && !list.isEmpty() && StringUtils.hasText(list.get(0))) {
    try {
      date=formatter.parse(list.get(0));
    }
 catch (    ParseException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
  return date;
}","@Override public Serializable getObject(){
  Date date=null;
  if (list != null && !list.isEmpty() && StringUtils.hasText(list.get(0).toString())) {
    try {
      date=formatter.parse(list.get(0).toString());
    }
 catch (    ParseException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
  return date;
}"
60693,"@Override public FieldPanel setNewModel(final List<String> list){
  setNewModel(new Model(){
    private static final long serialVersionUID=527651414610325237L;
    final DateFormat formatter=SyncopeSession.get().getDateFormat();
    @Override public Serializable getObject(){
      Date date=null;
      if (list != null && !list.isEmpty() && StringUtils.hasText(list.get(0))) {
        try {
          date=formatter.parse(list.get(0));
        }
 catch (        ParseException e) {
          LOG.error(""String_Node_Str"",e);
        }
      }
      return date;
    }
    @Override public void setObject(    Serializable object){
      if (object != null) {
        list.clear();
        list.add((String)formatter.format((Date)object));
      }
    }
  }
);
  return this;
}","@Override public FieldPanel setNewModel(final List<Serializable> list){
  setNewModel(new Model(){
    private static final long serialVersionUID=527651414610325237L;
    final DateFormat formatter=SyncopeSession.get().getDateFormat();
    @Override public Serializable getObject(){
      Date date=null;
      if (list != null && !list.isEmpty() && StringUtils.hasText(list.get(0).toString())) {
        try {
          date=formatter.parse(list.get(0).toString());
        }
 catch (        ParseException e) {
          LOG.error(""String_Node_Str"",e);
        }
      }
      return date;
    }
    @Override public void setObject(    Serializable object){
      if (object != null) {
        list.clear();
        list.add((String)formatter.format((Date)object));
      }
    }
  }
);
  return this;
}"
60694,"@Override public Serializable getObject(){
  Date date=null;
  if (list != null && !list.isEmpty() && StringUtils.hasText(list.get(0))) {
    try {
      date=formatter.parse(list.get(0));
    }
 catch (    ParseException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
  return date;
}","@Override public Serializable getObject(){
  Date date=null;
  if (list != null && !list.isEmpty() && StringUtils.hasText(list.get(0).toString())) {
    try {
      date=formatter.parse(list.get(0).toString());
    }
 catch (    ParseException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
  return date;
}"
60695,"public FieldPanel setNewModel(final List<String> list){
  setNewModel(new Model(){
    private static final long serialVersionUID=1088212074765051906L;
    @Override public Serializable getObject(){
      return list != null && !list.isEmpty() ? list.get(0) : null;
    }
    @Override public void setObject(    Serializable object){
      list.clear();
      if (object != null) {
        list.add(object.toString());
      }
    }
  }
);
  return this;
}","public FieldPanel setNewModel(final List<Serializable> list){
  setNewModel(new Model(){
    private static final long serialVersionUID=1088212074765051906L;
    @Override public Serializable getObject(){
      return list != null && !list.isEmpty() ? list.get(0) : null;
    }
    @Override public void setObject(    Serializable object){
      list.clear();
      if (object != null) {
        list.add(object);
      }
    }
  }
);
  return this;
}"
60696,"@Override public void setObject(Serializable object){
  list.clear();
  if (object != null) {
    list.add(object.toString());
  }
}","@Override public void setObject(Serializable object){
  list.clear();
  if (object != null) {
    list.add(object);
  }
}"
60697,"public DateFormat getDateFormat(){
  String language=""String_Node_Str"";
  if (getLocale() != null) {
    language=getLocale().getLanguage();
  }
  DateFormat formatter;
  if (""String_Node_Str"".equals(language)) {
    formatter=new SimpleDateFormat(Constants.ITALIAN_DATE_FORMAT);
  }
 else {
    formatter=new SimpleDateFormat(Constants.ENGLISH_DATE_FORMAT);
  }
  return formatter;
}","public SimpleDateFormat getDateFormat(){
  String language=""String_Node_Str"";
  if (getLocale() != null) {
    language=getLocale().getLanguage();
  }
  SimpleDateFormat formatter;
  if (""String_Node_Str"".equals(language)) {
    formatter=new SimpleDateFormat(Constants.ITALIAN_DATE_FORMAT);
  }
 else {
    formatter=new SimpleDateFormat(Constants.ENGLISH_DATE_FORMAT);
  }
  return formatter;
}"
60698,"@Override protected void populateItem(final ListItem<WorkflowFormPropertyTO> item){
  final WorkflowFormPropertyTO prop=item.getModelObject();
  Label label=new Label(""String_Node_Str"",prop.getName() == null ? prop.getId() : prop.getName());
  item.add(label);
  FieldPanel field=null;
switch (prop.getType()) {
case Boolean:
    field=new AjaxDropDownChoicePanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(Boolean.valueOf(prop.getValue())),true).setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
  break;
case Date:
DateFormat df=StringUtils.isNotBlank(prop.getDatePattern()) ? new SimpleDateFormat(prop.getDatePattern()) : new SimpleDateFormat();
Date parsedDate=null;
if (StringUtils.isNotBlank(prop.getValue())) {
try {
parsedDate=df.parse(prop.getValue());
}
 catch (ParseException e) {
LOG.error(""String_Node_Str"",prop.getValue(),e);
}
}
field=new DateTimeFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(parsedDate),true);
break;
case Enum:
MapChoiceRenderer<String,String> enumCR=new MapChoiceRenderer<String,String>(prop.getEnumValues());
field=new AjaxDropDownChoicePanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(prop.getValue()),true).setChoiceRenderer(enumCR).setChoices(new Model(){
private static final long serialVersionUID=-858521070366432018L;
@Override public Serializable getObject(){
return new ArrayList(prop.getEnumValues().keySet());
}
}
);
break;
case Long:
field=new AjaxNumberFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(Long.valueOf(prop.getValue())),true);
break;
case String:
default :
field=new AjaxTextFieldPanel(""String_Node_Str"",PARENT_PATH,new Model(prop.getValue()),true);
break;
}
field.setReadOnly(!prop.isWritable());
if (prop.isRequired()) {
field.addRequiredLabel();
}
item.add(field);
}","@Override protected void populateItem(final ListItem<WorkflowFormPropertyTO> item){
  final WorkflowFormPropertyTO prop=item.getModelObject();
  Label label=new Label(""String_Node_Str"",prop.getName() == null ? prop.getId() : prop.getName());
  item.add(label);
  FieldPanel field=null;
switch (prop.getType()) {
case Boolean:
    field=new AjaxDropDownChoicePanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(Boolean.valueOf(prop.getValue())),true).setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
  break;
case Date:
SimpleDateFormat df=StringUtils.isNotBlank(prop.getDatePattern()) ? new SimpleDateFormat(prop.getDatePattern()) : new SimpleDateFormat();
Date parsedDate=null;
if (StringUtils.isNotBlank(prop.getValue())) {
try {
parsedDate=df.parse(prop.getValue());
}
 catch (ParseException e) {
LOG.error(""String_Node_Str"",prop.getValue(),e);
}
}
field=new DateTimeFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(parsedDate),true,df.toLocalizedPattern());
break;
case Enum:
MapChoiceRenderer<String,String> enumCR=new MapChoiceRenderer<String,String>(prop.getEnumValues());
field=new AjaxDropDownChoicePanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(prop.getValue()),true).setChoiceRenderer(enumCR).setChoices(new Model(){
private static final long serialVersionUID=-858521070366432018L;
@Override public Serializable getObject(){
return new ArrayList(prop.getEnumValues().keySet());
}
}
);
break;
case Long:
field=new AjaxNumberFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(Long.valueOf(prop.getValue())),true);
break;
case String:
default :
field=new AjaxTextFieldPanel(""String_Node_Str"",PARENT_PATH,new Model(prop.getValue()),true);
break;
}
field.setReadOnly(!prop.isWritable());
if (prop.isRequired()) {
field.addRequiredLabel();
}
item.add(field);
}"
60699,"public ApprovalModalPage(final PageReference callerPageRef,final ModalWindow window,final WorkflowFormTO formTO){
  super();
  IModel<List<WorkflowFormPropertyTO>> formProps=new LoadableDetachableModel<List<WorkflowFormPropertyTO>>(){
    private static final long serialVersionUID=3169142472626817508L;
    @Override protected List<WorkflowFormPropertyTO> load(){
      return formTO.getProperties();
    }
  }
;
  final ListView<WorkflowFormPropertyTO> propView=new ListView<WorkflowFormPropertyTO>(""String_Node_Str"",formProps){
    private static final long serialVersionUID=9101744072914090143L;
    @Override protected void populateItem(    final ListItem<WorkflowFormPropertyTO> item){
      final WorkflowFormPropertyTO prop=item.getModelObject();
      Label label=new Label(""String_Node_Str"",prop.getName() == null ? prop.getId() : prop.getName());
      item.add(label);
      FieldPanel field=null;
switch (prop.getType()) {
case Boolean:
        field=new AjaxDropDownChoicePanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(Boolean.valueOf(prop.getValue())),true).setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
      break;
case Date:
    DateFormat df=StringUtils.isNotBlank(prop.getDatePattern()) ? new SimpleDateFormat(prop.getDatePattern()) : new SimpleDateFormat();
  Date parsedDate=null;
if (StringUtils.isNotBlank(prop.getValue())) {
  try {
    parsedDate=df.parse(prop.getValue());
  }
 catch (  ParseException e) {
    LOG.error(""String_Node_Str"",prop.getValue(),e);
  }
}
field=new DateTimeFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(parsedDate),true);
break;
case Enum:
MapChoiceRenderer<String,String> enumCR=new MapChoiceRenderer<String,String>(prop.getEnumValues());
field=new AjaxDropDownChoicePanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(prop.getValue()),true).setChoiceRenderer(enumCR).setChoices(new Model(){
private static final long serialVersionUID=-858521070366432018L;
@Override public Serializable getObject(){
return new ArrayList(prop.getEnumValues().keySet());
}
}
);
break;
case Long:
field=new AjaxNumberFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(Long.valueOf(prop.getValue())),true);
break;
case String:
default :
field=new AjaxTextFieldPanel(""String_Node_Str"",PARENT_PATH,new Model(prop.getValue()),true);
break;
}
field.setReadOnly(!prop.isWritable());
if (prop.isRequired()) {
field.addRequiredLabel();
}
item.add(field);
}
}
;
final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form<?> form){
Map<String,WorkflowFormPropertyTO> props=formTO.getPropertiesAsMap();
for (int i=0; i < propView.size(); i++) {
ListItem<WorkflowFormPropertyTO> item=(ListItem<WorkflowFormPropertyTO>)propView.get(i);
String input=((FieldPanel)item.get(""String_Node_Str"")).getField().getInput();
if (!props.containsKey(item.getModelObject().getId())) {
props.put(item.getModelObject().getId(),new WorkflowFormPropertyTO());
}
if (item.getModelObject().isWritable()) {
switch (item.getModelObject().getType()) {
case Boolean:
props.get(item.getModelObject().getId()).setValue(String.valueOf(input.equals(""String_Node_Str"")));
break;
case Date:
case Enum:
case String:
case Long:
default :
props.get(item.getModelObject().getId()).setValue(input);
break;
}
}
}
formTO.setProperties(props.values());
try {
restClient.submitForm(formTO);
((Todo)callerPageRef.getPage()).setModalResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
LOG.error(""String_Node_Str"",formTO,e);
target.add(feedbackPanel);
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form<?> form){
target.add(feedbackPanel);
}
}
;
Form form=new Form(""String_Node_Str"");
form.add(propView);
form.add(submit);
MetaDataRoleAuthorizationStrategy.authorize(form,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
add(form);
}","public ApprovalModalPage(final PageReference callerPageRef,final ModalWindow window,final WorkflowFormTO formTO){
  super();
  IModel<List<WorkflowFormPropertyTO>> formProps=new LoadableDetachableModel<List<WorkflowFormPropertyTO>>(){
    private static final long serialVersionUID=3169142472626817508L;
    @Override protected List<WorkflowFormPropertyTO> load(){
      return formTO.getProperties();
    }
  }
;
  final ListView<WorkflowFormPropertyTO> propView=new ListView<WorkflowFormPropertyTO>(""String_Node_Str"",formProps){
    private static final long serialVersionUID=9101744072914090143L;
    @Override protected void populateItem(    final ListItem<WorkflowFormPropertyTO> item){
      final WorkflowFormPropertyTO prop=item.getModelObject();
      Label label=new Label(""String_Node_Str"",prop.getName() == null ? prop.getId() : prop.getName());
      item.add(label);
      FieldPanel field=null;
switch (prop.getType()) {
case Boolean:
        field=new AjaxDropDownChoicePanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(Boolean.valueOf(prop.getValue())),true).setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
      break;
case Date:
    SimpleDateFormat df=StringUtils.isNotBlank(prop.getDatePattern()) ? new SimpleDateFormat(prop.getDatePattern()) : new SimpleDateFormat();
  Date parsedDate=null;
if (StringUtils.isNotBlank(prop.getValue())) {
  try {
    parsedDate=df.parse(prop.getValue());
  }
 catch (  ParseException e) {
    LOG.error(""String_Node_Str"",prop.getValue(),e);
  }
}
field=new DateTimeFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(parsedDate),true,df.toLocalizedPattern());
break;
case Enum:
MapChoiceRenderer<String,String> enumCR=new MapChoiceRenderer<String,String>(prop.getEnumValues());
field=new AjaxDropDownChoicePanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(prop.getValue()),true).setChoiceRenderer(enumCR).setChoices(new Model(){
private static final long serialVersionUID=-858521070366432018L;
@Override public Serializable getObject(){
return new ArrayList(prop.getEnumValues().keySet());
}
}
);
break;
case Long:
field=new AjaxNumberFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new Model(Long.valueOf(prop.getValue())),true);
break;
case String:
default :
field=new AjaxTextFieldPanel(""String_Node_Str"",PARENT_PATH,new Model(prop.getValue()),true);
break;
}
field.setReadOnly(!prop.isWritable());
if (prop.isRequired()) {
field.addRequiredLabel();
}
item.add(field);
}
}
;
final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form<?> form){
Map<String,WorkflowFormPropertyTO> props=formTO.getPropertiesAsMap();
for (int i=0; i < propView.size(); i++) {
ListItem<WorkflowFormPropertyTO> item=(ListItem<WorkflowFormPropertyTO>)propView.get(i);
String input=((FieldPanel)item.get(""String_Node_Str"")).getField().getInput();
if (!props.containsKey(item.getModelObject().getId())) {
props.put(item.getModelObject().getId(),new WorkflowFormPropertyTO());
}
if (item.getModelObject().isWritable()) {
switch (item.getModelObject().getType()) {
case Boolean:
props.get(item.getModelObject().getId()).setValue(String.valueOf(input.equals(""String_Node_Str"")));
break;
case Date:
case Enum:
case String:
case Long:
default :
props.get(item.getModelObject().getId()).setValue(input);
break;
}
}
}
formTO.setProperties(props.values());
try {
restClient.submitForm(formTO);
((Todo)callerPageRef.getPage()).setModalResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
LOG.error(""String_Node_Str"",formTO,e);
target.add(feedbackPanel);
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form<?> form){
target.add(feedbackPanel);
}
}
;
Form form=new Form(""String_Node_Str"");
form.add(propView);
form.add(submit);
MetaDataRoleAuthorizationStrategy.authorize(form,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
add(form);
}"
60700,"private FieldPanel getFieldPanel(final SchemaTO schemaTO,final Form form,final AttributeTO attributeTO){
  final FieldPanel panel;
  final boolean required=templateMode ? false : schemaTO.getMandatoryCondition().equalsIgnoreCase(""String_Node_Str"");
  final boolean readOnly=templateMode ? false : schemaTO.isReadonly();
  final SchemaType type=templateMode ? SchemaType.String : schemaTO.getType();
switch (type) {
case Boolean:
    panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(),true);
  panel.setRequired(required);
break;
case Date:
if (!schemaTO.getConversionPattern().contains(""String_Node_Str"")) {
panel=new DateTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(),true,schemaTO.getConversionPattern());
if (required) {
  panel.addRequiredLabel();
}
}
 else {
panel=new DateTimeFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(),true);
if (required) {
  panel.addRequiredLabel();
  ((DateTimeFieldPanel)panel).setFormValidator(form);
}
panel.setStyleShet(""String_Node_Str"");
}
break;
case Enum:
panel=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",schemaTO.getName(),new Model(),true);
((AjaxDropDownChoicePanel)panel).setChoices(Arrays.asList(schemaTO.getEnumerationValues().split(Schema.enumValuesSeparator)));
if (required) {
panel.addRequiredLabel();
}
break;
default :
panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(),true);
if (required) {
panel.addRequiredLabel();
}
}
panel.setReadOnly(readOnly);
panel.setNewModel(attributeTO.getValues());
return panel;
}","private FieldPanel getFieldPanel(final SchemaTO schemaTO,final Form form,final AttributeTO attributeTO){
  final FieldPanel panel;
  final boolean required=templateMode ? false : schemaTO.getMandatoryCondition().equalsIgnoreCase(""String_Node_Str"");
  final boolean readOnly=templateMode ? false : schemaTO.isReadonly();
  final SchemaType type=templateMode ? SchemaType.String : schemaTO.getType();
switch (type) {
case Boolean:
    panel=new AjaxCheckBoxPanel(""String_Node_Str"",schemaTO.getName(),new Model(),true);
  panel.setRequired(required);
break;
case Date:
if (!schemaTO.getConversionPattern().contains(""String_Node_Str"")) {
panel=new DateTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(),true,schemaTO.getConversionPattern());
if (required) {
  panel.addRequiredLabel();
}
}
 else {
panel=new DateTimeFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(),true,schemaTO.getConversionPattern());
if (required) {
  panel.addRequiredLabel();
  ((DateTimeFieldPanel)panel).setFormValidator(form);
}
panel.setStyleShet(""String_Node_Str"");
}
break;
case Enum:
panel=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",schemaTO.getName(),new Model(),true);
((AjaxDropDownChoicePanel)panel).setChoices(Arrays.asList(schemaTO.getEnumerationValues().split(Schema.enumValuesSeparator)));
if (required) {
panel.addRequiredLabel();
}
break;
default :
panel=new AjaxTextFieldPanel(""String_Node_Str"",schemaTO.getName(),new Model(),true);
if (required) {
panel.addRequiredLabel();
}
}
panel.setReadOnly(readOnly);
panel.setNewModel(attributeTO.getValues());
return panel;
}"
60701,"public <T extends AbstractAttributableTO>UserDetailsPanel(final String id,final UserTO userTO,final Form form,final boolean resetPassword,final boolean templateMode){
  super(id);
  final FieldPanel username=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(userTO,""String_Node_Str""),true);
  if (!templateMode) {
    username.addRequiredLabel();
  }
  add(username);
  final FieldPanel password;
  final Label confirmPasswordLabel=new Label(""String_Node_Str"",getString(""String_Node_Str""));
  final FieldPanel confirmPassword;
  if (templateMode) {
    password=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(userTO,""String_Node_Str""),true);
    confirmPasswordLabel.setVisible(false);
    confirmPassword=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<String>(),false);
    confirmPassword.setEnabled(false);
    confirmPassword.setVisible(false);
  }
 else {
    password=new AjaxPasswordFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(userTO,""String_Node_Str""),true);
    password.setRequired(userTO.getId() == 0);
    ((PasswordTextField)password.getField()).setResetPassword(resetPassword);
    confirmPassword=new AjaxPasswordFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<String>(),true);
    if (!resetPassword) {
      confirmPassword.getField().setModelObject(userTO.getPassword());
    }
    confirmPassword.setRequired(userTO.getId() == 0);
    ((PasswordTextField)confirmPassword.getField()).setResetPassword(resetPassword);
    form.add(new EqualPasswordInputValidator(password.getField(),confirmPassword.getField()));
  }
  add(password);
  add(confirmPasswordLabel);
  add(confirmPassword);
  final WebMarkupContainer mandatoryPassword=new WebMarkupContainer(""String_Node_Str"");
  mandatoryPassword.add(new Behavior(){
    private static final long serialVersionUID=1469628524240283489L;
    @Override public void onComponentTag(    final Component component,    final ComponentTag tag){
      if (userTO.getId() > 0) {
        tag.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  add(mandatoryPassword);
  final AjaxTextFieldPanel status=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<String>(userTO.getStatus()),false);
  status.setReadOnly(true);
  add(status);
  final DateTimeFieldPanel creationDate=new DateTimeFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<Date>(userTO.getCreationDate()),false);
  creationDate.setReadOnly(true);
  add(creationDate);
  final DateTimeFieldPanel changePwdDate=new DateTimeFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<Date>(userTO.getChangePwdDate()),false);
  changePwdDate.setReadOnly(true);
  add(changePwdDate);
  final DateTimeFieldPanel lastLoginDate=new DateTimeFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<Date>(userTO.getLastLoginDate()),false);
  lastLoginDate.setReadOnly(true);
  add(lastLoginDate);
  final AjaxNumberFieldPanel failedLogins=new AjaxNumberFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<Number>(userTO.getFailedLogins()),false);
  failedLogins.setReadOnly(true);
  add(failedLogins);
  final AjaxTextFieldPanel token=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<String>(userTO.getToken()),false);
  token.setReadOnly(true);
  add(token);
  final DateTimeFieldPanel tokenExpireTime=new DateTimeFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<Date>(userTO.getTokenExpireTime()),false);
  tokenExpireTime.setReadOnly(true);
  add(tokenExpireTime);
}","public <T extends AbstractAttributableTO>UserDetailsPanel(final String id,final UserTO userTO,final Form form,final boolean resetPassword,final boolean templateMode){
  super(id);
  final FieldPanel username=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(userTO,""String_Node_Str""),true);
  if (!templateMode) {
    username.addRequiredLabel();
  }
  add(username);
  final FieldPanel password;
  final Label confirmPasswordLabel=new Label(""String_Node_Str"",new ResourceModel(""String_Node_Str""));
  final FieldPanel confirmPassword;
  if (templateMode) {
    password=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(userTO,""String_Node_Str""),true);
    confirmPasswordLabel.setVisible(false);
    confirmPassword=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<String>(),false);
    confirmPassword.setEnabled(false);
    confirmPassword.setVisible(false);
  }
 else {
    password=new AjaxPasswordFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(userTO,""String_Node_Str""),true);
    password.setRequired(userTO.getId() == 0);
    ((PasswordTextField)password.getField()).setResetPassword(resetPassword);
    confirmPassword=new AjaxPasswordFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<String>(),true);
    if (!resetPassword) {
      confirmPassword.getField().setModelObject(userTO.getPassword());
    }
    confirmPassword.setRequired(userTO.getId() == 0);
    ((PasswordTextField)confirmPassword.getField()).setResetPassword(resetPassword);
    form.add(new EqualPasswordInputValidator(password.getField(),confirmPassword.getField()));
  }
  add(password);
  add(confirmPasswordLabel);
  add(confirmPassword);
  final WebMarkupContainer mandatoryPassword=new WebMarkupContainer(""String_Node_Str"");
  mandatoryPassword.add(new Behavior(){
    private static final long serialVersionUID=1469628524240283489L;
    @Override public void onComponentTag(    final Component component,    final ComponentTag tag){
      if (userTO.getId() > 0) {
        tag.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  add(mandatoryPassword);
  final AjaxTextFieldPanel status=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<String>(userTO.getStatus()),false);
  status.setReadOnly(true);
  add(status);
  final DateTimeFieldPanel creationDate=new DateTimeFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<Date>(userTO.getCreationDate()),false,SyncopeSession.get().getDateFormat().toLocalizedPattern());
  creationDate.setReadOnly(true);
  add(creationDate);
  final DateTimeFieldPanel changePwdDate=new DateTimeFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<Date>(userTO.getChangePwdDate()),false,SyncopeSession.get().getDateFormat().toLocalizedPattern());
  changePwdDate.setReadOnly(true);
  add(changePwdDate);
  final DateTimeFieldPanel lastLoginDate=new DateTimeFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<Date>(userTO.getLastLoginDate()),false,SyncopeSession.get().getDateFormat().toLocalizedPattern());
  lastLoginDate.setReadOnly(true);
  add(lastLoginDate);
  final AjaxNumberFieldPanel failedLogins=new AjaxNumberFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<Number>(userTO.getFailedLogins()),false);
  failedLogins.setReadOnly(true);
  add(failedLogins);
  final AjaxTextFieldPanel token=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<String>(userTO.getToken()),false);
  token.setReadOnly(true);
  add(token);
  final DateTimeFieldPanel tokenExpireTime=new DateTimeFieldPanel(""String_Node_Str"",""String_Node_Str"",new Model<Date>(userTO.getTokenExpireTime()),false,SyncopeSession.get().getDateFormat().toLocalizedPattern());
  tokenExpireTime.setReadOnly(true);
  add(tokenExpireTime);
}"
60702,"@Override protected void populateItem(final ListItem<SearchCondWrapper> item){
  final SearchCondWrapper searchCondition=item.getModelObject();
  if (item.getIndex() == 0) {
    item.add(new Label(""String_Node_Str"",""String_Node_Str""));
  }
 else {
    item.add(new Label(""String_Node_Str"",searchCondition.getOperationType().toString()));
  }
  final CheckBox notOperator=new CheckBox(""String_Node_Str"",new PropertyModel(searchCondition,""String_Node_Str""));
  notOperator.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget art){
    }
  }
);
  item.add(notOperator);
  final DropDownChoice<String> filterNameChooser=new DropDownChoice<String>(""String_Node_Str"",new PropertyModel<String>(searchCondition,""String_Node_Str""),(IModel)null);
  filterNameChooser.setOutputMarkupId(true);
  filterNameChooser.setRequired(true);
  item.add(filterNameChooser);
  filterNameChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget art){
    }
  }
);
  final DropDownChoice<AttributeCond.Type> type=new DropDownChoice<AttributeCond.Type>(""String_Node_Str"",new PropertyModel<AttributeCond.Type>(searchCondition,""String_Node_Str""),attributeTypes);
  type.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget art){
    }
  }
);
  item.add(type);
  final TextField<String> filterValue=new TextField<String>(""String_Node_Str"",new PropertyModel<String>(searchCondition,""String_Node_Str""));
  item.add(filterValue);
  filterValue.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget art){
    }
  }
);
  final DropDownChoice<FilterType> filterTypeChooser=new DropDownChoice<FilterType>(""String_Node_Str"",new PropertyModel<FilterType>(searchCondition,""String_Node_Str""),filterTypes);
  filterTypeChooser.setOutputMarkupId(true);
  filterTypeChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      target.add(searchFormContainer);
    }
  }
);
  filterTypeChooser.setRequired(true);
  item.add(filterTypeChooser);
  AjaxButton dropButton=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-4804368561204623354L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form<?> form){
      getList().remove(Integer.valueOf(getParent().getId()).intValue());
      target.add(searchFormContainer);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form<?> form){
      target.add(searchFormContainer);
    }
  }
;
  dropButton.setDefaultFormProcessing(false);
  if (item.getIndex() == 0) {
    dropButton.setVisible(false);
  }
  item.add(dropButton);
  try {
switch (searchCondition.getFilterType()) {
case ATTRIBUTE:
      final List<String> names=new ArrayList<String>(dnames.getObject());
    if (unames.getObject() != null && !unames.getObject().isEmpty()) {
      names.addAll(unames.getObject());
    }
  filterNameChooser.setChoices(names);
if (!type.isEnabled()) {
  type.setEnabled(true);
  type.setRequired(true);
}
if (!filterValue.isEnabled()) {
filterValue.setEnabled(true);
}
break;
case MEMBERSHIP:
filterNameChooser.setChoices(ronames);
type.setEnabled(false);
type.setRequired(false);
type.setModelObject(null);
filterValue.setEnabled(false);
filterValue.setModelObject(""String_Node_Str"");
break;
case RESOURCE:
filterNameChooser.setChoices(renames);
type.setEnabled(false);
type.setRequired(false);
type.setModelObject(null);
filterValue.setEnabled(false);
filterValue.setModelObject(""String_Node_Str"");
break;
default :
filterNameChooser.setChoices(Collections.EMPTY_LIST);
}
}
 catch (NullPointerException npe) {
filterNameChooser.setChoices(Collections.EMPTY_LIST);
}
}","@Override protected void populateItem(final ListItem<SearchCondWrapper> item){
  final SearchCondWrapper searchCondition=item.getModelObject();
  if (item.getIndex() == 0) {
    item.add(new Label(""String_Node_Str"",""String_Node_Str""));
  }
 else {
    item.add(new Label(""String_Node_Str"",searchCondition.getOperationType().toString()));
  }
  final CheckBox notOperator=new CheckBox(""String_Node_Str"",new PropertyModel(searchCondition,""String_Node_Str""));
  notOperator.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget art){
    }
  }
);
  item.add(notOperator);
  final DropDownChoice<String> filterNameChooser=new DropDownChoice<String>(""String_Node_Str"",new PropertyModel<String>(searchCondition,""String_Node_Str""),(IModel)null);
  filterNameChooser.setOutputMarkupId(true);
  filterNameChooser.setRequired(true);
  item.add(filterNameChooser);
  filterNameChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget art){
    }
  }
);
  final DropDownChoice<AttributeCond.Type> type=new DropDownChoice<AttributeCond.Type>(""String_Node_Str"",new PropertyModel<AttributeCond.Type>(searchCondition,""String_Node_Str""),attributeTypes);
  type.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget art){
    }
  }
);
  item.add(type);
  final TextField<String> filterValue=new TextField<String>(""String_Node_Str"",new PropertyModel<String>(searchCondition,""String_Node_Str""));
  item.add(filterValue);
  filterValue.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget art){
    }
  }
);
  final DropDownChoice<FilterType> filterTypeChooser=new DropDownChoice<FilterType>(""String_Node_Str"",new PropertyModel<FilterType>(searchCondition,""String_Node_Str""),filterTypes);
  filterTypeChooser.setOutputMarkupId(true);
  filterTypeChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      target.add(searchFormContainer);
    }
  }
);
  filterTypeChooser.setRequired(true);
  item.add(filterTypeChooser);
  AjaxButton dropButton=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-4804368561204623354L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form<?> form){
      getList().remove(Integer.valueOf(getParent().getId()).intValue());
      target.add(searchFormContainer);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form<?> form){
      target.add(searchFormContainer);
    }
  }
;
  dropButton.setDefaultFormProcessing(false);
  if (item.getIndex() == 0) {
    dropButton.setVisible(false);
  }
  item.add(dropButton);
  try {
switch (searchCondition.getFilterType()) {
case ATTRIBUTE:
      final List<String> names=new ArrayList<String>(dnames.getObject());
    if (unames.getObject() != null && !unames.getObject().isEmpty()) {
      names.addAll(unames.getObject());
    }
  Collections.sort(names);
filterNameChooser.setChoices(names);
if (!type.isEnabled()) {
type.setEnabled(true);
type.setRequired(true);
}
if (!filterValue.isEnabled()) {
filterValue.setEnabled(true);
}
break;
case MEMBERSHIP:
filterNameChooser.setChoices(ronames);
type.setEnabled(false);
type.setRequired(false);
type.setModelObject(null);
filterValue.setEnabled(false);
filterValue.setModelObject(""String_Node_Str"");
break;
case RESOURCE:
filterNameChooser.setChoices(renames);
type.setEnabled(false);
type.setRequired(false);
type.setModelObject(null);
filterValue.setEnabled(false);
filterValue.setModelObject(""String_Node_Str"");
break;
default :
filterNameChooser.setChoices(Collections.EMPTY_LIST);
}
}
 catch (NullPointerException npe) {
filterNameChooser.setChoices(Collections.EMPTY_LIST);
}
}"
60703,"/** 
 * Get schema names.
 * @return List of schema names.
 */
public List<String> getSchemaNames(final String kind){
  final List<String> schemasNames=new ArrayList<String>();
  try {
    final List<SchemaTO> userSchemas=Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",SchemaTO[].class));
    for (    SchemaTO schemaTO : userSchemas) {
      schemasNames.add(schemaTO.getName());
    }
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return schemasNames;
}","/** 
 * Get schema names.
 * @return List of schema names.
 */
public List<String> getSchemaNames(final String kind){
  final List<String> schemaNames=new ArrayList<String>();
  try {
    final List<SchemaTO> userSchemas=Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",SchemaTO[].class));
    for (    SchemaTO schemaTO : userSchemas) {
      schemaNames.add(schemaTO.getName());
    }
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return schemaNames;
}"
60704,"@Override protected void onUpdate(AjaxRequestTarget art){
}","@Override protected void onUpdate(final AjaxRequestTarget target){
}"
60705,"public AjaxCheckBoxPanel(final String id,final String name,final IModel<Boolean> model,final boolean active){
  super(id,name,model,active);
  field=new CheckBox(""String_Node_Str"",model);
  add(field.setLabel(new Model(name)).setOutputMarkupId(true));
  if (active) {
    field.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
      private static final long serialVersionUID=-1107858522700306810L;
      @Override protected void onUpdate(      AjaxRequestTarget art){
      }
    }
);
  }
}","public AjaxCheckBoxPanel(final String id,final String name,final IModel<Boolean> model,final boolean active){
  super(id,name,model,active);
  field=new CheckBox(""String_Node_Str"",model);
  add(field.setLabel(new Model(name)).setOutputMarkupId(true));
  if (active) {
    field.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
      private static final long serialVersionUID=-1107858522700306810L;
      @Override protected void onUpdate(      final AjaxRequestTarget target){
      }
    }
);
  }
}"
60706,"@Override public FieldPanel setNewModel(final List<Serializable> list){
  setNewModel(new Model(){
    private static final long serialVersionUID=527651414610325237L;
    final DateFormat formatter=new SimpleDateFormat(datePattern);
    @Override public Serializable getObject(){
      Date date=null;
      if (list != null && !list.isEmpty() && StringUtils.hasText(list.get(0).toString())) {
        try {
          date=formatter.parse(list.get(0).toString());
        }
 catch (        ParseException e) {
          LOG.error(""String_Node_Str"",e);
        }
      }
      return date;
    }
    @Override public void setObject(    Serializable object){
      if (object != null) {
        list.clear();
        list.add((String)formatter.format((Date)object));
      }
    }
  }
);
  return this;
}","@Override public FieldPanel setNewModel(final List<Serializable> list){
  setNewModel(new Model(){
    private static final long serialVersionUID=527651414610325237L;
    private final DateFormat formatter=new SimpleDateFormat(datePattern);
    @Override public Serializable getObject(){
      Date date=null;
      if (list != null && !list.isEmpty() && StringUtils.hasText(list.get(0).toString())) {
        try {
          date=formatter.parse(list.get(0).toString());
        }
 catch (        ParseException e) {
          LOG.error(""String_Node_Str"",e);
        }
      }
      return date;
    }
    @Override public void setObject(    final Serializable object){
      if (object != null) {
        list.clear();
        list.add((String)formatter.format((Date)object));
      }
    }
  }
);
  return this;
}"
60707,"@Override public void setObject(Serializable object){
  if (object != null) {
    list.clear();
    list.add((String)formatter.format((Date)object));
  }
}","@Override public void setObject(final Serializable object){
  if (object != null) {
    list.clear();
    list.add((String)formatter.format((Date)object));
  }
}"
60708,"public void setBooleanValue(Boolean booleanValue){
  if (booleanValue == null) {
    this.booleanValue=null;
  }
 else {
    this.booleanValue=getBooleanAsInteger(booleanValue);
  }
}","public void setBooleanValue(final Boolean booleanValue){
  this.booleanValue=booleanValue == null ? null : getBooleanAsInteger(booleanValue);
}"
60709,"public void setDateValue(Date dateValue){
  this.dateValue=dateValue;
}","public void setDateValue(final Date dateValue){
  this.dateValue=dateValue == null ? null : new Date(dateValue.getTime());
}"
60710,"public void setLongValue(Long longValue){
  this.longValue=longValue;
}","public void setLongValue(final Long longValue){
  this.longValue=longValue;
}"
60711,"public void setStringValue(String stringValue){
  this.stringValue=stringValue;
}","public void setStringValue(final String stringValue){
  this.stringValue=stringValue;
}"
60712,"public Boolean getBooleanValue(){
  if (booleanValue == null) {
    return null;
  }
  return isBooleanAsInteger(booleanValue);
}","public Boolean getBooleanValue(){
  return booleanValue == null ? null : isBooleanAsInteger(booleanValue);
}"
60713,"public void setDoubleValue(Double doubleValue){
  this.doubleValue=doubleValue;
}","public void setDoubleValue(final Double doubleValue){
  this.doubleValue=doubleValue;
}"
60714,"public Date getDateValue(){
  return dateValue;
}","public Date getDateValue(){
  return dateValue == null ? null : new Date(dateValue.getTime());
}"
60715,"public void setStartDate(Date startDate){
  if (startDate != null) {
    this.startDate=new Date(startDate.getTime());
  }
}","public void setStartDate(final Date startDate){
  this.startDate=startDate == null ? null : new Date(startDate.getTime());
}"
60716,"public void setEndDate(Date endDate){
  if (endDate != null) {
    this.endDate=new Date(endDate.getTime());
  }
}","public void setEndDate(final Date endDate){
  this.endDate=endDate == null ? null : new Date(endDate.getTime());
}"
60717,"/** 
 * @param password the password to be set
 */
public void setPassword(final String password,final CipherAlgorithm cipherAlgoritm,final int historySize){
  clearPassword=password;
  try {
    this.password=encodePassword(password,cipherAlgoritm);
    this.cipherAlgorithm=cipherAlgoritm;
  }
 catch (  Throwable t) {
    LOG.error(""String_Node_Str"",t);
    this.password=null;
  }
}","public void setPassword(final String password,final CipherAlgorithm cipherAlgoritm,final int historySize){
  clearPassword=password;
  try {
    this.password=encodePassword(password,cipherAlgoritm);
    this.cipherAlgorithm=cipherAlgoritm;
  }
 catch (  Throwable t) {
    LOG.error(""String_Node_Str"",t);
    this.password=null;
  }
}"
60718,"@Override public <T extends AbstractVirAttr>boolean addVirtualAttribute(T virtualAttribute){
  return virtualAttributes.add((UVirAttr)virtualAttribute);
}","@Override public <T extends AbstractVirAttr>boolean addVirtualAttribute(final T virtualAttribute){
  return virtualAttributes.add((UVirAttr)virtualAttribute);
}"
60719,"public Date getTokenExpireTime(){
  return tokenExpireTime;
}","public Date getTokenExpireTime(){
  return tokenExpireTime == null ? null : new Date(tokenExpireTime.getTime());
}"
60720,"public Membership getMembership(Long syncopeRoleId){
  Membership result=null;
  Membership membership;
  for (Iterator<Membership> itor=getMemberships().iterator(); result == null && itor.hasNext(); ) {
    membership=itor.next();
    if (membership.getSyncopeRole() != null && syncopeRoleId.equals(membership.getSyncopeRole().getId())) {
      result=membership;
    }
  }
  return result;
}","public Membership getMembership(final Long syncopeRoleId){
  Membership result=null;
  Membership membership;
  for (Iterator<Membership> itor=getMemberships().iterator(); result == null && itor.hasNext(); ) {
    membership=itor.next();
    if (membership.getSyncopeRole() != null && syncopeRoleId.equals(membership.getSyncopeRole().getId())) {
      result=membership;
    }
  }
  return result;
}"
60721,"public void setCreationDate(final Date creationDate){
  this.creationDate=creationDate;
}","public void setCreationDate(final Date creationDate){
  this.creationDate=creationDate == null ? null : new Date(creationDate.getTime());
}"
60722,"public boolean addMembership(Membership membership){
  return memberships.contains(membership) || memberships.add(membership);
}","public boolean addMembership(final Membership membership){
  return memberships.contains(membership) || memberships.add(membership);
}"
60723,"public boolean removeMembership(Membership membership){
  return memberships == null || memberships.remove(membership);
}","public boolean removeMembership(final Membership membership){
  return memberships.remove(membership);
}"
60724,"@Override public void setDerivedAttributes(List<? extends AbstractDerAttr> derivedAttributes){
  this.derivedAttributes=(List<UDerAttr>)derivedAttributes;
}","@Override public void setDerivedAttributes(final List<? extends AbstractDerAttr> derivedAttributes){
  this.derivedAttributes=(List<UDerAttr>)derivedAttributes;
}"
60725,"public void setChangePwdDate(final Date changePwdDate){
  this.changePwdDate=changePwdDate;
}","public void setChangePwdDate(final Date changePwdDate){
  this.changePwdDate=changePwdDate == null ? null : new Date(changePwdDate.getTime());
}"
60726,"public void setLastLoginDate(final Date lastLoginDate){
  this.lastLoginDate=lastLoginDate;
}","public void setLastLoginDate(final Date lastLoginDate){
  this.lastLoginDate=lastLoginDate == null ? null : new Date(lastLoginDate.getTime());
}"
60727,"public boolean verifyPasswordHistory(final String password,final int size){
  try {
    boolean res=false;
    if (size != 0) {
      res=passwordHistory.subList(size >= passwordHistory.size() ? 0 : passwordHistory.size() - size,passwordHistory.size()).contains(cipherAlgorithm != null ? encodePassword(password,cipherAlgorithm) : password);
    }
    return res;
  }
 catch (  Throwable t) {
    LOG.error(""String_Node_Str"",t);
    return false;
  }
}","public boolean verifyPasswordHistory(final String password,final int size){
  boolean res=false;
  if (size > 0) {
    try {
      res=passwordHistory.subList(size >= passwordHistory.size() ? 0 : passwordHistory.size() - size,passwordHistory.size()).contains(cipherAlgorithm != null ? encodePassword(password,cipherAlgorithm) : password);
    }
 catch (    Throwable t) {
      LOG.error(""String_Node_Str"",t);
    }
  }
  return res;
}"
60728,"@Override public void setAttributes(List<? extends AbstractAttr> attributes){
  this.attributes=(List<UAttr>)attributes;
}","@Override public void setAttributes(final List<? extends AbstractAttr> attributes){
  this.attributes=(List<UAttr>)attributes;
}"
60729,"@Override public void setVirtualAttributes(List<? extends AbstractVirAttr> virtualAttributes){
  this.virtualAttributes=(List<UVirAttr>)virtualAttributes;
}","@Override public void setVirtualAttributes(final List<? extends AbstractVirAttr> virtualAttributes){
  this.virtualAttributes=(List<UVirAttr>)virtualAttributes;
}"
60730,"public Date getCreationDate(){
  return creationDate;
}","public Date getCreationDate(){
  return creationDate == null ? null : new Date(creationDate.getTime());
}"
60731,"public void setMemberships(List<Membership> memberships){
  this.memberships.clear();
  if (memberships != null && !memberships.isEmpty()) {
    this.memberships.addAll(memberships);
  }
}","public void setMemberships(final List<Membership> memberships){
  this.memberships.clear();
  if (memberships != null && !memberships.isEmpty()) {
    this.memberships.addAll(memberships);
  }
}"
60732,"@Override public <T extends AbstractVirAttr>boolean removeVirtualAttribute(T virtualAttribute){
  return virtualAttributes.remove((UVirAttr)virtualAttribute);
}","@Override public <T extends AbstractVirAttr>boolean removeVirtualAttribute(final T virtualAttribute){
  return virtualAttributes.remove((UVirAttr)virtualAttribute);
}"
60733,"@Override public <T extends AbstractAttr>boolean removeAttribute(T attribute){
  return attributes.remove((UAttr)attribute);
}","@Override public <T extends AbstractAttr>boolean removeAttribute(final T attribute){
  return attributes.remove((UAttr)attribute);
}"
60734,"public Date getLastLoginDate(){
  return lastLoginDate;
}","public Date getLastLoginDate(){
  return lastLoginDate == null ? null : new Date(lastLoginDate.getTime());
}"
60735,"private String encodePassword(final String password,final CipherAlgorithm cipherAlgoritm) throws NoSuchAlgorithmException, IllegalBlockSizeException, InvalidKeyException, BadPaddingException, NoSuchPaddingException, UnsupportedEncodingException {
  String encodedPassword=null;
  if (password != null) {
    if (cipherAlgoritm == null || cipherAlgoritm == CipherAlgorithm.AES) {
      final byte[] cleartext=password.getBytes(""String_Node_Str"");
      final Cipher cipher=Cipher.getInstance(CipherAlgorithm.AES.getAlgorithm());
      cipher.init(Cipher.ENCRYPT_MODE,keySpec);
      byte[] encoded=cipher.doFinal(cleartext);
      encodedPassword=new String(Base64.encode(encoded));
    }
 else {
      MessageDigest algorithm=MessageDigest.getInstance(cipherAlgoritm.getAlgorithm());
      algorithm.reset();
      algorithm.update(password.getBytes());
      byte[] messageDigest=algorithm.digest();
      StringBuilder hexString=new StringBuilder();
      for (int i=0; i < messageDigest.length; i++) {
        String hex=Integer.toHexString(0xff & messageDigest[i]);
        if (hex.length() == 1) {
          hexString.append('0');
        }
        hexString.append(hex);
      }
      encodedPassword=hexString.toString();
    }
  }
  return encodedPassword;
}","private String encodePassword(final String password,final CipherAlgorithm cipherAlgoritm) throws UnsupportedEncodingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
  String encodedPassword=null;
  if (password != null) {
    if (cipherAlgoritm == null || cipherAlgoritm == CipherAlgorithm.AES) {
      final byte[] cleartext=password.getBytes(""String_Node_Str"");
      final Cipher cipher=Cipher.getInstance(CipherAlgorithm.AES.getAlgorithm());
      cipher.init(Cipher.ENCRYPT_MODE,keySpec);
      byte[] encoded=cipher.doFinal(cleartext);
      encodedPassword=new String(Base64.encode(encoded));
    }
 else {
      MessageDigest algorithm=MessageDigest.getInstance(cipherAlgoritm.getAlgorithm());
      algorithm.reset();
      algorithm.update(password.getBytes());
      byte[] messageDigest=algorithm.digest();
      StringBuilder hexString=new StringBuilder();
      for (int i=0; i < messageDigest.length; i++) {
        String hex=Integer.toHexString(0xff & messageDigest[i]);
        if (hex.length() == 1) {
          hexString.append('0');
        }
        hexString.append(hex);
      }
      encodedPassword=hexString.toString();
    }
  }
  return encodedPassword;
}"
60736,"@Override public <T extends AbstractAttr>boolean addAttribute(T attribute){
  return attributes.add((UAttr)attribute);
}","@Override public <T extends AbstractAttr>boolean addAttribute(final T attribute){
  return attributes.add((UAttr)attribute);
}"
60737,"public Date getChangePwdDate(){
  return changePwdDate;
}","public Date getChangePwdDate(){
  return changePwdDate == null ? null : new Date(changePwdDate.getTime());
}"
60738,"public SyncopeUser(){
  super();
  memberships=new ArrayList<Membership>();
  attributes=new ArrayList<UAttr>();
  derivedAttributes=new ArrayList<UDerAttr>();
  virtualAttributes=new ArrayList<UVirAttr>();
  passwordHistory=new ArrayList<String>();
  failedLogins=0;
  suspended=0;
}","public SyncopeUser(){
  super();
  memberships=new ArrayList<Membership>();
  attributes=new ArrayList<UAttr>();
  derivedAttributes=new ArrayList<UDerAttr>();
  virtualAttributes=new ArrayList<UVirAttr>();
  passwordHistory=new ArrayList<String>();
  failedLogins=0;
  suspended=getBooleanAsInteger(Boolean.FALSE);
}"
60739,"@Override public <T extends AbstractDerAttr>boolean addDerivedAttribute(T derivedAttribute){
  return derivedAttributes.add((UDerAttr)derivedAttribute);
}","@Override public <T extends AbstractDerAttr>boolean addDerivedAttribute(final T derivedAttribute){
  return derivedAttributes.add((UDerAttr)derivedAttribute);
}"
60740,"private CipherAlgorithm getCipherAlgoritm(){
  CipherAlgorithm cipherAlgoritm;
  try {
    cipherAlgoritm=CipherAlgorithm.valueOf(confDAO.find(""String_Node_Str"").getValue());
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    cipherAlgoritm=CipherAlgorithm.AES;
  }
  return cipherAlgoritm;
}","private CipherAlgorithm getCipherAlgoritm(){
  return CipherAlgorithm.valueOf(confDAO.find(""String_Node_Str"",""String_Node_Str"").getValue());
}"
60741,"private void setupEditPanel(){
  if (userRequestTO != null) {
switch (userRequestTO.getType()) {
case CREATE:
      userTO=userRequestTO.getUserTO();
    break;
case UPDATE:
  initialUserTO=userRestClient.read(userRequestTO.getUserMod().getId());
userTO=AttributableOperations.apply(initialUserTO,userRequestTO.getUserMod());
break;
case DELETE:
default :
}
}
if (syncTaskTO != null) {
userTO=syncTaskTO.getUserTemplate();
}
if (initialUserTO == null && userTO.getId() > 0) {
initialUserTO=AttributableOperations.clone(userTO);
}
fragment.add(new Label(""String_Node_Str"",userTO.getId() == 0 ? ""String_Node_Str"" : userTO.getUsername()));
fragment.add(new Label(""String_Node_Str"",userTO.getId() == 0 ? getString(""String_Node_Str"") : ""String_Node_Str""));
final Form form=new Form(""String_Node_Str"");
form.setModel(new CompoundPropertyModel(userTO));
form.add(new UserDetailsPanel(""String_Node_Str"",userTO,form,userRequestTO == null,mode == Mode.TEMPLATE));
form.add(new AttributesPanel(""String_Node_Str"",userTO,form,mode == Mode.TEMPLATE));
form.add(new DerivedAttributesPanel(""String_Node_Str"",userTO));
form.add(new VirtualAttributesPanel(""String_Node_Str"",userTO,mode == Mode.TEMPLATE));
form.add(new ResourcesPanel(""String_Node_Str"",userTO));
form.add(new RolesPanel(""String_Node_Str"",userTO,mode == Mode.TEMPLATE));
final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
final UserTO updatedUserTO=(UserTO)form.getModelObject();
try {
if (updatedUserTO.getId() == 0) {
switch (mode) {
case SELF:
  requestRestClient.requestCreate(updatedUserTO);
break;
case ADMIN:
default :
userTO=userRestClient.create(updatedUserTO);
if (userRequestTO != null) {
requestRestClient.delete(userRequestTO.getId());
}
break;
case TEMPLATE:
syncTaskTO.setUserTemplate(updatedUserTO);
taskRestClient.updateSyncTask(syncTaskTO);
break;
}
}
 else {
UserMod userMod=AttributableOperations.diff(updatedUserTO,initialUserTO);
if (!userMod.isEmpty()) {
if (mode == Mode.SELF) {
requestRestClient.requestUpdate(userMod);
}
 else {
userTO=userRestClient.update(userMod);
if (userRequestTO != null) {
requestRestClient.delete(userRequestTO.getId());
}
}
}
}
if (callerPageRef.getPage() instanceof BasePage) {
((BasePage)callerPageRef.getPage()).setModalResult(true);
}
switch (mode) {
case ADMIN:
case SELF:
setResponsePage(new UserModalPage(callerPageRef,window,userTO,mode,form.isSubmitted()));
break;
case TEMPLATE:
default :
window.close(target);
}
}
 catch (SyncopeClientCompositeErrorException e) {
LOG.error(""String_Node_Str"",e);
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
target.add(feedbackPanel);
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.add(feedbackPanel);
}
}
;
if (mode == Mode.ADMIN) {
String allowedRoles=userTO.getId() == 0 ? xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"") : xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,allowedRoles);
}
fragment.add(form);
form.add(submit);
}","private void setupEditPanel(){
  if (userRequestTO != null) {
switch (userRequestTO.getType()) {
case CREATE:
      userTO=userRequestTO.getUserTO();
    break;
case UPDATE:
  initialUserTO=userRestClient.read(userRequestTO.getUserMod().getId());
userTO=AttributableOperations.apply(initialUserTO,userRequestTO.getUserMod());
break;
case DELETE:
default :
}
}
if (syncTaskTO != null) {
userTO=syncTaskTO.getUserTemplate();
if (userTO == null) {
userTO=new UserTO();
syncTaskTO.setUserTemplate(userTO);
}
}
if (initialUserTO == null && userTO.getId() > 0) {
initialUserTO=AttributableOperations.clone(userTO);
}
fragment.add(new Label(""String_Node_Str"",userTO.getId() == 0 ? ""String_Node_Str"" : userTO.getUsername()));
fragment.add(new Label(""String_Node_Str"",userTO.getId() == 0 ? getString(""String_Node_Str"") : ""String_Node_Str""));
final Form form=new Form(""String_Node_Str"");
form.setModel(new CompoundPropertyModel(userTO));
form.add(new UserDetailsPanel(""String_Node_Str"",userTO,form,userRequestTO == null,mode == Mode.TEMPLATE));
form.add(new AttributesPanel(""String_Node_Str"",userTO,form,mode == Mode.TEMPLATE));
form.add(new DerivedAttributesPanel(""String_Node_Str"",userTO));
form.add(new VirtualAttributesPanel(""String_Node_Str"",userTO,mode == Mode.TEMPLATE));
form.add(new ResourcesPanel(""String_Node_Str"",userTO));
form.add(new RolesPanel(""String_Node_Str"",userTO,mode == Mode.TEMPLATE));
final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
final UserTO updatedUserTO=(UserTO)form.getModelObject();
try {
if (updatedUserTO.getId() == 0) {
switch (mode) {
case SELF:
  requestRestClient.requestCreate(updatedUserTO);
break;
case ADMIN:
default :
userTO=userRestClient.create(updatedUserTO);
if (userRequestTO != null) {
requestRestClient.delete(userRequestTO.getId());
}
break;
case TEMPLATE:
syncTaskTO.setUserTemplate(updatedUserTO);
taskRestClient.updateSyncTask(syncTaskTO);
break;
}
}
 else {
UserMod userMod=AttributableOperations.diff(updatedUserTO,initialUserTO);
if (!userMod.isEmpty()) {
if (mode == Mode.SELF) {
requestRestClient.requestUpdate(userMod);
}
 else {
userTO=userRestClient.update(userMod);
if (userRequestTO != null) {
requestRestClient.delete(userRequestTO.getId());
}
}
}
}
if (callerPageRef.getPage() instanceof BasePage) {
((BasePage)callerPageRef.getPage()).setModalResult(true);
}
switch (mode) {
case ADMIN:
case SELF:
setResponsePage(new UserModalPage(callerPageRef,window,userTO,mode,form.isSubmitted()));
break;
case TEMPLATE:
default :
window.close(target);
}
}
 catch (SyncopeClientCompositeErrorException e) {
LOG.error(""String_Node_Str"",e);
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
target.add(feedbackPanel);
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.add(feedbackPanel);
}
}
;
if (mode == Mode.ADMIN) {
String allowedRoles=userTO.getId() == 0 ? xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"") : xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,allowedRoles);
}
fragment.add(form);
form.add(submit);
}"
60742,"public boolean removeMapping(SchemaMapping mapping){
  return mappings == null || mappings.remove(mapping);
}","public boolean removeMapping(SchemaMapping mapping){
  return mappings.remove(mapping);
}"
60743,"public void setMappings(List<SchemaMapping> mappings){
  this.mappings.clear();
  if (mappings != null) {
    this.mappings.addAll(mappings);
  }
}","public void setMappings(List<SchemaMapping> mappings){
  for (  SchemaMapping mapping : this.mappings) {
    mapping.setResource(null);
  }
  this.mappings.clear();
  if (mappings != null) {
    this.mappings.addAll(mappings);
  }
}"
60744,"@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public List<String> getSchemaNames(@RequestBody final ResourceTO resourceTO) throws NotFoundException {
  return getSchemaNames(resourceDataBinder.getResource(resourceTO),false);
}","@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public List<String> getSchemaNames(@RequestBody final ResourceTO resourceTO) throws NotFoundException {
  return getSchemaNames(resourceDataBinder.create(resourceTO),false);
}"
60745,"@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public List<String> getAllSchemaNames(@RequestBody final ResourceTO resourceTO) throws NotFoundException {
  return getSchemaNames(resourceDataBinder.getResource(resourceTO),true);
}","@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public List<String> getAllSchemaNames(@RequestBody final ResourceTO resourceTO) throws NotFoundException {
  return getSchemaNames(resourceDataBinder.create(resourceTO),true);
}"
60746,"@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public ResourceTO create(final HttpServletResponse response,final @RequestBody ResourceTO resourceTO) throws SyncopeClientCompositeErrorException, NotFoundException {
  LOG.debug(""String_Node_Str"",resourceTO);
  if (resourceTO == null) {
    LOG.error(""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"");
  }
  SyncopeClientCompositeErrorException scce=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  LOG.debug(""String_Node_Str"");
  if (resourceTO.getName() != null && resourceDAO.find(resourceTO.getName()) != null) {
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.DuplicateUniqueValue);
    ex.addElement(resourceTO.getName());
    scce.addException(ex);
    throw scce;
  }
  ExternalResource resource=binder.getResource(resourceTO);
  if (resource == null) {
    LOG.error(""String_Node_Str"");
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.Unknown);
    scce.addException(ex);
    throw scce;
  }
  resource=resourceDAO.save(resource);
  response.setStatus(HttpServletResponse.SC_CREATED);
  return binder.getResourceTO(resource);
}","@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public ResourceTO create(final HttpServletResponse response,final @RequestBody ResourceTO resourceTO) throws SyncopeClientCompositeErrorException, NotFoundException {
  LOG.debug(""String_Node_Str"",resourceTO);
  if (resourceTO == null) {
    LOG.error(""String_Node_Str"");
    throw new NotFoundException(""String_Node_Str"");
  }
  SyncopeClientCompositeErrorException scce=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  LOG.debug(""String_Node_Str"");
  if (resourceTO.getName() != null && resourceDAO.find(resourceTO.getName()) != null) {
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.DuplicateUniqueValue);
    ex.addElement(resourceTO.getName());
    scce.addException(ex);
    throw scce;
  }
  ExternalResource resource=binder.create(resourceTO);
  if (resource == null) {
    LOG.error(""String_Node_Str"");
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.Unknown);
    scce.addException(ex);
    throw scce;
  }
  resource=resourceDAO.save(resource);
  response.setStatus(HttpServletResponse.SC_CREATED);
  return binder.getResourceTO(resource);
}"
60747,"@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public ResourceTO update(final HttpServletResponse response,final @RequestBody ResourceTO resourceTO) throws SyncopeClientCompositeErrorException, NotFoundException {
  LOG.debug(""String_Node_Str"",resourceTO);
  ExternalResource resource=null;
  if (resourceTO != null && resourceTO.getName() != null) {
    resource=resourceDAO.find(resourceTO.getName());
  }
  if (resource == null) {
    LOG.error(""String_Node_Str"",resourceTO.getName());
    throw new NotFoundException(""String_Node_Str"" + resourceTO.getName() + ""String_Node_Str"");
  }
  SyncopeClientCompositeErrorException scce=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  LOG.debug(""String_Node_Str"");
  resource.getMappings().clear();
  resource=binder.getResource(resource,resourceTO);
  if (resource == null) {
    LOG.error(""String_Node_Str"");
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.Unknown);
    scce.addException(ex);
    throw scce;
  }
  resource=resourceDAO.save(resource);
  return binder.getResourceTO(resource);
}","@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public ResourceTO update(final HttpServletResponse response,final @RequestBody ResourceTO resourceTO) throws SyncopeClientCompositeErrorException, NotFoundException {
  LOG.debug(""String_Node_Str"",resourceTO);
  ExternalResource resource=null;
  if (resourceTO != null && resourceTO.getName() != null) {
    resource=resourceDAO.find(resourceTO.getName());
  }
  if (resource == null) {
    LOG.error(""String_Node_Str"",resourceTO.getName());
    throw new NotFoundException(""String_Node_Str"" + resourceTO.getName() + ""String_Node_Str"");
  }
  resource=binder.update(resource,resourceTO);
  if (resource == null) {
    LOG.error(""String_Node_Str"");
    SyncopeClientCompositeErrorException scce=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
    SyncopeClientException ex=new SyncopeClientException(SyncopeClientExceptionType.Unknown);
    scce.addException(ex);
    throw scce;
  }
  resource=resourceDAO.save(resource);
  return binder.getResourceTO(resource);
}"
60748,"private void pageSetup(){
  ((SyncopeApplication)getApplication()).setupNavigationPane(this,xmlRolesReader,true,version);
  feedbackPanel=new FeedbackPanel(""String_Node_Str"");
  feedbackPanel.setOutputMarkupId(true);
  add(feedbackPanel);
  final String kind=getClass().getSimpleName().toLowerCase();
  final BookmarkablePageLink kindLink=(BookmarkablePageLink)get(kind);
  kindLink.add(new Behavior(){
    private static final long serialVersionUID=1469628524240283489L;
    @Override public void onComponentTag(    final Component component,    final ComponentTag tag){
      tag.put(""String_Node_Str"",kind);
    }
  }
);
  Component kindIcon=kindLink.get(0);
  if (kindIcon != null) {
    kindIcon.add(new Behavior(){
      private static final long serialVersionUID=1469628524240283489L;
      @Override public void onComponentTag(      final Component component,      final ComponentTag tag){
        tag.put(""String_Node_Str"",""String_Node_Str"" + SyncopeApplication.IMG_PREFIX + kind+ SyncopeApplication.IMG_SUFFIX);
      }
    }
);
  }
  final ModalWindow editProfileModalWin=new ModalWindow(""String_Node_Str"");
  editProfileModalWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editProfileModalWin.setInitialHeight(EDIT_PROFILE_WIN_HEIGHT);
  editProfileModalWin.setInitialWidth(EDIT_PROFILE_WIN_WIDTH);
  editProfileModalWin.setCookieName(""String_Node_Str"");
  add(editProfileModalWin);
  add(new Label(""String_Node_Str"",SyncopeSession.get().getUserId()));
  Fragment editProfileFrag;
  if (""String_Node_Str"".equals(SyncopeSession.get().getUserId())) {
    editProfileFrag=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
  }
 else {
    final UserTO userTO=SyncopeSession.get().isAuthenticated() ? profileRestClient.readProfile() : new UserTO();
    editProfileFrag=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
    AjaxLink editProfileLink=new IndicatingAjaxLink(""String_Node_Str""){
      private static final long serialVersionUID=-7978723352517770644L;
      @Override public void onClick(      final AjaxRequestTarget target){
        editProfileModalWin.setPageCreator(new ModalWindow.PageCreator(){
          @Override public Page createPage(){
            return new UserModalPage(BasePage.this.getPageReference(),editProfileModalWin,userTO,UserModalPage.Mode.SELF);
          }
        }
);
        editProfileModalWin.show(target);
      }
    }
;
    editProfileLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
    Panel panel=new LinkPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str""));
    panel.add(editProfileLink);
    editProfileFrag.add(panel);
  }
  add(editProfileFrag);
}","private void pageSetup(){
  ((SyncopeApplication)getApplication()).setupNavigationPane(this,xmlRolesReader,true,version);
  feedbackPanel=new FeedbackPanel(""String_Node_Str"");
  feedbackPanel.setOutputMarkupId(true);
  add(feedbackPanel);
  final String kind=getClass().getSimpleName().toLowerCase();
  final BookmarkablePageLink kindLink=(BookmarkablePageLink)get(kind);
  if (kindLink != null) {
    kindLink.add(new Behavior(){
      private static final long serialVersionUID=1469628524240283489L;
      @Override public void onComponentTag(      final Component component,      final ComponentTag tag){
        tag.put(""String_Node_Str"",kind);
      }
    }
);
    Component kindIcon=kindLink.get(0);
    if (kindIcon != null) {
      kindIcon.add(new Behavior(){
        private static final long serialVersionUID=1469628524240283489L;
        @Override public void onComponentTag(        final Component component,        final ComponentTag tag){
          tag.put(""String_Node_Str"",""String_Node_Str"" + SyncopeApplication.IMG_PREFIX + kind+ SyncopeApplication.IMG_SUFFIX);
        }
      }
);
    }
  }
  final ModalWindow editProfileModalWin=new ModalWindow(""String_Node_Str"");
  editProfileModalWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editProfileModalWin.setInitialHeight(EDIT_PROFILE_WIN_HEIGHT);
  editProfileModalWin.setInitialWidth(EDIT_PROFILE_WIN_WIDTH);
  editProfileModalWin.setCookieName(""String_Node_Str"");
  add(editProfileModalWin);
  add(new Label(""String_Node_Str"",SyncopeSession.get().getUserId()));
  Fragment editProfileFrag;
  if (""String_Node_Str"".equals(SyncopeSession.get().getUserId())) {
    editProfileFrag=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
  }
 else {
    final UserTO userTO=SyncopeSession.get().isAuthenticated() ? profileRestClient.readProfile() : new UserTO();
    editProfileFrag=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
    AjaxLink editProfileLink=new IndicatingAjaxLink(""String_Node_Str""){
      private static final long serialVersionUID=-7978723352517770644L;
      @Override public void onClick(      final AjaxRequestTarget target){
        editProfileModalWin.setPageCreator(new ModalWindow.PageCreator(){
          @Override public Page createPage(){
            return new UserModalPage(BasePage.this.getPageReference(),editProfileModalWin,userTO,UserModalPage.Mode.SELF);
          }
        }
);
        editProfileModalWin.show(target);
      }
    }
;
    editProfileLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
    Panel panel=new LinkPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str""));
    panel.add(editProfileLink);
    editProfileFrag.add(panel);
  }
  add(editProfileFrag);
}"
60749,"private static void populate(final Map<String,AttributeTO> updatedAttrs,final Map<String,AttributeTO> originalAttrs,final AbstractAttributableMod result){
  for (  Map.Entry<String,AttributeTO> entry : updatedAttrs.entrySet()) {
    AttributeMod attrMod=new AttributeMod();
    attrMod.setSchema(entry.getKey());
    Set<String> updatedValues=new HashSet<String>(entry.getValue().getValues());
    Set<String> originalValues=originalAttrs.containsKey(entry.getKey()) ? new HashSet<String>(originalAttrs.get(entry.getKey()).getValues()) : Collections.EMPTY_SET;
    updatedValues.removeAll(originalValues);
    updatedValues.remove(""String_Node_Str"");
    if (!entry.getValue().isReadonly()) {
      attrMod.setValuesToBeAdded(new ArrayList<String>(updatedValues));
    }
    originalValues.removeAll(entry.getValue().getValues());
    attrMod.setValuesToBeRemoved(new ArrayList<String>(originalValues));
    if (!attrMod.isEmpty()) {
      result.addAttributeToBeUpdated(attrMod);
    }
  }
}","private static void populate(final Map<String,AttributeTO> updatedAttrs,final Map<String,AttributeTO> originalAttrs,final AbstractAttributableMod result){
  for (  Map.Entry<String,AttributeTO> entry : updatedAttrs.entrySet()) {
    AttributeMod attrMod=new AttributeMod();
    attrMod.setSchema(entry.getKey());
    Set<String> updatedValues=new HashSet<String>(entry.getValue().getValues());
    Set<String> originalValues=originalAttrs.containsKey(entry.getKey()) ? new HashSet<String>(originalAttrs.get(entry.getKey()).getValues()) : Collections.EMPTY_SET;
    updatedValues.removeAll(originalValues);
    updatedValues.remove(""String_Node_Str"");
    if (!entry.getValue().isReadonly()) {
      attrMod.setValuesToBeAdded(new ArrayList<String>(updatedValues));
      if (!attrMod.isEmpty()) {
        result.addAttributeToBeRemoved(attrMod.getSchema());
      }
    }
    originalValues.removeAll(entry.getValue().getValues());
    attrMod.setValuesToBeRemoved(new ArrayList<String>(originalValues));
    if (!attrMod.isEmpty()) {
      result.addAttributeToBeUpdated(attrMod);
    }
  }
}"
60750,"private <T extends AbstractVirSchema>T getVirtualSchema(final String virSchemaName,final Class<T> reference){
  T virtualSchema=virtualSchemaDAO.find(virSchemaName,reference);
  if (virtualSchema == null) {
    LOG.debug(""String_Node_Str"",virSchemaName);
  }
  return virtualSchema;
}","private <T extends AbstractVirSchema>T getVirtualSchema(final String virSchemaName,final Class<T> reference){
  T virtualSchema=null;
  if (StringUtils.isNotBlank(virSchemaName)) {
    virtualSchema=virtualSchemaDAO.find(virSchemaName,reference);
    if (virtualSchema == null) {
      LOG.debug(""String_Node_Str"",virSchemaName);
    }
  }
  return virtualSchema;
}"
60751,"private <T extends AbstractDerSchema>T getDerivedSchema(final String derSchemaName,final Class<T> reference){
  T derivedSchema=derivedSchemaDAO.find(derSchemaName,reference);
  if (derivedSchema == null) {
    LOG.debug(""String_Node_Str"",derSchemaName);
  }
  return derivedSchema;
}","private <T extends AbstractDerSchema>T getDerivedSchema(final String derSchemaName,final Class<T> reference){
  T derivedSchema=null;
  if (StringUtils.isNotBlank(derSchemaName)) {
    derivedSchema=derivedSchemaDAO.find(derSchemaName,reference);
    if (derivedSchema == null) {
      LOG.debug(""String_Node_Str"",derSchemaName);
    }
  }
  return derivedSchema;
}"
60752,"private <T extends AbstractSchema>T getSchema(final String schemaName,final Class<T> reference){
  T schema=schemaDAO.find(schemaName,reference);
  if (schema == null) {
    LOG.debug(""String_Node_Str"",schemaName);
  }
 else   if (schema.isReadonly()) {
    schema=null;
    LOG.debug(""String_Node_Str"",schemaName);
  }
  return schema;
}","private <T extends AbstractSchema>T getSchema(final String schemaName,final Class<T> reference){
  T schema=null;
  if (StringUtils.isNotBlank(schemaName)) {
    schema=schemaDAO.find(schemaName,reference);
    if (schema == null) {
      LOG.debug(""String_Node_Str"",schemaName);
    }
 else     if (schema.isReadonly()) {
      schema=null;
      LOG.debug(""String_Node_Str"",schemaName);
    }
  }
  return schema;
}"
60753,"private void setupModalPage(){
  if (userRequestTO != null) {
switch (userRequestTO.getType()) {
case CREATE:
      userTO=userRequestTO.getUserTO();
    break;
case UPDATE:
  initialUserTO=userRestClient.read(userRequestTO.getUserMod().getId());
userTO=AttributableOperations.apply(initialUserTO,userRequestTO.getUserMod());
break;
case DELETE:
default :
}
}
if (syncTaskTO != null) {
userTO=syncTaskTO.getUserTemplate();
}
if (initialUserTO == null && userTO.getId() > 0) {
initialUserTO=AttributableOperations.clone(userTO);
}
add(new Label(""String_Node_Str"",userTO.getId() == 0 ? ""String_Node_Str"" : userTO.getUsername()));
add(new Label(""String_Node_Str"",userTO.getId() == 0 ? getString(""String_Node_Str"") : ""String_Node_Str""));
final Form form=new Form(""String_Node_Str"");
form.setModel(new CompoundPropertyModel(userTO));
form.add(new UserDetailsPanel(""String_Node_Str"",userTO,form,userRequestTO == null,mode == Mode.TEMPLATE));
form.add(new AttributesPanel(""String_Node_Str"",userTO,form,mode == Mode.TEMPLATE));
form.add(new DerivedAttributesPanel(""String_Node_Str"",userTO));
form.add(new VirtualAttributesPanel(""String_Node_Str"",userTO,mode == Mode.TEMPLATE));
form.add(new ResourcesPanel(""String_Node_Str"",userTO));
form.add(new RolesPanel(""String_Node_Str"",userTO,mode == Mode.TEMPLATE));
final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
final UserTO updatedUserTO=(UserTO)form.getModelObject();
try {
if (updatedUserTO.getId() == 0) {
switch (mode) {
case SELF:
  requestRestClient.requestCreate(updatedUserTO);
break;
case ADMIN:
default :
userRestClient.create(updatedUserTO);
if (userRequestTO != null) {
requestRestClient.delete(userRequestTO.getId());
}
break;
case TEMPLATE:
syncTaskTO.setUserTemplate(updatedUserTO);
taskRestClient.updateSyncTask(syncTaskTO);
break;
}
}
 else {
UserMod userMod=AttributableOperations.diff(updatedUserTO,initialUserTO);
if (!userMod.isEmpty()) {
if (mode == Mode.SELF) {
requestRestClient.requestUpdate(userMod);
}
 else {
userRestClient.update(userMod);
if (userRequestTO != null) {
requestRestClient.delete(userRequestTO.getId());
}
}
}
}
if (callerPageRef.getPage() instanceof BasePage) {
((BasePage)callerPageRef.getPage()).setModalResult(true);
}
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
LOG.error(""String_Node_Str"",e);
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
target.add(feedbackPanel);
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.add(feedbackPanel);
}
}
;
if (mode == Mode.ADMIN) {
String allowedRoles=userTO.getId() == 0 ? xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"") : xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,allowedRoles);
}
form.add(submit);
add(form);
}","private void setupModalPage(){
  fragment=new Fragment(""String_Node_Str"",!submitted ? ""String_Node_Str"" : ""String_Node_Str"",this);
  fragment.setOutputMarkupId(true);
  if (!submitted) {
    if (userRequestTO != null) {
switch (userRequestTO.getType()) {
case CREATE:
        userTO=userRequestTO.getUserTO();
      break;
case UPDATE:
    initialUserTO=userRestClient.read(userRequestTO.getUserMod().getId());
  userTO=AttributableOperations.apply(initialUserTO,userRequestTO.getUserMod());
break;
case DELETE:
default :
}
}
if (syncTaskTO != null) {
userTO=syncTaskTO.getUserTemplate();
}
if (initialUserTO == null && userTO.getId() > 0) {
initialUserTO=AttributableOperations.clone(userTO);
}
fragment.add(new Label(""String_Node_Str"",userTO.getId() == 0 ? ""String_Node_Str"" : userTO.getUsername()));
fragment.add(new Label(""String_Node_Str"",userTO.getId() == 0 ? getString(""String_Node_Str"") : ""String_Node_Str""));
final Form form=new Form(""String_Node_Str"");
form.setModel(new CompoundPropertyModel(userTO));
form.add(new UserDetailsPanel(""String_Node_Str"",userTO,form,userRequestTO == null,mode == Mode.TEMPLATE));
form.add(new AttributesPanel(""String_Node_Str"",userTO,form,mode == Mode.TEMPLATE));
form.add(new DerivedAttributesPanel(""String_Node_Str"",userTO));
form.add(new VirtualAttributesPanel(""String_Node_Str"",userTO,mode == Mode.TEMPLATE));
form.add(new ResourcesPanel(""String_Node_Str"",userTO));
form.add(new RolesPanel(""String_Node_Str"",userTO,mode == Mode.TEMPLATE));
final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
final UserTO updatedUserTO=(UserTO)form.getModelObject();
try {
if (updatedUserTO.getId() == 0) {
switch (mode) {
case SELF:
    requestRestClient.requestCreate(updatedUserTO);
  break;
case ADMIN:
default :
summaryUserTO=userRestClient.create(updatedUserTO);
if (userRequestTO != null) {
requestRestClient.delete(userRequestTO.getId());
}
break;
case TEMPLATE:
syncTaskTO.setUserTemplate(updatedUserTO);
taskRestClient.updateSyncTask(syncTaskTO);
break;
}
}
 else {
UserMod userMod=AttributableOperations.diff(updatedUserTO,initialUserTO);
if (!userMod.isEmpty()) {
if (mode == Mode.SELF) {
requestRestClient.requestUpdate(userMod);
}
 else {
summaryUserTO=userRestClient.update(userMod);
if (userRequestTO != null) {
requestRestClient.delete(userRequestTO.getId());
}
}
}
}
if (callerPageRef.getPage() instanceof BasePage) {
((BasePage)callerPageRef.getPage()).setModalResult(true);
}
setResponsePage(new UserModalPage(callerPageRef,window,summaryUserTO,form.isSubmitted()));
}
 catch (SyncopeClientCompositeErrorException e) {
LOG.error(""String_Node_Str"",e);
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
target.add(feedbackPanel);
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.add(feedbackPanel);
}
}
;
if (mode == Mode.ADMIN) {
String allowedRoles=userTO.getId() == 0 ? xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"") : xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,allowedRoles);
}
fragment.add(form);
form.add(submit);
}
 else {
final UserSummaryPanel userSummaryPanel=new UserSummaryPanel(""String_Node_Str"",window,summaryUserTO);
userSummaryPanel.setOutputMarkupId(true);
fragment.add(userSummaryPanel);
}
add(fragment);
}"
60754,"public UserModalPage(final PageReference callerPageRef,final ModalWindow window,final UserTO userTO,final Mode mode){
  super();
  this.callerPageRef=callerPageRef;
  this.window=window;
  this.userTO=userTO;
  this.mode=mode == null ? Mode.ADMIN : mode;
  setupModalPage();
}","public UserModalPage(final PageReference callerPageRef,final ModalWindow window,final UserTO summaryUserTO,final boolean submitted){
  super();
  this.callerPageRef=callerPageRef;
  this.window=window;
  this.summaryUserTO=summaryUserTO;
  this.submitted=submitted;
  setupModalPage();
}"
60755,"@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  final UserTO updatedUserTO=(UserTO)form.getModelObject();
  try {
    if (updatedUserTO.getId() == 0) {
switch (mode) {
case SELF:
        requestRestClient.requestCreate(updatedUserTO);
      break;
case ADMIN:
default :
    userRestClient.create(updatedUserTO);
  if (userRequestTO != null) {
    requestRestClient.delete(userRequestTO.getId());
  }
break;
case TEMPLATE:
syncTaskTO.setUserTemplate(updatedUserTO);
taskRestClient.updateSyncTask(syncTaskTO);
break;
}
}
 else {
UserMod userMod=AttributableOperations.diff(updatedUserTO,initialUserTO);
if (!userMod.isEmpty()) {
if (mode == Mode.SELF) {
requestRestClient.requestUpdate(userMod);
}
 else {
userRestClient.update(userMod);
if (userRequestTO != null) {
requestRestClient.delete(userRequestTO.getId());
}
}
}
}
if (callerPageRef.getPage() instanceof BasePage) {
((BasePage)callerPageRef.getPage()).setModalResult(true);
}
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
LOG.error(""String_Node_Str"",e);
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
target.add(feedbackPanel);
}
}","@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  final UserTO updatedUserTO=(UserTO)form.getModelObject();
  try {
    if (updatedUserTO.getId() == 0) {
switch (mode) {
case SELF:
        requestRestClient.requestCreate(updatedUserTO);
      break;
case ADMIN:
default :
    summaryUserTO=userRestClient.create(updatedUserTO);
  if (userRequestTO != null) {
    requestRestClient.delete(userRequestTO.getId());
  }
break;
case TEMPLATE:
syncTaskTO.setUserTemplate(updatedUserTO);
taskRestClient.updateSyncTask(syncTaskTO);
break;
}
}
 else {
UserMod userMod=AttributableOperations.diff(updatedUserTO,initialUserTO);
if (!userMod.isEmpty()) {
if (mode == Mode.SELF) {
requestRestClient.requestUpdate(userMod);
}
 else {
summaryUserTO=userRestClient.update(userMod);
if (userRequestTO != null) {
requestRestClient.delete(userRequestTO.getId());
}
}
}
}
if (callerPageRef.getPage() instanceof BasePage) {
((BasePage)callerPageRef.getPage()).setModalResult(true);
}
setResponsePage(new UserModalPage(callerPageRef,window,summaryUserTO,form.isSubmitted()));
}
 catch (SyncopeClientCompositeErrorException e) {
LOG.error(""String_Node_Str"",e);
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
target.add(feedbackPanel);
}
}"
60756,"public MissingConfKeyException(final String confKey){
  this.confKey=confKey;
}","public MissingConfKeyException(final String confKey){
  super();
  this.confKey=confKey;
}"
60757,"public AccountPolicyException(String msg){
  super(msg);
}","public AccountPolicyException(final String message){
  super(message);
}"
60758,"public PasswordPolicyException(String msg){
  super(msg);
}","public PasswordPolicyException(final String message){
  super(message);
}"
60759,"public PolicyEnforceException(String string){
}","public PolicyEnforceException(final String message){
  super(message);
}"
60760,"public void setupNavigationPane(final WebPage page,final XMLRolesReader xmlRolesReader,final String version){
  page.add(new Label(""String_Node_Str"",""String_Node_Str"" + version + ""String_Node_Str""+ SyncopeSession.get().getCoreVersion()));
  BookmarkablePageLink schemaLink=new BookmarkablePageLink(""String_Node_Str"",Schema.class);
  MetaDataRoleAuthorizationStrategy.authorizeAll(schemaLink,WebPage.ENABLE);
  page.add(schemaLink);
  BookmarkablePageLink usersLink=new BookmarkablePageLink(""String_Node_Str"",Users.class);
  String allowedUsersRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(usersLink,WebPage.ENABLE,allowedUsersRoles);
  page.add(usersLink);
  BookmarkablePageLink rolesLink=new BookmarkablePageLink(""String_Node_Str"",Roles.class);
  MetaDataRoleAuthorizationStrategy.authorizeAll(rolesLink,WebPage.ENABLE);
  page.add(rolesLink);
  BookmarkablePageLink resourcesLink=new BookmarkablePageLink(""String_Node_Str"",Resources.class);
  MetaDataRoleAuthorizationStrategy.authorizeAll(resourcesLink,WebPage.ENABLE);
  page.add(resourcesLink);
  BookmarkablePageLink todoLink=new BookmarkablePageLink(""String_Node_Str"",Todo.class);
  MetaDataRoleAuthorizationStrategy.authorize(todoLink,WebPage.ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  page.add(todoLink);
  BookmarkablePageLink reportLink=new BookmarkablePageLink(""String_Node_Str"",Report.class);
  String allowedReportRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(reportLink,WebPage.ENABLE,allowedReportRoles);
  page.add(reportLink);
  BookmarkablePageLink configurationLink=new BookmarkablePageLink(""String_Node_Str"",Configuration.class);
  String allowedConfigurationRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(configurationLink,WebPage.ENABLE,allowedConfigurationRoles);
  page.add(configurationLink);
  BookmarkablePageLink taskLink=new BookmarkablePageLink(""String_Node_Str"",Tasks.class);
  String allowedTasksRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(taskLink,WebPage.ENABLE,allowedTasksRoles);
  page.add(taskLink);
  page.add(new BookmarkablePageLink(""String_Node_Str"",Logout.class));
}","public void setupNavigationPane(final WebPage page,final XMLRolesReader xmlRolesReader,final boolean notsel,final String version){
  page.add(new Label(""String_Node_Str"",""String_Node_Str"" + version + ""String_Node_Str""+ SyncopeSession.get().getCoreVersion()));
  BookmarkablePageLink schemaLink=new BookmarkablePageLink(""String_Node_Str"",Schema.class);
  MetaDataRoleAuthorizationStrategy.authorizeAll(schemaLink,WebPage.ENABLE);
  page.add(schemaLink);
  schemaLink.add(new Image(""String_Node_Str"",new ContextRelativeResource(IMG_PREFIX + (notsel ? IMG_NOTSEL : ""String_Node_Str"") + ""String_Node_Str""+ IMG_SUFFIX)));
  BookmarkablePageLink usersLink=new BookmarkablePageLink(""String_Node_Str"",Users.class);
  String allowedUsersRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(usersLink,WebPage.ENABLE,allowedUsersRoles);
  page.add(usersLink);
  usersLink.add(new Image(""String_Node_Str"",new ContextRelativeResource(IMG_PREFIX + (notsel ? IMG_NOTSEL : ""String_Node_Str"") + ""String_Node_Str""+ IMG_SUFFIX)));
  BookmarkablePageLink rolesLink=new BookmarkablePageLink(""String_Node_Str"",Roles.class);
  MetaDataRoleAuthorizationStrategy.authorizeAll(rolesLink,WebPage.ENABLE);
  page.add(rolesLink);
  rolesLink.add(new Image(""String_Node_Str"",new ContextRelativeResource(IMG_PREFIX + (notsel ? IMG_NOTSEL : ""String_Node_Str"") + ""String_Node_Str""+ IMG_SUFFIX)));
  BookmarkablePageLink resourcesLink=new BookmarkablePageLink(""String_Node_Str"",Resources.class);
  MetaDataRoleAuthorizationStrategy.authorizeAll(resourcesLink,WebPage.ENABLE);
  page.add(resourcesLink);
  resourcesLink.add(new Image(""String_Node_Str"",new ContextRelativeResource(IMG_PREFIX + (notsel ? IMG_NOTSEL : ""String_Node_Str"") + ""String_Node_Str""+ IMG_SUFFIX)));
  BookmarkablePageLink todoLink=new BookmarkablePageLink(""String_Node_Str"",Todo.class);
  MetaDataRoleAuthorizationStrategy.authorize(todoLink,WebPage.ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  page.add(todoLink);
  todoLink.add(new Image(""String_Node_Str"",new ContextRelativeResource(IMG_PREFIX + (notsel ? IMG_NOTSEL : ""String_Node_Str"") + ""String_Node_Str""+ IMG_SUFFIX)));
  BookmarkablePageLink reportLink=new BookmarkablePageLink(""String_Node_Str"",Reports.class);
  String allowedReportRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(reportLink,WebPage.ENABLE,allowedReportRoles);
  page.add(reportLink);
  reportLink.add(new Image(""String_Node_Str"",new ContextRelativeResource(IMG_PREFIX + (notsel ? IMG_NOTSEL : ""String_Node_Str"") + ""String_Node_Str""+ IMG_SUFFIX)));
  BookmarkablePageLink configurationLink=new BookmarkablePageLink(""String_Node_Str"",Configuration.class);
  String allowedConfigurationRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(configurationLink,WebPage.ENABLE,allowedConfigurationRoles);
  page.add(configurationLink);
  configurationLink.add(new Image(""String_Node_Str"",new ContextRelativeResource(IMG_PREFIX + (notsel ? IMG_NOTSEL : ""String_Node_Str"") + ""String_Node_Str""+ IMG_SUFFIX)));
  BookmarkablePageLink taskLink=new BookmarkablePageLink(""String_Node_Str"",Tasks.class);
  String allowedTasksRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(taskLink,WebPage.ENABLE,allowedTasksRoles);
  page.add(taskLink);
  taskLink.add(new Image(""String_Node_Str"",new ContextRelativeResource(IMG_PREFIX + (notsel ? IMG_NOTSEL : ""String_Node_Str"") + ""String_Node_Str""+ IMG_SUFFIX)));
  page.add(new BookmarkablePageLink(""String_Node_Str"",Logout.class));
}"
60761,"private void pageSetup(){
  ((SyncopeApplication)getApplication()).setupNavigationPane(this,xmlRolesReader,version);
  feedbackPanel=new FeedbackPanel(""String_Node_Str"");
  feedbackPanel.setOutputMarkupId(true);
  add(feedbackPanel);
  final String kind=getClass().getSimpleName().toLowerCase();
  final Component kindIcon=get(kind);
  if (kindIcon != null) {
    kindIcon.add(new Behavior(){
      private static final long serialVersionUID=1469628524240283489L;
      @Override public void onComponentTag(      final Component component,      final ComponentTag tag){
        tag.put(""String_Node_Str"",kind);
      }
    }
);
    add(kindIcon);
  }
  final ModalWindow editProfileModalWin=new ModalWindow(""String_Node_Str"");
  editProfileModalWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editProfileModalWin.setInitialHeight(EDIT_PROFILE_WIN_HEIGHT);
  editProfileModalWin.setInitialWidth(EDIT_PROFILE_WIN_WIDTH);
  editProfileModalWin.setCookieName(""String_Node_Str"");
  add(editProfileModalWin);
  add(new Label(""String_Node_Str"",SyncopeSession.get().getUserId()));
  Fragment editProfileFrag;
  if (""String_Node_Str"".equals(SyncopeSession.get().getUserId())) {
    editProfileFrag=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
  }
 else {
    final UserTO userTO=SyncopeSession.get().isAuthenticated() ? profileRestClient.readProfile() : new UserTO();
    editProfileFrag=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
    AjaxLink editProfileLink=new IndicatingAjaxLink(""String_Node_Str""){
      private static final long serialVersionUID=-7978723352517770644L;
      @Override public void onClick(      final AjaxRequestTarget target){
        editProfileModalWin.setPageCreator(new ModalWindow.PageCreator(){
          @Override public Page createPage(){
            return new UserModalPage(BasePage.this.getPageReference(),editProfileModalWin,userTO,UserModalPage.Mode.SELF);
          }
        }
);
        editProfileModalWin.show(target);
      }
    }
;
    editProfileLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
    Panel panel=new LinkPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str""));
    panel.add(editProfileLink);
    editProfileFrag.add(panel);
  }
  add(editProfileFrag);
}","private void pageSetup(){
  ((SyncopeApplication)getApplication()).setupNavigationPane(this,xmlRolesReader,true,version);
  feedbackPanel=new FeedbackPanel(""String_Node_Str"");
  feedbackPanel.setOutputMarkupId(true);
  add(feedbackPanel);
  final String kind=getClass().getSimpleName().toLowerCase();
  final BookmarkablePageLink kindLink=(BookmarkablePageLink)get(kind);
  kindLink.add(new Behavior(){
    private static final long serialVersionUID=1469628524240283489L;
    @Override public void onComponentTag(    final Component component,    final ComponentTag tag){
      tag.put(""String_Node_Str"",kind);
    }
  }
);
  Component kindIcon=kindLink.get(0);
  if (kindIcon != null) {
    kindIcon.add(new Behavior(){
      private static final long serialVersionUID=1469628524240283489L;
      @Override public void onComponentTag(      final Component component,      final ComponentTag tag){
        tag.put(""String_Node_Str"",""String_Node_Str"" + SyncopeApplication.IMG_PREFIX + kind+ SyncopeApplication.IMG_SUFFIX);
      }
    }
);
  }
  final ModalWindow editProfileModalWin=new ModalWindow(""String_Node_Str"");
  editProfileModalWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editProfileModalWin.setInitialHeight(EDIT_PROFILE_WIN_HEIGHT);
  editProfileModalWin.setInitialWidth(EDIT_PROFILE_WIN_WIDTH);
  editProfileModalWin.setCookieName(""String_Node_Str"");
  add(editProfileModalWin);
  add(new Label(""String_Node_Str"",SyncopeSession.get().getUserId()));
  Fragment editProfileFrag;
  if (""String_Node_Str"".equals(SyncopeSession.get().getUserId())) {
    editProfileFrag=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
  }
 else {
    final UserTO userTO=SyncopeSession.get().isAuthenticated() ? profileRestClient.readProfile() : new UserTO();
    editProfileFrag=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
    AjaxLink editProfileLink=new IndicatingAjaxLink(""String_Node_Str""){
      private static final long serialVersionUID=-7978723352517770644L;
      @Override public void onClick(      final AjaxRequestTarget target){
        editProfileModalWin.setPageCreator(new ModalWindow.PageCreator(){
          @Override public Page createPage(){
            return new UserModalPage(BasePage.this.getPageReference(),editProfileModalWin,userTO,UserModalPage.Mode.SELF);
          }
        }
);
        editProfileModalWin.show(target);
      }
    }
;
    editProfileLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
    Panel panel=new LinkPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str""));
    panel.add(editProfileLink);
    editProfileFrag.add(panel);
  }
  add(editProfileFrag);
}"
60762,"@Override public void onComponentTag(final Component component,final ComponentTag tag){
  tag.put(""String_Node_Str"",kind);
}","@Override public void onComponentTag(final Component component,final ComponentTag tag){
  tag.put(""String_Node_Str"",""String_Node_Str"" + SyncopeApplication.IMG_PREFIX + kind+ SyncopeApplication.IMG_SUFFIX);
}"
60763,"public WelcomePage(final PageParameters parameters){
  super(parameters);
  ((SyncopeApplication)getApplication()).setupNavigationPane(this,xmlRolesReader,version);
}","public WelcomePage(final PageParameters parameters){
  super(parameters);
  ((SyncopeApplication)getApplication()).setupNavigationPane(this,xmlRolesReader,false,version);
}"
60764,"@Override protected void onError(AjaxRequestTarget target,Form form){
  target.add(feedbackPanel);
}","@Override protected void onError(final AjaxRequestTarget target,final Form form){
  target.add(feedbackPanel);
}"
60765,"@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  SchedTaskTO taskTO=(SchedTaskTO)form.getModelObject();
  if (!StringUtils.hasText(taskTO.getCronExpression()) || ""String_Node_Str"".equals(taskTO.getCronExpression())) {
    taskTO.setCronExpression(null);
  }
 else {
    taskTO.setCronExpression(getCron(seconds,minutes,hours,daysOfMonth,months,daysOfWeek));
  }
  try {
    if (taskTO.getId() > 0) {
      if (taskTO instanceof SyncTaskTO) {
        taskTO=taskRestClient.updateSyncTask((SyncTaskTO)taskTO);
      }
 else {
        taskTO=taskRestClient.updateSchedTask(taskTO);
      }
    }
 else {
      if (taskTO instanceof SyncTaskTO) {
        taskTO=taskRestClient.createSyncTask((SyncTaskTO)taskTO);
      }
 else {
        taskTO=taskRestClient.createSchedTask(taskTO);
      }
    }
    window.close(target);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
  }
}","@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  SchedTaskTO taskTO=(SchedTaskTO)form.getModelObject();
  if (!StringUtils.hasText(taskTO.getCronExpression()) || ""String_Node_Str"".equals(taskTO.getCronExpression())) {
    taskTO.setCronExpression(null);
  }
 else {
    taskTO.setCronExpression(getCron(seconds,minutes,hours,daysOfMonth,months,daysOfWeek));
  }
  try {
    if (taskTO.getId() > 0) {
      if (taskTO instanceof SyncTaskTO) {
        taskTO=taskRestClient.updateSyncTask((SyncTaskTO)taskTO);
      }
 else {
        taskTO=taskRestClient.updateSchedTask(taskTO);
      }
    }
 else {
      if (taskTO instanceof SyncTaskTO) {
        taskTO=taskRestClient.createSyncTask((SyncTaskTO)taskTO);
      }
 else {
        taskTO=taskRestClient.createSchedTask(taskTO);
      }
    }
    ((BasePage)callerPageRef.getPage()).setModalResult(true);
    window.close(target);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
    target.add(feedbackPanel);
  }
}"
60766,"public AbstractSchedTaskModalPage(final ModalWindow window,final SchedTaskTO taskTO){
  super(taskTO);
  crontab=new WebMarkupContainer(""String_Node_Str"");
  crontab.setOutputMarkupId(true);
  form.add(crontab);
  final AjaxTextFieldPanel lastExec=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new DateFormatROModel(new PropertyModel<String>(taskTO,""String_Node_Str"")),false);
  lastExec.setEnabled(false);
  profile.add(lastExec);
  final AjaxTextFieldPanel nextExec=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new DateFormatROModel(new PropertyModel<String>(taskTO,""String_Node_Str"")),false);
  nextExec.setEnabled(false);
  profile.add(nextExec);
  final DropDownChoice<String> cronTemplateChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(taskTO,""String_Node_Str""),Arrays.asList(CRON_TEMPLATES),new SelectChoiceRenderer()){
    private static final long serialVersionUID=-5843424545478691442L;
    @Override protected CharSequence getDefaultChoice(    String selected){
      return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str"";
    }
  }
;
  final TextField seconds=new TextField(""String_Node_Str"",new Model(getCronField(taskTO.getCronExpression(),0)));
  crontab.add(seconds);
  final TextField minutes=new TextField(""String_Node_Str"",new Model(getCronField(taskTO.getCronExpression(),1)));
  crontab.add(minutes);
  final TextField hours=new TextField(""String_Node_Str"",new Model(getCronField(taskTO.getCronExpression(),2)));
  crontab.add(hours);
  final TextField daysOfMonth=new TextField(""String_Node_Str"",new Model(getCronField(taskTO.getCronExpression(),3)));
  crontab.add(daysOfMonth);
  final TextField months=new TextField(""String_Node_Str"",new Model(getCronField(taskTO.getCronExpression(),4)));
  crontab.add(months);
  final TextField daysOfWeek=new TextField(""String_Node_Str"",new Model(getCronField(taskTO.getCronExpression(),5)));
  crontab.add(daysOfWeek);
  cronTemplateChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      seconds.setModelObject(getCronField(cronTemplateChooser,0));
      minutes.setModelObject(getCronField(cronTemplateChooser,1));
      hours.setModelObject(getCronField(cronTemplateChooser,2));
      daysOfMonth.setModelObject(getCronField(cronTemplateChooser,3));
      months.setModelObject(getCronField(cronTemplateChooser,4));
      daysOfWeek.setModelObject(getCronField(cronTemplateChooser,5));
      target.add(crontab);
    }
  }
);
  crontab.add(cronTemplateChooser);
  final IndicatingAjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      SchedTaskTO taskTO=(SchedTaskTO)form.getModelObject();
      if (!StringUtils.hasText(taskTO.getCronExpression()) || ""String_Node_Str"".equals(taskTO.getCronExpression())) {
        taskTO.setCronExpression(null);
      }
 else {
        taskTO.setCronExpression(getCron(seconds,minutes,hours,daysOfMonth,months,daysOfWeek));
      }
      try {
        if (taskTO.getId() > 0) {
          if (taskTO instanceof SyncTaskTO) {
            taskTO=taskRestClient.updateSyncTask((SyncTaskTO)taskTO);
          }
 else {
            taskTO=taskRestClient.updateSchedTask(taskTO);
          }
        }
 else {
          if (taskTO instanceof SyncTaskTO) {
            taskTO=taskRestClient.createSyncTask((SyncTaskTO)taskTO);
          }
 else {
            taskTO=taskRestClient.createSchedTask(taskTO);
          }
        }
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        LOG.error(""String_Node_Str"",e);
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.add(feedbackPanel);
    }
  }
;
  if (taskTO.getId() > 0) {
    MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  }
 else {
    MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  }
  form.add(submit);
}","public AbstractSchedTaskModalPage(final ModalWindow window,final SchedTaskTO taskTO,final PageReference callerPageRef){
  super(taskTO);
  crontab=new WebMarkupContainer(""String_Node_Str"");
  crontab.setOutputMarkupId(true);
  form.add(crontab);
  final AjaxTextFieldPanel lastExec=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new DateFormatROModel(new PropertyModel<String>(taskTO,""String_Node_Str"")),false);
  lastExec.setEnabled(false);
  profile.add(lastExec);
  final AjaxTextFieldPanel nextExec=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new DateFormatROModel(new PropertyModel<String>(taskTO,""String_Node_Str"")),false);
  nextExec.setEnabled(false);
  profile.add(nextExec);
  final DropDownChoice<String> cronTemplateChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(taskTO,""String_Node_Str""),Arrays.asList(CRON_TEMPLATES),new SelectChoiceRenderer()){
    private static final long serialVersionUID=-5843424545478691442L;
    @Override protected CharSequence getDefaultChoice(    String selected){
      return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str"";
    }
  }
;
  final TextField seconds=new TextField(""String_Node_Str"",new Model(getCronField(taskTO.getCronExpression(),0)));
  crontab.add(seconds);
  final TextField minutes=new TextField(""String_Node_Str"",new Model(getCronField(taskTO.getCronExpression(),1)));
  crontab.add(minutes);
  final TextField hours=new TextField(""String_Node_Str"",new Model(getCronField(taskTO.getCronExpression(),2)));
  crontab.add(hours);
  final TextField daysOfMonth=new TextField(""String_Node_Str"",new Model(getCronField(taskTO.getCronExpression(),3)));
  crontab.add(daysOfMonth);
  final TextField months=new TextField(""String_Node_Str"",new Model(getCronField(taskTO.getCronExpression(),4)));
  crontab.add(months);
  final TextField daysOfWeek=new TextField(""String_Node_Str"",new Model(getCronField(taskTO.getCronExpression(),5)));
  crontab.add(daysOfWeek);
  cronTemplateChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      seconds.setModelObject(getCronField(cronTemplateChooser,0));
      minutes.setModelObject(getCronField(cronTemplateChooser,1));
      hours.setModelObject(getCronField(cronTemplateChooser,2));
      daysOfMonth.setModelObject(getCronField(cronTemplateChooser,3));
      months.setModelObject(getCronField(cronTemplateChooser,4));
      daysOfWeek.setModelObject(getCronField(cronTemplateChooser,5));
      target.add(crontab);
    }
  }
);
  crontab.add(cronTemplateChooser);
  final IndicatingAjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      SchedTaskTO taskTO=(SchedTaskTO)form.getModelObject();
      if (!StringUtils.hasText(taskTO.getCronExpression()) || ""String_Node_Str"".equals(taskTO.getCronExpression())) {
        taskTO.setCronExpression(null);
      }
 else {
        taskTO.setCronExpression(getCron(seconds,minutes,hours,daysOfMonth,months,daysOfWeek));
      }
      try {
        if (taskTO.getId() > 0) {
          if (taskTO instanceof SyncTaskTO) {
            taskTO=taskRestClient.updateSyncTask((SyncTaskTO)taskTO);
          }
 else {
            taskTO=taskRestClient.updateSchedTask(taskTO);
          }
        }
 else {
          if (taskTO instanceof SyncTaskTO) {
            taskTO=taskRestClient.createSyncTask((SyncTaskTO)taskTO);
          }
 else {
            taskTO=taskRestClient.createSchedTask(taskTO);
          }
        }
        ((BasePage)callerPageRef.getPage()).setModalResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        LOG.error(""String_Node_Str"",e);
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  if (taskTO.getId() > 0) {
    MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  }
 else {
    MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  }
  form.add(submit);
}"
60767,"private void pageSetup(){
  ((SyncopeApplication)getApplication()).setupNavigationPane(this,xmlRolesReader,version);
  feedbackPanel=new FeedbackPanel(""String_Node_Str"");
  feedbackPanel.setOutputMarkupId(true);
  add(feedbackPanel);
  final String kind=getClass().getSimpleName().toLowerCase();
  final Component kindIcon=get(kind);
  if (kindIcon != null) {
    kindIcon.add(new Behavior(){
      private static final long serialVersionUID=1469628524240283489L;
      @Override public void onComponentTag(      final Component component,      final ComponentTag tag){
        tag.put(""String_Node_Str"",kind);
      }
    }
);
    add(kindIcon);
  }
  final ModalWindow editProfileModalWin=new ModalWindow(""String_Node_Str"");
  editProfileModalWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editProfileModalWin.setInitialHeight(EDIT_PROFILE_WIN_HEIGHT);
  editProfileModalWin.setInitialWidth(EDIT_PROFILE_WIN_WIDTH);
  editProfileModalWin.setCookieName(""String_Node_Str"");
  add(editProfileModalWin);
  add(new Label(""String_Node_Str"",SyncopeSession.get().getUserId()));
  Fragment editProfileFrag;
  if (""String_Node_Str"".equals(SyncopeSession.get().getUserId())) {
    editProfileFrag=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
  }
 else {
    final UserTO userTO=SyncopeSession.get().isAuthenticated() ? profileRestClient.readProfile() : new UserTO();
    editProfileFrag=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
    AjaxLink editProfileLink=new IndicatingAjaxLink(""String_Node_Str""){
      private static final long serialVersionUID=-7978723352517770644L;
      @Override public void onClick(      final AjaxRequestTarget target){
        editProfileModalWin.setPageCreator(new ModalWindow.PageCreator(){
          @Override public Page createPage(){
            return new UserModalPage(BasePage.this.getPageReference(),editProfileModalWin,userTO,true);
          }
        }
);
        editProfileModalWin.show(target);
      }
    }
;
    editProfileLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
    Panel panel=new LinkPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str""));
    panel.add(editProfileLink);
    editProfileFrag.add(panel);
  }
  add(editProfileFrag);
}","private void pageSetup(){
  ((SyncopeApplication)getApplication()).setupNavigationPane(this,xmlRolesReader,version);
  feedbackPanel=new FeedbackPanel(""String_Node_Str"");
  feedbackPanel.setOutputMarkupId(true);
  add(feedbackPanel);
  final String kind=getClass().getSimpleName().toLowerCase();
  final Component kindIcon=get(kind);
  if (kindIcon != null) {
    kindIcon.add(new Behavior(){
      private static final long serialVersionUID=1469628524240283489L;
      @Override public void onComponentTag(      final Component component,      final ComponentTag tag){
        tag.put(""String_Node_Str"",kind);
      }
    }
);
    add(kindIcon);
  }
  final ModalWindow editProfileModalWin=new ModalWindow(""String_Node_Str"");
  editProfileModalWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editProfileModalWin.setInitialHeight(EDIT_PROFILE_WIN_HEIGHT);
  editProfileModalWin.setInitialWidth(EDIT_PROFILE_WIN_WIDTH);
  editProfileModalWin.setCookieName(""String_Node_Str"");
  add(editProfileModalWin);
  add(new Label(""String_Node_Str"",SyncopeSession.get().getUserId()));
  Fragment editProfileFrag;
  if (""String_Node_Str"".equals(SyncopeSession.get().getUserId())) {
    editProfileFrag=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
  }
 else {
    final UserTO userTO=SyncopeSession.get().isAuthenticated() ? profileRestClient.readProfile() : new UserTO();
    editProfileFrag=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
    AjaxLink editProfileLink=new IndicatingAjaxLink(""String_Node_Str""){
      private static final long serialVersionUID=-7978723352517770644L;
      @Override public void onClick(      final AjaxRequestTarget target){
        editProfileModalWin.setPageCreator(new ModalWindow.PageCreator(){
          @Override public Page createPage(){
            return new UserModalPage(BasePage.this.getPageReference(),editProfileModalWin,userTO,UserModalPage.Mode.SELF);
          }
        }
);
        editProfileModalWin.show(target);
      }
    }
;
    editProfileLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
    Panel panel=new LinkPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str""));
    panel.add(editProfileLink);
    editProfileFrag.add(panel);
  }
  add(editProfileFrag);
}"
60768,"@Override public Page createPage(){
  return new UserModalPage(BasePage.this.getPageReference(),editProfileModalWin,userTO,true);
}","@Override public Page createPage(){
  return new UserModalPage(BasePage.this.getPageReference(),editProfileModalWin,userTO,UserModalPage.Mode.SELF);
}"
60769,"@Override public void onClick(final AjaxRequestTarget target){
  editProfileModalWin.setPageCreator(new ModalWindow.PageCreator(){
    @Override public Page createPage(){
      return new UserModalPage(BasePage.this.getPageReference(),editProfileModalWin,userTO,true);
    }
  }
);
  editProfileModalWin.show(target);
}","@Override public void onClick(final AjaxRequestTarget target){
  editProfileModalWin.setPageCreator(new ModalWindow.PageCreator(){
    @Override public Page createPage(){
      return new UserModalPage(BasePage.this.getPageReference(),editProfileModalWin,userTO,UserModalPage.Mode.SELF);
    }
  }
);
  editProfileModalWin.show(target);
}"
60770,"@Override public Page createPage(){
  return new UserModalPage(Login.this.getPageReference(),editProfileModalWin,new UserTO(),true);
}","@Override public Page createPage(){
  return new UserModalPage(Login.this.getPageReference(),editProfileModalWin,new UserTO(),UserModalPage.Mode.SELF);
}"
60771,"@Override public void onClick(final AjaxRequestTarget target){
  editProfileModalWin.setPageCreator(new ModalWindow.PageCreator(){
    @Override public Page createPage(){
      return new UserModalPage(Login.this.getPageReference(),editProfileModalWin,new UserTO(),true);
    }
  }
);
  editProfileModalWin.show(target);
}","@Override public void onClick(final AjaxRequestTarget target){
  editProfileModalWin.setPageCreator(new ModalWindow.PageCreator(){
    @Override public Page createPage(){
      return new UserModalPage(Login.this.getPageReference(),editProfileModalWin,new UserTO(),UserModalPage.Mode.SELF);
    }
  }
);
  editProfileModalWin.show(target);
}"
60772,"public Login(final PageParameters parameters){
  super(parameters);
  form=new Form(""String_Node_Str"");
  userIdField=new TextField(""String_Node_Str"",new Model());
  userIdField.setMarkupId(""String_Node_Str"");
  form.add(userIdField);
  passwordField=new PasswordTextField(""String_Node_Str"",new Model());
  passwordField.setMarkupId(""String_Node_Str"");
  form.add(passwordField);
  languageSelect=new LocaleDropDown(""String_Node_Str"",Arrays.asList(new Locale[]{Locale.ENGLISH,Locale.ITALIAN}));
  form.add(languageSelect);
  Button submitButton=new Button(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    private static final long serialVersionUID=429178684321093953L;
    @Override public void onSubmit(){
      String[] entitlements=authenticate(userIdField.getRawInput(),passwordField.getRawInput());
      SyncopeSession.get().setUserId(userIdField.getRawInput());
      SyncopeSession.get().setEntitlements(entitlements);
      SyncopeSession.get().setCoreVersion(getCoreVersion());
      setResponsePage(WelcomePage.class,parameters);
    }
  }
;
  submitButton.setDefaultFormProcessing(false);
  form.add(submitButton);
  add(form);
  add(new FeedbackPanel(""String_Node_Str""));
  final ModalWindow editProfileModalWin=new ModalWindow(""String_Node_Str"");
  editProfileModalWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editProfileModalWin.setInitialHeight(SELF_REG_WIN_HEIGHT);
  editProfileModalWin.setInitialWidth(SELF_REG_WIN_WIDTH);
  editProfileModalWin.setCookieName(""String_Node_Str"");
  add(editProfileModalWin);
  Fragment selfRegFrag;
  if (restTemplate.getForObject(baseURL + ""String_Node_Str"",Boolean.class)) {
    selfRegFrag=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
    AjaxLink selfRegLink=new IndicatingAjaxLink(""String_Node_Str""){
      private static final long serialVersionUID=-7978723352517770644L;
      @Override public void onClick(      final AjaxRequestTarget target){
        editProfileModalWin.setPageCreator(new ModalWindow.PageCreator(){
          @Override public Page createPage(){
            return new UserModalPage(Login.this.getPageReference(),editProfileModalWin,new UserTO(),true);
          }
        }
);
        editProfileModalWin.show(target);
      }
    }
;
    selfRegLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
    Panel panel=new LinkPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str""));
    panel.add(selfRegLink);
    selfRegFrag.add(panel);
  }
 else {
    selfRegFrag=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
  }
  add(selfRegFrag);
}","public Login(final PageParameters parameters){
  super(parameters);
  form=new Form(""String_Node_Str"");
  userIdField=new TextField(""String_Node_Str"",new Model());
  userIdField.setMarkupId(""String_Node_Str"");
  form.add(userIdField);
  passwordField=new PasswordTextField(""String_Node_Str"",new Model());
  passwordField.setMarkupId(""String_Node_Str"");
  form.add(passwordField);
  languageSelect=new LocaleDropDown(""String_Node_Str"",Arrays.asList(new Locale[]{Locale.ENGLISH,Locale.ITALIAN}));
  form.add(languageSelect);
  Button submitButton=new Button(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    private static final long serialVersionUID=429178684321093953L;
    @Override public void onSubmit(){
      String[] entitlements=authenticate(userIdField.getRawInput(),passwordField.getRawInput());
      SyncopeSession.get().setUserId(userIdField.getRawInput());
      SyncopeSession.get().setEntitlements(entitlements);
      SyncopeSession.get().setCoreVersion(getCoreVersion());
      setResponsePage(WelcomePage.class,parameters);
    }
  }
;
  submitButton.setDefaultFormProcessing(false);
  form.add(submitButton);
  add(form);
  add(new FeedbackPanel(""String_Node_Str""));
  final ModalWindow editProfileModalWin=new ModalWindow(""String_Node_Str"");
  editProfileModalWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editProfileModalWin.setInitialHeight(SELF_REG_WIN_HEIGHT);
  editProfileModalWin.setInitialWidth(SELF_REG_WIN_WIDTH);
  editProfileModalWin.setCookieName(""String_Node_Str"");
  add(editProfileModalWin);
  Fragment selfRegFrag;
  if (restTemplate.getForObject(baseURL + ""String_Node_Str"",Boolean.class)) {
    selfRegFrag=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
    AjaxLink selfRegLink=new IndicatingAjaxLink(""String_Node_Str""){
      private static final long serialVersionUID=-7978723352517770644L;
      @Override public void onClick(      final AjaxRequestTarget target){
        editProfileModalWin.setPageCreator(new ModalWindow.PageCreator(){
          @Override public Page createPage(){
            return new UserModalPage(Login.this.getPageReference(),editProfileModalWin,new UserTO(),UserModalPage.Mode.SELF);
          }
        }
);
        editProfileModalWin.show(target);
      }
    }
;
    selfRegLink.add(new Label(""String_Node_Str"",getString(""String_Node_Str"")));
    Panel panel=new LinkPanel(""String_Node_Str"",new ResourceModel(""String_Node_Str""));
    panel.add(selfRegLink);
    selfRegFrag.add(panel);
  }
 else {
    selfRegFrag=new Fragment(""String_Node_Str"",""String_Node_Str"",this);
  }
  add(selfRegFrag);
}"
60773,"public MembershipModalPage(final PageReference pageRef,final ModalWindow window,final MembershipTO membershipTO){
  final Form form=new Form(""String_Node_Str"");
  final UserTO userTO=((UserModalPage)pageRef.getPage()).getUserTO();
  form.setModel(new CompoundPropertyModel(membershipTO));
  submit=new AjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      userTO.removeMembership(membershipTO);
      userTO.addMembership(membershipTO);
      ((UserModalPage)pageRef.getPage()).setUserTO(userTO);
      window.close(target);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=null;
  if (((UserTO)userTO).getId() == 0) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,allowedRoles);
  form.add(submit);
  form.add(new AttributesPanel(""String_Node_Str"",membershipTO,form));
  form.add(new DerivedAttributesPanel(""String_Node_Str"",membershipTO));
  form.add(new VirtualAttributesPanel(""String_Node_Str"",membershipTO));
  add(form);
}","public MembershipModalPage(final PageReference pageRef,final ModalWindow window,final MembershipTO membershipTO,final boolean templateMode){
  final Form form=new Form(""String_Node_Str"");
  final UserTO userTO=((UserModalPage)pageRef.getPage()).getUserTO();
  form.setModel(new CompoundPropertyModel(membershipTO));
  submit=new AjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      userTO.removeMembership(membershipTO);
      userTO.addMembership(membershipTO);
      ((UserModalPage)pageRef.getPage()).setUserTO(userTO);
      window.close(target);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=userTO.getId() == 0 ? xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"") : xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,allowedRoles);
  form.add(submit);
  form.add(new AttributesPanel(""String_Node_Str"",membershipTO,form,templateMode));
  form.add(new DerivedAttributesPanel(""String_Node_Str"",membershipTO));
  form.add(new VirtualAttributesPanel(""String_Node_Str"",membershipTO,templateMode));
  add(form);
}"
60774,"public SchedTaskModalPage(final ModalWindow window,final SchedTaskTO taskTO){
  super(window,taskTO);
  final IModel<List<String>> classNames=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      final List<String> classes=new ArrayList<String>(taskRestClient.getJobClasses());
      return classes;
    }
  }
;
  final AjaxDropDownChoicePanel<String> className=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(taskTO,""String_Node_Str""),false);
  className.setChoices(classNames.getObject());
  className.addRequiredLabel();
  className.setEnabled(taskTO.getId() == 0);
  className.setStyleShet(""String_Node_Str"");
  profile.add(className);
}","public SchedTaskModalPage(final ModalWindow window,final SchedTaskTO taskTO,final PageReference callerPageRef){
  super(window,taskTO,callerPageRef);
  final IModel<List<String>> classNames=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      final List<String> classes=new ArrayList<String>(taskRestClient.getJobClasses());
      return classes;
    }
  }
;
  final AjaxDropDownChoicePanel<String> className=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(taskTO,""String_Node_Str""),false);
  className.setChoices(classNames.getObject());
  className.addRequiredLabel();
  className.setEnabled(taskTO.getId() == 0);
  className.setStyleShet(""String_Node_Str"");
  profile.add(className);
}"
60775,"public SyncTaskModalPage(final ModalWindow window,final SyncTaskTO taskTO){
  super(window,taskTO);
  final IModel<List<String>> allResources=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      final List<String> resourceNames=new ArrayList<String>();
      for (      ResourceTO resourceTO : resourceRestClient.getAllResources()) {
        resourceNames.add(resourceTO.getName());
      }
      return resourceNames;
    }
  }
;
  final IModel<Map<Long,String>> allRoles=new LoadableDetachableModel<Map<Long,String>>(){
    private static final long serialVersionUID=-2012833443695917883L;
    @Override protected Map<Long,String> load(){
      final Map<Long,String> allRoles=new HashMap<Long,String>();
      List<RoleTO> roles=roleRestClient.getAllRoles();
      if (roles != null) {
        for (        RoleTO role : roles) {
          allRoles.put(role.getId(),role.getName());
        }
      }
      return allRoles;
    }
  }
;
  final AjaxDropDownChoicePanel<String> resource=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(taskTO,""String_Node_Str""),false);
  resource.setChoices(allResources.getObject());
  resource.setChoiceRenderer(new SelectChoiceRenderer());
  resource.addRequiredLabel();
  resource.setEnabled(taskTO.getId() == 0);
  resource.setStyleShet(""String_Node_Str"");
  profile.add(resource);
  final IModel<List<String>> classNames=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      final List<String> classes=new ArrayList<String>(taskRestClient.getJobActionsClasses());
      return classes;
    }
  }
;
  final AjaxDropDownChoicePanel<String> actionsClassName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(taskTO,""String_Node_Str""),false);
  actionsClassName.setChoices(classNames.getObject());
  actionsClassName.setStyleShet(""String_Node_Str"");
  profile.add(actionsClassName);
  final AjaxCheckBoxPanel creates=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(taskTO,""String_Node_Str""),false);
  profile.add(creates);
  final AjaxCheckBoxPanel updates=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(taskTO,""String_Node_Str""),false);
  profile.add(updates);
  final AjaxCheckBoxPanel deletes=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(taskTO,""String_Node_Str""),false);
  profile.add(deletes);
  final AjaxPalettePanel defaultResources=new AjaxPalettePanel(""String_Node_Str"",new PropertyModel(taskTO,""String_Node_Str""),new ListModel<String>(allResources.getObject()));
  form.add(defaultResources);
  final AjaxPalettePanel<Long> defaultRoles=new AjaxPalettePanel<Long>(""String_Node_Str"",new PropertyModel(taskTO,""String_Node_Str""),new ListModel<Long>(new ArrayList<Long>(allRoles.getObject().keySet())),new ChoiceRenderer<Long>(){
    private static final long serialVersionUID=8463000788871139550L;
    @Override public String getDisplayValue(    final Long id){
      return allRoles.getObject().get(id);
    }
    @Override public String getIdValue(    final Long id,    final int index){
      return id.toString();
    }
  }
);
  form.add(defaultRoles);
}","public SyncTaskModalPage(final ModalWindow window,final SyncTaskTO taskTO,final PageReference callerPageRef){
  super(window,taskTO,callerPageRef);
  final IModel<List<String>> allResources=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      final List<String> resourceNames=new ArrayList<String>();
      for (      ResourceTO resourceTO : resourceRestClient.getAllResources()) {
        resourceNames.add(resourceTO.getName());
      }
      return resourceNames;
    }
  }
;
  final AjaxDropDownChoicePanel<String> resource=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(taskTO,""String_Node_Str""),false);
  resource.setChoices(allResources.getObject());
  resource.setChoiceRenderer(new SelectChoiceRenderer());
  resource.addRequiredLabel();
  resource.setEnabled(taskTO.getId() == 0);
  resource.setStyleShet(""String_Node_Str"");
  profile.add(resource);
  final IModel<List<String>> classNames=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      final List<String> classes=new ArrayList<String>(taskRestClient.getJobActionsClasses());
      return classes;
    }
  }
;
  final AjaxDropDownChoicePanel<String> actionsClassName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(taskTO,""String_Node_Str""),false);
  actionsClassName.setChoices(classNames.getObject());
  actionsClassName.setStyleShet(""String_Node_Str"");
  profile.add(actionsClassName);
  final AjaxCheckBoxPanel creates=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(taskTO,""String_Node_Str""),false);
  profile.add(creates);
  final AjaxCheckBoxPanel updates=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(taskTO,""String_Node_Str""),false);
  profile.add(updates);
  final AjaxCheckBoxPanel deletes=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(taskTO,""String_Node_Str""),false);
  profile.add(deletes);
}"
60776,"public ResourceTO(){
  mappings=new ArrayList<SchemaMappingTO>();
  connectorConfigurationProperties=new HashSet<ConnConfProperty>();
  propagationMode=PropagationMode.ASYNC;
  propagationPriority=0;
  createTraceLevel=TraceLevel.ALL;
  updateTraceLevel=TraceLevel.ALL;
  deleteTraceLevel=TraceLevel.ALL;
  syncTraceLevel=TraceLevel.ALL;
}","public ResourceTO(){
  mappings=new ArrayList<SchemaMappingTO>();
  connectorConfigurationProperties=new HashSet<ConnConfProperty>();
  propagationMode=PropagationMode.TWO_PHASES;
  propagationPriority=0;
  createTraceLevel=TraceLevel.ALL;
  updateTraceLevel=TraceLevel.ALL;
  deleteTraceLevel=TraceLevel.ALL;
  syncTraceLevel=TraceLevel.ALL;
}"
60777,"/** 
 * Default constructor.
 */
public ExternalResource(){
  super();
  forceMandatoryConstraint=getBooleanAsInteger(false);
  users=new HashSet<SyncopeUser>();
  roles=new HashSet<SyncopeRole>();
  mappings=new ArrayList<SchemaMapping>();
  propagationPrimary=0;
  propagationPriority=0;
  propagationMode=PropagationMode.ASYNC;
  createTraceLevel=TraceLevel.FAILURES;
  updateTraceLevel=TraceLevel.FAILURES;
  deleteTraceLevel=TraceLevel.FAILURES;
  syncTraceLevel=TraceLevel.FAILURES;
}","/** 
 * Default constructor.
 */
public ExternalResource(){
  super();
  forceMandatoryConstraint=getBooleanAsInteger(false);
  users=new HashSet<SyncopeUser>();
  roles=new HashSet<SyncopeRole>();
  mappings=new ArrayList<SchemaMapping>();
  propagationPrimary=0;
  propagationPriority=0;
  propagationMode=PropagationMode.TWO_PHASES;
  createTraceLevel=TraceLevel.FAILURES;
  updateTraceLevel=TraceLevel.FAILURES;
  deleteTraceLevel=TraceLevel.FAILURES;
  syncTraceLevel=TraceLevel.FAILURES;
}"
60778,"/** 
 * Get remote object used by the propagation manager in order to choose for a create (object doesn't exist) or an update (object exists).
 * @param propagationMode propagation mode (SYNC / ASYNC)
 * @param operationType resource operation type
 * @param objectClass ConnId's object class
 * @param uid ConnId's Uid
 * @param options ConnId's OperationOptions
 * @return ConnId's connector object for given uid
 */
public ConnectorObject getObject(final PropagationMode propagationMode,final PropagationOperation operationType,final ObjectClass objectClass,final Uid uid,final OperationOptions options){
  ConnectorObject result=null;
  if (capabitilies.contains(ConnectorCapability.SEARCH)) {
    if (operationType == null) {
      result=connector.getObject(objectClass,uid,options);
    }
 else {
switch (operationType) {
case CREATE:
        if (propagationMode == null || (propagationMode == PropagationMode.SYNC ? capabitilies.contains(ConnectorCapability.SYNC_CREATE) : capabitilies.contains(ConnectorCapability.ASYNC_CREATE))) {
          result=connector.getObject(objectClass,uid,options);
        }
      break;
case UPDATE:
    if (propagationMode == null || (propagationMode == PropagationMode.SYNC ? capabitilies.contains(ConnectorCapability.SYNC_UPDATE) : capabitilies.contains(ConnectorCapability.ASYNC_UPDATE))) {
      result=connector.getObject(objectClass,uid,options);
    }
  break;
default :
result=connector.getObject(objectClass,uid,options);
}
}
}
 else {
LOG.info(""String_Node_Str"" + ""String_Node_Str"",capabitilies);
}
return result;
}","/** 
 * Get remote object used by the propagation manager in order to choose for a create (object doesn't exist) or an update (object exists).
 * @param propagationMode propagation mode
 * @param operationType resource operation type
 * @param objectClass ConnId's object class
 * @param uid ConnId's Uid
 * @param options ConnId's OperationOptions
 * @return ConnId's connector object for given uid
 */
public ConnectorObject getObject(final PropagationMode propagationMode,final PropagationOperation operationType,final ObjectClass objectClass,final Uid uid,final OperationOptions options){
  ConnectorObject result=null;
  if (capabitilies.contains(ConnectorCapability.SEARCH)) {
    if (operationType == null) {
      result=connector.getObject(objectClass,uid,options);
    }
 else {
switch (operationType) {
case CREATE:
        if (propagationMode == null || (propagationMode == PropagationMode.ONE_PHASE ? capabitilies.contains(ConnectorCapability.ONE_PHASE_CREATE) : capabitilies.contains(ConnectorCapability.TWO_PHASES_CREATE))) {
          result=connector.getObject(objectClass,uid,options);
        }
      break;
case UPDATE:
    if (propagationMode == null || (propagationMode == PropagationMode.ONE_PHASE ? capabitilies.contains(ConnectorCapability.ONE_PHASE_UPDATE) : capabitilies.contains(ConnectorCapability.TWO_PHASES_UPDATE))) {
      result=connector.getObject(objectClass,uid,options);
    }
  break;
default :
result=connector.getObject(objectClass,uid,options);
}
}
}
 else {
LOG.info(""String_Node_Str"" + ""String_Node_Str"",capabitilies);
}
return result;
}"
60779,"/** 
 * Update user on a connector instance.
 * @param propagationMode propagation mode (SYNC / ASYNC)
 * @param objectClass ConnId's object class
 * @param uid user to be updated
 * @param attrs attributes for update
 * @param options ConnId's OperationOptions
 * @param propagationAttempted if update is actually performed (based onconnector instance's capabilities)
 * @return Uid for created user
 */
public Uid update(final PropagationMode propagationMode,final ObjectClass objectClass,final Uid uid,final Set<Attribute> attrs,final OperationOptions options,final Set<String> propagationAttempted){
  Uid result=null;
  if (propagationMode == PropagationMode.SYNC ? capabitilies.contains(ConnectorCapability.SYNC_UPDATE) : capabitilies.contains(ConnectorCapability.ASYNC_UPDATE)) {
    propagationAttempted.add(""String_Node_Str"");
    result=connector.update(objectClass,uid,attrs,options);
  }
 else {
    LOG.info(""String_Node_Str"" + ""String_Node_Str"",uid.getUidValue(),capabitilies);
  }
  return result;
}","/** 
 * Update user on a connector instance.
 * @param propagationMode propagation mode
 * @param objectClass ConnId's object class
 * @param uid user to be updated
 * @param attrs attributes for update
 * @param options ConnId's OperationOptions
 * @param propagationAttempted if update is actually performed (based onconnector instance's capabilities)
 * @return Uid for created user
 */
public Uid update(final PropagationMode propagationMode,final ObjectClass objectClass,final Uid uid,final Set<Attribute> attrs,final OperationOptions options,final Set<String> propagationAttempted){
  Uid result=null;
  if (propagationMode == PropagationMode.ONE_PHASE ? capabitilies.contains(ConnectorCapability.ONE_PHASE_UPDATE) : capabitilies.contains(ConnectorCapability.TWO_PHASES_UPDATE)) {
    propagationAttempted.add(""String_Node_Str"");
    result=connector.update(objectClass,uid,attrs,options);
  }
 else {
    LOG.info(""String_Node_Str"" + ""String_Node_Str"",uid.getUidValue(),capabitilies);
  }
  return result;
}"
60780,"/** 
 * Delete user on a connector instance.
 * @param propagationMode propagation mode (SYNC / ASYNC)
 * @param objectClass ConnId's object class
 * @param uid user to be deleted
 * @param options ConnId's OperationOptions
 * @param propagationAttempted if deletion is actually performed (based onconnector instance's capabilities)
 */
public void delete(final PropagationMode propagationMode,final ObjectClass objectClass,final Uid uid,final OperationOptions options,final Set<String> propagationAttempted){
  if (propagationMode == PropagationMode.SYNC ? capabitilies.contains(ConnectorCapability.SYNC_DELETE) : capabitilies.contains(ConnectorCapability.ASYNC_DELETE)) {
    propagationAttempted.add(""String_Node_Str"");
    connector.delete(objectClass,uid,options);
  }
 else {
    LOG.info(""String_Node_Str"" + ""String_Node_Str"",uid.getUidValue(),capabitilies);
  }
}","/** 
 * Delete user on a connector instance.
 * @param propagationMode propagation mode
 * @param objectClass ConnId's object class
 * @param uid user to be deleted
 * @param options ConnId's OperationOptions
 * @param propagationAttempted if deletion is actually performed (based onconnector instance's capabilities)
 */
public void delete(final PropagationMode propagationMode,final ObjectClass objectClass,final Uid uid,final OperationOptions options,final Set<String> propagationAttempted){
  if (propagationMode == PropagationMode.ONE_PHASE ? capabitilies.contains(ConnectorCapability.ONE_PHASE_DELETE) : capabitilies.contains(ConnectorCapability.TWO_PHASES_DELETE)) {
    propagationAttempted.add(""String_Node_Str"");
    connector.delete(objectClass,uid,options);
  }
 else {
    LOG.info(""String_Node_Str"" + ""String_Node_Str"",uid.getUidValue(),capabitilies);
  }
}"
60781,"/** 
 * Create user on a connector instance.
 * @param propagationMode propagation mode (SYNC / ASYNC)
 * @param objectClass ConnId's object class
 * @param attrs attributes for creation
 * @param options ConnId's OperationOptions
 * @param propagationAttempted if creation is actually performed (based onconnector instance's capabilities)
 * @return Uid for created user
 */
public Uid create(final PropagationMode propagationMode,final ObjectClass objectClass,final Set<Attribute> attrs,final OperationOptions options,final Set<String> propagationAttempted){
  Uid result=null;
  if (propagationMode == PropagationMode.SYNC ? capabitilies.contains(ConnectorCapability.SYNC_CREATE) : capabitilies.contains(ConnectorCapability.ASYNC_CREATE)) {
    propagationAttempted.add(""String_Node_Str"");
    result=connector.create(objectClass,attrs,options);
  }
 else {
    LOG.info(""String_Node_Str"" + ""String_Node_Str"",capabitilies);
  }
  return result;
}","/** 
 * Create user on a connector instance.
 * @param propagationMode propagation mode
 * @param objectClass ConnId's object class
 * @param attrs attributes for creation
 * @param options ConnId's OperationOptions
 * @param propagationAttempted if creation is actually performed (based onconnector instance's capabilities)
 * @return Uid for created user
 */
public Uid create(final PropagationMode propagationMode,final ObjectClass objectClass,final Set<Attribute> attrs,final OperationOptions options,final Set<String> propagationAttempted){
  Uid result=null;
  if (propagationMode == PropagationMode.ONE_PHASE ? capabitilies.contains(ConnectorCapability.ONE_PHASE_CREATE) : capabitilies.contains(ConnectorCapability.TWO_PHASES_CREATE)) {
    propagationAttempted.add(""String_Node_Str"");
    result=connector.create(objectClass,attrs,options);
  }
 else {
    LOG.info(""String_Node_Str"" + ""String_Node_Str"",capabitilies);
  }
  return result;
}"
60782,"/** 
 * Execute a propagation task.
 * @param task to execute
 * @return TaskExecution
 */
public TaskExec execute(final PropagationTask task){
  final Date startDate=new Date();
  TaskExec execution=new TaskExec();
  execution.setStatus(PropagationTaskExecStatus.CREATED.name());
  String taskExecutionMessage=null;
  Set<String> propagationAttempted=new HashSet<String>();
  try {
    final ConnInstance connInstance=task.getResource().getConnector();
    final ConnectorFacadeProxy connector=connLoader.getConnector(task.getResource());
    if (connector == null) {
      final String msg=String.format(""String_Node_Str"" + ""String_Node_Str"",task.getResource(),connInstance);
      throw new NoSuchBeanDefinitionException(msg);
    }
    ConnectorObject remoteObject=null;
    try {
      remoteObject=connector.getObject(task.getPropagationMode(),task.getPropagationOperation(),ObjectClass.ACCOUNT,new Uid(task.getOldAccountId() == null ? task.getAccountId() : task.getOldAccountId()),null);
    }
 catch (    RuntimeException ignore) {
      LOG.debug(""String_Node_Str"" + ""String_Node_Str"",ignore);
    }
switch (task.getPropagationOperation()) {
case CREATE:
case UPDATE:
      final Set<Attribute> attributes=new HashSet<Attribute>(task.getAttributes());
    if (remoteObject != null) {
      final Name newName=(Name)AttributeUtil.find(Name.NAME,attributes);
      LOG.debug(""String_Node_Str"",newName);
      if (newName != null && newName.equals(remoteObject.getName())) {
        LOG.debug(""String_Node_Str"");
        attributes.remove(newName);
      }
      LOG.debug(""String_Node_Str"",attributes);
      connector.update(task.getPropagationMode(),ObjectClass.ACCOUNT,remoteObject.getUid(),attributes,null,propagationAttempted);
    }
 else {
      final String accountId=task.getAccountId();
      final Name name=(Name)AttributeUtil.find(Name.NAME,attributes);
      if (StringUtils.hasText(accountId) && (name == null || !accountId.equals(name.getNameValue()))) {
        final Uid uid=(Uid)AttributeUtil.find(Uid.NAME,attributes);
        if (uid == null) {
          attributes.add(AttributeBuilder.build(Uid.NAME,Collections.singleton(accountId)));
        }
      }
      connector.create(task.getPropagationMode(),ObjectClass.ACCOUNT,attributes,null,propagationAttempted);
    }
  break;
case DELETE:
if (remoteObject == null) {
  LOG.debug(""String_Node_Str"" + ""String_Node_Str"",task.getAccountId());
}
 else {
  connector.delete(task.getPropagationMode(),ObjectClass.ACCOUNT,remoteObject.getUid(),null,propagationAttempted);
}
break;
default :
}
execution.setStatus(task.getPropagationMode() == PropagationMode.SYNC ? PropagationTaskExecStatus.SUCCESS.name() : PropagationTaskExecStatus.SUBMITTED.name());
LOG.debug(""String_Node_Str"",task.getResource());
}
 catch (Throwable t) {
LOG.error(""String_Node_Str"" + task.getResource().getName(),t);
if (t instanceof ConnectorException && t.getCause() != null) {
taskExecutionMessage=t.getCause().getMessage();
}
 else {
StringWriter exceptionWriter=new StringWriter();
exceptionWriter.write(t.getMessage() + ""String_Node_Str"");
t.printStackTrace(new PrintWriter(exceptionWriter));
taskExecutionMessage=exceptionWriter.toString();
}
try {
execution.setStatus(task.getPropagationMode() == PropagationMode.SYNC ? PropagationTaskExecStatus.FAILURE.name() : PropagationTaskExecStatus.UNSUBMITTED.name());
}
 catch (Throwable wft) {
LOG.error(""String_Node_Str"",execution,wft);
}
propagationAttempted.add(task.getPropagationOperation().name().toLowerCase());
}
 finally {
LOG.debug(""String_Node_Str"",task);
if (hasToBeregistered(task,execution)) {
PropagationTask savedTask=taskDAO.save(task);
execution.setStartDate(startDate);
execution.setMessage(taskExecutionMessage);
execution.setEndDate(new Date());
execution.setTask(savedTask);
if (!propagationAttempted.isEmpty()) {
execution=taskExecDAO.save(execution);
LOG.debug(""String_Node_Str"",execution);
}
 else {
LOG.debug(""String_Node_Str"",execution);
}
}
}
return execution;
}","/** 
 * Execute a propagation task.
 * @param task to execute
 * @return TaskExecution
 */
public TaskExec execute(final PropagationTask task){
  final Date startDate=new Date();
  TaskExec execution=new TaskExec();
  execution.setStatus(PropagationTaskExecStatus.CREATED.name());
  String taskExecutionMessage=null;
  Set<String> propagationAttempted=new HashSet<String>();
  try {
    final ConnInstance connInstance=task.getResource().getConnector();
    final ConnectorFacadeProxy connector=connLoader.getConnector(task.getResource());
    if (connector == null) {
      final String msg=String.format(""String_Node_Str"" + ""String_Node_Str"",task.getResource(),connInstance);
      throw new NoSuchBeanDefinitionException(msg);
    }
    ConnectorObject remoteObject=null;
    try {
      remoteObject=connector.getObject(task.getPropagationMode(),task.getPropagationOperation(),ObjectClass.ACCOUNT,new Uid(task.getOldAccountId() == null ? task.getAccountId() : task.getOldAccountId()),null);
    }
 catch (    RuntimeException ignore) {
      LOG.debug(""String_Node_Str"" + ""String_Node_Str"",ignore);
    }
switch (task.getPropagationOperation()) {
case CREATE:
case UPDATE:
      final Set<Attribute> attributes=new HashSet<Attribute>(task.getAttributes());
    if (remoteObject != null) {
      final Name newName=(Name)AttributeUtil.find(Name.NAME,attributes);
      LOG.debug(""String_Node_Str"",newName);
      if (newName != null && newName.equals(remoteObject.getName())) {
        LOG.debug(""String_Node_Str"");
        attributes.remove(newName);
      }
      LOG.debug(""String_Node_Str"",attributes);
      connector.update(task.getPropagationMode(),ObjectClass.ACCOUNT,remoteObject.getUid(),attributes,null,propagationAttempted);
    }
 else {
      final String accountId=task.getAccountId();
      final Name name=(Name)AttributeUtil.find(Name.NAME,attributes);
      if (StringUtils.hasText(accountId) && (name == null || !accountId.equals(name.getNameValue()))) {
        final Uid uid=(Uid)AttributeUtil.find(Uid.NAME,attributes);
        if (uid == null) {
          attributes.add(AttributeBuilder.build(Uid.NAME,Collections.singleton(accountId)));
        }
      }
      connector.create(task.getPropagationMode(),ObjectClass.ACCOUNT,attributes,null,propagationAttempted);
    }
  break;
case DELETE:
if (remoteObject == null) {
  LOG.debug(""String_Node_Str"" + ""String_Node_Str"",task.getAccountId());
}
 else {
  connector.delete(task.getPropagationMode(),ObjectClass.ACCOUNT,remoteObject.getUid(),null,propagationAttempted);
}
break;
default :
}
execution.setStatus(task.getPropagationMode() == PropagationMode.ONE_PHASE ? PropagationTaskExecStatus.SUCCESS.name() : PropagationTaskExecStatus.SUBMITTED.name());
LOG.debug(""String_Node_Str"",task.getResource());
}
 catch (Throwable t) {
LOG.error(""String_Node_Str"" + task.getResource().getName(),t);
if (t instanceof ConnectorException && t.getCause() != null) {
taskExecutionMessage=t.getCause().getMessage();
}
 else {
StringWriter exceptionWriter=new StringWriter();
exceptionWriter.write(t.getMessage() + ""String_Node_Str"");
t.printStackTrace(new PrintWriter(exceptionWriter));
taskExecutionMessage=exceptionWriter.toString();
}
try {
execution.setStatus(task.getPropagationMode() == PropagationMode.ONE_PHASE ? PropagationTaskExecStatus.FAILURE.name() : PropagationTaskExecStatus.UNSUBMITTED.name());
}
 catch (Throwable wft) {
LOG.error(""String_Node_Str"",execution,wft);
}
propagationAttempted.add(task.getPropagationOperation().name().toLowerCase());
}
 finally {
LOG.debug(""String_Node_Str"",task);
if (hasToBeregistered(task,execution)) {
PropagationTask savedTask=taskDAO.save(task);
execution.setStartDate(startDate);
execution.setMessage(taskExecutionMessage);
execution.setEndDate(new Date());
execution.setTask(savedTask);
if (!propagationAttempted.isEmpty()) {
execution=taskExecDAO.save(execution);
LOG.debug(""String_Node_Str"",execution);
}
 else {
LOG.debug(""String_Node_Str"",execution);
}
}
}
return execution;
}"
60783,"@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public TaskExecTO report(@PathVariable(""String_Node_Str"") final Long executionId,@RequestParam(""String_Node_Str"") final PropagationTaskExecStatus status,@RequestParam(""String_Node_Str"") final String message) throws NotFoundException, SyncopeClientCompositeErrorException {
  TaskExec exec=taskExecDAO.find(executionId);
  if (exec == null) {
    throw new NotFoundException(""String_Node_Str"" + executionId);
  }
  SyncopeClientException invalidReportException=new SyncopeClientException(SyncopeClientExceptionType.InvalidPropagationTaskExecReport);
  TaskUtil taskUtil=getTaskUtil(exec.getTask());
  if (taskUtil != TaskUtil.PROPAGATION) {
    invalidReportException.addElement(""String_Node_Str"" + taskUtil);
  }
 else {
    PropagationTask task=(PropagationTask)exec.getTask();
    if (task.getPropagationMode() != PropagationMode.ASYNC) {
      invalidReportException.addElement(""String_Node_Str"" + task.getPropagationMode());
    }
  }
switch (status) {
case SUCCESS:
case FAILURE:
    break;
case CREATED:
case SUBMITTED:
case UNSUBMITTED:
  invalidReportException.addElement(""String_Node_Str"" + status);
break;
default :
}
if (!invalidReportException.isEmpty()) {
SyncopeClientCompositeErrorException scce=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
scce.addException(invalidReportException);
throw scce;
}
exec.setStatus(status.toString());
exec.setMessage(message);
exec=taskExecDAO.save(exec);
return binder.getTaskExecutionTO(exec);
}","@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public TaskExecTO report(@PathVariable(""String_Node_Str"") final Long executionId,@RequestParam(""String_Node_Str"") final PropagationTaskExecStatus status,@RequestParam(""String_Node_Str"") final String message) throws NotFoundException, SyncopeClientCompositeErrorException {
  TaskExec exec=taskExecDAO.find(executionId);
  if (exec == null) {
    throw new NotFoundException(""String_Node_Str"" + executionId);
  }
  SyncopeClientException invalidReportException=new SyncopeClientException(SyncopeClientExceptionType.InvalidPropagationTaskExecReport);
  TaskUtil taskUtil=getTaskUtil(exec.getTask());
  if (taskUtil != TaskUtil.PROPAGATION) {
    invalidReportException.addElement(""String_Node_Str"" + taskUtil);
  }
 else {
    PropagationTask task=(PropagationTask)exec.getTask();
    if (task.getPropagationMode() != PropagationMode.TWO_PHASES) {
      invalidReportException.addElement(""String_Node_Str"" + task.getPropagationMode());
    }
  }
switch (status) {
case SUCCESS:
case FAILURE:
    break;
case CREATED:
case SUBMITTED:
case UNSUBMITTED:
  invalidReportException.addElement(""String_Node_Str"" + status);
break;
default :
}
if (!invalidReportException.isEmpty()) {
SyncopeClientCompositeErrorException scce=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
scce.addException(invalidReportException);
throw scce;
}
exec.setStatus(status.toString());
exec.setMessage(message);
exec=taskExecDAO.save(exec);
return binder.getTaskExecutionTO(exec);
}"
60784,"@Test public final void savePropagationTask(){
  ExternalResource resource=resourceDAO.find(""String_Node_Str"");
  assertNotNull(resource);
  SyncopeUser user=userDAO.find(2L);
  assertNotNull(user);
  PropagationTask task=new PropagationTask();
  task.setResource(resource);
  task.setSyncopeUser(user);
  task.setPropagationMode(PropagationMode.ASYNC);
  task.setPropagationOperation(PropagationOperation.CREATE);
  task.setAccountId(""String_Node_Str"");
  Set<Attribute> attributes=new HashSet<Attribute>();
  attributes.add(AttributeBuilder.build(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  attributes.add(AttributeBuilder.buildPassword(""String_Node_Str"".toCharArray()));
  task.setAttributes(attributes);
  task=taskDAO.save(task);
  assertNotNull(task);
  PropagationTask actual=taskDAO.find(task.getId());
  assertEquals(task,actual);
}","@Test public final void savePropagationTask(){
  ExternalResource resource=resourceDAO.find(""String_Node_Str"");
  assertNotNull(resource);
  SyncopeUser user=userDAO.find(2L);
  assertNotNull(user);
  PropagationTask task=new PropagationTask();
  task.setResource(resource);
  task.setSyncopeUser(user);
  task.setPropagationMode(PropagationMode.TWO_PHASES);
  task.setPropagationOperation(PropagationOperation.CREATE);
  task.setAccountId(""String_Node_Str"");
  Set<Attribute> attributes=new HashSet<Attribute>();
  attributes.add(AttributeBuilder.build(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  attributes.add(AttributeBuilder.buildPassword(""String_Node_Str"".toCharArray()));
  task.setAttributes(attributes);
  task=taskDAO.save(task);
  assertNotNull(task);
  PropagationTask actual=taskDAO.find(task.getId());
  assertEquals(task,actual);
}"
60785,"/** 
 * @see http://code.google.com/p/syncope/issues/detail?id=42
 */
@Test public final void issue42(){
  USchema userId=schemaDAO.find(""String_Node_Str"",USchema.class);
  Set<SchemaMapping> beforeUserIdMappings=new HashSet<SchemaMapping>();
  for (  SchemaMapping mapping : resourceDAO.findAllMappings()) {
    if (userId.getName().equals(mapping.getIntAttrName()) && mapping.getIntMappingType() == IntMappingType.UserSchema) {
      beforeUserIdMappings.add(mapping);
    }
  }
  SchemaMappingTO schemaMappingTO=new SchemaMappingTO();
  schemaMappingTO.setIntAttrName(""String_Node_Str"");
  schemaMappingTO.setIntMappingType(IntMappingType.UserSchema);
  schemaMappingTO.setExtAttrName(""String_Node_Str"");
  schemaMappingTO.setAccountid(true);
  schemaMappingTO.setPassword(false);
  schemaMappingTO.setMandatoryCondition(""String_Node_Str"");
  List<SchemaMappingTO> schemaMappingTOs=new ArrayList<SchemaMappingTO>();
  schemaMappingTOs.add(schemaMappingTO);
  ResourceTO resourceTO=new ResourceTO();
  resourceTO.setName(""String_Node_Str"");
  resourceTO.setConnectorId(100L);
  resourceTO.setMappings(schemaMappingTOs);
  resourceTO.setPropagationMode(PropagationMode.SYNC);
  resourceTO.setForceMandatoryConstraint(true);
  ExternalResource resource=resourceDataBinder.create(resourceTO);
  resource=resourceDAO.save(resource);
  resourceDAO.flush();
  ExternalResource actual=resourceDAO.find(""String_Node_Str"");
  assertEquals(resource,actual);
  userId=schemaDAO.find(""String_Node_Str"",USchema.class);
  Set<SchemaMapping> afterUserIdMappings=new HashSet<SchemaMapping>();
  for (  SchemaMapping mapping : resourceDAO.findAllMappings()) {
    if (userId.getName().equals(mapping.getIntAttrName()) && mapping.getIntMappingType() == IntMappingType.UserSchema) {
      afterUserIdMappings.add(mapping);
    }
  }
  assertEquals(beforeUserIdMappings.size(),afterUserIdMappings.size() - 1);
}","/** 
 * @see http://code.google.com/p/syncope/issues/detail?id=42
 */
@Test public final void issue42(){
  USchema userId=schemaDAO.find(""String_Node_Str"",USchema.class);
  Set<SchemaMapping> beforeUserIdMappings=new HashSet<SchemaMapping>();
  for (  SchemaMapping mapping : resourceDAO.findAllMappings()) {
    if (userId.getName().equals(mapping.getIntAttrName()) && mapping.getIntMappingType() == IntMappingType.UserSchema) {
      beforeUserIdMappings.add(mapping);
    }
  }
  SchemaMappingTO schemaMappingTO=new SchemaMappingTO();
  schemaMappingTO.setIntAttrName(""String_Node_Str"");
  schemaMappingTO.setIntMappingType(IntMappingType.UserSchema);
  schemaMappingTO.setExtAttrName(""String_Node_Str"");
  schemaMappingTO.setAccountid(true);
  schemaMappingTO.setPassword(false);
  schemaMappingTO.setMandatoryCondition(""String_Node_Str"");
  List<SchemaMappingTO> schemaMappingTOs=new ArrayList<SchemaMappingTO>();
  schemaMappingTOs.add(schemaMappingTO);
  ResourceTO resourceTO=new ResourceTO();
  resourceTO.setName(""String_Node_Str"");
  resourceTO.setConnectorId(100L);
  resourceTO.setMappings(schemaMappingTOs);
  resourceTO.setPropagationMode(PropagationMode.ONE_PHASE);
  resourceTO.setForceMandatoryConstraint(true);
  ExternalResource resource=resourceDataBinder.create(resourceTO);
  resource=resourceDAO.save(resource);
  resourceDAO.flush();
  ExternalResource actual=resourceDAO.find(""String_Node_Str"");
  assertEquals(resource,actual);
  userId=schemaDAO.find(""String_Node_Str"",USchema.class);
  Set<SchemaMapping> afterUserIdMappings=new HashSet<SchemaMapping>();
  for (  SchemaMapping mapping : resourceDAO.findAllMappings()) {
    if (userId.getName().equals(mapping.getIntAttrName()) && mapping.getIntMappingType() == IntMappingType.UserSchema) {
      afterUserIdMappings.add(mapping);
    }
  }
  assertEquals(beforeUserIdMappings.size(),afterUserIdMappings.size() - 1);
}"
60786,"@Test public final void save(){
  ExternalResource resource=resourceDAO.find(""String_Node_Str"");
  assertNotNull(resource);
  SyncopeUser user=userDAO.find(2L);
  assertNotNull(user);
  PropagationTask task=new PropagationTask();
  task.setResource(resource);
  task.setSyncopeUser(user);
  task.setPropagationMode(PropagationMode.ASYNC);
  task.setPropagationOperation(PropagationOperation.CREATE);
  task.setAccountId(""String_Node_Str"");
  Set<Attribute> attributes=new HashSet<Attribute>();
  attributes.add(AttributeBuilder.build(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  attributes.add(AttributeBuilder.buildPassword(""String_Node_Str"".toCharArray()));
  task.setAttributes(attributes);
  task=taskDAO.save(task);
  assertNotNull(task);
  PropagationTask actual=taskDAO.find(task.getId());
  assertEquals(task,actual);
  taskDAO.flush();
  resource=resourceDAO.find(""String_Node_Str"");
  assertTrue(taskDAO.findAll(resource,PropagationTask.class).contains(task));
}","@Test public final void save(){
  ExternalResource resource=resourceDAO.find(""String_Node_Str"");
  assertNotNull(resource);
  SyncopeUser user=userDAO.find(2L);
  assertNotNull(user);
  PropagationTask task=new PropagationTask();
  task.setResource(resource);
  task.setSyncopeUser(user);
  task.setPropagationMode(PropagationMode.TWO_PHASES);
  task.setPropagationOperation(PropagationOperation.CREATE);
  task.setAccountId(""String_Node_Str"");
  Set<Attribute> attributes=new HashSet<Attribute>();
  attributes.add(AttributeBuilder.build(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  attributes.add(AttributeBuilder.buildPassword(""String_Node_Str"".toCharArray()));
  task.setAttributes(attributes);
  task=taskDAO.save(task);
  assertNotNull(task);
  PropagationTask actual=taskDAO.find(task.getId());
  assertEquals(task,actual);
  taskDAO.flush();
  resource=resourceDAO.find(""String_Node_Str"");
  assertTrue(taskDAO.findAll(resource,PropagationTask.class).contains(task));
}"
60787,"@Test public void create(){
  ConnInstanceTO connectorTO=new ConnInstanceTO();
  connectorTO.setVersion(connidSoapVersion);
  connectorTO.setConnectorName(WebServiceConnector.class.getName());
  connectorTO.setBundleName(""String_Node_Str"");
  connectorTO.setDisplayName(""String_Node_Str"");
  Set<ConnConfProperty> conf=new HashSet<ConnConfProperty>();
  ConnConfPropSchema endpointSchema=new ConnConfPropSchema();
  endpointSchema.setName(""String_Node_Str"");
  endpointSchema.setType(String.class.getName());
  endpointSchema.setRequired(true);
  ConnConfProperty endpoint=new ConnConfProperty();
  endpoint.setSchema(endpointSchema);
  endpoint.setValues(Collections.singletonList(""String_Node_Str""));
  ConnConfPropSchema servicenameSchema=new ConnConfPropSchema();
  servicenameSchema.setName(""String_Node_Str"");
  servicenameSchema.setType(String.class.getName());
  servicenameSchema.setRequired(true);
  ConnConfProperty servicename=new ConnConfProperty();
  servicename.setSchema(servicenameSchema);
  servicename.setValues(Collections.singletonList(""String_Node_Str""));
  conf.add(endpoint);
  conf.add(servicename);
  connectorTO.setConfiguration(conf);
  connectorTO.addCapability(ConnectorCapability.ASYNC_CREATE);
  connectorTO.addCapability(ConnectorCapability.SYNC_CREATE);
  connectorTO.addCapability(ConnectorCapability.ASYNC_UPDATE);
  ConnInstanceTO actual=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",connectorTO,ConnInstanceTO.class);
  assertNotNull(actual);
  assertEquals(actual.getBundleName(),connectorTO.getBundleName());
  assertEquals(actual.getConnectorName(),connectorTO.getConnectorName());
  assertEquals(actual.getVersion(),connectorTO.getVersion());
  assertEquals(""String_Node_Str"",actual.getDisplayName());
  assertEquals(connectorTO.getCapabilities(),actual.getCapabilities());
  Throwable t=null;
  connectorTO.setId(actual.getId());
  connectorTO.removeCapability(ConnectorCapability.ASYNC_UPDATE);
  actual=null;
  try {
    actual=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",connectorTO,ConnInstanceTO.class);
  }
 catch (  HttpStatusCodeException e) {
    LOG.error(""String_Node_Str"",e);
    t=e;
  }
  assertNull(t);
  assertNotNull(actual);
  assertEquals(connectorTO.getCapabilities(),actual.getCapabilities());
  try {
    restTemplate.delete(BASE_URL + ""String_Node_Str"",actual.getId().toString());
  }
 catch (  HttpStatusCodeException e) {
    LOG.error(""String_Node_Str"",e);
    t=e;
  }
  assertNull(t);
  try {
    restTemplate.getForObject(BASE_URL + ""String_Node_Str"",ConnInstanceTO.class,actual.getId().toString());
  }
 catch (  HttpStatusCodeException e) {
    assertEquals(e.getStatusCode(),HttpStatus.NOT_FOUND);
  }
}","@Test public void create(){
  ConnInstanceTO connectorTO=new ConnInstanceTO();
  connectorTO.setVersion(connidSoapVersion);
  connectorTO.setConnectorName(WebServiceConnector.class.getName());
  connectorTO.setBundleName(""String_Node_Str"");
  connectorTO.setDisplayName(""String_Node_Str"");
  Set<ConnConfProperty> conf=new HashSet<ConnConfProperty>();
  ConnConfPropSchema endpointSchema=new ConnConfPropSchema();
  endpointSchema.setName(""String_Node_Str"");
  endpointSchema.setType(String.class.getName());
  endpointSchema.setRequired(true);
  ConnConfProperty endpoint=new ConnConfProperty();
  endpoint.setSchema(endpointSchema);
  endpoint.setValues(Collections.singletonList(""String_Node_Str""));
  ConnConfPropSchema servicenameSchema=new ConnConfPropSchema();
  servicenameSchema.setName(""String_Node_Str"");
  servicenameSchema.setType(String.class.getName());
  servicenameSchema.setRequired(true);
  ConnConfProperty servicename=new ConnConfProperty();
  servicename.setSchema(servicenameSchema);
  servicename.setValues(Collections.singletonList(""String_Node_Str""));
  conf.add(endpoint);
  conf.add(servicename);
  connectorTO.setConfiguration(conf);
  connectorTO.addCapability(ConnectorCapability.TWO_PHASES_CREATE);
  connectorTO.addCapability(ConnectorCapability.ONE_PHASE_CREATE);
  connectorTO.addCapability(ConnectorCapability.TWO_PHASES_UPDATE);
  ConnInstanceTO actual=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",connectorTO,ConnInstanceTO.class);
  assertNotNull(actual);
  assertEquals(actual.getBundleName(),connectorTO.getBundleName());
  assertEquals(actual.getConnectorName(),connectorTO.getConnectorName());
  assertEquals(actual.getVersion(),connectorTO.getVersion());
  assertEquals(""String_Node_Str"",actual.getDisplayName());
  assertEquals(connectorTO.getCapabilities(),actual.getCapabilities());
  Throwable t=null;
  connectorTO.setId(actual.getId());
  connectorTO.removeCapability(ConnectorCapability.TWO_PHASES_UPDATE);
  actual=null;
  try {
    actual=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",connectorTO,ConnInstanceTO.class);
  }
 catch (  HttpStatusCodeException e) {
    LOG.error(""String_Node_Str"",e);
    t=e;
  }
  assertNull(t);
  assertNotNull(actual);
  assertEquals(connectorTO.getCapabilities(),actual.getCapabilities());
  try {
    restTemplate.delete(BASE_URL + ""String_Node_Str"",actual.getId().toString());
  }
 catch (  HttpStatusCodeException e) {
    LOG.error(""String_Node_Str"",e);
    t=e;
  }
  assertNull(t);
  try {
    restTemplate.getForObject(BASE_URL + ""String_Node_Str"",ConnInstanceTO.class,actual.getId().toString());
  }
 catch (  HttpStatusCodeException e) {
    assertEquals(e.getStatusCode(),HttpStatus.NOT_FOUND);
  }
}"
60788,"public UserTO(){
  super();
  memberships=new ArrayList<MembershipTO>();
}","public UserTO(){
  super();
  memberships=new ArrayList<MembershipTO>();
  propagationStatusMap=new HashMap<String,PropagationTaskExecStatus>();
}"
60789,"<T extends Task>List<T> findAll(int page,int itemsPerPage,Class<T> reference);",List<PropagationTask> findAll(SyncopeUser user);
60790,"@Override public <T extends Task>List<T> findAll(final int page,final int itemsPerPage,final Class<T> reference){
  final Query query=entityManager.createQuery(buildfindAllQuery(reference).toString());
  query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));
  if (itemsPerPage > 0) {
    query.setMaxResults(itemsPerPage);
  }
  return query.getResultList();
}","@Override public List<PropagationTask> findAll(final ExternalResource resource,final SyncopeUser user){
  StringBuilder queryString=buildfindAllQuery(PropagationTask.class);
  queryString.append(""String_Node_Str"").append(""String_Node_Str"");
  final Query query=entityManager.createQuery(queryString.toString());
  query.setParameter(""String_Node_Str"",user);
  query.setParameter(""String_Node_Str"",resource);
  return query.getResultList();
}"
60791,"@Override public void delete(final SyncopeUser user){
  for (  Membership membership : user.getMemberships()) {
    membership.setSyncopeUser(null);
    roleDAO.save(membership.getSyncopeRole());
    membership.setSyncopeRole(null);
    entityManager.remove(membership);
  }
  user.getMemberships().clear();
  entityManager.remove(user);
}","@Override public void delete(final SyncopeUser user){
  for (  Membership membership : user.getMemberships()) {
    membership.setSyncopeUser(null);
    roleDAO.save(membership.getSyncopeRole());
    membership.setSyncopeRole(null);
    entityManager.remove(membership);
  }
  user.getMemberships().clear();
  for (  PropagationTask task : taskDAO.findAll(user)) {
    task.setSyncopeUser(null);
  }
  entityManager.remove(user);
}"
60792,"@Override public boolean isValid(final PropagationTask object,final ConstraintValidatorContext context){
  boolean isValid;
  if (object == null) {
    isValid=true;
  }
 else {
    isValid=object.getPropagationMode() != null && object.getResourceOperationType() != null && !object.getAttributes().isEmpty() && object.getResource() != null;
    if (isValid) {
      List<TaskExec> executions=object.getExecs();
      for (      TaskExec execution : executions) {
        try {
          PropagationTaskExecStatus.valueOf(execution.getStatus());
        }
 catch (        IllegalArgumentException e) {
          LOG.error(""String_Node_Str"" + execution.getStatus() + ""String_Node_Str"",e);
          isValid=false;
        }
      }
    }
    if (!isValid) {
      context.disableDefaultConstraintViolation();
      context.buildConstraintViolationWithTemplate(EntityViolationType.InvalidPropagationTask.toString()).addConstraintViolation();
    }
  }
  return isValid;
}","@Override public boolean isValid(final PropagationTask object,final ConstraintValidatorContext context){
  boolean isValid;
  if (object == null) {
    isValid=true;
  }
 else {
    isValid=object.getPropagationMode() != null && object.getResourceOperationType() != null && !object.getAttributes().isEmpty() && object.getResource() != null && (PropagationOperation.DELETE == object.getResourceOperationType() || object.getSyncopeUser() != null);
    if (isValid) {
      List<TaskExec> executions=object.getExecs();
      for (      TaskExec execution : executions) {
        try {
          PropagationTaskExecStatus.valueOf(execution.getStatus());
        }
 catch (        IllegalArgumentException e) {
          LOG.error(""String_Node_Str"" + execution.getStatus() + ""String_Node_Str"",e);
          isValid=false;
        }
      }
    }
    if (!isValid) {
      context.disableDefaultConstraintViolation();
      context.buildConstraintViolationWithTemplate(EntityViolationType.InvalidPropagationTask.toString()).addConstraintViolation();
    }
  }
  return isValid;
}"
60793,"/** 
 * Implementation of the provisioning feature.
 * @param user user to be provisioned
 * @param password cleartext password to be provisioned
 * @param enable wether user must be enabled or not
 * @param propByRes operation to be performed per resource
 * @return list of propagation tasks created
 * @throws PropagationException if anything goes wrong
 */
protected List<PropagationTask> provision(final SyncopeUser user,final String password,final Boolean enable,final PropagationByResource propByRes) throws NotFoundException {
  LOG.debug(""String_Node_Str"",user,propByRes);
  propByRes.purge();
  LOG.debug(""String_Node_Str"",propByRes);
  List<PropagationTask> tasks=new ArrayList<PropagationTask>();
  List<ExternalResource> resources=resourceDAO.findAllByPriority();
  List<ExternalResource> resourcesByPriority;
  Map.Entry<String,Set<Attribute>> preparedAttrs;
  PropagationTask task;
  for (  PropagationOperation type : PropagationOperation.values()) {
    resourcesByPriority=new ArrayList<ExternalResource>();
    for (    ExternalResource resource : resources) {
      if (propByRes.get(type).contains(resource.getName())) {
        resourcesByPriority.add(resource);
      }
    }
    for (    ExternalResource resource : resourcesByPriority) {
      preparedAttrs=prepareAttributes(user,password,enable,resource);
      task=new PropagationTask();
      task.setResource(resource);
      task.setResourceOperationType(type);
      task.setPropagationMode(resource.getPropagationMode());
      task.setAccountId(preparedAttrs.getKey());
      task.setOldAccountId(propByRes.getOldAccountId(resource.getName()));
      task.setAttributes(preparedAttrs.getValue());
      tasks.add(task);
      LOG.debug(""String_Node_Str"",task);
    }
  }
  return tasks;
}","/** 
 * Implementation of the provisioning feature.
 * @param user user to be provisioned
 * @param password cleartext password to be provisioned
 * @param enable wether user must be enabled or not
 * @param propByRes operation to be performed per resource
 * @return list of propagation tasks created
 */
protected List<PropagationTask> provision(final SyncopeUser user,final String password,final Boolean enable,final PropagationByResource propByRes){
  LOG.debug(""String_Node_Str"",user,propByRes);
  propByRes.purge();
  LOG.debug(""String_Node_Str"",propByRes);
  List<PropagationTask> tasks=new ArrayList<PropagationTask>();
  for (  PropagationOperation type : PropagationOperation.values()) {
    List<ExternalResource> resourcesByPriority=new ArrayList<ExternalResource>();
    for (    ExternalResource resource : resourceDAO.findAllByPriority()) {
      if (propByRes.get(type).contains(resource.getName())) {
        resourcesByPriority.add(resource);
      }
    }
    for (    ExternalResource resource : resourcesByPriority) {
      Map.Entry<String,Set<Attribute>> preparedAttrs=prepareAttributes(user,password,enable,resource);
      PropagationTask task=new PropagationTask();
      task.setResource(resource);
      task.setSyncopeUser(user);
      task.setResourceOperationType(type);
      task.setPropagationMode(resource.getPropagationMode());
      task.setAccountId(preparedAttrs.getKey());
      task.setOldAccountId(propByRes.getOldAccountId(resource.getName()));
      task.setAttributes(preparedAttrs.getValue());
      tasks.add(task);
      LOG.debug(""String_Node_Str"",task);
    }
  }
  return tasks;
}"
60794,"public void fillTO(final AbstractAttributableTO abstractAttributableTO,final Collection<? extends AbstractAttr> attributes,final Collection<? extends AbstractDerAttr> derivedAttributes,final Collection<? extends AbstractVirAttr> virtualAttributes,final Collection<ExternalResource> resources){
  AttributeTO attributeTO;
  for (  AbstractAttr attribute : attributes) {
    attributeTO=new AttributeTO();
    attributeTO.setSchema(attribute.getSchema().getName());
    attributeTO.setValues(attribute.getValuesAsStrings());
    attributeTO.setReadonly(attribute.getSchema().isReadonly());
    abstractAttributableTO.addAttribute(attributeTO);
  }
  for (  AbstractDerAttr derivedAttribute : derivedAttributes) {
    attributeTO=new AttributeTO();
    attributeTO.setSchema(derivedAttribute.getDerivedSchema().getName());
    attributeTO.addValue(derivedAttribute.getValue(attributes));
    attributeTO.setReadonly(true);
    abstractAttributableTO.addDerivedAttribute(attributeTO);
  }
  for (  AbstractVirAttr virtualAttribute : virtualAttributes) {
    attributeTO=new AttributeTO();
    attributeTO.setSchema(virtualAttribute.getVirtualSchema().getName());
    attributeTO.setValues(virtualAttribute.getValues());
    attributeTO.setReadonly(false);
    abstractAttributableTO.addVirtualAttribute(attributeTO);
  }
  for (  ExternalResource resource : resources) {
    abstractAttributableTO.addResource(resource.getName());
  }
}","protected void fillTO(final AbstractAttributableTO abstractAttributableTO,final Collection<? extends AbstractAttr> attributes,final Collection<? extends AbstractDerAttr> derivedAttributes,final Collection<? extends AbstractVirAttr> virtualAttributes,final Collection<ExternalResource> resources){
  AttributeTO attributeTO;
  for (  AbstractAttr attribute : attributes) {
    attributeTO=new AttributeTO();
    attributeTO.setSchema(attribute.getSchema().getName());
    attributeTO.setValues(attribute.getValuesAsStrings());
    attributeTO.setReadonly(attribute.getSchema().isReadonly());
    abstractAttributableTO.addAttribute(attributeTO);
  }
  for (  AbstractDerAttr derivedAttribute : derivedAttributes) {
    attributeTO=new AttributeTO();
    attributeTO.setSchema(derivedAttribute.getDerivedSchema().getName());
    attributeTO.addValue(derivedAttribute.getValue(attributes));
    attributeTO.setReadonly(true);
    abstractAttributableTO.addDerivedAttribute(attributeTO);
  }
  for (  AbstractVirAttr virtualAttribute : virtualAttributes) {
    attributeTO=new AttributeTO();
    attributeTO.setSchema(virtualAttribute.getVirtualSchema().getName());
    attributeTO.setValues(virtualAttribute.getValues());
    attributeTO.setReadonly(false);
    abstractAttributableTO.addVirtualAttribute(attributeTO);
  }
  for (  ExternalResource resource : resources) {
    abstractAttributableTO.addResource(resource.getName());
  }
}"
60795,"public TaskTO getTaskTO(final Task task,final TaskUtil taskUtil){
  TaskTO taskTO=taskUtil.newTaskTO();
  BeanUtils.copyProperties(task,taskTO,IGNORE_TASK_PROPERTIES);
  List<TaskExec> executions=task.getExecs();
  for (  TaskExec execution : executions) {
    taskTO.addExecution(getTaskExecutionTO(execution));
  }
switch (taskUtil) {
case PROPAGATION:
    ((PropagationTaskTO)taskTO).setResource(((PropagationTask)task).getResource().getName());
  break;
case SCHED:
setExecTime((SchedTaskTO)taskTO);
break;
case SYNC:
setExecTime((SchedTaskTO)taskTO);
((SyncTaskTO)taskTO).setResource(((SyncTask)task).getResource().getName());
break;
case NOTIFICATION:
break;
default :
}
return taskTO;
}","public TaskTO getTaskTO(final Task task,final TaskUtil taskUtil){
  TaskTO taskTO=taskUtil.newTaskTO();
  BeanUtils.copyProperties(task,taskTO,IGNORE_TASK_PROPERTIES);
  List<TaskExec> executions=task.getExecs();
  for (  TaskExec execution : executions) {
    taskTO.addExecution(getTaskExecutionTO(execution));
  }
switch (taskUtil) {
case PROPAGATION:
    ((PropagationTaskTO)taskTO).setResource(((PropagationTask)task).getResource().getName());
  if (((PropagationTask)task).getSyncopeUser() != null) {
    ((PropagationTaskTO)taskTO).setUser(((PropagationTask)task).getSyncopeUser().getId());
  }
break;
case SCHED:
setExecTime((SchedTaskTO)taskTO);
break;
case SYNC:
setExecTime((SchedTaskTO)taskTO);
((SyncTaskTO)taskTO).setResource(((SyncTask)task).getResource().getName());
break;
case NOTIFICATION:
break;
default :
}
return taskTO;
}"
60796,"@Override protected void populateItem(final ListItem<ConnConfProperty> item){
  final ConnConfProperty property=item.getModelObject();
  final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
  item.add(label);
  final FieldPanel field;
  if (GUARDED_STRING.equals(property.getSchema().getType())) {
    field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
  }
 else {
    field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
    if (property.getSchema().isRequired()) {
      field.addRequiredLabel();
    }
  }
  item.add(field);
  final AjaxDropDownChoicePanel<Boolean> overridable=new AjaxDropDownChoicePanel<Boolean>(""String_Node_Str"",""String_Node_Str"",new PropertyModel(property,""String_Node_Str""),false);
  overridable.setChoiceRenderer(new OverridableRenderer());
  overridable.setChoices(Arrays.asList(new Boolean[]{ConnParameterType.NOT_OVERRIDABLE.getOverridable(),ConnParameterType.OVERRIDABLE.getOverridable()}));
  overridable.setStyleShet(""String_Node_Str"");
  overridable.addRequiredLabel();
  item.add(overridable);
  connectorTO.getConfiguration().add(property);
}","@Override protected void populateItem(final ListItem<ConnConfProperty> item){
  final ConnConfProperty property=item.getModelObject();
  final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
  item.add(label);
  final FieldPanel field;
  if (GUARDED_STRING.equals(property.getSchema().getType())) {
    field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
  }
 else {
    field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
    if (property.getSchema().isRequired()) {
      field.addRequiredLabel();
    }
  }
  item.add(field);
  final AjaxDropDownChoicePanel<Boolean> overridable=new AjaxDropDownChoicePanel<Boolean>(""String_Node_Str"",""String_Node_Str"",new PropertyModel(property,""String_Node_Str""),false);
  overridable.setChoiceRenderer(new OverridableRenderer());
  overridable.setChoices(Arrays.asList(new Boolean[]{ConnParameterType.NOT_OVERRIDABLE.getOverridable(),ConnParameterType.OVERRIDABLE.getOverridable()}));
  overridable.setStyleShet(""String_Node_Str"" + ""String_Node_Str"");
  overridable.addRequiredLabel();
  item.add(overridable);
  connectorTO.getConfiguration().add(property);
}"
60797,"@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  final ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
  connector.setBundleName(((ConnBundleTO)bundle.getModelObject()).getBundleName());
  if (!selectedCapabilities.isEmpty()) {
    connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
  }
 else {
    connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
  }
  try {
    if (createFlag) {
      restClient.create(connector);
    }
 else {
      restClient.update(connector);
    }
    ((Resources)callerPageRef.getPage()).setModalResult(true);
    window.close(target);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
    ((Resources)callerPageRef.getPage()).setModalResult(false);
    LOG.error(""String_Node_Str"" + connector);
  }
}","@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  final ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
  ConnBundleTO bundleTO=(ConnBundleTO)bundle.getModelObject();
  connector.setBundleName(bundleTO.getBundleName());
  if (!selectedCapabilities.isEmpty()) {
    connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
  }
 else {
    connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
  }
  try {
    if (createFlag) {
      restClient.create(connector);
    }
 else {
      restClient.update(connector);
    }
    ((Resources)callerPageRef.getPage()).setModalResult(true);
    window.close(target);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
    target.add(feedbackPanel);
    ((Resources)callerPageRef.getPage()).setModalResult(false);
    LOG.error(""String_Node_Str"" + connector);
  }
}"
60798,"public ConnectorModalPage(final PageReference callerPageRef,final ModalWindow window,final ConnInstanceTO connectorTO,final boolean createFlag){
  super();
  selectedCapabilities=new ArrayList(createFlag ? EnumSet.noneOf(ConnectorCapability.class) : connectorTO.getCapabilities());
  IModel<List<ConnConfProperty>> selectedBundleProperties=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      List<ConnConfProperty> result;
      if (createFlag) {
        connectorTO.setConnectorName(selectedBundleTO.getConnectorName());
        connectorTO.setVersion(selectedBundleTO.getVersion());
        result=new ArrayList<ConnConfProperty>();
        ConnConfProperty propertyTO;
        for (        ConnConfPropSchema key : selectedBundleTO.getProperties()) {
          propertyTO=new ConnConfProperty();
          propertyTO.setSchema(key);
          result.add(propertyTO);
        }
      }
 else {
        selectedBundleTO.setBundleName(connectorTO.getBundleName());
        selectedBundleTO.setVersion(connectorTO.getVersion());
        result=new ArrayList<ConnConfProperty>(connectorTO.getConfiguration());
      }
      return result;
    }
  }
;
  final AjaxTextFieldPanel connectorName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  connectorName.setOutputMarkupId(true);
  connectorName.setEnabled(false);
  final AjaxTextFieldPanel displayName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  displayName.addRequiredLabel();
  final AjaxTextFieldPanel version=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  version.setEnabled(false);
  final IModel<List<ConnBundleTO>> bundles=new LoadableDetachableModel<List<ConnBundleTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnBundleTO> load(){
      return restClient.getAllBundles();
    }
  }
;
  final AjaxDropDownChoicePanel<ConnBundleTO> bundle=new AjaxDropDownChoicePanel<ConnBundleTO>(""String_Node_Str"",""String_Node_Str"",new Model(null),false);
  bundle.setStyleShet(""String_Node_Str"");
  bundle.setChoices(bundles.getObject());
  bundle.setChoiceRenderer(new ChoiceRenderer<ConnBundleTO>(){
    private static final long serialVersionUID=-1945543182376191187L;
    @Override public Object getDisplayValue(    final ConnBundleTO object){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
    @Override public String getIdValue(    final ConnBundleTO object,    final int index){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
  }
);
  ((DropDownChoice)bundle.getField()).setNullValid(true);
  bundle.setRequired(true);
  bundle.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      connectorTO.setConfiguration(new HashSet<ConnConfProperty>());
      ((DropDownChoice)bundle.getField()).setNullValid(false);
      target.add(bundle.getField());
      target.add(propertiesContainer);
      target.add(connectorName);
      target.add(version);
    }
  }
);
  bundle.getField().setModel(new IModel<ConnBundleTO>(){
    private static final long serialVersionUID=-3736598995576061229L;
    @Override public ConnBundleTO getObject(){
      return selectedBundleTO;
    }
    @Override public void setObject(    final ConnBundleTO object){
      selectedBundleTO=object;
    }
    @Override public void detach(){
    }
  }
);
  bundle.addRequiredLabel();
  bundle.setEnabled(createFlag);
  final ListView<ConnConfProperty> propView=new ListView<ConnConfProperty>(""String_Node_Str"",selectedBundleProperties){
    private static final long serialVersionUID=9101744072914090143L;
    @Override protected void populateItem(    final ListItem<ConnConfProperty> item){
      final ConnConfProperty property=item.getModelObject();
      final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
      item.add(label);
      final FieldPanel field;
      if (GUARDED_STRING.equals(property.getSchema().getType())) {
        field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
      }
 else {
        field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
        if (property.getSchema().isRequired()) {
          field.addRequiredLabel();
        }
      }
      item.add(field);
      final AjaxDropDownChoicePanel<Boolean> overridable=new AjaxDropDownChoicePanel<Boolean>(""String_Node_Str"",""String_Node_Str"",new PropertyModel(property,""String_Node_Str""),false);
      overridable.setChoiceRenderer(new OverridableRenderer());
      overridable.setChoices(Arrays.asList(new Boolean[]{ConnParameterType.NOT_OVERRIDABLE.getOverridable(),ConnParameterType.OVERRIDABLE.getOverridable()}));
      overridable.setStyleShet(""String_Node_Str"");
      overridable.addRequiredLabel();
      item.add(overridable);
      connectorTO.getConfiguration().add(property);
    }
  }
;
  propertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  propertiesContainer.setOutputMarkupId(true);
  propertiesContainer.add(propView);
  Form connectorForm=new Form(""String_Node_Str"");
  connectorForm.setModel(new CompoundPropertyModel(connectorTO));
  connectorForm.add(propertiesContainer);
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
      connector.setBundleName(((ConnBundleTO)bundle.getModelObject()).getBundleName());
      if (!selectedCapabilities.isEmpty()) {
        connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
      }
 else {
        connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
      }
      try {
        if (createFlag) {
          restClient.create(connector);
        }
 else {
          restClient.update(connector);
        }
        ((Resources)callerPageRef.getPage()).setModalResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        ((Resources)callerPageRef.getPage()).setModalResult(false);
        LOG.error(""String_Node_Str"" + connector);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=createFlag ? xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"") : xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  connectorForm.add(connectorName);
  connectorForm.add(displayName);
  connectorForm.add(bundle);
  connectorForm.add(version);
  final IModel<List<ConnectorCapability>> capabilities=new LoadableDetachableModel<List<ConnectorCapability>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnectorCapability> load(){
      return Arrays.asList(ConnectorCapability.values());
    }
  }
;
  capabilitiesPalette=new CheckBoxMultipleChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),capabilities);
  connectorForm.add(capabilitiesPalette);
  connectorForm.add(submit);
  add(connectorForm);
}","public ConnectorModalPage(final PageReference callerPageRef,final ModalWindow window,final ConnInstanceTO connectorTO,final boolean createFlag){
  super();
  selectedCapabilities=new ArrayList(createFlag ? EnumSet.noneOf(ConnectorCapability.class) : connectorTO.getCapabilities());
  IModel<List<ConnConfProperty>> selectedBundleProperties=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      List<ConnConfProperty> result;
      if (createFlag) {
        connectorTO.setConnectorName(selectedBundleTO.getConnectorName());
        connectorTO.setVersion(selectedBundleTO.getVersion());
        result=new ArrayList<ConnConfProperty>();
        ConnConfProperty propertyTO;
        for (        ConnConfPropSchema key : selectedBundleTO.getProperties()) {
          propertyTO=new ConnConfProperty();
          propertyTO.setSchema(key);
          result.add(propertyTO);
        }
      }
 else {
        selectedBundleTO.setBundleName(connectorTO.getBundleName());
        selectedBundleTO.setVersion(connectorTO.getVersion());
        result=new ArrayList<ConnConfProperty>(connectorTO.getConfiguration());
      }
      return result;
    }
  }
;
  final AjaxTextFieldPanel connectorName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  connectorName.setOutputMarkupId(true);
  connectorName.setEnabled(false);
  final AjaxTextFieldPanel displayName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  displayName.addRequiredLabel();
  final AjaxTextFieldPanel version=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  version.setEnabled(false);
  final IModel<List<ConnBundleTO>> bundles=new LoadableDetachableModel<List<ConnBundleTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnBundleTO> load(){
      return restClient.getAllBundles();
    }
  }
;
  final AjaxDropDownChoicePanel<ConnBundleTO> bundle=new AjaxDropDownChoicePanel<ConnBundleTO>(""String_Node_Str"",""String_Node_Str"",new Model(null),false);
  bundle.setStyleShet(""String_Node_Str"");
  bundle.setChoices(bundles.getObject());
  bundle.setChoiceRenderer(new ChoiceRenderer<ConnBundleTO>(){
    private static final long serialVersionUID=-1945543182376191187L;
    @Override public Object getDisplayValue(    final ConnBundleTO object){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
    @Override public String getIdValue(    final ConnBundleTO object,    final int index){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
  }
);
  ((DropDownChoice)bundle.getField()).setNullValid(true);
  bundle.setRequired(true);
  bundle.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      connectorTO.setConfiguration(new HashSet<ConnConfProperty>());
      DropDownChoice bundleChoice=(DropDownChoice)bundle.getField();
      bundleChoice.setNullValid(false);
      target.add(bundle.getField());
      target.add(propertiesContainer);
      target.add(connectorName);
      target.add(version);
    }
  }
);
  bundle.getField().setModel(new IModel<ConnBundleTO>(){
    private static final long serialVersionUID=-3736598995576061229L;
    @Override public ConnBundleTO getObject(){
      return selectedBundleTO;
    }
    @Override public void setObject(    final ConnBundleTO object){
      selectedBundleTO=object;
    }
    @Override public void detach(){
    }
  }
);
  bundle.addRequiredLabel();
  bundle.setEnabled(createFlag);
  final ListView<ConnConfProperty> propView=new ListView<ConnConfProperty>(""String_Node_Str"",selectedBundleProperties){
    private static final long serialVersionUID=9101744072914090143L;
    @Override protected void populateItem(    final ListItem<ConnConfProperty> item){
      final ConnConfProperty property=item.getModelObject();
      final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
      item.add(label);
      final FieldPanel field;
      if (GUARDED_STRING.equals(property.getSchema().getType())) {
        field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
      }
 else {
        field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
        if (property.getSchema().isRequired()) {
          field.addRequiredLabel();
        }
      }
      item.add(field);
      final AjaxDropDownChoicePanel<Boolean> overridable=new AjaxDropDownChoicePanel<Boolean>(""String_Node_Str"",""String_Node_Str"",new PropertyModel(property,""String_Node_Str""),false);
      overridable.setChoiceRenderer(new OverridableRenderer());
      overridable.setChoices(Arrays.asList(new Boolean[]{ConnParameterType.NOT_OVERRIDABLE.getOverridable(),ConnParameterType.OVERRIDABLE.getOverridable()}));
      overridable.setStyleShet(""String_Node_Str"" + ""String_Node_Str"");
      overridable.addRequiredLabel();
      item.add(overridable);
      connectorTO.getConfiguration().add(property);
    }
  }
;
  propertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  propertiesContainer.setOutputMarkupId(true);
  propertiesContainer.add(propView);
  Form connectorForm=new Form(""String_Node_Str"");
  connectorForm.setModel(new CompoundPropertyModel(connectorTO));
  connectorForm.add(propertiesContainer);
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
      ConnBundleTO bundleTO=(ConnBundleTO)bundle.getModelObject();
      connector.setBundleName(bundleTO.getBundleName());
      if (!selectedCapabilities.isEmpty()) {
        connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
      }
 else {
        connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
      }
      try {
        if (createFlag) {
          restClient.create(connector);
        }
 else {
          restClient.update(connector);
        }
        ((Resources)callerPageRef.getPage()).setModalResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
        ((Resources)callerPageRef.getPage()).setModalResult(false);
        LOG.error(""String_Node_Str"" + connector);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=createFlag ? xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"") : xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  connectorForm.add(connectorName);
  connectorForm.add(displayName);
  connectorForm.add(bundle);
  connectorForm.add(version);
  final IModel<List<ConnectorCapability>> capabilities=new LoadableDetachableModel<List<ConnectorCapability>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnectorCapability> load(){
      return Arrays.asList(ConnectorCapability.values());
    }
  }
;
  capabilitiesPalette=new CheckBoxMultipleChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),capabilities);
  connectorForm.add(capabilitiesPalette);
  connectorForm.add(submit);
  add(connectorForm);
}"
60799,"@Override protected void onUpdate(final AjaxRequestTarget target){
  connectorTO.setConfiguration(new HashSet<ConnConfProperty>());
  ((DropDownChoice)bundle.getField()).setNullValid(false);
  target.add(bundle.getField());
  target.add(propertiesContainer);
  target.add(connectorName);
  target.add(version);
}","@Override protected void onUpdate(final AjaxRequestTarget target){
  connectorTO.setConfiguration(new HashSet<ConnConfProperty>());
  DropDownChoice bundleChoice=(DropDownChoice)bundle.getField();
  bundleChoice.setNullValid(false);
  target.add(bundle.getField());
  target.add(propertiesContainer);
  target.add(connectorName);
  target.add(version);
}"
60800,"@Override public void enforce(final AccountPolicySpec policy,final PolicyType type,final SyncopeUser user) throws AccountPolicyException, PolicyEnforceException {
  if (user.getUsername() == null) {
    throw new PolicyEnforceException(""String_Node_Str"");
  }
  if (policy == null) {
    throw new PolicyEnforceException(""String_Node_Str"");
  }
  if (policy.getMinLength() > 0 && policy.getMinLength() > user.getUsername().length()) {
    throw new AccountPolicyException(""String_Node_Str"");
  }
  if (policy.getMaxLength() > 0 && policy.getMaxLength() < user.getUsername().length()) {
    throw new AccountPolicyException(""String_Node_Str"");
  }
  for (  String word : policy.getWordsNotPermitted()) {
    if (user.getUsername().contains(word)) {
      throw new AccountPolicyException(""String_Node_Str"");
    }
  }
  if ((policy.isAllLowerCase() && !LCPATTERN.matcher(user.getUsername()).matches()) || (policy.isAllUpperCase() && !UCPATTERN.matcher(user.getUsername()).matches()) || !PATTERN.matcher(user.getUsername()).matches()) {
    throw new AccountPolicyException(""String_Node_Str"");
  }
  for (  String prefix : policy.getPrefixesNotPermitted()) {
    if (user.getUsername().startsWith(prefix)) {
      throw new AccountPolicyException(""String_Node_Str"");
    }
  }
  for (  String suffix : policy.getSuffixesNotPermitted()) {
    if (user.getUsername().endsWith(suffix)) {
      throw new AccountPolicyException(""String_Node_Str"");
    }
  }
  if (user.getFailedLogins() != null && policy.getPermittedLoginRetries() > 0 && user.getFailedLogins() > policy.getPermittedLoginRetries() && !user.getSuspended()) {
    try {
      LOG.debug(""String_Node_Str"",user.getId(),user.getUsername());
      user.setFailedLogins(user.getFailedLogins() - 1);
      final WorkflowResult<Long> updated=wfAdapter.suspend(user);
      if (policy.isPropagateSuspension()) {
        final List<PropagationTask> tasks=propagationManager.getUpdateTaskIds(updated.getResult(),null,null,null,Boolean.FALSE,null);
        propagationManager.execute(tasks);
      }
      if (LOG.isDebugEnabled()) {
        final UserTO savedTO=userDataBinder.getUserTO(updated.getResult());
        LOG.debug(""String_Node_Str"",savedTO);
      }
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
}","@Override public void enforce(final AccountPolicySpec policy,final PolicyType type,final SyncopeUser user) throws AccountPolicyException, PolicyEnforceException {
  if (user.getUsername() == null) {
    throw new PolicyEnforceException(""String_Node_Str"");
  }
  if (policy == null) {
    throw new PolicyEnforceException(""String_Node_Str"");
  }
  if (policy.getMinLength() > 0 && policy.getMinLength() > user.getUsername().length()) {
    throw new AccountPolicyException(""String_Node_Str"");
  }
  if (policy.getMaxLength() > 0 && policy.getMaxLength() < user.getUsername().length()) {
    throw new AccountPolicyException(""String_Node_Str"");
  }
  for (  String word : policy.getWordsNotPermitted()) {
    if (user.getUsername().contains(word)) {
      throw new AccountPolicyException(""String_Node_Str"");
    }
  }
  if ((policy.isAllLowerCase() && !LCPATTERN.matcher(user.getUsername()).matches()) || (policy.isAllUpperCase() && !UCPATTERN.matcher(user.getUsername()).matches()) || !PATTERN.matcher(user.getUsername()).matches()) {
    throw new AccountPolicyException(""String_Node_Str"");
  }
  for (  String prefix : policy.getPrefixesNotPermitted()) {
    if (user.getUsername().startsWith(prefix)) {
      throw new AccountPolicyException(""String_Node_Str"");
    }
  }
  for (  String suffix : policy.getSuffixesNotPermitted()) {
    if (user.getUsername().endsWith(suffix)) {
      throw new AccountPolicyException(""String_Node_Str"");
    }
  }
  if (user.getFailedLogins() != null && policy.getPermittedLoginRetries() > 0 && user.getFailedLogins() > policy.getPermittedLoginRetries() && !user.getSuspended()) {
    try {
      LOG.debug(""String_Node_Str"",user.getId(),user.getUsername());
      user.setFailedLogins(user.getFailedLogins() - 1);
      final WorkflowResult<Long> updated=wfAdapter.suspend(user);
      if (policy.isPropagateSuspension()) {
        final List<PropagationTask> tasks=propagationManager.getUpdateTaskIds(updated,Boolean.FALSE);
        propagationManager.execute(tasks);
      }
      if (LOG.isDebugEnabled()) {
        final UserTO savedTO=userDataBinder.getUserTO(updated.getResult());
        LOG.debug(""String_Node_Str"",savedTO);
      }
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
}"
60801,"/** 
 * Performs update on each resource associated to the user.
 * @param userId to be updated
 * @param password to be updated
 * @param vAttrsToBeRemoved virtual attributes to be removed
 * @param vAttrsToBeUpdated virtual attributes to be added
 * @param enable wether user must be enabled or not
 * @param propByRes operations to perform on each resource
 * @param syncResourceName name of external resource performing sync, hencenot to be considered for propagation
 * @return list of propagation tasks
 * @throws NotFoundException if userId is not found
 */
public List<PropagationTask> getUpdateTaskIds(final Long userId,final String password,final Set<String> vAttrsToBeRemoved,final Set<AttributeMod> vAttrsToBeUpdated,final Boolean enable,final PropagationByResource propByRes,final String syncResourceName) throws NotFoundException {
  SyncopeUser user=getSyncopeUser(userId);
  Set<String> vAttrsToRemove=vAttrsToBeRemoved == null ? Collections.EMPTY_SET : vAttrsToBeRemoved;
  Set<AttributeMod> vAttrsToUpdate=vAttrsToBeUpdated == null ? Collections.EMPTY_SET : vAttrsToBeUpdated;
  PropagationByResource localPropByRes=userDataBinder.fillVirtual(user,vAttrsToRemove,vAttrsToUpdate,AttributableUtil.USER);
  if (propByRes != null && !propByRes.isEmpty()) {
    localPropByRes.merge(propByRes);
  }
 else {
    localPropByRes.addAll(PropagationOperation.UPDATE,user.getExternalResourceNames());
  }
  if (syncResourceName != null) {
    localPropByRes.get(PropagationOperation.CREATE).remove(syncResourceName);
    localPropByRes.get(PropagationOperation.UPDATE).remove(syncResourceName);
    localPropByRes.get(PropagationOperation.DELETE).remove(syncResourceName);
  }
  return provision(user,password,enable,localPropByRes);
}","/** 
 * Performs update on each resource associated to the user.
 * @param wfResult user to be propagated (and info associated), as perresult from workflow
 * @param password to be updated
 * @param vAttrsToBeRemoved virtual attributes to be removed
 * @param vAttrsToBeUpdated virtual attributes to be added
 * @param enable wether user must be enabled or not
 * @param syncResourceName name of external resource performing sync, hencenot to be considered for propagation
 * @return list of propagation tasks
 * @throws NotFoundException if userId is not found
 */
public List<PropagationTask> getUpdateTaskIds(final WorkflowResult<Long> wfResult,final String password,final Set<String> vAttrsToBeRemoved,final Set<AttributeMod> vAttrsToBeUpdated,final Boolean enable,final String syncResourceName) throws NotFoundException {
  SyncopeUser user=getSyncopeUser(wfResult.getResult());
  PropagationByResource localPropByRes=userDataBinder.fillVirtual(user,vAttrsToBeRemoved == null ? Collections.EMPTY_SET : vAttrsToBeRemoved,vAttrsToBeUpdated == null ? Collections.EMPTY_SET : vAttrsToBeUpdated,AttributableUtil.USER);
  if (wfResult.getPropByRes() != null && !wfResult.getPropByRes().isEmpty()) {
    localPropByRes.merge(wfResult.getPropByRes());
  }
 else {
    localPropByRes.addAll(PropagationOperation.UPDATE,user.getExternalResourceNames());
  }
  if (syncResourceName != null) {
    localPropByRes.get(PropagationOperation.CREATE).remove(syncResourceName);
    localPropByRes.get(PropagationOperation.UPDATE).remove(syncResourceName);
    localPropByRes.get(PropagationOperation.DELETE).remove(syncResourceName);
  }
  return provision(user,password,enable,localPropByRes);
}"
60802,"/** 
 * Create the user on every associated resource.
 * @param userId to be created
 * @param password to be set
 * @param vAttrs virtual attributes to be set
 * @param enable wether user must be enabled or not
 * @param syncResourceName name of external resource performing sync, hencenot to be considered for propagation
 * @return list of propagation tasks
 * @throws NotFoundException if userId is not found
 */
public List<PropagationTask> getCreateTaskIds(final Long userId,final String password,final List<AttributeTO> vAttrs,final Boolean enable,final String syncResourceName) throws NotFoundException {
  SyncopeUser user=getSyncopeUser(userId);
  if (vAttrs != null && !vAttrs.isEmpty()) {
    userDataBinder.fillVirtual(user,vAttrs,AttributableUtil.USER);
    user=userDAO.save(user);
  }
  final PropagationByResource propByRes=new PropagationByResource();
  propByRes.set(PropagationOperation.CREATE,user.getExternalResourceNames());
  if (syncResourceName != null) {
    propByRes.get(PropagationOperation.CREATE).remove(syncResourceName);
  }
  return provision(user,password,enable,propByRes);
}","/** 
 * Create the user on every associated resource.
 * @param wfResult user to be propagated (and info associated), as perresult from workflow
 * @param password to be set
 * @param vAttrs virtual attributes to be set
 * @param syncResourceName name of external resource performing sync, hencenot to be considered for propagation
 * @return list of propagation tasks
 * @throws NotFoundException if userId is not found
 */
public List<PropagationTask> getCreateTaskIds(final WorkflowResult<Map.Entry<Long,Boolean>> wfResult,final String password,final List<AttributeTO> vAttrs,final String syncResourceName) throws NotFoundException {
  SyncopeUser user=getSyncopeUser(wfResult.getResult().getKey());
  if (vAttrs != null && !vAttrs.isEmpty()) {
    userDataBinder.fillVirtual(user,vAttrs,AttributableUtil.USER);
    user=userDAO.save(user);
  }
  final PropagationByResource propByRes=wfResult.getPropByRes();
  if (propByRes == null || propByRes.isEmpty()) {
    return Collections.EMPTY_LIST;
  }
  if (syncResourceName != null) {
    propByRes.get(PropagationOperation.CREATE).remove(syncResourceName);
  }
  return provision(user,password,wfResult.getResult().getValue(),propByRes);
}"
60803,"@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public UserTO suspend(@PathVariable(""String_Node_Str"") final Long userId) throws NotFoundException, WorkflowException, UnauthorizedRoleException, PropagationException {
  LOG.debug(""String_Node_Str"" + userId);
  WorkflowResult<Long> updated=wfAdapter.suspend(userId);
  List<PropagationTask> tasks=propagationManager.getUpdateTaskIds(updated.getResult(),null,null,null,Boolean.FALSE,null);
  propagationManager.execute(tasks);
  notificationManager.createTasks(updated);
  final UserTO savedTO=dataBinder.getUserTO(updated.getResult());
  LOG.debug(""String_Node_Str"",savedTO);
  return savedTO;
}","@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public UserTO suspend(@PathVariable(""String_Node_Str"") final Long userId) throws NotFoundException, WorkflowException, UnauthorizedRoleException, PropagationException {
  LOG.debug(""String_Node_Str"" + userId);
  WorkflowResult<Long> updated=wfAdapter.suspend(userId);
  List<PropagationTask> tasks=propagationManager.getUpdateTaskIds(updated,Boolean.FALSE);
  propagationManager.execute(tasks);
  notificationManager.createTasks(updated);
  final UserTO savedTO=dataBinder.getUserTO(updated.getResult());
  LOG.debug(""String_Node_Str"",savedTO);
  return savedTO;
}"
60804,"@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public UserTO reactivate(final @PathVariable(""String_Node_Str"") Long userId) throws NotFoundException, WorkflowException, UnauthorizedRoleException, PropagationException {
  LOG.debug(""String_Node_Str"" + userId);
  WorkflowResult<Long> updated=wfAdapter.reactivate(userId);
  List<PropagationTask> tasks=propagationManager.getUpdateTaskIds(updated.getResult(),null,null,null,Boolean.TRUE,null);
  propagationManager.execute(tasks);
  notificationManager.createTasks(updated);
  final UserTO savedTO=dataBinder.getUserTO(updated.getResult());
  LOG.debug(""String_Node_Str"",savedTO);
  return savedTO;
}","@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public UserTO reactivate(final @PathVariable(""String_Node_Str"") Long userId) throws NotFoundException, WorkflowException, UnauthorizedRoleException, PropagationException {
  LOG.debug(""String_Node_Str"" + userId);
  WorkflowResult<Long> updated=wfAdapter.reactivate(userId);
  List<PropagationTask> tasks=propagationManager.getUpdateTaskIds(updated,Boolean.TRUE);
  propagationManager.execute(tasks);
  notificationManager.createTasks(updated);
  final UserTO savedTO=dataBinder.getUserTO(updated.getResult());
  LOG.debug(""String_Node_Str"",savedTO);
  return savedTO;
}"
60805,"@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO update(@RequestBody final UserMod userMod) throws NotFoundException, PropagationException, UnauthorizedRoleException, WorkflowException {
  LOG.debug(""String_Node_Str"",userMod);
  WorkflowResult<Map.Entry<Long,PropagationByResource>> updated=wfAdapter.update(userMod);
  List<PropagationTask> tasks=propagationManager.getUpdateTaskIds(updated.getResult().getKey(),userMod.getPassword(),userMod.getVirtualAttributesToBeRemoved(),userMod.getVirtualAttributesToBeUpdated(),null,updated.getResult().getValue());
  propagationManager.execute(tasks);
  notificationManager.createTasks(new WorkflowResult<Long>(updated.getResult().getKey(),updated.getPerformedTasks()));
  final UserTO updatedTO=dataBinder.getUserTO(updated.getResult().getKey());
  LOG.debug(""String_Node_Str"",updatedTO);
  return updatedTO;
}","@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO update(@RequestBody final UserMod userMod) throws NotFoundException, PropagationException, UnauthorizedRoleException, WorkflowException {
  LOG.debug(""String_Node_Str"",userMod);
  WorkflowResult<Long> updated=wfAdapter.update(userMod);
  List<PropagationTask> tasks=propagationManager.getUpdateTaskIds(updated,userMod.getPassword(),userMod.getVirtualAttributesToBeRemoved(),userMod.getVirtualAttributesToBeUpdated(),null);
  propagationManager.execute(tasks);
  notificationManager.createTasks(updated);
  final UserTO updatedTO=dataBinder.getUserTO(updated.getResult());
  LOG.debug(""String_Node_Str"",updatedTO);
  return updatedTO;
}"
60806,"@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.DELETE,value=""String_Node_Str"") public void delete(@PathVariable(""String_Node_Str"") final Long userId) throws NotFoundException, WorkflowException, PropagationException, UnauthorizedRoleException {
  LOG.debug(""String_Node_Str"",userId);
  notificationManager.createTasks(new WorkflowResult<Long>(userId,""String_Node_Str""));
  List<PropagationTask> tasks=propagationManager.getDeleteTaskIds(userId);
  propagationManager.execute(tasks);
  wfAdapter.delete(userId);
  LOG.debug(""String_Node_Str"",userId);
}","@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.DELETE,value=""String_Node_Str"") public void delete(@PathVariable(""String_Node_Str"") final Long userId) throws NotFoundException, WorkflowException, PropagationException, UnauthorizedRoleException {
  LOG.debug(""String_Node_Str"",userId);
  notificationManager.createTasks(new WorkflowResult<Long>(userId,null,""String_Node_Str""));
  List<PropagationTask> tasks=propagationManager.getDeleteTaskIds(userId);
  propagationManager.execute(tasks);
  wfAdapter.delete(userId);
  LOG.debug(""String_Node_Str"",userId);
}"
60807,"@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") @Transactional(rollbackFor={Throwable.class}) public UserTO submitForm(@RequestBody final WorkflowFormTO form) throws NotFoundException, WorkflowException, PropagationException, UnauthorizedRoleException {
  LOG.debug(""String_Node_Str"",form);
  Long updatedId=wfAdapter.submitForm(form,SecurityContextHolder.getContext().getAuthentication().getName());
  List<PropagationTask> tasks=propagationManager.getUpdateTaskIds(updatedId,null,null,null,Boolean.TRUE,null);
  propagationManager.execute(tasks);
  final UserTO savedTO=dataBinder.getUserTO(updatedId);
  LOG.debug(""String_Node_Str"",savedTO);
  return savedTO;
}","@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") @Transactional(rollbackFor={Throwable.class}) public UserTO submitForm(@RequestBody final WorkflowFormTO form) throws NotFoundException, WorkflowException, PropagationException, UnauthorizedRoleException {
  LOG.debug(""String_Node_Str"",form);
  WorkflowResult<Map.Entry<Long,String>> updated=wfAdapter.submitForm(form,SecurityContextHolder.getContext().getAuthentication().getName());
  List<PropagationTask> tasks=propagationManager.getUpdateTaskIds(new WorkflowResult<Long>(updated.getResult().getKey(),updated.getPropByRes(),updated.getPerformedTasks()),updated.getResult().getValue(),null,null,Boolean.TRUE);
  propagationManager.execute(tasks);
  final UserTO savedTO=dataBinder.getUserTO(updated.getResult().getKey());
  LOG.debug(""String_Node_Str"",savedTO);
  return savedTO;
}"
60808,"@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO activate(@RequestBody final UserTO userTO) throws WorkflowException, NotFoundException, UnauthorizedRoleException, PropagationException {
  WorkflowResult<Long> updated=wfAdapter.activate(userTO.getId(),userTO.getToken());
  List<PropagationTask> tasks=propagationManager.getUpdateTaskIds(updated.getResult(),null,null,null,Boolean.TRUE,null);
  propagationManager.execute(tasks);
  notificationManager.createTasks(updated);
  final UserTO savedTO=dataBinder.getUserTO(updated.getResult());
  LOG.debug(""String_Node_Str"",savedTO);
  return savedTO;
}","@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO activate(@RequestBody final UserTO userTO) throws WorkflowException, NotFoundException, UnauthorizedRoleException, PropagationException {
  WorkflowResult<Long> updated=wfAdapter.activate(userTO.getId(),userTO.getToken());
  List<PropagationTask> tasks=propagationManager.getUpdateTaskIds(updated,Boolean.TRUE);
  propagationManager.execute(tasks);
  notificationManager.createTasks(updated);
  final UserTO savedTO=dataBinder.getUserTO(updated.getResult());
  LOG.debug(""String_Node_Str"",savedTO);
  return savedTO;
}"
60809,"@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO create(final HttpServletResponse response,@RequestBody final UserTO userTO) throws PropagationException, UnauthorizedRoleException, WorkflowException, NotFoundException {
  LOG.debug(""String_Node_Str"",userTO);
  Set<Long> requestRoleIds=new HashSet<Long>(userTO.getMemberships().size());
  for (  MembershipTO membership : userTO.getMemberships()) {
    requestRoleIds.add(membership.getRoleId());
  }
  Set<Long> adminRoleIds=EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());
  requestRoleIds.removeAll(adminRoleIds);
  if (!requestRoleIds.isEmpty()) {
    throw new UnauthorizedRoleException(requestRoleIds);
  }
  WorkflowResult<Map.Entry<Long,Boolean>> created=wfAdapter.create(userTO);
  List<PropagationTask> tasks=propagationManager.getCreateTaskIds(created.getResult().getKey(),userTO.getPassword(),userTO.getVirtualAttributes(),created.getResult().getValue());
  propagationManager.execute(tasks);
  notificationManager.createTasks(new WorkflowResult<Long>(created.getResult().getKey(),created.getPerformedTasks()));
  final UserTO savedTO=dataBinder.getUserTO(created.getResult().getKey());
  LOG.debug(""String_Node_Str"",savedTO);
  response.setStatus(HttpServletResponse.SC_CREATED);
  return savedTO;
}","@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO create(final HttpServletResponse response,@RequestBody final UserTO userTO) throws PropagationException, UnauthorizedRoleException, WorkflowException, NotFoundException {
  LOG.debug(""String_Node_Str"",userTO);
  Set<Long> requestRoleIds=new HashSet<Long>(userTO.getMemberships().size());
  for (  MembershipTO membership : userTO.getMemberships()) {
    requestRoleIds.add(membership.getRoleId());
  }
  Set<Long> adminRoleIds=EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());
  requestRoleIds.removeAll(adminRoleIds);
  if (!requestRoleIds.isEmpty()) {
    throw new UnauthorizedRoleException(requestRoleIds);
  }
  WorkflowResult<Map.Entry<Long,Boolean>> created=wfAdapter.create(userTO);
  List<PropagationTask> tasks=propagationManager.getCreateTaskIds(created,userTO.getPassword(),userTO.getVirtualAttributes());
  propagationManager.execute(tasks);
  notificationManager.createTasks(new WorkflowResult<Long>(created.getResult().getKey(),created.getPropByRes(),created.getPerformedTasks()));
  final UserTO savedTO=dataBinder.getUserTO(created.getResult().getKey());
  LOG.debug(""String_Node_Str"",savedTO);
  response.setStatus(HttpServletResponse.SC_CREATED);
  return savedTO;
}"
60810,"@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO executeWorkflow(@RequestBody final UserTO userTO,@PathVariable(""String_Node_Str"") final String taskId) throws WorkflowException, NotFoundException, UnauthorizedRoleException, PropagationException {
  LOG.debug(""String_Node_Str"",taskId,userTO.getId());
  WorkflowResult<Long> updated=wfAdapter.execute(userTO,taskId);
  List<PropagationTask> tasks=propagationManager.getUpdateTaskIds(updated.getResult(),null,null,null,null,null);
  propagationManager.execute(tasks);
  notificationManager.createTasks(updated);
  final UserTO savedTO=dataBinder.getUserTO(updated.getResult());
  LOG.debug(""String_Node_Str"",savedTO);
  return savedTO;
}","@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.POST,value=""String_Node_Str"") public UserTO executeWorkflow(@RequestBody final UserTO userTO,@PathVariable(""String_Node_Str"") final String taskId) throws WorkflowException, NotFoundException, UnauthorizedRoleException, PropagationException {
  LOG.debug(""String_Node_Str"",taskId,userTO.getId());
  WorkflowResult<Long> updated=wfAdapter.execute(userTO,taskId);
  List<PropagationTask> tasks=propagationManager.getUpdateTaskIds(updated,null);
  propagationManager.execute(tasks);
  notificationManager.createTasks(updated);
  final UserTO savedTO=dataBinder.getUserTO(updated.getResult());
  LOG.debug(""String_Node_Str"",savedTO);
  return savedTO;
}"
60811,"private SyncResult createUser(final SyncDelta delta,final boolean dryRun) throws JobExecutionException {
  final SyncResult result=new SyncResult();
  result.setOperation(Operation.CREATE);
  UserTO userTO=getUserTO(delta.getObject());
  actions.beforeCreate(delta,userTO);
  if (dryRun) {
    result.setUserId(0L);
    result.setUsername(userTO.getUsername());
    result.setStatus(SyncResult.Status.SUCCESS);
  }
 else {
    try {
      WorkflowResult<Map.Entry<Long,Boolean>> created=wfAdapter.create(userTO,true);
      List<PropagationTask> tasks=propagationManager.getCreateTaskIds(created.getResult().getKey(),userTO.getPassword(),null,created.getResult().getValue(),((SyncTask)this.task).getResource().getName());
      propagationManager.execute(tasks);
      userTO=userDataBinder.getUserTO(created.getResult().getKey());
      result.setUserId(created.getResult().getKey());
      result.setUsername(userTO.getUsername());
      result.setStatus(SyncResult.Status.SUCCESS);
    }
 catch (    PropagationException e) {
      LOG.error(""String_Node_Str"" + delta.getUid().getUidValue(),e);
    }
catch (    Throwable t) {
      result.setStatus(SyncResult.Status.FAILURE);
      result.setMessage(t.getMessage());
      LOG.error(""String_Node_Str"" + delta.getUid().getUidValue(),t);
    }
  }
  actions.after(delta,userTO,result);
  return result;
}","private SyncResult createUser(final SyncDelta delta,final boolean dryRun) throws JobExecutionException {
  final SyncResult result=new SyncResult();
  result.setOperation(Operation.CREATE);
  UserTO userTO=getUserTO(delta.getObject());
  actions.beforeCreate(delta,userTO);
  if (dryRun) {
    result.setUserId(0L);
    result.setUsername(userTO.getUsername());
    result.setStatus(SyncResult.Status.SUCCESS);
  }
 else {
    try {
      WorkflowResult<Map.Entry<Long,Boolean>> created=wfAdapter.create(userTO,true);
      List<PropagationTask> tasks=propagationManager.getCreateTaskIds(created,userTO.getPassword(),null,((SyncTask)this.task).getResource().getName());
      propagationManager.execute(tasks);
      userTO=userDataBinder.getUserTO(created.getResult().getKey());
      result.setUserId(created.getResult().getKey());
      result.setUsername(userTO.getUsername());
      result.setStatus(SyncResult.Status.SUCCESS);
    }
 catch (    PropagationException e) {
      LOG.error(""String_Node_Str"" + delta.getUid().getUidValue(),e);
    }
catch (    Throwable t) {
      result.setStatus(SyncResult.Status.FAILURE);
      result.setMessage(t.getMessage());
      LOG.error(""String_Node_Str"" + delta.getUid().getUidValue(),t);
    }
  }
  actions.after(delta,userTO,result);
  return result;
}"
60812,"private void updateUsers(final SyncDelta delta,final List<Long> users,final boolean dryRun,final List<SyncResult> results) throws JobExecutionException {
  if (!((SyncTask)task).isPerformUpdate()) {
    LOG.debug(""String_Node_Str"");
    return;
  }
  LOG.debug(""String_Node_Str"",users);
  for (  Long userId : users) {
    final SyncResult result=new SyncResult();
    result.setOperation(Operation.UPDATE);
    try {
      UserTO userTO=userDataBinder.getUserTO(userId);
      try {
        final UserMod userMod=getUserMod(userId,delta.getObject());
        actions.beforeUpdate(delta,userTO,userMod);
        result.setStatus(SyncResult.Status.SUCCESS);
        result.setUserId(userMod.getId());
        result.setUsername(userMod.getUsername());
        if (!dryRun) {
          WorkflowResult<Map.Entry<Long,PropagationByResource>> updated=wfAdapter.update(userMod);
          List<PropagationTask> tasks=propagationManager.getUpdateTaskIds(updated.getResult().getKey(),userMod.getPassword(),null,null,null,updated.getResult().getValue(),((SyncTask)this.task).getResource().getName());
          propagationManager.execute(tasks);
          userTO=userDataBinder.getUserTO(updated.getResult().getKey());
        }
      }
 catch (      PropagationException e) {
        LOG.error(""String_Node_Str"" + delta.getUid().getUidValue(),e);
      }
catch (      Throwable t) {
        result.setStatus(SyncResult.Status.FAILURE);
        result.setMessage(t.getMessage());
        LOG.error(""String_Node_Str"" + delta.getUid().getUidValue(),t);
      }
      actions.after(delta,userTO,result);
      results.add(result);
    }
 catch (    NotFoundException e) {
      LOG.error(""String_Node_Str"",userId,e);
    }
catch (    UnauthorizedRoleException e) {
      LOG.error(""String_Node_Str"",userId,e);
    }
  }
}","private void updateUsers(final SyncDelta delta,final List<Long> users,final boolean dryRun,final List<SyncResult> results) throws JobExecutionException {
  if (!((SyncTask)task).isPerformUpdate()) {
    LOG.debug(""String_Node_Str"");
    return;
  }
  LOG.debug(""String_Node_Str"",users);
  for (  Long userId : users) {
    final SyncResult result=new SyncResult();
    result.setOperation(Operation.UPDATE);
    try {
      UserTO userTO=userDataBinder.getUserTO(userId);
      try {
        final UserMod userMod=getUserMod(userId,delta.getObject());
        actions.beforeUpdate(delta,userTO,userMod);
        result.setStatus(SyncResult.Status.SUCCESS);
        result.setUserId(userMod.getId());
        result.setUsername(userMod.getUsername());
        if (!dryRun) {
          WorkflowResult<Long> updated=wfAdapter.update(userMod);
          List<PropagationTask> tasks=propagationManager.getUpdateTaskIds(updated,userMod.getPassword(),null,null,null,((SyncTask)this.task).getResource().getName());
          propagationManager.execute(tasks);
          userTO=userDataBinder.getUserTO(updated.getResult());
        }
      }
 catch (      PropagationException e) {
        LOG.error(""String_Node_Str"" + delta.getUid().getUidValue(),e);
      }
catch (      Throwable t) {
        result.setStatus(SyncResult.Status.FAILURE);
        result.setMessage(t.getMessage());
        LOG.error(""String_Node_Str"" + delta.getUid().getUidValue(),t);
      }
      actions.after(delta,userTO,result);
      results.add(result);
    }
 catch (    NotFoundException e) {
      LOG.error(""String_Node_Str"",userId,e);
    }
catch (    UnauthorizedRoleException e) {
      LOG.error(""String_Node_Str"",userId,e);
    }
  }
}"
60813,"/** 
 * Execute a propagation task.
 * @param task to execute
 * @return TaskExecution
 */
public TaskExec execute(final PropagationTask task){
  final Date startDate=new Date();
  TaskExec execution=new TaskExec();
  execution.setStatus(PropagationTaskExecStatus.CREATED.name());
  String taskExecutionMessage=null;
  Set<String> propagationAttempted=new HashSet<String>();
  try {
    final ConnInstance connInstance=task.getResource().getConnector();
    final ConnectorFacadeProxy connector=connLoader.getConnector(task.getResource());
    if (connector == null) {
      final String msg=String.format(""String_Node_Str"" + ""String_Node_Str"",task.getResource(),connInstance);
      throw new NoSuchBeanDefinitionException(msg);
    }
    ConnectorObject remoteObject=null;
    try {
      remoteObject=connector.getObject(task.getPropagationMode(),task.getPropagationOperation(),ObjectClass.ACCOUNT,new Uid(task.getOldAccountId() == null ? task.getAccountId() : task.getOldAccountId()),null);
    }
 catch (    RuntimeException ignore) {
      LOG.debug(""String_Node_Str"" + ""String_Node_Str"",ignore);
    }
switch (task.getPropagationOperation()) {
case CREATE:
case UPDATE:
      final Set<Attribute> attributes=new HashSet<Attribute>(task.getAttributes());
    if (remoteObject != null) {
      final Name newName=(Name)AttributeUtil.find(Name.NAME,attributes);
      LOG.debug(""String_Node_Str"",newName);
      if (newName != null && newName.equals(remoteObject.getName())) {
        LOG.debug(""String_Node_Str"");
        attributes.remove(newName);
      }
      LOG.debug(""String_Node_Str"",attributes);
      connector.update(task.getPropagationMode(),ObjectClass.ACCOUNT,remoteObject.getUid(),attributes,null,propagationAttempted);
    }
 else {
      final String accountId=task.getAccountId();
      if (StringUtils.hasText(accountId)) {
        final Uid uid=(Uid)AttributeUtil.find(Uid.NAME,attributes);
        if (uid == null) {
          attributes.add(AttributeBuilder.build(Uid.NAME,Collections.singleton(accountId)));
        }
      }
      connector.create(task.getPropagationMode(),ObjectClass.ACCOUNT,attributes,null,propagationAttempted);
    }
  break;
case DELETE:
if (remoteObject == null) {
  LOG.debug(""String_Node_Str"" + ""String_Node_Str"",task.getAccountId());
}
 else {
  connector.delete(task.getPropagationMode(),ObjectClass.ACCOUNT,remoteObject.getUid(),null,propagationAttempted);
}
break;
default :
}
execution.setStatus(task.getPropagationMode() == PropagationMode.SYNC ? PropagationTaskExecStatus.SUCCESS.name() : PropagationTaskExecStatus.SUBMITTED.name());
LOG.debug(""String_Node_Str"",task.getResource());
}
 catch (Throwable t) {
LOG.error(""String_Node_Str"" + task.getResource().getName(),t);
if (t instanceof ConnectorException && t.getCause() != null) {
taskExecutionMessage=t.getCause().getMessage();
}
 else {
StringWriter exceptionWriter=new StringWriter();
exceptionWriter.write(t.getMessage() + ""String_Node_Str"");
t.printStackTrace(new PrintWriter(exceptionWriter));
taskExecutionMessage=exceptionWriter.toString();
}
try {
execution.setStatus(task.getPropagationMode() == PropagationMode.SYNC ? PropagationTaskExecStatus.FAILURE.name() : PropagationTaskExecStatus.UNSUBMITTED.name());
}
 catch (Throwable wft) {
LOG.error(""String_Node_Str"",execution,wft);
}
propagationAttempted.add(task.getPropagationOperation().name().toLowerCase());
}
 finally {
LOG.debug(""String_Node_Str"",task);
if (hasToBeregistered(task,execution)) {
PropagationTask savedTask=taskDAO.save(task);
execution.setStartDate(startDate);
execution.setMessage(taskExecutionMessage);
execution.setEndDate(new Date());
execution.setTask(savedTask);
if (!propagationAttempted.isEmpty()) {
execution=taskExecDAO.save(execution);
LOG.debug(""String_Node_Str"",execution);
}
 else {
LOG.debug(""String_Node_Str"",execution);
}
}
}
return execution;
}","/** 
 * Execute a propagation task.
 * @param task to execute
 * @return TaskExecution
 */
public TaskExec execute(final PropagationTask task){
  final Date startDate=new Date();
  TaskExec execution=new TaskExec();
  execution.setStatus(PropagationTaskExecStatus.CREATED.name());
  String taskExecutionMessage=null;
  Set<String> propagationAttempted=new HashSet<String>();
  try {
    final ConnInstance connInstance=task.getResource().getConnector();
    final ConnectorFacadeProxy connector=connLoader.getConnector(task.getResource());
    if (connector == null) {
      final String msg=String.format(""String_Node_Str"" + ""String_Node_Str"",task.getResource(),connInstance);
      throw new NoSuchBeanDefinitionException(msg);
    }
    ConnectorObject remoteObject=null;
    try {
      remoteObject=connector.getObject(task.getPropagationMode(),task.getPropagationOperation(),ObjectClass.ACCOUNT,new Uid(task.getOldAccountId() == null ? task.getAccountId() : task.getOldAccountId()),null);
    }
 catch (    RuntimeException ignore) {
      LOG.debug(""String_Node_Str"" + ""String_Node_Str"",ignore);
    }
switch (task.getPropagationOperation()) {
case CREATE:
case UPDATE:
      final Set<Attribute> attributes=new HashSet<Attribute>(task.getAttributes());
    if (remoteObject != null) {
      final Name newName=(Name)AttributeUtil.find(Name.NAME,attributes);
      LOG.debug(""String_Node_Str"",newName);
      if (newName != null && newName.equals(remoteObject.getName())) {
        LOG.debug(""String_Node_Str"");
        attributes.remove(newName);
      }
      LOG.debug(""String_Node_Str"",attributes);
      connector.update(task.getPropagationMode(),ObjectClass.ACCOUNT,remoteObject.getUid(),attributes,null,propagationAttempted);
    }
 else {
      final String accountId=task.getAccountId();
      final Name name=(Name)AttributeUtil.find(Name.NAME,attributes);
      if (StringUtils.hasText(accountId) && (name == null || !accountId.equals(name.getNameValue()))) {
        final Uid uid=(Uid)AttributeUtil.find(Uid.NAME,attributes);
        if (uid == null) {
          attributes.add(AttributeBuilder.build(Uid.NAME,Collections.singleton(accountId)));
        }
      }
      connector.create(task.getPropagationMode(),ObjectClass.ACCOUNT,attributes,null,propagationAttempted);
    }
  break;
case DELETE:
if (remoteObject == null) {
  LOG.debug(""String_Node_Str"" + ""String_Node_Str"",task.getAccountId());
}
 else {
  connector.delete(task.getPropagationMode(),ObjectClass.ACCOUNT,remoteObject.getUid(),null,propagationAttempted);
}
break;
default :
}
execution.setStatus(task.getPropagationMode() == PropagationMode.SYNC ? PropagationTaskExecStatus.SUCCESS.name() : PropagationTaskExecStatus.SUBMITTED.name());
LOG.debug(""String_Node_Str"",task.getResource());
}
 catch (Throwable t) {
LOG.error(""String_Node_Str"" + task.getResource().getName(),t);
if (t instanceof ConnectorException && t.getCause() != null) {
taskExecutionMessage=t.getCause().getMessage();
}
 else {
StringWriter exceptionWriter=new StringWriter();
exceptionWriter.write(t.getMessage() + ""String_Node_Str"");
t.printStackTrace(new PrintWriter(exceptionWriter));
taskExecutionMessage=exceptionWriter.toString();
}
try {
execution.setStatus(task.getPropagationMode() == PropagationMode.SYNC ? PropagationTaskExecStatus.FAILURE.name() : PropagationTaskExecStatus.UNSUBMITTED.name());
}
 catch (Throwable wft) {
LOG.error(""String_Node_Str"",execution,wft);
}
propagationAttempted.add(task.getPropagationOperation().name().toLowerCase());
}
 finally {
LOG.debug(""String_Node_Str"",task);
if (hasToBeregistered(task,execution)) {
PropagationTask savedTask=taskDAO.save(task);
execution.setStartDate(startDate);
execution.setMessage(taskExecutionMessage);
execution.setEndDate(new Date());
execution.setTask(savedTask);
if (!propagationAttempted.isEmpty()) {
execution=taskExecDAO.save(execution);
LOG.debug(""String_Node_Str"",execution);
}
 else {
LOG.debug(""String_Node_Str"",execution);
}
}
}
return execution;
}"
60814,"public AbstractAttributableMod(){
  super();
  attributesToBeUpdated=new HashSet<AttributeMod>();
  attributesToBeRemoved=new HashSet<String>();
  derivedAttributesToBeAdded=new HashSet<String>();
  derivedAttributesToBeRemoved=new HashSet<String>();
  virtualAttributesToBeAdded=new HashSet<String>();
  virtualAttributesToBeRemoved=new HashSet<String>();
  resourcesToBeAdded=new HashSet<String>();
  resourcesToBeRemoved=new HashSet<String>();
}","public AbstractAttributableMod(){
  super();
  attributesToBeUpdated=new HashSet<AttributeMod>();
  attributesToBeRemoved=new HashSet<String>();
  derivedAttributesToBeAdded=new HashSet<String>();
  derivedAttributesToBeRemoved=new HashSet<String>();
  virtualAttributesToBeUpdated=new HashSet<AttributeMod>();
  virtualAttributesToBeRemoved=new HashSet<String>();
  resourcesToBeAdded=new HashSet<String>();
  resourcesToBeRemoved=new HashSet<String>();
}"
60815,"public boolean addVirtualAttributeToBeRemoved(String virtualAttribute){
  return virtualAttributesToBeRemoved.add(virtualAttribute);
}","public boolean addVirtualAttributeToBeRemoved(String virtualAttributeToBeRemoved){
  return virtualAttributesToBeRemoved.add(virtualAttributeToBeRemoved);
}"
60816,"@JsonIgnore public Map<String,List<String>> getVirtualAttributeMap(){
  Map<String,List<String>> result=new HashMap<String,List<String>>(virtualAttributes.size());
  for (  AttributeTO attributeTO : virtualAttributes) {
    result.put(attributeTO.getSchema(),attributeTO.getValues());
  }
  return result;
}","@JsonIgnore public Map<String,AttributeTO> getVirtualAttributeMap(){
  Map<String,AttributeTO> result=new HashMap<String,AttributeTO>(virtualAttributes.size());
  for (  AttributeTO attributeTO : virtualAttributes) {
    result.put(attributeTO.getSchema(),attributeTO);
  }
  return result;
}"
60817,"@JsonIgnore public Map<String,List<String>> getAttributeMap(){
  Map<String,List<String>> result=new HashMap<String,List<String>>(attributes.size());
  for (  AttributeTO attributeTO : attributes) {
    result.put(attributeTO.getSchema(),attributeTO.getValues());
  }
  return result;
}","@JsonIgnore public Map<String,AttributeTO> getAttributeMap(){
  Map<String,AttributeTO> result=new HashMap<String,AttributeTO>(attributes.size());
  for (  AttributeTO attributeTO : attributes) {
    result.put(attributeTO.getSchema(),attributeTO);
  }
  return result;
}"
60818,"@JsonIgnore public Map<String,List<String>> getDerivedAttributeMap(){
  Map<String,List<String>> result=new HashMap<String,List<String>>(derivedAttributes.size());
  for (  AttributeTO attributeTO : derivedAttributes) {
    result.put(attributeTO.getSchema(),attributeTO.getValues());
  }
  return result;
}","@JsonIgnore public Map<String,AttributeTO> getDerivedAttributeMap(){
  Map<String,AttributeTO> result=new HashMap<String,AttributeTO>(derivedAttributes.size());
  for (  AttributeTO attributeTO : derivedAttributes) {
    result.put(attributeTO.getSchema(),attributeTO);
  }
  return result;
}"
60819,"@Override protected void populateItem(final ListItem<ConnConfProperty> item){
  final ConnConfProperty property=item.getModelObject();
  final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
  item.add(label);
  final FieldPanel field;
  if (GUARDED_STRING.equals(property.getSchema().getType())) {
    field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
  }
 else {
    field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
    if (property.getSchema().isRequired()) {
      field.addRequiredLabel();
    }
  }
  item.add(field);
  item.add(new AjaxCheckBoxPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<Boolean>(property,""String_Node_Str""),true).setTitle(""String_Node_Str""));
  connectorTO.getConfiguration().add(property);
}","@Override protected void populateItem(final ListItem<ConnConfProperty> item){
  final ConnConfProperty property=item.getModelObject();
  final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
  item.add(label);
  final FieldPanel field;
  if (GUARDED_STRING.equals(property.getSchema().getType())) {
    field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
  }
 else {
    field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
    if (property.getSchema().isRequired()) {
      field.addRequiredLabel();
    }
  }
  item.add(field);
  final AjaxDropDownChoicePanel<Boolean> overridable=new AjaxDropDownChoicePanel<Boolean>(""String_Node_Str"",""String_Node_Str"",new PropertyModel(property,""String_Node_Str""),false);
  overridable.setChoiceRenderer(new OverridableRenderer());
  overridable.setChoices(Arrays.asList(new Boolean[]{ConnParameterType.NOT_OVERRIDABLE.getOverridable(),ConnParameterType.OVERRIDABLE.getOverridable()}));
  overridable.setStyleShet(""String_Node_Str"");
  overridable.addRequiredLabel();
  item.add(overridable);
  connectorTO.getConfiguration().add(property);
}"
60820,"public ConnectorModalPage(final PageReference callerPageRef,final ModalWindow window,final ConnInstanceTO connectorTO,final boolean createFlag){
  super();
  selectedCapabilities=new ArrayList(createFlag ? EnumSet.noneOf(ConnectorCapability.class) : connectorTO.getCapabilities());
  IModel<List<ConnConfProperty>> selectedBundleProperties=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      List<ConnConfProperty> result;
      if (createFlag) {
        connectorTO.setConnectorName(selectedBundleTO.getConnectorName());
        connectorTO.setVersion(selectedBundleTO.getVersion());
        result=new ArrayList<ConnConfProperty>();
        ConnConfProperty propertyTO;
        for (        ConnConfPropSchema key : selectedBundleTO.getProperties()) {
          propertyTO=new ConnConfProperty();
          propertyTO.setSchema(key);
          result.add(propertyTO);
        }
      }
 else {
        selectedBundleTO.setBundleName(connectorTO.getBundleName());
        selectedBundleTO.setVersion(connectorTO.getVersion());
        result=new ArrayList<ConnConfProperty>(connectorTO.getConfiguration());
      }
      return result;
    }
  }
;
  final AjaxTextFieldPanel connectorName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  connectorName.setOutputMarkupId(true);
  connectorName.setEnabled(false);
  final AjaxTextFieldPanel displayName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  displayName.addRequiredLabel();
  final AjaxTextFieldPanel version=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  version.setEnabled(false);
  final IModel<List<ConnBundleTO>> bundles=new LoadableDetachableModel<List<ConnBundleTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnBundleTO> load(){
      return restClient.getAllBundles();
    }
  }
;
  final AjaxDropDownChoicePanel<ConnBundleTO> bundle=new AjaxDropDownChoicePanel<ConnBundleTO>(""String_Node_Str"",""String_Node_Str"",new Model(null),false);
  bundle.setStyleShet(""String_Node_Str"");
  bundle.setChoices(bundles.getObject());
  bundle.setChoiceRenderer(new ChoiceRenderer<ConnBundleTO>(){
    private static final long serialVersionUID=-1945543182376191187L;
    @Override public Object getDisplayValue(    final ConnBundleTO object){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
    @Override public String getIdValue(    final ConnBundleTO object,    final int index){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
  }
);
  ((DropDownChoice)bundle.getField()).setNullValid(true);
  bundle.setRequired(true);
  bundle.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      connectorTO.setConfiguration(new HashSet<ConnConfProperty>());
      ((DropDownChoice)bundle.getField()).setNullValid(false);
      target.add(bundle.getField());
      target.add(propertiesContainer);
      target.add(connectorName);
      target.add(version);
    }
  }
);
  bundle.getField().setModel(new IModel<ConnBundleTO>(){
    private static final long serialVersionUID=-3736598995576061229L;
    @Override public ConnBundleTO getObject(){
      return selectedBundleTO;
    }
    @Override public void setObject(    final ConnBundleTO object){
      selectedBundleTO=object;
    }
    @Override public void detach(){
    }
  }
);
  bundle.addRequiredLabel();
  bundle.setEnabled(createFlag);
  final ListView<ConnConfProperty> propView=new ListView<ConnConfProperty>(""String_Node_Str"",selectedBundleProperties){
    private static final long serialVersionUID=9101744072914090143L;
    @Override protected void populateItem(    final ListItem<ConnConfProperty> item){
      final ConnConfProperty property=item.getModelObject();
      final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
      item.add(label);
      final FieldPanel field;
      if (GUARDED_STRING.equals(property.getSchema().getType())) {
        field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
      }
 else {
        field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
        if (property.getSchema().isRequired()) {
          field.addRequiredLabel();
        }
      }
      item.add(field);
      item.add(new AjaxCheckBoxPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<Boolean>(property,""String_Node_Str""),true).setTitle(""String_Node_Str""));
      connectorTO.getConfiguration().add(property);
    }
  }
;
  propertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  propertiesContainer.setOutputMarkupId(true);
  propertiesContainer.add(propView);
  Form connectorForm=new Form(""String_Node_Str"");
  connectorForm.setModel(new CompoundPropertyModel(connectorTO));
  connectorForm.add(propertiesContainer);
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
      connector.setBundleName(((ConnBundleTO)bundle.getModelObject()).getBundleName());
      if (!selectedCapabilities.isEmpty()) {
        connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
      }
 else {
        connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
      }
      try {
        if (createFlag) {
          restClient.create(connector);
        }
 else {
          restClient.update(connector);
        }
        ((Resources)callerPageRef.getPage()).setModalResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        ((Resources)callerPageRef.getPage()).setModalResult(false);
        LOG.error(""String_Node_Str"" + connector);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=createFlag ? xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"") : xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  connectorForm.add(connectorName);
  connectorForm.add(displayName);
  connectorForm.add(bundle);
  connectorForm.add(version);
  final IModel<List<ConnectorCapability>> capabilities=new LoadableDetachableModel<List<ConnectorCapability>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnectorCapability> load(){
      return Arrays.asList(ConnectorCapability.values());
    }
  }
;
  capabilitiesPalette=new CheckBoxMultipleChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),capabilities);
  connectorForm.add(capabilitiesPalette);
  connectorForm.add(submit);
  add(connectorForm);
}","public ConnectorModalPage(final PageReference callerPageRef,final ModalWindow window,final ConnInstanceTO connectorTO,final boolean createFlag){
  super();
  selectedCapabilities=new ArrayList(createFlag ? EnumSet.noneOf(ConnectorCapability.class) : connectorTO.getCapabilities());
  IModel<List<ConnConfProperty>> selectedBundleProperties=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      List<ConnConfProperty> result;
      if (createFlag) {
        connectorTO.setConnectorName(selectedBundleTO.getConnectorName());
        connectorTO.setVersion(selectedBundleTO.getVersion());
        result=new ArrayList<ConnConfProperty>();
        ConnConfProperty propertyTO;
        for (        ConnConfPropSchema key : selectedBundleTO.getProperties()) {
          propertyTO=new ConnConfProperty();
          propertyTO.setSchema(key);
          result.add(propertyTO);
        }
      }
 else {
        selectedBundleTO.setBundleName(connectorTO.getBundleName());
        selectedBundleTO.setVersion(connectorTO.getVersion());
        result=new ArrayList<ConnConfProperty>(connectorTO.getConfiguration());
      }
      return result;
    }
  }
;
  final AjaxTextFieldPanel connectorName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  connectorName.setOutputMarkupId(true);
  connectorName.setEnabled(false);
  final AjaxTextFieldPanel displayName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  displayName.addRequiredLabel();
  final AjaxTextFieldPanel version=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  version.setEnabled(false);
  final IModel<List<ConnBundleTO>> bundles=new LoadableDetachableModel<List<ConnBundleTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnBundleTO> load(){
      return restClient.getAllBundles();
    }
  }
;
  final AjaxDropDownChoicePanel<ConnBundleTO> bundle=new AjaxDropDownChoicePanel<ConnBundleTO>(""String_Node_Str"",""String_Node_Str"",new Model(null),false);
  bundle.setStyleShet(""String_Node_Str"");
  bundle.setChoices(bundles.getObject());
  bundle.setChoiceRenderer(new ChoiceRenderer<ConnBundleTO>(){
    private static final long serialVersionUID=-1945543182376191187L;
    @Override public Object getDisplayValue(    final ConnBundleTO object){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
    @Override public String getIdValue(    final ConnBundleTO object,    final int index){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
  }
);
  ((DropDownChoice)bundle.getField()).setNullValid(true);
  bundle.setRequired(true);
  bundle.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      connectorTO.setConfiguration(new HashSet<ConnConfProperty>());
      ((DropDownChoice)bundle.getField()).setNullValid(false);
      target.add(bundle.getField());
      target.add(propertiesContainer);
      target.add(connectorName);
      target.add(version);
    }
  }
);
  bundle.getField().setModel(new IModel<ConnBundleTO>(){
    private static final long serialVersionUID=-3736598995576061229L;
    @Override public ConnBundleTO getObject(){
      return selectedBundleTO;
    }
    @Override public void setObject(    final ConnBundleTO object){
      selectedBundleTO=object;
    }
    @Override public void detach(){
    }
  }
);
  bundle.addRequiredLabel();
  bundle.setEnabled(createFlag);
  final ListView<ConnConfProperty> propView=new ListView<ConnConfProperty>(""String_Node_Str"",selectedBundleProperties){
    private static final long serialVersionUID=9101744072914090143L;
    @Override protected void populateItem(    final ListItem<ConnConfProperty> item){
      final ConnConfProperty property=item.getModelObject();
      final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
      item.add(label);
      final FieldPanel field;
      if (GUARDED_STRING.equals(property.getSchema().getType())) {
        field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
      }
 else {
        field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
        if (property.getSchema().isRequired()) {
          field.addRequiredLabel();
        }
      }
      item.add(field);
      final AjaxDropDownChoicePanel<Boolean> overridable=new AjaxDropDownChoicePanel<Boolean>(""String_Node_Str"",""String_Node_Str"",new PropertyModel(property,""String_Node_Str""),false);
      overridable.setChoiceRenderer(new OverridableRenderer());
      overridable.setChoices(Arrays.asList(new Boolean[]{ConnParameterType.NOT_OVERRIDABLE.getOverridable(),ConnParameterType.OVERRIDABLE.getOverridable()}));
      overridable.setStyleShet(""String_Node_Str"");
      overridable.addRequiredLabel();
      item.add(overridable);
      connectorTO.getConfiguration().add(property);
    }
  }
;
  propertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  propertiesContainer.setOutputMarkupId(true);
  propertiesContainer.add(propView);
  Form connectorForm=new Form(""String_Node_Str"");
  connectorForm.setModel(new CompoundPropertyModel(connectorTO));
  connectorForm.add(propertiesContainer);
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
      connector.setBundleName(((ConnBundleTO)bundle.getModelObject()).getBundleName());
      if (!selectedCapabilities.isEmpty()) {
        connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
      }
 else {
        connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
      }
      try {
        if (createFlag) {
          restClient.create(connector);
        }
 else {
          restClient.update(connector);
        }
        ((Resources)callerPageRef.getPage()).setModalResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        ((Resources)callerPageRef.getPage()).setModalResult(false);
        LOG.error(""String_Node_Str"" + connector);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=createFlag ? xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"") : xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  connectorForm.add(connectorName);
  connectorForm.add(displayName);
  connectorForm.add(bundle);
  connectorForm.add(version);
  final IModel<List<ConnectorCapability>> capabilities=new LoadableDetachableModel<List<ConnectorCapability>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnectorCapability> load(){
      return Arrays.asList(ConnectorCapability.values());
    }
  }
;
  capabilitiesPalette=new CheckBoxMultipleChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),capabilities);
  connectorForm.add(capabilitiesPalette);
  connectorForm.add(submit);
  add(connectorForm);
}"
60821,"@Override public Object getDisplayValue(final ConnBundleTO object){
  return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
}","@Override public Object getDisplayValue(Boolean object){
  return object ? ConnParameterType.OVERRIDABLE.toString() : ConnParameterType.NOT_OVERRIDABLE.toString();
}"
60822,"@Override public String getIdValue(final ConnBundleTO object,final int index){
  return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
}","@Override public String getIdValue(Boolean object,int index){
  return String.valueOf(object);
}"
60823,"@Override public void populateItem(final Item<ICellPopulator<UserTO>> cellItem,final String componentId,final IModel<UserTO> rowModel){
  final List<String> values;
switch (schemaType) {
case schema:
    values=rowModel.getObject().getAttributeMap().get(name).getValues();
  break;
case virtualSchema:
values=rowModel.getObject().getVirtualAttributeMap().get(name).getValues();
break;
case derivedSchema:
values=rowModel.getObject().getDerivedAttributeMap().get(name).getValues();
break;
default :
values=null;
}
if (values == null || values.isEmpty()) {
cellItem.add(new Label(componentId,""String_Node_Str""));
}
 else {
if (values.size() == 1) {
cellItem.add(new Label(componentId,values.iterator().next()));
}
 else {
cellItem.add(new Label(componentId,values.toString()));
}
}
}","@Override public void populateItem(final Item<ICellPopulator<UserTO>> cellItem,final String componentId,final IModel<UserTO> rowModel){
  List<String> values=null;
switch (schemaType) {
case schema:
    if (rowModel.getObject().getAttributeMap().containsKey(name)) {
      values=rowModel.getObject().getAttributeMap().get(name).getValues();
    }
  break;
case virtualSchema:
if (rowModel.getObject().getVirtualAttributeMap().containsKey(name)) {
  values=rowModel.getObject().getVirtualAttributeMap().get(name).getValues();
}
break;
case derivedSchema:
if (rowModel.getObject().getDerivedAttributeMap().containsKey(name)) {
values=rowModel.getObject().getDerivedAttributeMap().get(name).getValues();
}
break;
default :
}
if (values == null || values.isEmpty()) {
cellItem.add(new Label(componentId,""String_Node_Str""));
}
 else {
if (values.size() == 1) {
cellItem.add(new Label(componentId,values.get(0)));
}
 else {
cellItem.add(new Label(componentId,values.toString()));
}
}
}"
60824,"public final boolean checkValidity(){
  if (type == null) {
    return false;
  }
switch (type) {
case LEAF:
case NOT_LEAF:
    return (attributeCond != null && membershipCond == null && resourceCond == null && attributeCond.checkValidity()) || (attributeCond == null && membershipCond != null && resourceCond == null && membershipCond.checkValidity()) || (attributeCond == null && membershipCond == null && resourceCond != null && resourceCond.checkValidity());
case AND:
case OR:
  return (leftNodeCond == null || rightNodeCond == null) ? false : leftNodeCond.checkValidity() && rightNodeCond.checkValidity();
default :
return false;
}
}","public final boolean checkValidity(){
  if (type == null) {
    return false;
  }
switch (type) {
case LEAF:
case NOT_LEAF:
    return (syncopeUserCond != null && attributeCond == null && membershipCond == null && resourceCond == null && syncopeUserCond.checkValidity()) || (syncopeUserCond == null && attributeCond != null && membershipCond == null && resourceCond == null && attributeCond.checkValidity()) || (syncopeUserCond == null && attributeCond == null && membershipCond != null && resourceCond == null && membershipCond.checkValidity())|| (syncopeUserCond == null && attributeCond == null && membershipCond == null && resourceCond != null && resourceCond.checkValidity());
case AND:
case OR:
  return (leftNodeCond == null || rightNodeCond == null) ? false : leftNodeCond.checkValidity() && rightNodeCond.checkValidity();
default :
return false;
}
}"
60825,"public void setResourceCond(ResourceCond resourceCond){
  this.resourceCond=resourceCond;
}","public void setResourceCond(final ResourceCond resourceCond){
  this.resourceCond=resourceCond;
}"
60826,"public void set(final Request request,final Response response,final String key,final String value){
  Cookie prefCookie=((WebRequest)request).getCookie(Constants.PREFS_COOKIE_NAME);
  if (prefCookie == null) {
    prefCookie=new Cookie(Constants.PREFS_COOKIE_NAME,""String_Node_Str"");
  }
  Map<String,String> prefs;
  try {
    prefs=getPrefs(new String(Base64.decodeBase64(prefCookie.getValue().getBytes())));
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"" + prefCookie.getValue(),e);
    prefs=new HashMap<String,String>();
  }
  prefs.put(key,value);
  try {
    prefCookie.setValue(new String(Base64.encodeBase64(setPrefs(prefs).getBytes())));
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"" + prefs);
  }
  prefCookie.setMaxAge(ONE_YEAR_TIME);
  ((WebResponse)response).addCookie(prefCookie);
}","public void set(final Request request,final Response response,final String key,final String value){
  Cookie prefCookie=((WebRequest)request).getCookie(Constants.PREFS_COOKIE_NAME);
  final Map<String,String> prefs=new HashMap<String,String>();
  if (prefCookie == null || !StringUtils.hasText(prefCookie.getValue())) {
    prefCookie=new Cookie(Constants.PREFS_COOKIE_NAME,null);
  }
 else {
    prefs.putAll(getPrefs(new String(Base64.decodeBase64(prefCookie.getValue().getBytes()))));
  }
  prefs.put(key,value);
  try {
    prefCookie.setValue(new String(Base64.encodeBase64(setPrefs(prefs).getBytes())));
  }
 catch (  IOException e) {
    LOG.error(""String_Node_Str"" + prefs,e);
  }
  prefCookie.setMaxAge(ONE_YEAR_TIME);
  ((WebResponse)response).addCookie(prefCookie);
}"
60827,"public List<String> getList(final Request request,final String key){
  List<String> result=new ArrayList<String>();
  String compound=get(request,key);
  if (compound != null) {
    String[] items=compound.split(""String_Node_Str"");
    if (items != null) {
      result.addAll(Arrays.asList(items));
    }
 else {
      LOG.error(""String_Node_Str"" + compound);
    }
  }
  return result;
}","public List<String> getList(final Request request,final String key){
  final List<String> result=new ArrayList<String>();
  final String compound=get(request,key);
  if (StringUtils.hasText(compound)) {
    String[] items=compound.split(""String_Node_Str"");
    result.addAll(Arrays.asList(items));
  }
  return result;
}"
60828,"private Map<String,String> getPrefs(final String value) throws IOException {
  return mapper.readValue(value,MAP_TYPE_REF);
}","private Map<String,String> getPrefs(final String value){
  HashMap<String,String> prefs;
  try {
    if (StringUtils.hasText(value)) {
      prefs=mapper.readValue(value,MAP_TYPE_REF);
    }
 else {
      throw new Exception(""String_Node_Str"" + value + ""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    LOG.debug(""String_Node_Str"",e);
    prefs=new HashMap<String,String>();
  }
  return prefs;
}"
60829,"public String get(final Request request,final String key){
  String result=null;
  Cookie prefCookie=((WebRequest)request).getCookie(Constants.PREFS_COOKIE_NAME);
  if (prefCookie != null) {
    Map<String,String> prefs;
    try {
      prefs=getPrefs(new String(Base64.decodeBase64(prefCookie.getValue().getBytes())));
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",prefCookie.getValue(),e);
      prefs=new HashMap<String,String>();
    }
    result=prefs.get(key);
  }
 else {
    LOG.debug(""String_Node_Str"",Constants.PREFS_COOKIE_NAME);
  }
  return result;
}","public String get(final Request request,final String key){
  String result=null;
  Cookie prefCookie=((WebRequest)request).getCookie(Constants.PREFS_COOKIE_NAME);
  if (prefCookie != null) {
    final Map<String,String> prefs=getPrefs(new String(Base64.decodeBase64(prefCookie.getValue().getBytes())));
    result=prefs.get(key);
  }
 else {
    LOG.debug(""String_Node_Str"",Constants.PREFS_COOKIE_NAME);
  }
  return result;
}"
60830,"public void setList(final Request request,final Response response,final String key,final List<String> values){
  set(request,response,key,StringUtils.join(values.toArray(new String[]{}),""String_Node_Str""));
}","public void setList(final Request request,final Response response,final Map<String,List<String>> prefs){
  set(request,response,prefs);
}"
60831,"@Override public void onClose(final AjaxRequestTarget target){
  final TreeNodeClickUpdate data=new TreeNodeClickUpdate(target,nodePanel.getSelectedNode());
  send(getPage(),Broadcast.BREADTH,data);
  target.add(container);
  if (modalResult) {
    getSession().info(getString(""String_Node_Str""));
    target.add(feedbackPanel);
    modalResult=false;
  }
}","@Override public void onClose(final AjaxRequestTarget target){
  final TreeNodeClickUpdate data=new TreeNodeClickUpdate(target,nodePanel.getSelectedNode() != null ? nodePanel.getSelectedNode().getId() : 0);
  send(getPage(),Broadcast.BREADTH,data);
  target.add(container);
  if (modalResult) {
    getSession().info(getString(""String_Node_Str""));
    target.add(feedbackPanel);
    modalResult=false;
  }
}"
60832,"public Roles(final PageParameters parameters){
  super(parameters);
  add(createRoleWin=new ModalWindow(""String_Node_Str""));
  createRoleWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createRoleWin.setInitialHeight(WIN_HEIGHT);
  createRoleWin.setInitialWidth(WIN_WIDTH);
  createRoleWin.setCookieName(""String_Node_Str"");
  container=new WebMarkupContainer(""String_Node_Str"");
  container.setOutputMarkupId(true);
  add(container);
  final TreeRolePanel treePanel=new TreeRolePanel(""String_Node_Str"");
  treePanel.setOutputMarkupId(true);
  container.add(treePanel);
  final RoleSummaryPanel nodePanel=new RoleSummaryPanel(""String_Node_Str"",createRoleWin,Roles.this.getPageReference());
  nodePanel.setOutputMarkupId(true);
  container.add(nodePanel);
  createRoleWin.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      final TreeNodeClickUpdate data=new TreeNodeClickUpdate(target,nodePanel.getSelectedNode());
      send(getPage(),Broadcast.BREADTH,data);
      target.add(container);
      if (modalResult) {
        getSession().info(getString(""String_Node_Str""));
        target.add(feedbackPanel);
        modalResult=false;
      }
    }
  }
);
  container.add(createRoleWin);
}","public Roles(final PageParameters parameters){
  super(parameters);
  createRoleWin=new ModalWindow(""String_Node_Str"");
  createRoleWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createRoleWin.setInitialHeight(WIN_HEIGHT);
  createRoleWin.setInitialWidth(WIN_WIDTH);
  createRoleWin.setCookieName(""String_Node_Str"");
  add(createRoleWin);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.setOutputMarkupId(true);
  add(container);
  final TreeRolePanel treePanel=new TreeRolePanel(""String_Node_Str"");
  treePanel.setOutputMarkupId(true);
  container.add(treePanel);
  final RoleSummaryPanel nodePanel=new RoleSummaryPanel(""String_Node_Str"",createRoleWin,Roles.this.getPageReference());
  nodePanel.setOutputMarkupId(true);
  container.add(nodePanel);
  createRoleWin.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      final TreeNodeClickUpdate data=new TreeNodeClickUpdate(target,nodePanel.getSelectedNode() != null ? nodePanel.getSelectedNode().getId() : 0);
      send(getPage(),Broadcast.BREADTH,data);
      target.add(container);
      if (modalResult) {
        getSession().info(getString(""String_Node_Str""));
        target.add(feedbackPanel);
        modalResult=false;
      }
    }
  }
);
  container.add(createRoleWin);
}"
60833,"public TreeNodeClickUpdate(final AjaxRequestTarget target,final RoleTO selectedNode){
  this.target=target;
  this.selectedNode=selectedNode;
}","public TreeNodeClickUpdate(final AjaxRequestTarget target,final Long selectedNodeId){
  this.target=target;
  this.selectedNodeId=selectedNodeId;
}"
60834,"@Override public void onEvent(final IEvent<?> event){
  super.onEvent(event);
  if (event.getPayload() instanceof TreeNodeClickUpdate) {
    final TreeNodeClickUpdate update=(TreeNodeClickUpdate)event.getPayload();
    setSelectedNode(update.getSelectedNode());
    fragment=new Fragment(""String_Node_Str"",(this.selectedNode.getId() != 0 ? ""String_Node_Str"" : ""String_Node_Str""),this);
    if (this.selectedNode.getId() != 0) {
      roleTabPanel=new RoleTabPanel(""String_Node_Str"",this.selectedNode,window,callerPageRef);
      roleTabPanel.setOutputMarkupId(true);
      fragment.addOrReplace(roleTabPanel);
    }
 else {
      actionLink=new TreeActionLinkPanel(""String_Node_Str"",this.selectedNode.getId(),new CompoundPropertyModel(this.selectedNode),window,callerPageRef);
      actionLink.setOutputMarkupId(true);
      fragment.addOrReplace(actionLink);
    }
    replace(fragment);
    update.getTarget().add(this);
  }
}","@Override public void onEvent(final IEvent<?> event){
  super.onEvent(event);
  if (event.getPayload() instanceof TreeNodeClickUpdate) {
    final TreeNodeClickUpdate update=(TreeNodeClickUpdate)event.getPayload();
    this.selectedNode=restClient.readRole(update.getSelectedNodeId());
    fragment=new Fragment(""String_Node_Str"",(update.getSelectedNodeId() != 0 ? ""String_Node_Str"" : ""String_Node_Str""),this);
    if (update.getSelectedNodeId() != 0) {
      roleTabPanel=new RoleTabPanel(""String_Node_Str"",this.selectedNode,window,callerPageRef);
      roleTabPanel.setOutputMarkupId(true);
      fragment.addOrReplace(roleTabPanel);
    }
 else {
      actionLink=new TreeActionLinkPanel(""String_Node_Str"",update.getSelectedNodeId(),new CompoundPropertyModel(this.selectedNode),window,callerPageRef);
      actionLink.setOutputMarkupId(true);
      fragment.addOrReplace(actionLink);
    }
    replace(fragment);
    update.getTarget().add(this);
  }
}"
60835,"public RoleSummaryPanel(final String id,final ModalWindow window,final PageReference callerPageRef){
  super(id);
  this.callerPageRef=callerPageRef;
  this.window=window;
  fragment=new Fragment(""String_Node_Str"",this.selectedNode == null ? ""String_Node_Str"" : (this.selectedNode.getId() == 0 ? ""String_Node_Str"" : ""String_Node_Str""),this);
  if (this.selectedNode != null) {
    if (this.selectedNode.getId() != 0) {
      roleTabPanel=new RoleTabPanel(""String_Node_Str"",selectedNode,window,callerPageRef);
      roleTabPanel.setOutputMarkupId(true);
      fragment.add(roleTabPanel);
    }
 else {
      actionLink=new TreeActionLinkPanel(""String_Node_Str"",this.selectedNode.getId(),new CompoundPropertyModel(this.selectedNode),window,callerPageRef);
      fragment.add(actionLink);
    }
  }
  add(fragment);
}","public RoleSummaryPanel(final String id,final ModalWindow window,final PageReference callerPageRef){
  super(id);
  this.callerPageRef=callerPageRef;
  this.window=window;
  fragment=new Fragment(""String_Node_Str"",this.selectedNode == null ? ""String_Node_Str"" : (this.selectedNode.getId() != 0 ? ""String_Node_Str"" : ""String_Node_Str""),this);
  if (this.selectedNode != null) {
    if (this.selectedNode.getId() != 0) {
      roleTabPanel=new RoleTabPanel(""String_Node_Str"",selectedNode,window,callerPageRef);
      roleTabPanel.setOutputMarkupId(true);
      fragment.add(roleTabPanel);
    }
 else {
      actionLink=new TreeActionLinkPanel(""String_Node_Str"",this.selectedNode.getId(),new CompoundPropertyModel(this.selectedNode),window,callerPageRef);
      fragment.add(actionLink);
    }
  }
  add(fragment);
}"
60836,"@Override protected void onNodeLinkClicked(final Object node,final BaseTree tree,final AjaxRequestTarget target){
  DefaultMutableTreeNode treeNode=(DefaultMutableTreeNode)node;
  RoleTO unitObject=(RoleTO)treeNode.getUserObject();
  send(getPage(),Broadcast.BREADTH,new TreeNodeClickUpdate(target,unitObject));
}","@Override protected void onNodeLinkClicked(final Object node,final BaseTree baseTree,final AjaxRequestTarget target){
  DefaultMutableTreeNode treeNode=(DefaultMutableTreeNode)node;
  RoleTO unitObject=(RoleTO)treeNode.getUserObject();
  send(getPage(),Broadcast.BREADTH,new TreeNodeClickUpdate(target,unitObject.getId()));
}"
60837,"private BaseTree updateTree(){
  tree=new LinkTree(""String_Node_Str"",roleTreeBuilder.build()){
    private static final long serialVersionUID=-5514696922119256101L;
    @Override protected IModel getNodeTextModel(    final IModel model){
      return new PropertyModel(model,""String_Node_Str"");
    }
    @Override protected void onNodeLinkClicked(    final Object node,    final BaseTree tree,    final AjaxRequestTarget target){
      DefaultMutableTreeNode treeNode=(DefaultMutableTreeNode)node;
      RoleTO unitObject=(RoleTO)treeNode.getUserObject();
      send(getPage(),Broadcast.BREADTH,new TreeNodeClickUpdate(target,unitObject));
    }
  }
;
  tree.setOutputMarkupId(true);
  tree.getTreeState().expandAll();
  treeContainer.addOrReplace(tree);
  return tree;
}","private void updateTree(){
  tree=new LinkTree(""String_Node_Str"",roleTreeBuilder.build()){
    private static final long serialVersionUID=-5514696922119256101L;
    @Override protected IModel getNodeTextModel(    final IModel model){
      return new PropertyModel(model,""String_Node_Str"");
    }
    @Override protected void onNodeLinkClicked(    final Object node,    final BaseTree baseTree,    final AjaxRequestTarget target){
      DefaultMutableTreeNode treeNode=(DefaultMutableTreeNode)node;
      RoleTO unitObject=(RoleTO)treeNode.getUserObject();
      send(getPage(),Broadcast.BREADTH,new TreeNodeClickUpdate(target,unitObject.getId()));
    }
  }
;
  tree.setOutputMarkupId(true);
  tree.getTreeState().expandAll();
  treeContainer.addOrReplace(tree);
}"
60838,"private List<SyncopeUser> doSearch(final Set<Long> adminRoles,final NodeCond nodeCond,final int page,final int itemsPerPage){
  Map<Integer,Object> parameters=Collections.synchronizedMap(new HashMap<Integer,Object>());
  StringBuilder queryString=getQuery(nodeCond,parameters);
  queryString.insert(0,""String_Node_Str"");
  queryString.append(""String_Node_Str"");
  queryString.append(getAdminRolesFilter(adminRoles)).append(""String_Node_Str"");
  Query query=entityManager.createNativeQuery(queryString.toString());
  query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));
  if (itemsPerPage >= 0) {
    query.setMaxResults(itemsPerPage);
  }
  fillWithParameters(query,parameters);
  LOG.debug(""String_Node_Str"",queryString.toString(),parameters);
  Set<Number> userIds=new HashSet<Number>();
  List resultList=query.getResultList();
  if (resultList != null) {
    for (    Object userId : resultList) {
      if (userId instanceof Object[]) {
        userIds.add((Number)((Object[])userId)[0]);
      }
 else {
        userIds.add((Number)userId);
      }
    }
  }
  List<SyncopeUser> result=new ArrayList<SyncopeUser>(userIds.size());
  SyncopeUser user;
  for (  Object userId : userIds) {
    user=userDAO.find(((Number)userId).longValue());
    if (user == null) {
      LOG.error(""String_Node_Str"" + ""String_Node_Str"",userId);
    }
 else {
      result.add(user);
    }
  }
  return result;
}","private List<SyncopeUser> doSearch(final Set<Long> adminRoles,final NodeCond nodeCond,final int page,final int itemsPerPage){
  Map<Integer,Object> parameters=Collections.synchronizedMap(new HashMap<Integer,Object>());
  final StringBuilder queryString=getQuery(nodeCond,parameters);
  queryString.insert(0,""String_Node_Str"");
  queryString.append(""String_Node_Str"");
  queryString.append(getAdminRolesFilter(adminRoles)).append(""String_Node_Str"");
  final Query query=entityManager.createNativeQuery(queryString.toString());
  query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));
  if (itemsPerPage >= 0) {
    query.setMaxResults(itemsPerPage);
  }
  fillWithParameters(query,parameters);
  LOG.debug(""String_Node_Str"",queryString.toString(),parameters);
  final Set<Number> userIds=new HashSet<Number>();
  final List resultList=query.getResultList();
  if (resultList != null) {
    for (    Object userId : resultList) {
      if (userId instanceof Object[]) {
        userIds.add((Number)((Object[])userId)[0]);
      }
 else {
        userIds.add((Number)userId);
      }
    }
  }
  final List<SyncopeUser> result=new ArrayList<SyncopeUser>(userIds.size());
  SyncopeUser user;
  for (  Object userId : userIds) {
    user=userDAO.find(((Number)userId).longValue());
    if (user == null) {
      LOG.error(""String_Node_Str"" + ""String_Node_Str"",userId);
    }
 else {
      result.add(user);
    }
  }
  return result;
}"
60839,"@Test public final void searchByMembership(){
  MembershipCond membershipCond=new MembershipCond();
  membershipCond.setRoleId(1L);
  List<SyncopeUser> users=searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),NodeCond.getLeafCond(membershipCond));
  assertNotNull(users);
  assertEquals(2,users.size());
  membershipCond=new MembershipCond();
  membershipCond.setRoleId(5L);
  users=searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),NodeCond.getNotLeafCond(membershipCond));
  assertNotNull(users);
  assertEquals(3,users.size());
}","@Test public final void searchByMembership(){
  MembershipCond membershipCond=new MembershipCond();
  membershipCond.setRoleId(1L);
  List<SyncopeUser> users=searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),NodeCond.getLeafCond(membershipCond));
  assertNotNull(users);
  assertEquals(2,users.size());
  membershipCond=new MembershipCond();
  membershipCond.setRoleId(5L);
  users=searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),NodeCond.getNotLeafCond(membershipCond));
  assertNotNull(users);
  assertEquals(4,users.size());
}"
60840,"private String encodePassword(final String password,final CipherAlgorithm cipherAlgoritm) throws NoSuchAlgorithmException, IllegalBlockSizeException, InvalidKeyException, BadPaddingException, NoSuchPaddingException, UnsupportedEncodingException {
  String encodedPassword=null;
  if (password != null) {
    if (cipherAlgoritm == null || cipherAlgoritm == CipherAlgorithm.AES) {
      final byte[] cleartext=password.getBytes(""String_Node_Str"");
      final Cipher cipher=Cipher.getInstance(CipherAlgorithm.AES.getAlgorithm());
      cipher.init(Cipher.ENCRYPT_MODE,keySpec);
      byte[] encoded=cipher.doFinal(cleartext);
      encodedPassword=new String(Base64.encode(encoded));
    }
 else {
      MessageDigest algorithm=MessageDigest.getInstance(cipherAlgoritm.getAlgorithm());
      algorithm.reset();
      algorithm.update(password.getBytes());
      byte messageDigest[]=algorithm.digest();
      StringBuilder hexString=new StringBuilder();
      for (int i=0; i < messageDigest.length; i++) {
        hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
      }
      encodedPassword=hexString.toString();
    }
  }
  return encodedPassword;
}","private String encodePassword(final String password,final CipherAlgorithm cipherAlgoritm) throws NoSuchAlgorithmException, IllegalBlockSizeException, InvalidKeyException, BadPaddingException, NoSuchPaddingException, UnsupportedEncodingException {
  String encodedPassword=null;
  if (password != null) {
    if (cipherAlgoritm == null || cipherAlgoritm == CipherAlgorithm.AES) {
      final byte[] cleartext=password.getBytes(""String_Node_Str"");
      final Cipher cipher=Cipher.getInstance(CipherAlgorithm.AES.getAlgorithm());
      cipher.init(Cipher.ENCRYPT_MODE,keySpec);
      byte[] encoded=cipher.doFinal(cleartext);
      encodedPassword=new String(Base64.encode(encoded));
    }
 else {
      MessageDigest algorithm=MessageDigest.getInstance(cipherAlgoritm.getAlgorithm());
      algorithm.reset();
      algorithm.update(password.getBytes());
      byte[] messageDigest=algorithm.digest();
      StringBuilder hexString=new StringBuilder();
      for (int i=0; i < messageDigest.length; i++) {
        String hex=Integer.toHexString(0xff & messageDigest[i]);
        if (hex.length() == 1) {
          hexString.append('0');
        }
        hexString.append(hex);
      }
      encodedPassword=hexString.toString();
    }
  }
  return encodedPassword;
}"
60841,"public UserModalPage(final PageReference callerPageRef,final ModalWindow window,final UserTO userTO){
  super();
  setBean(userTO);
  if (userTO.getId() > 0) {
    cloneOldUserTO(userTO);
  }
  add(new Label(""String_Node_Str"",String.valueOf(userTO.getId())));
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(userTO));
  form.add(new UserDetailsPanel(""String_Node_Str"",userTO,form));
  form.add(new AttributesPanel(""String_Node_Str"",userTO,form));
  form.add(new DerivedAttributesPanel(""String_Node_Str"",userTO));
  form.add(new VirtualAttributesPanel(""String_Node_Str"",userTO));
  form.add(new ResourcesPanel(""String_Node_Str"",userTO));
  form.add(new RolesPanel(""String_Node_Str"",userTO));
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final UserTO userTO=(UserTO)form.getModelObject();
      try {
        if (userTO.getId() == 0) {
          userRestClient.create(userTO);
        }
 else {
          setupUserMod(userTO);
          if (userMod != null) {
            userRestClient.update(userMod);
          }
        }
        ((Users)callerPageRef.getPage()).setModalResult(true);
        ((Users)callerPageRef.getPage()).getPageParameters().set(Constants.PAGEPARAM_CREATE,userTO.getId() == 0);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        LOG.error(""String_Node_Str"",e);
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=null;
  if (userTO.getId() == 0) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,allowedRoles);
  form.add(submit);
  add(form);
}","public UserModalPage(final PageReference callerPageRef,final ModalWindow window,final UserTO userTO){
  super();
  setBean(userTO);
  if (userTO.getId() > 0) {
    cloneOldUserTO(userTO);
  }
  add(new Label(""String_Node_Str"",String.valueOf(userTO.getId())));
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(userTO));
  form.add(new UserDetailsPanel(""String_Node_Str"",userTO,form));
  form.add(new AttributesPanel(""String_Node_Str"",userTO,form));
  form.add(new DerivedAttributesPanel(""String_Node_Str"",userTO));
  form.add(new VirtualAttributesPanel(""String_Node_Str"",userTO));
  form.add(new ResourcesPanel(""String_Node_Str"",userTO));
  form.add(new RolesPanel(""String_Node_Str"",userTO));
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final UserTO userTO=(UserTO)form.getModelObject();
      try {
        if (userTO.getId() == 0) {
          userRestClient.create(userTO);
        }
 else {
          setupUserMod(userTO);
          if (userMod != null) {
            userRestClient.update(userMod);
          }
        }
        ((Users)callerPageRef.getPage()).setModalResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        LOG.error(""String_Node_Str"",e);
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=null;
  if (userTO.getId() == 0) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,allowedRoles);
  form.add(submit);
  add(form);
}"
60842,"@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  final UserTO userTO=(UserTO)form.getModelObject();
  try {
    if (userTO.getId() == 0) {
      userRestClient.create(userTO);
    }
 else {
      setupUserMod(userTO);
      if (userMod != null) {
        userRestClient.update(userMod);
      }
    }
    ((Users)callerPageRef.getPage()).setModalResult(true);
    ((Users)callerPageRef.getPage()).getPageParameters().set(Constants.PAGEPARAM_CREATE,userTO.getId() == 0);
    window.close(target);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
    target.add(feedbackPanel);
  }
}","@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  final UserTO userTO=(UserTO)form.getModelObject();
  try {
    if (userTO.getId() == 0) {
      userRestClient.create(userTO);
    }
 else {
      setupUserMod(userTO);
      if (userMod != null) {
        userRestClient.update(userMod);
      }
    }
    ((Users)callerPageRef.getPage()).setModalResult(true);
    window.close(target);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
    target.add(feedbackPanel);
  }
}"
60843,"public Users(final PageParameters parameters){
  super(parameters);
  final ModalWindow editModalWin=new ModalWindow(""String_Node_Str"");
  editModalWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editModalWin.setInitialHeight(EDIT_MODAL_WIN_HEIGHT);
  editModalWin.setInitialWidth(EDIT_MODAL_WIN_WIDTH);
  editModalWin.setCookieName(""String_Node_Str"");
  add(editModalWin);
  final ResultSetPanel searchResult=new ResultSetPanel(""String_Node_Str"",true,null,parameters,feedbackPanel);
  add(searchResult);
  final ResultSetPanel listResult=new ResultSetPanel(""String_Node_Str"",false,null,parameters,feedbackPanel);
  add(listResult);
  final AjaxLink createLink=new IndicatingAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      editModalWin.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new UserModalPage(Users.this.getPageReference(),editModalWin,new UserTO());
        }
      }
);
      editModalWin.show(target);
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(createLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(createLink);
  setWindowClosedReloadCallback(editModalWin,new ResultSetPanel[]{listResult,searchResult});
  final Form searchForm=new Form(""String_Node_Str"");
  add(searchForm);
  final FeedbackPanel searchFeedback=new FeedbackPanel(""String_Node_Str"",new IFeedbackMessageFilter(){
    private static final long serialVersionUID=6895024863321391672L;
    @Override public boolean accept(    final FeedbackMessage message){
      boolean result;
      if (message.getReporter() != null) {
        result=searchForm.contains(message.getReporter(),true);
      }
 else {
        result=false;
      }
      return result;
    }
  }
);
  searchFeedback.setOutputMarkupId(true);
  searchForm.add(searchFeedback);
  final WebMarkupContainer searchFormContainer=new WebMarkupContainer(""String_Node_Str"");
  searchFormContainer.setOutputMarkupId(true);
  searchForm.add(searchFormContainer);
  final List<SearchConditionWrapper> searchConditionList=new ArrayList<SearchConditionWrapper>();
  searchConditionList.add(new SearchConditionWrapper());
  searchFormContainer.add(new SearchView(""String_Node_Str"",searchConditionList,searchFormContainer));
  AjaxButton addAndButton=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-4804368561204623354L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form<?> form){
      SearchConditionWrapper conditionWrapper=new SearchConditionWrapper();
      conditionWrapper.setOperationType(OperationType.AND);
      searchConditionList.add(conditionWrapper);
      target.add(searchFormContainer);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form<?> form){
      target.add(searchFormContainer);
    }
  }
;
  addAndButton.setDefaultFormProcessing(false);
  searchFormContainer.add(addAndButton);
  AjaxButton addOrButton=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-4804368561204623354L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form<?> form){
      SearchConditionWrapper conditionWrapper=new SearchConditionWrapper();
      conditionWrapper.setOperationType(OperationType.OR);
      searchConditionList.add(conditionWrapper);
      target.add(searchFormContainer);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form<?> form){
      target.add(searchFormContainer);
    }
  }
;
  addOrButton.setDefaultFormProcessing(false);
  searchFormContainer.add(addOrButton);
  searchForm.add(new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form<?> form){
      doSearch(target,searchConditionList,searchResult);
      Session.get().getFeedbackMessages().clear();
      target.add(searchFeedback);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(searchFeedback);
    }
  }
);
}","public Users(final PageParameters parameters){
  super(parameters);
  final ModalWindow editModalWin=new ModalWindow(""String_Node_Str"");
  editModalWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editModalWin.setInitialHeight(EDIT_MODAL_WIN_HEIGHT);
  editModalWin.setInitialWidth(EDIT_MODAL_WIN_WIDTH);
  editModalWin.setCookieName(""String_Node_Str"");
  add(editModalWin);
  final ResultSetPanel searchResult=new ResultSetPanel(""String_Node_Str"",true,null,getPageReference());
  add(searchResult);
  final ResultSetPanel listResult=new ResultSetPanel(""String_Node_Str"",false,null,getPageReference());
  add(listResult);
  final AjaxLink createLink=new IndicatingAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      editModalWin.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new UserModalPage(Users.this.getPageReference(),editModalWin,new UserTO());
        }
      }
);
      editModalWin.show(target);
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(createLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(createLink);
  setWindowClosedReloadCallback(editModalWin,new ResultSetPanel[]{listResult,searchResult});
  final Form searchForm=new Form(""String_Node_Str"");
  add(searchForm);
  final FeedbackPanel searchFeedback=new FeedbackPanel(""String_Node_Str"",new IFeedbackMessageFilter(){
    private static final long serialVersionUID=6895024863321391672L;
    @Override public boolean accept(    final FeedbackMessage message){
      boolean result;
      if (message.getReporter() != null) {
        result=searchForm.contains(message.getReporter(),true);
      }
 else {
        result=false;
      }
      return result;
    }
  }
);
  searchFeedback.setOutputMarkupId(true);
  searchForm.add(searchFeedback);
  final WebMarkupContainer searchFormContainer=new WebMarkupContainer(""String_Node_Str"");
  searchFormContainer.setOutputMarkupId(true);
  searchForm.add(searchFormContainer);
  final List<SearchConditionWrapper> searchConditionList=new ArrayList<SearchConditionWrapper>();
  searchConditionList.add(new SearchConditionWrapper());
  searchFormContainer.add(new SearchView(""String_Node_Str"",searchConditionList,searchFormContainer));
  AjaxButton addAndButton=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-4804368561204623354L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form<?> form){
      SearchConditionWrapper conditionWrapper=new SearchConditionWrapper();
      conditionWrapper.setOperationType(OperationType.AND);
      searchConditionList.add(conditionWrapper);
      target.add(searchFormContainer);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form<?> form){
      target.add(searchFormContainer);
    }
  }
;
  addAndButton.setDefaultFormProcessing(false);
  searchFormContainer.add(addAndButton);
  AjaxButton addOrButton=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-4804368561204623354L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form<?> form){
      SearchConditionWrapper conditionWrapper=new SearchConditionWrapper();
      conditionWrapper.setOperationType(OperationType.OR);
      searchConditionList.add(conditionWrapper);
      target.add(searchFormContainer);
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form<?> form){
      target.add(searchFormContainer);
    }
  }
;
  addOrButton.setDefaultFormProcessing(false);
  searchFormContainer.add(addOrButton);
  searchForm.add(new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form<?> form){
      doSearch(target,searchConditionList,searchResult);
      Session.get().getFeedbackMessages().clear();
      target.add(searchFeedback);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(searchFeedback);
    }
  }
);
}"
60844,"private void setWindowClosedReloadCallback(final ModalWindow window,final ResultSetPanel[] panels){
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      for (      ResultSetPanel panel : panels) {
        target.add(panel);
      }
      target.add(feedbackPanel);
    }
  }
);
}","private void setWindowClosedReloadCallback(final ModalWindow window,final ResultSetPanel[] panels){
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      final EventDataWrapper data=new EventDataWrapper();
      data.setTarget(target);
      data.setCreate(true);
      send(getPage(),Broadcast.BREADTH,data);
      if (isModalResult()) {
        setModalResult(false);
        getSession().info(getString(""String_Node_Str""));
        target.add(feedbackPanel);
      }
    }
  }
);
}"
60845,"@Override public void onClose(final AjaxRequestTarget target){
  for (  ResultSetPanel panel : panels) {
    target.add(panel);
  }
  target.add(feedbackPanel);
}","@Override public void onClose(final AjaxRequestTarget target){
  final EventDataWrapper data=new EventDataWrapper();
  data.setTarget(target);
  data.setCreate(true);
  send(getPage(),Broadcast.BREADTH,data);
  if (isModalResult()) {
    setModalResult(false);
    getSession().info(getString(""String_Node_Str""));
    target.add(feedbackPanel);
  }
}"
60846,"private void doSearch(final AjaxRequestTarget target,final List<SearchConditionWrapper> searchConditionList,final ResultSetPanel resultsetPanel){
  NodeCond searchCond=buildSearchCond(searchConditionList);
  LOG.debug(""String_Node_Str"" + searchCond);
  if (searchCond == null || !searchCond.checkValidity()) {
    error(getString(""String_Node_Str""));
    return;
  }
  resultsetPanel.updateTableContent(searchCond,target);
}","private void doSearch(final AjaxRequestTarget target,final List<SearchConditionWrapper> searchConditionList,final ResultSetPanel resultsetPanel){
  NodeCond searchCond=buildSearchCond(searchConditionList);
  LOG.debug(""String_Node_Str"" + searchCond);
  if (searchCond == null || !searchCond.checkValidity()) {
    error(getString(""String_Node_Str""));
    return;
  }
  resultsetPanel.search(searchCond,target);
}"
60847,"@Override protected Map<Long,String> load(){
  final Map<Long,String> allRoles=new HashMap<Long,String>();
  List<RoleTO> roles=roleRestClient.getAllRoles();
  if (roles != null) {
    for (    RoleTO role : roles) {
      allRoles.put(role.getId(),role.getName());
    }
  }
  return allRoles;
}","@Override protected List<String> load(){
  final List<String> classes=new ArrayList<String>(taskRestClient.getJobActionsClasses());
  return classes;
}"
60848,"public SyncTaskModalPage(final ModalWindow window,final SyncTaskTO taskTO){
  super(window,taskTO);
  final IModel<List<String>> allResources=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      final List<String> resourceNames=new ArrayList<String>();
      for (      ResourceTO resourceTO : resourceRestClient.getAllResources()) {
        resourceNames.add(resourceTO.getName());
      }
      return resourceNames;
    }
  }
;
  final IModel<Map<Long,String>> allRoles=new LoadableDetachableModel<Map<Long,String>>(){
    private static final long serialVersionUID=-2012833443695917883L;
    @Override protected Map<Long,String> load(){
      final Map<Long,String> allRoles=new HashMap<Long,String>();
      List<RoleTO> roles=roleRestClient.getAllRoles();
      if (roles != null) {
        for (        RoleTO role : roles) {
          allRoles.put(role.getId(),role.getName());
        }
      }
      return allRoles;
    }
  }
;
  final AjaxDropDownChoicePanel<String> resource=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(taskTO,""String_Node_Str""),false);
  resource.setChoices(allResources.getObject());
  resource.setChoiceRenderer(new SelectChoiceRenderer());
  resource.addRequiredLabel();
  resource.setEnabled(taskTO.getId() == 0);
  resource.setStyleShet(""String_Node_Str"");
  profile.add(resource);
  final AjaxCheckBoxPanel creates=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(taskTO,""String_Node_Str""),false);
  profile.add(creates);
  final AjaxCheckBoxPanel updates=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(taskTO,""String_Node_Str""),false);
  profile.add(updates);
  final AjaxCheckBoxPanel deletes=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(taskTO,""String_Node_Str""),false);
  profile.add(deletes);
  final AjaxPalettePanel defaultResources=new AjaxPalettePanel(""String_Node_Str"",new PropertyModel(taskTO,""String_Node_Str""),new ListModel<String>(allResources.getObject()));
  form.add(defaultResources);
  final AjaxPalettePanel<Long> defaultRoles=new AjaxPalettePanel<Long>(""String_Node_Str"",new PropertyModel(taskTO,""String_Node_Str""),new ListModel<Long>(new ArrayList<Long>(allRoles.getObject().keySet())),new ChoiceRenderer<Long>(){
    private static final long serialVersionUID=8463000788871139550L;
    @Override public String getDisplayValue(    final Long id){
      return allRoles.getObject().get(id);
    }
    @Override public String getIdValue(    final Long id,    final int index){
      return id.toString();
    }
  }
);
  form.add(defaultRoles);
}","public SyncTaskModalPage(final ModalWindow window,final SyncTaskTO taskTO){
  super(window,taskTO);
  final IModel<List<String>> allResources=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      final List<String> resourceNames=new ArrayList<String>();
      for (      ResourceTO resourceTO : resourceRestClient.getAllResources()) {
        resourceNames.add(resourceTO.getName());
      }
      return resourceNames;
    }
  }
;
  final IModel<Map<Long,String>> allRoles=new LoadableDetachableModel<Map<Long,String>>(){
    private static final long serialVersionUID=-2012833443695917883L;
    @Override protected Map<Long,String> load(){
      final Map<Long,String> allRoles=new HashMap<Long,String>();
      List<RoleTO> roles=roleRestClient.getAllRoles();
      if (roles != null) {
        for (        RoleTO role : roles) {
          allRoles.put(role.getId(),role.getName());
        }
      }
      return allRoles;
    }
  }
;
  final AjaxDropDownChoicePanel<String> resource=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(taskTO,""String_Node_Str""),false);
  resource.setChoices(allResources.getObject());
  resource.setChoiceRenderer(new SelectChoiceRenderer());
  resource.addRequiredLabel();
  resource.setEnabled(taskTO.getId() == 0);
  resource.setStyleShet(""String_Node_Str"");
  profile.add(resource);
  final IModel<List<String>> classNames=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      final List<String> classes=new ArrayList<String>(taskRestClient.getJobActionsClasses());
      return classes;
    }
  }
;
  final AjaxDropDownChoicePanel<String> actionsClassName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(taskTO,""String_Node_Str""),false);
  actionsClassName.setChoices(classNames.getObject());
  actionsClassName.setStyleShet(""String_Node_Str"");
  profile.add(actionsClassName);
  final AjaxCheckBoxPanel creates=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(taskTO,""String_Node_Str""),false);
  profile.add(creates);
  final AjaxCheckBoxPanel updates=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(taskTO,""String_Node_Str""),false);
  profile.add(updates);
  final AjaxCheckBoxPanel deletes=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(taskTO,""String_Node_Str""),false);
  profile.add(deletes);
  final AjaxPalettePanel defaultResources=new AjaxPalettePanel(""String_Node_Str"",new PropertyModel(taskTO,""String_Node_Str""),new ListModel<String>(allResources.getObject()));
  form.add(defaultResources);
  final AjaxPalettePanel<Long> defaultRoles=new AjaxPalettePanel<Long>(""String_Node_Str"",new PropertyModel(taskTO,""String_Node_Str""),new ListModel<Long>(new ArrayList<Long>(allRoles.getObject().keySet())),new ChoiceRenderer<Long>(){
    private static final long serialVersionUID=8463000788871139550L;
    @Override public String getDisplayValue(    final Long id){
      return allRoles.getObject().get(id);
    }
    @Override public String getIdValue(    final Long id,    final int index){
      return id.toString();
    }
  }
);
  form.add(defaultRoles);
}"
60849,"@Override public Object getDisplayValue(Boolean object){
  return object ? ConnParameterType.OVERRIDABLE.toString() : ConnParameterType.NOT_OVERRIDABLE.toString();
}","@Override public Object getDisplayValue(final Boolean object){
  return object ? getString(ConnParameterType.OVERRIDABLE.name()) : getString(ConnParameterType.NOT_OVERRIDABLE.name());
}"
60850,"@Override public String getIdValue(Boolean object,int index){
  return String.valueOf(object);
}","@Override public String getIdValue(final Boolean object,final int index){
  return String.valueOf(object);
}"
60851,"public PolicyModalPage(final ModalWindow window,final T policyTO){
  super();
  final Form form=new Form(""String_Node_Str"");
  form.setOutputMarkupId(true);
  add(form);
  final AjaxTextFieldPanel policyid=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(policyTO,""String_Node_Str""),false);
  policyid.setEnabled(false);
  policyid.setStyleShet(""String_Node_Str"");
  form.add(policyid);
  final AjaxTextFieldPanel description=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(policyTO,""String_Node_Str""),false);
  description.addRequiredLabel();
  description.setStyleShet(""String_Node_Str"");
  form.add(description);
  final AjaxDropDownChoicePanel<PolicyType> type=new AjaxDropDownChoicePanel<PolicyType>(""String_Node_Str"",""String_Node_Str"",new PropertyModel<PolicyType>(policyTO,""String_Node_Str""),false);
switch (policyTO.getType()) {
case GLOBAL_ACCOUNT:
case ACCOUNT:
    type.setChoices(Arrays.asList(new PolicyType[]{PolicyType.GLOBAL_ACCOUNT,PolicyType.ACCOUNT}));
  break;
case GLOBAL_PASSWORD:
case PASSWORD:
type.setChoices(Arrays.asList(new PolicyType[]{PolicyType.GLOBAL_PASSWORD,PolicyType.PASSWORD}));
break;
case GLOBAL_SYNC:
case SYNC:
type.setChoices(Arrays.asList(new PolicyType[]{PolicyType.GLOBAL_SYNC,PolicyType.SYNC}));
}
type.addRequiredLabel();
form.add(type);
final AbstractPolicySpec policy=getPolicySpecification(policyTO);
form.add(new PolicyBeanPanel(""String_Node_Str"",policy));
final IndicatingAjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
setPolicySpecification(policyTO,policy);
try {
if (policyTO.getId() > 0) {
policyRestClient.updatePolicy(policyTO);
}
 else {
policyRestClient.createPolicy(policyTO);
}
window.close(target);
}
 catch (Exception e) {
LOG.error(""String_Node_Str"",e);
error(getString(""String_Node_Str""));
target.add(getPage().get(""String_Node_Str""));
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.add(getPage().get(""String_Node_Str""));
}
}
;
form.add(submit);
}","public PolicyModalPage(final ModalWindow window,final T policyTO){
  super();
  final Form form=new Form(""String_Node_Str"");
  form.setOutputMarkupId(true);
  add(form);
  final AjaxTextFieldPanel policyid=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(policyTO,""String_Node_Str""),false);
  policyid.setEnabled(false);
  policyid.setStyleShet(""String_Node_Str"");
  form.add(policyid);
  final AjaxTextFieldPanel description=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(policyTO,""String_Node_Str""),false);
  description.addRequiredLabel();
  description.setStyleShet(""String_Node_Str"");
  form.add(description);
  final AjaxDropDownChoicePanel<PolicyType> type=new AjaxDropDownChoicePanel<PolicyType>(""String_Node_Str"",""String_Node_Str"",new PropertyModel<PolicyType>(policyTO,""String_Node_Str""),false);
switch (policyTO.getType()) {
case GLOBAL_ACCOUNT:
case ACCOUNT:
    type.setChoices(Arrays.asList(new PolicyType[]{PolicyType.GLOBAL_ACCOUNT,PolicyType.ACCOUNT}));
  break;
case GLOBAL_PASSWORD:
case PASSWORD:
type.setChoices(Arrays.asList(new PolicyType[]{PolicyType.GLOBAL_PASSWORD,PolicyType.PASSWORD}));
break;
case GLOBAL_SYNC:
case SYNC:
type.setChoices(Arrays.asList(new PolicyType[]{PolicyType.GLOBAL_SYNC,PolicyType.SYNC}));
default :
}
type.setChoiceRenderer(new PolicyTypeRenderer());
type.addRequiredLabel();
form.add(type);
final AbstractPolicySpec policy=getPolicySpecification(policyTO);
form.add(new PolicyBeanPanel(""String_Node_Str"",policy));
final IndicatingAjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
setPolicySpecification(policyTO,policy);
try {
if (policyTO.getId() > 0) {
policyRestClient.updatePolicy(policyTO);
}
 else {
policyRestClient.createPolicy(policyTO);
}
window.close(target);
}
 catch (Exception e) {
LOG.error(""String_Node_Str"",e);
error(getString(""String_Node_Str""));
target.add(getPage().get(""String_Node_Str""));
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.add(getPage().get(""String_Node_Str""));
}
}
;
form.add(submit);
}"
60852,"@Override public void onClose(AjaxRequestTarget target){
  target.add(container);
}","@Override public void onClose(final AjaxRequestTarget target){
  target.add(container);
}"
60853,"/** 
 * Set a WindowClosedCallback for a ModalWindow instance.
 * @param window
 * @param container
 */
private void setWindowClosedCallback(final ModalWindow window,final WebMarkupContainer container){
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    AjaxRequestTarget target){
      target.add(container);
    }
  }
);
}","private void setWindowClosedCallback(final ModalWindow window,final WebMarkupContainer container){
  window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      target.add(container);
    }
  }
);
}"
60854,"public PoliciesPanel(final String id,final PolicyType policyType){
  super(id);
  this.policyType=policyType;
  final ModalWindow mwindow=new ModalWindow(""String_Node_Str"");
  mwindow.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  mwindow.setInitialHeight(MODAL_WIN_HEIGHT);
  mwindow.setInitialWidth(MODAL_WIN_WIDTH);
  mwindow.setCookieName(""String_Node_Str"");
  add(mwindow);
  final WebMarkupContainer container=new WebMarkupContainer(""String_Node_Str"");
  container.setOutputMarkupId(true);
  add(container);
  setWindowClosedCallback(mwindow,container);
  final List<IColumn> columns=new ArrayList<IColumn>();
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<PolicyTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<PolicyTO>> cellItem,    final String componentId,    final IModel<PolicyTO> model){
      final PolicyTO accountPolicyTO=model.getObject();
      AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        AjaxRequestTarget target){
          mwindow.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              final PolicyModalPage page=new PolicyModalPage(mwindow,accountPolicyTO);
              return page;
            }
          }
);
          mwindow.show(target);
        }
      }
;
      final EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<PolicyTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<PolicyTO>> cellItem,    final String componentId,    final IModel<PolicyTO> model){
      final PolicyTO accountPolicyTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            policyRestClient.delete(accountPolicyTO.getId());
            info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException e) {
            error(getString(""String_Node_Str""));
            LOG.error(""String_Node_Str"",new Object[]{accountPolicyTO.getId(),accountPolicyTO.getDescription()},e);
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
;
      final DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable table=new AjaxFallbackDefaultDataTable(""String_Node_Str"",columns,new PolicyDataProvider(),paginatorRows);
  container.add(table);
  final IndicatingAjaxLink createButton=new IndicatingAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      mwindow.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          final PolicyModalPage page=new PolicyModalPage(mwindow,getPolicyTOInstance(policyType));
          return page;
        }
      }
);
      mwindow.show(target);
    }
  }
;
  add(createButton);
  MetaDataRoleAuthorizationStrategy.authorize(createButton,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  final Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequest(),(WebResponse)getResponse(),Constants.PREF_POLICY_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table.setItemsPerPage(paginatorRows);
      target.add(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
}","public PoliciesPanel(final String id,final PolicyType policyType){
  super(id);
  this.policyType=policyType;
  final ModalWindow mwindow=new ModalWindow(""String_Node_Str"");
  mwindow.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  mwindow.setInitialHeight(MODAL_WIN_HEIGHT);
  mwindow.setInitialWidth(MODAL_WIN_WIDTH);
  mwindow.setCookieName(""String_Node_Str"");
  add(mwindow);
  final WebMarkupContainer container=new WebMarkupContainer(""String_Node_Str"");
  container.setOutputMarkupId(true);
  add(container);
  setWindowClosedCallback(mwindow,container);
  final List<IColumn> columns=new ArrayList<IColumn>();
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<PolicyTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=8263694778917279290L;
    @Override public void populateItem(    final Item<ICellPopulator<PolicyTO>> cellItem,    final String componentId,    final IModel<PolicyTO> model){
      cellItem.add(new Label(componentId,getString(model.getObject().getType().name())));
    }
  }
);
  columns.add(new AbstractColumn<PolicyTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<PolicyTO>> cellItem,    final String componentId,    final IModel<PolicyTO> model){
      final PolicyTO accountPolicyTO=model.getObject();
      AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          mwindow.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              final PolicyModalPage page=new PolicyModalPage(mwindow,accountPolicyTO);
              return page;
            }
          }
);
          mwindow.show(target);
        }
      }
;
      final EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<PolicyTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<PolicyTO>> cellItem,    final String componentId,    final IModel<PolicyTO> model){
      final PolicyTO accountPolicyTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            policyRestClient.delete(accountPolicyTO.getId());
            info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException e) {
            error(getString(""String_Node_Str""));
            LOG.error(""String_Node_Str"",new Object[]{accountPolicyTO.getId(),accountPolicyTO.getDescription()},e);
          }
          target.add(container);
          target.add(getPage().get(""String_Node_Str""));
        }
      }
;
      final DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable table=new AjaxFallbackDefaultDataTable(""String_Node_Str"",columns,new PolicyDataProvider(),paginatorRows);
  container.add(table);
  final IndicatingAjaxLink createButton=new IndicatingAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      mwindow.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          final PolicyModalPage page=new PolicyModalPage(mwindow,getPolicyTOInstance(policyType));
          return page;
        }
      }
);
      mwindow.show(target);
    }
  }
;
  add(createButton);
  MetaDataRoleAuthorizationStrategy.authorize(createButton,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  final Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getWebRequest(),(WebResponse)getResponse(),Constants.PREF_POLICY_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table.setItemsPerPage(paginatorRows);
      target.add(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
}"
60855,"@Test public void sync(){
  UserTO userTO=new UserTO();
  userTO.setPassword(""String_Node_Str"");
  userTO.setUsername(""String_Node_Str"");
  AttributeTO firstnameTO=new AttributeTO();
  firstnameTO.setSchema(""String_Node_Str"");
  firstnameTO.addValue(""String_Node_Str"");
  userTO.addAttribute(firstnameTO);
  AttributeTO surnameTO=new AttributeTO();
  surnameTO.setSchema(""String_Node_Str"");
  surnameTO.addValue(""String_Node_Str"");
  userTO.addAttribute(surnameTO);
  AttributeTO typeTO=new AttributeTO();
  typeTO.setSchema(""String_Node_Str"");
  typeTO.addValue(""String_Node_Str"");
  userTO.addAttribute(typeTO);
  AttributeTO fullnameTO=new AttributeTO();
  fullnameTO.setSchema(""String_Node_Str"");
  fullnameTO.addValue(""String_Node_Str"");
  userTO.addAttribute(fullnameTO);
  AttributeTO userIdTO=new AttributeTO();
  userIdTO.setSchema(""String_Node_Str"");
  userIdTO.addValue(""String_Node_Str"");
  userTO.addAttribute(userIdTO);
  AttributeTO emailTO=new AttributeTO();
  emailTO.setSchema(""String_Node_Str"");
  emailTO.addValue(""String_Node_Str"");
  userTO.addAttribute(emailTO);
  AttributeTO csvuseridTO=new AttributeTO();
  csvuseridTO.setSchema(""String_Node_Str"");
  userTO.addDerivedAttribute(csvuseridTO);
  userTO.addResource(""String_Node_Str"");
  userTO=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",userTO,UserTO.class);
  assertNotNull(userTO);
  Integer usersPre=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",Integer.class);
  assertNotNull(usersPre);
  SyncTaskTO task=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",SyncTaskTO.class,4);
  assertNotNull(task);
  task.setJobActionsClassName(TestSyncJobActions.class.getName());
  SyncTaskTO actual=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",task,SyncTaskTO.class);
  assertNotNull(actual);
  assertEquals(task.getId(),actual.getId());
  assertEquals(TestSyncJobActions.class.getName(),actual.getJobActionsClassName());
  TaskExecTO execution=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",null,TaskExecTO.class,4);
  assertEquals(""String_Node_Str"",execution.getStatus());
  try {
    Thread.sleep(5000);
  }
 catch (  InterruptedException e) {
  }
  userTO=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",UserTO.class,userTO.getId());
  assertNotNull(userTO);
  assertEquals(""String_Node_Str"",userTO.getUsername());
  assertEquals(""String_Node_Str"",userTO.getAttributeMap().get(""String_Node_Str"").getValues().get(0));
  assertEquals(""String_Node_Str"",userTO.getAttributeMap().get(""String_Node_Str"").getValues().get(0));
  assertEquals(""String_Node_Str"",userTO.getAttributeMap().get(""String_Node_Str"").getValues().get(0));
  Integer usersPost=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",Integer.class);
  assertNotNull(usersPost);
  assertTrue(""String_Node_Str"" + (usersPre + 9) + ""String_Node_Str""+ usersPost,usersPost == usersPre + 9);
}","@Test public void sync(){
  UserTO userTO=new UserTO();
  userTO.setPassword(""String_Node_Str"");
  userTO.setUsername(""String_Node_Str"");
  AttributeTO firstnameTO=new AttributeTO();
  firstnameTO.setSchema(""String_Node_Str"");
  firstnameTO.addValue(""String_Node_Str"");
  userTO.addAttribute(firstnameTO);
  AttributeTO surnameTO=new AttributeTO();
  surnameTO.setSchema(""String_Node_Str"");
  surnameTO.addValue(""String_Node_Str"");
  userTO.addAttribute(surnameTO);
  AttributeTO typeTO=new AttributeTO();
  typeTO.setSchema(""String_Node_Str"");
  typeTO.addValue(""String_Node_Str"");
  userTO.addAttribute(typeTO);
  AttributeTO fullnameTO=new AttributeTO();
  fullnameTO.setSchema(""String_Node_Str"");
  fullnameTO.addValue(""String_Node_Str"");
  userTO.addAttribute(fullnameTO);
  AttributeTO userIdTO=new AttributeTO();
  userIdTO.setSchema(""String_Node_Str"");
  userIdTO.addValue(""String_Node_Str"");
  userTO.addAttribute(userIdTO);
  AttributeTO emailTO=new AttributeTO();
  emailTO.setSchema(""String_Node_Str"");
  emailTO.addValue(""String_Node_Str"");
  userTO.addAttribute(emailTO);
  AttributeTO csvuseridTO=new AttributeTO();
  csvuseridTO.setSchema(""String_Node_Str"");
  userTO.addDerivedAttribute(csvuseridTO);
  userTO.addResource(""String_Node_Str"");
  userTO=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",userTO,UserTO.class);
  assertNotNull(userTO);
  Integer usersPre=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",Integer.class);
  assertNotNull(usersPre);
  SyncTaskTO task=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",SyncTaskTO.class,4);
  assertNotNull(task);
  task.setJobActionsClassName(TestSyncJobActions.class.getName());
  SyncTaskTO actual=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",task,SyncTaskTO.class);
  assertNotNull(actual);
  assertEquals(task.getId(),actual.getId());
  assertEquals(TestSyncJobActions.class.getName(),actual.getJobActionsClassName());
  TaskExecTO execution=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",null,TaskExecTO.class,4);
  assertEquals(""String_Node_Str"",execution.getStatus());
  try {
    Thread.sleep(5000);
  }
 catch (  InterruptedException e) {
  }
  userTO=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",UserTO.class,userTO.getId());
  assertNotNull(userTO);
  assertEquals(""String_Node_Str"",userTO.getUsername());
  assertEquals(""String_Node_Str"",userTO.getAttributeMap().get(""String_Node_Str"").getValues().get(0));
  assertEquals(""String_Node_Str"",userTO.getAttributeMap().get(""String_Node_Str"").getValues().get(0));
  assertTrue(Integer.valueOf(userTO.getAttributeMap().get(""String_Node_Str"").getValues().get(0)) <= 10);
  Integer usersPost=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",Integer.class);
  assertNotNull(usersPost);
  assertTrue(""String_Node_Str"" + (usersPre + 9) + ""String_Node_Str""+ usersPost,usersPost == usersPre + 9);
}"
60856,"@Override protected void onSubmit(AjaxRequestTarget target,Form form){
  if (createFlag) {
    restClient.createDerivedSchema(kind,(DerivedSchemaTO)form.getDefaultModelObject());
  }
 else {
    restClient.updateDerivedSchema(kind,(DerivedSchemaTO)form.getDefaultModelObject());
  }
  Schema callerPage=(Schema)callerPageRef.getPage();
  callerPage.setModalResult(true);
  window.close(target);
}","@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  DerivedSchemaTO schemaTO=(DerivedSchemaTO)form.getDefaultModelObject();
  try {
    if (createFlag) {
      restClient.createDerivedSchema(kind,schemaTO);
    }
 else {
      restClient.updateDerivedSchema(kind,schemaTO);
    }
    if (callerPageRef.getPage() instanceof BasePage) {
      ((BasePage)callerPageRef.getPage()).setModalResult(true);
    }
    window.close(target);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
    target.add(feedbackPanel);
  }
}"
60857,"@Override public void setSchemaModalPage(final PageReference callerPageRef,final ModalWindow window,AbstractBaseBean schema,final boolean createFlag){
  if (schema == null) {
    schema=new DerivedSchemaTO();
  }
  final Form schemaForm=new Form(""String_Node_Str"");
  schemaForm.setModel(new CompoundPropertyModel(schema));
  final AjaxTextFieldPanel name=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""),false);
  name.addRequiredLabel();
  final AjaxTextFieldPanel expression=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""),false);
  expression.addRequiredLabel();
  name.setEnabled(createFlag);
  final IndicatingAjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      if (createFlag) {
        restClient.createDerivedSchema(kind,(DerivedSchemaTO)form.getDefaultModelObject());
      }
 else {
        restClient.updateDerivedSchema(kind,(DerivedSchemaTO)form.getDefaultModelObject());
      }
      Schema callerPage=(Schema)callerPageRef.getPage();
      callerPage.setModalResult(true);
      window.close(target);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  schemaForm.add(name);
  schemaForm.add(expression);
  schemaForm.add(submit);
  add(schemaForm);
}","@Override public void setSchemaModalPage(final PageReference callerPageRef,final ModalWindow window,AbstractBaseBean schema,final boolean createFlag){
  if (schema == null) {
    schema=new DerivedSchemaTO();
  }
  final Form schemaForm=new Form(""String_Node_Str"");
  schemaForm.setModel(new CompoundPropertyModel(schema));
  final AjaxTextFieldPanel name=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""),false);
  name.addRequiredLabel();
  final AjaxTextFieldPanel expression=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""),false);
  expression.addRequiredLabel();
  name.setEnabled(createFlag);
  final IndicatingAjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      DerivedSchemaTO schemaTO=(DerivedSchemaTO)form.getDefaultModelObject();
      try {
        if (createFlag) {
          restClient.createDerivedSchema(kind,schemaTO);
        }
 else {
          restClient.updateDerivedSchema(kind,schemaTO);
        }
        if (callerPageRef.getPage() instanceof BasePage) {
          ((BasePage)callerPageRef.getPage()).setModalResult(true);
        }
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  schemaForm.add(name);
  schemaForm.add(expression);
  schemaForm.add(submit);
  add(schemaForm);
}"
60858,"@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  SchemaTO schemaTO=(SchemaTO)form.getDefaultModelObject();
  if (schemaTO.isMultivalue() && schemaTO.isUniqueConstraint()) {
    error(getString(""String_Node_Str""));
    return;
  }
  if (createFlag) {
    restClient.createSchema(kind,schemaTO);
  }
 else {
    restClient.updateSchema(kind,schemaTO);
  }
  Schema callerPage=(Schema)callerPageRef.getPage();
  callerPage.setModalResult(true);
  window.close(target);
}","@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  SchemaTO schemaTO=(SchemaTO)form.getDefaultModelObject();
  if (schemaTO.isMultivalue() && schemaTO.isUniqueConstraint()) {
    error(getString(""String_Node_Str""));
    return;
  }
  try {
    if (createFlag) {
      restClient.createSchema(kind,schemaTO);
    }
 else {
      restClient.updateSchema(kind,schemaTO);
    }
    if (callerPageRef.getPage() instanceof BasePage) {
      ((BasePage)callerPageRef.getPage()).setModalResult(true);
    }
    window.close(target);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
    target.add(feedbackPanel);
  }
}"
60859,"@Override public void setSchemaModalPage(final PageReference callerPageRef,final ModalWindow window,AbstractBaseBean schemaTO,final boolean createFlag){
  final SchemaTO schema=schemaTO == null ? new SchemaTO() : (SchemaTO)schemaTO;
  final Form schemaForm=new Form(""String_Node_Str"");
  schemaForm.setModel(new CompoundPropertyModel(schema));
  schemaForm.setOutputMarkupId(Boolean.TRUE);
  final AjaxTextFieldPanel name=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""),true);
  name.addRequiredLabel();
  name.setEnabled(createFlag);
  final AjaxTextFieldPanel conversionPattern=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""),true);
  final IModel<List<String>> validatorsList=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      return restClient.getAllValidatorClasses();
    }
  }
;
  final AjaxDropDownChoicePanel<String> validatorClass=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(schema,""String_Node_Str""),true);
  ((DropDownChoice)validatorClass.getField()).setNullValid(true);
  validatorClass.setChoices(validatorsList.getObject());
  final AjaxDropDownChoicePanel<SchemaType> type=new AjaxDropDownChoicePanel<SchemaType>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(schema,""String_Node_Str""),false);
  type.setChoices(Arrays.asList(SchemaType.values()));
  type.addRequiredLabel();
  final AjaxTextFieldPanel enumerationValues=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""),false);
  if (schema != null && SchemaType.Enum.equals(((SchemaTO)schema).getType())) {
    enumerationValues.addRequiredLabel();
    enumerationValues.setEnabled(Boolean.TRUE);
  }
 else {
    enumerationValues.removeRequiredLabel();
    enumerationValues.setEnabled(Boolean.FALSE);
  }
  type.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      if (SchemaType.Enum.ordinal() == Integer.parseInt(type.getField().getValue())) {
        enumerationValues.addRequiredLabel();
        enumerationValues.setEnabled(Boolean.TRUE);
        enumerationValues.setModelObject(((SchemaTO)schema).getEnumerationValues());
      }
 else {
        enumerationValues.removeRequiredLabel();
        enumerationValues.setEnabled(Boolean.FALSE);
        enumerationValues.setModelObject(null);
      }
      target.add(schemaForm);
    }
  }
);
  final AutoCompleteTextField mandatoryCondition=new AutoCompleteTextField(""String_Node_Str""){
    private static final long serialVersionUID=-2428903969518079100L;
    @Override protected Iterator getChoices(    String input){
      List<String> choices=new ArrayList<String>();
      if (Strings.isEmpty(input)) {
        choices=Collections.emptyList();
        return choices.iterator();
      }
      if (""String_Node_Str"".startsWith(input.toLowerCase())) {
        choices.add(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".startsWith(input.toLowerCase())) {
        choices.add(""String_Node_Str"");
      }
      return choices.iterator();
    }
  }
;
  mandatoryCondition.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    AjaxRequestTarget art){
    }
  }
);
  final AjaxCheckBoxPanel multivalue=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(schema,""String_Node_Str""),true);
  final AjaxCheckBoxPanel readonly=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(schema,""String_Node_Str""),true);
  final AjaxCheckBoxPanel uniqueConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(schema,""String_Node_Str""),true);
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      SchemaTO schemaTO=(SchemaTO)form.getDefaultModelObject();
      if (schemaTO.isMultivalue() && schemaTO.isUniqueConstraint()) {
        error(getString(""String_Node_Str""));
        return;
      }
      if (createFlag) {
        restClient.createSchema(kind,schemaTO);
      }
 else {
        restClient.updateSchema(kind,schemaTO);
      }
      Schema callerPage=(Schema)callerPageRef.getPage();
      callerPage.setModalResult(true);
      window.close(target);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  schemaForm.add(name);
  schemaForm.add(conversionPattern);
  schemaForm.add(validatorClass);
  schemaForm.add(type);
  schemaForm.add(enumerationValues);
  schemaForm.add(mandatoryCondition);
  schemaForm.add(multivalue);
  schemaForm.add(readonly);
  schemaForm.add(uniqueConstraint);
  schemaForm.add(submit);
  add(schemaForm);
}","@Override public void setSchemaModalPage(final PageReference callerPageRef,final ModalWindow window,AbstractBaseBean schemaTO,final boolean createFlag){
  final SchemaTO schema=schemaTO == null ? new SchemaTO() : (SchemaTO)schemaTO;
  final Form schemaForm=new Form(""String_Node_Str"");
  schemaForm.setModel(new CompoundPropertyModel(schema));
  schemaForm.setOutputMarkupId(Boolean.TRUE);
  final AjaxTextFieldPanel name=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""),true);
  name.addRequiredLabel();
  name.setEnabled(createFlag);
  final AjaxTextFieldPanel conversionPattern=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""),true);
  final IModel<List<String>> validatorsList=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      return restClient.getAllValidatorClasses();
    }
  }
;
  final AjaxDropDownChoicePanel<String> validatorClass=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(schema,""String_Node_Str""),true);
  ((DropDownChoice)validatorClass.getField()).setNullValid(true);
  validatorClass.setChoices(validatorsList.getObject());
  final AjaxDropDownChoicePanel<SchemaType> type=new AjaxDropDownChoicePanel<SchemaType>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(schema,""String_Node_Str""),false);
  type.setChoices(Arrays.asList(SchemaType.values()));
  type.addRequiredLabel();
  final AjaxTextFieldPanel enumerationValues=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""),false);
  if (schema != null && SchemaType.Enum.equals(((SchemaTO)schema).getType())) {
    enumerationValues.addRequiredLabel();
    enumerationValues.setEnabled(Boolean.TRUE);
  }
 else {
    enumerationValues.removeRequiredLabel();
    enumerationValues.setEnabled(Boolean.FALSE);
  }
  type.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      if (SchemaType.Enum.ordinal() == Integer.parseInt(type.getField().getValue())) {
        enumerationValues.addRequiredLabel();
        enumerationValues.setEnabled(Boolean.TRUE);
        enumerationValues.setModelObject(((SchemaTO)schema).getEnumerationValues());
      }
 else {
        enumerationValues.removeRequiredLabel();
        enumerationValues.setEnabled(Boolean.FALSE);
        enumerationValues.setModelObject(null);
      }
      target.add(schemaForm);
    }
  }
);
  final AutoCompleteTextField mandatoryCondition=new AutoCompleteTextField(""String_Node_Str""){
    private static final long serialVersionUID=-2428903969518079100L;
    @Override protected Iterator getChoices(    String input){
      List<String> choices=new ArrayList<String>();
      if (Strings.isEmpty(input)) {
        choices=Collections.emptyList();
        return choices.iterator();
      }
      if (""String_Node_Str"".startsWith(input.toLowerCase())) {
        choices.add(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".startsWith(input.toLowerCase())) {
        choices.add(""String_Node_Str"");
      }
      return choices.iterator();
    }
  }
;
  mandatoryCondition.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    AjaxRequestTarget art){
    }
  }
);
  final AjaxCheckBoxPanel multivalue=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(schema,""String_Node_Str""),true);
  final AjaxCheckBoxPanel readonly=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(schema,""String_Node_Str""),true);
  final AjaxCheckBoxPanel uniqueConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(schema,""String_Node_Str""),true);
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      SchemaTO schemaTO=(SchemaTO)form.getDefaultModelObject();
      if (schemaTO.isMultivalue() && schemaTO.isUniqueConstraint()) {
        error(getString(""String_Node_Str""));
        return;
      }
      try {
        if (createFlag) {
          restClient.createSchema(kind,schemaTO);
        }
 else {
          restClient.updateSchema(kind,schemaTO);
        }
        if (callerPageRef.getPage() instanceof BasePage) {
          ((BasePage)callerPageRef.getPage()).setModalResult(true);
        }
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  schemaForm.add(name);
  schemaForm.add(conversionPattern);
  schemaForm.add(validatorClass);
  schemaForm.add(type);
  schemaForm.add(enumerationValues);
  schemaForm.add(mandatoryCondition);
  schemaForm.add(multivalue);
  schemaForm.add(readonly);
  schemaForm.add(uniqueConstraint);
  schemaForm.add(submit);
  add(schemaForm);
}"
60860,"@Override protected void onSubmit(AjaxRequestTarget target,Form form){
  if (createFlag) {
    restClient.createVirtualSchema(kind,(VirtualSchemaTO)form.getDefaultModelObject());
  }
 else {
    restClient.updateVirtualSchema(kind,(VirtualSchemaTO)form.getDefaultModelObject());
  }
  Schema callerPage=(Schema)callerPageRef.getPage();
  callerPage.setModalResult(true);
  window.close(target);
}","@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  VirtualSchemaTO schemaTO=(VirtualSchemaTO)form.getDefaultModelObject();
  try {
    if (createFlag) {
      restClient.createVirtualSchema(kind,schemaTO);
    }
 else {
      restClient.updateVirtualSchema(kind,schemaTO);
    }
    if (callerPageRef.getPage() instanceof BasePage) {
      ((BasePage)callerPageRef.getPage()).setModalResult(true);
    }
    window.close(target);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
    target.add(feedbackPanel);
  }
}"
60861,"@Override public void setSchemaModalPage(final PageReference callerPageRef,final ModalWindow window,AbstractBaseBean schema,final boolean createFlag){
  if (schema == null) {
    schema=new VirtualSchemaTO();
  }
  final Form schemaForm=new Form(""String_Node_Str"");
  schemaForm.setModel(new CompoundPropertyModel(schema));
  final AjaxTextFieldPanel name=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""),false);
  name.addRequiredLabel();
  name.setEnabled(createFlag);
  final IndicatingAjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    AjaxRequestTarget target,    Form form){
      if (createFlag) {
        restClient.createVirtualSchema(kind,(VirtualSchemaTO)form.getDefaultModelObject());
      }
 else {
        restClient.updateVirtualSchema(kind,(VirtualSchemaTO)form.getDefaultModelObject());
      }
      Schema callerPage=(Schema)callerPageRef.getPage();
      callerPage.setModalResult(true);
      window.close(target);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  schemaForm.add(name);
  schemaForm.add(submit);
  add(schemaForm);
}","@Override public void setSchemaModalPage(final PageReference callerPageRef,final ModalWindow window,AbstractBaseBean schema,final boolean createFlag){
  if (schema == null) {
    schema=new VirtualSchemaTO();
  }
  final Form schemaForm=new Form(""String_Node_Str"");
  schemaForm.setModel(new CompoundPropertyModel(schema));
  final AjaxTextFieldPanel name=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""),false);
  name.addRequiredLabel();
  name.setEnabled(createFlag);
  final IndicatingAjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      VirtualSchemaTO schemaTO=(VirtualSchemaTO)form.getDefaultModelObject();
      try {
        if (createFlag) {
          restClient.createVirtualSchema(kind,schemaTO);
        }
 else {
          restClient.updateVirtualSchema(kind,schemaTO);
        }
        if (callerPageRef.getPage() instanceof BasePage) {
          ((BasePage)callerPageRef.getPage()).setModalResult(true);
        }
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  schemaForm.add(name);
  schemaForm.add(submit);
  add(schemaForm);
}"
60862,"/** 
 * Get virtual schema names.
 * @return List of virtual schema names.
 */
public List<String> getVirtualSchemaNames(String kind){
  final List<String> userVirtualSchemasNames=new ArrayList<String>();
  try {
    final List<VirtualSchemaTO> userVirtualSchemas=Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",VirtualSchemaTO[].class));
    for (    VirtualSchemaTO schemaTO : userVirtualSchemas) {
      userVirtualSchemasNames.add(schemaTO.getName());
    }
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return userVirtualSchemasNames;
}","/** 
 * Get virtual schema names.
 * @return List of virtual schema names.
 */
public List<String> getVirtualSchemaNames(final String kind){
  final List<String> userVirtualSchemasNames=new ArrayList<String>();
  try {
    final List<VirtualSchemaTO> userVirtualSchemas=Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",VirtualSchemaTO[].class));
    for (    VirtualSchemaTO schemaTO : userVirtualSchemas) {
      userVirtualSchemasNames.add(schemaTO.getName());
    }
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return userVirtualSchemasNames;
}"
60863,"/** 
 * Create new derived user schema.
 * @param schemaTO
 */
public void createDerivedSchema(String kind,DerivedSchemaTO schemaTO){
  try {
    restTemplate.postForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",schemaTO,DerivedSchemaTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
}","/** 
 * Create new derived user schema.
 * @param schemaTO
 */
public void createDerivedSchema(final String kind,final DerivedSchemaTO schemaTO){
  restTemplate.postForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",schemaTO,DerivedSchemaTO.class);
}"
60864,"/** 
 * Create new derived user schema.
 * @param schemaTO
 */
public void createVirtualSchema(String kind,VirtualSchemaTO schemaTO){
  try {
    restTemplate.postForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",schemaTO,VirtualSchemaTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
}","/** 
 * Create new derived user schema.
 * @param schemaTO
 */
public void createVirtualSchema(final String kind,final VirtualSchemaTO schemaTO){
  restTemplate.postForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",schemaTO,VirtualSchemaTO.class);
}"
60865,"/** 
 * Load an already existent user derived schema by its name.
 * @param name (e.g.:surname)
 * @return DerivedSchemaTO
 */
public DerivedSchemaTO readDerivedSchema(String kind,String name){
  DerivedSchemaTO derivedSchemaTO=null;
  try {
    derivedSchemaTO=restTemplate.getForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str""+ name+ ""String_Node_Str"",DerivedSchemaTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return derivedSchemaTO;
}","/** 
 * Load an already existent user derived schema by its name.
 * @param name (e.g.:surname)
 * @return DerivedSchemaTO
 */
public DerivedSchemaTO readDerivedSchema(final String kind,final String name){
  DerivedSchemaTO derivedSchemaTO=null;
  try {
    derivedSchemaTO=restTemplate.getForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str""+ name+ ""String_Node_Str"",DerivedSchemaTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return derivedSchemaTO;
}"
60866,"/** 
 * Delete an already existent user derived schema by its name.
 * @param name (e.g.:surname)
 * @return schemaTO
 */
public void deleteDerivedSchema(String kind,String name){
  try {
    restTemplate.delete(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str""+ name+ ""String_Node_Str"");
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
}","/** 
 * Delete an already existent user derived schema by its name.
 * @param name (e.g.:surname)
 */
public void deleteDerivedSchema(String kind,String name){
  try {
    restTemplate.delete(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str""+ name+ ""String_Node_Str"");
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
}"
60867,"/** 
 * Update an already existent user derived schema.
 * @param schemaTO updated
 */
public void updateDerivedSchema(String kind,DerivedSchemaTO schemaTO){
  try {
    restTemplate.postForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",schemaTO,DerivedSchemaTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
}","/** 
 * Update an already existent user derived schema.
 * @param schemaTO updated
 */
public void updateDerivedSchema(final String kind,final DerivedSchemaTO schemaTO){
  restTemplate.postForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",schemaTO,DerivedSchemaTO.class);
}"
60868,"/** 
 * Get derived schemas.
 * @return List of derived schemas.
 */
public List<DerivedSchemaTO> getDerivedSchemas(String kind){
  List<DerivedSchemaTO> userDerivedSchemas=null;
  try {
    userDerivedSchemas=Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",DerivedSchemaTO[].class));
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return userDerivedSchemas;
}","/** 
 * Get derived schemas.
 * @return List of derived schemas.
 */
public List<DerivedSchemaTO> getDerivedSchemas(final String kind){
  List<DerivedSchemaTO> userDerivedSchemas=null;
  try {
    userDerivedSchemas=Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",DerivedSchemaTO[].class));
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return userDerivedSchemas;
}"
60869,"/** 
 * Update an already existent user schema.
 * @param schemaTO updated
 */
public void updateSchema(String kind,SchemaTO schemaTO){
  try {
    restTemplate.postForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",schemaTO,SchemaTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
}","/** 
 * Update an already existent user schema.
 * @param schemaTO updated
 */
public void updateSchema(String kind,SchemaTO schemaTO){
  restTemplate.postForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",schemaTO,SchemaTO.class);
}"
60870,"/** 
 * Create new user schema.
 * @param schemaTO
 */
public void createSchema(String kind,SchemaTO schemaTO){
  try {
    restTemplate.postForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",schemaTO,SchemaTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
}","/** 
 * Create new user schema.
 * @param schemaTO
 */
public void createSchema(final String kind,final SchemaTO schemaTO){
  restTemplate.postForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",schemaTO,SchemaTO.class);
}"
60871,"/** 
 * Load an already existent user schema by its name.
 * @param name (e.g.:surname)
 * @return schemaTO
 */
public SchemaTO readSchema(String kind,String name){
  SchemaTO schema=null;
  try {
    schema=restTemplate.getForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str""+ name+ ""String_Node_Str"",SchemaTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return schema;
}","/** 
 * Load an already existent user schema by its name.
 * @param name (e.g.:surname)
 * @return schemaTO
 */
public SchemaTO readSchema(final String kind,final String name){
  SchemaTO schema=null;
  try {
    schema=restTemplate.getForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str""+ name+ ""String_Node_Str"",SchemaTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return schema;
}"
60872,"/** 
 * Get schemas.
 * @return List of schamas.
 */
public List<SchemaTO> getSchemas(String kind){
  List<SchemaTO> userSchemas=null;
  try {
    userSchemas=Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",SchemaTO[].class));
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return userSchemas;
}","/** 
 * Get schemas.
 * @return List of schemas.
 */
public List<SchemaTO> getSchemas(final String kind){
  List<SchemaTO> userSchemas=null;
  try {
    userSchemas=Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",SchemaTO[].class));
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return userSchemas;
}"
60873,"/** 
 * Get schema names.
 * @return List of schema names.
 */
public List<String> getSchemaNames(String kind){
  final List<String> schemasNames=new ArrayList<String>();
  try {
    final List<SchemaTO> userSchemas=Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",SchemaTO[].class));
    for (    SchemaTO schemaTO : userSchemas) {
      schemasNames.add(schemaTO.getName());
    }
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return schemasNames;
}","/** 
 * Get schema names.
 * @return List of schema names.
 */
public List<String> getSchemaNames(final String kind){
  final List<String> schemasNames=new ArrayList<String>();
  try {
    final List<SchemaTO> userSchemas=Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",SchemaTO[].class));
    for (    SchemaTO schemaTO : userSchemas) {
      schemasNames.add(schemaTO.getName());
    }
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return schemasNames;
}"
60874,"/** 
 * Delete an already existent user schema by its name.
 * @param name (e.g.:surname)
 * @return schemaTO
 */
public void deleteSchema(String kind,String name){
  try {
    restTemplate.delete(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str""+ name+ ""String_Node_Str"");
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
}","/** 
 * Delete an already existent user schema by its name.
 * @param name (e.g.:surname)
 * @return schemaTO
 */
public void deleteSchema(String kind,String name){
  restTemplate.delete(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str""+ name+ ""String_Node_Str"");
}"
60875,"/** 
 * Get derived schemas.
 * @return List of derived schemas.
 */
public List<VirtualSchemaTO> getVirtualSchemas(String kind){
  List<VirtualSchemaTO> userVirtualSchemas=null;
  try {
    userVirtualSchemas=Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",VirtualSchemaTO[].class));
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return userVirtualSchemas;
}","/** 
 * Get derived schemas.
 * @return List of derived schemas.
 */
public List<VirtualSchemaTO> getVirtualSchemas(final String kind){
  List<VirtualSchemaTO> userVirtualSchemas=null;
  try {
    userVirtualSchemas=Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",VirtualSchemaTO[].class));
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return userVirtualSchemas;
}"
60876,"/** 
 * Get derived schema names.
 * @return List of derived schema names.
 */
public List<String> getDerivedSchemaNames(String kind){
  final List<String> userDerivedSchemasNames=new ArrayList<String>();
  try {
    final List<DerivedSchemaTO> userDerivedSchemas=Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",DerivedSchemaTO[].class));
    for (    DerivedSchemaTO schemaTO : userDerivedSchemas) {
      userDerivedSchemasNames.add(schemaTO.getName());
    }
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return userDerivedSchemasNames;
}","/** 
 * Get derived schema names.
 * @return List of derived schema names.
 */
public List<String> getDerivedSchemaNames(final String kind){
  final List<String> userDerivedSchemasNames=new ArrayList<String>();
  try {
    final List<DerivedSchemaTO> userDerivedSchemas=Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",DerivedSchemaTO[].class));
    for (    DerivedSchemaTO schemaTO : userDerivedSchemas) {
      userDerivedSchemasNames.add(schemaTO.getName());
    }
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return userDerivedSchemasNames;
}"
60877,"/** 
 * Update an already existent user derived schema.
 * @param schemaTO updated
 */
public void updateVirtualSchema(String kind,VirtualSchemaTO schemaTO){
  try {
    restTemplate.postForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",schemaTO,VirtualSchemaTO.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
}","/** 
 * Update an already existent user derived schema.
 * @param schemaTO updated
 */
public void updateVirtualSchema(final String kind,final VirtualSchemaTO schemaTO){
  restTemplate.postForObject(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str"",schemaTO,VirtualSchemaTO.class);
}"
60878,"/** 
 * Delete an already existent user derived schema by its name.
 * @param name (e.g.:surname)
 * @return schemaTO
 */
public void deleteVirtualSchema(String kind,String name){
  try {
    restTemplate.delete(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str""+ name+ ""String_Node_Str"");
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
}","/** 
 * Delete an already existent user derived schema by its name.
 * @param name (e.g.:surname)
 */
public void deleteVirtualSchema(final String kind,final String name){
  restTemplate.delete(baseURL + ""String_Node_Str"" + kind+ ""String_Node_Str""+ name+ ""String_Node_Str"");
}"
60879,"public void setProperties(final List<WorkflowFormPropertyTO> properties){
  if (properties == null) {
    this.properties.clear();
  }
 else {
    this.properties=properties;
  }
}","public void setProperties(final Collection<WorkflowFormPropertyTO> properties){
  this.properties.clear();
  if (properties != null) {
    this.properties.addAll(properties);
  }
}"
60880,"public boolean isEmpty(){
  return attributesToBeUpdated.isEmpty() && attributesToBeUpdated.isEmpty() && derivedAttributesToBeAdded.isEmpty()&& derivedAttributesToBeRemoved.isEmpty()&& virtualAttributesToBeUpdated.isEmpty()&& virtualAttributesToBeRemoved.isEmpty()&& resourcesToBeAdded.isEmpty()&& resourcesToBeRemoved.isEmpty();
}","public boolean isEmpty(){
  return attributesToBeUpdated.isEmpty() && attributesToBeRemoved.isEmpty() && derivedAttributesToBeAdded.isEmpty()&& derivedAttributesToBeRemoved.isEmpty()&& virtualAttributesToBeUpdated.isEmpty()&& virtualAttributesToBeRemoved.isEmpty()&& resourcesToBeAdded.isEmpty()&& resourcesToBeRemoved.isEmpty();
}"
60881,"public FieldPanel setNewModel(final List<String> list){
  setNewModel(new Model(){
    private static final long serialVersionUID=1088212074765051906L;
    @Override public Serializable getObject(){
      return list != null && !list.isEmpty() ? list.get(0) : null;
    }
    @Override public void setObject(    Serializable object){
      if (object != null) {
        list.clear();
        list.add(object.toString());
      }
    }
  }
);
  return this;
}","public FieldPanel setNewModel(final List<String> list){
  setNewModel(new Model(){
    private static final long serialVersionUID=1088212074765051906L;
    @Override public Serializable getObject(){
      return list != null && !list.isEmpty() ? list.get(0) : null;
    }
    @Override public void setObject(    Serializable object){
      list.clear();
      if (object != null) {
        list.add(object.toString());
      }
    }
  }
);
  return this;
}"
60882,"@Override public void setObject(Serializable object){
  if (object != null) {
    list.clear();
    list.add(object.toString());
  }
}","@Override public void setObject(Serializable object){
  list.clear();
  if (object != null) {
    list.add(object.toString());
  }
}"
60883,"@Override public void onClick(final AjaxRequestTarget target){
  try {
    userRestClient.delete(model.getObject().getId());
    info(getString(""String_Node_Str""));
  }
 catch (  SyncopeClientCompositeErrorException scce) {
    error(scce.getMessage());
  }
  target.add(feedbackPanel);
  final EventDataWrapper data=new EventDataWrapper();
  data.setTarget(target);
  send(getParent(),Broadcast.BREADTH,data);
}","@Override public void onClick(final AjaxRequestTarget target){
  try {
    userRestClient.delete(model.getObject().getId());
    info(getString(""String_Node_Str""));
  }
 catch (  SyncopeClientCompositeErrorException scce) {
    error(scce.getMessage());
  }
  target.add(feedbackPanel);
  final EventDataWrapper data=new EventDataWrapper();
  data.setTarget(target);
  send(getPage(),Broadcast.BREADTH,data);
}"
60884,"private List<IColumn<UserTO>> getColumns(){
  final List<IColumn<UserTO>> columns=new ArrayList<IColumn<UserTO>>();
  for (  String name : preferences.getList(getRequest(),Constants.PREF_USERS_DETAILS_VIEW)) {
    Field field=null;
    try {
      field=UserTO.class.getDeclaredField(name);
    }
 catch (    Exception ue) {
      LOG.debug(""String_Node_Str"",name,ue);
      try {
        field=AbstractAttributableTO.class.getDeclaredField(name);
      }
 catch (      Exception aae) {
        LOG.error(""String_Node_Str"",name,aae);
      }
    }
    if (""String_Node_Str"".equalsIgnoreCase(name)) {
      columns.add(new TokenColumn(""String_Node_Str""));
    }
 else     if (field != null && field.getType().equals(Date.class)) {
      columns.add(new DatePropertyColumn<UserTO>(new ResourceModel(name,name),name,name));
    }
 else {
      columns.add(new PropertyColumn(new ResourceModel(name,name),name,name));
    }
  }
  for (  String name : preferences.getList(getRequest(),Constants.PREF_USERS_ATTRIBUTES_VIEW)) {
    columns.add(new UserAttrColumn(name,UserAttrColumn.SchemaType.schema));
  }
  for (  String name : preferences.getList(getRequest(),Constants.PREF_USERS_DERIVED_ATTRIBUTES_VIEW)) {
    columns.add(new UserAttrColumn(name,UserAttrColumn.SchemaType.derivedSchema));
  }
  for (  String name : preferences.getList(getRequest(),Constants.PREF_USERS_VIRTUAL_ATTRIBUTES_VIEW)) {
    columns.add(new UserAttrColumn(name,UserAttrColumn.SchemaType.virtualSchema));
  }
  if (columns.isEmpty()) {
    columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
    columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
    columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  }
  columns.add(new AbstractColumn<UserTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public String getCssClass(){
      return ""String_Node_Str"";
    }
    @Override public void populateItem(    final Item<ICellPopulator<UserTO>> cellItem,    final String componentId,    final IModel<UserTO> model){
      Panel panel=new EditLinkPanel(componentId,model);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      panel.add(new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          editmodal.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new UserModalPage(page.getPageReference(),editmodal,model.getObject());
            }
          }
);
          editmodal.show(target);
        }
      }
);
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<UserTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public String getCssClass(){
      return ""String_Node_Str"";
    }
    @Override public void populateItem(    final Item<ICellPopulator<UserTO>> cellItem,    final String componentId,    final IModel<UserTO> model){
      Panel panel=new DeleteLinkPanel(componentId,model);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      panel.add(new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            userRestClient.delete(model.getObject().getId());
            info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(feedbackPanel);
          final EventDataWrapper data=new EventDataWrapper();
          data.setTarget(target);
          send(getParent(),Broadcast.BREADTH,data);
        }
      }
);
      cellItem.add(panel);
    }
  }
);
  return columns;
}","private List<IColumn<UserTO>> getColumns(){
  final List<IColumn<UserTO>> columns=new ArrayList<IColumn<UserTO>>();
  for (  String name : preferences.getList(getRequest(),Constants.PREF_USERS_DETAILS_VIEW)) {
    Field field=null;
    try {
      field=UserTO.class.getDeclaredField(name);
    }
 catch (    Exception ue) {
      LOG.debug(""String_Node_Str"",name,ue);
      try {
        field=AbstractAttributableTO.class.getDeclaredField(name);
      }
 catch (      Exception aae) {
        LOG.error(""String_Node_Str"",name,aae);
      }
    }
    if (""String_Node_Str"".equalsIgnoreCase(name)) {
      columns.add(new TokenColumn(""String_Node_Str""));
    }
 else     if (field != null && field.getType().equals(Date.class)) {
      columns.add(new DatePropertyColumn<UserTO>(new ResourceModel(name,name),name,name));
    }
 else {
      columns.add(new PropertyColumn(new ResourceModel(name,name),name,name));
    }
  }
  for (  String name : preferences.getList(getRequest(),Constants.PREF_USERS_ATTRIBUTES_VIEW)) {
    columns.add(new UserAttrColumn(name,UserAttrColumn.SchemaType.schema));
  }
  for (  String name : preferences.getList(getRequest(),Constants.PREF_USERS_DERIVED_ATTRIBUTES_VIEW)) {
    columns.add(new UserAttrColumn(name,UserAttrColumn.SchemaType.derivedSchema));
  }
  for (  String name : preferences.getList(getRequest(),Constants.PREF_USERS_VIRTUAL_ATTRIBUTES_VIEW)) {
    columns.add(new UserAttrColumn(name,UserAttrColumn.SchemaType.virtualSchema));
  }
  if (columns.isEmpty()) {
    columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
    columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
    columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  }
  columns.add(new AbstractColumn<UserTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public String getCssClass(){
      return ""String_Node_Str"";
    }
    @Override public void populateItem(    final Item<ICellPopulator<UserTO>> cellItem,    final String componentId,    final IModel<UserTO> model){
      Panel panel=new EditLinkPanel(componentId,model);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      panel.add(new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          editmodal.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new UserModalPage(page.getPageReference(),editmodal,model.getObject());
            }
          }
);
          editmodal.show(target);
        }
      }
);
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<UserTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public String getCssClass(){
      return ""String_Node_Str"";
    }
    @Override public void populateItem(    final Item<ICellPopulator<UserTO>> cellItem,    final String componentId,    final IModel<UserTO> model){
      Panel panel=new DeleteLinkPanel(componentId,model);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      panel.add(new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            userRestClient.delete(model.getObject().getId());
            info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException scce) {
            error(scce.getMessage());
          }
          target.add(feedbackPanel);
          final EventDataWrapper data=new EventDataWrapper();
          data.setTarget(target);
          send(getPage(),Broadcast.BREADTH,data);
        }
      }
);
      cellItem.add(panel);
    }
  }
);
  return columns;
}"
60885,"@Override public void populateItem(final Item<ICellPopulator<UserTO>> cellItem,final String componentId,final IModel<UserTO> model){
  Panel panel=new DeleteLinkPanel(componentId,model);
  MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  panel.add(new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      try {
        userRestClient.delete(model.getObject().getId());
        info(getString(""String_Node_Str""));
      }
 catch (      SyncopeClientCompositeErrorException scce) {
        error(scce.getMessage());
      }
      target.add(feedbackPanel);
      final EventDataWrapper data=new EventDataWrapper();
      data.setTarget(target);
      send(getParent(),Broadcast.BREADTH,data);
    }
  }
);
  cellItem.add(panel);
}","@Override public void populateItem(final Item<ICellPopulator<UserTO>> cellItem,final String componentId,final IModel<UserTO> model){
  Panel panel=new DeleteLinkPanel(componentId,model);
  MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  panel.add(new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      try {
        userRestClient.delete(model.getObject().getId());
        info(getString(""String_Node_Str""));
      }
 catch (      SyncopeClientCompositeErrorException scce) {
        error(scce.getMessage());
      }
      target.add(feedbackPanel);
      final EventDataWrapper data=new EventDataWrapper();
      data.setTarget(target);
      send(getPage(),Broadcast.BREADTH,data);
    }
  }
);
  cellItem.add(panel);
}"
60886,"public ConflictResolutionAction getConflictResolutionAction(){
  return conflictResolutionAction;
}","public ConflictResolutionAction getConflictResolutionAction(){
  if (conflictResolutionAction == null) {
    return conflictResolutionAction.IGNORE;
  }
 else {
    return conflictResolutionAction;
  }
}"
60887,"public void setConflictResolutionAction(ConflictResolutionAction conflictResolutionAction){
  this.conflictResolutionAction=conflictResolutionAction;
}","public void setConflictResolutionAction(final ConflictResolutionAction conflictResolutionAction){
  this.conflictResolutionAction=conflictResolutionAction;
}"
60888,"@Override protected void populateItem(ListItem<FieldWrapper> item){
  final FieldWrapper field=item.getModelObject();
  item.add(new Label(""String_Node_Str"",new ResourceModel(field.getName())));
  final AbstractFieldPanel component;
  Method classMethod;
  try {
    if (field.getType().equals(ConflictResolutionAction.class)) {
      classMethod=policy.getClass().getMethod(""String_Node_Str"" + StringUtils.capitalize(field.getName()),new Class[]{});
      component=new AjaxDropDownChoicePanel(""String_Node_Str"",field.getName(),new PropertyModel(policy,field.getName()),false);
      ((AjaxDropDownChoicePanel)component).setChoices(Arrays.asList(ConflictResolutionAction.values()));
      item.add(component);
      item.add(getActivationControl(component,(Enum)classMethod.invoke(policy,new Object[]{}) != null,ConflictResolutionAction.IGNORE,ConflictResolutionAction.IGNORE));
    }
 else     if (field.getType().equals(boolean.class) || field.getType().equals(Boolean.class)) {
      item.add(new AjaxCheckBoxPanel(""String_Node_Str"",field.getName(),new PropertyModel(policy,field.getName()),false));
      item.add(new Label(""String_Node_Str"",new Model(null)));
    }
 else     if (field.getType().equals(List.class) || field.getType().equals(Set.class)) {
      classMethod=policy.getClass().getMethod(""String_Node_Str"" + StringUtils.capitalize(field.getName()),new Class[]{});
      if (field.isSchemaList()) {
        component=new AjaxPalettePanel(""String_Node_Str"",new PropertyModel(policy,field.getName()),new ListModel<String>(schemas.getObject()));
        item.add(component);
        item.add(getActivationControl(component,!((List)classMethod.invoke(policy,new Object[]{})).isEmpty(),new ArrayList<String>(),new ArrayList<String>()));
      }
 else {
        final FieldPanel panel=new AjaxTextFieldPanel(""String_Node_Str"",field.getName(),new Model(null),true);
        panel.setRequired(true);
        component=new MultiValueSelectorPanel<String>(""String_Node_Str"",new PropertyModel(policy,field.getName()),String.class,panel);
        item.add(component);
        final List<String> reinitializedValue=new ArrayList<String>();
        reinitializedValue.add(""String_Node_Str"");
        item.add(getActivationControl(component,!((List<String>)classMethod.invoke(policy,new Object[]{})).isEmpty(),(Serializable)new ArrayList<String>(),(Serializable)reinitializedValue));
      }
    }
 else     if (field.getType().equals(int.class) || field.getType().equals(Integer.class)) {
      classMethod=policy.getClass().getMethod(""String_Node_Str"" + StringUtils.capitalize(field.getName()),new Class[]{});
      component=new AjaxTextFieldPanel(""String_Node_Str"",field.getName(),new PropertyModel(policy,field.getName()),false);
      item.add(component);
      item.add(getActivationControl(component,(Integer)classMethod.invoke(policy,new Object[]{}) > 0,0,0));
    }
 else {
      item.add(new AjaxCheckBoxPanel(""String_Node_Str"",field.getName(),new Model(),false));
      item.add(new Label(""String_Node_Str"",new Model(null)));
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
}","@Override protected void populateItem(ListItem<FieldWrapper> item){
  final FieldWrapper field=item.getModelObject();
  item.add(new Label(""String_Node_Str"",new ResourceModel(field.getName())));
  final AbstractFieldPanel component;
  Method classMethod;
  try {
    if (field.getType().equals(ConflictResolutionAction.class)) {
      classMethod=policy.getClass().getMethod(""String_Node_Str"" + StringUtils.capitalize(field.getName()),new Class[]{});
      component=new AjaxDropDownChoicePanel(""String_Node_Str"",field.getName(),new PropertyModel(policy,field.getName()),false);
      ((AjaxDropDownChoicePanel)component).setChoices(Arrays.asList(ConflictResolutionAction.values()));
      item.add(component);
      item.add(getActivationControl(component,(Enum)classMethod.invoke(policy,new Object[]{}) != null,ConflictResolutionAction.IGNORE,ConflictResolutionAction.IGNORE));
    }
 else     if (field.getType().equals(boolean.class) || field.getType().equals(Boolean.class)) {
      item.add(new AjaxCheckBoxPanel(""String_Node_Str"",field.getName(),new PropertyModel(policy,field.getName()),false));
      item.add(new Label(""String_Node_Str"",new Model(null)));
    }
 else     if (field.getType().equals(List.class) || field.getType().equals(Set.class)) {
      classMethod=policy.getClass().getMethod(""String_Node_Str"" + StringUtils.capitalize(field.getName()),new Class[]{});
      if (field.getSchemaList() != null) {
        final List values=schemas.getObject();
        if (field.getSchemaList().extended()) {
          values.add(""String_Node_Str"");
          values.add(""String_Node_Str"");
        }
        component=new AjaxPalettePanel(""String_Node_Str"",new PropertyModel(policy,field.getName()),new ListModel<String>(values));
        item.add(component);
        item.add(getActivationControl(component,!((List)classMethod.invoke(policy,new Object[]{})).isEmpty(),new ArrayList<String>(),new ArrayList<String>()));
      }
 else {
        final FieldPanel panel=new AjaxTextFieldPanel(""String_Node_Str"",field.getName(),new Model(null),true);
        panel.setRequired(true);
        component=new MultiValueSelectorPanel<String>(""String_Node_Str"",new PropertyModel(policy,field.getName()),String.class,panel);
        item.add(component);
        final List<String> reinitializedValue=new ArrayList<String>();
        reinitializedValue.add(""String_Node_Str"");
        item.add(getActivationControl(component,!((List<String>)classMethod.invoke(policy,new Object[]{})).isEmpty(),(Serializable)new ArrayList<String>(),(Serializable)reinitializedValue));
      }
    }
 else     if (field.getType().equals(int.class) || field.getType().equals(Integer.class)) {
      classMethod=policy.getClass().getMethod(""String_Node_Str"" + StringUtils.capitalize(field.getName()),new Class[]{});
      component=new AjaxTextFieldPanel(""String_Node_Str"",field.getName(),new PropertyModel(policy,field.getName()),false);
      item.add(component);
      item.add(getActivationControl(component,(Integer)classMethod.invoke(policy,new Object[]{}) > 0,0,0));
    }
 else {
      item.add(new AjaxCheckBoxPanel(""String_Node_Str"",field.getName(),new Model(),false));
      item.add(new Label(""String_Node_Str"",new Model(null)));
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
}"
60889,"public void setSchemaList(boolean schemaList){
  this.schemaList=schemaList;
}","public void setSchemaList(final SchemaList schemaList){
  this.schemaList=schemaList;
}"
60890,"public PolicyBeanPanel(final String id,final AbstractPolicySpec policy){
  super(id);
  FieldWrapper fieldWrapper=null;
  final List<FieldWrapper> items=new ArrayList<FieldWrapper>();
  for (  Field field : policy.getClass().getDeclaredFields()) {
    if (!""String_Node_Str"".equals(field.getName())) {
      fieldWrapper=new FieldWrapper();
      fieldWrapper.setName(field.getName());
      fieldWrapper.setType(field.getType());
      fieldWrapper.setSchemaList(field.getAnnotation(SchemaList.class) != null);
      items.add(fieldWrapper);
    }
  }
  final ListView<FieldWrapper> policies=new ListView<FieldWrapper>(""String_Node_Str"",items){
    private static final long serialVersionUID=9101744072914090143L;
    @Override protected void populateItem(    ListItem<FieldWrapper> item){
      final FieldWrapper field=item.getModelObject();
      item.add(new Label(""String_Node_Str"",new ResourceModel(field.getName())));
      final AbstractFieldPanel component;
      Method classMethod;
      try {
        if (field.getType().equals(ConflictResolutionAction.class)) {
          classMethod=policy.getClass().getMethod(""String_Node_Str"" + StringUtils.capitalize(field.getName()),new Class[]{});
          component=new AjaxDropDownChoicePanel(""String_Node_Str"",field.getName(),new PropertyModel(policy,field.getName()),false);
          ((AjaxDropDownChoicePanel)component).setChoices(Arrays.asList(ConflictResolutionAction.values()));
          item.add(component);
          item.add(getActivationControl(component,(Enum)classMethod.invoke(policy,new Object[]{}) != null,ConflictResolutionAction.IGNORE,ConflictResolutionAction.IGNORE));
        }
 else         if (field.getType().equals(boolean.class) || field.getType().equals(Boolean.class)) {
          item.add(new AjaxCheckBoxPanel(""String_Node_Str"",field.getName(),new PropertyModel(policy,field.getName()),false));
          item.add(new Label(""String_Node_Str"",new Model(null)));
        }
 else         if (field.getType().equals(List.class) || field.getType().equals(Set.class)) {
          classMethod=policy.getClass().getMethod(""String_Node_Str"" + StringUtils.capitalize(field.getName()),new Class[]{});
          if (field.isSchemaList()) {
            component=new AjaxPalettePanel(""String_Node_Str"",new PropertyModel(policy,field.getName()),new ListModel<String>(schemas.getObject()));
            item.add(component);
            item.add(getActivationControl(component,!((List)classMethod.invoke(policy,new Object[]{})).isEmpty(),new ArrayList<String>(),new ArrayList<String>()));
          }
 else {
            final FieldPanel panel=new AjaxTextFieldPanel(""String_Node_Str"",field.getName(),new Model(null),true);
            panel.setRequired(true);
            component=new MultiValueSelectorPanel<String>(""String_Node_Str"",new PropertyModel(policy,field.getName()),String.class,panel);
            item.add(component);
            final List<String> reinitializedValue=new ArrayList<String>();
            reinitializedValue.add(""String_Node_Str"");
            item.add(getActivationControl(component,!((List<String>)classMethod.invoke(policy,new Object[]{})).isEmpty(),(Serializable)new ArrayList<String>(),(Serializable)reinitializedValue));
          }
        }
 else         if (field.getType().equals(int.class) || field.getType().equals(Integer.class)) {
          classMethod=policy.getClass().getMethod(""String_Node_Str"" + StringUtils.capitalize(field.getName()),new Class[]{});
          component=new AjaxTextFieldPanel(""String_Node_Str"",field.getName(),new PropertyModel(policy,field.getName()),false);
          item.add(component);
          item.add(getActivationControl(component,(Integer)classMethod.invoke(policy,new Object[]{}) > 0,0,0));
        }
 else {
          item.add(new AjaxCheckBoxPanel(""String_Node_Str"",field.getName(),new Model(),false));
          item.add(new Label(""String_Node_Str"",new Model(null)));
        }
      }
 catch (      Exception e) {
        LOG.error(""String_Node_Str"",e);
      }
    }
  }
;
  add(policies);
}","public PolicyBeanPanel(final String id,final AbstractPolicySpec policy){
  super(id);
  FieldWrapper fieldWrapper=null;
  final List<FieldWrapper> items=new ArrayList<FieldWrapper>();
  for (  Field field : policy.getClass().getDeclaredFields()) {
    if (!""String_Node_Str"".equals(field.getName())) {
      fieldWrapper=new FieldWrapper();
      fieldWrapper.setName(field.getName());
      fieldWrapper.setType(field.getType());
      final SchemaList schemaList=field.getAnnotation(SchemaList.class);
      fieldWrapper.setSchemaList(schemaList);
      items.add(fieldWrapper);
    }
  }
  final ListView<FieldWrapper> policies=new ListView<FieldWrapper>(""String_Node_Str"",items){
    private static final long serialVersionUID=9101744072914090143L;
    @Override protected void populateItem(    ListItem<FieldWrapper> item){
      final FieldWrapper field=item.getModelObject();
      item.add(new Label(""String_Node_Str"",new ResourceModel(field.getName())));
      final AbstractFieldPanel component;
      Method classMethod;
      try {
        if (field.getType().equals(ConflictResolutionAction.class)) {
          classMethod=policy.getClass().getMethod(""String_Node_Str"" + StringUtils.capitalize(field.getName()),new Class[]{});
          component=new AjaxDropDownChoicePanel(""String_Node_Str"",field.getName(),new PropertyModel(policy,field.getName()),false);
          ((AjaxDropDownChoicePanel)component).setChoices(Arrays.asList(ConflictResolutionAction.values()));
          item.add(component);
          item.add(getActivationControl(component,(Enum)classMethod.invoke(policy,new Object[]{}) != null,ConflictResolutionAction.IGNORE,ConflictResolutionAction.IGNORE));
        }
 else         if (field.getType().equals(boolean.class) || field.getType().equals(Boolean.class)) {
          item.add(new AjaxCheckBoxPanel(""String_Node_Str"",field.getName(),new PropertyModel(policy,field.getName()),false));
          item.add(new Label(""String_Node_Str"",new Model(null)));
        }
 else         if (field.getType().equals(List.class) || field.getType().equals(Set.class)) {
          classMethod=policy.getClass().getMethod(""String_Node_Str"" + StringUtils.capitalize(field.getName()),new Class[]{});
          if (field.getSchemaList() != null) {
            final List values=schemas.getObject();
            if (field.getSchemaList().extended()) {
              values.add(""String_Node_Str"");
              values.add(""String_Node_Str"");
            }
            component=new AjaxPalettePanel(""String_Node_Str"",new PropertyModel(policy,field.getName()),new ListModel<String>(values));
            item.add(component);
            item.add(getActivationControl(component,!((List)classMethod.invoke(policy,new Object[]{})).isEmpty(),new ArrayList<String>(),new ArrayList<String>()));
          }
 else {
            final FieldPanel panel=new AjaxTextFieldPanel(""String_Node_Str"",field.getName(),new Model(null),true);
            panel.setRequired(true);
            component=new MultiValueSelectorPanel<String>(""String_Node_Str"",new PropertyModel(policy,field.getName()),String.class,panel);
            item.add(component);
            final List<String> reinitializedValue=new ArrayList<String>();
            reinitializedValue.add(""String_Node_Str"");
            item.add(getActivationControl(component,!((List<String>)classMethod.invoke(policy,new Object[]{})).isEmpty(),(Serializable)new ArrayList<String>(),(Serializable)reinitializedValue));
          }
        }
 else         if (field.getType().equals(int.class) || field.getType().equals(Integer.class)) {
          classMethod=policy.getClass().getMethod(""String_Node_Str"" + StringUtils.capitalize(field.getName()),new Class[]{});
          component=new AjaxTextFieldPanel(""String_Node_Str"",field.getName(),new PropertyModel(policy,field.getName()),false);
          item.add(component);
          item.add(getActivationControl(component,(Integer)classMethod.invoke(policy,new Object[]{}) > 0,0,0));
        }
 else {
          item.add(new AjaxCheckBoxPanel(""String_Node_Str"",field.getName(),new Model(),false));
          item.add(new Label(""String_Node_Str"",new Model(null)));
        }
      }
 catch (      Exception e) {
        LOG.error(""String_Node_Str"",e);
      }
    }
  }
;
  add(policies);
}"
60891,"@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  final RoleTO roleTO=(RoleTO)form.getDefaultModelObject();
  try {
    final List<String> entitlementList=new ArrayList<String>(entitlementsPalette.getModelCollection().size());
    for (    String entitlement : entitlementsPalette.getModelCollection()) {
      entitlementList.add(entitlement);
    }
    roleTO.setEntitlements(entitlementList);
    if (createFlag) {
      roleRestClient.createRole(roleTO);
    }
 else {
      setupRoleMod(roleTO);
      if (roleMod != null) {
        roleRestClient.updateRole(roleMod);
      }
    }
    ((Roles)callerPageRef.getPage()).setOperationResult(true);
    window.close(target);
  }
 catch (  Exception e) {
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
    target.add(feedbackPanel);
  }
}","@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  final RoleTO roleTO=(RoleTO)form.getDefaultModelObject();
  try {
    final List<String> entitlementList=new ArrayList<String>(attributesPanel.getEntitlementsPalette().getModelCollection().size());
    for (    String entitlement : attributesPanel.getEntitlementsPalette().getModelCollection()) {
      entitlementList.add(entitlement);
    }
    roleTO.setEntitlements(entitlementList);
    if (createFlag) {
      roleRestClient.createRole(roleTO);
    }
 else {
      setupRoleMod(roleTO);
      if (roleMod != null) {
        roleRestClient.updateRole(roleMod);
      }
    }
    ((Roles)callerPageRef.getPage()).setModalResult(true);
    window.close(target);
  }
 catch (  Exception e) {
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
    target.add(feedbackPanel);
  }
}"
60892,"/** 
 * Constructor.
 * @param callerPageRef
 * @param window
 * @param roleTO
 * @param createFlag
 */
public RoleModalPage(final PageReference callerPageRef,final ModalWindow window,final RoleTO roleTO,final boolean createFlag){
  super();
  if (!createFlag) {
    cloneOldRoleTO(roleTO);
  }
  final Form form=new Form(""String_Node_Str"");
  add(new Label(""String_Node_Str"",roleTO.getId() != 0 ? roleTO.getDisplayName() : ""String_Node_Str""));
  form.setModel(new CompoundPropertyModel(roleTO));
  final AjaxTextFieldPanel name=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(roleTO,""String_Node_Str""),false);
  name.addRequiredLabel();
  form.add(name);
  form.add(new AttributesPanel(""String_Node_Str"",roleTO,form));
  final AjaxCheckBoxPanel inhAttributes=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(roleTO,""String_Node_Str""),false);
  form.add(inhAttributes);
  form.add(new DerivedAttributesPanel(""String_Node_Str"",roleTO));
  final AjaxCheckBoxPanel inhDerivedAttributes=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(roleTO,""String_Node_Str""),false);
  inhDerivedAttributes.setOutputMarkupId(true);
  form.add(inhDerivedAttributes);
  form.add(new VirtualAttributesPanel(""String_Node_Str"",roleTO));
  final AjaxCheckBoxPanel inhVirtualAttributes=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(roleTO,""String_Node_Str""),false);
  inhVirtualAttributes.setOutputMarkupId(true);
  form.add(inhVirtualAttributes);
  form.add(new RoleSecurityPanel(""String_Node_Str"",roleTO));
  form.add(new ResourcesPanel(""String_Node_Str"",roleTO));
  ListModel<String> selectedEntitlements=new ListModel<String>(roleTO.getEntitlements());
  ListModel<String> availableEntitlements=new ListModel<String>(entitlementRestClient.getAllEntitlements());
  final Palette<String> entitlementsPalette=new Palette(""String_Node_Str"",selectedEntitlements,availableEntitlements,new SelectChoiceRenderer(),20,false);
  form.add(entitlementsPalette);
  submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final RoleTO roleTO=(RoleTO)form.getDefaultModelObject();
      try {
        final List<String> entitlementList=new ArrayList<String>(entitlementsPalette.getModelCollection().size());
        for (        String entitlement : entitlementsPalette.getModelCollection()) {
          entitlementList.add(entitlement);
        }
        roleTO.setEntitlements(entitlementList);
        if (createFlag) {
          roleRestClient.createRole(roleTO);
        }
 else {
          setupRoleMod(roleTO);
          if (roleMod != null) {
            roleRestClient.updateRole(roleMod);
          }
        }
        ((Roles)callerPageRef.getPage()).setOperationResult(true);
        window.close(target);
      }
 catch (      Exception e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  form.add(submit);
  add(form);
}","/** 
 * Constructor.
 * @param callerPageRef
 * @param window
 * @param roleTO
 * @param createFlag
 */
public RoleModalPage(final PageReference callerPageRef,final ModalWindow window,final RoleTO roleTO,final boolean createFlag){
  super();
  if (!createFlag) {
    cloneOldRoleTO(roleTO);
  }
  final Form form=new Form(""String_Node_Str"");
  add(new Label(""String_Node_Str"",roleTO.getId() != 0 ? roleTO.getDisplayName() : ""String_Node_Str""));
  form.setModel(new CompoundPropertyModel(roleTO));
  final RoleAttributesPanel attributesPanel=new RoleAttributesPanel(""String_Node_Str"",form,roleTO);
  form.add(attributesPanel);
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final RoleTO roleTO=(RoleTO)form.getDefaultModelObject();
      try {
        final List<String> entitlementList=new ArrayList<String>(attributesPanel.getEntitlementsPalette().getModelCollection().size());
        for (        String entitlement : attributesPanel.getEntitlementsPalette().getModelCollection()) {
          entitlementList.add(entitlement);
        }
        roleTO.setEntitlements(entitlementList);
        if (createFlag) {
          roleRestClient.createRole(roleTO);
        }
 else {
          setupRoleMod(roleTO);
          if (roleMod != null) {
            roleRestClient.updateRole(roleMod);
          }
        }
        ((Roles)callerPageRef.getPage()).setModalResult(true);
        window.close(target);
      }
 catch (      Exception e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  form.add(submit);
  add(form);
}"
60893,"@Override public void onClose(final AjaxRequestTarget target){
  target.add(container);
  if (operationResult) {
    getSession().info(getString(""String_Node_Str""));
  }
  setResponsePage(Roles.class);
}","@Override public void onClose(final AjaxRequestTarget target){
  final TreeNodeClickUpdate data=new TreeNodeClickUpdate(target,nodePanel.getSelectedNode());
  send(getPage(),Broadcast.BREADTH,data);
  target.add(container);
  if (modalResult) {
    getSession().info(getString(""String_Node_Str""));
    target.add(feedbackPanel);
    modalResult=false;
  }
}"
60894,"public Roles(final PageParameters parameters){
  super(parameters);
  add(createRoleWin=new ModalWindow(""String_Node_Str""));
  createRoleWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createRoleWin.setInitialHeight(WIN_HEIGHT);
  createRoleWin.setInitialWidth(WIN_WIDTH);
  createRoleWin.setCookieName(""String_Node_Str"");
  container=new WebMarkupContainer(""String_Node_Str"");
  IColumn[] columns=new IColumn[]{new PropertyTreeColumn(new ColumnLocation(Alignment.LEFT,30,Unit.EM),getString(""String_Node_Str""),""String_Node_Str""),new PropertyEditableColumn(new ColumnLocation(Alignment.LEFT,20,Unit.EM),getString(""String_Node_Str""),""String_Node_Str"",createRoleWin,Roles.this.getPageReference())};
  Form form=new Form(""String_Node_Str"");
  add(form);
  tree=new TreeTable(""String_Node_Str"",roleTreeBuilder.build(),columns);
  form.add(tree);
  tree.getTreeState().expandAll();
  if (AjaxRequestTarget.get() != null) {
    tree.updateTree();
  }
  container.add(tree);
  container.setOutputMarkupId(true);
  form.add(container);
  createRoleWin.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    @Override public void onClose(    final AjaxRequestTarget target){
      target.add(container);
      if (operationResult) {
        getSession().info(getString(""String_Node_Str""));
      }
      setResponsePage(Roles.class);
    }
  }
);
}","public Roles(final PageParameters parameters){
  super(parameters);
  add(createRoleWin=new ModalWindow(""String_Node_Str""));
  createRoleWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createRoleWin.setInitialHeight(WIN_HEIGHT);
  createRoleWin.setInitialWidth(WIN_WIDTH);
  createRoleWin.setCookieName(""String_Node_Str"");
  container=new WebMarkupContainer(""String_Node_Str"");
  container.setOutputMarkupId(true);
  add(container);
  final TreeRolePanel treePanel=new TreeRolePanel(""String_Node_Str"");
  treePanel.setOutputMarkupId(true);
  container.add(treePanel);
  final RoleSummaryPanel nodePanel=new RoleSummaryPanel(""String_Node_Str"",createRoleWin,Roles.this.getPageReference());
  nodePanel.setOutputMarkupId(true);
  container.add(nodePanel);
  createRoleWin.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=8804221891699487139L;
    @Override public void onClose(    final AjaxRequestTarget target){
      final TreeNodeClickUpdate data=new TreeNodeClickUpdate(target,nodePanel.getSelectedNode());
      send(getPage(),Broadcast.BREADTH,data);
      target.add(container);
      if (modalResult) {
        getSession().info(getString(""String_Node_Str""));
        target.add(feedbackPanel);
        modalResult=false;
      }
    }
  }
);
  container.add(createRoleWin);
}"
60895,"public UserModalPage(final PageReference callerPageRef,final ModalWindow window,final UserTO userTO){
  super();
  setBean(userTO);
  if (userTO.getId() > 0) {
    cloneOldUserTO(userTO);
  }
  add(new Label(""String_Node_Str"",String.valueOf(userTO.getId())));
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(userTO));
  form.add(new UserDetailsPanel(""String_Node_Str"",userTO,form));
  form.add(new AttributesPanel(""String_Node_Str"",userTO,form));
  form.add(new DerivedAttributesPanel(""String_Node_Str"",userTO));
  form.add(new VirtualAttributesPanel(""String_Node_Str"",userTO));
  form.add(new ResourcesPanel(""String_Node_Str"",userTO));
  form.add(new RolesPanel(""String_Node_Str"",userTO));
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final UserTO userTO=(UserTO)form.getModelObject();
      try {
        if (userTO.getId() == 0) {
          userRestClient.create(userTO);
        }
 else {
          setupUserMod(userTO);
          if (userMod != null) {
            userRestClient.update(userMod);
          }
        }
        ((Users)callerPageRef.getPage()).setModalResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        LOG.error(""String_Node_Str"",e);
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=null;
  if (userTO.getId() == 0) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,allowedRoles);
  form.add(submit);
  add(form);
}","public UserModalPage(final PageReference callerPageRef,final ModalWindow window,final UserTO userTO){
  super();
  setBean(userTO);
  if (userTO.getId() > 0) {
    cloneOldUserTO(userTO);
  }
  add(new Label(""String_Node_Str"",String.valueOf(userTO.getId())));
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(userTO));
  form.add(new UserDetailsPanel(""String_Node_Str"",userTO,form));
  form.add(new AttributesPanel(""String_Node_Str"",userTO,form));
  form.add(new DerivedAttributesPanel(""String_Node_Str"",userTO));
  form.add(new VirtualAttributesPanel(""String_Node_Str"",userTO));
  form.add(new ResourcesPanel(""String_Node_Str"",userTO));
  form.add(new RolesPanel(""String_Node_Str"",userTO));
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final UserTO userTO=(UserTO)form.getModelObject();
      try {
        if (userTO.getId() == 0) {
          userRestClient.create(userTO);
        }
 else {
          setupUserMod(userTO);
          if (userMod != null) {
            userRestClient.update(userMod);
          }
        }
        ((BasePage)callerPageRef.getPage()).setModalResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        LOG.error(""String_Node_Str"",e);
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=null;
  if (userTO.getId() == 0) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,allowedRoles);
  form.add(submit);
  add(form);
}"
60896,"@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  final UserTO userTO=(UserTO)form.getModelObject();
  try {
    if (userTO.getId() == 0) {
      userRestClient.create(userTO);
    }
 else {
      setupUserMod(userTO);
      if (userMod != null) {
        userRestClient.update(userMod);
      }
    }
    ((Users)callerPageRef.getPage()).setModalResult(true);
    window.close(target);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
    target.add(feedbackPanel);
  }
}","@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  final UserTO userTO=(UserTO)form.getModelObject();
  try {
    if (userTO.getId() == 0) {
      userRestClient.create(userTO);
    }
 else {
      setupUserMod(userTO);
      if (userMod != null) {
        userRestClient.update(userMod);
      }
    }
    ((BasePage)callerPageRef.getPage()).setModalResult(true);
    window.close(target);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
    target.add(feedbackPanel);
  }
}"
60897,"public <T extends AbstractAttributableTO>ResultSetPanel(final String id,final boolean filtered,final NodeCond searchCond,final PageReference callerRef){
  super(id);
  setOutputMarkupId(true);
  page=(Users)callerRef.getPage();
  this.filtered=filtered;
  this.filter=searchCond;
  this.feedbackPanel=page.getFeedbackPanel();
  editmodal.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editmodal.setInitialHeight(EDIT_MODAL_WIN_HEIGHT);
  editmodal.setInitialWidth(EDIT_MODAL_WIN_WIDTH);
  editmodal.setCookieName(""String_Node_Str"");
  add(editmodal);
  final ModalWindow displaymodal=new ModalWindow(""String_Node_Str"");
  displaymodal.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  displaymodal.setInitialHeight(DISPLAYATTRS_MODAL_WIN_HEIGHT);
  displaymodal.setInitialWidth(DISPLAYATTRS_MODAL_WIN_WIDTH);
  displaymodal.setCookieName(""String_Node_Str"");
  add(displaymodal);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.setOutputMarkupId(true);
  add(container);
  updateResultTable(false);
  AjaxLink displayAttrsLink=new IndicatingAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      displaymodal.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new DisplayAttributesModalPage(page.getPageReference(),displaymodal);
        }
      }
);
      displaymodal.show(target);
    }
  }
;
  displayAttrsLink.add(new Behavior(){
    @Override public void onComponentTag(    final Component component,    final ComponentTag tag){
      if (resultTable.getRowCount() > rows) {
        tag.remove(""String_Node_Str"");
        tag.put(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        tag.remove(""String_Node_Str"");
        tag.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  MetaDataRoleAuthorizationStrategy.authorize(displayAttrsLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  container.add(displayAttrsLink);
  final Form paginatorForm=new Form(""String_Node_Str"");
  container.add(paginatorForm);
  final DropDownChoice<Integer> rowsChooser=new DropDownChoice<Integer>(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),preferences.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      preferences.set(getRequest(),getResponse(),Constants.PREF_USERS_PAGINATOR_ROWS,String.valueOf(rows));
      final EventDataWrapper data=new EventDataWrapper();
      data.setTarget(target);
      send(getParent(),Broadcast.BREADTH,data);
    }
  }
);
  paginatorForm.add(rowsChooser);
  setWindowClosedReloadCallback(editmodal);
  setWindowClosedReloadCallback(displaymodal);
}","public <T extends AbstractAttributableTO>ResultSetPanel(final String id,final boolean filtered,final NodeCond searchCond,final PageReference callerRef){
  super(id);
  setOutputMarkupId(true);
  page=(BasePage)callerRef.getPage();
  this.filtered=filtered;
  this.filter=searchCond;
  this.feedbackPanel=page.getFeedbackPanel();
  editmodal.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editmodal.setInitialHeight(EDIT_MODAL_WIN_HEIGHT);
  editmodal.setInitialWidth(EDIT_MODAL_WIN_WIDTH);
  editmodal.setCookieName(""String_Node_Str"");
  add(editmodal);
  final ModalWindow displaymodal=new ModalWindow(""String_Node_Str"");
  displaymodal.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  displaymodal.setInitialHeight(DISPLAYATTRS_MODAL_WIN_HEIGHT);
  displaymodal.setInitialWidth(DISPLAYATTRS_MODAL_WIN_WIDTH);
  displaymodal.setCookieName(""String_Node_Str"");
  add(displaymodal);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.setOutputMarkupId(true);
  add(container);
  updateResultTable(false);
  AjaxLink displayAttrsLink=new IndicatingAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      displaymodal.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new DisplayAttributesModalPage(page.getPageReference(),displaymodal);
        }
      }
);
      displaymodal.show(target);
    }
  }
;
  displayAttrsLink.add(new Behavior(){
    @Override public void onComponentTag(    final Component component,    final ComponentTag tag){
      if (resultTable.getRowCount() > rows) {
        tag.remove(""String_Node_Str"");
        tag.put(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        tag.remove(""String_Node_Str"");
        tag.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  MetaDataRoleAuthorizationStrategy.authorize(displayAttrsLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  container.add(displayAttrsLink);
  final Form paginatorForm=new Form(""String_Node_Str"");
  container.add(paginatorForm);
  final DropDownChoice<Integer> rowsChooser=new DropDownChoice<Integer>(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),preferences.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      preferences.set(getRequest(),getResponse(),Constants.PREF_USERS_PAGINATOR_ROWS,String.valueOf(rows));
      final EventDataWrapper data=new EventDataWrapper();
      data.setTarget(target);
      send(getParent(),Broadcast.BREADTH,data);
    }
  }
);
  paginatorForm.add(rowsChooser);
  setWindowClosedReloadCallback(editmodal);
  setWindowClosedReloadCallback(displaymodal);
}"
60898,"public ResourceModalPage(final PageReference callPageRef,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  super();
  uSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  uDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  uVirSchemaAttrNames=schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
  final IModel<List<ConnInstanceTO>> connectors=new LoadableDetachableModel<List<ConnInstanceTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnInstanceTO> load(){
      return connectorRestClient.getAllConnectors();
    }
  }
;
  final IModel<List<SourceMappingType>> sourceMappingTypes=new LoadableDetachableModel<List<SourceMappingType>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<SourceMappingType> load(){
      return Arrays.asList(SourceMappingType.values());
    }
  }
;
  final IModel<List<ConnConfProperty>> connectorPropertiesModel=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      Set<ConnConfProperty> props=resourceTO.getConnectorConfigurationProperties();
      if (props == null || props.isEmpty() || createFlag) {
        props=overridableConnectorProperties;
      }
      return new ArrayList<ConnConfProperty>(props);
    }
  }
;
  updateResourceSchemaNames(resourceTO);
  updateConnectorProperties(resourceTO.getConnectorId());
  final ConnInstanceTO connectorTO=new ConnInstanceTO();
  if (!createFlag) {
    connectorTO.setId(resourceTO.getConnectorId());
  }
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(resourceTO));
  final AjaxTextFieldPanel resourceName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  resourceName.setEnabled(createFlag);
  resourceName.addRequiredLabel();
  form.add(resourceName);
  final AjaxTextFieldPanel accountLink=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  form.add(accountLink);
  final AjaxCheckBoxPanel forceMandatoryConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(forceMandatoryConstraint);
  final AjaxDropDownChoicePanel<PropagationMode> optionalPropagationMode=new AjaxDropDownChoicePanel<PropagationMode>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  optionalPropagationMode.setChoices(Arrays.asList(PropagationMode.values()));
  form.add(optionalPropagationMode);
  final AjaxDropDownChoicePanel<TraceLevel> createTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  createTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(createTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> updateTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  updateTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(updateTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> deleteTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  deleteTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(deleteTraceLevel);
  mappingContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingContainer.setOutputMarkupId(true);
  form.add(mappingContainer);
  connectorPropertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  connectorPropertiesContainer.setOutputMarkupId(true);
  form.add(connectorPropertiesContainer);
  final AjaxDropDownChoicePanel<ConnInstanceTO> connector=new AjaxDropDownChoicePanel<ConnInstanceTO>(""String_Node_Str"",getString(""String_Node_Str""),new Model<ConnInstanceTO>(connectorTO),false);
  connector.setChoices(connectors.getObject());
  connector.setChoiceRenderer(new ChoiceRenderer(""String_Node_Str"",""String_Node_Str""));
  connector.getField().setModel(new IModel<ConnInstanceTO>(){
    private static final long serialVersionUID=-4202872830392400310L;
    @Override public ConnInstanceTO getObject(){
      return connectorTO;
    }
    @Override public void setObject(    final ConnInstanceTO connector){
      resourceTO.setConnectorId(connector.getId());
    }
    @Override public void detach(){
    }
  }
);
  connector.addRequiredLabel();
  connector.setEnabled(createFlag);
  form.add(connector);
  final ListView<SchemaMappingTO> mappings=new ListView<SchemaMappingTO>(""String_Node_Str"",resourceTO.getMappings()){
    private static final long serialVersionUID=4949588177564901031L;
    @Override protected void populateItem(    final ListItem<SchemaMappingTO> item){
      final SchemaMappingTO mappingTO=item.getModelObject();
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
        private static final long serialVersionUID=7170946748485726506L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int index=-1;
          for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
            if (mappingTO.equals(resourceTO.getMappings().get(i))) {
              index=i;
            }
          }
          if (index != -1) {
            resourceTO.getMappings().remove(index);
            item.getParent().removeAll();
            target.add(mappingContainer);
          }
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=-7927968187160354605L;
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      final AjaxDropDownChoicePanel sourceAttrNames=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
      sourceAttrNames.setChoices(resourceSchemaNames);
      sourceAttrNames.setRequired(true);
      sourceAttrNames.setStyleShet(""String_Node_Str"");
      if (mappingTO.getSourceMappingType() == null) {
        sourceAttrNames.setChoices(Collections.EMPTY_LIST);
      }
 else {
switch (mappingTO.getSourceMappingType()) {
case UserSchema:
          sourceAttrNames.setChoices(uSchemaAttrNames);
        break;
case UserDerivedSchema:
      sourceAttrNames.setChoices(uDerSchemaAttrNames);
    break;
case UserVirtualSchema:
  sourceAttrNames.setChoices(uVirSchemaAttrNames);
break;
case SyncopeUserId:
sourceAttrNames.setEnabled(false);
sourceAttrNames.setRequired(false);
sourceAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
case Password:
sourceAttrNames.setEnabled(false);
sourceAttrNames.setRequired(false);
sourceAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
default :
sourceAttrNames.setChoices(Collections.EMPTY_LIST);
}
}
item.add(sourceAttrNames);
final SourceMappingTypesDropDownChoice mappingTypesPanel=new SourceMappingTypesDropDownChoice(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<SourceMappingType>(mappingTO,""String_Node_Str""),sourceAttrNames);
mappingTypesPanel.setRequired(true);
mappingTypesPanel.setChoices(sourceMappingTypes.getObject());
mappingTypesPanel.setStyleShet(""String_Node_Str"");
item.add(mappingTypesPanel);
final FieldPanel destAttrName;
if (resourceSchemaNames.isEmpty()) {
destAttrName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(mappingTO,""String_Node_Str""),true);
}
 else {
destAttrName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
((AjaxDropDownChoicePanel)destAttrName).setChoices(resourceSchemaNames);
}
boolean required=mappingTO != null && !mappingTO.isAccountid() && !mappingTO.isPassword();
destAttrName.setRequired(required);
destAttrName.setEnabled(required);
destAttrName.setStyleShet(""String_Node_Str"");
item.add(destAttrName);
final AjaxTextFieldPanel mandatoryCondition=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
mandatoryCondition.setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
mandatoryCondition.setStyleShet(""String_Node_Str"");
item.add(mandatoryCondition);
final AjaxCheckBoxPanel accountId=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),false);
accountId.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
destAttrName.setEnabled(!accountId.getModelObject() && !mappingTO.isPassword());
destAttrName.setModelObject(null);
destAttrName.setRequired(!accountId.getModelObject());
target.add(destAttrName);
}
}
);
item.add(accountId);
final AjaxCheckBoxPanel password=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
password.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
destAttrName.setEnabled(!mappingTO.isAccountid() && !password.getModelObject());
destAttrName.setModelObject(null);
destAttrName.setRequired(!password.getModelObject());
target.add(destAttrName);
}
}
);
item.add(password);
}
}
;
mappings.setReuseItems(true);
mappingContainer.add(mappings);
final AjaxButton addSchemaMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-4804368561204623354L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
resourceTO.getMappings().add(new SchemaMappingTO());
target.add(mappingContainer);
}
@Override protected void onError(AjaxRequestTarget target,Form<?> form){
}
}
;
addSchemaMappingBtn.setDefaultFormProcessing(false);
addSchemaMappingBtn.setEnabled(!createFlag);
mappingContainer.add(addSchemaMappingBtn);
connectorPropertiesContainer.add(new ListView<ConnConfProperty>(""String_Node_Str"",connectorPropertiesModel){
private static final long serialVersionUID=9101744072914090143L;
@Override protected void populateItem(final ListItem<ConnConfProperty> item){
final ConnConfProperty property=item.getModelObject();
final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
item.add(label);
final FieldPanel field;
if (GUARDED_STRING.equals(property.getSchema().getType())) {
field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
}
 else {
field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),false).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
if (property.getSchema().isRequired()) {
field.addRequiredLabel();
}
}
field.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
target.add(mappingContainer);
}
}
);
item.add(field);
resourceTO.getConnectorConfigurationProperties().add(property);
}
}
);
connector.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
updateConnectorProperties(resourceTO.getConnectorId());
target.add(mappingContainer);
target.add(connectorPropertiesContainer);
}
}
);
AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
int accountIdCount=0;
for (SchemaMappingTO mapping : resourceTO.getMappings()) {
if (mapping.isAccountid()) {
accountIdCount++;
}
}
if (accountIdCount == 0 || accountIdCount > 1) {
error(getString(""String_Node_Str""));
((Resources)callPageRef.getPage()).setOperationResult(false);
}
 else {
try {
if (createFlag) {
restClient.create(resourceTO);
}
 else {
restClient.update(resourceTO);
}
((Resources)callPageRef.getPage()).setOperationResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
((Resources)callPageRef.getPage()).setOperationResult(false);
LOG.error(""String_Node_Str"",resourceTO);
}
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.add(feedbackPanel);
}
}
;
form.add(submit);
add(form);
MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",createFlag ? ""String_Node_Str"" : ""String_Node_Str""));
}","public ResourceModalPage(final PageReference callPageRef,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  super();
  uSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  uDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  uVirSchemaAttrNames=schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
  final IModel<List<ConnInstanceTO>> connectors=new LoadableDetachableModel<List<ConnInstanceTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnInstanceTO> load(){
      return connectorRestClient.getAllConnectors();
    }
  }
;
  final IModel<List<IntMappingType>> intMappingTypes=new LoadableDetachableModel<List<IntMappingType>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<IntMappingType> load(){
      return Arrays.asList(IntMappingType.values());
    }
  }
;
  final IModel<List<ConnConfProperty>> connectorPropertiesModel=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      Set<ConnConfProperty> props=resourceTO.getConnectorConfigurationProperties();
      if (props == null || props.isEmpty() || createFlag) {
        props=overridableConnectorProperties;
      }
      return new ArrayList<ConnConfProperty>(props);
    }
  }
;
  updateResourceSchemaNames(resourceTO);
  updateConnectorProperties(resourceTO.getConnectorId());
  final ConnInstanceTO connectorTO=new ConnInstanceTO();
  if (!createFlag) {
    connectorTO.setId(resourceTO.getConnectorId());
  }
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(resourceTO));
  final AjaxTextFieldPanel resourceName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  resourceName.setEnabled(createFlag);
  resourceName.addRequiredLabel();
  form.add(resourceName);
  final AjaxTextFieldPanel accountLink=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  form.add(accountLink);
  final AjaxCheckBoxPanel forceMandatoryConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(forceMandatoryConstraint);
  final AjaxDropDownChoicePanel<PropagationMode> optionalPropagationMode=new AjaxDropDownChoicePanel<PropagationMode>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  optionalPropagationMode.setChoices(Arrays.asList(PropagationMode.values()));
  form.add(optionalPropagationMode);
  final AjaxDropDownChoicePanel<TraceLevel> createTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  createTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(createTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> updateTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  updateTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(updateTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> deleteTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  deleteTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(deleteTraceLevel);
  mappingContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingContainer.setOutputMarkupId(true);
  form.add(mappingContainer);
  connectorPropertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  connectorPropertiesContainer.setOutputMarkupId(true);
  form.add(connectorPropertiesContainer);
  final AjaxDropDownChoicePanel<ConnInstanceTO> connector=new AjaxDropDownChoicePanel<ConnInstanceTO>(""String_Node_Str"",getString(""String_Node_Str""),new Model<ConnInstanceTO>(connectorTO),false);
  connector.setChoices(connectors.getObject());
  connector.setChoiceRenderer(new ChoiceRenderer(""String_Node_Str"",""String_Node_Str""));
  connector.getField().setModel(new IModel<ConnInstanceTO>(){
    private static final long serialVersionUID=-4202872830392400310L;
    @Override public ConnInstanceTO getObject(){
      return connectorTO;
    }
    @Override public void setObject(    final ConnInstanceTO connector){
      resourceTO.setConnectorId(connector.getId());
    }
    @Override public void detach(){
    }
  }
);
  connector.addRequiredLabel();
  connector.setEnabled(createFlag);
  form.add(connector);
  final ListView<SchemaMappingTO> mappings=new ListView<SchemaMappingTO>(""String_Node_Str"",resourceTO.getMappings()){
    private static final long serialVersionUID=4949588177564901031L;
    @Override protected void populateItem(    final ListItem<SchemaMappingTO> item){
      final SchemaMappingTO mappingTO=item.getModelObject();
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
        private static final long serialVersionUID=7170946748485726506L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int index=-1;
          for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
            if (mappingTO.equals(resourceTO.getMappings().get(i))) {
              index=i;
            }
          }
          if (index != -1) {
            resourceTO.getMappings().remove(index);
            item.getParent().removeAll();
            target.add(mappingContainer);
          }
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=-7927968187160354605L;
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      final AjaxDropDownChoicePanel intAttrNames=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
      intAttrNames.setChoices(resourceSchemaNames);
      intAttrNames.setRequired(true);
      intAttrNames.setStyleShet(""String_Node_Str"");
      if (mappingTO.getIntMappingType() == null) {
        intAttrNames.setChoices(Collections.EMPTY_LIST);
      }
 else {
switch (mappingTO.getIntMappingType()) {
case UserSchema:
          intAttrNames.setChoices(uSchemaAttrNames);
        break;
case UserDerivedSchema:
      intAttrNames.setChoices(uDerSchemaAttrNames);
    break;
case UserVirtualSchema:
  intAttrNames.setChoices(uVirSchemaAttrNames);
break;
case SyncopeUserId:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
case Password:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
default :
intAttrNames.setChoices(Collections.EMPTY_LIST);
}
}
item.add(intAttrNames);
final IntMappingTypesDropDownChoice mappingTypesPanel=new IntMappingTypesDropDownChoice(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<IntMappingType>(mappingTO,""String_Node_Str""),intAttrNames);
mappingTypesPanel.setRequired(true);
mappingTypesPanel.setChoices(intMappingTypes.getObject());
mappingTypesPanel.setStyleShet(""String_Node_Str"");
item.add(mappingTypesPanel);
final FieldPanel extAttrName;
if (resourceSchemaNames.isEmpty()) {
extAttrName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(mappingTO,""String_Node_Str""),true);
}
 else {
extAttrName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
((AjaxDropDownChoicePanel)extAttrName).setChoices(resourceSchemaNames);
}
boolean required=mappingTO != null && !mappingTO.isAccountid() && !mappingTO.isPassword();
extAttrName.setRequired(required);
extAttrName.setEnabled(required);
extAttrName.setStyleShet(""String_Node_Str"");
item.add(extAttrName);
final AjaxTextFieldPanel mandatoryCondition=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
mandatoryCondition.setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
mandatoryCondition.setStyleShet(""String_Node_Str"");
item.add(mandatoryCondition);
final AjaxCheckBoxPanel accountId=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),false);
accountId.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!accountId.getModelObject() && !mappingTO.isPassword());
extAttrName.setModelObject(null);
extAttrName.setRequired(!accountId.getModelObject());
target.add(extAttrName);
}
}
);
item.add(accountId);
final AjaxCheckBoxPanel password=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
password.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!mappingTO.isAccountid() && !password.getModelObject());
extAttrName.setModelObject(null);
extAttrName.setRequired(!password.getModelObject());
target.add(extAttrName);
}
}
);
item.add(password);
}
}
;
mappings.setReuseItems(true);
mappingContainer.add(mappings);
final AjaxButton addSchemaMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-4804368561204623354L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
resourceTO.getMappings().add(new SchemaMappingTO());
target.add(mappingContainer);
}
@Override protected void onError(AjaxRequestTarget target,Form<?> form){
}
}
;
addSchemaMappingBtn.setDefaultFormProcessing(false);
addSchemaMappingBtn.setEnabled(!createFlag);
mappingContainer.add(addSchemaMappingBtn);
connectorPropertiesContainer.add(new ListView<ConnConfProperty>(""String_Node_Str"",connectorPropertiesModel){
private static final long serialVersionUID=9101744072914090143L;
@Override protected void populateItem(final ListItem<ConnConfProperty> item){
final ConnConfProperty property=item.getModelObject();
final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
item.add(label);
final FieldPanel field;
if (GUARDED_STRING.equals(property.getSchema().getType())) {
field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
}
 else {
field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),false).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
if (property.getSchema().isRequired()) {
field.addRequiredLabel();
}
}
field.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
target.add(mappingContainer);
}
}
);
item.add(field);
resourceTO.getConnectorConfigurationProperties().add(property);
}
}
);
connector.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
updateConnectorProperties(resourceTO.getConnectorId());
target.add(mappingContainer);
target.add(connectorPropertiesContainer);
}
}
);
AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
int accountIdCount=0;
for (SchemaMappingTO mapping : resourceTO.getMappings()) {
if (mapping.isAccountid()) {
accountIdCount++;
}
}
if (accountIdCount == 0 || accountIdCount > 1) {
error(getString(""String_Node_Str""));
((Resources)callPageRef.getPage()).setOperationResult(false);
}
 else {
try {
if (createFlag) {
restClient.create(resourceTO);
}
 else {
restClient.update(resourceTO);
}
((Resources)callPageRef.getPage()).setOperationResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
((Resources)callPageRef.getPage()).setOperationResult(false);
LOG.error(""String_Node_Str"",resourceTO);
}
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.add(feedbackPanel);
}
}
;
form.add(submit);
add(form);
MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",createFlag ? ""String_Node_Str"" : ""String_Node_Str""));
}"
60899,"/** 
 * Get remote object used by the propagation manager in order to choose for a create (object doesn't exist) or an update (object exists).
 * @param propagationMode propagation mode (SYNC / ASYNC)
 * @param operationType resource operation type
 * @param objectClass ConnId's object class
 * @param uid ConnId's Uid
 * @param options ConnId's OperationOptions
 * @return ConnId's connector object for given uid
 */
public ConnectorObject getObject(final PropagationMode propagationMode,final PropagationOperation operationType,final ObjectClass objectClass,final Uid uid,final OperationOptions options){
  ConnectorObject result=null;
  if (capabitilies.contains(ConnectorCapability.SEARCH)) {
    if (operationType == null) {
      result=connector.getObject(objectClass,uid,options);
    }
 else {
switch (operationType) {
case CREATE:
        if (propagationMode == null || (propagationMode == PropagationMode.SYNC ? capabitilies.contains(ConnectorCapability.SYNC_CREATE) : capabitilies.contains(ConnectorCapability.ASYNC_CREATE))) {
          result=connector.getObject(objectClass,uid,options);
        }
      break;
case UPDATE:
    if (propagationMode == null || (propagationMode == PropagationMode.SYNC ? capabitilies.contains(ConnectorCapability.SYNC_UPDATE) : capabitilies.contains(ConnectorCapability.ASYNC_UPDATE))) {
      result=connector.getObject(objectClass,uid,options);
    }
  break;
default :
result=connector.getObject(objectClass,uid,options);
}
}
}
return result;
}","/** 
 * Get remote object used by the propagation manager in order to choose for a create (object doesn't exist) or an update (object exists).
 * @param propagationMode propagation mode (SYNC / ASYNC)
 * @param operationType resource operation type
 * @param objectClass ConnId's object class
 * @param uid ConnId's Uid
 * @param options ConnId's OperationOptions
 * @return ConnId's connector object for given uid
 */
public ConnectorObject getObject(final PropagationMode propagationMode,final PropagationOperation operationType,final ObjectClass objectClass,final Uid uid,final OperationOptions options){
  ConnectorObject result=null;
  if (capabitilies.contains(ConnectorCapability.SEARCH)) {
    if (operationType == null) {
      result=connector.getObject(objectClass,uid,options);
    }
 else {
switch (operationType) {
case CREATE:
        if (propagationMode == null || (propagationMode == PropagationMode.SYNC ? capabitilies.contains(ConnectorCapability.SYNC_CREATE) : capabitilies.contains(ConnectorCapability.ASYNC_CREATE))) {
          result=connector.getObject(objectClass,uid,options);
        }
      break;
case UPDATE:
    if (propagationMode == null || (propagationMode == PropagationMode.SYNC ? capabitilies.contains(ConnectorCapability.SYNC_UPDATE) : capabitilies.contains(ConnectorCapability.ASYNC_UPDATE))) {
      result=connector.getObject(objectClass,uid,options);
    }
  break;
default :
result=connector.getObject(objectClass,uid,options);
}
}
}
 else {
LOG.info(""String_Node_Str"" + ""String_Node_Str"",capabitilies);
}
return result;
}"
60900,"/** 
 * Read latest sync token from a connector instance.
 * @return latest sync token
 */
public SyncToken getLatestSyncToken(){
  SyncToken result=null;
  if (capabitilies.contains(ConnectorCapability.SYNC)) {
    result=connector.getLatestSyncToken(ObjectClass.ACCOUNT);
  }
  return result;
}","/** 
 * Read latest sync token from a connector instance.
 * @return latest sync token
 */
public SyncToken getLatestSyncToken(){
  SyncToken result=null;
  if (capabitilies.contains(ConnectorCapability.SYNC)) {
    result=connector.getLatestSyncToken(ObjectClass.ACCOUNT);
  }
 else {
    LOG.info(""String_Node_Str"" + ""String_Node_Str"",capabitilies);
  }
  return result;
}"
60901,"/** 
 * Update user on a connector instance.
 * @param propagationMode propagation mode (SYNC / ASYNC)
 * @param objectClass ConnId's object class
 * @param uid user to be updated
 * @param attrs attributes for update
 * @param options ConnId's OperationOptions
 * @param propagationAttempted if update is actually performed (based onconnector instance's capabilities)
 * @return Uid for created user
 */
public Uid update(final PropagationMode propagationMode,final ObjectClass objectClass,final Uid uid,final Set<Attribute> attrs,final OperationOptions options,final Set<String> propagationAttempted){
  Uid result=null;
  if (propagationMode == PropagationMode.SYNC ? capabitilies.contains(ConnectorCapability.SYNC_UPDATE) : capabitilies.contains(ConnectorCapability.ASYNC_UPDATE)) {
    propagationAttempted.add(""String_Node_Str"");
    result=connector.update(objectClass,uid,attrs,options);
  }
  return result;
}","/** 
 * Update user on a connector instance.
 * @param propagationMode propagation mode (SYNC / ASYNC)
 * @param objectClass ConnId's object class
 * @param uid user to be updated
 * @param attrs attributes for update
 * @param options ConnId's OperationOptions
 * @param propagationAttempted if update is actually performed (based onconnector instance's capabilities)
 * @return Uid for created user
 */
public Uid update(final PropagationMode propagationMode,final ObjectClass objectClass,final Uid uid,final Set<Attribute> attrs,final OperationOptions options,final Set<String> propagationAttempted){
  Uid result=null;
  if (propagationMode == PropagationMode.SYNC ? capabitilies.contains(ConnectorCapability.SYNC_UPDATE) : capabitilies.contains(ConnectorCapability.ASYNC_UPDATE)) {
    propagationAttempted.add(""String_Node_Str"");
    result=connector.update(objectClass,uid,attrs,options);
  }
 else {
    LOG.info(""String_Node_Str"" + ""String_Node_Str"",uid.getUidValue(),capabitilies);
  }
  return result;
}"
60902,"/** 
 * Delete user on a connector instance.
 * @param propagationMode propagation mode (SYNC / ASYNC)
 * @param objectClass ConnId's object class
 * @param uid user to be deleted
 * @param options ConnId's OperationOptions
 * @param propagationAttempted if deletion is actually performed (based onconnector instance's capabilities)
 */
public void delete(final PropagationMode propagationMode,final ObjectClass objectClass,final Uid uid,final OperationOptions options,final Set<String> propagationAttempted){
  if (propagationMode == PropagationMode.SYNC ? capabitilies.contains(ConnectorCapability.SYNC_DELETE) : capabitilies.contains(ConnectorCapability.ASYNC_DELETE)) {
    propagationAttempted.add(""String_Node_Str"");
    connector.delete(objectClass,uid,options);
  }
}","/** 
 * Delete user on a connector instance.
 * @param propagationMode propagation mode (SYNC / ASYNC)
 * @param objectClass ConnId's object class
 * @param uid user to be deleted
 * @param options ConnId's OperationOptions
 * @param propagationAttempted if deletion is actually performed (based onconnector instance's capabilities)
 */
public void delete(final PropagationMode propagationMode,final ObjectClass objectClass,final Uid uid,final OperationOptions options,final Set<String> propagationAttempted){
  if (propagationMode == PropagationMode.SYNC ? capabitilies.contains(ConnectorCapability.SYNC_DELETE) : capabitilies.contains(ConnectorCapability.ASYNC_DELETE)) {
    propagationAttempted.add(""String_Node_Str"");
    connector.delete(objectClass,uid,options);
  }
 else {
    LOG.info(""String_Node_Str"" + ""String_Node_Str"",uid.getUidValue(),capabitilies);
  }
}"
60903,"/** 
 * Sync users from a connector instance.
 * @param token to be passed to the underlying connector
 * @return list of sync operations to be performed
 */
public List<SyncDelta> sync(final SyncToken token){
  final List<SyncDelta> result=new ArrayList<SyncDelta>();
  if (capabitilies.contains(ConnectorCapability.SYNC)) {
    connector.sync(ObjectClass.ACCOUNT,token,new SyncResultsHandler(){
      @Override public boolean handle(      final SyncDelta delta){
        return result.add(delta);
      }
    }
,null);
  }
  return result;
}","/** 
 * Sync users from a connector instance.
 * @param token to be passed to the underlying connector
 * @return list of sync operations to be performed
 */
public List<SyncDelta> sync(final SyncToken token){
  final List<SyncDelta> result=new ArrayList<SyncDelta>();
  if (capabitilies.contains(ConnectorCapability.SYNC)) {
    connector.sync(ObjectClass.ACCOUNT,token,new SyncResultsHandler(){
      @Override public boolean handle(      final SyncDelta delta){
        return result.add(delta);
      }
    }
,null);
  }
 else {
    LOG.info(""String_Node_Str"" + ""String_Node_Str"",capabitilies);
  }
  return result;
}"
60904,"/** 
 * Resolve username to ConnId's Uid.
 * @param objectClass ConnId's object class
 * @param username to resolve
 * @param options ConnId's OperationOptions
 * @return the resolved Uid (if connector instance is capable); can be nullif not found
 */
public Uid resolveUsername(final ObjectClass objectClass,final String username,final OperationOptions options){
  Uid result=null;
  if (capabitilies.contains(ConnectorCapability.RESOLVE)) {
    result=connector.resolveUsername(objectClass,username,options);
  }
  return result;
}","/** 
 * Resolve username to ConnId's Uid.
 * @param objectClass ConnId's object class
 * @param username to resolve
 * @param options ConnId's OperationOptions
 * @return the resolved Uid (if connector instance is capable); can be nullif not found
 */
public Uid resolveUsername(final ObjectClass objectClass,final String username,final OperationOptions options){
  Uid result=null;
  if (capabitilies.contains(ConnectorCapability.RESOLVE)) {
    result=connector.resolveUsername(objectClass,username,options);
  }
 else {
    LOG.info(""String_Node_Str"" + ""String_Node_Str"",username,capabitilies);
  }
  return result;
}"
60905,"/** 
 * Create user on a connector instance.
 * @param propagationMode propagation mode (SYNC / ASYNC)
 * @param objectClass ConnId's object class
 * @param attrs attributes for creation
 * @param options ConnId's OperationOptions
 * @param propagationAttempted if creation is actually performed (based onconnector instance's capabilities)
 * @return Uid for created user
 */
public Uid create(final PropagationMode propagationMode,final ObjectClass objectClass,final Set<Attribute> attrs,final OperationOptions options,final Set<String> propagationAttempted){
  Uid result=null;
  if (propagationMode == PropagationMode.SYNC ? capabitilies.contains(ConnectorCapability.SYNC_CREATE) : capabitilies.contains(ConnectorCapability.ASYNC_CREATE)) {
    propagationAttempted.add(""String_Node_Str"");
    result=connector.create(objectClass,attrs,options);
  }
  return result;
}","/** 
 * Create user on a connector instance.
 * @param propagationMode propagation mode (SYNC / ASYNC)
 * @param objectClass ConnId's object class
 * @param attrs attributes for creation
 * @param options ConnId's OperationOptions
 * @param propagationAttempted if creation is actually performed (based onconnector instance's capabilities)
 * @return Uid for created user
 */
public Uid create(final PropagationMode propagationMode,final ObjectClass objectClass,final Set<Attribute> attrs,final OperationOptions options,final Set<String> propagationAttempted){
  Uid result=null;
  if (propagationMode == PropagationMode.SYNC ? capabitilies.contains(ConnectorCapability.SYNC_CREATE) : capabitilies.contains(ConnectorCapability.ASYNC_CREATE)) {
    propagationAttempted.add(""String_Node_Str"");
    result=connector.create(objectClass,attrs,options);
  }
 else {
    LOG.info(""String_Node_Str"" + ""String_Node_Str"",capabitilies);
  }
  return result;
}"
60906,"@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") @Transactional(readOnly=true) public ModelAndView dbExport(){
  Connection conn=DataSourceUtils.getConnection(dataSource);
  InputStream dbPropsStream=null;
  String dbSchema=null;
  try {
    dbPropsStream=getClass().getResourceAsStream(""String_Node_Str"");
    Properties dbProps=new Properties();
    dbProps.load(dbPropsStream);
    dbSchema=dbProps.getProperty(""String_Node_Str"");
  }
 catch (  Throwable t) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"",t);
    }
 else {
      LOG.error(""String_Node_Str"");
    }
  }
 finally {
    if (dbPropsStream != null) {
      try {
        dbPropsStream.close();
      }
 catch (      IOException e) {
        LOG.error(""String_Node_Str"",e);
      }
    }
  }
  StringWriter export=new StringWriter();
  try {
    IDatabaseConnection dbUnitConn=dbSchema == null ? new DatabaseConnection(conn) : new DatabaseConnection(conn,dbSchema);
    DatabaseConfig config=dbUnitConn.getConfig();
    config.setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY,dbUnitDataTypeFactory);
    IDataSet fullDataSet=dbUnitConn.createDataSet();
    FlatXmlDataSet.write(fullDataSet,export);
    LOG.debug(""String_Node_Str"");
  }
 catch (  Throwable t) {
    LOG.error(""String_Node_Str"",t);
  }
 finally {
    DataSourceUtils.releaseConnection(conn,dataSource);
  }
  try {
    conn.close();
  }
 catch (  SQLException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return new ModelAndView(""String_Node_Str"").addObject(""String_Node_Str"",export.toString());
}","@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") @Transactional(readOnly=true) public ModelAndView dbExport(){
  Connection conn=DataSourceUtils.getConnection(dataSource);
  InputStream dbPropsStream=null;
  String dbSchema=null;
  try {
    dbPropsStream=getClass().getResourceAsStream(""String_Node_Str"");
    Properties dbProps=new Properties();
    dbProps.load(dbPropsStream);
    dbSchema=dbProps.getProperty(""String_Node_Str"");
  }
 catch (  Throwable t) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"",t);
    }
 else {
      LOG.error(""String_Node_Str"");
    }
  }
 finally {
    if (dbPropsStream != null) {
      try {
        dbPropsStream.close();
      }
 catch (      IOException e) {
        LOG.error(""String_Node_Str"",e);
      }
    }
  }
  StringWriter export=new StringWriter();
  try {
    IDatabaseConnection dbUnitConn=dbSchema == null ? new DatabaseConnection(conn) : new DatabaseConnection(conn,dbSchema);
    DatabaseConfig config=dbUnitConn.getConfig();
    config.setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY,dbUnitDataTypeFactory);
    IDataSet fullDataSet=new FilteredDataSet(new DatabaseSequenceFilter(dbUnitConn),dbUnitConn.createDataSet());
    FlatXmlDataSet.write(fullDataSet,export);
    LOG.debug(""String_Node_Str"");
  }
 catch (  Throwable t) {
    LOG.error(""String_Node_Str"",t);
  }
 finally {
    DataSourceUtils.releaseConnection(conn,dataSource);
  }
  try {
    conn.close();
  }
 catch (  SQLException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return new ModelAndView(""String_Node_Str"").addObject(""String_Node_Str"",export.toString());
}"
60907,"public void setFake(String fake){
  this.fake=fake;
}","public void setFake(boolean fake){
  this.fake=fake;
}"
60908,"public Configuration(final PageParameters parameters){
  super(parameters);
  add(createConfigWin=new ModalWindow(""String_Node_Str""));
  add(editConfigWin=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getRequest(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS);
  List<IColumn> confColumns=new ArrayList<IColumn>();
  confColumns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new AbstractColumn<ConfigurationTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    final IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          editConfigWin.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new ConfigurationModalPage(Configuration.this.getPageReference(),editConfigWin,configurationTO,false);
            }
          }
);
          editConfigWin.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  confColumns.add(new AbstractColumn<ConfigurationTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    final IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.deleteConfiguration(configurationTO.getKey());
          }
 catch (          SyncopeClientCompositeErrorException e) {
            LOG.error(""String_Node_Str"",e);
            error(e.getMessage());
            return;
          }
          info(getString(""String_Node_Str""));
          target.add(feedbackPanel);
          target.add(confContainer);
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable confTable=new AjaxFallbackDefaultDataTable(""String_Node_Str"",confColumns,new SyncopeConfProvider(),paginatorRows);
  confContainer=new WebMarkupContainer(""String_Node_Str"");
  confContainer.add(confTable);
  confContainer.setOutputMarkupId(true);
  add(confContainer);
  createConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createConfigWin.setInitialHeight(WIN_HEIGHT);
  createConfigWin.setInitialWidth(WIN_WIDTH);
  createConfigWin.setCookieName(""String_Node_Str"");
  editConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editConfigWin.setInitialHeight(WIN_HEIGHT);
  editConfigWin.setInitialWidth(WIN_WIDTH);
  editConfigWin.setCookieName(""String_Node_Str"");
  setWindowClosedCallback(createConfigWin,confContainer);
  setWindowClosedCallback(editConfigWin,confContainer);
  AjaxLink createConfigurationLink=new AjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      createConfigWin.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new ConfigurationModalPage(Configuration.this.getPageReference(),createConfigWin,new ConfigurationTO(),true);
        }
      }
);
      createConfigWin.show(target);
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(createConfigurationLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(createConfigurationLink);
  Link dbExportLink=new Link<Void>(""String_Node_Str""){
    private static final long serialVersionUID=-4331619903296515985L;
    @Override public void onClick(){
      StringResourceStream stream=new StringResourceStream(restClient.dbContentAsXml(),""String_Node_Str"");
      getRequestCycle().scheduleRequestHandlerAfterCurrent(new ResourceStreamRequestHandler(stream).setFileName(""String_Node_Str"").setContentDisposition(ContentDisposition.ATTACHMENT));
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(dbExportLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(dbExportLink);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getRequest(),getResponse(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      confTable.setItemsPerPage(paginatorRows);
      target.add(confContainer);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  add(new PasswordPoliciesPanel(""String_Node_Str""));
  final WorkflowDefinitionTO workflowDef=restClient.getWorkflowDefinition();
  WebMarkupContainer workflowDefContainer=new WebMarkupContainer(""String_Node_Str"");
  Form wfForm=new Form(""String_Node_Str"",new CompoundPropertyModel(workflowDef));
  TextArea<WorkflowDefinitionTO> workflowDefArea=new TextArea<WorkflowDefinitionTO>(""String_Node_Str"",new PropertyModel<WorkflowDefinitionTO>(workflowDef,""String_Node_Str""));
  wfForm.add(workflowDefArea);
  IndicatingAjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model<String>(getString(""String_Node_Str""))){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      try {
        restClient.updateWorkflowDefinition(workflowDef);
        info(getString(""String_Node_Str""));
      }
 catch (      SyncopeClientCompositeErrorException scee) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + scee.getMessage());
      }
      target.add(feedbackPanel);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  wfForm.add(submit);
  workflowDefContainer.add(wfForm);
  MetaDataRoleAuthorizationStrategy.authorize(workflowDefContainer,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(workflowDefContainer);
  PropertyListView coreLoggerList=new LoggerPropertyList(null,""String_Node_Str"",restClient.getLoggers());
  WebMarkupContainer coreLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  coreLoggerContainer.add(coreLoggerList);
  coreLoggerContainer.setOutputMarkupId(true);
  add(coreLoggerContainer);
  ConsoleLoggerController consoleLoggerController=new ConsoleLoggerController();
  PropertyListView consoleLoggerList=new LoggerPropertyList(consoleLoggerController,""String_Node_Str"",consoleLoggerController.getLoggers());
  WebMarkupContainer consoleLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  consoleLoggerContainer.add(consoleLoggerList);
  consoleLoggerContainer.setOutputMarkupId(true);
  add(consoleLoggerContainer);
}","public Configuration(final PageParameters parameters){
  super(parameters);
  add(createConfigWin=new ModalWindow(""String_Node_Str""));
  add(editConfigWin=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getRequest(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS);
  List<IColumn> confColumns=new ArrayList<IColumn>();
  confColumns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new AbstractColumn<ConfigurationTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    final IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          editConfigWin.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new ConfigurationModalPage(Configuration.this.getPageReference(),editConfigWin,configurationTO,false);
            }
          }
);
          editConfigWin.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  confColumns.add(new AbstractColumn<ConfigurationTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    final IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.deleteConfiguration(configurationTO.getKey());
          }
 catch (          SyncopeClientCompositeErrorException e) {
            LOG.error(""String_Node_Str"",e);
            error(e.getMessage());
            return;
          }
          info(getString(""String_Node_Str""));
          target.add(feedbackPanel);
          target.add(confContainer);
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable confTable=new AjaxFallbackDefaultDataTable(""String_Node_Str"",confColumns,new SyncopeConfProvider(),paginatorRows);
  confContainer=new WebMarkupContainer(""String_Node_Str"");
  confContainer.add(confTable);
  confContainer.setOutputMarkupId(true);
  add(confContainer);
  createConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createConfigWin.setInitialHeight(WIN_HEIGHT);
  createConfigWin.setInitialWidth(WIN_WIDTH);
  createConfigWin.setCookieName(""String_Node_Str"");
  editConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editConfigWin.setInitialHeight(WIN_HEIGHT);
  editConfigWin.setInitialWidth(WIN_WIDTH);
  editConfigWin.setCookieName(""String_Node_Str"");
  setWindowClosedCallback(createConfigWin,confContainer);
  setWindowClosedCallback(editConfigWin,confContainer);
  AjaxLink createConfigurationLink=new AjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      createConfigWin.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new ConfigurationModalPage(Configuration.this.getPageReference(),createConfigWin,new ConfigurationTO(),true);
        }
      }
);
      createConfigWin.show(target);
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(createConfigurationLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(createConfigurationLink);
  Link dbExportLink=new Link<Void>(""String_Node_Str""){
    private static final long serialVersionUID=-4331619903296515985L;
    @Override public void onClick(){
      StringResourceStream stream=new StringResourceStream(restClient.dbContentAsXml(),""String_Node_Str"");
      getRequestCycle().scheduleRequestHandlerAfterCurrent(new ResourceStreamRequestHandler(stream).setFileName(""String_Node_Str"").setContentDisposition(ContentDisposition.ATTACHMENT));
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(dbExportLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(dbExportLink);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getRequest(),getResponse(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      confTable.setItemsPerPage(paginatorRows);
      target.add(confContainer);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  add(new PoliciesPanel(""String_Node_Str"",PolicyType.PASSWORD));
  add(new PoliciesPanel(""String_Node_Str"",PolicyType.ACCOUNT));
  add(new PoliciesPanel(""String_Node_Str"",PolicyType.SYNC));
  final WorkflowDefinitionTO workflowDef=restClient.getWorkflowDefinition();
  WebMarkupContainer workflowDefContainer=new WebMarkupContainer(""String_Node_Str"");
  Form wfForm=new Form(""String_Node_Str"",new CompoundPropertyModel(workflowDef));
  TextArea<WorkflowDefinitionTO> workflowDefArea=new TextArea<WorkflowDefinitionTO>(""String_Node_Str"",new PropertyModel<WorkflowDefinitionTO>(workflowDef,""String_Node_Str""));
  wfForm.add(workflowDefArea);
  IndicatingAjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model<String>(getString(""String_Node_Str""))){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      try {
        restClient.updateWorkflowDefinition(workflowDef);
        info(getString(""String_Node_Str""));
      }
 catch (      SyncopeClientCompositeErrorException scee) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + scee.getMessage());
      }
      target.add(feedbackPanel);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  wfForm.add(submit);
  workflowDefContainer.add(wfForm);
  MetaDataRoleAuthorizationStrategy.authorize(workflowDefContainer,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(workflowDefContainer);
  PropertyListView coreLoggerList=new LoggerPropertyList(null,""String_Node_Str"",restClient.getLoggers());
  WebMarkupContainer coreLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  coreLoggerContainer.add(coreLoggerList);
  coreLoggerContainer.setOutputMarkupId(true);
  add(coreLoggerContainer);
  ConsoleLoggerController consoleLoggerController=new ConsoleLoggerController();
  PropertyListView consoleLoggerList=new LoggerPropertyList(consoleLoggerController,""String_Node_Str"",consoleLoggerController.getLoggers());
  WebMarkupContainer consoleLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  consoleLoggerContainer.add(consoleLoggerList);
  consoleLoggerContainer.setOutputMarkupId(true);
  add(consoleLoggerContainer);
}"
60909,"@Override public void onClick(final AjaxRequestTarget target){
  createConfigWin.setPageCreator(new ModalWindow.PageCreator(){
    private static final long serialVersionUID=-7834632442532690940L;
    @Override public Page createPage(){
      return new ConfigurationModalPage(Configuration.this.getPageReference(),createConfigWin,new ConfigurationTO(),true);
    }
  }
);
  createConfigWin.show(target);
}","@Override public void onClick(){
  StringResourceStream stream=new StringResourceStream(restClient.dbContentAsXml(),""String_Node_Str"");
  getRequestCycle().scheduleRequestHandlerAfterCurrent(new ResourceStreamRequestHandler(stream).setFileName(""String_Node_Str"").setContentDisposition(ContentDisposition.ATTACHMENT));
}"
60910,"public Configuration(final PageParameters parameters){
  super(parameters);
  add(createConfigWin=new ModalWindow(""String_Node_Str""));
  add(editConfigWin=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getRequest(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS);
  List<IColumn> confColumns=new ArrayList<IColumn>();
  confColumns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new AbstractColumn<ConfigurationTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    final IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          editConfigWin.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new ConfigurationModalPage(Configuration.this.getPageReference(),editConfigWin,configurationTO,false);
            }
          }
);
          editConfigWin.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  confColumns.add(new AbstractColumn<ConfigurationTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    final IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.deleteConfiguration(configurationTO.getKey());
          }
 catch (          UnsupportedEncodingException e) {
            LOG.error(""String_Node_Str"",e);
            error(e.getMessage());
            return;
          }
          info(getString(""String_Node_Str""));
          target.add(feedbackPanel);
          target.add(confContainer);
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable confTable=new AjaxFallbackDefaultDataTable(""String_Node_Str"",confColumns,new SyncopeConfProvider(),paginatorRows);
  confContainer=new WebMarkupContainer(""String_Node_Str"");
  confContainer.add(confTable);
  confContainer.setOutputMarkupId(true);
  add(confContainer);
  createConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createConfigWin.setInitialHeight(WIN_HEIGHT);
  createConfigWin.setInitialWidth(WIN_WIDTH);
  createConfigWin.setCookieName(""String_Node_Str"");
  editConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editConfigWin.setInitialHeight(WIN_HEIGHT);
  editConfigWin.setInitialWidth(WIN_HEIGHT);
  editConfigWin.setCookieName(""String_Node_Str"");
  setWindowClosedCallback(createConfigWin,confContainer);
  setWindowClosedCallback(editConfigWin,confContainer);
  AjaxLink createConfigurationLink=new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    final AjaxRequestTarget target){
      createConfigWin.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new ConfigurationModalPage(Configuration.this.getPageReference(),createConfigWin,new ConfigurationTO(),true);
        }
      }
);
      createConfigWin.show(target);
    }
  }
;
  String allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(createConfigurationLink,ENABLE,allowedRoles);
  add(createConfigurationLink);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getRequest(),getResponse(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      confTable.setItemsPerPage(paginatorRows);
      target.add(confContainer);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  add(paginatorForm);
  add(new PasswordPoliciesPanel(""String_Node_Str""));
  PropertyListView coreLoggerList=new LoggerPropertyList(null,""String_Node_Str"",restClient.getLoggers());
  WebMarkupContainer coreLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  coreLoggerContainer.add(coreLoggerList);
  coreLoggerContainer.setOutputMarkupId(true);
  add(coreLoggerContainer);
  ConsoleLoggerController consoleLoggerController=new ConsoleLoggerController();
  PropertyListView consoleLoggerList=new LoggerPropertyList(consoleLoggerController,""String_Node_Str"",consoleLoggerController.getLoggers());
  WebMarkupContainer consoleLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  consoleLoggerContainer.add(consoleLoggerList);
  consoleLoggerContainer.setOutputMarkupId(true);
  add(consoleLoggerContainer);
}","public Configuration(final PageParameters parameters){
  super(parameters);
  add(createConfigWin=new ModalWindow(""String_Node_Str""));
  add(editConfigWin=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getRequest(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS);
  List<IColumn> confColumns=new ArrayList<IColumn>();
  confColumns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new AbstractColumn<ConfigurationTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    final IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          editConfigWin.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new ConfigurationModalPage(Configuration.this.getPageReference(),editConfigWin,configurationTO,false);
            }
          }
);
          editConfigWin.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  confColumns.add(new AbstractColumn<ConfigurationTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    final IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.deleteConfiguration(configurationTO.getKey());
          }
 catch (          UnsupportedEncodingException e) {
            LOG.error(""String_Node_Str"",e);
            error(e.getMessage());
            return;
          }
          info(getString(""String_Node_Str""));
          target.add(feedbackPanel);
          target.add(confContainer);
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable confTable=new AjaxFallbackDefaultDataTable(""String_Node_Str"",confColumns,new SyncopeConfProvider(),paginatorRows);
  confContainer=new WebMarkupContainer(""String_Node_Str"");
  confContainer.add(confTable);
  confContainer.setOutputMarkupId(true);
  add(confContainer);
  createConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createConfigWin.setInitialHeight(WIN_HEIGHT);
  createConfigWin.setInitialWidth(WIN_WIDTH);
  createConfigWin.setCookieName(""String_Node_Str"");
  editConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editConfigWin.setInitialHeight(WIN_HEIGHT);
  editConfigWin.setInitialWidth(WIN_HEIGHT);
  editConfigWin.setCookieName(""String_Node_Str"");
  setWindowClosedCallback(createConfigWin,confContainer);
  setWindowClosedCallback(editConfigWin,confContainer);
  AjaxLink createConfigurationLink=new AjaxLink(""String_Node_Str""){
    @Override public void onClick(    final AjaxRequestTarget target){
      createConfigWin.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new ConfigurationModalPage(Configuration.this.getPageReference(),createConfigWin,new ConfigurationTO(),true);
        }
      }
);
      createConfigWin.show(target);
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(createConfigurationLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(createConfigurationLink);
  Link dbExportLink=new Link<Void>(""String_Node_Str""){
    private static final long serialVersionUID=-4331619903296515985L;
    @Override public void onClick(){
      StringResourceStream stream=new StringResourceStream(restClient.dbContentAsXml(),""String_Node_Str"");
      getRequestCycle().scheduleRequestHandlerAfterCurrent(new ResourceStreamRequestHandler(stream).setFileName(""String_Node_Str"").setContentDisposition(ContentDisposition.ATTACHMENT));
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(dbExportLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(dbExportLink);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getRequest(),getResponse(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      confTable.setItemsPerPage(paginatorRows);
      target.add(confContainer);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  add(paginatorForm);
  add(new PasswordPoliciesPanel(""String_Node_Str""));
  PropertyListView coreLoggerList=new LoggerPropertyList(null,""String_Node_Str"",restClient.getLoggers());
  WebMarkupContainer coreLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  coreLoggerContainer.add(coreLoggerList);
  coreLoggerContainer.setOutputMarkupId(true);
  add(coreLoggerContainer);
  ConsoleLoggerController consoleLoggerController=new ConsoleLoggerController();
  PropertyListView consoleLoggerList=new LoggerPropertyList(consoleLoggerController,""String_Node_Str"",consoleLoggerController.getLoggers());
  WebMarkupContainer consoleLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  consoleLoggerContainer.add(consoleLoggerList);
  consoleLoggerContainer.setOutputMarkupId(true);
  add(consoleLoggerContainer);
}"
60911,"/** 
 * Prepare attributes for sending to a connector instance.
 * @param user given user
 * @param password clear-text password
 * @param resource target resource
 * @return account link + prepared attributes
 * @throws PropagationException if anything goes wrong
 */
private Map.Entry<String,Set<Attribute>> prepareAttributes(final SyncopeUser user,final String password,final ExternalResource resource) throws PropagationException {
  LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",new Object[]{user,resource,user.getAttributes()});
  Set<Attribute> attributes=new HashSet<Attribute>();
  String accountId=null;
  Map.Entry<String,Attribute> preparedAttribute;
  for (  SchemaMapping mapping : resource.getMappings()) {
    LOG.debug(""String_Node_Str"",mapping.getIntAttrName());
    try {
      preparedAttribute=prepareAttribute(mapping,user,password);
      if (preparedAttribute.getKey() != null) {
        accountId=preparedAttribute.getKey();
      }
      if (preparedAttribute.getValue() != null) {
        attributes.add(preparedAttribute.getValue());
      }
    }
 catch (    Throwable t) {
      LOG.debug(""String_Node_Str"",mapping.getIntAttrName(),t);
    }
  }
  if (!StringUtils.hasText(accountId)) {
    throw new PropagationException(resource.getName(),""String_Node_Str"");
  }
  String evaluatedAccountLink=jexlUtil.evaluate(resource.getAccountLink(),user);
  if (evaluatedAccountLink.isEmpty()) {
    LOG.debug(""String_Node_Str"",accountId);
    attributes.add(new Name(accountId));
  }
 else {
    LOG.debug(""String_Node_Str"",evaluatedAccountLink);
    attributes.add(new Name(evaluatedAccountLink));
    LOG.debug(""String_Node_Str"");
  }
  return new DefaultMapEntry(accountId,attributes);
}","/** 
 * Prepare attributes for sending to a connector instance.
 * @param user given user
 * @param password clear-text password
 * @param enable wether user must be enabled or not
 * @param resource target resource
 * @return account link + prepared attributes
 * @throws PropagationException if anything goes wrong
 */
private Map.Entry<String,Set<Attribute>> prepareAttributes(final SyncopeUser user,final String password,final Boolean enable,final ExternalResource resource) throws PropagationException {
  LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",new Object[]{user,resource,user.getAttributes()});
  Set<Attribute> attributes=new HashSet<Attribute>();
  String accountId=null;
  Map.Entry<String,Attribute> preparedAttribute;
  for (  SchemaMapping mapping : resource.getMappings()) {
    LOG.debug(""String_Node_Str"",mapping.getIntAttrName());
    try {
      preparedAttribute=prepareAttribute(mapping,user,password);
      if (preparedAttribute.getKey() != null) {
        accountId=preparedAttribute.getKey();
      }
      if (preparedAttribute.getValue() != null) {
        attributes.add(preparedAttribute.getValue());
      }
    }
 catch (    Throwable t) {
      LOG.debug(""String_Node_Str"",mapping.getIntAttrName(),t);
    }
  }
  if (!StringUtils.hasText(accountId)) {
    throw new PropagationException(resource.getName(),""String_Node_Str"");
  }
  String evaluatedAccountLink=jexlUtil.evaluate(resource.getAccountLink(),user);
  if (evaluatedAccountLink.isEmpty()) {
    LOG.debug(""String_Node_Str"",accountId);
    attributes.add(new Name(accountId));
  }
 else {
    LOG.debug(""String_Node_Str"",evaluatedAccountLink);
    attributes.add(new Name(evaluatedAccountLink));
    LOG.debug(""String_Node_Str"");
  }
  if (enable != null) {
    attributes.add(AttributeBuilder.buildEnabled(enable));
  }
  return new DefaultMapEntry(accountId,attributes);
}"
60912,"/** 
 * Implementation of the provisioning feature.
 * @param user user to be provisioned
 * @param password cleartext password to be provisioned
 * @param propByRes operation to be performed per resource
 * @param mandResNames resources for mandatory propagation
 * @throws PropagationException if anything goes wrong
 */
protected void provision(final SyncopeUser user,final String password,final PropagationByResource propByRes,final Set<String> mandResNames) throws PropagationException {
  LOG.debug(""String_Node_Str"",user,propByRes);
  propByRes.purge();
  LOG.debug(""String_Node_Str"",propByRes);
  ExternalResource resource;
  Map.Entry<String,Set<Attribute>> preparedAttrs;
  PropagationTask task;
  TaskExec execution;
  for (  PropagationOperation type : PropagationOperation.values()) {
    for (    String resourceName : propByRes.get(type)) {
      resource=resourceDAO.find(resourceName);
      preparedAttrs=prepareAttributes(user,password,resource);
      task=new PropagationTask();
      task.setResource(resource);
      task.setResourceOperationType(type);
      task.setPropagationMode(mandResNames.contains(resource.getName()) ? PropagationMode.SYNC : resource.getOptionalPropagationMode());
      task.setAccountId(preparedAttrs.getKey());
      task.setOldAccountId(propByRes.getOldAccountId(resource.getName()));
      task.setAttributes(preparedAttrs.getValue());
      LOG.debug(""String_Node_Str"",task);
      execution=propagate(task,new Date());
      LOG.debug(""String_Node_Str"",task,execution);
      if (mandResNames.contains(resource.getName()) && !PropagationTaskExecStatus.SUCCESS.toString().equals(execution.getStatus())) {
        throw new PropagationException(resource.getName(),execution.getMessage());
      }
    }
  }
}","/** 
 * Implementation of the provisioning feature.
 * @param user user to be provisioned
 * @param password cleartext password to be provisioned
 * @param enable wether user must be enabled or not
 * @param propByRes operation to be performed per resource
 * @param mandResNames resources for mandatory propagation
 * @throws PropagationException if anything goes wrong
 */
protected void provision(final SyncopeUser user,final String password,final Boolean enable,final PropagationByResource propByRes,final Set<String> mandResNames) throws PropagationException {
  LOG.debug(""String_Node_Str"",user,propByRes);
  propByRes.purge();
  LOG.debug(""String_Node_Str"",propByRes);
  ExternalResource resource;
  Map.Entry<String,Set<Attribute>> preparedAttrs;
  PropagationTask task;
  TaskExec execution;
  for (  PropagationOperation type : PropagationOperation.values()) {
    for (    String resourceName : propByRes.get(type)) {
      resource=resourceDAO.find(resourceName);
      preparedAttrs=prepareAttributes(user,password,enable,resource);
      task=new PropagationTask();
      task.setResource(resource);
      task.setResourceOperationType(type);
      task.setPropagationMode(mandResNames.contains(resource.getName()) ? PropagationMode.SYNC : resource.getOptionalPropagationMode());
      task.setAccountId(preparedAttrs.getKey());
      task.setOldAccountId(propByRes.getOldAccountId(resource.getName()));
      task.setAttributes(preparedAttrs.getValue());
      LOG.debug(""String_Node_Str"",task);
      execution=propagate(task,new Date());
      LOG.debug(""String_Node_Str"",task,execution);
      if (mandResNames.contains(resource.getName()) && !PropagationTaskExecStatus.SUCCESS.toString().equals(execution.getStatus())) {
        throw new PropagationException(resource.getName(),execution.getMessage());
      }
    }
  }
}"
60913,"/** 
 * Create the user on every associated resource. It is possible to ask for a mandatory provisioning for some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if the creation fails onto a mandatory resource.
 * @param user to be created.
 * @param password to be set.
 * @param mandResNames to ask for mandatory or optionalprovisioning.
 * @throws PropagationException when anything goes wrong
 */
public void create(final SyncopeUser user,final String password,final Set<String> mandResNames) throws PropagationException {
  final PropagationByResource propByRes=new PropagationByResource();
  propByRes.set(PropagationOperation.CREATE,user.getExternalResources());
  provision(user,password,propByRes,mandResNames == null ? Collections.EMPTY_SET : mandResNames);
}","/** 
 * Create the user on every associated resource. It is possible to ask for a mandatory provisioning for some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if the creation fails onto a mandatory resource.
 * @param user to be created
 * @param password to be set
 * @param enable wether user must be enabled or not
 * @param mandResNames to ask for mandatory or optionalprovisioning
 * @throws PropagationException when anything goes wrong
 */
public void create(final SyncopeUser user,final String password,final Boolean enable,final Set<String> mandResNames) throws PropagationException {
  final PropagationByResource propByRes=new PropagationByResource();
  propByRes.set(PropagationOperation.CREATE,user.getExternalResources());
  provision(user,password,enable,propByRes,mandResNames == null ? Collections.EMPTY_SET : mandResNames);
}"
60914,"/** 
 * Performs update on each resource associated to the user. It is possible to ask for a mandatory provisioning for some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if the creation fails onto a mandatory resource.
 * @param user to be updated.
 * @param password to be updated.
 * @param propByRes operations to perform on each resource.
 * @param mandResNames to ask for mandatory or optional update.
 * @throws PropagationException if anything goes wrong
 */
public void update(final SyncopeUser user,final String password,final PropagationByResource propByRes,final Set<String> mandResNames) throws PropagationException {
  provision(user,password,propByRes,mandResNames == null ? Collections.EMPTY_SET : mandResNames);
}","/** 
 * Performs update on each resource associated to the user. It is possible to ask for a mandatory provisioning for some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if the creation fails onto a mandatory resource.
 * @param user to be updated.
 * @param password to be updated.
 * @param enable wether user must be enabled or not
 * @param propByRes operations to perform on each resource.
 * @param mandResNames to ask for mandatory or optional update.
 * @throws PropagationException if anything goes wrong
 */
public void update(final SyncopeUser user,final String password,final Boolean enable,final PropagationByResource propByRes,final Set<String> mandResNames) throws PropagationException {
  provision(user,password,enable,propByRes,mandResNames == null ? Collections.EMPTY_SET : mandResNames);
}"
60915,"/** 
 * Perform delete on each resource associated to the user. It is possible to ask for a mandatory provisioning for some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if the creation fails onto a mandatory resource.
 * @param user to be deleted
 * @param mandResNames to ask for mandatory or optyional delete
 * @throws PropagationException if anything goes wrong
 */
public void delete(final SyncopeUser user,final Set<String> mandResNames) throws PropagationException {
  final PropagationByResource propByRes=new PropagationByResource();
  propByRes.set(PropagationOperation.DELETE,user.getExternalResources());
  provision(user,null,propByRes,mandResNames == null ? Collections.EMPTY_SET : mandResNames);
}","/** 
 * Perform delete on each resource associated to the user. It is possible to ask for a mandatory provisioning for some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if the creation fails onto a mandatory resource.
 * @param user to be deleted
 * @param mandResNames to ask for mandatory or optyional delete
 * @throws PropagationException if anything goes wrong
 */
public void delete(final SyncopeUser user,final Set<String> mandResNames) throws PropagationException {
  final PropagationByResource propByRes=new PropagationByResource();
  propByRes.set(PropagationOperation.DELETE,user.getExternalResources());
  provision(user,null,false,propByRes,mandResNames == null ? Collections.EMPTY_SET : mandResNames);
}"
60916,"@Override public SyncopeUser suspend(final SyncopeUser user) throws WorkflowException, PropagationException {
  doExecuteAction(user,""String_Node_Str"",null);
  setStatus(user.getWorkflowId(),user);
  SyncopeUser updated=userDAO.save(user);
  PropagationByResource propByRes=new PropagationByResource();
  propByRes.addAll(PropagationOperation.UPDATE,user.getExternalResources());
  propagationManager.update(user,null,propByRes,null);
  return updated;
}","@Override public SyncopeUser suspend(final SyncopeUser user) throws WorkflowException, PropagationException {
  doExecuteAction(user,""String_Node_Str"",null);
  setStatus(user.getWorkflowId(),user);
  SyncopeUser updated=userDAO.save(user);
  PropagationByResource propByRes=new PropagationByResource();
  propByRes.addAll(PropagationOperation.UPDATE,user.getExternalResources());
  propagationManager.update(user,null,false,propByRes,null);
  return updated;
}"
60917,"@Override public SyncopeUser reactivate(final SyncopeUser user) throws WorkflowException, PropagationException {
  doExecuteAction(user,""String_Node_Str"",null);
  setStatus(user.getWorkflowId(),user);
  SyncopeUser updated=userDAO.save(user);
  PropagationByResource propByRes=new PropagationByResource();
  propByRes.addAll(PropagationOperation.UPDATE,user.getExternalResources());
  propagationManager.update(user,null,propByRes,null);
  return updated;
}","@Override public SyncopeUser reactivate(final SyncopeUser user) throws WorkflowException, PropagationException {
  doExecuteAction(user,""String_Node_Str"",null);
  setStatus(user.getWorkflowId(),user);
  SyncopeUser updated=userDAO.save(user);
  PropagationByResource propByRes=new PropagationByResource();
  propByRes.addAll(PropagationOperation.UPDATE,user.getExternalResources());
  propagationManager.update(user,null,true,propByRes,null);
  return updated;
}"
60918,"@Override public SyncopeUser activate(final SyncopeUser user,final String token) throws WorkflowException, PropagationException {
  doExecuteAction(user,""String_Node_Str"",Collections.singletonMap(TOKEN,(Object)token));
  setStatus(user.getWorkflowId(),user);
  SyncopeUser updated=userDAO.save(user);
  PropagationByResource propByRes=new PropagationByResource();
  propByRes.addAll(PropagationOperation.UPDATE,user.getExternalResources());
  propagationManager.update(user,null,propByRes,null);
  return updated;
}","@Override public SyncopeUser activate(final SyncopeUser user,final String token) throws WorkflowException, PropagationException {
  doExecuteAction(user,""String_Node_Str"",Collections.singletonMap(TOKEN,(Object)token));
  setStatus(user.getWorkflowId(),user);
  SyncopeUser updated=userDAO.save(user);
  PropagationByResource propByRes=new PropagationByResource();
  propByRes.addAll(PropagationOperation.UPDATE,user.getExternalResources());
  propagationManager.update(user,null,true,propByRes,null);
  return updated;
}"
60919,"@Override public SyncopeUser create(final UserTO userTO,final Set<Long> mandatoryRoles,final Set<String> mandatoryResources) throws WorkflowException, PropagationException {
  final Map<String,Object> variables=new HashMap<String,Object>();
  variables.put(USER_TO,userTO);
  final ProcessInstance processInstance;
  try {
    processInstance=runtimeService.startProcessInstanceByKey(""String_Node_Str"",variables);
  }
 catch (  ActivitiException e) {
    throw new WorkflowException(e);
  }
  SyncopeUser user=(SyncopeUser)runtimeService.getVariable(processInstance.getProcessInstanceId(),SYNCOPE_USER);
  setStatus(processInstance.getProcessInstanceId(),user);
  user=userDAO.save(user);
  User activitiUser=identityService.newUser(user.getId().toString());
  activitiUser.setPassword(userTO.getPassword());
  identityService.saveUser(activitiUser);
  Set<String> mandatoryResourceNames=userService.getMandatoryResourceNames(user,mandatoryRoles,mandatoryResources);
  if (!mandatoryResourceNames.isEmpty()) {
    LOG.debug(""String_Node_Str"",mandatoryResourceNames);
  }
  propagationManager.create(user,userTO.getPassword(),mandatoryResourceNames);
  return user;
}","@Override public SyncopeUser create(final UserTO userTO,final Set<Long> mandatoryRoles,final Set<String> mandatoryResources) throws WorkflowException, PropagationException {
  final Map<String,Object> variables=new HashMap<String,Object>();
  variables.put(USER_TO,userTO);
  final ProcessInstance processInstance;
  try {
    processInstance=runtimeService.startProcessInstanceByKey(""String_Node_Str"",variables);
  }
 catch (  ActivitiException e) {
    throw new WorkflowException(e);
  }
  SyncopeUser user=(SyncopeUser)runtimeService.getVariable(processInstance.getProcessInstanceId(),SYNCOPE_USER);
  setStatus(processInstance.getProcessInstanceId(),user);
  user=userDAO.save(user);
  User activitiUser=identityService.newUser(user.getId().toString());
  identityService.saveUser(activitiUser);
  Set<String> mandatoryResourceNames=userService.getMandatoryResourceNames(user,mandatoryRoles,mandatoryResources);
  if (!mandatoryResourceNames.isEmpty()) {
    LOG.debug(""String_Node_Str"",mandatoryResourceNames);
  }
  Boolean enable=(Boolean)runtimeService.getVariable(processInstance.getProcessInstanceId(),PROPAGATE_ENABLE);
  propagationManager.create(user,userTO.getPassword(),enable,mandatoryResourceNames);
  return user;
}"
60920,"@Override public SyncopeUser update(final SyncopeUser user,final UserMod userMod,final Set<Long> mandatoryRoles,final Set<String> mandatoryResources) throws WorkflowException, PropagationException {
  doExecuteAction(user,""String_Node_Str"",Collections.singletonMap(USER_MOD,(Object)userMod));
  setStatus(user.getWorkflowId(),user);
  SyncopeUser updated=userDAO.save(user);
  PropagationByResource propByRes=(PropagationByResource)runtimeService.getVariable(user.getWorkflowId(),PROP_BY_RESOURCE);
  Set<String> mandatoryResourceNames=userService.getMandatoryResourceNames(user,mandatoryRoles,mandatoryResources);
  if (!mandatoryResourceNames.isEmpty()) {
    LOG.debug(""String_Node_Str"",mandatoryResourceNames);
  }
  propagationManager.update(updated,userMod.getPassword(),propByRes,mandatoryResourceNames);
  return updated;
}","@Override public SyncopeUser update(final SyncopeUser user,final UserMod userMod,final Set<Long> mandatoryRoles,final Set<String> mandatoryResources) throws WorkflowException, PropagationException {
  doExecuteAction(user,""String_Node_Str"",Collections.singletonMap(USER_MOD,(Object)userMod));
  setStatus(user.getWorkflowId(),user);
  SyncopeUser updated=userDAO.save(user);
  PropagationByResource propByRes=(PropagationByResource)runtimeService.getVariable(user.getWorkflowId(),PROP_BY_RESOURCE);
  Set<String> mandatoryResourceNames=userService.getMandatoryResourceNames(user,mandatoryRoles,mandatoryResources);
  if (!mandatoryResourceNames.isEmpty()) {
    LOG.debug(""String_Node_Str"",mandatoryResourceNames);
  }
  propagationManager.update(updated,userMod.getPassword(),null,propByRes,mandatoryResourceNames);
  return updated;
}"
60921,"@Override public SyncopeUser suspend(final SyncopeUser user) throws WorkflowException, PropagationException {
  user.setStatus(""String_Node_Str"");
  SyncopeUser updated=userDAO.save(user);
  PropagationByResource propByRes=new PropagationByResource();
  propByRes.addAll(PropagationOperation.UPDATE,user.getExternalResources());
  propagationManager.update(user,null,propByRes,null);
  return updated;
}","@Override public SyncopeUser suspend(final SyncopeUser user) throws WorkflowException, PropagationException {
  user.setStatus(""String_Node_Str"");
  SyncopeUser updated=userDAO.save(user);
  PropagationByResource propByRes=new PropagationByResource();
  propByRes.addAll(PropagationOperation.UPDATE,user.getExternalResources());
  propagationManager.update(user,null,false,propByRes,null);
  return updated;
}"
60922,"@Override public SyncopeUser reactivate(final SyncopeUser user) throws WorkflowException, PropagationException {
  user.setStatus(""String_Node_Str"");
  SyncopeUser updated=userDAO.save(user);
  PropagationByResource propByRes=new PropagationByResource();
  propByRes.addAll(PropagationOperation.UPDATE,user.getExternalResources());
  propagationManager.update(user,null,propByRes,null);
  return updated;
}","@Override public SyncopeUser reactivate(final SyncopeUser user) throws WorkflowException, PropagationException {
  user.setStatus(""String_Node_Str"");
  SyncopeUser updated=userDAO.save(user);
  PropagationByResource propByRes=new PropagationByResource();
  propByRes.addAll(PropagationOperation.UPDATE,user.getExternalResources());
  propagationManager.update(user,null,true,propByRes,null);
  return updated;
}"
60923,"@Override public SyncopeUser activate(final SyncopeUser user,final String token) throws WorkflowException, PropagationException {
  if (!user.checkToken(token)) {
    throw new WorkflowException(new RuntimeException(""String_Node_Str"" + token));
  }
  user.removeToken();
  user.setStatus(""String_Node_Str"");
  SyncopeUser updated=userDAO.save(user);
  PropagationByResource propByRes=new PropagationByResource();
  propByRes.addAll(PropagationOperation.UPDATE,user.getExternalResources());
  propagationManager.update(user,null,propByRes,null);
  return updated;
}","@Override public SyncopeUser activate(final SyncopeUser user,final String token) throws WorkflowException, PropagationException {
  if (!user.checkToken(token)) {
    throw new WorkflowException(new RuntimeException(""String_Node_Str"" + token));
  }
  user.removeToken();
  user.setStatus(""String_Node_Str"");
  SyncopeUser updated=userDAO.save(user);
  PropagationByResource propByRes=new PropagationByResource();
  propByRes.addAll(PropagationOperation.UPDATE,user.getExternalResources());
  propagationManager.update(user,null,true,propByRes,null);
  return updated;
}"
60924,"@Override public SyncopeUser create(final UserTO userTO,final Set<Long> mandatoryRoles,final Set<String> mandatoryResources) throws WorkflowException, PropagationException {
  SyncopeUser user=userService.create(userTO);
  user.setStatus(""String_Node_Str"");
  user=userDAO.save(user);
  Set<String> mandatoryResourceNames=userService.getMandatoryResourceNames(user,mandatoryRoles,mandatoryResources);
  if (!mandatoryResourceNames.isEmpty()) {
    LOG.debug(""String_Node_Str"",mandatoryResourceNames);
  }
  propagationManager.create(user,userTO.getPassword(),mandatoryResourceNames);
  return user;
}","@Override public SyncopeUser create(final UserTO userTO,final Set<Long> mandatoryRoles,final Set<String> mandatoryResources) throws WorkflowException, PropagationException {
  SyncopeUser user=userService.create(userTO);
  user.setStatus(""String_Node_Str"");
  user=userDAO.save(user);
  Set<String> mandatoryResourceNames=userService.getMandatoryResourceNames(user,mandatoryRoles,mandatoryResources);
  if (!mandatoryResourceNames.isEmpty()) {
    LOG.debug(""String_Node_Str"",mandatoryResourceNames);
  }
  propagationManager.create(user,userTO.getPassword(),false,mandatoryResourceNames);
  return user;
}"
60925,"@Override public SyncopeUser update(final SyncopeUser user,final UserMod userMod,final Set<Long> mandatoryRoles,final Set<String> mandatoryResources) throws WorkflowException, PropagationException {
  Map.Entry<SyncopeUser,PropagationByResource> updated=userService.update(user,userMod);
  Set<String> mandatoryResourceNames=userService.getMandatoryResourceNames(user,mandatoryRoles,mandatoryResources);
  if (!mandatoryResourceNames.isEmpty()) {
    LOG.debug(""String_Node_Str"",mandatoryResourceNames);
  }
  propagationManager.update(user,userMod.getPassword(),updated.getValue(),mandatoryResourceNames);
  return updated.getKey();
}","@Override public SyncopeUser update(final SyncopeUser user,final UserMod userMod,final Set<Long> mandatoryRoles,final Set<String> mandatoryResources) throws WorkflowException, PropagationException {
  Map.Entry<SyncopeUser,PropagationByResource> updated=userService.update(user,userMod);
  Set<String> mandatoryResourceNames=userService.getMandatoryResourceNames(user,mandatoryRoles,mandatoryResources);
  if (!mandatoryResourceNames.isEmpty()) {
    LOG.debug(""String_Node_Str"",mandatoryResourceNames);
  }
  propagationManager.update(user,userMod.getPassword(),null,updated.getValue(),mandatoryResourceNames);
  return updated.getKey();
}"
60926,"public PropagationByResource update(final SyncopeUser user,final UserMod userMod) throws SyncopeClientCompositeErrorException {
  PropagationByResource propByRes=new PropagationByResource();
  SyncopeClientCompositeErrorException scce=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  if (userMod.getPassword() != null) {
    int passwordHistorySize=0;
    try {
      Policy policy=policyDAO.getGlobalPasswordPolicy();
      PasswordPolicy passwordPolicy=policy.getSpecification();
      passwordHistorySize=passwordPolicy.getHistoryLength();
    }
 catch (    Throwable ignore) {
    }
    user.setPassword(userMod.getPassword(),getCipherAlgoritm(),passwordHistorySize);
    propByRes.addAll(PropagationOperation.UPDATE,user.getExternalResources());
  }
  propByRes.merge(fill(user,userMod,AttributableUtil.USER,scce));
  Set<Long> membershipToBeAddedRoleIds=new HashSet<Long>();
  for (  MembershipMod membershipToBeAdded : userMod.getMembershipsToBeAdded()) {
    membershipToBeAddedRoleIds.add(membershipToBeAdded.getRole());
  }
  Membership membership=null;
  for (  Long membershipId : userMod.getMembershipsToBeRemoved()) {
    LOG.debug(""String_Node_Str"",membershipId);
    membership=membershipDAO.find(membershipId);
    if (membership == null) {
      LOG.debug(""String_Node_Str"",membershipId);
    }
 else {
      for (      ExternalResource resource : membership.getSyncopeRole().getExternalResources()) {
        if (!membershipToBeAddedRoleIds.contains(membership.getSyncopeRole().getId())) {
          propByRes.add(PropagationOperation.DELETE,resource);
        }
      }
      membership=user.getMembership(membership.getSyncopeRole().getId());
      if (membershipToBeAddedRoleIds.contains(membership.getSyncopeRole().getId())) {
        Set<Long> attributeIds=new HashSet<Long>(membership.getAttributes().size());
        for (        AbstractAttr attribute : membership.getAttributes()) {
          attributeIds.add(attribute.getId());
        }
        for (        Long attributeId : attributeIds) {
          attributeDAO.delete(attributeId,MAttr.class);
        }
        attributeIds.clear();
        for (        AbstractDerAttr derAttr : membership.getDerivedAttributes()) {
          attributeIds.add(derAttr.getId());
        }
        for (        Long derAttrId : attributeIds) {
          derAttrDAO.delete(derAttrId,MDerAttr.class);
        }
        attributeIds.clear();
        for (        AbstractVirAttr virAttr : membership.getVirtualAttributes()) {
          attributeIds.add(virAttr.getId());
        }
        for (        Long virAttrId : attributeIds) {
          virAttrDAO.delete(virAttrId,MVirAttr.class);
        }
        attributeIds.clear();
      }
 else {
        user.removeMembership(membership);
        membershipDAO.delete(membershipId);
      }
    }
  }
  SyncopeRole role=null;
  for (  MembershipMod membershipMod : userMod.getMembershipsToBeAdded()) {
    LOG.debug(""String_Node_Str"",membershipMod.getRole());
    role=roleDAO.find(membershipMod.getRole());
    if (role == null) {
      LOG.debug(""String_Node_Str"",membershipMod.getRole());
    }
 else {
      membership=user.getMembership(role.getId());
      if (membership == null) {
        membership=new Membership();
        membership.setSyncopeRole(role);
        membership.setSyncopeUser(user);
        user.addMembership(membership);
        propByRes.addAll(PropagationOperation.UPDATE,role.getExternalResources());
      }
      propByRes.merge(fill(membership,membershipMod,AttributableUtil.MEMBERSHIP,scce));
    }
  }
  return propByRes;
}","/** 
 * Update user, given UserMod.
 * @param user to be updated
 * @param userMod bean containing update request
 * @return updated user + propagation by resource
 * @throws SyncopeClientCompositeErrorException if anything goes wrong
 * @see PropagationByResource
 */
public PropagationByResource update(final SyncopeUser user,final UserMod userMod) throws SyncopeClientCompositeErrorException {
  PropagationByResource propByRes=new PropagationByResource();
  SyncopeClientCompositeErrorException scce=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  Set<String> currentResources=user.getExternalResourceNames();
  if (userMod.getPassword() != null) {
    int passwordHistorySize=0;
    try {
      Policy policy=policyDAO.getGlobalPasswordPolicy();
      PasswordPolicy passwordPolicy=policy.getSpecification();
      passwordHistorySize=passwordPolicy.getHistoryLength();
    }
 catch (    Throwable ignore) {
    }
    user.setPassword(userMod.getPassword(),getCipherAlgoritm(),passwordHistorySize);
    propByRes.addAll(PropagationOperation.UPDATE,user.getExternalResources());
  }
  propByRes.merge(fill(user,userMod,AttributableUtil.USER,scce));
  Set<Long> membershipToBeAddedRoleIds=new HashSet<Long>();
  for (  MembershipMod membershipToBeAdded : userMod.getMembershipsToBeAdded()) {
    membershipToBeAddedRoleIds.add(membershipToBeAdded.getRole());
  }
  Membership membership=null;
  for (  Long membershipId : userMod.getMembershipsToBeRemoved()) {
    LOG.debug(""String_Node_Str"",membershipId);
    membership=membershipDAO.find(membershipId);
    if (membership == null) {
      LOG.debug(""String_Node_Str"",membershipId);
    }
 else {
      for (      ExternalResource resource : membership.getSyncopeRole().getExternalResources()) {
        if (!membershipToBeAddedRoleIds.contains(membership.getSyncopeRole().getId())) {
          propByRes.add(PropagationOperation.DELETE,resource);
        }
      }
      membership=user.getMembership(membership.getSyncopeRole().getId());
      if (membershipToBeAddedRoleIds.contains(membership.getSyncopeRole().getId())) {
        Set<Long> attributeIds=new HashSet<Long>(membership.getAttributes().size());
        for (        AbstractAttr attribute : membership.getAttributes()) {
          attributeIds.add(attribute.getId());
        }
        for (        Long attributeId : attributeIds) {
          attributeDAO.delete(attributeId,MAttr.class);
        }
        attributeIds.clear();
        for (        AbstractDerAttr derAttr : membership.getDerivedAttributes()) {
          attributeIds.add(derAttr.getId());
        }
        for (        Long derAttrId : attributeIds) {
          derAttrDAO.delete(derAttrId,MDerAttr.class);
        }
        attributeIds.clear();
        for (        AbstractVirAttr virAttr : membership.getVirtualAttributes()) {
          attributeIds.add(virAttr.getId());
        }
        for (        Long virAttrId : attributeIds) {
          virAttrDAO.delete(virAttrId,MVirAttr.class);
        }
        attributeIds.clear();
      }
 else {
        user.removeMembership(membership);
        membershipDAO.delete(membershipId);
      }
    }
  }
  SyncopeRole role=null;
  for (  MembershipMod membershipMod : userMod.getMembershipsToBeAdded()) {
    LOG.debug(""String_Node_Str"",membershipMod.getRole());
    role=roleDAO.find(membershipMod.getRole());
    if (role == null) {
      LOG.debug(""String_Node_Str"",membershipMod.getRole());
    }
 else {
      membership=user.getMembership(role.getId());
      if (membership == null) {
        membership=new Membership();
        membership.setSyncopeRole(role);
        membership.setSyncopeUser(user);
        user.addMembership(membership);
        propByRes.addAll(PropagationOperation.UPDATE,role.getExternalResources());
      }
      propByRes.merge(fill(membership,membershipMod,AttributableUtil.MEMBERSHIP,scce));
    }
  }
  Set<String> updatedResources=user.getExternalResourceNames();
  updatedResources.removeAll(currentResources);
  if (!updatedResources.isEmpty() && StringUtils.isBlank(userMod.getPassword())) {
    SyncopeClientException sce=new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);
    sce.addElement(""String_Node_Str"" + ""String_Node_Str"");
    scce.addException(sce);
    throw scce;
  }
  return propByRes;
}"
60927,"public UserTO getUserTO(final SyncopeUser user){
  UserTO userTO=new UserTO();
  userTO.setId(user.getId());
  userTO.setToken(user.getToken());
  userTO.setTokenExpireTime(user.getTokenExpireTime());
  userTO.setPassword(user.getPassword());
  userTO.setStatus(user.getStatus());
  fillTO(userTO,user.getAttributes(),user.getDerivedAttributes(),user.getVirtualAttributes(),user.getExternalResources());
  MembershipTO membershipTO;
  for (  Membership membership : user.getMemberships()) {
    membershipTO=new MembershipTO();
    membershipTO.setId(membership.getId());
    membershipTO.setRoleId(membership.getSyncopeRole().getId());
    membershipTO.setRoleName(membership.getSyncopeRole().getName());
    fillTO(membershipTO,membership.getAttributes(),membership.getDerivedAttributes(),membership.getVirtualAttributes(),membership.getExternalResources());
    userTO.addMembership(membershipTO);
  }
  return userTO;
}","/** 
 * Generate a transfer object for the given JPA entity.
 * @param user as JPA entity
 * @return transfer object
 */
public UserTO getUserTO(final SyncopeUser user){
  UserTO userTO=new UserTO();
  userTO.setId(user.getId());
  userTO.setToken(user.getToken());
  userTO.setTokenExpireTime(user.getTokenExpireTime());
  userTO.setPassword(user.getPassword());
  userTO.setStatus(user.getStatus());
  fillTO(userTO,user.getAttributes(),user.getDerivedAttributes(),user.getVirtualAttributes(),user.getExternalResources());
  MembershipTO membershipTO;
  for (  Membership membership : user.getMemberships()) {
    membershipTO=new MembershipTO();
    membershipTO.setId(membership.getId());
    membershipTO.setRoleId(membership.getSyncopeRole().getId());
    membershipTO.setRoleName(membership.getSyncopeRole().getName());
    fillTO(membershipTO,membership.getAttributes(),membership.getDerivedAttributes(),membership.getVirtualAttributes(),membership.getExternalResources());
    userTO.addMembership(membershipTO);
  }
  return userTO;
}"
60928,"public Set<String> getMandatoryResourceNames(final SyncopeUser user,Set<Long> mandatoryRoles,Set<String> mandatoryResources){
  if (mandatoryRoles == null) {
    mandatoryRoles=Collections.EMPTY_SET;
  }
  if (mandatoryResources == null) {
    mandatoryResources=Collections.EMPTY_SET;
  }
  Set<String> mandatoryResourceNames=new HashSet<String>();
  for (  ExternalResource resource : user.getExternalResources()) {
    if (mandatoryResources.contains(resource.getName())) {
      mandatoryResourceNames.add(resource.getName());
    }
  }
  for (  SyncopeRole role : user.getRoles()) {
    if (mandatoryRoles.contains(role.getId())) {
      for (      ExternalResource resource : role.getExternalResources()) {
        mandatoryResourceNames.add(resource.getName());
      }
    }
  }
  return mandatoryResourceNames;
}","public Set<String> getMandatoryResourceNames(final SyncopeUser user,Set<Long> mandatoryRoles,Set<String> mandatoryResources){
  if (mandatoryRoles == null) {
    mandatoryRoles=Collections.EMPTY_SET;
  }
  if (mandatoryResources == null) {
    mandatoryResources=Collections.EMPTY_SET;
  }
  Set<String> mandatoryResourceNames=new HashSet<String>();
  for (  String resource : user.getExternalResourceNames()) {
    if (mandatoryResources.contains(resource)) {
      mandatoryResourceNames.add(resource);
    }
  }
  for (  SyncopeRole role : user.getRoles()) {
    if (mandatoryRoles.contains(role.getId())) {
      for (      ExternalResource resource : role.getExternalResources()) {
        mandatoryResourceNames.add(resource.getName());
      }
    }
  }
  return mandatoryResourceNames;
}"
60929,"@Test public void getSchemaNames(){
  ResourceTO resourceTO=null;
  resourceTO=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",ResourceTO.class,""String_Node_Str"");
  assertNotNull(resourceTO);
  List<String> schemaNames=Arrays.asList(restTemplate.postForObject(BASE_URL + ""String_Node_Str"",resourceTO,String[].class));
  assertNotNull(schemaNames);
  assertFalse(schemaNames.isEmpty());
  resourceTO=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",ResourceTO.class,""String_Node_Str"");
  assertNotNull(resourceTO);
  schemaNames=Arrays.asList(restTemplate.postForObject(BASE_URL + ""String_Node_Str"",resourceTO,String[].class));
  assertNotNull(schemaNames);
  assertTrue(schemaNames.size() == 1);
  resourceTO=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",ResourceTO.class,""String_Node_Str"");
  assertNotNull(resourceTO);
  schemaNames=Arrays.asList(restTemplate.postForObject(BASE_URL + ""String_Node_Str"",resourceTO,String[].class));
  assertNotNull(schemaNames);
  assertFalse(schemaNames.isEmpty());
}","@Test public void getSchemaNames(){
  ResourceTO resourceTO=null;
  resourceTO=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",ResourceTO.class,""String_Node_Str"");
  assertNotNull(resourceTO);
  List<String> schemaNames=Arrays.asList(restTemplate.postForObject(BASE_URL + ""String_Node_Str"",resourceTO,String[].class));
  assertNotNull(schemaNames);
  assertFalse(schemaNames.isEmpty());
  resourceTO=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",ResourceTO.class,""String_Node_Str"");
  assertNotNull(resourceTO);
  schemaNames=Arrays.asList(restTemplate.postForObject(BASE_URL + ""String_Node_Str"",resourceTO,String[].class));
  assertNotNull(schemaNames);
  assertEquals(1,schemaNames.size());
  resourceTO=restTemplate.getForObject(BASE_URL + ""String_Node_Str"",ResourceTO.class,""String_Node_Str"");
  assertNotNull(resourceTO);
  schemaNames=Arrays.asList(restTemplate.postForObject(BASE_URL + ""String_Node_Str"",resourceTO,String[].class));
  assertNotNull(schemaNames);
  assertFalse(schemaNames.isEmpty());
}"
60930,"/** 
 * Build an UserTO out of connector object attributes and schema mapping.
 * @param obj connector object
 * @param mappings schema mappings
 * @param roles default roles to be assigned
 * @param resources default resources to be assigned
 * @return UserTO for the user to be created
 */
private UserTO getUserTO(final ConnectorObject obj,final List<SchemaMapping> mappings,final Set<Long> roles,final Set<String> resources){
  final UserTO userTO=new UserTO();
  userTO.setResources(resources);
  MembershipTO membershipTO;
  for (  Long roleId : roles) {
    membershipTO=new MembershipTO();
    membershipTO.setRoleId(roleId);
    userTO.addMembership(membershipTO);
  }
  Attribute attribute;
  List<Object> values;
  AttributeTO attributeTO;
  for (  SchemaMapping mapping : mappings) {
    attribute=obj.getAttributeByName(mapping.getExtAttrName());
    values=attribute == null ? Collections.EMPTY_LIST : attribute.getValue();
switch (mapping.getIntMappingType()) {
case SyncopeUserId:
      break;
case Password:
    attribute=obj.getAttributeByName(""String_Node_Str"");
  userTO.setPassword(getPassword(attribute == null ? Collections.EMPTY_LIST : attribute.getValue()));
break;
case UserSchema:
attributeTO=new AttributeTO();
attributeTO.setSchema(mapping.getIntAttrName());
for (Object value : values) {
attributeTO.addValue(value.toString());
}
userTO.addAttribute(attributeTO);
break;
case UserDerivedSchema:
attributeTO=new AttributeTO();
attributeTO.setSchema(mapping.getIntAttrName());
userTO.addDerivedAttribute(attributeTO);
break;
case UserVirtualSchema:
attributeTO=new AttributeTO();
attributeTO.setSchema(mapping.getIntAttrName());
userTO.addVirtualAttribute(attributeTO);
break;
default :
}
}
return userTO;
}","/** 
 * Build an UserTO out of connector object attributes and schema mapping.
 * @param obj connector object
 * @param mappings schema mappings
 * @param roles default roles to be assigned
 * @param resources default resources to be assigned
 * @return UserTO for the user to be created
 */
private UserTO getUserTO(final ConnectorObject obj,final List<SchemaMapping> mappings,final Set<Long> roles,final Set<String> resources){
  final UserTO userTO=new UserTO();
  userTO.setResources(resources);
  MembershipTO membershipTO;
  for (  Long roleId : roles) {
    membershipTO=new MembershipTO();
    membershipTO.setRoleId(roleId);
    userTO.addMembership(membershipTO);
  }
  Attribute attribute;
  List<Object> values;
  AttributeTO attributeTO;
  for (  SchemaMapping mapping : mappings) {
    if (mapping.isAccountid()) {
      attribute=obj.getAttributeByName(Name.NAME);
    }
 else     if (mapping.isPassword()) {
      attribute=obj.getAttributeByName(OperationalAttributes.PASSWORD_NAME);
    }
 else {
      attribute=obj.getAttributeByName(mapping.getExtAttrName());
    }
    values=attribute == null ? Collections.EMPTY_LIST : attribute.getValue();
switch (mapping.getIntMappingType()) {
case SyncopeUserId:
      break;
case Password:
    userTO.setPassword(getPassword(attribute == null ? Collections.EMPTY_LIST : attribute.getValue()));
  break;
case UserSchema:
attributeTO=new AttributeTO();
attributeTO.setSchema(mapping.getIntAttrName());
for (Object value : values) {
attributeTO.addValue(value.toString());
}
userTO.addAttribute(attributeTO);
break;
case UserDerivedSchema:
attributeTO=new AttributeTO();
attributeTO.setSchema(mapping.getIntAttrName());
userTO.addDerivedAttribute(attributeTO);
break;
case UserVirtualSchema:
attributeTO=new AttributeTO();
attributeTO.setSchema(mapping.getIntAttrName());
userTO.addVirtualAttribute(attributeTO);
break;
default :
}
}
return userTO;
}"
60931,"@Override public void setSchemaModalPage(final PageReference callerPageRef,final ModalWindow window,AbstractBaseBean schemaTO,final boolean createFlag){
  final SchemaTO schema=schemaTO == null ? new SchemaTO() : (SchemaTO)schemaTO;
  final Form schemaForm=new Form(""String_Node_Str"");
  schemaForm.setModel(new CompoundPropertyModel(schema));
  schemaForm.setOutputMarkupId(Boolean.TRUE);
  final AjaxTextFieldPanel name=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""),true);
  name.addRequiredLabel();
  name.setEnabled(createFlag);
  final AjaxTextFieldPanel conversionPattern=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""),true);
  final ArrayList<String> validatorsList=new ArrayList<String>();
  validatorsList.add(""String_Node_Str"" + ""String_Node_Str"");
  validatorsList.add(""String_Node_Str"" + ""String_Node_Str"");
  final AjaxDropDownChoicePanel<String> validatorClass=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(schema,""String_Node_Str""),true);
  validatorClass.setChoices(validatorsList);
  final AjaxDropDownChoicePanel<SchemaType> type=new AjaxDropDownChoicePanel<SchemaType>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(schema,""String_Node_Str""),false);
  type.setChoices(Arrays.asList(SchemaType.values()));
  type.addRequiredLabel();
  final AjaxTextFieldPanel enumerationValues=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""),false);
  if (schema != null && SchemaType.Enum.equals(((SchemaTO)schema).getType())) {
    enumerationValues.addRequiredLabel();
    enumerationValues.setEnabled(Boolean.TRUE);
  }
 else {
    enumerationValues.removeRequiredLabel();
    enumerationValues.setEnabled(Boolean.FALSE);
  }
  type.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      if (SchemaType.Enum.ordinal() == Integer.parseInt(type.getField().getValue())) {
        enumerationValues.addRequiredLabel();
        enumerationValues.setEnabled(Boolean.TRUE);
        enumerationValues.setModelObject(((SchemaTO)schema).getEnumerationValues());
      }
 else {
        enumerationValues.removeRequiredLabel();
        enumerationValues.setEnabled(Boolean.FALSE);
        enumerationValues.setModelObject(null);
      }
      target.add(schemaForm);
    }
  }
);
  final AutoCompleteTextField mandatoryCondition=new AutoCompleteTextField(""String_Node_Str""){
    private static final long serialVersionUID=-2428903969518079100L;
    @Override protected Iterator getChoices(    String input){
      List<String> choices=new ArrayList<String>();
      if (Strings.isEmpty(input)) {
        choices=Collections.emptyList();
        return choices.iterator();
      }
      if (""String_Node_Str"".startsWith(input.toLowerCase())) {
        choices.add(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".startsWith(input.toLowerCase())) {
        choices.add(""String_Node_Str"");
      }
      return choices.iterator();
    }
  }
;
  mandatoryCondition.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    AjaxRequestTarget art){
    }
  }
);
  final AjaxCheckBoxPanel multivalue=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(schema,""String_Node_Str""),true);
  final AjaxCheckBoxPanel readonly=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(schema,""String_Node_Str""),true);
  final AjaxCheckBoxPanel uniqueConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(schema,""String_Node_Str""),true);
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      SchemaTO schemaTO=(SchemaTO)form.getDefaultModelObject();
      if (schemaTO.isMultivalue() && schemaTO.isUniqueConstraint()) {
        error(getString(""String_Node_Str""));
        return;
      }
      if (createFlag) {
        restClient.createSchema(kind,schemaTO);
      }
 else {
        restClient.updateSchema(kind,schemaTO);
      }
      Schema callerPage=(Schema)callerPageRef.getPage();
      callerPage.setOperationResult(true);
      window.close(target);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  schemaForm.add(name);
  schemaForm.add(conversionPattern);
  schemaForm.add(validatorClass);
  schemaForm.add(type);
  schemaForm.add(enumerationValues);
  schemaForm.add(mandatoryCondition);
  schemaForm.add(multivalue);
  schemaForm.add(readonly);
  schemaForm.add(uniqueConstraint);
  schemaForm.add(submit);
  add(schemaForm);
}","@Override public void setSchemaModalPage(final PageReference callerPageRef,final ModalWindow window,AbstractBaseBean schemaTO,final boolean createFlag){
  final SchemaTO schema=schemaTO == null ? new SchemaTO() : (SchemaTO)schemaTO;
  final Form schemaForm=new Form(""String_Node_Str"");
  schemaForm.setModel(new CompoundPropertyModel(schema));
  schemaForm.setOutputMarkupId(Boolean.TRUE);
  final AjaxTextFieldPanel name=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""),true);
  name.addRequiredLabel();
  name.setEnabled(createFlag);
  final AjaxTextFieldPanel conversionPattern=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""),true);
  final IModel<List<String>> validatorsList=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      return restClient.getAllValidatorClasses();
    }
  }
;
  final AjaxDropDownChoicePanel<String> validatorClass=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(schema,""String_Node_Str""),true);
  ((DropDownChoice)validatorClass.getField()).setNullValid(true);
  validatorClass.setChoices(validatorsList.getObject());
  final AjaxDropDownChoicePanel<SchemaType> type=new AjaxDropDownChoicePanel<SchemaType>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(schema,""String_Node_Str""),false);
  type.setChoices(Arrays.asList(SchemaType.values()));
  type.addRequiredLabel();
  final AjaxTextFieldPanel enumerationValues=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(schema,""String_Node_Str""),false);
  if (schema != null && SchemaType.Enum.equals(((SchemaTO)schema).getType())) {
    enumerationValues.addRequiredLabel();
    enumerationValues.setEnabled(Boolean.TRUE);
  }
 else {
    enumerationValues.removeRequiredLabel();
    enumerationValues.setEnabled(Boolean.FALSE);
  }
  type.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      if (SchemaType.Enum.ordinal() == Integer.parseInt(type.getField().getValue())) {
        enumerationValues.addRequiredLabel();
        enumerationValues.setEnabled(Boolean.TRUE);
        enumerationValues.setModelObject(((SchemaTO)schema).getEnumerationValues());
      }
 else {
        enumerationValues.removeRequiredLabel();
        enumerationValues.setEnabled(Boolean.FALSE);
        enumerationValues.setModelObject(null);
      }
      target.add(schemaForm);
    }
  }
);
  final AutoCompleteTextField mandatoryCondition=new AutoCompleteTextField(""String_Node_Str""){
    private static final long serialVersionUID=-2428903969518079100L;
    @Override protected Iterator getChoices(    String input){
      List<String> choices=new ArrayList<String>();
      if (Strings.isEmpty(input)) {
        choices=Collections.emptyList();
        return choices.iterator();
      }
      if (""String_Node_Str"".startsWith(input.toLowerCase())) {
        choices.add(""String_Node_Str"");
      }
 else       if (""String_Node_Str"".startsWith(input.toLowerCase())) {
        choices.add(""String_Node_Str"");
      }
      return choices.iterator();
    }
  }
;
  mandatoryCondition.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    AjaxRequestTarget art){
    }
  }
);
  final AjaxCheckBoxPanel multivalue=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(schema,""String_Node_Str""),true);
  final AjaxCheckBoxPanel readonly=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(schema,""String_Node_Str""),true);
  final AjaxCheckBoxPanel uniqueConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(schema,""String_Node_Str""),true);
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      SchemaTO schemaTO=(SchemaTO)form.getDefaultModelObject();
      if (schemaTO.isMultivalue() && schemaTO.isUniqueConstraint()) {
        error(getString(""String_Node_Str""));
        return;
      }
      if (createFlag) {
        restClient.createSchema(kind,schemaTO);
      }
 else {
        restClient.updateSchema(kind,schemaTO);
      }
      Schema callerPage=(Schema)callerPageRef.getPage();
      callerPage.setOperationResult(true);
      window.close(target);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  schemaForm.add(name);
  schemaForm.add(conversionPattern);
  schemaForm.add(validatorClass);
  schemaForm.add(type);
  schemaForm.add(enumerationValues);
  schemaForm.add(mandatoryCondition);
  schemaForm.add(multivalue);
  schemaForm.add(readonly);
  schemaForm.add(uniqueConstraint);
  schemaForm.add(submit);
  add(schemaForm);
}"
60932,"/** 
 * Populator for Validator Schema DropDown components.
 */
public Set<String> getAllValidatorClasses(){
  Set<String> validators=null;
  try {
    validators=restTemplate.getForObject(baseURL + ""String_Node_Str"",Set.class);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return validators;
}","/** 
 * Populator for Validator Schema DropDown components.
 */
public List<String> getAllValidatorClasses(){
  List<String> validators=null;
  try {
    validators=Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"",String[].class));
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return validators;
}"
60933,"/** 
 * Execute a propagation task.
 * @param task to execute
 * @param startDate timestamp for beginning task excecution
 * @return TaskExecution
 */
public TaskExec execute(final PropagationTask task,final Date startDate){
  TaskExec execution=new TaskExec();
  execution.setStatus(PropagationTaskExecStatus.CREATED.toString());
  String taskExecutionMessage=null;
  Set<String> propagationAttempted=new HashSet<String>();
  try {
    final ConnInstance connInstance=task.getResource().getConnector();
    final ConnectorFacadeProxy connector=connLoader.getConnector(task.getResource());
    if (connector == null) {
      final String msg=String.format(""String_Node_Str"" + ""String_Node_Str"",task.getResource(),connInstance);
      throw new NoSuchBeanDefinitionException(msg);
    }
switch (task.getResourceOperationType()) {
case CREATE:
case UPDATE:
      ConnectorObject remoteObject=null;
    try {
      remoteObject=connector.getObject(task.getPropagationMode(),task.getResourceOperationType(),ObjectClass.ACCOUNT,new Uid(task.getOldAccountId() == null ? task.getAccountId() : task.getOldAccountId()),null);
    }
 catch (    RuntimeException ignore) {
      LOG.debug(""String_Node_Str"" + ""String_Node_Str"",ignore);
    }
  if (remoteObject != null) {
    final Set<Attribute> attributes=new HashSet<Attribute>(task.getAttributes());
    final Name newName=(Name)AttributeUtil.find(Name.NAME,attributes);
    LOG.debug(""String_Node_Str"",newName);
    if (newName != null && newName.equals(remoteObject.getName())) {
      LOG.debug(""String_Node_Str"");
      attributes.remove(newName);
    }
    LOG.debug(""String_Node_Str"",attributes);
    connector.update(task.getPropagationMode(),ObjectClass.ACCOUNT,remoteObject.getUid(),attributes,null,propagationAttempted);
  }
 else {
    connector.create(task.getPropagationMode(),ObjectClass.ACCOUNT,task.getAttributes(),null,propagationAttempted);
  }
break;
case DELETE:
connector.delete(task.getPropagationMode(),ObjectClass.ACCOUNT,new Uid(task.getAccountId()),null,propagationAttempted);
break;
default :
}
execution.setStatus(task.getPropagationMode() == PropagationMode.SYNC ? PropagationTaskExecStatus.SUCCESS.toString() : PropagationTaskExecStatus.SUBMITTED.toString());
LOG.debug(""String_Node_Str"",task.getResource());
}
 catch (Throwable t) {
LOG.error(""String_Node_Str"" + task.getResource().getName(),t);
if (t instanceof ConnectorException && t.getCause() != null) {
taskExecutionMessage=t.getCause().getMessage();
}
 else {
StringWriter exceptionWriter=new StringWriter();
exceptionWriter.write(t.getMessage() + ""String_Node_Str"");
t.printStackTrace(new PrintWriter(exceptionWriter));
taskExecutionMessage=exceptionWriter.toString();
}
try {
execution.setStatus(task.getPropagationMode() == PropagationMode.SYNC ? PropagationTaskExecStatus.FAILURE.toString() : PropagationTaskExecStatus.UNSUBMITTED.toString());
}
 catch (Throwable wft) {
LOG.error(""String_Node_Str"",execution,wft);
}
propagationAttempted.add(task.getResourceOperationType().toString().toLowerCase());
}
 finally {
LOG.debug(""String_Node_Str"",task);
if (hasToBeregistered(task,execution)) {
PropagationTask savedTask=taskDAO.save(task);
if (!propagationAttempted.isEmpty()) {
execution.setStartDate(startDate);
execution.setMessage(taskExecutionMessage);
execution.setEndDate(new Date());
execution.setTask(savedTask);
execution=taskExecDAO.save(execution);
LOG.debug(""String_Node_Str"",execution);
}
 else {
LOG.debug(""String_Node_Str"",execution);
}
}
}
return execution;
}","/** 
 * Execute a propagation task.
 * @param task to execute
 * @param startDate timestamp for beginning task excecution
 * @return TaskExecution
 */
public TaskExec execute(final PropagationTask task,final Date startDate){
  TaskExec execution=new TaskExec();
  execution.setStatus(PropagationTaskExecStatus.CREATED.toString());
  String taskExecutionMessage=null;
  Set<String> propagationAttempted=new HashSet<String>();
  try {
    final ConnInstance connInstance=task.getResource().getConnector();
    final ConnectorFacadeProxy connector=connLoader.getConnector(task.getResource());
    if (connector == null) {
      final String msg=String.format(""String_Node_Str"" + ""String_Node_Str"",task.getResource(),connInstance);
      throw new NoSuchBeanDefinitionException(msg);
    }
switch (task.getResourceOperationType()) {
case CREATE:
case UPDATE:
      ConnectorObject remoteObject=null;
    try {
      remoteObject=connector.getObject(task.getPropagationMode(),task.getResourceOperationType(),ObjectClass.ACCOUNT,new Uid(task.getOldAccountId() == null ? task.getAccountId() : task.getOldAccountId()),null);
    }
 catch (    RuntimeException ignore) {
      LOG.debug(""String_Node_Str"" + ""String_Node_Str"",ignore);
    }
  if (remoteObject != null) {
    final Set<Attribute> attributes=new HashSet<Attribute>(task.getAttributes());
    final Name newName=(Name)AttributeUtil.find(Name.NAME,attributes);
    LOG.debug(""String_Node_Str"",newName);
    if (newName != null && newName.equals(remoteObject.getName())) {
      LOG.debug(""String_Node_Str"");
      attributes.remove(newName);
    }
    LOG.debug(""String_Node_Str"",attributes);
    connector.update(task.getPropagationMode(),ObjectClass.ACCOUNT,remoteObject.getUid(),attributes,null,propagationAttempted);
  }
 else {
    connector.create(task.getPropagationMode(),ObjectClass.ACCOUNT,task.getAttributes(),null,propagationAttempted);
  }
break;
case DELETE:
connector.delete(task.getPropagationMode(),ObjectClass.ACCOUNT,new Uid(task.getAccountId()),null,propagationAttempted);
break;
default :
}
execution.setStatus(task.getPropagationMode() == PropagationMode.SYNC ? PropagationTaskExecStatus.SUCCESS.toString() : PropagationTaskExecStatus.SUBMITTED.toString());
LOG.debug(""String_Node_Str"",task.getResource());
}
 catch (Throwable t) {
LOG.error(""String_Node_Str"" + task.getResource().getName(),t);
if (t instanceof ConnectorException && t.getCause() != null) {
taskExecutionMessage=t.getCause().getMessage();
}
 else {
StringWriter exceptionWriter=new StringWriter();
exceptionWriter.write(t.getMessage() + ""String_Node_Str"");
t.printStackTrace(new PrintWriter(exceptionWriter));
taskExecutionMessage=exceptionWriter.toString();
}
try {
execution.setStatus(task.getPropagationMode() == PropagationMode.SYNC ? PropagationTaskExecStatus.FAILURE.toString() : PropagationTaskExecStatus.UNSUBMITTED.toString());
}
 catch (Throwable wft) {
LOG.error(""String_Node_Str"",execution,wft);
}
propagationAttempted.add(task.getResourceOperationType().toString().toLowerCase());
}
 finally {
LOG.debug(""String_Node_Str"",task);
if (hasToBeregistered(task,execution)) {
PropagationTask savedTask=taskDAO.save(task);
execution.setStartDate(startDate);
execution.setMessage(taskExecutionMessage);
execution.setEndDate(new Date());
execution.setTask(savedTask);
if (!propagationAttempted.isEmpty()) {
execution=taskExecDAO.save(execution);
LOG.debug(""String_Node_Str"",execution);
}
 else {
LOG.debug(""String_Node_Str"",execution);
}
}
}
return execution;
}"
60934,"public TaskExecTO getTaskExecutionTO(final TaskExec execution){
  TaskExecTO executionTO=new TaskExecTO();
  BeanUtils.copyProperties(execution,executionTO,IGNORE_TASK_EXECUTION_PROPERTIES);
  executionTO.setTask(execution.getTask().getId());
  return executionTO;
}","public TaskExecTO getTaskExecutionTO(final TaskExec execution){
  TaskExecTO executionTO=new TaskExecTO();
  BeanUtils.copyProperties(execution,executionTO,IGNORE_TASK_EXECUTION_PROPERTIES);
  if (execution.getId() != null) {
    executionTO.setId(execution.getId());
  }
  executionTO.setTask(execution.getTask().getId());
  return executionTO;
}"
60935,"@Test public final void findAll(){
  List<PropagationTask> plist=taskDAO.findAll(PropagationTask.class);
  assertEquals(3,plist.size());
  List<SchedTask> sclist=taskDAO.findAll(SchedTask.class);
  assertEquals(1,sclist.size());
  List<SyncTask> sylist=taskDAO.findAll(SyncTask.class);
  assertEquals(1,sylist.size());
}","@Test public final void findAll(){
  List<PropagationTask> plist=taskDAO.findAll(PropagationTask.class);
  assertEquals(4,plist.size());
  List<SchedTask> sclist=taskDAO.findAll(SchedTask.class);
  assertEquals(1,sclist.size());
  List<SyncTask> sylist=taskDAO.findAll(SyncTask.class);
  assertEquals(1,sylist.size());
}"
60936,"public List<RAttr> findInheritedAttributes(){
  List<RAttr> result=new ArrayList<RAttr>(attributes);
  if (isInheritAttributes() && getParent() != null) {
    result.addAll(getParent().findInheritedAttributes());
  }
  return result;
}","/** 
 * Get all inherited attributes from the ancestors.
 * @return a list of inherited and only inherited attributes.
 */
public List<RAttr> findInheritedAttributes(){
  final Map<RSchema,RAttr> result=new HashMap<RSchema,RAttr>();
  if (isInheritAttributes() && getParent() != null) {
    final Map<AbstractSchema,AbstractAttr> attrMap=getAttributesMap();
    for (    RAttr attr : (Collection<RAttr>)getParent().getAttributes()) {
      if (!attrMap.containsKey(attr.getSchema())) {
        result.put((RSchema)attr.getSchema(),attr);
      }
    }
    for (    RAttr attr : getParent().findInheritedAttributes()) {
      if (!attrMap.containsKey(attr.getSchema()) && !result.containsKey((RSchema)attr.getSchema())) {
        result.put((RSchema)attr.getSchema(),attr);
      }
    }
  }
  return new ArrayList<RAttr>(result.values());
}"
60937,"public List<RDerAttr> findInheritedDerivedAttributes(){
  List<RDerAttr> result=new ArrayList<RDerAttr>(derivedAttributes);
  if (isInheritDerivedAttributes() && getParent() != null) {
    result.addAll(getParent().findInheritedDerivedAttributes());
  }
  return result;
}","/** 
 * Get all inherited derived attributes from the ancestors.
 * @return a list of inherited and only inherited attributes.
 */
public List<RDerAttr> findInheritedDerivedAttributes(){
  final Map<RDerSchema,RDerAttr> result=new HashMap<RDerSchema,RDerAttr>();
  if (isInheritDerivedAttributes() && getParent() != null) {
    final Map<AbstractDerSchema,AbstractDerAttr> attrMap=getDerivedAttributesMap();
    for (    RDerAttr attr : (Collection<RDerAttr>)getParent().getDerivedAttributes()) {
      if (!attrMap.containsKey(attr.getDerivedSchema())) {
        result.put((RDerSchema)attr.getDerivedSchema(),attr);
      }
    }
    for (    RDerAttr attr : getParent().findInheritedDerivedAttributes()) {
      if (!attrMap.containsKey(attr.getDerivedSchema()) && !result.containsKey((RDerSchema)attr.getDerivedSchema())) {
        result.put((RDerSchema)attr.getDerivedSchema(),attr);
      }
    }
  }
  return new ArrayList<RDerAttr>(result.values());
}"
60938,"public List<RVirAttr> findInheritedVirtualAttributes(){
  List<RVirAttr> result=new ArrayList<RVirAttr>(virtualAttributes);
  if (isInheritVirtualAttributes() && getParent() != null) {
    result.addAll(getParent().findInheritedVirtualAttributes());
  }
  return result;
}","/** 
 * Get all inherited virtual attributes from the ancestors.
 * @return a list of inherited and only inherited attributes.
 */
public List<RVirAttr> findInheritedVirtualAttributes(){
  final Map<RVirSchema,RVirAttr> result=new HashMap<RVirSchema,RVirAttr>();
  if (isInheritVirtualAttributes() && getParent() != null) {
    final Map<AbstractVirSchema,AbstractVirAttr> attrMap=getVirtualAttributesMap();
    for (    RVirAttr attr : (Collection<RVirAttr>)getParent().getVirtualAttributes()) {
      if (!attrMap.containsKey(attr.getVirtualSchema())) {
        result.put((RVirSchema)attr.getVirtualSchema(),attr);
      }
    }
    for (    RVirAttr attr : getParent().findInheritedVirtualAttributes()) {
      if (!attrMap.containsKey(attr.getVirtualSchema()) && !result.containsKey((RVirSchema)attr.getVirtualSchema())) {
        result.put((RVirSchema)attr.getVirtualSchema(),attr);
      }
    }
  }
  return new ArrayList<RVirAttr>(result.values());
}"
60939,"public RoleTO getRoleTO(SyncopeRole role){
  RoleTO roleTO=new RoleTO();
  roleTO.setId(role.getId());
  roleTO.setName(role.getName());
  roleTO.setInheritAttributes(role.isInheritAttributes());
  roleTO.setInheritDerivedAttributes(role.isInheritDerivedAttributes());
  roleTO.setInheritVirtualAttributes(role.isInheritVirtualAttributes());
  if (role.getParent() != null) {
    roleTO.setParent(role.getParent().getId());
  }
  fillTO(roleTO,role.findInheritedAttributes(),role.findInheritedDerivedAttributes(),role.findInheritedVirtualAttributes(),role.getTargetResources());
  for (  Entitlement entitlement : role.getEntitlements()) {
    roleTO.addEntitlement(entitlement.getName());
  }
  roleTO.setPasswordPolicy(role.getPasswordPolicy() != null ? role.getPasswordPolicy().getId() : null);
  return roleTO;
}","public RoleTO getRoleTO(SyncopeRole role){
  RoleTO roleTO=new RoleTO();
  roleTO.setId(role.getId());
  roleTO.setName(role.getName());
  roleTO.setInheritAttributes(role.isInheritAttributes());
  roleTO.setInheritDerivedAttributes(role.isInheritDerivedAttributes());
  roleTO.setInheritVirtualAttributes(role.isInheritVirtualAttributes());
  if (role.getParent() != null) {
    roleTO.setParent(role.getParent().getId());
  }
  final List<RAttr> allAttributes=role.findInheritedAttributes();
  allAttributes.addAll((List<RAttr>)role.getAttributes());
  final List<RDerAttr> allDerAttributes=role.findInheritedDerivedAttributes();
  allDerAttributes.addAll((List<RDerAttr>)role.getDerivedAttributes());
  final List<RVirAttr> allVirAttributes=role.findInheritedVirtualAttributes();
  allVirAttributes.addAll((List<RVirAttr>)role.getVirtualAttributes());
  fillTO(roleTO,allAttributes,allDerAttributes,allVirAttributes,role.getTargetResources());
  for (  Entitlement entitlement : role.getEntitlements()) {
    roleTO.addEntitlement(entitlement.getName());
  }
  roleTO.setPasswordPolicy(role.getPasswordPolicy() != null ? role.getPasswordPolicy().getId() : null);
  return roleTO;
}"
60940,"@Test public final void inheritedAttributes(){
  SyncopeRole director=roleDAO.find(7L);
  assertEquals(2,director.findInheritedAttributes().size());
}","@Test public final void inheritedAttributes(){
  SyncopeRole director=roleDAO.find(7L);
  assertEquals(1,director.findInheritedAttributes().size());
}"
60941,"public IntMappingTypesDropDownChoice(final String id,final String name,final PropertyModel<IntMappingType> model,final AjaxDropDownChoicePanel<String> chooserToPopulate){
  super(id,name,model,false);
  field.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      chooserToPopulate.setRequired(true);
      chooserToPopulate.setEnabled(true);
      final List<String> result;
switch (model.getObject()) {
case UserSchema:
        result=uSchemaAttrNames;
      break;
case UserDerivedSchema:
    result=uDerSchemaAttrNames;
  break;
case UserVirtualSchema:
result=uVirSchemaAttrNames;
break;
case SyncopeUserId:
case Password:
default :
chooserToPopulate.setRequired(false);
chooserToPopulate.setEnabled(false);
result=Collections.EMPTY_LIST;
}
chooserToPopulate.setChoices(result);
target.add(chooserToPopulate);
}
}
);
}","public IntMappingTypesDropDownChoice(final String id,final String name,final PropertyModel<IntMappingType> model,final AjaxDropDownChoicePanel<String> chooserToPopulate){
  super(id,name,model,false);
  field.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      chooserToPopulate.setRequired(true);
      chooserToPopulate.setEnabled(true);
      final List<String> result;
switch (model.getObject()) {
case UserSchema:
        result=uSchemaAttrNames;
      break;
case UserDerivedSchema:
    result=uDerSchemaAttrNames;
  break;
case UserVirtualSchema:
result=uVirSchemaAttrNames;
break;
case SyncopeUserId:
case Password:
case Username:
default :
chooserToPopulate.setRequired(false);
chooserToPopulate.setEnabled(false);
result=Collections.EMPTY_LIST;
}
chooserToPopulate.setChoices(result);
target.add(chooserToPopulate);
}
}
);
}"
60942,"public ResourceModalPage(final PageReference callPageRef,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  super();
  uSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  uDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  uVirSchemaAttrNames=schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
  final IModel<List<ConnInstanceTO>> connectors=new LoadableDetachableModel<List<ConnInstanceTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnInstanceTO> load(){
      return connectorRestClient.getAllConnectors();
    }
  }
;
  final IModel<List<IntMappingType>> intMappingTypes=new LoadableDetachableModel<List<IntMappingType>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<IntMappingType> load(){
      return Arrays.asList(IntMappingType.values());
    }
  }
;
  final IModel<List<ConnConfProperty>> connectorPropertiesModel=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      Set<ConnConfProperty> props=resourceTO.getConnectorConfigurationProperties();
      if (props == null || props.isEmpty() || createFlag) {
        props=overridableConnectorProperties;
      }
      return new ArrayList<ConnConfProperty>(props);
    }
  }
;
  updateResourceSchemaNames(resourceTO);
  updateConnectorProperties(resourceTO.getConnectorId());
  final ConnInstanceTO connectorTO=new ConnInstanceTO();
  if (!createFlag) {
    connectorTO.setId(resourceTO.getConnectorId());
  }
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(resourceTO));
  final AjaxTextFieldPanel resourceName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  resourceName.setEnabled(createFlag);
  resourceName.addRequiredLabel();
  form.add(resourceName);
  final AjaxTextFieldPanel accountLink=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  form.add(accountLink);
  final AjaxCheckBoxPanel forceMandatoryConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(forceMandatoryConstraint);
  final AjaxCheckBoxPanel propagationPrimary=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(propagationPrimary);
  final AjaxIntFieldPanel propagationPriority=new AjaxIntFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Integer>(resourceTO,""String_Node_Str""),false);
  form.add(propagationPriority);
  final AjaxDropDownChoicePanel<PropagationMode> propagationMode=new AjaxDropDownChoicePanel<PropagationMode>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  propagationMode.setChoices(Arrays.asList(PropagationMode.values()));
  form.add(propagationMode);
  final AjaxDropDownChoicePanel<TraceLevel> createTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  createTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(createTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> updateTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  updateTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(updateTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> deleteTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  deleteTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(deleteTraceLevel);
  mappingContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingContainer.setOutputMarkupId(true);
  form.add(mappingContainer);
  connectorPropertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  connectorPropertiesContainer.setOutputMarkupId(true);
  form.add(connectorPropertiesContainer);
  final AjaxDropDownChoicePanel<ConnInstanceTO> connector=new AjaxDropDownChoicePanel<ConnInstanceTO>(""String_Node_Str"",getString(""String_Node_Str""),new Model<ConnInstanceTO>(connectorTO),false);
  connector.setChoices(connectors.getObject());
  connector.setChoiceRenderer(new ChoiceRenderer(""String_Node_Str"",""String_Node_Str""));
  connector.getField().setModel(new IModel<ConnInstanceTO>(){
    private static final long serialVersionUID=-4202872830392400310L;
    @Override public ConnInstanceTO getObject(){
      return connectorTO;
    }
    @Override public void setObject(    final ConnInstanceTO connector){
      resourceTO.setConnectorId(connector.getId());
    }
    @Override public void detach(){
    }
  }
);
  connector.addRequiredLabel();
  connector.setEnabled(createFlag);
  form.add(connector);
  final ListView<SchemaMappingTO> mappings=new ListView<SchemaMappingTO>(""String_Node_Str"",resourceTO.getMappings()){
    private static final long serialVersionUID=4949588177564901031L;
    @Override protected void populateItem(    final ListItem<SchemaMappingTO> item){
      final SchemaMappingTO mappingTO=item.getModelObject();
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
        private static final long serialVersionUID=7170946748485726506L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int index=-1;
          for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
            if (mappingTO.equals(resourceTO.getMappings().get(i))) {
              index=i;
            }
          }
          if (index != -1) {
            resourceTO.getMappings().remove(index);
            item.getParent().removeAll();
            target.add(mappingContainer);
          }
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=-7927968187160354605L;
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      final AjaxDropDownChoicePanel intAttrNames=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
      intAttrNames.setChoices(resourceSchemaNames);
      intAttrNames.setRequired(true);
      intAttrNames.setStyleShet(""String_Node_Str"");
      if (mappingTO.getIntMappingType() == null) {
        intAttrNames.setChoices(Collections.EMPTY_LIST);
      }
 else {
switch (mappingTO.getIntMappingType()) {
case UserSchema:
          intAttrNames.setChoices(uSchemaAttrNames);
        break;
case UserDerivedSchema:
      intAttrNames.setChoices(uDerSchemaAttrNames);
    break;
case UserVirtualSchema:
  intAttrNames.setChoices(uVirSchemaAttrNames);
break;
case SyncopeUserId:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
case Password:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
default :
intAttrNames.setChoices(Collections.EMPTY_LIST);
}
}
item.add(intAttrNames);
final IntMappingTypesDropDownChoice mappingTypesPanel=new IntMappingTypesDropDownChoice(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<IntMappingType>(mappingTO,""String_Node_Str""),intAttrNames);
mappingTypesPanel.setRequired(true);
mappingTypesPanel.setChoices(intMappingTypes.getObject());
mappingTypesPanel.setStyleShet(""String_Node_Str"");
item.add(mappingTypesPanel);
final FieldPanel extAttrName;
if (resourceSchemaNames.isEmpty()) {
extAttrName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(mappingTO,""String_Node_Str""),true);
}
 else {
extAttrName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
((AjaxDropDownChoicePanel)extAttrName).setChoices(resourceSchemaNames);
}
boolean required=mappingTO != null && !mappingTO.isAccountid() && !mappingTO.isPassword();
extAttrName.setRequired(required);
extAttrName.setEnabled(required);
extAttrName.setStyleShet(""String_Node_Str"");
item.add(extAttrName);
final AjaxTextFieldPanel mandatoryCondition=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
mandatoryCondition.setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
mandatoryCondition.setStyleShet(""String_Node_Str"");
item.add(mandatoryCondition);
final AjaxCheckBoxPanel accountId=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),false);
accountId.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!accountId.getModelObject() && !mappingTO.isPassword());
extAttrName.setModelObject(null);
extAttrName.setRequired(!accountId.getModelObject());
target.add(extAttrName);
}
}
);
item.add(accountId);
final AjaxCheckBoxPanel password=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
password.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!mappingTO.isAccountid() && !password.getModelObject());
extAttrName.setModelObject(null);
extAttrName.setRequired(!password.getModelObject());
target.add(extAttrName);
}
}
);
item.add(password);
}
}
;
mappings.setReuseItems(true);
mappingContainer.add(mappings);
final AjaxButton addSchemaMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-4804368561204623354L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
resourceTO.getMappings().add(new SchemaMappingTO());
target.add(mappingContainer);
}
@Override protected void onError(AjaxRequestTarget target,Form<?> form){
}
}
;
addSchemaMappingBtn.setDefaultFormProcessing(false);
addSchemaMappingBtn.setEnabled(!createFlag);
mappingContainer.add(addSchemaMappingBtn);
connectorPropertiesContainer.add(new ListView<ConnConfProperty>(""String_Node_Str"",connectorPropertiesModel){
private static final long serialVersionUID=9101744072914090143L;
@Override protected void populateItem(final ListItem<ConnConfProperty> item){
final ConnConfProperty property=item.getModelObject();
final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
item.add(label);
final FieldPanel field;
if (GUARDED_STRING.equals(property.getSchema().getType())) {
field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
}
 else {
field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),false).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
if (property.getSchema().isRequired()) {
field.addRequiredLabel();
}
}
field.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
target.add(mappingContainer);
}
}
);
item.add(field);
resourceTO.getConnectorConfigurationProperties().add(property);
}
}
);
connector.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
updateConnectorProperties(resourceTO.getConnectorId());
target.add(mappingContainer);
target.add(connectorPropertiesContainer);
}
}
);
AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
int accountIdCount=0;
for (SchemaMappingTO mapping : resourceTO.getMappings()) {
if (mapping.isAccountid()) {
accountIdCount++;
}
}
if (accountIdCount == 0 || accountIdCount > 1) {
error(getString(""String_Node_Str""));
target.add(feedbackPanel);
}
 else {
try {
if (createFlag) {
restClient.create(resourceTO);
}
 else {
restClient.update(resourceTO);
}
((Resources)callPageRef.getPage()).setOperationResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
LOG.error(""String_Node_Str"",resourceTO);
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
target.add(feedbackPanel);
}
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.add(feedbackPanel);
}
}
;
form.add(submit);
add(form);
MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",createFlag ? ""String_Node_Str"" : ""String_Node_Str""));
}","public ResourceModalPage(final PageReference callPageRef,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  super();
  uSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  uDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  uVirSchemaAttrNames=schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
  final IModel<List<ConnInstanceTO>> connectors=new LoadableDetachableModel<List<ConnInstanceTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnInstanceTO> load(){
      return connectorRestClient.getAllConnectors();
    }
  }
;
  final IModel<List<IntMappingType>> intMappingTypes=new LoadableDetachableModel<List<IntMappingType>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<IntMappingType> load(){
      return Arrays.asList(IntMappingType.values());
    }
  }
;
  final IModel<List<ConnConfProperty>> connectorPropertiesModel=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      Set<ConnConfProperty> props=resourceTO.getConnectorConfigurationProperties();
      if (props == null || props.isEmpty() || createFlag) {
        props=overridableConnectorProperties;
      }
      return new ArrayList<ConnConfProperty>(props);
    }
  }
;
  updateResourceSchemaNames(resourceTO);
  updateConnectorProperties(resourceTO.getConnectorId());
  final ConnInstanceTO connectorTO=new ConnInstanceTO();
  if (!createFlag) {
    connectorTO.setId(resourceTO.getConnectorId());
  }
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(resourceTO));
  final AjaxTextFieldPanel resourceName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  resourceName.setEnabled(createFlag);
  resourceName.addRequiredLabel();
  form.add(resourceName);
  final AjaxTextFieldPanel accountLink=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  form.add(accountLink);
  final AjaxCheckBoxPanel forceMandatoryConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(forceMandatoryConstraint);
  final AjaxCheckBoxPanel propagationPrimary=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(propagationPrimary);
  final AjaxIntFieldPanel propagationPriority=new AjaxIntFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Integer>(resourceTO,""String_Node_Str""),false);
  form.add(propagationPriority);
  final AjaxDropDownChoicePanel<PropagationMode> propagationMode=new AjaxDropDownChoicePanel<PropagationMode>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  propagationMode.setChoices(Arrays.asList(PropagationMode.values()));
  form.add(propagationMode);
  final AjaxDropDownChoicePanel<TraceLevel> createTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  createTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(createTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> updateTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  updateTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(updateTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> deleteTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  deleteTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(deleteTraceLevel);
  mappingContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingContainer.setOutputMarkupId(true);
  form.add(mappingContainer);
  connectorPropertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  connectorPropertiesContainer.setOutputMarkupId(true);
  form.add(connectorPropertiesContainer);
  final AjaxDropDownChoicePanel<ConnInstanceTO> connector=new AjaxDropDownChoicePanel<ConnInstanceTO>(""String_Node_Str"",getString(""String_Node_Str""),new Model<ConnInstanceTO>(connectorTO),false);
  connector.setChoices(connectors.getObject());
  connector.setChoiceRenderer(new ChoiceRenderer(""String_Node_Str"",""String_Node_Str""));
  connector.getField().setModel(new IModel<ConnInstanceTO>(){
    private static final long serialVersionUID=-4202872830392400310L;
    @Override public ConnInstanceTO getObject(){
      return connectorTO;
    }
    @Override public void setObject(    final ConnInstanceTO connector){
      resourceTO.setConnectorId(connector.getId());
    }
    @Override public void detach(){
    }
  }
);
  connector.addRequiredLabel();
  connector.setEnabled(createFlag);
  form.add(connector);
  final ListView<SchemaMappingTO> mappings=new ListView<SchemaMappingTO>(""String_Node_Str"",resourceTO.getMappings()){
    private static final long serialVersionUID=4949588177564901031L;
    @Override protected void populateItem(    final ListItem<SchemaMappingTO> item){
      final SchemaMappingTO mappingTO=item.getModelObject();
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
        private static final long serialVersionUID=7170946748485726506L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int index=-1;
          for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
            if (mappingTO.equals(resourceTO.getMappings().get(i))) {
              index=i;
            }
          }
          if (index != -1) {
            resourceTO.getMappings().remove(index);
            item.getParent().removeAll();
            target.add(mappingContainer);
          }
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=-7927968187160354605L;
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      final AjaxDropDownChoicePanel intAttrNames=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
      intAttrNames.setChoices(resourceSchemaNames);
      intAttrNames.setRequired(true);
      intAttrNames.setStyleShet(""String_Node_Str"");
      if (mappingTO.getIntMappingType() == null) {
        intAttrNames.setChoices(Collections.EMPTY_LIST);
      }
 else {
switch (mappingTO.getIntMappingType()) {
case UserSchema:
          intAttrNames.setChoices(uSchemaAttrNames);
        break;
case UserDerivedSchema:
      intAttrNames.setChoices(uDerSchemaAttrNames);
    break;
case UserVirtualSchema:
  intAttrNames.setChoices(uVirSchemaAttrNames);
break;
case SyncopeUserId:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
case Password:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
case Username:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
default :
intAttrNames.setChoices(Collections.EMPTY_LIST);
}
}
item.add(intAttrNames);
final IntMappingTypesDropDownChoice mappingTypesPanel=new IntMappingTypesDropDownChoice(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<IntMappingType>(mappingTO,""String_Node_Str""),intAttrNames);
mappingTypesPanel.setRequired(true);
mappingTypesPanel.setChoices(intMappingTypes.getObject());
mappingTypesPanel.setStyleShet(""String_Node_Str"");
item.add(mappingTypesPanel);
final FieldPanel extAttrName;
if (resourceSchemaNames.isEmpty()) {
extAttrName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(mappingTO,""String_Node_Str""),true);
}
 else {
extAttrName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
((AjaxDropDownChoicePanel)extAttrName).setChoices(resourceSchemaNames);
}
boolean required=mappingTO != null && !mappingTO.isAccountid() && !mappingTO.isPassword();
extAttrName.setRequired(required);
extAttrName.setEnabled(required);
extAttrName.setStyleShet(""String_Node_Str"");
item.add(extAttrName);
final AjaxTextFieldPanel mandatoryCondition=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
mandatoryCondition.setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
mandatoryCondition.setStyleShet(""String_Node_Str"");
item.add(mandatoryCondition);
final AjaxCheckBoxPanel accountId=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),false);
accountId.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!accountId.getModelObject() && !mappingTO.isPassword());
extAttrName.setModelObject(null);
extAttrName.setRequired(!accountId.getModelObject());
target.add(extAttrName);
}
}
);
item.add(accountId);
final AjaxCheckBoxPanel password=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
password.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!mappingTO.isAccountid() && !password.getModelObject());
extAttrName.setModelObject(null);
extAttrName.setRequired(!password.getModelObject());
target.add(extAttrName);
}
}
);
item.add(password);
}
}
;
mappings.setReuseItems(true);
mappingContainer.add(mappings);
final AjaxButton addSchemaMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-4804368561204623354L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
resourceTO.getMappings().add(new SchemaMappingTO());
target.add(mappingContainer);
}
@Override protected void onError(AjaxRequestTarget target,Form<?> form){
}
}
;
addSchemaMappingBtn.setDefaultFormProcessing(false);
addSchemaMappingBtn.setEnabled(!createFlag);
mappingContainer.add(addSchemaMappingBtn);
connectorPropertiesContainer.add(new ListView<ConnConfProperty>(""String_Node_Str"",connectorPropertiesModel){
private static final long serialVersionUID=9101744072914090143L;
@Override protected void populateItem(final ListItem<ConnConfProperty> item){
final ConnConfProperty property=item.getModelObject();
final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
item.add(label);
final FieldPanel field;
if (GUARDED_STRING.equals(property.getSchema().getType())) {
field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
}
 else {
field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),false).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
if (property.getSchema().isRequired()) {
field.addRequiredLabel();
}
}
field.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
target.add(mappingContainer);
}
}
);
item.add(field);
resourceTO.getConnectorConfigurationProperties().add(property);
}
}
);
connector.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
updateConnectorProperties(resourceTO.getConnectorId());
target.add(mappingContainer);
target.add(connectorPropertiesContainer);
}
}
);
form.add(new ResourceSecurityPanel(""String_Node_Str"",resourceTO));
AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
int accountIdCount=0;
for (SchemaMappingTO mapping : resourceTO.getMappings()) {
if (mapping.isAccountid()) {
accountIdCount++;
}
}
if (accountIdCount == 0 || accountIdCount > 1) {
error(getString(""String_Node_Str""));
target.add(feedbackPanel);
}
 else {
try {
if (createFlag) {
restClient.create(resourceTO);
}
 else {
restClient.update(resourceTO);
}
((Resources)callPageRef.getPage()).setOperationResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
LOG.error(""String_Node_Str"",resourceTO);
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
target.add(feedbackPanel);
}
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.add(feedbackPanel);
}
}
;
form.add(submit);
add(form);
MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",createFlag ? ""String_Node_Str"" : ""String_Node_Str""));
}"
60943,"@Override protected void onUpdate(final AjaxRequestTarget target){
  chooserToPopulate.setRequired(true);
  chooserToPopulate.setEnabled(true);
  final List<String> result;
switch (model.getObject()) {
case UserSchema:
    result=uSchemaAttrNames;
  break;
case UserDerivedSchema:
result=uDerSchemaAttrNames;
break;
case UserVirtualSchema:
result=uVirSchemaAttrNames;
break;
case SyncopeUserId:
case Password:
default :
chooserToPopulate.setRequired(false);
chooserToPopulate.setEnabled(false);
result=Collections.EMPTY_LIST;
}
chooserToPopulate.setChoices(result);
target.add(chooserToPopulate);
}","@Override protected void onUpdate(final AjaxRequestTarget target){
  chooserToPopulate.setRequired(true);
  chooserToPopulate.setEnabled(true);
  final List<String> result;
switch (model.getObject()) {
case UserSchema:
    result=uSchemaAttrNames;
  break;
case UserDerivedSchema:
result=uDerSchemaAttrNames;
break;
case UserVirtualSchema:
result=uVirSchemaAttrNames;
break;
case SyncopeUserId:
case Password:
case Username:
default :
chooserToPopulate.setRequired(false);
chooserToPopulate.setEnabled(false);
result=Collections.EMPTY_LIST;
}
chooserToPopulate.setChoices(result);
target.add(chooserToPopulate);
}"
60944,"/** 
 * Constructor.
 * @param callerPageRef
 * @param window
 * @param roleTO
 * @param createFlag
 */
public RoleModalPage(final PageReference callerPageRef,final ModalWindow window,final RoleTO roleTO,final boolean createFlag){
  super();
  if (!createFlag) {
    cloneOldRoleTO(roleTO);
  }
  final Form form=new Form(""String_Node_Str"");
  add(new Label(""String_Node_Str"",roleTO.getId() != 0 ? roleTO.getDisplayName() : ""String_Node_Str""));
  form.setModel(new CompoundPropertyModel(roleTO));
  final AjaxTextFieldPanel name=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(roleTO,""String_Node_Str""),false);
  name.addRequiredLabel();
  form.add(name);
  form.add(new AttributesPanel(""String_Node_Str"",roleTO,form));
  final AjaxCheckBoxPanel inhAttributes=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(roleTO,""String_Node_Str""),false);
  form.add(inhAttributes);
  form.add(new DerivedAttributesPanel(""String_Node_Str"",roleTO));
  final AjaxCheckBoxPanel inhDerivedAttributes=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(roleTO,""String_Node_Str""),false);
  inhDerivedAttributes.setOutputMarkupId(true);
  form.add(inhDerivedAttributes);
  form.add(new VirtualAttributesPanel(""String_Node_Str"",roleTO));
  final AjaxCheckBoxPanel inhVirtualAttributes=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(roleTO,""String_Node_Str""),false);
  inhVirtualAttributes.setOutputMarkupId(true);
  form.add(inhVirtualAttributes);
  form.add(new SecurityPanel(""String_Node_Str"",roleTO));
  form.add(new ResourcesPanel(""String_Node_Str"",roleTO));
  ListModel<String> selectedEntitlements=new ListModel<String>(roleTO.getEntitlements());
  ListModel<String> availableEntitlements=new ListModel<String>(entitlementRestClient.getAllEntitlements());
  final Palette<String> entitlementsPalette=new Palette(""String_Node_Str"",selectedEntitlements,availableEntitlements,new SelectChoiceRenderer(),20,false);
  form.add(entitlementsPalette);
  submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final RoleTO roleTO=(RoleTO)form.getDefaultModelObject();
      try {
        final List<String> entitlementList=new ArrayList<String>(entitlementsPalette.getModelCollection().size());
        for (        String entitlement : entitlementsPalette.getModelCollection()) {
          entitlementList.add(entitlement);
        }
        roleTO.setEntitlements(entitlementList);
        if (createFlag) {
          roleRestClient.createRole(roleTO);
        }
 else {
          setupRoleMod(roleTO);
          if (roleMod != null) {
            roleRestClient.updateRole(roleMod);
          }
        }
        ((Roles)callerPageRef.getPage()).setOperationResult(true);
        window.close(target);
      }
 catch (      Exception e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  form.add(submit);
  add(form);
}","/** 
 * Constructor.
 * @param callerPageRef
 * @param window
 * @param roleTO
 * @param createFlag
 */
public RoleModalPage(final PageReference callerPageRef,final ModalWindow window,final RoleTO roleTO,final boolean createFlag){
  super();
  if (!createFlag) {
    cloneOldRoleTO(roleTO);
  }
  final Form form=new Form(""String_Node_Str"");
  add(new Label(""String_Node_Str"",roleTO.getId() != 0 ? roleTO.getDisplayName() : ""String_Node_Str""));
  form.setModel(new CompoundPropertyModel(roleTO));
  final AjaxTextFieldPanel name=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(roleTO,""String_Node_Str""),false);
  name.addRequiredLabel();
  form.add(name);
  form.add(new AttributesPanel(""String_Node_Str"",roleTO,form));
  final AjaxCheckBoxPanel inhAttributes=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(roleTO,""String_Node_Str""),false);
  form.add(inhAttributes);
  form.add(new DerivedAttributesPanel(""String_Node_Str"",roleTO));
  final AjaxCheckBoxPanel inhDerivedAttributes=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(roleTO,""String_Node_Str""),false);
  inhDerivedAttributes.setOutputMarkupId(true);
  form.add(inhDerivedAttributes);
  form.add(new VirtualAttributesPanel(""String_Node_Str"",roleTO));
  final AjaxCheckBoxPanel inhVirtualAttributes=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(roleTO,""String_Node_Str""),false);
  inhVirtualAttributes.setOutputMarkupId(true);
  form.add(inhVirtualAttributes);
  form.add(new RoleSecurityPanel(""String_Node_Str"",roleTO));
  form.add(new ResourcesPanel(""String_Node_Str"",roleTO));
  ListModel<String> selectedEntitlements=new ListModel<String>(roleTO.getEntitlements());
  ListModel<String> availableEntitlements=new ListModel<String>(entitlementRestClient.getAllEntitlements());
  final Palette<String> entitlementsPalette=new Palette(""String_Node_Str"",selectedEntitlements,availableEntitlements,new SelectChoiceRenderer(),20,false);
  form.add(entitlementsPalette);
  submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final RoleTO roleTO=(RoleTO)form.getDefaultModelObject();
      try {
        final List<String> entitlementList=new ArrayList<String>(entitlementsPalette.getModelCollection().size());
        for (        String entitlement : entitlementsPalette.getModelCollection()) {
          entitlementList.add(entitlement);
        }
        roleTO.setEntitlements(entitlementList);
        if (createFlag) {
          roleRestClient.createRole(roleTO);
        }
 else {
          setupRoleMod(roleTO);
          if (roleMod != null) {
            roleRestClient.updateRole(roleMod);
          }
        }
        ((Roles)callerPageRef.getPage()).setOperationResult(true);
        window.close(target);
      }
 catch (      Exception e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  form.add(submit);
  add(form);
}"
60945,"public List<ConnBundleTO> getAllBundles(){
  List<ConnBundleTO> bundles=null;
  try {
    bundles=Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"",ConnBundleTO[].class));
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return bundles;
}","public List<ConnBundleTO> getAllBundles(){
  List<ConnBundleTO> bundles=null;
  try {
    bundles=Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"" + SyncopeSession.get().getLocale(),ConnBundleTO[].class));
  }
 catch (  SyncopeClientCompositeErrorException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return bundles;
}"
60946,"/** 
 * Get all connectors.
 * @return ConnectorInstanceTOs
 */
public List<ConnInstanceTO> getAllConnectors(){
  return Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"",ConnInstanceTO[].class));
}","/** 
 * Get all connectors.
 * @return ConnectorInstanceTOs
 */
public List<ConnInstanceTO> getAllConnectors(){
  return Arrays.asList(restTemplate.getForObject(baseURL + ""String_Node_Str"" + SyncopeSession.get().getLocale(),ConnInstanceTO[].class));
}"
60947,"/** 
 * Update an already existent connector.
 * @param schemaTO updated
 */
public void update(ConnInstanceTO connectorTO){
  restTemplate.postForObject(baseURL + ""String_Node_Str"",connectorTO,ConnInstanceTO.class);
}","public void update(ConnInstanceTO connectorTO){
  restTemplate.postForObject(baseURL + ""String_Node_Str"",connectorTO,ConnInstanceTO.class);
}"
60948,"/** 
 * Delete an already existent connector by its name.
 * @param name (e.g.:surname)
 * @return schemaTO
 */
public void delete(Long id){
  restTemplate.delete(baseURL + ""String_Node_Str"",id.toString());
}","public void delete(Long id){
  restTemplate.delete(baseURL + ""String_Node_Str"",id.toString());
}"
60949,"@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<ConnInstanceTO> list() throws NotFoundException {
  List<ConnInstance> connInstances=connInstanceDAO.findAll();
  List<ConnInstanceTO> connInstanceTOs=new ArrayList<ConnInstanceTO>();
  for (  ConnInstance connector : connInstances) {
    connInstanceTOs.add(binder.getConnInstanceTO(connector));
  }
  return connInstanceTOs;
}","@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<ConnInstanceTO> list(@RequestParam(value=""String_Node_Str"",required=false) final String lang) throws NotFoundException {
  if (StringUtils.isBlank(lang)) {
    CurrentLocale.set(Locale.ENGLISH);
  }
 else {
    CurrentLocale.set(new Locale(lang));
  }
  List<ConnInstance> connInstances=connInstanceDAO.findAll();
  List<ConnInstanceTO> connInstanceTOs=new ArrayList<ConnInstanceTO>();
  for (  ConnInstance connector : connInstances) {
    connInstanceTOs.add(binder.getConnInstanceTO(connector));
  }
  return connInstanceTOs;
}"
60950,"@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<ConnBundleTO> getBundles() throws NotFoundException, MissingConfKeyException {
  ConnectorInfoManager manager=connBundleManager.getConnectorManager();
  List<ConnectorInfo> bundles=manager.getConnectorInfos();
  if (LOG.isDebugEnabled() && bundles != null) {
    LOG.debug(""String_Node_Str"",bundles.size());
    for (    ConnectorInfo bundle : bundles) {
      LOG.debug(""String_Node_Str"",bundle.getConnectorDisplayName());
    }
  }
  ConnBundleTO connectorBundleTO;
  ConnectorKey key;
  ConfigurationProperties properties;
  List<ConnBundleTO> connectorBundleTOs=new ArrayList<ConnBundleTO>();
  if (bundles != null) {
    for (    ConnectorInfo bundle : bundles) {
      connectorBundleTO=new ConnBundleTO();
      connectorBundleTO.setDisplayName(bundle.getConnectorDisplayName());
      key=bundle.getConnectorKey();
      LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",new Object[]{key.getBundleName(),key.getBundleVersion(),key.getConnectorName()});
      connectorBundleTO.setBundleName(key.getBundleName());
      connectorBundleTO.setConnectorName(key.getConnectorName());
      connectorBundleTO.setVersion(key.getBundleVersion());
      properties=connBundleManager.getConfigurationProperties(bundle);
      ConnConfPropSchema connConfPropSchema;
      ConfigurationProperty configurationProperty;
      for (      String propName : properties.getPropertyNames()) {
        connConfPropSchema=new ConnConfPropSchema();
        configurationProperty=properties.getProperty(propName);
        connConfPropSchema.setName(configurationProperty.getName());
        connConfPropSchema.setDisplayName(configurationProperty.getDisplayName(propName));
        connConfPropSchema.setHelpMessage(configurationProperty.getHelpMessage(propName));
        connConfPropSchema.setRequired(configurationProperty.isRequired());
        connConfPropSchema.setType(configurationProperty.getType().getName());
        connectorBundleTO.addProperty(connConfPropSchema);
      }
      LOG.debug(""String_Node_Str"",connectorBundleTO.getProperties());
      connectorBundleTOs.add(connectorBundleTO);
    }
  }
  return connectorBundleTOs;
}","@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<ConnBundleTO> getBundles(@RequestParam(value=""String_Node_Str"",required=false) final String lang) throws NotFoundException, MissingConfKeyException {
  if (StringUtils.isBlank(lang)) {
    CurrentLocale.set(Locale.ENGLISH);
  }
 else {
    CurrentLocale.set(new Locale(lang));
  }
  ConnectorInfoManager manager=connBundleManager.getConnectorManager();
  List<ConnectorInfo> bundles=manager.getConnectorInfos();
  if (LOG.isDebugEnabled() && bundles != null) {
    LOG.debug(""String_Node_Str"",bundles.size());
    for (    ConnectorInfo bundle : bundles) {
      LOG.debug(""String_Node_Str"",bundle.getConnectorDisplayName());
    }
  }
  ConnBundleTO connectorBundleTO;
  ConnectorKey key;
  ConfigurationProperties properties;
  List<ConnBundleTO> connectorBundleTOs=new ArrayList<ConnBundleTO>();
  if (bundles != null) {
    for (    ConnectorInfo bundle : bundles) {
      connectorBundleTO=new ConnBundleTO();
      connectorBundleTO.setDisplayName(bundle.getConnectorDisplayName());
      key=bundle.getConnectorKey();
      LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",new Object[]{key.getBundleName(),key.getBundleVersion(),key.getConnectorName()});
      connectorBundleTO.setBundleName(key.getBundleName());
      connectorBundleTO.setConnectorName(key.getConnectorName());
      connectorBundleTO.setVersion(key.getBundleVersion());
      properties=connBundleManager.getConfigurationProperties(bundle);
      ConnConfPropSchema connConfPropSchema;
      ConfigurationProperty configurationProperty;
      for (      String propName : properties.getPropertyNames()) {
        connConfPropSchema=new ConnConfPropSchema();
        configurationProperty=properties.getProperty(propName);
        connConfPropSchema.setName(configurationProperty.getName());
        connConfPropSchema.setDisplayName(configurationProperty.getDisplayName(propName));
        connConfPropSchema.setHelpMessage(configurationProperty.getHelpMessage(propName));
        connConfPropSchema.setRequired(configurationProperty.isRequired());
        connConfPropSchema.setType(configurationProperty.getType().getName());
        connectorBundleTO.addProperty(connConfPropSchema);
      }
      LOG.debug(""String_Node_Str"",connectorBundleTO.getProperties());
      connectorBundleTOs.add(connectorBundleTO);
    }
  }
  return connectorBundleTOs;
}"
60951,"public ConnInstance updateConnInstance(Long connectorInstanceId,ConnInstanceTO connInstanceTO) throws SyncopeClientCompositeErrorException {
  SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  SyncopeClientException requiredValuesMissing=new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);
  if (connectorInstanceId == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  ConnInstance connInstance=connectorInstanceDAO.find(connectorInstanceId);
  if (connInstanceTO.getBundleName() != null) {
    connInstance.setBundleName(connInstanceTO.getBundleName());
  }
  if (connInstanceTO.getVersion() != null) {
    connInstance.setVersion(connInstanceTO.getVersion());
  }
  if (connInstanceTO.getConnectorName() != null) {
    connInstance.setConnectorName(connInstanceTO.getConnectorName());
  }
  if (connInstanceTO.getConfiguration() != null && !connInstanceTO.getConfiguration().isEmpty()) {
    connInstance.setConfiguration(connInstanceTO.getConfiguration());
  }
  if (connInstanceTO.getDisplayName() != null) {
    connInstance.setDisplayName(connInstanceTO.getDisplayName());
  }
  connInstance.setCapabilities(connInstanceTO.getCapabilities());
  if (connInstanceTO.getSyncToken() == null) {
    connInstance.setSerializedSyncToken(null);
  }
  if (!requiredValuesMissing.getElements().isEmpty()) {
    compositeErrorException.addException(requiredValuesMissing);
  }
  if (compositeErrorException.hasExceptions()) {
    throw compositeErrorException;
  }
  return connInstance;
}","public ConnInstance updateConnInstance(final Long connectorInstanceId,final ConnInstanceTO connInstanceTO) throws SyncopeClientCompositeErrorException {
  SyncopeClientCompositeErrorException compositeErrorException=new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);
  SyncopeClientException requiredValuesMissing=new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);
  if (connectorInstanceId == null) {
    requiredValuesMissing.addElement(""String_Node_Str"");
  }
  ConnInstance connInstance=connectorInstanceDAO.find(connectorInstanceId);
  if (connInstanceTO.getBundleName() != null) {
    connInstance.setBundleName(connInstanceTO.getBundleName());
  }
  if (connInstanceTO.getVersion() != null) {
    connInstance.setVersion(connInstanceTO.getVersion());
  }
  if (connInstanceTO.getConnectorName() != null) {
    connInstance.setConnectorName(connInstanceTO.getConnectorName());
  }
  if (connInstanceTO.getConfiguration() != null && !connInstanceTO.getConfiguration().isEmpty()) {
    connInstance.setConfiguration(connInstanceTO.getConfiguration());
  }
  if (connInstanceTO.getDisplayName() != null) {
    connInstance.setDisplayName(connInstanceTO.getDisplayName());
  }
  connInstance.setCapabilities(connInstanceTO.getCapabilities());
  if (connInstanceTO.getSyncToken() == null) {
    connInstance.setSerializedSyncToken(null);
  }
  if (!requiredValuesMissing.getElements().isEmpty()) {
    compositeErrorException.addException(requiredValuesMissing);
  }
  if (compositeErrorException.hasExceptions()) {
    throw compositeErrorException;
  }
  return connInstance;
}"
60952,"public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) throws NotFoundException {
  ConnInstanceTO connInstanceTO=new ConnInstanceTO();
  connInstanceTO.setId(connInstance.getId());
  ConfigurationProperties properties=connBundleManager.getConfigurationProperties(connInstance.getBundleName(),connInstance.getVersion(),connInstance.getConnectorName());
  BeanUtils.copyProperties(connInstance,connInstanceTO,ignoreProperties);
  connInstanceTO.setSyncToken(connInstance.getSerializedSyncToken());
  ConnConfPropSchema connConfPropSchema;
  ConfigurationProperty configurationProperty;
  for (  String propName : properties.getPropertyNames()) {
    if (!connInstanceTO.isPropertyPresent(propName)) {
      connConfPropSchema=new ConnConfPropSchema();
      configurationProperty=properties.getProperty(propName);
      connConfPropSchema.setName(configurationProperty.getName());
      connConfPropSchema.setDisplayName(configurationProperty.getDisplayName(propName));
      connConfPropSchema.setHelpMessage(configurationProperty.getHelpMessage(propName));
      connConfPropSchema.setRequired(configurationProperty.isRequired());
      connConfPropSchema.setType(configurationProperty.getType().getName());
      ConnConfProperty property=new ConnConfProperty();
      property.setSchema(connConfPropSchema);
      connInstanceTO.addConfiguration(property);
    }
  }
  return connInstanceTO;
}","public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) throws NotFoundException {
  ConnInstanceTO connInstanceTO=new ConnInstanceTO();
  connInstanceTO.setId(connInstance.getId());
  ConfigurationProperties properties=connBundleManager.getConfigurationProperties(connInstance.getBundleName(),connInstance.getVersion(),connInstance.getConnectorName());
  BeanUtils.copyProperties(connInstance,connInstanceTO,ignoreProperties);
  connInstanceTO.setSyncToken(connInstance.getSerializedSyncToken());
  ConnConfPropSchema connConfPropSchema;
  ConfigurationProperty configurationProperty;
  Map<String,ConnConfProperty> connInstanceToConfMap=connInstanceTO.getConfigurationMap();
  for (  String propName : properties.getPropertyNames()) {
    configurationProperty=properties.getProperty(propName);
    if (!connInstanceToConfMap.containsKey(propName)) {
      connConfPropSchema=new ConnConfPropSchema();
      connConfPropSchema.setName(configurationProperty.getName());
      connConfPropSchema.setDisplayName(configurationProperty.getDisplayName(propName));
      connConfPropSchema.setHelpMessage(configurationProperty.getHelpMessage(propName));
      connConfPropSchema.setRequired(configurationProperty.isRequired());
      connConfPropSchema.setType(configurationProperty.getType().getName());
      ConnConfProperty property=new ConnConfProperty();
      property.setSchema(connConfPropSchema);
      connInstanceTO.addConfiguration(property);
    }
 else {
      connInstanceToConfMap.get(propName).getSchema().setDisplayName(configurationProperty.getDisplayName(propName));
    }
  }
  return connInstanceTO;
}"
60953,"@Before public void init(){
  Properties props=new java.util.Properties();
  try {
    InputStream propStream=getClass().getResourceAsStream(""String_Node_Str"");
    props.load(propStream);
    connidSoapVersion=props.getProperty(""String_Node_Str"");
    bundlesDirectory=props.getProperty(""String_Node_Str"");
  }
 catch (  Throwable t) {
    LOG.error(""String_Node_Str"",t);
  }
  assertNotNull(connidSoapVersion);
  assertNotNull(bundlesDirectory);
}","@BeforeClass public static void init(){
  Properties props=new Properties();
  InputStream propStream=null;
  try {
    propStream=ConnInstanceTestITCase.class.getResourceAsStream(""String_Node_Str"");
    props.load(propStream);
    connidSoapVersion=props.getProperty(""String_Node_Str"");
    bundlesDirectory=props.getProperty(""String_Node_Str"");
  }
 catch (  Throwable t) {
    LOG.error(""String_Node_Str"",t);
  }
 finally {
    if (propStream != null) {
      try {
        propStream.close();
      }
 catch (      IOException e) {
        LOG.error(""String_Node_Str"",e);
      }
    }
  }
  assertNotNull(connidSoapVersion);
  assertNotNull(bundlesDirectory);
}"
60954,"@Override protected void init(){
  getComponentInstantiationListeners().add(new SpringComponentInjector(this));
  getResourceSettings().setThrowExceptionOnMissingResource(true);
  getSecuritySettings().setAuthorizationStrategy(new RoleAuthorizationStrategy(this));
  getSecuritySettings().setUnauthorizedComponentInstantiationListener(this);
  getMarkupSettings().setStripWicketTags(true);
  MetaDataRoleAuthorizationStrategy.authorize(Schema.class,""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(Roles.class,""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(Connectors.class,""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(Resources.class,""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(Users.class,""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(Report.class,""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(Tasks.class,""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(Configuration.class,""String_Node_Str"");
  getRequestCycleListeners().add(new SyncopeRequestCycleListener());
}","@Override protected void init(){
  getComponentInstantiationListeners().add(new SpringComponentInjector(this));
  getResourceSettings().setThrowExceptionOnMissingResource(true);
  getSecuritySettings().setAuthorizationStrategy(new RoleAuthorizationStrategy(this));
  getSecuritySettings().setUnauthorizedComponentInstantiationListener(this);
  getMarkupSettings().setStripWicketTags(true);
  MetaDataRoleAuthorizationStrategy.authorize(Schema.class,""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(Roles.class,""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(Resources.class,""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(Resources.class,""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(Users.class,""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(Report.class,""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(Tasks.class,""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(Configuration.class,""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(Todo.class,""String_Node_Str"");
  getRequestCycleListeners().add(new SyncopeRequestCycleListener());
}"
60955,"public void setupNavigationPane(final WebPage page,final XMLRolesReader xmlRolesReader,final String version){
  page.add(new Label(""String_Node_Str"",""String_Node_Str"" + version + ""String_Node_Str""+ SyncopeSession.get().getCoreVersion()));
  BookmarkablePageLink schemaLink=new BookmarkablePageLink(""String_Node_Str"",Schema.class);
  String allowedSchemaRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(schemaLink,WebPage.ENABLE,allowedSchemaRoles);
  page.add(schemaLink);
  BookmarkablePageLink usersLink=new BookmarkablePageLink(""String_Node_Str"",Users.class);
  String allowedUsersRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(usersLink,WebPage.ENABLE,allowedUsersRoles);
  page.add(usersLink);
  BookmarkablePageLink rolesLink=new BookmarkablePageLink(""String_Node_Str"",Roles.class);
  String allowedRoleRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(rolesLink,WebPage.ENABLE,allowedRoleRoles);
  page.add(rolesLink);
  BookmarkablePageLink resourcesLink=new BookmarkablePageLink(""String_Node_Str"",Resources.class);
  String allowedResourcesRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(resourcesLink,WebPage.ENABLE,allowedResourcesRoles);
  page.add(resourcesLink);
  BookmarkablePageLink connectorsLink=new BookmarkablePageLink(""String_Node_Str"",Connectors.class);
  String allowedConnectorsRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(connectorsLink,WebPage.ENABLE,allowedConnectorsRoles);
  page.add(connectorsLink);
  BookmarkablePageLink reportLink=new BookmarkablePageLink(""String_Node_Str"",Report.class);
  String allowedReportRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(reportLink,WebPage.ENABLE,allowedReportRoles);
  page.add(reportLink);
  BookmarkablePageLink configurationLink=new BookmarkablePageLink(""String_Node_Str"",Configuration.class);
  String allowedConfigurationRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(configurationLink,WebPage.ENABLE,allowedConfigurationRoles);
  page.add(configurationLink);
  BookmarkablePageLink taskLink=new BookmarkablePageLink(""String_Node_Str"",Tasks.class);
  String allowedTasksRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(taskLink,WebPage.ENABLE,allowedTasksRoles);
  page.add(taskLink);
  page.add(new BookmarkablePageLink(""String_Node_Str"",Logout.class));
}","public void setupNavigationPane(final WebPage page,final XMLRolesReader xmlRolesReader,final String version){
  page.add(new Label(""String_Node_Str"",""String_Node_Str"" + version + ""String_Node_Str""+ SyncopeSession.get().getCoreVersion()));
  BookmarkablePageLink schemaLink=new BookmarkablePageLink(""String_Node_Str"",Schema.class);
  String allowedSchemaRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(schemaLink,WebPage.ENABLE,allowedSchemaRoles);
  page.add(schemaLink);
  BookmarkablePageLink usersLink=new BookmarkablePageLink(""String_Node_Str"",Users.class);
  String allowedUsersRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(usersLink,WebPage.ENABLE,allowedUsersRoles);
  page.add(usersLink);
  BookmarkablePageLink rolesLink=new BookmarkablePageLink(""String_Node_Str"",Roles.class);
  String allowedRoleRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(rolesLink,WebPage.ENABLE,allowedRoleRoles);
  page.add(rolesLink);
  BookmarkablePageLink resourcesLink=new BookmarkablePageLink(""String_Node_Str"",Resources.class);
  String allowedResourcesRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(resourcesLink,WebPage.ENABLE,allowedResourcesRoles);
  page.add(resourcesLink);
  BookmarkablePageLink todoLink=new BookmarkablePageLink(""String_Node_Str"",Todo.class);
  String allowedTodoRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(todoLink,WebPage.ENABLE,allowedTodoRoles);
  page.add(todoLink);
  BookmarkablePageLink reportLink=new BookmarkablePageLink(""String_Node_Str"",Report.class);
  String allowedReportRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(reportLink,WebPage.ENABLE,allowedReportRoles);
  page.add(reportLink);
  BookmarkablePageLink configurationLink=new BookmarkablePageLink(""String_Node_Str"",Configuration.class);
  String allowedConfigurationRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(configurationLink,WebPage.ENABLE,allowedConfigurationRoles);
  page.add(configurationLink);
  BookmarkablePageLink taskLink=new BookmarkablePageLink(""String_Node_Str"",Tasks.class);
  String allowedTasksRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(taskLink,WebPage.ENABLE,allowedTasksRoles);
  page.add(taskLink);
  page.add(new BookmarkablePageLink(""String_Node_Str"",Logout.class));
}"
60956,"public Configuration(final PageParameters parameters){
  super(parameters);
  add(createConfigWin=new ModalWindow(""String_Node_Str""));
  add(editConfigWin=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getRequest(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS);
  List<IColumn> confColumns=new ArrayList<IColumn>();
  confColumns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new AbstractColumn<ConfigurationTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    final IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          editConfigWin.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new ConfigurationModalPage(Configuration.this.getPageReference(),editConfigWin,configurationTO,false);
            }
          }
);
          editConfigWin.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  confColumns.add(new AbstractColumn<ConfigurationTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    final IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.deleteConfiguration(configurationTO.getKey());
          }
 catch (          SyncopeClientCompositeErrorException e) {
            LOG.error(""String_Node_Str"",e);
            error(e.getMessage());
            return;
          }
          info(getString(""String_Node_Str""));
          target.add(feedbackPanel);
          target.add(confContainer);
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable confTable=new AjaxFallbackDefaultDataTable(""String_Node_Str"",confColumns,new SyncopeConfProvider(),paginatorRows);
  confContainer=new WebMarkupContainer(""String_Node_Str"");
  confContainer.add(confTable);
  confContainer.setOutputMarkupId(true);
  add(confContainer);
  createConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createConfigWin.setInitialHeight(WIN_HEIGHT);
  createConfigWin.setInitialWidth(WIN_WIDTH);
  createConfigWin.setCookieName(""String_Node_Str"");
  editConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editConfigWin.setInitialHeight(WIN_HEIGHT);
  editConfigWin.setInitialWidth(WIN_HEIGHT);
  editConfigWin.setCookieName(""String_Node_Str"");
  setWindowClosedCallback(createConfigWin,confContainer);
  setWindowClosedCallback(editConfigWin,confContainer);
  AjaxLink createConfigurationLink=new AjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      createConfigWin.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new ConfigurationModalPage(Configuration.this.getPageReference(),createConfigWin,new ConfigurationTO(),true);
        }
      }
);
      createConfigWin.show(target);
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(createConfigurationLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(createConfigurationLink);
  Link dbExportLink=new Link<Void>(""String_Node_Str""){
    private static final long serialVersionUID=-4331619903296515985L;
    @Override public void onClick(){
      StringResourceStream stream=new StringResourceStream(restClient.dbContentAsXml(),""String_Node_Str"");
      getRequestCycle().scheduleRequestHandlerAfterCurrent(new ResourceStreamRequestHandler(stream).setFileName(""String_Node_Str"").setContentDisposition(ContentDisposition.ATTACHMENT));
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(dbExportLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(dbExportLink);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getRequest(),getResponse(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      confTable.setItemsPerPage(paginatorRows);
      target.add(confContainer);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  add(paginatorForm);
  add(new PasswordPoliciesPanel(""String_Node_Str""));
  final WorkflowDefinitionTO workflowDef=restClient.getWorkflowDefinition();
  WebMarkupContainer workflowDefContainer=new WebMarkupContainer(""String_Node_Str"");
  Form wfForm=new Form(""String_Node_Str"",new CompoundPropertyModel(workflowDef));
  TextArea<WorkflowDefinitionTO> workflowDefArea=new TextArea<WorkflowDefinitionTO>(""String_Node_Str"",new PropertyModel<WorkflowDefinitionTO>(workflowDef,""String_Node_Str""));
  wfForm.add(workflowDefArea);
  IndicatingAjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model<String>(getString(""String_Node_Str""))){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      try {
        restClient.updateWorkflowDefinition(workflowDef);
      }
 catch (      SyncopeClientCompositeErrorException scee) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + scee.getMessage());
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  wfForm.add(submit);
  workflowDefContainer.add(wfForm);
  MetaDataRoleAuthorizationStrategy.authorize(workflowDefContainer,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(workflowDefContainer);
  PropertyListView coreLoggerList=new LoggerPropertyList(null,""String_Node_Str"",restClient.getLoggers());
  WebMarkupContainer coreLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  coreLoggerContainer.add(coreLoggerList);
  coreLoggerContainer.setOutputMarkupId(true);
  add(coreLoggerContainer);
  ConsoleLoggerController consoleLoggerController=new ConsoleLoggerController();
  PropertyListView consoleLoggerList=new LoggerPropertyList(consoleLoggerController,""String_Node_Str"",consoleLoggerController.getLoggers());
  WebMarkupContainer consoleLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  consoleLoggerContainer.add(consoleLoggerList);
  consoleLoggerContainer.setOutputMarkupId(true);
  add(consoleLoggerContainer);
}","public Configuration(final PageParameters parameters){
  super(parameters);
  add(createConfigWin=new ModalWindow(""String_Node_Str""));
  add(editConfigWin=new ModalWindow(""String_Node_Str""));
  paginatorRows=prefMan.getPaginatorRows(getRequest(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS);
  List<IColumn> confColumns=new ArrayList<IColumn>();
  confColumns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  confColumns.add(new AbstractColumn<ConfigurationTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    final IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          editConfigWin.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              return new ConfigurationModalPage(Configuration.this.getPageReference(),editConfigWin,configurationTO,false);
            }
          }
);
          editConfigWin.show(target);
        }
      }
;
      EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  confColumns.add(new AbstractColumn<ConfigurationTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ConfigurationTO>> cellItem,    final String componentId,    final IModel<ConfigurationTO> model){
      final ConfigurationTO configurationTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.deleteConfiguration(configurationTO.getKey());
          }
 catch (          SyncopeClientCompositeErrorException e) {
            LOG.error(""String_Node_Str"",e);
            error(e.getMessage());
            return;
          }
          info(getString(""String_Node_Str""));
          target.add(feedbackPanel);
          target.add(confContainer);
        }
      }
;
      DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable confTable=new AjaxFallbackDefaultDataTable(""String_Node_Str"",confColumns,new SyncopeConfProvider(),paginatorRows);
  confContainer=new WebMarkupContainer(""String_Node_Str"");
  confContainer.add(confTable);
  confContainer.setOutputMarkupId(true);
  add(confContainer);
  createConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createConfigWin.setInitialHeight(WIN_HEIGHT);
  createConfigWin.setInitialWidth(WIN_WIDTH);
  createConfigWin.setCookieName(""String_Node_Str"");
  editConfigWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  editConfigWin.setInitialHeight(WIN_HEIGHT);
  editConfigWin.setInitialWidth(WIN_WIDTH);
  editConfigWin.setCookieName(""String_Node_Str"");
  setWindowClosedCallback(createConfigWin,confContainer);
  setWindowClosedCallback(editConfigWin,confContainer);
  AjaxLink createConfigurationLink=new AjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    final AjaxRequestTarget target){
      createConfigWin.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          return new ConfigurationModalPage(Configuration.this.getPageReference(),createConfigWin,new ConfigurationTO(),true);
        }
      }
);
      createConfigWin.show(target);
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(createConfigurationLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(createConfigurationLink);
  Link dbExportLink=new Link<Void>(""String_Node_Str""){
    private static final long serialVersionUID=-4331619903296515985L;
    @Override public void onClick(){
      StringResourceStream stream=new StringResourceStream(restClient.dbContentAsXml(),""String_Node_Str"");
      getRequestCycle().scheduleRequestHandlerAfterCurrent(new ResourceStreamRequestHandler(stream).setFileName(""String_Node_Str"").setContentDisposition(ContentDisposition.ATTACHMENT));
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(dbExportLink,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(dbExportLink);
  Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getRequest(),getResponse(),Constants.PREF_CONFIGURATION_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      confTable.setItemsPerPage(paginatorRows);
      target.add(confContainer);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
  add(new PasswordPoliciesPanel(""String_Node_Str""));
  final WorkflowDefinitionTO workflowDef=restClient.getWorkflowDefinition();
  WebMarkupContainer workflowDefContainer=new WebMarkupContainer(""String_Node_Str"");
  Form wfForm=new Form(""String_Node_Str"",new CompoundPropertyModel(workflowDef));
  TextArea<WorkflowDefinitionTO> workflowDefArea=new TextArea<WorkflowDefinitionTO>(""String_Node_Str"",new PropertyModel<WorkflowDefinitionTO>(workflowDef,""String_Node_Str""));
  wfForm.add(workflowDefArea);
  IndicatingAjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model<String>(getString(""String_Node_Str""))){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      try {
        restClient.updateWorkflowDefinition(workflowDef);
        info(getString(""String_Node_Str""));
      }
 catch (      SyncopeClientCompositeErrorException scee) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + scee.getMessage());
      }
      target.add(feedbackPanel);
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  wfForm.add(submit);
  workflowDefContainer.add(wfForm);
  MetaDataRoleAuthorizationStrategy.authorize(workflowDefContainer,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
  add(workflowDefContainer);
  PropertyListView coreLoggerList=new LoggerPropertyList(null,""String_Node_Str"",restClient.getLoggers());
  WebMarkupContainer coreLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  coreLoggerContainer.add(coreLoggerList);
  coreLoggerContainer.setOutputMarkupId(true);
  add(coreLoggerContainer);
  ConsoleLoggerController consoleLoggerController=new ConsoleLoggerController();
  PropertyListView consoleLoggerList=new LoggerPropertyList(consoleLoggerController,""String_Node_Str"",consoleLoggerController.getLoggers());
  WebMarkupContainer consoleLoggerContainer=new WebMarkupContainer(""String_Node_Str"");
  consoleLoggerContainer.add(consoleLoggerList);
  consoleLoggerContainer.setOutputMarkupId(true);
  add(consoleLoggerContainer);
}"
60957,"@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  try {
    restClient.updateWorkflowDefinition(workflowDef);
  }
 catch (  SyncopeClientCompositeErrorException scee) {
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + scee.getMessage());
  }
}","@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  try {
    restClient.updateWorkflowDefinition(workflowDef);
    info(getString(""String_Node_Str""));
  }
 catch (  SyncopeClientCompositeErrorException scee) {
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + scee.getMessage());
  }
  target.add(feedbackPanel);
}"
60958,"@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  final ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
  connector.setBundleName(((ConnBundleTO)bundle.getModelObject()).getBundleName());
  if (!selectedCapabilities.isEmpty()) {
    connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
  }
 else {
    connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
  }
  try {
    if (createFlag) {
      restClient.create(connector);
    }
 else {
      restClient.update(connector);
    }
    ((Connectors)callerPageRef.getPage()).setOperationResult(true);
    window.close(target);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
    ((Connectors)callerPageRef.getPage()).setOperationResult(false);
    LOG.error(""String_Node_Str"" + connector);
  }
}","@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  final ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
  connector.setBundleName(((ConnBundleTO)bundle.getModelObject()).getBundleName());
  if (!selectedCapabilities.isEmpty()) {
    connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
  }
 else {
    connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
  }
  try {
    if (createFlag) {
      restClient.create(connector);
    }
 else {
      restClient.update(connector);
    }
    ((Resources)callerPageRef.getPage()).setOperationResult(true);
    window.close(target);
  }
 catch (  SyncopeClientCompositeErrorException e) {
    error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
    ((Resources)callerPageRef.getPage()).setOperationResult(false);
    LOG.error(""String_Node_Str"" + connector);
  }
}"
60959,"public ConnectorModalPage(final PageReference callerPageRef,final ModalWindow window,final ConnInstanceTO connectorTO,final boolean createFlag){
  super();
  selectedCapabilities=new ArrayList(createFlag ? EnumSet.noneOf(ConnectorCapability.class) : connectorTO.getCapabilities());
  IModel<List<ConnConfProperty>> selectedBundleProperties=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      List<ConnConfProperty> result;
      if (createFlag) {
        connectorTO.setConnectorName(selectedBundleTO.getConnectorName());
        connectorTO.setVersion(selectedBundleTO.getVersion());
        result=new ArrayList<ConnConfProperty>();
        ConnConfProperty propertyTO;
        for (        ConnConfPropSchema key : selectedBundleTO.getProperties()) {
          propertyTO=new ConnConfProperty();
          propertyTO.setSchema(key);
          result.add(propertyTO);
        }
      }
 else {
        selectedBundleTO.setBundleName(connectorTO.getBundleName());
        selectedBundleTO.setVersion(connectorTO.getVersion());
        result=new ArrayList<ConnConfProperty>(connectorTO.getConfiguration());
      }
      return result;
    }
  }
;
  final AjaxTextFieldPanel connectorName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  connectorName.setOutputMarkupId(true);
  connectorName.setEnabled(false);
  final AjaxTextFieldPanel displayName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  displayName.addRequiredLabel();
  final AjaxTextFieldPanel version=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  version.setEnabled(false);
  final IModel<List<ConnBundleTO>> bundles=new LoadableDetachableModel<List<ConnBundleTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnBundleTO> load(){
      return restClient.getAllBundles();
    }
  }
;
  final AjaxDropDownChoicePanel<ConnBundleTO> bundle=new AjaxDropDownChoicePanel<ConnBundleTO>(""String_Node_Str"",""String_Node_Str"",new Model(null),false);
  bundle.setStyleShet(""String_Node_Str"");
  bundle.setChoices(bundles.getObject());
  bundle.setChoiceRenderer(new ChoiceRenderer<ConnBundleTO>(){
    private static final long serialVersionUID=-1945543182376191187L;
    @Override public Object getDisplayValue(    final ConnBundleTO object){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
    @Override public String getIdValue(    final ConnBundleTO object,    final int index){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
  }
);
  ((DropDownChoice)bundle.getField()).setNullValid(true);
  bundle.setRequired(true);
  bundle.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      connectorTO.setConfiguration(new HashSet<ConnConfProperty>());
      ((DropDownChoice)bundle.getField()).setNullValid(false);
      target.add(bundle.getField());
      target.add(propertiesContainer);
      target.add(connectorName);
      target.add(version);
    }
  }
);
  bundle.getField().setModel(new IModel<ConnBundleTO>(){
    private static final long serialVersionUID=-3736598995576061229L;
    @Override public ConnBundleTO getObject(){
      return selectedBundleTO;
    }
    @Override public void setObject(    final ConnBundleTO object){
      selectedBundleTO=object;
    }
    @Override public void detach(){
    }
  }
);
  bundle.addRequiredLabel();
  bundle.setEnabled(createFlag);
  final ListView<ConnConfProperty> propView=new ListView<ConnConfProperty>(""String_Node_Str"",selectedBundleProperties){
    private static final long serialVersionUID=9101744072914090143L;
    @Override protected void populateItem(    final ListItem<ConnConfProperty> item){
      final ConnConfProperty property=item.getModelObject();
      final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
      item.add(label);
      final FieldPanel field;
      if (GUARDED_STRING.equals(property.getSchema().getType())) {
        field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
      }
 else {
        field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
        if (property.getSchema().isRequired()) {
          field.addRequiredLabel();
        }
      }
      item.add(field);
      item.add(new AjaxCheckBoxPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<Boolean>(property,""String_Node_Str""),true).setTitle(""String_Node_Str""));
      connectorTO.getConfiguration().add(property);
    }
  }
;
  propertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  propertiesContainer.setOutputMarkupId(true);
  propertiesContainer.add(propView);
  Form connectorForm=new Form(""String_Node_Str"");
  connectorForm.setModel(new CompoundPropertyModel(connectorTO));
  connectorForm.add(propertiesContainer);
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
      connector.setBundleName(((ConnBundleTO)bundle.getModelObject()).getBundleName());
      if (!selectedCapabilities.isEmpty()) {
        connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
      }
 else {
        connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
      }
      try {
        if (createFlag) {
          restClient.create(connector);
        }
 else {
          restClient.update(connector);
        }
        ((Connectors)callerPageRef.getPage()).setOperationResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        ((Connectors)callerPageRef.getPage()).setOperationResult(false);
        LOG.error(""String_Node_Str"" + connector);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=createFlag ? xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"") : xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  connectorForm.add(connectorName);
  connectorForm.add(displayName);
  connectorForm.add(bundle);
  connectorForm.add(version);
  final IModel<List<ConnectorCapability>> capabilities=new LoadableDetachableModel<List<ConnectorCapability>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnectorCapability> load(){
      return Arrays.asList(ConnectorCapability.values());
    }
  }
;
  capabilitiesPalette=new CheckBoxMultipleChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),capabilities);
  connectorForm.add(capabilitiesPalette);
  final AjaxCheckBoxPanel resetToken=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new Model(null),false);
  resetToken.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget art){
      if (resetToken.getModelObject()) {
        connectorTO.setSyncToken(null);
      }
    }
  }
);
  connectorForm.add(resetToken);
  connectorForm.add(submit);
  add(connectorForm);
}","public ConnectorModalPage(final PageReference callerPageRef,final ModalWindow window,final ConnInstanceTO connectorTO,final boolean createFlag){
  super();
  selectedCapabilities=new ArrayList(createFlag ? EnumSet.noneOf(ConnectorCapability.class) : connectorTO.getCapabilities());
  IModel<List<ConnConfProperty>> selectedBundleProperties=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      List<ConnConfProperty> result;
      if (createFlag) {
        connectorTO.setConnectorName(selectedBundleTO.getConnectorName());
        connectorTO.setVersion(selectedBundleTO.getVersion());
        result=new ArrayList<ConnConfProperty>();
        ConnConfProperty propertyTO;
        for (        ConnConfPropSchema key : selectedBundleTO.getProperties()) {
          propertyTO=new ConnConfProperty();
          propertyTO.setSchema(key);
          result.add(propertyTO);
        }
      }
 else {
        selectedBundleTO.setBundleName(connectorTO.getBundleName());
        selectedBundleTO.setVersion(connectorTO.getVersion());
        result=new ArrayList<ConnConfProperty>(connectorTO.getConfiguration());
      }
      return result;
    }
  }
;
  final AjaxTextFieldPanel connectorName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  connectorName.setOutputMarkupId(true);
  connectorName.setEnabled(false);
  final AjaxTextFieldPanel displayName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  displayName.addRequiredLabel();
  final AjaxTextFieldPanel version=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  version.setEnabled(false);
  final IModel<List<ConnBundleTO>> bundles=new LoadableDetachableModel<List<ConnBundleTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnBundleTO> load(){
      return restClient.getAllBundles();
    }
  }
;
  final AjaxDropDownChoicePanel<ConnBundleTO> bundle=new AjaxDropDownChoicePanel<ConnBundleTO>(""String_Node_Str"",""String_Node_Str"",new Model(null),false);
  bundle.setStyleShet(""String_Node_Str"");
  bundle.setChoices(bundles.getObject());
  bundle.setChoiceRenderer(new ChoiceRenderer<ConnBundleTO>(){
    private static final long serialVersionUID=-1945543182376191187L;
    @Override public Object getDisplayValue(    final ConnBundleTO object){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
    @Override public String getIdValue(    final ConnBundleTO object,    final int index){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
  }
);
  ((DropDownChoice)bundle.getField()).setNullValid(true);
  bundle.setRequired(true);
  bundle.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      connectorTO.setConfiguration(new HashSet<ConnConfProperty>());
      ((DropDownChoice)bundle.getField()).setNullValid(false);
      target.add(bundle.getField());
      target.add(propertiesContainer);
      target.add(connectorName);
      target.add(version);
    }
  }
);
  bundle.getField().setModel(new IModel<ConnBundleTO>(){
    private static final long serialVersionUID=-3736598995576061229L;
    @Override public ConnBundleTO getObject(){
      return selectedBundleTO;
    }
    @Override public void setObject(    final ConnBundleTO object){
      selectedBundleTO=object;
    }
    @Override public void detach(){
    }
  }
);
  bundle.addRequiredLabel();
  bundle.setEnabled(createFlag);
  final ListView<ConnConfProperty> propView=new ListView<ConnConfProperty>(""String_Node_Str"",selectedBundleProperties){
    private static final long serialVersionUID=9101744072914090143L;
    @Override protected void populateItem(    final ListItem<ConnConfProperty> item){
      final ConnConfProperty property=item.getModelObject();
      final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
      item.add(label);
      final FieldPanel field;
      if (GUARDED_STRING.equals(property.getSchema().getType())) {
        field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
      }
 else {
        field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
        if (property.getSchema().isRequired()) {
          field.addRequiredLabel();
        }
      }
      item.add(field);
      item.add(new AjaxCheckBoxPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<Boolean>(property,""String_Node_Str""),true).setTitle(""String_Node_Str""));
      connectorTO.getConfiguration().add(property);
    }
  }
;
  propertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  propertiesContainer.setOutputMarkupId(true);
  propertiesContainer.add(propView);
  Form connectorForm=new Form(""String_Node_Str"");
  connectorForm.setModel(new CompoundPropertyModel(connectorTO));
  connectorForm.add(propertiesContainer);
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
      connector.setBundleName(((ConnBundleTO)bundle.getModelObject()).getBundleName());
      if (!selectedCapabilities.isEmpty()) {
        connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
      }
 else {
        connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
      }
      try {
        if (createFlag) {
          restClient.create(connector);
        }
 else {
          restClient.update(connector);
        }
        ((Resources)callerPageRef.getPage()).setOperationResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        ((Resources)callerPageRef.getPage()).setOperationResult(false);
        LOG.error(""String_Node_Str"" + connector);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=createFlag ? xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"") : xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  connectorForm.add(connectorName);
  connectorForm.add(displayName);
  connectorForm.add(bundle);
  connectorForm.add(version);
  final IModel<List<ConnectorCapability>> capabilities=new LoadableDetachableModel<List<ConnectorCapability>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnectorCapability> load(){
      return Arrays.asList(ConnectorCapability.values());
    }
  }
;
  capabilitiesPalette=new CheckBoxMultipleChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),capabilities);
  connectorForm.add(capabilitiesPalette);
  final AjaxCheckBoxPanel resetToken=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new Model(null),false);
  resetToken.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget art){
      if (resetToken.getModelObject()) {
        connectorTO.setSyncToken(null);
      }
    }
  }
);
  connectorForm.add(resetToken);
  connectorForm.add(submit);
  add(connectorForm);
}"
60960,"public ResourceTO(){
  mappings=new ArrayList<SchemaMappingTO>();
  connectorConfigurationProperties=new HashSet<ConnConfProperty>();
  optionalPropagationMode=PropagationMode.ASYNC;
  createTraceLevel=TraceLevel.ALL;
  deleteTraceLevel=TraceLevel.ALL;
  updateTraceLevel=TraceLevel.ALL;
}","public ResourceTO(){
  mappings=new ArrayList<SchemaMappingTO>();
  connectorConfigurationProperties=new HashSet<ConnConfProperty>();
  propagationMode=PropagationMode.ASYNC;
  propagationPriority=0;
  createTraceLevel=TraceLevel.ALL;
  updateTraceLevel=TraceLevel.ALL;
  deleteTraceLevel=TraceLevel.ALL;
}"
60961,"@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
  int accountIdCount=0;
  for (  SchemaMappingTO mapping : resourceTO.getMappings()) {
    if (mapping.isAccountid()) {
      accountIdCount++;
    }
  }
  if (accountIdCount == 0 || accountIdCount > 1) {
    error(getString(""String_Node_Str""));
    ((Resources)callPageRef.getPage()).setOperationResult(false);
  }
 else {
    try {
      if (createFlag) {
        restClient.create(resourceTO);
      }
 else {
        restClient.update(resourceTO);
      }
      ((Resources)callPageRef.getPage()).setOperationResult(true);
      window.close(target);
    }
 catch (    SyncopeClientCompositeErrorException e) {
      error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
      ((Resources)callPageRef.getPage()).setOperationResult(false);
      LOG.error(""String_Node_Str"",resourceTO);
    }
  }
}","@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
  ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
  int accountIdCount=0;
  for (  SchemaMappingTO mapping : resourceTO.getMappings()) {
    if (mapping.isAccountid()) {
      accountIdCount++;
    }
  }
  if (accountIdCount == 0 || accountIdCount > 1) {
    error(getString(""String_Node_Str""));
    target.add(feedbackPanel);
  }
 else {
    try {
      if (createFlag) {
        restClient.create(resourceTO);
      }
 else {
        restClient.update(resourceTO);
      }
      ((Resources)callPageRef.getPage()).setOperationResult(true);
      window.close(target);
    }
 catch (    SyncopeClientCompositeErrorException e) {
      LOG.error(""String_Node_Str"",resourceTO);
      error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
      target.add(feedbackPanel);
    }
  }
}"
60962,"public ResourceModalPage(final PageReference callPageRef,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  super();
  uSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  uDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  uVirSchemaAttrNames=schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
  final IModel<List<ConnInstanceTO>> connectors=new LoadableDetachableModel<List<ConnInstanceTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnInstanceTO> load(){
      return connectorRestClient.getAllConnectors();
    }
  }
;
  final IModel<List<IntMappingType>> intMappingTypes=new LoadableDetachableModel<List<IntMappingType>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<IntMappingType> load(){
      return Arrays.asList(IntMappingType.values());
    }
  }
;
  final IModel<List<ConnConfProperty>> connectorPropertiesModel=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      Set<ConnConfProperty> props=resourceTO.getConnectorConfigurationProperties();
      if (props == null || props.isEmpty() || createFlag) {
        props=overridableConnectorProperties;
      }
      return new ArrayList<ConnConfProperty>(props);
    }
  }
;
  updateResourceSchemaNames(resourceTO);
  updateConnectorProperties(resourceTO.getConnectorId());
  final ConnInstanceTO connectorTO=new ConnInstanceTO();
  if (!createFlag) {
    connectorTO.setId(resourceTO.getConnectorId());
  }
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(resourceTO));
  final AjaxTextFieldPanel resourceName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  resourceName.setEnabled(createFlag);
  resourceName.addRequiredLabel();
  form.add(resourceName);
  final AjaxTextFieldPanel accountLink=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  form.add(accountLink);
  final AjaxCheckBoxPanel forceMandatoryConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(forceMandatoryConstraint);
  final AjaxDropDownChoicePanel<PropagationMode> optionalPropagationMode=new AjaxDropDownChoicePanel<PropagationMode>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  optionalPropagationMode.setChoices(Arrays.asList(PropagationMode.values()));
  form.add(optionalPropagationMode);
  final AjaxDropDownChoicePanel<TraceLevel> createTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  createTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(createTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> updateTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  updateTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(updateTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> deleteTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  deleteTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(deleteTraceLevel);
  mappingContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingContainer.setOutputMarkupId(true);
  form.add(mappingContainer);
  connectorPropertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  connectorPropertiesContainer.setOutputMarkupId(true);
  form.add(connectorPropertiesContainer);
  final AjaxDropDownChoicePanel<ConnInstanceTO> connector=new AjaxDropDownChoicePanel<ConnInstanceTO>(""String_Node_Str"",getString(""String_Node_Str""),new Model<ConnInstanceTO>(connectorTO),false);
  connector.setChoices(connectors.getObject());
  connector.setChoiceRenderer(new ChoiceRenderer(""String_Node_Str"",""String_Node_Str""));
  connector.getField().setModel(new IModel<ConnInstanceTO>(){
    private static final long serialVersionUID=-4202872830392400310L;
    @Override public ConnInstanceTO getObject(){
      return connectorTO;
    }
    @Override public void setObject(    final ConnInstanceTO connector){
      resourceTO.setConnectorId(connector.getId());
    }
    @Override public void detach(){
    }
  }
);
  connector.addRequiredLabel();
  connector.setEnabled(createFlag);
  form.add(connector);
  final ListView<SchemaMappingTO> mappings=new ListView<SchemaMappingTO>(""String_Node_Str"",resourceTO.getMappings()){
    private static final long serialVersionUID=4949588177564901031L;
    @Override protected void populateItem(    final ListItem<SchemaMappingTO> item){
      final SchemaMappingTO mappingTO=item.getModelObject();
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
        private static final long serialVersionUID=7170946748485726506L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int index=-1;
          for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
            if (mappingTO.equals(resourceTO.getMappings().get(i))) {
              index=i;
            }
          }
          if (index != -1) {
            resourceTO.getMappings().remove(index);
            item.getParent().removeAll();
            target.add(mappingContainer);
          }
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=-7927968187160354605L;
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      final AjaxDropDownChoicePanel intAttrNames=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
      intAttrNames.setChoices(resourceSchemaNames);
      intAttrNames.setRequired(true);
      intAttrNames.setStyleShet(""String_Node_Str"");
      if (mappingTO.getIntMappingType() == null) {
        intAttrNames.setChoices(Collections.EMPTY_LIST);
      }
 else {
switch (mappingTO.getIntMappingType()) {
case UserSchema:
          intAttrNames.setChoices(uSchemaAttrNames);
        break;
case UserDerivedSchema:
      intAttrNames.setChoices(uDerSchemaAttrNames);
    break;
case UserVirtualSchema:
  intAttrNames.setChoices(uVirSchemaAttrNames);
break;
case SyncopeUserId:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
case Password:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
default :
intAttrNames.setChoices(Collections.EMPTY_LIST);
}
}
item.add(intAttrNames);
final IntMappingTypesDropDownChoice mappingTypesPanel=new IntMappingTypesDropDownChoice(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<IntMappingType>(mappingTO,""String_Node_Str""),intAttrNames);
mappingTypesPanel.setRequired(true);
mappingTypesPanel.setChoices(intMappingTypes.getObject());
mappingTypesPanel.setStyleShet(""String_Node_Str"");
item.add(mappingTypesPanel);
final FieldPanel extAttrName;
if (resourceSchemaNames.isEmpty()) {
extAttrName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(mappingTO,""String_Node_Str""),true);
}
 else {
extAttrName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
((AjaxDropDownChoicePanel)extAttrName).setChoices(resourceSchemaNames);
}
boolean required=mappingTO != null && !mappingTO.isAccountid() && !mappingTO.isPassword();
extAttrName.setRequired(required);
extAttrName.setEnabled(required);
extAttrName.setStyleShet(""String_Node_Str"");
item.add(extAttrName);
final AjaxTextFieldPanel mandatoryCondition=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
mandatoryCondition.setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
mandatoryCondition.setStyleShet(""String_Node_Str"");
item.add(mandatoryCondition);
final AjaxCheckBoxPanel accountId=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),false);
accountId.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!accountId.getModelObject() && !mappingTO.isPassword());
extAttrName.setModelObject(null);
extAttrName.setRequired(!accountId.getModelObject());
target.add(extAttrName);
}
}
);
item.add(accountId);
final AjaxCheckBoxPanel password=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
password.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!mappingTO.isAccountid() && !password.getModelObject());
extAttrName.setModelObject(null);
extAttrName.setRequired(!password.getModelObject());
target.add(extAttrName);
}
}
);
item.add(password);
}
}
;
mappings.setReuseItems(true);
mappingContainer.add(mappings);
final AjaxButton addSchemaMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-4804368561204623354L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
resourceTO.getMappings().add(new SchemaMappingTO());
target.add(mappingContainer);
}
@Override protected void onError(AjaxRequestTarget target,Form<?> form){
}
}
;
addSchemaMappingBtn.setDefaultFormProcessing(false);
addSchemaMappingBtn.setEnabled(!createFlag);
mappingContainer.add(addSchemaMappingBtn);
connectorPropertiesContainer.add(new ListView<ConnConfProperty>(""String_Node_Str"",connectorPropertiesModel){
private static final long serialVersionUID=9101744072914090143L;
@Override protected void populateItem(final ListItem<ConnConfProperty> item){
final ConnConfProperty property=item.getModelObject();
final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
item.add(label);
final FieldPanel field;
if (GUARDED_STRING.equals(property.getSchema().getType())) {
field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
}
 else {
field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),false).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
if (property.getSchema().isRequired()) {
field.addRequiredLabel();
}
}
field.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
target.add(mappingContainer);
}
}
);
item.add(field);
resourceTO.getConnectorConfigurationProperties().add(property);
}
}
);
connector.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
updateConnectorProperties(resourceTO.getConnectorId());
target.add(mappingContainer);
target.add(connectorPropertiesContainer);
}
}
);
AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
int accountIdCount=0;
for (SchemaMappingTO mapping : resourceTO.getMappings()) {
if (mapping.isAccountid()) {
accountIdCount++;
}
}
if (accountIdCount == 0 || accountIdCount > 1) {
error(getString(""String_Node_Str""));
((Resources)callPageRef.getPage()).setOperationResult(false);
}
 else {
try {
if (createFlag) {
restClient.create(resourceTO);
}
 else {
restClient.update(resourceTO);
}
((Resources)callPageRef.getPage()).setOperationResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
((Resources)callPageRef.getPage()).setOperationResult(false);
LOG.error(""String_Node_Str"",resourceTO);
}
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.add(feedbackPanel);
}
}
;
form.add(submit);
add(form);
MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",createFlag ? ""String_Node_Str"" : ""String_Node_Str""));
}","public ResourceModalPage(final PageReference callPageRef,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  super();
  uSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  uDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  uVirSchemaAttrNames=schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
  final IModel<List<ConnInstanceTO>> connectors=new LoadableDetachableModel<List<ConnInstanceTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnInstanceTO> load(){
      return connectorRestClient.getAllConnectors();
    }
  }
;
  final IModel<List<IntMappingType>> intMappingTypes=new LoadableDetachableModel<List<IntMappingType>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<IntMappingType> load(){
      return Arrays.asList(IntMappingType.values());
    }
  }
;
  final IModel<List<ConnConfProperty>> connectorPropertiesModel=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      Set<ConnConfProperty> props=resourceTO.getConnectorConfigurationProperties();
      if (props == null || props.isEmpty() || createFlag) {
        props=overridableConnectorProperties;
      }
      return new ArrayList<ConnConfProperty>(props);
    }
  }
;
  updateResourceSchemaNames(resourceTO);
  updateConnectorProperties(resourceTO.getConnectorId());
  final ConnInstanceTO connectorTO=new ConnInstanceTO();
  if (!createFlag) {
    connectorTO.setId(resourceTO.getConnectorId());
  }
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(resourceTO));
  final AjaxTextFieldPanel resourceName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  resourceName.setEnabled(createFlag);
  resourceName.addRequiredLabel();
  form.add(resourceName);
  final AjaxTextFieldPanel accountLink=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  form.add(accountLink);
  final AjaxCheckBoxPanel forceMandatoryConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(forceMandatoryConstraint);
  final AjaxCheckBoxPanel propagationPrimary=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(propagationPrimary);
  final AjaxIntFieldPanel propagationPriority=new AjaxIntFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Integer>(resourceTO,""String_Node_Str""),false);
  form.add(propagationPriority);
  final AjaxDropDownChoicePanel<PropagationMode> propagationMode=new AjaxDropDownChoicePanel<PropagationMode>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  propagationMode.setChoices(Arrays.asList(PropagationMode.values()));
  form.add(propagationMode);
  final AjaxDropDownChoicePanel<TraceLevel> createTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  createTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(createTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> updateTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  updateTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(updateTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> deleteTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  deleteTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(deleteTraceLevel);
  mappingContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingContainer.setOutputMarkupId(true);
  form.add(mappingContainer);
  connectorPropertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  connectorPropertiesContainer.setOutputMarkupId(true);
  form.add(connectorPropertiesContainer);
  final AjaxDropDownChoicePanel<ConnInstanceTO> connector=new AjaxDropDownChoicePanel<ConnInstanceTO>(""String_Node_Str"",getString(""String_Node_Str""),new Model<ConnInstanceTO>(connectorTO),false);
  connector.setChoices(connectors.getObject());
  connector.setChoiceRenderer(new ChoiceRenderer(""String_Node_Str"",""String_Node_Str""));
  connector.getField().setModel(new IModel<ConnInstanceTO>(){
    private static final long serialVersionUID=-4202872830392400310L;
    @Override public ConnInstanceTO getObject(){
      return connectorTO;
    }
    @Override public void setObject(    final ConnInstanceTO connector){
      resourceTO.setConnectorId(connector.getId());
    }
    @Override public void detach(){
    }
  }
);
  connector.addRequiredLabel();
  connector.setEnabled(createFlag);
  form.add(connector);
  final ListView<SchemaMappingTO> mappings=new ListView<SchemaMappingTO>(""String_Node_Str"",resourceTO.getMappings()){
    private static final long serialVersionUID=4949588177564901031L;
    @Override protected void populateItem(    final ListItem<SchemaMappingTO> item){
      final SchemaMappingTO mappingTO=item.getModelObject();
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
        private static final long serialVersionUID=7170946748485726506L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int index=-1;
          for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
            if (mappingTO.equals(resourceTO.getMappings().get(i))) {
              index=i;
            }
          }
          if (index != -1) {
            resourceTO.getMappings().remove(index);
            item.getParent().removeAll();
            target.add(mappingContainer);
          }
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=-7927968187160354605L;
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      final AjaxDropDownChoicePanel intAttrNames=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
      intAttrNames.setChoices(resourceSchemaNames);
      intAttrNames.setRequired(true);
      intAttrNames.setStyleShet(""String_Node_Str"");
      if (mappingTO.getIntMappingType() == null) {
        intAttrNames.setChoices(Collections.EMPTY_LIST);
      }
 else {
switch (mappingTO.getIntMappingType()) {
case UserSchema:
          intAttrNames.setChoices(uSchemaAttrNames);
        break;
case UserDerivedSchema:
      intAttrNames.setChoices(uDerSchemaAttrNames);
    break;
case UserVirtualSchema:
  intAttrNames.setChoices(uVirSchemaAttrNames);
break;
case SyncopeUserId:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
case Password:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
default :
intAttrNames.setChoices(Collections.EMPTY_LIST);
}
}
item.add(intAttrNames);
final IntMappingTypesDropDownChoice mappingTypesPanel=new IntMappingTypesDropDownChoice(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<IntMappingType>(mappingTO,""String_Node_Str""),intAttrNames);
mappingTypesPanel.setRequired(true);
mappingTypesPanel.setChoices(intMappingTypes.getObject());
mappingTypesPanel.setStyleShet(""String_Node_Str"");
item.add(mappingTypesPanel);
final FieldPanel extAttrName;
if (resourceSchemaNames.isEmpty()) {
extAttrName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(mappingTO,""String_Node_Str""),true);
}
 else {
extAttrName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
((AjaxDropDownChoicePanel)extAttrName).setChoices(resourceSchemaNames);
}
boolean required=mappingTO != null && !mappingTO.isAccountid() && !mappingTO.isPassword();
extAttrName.setRequired(required);
extAttrName.setEnabled(required);
extAttrName.setStyleShet(""String_Node_Str"");
item.add(extAttrName);
final AjaxTextFieldPanel mandatoryCondition=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
mandatoryCondition.setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
mandatoryCondition.setStyleShet(""String_Node_Str"");
item.add(mandatoryCondition);
final AjaxCheckBoxPanel accountId=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),false);
accountId.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!accountId.getModelObject() && !mappingTO.isPassword());
extAttrName.setModelObject(null);
extAttrName.setRequired(!accountId.getModelObject());
target.add(extAttrName);
}
}
);
item.add(accountId);
final AjaxCheckBoxPanel password=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
password.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!mappingTO.isAccountid() && !password.getModelObject());
extAttrName.setModelObject(null);
extAttrName.setRequired(!password.getModelObject());
target.add(extAttrName);
}
}
);
item.add(password);
}
}
;
mappings.setReuseItems(true);
mappingContainer.add(mappings);
final AjaxButton addSchemaMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-4804368561204623354L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
resourceTO.getMappings().add(new SchemaMappingTO());
target.add(mappingContainer);
}
@Override protected void onError(AjaxRequestTarget target,Form<?> form){
}
}
;
addSchemaMappingBtn.setDefaultFormProcessing(false);
addSchemaMappingBtn.setEnabled(!createFlag);
mappingContainer.add(addSchemaMappingBtn);
connectorPropertiesContainer.add(new ListView<ConnConfProperty>(""String_Node_Str"",connectorPropertiesModel){
private static final long serialVersionUID=9101744072914090143L;
@Override protected void populateItem(final ListItem<ConnConfProperty> item){
final ConnConfProperty property=item.getModelObject();
final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
item.add(label);
final FieldPanel field;
if (GUARDED_STRING.equals(property.getSchema().getType())) {
field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
}
 else {
field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),false).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
if (property.getSchema().isRequired()) {
field.addRequiredLabel();
}
}
field.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
target.add(mappingContainer);
}
}
);
item.add(field);
resourceTO.getConnectorConfigurationProperties().add(property);
}
}
);
connector.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
updateConnectorProperties(resourceTO.getConnectorId());
target.add(mappingContainer);
target.add(connectorPropertiesContainer);
}
}
);
AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
int accountIdCount=0;
for (SchemaMappingTO mapping : resourceTO.getMappings()) {
if (mapping.isAccountid()) {
accountIdCount++;
}
}
if (accountIdCount == 0 || accountIdCount > 1) {
error(getString(""String_Node_Str""));
target.add(feedbackPanel);
}
 else {
try {
if (createFlag) {
restClient.create(resourceTO);
}
 else {
restClient.update(resourceTO);
}
((Resources)callPageRef.getPage()).setOperationResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
LOG.error(""String_Node_Str"",resourceTO);
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
target.add(feedbackPanel);
}
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.add(feedbackPanel);
}
}
;
form.add(submit);
add(form);
MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",createFlag ? ""String_Node_Str"" : ""String_Node_Str""));
}"
60963,"public Resources(PageParameters parameters){
  super(parameters);
  add(createResourceWin=new ModalWindow(""String_Node_Str""));
  add(mwindow=new ModalWindow(""String_Node_Str""));
  add(feedbackPanel);
  paginatorRows=prefMan.getPaginatorRows(getRequest(),Constants.PREF_RESOURCES_PAGINATOR_ROWS);
  List<IColumn> columns=new ArrayList<IColumn>();
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<ResourceTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ResourceTO>> cellItem,    final String componentId,    final IModel<ResourceTO> model){
      final ResourceTO resourceTO=model.getObject();
      AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        AjaxRequestTarget target){
          mwindow.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              ResourceModalPage form=new ResourceModalPage(Resources.this.getPageReference(),mwindow,resourceTO,false);
              return form;
            }
          }
);
          mwindow.show(target);
        }
      }
;
      final EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<ResourceTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ResourceTO>> cellItem,    final String componentId,    final IModel<ResourceTO> model){
      final ResourceTO resourceTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.delete(resourceTO.getName());
            info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException e) {
            error(getString(""String_Node_Str""));
            LOG.error(""String_Node_Str"" + resourceTO.getName(),e);
          }
          target.add(feedbackPanel);
          target.add(container);
        }
      }
;
      final DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable table=new AjaxFallbackDefaultDataTable(""String_Node_Str"",columns,new ResourcesProvider(),paginatorRows);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(table);
  container.setOutputMarkupId(true);
  add(container);
  setWindowClosedCallback(createResourceWin,container);
  setWindowClosedCallback(mwindow,container);
  createResourceWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createResourceWin.setInitialHeight(WIN_HEIGHT);
  createResourceWin.setInitialWidth(WIN_WIDTH);
  createResourceWin.setCookieName(""String_Node_Str"");
  mwindow.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  mwindow.setInitialHeight(WIN_HEIGHT);
  mwindow.setInitialWidth(WIN_WIDTH);
  mwindow.setCookieName(""String_Node_Str"");
  add(new IndicatingAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    AjaxRequestTarget target){
      createResourceWin.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          final ResourceModalPage windows=new ResourceModalPage(Resources.this.getPageReference(),mwindow,new ResourceTO(),true);
          return windows;
        }
      }
);
      createResourceWin.show(target);
    }
  }
);
  final Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getRequest(),getResponse(),Constants.PREF_RESOURCES_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table.setItemsPerPage(paginatorRows);
      target.add(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
}","public Resources(PageParameters parameters){
  super(parameters);
  add(createResourceWin=new ModalWindow(""String_Node_Str""));
  add(mwindow=new ModalWindow(""String_Node_Str""));
  add(feedbackPanel);
  paginatorRows=prefMan.getPaginatorRows(getRequest(),Constants.PREF_RESOURCES_PAGINATOR_ROWS);
  List<IColumn> columns=new ArrayList<IColumn>();
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new PropertyColumn(new ResourceModel(""String_Node_Str""),""String_Node_Str"",""String_Node_Str""));
  columns.add(new AbstractColumn<ResourceTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ResourceTO>> cellItem,    final String componentId,    final IModel<ResourceTO> model){
      final ResourceTO resourceTO=model.getObject();
      AjaxLink editLink=new IndicatingAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        AjaxRequestTarget target){
          mwindow.setPageCreator(new ModalWindow.PageCreator(){
            private static final long serialVersionUID=-7834632442532690940L;
            @Override public Page createPage(){
              ResourceModalPage form=new ResourceModalPage(Resources.this.getPageReference(),mwindow,resourceTO,false);
              return form;
            }
          }
);
          mwindow.show(target);
        }
      }
;
      final EditLinkPanel panel=new EditLinkPanel(componentId,model);
      panel.add(editLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  columns.add(new AbstractColumn<ResourceTO>(new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=2054811145491901166L;
    @Override public void populateItem(    final Item<ICellPopulator<ResourceTO>> cellItem,    final String componentId,    final IModel<ResourceTO> model){
      final ResourceTO resourceTO=model.getObject();
      AjaxLink deleteLink=new IndicatingDeleteOnConfirmAjaxLink(""String_Node_Str""){
        private static final long serialVersionUID=-7978723352517770644L;
        @Override public void onClick(        final AjaxRequestTarget target){
          try {
            restClient.delete(resourceTO.getName());
            info(getString(""String_Node_Str""));
          }
 catch (          SyncopeClientCompositeErrorException e) {
            error(getString(""String_Node_Str""));
            LOG.error(""String_Node_Str"" + resourceTO.getName(),e);
          }
          target.add(feedbackPanel);
          target.add(container);
        }
      }
;
      final DeleteLinkPanel panel=new DeleteLinkPanel(componentId,model);
      panel.add(deleteLink);
      MetaDataRoleAuthorizationStrategy.authorize(panel,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str""));
      cellItem.add(panel);
    }
  }
);
  final AjaxFallbackDefaultDataTable table=new AjaxFallbackDefaultDataTable(""String_Node_Str"",columns,new ResourcesProvider(),paginatorRows);
  container=new WebMarkupContainer(""String_Node_Str"");
  container.add(table);
  container.setOutputMarkupId(true);
  add(container);
  setWindowClosedCallback(createResourceWin,container);
  setWindowClosedCallback(mwindow,container);
  createResourceWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  createResourceWin.setInitialHeight(WIN_HEIGHT);
  createResourceWin.setInitialWidth(WIN_WIDTH);
  createResourceWin.setCookieName(""String_Node_Str"");
  mwindow.setCssClassName(ModalWindow.CSS_CLASS_GRAY);
  mwindow.setInitialHeight(WIN_HEIGHT);
  mwindow.setInitialWidth(WIN_WIDTH);
  mwindow.setCookieName(""String_Node_Str"");
  add(new IndicatingAjaxLink(""String_Node_Str""){
    private static final long serialVersionUID=-7978723352517770644L;
    @Override public void onClick(    AjaxRequestTarget target){
      createResourceWin.setPageCreator(new ModalWindow.PageCreator(){
        private static final long serialVersionUID=-7834632442532690940L;
        @Override public Page createPage(){
          final ResourceModalPage windows=new ResourceModalPage(Resources.this.getPageReference(),mwindow,new ResourceTO(),true);
          return windows;
        }
      }
);
      createResourceWin.show(target);
    }
  }
);
  final Form paginatorForm=new Form(""String_Node_Str"");
  final DropDownChoice rowsChooser=new DropDownChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),prefMan.getPaginatorChoices());
  rowsChooser.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      prefMan.set(getRequest(),getResponse(),Constants.PREF_RESOURCES_PAGINATOR_ROWS,String.valueOf(paginatorRows));
      table.setItemsPerPage(paginatorRows);
      target.add(container);
    }
  }
);
  paginatorForm.add(rowsChooser);
  add(paginatorForm);
}"
60964,"private void setupRoleMod(final RoleTO roleTO){
  roleMod=new RoleMod();
  if (!oldRole.getName().equals(roleTO.getName())) {
    roleMod.setName(roleTO.getName());
  }
  final List<AttributeTO> newDerivedAttributes=roleTO.getDerivedAttributes();
  final List<AttributeTO> oldDerivedAttributes=oldRole.getDerivedAttributes();
  for (  AttributeTO oldDerivedAttribute : oldDerivedAttributes) {
    roleMod.addDerivedAttributeToBeRemoved(oldDerivedAttribute.getSchema());
  }
  for (  AttributeTO newDerivedAttribute : newDerivedAttributes) {
    roleMod.addDerivedAttributeToBeAdded(newDerivedAttribute.getSchema());
  }
  final List<AttributeTO> newVirtualAttributes=roleTO.getVirtualAttributes();
  final List<AttributeTO> oldVirtualAttributes=oldRole.getVirtualAttributes();
  for (  AttributeTO oldVirtualAttribute : oldVirtualAttributes) {
    roleMod.addVirtualAttributeToBeRemoved(oldVirtualAttribute.getSchema());
  }
  for (  AttributeTO newVirtualAttribute : newVirtualAttributes) {
    roleMod.addVirtualAttributeToBeAdded(newVirtualAttribute.getSchema());
  }
  for (  AttributeTO attributeTO : roleTO.getAttributes()) {
    searchAndUpdateAttribute(attributeTO);
  }
  for (  String resource : roleTO.getResources()) {
    searchAndAddResource(resource);
  }
  for (  String resource : oldRole.getResources()) {
    searchAndDropResource(resource,roleTO);
  }
  if (!oldRole.getEntitlements().equals(roleTO.getEntitlements())) {
    roleMod.setEntitlements(roleTO.getEntitlements());
  }
  if (roleMod != null) {
    roleMod.setId(oldRole.getId());
    if (!oldRole.getEntitlements().equals(roleTO.getEntitlements())) {
      LOG.debug(""String_Node_Str"",oldRole.getEntitlements());
      LOG.debug(""String_Node_Str"",roleTO.getEntitlements());
      roleMod.setEntitlements(roleTO.getEntitlements());
    }
 else {
      roleMod.setEntitlements(oldRole.getEntitlements());
    }
  }
}","private void setupRoleMod(final RoleTO roleTO){
  roleMod=new RoleMod();
  roleMod.setInheritAttributes(roleTO.isInheritAttributes());
  roleMod.setInheritDerivedAttributes(roleTO.isInheritDerivedAttributes());
  roleMod.setInheritVirtualAttributes(roleTO.isInheritVirtualAttributes());
  if (!oldRole.getName().equals(roleTO.getName())) {
    roleMod.setName(roleTO.getName());
  }
  final List<AttributeTO> newDerivedAttributes=roleTO.getDerivedAttributes();
  final List<AttributeTO> oldDerivedAttributes=oldRole.getDerivedAttributes();
  for (  AttributeTO oldDerivedAttribute : oldDerivedAttributes) {
    roleMod.addDerivedAttributeToBeRemoved(oldDerivedAttribute.getSchema());
  }
  for (  AttributeTO newDerivedAttribute : newDerivedAttributes) {
    roleMod.addDerivedAttributeToBeAdded(newDerivedAttribute.getSchema());
  }
  final List<AttributeTO> newVirtualAttributes=roleTO.getVirtualAttributes();
  final List<AttributeTO> oldVirtualAttributes=oldRole.getVirtualAttributes();
  for (  AttributeTO oldVirtualAttribute : oldVirtualAttributes) {
    roleMod.addVirtualAttributeToBeRemoved(oldVirtualAttribute.getSchema());
  }
  for (  AttributeTO newVirtualAttribute : newVirtualAttributes) {
    roleMod.addVirtualAttributeToBeAdded(newVirtualAttribute.getSchema());
  }
  for (  AttributeTO attributeTO : roleTO.getAttributes()) {
    searchAndUpdateAttribute(attributeTO);
  }
  for (  String resource : roleTO.getResources()) {
    searchAndAddResource(resource);
  }
  for (  String resource : oldRole.getResources()) {
    searchAndDropResource(resource,roleTO);
  }
  if (!oldRole.getEntitlements().equals(roleTO.getEntitlements())) {
    roleMod.setEntitlements(roleTO.getEntitlements());
  }
  if (roleMod != null) {
    roleMod.setId(oldRole.getId());
    if (!oldRole.getEntitlements().equals(roleTO.getEntitlements())) {
      LOG.debug(""String_Node_Str"",oldRole.getEntitlements());
      LOG.debug(""String_Node_Str"",roleTO.getEntitlements());
      roleMod.setEntitlements(roleTO.getEntitlements());
    }
 else {
      roleMod.setEntitlements(oldRole.getEntitlements());
    }
  }
}"
60965,"/** 
 * Constructor.
 * @param callerPageRef
 * @param window
 * @param roleTO
 * @param createFlag
 */
public RoleModalPage(final PageReference callerPageRef,final ModalWindow window,final RoleTO roleTO,final boolean createFlag){
  super();
  if (!createFlag) {
    cloneOldRoleTO(roleTO);
  }
  final Form form=new Form(""String_Node_Str"");
  add(new Label(""String_Node_Str"",roleTO.getId() != 0 ? roleTO.getDisplayName() : ""String_Node_Str""));
  form.setModel(new CompoundPropertyModel(roleTO));
  final AjaxTextFieldPanel name=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(roleTO,""String_Node_Str""),false);
  name.addRequiredLabel();
  form.add(name);
  form.add(new AttributesPanel(""String_Node_Str"",roleTO,form));
  final AjaxCheckBoxPanel inheritAttributes=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(roleTO,""String_Node_Str""),false);
  form.add(inheritAttributes);
  form.add(new DerivedAttributesPanel(""String_Node_Str"",roleTO));
  final CheckBox inheritDerivedAttributes=new CheckBox(""String_Node_Str"");
  inheritDerivedAttributes.setOutputMarkupId(true);
  form.add(inheritDerivedAttributes);
  form.add(new VirtualAttributesPanel(""String_Node_Str"",roleTO));
  final CheckBox inheritVirtualAttributes=new CheckBox(""String_Node_Str"");
  inheritVirtualAttributes.setOutputMarkupId(true);
  form.add(inheritVirtualAttributes);
  form.add(new ResourcesPanel(""String_Node_Str"",roleTO));
  ListModel<String> selectedEntitlements=new ListModel<String>(roleTO.getEntitlements());
  ListModel<String> availableEntitlements=new ListModel<String>(entitlementRestClient.getAllEntitlements());
  final Palette<String> entitlementsPalette=new Palette(""String_Node_Str"",selectedEntitlements,availableEntitlements,new SelectChoiceRenderer(),20,false);
  form.add(entitlementsPalette);
  submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final RoleTO roleTO=(RoleTO)form.getDefaultModelObject();
      try {
        final List<String> entitlementList=new ArrayList<String>(entitlementsPalette.getModelCollection().size());
        for (        String entitlement : entitlementsPalette.getModelCollection()) {
          entitlementList.add(entitlement);
        }
        roleTO.setEntitlements(entitlementList);
        if (createFlag) {
          roleRestClient.createRole(roleTO);
        }
 else {
          setupRoleMod(roleTO);
          if (roleMod != null) {
            roleRestClient.updateRole(roleMod);
          }
        }
        ((Roles)callerPageRef.getPage()).setOperationResult(true);
        window.close(target);
      }
 catch (      Exception e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  form.add(submit);
  add(form);
}","/** 
 * Constructor.
 * @param callerPageRef
 * @param window
 * @param roleTO
 * @param createFlag
 */
public RoleModalPage(final PageReference callerPageRef,final ModalWindow window,final RoleTO roleTO,final boolean createFlag){
  super();
  if (!createFlag) {
    cloneOldRoleTO(roleTO);
  }
  final Form form=new Form(""String_Node_Str"");
  add(new Label(""String_Node_Str"",roleTO.getId() != 0 ? roleTO.getDisplayName() : ""String_Node_Str""));
  form.setModel(new CompoundPropertyModel(roleTO));
  final AjaxTextFieldPanel name=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(roleTO,""String_Node_Str""),false);
  name.addRequiredLabel();
  form.add(name);
  form.add(new AttributesPanel(""String_Node_Str"",roleTO,form));
  final AjaxCheckBoxPanel inhAttributes=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(roleTO,""String_Node_Str""),false);
  form.add(inhAttributes);
  form.add(new DerivedAttributesPanel(""String_Node_Str"",roleTO));
  final AjaxCheckBoxPanel inhDerivedAttributes=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(roleTO,""String_Node_Str""),false);
  inhDerivedAttributes.setOutputMarkupId(true);
  form.add(inhDerivedAttributes);
  form.add(new VirtualAttributesPanel(""String_Node_Str"",roleTO));
  final AjaxCheckBoxPanel inhVirtualAttributes=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(roleTO,""String_Node_Str""),false);
  inhVirtualAttributes.setOutputMarkupId(true);
  form.add(inhVirtualAttributes);
  form.add(new ResourcesPanel(""String_Node_Str"",roleTO));
  ListModel<String> selectedEntitlements=new ListModel<String>(roleTO.getEntitlements());
  ListModel<String> availableEntitlements=new ListModel<String>(entitlementRestClient.getAllEntitlements());
  final Palette<String> entitlementsPalette=new Palette(""String_Node_Str"",selectedEntitlements,availableEntitlements,new SelectChoiceRenderer(),20,false);
  form.add(entitlementsPalette);
  submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final RoleTO roleTO=(RoleTO)form.getDefaultModelObject();
      try {
        final List<String> entitlementList=new ArrayList<String>(entitlementsPalette.getModelCollection().size());
        for (        String entitlement : entitlementsPalette.getModelCollection()) {
          entitlementList.add(entitlement);
        }
        roleTO.setEntitlements(entitlementList);
        if (createFlag) {
          roleRestClient.createRole(roleTO);
        }
 else {
          setupRoleMod(roleTO);
          if (roleMod != null) {
            roleRestClient.updateRole(roleMod);
          }
        }
        ((Roles)callerPageRef.getPage()).setOperationResult(true);
        window.close(target);
      }
 catch (      Exception e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles;
  if (createFlag) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  form.add(submit);
  add(form);
}"
60966,"/** 
 * Performs update on each resource associated to the user.
 * @param userId to be updated
 * @param password to be updated
 * @param vAttrsToBeRemoved virtual attributes to be removed
 * @param vAttrsToBeAdded virtual attributes to be added
 * @param enable wether user must be enabled or not
 * @param propByRes operations to perform on each resource
 * @return list of propagation tasks
 * @throws NotFoundException if userId is not found
 */
public List<PropagationTask> getUpdateTaskIds(final Long userId,final String password,final Set<String> vAttrsToBeRemoved,final Set<String> vAttrsToBeAdded,final Boolean enable,final PropagationByResource propByRes) throws NotFoundException {
  SyncopeUser user=getSyncopeUser(userId);
  Set<String> vAttrsToRemove=vAttrsToBeRemoved == null ? Collections.EMPTY_SET : vAttrsToBeRemoved;
  Set<String> vAttrsToAdd=vAttrsToBeAdded == null ? Collections.EMPTY_SET : vAttrsToBeAdded;
  PropagationByResource vPropByRes=userDataBinder.fillVirtual(user,vAttrsToRemove,vAttrsToAdd,AttributableUtil.USER);
  propByRes.merge(vPropByRes);
  PropagationByResource localPropByRes;
  if (propByRes == null || propByRes.isEmpty()) {
    localPropByRes=new PropagationByResource();
    localPropByRes.addAll(PropagationOperation.UPDATE,user.getExternalResources());
  }
 else {
    localPropByRes=propByRes;
  }
  return provision(user,password,enable,localPropByRes);
}","/** 
 * Performs update on each resource associated to the user.
 * @param userId to be updated
 * @param password to be updated
 * @param vAttrsToBeRemoved virtual attributes to be removed
 * @param vAttrsToBeAdded virtual attributes to be added
 * @param enable wether user must be enabled or not
 * @param propByRes operations to perform on each resource
 * @param syncResourceName name of external resource performing sync, hencenot to be considered for propagation
 * @return list of propagation tasks
 * @throws NotFoundException if userId is not found
 */
public List<PropagationTask> getUpdateTaskIds(final Long userId,final String password,final Set<String> vAttrsToBeRemoved,final Set<String> vAttrsToBeAdded,final Boolean enable,final PropagationByResource propByRes,final String syncResourceName) throws NotFoundException {
  SyncopeUser user=getSyncopeUser(userId);
  Set<String> vAttrsToRemove=vAttrsToBeRemoved == null ? Collections.EMPTY_SET : vAttrsToBeRemoved;
  Set<String> vAttrsToAdd=vAttrsToBeAdded == null ? Collections.EMPTY_SET : vAttrsToBeAdded;
  PropagationByResource localPropByRes=userDataBinder.fillVirtual(user,vAttrsToRemove,vAttrsToAdd,AttributableUtil.USER);
  if (propByRes != null && !propByRes.isEmpty()) {
    localPropByRes.merge(propByRes);
  }
 else {
    localPropByRes.addAll(PropagationOperation.UPDATE,user.getExternalResources());
  }
  if (syncResourceName != null) {
    propByRes.get(PropagationOperation.CREATE).remove(syncResourceName);
    propByRes.get(PropagationOperation.UPDATE).remove(syncResourceName);
    propByRes.get(PropagationOperation.DELETE).remove(syncResourceName);
  }
  return provision(user,password,enable,localPropByRes);
}"
60967,"/** 
 * Create the user on every associated resource.
 * @param userId to be created
 * @param password to be set
 * @param vAttrs virtual attributes to be set
 * @param enable wether user must be enabled or not
 * @return list of propagation tasks
 * @throws NotFoundException if userId is not found
 */
public List<PropagationTask> getCreateTaskIds(final Long userId,final String password,final List<AttributeTO> vAttrs,final Boolean enable) throws NotFoundException {
  SyncopeUser user=getSyncopeUser(userId);
  if (vAttrs != null && !vAttrs.isEmpty()) {
    userDataBinder.fillVirtual(user,vAttrs,AttributableUtil.USER);
    user=userDAO.save(user);
  }
  final PropagationByResource propByRes=new PropagationByResource();
  propByRes.set(PropagationOperation.CREATE,user.getExternalResources());
  return provision(user,password,enable,propByRes);
}","/** 
 * Create the user on every associated resource.
 * @param userId to be created
 * @param password to be set
 * @param vAttrs virtual attributes to be set
 * @param enable wether user must be enabled or not
 * @param syncResourceName name of external resource performing sync, hencenot to be considered for propagation
 * @return list of propagation tasks
 * @throws NotFoundException if userId is not found
 */
public List<PropagationTask> getCreateTaskIds(final Long userId,final String password,final List<AttributeTO> vAttrs,final Boolean enable,final String syncResourceName) throws NotFoundException {
  SyncopeUser user=getSyncopeUser(userId);
  if (vAttrs != null && !vAttrs.isEmpty()) {
    userDataBinder.fillVirtual(user,vAttrs,AttributableUtil.USER);
    user=userDAO.save(user);
  }
  final PropagationByResource propByRes=new PropagationByResource();
  propByRes.set(PropagationOperation.CREATE,user.getExternalResources());
  if (syncResourceName != null) {
    propByRes.get(PropagationOperation.CREATE).remove(syncResourceName);
  }
  return provision(user,password,enable,propByRes);
}"
60968,"/** 
 * Perform delete on each resource associated to the user. It is possible to ask for a mandatory provisioning for some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if the creation fails onto a mandatory resource.
 * @param userId to be deleted
 * @return list of propagation tasks
 * @throws NotFoundException if user is not found
 */
public List<PropagationTask> getDeleteTaskIds(final Long userId) throws NotFoundException {
  SyncopeUser user=getSyncopeUser(userId);
  final PropagationByResource propByRes=new PropagationByResource();
  propByRes.set(PropagationOperation.DELETE,user.getExternalResources());
  return provision(user,null,false,propByRes);
}","/** 
 * Perform delete on each resource associated to the user. It is possible to ask for a mandatory provisioning for some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if the creation fails onto a mandatory resource.
 * @param userId to be deleted
 * @param syncResourceName name of external resource performing sync, hencenot to be considered for propagation
 * @return list of propagation tasks
 * @throws NotFoundException if user is not found
 */
public List<PropagationTask> getDeleteTaskIds(final Long userId,final String syncResourceName) throws NotFoundException {
  SyncopeUser user=getSyncopeUser(userId);
  final PropagationByResource propByRes=new PropagationByResource();
  propByRes.set(PropagationOperation.DELETE,user.getExternalResources());
  if (syncResourceName != null) {
    propByRes.get(PropagationOperation.DELETE).remove(syncResourceName);
  }
  return provision(user,null,false,propByRes);
}"
60969,"@Override protected String doExecute() throws JobExecutionException {
  if (!(task instanceof SyncTask)) {
    throw new JobExecutionException(""String_Node_Str"" + taskId + ""String_Node_Str"");
  }
  final SyncTask syncTask=(SyncTask)this.task;
  ConnectorFacadeProxy connector;
  try {
    connector=connInstanceLoader.getConnector(syncTask.getResource());
  }
 catch (  BeansException e) {
    final String msg=String.format(""String_Node_Str"" + ""String_Node_Str"",syncTask.getResource(),syncTask.getResource().getConnector());
    throw new JobExecutionException(msg,e);
  }
  List<SyncDelta> deltas;
  try {
    deltas=connector.sync(syncTask.getResource().getConnector().getSyncToken());
  }
 catch (  Throwable t) {
    throw new JobExecutionException(""String_Node_Str"",t);
  }
  SchemaMapping accountIdMap=syncTask.getResource().getAccountIdMapping();
  if (accountIdMap == null) {
    throw new JobExecutionException(""String_Node_Str"" + syncTask.getResource());
  }
  Set<String> defaultResources=new HashSet<String>(syncTask.getDefaultResources().size());
  for (  ExternalResource resource : syncTask.getDefaultResources()) {
    defaultResources.add(resource.getName());
  }
  Set<Long> defaultRoles=new HashSet<Long>(syncTask.getDefaultRoles().size());
  for (  SyncopeRole role : syncTask.getDefaultRoles()) {
    defaultRoles.add(role.getId());
  }
  int createdCounter=0;
  int updatedCounter=0;
  int deletedCounter=0;
  int failCreatedCounter=0;
  int failUpdatedCounter=0;
  int failDeletedCounter=0;
  List<SyncopeUser> users;
  List<Long> userIds;
  SyncopeUser userToUpdate;
  for (  SyncDelta delta : deltas) {
    users=findExistingUsers(accountIdMap.getIntAttrName(),delta.getUid().getUidValue(),delta.getPreviousUid() == null ? null : delta.getPreviousUid().getUidValue());
switch (delta.getDeltaType()) {
case CREATE_OR_UPDATE:
      if (users.isEmpty()) {
        try {
          UserTO userTO=getUserTO(delta.getObject(),syncTask.getResource().getMappings(),defaultRoles,defaultResources);
          Map.Entry<Long,Boolean> created=wfAdapter.create(userTO);
          createdCounter++;
          List<PropagationTask> tasks=propagationManager.getCreateTaskIds(created.getKey(),userTO.getPassword(),null,created.getValue());
          propagationManager.execute(tasks);
        }
 catch (        PropagationException e) {
          LOG.error(""String_Node_Str"" + delta.getUid().getUidValue(),e);
        }
catch (        Throwable t) {
          failCreatedCounter++;
          LOG.error(""String_Node_Str"" + delta.getUid().getUidValue(),t);
        }
      }
 else       if (users.size() == 1) {
        if (syncTask.isUpdateIdentities()) {
          userToUpdate=users.iterator().next();
          try {
            UserMod userMod=getUserMod(userToUpdate.getId(),delta.getObject(),syncTask.getResource().getMappings(),defaultRoles,defaultResources);
            Map.Entry<Long,PropagationByResource> updated=wfAdapter.update(userMod);
            updatedCounter++;
            List<PropagationTask> tasks=propagationManager.getUpdateTaskIds(updated.getKey(),userMod.getPassword(),null,null,null,updated.getValue());
            propagationManager.execute(tasks);
          }
 catch (          PropagationException e) {
            LOG.error(""String_Node_Str"" + delta.getUid().getUidValue(),e);
          }
catch (          Throwable t) {
            failUpdatedCounter++;
            LOG.error(""String_Node_Str"" + delta.getUid().getUidValue(),t);
          }
        }
      }
 else {
        LOG.error(""String_Node_Str"",users);
      }
    break;
case DELETE:
  LOG.debug(""String_Node_Str"",users);
userIds=new ArrayList<Long>(users.size());
for (SyncopeUser user : users) {
userIds.add(user.getId());
}
for (Long userId : userIds) {
try {
List<PropagationTask> tasks=propagationManager.getDeleteTaskIds(userId);
propagationManager.execute(tasks);
}
 catch (Exception e) {
LOG.error(""String_Node_Str"" + userId,e);
}
try {
wfAdapter.delete(userId);
deletedCounter++;
}
 catch (Throwable t) {
failDeletedCounter++;
LOG.error(""String_Node_Str"" + userId,t);
}
}
break;
default :
}
}
StringBuilder result=new StringBuilder();
result.append(""String_Node_Str"").append(createdCounter).append('/').append(failCreatedCounter).append(' ').append(""String_Node_Str"").append(updatedCounter).append('/').append(failUpdatedCounter).append(' ').append(""String_Node_Str"").append(deletedCounter).append('/').append(failDeletedCounter);
LOG.debug(""String_Node_Str"",result);
try {
syncTask.getResource().getConnector().setSyncToken(connector.getLatestSyncToken());
connInstanceDAO.save(syncTask.getResource().getConnector());
}
 catch (Throwable t) {
throw new JobExecutionException(""String_Node_Str"",t);
}
return result.toString();
}","@Override protected String doExecute() throws JobExecutionException {
  if (!(task instanceof SyncTask)) {
    throw new JobExecutionException(""String_Node_Str"" + taskId + ""String_Node_Str"");
  }
  final SyncTask syncTask=(SyncTask)this.task;
  ConnectorFacadeProxy connector;
  try {
    connector=connInstanceLoader.getConnector(syncTask.getResource());
  }
 catch (  BeansException e) {
    final String msg=String.format(""String_Node_Str"" + ""String_Node_Str"",syncTask.getResource(),syncTask.getResource().getConnector());
    throw new JobExecutionException(msg,e);
  }
  List<SyncDelta> deltas;
  try {
    deltas=connector.sync(syncTask.getResource().getConnector().getSyncToken());
  }
 catch (  Throwable t) {
    throw new JobExecutionException(""String_Node_Str"",t);
  }
  SchemaMapping accountIdMap=syncTask.getResource().getAccountIdMapping();
  if (accountIdMap == null) {
    throw new JobExecutionException(""String_Node_Str"" + syncTask.getResource());
  }
  Set<String> defaultResources=new HashSet<String>(syncTask.getDefaultResources().size());
  for (  ExternalResource resource : syncTask.getDefaultResources()) {
    defaultResources.add(resource.getName());
  }
  Set<Long> defaultRoles=new HashSet<Long>(syncTask.getDefaultRoles().size());
  for (  SyncopeRole role : syncTask.getDefaultRoles()) {
    defaultRoles.add(role.getId());
  }
  int createdCounter=0;
  int updatedCounter=0;
  int deletedCounter=0;
  int failCreatedCounter=0;
  int failUpdatedCounter=0;
  int failDeletedCounter=0;
  List<SyncopeUser> users;
  List<Long> userIds;
  SyncopeUser userToUpdate;
  for (  SyncDelta delta : deltas) {
    users=findExistingUsers(accountIdMap.getIntAttrName(),delta.getUid().getUidValue(),delta.getPreviousUid() == null ? null : delta.getPreviousUid().getUidValue());
switch (delta.getDeltaType()) {
case CREATE_OR_UPDATE:
      if (users.isEmpty()) {
        try {
          UserTO userTO=getUserTO(delta.getObject(),syncTask.getResource().getMappings(),defaultRoles,defaultResources);
          Map.Entry<Long,Boolean> created=wfAdapter.create(userTO);
          createdCounter++;
          List<PropagationTask> tasks=propagationManager.getCreateTaskIds(created.getKey(),userTO.getPassword(),null,created.getValue(),syncTask.getResource().getName());
          propagationManager.execute(tasks);
        }
 catch (        PropagationException e) {
          LOG.error(""String_Node_Str"" + delta.getUid().getUidValue(),e);
        }
catch (        Throwable t) {
          failCreatedCounter++;
          LOG.error(""String_Node_Str"" + delta.getUid().getUidValue(),t);
        }
      }
 else       if (users.size() == 1) {
        if (syncTask.isUpdateIdentities()) {
          userToUpdate=users.iterator().next();
          try {
            UserMod userMod=getUserMod(userToUpdate.getId(),delta.getObject(),syncTask.getResource().getMappings(),defaultRoles,defaultResources);
            Map.Entry<Long,PropagationByResource> updated=wfAdapter.update(userMod);
            updatedCounter++;
            List<PropagationTask> tasks=propagationManager.getUpdateTaskIds(updated.getKey(),userMod.getPassword(),null,null,null,updated.getValue(),syncTask.getResource().getName());
            propagationManager.execute(tasks);
          }
 catch (          PropagationException e) {
            LOG.error(""String_Node_Str"" + delta.getUid().getUidValue(),e);
          }
catch (          Throwable t) {
            failUpdatedCounter++;
            LOG.error(""String_Node_Str"" + delta.getUid().getUidValue(),t);
          }
        }
      }
 else {
        LOG.error(""String_Node_Str"",users);
      }
    break;
case DELETE:
  LOG.debug(""String_Node_Str"",users);
userIds=new ArrayList<Long>(users.size());
for (SyncopeUser user : users) {
userIds.add(user.getId());
}
for (Long userId : userIds) {
try {
List<PropagationTask> tasks=propagationManager.getDeleteTaskIds(userId,syncTask.getResource().getName());
propagationManager.execute(tasks);
}
 catch (Exception e) {
LOG.error(""String_Node_Str"" + userId,e);
}
try {
wfAdapter.delete(userId);
deletedCounter++;
}
 catch (Throwable t) {
failDeletedCounter++;
LOG.error(""String_Node_Str"" + userId,t);
}
}
break;
default :
}
}
StringBuilder result=new StringBuilder();
result.append(""String_Node_Str"").append(createdCounter).append('/').append(failCreatedCounter).append(' ').append(""String_Node_Str"").append(updatedCounter).append('/').append(failUpdatedCounter).append(' ').append(""String_Node_Str"").append(deletedCounter).append('/').append(failDeletedCounter);
LOG.debug(""String_Node_Str"",result);
try {
syncTask.getResource().getConnector().setSyncToken(connector.getLatestSyncToken());
connInstanceDAO.save(syncTask.getResource().getConnector());
}
 catch (Throwable t) {
throw new JobExecutionException(""String_Node_Str"",t);
}
return result.toString();
}"
60970,"public ResourceModalPage(final PageReference callPageRef,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  super();
  uSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  uDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  uVirSchemaAttrNames=schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
  final IModel<List<ConnInstanceTO>> connectors=new LoadableDetachableModel<List<ConnInstanceTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnInstanceTO> load(){
      return connectorRestClient.getAllConnectors();
    }
  }
;
  final IModel<List<SourceMappingType>> sourceMappingTypes=new LoadableDetachableModel<List<SourceMappingType>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<SourceMappingType> load(){
      return Arrays.asList(SourceMappingType.values());
    }
  }
;
  final IModel<List<ConnConfProperty>> connectorPropertiesModel=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      Set<ConnConfProperty> props=resourceTO.getConnectorConfigurationProperties();
      if (props == null || props.isEmpty() || createFlag) {
        props=overridableConnectorProperties;
      }
      return new ArrayList<ConnConfProperty>(props);
    }
  }
;
  updateResourceSchemaNames(resourceTO);
  updateConnectorProperties(resourceTO.getConnectorId());
  final ConnInstanceTO connectorTO=new ConnInstanceTO();
  if (!createFlag) {
    connectorTO.setId(resourceTO.getConnectorId());
  }
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(resourceTO));
  final AjaxTextFieldPanel resourceName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  resourceName.setEnabled(createFlag);
  resourceName.addRequiredLabel();
  form.add(resourceName);
  final AjaxTextFieldPanel accountLink=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  form.add(accountLink);
  final AjaxCheckBoxPanel forceMandatoryConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(forceMandatoryConstraint);
  final AjaxDropDownChoicePanel<PropagationMode> optionalPropagationMode=new AjaxDropDownChoicePanel<PropagationMode>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  optionalPropagationMode.setChoices(Arrays.asList(PropagationMode.values()));
  form.add(optionalPropagationMode);
  final AjaxDropDownChoicePanel<TraceLevel> createTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  createTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(createTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> updateTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  updateTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(updateTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> deleteTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  deleteTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(deleteTraceLevel);
  mappingContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingContainer.setOutputMarkupId(true);
  form.add(mappingContainer);
  connectorPropertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  connectorPropertiesContainer.setOutputMarkupId(true);
  form.add(connectorPropertiesContainer);
  final AjaxDropDownChoicePanel<ConnInstanceTO> connector=new AjaxDropDownChoicePanel<ConnInstanceTO>(""String_Node_Str"",getString(""String_Node_Str""),new Model<ConnInstanceTO>(connectorTO),false);
  connector.setChoices(connectors.getObject());
  connector.setChoiceRenderer(new ChoiceRenderer(""String_Node_Str"",""String_Node_Str""));
  connector.getField().setModel(new IModel<ConnInstanceTO>(){
    private static final long serialVersionUID=-4202872830392400310L;
    @Override public ConnInstanceTO getObject(){
      return connectorTO;
    }
    @Override public void setObject(    final ConnInstanceTO connector){
      resourceTO.setConnectorId(connector.getId());
    }
    @Override public void detach(){
    }
  }
);
  connector.addRequiredLabel();
  connector.setEnabled(createFlag);
  form.add(connector);
  final ListView<SchemaMappingTO> mappings=new ListView<SchemaMappingTO>(""String_Node_Str"",resourceTO.getMappings()){
    private static final long serialVersionUID=4949588177564901031L;
    @Override protected void populateItem(    final ListItem<SchemaMappingTO> item){
      final SchemaMappingTO mappingTO=item.getModelObject();
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
        private static final long serialVersionUID=7170946748485726506L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int index=-1;
          for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
            if (mappingTO.equals(resourceTO.getMappings().get(i))) {
              index=i;
            }
          }
          if (index != -1) {
            resourceTO.getMappings().remove(index);
            item.getParent().removeAll();
            target.add(mappingContainer);
          }
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=-7927968187160354605L;
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      final AjaxDropDownChoicePanel sourceAttrNames=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
      sourceAttrNames.setChoices(resourceSchemaNames);
      sourceAttrNames.setRequired(true);
      sourceAttrNames.setStyleShet(""String_Node_Str"");
      if (mappingTO.getSourceMappingType() == null) {
        sourceAttrNames.setChoices(Collections.EMPTY_LIST);
      }
 else {
switch (mappingTO.getSourceMappingType()) {
case UserSchema:
          sourceAttrNames.setChoices(uSchemaAttrNames);
        break;
case UserDerivedSchema:
      sourceAttrNames.setChoices(uDerSchemaAttrNames);
    break;
case UserVirtualSchema:
  sourceAttrNames.setChoices(uVirSchemaAttrNames);
break;
case SyncopeUserId:
sourceAttrNames.setEnabled(false);
sourceAttrNames.setRequired(false);
sourceAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
case Password:
sourceAttrNames.setEnabled(false);
sourceAttrNames.setRequired(false);
sourceAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
default :
sourceAttrNames.setChoices(Collections.EMPTY_LIST);
}
}
item.add(sourceAttrNames);
final SourceMappingTypesDropDownChoice mappingTypesPanel=new SourceMappingTypesDropDownChoice(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<SourceMappingType>(mappingTO,""String_Node_Str""),sourceAttrNames);
mappingTypesPanel.setRequired(true);
mappingTypesPanel.setChoices(sourceMappingTypes.getObject());
mappingTypesPanel.setStyleShet(""String_Node_Str"");
item.add(mappingTypesPanel);
final FieldPanel destAttrName;
if (resourceSchemaNames.isEmpty()) {
destAttrName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(mappingTO,""String_Node_Str""),true);
}
 else {
destAttrName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
((AjaxDropDownChoicePanel)destAttrName).setChoices(resourceSchemaNames);
}
boolean required=mappingTO != null && !mappingTO.isAccountid() && !mappingTO.isPassword();
destAttrName.setRequired(required);
destAttrName.setEnabled(required);
destAttrName.setStyleShet(""String_Node_Str"");
item.add(destAttrName);
final AjaxTextFieldPanel mandatoryCondition=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
mandatoryCondition.setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
mandatoryCondition.setStyleShet(""String_Node_Str"");
item.add(mandatoryCondition);
final AjaxCheckBoxPanel accountId=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),false);
accountId.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
destAttrName.setEnabled(!accountId.getModelObject() && !mappingTO.isPassword());
destAttrName.setModelObject(null);
destAttrName.setRequired(!accountId.getModelObject());
target.add(destAttrName);
}
}
);
item.add(accountId);
final AjaxCheckBoxPanel password=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
password.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
destAttrName.setEnabled(!mappingTO.isAccountid() && !password.getModelObject());
destAttrName.setModelObject(null);
destAttrName.setRequired(!password.getModelObject());
target.add(destAttrName);
}
}
);
item.add(password);
}
}
;
mappings.setReuseItems(true);
mappingContainer.add(mappings);
final AjaxButton addSchemaMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-4804368561204623354L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
resourceTO.getMappings().add(new SchemaMappingTO());
target.add(mappingContainer);
}
@Override protected void onError(AjaxRequestTarget target,Form<?> form){
}
}
;
addSchemaMappingBtn.setDefaultFormProcessing(false);
addSchemaMappingBtn.setEnabled(!createFlag);
mappingContainer.add(addSchemaMappingBtn);
connectorPropertiesContainer.add(new ListView<ConnConfProperty>(""String_Node_Str"",connectorPropertiesModel){
private static final long serialVersionUID=9101744072914090143L;
@Override protected void populateItem(final ListItem<ConnConfProperty> item){
final ConnConfProperty property=item.getModelObject();
final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
item.add(label);
final FieldPanel field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),false).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
if (property.getSchema().isRequired()) {
field.addRequiredLabel();
}
field.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
target.add(mappingContainer);
}
}
);
item.add(field);
resourceTO.getConnectorConfigurationProperties().add(property);
}
}
);
connector.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
updateConnectorProperties(resourceTO.getConnectorId());
target.add(mappingContainer);
target.add(connectorPropertiesContainer);
}
}
);
AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
int accountIdCount=0;
for (SchemaMappingTO mapping : resourceTO.getMappings()) {
if (mapping.isAccountid()) {
accountIdCount++;
}
}
if (accountIdCount == 0 || accountIdCount > 1) {
error(getString(""String_Node_Str""));
((Resources)callPageRef.getPage()).setOperationResult(false);
}
 else {
try {
if (createFlag) {
restClient.create(resourceTO);
}
 else {
restClient.update(resourceTO);
}
((Resources)callPageRef.getPage()).setOperationResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
((Resources)callPageRef.getPage()).setOperationResult(false);
LOG.error(""String_Node_Str"",resourceTO);
}
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.add(feedbackPanel);
}
}
;
form.add(submit);
add(form);
MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",createFlag ? ""String_Node_Str"" : ""String_Node_Str""));
}","public ResourceModalPage(final PageReference callPageRef,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  super();
  uSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  uDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  uVirSchemaAttrNames=schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
  final IModel<List<ConnInstanceTO>> connectors=new LoadableDetachableModel<List<ConnInstanceTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnInstanceTO> load(){
      return connectorRestClient.getAllConnectors();
    }
  }
;
  final IModel<List<SourceMappingType>> sourceMappingTypes=new LoadableDetachableModel<List<SourceMappingType>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<SourceMappingType> load(){
      return Arrays.asList(SourceMappingType.values());
    }
  }
;
  final IModel<List<ConnConfProperty>> connectorPropertiesModel=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      Set<ConnConfProperty> props=resourceTO.getConnectorConfigurationProperties();
      if (props == null || props.isEmpty() || createFlag) {
        props=overridableConnectorProperties;
      }
      return new ArrayList<ConnConfProperty>(props);
    }
  }
;
  updateResourceSchemaNames(resourceTO);
  updateConnectorProperties(resourceTO.getConnectorId());
  final ConnInstanceTO connectorTO=new ConnInstanceTO();
  if (!createFlag) {
    connectorTO.setId(resourceTO.getConnectorId());
  }
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(resourceTO));
  final AjaxTextFieldPanel resourceName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  resourceName.setEnabled(createFlag);
  resourceName.addRequiredLabel();
  form.add(resourceName);
  final AjaxTextFieldPanel accountLink=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  form.add(accountLink);
  final AjaxCheckBoxPanel forceMandatoryConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(forceMandatoryConstraint);
  final AjaxDropDownChoicePanel<PropagationMode> optionalPropagationMode=new AjaxDropDownChoicePanel<PropagationMode>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  optionalPropagationMode.setChoices(Arrays.asList(PropagationMode.values()));
  form.add(optionalPropagationMode);
  final AjaxDropDownChoicePanel<TraceLevel> createTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  createTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(createTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> updateTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  updateTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(updateTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> deleteTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  deleteTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(deleteTraceLevel);
  mappingContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingContainer.setOutputMarkupId(true);
  form.add(mappingContainer);
  connectorPropertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  connectorPropertiesContainer.setOutputMarkupId(true);
  form.add(connectorPropertiesContainer);
  final AjaxDropDownChoicePanel<ConnInstanceTO> connector=new AjaxDropDownChoicePanel<ConnInstanceTO>(""String_Node_Str"",getString(""String_Node_Str""),new Model<ConnInstanceTO>(connectorTO),false);
  connector.setChoices(connectors.getObject());
  connector.setChoiceRenderer(new ChoiceRenderer(""String_Node_Str"",""String_Node_Str""));
  connector.getField().setModel(new IModel<ConnInstanceTO>(){
    private static final long serialVersionUID=-4202872830392400310L;
    @Override public ConnInstanceTO getObject(){
      return connectorTO;
    }
    @Override public void setObject(    final ConnInstanceTO connector){
      resourceTO.setConnectorId(connector.getId());
    }
    @Override public void detach(){
    }
  }
);
  connector.addRequiredLabel();
  connector.setEnabled(createFlag);
  form.add(connector);
  final ListView<SchemaMappingTO> mappings=new ListView<SchemaMappingTO>(""String_Node_Str"",resourceTO.getMappings()){
    private static final long serialVersionUID=4949588177564901031L;
    @Override protected void populateItem(    final ListItem<SchemaMappingTO> item){
      final SchemaMappingTO mappingTO=item.getModelObject();
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
        private static final long serialVersionUID=7170946748485726506L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int index=-1;
          for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
            if (mappingTO.equals(resourceTO.getMappings().get(i))) {
              index=i;
            }
          }
          if (index != -1) {
            resourceTO.getMappings().remove(index);
            item.getParent().removeAll();
            target.add(mappingContainer);
          }
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=-7927968187160354605L;
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      final AjaxDropDownChoicePanel sourceAttrNames=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
      sourceAttrNames.setChoices(resourceSchemaNames);
      sourceAttrNames.setRequired(true);
      sourceAttrNames.setStyleShet(""String_Node_Str"");
      if (mappingTO.getSourceMappingType() == null) {
        sourceAttrNames.setChoices(Collections.EMPTY_LIST);
      }
 else {
switch (mappingTO.getSourceMappingType()) {
case UserSchema:
          sourceAttrNames.setChoices(uSchemaAttrNames);
        break;
case UserDerivedSchema:
      sourceAttrNames.setChoices(uDerSchemaAttrNames);
    break;
case UserVirtualSchema:
  sourceAttrNames.setChoices(uVirSchemaAttrNames);
break;
case SyncopeUserId:
sourceAttrNames.setEnabled(false);
sourceAttrNames.setRequired(false);
sourceAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
case Password:
sourceAttrNames.setEnabled(false);
sourceAttrNames.setRequired(false);
sourceAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setSourceAttrName(""String_Node_Str"");
break;
default :
sourceAttrNames.setChoices(Collections.EMPTY_LIST);
}
}
item.add(sourceAttrNames);
final SourceMappingTypesDropDownChoice mappingTypesPanel=new SourceMappingTypesDropDownChoice(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<SourceMappingType>(mappingTO,""String_Node_Str""),sourceAttrNames);
mappingTypesPanel.setRequired(true);
mappingTypesPanel.setChoices(sourceMappingTypes.getObject());
mappingTypesPanel.setStyleShet(""String_Node_Str"");
item.add(mappingTypesPanel);
final FieldPanel destAttrName;
if (resourceSchemaNames.isEmpty()) {
destAttrName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(mappingTO,""String_Node_Str""),true);
}
 else {
destAttrName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
((AjaxDropDownChoicePanel)destAttrName).setChoices(resourceSchemaNames);
}
boolean required=mappingTO != null && !mappingTO.isAccountid() && !mappingTO.isPassword();
destAttrName.setRequired(required);
destAttrName.setEnabled(required);
destAttrName.setStyleShet(""String_Node_Str"");
item.add(destAttrName);
final AjaxTextFieldPanel mandatoryCondition=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
mandatoryCondition.setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
mandatoryCondition.setStyleShet(""String_Node_Str"");
item.add(mandatoryCondition);
final AjaxCheckBoxPanel accountId=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),false);
accountId.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
destAttrName.setEnabled(!accountId.getModelObject() && !mappingTO.isPassword());
destAttrName.setModelObject(null);
destAttrName.setRequired(!accountId.getModelObject());
target.add(destAttrName);
}
}
);
item.add(accountId);
final AjaxCheckBoxPanel password=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
password.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
destAttrName.setEnabled(!mappingTO.isAccountid() && !password.getModelObject());
destAttrName.setModelObject(null);
destAttrName.setRequired(!password.getModelObject());
target.add(destAttrName);
}
}
);
item.add(password);
}
}
;
mappings.setReuseItems(true);
mappingContainer.add(mappings);
final AjaxButton addSchemaMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-4804368561204623354L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
resourceTO.getMappings().add(new SchemaMappingTO());
target.add(mappingContainer);
}
@Override protected void onError(AjaxRequestTarget target,Form<?> form){
}
}
;
addSchemaMappingBtn.setDefaultFormProcessing(false);
addSchemaMappingBtn.setEnabled(!createFlag);
mappingContainer.add(addSchemaMappingBtn);
connectorPropertiesContainer.add(new ListView<ConnConfProperty>(""String_Node_Str"",connectorPropertiesModel){
private static final long serialVersionUID=9101744072914090143L;
@Override protected void populateItem(final ListItem<ConnConfProperty> item){
final ConnConfProperty property=item.getModelObject();
final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
item.add(label);
final FieldPanel field;
if (GUARDED_STRING.equals(property.getSchema().getType())) {
field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
}
 else {
field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),false).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
if (property.getSchema().isRequired()) {
field.addRequiredLabel();
}
}
field.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
target.add(mappingContainer);
}
}
);
item.add(field);
resourceTO.getConnectorConfigurationProperties().add(property);
}
}
);
connector.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
updateConnectorProperties(resourceTO.getConnectorId());
target.add(mappingContainer);
target.add(connectorPropertiesContainer);
}
}
);
AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
int accountIdCount=0;
for (SchemaMappingTO mapping : resourceTO.getMappings()) {
if (mapping.isAccountid()) {
accountIdCount++;
}
}
if (accountIdCount == 0 || accountIdCount > 1) {
error(getString(""String_Node_Str""));
((Resources)callPageRef.getPage()).setOperationResult(false);
}
 else {
try {
if (createFlag) {
restClient.create(resourceTO);
}
 else {
restClient.update(resourceTO);
}
((Resources)callPageRef.getPage()).setOperationResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
((Resources)callPageRef.getPage()).setOperationResult(false);
LOG.error(""String_Node_Str"",resourceTO);
}
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.add(feedbackPanel);
}
}
;
form.add(submit);
add(form);
MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",createFlag ? ""String_Node_Str"" : ""String_Node_Str""));
}"
60971,"@Override protected void populateItem(final ListItem<ConnConfProperty> item){
  final ConnConfProperty property=item.getModelObject();
  final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
  item.add(label);
  final FieldPanel field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),false).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
  if (property.getSchema().isRequired()) {
    field.addRequiredLabel();
  }
  field.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    AjaxRequestTarget target){
      mappings.removeAll();
      addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
      updateResourceSchemaNames(resourceTO);
      target.add(mappingContainer);
    }
  }
);
  item.add(field);
  resourceTO.getConnectorConfigurationProperties().add(property);
}","@Override protected void populateItem(final ListItem<ConnConfProperty> item){
  final ConnConfProperty property=item.getModelObject();
  final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
  item.add(label);
  final FieldPanel field;
  if (GUARDED_STRING.equals(property.getSchema().getType())) {
    field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
  }
 else {
    field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),false).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
    if (property.getSchema().isRequired()) {
      field.addRequiredLabel();
    }
  }
  field.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    AjaxRequestTarget target){
      mappings.removeAll();
      addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
      updateResourceSchemaNames(resourceTO);
      target.add(mappingContainer);
    }
  }
);
  item.add(field);
  resourceTO.getConnectorConfigurationProperties().add(property);
}"
60972,"public AjaxPasswordFieldPanel(final String id,final String name,final IModel<String> model,final boolean active){
  super(id,name,model,active);
  field=new PasswordTextField(""String_Node_Str"",model);
  add(field.setLabel(new Model(name)).setOutputMarkupId(true));
  if (active) {
    field.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
      private static final long serialVersionUID=-1107858522700306810L;
      @Override protected void onUpdate(      final AjaxRequestTarget art){
      }
    }
);
  }
}","public AjaxPasswordFieldPanel(final String id,final String name,final IModel<String> model,final boolean active){
  super(id,name,model,active);
  field=new PasswordTextField(""String_Node_Str"",model).setResetPassword(false);
  add(field.setLabel(new Model(name)).setOutputMarkupId(true));
  if (active) {
    field.add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
      private static final long serialVersionUID=-1107858522700306810L;
      @Override protected void onUpdate(      final AjaxRequestTarget art){
      }
    }
);
  }
}"
60973,"public STaskModalPage(final ModalWindow window,final SyncTaskTO taskTO){
  super(window,taskTO);
  final IModel<List<String>> allResources=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      final List<String> resourceNames=new ArrayList<String>();
      for (      ResourceTO resourceTO : resourceRestClient.getAllResources()) {
        resourceNames.add(resourceTO.getName());
      }
      return resourceNames;
    }
  }
;
  final IModel<Map<Long,String>> allRoles=new LoadableDetachableModel<Map<Long,String>>(){
    private static final long serialVersionUID=-2012833443695917883L;
    @Override protected Map<Long,String> load(){
      final Map<Long,String> allRoles=new HashMap<Long,String>();
      List<RoleTO> roles=roleRestClient.getAllRoles();
      if (roles != null) {
        for (        RoleTO role : roles) {
          allRoles.put(role.getId(),role.getName());
        }
      }
      return allRoles;
    }
  }
;
  final AjaxDropDownChoicePanel<String> resource=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(taskTO,""String_Node_Str""),false);
  resource.setChoices(allResources.getObject());
  resource.setChoiceRenderer(new SelectChoiceRenderer());
  resource.addRequiredLabel();
  resource.setEnabled(taskTO.getId() == 0);
  resource.setStyleShet(""String_Node_Str"");
  profile.add(resource);
  final AjaxCheckBoxPanel updates=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(taskTO,""String_Node_Str""),false);
  profile.add(updates);
  final AjaxPalettePanel defaultResources=new AjaxPalettePanel(""String_Node_Str"",new PropertyModel(taskTO,""String_Node_Str""),new ListModel<String>(allResources.getObject()));
  form.add(defaultResources);
  final AjaxPalettePanel<Long> defaultRoles=new AjaxPalettePanel<Long>(""String_Node_Str"",new PropertyModel(taskTO,""String_Node_Str""),new ListModel<Long>(new ArrayList<Long>(allRoles.getObject().keySet())),new ChoiceRenderer<Long>(){
    private static final long serialVersionUID=8463000788871139550L;
    @Override public String getDisplayValue(    Long id){
      return allRoles.getObject().get(id);
    }
    @Override public String getIdValue(    Long id,    int index){
      return id.toString();
    }
  }
);
  form.add(defaultRoles);
}","public STaskModalPage(final ModalWindow window,final SyncTaskTO taskTO){
  super(window,taskTO);
  final IModel<List<String>> allResources=new LoadableDetachableModel<List<String>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<String> load(){
      final List<String> resourceNames=new ArrayList<String>();
      for (      ResourceTO resourceTO : resourceRestClient.getAllResources()) {
        resourceNames.add(resourceTO.getName());
      }
      return resourceNames;
    }
  }
;
  final IModel<Map<Long,String>> allRoles=new LoadableDetachableModel<Map<Long,String>>(){
    private static final long serialVersionUID=-2012833443695917883L;
    @Override protected Map<Long,String> load(){
      final Map<Long,String> allRoles=new HashMap<Long,String>();
      List<RoleTO> roles=roleRestClient.getAllRoles();
      if (roles != null) {
        for (        RoleTO role : roles) {
          allRoles.put(role.getId(),role.getName());
        }
      }
      return allRoles;
    }
  }
;
  final AjaxDropDownChoicePanel<String> resource=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(taskTO,""String_Node_Str""),false);
  resource.setChoices(allResources.getObject());
  resource.setChoiceRenderer(new SelectChoiceRenderer());
  resource.addRequiredLabel();
  resource.setEnabled(taskTO.getId() == 0);
  resource.setStyleShet(""String_Node_Str"");
  profile.add(resource);
  final AjaxCheckBoxPanel creates=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(taskTO,""String_Node_Str""),false);
  profile.add(creates);
  final AjaxCheckBoxPanel updates=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(taskTO,""String_Node_Str""),false);
  profile.add(updates);
  final AjaxCheckBoxPanel deletes=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(taskTO,""String_Node_Str""),false);
  profile.add(deletes);
  final AjaxPalettePanel defaultResources=new AjaxPalettePanel(""String_Node_Str"",new PropertyModel(taskTO,""String_Node_Str""),new ListModel<String>(allResources.getObject()));
  form.add(defaultResources);
  final AjaxPalettePanel<Long> defaultRoles=new AjaxPalettePanel<Long>(""String_Node_Str"",new PropertyModel(taskTO,""String_Node_Str""),new ListModel<Long>(new ArrayList<Long>(allRoles.getObject().keySet())),new ChoiceRenderer<Long>(){
    private static final long serialVersionUID=8463000788871139550L;
    @Override public String getDisplayValue(    Long id){
      return allRoles.getObject().get(id);
    }
    @Override public String getIdValue(    Long id,    int index){
      return id.toString();
    }
  }
);
  form.add(defaultRoles);
}"
60974,"public Tasks(final PageParameters parameters){
  super();
  add(new PropagationTasks(""String_Node_Str""));
  add(new GenericTasks(""String_Node_Str""));
  add(new SyncTasks(""String_Node_Str""));
}","public Tasks(final PageParameters parameters){
  super();
  add(new PropagationTasks(""String_Node_Str""));
  add(new SchedTasks(""String_Node_Str""));
  add(new SyncTasks(""String_Node_Str""));
}"
60975,"public SchedTaskTO updateSchedTask(final SchedTaskTO taskTO){
  final SchedTaskMod taskMod=new SchedTaskMod();
  taskMod.setId(taskTO.getId());
  taskMod.setCronExpression(taskTO.getCronExpression());
  return restTemplate.postForObject(baseURL + ""String_Node_Str"",taskMod,SchedTaskTO.class);
}","public SchedTaskTO updateSchedTask(final SchedTaskTO taskTO){
  return restTemplate.postForObject(baseURL + ""String_Node_Str"",taskTO,SchedTaskTO.class);
}"
60976,"public SyncTaskTO updateSyncTask(final SyncTaskTO taskTO){
  final SyncTaskMod taskMod=new SyncTaskMod();
  taskMod.setId(taskTO.getId());
  taskMod.setCronExpression(taskTO.getCronExpression());
  taskMod.setDefaultResources(taskTO.getDefaultResources());
  taskMod.setDefaultRoles(taskTO.getDefaultRoles());
  taskMod.setUpdateIdentities(taskTO.isUpdateIdentities());
  return restTemplate.postForObject(baseURL + ""String_Node_Str"",taskMod,SyncTaskTO.class);
}","public SyncTaskTO updateSyncTask(final SyncTaskTO taskTO){
  return restTemplate.postForObject(baseURL + ""String_Node_Str"",taskTO,SyncTaskTO.class);
}"
60977,"@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<ConnInstanceTO> list(){
  List<ConnInstance> connInstances=connInstanceDAO.findAll();
  List<ConnInstanceTO> connInstanceTOs=new ArrayList<ConnInstanceTO>();
  for (  ConnInstance connector : connInstances) {
    connInstanceTOs.add(binder.getConnInstanceTO(connector));
  }
  return connInstanceTOs;
}","@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<ConnInstanceTO> list() throws NotFoundException {
  List<ConnInstance> connInstances=connInstanceDAO.findAll();
  List<ConnInstanceTO> connInstanceTOs=new ArrayList<ConnInstanceTO>();
  for (  ConnInstance connector : connInstances) {
    connInstanceTOs.add(binder.getConnInstanceTO(connector));
  }
  return connInstanceTOs;
}"
60978,"@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<ConnBundleTO> getBundles() throws NotFoundException, MissingConfKeyException {
  ConnectorInfoManager manager=connBundleManager.getConnectorManager();
  List<ConnectorInfo> bundles=manager.getConnectorInfos();
  if (LOG.isDebugEnabled() && bundles != null) {
    LOG.debug(""String_Node_Str"",bundles.size());
    for (    ConnectorInfo bundle : bundles) {
      LOG.debug(""String_Node_Str"",bundle.getConnectorDisplayName());
    }
  }
  ConnBundleTO connectorBundleTO;
  ConnectorKey key;
  ConfigurationProperties properties;
  List<ConnBundleTO> connectorBundleTOs=new ArrayList<ConnBundleTO>();
  if (bundles != null) {
    for (    ConnectorInfo bundle : bundles) {
      connectorBundleTO=new ConnBundleTO();
      connectorBundleTO.setDisplayName(bundle.getConnectorDisplayName());
      key=bundle.getConnectorKey();
      LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",new Object[]{key.getBundleName(),key.getBundleVersion(),key.getConnectorName()});
      connectorBundleTO.setBundleName(key.getBundleName());
      connectorBundleTO.setConnectorName(key.getConnectorName());
      connectorBundleTO.setVersion(key.getBundleVersion());
      properties=bundle.createDefaultAPIConfiguration().getConfigurationProperties();
      ConnConfPropSchema connConfPropSchema;
      ConfigurationProperty configurationProperty;
      for (      String propName : properties.getPropertyNames()) {
        connConfPropSchema=new ConnConfPropSchema();
        configurationProperty=properties.getProperty(propName);
        connConfPropSchema.setName(configurationProperty.getName());
        connConfPropSchema.setDisplayName(configurationProperty.getDisplayName(propName));
        connConfPropSchema.setHelpMessage(configurationProperty.getHelpMessage(propName));
        connConfPropSchema.setRequired(configurationProperty.isRequired());
        connConfPropSchema.setType(configurationProperty.getType().getName());
        connectorBundleTO.addProperty(connConfPropSchema);
      }
      LOG.debug(""String_Node_Str"",connectorBundleTO.getProperties());
      connectorBundleTOs.add(connectorBundleTO);
    }
  }
  return connectorBundleTOs;
}","@PreAuthorize(""String_Node_Str"") @RequestMapping(method=RequestMethod.GET,value=""String_Node_Str"") public List<ConnBundleTO> getBundles() throws NotFoundException, MissingConfKeyException {
  ConnectorInfoManager manager=connBundleManager.getConnectorManager();
  List<ConnectorInfo> bundles=manager.getConnectorInfos();
  if (LOG.isDebugEnabled() && bundles != null) {
    LOG.debug(""String_Node_Str"",bundles.size());
    for (    ConnectorInfo bundle : bundles) {
      LOG.debug(""String_Node_Str"",bundle.getConnectorDisplayName());
    }
  }
  ConnBundleTO connectorBundleTO;
  ConnectorKey key;
  ConfigurationProperties properties;
  List<ConnBundleTO> connectorBundleTOs=new ArrayList<ConnBundleTO>();
  if (bundles != null) {
    for (    ConnectorInfo bundle : bundles) {
      connectorBundleTO=new ConnBundleTO();
      connectorBundleTO.setDisplayName(bundle.getConnectorDisplayName());
      key=bundle.getConnectorKey();
      LOG.debug(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",new Object[]{key.getBundleName(),key.getBundleVersion(),key.getConnectorName()});
      connectorBundleTO.setBundleName(key.getBundleName());
      connectorBundleTO.setConnectorName(key.getConnectorName());
      connectorBundleTO.setVersion(key.getBundleVersion());
      properties=connBundleManager.getConfigurationProperties(bundle);
      ConnConfPropSchema connConfPropSchema;
      ConfigurationProperty configurationProperty;
      for (      String propName : properties.getPropertyNames()) {
        connConfPropSchema=new ConnConfPropSchema();
        configurationProperty=properties.getProperty(propName);
        connConfPropSchema.setName(configurationProperty.getName());
        connConfPropSchema.setDisplayName(configurationProperty.getDisplayName(propName));
        connConfPropSchema.setHelpMessage(configurationProperty.getHelpMessage(propName));
        connConfPropSchema.setRequired(configurationProperty.isRequired());
        connConfPropSchema.setType(configurationProperty.getType().getName());
        connectorBundleTO.addProperty(connConfPropSchema);
      }
      LOG.debug(""String_Node_Str"",connectorBundleTO.getProperties());
      connectorBundleTOs.add(connectorBundleTO);
    }
  }
  return connectorBundleTOs;
}"
60979,"public ConnInstanceTO getConnInstanceTO(ConnInstance connInstance){
  ConnInstanceTO connInstanceTO=new ConnInstanceTO();
  connInstanceTO.setId(connInstance.getId());
  BeanUtils.copyProperties(connInstance,connInstanceTO,ignoreProperties);
  connInstanceTO.setSyncToken(connInstance.getSerializedSyncToken());
  return connInstanceTO;
}","public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) throws NotFoundException {
  ConnInstanceTO connInstanceTO=new ConnInstanceTO();
  connInstanceTO.setId(connInstance.getId());
  ConfigurationProperties properties=connBundleManager.getConfigurationProperties(connInstance.getBundleName(),connInstance.getVersion(),connInstance.getConnectorName());
  BeanUtils.copyProperties(connInstance,connInstanceTO,ignoreProperties);
  connInstanceTO.setSyncToken(connInstance.getSerializedSyncToken());
  ConnConfPropSchema connConfPropSchema;
  ConfigurationProperty configurationProperty;
  for (  String propName : properties.getPropertyNames()) {
    if (!connInstanceTO.isPropertyPresent(propName)) {
      connConfPropSchema=new ConnConfPropSchema();
      configurationProperty=properties.getProperty(propName);
      connConfPropSchema.setName(configurationProperty.getName());
      connConfPropSchema.setDisplayName(configurationProperty.getDisplayName(propName));
      connConfPropSchema.setHelpMessage(configurationProperty.getHelpMessage(propName));
      connConfPropSchema.setRequired(configurationProperty.isRequired());
      connConfPropSchema.setType(configurationProperty.getType().getName());
      ConnConfProperty property=new ConnConfProperty();
      property.setSchema(connConfPropSchema);
      connInstanceTO.addConfiguration(property);
    }
  }
  return connInstanceTO;
}"
60980,"@Test public void create(){
  ConnInstanceTO connectorTO=new ConnInstanceTO();
  connectorTO.setVersion(connidSoapVersion);
  connectorTO.setConnectorName(WebServiceConnector.class.getSimpleName());
  connectorTO.setBundleName(""String_Node_Str"");
  connectorTO.setDisplayName(""String_Node_Str"");
  Set<ConnConfProperty> conf=new HashSet<ConnConfProperty>();
  ConnConfPropSchema endpointSchema=new ConnConfPropSchema();
  endpointSchema.setName(""String_Node_Str"");
  endpointSchema.setType(String.class.getName());
  endpointSchema.setRequired(true);
  ConnConfProperty endpoint=new ConnConfProperty();
  endpoint.setSchema(endpointSchema);
  endpoint.setValue(""String_Node_Str"");
  ConnConfPropSchema servicenameSchema=new ConnConfPropSchema();
  servicenameSchema.setName(""String_Node_Str"");
  servicenameSchema.setType(String.class.getName());
  servicenameSchema.setRequired(true);
  ConnConfProperty servicename=new ConnConfProperty();
  servicename.setSchema(servicenameSchema);
  servicename.setValue(""String_Node_Str"");
  conf.add(endpoint);
  conf.add(servicename);
  connectorTO.setConfiguration(conf);
  connectorTO.addCapability(ConnectorCapability.ASYNC_CREATE);
  connectorTO.addCapability(ConnectorCapability.SYNC_CREATE);
  connectorTO.addCapability(ConnectorCapability.ASYNC_UPDATE);
  ConnInstanceTO actual=(ConnInstanceTO)restTemplate.postForObject(BASE_URL + ""String_Node_Str"",connectorTO,ConnInstanceTO.class);
  assertNotNull(actual);
  assertEquals(actual.getBundleName(),connectorTO.getBundleName());
  assertEquals(actual.getConnectorName(),connectorTO.getConnectorName());
  assertEquals(actual.getVersion(),connectorTO.getVersion());
  assertEquals(""String_Node_Str"",actual.getDisplayName());
  assertEquals(connectorTO.getCapabilities(),actual.getCapabilities());
  Throwable t=null;
  connectorTO.setId(actual.getId());
  connectorTO.removeCapability(ConnectorCapability.ASYNC_UPDATE);
  actual=null;
  try {
    actual=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",connectorTO,ConnInstanceTO.class);
  }
 catch (  HttpStatusCodeException e) {
    LOG.error(""String_Node_Str"",e);
    t=e;
  }
  assertNull(t);
  assertNotNull(actual);
  assertEquals(connectorTO.getCapabilities(),actual.getCapabilities());
  try {
    restTemplate.delete(BASE_URL + ""String_Node_Str"",actual.getId().toString());
  }
 catch (  HttpStatusCodeException e) {
    LOG.error(""String_Node_Str"",e);
    t=e;
  }
  assertNull(t);
  try {
    restTemplate.getForObject(BASE_URL + ""String_Node_Str"",ConnInstanceTO.class,actual.getId().toString());
  }
 catch (  HttpStatusCodeException e) {
    assertEquals(e.getStatusCode(),HttpStatus.NOT_FOUND);
  }
}","@Test public void create(){
  ConnInstanceTO connectorTO=new ConnInstanceTO();
  connectorTO.setVersion(connidSoapVersion);
  connectorTO.setConnectorName(WebServiceConnector.class.getName());
  connectorTO.setBundleName(""String_Node_Str"");
  connectorTO.setDisplayName(""String_Node_Str"");
  Set<ConnConfProperty> conf=new HashSet<ConnConfProperty>();
  ConnConfPropSchema endpointSchema=new ConnConfPropSchema();
  endpointSchema.setName(""String_Node_Str"");
  endpointSchema.setType(String.class.getName());
  endpointSchema.setRequired(true);
  ConnConfProperty endpoint=new ConnConfProperty();
  endpoint.setSchema(endpointSchema);
  endpoint.setValue(""String_Node_Str"");
  ConnConfPropSchema servicenameSchema=new ConnConfPropSchema();
  servicenameSchema.setName(""String_Node_Str"");
  servicenameSchema.setType(String.class.getName());
  servicenameSchema.setRequired(true);
  ConnConfProperty servicename=new ConnConfProperty();
  servicename.setSchema(servicenameSchema);
  servicename.setValue(""String_Node_Str"");
  conf.add(endpoint);
  conf.add(servicename);
  connectorTO.setConfiguration(conf);
  connectorTO.addCapability(ConnectorCapability.ASYNC_CREATE);
  connectorTO.addCapability(ConnectorCapability.SYNC_CREATE);
  connectorTO.addCapability(ConnectorCapability.ASYNC_UPDATE);
  ConnInstanceTO actual=(ConnInstanceTO)restTemplate.postForObject(BASE_URL + ""String_Node_Str"",connectorTO,ConnInstanceTO.class);
  assertNotNull(actual);
  assertEquals(actual.getBundleName(),connectorTO.getBundleName());
  assertEquals(actual.getConnectorName(),connectorTO.getConnectorName());
  assertEquals(actual.getVersion(),connectorTO.getVersion());
  assertEquals(""String_Node_Str"",actual.getDisplayName());
  assertEquals(connectorTO.getCapabilities(),actual.getCapabilities());
  Throwable t=null;
  connectorTO.setId(actual.getId());
  connectorTO.removeCapability(ConnectorCapability.ASYNC_UPDATE);
  actual=null;
  try {
    actual=restTemplate.postForObject(BASE_URL + ""String_Node_Str"",connectorTO,ConnInstanceTO.class);
  }
 catch (  HttpStatusCodeException e) {
    LOG.error(""String_Node_Str"",e);
    t=e;
  }
  assertNull(t);
  assertNotNull(actual);
  assertEquals(connectorTO.getCapabilities(),actual.getCapabilities());
  try {
    restTemplate.delete(BASE_URL + ""String_Node_Str"",actual.getId().toString());
  }
 catch (  HttpStatusCodeException e) {
    LOG.error(""String_Node_Str"",e);
    t=e;
  }
  assertNull(t);
  try {
    restTemplate.getForObject(BASE_URL + ""String_Node_Str"",ConnInstanceTO.class,actual.getId().toString());
  }
 catch (  HttpStatusCodeException e) {
    assertEquals(e.getStatusCode(),HttpStatus.NOT_FOUND);
  }
}"
60981,"public UserModalPage(final PageReference callerPageRef,final ModalWindow window,final UserTO userTO){
  super();
  setBean(userTO);
  if (userTO.getId() > 0) {
    cloneOldUserTO(userTO);
  }
  add(new Label(""String_Node_Str"",String.valueOf(userTO.getId())));
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(userTO));
  form.add(new AttributesPanel(""String_Node_Str"",userTO,form));
  final AjaxTextFieldPanel username=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(userTO,""String_Node_Str""),true);
  username.addRequiredLabel();
  form.add(username);
  final AjaxPasswordFieldPanel password=new AjaxPasswordFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(userTO,""String_Node_Str""),true);
  password.setRequired(userTO.getId() == 0);
  ((PasswordTextField)password.getField()).setResetPassword(true);
  form.add(password);
  final WebMarkupContainer mandatoryPassword=new WebMarkupContainer(""String_Node_Str"");
  mandatoryPassword.add(new Behavior(){
    private static final long serialVersionUID=1469628524240283489L;
    @Override public void onComponentTag(    final Component component,    final ComponentTag tag){
      if (userTO.getId() > 0) {
        tag.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
);
  form.add(mandatoryPassword);
  form.add(new DerivedAttributesPanel(""String_Node_Str"",userTO));
  form.add(new VirtualAttributesPanel(""String_Node_Str"",userTO));
  form.add(new ResourcesPanel(""String_Node_Str"",userTO));
  form.add(new RolesPanel(""String_Node_Str"",userTO));
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final UserTO userTO=(UserTO)form.getModelObject();
      try {
        if (userTO.getId() == 0) {
          userRestClient.create(userTO);
        }
 else {
          setupUserMod(userTO);
          if (userMod != null) {
            userRestClient.update(userMod);
          }
        }
        ((Users)callerPageRef.getPage()).setModalResult(true);
        ((Users)callerPageRef.getPage()).getPageParameters().set(Constants.PAGEPARAM_CREATE,userTO.getId() == 0);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        LOG.error(""String_Node_Str"",e);
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=null;
  if (userTO.getId() == 0) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,allowedRoles);
  form.add(submit);
  add(form);
}","public UserModalPage(final PageReference callerPageRef,final ModalWindow window,final UserTO userTO){
  super();
  setBean(userTO);
  if (userTO.getId() > 0) {
    cloneOldUserTO(userTO);
  }
  add(new Label(""String_Node_Str"",String.valueOf(userTO.getId())));
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(userTO));
  form.add(new UserDetailsPanel(""String_Node_Str"",userTO,form));
  form.add(new AttributesPanel(""String_Node_Str"",userTO,form));
  form.add(new DerivedAttributesPanel(""String_Node_Str"",userTO));
  form.add(new VirtualAttributesPanel(""String_Node_Str"",userTO));
  form.add(new ResourcesPanel(""String_Node_Str"",userTO));
  form.add(new RolesPanel(""String_Node_Str"",userTO));
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final UserTO userTO=(UserTO)form.getModelObject();
      try {
        if (userTO.getId() == 0) {
          userRestClient.create(userTO);
        }
 else {
          setupUserMod(userTO);
          if (userMod != null) {
            userRestClient.update(userMod);
          }
        }
        ((Users)callerPageRef.getPage()).setModalResult(true);
        ((Users)callerPageRef.getPage()).getPageParameters().set(Constants.PAGEPARAM_CREATE,userTO.getId() == 0);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        LOG.error(""String_Node_Str"",e);
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        target.add(feedbackPanel);
      }
    }
    @Override protected void onError(    AjaxRequestTarget target,    Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=null;
  if (userTO.getId() == 0) {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    allowedRoles=xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  }
  MetaDataRoleAuthorizationStrategy.authorize(submit,RENDER,allowedRoles);
  form.add(submit);
  add(form);
}"
60982,"public ConnectorModalPage(final PageReference callerPageRef,final ModalWindow window,final ConnInstanceTO connectorTO,final boolean createFlag){
  super();
  selectedCapabilities=new ArrayList(createFlag ? EnumSet.noneOf(ConnectorCapability.class) : connectorTO.getCapabilities());
  IModel<List<ConnConfProperty>> selectedBundleProperties=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      List<ConnConfProperty> result;
      if (createFlag) {
        connectorTO.setConnectorName(selectedBundleTO.getConnectorName());
        connectorTO.setVersion(selectedBundleTO.getVersion());
        result=new ArrayList<ConnConfProperty>();
        ConnConfProperty propertyTO;
        for (        ConnConfPropSchema key : selectedBundleTO.getProperties()) {
          propertyTO=new ConnConfProperty();
          propertyTO.setSchema(key);
          result.add(propertyTO);
        }
      }
 else {
        selectedBundleTO.setBundleName(connectorTO.getBundleName());
        selectedBundleTO.setVersion(connectorTO.getVersion());
        result=new ArrayList<ConnConfProperty>(connectorTO.getConfiguration());
      }
      return result;
    }
  }
;
  final AjaxTextFieldPanel connectorName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  connectorName.setOutputMarkupId(true);
  connectorName.setEnabled(false);
  final AjaxTextFieldPanel displayName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  displayName.addRequiredLabel();
  final AjaxTextFieldPanel version=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  version.setEnabled(false);
  final IModel<List<ConnBundleTO>> bundles=new LoadableDetachableModel<List<ConnBundleTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnBundleTO> load(){
      return restClient.getAllBundles();
    }
  }
;
  final AjaxDropDownChoicePanel<ConnBundleTO> bundle=new AjaxDropDownChoicePanel<ConnBundleTO>(""String_Node_Str"",""String_Node_Str"",new Model(null),false);
  bundle.setStyleShet(""String_Node_Str"");
  bundle.setChoices(bundles.getObject());
  bundle.setChoiceRenderer(new ChoiceRenderer<ConnBundleTO>(){
    private static final long serialVersionUID=-1945543182376191187L;
    @Override public Object getDisplayValue(    final ConnBundleTO object){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
    @Override public String getIdValue(    final ConnBundleTO object,    final int index){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
  }
);
  ((DropDownChoice)bundle.getField()).setNullValid(true);
  bundle.setRequired(true);
  bundle.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      connectorTO.setConfiguration(new HashSet<ConnConfProperty>());
      ((DropDownChoice)bundle.getField()).setNullValid(false);
      target.add(bundle.getField());
      target.add(propertiesContainer);
      target.add(connectorName);
      target.add(version);
    }
  }
);
  bundle.getField().setModel(new IModel<ConnBundleTO>(){
    private static final long serialVersionUID=-3736598995576061229L;
    @Override public ConnBundleTO getObject(){
      return selectedBundleTO;
    }
    @Override public void setObject(    final ConnBundleTO object){
      selectedBundleTO=object;
    }
    @Override public void detach(){
    }
  }
);
  bundle.addRequiredLabel();
  bundle.setEnabled(createFlag);
  final ListView<ConnConfProperty> propView=new ListView<ConnConfProperty>(""String_Node_Str"",selectedBundleProperties){
    private static final long serialVersionUID=9101744072914090143L;
    @Override protected void populateItem(    final ListItem<ConnConfProperty> item){
      final ConnConfProperty property=item.getModelObject();
      final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
      item.add(label);
      final FieldPanel field;
      if (GUARDED_STRING.equals(property.getSchema().getType())) {
        field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
      }
 else {
        field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
        if (property.getSchema().isRequired()) {
          field.addRequiredLabel();
        }
      }
      item.add(field);
      item.add(new AjaxCheckBoxPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<Boolean>(property,""String_Node_Str""),true).setTitle(""String_Node_Str""));
      connectorTO.getConfiguration().add(property);
    }
  }
;
  propertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  propertiesContainer.setOutputMarkupId(true);
  propertiesContainer.add(propView);
  Form connectorForm=new Form(""String_Node_Str"");
  connectorForm.setModel(new CompoundPropertyModel(connectorTO));
  connectorForm.add(propertiesContainer);
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
      connector.setBundleName(((ConnBundleTO)bundle.getModelObject()).getBundleName());
      if (!selectedCapabilities.isEmpty()) {
        connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
      }
 else {
        connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
      }
      try {
        if (createFlag) {
          restClient.create(connector);
        }
 else {
          restClient.update(connector);
        }
        ((Resources)callerPageRef.getPage()).setOperationResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        ((Resources)callerPageRef.getPage()).setOperationResult(false);
        LOG.error(""String_Node_Str"" + connector);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=createFlag ? xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"") : xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  connectorForm.add(connectorName);
  connectorForm.add(displayName);
  connectorForm.add(bundle);
  connectorForm.add(version);
  final IModel<List<ConnectorCapability>> capabilities=new LoadableDetachableModel<List<ConnectorCapability>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnectorCapability> load(){
      return Arrays.asList(ConnectorCapability.values());
    }
  }
;
  capabilitiesPalette=new CheckBoxMultipleChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),capabilities);
  connectorForm.add(capabilitiesPalette);
  final AjaxCheckBoxPanel resetToken=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new Model(null),false);
  resetToken.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget art){
      if (resetToken.getModelObject()) {
        connectorTO.setSyncToken(null);
      }
    }
  }
);
  connectorForm.add(resetToken);
  connectorForm.add(submit);
  add(connectorForm);
}","public ConnectorModalPage(final PageReference callerPageRef,final ModalWindow window,final ConnInstanceTO connectorTO,final boolean createFlag){
  super();
  selectedCapabilities=new ArrayList(createFlag ? EnumSet.noneOf(ConnectorCapability.class) : connectorTO.getCapabilities());
  IModel<List<ConnConfProperty>> selectedBundleProperties=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      List<ConnConfProperty> result;
      if (createFlag) {
        connectorTO.setConnectorName(selectedBundleTO.getConnectorName());
        connectorTO.setVersion(selectedBundleTO.getVersion());
        result=new ArrayList<ConnConfProperty>();
        ConnConfProperty propertyTO;
        for (        ConnConfPropSchema key : selectedBundleTO.getProperties()) {
          propertyTO=new ConnConfProperty();
          propertyTO.setSchema(key);
          result.add(propertyTO);
        }
      }
 else {
        selectedBundleTO.setBundleName(connectorTO.getBundleName());
        selectedBundleTO.setVersion(connectorTO.getVersion());
        result=new ArrayList<ConnConfProperty>(connectorTO.getConfiguration());
      }
      return result;
    }
  }
;
  final AjaxTextFieldPanel connectorName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  connectorName.setOutputMarkupId(true);
  connectorName.setEnabled(false);
  final AjaxTextFieldPanel displayName=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  displayName.addRequiredLabel();
  final AjaxTextFieldPanel version=new AjaxTextFieldPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<String>(connectorTO,""String_Node_Str""),false);
  displayName.setOutputMarkupId(true);
  version.setEnabled(false);
  final IModel<List<ConnBundleTO>> bundles=new LoadableDetachableModel<List<ConnBundleTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnBundleTO> load(){
      return restClient.getAllBundles();
    }
  }
;
  final AjaxDropDownChoicePanel<ConnBundleTO> bundle=new AjaxDropDownChoicePanel<ConnBundleTO>(""String_Node_Str"",""String_Node_Str"",new Model(null),false);
  bundle.setStyleShet(""String_Node_Str"");
  bundle.setChoices(bundles.getObject());
  bundle.setChoiceRenderer(new ChoiceRenderer<ConnBundleTO>(){
    private static final long serialVersionUID=-1945543182376191187L;
    @Override public Object getDisplayValue(    final ConnBundleTO object){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
    @Override public String getIdValue(    final ConnBundleTO object,    final int index){
      return object.getBundleName() + ""String_Node_Str"" + object.getVersion();
    }
  }
);
  ((DropDownChoice)bundle.getField()).setNullValid(true);
  bundle.setRequired(true);
  bundle.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget target){
      connectorTO.setConfiguration(new HashSet<ConnConfProperty>());
      ((DropDownChoice)bundle.getField()).setNullValid(false);
      target.add(bundle.getField());
      target.add(propertiesContainer);
      target.add(connectorName);
      target.add(version);
    }
  }
);
  bundle.getField().setModel(new IModel<ConnBundleTO>(){
    private static final long serialVersionUID=-3736598995576061229L;
    @Override public ConnBundleTO getObject(){
      return selectedBundleTO;
    }
    @Override public void setObject(    final ConnBundleTO object){
      selectedBundleTO=object;
    }
    @Override public void detach(){
    }
  }
);
  bundle.addRequiredLabel();
  bundle.setEnabled(createFlag);
  final ListView<ConnConfProperty> propView=new ListView<ConnConfProperty>(""String_Node_Str"",selectedBundleProperties){
    private static final long serialVersionUID=9101744072914090143L;
    @Override protected void populateItem(    final ListItem<ConnConfProperty> item){
      final ConnConfProperty property=item.getModelObject();
      final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
      item.add(label);
      final FieldPanel field;
      if (GUARDED_STRING.equals(property.getSchema().getType())) {
        field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
      }
 else {
        field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
        if (property.getSchema().isRequired()) {
          field.addRequiredLabel();
        }
      }
      item.add(field);
      item.add(new AjaxCheckBoxPanel(""String_Node_Str"",""String_Node_Str"",new PropertyModel<Boolean>(property,""String_Node_Str""),true).setTitle(""String_Node_Str""));
      connectorTO.getConfiguration().add(property);
    }
  }
;
  propertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  propertiesContainer.setOutputMarkupId(true);
  propertiesContainer.add(propView);
  Form connectorForm=new Form(""String_Node_Str"");
  connectorForm.setModel(new CompoundPropertyModel(connectorTO));
  connectorForm.add(propertiesContainer);
  final AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new Model(getString(""String_Node_Str""))){
    private static final long serialVersionUID=-958724007591692537L;
    @Override protected void onSubmit(    final AjaxRequestTarget target,    final Form form){
      final ConnInstanceTO connector=(ConnInstanceTO)form.getDefaultModelObject();
      connector.setBundleName(((ConnBundleTO)bundle.getModelObject()).getBundleName());
      if (!selectedCapabilities.isEmpty()) {
        connector.setCapabilities(EnumSet.copyOf(selectedCapabilities));
      }
 else {
        connector.setCapabilities(EnumSet.noneOf(ConnectorCapability.class));
      }
      try {
        if (createFlag) {
          restClient.create(connector);
        }
 else {
          restClient.update(connector);
        }
        ((Resources)callerPageRef.getPage()).setOperationResult(true);
        window.close(target);
      }
 catch (      SyncopeClientCompositeErrorException e) {
        error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
        ((Resources)callerPageRef.getPage()).setOperationResult(false);
        LOG.error(""String_Node_Str"" + connector);
      }
    }
    @Override protected void onError(    final AjaxRequestTarget target,    final Form form){
      target.add(feedbackPanel);
    }
  }
;
  String allowedRoles=createFlag ? xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"") : xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",""String_Node_Str"");
  MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,allowedRoles);
  connectorForm.add(connectorName);
  connectorForm.add(displayName);
  connectorForm.add(bundle);
  connectorForm.add(version);
  final IModel<List<ConnectorCapability>> capabilities=new LoadableDetachableModel<List<ConnectorCapability>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnectorCapability> load(){
      return Arrays.asList(ConnectorCapability.values());
    }
  }
;
  capabilitiesPalette=new CheckBoxMultipleChoice(""String_Node_Str"",new PropertyModel(this,""String_Node_Str""),capabilities);
  connectorForm.add(capabilitiesPalette);
  connectorForm.add(submit);
  add(connectorForm);
}"
60983,"@Override protected void onUpdate(final AjaxRequestTarget art){
  if (resetToken.getModelObject()) {
    connectorTO.setSyncToken(null);
  }
}","@Override protected void onUpdate(final AjaxRequestTarget target){
  connectorTO.setConfiguration(new HashSet<ConnConfProperty>());
  ((DropDownChoice)bundle.getField()).setNullValid(false);
  target.add(bundle.getField());
  target.add(propertiesContainer);
  target.add(connectorName);
  target.add(version);
}"
60984,"public ResourceModalPage(final PageReference callPageRef,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  super();
  uSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  uDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  uVirSchemaAttrNames=schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
  final IModel<List<ConnInstanceTO>> connectors=new LoadableDetachableModel<List<ConnInstanceTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnInstanceTO> load(){
      return connectorRestClient.getAllConnectors();
    }
  }
;
  final IModel<List<IntMappingType>> intMappingTypes=new LoadableDetachableModel<List<IntMappingType>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<IntMappingType> load(){
      return Arrays.asList(IntMappingType.values());
    }
  }
;
  final IModel<List<ConnConfProperty>> connectorPropertiesModel=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      Set<ConnConfProperty> props=resourceTO.getConnectorConfigurationProperties();
      if (props == null || props.isEmpty() || createFlag) {
        props=overridableConnectorProperties;
      }
      return new ArrayList<ConnConfProperty>(props);
    }
  }
;
  updateResourceSchemaNames(resourceTO);
  updateConnectorProperties(resourceTO.getConnectorId());
  final ConnInstanceTO connectorTO=new ConnInstanceTO();
  if (!createFlag) {
    connectorTO.setId(resourceTO.getConnectorId());
  }
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(resourceTO));
  final AjaxTextFieldPanel resourceName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  resourceName.setEnabled(createFlag);
  resourceName.addRequiredLabel();
  form.add(resourceName);
  final AjaxTextFieldPanel accountLink=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  form.add(accountLink);
  final AjaxCheckBoxPanel forceMandatoryConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(forceMandatoryConstraint);
  final AjaxCheckBoxPanel propagationPrimary=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(propagationPrimary);
  final AjaxNumberFieldPanel propagationPriority=new AjaxNumberFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Number>(resourceTO,""String_Node_Str""),false);
  form.add(propagationPriority);
  final AjaxDropDownChoicePanel<PropagationMode> propagationMode=new AjaxDropDownChoicePanel<PropagationMode>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  propagationMode.setChoices(Arrays.asList(PropagationMode.values()));
  form.add(propagationMode);
  final AjaxDropDownChoicePanel<TraceLevel> createTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  createTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(createTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> updateTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  updateTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(updateTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> deleteTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  deleteTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(deleteTraceLevel);
  mappingContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingContainer.setOutputMarkupId(true);
  form.add(mappingContainer);
  connectorPropertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  connectorPropertiesContainer.setOutputMarkupId(true);
  form.add(connectorPropertiesContainer);
  final AjaxDropDownChoicePanel<ConnInstanceTO> connector=new AjaxDropDownChoicePanel<ConnInstanceTO>(""String_Node_Str"",getString(""String_Node_Str""),new Model<ConnInstanceTO>(connectorTO),false);
  connector.setChoices(connectors.getObject());
  connector.setChoiceRenderer(new ChoiceRenderer(""String_Node_Str"",""String_Node_Str""));
  connector.getField().setModel(new IModel<ConnInstanceTO>(){
    private static final long serialVersionUID=-4202872830392400310L;
    @Override public ConnInstanceTO getObject(){
      return connectorTO;
    }
    @Override public void setObject(    final ConnInstanceTO connector){
      resourceTO.setConnectorId(connector.getId());
    }
    @Override public void detach(){
    }
  }
);
  connector.addRequiredLabel();
  connector.setEnabled(createFlag);
  form.add(connector);
  final ListView<SchemaMappingTO> mappings=new ListView<SchemaMappingTO>(""String_Node_Str"",resourceTO.getMappings()){
    private static final long serialVersionUID=4949588177564901031L;
    @Override protected void populateItem(    final ListItem<SchemaMappingTO> item){
      final SchemaMappingTO mappingTO=item.getModelObject();
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
        private static final long serialVersionUID=7170946748485726506L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int index=-1;
          for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
            if (mappingTO.equals(resourceTO.getMappings().get(i))) {
              index=i;
            }
          }
          if (index != -1) {
            resourceTO.getMappings().remove(index);
            item.getParent().removeAll();
            target.add(mappingContainer);
          }
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=-7927968187160354605L;
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      final AjaxDropDownChoicePanel intAttrNames=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
      intAttrNames.setChoices(resourceSchemaNames);
      intAttrNames.setRequired(true);
      intAttrNames.setStyleShet(""String_Node_Str"");
      if (mappingTO.getIntMappingType() == null) {
        intAttrNames.setChoices(Collections.EMPTY_LIST);
      }
 else {
switch (mappingTO.getIntMappingType()) {
case UserSchema:
          intAttrNames.setChoices(uSchemaAttrNames);
        break;
case UserDerivedSchema:
      intAttrNames.setChoices(uDerSchemaAttrNames);
    break;
case UserVirtualSchema:
  intAttrNames.setChoices(uVirSchemaAttrNames);
break;
case SyncopeUserId:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
case Password:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
case Username:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
default :
intAttrNames.setChoices(Collections.EMPTY_LIST);
}
}
item.add(intAttrNames);
final IntMappingTypesDropDownChoice mappingTypesPanel=new IntMappingTypesDropDownChoice(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<IntMappingType>(mappingTO,""String_Node_Str""),intAttrNames);
mappingTypesPanel.setRequired(true);
mappingTypesPanel.setChoices(intMappingTypes.getObject());
mappingTypesPanel.setStyleShet(""String_Node_Str"");
item.add(mappingTypesPanel);
final FieldPanel extAttrName;
if (resourceSchemaNames.isEmpty()) {
extAttrName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(mappingTO,""String_Node_Str""),true);
}
 else {
extAttrName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
((AjaxDropDownChoicePanel)extAttrName).setChoices(resourceSchemaNames);
}
boolean required=mappingTO != null && !mappingTO.isAccountid() && !mappingTO.isPassword();
extAttrName.setRequired(required);
extAttrName.setEnabled(required);
extAttrName.setStyleShet(""String_Node_Str"");
item.add(extAttrName);
final AjaxTextFieldPanel mandatoryCondition=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
mandatoryCondition.setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
mandatoryCondition.setStyleShet(""String_Node_Str"");
item.add(mandatoryCondition);
final AjaxCheckBoxPanel accountId=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),false);
accountId.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!accountId.getModelObject() && !mappingTO.isPassword());
extAttrName.setModelObject(null);
extAttrName.setRequired(!accountId.getModelObject());
target.add(extAttrName);
}
}
);
item.add(accountId);
final AjaxCheckBoxPanel password=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
password.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!mappingTO.isAccountid() && !password.getModelObject());
extAttrName.setModelObject(null);
extAttrName.setRequired(!password.getModelObject());
target.add(extAttrName);
}
}
);
item.add(password);
}
}
;
mappings.setReuseItems(true);
mappingContainer.add(mappings);
final AjaxButton addSchemaMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-4804368561204623354L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
resourceTO.getMappings().add(new SchemaMappingTO());
target.add(mappingContainer);
}
@Override protected void onError(AjaxRequestTarget target,Form<?> form){
}
}
;
addSchemaMappingBtn.setDefaultFormProcessing(false);
addSchemaMappingBtn.setEnabled(!createFlag);
mappingContainer.add(addSchemaMappingBtn);
connectorPropertiesContainer.add(new ListView<ConnConfProperty>(""String_Node_Str"",connectorPropertiesModel){
private static final long serialVersionUID=9101744072914090143L;
@Override protected void populateItem(final ListItem<ConnConfProperty> item){
final ConnConfProperty property=item.getModelObject();
final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
item.add(label);
final FieldPanel field;
if (GUARDED_STRING.equals(property.getSchema().getType())) {
field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
}
 else {
field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),false).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
if (property.getSchema().isRequired()) {
field.addRequiredLabel();
}
}
field.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
target.add(mappingContainer);
}
}
);
item.add(field);
resourceTO.getConnectorConfigurationProperties().add(property);
}
}
);
connector.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
updateConnectorProperties(resourceTO.getConnectorId());
target.add(mappingContainer);
target.add(connectorPropertiesContainer);
}
}
);
form.add(new ResourceSecurityPanel(""String_Node_Str"",resourceTO));
AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
int accountIdCount=0;
for (SchemaMappingTO mapping : resourceTO.getMappings()) {
if (mapping.isAccountid()) {
accountIdCount++;
}
}
if (accountIdCount == 0 || accountIdCount > 1) {
error(getString(""String_Node_Str""));
target.add(feedbackPanel);
}
 else {
try {
if (createFlag) {
restClient.create(resourceTO);
}
 else {
restClient.update(resourceTO);
}
((Resources)callPageRef.getPage()).setOperationResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
LOG.error(""String_Node_Str"",resourceTO);
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
target.add(feedbackPanel);
}
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.add(feedbackPanel);
}
}
;
form.add(submit);
add(form);
MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",createFlag ? ""String_Node_Str"" : ""String_Node_Str""));
}","public ResourceModalPage(final PageReference callPageRef,final ModalWindow window,final ResourceTO resourceTO,final boolean createFlag){
  super();
  uSchemaAttrNames=schemaRestClient.getSchemaNames(""String_Node_Str"");
  uDerSchemaAttrNames=schemaRestClient.getDerivedSchemaNames(""String_Node_Str"");
  uVirSchemaAttrNames=schemaRestClient.getVirtualSchemaNames(""String_Node_Str"");
  final IModel<List<ConnInstanceTO>> connectors=new LoadableDetachableModel<List<ConnInstanceTO>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnInstanceTO> load(){
      return connectorRestClient.getAllConnectors();
    }
  }
;
  final IModel<List<IntMappingType>> intMappingTypes=new LoadableDetachableModel<List<IntMappingType>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<IntMappingType> load(){
      return Arrays.asList(IntMappingType.values());
    }
  }
;
  final IModel<List<ConnConfProperty>> connectorPropertiesModel=new LoadableDetachableModel<List<ConnConfProperty>>(){
    private static final long serialVersionUID=5275935387613157437L;
    @Override protected List<ConnConfProperty> load(){
      Set<ConnConfProperty> props=resourceTO.getConnectorConfigurationProperties();
      if (props == null || props.isEmpty() || createFlag) {
        props=overridableConnectorProperties;
      }
      return new ArrayList<ConnConfProperty>(props);
    }
  }
;
  updateResourceSchemaNames(resourceTO);
  updateConnectorProperties(resourceTO.getConnectorId());
  final ConnInstanceTO connectorTO=new ConnInstanceTO();
  if (!createFlag) {
    connectorTO.setId(resourceTO.getConnectorId());
  }
  final Form form=new Form(""String_Node_Str"");
  form.setModel(new CompoundPropertyModel(resourceTO));
  final AjaxTextFieldPanel resourceName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  resourceName.setEnabled(createFlag);
  resourceName.addRequiredLabel();
  form.add(resourceName);
  final AjaxTextFieldPanel accountLink=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(resourceTO,""String_Node_Str""),false);
  form.add(accountLink);
  final AjaxCheckBoxPanel forceMandatoryConstraint=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(forceMandatoryConstraint);
  final AjaxCheckBoxPanel propagationPrimary=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Boolean>(resourceTO,""String_Node_Str""),false);
  form.add(propagationPrimary);
  final AjaxNumberFieldPanel propagationPriority=new AjaxNumberFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<Number>(resourceTO,""String_Node_Str""),false);
  form.add(propagationPriority);
  final AjaxDropDownChoicePanel<PropagationMode> propagationMode=new AjaxDropDownChoicePanel<PropagationMode>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  propagationMode.setChoices(Arrays.asList(PropagationMode.values()));
  form.add(propagationMode);
  final AjaxDropDownChoicePanel<TraceLevel> createTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  createTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(createTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> updateTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  updateTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(updateTraceLevel);
  final AjaxDropDownChoicePanel<TraceLevel> deleteTraceLevel=new AjaxDropDownChoicePanel<TraceLevel>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(resourceTO,""String_Node_Str""),false);
  deleteTraceLevel.setChoices(Arrays.asList(TraceLevel.values()));
  form.add(deleteTraceLevel);
  final AjaxCheckBoxPanel resetToken=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new Model(null),false);
  resetToken.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
    private static final long serialVersionUID=-1107858522700306810L;
    @Override protected void onUpdate(    final AjaxRequestTarget art){
      if (resetToken.getModelObject()) {
        resourceTO.setSyncToken(null);
      }
    }
  }
);
  form.add(resetToken);
  mappingContainer=new WebMarkupContainer(""String_Node_Str"");
  mappingContainer.setOutputMarkupId(true);
  form.add(mappingContainer);
  connectorPropertiesContainer=new WebMarkupContainer(""String_Node_Str"");
  connectorPropertiesContainer.setOutputMarkupId(true);
  form.add(connectorPropertiesContainer);
  final AjaxDropDownChoicePanel<ConnInstanceTO> connector=new AjaxDropDownChoicePanel<ConnInstanceTO>(""String_Node_Str"",getString(""String_Node_Str""),new Model<ConnInstanceTO>(connectorTO),false);
  connector.setChoices(connectors.getObject());
  connector.setChoiceRenderer(new ChoiceRenderer(""String_Node_Str"",""String_Node_Str""));
  connector.getField().setModel(new IModel<ConnInstanceTO>(){
    private static final long serialVersionUID=-4202872830392400310L;
    @Override public ConnInstanceTO getObject(){
      return connectorTO;
    }
    @Override public void setObject(    final ConnInstanceTO connector){
      resourceTO.setConnectorId(connector.getId());
    }
    @Override public void detach(){
    }
  }
);
  connector.addRequiredLabel();
  connector.setEnabled(createFlag);
  form.add(connector);
  final ListView<SchemaMappingTO> mappings=new ListView<SchemaMappingTO>(""String_Node_Str"",resourceTO.getMappings()){
    private static final long serialVersionUID=4949588177564901031L;
    @Override protected void populateItem(    final ListItem<SchemaMappingTO> item){
      final SchemaMappingTO mappingTO=item.getModelObject();
      item.add(new AjaxDecoratedCheckbox(""String_Node_Str"",new Model(Boolean.FALSE)){
        private static final long serialVersionUID=7170946748485726506L;
        @Override protected void onUpdate(        final AjaxRequestTarget target){
          int index=-1;
          for (int i=0; i < resourceTO.getMappings().size() && index == -1; i++) {
            if (mappingTO.equals(resourceTO.getMappings().get(i))) {
              index=i;
            }
          }
          if (index != -1) {
            resourceTO.getMappings().remove(index);
            item.getParent().removeAll();
            target.add(mappingContainer);
          }
        }
        @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
          return new AjaxPreprocessingCallDecorator(super.getAjaxCallDecorator()){
            private static final long serialVersionUID=-7927968187160354605L;
            @Override public CharSequence preDecorateScript(            final CharSequence script){
              return ""String_Node_Str"" + getString(""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str""+ ""String_Node_Str"";
            }
          }
;
        }
      }
);
      final AjaxDropDownChoicePanel intAttrNames=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
      intAttrNames.setChoices(resourceSchemaNames);
      intAttrNames.setRequired(true);
      intAttrNames.setStyleShet(""String_Node_Str"");
      if (mappingTO.getIntMappingType() == null) {
        intAttrNames.setChoices(Collections.EMPTY_LIST);
      }
 else {
switch (mappingTO.getIntMappingType()) {
case UserSchema:
          intAttrNames.setChoices(uSchemaAttrNames);
        break;
case UserDerivedSchema:
      intAttrNames.setChoices(uDerSchemaAttrNames);
    break;
case UserVirtualSchema:
  intAttrNames.setChoices(uVirSchemaAttrNames);
break;
case SyncopeUserId:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
case Password:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
case Username:
intAttrNames.setEnabled(false);
intAttrNames.setRequired(false);
intAttrNames.setChoices(Collections.EMPTY_LIST);
mappingTO.setIntAttrName(""String_Node_Str"");
break;
default :
intAttrNames.setChoices(Collections.EMPTY_LIST);
}
}
item.add(intAttrNames);
final IntMappingTypesDropDownChoice mappingTypesPanel=new IntMappingTypesDropDownChoice(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<IntMappingType>(mappingTO,""String_Node_Str""),intAttrNames);
mappingTypesPanel.setRequired(true);
mappingTypesPanel.setChoices(intMappingTypes.getObject());
mappingTypesPanel.setStyleShet(""String_Node_Str"");
item.add(mappingTypesPanel);
final FieldPanel extAttrName;
if (resourceSchemaNames.isEmpty()) {
extAttrName=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel<String>(mappingTO,""String_Node_Str""),true);
}
 else {
extAttrName=new AjaxDropDownChoicePanel<String>(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
((AjaxDropDownChoicePanel)extAttrName).setChoices(resourceSchemaNames);
}
boolean required=mappingTO != null && !mappingTO.isAccountid() && !mappingTO.isPassword();
extAttrName.setRequired(required);
extAttrName.setEnabled(required);
extAttrName.setStyleShet(""String_Node_Str"");
item.add(extAttrName);
final AjaxTextFieldPanel mandatoryCondition=new AjaxTextFieldPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
mandatoryCondition.setChoices(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str""}));
mandatoryCondition.setStyleShet(""String_Node_Str"");
item.add(mandatoryCondition);
final AjaxCheckBoxPanel accountId=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),false);
accountId.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!accountId.getModelObject() && !mappingTO.isPassword());
extAttrName.setModelObject(null);
extAttrName.setRequired(!accountId.getModelObject());
target.add(extAttrName);
}
}
);
item.add(accountId);
final AjaxCheckBoxPanel password=new AjaxCheckBoxPanel(""String_Node_Str"",getString(""String_Node_Str""),new PropertyModel(mappingTO,""String_Node_Str""),true);
password.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
extAttrName.setEnabled(!mappingTO.isAccountid() && !password.getModelObject());
extAttrName.setModelObject(null);
extAttrName.setRequired(!password.getModelObject());
target.add(extAttrName);
}
}
);
item.add(password);
}
}
;
mappings.setReuseItems(true);
mappingContainer.add(mappings);
final AjaxButton addSchemaMappingBtn=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-4804368561204623354L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
resourceTO.getMappings().add(new SchemaMappingTO());
target.add(mappingContainer);
}
@Override protected void onError(AjaxRequestTarget target,Form<?> form){
}
}
;
addSchemaMappingBtn.setDefaultFormProcessing(false);
addSchemaMappingBtn.setEnabled(!createFlag);
mappingContainer.add(addSchemaMappingBtn);
connectorPropertiesContainer.add(new ListView<ConnConfProperty>(""String_Node_Str"",connectorPropertiesModel){
private static final long serialVersionUID=9101744072914090143L;
@Override protected void populateItem(final ListItem<ConnConfProperty> item){
final ConnConfProperty property=item.getModelObject();
final Label label=new Label(""String_Node_Str"",property.getSchema().getDisplayName() == null || property.getSchema().getDisplayName().isEmpty() ? property.getSchema().getName() : property.getSchema().getDisplayName());
item.add(label);
final FieldPanel field;
if (GUARDED_STRING.equals(property.getSchema().getType())) {
field=new AjaxPasswordFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),true).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
}
 else {
field=new AjaxTextFieldPanel(""String_Node_Str"",label.getDefaultModelObjectAsString(),new PropertyModel<String>(property,""String_Node_Str""),false).setRequired(property.getSchema().isRequired()).setTitle(property.getSchema().getHelpMessage());
if (property.getSchema().isRequired()) {
field.addRequiredLabel();
}
}
field.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
target.add(mappingContainer);
}
}
);
item.add(field);
resourceTO.getConnectorConfigurationProperties().add(property);
}
}
);
connector.getField().add(new AjaxFormComponentUpdatingBehavior(""String_Node_Str""){
private static final long serialVersionUID=-1107858522700306810L;
@Override protected void onUpdate(AjaxRequestTarget target){
mappings.removeAll();
addSchemaMappingBtn.setEnabled(resourceTO.getConnectorId() != null && resourceTO.getConnectorId() > 0);
updateResourceSchemaNames(resourceTO);
updateConnectorProperties(resourceTO.getConnectorId());
target.add(mappingContainer);
target.add(connectorPropertiesContainer);
}
}
);
form.add(new ResourceSecurityPanel(""String_Node_Str"",resourceTO));
AjaxButton submit=new IndicatingAjaxButton(""String_Node_Str"",new ResourceModel(""String_Node_Str"")){
private static final long serialVersionUID=-958724007591692537L;
@Override protected void onSubmit(final AjaxRequestTarget target,final Form form){
ResourceTO resourceTO=(ResourceTO)form.getDefaultModelObject();
int accountIdCount=0;
for (SchemaMappingTO mapping : resourceTO.getMappings()) {
if (mapping.isAccountid()) {
accountIdCount++;
}
}
if (accountIdCount == 0 || accountIdCount > 1) {
error(getString(""String_Node_Str""));
target.add(feedbackPanel);
}
 else {
try {
if (createFlag) {
restClient.create(resourceTO);
}
 else {
restClient.update(resourceTO);
}
((Resources)callPageRef.getPage()).setOperationResult(true);
window.close(target);
}
 catch (SyncopeClientCompositeErrorException e) {
LOG.error(""String_Node_Str"",resourceTO);
error(getString(""String_Node_Str"") + ""String_Node_Str"" + e.getMessage());
target.add(feedbackPanel);
}
}
}
@Override protected void onError(final AjaxRequestTarget target,final Form form){
target.add(feedbackPanel);
}
}
;
form.add(submit);
add(form);
MetaDataRoleAuthorizationStrategy.authorize(submit,ENABLE,xmlRolesReader.getAllAllowedRoles(""String_Node_Str"",createFlag ? ""String_Node_Str"" : ""String_Node_Str""));
}"
60985,"public void setSpecification(AccountPolicy specification){
  this.specification=specification;
}","public void setSpecification(AccountPolicySpec specification){
  this.specification=specification;
}"
60986,"public AccountPolicy getSpecification(){
  return specification;
}","public AccountPolicySpec getSpecification(){
  return specification;
}"
60987,"public void setSpecification(PasswordPolicy specification){
  this.specification=specification;
}","public void setSpecification(PasswordPolicySpec specification){
  this.specification=specification;
}"
60988,"public PasswordPolicy getSpecification(){
  return specification;
}","public PasswordPolicySpec getSpecification(){
  return specification;
}"
60989,"public void setName(String name){
  this.name=name;
}","public void setName(final String name){
  this.name=name;
}"
60990,"public boolean addEntitlement(String entitlement){
  return entitlements.add(entitlement);
}","public boolean addEntitlement(final String entitlement){
  return entitlements.add(entitlement);
}"
60991,"public PasswordPolicyTO getPasswordPolicy(){
  return passwordPolicy;
}","public ReferenceMod getPasswordPolicy(){
  return passwordPolicy;
}"
60992,"public void setEntitlements(List<String> entitlements){
  this.entitlements.clear();
  if (entitlements != null && !entitlements.isEmpty()) {
    this.entitlements.addAll(entitlements);
  }
}","public void setEntitlements(final List<String> entitlements){
  this.entitlements.clear();
  if (entitlements != null && !entitlements.isEmpty()) {
    this.entitlements.addAll(entitlements);
  }
}"
60993,"public void setPasswordPolicy(PasswordPolicyTO passwordPolicy){
  this.passwordPolicy=passwordPolicy;
}","public void setPasswordPolicy(final ReferenceMod passwordPolicy){
  this.passwordPolicy=passwordPolicy;
}"
60994,"public boolean removeEntitlement(String entitlement){
  return entitlements.remove(entitlement);
}","public boolean removeEntitlement(final String entitlement){
  return entitlements.remove(entitlement);
}"
60995,"public void setSpecification(SyncPolicy specification){
  this.specification=specification;
}","public void setSpecification(SyncPolicySpec specification){
  this.specification=specification;
}"
60996,"public SyncPolicy getSpecification(){
  return specification;
}","public SyncPolicySpec getSpecification(){
  return specification;
}"
60997,"public void setSpecification(final AccountPolicy specification){
  this.specification=specification;
}","public void setSpecification(final AccountPolicySpec specification){
  this.specification=specification;
}"
60998,"public AccountPolicy getSpecification(){
  return specification;
}","public AccountPolicySpec getSpecification(){
  return specification;
}"
60999,"public void setSpecification(final PasswordPolicy specification){
  this.specification=specification;
}","public void setSpecification(final PasswordPolicySpec specification){
  this.specification=specification;
}"
61000,"public PasswordPolicy getSpecification(){
  return specification;
}","public PasswordPolicySpec getSpecification(){
  return specification;
}"
